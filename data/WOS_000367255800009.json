{"auto_keywords": [{"score": 0.029966379134368823, "phrase": "navigation_expressions"}, {"score": 0.00481495049065317, "phrase": "static_typing"}, {"score": 0.004707188147442449, "phrase": "backward_axes"}, {"score": 0.004671820834531505, "phrase": "xquery"}, {"score": 0.0046192222897398685, "phrase": "functional_language"}, {"score": 0.004567230180529598, "phrase": "xml_data"}, {"score": 0.00439822558066457, "phrase": "xml"}, {"score": 0.004203343568960231, "phrase": "strong_static_typing"}, {"score": 0.0033008858616145205, "phrase": "regular_tree_types"}, {"score": 0.003226899588787952, "phrase": "xml_world"}, {"score": 0.0028058141911641225, "phrase": "'backward_axes"}, {"score": 0.0027532820796396713, "phrase": "e.g._the_siblings"}, {"score": 0.002562451837774567, "phrase": "type_system"}, {"score": 0.002514464610980629, "phrase": "logic-based_language"}, {"score": 0.0024487847651989128, "phrase": "inner_tree_nodes"}, {"score": 0.0022618378709785172, "phrase": "extended_types"}, {"score": 0.0022363199197710385, "phrase": "classical_regular_tree_types"}, {"score": 0.0021778895748464024, "phrase": "hybrid_system"}, {"score": 0.002153316680437517, "phrase": "type_languages"}, {"score": 0.0021049977753042253, "phrase": "net_increase"}], "paper_keywords": ["XQuery", " XML", " regular tree types", " mu-calculus", " Languages", " Theory", " Verification"], "paper_abstract": "XQuery is a functional language dedicated to XML data querying and manipulation. As opposed to other W3C-standardized languages for XML (e.g. XSLT), it has been intended to feature strong static typing. Currently, however, some expressions of the language cannot be statically typed with any precision. We argue that this is due to a discrepancy between the semantics of the language and its type algebra: namely, the values of the language are (possibly inner) tree nodes, which may have siblings and ancestors in the data. The types on the other hand are regular tree types, as usual in the XML world: they describe sets of trees. The type associated to a node then corresponds to the subtree whose root is that node and contains no information about the rest of the data. This makes navigation expressions using 'backward axes,' which return e.g. the siblings of a node, impossible to type. We discuss how to handle this discrepancy by improving the type system. We describe a logic-based language of extended types able to represent inner tree nodes and show how it can dramatically increase the precision of typing for navigation expressions. We describe how inclusion between these extended types and the classical regular tree types can be decided, allowing a hybrid system combining both type languages. The result is a net increase in precision of typing.", "paper_title": "XQuery and Static Typing: Tackling the Problem of Backward Axes", "paper_id": "WOS:000367255800009"}