{"auto_keywords": [{"score": 0.040192891355061745, "phrase": "cegar"}, {"score": 0.00481495049065317, "phrase": "symmetric_concurrent_programs"}, {"score": 0.004757227624616643, "phrase": "predicate_abstraction"}, {"score": 0.004700193486903964, "phrase": "counterexample-guided_abstraction_refinement"}, {"score": 0.004533142516832776, "phrase": "finite-state_model"}, {"score": 0.004372002674739612, "phrase": "mainstream_programming_languages"}, {"score": 0.004091248980678087, "phrase": "system-level_sequential_c_code"}, {"score": 0.0038749521906474593, "phrase": "fruitful_applications"}, {"score": 0.0037825134619339537, "phrase": "shared-variable_concurrent_software"}, {"score": 0.0035609154384221567, "phrase": "abstraction_strategies"}, {"score": 0.0034759420565135253, "phrase": "scalable_analysis"}, {"score": 0.0034135407979996673, "phrase": "resulting_multi-threaded_boolean_programs"}, {"score": 0.003080449000295983, "phrase": "symmetry-aware_cegar_technique"}, {"score": 0.002952900365829518, "phrase": "replicated_structure"}, {"score": 0.0027133856739937133, "phrase": "boolean_program_template"}, {"score": 0.0026326249204932733, "phrase": "original_concurrent_program"}, {"score": 0.002600995957987461, "phrase": "state_explosion"}, {"score": 0.0025388705701873075, "phrase": "parallel_instantiations"}, {"score": 0.0022497569011987587, "phrase": "symmpa"}, {"score": 0.002169607777109063, "phrase": "alternative_approaches"}, {"score": 0.0021049977753042253, "phrase": "synchronisation_programs"}], "paper_keywords": ["Predicate abstraction", " Concurrent programs", " Symmetry reduction", " CEGAR"], "paper_abstract": "Predicate abstraction and counterexample-guided abstraction refinement (CEGAR) have enabled finite-state model checking of software written in mainstream programming languages. This combination of techniques has been successful in analysing system-level sequential C code. In contrast, there is little evidence of fruitful applications of CEGAR to shared-variable concurrent software. We attribute this gap to the lack of abstraction strategies that permit a scalable analysis of the resulting multi-threaded Boolean programs. The goal of this paper is to close this gap. We have developed a symmetry-aware CEGAR technique: it takes into account the replicated structure of programs that consist of many threads executing the same procedure, and generates a Boolean program template whose multi-threaded execution soundly overapproximates the original concurrent program. State explosion during model checking parallel instantiations of this template can now be absorbed by exploiting symmetry. We have implemented our method in a tool, SymmPa, and demonstrate its superior performance over alternative approaches on a range of synchronisation programs.", "paper_title": "Counterexample-guided abstraction refinement for symmetric concurrent programs", "paper_id": "WOS:000305785600003"}