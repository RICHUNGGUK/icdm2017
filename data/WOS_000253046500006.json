{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "bit_compression"}, {"score": 0.03613346133936675, "phrase": "bitmap_intersection"}, {"score": 0.03436933559290183, "phrase": "bit_vectors"}, {"score": 0.030753927104246587, "phrase": "wildcard_rules"}, {"score": 0.004779564521350969, "phrase": "fast_boolean_expansion"}, {"score": 0.004657739551687038, "phrase": "internet_security"}, {"score": 0.004623503587186056, "phrase": "virtual_private_networks"}, {"score": 0.0045726187330434025, "phrase": "quality_of_service"}, {"score": 0.004489046493029801, "phrase": "internet_routers"}, {"score": 0.004406994912939125, "phrase": "incoming_packets"}, {"score": 0.004342430078306461, "phrase": "packet_classification"}, {"score": 0.00424734451992536, "phrase": "packet_header"}, {"score": 0.004200582085706493, "phrase": "predefined_rule_table"}, {"score": 0.004063348730077936, "phrase": "multiple_fields"}, {"score": 0.0040186038781533946, "phrase": "difficult_problem"}, {"score": 0.0038729688332870865, "phrase": "classification_algorithms"}, {"score": 0.0037881238886444332, "phrase": "novel_packet_classification_algorithm"}, {"score": 0.0036508108698357932, "phrase": "best-known_classification_algorithm"}, {"score": 0.0035184576341236317, "phrase": "multiple_dimensional_range_lookup_approach"}, {"score": 0.0031727643282003976, "phrase": "redundant_bits"}, {"score": 0.0031032109441552287, "phrase": "additional_index_table"}, {"score": 0.0030017207229983385, "phrase": "rule_number"}, {"score": 0.0029576827451501956, "phrase": "remaining_bits"}, {"score": 0.0028715299874549245, "phrase": "extensive_improvement"}, {"score": 0.0028398718024224166, "phrase": "storage_requirement"}, {"score": 0.0028085616610192456, "phrase": "novel_fast_boolean_expansion"}, {"score": 0.0027469703311742647, "phrase": "better_classification_speed"}, {"score": 0.002706659627293686, "phrase": "large_number"}, {"score": 0.0026375303198093764, "phrase": "bitmap_intersection_algorithm"}, {"score": 0.0026084451971464867, "phrase": "bit_compression_algorithm"}, {"score": 0.0025796799784169196, "phrase": "storage_complexity"}, {"score": 0.002551231163230566, "phrase": "average_case"}, {"score": 0.0022834017104377525, "phrase": "proposed_scheme"}, {"score": 0.0022415745160585146, "phrase": "packet_classification_engine"}, {"score": 0.0022168460543913787, "phrase": "classification_performance"}, {"score": 0.0021522261505574035, "phrase": "performance_bottleneck"}, {"score": 0.0021284812539167112, "phrase": "packet_classification_engine_implementation"}, {"score": 0.0021049977753042253, "phrase": "network_processor"}], "paper_keywords": ["router", " packet classification", " bitmap intersection", " bit compression", " Boolean expansion", " network processor"], "paper_abstract": "To support applications such as Internet security, virtual private networks, and Quality of Service (QoS), Internet routers need to quickly classify incoming packets into flows. Packet classification uses information contained in the packet header and a predefined rule table in the routers. In general, packet classification on multiple fields is a difficult problem. Hence, researchers have proposed a variety of classification algorithms. This paper presents a novel packet classification algorithm, the bit compression algorithm. As with the best-known classification algorithm, bitmap intersection, bit compression is based on the multiple dimensional range lookup approach. Since bit vectors of the bitmap intersection contain many \"0\" bits, the bit vectors could be compressed. We compress the bit vectors by preserving only useful information and removing the redundant bits of the bit vectors. An additional index table would be created to keep track of the rule number associated with the remaining bits. Additionally, the wildcard rules enable an extensive improvement in the storage requirement. A novel Fast Boolean Expansion enables our scheme to obtain better classification speed even under a large number of wildcard rules. Compared to the bitmap intersection algorithm, the bit compression algorithm reduces the storage complexity in the average case from O(dN(2)) (for bitmap intersection) to theta(dN.log N), where d denotes the number of dimensions and N represents the number of rules. The proposed scheme cuts the cost of packet classification engine and increases classification performance by accessing less memory, which is the performance bottleneck in the packet classification engine implementation using a network processor.", "paper_title": "Fast packet classification using bit compression with fast boolean expansion", "paper_id": "WOS:000253046500006"}