{"auto_keywords": [{"score": 0.03843856552198327, "phrase": "related_blocks"}, {"score": 0.026131175938122097, "phrase": "disk_accesses"}, {"score": 0.004815315858763141, "phrase": "distributed"}, {"score": 0.004703878334423852, "phrase": "redundant_parallel_file_system"}, {"score": 0.004638462976078815, "phrase": "parity_information"}, {"score": 0.004468415400599571, "phrase": "parallel_file_system"}, {"score": 0.004406260054779782, "phrase": "straightforward_and_cost-effective_method"}, {"score": 0.004304574865291508, "phrase": "\"small-write\"_phenomenon"}, {"score": 0.004032118497047498, "phrase": "distributed_paradigm"}, {"score": 0.003976007772514762, "phrase": "file_system_cache"}, {"score": 0.003884212965525665, "phrase": "local_file_system"}, {"score": 0.0035211747962710246, "phrase": "distributed_parity_cache_table"}, {"score": 0.003206916619690171, "phrase": "parity_calculation"}, {"score": 0.0031770714776989282, "phrase": "parity_updating"}, {"score": 0.0031328221096543823, "phrase": "high_level_cache"}, {"score": 0.0030747771905143273, "phrase": "previous_reads"}, {"score": 0.0030178044717552605, "phrase": "small_writes"}, {"score": 0.0029618842673339173, "phrase": "overall_performance"}, {"score": 0.002787181295054319, "phrase": "experimental_results"}, {"score": 0.00263505298504827, "phrase": "dpct_support"}, {"score": 0.0024336086025284836, "phrase": "dpct."}, {"score": 0.0021049980887993046, "phrase": "dpct"}], "paper_keywords": [""], "paper_abstract": "Using parity information to protect data from loss in a parallel file system is a straightforward and cost-effective method. However, the \"small-write\" phenomenon can lead to poor write performance. This is still true in the distributed paradigm even when file system cache is used. The local file system knows nothing about a stripe and thus can not benefit from the related blocks of a stripe. We propose a distributed parity cache table (DPCT) which knows the related blocks of a stripe and can use them to improve the performance of parity calculation and parity updating. This high level cache can benefit from previous reads and can aggregate small writes to improve the overall performance. We implement this mechanism in our reliable parallel file system (RPFS). The experimental results show that both read and write performance can be improved with DPCT support. The improvement comes from the fact that we can reduce the number of disk accesses by DPCT. This matches our quantitative analysis which shows that the number of disk accesses can be reduced from N to N(1 - H), where N is the number of I/O nodes and H is the DPCT hit ratio.", "paper_title": "DPCT: Distributed parity cache table for redundant parallel file system", "paper_id": "WOS:000241591300033"}