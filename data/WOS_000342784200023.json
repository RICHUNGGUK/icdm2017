{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cross-cutting_concerns"}, {"score": 0.008464660775389153, "phrase": "execution_relations"}, {"score": 0.004642852977065663, "phrase": "aspect-oriented_software_development"}, {"score": 0.0046091759981070285, "phrase": "aosd"}, {"score": 0.004476878957065829, "phrase": "low_scalability"}, {"score": 0.00444439983637316, "phrase": "high_maintenance_costs"}, {"score": 0.004412155302768363, "phrase": "legacy_systems"}, {"score": 0.004364224683011796, "phrase": "code_scattering"}, {"score": 0.003941141575848601, "phrase": "aosd."}, {"score": 0.003898307690037192, "phrase": "current_dynamic_approaches"}, {"score": 0.0037725685596495355, "phrase": "methods'_execution_sequence"}, {"score": 0.003624361893008392, "phrase": "low_precision"}, {"score": 0.00350742771604554, "phrase": "improved_comprehensive_approach"}, {"score": 0.0034440966820590024, "phrase": "candidate_cross-cutting_concerns"}, {"score": 0.003296713221268488, "phrase": "recurring_execution_relations"}, {"score": 0.003201967054773186, "phrase": "execution_trace"}, {"score": 0.0030873424635143045, "phrase": "neighbouring_methods"}, {"score": 0.002808104467715375, "phrase": "cross-cutting_degrees"}, {"score": 0.0027876981671591202, "phrase": "right_cross-cutting_degrees"}, {"score": 0.002678078466226442, "phrase": "similar_running_context"}, {"score": 0.0025633909553815556, "phrase": "different_methods"}, {"score": 0.002535492891830764, "phrase": "final_candidates"}, {"score": 0.0023314314877152494, "phrase": "predefined_threshold"}, {"score": 0.0021049977753042253, "phrase": "tradition_ones"}], "paper_keywords": ["cross-cutting concerns", " aspects", " execution relations", " execution trace", " running context", " fan-in"], "paper_abstract": "Aspect-oriented software development (AOSD) helps to solve the problem of low scalability and high maintenance costs of legacy systems caused by code scattering and tangling by extracting cross-cutting concerns and inserting them into aspects. Identifying the cross-cutting concerns of legacy systems is the key to reconstructing such systems using the approach of AOSD. However, current dynamic approaches to the identification of cross-cutting concerns simply check the methods' execution sequence, but do not consider their calling context, which may cause low precision. In this paper, we propose an improved comprehensive approach to the identification of candidate cross-cutting concerns of legacy systems based on the combination of the analysis of recurring execution relations and fan-ins. We first analyse the execution trace with a given test case and identify four types of execution relations for neighbouring methods: exit-entry, entry-exit, entry-entry and exit-exit. Afterwards, we measure the methods' left cross-cutting degrees and right cross-cutting degrees. The former ensures that the candidate recurs in a similar running context, whereas the latter indicates how many times the candidate crosscuts different methods. The final candidates are then obtained from those high fan-in methods, which not only cross-cut others more times than a predefined threshold, but are always entered or left under the same running context. The experiment conducted on three open source systems shows that our approach improves the precision of identifying cross-cutting concerns compared with tradition ones.", "paper_title": "Towards the Identification of Cross-Cutting Concerns: A Comprehensive Dynamic Approach Based on Execution Relations", "paper_id": "WOS:000342784200023"}