{"auto_keywords": [{"score": 0.04580340075872882, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "general-purpose_programming_language"}, {"score": 0.004719664411221952, "phrase": "practical_affine_types"}, {"score": 0.00450456611645112, "phrase": "girard's_linear_logic"}, {"score": 0.004186105377259855, "phrase": "expressive_kinds"}, {"score": 0.003916098498242888, "phrase": "unlimited_types"}, {"score": 0.0038385317554884713, "phrase": "key_feature"}, {"score": 0.0036390887584943723, "phrase": "abstract_affine_types"}, {"score": 0.0035908627899097407, "phrase": "ml-style_signature_ascription"}, {"score": 0.0035197157993078444, "phrase": "alms"}, {"score": 0.003381607100127276, "phrase": "stiffer_resource_usage_restrictions"}, {"score": 0.003314591878914152, "phrase": "principal_usage_restrictions"}, {"score": 0.0029198522863606953, "phrase": "resource_management_protocols"}, {"score": 0.002881130228859848, "phrase": "special-purpose_type_systems"}, {"score": 0.002537880772794665, "phrase": "prototype_implementation"}, {"score": 0.002250415129116109, "phrase": "core_language"}, {"score": 0.0021620042653528846, "phrase": "core_model"}, {"score": 0.0021049977753042253, "phrase": "principal_kinding_theorem"}], "paper_keywords": ["Languages", " Affine types", " linear logic", " type systems", " polymorphism", " modules"], "paper_abstract": "Alms is a general-purpose programming language that supports practical affine types. To offer the expressiveness of Girard's linear logic while keeping the type system light and convenient, Alms uses expressive kinds that minimize notation while maximizing polymorphism between affine and unlimited types. A key feature of Alms is the ability to introduce abstract affine types via ML-style signature ascription. In Alms, an interface can impose stiffer resource usage restrictions than the principal usage restrictions of its implementation. This form of sealing allows the type system to naturally and directly express a variety of resource management protocols from special-purpose type systems. We present two pieces of evidence to demonstrate the validity of our design goals. First, we introduce a prototype implementation of Alms and discuss our experience programming in the language. Second, we establish the soundness of the core language. We also use the core model to prove a principal kinding theorem.", "paper_title": "Practical Affine Types", "paper_id": "WOS:000286472700037"}