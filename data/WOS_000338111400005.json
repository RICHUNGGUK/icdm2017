{"auto_keywords": [{"score": 0.03396017194462182, "phrase": "spanning_trees"}, {"score": 0.00481495049065317, "phrase": "dynamic_programming_algorithm"}, {"score": 0.004777392826700429, "phrase": "reliable_network_design"}, {"score": 0.004666460260366703, "phrase": "np-hard_problem"}, {"score": 0.00459393336391459, "phrase": "network_topology"}, {"score": 0.004558091785667046, "phrase": "maximum_all-terminal_reliability"}, {"score": 0.004487241576747549, "phrase": "cost_constraint"}, {"score": 0.00423118169200579, "phrase": "link's_reliability"}, {"score": 0.0041328796505374155, "phrase": "maximum_budget_cost"}, {"score": 0.003958529104387973, "phrase": "major_focus"}, {"score": 0.003927625349474979, "phrase": "network_design"}, {"score": 0.003821342577980031, "phrase": "critical_applications"}, {"score": 0.0037915057447460133, "phrase": "maximized_reliability"}, {"score": 0.003589046900483573, "phrase": "dp_approach"}, {"score": 0.0030800962618484844, "phrase": "alternative_dp_algorithm"}, {"score": 0.0028588847851995533, "phrase": "broken_vertical_bar_stg_broken_vertical_bar"}, {"score": 0.0027814417101979317, "phrase": "lexicographic_order"}, {"score": 0.002738131487658495, "phrase": "time_efficiency"}, {"score": 0.00268493828558848, "phrase": "similar_results"}, {"score": 0.0026639507068734907, "phrase": "extensive_simulations"}, {"score": 0.002622465142275264, "phrase": "benchmark_networks"}, {"score": 0.0024822751900485758, "phrase": "sorting_method"}, {"score": 0.002197891020396052, "phrase": "non-optimal_results"}, {"score": 0.0021049977753042253, "phrase": "simulated_examples"}], "paper_keywords": ["Dynamic programming", " network optimization", " network reliability", " network topology design"], "paper_abstract": "This paper addresses an NP-hard problem to design a network topology with maximum all-terminal reliability subject to a cost constraint, given the locations of the various computer centers (nodes), their connecting links, each link's reliability and cost, and the maximum budget cost to install the links. Because cost is always a major focus in network design, this problem is practical for critical applications requiring maximized reliability. This paper first formulates a Dynamic Programming (DP) scheme to solve the problem. A DP approach, called DPA-1, generates the topology using all spanning trees of the network (STG). The paper shows that DPA-1 is optimal if the spanning trees are optimally ordered. Further, the paper describes an alternative DP algorithm, called DPA-2, that uses only spanning trees (k <= n, where n = broken vertical bar STG broken vertical bar) sorted in increasing weight and lexicographic order to improve the time efficiency of DPA-1 while producing similar results. Extensive simulations using hundreds of benchmark networks that contain up to 1.889(102) spanning trees show the merits of using the sorting method, and the effectiveness of our algorithms. DPA-2 is able to generate 85% optimal results, while using only a small number of k spanning trees, and up to 16.83 CPU seconds. Furthermore, the non-optimal results are only up to 3.4% off from optimal for the simulated examples.", "paper_title": "A Dynamic Programming Algorithm for Reliable Network Design", "paper_id": "WOS:000338111400005"}