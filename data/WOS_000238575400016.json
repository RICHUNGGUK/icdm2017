{"auto_keywords": [{"score": 0.03289282662064983, "phrase": "rascal"}, {"score": 0.015248145007721241, "phrase": "vector_space_model"}, {"score": 0.015094192349593465, "phrase": "vsm"}, {"score": 0.014566918138890349, "phrase": "lsi"}, {"score": 0.00481495049065317, "phrase": "library_methods"}, {"score": 0.004256895619944631, "phrase": "reuse_repository"}, {"score": 0.00421340730888561, "phrase": "significant_investment"}, {"score": 0.004127753467337283, "phrase": "managerial_support"}, {"score": 0.003961613484271729, "phrase": "healthy_return"}, {"score": 0.0038810583785936505, "phrase": "reusable_components"}, {"score": 0.0037057255600764475, "phrase": "high_quality"}, {"score": 0.00325901518290063, "phrase": "large_scale_libraries"}, {"score": 0.003176333519010176, "phrase": "component_retrieval"}, {"score": 0.003048370487544551, "phrase": "proactive_component"}, {"score": 0.0029255474957478474, "phrase": "task-relevant_reusable_components"}, {"score": 0.002793260314529583, "phrase": "collaborative_filtering"}, {"score": 0.0027648003876502786, "phrase": "cf"}, {"score": 0.00266693888510356, "phrase": "cf_effectiveness"}, {"score": 0.0023816257768353344, "phrase": "real_world_examples"}, {"score": 0.0023451553255837317, "phrase": "overall_results"}, {"score": 0.0022390533383717715, "phrase": "reasonably_good_recommendations"}, {"score": 0.0021267708018655493, "phrase": "early_stage"}, {"score": 0.0021049977753042253, "phrase": "code_development"}], "paper_keywords": [""], "paper_abstract": "The development and maintenance of a reuse repository requires significant investment, planning and managerial support. To minimise risk and ensure a healthy return on investment, reusable components should be accessible, reliable and of a high quality. In this paper we concentrate on accessability; we describe a technique which enables a developer to effectively and conveniently make use of large scale libraries. Unlike most previous solutions to component retrieval, our tool, RASCAL, is a proactive component recommender. RASCAL recommends a set of task-relevant reusable components to a developer. Recommendations are produced using Collaborative Filtering (CF). We compare and contrast CF effectiveness when using two information retrieval techniques, namely Vector Space Model (VSM) and Latent Semantic Indexing (LSI). We validate our technique on real world examples and find overall results are encouraging; notably, RASCAL can produce reasonably good recommendations when they are most valuable i.e., at an early stage in code development.", "paper_title": "Recommending library methods: An evaluation of the vector space model (VSM) and latent semantic indexing (LSI)", "paper_id": "WOS:000238575400016"}