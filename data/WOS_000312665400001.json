{"auto_keywords": [{"score": 0.03619457635335416, "phrase": "data_cache"}, {"score": 0.00481495049065317, "phrase": "accurate_timing_analysis"}, {"score": 0.004585332915477379, "phrase": "high_latency_main_memory"}, {"score": 0.004524624065803229, "phrase": "fast_processor_pipeline"}, {"score": 0.004484596684703308, "phrase": "standard_processor_architectures"}, {"score": 0.00436661740263741, "phrase": "structural_hazard"}, {"score": 0.004103212598803194, "phrase": "tight_worst-case_execution_times"}, {"score": 0.003995226376780718, "phrase": "memory_accesses"}, {"score": 0.00378767277402891, "phrase": "instruction_fetches"}, {"score": 0.003606866938661143, "phrase": "instruction_cache"}, {"score": 0.0032416819339366712, "phrase": "global_data"}, {"score": 0.003198705576491802, "phrase": "heap_allocated_data"}, {"score": 0.0029133627624098064, "phrase": "standard_cache_organization"}, {"score": 0.0028366012006726896, "phrase": "worst-case_execution_time_analysis"}, {"score": 0.0026771333996253783, "phrase": "different_data_areas"}, {"score": 0.0026534064006291853, "phrase": "data_cache_analysis"}, {"score": 0.002572001496778222, "phrase": "different_areas"}, {"score": 0.002515384834484012, "phrase": "unknown_address"}, {"score": 0.002427372728532664, "phrase": "abstract_cache_state"}, {"score": 0.002200861826643147, "phrase": "static_analysis"}, {"score": 0.0021049977753042253, "phrase": "worst-case_execution_time_analysis_tool"}], "paper_keywords": ["WCET analysis", " Data caches", " Time-predictable computer architecture"], "paper_abstract": "Caches are essential to bridge the gap between the high latency main memory and the fast processor pipeline. Standard processor architectures implement two first-level caches to avoid a structural hazard in the pipeline: an instruction cache and a data cache. For tight worst-case execution times it is important to classify memory accesses as either cache hit or cache miss. The addresses of instruction fetches are known statically and static cache hit/miss classification is possible for the instruction cache. The access to data that is cached in the data cache is harder to predict statically. Several different data areas, such as stack, global data, and heap allocated data, share the same cache. Some addresses are known statically, other addresses are only known at runtime. With a standard cache organization all those different data areas must be considered by worst-case execution time analysis. In this paper we propose to split the data cache for the different data areas. Data cache analysis can be performed individually for the different areas. Access to an unknown address in the heap does not destroy the abstract cache state for other data areas. Furthermore, we propose to use a small, highly associative cache for the heap area. We designed and implemented a static analysis for this cache, and integrated it into a worst-case execution time analysis tool.", "paper_title": "Data cache organization for accurate timing analysis", "paper_id": "WOS:000312665400001"}