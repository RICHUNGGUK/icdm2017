{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distinct_methods"}, {"score": 0.004406360418456518, "phrase": "output_values"}, {"score": 0.004232232993872917, "phrase": "static_space_analysis_tool"}, {"score": 0.004147756103284082, "phrase": "time_consumption"}, {"score": 0.0038885527668812807, "phrase": "upper_bound"}, {"score": 0.0038417798012011155, "phrase": "terminating_computations"}, {"score": 0.003734810936407523, "phrase": "undecidable_properties"}, {"score": 0.0036602262729063775, "phrase": "theoretical_point"}, {"score": 0.003282383509542342, "phrase": "well-known_termination_technique"}, {"score": 0.0031020367403802773, "phrase": "total_functions"}, {"score": 0.0027370835853738626, "phrase": "subterm_property"}, {"score": 0.002628747284714371, "phrase": "considered_functions"}, {"score": 0.002524688179363081, "phrase": "new_notion"}, {"score": 0.0024543014947630876, "phrase": "dependency_pairs_method"}, {"score": 0.002357131515622894, "phrase": "sup-interpretation_synthesis_problem"}, {"score": 0.0022185261335667863, "phrase": "previous_works"}, {"score": 0.002182958452794579, "phrase": "runtime_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Complexity analysis", " Static analysis", " Resource upper bounds", " Interpretation", " Quasi-interpretation", " Sup-interpretation"], "paper_abstract": "In this paper, we survey the complexity of distinct methods that allow the programmer to synthesize a sup-interpretation, a function providing an upper-bound on the size of the output values computed by a program. It consists in a static space analysis tool without consideration of the time consumption. Although clearly related, sup-interpretation is independent from termination since it only provides an upper bound on the terminating computations. First, we study some undecidable properties of sup-interpretations from a theoretical point of view. Next, we fix term rewriting systems as our computational model and we show that a sup-interpretation can be obtained through the use of a well-known termination technique, the polynomial interpretations. The drawback is that such a method only applies to total functions (strongly normalizing programs). To overcome this problem we also study sup-interpretations through the notion of quasi-interpretation. Quasi-interpretations also suffer from a drawback that lies in the subterm property. This property drastically restricts the shape of the considered functions. Again we overcome this problem by introducing a new notion of interpretations mainly based on the dependency pairs method. We study the decidability and complexity of the sup-interpretation synthesis problem for all these three tools over sets of polynomials. Finally, we take benefit of some previous works on termination and runtime complexity to infer sup-interpretations. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Synthesis of sup-interpretations: A survey", "paper_id": "WOS:000313849100003"}