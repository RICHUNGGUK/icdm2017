{"auto_keywords": [{"score": 0.03294801590005488, "phrase": "synthesis_algorithm"}, {"score": 0.00481495049065317, "phrase": "concurrent_programs"}, {"score": 0.0046797114400479135, "phrase": "shared_state"}, {"score": 0.004515967518891287, "phrase": "linearizable_adts"}, {"score": 0.004205395707787349, "phrase": "novel_automated_approach"}, {"score": 0.004145882022189891, "phrase": "concurrency_control"}, {"score": 0.004029359223675788, "phrase": "common_need"}, {"score": 0.0038060092376105414, "phrase": "code_fragment"}, {"score": 0.0036727235025069828, "phrase": "multiple_adt_operations"}, {"score": 0.0036207206487324506, "phrase": "multiple_adt_instances"}, {"score": 0.003469075272733774, "phrase": "adt"}, {"score": 0.003419943984098415, "phrase": "adt-specific_semantic_locking_operations"}, {"score": 0.0032302647179383915, "phrase": "adt_operations"}, {"score": 0.0029652292779277782, "phrase": "locking_operations"}, {"score": 0.002780783274864117, "phrase": "client_program"}, {"score": 0.002664221051021009, "phrase": "code_fragments"}], "paper_keywords": ["Compiler", " Synchronization", " Composition"], "paper_abstract": "In this paper, we consider concurrent programs in which the shared state consists of instances of linearizable ADTs (abstract data types). We develop a novel automated approach to concurrency control that addresses a common need: the need to atomically execute a code fragment, which may contain multiple ADT operations on multiple ADT instances. In our approach, each ADT implements ADT-specific semantic locking operations that serve to exploit the semantics of ADT operations. We develop a synthesis algorithm that automatically inserts calls to these locking operations in a set of given code fragments (in a client program) to ensure that these code fragments execute atomically without deadlocks, and without rollbacks. We have implemented the synthesis algorithm and several general-purpose ADTs with semantic locking. We have applied the synthesis algorithm to several Java programs that use these ADTs. Our results show that our approach enables efficient and scalable synchronization.", "paper_title": "Automatic Semantic Locking", "paper_id": "WOS:000349142100040"}