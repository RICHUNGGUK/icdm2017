{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "imperative_programming_languages"}, {"score": 0.04419846536070138, "phrase": "domain-specific_static_program_analyses"}, {"score": 0.03737634241271663, "phrase": "symbolic_domain"}, {"score": 0.004700027722284931, "phrase": "generic_symbolic_analysis_framework"}, {"score": 0.004478308876320956, "phrase": "valid_variable_bindings"}, {"score": 0.004085333687668526, "phrase": "program_parallelisation"}, {"score": 0.0039685202936462815, "phrase": "superfluous_bound_checks"}, {"score": 0.00393032656248792, "phrase": "variable_aliases"}, {"score": 0.0038924989779389424, "phrase": "task_deadlocks"}, {"score": 0.0038179283509963695, "phrase": "path_expression_algebra"}, {"score": 0.003744780941673966, "phrase": "control_flow_information"}, {"score": 0.0033830587647810132, "phrase": "compact_algebraic_structure"}, {"score": 0.0032546105164772995, "phrase": "complete_control"}, {"score": 0.0031922210879462513, "phrase": "analysis_information"}, {"score": 0.002883718207958817, "phrase": "novel_representation"}, {"score": 0.002855934865505357, "phrase": "program_semantics"}, {"score": 0.0027876387169652717, "phrase": "program_analysis"}, {"score": 0.002760778494680823, "phrase": "computer_algebra_systems"}, {"score": 0.0026817365934071486, "phrase": "ideal_intermediate_representation"}, {"score": 0.002542642270762272, "phrase": "existing_methods"}, {"score": 0.0021881743793875767, "phrase": "real-world_applications"}], "paper_keywords": [""], "paper_abstract": "We present a generic symbolic analysis framework for imperative programming languages. Our framework is capable of computing all valid variable bindings of a program at given program points. This information is invaluable for domain-specific static program analyses such as memory leak detection, program parallelisation, and the detection of superfluous bound checks, variable aliases and task deadlocks. We employ path expression algebra to model the control flow information of programs. A homomorphism maps path expressions into the symbolic domain. At the center of the symbolic domain is a compact algebraic structure called supercontext. A supercontext contains the complete control and data flow analysis information valid at a given program point. Our approach to compute supercontexts is based purely on algebra and is fully automated. This novel representation of program semantics closes the gap between program analysis and computer algebra systems, which makes supercontexts an ideal intermediate representation for all domain-specific static program analyses. Our approach is more general than existing methods because it can derive solutions for arbitrary (even intra-loop) nodes of reducible and irreducible control flow graphs. We prove the correctness of our symbolic analysis method. Our experimental results show that the problem sizes arising from real-world applications such as the SPEC95 benchmark suite are tractable for our symbolic analysis framework.", "paper_title": "Symbolic analysis of imperative programming languages", "paper_id": "WOS:000241813400012"}