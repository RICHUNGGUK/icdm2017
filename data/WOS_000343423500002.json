{"auto_keywords": [{"score": 0.036420426151982134, "phrase": "ssi"}, {"score": 0.023072109821308702, "phrase": "spatial_objects"}, {"score": 0.009455152874761188, "phrase": "mapping-based_indexing"}, {"score": 0.007789010637188445, "phrase": "size_separation"}, {"score": 0.007080745762252468, "phrase": "existing_mapping-based_indexes"}, {"score": 0.00481495049065317, "phrase": "painless_index"}, {"score": 0.004749646583168342, "phrase": "conventional_spatial_indexes"}, {"score": 0.004621671570727774, "phrase": "multidimensional_tree_structures"}, {"score": 0.004527947981009528, "phrase": "enormous_efforts"}, {"score": 0.0044512920090463105, "phrase": "full-fledged_database_management_system"}, {"score": 0.0043610084347896596, "phrase": "alternative_approach"}, {"score": 0.004316552692395911, "phrase": "spatial_queries"}, {"score": 0.004143196873246147, "phrase": "one-dimensional_space"}, {"score": 0.0040452928361255445, "phrase": "one-dimensional_indexing_structure"}, {"score": 0.0038170129089059013, "phrase": "conventional_spatial_index_structures"}, {"score": 0.0037523473563976246, "phrase": "major_concern"}, {"score": 0.0037140731069193896, "phrase": "mapping-based_indexes"}, {"score": 0.003663645143713398, "phrase": "conventional_tree_structures"}, {"score": 0.0035526625882388936, "phrase": "mapping-based_spatial_indexing_scheme"}, {"score": 0.00332924643541238, "phrase": "data_distribution_transformation"}, {"score": 0.0031305230217636495, "phrase": "query_processing"}, {"score": 0.003077451642616653, "phrase": "extensive_experiments"}, {"score": 0.0030356410934402503, "phrase": "window_queries"}, {"score": 0.002994396880146532, "phrase": "nonzero_extents"}, {"score": 0.0029235593748707495, "phrase": "better_performance"}, {"score": 0.002815604242104671, "phrase": "standalone_implementation"}, {"score": 0.002629405440065951, "phrase": "commercial_platform"}, {"score": 0.0025936662520897992, "phrase": "r-tree_implementation"}, {"score": 0.0023973704289918726, "phrase": "spatial_index"}, {"score": 0.002332626862738603, "phrase": "dbms_implementation"}, {"score": 0.002215897810312801, "phrase": "common_perception"}, {"score": 0.002170854875902186, "phrase": "long_time"}, {"score": 0.0021049977753042253, "phrase": "best_choice"}], "paper_keywords": ["Spatial databases", " mapping-based indexing", " window queries", " space-filling curves"], "paper_abstract": "Conventional spatial indexes, represented by the R-tree, employ multidimensional tree structures that are complicated and require enormous efforts to implement in a full-fledged database management system (DBMS). An alternative approach for supporting spatial queries is mapping-based indexing, which maps both data and queries into a one-dimensional space such that data can be indexed and queries can be processed through a one-dimensional indexing structure such as the B+-tree. Mapping-based indexing requires implementing only a few mapping functions, incurring much less effort in implementation compared to conventional spatial index structures. Yet, a major concern about using mapping-based indexes is their lower efficiency than conventional tree structures. In this article, we propose a mapping-based spatial indexing scheme called Size Separation Indexing (SSI). SSI is equipped with a suite of techniques including size separation, data distribution transformation, and more efficient mapping algorithms. These techniques overcome the drawbacks of existing mapping-based indexes and significantly improve the efficiency of query processing. We show through extensive experiments that, for window queries on spatial objects with nonzero extents, SSI has two orders of magnitude better performance than existing mapping-based indexes and competitive performance to the R-tree as a standalone implementation. We have also implemented SSI on top of two off-the-shelf DBMSs, PostgreSQL and a commercial platform, both having R-tree implementation. In this case, SSI is up to two orders of magnitude faster than their provided spatial indexes. Therefore, we achieve a spatial index more efficient than the R-tree in a DBMS implementation that is at the same time easy to implement. This result may upset a common perception that has existed for a long time in this area that the R-tree is the best choice for indexing spatial objects.", "paper_title": "Towards a Painless Index for Spatial Objects", "paper_id": "WOS:000343423500002"}