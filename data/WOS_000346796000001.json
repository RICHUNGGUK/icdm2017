{"auto_keywords": [{"score": 0.04076299357243285, "phrase": "final_automaton"}, {"score": 0.00481495049065317, "phrase": "bypassing_space_explosion"}, {"score": 0.004708220751321872, "phrase": "network_intrusion_detection_and_prevention_systems"}, {"score": 0.004545240514015278, "phrase": "individual_security_threats"}, {"score": 0.0044873778175404475, "phrase": "corresponding_deterministic_finite_state_automata"}, {"score": 0.0042495320879288615, "phrase": "entire_set"}, {"score": 0.0039729853486821995, "phrase": "alternative_automata_implementations"}, {"score": 0.003810850017764603, "phrase": "extended_finite_automata"}, {"score": 0.0037864980290391354, "phrase": "xfa"}, {"score": 0.0036553070575015344, "phrase": "resulting_final_automata"}, {"score": 0.0035741900278634616, "phrase": "corresponding_dfa."}, {"score": 0.0035286453655992904, "phrase": "previously_proposed_automata_construction_algorithms"}, {"score": 0.0031743093007496736, "phrase": "expensive_nondeterministic_finite_automata"}, {"score": 0.0031540186077606137, "phrase": "nfa"}, {"score": 0.0031238084716187805, "phrase": "dfa_subset_construction"}, {"score": 0.003074109966430609, "phrase": "nfa."}, {"score": 0.003015508235745547, "phrase": "corresponding_large_dfa"}, {"score": 0.0029866270401697906, "phrase": "intermediate_step"}, {"score": 0.002660832900348446, "phrase": "\"minimize_then_union\"_framework"}, {"score": 0.0025034338848015166, "phrase": "small_intermediate_parsers"}, {"score": 0.002118558580538763, "phrase": "main_memory"}], "paper_keywords": ["Deep packet inspection", " information security", " intrusion detection and prevention", " network security", " regular expression matching"], "paper_abstract": "Network intrusion detection and prevention systems commonly use regular expression (RE) signatures to represent individual security threats. While the corresponding deterministic finite state automata (DFA) for any one RE is typically small, the DFA that corresponds to the entire set of REs is usually too large to be constructed or deployed. To address this issue, a variety of alternative automata implementations that compress the size of the final automaton have been proposed such as extended finite automata (XFA) and delayed input DFA (D(2)FA). The resulting final automata are typically much smaller than the corresponding DFA. However, the previously proposed automata construction algorithms do suffer from some drawbacks. First, most employ a \"Union then Minimize\" framework where the automata for each RE are first joined before minimization occurs. This leads to an expensive nondeterministic finite automata (NFA) to DFA subset construction on a relatively large NFA. Second, most construct the corresponding large DFA as an intermediate step. In some cases, this DFA is so large that the final automaton cannot be constructed even though the final automaton is small enough to be deployed. In this paper, we propose a \"Minimize then Union\" framework for constructing compact alternative automata focusing on the D(2)FA. We show that we can construct an almost optimal final D(2)FA with small intermediate parsers. The key to our approach is a space- and time-efficient routine for merging two compact D(2)FA into a compact D(2)FA. In our experiments, our algorithm runs on average 155 times faster and uses 1500 times less memory than previous algorithms. For example, we are able to construct a D(2)FA with over 80 000 000 states using only 1 GB of main memory in only 77 min.", "paper_title": "Bypassing Space Explosion in High-Speed Regular Expression Matching", "paper_id": "WOS:000346796000001"}