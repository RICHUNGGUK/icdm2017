{"auto_keywords": [{"score": 0.04853103794761426, "phrase": "options_pricing"}, {"score": 0.014259790134366701, "phrase": "mc"}, {"score": 0.013174270790777728, "phrase": "real_time"}, {"score": 0.01299157290716307, "phrase": "today's_multi-core_cpus"}, {"score": 0.010933892704452912, "phrase": "mc-based_options_pricing"}, {"score": 0.010006037650201692, "phrase": "memory_space"}, {"score": 0.00481495049065317, "phrase": "carlo-based_options_pricing"}, {"score": 0.004594137808658537, "phrase": "critical_problem"}, {"score": 0.004487541157100498, "phrase": "fundamental_building_blocks"}, {"score": 0.00444559516711374, "phrase": "mathematical_finance"}, {"score": 0.00440403952059725, "phrase": "monte_carlo"}, {"score": 0.003897742942358768, "phrase": "high_computing_power"}, {"score": 0.0035648266669315943, "phrase": "modern_graphics_processors"}, {"score": 0.003401148484767927, "phrase": "multi-core_cpus"}, {"score": 0.0031845067058084583, "phrase": "small_on-chip_scratchpad"}, {"score": 0.003110515172439764, "phrase": "large_memory_space"}, {"score": 0.002818013056816282, "phrase": "recycling_approach"}, {"score": 0.0026633568650501873, "phrase": "crossing-path_layout"}, {"score": 0.0025770807002632877, "phrase": "memory_accesses"}, {"score": 0.0025650829604557876, "phrase": "gpu"}, {"score": 0.002493592357827492, "phrase": "real_market_data"}, {"score": 0.0023789822182914877, "phrase": "experimental_result"}, {"score": 0.0022378101636842296, "phrase": "latest_multi-core_cpu"}, {"score": 0.002105002791163301, "phrase": "gcc"}], "paper_keywords": ["GPU", " stream architecture", " options pricing", " Monte Carlo simulation"], "paper_abstract": "Options pricing is a critical problem and one of the fundamental building blocks in mathematical finance. Monte Carlo (MC) simulation is the most widely used solution for options pricing. In most cases options pricing must be performed in real time. Although today's multi-core CPUs can provide a high computing power, the options pricing on today's multi-core CPUs is far from responding in real time. In this paper, we use modern graphics processors (CPUs), which provide a much higher computing power than multi-core CPUs, to perform MC-based options pricing. The challenge is that GPUs only provide a small on-chip scratchpad while MC-based options pricing requires a large memory space and accesses the memory space irregularly. To make MC-based options pricing efficient on GPUs, we propose a recycling approach which compacts the data to shrink the memory space, and a crossing-path layout which reorganizes the data to make memory accesses GPU-friendly. We use real market data and benchmarks to evaluate our optimization approaches. The experimental result shows that our MC-based options pricing on the latest CPU is 43-fold faster than the latest multi-core CPU for single precision computation (with Intel C++ Compiler 11.1); compared with GCC 4.2.4, the speedup is as high as 145.", "paper_title": "Efficient Monte Carlo-based options pricing on graphics processors and its optimizations", "paper_id": "WOS:000281150500001"}