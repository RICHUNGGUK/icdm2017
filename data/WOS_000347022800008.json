{"auto_keywords": [{"score": 0.03995303062581186, "phrase": "stce"}, {"score": 0.00481495049065317, "phrase": "automated_software_testing"}, {"score": 0.004799557228452697, "phrase": "large_amounts"}, {"score": 0.0047842129415024475, "phrase": "software_test_code"}, {"score": 0.004723322467153553, "phrase": "software_teams"}, {"score": 0.004715180819749147, "phrase": "good_mixture"}, {"score": 0.004708220751321872, "phrase": "automated_test_scripts"}, {"score": 0.004611224230543916, "phrase": "software_development_activity"}, {"score": 0.00458178123588659, "phrase": "test_scripts"}, {"score": 0.004416079619543104, "phrase": "entire_lifecycle"}, {"score": 0.004387877144428992, "phrase": "software_test-code_engineering"}, {"score": 0.004325075497345479, "phrase": "stce_research_area"}, {"score": 0.004276849188982683, "phrase": "related_studies"}, {"score": 0.004030695216899165, "phrase": "broader_community"}, {"score": 0.003985738225654119, "phrase": "valuable_resources"}, {"score": 0.0039729853486821995, "phrase": "new_researchers"}, {"score": 0.003909828033238252, "phrase": "additional_secondary_studies"}, {"score": 0.0037864980290391354, "phrase": "systematic_mapping"}, {"score": 0.0036960919389815742, "phrase": "research_community"}, {"score": 0.0036847197866950662, "phrase": "research_questions"}, {"score": 0.0036553070575015344, "phrase": "exclusion_criteria"}, {"score": 0.003608732492631878, "phrase": "systematic_map"}, {"score": 0.0034614104600030633, "phrase": "online_publicly-accessible_repository"}, {"score": 0.0034118234596993836, "phrase": "stce."}, {"score": 0.00334144503360907, "phrase": "acceptable_mix"}, {"score": 0.0033094525227603012, "phrase": "different_contribution_facets"}, {"score": 0.0032672702570491164, "phrase": "top_two_leading_facets"}, {"score": 0.0031845067058084613, "phrase": "new_processes"}, {"score": 0.003154012038613403, "phrase": "low_rate"}, {"score": 0.003059352924093805, "phrase": "research_facet"}, {"score": 0.0029866270401697906, "phrase": "software_engineering"}, {"score": 0.0029203055813347874, "phrase": "stce_activities"}, {"score": 0.0028923335491735564, "phrase": "primary_studies"}, {"score": 0.0028554526481670926, "phrase": "quality_assessment"}, {"score": 0.0028190406955898822, "phrase": "production_code"}, {"score": 0.00280550590163227, "phrase": "highest_growth_rate"}, {"score": 0.0027965187255008647, "phrase": "co-maintenance_activities"}, {"score": 0.0027082110116581266, "phrase": "quality_assessment_activity"}, {"score": 0.002690886043654469, "phrase": "test_smells"}, {"score": 0.002682265053904188, "phrase": "oracle_assertion_adequacy"}, {"score": 0.0026480556774243188, "phrase": "leading_test_framework"}, {"score": 0.002568542343945288, "phrase": "sut_types"}, {"score": 0.0023029886389559122, "phrase": "higher_impact"}, {"score": 0.0022626835039082746, "phrase": "emerging_trends"}, {"score": 0.0021632361436007275, "phrase": "existing_stce_approaches"}, {"score": 0.0021563019696857768, "phrase": "spot_areas"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Systematic mapping", " Survey", " Study repository", " Software test-code engineering", " Development of test code", " Quality assessment of test code"], "paper_abstract": "Context: As a result of automated software testing, large amounts of software test code (script) are usually developed by software teams. Automated test scripts provide many benefits, such as repeatable, predictable, and efficient test executions. However, just like any software development activity, development of test scripts is tedious and error prone. We refer, in this study, to all activities that should be conducted during the entire lifecycle of test-code as Software Test-Code Engineering (STCE). Objective: As the STCE research area has matured and the number of related studies has increased, it is important to systematically categorize the current state-of-the-art and to provide an overview of the trends in this field. Such summarized and categorized results provide many benefits to the broader community. For example, they are valuable resources for new researchers (e.g., PhD students) aiming to conduct additional secondary studies. Method: In this work, we systematically classify the body of knowledge related to STCE through a systematic mapping (SM) study. As part of this study, we pose a set of research questions, define selection and exclusion criteria, and systematically develop and refine a systematic map. Results: Our study pool includes a set of 60 studies published in the area of STCE between 1999 and 2012. Our mapping data is available through an online publicly-accessible repository. We derive the trends for various aspects of STCE. Among our results are the following: (1) There is an acceptable mix of papers with respect to different contribution facets in the field of STCE and the top two leading facets are tool (68%) and method (65%). The studies that presented new processes, however, had a low rate (3%), which denotes the need for more process-related studies in this area. (2) Results of investigation about research facet of studies and comparing our result to other SM studies shows that, similar to other fields in software engineering, STCE is moving towards more rigorous validation approaches. (3) A good mixture of STCE activities has been presented in the primary studies. Among them, the two leading activities are quality assessment and co-maintenance of test-code with production code. The highest growth rate for co-maintenance activities in recent years shows the importance and challenges involved in this activity. (4) There are two main categories of quality assessment activity: detection of test smells and oracle assertion adequacy. (5) JUnit is the leading test framework which has been used in about 50% of the studies. (6) There is a good mixture of SUT types used in the studies: academic experimental systems (or simple code examples), real open-source and commercial systems. (7) Among 41 tools that are proposed for STCE, less than half of the tools (45%) were available for download. It is good to have this percentile of tools to be available, although not perfect, since the availability of tools can lead to higher impact on research community and industry. Conclusion: We discuss the emerging trends in STCE, and discuss the implications for researchers and practitioners in this area. The results of our systematic mapping can help researchers to obtain an overview of existing STCE approaches and spot areas in the field that require more attention from the research community. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Software test-code engineering: A systematic mapping", "paper_id": "WOS:000347022800008"}