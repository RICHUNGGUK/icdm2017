{"auto_keywords": [{"score": 0.036269570502132725, "phrase": "nix-vector"}, {"score": 0.026807199515561455, "phrase": "storage_space"}, {"score": 0.00481495049065317, "phrase": "network_simulation"}, {"score": 0.004581505405526037, "phrase": "essential_tool"}, {"score": 0.0044968982227349625, "phrase": "large-scale_networks"}, {"score": 0.004359328949187473, "phrase": "key_factor"}, {"score": 0.004252296935371162, "phrase": "simulation_scale"}, {"score": 0.004046020290832207, "phrase": "new_approach"}, {"score": 0.003662892058072211, "phrase": "variable_number"}, {"score": 0.003528730431045574, "phrase": "base_routing_table"}, {"score": 0.0032953582866530966, "phrase": "routing_states"}, {"score": 0.0030965805992969027, "phrase": "spanning_trees"}, {"score": 0.0029645930408561086, "phrase": "constraint_condition"}, {"score": 0.0029097582786754444, "phrase": "optimized_trade-off"}, {"score": 0.002803104254950008, "phrase": "mtree_nix_routing"}, {"score": 0.00266693888510356, "phrase": "current_routing_mechanisms"}, {"score": 0.002633941112839883, "phrase": "mtree_nix"}, {"score": 0.0025691622090542304, "phrase": "better_trade-off"}, {"score": 0.002474961375646351, "phrase": "routing_tables"}, {"score": 0.002429161048032688, "phrase": "cpu_time"}, {"score": 0.0023546984428119864, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "simulation_time"}], "paper_keywords": ["network simulation", " routing mechanism", " MTree_Nix"], "paper_abstract": "Simulation is widely recognized as an essential tool for analyzing large-scale networks. Routing is a key factor which impacts the simulation scale and efficiency. This paper presents a new approach to routing calculation, storage and lookup, named MTree_Nix routing. It maintains a variable number of spanning trees as the base routing table, and uses Nix-Vector routing to compute on demand the routing states that cannot be covered by any of the spanning trees. Theoretically, we obtain the constraint condition on the optimized trade-off between space and time in MTree_Nix routing. Integrated with the advantages of the current routing mechanisms, MTree_Nix comes to a better trade-off between the storage space for the routing tables and the CPU time for routing lookup. Experimental results show that, with a storage space of only about 1% more than Nix-Vector, MTree_Nix can reduce the simulation time to about 85% of that using Nix-Vector.", "paper_title": "An Efficient Routing Mechanism in Network Simulation", "paper_id": "WOS:000260957200004"}