{"auto_keywords": [{"score": 0.04965842359416327, "phrase": "synchronous_data-flow_networks"}, {"score": 0.043133676480455, "phrase": "raymond"}, {"score": 0.04264858398571152, "phrase": "lustre"}, {"score": 0.004815168583414423, "phrase": "modular"}, {"score": 0.004800815332816433, "phrase": "static_scheduling"}, {"score": 0.0046480280613451, "phrase": "modular_sequential_imperative_code"}, {"score": 0.00440838389264585, "phrase": "minimal_number"}, {"score": 0.004280605517385785, "phrase": "possible_feedback_loops"}, {"score": 0.003953729274556226, "phrase": "recent_work"}, {"score": 0.003930529468459255, "phrase": "lublinerman"}, {"score": 0.003907501274730128, "phrase": "szegedy"}, {"score": 0.0038845358652982286, "phrase": "tripakis"}, {"score": 0.0036624867688882356, "phrase": "optimization_problems"}, {"score": 0.003630288321465252, "phrase": "corresponding_decision_problem"}, {"score": 0.003516054149905196, "phrase": "np"}, {"score": 0.0034126606309263694, "phrase": "iterative_algorithm"}, {"score": 0.0032174978938185736, "phrase": "apparent_intractability"}, {"score": 0.0031425844781944896, "phrase": "real_programs"}, {"score": 0.0030694099102195993, "phrase": "earlier_work"}, {"score": 0.0030245409514492124, "phrase": "current_paper"}, {"score": 0.00299793407599072, "phrase": "new_encoding"}, {"score": 0.0027282473656358784, "phrase": "polynomial_time"}, {"score": 0.002602618744142145, "phrase": "possible_sources"}, {"score": 0.002587326429221015, "phrase": "combinatorial_explosion"}, {"score": 0.0023475606648681742, "phrase": "iterative_combinatorial_search"}, {"score": 0.0022460329080075648, "phrase": "large_class"}, {"score": 0.0022328311088272877, "phrase": "block-diagram_formalisms"}, {"score": 0.0022131734411174977, "phrase": "atomic_computations"}, {"score": 0.002193688457453366, "phrase": "delay_operator"}, {"score": 0.0021679744903823793, "phrase": "synchronous_languages"}, {"score": 0.0021362552095270456, "phrase": "scade"}, {"score": 0.0021236966590184475, "phrase": "modeling_tools"}, {"score": 0.002105005612600453, "phrase": "simulink"}], "paper_keywords": ["Real-time systems", " Synchronous languages", " Block-diagrams", " Compilation", " NP-completeness", " Partial orders", " Preorders"], "paper_abstract": "This paper addresses the question of producing modular sequential imperative code from synchronous data-flow networks. Precisely, given a system with several input and output flows, how to decompose it into a minimal number of classes executed atomically and statically scheduled without restricting possible feedback loops between input and output? Though this question has been identified by Raymond in the early years of Lustre, it has almost been left aside until the recent work of Lublinerman, Szegedy and Tripakis. The problem is proven to be intractable, in the sense that it belongs to the family of optimization problems where the corresponding decision problem-there exists a solution with size c-is NP-complete. Then, the authors derive an iterative algorithm looking for solutions for c=1,2,aEuro broken vertical bar where each step is encoded as a satisfiability (SAT) problem. Despite the apparent intractability of the problem, our experience is that real programs do not exhibit such a complexity. Based on earlier work by Raymond, the current paper presents a new encoding of the problem in terms of input/output relations. This encoding simplifies the problem, in the sense that it rejects some solutions, while keeping all the optimal ones. It allows, in polynomial time, (1) to identify nodes for which several schedules are feasible and thus are possible sources of combinatorial explosion; (2) to obtain solutions which in some cases are already optimal; (3) otherwise, to get a non trivial lower bound for c to start an iterative combinatorial search. The method has been validated on several industrial examples. The solution applies to a large class of block-diagram formalisms based on atomic computations and a delay operator, ranging from synchronous languages such as Lustre or Scade to modeling tools such as Simulink.", "paper_title": "Modular static scheduling of synchronous data-flow networks", "paper_id": "WOS:000282825000003"}