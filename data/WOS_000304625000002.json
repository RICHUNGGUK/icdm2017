{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "memory_allocation"}, {"score": 0.004693476992528682, "phrase": "parallel_computing_hardware"}, {"score": 0.004536244367689415, "phrase": "available_resources"}, {"score": 0.0043656173407379895, "phrase": "computing_cores"}, {"score": 0.0041657281535389615, "phrase": "shared-memory_computers"}, {"score": 0.0040779081518317415, "phrase": "computing_resources"}, {"score": 0.004043298628655316, "phrase": "available_memory"}, {"score": 0.003941215575554871, "phrase": "coherency_protocol"}, {"score": 0.003858110309630846, "phrase": "system_size"}, {"score": 0.0037446875860947916, "phrase": "final_system"}, {"score": 0.0036191240628152205, "phrase": "efficient_and_cost-effective_way"}, {"score": 0.0034532961266947734, "phrase": "free_memory"}, {"score": 0.003038532168038562, "phrase": "cache_coherency"}, {"score": 0.0029871209444889716, "phrase": "simpler_implementation"}, {"score": 0.0029617414861784525, "phrase": "better_scalability"}, {"score": 0.002936577024096783, "phrase": "simulation_results"}, {"score": 0.0028745946327439656, "phrase": "additional_mechanisms"}, {"score": 0.0028259493298659288, "phrase": "remote_memory_latency"}, {"score": 0.0023024551893939403, "phrase": "real_executions"}, {"score": 0.0022731540640627307, "phrase": "prototype_demonstrate"}, {"score": 0.0021049977753042253, "phrase": "remote_memory_resources"}], "paper_keywords": ["Cluster", " Memory aggregation", " HyperTransport"], "paper_abstract": "Improvements in parallel computing hardware usually involve increments in the number of available resources for a given application such as the number of computing cores and the amount of memory. In the case of shared-memory computers, the increase in computing resources and available memory is usually constrained by the coherency protocol, whose overhead rises with system size, limiting the scalability of the final system. In this paper we propose an efficient and cost-effective way to increase the memory available for a given application by leveraging free memory in other computers in the cluster. Our proposal is based on the observation that many applications benefit from having more memory resources but do not require more computing cores, thus reducing the requirements for cache coherency and allowing a simpler implementation and better scalability. Simulation results show that, when additional mechanisms intended to hide remote memory latency are used, execution time of applications that use our proposal is similar to the time required to execute them in a computer populated with enough local memory, thus validating the feasibility of our proposal. We are currently building a prototype that implements our ideas. The first results from real executions in this prototype demonstrate not only that our proposal works but also that it can efficiently execute applications that make use of remote memory resources.", "paper_title": "A new degree of freedom for memory allocation in clusters", "paper_id": "WOS:000304625000002"}