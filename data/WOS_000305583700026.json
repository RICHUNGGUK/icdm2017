{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "compressed_http_traffic"}, {"score": 0.012888803299498014, "phrase": "decompression_phase"}, {"score": 0.00481495049065317, "phrase": "multipattern_matching"}, {"score": 0.0046993598473345395, "phrase": "current_security_tools"}, {"score": 0.004614483128885678, "phrase": "\"signature-based\"_detection"}, {"score": 0.004476399615305783, "phrase": "compressed_traffic"}, {"score": 0.004136353298434925, "phrase": "http"}, {"score": 0.004086350434865782, "phrase": "gzip_compression"}, {"score": 0.0037075456471849892, "phrase": "novel_algorithm"}, {"score": 0.0036627245728600073, "phrase": "aho-corasick-based"}, {"score": 0.0035965032173588753, "phrase": "compressed_http"}, {"score": 0.0032039415997394817, "phrase": "commonly_used_aho-corasick_pattern-matching_algorithm"}, {"score": 0.003051713660488494, "phrase": "real_web_application_firewall_signatures"}, {"score": 0.0025578967205807843, "phrase": "compressed_data"}, {"score": 0.002406799309495983, "phrase": "regular_traffic"}, {"score": 0.0022508572821818124, "phrase": "first_paper"}, {"score": 0.0021049977753042253, "phrase": "\"_multipattern_matching"}], "paper_keywords": ["Compressed HTTP", " computer security", " intrusion detection", " pattern matching"], "paper_abstract": "Current security tools, using \"signature-based\" detection, do not handle compressed traffic, whose market-share is constantly increasing. This paper focuses on compressed HTTP traffic. HTTP uses GZIP compression and requires some kind of decompression phase before performing a string matching. We present a novel algorithm, Aho-Corasick-based algorithm for Compressed HTTP (ACCH), that takes advantage of information gathered by the decompression phase in order to accelerate the commonly used Aho-Corasick pattern-matching algorithm. By analyzing real HTTP traffic and real Web application firewall signatures, we show that up to 84% of the data can be skipped in its scan. Surprisingly, we show that it is faster to perform pattern matching on the compressed data, with the penalty of decompression, than on regular traffic. As far as we know, we are the first paper that analyzes the problem of \"on-the-fly\" multipattern matching on compressed HTTP traffic and suggest a solution.", "paper_title": "Accelerating Multipattern Matching on Compressed HTTP Traffic", "paper_id": "WOS:000305583700026"}