{"auto_keywords": [{"score": 0.03666106118361919, "phrase": "famm"}, {"score": 0.00481495049065317, "phrase": "hla_federates"}, {"score": 0.00458488025289647, "phrase": "automated_code_generation"}, {"score": 0.004501453956464956, "phrase": "high_level_architecture_compliant_federate_application"}, {"score": 0.004312622975366676, "phrase": "behavior_model"}, {"score": 0.004157058883925715, "phrase": "architectural_model"}, {"score": 0.0038624981944755813, "phrase": "federate_behavior_model"}, {"score": 0.003769006950727621, "phrase": "live_sequence_charts"}, {"score": 0.0036553070575015344, "phrase": "behavioral_specification_formalism"}, {"score": 0.0035887342563437935, "phrase": "federation_architecture_metamodel"}, {"score": 0.0033961782274326948, "phrase": "formal_language"}, {"score": 0.003334309053314909, "phrase": "federation_architectures"}, {"score": 0.0031360786664165093, "phrase": "federation_architecture"}, {"score": 0.002985988377995789, "phrase": "development_lifecycle"}, {"score": 0.002825681384008326, "phrase": "complete_federate_applications"}, {"score": 0.002469032978674379, "phrase": "federate's_interactions"}, {"score": 0.002424012799998538, "phrase": "federation_execution"}, {"score": 0.0023507916951658455, "phrase": "base_code"}, {"score": 0.0022938068444116827, "phrase": "computation_logic"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["code generation", " high level architecture", " federation architecture metamodel", " live sequence charts", " message sequence charts", " aspect-oriented programming"], "paper_abstract": "This paper addresses the problem of automated code generation for a High Level Architecture compliant federate application given its behavior model. The behavior model is a part of the architectural model of a federation that the federate can participate in. The federate behavior model is based on Live Sequence Charts, adopted as the behavioral specification formalism in the Federation Architecture Metamodel (FAMM). FAMM serves as a formal language for describing federation architectures. An objective is to help the testing of federation architecture by means of its prototype implementation early in the development lifecycle. A further objective is to help developers construct complete federate applications that are well modularized. The approach to achieve these objectives is aspect-oriented in that the generated code. which handles the federate's interactions with a federation execution, serves as the base code, where the computation logic is to be weaved as an aspect. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Model-based code generation for HLA federates", "paper_id": "WOS:000274946400003"}