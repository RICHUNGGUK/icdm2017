{"auto_keywords": [{"score": 0.04464434659506109, "phrase": "pythia"}, {"score": 0.020893633088531642, "phrase": "unweighted_events"}, {"score": 0.01556921907856233, "phrase": "pythia_environment"}, {"score": 0.013486652529389518, "phrase": "bcvegpy"}, {"score": 0.007902683989854756, "phrase": "previous_version"}, {"score": 0.006377694159237858, "phrase": "comput"}, {"score": 0.006069875824403958, "phrase": "distributed_program"}, {"score": 0.0060605969616777874, "phrase": "test_data"}, {"score": 0.005962529016827464, "phrase": "linux"}, {"score": 0.005947352844340491, "phrase": "fortran"}, {"score": 0.005818295046058997, "phrase": "new_version"}, {"score": 0.005779840994411939, "phrase": "b-c_meson"}, {"score": 0.0056454820803221355, "phrase": "idwtup"}, {"score": 0.005464114886688945, "phrase": "parton-level_events"}, {"score": 0.005422755621117216, "phrase": "pythia."}, {"score": 0.00481495049065317, "phrase": "unweighted_b-c_events"}, {"score": 0.0048100361519652374, "phrase": "bcvegpy."}, {"score": 0.004809509911186302, "phrase": "reference_weight"}, {"score": 0.004802673778630903, "phrase": "present_paper"}, {"score": 0.004753877662140812, "phrase": "c.h._chang"}, {"score": 0.004749025271293426, "phrase": "j.x._wang"}, {"score": 0.004744177809781637, "phrase": "x.g._wu"}, {"score": 0.004695973219487428, "phrase": "experimental_simulation"}, {"score": 0.004683998436823624, "phrase": "bcvegpy_output"}, {"score": 0.004669668808983513, "phrase": "i.e._one_les_houches_event_common_block"}, {"score": 0.004648256138317064, "phrase": "standard_les_houches_event_file"}, {"score": 0.004631669428628813, "phrase": "generated_b-c_meson"}, {"score": 0.004586944732982838, "phrase": "title_of"}, {"score": 0.004577333497860995, "phrase": "nprup"}, {"score": 0.0045542650149970765, "phrase": "cpc_program_library"}, {"score": 0.004549615441901901, "phrase": "queen's_university"}, {"score": 0.004544970678410393, "phrase": "belfast"}, {"score": 0.004540330466561498, "phrase": "n._ireland"}, {"score": 0.004531064353992311, "phrase": "standard_cpc"}, {"score": 0.0044505411810016665, "phrase": "idprup"}, {"score": 0.004443969836536021, "phrase": "programming_language"}, {"score": 0.0044210866363336414, "phrase": "scalup"}, {"score": 0.00441657242542108, "phrase": "aqedup"}, {"score": 0.004412062803378427, "phrase": "aqcdup"}, {"score": 0.004405548021861035, "phrase": "gnu_c_compiler"}, {"score": 0.004354093240184499, "phrase": "cpc"}, {"score": 0.004316443350473888, "phrase": "old_program"}, {"score": 0.004305432186614576, "phrase": "physical_problem"}, {"score": 0.0042747494935132125, "phrase": "weighted_and_unweighted_b-c_events"}, {"score": 0.004246221020310978, "phrase": "theoretical_estimations"}, {"score": 0.004224814169462153, "phrase": "gluon-gluon_fusion_mechanism"}, {"score": 0.004214035760602076, "phrase": "'complete_calculation_approach"}, {"score": 0.004209504650959122, "phrase": "vegas"}, {"score": 0.004201137808091102, "phrase": "b-c_events"}, {"score": 0.004169064652165707, "phrase": "large_hadronic_collider"}, {"score": 0.0041520587905005775, "phrase": "precise_studies"}, {"score": 0.004147818129702816, "phrase": "b-c_meson_properties"}, {"score": 0.004135122008706819, "phrase": "mass_spectrum"}, {"score": 0.004080551195121491, "phrase": "pythia_inner_mechanism"}, {"score": 0.004008221422935792, "phrase": "uniform_and_standard_output_format"}, {"score": 0.003987791312497776, "phrase": "typical_running_time"}, {"score": 0.003915097963367722, "phrase": "unweighted_s-wave"}, {"score": 0.0038971318142481926, "phrase": "pythia_inner_structure"}, {"score": 0.003863686314342394, "phrase": "iii"}, {"score": 0.0038358746997494055, "phrase": "present_trick"}, {"score": 0.003791046555959154, "phrase": "running_time"}, {"score": 0.003769585474410734, "phrase": "xmaxup"}, {"score": 0.003752490016875836, "phrase": "s-wave_production"}, {"score": 0.0037334157891178964, "phrase": "hadronic"}, {"score": 0.003666959420501594, "phrase": "large_amount"}, {"score": 0.003659669566224534, "phrase": "theoretical_and_experimental_studies"}, {"score": 0.0036335721109097864, "phrase": "experimental_group"}, {"score": 0.0035709619780925376, "phrase": "standard_output"}, {"score": 0.0035654894371179276, "phrase": "lhe_format"}, {"score": 0.0035600252529123517, "phrase": "standard_format"}, {"score": 0.0035310235514990746, "phrase": "matrix-element-based_generators"}, {"score": 0.00351840945156928, "phrase": "parton-level_information"}, {"score": 0.003513017164012805, "phrase": "general_event_generators"}, {"score": 0.003505846120522028, "phrase": "herwig"}, {"score": 0.003477278430830747, "phrase": "f._one_common_block"}, {"score": 0.0034560093400246997, "phrase": "bcvegpy_pyupin"}, {"score": 0.0034540535929910004, "phrase": "basic_number"}, {"score": 0.003445423461000399, "phrase": "pyupin_subroutine"}, {"score": 0.0034348698951368784, "phrase": "initialization_information"}, {"score": 0.003429605199019095, "phrase": "heprup_common_block"}, {"score": 0.003406884284298397, "phrase": "pdfgup"}, {"score": 0.0034034020984580545, "phrase": "pdfsupidwtup"}, {"score": 0.0033877761046470006, "phrase": "xsecup"}, {"score": 0.003384313383006508, "phrase": "xerrup"}, {"score": 0.003348167086812394, "phrase": "pyupev_subroutine"}, {"score": 0.003332793844677724, "phrase": "separate_event"}, {"score": 0.0033276850802089575, "phrase": "hepeup_common_block"}, {"score": 0.003302258096294299, "phrase": "idup"}, {"score": 0.0032988824951855626, "phrase": "istup"}, {"score": 0.0032955103332408197, "phrase": "mothup"}, {"score": 0.0032736779745005263, "phrase": "pup"}, {"score": 0.0032703283912526872, "phrase": "vtimup"}, {"score": 0.00325864254369767, "phrase": "xwgtup"}, {"score": 0.0032024720628410844, "phrase": "pythia_subroutine_pylhef"}, {"score": 0.0032006681393834417, "phrase": "fig"}, {"score": 0.00318776564552855, "phrase": "single_lhe_file"}, {"score": 0.0031440490898307677, "phrase": "precise_result"}, {"score": 0.0030882678018188804, "phrase": "sampling_importance_function"}, {"score": 0.0030803799973017137, "phrase": "phase-space_points"}, {"score": 0.0030709411386854527, "phrase": "relative_importance"}, {"score": 0.0030459115756837334, "phrase": "phase_space_integration"}, {"score": 0.002997994107160124, "phrase": "almost_all_the_calculated_points"}, {"score": 0.0029842238839138985, "phrase": "final_events"}, {"score": 0.0029614135037912995, "phrase": "so-called_importance_sampling_approach"}, {"score": 0.002943290428408119, "phrase": "proper_weighted_phase_space"}, {"score": 0.0029148214498845196, "phrase": "unweighted_inputs"}, {"score": 0.0029088630560100215, "phrase": "weighted_inputs"}, {"score": 0.0028499430214782443, "phrase": "equal_footing"}, {"score": 0.0028353999085237776, "phrase": "whole_phase_space"}, {"score": 0.0027950716932336702, "phrase": "maximum_weight"}, {"score": 0.002780807804983652, "phrase": "calculated_parton-level_events"}, {"score": 0.002710569892912148, "phrase": "new_scheme"}, {"score": 0.0026788573155667903, "phrase": "standard_hit-and-miss_technique"}, {"score": 0.0026407497269666028, "phrase": "parton-level_event"}, {"score": 0.0025885706453080966, "phrase": "return_value"}, {"score": 0.0025859226898380023, "phrase": "random_number_generating_function"}, {"score": 0.0025218850481901916, "phrase": "larger_reference_weight"}, {"score": 0.0025025997564225963, "phrase": "proper_reference_weight"}, {"score": 0.0024962040724322357, "phrase": "tricky_problem"}, {"score": 0.0024872774964907803, "phrase": "one's_own_experimental_cuts"}, {"score": 0.0024821908999155375, "phrase": "negligible_derivation"}, {"score": 0.0024657310146623222, "phrase": "transverse_momentum"}, {"score": 0.0024157650273306424, "phrase": "lhc_b-c_production_simulation"}, {"score": 0.002408357753107423, "phrase": "newly_suggested_unweighted_scheme"}, {"score": 0.0024022023354757717, "phrase": "main_program"}, {"score": 0.002391162107314164, "phrase": "cross_check"}, {"score": 0.0023850505342162976, "phrase": "weighted_and_unweighted_be_transverse_momentum_pt-distribution"}, {"score": 0.0023668091567934446, "phrase": "solid_line"}, {"score": 0.002364387512527794, "phrase": "dotted_lines"}, {"score": 0.00235955163713601, "phrase": "unweighted_distributions"}, {"score": 0.0023463037986362328, "phrase": "new_strategy"}, {"score": 0.002339109008629821, "phrase": "weighted_distributions"}, {"score": 0.0023212181842786634, "phrase": "weighted_and_unweighted_distributions"}, {"score": 0.0023117323002373588, "phrase": "new_unweighted_scheme"}, {"score": 0.002298752327518534, "phrase": "previous_one"}, {"score": 0.0022753383840093747, "phrase": "newly_accumulating_data"}, {"score": 0.0022732093606786822, "phrase": "lhc."}, {"score": 0.0022556237107175412, "phrase": "pythia's_inner_mechanism"}, {"score": 0.002240662861298735, "phrase": "msel"}, {"score": 0.002196371763797845, "phrase": "external_decay_generator"}, {"score": 0.0021952476559455817, "phrase": "evtgen"}, {"score": 0.002177339803773651, "phrase": "bc_decay_channel"}, {"score": 0.0021706620037105074, "phrase": "remaining_parameters"}, {"score": 0.002149650161817774, "phrase": "collision_energy"}, {"score": 0.002147804104619625, "phrase": "lhc"}, {"score": 0.002143057102208974, "phrase": "present_value"}, {"score": 0.0021255740903698764, "phrase": "normalized_distributions"}, {"score": 0.0021082334032150583, "phrase": "previous_conclusion"}, {"score": 0.0021050224167423787, "phrase": "ref"}], "paper_keywords": ["B-c meson", " BCVEGPY", " Unweighted events"], "paper_abstract": "In the present paper, we provide an addendum to improve the efficiency of generating unweighted events within PYTHIA environment for the generator BCVEGPY2.1 [C.H. Chang, J.X. Wang, X.G. Wu, Comput. Phys. Commun. 174 (2006) 241]. This trick is helpful for experimental simulation. Moreover, the BCVEGPY output has also been improved, i.e. one Les Houches Event common block has been added so as to generate a standard Les Houches Event file that contains the information of the generated B-c meson and the accompanying partons, which can be more conveniently used for further simulation. New version program summary Title of program: BCVEGPY2.1a Catalogue identifier: ADTJ_v2_2 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/ADTJ_v2_2.html Program obtained from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 166 133 No. of bytes in distributed program, including test data, etc.: 1 655 390 Distribution format: tar.gz Programming language used: FORTRAN 77/90 Computer: Any LINUX based on PC with FORTRAN 77 or FORTRAN 90 and GNU C compiler as well Operating systems: LINUX RAM: About 2.0 MB Classification: 11.2, 11.5 Catalogue identifier of previous version: ADTJ_v2_1 Reference in CPC: Comput. Phys. Commun. 175 (2006) 624 Does the new version supersede the old program: No Nature of physical problem: Hadronic Production of B-c meson and its excited states Method of solution: To generate weighted and unweighted B-c events within PYTHIA environment effectively. Restrictions on the complexity of the problem: Hadronic production of (c (b) over bar)-quarkonium via the gluon-gluon fusion mechanism are given by the 'complete calculation approach'. The simulation of B-c events is done within PYTHIA environment. Reasons for new version: More and more data are accumulated at the large hadronic collider, it would be possible to make precise studies on B-c meson properties, such as its lifetime, mass spectrum and etc. The BCVEGPY has been adopted by several experimental groups due to its high efficiency in comparison to that of PYTHIA. However, to generate unweighted events with PYTHIA inner mechanism as programmed by the previous version is still time-consuming. So it would be helpful to improve the efficiency for generating unweighted events within PYTHIA. Moreover, it would be better to use an uniform and standard output format for further detector simulation. Typical running time: Typical running time is machine and user-parameters dependent. I) To generate 106 weighted S-wave (c (b) over bar)-quarkonium events (IDWTUP =3), it will take about 40 minutes on a 1.8 GHz Intel P4-processor machine. II) To generate unweighted S-wave (c (b) over bar)-quarkonium events with PYTHIA inner structure (IDWTUP = 1), it will take about 20 hour on a 1.8 GHz Intel P4-processor machine to generate 1000 events. III) To generate 106 unweightecl S-wave (c (b) over bar)-quarkonium events with the present trick (IDWTUP = 1), it will take 17 hour on a 3.16 Hz Intel E8500 processor machine. Moreover, it can be found that the running time for the P-wave (c (b) over bar)-quarkonium production is about two times longer than the case of S-wave production under the same conditions. Keywords: Event generator; Hadronic production; Be meson; Unweighted events Summary of revisions: (1) The generator BCVEGPY [1-3] has been programmed to generate Be events under PYTHIA environment [4], which has been frequently adopted for theoretical and experimental studies, e.g. Refs. [5-18]. It is found that each experimental group shall have its own simulation software architecture, and the users will spend a lot of time to write an interface so as to implement BCVEGPY into their own software. So it would be better to supply a standard output. The LHE format becomes a standard format [19], which is proposed to store process and event information from the matrix-element-based generators. The users can pass these parton-level information to the general event generators like PYTHIA and HERWIG [20] for further simulation. For such purpose, we add two common blocks in genevent.F. One common block is called as bcvegpy_pyupin and the other one is write_lhe. The bcvegpy_pyupin, which is similar to PYUPIN subroutine in PYTHIA, stores the initialization information in the HEPRUP common block. INTEGER MAXPUP PARAMETER (MAXPUP = 100) INTEGER IDBMUP,PDFGUP,PDFSUPIDWTUP,NPRUP,LPRUP DOUBLE PRECISION EBMUP,XSECUP,XERRUP,XMAXUP COMMON/HEPRUP/IDBMUP(2),EBMUP(2),PDFGUP(2),PDFSUP(2), &IDWTUP,NPRUP,XSECUP(MAXPUP),XERRUP(MAXPUP), &XMAXUP(MAXPUP),LPRUP(MAXPUP) The write_lhe, which is similar to PYUPEV subroutine in pythia, stores the information of each separate event in the HEPEUP common block. INTEGER MAXNUP PARAMETER (MAXNUP = 500) INTEGER NUP,IDPRUP,IDUP,ISTUP,MOTHUP,ICOLUP DOUBLE PRECISION XWGTUP,SCALUP,AQEDUP,AQCDUP,PUP,VTIMUP, &SPINUP COMMON/HEPEUP/NUP,IDPRUP,XWGTUP,SCALUP,AQEDUP,AQCDUP, &IDUP(MAXNUP),ISTUP(MAXNUP),MOTHUP(2,MAXNUP), &ICOLUP(2,MAXNUP),PUP(5,MAXNUP),VTIMUP(MAXNUP), &SPINUP(MAXNUP) The above information can be separately exported to two files 'bcvegpy.init and bcvegpy.evnt'. Then with the help of the PYTHIA subroutine PYLHEF, we can combine these two files into a single LHE file 'bcvegpy.lhe'. (2) As for previous version of BCVEGPY [1-3], its main concern is to improve theoretical estimations, i.e. to obtain a precise result as fast as possible. For the purpose, the VEGAS [21] running together with IDWTUP = 3 is usually appreciated. Firstly, by running VEGAS, one can obtain a sampling importance function, and then the phase-space points are generated according to the relative importance of their corresponding differential cross-sections. This sampling importance function is useful, since the integrand for the phase space integration can be regularized for obtaining a high precision total/differential cross section [21]. Secondly, by setting IDWTUP= 3, all parton-level events when input to PYTHIA shall always be accepted, i.e. almost all the calculated points are effective ones and shall be evolved as final events. As a combination of these two choices, one can generate events within the so-called importance sampling approach, i.e. the parton-level events have been effectively input into PYTHIA with proper weighted phase space. This is one of the reasons why BCVEGPY runs so fast(1) Experimentally, it is the unweighted inputs other than the weighted inputs that are usually needed. By default BCVEGPY generates unweighted events following the same scheme of PYTHIA. For the purpose, one has to set PYTHIA parameter IDWTUP = 1, then all events in a run are treated on an equal footing. And the parton-level events are uniformly generated within the whole phase space, but with a weight (XWGTUP) when input to PYTHIA, and then these events are accepted or rejected with probability XWGTUP/XMAXUP (XMAXUP is the maximum weight of the process). As most of the calculated parton-level events are rejected by this criteria, such a naive scheme is usually time-consuming. For example, by setting IDWTUP =1, it takes about 20 hours on a 1.8 GHz Intel P4-processor machine to generate 1000 Be events. It is too slow if one wants to simulate a large amount of events. Here, we present a new scheme to improve the efficiency of generating unweighted events within PYTHIA environment. For the purpose, we first unweight the events by using the standard hit-and-miss technique [22]. Then, we set IDWTUP= 1, but we replace XMAXUP to be a reference weight that can be generated by earlier exploratory run.(2) Each parton-level event shall result in a ratio between the weight XWGTUP to the reference weight. When such ratio is smaller than one, the event shall be retained or rejected based on whether the ratio is greater or less than the return value of random number generating function PYR(0). When the ratio is larger than one, its integral part stands for the basic number the same events to be generated. And the basic number shall be increased by one or unchanged based on whether its decimal part is greater or less than a random number PYR(0). It is found that a larger reference weight means more events to be rejected and less efficiency. So, to set a proper reference weight is [GRAPHICS] a tricky problem, which requires exploratory running under one's own experimental cuts and should have negligible derivation from theoretical estimations. For example, one may observe that for ATLAS transverse momentum cut P-Tcut = 4 GeV and the rapidity cut y(cut) = 2.5, only few events' weight are larger than the value of 10(6) pb. So we can set this valve as the reference weight, which is reasonable for the LHC B-c production simulation. The code for the newly suggested unweighted scheme is put in the main program 'bcvegpy.F'. As a cross check, we present the weighted and unweighted Be transverse momentum PT-distribution and pseudorapidity eta-distribution in Fig. 1, which are represented by solid line and dotted lines respectively. The unweighted distributions are obtained by setting IDWTUP = 1 and using the new strategy described above, while the weighted distributions are obtained by setting IDWTUP = 3. It can be found that the weighted and unweighted distributions coincide with each other. Since the new unweighted scheme is time-saving in comparison with that of the previous one, so it can be adopted for generating large amount of events, which may suit the needs of the newly accumulating data at LHC. Moreover, to compare and validate the result of BCVEGPY, we also use PYTHIA's inner mechanism to generate B-c meson at the very beginning. For such purpose, we set MSEL = 5 to generate b (c) over bar first, and then add one filter (PDGID = 541) that searches and stores every event that shall result in at least one Be meson. Next, we use the external decay generator EVTGEN [23], which can be running under the PYTHIA environment, to simulate the Bc decay channel Bc -> J/psi + pi. The remaining parameters for PYTHIA are taken to be their default values. Moreover, in doing the calculation, we set the collision energy of LHC to be the present value of 7 TeV. The comparison is presented in Fig. 2, which shows that the normalized distributions for PYTHIA and BCVEGPY agree with each other well. Such an observation also agrees with the previous conclusion drawn by Ref. [12].", "paper_title": "A trick to improve the efficiency of generating unweighted B-c events from BCVEGPY", "paper_id": "WOS:000298531400028"}