{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "innermost_runtime_complexity"}, {"score": 0.03663614835271814, "phrase": "dependency_pair_framework"}, {"score": 0.004499647408293102, "phrase": "dependency_pairs"}, {"score": 0.004204904449336037, "phrase": "modular_framework"}, {"score": 0.0038764861784138117, "phrase": "term_rewrite_systems"}, {"score": 0.00338493754743055, "phrase": "termination_analysis"}, {"score": 0.0031629800646754505, "phrase": "previous_work"}, {"score": 0.002955533639862811, "phrase": "direct_adaptation"}, {"score": 0.0028764048059439205, "phrase": "successful_termination_techniques"}, {"score": 0.0025113494092413604, "phrase": "complexity_analysis"}, {"score": 0.0024111277643627154, "phrase": "extensive_experimental_results"}, {"score": 0.0021049977753042253, "phrase": "existing_techniques"}], "paper_keywords": ["Complexity analysis", " Term rewriting", " Termination analysis", " Dependency pairs"], "paper_abstract": "We present a modular framework to analyze the innermost runtime complexity of term rewrite systems automatically. Our method is based on the dependency pair framework for termination analysis. In contrast to previous work, we developed a direct adaptation of successful termination techniques from the dependency pair framework in order to use them for complexity analysis. By extensive experimental results, we demonstrate the power of our method compared to existing techniques.", "paper_title": "Analyzing Innermost Runtime Complexity of Term Rewriting by Dependency Pairs", "paper_id": "WOS:000318793200003"}