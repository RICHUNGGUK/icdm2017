{"auto_keywords": [{"score": 0.04073034420887586, "phrase": "human_resource_allocation"}, {"score": 0.034811465999487534, "phrase": "ebs"}, {"score": 0.01544753218440461, "phrase": "event-based_scheduler"}, {"score": 0.014917158681856137, "phrase": "software_projects"}, {"score": 0.013291062052237677, "phrase": "software_project_planning"}, {"score": 0.0076584984681079505, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "software_project_scheduling"}, {"score": 0.004647911247507267, "phrase": "effective_computer"}, {"score": 0.004470823343432748, "phrase": "software_engineering"}, {"score": 0.004165879874212301, "phrase": "human_resources"}, {"score": 0.004092937456065441, "phrase": "adequate_model"}, {"score": 0.0039648318122148555, "phrase": "project_task_scheduling"}, {"score": 0.0037336520904376687, "phrase": "existing_models"}, {"score": 0.0034543031591181546, "phrase": "flexible_and_effective_model"}, {"score": 0.0033579708256295847, "phrase": "novel_approach"}, {"score": 0.0032527939106509946, "phrase": "ant_colony_optimization"}, {"score": 0.0031732652552570644, "phrase": "proposed_approach"}, {"score": 0.00310664242361199, "phrase": "task_list"}, {"score": 0.0030738557655525913, "phrase": "planned_employee_allocation_matrix"}, {"score": 0.002988101395789399, "phrase": "task_scheduling"}, {"score": 0.0029670381308395505, "phrase": "employee_allocation"}, {"score": 0.0028437313714204087, "phrase": "beginning_time"}, {"score": 0.0027255350933549703, "phrase": "finished_tasks"}, {"score": 0.0025573643582417573, "phrase": "basic_idea"}, {"score": 0.00229164285862567, "phrase": "resource_conflict"}, {"score": 0.002180848602315088, "phrase": "planning_problem"}, {"score": 0.002157811371348755, "phrase": "aco_algorithm"}, {"score": 0.0021199543519570376, "phrase": "experimental_results"}], "paper_keywords": ["Software project planning", " project scheduling", " resource allocation", " workload assignment", " ant colony optimization (ACO)"], "paper_abstract": "Research into developing effective computer aided techniques for planning software projects is important and challenging for software engineering. Different from projects in other fields, software projects are people-intensive activities and their related resources are mainly human resources. Thus, an adequate model for software project planning has to deal with not only the problem of project task scheduling but also the problem of human resource allocation. But as both of these two problems are difficult, existing models either suffer from a very large search space or have to restrict the flexibility of human resource allocation to simplify the model. To develop a flexible and effective model for software project planning, this paper develops a novel approach with an event-based scheduler (EBS) and an ant colony optimization (ACO) algorithm. The proposed approach represents a plan by a task list and a planned employee allocation matrix. In this way, both the issues of task scheduling and employee allocation can be taken into account. In the EBS, the beginning time of the project, the time when resources are released from finished tasks, and the time when employees join or leave the project are regarded as events. The basic idea of the EBS is to adjust the allocation of employees at events and keep the allocation unchanged at nonevents. With this strategy, the proposed method enables the modeling of resource conflict and task preemption and preserves the flexibility in human resource allocation. To solve the planning problem, an ACO algorithm is further designed. Experimental results on 83 instances demonstrate that the proposed method is very promising.", "paper_title": "Ant Colony Optimization for Software Project Scheduling and Staffing with an Event-Based Scheduler", "paper_id": "WOS:000312996800001"}