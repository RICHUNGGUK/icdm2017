{"auto_keywords": [{"score": 0.03321547894243722, "phrase": "constraint_programming"}, {"score": 0.00481495049065317, "phrase": "constraint_programming_system"}, {"score": 0.0038737214010638745, "phrase": "search_engine"}, {"score": 0.0035507457285983268, "phrase": "disjunctive_search_tree"}, {"score": 0.0034291991359158827, "phrase": "constraint_program"}, {"score": 0.0031984060035955292, "phrase": "monadic_definition"}, {"score": 0.0028065957753430713, "phrase": "monadic_search_tree"}, {"score": 0.0026175952455594277, "phrase": "search_and_search_strategies"}, {"score": 0.0025723630851105304, "phrase": "first-class_objects"}, {"score": 0.0023782753249846794, "phrase": "composable_search_transformers"}, {"score": 0.0023371689326096476, "phrase": "search_transformers"}, {"score": 0.0022768346311104735, "phrase": "powerful_and_unifying_approach"}, {"score": 0.0021049977753042253, "phrase": "resulting_constraint_programming_system"}], "paper_keywords": [""], "paper_abstract": "A constraint programming system combines two essential components: a constraint solver and a search engine. The constraint solver reasons about satisfiability of conjunctions of constraints; and the search engine controls the search for solutions by iteratively exploring a disjunctive search tree defined by the constraint program. In this paper we give a monadic definition of constraint programming in which the solver is defined as a monad threaded through the monadic search tree. We are then able to define search and search strategies as first-class objects that can themselves be built or extended by composable search transformers. Search transformers give a powerful and unifying approach to viewing search in constraint programming, and the resulting constraint programming system is first class and extremely flexible.", "paper_title": "Monadic constraint programming", "paper_id": "WOS:000272196200003"}