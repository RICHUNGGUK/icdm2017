{"auto_keywords": [{"score": 0.028891126864103063, "phrase": "flashtrie"}, {"score": 0.00481495049065317, "phrase": "ip_route_lookup"}, {"score": 0.00477924690801092, "phrase": "hash-based_prefix-compressed_trie"}, {"score": 0.004587535692463736, "phrase": "ip_route"}, {"score": 0.004570491683870396, "phrase": "lookup_architecture"}, {"score": 0.004322267755421529, "phrase": "fast_real-time_updates"}, {"score": 0.004274257668843717, "phrase": "ever-growing_routing_tables"}, {"score": 0.004195418010131832, "phrase": "proposed_multibit-trie-based_schemes"}, {"score": 0.004133390261297075, "phrase": "treebitmap"}, {"score": 0.004042056914551798, "phrase": "today's_high-end_routers"}, {"score": 0.0039380388343479384, "phrase": "multiple_external_memory_accesses"}, {"score": 0.00383668723824441, "phrase": "pipelining_technique"}, {"score": 0.0037518852820756323, "phrase": "high-speed_lookup"}, {"score": 0.003641723621333872, "phrase": "pipelining"}, {"score": 0.0035744997458371335, "phrase": "poor_memory_load-balancing"}, {"score": 0.0034566143156030426, "phrase": "new_ip_route_lookup_architecture"}, {"score": 0.0033426036530090205, "phrase": "multibit-trie-based_approaches"}, {"score": 0.003280891942617853, "phrase": "hash-based_membership_query"}, {"score": 0.0032444113660668743, "phrase": "off-chip_memory_accesses"}, {"score": 0.0031726587374218277, "phrase": "memory_utilization"}, {"score": 0.003137377828938824, "phrase": "memory_modules"}, {"score": 0.00307944332532505, "phrase": "data_structure_size"}, {"score": 0.0030451958332949735, "phrase": "lookup_depth"}, {"score": 0.002911961514073769, "phrase": "new_data_structure"}, {"score": 0.0028903278985330117, "phrase": "prefix-compressed_trie"}, {"score": 0.0027535633837592597, "phrase": "implementation_results"}, {"score": 0.0024529174827030787, "phrase": "five_lookup_engines"}, {"score": 0.0024256208351516027, "phrase": "state-of-the-art_field_programmable_gate_array"}, {"score": 0.0021049977753042253, "phrase": "incremental_real-time_updates"}], "paper_keywords": ["DRAM", " field programmable gate array (FPGA)", " FlashTrie", " hash", " IPv4", " IPv6", " longest prefix match", " membership query", " next-generation network", " PC-Trie", " Prefix Compressed Trie", " route lookup"], "paper_abstract": "It is becoming apparent that the next-generation IP route lookup architecture needs to achieve speeds of 100 Gb/s and beyond while supporting IPv4 and IPv6 with fast real-time updates to accommodate ever-growing routing tables. Some of the proposed multibit-trie-based schemes, such as TreeBitmap, have been used in today's high-end routers. However, their large data structures often require multiple external memory accesses for each route lookup. A pipelining technique is widely used to achieve high-speed lookup with the cost of using many external memory chips. Pipelining also often leads to poor memory load-balancing. In this paper, we propose a new IP route lookup architecture called FlashTrie that overcomes the shortcomings of the multibit-trie-based approaches. We use a hash-based membership query to limit off-chip memory accesses per lookup and to balance memory utilization among the memory modules. By compacting the data structure size, the lookup depth of each level can be increased. We also develop a new data structure called Prefix-Compressed Trie that reduces the size of a bitmap by more than 80%. Our simulation and implementation results show that FlashTrie can achieve 80-Gb/s worst-case throughput while simultaneously supporting 2 M prefixes for IPv4 and 318 k prefixes for IPv6 with one lookup engine and two Double-Data-Rate (DDR3) SDRAM chips. When implementing five lookup engines on a state-of-the-art field programmable gate array (FPGA) chip and using 10 DDR3 memory chips, we expect FlashTrie to achieve 1-Gpps (packet per second) throughput, equivalent to 400 Gb/s for IPv4 and 600 Gb/s for IPv6. FlashTrie also supports incremental real-time updates.", "paper_title": "FlashTrie: Beyond 100-Gb/s IP Route Lookup Using Hash-Based Prefix-Compressed Trie", "paper_id": "WOS:000307895100021"}