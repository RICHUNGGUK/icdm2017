{"auto_keywords": [{"score": 0.04982338976954306, "phrase": "task_parallelism"}, {"score": 0.04206867054083564, "phrase": "task-parallel_programs"}, {"score": 0.015108203155286352, "phrase": "cilk"}, {"score": 0.012287162163958445, "phrase": "hj"}, {"score": 0.00481495049065317, "phrase": "optimizing_task-parallel_programs"}, {"score": 0.004700468701207975, "phrase": "programming_models"}, {"score": 0.004600983660690157, "phrase": "java_concurrency"}, {"score": 0.004527747831940216, "phrase": "habanero-java"}, {"score": 0.004420064334987394, "phrase": "multicore_programmers"}, {"score": 0.004280442521885289, "phrase": "multiple_levels"}, {"score": 0.0041786160019500265, "phrase": "performance_degradation"}, {"score": 0.004145212745333947, "phrase": "increased_overheads"}, {"score": 0.0040465901036133975, "phrase": "transformation_framework"}, {"score": 0.0039608892760521815, "phrase": "task_creation"}, {"score": 0.003939748053452577, "phrase": "task_termination"}, {"score": 0.0035778632599436024, "phrase": "composite_code_statements"}, {"score": 0.003530293356008138, "phrase": "ateach_loops"}, {"score": 0.0033913354239531552, "phrase": "openmp."}, {"score": 0.003337286303168592, "phrase": "data_dependence"}, {"score": 0.003266558217364143, "phrase": "analysis_algorithm"}, {"score": 0.0032144944168271523, "phrase": "program_transformations"}, {"score": 0.0029347124880572174, "phrase": "redundant_task_termination_operations"}, {"score": 0.0029034358982402346, "phrase": "expensive_task_creation"}, {"score": 0.0028266908655012915, "phrase": "useful_parallelism"}, {"score": 0.0028115863316685937, "phrase": "ideal_parallelism"}, {"score": 0.002751968796076333, "phrase": "iterative_transformation_framework"}, {"score": 0.002708084457786737, "phrase": "relevant_transformations"}, {"score": 0.002686404707503387, "phrase": "fixed_point"}, {"score": 0.0026083827931787846, "phrase": "exception_semantics"}, {"score": 0.002587499140336252, "phrase": "specified_transformations"}, {"score": 0.002525843523034335, "phrase": "precise_exception_semantics"}, {"score": 0.002512342528545883, "phrase": "experimental_results"}, {"score": 0.002465653420367008, "phrase": "task-parallel_benchmarks"}, {"score": 0.002336985217790337, "phrase": "intel"}, {"score": 0.002232873707973742, "phrase": "proposed_optimizations"}, {"score": 0.00219136680904719, "phrase": "synergistic_way"}, {"score": 0.0021564027934811037, "phrase": "overall_geometric_average_performance_improvement"}], "paper_keywords": ["Algorithms", " Performance", " Experimentation"], "paper_abstract": "Task parallelism has increasingly become a trend with programming models such as OpenMP 3.0, Cilk, Java Concurrency, X10, Chapel and Habanero-Java (HJ) to address the requirements of multicore programmers. While task parallelism increases productivity by allowing the programmer to express multiple levels of parallelism, it can also lead to performance degradation due to increased overheads. In this article, we introduce a transformation framework for optimizing task-parallel programs with a focus on task creation and task termination operations. These operations can appear explicitly in constructs such as async, finish in X10 and HJ, task, taskwait in OpenMP 3.0, and spawn, sync in Cilk, or implicitly in composite code statements such as foreach and ateach loops in X10, forall and foreach loops in HJ, and parallel loop in OpenMP. Our framework includes a definition of data dependence in task-parallel programs, a happens-before analysis algorithm, and a range of program transformations for optimizing task parallelism. Broadly, our transformations cover three different but interrelated optimizations: (1) finish-elimination, (2) forall-coarsening, and (3) loop-chunking. Finish-elimination removes redundant task termination operations, forall-coarsening replaces expensive task creation and termination operations with more efficient synchronization operations, and loop-chunking extracts useful parallelism from ideal parallelism. All three optimizations are specified in an iterative transformation framework that applies a sequence of relevant transformations until a fixed point is reached. Further, we discuss the impact of exception semantics on the specified transformations, and extend them to handle task-parallel programs with precise exception semantics. Experimental results were obtained for a collection of task-parallel benchmarks on three multicore platforms: a dual-socket 128-thread (16-core) Niagara T2 system, a quad-socket 16-core Intel Xeon SMP, and a quad-socket 32-core Power7 SMP. We have observed that the proposed optimizations interact with each other in a synergistic way, and result in an overall geometric average performance improvement between 6.28x and 10.30x, measured across all three platforms for the benchmarks studied.", "paper_title": "A Transformation Framework for Optimizing Task-Parallel Programs", "paper_id": "WOS:000318631900002"}