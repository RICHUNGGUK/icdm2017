{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "haskell"}, {"score": 0.004456044928556639, "phrase": "automated_termination_analysis"}, {"score": 0.0038825121288253435, "phrase": "real_programming_languages"}, {"score": 0.0037188360359702182, "phrase": "new_approach"}, {"score": 0.003531474887552889, "phrase": "existing_techniques"}, {"score": 0.003212074324593725, "phrase": "haskell_programs"}, {"score": 0.0029980260560551982, "phrase": "termination_techniques"}, {"score": 0.0029467742734417255, "phrase": "ordinary_rewriting"}, {"score": 0.0022168460543913787, "phrase": "termination_prover_aprove"}, {"score": 0.0021049977753042253, "phrase": "existing_haskell_libraries"}], "paper_keywords": ["Languages", " Theory", " Verification", " Functional programming", " Haskell", " termination analysis", " term rewriting", " dependency pairs"], "paper_abstract": "There are many powerful techniques for automated termination analysis of term rewriting. However, up to now they have hardly been used for real programming languages. We present a new approach which permits the application of existing techniques from term rewriting to prove termination of most functions defined in Haskell programs. In particular, we show how termination techniques for ordinary rewriting can be used to handle those features of Haskell which are missing in term rewriting (e.g., lazy evaluation, polymorphic types, and higher-order functions). We implemented our results in the termination prover AProVE and successfully evaluated them on existing Haskell libraries.", "paper_title": "Automated Termination Proofs for Haskell by Term Rewriting", "paper_id": "WOS:000288153000002"}