{"auto_keywords": [{"score": 0.04911945324917725, "phrase": "regular_expressions"}, {"score": 0.00481495049065317, "phrase": "modern_network_intrusion_detection_systems"}, {"score": 0.0046803650677267146, "phrase": "attack_signatures"}, {"score": 0.0046051552912212065, "phrase": "nids"}, {"score": 0.004386637056030611, "phrase": "finite_automata"}, {"score": 0.004195418010131832, "phrase": "fast_matching"}, {"score": 0.0041112665381266315, "phrase": "large_signature_sets"}, {"score": 0.003996271202811961, "phrase": "dfa_combination_results"}, {"score": 0.003947973513495612, "phrase": "multiplicative_increase"}, {"score": 0.0030953529970646626, "phrase": "alternative_approach"}, {"score": 0.002984373546099842, "phrase": "nfa-based_signature_matching"}, {"score": 0.0028541057064952876, "phrase": "multiple_states"}, {"score": 0.002685558057339722, "phrase": "input_symbol"}, {"score": 0.002599763359352916, "phrase": "ordered_binary_decision_diagrams"}, {"score": 0.002506507889886399, "phrase": "nfa_frontier_states"}, {"score": 0.002466162455419497, "phrase": "http"}, {"score": 0.002446214206553658, "phrase": "ftp"}, {"score": 0.002436289099444074, "phrase": "signature_sets"}, {"score": 0.0024165901790010047, "phrase": "snort"}, {"score": 0.00235843888868088, "phrase": "traditional_nfas"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Network intrusion detection", " Finite automata", " Regular expressions", " Ordered binary decision diagrams"], "paper_abstract": "Modern network intrusion detection systems (NIDS) employ regular expressions as attack signatures. Internally. NIDS represent and operate these regular expressions as finite automata. However, finite automata present a well-known time/space tradeoff. Deterministic automata (DFAs) provide fast matching, but DFAs for large signature sets often consume gigabytes of memory because DFA combination results in a multiplicative increase in the number of states. Non-deterministic automata (NFAs) address this problem and are space-efficient, but are several orders of magnitude slower than DFAs. This time/space tradeoff has motivated much recent research, primarily with a focus on improving the space-efficiency of DFAs, often at the cost of reducing their performance. We consider an alternative approach that focuses instead on improving the time-efficiency of NFA-based signature matching. NFAs are inefficient because they maintain a frontier of multiple states at any instant during their operation, each of which must be processed for every input symbol. We introduce NFA-OBDDs, which use ordered binary decision diagrams (OBDDs) to efficiently process sets of NFA frontier states. Experiments using HTTP and FTP signature sets from Snort show that NFA-OBDDs can outperform traditional NFAs by up to three orders of magnitude, thereby making them competitive with a variant of DFAs, while still retaining the space-efficiency of NFAs. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Fast, memory-efficient regular expression matching with NFA-OBDDs", "paper_id": "WOS:000295435500012"}