{"auto_keywords": [{"score": 0.024769704756643092, "phrase": "io"}, {"score": 0.00481495049065317, "phrase": "reverse-k-nearest-neighbor_joins"}, {"score": 0.0036857412768922827, "phrase": "multiple_rknn_queries"}, {"score": 0.0034851070574149993, "phrase": "short_time_interval"}, {"score": 0.003115908199991072, "phrase": "different_types"}, {"score": 0.003077372515276563, "phrase": "rknn"}, {"score": 0.0028206052780047424, "phrase": "possible_solutions"}, {"score": 0.0027512482368183596, "phrase": "non-trivial_variants"}, {"score": 0.00266693888510356, "phrase": "vector_spaces"}, {"score": 0.0026175952455594277, "phrase": "self_and_mutual_pruning_strategies"}, {"score": 0.0025059724686541263, "phrase": "developed_algorithms"}, {"score": 0.002474961375646351, "phrase": "general_metric_spaces"}, {"score": 0.002414082940963702, "phrase": "extensive_performance_analysis"}, {"score": 0.0023694065215394593, "phrase": "evaluation_results"}, {"score": 0.0022402661832994094, "phrase": "compared_algorithms"}, {"score": 0.0021987994275190314, "phrase": "wide_range"}, {"score": 0.0021715812867126884, "phrase": "different_setups"}, {"score": 0.002131383155056741, "phrase": "appropriate_query_algorithms"}, {"score": 0.0021049977753042253, "phrase": "specific_scenarios"}], "paper_keywords": ["Reverse nearest neighbor queries", " RkNN join", " Spatial databases"], "paper_abstract": "A reverse k-nearest neighbour (RkNN) query determines the objects from a database that have the query as one of their k-nearest neighbors. Processing such a query has received plenty of attention in research. However, the effect of running multiple RkNN queries at once (join) or within a short time interval (bulk/group query) has only received little attention so far. In this paper, we analyze different types of RkNN joins and provide a classification of existing RkNN join algorithms. We discuss possible solutions for solving the non-trivial variants of the problem in vector spaces, including self and mutual pruning strategies. Further, we generalize the developed algorithms to general metric spaces. During an extensive performance analysis we provide evaluation results showing the IO and CPU performance of the compared algorithms for a wide range of different setups and suggest appropriate query algorithms for specific scenarios.", "paper_title": "On reverse-k-nearest-neighbor joins", "paper_id": "WOS:000351538800005"}