{"auto_keywords": [{"score": 0.0286075820722512, "phrase": "obgg_models"}, {"score": 0.015719716506582538, "phrase": "object-based_graph_grammars"}, {"score": 0.013939965940170225, "phrase": "model_transformation"}, {"score": 0.008471479959300327, "phrase": "promela"}, {"score": 0.004777392826700429, "phrase": "promela._model"}, {"score": 0.00452252857066346, "phrase": "existing_analysis"}, {"score": 0.004487241576747549, "phrase": "implementation_techniques"}, {"score": 0.004331811712726697, "phrase": "formal_verification"}, {"score": 0.004298006360831255, "phrase": "wide_use"}, {"score": 0.0041653916552844535, "phrase": "efficient_model_checkers"}, {"score": 0.003958529104387973, "phrase": "programming_languages"}, {"score": 0.0039122637074546895, "phrase": "input_languages"}, {"score": 0.0038817197332605647, "phrase": "prominent_model_checking_tools"}, {"score": 0.003732526540522333, "phrase": "safe_analysis_method"}, {"score": 0.0036031440110534853, "phrase": "transformation_process"}, {"score": 0.0033053807885373905, "phrase": "target_languages"}, {"score": 0.0029500270981001058, "phrase": "obgg"}, {"score": 0.002915514089373717, "phrase": "formal_language"}, {"score": 0.002847691227421257, "phrase": "distributed_systems"}, {"score": 0.002511672561475743, "phrase": "spin_model_checker"}, {"score": 0.0021383149182448544, "phrase": "promela."}], "paper_keywords": ["Graph grammars", " Model transformation", " PROMELA", " Correctness"], "paper_abstract": "Model transformation is an approach that, among other advantages, enables the reuse of existing analysis and implementation techniques, languages and tools. The area of formal verification makes wide use of model transformation because the cost of constructing efficient model checkers is extremely high. There are various examples of translations from specification and programming languages to the input languages of prominent model checking tools, like SPIN. However, this approach provides a safe analysis method only if there is a guarantee that the transformation process preserves the semantics of the original specification/program, that is, that the transformation is correct. Depending on the source and/or target languages, this notion of correctness is not easy to achieve. In this paper, we tackle this problem in the context of Object-Based Graph Grammars (OBGG). OBGG is a formal language suitable for the specification of distributed systems, with a variety of tools and techniques centered around the transformation of OBGG models. We describe in details the model transformation from OBGG models to PROMELA, the input language of the SPIN model checker. Amongst the contributions of this paper are: (a) the correctness proof of the transformation from OBGG models to PROMELA; (b) a generalization of this process in steps that may be used as a guide to prove the correctness of transformations from different specification/programming languages to PROMELA. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Correct transformation: From object-based graph grammars to PROMELA", "paper_id": "WOS:000300748000006"}