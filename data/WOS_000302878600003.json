{"auto_keywords": [{"score": 0.04888818798303966, "phrase": "javascript"}, {"score": 0.005106315815784122, "phrase": "ajax"}, {"score": 0.00481495049065317, "phrase": "ajax-based_web_applications"}, {"score": 0.004766683200410046, "phrase": "dynamic_analysis_of_user_interface_state_changes"}, {"score": 0.00464811139983244, "phrase": "dynamic_dom_manipulation"}, {"score": 0.004578382275810468, "phrase": "client_side"}, {"score": 0.0045324756541157574, "phrase": "web_applications"}, {"score": 0.004442032546224076, "phrase": "widespread_approach"}, {"score": 0.0043753813457279404, "phrase": "rich_interactivity"}, {"score": 0.004288059466938456, "phrase": "modern_web_applications"}, {"score": 0.0038964032225585117, "phrase": "unique_urls"}, {"score": 0.0038186039088445524, "phrase": "traditional_web_crawlers"}, {"score": 0.0036676174658755683, "phrase": "novel_technique"}, {"score": 0.0036125439380579626, "phrase": "ajax-based_applications"}, {"score": 0.003576286811853861, "phrase": "automatic_dynamic_analysis"}, {"score": 0.003540392285585644, "phrase": "user-interface-state_changes"}, {"score": 0.0034003686971964707, "phrase": "dom_tree"}, {"score": 0.0030431198971423937, "phrase": "ajax_application"}, {"score": 0.0029973957125353306, "phrase": "inferred_model"}, {"score": 0.002922705896608178, "phrase": "program_comprehension"}, {"score": 0.002821247621250663, "phrase": "dynamic_web_states"}, {"score": 0.0026959452932289797, "phrase": "static_version"}, {"score": 0.0024493494346360415, "phrase": "crawljax"}, {"score": 0.002214048743052355, "phrase": "empirical_studies"}, {"score": 0.0021049977753042253, "phrase": "open-source_and_industrial_web_applications"}], "paper_keywords": ["Design", " Algorithms", " Experimentation", " Crawling", " Ajax", " Web 2.0", " hidden web", " dynamic analysis", " DOM crawling"], "paper_abstract": "Using JAVASCRIPT and dynamic DOM manipulation on the client side of Web applications is becoming a widespread approach for achieving rich interactivity and responsiveness in modern Web applications. At the same time, such techniques-collectively known as AJAX-shatter the concept of webpages with unique URLs,on which traditional Web crawlers are based. This article describes a novel technique for crawling AJAX-based applications through automatic dynamic analysis of user-interface-state changes in Web browsers. Our algorithm scans the DOM tree, spots candidate elements that are capable of changing the state, fires events on those candidate elements, and incrementally infers a state machine that models the various navigational paths and states within an AJAX application. This inferred model can be used in program comprehension and in analysis and testing of dynamic Web states, for instance, or for generating a static version of the application. In this article, we discuss our sequential and concurrent AJAX crawling algorithms We present our open source tool called CRAWLJAX, which implements the concepts and algorithms discussed in this article. Additionally, we report a number of empirical studies in which we apply our approach to a number of open-source and industrial Web applications and elaborate on the obtained results.", "paper_title": "Crawling AJAX-Based Web Applications through Dynamic Analysis of User Interface State Changes", "paper_id": "WOS:000302878600003"}