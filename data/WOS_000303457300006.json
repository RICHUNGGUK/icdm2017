{"auto_keywords": [{"score": 0.04301896938588357, "phrase": "source_model"}, {"score": 0.00481495049065317, "phrase": "model_transformation"}, {"score": 0.004692227830462433, "phrase": "important_concern"}, {"score": 0.004657739551687038, "phrase": "software_engineering"}, {"score": 0.004539005582217309, "phrase": "model-driven_development"}, {"score": 0.004310501708408856, "phrase": "test-case_generation"}, {"score": 0.004154332348800334, "phrase": "target_model"}, {"score": 0.003901753431467637, "phrase": "mt"}, {"score": 0.003774164192882704, "phrase": "transformation_rules"}, {"score": 0.0034925663938977715, "phrase": "proprietary_and_non-widely_used_formalisms"}, {"score": 0.0032319109979344184, "phrase": "transformation_problem"}, {"score": 0.003161065111494053, "phrase": "fragmentary_knowledge"}, {"score": 0.0028189599390180536, "phrase": "rule_induction"}, {"score": 0.0026570998719084153, "phrase": "source_and_target_formalisms"}, {"score": 0.0025796799784169196, "phrase": "extra_information"}, {"score": 0.0024768883044869023, "phrase": "optimization-based_approach"}, {"score": 0.0024136132575631273, "phrase": "examples_combinations"}, {"score": 0.0023958326775913165, "phrase": "transformation_fragments"}, {"score": 0.0021363670305843403, "phrase": "industrial_projects"}, {"score": 0.0021049977753042253, "phrase": "obtained_models"}], "paper_keywords": ["Search-based software engineering", " Automated model transformation", " Transformation by example"], "paper_abstract": "Model transformation (MT) has become an important concern in software engineering. In addition to its role in model-driven development, it is useful in many other situations such as measurement, refactoring, and test-case generation. Roughly speaking, MT aims to derive a target model from a source model by following some rules or principles. So far, the contributions in MT have mostly relied on defining languages to express transformation rules. However, the task of defining, expressing, and maintaining these rules can be difficult, especially for proprietary and non-widely used formalisms. In some situations, companies have accumulated examples from past experiences. Our work starts from these observations to view the transformation problem as one to solve with fragmentary knowledge, i.e. with only examples of source-to-target MTs. Our approach has two main advantages: (1) it always proposes a transformation for a source model, even when rule induction is impossible or difficult to achieve; (2) it is independent from the source and target formalisms; aside from the examples, no extra information is needed. In this context, we propose an optimization-based approach that consists of finding in the examples combinations of transformation fragments that best cover the source model. To that end, we use two strategies based on two search-based algorithms: particle swarm optimization and simulated annealing. The results of validating our approach on industrial projects show that the obtained models are accurate.", "paper_title": "Search-based model transformation by example", "paper_id": "WOS:000303457300006"}