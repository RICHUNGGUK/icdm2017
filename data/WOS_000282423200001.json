{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "continuous_queries"}, {"score": 0.04959913342990779, "phrase": "data_streams"}, {"score": 0.004578382275810468, "phrase": "parallel_processing"}, {"score": 0.0043533862892678864, "phrase": "single_processor_dsmss"}, {"score": 0.004160319763461951, "phrase": "logical_machines"}, {"score": 0.0040978781692373005, "phrase": "multiprocessing_environment"}, {"score": 0.004036369952624852, "phrase": "parallel_execution"}, {"score": 0.003876806615011266, "phrase": "shortest_path"}, {"score": 0.0038186039088445524, "phrase": "weighted_graph"}, {"score": 0.003780286517897356, "phrase": "query_mega_graph"}, {"score": 0.00363080961099728, "phrase": "logical_view"}, {"score": 0.003594369823549604, "phrase": "k_machines"}, {"score": 0.0033492947290751996, "phrase": "different_operators"}, {"score": 0.003012560489169148, "phrase": "qmg."}, {"score": 0.0029672941061574375, "phrase": "new_computed_path"}, {"score": 0.0028070431733705735, "phrase": "proposed_system"}, {"score": 0.0026155098867947295, "phrase": "petrinets"}, {"score": 0.0025119730908615104, "phrase": "serial_query_processing"}, {"score": 0.0024493494346360415, "phrase": "min-latency_scheduling_algorithm"}, {"score": 0.0024125253170522816, "phrase": "presented_system"}, {"score": 0.0021049977753042253, "phrase": "data_stream_management_systems"}], "paper_keywords": ["Query plan", " Data stream", " Parallel execution", " Tuple latency"], "paper_abstract": "In this paper, we propose parallel processing of continuous queries over data streams to handle the bottleneck of single processor DSMSs. Queries are executed in parallel over the logical machines in a multiprocessing environment. Scheduling parallel execution of operators is performed via finding the shortest path in a weighted graph called Query Mega Graph (QMG), which is a logical view of K machines. By lapse of time, number of tuples waiting in queues of different operators may be very different. When a queue becomes full, re-scheduling is done by updating weight of edges of QMG. In the new computed path, machines with more workload will be used less. The proposed system is formally presented and its correctness is proved. It is also modeled in PetriNets and its performance is evaluated and compared with serial query processing as well as the Min-Latency scheduling algorithm. The presented system is shown to outperform them w.r.t. tuple latency (response time), memory usage, throughput and also tuple loss- critical parameters in any data stream management systems.", "paper_title": "Parallel processing of continuous queries over data streams", "paper_id": "WOS:000282423200001"}