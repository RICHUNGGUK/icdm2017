{"auto_keywords": [{"score": 0.04814050608144561, "phrase": "firing_squad_synchronization_problem"}, {"score": 0.00481495049065317, "phrase": "tolerant_solutions"}, {"score": 0.004494570360108983, "phrase": "linear_cellular_automata"}, {"score": 0.004195418010131832, "phrase": "specific_instances"}, {"score": 0.0037060428445111694, "phrase": "possibly_defectives"}, {"score": 0.00327356326590461, "phrase": "minimal-time_solutions"}, {"score": 0.0029722900280316216, "phrase": "locally_more_working_cells"}, {"score": 0.002518746501941657, "phrase": "different_schemes"}, {"score": 0.0023834640793589435, "phrase": "linear-time_synchronization"}, {"score": 0.0021049977753042253, "phrase": "locally_more_defective_cells"}], "paper_keywords": ["parallel computation", " cellular automata", " synchronization", " firing squad", " fault-tolerance", " defective computation"], "paper_abstract": "We consider some specific instances of the firing squad synchronization problem in which some cells are possibly defectives. As Umeo [16] showed, minimal-time solutions exist in the case there are locally more working cells than defective ones. This paper explains how to set up different schemes to obtain a linear-time synchronization on defective lines in the case there are locally more defective cells than working ones (but globally not too much many ones).", "paper_title": "Fault tolerant solutions to the firing squad synchronization problem in linear cellular automata", "paper_id": "WOS:000252004000004"}