{"auto_keywords": [{"score": 0.045326042302844864, "phrase": "hierarchical_nets"}, {"score": 0.00481495049065317, "phrase": "generating_hierarchical_workflow_nets"}, {"score": 0.004673709383305897, "phrase": "complex_workflow_nets"}, {"score": 0.0046275514805632426, "phrase": "hierarchical_decomposition"}, {"score": 0.004274257668843717, "phrase": "simple_hierarchical_structure"}, {"score": 0.004190213818869998, "phrase": "five_simple_refinement_rules"}, {"score": 0.0041282626931589475, "phrase": "arbitrary_nets"}, {"score": 0.0036918031947746443, "phrase": "single_nodes"}, {"score": 0.003601235776892337, "phrase": "contracted_subnet"}, {"score": 0.003556785695522511, "phrase": "final_result"}, {"score": 0.0034523233935420407, "phrase": "hierarchical_structure"}, {"score": 0.003401244506970203, "phrase": "second_class"}, {"score": 0.0033177813460815346, "phrase": "first_class"}, {"score": 0.003284970493438103, "phrase": "extra_refinements"}, {"score": 0.0030565692640988585, "phrase": "natural_and_necessary_preconditions"}, {"score": 0.002996396519776246, "phrase": "sound_workflow_net"}, {"score": 0.0028228730986944776, "phrase": "parallel_threads"}, {"score": 0.002587624068540998, "phrase": "later_point"}, {"score": 0.002437715066656549, "phrase": "thread_fork"}, {"score": 0.002285075675790214, "phrase": "proper_superset"}, {"score": 0.002223403696281876, "phrase": "correctness_property"}, {"score": 0.002141973394750609, "phrase": "proper_subset"}, {"score": 0.0021260479963417104, "phrase": "and-or_nets"}, {"score": 0.0021049977753042253, "phrase": "earlier_work"}], "paper_keywords": ["workflow net", " Petri net", " soundness", " *-soundness", " hierarchical nets", " extended hierarchical nets"], "paper_abstract": "For designing and analyzing complex workflow nets the notion of hierarchical decomposition can be essential for keeping the structure of the workflow comprehensible. In this paper we study two classes of nets: hierarchical nets and extended hierarchical nets. The first have a simple hierarchical structure and can be defined in terms of five simple refinement rules. We show that for arbitrary nets it can be easily verified if they can be constructed this way, thus confirming their good design and the properties following from it. As we prove, this can be done by performing the refinements in reverse, i.e., by contracting subnets into single nodes. It is shown that the choice of the contracted subnet does not change the final result of the process, and therefore this procedure for checking the hierarchical structure requires no back-tracking. The second class, extended hierarchical nets, is an extension of the first class where two types of extra refinements are introduced that allow to indicate (1) the synchronization between two parallel running subworkflows or (2) the transfer of a thread from one subworkflow to another one. These refinements come with natural and necessary preconditions that ensure that result is still a sound workflow net. In case (1) where we want to synchronize two actions in two subworkflows, we should convince ourselves that the subworkflows represent parallel threads which always execute together, otherwise a deadlock could easily arise. Dually, in case (2), if after the moment that a choice was made between two subworkflows we at a later point in the workflow want to allow a transfer between them, this can be done safely provided that we did not enter any thread fork in the meantime. We show that the class of extended hierarchical nets, which is defined by adding these two additional types of refinement, is a proper superset of the hierarchical nets, but still all such nets exhibit the correctness property of *-soundness. We do this by showing that the class is a proper subset of the AND-OR nets which were in earlier work shown to have this property.", "paper_title": "On Generating Hierarchical Workflow Nets and their Extensions and Verifying Hierarchicality", "paper_id": "WOS:000367315300005"}