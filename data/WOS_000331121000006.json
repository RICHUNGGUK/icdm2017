{"auto_keywords": [{"score": 0.04944914943140595, "phrase": "javascript_proxies"}, {"score": 0.0461275073104745, "phrase": "javascript"}, {"score": 0.029293385033887166, "phrase": "large_programs"}, {"score": 0.00481495049065317, "phrase": "efficient_dynamic_access_analysis"}, {"score": 0.004689321759403451, "phrase": "jscontest"}, {"score": 0.004536862734384202, "phrase": "effect_monitoring"}, {"score": 0.004477270137801732, "phrase": "dynamic_effect_inference"}, {"score": 0.004163172790791119, "phrase": "path_specifications"}, {"score": 0.0041084684278314305, "phrase": "regular_expressions"}, {"score": 0.003922580121023413, "phrase": "offline_source_code_transformation"}, {"score": 0.0037203741725514126, "phrase": "jscontest_implementation"}, {"score": 0.0032591491777773035, "phrase": "prior_implementation"}, {"score": 0.0031739835218110015, "phrase": "full_interposition"}, {"score": 0.002602127996667857, "phrase": "improved_scalability"}, {"score": 0.0023559890904375526, "phrase": "transformationbased_implementation"}, {"score": 0.0022196020509093694, "phrase": "fly-weight_pattern"}, {"score": 0.002175913488493802, "phrase": "trace_reduction"}], "paper_keywords": ["Access Permission Contracts", " JavaScript", " Proxies", " Design", " Languages", " Security", " Verification"], "paper_abstract": "JSConTest introduced the notions of effect monitoring and dynamic effect inference for JavaScript. It enables the description of effects with path specifications resembling regular expressions. It is implemented by an offline source code transformation. To overcome the limitations of the JSConTest implementation, we redesigned and reimplemented effect monitoring by taking advantange of JavaScript proxies. Our new design avoids all drawbacks of the prior implementation. It guarantees full interposition; it is not restricted to a subset of JavaScript; it is self-maintaining; and its scalability to large programs is significantly better than with JSConTest. The improved scalability has two sources. First, the reimplementation is significantly faster than the original, transformationbased implementation. Second, the reimplementation relies on the fly-weight pattern and on trace reduction to conserve memory. Only the combination of these techniques enables monitoring and inference for large programs.", "paper_title": "Efficient Dynamic Access Analysis Using JavaScript Proxies", "paper_id": "WOS:000331121000006"}