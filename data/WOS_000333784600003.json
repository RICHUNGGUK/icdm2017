{"auto_keywords": [{"score": 0.04291463554374662, "phrase": "radio_driver"}, {"score": 0.004765686919942249, "phrase": "flexible_mac_design"}, {"score": 0.0046846932351254636, "phrase": "key_issue"}, {"score": 0.004526793300190607, "phrase": "physical_and_data"}, {"score": 0.004404296965915598, "phrase": "time-critical_behavior"}, {"score": 0.004359216541892805, "phrase": "mac_protocol_complexity"}, {"score": 0.004212240534862585, "phrase": "stringent_time_constraints"}, {"score": 0.004183442897207925, "phrase": "current_mac_implementations"}, {"score": 0.003987275549870311, "phrase": "mac-specific_logic"}, {"score": 0.003919459003028067, "phrase": "lowest_firmware_level"}, {"score": 0.003866033961859878, "phrase": "time-critical_functions"}, {"score": 0.0037872535287644103, "phrase": "good_strategy"}, {"score": 0.0037228262889889402, "phrase": "limited_flexibility"}, {"score": 0.00369736218441293, "phrase": "mac_designers"}, {"score": 0.0036095967013657906, "phrase": "specific_mac_protocol_logic"}, {"score": 0.0034402448248944434, "phrase": "clean_separation"}, {"score": 0.003404998261799824, "phrase": "mac_protocol_logic"}, {"score": 0.0033701115914053052, "phrase": "user_level"}, {"score": 0.0033014033657620375, "phrase": "radio_firmware_level"}, {"score": 0.003168147459025106, "phrase": "easy_way"}, {"score": 0.003135679861067472, "phrase": "new_mac_designs"}, {"score": 0.003061206247127742, "phrase": "radio_capabilities"}, {"score": 0.002907504959509132, "phrase": "resource-constrained_wireless_sensor_node"}, {"score": 0.002723815159181826, "phrase": "software_ack"}, {"score": 0.002686643644493607, "phrase": "ack_timing_constraints"}, {"score": 0.0024910622362019573, "phrase": "new_implementation_approach"}, {"score": 0.002382266701512106, "phrase": "wifi"}, {"score": 0.002231657123365799, "phrase": "future_work"}, {"score": 0.002148860300945803, "phrase": "new_mac_protocols"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Radio hardware abstraction", " MAC/PHY architecture", " Reconfigurable", " MAC", " Flexible", " Time accurate radio driver"], "paper_abstract": "Timing is a key issue in many wireless, lower-layer (e.g., physical and data link layer) communication protocols. Maintaining time-critical behavior while increasing MAC protocol complexity is the challenge for many MAC implementations. To comply with stringent time constraints, current MAC implementations typically require such a tight integration to the radio driver that they become one monolithic block of code with MAC-specific logic hard coded at the lowest firmware level. Execution of time-critical functions in the firmware is a good strategy, but results in limited flexibility for MAC designers because the radio driver is dedicated for specific MAC protocol logic. We propose \"snapMac\": a generic MAC/PHY architecture with a clean separation between the MAC protocol logic at the user level and the execution at the radio firmware level (Patent Pending). Our generic programming interface enables more flexibility, an easy way to compose new MAC designs, and getting feedback from the radio capabilities We demonstrate the feasibility and performance of this architecture by implementing it on a resource-constrained wireless sensor node. The experimental evaluation shows, for example, that we can simultaneously keep the flexibility of a software ACK and meet the ACK timing constraints as specified in the 802.15.4 standard. We also achieve 97% (i.e., 218 kbit/s) of the theoretical 802.15.4 throughput. This new implementation approach for MAC/PHY interactions has potential to be applied in other domains (e.g., WiFi, software defined radio, cognitive radio, etc.). Demonstrating the portability of snapMac is future work. \"snapMac\" enables the design and execution of new MAC protocols in a snap.(C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "snapMac: A generic MAC/PHY architecture enabling flexible MAC design", "paper_id": "WOS:000333784600003"}