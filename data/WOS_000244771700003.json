{"auto_keywords": [{"score": 0.04799755018493269, "phrase": "bpm"}, {"score": 0.00481495049065317, "phrase": "business_process_modelers"}, {"score": 0.004646852519870358, "phrase": "business_process_models"}, {"score": 0.004544770921520536, "phrase": "business_process_analysts"}, {"score": 0.004484596684703308, "phrase": "graphical_languages"}, {"score": 0.004444921827311577, "phrase": "bpnm"}, {"score": 0.004405608199559879, "phrase": "uml."}, {"score": 0.00408501512749186, "phrase": "software_development_process"}, {"score": 0.004013025478863664, "phrase": "modern_model-centric_software_engineering_approaches"}, {"score": 0.003527550673371394, "phrase": "software_development"}, {"score": 0.0033442114331500407, "phrase": "well-established_practices"}, {"score": 0.0031562971707460802, "phrase": "bpm-centric_software_engineering"}, {"score": 0.002965684305115369, "phrase": "structured_programming"}, {"score": 0.0028875481626754696, "phrase": "main_contribution"}, {"score": 0.00260657976055413, "phrase": "event_driven_process_chains"}, {"score": 0.002470987929071079, "phrase": "\"good_modeling_style"}, {"score": 0.0023113506171584157, "phrase": "\"bad_constructs"}, {"score": 0.0022304616068189575, "phrase": "erroneous_models"}, {"score": 0.0021813467128927347, "phrase": "model-to-code_transformations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["business process modeling", " modeling style", " style rules"], "paper_abstract": "For building business process models (BPM), business process analysts usually use graphical languages like BPNM or UML. One purpose of such models is to serve as a base for communication between the stakeholders in the software development process. Furthermore, modern model-centric software engineering approaches have the potential to enable the generation of software directly from the models. For these reasons, the quality of BPMs is critical for the success of software development. This raises the question, how we can benefit from well-established practices for improving the quality of software if we switch from code-centric to BPM-centric software engineering. In this article, we discuss how to apply concepts comparable to structured programming\" to BPMs. The main contribution is a discussion of the benefits of style checking for improving the quality of BPMs. By analyzing 285 BPMs (modeled as Event Driven Process Chains (EPC)), we found that checking restrictions for \"good modeling style\" has three positive effects: It can improve the quality of the BPM by substituting \"bad constructs\" automatically. it helps to identify erroneous models and it can make model-to-code transformations much easier. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "What business process modelers can learn from programmers", "paper_id": "WOS:000244771700003"}