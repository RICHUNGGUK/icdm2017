{"auto_keywords": [{"score": 0.03482015026398799, "phrase": "trailing_analysis"}, {"score": 0.03390806925101706, "phrase": "classic_parma_trailing_scheme"}, {"score": 0.004815397351021796, "phrase": "taylor"}, {"score": 0.004736563452994885, "phrase": "variable_binding_scheme"}, {"score": 0.004685012337701536, "phrase": "logic_variables"}, {"score": 0.004387225575447685, "phrase": "linear_chains"}, {"score": 0.004245476558619167, "phrase": "standard_wam_representation"}, {"score": 0.004153520149706423, "phrase": "hal_and_dprolog_languages"}, {"score": 0.004041359131062721, "phrase": "parma_representation"}, {"score": 0.0038893838564184107, "phrase": "parma's_trailing_scheme"}, {"score": 0.003702323283528699, "phrase": "space_consumption"}, {"score": 0.003264015764363175, "phrase": "hal"}, {"score": 0.0031240075437664314, "phrase": "unnecessary_trailings"}, {"score": 0.002989991779830814, "phrase": "hal's_determinism"}, {"score": 0.0029573932605287947, "phrase": "mode_declarations"}, {"score": 0.0028460640294160383, "phrase": "hal_compiler"}, {"score": 0.0027539714188091866, "phrase": "space_improvements"}, {"score": 0.0026942333853202556, "phrase": "speed_improvements"}], "paper_keywords": ["constraint logic programming", " program analysis", " trailing"], "paper_abstract": "Taylor introduced a variable binding scheme for logic variables in his PARMA system, that uses cycles of bindings rather than the linear chains of bindings used in the standard WAM representation. Both the HAL and dProlog languages make use of the PARMA representation in their Herbrand constraint solvers. Unfortunately, PARMA's trailing scheme is considerably more expensive in both time and space consumption. The aim of this paper is to present several techniques that lower the cost. First, we introduce a trailing analysis for HAL using the classic PARMA trailing scheme that detects and eliminates unnecessary trailings. The analysis, whose accuracy comes from HAL's determinism and mode declarations, has been integrated in the HAL compiler and is shown to produce space improvements as well as speed improvements. Second, we explain how to modify the classic PARMA trailing scheme to halve its trailing cost. This technique is illustrated and evaluated both in the context of dProlog and HAL. Finally, we explain the modifications needed by the trailing analysis in order to be combined with our modified PARMA trailing scheme. Empirical evidence shows that the combination is more effective than any of the techniques when used in isolation.", "paper_title": "Improving PARMA trailing", "paper_id": "WOS:000242135000001"}