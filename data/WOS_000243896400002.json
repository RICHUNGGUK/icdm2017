{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fault-tolerant_distributed_computing"}, {"score": 0.04666100244560421, "phrase": "negotiated_quality"}, {"score": 0.004650330504968421, "phrase": "distinct_runtime_conditions"}, {"score": 0.004590052784169268, "phrase": "important_issue"}, {"score": 0.004189337956225294, "phrase": "fault_tolerance"}, {"score": 0.004099183062034004, "phrase": "challenging_task"}, {"score": 0.003941746077126688, "phrase": "adaptive_programming_model"}, {"score": 0.0038401488612789963, "phrase": "upper-layer_applications"}, {"score": 0.003806866174028117, "phrase": "process_state_information"}, {"score": 0.0037411604449359794, "phrase": "current_system_synchrony"}, {"score": 0.0036288825833675127, "phrase": "underlying_system_model"}, {"score": 0.0035199624440843892, "phrase": "synchronous_part"}, {"score": 0.0034441627435203804, "phrase": "time_bounds"}, {"score": 0.0033699898113395328, "phrase": "message_delay"}, {"score": 0.002831158147480665, "phrase": "underlying_system"}, {"score": 0.002594880866651459, "phrase": "system_synchrony"}, {"score": 0.0024519545383399773, "phrase": "programming_model"}, {"score": 0.0023679315987170857, "phrase": "consensus_problem"}, {"score": 0.0023168823213024856, "phrase": "benchmark_problem"}, {"score": 0.0021049977753042253, "phrase": "communication_channels"}], "paper_keywords": ["adaptability", " asynchronous/synchronous distributed system", " consensus", " distributed computing model", " fault tolerance", " quality of service"], "paper_abstract": "The capability of dynamically adapting to distinct runtime conditions is an important issue when designing distributed systems where negotiated quality of service (QoS) cannot always be delivered between processes. Providing fault tolerance for such dynamic environments is a challenging task. Considering such a context, this paper proposes an adaptive programming model for fault-tolerant distributed computing, which provides upper-layer applications with process state information according to the current system synchrony ( or QoS). The underlying system model is hybrid, composed by a synchronous part ( where there are time bounds on processing speed and message delay) and an asynchronous part ( where there is no time bound). However, such a composition can vary over time, and, in particular, the system may become totally asynchronous ( e. g., when the underlying system QoS degrade) or totally synchronous. Moreover, processes are not required to share the same view of the system synchrony at a given time. To illustrate what can be done in this programming model and how to use it, the consensus problem is taken as a benchmark problem. This paper also presents an implementation of the model that relies on a negotiated quality of service ( QoS) for communication channels.", "paper_title": "An adaptive programming model for fault-tolerant distributed computing", "paper_id": "WOS:000243896400002"}