{"auto_keywords": [{"score": 0.04080705021857226, "phrase": "system_model"}, {"score": 0.006202827726622052, "phrase": "synthesized_model"}, {"score": 0.00481495066943768, "phrase": "counterexample-guided"}, {"score": 0.004781915513030716, "phrase": "-guarantee_synthesis"}, {"score": 0.0047003115977448905, "phrase": "-guarantee_reasoning"}, {"score": 0.004604214511792668, "phrase": "promising_compositional_verification_technique"}, {"score": 0.004525629293824217, "phrase": "state_space_explosion_problem"}, {"score": 0.004479120557712926, "phrase": "model_checking"}, {"score": 0.004342430078306461, "phrase": "nontrivial_human_efforts"}, {"score": 0.0036427316134070007, "phrase": "refinement_process"}, {"score": 0.00307657476125683, "phrase": "synthesis_process"}, {"score": 0.0030344301563232944, "phrase": "model_checker"}, {"score": 0.0028715299874549245, "phrase": "proposed_framework"}, {"score": 0.002822434555587263, "phrase": "equivalent_counterexamples"}, {"score": 0.0026986685585382347, "phrase": "error_state"}, {"score": 0.0026342834182889008, "phrase": "agr"}, {"score": 0.002302619021497886, "phrase": "synthesis_flow"}, {"score": 0.0022710523337245337, "phrase": "finite_number"}, {"score": 0.002224510044064184, "phrase": "compositional_synthesis"}, {"score": 0.0021049977753042253, "phrase": "global_system_state_graph"}], "paper_keywords": ["Model checking", " assume-guarantee reasoning", " L* algorithm", " compositional synthesis"], "paper_abstract": "Assume-guarantee reasoning (AGR) is a promising compositional verification technique that can address the state space explosion problem associated with model checking. Since the construction of assumptions usually requires nontrivial human efforts, a framework was already proposed for generating assumptions automatically using the L* algorithm [2], [31]. However, if the framework shows that a system model does not satisfy a given specification, the designer has to manually refine the system model. To automate this refinement process, we propose a framework that can automatically eliminate all counterexamples from a system model such that the synthesized model satisfies a given safety specification. Further, the framework for synthesis is not only automatic, but is also an iterative L*-based compositional process, i.e., the global state space of the system is never generated in the synthesis process. When a model checker shows that a system model does not satisfy a specification by giving a counterexample, the proposed framework eliminates a class of equivalent counterexamples, that is, the set of counterexamples that transit to the error state through the same final transition. Then, AGR is applied again to check if there is another counterexample. The action of eliminating counterexamples continues until all classes of counterexamples are eliminated from the system model. We prove that the synthesized model satisfies the specification and the synthesis flow terminates after a finite number of iterations. Due to compositional synthesis, our target model for synthesis, namely the component models, is much smaller than the global system state graph.", "paper_title": "Counterexample-Guided Assume-Guarantee Synthesis through Learning", "paper_id": "WOS:000288751800010"}