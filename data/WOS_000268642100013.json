{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "wrtl"}, {"score": 0.008793035008094325, "phrase": "wrti"}, {"score": 0.0071665413019602895, "phrase": "unit_propagation"}, {"score": 0.00481495049065317, "phrase": "resolution_trees_with_lemmas"}, {"score": 0.004661446705304497, "phrase": "dll_algorithms"}, {"score": 0.004488505301335364, "phrase": "w-resolution_trees"}, {"score": 0.004298666679374568, "phrase": "input_lemmas"}, {"score": 0.004139128578531134, "phrase": "dag-like_resolution"}, {"score": 0.003879234831701853, "phrase": "regularity_condition"}, {"score": 0.0038168424095396205, "phrase": "regular_proofs"}, {"score": 0.0037554497046697432, "phrase": "exponential_separation"}, {"score": 0.0037150687722055727, "phrase": "regular_dag-like_resolution"}, {"score": 0.002992456421856031, "phrase": "regular_wrti."}, {"score": 0.0029602552900111407, "phrase": "general_form"}, {"score": 0.002928399649340438, "phrase": "clause_learning"}, {"score": 0.0028812560768076098, "phrase": "dll-learn"}, {"score": 0.0027592065435732955, "phrase": "regular_wrtl."}, {"score": 0.0027295084882654917, "phrase": "variable_extension_method"}, {"score": 0.002599763359352916, "phrase": "regular_wrti"}, {"score": 0.0025440911575156755, "phrase": "simplified_form"}, {"score": 0.0025167026017217926, "phrase": "proof_trace_extensions"}, {"score": 0.0024628046987344846, "phrase": "non-greedy_dll_algorithms"}, {"score": 0.0023712394008737958, "phrase": "variable_extensions"}, {"score": 0.002333044307949414, "phrase": "general_resolution"}, {"score": 0.0021049977753042253, "phrase": "short_clauses"}], "paper_keywords": ["propositional proof complexity", " resolution", " SAT solving", " DLL algoritm", " clause learning"], "paper_abstract": "Resolution refinements called w-resolution trees with lemmas (WRTL) and with input lemmas (WRTI) are introduced. Dag-like resolution is equivalent to both WRTL and WRTI when there is no regularity condition. For regular proofs, an exponential separation between regular dag-like resolution and both regular WRTL and regular WRTI is given. It is proved that DLL proof search algorithms that use clause learning based on unit propagation can be polynomially simulated by regular WRTI. More generally, non-greedy DLL algorithms with learning by unit propagation are equivalent to regular WRTI. A general form of clause learning, called DLL-Learn, is defined that is equivalent to regular WRTL. A variable extension method is used to give simulations of resolution by regular WRTI, using a simplified form of proof trace extensions. DLL-Learn and non-greedy DLL algorithms with learning by unit propagation can use variable extensions to simulate general resolution without doing restarts. Finally, an exponential lower bound for WRTL where the lemmas are restricted to short clauses is shown.", "paper_title": "RESOLUTION TREES WITH LEMMAS: RESOLUTION REFINEMENTS THAT CHARACTERIZE DLL ALGORITHMS WITH CLAUSE LEARNING", "paper_id": "WOS:000268642100013"}