{"auto_keywords": [{"score": 0.04816730124185348, "phrase": "file_system"}, {"score": 0.013148608819199936, "phrase": "vm"}, {"score": 0.00481495049065317, "phrase": "file_system_virtual_appliances"}, {"score": 0.004412494693940597, "phrase": "portability_headaches"}, {"score": 0.004067152645111547, "phrase": "virtual_machine"}, {"score": 0.0038148090091532933, "phrase": "user_applications"}, {"score": 0.0035366216368204182, "phrase": "operating_system"}, {"score": 0.0033559647822437298, "phrase": "small_fs-agnostic_proxy"}, {"score": 0.0032596049901888724, "phrase": "core_os_developers"}, {"score": 0.0031845069426845265, "phrase": "fsva"}, {"score": 0.0029694040368299624, "phrase": "fsva_design"}, {"score": 0.002867348342846275, "phrase": "unmodified_fs_implementations"}, {"score": 0.002817639725689939, "phrase": "desired_os"}, {"score": 0.00278497898719426, "phrase": "virtualization_features"}, {"score": 0.0027049694095434905, "phrase": "unified_buffer_cache"}, {"score": 0.0026736111900632934, "phrase": "vm_migration"}, {"score": 0.0026119782818898193, "phrase": "prototype_fsva_implementations"}, {"score": 0.002581724506440497, "phrase": "linux"}, {"score": 0.002551762519273805, "phrase": "netbsd"}, {"score": 0.002507511729091826, "phrase": "xen"}, {"score": 0.0024640253074497114, "phrase": "virtual_machine_manager"}, {"score": 0.002435454575774068, "phrase": "vmm"}, {"score": 0.002351705899181029, "phrase": "fsva_architecture"}, {"score": 0.0021927323694667694, "phrase": "file_system_implementations"}, {"score": 0.0021672995161145276, "phrase": "os_differences"}, {"score": 0.0021049977753042253, "phrase": "explicit_porting"}], "paper_keywords": ["Design", " Performance", " Operating systems", " virtual machines", " file systems"], "paper_abstract": "File system virtual appliances (FSVAs) address the portability headaches that plague file system (FS) developers. By packaging their FS implementation in a virtual machine (VM), separate from the VM that runs user applications, they can avoid the need to port the file system to each operating system (OS) and OS version. A small FS-agnostic proxy, maintained by the core OS developers, connects the FSVA to whatever OS the user chooses. This article describes an FSVA design that maintains FS semantics for unmodified FS implementations and provides desired OS and virtualization features, such as a unified buffer cache and VM migration. Evaluation of prototype FSVA implementations in Linux and NetBSD, using Xen as the virtual machine manager (VMM), demonstrates that the FSVA architecture is efficient, FS-agnostic, and able to insulate file system implementations from OS differences that would otherwise require explicit porting.", "paper_title": "File System Virtual Appliances: Portable File System Implementations", "paper_id": "WOS:000309350600002"}