{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_structures_for_massively_parallel_generic_adaptive_finite_element_codes"}, {"score": 0.004768378525561471, "phrase": "today's_largest_supercomputers"}, {"score": 0.004676575291629554, "phrase": "processor_cores"}, {"score": 0.004520132822496416, "phrase": "partial_differential_equations"}, {"score": 0.004181839414007266, "phrase": "problem_sizes"}, {"score": 0.0040222701316738295, "phrase": "generic_software_libraries"}, {"score": 0.0036671822784770463, "phrase": "large-scale_computing"}, {"score": 0.003493021648360933, "phrase": "mesh-adaptive_finite_element_computations"}, {"score": 0.003200045185608395, "phrase": "adaptive_mesh"}, {"score": 0.0028890603352364273, "phrase": "scalable_algorithms"}, {"score": 0.002861062731782219, "phrase": "data_structures"}, {"score": 0.0028333356794133053, "phrase": "generic_finite_element_methods"}, {"score": 0.0027383842769094354, "phrase": "parallel_distribution"}, {"score": 0.002711842889248926, "phrase": "mesh_data"}, {"score": 0.002685558057339722, "phrase": "global_enumeration"}, {"score": 0.0024601402359002056, "phrase": "large-scale_adaptive_finite_element_analyses"}, {"score": 0.002389276641014013, "phrase": "complete_finite_element"}, {"score": 0.002286781334850213, "phrase": "proposed_algorithms"}, {"score": 0.002135995282374723, "phrase": "open_source_license"}, {"score": 0.0021049977753042253, "phrase": "widely_used_deal"}], "paper_keywords": ["Algorithms", " Adaptive mesh refinement", " parallel algorithms", " software design", " object-orientation"], "paper_abstract": "Today's largest supercomputers have 100,000s of processor cores and offer the potential to solve partial differential equations discretized by billions of unknowns. However, the complexity of scaling to such large machines and problem sizes has so far prevented the emergence of generic software libraries that support such computations, although these would lower the threshold of entry and enable many more applications to benefit from large-scale computing. We are concerned with providing this functionality for mesh-adaptive finite element computations. We assume the existence of an \"oracle\" that implements the generation and modification of an adaptive mesh distributed across many processors, and that responds to queries about its structure. Based on querying the oracle, we develop scalable algorithms and data structures for generic finite element methods. Specifically, we consider the parallel distribution of mesh data, global enumeration of degrees of freedom, constraints, and postprocessing. Our algorithms remove the bottlenecks that typically limit large-scale adaptive finite element analyses. We demonstrate scalability of complete finite element workflows on up to 16,384 processors. An implementation of the proposed algorithms, based on the open source software p4est as mesh oracle, is provided under an open source license through the widely used deal. II finite element software library.", "paper_title": "Algorithms and Data Structures for Massively Parallel Generic Adaptive Finite Element Codes", "paper_id": "WOS:000298638200005"}