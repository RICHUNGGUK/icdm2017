{"auto_keywords": [{"score": 0.0356683943368949, "phrase": "pipeline_pattern"}, {"score": 0.013683624475702075, "phrase": "parallel_task"}, {"score": 0.004632388761885302, "phrase": "parallel_programming"}, {"score": 0.004392565073466714, "phrase": "predominant_object-oriented_languages"}, {"score": 0.004125027493339274, "phrase": "open_source"}, {"score": 0.003949377440799037, "phrase": "object-oriented_languages"}, {"score": 0.003873828212271855, "phrase": "java"}, {"score": 0.0032389001343643064, "phrase": "processing_stages"}, {"score": 0.003115908199991072, "phrase": "task_parallelism"}, {"score": 0.0027474453262607834, "phrase": "task-parallel_environment"}, {"score": 0.002579847272930948, "phrase": "implicit_futures"}, {"score": 0.00249386680748172, "phrase": "intuitive_and_object-oriented_manner"}, {"score": 0.0024107449502335583, "phrase": "extended_parallel_task"}, {"score": 0.0023530698447434308, "phrase": "different_lengths"}, {"score": 0.002285674008055581, "phrase": "manual_implementations"}, {"score": 0.002177600561610171, "phrase": "proposed_task-parallel_pipeline_approach"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["task parallelism", " parallel skeletons", " pipeline pattern"], "paper_abstract": "Task parallelism is an approach to parallel programming that has recently gained traction because of its compatibility with the predominant object-oriented languages and its low overhead compared to threading approaches. Parallel Task is an Open Source task-parallel compiler and runtime system for object-oriented languages, in particular Java. It is very flexible and expressive, demonstrated by the fact that it can be directly employed to implement most parallel computing patterns. The only notable exception has been the pipeline pattern where many data items are streamed through a number of processing stages. This is not surprising, as task parallelism is generally not compatible with the pipeline pattern. In this paper, we investigate how the pipeline pattern can be elegantly and efficiently implemented in a task-parallel environment. To do so, we extend Parallel Task with the concept of implicit futures to allow creating pipelines in an intuitive and object-oriented manner. Our experimental evaluation uses the extended Parallel Task to implement pipelines of different lengths and characteristics and compares with manual implementations. The evaluation demonstrates very good performance and scalability of the proposed task-parallel pipeline approach. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "Pipeline pattern in an object-oriented, task-parallel environment", "paper_id": "WOS:000351682800011"}