{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "slide_presentations"}, {"score": 0.004634799977448855, "phrase": "dominant_ones"}, {"score": 0.004518442937844318, "phrase": "essentially_no_abstraction_capability"}, {"score": 0.004404994123834589, "phrase": "slideshow"}, {"score": 0.003978866233891427, "phrase": "abstraction-friendly_slide_system"}, {"score": 0.0038789122930433305, "phrase": "plt_scheme"}, {"score": 0.003639835714755229, "phrase": "functional_programming"}, {"score": 0.003287482882222731, "phrase": "slide_creation"}, {"score": 0.002548331088496964, "phrase": "practical_problems"}, {"score": 0.0024842242921857705, "phrase": "rendering_slides"}, {"score": 0.0023309080951251335, "phrase": "experimental_extensions"}, {"score": 0.00227225841515826, "phrase": "drscheme"}, {"score": 0.0021049977753042253, "phrase": "programmatic_and_wysiwyg_slide_creation"}], "paper_keywords": [""], "paper_abstract": "Among systems for creating slide presentations, the dominant ones offer essentially no abstraction capability. Slideshow represents our effort over the last several years to build an abstraction-friendly slide system with PLT Scheme. We show how functional programming is well suited to the task of slide creation, we report on the programming contructs that we have developed for slides, and we describe our solutions to practical problems in rendering slides. We also describe experimental extensions to DrScheme that support a mixture of programmatic and WYSIWYG slide creation.", "paper_title": "Slideshow: functional presentations", "paper_id": "WOS:000240174500007"}