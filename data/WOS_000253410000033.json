{"auto_keywords": [{"score": 0.04917503970392541, "phrase": "dynamic_compilation"}, {"score": 0.00481495049065317, "phrase": "hpm-sampling"}, {"score": 0.004634799977448855, "phrase": "high-performance_production_jvms"}, {"score": 0.004461359547152617, "phrase": "program_execution"}, {"score": 0.004186534737631288, "phrase": "online_profiling_mechanism"}, {"score": 0.003639835714755229, "phrase": "design_space"}, {"score": 0.003437248394635138, "phrase": "existing_online_profiling_schemes"}, {"score": 0.0032666255024083983, "phrase": "insufficient_number"}, {"score": 0.0030847461428168614, "phrase": "limited_accuracy"}, {"score": 0.0030071857666598193, "phrase": "frequently_executed_methods"}, {"score": 0.0026986685585382347, "phrase": "optimization_candidates"}, {"score": 0.002664513608074113, "phrase": "hardware_performance_monitors"}, {"score": 0.002548331088496964, "phrase": "aforementioned_limitations"}, {"score": 0.0023758843175179702, "phrase": "low_overhead"}, {"score": 0.0021319959284827896, "phrase": "default_system"}, {"score": 0.0021049977753042253, "phrase": "jikes_rvm"}], "paper_keywords": ["hardware performance monitors", " Java", " just-in-time compilation", " profiling"], "paper_abstract": "All high-performance production JVMs employ an adaptive strategy for program execution. Methods are first executed unoptimized and then an online profiling mechanism is used to find a subset of methods that should be optimized during the same execution. This paper empirically evaluates the design space of several profilers for initiating dynamic compilation and shows that existing online profiling schemes suffer from several limitations. They provide an insufficient number of samples, are untimely, and have limited accuracy at determining the frequently executed methods. We describe and comprehensively evaluate HPM-sampling, a simple but effective profiling scheme for finding optimization candidates using hardware performance monitors (HPMs) that addresses the aforementioned limitations. We show that HPM-sampling is more accurate; has low overhead; and improves performance by 5.7% on average and up to 18.3% when compared to the default system in Jikes RVM, without changing the compiler.", "paper_title": "Using HPM-Sampling to drive dynamic compilation", "paper_id": "WOS:000253410000033"}