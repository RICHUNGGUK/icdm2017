{"auto_keywords": [{"score": 0.0324337131484804, "phrase": "java"}, {"score": 0.009729153465552096, "phrase": "generic_traversals"}, {"score": 0.00481495049065317, "phrase": "java_developers"}, {"score": 0.004747620102130588, "phrase": "object_programming_languages"}, {"score": 0.004681226806682058, "phrase": "visitor_design_pattern"}, {"score": 0.004594137808658537, "phrase": "algorithms_and_data_structures"}, {"score": 0.00444559516711374, "phrase": "tree-like_structures"}, {"score": 0.0037188360359702182, "phrase": "data_analyses"}, {"score": 0.003306559295382181, "phrase": "small_part"}, {"score": 0.0032602525602322832, "phrase": "data-structure_model"}, {"score": 0.003095923814666088, "phrase": "programming_languages"}, {"score": 0.0030097975788892896, "phrase": "simple_solutions"}, {"score": 0.002939853413763817, "phrase": "rewrite-based_languages"}, {"score": 0.0029123325316501485, "phrase": "elan"}, {"score": 0.002885067032981749, "phrase": "stratego"}, {"score": 0.002752513434446804, "phrase": "generic_traversal"}, {"score": 0.0027139447110929586, "phrase": "application_control"}, {"score": 0.002675914969626753, "phrase": "declarative_way"}, {"score": 0.0025053520095236694, "phrase": "strategic_programming"}, {"score": 0.0024586427394152196, "phrase": "widely_used_language"}, {"score": 0.0023456351719724957, "phrase": "typed_java_structures"}, {"score": 0.002248366278757655, "phrase": "strategy_language_sl"}, {"score": 0.0022168460543913787, "phrase": "programming_support"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["generic programming", " term rewriting", " tree traversal", " strategies", " object-oriented programming"], "paper_abstract": "In object programming languages, the Visitor design pattern allows separation of algorithms and data structures. When applying this pattern to tree-like structures, programmers are always confronted with the difficulty of making their code evolve. One reason is that the code implementing the algorithm is interwound with the code implementing the traversal inside the visitor. When implementing algorithms such as data analyses or transformations, encoding the traversal directly into the algorithm turns out to be cumbersome as this type of algorithm only focuses on a small part of the data-structure model (e.g., program optimization). Unfortunately, typed programming languages like Java do not offer simple solutions for expressing generic traversals. Rewrite-based languages like ELAN or Stratego have introduced the notion of strategies to express both generic traversal and rule application control in a declarative way. Starting from this approach, our goal was to make the notion of strategic programming available in a widely used language such as Java and thus to offer generic traversals in typed Java structures. In this paper, we present the strategy language SL that provides programming support for strategies in Java. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Effective strategic programming for Java developers", "paper_id": "WOS:000329367700001"}