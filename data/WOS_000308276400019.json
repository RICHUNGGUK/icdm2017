{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "read-dominated_workloads"}, {"score": 0.03337015757271618, "phrase": "read-only_transactions"}, {"score": 0.03192837986127661, "phrase": "late-write_transactions"}, {"score": 0.004755650013733963, "phrase": "transactional_approach"}, {"score": 0.00446987606516801, "phrase": "major_challenge"}, {"score": 0.004218602458288531, "phrase": "total_time"}, {"score": 0.0038518661517315533, "phrase": "transactional_scheduler"}, {"score": 0.0035461111918923117, "phrase": "resource_accesses"}, {"score": 0.0033053159828082095, "phrase": "paper_studies"}, {"score": 0.0032916702592724217, "phrase": "transactional_scheduling"}, {"score": 0.0031845067058084583, "phrase": "common_workloads"}, {"score": 0.0028010985923790036, "phrase": "bimodal_transactional_scheduler"}, {"score": 0.0025892330566358503, "phrase": "early-write_transactions"}, {"score": 0.0024842242921857705, "phrase": "optimal_clairvoyant_scheduler"}, {"score": 0.002433398595416817, "phrase": "bimodal"}, {"score": 0.00240328454980006, "phrase": "best_competitive_ratio"}, {"score": 0.002363806685815014, "phrase": "non-clairvoyant_schedule"}, {"score": 0.002184943946549964, "phrase": "competitive_ratio"}, {"score": 0.0021579641460002523, "phrase": "non-clairvoyant_scheduler"}, {"score": 0.0021049977753042253, "phrase": "conservative_approach"}], "paper_keywords": ["Transactional memory", " Scheduling", " Competitive analysis", " Read-dominated workload"], "paper_abstract": "The transactional approach to contention management guarantees atomicity by aborting transactions that may violate consistency. A major challenge in this approach is to schedule transactions in a manner that reduces the total time to perform all transactions (the makespan), since transactions are often aborted and restarted. The performance of a transactional scheduler can be evaluated by the ratio between its makespan and the makespan of an optimal, clairvoyant scheduler that knows the list of resource accesses that will be performed by each transaction, as well as its release time and duration. This paper studies transactional scheduling in the context of read-dominated workloads; these common workloads include read-only transactions, i.e., those that only observe data, and late-write transactions, i.e., those that update only towards the end of the transaction. We present the BIMODAL transactional scheduler, which is especially tailored to accommodate read-only transactions, without punishing transactions that write most of their duration (early-write transactions). It is evaluated by comparison with an optimal clairvoyant scheduler; we prove that BIMODAL demonstrates the best competitive ratio achievable by a non-clairvoyant schedule for workloads consisting of early-write and read-only transactions. We also show that late-write transactions significantly deteriorate the competitive ratio of any non-clairvoyant scheduler, assuming it takes a conservative approach to conflicts. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Transactional scheduling for read-dominated workloads", "paper_id": "WOS:000308276400019"}