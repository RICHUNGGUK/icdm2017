{"auto_keywords": [{"score": 0.004509594355983191, "phrase": "new_user_requirements"}, {"score": 0.004476878957065829, "phrase": "execution_contexts"}, {"score": 0.004057670872363875, "phrase": "common_poor_solutions"}, {"score": 0.0038419163428806973, "phrase": "good_solutions"}, {"score": 0.0038140261371648744, "phrase": "recurring_problems"}, {"score": 0.0037863381924252014, "phrase": "antipatterns"}, {"score": 0.0036775717816768133, "phrase": "future_maintenance"}, {"score": 0.003009548189374684, "phrase": "innovative_approach"}, {"score": 0.0027876981671591202, "phrase": "multi_service"}, {"score": 0.0026392916936302355, "phrase": "detection_algorithms"}, {"score": 0.002462643513290669, "phrase": "sbs"}, {"score": 0.002314481096847367, "phrase": "service_component_architecture"}, {"score": 0.002159460831267798, "phrase": "service_oriented_architecture"}, {"score": 0.0021049977753042253, "phrase": "average_precision"}], "paper_keywords": ["Antipatterns", " service-based systems", " service component architecture", " specification", " detection", " quality of service", " design", " software evolution and maintenance"], "paper_abstract": "Like any other large and complex software systems, Service-Based Systems (SBSs) must evolve to fit new user requirements and execution contexts. The changes resulting from the evolution of SBSs may degrade their design and quality of service (QoS) and may often cause the appearance of common poor solutions in their architecture, called antipatterns, in opposition to design patterns, which are good solutions to recurring problems. Antipatterns resulting from these changes may hinder the future maintenance and evolution of SBSs. The detection of antipatterns is thus crucial to assess the design and QoS of SBSs and facilitate their maintenance and evolution. However, methods and techniques for the detection of antipatterns in SBSs are still in their infancy despite their importance. In this paper, we introduce a novel and innovative approach supported by a framework for specifying and detecting antipatterns in SBSs. Using our approach, we specify 10 well-known and common antipatterns, including Multi Service and Tiny Service, and automatically generate their detection algorithms. We apply and validate the detection algorithms in terms of precision and recall two systems developed independently, (1) Home-Automation, an SBS with 13 services, and (2) FraSCAti, an open-source implementation of the Service Component Architecture (SCA) standard with more than 100 services. This validation demonstrates that our approach enables the specification and detection of Service Oriented Architecture (SOA) antipatterns with an average precision of 90% and recall of 97.5%.", "paper_title": "SOA ANTIPATTERNS: AN APPROACH FOR THEIR SPECIFICATION AND DETECTION", "paper_id": "WOS:000331065500005"}