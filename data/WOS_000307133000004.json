{"auto_keywords": [{"score": 0.03992659287798476, "phrase": "lookup_table"}, {"score": 0.015719716506582538, "phrase": "dynamic_lookup_table"}, {"score": 0.0045122922461952805, "phrase": "novel_keyed_hash_function"}, {"score": 0.004129873531628877, "phrase": "piecewise_linear_chaotic_map"}, {"score": 0.0040097139701644165, "phrase": "secret_keys"}, {"score": 0.0036697319652557363, "phrase": "composite_functions"}, {"score": 0.003459191419478298, "phrase": "divided_message_blocks"}, {"score": 0.0034185505275141077, "phrase": "ascii_code_values"}, {"score": 0.003338690782620756, "phrase": "equivalent_indices"}, {"score": 0.0032414759269196493, "phrase": "associated_composite_functions"}, {"score": 0.003073545175760353, "phrase": "message_block"}, {"score": 0.002931569771634119, "phrase": "corresponding_composite_function"}, {"score": 0.0023415390666563177, "phrase": "proposed_hash_algorithm"}, {"score": 0.0023139986108451967, "phrase": "good_statistical_properties"}, {"score": 0.002286781334850213, "phrase": "strong_collision_resistance"}, {"score": 0.002259883463607508, "phrase": "high_efficiency"}, {"score": 0.0022201273900989416, "phrase": "better_statistical_performance"}, {"score": 0.002181069180139225, "phrase": "existing_chaotic_hash_functions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Chaos", " Keyed hash function", " Piecewise linear chaotic map", " Lookup table of functions", " Transfer function", " Composite function"], "paper_abstract": "In this paper, we present a novel keyed hash function based on a dynamic lookup table of functions. More specifically, we first exploit the piecewise linear chaotic map (PWLCM) with secret keys used for producing four 32-bit initial buffers and then elaborate the lookup table of functions used for selecting composite functions associated with messages. Next, we convert the divided message blocks into ASCII code values, check the equivalent indices and then find the associated composite functions in the lookup table of functions. For each message block, the four buffers are reassigned by the corresponding composite function and then the lookup table of functions is dynamically updated. After all the message blocks are processed, the final 128-bit hash value is obtained by cascading the last reassigned four buffers. Finally, we evaluate our hash function and the results demonstrate that the proposed hash algorithm has good statistical properties, strong collision resistance, high efficiency, and better statistical performance compared with existing chaotic hash functions. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Keyed hash function based on a dynamic lookup table of functions", "paper_id": "WOS:000307133000004"}