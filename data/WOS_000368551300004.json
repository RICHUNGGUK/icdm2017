{"auto_keywords": [{"score": 0.049203403415225284, "phrase": "software_evolution"}, {"score": 0.004860218511356106, "phrase": "time"}, {"score": 0.0046834372388970405, "phrase": "background_-_the_laws"}, {"score": 0.004513631630494221, "phrase": "time_series_trends"}, {"score": 0.004390312150344245, "phrase": "objective_-_building"}, {"score": 0.004058826900076531, "phrase": "theoretical_argumentation"}, {"score": 0.003911578552479064, "phrase": "stationary_time_series"}, {"score": 0.0036496814103475174, "phrase": "different_statistical_types"}, {"score": 0.0035994372026264478, "phrase": "series_trends"}, {"score": 0.003468796799802612, "phrase": "empirical_experiment"}, {"score": 0.0034052594710793664, "phrase": "software_size_measures"}, {"score": 0.003358368814209542, "phrase": "typical_software_evolution"}, {"score": 0.0032364494905485677, "phrase": "time_series_analysis"}, {"score": 0.003177154457204775, "phrase": "conventional_statistical_tests"}, {"score": 0.0030336118627011786, "phrase": "empirical_dataset"}, {"score": 0.0030056887638095883, "phrase": "time_series"}, {"score": 0.002950608985750058, "phrase": "version_control_systems"}, {"score": 0.002909960617042717, "phrase": "vaadin"}, {"score": 0.0028831740996705965, "phrase": "tomcat"}, {"score": 0.0027275289970185015, "phrase": "observed_time_series"}, {"score": 0.002652878591019016, "phrase": "simple_mathematical_functions"}, {"score": 0.0025329623864528317, "phrase": "testing_framework"}, {"score": 0.002418453525649304, "phrase": "software_evolution_time_series"}, {"score": 0.0022563011263787847, "phrase": "methodological_and_theoretical_contributions"}, {"score": 0.002204697943520258, "phrase": "predictive_time_series"}, {"score": 0.002174303033371869, "phrase": "software_evolution_problems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software evolution", " time series analysis", " stationarity", " unit roots", " dynamic regression"], "paper_abstract": "BACKGROUND - The laws of software evolution were formulated to describe time series trends in software over time. OBJECTIVE - Building on econometrics, the paper relates the laws theoretically to the concept of stationarity. The theoretical argumentation builds on the fact that in a stationary time series, the mean and variance remain constant. The concept is further elaborated with different statistical types of time series trends. These provide the objective for the empirical experiment that evaluates whether software size measures in a typical software evolution dataset are stationary. METHOD - The time series analysis is based on conventional statistical tests for the evaluation of stationarity. RESULTS - The empirical dataset contains time series extracted from the version control systems used in Vaadin and Tomcat between circa 2006 and 2013. The results establish that the observed time series are neither stationary nor follow simple mathematical functions that would translate into stationarity. CONCLUSION - The testing framework presented in the paper allows evaluating the stationarity of software evolution time series. The results can be interpreted theoretically against the laws of software evolution. These methodological and theoretical contributions improve the foundations of predictive time series modeling of software evolution problems. Copyright (C) 2015 John Wiley & Sons, Ltd.", "paper_title": "Time series trends in software evolution", "paper_id": "WOS:000368551300004"}