{"auto_keywords": [{"score": 0.02669046891276452, "phrase": "saferefactorimpact"}, {"score": 0.00481495049065317, "phrase": "impact_analysis"}, {"score": 0.004657542074154025, "phrase": "manual_steps"}, {"score": 0.00459165923324494, "phrase": "test_suites"}, {"score": 0.004116440453049531, "phrase": "manual_reasoning"}, {"score": 0.004019797503157808, "phrase": "nontrivial_semantics"}, {"score": 0.0026705669656375197, "phrase": "automatic_test_suite_generator"}, {"score": 0.002570817338292482, "phrase": "relevant_tests"}, {"score": 0.002486589906779091, "phrase": "behavioral_changes"}, {"score": 0.0023152577218214804, "phrase": "test_suite_generator"}, {"score": 0.0022393843660697484, "phrase": "better_change_coverage"}, {"score": 0.0022181655497912796, "phrase": "larger_subjects"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Refactoring", " Change impact analysis"], "paper_abstract": "Currently most developers have to apply manual steps and use test suites to improve confidence that transformations applied to object-oriented (OO) and aspect-oriented (AO) programs are correct. However, it is not simple to do manual reasoning, due to the nontrivial semantics of OO and AO languages. Moreover, most refactoring implementations contain a number of bugs since it is difficult to establish all conditions required for a transformation to be behavior preserving. In this article, we propose a tool (SAFEREFACTORIMPACT) that analyzes the transformation and generates tests only for the methods impacted by a transformation identified by our change impact analyzer (SAFIRA). We compare SAFEREFACTORIMPACT with our previous tool (SAFEREFACTOR) with respect to correctness, performance, number of methods passed to the automatic test suite generator, change coverage, and number of relevant tests generated in 45 transformations. SAFEREFACTORIMPACT identifies behavioral changes undetected by SAFEREFACTOR. Moreover, it reduces the number of methods passed to the test suite generator. Finally, SAFEREFACTORIMPACT has a better change coverage in larger subjects, and generates more relevant tests than SAFEREFACTOR. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Making refactoring safer through impact analysis", "paper_id": "WOS:000341548300004"}