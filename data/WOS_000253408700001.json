{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "hot_code_recognition"}, {"score": 0.00481495049065317, "phrase": "dynamic_binary_translation"}, {"score": 0.0045108906244892165, "phrase": "intermediate_language_level_optimization_framework"}, {"score": 0.004002242925856335, "phrase": "dynamic_binary_translation_system"}, {"score": 0.0037087324991876727, "phrase": "growing_interest"}, {"score": 0.003589602322126282, "phrase": "new_optimization_algorithms"}, {"score": 0.0032546105164772995, "phrase": "efficient_profiling"}, {"score": 0.003115908199991072, "phrase": "smart_code_cache_management_policies"}, {"score": 0.002887210021573995, "phrase": "runtime_information"}, {"score": 0.0026175952455594277, "phrase": "code_cache_management_algorithms"}, {"score": 0.0023990982005125763, "phrase": "hottest_code"}, {"score": 0.0022472527731744974, "phrase": "basic_blocks"}, {"score": 0.0021049977753042253, "phrase": "code_cache_management"}], "paper_keywords": ["dynamic compilation", " binary translation", " dynamic optimization", " run-time profiling"], "paper_abstract": "This paper presents an intermediate language level optimization framework for dynamic binary translation. Performance is important to a dynamic binary translation system, so there has been a growing interest in exploring new optimization algorithms. The framework proposed in this paper includes efficient profiling, hot code recognition and smart code cache management policies. Profiling is responsible for collecting runtime information, which will be used by hot code recognition and code cache management algorithms. We only focus on recognizing the hottest code, and assign priorities to basic blocks according to their hotness to facilitate code cache management.", "paper_title": "An intermediate language level optimization framework for dynamic binary translation", "paper_id": "WOS:000253408700001"}