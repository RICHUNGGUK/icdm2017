{"auto_keywords": [{"score": 0.04058108573680191, "phrase": "cam"}, {"score": 0.00481495049065317, "phrase": "low-power_content-addressable_memory"}, {"score": 0.004596779715291598, "phrase": "hardware_storage"}, {"score": 0.004500891637057374, "phrase": "fast_lookup_applications"}, {"score": 0.004406994912939125, "phrase": "parallel_comparison_feature"}, {"score": 0.004351595642056769, "phrase": "cam_memory_large_power_consumption"}, {"score": 0.004189523950071494, "phrase": "new_cam_word_architecture"}, {"score": 0.003932654396285872, "phrase": "master-slave_architecture_and_charge_refill_minimization_technique"}, {"score": 0.0037861265016041813, "phrase": "match_lines"}, {"score": 0.0036759314172445934, "phrase": "conventional_design"}, {"score": 0.0036144035798673967, "phrase": "single_ml"}, {"score": 0.003349984456443527, "phrase": "search_operation"}, {"score": 0.0032800186243040663, "phrase": "mml_charge"}, {"score": 0.0031577303835881964, "phrase": "mml_charge_refill_swing"}, {"score": 0.003091767402370757, "phrase": "ml_power_consumption"}, {"score": 0.0029764767329116875, "phrase": "ml_power_saving"}, {"score": 0.0028654728453890426, "phrase": "search_pattern"}, {"score": 0.002770273247998903, "phrase": "conventional_nor-type_cam_design"}, {"score": 0.0026782279715171866, "phrase": "msml_design"}, {"score": 0.0026445028886931837, "phrase": "best_configuration"}, {"score": 0.002600194073758015, "phrase": "ml_energy_consumption"}, {"score": 0.002503187934017557, "phrase": "word_size"}, {"score": 0.0024097920845706795, "phrase": "modified_cam_cell"}, {"score": 0.0023694065215394593, "phrase": "msml_match_performance"}, {"score": 0.00214995338990007, "phrase": "original_msml"}, {"score": 0.002131857309586904, "phrase": "traditional_cam_designs"}], "paper_keywords": ["Charge refill minimization", " content-addressable memory (CAM)", " low-power", " master-slave architecture", " match line (ML)"], "paper_abstract": "Content-addressable memory (CAM) is a hardware storage commonly used in the fast lookup applications. However, the parallel comparison feature costs the CAM memory large power consumption. In this paper, we propose a new CAM word architecture, called master-slave match line (MSML) design, which aims to combine the master-slave architecture and charge refill minimization technique to reduce the CAM power dissipated in the match lines (MLs). Unlike the conventional design, where only one single ML is used, our design uses one master-ML (MML) and several slave-MLs (SMLs) to perform the search operation. By sharing the MML charge with only the mismatched SML, our design can minimize the MML charge refill swing, such that the ML power consumption can be reduced effectively. Theoretically, the ML power saving is at least 50%, which is independent of the search pattern and match case. Compared with the conventional NOR-type CAM design, the simulation results show that the MSML design with the best configuration can reduce the ML energy consumption by range 7%-57%, which increases with the word size. In addition, we further propose a modified CAM cell to facilitate the MSML match performance, i.e., MSMLhp design, which can even result in 28% and 69% energy-delay product improvement compared with the original MSML and traditional CAM designs in the 128-bit word size case.", "paper_title": "Master-Slave Match Line Design for Low-Power Content-Addressable Memory", "paper_id": "WOS:000364208100015"}