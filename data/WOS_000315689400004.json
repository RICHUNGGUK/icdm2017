{"auto_keywords": [{"score": 0.04476011617302403, "phrase": "design_rationale"}, {"score": 0.010812399141998505, "phrase": "archirationale"}, {"score": 0.00481495049065317, "phrase": "software_architecture_adaptation."}, {"score": 0.004766090327062509, "phrase": "software_architecture_design"}, {"score": 0.004622450915803531, "phrase": "broad_set"}, {"score": 0.00457553517865013, "phrase": "design_decisions"}, {"score": 0.003711723285313348, "phrase": "appropriate_methods"}, {"score": 0.003545024951402821, "phrase": "architecture_design_rationale"}, {"score": 0.003403122817578447, "phrase": "feature-based_rationale_management_approach"}, {"score": 0.003250238918180901, "phrase": "software_architecture_adaptation"}, {"score": 0.003120099687922751, "phrase": "existing_architecture"}, {"score": 0.0028459677232555176, "phrase": "feature_model"}, {"score": 0.0027883885425383534, "phrase": "possible_set"}, {"score": 0.0027600360731762997, "phrase": "architectural_tactics"}, {"score": 0.0027041907335656782, "phrase": "quality_concern"}, {"score": 0.0026630475331025955, "phrase": "presented_approach"}, {"score": 0.0025694584194998356, "phrase": "feature_selections"}, {"score": 0.0025046245057922557, "phrase": "corresponding_architecture_design_alternatives"}, {"score": 0.002416589459425828, "phrase": "eclipse_plugin_tools"}, {"score": 0.0023798115577749225, "phrase": "archstudio"}, {"score": 0.0023556080894457294, "phrase": "xquery"}, {"score": 0.0023197517832705297, "phrase": "tool_support"}, {"score": 0.002126635713519053, "phrase": "software_architecture"}, {"score": 0.0021049977753042253, "phrase": "fault_tolerance"}], "paper_keywords": ["Architecture design rationale", " architecture adaptation", " tools"], "paper_abstract": "Each software architecture design is the result of a broad set of design decisions and their justifications, that is, the design rationale. Capturing the design rationale is important for a variety of reasons such as enhancing communication, reuse and maintenance. Unfortunately, it appears that there is still a lack of appropriate methods and tools for effectively capturing and managing the architecture design rationale. In this paper we present a feature-based rationale management approach and the corresponding tool environment ArchiRationale for supporting software architecture adaptation. The approach takes as input an existing architecture and captures the design rationale for adapting the architecture for a given quality concern. For this we define a feature model that includes the possible set of architectural tactics to realize the quality concern. The presented approach captures the rationale for deciding on feature selections and for selecting the corresponding architecture design alternatives. ArchiRationale customizes and integrates the Eclipse plugin tools XFeature, ArchStudio and XQuery to provide tool support for capturing, storing and accessing the design rationale. We illustrate the approach for adapting a software architecture for fault tolerance.", "paper_title": "FEATURE-BASED RATIONALE MANAGEMENT SYSTEM FOR SUPPORTING SOFTWARE ARCHITECTURE ADAPTATION", "paper_id": "WOS:000315689400004"}