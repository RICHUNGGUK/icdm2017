{"auto_keywords": [{"score": 0.03745594011391733, "phrase": "linear-invariant_properties"}, {"score": 0.011577861499547868, "phrase": "boolean"}, {"score": 0.009050900726256696, "phrase": "linear-invariant_property"}, {"score": 0.007886443066925194, "phrase": "canonical_tester"}, {"score": 0.00481495049065317, "phrase": "odd_integer"}, {"score": 0.004302463542835521, "phrase": "odd-cycle-free_functions"}, {"score": 0.003957261767109878, "phrase": "evaluation_oracle"}, {"score": 0.0038319633481562402, "phrase": "shedding_light"}, {"score": 0.003795150272525989, "phrase": "different_connection"}, {"score": 0.0037225777441034936, "phrase": "boolean_functions"}, {"score": 0.0036868116297599255, "phrase": "dense_graphs"}, {"score": 0.0036513878928387047, "phrase": "first_issue"}, {"score": 0.0034905093340212045, "phrase": "associated_graph_properties"}, {"score": 0.0034347810592224096, "phrase": "black-box_reduction"}, {"score": 0.003262341820799718, "phrase": "kral"}, {"score": 0.0032309847036613667, "phrase": "serra"}, {"score": 0.003210243938521695, "phrase": "vena"}, {"score": 0.0031793857442434697, "phrase": "shapira"}, {"score": 0.0031488204239389335, "phrase": "monotone_linear-invariant_properties"}, {"score": 0.003078639412163634, "phrase": "finite_number"}, {"score": 0.0029714924513911897, "phrase": "infinite_number"}, {"score": 0.002952414496287241, "phrase": "forbidden_equations"}, {"score": 0.002895910285227502, "phrase": "property_testing"}, {"score": 0.0026122745966589795, "phrase": "one-sided_testable_linear-invariant_properties"}, {"score": 0.0025540287204463006, "phrase": "sudan"}, {"score": 0.002529454236169383, "phrase": "second_issue"}, {"score": 0.0024650878485505032, "phrase": "efficient_canonical_tester"}, {"score": 0.0023487724551034227, "phrase": "random_linear_subspace"}, {"score": 0.0022816284181888646, "phrase": "input_function"}, {"score": 0.0022379331011153146, "phrase": "fixed_property"}], "paper_keywords": [""], "paper_abstract": "A function f : F-2(n) -> {0, 1} is odd-cycle-free if there are no x(1), . . ., x(k) is an element of F-2(n) with k an odd integer such that f(x(1)) = . . . = f(x(k)) = 1 and x(1) + . . . + x(k) = 0. We show that one can distinguish odd-cycle-free functions from those is an element of-far from being odd-cycle-free by making poly(1/is an element of) queries to an evaluation oracle. We give two proofs of this result, each shedding light on a different connection between testability of properties of Boolean functions and of dense graphs. The first issue we study is directly reducing testing of linear-invariant properties of Boolean functions to testing associated graph properties. We show a black-box reduction from testing odd-cycle-freeness to testing bipartiteness of graphs. Such reductions have already been shown (Kral', Serra and Vena, and Shapira) for monotone linear-invariant properties defined by forbidding solutions to a finite number of equations. But for odd-cycle-freeness whose description involves an infinite number of forbidden equations, a reduction to graph property testing was not previously known. If one could show such a reduction more generally for any linear-invariant property closed under restrictions to subspaces, then it would likely lead to a characterization of the one-sided testable linear-invariant properties, an open problem raised by Sudan. The second issue we study is whether there is an efficient canonical tester for linear-invariant properties of Boolean functions. A canonical tester for linear-invariant properties operates by picking a random linear subspace and then checking whether the restriction of the input function to the subspace satisfies a fixed property. The question is if, for every linear-invariant property, there is a canonical tester for which there is only a polynomial blow-up from the optimal query complexity. We answer the question affirmatively for odd-cycle-freeness. The general question remains open.", "paper_title": "Testing Odd-Cycle-Freeness in Boolean Functions", "paper_id": "WOS:000309680500003"}