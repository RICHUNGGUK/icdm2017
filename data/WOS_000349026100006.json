{"auto_keywords": [{"score": 0.03236245548199097, "phrase": "combined_system"}, {"score": 0.00481495049065317, "phrase": "ltl_properties"}, {"score": 0.004767261858417823, "phrase": "ansi-c_programs"}, {"score": 0.004720043307726269, "phrase": "bounded_traces"}, {"score": 0.004673290248999786, "phrase": "context-bounded_model_checking"}, {"score": 0.004513255056769647, "phrase": "safety_properties"}, {"score": 0.0044685410845412745, "phrase": "multi-threaded_systems"}, {"score": 0.004272724011826495, "phrase": "low-level_programming_languages"}, {"score": 0.00421000215627968, "phrase": "c."}, {"score": 0.00392586404888927, "phrase": "context-bounded_software_model"}, {"score": 0.003829290275367182, "phrase": "liveness_properties"}, {"score": 0.0037724857647796813, "phrase": "linear-time_temporal_logic"}, {"score": 0.0036250779580069455, "phrase": "actual_c_program"}, {"score": 0.0035358770665604657, "phrase": "extracted_abstract_model"}, {"score": 0.003448863509392547, "phrase": "ltl_formulas"}, {"score": 0.0034146585649631692, "phrase": "buchi_automata"}, {"score": 0.0033639840192975835, "phrase": "corresponding_never_claims"}, {"score": 0.003281186608301359, "phrase": "c_monitor_threads"}, {"score": 0.0029698211157405618, "phrase": "esbmc_model_checker"}, {"score": 0.0027834145465170292, "phrase": "model_checking"}, {"score": 0.002634830238219976, "phrase": "different_acceptance_criteria"}, {"score": 0.0025827837420330816, "phrase": "correct_truth_value"}, {"score": 0.0024941578231560055, "phrase": "state_space_explosion"}, {"score": 0.0024327171018928458, "phrase": "dedicated_scheduler"}, {"score": 0.0023846534541336326, "phrase": "monitor_thread"}, {"score": 0.0023259039577313294, "phrase": "global_variables"}, {"score": 0.0022799458141165587, "phrase": "ltl_formula"}, {"score": 0.002168975681697056, "phrase": "sequential_firmware"}, {"score": 0.002136747803494932, "phrase": "medical_device"}, {"score": 0.0021049977753042253, "phrase": "small_multi-threaded_control_application"}], "paper_keywords": ["Model checking", " Linear temporal logic", " Software verification"], "paper_abstract": "Context-bounded model checking has been used successfully to verify safety properties in multi-threaded systems automatically, even if they are implemented in low-level programming languages such as C. In this paper, we describe and experiment with an approach to extend context-bounded software model checking to safety and liveness properties expressed in linear-time temporal logic (LTL). Our approach checks the actual C program, rather than an extracted abstract model. It converts the LTL formulas into Buchi automata for the corresponding never claims and then further into C monitor threads that are interleaved with the execution of the program under analysis. This combined system is then checked using the ESBMC model checker. We use an extended, four-valued LTL semantics to handle the finite traces that bounded model checking explores; we thus check the combined system several times with different acceptance criteria to derive the correct truth value. In order to mitigate the state space explosion, we use a dedicated scheduler that selects the monitor thread only after updates to global variables occurring in the LTL formula. We demonstrate our approach on the analysis of the sequential firmware of a medical device and a small multi-threaded control application.", "paper_title": "Model checking LTL properties over ANSI-C programs with bounded traces", "paper_id": "WOS:000349026100006"}