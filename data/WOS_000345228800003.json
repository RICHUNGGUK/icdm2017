{"auto_keywords": [{"score": 0.04217208370496875, "phrase": "mpi"}, {"score": 0.041230470635685725, "phrase": "pointer-based_data_structures"}, {"score": 0.0048153158481707755, "phrase": "distributed"}, {"score": 0.004087756756529841, "phrase": "global_address_space_abstraction"}, {"score": 0.0037516215763875225, "phrase": "drasync"}, {"score": 0.003389704997952315, "phrase": "efficient_parallel_allocation"}, {"score": 0.00331125524068286, "phrase": "global_address_space"}, {"score": 0.0030865992688177005, "phrase": "bulk_deallocation"}, {"score": 0.0030387767523076528, "phrase": "good_locality"}, {"score": 0.0028325548627901004, "phrase": "ownership_semantics"}, {"score": 0.002681859084438076, "phrase": "reader-writer_locks"}, {"score": 0.002422890839801611, "phrase": "message-passing_performance"}, {"score": 0.0022939396079753463, "phrase": "state-of-the-art_distributed_allocator"}, {"score": 0.0021049977753042253, "phrase": "higher-level_abstraction"}], "paper_keywords": ["Memory management", " distributed", " synchronization", " locking"], "paper_abstract": "We present DRASync, a region-based allocator that implements a global address space abstraction for MPI programs with pointer-based data structures. The main features of DRASync are: (a) it amortizes communication among nodes to allow efficient parallel allocation in a global address space; (b) it takes advantage of bulk deallocation and good locality with pointer-based data structures; (c) it supports ownership semantics of regions by nodes akin to reader-writer locks, which makes for a high-level, intuitive synchronization tool in MPI programs, without sacrificing message-passing performance. We evaluate DRASync against a state-of-the-art distributed allocator and find that it produces comparable performance while offering a higher-level abstraction to programmers.", "paper_title": "Distributed region-based memory allocation and synchronization", "paper_id": "WOS:000345228800003"}