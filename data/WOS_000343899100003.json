{"auto_keywords": [{"score": 0.041882654269095175, "phrase": "concurrent_programs"}, {"score": 0.015719716506582538, "phrase": "test_oracles"}, {"score": 0.015329357550384136, "phrase": "functional_faults"}, {"score": 0.009983779031022212, "phrase": "concurrent_software"}, {"score": 0.004760065841405086, "phrase": "detection"}, {"score": 0.004714023408114857, "phrase": "diagnosis_of"}, {"score": 0.0046544807197808095, "phrase": "concurrent_object-oriented_software"}, {"score": 0.004461359547152617, "phrase": "software_development_methodology"}, {"score": 0.004240116703465252, "phrase": "better_quality_object-oriented_software"}, {"score": 0.004151188559520802, "phrase": "ample_support"}, {"score": 0.004116143546010558, "phrase": "dbc"}, {"score": 0.004081385289516914, "phrase": "sequential_programs"}, {"score": 0.0039120570851830724, "phrase": "java"}, {"score": 0.0038624981944755813, "phrase": "target_programming_language"}, {"score": 0.00371785204262421, "phrase": "jml"}, {"score": 0.003639835714755229, "phrase": "jml_compiler"}, {"score": 0.003548368289666932, "phrase": "runtime_assertion"}, {"score": 0.0033437537557378157, "phrase": "carefully_designed_case_study"}, {"score": 0.003301461490509176, "phrase": "highly_concurrent_industrial_software_system"}, {"score": 0.0029565620771207003, "phrase": "clear_and_objective_requirements"}, {"score": 0.002870006736445581, "phrase": "effective_test_oracles"}, {"score": 0.0027393845787761096, "phrase": "effort"}, {"score": 0.0026701760128830573, "phrase": "contract_complexity_measure"}, {"score": 0.0025591748412278174, "phrase": "main_results"}, {"score": 0.0024947959375982614, "phrase": "realistic_level"}, {"score": 0.002360796860462937, "phrase": "diagnosis_effort"}, {"score": 0.0021593396036472777, "phrase": "valuable_tool"}, {"score": 0.0021049977753042253, "phrase": "software_engineering"}], "paper_keywords": ["Software/Program Verification-Programming by contract", " Software Quality/SQA-Measurement applied to SQA and V&V", " Concurrent programming", " object-oriented programming"], "paper_abstract": "Design by contract (DbC) is a software development methodology that focuses on clearly defining the interfaces between components to produce better quality object-oriented software. Though there exists ample support for DbC for sequential programs, applying DbC to concurrent programs presents several challenges. Using Java as the target programming language, we tackle such challenges by augmenting the Java Modelling Language (JML) and modifying the JML compiler (jmlc) to generate runtime assertion checking code to support DbC in concurrent programs. We applied our solution in a carefully designed case study on a highly concurrent industrial software system from the telecommunications domain to assess the effectiveness of contracts as test oracles in detecting and diagnosing functional faults in concurrent software. Based on these results, clear and objective requirements are defined for contracts to be effective test oracles for concurrent programs whilst balancing the effort to design them. Effort is measured indirectly through the contract complexity measure (CCM), a measure we define. Main results include that contracts of a realistic level of completeness and complexity can detect around 76 percent of faults and reduce the diagnosis effort for such faults tenfold. We, therefore, show that DbC can be applied to concurrent software and can be a valuable tool to improve the economics of software engineering.", "paper_title": "On the Effectiveness of Contracts as Test Oracles in the Detection and Diagnosis of Functional Faults in Concurrent Object-Oriented Software", "paper_id": "WOS:000343899100003"}