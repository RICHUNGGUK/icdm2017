{"auto_keywords": [{"score": 0.04933160037803686, "phrase": "sufferage"}, {"score": 0.0485953797861913, "phrase": "maxmin"}, {"score": 0.008511262233001447, "phrase": "minmin"}, {"score": 0.00581629429257667, "phrase": "running_time_performance"}, {"score": 0.00481495049065317, "phrase": "independent_task_assignment_heuristics_minmin"}, {"score": 0.0045748683993128425, "phrase": "constructive_heuristics"}, {"score": 0.004415675459182871, "phrase": "independent_tasks"}, {"score": 0.004346704947011699, "phrase": "heterogeneous_computing_systems"}, {"score": 0.0041136473765874815, "phrase": "n_tasks"}, {"score": 0.004081385289516914, "phrase": "k_processors"}, {"score": 0.003939296259436904, "phrase": "algorithmic_improvement"}, {"score": 0.0038624981944755813, "phrase": "running_time_complexity"}, {"score": 0.003640938643675543, "phrase": "newly_proposed_minmin_algorithm"}, {"score": 0.003432044343307207, "phrase": "former_hybrid_algorithm"}, {"score": 0.003299460925313939, "phrase": "problem_instances"}, {"score": 0.00327356326590461, "phrase": "highly_skewed_cost_distributions"}, {"score": 0.00314708280192844, "phrase": "latter_hybrid_algorithm"}, {"score": 0.0030135741897058844, "phrase": "proposed_algorithms"}, {"score": 0.002897109710213723, "phrase": "detailed_pseudocodes"}, {"score": 0.0028630535573013686, "phrase": "experimental_results"}, {"score": 0.0028293966058473476, "phrase": "large_number"}, {"score": 0.002807178116892454, "phrase": "real-life_data_sets"}, {"score": 0.002763261749602258, "phrase": "proposed_fast_minmin_algorithm"}, {"score": 0.0027307746993761035, "phrase": "proposed_hybrid_algorithms"}, {"score": 0.0025038930574283174, "phrase": "large_data_sets"}, {"score": 0.002121670413111008, "phrase": "proposed_algorithms_produce_solutions"}], "paper_keywords": ["Parallel processors", " heterogeneous systems", " load balancing", " independent task assignment", " MinMin", " MaxMin", " Sufferage", " constructive heuristics"], "paper_abstract": "MinMin, MaxMin, and Sufferage are constructive heuristics that are widely and successfully used in assigning independent tasks to processors in heterogeneous computing systems. All three heuristics are known to run in O(KN2) time in assigning N tasks to K processors. In this paper, we propose an algorithmic improvement that asymptotically decreases the running time complexity of MinMin to O(KN log N) without affecting its solution quality. Furthermore, we combine the newly proposed MinMin algorithm with MaxMin as well as Sufferage, obtaining two hybrid algorithms. The motivation behind the former hybrid algorithm is to address the drawback of MaxMin in solving problem instances with highly skewed cost distributions while also improving the running time performance of MaxMin. The latter hybrid algorithm improves the running time performance of Sufferage without degrading its solution quality. The proposed algorithms are easy to implement and we illustrate them through detailed pseudocodes. The experimental results over a large number of real-life data sets show that the proposed fast MinMin algorithm and the proposed hybrid algorithms perform significantly better than their traditional counterparts as well as more recent state-of-the-art assignment heuristics. For the large data sets used in the experiments, MinMin, MaxMin, and Sufferage, as well as recent state-of-the-art heuristics, require days, weeks, or even months to produce a solution, whereas all of the proposed algorithms produce solutions within only two or three minutes.", "paper_title": "Improving the Performance of Independent Task Assignment Heuristics MinMin, MaxMin and Sufferage", "paper_id": "WOS:000334673200014"}