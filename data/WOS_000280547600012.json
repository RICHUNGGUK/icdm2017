{"auto_keywords": [{"score": 0.029139449391002575, "phrase": "abstract_domain"}, {"score": 0.004815031294000619, "phrase": "concatenation"}, {"score": 0.004407110798872489, "phrase": "kim"}, {"score": 0.004278807087784626, "phrase": "schmidt's_\"abstract_parsing\"_technique"}, {"score": 0.003802135020791801, "phrase": "generated_code"}, {"score": 0.003728000957725218, "phrase": "two-staged_programs"}, {"score": 0.0036553070575015344, "phrase": "abstract_parsing"}, {"score": 0.003548905904860611, "phrase": "static_analysis_technique"}, {"score": 0.0033452741392850523, "phrase": "generated_strings"}, {"score": 0.0031223774204093713, "phrase": "two-staged_programming_languages"}, {"score": 0.002943147037670826, "phrase": "abstract_interpretation_framework"}, {"score": 0.0021049977753042253, "phrase": "namely_an_abstract_parse_stack"}], "paper_keywords": ["Languages", " Theory", " Multi-staged languages", " Program analysis", " Abstract Interpretation", " Parsing"], "paper_abstract": "This article, based on Doh, Kim, and Schmidt's \"abstract parsing\" technique, presents an abstract interpretation for statically checking the syntax of generated code in two-staged programs. Abstract parsing is a static analysis technique for checking the syntax of generated strings. We adopt this technique for two-staged programming languages and formulate it in the abstract interpretation framework. We parameterize our analysis with the abstract domain so that one can choose the abstract domain as long as it satisfies the condition we provide. We also present an instance of the abstract domain, namely an abstract parse stack and its widening with k-cutting.", "paper_title": "Abstract Parsing for Two-staged Languages with Concatenation", "paper_id": "WOS:000280547600012"}