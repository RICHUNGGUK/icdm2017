{"auto_keywords": [{"score": 0.004644329185633612, "phrase": "h-iterated_sumset"}, {"score": 0.0036862417490612673, "phrase": "set_x_subset"}, {"score": 0.003392363211686023, "phrase": "apx-hard_problem"}, {"score": 0.003343691804204423, "phrase": "minimum_cardinality"}, {"score": 0.0032134045046357876, "phrase": "minimum_cardinality_set_x_subset"}, {"score": 0.0023890733439136586, "phrase": "fagnot_et_al"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Sumset cover", " Algorithm", " Complexity"], "paper_abstract": "Let X = {x(i) : 1 <= i <= n} subset of N+, and h is an element of N+. The h-iterated sumset of X, denoted hX, is the set {x(1) + x(2) +...+ x(h) : x(1), x(2),.., x(h) is an element of X}, and the [h]-sumset of X, denoted [h]X, is the set boolean OR(h)(i=1) i X. A [h]-sumset cover of S subset of N+ is a set X subset of N+ such that S subset of [h]X. In this paper, we focus on the case h = 2, and study the APX-hard problem of computing a minimum cardinality [2]-sumset cover X of S (i.e. computing a minimum cardinality set X subset of N+ such that every element of S is either an element of X, or the sum of two - non-necessarily distinct - elements of X). We propose two new algorithmic results. First, we give a fixed-parameter tractable (FPT) algorithm that decides the existence of a [2]-sumset cover of size at most k of a given set S. Our algorithm runs in O (2((3 log k-1.4)k) poly(k)) time, and thus outperforms the O(5(k2(k+3)/2) k(2) log(k)) time FPT result presented in Fagnot et al. (2009) [5]. Second, we show that deciding whether a set S has a smaller [2]-sumset cover than itself is NP-hard. (c) 2014 Published by Elsevier B.V.", "paper_title": "Some algorithmic results for [2]-sumset covers", "paper_id": "WOS:000345478700001"}