{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "runtime_software_adaptation"}, {"score": 0.0047707093928203, "phrase": "aspect_models"}, {"score": 0.0047268728636719725, "phrase": "software_systems"}, {"score": 0.0045765783794477505, "phrase": "evolutive_systems"}, {"score": 0.004492841495994535, "phrase": "design_phase"}, {"score": 0.004309968592440261, "phrase": "building_process"}, {"score": 0.004040123129261597, "phrase": "changing_conditions"}, {"score": 0.00398452530840582, "phrase": "executing_environment"}, {"score": 0.0034052594710793664, "phrase": "aspect_oriented_modeling"}, {"score": 0.0033274664434575136, "phrase": "unified_aspect_metamodel"}, {"score": 0.0031918759137610523, "phrase": "design_and_runtime_adaptations"}, {"score": 0.0030759821501544224, "phrase": "dynamic_software_product_line"}, {"score": 0.002950608985750058, "phrase": "design_time"}, {"score": 0.0028172726995962173, "phrase": "new_requirements"}, {"score": 0.0027913353347879507, "phrase": "resource_changes"}, {"score": 0.0025565050791036973, "phrase": "adaptive_e-shopping_scenario"}, {"score": 0.002429668083484833, "phrase": "clear_separation"}], "paper_keywords": ["Aspect oriented modeling", " Software product lines"], "paper_abstract": "Software systems are seen more and more as evolutive systems. At the design phase, software is constantly in adaptation by the building process itself, and at runtime, it can be adapted in response to changing conditions in the executing environment such as location or resources. Adaptation is generally difficult to specify because of its crosscutting impact on software. This article introduces an approach to unify adaptation at design and at runtime based on Aspect Oriented Modeling. Our approach proposes a unified aspect metamodel and a platform that realizes two different weaving processes to achieve design and runtime adaptations. This approach is used in a Dynamic Software Product Line which derives products that can be configured at design time and adapted at runtime in order to dynamically fit new requirements or resource changes. Such products are implemented using the Service Component Architecture and Java. Finally, we illustrate the use of our approach based on an adaptive e-shopping scenario. The main advantages of this unification are: a clear separation of concerns, the self-contained aspect model that can be weaved during the design and execution, and the platform independence guaranteed by two different types of weaving. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Unifying design and runtime software adaptation using aspect models", "paper_id": "WOS:000292806900012"}