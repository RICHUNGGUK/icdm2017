{"auto_keywords": [{"score": 0.050067233313081425, "phrase": "genetic_algorithm"}, {"score": 0.049737875471837, "phrase": "local_search"}, {"score": 0.04104449441484819, "phrase": "ga"}, {"score": 0.026790788942137416, "phrase": "efficient_implementation"}, {"score": 0.004732444672509326, "phrase": "max-sat_problem"}, {"score": 0.004699837689671504, "phrase": "nvidia_cuda_framework"}, {"score": 0.004667454318370122, "phrase": "general_purpose"}, {"score": 0.004619295212985837, "phrase": "graphical_processing_units"}, {"score": 0.004524455848517757, "phrase": "huge_shift"}, {"score": 0.004462308985053246, "phrase": "parallel_computing"}, {"score": 0.004401011982385274, "phrase": "dramatic_increase"}, {"score": 0.004325586307656911, "phrase": "gpgpus"}, {"score": 0.004266141613620429, "phrase": "unprecedented_level"}, {"score": 0.004207527897084009, "phrase": "algorithmic_design"}, {"score": 0.004178522455099832, "phrase": "software_development"}, {"score": 0.004036455094603843, "phrase": "design_choices"}, {"score": 0.0037927494831151553, "phrase": "maximum_satisfiability"}, {"score": 0.0035391223341472502, "phrase": "nvidia_compute_unified_device_architecture"}, {"score": 0.003418719577853084, "phrase": "practical_importance"}, {"score": 0.003325343504284345, "phrase": "based_search_methods"}, {"score": 0.0029052913631676435, "phrase": "commodity_graphics_hardware"}, {"score": 0.0027773822574586092, "phrase": "simt"}, {"score": 0.002729901834219315, "phrase": "gpu"}, {"score": 0.0026459054525234706, "phrase": "conventional_ls_algorithms"}, {"score": 0.00258251424573557, "phrase": "different_genetic_operators"}, {"score": 0.0024859463164240603, "phrase": "nvidia_gpus"}, {"score": 0.0023683995941044494, "phrase": "ls"}, {"score": 0.002279660253812632, "phrase": "performance_measurements"}, {"score": 0.0022327484973125936, "phrase": "best_case"}, {"score": 0.0021269997368140066, "phrase": "different_optimization_techniques"}, {"score": 0.0021049977753042253, "phrase": "overall_execution_time"}], "paper_keywords": ["Compute unified device architecture (CUDA)", " General-purpose computing on graphics processing unit (GPGPU)", " Genetic algorithm (GA)", " MAXimum SATisfiability problem (MAX-SAT)", " Single instruction multiple data (SIMD)", " Single instruction multiple threads (SIMT)"], "paper_abstract": "General Purpose computing over Graphical Processing Units (GPGPUs) is a huge shift of paradigm in parallel computing that promises a dramatic increase in performance. But GPGPUs also bring an unprecedented level of complexity in algorithmic design and software development. In this paper we describe the challenges and design choices involved in parallelizing a hybrid of Genetic Algorithm (GA) and Local Search (LS) to solve MAXimum SATisfiability (MAX-SAT) problem on a state-of-the-art nVidia Tesla GPU using nVidia Compute Unified Device Architecture (CUDA). MAX-SAT is a problem of practical importance and is often solved by employing metaheuristics based search methods like GAs and hybrid of GA with LS. Almost all the parallel GAs (pGAs) designed in the last two decades were designed for either clusters or MPPs. Unfortunately, very little research is done on the implementation of such algorithms over commodity graphics hardware. GAs in their simple form are not suitable for implementation over the Single Instruction Multiple Thread (SIMT) architecture of a GPU, and the same is the case with conventional LS algorithms. In this paper we explore different genetic operators that can be used for an efficient implementation of GAs over nVidia GPUs. We also design and introduce new techniques/operators for an efficient implementation of GAs and LS over such architectures. We use nVidia Tesla C1060 to perform several numerical tests and performance measurements and show that in the best case we obtain a speedup of 25x. We also discuss the effects of different optimization techniques on the overall execution time.", "paper_title": "Hybrid of genetic algorithm and local search to solve MAX-SAT problem using nVidia CUDA framework", "paper_id": "WOS:000271404200004"}