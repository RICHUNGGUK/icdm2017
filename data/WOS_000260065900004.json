{"auto_keywords": [{"score": 0.022752888936031564, "phrase": "gcc"}, {"score": 0.004753670676591174, "phrase": "irregular_access_patterns"}, {"score": 0.0046632033374901715, "phrase": "major_problem"}, {"score": 0.0046038458731764926, "phrase": "today's_optimizing_compilers"}, {"score": 0.004401955895933783, "phrase": "novel_approach"}, {"score": 0.0041023644174418205, "phrase": "regular_loop_structures"}, {"score": 0.0039729853486821995, "phrase": "linked_list_data_structures"}, {"score": 0.0037262941538784094, "phrase": "linked_list"}, {"score": 0.003215295260684715, "phrase": "occurring_regular_and_irregular_access_patterns"}, {"score": 0.003093893243443715, "phrase": "intermediate_codes"}, {"score": 0.0029391032882625473, "phrase": "regular_loops"}, {"score": 0.0027741761880779535, "phrase": "run-time_step"}, {"score": 0.0026693851900137953, "phrase": "access_pattern"}, {"score": 0.0025521085778978042, "phrase": "data_instance_specific_optimized_code"}, {"score": 0.0024243586247372087, "phrase": "sparse_matrix_multiplication_algorithm"}, {"score": 0.002378114613631841, "phrase": "iterative_solver"}, {"score": 0.002273605493468005, "phrase": "resulting_transformed_code"}, {"score": 0.00220177373403577, "phrase": "major_compilers"}], "paper_keywords": ["Optimizing compilers", " Parallel processing", " Linked list data structures"], "paper_abstract": "Irregular access patterns are a major problem for today's optimizing compilers. In this paper, a novel approach will be presented that enables transformations that were designed for regular loop structures to be applied to linked list data structures. This is achieved by linearizing access to a linked list, after which further data restructuring can be performed. Two subsequent optimization paths will be considered: annihilation and sublimation, which are driven by the occurring regular and irregular access patterns in the applications. These intermediate codes are amenable to traditional compiler optimizations targeting regular loops. In the case of sublimation, a run-time step is involved which takes the access pattern into account and thus generates a data instance specific optimized code. Both approaches are applied to a sparse matrix multiplication algorithm and an iterative solver: preconditioned conjugate gradient. The resulting transformed code is evaluated using the major compilers for the x86 platform, GCC and the Intel C compiler.", "paper_title": "A Compile/Run-time Environment for the Automatic Transformation of Linked List Data Structures", "paper_id": "WOS:000260065900004"}