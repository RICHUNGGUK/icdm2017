{"auto_keywords": [{"score": 0.037126543303390706, "phrase": "bds"}, {"score": 0.00481495049065317, "phrase": "data_pipelines"}, {"score": 0.004617328272121826, "phrase": "large_biological_datasets"}, {"score": 0.004535124351828787, "phrase": "complex_processing_pipelines"}, {"score": 0.004401342842183475, "phrase": "long_time"}, {"score": 0.004348936976349555, "phrase": "large_computational_infrastructures"}, {"score": 0.0041703614123283165, "phrase": "simple_script-like_programming_language"}, {"score": 0.004096082254543022, "phrase": "clean_and_minimalist_syntax"}, {"score": 0.003975200317233532, "phrase": "pipeline_execution"}, {"score": 0.0038119123317396954, "phrase": "software_and_hardware_failures"}, {"score": 0.0034841647157189985, "phrase": "programming_language"}, {"score": 0.0034426417353349567, "phrase": "data_processing_pipelines"}, {"score": 0.003321008590273796, "phrase": "hardware_resources"}, {"score": 0.0032036590920314725, "phrase": "hardware_abstraction"}, {"score": 0.0031654684543975077, "phrase": "bds_pipelines"}, {"score": 0.0030353401945270755, "phrase": "wide_range"}, {"score": 0.0029991500396912923, "phrase": "computer_architectures"}, {"score": 0.0029280552768499056, "phrase": "small_laptop"}, {"score": 0.0028931405607654495, "phrase": "multi-core_servers"}, {"score": 0.002612640527241776, "phrase": "absolute_serialization"}, {"score": 0.002581477142020187, "phrase": "lazy_processing"}, {"score": 0.00240213106042981, "phrase": "pipeline_concepts"}, {"score": 0.002373472641477602, "phrase": "programming_language_level"}, {"score": 0.0022352169832099153, "phrase": "complex_bioinformatics_pipelines"}, {"score": 0.0021821915946356168, "phrase": "reduced_development"}, {"score": 0.0021561514733516654, "phrase": "debugging_cycles"}, {"score": 0.0021049977753042253, "phrase": "cleaner_code"}], "paper_keywords": [""], "paper_abstract": "Motivation: The analysis of large biological datasets often requires complex processing pipelines that run for a long time on large computational infrastructures. We designed and implemented a simple script-like programming language with a clean and minimalist syntax to develop and manage pipeline execution and provide robustness to various types of software and hardware failures as well as portability. Results: We introduce the BigDataScript (BDS) programming language for data processing pipelines, which improves abstraction from hardware resources and assists with robustness. Hardware abstraction allows BDS pipelines to run without modification on a wide range of computer architectures, from a small laptop to multi-core servers, server farms, clusters and clouds. BDS achieves robustness by incorporating the concepts of absolute serialization and lazy processing, thus allowing pipelines to recover from errors. By abstracting pipeline concepts at programming language level, BDS simplifies implementation, execution and management of complex bioinformatics pipelines, resulting in reduced development and debugging cycles as well as cleaner code.", "paper_title": "BigDataScript: a scripting language for data pipelines", "paper_id": "WOS:000347417000002"}