{"auto_keywords": [{"score": 0.03166594637774106, "phrase": "proposed_solution"}, {"score": 0.00481495049065317, "phrase": "outsourced_data"}, {"score": 0.004709193603747991, "phrase": "cloud_computing"}, {"score": 0.004585332915477379, "phrase": "ever-growing_rate"}, {"score": 0.004347256848088215, "phrase": "external_services"}, {"score": 0.003977505904363489, "phrase": "data_owner"}, {"score": 0.0038900709793274484, "phrase": "clear_need"}, {"score": 0.003838531755488468, "phrase": "proper_confidentiality_protection"}, {"score": 0.0036715973701254823, "phrase": "stored_data"}, {"score": 0.003543273649210823, "phrase": "specific_accesses"}, {"score": 0.003073154478201771, "phrase": "pattern_confidentiality"}, {"score": 0.003032405563826263, "phrase": "data_outsourcing_scenario"}, {"score": 0.0028875481626754696, "phrase": "shuffle_index_structure"}, {"score": 0.002470987929071079, "phrase": "single_access"}, {"score": 0.002352886041381761, "phrase": "update_operations"}, {"score": 0.0021333110194180997, "phrase": "shuffle_index"}, {"score": 0.0021049977753042253, "phrase": "limited_performance_cost"}], "paper_keywords": ["Security", " Design", " Management", " Shuffle index", " private access", " content confidentiality", " access confidentiality", " pattern confidentiality"], "paper_abstract": "Data outsourcing and cloud computing have been emerging at an ever-growing rate as successful approaches for allowing users and companies to rely on external services for storing and managing data. As data and access to them are not under the control of the data owner, there is a clear need to provide proper confidentiality protection. Such requirements concern the confidentiality not only of the stored data (content) but also of the specific accesses (or patterns of them) that users make on such data. In this article, we address these issues and propose an approach for guaranteeing content, access, and pattern confidentiality in a data outsourcing scenario. The proposed solution is based on the definition of a shuffle index structure, which adapts traditional B+-trees and, by applying a combination of techniques (covers, caches, and shuffling), ensures confidentiality of the data and of queries over them, protecting each single access as well as sequences thereof. The proposed solution also supports update operations over the data, while making reads and writes not recognizable as such by the server. We show that the shuffle index exhibits a limited performance cost, thus resulting effectively usable in practice.", "paper_title": "Shuffle Index: Efficient and Private Access to Outsourced Data", "paper_id": "WOS:000368187800005"}