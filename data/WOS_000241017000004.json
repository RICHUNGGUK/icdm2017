{"auto_keywords": [{"score": 0.04467661766774399, "phrase": "handel-c"}, {"score": 0.03187683866152962, "phrase": "designed_unit"}, {"score": 0.00481495049065317, "phrase": "handel-c_design_flow"}, {"score": 0.004733625412289433, "phrase": "hmac-hash_unit"}, {"score": 0.004633888966463624, "phrase": "emerging_system_design_methodology"}, {"score": 0.0045556080393342165, "phrase": "reconfigurable_hmac-hash_unit"}, {"score": 0.004310173770196077, "phrase": "high-level_language"}, {"score": 0.004201381218977942, "phrase": "programmable_gate_array_platforms"}, {"score": 0.004148014765950199, "phrase": "handel-c_approach"}, {"score": 0.003858110309630846, "phrase": "high-level_prototype"}, {"score": 0.0038253590626087237, "phrase": "hardware_description_languages"}, {"score": 0.0037287578312533596, "phrase": "high_degree"}, {"score": 0.003527712410706358, "phrase": "hardware_reconfiguration"}, {"score": 0.0034828730516958807, "phrase": "detailed_case_study"}, {"score": 0.003309124298009635, "phrase": "six_standard_hash_functions"}, {"score": 0.0028139168128067343, "phrase": "handel-c_methodology"}, {"score": 0.0027078974645805736, "phrase": "hmac-hash_unit_architecture"}, {"score": 0.0025947642929906407, "phrase": "previously_designed_units"}, {"score": 0.0025183881730011597, "phrase": "area_cost"}, {"score": 0.002475755804232436, "phrase": "six_standard_algorithms"}], "paper_keywords": [""], "paper_abstract": "An emerging system design methodology in designing a reconfigurable HMAC-hash unit is utilised. This methodology directly maps a design described in a high-level language, Handel-C, to field programmable gate array platforms. The Handel-C approach narrows the gap between performance and flexibility and thus, reduces the risk of translating a high-level prototype into hardware description languages. It allows for a high degree of flexibility from two viewpoints: the language level of abstraction and the hardware reconfiguration. A detailed case study is considered: a reconfigurable HMAC-hash unit that implements six standard hash functions: MD5, SHA-1, RIPEMD-160, HMAC-MD5, HMAC-SHA-1 and HMAC-RIPEMD-160. The performance of the designed unit has been enhanced by applying pipelining, parallelism and reconfigurability through the usage of the Handel-C methodology. The use of Handel-C resulted in the HMAC-hash unit architecture that is better in speed than most of the previously designed units. At the same time, the area cost for putting the six standard algorithms on the same hardware core is also kept to a minimum. It is found that the time required to design, implement and test the designed unit using this methodology is reasonably low compared with the time required using other design approaches.", "paper_title": "Applying the Handel-C design flow in designing an HMAC-hash unit on FPGAs", "paper_id": "WOS:000241017000004"}