{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cobol"}, {"score": 0.04145764292877429, "phrase": "cobol_mines"}, {"score": 0.004489810932879285, "phrase": "unexpected_behaviour"}, {"score": 0.00443308765153716, "phrase": "reduced_portability"}, {"score": 0.004240116703465252, "phrase": "so-called_'mines"}, {"score": 0.004081385289516914, "phrase": "hidden_dangers"}, {"score": 0.0040042529959108605, "phrase": "extreme_caution"}, {"score": 0.003757480190200645, "phrase": "programming_error"}, {"score": 0.003571018150056717, "phrase": "unforeseen_moment"}, {"score": 0.0034154440860550564, "phrase": "source_code"}, {"score": 0.00337224813954299, "phrase": "unseen_hazards"}, {"score": 0.0031044458412608084, "phrase": "costly_breakdowns"}, {"score": 0.0030457198309616694, "phrase": "critical_software_systems"}, {"score": 0.002597491690813945, "phrase": "industrial_situation"}, {"score": 0.0024372021710656585, "phrase": "production_systems"}, {"score": 0.002360796860462937, "phrase": "complex_legacy_application"}, {"score": 0.002286781334850213, "phrase": "code_restructuring"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Cobol", " defects analysis", " error-prone code", " coding standards", " code restructuring"], "paper_abstract": "In Cobol, procedures can be programmed in ways that lead to unexpected behaviour and reduced portability. This behaviour is recognized as so-called 'mines': programming practices containing hidden dangers and requiring extreme caution. Cobol mines can be created intentionally or by a programming error, and can be tripped at an unforeseen moment. This leads to minefields in source code with unseen hazards, which complicate understanding and maintenance, and which can lead to costly breakdowns of business critical software systems. We discuss Cobol mines and the dangers that come with them, having implemented a mine detector for Cobol. Our detector was deployed in an industrial situation, and a number of minefields were found in production systems. By restructuring a complex legacy application, we argue that code restructuring can be used to combat minefields. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Cobol minefield detection", "paper_id": "WOS:000241905800005"}