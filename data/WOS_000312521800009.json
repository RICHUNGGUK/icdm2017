{"auto_keywords": [{"score": 0.03386457429541167, "phrase": "first-order_logic"}, {"score": 0.00481495049065317, "phrase": "software_cost_reduction_method"}, {"score": 0.004372442291178139, "phrase": "software_requirements"}, {"score": 0.003680587852807675, "phrase": "scr_events"}, {"score": 0.0033190180867511605, "phrase": "scr_semantics"}, {"score": 0.0030135741897058844, "phrase": "slight_extension"}, {"score": 0.002793380001054064, "phrase": "scr_tables"}, {"score": 0.0026252106881752067, "phrase": "validation_process"}, {"score": 0.0024842242921857705, "phrase": "scr_method"}, {"score": 0.002194011800331242, "phrase": "temporal_logic"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software Cost Reduction", " First-order logic", " Formal methods", " Table-based specification techniques"], "paper_abstract": "Although the Software Cost Reduction (SCR) method has been successfully used in many projects and organizations to specify software requirements, surprisingly, its semantics is not well defined. The symbols used in this method are ambiguous, especially those that serve to denote SCR events. The aim of this work is to address this ambiguity and improve the SCR semantics by enabling events in first-order logic via two symbols pred and succ. This slight extension of first-order logic allows us to increase the readability of the SCR tables, eliminate their ambiguous semantics, facilitate the verification and validation process, and improve the toolset supporting the SCR method, just to name a few. Moreover, our extension is simple and avoids the complexity of temporal logic. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Improving the semantics of the Software Cost Reduction method", "paper_id": "WOS:000312521800009"}