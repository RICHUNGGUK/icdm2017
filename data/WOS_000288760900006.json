{"auto_keywords": [{"score": 0.010344606930571836, "phrase": "state_explosion_problems"}, {"score": 0.008132276402090794, "phrase": "accurate_verification"}, {"score": 0.007352704054589651, "phrase": "loupe"}, {"score": 0.00481495049065317, "phrase": "verifying_publish-subscribe"}, {"score": 0.0047310525657970615, "phrase": "magnifying_lens"}, {"score": 0.00440976345264104, "phrase": "dynamic_applications"}, {"score": 0.0041102032028337366, "phrase": "overall_federation"}, {"score": 0.00395069818358908, "phrase": "radically_different_features"}, {"score": 0.00376409764683147, "phrase": "message_reliability"}, {"score": 0.0035705347414368726, "phrase": "specific_guarantees"}, {"score": 0.00346223706087128, "phrase": "model_checking"}, {"score": 0.0032697235411641695, "phrase": "existing_solutions"}, {"score": 0.003198554193075258, "phrase": "underlying_communication_infrastructure"}, {"score": 0.00304737045343781, "phrase": "loupe_domain-specific_model_checker"}, {"score": 0.0028526276660691525, "phrase": "general-purpose_model_checker"}, {"score": 0.0027417911324611917, "phrase": "checking_engine"}, {"score": 0.0026352496813713292, "phrase": "modeling_language"}, {"score": 0.002544017922741882, "phrase": "loupe's_design"}, {"score": 0.0025106241866273897, "phrase": "dedicated_state_abstractions"}, {"score": 0.0023708980662168525, "phrase": "state-of-the-art_software_verification_tools"}, {"score": 0.002298902547676131, "phrase": "loupe's_current_implementation"}, {"score": 0.0022687189700002254, "phrase": "complete_case_study"}, {"score": 0.0021236300589450143, "phrase": "loupe's_performance"}, {"score": 0.0021049977753042253, "phrase": "alternative_approaches"}], "paper_keywords": ["Publish-subscribe", " verification", " model-checking"], "paper_abstract": "The Publish-Subscribe (P/S) communication paradigm fosters high decoupling among distributed components. This facilitates the design of dynamic applications, but also impacts negatively on their verification, making it difficult to reason on the overall federation of components. In addition, existing P/S infrastructures offer radically different features to the applications, e. g., in terms of message reliability. This further complicates the verification as its outcome depends on the specific guarantees provided by the underlying P/S system. Although model checking has been proposed as a tool for the verification of P/S architectures, existing solutions overlook many characteristics of the underlying communication infrastructure to avoid state explosion problems. To overcome these limitations, the Loupe domain-specific model checker adopts a different approach. The P/S infrastructure is not modeled on top of a general-purpose model checker. Instead, it is embedded within the checking engine, and the traditional P/S operations become part of the modeling language. In this paper, we describe Loupe's design and the dedicated state abstractions that enable accurate verification without incurring state explosion problems. We also illustrate our use of state-of-the-art software verification tools to assess some key functionality in Loupe's current implementation. A complete case study shows how Loupe eases the verification of P/S architectures. Finally, we quantitatively compare Loupe's performance against alternative approaches. The results indicate that Loupe is effective and efficient in enabling accurate verification of P/S architectures.", "paper_title": "Loupe: Verifying Publish-Subscribe Architectures with a Magnifying Lens", "paper_id": "WOS:000288760900006"}