{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_system"}, {"score": 0.004560568143816105, "phrase": "precise_domain_analysis"}, {"score": 0.004478782833067256, "phrase": "concrete_architecture"}, {"score": 0.004345706062641742, "phrase": "domain_model"}, {"score": 0.004267757384195032, "phrase": "sound_ontological_bases"}, {"score": 0.004116012194714212, "phrase": "wide_semantic_gap"}, {"score": 0.004042166795461166, "phrase": "conceptual_model"}, {"score": 0.003969640975997097, "phrase": "concrete_components"}, {"score": 0.0037597491055035895, "phrase": "semantic_gap"}, {"score": 0.003714629047818465, "phrase": "relevant_domain_concepts"}, {"score": 0.0035609154384221567, "phrase": "corresponding_architectural_abstractions"}, {"score": 0.0034135407979996673, "phrase": "concrete_software_components"}, {"score": 0.003312009953245191, "phrase": "crucial_role"}, {"score": 0.003174903873774882, "phrase": "related_architectural_abstractions"}, {"score": 0.0030069062905274976, "phrase": "space-related_abstractions"}, {"score": 0.002899861600151726, "phrase": "classical_software_engineering_principles"}, {"score": 0.002680789041160613, "phrase": "operational_definition"}, {"score": 0.002616762777413686, "phrase": "basic_abstractions"}, {"score": 0.0025235718883452585, "phrase": "architectural_aspects"}, {"score": 0.0024632912250657636, "phrase": "underlying_software_engineering_principles"}, {"score": 0.002318799760022913, "phrase": "space_ontologies"}, {"score": 0.002222717552124615, "phrase": "proposed_space_architectural_abstractions"}, {"score": 0.0021049977753042253, "phrase": "ontological_terms"}], "paper_keywords": [""], "paper_abstract": "The Success of a software system strongly depends on the ability Of turning a precise domain analysis into a concrete architecture. Even if the domain model relies on sound ontological bases, there is often a wide semantic gap between the conceptual model and the concrete components that should reify it. To fill the semantic gap, relevant domain concepts should be engineered by identifying the corresponding architectural abstractions, which can be realized by concrete software components. Space plays a crucial role in many application domains, but Surprisingly, related architectural abstractions have not emerged yet. This paper proposes space-related abstractions derived from the application of classical software engineering principles; in particular, the information hiding principle that leads to an operational definition of space. Basic abstractions are refined to deal with architectural aspects. As the underlying software engineering principles are close to principles that underlie the definition of space ontologies, the conjecture is that the proposed space architectural abstractions might be the basis for a formalization in ontological terms.", "paper_title": "Engineering spatial concepts", "paper_id": "WOS:000265069000006"}