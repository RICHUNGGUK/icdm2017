{"auto_keywords": [{"score": 0.038515537897419426, "phrase": "mst"}, {"score": 0.011899656099249334, "phrase": "average_size"}, {"score": 0.00481495049065317, "phrase": "short_advice"}, {"score": 0.00474075475474847, "phrase": "recently_introduced_advising_scheme_framework"}, {"score": 0.004653220443592979, "phrase": "locally_distributively_computing"}, {"score": 0.004345804626592329, "phrase": "possible_input"}, {"score": 0.0035507457285983268, "phrase": "weighted_graph"}, {"score": 0.0034420211080526094, "phrase": "rooted_mst_t"}, {"score": 0.0032546105164772995, "phrase": "local_port_number"}, {"score": 0.0031549249117721946, "phrase": "mst_t"}, {"score": 0.002829398149759802, "phrase": "mst."}, {"score": 0.002759823989317719, "phrase": "constant_number"}, {"score": 0.0025932659540059875, "phrase": "arbitrary_graph"}, {"score": 0.002131383155056741, "phrase": "constant_average_size"}], "paper_keywords": ["Minimum spanning tree", " Distributed algorithm", " Local computation"], "paper_abstract": "We use the recently introduced advising scheme framework for measuring the difficulty of locally distributively computing a Minimum Spanning Tree (MST). An (m,t)-advising scheme for a distributed problem P is a way, for every possible input I of P, to provide an \"advice\" (i.e., a bit string) about I to each node so that: (1) the maximum size of the advices is at most m bits, and (2) the problem P can be solved distributively in at most t rounds using the advices as inputs. In case of MST, the output returned by each node of a weighted graph G is the edge leading to its parent in some rooted MST T of G. Clearly, there is a trivial ([log n], 0)-advising scheme for MST (each node is given the local port number of the edge leading to the root of some MST T), and it is known that any (0, t)-advising scheme satisfies t >= (Omega) over bar(root n). Our main result is the construction of an (O(1), O(log n))-advising scheme for MST. That is, by only giving a constant number of bits of advice to each node, one can decrease exponentially the distributed computation time of MST in arbitrary graph, compared to algorithms dealing with the problem in absence of any a priori information. We also consider the average size of the advices. On the one hand, we show that any (m, 0)-advising scheme for MST gives advices of average size Omega (log n). On the other hand we design an (m, 1)-advising scheme for MST with advices of constant average size, that is one round is enough to decrease the average size of the advices from log n to constant.", "paper_title": "Local MST Computation with Short Advice", "paper_id": "WOS:000281684900006"}