{"auto_keywords": [{"score": 0.04549657143943838, "phrase": "php."}, {"score": 0.010928492459810263, "phrase": "palsberg"}, {"score": 0.00481495049065317, "phrase": "tainted_variable_attacks"}, {"score": 0.004769182299692333, "phrase": "tainted_flow_attacks"}, {"score": 0.0047013405841819025, "phrase": "program_inputs"}, {"score": 0.00459039896577789, "phrase": "software_vulnerabilities"}, {"score": 0.004439445472040688, "phrase": "server-side_scripting_languages"}, {"score": 0.004272969980602508, "phrase": "orbaek"}, {"score": 0.0036669760226536977, "phrase": "program_variables"}, {"score": 0.0036147562669032957, "phrase": "similar_algorithm"}, {"score": 0.0034790978593553794, "phrase": "pixy_tool"}, {"score": 0.003222814590544802, "phrase": "bodik_et_al"}, {"score": 0.003176899769744057, "phrase": "extended_static_single_assignment"}, {"score": 0.0030285084113651035, "phrase": "e-ssa_form"}, {"score": 0.0028187792953857957, "phrase": "sparse_dataflow_analysis"}, {"score": 0.002699960312990493, "phrase": "state-of-the-art_dataflow_solution"}, {"score": 0.0025614999929672, "phrase": "well_known_php_programs"}, {"score": 0.0024301229420875155, "phrase": "dataflow_algorithm"}, {"score": 0.002406968743305622, "phrase": "larger_inputs"}, {"score": 0.0023388183537341213, "phrase": "new_bugs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Tainted flow analysis", " Security vulnerability", " Static analysis"], "paper_abstract": "Tainted flow attacks originate from program inputs maliciously crafted to exploit software vulnerabilities. These attacks are common in server-side scripting languages, such as PHP. In 1997, Orbaek and Palsberg formalized the problem of detecting these exploits as an instance of type-checking, and gave an O(V-3) algorithm to solve it, where V is the number of program variables. A similar algorithm was, ten years later, implemented on the Pixy tool. In this paper we give an O(V-2) solution to the same problem. Our solution uses Bodik et al.'s extended Static Single Assignment (e-SSA) program representation. The e-SSA form can be efficiently computed and it enables us to solve the problem via a sparse dataflow analysis. Using the same infrastructure, we compared a state-of-the-art dataflow solution with our technique. Both approaches have detected 36 vulnerabilities in well known PHP programs. Our results show that our approach tends to outperform the dataflow algorithm for larger inputs. We have reported the new bugs that we found, and an implementation of our algorithm is publicly available at https://github.com/rimsa/tainted-phc.git. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient static checker for tainted variable attacks", "paper_id": "WOS:000329887000007"}