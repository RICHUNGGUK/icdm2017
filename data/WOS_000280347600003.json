{"auto_keywords": [{"score": 0.05007837343017578, "phrase": "web_applications"}, {"score": 0.029252683765316524, "phrase": "apollo"}, {"score": 0.0047588556219929756, "phrase": "dynamic_test_generation"}, {"score": 0.00470341117804131, "phrase": "explicit-state"}, {"score": 0.004594443767709888, "phrase": "web_script_crashes"}, {"score": 0.00454090611248773, "phrase": "malformed_dynamically_generated_webpages"}, {"score": 0.004183137595671171, "phrase": "current_tools"}, {"score": 0.004134372859330047, "phrase": "webpage_validation"}, {"score": 0.004014923642015515, "phrase": "dynamically_generated_pages"}, {"score": 0.0038989120088094185, "phrase": "today's_internet"}, {"score": 0.0037862398004482253, "phrase": "dynamic_test_generation_technique"}, {"score": 0.003676811616723809, "phrase": "dynamic_web_applications"}, {"score": 0.0035496495489801667, "phrase": "combined_concrete_and_symbolic_execution"}, {"score": 0.0035082436540296406, "phrase": "explicit-state_model_checking"}, {"score": 0.0032697235411641695, "phrase": "logical_constraints"}, {"score": 0.0029766550209309127, "phrase": "resulting_bug_reports"}, {"score": 0.0028069426877159664, "phrase": "underlying_faults"}, {"score": 0.0026624684547385718, "phrase": "php_programming_language"}, {"score": 0.002600661525224505, "phrase": "test_inputs"}, {"score": 0.002555247330102505, "phrase": "web_application"}, {"score": 0.002326068563512387, "phrase": "html_specification"}, {"score": 0.002258745901862197, "phrase": "apollo's_algorithms"}, {"score": 0.0021049977753042253, "phrase": "six_php_web_applications"}], "paper_keywords": ["Software testing", " Web applications", " dynamic analysis", " PHP", " reliability", " verification"], "paper_abstract": "Web script crashes and malformed dynamically generated webpages are common errors, and they seriously impact the usability of Web applications. Current tools for webpage validation cannot handle the dynamically generated pages that are ubiquitous on today's Internet. We present a dynamic test generation technique for the domain of dynamic Web applications. The technique utilizes both combined concrete and symbolic execution and explicit-state model checking. The technique generates tests automatically, runs the tests capturing logical constraints on inputs, and minimizes the conditions on the inputs to failing tests so that the resulting bug reports are small and useful in finding and fixing the underlying faults. Our tool Apollo implements the technique for the PHP programming language. Apollo generates test inputs for a Web application, monitors the application for crashes, and validates that the output conforms to the HTML specification. This paper presents Apollo's algorithms and implementation, and an experimental evaluation that revealed 673 faults in six PHP Web applications.", "paper_title": "Finding Bugs in Web Applications Using Dynamic Test Generation and Explicit-State Model Checking", "paper_id": "WOS:000280347600003"}