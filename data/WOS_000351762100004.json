{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "clark's_completion_semantics"}, {"score": 0.00433200902751133, "phrase": "general_logic_programs"}, {"score": 0.0028100102841877835, "phrase": "additional_restrictions"}, {"score": 0.0026268961477241026, "phrase": "logic_programming"}, {"score": 0.0024088451312725924, "phrase": "underlying_first-order_language"}, {"score": 0.0021049977753042253, "phrase": "monadic_general_programs"}], "paper_keywords": ["monadic programs", " general programs", " Clark's completion", " decidability"], "paper_abstract": "There are many different semantics for general logic programs (i.e. programs that use negation in the bodies of clauses). Most of these semantics are Turing complete (in a sense that can be made precise), implying that they are undecidable. To obtain decidability one needs to put additional restrictions on programs and queries. In logic programming it is natural to put restrictions on the underlying first-order language. In this note, we show the decidability of the Clark's completion semantics for monadic general programs and queries.", "paper_title": "Decidability of the Clark's completion semantics for monadic programs and queries", "paper_id": "WOS:000351762100004"}