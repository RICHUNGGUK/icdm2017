{"auto_keywords": [{"score": 0.03699505512791171, "phrase": "polus"}, {"score": 0.007621853186516631, "phrase": "relaxed_consistency_model"}, {"score": 0.00481495049065317, "phrase": "dynamic_software_updating"}, {"score": 0.0043875257506180865, "phrase": "close_vulnerabilities"}, {"score": 0.004188198923320451, "phrase": "new_features"}, {"score": 0.0038558497470953306, "phrase": "multithreaded_applications"}, {"score": 0.0037965243835456214, "phrase": "data_structure_changes"}, {"score": 0.0036616109902631293, "phrase": "binary_compatibility"}, {"score": 0.0036052633308076933, "phrase": "nonnegligible_performance_overhead"}, {"score": 0.0033190180867511605, "phrase": "unmodified_multithreaded_software"}, {"score": 0.0032848684681050745, "phrase": "newer_versions"}, {"score": 0.003168079471049896, "phrase": "main_idea"}, {"score": 0.0030239842475439814, "phrase": "concurrent_activity"}, {"score": 0.002977419551510206, "phrase": "old_and_new_code"}, {"score": 0.0028715299874549245, "phrase": "cache-coherence_protocol"}, {"score": 0.002769395841379498, "phrase": "\"bidirectional_write-through\"_synchronization_protocol"}, {"score": 0.0023834640793589414, "phrase": "apache_http"}, {"score": 0.0023467391904246834, "phrase": "performance_measurements"}, {"score": 0.002286781334850213, "phrase": "negligible_runtime_overhead"}], "paper_keywords": ["Maintainability", " reliability", " runtime environments"], "paper_abstract": "Software is inevitably subject to changes. There are patches and upgrades that close vulnerabilities, fix bugs, and evolve software with new features. Unfortunately, most traditional dynamic software updating approaches suffer some level of limitations; few of them can update multithreaded applications when involving data structure changes, while some of them lose binary compatibility or incur nonnegligible performance overhead. This paper presents POLUS, a software maintenance tool capable of iteratively evolving running unmodified multithreaded software into newer versions, yet with very low performance overhead. The main idea in POLUS is a relaxed consistency model that permits the concurrent activity of the old and new code. POLUS borrows the idea of cache-coherence protocol in computer architecture and uses a \"bidirectional write-through\" synchronization protocol to ensure system consistency. To demonstrate the applicability of POLUS, we report our experience in using POLUS to dynamically update three prevalent server applications: vsftpd, sshd, and Apache HTTP server. Performance measurements show that POLUS incurs negligible runtime overhead on the three applications-a less than 1 percent performance degradation ( but 5 percent for one case). The time to apply an update is also minimal.", "paper_title": "Dynamic Software Updating Using a Relaxed Consistency Model", "paper_id": "WOS:000295162900005"}