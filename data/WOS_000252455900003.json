{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "crosscutting_concerns"}, {"score": 0.004595529592539951, "phrase": "aspect_mining"}, {"score": 0.00450456611645112, "phrase": "reverse_engineering_process"}, {"score": 0.004299228562179176, "phrase": "existing_systems"}, {"score": 0.004130660282810338, "phrase": "aspect_mining_approach"}, {"score": 0.003427032390942116, "phrase": "crosscutting_functionality"}, {"score": 0.0029988599391845517, "phrase": "site_analysis"}, {"score": 0.002842920225545139, "phrase": "interactive_process"}, {"score": 0.0027680095380207756, "phrase": "eclipse_plug-in"}, {"score": 0.0022057677637040396, "phrase": "aspect-oriented_literature"}, {"score": 0.0021049977753042253, "phrase": "significant_number"}], "paper_keywords": ["design", " experimentation", " languages", " measurement", " aspect-oriented programming", " reverse engineering", " crosscutting concerns", " fan-in metric"], "paper_abstract": "Aspect mining is a reverse engineering process that aims at finding crosscutting concerns in existing systems. This article proposes an aspect mining approach based on determining methods that are called from many different places, and hence have a high fan-in, which can be seen as a symptom of crosscutting functionality. The approach is semiautomatic, and consists of three steps: metric calculation, method filtering, and call site analysis. Carrying out these steps is an interactive process supported by an Eclipse plug-in called FINT. Fan-in analysis has been applied to three open source Java systems, totaling around 200,000 lines of code. The most interesting concerns identified are discussed in detail, which includes several concerns not previously discussed in the aspect-oriented literature. The results show that a significant number of crosscutting concerns can be recognized using fan-in analysis, and each of the three steps can be supported by tools.", "paper_title": "Identifying crosscutting concerns using fan-in analysis", "paper_id": "WOS:000252455900003"}