{"auto_keywords": [{"score": 0.032947996879075854, "phrase": "shared_main_memory"}, {"score": 0.027033423104758682, "phrase": "scc."}, {"score": 0.00481495049065317, "phrase": "parallel_programming_models"}, {"score": 0.004763785973620115, "phrase": "intel_scc_many-core_processor"}, {"score": 0.0046797114400479135, "phrase": "parallel_processing"}, {"score": 0.004515967518891287, "phrase": "traditional_multicore_system"}, {"score": 0.004467965784278827, "phrase": "single_operating_system"}, {"score": 0.0042354707960660706, "phrase": "hardware-implemented_cache_coherence_protocols"}, {"score": 0.004015025120733852, "phrase": "increasing_chip_complexity"}, {"score": 0.003916098498242888, "phrase": "cache_coherence_protocols"}, {"score": 0.003819599991449801, "phrase": "future_many-core_systems"}, {"score": 0.003752126270661821, "phrase": "hardware-based_cache_coherency"}, {"score": 0.003685840071638243, "phrase": "software-oriented_message-passing_based_architecture"}, {"score": 0.003633652174971415, "phrase": "so-called_cluster-on-chip_architecture"}, {"score": 0.0036078784322488757, "phrase": "intel"}, {"score": 0.003544088803300751, "phrase": "cloud_computer"}, {"score": 0.003265032694822325, "phrase": "scc"}, {"score": 0.003083899825125453, "phrase": "strict_manner"}, {"score": 0.002912803994461996, "phrase": "concurrent_manner"}, {"score": 0.0028006988338192375, "phrase": "cache_coherency"}, {"score": 0.002635850034826311, "phrase": "low-level_software"}, {"score": 0.0025073851194697397, "phrase": "scc-customized_mpi_library"}, {"score": 0.002480680078868508, "phrase": "scc-mpich"}, {"score": 0.0024281181691350085, "phrase": "shared_virtual_memory_system"}, {"score": 0.0022770057597574734, "phrase": "programming_models"}, {"score": 0.0021582723621960693, "phrase": "scc's_many-core_architecture"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["many-core", " non-cache-coherent shared-memory", " message-passing", " shared virtual memory", " MPI", " SCC"], "paper_abstract": "Since the beginning of the multicore era, parallel processing has become prevalent across the board. On a traditional multicore system, a single operating system manages all cores and schedules threads and processes among them, inherently supported by hardware-implemented cache coherence protocols. However, a further growth of the number of cores per system implies an increasing chip complexity, especially with respect to the cache coherence protocols. Therefore, a very attractive alternative for future many-core systems is to waive the hardware-based cache coherency and to introduce a software-oriented message-passing based architecture instead: a so-called Cluster-on-Chip architecture. Intel's Single-chip Cloud Computer (SCC), a many-core research processor with 48 non-coherent memory-coupled cores, is a very recent example for such a cluster-on-chip architecture. The SCC can be configured to run one operating system instance per core by partitioning the shared main memory in a strict manner. However, it is also possible to access the shared main memory in an unsplit and concurrent manner, provided that either the caches are disabled or the cache coherency is then ensured by software. In this article, we detail our experiences gained while developing low-level software for message-passing and shared-memory programming on the SCC. We present an SCC-customized MPI library (called SCC-MPICH) as well as a shared virtual memory system (called MetalSVM) for the SCC. In doing so, we evaluate the potential of both programming models and we show how these models can be improved especially with respect to the SCC's many-core architecture. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "New system software for parallel programming models on the Intel SCC many-core processor", "paper_id": "WOS:000355001700004"}