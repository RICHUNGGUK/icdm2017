{"auto_keywords": [{"score": 0.049298477109555164, "phrase": "data_races"}, {"score": 0.014084370977471517, "phrase": "synchronization_operations"}, {"score": 0.012929433989272697, "phrase": "data-centric_synchronization"}, {"score": 0.01134694154539863, "phrase": "atomic_set"}, {"score": 0.008988274848883015, "phrase": "atomic_sets"}, {"score": 0.00481495049065317, "phrase": "concurrency-related_errors"}, {"score": 0.004527024978801684, "phrase": "large_object-oriented_programs"}, {"score": 0.004344662696228875, "phrase": "instruction_sequences"}, {"score": 0.0039040344230094164, "phrase": "alternative_approach"}, {"score": 0.0037621210719690594, "phrase": "language_implementation"}, {"score": 0.0037312893857519803, "phrase": "data-centric_synchronization_groups_fields"}, {"score": 0.0030123335878664064, "phrase": "java_programming_language"}, {"score": 0.0029509483926257645, "phrase": "data-centric_concurrency_control"}, {"score": 0.0028086649378423357, "phrase": "type_system"}, {"score": 0.0027741761880779535, "phrase": "separate_compilation"}, {"score": 0.0027064605585684696, "phrase": "multiple_objects"}, {"score": 0.002651291854234327, "phrase": "full_encapsulation"}, {"score": 0.0025338369486914364, "phrase": "standard_libraries"}, {"score": 0.00245168871716047, "phrase": "multithreaded_benchmarks"}, {"score": 0.002295277579105179, "phrase": "low_annotation_overhead"}, {"score": 0.0021845387990972543, "phrase": "specjbb_benchmark"}, {"score": 0.0021576973674470997, "phrase": "acceptable_performance"}, {"score": 0.0021049977753042253, "phrase": "modest_amount"}], "paper_keywords": ["Concurrent object-oriented programming", " data races", " serializability", " programming model"], "paper_abstract": "Concurrency-related errors, such as data races, are frustratingly difficult to track down and eliminate in large object-oriented programs. Traditional approaches to preventing data races rely on protecting instruction sequences with synchronization operations. Such control-centric approaches are inherently brittle, as the burden is on the programmer to ensure that all concurrently accessed memory locations are consistently protected. Data-centric synchronization is an alternative approach that offloads some of the work on the language implementation. Data-centric synchronization groups fields of objects into atomic sets to indicate that these fields must always be updated atomically. Each atomic set has associated units of work, that is, code fragments that preserve the consistency of that atomic set. Synchronization operations are added automatically by the compiler. We present an extension to the Java programming language that integrates annotations for data-centric concurrency control. The resulting language, called AJ, relies on a type system that enables separate compilation and supports atomic sets that span multiple objects and that also supports full encapsulation for more efficient code generation. We evaluate our proposal by refactoring classes from standard libraries, as well as a number of multithreaded benchmarks, to use atomic sets. Our results suggest that data-centric synchronization is easy to use and enjoys low annotation overhead, while successfully preventing data races. Moreover, experiments on the SPECjbb benchmark suggest that acceptable performance can be achieved with a modest amount of tuning.", "paper_title": "A Data-Centric Approach to Synchronization", "paper_id": "WOS:000303333300004"}