{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "architecture_aware_semi"}, {"score": 0.004767261858417823, "phrase": "real-time_scheduling"}, {"score": 0.004558414405811025, "phrase": "embedded_systems"}, {"score": 0.004402295697276237, "phrase": "increasing_amounts"}, {"score": 0.004358676214574977, "phrase": "computational_power"}, {"score": 0.0041469500929423595, "phrase": "powerful_and_scalable_multicore_architectures"}, {"score": 0.0040449598280454645, "phrase": "multicore_architectures"}, {"score": 0.0040048667115255, "phrase": "on-chip_memory_hierarchies"}, {"score": 0.003829290275367182, "phrase": "real-time_systems"}, {"score": 0.0037350832473790007, "phrase": "task_scheduling"}, {"score": 0.0036980501827538455, "phrase": "semi-partitioned_scheduling_algorithms"}, {"score": 0.0032164136388931805, "phrase": "remaining_tasks"}, {"score": 0.0031061129850110994, "phrase": "pre-specified_manner"}, {"score": 0.002925728709297618, "phrase": "runtime_migration_overhead"}, {"score": 0.002544422946205545, "phrase": "predictable_semi-partitioned_scheduling_algorithm"}, {"score": 0.0025191653363555193, "phrase": "independent_hard-real-time_sporadic_tasks"}, {"score": 0.0023846534541336326, "phrase": "cache_migration"}, {"score": 0.0023143284925318916, "phrase": "semi-partitioned_scheduling_algorithm"}, {"score": 0.0021907299375981356, "phrase": "initial_partitioning_phase"}, {"score": 0.002168975681697056, "phrase": "simulation_results"}, {"score": 0.0021049977753042253, "phrase": "proposed_schemes"}], "paper_keywords": ["Real-time scheduling", " Semi-partitioned", " Multi-core"], "paper_abstract": "As real-time embedded systems integrate more and more functionality, they are demanding increasing amounts of computational power that can only be met by deploying them on powerful and scalable multicore architectures. The use of multicore architectures with on-chip memory hierarchies and shared communication infrastructure in the context of real-time systems poses several challenges for task scheduling. Semi-partitioned scheduling algorithms form a middle ground between the two extreme approaches, namely global and partitioned scheduling. In such an algorithm, a subset of tasks are partitioned onto cores and the remaining tasks are allowed to migrate in a pre-specified manner. By making most tasks non-migrating (partitioned), runtime migration overhead is minimized. On the other hand, by allowing some tasks to migrate among cores, schedulability is improved. In this paper, we present a predictable semi-partitioned scheduling algorithm for independent hard-real-time sporadic tasks executing on homogeneous multicore platforms using cache locking and locked cache migration. As part of the semi-partitioned scheduling algorithm, we propose two different task ordering schemes and two different schemes for the initial partitioning phase. Simulation results demonstrate the effectiveness of the proposed schemes in comparison to existing state-of-the-art techniques.", "paper_title": "Architecture aware semi partitioned real-time scheduling on multicore platforms", "paper_id": "WOS:000355766400003"}