{"auto_keywords": [{"score": 0.033719857443811355, "phrase": "sdm"}, {"score": 0.00481495049065317, "phrase": "domain_modeling"}, {"score": 0.004744018246633455, "phrase": "domain_model"}, {"score": 0.004628101576367193, "phrase": "common_knowledge"}, {"score": 0.0045599093158915326, "phrase": "possible_variability"}, {"score": 0.003989487818395848, "phrase": "trivial_task"}, {"score": 0.0033545600622020464, "phrase": "draft_domain_models"}, {"score": 0.003114283314285167, "phrase": "application_models"}, {"score": 0.0029199689963238726, "phrase": "sound_draft_domain_models"}, {"score": 0.0026973310437053573, "phrase": "different_elements"}, {"score": 0.002454835845644037, "phrase": "structural_and_behavioral_aspects"}, {"score": 0.0023593563827190626, "phrase": "small_repositories"}, {"score": 0.002336071138145897, "phrase": "project_management_applications"}, {"score": 0.0023130151703068444, "phrase": "scheduling_systems"}, {"score": 0.002212040873849046, "phrase": "reasonable_draft_domain_models"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Domain engineering", " Product line engineering", " Domain analysis", " Metamodeling", " UML", " DSL"], "paper_abstract": "A domain model, which captures the common knowledge and the possible variability allowed among applications in a domain, may assist in the creation of other valid applications in that domain. However, to create such domain models is not a trivial task: it requires expertise in the domain, reaching a very high level of abstraction, and providing flexible, yet formal, artifacts. In this paper an approach, called Semi-automated Domain Modeling (SDM), to create draft domain models from applications in those domains, is presented. SDM takes a repository of application models in a domain and matches, merges, and generalizes them into sound draft domain models that include the commonality and variability allowed in these domains. The similarity of the different elements is measured, with consideration of syntactic, semantic, and structural aspects. Unlike ontology and schema integration, these models capture both structural and behavioral aspects of the domain. Running SDM on small repositories of project management applications and scheduling systems, we found that the approach may provide reasonable draft domain models, whose comprehensibility, correctness, completeness, and consistency levels are satisfactory. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Towards automatization of domain modeling", "paper_id": "WOS:000277105400005"}