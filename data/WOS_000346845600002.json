{"auto_keywords": [{"score": 0.040650574499495426, "phrase": "one-pass_algorithm"}, {"score": 0.00481495049065317, "phrase": "well-parenthesized_expressions"}, {"score": 0.0047732596509542135, "phrase": "streaming_model."}, {"score": 0.004718230196581402, "phrase": "concrete_problem"}, {"score": 0.004491313367627919, "phrase": "computational_complexity"}, {"score": 0.0044653418703126365, "phrase": "formal_languages"}, {"score": 0.004337710093279712, "phrase": "matching_parentheses"}, {"score": 0.004287680323820891, "phrase": "different_types"}, {"score": 0.0042015068508885044, "phrase": "one-pass_randomized_streaming_algorithm"}, {"score": 0.0037958359268041426, "phrase": "log_n_factor"}, {"score": 0.003752032410115961, "phrase": "two-sided_error"}, {"score": 0.00367658459781873, "phrase": "space_requirement"}, {"score": 0.003581797255879607, "phrase": "input_stream"}, {"score": 0.0035097605605135473, "phrase": "two-pass_randomized_streaming_algorithm"}, {"score": 0.0033602211267167435, "phrase": "one-sided_error"}, {"score": 0.0033214277952293533, "phrase": "second_pass"}, {"score": 0.0032830808525570903, "phrase": "reverse_direction"}, {"score": 0.003097865379563127, "phrase": "suitable_notion"}, {"score": 0.0030532127006946907, "phrase": "streaming_model"}, {"score": 0.0029230682201865734, "phrase": "resource_requirements"}, {"score": 0.002855934865505357, "phrase": "lower_bound"}, {"score": 0.0028229469652714507, "phrase": "hard_instances"}, {"score": 0.0024201029474586007, "phrase": "\"information_cost\"_approach"}, {"score": 0.0023507916951658455, "phrase": "direct_sum_result"}, {"score": 0.002303455608777205, "phrase": "two-player_protocol"}, {"score": 0.002290133124891702, "phrase": "mountain"}, {"score": 0.002192418237185872, "phrase": "communication_complexity"}, {"score": 0.0021049977753042253, "phrase": "mountain."}], "paper_keywords": ["streaming algorithms", " communication complexity", " information cost", " Dyck languages", " well-parenthesized expressions"], "paper_abstract": "Motivated by a concrete problem and with the goal of understanding the relationship between the complexity of streaming algorithms and the computational complexity of formal languages, we investigate the problem DYCK(s) of checking matching parentheses, with s different types of parentheses. We present a one-pass randomized streaming algorithm for DYCK(2) with space of O(root n log n) bits, time per letter polylog(n), and one-sided error. We prove that this one-pass algorithm is optimal, up to a log n factor, even when two-sided error is allowed. Surprisingly, the space requirement shrinks drastically if we have access to the input stream in reverse. We present a two-pass randomized streaming algorithm for DYCK(2) with space of O((log n)(2)), time polylog(n) and one-sided error, where the second pass is in the reverse direction. Both algorithms can be extended to DYCK(s) since this problem is reducible to DYCK(2) for a suitable notion of reduction in the streaming model. Except for an extra O(root log s) multiplicative overhead in the space required in the one-pass algorithm, the resource requirements are of the same order. For the lower bound, we exhibit hard instances ASCENSION(m) of DYCK(2) with length in Theta(mn). We embed these in what we call a \"one-pass\" communication problem with 2m-players, where m is an element of(O) over bar (n). To establish the hardness of ASCENSION(m), we follow the \"information cost\" approach, but with a few twists. We prove a direct sum result that reduces ASCENSION(m) to a two-player protocol for MOUNTAIN, which is in fact a variant of INDEX, a fundamental problem in communication complexity. We finish the argument with a new information cost lower bound for MOUNTAIN.", "paper_title": "RECOGNIZING WELL-PARENTHESIZED EXPRESSIONS IN THE STREAMING MODEL", "paper_id": "WOS:000346845600002"}