{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "web_search_engines"}, {"score": 0.00466877910546307, "phrase": "crucial_performance_component"}, {"score": 0.004611554879923759, "phrase": "large-scale_web_search_engines"}, {"score": 0.004256243266481051, "phrase": "processing_workloads"}, {"score": 0.004204054047427536, "phrase": "backend_search_clusters"}, {"score": 0.003976978140059542, "phrase": "multi-level_static_cache_architecture"}, {"score": 0.0039040344230094164, "phrase": "five_different_item_types"}, {"score": 0.0037854112749311844, "phrase": "precomputed_scores"}, {"score": 0.003738973626996355, "phrase": "posting_lists"}, {"score": 0.003693103542455806, "phrase": "precomputed_intersections"}, {"score": 0.0034083145672246067, "phrase": "greedy_heuristic"}, {"score": 0.003145417398038261, "phrase": "items'_past_access_frequencies"}, {"score": 0.0030123335878664064, "phrase": "storage_overheads"}, {"score": 0.002831894638104635, "phrase": "individual_items"}, {"score": 0.002678734566245688, "phrase": "particular_item"}, {"score": 0.0023819914954155905, "phrase": "realistic_assumptions"}, {"score": 0.002323826502178581, "phrase": "proposed_heuristic"}, {"score": 0.002239225269052105, "phrase": "entire_cache_space"}, {"score": 0.0022117133940361025, "phrase": "particular_item_types"}, {"score": 0.0021845387990972543, "phrase": "fixed_proportions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Web search engines", " Static caching", " Query processing"], "paper_abstract": "Caching is a crucial performance component of large-scale web search engines, as it greatly helps reducing average query response times and query processing workloads on backend search clusters. In this paper, we describe a multi-level static cache architecture that stores five different item types: query results, precomputed scores, posting lists, precomputed intersections of posting lists, and documents. Moreover, we propose a greedy heuristic to prioritize items for caching, based on gains computed by using items' past access frequencies, estimated computational costs, and storage overheads. This heuristic takes into account the inter-dependency between individual items when making its caching decisions, i.e., after a particular item is cached, gains of all items that are affected by this decision are updated. Our simulations under realistic assumptions reveal that the proposed heuristic performs better than dividing the entire cache space among particular item types at fixed proportions. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "A five-level static cache architecture for web search engines", "paper_id": "WOS:000307682100003"}