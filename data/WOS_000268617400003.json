{"auto_keywords": [{"score": 0.039150156501511525, "phrase": "single_arithmetic_progression"}, {"score": 0.00481495049065317, "phrase": "standard_sturmian_words"}, {"score": 0.0046797114400479135, "phrase": "simple_algorithm"}, {"score": 0.004574247691703376, "phrase": "explicitly_given_input_string_pat"}, {"score": 0.004370402235030111, "phrase": "sturmian"}, {"score": 0.003193606324727067, "phrase": "don't_care_symbol"}, {"score": 0.0025561788724870974, "phrase": "fast_computations"}, {"score": 0.0024560114164181765, "phrase": "compressed_form"}, {"score": 0.0023329572140896237, "phrase": "sturmian_word"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Sturmian words", " String-matching", " Linear time", " Lexicographic numeration property"], "paper_abstract": "We present a simple algorithm which for an explicitly given input string pat (a pattern) and a standard Sturmian word x described by the recurrences of size n computes, in time O(|pat| + n), the set of all occurrences of pat in x as a single arithmetic progression (modulo the length of x). The algorithm can be extended to the case when some letters of the pattern are replaced by a don't care symbol. In this case the set of all occurrences does not need to be a single arithmetic progression and our algorithm produces linearly many (with respect to the size of pat) arithmetic progressions. It is an example of fast computations for the input given in a compressed form. in our special case the length of the standard Sturmian word x is usually exponential with respect to the size of the input. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Compressed string-matching in standard Sturmian words", "paper_id": "WOS:000268617400003"}