{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "recent_works"}, {"score": 0.004768649568826951, "phrase": "self-adaptivity_use"}, {"score": 0.004587835274176236, "phrase": "adaptation_mechanisms"}, {"score": 0.004543708337879809, "phrase": "meta-level_information"}, {"score": 0.004392565073466714, "phrase": "application_code"}, {"score": 0.004350308086118336, "phrase": "current_solutions"}, {"score": 0.004287680323820891, "phrase": "individual_life-cycle_phases"}, {"score": 0.004125027493339274, "phrase": "easy_integration"}, {"score": 0.003799509133780117, "phrase": "new_adaptive_behavior"}, {"score": 0.0037267132967205136, "phrase": "self-adapting_systems"}, {"score": 0.0033667304423940893, "phrase": "middleware_managed_adaptation"}, {"score": 0.003100865267124765, "phrase": "middleware_services"}, {"score": 0.0030267296900520217, "phrase": "behavioral_requirements"}, {"score": 0.002954361295811154, "phrase": "service_life-time"}, {"score": 0.002855934865505357, "phrase": "mirror-based_reflection"}, {"score": 0.0023990982005125763, "phrase": "developer's_knowledge"}, {"score": 0.0023079225317714815, "phrase": "different_contexts"}, {"score": 0.0021254913611527455, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "self-adaptive_behaviors"}], "paper_keywords": [""], "paper_abstract": "Recent works on self-adaptivity use a middleware-based approach where the adaptation mechanisms and meta-level information are separated and externalized from the application code. Current solutions generally target individual life-cycle phases of an application in isolation, preventing easy integration of design-time and run-time adaptability. Integration is needed in order to support the introduction of new adaptive behavior during run-time. Self-adapting systems therefore need to support both planning, instantiation and maintenance of applications throughout their life-time. In this paper we propose middleware managed adaptation, in which services axe specified by their behavior, and planned, instantiated and maintained by middleware services in such a way that the behavioral requirements are satisfied throughout the service life-time. Central to this approach is mirror-based reflection, which supports introspection and intercession on an application, or any service, through all the phases of its life-cycle, including pre-runtime. The mirror of a service may contain information about its implementation, including the developer's knowledge about how this implementation will perform in different contexts. By making this knowledge available to the middleware, we facilitate the implementation of a wide range of self-adaptive behaviors.", "paper_title": "Self-adaptive systems: A middleware managed approach", "paper_id": "WOS:000239454400002"}