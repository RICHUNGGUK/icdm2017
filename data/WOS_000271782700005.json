{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multiple_event-driven_continuous_queries"}, {"score": 0.04023450011846106, "phrase": "common_subexpressions"}, {"score": 0.004647105813224402, "phrase": "advanced_use"}, {"score": 0.004600228893803583, "phrase": "streaming_data"}, {"score": 0.004553822674247401, "phrase": "efficient_execution"}, {"score": 0.004507882471601552, "phrase": "continuous_queries"}, {"score": 0.0044398358177815305, "phrase": "important_research_issue"}, {"score": 0.004306795240631196, "phrase": "event-driven_continuous_queries"}, {"score": 0.004198965651975536, "phrase": "foreign_events"}, {"score": 0.004135562737140424, "phrase": "data_arrival"}, {"score": 0.003991305899593133, "phrase": "existing_approaches"}, {"score": 0.00395101799538683, "phrase": "multiple_continuous_query_optimization"}, {"score": 0.0038913443732432468, "phrase": "optimal_query_plan"}, {"score": 0.003736567662016446, "phrase": "event-driven_queries"}, {"score": 0.00349803055484394, "phrase": "small_interval"}, {"score": 0.003341839487905525, "phrase": "completely_different_timings"}, {"score": 0.003241593463066851, "phrase": "efficient_data_stream_processing_scheme"}, {"score": 0.0029735479904284675, "phrase": "flexible_way"}, {"score": 0.002928594036918225, "phrase": "common_operators"}, {"score": 0.0028551716387011637, "phrase": "unpredictable_events"}, {"score": 0.002727606388863445, "phrase": "intermediate_result"}, {"score": 0.0026057256900479026, "phrase": "cache_area"}, {"score": 0.0023301793939902015, "phrase": "cached_result"}, {"score": 0.002271725588755076, "phrase": "reusable_data"}, {"score": 0.002214734873559146, "phrase": "proposed_scheme"}, {"score": 0.00217017119491777, "phrase": "intensive_experimental_evaluations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data stream", " Continuous query", " Optimization", " Cache"], "paper_abstract": "With the increasing demands for advanced use of streaming data, efficient execution of continuous queries is an important research issue. This paper focuses on event-driven continuous queries that are activated by foreign events such as data arrival and the progression of time. Existing approaches to multiple continuous query optimization decide the optimal query plan by extracting common subexpressions from the given queries. Event-driven queries containing the common subexpressions may produce many common intermediate results when they are activated within a small interval, but may produce only disjoint data when activated at completely different timings. This paper proposes an efficient data stream processing scheme for multiple event-driven continuous queries. In the proposed approach, we introduce query result caching to achieve a flexible way to share common operators among queries activated by unpredictable events. When a query is activated, an intermediate result generated for the query is stored into the cache area if it is expected to be reused by other queries. When other queries including the same operator are activated, they reuse the cached result if the cache includes reusable data. Efficiency of the proposed scheme is validated by intensive experimental evaluations. (C) 2009 Elsevier B.V. All rights reserved,", "paper_title": "Query result caching for multiple event-driven continuous queries", "paper_id": "WOS:000271782700005"}