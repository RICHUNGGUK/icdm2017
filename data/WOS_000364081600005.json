{"auto_keywords": [{"score": 0.041170637589374566, "phrase": "berger"}, {"score": 0.01086598035702387, "phrase": "tucker"}, {"score": 0.00481495049065317, "phrase": "exact_real_arithmetic"}, {"score": 0.004554082077300675, "phrase": "abstract_approach"}, {"score": 0.0044289730051264116, "phrase": "computation_theory"}, {"score": 0.004347473906950474, "phrase": "general_data_types"}, {"score": 0.003852939975815287, "phrase": "seisenberger"}, {"score": 0.0026317312518257803, "phrase": "haskell_program"}, {"score": 0.0024429654627197393, "phrase": "stream_representations"}, {"score": 0.0021049977753042253, "phrase": "minlog_proof_assistant"}], "paper_keywords": [""], "paper_abstract": "The importance of an abstract approach to a computation theory over general data types has been stressed by Tucker in many of his papers. Berger and Seisenberger recently elaborated the idea for extraction out of proofs involving (only) abstract reals. They considered a proof involving coinduction of the proposition that any two reals in [-1, 1] have their average in the same interval, and informally extract a Haskell program from this proof, which works with stream representations of reals. Here we formalize the proof, and machine extract its computational content using the Minlog proof assistant. This required an extension of this system to also take coinduction into account.", "paper_title": "Program extraction in exact real arithmetic", "paper_id": "WOS:000364081600005"}