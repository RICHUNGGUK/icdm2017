{"auto_keywords": [{"score": 0.03373087714809986, "phrase": "java-dswp"}, {"score": 0.00481495049065317, "phrase": "decoupled_software_pipeline"}, {"score": 0.004734448316824488, "phrase": "java_programs"}, {"score": 0.004500891637057374, "phrase": "micro-architectural_and_technology_improvements"}, {"score": 0.004278807087784626, "phrase": "today's_multicore_chips"}, {"score": 0.003932654396285872, "phrase": "extra_available_processing_power"}, {"score": 0.0038668462001710314, "phrase": "recently_proposed_technique"}, {"score": 0.003802135020791801, "phrase": "general-purpose_programs'_loops"}, {"score": 0.003474799999519295, "phrase": "good_performance_numbers"}, {"score": 0.0033405704229694656, "phrase": "fast_hardware_intercore_communication_queue"}, {"score": 0.003140004304719746, "phrase": "source-level_dswp-based_parallelization_technique"}, {"score": 0.0028857130140890787, "phrase": "java_applications"}, {"score": 0.002727700630869639, "phrase": "software_intercore_communication_scheme"}, {"score": 0.0025638362414466278, "phrase": "commodity_machines"}, {"score": 0.0024786330057813204, "phrase": "hardware_intercore_communication_queue"}, {"score": 0.002396255215865482, "phrase": "dswp"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["parallel programming", " pipeline", " Java", " performance"], "paper_abstract": "Programmers can no longer rely solely on micro-architectural and technology improvements to have their programs running faster. In today's multicore chips, parallel code needs to be explicitly written to extract any benefits from the extra available processing power. A recently proposed technique to parallelize general-purpose programs' loops at the binary level, called decoupled software pipeline (DSWP), has shown good performance numbers only under the assumption of a fast hardware intercore communication queue. In this paper, we propose Java-DSWP, a source-level DSWP-based parallelization technique that is much simpler than original DSWP and can be used to effectively parallelize Java applications. In addition, we propose and evaluate a software intercore communication scheme that enables code parallelized through Java-DSWP to be executed in commodity machines, thus not requiring a hardware intercore communication queue to be efficient, as DSWP does. We analyze three memory communication queue implementations and show experimental results that reveal an average 48% speedup on some SPCjvm2008 benchmarks. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Extending decoupled software pipeline to parallelize Java programs", "paper_id": "WOS:000317690100003"}