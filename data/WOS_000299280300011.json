{"auto_keywords": [{"score": 0.03321986365158592, "phrase": "intel"}, {"score": 0.00909679191622494, "phrase": "prm"}, {"score": 0.00481495049065317, "phrase": "stabilization_enabling_technology"}, {"score": 0.004652016085325825, "phrase": "hardware_and_software_components"}, {"score": 0.004053362743156545, "phrase": "basic_solution"}, {"score": 0.003981057603234397, "phrase": "seh"}, {"score": 0.0037834649508375544, "phrase": "real_time_requirement"}, {"score": 0.0036395944934310524, "phrase": "software_components"}, {"score": 0.003471135453226184, "phrase": "self-stabilizing_processor_abstraction"}, {"score": 0.003170811465728631, "phrase": "xscale_core"}, {"score": 0.0029980260560551982, "phrase": "existing_system_code"}, {"score": 0.0029214769181390653, "phrase": "operating_systems"}, {"score": 0.0026116610153271943, "phrase": "self-stabilizing_algorithm_designer"}, {"score": 0.0023958326775913165, "phrase": "branch_commands"}, {"score": 0.0023447155524245655, "phrase": "sanity_check_segment"}, {"score": 0.002236055625099805, "phrase": "sanity_check"}, {"score": 0.002197801146305747, "phrase": "critical_operations"}, {"score": 0.002150900082318562, "phrase": "latter_method"}, {"score": 0.0021049977753042253, "phrase": "full_separation"}], "paper_keywords": ["Computer systems organization", " performance of systems", " fault tolerance", " reliability", " availability", " serviceability", " self-stabilization", " virtualization"], "paper_abstract": "In this work, we suggest hardware and software components that enable the creation of a self-stabilizing OS/VMM on top of an off-the-shelf, nonself-stabilizing processor. A simple \"watchdog\" hardware that is called a periodic reset monitor (PRM) provides a basic solution. The solution is extended to stabilization enabling hardware (SEH) which removes any real time requirement from the OS/VMM. A stabilization enabling system that extends the SEH with software components provides the user (an OS/VMM designer) with a self-stabilizing processor abstraction. The method uses only a modest addition of hardware, which is external to the microprocessor. We demonstrate our approach on the XScale core by Intel. Moreover, we suggest methods for the adaptation of existing system code (e. g., code for operating systems) to be self-stabilizing. One method allows capturing and enforcing the configuration used by the program, thus reducing the work of the self-stabilizing algorithm designer to considering only the dynamic (nonconfigurational) parts of the state. Another method is suggested for ensuring that, eventually, addresses of branch commands are examined using a sanity check segment. This method is then used to ensure that a sanity check is performed before critical operations. One application of the latter method is for enforcing a full separation of components in the system.", "paper_title": "Stabilization Enabling Technology", "paper_id": "WOS:000299280300011"}