{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_reliability"}, {"score": 0.004771435352180973, "phrase": "testing_time_allocation"}, {"score": 0.0045804107341714, "phrase": "software_systems"}, {"score": 0.004477595431209663, "phrase": "critical_contexts"}, {"score": 0.004417012437860011, "phrase": "high_reliability_levels"}, {"score": 0.004317848984770719, "phrase": "huge_verification_costs"}, {"score": 0.004278807087784626, "phrase": "existing_standards"}, {"score": 0.0042209023469249205, "phrase": "predefined_risk_levels"}, {"score": 0.004126123386192962, "phrase": "design_phase"}, {"score": 0.0038895008852940323, "phrase": "rough-grained_assignment"}, {"score": 0.0036998728605395384, "phrase": "sufficient_modeling_basis"}, {"score": 0.003600351201298387, "phrase": "resources_usage"}, {"score": 0.0035677736570659813, "phrase": "software_reliability_allocation_models"}, {"score": 0.003378385493203297, "phrase": "input_parameters"}, {"score": 0.0030429511467945525, "phrase": "testing_resources_allocation_model"}, {"score": 0.0026307897899760383, "phrase": "software_architecture"}, {"score": 0.002548331088496964, "phrase": "testing_resources"}, {"score": 0.002305589818994465, "phrase": "empirical_case_study"}, {"score": 0.002203016940021265, "phrase": "model's_prediction_abilities"}, {"score": 0.002133937537670314, "phrase": "parameter_estimation_errors"}, {"score": 0.0021049977753042253, "phrase": "prediction_accuracy"}], "paper_keywords": ["Reliability", " software architecture", " software testing"], "paper_abstract": "With software systems increasingly being employed in critical contexts, assuring high reliability levels for large, complex systems can incur huge verification costs. Existing standards usually assign predefined risk levels to components in the design phase, to provide some guidelines for the verification. It is a rough-grained assignment that does not consider the costs and does not provide sufficient modeling basis to let engineers quantitatively optimize resources usage. Software reliability allocation models partially address such issues, but they usually make so many assumptions on the input parameters that their application is difficult in practice. In this paper, we try to reduce this gap, proposing a reliability and testing resources allocation model that is able to provide solutions at various levels of detail, depending upon the information the engineer has about the system. The model aims to quantitatively identify the most critical components of software architecture in order to best assign the testing resources to them. A tool for the solution of the model is also developed. The model is applied to an empirical case study, a program developed for the European Space Agency, to verify model's prediction abilities and evaluate the impact of the parameter estimation errors on the prediction accuracy.", "paper_title": "Software Reliability and Testing Time Allocation: An Architecture-Based Approach", "paper_id": "WOS:000278073400004"}