{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "short_text"}, {"score": 0.04971188917862786, "phrase": "micro-blogging_services"}, {"score": 0.028241480231683772, "phrase": "salb_algorithm"}, {"score": 0.004741395005218184, "phrase": "major_venues"}, {"score": 0.004717125879761534, "phrase": "information_creation"}, {"score": 0.004633153497593343, "phrase": "information_dissemination"}, {"score": 0.004550669123303854, "phrase": "relevant_information"}, {"score": 0.004515767699256193, "phrase": "critical_capability"}, {"score": 0.004423994518127831, "phrase": "content-based_subscriptions"}, {"score": 0.004390060342250211, "phrase": "micro-blogging_service"}, {"score": 0.004334078307677701, "phrase": "long-running_queries"}, {"score": 0.004138731753479, "phrase": "twitter"}, {"score": 0.004117182242662407, "phrase": "weibo"}, {"score": 0.004075102678078889, "phrase": "scalable_infrastructure"}, {"score": 0.0039010428828989826, "phrase": "s-tm_system"}, {"score": 0.0037923826925502094, "phrase": "stream_processing_application"}, {"score": 0.003724810609448597, "phrase": "data_parallel_flow_graph"}, {"score": 0.003658438093694035, "phrase": "data_center_environment"}, {"score": 0.003457414453525907, "phrase": "scalable_manner"}, {"score": 0.0034308688638878286, "phrase": "broadcasting_publications"}, {"score": 0.0033697163894687602, "phrase": "matcher_instances"}, {"score": 0.003343841875107018, "phrase": "basic_design"}, {"score": 0.0033011569787033297, "phrase": "scoped_multicast"}, {"score": 0.0030640804704319255, "phrase": "first_set"}, {"score": 0.0028221322455573624, "phrase": "small_set"}, {"score": 0.002632871981677528, "phrase": "better_load_balance"}, {"score": 0.0025726416100664853, "phrase": "word-to-post_bipartite_graph"}, {"score": 0.002533253511622532, "phrase": "subscription_placement_algorithm"}, {"score": 0.0025137867364653527, "phrase": "lasp"}, {"score": 0.00248167018931442, "phrase": "similar_subscriptions"}, {"score": 0.0024373950372964573, "phrase": "subscription_matching_cost"}, {"score": 0.0024000726315182826, "phrase": "good_scalability"}, {"score": 0.002387758958649797, "phrase": "increasing_number"}, {"score": 0.0023331227492950422, "phrase": "workload_skew"}, {"score": 0.0022973933270056743, "phrase": "load_shedding_techniques"}, {"score": 0.0022797338575579443, "phrase": "unexpected_load_spikes"}, {"score": 0.0022680361841334105, "phrase": "small_impact"}, {"score": 0.0021377414429251647, "phrase": "baseline_multicast"}, {"score": 0.0021049977753042253, "phrase": "-based_approaches"}], "paper_keywords": ["Short text matching", " Stream processing", " Publish/subscribe"], "paper_abstract": "Micro-blogging services have become major venues for information creation, as well as channels of information dissemination. Accordingly, monitoring them for relevant information is a critical capability. This is typically achieved by registering content-based subscriptions with the micro-blogging service. Such subscriptions are long-running queries that are evaluated against the stream of posts. Given the popularity and scale of micro-blogging services like Twitter and Weibo, building a scalable infrastructure to evaluate these subscriptions is a challenge. To address this challenge, we present the S-TM system for streaming short text matching. S-TM is organized as a stream processing application, in the form of a data parallel flow graph designed to be run on a data center environment. It takes advantage of the structure of the publications (posts) and subscriptions to perform the matching in a scalable manner, without broadcasting publications or subscriptions to all of the matcher instances. The basic design of S-TM uses a scoped multicast for publications and scoped anycast for subscriptions. To further improve throughput, we introduce publication routing algorithms that aim at minimizing the scope of the multicasts. First set of algorithms we develop are based on partitioning the word co-occurrence frequency graph, with the aim of routing posts that include commonly co-occurring words to a small set of matchers. While effective, these algorithms fell short in balancing the load. To address this, we develop the SALB algorithm, which provides better load balance by modeling the load more accurately using the word-to-post bipartite graph. We also develop a subscription placement algorithm, called LASP, to group together similar subscriptions, in order to minimize the subscription matching cost. Furthermore, to achieve good scalability for increasing number of nodes, we introduce techniques to handle workload skew. Finally, we introduce load shedding techniques for handling unexpected load spikes with small impact on the accuracy. Our experimental results show that S-TM is scalable. Furthermore, the SALB algorithm provides more than throughput compared to the baseline multicast and outperforms the graph partitioning-based approaches.", "paper_title": "S-TM: scalable streaming short text matching", "paper_id": "WOS:000365190400007"}