{"auto_keywords": [{"score": 0.04960202571834177, "phrase": "delta_modeling"}, {"score": 0.00481495049065317, "phrase": "delta_modeling_languages"}, {"score": 0.004488946121663966, "phrase": "system_variants"}, {"score": 0.004377921202912336, "phrase": "conceptual_idea"}, {"score": 0.004060986196931943, "phrase": "concrete_language"}, {"score": 0.003980400251874277, "phrase": "generic_transformation_language"}, {"score": 0.0038431888954930083, "phrase": "corresponding_delta_language"}, {"score": 0.0036921366375716005, "phrase": "considered_base_language"}, {"score": 0.0036553070575015344, "phrase": "generic_languages"}, {"score": 0.0035292625231068517, "phrase": "specific_context_condition"}, {"score": 0.0033735490732324713, "phrase": "base_language"}, {"score": 0.0031448288291084, "phrase": "delta_language"}, {"score": 0.0029611289031152856, "phrase": "automatically_generated_language_extension"}, {"score": 0.0028446460307503343, "phrase": "domain-specific_needs"}, {"score": 0.0027054473441439422, "phrase": "textual_variant"}, {"score": 0.002678433668156676, "phrase": "architecture_diagrams"}, {"score": 0.002560162916190598, "phrase": "comparative_case_study"}, {"score": 0.0025219085140220773, "phrase": "case_study"}, {"score": 0.002398464540102246, "phrase": "behavioral_language"}, {"score": 0.0023507916951658455, "phrase": "preexisting_handwritten_grammars"}, {"score": 0.002315658491366464, "phrase": "generated_grammars"}, {"score": 0.0022582634725291225, "phrase": "manually_tailored_grammars"}, {"score": 0.0021693692831601745, "phrase": "haber_et_al"}], "paper_keywords": ["Delta modeling", " Modeling", " Language engineering", " Domain specific languages", " Generation", " Software product line engineering"], "paper_abstract": "Delta modeling is a modular, yet flexible approach to capture variability by explicitly representing differences between system variants or versions. The conceptual idea of delta modeling is language-independent. But, to apply delta modeling to a concrete language, either a generic transformation language has to be used or the corresponding delta language has to be manually developed for each considered base language. Generic languages and their tool support often lack readability and specific context condition checking, since they are unrelated to the base language. In this paper, we present a process that allows synthesizing a delta language from the grammar of a given base language. Our method relies on an automatically generated language extension that can be manually adapted to meet domain-specific needs. We illustrate our method using delta modeling on a textual variant of architecture diagrams. Furthermore, we evaluate our method using a comparative case study. This case study covers an architectural, a structural, and a behavioral language and compares the preexisting handwritten grammars to the generated grammars as well as the manually tailored grammars. This paper is an extension of Haber et al. (Proceedings of the 17th international software product line conference (SPLC'13), pp 22-31, 2013).", "paper_title": "Systematic synthesis of delta modeling languages", "paper_id": "WOS:000360859500004"}