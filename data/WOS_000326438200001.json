{"auto_keywords": [{"score": 0.016765594646748767, "phrase": "monadic_lambda_mu"}, {"score": 0.010612387000973441, "phrase": "classical_sequent_calculus"}, {"score": 0.006837163203555075, "phrase": "strict_simulation"}, {"score": 0.006764108211853017, "phrase": "simply_typed_lambda-calculus"}, {"score": 0.006584845077271582, "phrase": "strong_normalisation"}, {"score": 0.005470202304159983, "phrase": "cps_translations"}, {"score": 0.005142057503365549, "phrase": "continuations-monad_instantiation"}, {"score": 0.004763399180244353, "phrase": "monadic_translations"}, {"score": 0.004335131050516532, "phrase": "curien"}, {"score": 0.004311849399717645, "phrase": "herbelin"}, {"score": 0.004265661035060299, "phrase": "modular_and_syntactic_proofs"}, {"score": 0.004130032407463255, "phrase": "new_meta-language"}, {"score": 0.003977217946137447, "phrase": "monadic_reworking"}, {"score": 0.00395585199280152, "phrase": "parigot's_lambda_mu-calculus"}, {"score": 0.0037787965734501763, "phrase": "classical_features"}, {"score": 0.003542195914738294, "phrase": "respective_fragments"}, {"score": 0.0034294909626243065, "phrase": "reduction_steps"}, {"score": 0.0032759168467374053, "phrase": "beta_steps"}, {"score": 0.0031974079543917403, "phrase": "monadic_lambda"}, {"score": 0.003137644498660331, "phrase": "continuations_monad"}, {"score": 0.002764219931474929, "phrase": "elementary_syntactical_way"}, {"score": 0.002590979439059358, "phrase": "second-order_logic"}, {"score": 0.002570100164801999, "phrase": "polymorphic_lambda-calculus"}, {"score": 0.002528843747727176, "phrase": "new_strong_normalisation_results"}, {"score": 0.0025152389351747627, "phrase": "classical_second-order_logic"}, {"score": 0.002376722584437227, "phrase": "strict_simulation_property"}, {"score": 0.00219786291605193, "phrase": "modular_way"}, {"score": 0.002162568865296819, "phrase": "extra_properties"}, {"score": 0.0021393542556570706, "phrase": "cbv_beta-reduction"}, {"score": 0.0021163883202110034, "phrase": "administrative_redexes"}, {"score": 0.0021049977753042253, "phrase": "compile_time"}], "paper_keywords": [""], "paper_abstract": "We study monadic translations of the call-by-name (cbn) and call-by-value (cbv) fragments of the classical sequent calculus (lambda) over bar mu(mu) over tilde due to Curien and Herbelin, and give modular and syntactic proofs of strong normalisation. The target of the translations is a new meta-language for classical logic, named monadic lambda mu. This language is a monadic reworking of Parigot's lambda mu-calculus, where the monadic binding is confined to commands, thus integrating the monad with the classical features. Also, its mu-reduction rule is replaced by a rule expressing the interaction between monadic binding and mu-abstraction. Our monadic translations produce very tight simulations of the respective fragments of (lambda) over bar mu(mu) over tilde within monadic lambda mu, with reduction steps of (lambda) over bar mu(mu) over tilde being translated in a 1-1 fashion, except for beta steps, which require two steps. The monad of monadic lambda mu can be instantiated to the continuations monad so as to ensure strict simulation of monadic lambda mu within simply typed lambda-calculus with beta- and eta-reduction. Through strict simulation, the strong normalisation of simply typed lambda-calculus is inherited by monadic lambda mu, and then by cbn and cbv (lambda) over bar mu(mu) over tilde, thus reproving strong normalisation in an elementary syntactical way for these fragments of (lambda) over bar mu(mu) over tilde, and establishing it for our new calculus. These results extend to second-order logic, with polymorphic lambda-calculus as the target, giving new strong normalisation results for classical second-order logic in sequent calculus style. CPS translations of cbn and cbv (lambda) over bar mu(mu) over tilde with the strict simulation property are obtained by composing our monadic translations with the continuations-monad instantiation. In an appendix to the paper, we investigate several refinements of the continuations-monad instantiation in order to obtain in a modular way improvements of the CPS translations enjoying extra properties like simulation by cbv beta-reduction or reduction of administrative redexes at compile time.", "paper_title": "Monadic translation of classical sequent calculus", "paper_id": "WOS:000326438200001"}