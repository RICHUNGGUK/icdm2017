{"auto_keywords": [{"score": 0.004815249373256461, "phrase": "monte-carlo"}, {"score": 0.004399349717218995, "phrase": "new_paradigm"}, {"score": 0.004219774794569897, "phrase": "monte-carlo_simulation"}, {"score": 0.0040194764936614565, "phrase": "computer_go_programs"}, {"score": 0.003749654338704576, "phrase": "tree_search_algorithm"}, {"score": 0.0035222812668916736, "phrase": "basic_algorithm"}, {"score": 0.003308649946463136, "phrase": "go_program"}, {"score": 0.0031734538599865973, "phrase": "first_program"}, {"score": 0.0028392545452904762, "phrase": "monte-carlo_revolution"}, {"score": 0.002704306866425829, "phrase": "key_ideas"}, {"score": 0.002575756583567029, "phrase": "mogo"}, {"score": 0.002540160379502092, "phrase": "subsequent_go_programs"}, {"score": 0.002436289099444074, "phrase": "first_time"}, {"score": 0.002225542510652775, "phrase": "extended_framework"}, {"score": 0.0021947755130109696, "phrase": "monte-carlo_tree_search"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Computer Go", " Monte-Carlo", " Search", " Reinforcement learning"], "paper_abstract": "A new paradigm for search, based on Monte-Carlo simulation, has revolutionised the performance of computer Go programs. In this article we describe two extensions to the Monte-Carlo tree search algorithm, which significantly improve the effectiveness of the basic algorithm. When we applied these two extensions to the Go program MoGo, it became the first program to achieve dan (master) level in 9 x 9 Go. In this article we survey the Monte-Carlo revolution in computer Go, outline the key ideas that led to the success of MoGo and subsequent Go programs, and provide for the first time a comprehensive description, in theory and in practice, of this extended framework for Monte-Carlo tree search. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Monte-Carlo tree search and rapid action value estimation in computer Go", "paper_id": "WOS:000292435000004"}