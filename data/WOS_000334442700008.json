{"auto_keywords": [{"score": 0.0468720905372598, "phrase": "domain_models"}, {"score": 0.030472363788919953, "phrase": "reuse_guidance"}, {"score": 0.010017541414987242, "phrase": "domain_model"}, {"score": 0.009513312089472958, "phrase": "explicit_specification"}, {"score": 0.00481495049065317, "phrase": "uml-based_software_product_line_specifications"}, {"score": 0.004773476989344654, "phrase": "software_product_line_engineering"}, {"score": 0.004651177631663439, "phrase": "developing_artifacts"}, {"score": 0.00457138247462329, "phrase": "common_and_variable_aspects"}, {"score": 0.004531997388646422, "phrase": "software_product_families"}, {"score": 0.0043213410601860985, "phrase": "early_stages"}, {"score": 0.004014800383343256, "phrase": "particular_software_products"}, {"score": 0.003962998498942111, "phrase": "different_modeling_methods"}, {"score": 0.003634262647873338, "phrase": "inceptive_stage"}, {"score": 0.0034204548167213545, "phrase": "adom"}, {"score": 0.003376313945769392, "phrase": "uml"}, {"score": 0.0033327058588112335, "phrase": "sple"}, {"score": 0.003205268682789165, "phrase": "controlled_experiment"}, {"score": 0.0030960762496815768, "phrase": "comprehension_questions"}, {"score": 0.002990592465417758, "phrase": "explicit_reuse_guidance"}, {"score": 0.0029647862293448895, "phrase": "variability_specification"}, {"score": 0.0026603411931700556, "phrase": "limited_extent"}, {"score": 0.002525489173110693, "phrase": "intermediate_results"}, {"score": 0.002236762786982225, "phrase": "different_uml_diagram_types"}, {"score": 0.0021049977753042253, "phrase": "different_commonality-"}], "paper_keywords": ["Variability management", " Software product line engineering", " Domain models", " Empirical evaluation", " UML"], "paper_abstract": "Software Product Line Engineering (SPLE) deals with developing artifacts that capture the common and variable aspects of software product families. Domain models are one kind of such artifacts. Being developed in early stages, domain models need to specify commonality and variability and guide the reuse of the artifacts in particular software products. Although different modeling methods have been proposed to manage and support these activities, the assessment of these methods is still in an inceptive stage. In this work, we examined the comprehensibility of domain models specified in ADOM, a UML-based SPLE method. In particular, we conducted a controlled experiment in which 116 undergraduate students were required to answer comprehension questions regarding a domain model that was equipped with explicit reuse guidance and/or variability specification. We found that explicit specification of reuse guidance within the domain model helped understand the model, whereas explicit specification of variability increased comprehensibility only to a limited extent. Explicit specification of both reuse guidance and variability often provided intermediate results, namely, results that were better than specification of variability without reuse guidance, but worse than specification of reuse guidance without variability. All these results were perceived in different UML diagram types, namely, use case, class, and sequence diagrams and for different commonality-, variability-, and reuse-related aspects.", "paper_title": "Comprehensibility of UML-based software product line specifications", "paper_id": "WOS:000334442700008"}