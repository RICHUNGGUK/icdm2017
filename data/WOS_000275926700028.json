{"auto_keywords": [{"score": 0.037466856669975415, "phrase": "entire_shared_memory_system"}, {"score": 0.03007303973922336, "phrase": "fst"}, {"score": 0.01571965589183162, "phrase": "source_throttling"}, {"score": 0.013066170936916033, "phrase": "individual_resource"}, {"score": 0.009379346553294383, "phrase": "system_software"}, {"score": 0.004609094651134046, "phrase": "multi-core_memory_systems"}, {"score": 0.004447201233380302, "phrase": "multiple_hardware_resources"}, {"score": 0.0043945048085683005, "phrase": "memory_subsystem"}, {"score": 0.004342430078306461, "phrase": "resource_sharing"}, {"score": 0.004074901471704325, "phrase": "previous_research"}, {"score": 0.004042635935882651, "phrase": "separate_fairness_mechanisms"}, {"score": 0.0038390240716280302, "phrase": "contradictory_decisions"}, {"score": 0.0037784540167266497, "phrase": "low_fairness"}, {"score": 0.0036456298076415652, "phrase": "coordinated_mechanism"}, {"score": 0.0034482025128821548, "phrase": "new_approach"}, {"score": 0.003222740482478965, "phrase": "fairness_mechanisms"}, {"score": 0.0029409171055888804, "phrase": "estimated_unfairness"}, {"score": 0.002429451930463481, "phrase": "entire_memory_system"}, {"score": 0.002316105585203396, "phrase": "different_fairness_objectives"}, {"score": 0.0022977342663599042, "phrase": "fairness-performance_tradeoffs"}, {"score": 0.002270449532546444, "phrase": "memory_system"}, {"score": 0.0021992603252793995, "phrase": "best_system_fairness"}, {"score": 0.002130298466581199, "phrase": "fairness_control"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_fairness_mechanisms"}], "paper_keywords": ["Design", " Performance"], "paper_abstract": "Cores in a chip-multiprocessor (CMP) system share multiple hardware resources in the memory subsystem. If resource sharing is unfair, some applications can be delayed significantly while others are unfairly prioritized. Previous research proposed separate fairness mechanisms in each individual resource. Such resource-based fairness mechanisms implemented independently in each resource can make contradictory decisions, leading to low fairness and loss of performance. Therefore, a coordinated mechanism that provides fairness in the entire shared memory system is desirable. This paper proposes a new approach that provides fairness in the entire shared memory system, thereby eliminating the need for and complexity of developing fairness mechanisms for each individual resource. Our technique, Fairness via Source Throttling (FST), estimates the unfairness in the entire shared memory system. If the estimated unfairness is above a threshold set by system software, FST throttles down cores causing unfairness by limiting the number of requests they can inject into the system and the frequency at which they do. As such, our source-based fairness control ensures fairness decisions are made in tandem in the entire memory system. FST also enforces thread priorities/weights, and enables system software to enforce different fairness objectives and fairness-performance tradeoffs in the memory system. Our evaluations show that FST provides the best system fairness and performance compared to four systems with no fairness control and with state-of-the-art fairness mechanisms implemented in both shared caches and memory controllers.", "paper_title": "Fairness via Source Throttling: A Configurable and High-Performance Fairness Substrate for Multi-Core Memory Systems", "paper_id": "WOS:000275926700028"}