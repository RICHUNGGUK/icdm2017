{"auto_keywords": [{"score": 0.012387173076777882, "phrase": "on-line_algorithm"}, {"score": 0.008587054784645583, "phrase": "linear-time_algorithms"}, {"score": 0.00481495049065317, "phrase": "line_construction"}, {"score": 0.004777744121315302, "phrase": "two-dimensional_suffix_trees"}, {"score": 0.004613825044585923, "phrase": "n_x_n_square_matrix_a"}, {"score": 0.00447282529270722, "phrase": "square_submatrices"}, {"score": 0.004171065188039856, "phrase": "whole_matrix_a"}, {"score": 0.003935147683802319, "phrase": "different_time"}, {"score": 0.0036838048761094933, "phrase": "off-line_algorithm"}, {"score": 0.0035850198321277418, "phrase": "input_grain_size"}, {"score": 0.003010063382882408, "phrase": "randomized_linear-time_algorithm"}, {"score": 0.002861782260525497, "phrase": "previous_algorithms"}, {"score": 0.002752695791351096, "phrase": "first_linear-time_algorithm"}, {"score": 0.0025967927629150715, "phrase": "off-line_construction"}, {"score": 0.002527083139627522, "phrase": "on-line_construction"}, {"score": 0.0024118962715000197, "phrase": "line_case"}, {"score": 0.0022227806435520764, "phrase": "previous_on-line_algorithms"}, {"score": 0.0021050027911633028, "phrase": "elsevier"}], "paper_keywords": ["Design of algorithms", " Two-dimensional suffix trees", " Index data structures", " On-line algorithms", " Randomized algorithms"], "paper_abstract": "The two-dimensional (2-D) suffix tree of an n x n square matrix A is a compacted trie that represents all square submatrices of A. We consider constructing 2-D suffix trees on-line, which means, instead of giving the whole matrix A in advance, A is separated and each part of A is given at different time as algorithms proceed. In general, developing an on-line algorithm is more difficult than developing an off-line algorithm. Moreover, the smaller the input grain size is, the harder it is to develop an on-line algorithm. In the case of 2-D suffix tree construction, dealing with a character at a time is harder than dealing with a row or a column at a time. In this paper we propose a randomized linear-time algorithm for constructing 2-D suffix trees on-line. This algorithm is superior to previous algorithms in two ways: (1) This is the first linear-time algorithm for constructing 2-D suffix trees on-line. Although there have been some linear-time algorithms for off-line construction, there were no linear-time algorithms for on-line construction. (2) We deal with the most fine-grain on-line case, i.e., our algorithm can construct a 2-D suffix tree even though only one character of A is given at a time, while previous on-line algorithms require at least a row and/or a column at a time. (C) 2009 Elsevier B.V.. All rights reserved.", "paper_title": "Improving on-line construction of two-dimensional suffix trees for square matrices", "paper_id": "WOS:000265305300010"}