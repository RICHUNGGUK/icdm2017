{"auto_keywords": [{"score": 0.04887120582438803, "phrase": "fault_tolerance"}, {"score": 0.009307405098765705, "phrase": "cost_models"}, {"score": 0.00481495049065317, "phrase": "data_parallel_programs"}, {"score": 0.00475382761232911, "phrase": "main_issues"}, {"score": 0.004594582559945568, "phrase": "rollback_recovery"}, {"score": 0.0045556080393342165, "phrase": "high-performance_applications"}, {"score": 0.004402973626416765, "phrase": "introduced_support"}, {"score": 0.004273601449537163, "phrase": "induced_overhead"}, {"score": 0.00402610372759447, "phrase": "failure-free_and_recovery_performances"}, {"score": 0.003841699919521703, "phrase": "high-level_structured_parallelism_models"}, {"score": 0.003760685138103153, "phrase": "different_viewpoint"}, {"score": 0.0035731269727067496, "phrase": "interesting_properties"}, {"score": 0.0033660587983313536, "phrase": "general_data_parallel_model"}, {"score": 0.0033232673019931206, "phrase": "useful_properties"}, {"score": 0.003239304090565123, "phrase": "checkpointing_protocols"}, {"score": 0.003025597247856977, "phrase": "described_issues"}, {"score": 0.002936577024096783, "phrase": "related_rollback_recovery_techniques"}, {"score": 0.002790004829699627, "phrase": "failure-free_performance"}, {"score": 0.0027078974645805736, "phrase": "performance_tuning"}, {"score": 0.0026507289852980512, "phrase": "quality_of_service"}, {"score": 0.002475755804232436, "phrase": "introduced_protocols"}, {"score": 0.002253826965566618, "phrase": "good_scalability"}, {"score": 0.0022251433045184454, "phrase": "literature_protocols"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["fault tolerance", " high-performance applications", " structured parallelism"], "paper_abstract": "The main issues when supporting fault tolerance based on checkpointing and rollback recovery for High-Performance applications are related to the scalability of the introduced support, the possibility of analyzing the induced overhead and, in more general terms, the optimization of the trade-off between failure-free and recovery performances. In this paper we describe our contribution in fault tolerance for high-level structured parallelism models. We take a different viewpoint w.r.t. existing contributions, by introducing a methodology to derive interesting properties to support fault tolerance. We show how to apply this methodology to a general data parallel model, deriving useful properties to introduce a class of checkpointing protocols. Thanks to this methodology, this class of protocols is not affected by the described issues. We exemplify two checkpointing protocols and the related rollback recovery techniques. For each protocol we also derive cost models statically describing the failure-free performance, which can be used for performance tuning or to target some Quality of Service parameter. To assess the innovation of the results we analytically and experimentally compare the introduced protocols with two literature protocols. Results show that while the protocols introduced in this paper permit the definition of cost models and have a good scalability, the literature protocols do not always have these properties. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Fault tolerance for data parallel programs", "paper_id": "WOS:000288609900004"}