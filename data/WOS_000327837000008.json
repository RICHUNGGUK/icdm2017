{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "convex_hull_algorithm"}, {"score": 0.00471228691115201, "phrase": "important_issue"}, {"score": 0.004385555408850022, "phrase": "different_users'_queries"}, {"score": 0.0042920078348374375, "phrase": "acceptable_time"}, {"score": 0.004023120753104693, "phrase": "different_queries"}, {"score": 0.003937273640906994, "phrase": "users'_real_needs"}, {"score": 0.003798231095121328, "phrase": "suitable_solutions"}, {"score": 0.0035601676907962626, "phrase": "new_query"}, {"score": 0.00326572165784246, "phrase": "overall_view"}, {"score": 0.0029740732099993706, "phrase": "query_answers"}, {"score": 0.002889672003089062, "phrase": "boundary_values"}, {"score": 0.002747676657869163, "phrase": "related_query"}, {"score": 0.0025752890978323873, "phrase": "db_environment"}, {"score": 0.0025202582748972122, "phrase": "vector_space"}, {"score": 0.0024664004864629724, "phrase": "necessary_attributes"}, {"score": 0.002362105010110277, "phrase": "proposed_method"}, {"score": 0.002166530105679438, "phrase": "proposed_method's_run_time"}, {"score": 0.0021049977753042253, "phrase": "huge_dbs"}], "paper_keywords": ["relational database", " convex hull algorithm", " boundary query"], "paper_abstract": "An important issue in database (DB) systems is responding to different users' queries in an acceptable time. To do this, we should define different queries based on users' real needs and we should consider suitable solutions. In this article, we express a new query called 'boundary query' which is used for achieving an overall view of a subject in the DB. This query does not return all query answers but it returns boundary values that cover all answers for the related query. In this article, we map a DB environment to a vector space based on necessary attributes. Then we implement the proposed method, and based on the results, we observe that the proposed method's run time is acceptable for huge DBs.", "paper_title": "Boundary query solution using convex hull algorithm", "paper_id": "WOS:000327837000008"}