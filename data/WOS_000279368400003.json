{"auto_keywords": [{"score": 0.03776250779112273, "phrase": "membership_problem"}, {"score": 0.00481495049065317, "phrase": "trace_languages"}, {"score": 0.004372442291178139, "phrase": "independent_operations"}, {"score": 0.004234129588974058, "phrase": "program_scheme"}, {"score": 0.004138010495069077, "phrase": "local_finite_automaton"}, {"score": 0.0038981499110532273, "phrase": "valid_permutation"}, {"score": 0.0036721416244816455, "phrase": "trace_theory"}, {"score": 0.003555902292752528, "phrase": "rational_trace_languages"}, {"score": 0.0033651019362620866, "phrase": "unbounded_degree"}, {"score": 0.0032585499655442404, "phrase": "dependence_graph"}, {"score": 0.0030414140732789186, "phrase": "finite_automaton"}, {"score": 0.0028914057633212045, "phrase": "dependent_symbols"}, {"score": 0.002851790448644913, "phrase": "second_approach"}, {"score": 0.0027361626349903744, "phrase": "nested_repeat-until_loops"}, {"score": 0.0026494723416072316, "phrase": "loop_iterations"}, {"score": 0.002613163083407071, "phrase": "suitable_conditions"}, {"score": 0.0025420267431501367, "phrase": "syntax_tree"}, {"score": 0.0025071862539276283, "phrase": "possible_word"}, {"score": 0.002461472107682778, "phrase": "input_string"}, {"score": 0.0023400004981080818, "phrase": "uniform_version"}, {"score": 0.002266757911930877, "phrase": "np"}, {"score": 0.002214297250267208, "phrase": "general_case"}, {"score": 0.002163930783583212, "phrase": "polynomial_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Automata and formal languages", " Trace languages", " Local finite automata", " Integer compositions", " Dependencies checking"], "paper_abstract": "A sequence of operations may be validly reordered, provided that only pairs of independent operations are commuted. Focusing on a program scheme, idealized as a local finite automaton, we consider the problem of checking whether a given string is a valid permutation of a word recognized by the automaton. Within the framework of trace theory, this is the membership problem for rational trace languages. Existing general algorithms, although time-polynomial, have unbounded degree related to some properties of the dependence graph. Here, we present two original linear-time solutions. A straightforward algorithm is suitable for any finite automaton such that all the transitions starting from the same state are labelled by dependent symbols. The second approach is currently restricted to automata representing programs of nested repeat-until loops. Using integer compositions to represent loop iterations and under suitable conditions, the algorithm constructs the syntax tree of a possible word equivalent to the input string. The same procedures show that, under our hypotheses, the uniform version of the membership problem (which is NP-complete in the general case) is solvable in polynomial time. (c) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Efficient recognition of trace languages defined by repeat-until loops", "paper_id": "WOS:000279368400003"}