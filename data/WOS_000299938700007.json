{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "mercury"}, {"score": 0.013696794010418624, "phrase": "computer_systems"}, {"score": 0.007585026627959814, "phrase": "linux"}, {"score": 0.004444317282171449, "phrase": "increasing_utilization"}, {"score": 0.004084829853870028, "phrase": "business_environment"}, {"score": 0.0038343546245999285, "phrase": "full_execution_speed"}, {"score": 0.003568932067237836, "phrase": "system_failures"}, {"score": 0.0035240305920962766, "phrase": "multiple_operating_systems"}, {"score": 0.0033078284621762817, "phrase": "virtualization_techniques"}, {"score": 0.003266201217790818, "phrase": "non-negligible_performance_penalty"}, {"score": 0.003144426503333397, "phrase": "fault_tolerance"}, {"score": 0.0027819985260847577, "phrase": "operating_system"}, {"score": 0.0026112013707473938, "phrase": "running_applications"}, {"score": 0.0023395610923736595, "phrase": "working_prototype"}, {"score": 0.002290650385772743, "phrase": "xen"}, {"score": 0.002280990744438186, "phrase": "virtual_machine_monitor"}, {"score": 0.0022522565004588113, "phrase": "performance_measurement"}, {"score": 0.002131857309586904, "phrase": "mode_switch"}, {"score": 0.0021049977753042253, "phrase": "negligible_performance_degradation"}], "paper_keywords": ["dependability", " performance", " self-virtualization", " dynamic virtualization"], "paper_abstract": "Virtualization has recently gained popularity largely due to its promise in increasing utilization, improving availability and enhancing security. Very often, the role of computer systems needs to change as the business environment changes. Initially, the system may only need to host one operating system and seek full execution speed. Later, it may be required to add other functionalities such as allowing easy software/hardware maintenance, surviving system failures and hosting multiple operating systems. Virtualization allows these functionalities to be supported easily and effectively. However, virtualization techniques generally incur non-negligible performance penalty. Fortunately, many virtualization-enabled features such as online software/hardware maintenance and fault tolerance do not require virtualization standby all the time. Based on this observation, this paper proposes a technique, called Self-virtualization, which provides the operating system with the capability to turn on and off virtualization on demand, without disturbing running applications. This technique enables computer systems to reap most benefits from virtualization without sacrificing performance. This paper presents the design and implementation of Mercury, a working prototype based on Linux and Xen virtual machine monitor. The performance measurement shows that Mercury incurs very little overhead: about 0.2 ms on 3 GHz Xeon CPU to complete a mode switch, and negligible performance degradation compared to Linux.", "paper_title": "Mercury: Combining Performance with Dependability Using Self-Virtualization", "paper_id": "WOS:000299938700007"}