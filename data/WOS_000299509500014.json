{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fuzzyclips"}, {"score": 0.033416049490815475, "phrase": "inference_engine"}, {"score": 0.00474946741204285, "phrase": "data-dependent_fuzzy_expert_systems"}, {"score": 0.004642292792558686, "phrase": "rule-based_programming_language"}, {"score": 0.004475798524102238, "phrase": "fuzzy_expert_systems"}, {"score": 0.004179711179410833, "phrase": "java"}, {"score": 0.0039928721865882, "phrase": "parallel_version"}, {"score": 0.003832031470970347, "phrase": "fuzzy_expert_system"}, {"score": 0.0037971749182744334, "phrase": "data_dependence"}, {"score": 0.0037454814403672697, "phrase": "cluster_system"}, {"score": 0.0036441884295335502, "phrase": "extended_parallel_syntax"}, {"score": 0.0035945701438887282, "phrase": "original_fuzzyclips_style"}, {"score": 0.0035133644847622383, "phrase": "programming_model"}, {"score": 0.0034813964296826973, "phrase": "parallel_fuzzyclips"}, {"score": 0.0032805541677236325, "phrase": "parallel_processing"}, {"score": 0.0031197671039226915, "phrase": "mpi"}, {"score": 0.003021392767766593, "phrase": "parallel_programming"}, {"score": 0.002993887707344862, "phrase": "cluster_systems"}, {"score": 0.002926212333939311, "phrase": "load_balancing_function"}, {"score": 0.0027573101010593863, "phrase": "computing_nodes"}, {"score": 0.002682669289913153, "phrase": "different_amounts"}, {"score": 0.002634031703695684, "phrase": "different_computing_nodes"}, {"score": 0.0025627194819793347, "phrase": "dynamic_performance_monitoring"}, {"score": 0.002403724423251419, "phrase": "better_load_balancing"}, {"score": 0.002254571365634257, "phrase": "human_resource_website"}, {"score": 0.002234031373581961, "phrase": "experimental_results"}, {"score": 0.002193509835371438, "phrase": "proposed_parallel"}, {"score": 0.0021438877099090262, "phrase": "superlinear_speedup"}], "paper_keywords": ["Rule-based expert system", " FuzzyCLIPS", " MPI", " Cluster computing", " Data dependence"], "paper_abstract": "FuzzyCLIPS is a rule-based programming language and it is very suitable for developing fuzzy expert systems. However, it usually requires much longer execution time than algorithmic languages such as C and Java. To address this problem, we propose a parallel version of FuzzyCLIPS to parallelize the execution of a fuzzy expert system with data dependence on a cluster system. We have designed some extended parallel syntax following the original FuzzyCLIPS style. To simplify the programming model of parallel FuzzyCLIPS, we hide, as much as possible, the tasks of parallel processing from programmers and implement them in the inference engine by using MPI, the de facto standard for parallel programming for cluster systems. Furthermore, a load balancing function has been implemented in the inference engine to adapt to the heterogeneity of computing nodes. It will intelligently allocate different amounts of workload to different computing nodes according to the results of dynamic performance monitoring. The programmer only needs to invoke the function in the program for better load balancing. To verify our design and evaluate the performance, we have implemented a human resource website. Experimental results show that the proposed parallel FuzzyCLIPS can garner a superlinear speedup and provide a more reasonable response time.", "paper_title": "Extending FuzzyCLIPS for parallelizing data-dependent fuzzy expert systems", "paper_id": "WOS:000299509500014"}