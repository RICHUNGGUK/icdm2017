{"auto_keywords": [{"score": 0.04951337385468522, "phrase": "object_teams"}, {"score": 0.004989291744076482, "phrase": "aspectj"}, {"score": 0.00481495049065317, "phrase": "design_patterns"}, {"score": 0.004149968424266095, "phrase": "java"}, {"score": 0.003933609372601274, "phrase": "object_teams_of_two"}, {"score": 0.003910278811774747, "phrase": "complete_collections"}, {"score": 0.003369778677878286, "phrase": "module_composition"}, {"score": 0.003232254571848865, "phrase": "systematic_comparison"}, {"score": 0.0031750418391373035, "phrase": "functionally_equivalent_collection"}, {"score": 0.003045440856986832, "phrase": "five_modularity_properties"}, {"score": 0.002768674345336861, "phrase": "broadly_comparable_results"}, {"score": 0.0026874405408023956, "phrase": "first_four_properties"}, {"score": 0.0026241684260044414, "phrase": "better_results"}, {"score": 0.0025776913268808124, "phrase": "flexible_module_extensibility"}, {"score": 0.0025020469669826497, "phrase": "instance_level"}, {"score": 0.0024577274522206436, "phrase": "multiple_pattern_participants"}, {"score": 0.0022745508619577927, "phrase": "singleton_pattern"}, {"score": 0.0021946656099592608, "phrase": "constructor_events"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["aspect-oriented programming", " design patterns", " modularity", " extensibility", " reusability"], "paper_abstract": "This paper presents a study of the support for modularity of Object Teams, an aspect-oriented language backwards compatible with Java. The study is based on implementations in Object Teams of two complete collections of the Gang-of-Four design patterns. An analysis of the implementations is provided, in terms of advantages of Object Teams over Java with respect to modularity, module composition and reuse. We present a systematic comparison with a functionally equivalent collection of implementations in AspectJ, regarding five modularity properties: locality, reusability, composition transparency, (un)pluggability and extensibility. Object Teams yields broadly comparable results in terms of the first four properties. Object Teams yields better results as regards flexible module extensibility, composition at the instance level and enclosing multiple pattern participants into a larger, cohesive module. AspectJ is more successful than Object Teams in the Singleton pattern because of its ability to intercept constructor events. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Implementing design patterns in Object Teams", "paper_id": "WOS:000326694500007"}