{"auto_keywords": [{"score": 0.0047026237903774895, "phrase": "strict_simplicity_orientation"}, {"score": 0.004159241394996858, "phrase": "domain-specific_setting"}, {"score": 0.003820144626025562, "phrase": "programming_task"}, {"score": 0.003766369160795001, "phrase": "modeling_level"}, {"score": 0.0036095259108028105, "phrase": "application_experts"}, {"score": 0.0035755653799043, "phrase": "programming_expertise"}, {"score": 0.003475582268210954, "phrase": "classical_plug-in_development_profits"}, {"score": 0.003426640459083931, "phrase": "systematic_domain-specific_api_design"}, {"score": 0.0031769866037536045, "phrase": "adequate_building_blocks"}, {"score": 0.002641823250595624, "phrase": "specific_effort"}, {"score": 0.002426137929553724, "phrase": "automatic_completion"}, {"score": 0.00240328454980006, "phrase": "process_sketches"}, {"score": 0.0022492129111567824, "phrase": "-based_evolution"}, {"score": 0.0022175019341824603, "phrase": "jabc_framework"}, {"score": 0.002175913488493802, "phrase": "quite_some_bootstrapping_effects"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["plug-ins", " simplicity", " domain-specific APIs", " process modeling", " bootstrapping", " evolution", " code generation", " loose programming", " dynamic service binding"], "paper_abstract": "In this article, we present our experience with over a decade of strict simplicity orientation in the development and evolution of plug-ins. The point of our approach is to enable our graphical modeling framework jABC to capture plug-in development in a domain-specific setting. The typically quite tedious and technical plug-in development is shifted this way from a programming task to the modeling level, where it can be mastered also by application experts without programming expertise. We show how the classical plug-in development profits from a systematic domain-specific API design and how the level of abstraction achieved this way can be further enhanced by defining adequate building blocks for high-level plug-in modeling. As the resulting plug-in models can be compiled and deployed automatically, our approach decomposes plug-in development into three phases where only the realization phase requires plug-in-specific effort. By using our modeling framework jABC, this effort boils down to graphical, tool-supported process modeling. Furthermore, we support the automatic completion of process sketches for executability. All this will be illustrated along the most recent plug-in-based evolution of the jABC framework, which witnessed quite some bootstrapping effects. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Simplicity-first model-based plug-in development", "paper_id": "WOS:000331275900003"}