{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "speculative_multithreading"}, {"score": 0.049570343931350715, "phrase": "artificial_immune_algorithm"}, {"score": 0.04923427303787291, "phrase": "thread_partition"}, {"score": 0.04251153857508317, "phrase": "heuristic_rules"}, {"score": 0.040657919400976524, "phrase": "thread_size"}, {"score": 0.02619916950644925, "phrase": "olden_benchmarks"}, {"score": 0.0046797114400479135, "phrase": "important_role"}, {"score": 0.00456448259718331, "phrase": "automatic_parallelization"}, {"score": 0.0045320819060445045, "phrase": "irregular_programs"}, {"score": 0.004483909657713567, "phrase": "unified_values"}, {"score": 0.004452078350485375, "phrase": "partition_parameters"}, {"score": 0.0044047527104545525, "phrase": "different_applications"}, {"score": 0.004145882022189891, "phrase": "five_parameters"}, {"score": 0.003986509098918949, "phrase": "dependence_threshold"}, {"score": 0.003195885276330599, "phrase": "objective_function"}, {"score": 0.0031393948330209224, "phrase": "five_threshold_values"}, {"score": 0.003105979498529766, "phrase": "solution_space"}, {"score": 0.003007846011394511, "phrase": "best_combination"}, {"score": 0.002965229277927781, "phrase": "best_thread_granularity"}, {"score": 0.0027316100642958544, "phrase": "single_objective_optimization_problem"}, {"score": 0.0026077803487003, "phrase": "optimal_solution"}, {"score": 0.0025800145697332764, "phrase": "prophet"}, {"score": 0.0025343769150179764, "phrase": "generic_spmt_processor"}, {"score": 0.002480680078868508, "phrase": "multithreaded_programs"}, {"score": 0.0023346234464901978, "phrase": "optimal_parameter_values"}, {"score": 0.0022527488455744656, "phrase": "optimized_parameter_values"}, {"score": 0.0022287497627555895, "phrase": "performance_improvement"}, {"score": 0.0021582723621960693, "phrase": "machine_learning_based_approach"}, {"score": 0.0021049977753042253, "phrase": "heuristics-based_approach"}], "paper_keywords": ["Speculative multithreading", " Thread partitioning", " Artificial immune algorithm"], "paper_abstract": "Thread partition plays an important role in speculative multithreading (SpMT) for automatic parallelization of irregular programs. Using unified values of partition parameters to partition different applications leads to the fact that every application cannot own its optimal partition scheme. In this paper, five parameters affecting thread partition are extracted from heuristic rules. They are the dependence threshold (DT), lower limit of thread size (TSL), upper limit of thread size (TSU), lower limit of spawning distance (SDL), and upper limit of spawning distance (SDU). Their ranges are determined in accordance with heuristic rules, and their step-sizes are set empirically. Under the condition of setting speedup as an objective function, all combinations of five threshold values form the solution space, and our aim is to search for the best combination to obtain the best thread granularity, thread dependence, and spawning distance, so that every application has its best partition scheme. The issue can be attributed to a single objective optimization problem. We use the artificial immune algorithm (AIA) to search for the optimal solution. On Prophet, which is a generic SpMT processor to evaluate the performance of multithreaded programs, Olden benchmarks are used to implement the process. Experiments show that we can obtain the optimal parameter values for every benchmark, and Olden benchmarks partitioned with the optimized parameter values deliver a performance improvement of 3.00% on a 4-core platform compared with a machine learning based approach, and 8.92% compared with a heuristics-based approach.", "paper_title": "Optimization of thread partitioning parameters in speculative multithreading based on artificial immune algorithm", "paper_id": "WOS:000350792700003"}