{"auto_keywords": [{"score": 0.04972711494665694, "phrase": "transaction-based_multiprocess_programs"}, {"score": 0.00481495049065317, "phrase": "universal_construction"}, {"score": 0.004539005582217309, "phrase": "explicit_management"}, {"score": 0.004505638402009237, "phrase": "synchronization_issues"}, {"score": 0.004456044928556639, "phrase": "programmer's_job"}, {"score": 0.0043584824527198055, "phrase": "multiprocess_programs"}, {"score": 0.004139028737420222, "phrase": "atomic_execution_unit"}, {"score": 0.004093453936415085, "phrase": "concurrent_objects"}, {"score": 0.004048378919038729, "phrase": "important_point"}, {"score": 0.0037602557461171478, "phrase": "atomic_execution_units"}, {"score": 0.0036508108698357932, "phrase": "corresponding_synchronization"}, {"score": 0.003557653536102669, "phrase": "-trivial_stm_systems"}, {"score": 0.003126224853287378, "phrase": "aborted_transactions"}, {"score": 0.0030017207229983385, "phrase": "underlying_system_scheduler"}, {"score": 0.002935905915691203, "phrase": "underlying_contention_manager"}, {"score": 0.0027571412070078703, "phrase": "high_probability"}, {"score": 0.00266693888510356, "phrase": "deterministic_stm_system"}, {"score": 0.002208663870368384, "phrase": "deterministic_universal_construction"}, {"score": 0.0021049977753042253, "phrase": "proposed_construction"}], "paper_keywords": ["Abort/commit", " Asynchronous system", " Atomic execution unit", " Compare&swap", " Concurrency management", " Fetch&increment", " Lock-freedom", " Shared memory system", " STM system", " Transaction", " Universal construction"], "paper_abstract": "The aim of a Software Transactional Memory (STM) system is to discharge the programmer from the explicit management of synchronization issues. The programmer's job resides in the design of multiprocess programs in which processes are made up of transactions, each transaction being an atomic execution unit that accesses concurrent objects. The important point is that the programmer has to focus her/his efforts only on the parts of the code which have to be atomic execution units without worrying on the way how the corresponding synchronization has to be realized. Non-trivial STM systems allow transactions to execute concurrently and rely on the notion of commit/abort of a transaction in order to solve their conflicts on the objects they access simultaneously. In some cases, the management of aborted transactions is left to the programmer. In other cases, the underlying system scheduler is appropriately modified or an underlying contention manager is used in order for each transaction to be (\"practically always\" or with high probability) eventually committed. This paper presents a deterministic STM system in which (1) every invocation of a transaction is executed exactly once and (2) the notion of commit/abort of a transaction remains unknown to the programmer. This system, which imposes restrictions neither on the design of processes nor on their concurrency pattern, can be seen as a step towards the design of a deterministic universal construction to execute transaction-based multiprocess programs on top of a multiprocessor. Interestingly, the proposed construction is lock-free (in the sense that it uses no lock). (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Towards a universal construction for transaction-based multiprocess programs", "paper_id": "WOS:000323457500010"}