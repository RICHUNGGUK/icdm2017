{"auto_keywords": [{"score": 0.03315078520490548, "phrase": "request_parameters"}, {"score": 0.00481495049065317, "phrase": "static_program_analysis"}, {"score": 0.004782848614014638, "phrase": "aid_intrusion_detection"}, {"score": 0.004641005983799053, "phrase": "world-wide_web"}, {"score": 0.004533585346030341, "phrase": "everyday_life"}, {"score": 0.004297256607382827, "phrase": "on-line_services"}, {"score": 0.004211831095629, "phrase": "whole_industry_branches"}, {"score": 0.0039259432210911925, "phrase": "frequent_reports"}, {"score": 0.003899745240916238, "phrase": "security_breaches"}, {"score": 0.003822191555851545, "phrase": "poorly_written_web_applications"}, {"score": 0.0037839928025418896, "phrase": "achilles_heel"}, {"score": 0.0034684722988160637, "phrase": "tight_schedules"}, {"score": 0.003399466007862412, "phrase": "previous_work"}, {"score": 0.003343007152920687, "phrase": "anomaly-based_intrusion_detection_system"}, {"score": 0.003243726030199957, "phrase": "webbased_applications"}, {"score": 0.003115908199991072, "phrase": "client_queries"}, {"score": 0.0029931118601224612, "phrase": "protected_web_applications"}, {"score": 0.0029335351665967396, "phrase": "imprecise_models"}, {"score": 0.00287514090358681, "phrase": "false_negatives"}, {"score": 0.0027618067917046583, "phrase": "novel_static_source_code_analysis_approach"}, {"score": 0.0027433757529250246, "phrase": "php"}, {"score": 0.0026618355977665745, "phrase": "web_application"}, {"score": 0.0026352026958982367, "phrase": "intrusion_detection_models"}, {"score": 0.002548331088496964, "phrase": "web_request_parameters"}, {"score": 0.0022284920601703595, "phrase": "even_concrete_value_sets"}, {"score": 0.0021549990311897347, "phrase": "web_applications"}, {"score": 0.0021262835396323623, "phrase": "parameter_values"}, {"score": 0.0021049977753042253, "phrase": "real-world_traffic"}], "paper_keywords": [""], "paper_abstract": "The Internet, and in particular the world-wide web, have become part of the everyday life of millions of people. With the growth of the web, the demand for on-line services rapidly increased. Today, whole industry branches rely on the Internet to do business. Unfortunately, the success of the web has recently been overshadowed by frequent reports of security breaches. Attackers have discovered that poorly written web applications are the Achilles heel of many organizations. The reason is that these applications are directly available through firewalls and are often developed by programmers who focus on features and tight schedules instead of security. In previous work, we developed an anomaly-based intrusion detection system that uses learning techniques to identify attacks against webbased applications. That system focuses on the analysis of the request parameters in client queries, but does not take into account any information about the protected web applications themselves. The result are imprecise models that lead to more false positives and false negatives' than necessary. In this paper, we describe a novel static source code analysis approach for PHP that allows us to incorporate information about a web application into the intrusion detection models. The goal is to obtain a more precise characterization of web request parameters by analyzing their usage by the program. This allows us to generate more precise intrusion detection models. In particular, our analysis allows us to determine the names of request parameters expected by a program and provides information about their types, structure, or even concrete value sets. Our experimental evaluation demonstrates that the information derived statically from web applications closely characterizes the parameter values observed in real-world traffic.", "paper_title": "Using static program analysis to aid intrusion detection", "paper_id": "WOS:000239520700002"}