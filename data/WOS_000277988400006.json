{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "heuristic_information"}, {"score": 0.038731848467111224, "phrase": "runtime_behavior"}, {"score": 0.03152159347766065, "phrase": "construction_graph"}, {"score": 0.00481495049065317, "phrase": "tree_problem"}, {"score": 0.004777214679969785, "phrase": "ant_colony_optimization"}, {"score": 0.004450568197899267, "phrase": "combinatorial_optimization"}, {"score": 0.004278807087784626, "phrase": "random_walk"}, {"score": 0.004228577663320847, "phrase": "so-called_construction_graph"}, {"score": 0.003908396188878932, "phrase": "theoretical_foundation"}, {"score": 0.003757480190200645, "phrase": "theoretical_investigations"}, {"score": 0.0036553070575015344, "phrase": "aco_algorithms"}, {"score": 0.0035141291835319682, "phrase": "pseudo-boolean_functions"}, {"score": 0.003445591238183763, "phrase": "first_comprehensive_rigorous_analysis"}, {"score": 0.003405109584265324, "phrase": "simple_aco_algorithm"}, {"score": 0.0033651019362620866, "phrase": "combinatorial_optimization_problem"}, {"score": 0.002943147037670826, "phrase": "aco_algorithm"}, {"score": 0.002763261749602258, "phrase": "input_graph"}, {"score": 0.0026459927476753585, "phrase": "construction_procedure"}, {"score": 0.002594342451017822, "phrase": "broder's_algorithm"}, {"score": 0.0025537472239953807, "phrase": "spanning_tree"}, {"score": 0.002332322771009122, "phrase": "broder-based_algorithm"}, {"score": 0.0022777800735119405, "phrase": "constant_number"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Ant Colony Optimization", " Combinatorial optimization", " Runtime analysis"], "paper_abstract": "Ant Colony Optimization (ACO) is a kind of metaheuristic that has become very popular for solving problems from combinatorial optimization. Solutions for a given problem are constructed by a random walk on a so-called construction graph. This random walk can be influenced by heuristic information about the problem. In contrast to many successful applications, the theoretical foundation of this kind of metaheuristic is rather weak. Theoretical investigations with respect to the runtime behavior of ACO algorithms have been started only recently for the optimization of pseudo-Boolean functions. We present the first comprehensive rigorous analysis of a simple ACO algorithm for a combinatorial optimization problem. In our investigations, we consider the minimum spanning tree (MST) problem and examine the effect of two construction' graphs with respect to the runtime behavior. The choice of the construction graph in an ACO algorithm seems to be crucial for the success of such an algorithm. First, we take the input graph itself as the construction graph and analyze the use of a construction procedure that is similar to Broder's algorithm for choosing a spanning tree uniformly at random. After that, a more incremental construction procedure is analyzed. It turns out that this procedure is superior to the Broder-based algorithm and produces additionally in a constant number of iterations an MST, if the influence of the heuristic information is large enough. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Ant Colony Optimization and the minimum spanning tree problem", "paper_id": "WOS:000277988400006"}