{"auto_keywords": [{"score": 0.03660909854594214, "phrase": "hoyer"}, {"score": 0.00481495049065317, "phrase": "fibonacci_heap"}, {"score": 0.004490212943845175, "phrase": "especially_efficient_implementation"}, {"score": 0.004386887374401584, "phrase": "dijkstra's_shortest_path_algorithm"}, {"score": 0.003021781956684419, "phrase": "thin_heaps"}, {"score": 0.002884111441153185, "phrase": "thick_heaps"}, {"score": 0.002658068304632523, "phrase": "fibonacci_heaps"}, {"score": 0.0024496978447849835, "phrase": "better_practical_performance"}, {"score": 0.0021049977753042253, "phrase": "hoyer's_analysis"}], "paper_keywords": ["Data structure", " priority queue", " heap", " fibonacci heap", " binomial queue", " thin heap", " thick heap", " melding", " decrease key operation"], "paper_abstract": "The Fibonacci heap was devised to provide an especially efficient implementation of Dijkstra's shortest path algorithm. Although asyptotically efficient, it is not as fast in practice as other heap implementations. Expanding on ideas of Hoyer [1995], we describe three heap implementations (two versions of thin heaps and one of thick heaps) that have the same amortized efficiency as Fibonacci heaps, but need less space and promise better practical performance. As part of our development, we fill in a gap in Hoyer's analysis.", "paper_title": "Thin Heaps, Thick Heaps", "paper_id": "WOS:000265816600003"}