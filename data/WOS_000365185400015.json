{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gpu-based_systems"}, {"score": 0.0047588556219929756, "phrase": "user-level_components"}, {"score": 0.00440976345264104, "phrase": "performance_model"}, {"score": 0.004232475065285966, "phrase": "component_model"}, {"score": 0.0041586840496756474, "phrase": "composition_framework"}, {"score": 0.00408617426304956, "phrase": "automatically_optimized_composition"}, {"score": 0.003991449490087454, "phrase": "modern_gpu-based_systems"}, {"score": 0.0038085117064624208, "phrase": "multiple_implementation_variants"}, {"score": 0.003676811616723809, "phrase": "composition_problem"}, {"score": 0.0036126731589251906, "phrase": "integrated_manner"}, {"score": 0.0034673190692473903, "phrase": "global_performance-aware_composition"}, {"score": 0.0032315723330399375, "phrase": "performance-aware_composition"}, {"score": 0.003101503914610488, "phrase": "performance_characteristics"}, {"score": 0.002725740264152553, "phrase": "hybrid_execution_capabilities"}, {"score": 0.0026624684547385718, "phrase": "real_applications"}, {"score": 0.002540285736232122, "phrase": "bulk_composition_technique"}, {"score": 0.0024813081174066653, "phrase": "better_composition_decisions"}, {"score": 0.002409503258044183, "phrase": "upcoming_calls"}, {"score": 0.0023674192513753996, "phrase": "data_flow_information"}, {"score": 0.0023124457559811087, "phrase": "source_program"}, {"score": 0.0022854384756395116, "phrase": "static_analysis"}, {"score": 0.0022455164874830777, "phrase": "bulk_composition"}, {"score": 0.002193367454830741, "phrase": "traditional_greedy_performance"}, {"score": 0.0021049977753042253, "phrase": "current_call"}], "paper_keywords": ["Global composition", " Implementation selection", " Hybrid execution", " GPU-based systems", " Performance portability"], "paper_abstract": "User-level components of applications can be made performance-aware by annotating them with performance model and other metadata. We present a component model and a composition framework for the automatically optimized composition of applications for modern GPU-based systems from such components, which may expose multiple implementation variants. The framework targets the composition problem in an integrated manner, with the ability to do global performance-aware composition across multiple invocations. We demonstrate several key features of our framework relating to performance-aware composition including implementation selection, both with performance characteristics being known (or learned) beforehand as well as cases when they are learned at runtime. We also demonstrate hybrid execution capabilities of our framework on real applications. \"Furthermore, we present a bulk composition technique that can make better composition decisions by considering information about upcoming calls along with data flow information extracted from the source program by static analysis. The bulk composition improves over the traditional greedy performance aware policy that only considers the current call for optimization.\".", "paper_title": "Performance-aware composition framework for GPU-based systems", "paper_id": "WOS:000365185400015"}