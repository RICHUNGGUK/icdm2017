{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "re-opened_bugs"}, {"score": 0.008674295296219789, "phrase": "apache"}, {"score": 0.006290652141144871, "phrase": "comment_text"}, {"score": 0.006258099561480584, "phrase": "last_status"}, {"score": 0.00478999749469106, "phrase": "open_source_software"}, {"score": 0.004703671193348433, "phrase": "large_amount"}, {"score": 0.004667149874736771, "phrase": "software_maintenance_resources"}, {"score": 0.004294724955301414, "phrase": "maintenance_costs"}, {"score": 0.004250302819248558, "phrase": "overall_user-perceived_quality"}, {"score": 0.004141238989360548, "phrase": "busy_practitioners"}, {"score": 0.004003612361315299, "phrase": "case_study"}, {"score": 0.003911010373894104, "phrase": "openoffice"}, {"score": 0.0032855095476183372, "phrase": "initial_fix"}, {"score": 0.003226209534553224, "phrase": "team_dimension"}, {"score": 0.0031597433845085092, "phrase": "bug_fixer"}, {"score": 0.0031188970263124546, "phrase": "decision_trees"}, {"score": 0.0030946423142739813, "phrase": "aforementioned_factors"}, {"score": 0.0030230006369786093, "phrase": "top_node_analysis"}, {"score": 0.0025858644319102114, "phrase": "explainable_prediction_models"}, {"score": 0.002223351523626989, "phrase": "eclipse_and_openoffice_projects"}, {"score": 0.0021049977753042253, "phrase": "maintenance_cost"}], "paper_keywords": ["Bug reports", " Re-opened bugs", " Open source software"], "paper_abstract": "Bug fixing accounts for a large amount of the software maintenance resources. Generally, bugs are reported, fixed, verified and closed. However, in some cases bugs have to be re-opened. Re-opened bugs increase maintenance costs, degrade the overall user-perceived quality of the software and lead to unnecessary rework by busy practitioners. In this paper, we study and predict re-opened bugs through a case study on three large open source projects-namely Eclipse, Apache and OpenOffice. We structure our study along four dimensions: (1) the work habits dimension (e.g., the weekday on which the bug was initially closed), (2) the bug report dimension (e.g., the component in which the bug was found) (3) the bug fix dimension (e.g., the amount of time it took to perform the initial fix) and (4) the team dimension (e.g., the experience of the bug fixer). We build decision trees using the aforementioned factors that aim to predict re-opened bugs. We perform top node analysis to determine which factors are the most important indicators of whether or not a bug will be re-opened. Our study shows that the comment text and last status of the bug when it is initially closed are the most important factors related to whether or not a bug will be re-opened. Using a combination of these dimensions, we can build explainable prediction models that can achieve a precision between 52.1-78.6 % and a recall in the range of 70.5-94.1 % when predicting whether a bug will be re-opened. We find that the factors that best indicate which bugs might be re-opened vary based on the project. The comment text is the most important factor for the Eclipse and OpenOffice projects, while the last status is the most important one for Apache. These factors should be closely examined in order to reduce maintenance cost due to re-opened bugs.", "paper_title": "Studying re-opened bugs in open source software", "paper_id": "WOS:000322462000006"}