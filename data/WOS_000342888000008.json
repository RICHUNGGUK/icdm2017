{"auto_keywords": [{"score": 0.04942444706912143, "phrase": "pregel"}, {"score": 0.00481495049065317, "phrase": "linear_temporal_logic_model"}, {"score": 0.0047057084749407485, "phrase": "linear_temporal_logic"}, {"score": 0.004620093797504386, "phrase": "model_checking"}, {"score": 0.00443308765153716, "phrase": "safety-critical_hardware"}, {"score": 0.004100213700130772, "phrase": "ltl"}, {"score": 0.003988719758707836, "phrase": "state_explosion_problem"}, {"score": 0.0038981499110532273, "phrase": "insurmountable_scalability_problems"}, {"score": 0.003809628721278519, "phrase": "real-world_systems"}, {"score": 0.0036721416244816455, "phrase": "distributed_algorithms"}, {"score": 0.003555902292752528, "phrase": "ltl_model_checking"}, {"score": 0.0032585499655442404, "phrase": "huge_cluster_environments"}, {"score": 0.00283870598459543, "phrase": "distributed_computation"}, {"score": 0.0028127163745564777, "phrase": "large_graphs"}, {"score": 0.00257735013358606, "phrase": "large_cloud_setups"}, {"score": 0.002530359917257626, "phrase": "pregel's_power"}, {"score": 0.002472822097373027, "phrase": "new_vertex_centric"}, {"score": 0.002427732996314194, "phrase": "explicit_ltl_model_checking"}, {"score": 0.0023725232579531273, "phrase": "experimental_results"}, {"score": 0.002297327670408112, "phrase": "proposed_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Model checking", " Linear temporal logic", " Distributed memory algorithm", " Formal method", " Scalable algorithm", " Reliable model checker"], "paper_abstract": "Linear Temporal Logic (LTL) Model Checking is a very important and popular technique for the automatic verification of safety-critical hardware and software systems, aiming at ensuring their quality. However, it is well known that LTL model checking suffers from the state explosion problem, often leading to insurmountable scalability problems when applying it to real-world systems. While there has been work on distributed algorithms for explicit on-the-fly LTL model checking, these are not sufficiently scalable and capable of tolerating faults during computation, significantly limiting their usefulness in huge cluster environments. Moreover, implementing these algorithms is generally viewed as a very challenging, error-prone task. In this paper, we instead rely on Pregel, a simple yet powerful model for distributed computation on large graphs. Pregel has from the start been designed for efficient, scalable and fault tolerant operation on clusters of thousands of computers, including large cloud setups. To harness Pregel's power, we propose a new vertex centric distributed algorithm for explicit LTL model checking of concurrent systems. Experimental results illustrate feasibility and scalability of the proposed algorithm. Compared with other distributed algorithms, our algorithm is more scalable, reliable and efficient. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A vertex centric parallel algorithm for linear temporal logic model checking in Pregel", "paper_id": "WOS:000342888000008"}