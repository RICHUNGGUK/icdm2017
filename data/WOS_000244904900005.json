{"auto_keywords": [{"score": 0.046920155627789596, "phrase": "multithreaded_processes"}, {"score": 0.03135283516005389, "phrase": "working_thread"}, {"score": 0.00481501413591532, "phrase": "reliable"}, {"score": 0.004310173770196077, "phrase": "existing_user-level"}, {"score": 0.003760685138103153, "phrase": "single-threaded_applications"}, {"score": 0.003512702405367876, "phrase": "thread_suspension_point"}, {"score": 0.0034532961266947734, "phrase": "rollback_recovery"}, {"score": 0.003309124298009635, "phrase": "checkpointing_scheme"}, {"score": 0.0031440159350875057, "phrase": "existing_schemes"}, {"score": 0.002838033152426417, "phrase": "distinctive_strategy"}, {"score": 0.002539978170928796, "phrase": "suspension_point"}, {"score": 0.002475755804232436, "phrase": "api_code"}, {"score": 0.002433843373780471, "phrase": "kernel_code"}, {"score": 0.002372298201966367, "phrase": "correct_rollback_recovery"}, {"score": 0.0022926465161639633, "phrase": "inter-thread_synchronization"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["rollback recovery", " checkpointing scheme", " multithread"], "paper_abstract": "The existing user-level checkpointing schemes support only a limited portion of multithreaded programs because they are derived from the schemes for single-threaded applications. This paper addresses the impact of thread suspension point on rollback recovery, and presents a checkpointing scheme for multithreaded processes. Unlike the existing schemes in which the checkpointer suspends every working thread, our scheme employs a distinctive strategy that every working thread suspends itself. This technique manages to avoid the suspension point in the API code or kernel code, ensuring correct rollback recovery. Our scheme supports inter-thread synchronization and thread lifetime. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Reliable user-level rollback recovery implementation for multithreaded processes on windows", "paper_id": "WOS:000244904900005"}