{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "octree_mesh_generation"}, {"score": 0.004545240514015278, "phrase": "performance_impact"}, {"score": 0.004050116768809519, "phrase": "parallel_octree_method"}, {"score": 0.0038973170902076707, "phrase": "arbitrary_immersed_geometries"}, {"score": 0.0032777653153451265, "phrase": "tetrahedralization_scheme"}, {"score": 0.0030938932434437178, "phrase": "parallel_meshing_algorithm"}, {"score": 0.002977061391551628, "phrase": "linear_octree"}, {"score": 0.0026268961477241026, "phrase": "partitioning_strategy"}, {"score": 0.0024556852466581527, "phrase": "octree_refinement_load_balancing"}, {"score": 0.0022956075241520064, "phrase": "chosen_tetrahedralization_technique"}, {"score": 0.002251813863195168, "phrase": "algorithm_performance"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["octrees", " mesh generation", " finite element method", " parallel computing"], "paper_abstract": "This work discusses the performance impact from the tetrahedralization of non-conforming meshes generated by a parallel octree method capable of handling arbitrary immersed geometries. First, we review conforming techniques for meshes created from octrees. Then we implement a tetrahedralization scheme based on templates in a parallel meshing algorithm that uses a linear octree with 2: 1 balancing constraint. Besides, we also propose a change on the partitioning strategy for the same meshing algorithm to improve the octree refinement load balancing. Scalability analyses show that the chosen tetrahedralization technique preserves algorithm performance. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "Impact of tetrahedralization on parallel conforming octree mesh generation", "paper_id": "WOS:000339422400003"}