{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "reservoir_simulation"}, {"score": 0.004750527930368202, "phrase": "numerical_reservoir_simulations"}, {"score": 0.004708056866527125, "phrase": "newton's_method"}, {"score": 0.0043619799095455415, "phrase": "reservoir_simulators"}, {"score": 0.0041703614123283165, "phrase": "reservoir_simulation_equations"}, {"score": 0.003987126862293129, "phrase": "automatic_differentiation"}, {"score": 0.0037272031155266556, "phrase": "computational_efficiency"}, {"score": 0.003693846909452865, "phrase": "first_a_parse_tree"}, {"score": 0.0036443694410100507, "phrase": "mathematical_expression"}, {"score": 0.003531474887552889, "phrase": "backward_mode_ad"}, {"score": 0.003376216135716629, "phrase": "expression's_arguments"}, {"score": 0.0032423089921154503, "phrase": "pde's_independent_variables"}, {"score": 0.003198860258228543, "phrase": "first_stage"}, {"score": 0.003113696267229798, "phrase": "runtime_polymorphism"}, {"score": 0.003071965703296204, "phrase": "higher_flexibility"}, {"score": 0.0030307927228223883, "phrase": "compile-time_polymorphism"}, {"score": 0.0029901699209266435, "phrase": "faster_execution_speed"}, {"score": 0.00295008998986066, "phrase": "second_stage"}, {"score": 0.002897482096228207, "phrase": "linear_combinations"}, {"score": 0.0028715299874549245, "phrase": "sparse_vectors"}, {"score": 0.0027575842698911173, "phrase": "target_column_indices"}, {"score": 0.0027206133859493725, "phrase": "ad_framework"}, {"score": 0.0026481480455339055, "phrase": "in-house_reservoir_simulator"}, {"score": 0.00257760787870709, "phrase": "complex_mathematical_expressions"}, {"score": 0.0024641814990854463, "phrase": "manual_implementation"}, {"score": 0.0021920373388760314, "phrase": "complete_simulations"}, {"score": 0.002124036931047162, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "good_efficiency"}], "paper_keywords": ["Reservoir simulation", " Automatic differentiation", " Backward mode", " Expression template"], "paper_abstract": "In numerical reservoir simulations, Newton's method is a concise, robust and, perhaps the most commonly used method to solve nonlinear partial differential equations (PDEs). However, as reservoir simulators incorporate more and more physical and chemical phenomena, writing codes that compute gradients for reservoir simulation equations can become quite complicated. This paper presents an automatic differentiation (AD) framework that is specially designed for simplifying coding and simultaneously maintaining computational efficiency. First a parse tree for a mathematical expression is built and evaluated with the backward mode AD, and then the derivatives with respect to the expression's arguments are transformed to derivatives with respect to the PDE's independent variables. The first stage can be realized either by runtime polymorphism to gain higher flexibility or by compile-time polymorphism to gain faster execution speed; the second stage is realized by linear combinations of sparse vectors, which can be accelerated by recording the target column indices. The AD framework has been implemented in an in-house reservoir simulator. Individual tests on some complex mathematical expressions were carried out to compare the speed of the manual implementation, the runtime polymorphic implementation and the compile-time polymorphic implementation of the differentiation. Then the performance of the three was analyzed in complete simulations. These cases indicate that the proposed approach has good efficiency and is applicable to reservoir simulations.", "paper_title": "A backward automatic differentiation framework for reservoir simulation", "paper_id": "WOS:000345963200007"}