{"auto_keywords": [{"score": 0.039591220782297654, "phrase": "salb"}, {"score": 0.007448848616462958, "phrase": "dynamic_file_migration"}, {"score": 0.00481495049065317, "phrase": "parallel_file_system"}, {"score": 0.004568871736067739, "phrase": "load_imbalance_issue"}, {"score": 0.004529093447865156, "phrase": "parallel_file_systems"}, {"score": 0.004392565073466714, "phrase": "centralized_algorithms"}, {"score": 0.00433531459712787, "phrase": "lack_considerations"}, {"score": 0.004042295865725559, "phrase": "existing_solutions"}, {"score": 0.003937573222812911, "phrase": "large-scale_parallel_file_systems"}, {"score": 0.003529543381704363, "phrase": "distributed_architecture"}, {"score": 0.003408091901859624, "phrase": "network_transmission"}, {"score": 0.0032908057622663732, "phrase": "adaptively_adjusted_load_collection_threshold"}, {"score": 0.0032054891061528896, "phrase": "message_exchanges"}, {"score": 0.0031775430407770026, "phrase": "load_collection"}, {"score": 0.0030547611342112693, "phrase": "on-line_load_prediction_model"}, {"score": 0.002962543869356265, "phrase": "decision_delay"}, {"score": 0.0029110999689379497, "phrase": "network_transmission_latency"}, {"score": 0.002823207272381655, "phrase": "optimization_model"}, {"score": 0.0027741761880779535, "phrase": "migration_candidates"}, {"score": 0.0026091594819333654, "phrase": "extensive_experiments"}, {"score": 0.0025192983141887285, "phrase": "salb."}, {"score": 0.0024325244760735566, "phrase": "optimal_performance"}, {"score": 0.0023798115577749225, "phrase": "mean_response_time"}, {"score": 0.002328238264850759, "phrase": "resource_utilization"}, {"score": 0.0022480304016499605, "phrase": "simulation_results"}, {"score": 0.0021610874773389096, "phrase": "high_scalability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Distributed load balancing", " Parallel file systems", " On-line load prediction", " Load collection", " Dynamic file migration", " Adaptive algorithm"], "paper_abstract": "Many solutions have been proposed to tackle the load imbalance issue of parallel file systems. However, all these solutions either adopt centralized algorithms, or lack considerations for both the network transmission and the tradeoff between benefits and side-effects of each dynamic file migration. Therefore, existing solutions will be prohibitively inefficient in large-scale parallel file systems. To address this problem, this paper presents SALB, a dynamic and adaptive load balancing algorithm which is totally based on a distributed architecture. To be also aware of the network transmission, SALB on the one hand adopts an adaptively adjusted load collection threshold in order to reduce the message exchanges for load collection, and on the other hand it employs an on-line load prediction model with a view to reducing the decision delay caused by the network transmission latency. Moreover, SALB employs an optimization model for selecting the migration candidates so as to balance the benefits and the side-effects of each dynamic file migration. Extensive experiments are conducted to prove the effectiveness of SALB. The results show that SALB achieves an optimal performance not only on the mean response time but also on the resource utilization among the schemes for comparison. The simulation results also indicate that SALB is able to deliver high scalability. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "A dynamic and adaptive load balancing strategy for parallel file system with large-scale I/O servers", "paper_id": "WOS:000308276400009"}