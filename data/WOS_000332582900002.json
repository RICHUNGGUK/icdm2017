{"auto_keywords": [{"score": 0.03970319568713688, "phrase": "robust_algorithms"}, {"score": 0.031774417274259135, "phrase": "identical_machines"}, {"score": 0.02948911935693566, "phrase": "makespan_minimization"}, {"score": 0.02532769901905167, "phrase": "restricted_assignment"}, {"score": 0.00481495049065317, "phrase": "preemptive_scheduling"}, {"score": 0.004791945687452136, "phrase": "preemptive_scheduling_problems"}, {"score": 0.004769050269566434, "phrase": "parallel_machines"}, {"score": 0.004746263721902197, "phrase": "classic_problems"}, {"score": 0.004535124351828787, "phrase": "unrelated_machines"}, {"score": 0.004140490129683107, "phrase": "time_slots"}, {"score": 0.003871767208227377, "phrase": "sensitivity_analysis"}, {"score": 0.003853251284913932, "phrase": "online_algorithms"}, {"score": 0.003752979284571915, "phrase": "preemptive_schedules"}, {"score": 0.0036204213318519352, "phrase": "small_portion"}, {"score": 0.0035687137873965684, "phrase": "additional_part"}, {"score": 0.003417965040739015, "phrase": "new_piece"}, {"score": 0.003377228329725035, "phrase": "scheduling_problems"}, {"score": 0.0033530189377590884, "phrase": "supremum_ratio"}, {"score": 0.003328982509209245, "phrase": "total_size"}, {"score": 0.0031654684543975077, "phrase": "new_job"}, {"score": 0.003038983069081333, "phrase": "strongly_optimal_algorithm"}, {"score": 0.0030171910207671205, "phrase": "migration_factor"}, {"score": 0.002981216610222911, "phrase": "optimal_algorithms"}, {"score": 0.00296694687539797, "phrase": "idle_time"}, {"score": 0.002754277780398531, "phrase": "created_solution"}, {"score": 0.002606377976684801, "phrase": "smaller_migration_factor"}, {"score": 0.002362105010110277, "phrase": "optimal_algorithm"}, {"score": 0.0023451553255837317, "phrase": "constant_migration_factor"}, {"score": 0.0021561514733516654, "phrase": "optimal_schedule"}, {"score": 0.002140676472207928, "phrase": "small_migration_factor"}], "paper_keywords": ["Preemptive scheduling", " Migration factor", " Robust algorithms"], "paper_abstract": "Preemptive scheduling problems on parallel machines are classic problems. Given the goal of minimizing the makespan, they are polynomially solvable even for the most general model of unrelated machines. In these problems, a set of jobs is to be assigned to run on a set of m machines. A job can be split into parts arbitrarily and these parts are to be assigned to time slots on the machines without parallelism, that is, for every job, at most one of its parts can be processed at each time. Motivated by sensitivity analysis and online algorithms, we investigate the problem of designing robust algorithms for constructing preemptive schedules. Robust algorithms receive one piece of input at a time. They may change a small portion of the solution as an additional part of the input is revealed. The capacity of change is based on the size of the new piece of input. For scheduling problems, the supremum ratio between the total size of the jobs (or parts of jobs) which may be re-scheduled upon the arrival of a new job j, and the size of j, is called migration factor. We design a strongly optimal algorithm with the migration factor for identical machines. Strongly optimal algorithms avoid idle time and create solutions where the (non-increasingly) sorted vector of completion times of the machines is lexicographically minimal. In the case of identical machines this results not only in makespan minimization, but the created solution is also optimal with respect to any a\"\" (p) norm (for p > 1). We show that an algorithm of a smaller migration factor cannot be optimal with respect to makespan or any other a\"\" (p) norm, thus the result is best possible in this sense as well. We further show that neither uniformly related machines nor identical machines with restricted assignment admit an optimal algorithm with a constant migration factor. This lower bound holds both for makespan minimization and for any a\"\" (p) norm. Finally, we analyze the case of two machines and show that in this case it is still possible to maintain an optimal schedule with a small migration factor in the cases of two uniformly related machines and two identical machines with restricted assignment.", "paper_title": "Robust Algorithms for Preemptive Scheduling", "paper_id": "WOS:000332582900002"}