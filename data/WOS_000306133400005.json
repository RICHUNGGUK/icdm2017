{"auto_keywords": [{"score": 0.03962728690878925, "phrase": "new_approaches"}, {"score": 0.029246792331587727, "phrase": "context_boundaries"}, {"score": 0.00481495049065317, "phrase": "bounded_context_block-sorting_transformations"}, {"score": 0.004745375919191132, "phrase": "bwt"}, {"score": 0.004625983640628956, "phrase": "string_x"}, {"score": 0.004476878957065829, "phrase": "n_cyclic_rotations"}, {"score": 0.004412155302768363, "phrase": "full_lexicographical_order"}, {"score": 0.004348363291608004, "phrase": "last_column"}, {"score": 0.00430112267051817, "phrase": "resulting_nxn_matrix"}, {"score": 0.0038140261371648744, "phrase": "depth_k."}, {"score": 0.003213660268958121, "phrase": "reverse_transformation"}, {"score": 0.0030873424635143045, "phrase": "practical_performance"}, {"score": 0.0030537595549694134, "phrase": "reversal_algorithms"}, {"score": 0.002727362288104992, "phrase": "compressed_file"}, {"score": 0.0026105697442146357, "phrase": "reversal_technique"}, {"score": 0.002489667521500195, "phrase": "inherently_cache-friendly_and_hitherto_unobserved_behavior"}, {"score": 0.0023830293456003765, "phrase": "new_applications"}, {"score": 0.0023570895666021664, "phrase": "k-bwt_transform"}, {"score": 0.002314481096847367, "phrase": "previous_empirical_studies"}, {"score": 0.002264364091368269, "phrase": "partial_transform"}, {"score": 0.0021992217442375157, "phrase": "full_transform"}, {"score": 0.002159460831267798, "phrase": "compression_effectiveness"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["data compression", " Burrows-Wheeler transform", " block-sorting", " suffix array"], "paper_abstract": "The BurrowsWheeler Transform (BWT) produces a permutation of a string X, denoted X*, by sorting the n cyclic rotations of X into full lexicographical order and taking the last column of the resulting nxn matrix to be X*. The transformation is reversible inO(n) time. In this paper, we consider an alteration to the process, called k-BWT, where rotations are only sorted to a depth k. We propose new approaches to the forward and reverse transform, and show that the methods are efficient in practice. More than a decade ago, two algorithms were independently discovered for reversing k-BWT, both of which run inO(nk) time. Two recent algorithms have lowered the bounds for the reverse transformation toO(nlogk) andO(n), respectively. We examine the practical performance for these reversal algorithms. We find that the originalO(nk) approach is most efficient in practice, and investigates new approaches, aimed at further speeding reversal, which store precomputed context boundaries in the compressed file. By explicitly encoding the context boundaries, we present anO(n) reversal technique that is both efficient and effective. Finally, our study elucidates an inherently cache-friendly and hitherto unobserved behavior in the reverse k-BWT, which could lead to new applications of the k-BWT transform. In contrast to previous empirical studies, we show that the partial transform can be reversed significantly faster than the full transform, without significantly affecting compression effectiveness. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Revisiting bounded context block-sorting transformations", "paper_id": "WOS:000306133400005"}