{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "traceability_uncertainty"}, {"score": 0.004613940521007727, "phrase": "software_development_artifacts"}, {"score": 0.003668333531296882, "phrase": "key_people"}, {"score": 0.003210110095236981, "phrase": "software_engineers"}, {"score": 0.003159106878239524, "phrase": "arbitrary_assumption"}, {"score": 0.00304321897427383, "phrase": "code_-_even_assumptions"}, {"score": 0.002418742283474052, "phrase": "known_inconsistencies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Traceability", " Artifacts to code mapping", " Analysis"], "paper_abstract": "Traceability between software development artifacts and code has proven to save effort and improve quality. However, documenting and maintaining such traces remains highly unreliable. Traceability is rarely captured immediately while artifacts and code co-evolve. Instead they are recovered later. By then key people may have moved on or their recollection of facts may be incomplete and inconsistent. This paper proposes a language for capturing traceability that allows software engineers to express arbitrary assumption about the traceability between artifacts and code - even assumptions that may be inconsistent or incomplete. Our approach takes these assumptions to reasons about their logical consequences (hence increasing completeness) and to reveal inconsistencies (hence increasing correctness). In doing so, our approach's reasoning is correct even in the presence of known inconsistencies. This paper demonstrates the correctness and scalability of our approach on several, large-scale third-party software systems. Our approach is automated and tool supported. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Exploiting traceability uncertainty among artifacts and code", "paper_id": "WOS:000358969300009"}