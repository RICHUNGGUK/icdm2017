{"auto_keywords": [{"score": 0.04956452580235385, "phrase": "disjunctive_logic_programming"}, {"score": 0.04930986456658361, "phrase": "dlp"}, {"score": 0.033113631619151915, "phrase": "\"useless\"_rules"}, {"score": 0.00481495049065317, "phrase": "dlv_instantiator"}, {"score": 0.004789021572564387, "phrase": "backjumping_techniques"}, {"score": 0.004686688155058031, "phrase": "powerful_formalism"}, {"score": 0.004661446705304497, "phrase": "knowledge_representation"}, {"score": 0.004598933498016774, "phrase": "high_expressiveness"}, {"score": 0.004574162503084152, "phrase": "dlp_language"}, {"score": 0.004512814529823301, "phrase": "recent_availability"}, {"score": 0.004476399615305783, "phrase": "efficient_dlp_system"}, {"score": 0.00436890075128947, "phrase": "emerging_areas"}, {"score": 0.004345363360869553, "phrase": "knowledge_management_and_information_integration"}, {"score": 0.004240997872184065, "phrase": "huge_input_data"}, {"score": 0.004105716583606132, "phrase": "dlp_instantiators"}, {"score": 0.0040835912785965245, "phrase": "program_instantiation"}, {"score": 0.004050625770007516, "phrase": "first_phase"}, {"score": 0.004017925307648693, "phrase": "dlp_computation"}, {"score": 0.00386876598761639, "phrase": "ground_program"}, {"score": 0.003806541299696042, "phrase": "propositional_algorithms"}, {"score": 0.003775803846431323, "phrase": "second_phase"}, {"score": 0.0037150687722055727, "phrase": "instantiation_process"}, {"score": 0.00355782527287734, "phrase": "key_issue"}, {"score": 0.0035290890627455306, "phrase": "real-world_problems"}, {"score": 0.0034629341517018438, "phrase": "program_p"}, {"score": 0.003434961725919714, "phrase": "good_instantiation"}, {"score": 0.0033888405252810927, "phrase": "ground_program_p"}, {"score": 0.003361464584233189, "phrase": "precisely_the_same_answer"}, {"score": 0.002928399649340438, "phrase": "structure-based_backjumping_algorithm"}, {"score": 0.0028890603352364273, "phrase": "disjunctive_logic_programs"}, {"score": 0.002796782643988021, "phrase": "rule_r"}, {"score": 0.002707444334463544, "phrase": "structural_information"}, {"score": 0.002656650588033728, "phrase": "ground_instances"}, {"score": 0.002550984623734309, "phrase": "general_rule_r"}, {"score": 0.0024694784565650945, "phrase": "\"useless\"_instances"}, {"score": 0.002358444507044364, "phrase": "dlv"}, {"score": 0.0022402205906737883, "phrase": "experimentation_activity"}, {"score": 0.002222102813520549, "phrase": "ample_collection"}, {"score": 0.0022101055924375725, "phrase": "benchmark_problems"}, {"score": 0.0021922308351126746, "phrase": "experimental_results"}, {"score": 0.0021569129153653777, "phrase": "new_technique"}, {"score": 0.0021164256448611045, "phrase": "dlv_system"}], "paper_keywords": ["artificial intelligence", " logic programming", " nonmonotonic reasoning", " disjunctive logic programming", " answer set programming", " deductive databases", " stable model semantics"], "paper_abstract": "Disjunctive logic programming (DLP) is a powerful formalism for knowledge representation and reasoning. The high expressiveness of DLP language, together with the recent availability of some efficient DLP system, has favoured the application of DLP in emerging areas like Knowledge Management and Information Integration. These applications have often to deal with huge input data, and have evidenced the need to improve the efficiency of DLP instantiators. Program instantiation is the first phase of a DLP computation; in this phase, variables are replaced by constants to generate a ground program which is then evaluated by propositional algorithms in the second phase of the computation. The instantiation process may be computationally expensive, and in fact its efficiency has been recognized to be a key issue for solving real-world problems by using disjunctive logic programming. Given a program P, a good instantiation for P is a ground program P' having precisely the same answer sets as P and such that: (1) P' can be computed efficiently from P, and (2) P' does not contain \"useless\" rules, (P' is as small as possible) and can thus be evaluated efficiently. In this paper, we present a structure-based backjumping algorithm for the instantiation of disjunctive logic programs, that meets the above requirements. In particular, given a rule r to be grounded, our algorithm exploits both the semantical and the structural information about r for computing efficiently the ground instances of r, avoiding the generation of \"useless\" rules. That is, from each general rule r, we compute only a relevant subset of its ground instances, avoiding the generation of \"useless\" instances, while fully preserving the semantic of the program. We have implemented this algorithm in DLV-the state-of-the-art implementation of DLP-and we have carried out an experimentation activity on an ample collection of benchmark problems. The experimental results are very positive: the new technique improves sensibly the efficiency of the DLV system on many program classes.", "paper_title": "Enhancing DLV instantiator by backjumping techniques", "paper_id": "WOS:000254176500005"}