{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "combinatorial_test_cases"}, {"score": 0.02098596796106452, "phrase": "test_cases"}, {"score": 0.004767826806287385, "phrase": "incremental_interaction_coverage._combinatorial_interaction_testing"}, {"score": 0.004698000536608171, "phrase": "well-recognized_testing_method"}, {"score": 0.004278807087784626, "phrase": "combinatorial_test_suite"}, {"score": 0.0041136473765874815, "phrase": "testing_resources"}, {"score": 0.004013662619667083, "phrase": "alternative_assumption"}, {"score": 0.003312486229143855, "phrase": "interaction_coverage"}, {"score": 0.003168859801438632, "phrase": "unexecuted_test_case"}, {"score": 0.0031070348334684356, "phrase": "largest_number"}, {"score": 0.00307657476125683, "phrase": "uncovered_parameter_value_combinations"}, {"score": 0.0027469703311742647, "phrase": "previous_observations"}, {"score": 0.0026538282523433684, "phrase": "practical_systems"}, {"score": 0.002576503437739865, "phrase": "parameter_interactions"}, {"score": 0.002551231163230566, "phrase": "small_strengths"}, {"score": 0.0024891269874339553, "phrase": "new_strategy"}, {"score": 0.0023928819778638055, "phrase": "strength_values"}, {"score": 0.0023694065215394593, "phrase": "experimental_results"}, {"score": 0.0022777800735119405, "phrase": "random_prioritization_technique"}, {"score": 0.0022113879114507577, "phrase": "combinatorial_test_suites"}, {"score": 0.0021789194955896102, "phrase": "test_case_generation_order"}, {"score": 0.0021363670305843403, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "interaction-coverage-based_test_prioritization_technique"}], "paper_keywords": ["Software testing", " combinatorial interaction testing", " test case prioritization", " interaction coverage", " incremental interaction coverage", " algorithm"], "paper_abstract": "Combinatorial interaction testing is a well-recognized testing method, and has been widely applied in practice, often with the assumption that all test cases in a combinatorial test suite have the same fault detection capability. However, when testing resources are limited, an alternative assumption may be that some test cases are more likely to reveal failure, thus making the order of executing the test cases critical. To improve testing cost-effectiveness, prioritization of combinatorial test cases is employed. The most popular approach is based on interaction coverage, which prioritizes combinatorial test cases by repeatedly choosing an unexecuted test case that covers the largest number of uncovered parameter value combinations of a given strength (level of interaction among parameters). However, this approach suffers from some drawbacks. Based on previous observations that the majority of faults in practical systems can usually be triggered with parameter interactions of small strengths, we propose a new strategy of prioritizing combinatorial test cases by incrementally adjusting the strength values. Experimental results show that our method performs better than the random prioritization technique and the technique of prioritizing combinatorial test suites according to test case generation order, and has better performance than the interaction-coverage-based test prioritization technique in most cases.", "paper_title": "PRIORITIZATION OF COMBINATORIAL TEST CASES BY INCREMENTAL INTERACTION COVERAGE", "paper_id": "WOS:000335515100003"}