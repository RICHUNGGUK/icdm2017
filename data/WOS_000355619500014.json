{"auto_keywords": [{"score": 0.03375752728827863, "phrase": "spore"}, {"score": 0.00481495049065317, "phrase": "structural_information"}, {"score": 0.004745665541429529, "phrase": "non-trivial_graph_traversals"}, {"score": 0.004626796109657584, "phrase": "utilized_techniques"}, {"score": 0.004576763709613412, "phrase": "efficient_shortest_path"}, {"score": 0.004462105963334103, "phrase": "shortcut_construction"}, {"score": 0.004397875849247165, "phrase": "computationally_intensive_task"}, {"score": 0.004225950334493496, "phrase": "unnecessary_auxiliary_data"}, {"score": 0.0041051328120736575, "phrase": "large-scale_graphs"}, {"score": 0.004002242925856335, "phrase": "computation_time"}, {"score": 0.003916098498242888, "phrase": "computational_resources"}, {"score": 0.0038596974575361574, "phrase": "shortcut_construction_algorithms"}, {"score": 0.0037766095501754952, "phrase": "branching_factor"}, {"score": 0.0037493114715625784, "phrase": "sp_expansions"}, {"score": 0.003681923235979914, "phrase": "excessive_shortcuts"}, {"score": 0.0036157418067192136, "phrase": "repeated_sp_queries"}, {"score": 0.0035766032751309677, "phrase": "graph_mining_tasks"}, {"score": 0.003512308265830794, "phrase": "shortest_path_overlapped_region"}, {"score": 0.003350480663660326, "phrase": "shortcut_construction_performance"}, {"score": 0.003314260745092754, "phrase": "sp"}, {"score": 0.0033021988455635403, "phrase": "overlapped_regions"}, {"score": 0.0032783186166708985, "phrase": "path_overlapping"}, {"score": 0.003219368413618912, "phrase": "shortcut_construction_systems"}, {"score": 0.003059869469624301, "phrase": "auxiliary_shortcuts"}, {"score": 0.0030157628075954588, "phrase": "sp_trees"}, {"score": 0.0029400959763737364, "phrase": "exclusive_step"}, {"score": 0.0028045585284215044, "phrase": "extensive_graph_traversals"}, {"score": 0.0027741761880779535, "phrase": "similar_vertices"}, {"score": 0.0027341763737751467, "phrase": "realistic_implications"}, {"score": 0.002675252546913683, "phrase": "optimization_strategy"}, {"score": 0.00260810691979637, "phrase": "clustering_process"}, {"score": 0.0025892330566358503, "phrase": "confined_subgraph_traversals"}, {"score": 0.0025611773887867255, "phrase": "performance_evaluation"}, {"score": 0.0025242409510332527, "phrase": "real_and_synthetic_graphs"}, {"score": 0.0024968877430444304, "phrase": "execution_time_gain"}, {"score": 0.0023903999901926224, "phrase": "segtable_approach"}, {"score": 0.0023388674614404324, "phrase": "multiple_sp_computations"}, {"score": 0.0022801453935251503, "phrase": "entire_clustering_process"}, {"score": 0.002239103860494545, "phrase": "confined_subgraph_traversal_scheme"}, {"score": 0.0021592189144729775, "phrase": "undirected_graphs"}, {"score": 0.0021049977753042253, "phrase": "directed_graphs"}], "paper_keywords": ["Graph clustering", " Shortest path", " Dijkstra", " K-medoid clustering", " Density", " SPORE", " Shortest path tree", " Overlapping"], "paper_abstract": "An abundance of structural information has resulted in non-trivial graph traversals. Shortcut construction is among the utilized techniques implemented for efficient shortest path (SP) traversals on graphs. However, shortcut construction, being a computationally intensive task, required to be exclusive and offline, often produces unnecessary auxiliary data, i.e., shortcuts. Medium to large-scale graphs can take minutes to hours of computation time depending upon the utilization of computational resources and complexity of shortcut construction algorithms. In addition, the branching factor during SP expansions greatly increases due to excessive shortcuts. These factors make repeated SP queries unsuitable for graph mining tasks. This paper presents Shortest Path Overlapped Region (SPORE), a performance-based initiative that improves the shortcut construction performance by exploiting SP overlapped regions. Path overlapping has been overlooked by shortcut construction systems. SPORE takes advantage of this opportunity and provides a solution by constructing auxiliary shortcuts incrementally, using SP trees during traversals, instead of an exclusive step. SPORE is exposed to a graph clustering task, which requires extensive graph traversals to group similar vertices together, for realistic implications. We further suggest an optimization strategy to accelerate the performance of the clustering process using confined subgraph traversals. A performance evaluation of SPORE on real and synthetic graphs reveals an execution time gain of up to 40 %, having an order of magnitude fewer shortcuts over the SegTable approach. Leveraging the SPORE with multiple SP computations consistently reduces the latency of the entire clustering process. Furthermore, the confined subgraph traversal scheme improves the performance by an order of magnitude on undirected graphs, which is twice that of directed graphs.", "paper_title": "SPORE: shortest path overlapped regions and confined traversals towards graph clustering", "paper_id": "WOS:000355619500014"}