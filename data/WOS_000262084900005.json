{"auto_keywords": [{"score": 0.04681806191061653, "phrase": "concurrent_programs"}, {"score": 0.012931230982774818, "phrase": "test_sequence_generation_methods"}, {"score": 0.007995018610268674, "phrase": "test_sequences"}, {"score": 0.00481495049065317, "phrase": "reachability_graph-based"}, {"score": 0.00470325458481566, "phrase": "concurrent_programs."}, {"score": 0.0045726187330434025, "phrase": "sequence_generation"}, {"score": 0.00440403952059725, "phrase": "reachability_graph"}, {"score": 0.004085221464783815, "phrase": "coverage_criterion"}, {"score": 0.003897742942358768, "phrase": "sequential_programs"}, {"score": 0.003825173769489887, "phrase": "control_flow_graph"}, {"score": 0.0034332736827447654, "phrase": "major_difference"}, {"score": 0.0032602525602322832, "phrase": "feasibility_problem"}, {"score": 0.0026014425686078993, "phrase": "hot_spot_prioritization"}, {"score": 0.0024586427394152196, "phrase": "small_set"}, {"score": 0.002280333649167796, "phrase": "corresponding_dual_graph"}, {"score": 0.0021857667493036786, "phrase": "case_study"}], "paper_keywords": ["Reachability graph", " structural testing", " concurrent program testing", " all-node criterion", " all-edge criterion"], "paper_abstract": "One common approach to test sequence generation for structurally testing concurrent programs involves constructing a reachability graph (RG) and selecting a set of paths from the graph to satisfy some coverage criterion. It is often suggested that test sequence generation methods for testing sequential programs based on a control flow graph (CFG) can also be used to select paths from an RG for testing concurrent programs. However, there is a major difference between these two, as the former suffers from a feasibility problem (i.e.,some paths in a CFG may not be feasible at run-time) and the latter does not. As a result, even though test sequence generation methods for sequential programs can be applied to concurrent programs, they may not be efficient. We propose four methods - two based on hot spot prioritization and two based on topological sort - to effectively generate a small set of test sequences that covers all the nodes in an RG. The same methods are also applied to the corresponding dual graph for generating test sequences to cover all the edges. A case study was conducted to demonstrate the use of our methods.", "paper_title": "REACHABILITY GRAPH-BASED TEST SEQUENCE GENERATION FOR CONCURRENT PROGRAMS", "paper_id": "WOS:000262084900005"}