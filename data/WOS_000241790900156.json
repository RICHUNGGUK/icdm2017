{"auto_keywords": [{"score": 0.049496721057450455, "phrase": "intelligent_walks"}, {"score": 0.004234129588974058, "phrase": "different_workloads"}, {"score": 0.00410645614623058, "phrase": "random_walker"}, {"score": 0.0038389110156920926, "phrase": "low_success_rates"}, {"score": 0.0037921662574137535, "phrase": "high_latency"}, {"score": 0.003396237830812178, "phrase": "rw"}, {"score": 0.0033139366449568565, "phrase": "learning_ability"}, {"score": 0.003253560798692431, "phrase": "shortest_path_distance"}, {"score": 0.003213920601037463, "phrase": "node_neighbors"}, {"score": 0.002825681384008326, "phrase": "shortest_distance"}, {"score": 0.0027741761880779535, "phrase": "query_source"}, {"score": 0.0022519745140925475, "phrase": "experimental_results"}, {"score": 0.002210903392596343, "phrase": "new_method"}, {"score": 0.002183938718432764, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "success_rate"}], "paper_keywords": ["unstructured P2P", " search", " Random Walks and Intelligent Walks"], "paper_abstract": "Random Walks (RW) search technique can greatly reduce bandwidth production but generally fails to adapt to different workloads and environments. A Random Walker can't learn anything from its previous successes or failures, displaying low success rates and high latency. In this paper, we propose Intelligent Walks (IW) search mechanism - a modification of RW, exploiting the learning ability and the shortest path distance of node neighbors. A node probes its neighbors before forwarding the query. The probe is to find a candidate that has the shortest distance from the query source and/or has ever seen before the object that is going to be sent. If there isn't such candidate, then a node is chosen as usual (at random). The experimental results demonstrate that new method achieves better performance than RW in terms of success rate.", "paper_title": "Improving search in unstructured P2P systems: Intelligent Walks (I-Walks)", "paper_id": "WOS:000241790900156"}