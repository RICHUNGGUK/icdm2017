{"auto_keywords": [{"score": 0.048313706083567, "phrase": "reusable_components"}, {"score": 0.039379210173022164, "phrase": "component_composition"}, {"score": 0.031653507648654204, "phrase": "composition_pattern"}, {"score": 0.025299814282783602, "phrase": "design_patterns"}, {"score": 0.00481495049065317, "phrase": "pattern-based_components"}, {"score": 0.004695900553353526, "phrase": "large_software_systems"}, {"score": 0.004503959683578956, "phrase": "liberal_composition"}, {"score": 0.004074574278425223, "phrase": "even_a_higher_price"}, {"score": 0.003701401653850141, "phrase": "combination_problems"}, {"score": 0.0035947360742084253, "phrase": "development_process"}, {"score": 0.0034911335714333507, "phrase": "considerable_effort"}, {"score": 0.0033204052817782438, "phrase": "rigorous_method"}, {"score": 0.003197843245296877, "phrase": "combination_and_integration_problems"}, {"score": 0.0031186510842824626, "phrase": "software_development_lifecycle"}, {"score": 0.0028926147550022607, "phrase": "composition_solutions"}, {"score": 0.002856563331151566, "phrase": "routine_component_composition_problems"}, {"score": 0.002682917193736698, "phrase": "particular_application"}, {"score": 0.0023566987138026285, "phrase": "design_components"}, {"score": 0.002337066031028783, "phrase": "structural_and_behavioral_correctness_proofs"}, {"score": 0.0022507188208913394, "phrase": "case_studies"}, {"score": 0.002158505888557746, "phrase": "composition_patterns"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["design pattern", " formal specification and verification", " integration", " Modeling", " design component", " composition pattern", " temporal logic", " object-z"], "paper_abstract": "Designing large software systems out of reusable components has become increasingly popular. Although liberal composition of reusable components saves time and expense, many experiments indicate that people will pay for this (liberal composition) sooner or later, sometimes paying even a higher price than the savings obtained from reusing components. Thus, we advocate that more rigorous analysis methods to check the correctness of component composition would allow combination problems to be detected early in the development process so that people can save the considerable effort of fixing errors downstream. In this paper we describe a rigorous method for component composition that can be used to solve combination and integration problems at the (architectural) design phase of the software development lifecycle. In addition, we introduce the notion of composition pattern in order to promote the reuse of composition solutions to solve routine component composition problems. Once a composition pattern is proven correct, its instances can be used in a particular application without further proof. In this way, our proposed method involves reusing compositions as well as reusing components. We illustrate our approach through an example related to the composition of design patterns as design components. Structural and behavioral correctness proofs about the composition of design patterns are provided. Case studies are also presented to show the applications of the composition patterns. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Composing pattern-based components and verifying correctness", "paper_id": "WOS:000250433700001"}