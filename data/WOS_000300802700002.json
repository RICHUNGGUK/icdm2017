{"auto_keywords": [{"score": 0.03208723958700832, "phrase": "service-oriented_applications"}, {"score": 0.00481495049065317, "phrase": "web_services"}, {"score": 0.004756805752518494, "phrase": "service-oriented_computing"}, {"score": 0.004586531354697466, "phrase": "distributed_computing"}, {"score": 0.004086350434865782, "phrase": "safe_and_trustworthy_systems"}, {"score": 0.003618443379266972, "phrase": "current_foundational_research"}, {"score": 0.0027685531038981847, "phrase": "life_cycle"}, {"score": 0.002406799309495983, "phrase": "specification_style"}, {"score": 0.0022923586577645143, "phrase": "large_case_study"}, {"score": 0.0022508572821818124, "phrase": "automotive_domain"}], "paper_keywords": ["Service-oriented computing", " Formal methods", " Process calculi"], "paper_abstract": "Service-oriented computing, an emerging paradigm for distributed computing based on the use of services, is calling for the development of tools and techniques to build safe and trustworthy systems, and to analyse their behaviour. Therefore, many researchers have proposed to use process calculi, a cornerstone of current foundational research on specification and analysis of concurrent, reactive, and distributed systems. In this paper, we follow this approach and introduce C(sic)WS, a process calculus expressly designed for specifying and combining service-oriented applications, while modelling their dynamic behaviour, We show that C(sic)WS can model all the phases of the life cycle of service-oriented applications, such as publication, discovery, negotiation, orchestration, deployment, reconfiguration and execution. We illustrate the specification style that C(sic)WS supports by means of a large case study from the automotive domain and a number of more specific examples drawn from it. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A calculus for orchestration of web services", "paper_id": "WOS:000300802700002"}