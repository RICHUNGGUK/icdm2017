{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fuzzy_boolean_nets"}, {"score": 0.004714023408114857, "phrase": "strong_need"}, {"score": 0.004615202066192795, "phrase": "ever-increasing_volumes"}, {"score": 0.004504786051750715, "phrase": "real-time_processing_demands"}, {"score": 0.004370457120206237, "phrase": "complex_data-intensive_workflows"}, {"score": 0.004278807087784626, "phrase": "dataflow_management_systems"}, {"score": 0.004240116703465252, "phrase": "strict_temporal_synchronization"}, {"score": 0.004176405358988595, "phrase": "non-synchronous_behavior"}, {"score": 0.004064117897000019, "phrase": "ad-hoc_basis"}, {"score": 0.004015182362035361, "phrase": "additional_lines"}, {"score": 0.003813669883040509, "phrase": "large_set"}, {"score": 0.003767738552860633, "phrase": "continuous_and_incremental_processing"}, {"score": 0.003711098637056057, "phrase": "dataflow_applications"}, {"score": 0.003644249428737351, "phrase": "almost_no_difference"}, {"score": 0.0035894592199604246, "phrase": "previous_execution"}, {"score": 0.0031035049228517715, "phrase": "data_store"}, {"score": 0.0030475670155080247, "phrase": "processing_steps"}, {"score": 0.0028944757265206332, "phrase": "significant_and_meaningful_variation"}, {"score": 0.0028422946420821075, "phrase": "specified_freshness_limit"}, {"score": 0.0027995277077618604, "phrase": "qod_notion"}, {"score": 0.0027574024919144635, "phrase": "novel_dataflow_model"}, {"score": 0.002675039053570178, "phrase": "data-intensive_processing_steps"}, {"score": 0.0026188490199688013, "phrase": "nosql_storage"}, {"score": 0.002548331088496964, "phrase": "dynamic_qod_constraints"}, {"score": 0.002517600815544647, "phrase": "different_datasets"}, {"score": 0.002449802505107058, "phrase": "probabilistic_guarantees"}, {"score": 0.002405618568415162, "phrase": "cumulative_error"}, {"score": 0.002391067964886602, "phrase": "consecutive_dataflow_executions"}, {"score": 0.0023694065215394593, "phrase": "fluxy"}, {"score": 0.0022847009758393405, "phrase": "quality_boundaries"}, {"score": 0.0021436720821474973, "phrase": "task_prioritization"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Workflow", " Dataflow", " Incremental processing", " Continuous processing", " Data-intensive", " NoSQL", " Quality-of-service", " Machine learning", " Fuzzy logic"], "paper_abstract": "Currently, there is a strong need for organizations to analyze and process ever-increasing volumes of data in order to answer to real-time processing demands. Such continuous and data-intensive processing is often achieved through the composition of complex data-intensive workflows (i.e., dataflows). Dataflow management systems typically enforce strict temporal synchronization across the various processing steps. Non-synchronous behavior often has to be explicitly programmed on an ad-hoc basis, which requires additional lines of code in programs and thus the possibility of errors. More so, in a large set of scenarios for continuous and incremental processing, the output of dataflow applications at each execution can suffer almost no difference when comparing to the previous execution, and therefore resources, energy and computational power are unknowingly wasted. To face such lack of efficiency, transparency, and generality, we introduce the notion of Quality-of-Data (QoD), which describes the level of changes required on a data store that cause the triggering of processing steps. This, so that the dataflow (re-)execution is reduced until its outcome would reach a significant and meaningful variation, which is inside a specified freshness limit. Based on the QoD notion, we propose a novel dataflow model, with framework (Fluxy), for orchestrating data-intensive processing steps, which communicate data via a NoSQL storage, and whose triggering semantics is driven by dynamic QoD constraints automatically defined for different datasets by means of Fuzzy Boolean Nets. These nets give probabilistic guarantees about the prediction of the cumulative error between consecutive dataflow executions. With Fluxy, we demonstrate how dataflows can be leveraged to respond to quality boundaries (that can be seen as SLAs) to deliver controlled and augmented performance, rationalization of resources, and task prioritization. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Incremental dataflow execution, resource efficiency and probabilistic guarantees with Fuzzy Boolean nets", "paper_id": "WOS:000356189400006"}