{"auto_keywords": [{"score": 0.013939965940170225, "phrase": "spatial_differences"}, {"score": 0.012263505369704171, "phrase": "current_image"}, {"score": 0.00481495049065317, "phrase": "fast_histogram"}, {"score": 0.004740126725341152, "phrase": "histograms_computation"}, {"score": 0.00459393336391459, "phrase": "new_method"}, {"score": 0.004558091785667046, "phrase": "fast_histogram_computing"}, {"score": 0.004434824354230475, "phrase": "histogram_distance_computing"}, {"score": 0.0038817197332605647, "phrase": "specific_data_structure"}, {"score": 0.0034782306784111525, "phrase": "temporal_data"}, {"score": 0.003241203549050267, "phrase": "current_histograms"}, {"score": 0.0031907572162427978, "phrase": "reference_image_ones"}, {"score": 0.003141093559655865, "phrase": "preprocessing_step"}, {"score": 0.003056029284235528, "phrase": "well-known_integral_histogram"}, {"score": 0.0029966788947444535, "phrase": "better_results"}, {"score": 0.0029500270981001058, "phrase": "processing_time"}, {"score": 0.0029040994533437903, "phrase": "memory_footprint"}, {"score": 0.002825435048559866, "phrase": "experimental_results"}, {"score": 0.0026431267487109543, "phrase": "bhattacharyya_distance"}, {"score": 0.0025816239578784067, "phrase": "similar_incremental_approach"}, {"score": 0.002541417196444962, "phrase": "current_histogram_computations"}, {"score": 0.002462867872567125, "phrase": "reference_image"}, {"score": 0.0023129608058249937, "phrase": "updating_process"}, {"score": 0.002206536029072657, "phrase": "real_visual_tracking_application"}, {"score": 0.002180702259644951, "phrase": "particle_filter_framework"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Fast histogram computation", " Integral histogram", " Histogram-based distance"], "paper_abstract": "In this paper we present a new method for fast histogram computing and its extension to bin to bin histogram distance computing. The idea consists in using the information of spatial differences between images, or between regions of images (a current one and a reference one), and encoding it into a specific data structure: a tree. The histogram of the current image or of one of its regions is then computed by updating the histogram of the reference one using the temporal data stocked into the tree. With this approach, we never need to store any of the current histograms, except the reference image ones, as a preprocessing step. We compare our approach with the well-known Integral Histogram one, and obtain better results in terms of processing time while reducing the memory footprint. We show theoretically and with experimental results the superiority of our approach in many cases. We also extend our idea to the computation of the Bhattacharyya distance between two histograms, using a similar incremental approach that also avoid current histogram computations: we just need histograms of the reference image, and spatial differences between the reference and the current image to compute this distance using an updating process. Finally, we demonstrate the advantages of our approach on a real visual tracking application using a particle filter framework by improving its correction step computation time. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Tree-structured image difference for fast histogram and distance between histograms computation", "paper_id": "WOS:000286560600002"}