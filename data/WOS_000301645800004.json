{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "enhanced_life-cycle_support"}, {"score": 0.004625881588444304, "phrase": "flexible_process-aware_information_systems"}, {"score": 0.004466519142879166, "phrase": "declarative_approaches"}, {"score": 0.004334280585565239, "phrase": "high_degree"}, {"score": 0.004143196873246147, "phrase": "current_declarative_approaches"}, {"score": 0.0038239757564863057, "phrase": "better_understandability"}, {"score": 0.0037480753312398754, "phrase": "declarative_processes"}, {"score": 0.0036921366375716005, "phrase": "well-established_techniques"}, {"score": 0.0036007478932719417, "phrase": "software_engineering"}, {"score": 0.003459191419478298, "phrase": "test-driven_development"}, {"score": 0.003424677513304057, "phrase": "automated_acceptance_testing"}, {"score": 0.003339886795391701, "phrase": "process_specification"}, {"score": 0.003306559295382181, "phrase": "process_testing"}, {"score": 0.0030060256866508606, "phrase": "hard_mental_operations"}, {"score": 0.0029611289031152856, "phrase": "hidden_dependencies"}, {"score": 0.0027464781499539296, "phrase": "domain_experts"}, {"score": 0.002719055901632759, "phrase": "model_builders"}, {"score": 0.002665027876903161, "phrase": "common_basis"}, {"score": 0.0025989960809479104, "phrase": "process_execution"}, {"score": 0.0024348510123716424, "phrase": "process_deviations"}, {"score": 0.0023864566654035924, "phrase": "respective_deviations"}, {"score": 0.002315658491366464, "phrase": "schema_evolution"}, {"score": 0.002224510044064184, "phrase": "undesired_behavior"}, {"score": 0.0021802872319258977, "phrase": "process_adaptations"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Business Process Management", " Declarative Business Process Models", " Business Process Life-Cycle", " Process Model Understandability", " Process Model Maintainability"], "paper_abstract": "The need for flexible process-aware information systems resulted in a recent interest in declarative approaches, as they promise a high degree of flexibility. However, the potential of current declarative approaches is impeded by deficiencies in understandability and maintainability. This paper proposes an approach toward better understandability and maintainability of declarative processes by adopting well-established techniques from the domain of software engineering. More specifically, the ideas of test-driven development and automated acceptance testing are adopted to interweave process specification and process testing. Thereby, during modeling, testcases balance the circumstantial/sequential information mismatch as well as improve understandability by dispensing with hard mental operations and removing hidden dependencies. Because testcases are also understandable to domain experts, they foster communication between domain experts and model builders, providing a common basis for communication. During process execution, testcases, in turn, help to document the reasons for process deviations and ensure that respective deviations can be easily considered during schema evolution. Furthermore, testcases ensure that no undesired behavior is introduced through process adaptations. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Toward enhanced life-cycle support for declarative processes", "paper_id": "WOS:000301645800004"}