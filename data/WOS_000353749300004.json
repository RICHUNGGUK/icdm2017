{"auto_keywords": [{"score": 0.036157184853917924, "phrase": "real-time_systems"}, {"score": 0.013604441232046493, "phrase": "execution_time"}, {"score": 0.013370460885554925, "phrase": "io"}, {"score": 0.011736326502856321, "phrase": "idle_cycles"}, {"score": 0.010240344203664332, "phrase": "mips_rate_stabilization"}, {"score": 0.00481495049065317, "phrase": "dynamic_mips_rate_stabilization_for_complex_processors"}, {"score": 0.004786920391043703, "phrase": "modern_microprocessor_cores"}, {"score": 0.004690087809770101, "phrase": "high_clock_rates"}, {"score": 0.004662781189062896, "phrase": "parallel_and_speculative_execution"}, {"score": 0.004622117681584228, "phrase": "large_number"}, {"score": 0.00455512808829153, "phrase": "vast_cache_hierarchies"}, {"score": 0.0045286036546553585, "phrase": "modern_cores"}, {"score": 0.004489105014468467, "phrase": "adaptive_features"}, {"score": 0.004385444037750123, "phrase": "thermal_emergencies"}, {"score": 0.004284166465861172, "phrase": "highly_unpredictable_execution_times"}, {"score": 0.003936173428000934, "phrase": "ooo_simultaneous_multithreaded_processors"}, {"score": 0.003712727798045068, "phrase": "feedback_controller"}, {"score": 0.00369109045832434, "phrase": "dynamic_voltage"}, {"score": 0.003605790233099356, "phrase": "processor_cores"}, {"score": 0.0030345041068691224, "phrase": "mips_rate"}, {"score": 0.002990455094600558, "phrase": "stabilized_processor"}, {"score": 0.00289577845874603, "phrase": "quality-of-service_execution_latency_requirements"}, {"score": 0.002723253153997129, "phrase": "mibench_benchmarks"}, {"score": 0.002699458144376203, "phrase": "widest_execution_rate_variations"}, {"score": 0.0024798667494928795, "phrase": "io_and_ooo_cores"}, {"score": 0.002436708489257137, "phrase": "stabilization_framework"}, {"score": 0.0023733719821584275, "phrase": "stabilized_ooo_core"}, {"score": 0.0023184530549771815, "phrase": "lower_frequency"}, {"score": 0.002258183361711707, "phrase": "complex_processors"}, {"score": 0.00223844287825642, "phrase": "pid_feedback_control_loop"}, {"score": 0.0022188745774815847, "phrase": "general_technique"}, {"score": 0.0021802485562376047, "phrase": "lower_power"}], "paper_keywords": ["Processor Architectures", " Performance of Systems", " Power", " energy", " EPI"], "paper_abstract": "Modern microprocessor cores reach their high performance levels with the help of high clock rates, parallel and speculative execution of a large number of instructions, and vast cache hierarchies. Modern cores also have adaptive features to regulate power and temperature and avoid thermal emergencies. All of these features contribute to highly unpredictable execution times. In this article, we demonstrate that the execution time of in-order (IO), out-of-order (OoO), and OoO simultaneous multithreaded processors can be stable and predictable by stabilizing their mega instructions executed per second (MIPS) rate via a proportional, integral, and differential (PID) gain feedback controller and dynamic voltage and frequency scaling (DVFS). Processor cores in idle cycles are continuously consuming power, which is highly undesirable in systems, especially in real-time systems. In addition to meeting deadlines in real-time systems, our MIPS rate stabilization framework can be applied on top of it to reduce power and energy by avoiding idle cycles. If processors are equipped with MIPS rate stabilization, the execution time can be predicted. Because the MIPS rate remains steady, a stabilized processor meets deadlines on time in real-time systems or in systems with quality-of-service execution latency requirements at the lowest possible frequency. To demonstrate and evaluate this capability, we have selected a subset of the MiBench benchmarks with the widest execution rate variations. We stabilize their MIPS rate on a 1GHz Pentium III-like OoO singlethread microarchitecture, a 1.32GHz StrongARM-like IO microarchitecture, and the 1GHz OoO processor augmented with two-way and four-way simultaneous multithreading. Both IO and OoO cores can take advantage of the stabilization framework, but the energy per instruction of the stabilized OoO core is less because it runs at a lower frequency to meet the same deadlines. The MIPS rate stabilization of complex processors using a PID feedback control loop is a general technique applicable to environments in which lower power or energy coupled with steady, predictable performance are desirable, although we target more specifically real-time systems in this article.", "paper_title": "Dynamic MIPS Rate Stabilization for Complex Processors", "paper_id": "WOS:000353749300004"}