{"auto_keywords": [{"score": 0.04258499561350143, "phrase": "model_checking"}, {"score": 0.015719716506582538, "phrase": "timed_automata"}, {"score": 0.004721893473387288, "phrase": "counterexample-guided_abstraction_refinement_loop"}, {"score": 0.004424441580112395, "phrase": "high-reliable_information_systems"}, {"score": 0.004338898899247236, "phrase": "well-known_problem"}, {"score": 0.004012885020428863, "phrase": "large_systems"}, {"score": 0.0033006894756949776, "phrase": "e._clarke_et_al"}, {"score": 0.0031741489723036255, "phrase": "concrete_abstraction_technique"}, {"score": 0.0030326180561817497, "phrase": "real_time_systems"}, {"score": 0.0029163246959273605, "phrase": "cegar."}, {"score": 0.002804478352027886, "phrase": "counter_example"}, {"score": 0.002679386232765167, "phrase": "abstract_model"}, {"score": 0.002543224008253855, "phrase": "refinement_operation"}, {"score": 0.002477753633057247, "phrase": "abstract_models"}, {"score": 0.0023982749733789882, "phrase": "original_timed_automaton"}, {"score": 0.0023062508214156123, "phrase": "refined_abstract_models"}, {"score": 0.0022615684627308283, "phrase": "modified_automaton"}, {"score": 0.002189009136006588, "phrase": "formal_descriptions"}, {"score": 0.0021049977753042253, "phrase": "correctness_proof"}], "paper_keywords": ["model checking", " timed automaton", " model abstraction", " CEGAR"], "paper_abstract": "Model checking techniques are useful for design of high-reliable information systems. The well-known problem of state explosion, however, might occur in model checking of large systems. Such explosion severely limits the scalability of model checking. In order to avoid it, several abstraction techniques have been proposed. Some of them are based on Counter Example-Guided Abstraction Refinement (CEGAR) loop technique proposed by E. Clarke et al.. This paper proposes a concrete abstraction technique for timed automata used in model checking of real time systems. Our technique is based on CEGAR. in which we use a counter example as a guide to refine the abstract model. Although, in general, the refinement operation is applied to abstract models, our method modifies the original timed automaton. Next, we generate refined abstract models from the modified automaton. This paper describes formal descriptions of the algorithm and the correctness proof of the algorithm.", "paper_title": "An Abstraction Refinement Technique for Timed Automata Based on Counterexample-Guided Abstraction Refinement Loop", "paper_id": "WOS:000279136500007"}