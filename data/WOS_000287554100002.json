{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "separation_logic"}, {"score": 0.005661306076446728, "phrase": "reference_types"}, {"score": 0.0047273577269638725, "phrase": "simple_but_powerful_technique"}, {"score": 0.00461302961851157, "phrase": "low-level_imperative_programs"}, {"score": 0.004529093447865156, "phrase": "shared_data_structures"}, {"score": 0.004157058883925715, "phrase": "heap_location"}, {"score": 0.004007083686875716, "phrase": "unique_reference"}, {"score": 0.0035019105321572905, "phrase": "java"}, {"score": 0.00327356326590461, "phrase": "high-level_languages"}, {"score": 0.0031942814007173254, "phrase": "strong_updates"}, {"score": 0.003022825806274343, "phrase": "\"weak_updates"}, {"score": 0.002878140062594849, "phrase": "global_\"heap_type"}, {"score": 0.0027572166867780275, "phrase": "type-preserving_heap_updates"}, {"score": 0.002530359917257626, "phrase": "elegantly_reasons"}, {"score": 0.002453934333239467, "phrase": "strong_and_weak_updates"}, {"score": 0.0023798115577749225, "phrase": "semantic_framework"}, {"score": 0.002104997879802582, "phrase": "slw"}], "paper_keywords": ["Weak Updates", " Separation Logic", " Type Systems", " Mutable References", " Language Interoperation"], "paper_abstract": "Separation logic provides a simple but powerful technique for reasoning about low-level imperative programs that use shared data structures. Unfortunately, separation logic supports only \"strong updates,\" in which mutation to a heap location is safe only if a unique reference is owned. This limits the applicability of separation logic when reasoning about the interaction between many high-level languages (e.g., ML, Java, C#) and low-level ones since the high-level languages do not support strong updates. Instead, they adopt the discipline of \"weak updates,\" in which there is a global \"heap type\" to enforce the invariant of type-preserving heap updates. We present SLW, a logic that extends separation logic with reference types and elegantly reasons about the interaction between strong and weak updates. We describe a semantic framework for reference types, which is used to prove the soundness of SLW. Finally, we show how to extend SLW with concurrency.", "paper_title": "Weak Updates and Separation Logic", "paper_id": "WOS:000287554100002"}