{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "complex_software_systems"}, {"score": 0.004123781267600542, "phrase": "unified_framework"}, {"score": 0.003997891221012094, "phrase": "abstract_components"}, {"score": 0.003680587852807675, "phrase": "integration_rules"}, {"score": 0.0033190180867511605, "phrase": "coalgebraic_definition"}, {"score": 0.0030872017736888113, "phrase": "categorical_representation"}, {"score": 0.0029013950320185573, "phrase": "large_family"}, {"score": 0.002755104031926742, "phrase": "state-based_systems"}, {"score": 0.0025892330566358503, "phrase": "compositional_conformance_testing"}, {"score": 0.0023834640793589414, "phrase": "correct_interacting_components"}, {"score": 0.002310578855290687, "phrase": "integration_operators"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Component based system", " Integration operators", " Trace semantics", " Transfer function", " Compositional testing", " Conformance testing", " Coalgebra", " Monad"], "paper_abstract": "The contribution of this paper is twofold: first, it defines a unified framework for modelling abstract components, as well as a formalization of integration rules to combine their behaviour. This is based on a coalgebraic definition of components, which is a categorical representation allowing the unification of a large family of formalisms for specifying state-based systems. Second, it studies compositional conformance testing i.e. checking whether an implementation made of correct interacting components combined with integration operators conforms to its specification. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A formal abstract framework for modelling and testing complex software systems", "paper_id": "WOS:000308672200004"}