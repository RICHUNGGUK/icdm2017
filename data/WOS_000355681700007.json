{"auto_keywords": [{"score": 0.04522176534199054, "phrase": "abs"}, {"score": 0.00481495049065317, "phrase": "abstract_behavioral_specifications"}, {"score": 0.004524624065803229, "phrase": "testing_techniques"}, {"score": 0.004405596416783185, "phrase": "abstract_behavioral_specification"}, {"score": 0.0040309035566691645, "phrase": "industrial_case_study"}, {"score": 0.0038556354709511818, "phrase": "formal_modeling_language"}, {"score": 0.0033442114331500407, "phrase": "subtle_bugs"}, {"score": 0.0030595112110658675, "phrase": "steady_adaptation"}, {"score": 0.0029789104204803137, "phrase": "static_analysis_techniques"}, {"score": 0.0028492532869274743, "phrase": "abstract_language"}, {"score": 0.00258347644721642, "phrase": "analytic_methods"}, {"score": 0.002470987929071079, "phrase": "fully_automated_testing_techniques"}, {"score": 0.0023845255359681143, "phrase": "glass-box_test_generation"}, {"score": 0.0023010815714140467, "phrase": "runtime_assertion_checking"}, {"score": 0.0021049977753042253, "phrase": "industrial_setting"}], "paper_keywords": ["Automated testing", " Industrial case study", " Black-box testing", " Glass-box testing", " Runtime assertion checking"], "paper_abstract": "We present a range of testing techniques for the Abstract Behavioral Specification (ABS) language and apply them to an industrial case study. ABS is a formal modeling language for highly variable, concurrent, component-based systems. The nature of these systems makes them susceptible to the introduction of subtle bugs that are hard to detect in the presence of steady adaptation. While static analysis techniques are available for an abstract language such as ABS, testing is still indispensable and complements analytic methods. We focus on fully automated testing techniques including black-box and glass-box test generation as well as runtime assertion checking, which are shown to be effective in an industrial setting.", "paper_title": "Testing abstract behavioral specifications", "paper_id": "WOS:000355681700007"}