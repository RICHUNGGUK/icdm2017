{"auto_keywords": [{"score": 0.031218589576971885, "phrase": "parallel_components"}, {"score": 0.009375741846188937, "phrase": "oracle_problem"}, {"score": 0.0070472621231820205, "phrase": "low-order_polynomial_time"}, {"score": 0.006707296518466607, "phrase": "np"}, {"score": 0.005921376603758775, "phrase": "tester_observability"}, {"score": 0.00481495049065317, "phrase": "message_sequence_charts"}, {"score": 0.004696491408936132, "phrase": "popular_language"}, {"score": 0.004486800020569973, "phrase": "significant_interest"}, {"score": 0.003768426876815755, "phrase": "msc_specification"}, {"score": 0.003645192746918234, "phrase": "entirely_independent_local_testers"}, {"score": 0.003482276061796395, "phrase": "local_testers"}, {"score": 0.003285380677401785, "phrase": "local_observability"}, {"score": 0.0027133032795773697, "phrase": "polynomial_time"}], "paper_keywords": ["testing", " oracle problems", " message sequence charts"], "paper_abstract": "Message sequence charts (MSCs) form a popular language in which scenario-based specifications and models can be written. There has been significant interest in automating aspects of testing from MSCs. This paper concerns the Oracle Problem, in which we have an observation made in testing and wish to know whether this is consistent with the specification. We assume that there is an MSC specification and consider the case where we have entirely independent local testers (local observability) and where the observations of the local testers are logged and brought together (tester observability). It transpires that, under local observability, the Oracle Problem can be solved in low-order polynomial time if we use sequencing, loops and choices, but becomes NP-complete if we also allow parallel components; if we place a bound on the number of parallel components, then it again can be solved in polynomial time. For tester observability, the problem is NP-complete when we have either loops or choices. However, it can be solved in low-order polynomial time if we have only one loop, no choices and no parallel components. If we allow parallel components, then the Oracle Problem is NP-complete for tester observability even if we restrict to the case where there are at most two processes.", "paper_title": "The Oracle Problem When Testing from MSCs", "paper_id": "WOS:000338648900004"}