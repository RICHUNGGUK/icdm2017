{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "context-aware_adaptive_applications"}, {"score": 0.046530101197985334, "phrase": "user-configured_adaptation_rules"}, {"score": 0.026369545366370917, "phrase": "false_positives"}, {"score": 0.004567129988306349, "phrase": "large_body"}, {"score": 0.004270003565426343, "phrase": "rule-based_context-aware_applications"}, {"score": 0.003953932197201054, "phrase": "environmental_dynamics"}, {"score": 0.003916098498242888, "phrase": "adaptation_faults"}, {"score": 0.003643607569483598, "phrase": "state_transition_model"}, {"score": 0.0035914230856777586, "phrase": "rba"}, {"score": 0.0034892684482068347, "phrase": "model's_state_space"}, {"score": 0.0033575566897536906, "phrase": "numerous_false_positives"}, {"score": 0.003049555059533735, "phrase": "real_deployment"}, {"score": 0.0029203055813347874, "phrase": "false_positive_problem"}, {"score": 0.002864628676257225, "phrase": "domain_model"}, {"score": 0.0028235667474151714, "phrase": "environment_model"}, {"score": 0.002716915166374506, "phrase": "hidden_features"}, {"score": 0.0026268961477241026, "phrase": "rba's_running_environment"}, {"score": 0.0025398521156505425, "phrase": "deterministic_constraints"}, {"score": 0.0025155150482635688, "phrase": "probabilistic_constraints"}, {"score": 0.002432152706473349, "phrase": "remaining_faults"}, {"score": 0.0022302306304023602, "phrase": "true_positives"}, {"score": 0.002166711569953301, "phrase": "fault_list"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Adaptation fault", " Deterministic constraint", " Probabilistic constraint", " False positive", " Fault ranking"], "paper_abstract": "Context-aware adaptive applications continually sense and adapt to their changing environments. A large body of such applications relies on user-configured adaptation rules to customize their behavior. We call them rule-based context-aware applications (or RBAs for short). Due to the complexity required for adequately modeling environmental dynamics, adaptation faults are common in these RBAs. One promising approach to detecting such faults is to build a state transition model for an RBA, and exhaustively explore the model's state space. However, it can suffer from numerous false positives. For example, 78.6% of 784 reported faults for one popular RBA - PhoneAdapter, turn out to be false in a real deployment. In this paper, we address this false positive problem by inferring a domain model and an environment model for an RBA. The two models capture the hidden features inside user-configured adaptation rules as well as the RBA's running environment. We formulate these features as deterministic constraints and probabilistic constraints to prune false positives and effectively prioritize remaining faults. Our experiments on two real RBAs report that this approach successfully removes 46.5% of false positives and ranks 86.2% of true positives to the top of the fault list. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "AFChecker: Effective model checking for context-aware adaptive applications", "paper_id": "WOS:000315013400022"}