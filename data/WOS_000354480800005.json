{"auto_keywords": [{"score": 0.04775015696831476, "phrase": "object-oriented_design"}, {"score": 0.04643980196724531, "phrase": "data_extensions"}, {"score": 0.0437462115382649, "phrase": "software_evolution"}, {"score": 0.00481495049065317, "phrase": "data_types"}, {"score": 0.004657653216262924, "phrase": "new_data_variants"}, {"score": 0.004619134710069517, "phrase": "new_operations"}, {"score": 0.004112020122418323, "phrase": "operation_extensions"}, {"score": 0.00399415558125301, "phrase": "functional_design"}, {"score": 0.0039446780026489905, "phrase": "large_body"}, {"score": 0.0039120325834029355, "phrase": "programming_language_research"}, {"score": 0.003540661500026125, "phrase": "language_design_standpoint"}, {"score": 0.003340475943517995, "phrase": "large_sample"}, {"score": 0.0033128141572497704, "phrase": "smalltalk_projects"}, {"score": 0.0030231983220281836, "phrase": "prevalent_evolution_tasks"}, {"score": 0.0028760125558659907, "phrase": "object-oriented_software"}, {"score": 0.002624482632439123, "phrase": "visitor_pattern"}, {"score": 0.002591927716261631, "phrase": "object-oriented_solution"}, {"score": 0.002404885278896803, "phrase": "third_parties"}, {"score": 0.002268769196700254, "phrase": "practical_support"}, {"score": 0.0022220423638260015, "phrase": "program_decomposition_approaches"}, {"score": 0.0021403407314754615, "phrase": "programming_language"}, {"score": 0.0021049977753042253, "phrase": "development_environment"}], "paper_keywords": ["Object-oriented programming", " Software evolution", " Data extensions", " Operation extensions", " Empirical studies", " Mining software repositories"], "paper_abstract": "As software evolves, data types have to be extended, possibly with new data variants or new operations. Object-oriented design is well-known to support data extensions well. In fact, most popular books showcase data extensions to illustrate how objects adequately support software evolution. Conversely, operation extensions are typically better supported by a functional design. A large body of programming language research has been devoted to the challenge of properly supporting both kinds of extensions. While this challenge is well-known from a language design standpoint, it has not been studied empirically. We perform such a study on a large sample of Smalltalk projects (over half a billion lines of code) and their evolution over more than 130,000 committed changes. Our study of extensions during software evolution finds that extensions are indeed prevalent evolution tasks, and that both kinds of extensions are equally common in object-oriented software. We also discuss findings about: the evolution of the kinds of extensions over time; the viability of the Visitor pattern as an object-oriented solution to operation extensions; the change-proneness of extensions; and the prevalence of extensions by third parties. This study suggests that object-oriented design alone is not sufficient, and that practical support for both kinds of program decomposition approaches are in fact needed, either by the programming language or by the development environment.", "paper_title": "Object-oriented software extensions in practice", "paper_id": "WOS:000354480800005"}