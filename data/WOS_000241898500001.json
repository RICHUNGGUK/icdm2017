{"auto_keywords": [{"score": 0.036713517235485056, "phrase": "state_diagrams"}, {"score": 0.00481495049065317, "phrase": "modelling_recursive_calls"}, {"score": 0.004548253531664032, "phrase": "unified_modelling_language_state_diagrams"}, {"score": 0.004420472010542188, "phrase": "important_use"}, {"score": 0.004175533280178052, "phrase": "synchronous_object-oriented_software_systems"}, {"score": 0.0038698476651328898, "phrase": "interesting_object_behaviour"}, {"score": 0.0037610536973798113, "phrase": "method_invocation"}, {"score": 0.0035525230119401153, "phrase": "previous_work"}, {"score": 0.0033875770020590796, "phrase": "asynchronous_communication"}, {"score": 0.003051073364818384, "phrase": "synchronous_case"}, {"score": 0.0027218799769229596, "phrase": "recursive_calls"}, {"score": 0.002522344964242888, "phrase": "second_synchronous_message"}], "paper_keywords": ["UML", " object-oriented modelling", " protocol state machines", " state machines", " recursion", " callbacks"], "paper_abstract": "An important use of the Unified Modelling Language (UML) is modelling synchronous object-oriented software systems. State diagrams are used to model interesting object behaviour, including method invocation. However, almost all previous work formalising state diagrams has assumed asynchronous communication. We show that UML's \"run to completion\" semantics leads to anomalous behaviour in the synchronous case, and in particular that it is not possible to model recursive calls, in which an object receives a second synchronous message whilst still in the process of reacting to the first. We propose a solution using state diagrams in two complementary ways.", "paper_title": "On modelling recursive calls and callbacks with two variants of Unified Modelling Language state diagrams", "paper_id": "WOS:000241898500001"}