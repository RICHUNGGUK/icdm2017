{"auto_keywords": [{"score": 0.02951743842201432, "phrase": "assumption_alphabets"}, {"score": 0.004742290714667451, "phrase": "assume-guarantee_reasoning"}, {"score": 0.004670722261414736, "phrase": "-guarantee_reasoning"}, {"score": 0.004600228893803583, "phrase": "\"divide-and-conquer\"_approach"}, {"score": 0.004395040468458808, "phrase": "system_components"}, {"score": 0.004241771072194993, "phrase": "component's_environment"}, {"score": 0.004198965651975536, "phrase": "developing_appropriate_assumptions"}, {"score": 0.00409382470158851, "phrase": "difficult_and_manual_process"}, {"score": 0.0038520615699124123, "phrase": "assume-guarantee_verification"}, {"score": 0.0037555742428544096, "phrase": "incremental_and_fully_automated_fashion"}, {"score": 0.003642962673467835, "phrase": "off-the-shelf_learning_algorithm"}, {"score": 0.003144345057121367, "phrase": "different_assume-guarantee_rules"}, {"score": 0.002943502888225748, "phrase": "alphabet_refinement"}, {"score": 0.0027414948679658816, "phrase": "refinement_technique"}, {"score": 0.0026057256900479026, "phrase": "minimal_interface"}, {"score": 0.002203509076886664, "phrase": "learning_framework"}, {"score": 0.002148226022654619, "phrase": "case_studies"}, {"score": 0.0021049977753042253, "phrase": "compositional_verification"}], "paper_keywords": ["assume-guarantee reasoning", " model checking", " labeled transition systems", " learning", " proof rules", " compositional verification", " safety properties"], "paper_abstract": "Assume-guarantee reasoning enables a \"divide-and-conquer\" approach to the verification of large systems that checks system components separately while using assumptions about each component's environment. Developing appropriate assumptions used to be a difficult and manual process. Over the past five years, we have developed a framework for performing assume-guarantee verification of systems in an incremental and fully automated fashion. The framework uses an off-the-shelf learning algorithm to compute the assumptions. The assumptions are initially approximate and become more precise by means of counterexamples obtained by model checking components separately. The framework supports different assume-guarantee rules, both symmetric and asymmetric. Moreover, we have recently introduced alphabet refinement, which extends the assumption learning process to also infer assumption alphabets. This refinement technique starts with assumption alphabets that are a subset of the minimal interface between a component and its environment, and adds actions to it as necessary until a given property is shown to hold or to be violated in the system. We have applied the learning framework to a number of case studies that show that compositional verification by learning assumptions can be significantly more scalable than non-compositional verification.", "paper_title": "Learning to divide and conquer: applying the L* algorithm to automate assume-guarantee reasoning", "paper_id": "WOS:000256089600002"}