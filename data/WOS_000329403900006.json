{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data-intensive_applications"}, {"score": 0.03506708166115819, "phrase": "processing_nodes"}, {"score": 0.02880375593378063, "phrase": "data_chunks"}, {"score": 0.004765686919942249, "phrase": "load_balancing_methodology"}, {"score": 0.004716924994370903, "phrase": "divisible_load_theory"}, {"score": 0.004140613635632826, "phrase": "severe_performance_problems"}, {"score": 0.004084186458199923, "phrase": "load_imbalances"}, {"score": 0.004014728271095809, "phrase": "available_resources"}, {"score": 0.0036720716121554876, "phrase": "run_time"}, {"score": 0.0033933295645859015, "phrase": "data_partitions"}, {"score": 0.0032788123043064475, "phrase": "current_application_conditions"}, {"score": 0.0032563753253986912, "phrase": "homogeneous_clusters"}, {"score": 0.0029578641378775633, "phrase": "tuning_parameters"}, {"score": 0.0025429488129788077, "phrase": "single_execution"}, {"score": 0.0025255346035867564, "phrase": "multiple_related_explorations"}, {"score": 0.002390436017272046, "phrase": "application_execution"}, {"score": 0.0021861082519868567, "phrase": "extensive_experimentation"}, {"score": 0.0021562588804528667, "phrase": "reported_results"}, {"score": 0.0021049977753042253, "phrase": "total_execution_time"}], "paper_keywords": ["Load balancing", " Data-intensive", " Divisible Load Theory", " Performance improvement"], "paper_abstract": "Data-intensive applications are those that explore, query, analyze, and, in general, process very large data sets. Generally, these applications can be naturally implemented in parallel but, in many cases, these implementations show severe performance problems mainly due to load imbalances, inefficient use of available resources, and improper data partition policies. It is worth noticing that the problem becomes more complex when the conditions causing these problems change at run time. This paper proposes a methodology for dynamically improving the performance of certain data-intensive applications based on: adapting the size and number of data partitions, and the number of processing nodes, to the current application conditions in homogeneous clusters. To this end, the processing of each exploration is monitored and gathered data is used to dynamically tune the performance of the application. The tuning parameters included in the methodology are: (i) the partition factor of the data set, (ii) the distribution of the data chunks, and (iii) the number of processing nodes to be used. The methodology assumes that a single execution includes multiple related explorations on the same partitioned data set, and that data chunks are ordered according to their processing times during the application execution to assign first the most time consuming partitions. The methodology has been validated using the well-known bioinformatics tool-BLAST-and through extensive experimentation using simulation. Reported results are encouraging in terms of reducing total execution time of the application (up to a 40 % in some cases).", "paper_title": "Improving Performance on Data-Intensive Applications Using a Load Balancing Methodology Based on Divisible Load Theory", "paper_id": "WOS:000329403900006"}