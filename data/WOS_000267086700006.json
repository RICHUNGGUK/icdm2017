{"auto_keywords": [{"score": 0.03260330230645139, "phrase": "time_windows"}, {"score": 0.00481495049065317, "phrase": "cost_optimization"}, {"score": 0.004763565662615503, "phrase": "workflow_scheduling"}, {"score": 0.004637478829869904, "phrase": "workflow_applications"}, {"score": 0.004563427013973105, "phrase": "directed_acyclic_graph"}, {"score": 0.0044426140044122545, "phrase": "deadline_constraints"}, {"score": 0.004371660146981191, "phrase": "fundamental_and_intractable_problem"}, {"score": 0.004165497627464024, "phrase": "effective_and_efficient_heuristic"}, {"score": 0.0039055990919333082, "phrase": "early_feasible_schedule"}, {"score": 0.0038431888954930083, "phrase": "workflow_application"}, {"score": 0.003741371936431574, "phrase": "early_tree"}, {"score": 0.0034332736827447654, "phrase": "critical_activities"}, {"score": 0.003378385493203297, "phrase": "optimal_cost_solution"}, {"score": 0.0033243718810317254, "phrase": "deadline_constraint"}, {"score": 0.0032189132350239013, "phrase": "dynamic_programming_strategy"}, {"score": 0.003150466780962537, "phrase": "whole_deadline"}, {"score": 0.0030178961017306646, "phrase": "slack_time_float"}, {"score": 0.002969628818856786, "phrase": "non-critical_activities"}, {"score": 0.0029221312451219203, "phrase": "iterative_procedure"}, {"score": 0.0027841357057119317, "phrase": "precedence_constraints"}, {"score": 0.00266693888510356, "phrase": "time_window_allocations"}, {"score": 0.0026242699269026204, "phrase": "local_optimization_method"}, {"score": 0.0025546627686955656, "phrase": "execution_costs"}, {"score": 0.002447101794397243, "phrase": "global_near-optimal_solution"}, {"score": 0.002369425924043649, "phrase": "det"}, {"score": 0.0022818671653408278, "phrase": "deadline_division_strategy"}, {"score": 0.002174041708084857, "phrase": "feasible_deadlines"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Grid computing", " Workflow", " Directed acyclic graph", " Cost/time tradeoff", " Heuristic"], "paper_abstract": "Cost optimization for workflow applications described by Directed Acyclic Graph (DAG) with deadline constraints is a fundamental and intractable problem on Grids. In this paper, an effective and efficient heuristic called DET (Deadline Early Tree) is proposed. An early feasible schedule for a workflow application is defined as an Early Tree. According to the Early Tree, all tasks are grouped and the Critical Path is given. For critical activities, the optimal cost solution under the deadline constraint can be obtained by a dynamic programming strategy, and the whole deadline is segmented into time windows according to the slack time float. For non-critical activities, an iterative procedure is proposed to maximize time windows while maintaining the precedence constraints among activities. In terms of the time window allocations, a local optimization method is developed to minimize execution costs. The two local cost optimization methods can lead to a global near-optimal solution. Experimental results show that DET outperforms two other recent leveling algorithms. Moreover, the deadline division strategy adopted by DET can be applied to all feasible deadlines. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Deadline division-based heuristic for cost optimization in workflow scheduling", "paper_id": "WOS:000267086700006"}