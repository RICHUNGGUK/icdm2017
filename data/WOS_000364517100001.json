{"auto_keywords": [{"score": 0.044001542978848354, "phrase": "test_cases"}, {"score": 0.008146627381220769, "phrase": "model_transformations"}, {"score": 0.007815975284176081, "phrase": "model_transformation_testing"}, {"score": 0.005725999405888918, "phrase": "lower_level"}, {"score": 0.00481495049065317, "phrase": "writing_model_transformations"}, {"score": 0.004740476936977635, "phrase": "complex_and_error-prone_one"}, {"score": 0.003712796038920873, "phrase": "bi-level_optimization_problem"}, {"score": 0.0035614563596982306, "phrase": "mutation_testing"}, {"score": 0.0034519997658752598, "phrase": "upper-level_problem"}, {"score": 0.0031107911390188055, "phrase": "transformation_rules"}, {"score": 0.002983916676307492, "phrase": "generated_errors"}, {"score": 0.002759769970554556, "phrase": "upper_level"}, {"score": 0.0027169974137406148, "phrase": "main_advantage"}, {"score": 0.00234834406550549, "phrase": "statistical_analysis"}, {"score": 0.002299921909935613, "phrase": "different_transformation_mechanisms"}, {"score": 0.002206045784326466, "phrase": "state-of-the-art_model_transformation"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["search-based software engineering", " software maintenance", " bi-level optimization"], "paper_abstract": "The process of writing model transformations is a complex and error-prone one. Thus, efficient techniques and tools for validating model transformations are needed. One of them is model transformation testing. The generation of test cases for model transformations is mainly based on metamodel and rules coverage criteria. In this paper, we propose to treat model transformation testing as a bi-level optimization problem to combine the generation of test cases with mutation testing. In our adaptation, the upper-level problem generates a set of test cases that maximizes the coverage of metamodels and errors introduced by the lower level to the transformation rules. The lower level maximizes the number of generated errors in the rules that cannot be detected by the test cases produced by the upper level. The main advantage of our bi-level formulation is that the evaluation of test cases is not limited to the coverage of metamodels, but it allows evaluating their ability to detect errors. The statistical analysis of our experiments on different transformation mechanisms confirms the outperformance of our bi-level proposal compared with state-of-the-art model transformation testing techniques. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Model transformation testing: a bi-level search-based software engineering approach", "paper_id": "WOS:000364517100001"}