{"auto_keywords": [{"score": 0.028771794242744172, "phrase": "tight_bound"}, {"score": 0.00481495049065317, "phrase": "proximity_measures"}, {"score": 0.004780334370089564, "phrase": "rank_join"}, {"score": 0.004352236750212992, "phrase": "real-valued_feature_vector"}, {"score": 0.0042898529847155255, "phrase": "target_feature_vector"}, {"score": 0.0041677440361312604, "phrase": "k_combinations"}, {"score": 0.0041079938275505575, "phrase": "high_scores"}, {"score": 0.0035683401689358993, "phrase": "vector_space"}, {"score": 0.003529880686744397, "phrase": "distinctive_role"}, {"score": 0.0034541965053691307, "phrase": "overall_score"}, {"score": 0.0033557940171476683, "phrase": "input_relations"}, {"score": 0.003000171314687074, "phrase": "well-known_hrjn"}, {"score": 0.0026628098176168682, "phrase": "stopping_criterion"}, {"score": 0.002624577999455744, "phrase": "instance_optimality"}, {"score": 0.0024950272594582673, "phrase": "constant_factor"}, {"score": 0.0023804491500749106, "phrase": "adaptive_pulling_strategy"}, {"score": 0.002279349794239273, "phrase": "practically_relevant_classes"}, {"score": 0.002158979137177815, "phrase": "extensive_experimental_study"}, {"score": 0.0021202820950055193, "phrase": "significant_gains"}, {"score": 0.0021049977753042253, "phrase": "existing_solutions"}], "paper_keywords": ["Design", " Algorithms", " Experimentation", " Performance", " Top-k", " rank-aware processing", " proximity"], "paper_abstract": "We introduce the proximity rank join problem, where we are given a set of relations whose tuples are equipped with a score and a real-valued feature vector. Given a target feature vector, the goal is to return the K combinations of tuples with high scores that are as close as possible to the target and to each other, according to some notion of distance or dissimilarity. The setting closely resembles that of traditional rank join, but the geometry of the vector space plays a distinctive role in the computation of the overall score of a combination. Also, the input relations typically return their results either by distance from the target or by score. Because of these aspects, it turns out that traditional rank join algorithms, such as the well-known HRJN, have shortcomings in solving the proximity rank join problem, as they may read more input than needed. To overcome this weakness, we define a tight bound (used as a stopping criterion) that guarantees instance optimality, that is, an I/O cost is achieved that is always within a constant factor of optimal. The tight bound can also be used to drive an adaptive pulling strategy, deciding at each step which relation to access next. For practically relevant classes of problems, we show how to compute the tight bound efficiently. An extensive experimental study validates our results and demonstrates significant gains over existing solutions.", "paper_title": "Proximity Measures for Rank Join", "paper_id": "WOS:000301048000002"}