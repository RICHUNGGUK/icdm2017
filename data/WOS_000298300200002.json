{"auto_keywords": [{"score": 0.02563327568472148, "phrase": "magic_potion"}, {"score": 0.00481495049065317, "phrase": "ontology_paradigm_into_software_engineering"}, {"score": 0.004513255056769647, "phrase": "notable_overlap"}, {"score": 0.004358676214574977, "phrase": "semantic_technologies"}, {"score": 0.004315487055548749, "phrase": "software_engineering_deal"}, {"score": 0.004065156038847781, "phrase": "current_efforts"}, {"score": 0.0039651694106206245, "phrase": "software_tools"}, {"score": 0.003906357144047631, "phrase": "resource_description_framework"}, {"score": 0.0038677124232728327, "phrase": "rdf"}, {"score": 0.003643185395780667, "phrase": "software_engineers"}, {"score": 0.0034660938095219846, "phrase": "software_developer's_viewpoint"}, {"score": 0.0033639840192975835, "phrase": "ontology_paradigm"}, {"score": 0.0033140589981208693, "phrase": "general-purpose_programming_language"}, {"score": 0.0032486392192981944, "phrase": "simple_and_agile_way"}, {"score": 0.0031845067058084583, "phrase": "small_scale"}, {"score": 0.0031061129850110994, "phrase": "unpretentious_manner"}, {"score": 0.0029698211157405618, "phrase": "simple_domain-driven_code"}, {"score": 0.0027284410545226306, "phrase": "ontology_modeling_paradigm"}, {"score": 0.002687922713487696, "phrase": "mainstream_programming_environment"}, {"score": 0.002634830238219976, "phrase": "java_ecosystem"}, {"score": 0.0025827837420330816, "phrase": "lightweight_manner"}, {"score": 0.002544422946205545, "phrase": "small_teams"}, {"score": 0.0025066304722422463, "phrase": "embedded_meta_domain-specific_language"}, {"score": 0.002349230206293114, "phrase": "clojure"}], "paper_keywords": ["Clojure", " domain-specific languages", " modeling spaces", " multiparadigm programming", " ontologies", " programming languages", " semantic technologies", " software engineering"], "paper_abstract": "There is a notable overlap of the challenges with which the semantic technologies and software engineering deal. They can also complement and mutually improve each other. Current efforts mostly focus on improving software tools around the resource description framework (RDF) and Web Ontology Language (OWL) Web-oriented ecosystem that helps ontology engineers but is alien to software engineers. This paper presents an opposite approach taken from the software developer's viewpoint-an incorporation of the ontology paradigm into a general-purpose programming language, in a simple and agile way, on a small scale, and in an unpretentious manner. The objective is to help programmers write simple domain-driven code with richer semantics. The means to achieve this objective relies on metaprogramming to internalize the ontology modeling paradigm into a mainstream programming environment based on the Java ecosystem, in a lightweight manner suitable for small teams. An embedded meta domain-specific language (DSL), which is called Magic Potion, is implemented in Clojure and blends ontology, functional, object-oriented, and concurrent paradigms. An example from the technology enhanced learning (TEL) domain is used to illustrate Magic Potion in action.", "paper_title": "Incorporating the Ontology Paradigm Into Software Engineering: Enhancing Domain-Driven Programming in Clojure/Java", "paper_id": "WOS:000298300200002"}