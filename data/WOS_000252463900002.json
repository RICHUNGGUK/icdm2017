{"auto_keywords": [{"score": 0.04342971092192938, "phrase": "embedded_subtree"}, {"score": 0.004360412703519539, "phrase": "subtree_problems"}, {"score": 0.00373682045166829, "phrase": "pattern_p"}, {"score": 0.00325555555110395, "phrase": "node_v"}, {"score": 0.0030135741897058844, "phrase": "outgoing_edges"}, {"score": 0.0024845620614976196, "phrase": "np"}, {"score": 0.0021049977753042253, "phrase": "vertical_bar_p_vertical_bar"}], "paper_keywords": ["subtree inclusion", " algorithm"], "paper_abstract": "Given two trees (a target T and a pattern P) and a natural number w, window embedded subtree problems consist in deciding whether P occurs as an embedded subtree of T and/or finding the number of size (at most) w windows of T which contain pattern P as an embedded subtree. P is an embedded subtree of T if P can be obtained by deleting some nodes from T (if a node v is deleted, all edges adjacent to v are also deleted, and outgoing edges are replaced by edges going from the parent of v (if it exists) to the children of v). Deciding whether P is an embedded subtree of T is known to be NP-complete. Our algorithms run in time O(vertical bar T vertical bar 2(2 vertical bar P vertical bar)) where vertical bar T vertical bar (resp. vertical bar P vertical bar) is the size of T (resp. P).", "paper_title": "Tree inclusion problems", "paper_id": "WOS:000252463900002"}