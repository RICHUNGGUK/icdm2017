{"auto_keywords": [{"score": 0.0393378573740974, "phrase": "security_goal_models"}, {"score": 0.03906597166738946, "phrase": "vulnerability_detection_conditions"}, {"score": 0.03328875779658388, "phrase": "testinv-code"}, {"score": 0.015497892368084885, "phrase": "passive_testing"}, {"score": 0.013111499341666435, "phrase": "execution_traces"}, {"score": 0.010931231764427332, "phrase": "vulnerability_detection"}, {"score": 0.00481495049065317, "phrase": "software_vulnerabilities"}, {"score": 0.004110831924517065, "phrase": "security_vulnerabilities"}, {"score": 0.003937273640906994, "phrase": "new_approach"}, {"score": 0.003909065355459264, "phrase": "security_vulnerability_detection"}, {"score": 0.0038256426589560774, "phrase": "formal_models"}, {"score": 0.003798231095121328, "phrase": "vulnerability_causes"}, {"score": 0.003397535839387366, "phrase": "formal_interpretation"}, {"score": 0.003313053707792957, "phrase": "passive_testing_techniques"}, {"score": 0.003253994336864267, "phrase": "modeling_tools"}, {"score": 0.0030609320300175953, "phrase": "compiled_programs"}, {"score": 0.002942138511829811, "phrase": "full_definitions"}, {"score": 0.00284837132359445, "phrase": "structured_methods"}, {"score": 0.0026126405272417783, "phrase": "typical_vulnerabilities"}, {"score": 0.002538470301402269, "phrase": "known_vulnerabilities"}, {"score": 0.0024050158199950024, "phrase": "current_implementation"}, {"score": 0.0022058958906038466, "phrase": "testing_tool"}, {"score": 0.0021509807762081145, "phrase": "new_vulnerabilities"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software security", " Security modelling", " Secure software engineering", " Automatic testing", " Dynamic analysis"], "paper_abstract": "Context: Passive testing is a technique in which traces collected from the execution of a system under test are examined for evidence of flaws in the system. Objective: In this paper we present a method for detecting the presence of security vulnerabilities by detecting evidence of their causes in execution traces. This is a new approach to security vulnerability detection. Method: Our method uses formal models of vulnerability causes, known as security goal models and vulnerability detection conditions (VDCs). The former are used to identify the causes of vulnerabilities and model their dependencies, and the latter to give a formal interpretation that is suitable for vulnerability detection using passive testing techniques. We have implemented modeling tools for security goal models and vulnerability detection conditions, as well as TestInv-Code, a tool that checks execution traces of compiled programs for evidence of VDCs. Results: We present the full definitions of security goal models and vulnerability detection conditions, as well as structured methods for creating both. We describe the design and implementation of TestInv-Code. Finally we show results obtained from running TestInv-Code to detect typical vulnerabilities in several open source projects. By testing versions with known vulnerabilities, we can quantify the effectiveness of the approach. Conclusion: Although the current implementation has some limitations, passive testing for vulnerability detection works well, and using models as the basis for testing ensures that users of the testing tool can easily extend it to handle new vulnerabilities. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "An advanced approach for modeling and detecting software vulnerabilities", "paper_id": "WOS:000306631700006"}