{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "lpo."}, {"score": 0.004660457266847382, "phrase": "lpo"}, {"score": 0.004462105963334103, "phrase": "interesting_problem"}, {"score": 0.003589602322126282, "phrase": "program_transformation"}, {"score": 0.003362660648932244, "phrase": "efficient_version_step"}, {"score": 0.003048782877550259, "phrase": "essential_ideas"}, {"score": 0.0028249975318149468, "phrase": "theoretical_analysis"}, {"score": 0.002675252546913683, "phrase": "worst-case_behavior"}, {"score": 0.0024253827365474734, "phrase": "detailed_measurements"}, {"score": 0.002347378595930709, "phrase": "practical_improvements"}, {"score": 0.0022718774783143203, "phrase": "different_variants"}, {"score": 0.0021049977753042253, "phrase": "experimentally_various_optimizations"}], "paper_keywords": ["lexicographic path ordering", " implementation", " program transformation"], "paper_abstract": "The Lexicographic Path Ordering (LPO) poses an interesting problem to the implementor: How to achieve a version that is both efficient and correct? The method of program transformation helps us to develop an efficient version step-by-step, making clear the essential ideas, while retaining correctness. By theoretical analysis we show that the worst-case behavior is thereby changed from exponential to polynomial. Detailed measurements show the practical improvements of the different variants. They allow us to assess experimentally various optimizations suggested for LPO.", "paper_title": "Things to know when implementing LPO", "paper_id": "WOS:000235066400004"}