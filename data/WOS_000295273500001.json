{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multicore_systems"}, {"score": 0.00471503739362446, "phrase": "scalability_issues"}, {"score": 0.004675652357253327, "phrase": "multithreaded_java_programs"}, {"score": 0.004408976280483648, "phrase": "performance_scaling"}, {"score": 0.004299374036140852, "phrase": "processor_cores"}, {"score": 0.00426344619171077, "phrase": "application_threads"}, {"score": 0.004157446556371582, "phrase": "low-level_hardware_performance_data"}, {"score": 0.004122706562542116, "phrase": "jvm"}, {"score": 0.004071121244999291, "phrase": "system_components"}, {"score": 0.004020185355794902, "phrase": "detail_analyses"}, {"score": 0.003838791650587681, "phrase": "hardware_stall_events"}, {"score": 0.0038066979615349822, "phrase": "memory_system_latencies"}, {"score": 0.003696460568091852, "phrase": "memory_resource"}, {"score": 0.003604506544515223, "phrase": "potential_bottlenecks"}, {"score": 0.0035296217979800463, "phrase": "jvm_tuning_techniques"}, {"score": 0.0031778255332904487, "phrase": "lock_contentions"}, {"score": 0.0031117775337824853, "phrase": "strong_limitation"}, {"score": 0.00299632091372281, "phrase": "memory_access_latencies"}, {"score": 0.0029340342068081247, "phrase": "memory_stalls"}, {"score": 0.0027088948471991454, "phrase": "minor_garbage_collections"}, {"score": 0.0026637384761565605, "phrase": "important_factor"}, {"score": 0.0026414426081951734, "phrase": "throughput_reductions"}, {"score": 0.0024081387633065206, "phrase": "parallel_garbage_collector"}, {"score": 0.0023779596230982234, "phrase": "appropriate_ratio"}, {"score": 0.002338306897057454, "phrase": "old_generation"}, {"score": 0.0022800613046444563, "phrase": "minor_collection"}, {"score": 0.0022232633360792222, "phrase": "garbage_collections"}, {"score": 0.0021770116505684394, "phrase": "cache_utilizations"}, {"score": 0.0021049977753042253, "phrase": "thread-local_allocation_buffer"}], "paper_keywords": ["Garbage collection", " Java", " lock contention", " multicore", " performance counter", " scalability", " virtual machine"], "paper_abstract": "The performance and scalability issues of multithreaded Java programs on multicore systems are studied in this paper. First, we examine the performance scaling of benchmarks with various numbers of processor cores and application threads. Second, by correlating low-level hardware performance data to JVM threads and system components, the detail analyses of performance and scalability are presented, such as the hardware stall events and memory system latencies. Third, the usages of memory resource are detailed to observe the potential bottlenecks. Finally, the JVM tuning techniques are proposed to alleviate the bottlenecks, and improve the performance and scalability. Several key findings are revealed through this study. First, the lock contentions usually lead to a strong limitation of scalability. Second, in terms of memory access latencies, the most of memory stalls are produced by L2 cache misses and cache-to-cache transfers. Finally, the overhead of minor garbage collections could be an important factor of throughput reductions. Based on these findings, the appropriate Java Virtual Machine (JVM) tuning techniques are examined in this study. We observe that the use of a parallel garbage collector and an appropriate ratio of young to old generation can alleviate the overhead of minor collection and improve the efficiency of garbage collections. Moreover, the cache utilizations could be enhanced with the use of thread-local allocation buffer, and then leads to the performance improvements significantly.", "paper_title": "Multithreading in Java: Performance and Scalability on Multicore Systems", "paper_id": "WOS:000295273500001"}