{"auto_keywords": [{"score": 0.03232836189716844, "phrase": "search-based_techniques"}, {"score": 0.008618319213338952, "phrase": "human_predictions"}, {"score": 0.00481495049065317, "phrase": "large_software_projects"}, {"score": 0.00467905143301368, "phrase": "large_percentage"}, {"score": 0.0044005599565517875, "phrase": "software_test_process"}, {"score": 0.004241451614311598, "phrase": "improvement_work"}, {"score": 0.004189698902282913, "phrase": "considerable_industrial_interest"}, {"score": 0.0040713749949601915, "phrase": "prediction_techniques"}, {"score": 0.003797690272118125, "phrase": "system_test_phases"}, {"score": 0.003751331782523201, "phrase": "large_industrial_project"}, {"score": 0.0036453427552753533, "phrase": "improvement_potential"}, {"score": 0.0036156119373414067, "phrase": "different_test_phases"}, {"score": 0.0034847851398628546, "phrase": "right_phase"}, {"score": 0.0027477745788313163, "phrase": "better_predictions"}, {"score": 0.0026482660253173075, "phrase": "test_phases"}, {"score": 0.002229380111189829, "phrase": "automated_search_mechanism"}, {"score": 0.0021049977753042253, "phrase": "improved_prediction_results"}], "paper_keywords": ["Prediction", " Empirical", " Faults-slip-through", " Search-based"], "paper_abstract": "A large percentage of the cost of rework can be avoided by finding more faults earlier in a software test process. Therefore, determination of which software test phases to focus improvement work on has considerable industrial interest. We evaluate a number of prediction techniques for predicting the number of faults slipping through to unit, function, integration, and system test phases of a large industrial project. The objective is to quantify improvement potential in different test phases by striving toward finding the faults in the right phase. The results show that a range of techniques are found to be useful in predicting the number of faults slipping through to the four test phases; however, the group of search-based techniques (genetic programming, gene expression programming, artificial immune recognition system, and particle swarm optimization-based artificial neural network) consistently give better predictions, having a representation at all of the test phases. Human predictions are consistently better at two of the four test phases. We conclude that the human predictions regarding the number of faults slipping through to various test phases can be well supported by the use of search-based techniques. A combination of human and an automated search mechanism (such as any of the search-based techniques) has the potential to provide improved prediction results.", "paper_title": "Prediction of faults-slip-through in large software projects: an empirical evaluation", "paper_id": "WOS:000331643500005"}