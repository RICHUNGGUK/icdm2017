{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_visual_analytics"}, {"score": 0.04322873010093233, "phrase": "information_visualization"}, {"score": 0.004745056850725867, "phrase": "program_structure"}, {"score": 0.004676173016967478, "phrase": "metrics_comprehension"}, {"score": 0.004574709094672837, "phrase": "research_prototype"}, {"score": 0.004252063063815893, "phrase": "static_program_analysis"}, {"score": 0.004190305872545087, "phrase": "fact_extraction"}, {"score": 0.004039792863335641, "phrase": "program_comprehension"}, {"score": 0.0038946650372062783, "phrase": "efficient_and_effective_sva_tools"}, {"score": 0.0036731870109004993, "phrase": "extensive_software_development"}, {"score": 0.0036198068824262464, "phrase": "program_analysis"}, {"score": 0.003315374849824563, "phrase": "sva_toolset"}, {"score": 0.0032671775301001483, "phrase": "software_maintenance"}, {"score": 0.0028220038404484196, "phrase": "toolset's_usage"}, {"score": 0.00276066021951467, "phrase": "software_visualizations"}, {"score": 0.002584494385587982, "phrase": "industrial_contexts"}, {"score": 0.0024915167458844914, "phrase": "design_evolution"}, {"score": 0.002455266773537278, "phrase": "research_prototypes"}, {"score": 0.0023669270875629205, "phrase": "easy-to-use_products"}, {"score": 0.0021996478802839316, "phrase": "efficient_and_effective_sva_solutions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software visualization", " Static analysis", " Visual tool design"], "paper_abstract": "Software visual analytics (SVA) tools combine static program analysis and fact extraction with information visualization to support program comprehension. However, building efficient and effective SVA tools is highly challenging, as it involves extensive software development in program analysis, graphics, information visualization, and interaction. We present a SVA toolset for software maintenance, and detail two of its components which target software structure, metrics and code duplication. We illustrate the toolset's usage for constructing software visualizations with examples in education, research, and industrial contexts. We discuss the design evolution from research prototypes to integrated, scalable, and easy-to-use products, and present several guidelines for the development of efficient and effective SVA solutions. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "The Solid* toolset for software visual analytics of program structure and metrics comprehension: From research prototype to product", "paper_id": "WOS:000326556300016"}