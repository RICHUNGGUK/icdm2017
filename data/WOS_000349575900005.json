{"auto_keywords": [{"score": 0.042599325952589626, "phrase": "signal"}, {"score": 0.035782142044924754, "phrase": "clock_calculus"}, {"score": 0.00481495049065317, "phrase": "real-time_systems"}, {"score": 0.004605748839642513, "phrase": "safety_critical_real-time_systems"}, {"score": 0.003959863717046575, "phrase": "data-flow_synchronous_language"}, {"score": 0.003527550673371394, "phrase": "synchronous_features"}, {"score": 0.0030595112110658675, "phrase": "new_methodology"}, {"score": 0.0029263562233195423, "phrase": "data_dependencies"}, {"score": 0.0027252240573281163, "phrase": "simulation_code"}, {"score": 0.002537880772794665, "phrase": "depth-first_traversal_algorithm"}, {"score": 0.002405853977978678, "phrase": "clock_insertion_method"}, {"score": 0.0023424328921363585, "phrase": "clock-implication_checking"}, {"score": 0.002220551141101661, "phrase": "optimized_control_structure"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["SIGNAL", " Clock calculus", " Optimized clock tree", " Code generation"], "paper_abstract": "Safety critical real-time systems need to be modeled and simulated early in the development of lifecycle. SIGNAL is a data-flow synchronous language with clocks widely used in modeling of such systems. Due to the synchronous features of SIGNAL, clock calculus is essential in compilation and simulation. This paper proposes a new methodology for clock calculus that takes data dependencies into consideration. In this way, simulation code can be directly generated by using a depth-first traversal algorithm. In addition, a clock insertion method based on clock-implication checking is presented to obtain an optimized control structure. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Simulation of real-time systems with clock calculus", "paper_id": "WOS:000349575900005"}