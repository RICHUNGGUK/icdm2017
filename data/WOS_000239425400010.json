{"auto_keywords": [{"score": 0.04313667484026642, "phrase": "casl-ltl"}, {"score": 0.00481495049065317, "phrase": "casl"}, {"score": 0.00471811808206897, "phrase": "dynamic_specifications"}, {"score": 0.0043793594257092805, "phrase": "casl_family"}, {"score": 0.004320421465896323, "phrase": "specification_languages"}, {"score": 0.0038764861784138117, "phrase": "loose_specifications"}, {"score": 0.003772793879444995, "phrase": "dynamic_sorts"}, {"score": 0.0034780071331554003, "phrase": "casl_library"}, {"score": 0.0034311578789991363, "phrase": "distributed_systems"}, {"score": 0.002975652654536407, "phrase": "frame_problem"}, {"score": 0.0027616550517346066, "phrase": "resulting_specifications"}, {"score": 0.0024607296642187824, "phrase": "standard_casl-ltl"}, {"score": 0.0022992346264367374, "phrase": "standard_casl"}, {"score": 0.0022682274656069643, "phrase": "temporal_logic"}, {"score": 0.0021776870246727233, "phrase": "small_prototype"}, {"score": 0.0021049977753042253, "phrase": "do-casl"}], "paper_keywords": [""], "paper_abstract": "We present DO-CASL, a new member of the CASL family of specification languages. It is an extension of CASL-LTL and it supports a methodology for conveniently writing loose specifications of observers on dynamic sorts. The need for such constructs arose during the development of a CASL library for distributed systems. Indeed, we have frequently used the same pattern of specification, in order to solve a generalization of the frame problem while using observers. The constructs we propose make the resulting specifications more readable, concise and maintainable. The semantics of our extension is given by reduction to standard CASL-LTL, which is, in turn, reducible to standard CASL whenever temporal logic is not used. A small prototype of the pre-processor from DO-CASL to CASL-LTL has been implemented as well.", "paper_title": "DO-CASL: An observer-based CASL extension for dynamic specifications", "paper_id": "WOS:000239425400010"}