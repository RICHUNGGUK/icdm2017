{"auto_keywords": [{"score": 0.049146612112995924, "phrase": "ec"}, {"score": 0.006226531884838586, "phrase": "formal_properties"}, {"score": 0.004758457292840376, "phrase": "event_calculus"}, {"score": 0.0045748683993128425, "phrase": "excellent_framework"}, {"score": 0.004178935413340453, "phrase": "logic-based_frameworks"}, {"score": 0.0034185505275141077, "phrase": "dynamic_environments"}, {"score": 0.00320970209394799, "phrase": "new_event"}, {"score": 0.00314708280192844, "phrase": "reasoning_process"}, {"score": 0.003073545175760353, "phrase": "procedural_methods"}, {"score": 0.0028743610212291727, "phrase": "strong_formal_basis"}, {"score": 0.0026564452263551407, "phrase": "large_application_domains"}, {"score": 0.0026252106881752067, "phrase": "run-time_monitoring"}, {"score": 0.0025237171554924128, "phrase": "reactivity_features"}, {"score": 0.002426137929553722, "phrase": "computed_response"}, {"score": 0.0023787690061742566, "phrase": "highlighted_issues"}, {"score": 0.002341541855692174, "phrase": "reactive"}, {"score": 0.002323142666222693, "phrase": "logic-based_axiomatization"}, {"score": 0.002277781769308923, "phrase": "rec"}, {"score": 0.002224510044064184, "phrase": "sciff_abductive_logic_programming_framework"}, {"score": 0.002146926767291475, "phrase": "reactive_verification_facility"}, {"score": 0.0021049977753042253, "phrase": "solid_formal_background"}], "paper_keywords": ["Event Calculus", " Reactive Reasoning", " Monitoring", " Computational Logic", " Abductive Logic Programming"], "paper_abstract": "Since its introduction, the Event Calculus (EC) has been recognized for being an excellent framework to reason about time and events, and it has been applied to a variety of domains. However, its formalization inside logic-based frameworks has been mainly based on backward, goal-oriented reasoning: given a narrative (also called execution trace) and a goal, logic-based formalizations of EC focus on proving the goal, i.e., establishing if a property (called fluent) holds. These approaches are therefore unsuitable in dynamic environments, where the narrative typically evolves over time: indeed, each occurrence of a new event requires to restart the reasoning process from scratch. Ad-hoc, procedural methods and implementations have been then proposed to overcome this issue. However, they lack a strong formal basis and cannot guarantee formal properties. As a consequence, the applicability of EC has been somehow limited in large application domains such as run-time monitoring and event processing, which require at the same time reactivity features as well as formal properties to provide guarantees about the computed response. We overcome the highlighted issues by proposing a Reactive and logic-based axiomatization of EC, called REC, on top of the SCIFF Abductive Logic Programming framework. Our solution exhibits the features of a reactive verification facility, while maintaining a solid formal background.", "paper_title": "A Logic-Based, Reactive Calculus of Events", "paper_id": "WOS:000287022900007"}