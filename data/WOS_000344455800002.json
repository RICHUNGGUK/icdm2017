{"auto_keywords": [{"score": 0.03455793989549368, "phrase": "lvish"}, {"score": 0.010617046690676233, "phrase": "par_monad"}, {"score": 0.00481495049065317, "phrase": "parallel_effect_zoo_extensible_deterministic_parallelism"}, {"score": 0.004732100994830163, "phrase": "fundamental_challenge"}, {"score": 0.0046993598473345395, "phrase": "parallel_programming"}, {"score": 0.004602483094756597, "phrase": "observable_outcome"}, {"score": 0.0044608829094248985, "phrase": "parallel_execution"}, {"score": 0.00443000995237127, "phrase": "language-level_enforcement"}, {"score": 0.004323620278409076, "phrase": "existing_deterministic-by-construction_parallel_programming_models"}, {"score": 0.004147123642915346, "phrase": "broad_range"}, {"score": 0.003909301559145041, "phrase": "language_features"}, {"score": 0.003855347387268162, "phrase": "determinism_guarantee"}, {"score": 0.003815369123984481, "phrase": "recently_proposed_lvars_programming_model"}, {"score": 0.0037627064621795514, "phrase": "accompanying_lvish_haskell_library"}, {"score": 0.003685067218455088, "phrase": "broadly-applicable_guaranteed-deterministic_parallel_programming"}, {"score": 0.0036468482216440233, "phrase": "lvars"}, {"score": 0.003584025547693836, "phrase": "shared_monotonic_data_structures"}, {"score": 0.003217896008931311, "phrase": "parallel_computation"}, {"score": 0.0031845067058084613, "phrase": "determinism-preserving_effects"}, {"score": 0.0030971473486283664, "phrase": "parallel_tasks"}, {"score": 0.0030756833977949273, "phrase": "previous_guaranteed-deterministic_models"}, {"score": 0.0030226700832113942, "phrase": "lvar-based_programming"}, {"score": 0.0028097829999199596, "phrase": "least-upper-bound_writes"}, {"score": 0.0027137301650680175, "phrase": "non-overlapping_memory_locations"}, {"score": 0.002566811158487033, "phrase": "added_complexity"}, {"score": 0.0025225467103906314, "phrase": "core_lvish_implementation"}, {"score": 0.002436289099444074, "phrase": "monad_transformer"}, {"score": 0.00221781065048839, "phrase": "traditional_parallel_benchmarks"}, {"score": 0.002171979107594173, "phrase": "real-world_case_study"}], "paper_keywords": ["Deterministic parallelism"], "paper_abstract": "A fundamental challenge of parallel programming is to ensure that the observable outcome of a program remains deterministic in spite of parallel execution. Language-level enforcement of determinism is possible, but existing deterministic-by-construction parallel programming models tend to lack features that would make them applicable to a broad range of problems. Moreover, they lack extensibility: it is difficult to add or change language features without breaking the determinism guarantee. The recently proposed LVars programming model, and the accompanying LVish Haskell library, took a step toward broadly-applicable guaranteed-deterministic parallel programming. The LVars model allows communication through shared monotonic data structures to which information can only be added, never removed, and for which the order in which information is added is not observable. LVish provides a Par monad for parallel computation that encapsulates determinism-preserving effects while allowing a more flexible form of communication between parallel tasks than previous guaranteed-deterministic models provided. While applying LVar-based programming to real problems using LVish, we have identified and implemented three capabilities that extend its reach: inflationary updates other than least-upper-bound writes; transitive task cancellation; and parallel mutation of non-overlapping memory locations. The unifying abstraction we use to add these capabilities to LVish-without suffering added complexity or cost in the core LVish implementation, or compromising determinism-is a form of monad transformer, extended to handle the Par monad. With our extensions, LVish provides the most broadly applicable guaranteed-deterministic parallel programming interface available to date. We demonstrate the viability of our approach both with traditional parallel benchmarks and with results from a real-world case study: a bioinformatics application that we parallelized using our extended version of LVish.", "paper_title": "Taming the Parallel Effect Zoo Extensible Deterministic Parallelism with LVish", "paper_id": "WOS:000344455800002"}