{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "unobtrusive_property_caching"}, {"score": 0.004477595431209663, "phrase": "program_properties"}, {"score": 0.004417012437860011, "phrase": "run-time_tests"}, {"score": 0.0042209023469249205, "phrase": "dynamic_programing_languages"}, {"score": 0.003942877273973905, "phrase": "space_overheads"}, {"score": 0.003907212558276185, "phrase": "standard_program_execution"}, {"score": 0.0035677736570659813, "phrase": "intermediate_results"}, {"score": 0.003535489842686145, "phrase": "check_evaluation"}, {"score": 0.0034876091188625535, "phrase": "repeated_checking"}, {"score": 0.0034560481756572632, "phrase": "previously_verified_properties"}, {"score": 0.00334780964309978, "phrase": "checking_frequency"}, {"score": 0.0029610472910087176, "phrase": "standard_run-time_checking"}, {"score": 0.0028944757265206332, "phrase": "limited_previous_work"}, {"score": 0.0027407299369891502, "phrase": "data_structure_representation"}, {"score": 0.0027159094186967247, "phrase": "checking_code"}, {"score": 0.00245724480030654, "phrase": "ciao_run-time_checking_framework"}, {"score": 0.0023694065215394593, "phrase": "operational_semantics"}, {"score": 0.0022537212268979507, "phrase": "prototype_implementation"}, {"score": 0.002213065910356615, "phrase": "experimental_results"}, {"score": 0.002153450937601075, "phrase": "relatively_small_cache"}, {"score": 0.002124247104243502, "phrase": "significant_decreases"}, {"score": 0.0021049977753042253, "phrase": "run-time_checking_overhead"}], "paper_keywords": [""], "paper_abstract": "The use of annotations, referred to as assertions or contracts, to describe program properties for which run-time tests are to be generated, has become frequent in dynamic programing languages. However, the frameworks proposed to support such run-time testing generally incur high time and/or space overheads over standard program execution. We present an approach for reducing this overhead that is based on the use of memoization to cache intermediate results of check evaluation, avoiding repeated checking of previously verified properties. Compared to approaches that reduce checking frequency, our proposal has the advantage of being exhaustive (i.e., all tests are checked at all points) while still being much more efficient than standard run-time checking. Compared to the limited previous work on memoization, it performs the task without requiring modifications to data structure representation or checking code. While the approach is general and system-independent, we present it for concreteness in the context of the Ciao run-time checking framework, which allows us to provide an operational semantics with checks and caching. We also report on a prototype implementation and provide some experimental results that support that using a relatively small cache leads to significant decreases in run-time checking overhead.", "paper_title": "Practical run-time checking via unobtrusive property caching", "paper_id": "WOS:000367692200022"}