{"auto_keywords": [{"score": 0.04862271607252209, "phrase": "general_graphs"}, {"score": 0.04482363560040257, "phrase": "maximum_weighted_matching"}, {"score": 0.00481495049065317, "phrase": "distributed_algorithms"}, {"score": 0.004741167616693272, "phrase": "approximate_maximum_matching"}, {"score": 0.002981885091155911, "phrase": "dynamic_case"}, {"score": 0.002675797331220082, "phrase": "unweighted_dynamic_graphs"}, {"score": 0.00257424957319189, "phrase": "distributed_algorithm"}, {"score": 0.002364172626241202, "phrase": "node_insertion"}, {"score": 0.002171202123281881, "phrase": "weighted_dynamic_graphs"}, {"score": 0.0021049977753042253, "phrase": "constant-factor_approximation_distributed_algorithm"}], "paper_keywords": ["graph algorithms", " distributed algorithms", " maximum matching", " dynamic algorithms", " distributed approximation algorithms"], "paper_abstract": "We consider distributed algorithms for approximate maximum matching on general graphs. Our main result is a randomized (4 + epsilon)-approximation distributed algorithm for maximum weighted matching, whose running time is O(log n) for any constant epsilon > 0, where n is the number of nodes in the graph. This is, to the best of our knowledge, the first log-time distributed algorithm that achieves constant approximation for maximum weighted matching on general graphs. In addition, we consider the dynamic case, where nodes are inserted and deleted one at a time. For unweighted dynamic graphs, we give a distributed algorithm that maintains a (1 + epsilon)-approximation in O(1/epsilon) time for each node insertion or deletion for any constant epsilon > 0. For weighted dynamic graphs we give a constant-factor approximation distributed algorithm that runs in constant time for each insertion or deletion.", "paper_title": "DISTRIBUTED APPROXIMATE MATCHING", "paper_id": "WOS:000268859000006"}