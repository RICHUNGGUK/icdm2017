{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "temporal_locality"}, {"score": 0.00396767023935381, "phrase": "inherent_concurrency"}, {"score": 0.0038651944848734133, "phrase": "function_or_task_level"}, {"score": 0.0038049789989278463, "phrase": "cellss_environment"}, {"score": 0.0037066895459425824, "phrase": "source-to-source_compiler"}, {"score": 0.0035920758080335655, "phrase": "fortran_code"}, {"score": 0.0035361001070845677, "phrase": "runtime_library"}, {"score": 0.0033910448175165004, "phrase": "concurrent_execution"}, {"score": 0.0029284999172756103, "phrase": "bypassing_practice"}, {"score": 0.0026096659285441384, "phrase": "additional_cost"}, {"score": 0.0025025186963415, "phrase": "perceived_bandwidth"}, {"score": 0.002387214876538434, "phrase": "five_fundamental_linear_algebra_kernels"}, {"score": 0.0021609076467365247, "phrase": "performance_results"}, {"score": 0.002127186380459509, "phrase": "first_prototype"}, {"score": 0.0021049977753042253, "phrase": "cellss"}], "paper_keywords": ["Cell/BE", " Cell Superscalar", " multi-core", " parallel programming", " temporal locality"], "paper_abstract": "Cell Superscalar (CellSs) provides a simple, flexible and easy programming approach for the Cell Broadband Engine (Cell/B.E.) that automatically exploits the inherent concurrency of applications at a function or task level. The CellSs environment is based on a source-to-source compiler that translates annotated C or Fortran code and a runtime library tailored for the Cell/B.E. that orchestrates the concurrent execution of the application. We introduce a technique called bypassing that allows CellSs to perform core-to-core Direct Memory Access (DMA) transfers for generic applications. In this review we concisely summarize the bypassing practice and introduce two improvements: just-in-time renaming and lazy write-back. These extensions come at no additional cost and potentially increase performance by improving the perceived bandwidth of the Element Interconnect Bus (EIB). Experiments on five fundamental linear algebra kernels demonstrate the applicability of these techniques and quantify the benefit that can be reaped. We also present performance results for a first prototype of CellSs with bypassing.", "paper_title": "Making the Best of Temporal Locality: Just-in-Time Renaming and Lazy Write-Back on the Cell/B.E.", "paper_id": "WOS:000290212600002"}