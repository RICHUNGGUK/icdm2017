{"auto_keywords": [{"score": 0.02813163011847597, "phrase": "root"}, {"score": 0.00481495049065317, "phrase": "transparent_object-migration"}, {"score": 0.004647911247507267, "phrase": "parallel_discrete_event_simulation_systems"}, {"score": 0.004534428070512318, "phrase": "delivered_performance"}, {"score": 0.004439354841093929, "phrase": "computational_load"}, {"score": 0.004361644989356558, "phrase": "conservative_synchronization"}, {"score": 0.004151188559520802, "phrase": "optimistic_paradigm"}, {"score": 0.00385431710959668, "phrase": "application-transparent_migration"}, {"score": 0.003746871277361436, "phrase": "dynamically_allocated_memory_chunks"}, {"score": 0.0036424097335610492, "phrase": "non-intrusive_background_protocol"}, {"score": 0.0035533891890176823, "phrase": "simulation_kernel"}, {"score": 0.0034911335714333507, "phrase": "current_mapping"}, {"score": 0.0034543031591181546, "phrase": "virtual_address_space"}, {"score": 0.0034057975804778293, "phrase": "dynamic_memory_requests"}, {"score": 0.0033698643928647726, "phrase": "application_layer"}, {"score": 0.003150900886669123, "phrase": "address_space"}, {"score": 0.0031176485976102688, "phrase": "remote_kernel_instance"}, {"score": 0.0030199761431186434, "phrase": "load-balancing_trigger"}, {"score": 0.0028944757265206332, "phrase": "desirable_migration"}, {"score": 0.002863921785266393, "phrase": "specific_couple"}, {"score": 0.002687235334499192, "phrase": "global_memory_manager"}, {"score": 0.002521421793028698, "phrase": "optimistic_synchronization_paradigm"}, {"score": 0.0024423826953133844, "phrase": "event-handler-based_simulation_programs"}, {"score": 0.0024194841939766537, "phrase": "ansi-c."}, {"score": 0.002316105585203396, "phrase": "load-balancing_schemes"}, {"score": 0.0022997683233147125, "phrase": "optimistic_simulation_systems"}, {"score": 0.002275477757478827, "phrase": "migration_triggers"}, {"score": 0.002259426425685765, "phrase": "selection_policies"}, {"score": 0.0021731423856364003, "phrase": "memory_usage_patterns"}, {"score": 0.0021501863832966966, "phrase": "experimental_assessment"}, {"score": 0.0021049977753042253, "phrase": "memory-oriented_load_balancing"}], "paper_keywords": ["Parallel simulation", " Discrete event simulation", " Load balancing", " Memory management", " Optimistic synchronization", " Performance optimization"], "paper_abstract": "It is well known that Parallel Discrete Event Simulation systems may suffer, in terms of delivered performance, from imbalance of the computational load. In case of conservative synchronization we may experience CPU under-utilization and/or excessive communication overhead. On the other hand, for the optimistic paradigm we may even have rollback thrashing effects, with a consequent reduction of the percentage of productive (ie not rolled back) work carried out. This paper presents the design of a global memory management architecture supporting application-transparent migration of simulation objects whose state is scattered across dynamically allocated memory chunks. Our approach is based on a non-intrusive background protocol that provides each instance of the simulation kernel with information on the current mapping of the virtual address space of all the other instances. Dynamic memory requests by the application layer are then locally mapped onto virtual-address ranges that maximize the likelihood of being portable onto the address space of a remote kernel instance. In this way, independently of the load-balancing trigger (or policy), we maximize the likelihood that a desirable migration across a specific couple of kernels can actually take place due to compliance of the corresponding source/destination address spaces. We have integrated the global memory manager within the ROme OpTimistic Simulator (ROOT-Sim), namely a run-time environment based on the optimistic synchronization paradigm which automatically and transparently parallelizes the execution of event-handler-based simulation programs conforming to ANSI-C. Further, we provide a contribution in the direction of widening load-balancing schemes for optimistic simulation systems by defining migration triggers and selection policies for the objects to be migrated on the basis of memory usage patterns. An experimental assessment of the architecture and of memory-oriented load balancing is also provided. Journal of Simulation (2012) 6, 279-293. doi:10.1057/jos.2012.13; published online 20 July 2012", "paper_title": "Supports for transparent object-migration in PDES systems", "paper_id": "WOS:000313763100006"}