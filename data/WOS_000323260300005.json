{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_development"}, {"score": 0.0043560464825349275, "phrase": "useful_requirements"}, {"score": 0.0029909851863915283, "phrase": "chosen_solution"}, {"score": 0.0027974705482714884, "phrase": "design_space"}, {"score": 0.0023079225317714815, "phrase": "known_approaches"}, {"score": 0.002194929830604162, "phrase": "sparse_requirements"}, {"score": 0.0021049977753042253, "phrase": "design_decisions"}], "paper_keywords": ["Requirement", " Goal", " Design", " Fundamentals", " Philosophy", " Ontology", " Epistemology"], "paper_abstract": "This viewpoint explores the possibility that many software development projects may have no useful requirements. Specifically, for problems (e.g., knowledge worker burnout) with two completely different solutions (e.g., better tool support or hire more employees), an analyst may state a goal (e.g., decrease work hours) but more specific desiderata are contingent on the chosen solution. Furthermore, without fully exploring the design space, the designer cannot be sure whether there exists another approach, which would achieve the goal without any commonality with known approaches. In these situations of sparse requirements, analysts may misrepresent design decisions as requirements, creating an illusion of requirements in software development.", "paper_title": "The illusion of requirements in software development", "paper_id": "WOS:000323260300005"}