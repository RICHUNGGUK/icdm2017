{"auto_keywords": [{"score": 0.04900031007413473, "phrase": "static_type_systems"}, {"score": 0.01319712667617027, "phrase": "software_systems"}, {"score": 0.010644370779527556, "phrase": "semantic_errors"}, {"score": 0.00929054942487802, "phrase": "exploratory_analysis"}, {"score": 0.00481495049065317, "phrase": "static_typing"}, {"score": 0.004760394308239882, "phrase": "software_maintainability"}, {"score": 0.004626680470601208, "phrase": "essential_role"}, {"score": 0.004574247691703376, "phrase": "contemporary_programming_languages"}, {"score": 0.004420472010542188, "phrase": "static_type_systems_impact_human_software_development_capabilities"}, {"score": 0.0033811403330431897, "phrase": "understanding_undocumented_code"}, {"score": 0.00332375606483146, "phrase": "type_errors"}, {"score": 0.0031573626285069157, "phrase": "rigorous_empirical_evidence"}, {"score": 0.0031215289677725693, "phrase": "static_types"}, {"score": 0.002706383680762465, "phrase": "possible_reasons"}, {"score": 0.0026302120935562568, "phrase": "type_systems"}, {"score": 0.0023329572140896237, "phrase": "dynamic_type_system"}, {"score": 0.0022672718785099666, "phrase": "different_files"}, {"score": 0.0022034318550547866, "phrase": "programming_tasks"}, {"score": 0.0021413855297794946, "phrase": "potential_reason"}, {"score": 0.0021049977753042253, "phrase": "observed_differences"}], "paper_keywords": ["Type systems", " Programming languages", " Empirical studies", " Software engineering"], "paper_abstract": "Static type systems play an essential role in contemporary programming languages. Despite their importance, whether static type systems impact human software development capabilities remains open. One frequently mentioned argument in favor of static type systems is that they improve the maintainability of software systems-an often-used claim for which there is little empirical evidence. This paper describes an experiment that tests whether static type systems improve the maintainability of software systems, in terms of understanding undocumented code, fixing type errors, and fixing semantic errors. The results show rigorous empirical evidence that static types are indeed beneficial to these activities, except when fixing semantic errors. We further conduct an exploratory analysis of the data in order to understand possible reasons for the effect of type systems on the three kinds of tasks used in this experiment. From the exploratory analysis, we conclude that developers using a dynamic type system tend to look at different files more frequently when doing programming tasks-which is a potential reason for the observed differences in time.", "paper_title": "An empirical study on the impact of static typing on software maintainability", "paper_id": "WOS:000342429900007"}