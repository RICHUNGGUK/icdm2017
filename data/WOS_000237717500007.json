{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "expressive_power"}, {"score": 0.014485611691134605, "phrase": "klaim"}, {"score": 0.004743164872278112, "phrase": "klaim-based_calculi"}, {"score": 0.004237666411136617, "phrase": "programming_primitives"}, {"score": 0.004174451361776433, "phrase": "network-aware_programming"}, {"score": 0.0040508247605225214, "phrase": "process_algebra_approach"}, {"score": 0.00396050388346298, "phrase": "coordination-oriented_one"}, {"score": 0.0036461569988218267, "phrase": "wide_range"}, {"score": 0.003591733916159209, "phrase": "distributed_applications"}, {"score": 0.003485304124598714, "phrase": "code_mobility"}, {"score": 0.0032085525502105836, "phrase": "runtime_system"}, {"score": 0.003137039149480095, "phrase": "java"}, {"score": 0.0022696277881969896, "phrase": "considered_calculi"}, {"score": 0.0021049977753042253, "phrase": "asynchronous_pi-calculus"}], "paper_keywords": ["process calculi", " network-aware programming", " expressiveness", " language encodings", " behavioural equivalences", " bisimulation"], "paper_abstract": "We study the expressive power of variants of KLAIM, an experimental language with programming primitives for network-aware programming that combines the process algebra approach with the coordination-oriented one. KLAIM has proved to be suitable for programming a wide range of distributed applications with agents and code mobility, and has been implemented on the top of a runtime system written in Java. In this paper, the expressivity of its constructs is tested by distilling from it a few, more and more foundational, languages and by studying the encoding of each of them into a simpler one. The expressive power of the considered calculi is finally tested by comparing one of them with asynchronous pi-calculus. (c) 2006 Elsevier B.V All rights reserved.", "paper_title": "On the expressive power of KLAIM-based calculi", "paper_id": "WOS:000237717500007"}