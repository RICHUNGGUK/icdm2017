{"auto_keywords": [{"score": 0.02650357059550209, "phrase": "lut_counts"}, {"score": 0.02622320352181617, "phrase": "logic_levels"}, {"score": 0.024732039507306968, "phrase": "longest_runtime"}, {"score": 0.00481495049065317, "phrase": "optimization_method"}, {"score": 0.004762893197005439, "phrase": "combinational_and_sequential_logic_networks"}, {"score": 0.00456020621016909, "phrase": "proposed_resynthesis"}, {"score": 0.004389912080394437, "phrase": "substantial_logic_restructuring"}, {"score": 0.004112582094962078, "phrase": "optimization_tasks"}, {"score": 0.003958937342925219, "phrase": "reasonable_runtime"}, {"score": 0.003916098498242888, "phrase": "industrial_designs"}, {"score": 0.003362660648932247, "phrase": "unreachable_states"}, {"score": 0.0032546105164772995, "phrase": "sat_solver"}, {"score": 0.003167217223469026, "phrase": "boolean_manipulation"}, {"score": 0.0029029754274913803, "phrase": "new_boolean_function"}, {"score": 0.0027943943921568456, "phrase": "experimental_results"}, {"score": 0.0026607205525625995, "phrase": "substantial_reductions"}], "paper_keywords": ["Algorithms", " Performance", " Design", " Experimentation", " FPGA", " don't-cares", " resynthesis", " Boolean satisfiability"], "paper_abstract": "\\We describe an optimization method for combinational and sequential logic networks, with emphasis on scalability. The proposed resynthesis (a) is capable of substantial logic restructuring, (b) is customizable to solve a variety of optimization tasks, and (c) has reasonable runtime on industrial designs. The approach uses don't-cares computed for a window surrounding a node and can take into account external don't-cares (e. g., unreachable states). It uses a SAT solver for all aspects of Boolean manipulation: computing don't-cares for a node in the window, and deriving a new Boolean function of the node after resubstitution. Experimental results on 6-input LUT networks after a high effort synthesis show substantial reductions in area and delay. When applied to 20 large academic benchmarks, the LUT counts and logic levels are reduced by 45.0% and 12.2%, respectively. The longest runtime for synthesis and mapping is about two minutes. When applied to a set of 14 industrial benchmarks ranging up to 83K 6-LUTs, the LUT counts and logic levels are reduced by 11.8% and 16.5%, respectively. The longest runtime is about 30 minutes.", "paper_title": "Scalable Don't-Care-Based Logic Optimization and Resynthesis", "paper_id": "WOS:000299337900004"}