{"auto_keywords": [{"score": 0.03673714600588314, "phrase": "tla"}, {"score": 0.00481495049065317, "phrase": "different_contracts"}, {"score": 0.004736045157669388, "phrase": "hierarchical_component-based_systems"}, {"score": 0.004324521292490181, "phrase": "better_reliability"}, {"score": 0.004253618550301311, "phrase": "component-based_systems"}, {"score": 0.004149429072483132, "phrase": "confract_system"}, {"score": 0.004047781270412204, "phrase": "contracting_system"}, {"score": 0.0039813976794342, "phrase": "hierarchical_software_components"}, {"score": 0.0032916702592724217, "phrase": "behavioral_sequence-based_formalism"}, {"score": 0.0031582637043009562, "phrase": "confract"}, {"score": 0.0030808211830129304, "phrase": "domain_specific_language"}, {"score": 0.0021049977753042253, "phrase": "concrete_application"}], "paper_keywords": [""], "paper_abstract": "Using different specification formalisms together is necessary to leverage better reliability on component-based systems. The ConFract system provides a contracting system for hierarchical software components, but currently, only executable assertions are supported. In this paper, we describe how TLA, taken as an instance of behavioral sequence-based formalism, was integrated in ConFract. A domain specific language is proposed in order to enable designers to describe the observations needed to appropriately verify their specifications. These observations are automatically generated for assertions and in the case of TLA, we show what kind of observations must be provided to link the specifications to the concrete application.", "paper_title": "Enforcing different contracts in hierarchical component-based systems", "paper_id": "WOS:000241358100004"}