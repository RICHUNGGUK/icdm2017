{"auto_keywords": [{"score": 0.04848034369451246, "phrase": "crash-recovery_failure_model"}, {"score": 0.02624422616046351, "phrase": "correct_process"}, {"score": 0.00481495049065317, "phrase": "omega_failure_detector"}, {"score": 0.004156012879026324, "phrase": "process_failures"}, {"score": 0.0037959868107895053, "phrase": "asynchronous_systems"}, {"score": 0.0035065523764817143, "phrase": "particular_failure_detector"}, {"score": 0.003428681995547155, "phrase": "omega"}, {"score": 0.0032760377953971248, "phrase": "eventual_leader_election_functionality"}, {"score": 0.002305014991156598, "phrase": "minimum_number"}], "paper_keywords": ["Distributed algorithms", " Consensus", " Omega failure detector", " Eventual leader election"], "paper_abstract": "Unreliable failure detectors are mechanisms providing information about process failures, that allow to solve several problems in asynchronous systems, e.g., Consensus. A particular failure detector, Omega, provides an eventual leader election functionality. This paper addresses the implementation of Omega in the crash-recovery failure model. We first propose an algorithm assuming that processes are reachable from the correct process that crashes and recovers a minimum number of times. Then, we propose two algorithms which assume only that processes are reachable from some correct process. Besides this, one of the algorithms requires the membership to be known a priori, while the other two do not. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Implementing the Omega failure detector in the crash-recovery failure model", "paper_id": "WOS:000263385500003"}