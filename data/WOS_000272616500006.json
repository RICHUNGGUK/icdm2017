{"auto_keywords": [{"score": 0.03501467026270221, "phrase": "simplify"}, {"score": 0.00481495049065317, "phrase": "hol-boogie-an_interactive_prover-backend"}, {"score": 0.004644014990871423, "phrase": "verification_condition_generator"}, {"score": 0.0045726187330434025, "phrase": "imperative_core_language"}, {"score": 0.004253618550301311, "phrase": "first-order_logic"}, {"score": 0.0038959121068990517, "phrase": "ghost_fields"}, {"score": 0.0038558497470953306, "phrase": "ghost_variables"}, {"score": 0.003816197777388722, "phrase": "ghost_code"}, {"score": 0.0037769520261285872, "phrase": "specification_functions"}, {"score": 0.0036427316134070007, "phrase": "specific_modeling_methodology"}, {"score": 0.0036052633308076933, "phrase": "boogie's_verification_conditions"}, {"score": 0.003513264130359459, "phrase": "wp_calculus"}, {"score": 0.0034771228725942846, "phrase": "annotated_programs"}, {"score": 0.003370907075333389, "phrase": "automated_theorem_provers"}, {"score": 0.003151736708029235, "phrase": "language-specific_modeling_constructs"}, {"score": 0.0030083825666563898, "phrase": "elementary_operations"}, {"score": 0.002726740692380339, "phrase": "proof_environment"}, {"score": 0.0026986685585382347, "phrase": "hol-boogie"}, {"score": 0.0026026666736474404, "phrase": "interactive_theorem"}, {"score": 0.0025230952890994236, "phrase": "specific_c_front-end"}, {"score": 0.0023834640793589414, "phrase": "specific_techniques"}, {"score": 0.002358917661465133, "phrase": "automated_and_interactive_proof_methods"}, {"score": 0.002286781334850213, "phrase": "main_goal"}, {"score": 0.0022168460543913787, "phrase": "program_verification_engineers"}, {"score": 0.0021049977753042253, "phrase": "combined_proofs"}], "paper_keywords": ["Isabelle/HOL", " Theorem proving", " Program verification", " Memory models", " Annotation languages"], "paper_abstract": "Boogie is a verification condition generator for an imperative core language. It has front-ends for the programming languages C# and C enriched by annotations in first-order logic, i.e. pre- and postconditions, assertions, and loop invariants. Moreover, concepts like ghost fields, ghost variables, ghost code and specification functions have been introduced to support a specific modeling methodology. Boogie's verification conditions-constructed via a wp calculus from annotated programs-are usually transferred to automated theorem provers such as Simplify or Z3. This also comprises the expansion of language-specific modeling constructs in terms of a theory describing memory and elementary operations on it; this theory is called a machine/memory model. In this paper, we present a proof environment, HOL-Boogie, that combines Boogie with the interactive theorem prover Isabelle/HOL, for a specific C front-end and a machine/memory model. In particular, we present specific techniques combining automated and interactive proof methods for code verification. The main goal of our environment is to help program verification engineers in their task to \"debug\" annotations and to find combined proofs where purely automatic proof attempts fail.", "paper_title": "HOL-Boogie-An Interactive Prover-Backend for the Verifying C Compiler", "paper_id": "WOS:000272616500006"}