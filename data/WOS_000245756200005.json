{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "continuous"}, {"score": 0.004792654869642251, "phrase": "nearest_neighbor_queries"}, {"score": 0.004748371393578422, "phrase": "sliding_windows"}, {"score": 0.0046394362688524475, "phrase": "continuous_monitoring"}, {"score": 0.004596561972944185, "phrase": "nearest_neighbor"}, {"score": 0.0044702911400353535, "phrase": "sliding_window_streams"}, {"score": 0.00432733352307636, "phrase": "data_points"}, {"score": 0.00398028819691605, "phrase": "sliding_window"}, {"score": 0.003593555152077465, "phrase": "fixed_interval"}, {"score": 0.0033515736929172644, "phrase": "query_processor"}, {"score": 0.0032292292848296617, "phrase": "long-running_nn_queries"}, {"score": 0.0028615323526689582, "phrase": "conceptual_partitioning"}, {"score": 0.0027698788736535865, "phrase": "continuous_nn_monitoring"}, {"score": 0.002744234034162797, "phrase": "update_streams"}, {"score": 0.00269365253474335, "phrase": "sliding_window_model"}, {"score": 0.002656327554326748, "phrase": "second_technique"}, {"score": 0.0025952620596908773, "phrase": "skyline_maintenance"}, {"score": 0.0025592969422491476, "phrase": "distance-time_space"}, {"score": 0.0025121156016001886, "phrase": "future_changes"}, {"score": 0.0024772998651215964, "phrase": "nn_set"}, {"score": 0.0023103100997344072, "phrase": "nn_search"}, {"score": 0.0022155569675462333, "phrase": "comprehensive_experimental_evaluation"}, {"score": 0.0021848422732893926, "phrase": "skyline-based_algorithm"}, {"score": 0.0021646022201798247, "phrase": "lower_cpu_cost"}, {"score": 0.0021049977753042253, "phrase": "slightly_larger_space_overhead"}], "paper_keywords": ["location-dependent and sensitive", " spatial databases", " query processing", " nearest neighbors", " data streams", " sliding windows"], "paper_abstract": "This paper studies continuous monitoring of nearest neighbor ( NN) queries over sliding window streams. According to this model, data points continuously stream in the system, and they are considered valid only while they belong to a sliding window that contains 1) the W most recent arrivals ( count-based) or 2) the arrivals within a fixed interval W covering the most recent time stamps ( time-based). The task of the query processor is to constantly maintain the result of long-running NN queries among the valid data. We present two processing techniques that apply to both count-based and time-based windows. The first one adapts conceptual partitioning, the best existing method for continuous NN monitoring over update streams, to the sliding window model. The second technique reduces the problem to skyline maintenance in the distance-time space and precomputes the future changes in the NN set. We analyze the performance of both algorithms and extend them to variations of NN search. Finally, we compare their efficiency through a comprehensive experimental evaluation. The skyline-based algorithm achieves lower CPU cost, at the expense of slightly larger space overhead.", "paper_title": "Continuous nearest neighbor queries over sliding windows", "paper_id": "WOS:000245756200005"}