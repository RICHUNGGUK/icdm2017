{"auto_keywords": [{"score": 0.03978021035630368, "phrase": "rackoff"}, {"score": 0.0062019372652681115, "phrase": "ferrante"}, {"score": 0.00481495049065317, "phrase": "linear_arithmetic"}, {"score": 0.004605748839642513, "phrase": "detailed_implementations"}, {"score": 0.004524624065803229, "phrase": "quantifier_elimination"}, {"score": 0.004327981760540394, "phrase": "real_linear_arithmetic"}, {"score": 0.004251728624599691, "phrase": "theorem_provers"}, {"score": 0.004139850082354509, "phrase": "underlying_algorithms"}, {"score": 0.003314591878914152, "phrase": "tactic_style"}, {"score": 0.0031703706626348507, "phrase": "proof-producing_functional_program"}, {"score": 0.002142832962924139, "phrase": "reflective_approach"}], "paper_keywords": ["proof synthesis", " reflection", " linear arithmetic"], "paper_abstract": "This article presents detailed implementations of quantifier elimination for both integer and real linear arithmetic for theorem provers. The underlying algorithms are those by Cooper (for Z) and by Ferrante and Rackoff (for R). Both algorithms are realized in two entirely different ways: once in tactic style, i.e. by a proof-producing functional program, and once by reflection, i.e. by computations inside the logic rather than in the meta-language. Both formalizations are generic because they make only minimal assumptions w.r.t. the underlying logical system and theorem prover. An implementation in Isabelle/HOL shows that the reflective approach is between one and two orders of magnitude faster.", "paper_title": "Proof synthesis and reflection for linear arithmetic", "paper_id": "WOS:000257441200002"}