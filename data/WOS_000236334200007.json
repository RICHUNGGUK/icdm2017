{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "semantic_web_services"}, {"score": 0.043197624382256834, "phrase": "web_services"}, {"score": 0.03513314185416944, "phrase": "process_calculus"}, {"score": 0.03446132845644061, "phrase": "process_model"}, {"score": 0.03396561512180587, "phrase": "composite_service"}, {"score": 0.028391038491896337, "phrase": "subtyping_rules"}, {"score": 0.004767261858417823, "phrase": "linear_logic_theorem"}, {"score": 0.004558414405811025, "phrase": "automatic_composition"}, {"score": 0.004272724011826495, "phrase": "semantic_web_service_language"}, {"score": 0.004230382915464492, "phrase": "daml-s"}, {"score": 0.004167653403322565, "phrase": "external_presentation"}, {"score": 0.003906357144047631, "phrase": "extralogical_axioms"}, {"score": 0.003829290275367182, "phrase": "ll._ll"}, {"score": 0.0037350832473790007, "phrase": "conscious_logic"}, {"score": 0.0036070601923916196, "phrase": "concurrent_features"}, {"score": 0.0034317185678527672, "phrase": "non-functional_attributes"}, {"score": 0.002984665318717504, "phrase": "type_theory"}, {"score": 0.002769568481822277, "phrase": "complete_proof"}, {"score": 0.0026217213613095322, "phrase": "valid_dataflow"}, {"score": 0.002595698433525986, "phrase": "composite_services"}, {"score": 0.0024941578231560055, "phrase": "semantic_reasoning"}, {"score": 0.0023846534541336326, "phrase": "system_architecture"}, {"score": 0.002349228457383314, "phrase": "daml-s_translator"}, {"score": 0.0021690954996051283, "phrase": "java"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["service composition", " web service", " semantic web", " linear logic theorem proving"], "paper_abstract": "This paper introduces a method for automatic composition of Semantic Web services using Linear Logic (LL) theorem proving. The method uses a Semantic Web service language (DAML-S) for external presentation of Web services, while, internally, the services are presented by extralogical axioms and proofs in LL. LL, as a resource conscious logic, enables us to capture the concurrent features of Web services formally (including parameters, states and non-functional attributes). We use a process calculus to present the process model of the composite service. The process calculus is attached to the LL inference rules in the style of type theory. Thus, the process model for a composite service can be generated directly from the complete proof. We introduce a set of subtyping rules that defines a valid dataflow for composite services. The subtyping rules that are used for semantic reasoning are presented with LL inference figures. We propose a system architecture where the DAML-S Translator, LL Theorem Prover and Semantic Reasoner can operate together. This architecture has been implemented in Java. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Composition of semantic web services using linear logic theorem proving", "paper_id": "WOS:000236334200007"}