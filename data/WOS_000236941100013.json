{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "graph_transformation_systems"}, {"score": 0.004563427013973105, "phrase": "general_specification_language"}, {"score": 0.00409895142748329, "phrase": "mobile_and_distributed_systems"}, {"score": 0.0038846843242954935, "phrase": "counterexample-guided_abstraction_refinement_technique"}, {"score": 0.0034890541438930577, "phrase": "gts"}, {"score": 0.003378385493203297, "phrase": "petri_nets"}, {"score": 0.003167441161387607, "phrase": "spurious_counterexample"}, {"score": 0.0026384167183586015, "phrase": "merged_nodes"}, {"score": 0.0025003054002226965, "phrase": "abstraction_refinement"}, {"score": 0.0023694065215394593, "phrase": "spurious_run"}, {"score": 0.0021507795710951384, "phrase": "augur_tool"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": [""], "paper_abstract": "Graph transformation systems are a general specification language for systems with dynamically changing topologies, such as mobile and distributed systems. We propose a counterexample-guided abstraction refinement technique which is based on the over-approximation of graph transformation systems (GTS) by Petri nets. We show that a spurious counterexample is caused by merging nodes during the approximation. We present a technique for identifying these merged nodes and splitting them using abstraction refinement, which removes the spurious run. The technique has been implemented in the AuGUR tool and experimental results are discussed.", "paper_title": "Counterexample-guided abstraction refinement for the analysis of graph transformation systems", "paper_id": "WOS:000236941100013"}