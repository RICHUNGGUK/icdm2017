{"auto_keywords": [{"score": 0.036090134643286496, "phrase": "behavioral_model"}, {"score": 0.00481495049065317, "phrase": "malware_and_vulnerability_exploits"}, {"score": 0.0047846807459660376, "phrase": "current_anti-malware_tools"}, {"score": 0.004665483918844599, "phrase": "ever-evolving_malware_attacks"}, {"score": 0.004578030096508602, "phrase": "inevitable_vulnerabilities"}, {"score": 0.00452063603944825, "phrase": "complex_software"}, {"score": 0.0044079880067019765, "phrase": "performance_penalty"}, {"score": 0.004366469287481091, "phrase": "anti-malware_tools"}, {"score": 0.004204252026468792, "phrase": "modern_mobile_devices"}, {"score": 0.003922283019437895, "phrase": "fine-grained_anomaly_detection_defense_framework"}, {"score": 0.0038730779753083787, "phrase": "cost-efficient_way"}, {"score": 0.0038365781437074017, "phrase": "malicious_behavior"}, {"score": 0.003800420973670517, "phrase": "vulnerability_exploits"}, {"score": 0.003776504983530801, "phrase": "resource-constrained_computing_platforms"}, {"score": 0.003693973656103879, "phrase": "trusted_third_party"}, {"score": 0.003579179502431823, "phrase": "new_application"}, {"score": 0.0035120164504478437, "phrase": "heavily_monitored_testing_environment"}, {"score": 0.003467940281748612, "phrase": "target_system"}, {"score": 0.0033814348757887232, "phrase": "extensive_security_policies"}, {"score": 0.002999012736727594, "phrase": "tested_application_binary"}, {"score": 0.002860212113080887, "phrase": "unlikely_event"}, {"score": 0.0028332303659245085, "phrase": "new_execution_path"}, {"score": 0.0027976491158911514, "phrase": "conservative_but_lightweight_security_policies"}, {"score": 0.002719212119462965, "phrase": "user_end"}, {"score": 0.0026180306489526095, "phrase": "static_analysis"}, {"score": 0.002568856989650259, "phrase": "defense_framework"}, {"score": 0.002520604609793834, "phrase": "intel_atom_processor"}, {"score": 0.0022142194702079866, "phrase": "poor_virus_coverage"}, {"score": 0.002186395051086251, "phrase": "obfuscated_viruses"}, {"score": 0.0021589195238286233, "phrase": "safe_standard_library_blocks"}, {"score": 0.0021049977753042253, "phrase": "model_size"}], "paper_keywords": ["Behavioral anomaly detection", " Dynamic binary instrumentation", " Malware detection", " Vulnerability exploit detection"], "paper_abstract": "Current anti-malware tools have proved to be insufficient in combating ever-evolving malware attacks and vulnerability exploits due to inevitable vulnerabilities present in the complex software used today. In addition, the performance penalty incurred by anti-malware tools is magnified when security approaches designed for desktops are migrated to modern mobile devices, such as tablets and laptops, due to their relatively limited processing capabilities and battery capacities. In this paper, we propose a fine-grained anomaly detection defense framework that offers a cost-efficient way to detect malicious behavior and prevent vulnerability exploits in resource-constrained computing platforms. In this framework, a trusted third party (e.g., the publisher) first tests a new application by running it in a heavily monitored testing environment that emulates the target system and extracts a behavioral model from its execution paths. Extensive security policies are enforced during this process. In case of a violation, the program is denied release to the user. If the application passes the tests, the user can download the behavioral model along with the tested application binary. At run-time, the application is monitored against the behavioral model. In the unlikely event that a new execution path is encountered, conservative but lightweight security policies are applied. To reduce overhead at the user end, the behavioral model may be further reduced by the publisher through static analysis. We have implemented the defense framework using a netbook with the Intel Atom processor and evaluated it with a suite of 51 real-world Linux viruses and malware. Experiments demonstrate that our tool achieves a very high coverage (98 %) of considered malware and security threats. The four antivirus tools we compare our tool against were found to have poor virus coverage, especially of obfuscated viruses. By removing safe standard library blocks from the behavioral model, we reduce the model size by 8.4 and the user's run-time overhead by 23 %.", "paper_title": "A defense framework against malware and vulnerability exploits", "paper_id": "WOS:000341829200003"}