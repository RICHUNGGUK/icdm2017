{"auto_keywords": [{"score": 0.03664435957391308, "phrase": "avx"}, {"score": 0.009997490354049515, "phrase": "shll"}, {"score": 0.00481495049065317, "phrase": "split_hll_finite_volume_method"}, {"score": 0.004764220976404241, "phrase": "shallow_water_and_euler_equations"}, {"score": 0.004455061431809975, "phrase": "parallel_computation"}, {"score": 0.004361644989356558, "phrase": "shallow_water_equations"}, {"score": 0.004330941610682453, "phrase": "euler_equations"}, {"score": 0.004165879874212301, "phrase": "shll_method"}, {"score": 0.004121960535174029, "phrase": "governing_equations"}, {"score": 0.004035500442527029, "phrase": "coordinate_direction"}, {"score": 0.004021267064832957, "phrase": "-_this_splitting_results"}, {"score": 0.003978866233891427, "phrase": "high_degree"}, {"score": 0.003760137090849196, "phrase": "vectorization_capacities"}, {"score": 0.003720479367430766, "phrase": "vector-computing_architectures"}, {"score": 0.003603989174919527, "phrase": "simd_capacities"}, {"score": 0.003578600071301459, "phrase": "modern_cpus"}, {"score": 0.0034299649219748513, "phrase": "recent_cpus"}, {"score": 0.0033937776228549557, "phrase": "main_feature"}, {"score": 0.0032991276152705934, "phrase": "simd_operations"}, {"score": 0.0031397776924946526, "phrase": "previous_simd_streaming_extensions"}, {"score": 0.0030521898646210413, "phrase": "modern_cpu"}, {"score": 0.0030093137393901355, "phrase": "large_number"}, {"score": 0.002863921785266393, "phrase": "available_cpu_core"}, {"score": 0.0028437313714204087, "phrase": "shared_memory"}, {"score": 0.0027546167254869493, "phrase": "direction-split_higher_order_extension"}, {"score": 0.002612238631882345, "phrase": "intrinsic_functions"}, {"score": 0.0025846562485378247, "phrase": "flux_computation"}, {"score": 0.0025664295665392203, "phrase": "state_computation_modules"}, {"score": 0.002548331088496964, "phrase": "high_performance"}, {"score": 0.002485983124803852, "phrase": "flux_computations"}, {"score": 0.0023325586335885104, "phrase": "single_workstation"}, {"score": 0.0022434880661725493, "phrase": "performance_increase"}, {"score": 0.002180848602315088, "phrase": "single_core"}, {"score": 0.0021501863832966966, "phrase": "flux_evaluation_kernel"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Parallel computing", " AVX", " Advanced Vector eXtensions", " OpenMP", " Vectorization", " SHLL", " HLL", " Integral balance", " Finite Volume Method", " Shallow Water Equations", " Euler Equations"], "paper_abstract": "Presented is the application of the Split Harten, Lax and van Leer (SHLL) technique applied to parallel computation using a hybrid OpenMP/AVX parallelization paradigm for the Shallow Water Equations and Euler Equations. The key behind the ease of parallelization of the SHLL method for both governing equations is the mathematical/vector splitting in each coordinate direction - this splitting results in a high degree of locality, producing a scheme which is embarrassingly parallel and well suited for the vectorization capacities offered by vector-computing architectures. Here we demonstrate this capacity using the SIMD capacities of modern CPUs, namely the Advanced Vector eXtensions (AVX) capability of recent CPUs. The main feature of AVX is the capacity to perform SIMD operations on 8 floating point variables in parallel - an increase from 4 floating point variables as possible using the previous SIMD Streaming Extensions (SSE). Furthermore, since modern CPU's employ a large number of cores, we further extend the performance by using AVX on each available CPU core using shared memory (OpenMP) parallelization. We present a direction-split higher order extension to both the SHLL method and apply it to AVX through the use of intrinsic functions in the flux computation and state computation modules. High performance is obtained by ensuring that all flux computations are performed using only AVX intrinsic functions - no computations are performed in serial. Through this approach, a single workstation with 2x Xeon CPU's (16 physical cores) allows a performance increase of over 117 times that of a single core alone in the flux evaluation kernel. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Hybrid OpenMP/AVX acceleration of a Split HLL Finite Volume Method for the Shallow Water and Euler Equations", "paper_id": "WOS:000350535100019"}