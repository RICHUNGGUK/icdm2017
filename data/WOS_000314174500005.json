{"auto_keywords": [{"score": 0.04616926877842657, "phrase": "software_engineering_tools"}, {"score": 0.03661145497900345, "phrase": "programmer_navigation"}, {"score": 0.00481495049065317, "phrase": "programmers_debug"}, {"score": 0.0046364836476864325, "phrase": "human_debugging"}, {"score": 0.004571269461883144, "phrase": "complex_mental_constructs"}, {"score": 0.0037309384824565695, "phrase": "large_collections"}, {"score": 0.0036958398682001015, "phrase": "source_code"}, {"score": 0.003643807817480753, "phrase": "modern_programming_environment"}, {"score": 0.0035587046945919788, "phrase": "information_foraging_theory"}, {"score": 0.0028766278519176355, "phrase": "mental_states"}, {"score": 0.0027050595279115015, "phrase": "empirical_study"}, {"score": 0.002641823250595624, "phrase": "real-world_open_source_program"}, {"score": 0.0025678829712650437, "phrase": "programmers'_verbalizations"}, {"score": 0.0023249757987087055, "phrase": "executable_model"}, {"score": 0.002292199117499287, "phrase": "programmer_navigation_behavior"}, {"score": 0.0022492129111567824, "phrase": "comparable_models"}, {"score": 0.002196609505859369, "phrase": "information_scent"}], "paper_keywords": ["Information foraging theory", " debugging", " software maintenance", " programmer navigation", " information scent", " empirical software engineering"], "paper_abstract": "Many theories of human debugging rely on complex mental constructs that offer little practical advice to builders of software engineering tools. Although hypotheses are important in debugging, a theory of navigation adds more practical value to our understanding of how programmers debug. Therefore, in this paper, we reconsider how people go about debugging in large collections of source code using a modern programming environment. We present an information foraging theory of debugging that treats programmer navigation during debugging as being analogous to a predator following scent to find prey in the wild. The theory proposes that constructs of scent and topology provide enough information to describe and predict programmer navigation during debugging, without reference to mental states such as hypotheses. We investigate the scope of our theory through an empirical study of 10 professional programmers debugging a real-world open source program. We found that the programmers' verbalizations far more often concerned scent-following than hypotheses. To evaluate the predictiveness of our theory, we created an executable model that predicted programmer navigation behavior more accurately than comparable models that did not consider information scent. Finally, we discuss the implications of our results for enhancing software engineering tools.", "paper_title": "How Programmers Debug, Revisited: An Information Foraging Theory Perspective", "paper_id": "WOS:000314174500005"}