{"auto_keywords": [{"score": 0.04976971084510215, "phrase": "hoare's_find"}, {"score": 0.04900554137256697, "phrase": "smoothed_analysis"}, {"score": 0.014790859752100333, "phrase": "hoare"}, {"score": 0.00481495049065317, "phrase": "smoothed_analysis_of_quicksort"}, {"score": 0.004676575291629554, "phrase": "hoare's_find_algorithm"}, {"score": 0.004298666679374568, "phrase": "easy-to-implement_algorithm"}, {"score": 0.004243289764306128, "phrase": "k-th_smallest_element"}, {"score": 0.004148084083511323, "phrase": "worst-case_number"}, {"score": 0.003964007795174772, "phrase": "average-case_number"}, {"score": 0.0037150687722055727, "phrase": "first_perturbation_model"}, {"score": 0.003619910789366738, "phrase": "n_numbers"}, {"score": 0.0034035317633176352, "phrase": "random_number"}, {"score": 0.003118037760163957, "phrase": "target_element"}, {"score": 0.003057910095857785, "phrase": "perturbed_sequence"}, {"score": 0.003028281155306677, "phrase": "slightly_fewer_comparisons"}, {"score": 0.0029506624896613446, "phrase": "second_perturbation_model"}, {"score": 0.0028104345972072534, "phrase": "random_permutation"}, {"score": 0.0027651847105654363, "phrase": "marked_elements"}, {"score": 0.002711842889248926, "phrase": "expected_number"}, {"score": 0.002549604441640963, "phrase": "lower_bounds"}, {"score": 0.0025248881422983553, "phrase": "smoothed_number"}, {"score": 0.002436289099444074, "phrase": "median-of-three_pivot_rule"}, {"score": 0.0023507916951658455, "phrase": "first_element"}, {"score": 0.002246292543825748, "phrase": "last_element"}, {"score": 0.002125612498781805, "phrase": "significant_improvement"}, {"score": 0.0021049977753042253, "phrase": "classic_rule"}], "paper_keywords": ["Smoothed analysis", " Hoare's find", " Quickselect", " Quicksort", " Median-of-three"], "paper_abstract": "We provide a smoothed analysis of Hoare's find algorithm, and we revisit the smoothed analysis of quicksort. Hoare's find algorithm-often called quickselect or one-sided quicksort-is an easy-to-implement algorithm for finding the k-th smallest element of a sequence. While the worst-case number of comparisons that Hoare's find needs is I similar to(n (2)), the average-case number is I similar to(n). We analyze what happens between these two extremes by providing a smoothed analysis. In the first perturbation model, an adversary specifies a sequence of n numbers of [0,1], and then, to each number of the sequence, we add a random number drawn independently from the interval [0,d]. We prove that Hoare's find needs Theta(n/d+1 root n/d + n) comparisons in expectation if the adversary may also specify the target element (even after seeing the perturbed sequence) and slightly fewer comparisons for finding the median. In the second perturbation model, each element is marked with a probability of p, and then a random permutation is applied to the marked elements. We prove that the expected number of comparisons to find the median is Omega(1 - p) n/p log n). Finally, we provide lower bounds for the smoothed number of comparisons of quicksort and Hoare's find for the median-of-three pivot rule, which usually yields faster algorithms than always selecting the first element: The pivot is the median of the first, middle, and last element of the sequence. We show that median-of-three does not yield a significant improvement over the classic rule.", "paper_title": "On Smoothed Analysis of Quicksort and Hoare's Find", "paper_id": "WOS:000298852300013"}