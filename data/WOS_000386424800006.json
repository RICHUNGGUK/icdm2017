{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "datalog_programs"}, {"score": 0.004777214679969785, "phrase": "top-k_queries"}, {"score": 0.004739773204474094, "phrase": "highly_expressive_declarative_languages"}, {"score": 0.004503422625191897, "phrase": "operational_logic"}, {"score": 0.004468117364177126, "phrase": "data_intensive_applications"}, {"score": 0.004129873531628877, "phrase": "result_explanation"}, {"score": 0.003939296259436904, "phrase": "data_provenance"}, {"score": 0.003817137134650275, "phrase": "detailed_form"}, {"score": 0.00361237042013781, "phrase": "derivation_trees"}, {"score": 0.003097865379563127, "phrase": "novel_top-k_query_language"}, {"score": 0.0030135741897058844, "phrase": "selection_criteria"}, {"score": 0.0029781530607129653, "phrase": "tree_patterns"}, {"score": 0.0028857130140890787, "phrase": "database_facts"}, {"score": 0.0027961342030212353, "phrase": "efficient_novel_algorithm"}, {"score": 0.0027093285574752457, "phrase": "datalog_program"}, {"score": 0.0024357240356443653, "phrase": "bottom-up_datalog_evaluation"}, {"score": 0.0023787690061742566, "phrase": "polynomial_data_complexity"}, {"score": 0.0023600807990911145, "phrase": "compact_representation"}, {"score": 0.002332322771009122, "phrase": "top-k_trees"}, {"score": 0.0022688141624966967, "phrase": "linear_time"}, {"score": 0.0021724831184390192, "phrase": "algorithm_performance"}, {"score": 0.002121670413111008, "phrase": "complex_datalog_programs"}, {"score": 0.0021049977753042253, "phrase": "full_provenance_tracking"}], "paper_keywords": [""], "paper_abstract": "Highly expressive declarative languages, such as datalog, are now commonly used to model the operational logic of data intensive applications. The typical complexity of such datalog programs, and the large volume of data that they process, call for result explanation. Results may be explained through the tracking and presentation of data provenance, and here we focus on a detailed form of provenance (how provenance), defining it as the set of derivation trees of a given fact. While informative, the size of such full provenance information is typically too large and complex (even when compactly represented) to allow displaying it to the user. To this end, we propose a novel top-k query language for querying datalog provenance, supporting selection criteria based on tree patterns and ranking based on the rules and database facts used in derivation. We propose an efficient novel algorithm based on (1) instrumenting the datalog program so that, upon evaluation, it generates only relevant provenance, and (2) efficient top-k (relevant) provenance generation, combined with bottom-up datalog evaluation. The algorithm computes in polynomial data complexity a compact representation of the top-k trees which may be explicitly constructed in linear time with respect to their size. We further experimentally study the algorithm performance, showing its scalability even for complex datalog programs where full provenance tracking is infeasible.", "paper_title": "Selective Provenance for Datalog Programs Using Top-K Queries", "paper_id": "WOS:000386424800006"}