{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_languages"}, {"score": 0.004579005794486596, "phrase": "communication-based_programming"}, {"score": 0.004403480614319231, "phrase": "object-oriented_programming"}, {"score": 0.00428222231579898, "phrase": "concurrent_threads"}, {"score": 0.0039380388343479384, "phrase": "session_bodies"}, {"score": 0.003541357671562449, "phrase": "session_request"}, {"score": 0.00269263690712392, "phrase": "first_class_objects"}, {"score": 0.0025892330566358503, "phrase": "core_language"}, {"score": 0.0025604233506352375, "phrase": "generic_types"}, {"score": 0.0023807981747706376, "phrase": "small_calculus"}, {"score": 0.0022893422054387235, "phrase": "subject_reduction"}, {"score": 0.0022261705957258506, "phrase": "latter_property"}, {"score": 0.0021406417439887907, "phrase": "concurrent_calculi"}], "paper_keywords": ["Session types", " Foundations of object-oriented programming", " Subject reduction", " Progress"], "paper_abstract": "We suggest an amalgamation of communication-based programming (centered on sessions) and object-oriented programming, whereby sessions between concurrent threads are amalgamated with methods. In our proposal, threads consist of the execution of session bodies on objects and communicate with each other by asynchronously sending/receiving objects on channels. The response to a session request is based on the name of the request and the class of the object receiving the request. The decision of how to continue a session is based on the class of the object sent/received. Sessions can be delegated to other sessions, although sessions themselves are not first class objects. We demonstrate our ideas through a core language with generic types, SAM(9), and an example. We then formalize a small calculus, FSAM(9), and prove subject reduction and progress. The latter property is notoriously difficult to achieve in concurrent calculi. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Amalgamating sessions and methods in object-oriented languages with generics", "paper_id": "WOS:000263228000004"}