{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "program_factors"}, {"score": 0.011857787036399746, "phrase": "genetic_algorithms"}, {"score": 0.004758987153057194, "phrase": "crossover_performance"}, {"score": 0.004722038375317162, "phrase": "evolutionary_test_input_generation"}, {"score": 0.004667149874736771, "phrase": "branch_coverage"}, {"score": 0.004630910803911567, "phrase": "c_programs"}, {"score": 0.004488734023485018, "phrase": "popular_search-based_optimisation_technique"}, {"score": 0.004367898947304223, "phrase": "structural_coverage"}, {"score": 0.0034971932704828197, "phrase": "branching_structure"}, {"score": 0.0034564928013639125, "phrase": "c_function"}, {"score": 0.003389704997952315, "phrase": "program_factor"}, {"score": 0.0033372020049592726, "phrase": "example_programs"}, {"score": 0.0030986716686217768, "phrase": "macro-mutation_operator"}, {"score": 0.0030269369940823902, "phrase": "component_parts"}, {"score": 0.00300339527261653, "phrase": "input_vectors"}, {"score": 0.002956858061485755, "phrase": "test_data"}, {"score": 0.0026609940110902666, "phrase": "increasingly_important_role"}, {"score": 0.002579140290642792, "phrase": "target_structure's_input_condition"}, {"score": 0.00253916011199984, "phrase": "independent_sub-problems"}, {"score": 0.0022672107906933714, "phrase": "nested_conditional_statements"}, {"score": 0.0022320551224679526, "phrase": "intermediate_variables"}, {"score": 0.002197443382039439, "phrase": "branching_conditions"}, {"score": 0.002154930852763048, "phrase": "direct_input_values"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Evolutionary Testing", " Search-Based Test Data Generation", " Crossover operator performance"], "paper_abstract": "Context: Genetic Algorithms are a popular search-based optimisation technique for automatically generating test inputs for structural coverage of a program, but there has been little work investigating the class of programs for which they will perform well. Objective: This paper presents and evaluates a series of program factors that are hypothesised to affect the performance of crossover, a key search operator in Genetic Algorithms, when searching for inputs that cover the branching structure of a C function. Method: Each program factor is evaluated with example programs using Genetic Algorithms with and without crossover. Experiments are also performed to test whether crossover is acting as macro-mutation operator rather than usefully recombining the component parts of input vectors when searching for test data. Results: The results show that crossover has an impact for each of the program factors studied. Conclusion: It is concluded crossover plays an increasingly important role for programs with large, multidimensional input spaces, where the target structure's input condition breaks down into independent sub-problems for which solutions may be sought in parallel. Furthermore, it is found that crossover can be inhibited when the program under test is unstructured or involves nested conditional statements; and when intermediate variables are used in branching conditions, as opposed to direct input values. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "An identification of program factors that impact crossover performance in evolutionary test input generation for the branch coverage of C programs", "paper_id": "WOS:000311013200009"}