{"auto_keywords": [{"score": 0.04322166454567049, "phrase": "xr-tree"}, {"score": 0.04051211375775462, "phrase": "structural_join"}, {"score": 0.00481495049065317, "phrase": "xml_structural_join"}, {"score": 0.0047689174754929195, "phrase": "structural_relationships"}, {"score": 0.004501774379030109, "phrase": "xml_elements"}, {"score": 0.0043738432231020885, "phrase": "important_computation_unit"}, {"score": 0.00433200902751133, "phrase": "xml_pattern_matching"}, {"score": 0.004168618849008299, "phrase": "stack-tree_join"}, {"score": 0.0037683358267785435, "phrase": "dietz_numbering_scheme"}, {"score": 0.003608732492631878, "phrase": "dietz_encodings"}, {"score": 0.002977061391551628, "phrase": "new_partition-based_method"}, {"score": 0.0025034338848015166, "phrase": "extensive_experiments"}, {"score": 0.0023743009016047424, "phrase": "xr-tree_algorithms"}, {"score": 0.0022956075241520064, "phrase": "partitioning_results"}, {"score": 0.0022409963215568565, "phrase": "simple_but_efficient_index_structure"}, {"score": 0.002156301969685775, "phrase": "experimental_result"}], "paper_keywords": ["XML", " structural join", " partition"], "paper_abstract": "An XML structural join evaluates structural relationships (e.g. parent-child or ancestor-descendant) between XML elements. It serves as an important computation unit in XML pattern matching. Several classical structural join algorithms have been proposed such as Stack-tree join and XR-Tree join. In this paper, we consider to answer the problem of structural join by partitioning. The Dietz numbering scheme is used for encoding since nodes with the Dietz encodings could be well distributed on a plane. We first extend the relationships between nodes to the relationships between partitions on a plane and obtain some observations and properties about the relationships between partitions. We then propose a new partition-based method, named P-Join for structural join between ancestor and descendant nodes based on the properties derived from our observations. Moreover, we present an enhanced partitioned-based structural join algorithm and two optimized methods. Extensive experiments show that the performance of our proposed algorithms outperform that of Stack-tree and XR-Tree algorithms. In order to store the partitioning results, we design a simple but efficient index structure, called PSS-tree. The experimental result shows that it has less maintenance overhead than XR-Tree.", "paper_title": "Fast XML structural join algorithms by partitioning", "paper_id": "WOS:000254840600004"}