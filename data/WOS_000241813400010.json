{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java-like_languages"}, {"score": 0.046295259069903005, "phrase": "basic_components"}, {"score": 0.04160779452832795, "phrase": "type_constraints"}, {"score": 0.004478308876320956, "phrase": "binary_mixin_modules"}, {"score": 0.003516558537200823, "phrase": "missing_constraints"}, {"score": 0.0034491650585057754, "phrase": "type_safety"}, {"score": 0.003254610516477302, "phrase": "expressive_typed_operators"}, {"score": 0.0031922210879462513, "phrase": "soundness_results"}, {"score": 0.0029830992938695007, "phrase": "separate_layer"}, {"score": 0.002855934865505357, "phrase": "java-like_language"}, {"score": 0.002814759530655965, "phrase": "prototype_implementation"}, {"score": 0.0027474453262607834, "phrase": "small_java_subset"}, {"score": 0.0026430660986106955, "phrase": "great_flexibility"}, {"score": 0.002469830206270585, "phrase": "single_component"}, {"score": 0.0024224481033945943, "phrase": "possible_contexts"}, {"score": 0.002252701813819903, "phrase": "conventional_linking"}, {"score": 0.002135812692862058, "phrase": "powerful_operators"}, {"score": 0.0021049977753042253, "phrase": "mixin_modules"}], "paper_keywords": [""], "paper_abstract": "We define a framework of components based on Java-like languages, where components are binary mixin modules. Basic components can be obtained from a collection of classes by compiling such classes in isolation; for allowing that, requirements in the form of type constraints are associated with each class. Requirements are specified by the user who, however, is assisted by the compiler which can generate missing constraints essential to guarantee type safety. Basic components can be composed together by using a set of expressive typed operators; thanks to soundness results, such a composition is always type safe. The framework is designed as a separate layer which can be instantiated on top of any Java-like language; a prototype implementation is available for a small Java subset. Besides safety, the approach achieves great flexibility in reusing components for two reasons: (1) type constraints generated for a single component exactly capture all possible contexts where it can be safely used; (2) composition of components is not limited to conventional linking, but is achieved by means of a set of powerful operators typical of mixin modules.", "paper_title": "Flexible type-safe linking of components for Java-like languages", "paper_id": "WOS:000241813400010"}