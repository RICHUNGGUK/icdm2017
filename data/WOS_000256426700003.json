{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "event-based_transition_systems"}, {"score": 0.004760765880314089, "phrase": "goal-oriented_requirements_models"}, {"score": 0.004707188147442449, "phrase": "goal-oriented_methods"}, {"score": 0.004550029253278477, "phrase": "software_requirements"}, {"score": 0.004448169552315403, "phrase": "systematic_support"}, {"score": 0.0040171817997972335, "phrase": "convenient_formalisms"}, {"score": 0.003927203683176278, "phrase": "software_behaviour"}, {"score": 0.0038610400240820307, "phrase": "architectural_level"}, {"score": 0.0035869274480340727, "phrase": "formal_specification"}, {"score": 0.003546513036085932, "phrase": "software_operations"}, {"score": 0.003447451122274614, "phrase": "kaos_goal-oriented_method"}, {"score": 0.0032575241721857343, "phrase": "ltsa_toolset"}, {"score": 0.0026411384812121503, "phrase": "architecture_description_languages"}, {"score": 0.0025965853546625352, "phrase": "derived_model"}, {"score": 0.0025097154697345096, "phrase": "formal_analysis"}, {"score": 0.0024534188907003726, "phrase": "kaos_operation_models"}, {"score": 0.0024257447861185813, "phrase": "ltsa."}, {"score": 0.002215274527909304, "phrase": "synchronous_temporal_logic"}, {"score": 0.002190280748985751, "phrase": "requirements_specification"}, {"score": 0.002153316680437517, "phrase": "smooth_transition"}, {"score": 0.0021049977753042253, "phrase": "software_architecture_models"}], "paper_keywords": ["goal-oriented requirements engineering", " labelled transition systems", " method integration", " requirements animation", " requirements analysis"], "paper_abstract": "Goal-oriented methods are increasingly popular for elaborating software requirements. They offer systematic support for incrementally building intentional, structural, and operational models of the software and its environment. Event-based transition systems on the other hand are convenient formalisms for reasoning about software behaviour at the architectural level. The paper relates these two worlds by presenting a technique for translating formal specification of software operations built according to the KAOS goal-oriented method into event-based transition systems analysable by the LTSA toolset. The translation involves moving from a declarative, state-based, timed, synchronous formalism typical of requirements modelling languages to an operational, event-based, untimed, asynchronous one typical of architecture description languages. The derived model can be used for the formal analysis and animation of KAOS operation models in LTSA. The paper also provides insights into the two complementary formalisms, and shows that the use of synchronous temporal logic for requirements specification hinders a smooth transition from requirements to software architecture models.", "paper_title": "Deriving event-based transition systems from goal-oriented requirements models", "paper_id": "WOS:000256426700003"}