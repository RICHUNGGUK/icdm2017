{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "frequent_itemsets"}, {"score": 0.004765788394931875, "phrase": "transaction_databases"}, {"score": 0.004435363840720883, "phrase": "important_task"}, {"score": 0.004278807087784626, "phrase": "data_mining_research"}, {"score": 0.0037057255600764475, "phrase": "frequent_itemset_requirement"}, {"score": 0.0035382855372646164, "phrase": "previous_research"}, {"score": 0.003275807170434343, "phrase": "scanning_databases"}, {"score": 0.003160049822855747, "phrase": "apriori-like_candidate_itemsets_generation"}, {"score": 0.0028659990472580154, "phrase": "effective_algorithm"}, {"score": 0.0027363971333961967, "phrase": "special_data_structure"}, {"score": 0.0027223626424366207, "phrase": "bittable"}, {"score": 0.002585906251354904, "phrase": "quick_candidate_itemsets_generation"}, {"score": 0.0022738775158524793, "phrase": "bittablefi"}, {"score": 0.002250618622667374, "phrase": "apriori"}, {"score": 0.002227577868585937, "phrase": "cbar"}, {"score": 0.002193447487477984, "phrase": "clustertable"}, {"score": 0.002170993336847424, "phrase": "quick_support_count"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["data mining", " frequent itemsets", " BitTable", " database compressing"], "paper_abstract": "Mining frequent itemsets in transaction databases, time-series databases and many other kinds of databases is an important task and has been studied popularly in data mining research. The problem of mining frequent itemsets can be solved by constructing a candidate set of itemsets first, and then, identifying those itemsets that meet the frequent itemset requirement within this candidate set. Most of the previous research mainly focuses on pruning to reduce the candidate itemsets amounts and the times of scanning databases. However, many algorithms adopt an Apriori-like candidate itemsets generation and support count approach that is the most time-wasted process. To address this issue, the paper proposes an effective algorithm named as BitTableFI. In the algorithm, a special data structure BitTable is used horizontally and vertically to compress database for quick candidate itemsets generation and support count, respectively. The algorithm can also be used in many Apriori-like algorithms to improve the performance. Experiments with both synthetic and real databases show that BitTableFI outperforms Apriori and CBAR which uses ClusterTable for quick support count. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "BitTableFI: An efficient mining frequent itemsets algorithm", "paper_id": "WOS:000246658400002"}