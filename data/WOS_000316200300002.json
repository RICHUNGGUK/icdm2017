{"auto_keywords": [{"score": 0.04812305996521059, "phrase": "stochastic_logic"}, {"score": 0.007341592039933142, "phrase": "fault_trees"}, {"score": 0.00678119527083339, "phrase": "static_and_dynamic_gates"}, {"score": 0.00481495049065317, "phrase": "stochastic_logic_implemented"}, {"score": 0.004778594263962987, "phrase": "field-programmable_gate_arrays"}, {"score": 0.0041374874583908535, "phrase": "stochastic_logic_templates"}, {"score": 0.004075198669927074, "phrase": "hardware_implementation"}, {"score": 0.003908678575537341, "phrase": "hardware_templates"}, {"score": 0.0037918465913284478, "phrase": "whole_logic"}, {"score": 0.003748937184382714, "phrase": "field-programmable_gate_array"}, {"score": 0.0035685398335855447, "phrase": "fpga"}, {"score": 0.003435643372146385, "phrase": "traditional_methods"}, {"score": 0.003307881674863807, "phrase": "simplicity"}, {"score": 0.0031966173935538992, "phrase": "accuracy."}, {"score": 0.0031845067058084583, "phrase": "experimental_results"}, {"score": 0.0031010029460927864, "phrase": "fault_trees_results"}, {"score": 0.0030775481952376987, "phrase": "fast_convergence"}, {"score": 0.0030542703032534766, "phrase": "monte_carlo_simulation"}, {"score": 0.0028095140358025, "phrase": "additional_advantage"}, {"score": 0.0027776899345132193, "phrase": "proposed_approach"}, {"score": 0.0025941547726803594, "phrase": "traditional_logic"}, {"score": 0.0024785689583828796, "phrase": "whole_results"}, {"score": 0.0024504843466435487, "phrase": "traditional_arithmetic_logic"}, {"score": 0.0024043803470189455, "phrase": "proposed_technique"}, {"score": 0.0021948455916770233, "phrase": "analytical_approach"}, {"score": 0.002121056250381627, "phrase": "accurate_tool"}, {"score": 0.0021049977753042253, "phrase": "system_reliability_modeling"}], "paper_keywords": ["Fault tree analysis", " field-programmable gate array", " single event upset", " static and dynamic gates", " stochastic logic"], "paper_abstract": "This paper presents a method based on stochastic logic to analyse fault trees. This method supports both static and dynamic gates, and can be applied to any type of fault trees. In this paper, static and dynamic gates would be translated into stochastic logic templates, and a hardware implementation for each gate would be achieved. Based on these hardware templates, it is possible to implement the whole logic on a Field-Programmable Gate Array (FPGA). Utilizing the stochastic logic for implementing a given fault tree on FPGA, the analysis would outperform the following parameters compared to traditional methods: 1) Speed-up, 2) Simplicity, 3) Reliability, and 4) Accuracy. Experimental results illustrate that using stochastic logic for modeling fault trees results in fast convergence of Monte Carlo simulation. Moreover, on average, our FPGA approach takes 50% of the time required by previous emulation approaches. Simplicity is an additional advantage of the proposed approach, achieved because of simplicity behind stochastic logic. Also, the stochastic logic is more reliable compared to traditional logic because any faults like SEUs in stochastic logic have less impact on the whole results compared to traditional arithmetic logic. To evaluate the proposed technique, the analysis is performed on several standard benchmarks composed of static and dynamic gates. The results obtained using this approach agree with those obtained from an analytical approach, which proves that the method is an accurate tool for system reliability modeling.", "paper_title": "A Fast and Accurate Fault Tree Analysis Based on Stochastic Logic Implemented on Field-Programmable Gate Arrays", "paper_id": "WOS:000316200300002"}