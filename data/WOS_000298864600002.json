{"auto_keywords": [{"score": 0.046273829908275756, "phrase": "test-first_strategy"}, {"score": 0.043233070917384396, "phrase": "test_cases"}, {"score": 0.032007894540560286, "phrase": "pattern-based_refactoring"}, {"score": 0.015719716506582538, "phrase": "test_case"}, {"score": 0.010894129960730418, "phrase": "code_refactoring"}, {"score": 0.004739773204474094, "phrase": "pattern-based_software_development"}, {"score": 0.004665764181113345, "phrase": "current_trend"}, {"score": 0.00462919213721188, "phrase": "extreme_programing_methodology"}, {"score": 0.004539005582217305, "phrase": "small_and_medium-sized_projects"}, {"score": 0.004468117364177126, "phrase": "rapidly_or_indefinite_changing_requirements"}, {"score": 0.004329630571352367, "phrase": "important_practices"}, {"score": 0.004295681900150244, "phrase": "extreme_programing"}, {"score": 0.004261998281333649, "phrase": "rapid_development"}, {"score": 0.004228577663320847, "phrase": "quality_support"}, {"score": 0.004065348865695599, "phrase": "system_implementation"}, {"score": 0.003939296259436904, "phrase": "software_development"}, {"score": 0.003817137134650275, "phrase": "\"bad_smell\"_code"}, {"score": 0.003500313767208306, "phrase": "original_test_cases"}, {"score": 0.003405109584265324, "phrase": "testing_programs"}, {"score": 0.00281826552772148, "phrase": "simple_code_refactoring"}, {"score": 0.0026459927476753585, "phrase": "composition_relationship"}, {"score": 0.0026148807877309417, "phrase": "mapping_rules"}, {"score": 0.002494039334114861, "phrase": "test_case_revision_guideline"}, {"score": 0.0023415390666563177, "phrase": "four-phase_approach"}, {"score": 0.0022509878391826867, "phrase": "design_patterns"}, {"score": 0.0021724831184390192, "phrase": "well-known_design_patterns"}, {"score": 0.0021049977753042253, "phrase": "test_coverage"}], "paper_keywords": ["Test cases refactoring", " Code refactoring", " Design pattern", " Test-driven development"], "paper_abstract": "In the current trend, Extreme Programing methodology is widely adopted by small and medium-sized projects for dealing with rapidly or indefinite changing requirements. Test-first strategy and code refactoring are the important practices of Extreme Programing for rapid development and quality support. The test-first strategy emphasizes that test cases are designed before system implementation to keep the correctness of artifacts during software development; whereas refactoring is the removal of \"bad smell\" code for improving quality without changing its semantics. However, the test-first strategy may conflict with code refactoring in the sense that the original test cases may be broken or inefficient for testing programs, which are revised by code refactoring. In general, the developers revise the test cases manually since it is not complicated. However, when the developers perform a pattern-based refactoring to improve the quality, the effort of revising the test cases is much more than that in simple code refactoring. In our observation, a pattern-based refactoring is composed of many simple and atomic code refactorings. If we have the composition relationship and the mapping rules between code refactoring and test case refactoring, we may infer a test case revision guideline in pattern-based refactoring. Based on this idea, in this research, we propose a four-phase approach to guide the construction of the test case refactoring for design patterns. We also introduce our approach by using some well-known design patterns and evaluate its feasibility by means of test coverage.", "paper_title": "A test case refactoring approach for pattern-based software development", "paper_id": "WOS:000298864600002"}