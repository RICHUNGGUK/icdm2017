{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cfd_applications"}, {"score": 0.004518442937844318, "phrase": "parallel_computing"}, {"score": 0.004339293854115301, "phrase": "expensive_mpp_boxes"}, {"score": 0.004289419884432487, "phrase": "cost-effective_networks_of_workstations"}, {"score": 0.00402514392911723, "phrase": "fortran_cfd_sequential_programs"}, {"score": 0.003978866233891427, "phrase": "efficient_message-passing_parallel_programs"}, {"score": 0.00391044206435765, "phrase": "now."}, {"score": 0.0035442655396704724, "phrase": "minimum_number"}, {"score": 0.003503497128638102, "phrase": "user_directives"}, {"score": 0.003306559295382181, "phrase": "dependency_analysis_technique"}, {"score": 0.003066945490483524, "phrase": "mirror-image_decomposition_technique"}, {"score": 0.0030141556259370675, "phrase": "self-dependent_field_loops"}, {"score": 0.0028944757265206332, "phrase": "existing_methods"}, {"score": 0.00282822695516646, "phrase": "traditional_optimizations"}, {"score": 0.00273167822885383, "phrase": "redundant_synchronizations"}, {"score": 0.0026384167183586015, "phrase": "optimization_scheme"}, {"score": 0.002563151935619503, "phrase": "cfd"}, {"score": 0.0024756080101497086, "phrase": "communication_overhead"}, {"score": 0.0022305310659333864, "phrase": "structured_cfd_application_programs"}, {"score": 0.0021049977753042253, "phrase": "large_cfd_applications"}], "paper_keywords": ["automatic parallelization", " computational fluid dynamics (CFD)", " message-passing", " networks of workstations", " pre-compiler"], "paper_abstract": "Computational Fluid Dynamics (CFD) applications are highly demanding for parallel computing. Many such applications have been shifted from expensive MPP boxes to cost-effective Networks of Workstations (NOW). Auto-CFD-NOW is a pre-compiler that transforms Fortran CFD sequential programs to efficient message-passing parallel programs running on NOW. Our work makes the following three unique contributions. First, this pre-compiler is highly automatic, requiring a minimum number of user directives for parallelization. Second, we have applied a dependency analysis technique for the CFD applications, called analysis after partitioning. We propose a mirror-image decomposition technique to parallelize self-dependent field loops that are hard to parallelize by existing methods. Finally, traditional optimizations of communication focus on eliminating redundant synchronizations. We have developed an optimization scheme which combines all the non-redundant synchronizations in CFD programs to further reduce the communication overhead. The Auto-CFD-NOW has been implemented on networks of workstations and has been successfully used for automatically parallelizing structured CFD application programs. Our experiments show its effectiveness and scalability for parallelizing large CFD applications.", "paper_title": "Auto-CFD-NOW: A pre-compiler for effectively parallelizing CFD applications on networks of workstations", "paper_id": "WOS:000240538000006"}