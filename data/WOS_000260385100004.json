{"auto_keywords": [{"score": 0.04901352299036177, "phrase": "combinational_circuit"}, {"score": 0.045526195034269475, "phrase": "bdd"}, {"score": 0.03966656944544487, "phrase": "large_circuits"}, {"score": 0.039247080696152147, "phrase": "range_computation"}, {"score": 0.03453418078028522, "phrase": "circuit's_range"}, {"score": 0.03298553267565858, "phrase": "pi"}, {"score": 0.00481495049065317, "phrase": "implicit_approach"}, {"score": 0.0047797212183363835, "phrase": "minimizing_range-equivalent_circuits"}, {"score": 0.004506968388996092, "phrase": "combinational_equivalence_checking"}, {"score": 0.004473982381245469, "phrase": "random_simulation"}, {"score": 0.004441236717408874, "phrase": "previous_approaches"}, {"score": 0.004392565073466714, "phrase": "binary_decision_diagram"}, {"score": 0.004111488691642256, "phrase": "computed_range"}, {"score": 0.004007083686875716, "phrase": "new_circuit"}, {"score": 0.0039053194919285725, "phrase": "range_rearrangement"}, {"score": 0.0038061298318563925, "phrase": "bdd_blowup_problems"}, {"score": 0.0035233696341819437, "phrase": "new_method"}, {"score": 0.003484721713676736, "phrase": "combinational_circuits"}, {"score": 0.003459191419478298, "phrase": "explicit_range_computation"}, {"score": 0.0033837135367113004, "phrase": "new_concept"}, {"score": 0.003309877074892399, "phrase": "fault_test"}, {"score": 0.0031437775259091794, "phrase": "primary_input"}, {"score": 0.0026348886455716614, "phrase": "range-redundant_pis"}, {"score": 0.002511803988580901, "phrase": "bdd-based_methods"}, {"score": 0.002333549863691002, "phrase": "mcnc"}, {"score": 0.0022909940601580675, "phrase": "experimental_results"}], "paper_keywords": ["Range-preserving simplification", " range-redundant primary input (PI)"], "paper_abstract": "Simplifying a combinational circuit while preserving its range has a variety of applications, such as combinational equivalence checking and random simulation. Previous approaches use the binary decision diagram (BDD) technique to compute the range of one circuit and then reconstruct the circuit using the computed range. Although the size of the new circuit is significantly reduced due to the range rearrangement, this method suffers from the BDD blowup problems for large circuits since performing range computation using BDD is memory intensive. Thus, in this paper, we propose a new method for simplifying combinational circuits without explicit range computation. We first introduce a new concept of a stuck-at fault test for a circuit's range, showing that a range untestable stuck-at fault on a primary input (PI) indicates that this PI is range redundant, i.e., it can be removed without affecting the circuit's range. We then present a procedure to determine if a given range stuck-at fault on a PI is untestable. Our method iteratively identifies and removes range-redundant PIs to simplify a combinational circuit without performing range computation. Accordingly, large circuits that BDD-based methods cannot deal with can be handled using our method. We conduct experiments on a set of ISCAS'85 and MCNC benchmarks, and the experimental results show that our approach can minimize circuits such that fewer PIs are left. On average, our approach gets 37.06% reduction in terms of the number of PIs and 36.31% reduction in terms of the node counts.", "paper_title": "An Implicit Approach to Minimizing Range-Equivalent Circuits", "paper_id": "WOS:000260385100004"}