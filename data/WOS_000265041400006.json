{"auto_keywords": [{"score": 0.030868998874318338, "phrase": "distributed_systems"}, {"score": 0.00481495049065317, "phrase": "local_approach"}, {"score": 0.004775531918452571, "phrase": "rigorously_developing_distributed_system"}, {"score": 0.004678384952779725, "phrase": "cooperative_distributed_system"}, {"score": 0.004621043537046209, "phrase": "wide_range"}, {"score": 0.004471530397729526, "phrase": "industrial_controlling"}, {"score": 0.004434910775034831, "phrase": "business-to-business_trading"}, {"score": 0.004273782634394231, "phrase": "coordinated_exception_handling"}, {"score": 0.004238778092449253, "phrase": "ceh"}, {"score": 0.004101579688745222, "phrase": "cooperative_distributed_systems"}, {"score": 0.0038720442355114045, "phrase": "relevant_peers"}, {"score": 0.003824547895167011, "phrase": "consistent_manner"}, {"score": 0.0037776319581225046, "phrase": "ceh_algorithms"}, {"score": 0.0036855132234738736, "phrase": "crucial_problem"}, {"score": 0.003422371752150812, "phrase": "exceptional_execution"}, {"score": 0.003394314924677555, "phrase": "straightforward_testing"}, {"score": 0.0033664873319204027, "phrase": "model_checking"}, {"score": 0.003204232566468624, "phrase": "effective_way"}, {"score": 0.0031132086055691214, "phrase": "correct_ceh_behavior"}, {"score": 0.0030247625535682987, "phrase": "ceh_algorithm"}, {"score": 0.0029753513692467315, "phrase": "peer_process_language"}, {"score": 0.0027856252557826467, "phrase": "syntactic_conditions"}, {"score": 0.0027176309244222, "phrase": "system_coherence"}, {"score": 0.0026403934420630155, "phrase": "global-to-local_approach"}, {"score": 0.0025338369486914364, "phrase": "global_perspective"}, {"score": 0.0025027144548626975, "phrase": "projection_algorithm"}, {"score": 0.0024116163689723354, "phrase": "well-formed_global_description"}, {"score": 0.0021049977753042253, "phrase": "ceh."}], "paper_keywords": ["distributed system", " exception handling", " fault tolerant", " formal methods"], "paper_abstract": "Cooperative distributed system covers a wide range of applications such as the systems for industrial controlling and business-to-business trading, which are usually safety-critical. Coordinated exception handling (CEH) refers to exception handling in the cooperative distributed systems, where exceptions raised on a peer should be dealt with by all relevant peers in a consistent manner. Some CEH algorithms have been proposed. A crucial problem in using these algorithms is how to develop the peers which are guaranteed coherent in both normal execution and exceptional execution. Straightforward testing or model checking is very expensive. In this paper, we propose an effective way to rigorously develop the systems with correct CEH behavior. Firstly, we formalize the CEH algorithm by proposing a Peer Process Language to precisely describe the distributed systems and their operational semantics. Then we dig out a set of syntactic conditions, and prove its sufficiency for system coherence. Finally, we propose a global-to-local approach, including a language describing the distributed systems from a global perspective and a projection algorithm, for developing the systems. Given a well-formed global description, a set of peers can be generated automatically. We prove the system composed of these peers satisfies the conditions, that is, it is always coherent and correct for CEH.", "paper_title": "Global-to-Local Approach to Rigorously Developing Distributed System with Exception Handling", "paper_id": "WOS:000265041400006"}