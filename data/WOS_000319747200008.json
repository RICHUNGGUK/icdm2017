{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "parallel_file_systems"}, {"score": 0.004523455475492876, "phrase": "high-end_computing_system"}, {"score": 0.004458722048888919, "phrase": "advanced_file_systems"}, {"score": 0.00429057323623293, "phrase": "performance_goals"}, {"score": 0.0041287394089001405, "phrase": "layout_policy"}, {"score": 0.0036788184374592706, "phrase": "complex_data_access_patterns"}, {"score": 0.0034558655164987134, "phrase": "cost-intelligent_data_access_strategy"}, {"score": 0.0033900126423990823, "phrase": "application-specific_optimization_principle"}, {"score": 0.003034916887102753, "phrase": "different_data_layouts"}, {"score": 0.0029627701619228527, "phrase": "cost_model"}, {"score": 0.002864628676257225, "phrase": "data_accesses"}, {"score": 0.002703869368554536, "phrase": "static_layout_optimization"}, {"score": 0.0026142814606853037, "phrase": "dominant_data_access_patterns"}, {"score": 0.0025767987652419054, "phrase": "dynamic_layout_selection"}, {"score": 0.0025521085778978042, "phrase": "hybrid_replications"}, {"score": 0.002443890721386284, "phrase": "theoretical_analysis"}, {"score": 0.00242047093248845, "phrase": "experimental_testing"}, {"score": 0.002340250894008014, "phrase": "proposed_cost-intelligent_layout_approach"}, {"score": 0.0022409963215568565, "phrase": "proposed_cost_model"}, {"score": 0.0021876814398268775, "phrase": "application-specific_data_layout_approach"}, {"score": 0.0021049977753042253, "phrase": "data-intensive_applications"}], "paper_keywords": ["Data layout", " I/O performance modeling", " Parallel file systems", " Parallel I/O", " Data-intensive computing"], "paper_abstract": "Parallel file systems have been developed in recent years to ease the I/O bottleneck of high-end computing system. These advanced file systems offer several data layout strategies in order to meet the performance goals of specific I/O workloads. However, while a layout policy may perform well on some I/O workload, it may not perform as well for another. Peak I/O performance is rarely achieved due to the complex data access patterns. Data access is application dependent. In this study, a cost-intelligent data access strategy based on the application-specific optimization principle is proposed. This strategy improves the I/O performance of parallel file systems. We first present examples to illustrate the difference of performance under different data layouts. By developing a cost model which estimates the completion time of data accesses in various data layouts, the layout can better match the application. Static layout optimization can be used for applications with dominant data access patterns, and dynamic layout selection with hybrid replications can be used for applications with complex I/O patterns. Theoretical analysis and experimental testing have been conducted to verify the proposed cost-intelligent layout approach. Analytical and experimental results show that the proposed cost model is effective and the application-specific data layout approach can provide up to a 74% performance improvement for data-intensive applications.", "paper_title": "Cost-intelligent application-specific data layout optimization for parallel file systems", "paper_id": "WOS:000319747200008"}