{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "eclipse"}, {"score": 0.01584234814934725, "phrase": "java"}, {"score": 0.004767546015485477, "phrase": "static_code_analysers"}, {"score": 0.0046741260449047976, "phrase": "internal_code_quality_problems"}, {"score": 0.004605258779434384, "phrase": "higher_effectiveness"}, {"score": 0.004150661689086371, "phrase": "new_coding_constraints"}, {"score": 0.004109770306454165, "phrase": "relative_ease"}, {"score": 0.003969784439380027, "phrase": "coding_standards"}, {"score": 0.003815607281455725, "phrase": "static_analyser"}, {"score": 0.0037407704200033607, "phrase": "twin_objectives"}, {"score": 0.0036673959568781734, "phrase": "interactive_feedback"}, {"score": 0.0032724821705972357, "phrase": "new_conformance_rules"}, {"score": 0.002993231973906559, "phrase": "eclipse_plug-in"}, {"score": 0.002670719148310961, "phrase": "primitive_checks"}, {"score": 0.0025924443774713473, "phrase": "new_rules"}, {"score": 0.0025415366388578465, "phrase": "rule_construction"}, {"score": 0.002442693254693416, "phrase": "tool_smiths"}, {"score": 0.0023710856920150574, "phrase": "custom_checks"}, {"score": 0.002234092591045251, "phrase": "industry_standard_rule"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["ECLIPSE", " software tools", " static analysis", " static checking", " integrated development environments"], "paper_abstract": "Static code analysers help in exposing internal code quality problems. For higher effectiveness, they must be pressed into use early during the development of code. They must support the formulation of new coding constraints with relative ease to better cope with variations in coding standards. We present the design of a static analyser that addresses these twin objectives. Our system provides interactive feedback to programmers on the non-conformances that occur in response to the changes made to the code. Its rule construction framework empowers programmers to define new conformance rules, which can come into effect immediately after creation. The tool has been realized as an Eclipse plug-in for the analysis of C, C++ and Java sources. Central to its design is the concept of reusing a set of primitive checks by composing them to form new rules. This renders rule construction accessible to programmers, lowers dependence on tool smiths and accelerates the enforcement of custom checks. We also present our experience in defining rules drawn from an industry standard rule set based on this approach. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Constantine: configurable static analysis tool in Eclipse", "paper_id": "WOS:000333915400003"}