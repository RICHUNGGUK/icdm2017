{"auto_keywords": [{"score": 0.04661602933920458, "phrase": "hasprng"}, {"score": 0.010570862914912786, "phrase": "sprng"}, {"score": 0.009621135962186831, "phrase": "programming_interface"}, {"score": 0.00872031091352962, "phrase": "random_numbers"}, {"score": 0.00699925976710404, "phrase": "parallel_computational_science_applications"}, {"score": 0.006598034494877185, "phrase": "reconfigurable_logic"}, {"score": 0.00481495049065317, "phrase": "scalable_parallel_random_number_generators_library"}, {"score": 0.004804721860419901, "phrase": "distributed_program"}, {"score": 0.004776384941305332, "phrase": "test_data"}, {"score": 0.004767714890081118, "phrase": "fast_and_scalable_random_number_generation"}, {"score": 0.004637894541694629, "phrase": "high_performance_reconfigurable_computing_systems"}, {"score": 0.0045923878790533135, "phrase": "hardware_accelerated_sprng_library"}, {"score": 0.004511593053738389, "phrase": "xup"}, {"score": 0.004475449434786537, "phrase": "cray"}, {"score": 0.004423479652344652, "phrase": "field_programmable_cate_arrays"}, {"score": 0.004337079647049165, "phrase": "integer_random_number_generation"}, {"score": 0.004311488803619306, "phrase": "identical_results"}, {"score": 0.00429451182227033, "phrase": "sprng."}, {"score": 0.004210620180395004, "phrase": "mathematical_properties"}, {"score": 0.004194038707802718, "phrase": "data_parallelism"}, {"score": 0.004161070582079449, "phrase": "sprng_algorithms"}, {"score": 0.004136513961642656, "phrase": "high_performance"}, {"score": 0.004039722320757938, "phrase": "communication_overhead"}, {"score": 0.0039679966072067785, "phrase": "large_numbers"}, {"score": 0.0037257240349597947, "phrase": "hasprng_usage"}, {"score": 0.0036745989133841637, "phrase": "high_performance_reconfigurable_computer"}, {"score": 0.003645699005017301, "phrase": "sample_application"}, {"score": 0.003504561424500497, "phrase": "substantial_speedup"}, {"score": 0.003483865648417073, "phrase": "hprc_application"}, {"score": 0.0034833252574936655, "phrase": "multiple_copies"}, {"score": 0.0034695979017190276, "phrase": "random_number_generators"}, {"score": 0.003456783786843139, "phrase": "program"}, {"score": 0.003436047909123737, "phrase": "hasprng_catalogue"}, {"score": 0.0034355149097561165, "phrase": "computational_science_application"}, {"score": 0.0034090177322649963, "phrase": "lirl"}, {"score": 0.0033555914740733377, "phrase": "cpc_program_library"}, {"score": 0.0033423658130336755, "phrase": "queen's_university"}, {"score": 0.003329192187757436, "phrase": "belfast"}, {"score": 0.0033160701479287703, "phrase": "n._ireland"}, {"score": 0.0032899806779312212, "phrase": "standard_cpc"}, {"score": 0.0028878937010060747, "phrase": "amd"}, {"score": 0.002820238850451609, "phrase": "linux"}, {"score": 0.0026317896829641256, "phrase": "monte_carlo_simulations"}, {"score": 0.0025905125106046346, "phrase": "limitless_random_numbers"}, {"score": 0.002559978949788398, "phrase": "hardware_resources"}, {"score": 0.0024754027355965804, "phrase": "statistically_significant_results"}, {"score": 0.002460769527224819, "phrase": "sprng_library"}, {"score": 0.002422168132771912, "phrase": "significant_computational_cost"}, {"score": 0.0023747647741197623, "phrase": "independent_streams"}, {"score": 0.0021555337939170322, "phrase": "software_code"}, {"score": 0.0021301162418196997, "phrase": "hardware_applications"}], "paper_keywords": ["FPGA", " Pseudo-random number generator", " SPRNG", " HASPRING", " Reconfigurable computing", " Monte Carlo"], "paper_abstract": "The Scalable Parallel Random Number Generators library (SPRNG) supports fast and scalable random number generation with good statistical properties for parallel computational science applications. In order to accelerate SPRNG in high performance reconfigurable computing systems, we present the Hardware Accelerated SPRNG library (HASPRNG). Ported to the Xilinx University Program (XUP) and Cray XD1 reconfigurable computing platforms, HASPRNG includes the reconfigurable logic for Field Programmable Cate Arrays (FPGAs) along with a programming interface which performs integer random number generation that produces identical results with SPRNG. This paper describes the reconfigurable logic of HASPRNG exploiting the mathematical properties and data parallelism residing in the SPRNG algorithms to produce high performance and also describes how to use the programming interface to minimize the communication overhead between FPGAs and microprocessors. The programming interface allows a user to be able to use HASPRNG the same way as SPRNG 2.0 on platforms such as the Cray XD1. We also describe how to install HASPRNG and use it. For HASPRNG usage we discuss a FPGA 7r-estimator for a High Performance Reconfigurable Computer (HPRC) sample application and compare to a software 7r-estimator. HASPRNG shows 1.7x speedup over SPRNG on the Cray XD1 and is able to obtain substantial speedup for a HPRC application. Program summary Program title: HASPRNG Catalogue identifier AEER_v1_0 Program summary LIRL: http://cpc.cs.qub.ac.uk/summaries/AEER-v1_0.html Program obtainablefrom: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 594 928 No. of bytes in distributed program, including test data, etc.: 6 509 724 Distribution format: tar.gz Programming language: VHDL (XUP and Cray XDI), C++ (XUP), C (Cray XD1) Computer: PowerPC 405 (XUP) / AMD 2.2 GHz Opteron processor (Cray XDI) Operating system: Linux File size: 15 MB (XUP) / 22 MB (Cray XDI) Classification: 4.13 Nature of problem: Many computational science applications are able to consume large numbers of random numbers. For example, Monte Carlo simulations such as pi-estimation are able to consume limitless random numbers forthe computation as long as hardware resources for the computing are supported. Moreover, parallel computational science applications require independent streams of random numbers to attain statistically significant results. The SPRNG library provides this capability, but at a significant computational cost. The library presented here accelerates the generators of independent streams of random numbers. Solution method: Multiple copies of random number generators in FPGAs allow a computational science application to consume large numbers of random numbers from independent, parallel streams. HASPRNG is a random number generators library to allow a computational science application to employ the multiple copies of random number generators to boost performance. Users can interface HASPRNG with software code executing on microprocessors and/or with hardware applications executing on FPGAs. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "HASPRNG: Hardware Accelerated Scalable Parallel Random Number Generators", "paper_id": "WOS:000273011500016"}