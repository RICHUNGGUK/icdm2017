{"auto_keywords": [{"score": 0.04510723877933964, "phrase": "genome_sequences"}, {"score": 0.03702714837745639, "phrase": "random_disk_accesses"}, {"score": 0.00481495049065317, "phrase": "indexing_human_genome_sequences"}, {"score": 0.004621671570727774, "phrase": "human_genome_sequences"}, {"score": 0.004200197763119297, "phrase": "suffix_tree"}, {"score": 0.003922794571908569, "phrase": "traditional_suffix_tree_construction_algorithms"}, {"score": 0.0038431888954930083, "phrase": "severe_performance_degradation"}, {"score": 0.0037395458116642306, "phrase": "memory_bottleneck_problem"}, {"score": 0.003663645143713398, "phrase": "recent_disk-based_algorithms"}, {"score": 0.0035892794633115227, "phrase": "limited_performance_improvement"}, {"score": 0.003284026247389735, "phrase": "recent_cpus"}, {"score": 0.003239418275717787, "phrase": "multiple_cores"}, {"score": 0.0030460403366412126, "phrase": "fast_algorithm"}, {"score": 0.002984173420996039, "phrase": "'divide-and-conquer'_strategy"}, {"score": 0.002430411367515404, "phrase": "multi-core_cpus"}, {"score": 0.002332626862738603, "phrase": "multiple_partitions"}, {"score": 0.0022083264126633085, "phrase": "different_core"}, {"score": 0.0021782980803068505, "phrase": "parallel_processing"}, {"score": 0.002148677187261496, "phrase": "experimental_results"}], "paper_keywords": ["human genome sequences", " indexing", " suffix tree", " memory bottleneck problem", " divide-and-conquer", " parallel processing"], "paper_abstract": "Since the release of human genome sequences, one of the most important research issues is about indexing the genome sequences, and the suffix tree is most widely adopted for that purpose. The traditional suffix tree construction algorithms suffer from severe performance degradation due to the memory bottleneck problem. The recent disk-based algorithms also provide limited performance improvement due to random disk accesses. Moreover, they do not fully utilize the recent CPUs with multiple cores. In this paper, we propose a fast algorithm based on 'divide-and-conquer' strategy for indexing the human genome sequences. Our algorithm nearly eliminates random disk accesses by accessing the disk in the unit of contiguous chunks. In addition, our algorithm fully utilizes the multi-core CPUs by dividing the genome sequences into multiple partitions and then assigning each partition to a different core for parallel processing. Experimental results show that our algorithm.outperforms the previous fastest DIGEST algorithm by up to 10.5 times.", "paper_title": "A Fast Divide-and-Conquer Algorithm for Indexing Human Genome Sequences", "paper_id": "WOS:000292619500001"}