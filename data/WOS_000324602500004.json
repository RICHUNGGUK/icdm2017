{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "extended_designs"}, {"score": 0.0036697319652557363, "phrase": "extended_design"}, {"score": 0.003260690513595527, "phrase": "explicit_formulas"}, {"score": 0.00314708280192844, "phrase": "non-deterministic_choice"}, {"score": 0.0027307746993761035, "phrase": "extended_state_space"}, {"score": 0.0026827569390113822, "phrase": "new_theory"}, {"score": 0.0023554316787703137, "phrase": "unified_semantics"}, {"score": 0.0023003498123420237, "phrase": "program_transformations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Domain operation", " Egli-Milner order", " Fixpoint", " General correctness", " Program semantics", " Recursion", " Semiring", " While-program"], "paper_abstract": "Extended designs distinguish non-terminating and aborting executions of sequential, non-deterministic programs. We show how to treat them algebraically based on techniques we have previously applied to total and general correctness approaches. In particular, we propose modifications to the definition of an extended design which make the theory more clear and simplify calculations, and an approximation order for recursion. We derive explicit formulas for operators on extended designs including non-deterministic choice, sequential composition, while-loops and full recursion. We show how to represent extended designs as designs or prescriptions over an extended state space. The new theory generalises our previous algebraic theory of general correctness by weakening its axioms. It also integrates with partial, total and general correctness into a common foundation which gives a unified semantics of while-programs. Program transformations derived using this semantics are valid in all four correctness approaches. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Extended designs algebraically", "paper_id": "WOS:000324602500004"}