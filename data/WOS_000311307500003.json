{"auto_keywords": [{"score": 0.04485011034828451, "phrase": "design_problem"}, {"score": 0.00481495049065317, "phrase": "design_patterns"}, {"score": 0.004705278218845159, "phrase": "proven_solutions"}, {"score": 0.004674402456361649, "phrase": "recurring_design_problems"}, {"score": 0.00459809245936039, "phrase": "development_context"}, {"score": 0.003990983268804689, "phrase": "explicit_representation"}, {"score": 0.00390000531646629, "phrase": "design_pattern"}, {"score": 0.003786062857121556, "phrase": "integrated_fashion"}, {"score": 0.0037242008128962104, "phrase": "model-driven_representation"}, {"score": 0.0032858160838749196, "phrase": "model_transformation"}, {"score": 0.003116989767430614, "phrase": "object-oriented_design_model"}, {"score": 0.0030660263386795526, "phrase": "model_fragments"}, {"score": 0.0028608962312791264, "phrase": "transformation_t"}, {"score": 0.0028141081648971754, "phrase": "ms._easier"}, {"score": 0.0027408292745619233, "phrase": "eclipse_modeling_framework-based_implementation"}, {"score": 0.0025999315182615823, "phrase": "fundamental_questions"}, {"score": 0.002402016201299179, "phrase": "seemingly_simple_design_patterns"}, {"score": 0.002182817892930808, "phrase": "design_problems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["design patterns", " design problems", " pattern detection", " model-driven development"], "paper_abstract": "Design patterns codify proven solutions to recurring design problems. Their proper use within a development context requires that: (i) we understand them; (ii) we ascertain their applicability or relevance to the design problem at hand; and (iii) we apply them faithfully to the problem at hand. We argue that an explicit representation of the design problem solved by a design pattern is key to supporting the three tasks in an integrated fashion. We propose a model-driven representation of design patterns consisting of triples?<?MP, MS, T?>?where MP is a model of the problem solved by the pattern, MS is a model of the solution proposed by the pattern, and T is a model transformation of an instance of the problem into an instance of the solution. Given an object-oriented design model, we look for model fragments that match MP (call them instances of MP), and when one is found, we apply the transformation T yielding an instance of MS. Easier said than done. Experimentation with an Eclipse Modeling Framework-based implementation of our approach applied to a number of open-source software application's raised fundamental questions about: (i) the nature of design patterns in general, and the ones that lend themselves to our approach, and (ii) our understanding and codification of seemingly simple design patterns. In this paper, we present the principles behind our approach, report on the results of applying the approach to the Gang of Four (GoF) design patterns, and discuss the representability of design problems solved by these patterns. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Understanding design patterns - what is the problem?", "paper_id": "WOS:000311307500003"}