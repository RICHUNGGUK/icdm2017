{"auto_keywords": [{"score": 0.04571345706034808, "phrase": "coutaz"}, {"score": 0.00481495049065317, "phrase": "interactive_system_architecture"}, {"score": 0.0044826811976193485, "phrase": "addison-wesley_publ"}, {"score": 0.004240116703465252, "phrase": "implementation_model"}, {"score": 0.004206548500039536, "phrase": "dialog_design"}, {"score": 0.0041074234667687875, "phrase": "sttutgart"}, {"score": 0.003808619097554076, "phrase": "interactive_software"}, {"score": 0.0036311617742547167, "phrase": "engineering_for_human-computer_interaction"}, {"score": 0.0036023971109946946, "phrase": "elsevier_science_publ"}, {"score": 0.003287482882222731, "phrase": "design_work"}, {"score": 0.0032099453192629976, "phrase": "user_interfaces"}, {"score": 0.0031845067058084583, "phrase": "underlying_functionalities"}, {"score": 0.0031217859267564344, "phrase": "independence_assumption"}, {"score": 0.0030119758165837625, "phrase": "user_interface"}, {"score": 0.0028715299874549245, "phrase": "underlying_functionality"}, {"score": 0.002837451022172113, "phrase": "cartesian_dichotomy"}, {"score": 0.0027267406923803367, "phrase": "application's_logic"}, {"score": 0.0025687008721685454, "phrase": "internal_software_attributes"}, {"score": 0.002548331088496964, "phrase": "externally_visible_usability_factors"}, {"score": 0.0024981087707313656, "phrase": "pattern-based_approach"}, {"score": 0.0023253461255420436, "phrase": "methodological_framework"}, {"score": 0.0022977342663599042, "phrase": "interactive_system_architectures"}, {"score": 0.0021731423856364003, "phrase": "software_design_process"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Usability", " User interface design patterns", " Software architecture", " Usability factors", " Software quality metrics", " HCI design principles"], "paper_abstract": "Traditional interactive system architectures such as MVC [Goldberg, A., 1984. Smaltalk-80: The Interactive Programming Environment, Addison-Wesley Publ.] and PAC [Coutaz, J.. 1987. PAC. an implementation model for dialog design. In: Interact'87, Sttutgart, September 1987, pp. 431-436; Coutaz, J., 1990. Architecture models for interactive software: faillures and trends. In: Cockton, G. (Ed.), Engineering for Human-Computer Interaction, Elsevier Science Publ., pp. 137-153.] decompose the system into subsystems that are relatively independent, thereby allowing the design work to be partitioned between the user interfaces and underlying functionalities. Such architectures extend the independence assumption to usability, approaching the design of the user interface as a subsystem that can designed and tested independently from the underlying functionality. This Cartesian dichotomy can be fallacious, as functionalities buried in the application's logic can sometimes affect the usability of the system. Our investigations model the relationships between internal software attributes and externally visible usability factors. We propose a pattern-based approach for dealing with these relationships. We conclude by discussing how these patterns can lead to a methodological framework for improving interactive system architectures, and how these patterns can support the integration of usability in the software design process. (C) 2008 Published by Elsevier Inc.", "paper_title": "Reconciling usability and interactive system architecture using patterns", "paper_id": "WOS:000260276700003"}