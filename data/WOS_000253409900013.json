{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "artificial_intelligence_applications"}, {"score": 0.004330941610682453, "phrase": "possible_extensions"}, {"score": 0.004240116703465252, "phrase": "existing_functional_programming_languages"}, {"score": 0.00385431710959668, "phrase": "important_and_growing_class"}, {"score": 0.0033579708256295847, "phrase": "language_extensions"}, {"score": 0.0031176485976102688, "phrase": "technical_detail"}, {"score": 0.0028944757265206332, "phrase": "logic_programming_idioms"}, {"score": 0.0022434880661725493, "phrase": "bach_programming_language"}, {"score": 0.002105022854194122, "phrase": "haskell"}], "paper_keywords": ["languages", " design", " functional", " logic", " modal", " probabilistic", " programming"], "paper_abstract": "In this talk, I will consider some possible extensions to existing functional programming languages that would make them more suitable for the important and growing class of artificial intelligence applications. First, I will motivate the need for these language extensions. Then I will give some technical detail about these extensions that provide the logic programming idioms, probabilistic computation, and modal computation. Some examples will be given to illustrate these ideas which have been implemented in the Bach programming language that is an extension of Haskell.", "paper_title": "Declarative programming for artificial intelligence applications", "paper_id": "WOS:000253409900013"}