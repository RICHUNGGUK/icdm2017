{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "short_dna_words"}, {"score": 0.03363896917055258, "phrase": "n_dna_words"}, {"score": 0.025421208586464166, "phrase": "kao_et_al"}, {"score": 0.004485735417293941, "phrase": "dna_strings"}, {"score": 0.004346704947011699, "phrase": "minimum_length"}, {"score": 0.004278807087784626, "phrase": "hamming_distance"}, {"score": 0.004081385289516914, "phrase": "n_words"}, {"score": 0.004001828274595483, "phrase": "additional_constraints"}, {"score": 0.003802135020791801, "phrase": "previous_works"}, {"score": 0.003584025547693833, "phrase": "word_sizes"}, {"score": 0.003555902292752528, "phrase": "biologically_motivated_constraints"}, {"score": 0.00348655247465418, "phrase": "heuristic_local_searches"}, {"score": 0.003459191419478298, "phrase": "genetic_algorithms"}, {"score": 0.0034185505275141077, "phrase": "randomized_algorithms"}, {"score": 0.0033518804048699967, "phrase": "kao"}, {"score": 0.0033255632761522557, "phrase": "sanghi"}, {"score": 0.0032864896037184893, "phrase": "schweller"}, {"score": 0.0032223742018434856, "phrase": "polynomial-time_randomized_algorithms"}, {"score": 0.0031223774204093713, "phrase": "multiplicative_constant"}, {"score": 0.003085681391556093, "phrase": "smallest_possible_word_length"}, {"score": 0.0028743610212291727, "phrase": "high_probability"}, {"score": 0.002785133616425661, "phrase": "deterministic_polynomial-time_algorithms"}, {"score": 0.0027093285574752457, "phrase": "derandomization_techniques"}, {"score": 0.0026355812883224203, "phrase": "shorter_length"}, {"score": 0.002323142666222693, "phrase": "new_algorithms"}, {"score": 0.002259883463607508, "phrase": "larger_set"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["DNA word design", " Deterministic algorithms", " Derandomization"], "paper_abstract": "Designing short DNA words is a problem of constructing a set (i.e., code) of n DNA strings (i.e., words) with the minimum length such that the Hamming distance between each pair of words is at least k and the n words satisfy a set of additional constraints. This problem has applications in, e.g., DNA self-assembly and DNA arrays. Previous works include those that extended results from coding theory to obtain bounds on code and word sizes for biologically motivated constraints and those that applied heuristic local searches, genetic algorithms, and randomized algorithms. In particular, Kao, Sanghi, and Schweller [16] developed polynomial-time randomized algorithms to construct n DNA words of length within a multiplicative constant of the smallest possible word length (e.g., 9 . max{log n, k}) that satisfy various sets of constraints with high probability. In this paper, we give deterministic polynomial-time algorithms to construct DNA words based on derandomization techniques. Our algorithms can construct n DNA words of shorter length (e.g., 2.1 log n + 6.28k) and can satisfy the same sets of constraints as the words constructed by the algorithms of Kao et al.. Furthermore, we extend these new algorithms to construct words that satisfy a larger set of constraints for which the algorithms of Kao et al. do not work. (c) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Deterministic polynomial-time algorithms for designing short DNA words", "paper_id": "WOS:000321422500014"}