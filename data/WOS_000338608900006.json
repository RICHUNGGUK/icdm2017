{"auto_keywords": [{"score": 0.03220283258333382, "phrase": "previous_version"}, {"score": 0.020467090641606314, "phrase": "monte_carlo"}, {"score": 0.010455641799675734, "phrase": "feature_release"}, {"score": 0.01022480941014572, "phrase": "build_system"}, {"score": 0.008411849914023044, "phrase": "distributed_program"}, {"score": 0.008374301755718367, "phrase": "test_data"}, {"score": 0.006526590410027694, "phrase": "new_version"}, {"score": 0.00481495049065317, "phrase": "open_quantum_dynamics"}, {"score": 0.004679952987518798, "phrase": "previous_release"}, {"score": 0.004535124351828787, "phrase": "full_doxygen-based_api_manual"}, {"score": 0.004474428946168474, "phrase": "updated_user_guides"}, {"score": 0.004434415287195991, "phrase": "versatile_new_testsuite"}, {"score": 0.004407937627017055, "phrase": "computational_and_physics_features"}, {"score": 0.004375061788023814, "phrase": "arising_errors"}, {"score": 0.00429715240295033, "phrase": "full_binary_precision"}, {"score": 0.004271490815763164, "phrase": "trajectory_continuation"}, {"score": 0.004252344812830499, "phrase": "evolution_method"}, {"score": 0.004157889052612049, "phrase": "main_new_feature"}, {"score": 0.004120694410890683, "phrase": "python_bindings"}, {"score": 0.004102221534508954, "phrase": "highest-level_programming_interface"}, {"score": 0.0040777192615062815, "phrase": "actual_simulations"}, {"score": 0.004029222178623365, "phrase": "python"}, {"score": 0.003993849828378232, "phrase": "program"}, {"score": 0.0039043835848369215, "phrase": "cpc_program_library"}, {"score": 0.00389270357935381, "phrase": "queen's_university"}, {"score": 0.0038810585709180283, "phrase": "belfast"}, {"score": 0.0038694478796567353, "phrase": "n._ireland"}, {"score": 0.0036662773795817544, "phrase": "tar.gz_programming_language"}, {"score": 0.0036063439449827393, "phrase": "operating_system"}, {"score": 0.0035901685646972585, "phrase": "principle_cross-platform"}, {"score": 0.0035527065862483646, "phrase": "unix-like_systems"}, {"score": 0.00353677092936782, "phrase": "mac_os_x"}, {"score": 0.0034426417353349567, "phrase": "additional_memory"}, {"score": 0.0034016119212097826, "phrase": "actual_physical_system"}, {"score": 0.003311067956326299, "phrase": "system_dimension"}, {"score": 0.0033011569787033297, "phrase": "state-vector_manipulations"}, {"score": 0.003256922225995089, "phrase": "density-operator_manipulations"}, {"score": 0.0032132782979796895, "phrase": "often_the_memory"}, {"score": 0.0031702173541386888, "phrase": "simulated_system"}, {"score": 0.0030950800344319907, "phrase": "gnu_scientific_library"}, {"score": 0.0030765749138384584, "phrase": "flens"}, {"score": 0.003067366419358488, "phrase": "numpy"}, {"score": 0.003058179790439378, "phrase": "scipy_catalogue"}, {"score": 0.0030127163749089454, "phrase": "comput"}, {"score": 0.003005432076427864, "phrase": "phys"}, {"score": 0.002994689595234886, "phrase": "comm"}, {"score": 0.0028844769395018595, "phrase": "composite_quantum_systems"}, {"score": 0.0028715299874549245, "phrase": "elementary_building_blocks"}, {"score": 0.002820319063320601, "phrase": "dynamical_simulations"}, {"score": 0.0028076592725295646, "phrase": "master-equation_evolution"}, {"score": 0.0027246967293115343, "phrase": "monte_carlo_wave-function_method"}, {"score": 0.002569886696992235, "phrase": "typical_python_script"}, {"score": 0.0025583481578439894, "phrase": "ring-cavity_system"}, {"score": 0.0023985299646962594, "phrase": "heavy_use"}, {"score": 0.0023913439218157273, "phrase": "compile-time_algorithms"}, {"score": 0.0023486764745706736, "phrase": "long_time"}, {"score": 0.0023171750718791713, "phrase": "additional_comments"}, {"score": 0.002269008698686152, "phrase": "application-programming_interface"}, {"score": 0.0022486729928886885, "phrase": "indicated_problem_domain"}, {"score": 0.002215183459020093, "phrase": "supported_compilers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Composite quantum systems", " Open quantum systems", " Quantum optics", " Master equation", " Quantum trajectories", " Cavity quantum electrodynamics", " Multi-array", " Compile-time algorithms"], "paper_abstract": "The v2 Milestone 10 release of C++QED is primarily a feature release, which also corrects some problems of the previous release, especially as regards the build system. The adoption of C++11 features has led to many simplifications in the codebase. A full doxygen-based API manual [1] is now provided together with updated user guides. A largely automated, versatile new testsuite directed both towards computational and physics features allows for quickly spotting arising errors. The states of trajectories are now savable and recoverable with full binary precision, allowing for trajectory continuation regardless of evolution method (single/ensemble Monte Carlo wave-function or Master equation trajectory). As the main new feature, the framework now presents Python bindings to the highest-level programming interface, so that actual simulations for given composite quantum systems can now be performed from Python. New version program summary Program title: C++QED Catalogue identifier: AELU_v2_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AELU_v2_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: yes No. of lines in distributed program, including test data, etc.: 492422 No. of bytes in distributed program, including test data, etc.: 8070987 Distribution format: tar.gz Programming language: C++/Python. Computer: i386-i686, x86 64. Operating system: In principle cross-platform, as yet tested only on UNIX-like systems (including Mac OS X). RAM: The framework itself takes about 60MB, which is fully shared. The additional memory taken by the program which defines the actual physical system (script) is typically less than 1MB. The memory storing the actual data scales with the system dimension for state-vector manipulations, and the square of the dimension for density-operator manipulations. This might easily be GBs, and often the memory of the machine limits the size of the simulated system. Classification: 4.3, 4.13, 6.2. External routines: Boost C++ libraries, GNU Scientific Library, Blitz++, FLENS, NumPy, SciPy Catalogue identifier of previous version: AELU_v1_0 Journal reference of previous version: Comput. Phys. Comm. 183 (2012) 1381 Does the new version supersede the previous version?: Yes Nature of problem: Definition of (open) composite quantum systems out of elementary building blocks [2,3]. Manipulation of such systems, with emphasis on dynamical simulations such as Master-equation evolution [4] and Monte Carlo wave-function simulation [5]. Solution method: Master equation, Monte Carlo wave-function method Reasons for new version: The new version is mainly a feature release, but it does correct some problems of the previous version, especially as regards the build system. Summary of revisions: We give an example for a typical Python script implementing the ring-cavity system presented in Sec. 3.3 of Ref. [2]: [GRAPHICS] Restrictions: Total dimensionality of the system. Master equation few thousands. Monte Carlo wave-function trajectory several millions. Unusual features: Because of the heavy use of compile-time algorithms, compilation of programs written in the framework may take a long time and much memory (up to several GBs). Additional comments: The framework is not a program, but provides and implements an application-programming interface for developing simulations in the indicated problem domain. We use several C++11 features which limits the range of supported compilers (g++ 4.7, clang++ 3.1) Documentation, http://cppqed.sourceforge.net/ Running time: Depending on the magnitude of the problem, can vary from a few seconds to weeks. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "C++QEDv2 Milestone 10: A C++/Python application-programming framework for simulating open quantum dynamics", "paper_id": "WOS:000338608900006"}