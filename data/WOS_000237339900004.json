{"auto_keywords": [{"score": 0.041297232026923585, "phrase": "linux"}, {"score": 0.0407704748864984, "phrase": "windows"}, {"score": 0.012996455652946838, "phrase": "solaris"}, {"score": 0.00481495049065317, "phrase": "computational_time"}, {"score": 0.004772137871562584, "phrase": "urban_cellular_automata"}, {"score": 0.004729704116022601, "phrase": "model_portability"}, {"score": 0.004502943680955863, "phrase": "different_computer_operating_systems"}, {"score": 0.0044231966846655394, "phrase": "increased_efficiency"}, {"score": 0.004383852039913171, "phrase": "code_execution"}, {"score": 0.004325487452170154, "phrase": "portability_problem"}, {"score": 0.004248869786808024, "phrase": "trivial_one"}, {"score": 0.004045068727683462, "phrase": "set_environment"}, {"score": 0.0037490909410974166, "phrase": "hardware_constraints"}, {"score": 0.0036173729405604674, "phrase": "k.c_clarke"}, {"score": 0.0035851703423654432, "phrase": "s._hoppen"}, {"score": 0.0035374012552316573, "phrase": "l._gaydos"}, {"score": 0.003474694300991964, "phrase": "self-modifying_cellular_automaton_model"}, {"score": 0.003382704886584695, "phrase": "san_francisco_bay_area"}, {"score": 0.002957919048133256, "phrase": "model's_performance"}, {"score": 0.0027535633837592597, "phrase": "faster_processors"}, {"score": 0.0026330549554033876, "phrase": "model_performance"}, {"score": 0.0025518429503461736, "phrase": "computational_bottlenecks"}, {"score": 0.0024842242921857705, "phrase": "increased_performance"}, {"score": 0.002221192647477371, "phrase": "computation_time"}, {"score": 0.0021430393104977788, "phrase": "practical_applications"}, {"score": 0.0021049977753042253, "phrase": "wider_user_base"}], "paper_keywords": ["cellular automata", " calibration", " portability"], "paper_abstract": "This paper investigates how portability of a model between different computer operating systems can lead to increased efficiency in code execution. The portability problem is not a trivial one, as many geographic models are designed to be run inside a set environment (Unix, Solaris, Linux, and Windows), and are further limited by hardware constraints. The SLEUTH urban growth model [K.C Clarke, S. Hoppen, and L. Gaydos. \"A self-modifying cellular automaton model of historical urbanization in the San Francisco Bay area\", Environment and Planning B, 24:247-261, 1997.] was implemented under three different operating systems (Solaris, Linux, and Windows). Results suggest that the model's performance is optimized by porting it from its original environment (Unix/Solaris) to Linux or Windows where faster processors are available. While the results show optimization of model performance, there are some suggestions of computational bottlenecks that may eventually limit the increased performance of the model. Regardless, the research demonstrates that the portability of a model can lead to not only to a decrease in computation time, but may increase the viability in practical applications and attract a wider user base.", "paper_title": "Decreasing computational time of urban cellular automata through model portability", "paper_id": "WOS:000237339900004"}