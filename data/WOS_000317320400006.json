{"auto_keywords": [{"score": 0.046273829908275756, "phrase": "implicit_equation"}, {"score": 0.00481495049065317, "phrase": "predicted_support"}, {"score": 0.0046970764288494764, "phrase": "rational_planar_parametric_curves"}, {"score": 0.004081385289516914, "phrase": "output_structure"}, {"score": 0.00389994107619882, "phrase": "newton_polytope"}, {"score": 0.0038518661517315533, "phrase": "implicit_polynomial"}, {"score": 0.003804381587788162, "phrase": "sparse_resultant_theory"}, {"score": 0.0036653985479652854, "phrase": "base_points"}, {"score": 0.0034165310204389682, "phrase": "produced_polynomial"}, {"score": 0.0033328610724885667, "phrase": "maple"}, {"score": 0.0032647135797992184, "phrase": "matlab"}, {"score": 0.0028953973490895746, "phrase": "approximate_output"}, {"score": 0.002778006389296707, "phrase": "tested_examples"}, {"score": 0.0027211030647461324, "phrase": "square_or_rectangular_interpolation_matrix"}, {"score": 0.002546708483171714, "phrase": "unitary_complex_numbers"}, {"score": 0.002515272856011004, "phrase": "best_tradeoff"}, {"score": 0.0024535580495414783, "phrase": "numerical_methods"}, {"score": 0.0024033675551624117, "phrase": "svd"}, {"score": 0.002363806685815014, "phrase": "exact_kernel_computation"}, {"score": 0.0022399174232611853, "phrase": "existing_software"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "We reduce implicitization of rational planar parametric curves and (hyper)surfaces to linear algebra, by interpolating the coefficients of the implicit equation given a superset of its terms. For predicting these terms, we focus on methods that exploit input and output structure in the sense of sparse (or toric) elimination theory, namely by computing the Newton polytope of the implicit polynomial, via sparse resultant theory. Our algorithm works even in the presence of base points but, in this case, the implicit equation shall be obtained as a factor of the produced polynomial. We implement our methods in Maple, and some in Matlab as well, and study their numerical stability and efficiency on several classes of curves and surfaces. We apply our approach to approximate implicitization, and quantify the accuracy of the approximate output, which turns out to be satisfactory on all tested examples. In building a square or rectangular interpolation matrix, an important issue is (over)sampling the given curve or surface: we conclude that unitary complex numbers offer the best tradeoff between speed and accuracy when numerical methods are employed, namely SVD, whereas for exact kernel computation random integers is the method of choice. We compare our prototype to existing software and find that it is rather competitive. (c) 2013 Published by Elsevier B.V.", "paper_title": "Implicitization of curves and (hyper)surfaces using predicted support", "paper_id": "WOS:000317320400006"}