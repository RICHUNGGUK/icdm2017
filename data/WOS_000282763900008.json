{"auto_keywords": [{"score": 0.03371359419978347, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "distributable_thread_failures"}, {"score": 0.004771196027464407, "phrase": "distributed_real-time_java"}, {"score": 0.004516856326107826, "phrase": "distributable_threads"}, {"score": 0.004374772264092067, "phrase": "distributed_real-time_systems"}, {"score": 0.00429558848734449, "phrase": "runtime_uncertainties"}, {"score": 0.0042178318724732005, "phrase": "thread_execution_times"}, {"score": 0.004179480763003705, "phrase": "thread_arrivals"}, {"score": 0.004122604238556912, "phrase": "node_failure_occurrences"}, {"score": 0.0039928721865882, "phrase": "node_failure"}, {"score": 0.0038849148160362257, "phrase": "broken_thread"}, {"score": 0.0037626342268042997, "phrase": "termination_model"}, {"score": 0.003356396922662246, "phrase": "thread_execution"}, {"score": 0.0032805541677236325, "phrase": "proposed_distributable_thread_programming_model"}, {"score": 0.003221111762383486, "phrase": "distributed_real-time_specification"}, {"score": 0.0030771609361092164, "phrase": "exception-handler_model"}, {"score": 0.0029275145735625087, "phrase": "hua"}, {"score": 0.0027322025124213566, "phrase": "higher_importance_threads"}, {"score": 0.0026704265616705023, "phrase": "lower_importance_ones"}, {"score": 0.0026220103561723066, "phrase": "thread_urgency"}, {"score": 0.0026107419061889704, "phrase": "tpr"}, {"score": 0.0025162511343171, "phrase": "thread_scheduling_algorithm"}, {"score": 0.0024593458703463474, "phrase": "thread_integrity_protocol"}, {"score": 0.00243694486220507, "phrase": "tpr."}, {"score": 0.0023386327847292805, "phrase": "orphan_cleanup"}, {"score": 0.0023173287402646577, "phrase": "recovery_time"}, {"score": 0.0022962183207691188, "phrase": "bounded_loss"}, {"score": 0.0022649119108225564, "phrase": "best-effort_property"}, {"score": 0.002193509835371438, "phrase": "reference_implementation"}, {"score": 0.002163600705898299, "phrase": "proposed_programming_model"}, {"score": 0.0021340985236583034, "phrase": "drtsj"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Measurement", " Performance", " Reliability", " Distributed", " real-time", " Java", " distributable thread", " thread integrity", " distributed scheduling"], "paper_abstract": "We consider the problem of recovering from the failures of distributable threads (\"threads\") in distributed real-time systems that operate under runtime uncertainties including those on thread execution times, thread arrivals, and node failure occurrences. When a thread experiences a node failure, the result is a broken thread having an orphan. Under a termination model, the orphans must be detected and aborted, and exceptions must be delivered to the farthest, contiguous surviving thread segment for resuming thread execution. Our application/scheduling model includes the proposed distributable thread programming model for the emerging Distributed Real-Time Specification for Java (DRTSJ), together with an exception-handler model. Threads are subject to time/utility function (TUF) time constraints and an utility accrual (UA) optimality criterion. A key underpinning of the TUF/UA scheduling paradigm is the notion of \"best-effort\" where higher importance threads are always favored over lower importance ones, irrespective of thread urgency as specified by their time constraints. We present a thread scheduling algorithm called HUA and a thread integrity protocol called TPR. We show that HUA and TPR bound the orphan cleanup and recovery time with bounded loss of the best-effort property. Our implementation experience for HUA/TPR in the Reference Implementation of the proposed programming model for the DRTSJ demonstrates the algorithm/protocol's effectiveness.", "paper_title": "Recovering from Distributable Thread Failures in Distributed Real-Time Java", "paper_id": "WOS:000282763900008"}