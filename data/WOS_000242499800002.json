{"auto_keywords": [{"score": 0.04193735407697297, "phrase": "formal_model"}, {"score": 0.00481495049065317, "phrase": "distributed_agents"}, {"score": 0.004783232571029632, "phrase": "distributed_multi-agent_systems"}, {"score": 0.004643055780443262, "phrase": "large_number"}, {"score": 0.004551883842967241, "phrase": "existing_checkpoint_and_recovery_strategies"}, {"score": 0.004389339243427964, "phrase": "runtime_logging_overhead"}, {"score": 0.004190796368475121, "phrase": "correct_and_efficient_checkpoint"}, {"score": 0.004122077038067119, "phrase": "distributed_agent_systems"}, {"score": 0.004081385289516914, "phrase": "initial_part"}, {"score": 0.0037824221315407355, "phrase": "existing_techniques"}, {"score": 0.0034477636809450312, "phrase": "single_recovery"}, {"score": 0.0033465923623290034, "phrase": "multiple_recoveries"}, {"score": 0.0032916702592724217, "phrase": "recovery_technique"}, {"score": 0.0032483801419536675, "phrase": "corresponding_recovery_blocks"}, {"score": 0.003132236287543072, "phrase": "agent_communication_protocols"}, {"score": 0.0030706395717772436, "phrase": "simple_and_efficient_checkpoint_protocol"}, {"score": 0.0029608318458226755, "phrase": "well-defined_agent_communication_protocols"}, {"score": 0.0028549396580672417, "phrase": "message_interactions"}, {"score": 0.002789528662623221, "phrase": "group_checkpoint_strategy"}, {"score": 0.0026455755027979533, "phrase": "reducing_runtime"}, {"score": 0.0026107601878587816, "phrase": "recovery_spread"}, {"score": 0.0025849489224175548, "phrase": "resulted_protocol"}, {"score": 0.0025678829712650437, "phrase": "strong_and_asynchronous_group_checkpoints"}, {"score": 0.0025173564697303836, "phrase": "explicit_kernel_message"}, {"score": 0.00250073564820402, "phrase": "runtime_message_logging"}, {"score": 0.002476009439388887, "phrase": "accompanying_recovery_protocol"}, {"score": 0.002427286272201272, "phrase": "protocol_dependency_graph"}, {"score": 0.002395336706478158, "phrase": "minimal_quasi-atomic_recovery_block"}, {"score": 0.0023716501597131024, "phrase": "single_or_simultaneous_agent_crashes"}, {"score": 0.0023326907270271153, "phrase": "recovery_protocol"}, {"score": 0.002147265537489893, "phrase": "future_research_directions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["fault tolerance", " rollback and recovery", " distributed agents", " agent communication protocols", " atomic and quasi-atomic recovery block", " locality based group checkpoint", " strong checkpoint", " garbage collection"], "paper_abstract": "Distributed multi-agent systems are usually large-scale, involving a large number of agents and messages. Existing checkpoint and recovery strategies are not quite favorable to such systems due to either global recovery spread or runtime logging overhead associated with these strategies. This paper presents our work on the design of correct and efficient checkpoint and recovery strategies for distributed agent systems. The initial part of the paper introduces a formal model to capture the correctness of recovery that is applicable in general, including those used by existing techniques such as deterministic as well as non-deterministic, and single as well as simultaneous recoveries. In particular, notions of atomic and quasi-atomic recovery blocks are introduced to capture the subset of events nullified in a single recovery. It is proved that the correctness of multiple recoveries is guaranteed if a recovery technique ensures well-ordering of corresponding recovery blocks. The rest of the paper utilizes the features of agent communication protocols towards the design of a simple and efficient checkpoint protocol. In particular, agents interact with each other via well-defined agent communication protocols. Agent protocol sessions are group-based and all message interactions are localized inside such groups. A group checkpoint strategy is proposed that uses these features of locality and well-structured-ness for the purpose of both reducing runtime overhead and minimizing recovery spread. The resulted protocol creates strong and asynchronous group checkpoints, i.e., without any explicit kernel message or runtime message logging. An accompanying recovery protocol uses a notion of a protocol dependency graph to identify the minimal quasi-atomic recovery block corresponding to single or simultaneous agent crashes. Correctness of the recovery protocol is proved under the formal model. The paper concludes with a discussion on the significance and contrast of our research with other related works, followed by future research directions. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Quasi-atomic recovery for distributed agents", "paper_id": "WOS:000242499800002"}