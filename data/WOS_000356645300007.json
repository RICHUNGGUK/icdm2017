{"auto_keywords": [{"score": 0.04916809664432026, "phrase": "incremental_analysis"}, {"score": 0.038533818161098556, "phrase": "multi-domain_incremental_fixed-point_algorithm"}, {"score": 0.00481495049065317, "phrase": "incremental_resource_analysis"}, {"score": 0.004323690117778359, "phrase": "new_analysis_results"}, {"score": 0.0038230844545071303, "phrase": "memory_requirements"}, {"score": 0.003750260412839128, "phrase": "first_contribution"}, {"score": 0.0033932753847910366, "phrase": "multiple_domains"}, {"score": 0.00334144503360907, "phrase": "account_dependencies"}, {"score": 0.00322769360059123, "phrase": "incremental_analyzer"}, {"score": 0.0031058249097051555, "phrase": "second_contribution"}, {"score": 0.003070166825722112, "phrase": "incremental_resource_usage_analysis"}, {"score": 0.0029203055813347874, "phrase": "global_pre-analyses"}, {"score": 0.002842655426951218, "phrase": "interleaved_way"}, {"score": 0.0025130941721410558, "phrase": "novel_form"}, {"score": 0.002493810638588771, "phrase": "cost_summaries"}, {"score": 0.0024088451312725924, "phrase": "cost_functions"}, {"score": 0.0023538120430501392, "phrase": "experimental_results"}, {"score": 0.002326767693352058, "phrase": "costa_system"}, {"score": 0.0022911901892022847, "phrase": "proposed_incremental_analysis"}, {"score": 0.002273605493468005, "phrase": "significant_performance_gains"}, {"score": 0.002154226045704907, "phrase": "non-incremental_analysis"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Static analysis", " Resource usage analysis", " Cost analysis", " Incremental analysis"], "paper_abstract": "The aim of incremental analysis is, given a program, its analysis results, and a series of changes to the program, to obtain the new analysis results as efficiently as possible and, ideally, without having to (re-)analyze fragments of code which are not affected by the changes. Incremental analysis can significantly reduce both the time and the memory requirements of analysis. The first contribution of this article is a multi-domain incremental fixed-point algorithm for a sequential Java-like language. The algorithm is multi-domain in the sense that it interleaves the (re-)analysis for multiple domains by taking into account dependencies among them. Importantly, this allows the incremental analyzer to invalidate only those analysis results previously inferred by certain dependent domains. The second contribution is an incremental resource usage analysis which, in its first phase, uses the multi-domain incremental fixed-point algorithm to carry out all global pre-analyses required to infer cost in an interleaved way. Such resource analysis is parametric on the cost metrics one wants to measure (e.g., number of executed instructions, number of objects created, etc.). Besides, we present a novel form of cost summaries which allows us to incrementally reconstruct only those components of cost functions affected by the changes. Experimental results in the COSTA system show that the proposed incremental analysis provides significant performance gains, ranging from a speedup of 1.48 up to 5.13 times faster than non-incremental analysis. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A multi-domain incremental analysis engine and its application to incremental resource analysis", "paper_id": "WOS:000356645300007"}