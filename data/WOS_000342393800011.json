{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fpga-aware_merging"}, {"score": 0.015233268351698488, "phrase": "runtime_reconfiguration"}, {"score": 0.01125712722250232, "phrase": "suitable_custom_instruction_selection_heuristics"}, {"score": 0.009673085633064083, "phrase": "hierarchical_loop"}, {"score": 0.009022864707324205, "phrase": "performance_gain"}, {"score": 0.006914983752271393, "phrase": "full_and_partial_runtime_reconfiguration"}, {"score": 0.004518442937844318, "phrase": "promising_solution"}, {"score": 0.00443308765153716, "phrase": "hardware_cost"}, {"score": 0.004377077848734575, "phrase": "embedded_systems"}, {"score": 0.003953639783762917, "phrase": "performance_benefits"}, {"score": 0.003903663808332582, "phrase": "reconfigurable_processors"}, {"score": 0.003829877278269543, "phrase": "full_or_partial_runtime_reconfiguration"}, {"score": 0.0031643005824589917, "phrase": "reconfigurable_logic_block_utilization"}, {"score": 0.0028578496983461136, "phrase": "runtime_reconfiguration_overhead"}, {"score": 0.0025000985765154028, "phrase": "reconfigurable_resource_constraints"}, {"score": 0.0024527767211457046, "phrase": "merging_factor"}, {"score": 0.002360796860462937, "phrase": "selected_custom_instructions"}, {"score": 0.0022434880661725493, "phrase": "partitioning_strategy"}, {"score": 0.0021870332034407817, "phrase": "average_performance_gain"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Custom instructions", " FPGA", " full/partial runtime reconfiguration", " loop partitioning", " reconfigurable processors"], "paper_abstract": "Runtime reconfiguration is a promising solution for reducing hardware cost in embedded systems, without compromising on performance. We present a framework that aims to increase the performance benefits of reconfigurable processors that support full or partial runtime reconfiguration. The proposed framework achieves this by: (1) providing a means for choosing suitable custom instruction selection heuristics, (2) leveraging FPGA-aware merging of custom instructions to maximiZe the reconfigurable logic block utilization in each configuration, and (3) incorporating a hierarchical loop partitioning strategy to reduce runtime reconfiguration overhead. We show that the performance gain can be improved by employing suitable custom instruction selection heuristics that, in turn, depend on the reconfigurable resource constraints and the merging factor (extent to which the selected custom instructions can be merged). The hierarchical loop partitioning strategy leads to an average performance gain of over 31% and 46% for full and partial runtime reconfiguration, respectively. Performance gain can be further increased to over 52% and 70% for full and partial runtime reconfiguration, respectively, by exploiting FPGA-aware merging of custom instructions.", "paper_title": "Exploiting FPGA-Aware Merging of Custom Instructions for Runtime Reconfiguration", "paper_id": "WOS:000342393800011"}