{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "flow_logic"}, {"score": 0.048566997341190715, "phrase": "coordination_languages"}, {"score": 0.004738325072560588, "phrase": "static_type_systems"}, {"score": 0.00437302709192313, "phrase": "open-ended_systems"}, {"score": 0.003876996400581697, "phrase": "coordinated_systems"}, {"score": 0.0036651042289628324, "phrase": "successful_approaches"}, {"score": 0.003437036036889996, "phrase": "type_systems"}, {"score": 0.0033822643082593285, "phrase": "dynamic_checks"}, {"score": 0.0032491108935498794, "phrase": "correctness_properties"}, {"score": 0.002374855916752648, "phrase": "type_system"}, {"score": 0.002299689297293321, "phrase": "secure_access"}, {"score": 0.0022630008787375435, "phrase": "tuple_spaces"}, {"score": 0.0022268964676199292, "phrase": "safe_process_migration"}], "paper_keywords": ["Global computing", " Coordination languages", " Formal methods", " Flow Logic", " Type systems"], "paper_abstract": "Coordination languages are often used to describe open-ended systems. This makes it challenging to develop tools for guaranteeing the security of the coordinated systems and the correctness of their interaction. Successful approaches to this problem have been based on type systems with dynamic checks; therefore, the correctness properties cannot be statically enforced. By contrast, static analysis approaches based on Flow Logic usually guarantee properties statically. In this paper, we show how the insights from the Flow Logic approach can be used to construct a type system for statically ensuring secure access to tuple spaces and safe process migration for an extension of the language KLAIM. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "From Flow Logic to static type systems for coordination languages", "paper_id": "WOS:000277231300002"}