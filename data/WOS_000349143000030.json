{"auto_keywords": [{"score": 0.04902896582647276, "phrase": "distributed_execution"}, {"score": 0.00481495049065317, "phrase": "krivine_nets_a"}, {"score": 0.004580550308652044, "phrase": "new_approach"}, {"score": 0.0044800522651664695, "phrase": "distributed_architectures"}, {"score": 0.004357511171877593, "phrase": "abstract_machines"}, {"score": 0.004168349927332055, "phrase": "generalised_and_fully_transparent_form"}, {"score": 0.003987367359722647, "phrase": "higher-order_functions"}, {"score": 0.0038354405231002323, "phrase": "actual_code"}, {"score": 0.003730465168354817, "phrase": "classic_krivine_machine"}, {"score": 0.003608266640131664, "phrase": "untyped_call-by-name_pcf."}, {"score": 0.003175676186323053, "phrase": "two-level_operational_semantics"}, {"score": 0.003105905142768581, "phrase": "high_level"}, {"score": 0.0030208364972341096, "phrase": "communicating_machines"}, {"score": 0.0029544572689681934, "phrase": "low_level"}, {"score": 0.0028895324165046166, "phrase": "local_machine_transitions"}, {"score": 0.002643753276264565, "phrase": "krivine_nets"}, {"score": 0.0026000466400112974, "phrase": "correct_distributed_implementation"}, {"score": 0.0025570607111118793, "phrase": "krivine_machine"}, {"score": 0.0024594969044952108, "phrase": "non-termination_properties"}, {"score": 0.0023265270905455334, "phrase": "agda."}, {"score": 0.002262756631083292, "phrase": "prototype_compiler"}, {"score": 0.002140400526572388, "phrase": "girard's_geometry_of_interaction"}, {"score": 0.0021049977753042253, "phrase": "game_semantics"}], "paper_keywords": ["abstract machines", " distributed execution", " simulation relation", " Agda"], "paper_abstract": "We define a new approach to compilation to distributed architectures based on networks of abstract machines. Using it we can implement a generalised and fully transparent form of Remote Procedure Call that supports calling higher-order functions across node boundaries, without sending actual code. Our starting point is the classic Krivine machine, which implements reduction for untyped call-by-name PCF. We successively add the features that we need for distributed execution and show the correctness of each addition. Then we construct a two-level operational semantics, where the high level is a network of communicating machines, and the low level is given by local machine transitions. Using these networks, we arrive at our final system, the Krivine Net. We show that Krivine Nets give a correct distributed implementation of the Krivine machine, which preserves both termination and non-termination properties. All the technical results have been formalised and proved correct in AGDA. We also implement a prototype compiler which we compare with previous distributing compilers based on Girard's Geometry of Interaction and on Game Semantics.", "paper_title": "Krivine Nets A semantic foundation for distributed execution", "paper_id": "WOS:000349143000030"}