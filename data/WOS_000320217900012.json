{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "empirical_study"}, {"score": 0.04910447125782957, "phrase": "concurrent_programming_languages"}, {"score": 0.03152259496375212, "phrase": "study_template"}, {"score": 0.0046526806928044485, "phrase": "developing_concurrent_software"}, {"score": 0.004542341892683877, "phrase": "difficult_and_error-prone_task"}, {"score": 0.004404296965915598, "phrase": "language_proposals"}, {"score": 0.004314595541370065, "phrase": "concurrent_programming"}, {"score": 0.004270429323002124, "phrase": "empirical_studies"}, {"score": 0.003826441783705964, "phrase": "comprehending_and_debugging_existing_programs"}, {"score": 0.0037872535287644103, "phrase": "correct_new_programs"}, {"score": 0.003597427822648707, "phrase": "java"}, {"score": 0.003572623411811405, "phrase": "scoop."}, {"score": 0.0033585620455333434, "phrase": "training_phase"}, {"score": 0.0033127570056253252, "phrase": "participants'_solutions"}, {"score": 0.0032009501549788576, "phrase": "self-study_material"}, {"score": 0.003114219280081737, "phrase": "subjective_decisions"}, {"score": 0.0029376169407844314, "phrase": "experimental_design"}, {"score": 0.0028580007147015734, "phrase": "evaluation_material"}, {"score": 0.0027805362553564336, "phrase": "academic_setting"}, {"score": 0.0027520299821330125, "phrase": "concrete_instantiation"}, {"score": 0.0026682520113363094, "phrase": "scoop"}, {"score": 0.002631832840403278, "phrase": "study_participants"}, {"score": 0.0026138115448726567, "phrase": "previous_training"}, {"score": 0.002587010112064415, "phrase": "multithreaded_java_programs"}, {"score": 0.002508239347479441, "phrase": "proposed_template"}, {"score": 0.002374063735432571, "phrase": "core_language_constructs"}, {"score": 0.002309685725922145, "phrase": "concurrent_programming_paradigms"}, {"score": 0.0021711323811863963, "phrase": "language_research"}, {"score": 0.002148860300945803, "phrase": "right_direction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Empirical study", " Concurrency", " Programming languages", " Usability"], "paper_abstract": "Context: Developing concurrent software has long been recognized as a difficult and error-prone task. To support developers, a multitude of language proposals exist that promise to make concurrent programming easier. Empirical studies are needed to support the claim that a language is more usable than another. Objective: This paper presents the design of a study to compare concurrent programming languages with respect to comprehending and debugging existing programs and writing correct new programs. The design is applied to a comparison of two object-oriented languages for concurrency, multithreaded Java and SCOOP. Method: A critical challenge for such a study is avoiding the bias that might be introduced during the training phase and when interpreting participants' solutions. We address these issues by the use of self-study material and an evaluation scheme that exposes any subjective decisions of the corrector, or eliminates them altogether. Results: The study template consisting of the experimental design and the structure of the self-study and evaluation material is demonstrated to work successfully in an academic setting. The concrete instantiation of the study template shows results in favor of SCOOP even though the study participants had previous training in writing multithreaded Java programs. Conclusion: It is concluded that the proposed template of a small but therefore easy-to-implement empirical study with a focus on core language constructs is helpful in characterizing the usability of concurrent programming paradigms. Applying the template to further languages could shed light on which approaches are promising and hence drive language research into the right direction. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Design of an empirical study for comparing the usability of concurrent programming languages", "paper_id": "WOS:000320217900012"}