{"auto_keywords": [{"score": 0.03172121396748985, "phrase": "autonomic_recoverer"}, {"score": 0.00481495049065317, "phrase": "eventual_byzantine_software"}, {"score": 0.004700027722284931, "phrase": "software_package_flaws"}, {"score": 0.00456571874088313, "phrase": "eventual_byzantine_behavior"}, {"score": 0.004246428036409373, "phrase": "predefined_initial_state"}, {"score": 0.0041450181887917135, "phrase": "legal_behavior"}, {"score": 0.003949391530829063, "phrase": "byzantine"}, {"score": 0.0038364365168131586, "phrase": "behavior_pattern"}, {"score": 0.0036201167891046046, "phrase": "sufficient_package_tests"}, {"score": 0.0035852640843794252, "phrase": "limited_time_scenarios"}, {"score": 0.0030414140732789186, "phrase": "theoretical_foundation"}, {"score": 0.002925899335792914, "phrase": "system_recovery"}, {"score": 0.0027474453262607834, "phrase": "specific_task_requirements"}, {"score": 0.0026175952455594277, "phrase": "directed_acyclic_graph_subsystem_hierarchical_structure"}, {"score": 0.0025549840900344596, "phrase": "consistency_monitoring_procedure"}, {"score": 0.0025059724686541263, "phrase": "gracious_recovery"}, {"score": 0.0023990982005125763, "phrase": "autonomic_recovery"}, {"score": 0.0023079225317714815, "phrase": "self-stabilizing_kernel_resident"}, {"score": 0.0021987994275190314, "phrase": "new_scheme"}, {"score": 0.002177600561610171, "phrase": "liveness_assurance"}, {"score": 0.0021566056345478373, "phrase": "on-line_monitoring"}, {"score": 0.0021254913611527455, "phrase": "known_schemes"}, {"score": 0.0021049977753042253, "phrase": "on-line_safety_assurance"}], "paper_keywords": ["Self-stabilization", " Monitor", " Automatic recovery", " Liveness", " Safety"], "paper_abstract": "We suggest modeling software package flaws (bugs) by assuming eventual Byzantine behavior of the package. We assume that if a program is started in a predefined initial state, it will exhibit legal behavior for a period of time but will eventually become Byzantine. We assume that this behavior pattern can be attributed to the fact that the manufacturer had performed sufficient package tests for limited time scenarios. Restarts are useful for recovering such systems. We suggest a general, yet practical, framework and paradigm for the monitoring and restarting of systems where the framework and paradigm are based on a theoretical foundation. An autonomic recoverer that monitors and initiates system recovery is proposed. It is designed to handle a task, given specific task requirements in the form of predicates and actions. A directed acyclic graph subsystem hierarchical structure is used by a consistency monitoring procedure for achieving a gracious recovery. The existence and correct functionality of the autonomic recovery is guaranteed by the use of a self-stabilizing kernel resident (anchor) process. The autonomic recoverer uses a new scheme for liveness assurance via on-line monitoring that complements known schemes for on-line safety assurance. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "A self-stabilizing autonomic recoverer for eventual Byzantine software", "paper_id": "WOS:000261119800015"}