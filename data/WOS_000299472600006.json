{"auto_keywords": [{"score": 0.04865678212430773, "phrase": "genprog"}, {"score": 0.00481495049065317, "phrase": "automatic_software_repair"}, {"score": 0.004293584349522444, "phrase": "legacy_programs"}, {"score": 0.004242085112539693, "phrase": "formal_specifications"}, {"score": 0.004191200981137508, "phrase": "program_annotations"}, {"score": 0.004116012194714212, "phrase": "special_coding_practices"}, {"score": 0.00399367108161192, "phrase": "extended_form"}, {"score": 0.003945754887845885, "phrase": "genetic_programming"}, {"score": 0.0038516336597530614, "phrase": "program_variant"}, {"score": 0.003539479990299223, "phrase": "existing_test_suites"}, {"score": 0.003352256019007896, "phrase": "structural_differencing_algorithms"}, {"score": 0.003312009953245191, "phrase": "delta_debugging"}, {"score": 0.0031367803372203498, "phrase": "original_program"}, {"score": 0.003080449000295983, "phrase": "minimal_repair"}, {"score": 0.0029351141718104725, "phrase": "experimental_results"}, {"score": 0.0027966169696270627, "phrase": "c_code"}, {"score": 0.0027298319171606498, "phrase": "module_code"}, {"score": 0.002680789041160613, "phrase": "eight_classes"}, {"score": 0.002478225374613311, "phrase": "generated_repairs"}, {"score": 0.0021960024679620886, "phrase": "fragile_input_memorizations"}, {"score": 0.0021049977753042253, "phrase": "serious_degradation"}], "paper_keywords": ["Automatic programming", " corrections", " testing and debugging"], "paper_abstract": "This paper describes GenProg, an automated method for repairing defects in off-the-shelf, legacy programs without formal specifications, program annotations, or special coding practices. GenProg uses an extended form of genetic programming to evolve a program variant that retains required functionality but is not susceptible to a given defect, using existing test suites to encode both the defect and required functionality. Structural differencing algorithms and delta debugging reduce the difference between this variant and the original program to a minimal repair. We describe the algorithm and report experimental results of its success on 16 programs totaling 1.25 M lines of C code and 120K lines of module code, spanning eight classes of defects, in 357 seconds, on average. We analyze the generated repairs qualitatively and quantitatively to demonstrate that the process efficiently produces evolved programs that repair the defect, are not fragile input memorizations, and do not lead to serious degradation in functionality.", "paper_title": "GenProg: A Generic Method for Automatic Software Repair", "paper_id": "WOS:000299472600006"}