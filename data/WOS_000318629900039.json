{"auto_keywords": [{"score": 0.04725332734585437, "phrase": "congruence"}, {"score": 0.00481495049065317, "phrase": "nfa_equivalence"}, {"score": 0.00386876598761639, "phrase": "language_equivalence"}, {"score": 0.00385593557464769, "phrase": "karp"}, {"score": 0.003775803846431323, "phrase": "non-deterministic_finite_automata"}, {"score": 0.0033503033908133463, "phrase": "hopcroft"}, {"score": 0.0032629585038738856, "phrase": "classical_algorithm"}, {"score": 0.002751751956416832, "phrase": "recently_introduced_antichain_algorithms"}, {"score": 0.002406799309495983, "phrase": "concrete_examples"}, {"score": 0.002183347623351868, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "non_negligible_improvements"}], "paper_keywords": ["Language Equivalence", " Automata", " Bisimulation", " Coinduction", " Up-to techniques", " Congruence", " Antichains"], "paper_abstract": "We introduce bisimulation up to congruence as a technique for proving language equivalence of non-deterministic finite automata. Exploiting this technique, we devise an optimisation of the classical algorithm by Hopcroft and Karp [18]. We compare our approach to the recently introduced antichain algorithms, by analysing and relating the two underlying coinductive proof methods. We give concrete examples where we exponentially improve over antichains; experimental results moreover show non negligible improvements.", "paper_title": "Checking NFA Equivalence with Bisimulations up to Congruence", "paper_id": "WOS:000318629900039"}