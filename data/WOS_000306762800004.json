{"auto_keywords": [{"score": 0.04962656673317322, "phrase": "developer_testing"}, {"score": 0.04720912624670318, "phrase": "desirable_test_inputs"}, {"score": 0.04409251033766783, "phrase": "test_inputs"}, {"score": 0.014309591543460218, "phrase": "program_unit"}, {"score": 0.00481495049065317, "phrase": "improving_automation"}, {"score": 0.004657542074154025, "phrase": "common_step"}, {"score": 0.004613516457919661, "phrase": "software_development"}, {"score": 0.004175533280178052, "phrase": "existing_developer_testing_tools"}, {"score": 0.003485605409687907, "phrase": "testing_tools"}, {"score": 0.0032149396890830575, "phrase": "recent_state-of-the-art_technique"}, {"score": 0.003036595866130994, "phrase": "symbolic_execution"}, {"score": 0.0024513404432665153, "phrase": "test_effectiveness"}, {"score": 0.0022500695985527668, "phrase": "new_frontier"}, {"score": 0.0021352776064254195, "phrase": "previous_techniques"}, {"score": 0.0021049977753042253, "phrase": "synergistic_cooperation"}], "paper_keywords": [""], "paper_abstract": "Developer testing, a common step in software development, involves generating desirable test inputs and checking the behavior of the program unit under test during the execution of the test inputs. Existing developer testing tools include various techniques to address challenges of generating desirable test inputs and checking the behavior of the program unit under test (referred to as test oracles). In this chapter, we present an overview of techniques implemented in these testing tools to address challenges in improving automation in developer testing. In particular, we focus on a recent state-of-the-art technique, called symbolic execution for test inputs. We briefly describe symbolic execution and discuss various challenges (along with the techniques developed to address those challenges) in generating test inputs automatically. For test inputs, the techniques presented in our chapter are summarized from two main aspects: test efficiency (e.g., with a focus on cost) and test effectiveness (e.g., with a focus on benefit). We conclude this chapter by presenting a new frontier, called cooperative developer testing, that is orthogonal to previous techniques and involves synergistic cooperation between humans and tools for effectively generating desirable test inputs.", "paper_title": "Advances on Improving Automation in Developer Testing", "paper_id": "WOS:000306762800004"}