{"auto_keywords": [{"score": 0.029420333683948755, "phrase": "obey"}, {"score": 0.011728303775234218, "phrase": "batched_refactoring_plan"}, {"score": 0.00481495049065317, "phrase": "class_responsibility_redistribution"}, {"score": 0.004655924035639928, "phrase": "class_responsibilities"}, {"score": 0.004563028873351776, "phrase": "common_reengineering_practice"}, {"score": 0.004237925318473508, "phrase": "batched_refactoring_plans"}, {"score": 0.00415333528095237, "phrase": "multiple_methods"}, {"score": 0.0037549546301384336, "phrase": "coupling_degree"}, {"score": 0.003679969180334367, "phrase": "class_design"}, {"score": 0.003487222504700868, "phrase": "objective-violating_side_effect"}, {"score": 0.003195236629209403, "phrase": "batched_refactoring_plan_execution"}, {"score": 0.003152531962718477, "phrase": "coupling-increasing_middle_man"}, {"score": 0.0030482430937467013, "phrase": "final_refactored_code"}, {"score": 0.0029473940028924748, "phrase": "refactoring_execution_suboptimal"}, {"score": 0.002869115451202179, "phrase": "redistribution_objective"}, {"score": 0.0026823700218343506, "phrase": "optimal_batched_refactoring_plan_execution"}, {"score": 0.002541741549046619, "phrase": "middle_man"}, {"score": 0.0024742098091226203, "phrase": "suboptimal_execution"}, {"score": 0.0023603078194781965, "phrase": "optimal_execution"}, {"score": 0.0022668507535947976, "phrase": "empirical_study"}, {"score": 0.0021049977753042253, "phrase": "practical_context"}], "paper_keywords": ["Reengineering", " class responsibility redistribution", " batched refactoring execution", " change impact analysis", " optimization"], "paper_abstract": "The redistribution of class responsibilities is a common reengineering practice in object-oriented (OO) software evolution. During the redistribution, developers frequently construct batched refactoring plans for moving multiple methods and fields among various classes. With an objective of carefully maintaining the cohesion and coupling degree of the class design, executing a batched refactoring plan without introducing any objective-violating side effect into the refactored code is essential. However, using most refactoring engines for batched refactoring plan execution introduces coupling-increasing Middle Man bad smell in the final refactored code and therefore makes the refactoring execution suboptimal in achieving the redistribution objective. This work proposes OBEY, a methodology for optimal batched refactoring plan execution. OBEY analyzes a batched refactoring plan, identifies Middle Man symptoms that cause suboptimal execution, and renovates the plan for optimal execution. We have conducted an empirical study on three open-source software projects to confirm the effectiveness of OBEY in a practical context.", "paper_title": "OBEY: Optimal Batched Refactoring Plan Execution for Class Responsibility Redistribution", "paper_id": "WOS:000323643000006"}