{"auto_keywords": [{"score": 0.02950634012562076, "phrase": "input-data_dependencies"}, {"score": 0.00481495049065317, "phrase": "temporal_predictability"}, {"score": 0.004686963264680882, "phrase": "execution_time"}, {"score": 0.004521566043596533, "phrase": "hard_real-time_systems"}, {"score": 0.0042459818200777846, "phrase": "safe_and_not_overly_pessimistic_bounds"}, {"score": 0.004133055661437163, "phrase": "worst-case_execution_time"}, {"score": 0.00374399358035391, "phrase": "programming_strategy"}, {"score": 0.0036772854254217063, "phrase": "wcet"}, {"score": 0.0031559919178954644, "phrase": "aid_programmers"}, {"score": 0.0025660347613972573, "phrase": "formal_analysis"}, {"score": 0.00247529638625566, "phrase": "abstract_interpretation"}, {"score": 0.0021049977753042253, "phrase": "hard_real-time_code_development"}], "paper_keywords": ["worst-case execution time analysis", " real-time languages", " compiler optimizations", " code transformation", " abstract interpretation", " graph transformation"], "paper_abstract": "The execution time of software for hard real-time systems must be predictable. Further, safe and not overly pessimistic bounds for the worst-case execution time (WCET) must be computable. We conceived a programming strategy called WCET-oriented programming and a code transformation strategy, the single-path conversion, that aid programmers in producing code that meets these requirements. These strategies avoid and eliminate input-data dependencies in the code. The paper describes the formal analysis, based on abstract interpretation, that identifies input-data dependencies in the code and thus forms the basis for the strategies provided for hard real-time code development.", "paper_title": "Code analysis for temporal predictability", "paper_id": "WOS:000236206800006"}