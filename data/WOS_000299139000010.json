{"auto_keywords": [{"score": 0.03810695834896041, "phrase": "complex_rules"}, {"score": 0.030126689938211958, "phrase": "multi-core_cpu"}, {"score": 0.00481495049065317, "phrase": "parallel_hardware"}, {"score": 0.004407599980762272, "phrase": "new_events"}, {"score": 0.0043738432231020885, "phrase": "complex_event_processing"}, {"score": 0.004340498004227559, "phrase": "cep"}, {"score": 0.0041446453895708, "phrase": "primitive_events"}, {"score": 0.0040971095888461045, "phrase": "higher_level_composite_events"}, {"score": 0.003957735532719663, "phrase": "new_breed"}, {"score": 0.0039274105882136775, "phrase": "message-oriented_middleware"}, {"score": 0.003808407814695708, "phrase": "event-driven_interactions"}, {"score": 0.003764713814123286, "phrase": "key_requirement"}, {"score": 0.003735862292632131, "phrase": "cep_engines"}, {"score": 0.0037072310568610723, "phrase": "low_latency_processing"}, {"score": 0.0035948757703015287, "phrase": "large_numbers"}, {"score": 0.0035673211706948576, "phrase": "incoming_events"}, {"score": 0.0033802431627410223, "phrase": "cep_processing"}, {"score": 0.003215295260684715, "phrase": "existing_rule_languages"}, {"score": 0.003046621804854539, "phrase": "different_algorithms"}, {"score": 0.002810062974523812, "phrase": "cuda"}, {"score": 0.0027458373015999916, "phrase": "general-purpose_programming"}, {"score": 0.0026117657828249137, "phrase": "impressive_speedups"}, {"score": 0.002326767693352058, "phrase": "advanced_cep_engine"}, {"score": 0.002256155453630723, "phrase": "simplest_rules"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Complex event processing", " Parallel hardware", " Multi-core CPUs", " General-purpose CPU computing"], "paper_abstract": "Most complex information systems are event driven: each part of the system reacts to the events happening in the other parts, potentially generating new events. Complex event processing (CEP) engines in charge of interpreting, filtering, and combining primitive events to identify higher level composite events according to a set of rules are the new breed of message-oriented middleware, which is being proposed today to better support event-driven interactions. A key requirement for CEP engines is low latency processing, even in presence of complex rules and large numbers of incoming events. In this paper, we investigate how parallel hardware may speed up CEP processing. In particular, we consider the most common operators offered by existing rule languages (i.e., sequences, parameters, and aggregates); we consider different algorithms to process rules built using such operators; and we discuss how they can be implemented on a multi-core CPU and on CUDA, a widespread architecture for general-purpose programming on GPUs. Our analysis shows that the use of GPUs can bring impressive speedups in the presence of complex rules. On the other hand, it shows that multi-core CPUs scale better with the number of rules. Our conclusion is that an advanced CEP engine should leverage a multi-core CPU for processing the simplest rules, using the CPU as a coprocessor devoted to process the most complex ones. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Low latency complex event processing on parallel hardware", "paper_id": "WOS:000299139000010"}