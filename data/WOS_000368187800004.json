{"auto_keywords": [{"score": 0.03978021035630369, "phrase": "betrfs"}, {"score": 0.013241694435354012, "phrase": "large_scans"}, {"score": 0.01306788175623339, "phrase": "previous_wods-based_file_systems"}, {"score": 0.00481495049065317, "phrase": "kernel_file_system"}, {"score": 0.004751216062917875, "phrase": "b-epsilon-tree_file_system"}, {"score": 0.004444921827311577, "phrase": "first_in-kernel_file_system"}, {"score": 0.00436661740263741, "phrase": "write-optimized_data_structure"}, {"score": 0.00421410521089045, "phrase": "building_blocks"}, {"score": 0.004176813329075736, "phrase": "storage_systems"}, {"score": 0.00352765269333916, "phrase": "fuse"}, {"score": 0.0034194194985380268, "phrase": "write-intensive_workload"}, {"score": 0.003314591878914152, "phrase": "wods."}, {"score": 0.0031703706626348507, "phrase": "existing_kernel_infrastructure"}, {"score": 0.002992195343569767, "phrase": "recursive_directory_traversals"}, {"score": 0.002900426826591769, "phrase": "arbitrary_microdata_operations"}, {"score": 0.002811464848641341, "phrase": "metadata_updates"}, {"score": 0.002641621667026613, "phrase": "large_file"}, {"score": 0.002515384834484012, "phrase": "ongoing_prototype_effort"}, {"score": 0.002482013330276732, "phrase": "additional_data-structure_tuning"}, {"score": 0.0024490834773668153, "phrase": "current_general-purpose_file_systems"}, {"score": 0.0022404162042797262, "phrase": "significant_performance_improvements"}, {"score": 0.0021716540012278744, "phrase": "in-place_rsync"}, {"score": 0.002142832962924139, "phrase": "linux_kernel_source"}, {"score": 0.0021049977753042253, "phrase": "commodity_file_systems"}], "paper_keywords": ["Design", " Performance", " Theory", " B-epsilon-trees", " file system", " write optimization"], "paper_abstract": "The B-epsilon-tree File System, or BetrFS (pronounced \"better eff ess\"), is the first in-kernel file system to use a write-optimized data structure (WODS). WODS are promising building blocks for storage systems because they support both microwrites and large scans efficiently. Previous WODS-based file systems have shown promise but have been hampered in several ways, which BetrFS mitigates or eliminates altogether. For example, previous WODS-based file systems were implemented in user space using FUSE, which superimposes many reads on a write-intensive workload, reducing the effectiveness of the WODS. This article also contributes several techniques for exploiting write-optimization within existing kernel infrastructure. BetrFS dramatically improves performance of certain types of large scans, such as recursive directory traversals, as well as performance of arbitrary microdata operations, such as file creates, metadata updates, and small writes to files. BetrFS can make small, random updates within a large file 2 orders of magnitude faster than other local file systems. BetrFS is an ongoing prototype effort and requires additional data-structure tuning to match current general-purpose file systems on some operations, including deletes, directory renames, and large sequential writes. Nonetheless, many applications realize significant performance improvements on BetrFS. For instance, an in-place rsync of the Linux kernel source sees roughly 1.6-22x speedup over commodity file systems.", "paper_title": "BetrFS: Write-Optimization in a Kernel File System", "paper_id": "WOS:000368187800004"}