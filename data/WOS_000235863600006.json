{"auto_keywords": [{"score": 0.04118498548932341, "phrase": "uqdbt"}, {"score": 0.00481495049065317, "phrase": "run-time_feedbacks"}, {"score": 0.004763565662615503, "phrase": "dynamic_binary_translation"}, {"score": 0.004165497627464024, "phrase": "low-level_re-engineering_consists"}, {"score": 0.003969018740062018, "phrase": "forward_engineering_phase"}, {"score": 0.003802135020791801, "phrase": "machine-adaptable_translator"}, {"score": 0.0034332736827447654, "phrase": "different_pairs"}, {"score": 0.0033602844686125375, "phrase": "target_machines"}, {"score": 0.002937879003671346, "phrase": "generic_optimizations"}, {"score": 0.0027841357057119317, "phrase": "executed_code"}, {"score": 0.002724909017963099, "phrase": "native_code"}, {"score": 0.002652639568848117, "phrase": "edge_weight_instrumentation"}, {"score": 0.0024868972942701582, "phrase": "instruction_speculation"}, {"score": 0.0023440589015485077, "phrase": "run-time_feedback_optimizations"}, {"score": 0.0022941723937662927, "phrase": "uqdbt_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["dynamic compilation", " run-time profiling", " dynamic execution", " binary translation", " reverse engineering", " re-engineering", " virtual machine"], "paper_abstract": "Dynamic binary translation is the process of translating, modifying and rewriting executable (binary) code from one machine to another at run-time. This process of low-level re-engineering consists of a reverse engineering phase followed by a forward engineering phase. UQDBT, the University of Queensland Dynamic Binary Translator, is a machine-adaptable translator. Adaptability is provided through the specification of properties of machines and their instruction sets, allowing the support of different pairs of source and target machines. Most binary translators are closely bound to a pair of machines, making analyses and code hard to reuse. Like most virtual machines. UQDBT performs generic optimizations that apply to a variety of machines. Frequently executed code is translated to native code by the use of edge weight instrumentation, which makes UQDBT converge more quickly than systems based on instruction speculation. In this paper, we describe the architecture and run-time feedback optimizations performed by the UQDBT system, and provide results obtained in the x86 and SPARC (R) platforms. (c) 2005 Published by Elsevier B.V.", "paper_title": "Dynamic binary translation using run-time feedbacks", "paper_id": "WOS:000235863600006"}