{"auto_keywords": [{"score": 0.03592465536897284, "phrase": "running_time"}, {"score": 0.035394389817048275, "phrase": "trivial_enumeration"}, {"score": 0.00481495049065317, "phrase": "optimal_steiner_trees"}, {"score": 0.004790382781589865, "phrase": "polynomial_space"}, {"score": 0.004741620996517708, "phrase": "n-node_edge-weighted_graph"}, {"score": 0.0046813628851623676, "phrase": "k_terminal_nodes"}, {"score": 0.00434659901732443, "phrase": "dynamic_programming"}, {"score": 0.004302335022969018, "phrase": "exponential_space"}, {"score": 0.004225950334493496, "phrase": "exponential-space_algorithms"}, {"score": 0.004077208774909028, "phrase": "faster_polynomial-space_algorithms"}, {"score": 0.003756518244967687, "phrase": "classical_tree-separator_theorem"}, {"score": 0.0037278590441650237, "phrase": "steiner"}, {"score": 0.0035235701594414624, "phrase": "logarithmic_size"}, {"score": 0.0032379783518108906, "phrase": "practical_interest"}, {"score": 0.003204967757638859, "phrase": "latter_algorithm"}, {"score": 0.003123901534732913, "phrase": "large_k"}, {"score": 0.002998426187835658, "phrase": "weighted_steiner_tree_problem"}, {"score": 0.002967850512345855, "phrase": "second_contribution"}, {"score": 0.0028268080886618345, "phrase": "cardinality_version"}, {"score": 0.002776547208369246, "phrase": "edge_weights"}, {"score": 0.0027062880030675014, "phrase": "improved_branching_strategy"}, {"score": 0.002685558057339722, "phrase": "refined_branching"}, {"score": 0.002651359476231017, "phrase": "charging_mechanism"}, {"score": 0.0026108940373486596, "phrase": "large_values"}, {"score": 0.002584259877640948, "phrase": "convenient_local_configurations"}, {"score": 0.002467720457471785, "phrase": "non-standard_measure"}, {"score": 0.002436289099444074, "phrase": "linear_combination"}, {"score": 0.0023564240664681138, "phrase": "recent_result"}, {"score": 0.002344371841725268, "phrase": "nederlof"}, {"score": 0.0021376392890704674, "phrase": "previous_best_algorithm"}, {"score": 0.0021212558813405356, "phrase": "cardinality_case"}], "paper_keywords": ["Steiner tree", " Exact algorithms", " Space complexity"], "paper_abstract": "Given an n-node edge-weighted graph and a subset of k terminal nodes, the NP-hard (weighted) Steiner tree problem is to compute a minimum-weight tree which spans the terminals. All the known algorithms for this problem which improve on trivial O(1.62 (n) )-time enumeration are based on dynamic programming, and require exponential space. Motivated by the fact that exponential-space algorithms are typically impractical, in this paper we address the problem of designing faster polynomial-space algorithms. Our first contribution is a simple O((27/4) (k) n (O(logk)))-time polynomial-space algorithm for the problem. This algorithm is based on a variant of the classical tree-separator theorem: every Steiner tree has a node whose removal partitions the tree in two forests, containing at most 2k/3 terminals each. Exploiting separators of logarithmic size which evenly partition the terminals, we are able to reduce the running time to . This improves on trivial enumeration for roughly k < n/3, which covers most of the cases of practical interest. Combining the latter algorithm (for small k) with trivial enumeration (for large k) we obtain a O(1.59 (n) )-time polynomial-space algorithm for the weighted Steiner tree problem. As a second contribution of this paper, we present a O(1.55 (n) )-time polynomial-space algorithm for the cardinality version of the problem, where all edge weights are one. This result is based on a improved branching strategy. The refined branching is based on a charging mechanism which shows that, for large values of k, convenient local configurations of terminals and non-terminals exist. The analysis of the algorithm relies on the Measure & Conquer approach: the non-standard measure used here is a linear combination of the number of nodes and number of non-terminals. Using a recent result in Nederlof (International colloquium on automata, languages and programming (ICALP), pp. 713-725, 2009), the running time can be reduced to O(1.36 (n) ). The previous best algorithm for the cardinality case runs in O(1.42 (n) ) time and exponential space.", "paper_title": "Computing Optimal Steiner Trees in Polynomial Space", "paper_id": "WOS:000314359200006"}