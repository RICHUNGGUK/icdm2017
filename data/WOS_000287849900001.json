{"auto_keywords": [{"score": 0.0351082872914789, "phrase": "reid"}, {"score": 0.00481495049065317, "phrase": "triangular_tridiagonalization"}, {"score": 0.004684157900507474, "phrase": "partitioned_algorithm"}, {"score": 0.0045820747375409435, "phrase": "symmetric_matrix"}, {"score": 0.004506968388996092, "phrase": "tridiagonal_form"}, {"score": 0.00443308765153716, "phrase": "partial_pivoting"}, {"score": 0.003970439654470374, "phrase": "permutation_matrix"}, {"score": 0.00379914165379475, "phrase": "unit_diagonal"}, {"score": 0.003757480190200645, "phrase": "entries'_magnitudes"}, {"score": 0.0037405671815623257, "phrase": "parlett"}, {"score": 0.00327356326590461, "phrase": "aasen"}, {"score": 0.003030247482854539, "phrase": "growth_factor"}, {"score": 0.002883439044844259, "phrase": "similar_behavior"}, {"score": 0.00282048824450047, "phrase": "aasen's_basic_algorithm"}, {"score": 0.002639740960006001, "phrase": "linear_systems"}, {"score": 0.0025678829712650437, "phrase": "computed_factorization"}, {"score": 0.0024569466759289055, "phrase": "modern_computer_architectures"}, {"score": 0.0023900527169254744, "phrase": "cache_memories"}, {"score": 0.002363806685815014, "phrase": "high-performance_blas_libraries"}, {"score": 0.002279045842581059, "phrase": "lapack."}, {"score": 0.002163930783583212, "phrase": "partitioned_bunch-kaufman_factor"}], "paper_keywords": ["Algorithms", " Performance", " Symmetric indefinite matrices", " tridiagonalization", " Aasen's tridagonalization", " Parlett-Reid tridagonalization", " partitioned factorizations", " recursive factorizations"], "paper_abstract": "We present a partitioned algorithm for reducing a symmetric matrix to a tridiagonal form, with partial pivoting. That is, the algorithm computes a factorization PAP(T) = LTL(T), where, P is a permutation matrix, L is lower triangular with a unit diagonal and entries' magnitudes bounded by 1, and T is symmetric and tridiagonal. The algorithm is based on the basic (nonpartitioned) methods of Parlett and Reid and of Aasen. We show that our factorization algorithm is componentwise backward stable (provided that the growth factor is not too large), with a similar behavior to that of Aasen's basic algorithm. Our implementation also computes the QRfactorization of T and solves linear systems of equations using the computed factorization. The partitioning allows our algorithm to exploit modern computer architectures (in particular, cache memories and high-performance BLAS libraries). Experimental results demonstrate that our algorithms achieve approximately the same level of performance as the partitioned Bunch-Kaufman factor and solve routines in LAPACK.", "paper_title": "Partitioned Triangular Tridiagonalization", "paper_id": "WOS:000287849900001"}