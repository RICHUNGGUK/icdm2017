{"auto_keywords": [{"score": 0.04007839710766617, "phrase": "serial_algorithm"}, {"score": 0.00481495049065317, "phrase": "maximal_poisson-disk_sampling"}, {"score": 0.004777214679969785, "phrase": "high_dimensions"}, {"score": 0.004684157900507474, "phrase": "simple_algorithm"}, {"score": 0.004647442352794694, "phrase": "data_structures"}, {"score": 0.004611013257082199, "phrase": "d-dimensional_unbiased_maximal_poisson-disk_sampling"}, {"score": 0.004485735417293941, "phrase": "magnitude_less_memory"}, {"score": 0.004129873531628877, "phrase": "bigger_samplings"}, {"score": 0.003939296259436904, "phrase": "generated_point_cloud"}, {"score": 0.0038624981944755813, "phrase": "round-off_error"}, {"score": 0.003684213587410217, "phrase": "output_sampling"}, {"score": 0.0035141291835319682, "phrase": "linear_memory_budget"}, {"score": 0.003405109584265324, "phrase": "known_methods"}, {"score": 0.0029899137403982027, "phrase": "efficient_gpu_implementations"}, {"score": 0.0028857130140890787, "phrase": "finite_sequence"}, {"score": 0.0028630535573013686, "phrase": "uniform_grids"}, {"score": 0.0027961342030212353, "phrase": "dart_throwing"}, {"score": 0.002752390133272192, "phrase": "remaining_disk-free_area"}, {"score": 0.0027200305495826797, "phrase": "top-level_grid"}, {"score": 0.002688050388891007, "phrase": "efficient_way"}, {"score": 0.0026355812883224203, "phrase": "candidate_dart"}, {"score": 0.002242127152093798, "phrase": "active_leaves"}, {"score": 0.0021049977753042253, "phrase": "uniform_probability"}], "paper_keywords": [""], "paper_abstract": "We provide a simple algorithm and data structures for d-dimensional unbiased maximal Poisson-disk sampling. We use an order of magnitude less memory and time than the alternatives. Our results become more favorable as the dimension increases. This allows us to produce bigger samplings. Domains may be non-convex with holes. The generated point cloud is maximal up to round-off error. The serial algorithm is provably bias-free. For an output sampling of size n in fixed dimension d, we use a linear memory budget and empirical Theta(n) runtime. No known methods scale well with dimension, due to the \"curse of dimensionality.\" The serial algorithm is practical in dimensions up to 5, and has been demonstrated in 6d. We have efficient GPU implementations in 2d and 3d. The algorithm proceeds through a finite sequence of uniform grids. The grids guide the dart throwing and track the remaining disk-free area. The top-level grid provides an efficient way to test if a candidate dart is disk-free. Our uniform grids are like quadtrees, except we delay splits and refine all leaves at once. Since the quadtree is flat it can be represented using very little memory: we just need the indices of the active leaves and a global level. Also it is very simple to sample from leaves with uniform probability.", "paper_title": "A Simple Algorithm for Maximal Poisson-Disk Sampling in High Dimensions", "paper_id": "WOS:000306182500006"}