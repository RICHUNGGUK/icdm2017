{"auto_keywords": [{"score": 0.02583171025442314, "phrase": "exit"}, {"score": 0.00481495049065317, "phrase": "product_codes"}, {"score": 0.004583579470330216, "phrase": "code_trees"}, {"score": 0.0045197012158857365, "phrase": "beast"}, {"score": 0.00441130431691048, "phrase": "efficient_soft-output_decoding"}, {"score": 0.004292212137716459, "phrase": "concatenated_block_codes"}, {"score": 0.004085856939524333, "phrase": "minimal_trellis"}, {"score": 0.0040192915527630995, "phrase": "block_code"}, {"score": 0.003743102131902864, "phrase": "beast_search"}, {"score": 0.0035826234811610316, "phrase": "trellis-based_algorithms"}, {"score": 0.003485824905231454, "phrase": "viterbi_algorithm"}, {"score": 0.003264010423431402, "phrase": "best_codewords"}, {"score": 0.0030899524399043863, "phrase": "posteriori_probabilities"}, {"score": 0.002989991779830814, "phrase": "transmitted_symbols"}, {"score": 0.002679501909303057, "phrase": "component_decoder"}, {"score": 0.002650279521276126, "phrase": "iterative_schemes"}, {"score": 0.002564505790176378, "phrase": "incomplete_product_codes"}, {"score": 0.002508867228980776, "phrase": "convergence_behavior"}, {"score": 0.002454432810862053, "phrase": "extrinsic_information_transfer"}, {"score": 0.002349073225500705, "phrase": "existing_decoding_schemes"}, {"score": 0.002260591903283384, "phrase": "beast-app_decoder"}, {"score": 0.0021049977753042253, "phrase": "substantially_lower_computational_complexity"}], "paper_keywords": ["Bidirectional Efficient Algorithm for Searching code Trees (BEAST)", " block turbo codes", " list decoding", " product codes", " soft-input soft-output (SISO) decoding"], "paper_abstract": "A Bidirectional Efficient Algorithm. for Searching code Trees (BEAST) is proposed for efficient soft-output decoding of block codes and concatenated block codes. BEAST operates on trees corresponding to the minimal trellis of a block code and finds a list of the most probable codewords. The complexity of the BEAST search is significantly lower than the complexity of trellis-based algorithms, such as the Viterbi algorithm and its list generalizations. The outputs of BEAST, a list of best codewords and their metrics, are used to obtain approximate a posteriori probabilities (APPs) of the transmitted symbols, yielding a soft-input soft-output (SISO) symbol decoder referred to as the BEAST-APP decoder. This decoder is employed as a component decoder in iterative schemes for decoding of product and incomplete product codes. Its performance and convergence behavior are investigated using extrinsic information transfer (EXIT) charts and compared to existing decoding schemes. It is shown that the BEAST-APP decoder achieves performances close to the Bahl-Cocke-Jelinek-Raviv (BCJR) decoder with a substantially lower computational complexity.", "paper_title": "Soft-output BEAST decoding with application to product codes", "paper_id": "WOS:000253602200006"}