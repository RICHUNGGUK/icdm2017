{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "threshold"}, {"score": 0.00436661740263741, "phrase": "reasonably_efficient_threshold"}, {"score": 0.004289686492089576, "phrase": "proactive_pseudo-random_permutation"}, {"score": 0.0037209035703970705, "phrase": "n_dishonest_servers"}, {"score": 0.0036229421570951807, "phrase": "semi-honest_environment"}, {"score": 0.003320122305859638, "phrase": "cbc"}, {"score": 0.0029789104204803137, "phrase": "distributed_setting"}, {"score": 0.0028492532869274743, "phrase": "invertible_threshold_prps"}, {"score": 0.0027741761880779535, "phrase": "distributed_luby-rackoff_construction"}, {"score": 0.0023424328921363585, "phrase": "pseudo-random_functions"}, {"score": 0.0023010815714140467, "phrase": "naor-reingold"}, {"score": 0.002200861826643147, "phrase": "dodis-yampolskiy"}, {"score": 0.0021049977753042253, "phrase": "shared_input"}], "paper_keywords": ["distributed block ciphers", " distributed Luby-Rackoff construction", " oblivious pseudo-random functions", " threshold cryptography"], "paper_abstract": "We construct a reasonably efficient threshold and proactive pseudo-random permutation (PRP). Our protocol needs only O(1) communication rounds. It tolerates tip to (n - 1)/2 of n dishonest servers in the semi-honest environment. Many protocols that use PRPs (e.g., a CBC block cipher mode) can now be translated into the distributed setting. Our main technique for constructing invertible threshold PRPs is a distributed Luby-Rackoff construction where both the secret keys and the input are shared among the servers. We also present protocols for obliviously computing pseudo-random functions by Naor-Reingold [41] and Dodis-Yampolskiy [25] with shared input and keys.", "paper_title": "Threshold and proactive pseudo-random permutations", "paper_id": "WOS:000236909300028"}