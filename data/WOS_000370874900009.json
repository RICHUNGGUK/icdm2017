{"auto_keywords": [{"score": 0.0475552118410291, "phrase": "c_abstract_machine"}, {"score": 0.04186435485228401, "phrase": "memory_model"}, {"score": 0.004744437370338926, "phrase": "memory-safe_c_abstract_machine"}, {"score": 0.00462919213721188, "phrase": "new_memory-safe_interpretation"}, {"score": 0.004494570360108983, "phrase": "stronger_protection"}, {"score": 0.004174824849669107, "phrase": "implementation_flexibility"}, {"score": 0.004133940019630129, "phrase": "contemporary_implementations"}, {"score": 0.00380270687992727, "phrase": "c."}, {"score": 0.0036914757355166966, "phrase": "memory_safety"}, {"score": 0.0036553070575015344, "phrase": "well-documented_impacts"}, {"score": 0.0033288399506044763, "phrase": "large_body"}, {"score": 0.003296212583539166, "phrase": "existing_c_code"}, {"score": 0.0031377955308198634, "phrase": "original_c_compiler"}, {"score": 0.0029722900280316216, "phrase": "memory-safe_variant"}, {"score": 0.002899965889623787, "phrase": "cheri_experimental_microprocessor"}, {"score": 0.0027878797103973313, "phrase": "problematic_idioms"}, {"score": 0.0026538282523433684, "phrase": "existing_memory_safety_schemes"}, {"score": 0.0025014259919355453, "phrase": "c_specification"}, {"score": 0.00241658945942583, "phrase": "cheri_isa"}, {"score": 0.0023928819778638055, "phrase": "abstract_model"}, {"score": 0.0022890371899188466, "phrase": "cheri_capability_model"}, {"score": 0.0022665781920241245, "phrase": "fat_pointers"}, {"score": 0.0022113879114507577, "phrase": "softcore_cpu"}, {"score": 0.002125859121671523, "phrase": "legacy_c_code"}, {"score": 0.0021049977753042253, "phrase": "strong_memory_protection_guarantees"}], "paper_keywords": [""], "paper_abstract": "We propose a new memory-safe interpretation of the C abstract machine that provides stronger protection to benefit security and debugging. Despite ambiguities in the specification intended to provide implementation flexibility, contemporary implementations of C have converged on a memory model similar to the PDP-11, the original target for C. This model lacks support for memory safety despite well-documented impacts on security and reliability. Attempts to change this model are often hampered by assumptions embedded in a large body of existing C code, dating back to the memory model exposed by the original C compiler for the PDP-11. Our experience with attempting to implement a memory-safe variant of C on the CHERI experimental microprocessor led us to identify a number of problematic idioms. We describe these as well as their interaction with existing memory safety schemes and the assumptions that they make beyond the requirements of the C specification. Finally, we refine the CHERI ISA and abstract model for C, by combining elements of the CHERI capability model and fat pointers, and present a softcore CPU that implements a C abstract machine that can run legacy C code with strong memory protection guarantees.", "paper_title": "Beyond the PDP-11: Architectural support for a memory-safe C abstract machine", "paper_id": "WOS:000370874900009"}