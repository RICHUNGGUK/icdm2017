{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fixed_job_scheduling_problem"}, {"score": 0.04934553301452922, "phrase": "spread_time_constraints"}, {"score": 0.004596960835906736, "phrase": "scheduling_problem"}, {"score": 0.0033486631403337555, "phrase": "starting_time"}, {"score": 0.0032718761046588835, "phrase": "first_job"}, {"score": 0.003123527559542239, "phrase": "completion_time"}, {"score": 0.003051887221639784, "phrase": "last_job"}, {"score": 0.00282470997972535, "phrase": "existing_exact_approaches"}, {"score": 0.0027386335451725762, "phrase": "medium_size_instances"}, {"score": 0.002675797331220082, "phrase": "large_instances"}, {"score": 0.0023099082804523044, "phrase": "computational_results"}, {"score": 0.002205079358459154, "phrase": "proposed_heuristics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Fixed job scheduling", " Spread time constraints", " Genetic algorithms"], "paper_abstract": "In a scheduling problem, a job is said to be fixed when its due date corresponds exactly to its release date plus its processing time. This paper addresses the fixed job scheduling problem where processors are subject to spread time constraints, i.e., the amount of time spent between the starting time of the first job on a processor and the completion time of the last job on the same processor should not exceed a given duration. Existing exact approaches are tested on medium size instances. As large instances are clearly intractable with these approaches, a greedy heuristic and a grouping genetic algorithm are proposed. Computational results show the effectiveness of the proposed heuristics. (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "A metaheuristic for the fixed job scheduling problem under spread time constraints", "paper_id": "WOS:000272578500006"}