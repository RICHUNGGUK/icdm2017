{"auto_keywords": [{"score": 0.046807563732279546, "phrase": "sp"}, {"score": 0.00968223027536317, "phrase": "sa"}, {"score": 0.009569175397902412, "phrase": "system_specification"}, {"score": 0.0077631294310392535, "phrase": "real-time_systems"}, {"score": 0.005350397575337745, "phrase": "fundamental_issue"}, {"score": 0.00481495049065317, "phrase": "efficient_verification_and_optimization_of_real-time_logic-specified_systems"}, {"score": 0.00479609046759737, "phrase": "embedded_and_real-time_systems"}, {"score": 0.004721382737981198, "phrase": "formal_specification"}, {"score": 0.004638720150669882, "phrase": "desirable_safety_and_timing_requirements"}, {"score": 0.0046205472118588725, "phrase": "real-time_logic"}, {"score": 0.004451400332908411, "phrase": "real-time_system"}, {"score": 0.004425262337317379, "phrase": "desirable_safety_assertions"}, {"score": 0.004313752054071542, "phrase": "verification_procedure"}, {"score": 0.0042716123620981945, "phrase": "safety_assertions"}, {"score": 0.0041803423266917215, "phrase": "satisfiability_problem"}, {"score": 0.004163960945461351, "phrase": "rtl"}, {"score": 0.003933442632066412, "phrase": "nontrivial_classes"}, {"score": 0.0038797328654691233, "phrase": "industrial_real-time_systems"}, {"score": 0.003796804053515908, "phrase": "efficient_heuristics"}, {"score": 0.0037449530235915234, "phrase": "so-called_path"}, {"score": 0.003722947674637295, "phrase": "first_contribution"}, {"score": 0.0036648945148250018, "phrase": "existing_path_rtl_class"}, {"score": 0.003636207045971761, "phrase": "time_complexity"}, {"score": 0.0036148383699930267, "phrase": "traditional_path"}, {"score": 0.0034483328181167034, "phrase": "existing_path"}, {"score": 0.00341461814317539, "phrase": "extended_path"}, {"score": 0.0032445262617371274, "phrase": "second_contribution"}, {"score": 0.003206489316426898, "phrase": "efficient_method"}, {"score": 0.0031626743223981354, "phrase": "real-time_systems_specifications"}, {"score": 0.003101114794300976, "phrase": "constraint_graph"}, {"score": 0.0030768267610305875, "phrase": "existing_approaches"}, {"score": 0.0030587352694234882, "phrase": "independent_subgraphs"}, {"score": 0.0029933024467008046, "phrase": "entire_specification"}, {"score": 0.002872235804412754, "phrase": "\"optimal_implication"}, {"score": 0.0027669124015524483, "phrase": "power_saving"}, {"score": 0.002756052268671296, "phrase": "faulty_components"}, {"score": 0.002718375475165936, "phrase": "processing_platform"}, {"score": 0.0026706876989260123, "phrase": "computation_times"}, {"score": 0.0026549779122103834, "phrase": "specified_tasks"}, {"score": 0.00262383429631634, "phrase": "different_but_related_sp"}, {"score": 0.002512726356516828, "phrase": "optimal_sp"}, {"score": 0.00249794341858861, "phrase": "slowest_possible_computation_times"}, {"score": 0.0023225986646617618, "phrase": "new_method"}, {"score": 0.0022242182933595415, "phrase": "java-based_devo-rtl_tool"}, {"score": 0.002163788867542571, "phrase": "running_time"}, {"score": 0.0021049977753042253, "phrase": "optimal_theorem"}], "paper_keywords": ["Real-time system", " system development tool", " automatic debugging", " timing constraint", " counting SAT problem", " incremental computation", " optimization"], "paper_abstract": "Embedded and real-time systems are increasingly common and complex, requiring formal specification and verification in order to guarantee their satisfaction of desirable safety and timing requirements. Real-Time Logic (RTL) has been used to capture both the specification (denoted by SP) of a real-time system and the desirable safety assertions (denoted by SA) with respect to this system specification. A verification procedure then determines whether the safety assertions hold with respect to the system specification. However, the satisfiability problem for RTL (i.e., \"Can SP -> SA hold?\"), as well as for other first order logics, is undecidable. Consequently, efforts have been focused on identifying nontrivial classes of formulas sufficiently practical for describing industrial real-time systems for which the verification and debugging can be done via efficient heuristics. One such class of formulas is the so-called path RTL. The first contribution of this paper is to extend the existing path RTL class without sacrificing the time complexity of the traditional path RTL heuristic for verification. This implies that we can specify and verify real-time systems, which we were unable to do using the existing path RTL, in the extended path RTL. For real-time systems with large specifications, there is a lot of room for improvement in the algorithms used for verification and debugging. The second contribution of this paper is an efficient method to perform verification and debugging of real-time systems specifications using decomposition techniques. Our idea is to decompose the constraint graph, used in existing approaches, into independent subgraphs so that it is no longer necessary to analyze the entire specification at once, but rather its individual and smaller components. However, none of the above heuristics necessarily finds an \"optimal implication.\" After verifying SP -> SA and deploying the system implementing SP, performance changes as a result of power saving, faulty components, and cost saving in the processing platform for the tasks specified in SP affect the computation times of the specified tasks. This leads to a different but related SP, which would violate the original SP -> SA theorem if SA remains the same. It is desirable, therefore, to determine an optimal SP with the slowest possible computation times for its tasks such that the SA is still guaranteed. This is clearly a fundamental issue in the design and implementation of highly dependable real-time/embedded systems. The third contribution of this paper tackles this fundamental issue by describing a new method for relaxing SP and tightening SA such that SP -> SA is still a theorem. We have implemented this method in the Java-based DEVO-RTL tool and tested it on several industrial real-time systems. Experimental results show that only about 10 percent of the running time of the heuristic for the verification of SP -> SA is needed to find an optimal theorem.", "paper_title": "Efficient Verification and Optimization of Real-Time Logic-Specified Systems", "paper_id": "WOS:000270957000005"}