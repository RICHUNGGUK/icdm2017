{"auto_keywords": [{"score": 0.026120382376849723, "phrase": "dim"}, {"score": 0.016887044179929676, "phrase": "ipc"}, {"score": 0.00481495049065317, "phrase": "current_scenario"}, {"score": 0.004755353864362941, "phrase": "computer_systems"}, {"score": 0.004657653216262924, "phrase": "high_diversity"}, {"score": 0.004543046350523362, "phrase": "single_device"}, {"score": 0.004322186889256224, "phrase": "excessive_power_dissipation"}, {"score": 0.0042864307215634756, "phrase": "reconfigurable_systems"}, {"score": 0.003784120134537663, "phrase": "special_tools"}, {"score": 0.003690927840780375, "phrase": "original_code"}, {"score": 0.003540661500026122, "phrase": "different_behaviors"}, {"score": 0.0034678302347682694, "phrase": "significant_gains"}, {"score": 0.003285380677401785, "phrase": "dynamic_instruction"}, {"score": 0.0030611534228319717, "phrase": "coarse-grained_array_configuration"}, {"score": 0.002960979624379786, "phrase": "totally_transparent_process"}, {"score": 0.002900037689072025, "phrase": "speculative_execution"}, {"score": 0.0028640745158229875, "phrase": "proposed_system"}, {"score": 0.0027246145918972025, "phrase": "binary_codes"}, {"score": 0.002690820958068933, "phrase": "full_binary_compatibility"}, {"score": 0.002496659907186784, "phrase": "specific_kernels"}, {"score": 0.0023651843133643768, "phrase": "performance_gains"}, {"score": 0.002316476356455289, "phrase": "energy_savings"}, {"score": 0.0022877332844249065, "phrase": "mips_processor"}, {"score": 0.002274471235922952, "phrase": "mibench"}, {"score": 0.002212812864395738, "phrase": "out-of-order_superscalar_processor"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Computer architecture", " Reconfigurable architectures"], "paper_abstract": "In the current scenario, where computer systems are characterized by a high diversity of applications coexisting in a single device, and with the stagnation in frequency scaling because of the excessive power dissipation, reconfigurable systems have already proven to be very effective. However, they all present two major drawbacks, which are addressed by this work: lack of transparency (the need for special tools or compilers that changes the original code) and no ability to adapt to applications with different behaviors and characteristics, so significant gains are achieved only in very specific data stream oriented applications. Therefore, this work proposes the Dynamic Instruction Merging (DIM), a Binary Translation mechanism responsible for transforming sequences of instructions into a coarse-grained array configuration at run-time, in a totally transparent process, with support to speculative execution. The proposed system does not impose any kind of modification to the source or binary codes, so full binary compatibility is maintained. Moreover, it can optimize any application, even those that do not present specific kernels for optimization. DIM presents, on average, 2.7 times of performance gains and 2.35 times of energy savings over a MIPS processor, and a higher IPC than an out-of-order superscalar processor, running the MIBench benchmark set. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A transparent and adaptive reconfigurable system", "paper_id": "WOS:000340300900013"}