{"auto_keywords": [{"score": 0.0495133738546852, "phrase": "predictive_analysis"}, {"score": 0.00481495049065317, "phrase": "concurrent_programs"}, {"score": 0.004646258518859209, "phrase": "concurrency_errors"}, {"score": 0.004483450050677258, "phrase": "concrete_execution_trace"}, {"score": 0.004404188306112211, "phrase": "concurrent_program"}, {"score": 0.004100851549096203, "phrase": "causality_relations"}, {"score": 0.003619235073669304, "phrase": "program_source_code"}, {"score": 0.003513133457324989, "phrase": "enumerative_algorithms"}, {"score": 0.0034101316738399203, "phrase": "safety_properties"}, {"score": 0.0033497809969621267, "phrase": "predicted_traces"}, {"score": 0.003251552926963083, "phrase": "interleaving_explosion_problem"}, {"score": 0.0030819219279832224, "phrase": "precise_predictive_model"}, {"score": 0.0029737652463012318, "phrase": "observed_execution_events"}, {"score": 0.0028865314258560214, "phrase": "symbolic_algorithm"}, {"score": 0.002801849371896573, "phrase": "safety_property"}, {"score": 0.0027358910467781155, "phrase": "feasible_permutations"}, {"score": 0.002399850604120431, "phrase": "novel_encoding_and_symbolic_reasoning"}, {"score": 0.002357337046408753, "phrase": "satisfiability_modulo_theory_solver"}, {"score": 0.0021946656099592608, "phrase": "context_switches"}, {"score": 0.0021049977753042253, "phrase": "symbolic_search"}], "paper_keywords": ["Concurrent trace program", " Predictive analysis", " Happens-before", " Context bounding", " SMT", " SAT"], "paper_abstract": "Predictive analysis aims at detecting concurrency errors during runtime by monitoring a concrete execution trace of a concurrent program. In recent years, various models based on the happens-before causality relations have been proposed for predictive analysis. However, these models often rely on only the observed runtime events and typically do not utilize the program source code. Furthermore, the enumerative algorithms they use for verifying safety properties in the predicted traces often suffer from the interleaving explosion problem. In this paper, we introduce a precise predictive model based on both the program source code and the observed execution events, and propose a symbolic algorithm to check whether a safety property holds in all feasible permutations of events of the given trace. Rather than explicitly enumerating and checking the interleavings, our method conducts the search using a novel encoding and symbolic reasoning with a satisfiability modulo theory solver. We also propose a technique to bound the number of context switches allowed in the interleavings during the symbolic search, to further improve the scalability of the algorithm.", "paper_title": "Symbolic predictive analysis for concurrent programs", "paper_id": "WOS:000296738300005"}