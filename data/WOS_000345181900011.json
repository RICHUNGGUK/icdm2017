{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "matrix_updates"}, {"score": 0.00437302709192313, "phrase": "learning_algorithm"}, {"score": 0.003939748053452577, "phrase": "asymmetric_matrices"}, {"score": 0.003876996400581697, "phrase": "symmetric_matrices"}, {"score": 0.00319732428387928, "phrase": "algorithm's_action"}, {"score": 0.0030962064913500164, "phrase": "linear_prediction"}, {"score": 0.0028115863316685937, "phrase": "linear_parameter_vector"}, {"score": 0.002244876254113051, "phrase": "multiplicative_updates"}, {"score": 0.002209060366991921, "phrase": "symmetric_instance_matrices"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Kernelization", " Multiplicative updates", " Rotational invariance", " Exponentiated Gradient algorithm", " Gradient Descent algorithm"], "paper_abstract": "We define what it means for a learning algorithm to be kernelizable in the case when the instances are vectors, asymmetric matrices and symmetric matrices, respectively. We can characterize kernelizability in terms of an invariance of the algorithm to certain orthogonal transformations. If we assume that the algorithm's action relies on a linear prediction, then we can show that in each case, the linear parameter vector must be a certain linear combination of the instances. We give a number of examples of how to apply our methods. In particular we show how to kernelize multiplicative updates for symmetric instance matrices. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Kernelization of matrix updates, when and how?", "paper_id": "WOS:000345181900011"}