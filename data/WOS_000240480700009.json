{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "modular_verification"}, {"score": 0.03575906970612101, "phrase": "component_assumptions"}, {"score": 0.004770211811866158, "phrase": "software_specifications"}, {"score": 0.004725886853744007, "phrase": "model_checking"}, {"score": 0.00466016686289196, "phrase": "powerful_automated_technique"}, {"score": 0.004468415400599571, "phrase": "reactive_systems"}, {"score": 0.00436530211426514, "phrase": "model_checkers"}, {"score": 0.0042446888127531945, "phrase": "state_explosion_problem"}, {"score": 0.004127394241838696, "phrase": "assume-guarantee_paradigm"}, {"score": 0.003939033374807842, "phrase": "\"_technique"}, {"score": 0.003604421041893448, "phrase": "environment_model"}, {"score": 0.0034884152484429207, "phrase": "novel_technique"}, {"score": 0.0030891871245908665, "phrase": "first_phase"}, {"score": 0.002948066398723126, "phrase": "state_space_exploration_techniques"}, {"score": 0.002826562521633885, "phrase": "association_rules"}, {"score": 0.002787181295054319, "phrase": "component_environment_interface"}, {"score": 0.0025264171945423254, "phrase": "assumption_discharge"}, {"score": 0.0022793032191981404, "phrase": "model_checker"}, {"score": 0.0021649437083408425, "phrase": "steam_boiler_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["assume-guarantee reasoning", " model checking", " modular verification", " component verification"], "paper_abstract": "Model checking is a powerful automated technique mainly used for the verification of properties of reactive systems. In practice, model checkers are limited due to the state explosion problem. Modular verification based on the assume-guarantee paradigm mitigates this problem using a \"divide and conquer\" technique. Unfortunately, this approach is not automated, for the reason that the user must specify the environment model. In this paper, a novel technique is presented for automatically generating component assumptions based on the behaviour of the environment (the remainder of components of the systems). In the first phase, the environment of the component is computed using state space exploration techniques, and then the assumptions are generated as association rules of the component environment interface. This approach presents a number of advantages. Firstly, user assistance to specify assumptions is not necessary and assumption discharge is avoided. Secondly, the component assumptions are more restrictive and real, and therefore reduce the resources needed by the model checker. The technique is applied to the specification of a steam boiler system. (C) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Automatic generation of assumptions for modular verification of software specifications", "paper_id": "WOS:000240480700009"}