{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nihu"}, {"score": 0.015057957874527624, "phrase": "bem"}, {"score": 0.004295459433506106, "phrase": "boundary_element_methods"}, {"score": 0.003980531478122155, "phrase": "discretised_boundary_integral_operators"}, {"score": 0.003916098498242888, "phrase": "generic_way"}, {"score": 0.0038737214010638745, "phrase": "arbitrarily_defined_kernels"}, {"score": 0.003831801113154043, "phrase": "function_spaces"}, {"score": 0.0037903327482565097, "phrase": "nihu's_template_core"}, {"score": 0.003668591097652231, "phrase": "general_bem_algorithm"}, {"score": 0.003589602322126282, "phrase": "specific_application"}, {"score": 0.00349324530379071, "phrase": "expressive_syntax"}, {"score": 0.003399466007862412, "phrase": "operator_notation"}, {"score": 0.003236941658990869, "phrase": "boundary_elements"}, {"score": 0.0031329184724341592, "phrase": "customisable_component_library"}, {"score": 0.003048782877550259, "phrase": "particular_applications"}, {"score": 0.002999386721353559, "phrase": "different_numerical_integration_techniques"}, {"score": 0.0027641218567092665, "phrase": "external_open_source_libraries"}, {"score": 0.0026898636962522505, "phrase": "matlab_tool-box"}, {"score": 0.002646267286675984, "phrase": "mex_interface"}, {"score": 0.00251966141432339, "phrase": "optimised_codes"}, {"score": 0.0024923577071656014, "phrase": "specific_applications"}, {"score": 0.0024519545383399773, "phrase": "heterogeneous_problems"}, {"score": 0.0023730978395564116, "phrase": "main_concepts"}, {"score": 0.0023346234464901978, "phrase": "novel_development"}, {"score": 0.0022228943786652914, "phrase": "implementation's_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Generic BEM library", " C plus plus template metaprogramming", " Boundary element methods", " Object-oriented programming", " Partial differential equations", " Acoustics"], "paper_abstract": "This paper introduces NiHu, a C++ template library for boundary element methods (BEM). The library is capable of computing the coefficients of discretised boundary integral operators in a generic way with arbitrarily defined kernels and function spaces. NiHu'S template core defines the workflow of a general BEM algorithm independent of the specific application. The core provides expressive syntax, based on the operator notation of the BEM, reflecting the mathematics behind boundary elements in the C++ source code. The customisable Component library contains elements specific to particular applications such as different numerical integration techniques and regularisation methods. The library can be used for creating a standalone C++ application using external open source libraries, or compiling a Matlab tool-box through the MEX interface. By massively exploiting C++ template metaprogramming, NiHu generates optimised codes for specific applications, including heterogeneous problems. The paper introduces the main concepts of the novel development, demonstrates its versatility and flexibility and compares the implementation's performance to that of other open source projects. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "NiHu: An open source C plus plus BEM library", "paper_id": "WOS:000340315500008"}