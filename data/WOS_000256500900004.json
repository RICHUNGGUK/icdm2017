{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "c_language"}, {"score": 0.04835227522307675, "phrase": "crosscutting_concerns"}, {"score": 0.004473982381245469, "phrase": "aspect-oriented_programming"}, {"score": 0.003757480190200645, "phrase": "asymmetric_paradigm"}, {"score": 0.003459191419478298, "phrase": "aspect_code"}, {"score": 0.0031845067058084583, "phrase": "symmetric_paradigms"}, {"score": 0.002799810685137358, "phrase": "non-object-oriented_languages"}, {"score": 0.0026990749007514895, "phrase": "c."}, {"score": 0.0025071862539276283, "phrase": "symmetric_aspect_extension"}, {"score": 0.002286781334850213, "phrase": "implementation_issues"}, {"score": 0.002183938718432764, "phrase": "new_extension"}, {"score": 0.0021049977753042253, "phrase": "asymmetric_ones"}], "paper_keywords": ["aspect-oriented programming", " symmetric paradigm", " aspect extension", " C language"], "paper_abstract": "By separating crosscutting concerns into modules, aspect-oriented programming (AOP) can greatly improve the maintainability, understandability and reusability of software. However, the asymmetric paradigm adopted by most AOP extensions could bring crosscutting concerns into the aspect code and thus limit the reusability of aspects. Symmetric paradigms have been proposed to alleviate such limitations, but few extensions on such paradigm target at non-object-oriented languages, such as C. In this paper, we propose a symmetric aspect extension to the C language, called AspectC2C, and discuss implementation issues and benefits of this new extension comparing to the asymmetric ones.", "paper_title": "AspectC2C: a symmetric aspect extension to the C language", "paper_id": "WOS:000256500900004"}