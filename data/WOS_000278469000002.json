{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nominal_terms"}, {"score": 0.03892276291099736, "phrase": "nominal_approach"}, {"score": 0.004631335513513859, "phrase": "first-order_terms"}, {"score": 0.0040027552011993005, "phrase": "name_swappings"}, {"score": 0.0038876302202924644, "phrase": "freshness_relation"}, {"score": 0.003294875957676514, "phrase": "nominal_matching"}, {"score": 0.003200045185608395, "phrase": "modulo_alpha-equivalence"}, {"score": 0.003048001809453513, "phrase": "programming_languages"}, {"score": 0.002659527314613792, "phrase": "efficient_algorithms"}, {"score": 0.002366110899738696, "phrase": "matching_problems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Binders", " Alpha-equivalence", " Matching", " Nominal terms"], "paper_abstract": "Nominal terms generalise first-order terms by including abstraction and name swapping constructs, alpha-equivalence can be easily axiomatised using name swappings and a freshness relation, which makes the nominal approach well adapted to the specification of systems that involve binders. Nominal matching is matching modulo alpha-equivalence and has applications in programming languages, rewriting, and theorem proving. In this paper, we describe efficient algorithms to check the validity of equations involving binders and to solve matching problems modulo alpha-equivalence, using the nominal approach. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Matching and alpha-equivalence check for nominal terms", "paper_id": "WOS:000278469000002"}