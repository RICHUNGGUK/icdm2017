{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "android"}, {"score": 0.00481495049065317, "phrase": "heap_reachability"}, {"score": 0.004081385289516914, "phrase": "pointer_dereferences"}, {"score": 0.004031699976413366, "phrase": "precise_reachability_information"}, {"score": 0.0037921662574137535, "phrase": "static_detection"}, {"score": 0.0036777702949712457, "phrase": "android_memory_leaks"}, {"score": 0.003459191419478298, "phrase": "heap_reachability_information"}, {"score": 0.0030601162942933665, "phrase": "numerous_false-positive_leak_reports"}, {"score": 0.002949598537993663, "phrase": "symbolic_execution"}, {"score": 0.0028605468171961457, "phrase": "strong_updates"}, {"score": 0.002825681384008326, "phrase": "abstract_heap_information"}, {"score": 0.0027572166867780275, "phrase": "initial_flow-insensitive_points"}, {"score": 0.0026576091519087065, "phrase": "novel_mixed_representation"}, {"score": 0.002469032978674379, "phrase": "pre-computed_points"}, {"score": 0.002336414425972225, "phrase": "infeasible_paths"}, {"score": 0.002224510044064184, "phrase": "thresher_tool"}], "paper_keywords": ["heap reachability", " path-sensitive analysis", " symbolic execution"], "paper_abstract": "We present a precise, path-sensitive static analysis for reasoning about heap reachability; that is, whether an object can be reached from another variable or object via pointer dereferences. Precise reachability information is useful for a number of clients, including static detection of a class of Android memory leaks. For this client, we found that the heap reachability information computed by a state-of-the-art points-to analysis was too imprecise, leading to numerous false-positive leak reports. Our analysis combines a symbolic execution capable of path-sensitivity and strong updates with abstract heap information computed by an initial flow-insensitive points-to analysis. This novel mixed representation allows us to achieve both precision and scalability by leveraging the pre-computed points-to facts to guide execution and prune infeasible paths. We have evaluated our techniques in the THRESHER tool, which we used to find several developer-confirmed leaks in Android applications. Categories and Subject", "paper_title": "Thresher: Precise Refutations for Heap Reachability", "paper_id": "WOS:000321865400027"}