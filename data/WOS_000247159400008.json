{"auto_keywords": [{"score": 0.04184233791741217, "phrase": "mqta"}, {"score": 0.010612387000973441, "phrase": "multi-tiered_database_systems"}, {"score": 0.006466218448846582, "phrase": "dpa"}, {"score": 0.0047057084749407485, "phrase": "materialized_query_table"}, {"score": 0.004669857475347515, "phrase": "mqt"}, {"score": 0.004598933498016774, "phrase": "auxiliary_table"}, {"score": 0.004563880494020726, "phrase": "precomputed_data"}, {"score": 0.004359078118356132, "phrase": "database_query"}, {"score": 0.004309323675697185, "phrase": "materialized_query_table_advisor"}, {"score": 0.003931118518507637, "phrase": "standalone_database_server"}, {"score": 0.0037402558657576124, "phrase": "base_tables"}, {"score": 0.003585986761045987, "phrase": "federated_or_scaleout_scenario"}, {"score": 0.003221316290858497, "phrase": "backend_database_server"}, {"score": 0.0031121406603482112, "phrase": "data_placement_advisor"}, {"score": 0.0030530895634491343, "phrase": "load_balancing_strategies"}, {"score": 0.0028715299874549245, "phrase": "placement_strategies"}, {"score": 0.0028278480051602355, "phrase": "response_time"}, {"score": 0.0027955219242123013, "phrase": "query_workload"}, {"score": 0.002711109302199029, "phrase": "data_placement_advising"}, {"score": 0.002453947971753739, "phrase": "ibm"}, {"score": 0.0023346234464901978, "phrase": "evaluation_results"}, {"score": 0.002316788811533867, "phrase": "substantial_improvements"}, {"score": 0.0022990901047984197, "phrase": "workload_response_times"}, {"score": 0.0022125996721544514, "phrase": "frontend_database_server"}, {"score": 0.0021872912745910127, "phrase": "space_and_load_characteristics"}, {"score": 0.0021539955106204354, "phrase": "olap_type_workloads"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["OLAP", " materialized views", " data placement", " performance", " caching"], "paper_abstract": "A materialized view or Materialized Query Table (MQT) is an auxiliary table with precomputed data that can be used to significantly improve the performance of a database query. A Materialized Query Table Advisor (MQTA) is often used to recommend and create MQTs. The state-of-the-art MQTA works in a standalone database server where MQTs are placed on the same server as that in which the base tables are located. The MQTA does not apply to a federated or scaleout scenario in which MQTs need to be placed on other servers close to applications (i.e. a frontend database server) for off-loading the workload on the backend database server. In this paper, we propose a Data Placement Advisor (DPA) and load balancing strategies for multi-tiered database systems. Built on top of the MQTA, DPA recommends MQTs and advises placement strategies for minimizing the response time for a query workload. To demonstrate the benefit of the data placement advising, we implemented a prototype of DPA that works with the MQTA in the IBM (R) DB2 (R) Universal Database(TM) (DB2 UDB) and the IBM WebSphere (R) Information Integrator (WebSphere II). The evaluation results showed substantial improvements of workload response times when MQTs are intelligently recommended and placed on a frontend database server subject to space and load characteristics for TPC-H and OLAP type workloads. (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Load balancing and data placement for multi-tiered database systems", "paper_id": "WOS:000247159400008"}