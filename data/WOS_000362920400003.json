{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "prefix_transpositions"}, {"score": 0.040462977096398095, "phrase": "prefix_transposition_distance"}, {"score": 0.030025708036724715, "phrase": "upper_bound"}, {"score": 0.013924496609701112, "phrase": "prefix_transposition"}, {"score": 0.011137666862504749, "phrase": "permutation_operation"}, {"score": 0.0046674454547412795, "phrase": "sigma"}, {"score": 0.0041636475197809825, "phrase": "genome_rearrangements"}, {"score": 0.004139976980458675, "phrase": "computer_interconnection_networks"}, {"score": 0.004058180509184539, "phrase": "n_symbols"}, {"score": 0.003631062193606885, "phrase": "minimum_number"}, {"score": 0.0035898717643894303, "phrase": "also_called_moves"}, {"score": 0.0032302647179383915, "phrase": "prefix_transposition_operation"}, {"score": 0.0031126340792967102, "phrase": "arbitrary_pi"}, {"score": 0.002585539416877115, "phrase": "permutation_pi"}, {"score": 0.002386869729952315, "phrase": "explicit_proofs"}, {"score": 0.002286781334850213, "phrase": "missing_proofs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cayley graphs", " Permutations", " Sorting", " Prefix transpositions", " Diameter", " Upper bound"], "paper_abstract": "Permutations are sequences where each symbol in the given alphabet Sigma appears exactly once. A transposition is an operation that exchanges two adjacent sublists in a permutation; if one of these sublists is restricted to be a prefix then one obtains a prefix transposition. Transpositions over permutations have applications in genome rearrangements and computer interconnection networks. The set of permutations with n symbols derived from the alphabet Sigma = {0, 1,...., n - 1} form a symmetric group, that we denote by P-n. The prefix transposition distance between two permutations pi* is an element of P-n and pi(similar to) is an element of P-n is the minimum number of prefix transpositions, also called moves, needed to transform pi* into pi(similar to). A prefix transposition can be modeled by a permutation operation. A permutation is type of sequence and it is also an operation. The generators for prefix transposition operation are a subset of permutation operation. As a result, transforming an arbitrary pi* is an element of P-n to an arbitrary pi(similar to) is an element of P-n is equivalent to sorting some pi(boolean AND) is an element of P-n. Thus, upper bound for transforming any pi* is an element of P-n into any pi(similar to) is an element of P-n with prefix transpositions is simply the upper bound to sort any permutation pi is an element of P-n with moves. In the article that establishes the best known upper bound for prefix transposition distance over P-n as n - log(9/2) n, explicit proofs were not given for some cases. In this article, we provide the missing proofs, validating the stated upper bound. Furthermore, we establish an upper bound of n - log(7/2) n for prefix transposition distance over P-n. (C) 2015 Published by Elsevier B.V.", "paper_title": "Tighter upper bound for sorting permutations with prefix transpositions", "paper_id": "WOS:000362920400003"}