{"auto_keywords": [{"score": 0.03807235534786759, "phrase": "end_user"}, {"score": 0.004814954066338424, "phrase": "qsm"}, {"score": 0.004646258518859209, "phrase": "software_behavior_model_induction"}, {"score": 0.004483450050677258, "phrase": "novel_application"}, {"score": 0.004430452655732319, "phrase": "grammatical_inference_techniques"}, {"score": 0.00430067200637091, "phrase": "behavior_models"}, {"score": 0.004249825947483216, "phrase": "software_systems"}, {"score": 0.004004436217742343, "phrase": "software_requirements"}, {"score": 0.003818326867123525, "phrase": "deterministic_finite-state_automaton_induction_problem"}, {"score": 0.0034101316738399203, "phrase": "query-driven_state_merging"}, {"score": 0.0031939996970411027, "phrase": "regular_positive_and_negative_inference"}, {"score": 0.0031561961485589633, "phrase": "rpni"}, {"score": 0.002991524908432975, "phrase": "membership_queries"}, {"score": 0.002852356597632014, "phrase": "state_merging_operations"}, {"score": 0.0027358910467781155, "phrase": "prior_domain_knowledge"}, {"score": 0.0026241684260044414, "phrase": "domain_properties"}, {"score": 0.0025471636425006155, "phrase": "external_software_components"}, {"score": 0.002472412920623605, "phrase": "domain_knowledge"}, {"score": 0.002315574871863272, "phrase": "induced_model"}, {"score": 0.0022209780222461587, "phrase": "proposed_techniques"}, {"score": 0.002155779067056877, "phrase": "isis_tool"}, {"score": 0.00213023743193503, "phrase": "practical_evaluations"}, {"score": 0.0021049977753042253, "phrase": "standard_requirements_engineering_test_cases"}], "paper_keywords": [""], "paper_abstract": "This article presents a novel application of grammatical inference techniques to the synthesis of behavior models of software systems. This synthesis is used for the elicitation of software requirements. This problem is formulated as a deterministic finite-state automaton induction problem from positive and negative scenarios provided by an end user of the software-to-be. A query-driven state merging (QSM) algorithm is proposed. It extends the Regular Positive and Negative Inference (RPNI) and blue-fringe algorithms by allowing membership queries to be submitted to the end user. State merging operations can be further constrained by some prior domain knowledge formulated as fluents, goals, domain properties, and models of external software components. The incorporation of domain knowledge both reduces the number of queries and guarantees that the induced model is consistent with such knowledge. The proposed techniques are implemented in the ISIS tool and practical evaluations on standard requirements engineering test cases and synthetic data illustrate the interest of this approach.", "paper_title": "The QSM algorithm and its application to software behavior model induction", "paper_id": "WOS:000253657000005"}