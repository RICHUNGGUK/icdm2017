{"auto_keywords": [{"score": 0.03589846486716138, "phrase": "java"}, {"score": 0.03409658978872942, "phrase": "development_time"}, {"score": 0.030757713683384678, "phrase": "adom-java"}, {"score": 0.00481495049065317, "phrase": "reference-based_programming_approach"}, {"score": 0.004696344245532423, "phrase": "domain_engineering"}, {"score": 0.004638136142210615, "phrase": "software_development"}, {"score": 0.004594951819987416, "phrase": "efficient_and_economical_way"}, {"score": 0.004467785611058897, "phrase": "productivity_indicators"}, {"score": 0.004330595259996694, "phrase": "quality_software_product"}, {"score": 0.004290262018446916, "phrase": "limited_period"}, {"score": 0.004250302819248558, "phrase": "limited_resources"}, {"score": 0.0036024511695930753, "phrase": "domain_engineering_approach"}, {"score": 0.0035356111195810483, "phrase": "domain_modeling"}, {"score": 0.0034269461127992688, "phrase": "programming_task"}, {"score": 0.0033528672260542854, "phrase": "adom"}, {"score": 0.0032498004320510076, "phrase": "code_quality"}, {"score": 0.0030435255729392204, "phrase": "text_analysis_procedure"}, {"score": 0.0029870247665469358, "phrase": "controlled_experiment"}, {"score": 0.002931569771634119, "phrase": "java-based_programming_task"}, {"score": 0.0028325548627901004, "phrase": "qualitative_evaluation"}, {"score": 0.0027368750412376215, "phrase": "valuable_guidance"}, {"score": 0.0025154693498317757, "phrase": "better_code_quality"}, {"score": 0.0024764737067121986, "phrase": "better_functionality"}, {"score": 0.0023047189563870593, "phrase": "code_base"}, {"score": 0.002283210560032092, "phrase": "reuse_guidelines"}, {"score": 0.002247807356218318, "phrase": "programming_productivity"}, {"score": 0.002158301441463052, "phrase": "coding_standards"}, {"score": 0.0021448505687807796, "phrase": "architectural_design"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Productivity", " Programming", " Software reusability", " Software quality", " Domain engineering"], "paper_abstract": "Context: Domain engineering aims at facilitating software development in an efficient and economical way. One way to measure that is through productivity indicators, which refer to the ability of creating a quality software product in a limited period and with limited resources. Many approaches have been devised to increase productivity; however, these approaches seem to suffer from a tension between expressiveness on the one hand, and applicability (or the lack of it) in providing guidance for developers. Objective: This paper evaluates the applicability and efficiency of adopting a domain engineering approach, called Application-based DOmain Modeling (ADOM), in the context of the programming task with Java, and thus termed ADOM-Java, for improving productivity in terms of code quality and development time. Method: To achieve that objective we have qualitatively evaluate the approach using questionnaires and following a text analysis procedure. We also set a controlled experiment in which 50 undergraduate students performed a Java-based programming task using either ADOM-Java or Java alone. Results: The qualitative evaluation reveal that the approach is easy to uses and provides valuable guidance. Nevertheless, it requires training. The outcomes of the experiment indicate that the approach is applicable and that the students that used ADOM-Java achieved better code quality, as well as better functionality and within less time than the students who used only Java. Conclusion: The results of the experiments imply that by providing a code base equipped with reuse guidelines for programmers can increase programming productivity in terms of quality and development time. These guidelines may also enforce coding standards and architectural design. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Evaluating the productivity of a reference-based programming approach: A controlled experiment", "paper_id": "WOS:000340850700014"}