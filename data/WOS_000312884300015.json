{"auto_keywords": [{"score": 0.04472882712454684, "phrase": "virtualization_layer"}, {"score": 0.00481495049065317, "phrase": "recent_advance"}, {"score": 0.004769702911065878, "phrase": "virtualization_technology"}, {"score": 0.0047026237903774895, "phrase": "new_approach"}, {"score": 0.004571269461883144, "phrase": "virtual_machine"}, {"score": 0.004528378772494404, "phrase": "vm"}, {"score": 0.00438105507792004, "phrase": "traditional_process-level_checkpointing"}, {"score": 0.003820144626025562, "phrase": "operation_system"}, {"score": 0.0036958398682001015, "phrase": "vm-layer_checkpointing"}, {"score": 0.003626626504149897, "phrase": "entire_operating_system_state"}, {"score": 0.0035587046945919788, "phrase": "single_process"}, {"score": 0.0033150974333333214, "phrase": "vm_checkpoint"}, {"score": 0.0031920445513574907, "phrase": "page_eviction_scheme"}, {"score": 0.00314708280192844, "phrase": "incremental_checkpointing_mechanism"}, {"score": 0.0030881143614111552, "phrase": "unnecessary_vm_pages"}, {"score": 0.0028766278519176355, "phrase": "live_checkpointing_mechanism"}, {"score": 0.002822712709335093, "phrase": "memory_image"}, {"score": 0.0026543514413663893, "phrase": "prototype_system"}, {"score": 0.002616943519478975, "phrase": "vmckpt"}, {"score": 0.0025922974876210194, "phrase": "experimental_results"}, {"score": 0.0025316905609748135, "phrase": "representative_applications"}, {"score": 0.00240328454980006, "phrase": "checkpoint_file_size"}, {"score": 0.0022175019341824603, "phrase": "xens_default_checkpointing_mechanism"}, {"score": 0.00218623706110975, "phrase": "observed_application_downtimes"}], "paper_keywords": ["checkpoint/restart", " copy-on-write", " page eviction", " virtual machine"], "paper_abstract": "Recent advance of virtualization technology provides a new approach to check-point/restart at the virtual machine (VM) level. In contrast to traditional process-level checkpointing, checkpointing at the virtualization layer brings up several advantages, such as compatibility, transparence, flexibility and simplicity. However, because the virtualization layer has little semantic knowledge about the operation system and the applications running atop, VM-layer checkpointing requires saving the entire operating system state rather than a single process. The overhead may render the approach impractical. To reduce the size of VM checkpoint, in this paper we propose a page eviction scheme and an incremental checkpointing mechanism to avoid saving unnecessary VM pages in the checkpoint. To keep the system online transparently, we propose a live checkpointing mechanism by saving the memory image in a copy-on-write (COW) manner. We implement the performance optimization mechanisms in a prototype system, called VMckpt. Experimental results with a group of representative applications show that our page eviction scheme and incremental checkpointing can significantly reduce the checkpoint file size by up to 87% and shorten the total checkpointing/restart time by a factor of up to 71%, in comparison with the Xens default checkpointing mechanism. The observed application downtimes due to checkpointing can be reduced to as small as 300 ms.", "paper_title": "VMckpt: lightweight and live virtual machine checkpointing", "paper_id": "WOS:000312884300015"}