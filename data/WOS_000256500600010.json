{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "modular_oo_verification"}, {"score": 0.004751216062917875, "phrase": "separation_logic"}, {"score": 0.004688321299229397, "phrase": "conventional_specifications"}, {"score": 0.004356926418550194, "phrase": "class_inheritance"}, {"score": 0.003968675046544738, "phrase": "overridden_methods"}, {"score": 0.0037624955853577786, "phrase": "program_reasoning"}, {"score": 0.003543273649210823, "phrase": "fresh_approach"}, {"score": 0.0034963129868796033, "phrase": "oo_verification"}, {"score": 0.002900426826591769, "phrase": "novel_specification_subsumption"}, {"score": 0.0026593184154220123, "phrase": "predicate_mechanism"}, {"score": 0.002572001496778222, "phrase": "flexible_scheme"}, {"score": 0.002470987929071079, "phrase": "lossless_casting"}, {"score": 0.0023113506171584157, "phrase": "practical_verification_system"}, {"score": 0.0021764949731965656, "phrase": "sequential_oo_programs"}, {"score": 0.0021049977753042253, "phrase": "separation_logic_formalism"}], "paper_keywords": ["languages", " theory", " verification", " automated verification", " enhanced subsumption", " separation logic", " lossless casting", " static and dynamic specifications"], "paper_abstract": "Conventional specifications for object-oriented (OO) programs must adhere to behavioral subtyping in support of class inheritance and method overriding. However, this requirement inherently weakens the specifications of overridden methods in superclasses, leading to imprecision during program reasoning. To address this, we advocate a fresh approach to OO verification that focuses on the distinction and relation between specifications that cater to calls with static dispatching from those for calls with dynamic dispatching. We formulate a novel specification subsumption that can avoid code re-verification, where possible. Using a predicate mechanism, we propose a flexible scheme for supporting class invariant and lossless casting. Our aim is to lay the foundation for a practical verification system that is precise, concise and modular for sequential OO programs. We exploit the separation logic formalism to achieve this.", "paper_title": "Enhancing modular OO verification with separation logic", "paper_id": "WOS:000256500600010"}