{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "timed_constructs"}, {"score": 0.03696951645531608, "phrase": "sequential_and_parallel_computation"}, {"score": 0.004624751696958501, "phrase": "high-level_synthesis_framework"}, {"score": 0.004471978831302331, "phrase": "abstract_state_machines"}, {"score": 0.004266501496765747, "phrase": "field-programmable_gate_arrays"}, {"score": 0.003558294449586273, "phrase": "well-defined_formal_semantics"}, {"score": 0.003195236629209403, "phrase": "timing_requirements"}, {"score": 0.002811770047652563, "phrase": "key_contribution"}, {"score": 0.002646501671714952, "phrase": "force-directed_scheduling_algorithm"}, {"score": 0.0021917966722180132, "phrase": "lookup_table_usage"}, {"score": 0.0021335427588412056, "phrase": "total_area"}], "paper_keywords": ["Force-directed scheduling", " high-level synthesis", " parallel and timed constructs"], "paper_abstract": "This paper presents a high-level synthesis framework called synASM that synthesizes abstract state machines (ASMs) to VHDL for field-programmable gate arrays (FPGAs). In particular, this paper focuses on the specification, scheduling, and synthesis of parallel and timed constructs. ASMs possess well-defined formal semantics for sequential and parallel computation, and their composition. We extend ASMs to support the specification of timing requirements, which we call timed constructs. We also describe the composition of timed constructs with sequential and parallel computation. A key contribution of this paper is the extension of the force-directed scheduling algorithm to support both parallel and timed constructs. We implement the synthesis back-end in synASM that targets FPGAs. Our experiments show improvements of up to 52% in lookup table usage and 34% in total area for certain examples.", "paper_title": "synASM: A High-Level Synthesis Framework With Support for Parallel and Timed Constructs", "paper_id": "WOS:000308969600004"}