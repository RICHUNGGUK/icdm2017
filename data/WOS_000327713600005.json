{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "robust_spatial_computing"}, {"score": 0.004736045157669388, "phrase": "open-ended_computational_growth"}, {"score": 0.00428892403807229, "phrase": "computer_architecture"}, {"score": 0.00379914165379475, "phrase": "computational_stack"}, {"score": 0.00373682045166829, "phrase": "end_users"}, {"score": 0.0035953368057880593, "phrase": "truly_large-scale_computers"}, {"score": 0.003536346954940087, "phrase": "robust_spatial_computers"}, {"score": 0.0034024277222012597, "phrase": "spatial_tasks"}, {"score": 0.0033651019362620866, "phrase": "harsh_environments"}, {"score": 0.00325555555110395, "phrase": "extended_introduction"}, {"score": 0.0032021226849872054, "phrase": "spatial_computing_community"}, {"score": 0.002947790697936243, "phrase": "object-oriented_asynchronous_cellular_automata"}, {"score": 0.0027286224888843956, "phrase": "robustness_mechanisms"}, {"score": 0.0025678829712650437, "phrase": "simulation_data"}, {"score": 0.002539689093411356, "phrase": "prototype_movable_elements"}, {"score": 0.002497976173193543, "phrase": "self-healing_wire"}, {"score": 0.00241658945942583, "phrase": "'membrane'_rings"}, {"score": 0.0022994427535192492, "phrase": "larger_computations"}, {"score": 0.002224510044064184, "phrase": "lambda_expression"}, {"score": 0.0021049977753042253, "phrase": "spatial_computing_architecture"}], "paper_keywords": ["spatial computing", " computer architecture", " robustness", " movable feast machine", " globally asynchronous locally synchronous", " functional programming"], "paper_abstract": "For open-ended computational growth, we argue that: (i) instead of hardwiring and hiding component spatial relationships, computer architecture should soften and expose them; and (2) instead of relegating reliability to hardware, robustness must climb the computational stack toward the end users. We suggest that eventually all truly large-scale computers will be robust spatial computers-even if intended neither for spatial tasks nor harsh environments. This paper is an extended introduction for the spatial computing community to the Movable Feast Machine (MFM), a computing model in the spirit of an object-oriented asynchronous cellular automata. We motivate the approach and then present the model, touching on robustness mechanisms such as redundancy, compartmentalization and homeostasis. We provide simulation data from prototype movable elements such as self-healing wire for data transport and movable 'membrane' rings for spatial segregation, and illustrate how some larger computations like sorting or evaluating a lambda expression can be reconceived for robustness and movability within a spatial computing architecture.", "paper_title": "A Movable Architecture for Robust Spatial Computing", "paper_id": "WOS:000327713600005"}