{"auto_keywords": [{"score": 0.03386086410608061, "phrase": "backup_copies"}, {"score": 0.023009771297250528, "phrase": "qaft"}, {"score": 0.015719716506582538, "phrase": "real-time_tasks"}, {"score": 0.0062445615009314205, "phrase": "resource_utilization"}, {"score": 0.006023350308659343, "phrase": "start_time"}, {"score": 0.004581660953729745, "phrase": "significant_role"}, {"score": 0.0045200127552893704, "phrase": "system_reliability"}, {"score": 0.00441909542037375, "phrase": "extensive_fault-tolerant_scheduling_algorithms"}, {"score": 0.004243064277617193, "phrase": "distributed_systems"}, {"score": 0.003947186611084043, "phrase": "fault-tolerant_scheduling_algorithm"}, {"score": 0.003705270889893478, "phrase": "qos"}, {"score": 0.0036553070575015344, "phrase": "heterogeneous_clusters"}, {"score": 0.003557509959237602, "phrase": "system_flexibility"}, {"score": 0.003294350220187021, "phrase": "primary_copies"}, {"score": 0.0030922667860233603, "phrase": "passive_execution_scheme"}, {"score": 0.0030094882299407256, "phrase": "simultaneous_execution_time"}, {"score": 0.0029689311901364797, "phrase": "primary_and_backup_copies"}, {"score": 0.002724428781940696, "phrase": "qos_levels"}, {"score": 0.0026634937939104177, "phrase": "execution_schemes"}, {"score": 0.002603918128553617, "phrase": "high_system_flexibility"}, {"score": 0.002522738549524317, "phrase": "overlapping_technology"}, {"score": 0.0023148964315569866, "phrase": "extensive_experiments"}, {"score": 0.0022224972632835416, "phrase": "dyfars._experimental"}, {"score": 0.0021434588322608653, "phrase": "scheduling_quality"}, {"score": 0.0021241414408077895, "phrase": "noqaft"}, {"score": 0.0021049977753042253, "phrase": "dyfars."}], "paper_keywords": ["Heterogeneous clusters", " real-time", " scheduling", " fault tolerance", " quality of service (QoS)", " heuristic"], "paper_abstract": "Fault-tolerant scheduling plays a significant role in improving system reliability of clusters. Although extensive fault-tolerant scheduling algorithms have been proposed for real-time tasks in parallel and distributed systems, quality of service (QoS) requirements of tasks have not been taken into account. This paper presents a fault-tolerant scheduling algorithm called QAFT that can tolerate one node's permanent failures at one time instant for real-time tasks with QoS needs on heterogeneous clusters. In order to improve system flexibility, reliability, schedulability, and resource utilization, QAFT strives to either advance the start time of primary copies and delay the start time of backup copies in order to help backup copies adopt the passive execution scheme, or to decrease the simultaneous execution time of the primary and backup copies of a task as much as possible to improve resource utilization. QAFT is capable of adaptively adjusting the QoS levels of tasks and the execution schemes of backup copies to attain high system flexibility. Furthermore, we employ the overlapping technology of backup copies. The latest start time of backup copies and their constraints are analyzed and discussed. We conduct extensive experiments to compare our QAFT with two existing schemes-NOQAFT and DYFARS. Experimental results show that QAFT significantly improves the scheduling quality of NOQAFT and DYFARS.", "paper_title": "QoS-Aware Fault-Tolerant Scheduling for Real-Time Tasks on Heterogeneous Clusters", "paper_id": "WOS:000289900300004"}