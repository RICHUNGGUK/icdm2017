{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "openmp_streaming_programs"}, {"score": 0.004301834610818624, "phrase": "dynamic_dependent_tasks"}, {"score": 0.004143196873246147, "phrase": "nested_task_creation"}, {"score": 0.004081385289516914, "phrase": "modular_composition"}, {"score": 0.003785836059995376, "phrase": "first-class_streams"}, {"score": 0.003485304124598714, "phrase": "high-level_parallel_programming_patterns"}, {"score": 0.0033315236647127734, "phrase": "starss'_array_regions"}, {"score": 0.0032571885279065126, "phrase": "universal_low-level_primitives"}, {"score": 0.003066945490483524, "phrase": "dynamic_features"}, {"score": 0.0028661330049356186, "phrase": "unmanaged_imperative_language"}, {"score": 0.002678433668156676, "phrase": "concurrent_garbage_collector"}, {"score": 0.0025795066118838067, "phrase": "performance_advantages"}, {"score": 0.0025219085140220773, "phrase": "data-flow_execution_model"}, {"score": 0.0024287485834314027, "phrase": "barrier_models"}, {"score": 0.0021530945641993152, "phrase": "complex_dependence_patterns"}, {"score": 0.0021049977753042253, "phrase": "starss_benchmarks"}], "paper_keywords": ["Languages", " Design", " Performance", " Stream computing", " parallel programming", " data-flow", " code generation"], "paper_abstract": "We present OpenStream, a data-flow extension of OpenMP to express dynamic dependent tasks. The language supports nested task creation, modular composition, variable and unbounded sets of producers/consumers, and first-class streams. These features, enabled by our original compilation flow, allow translating high-level parallel programming patterns, like dependences arising from StarSs' array regions, or universal low-level primitives like futures. In particular, these dynamic features can be embedded efficiently and naturally into an unmanaged imperative language, avoiding the complexity and overhead of a concurrent garbage collector. We demonstrate the performance advantages of a data-flow execution model compared to more restricted task and barrier models. We also demonstrate the efficiency of our compilation and runtime algorithms for the support of complex dependence patterns arising from StarSs benchmarks.", "paper_title": "OpenStream: Expressiveness and Data-Flow Compilation of OpenMP Streaming Programs", "paper_id": "WOS:000313911800030"}