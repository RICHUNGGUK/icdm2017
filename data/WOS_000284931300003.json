{"auto_keywords": [{"score": 0.04730676553011899, "phrase": "courcelle's_theorem"}, {"score": 0.010612387000973441, "phrase": "monadic_datalog"}, {"score": 0.009823234857253178, "phrase": "finite_structures"}, {"score": 0.009499579342780931, "phrase": "linear_time"}, {"score": 0.007059992923998674, "phrase": "monadic_datalog_program"}, {"score": 0.00479007551581724, "phrase": "finite_structures_of_bounded_treewidth"}, {"score": 0.004765328434610262, "phrase": "bounded_treewidth"}, {"score": 0.0047407085958145806, "phrase": "monadic_second-order"}, {"score": 0.004631476648170177, "phrase": "key_concepts"}, {"score": 0.004595625593103957, "phrase": "fixed-parameter_tractability_results"}, {"score": 0.004374897510348334, "phrase": "mso_sentence"}, {"score": 0.004068711803266216, "phrase": "concrete_algorithms"}, {"score": 0.004026749237490887, "phrase": "mso_evaluation_problem"}, {"score": 0.003995560429492594, "phrase": "tree_language_recognition_problem"}, {"score": 0.003893325145898287, "phrase": "finite_tree_automaton"}, {"score": 0.003725470458263889, "phrase": "even_relatively_simple_mso_formulae"}, {"score": 0.0036774877745633784, "phrase": "\"state_explosion"}, {"score": 0.0036395455241040394, "phrase": "fta."}, {"score": 0.0035189057079817285, "phrase": "intentional_predicate_symbols"}, {"score": 0.003464578003997119, "phrase": "alternative_method"}, {"score": 0.0034110861837481454, "phrase": "fixed-parameter_tractable_problems"}, {"score": 0.0032980053138445347, "phrase": "mso"}, {"score": 0.0031721397716029448, "phrase": "decomposed_structure"}, {"score": 0.003106986855944618, "phrase": "original_structure"}, {"score": 0.0030749123945149753, "phrase": "new_elements"}, {"score": 0.003058999164859981, "phrase": "new_relations"}, {"score": 0.0029883995903577432, "phrase": "first_place"}, {"score": 0.002942238084470189, "phrase": "expressive_power"}, {"score": 0.0028594473715753336, "phrase": "resulting_fragment"}, {"score": 0.00275742870367532, "phrase": "program_size"}, {"score": 0.002714825266745826, "phrase": "data_size"}, {"score": 0.0026590401268765003, "phrase": "mso_query"}, {"score": 0.0026179528443002185, "phrase": "alternative_proof"}, {"score": 0.0025575061994743127, "phrase": "efficient_algorithms"}, {"score": 0.0023968047048385952, "phrase": "corresponding_monadic_datalog_programs"}, {"score": 0.0023720442458682474, "phrase": "efficient_execution"}, {"score": 0.0023536415128806655, "phrase": "new_approach"}, {"score": 0.0023112538304098434, "phrase": "datalog_programs"}, {"score": 0.002257872613823384, "phrase": "primality_problem"}, {"score": 0.002246178186429105, "phrase": "relational_schemas"}, {"score": 0.002188606372069588, "phrase": "relational_schema"}, {"score": 0.0021214605381787337, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "prototype_implementation"}], "paper_keywords": ["Algorithms", " Performance", " Theory", " Datalog", " fixed-parameter tractability", " Monadic second-order logic", " tree decomposition", " treewidth"], "paper_abstract": "Bounded treewidth and monadic second-order (MSO) logic have proved to be key concepts in establishing fixed-parameter tractability results. Indeed, by Courcelle's Theorem we know that any property of finite structures, which is expressible by an MSO sentence, can be decided in linear time (data complexity) if the structures have bounded treewidth. In principle, Courcelle's Theorem can be applied directly to construct concrete algorithms by transforming the MSO evaluation problem into a tree language recognition problem. The latter can then be solved via a finite tree automaton (FTA). However, this approach has turned out to be problematical, since even relatively simple MSO formulae may lead to a \"state explosion\" of the FTA. In this work we propose monadic datalog (i.e., datalog where all intentional predicate symbols are unary) as an alternative method to tackle this class of fixed-parameter tractable problems. We show that if some property of finite structures is expressible in MSO then this property can also be expressed by means of a monadic datalog program over the decomposed structure: we mean by this that the original structure is augmented with new elements and new relations that encode one of its tree decompositions. In the first place, we thus compare the expressive power of two query languages. However, we also show that the resulting fragment of datalog can be evaluated in linear time (both with respect to the program size and with respect to the data size). Hence, our transformation of an MSO query into a monadic datalog program yields an alternative proof of Courcelle's Theorem. In order to actually construct efficient algorithms for problems whose tractability is due to Courcelle's Theorem, we propose to use a fragment of full (i.e., not necessarily monadic) datalog which allows for a succinct representation of the corresponding monadic datalog programs and for an efficient execution. This new approach is put to work by devising datalog programs for the 3-Colorability problem of graphs and for the PRIMALITY problem of relational schemas (i.e., testing if some attribute in a relational schema is part of a key). We also report on experimental results with a prototype implementation.", "paper_title": "Monadic Datalog over Finite Structures of Bounded Treewidth", "paper_id": "WOS:000284931300003"}