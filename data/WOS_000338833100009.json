{"auto_keywords": [{"score": 0.030263558189748477, "phrase": "competitive_ratio"}, {"score": 0.015220669263409313, "phrase": "input_sequence"}, {"score": 0.014843335069010085, "phrase": "scheduling_algorithm"}, {"score": 0.011965321767357229, "phrase": "reordering_buffer"}, {"score": 0.010360480378563986, "phrase": "online_reordering"}, {"score": 0.010286084148669331, "phrase": "minimum_makespan_scheduling"}, {"score": 0.007460337996761285, "phrase": "uniformly_related_machines"}, {"score": 0.00481495049065317, "phrase": "online_minimum_makespan_scheduling."}, {"score": 0.004762893197005439, "phrase": "classic_minimum_makespan_scheduling_problem"}, {"score": 0.0045933810497156705, "phrase": "processing_times"}, {"score": 0.004002242925856335, "phrase": "online_scheduling_algorithms"}, {"score": 0.003831801113154043, "phrase": "arriving_job"}, {"score": 0.0036288825833675127, "phrase": "limited_storage_capacity"}, {"score": 0.0034995881411519925, "phrase": "restricted_fashion"}, {"score": 0.00338715316196893, "phrase": "smaller_makespan"}, {"score": 0.0033262524445013303, "phrase": "natural_extension"}, {"score": 0.003242820629121494, "phrase": "extensive_study"}, {"score": 0.0030933709720820605, "phrase": "main_result"}, {"score": 0.0027341763737751467, "phrase": "achieved_competitive_ratio"}, {"score": 0.002684984491718288, "phrase": "optimal_ratio"}, {"score": 0.0025518930446603335, "phrase": "larger_buffer_sizes"}, {"score": 0.0024968877430444304, "phrase": "additional_advantage"}, {"score": 0.0023051296931856265, "phrase": "different_buffer_sizes"}, {"score": 0.0021049977753042253, "phrase": "best_known_competitive_ratio"}], "paper_keywords": ["online algorithms", " competitive analysis", " minimum makespan scheduling", " reordering"], "paper_abstract": "In the classic minimum makespan scheduling problem, we are given an input sequence of jobs with processing times. A scheduling algorithm has to assign the jobs to m parallel machines. The objective is to minimize the makespan, which is the time it takes until all jobs are processed. In this paper, we consider online scheduling algorithms without preemption. However, we do not require that each arriving job has to be assigned immediately to one of the machines. A reordering buffer with limited storage capacity can be used to reorder the input sequence in a restricted fashion so as to schedule the jobs with a smaller makespan. This is a natural extension of lookahead. We present an extensive study of the power and limits of online reordering for minimum makespan scheduling. As a main result, we give, for m identical machines, tight and, in comparison to the problem without reordering, much improved bounds on the competitive ratio for minimum makespan scheduling with reordering buffers. Depending on m, the achieved competitive ratio lies between 4/3 and 1.4659. This optimal ratio is achieved with a buffer of size T(m). We show that larger buffer sizes do not result in an additional advantage and that a buffer of size O(m) is necessary to achieve this competitive ratio. Further, we present several algorithms for different buffer sizes. For m uniformly related machines, we give a scheduling algorithm that achieves a competitive ratio of 2 with a reordering buffer of size m. Considering that the best known competitive ratio for uniformly related machines without reordering is 5.828, this result further emphasizes the power of online reordering.", "paper_title": "THE POWER OF REORDERING FOR ONLINE MINIMUM MAKESPAN SCHEDULING", "paper_id": "WOS:000338833100009"}