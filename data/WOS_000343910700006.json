{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "identifier_splitting_techniques"}, {"score": 0.0046046429665581555, "phrase": "program_analyses"}, {"score": 0.004502943680955863, "phrase": "software_development"}, {"score": 0.004027031316965272, "phrase": "natural_language_information"}, {"score": 0.0038224221344037236, "phrase": "accurate_natural_language_information"}, {"score": 0.002836942411239067, "phrase": "automatic_splitting"}, {"score": 0.0026726283357752585, "phrase": "empirical_study"}, {"score": 0.0026330549554033876, "phrase": "state-of-the-art_identifier_splitting_techniques"}, {"score": 0.002285075675790214, "phrase": "current_approaches"}, {"score": 0.0021687806803474367, "phrase": "future_development"}, {"score": 0.0021049977753042253, "phrase": "improved_identifier_splitting_approaches"}], "paper_keywords": ["Software engineering tools", " Program comprehension", " Identifier names", " Source code text analysis"], "paper_abstract": "Researchers have shown that program analyses that drive software development and maintenance tools supporting search, traceability and other tasks can benefit from leveraging the natural language information found in identifiers and comments. Accurate natural language information depends on correctly splitting the identifiers into their component words and abbreviations. While conventions such as camel-casing can ease this task, conventions are not well-defined in certain situations and may be modified to improve readability, thus making automatic splitting more challenging. This paper describes an empirical study of state-of-the-art identifier splitting techniques and the construction of a publicly available oracle to evaluate identifier splitting algorithms. In addition to comparing current approaches, the results help to guide future development and evaluation of improved identifier splitting approaches.", "paper_title": "An empirical study of identifier splitting techniques", "paper_id": "WOS:000343910700006"}