{"auto_keywords": [{"score": 0.04383441248529016, "phrase": "event_graph"}, {"score": 0.00481495049065317, "phrase": "data_structures_on_event_graphs"}, {"score": 0.004546970518808189, "phrase": "data_structures"}, {"score": 0.003956379470617348, "phrase": "markov_chains"}, {"score": 0.0037667216301666196, "phrase": "fixed_graph"}, {"score": 0.00347054319869429, "phrase": "type_insert"}, {"score": 0.002827740707723551, "phrase": "limit_behavior"}, {"score": 0.0026920404458807444, "phrase": "efficient_algorithm"}, {"score": 0.0024398167078355224, "phrase": "near-optimal_algorithm"}, {"score": 0.0021049977753042253, "phrase": "random_walk"}], "paper_keywords": ["Successor searching", " Markov Chain", " Low entropy", " Data Structure"], "paper_abstract": "We investigate the behavior of data structures when the input and operations are generated by an event graph. This model is inspired by Markov chains. We are given a fixed graph G, whose nodes are annotated with operations of the type insert, delete, and query. The algorithm responds to the requests as it encounters them during a (random or adversarial) walk in G. We study the limit behavior of such a walk and give an efficient algorithm for recognizing which structures can be generated. We also give a near-optimal algorithm for successor searching if the event graph is a cycle and the walk is adversarial. For a random walk, the algorithm becomes optimal.", "paper_title": "Data Structures on Event Graphs", "paper_id": "WOS:000350873800010"}