{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service_implementation"}, {"score": 0.004469042910390712, "phrase": "supporting_web_service_implementation"}, {"score": 0.004386503433248535, "phrase": "mainstream_programming_languages"}, {"score": 0.004278807087784626, "phrase": "metadata_notations"}, {"score": 0.004199766284749713, "phrase": "new_languages"}, {"score": 0.004096635798793164, "phrase": "former_approach"}, {"score": 0.0038737214010638745, "phrase": "simple_point-to-point_fashion"}, {"score": 0.003528730431045574, "phrase": "extensive_xml_manipulation"}, {"score": 0.0030017207229983385, "phrase": "highly_concurrent_and_dynamic_interactions"}, {"score": 0.0028917056916949744, "phrase": "statically-bounded_concurrency"}, {"score": 0.0027512482368183596, "phrase": "new_web_service_programming_language"}, {"score": 0.002429161048032688, "phrase": "non-trivial_scenarios"}, {"score": 0.0022967713922705, "phrase": "corresponding_bpel_implementations"}, {"score": 0.0022125358787611457, "phrase": "formal_semantics"}, {"score": 0.0021049977753042253, "phrase": "join_calculus"}], "paper_keywords": [""], "paper_abstract": "At present, there is a dichotomy of approaches to supporting web service implementation: extending mainstream programming languages with libraries and metadata notations vs. designing new languages. While the former approach has proven suitable for interconnecting services on a simple point-to-point fashion, it turns to be unsuitable for coding concurrent, multi-party, and interrelated interactions requiring extensive XML manipulation. As a result, various web service programming languages have been proposed, most notably (WS-)BPEL. However, these languages still do not meet the needs of highly concurrent and dynamic interactions due to their bias towards statically-bounded concurrency. In this paper we introduce a new web service programming language with a set of features designed to address this gap. We describe the implementations in this language of non-trivial scenarios of service interaction and contrast them to the corresponding BPEL implementations. We also define a formal semantics for the language by translation to the join calculus. A compiler for the language has been implemented based on this semantics.", "paper_title": "GPSL: A programming language for service implementation", "paper_id": "WOS:000236901100003"}