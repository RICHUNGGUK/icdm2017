{"auto_keywords": [{"score": 0.04810417603515557, "phrase": "saca-k"}, {"score": 0.008054711188516217, "phrase": "input_string"}, {"score": 0.00481495049065317, "phrase": "constant_alphabets"}, {"score": 0.0038801697284045864, "phrase": "suffix_array"}, {"score": 0.0037397086147485897, "phrase": "theoretical_memory_usage"}, {"score": 0.0036617315529835497, "phrase": "n_log"}, {"score": 0.003492155652400838, "phrase": "practical_implementation"}, {"score": 0.003028969851366049, "phrase": "n_bits"}, {"score": 0.00291923164591297, "phrase": "sa-is"}, {"score": 0.0026689487424251907, "phrase": "smaller_deterministic_workspace"}, {"score": 0.002640947693258573, "phrase": "k_words"}, {"score": 0.002339246282204109, "phrase": "linear_time"}, {"score": 0.0021049977753042253, "phrase": "practical_source_code"}], "paper_keywords": ["Algorithms", " Performance", " Suffix array", " sorting algorithm", " linear time", " O(1)-workspace"], "paper_abstract": "This article presents an O(n)-time algorithm called SACA-K for sorting the suffixes of an input string T[0, n-1] over an alphabet A[0, K-1]. The problem of sorting the suffixes of T is also known as constructing the suffix array (SA) for T. The theoretical memory usage of SACA-K is n log K+n log n+K log n bits. Moreover, we also have a practical implementation for SACA-K that uses n bytes +(n + 256) words and is suitable for strings over any alphabet up to full ASCII, where a word is log n bits. In our experiment, SACA-K outperforms SA-IS that was previously the most time-and space-efficient linear-time SA construction algorithm (SACA). SACA-K is around 33% faster and uses a smaller deterministic workspace of K words, where the workspace is the space needed beyond the input string and the output SA. Given K = O(1), SACA-K runs in linear time and O(1) workspace. To the best of our knowledge, such a result is the first reported in the literature with a practical source code publicly available.", "paper_title": "Practical Linear-Time O(1)-Workspace Suffix Sorting for Constant Alphabets", "paper_id": "WOS:000322829900005"}