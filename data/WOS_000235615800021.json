{"auto_keywords": [{"score": 0.02998999927405984, "phrase": "static_debugger"}, {"score": 0.004815168583768755, "phrase": "modular"}, {"score": 0.004539005582217309, "phrase": "plt_scheme"}, {"score": 0.003877737556673229, "phrase": "run-time_system"}, {"score": 0.003445591238183763, "phrase": "specific_module"}, {"score": 0.003021502415143067, "phrase": "set-based_analysis"}, {"score": 0.002962543869356265, "phrase": "fully_modular_parameterized_analysis"}, {"score": 0.00268452026617243, "phrase": "corresponding_predicate"}, {"score": 0.0023079225317714815, "phrase": "potential_errors"}, {"score": 0.002146926767291475, "phrase": "blame_assignment"}, {"score": 0.0021049977753042253, "phrase": "contract_system"}], "paper_keywords": ["languages", " reliability", " verification", " static debugging", " set-based analysis", " modular analysis", " runtime contracts"], "paper_abstract": "In PLT Scheme, programs consist of modules with contracts. The latter describe the inputs and outputs of functions and objects via predicates. A run-time system enforces these predicates; if a predicate fails, the enforcer raises an exception that blames a specific module with an explanation of the fault. In this paper, we show how to use such module contracts to turn set-based analysis into a fully modular parameterized analysis. Using this analysis, a static debugger can indicate for any given contract check whether the corresponding predicate is always satisfied, partially satisfied, or (potentially) completely violated. The static debugger can also predict the source of potential errors, i.e., it is sound with respect to the blame assignment of the contract system.", "paper_title": "Modular set-based analysis from contracts", "paper_id": "WOS:000235615800021"}