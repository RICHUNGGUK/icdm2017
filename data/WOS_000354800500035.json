{"auto_keywords": [{"score": 0.04848464366549706, "phrase": "java"}, {"score": 0.023226184727808172, "phrase": "k-java"}, {"score": 0.0067075945513986705, "phrase": "static_semantics"}, {"score": 0.00471811808206897, "phrase": "complete_semantics"}, {"score": 0.004010102190292041, "phrase": "test_suite"}, {"score": 0.0037984549828326106, "phrase": "test_driven_development_methodology"}, {"score": 0.0035494788628319903, "phrase": "great_size"}, {"score": 0.002975652654536407, "phrase": "preprocessed_java_program"}, {"score": 0.002799388549023265, "phrase": "dynamic_semantics"}, {"score": 0.0027060037347363987, "phrase": "preprocessed_program"}, {"score": 0.0026514708899935333, "phrase": "valid_java_program"}, {"score": 0.0023625233416109917, "phrase": "model-check_multi-threaded_programs"}], "paper_keywords": ["Java", " mechanized semantics", " K framework"], "paper_abstract": "This paper presents K-Java, a complete executable formal semantics of Java 1.4. K-Java was extensively tested with a test suite developed alongside the project, following the Test Driven Development methodology. In order to maintain clarity while handling the great size of Java, the semantics was split into two separate definitions - a static semantics and a dynamic semantics. The output of the static semantics is a preprocessed Java program, which is passed as input to the dynamic semantics for execution. The preprocessed program is a valid Java program, which uses a subset of the features of Java. The semantics is applied to model-check multi-threaded programs. Both the test suite and the static semantics are generic and ready to be used in other Java-related projects.", "paper_title": "K-Java: A Complete Semantics of Java", "paper_id": "WOS:000354800500035"}