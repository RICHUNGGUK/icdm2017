{"auto_keywords": [{"score": 0.05007803266043923, "phrase": "program_dependence_graphs"}, {"score": 0.04923607408107278, "phrase": "ifc"}, {"score": 0.033063111258024226, "phrase": "full_java_bytecode"}, {"score": 0.026626304665952658, "phrase": "flow_equations"}, {"score": 0.004772367030970874, "phrase": "information_flow_control"}, {"score": 0.004565007074039171, "phrase": "secret_data"}, {"score": 0.004524624065803229, "phrase": "public_ports"}, {"score": 0.004444921827311577, "phrase": "critical_computations"}, {"score": 0.0038900709793274484, "phrase": "false_alarms"}, {"score": 0.003737485125097945, "phrase": "modern_program_analysis_technology"}, {"score": 0.003404244237372396, "phrase": "standard_device"}, {"score": 0.003359119985242403, "phrase": "information_flow"}, {"score": 0.0032272929113113203, "phrase": "realistic_programs"}, {"score": 0.0030189426536422577, "phrase": "ifc_implementation"}, {"score": 0.002900426826591769, "phrase": "traditional_approaches"}, {"score": 0.002824005136794786, "phrase": "sequential_and_multi-threaded_programs"}, {"score": 0.0025492038831408715, "phrase": "security_levels"}, {"score": 0.0024820140692811327, "phrase": "ifc."}, {"score": 0.002427372728532664, "phrase": "flow_computation"}, {"score": 0.0021049977753042253, "phrase": "realistic_sequential_programs"}], "paper_keywords": ["Software security", " Noninterference", " Program dependence graph", " Information low control"], "paper_abstract": "Information flow control (IFC) checks whether a program can leak secret data to public ports, or whether critical computations can be influenced from outside. But many IFC analyses are imprecise, as they are flow-insensitive, context-insensitive, or object-insensitive; resulting in false alarms. We argue that IFC must better exploit modern program analysis technology, and present an approach based on program dependence graphs (PDG). PDGs have been developed over the last 20 years as a standard device to represent information flow in a program, and today can handle realistic programs. In particular, our dependence graph generator for full Java bytecode is used as the basis for an IFC implementation which is more precise and needs less annotations than traditional approaches. We explain PDGs for sequential and multi-threaded programs, and explain precision gains due to flow-, context-, and object-sensitivity. We then augment PDGs with a lattice of security levels and introduce the flow equations for IFC. We describe algorithms for flow computation in detail and prove their correctness. We then extend flow equations to handle declassification, and prove that our algorithm respects monotonicity of release. Finally, examples demonstrate that our implementation can check realistic sequential programs in full Java bytecode.", "paper_title": "Flow-sensitive, context-sensitive, and object-sensitive information flow control based on program dependence graphs", "paper_id": "WOS:000271945200002"}