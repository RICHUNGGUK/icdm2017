{"auto_keywords": [{"score": 0.004633429997452688, "phrase": "kissing_problem"}, {"score": 0.004545240514015278, "phrase": "rectangular_room"}, {"score": 0.0038047474331318974, "phrase": "integer_grid"}, {"score": 0.00334144503360907, "phrase": "time_step_t"}, {"score": 0.0029062860108533374, "phrase": "crowded_room"}, {"score": 0.0026395715432958665, "phrase": "comfortable_room"}, {"score": 0.0023972750359328235, "phrase": "sparse_room"}, {"score": 0.0022845800828325555, "phrase": "far_walls"}, {"score": 0.002198242191529977, "phrase": "optimal_solutions"}, {"score": 0.0021771713131746636, "phrase": "small_cases"}, {"score": 0.0021049977753042253, "phrase": "heuristic_state_space_search"}], "paper_keywords": ["Algorithms", " Kissing", " Goodbye", " Block sliding", " Approximation algorithms", " Routing", " Communication"], "paper_abstract": "This paper introduces the kissing problem: given a rectangular room with n people in it, what is the most efficient way for each pair of people to kiss each other goodbye? The room is viewed as a set of pixels that form a subset of the integer grid. At most one person can stand on a pixel at once, and people move horizontally or vertically. In order to move into a pixel in time step t, the pixel must be empty in time step t-1. The paper gives one algorithm for kissing everyone goodbye. (1) This algorithm is a 4+o(1)-approximation algorithm in a crowded room (e.g., only one unoccupied pixel). (2) It is a 45+o(1)-approximation algorithm for kissing in a comfortable room (e.g., at most half the pixels are empty). (3) It is a 25+o(1)-approximation for kissing in a sparse room (more than half the pixels are empty) with two people abutting the far walls of the room. This paper gives optimal solutions for small cases, which were found using a heuristic state space search (IDA*).", "paper_title": "The Kissing Problem: How to End a Gathering When Everyone Kisses Everyone Else Goodbye", "paper_id": "WOS:000334413600010"}