{"auto_keywords": [{"score": 0.04481780851221896, "phrase": "single_machine"}, {"score": 0.015719716506582538, "phrase": "hex_openings"}, {"score": 0.012493012399151585, "phrase": "spdfpn_solver"}, {"score": 0.009456242873007982, "phrase": "adapted_jl-uct_solver"}, {"score": 0.007913832219425565, "phrase": "five_test_cases"}, {"score": 0.004768649568826951, "phrase": "job-level_uct_search."}, {"score": 0.004700028071359844, "phrase": "pawlewicz"}, {"score": 0.004654839183609339, "phrase": "hayward"}, {"score": 0.00450000390667755, "phrase": "scalable_parallel_depth-first_proof-number_search_algorithm"}, {"score": 0.004246428036409373, "phrase": "multiple_threads"}, {"score": 0.00376293585033711, "phrase": "distributed_computing_environment"}, {"score": 0.0036908381347418805, "phrase": "previously_proposed_job-level_upper-confidence_tree_algorithm"}, {"score": 0.003399466007862412, "phrase": "adapted_jl-uct_solver_system"}, {"score": 0.0033182152378613767, "phrase": "new_attempt"}, {"score": 0.003270396852243212, "phrase": "transposition_information_sharing"}, {"score": 0.00320770578058916, "phrase": "jl_implementations"}, {"score": 0.003131023880006021, "phrase": "jl_framework"}, {"score": 0.003056169480391946, "phrase": "shared-memory_and_database_techniques"}, {"score": 0.002579847272930948, "phrase": "adapted_method"}, {"score": 0.0024578987081792405, "phrase": "previous_spdfpn_solver"}], "paper_keywords": [""], "paper_abstract": "Recently, Pawlewicz and Hayward successfully solved many Hex openings based on the Scalable Parallel Depth-First Proof-Number Search algorithm (SPDFPN), which was performed in a single machine with multiple threads. However, further parallelization is limited by the number of cores a single machine can possess. This article investigates adapting this SPDFPN solver to a distributed computing environment, using the previously proposed job-level upper-confidence tree algorithm (JL-UCT) in order to further increase parallelism. To improve on the adapted JL-UCT solver system, we make a new attempt to support transposition information sharing among jobs in JL implementations on top of a JL framework. A mix of shared-memory and database techniques was used to achieve this improvement. Our experiments show that the adapted JL-UCT solver is able to solve positions faster as the number of cores increases. Additionally, using a single machine with 24 cores, the adapted method is able to solve Hex openings with less time than the previous SPDFPN solver in four of five test cases. Overall, for the five test cases, the adapted JL-UCT solver, using 6 nodes each with 24 cores, obtained speedups of 1.6 to 2.6 over those for the SPDFPN solver using one node with 24 cores.", "paper_title": "SOLVING HEX OPENINGS USING JOB-LEVEL UCT SEARCH", "paper_id": "WOS:000374428400003"}