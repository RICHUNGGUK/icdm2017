{"auto_keywords": [{"score": 0.0331473264342555, "phrase": "kernel_code"}, {"score": 0.028810386777994017, "phrase": "os-aware_branch_predictions"}, {"score": 0.00481495049065317, "phrase": "microprocessor_control_flow_prediction"}, {"score": 0.004671156704912419, "phrase": "significant_operating_system"}, {"score": 0.004548848077202625, "phrase": "os_execution"}, {"score": 0.00444655284354007, "phrase": "dynamic_branch_predictions"}, {"score": 0.004330099613414957, "phrase": "today's_high-performance_microprocessor_designs"}, {"score": 0.0037918465913284478, "phrase": "os_effects"}, {"score": 0.003748937184382714, "phrase": "branch_predictions"}, {"score": 0.0037065115435101887, "phrase": "architectural_support"}, {"score": 0.0034618177773967015, "phrase": "control_flow_transfer"}, {"score": 0.0033967510986397946, "phrase": "commercial_os."}, {"score": 0.002929344511491421, "phrase": "separate_branch_correlation_information"}, {"score": 0.002820202660128789, "phrase": "separate_branch_prediction_tables"}, {"score": 0.002798865807872575, "phrase": "user_and_kernel_code"}, {"score": 0.0024411935317269705, "phrase": "os-aware_techniques"}, {"score": 0.002386181960126766, "phrase": "simple_gshare"}, {"score": 0.0023412849215629986, "phrase": "multi-hybrid"}, {"score": 0.002314752607274693, "phrase": "bi-mode"}], "paper_keywords": ["pipeline processors", " branch prediction", " processor architectures", " hardware/software interfaces", " computer system implementation", " performance of systems"], "paper_abstract": "Many modern applications have a significant operating system ( OS) component. The OS execution affects various architectural states, including the dynamic branch predictions, which are widely used in today's high-performance microprocessor designs to improve performance. This impact tends to become more significant as the designs become more deeply pipelined and more speculative. In this paper, we focus on the issues of understanding the OS effects on the branch predictions and designing architectural support to alleviate the bottlenecks that are created by misprediction. In this work, we characterize the control flow transfer of several emerging applications on a commercial OS. It was observed that the exception-driven, intermittent invocation of OS code and user/OS branch history interference increased misprediction in both user and kernel code. We propose two simple OS-aware control flow prediction techniques to alleviate the destructive impact of user/OS branch interference. The first consists of capturing separate branch correlation information for user and kernel code. The second involves using separate branch prediction tables for user and kernel code. We demonstrate in this paper that OS-aware branch predictions require minimal hardware modifications and additions. Moreover, the OS-aware branch predictions can be integrated with many existing schemes to further improve their performance. We studied the improvement contributed by OS-aware techniques to various branch prediction schemes ranging from the simple Gshare to the more advanced Agree, Multi-Hybrid, and Bi-Mode predictors. On the 32K-entry predictors, incorporating the OS-aware techniques yields up to 34 percent, 23 percent, 27 percent, and 9 percent prediction accuracy improvement on the Gshare, Multi-Hybrid, Agree, and Bi-Mode predictors, respectively.", "paper_title": "OS-aware branch prediction: Improving microprocessor control flow prediction for operating systems", "paper_id": "WOS:000242167300001"}