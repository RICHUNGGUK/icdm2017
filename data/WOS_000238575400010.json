{"auto_keywords": [{"score": 0.048646471286469505, "phrase": "software_product_lines"}, {"score": 0.040838917851158764, "phrase": "member_products"}, {"score": 0.04012762854715395, "phrase": "product_line"}, {"score": 0.00481495049065317, "phrase": "feature_dependencies"}, {"score": 0.004614483128885678, "phrase": "product_line_software_engineering"}, {"score": 0.00453113241842654, "phrase": "systematic_approach"}, {"score": 0.004449280529563265, "phrase": "large_scale_software_reuse"}, {"score": 0.0043161190928529755, "phrase": "reusable_assets"}, {"score": 0.004161553532799662, "phrase": "requirements_commonality"}, {"score": 0.004061584718427419, "phrase": "requirements_dependencies"}, {"score": 0.003939980614608312, "phrase": "development_phases"}, {"score": 0.00342568771304873, "phrase": "problem_domain"}, {"score": 0.0032629585038738856, "phrase": "solution_domain"}, {"score": 0.0031269043024513567, "phrase": "requirement_dependencies"}, {"score": 0.0030147970456037274, "phrase": "feature_oriented_approach"}, {"score": 0.0029602552900111407, "phrase": "domain_requirements_dependencies"}, {"score": 0.002735052488172277, "phrase": "directed_graph-based_approach"}, {"score": 0.002636956926079255, "phrase": "domain_requirement_dependencies"}, {"score": 0.0026050445177883005, "phrase": "effective_release"}, {"score": 0.002436289099444074, "phrase": "simple_directed_graph"}, {"score": 0.0023632309822037637, "phrase": "effective_algorithm"}, {"score": 0.0021966859554037174, "phrase": "member_product"}, {"score": 0.0021569129153653777, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "futures_transaction_domain"}], "paper_keywords": [""], "paper_abstract": "Product line software engineering is a systematic approach to realize large scale software reuse. Software product lines deal with reusable assets across a domain by exploring requirements commonality and variability. Requirements dependencies have very strong influence on all development phases of member products in a product line. There are many feature oriented approaches on requirement dependencies. However, most of them are limited to the problem domain. Among those few focusing on the solution domain, they are limited to modeling requirement dependencies. This paper presents a feature oriented approach to managing domain requirements dependencies. Not only is a requirement dependencies model presented, but a directed graph-based approach is also developed to analyze domain requirement dependencies for effective release of member products in a product line. This approach returns a simple directed graph, and uses an effective algorithm to get a set of requirements to be released in a member product. A case study for spot and futures transaction domain is described to illustrate the approach.", "paper_title": "An approach to managing feature dependencies for product releasing in software product lines", "paper_id": "WOS:000238575400010"}