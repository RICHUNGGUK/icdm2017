{"auto_keywords": [{"score": 0.044435149165965256, "phrase": "flow_lattice"}, {"score": 0.029237135610446486, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "flow-sensitive_security_types"}, {"score": 0.0047006879240764935, "phrase": "formal_properties"}, {"score": 0.004589124394375718, "phrase": "semantically_sound_flow-sensitive_type_systems"}, {"score": 0.004458722048888919, "phrase": "simple_while_programs"}, {"score": 0.004030695216899165, "phrase": "program_variables"}, {"score": 0.0035060903664150115, "phrase": "principal_typing"}, {"score": 0.003325410433297401, "phrase": "distinguished_system"}, {"score": 0.003108814986752103, "phrase": "amtoft"}, {"score": 0.0030790429005600898, "phrase": "banerjee's_hoare-style_independence_logic"}, {"score": 0.002677964894127131, "phrase": "better_results"}, {"score": 0.0022956075241520064, "phrase": "equivalent_program"}, {"score": 0.0022302306304023602, "phrase": "simple_flow-insensitive_system"}, {"score": 0.002166711569953301, "phrase": "general_approach"}, {"score": 0.0021049977753042253, "phrase": "proof-carrying-code_setting"}], "paper_keywords": ["languages", " security", " theory", " flow-sensitivity", " information flow", " non-interference", " static analysis", " type systems"], "paper_abstract": "This article investigates formal properties of a family of semantically sound flow-sensitive type systems for tracking information flow in simple While programs. The family is indexed by the choice of flow lattice. By choosing the flow lattice to be the powerset of program variables, we obtain a system which, in a very strong sense, subsumes all other systems in the family (in particular, for each program, it provides a principal typing from which all others may be inferred). This distinguished system is shown to be equivalent to, though more simply described than, Amtoft and Banerjee's Hoare-style independence logic (SAS'04). In general, some lattices are more expressive than others. Despite this, we show that no type system in the family can give better results for a given choice of lattice than the type system for that lattice itself. Finally, for any program typeable in one of these systems, we show how to construct an equivalent program which is typeable in a simple flow-insensitive system. We argue that this general approach could be useful in a proof-carrying-code setting.", "paper_title": "On flow-sensitive security types", "paper_id": "WOS:000235615800009"}