{"auto_keywords": [{"score": 0.03675261033255315, "phrase": "twm"}, {"score": 0.0085640969358878, "phrase": "transactional_memory"}, {"score": 0.00481495049065317, "phrase": "time-warp"}, {"score": 0.0047732596509542135, "phrase": "lightweight_abort_minimization"}, {"score": 0.004550382294884803, "phrase": "tm"}, {"score": 0.004189337956225294, "phrase": "correctness_criterion"}, {"score": 0.003924629168434799, "phrase": "implementation's_efficiency"}, {"score": 0.003806866174028117, "phrase": "overly_conservative_conditions"}, {"score": 0.003644714340300824, "phrase": "sweet_spot"}, {"score": 0.0035199624440843892, "phrase": "time-warp_multi-version_algorithm"}, {"score": 0.0033699898113395328, "phrase": "key_idea"}, {"score": 0.003311799410921826, "phrase": "update_transaction"}, {"score": 0.0032546105164772995, "phrase": "stale_reads"}, {"score": 0.0031431690368229443, "phrase": "concurrently_committed_transactions"}, {"score": 0.002629026692001082, "phrase": "read-only_transactions"}, {"score": 0.002516917671182532, "phrase": "virtual_world_consistency"}, {"score": 0.002357634859801552, "phrase": "tm."}, {"score": 0.002257070536352418, "phrase": "extensive_experimental_study"}, {"score": 0.0021420294823879292, "phrase": "average_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "high_concurrency_scenarios"}], "paper_keywords": ["Software Transactional Memory", " Spurious Abort", " Permissiveness", " Multi-Version"], "paper_abstract": "The notion of permissiveness in Transactional Memory (TM) translates to only aborting a transaction when it cannot be accepted in any history that guarantees correctness criterion. This property is neglected by most TMs, which, in order to maximize implementation's efficiency, resort to aborting transactions under overly conservative conditions. In this paper we seek to identify a sweet spot between permissiveness and efficiency by introducing the Time-Warp Multi-version algorithm (TWM). TWM is based on the key idea of allowing an update transaction that has performed stale reads (i.e., missed the writes of concurrently committed transactions) to be serialized by \"committing it in the past\", which we call a time-warp commit. At its core, TWM uses a novel, lightweight validation mechanism with little computational overheads. TWM also guarantees that read-only transactions can never be aborted. Further, TWM guarantees Virtual World Consistency, a safety property that is deemed as particularly relevant in the context of TM. We demonstrate the practicality of this approach through an extensive experimental study, where we compare TWM with four other TMs, and show an average performance improvement of 65% in high concurrency scenarios.", "paper_title": "Time-Warp: Lightweight Abort Minimization in Transactional Memory", "paper_id": "WOS:000349142100015"}