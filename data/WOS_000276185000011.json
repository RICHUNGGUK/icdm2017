{"auto_keywords": [{"score": 0.04050186340720088, "phrase": "overlay_structure"}, {"score": 0.03744512347738571, "phrase": "scheduling_algorithm"}, {"score": 0.027296431527978646, "phrase": "missing_data"}, {"score": 0.00481495049065317, "phrase": "dynamic_transmission_scheduling_for_streaming_applications"}, {"score": 0.004707479285061122, "phrase": "current_peer-to-peer_streaming_applications"}, {"score": 0.0045200127552893704, "phrase": "timely_stream_services"}, {"score": 0.004459190343665408, "phrase": "end_users"}, {"score": 0.004243064277617193, "phrase": "peer_connections"}, {"score": 0.00418595288276353, "phrase": "efficient_overlay_network"}, {"score": 0.003638823482920949, "phrase": "network_fluctuation"}, {"score": 0.0034780071331554003, "phrase": "stream_data"}, {"score": 0.003415681637907093, "phrase": "fluctuating_networks"}, {"score": 0.003148709618042979, "phrase": "global_latency"}, {"score": 0.0029289191071848403, "phrase": "packet_loss"}, {"score": 0.0028376361457661415, "phrase": "retransmission_requests"}, {"score": 0.002712131567923321, "phrase": "higher_priority"}, {"score": 0.002687702958515561, "phrase": "parent_peers"}, {"score": 0.002522738549524317, "phrase": "loss_impact"}, {"score": 0.002389403849342894, "phrase": "larger_cumulative_impact"}, {"score": 0.0023571835517819124, "phrase": "tree_overlay"}, {"score": 0.002252880693912436, "phrase": "simulation_results"}, {"score": 0.0021727640931660038, "phrase": "negative_impact"}, {"score": 0.0021337783230121286, "phrase": "data_loss"}, {"score": 0.0021049977753042253, "phrase": "dynamic_network_environment"}], "paper_keywords": ["Transmission scheduling", " Peer-to-peer", " Streaming", " Overlay"], "paper_abstract": "In current Peer-to-Peer streaming applications, a lot of research attempts to provide timely stream services to the end users. Most of them focus on how to organize the peer connections into an efficient overlay network. Due to the variation in the network, a lot of overhead is generated when the overlay structure adapts to the changes. In order to minimize the impact of network fluctuation, we proposed a scheduling algorithm which helps to distribute stream data efficiently through the fluctuating networks. It needs only partial information about overlay structure and provides the services to satisfy most number of users. The global latency experienced by peers in the system is thus minimized. To alleviate the problem of packet loss along the overlay, we introduce retransmission requests into our scheduling algorithm. Requests for much needed data are treated with higher priority. Parent peers which receive the request will re-send the missing data to minimize the loss impact. The missing data which are needed by more peers will have a larger cumulative impact through the tree overlay and these are thus scheduled and sent earlier. Simulation results showed that our prioritization and scheduling algorithm minimizes the negative impact of fluctuation and data loss in a dynamic network environment.", "paper_title": "Dynamic Transmission Scheduling for Streaming Applications via P2P Overlay", "paper_id": "WOS:000276185000011"}