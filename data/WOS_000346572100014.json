{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "hybrid_memory_system"}, {"score": 0.0324488978001811, "phrase": "coherence_protocol"}, {"score": 0.00481495049065317, "phrase": "cache_coherence_protocols"}, {"score": 0.004639712384096822, "phrase": "manycore_architectures"}, {"score": 0.004494570360108983, "phrase": "important_amount"}, {"score": 0.004262643556463565, "phrase": "good_way"}, {"score": 0.004064117897000019, "phrase": "local_memory"}, {"score": 0.004000010693331517, "phrase": "cache_hierarchy"}, {"score": 0.0038748022659578865, "phrase": "local_memories"}, {"score": 0.0036359780843400625, "phrase": "coherence_traffic"}, {"score": 0.003522124318486352, "phrase": "poor_programmability"}, {"score": 0.003466536738232506, "phrase": "non-predictable_memory_access_patterns"}, {"score": 0.003036040409062437, "phrase": "hybrid_memory_systems"}, {"score": 0.002833689453299307, "phrase": "memory_aliasing_problems"}, {"score": 0.002805200669359248, "phrase": "coherence"}, {"score": 0.002658863179011018, "phrase": "potentially_incoherent_memory_accesses"}, {"score": 0.002548331088496964, "phrase": "correct_copy"}, {"score": 0.002391067964886602, "phrase": "execution_time"}, {"score": 0.002328434471939886, "phrase": "energy_consumption"}, {"score": 0.002196342933346204, "phrase": "cache-based_systems"}, {"score": 0.0021049977753042253, "phrase": "energy_reduction"}], "paper_keywords": ["Coherence protocol", " local memories", " scratchpad memories", " hybrid memory system"], "paper_abstract": "Cache coherence protocols limit the scalability of multicore and manycore architectures and are responsible for an important amount of the power consumed in the chip. A good way to alleviate these problems is to introduce a local memory alongside the cache hierarchy, forming a hybrid memory system. Local memories are more power-efficient than caches and do not generate coherence traffic, but they suffer from poor programmability. When non-predictable memory access patterns are found, compilers do not succeed in generating code because of the incoherence between the two storages. This paper proposes a coherence protocol for hybrid memory systems that allows the compiler to generate code even in the presence of memory aliasing problems. Coherence is ensured by a software/hardware co-design where the compiler identifies potentially incoherent memory accesses and the hardware diverts them to the correct copy of the data. The coherence protocol introduces overheads of 0.26% in execution time and of 2.03% in energy consumption to enable the usage of the hybrid memory system, which outperforms cache-based systems by an speedup of 38% and an energy reduction of 27%.", "paper_title": "Hardware-Software Coherence Protocol for the Coexistence of Caches and Local Memories", "paper_id": "WOS:000346572100014"}