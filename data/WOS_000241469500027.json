{"auto_keywords": [{"score": 0.04219774029636174, "phrase": "sta"}, {"score": 0.00481495049065317, "phrase": "sta_architecture"}, {"score": 0.004502943680955863, "phrase": "novel_compiler_backend"}, {"score": 0.004354572391793908, "phrase": "assembly_code"}, {"score": 0.004258372598568333, "phrase": "synchronous_transfer_architecture"}, {"score": 0.003601235776892337, "phrase": "non-orthogonal_instruction_set_architecture"}, {"score": 0.003367611042980526, "phrase": "efficient_code"}, {"score": 0.0031845067058084583, "phrase": "highly_optimizing_techniques"}, {"score": 0.0030794433253250476, "phrase": "compiler_backend"}, {"score": 0.002815864555488112, "phrase": "integer_linear_programming"}, {"score": 0.0026626797255348287, "phrase": "experimental_results"}, {"score": 0.0025461386232786356, "phrase": "generated_assembly_code"}, {"score": 0.0023281003994670714, "phrase": "traditional_ways"}, {"score": 0.0022261705957258506, "phrase": "code_generation"}, {"score": 0.0021049977753042253, "phrase": "acceptable_time"}], "paper_keywords": [""], "paper_abstract": "This paper presents a novel compiler backend which generates assembly code for Synchronous Transfer Architecture (STA). STA is a Very Long Instruction Word (VLIW) architecture and in addition it uses a non-orthogonal Instruction Set Architecture (ISA). Generating efficient code for this architecture needs highly optimizing techniques. The compiler backend presented in this paper is based on Integer Linear Programming (ILP). Experimental results show that the generated assembly code consumes much less execution time than the code generated by traditional ways, and the code generation can be accomplished in acceptable time.", "paper_title": "Code generation for STA architecture", "paper_id": "WOS:000241469500027"}