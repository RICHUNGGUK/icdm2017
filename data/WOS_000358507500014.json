{"auto_keywords": [{"score": 0.02647004125740308, "phrase": "rest"}, {"score": 0.00481495049065317, "phrase": "restful_web_applications"}, {"score": 0.004767826806287385, "phrase": "declarative_fault_tolerance"}, {"score": 0.004516733575701128, "phrase": "scalability_advantages"}, {"score": 0.004299910946753963, "phrase": "restful_application"}, {"score": 0.004154332348800334, "phrase": "vast_amounts"}, {"score": 0.003954837422946628, "phrase": "network_volatility"}, {"score": 0.003916098498242888, "phrase": "http_server_errors"}, {"score": 0.003820896867623235, "phrase": "custom_fault_handling_code"}, {"score": 0.0037463983616303786, "phrase": "considerable_programming_expertise"}, {"score": 0.0036553070575015344, "phrase": "implementation_impediments"}, {"score": 0.003566422652043389, "phrase": "restful_applicationswithout_proper_fault_tolerance_functionality"}, {"score": 0.003312486229143855, "phrase": "systematic_and_principled_approach"}, {"score": 0.0032319109979344184, "phrase": "restful_applications"}, {"score": 0.0031532895341013297, "phrase": "ft-restan_architectural_framework"}, {"score": 0.003107034833468438, "phrase": "fault_tolerance_functionality"}, {"score": 0.002986969236641105, "phrase": "platform-specific_code"}, {"score": 0.002928682556953258, "phrase": "fault_tolerance_strategies"}, {"score": 0.002899965889623787, "phrase": "xml-based_specifications"}, {"score": 0.0027741761880779535, "phrase": "requisite_fault_tolerance"}, {"score": 0.0025009555666481316, "phrase": "http"}, {"score": 0.0022665781920241245, "phrase": "conceptual_model"}, {"score": 0.0021789194955896124, "phrase": "reusable_and_extensible_fault_tolerance"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["survivability", " fault tolerance", " web services", " REST", " software reusability"], "paper_abstract": "The popular Representational State Transfer (REST) architectural style for constructing web applications offers simplicity and scalability advantages. However, to improve the survivability of a RESTful application, programmers commonly find themselves writing vast amounts of nontrivial, ad hoc fault tolerance code. Network volatility, HTTP server errors, service outagesall require custom fault handling code, whose effective implementation requires considerable programming expertise and effort. These implementation impediments hinder the survivability of RESTful applicationswithout proper fault tolerance functionality, these applications are likely to crash when experiencing faults. To provide a systematic and principled approach to handling faults in RESTful applications, this article presents FT-RESTan architectural framework for specifying fault tolerance functionality declaratively and then translating these specifications into platform-specific code. FT-REST encapsulates fault tolerance strategies in XML-based specifications and compiles them to modules that reify the requisite fault tolerance. To validate our approach, we have applied FT-REST to enhance several realistic RESTful applications to withstand the faults described in their FT-REST specifications. As REST is said to apply verbs (HTTP commands) to nouns (URIs), FT-REST enhances this conceptual model with adverbs that render REST reliable via reusable and extensible fault tolerance. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Improving the survivability of RESTful Web applications via declarative fault tolerance", "paper_id": "WOS:000358507500014"}