{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data_locality"}, {"score": 0.0075985279656235055, "phrase": "off-chip_memory_accesses"}, {"score": 0.005323156640437381, "phrase": "proposed_approach"}, {"score": 0.004695303774351139, "phrase": "constraint-based_approach"}, {"score": 0.004502433187097914, "phrase": "ever-increasing_datasets"}, {"score": 0.004390517953424082, "phrase": "data-intensive_embedded_applications"}, {"score": 0.0042455945330942746, "phrase": "application_behavior"}, {"score": 0.003838791650587681, "phrase": "data_accesses"}, {"score": 0.00377487157059352, "phrase": "higher_levels"}, {"score": 0.003727628340195049, "phrase": "memory_hierarchy"}, {"score": 0.003634901808509402, "phrase": "compiler-based_code_parallelization_schemes"}, {"score": 0.0035444736871640147, "phrase": "chip_multiprocessors"}, {"score": 0.0035148319209810128, "phrase": "interprocessor_communication"}, {"score": 0.0031645050772280033, "phrase": "multiple_loop_nests"}, {"score": 0.0030089355635315005, "phrase": "inherent_difficulty"}, {"score": 0.0028609920171902186, "phrase": "integrated_approach"}, {"score": 0.002743262400544957, "phrase": "individual_approach"}, {"score": 0.0026193328696791306, "phrase": "constraint_network"}, {"score": 0.002564862727498502, "phrase": "data_locality_optimization"}, {"score": 0.002543392353000551, "phrase": "code_parallelization"}, {"score": 0.0024800509241747013, "phrase": "experimental_evidence"}, {"score": 0.002318728604587962, "phrase": "previously_proposed_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Constraint networks", " Compilers", " Loop transformation", " Data transformation", " Parallelism", " Locality"], "paper_abstract": "Embedded applications are becoming increasingly complex and processing ever-increasing datasets. In the context of data-intensive embedded applications, there have been two complementary approaches to enhancing application behavior, namely, data locality optimizations and improving loop-level parallelism. Data locality needs to be enhanced to maximize the number of data accesses satisfied from the higher levels of the memory hierarchy. On the other hand, compiler-based code parallelization schemes require a fresh look for chip multiprocessors as interprocessor communication is much cheaper than off-chip memory accesses. Therefore, a compiler needs to minimize the number of off-chip memory accesses. This can be achieved by considering multiple loop nests simultaneously. Although compilers address these two problems, there is an inherent difficulty in optimizing both data locality and parallelism simultaneously. Therefore, an integrated approach that combines these two can generate much better results than each individual approach. Based on these observations, this paper proposes a constraint network (CN)-based formulation for data locality optimization and code parallelization. The paper also presents experimental evidence, demonstrating the success of the proposed approach, and compares our results with those obtained through previously proposed approaches. The experiments from our implementation indicate that the proposed approach is very effective in enhancing data locality and parallelization. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Data locality and parallelism optimization using a constraint-based approach", "paper_id": "WOS:000286363900013"}