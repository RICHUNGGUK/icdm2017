{"auto_keywords": [{"score": 0.0494698167146389, "phrase": "snapshot_isolation"}, {"score": 0.03353453147009433, "phrase": "transaction_management_functions"}, {"score": 0.00481495049065317, "phrase": "scalable_transaction_management"}, {"score": 0.004693167092003573, "phrase": "nosql_data_storage_systems"}, {"score": 0.004458722048888919, "phrase": "scalable_transaction_management_mechanisms"}, {"score": 0.004401955895933783, "phrase": "multi-row_transactions"}, {"score": 0.004345909305473054, "phrase": "key-value_storage_systems"}, {"score": 0.004155283263388382, "phrase": "nosql_systems"}, {"score": 0.004050116768809519, "phrase": "scalable_techniques"}, {"score": 0.003998531873723384, "phrase": "transaction_management"}, {"score": 0.003873957223007284, "phrase": "si"}, {"score": 0.0037262941538784094, "phrase": "si_model"}, {"score": 0.003631945391344252, "phrase": "non-serializable_transaction_executions"}, {"score": 0.003298856341173034, "phrase": "system_architectures"}, {"score": 0.0030741085942960814, "phrase": "storage_system"}, {"score": 0.002977061391551628, "phrase": "application-level_processes"}, {"score": 0.0027920359090544107, "phrase": "scale-out_model"}, {"score": 0.0027564303939865476, "phrase": "cloud_computing_platforms"}, {"score": 0.0026865721000905235, "phrase": "first_system_architecture"}, {"score": 0.002568542343945288, "phrase": "fully_decentralized_manner"}, {"score": 0.0025195550121331367, "phrase": "application_processes"}, {"score": 0.0024714996534331668, "phrase": "second_architecture"}, {"score": 0.0023934306706217797, "phrase": "hybrid_approach"}, {"score": 0.0023327506323251074, "phrase": "conflict_detection_functions"}, {"score": 0.002259054486157494, "phrase": "dedicated_service"}, {"score": 0.0021876814398268775, "phrase": "comparative_evaluation"}, {"score": 0.0021049977753042253, "phrase": "tpc-c_benchmark"}], "paper_keywords": ["Transaction management", " scalable services", " cloud data management systems"], "paper_abstract": "We address the problem of building scalable transaction management mechanisms for multi-row transactions on key-value storage systems, which are commonly termed as NoSQL systems. We develop scalable techniques for transaction management utilizing the snapshot isolation (SI) model. Because the SI model can lead to non-serializable transaction executions, we investigate two conflict detection techniques for ensuring serializability. To support scalability, we investigate system architectures and mechanisms in which the transaction management functions are decoupled from the storage system and integrated with the application-level processes. We present two system architectures and demonstrate their scalability under the scale-out model of cloud computing platforms. In the first system architecture all transaction management functions are executed in a fully decentralized manner by the application processes. The second architecture is based on a hybrid approach in which the conflict detection functions are performed by a dedicated service. We perform a comparative evaluation of these architectures using the TPC-C benchmark and demonstrate their scalability.", "paper_title": "Scalable Transaction Management with Snapshot Isolation for NoSQL Data Storage Systems", "paper_id": "WOS:000349630000010"}