{"auto_keywords": [{"score": 0.030998280832097137, "phrase": "multiple_processors"}, {"score": 0.00481495049065317, "phrase": "experience_report"}, {"score": 0.004745056850725867, "phrase": "multicore_processors"}, {"score": 0.004541377162789232, "phrase": "embedded_systems"}, {"score": 0.004221072004655573, "phrase": "uniprocessor_clock_speeds"}, {"score": 0.003981106369547929, "phrase": "increasingly_processor-intensive_embedded_applications"}, {"score": 0.0035153544006182834, "phrase": "operating_systems"}, {"score": 0.0034642599795044445, "phrase": "built-in_multicore_support"}, {"score": 0.0034139056533151, "phrase": "widely_available_embedded_hardware"}, {"score": 0.0032196786163178107, "phrase": "freertos"}, {"score": 0.002863652837038965, "phrase": "working_multicore_version"}, {"score": 0.002565626044684815, "phrase": "full_mutual-exclusion_support"}, {"score": 0.0024915167458844914, "phrase": "concurrent_applications"}, {"score": 0.002419542935774618, "phrase": "mutual_exclusion"}, {"score": 0.0023324855762635616, "phrase": "almost_completely_platform-agnostic_manner"}, {"score": 0.002248553559414903, "phrase": "freertos's_most_attractive_features"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["embedded systems", " operating systems", " multicore computing", " task scheduling", " software-based mutual exclusion", " field-programmable gate arrays"], "paper_abstract": "Multicore processors are ubiquitous. Their use in embedded systems is growing rapidly, and given the constraints on uniprocessor clock speeds, their importance in meeting the demands of increasingly processor-intensive embedded applications cannot be understated. To harness this potential, system designers need to have available to them embedded operating systems with built-in multicore support for widely available embedded hardware. This paper documents our experience of adapting FreeRTOS, a popular embedded real-time operating system, to support multiple processors. A working multicore version of FreeRTOS that is able to schedule tasks on multiple processors as well as provide full mutual-exclusion support for use in concurrent applications is presented. Mutual exclusion is achieved in an almost completely platform-agnostic manner, preserving one of FreeRTOS's most attractive features: portability. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Adapting FreeRTOS for multicores: an experience report", "paper_id": "WOS:000340419100005"}