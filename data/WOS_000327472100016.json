{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bayesian_machine_learning."}, {"score": 0.004760017604908536, "phrase": "bayesian_approach"}, {"score": 0.0047057084749407485, "phrase": "machine_learning"}, {"score": 0.0046253989970108985, "phrase": "computing_posterior_distributions"}, {"score": 0.0045726187330434025, "phrase": "random_variables"}, {"score": 0.004494570360108983, "phrase": "probabilistic_model"}, {"score": 0.004195418010131832, "phrase": "prior_distribution"}, {"score": 0.0037617986040878342, "phrase": "bayesian_models"}, {"score": 0.0037188360359702182, "phrase": "probabilistic_programs"}, {"score": 0.003431481042678356, "phrase": "core_functional_calculus"}, {"score": 0.003334309053314909, "phrase": "prior_distributions"}, {"score": 0.0032028587883593702, "phrase": "measure-transformer_combinators"}, {"score": 0.0031121406603482112, "phrase": "measure_theory"}, {"score": 0.0029722900280316216, "phrase": "rigorous_semantics"}, {"score": 0.0028880836335117297, "phrase": "original_features"}, {"score": 0.0026342827320931937, "phrase": "zero-probability_events"}, {"score": 0.002530359917257626, "phrase": "small_imperative_language"}, {"score": 0.002444544487772349, "phrase": "existing_inference_engine"}, {"score": 0.002416589459425828, "phrase": "factor_graphs"}, {"score": 0.002361632539339945, "phrase": "data_structures"}, {"score": 0.002268441347979241, "phrase": "efficient_approximate_inference"}, {"score": 0.0022424956516376073, "phrase": "posterior_marginal_distributions"}, {"score": 0.002129356014992349, "phrase": "large_instances"}, {"score": 0.0021049977753042253, "phrase": "realistic_models"}], "paper_keywords": ["Probabilistic Programming", " Model-based Machine Learning", " Programming Languages", " Denotational Semantics"], "paper_abstract": "The Bayesian approach to machine learning amounts to computing posterior distributions of random variables from a probabilistic model of how the variables are related (that is, a prior distribution) and a set of observations of variables. There is a trend in machine learning towards expressing Bayesian models as probabilistic programs. As a foundation for this kind of programming, we propose a core functional calculus with primitives for sampling prior distributions and observing variables. We define measure-transformer combinators inspired by theorems in measure theory, and use these to give a rigorous semantics to our core calculus. The original features of our semantics include its support for discrete, continuous, and hybrid measures, and, in particular, for observations of zero-probability events. We compile our core language to a small imperative language that is processed by an existing inference engine for factor graphs, which are data structures that enable many efficient inference algorithms. This allows efficient approximate inference of posterior marginal distributions, treating thousands of observations per second for large instances of realistic models.", "paper_title": "MEASURE TRANSFORMER SEMANTICS FOR BAYESIAN MACHINE LEARNING", "paper_id": "WOS:000327472100016"}