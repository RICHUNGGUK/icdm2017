{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linear_xpath_expressions"}, {"score": 0.004777392826700429, "phrase": "pattern-matching_automata"}, {"score": 0.00459393336391459, "phrase": "large_number"}, {"score": 0.004558091785667046, "phrase": "xpath_expressions"}, {"score": 0.0044002186469797476, "phrase": "subscriber_profiles"}, {"score": 0.004331811712726697, "phrase": "xml_documents"}, {"score": 0.004214637810698362, "phrase": "xml_document_stream"}, {"score": 0.0038969619124903884, "phrase": "new_general_method"}, {"score": 0.003761900996118551, "phrase": "child_operators"}, {"score": 0.0035056109035307716, "phrase": "new_filtering_algorithm"}, {"score": 0.0034375594065869032, "phrase": "backtracking_deterministic_finite_automaton"}, {"score": 0.0033840673522948592, "phrase": "classic_aho-corasick_pattern-matching_automaton"}, {"score": 0.0033053807885373905, "phrase": "size_linear"}, {"score": 0.0031907572162427978, "phrase": "xpath_filters"}, {"score": 0.003141093559655865, "phrase": "worst-case_time"}, {"score": 0.0029500270981001058, "phrase": "linear-size_nondeterministic_automata"}, {"score": 0.0026431267487109543, "phrase": "document-type_definition"}, {"score": 0.0024920359789965783, "phrase": "descendant_operators"}, {"score": 0.0023867554419245004, "phrase": "dtd"}, {"score": 0.002129936623155594, "phrase": "full_generality"}, {"score": 0.0021049977753042253, "phrase": "evaluation_algorithm"}], "paper_keywords": ["filtering of streams of XML documents", " linear XPath expressions"], "paper_abstract": "We consider the problem of efficiently evaluating a large number of XPath expressions, especially in the case when they define subscriber profiles for filtering of XML documents. For each document in an XML document stream, the task is to determine those profiles that match the document. In this article we present a new general method for filtering with profiles expressed by linear XPath expressions with child operators (/), descendant operators (//), and wildcards (*). This new filtering algorithm is based on a backtracking deterministic finite automaton derived from the classic Aho-Corasick pattern-matching automaton. This automaton has a size linear in the sum of the sizes of the XPath filters, and the worst-case time bound of the algorithm is much less than the time bound of the simulation of linear-size nondeterministic automata. Our new algorithm has a predecessor that can handle child and descendant operators but not wildcards, and has been shown to be extremely efficient when a document-type definition (DTD) has been used to prune out all the wildcards and most of the descendant operators. But in some cases, such as when the DTD is highly recursive, it may not be possible to prune out all wildcards without producing a too large set of filters. Then it is important to have the full generality of an evaluation algorithm, as presented in this article, that can also handle wildcards.", "paper_title": "Evaluating Linear XPath Expressions by Pattern-Matching Automata", "paper_id": "WOS:000277568600013"}