{"auto_keywords": [{"score": 0.03378435423300384, "phrase": "application_source_codes"}, {"score": 0.022139160376841962, "phrase": "application_performance"}, {"score": 0.00481495049065317, "phrase": "multicore_systems"}, {"score": 0.004751216062917875, "phrase": "multicore_environment"}, {"score": 0.00378767277402891, "phrase": "multiple_cores"}, {"score": 0.003543273649210823, "phrase": "multithreading_anomalies"}, {"score": 0.003465350958971198, "phrase": "novel_user"}, {"score": 0.003314591878914152, "phrase": "user_space"}, {"score": 0.0031562971707460802, "phrase": "udispatch_application_programming_interface"}, {"score": 0.0031283555130087928, "phrase": "api"}, {"score": 0.002482013330276732, "phrase": "udispatch"}, {"score": 0.002321665383971456, "phrase": "unified_udispatch"}, {"score": 0.0021910825909008946, "phrase": "application_threads"}, {"score": 0.0021716540012278744, "phrase": "specific_cores"}], "paper_keywords": ["multithreading", " multicore", " scheduling", " dispatching", " anomaly"], "paper_abstract": "In multicore environment, multithreading is often used to improve application performance However, even in many simple applications, the performance might degrade when the number of threads increases. Users usually impute this phenomenon to the overhead of creation or termination of threads. In our observation, how the threads are dispatched to the multiple cores might have a more significant effect. We formally defined the problems on using threads as multithreading anomalies, and presented a novel user dispatching mechanism (UDispatch) which provides controllability in user space to improve application performance. Through modification of application source codes with the UDispatch application programming interface (API), the application performance can be improved significantly. However, since the application source codes might not be available or it might be too complicated to modify application source codes, we provided an extension, called UDispatch(+), to dispatch threads without any modification of application source codes. In this paper, the UDispatch and UDispatch+ are integrated and wrapped for more portability and introduced as a tool called Unified UDispatch (UUD) with more detailed experiments and description. It can dispatch the application threads to specific cores at the discretion of users with up to 171.8% performance improvement on a 4-core machine.", "paper_title": "Unified UDispatch: A User Dispatching Tool for Multicore Systems", "paper_id": "WOS:000290744700006"}