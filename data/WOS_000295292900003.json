{"auto_keywords": [{"score": 0.04912868039243805, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "concurrency_model"}, {"score": 0.004757366891541805, "phrase": "real-time_specification"}, {"score": 0.004461634909525319, "phrase": "high_predictability"}, {"score": 0.004390607370861926, "phrase": "region-based_model"}, {"score": 0.00426900754050533, "phrase": "garbage_collection"}, {"score": 0.004134137523409649, "phrase": "unique_type"}, {"score": 0.004003511299646736, "phrase": "non-heap_thread"}, {"score": 0.003908246778916674, "phrase": "real-time_thread"}, {"score": 0.0038614646772981848, "phrase": "single_entity"}, {"score": 0.003739421738326676, "phrase": "serious_impact"}, {"score": 0.003437036036889996, "phrase": "specific_queues"}, {"score": 0.0033822643082593285, "phrase": "new_types"}, {"score": 0.0032621876512517398, "phrase": "priority_inversion"}, {"score": 0.00321019328631004, "phrase": "garbage_collector"}, {"score": 0.0030591147406390986, "phrase": "improved_and_more_generalized_programming_model"}, {"score": 0.0029862549873935496, "phrase": "simple_extension"}, {"score": 0.0029504765287722465, "phrase": "current_threading_model"}, {"score": 0.0028115863316685937, "phrase": "rtsj_concurrency_model"}, {"score": 0.0023653276631862958, "phrase": "current_real-time_virtual_machine"}, {"score": 0.0022721178679337025, "phrase": "accumulated_experience"}, {"score": 0.0022001958412800745, "phrase": "software_prototype"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["real-time Java", " concurrency models", " memory management", " RTSJ"], "paper_abstract": "The current RTSJ (Real-Time Specification for Java) threading model is dualized: a programmer has to decide between the high predictability offered by the region-based model and the flexibility offered by the garbage collection. So far, there is no unique type of thread which offers both the high predictability of a non-heap thread and the flexibility of a real-time thread in a single entity. Furthermore, this lack has a serious impact on the programmer who has to deal with new and sometimes non-trivial to use mechanisms, such as specific queues of objects or new types of threads, in order to avoid the priority inversion caused by the garbage collector. In order to tackle the concern properly and provide an improved and more generalized programming model, the authors propose a simple extension to the current threading model named RealtimeThread++, in an attempt to introduce more flexibility in the RTSJ concurrency model. The paper describes the extension from several points of view: (i) the programmer, identifying scenarios that may benefit from it significantly; (ii) the real-time Java technology perspective, identifying changes required in the current real-time virtual machine to support it; and (iii) the accumulated experience, relating empirical results obtained from a software prototype that supports the extension. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Extending the concurrency model of the real-time specification for Java", "paper_id": "WOS:000295292900003"}