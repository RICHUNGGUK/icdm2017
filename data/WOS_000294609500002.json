{"auto_keywords": [{"score": 0.04931727328027492, "phrase": "dependence_graph"}, {"score": 0.03721642210100261, "phrase": "operator_formulation"}, {"score": 0.00481495049065317, "phrase": "parallel_programming_community"}, {"score": 0.004681653551412616, "phrase": "main_abstraction"}, {"score": 0.004533806239310673, "phrase": "\"regular\"_algorithms"}, {"score": 0.0044795698035664695, "phrase": "dense_arrays"}, {"score": 0.004134137523409649, "phrase": "suitable_abstraction"}, {"score": 0.004068302313449334, "phrase": "new_application_areas"}, {"score": 0.004035777314816881, "phrase": "machine_learning"}, {"score": 0.004003511299646736, "phrase": "network_analysis"}, {"score": 0.003939748053452577, "phrase": "key_data_structures"}, {"score": 0.0038925903520043623, "phrase": "irregular\"_data_structures"}, {"score": 0.0036798490617699227, "phrase": "better_abstractions"}, {"score": 0.003606711217432998, "phrase": "data-centric_formulation"}, {"score": 0.003368707839819003, "phrase": "data_structures"}, {"score": 0.0032491108935498794, "phrase": "structural_analysis"}, {"score": 0.002974281028713475, "phrase": "algorithmic_properties"}, {"score": 0.002868646843975439, "phrase": "generalized_form"}, {"score": 0.002502264043067568, "phrase": "optimistic_parallelization"}, {"score": 0.0024524733595572084, "phrase": "seemingly_unrelated_parallelization_techniques"}, {"score": 0.002384422461262006, "phrase": "special_case"}, {"score": 0.0023653276631862958, "phrase": "irregular_algorithms"}, {"score": 0.0022812715029149216, "phrase": "broader_context"}, {"score": 0.0021219954544970878, "phrase": "systematic_approach"}, {"score": 0.0021049977753042253, "phrase": "parallel_programming"}], "paper_keywords": ["Algorithms", " Languages", " Performance", " amorphous data-parallelism", " Galois system", " irregular programs", " operator formulation", " tao-analysis"], "paper_abstract": "For more than thirty years, the parallel programming community has used the dependence graph as the main abstraction for reasoning about and exploiting parallelism in \"regular\" algorithms that use dense arrays, such as finite-differences and FFTs. In this paper, we argue that the dependence graph is not a suitable abstraction for algorithms in new application areas like machine learning and network analysis in which the key data structures are \"irregular\" data structures like graphs, trees, and sets. To address the need for better abstractions, we introduce a data-centric formulation of algorithms called the operator formulation in which an algorithm is expressed in terms of its action on data structures. This formulation is the basis for a structural analysis of algorithms that we call tao-analysis. Tao-analysis can be viewed as an abstraction of algorithms that distills out algorithmic properties important for parallelization. It reveals that a generalized form of data-parallelism called amorphous data-parallelism is ubiquitous in algorithms, and that, depending on the tao-structure of the algorithm, this parallelism may be exploited by compile-time, inspector-executor or optimistic parallelization, thereby unifying these seemingly unrelated parallelization techniques. Regular algorithms emerge as a special case of irregular algorithms, and many application-specific optimization techniques can be generalized to a broader context. These results suggest that the operator formulation and tao-analysis of algorithms can be the foundation of a systematic approach to parallel programming.", "paper_title": "The Tao of Parallelism in Algorithms", "paper_id": "WOS:000294609500002"}