{"auto_keywords": [{"score": 0.043284735713932605, "phrase": "security_policy"}, {"score": 0.03898048818064748, "phrase": "security_policy_phi"}, {"score": 0.00481495049065317, "phrase": "security_policies"}, {"score": 0.0047113960612140335, "phrase": "concurrent_systems"}, {"score": 0.004413846562278824, "phrase": "formal_and_modular_technique"}, {"score": 0.003831801113154043, "phrase": "concurrent_program_p"}, {"score": 0.0034742854447532678, "phrase": "program_p"}, {"score": 0.002704554429386671, "phrase": "extended_version"}, {"score": 0.0025611773887867255, "phrase": "communicating_process"}, {"score": 0.0023990982005125763, "phrase": "formal_languages"}, {"score": 0.0022967713922705, "phrase": "concurrent_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Execution monitoring", " Security policies", " Language based security", " Concurrent systems", " Process algebra"], "paper_abstract": "This paper introduces a formal and modular technique allowing to automatically enforce a security policy on a given concurrent system. Given a concurrent program P and a security policy phi, we automatically generate another program P' that satisfies phi and behaves like P. except that it stops when P tries to violate the security policy phi. We use extended version of process algebra ACP (Algebra of Communicating Process) and BPA (Basic Process Algebra) as formal languages to specify both concurrent system and security policy. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Formal enforcement of security policies on concurrent systems", "paper_id": "WOS:000293324000002"}