{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "genome_assembly"}, {"score": 0.004539005582217309, "phrase": "genome_size"}, {"score": 0.004315048553208003, "phrase": "large_memory"}, {"score": 0.004171891198117434, "phrase": "great_deal"}, {"score": 0.004102096151528319, "phrase": "sequence_data"}, {"score": 0.0037070855410818986, "phrase": "computing_resources"}, {"score": 0.0035539019235553897, "phrase": "practical_applications"}, {"score": 0.0032387402145603412, "phrase": "update_algorithm"}, {"score": 0.00305285084207725, "phrase": "new_modules"}, {"score": 0.0027819985260847577, "phrase": "peak_memory"}, {"score": 0.0026445028886931837, "phrase": "memory-efficient_dsk"}, {"score": 0.0025783217719240444, "phrase": "k-mers"}, {"score": 0.002535115422089855, "phrase": "revised_bcalm"}, {"score": 0.002471661547432869, "phrase": "de_bruijn_graph"}, {"score": 0.0022906498741695094, "phrase": "contigs_merging"}, {"score": 0.002233301265743633, "phrase": "errors_correction"}], "paper_keywords": [""], "paper_abstract": "Motivation: In genome assembly, as coverage of sequencing and genome size growing, most current softwares require a large memory for handling a great deal of sequence data. However, most researchers usually cannot meet the requirements of computing resources which prevent most current softwares from practical applications. Results: In this article, we present an update algorithm called EPGA2, which applies some new modules and can bring about improved assembly results in small memory. For reducing peak memory in genome assembly, EPGA2 adopts memory-efficient DSK to count K-mers and revised BCALM to construct De Bruijn Graph. Moreover, EPGA2 parallels the step of Contigs Merging and adds Errors Correction in its pipeline. Our experiments demonstrate that all these changes in EPGA2 are more useful for genome assembly.", "paper_title": "EPGA2: memory-efficient de novo assembler", "paper_id": "WOS:000366630400015"}