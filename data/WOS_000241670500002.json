{"auto_keywords": [{"score": 0.03718034097391595, "phrase": "simplex"}, {"score": 0.004556901872357751, "phrase": "automatic_parallelization"}, {"score": 0.004253618550301311, "phrase": "synchronous_program"}, {"score": 0.004053362743156545, "phrase": "vliw_processor"}, {"score": 0.0037834649508375544, "phrase": "large_linear_program"}, {"score": 0.0033651019362620866, "phrase": "scheduling_time"}, {"score": 0.0032065418360603293, "phrase": "large_power"}, {"score": 0.003140888248194296, "phrase": "program_size"}, {"score": 0.0028914057633212045, "phrase": "present_paper"}, {"score": 0.002680114113899346, "phrase": "large_program"}, {"score": 0.0025892330566358503, "phrase": "smaller_units"}, {"score": 0.0023834640793589414, "phrase": "structured_scheduling"}, {"score": 0.0022710523337245337, "phrase": "projection_methods"}, {"score": 0.002224510044064184, "phrase": "linear_programs"}, {"score": 0.0021049977753042253, "phrase": "dependence_graph"}], "paper_keywords": ["structured scheduling", " automatic parallelization", " scalability"], "paper_abstract": "Scheduling a program (i.e. constructing a timetable for the execution of its operations) is one of the most powerful methods for automatic parallelization. A schedule gives a blueprint for constructing a synchronous program, suitable for an ASIC or VLIW processor. However, constructing a schedule entails solving a large linear program. Even if one accepts the (experimental) fact that the Simplex is almost always polynomial, the scheduling time is of the order of a large power of the program size. Hence, the method does not scale well. The present paper proposes two methods for improving the situation. First, a large program can be divided into smaller units (processes), which can be scheduled separately This is structured scheduling. Second, one can use projection methods for solving linear programs incrementally This is specially efficient if the dependence graph is sparse.", "paper_title": "Scalable and structured scheduling", "paper_id": "WOS:000241670500002"}