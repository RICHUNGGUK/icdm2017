{"auto_keywords": [{"score": 0.04745938608113119, "phrase": "mathematica"}, {"score": 0.010612208734341247, "phrase": "computer_algebra_system"}, {"score": 0.005926457057619566, "phrase": "boundary_value_analysis"}, {"score": 0.004761132425263795, "phrase": "test_generation_system"}, {"score": 0.004475659507646842, "phrase": "test_case_generation_system"}, {"score": 0.004400804926266097, "phrase": "test_case_generation"}, {"score": 0.0038668462001710314, "phrase": "built-in_function"}, {"score": 0.0035539019235553897, "phrase": "black-box_testing"}, {"score": 0.0035141291835319682, "phrase": "white-box_testing"}, {"score": 0.003035711716881469, "phrase": "test_cases"}, {"score": 0.002805597755796506, "phrase": "second_procedure"}, {"score": 0.0027123819773059127, "phrase": "first_one"}, {"score": 0.0024097920845706795, "phrase": "white-box_test_case_generation_procedure"}, {"score": 0.0022522565004588113, "phrase": "source_programs"}, {"score": 0.0021773853011112882, "phrase": "control_flow_graph_model"}, {"score": 0.0021408862709571615, "phrase": "proposed_procedure"}, {"score": 0.0021049977753042253, "phrase": "model_description"}], "paper_keywords": ["test case generation", " equivalence partitioning", " boundary value analysis", " white-box testing", " computer algebra system"], "paper_abstract": "We try to use a computer algebra system Mathematica as a test case generation system. In test case generation, we generally need to solve equations and inequalities. The main reason why we take Mathematica is because it has a built-in function to solve equations and inequalities. In this paper, we deal with both black-box testing and white-box testing. First, we show two black-box test case generation procedures described in Mathematica. The first one is based on equivalence partitioning. Mathematica explicitly shows a case that test cases do no exist. This is an advantage in using Mathematica. The second procedure is a modification of the first one adopting boundary value analysis. For implementation of boundary value analysis, we give a formalization for it. Next, we show a white-box test case generation procedure. For this purpose, we also give a model for source programs. It is like a control flow graph model. The proposed procedure analyzes a model description of a program.", "paper_title": "Computer Algebra System as Test Generation System", "paper_id": "WOS:000279136500008"}