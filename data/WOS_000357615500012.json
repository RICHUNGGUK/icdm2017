{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "type_error"}, {"score": 0.009408124836024313, "phrase": "skalpel"}, {"score": 0.00481495049065317, "phrase": "type_error_slicer"}, {"score": 0.004746263721902201, "phrase": "standard_ml._compilers"}, {"score": 0.0046118021635786315, "phrase": "type_inference_algorithms"}, {"score": 0.004546000131069232, "phrase": "confusing_type_error_messages"}, {"score": 0.00441718685609235, "phrase": "single_error_location"}, {"score": 0.0041703614123283165, "phrase": "real_location"}, {"score": 0.0037171648669537287, "phrase": "multiple_program_points"}, {"score": 0.0034343965063429447, "phrase": "tree_fragments"}, {"score": 0.0031959843979467704, "phrase": "user_program"}, {"score": 0.0024311346712789553, "phrase": "significantly_aid"}, {"score": 0.00232832698253493, "phrase": "type_errors"}, {"score": 0.0022298571016688335, "phrase": "sophisticated_new_constraint_generator"}, {"score": 0.0021049977753042253, "phrase": "new_constraint_solver"}], "paper_keywords": ["Automated type inference", " Automated error diagnosis", " Improved error reports"], "paper_abstract": "Compilers for languages with type inference algorithms produce confusing type error messages and give a single error location which is often far away from the real location of the type error. Attempts at solving this problem 1) fail to include the multiple program points which make up the type error, 2) often report tree fragments which do not correspond to any place in the user program, and 3) give incorrect type information/diagnosis which can be highly confusing. We present Skalpel, a type error slicing tool which solves these problems by giving the programmer all and only the information involved with a type error to significantly aid in diagnosis and repair of type errors. Skalpel consists of a sophisticated new constraint generator which is linear in size and a new constraint solver which is terminating.", "paper_title": "Skalpel: A Type Error Slicer for Standard ML", "paper_id": "WOS:000357615500012"}