{"auto_keywords": [{"score": 0.0490746502214577, "phrase": "parallel_job_scheduling"}, {"score": 0.04760688643890386, "phrase": "easy"}, {"score": 0.00481495049065317, "phrase": "guarantee_strict_fairness"}, {"score": 0.004764220976404241, "phrase": "utilize_prediction_better"}, {"score": 0.0038543173961007406, "phrase": "easy."}, {"score": 0.003753498345597498, "phrase": "blocked_job"}, {"score": 0.0036553070575015344, "phrase": "later_jobs"}, {"score": 0.003578600071301459, "phrase": "real_workloads"}, {"score": 0.003466536738232506, "phrase": "runtime_prediction_techniques"}, {"score": 0.0033402088717816446, "phrase": "serious_situation"}, {"score": 0.0031176485976102688, "phrase": "strict_fairness"}, {"score": 0.0029565620771207003, "phrase": "lower_priority"}, {"score": 0.0028944757265206332, "phrase": "attractive_performance"}, {"score": 0.0027889366191837504, "phrase": "reservation_violation"}, {"score": 0.002378408229095287, "phrase": "preemptive_venture_easy_backfilling"}, {"score": 0.0022916428586256723, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "academic_and_industry_perspectives"}], "paper_keywords": ["Checkpoints", " modeling and prediction", " parallel system", " scheduling", " virtualization"], "paper_abstract": "As the most widely used parallel job scheduling strategy, EASY backfilling achieved great success, not only because it can balance fairness and performance, but also because it is universally applicable to most HPC systems. However, unfairness still exists in EASY. Our simulation shows that a blocked job can be delayed by later jobs for more than 90 hours on real workloads. Additionally, directly employing runtime prediction techniques in EASY would lead to a serious situation called reservation violation. In this paper, we aim at guaranteeing strict fairness (no job is delayed by any jobs of lower priority) while achieving attractive performance, and employing prediction without causing reservation violation in parallel job scheduling. We propose two novel strategies, namely, shadow load preemption (SLP) and venture backfilling (VB), which are integrated into EASY to construct preemptive venture EASY backfilling (PV-EASY). Experimental results on three real HPC workloads demonstrate that PV-EASY is more attractive than EASY in parallel job scheduling, from both academic and industry perspectives.", "paper_title": "Guarantee Strict Fairness and Utilize Prediction Better in Parallel Job Scheduling", "paper_id": "WOS:000334672900014"}