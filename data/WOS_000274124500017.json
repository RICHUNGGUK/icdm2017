{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "vliw_architectures"}, {"score": 0.013647272689560465, "phrase": "long_instructions"}, {"score": 0.004741845603430361, "phrase": "instruction_compression_mechanism"}, {"score": 0.00457553517865013, "phrase": "traditional_very_long_instruction_word"}, {"score": 0.004392565073466714, "phrase": "poor_code_density"}, {"score": 0.0043258453436258405, "phrase": "instruction_cache"}, {"score": 0.004216880725292, "phrase": "irregular_lengths"}, {"score": 0.004089725258435817, "phrase": "different_cache_line"}, {"score": 0.0036553070575015344, "phrase": "buffing_mechanism"}, {"score": 0.003563172322934695, "phrase": "split_long_instruction"}, {"score": 0.003509006038574667, "phrase": "continuous_form"}, {"score": 0.0034556603183020437, "phrase": "better_efficiency"}, {"score": 0.0032336801561165113, "phrase": "software_pipeline_technology"}, {"score": 0.0031682817605340028, "phrase": "iterative_instructions"}, {"score": 0.002964706925144123, "phrase": "proposed_mechanism"}, {"score": 0.0029196116767956273, "phrase": "instruction_stream_buffer_stores"}, {"score": 0.0027459678326877744, "phrase": "cache_access"}, {"score": 0.0027041907335656782, "phrase": "access_time"}, {"score": 0.0025694584194998335, "phrase": "instruction_buffer"}, {"score": 0.002530359917257626, "phrase": "split_long_instructions"}, {"score": 0.002392008392892289, "phrase": "simulation_results"}, {"score": 0.002284444272376043, "phrase": "instruction_level"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Instruction stream buffer", " VLIW architecture", " Instruction issue", " Instruction fetcher"], "paper_abstract": "The instruction compression mechanism used to solve the drawbacks of traditional very long instruction word (VLIW) architectures often leads to poor code density in the instruction cache, which causes the irregular lengths of long instructions to cross the different cache line. These split long instructions cannot be fetched simultaneously, which creates a bottleneck for VLIW architectures. This paper proposes a buffing mechanism which can slide the split long instruction as a continuous form to offer better efficiency in instruction fetching. This approach helps maintain the behaviors of the software pipeline technology, which schedules iterative instructions to enhance the performance of streaming processing for VLIW architectures. In the proposed mechanism, the instruction stream buffer stores the repeat block completely and suspends as far as possible the cache access to reduce access time. The advantages of repeatedly issuing instructions in the instruction buffer and preventing split long instructions, can substantially improve the performance in fetching instructions. Simulation results show that the mechanism is efficient at the instruction level for the basic DSP/IMG library by improving performance by 35% on average. (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "A Novel instruction stream buffer for VLIW architectures", "paper_id": "WOS:000274124500017"}