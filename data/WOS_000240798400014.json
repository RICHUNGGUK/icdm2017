{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multi-scale_simulations"}, {"score": 0.03655038749510479, "phrase": "user_intervention"}, {"score": 0.0046928556063004214, "phrase": "computational_tools"}, {"score": 0.00466281645777963, "phrase": "computational_chemistry"}, {"score": 0.004642896759431986, "phrase": "computational_materials_physics"}, {"score": 0.004344755264641137, "phrase": "particular_specialty"}, {"score": 0.004074397977869244, "phrase": "molecular_dynamics"}, {"score": 0.004013764967735904, "phrase": "quantum_mechanical_treatment"}, {"score": 0.003962509631409447, "phrase": "quantum_chemistry"}, {"score": 0.003937126962709418, "phrase": "\"qm\"_region"}, {"score": 0.003895181909029215, "phrase": "surrounding_\"cm\"_region"}, {"score": 0.0037238193456845124, "phrase": "physics_algorithms"}, {"score": 0.0036448787596988423, "phrase": "computational_biology"}, {"score": 0.003598317040926701, "phrase": "pattern_recognition"}, {"score": 0.0034106049390011184, "phrase": "data_files"}, {"score": 0.0033097824808577445, "phrase": "shell_scripts"}, {"score": 0.0031303584902283247, "phrase": "sethna"}, {"score": 0.0030837696681118056, "phrase": "mat"}, {"score": 0.0028607740220327857, "phrase": "python_scripts"}, {"score": 0.0027761600904239398, "phrase": "alternative_approach"}, {"score": 0.0027583557819362034, "phrase": "current_working_packages"}, {"score": 0.0027289346217406357, "phrase": "major_recoding"}, {"score": 0.002665305036900055, "phrase": "different_components"}, {"score": 0.0025809154390630516, "phrase": "potential_user"}, {"score": 0.002564360070426064, "phrase": "general_main_program"}, {"score": 0.0025153268139290635, "phrase": "special_communication_protocol"}, {"score": 0.0024356742694508662, "phrase": "xml_structured_file"}, {"score": 0.0023890957268163228, "phrase": "user_packages_interfacing"}, {"score": 0.0023435352661477196, "phrase": "java"}, {"score": 0.002254624822004988, "phrase": "previously_studied_problem"}, {"score": 0.0022257833099336858, "phrase": "silica_nanorod"}, {"score": 0.002136858299501552, "phrase": "software_system"}, {"score": 0.0021231452870210965, "phrase": "different_kind"}], "paper_keywords": ["multi-scale simulations", " software inter-operation", " QM/MM software"], "paper_abstract": "The state of the art for computational tools in both computational chemistry and computational materials physics includes many algorithms and functionalities which are implemented again and again. Several projects aim to reduce, eliminate, or avoid this problem. Most such efforts seem to be focused within a particular specialty, either quantum chemistry or materials physics. Multi-scale simulations, by their very nature however, cannot respect that specialization. In simulation of fracture, for example, the energy gradients that drive the molecular dynamics (MD) come from a quantum mechanical treatment that most often derives from quantum chemistry. That \"QM\" region is linked to a surrounding \"CM\" region in which potentials yield the forces. The approach therefore requires the integration or at least inter-operation of quantum chemistry and materials physics algorithms. The same problem occurs in \"QM/MM\" simulations in computational biology. The challenge grows if pattern recognition or other analysis codes of some kind must be used as well. The most common mode of inter-operation is user intervention: codes are modified as needed and data files are managed \"by hand\" by the user (interactively and via shell scripts). User intervention is however inefficient by nature, difficult to transfer to the community, and prone to error. Some progress (e.g Sethna's work at Cornell [C.R. Myers et al., Mat. Res. Soc. Symp. Proc., 538(1999) 509, C.-S. Chen et al., Poster presented at the Material Research Society Meeting (2000)]) has been made on using Python scripts to achieve a more efficient level of interoperation. In this communication we present an alternative approach to merging current working packages without the necessity of major recoding and with only a relatively light wrapper interface. The scheme supports communication among the different components required for a given multi-scale calculation and access to the functionalities of those components for the potential user. A general main program allows the management of every package with a special communication protocol between their interfaces following the directives introduced by the user which are stored in an XML structured file. The initial prototype of the PUPIL (Program for User Packages Interfacing and Linking) system has been done using Java as a fast, easy prototyping object oriented (OO) language. In order to test it, we have applied this prototype to a previously studied problem, the fracture of a silica nanorod. We did so joining two different packages to do a QM/MD calculation. The results show the potential for this software system to do different kind of simulations and its simplicity of maintenance.", "paper_title": "Software integration in multi-scale simulations: The PUPIL system", "paper_id": "WOS:000240798400014"}