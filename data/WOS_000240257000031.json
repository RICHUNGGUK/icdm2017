{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "boolean_programs"}, {"score": 0.03353119463701558, "phrase": "boolean_program"}, {"score": 0.003871024872459116, "phrase": "alternative_implementation"}, {"score": 0.003794954883650141, "phrase": "incorrect_statement"}, {"score": 0.0035285548582081627, "phrase": "memoryless_strategy"}, {"score": 0.003368816076401138, "phrase": "stack_contents"}, {"score": 0.0030706395717772436, "phrase": "symbolic_algorithm"}, {"score": 0.003010250522930773, "phrase": "possibly_faulty_statements"}, {"score": 0.0027619548979328154, "phrase": "c_program"}, {"score": 0.0025509294021449254, "phrase": "original_c_program"}, {"score": 0.0024678216843278806, "phrase": "correct_but_incomplete_approach"}, {"score": 0.0024192592458651204, "phrase": "c_programs"}], "paper_keywords": [""], "paper_abstract": "We show how to find and fix faults in Boolean programs by extending the program to a game. In the game, the protagonist can select an alternative implementation for an incorrect statement. If the protagonist can do so successfully using a memoryless strategy that does not depend on the stack contents, we have found a correction for the Boolean program. We present a symbolic algorithm that localizes possibly faulty statements and provides corrections. If the Boolean program is an abstraction of a C program, the repair for the Boolean program suggests a repair for the original C program. This yields a correct but incomplete approach to repairing C programs. We have applied this approach to Boolean programs that are produced as abstractions by SLAM and have thus successfully patched several faulty Windows device drivers.", "paper_title": "Repair of Boolean programs with an application to C", "paper_id": "WOS:000240257000031"}