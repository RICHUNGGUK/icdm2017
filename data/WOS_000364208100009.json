{"auto_keywords": [{"score": 0.03911792952814384, "phrase": "functional_approach"}, {"score": 0.03291935512824042, "phrase": "bpu_memory"}, {"score": 0.00481495049065317, "phrase": "functional_test"}, {"score": 0.0046741260449047976, "phrase": "branch_prediction_units"}, {"score": 0.0045599093158915326, "phrase": "highly_efficient_modules"}, {"score": 0.00442651096522781, "phrase": "negative_impact"}, {"score": 0.004339744430169516, "phrase": "pipelined_processors"}, {"score": 0.004296998284839309, "phrase": "traditional_test_solutions"}, {"score": 0.004150661689086371, "phrase": "testability_techniques"}, {"score": 0.004009288598277725, "phrase": "specific_test_constraints"}, {"score": 0.0038727120021750973, "phrase": "incoming_inspection"}, {"score": 0.003834548373258131, "phrase": "online_test"}, {"score": 0.0036312482387007815, "phrase": "suitable_test_program"}, {"score": 0.0035600143547053287, "phrase": "processor_behavior"}, {"score": 0.0034901729647741353, "phrase": "alternative_solution"}, {"score": 0.0034047882921717913, "phrase": "effective_test_algorithm"}, {"score": 0.0033214855341753544, "phrase": "target_unit"}, {"score": 0.0029637093924781825, "phrase": "suitable_test_programs"}, {"score": 0.002862648127577722, "phrase": "specific_implementation"}, {"score": 0.0028203950416405585, "phrase": "bpu._two_very_common_bpu_architectures"}, {"score": 0.002516457934208144, "phrase": "open-source_computer_architectural_simulator"}, {"score": 0.0024306105794630246, "phrase": "proposed_method"}, {"score": 0.0022563636435096457, "phrase": "corresponding_test_program"}, {"score": 0.0021902063413831545, "phrase": "theoretical_and_experimental_proofs"}, {"score": 0.002157857111130435, "phrase": "memory_and_execution_time_requirements"}, {"score": 0.0021049977753042253, "phrase": "bpu_size"}], "paper_keywords": ["Branch history table (BHT)", " branch prediction unit (BPU)", " embedded memory test", " functional test", " softwarebased self-test (SBST)"], "paper_abstract": "Branch prediction units (BPUs) are highly efficient modules that can significantly decrease the negative impact of branches in pipelined processors. Traditional test solutions, mainly based on Design for Testability techniques, are often inadequate to tackle specific test constraints, such as those found when incoming inspection or online test is considered. Following a functional approach based on running a suitable test program and checking the processor behavior may represent an alternative solution, provided that an effective test algorithm is available for the target unit. In this paper, a functional approach targeting the test of the BPU memory is proposed, which leads to the generation of suitable test programs whose effectiveness is independent of the specific implementation of the BPU. Two very common BPU architectures (branch history table and branch target buffer) are considered. The effectiveness of the approach is validated resorting to an open-source computer architectural simulator. Experimental results show that the proposed method is able to thoroughly test the BPU memory, allowing to transform whichever March algorithm into a corresponding test program; we also provide both theoretical and experimental proofs that the memory and execution time requirements grow linearly with the BPU size.", "paper_title": "On the Functional Test of Branch Prediction Units", "paper_id": "WOS:000364208100009"}