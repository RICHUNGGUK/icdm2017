{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "petri_nets"}, {"score": 0.004630626571109149, "phrase": "semantic_aspect"}, {"score": 0.0035458802311188497, "phrase": "state_transformers"}, {"score": 0.003454687811707182, "phrase": "transition's_activity"}, {"score": 0.0032792555200980783, "phrase": "structural_aspect"}, {"score": 0.002679386232765167, "phrase": "small_nets"}, {"score": 0.002644678812707061, "phrase": "large_ones"}], "paper_keywords": ["concurrency", " Petri nets", " interpretation", " computation and control"], "paper_abstract": "The nets considered here are an extension of Petri nets in two aspects. In the semantic aspect, there is no one firing rule common to all transitions, but every transition is treated as an operator on data stored in its entry places and return results in its exit places. A state (marking) is a mapping of places (variables) into a given data structure, while interpretation is a mapping of transitions into a set of state transformers. Locality of transition's activity is like in Petri nets. In the structural aspect, entry and exit places to a transition are ordered. A concatenation of such nets is defined, hence their calculus (a monoid). This allows for combining small nets into large ones, in particular designing a computation and control parts separately, then putting them together into one. Such extended nets may produce, in particular, other nets. A number of properties of the operation on nets and their decomposition are demonstrated.", "paper_title": "Interpreted nets", "paper_id": "WOS:000250413700003"}