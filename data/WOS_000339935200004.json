{"auto_keywords": [{"score": 0.03276060644713154, "phrase": "theor"}, {"score": 0.00481495049065317, "phrase": "subgraphs_problem"}, {"score": 0.004317848984770719, "phrase": "disjoint_sets"}, {"score": 0.003683097597914604, "phrase": "connected_subgraphs"}, {"score": 0.0036167509502276294, "phrase": "naive_algorithm"}, {"score": 0.0031556799865964974, "phrase": "special_graph_classes"}, {"score": 0.0029610486127874427, "phrase": "paulusma"}, {"score": 0.002525248554951453, "phrase": "general_case"}, {"score": 0.0022537212268979507, "phrase": "non-terminal_vertices"}, {"score": 0.002153450937601075, "phrase": "brute-force_approach"}, {"score": 0.0021049977753042253, "phrase": "polynomial_kernel"}], "paper_keywords": ["Exact algorithms", " 2(n) barrier", " 2-Disjoint Connected Subgraphs", " Kernelization", " Exponential Time Hypothesis"], "paper_abstract": "The 2-Disjoint Connected Subgraphs problem, given a graph along with two disjoint sets of terminals Z (1),Z (2), asks whether it is possible to find disjoint sets A (1),A (2), such that Z (1)aS dagger A (1), Z (2)aS dagger A (2) and A (1),A (2) induce connected subgraphs. While the naive algorithm runs in O(2 (n) n (O(1))) time, solutions with complexity of form O((2-epsilon) (n) ) have been found only for special graph classes (van 't Hof et al. in Theor. Comput. Sci. 410(47-49):4834-4843, 2009; Paulusma and van Rooij in Theor. Comput. Sci. 412(48):6761-6769, 2011). In this paper we present an O(1.933 (n) ) algorithm for 2-Disjoint Connected Subgraphs in general case, thus breaking the 2 (n) barrier. As a counterpoise of this result we show that if we parameterize the problem by the number of non-terminal vertices, it is hard both to speed up the brute-force approach and to find a polynomial kernel.", "paper_title": "Solving the 2-Disjoint Connected Subgraphs Problem Faster than 2 (n)", "paper_id": "WOS:000339935200004"}