{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "performance_potential"}, {"score": 0.004723322467153553, "phrase": "dynamic_instruction_hints_selection"}, {"score": 0.004416079619543104, "phrase": "important_way"}, {"score": 0.00429057323623293, "phrase": "compile-time_information"}, {"score": 0.003750260412839128, "phrase": "post-link_optimizer"}, {"score": 0.003643607569483598, "phrase": "cache_misses"}, {"score": 0.0035399770257915466, "phrase": "branch_prediction"}, {"score": 0.0032777653153451265, "phrase": "different_instruction_hints"}, {"score": 0.0031845067058084583, "phrase": "modern_processor_architectures"}, {"score": 0.0030642636185693054, "phrase": "potential_performance_impact"}, {"score": 0.002677964894127131, "phrase": "profile_feedback"}, {"score": 0.00236289633510808, "phrase": "performance_bottlenecks"}, {"score": 0.002273605493468005, "phrase": "different_micro-architectures"}, {"score": 0.0022302306304023602, "phrase": "significant_performance_opportunities"}, {"score": 0.0021049977753042253, "phrase": "instruction_hints"}], "paper_keywords": [""], "paper_abstract": "Instruction hints have become an important way to communicate compile-time information to the hardware. They can be generated by the compiler and the post-link optimizer to reduce cache misses, improve branch prediction and minimize other performance bottlenecks. This paper discusses different instruction hints available on modern processor architectures and shows the potential performance impact on many benchmark programs. Some hints can be effectively selected at compile time with profile feedback. However, since the same program executable can behave differently on various inputs and performance bottlenecks may change on different micro-architectures, significant performance opportunities can be exploited by selecting instruction hints dynamically.", "paper_title": "A study of the performance potential for dynamic instruction hints selection", "paper_id": "WOS:000241449500006"}