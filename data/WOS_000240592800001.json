{"auto_keywords": [{"score": 0.04976727679397261, "phrase": "unmanaged_code"}, {"score": 0.00481495049065317, "phrase": ".net_security"}, {"score": 0.0040099947738626495, "phrase": "growing_class"}, {"score": 0.00398387063819657, "phrase": "mobile_code"}, {"score": 0.003957938669499551, "phrase": "microsoft"}, {"score": 0.003919299546627271, "phrase": "net_framework"}, {"score": 0.0038056875126935607, "phrase": "machine-independent_byte-code"}, {"score": 0.00374399358035391, "phrase": "virtual_machine"}, {"score": 0.00370745653128409, "phrase": "important_feature"}, {"score": 0.0035882128312414046, "phrase": "native_libraries"}, {"score": 0.0035531906001888204, "phrase": "legacy_code"}, {"score": 0.0034841647157189985, "phrase": "windows_api._such_native_code"}, {"score": 0.0033942044841803105, "phrase": "managed_code"}, {"score": 0.003306559295382181, "phrase": "unmanaged_native_code"}, {"score": 0.0032423089921154503, "phrase": "net_security_model"}, {"score": 0.0030769941082173314, "phrase": "framework's_security_mechanisms"}, {"score": 0.0029779674919563734, "phrase": "sandboxing_mechanism"}, {"score": 0.0028446460307503343, "phrase": "security_policy"}, {"score": 0.0027261830963078706, "phrase": "windows_api"}, {"score": 0.0026297965957221554, "phrase": "unmanaged_parts"}, {"score": 0.0025038150103055823, "phrase": "potentially_unsafe_code"}, {"score": 0.00247935055073462, "phrase": "issue_system"}, {"score": 0.0024311346712789553, "phrase": "net_security_policy"}, {"score": 0.0023682987863242427, "phrase": ".net_runtime"}, {"score": 0.0022401007567642347, "phrase": "generally_acceptable_performance_penalty"}, {"score": 0.002175058780645677, "phrase": "presented_architecture"}, {"score": 0.002139742163351676, "phrase": "first_solution"}, {"score": 0.00210499808879917, "phrase": "net."}], "paper_keywords": [""], "paper_abstract": "The number of applications that are downloaded from the Internet and executed on-the-fly is increasing every day. Unfortunately, not all of these applications are benign, and, often, users are unsuspecting and unaware of the intentions of a program. To facilitate and secure this growing class of mobile code, Microsoft introduced the NET framework, a new development and runtime environment where machine-independent byte-code is executed by a virtual machine. An important feature of this framework is that it allows access to native libraries to support legacy code or to directly invoke the Windows API. Such native code is called unmanaged (as opposed to managed code). Unfortunately, the execution of unmanaged native code is not restricted by the NET security model, and, thus, provides the attacker with a mechanism to completely circumvent the framework's security mechanisms. The approach described in this paper uses a sandboxing mechanism to prevent an attacker from executing malicious, unmanaged code that is not permitted by the security policy. Our sandbox is implemented as two security layers, one on top of the Windows API and one in the kernel. Also, managed and unmanaged parts of an application are automatically separated and executed in two different processes. This ensures that potentially unsafe code can neither issue system calls not permitted by the NET security policy nor tamper with the memory of the .NET runtime. Our proof-of-concept implementation is transparent to applications and secures unmanaged code with a generally acceptable performance penalty. To the best of our knowledge, the presented architecture and implementation is the first solution to secure unmanaged code in NET.", "paper_title": "Extending .NET security to unmanaged code", "paper_id": "WOS:000240592800001"}