{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "asp_programs"}, {"score": 0.004675768396728975, "phrase": "answer-set_programming"}, {"score": 0.004540591176992658, "phrase": "powerful_logic-based_programming_language"}, {"score": 0.004430920292612374, "phrase": "increasing_interest"}, {"score": 0.004366387782457736, "phrase": "scientific_community"}, {"score": 0.0041174821422410544, "phrase": "answer-set_programs"}, {"score": 0.003920891569777894, "phrase": "first_step"}, {"score": 0.003863758357292741, "phrase": "input_program_p"}, {"score": 0.003303617297414837, "phrase": "backtracking_search_algorithm"}, {"score": 0.0032554492909625653, "phrase": "second_step"}, {"score": 0.0030101325901285537, "phrase": "whole_evaluation"}, {"score": 0.0029086869572567072, "phrase": "common_situations"}, {"score": 0.002742648551009682, "phrase": "huge_input_data"}, {"score": 0.002548331088496964, "phrase": "available_instantiator_modules"}, {"score": 0.0024503741901918527, "phrase": "latest_hardware"}, {"score": 0.002344655708000408, "phrase": "parallel_instantiation_techniques"}, {"score": 0.0023104373174118458, "phrase": "load-balancing_and_granularity_control_heuristics"}, {"score": 0.0022434880661725493, "phrase": "effective_exploitation"}, {"score": 0.0022107428653358715, "phrase": "processing_power"}, {"score": 0.0021784745589727246, "phrase": "modern_symmetric_multiprocessing_machines"}, {"score": 0.0021049977753042253, "phrase": "extensive_experimental_analysis"}], "paper_keywords": ["Answer-Set Programming", " Instantiation", " Parallelism", " Heuristics"], "paper_abstract": "Answer-Set Programming (ASP) is a powerful logic-based programming language, which is enjoying increasing interest within the scientific community and (very recently) in industry. The evaluation of Answer-Set Programs is traditionally carried out in two steps. At the first step, an input program P undergoes the so-called instantiation (or grounding) process, which produces a program P' semantically equivalent to P, but not containing any variable; in turn, P' is evaluated by using a backtracking search algorithm in the second step. It is well-known that instantiation is important for the efficiency of the whole evaluation, might become a bottleneck in common situations, is crucial in several real-world applications, and is particularly relevant when huge input data have to be dealt with. At the time of this writing, the available instantiator modules are not able to exploit satisfactorily the latest hardware, featuring multi-core/multi-processor Symmetric MultiProcessing technologies. This paper presents some parallel instantiation techniques, including load-balancing and granularity control heuristics, which allow for the effective exploitation of the processing power offered by modern Symmetric MultiProcessing machines. This is confirmed by an extensive experimental analysis reported herein.", "paper_title": "Parallel instantiation of ASP programs: techniques and experiments", "paper_id": "WOS:000315867300006"}