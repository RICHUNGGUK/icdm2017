{"auto_keywords": [{"score": 0.03363896917055259, "phrase": "batched_scheduling"}, {"score": 0.013120190999494073, "phrase": "tabled_evaluation"}, {"score": 0.00481495049065317, "phrase": "batched_evaluation_of_linear_tabled_logic_programs"}, {"score": 0.0047689174754929195, "phrase": "logic_programming_languages"}, {"score": 0.004678207199854147, "phrase": "prolog"}, {"score": 0.0043738432231020885, "phrase": "good_performance"}, {"score": 0.00433200902751133, "phrase": "prolog_systems"}, {"score": 0.004188702178897384, "phrase": "prolog's_evaluation_strategy_-_sld_resolution_-_limit"}, {"score": 0.003953932197201054, "phrase": "recognized_and_powerful_technique"}, {"score": 0.0038973170902076707, "phrase": "sld's_susceptibility"}, {"score": 0.0037864980290391354, "phrase": "redundant_sub-computations"}, {"score": 0.0035060903664150115, "phrase": "different_tabling_operations"}, {"score": 0.0033094525227603012, "phrase": "scheduling_algorithm"}, {"score": 0.003138874040786261, "phrase": "previous_work"}, {"score": 0.0029627701619228527, "phrase": "yap_prolog_system"}, {"score": 0.002864628676257225, "phrase": "different_linear_tabling_strategies"}, {"score": 0.0024556859778453828, "phrase": "dre"}, {"score": 0.0021771713131746636, "phrase": "dra_and_dre_strategies"}, {"score": 0.002125371638869951, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "batched_evaluation"}], "paper_keywords": ["logic programming", " linear tabling", " scheduling"], "paper_abstract": "Logic Programming languages, such as Prolog, provide a high-level, declarative approach to programming. Despite the power, flexibility and good performance that Prolog systems have achieved, some deficiencies in Prolog's evaluation strategy - SLD resolution - limit the potential of the logic programming paradigm. Tabled evaluation is a recognized and powerful technique that overcomes SLD's susceptibility in dealing with recursion and redundant sub-computations. In a tabled evaluation, there are several points where we may have to choose between different tabling operations. The decision on which operation to perform is determined by the scheduling algorithm. The two most successful tabling scheduling algorithms are local scheduling and batched scheduling. In previous work, we have developed a framework, on top of the Yap Prolog system, that supports the combination of different linear tabling strategies for local scheduling. In this work, we propose the extension of our framework to support batched scheduling. In particular, we are interested in the two most successful linear tabling strategies, the DRA and DRE strategies. To the best of our knowledge, no other Prolog system supports both strategies simultaneously for batched scheduling. Our experimental results show that the combination of the DRA and DRE strategies can effectively reduce the execution time for batched evaluation.", "paper_title": "Batched Evaluation of Linear Tabled Logic Programs", "paper_id": "WOS:000327912000013"}