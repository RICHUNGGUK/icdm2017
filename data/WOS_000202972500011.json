{"auto_keywords": [{"score": 0.039213018550908973, "phrase": "dynamic_proxies"}, {"score": 0.01987711166325795, "phrase": "java"}, {"score": 0.006770303876351112, "phrase": "dynamic_proxy"}, {"score": 0.004765482708043842, "phrase": "proxy_abstraction"}, {"score": 0.004716520738331953, "phrase": "longlasting_tradition"}, {"score": 0.004684157900507474, "phrase": "object_settings"}, {"score": 0.004636027593561925, "phrase": "design_pattern"}, {"score": 0.004604214511792668, "phrase": "inherent_language_support"}, {"score": 0.004558526256513435, "phrase": "current_support"}, {"score": 0.004556901872357751, "phrase": "remote_method_invocations"}, {"score": 0.004525629293824217, "phrase": "simple_forms"}, {"score": 0.004494570360108983, "phrase": "behavioral_reflection_-_incarnations"}, {"score": 0.0036052633308076933, "phrase": "behavioral_reflection"}, {"score": 0.0035804980565263024, "phrase": "structural_conformance"}, {"score": 0.0032398798149196432, "phrase": "class_type"}, {"score": 0.0026893753781434618, "phrase": "generic_criteria"}, {"score": 0.002670884656785558, "phrase": "proxy_implementations"}, {"score": 0.0024333239726872604, "phrase": "generic_scheme"}, {"score": 0.0023917027133236813, "phrase": "field_accesses"}, {"score": 0.002255431275670053, "phrase": "precise_benefits"}, {"score": 0.002126907587540404, "phrase": "uniformly_available_proxies"}, {"score": 0.0021049977753042253, "phrase": "future_method_invocations"}], "paper_keywords": ["experimentation", " languages", " Java", " future", " proxy", " transformation"], "paper_abstract": "The proxy abstraction has a longlasting tradition in object settings. From design pattern to inherent language support, from remote method invocations to simple forms of behavioral reflection - incarnations as well as applications of proxies are innumerable. Since version 1.3, Java supports the concept of dynamic proxy. Such an object conforms to a set of types specified by the program and can be used wherever an expression of any of these types is expected, yet reifies invocations performed on it. Dynamic proxies have been applied to implement paradigms as diverse as behavioral reflection, structural conformance, or multi-methods. Alas, these proxies are only available \"for interfaces\". The case of creating dynamic proxies for a set of types including a class type has not been considered, meaning that it is currently not possible to create a dynamic proxy mimicking an instance of a given class. This weakness strongly limits any application of dynamic proxies. In this paper we unfold the current support for dynamic proxies in Java, assessing it in the light of a set of generic criteria for proxy implementations. We present an approach to supporting dynamic proxies \"for classes\" in Java, consisting in transformations performed on classes at load-time, including a generic scheme for enforcing encapsulation upon field accesses. These transformations seemlessly extend the scope of the current support for dynamic proxies. We discuss the precise benefits and costs of our extension in terms of the criteria introduced, and illustrate the usefulness of uniformly available proxies by implementing future method invocations both safely and transparently.", "paper_title": "Uniform proxies for Java", "paper_id": "WOS:000202972500011"}