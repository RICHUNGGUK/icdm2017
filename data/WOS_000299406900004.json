{"auto_keywords": [{"score": 0.04559365713417928, "phrase": "openmp"}, {"score": 0.044987186634711386, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "boltzmann_equation_simulation"}, {"score": 0.004747997855358171, "phrase": "dynamic_discrete_ordinate_method"}, {"score": 0.004426882270402403, "phrase": "hybrid_programming"}, {"score": 0.004244768287844361, "phrase": "cuda"}, {"score": 0.003768028741967194, "phrase": "parallel_computation_performances"}, {"score": 0.003663857375787215, "phrase": "different_scenarios"}, {"score": 0.003587616378156851, "phrase": "hybrid_parallelism"}, {"score": 0.0033447157263095223, "phrase": "parallel_efficiency"}, {"score": 0.0031182092708983184, "phrase": "load-balancing_technique"}, {"score": 0.0030532878377173885, "phrase": "hybrid_parallelism_model"}, {"score": 0.002948066398723126, "phrase": "gpu_cluster"}, {"score": 0.0028664985822266344, "phrase": "massive_multicore_gpus"}, {"score": 0.0028068030356445894, "phrase": "cuda-accelerated_code"}, {"score": 0.00263505298504827, "phrase": "single_cpu"}, {"score": 0.0024912073108138613, "phrase": "quad-gpu_cluster"}, {"score": 0.002439308179084911, "phrase": "identical_process"}, {"score": 0.002371783323468861, "phrase": "single_thread"}, {"score": 0.0023387408808591974, "phrase": "cpu."}, {"score": 0.0022739766507258105, "phrase": "ddom"}, {"score": 0.002226592967032469, "phrase": "good_scalability"}, {"score": 0.002195552442011313, "phrase": "cpu_and_cpu_clusters"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Hybrid parallelism", " MPI", " OpenMP", " CUDA", " DDOM"], "paper_abstract": "In this paper, a hybrid programming (OpenMP, MPI and CUDA) approach is used to study the performance of a parallelized Dynamic Discrete Ordinate Method (DDOM) solver [1]. The parallel computation performances were compared under different scenarios. A hybrid parallelism of MPI and OpenMP performs well in terms of parallel efficiency (>90%) on a 64 core CPU cluster without using any load-balancing technique. This hybrid parallelism model is extended to a GPU cluster. By using massive multicore GPUs, the CUDA-accelerated code achieves a speed 250 times faster with a single CPU and over 780 times faster with a Quad-GPU cluster versus the identical process running on a single thread of CPU. Our results demonstrate that DDOM solver provides good scalability on CPU and CPU clusters. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Parallel computation for Boltzmann equation simulation with Dynamic Discrete Ordinate Method (DDOM)", "paper_id": "WOS:000299406900004"}