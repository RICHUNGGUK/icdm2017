{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "web_services"}, {"score": 0.02832626361491208, "phrase": "ws_composition"}, {"score": 0.004631527916092452, "phrase": "composition_issue"}, {"score": 0.004377077848734575, "phrase": "veritable_shift"}, {"score": 0.004330941610682453, "phrase": "distributed_computing_history"}, {"score": 0.004255121395629569, "phrase": "service-oriented_architecture"}, {"score": 0.004007083686875716, "phrase": "careful_investigation"}, {"score": 0.0039648318122148555, "phrase": "major_part"}, {"score": 0.003800215925586887, "phrase": "workflow-like_composition_approach"}, {"score": 0.0037073529462522403, "phrase": "exceptional_situations"}, {"score": 0.0036167509502276294, "phrase": "primary_concern"}, {"score": 0.0034421126037849, "phrase": "ws_realm"}, {"score": 0.003334309053314909, "phrase": "high-dependability_level"}, {"score": 0.003287482882222731, "phrase": "significantly_flexibility"}, {"score": 0.0031732652552570644, "phrase": "ws_composition_modeling_approach"}, {"score": 0.0031397776924946526, "phrase": "failures_inevitability"}, {"score": 0.0029253546782349875, "phrase": "ws_architecture_pillars"}, {"score": 0.0026307897899760383, "phrase": "definition_rules"}, {"score": 0.002612238631882345, "phrase": "composability_rules"}, {"score": 0.0024947959375982614, "phrase": "formal_notation"}, {"score": 0.002391067964886602, "phrase": "best_suit"}, {"score": 0.0023491282852109757, "phrase": "continuously_changing_environment"}, {"score": 0.0022835460368487233, "phrase": "higher_level"}, {"score": 0.0022276618873985445, "phrase": "current_solutions"}, {"score": 0.0021654633404434623, "phrase": "required_support"}, {"score": 0.0021425882815624803, "phrase": "higher_flexibility"}, {"score": 0.0021049977753042253, "phrase": "expressiveness_power"}], "paper_keywords": [""], "paper_abstract": "The interest surrounding the Web services (WS) composition issue has been growing tremendously. In the near future, it is awaited to prompt a veritable shift in the distributed computing history, by making the Service-Oriented Architecture (SOA) a reality. Yet, the way ahead is still long. A careful investigation of a major part of the solutions proposed so far reveals that they follow a workflow-like composition approach and that they view failures as exceptional situations that need not to be a primary concern. In this paper, we claim that obeying these assumptions in the WS realm may constrain critically the chances to achieve a high-dependability level and may hamper significantly flexibility. Motivated with these arguments, we propose a WS composition modeling approach that accepts failures inevitability and enriches the composition with concepts that can add flexibility and dependability but that are not part from the WS architecture pillars, namely, the state, the transactional behavior, the vitality degree, and the failure recovery. In addition, we describe a WS composition in terms of definition rules, composability rules, and ordering rules, and we introduce a graphical and a formal notation to ensure that a WS composition is easily and dynamically adaptable to best suit the requirements of a continuously changing environment. Our approach can be seen as a higher level of abstraction of many of the current solutions, since it extends them with the required support to achieve higher flexibility, dependability, and expressiveness power.", "paper_title": "Dependability and flexibility centered approach for composite Web services modeling", "paper_id": "WOS:000243131600011"}