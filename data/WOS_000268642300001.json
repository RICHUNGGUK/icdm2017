{"auto_keywords": [{"score": 0.04793647319920377, "phrase": "gste"}, {"score": 0.011785522473398662, "phrase": "gste."}, {"score": 0.00715236860146636, "phrase": "faithful_semantics"}, {"score": 0.004789105805595663, "phrase": "generalised_symbolic_trajectory"}, {"score": 0.004649408360050023, "phrase": "high-capacity_formal_verification_technique"}, {"score": 0.004538132965602751, "phrase": "symbolic_trajectory_evaluation"}, {"score": 0.004346816400239166, "phrase": "finite_time-intervals"}, {"score": 0.004254191233575912, "phrase": "unbounded_time"}, {"score": 0.004130032407463255, "phrase": "circuit_behaviour"}, {"score": 0.0040747959570067395, "phrase": "circuit_model"}, {"score": 0.004022618344836688, "phrase": "gste_algorithm"}, {"score": 0.003840366634191312, "phrase": "wrong_abstraction"}, {"score": 0.0035232454356808065, "phrase": "yang"}, {"score": 0.003504223554036943, "phrase": "seger"}, {"score": 0.0033927225178030833, "phrase": "proving_power"}, {"score": 0.003005190856405072, "phrase": "specific_property"}, {"score": 0.002786671812199566, "phrase": "current_situation"}, {"score": 0.0024949684851017194, "phrase": "simple_formal_theory"}, {"score": 0.002351214507667704, "phrase": "gste-model_checker"}, {"score": 0.002156742770636165, "phrase": "ste"}, {"score": 0.0021221066364072766, "phrase": "additional_properties"}], "paper_keywords": ["Formal Verification", " Formal Specification", " Model Checking", " Symbolic Simulation", " Generalized Symbolic Trajectory Evaluation", " Semantics"], "paper_abstract": "Generalised Symbolic Trajectory Evaluation (GSTE) is a high-capacity formal verification technique for hardware. GSTE is an extension of Symbolic Trajectory Evaluation (STE). The difference is that STE is limited to properties ranging over finite time-intervals whereas GSTE can deal with properties over unbounded time. GSTE uses abstraction, meaning that details of the circuit behaviour are removed from the circuit model. This improves the capacity of the method, but has as down-side that certain properties cannot be proven if the wrong abstraction is chosen. A semantics for GSTE can be used to predict and understand why certain circuit properties can or cannot be proven by GSTE. Several semantics have been described for GSTE by Yang and Seger. These semantics, however, are not faithful to the proving power of GSTE-algorithms, that is, the GSTE-algorithms are incomplete with respect to the semantics. The reason is that these semantics do not capture the abstraction used in GSTE precisely. The abstraction used in GSTE makes it hard to understand why a specific property can, or cannot, be proven by GSTE. The semantics mentioned above cannot help the user in doing so. So, in the current situation, users of GSTE often have to revert to the GSTE algorithm to understand why a property can or cannot be proven by GSTE. The contribution of this paper is a faithful semantics for GSTE. That is, we give a simple formal theory that deems a property to be true if-and-only-if the property can be proven by a GSTE-model checker. We prove that the GSTE algorithm is sound and complete with respect to this semantics. Furthermore, we show that our semantics for GSTE is a generalisation of the semantics for STE and give a number of additional properties relating the two semantics.", "paper_title": "A FAITHFUL SEMANTICS FOR GENERALISED SYMBOLIC TRAJECTORY EVALUATION", "paper_id": "WOS:000268642300001"}