{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "flint"}, {"score": 0.007010459304588456, "phrase": "concurrent_data_structures"}, {"score": 0.005044186425660819, "phrase": "composed_operation"}, {"score": 0.004750178261675602, "phrase": "linearizability_violations"}, {"score": 0.00468627326602559, "phrase": "concurrent_software"}, {"score": 0.004499647408293102, "phrase": "grand_challenge"}, {"score": 0.004243064277617193, "phrase": "standard_library"}, {"score": 0.004204904449336037, "phrase": "popular_languages"}, {"score": 0.00416713231992677, "phrase": "java"}, {"score": 0.003688497722149817, "phrase": "recent_studies"}, {"score": 0.0036060781902674207, "phrase": "composed_concurrent_operations"}, {"score": 0.0034780071331554003, "phrase": "nonlinearizable_composed_operations"}, {"score": 0.003235305151177897, "phrase": "composed_map_operations"}, {"score": 0.0030922667860233603, "phrase": "atomicity_violations"}, {"score": 0.0028764048059439205, "phrase": "original_operation"}, {"score": 0.0028505007899807446, "phrase": "sequential_runs"}, {"score": 0.002675571068567923, "phrase": "first_general_algorithm"}, {"score": 0.002639502113350897, "phrase": "incorrect_concurrent_compositions"}, {"score": 0.002500011855174494, "phrase": "tomcat"}, {"score": 0.0022631003204259224, "phrase": "fixed_version"}, {"score": 0.002162951519368368, "phrase": "expert_programmer"}, {"score": 0.0021049977753042253, "phrase": "original_code"}], "paper_keywords": ["Atomic compositions", " linearizability violations", " concurrency bug fixing"], "paper_abstract": "Writing concurrent software while achieving both correctness and efficiency is a grand challenge. To facilitate this task, concurrent data structures have been introduced into the standard library of popular languages like Java and C#. Unfortunately, while the operations exposed by concurrent data structures are atomic (or linearizable), compositions of these operations are not necessarily atomic. Recent studies have found many erroneous implementations of composed concurrent operations. We address the problem of fixing nonlinearizable composed operations such that they behave atomically. We introduce Flint, an automated fixing algorithm for composed Map operations. Flint accepts as input a composed operation suffering from atomicity violations. Its output, if fixing succeeds, is a composed operation that behaves equivalently to the original operation in sequential runs and is guaranteed to be atomic. To our knowledge, Flint is the first general algorithm for fixing incorrect concurrent compositions. We have evaluated Flint on 48 incorrect compositions from 27 popular applications, including Tomcat and My-Faces. The results are highly encouraging: Flint is able to correct 96% of the methods, and the fixed version is often the same as the fix by an expert programmer and as efficient as the original code.", "paper_title": "Flint: Fixing Linearizability Violations", "paper_id": "WOS:000348907400031"}