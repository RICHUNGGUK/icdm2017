{"auto_keywords": [{"score": 0.010723910176935948, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "parallel_knock-out_problem"}, {"score": 0.004668510065740584, "phrase": "computational_complexity_questions"}, {"score": 0.00456159659731398, "phrase": "parallel_knock-out_schemes"}, {"score": 0.00415777266387528, "phrase": "remaining_vertex"}, {"score": 0.002981885091155911, "phrase": "fixed_positive_integers"}, {"score": 0.002345944657572499, "phrase": "bounded_tree-width"}, {"score": 0.0021049977753042253, "phrase": "polynomial_time"}], "paper_keywords": ["parallel knock-out", " graphs", " computational complexity"], "paper_abstract": "We consider computational complexity questions related to parallel knock-out schemes for graphs. In such schemes, in each round, each remaining vertex of a given graph eliminates exactly one of its neighbours. We show that the problem of whether, for a given graph, such a scheme can be found that eliminates every vertex is NP-complete. Moreover, we show that, for all fixed positive integers k >= 2, the problem of whether a given graph admits a scheme in which all vertices are eliminated in at most k rounds is NP-complete. For graphs with bounded tree-width, however, both of these problems are shown to be solvable in polynomial time.", "paper_title": "The computational complexity of the parallel knock-out problem", "paper_id": "WOS:000236886100026"}