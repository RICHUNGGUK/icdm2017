{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "degradation-based_mechanism"}, {"score": 0.0435790868041128, "phrase": "trustworthy_software"}, {"score": 0.004761494044422926, "phrase": "adaptive_overload_control"}, {"score": 0.00470862827326028, "phrase": "uncontrolled_overload"}, {"score": 0.004579005794486596, "phrase": "major_causes"}, {"score": 0.004502943680955863, "phrase": "system's_decline"}, {"score": 0.004354572391793908, "phrase": "web_applications"}, {"score": 0.0039822874870125095, "phrase": "adaptively_control_overload"}, {"score": 0.003724034990158436, "phrase": "application's_performance"}, {"score": 0.003541357671562449, "phrase": "resource_utilization_state"}, {"score": 0.0030451958332949735, "phrase": "proper_degradation_plans"}, {"score": 0.0028795712616923462, "phrase": "critical_resources"}, {"score": 0.002815864555488112, "phrase": "low_priority"}, {"score": 0.0027382040767844093, "phrase": "business_logic"}, {"score": 0.0026330549554033876, "phrase": "key_services"}, {"score": 0.00244834685428352, "phrase": "case_study"}, {"score": 0.0024075916292945715, "phrase": "wiki_application"}, {"score": 0.002276566401216226, "phrase": "simulated_overload_cases"}, {"score": 0.0022386642196006567, "phrase": "handling_overload"}], "paper_keywords": ["overload", " service degradation", " resource monitoring", " performance management"], "paper_abstract": "Uncontrolled overload is one of the major causes of the system's decline in reliability and performance for web applications. It also harms the construction of trustworthy software. This paper presents a degradation-based mechanism to adaptively control overload in complex, dynamic web applications. In our mechanism, the bottlenecks in the application's performance are determined by internally monitoring the performance and resource utilization state of the application, which is decomposed into a set of services. After locating the bottlenecks, two decision algorithms are proposed to dynamically and adaptively generate proper degradation plans without delay. By degrading the service which consumes critical resources and has a low priority from the perspective of business logic, the application can keep providing key services even when overload occurs. We implement a prototype and conduct a case study on a wiki application. We also evaluate our approach and demonstrate its effectiveness in simulated overload cases. Through handling overload, we make a breakthrough in building trustworthy software in an open, dynamic and rapidly changing environment.", "paper_title": "Towards a degradation-based mechanism for adaptive overload control", "paper_id": "WOS:000312884300004"}