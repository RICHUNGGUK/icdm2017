{"auto_keywords": [{"score": 0.03992659287798474, "phrase": "gpl_code"}, {"score": 0.03630594953028295, "phrase": "dedicated_parsers"}, {"score": 0.00481495049065317, "phrase": "source_code"}, {"score": 0.004777214679969785, "phrase": "software_modernization"}, {"score": 0.004739773204474094, "phrase": "model-driven_software_modernization"}, {"score": 0.004503422625191897, "phrase": "legacy_systems"}, {"score": 0.004450568197899267, "phrase": "existing_software_artifacts"}, {"score": 0.0042452552248398445, "phrase": "mdd_techniques"}, {"score": 0.004195418010131832, "phrase": "model_transformations"}, {"score": 0.003954837422946628, "phrase": "general-purpose_programming_languages"}, {"score": 0.003757480190200645, "phrase": "essential_task"}, {"score": 0.0037133478610481994, "phrase": "model-based_modernization_process"}, {"score": 0.003555902292752528, "phrase": "grammarware_and_mdd_technical_spaces"}, {"score": 0.0034185505275141077, "phrase": "grammar-to-model_transformation_language"}, {"score": 0.003338690782620756, "phrase": "domain-specific_language"}, {"score": 0.0031100973266506163, "phrase": "text-to-model_transformation_language"}, {"score": 0.002851790448644913, "phrase": "grammarware-mdd_bridges"}, {"score": 0.0027741761880779535, "phrase": "complex_and_time-consuming_task"}, {"score": 0.0027415717808831194, "phrase": "atl"}, {"score": 0.0027200305495826797, "phrase": "rubytl"}, {"score": 0.002656445226355143, "phrase": "binding_concept"}, {"score": 0.002594342451017822, "phrase": "grammar_elements"}, {"score": 0.002573965014439041, "phrase": "metamodel_elements"}, {"score": 0.0025436978068459565, "phrase": "simple_declarative_style"}, {"score": 0.002474447780553576, "phrase": "powerful_query_language"}, {"score": 0.00241658945942583, "phrase": "scattered_information"}, {"score": 0.0023976048394496446, "phrase": "syntax_trees"}, {"score": 0.002323142666222693, "phrase": "grammar_reuse_mechanisms"}, {"score": 0.002224510044064184, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "delphi_code"}], "paper_keywords": ["Model-driven engineering", " Model-driven software development", " Domain-specific languages", " Software modernization", " Model-driven software modernization"], "paper_abstract": "Model-driven software modernization is a discipline in which model-driven development (MDD) techniques are used in the modernization of legacy systems. When existing software artifacts are evolved, they must be transformed into models to apply MDD techniques such as model transformations. Since most modernization scenarios (e.g., application migration) involve dealing with code in general-purpose programming languages (GPL), the extraction of models from GPL code is an essential task in a model-based modernization process. This activity could be performed by tools to bridge grammarware and MDD technical spaces, which is normally carried out by dedicated parsers. Grammar-to-Model Transformation Language (Gra2MoL) is a domain-specific language (DSL) tailored to the extraction of models from GPL code. This DSL is actually a text-to-model transformation language which can be applied to any code conforming to a grammar. Gra2MoL aims to reduce the effort needed to implement grammarware-MDD bridges, since building dedicated parsers is a complex and time-consuming task. Like ATL and RubyTL languages, Gra2MoL incorporates the binding concept needed to write mappings between grammar elements and metamodel elements in a simple declarative style. The language also provides a powerful query language which eases the retrieval of scattered information in syntax trees. Moreover, it incorporates extensibility and grammar reuse mechanisms. This paper describes Gra2MoL in detail and includes a case study based on the application of the language in the extraction of models from Delphi code.", "paper_title": "Extracting models from source code in software modernization", "paper_id": "WOS:000335236300013"}