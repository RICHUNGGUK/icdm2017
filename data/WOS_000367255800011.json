{"auto_keywords": [{"score": 0.004816829964988712, "phrase": "algebras"}, {"score": 0.004778644889373673, "phrase": "coalgebras"}, {"score": 0.0047090988991301905, "phrase": "algebra"}, {"score": 0.004583464412234181, "phrase": "model_data_types"}, {"score": 0.004548848077202625, "phrase": "functional_programming_languages"}, {"score": 0.004514491994233911, "phrase": "proof_assistants"}, {"score": 0.004168986485488861, "phrase": "proof_system"}, {"score": 0.004106225442735525, "phrase": "parametric_polymorphism_a_la_system_f"}, {"score": 0.003953409087444568, "phrase": "strongly_normalizing_languages"}, {"score": 0.0038938807148174975, "phrase": "good_logical_properties"}, {"score": 0.003501452436803395, "phrase": "system_f"}, {"score": 0.0032578629307203097, "phrase": "better_understanding"}, {"score": 0.0031966173935538992, "phrase": "implicit_computational_complexity_systems"}, {"score": 0.002985484575498061, "phrase": "complexity_class"}, {"score": 0.0029182434479165884, "phrase": "computational_complexity"}, {"score": 0.002788257824525862, "phrase": "parametric_polymorphism"}, {"score": 0.0025165151708122957, "phrase": "standard_system_f_encodings"}, {"score": 0.002368120987066921, "phrase": "algebra_encoding_one"}, {"score": 0.0023235629819760018, "phrase": "light_affine_lambda_calculus"}, {"score": 0.002305974875400655, "phrase": "traditional_inductive_types"}, {"score": 0.0022625835448873495, "phrase": "corresponding_coalgebra_encoding"}, {"score": 0.0021049977753042253, "phrase": "distributive_laws"}], "paper_keywords": ["implicit computational complexity", " algebra and coalgebra", " light logics"], "paper_abstract": "Algebra and coalgebra are widely used to model data types in functional programming languages and proof assistants. Their use permits to better structure the computations and also to enhance the expressivity of a language or of a proof system. Interestingly, parametric polymorphism a la System F provides a way to encode algebras and coalgebras in strongly normalizing languages without losing the good logical properties of the calculus. Even if these encodings are sometimes unsatisfying because they provide only limited forms of algebras and coalgebras, they give insights on the expressivity of System F in terms of functions that we can program in it. With the goal of contributing to a better understanding of the expressivity of Implicit Computational Complexity systems, we study the problem of defining algebras and coalgebras in the Light Affine Lambda Calculus, a system characterizing the complexity class FPTIME. This system limits the computational complexity of programs but it also limits the ways we can use parametric polymorphism, and in general the way we can write our programs. We show here that while the restrictions imposed by the Light Affine Lambda Calculus pose some issues to the standard System F encodings, they still permit to encode some form of algebra and coalgebra. Using the algebra encoding one can define in the Light Affine Lambda Calculus the traditional inductive types. Unfortunately, the corresponding coalgebra encoding permits only a very limited form of coinductive data types. To extend this class we study an extension of the Light Affine Lambda Calculus by distributive laws for the modality . This extension has been discussed but not studied before.", "paper_title": "Algebras and Coalgebras in the Light Affine Lambda Calculus", "paper_id": "WOS:000367255800011"}