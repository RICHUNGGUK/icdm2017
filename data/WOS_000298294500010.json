{"auto_keywords": [{"score": 0.027820611961401606, "phrase": "lptl"}, {"score": 0.00481495049065317, "phrase": "integrated_language_definition_testing_enabling_test-driven_language_development"}, {"score": 0.004506968388996092, "phrase": "development_environments"}, {"score": 0.004447766706144458, "phrase": "programming_languages"}, {"score": 0.004331675965350876, "phrase": "effective_software_development"}, {"score": 0.003896717568943166, "phrase": "smaller_scope"}, {"score": 0.003794954883650141, "phrase": "domain-specific_languages"}, {"score": 0.0036472537997966938, "phrase": "general-purpose_testing_techniques"}, {"score": 0.0035993041437026225, "phrase": "test_case_generation_methods"}, {"score": 0.003459191419478298, "phrase": "low-threshold_solution"}, {"score": 0.003413705707789296, "phrase": "test-driven_language_development"}, {"score": 0.0031739835218110015, "phrase": "language-parametric_testing_language"}, {"score": 0.002951045605925464, "phrase": "language_definition_tests"}, {"score": 0.0027619548979328154, "phrase": "editor_services"}, {"score": 0.0025678829712650437, "phrase": "test_inputs"}, {"score": 0.0023716501597131024, "phrase": "tool_support"}, {"score": 0.002279217896185919, "phrase": "use_cases"}, {"score": 0.0021049977753042253, "phrase": "spoofax_testing_language"}], "paper_keywords": ["Languages", " Reliability", " Testing", " Test-Driven Development", " Language Engineering", " Grammarware", " Language Workbench", " Domain-Specific Language", " Language Embedding", " Compilers", " Parsers"], "paper_abstract": "The reliability of compilers, interpreters, and development environments for programming languages is essential for effective software development and maintenance. They are often tested only as an afterthought. Languages with a smaller scope, such as domain-specific languages, often remain untested. General-purpose testing techniques and test case generation methods fall short in providing a low-threshold solution for test-driven language development. In this paper we introduce the notion of a language-parametric testing language (LPTL) that provides a reusable, generic basis for declaratively specifying language definition tests. We integrate the syntax, semantics, and editor services of a language under test into the LPTL for writing test inputs. This paper describes the design of an LPTL and the tool support provided for it, shows use cases using examples, and describes our implementation in the form of the Spoofax testing language.", "paper_title": "Integrated Language Definition Testing Enabling Test-Driven Language Development", "paper_id": "WOS:000298294500010"}