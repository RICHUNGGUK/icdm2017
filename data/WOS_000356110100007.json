{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "sqa-mashup"}, {"score": 0.03598871877647394, "phrase": "data_integration"}, {"score": 0.004726382602809228, "phrase": "continuous_integration"}, {"score": 0.004554082077300675, "phrase": "established_best_practice"}, {"score": 0.004525979481628125, "phrase": "modern_software_development"}, {"score": 0.004401639026078196, "phrase": "individual_developers"}, {"score": 0.004360952651269854, "phrase": "master_code_base"}, {"score": 0.00432064072724161, "phrase": "entire_development_team"}, {"score": 0.004267468074128779, "phrase": "integration_hell"}, {"score": 0.00415019999222481, "phrase": "extreme_programming"}, {"score": 0.004086710677771063, "phrase": "ci"}, {"score": 0.004036141321779216, "phrase": "automated_tools"}, {"score": 0.00397413001036373, "phrase": "repeated_integration"}, {"score": 0.003949592017305331, "phrase": "source_code"}, {"score": 0.0039252049353279556, "phrase": "automated_builds"}, {"score": 0.0038410253293837786, "phrase": "main_problems"}, {"score": 0.0036894343670807314, "phrase": "software_system"}, {"score": 0.0035879931522580745, "phrase": "multiple_views"}, {"score": 0.0035001588456889904, "phrase": "quality_awareness_framework"}, {"score": 0.0032898346872897383, "phrase": "service-based_mashup_paradigm"}, {"score": 0.0032292292848296617, "phrase": "entire_cl-toolchain"}, {"score": 0.003199345207727474, "phrase": "single_service"}, {"score": 0.0031501497751403058, "phrase": "research_approach"}, {"score": 0.003044558129699335, "phrase": "conceptional_model"}, {"score": 0.002951631137816642, "phrase": "prototypical_framework_implementation"}, {"score": 0.0029243084850457757, "phrase": "tool_requirements"}, {"score": 0.0027230443042630882, "phrase": "controlled_user_study"}, {"score": 0.0026978319081381145, "phrase": "sqa-mashup's_single_point"}, {"score": 0.002488851299416018, "phrase": "standalone_ci-tools"}, {"score": 0.002450554073692113, "phrase": "sqa-mashup_framework"}, {"score": 0.002420339995088838, "phrase": "one-stop_shop"}, {"score": 0.002405372603197824, "phrase": "software_quality_data"}, {"score": 0.002375714262344562, "phrase": "software_development_project"}, {"score": 0.0023464207498977, "phrase": "easy_access"}, {"score": 0.002267708463966758, "phrase": "multiple_cl-tools"}, {"score": 0.002212123058024591, "phrase": "integrated_ci-data"}, {"score": 0.0021916308348851428, "phrase": "information_needs"}, {"score": 0.002178074693316872, "phrase": "different_stakeholders"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Continuous integration", " Controlled user study", " Software quality", " Tool integration", " Information needs"], "paper_abstract": "Context: Continuous Integration (Cl) has become an established best practice of modern software development. Its philosophy of regularly integrating the changes of individual developers with the master code base saves the entire development team from descending into Integration Hell, a term coined in the field of extreme programming. In practice, CI is supported by automated tools to cope with this repeated integration of source code through automated builds and testing. One of the main problems, however, is that relevant information about the quality and health of a software system is both scattered across those tools and across multiple views. Objective: This paper introduces a quality awareness framework for CI-data and its conceptional model used for the data integration and visualization. The framework called SQA-Mashup makes use of the service-based mashup paradigm and integrates information from the entire Cl-toolchain into a single service. Method: The research approach followed in our work consists out of (i) a conceptional model for data integration and visualization, (ii) a prototypical framework implementation based on tool requirements derived from literature, and (iii) a controlled user study to evaluate its usefulness. Results: The results of the controlled user study showed that SQA-Mashup's single point of access allows users to answer questions regarding the state of a system more quickly (57%) and accurately (21.6%) than with standalone CI-tools. Conclusions: The SQA-Mashup framework can serve as one-stop shop for software quality data monitoring in a software development project. It enables easy access to CI-data which otherwise is not integrated but scattered across multiple Cl-tools. Our dynamic visualization approach allows for a tailoring of integrated CI-data according to information needs of different stakeholders such as developers or testers. (c) 2014 Elsevier B.V. All rights reserved.", "paper_title": "SQA-Mashup: A mashup framework for continuous integration", "paper_id": "WOS:000356110100007"}