{"auto_keywords": [{"score": 0.03725049175533517, "phrase": "independent_reference_model"}, {"score": 0.027612944106591132, "phrase": "large_cache_sizes"}, {"score": 0.025979599489653175, "phrase": "pac_algorithm"}, {"score": 0.00481495049065317, "phrase": "effective_mechanism"}, {"score": 0.004612896435506914, "phrase": "key_components"}, {"score": 0.0045415338200109345, "phrase": "web_caching_systems"}, {"score": 0.004384960761826366, "phrase": "cached_documents"}, {"score": 0.004333973355873714, "phrase": "main_design_objectives"}, {"score": 0.004250302819248558, "phrase": "high_cache"}, {"score": 0.003993216345115755, "phrase": "access_patterns"}, {"score": 0.0038554737609608255, "phrase": "widely_used_heuristic"}, {"score": 0.0034971932704828197, "phrase": "lru_policy"}, {"score": 0.0032472646337850073, "phrase": "higher_implementation_complexity"}, {"score": 0.0032220148724914867, "phrase": "lower_adaptability"}, {"score": 0.0031721009574803127, "phrase": "access_frequencies"}, {"score": 0.0030506626796257077, "phrase": "new_lru-based_rule"}, {"score": 0.0028325548627901004, "phrase": "desirable_attributes"}, {"score": 0.0027995677499976406, "phrase": "lru_scheme"}, {"score": 0.002756180088265064, "phrase": "new_heuristic"}, {"score": 0.002681859084438076, "phrase": "zipf's_law_request"}, {"score": 0.002519402443228795, "phrase": "optimal_lfu_algorithm"}, {"score": 0.002366763442497185, "phrase": "negligible_additional_complexity"}, {"score": 0.0023029188952824685, "phrase": "ordinary_lru_policy"}, {"score": 0.0022407927161620855, "phrase": "replacement_decisions"}, {"score": 0.002171836484200008, "phrase": "preceding_interval"}, {"score": 0.002154930852763048, "phrase": "fixed_length"}, {"score": 0.0021049977753042253, "phrase": "wiley_periodicals"}], "paper_keywords": ["persistent-access-caching", " least-recently-used caching", " least-frequently-used caching", " move-to-front searching", " generalized Zipf's law distributions", " heavy-tailed distributions", " Web caching", " cache fault probability", " average-case analysis"], "paper_abstract": "Caching is widely recognized as an effective mechanism for improving the performance of the World Wide Web. One of the key components in engineering the Web caching systems is designing document placement/replacement algorithms for updating the collection of cached documents. The main design objectives of such a policy are the high cache hit ratio, ease of implementation, low complexity and adaptability to the fluctuations in access patterns. These objectives are essentially satisfied by the widely used heuristic called the least-recently-used (LRU) cache replacement rule. However, in the context of the independent reference model, the LRU policy can significantly underperform the optimal least-frequently-used (LFU) algorithm that, on the other hand, has higher implementation complexity and lower adaptability to changes in access frequencies. To alleviate this problem, we introduce a new LRU-based rule, termed the persistent-access-caching (PAC), which essentially preserves all of the desirable attributes of the LRU scheme. For this new heuristic, under the independent reference model and generalized Zipf's law request probabilities, we prove that, for large cache sizes, its performance is arbitrarily close to the optimal LFU algorithm. Furthermore, this near-optimality of the PAC algorithm is achieved at the expense of a negligible additional complexity for large cache sizes when compared to the ordinary LRU policy, since the PAC algorithm makes the replacement decisions based on the references collected during the preceding interval of fixed length. (C) 2008 Wiley Periodicals, Inc.", "paper_title": "The persistent-access-caching algorithm", "paper_id": "WOS:000258346000005"}