{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gradual_abstraction"}, {"score": 0.004657185361669812, "phrase": "experimental_object-oriented_programming_language"}, {"score": 0.004474645041899596, "phrase": "program_development"}, {"score": 0.004270665568018583, "phrase": "abstraction_steps"}, {"score": 0.004130660282810338, "phrase": "immediate_object_construction"}, {"score": 0.0038900709793274484, "phrase": "constructed_objects"}, {"score": 0.0038385317554884713, "phrase": "concrete_problem"}, {"score": 0.003687960013746783, "phrase": "class_hierarchies"}, {"score": 0.0034730657554172405, "phrase": "gradual_abstraction_steps"}, {"score": 0.0033367819052051995, "phrase": "object_classification"}, {"score": 0.0031422859551159506, "phrase": "strong_object_classification"}, {"score": 0.0030799988391729464, "phrase": "conventional_classes"}, {"score": 0.0030189426536422577, "phrase": "weak_object_classification"}, {"score": 0.002824005136794786, "phrase": "central_mechanism"}, {"score": 0.0027680095380207734, "phrase": "classified_objects"}, {"score": 0.00255488432062653, "phrase": "class_generalization"}, {"score": 0.0024545413637350765, "phrase": "class_specialization"}, {"score": 0.002389839896897424, "phrase": "mainstream_object-oriented_programming_languages"}, {"score": 0.0022057677637040396, "phrase": "syntactical_abstraction_step"}, {"score": 0.0021476098263617954, "phrase": "source_file"}, {"score": 0.0021049977753042253, "phrase": "syntactical_class_form"}], "paper_keywords": ["Languages", " Design", " Experimentation", " ASL2", " objects before classes", " weak and strong classification of objects", " abstraction steps", " Scheme"], "paper_abstract": "We describe an experimental object-oriented programming language, ASL2, that supports program development by means of a series of abstraction steps. The language allows immediate object construction, and it is possible to use the constructed objects for concrete problem solving tasks. Classes and class hierarchies can be derived from the objects - via gradual abstraction steps. We introduce two levels of object classification, called weak and strong object classification. Strong object classification relies on conventional classes, whereas weak object classification is looser, and less restrictive. As a central mechanism, weakly classified objects are allowed to borrow methods from each other. ASL2 supports class generalization, as a counterpart to class specialization and inheritance in mainstream object-oriented programming languages. The final abstraction step discussed in this paper is a syntactical abstraction step that derives a source file with a syntactical class form.", "paper_title": "Object-oriented Programming with Gradual Abstraction", "paper_id": "WOS:000318630300004"}