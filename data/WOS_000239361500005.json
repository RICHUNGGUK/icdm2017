{"auto_keywords": [{"score": 0.04958720442967608, "phrase": "buffer_overflows"}, {"score": 0.034839786370177914, "phrase": "type_information"}, {"score": 0.00481495049065317, "phrase": "efficient_runtime_protection"}, {"score": 0.004716520738331953, "phrase": "buffer_overflow_vulnerabilities"}, {"score": 0.004188198923320451, "phrase": "existing_code"}, {"score": 0.003997891221012094, "phrase": "novel_approach"}, {"score": 0.003956784357357341, "phrase": "transparent_and_efficient_runtime_protection"}, {"score": 0.003405948098114941, "phrase": "binary_executable"}, {"score": 0.003353521531649663, "phrase": "library_file"}, {"score": 0.0032510690712452147, "phrase": "debugging_information"}, {"score": 0.0029928611380840757, "phrase": "data_structure"}, {"score": 0.0029164434911787187, "phrase": "libsafeplus"}, {"score": 0.0028715299874549245, "phrase": "shared_library"}, {"score": 0.0026986685585382347, "phrase": "unsafe_c_library_calls"}, {"score": 0.0022053994402287925, "phrase": "performance_overhead"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["buffer overflow attacks", " binary rewriting", " dynamic linking", " function call interception"], "paper_abstract": "Buffer overflow vulnerabilities are one of the most commonly and widely exploited security vulnerabilities in programs. Most existing solutions for avoiding buffer overflows are either inadequate, inefficient or incompatible with existing code. In this paper, we present a novel approach for transparent and efficient runtime protection against buffer overflows. The approach is implemented by two tools: Type Information Extractor and Depositor (TIED) and LibsafePlus. TIED is first used on a binary executable or shared library file to extract type information from the debugging information inserted in the file by the compiler and reinsert it in the file as a data structure available at runtime. LibsafePlus is a shared library that is preloaded when the program is run. LibsafePlus intercepts unsafe C library calls such as strcpy and uses the type information made available by TIED at runtime to determine whether it would be 'safe' to carry out the operation. With our simple design we are able to protect most applications with a performance overhead of less than 10%. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Binary rewriting and call interception for efficient runtime protection against buffer overflows", "paper_id": "WOS:000239361500005"}