{"auto_keywords": [{"score": 0.03333366250922989, "phrase": "enorm"}, {"score": 0.00481495049065317, "phrase": "object-relational_mapping"}, {"score": 0.004637478829869904, "phrase": "growing_adoption"}, {"score": 0.004551199992546761, "phrase": "object-relational_mapping_frameworks"}, {"score": 0.004466543364303789, "phrase": "uml"}, {"score": 0.004066076430818046, "phrase": "platform_independent_way"}, {"score": 0.0029816229984366374, "phrase": "class_models"}, {"score": 0.002613709503583786, "phrase": "design_patterns"}, {"score": 0.002493661209614328, "phrase": "java"}, {"score": 0.0024471088985161767, "phrase": "ruby"}, {"score": 0.002379045257323561, "phrase": "python"}, {"score": 0.002291089893848235, "phrase": "empirical_evaluation"}, {"score": 0.0021049977753042253, "phrase": "separated_models"}], "paper_keywords": [""], "paper_abstract": "Despite the growing adoption of object-relational mapping frameworks, UML and its most widespread extensions do not represent these mappings in a platform independent way. Maintaining mappings scattered in the code is difficult and error prone, specially if the schema is large and serves several systems. This paper proposes ENORM, a notation that extends class models representing all the essential mappings. ENORM is platform independent, providing a meta-model based on design patterns employed by three frameworks of Java, Ruby, and Python languages. An empirical evaluation indicates that ENORM performs well in comparison to separated models.", "paper_title": "ENORM: An Essential Notation for Object-Relational Mapping", "paper_id": "WOS:000344417200003"}