{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "flexible_accelerator"}, {"score": 0.004724708238414131, "phrase": "rtl_design_complexity"}, {"score": 0.0046069985410261746, "phrase": "reconfigurable_logic"}, {"score": 0.004549242970806199, "phrase": "general_purpose_systems"}, {"score": 0.0043527164193299574, "phrase": "energy_improvements"}, {"score": 0.004217537792708984, "phrase": "recent_improvements"}, {"score": 0.004164644263639545, "phrase": "hls_compilers"}, {"score": 0.004112411350177274, "phrase": "rtl_design"}, {"score": 0.003909923690310641, "phrase": "new_challenge"}, {"score": 0.003788444178071508, "phrase": "reconfigurable_resources"}, {"score": 0.0037409118365761894, "phrase": "multiple_applications"}, {"score": 0.003693973656103879, "phrase": "custom_hardware_designs"}, {"score": 0.0033814348757887232, "phrase": "\"_accelerators"}, {"score": 0.003338992028053874, "phrase": "widely_varying_fabric_budgets"}, {"score": 0.0032148229832850215, "phrase": "existing_accelerator_designs"}, {"score": 0.003174464741377186, "phrase": "small_fabric_budgets"}, {"score": 0.00301801991152303, "phrase": "larger_budgets"}, {"score": 0.0028692628457408025, "phrase": "current_accelerator_design_techniques"}, {"score": 0.0027976491158911514, "phrase": "novel_architectural_approach"}, {"score": 0.0027451110240633144, "phrase": "fine-grained_virtualization"}, {"score": 0.002626317051411829, "phrase": "synthesized_implementation"}, {"score": 0.0024654516678953658, "phrase": "idct_accelerator"}, {"score": 0.0023290951071300433, "phrase": "minimal_performance"}, {"score": 0.0022142194702079866, "phrase": "application_designers"}, {"score": 0.0021317885325570604, "phrase": "hardware_acceleration"}, {"score": 0.0021049977753042253, "phrase": "single_rtl_designs"}], "paper_keywords": [""], "paper_abstract": "RTL design complexity discouraged adoption of reconfigurable logic in general purpose systems, impeding opportunities for performance and energy improvements [1]. Recent improvements to HLS compilers simplify RTL design and are easing this barrier. A new challenge will emerge: managing reconfigurable resources between multiple applications with custom hardware designs. In this paper, we propose a method to \"shrink-fit\" accelerators within widely varying fabric budgets. Shrink-fit automatically shrinks existing accelerator designs within small fabric budgets and grows designs to increase performance when larger budgets are available. Our method takes advantage of current accelerator design techniques and introduces a novel architectural approach based on fine-grained virtualization. We evaluate shrink-fit using a synthesized implementation of an IDCT for decoding JPEGs and show the IDCT accelerator can shrink by a factor of 16x with minimal performance and area overheads. Using shrink-fit, application designers can achieve the benefits of hardware acceleration with single RTL designs on FPGAs large and small.", "paper_title": "Shrink-Fit: A Framework for Flexible Accelerator Sizing", "paper_id": "WOS:000320993000006"}