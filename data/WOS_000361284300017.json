{"auto_keywords": [{"score": 0.03329819245497196, "phrase": "pars"}, {"score": 0.013706920366547972, "phrase": "disk_failures"}, {"score": 0.00481495049065317, "phrase": "virtual_machine_snapshots"}, {"score": 0.004617187934074393, "phrase": "running_state"}, {"score": 0.004578616481036476, "phrase": "stable_storage"}, {"score": 0.004540365779658683, "phrase": "failure-free_execution"}, {"score": 0.0044275118637330975, "phrase": "snapshot_point"}, {"score": 0.004299374036140852, "phrase": "snapshot_state"}, {"score": 0.004105470143550837, "phrase": "vm"}, {"score": 0.003986581218661184, "phrase": "popular_distributed_file_systems"}, {"score": 0.003838791650587681, "phrase": "redundant_copies"}, {"score": 0.003712011863784581, "phrase": "user-specific_personalization"}, {"score": 0.003456287408801543, "phrase": "identical_copies"}, {"score": 0.0034130176595901104, "phrase": "entire_file"}, {"score": 0.0033561632967173856, "phrase": "non-trivial_additional_storage_overhead"}, {"score": 0.0032726467814278345, "phrase": "page-aware_replication_system"}, {"score": 0.0031912018800904314, "phrase": "vm_snapshots"}, {"score": 0.0031248767378106663, "phrase": "vm_introspection_technique"}, {"score": 0.002897283610433351, "phrase": "system_execution"}, {"score": 0.002743262400544954, "phrase": "high_availability"}, {"score": 0.0027203027216256013, "phrase": "long-term_durability"}, {"score": 0.0023980368333253147, "phrase": "storage_efficiency"}, {"score": 0.0022609695885550058, "phrase": "experimental_results"}, {"score": 0.002158780936704905, "phrase": "native_replication_approach"}, {"score": 0.002140708301152207, "phrase": "hdfs"}, {"score": 0.0021049977753042253, "phrase": "whole_snapshot_file"}], "paper_keywords": ["Replication", " Virtual machine snapshot", " Availability", " Storage space saving", " Introspection"], "paper_abstract": "Virtual machine (VM) snapshot enhances the system availability by saving the running state into stable storage during failure-free execution and rolling back to the snapshot point upon failures. Unfortunately, the snapshot state may be lost due to disk failures, so that the VM fails to be recovered. The popular distributed file systems employ replication technique to tolerate disk failures by placing redundant copies across disperse disks. However, unless user-specific personalization is provided, these systems consider the data in the file as of same importance and create identical copies of the entire file, leading to non-trivial additional storage overhead. This paper proposes a page-aware replication system (PARS) to store VM snapshots efficiently. PARS employs VM introspection technique to explore how a page is used by guest, and classifies the pages by their importance to system execution. If a page is critical, PARS replicates it multiple copies to ensure high availability and long-term durability. Otherwise, the loss of this page causes no harm for system to work properly, PARS therefore saves only one copy of the page. Consequently, PARS improves storage efficiency without compromising availability. We have implemented PARS to justify its practicality. The experimental results demonstrate that PARS achieves 53.9% space saving compared to the native replication approach in HDFS which replicates the whole snapshot file fully and identically.", "paper_title": "PARS: A Page-Aware Replication System for Efficiently Storing Virtual Machine Snapshots", "paper_id": "WOS:000361284300017"}