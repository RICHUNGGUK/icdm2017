{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "verified_implementation_of"}, {"score": 0.004611224230543916, "phrase": "ml_system"}, {"score": 0.004458722048888919, "phrase": "substantial_subset"}, {"score": 0.004416079619543104, "phrase": "standard_ml._cakeml"}, {"score": 0.004311241567238011, "phrase": "interactive_read-eval-print_loop"}, {"score": 0.004089239912167375, "phrase": "repl_implementation"}, {"score": 0.003934970057482768, "phrase": "cakeml."}, {"score": 0.003696550794743764, "phrase": "type_checking"}, {"score": 0.0036611708297251645, "phrase": "incremental_and_dynamic_compilation"}, {"score": 0.0035741900278634616, "phrase": "arbitrary-precision_arithmetic"}, {"score": 0.0035229930971258316, "phrase": "compiler_bootstrapping"}, {"score": 0.0027965187255008647, "phrase": "over-simplifying_assumptions"}, {"score": 0.002716915166374506, "phrase": "novel_approaches"}, {"score": 0.002432152706473349, "phrase": "verified_compiler"}, {"score": 0.00236289633510808, "phrase": "verified_machine-code_implementation"}, {"score": 0.0022626835039082746, "phrase": "diverging_input_programs"}, {"score": 0.0022302306304023602, "phrase": "lightweight_approach"}, {"score": 0.002198242191529979, "phrase": "logical_timeout_exceptions"}, {"score": 0.002166711569953301, "phrase": "entire_development"}], "paper_keywords": ["Compiler verification", " compiler bootstrapping", " ML", " machine code verification", " read-eval-print loop", " verified parsing", " verified type checking", " verified garbage collection"], "paper_abstract": "We have developed and mechanically verified an ML system called CakeML, which supports a substantial subset of Standard ML. CakeML is implemented as an interactive read-eval-print loop (REPL) in x86-64 machine code. Our correctness theorem ensures that this REPL implementation prints only those results permitted by the semantics of CakeML. Our verification effort touches on a breadth of topics including lexing, parsing, type checking, incremental and dynamic compilation, garbage collection, arbitrary-precision arithmetic, and compiler bootstrapping. Our contributions are twofold. The first is simply in building a system that is end-to-end verified, demonstrating that each piece of such a verification effort can in practice be composed with the others, and ensuring that none of the pieces rely on any over-simplifying assumptions. The second is developing novel approaches to some of the more challenging aspects of the verification. In particular, our formally verified compiler can boot-strap itself: we apply the verified compiler to itself to produce a verified machine-code implementation of the compiler. Additionally, our compiler proof handles diverging input programs with a lightweight approach based on logical timeout exceptions. The entire development was carried out in the HOL4 theorem prover.", "paper_title": "CakeML: A Verified Implementation of ML", "paper_id": "WOS:000331120500016"}