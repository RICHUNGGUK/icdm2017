{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "generic_programming"}, {"score": 0.043200380339457764, "phrase": "modular_type_checking"}, {"score": 0.04274518365190482, "phrase": "generic_algorithms"}, {"score": 0.010098030315599256, "phrase": "algorithm_specialization"}, {"score": 0.0045318666714939905, "phrase": "highly_reusable_software_libraries"}, {"score": 0.004241914481080374, "phrase": "constrained_generics_extension"}, {"score": 0.0039269071382230444, "phrase": "unconstrained_generics"}, {"score": 0.0036352070472201086, "phrase": "minimal_requirements"}, {"score": 0.0034212450542713607, "phrase": "high_degree"}, {"score": 0.0032916702592724217, "phrase": "multiple_implementations"}, {"score": 0.0032021226849872054, "phrase": "specific_classes"}, {"score": 0.003030247482854539, "phrase": "non-local_type_information"}, {"score": 0.002931569771634119, "phrase": "local_nature"}, {"score": 0.0024299678474208023, "phrase": "important_design_tradeoffs"}, {"score": 0.0022994427535192492, "phrase": "particular_design"}, {"score": 0.0021401625519713577, "phrase": "sweet_spot"}, {"score": 0.0021049977753042253, "phrase": "interesting_design_space"}], "paper_keywords": ["languages", " theory", " generic programming", " parametric polymorphism", " constrained generics", " concepts", " specialization"], "paper_abstract": "Generic programming has recently emerged as a paradigm for developing highly reusable software libraries, most notably in C++. We have designed and implemented a constrained generics extension for C++ to support modular type checking of generic algorithms and to address other issues associated with unconstrained generics. To be as broadly applicable as possible, generic algorithms are defined with minimal requirements on their inputs. At the same time, to achieve a high degree of efficiency, generic algorithms may have multiple implementations that exploit features of specific classes of inputs. This process of algorithm specialization relies on non-local type information and conflicts directly with the local nature of modular type checking. In this paper, we review the design and implementation of our extensions for generic programming in C++, describe the issues of algorithm specialization and modular type checking in detail, and discuss the important design tradeoffs in trying to accomplish both. We present the particular design that we chose for our implementation, with the goal of hitting the sweet spot in this interesting design space.", "paper_title": "Algorithm specialization in generic programming", "paper_id": "WOS:000202972100024"}