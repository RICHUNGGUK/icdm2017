{"auto_keywords": [{"score": 0.03825953721511532, "phrase": "pps"}, {"score": 0.020335141923214735, "phrase": "pts"}, {"score": 0.00481495049065317, "phrase": "multi-core_processing_of"}, {"score": 0.004791744375656141, "phrase": "xml_twig_patterns"}, {"score": 0.004632388761885302, "phrase": "tree-structured_data_model"}, {"score": 0.004435235311084034, "phrase": "xpath"}, {"score": 0.004329331617724, "phrase": "selection_predicates"}, {"score": 0.004267004541988167, "phrase": "multiple_elements"}, {"score": 0.004185289462328125, "phrase": "tree_structure"}, {"score": 0.004026505114417176, "phrase": "twig_patterns"}, {"score": 0.003855034057431947, "phrase": "xml_database"}, {"score": 0.003799509133780117, "phrase": "basic_operation"}, {"score": 0.00376293585033711, "phrase": "xml_query_processing"}, {"score": 0.0036730297909962142, "phrase": "parallel_path_stack_algorithm"}, {"score": 0.0035679633126097115, "phrase": "parallel_twig_stack_algorithm"}, {"score": 0.0033182152378613767, "phrase": "xml_query_twig_patterns"}, {"score": 0.003270396852243212, "phrase": "parallel_multi-threaded_computing_platform"}, {"score": 0.003131023880006021, "phrase": "pathstack_and_twigstack_algorithms"}, {"score": 0.002997572637726648, "phrase": "sophisticated_search_technique"}, {"score": 0.002925899335792914, "phrase": "specific_subtrees"}, {"score": 0.002869793011316547, "phrase": "extensive_experimentation"}, {"score": 0.00281475963538069, "phrase": "pts."}, {"score": 0.0025181367444581993, "phrase": "varying_numbers"}, {"score": 0.002469830206270585, "phrase": "experimental_results"}, {"score": 0.0023530698447434308, "phrase": "running_time"}, {"score": 0.0021881743793875767, "phrase": "dblp_queries"}, {"score": 0.0021049977753042253, "phrase": "xmark_queries"}], "paper_keywords": ["Query processing", " concurrency"], "paper_abstract": "XML is based on a tree-structured data model. Naturally, the most popular XML querying language (XPath) uses patterns of selection predicates, on multiple elements related by a tree structure, which often may be abstracted by twig patterns. Finding all occurrences of such a twig pattern in an XML database is a basic operation for XML query processing. We present the parallel path stack algorithm (PPS) and the parallel twig stack algorithm (PTS). PPS and PTS are novel and efficient algorithms for matching XML query twig patterns in a parallel multi-threaded computing platform. PPS and PTS are based on the PathStack and TwigStack algorithms [1]. These algorithms employ a sophisticated search technique for limiting processing to specific subtrees. We conducted extensive experimentation with PPS and PTS. We compared PPS and PTS to the standard (sequential) PathStack and TwigStack algorithms in terms of run time (to completion). We checked their performance for varying numbers of threads. Experimental results indicate that using PPS and PTS significantly reduces the running time of queries in comparison with the PathStack/TwigStack algorithm (up to 44 times faster for DBLP queries and up to 22 times faster for XMark queries).", "paper_title": "Multi-Core Processing of XML Twig Patterns", "paper_id": "WOS:000351393500014"}