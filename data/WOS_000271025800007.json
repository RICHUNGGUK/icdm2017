{"auto_keywords": [{"score": 0.03398078596606166, "phrase": "dhtjoin"}, {"score": 0.015719716506582538, "phrase": "continuous_join_queries"}, {"score": 0.004748556604045108, "phrase": "dht_networks"}, {"score": 0.004683073921949839, "phrase": "continuous_query_processing"}, {"score": 0.0046184900568047565, "phrase": "data_stream_management_systems"}, {"score": 0.00443000995237127, "phrase": "considerable_attention"}, {"score": 0.004190563478825626, "phrase": "processing_data_streams"}, {"score": 0.004104132253183181, "phrase": "continuous_fashion"}, {"score": 0.003936560022538905, "phrase": "centralized_processing"}, {"score": 0.0038822311096089307, "phrase": "continuous_queries"}, {"score": 0.0038286491141253584, "phrase": "distributed_data"}, {"score": 0.0034978813769575233, "phrase": "approximate_answers"}, {"score": 0.003401954670986958, "phrase": "distributed_data_streams"}, {"score": 0.003285725064532174, "phrase": "new_method"}, {"score": 0.003129623571496151, "phrase": "hash-based_placement"}, {"score": 0.0030226700832113942, "phrase": "distributed_hash_table"}, {"score": 0.0028000270988465486, "phrase": "embedded_trees"}, {"score": 0.002742196991950893, "phrase": "underlying_dht"}, {"score": 0.002540160379502092, "phrase": "attribute_value"}, {"score": 0.0023043558058824572, "phrase": "performance_evaluation"}, {"score": 0.002164432930854161, "phrase": "significant_performance_gains"}, {"score": 0.0021049977753042253, "phrase": "network_traffic"}], "paper_keywords": ["Data stream management", " Continuous join queries", " DHT networks", " Distributed query execution", " Load balancing", " Result completeness"], "paper_abstract": "Continuous query processing in data stream management systems (DSMS) has received considerable attention recently. Many applications share the same need for processing data streams in a continuous fashion. For most distributed streaming applications, the centralized processing of continuous queries over distributed data is simply not viable. This paper addresses the problem of computing approximate answers to continuous join queries over distributed data streams. We present a new method, called DHTJoin, which combines hash-based placement of tuples in a Distributed Hash Table (DHT) and dissemination of queries by exploiting the embedded trees in the underlying DHT, thereby incurring little overhead. DHTJoin also deals with join attribute value skew which may hurt load balancing and result completeness. We provide a performance evaluation of DHTJoin which shows that it can achieve significant performance gains in terms of network traffic.", "paper_title": "DHTJoin: processing continuous join queries using DHT networks", "paper_id": "WOS:000271025800007"}