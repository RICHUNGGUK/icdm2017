{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "almost_compositional_functions"}, {"score": 0.03494308287888983, "phrase": "generic_part"}, {"score": 0.027629832705654053, "phrase": "dependent_type_theory"}, {"score": 0.004533142516832776, "phrase": "recursive_data_types"}, {"score": 0.004372002674739612, "phrase": "mutually_recursive_data_types"}, {"score": 0.0034550163444256386, "phrase": "constructor's_arguments"}, {"score": 0.003213489259323924, "phrase": "data_type"}, {"score": 0.0031367803372203498, "phrase": "data_types"}, {"score": 0.0028477727736832283, "phrase": "predictable_compositional_cases"}, {"score": 0.002779769492357829, "phrase": "interesting_work"}, {"score": 0.0027298319171606498, "phrase": "task-specific_part"}, {"score": 0.0025697460140513932, "phrase": "inductive_families"}, {"score": 0.002523601941505028, "phrase": "haskell"}, {"score": 0.0024932498388507084, "phrase": "generalized_algebraic_data_types"}, {"score": 0.002390088397889174, "phrase": "java"}, {"score": 0.002304824112812496, "phrase": "visitor_design_pattern"}, {"score": 0.0021960024679620886, "phrase": "\"scrap_your_boilerplate\"_approach"}, {"score": 0.0021049977753042253, "phrase": "general_tree_types"}], "paper_keywords": ["traversal", " abstract syntax", " Haskell", " Java", " visitor pattern", " dependent type theory"], "paper_abstract": "This paper introduces a pattern for almost compositional functions over recursive data types, and over families of mutually recursive data types. Here \"almost compositional\" means that for a number of the constructors in the type(s), the result of the function depends only on the constructor and the results of calling the function on the constructor's arguments. The pattern consists of a generic part constructed once for each data type or family of data types, and a task-specific part. The generic part contains the code for the predictable compositional cases, leaving the interesting work to the task-specific part. Examples of the pattern implemented in dependent type theory with inductive families, in Haskell with generalized algebraic data types and rank-2 polymorphism, and in Java using a variant of the Visitor design pattern are given. The relationship to the \"Scrap Your Boilerplate\" approach to generic programming, and to general tree types in dependent type theory are also investigated.", "paper_title": "A pattern for almost compositional functions", "paper_id": "WOS:000202972400022"}