{"auto_keywords": [{"score": 0.04438922345410228, "phrase": "sliding_windows"}, {"score": 0.01526184381525302, "phrase": "asynchronous_event_streams"}, {"score": 0.014712364193976923, "phrase": "lat-win"}, {"score": 0.00481495049065317, "phrase": "sliding_window"}, {"score": 0.0046570462031865385, "phrase": "event_stream_model"}, {"score": 0.004571559854487074, "phrase": "wide_range"}, {"score": 0.0041515831652973794, "phrase": "effective_event_stream_processing"}, {"score": 0.0037421829222825964, "phrase": "meaningful_snapshots"}, {"score": 0.00370077772049505, "phrase": "asynchronous_computation_form"}, {"score": 0.0036734281414482735, "phrase": "distributive_lattice"}, {"score": 0.003592581806180854, "phrase": "central_challenge"}, {"score": 0.0035528259557800683, "phrase": "lattice_structure"}, {"score": 0.003074197032561992, "phrase": "convex_distributive_lattice"}, {"score": 0.002929394386754424, "phrase": "existing_predicate_specification"}, {"score": 0.0029077288662492894, "phrase": "detection_techniques"}, {"score": 0.00265987582861194, "phrase": "proposed_scheme"}, {"score": 0.0026109540617641593, "phrase": "context-aware_smart_office_scenario"}, {"score": 0.002497172413754263, "phrase": "multiple_streams"}, {"score": 0.0024786956187352327, "phrase": "sensed_events"}, {"score": 0.0024512358145634358, "phrase": "lat-win_algorithm"}, {"score": 0.0021684903968454267, "phrase": "specified_predicates"}, {"score": 0.002128587147609539, "phrase": "dynamic_changes"}, {"score": 0.0021049977753042253, "phrase": "computing_environment"}], "paper_keywords": ["Sliding window", " lattice of snapshots", " predicate detection", " asynchronous event streams"], "paper_abstract": "The event stream model of computation has a wide range of applications, e. g., computer system monitoring, physical environment sensing/surveillance, and stock trade monitoring. Sliding windows are widely used to facilitate effective event stream processing. However, it is greatly challenged when the event sources are distributed and asynchronous. One important technique to cope with the asynchrony is to utilize that the meaningful snapshots of an asynchronous computation form a distributive lattice. It thus becomes the central challenge whether this lattice structure still preserves and how to maintain it at runtime, when we restrict our attention to events within sliding windows. To address this challenge, we first prove that the snapshots of the asynchronous event streams within the sliding windows form a convex distributive lattice (denoted by Lat-Win). This enables us to easily integrate existing predicate specification and detection techniques, to express and monitor properties of our concern over asynchronous event streams. Then we propose an algorithm to maintain Lat-Win at runtime. The proposed scheme is evaluated in a context-aware smart office scenario, where activities of the user can be recognized by monitoring multiple streams of sensed events. The Lat-Win algorithm is implemented on the open-source context-aware middleware we developed. The evaluation results first show the advantage of adopting sliding windows over asynchronous event streams. Then they show the performance of detecting specified predicates within Lat-Win, with dynamic changes in the computing environment.", "paper_title": "Design of a Sliding Window over Distributed and Asynchronous Event Streams", "paper_id": "WOS:000342179600007"}