{"auto_keywords": [{"score": 0.05007845862438665, "phrase": "search-based_techniques"}, {"score": 0.038182416208762074, "phrase": "sple"}, {"score": 0.00477513738640734, "phrase": "reverse_engineering_feature_models"}, {"score": 0.004638354165775803, "phrase": "single_system"}, {"score": 0.004449688143230257, "phrase": "users'_demands"}, {"score": 0.004250969091124481, "phrase": "common_practice"}, {"score": 0.003977594755967813, "phrase": "different_functionality"}, {"score": 0.003863568356785813, "phrase": "software_product_line_engineering"}, {"score": 0.003768426876815755, "phrase": "effective_software_development_paradigm"}, {"score": 0.0034106416719768035, "phrase": "system_variants"}, {"score": 0.0033824008297657494, "phrase": "feature_models"}, {"score": 0.003340475943517995, "phrase": "de_facto_standard"}, {"score": 0.0032717489668326275, "phrase": "sple_practices"}, {"score": 0.003177892611195514, "phrase": "engineering_feature_models"}, {"score": 0.00313849462329633, "phrase": "feature_descriptions"}, {"score": 0.0030995835539697893, "phrase": "individual_variant"}, {"score": 0.003048449231088915, "phrase": "active_research_subject"}, {"score": 0.0029242629306714773, "phrase": "reverse_engineering_task"}, {"score": 0.0025385621498128243, "phrase": "clear_trade-off"}, {"score": 0.0024350966556966757, "phrase": "third_objective_function"}, {"score": 0.002306855521822739, "phrase": "clear_performance_improvement"}, {"score": 0.0022036216160494925, "phrase": "great_potential"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Feature model", " Reverse engineering", " Search Based Software Engineering"], "paper_abstract": "Successful software evolves from a single system by adding and changing functionality to keep up with users' demands and to cater to their similar and different requirements. Nowadays it is a common practice to offer a system in many variants such as community, professional, or academic editions. Each variant provides different functionality described in terms of features. Software Product Line Engineering (SPLE) is an effective software development paradigm for this scenario. At the core of SPLE is variability modelling whose goal is to represent the combinations of features that distinguish the system variants using feature models, the de facto standard for such task. As SPLE practices are becoming more pervasive, reverse engineering feature models from the feature descriptions of each individual variant has become an active research subject. In this paper we evaluated, for this reverse engineering task, three standard search based techniques (evolutionary algorithms, hill climbing, and random search) with two objective functions on 74 SPLs. We compared their performance using precision and recall, and found a clear trade-off between these two metrics which we further reified into a third objective function based on F-beta, an information retrieval measure, that showed a clear performance improvement. We believe that this work sheds light on the great potential of search-based techniques for SPLE tasks. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "An assessment of search-based techniques for reverse engineering feature models", "paper_id": "WOS:000351971500024"}