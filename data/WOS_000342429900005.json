{"auto_keywords": [{"score": 0.04949022042340676, "phrase": "mcc"}, {"score": 0.008713746938567617, "phrase": "linux_kernel"}, {"score": 0.006224721307019882, "phrase": "linux"}, {"score": 0.005123059087763271, "phrase": "perceived_complexity"}, {"score": 0.0047852458513833315, "phrase": "mccabe's_cyclomatic_complexity"}, {"score": 0.004596561972944185, "phrase": "control_flow"}, {"score": 0.0039009678436644183, "phrase": "extensive_evolution"}, {"score": 0.0037703042917511635, "phrase": "supposed_high_complexity"}, {"score": 0.003723879111071547, "phrase": "similarly_high_mcc_values"}, {"score": 0.003621559830382821, "phrase": "windows"}, {"score": 0.0035548008271253607, "phrase": "highest_mcc_value"}, {"score": 0.0035328434266216884, "phrase": "freebsd"}, {"score": 0.0033000452351286077, "phrase": "high-mcc_functions"}, {"score": 0.002951631137816642, "phrase": "human_opinions"}, {"score": 0.0028972380176088344, "phrase": "mcc_values"}, {"score": 0.002765588197487234, "phrase": "high_mcc_functions"}, {"score": 0.0027146141712666694, "phrase": "low_complexity"}, {"score": 0.0026481034178437958, "phrase": "specific_code_attributes"}, {"score": 0.0024811443887080543, "phrase": "discrete_increases"}, {"score": 0.0024128447214999647, "phrase": "high_mcc"}, {"score": 0.002361022183015472, "phrase": "code_comprehension"}, {"score": 0.002260684786333025, "phrase": "simple_syntactic_code_metrics"}, {"score": 0.0021312837202666687, "phrase": "control_structures"}, {"score": 0.0021049977753042253, "phrase": "low_perceived_complexity"}], "paper_keywords": ["Software complexity", " McCabe cyclomatic complexity", " Linux kernel", " Perceived complexity", " Code regularity"], "paper_abstract": "McCabe's Cyclomatic Complexity (MCC) is a widely used metric for the complexity of control flow. Common usage decrees that functions should not have an MCC above 50, and preferably much less. However, the Linux kernel includes more than 800 functions with MCC values above 50, and over the years 369 functions have had an MCC of 100 or more. Moreover, some of these functions undergo extensive evolution, indicating that developers are successful in coping with the supposed high complexity. Functions with similarly high MCC values also occur in other operating systems and domains, including Windows. For example, the highest MCC value in FreeBSD is 1316, double the highest MCC in Linux. We attempt to explain all this by analyzing the structure of high-MCC functions in Linux and showing that in many cases they are in fact well-structured (albeit we observe some cases where developers indeed refactor the code in order to reduce complexity). Moreover, human opinions do not correlate with the MCC values of these functions. A survey of perceived complexity shows that there are cases where high MCC functions were ranked as having a low complexity. We characterize these cases and identify specific code attributes such as the diversity of constructs (not only a switch but also ifs) and nesting that correlate with discrete increases in perceived complexity. These observations indicate that a high MCC is not necessarily an impediment to code comprehension, and support the notion that complexity cannot be fully captured using simple syntactic code metrics. In particular, we show that regularity in the code (meaning repetitions of the same pattern of control structures) correlates with low perceived complexity.", "paper_title": "High-MCC Functions in the Linux Kernel", "paper_id": "WOS:000342429900005"}