{"auto_keywords": [{"score": 0.046036954523069426, "phrase": "autonomic_behavior"}, {"score": 0.009649582196856151, "phrase": "composite_systems"}, {"score": 0.008542464684484519, "phrase": "business_logic"}, {"score": 0.008445366163706548, "phrase": "original_applications"}, {"score": 0.006717840615285411, "phrase": "corba_applications"}, {"score": 0.00481495049065317, "phrase": "software_systems"}, {"score": 0.004687742829233727, "phrase": "multiple_existing_applications"}, {"score": 0.004634254474150777, "phrase": "resulting_complexity"}, {"score": 0.004260134699483774, "phrase": "constituent_components"}, {"score": 0.0036413370053909886, "phrase": "desired_goal"}, {"score": 0.003464498764520562, "phrase": "corba"}, {"score": 0.003398780792129312, "phrase": "first_widely_used_middleware_platforms"}, {"score": 0.0032836104153151973, "phrase": "numerous_systems"}, {"score": 0.0031845067058084583, "phrase": "adaptive_corba_template"}, {"score": 0.0027531199604443122, "phrase": "act"}, {"score": 0.002731971103291716, "phrase": "\"generic\"_interceptors"}, {"score": 0.0026494723416072316, "phrase": "startup_time"}, {"score": 0.002444589488113295, "phrase": "java"}, {"score": 0.0023981301755351607, "phrase": "case_study"}, {"score": 0.0021622717349518744, "phrase": "distributed_surveillance_application"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Transparent shaping", " Adaptive middleware", " CORBA", " Autonomic computing", " Self-optimization", " Dynamic adaptation", " Quality-of-service", " Mobile computing", " Generic proxy"], "paper_abstract": "Increasingly, software systems are constructed by integrating and composing multiple existing applications. The resulting complexity increases the need for self-management of the system. However, adding autonomic behavior to composite systems is difficult, especially when the constituent components are heterogeneous and they were not originally designed to support such interactions. Moreover, entangling the code for self-management with the code for the business logic of the original applications may actually increase the complexity of the systems, counter to the desired goal. In this paper, we address autonomization of composite systems that use CORBA, one of the first widely used middleware platforms introduced more than 17 years ago that is still commonly used in numerous systems. We propose a model, called Adaptive CORBA Template (ACT), that enables autonomic behavior to be added to CORBA applications automatically and transparently, that is, without requiring any modifications to the code implementing the business logic of the original applications. To do so, ACT uses \"generic\" interceptors, which are added to CORBA applications at startup time and enable autonomic behavior to be introduced later at runtime. We have developed ACT/J, a prototype of ACT in Java. We describe a case study in which ACT/J is used to introduce three types of autonomic behavior (self-healing, self-optimization, and self-configuration) to a distributed surveillance application. (C) Published by Elsevier B.V.", "paper_title": "Transparent autonomization in CORBA", "paper_id": "WOS:000267338400002"}