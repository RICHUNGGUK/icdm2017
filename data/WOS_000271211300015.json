{"auto_keywords": [{"score": 0.04748801430076137, "phrase": "mytype"}, {"score": 0.026649927263383416, "phrase": "self_type_constructors"}, {"score": 0.009123926688435615, "phrase": "recursive_interfaces"}, {"score": 0.008443634513778794, "phrase": "looj"}, {"score": 0.004814951920926333, "phrase": "bruce"}, {"score": 0.0047794116299656455, "phrase": "foster"}, {"score": 0.004726579360618152, "phrase": "language_looj"}, {"score": 0.004639907811225256, "phrase": "java"}, {"score": 0.004421601997620278, "phrase": "self_reference"}, {"score": 0.0037981086150309885, "phrase": "also_generics"}, {"score": 0.0033480826365657303, "phrase": "different_type_arguments"}, {"score": 0.00328654473734697, "phrase": "significant_limitation"}, {"score": 0.0031317713853981064, "phrase": "generic_collection_class"}, {"score": 0.0029402874300114537, "phrase": "different_element_type"}, {"score": 0.002896956094014126, "phrase": "cremet"}, {"score": 0.0028755300773998416, "phrase": "moors"}, {"score": 0.0028542616501756463, "phrase": "piessens"}, {"score": 0.002822652835367827, "phrase": "odersky"}, {"score": 0.002719790133195399, "phrase": "highly_sophisticated_combination"}, {"score": 0.0026996706283276407, "phrase": "advanced_mechanisms"}, {"score": 0.0026697693423477727, "phrase": "abstract_type_members"}, {"score": 0.002650018880406324, "phrase": "higher-order_type_constructors"}, {"score": 0.002620666087191234, "phrase": "f-bounded_polymorphism"}, {"score": 0.0023972232771581753, "phrase": "type_arguments"}, {"score": 0.002370663905320869, "phrase": "generic_class"}, {"score": 0.0022757667100089243, "phrase": "previous_solutions"}, {"score": 0.0022338938462817867, "phrase": "expressive_power"}, {"score": 0.002152440300818582, "phrase": "core_language"}], "paper_keywords": ["Design", " Languages", " Theory", " binary methods", " generics", " MyType", " type constructor polymorphism"], "paper_abstract": "Bruce and Foster proposed the language LOOJ, an extension of Java with the notion of MyType, which represents the type of a self reference and changes its meaning along with inheritance. MyType is useful to write extensible yet type-safe classes for objects with recursive interfaces, that is, ones with methods that take or return objects of the same type as the receiver. Although LOOJ has also generics, MyType has been introduced as a feature rather orthogonal to generics. As a result, LOOJ cannot express an interface that refers to the same generic class recursively but with different type arguments. This is a significant limitation because such an interface naturally arises in practice, for example, in a generic collection class with method map(), which converts a collection to the same kind of collection of a different element type. Altherr and Cremet and Moors, Piessens, and Odersky gave solutions to this problem but they used a highly sophisticated combination of advanced mechanisms such as abstract type members, higher-order type constructors, and F-bounded polymorphism. In this paper, we give another solution by introducing self type constructors, which integrate MyType and generics so that MyType can take type arguments in a generic class. Self type constructors are tailored to writing recursive interfaces more concicely than previous solutions. We demonstrate the expressive power of self type constructors by means of examples, formalize a core language with self type constructors, and prove its type safety.", "paper_title": "Self Type Constructors", "paper_id": "WOS:000271211300015"}