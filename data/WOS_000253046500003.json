{"auto_keywords": [{"score": 0.04405997637441545, "phrase": "aop"}, {"score": 0.038379366727105735, "phrase": "aop_programs"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_programming"}, {"score": 0.0047013405841819025, "phrase": "aspect_oriented_programming"}, {"score": 0.004546755482549647, "phrase": "emerging_technology"}, {"score": 0.004313996835376177, "phrase": "software_development"}, {"score": 0.004172094622123562, "phrase": "application_requirements"}, {"score": 0.004073590964805314, "phrase": "separated_modules"}, {"score": 0.0032850648549389025, "phrase": "original_base_modules"}, {"score": 0.0029711052657054463, "phrase": "state-based_testing_approach"}, {"score": 0.00276534038425712, "phrase": "multiple_aspects"}, {"score": 0.0027259252868643926, "phrase": "test_model"}, {"score": 0.002648768009464535, "phrase": "state-based_behavior"}, {"score": 0.002500927169609655, "phrase": "base_modules"}, {"score": 0.0023954743066925714, "phrase": "test_cases"}, {"score": 0.0022944576894161485, "phrase": "potential_state_behavior_errors"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["software testing", " aspect-oriented programming", " aspect-oriented software development", " aspect-oriented modeling", " state-based testing", " AOP testing", " AspectJ"], "paper_abstract": "In recent years, Aspect Oriented Programming (AOP) has become an emerging technology due to its ability to support the separation of concerns in software development. In particular, AOP allows application requirements to be implemented in separated modules while weaving them together without code tangling. However, this feature also raises a concern about the quality and reliability of AOP programs. Most specifically, the AOP programming constructs, such as join point, pointcut, advice, and aspect, can change the dynamic behavior(1) of original base modules and need to be tested thoroughly to ensure the correctness of AOP programs. In this paper, we propose a state-based testing approach for AOP programs. The approach considers the state-based behavior(2) changes introduced by different advices in multiple aspects. A test model is presented to abstract the state-based behavior of AOP program with the consideration of the interactions between the base modules and aspects. Based on the model, test cases can be derived so as to uncover the potential state behavior errors in the AOP programs. In addition, an example is provided to show the effectiveness of the proposed approach.", "paper_title": "A state-based testing approach for aspect-oriented programming", "paper_id": "WOS:000253046500003"}