{"auto_keywords": [{"score": 0.0335750813985274, "phrase": "ir_techniques"}, {"score": 0.02322730111336098, "phrase": "requirement_traceability_links"}, {"score": 0.01901166945964182, "phrase": "traceability_links"}, {"score": 0.013418762158215988, "phrase": "trustrace"}, {"score": 0.006593569183857985, "phrase": "mining_software_repositories"}, {"score": 0.004611959213131437, "phrase": "source_code"}, {"score": 0.004264463695140275, "phrase": "software_maintenance"}, {"score": 0.0038665369393234713, "phrase": "daunting_and_costly_task"}, {"score": 0.0034646205853140558, "phrase": "proposed_techniques"}, {"score": 0.0033840673522948592, "phrase": "information_retrieval"}, {"score": 0.0032667240408191015, "phrase": "free-text_requirements"}, {"score": 0.0029500270981001058, "phrase": "mined_results"}, {"score": 0.002501835053002899, "phrase": "state-of-the-art_ir_techniques"}, {"score": 0.002424506147893058, "phrase": "vector_space_model"}, {"score": 0.002405549400304955, "phrase": "jensen-shannon_model"}, {"score": 0.0021215910859085146, "phrase": "mined_data"}, {"score": 0.0021049977753042253, "phrase": "existing_results"}], "paper_keywords": ["Traceability", " requirements", " feature", " source code", " repositories", " experts", " trust-based model"], "paper_abstract": "Traceability is the only means to ensure that the source code of a system is consistent with its requirements and that all and only the specified requirements have been implemented by developers. During software maintenance and evolution, requirement traceability links become obsolete because developers do not/cannot devote effort to updating them. Yet, recovering these traceability links later is a daunting and costly task for developers. Consequently, the literature has proposed methods, techniques, and tools to recover these traceability links semi-automatically or automatically. Among the proposed techniques, the literature showed that information retrieval (IR) techniques can automatically recover traceability links between free-text requirements and source code. However, IR techniques lack accuracy (precision and recall). In this paper, we show that mining software repositories and combining mined results with IR techniques can improve the accuracy (precision and recall) of IR techniques and we propose Trustrace, a trust-based traceability recovery approach. We apply Trustrace on four medium-size open-source systems to compare the accuracy of its traceability links with those recovered using state-of-the-art IR techniques from the literature, based on the Vector Space Model and Jensen-Shannon model. The results of Trustrace are up to 22.7 percent more precise and have 7.66 percent better recall values than those of the other techniques, on average. We thus show that mining software repositories and combining the mined data with existing results from IR techniques improves the precision and recall of requirement traceability links.", "paper_title": "Trustrace: Mining Software Repositories to Improve the Accuracy of Requirement Traceability Links", "paper_id": "WOS:000318642300008"}