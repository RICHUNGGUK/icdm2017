{"auto_keywords": [{"score": 0.05007685425275486, "phrase": "abstract_interpretation"}, {"score": 0.0415390165888035, "phrase": "residual_program"}, {"score": 0.03960301884059867, "phrase": "original_program"}, {"score": 0.035558528823783846, "phrase": "tracing_compilation"}, {"score": 0.02476067129126678, "phrase": "guo"}, {"score": 0.004770461993586338, "phrase": "just-in-time_compilation"}, {"score": 0.004653815971302021, "phrase": "efficient_implementation"}, {"score": 0.004625100791402994, "phrase": "dynamic_languages"}, {"score": 0.004526042013126111, "phrase": "javascript"}, {"score": 0.004498287394256357, "phrase": "python"}, {"score": 0.004456479277765601, "phrase": "php."}, {"score": 0.004228016636379321, "phrase": "so-called_hot_paths"}, {"score": 0.00411182818527434, "phrase": "store_information"}, {"score": 0.004036141321779216, "phrase": "hot_paths"}, {"score": 0.0039252049353279556, "phrase": "optimized_hot_paths"}, {"score": 0.003876879827074979, "phrase": "sufficient_conditions"}, {"score": 0.0038055011575934936, "phrase": "optimized_path"}, {"score": 0.0035991257427992764, "phrase": "new_optimized_paths"}, {"score": 0.0035548008271253607, "phrase": "existing_paths"}, {"score": 0.0034570485248558006, "phrase": "traditional_static_compilation"}, {"score": 0.003393373193137233, "phrase": "remarkable_practical_success"}, {"score": 0.0030634906292640947, "phrase": "trace_semantics"}, {"score": 0.0029884576691560642, "phrase": "program_points"}, {"score": 0.002607362103727335, "phrase": "generic_framework"}, {"score": 0.0025832180231667853, "phrase": "dynamic_optimizations"}, {"score": 0.0024658019116387845, "phrase": "dynamic_type_specialization"}, {"score": 0.002383094469215288, "phrase": "recent_model"}, {"score": 0.0023103107877264816, "phrase": "palsberg"}, {"score": 0.0022818212023413983, "phrase": "operational_bisimulations"}, {"score": 0.0022189961957189935, "phrase": "hot_path"}, {"score": 0.002178074693316872, "phrase": "dead-store_elimination"}, {"score": 0.0021049977753042253, "phrase": "palsberg's_framework"}], "paper_keywords": ["tracing compilation", " abstract interpretation", " trace semantics"], "paper_abstract": "Tracing just-in-time compilation is a popular compilation schema for the efficient implementation of dynamic languages, which is commonly used for JavaScript, Python, and PHP. It relies on two key ideas. First, it monitors the execution of the program to detect so-called hot paths, i.e., the most frequently executed paths. Then, it uses some store information available at runtime to optimize hot paths. The result is a residual program where the optimized hot paths are guarded by sufficient conditions ensuring the equivalence of the optimized path and the original program. The residual program is persistently mutated during its execution, e. g., to add new optimized paths or to merge existing paths. Tracing compilation is thus fundamentally different than traditional static compilation. Nevertheless, despite the remarkable practical success of tracing compilation, very little is known about its theoretical foundations. We formalize tracing compilation of programs using abstract interpretation. The monitoring (viz., hot path detection) phase corresponds to an abstraction of the trace semantics that captures the most frequent occurrences of sequences of program points together with an abstraction of their corresponding stores, e. g., a type environment. The optimization (viz., residual program generation) phase corresponds to a transform of the original program that preserves its trace semantics up to a given observation as modeled by some abstraction. We provide a generic framework to express dynamic optimizations and to prove them correct. We instantiate it to prove the correctness of dynamic type specialization. We show that our framework is more general than a recent model of tracing compilation introduced in POPL 2011 by Guo and Palsberg (based on operational bisimulations). In our model we can naturally express hot path reentrance and common optimizations like dead-store elimination, which are either excluded or unsound in Guo and Palsberg's framework.", "paper_title": "Tracing Compilation by Abstract Interpretation", "paper_id": "WOS:000331120500006"}