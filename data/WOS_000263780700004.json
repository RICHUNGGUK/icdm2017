{"auto_keywords": [{"score": 0.049696520070272025, "phrase": "closed_sequential_patterns"}, {"score": 0.00481495049065317, "phrase": "incremental_maintenance"}, {"score": 0.004738325072560588, "phrase": "large_databases"}, {"score": 0.004700468701207975, "phrase": "recent_study"}, {"score": 0.00458869631642791, "phrase": "closed_patterns"}, {"score": 0.00455202992136173, "phrase": "compressed_patterns"}, {"score": 0.004425979295788883, "phrase": "efficiency_problem"}, {"score": 0.00437302709192313, "phrase": "traditional_frequent_pattern_mining_methods"}, {"score": 0.00426900754050533, "phrase": "exact_or_approximate_supports"}, {"score": 0.004217925382695912, "phrase": "complete_set"}, {"score": 0.0041842092128678105, "phrase": "frequent_patterns"}, {"score": 0.0038614646772981848, "phrase": "compact_sequential_patterns"}, {"score": 0.0037999551521987426, "phrase": "sequence_databases"}, {"score": 0.0034926916198124484, "phrase": "slight_change"}, {"score": 0.0033417571465258, "phrase": "compact_patterns"}, {"score": 0.0029982770062678926, "phrase": "dynamic_sequence_database_environment"}, {"score": 0.0029623549392492777, "phrase": "compact_structure"}, {"score": 0.0029504765287722465, "phrase": "cstree"}, {"score": 0.002636489396049042, "phrase": "incremental_update"}, {"score": 0.0025840347813610815, "phrase": "full_use"}, {"score": 0.002442634456448208, "phrase": "unnecessary_node_extension"}, {"score": 0.0023653276631862958, "phrase": "incremental_update_process"}, {"score": 0.0023369711258107244, "phrase": "thorough_experimental_study"}, {"score": 0.0022812715029149216, "phrase": "proposed_algorithms"}, {"score": 0.002209060366991921, "phrase": "clospan"}, {"score": 0.002191366809047192, "phrase": "bide"}], "paper_keywords": ["Data mining", " Frequent patterns", " Closed sequential patterns", " Incremental maintenance"], "paper_abstract": "Recent study shows that mining compact frequent patterns (such as closed patterns and compressed patterns) can alleviate the interpretability and efficiency problem encountered by traditional frequent pattern mining methods. Compact frequent patterns keep exact or approximate supports of a complete set of frequent patterns, and the number of them is often orders of magnitude smaller. Several efficient algorithms have been proposed to mine compact sequential patterns. However, sequence databases are not always static. Sequences (or items) are often added to and deleted from databases. A slight change made on a database may lead to the change of compact patterns. Mining from scratch is very time-consuming and thus infeasible. In this paper, we explore how to efficiently maintain closed sequential patterns in a dynamic sequence database environment. A compact structure CSTree is designed to keep closed sequential patterns, and its nice properties are carefully studied. Two efficient algorithms, IMCS(A) and IMCS(D), are developed to maintain the CSTree upon incremental update. The algorithms make full use of the properties of CSTree to find nodes whose states are obsolete and avoid unnecessary node extension and closure checking operations to accelerate the incremental update process. A thorough experimental study on various real and synthetic datasets shows that the proposed algorithms outperform the state-of-the-art algorithms - PrefixSpan, CloSpan, BIDE and a recently proposed incremental mining algorithm IncSpan by about a factor of 4 to more than an order of magnitude. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Efficient algorithms for incremental maintenance of closed sequential patterns in large databases", "paper_id": "WOS:000263780700004"}