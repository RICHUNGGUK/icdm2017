{"auto_keywords": [{"score": 0.04665430102855293, "phrase": "typing_context"}, {"score": 0.015369292910899925, "phrase": "incremental_type_checking"}, {"score": 0.011392724712304765, "phrase": "co-contextual_formulation"}, {"score": 0.00481495049065317, "phrase": "type_rules"}, {"score": 0.004600389726895716, "phrase": "associate_types"}, {"score": 0.0043703658695579085, "phrase": "type_checker"}, {"score": 0.004296264970612285, "phrase": "expression_tree"}, {"score": 0.004058180509184539, "phrase": "additional_context_information"}, {"score": 0.003746779951069909, "phrase": "otherwise_independent_subexpressions"}, {"score": 0.0035796471115594553, "phrase": "type_checking"}, {"score": 0.0031215289677725693, "phrase": "context_requirements"}, {"score": 0.0030337085953063125, "phrase": "type_checkers"}, {"score": 0.002982203248352076, "phrase": "expression_tree_bottom-up"}, {"score": 0.002881793492919646, "phrase": "independently_checked_subexpressions"}, {"score": 0.0026302120935562568, "phrase": "regular_context-based_formulation"}, {"score": 0.0025561788724870974, "phrase": "co-contextual_type_rules"}, {"score": 0.0024005409468262203, "phrase": "incremental_type_checkers"}, {"score": 0.0023732943832246367, "phrase": "pcf"}, {"score": 0.0022672718785099666, "phrase": "parametric_polymorphism"}, {"score": 0.0021659920594094407, "phrase": "co-contextual_type_checking"}, {"score": 0.0021049977753042253, "phrase": "standard_contextbased_type_checking"}], "paper_keywords": ["type checking", " type inference", " incremental", " co-contextual", " constraints", " tree folding"], "paper_abstract": "Type rules associate types to expressions given a typing context. As the type checker traverses the expression tree top-down, it extends the typing context with additional context information that becomes available. This way, the typing context coordinates type checking in otherwise independent subexpressions, which inhibits parallelization and incrementalization of type checking. We propose a co-contextual formulation of type rules that only take an expression as input and produce a type and a set of context requirements. Co-contextual type checkers traverse an expression tree bottom-up and merge context requirements of independently checked subexpressions. We describe a method for systematically constructing a co-contextual formulation of type rules from a regular context-based formulation and we show how co-contextual type rules give rise to incremental type checking. Using our method, we derive incremental type checkers for PCF and for extensions that introduce records, parametric polymorphism, and subtyping. Our performance evaluation shows that co-contextual type checking has performance comparable to standard contextbased type checking, and incrementalization can improve performance significantly.", "paper_title": "A Co-contextual Formulation of Type Rules and Its Application to Incremental Type Checking", "paper_id": "WOS:000367256500050"}