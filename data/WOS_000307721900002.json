{"auto_keywords": [{"score": 0.03481487178682438, "phrase": "podc"}, {"score": 0.005175432007227472, "phrase": "guerraoui"}, {"score": 0.00481495049065317, "phrase": "synchronous_distributed_algorithms"}, {"score": 0.004329630571352367, "phrase": "real_world"}, {"score": 0.0037133478610481994, "phrase": "synchronous_timing"}, {"score": 0.003584025547693836, "phrase": "asynchronous_executions"}, {"score": 0.003479692058963528, "phrase": "transformation_technique"}, {"score": 0.0034388111429203222, "phrase": "synchronous_algorithms"}, {"score": 0.0033984088755183287, "phrase": "indulgent_algorithms"}, {"score": 0.002984027623988469, "phrase": "time_complexity"}, {"score": 0.0029489527539649737, "phrase": "well-behaved_executions"}, {"score": 0.0028127163745564777, "phrase": "new_abstraction"}, {"score": 0.00266693888510356, "phrase": "participating_processes"}, {"score": 0.0025892330566358503, "phrase": "resulting_transformation"}, {"score": 0.002498961351132696, "phrase": "colorless_distributed_tasks"}, {"score": 0.002426137929553724, "phrase": "set_agreement"}, {"score": 0.002259883463607508, "phrase": "colored_tasks"}, {"score": 0.0021682027434117095, "phrase": "renaming_problem"}, {"score": 0.0021049977753042253, "phrase": "first_indulgent_renaming_algorithm"}], "paper_keywords": ["Distributed algorithms", " Asynchrony", " Indulgent algorithms"], "paper_abstract": "Synchronous distributed algorithms are easier to design and prove correct than algorithms that tolerate asynchrony. Yet, in the real world, networks experience asynchrony and other timing anomalies. In this paper, we address the question of how to efficiently transform an algorithm that relies on synchronous timing into an algorithm that tolerates asynchronous executions. We introduce a transformation technique from synchronous algorithms to indulgent algorithms (Guerraoui, in PODC, pp. 289-297, 2000), which induces only a constant overhead in terms of time complexity in well-behaved executions. Our technique is based on a new abstraction we call an asynchrony detector, which the participating processes implement collectively. The resulting transformation works for the class of colorless distributed tasks, including consensus and set agreement. Interestingly, we also show that our technique is relevant for colored tasks, by applying it to the renaming problem, to obtain the first indulgent renaming algorithm.", "paper_title": "Generating Fast Indulgent Algorithms", "paper_id": "WOS:000307721900002"}