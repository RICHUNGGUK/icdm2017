{"auto_keywords": [{"score": 0.004086010164600727, "phrase": "whole-program_analysis"}, {"score": 0.003817548980308163, "phrase": "embedded_software"}, {"score": 0.003648411055689428, "phrase": "static_memory_allocation"}, {"score": 0.0035666632046674153, "phrase": "harvard-architecture_microcontrollers"}, {"score": 0.0034867406208212146, "phrase": "on-chip_ram."}, {"score": 0.0033893426032054366, "phrase": "embedded_applications"}, {"score": 0.0033511469200347907, "phrase": "avr_microcontrollers"}, {"score": 0.0032760377953971248, "phrase": "ram_usage"}, {"score": 0.003026127736667187, "phrase": "dead-data_elimination_pass"}, {"score": 0.002859345731792013, "phrase": "total_ram_savings"}, {"score": 0.0026262033625248445, "phrase": "flexible_spectrum"}, {"score": 0.0025673005153462707, "phrase": "ram_consumption"}, {"score": 0.0025383451160985488, "phrase": "rom_consumption"}, {"score": 0.002495521662819317, "phrase": "cpu_efficiency"}, {"score": 0.0021655683497137234, "phrase": "good_value_proposition"}, {"score": 0.0021049977753042253, "phrase": "desired_tradeoffs"}], "paper_keywords": ["data compression", " embedded software", " memory optimization", " static analysis", " TinyOS", " sensor networks"], "paper_abstract": "We present offline RAM compression, an automated source-to-source transformation that reduces a program's data size. Statically allocated scalars, pointers, structures, and arrays are encoded and packed based on the results of a whole-program analysis in the value set and pointer set domains. We target embedded software written in C that relies heavily on static memory allocation and runs on Harvard-architecture microcontrollers supporting just a few KB of on-chip RAM. On a collection of embedded applications for AVR microcontrollers, our transformation reduces RAM usage by an average of 12%, in addition to a 10% reduction through a dead-data elimination pass that is also driven by our whole-program analysis, for a total RAM savings of 22%. We also developed a technique for giving developers access to a flexible spectrum of tradeoffs between RAM consumption, ROM consumption, and CPU efficiency. This technique is based on a model for estimating the cost/benefit ratio of compressing each variable and then selectively compressing only those variables that present a good value proposition in terms of the desired tradeoffs.", "paper_title": "Offline compression for on-chip RAM", "paper_id": "WOS:000253409000036"}