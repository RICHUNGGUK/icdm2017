{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "logic_programs"}, {"score": 0.04158629056780342, "phrase": "definite_logic_programs"}, {"score": 0.004483120978156604, "phrase": "important_and_well-studied_property"}, {"score": 0.004174064076143015, "phrase": "almost_all_approaches"}, {"score": 0.004089725258435817, "phrase": "automated_termination_analysis"}, {"score": 0.0038467574225322086, "phrase": "real-world_prolog_programs"}, {"score": 0.0036928221419965253, "phrase": "cut_operator"}, {"score": 0.003509006038574667, "phrase": "novel_pre-processing_method"}, {"score": 0.0033685408148574846, "phrase": "prolog_programs"}, {"score": 0.0030414140732789186, "phrase": "cut-free_program"}, {"score": 0.002889928791032578, "phrase": "original_program"}, {"score": 0.0021049977753042253, "phrase": "extensive_experiments"}], "paper_keywords": ["automated termination analysis", " cut", " definite logic programs"], "paper_abstract": "Termination is an important and well-studied property for logic programs. However, almost all approaches for automated termination analysis focus on definite logic programs, whereas real-world Prolog programs typically use the cut operator. We introduce a novel pre-processing method which automatically transforms Prolog programs into logic programs without cuts, where termination of the cut-free program implies termination of the original program. Hence after this pre-processing, any technique for proving termination of definite logic programs can be applied. We implemented this pre-processing in our termination prover AProVE and evaluated it successfully with extensive experiments.", "paper_title": "Automated termination analysis for logic programs with cut", "paper_id": "WOS:000280508200002"}