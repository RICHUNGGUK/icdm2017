{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_behavior"}, {"score": 0.040391456401351215, "phrase": "intended_software_behavior"}, {"score": 0.004714870513595247, "phrase": "cross-references"}, {"score": 0.0045846424310611745, "phrase": "software_dynamic_behavior"}, {"score": 0.004457995891964028, "phrase": "research_hotpot"}, {"score": 0.004395984840790689, "phrase": "difficult_point"}, {"score": 0.0042446888127531945, "phrase": "trusted_computing"}, {"score": 0.004185632403886255, "phrase": "dynamic_trustiness_model"}, {"score": 0.003275093899046286, "phrase": "hard_nut"}, {"score": 0.0028664985822266344, "phrase": "software_trajectory"}, {"score": 0.002767696345005216, "phrase": "binary_file"}, {"score": 0.0025087506382067536, "phrase": "suitable_size_function_chain"}, {"score": 0.002456486927713543, "phrase": "input_variables"}], "paper_keywords": ["Software behavior", " trusted computing", " cross-reference", " reverse analysis"], "paper_abstract": "Trustiness of software dynamic behavior is always the research hotpot and difficult point in the field of trusted computing. Dynamic trustiness model of software behavior relies on three basic aspects including the extraction and description of intended software behavior; real-time monitoring of software behavior and a contrastive analysis of intended software behavior and running-time behavior. It is a hard nut to extract and describe intended software behavior. In our paper; we present a method of extracting and describing of software trajectory based on cross-references of binary file. Our method is thinking from the perspective of the attacker; and constructing suitable size function chain starting at input variables. Then we optimize and simplify of the chain in order to make it practical. Our specific experiment indicates the effectiveness of our way.", "paper_title": "Research on Trustiness of Software Behavior Based on Cross-References", "paper_id": "WOS:000369374300010"}