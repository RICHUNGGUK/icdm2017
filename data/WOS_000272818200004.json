{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "loop_functions"}, {"score": 0.004642105253191792, "phrase": "modern_software_applications"}, {"score": 0.004475436844227947, "phrase": "malicious_code_concerns"}, {"score": 0.0043147264956783565, "phrase": "third-party_software_development"}, {"score": 0.0041294419262414995, "phrase": "program_inspection"}, {"score": 0.004039792863335641, "phrase": "quality_assurance_method"}, {"score": 0.003923269062268688, "phrase": "great_premium"}, {"score": 0.0033397385936467204, "phrase": "c-like_programming_languages"}, {"score": 0.0026613618933208467, "phrase": "mathematical_results"}, {"score": 0.0023669270875629205, "phrase": "automated_tool"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Functional extraction", " Loop function", " Sub-goal induction theorem", " Mills' theorem"], "paper_abstract": "The criticality of modern software applications, the pervasiveness of malicious code concerns, the emergence of third-party software development, and the preponderance of program inspection as a quality assurance method all place a great premium on the ability to analyze programs and derive their function in all circumstances of use and all its functional detail. For C-like programming languages, one of the most challenging tasks in this endeavor is the derivation of loop functions. In this paper, we outline the premises of our approach to this problem, present some mathematical results, and discuss how these results can be used as a basis for building an automated tool that derives the function of while loops tinder some conditions. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Mathematics for reasoning about loop functions", "paper_id": "WOS:000272818200004"}