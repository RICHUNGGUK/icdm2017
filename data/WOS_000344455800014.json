{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "probabilistic_assertions"}, {"score": 0.00864127197457754, "phrase": "traditional_assertions"}, {"score": 0.008569373200293422, "phrase": "correctness_properties"}, {"score": 0.00797169601260715, "phrase": "mayhap"}, {"score": 0.005639297404164377, "phrase": "probabilistic_evaluation"}, {"score": 0.004617187934074393, "phrase": "program_execution"}, {"score": 0.004502433187097914, "phrase": "probabilistic_outcomes"}, {"score": 0.004174929128880472, "phrase": "sensor_data"}, {"score": 0.0040882422992520925, "phrase": "unreliable_hardware"}, {"score": 0.0038227112550093863, "phrase": "probabilistic_correctness_properties"}, {"score": 0.003727628340195049, "phrase": "new_probabilistic_evaluation_approach"}, {"score": 0.003589404014552974, "phrase": "boolean_expressions"}, {"score": 0.0032046343506232588, "phrase": "specific_inputs"}, {"score": 0.003138030910104256, "phrase": "input_space"}, {"score": 0.0030599258491447946, "phrase": "first_performing_distribution_extraction"}, {"score": 0.002971249577042111, "phrase": "bayesian_network"}, {"score": 0.002909482525367989, "phrase": "statistical_properties"}, {"score": 0.002813307389456184, "phrase": "assertion_probabilities"}, {"score": 0.002586513876943306, "phrase": "bayesian_network_representation"}, {"score": 0.0022232633360792222, "phrase": "approximate_computation"}, {"score": 0.0021049977753042253, "phrase": "useful_correctness_properties"}], "paper_keywords": ["Languages", " Reliability", " Probabilistic programming", " approximate computing", " data obfuscation", " differential privacy", " sensors", " symbolic execution"], "paper_abstract": "Traditional assertions express correctness properties that must hold on every program execution. However, many applications have probabilistic outcomes and consequently their correctness properties are also probabilistic (e. g., they identify faces in images, consume sensor data, or run on unreliable hardware). Traditional assertions do not capture these correctness properties. This paper proposes that programmers express probabilistic correctness properties with probabilistic assertions and describes a new probabilistic evaluation approach to efficiently verify these assertions. Probabilistic assertions are Boolean expressions that express the probability that a property will be true in a given execution rather than asserting that the property must always be true. Given either specific inputs or distributions on the input space, probabilistic evaluation verifies probabilistic assertions by first performing distribution extraction to represent the program as a Bayesian network. Probabilistic evaluation then uses statistical properties to simplify this representation to efficiently compute assertion probabilities directly or with sampling. Our approach is a mix of both static and dynamic analysis: distribution extraction statically builds and optimizes the Bayesian network representation and sampling dynamically interprets this representation. We implement our approach in a tool called MAYHAP for C and C++ programs. We evaluate expressiveness, correctness, and performance of MAYHAP on programs that use sensors, perform approximate computation, and obfuscate data for privacy. Our case studies demonstrate that probabilistic assertions describe useful correctness properties and that MAYHAP efficiently verifies them.", "paper_title": "Expressing and Verifying Probabilistic Assertions", "paper_id": "WOS:000344455800014"}