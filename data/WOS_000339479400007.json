{"auto_keywords": [{"score": 0.048241894792168345, "phrase": "memory_accesses"}, {"score": 0.015719716506582538, "phrase": "memory_access_reduction"}, {"score": 0.012580491237038013, "phrase": "loop_kernels"}, {"score": 0.011528199241875753, "phrase": "lsmar_technique"}, {"score": 0.004675768396728975, "phrase": "dsp_applications"}, {"score": 0.004585212379675535, "phrase": "big-time_overhead"}, {"score": 0.004430920292612374, "phrase": "performance_gap"}, {"score": 0.004345085569121329, "phrase": "main_memory"}, {"score": 0.003940122359770492, "phrase": "hidden_redundant_load_operations"}, {"score": 0.0037888687452790953, "phrase": "partial_scheduling"}, {"score": 0.0037519679864796906, "phrase": "newly_generated_register_operations"}, {"score": 0.0036079110889031874, "phrase": "data_dependence"}, {"score": 0.003572766402294553, "phrase": "memory_access_operations"}, {"score": 0.003303617297414837, "phrase": "timing_performance"}, {"score": 0.0031612033120065747, "phrase": "trimaran_compiler"}, {"score": 0.003024909947609294, "phrase": "dspstone"}, {"score": 0.0029954274292797027, "phrase": "mibench"}, {"score": 0.002951739421935396, "phrase": "cycle-accurate_simulator"}, {"score": 0.0029086869572567072, "phrase": "trimaran_infrastructure"}, {"score": 0.0028662606272282926, "phrase": "experimental_results"}, {"score": 0.002333193766510394, "phrase": "code_size"}, {"score": 0.0022107428653358715, "phrase": "embedded_systems"}, {"score": 0.0021784745589727246, "phrase": "prior_work"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["DSP applications", " loop optimization", " memory optimization", " instruction scheduling"], "paper_abstract": "Memory accesses introduce big-time overhead and power consumption because of the performance gap between processors and main memory. This paper describes and evaluates a technique, loop scheduling with memory access reduction (LSMAR), that replaces hidden redundant load operations with register operations in loop kernels and performs partial scheduling for newly generated register operations subject to register constraints. By exploiting data dependence of memory access operations, the LSMAR technique can effectively reduce the number of memory accesses of loop kernels, thereby improving timing performance. The technique has been implemented into the Trimaran compiler and evaluated using a set of benchmarks from DSPstone and MiBench on the cycle-accurate simulator of the Trimaran infrastructure. The experimental results show that when the LSMAR technique is applied, the number of memory accesses can be reduced by 18.47% on average over the benchmarks when it is not applied. The measurements also indicate that the optimizations only lead to an average 1.41% increase in code size. With such small code size expansion, the technique is more suitable for embedded systems compared with prior work. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "Loop scheduling with memory access reduction subject to register constraints for DSP applications", "paper_id": "WOS:000339479400007"}