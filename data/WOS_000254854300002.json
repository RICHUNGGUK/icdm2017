{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_source_code"}, {"score": 0.004674952036988355, "phrase": "aspect-oriented_mechanisms"}, {"score": 0.004278807087784626, "phrase": "refactoring_process"}, {"score": 0.0040334640350288, "phrase": "java_source_code_base"}, {"score": 0.003858697684681798, "phrase": "functionally_equivalent_aspectj_source_code_base"}, {"score": 0.0031845067058084583, "phrase": "aspect-oriented_source_code"}, {"score": 0.002914288956035066, "phrase": "scattered_implementation_elements"}, {"score": 0.002706659627293686, "phrase": "internal_reorganization"}, {"score": 0.0025892330566358503, "phrase": "extracted_aspects"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["refactoring", " aspect-oriented programming", " design patterns"], "paper_abstract": "This paper describes a refactoring process that transforms a Java source code base into a functionally equivalent AspectJ source code base. The process illustrates the use of a collection of refactorings for aspect-oriented source code, covering the extraction of scattered implementation elements to aspects, the internal reorganization of the extracted aspects and the extraction of commonalities to super-aspects. Copyright (c) 2007 John Wiley & Sons, Ltd.", "paper_title": "An illustrative example of refactoring object-oriented source code with aspect-oriented mechanisms", "paper_id": "WOS:000254854300002"}