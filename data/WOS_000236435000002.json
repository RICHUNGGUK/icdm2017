{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "unbalanced_merge-sort"}, {"score": 0.004548253531664032, "phrase": "successive_merging"}, {"score": 0.004462663711734448, "phrase": "ordered_subsequences"}, {"score": 0.0038332390893263844, "phrase": "merge-sort_algorithm"}, {"score": 0.003199687131875466, "phrase": "arbitrary_merges"}, {"score": 0.0030802351224657673, "phrase": "quasi-ordered_subsequences"}, {"score": 0.0027741761880779535, "phrase": "detailed_analysis"}, {"score": 0.002359759876402679, "phrase": "key_comparisons"}, {"score": 0.0021049977753042253, "phrase": "previous_known_unbalanced_merge-sort_algorithms"}], "paper_keywords": ["design of algorithms", " sorting", " experimental analysis", " data structures"], "paper_abstract": "Sorting algorithms based on successive merging of ordered subsequences are widely used, due to their efficiency and to their intrinsically parallelizable structure. Among them, the merge-sort algorithm emerges indisputably as the most prominent method. In this paper we present a variant of merge-sort that proceeds through arbitrary merges between pairs of quasi-ordered Subsequences, no matter which their size may be. We provide a detailed analysis.. showing that a set of n elements can be sorted by performing at most n[logn] key comparisons. Our method has the same optimal asymptotic time and space complexity as compared to previous known unbalanced merge-sort algorithms, but experimental results show that it behaves significantly better in practice. (c) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Efficient unbalanced merge-sort", "paper_id": "WOS:000236435000002"}