{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_types"}, {"score": 0.004417848254181138, "phrase": "abstract_data_types"}, {"score": 0.003949974260471287, "phrase": "first_order_logic"}, {"score": 0.003471135453226184, "phrase": "predicate_interpretation"}, {"score": 0.002726740692380339, "phrase": "corresponding_property_preservation_results"}, {"score": 0.0026116610153271943, "phrase": "abstraction_refinement_property"}, {"score": 0.0023346234464901978, "phrase": "existing_abstraction"}, {"score": 0.002197801146305747, "phrase": "equationally_specified_abstractions"}, {"score": 0.0021049977753042253, "phrase": "equationally_specified_abstract_data_types"}], "paper_keywords": ["data type", " universal algebra", " verification", " abstraction"], "paper_abstract": "The use of abstraction in the context of abstract data types, is investigated. Properties to be checked are formulas in a first order logic under Kleene's 3-valued interpretation. Abstractions are defined as pairs consisting of a congruence and a predicate interpretation. Three types of abstractions are considered, for all for all, for all there exists, and there exists(0,1)for all, and for each of them corresponding property preservation results are established. An abstraction refinement property is also obtained. It shows how one can pass from an existing abstraction to a ( less) finer one. Finally, equationally specified abstractions in the context of equationally specified abstract data types are discussed and exemplified.", "paper_title": "Abstractions of data types", "paper_id": "WOS:000236641300006"}