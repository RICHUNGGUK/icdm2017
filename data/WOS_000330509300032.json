{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reuse_distance_analysis"}, {"score": 0.042842687050832315, "phrase": "data_locality"}, {"score": 0.010826551912589428, "phrase": "dependence-preserving_transformations"}, {"score": 0.009823987972421695, "phrase": "data_locality_enhancement"}, {"score": 0.009680323612210983, "phrase": "execution_trace"}, {"score": 0.009371547227429243, "phrase": "cdag"}, {"score": 0.004786519708868553, "phrase": "dynamic_analysis_for_characterization_of_data_locality_potential"}, {"score": 0.004758255999331728, "phrase": "emerging_computer_architectures"}, {"score": 0.004660634721704355, "phrase": "peak_processing_rate"}, {"score": 0.004633110884380358, "phrase": "memory_bandwidth"}, {"score": 0.004565007074039171, "phrase": "recent_studies"}, {"score": 0.004538045400396629, "phrase": "exascale_architectural_trends"}, {"score": 0.004392565073466714, "phrase": "energy_cost"}, {"score": 0.00436661740263741, "phrase": "data_movement"}, {"score": 0.004239150469974544, "phrase": "data_locality_properties"}, {"score": 0.004042866322177613, "phrase": "memory_address"}, {"score": 0.003995226376780718, "phrase": "valuable_tool"}, {"score": 0.003959863717046575, "phrase": "data_locality_characterization"}, {"score": 0.003901617424466747, "phrase": "single_reuse_distance_analysis"}, {"score": 0.003754140294151593, "phrase": "fully_associative_lru_cache"}, {"score": 0.0036444868761853293, "phrase": "minimum_bandwidth_requirements"}, {"score": 0.0036229421570951807, "phrase": "different_levels"}, {"score": 0.0035908627899097407, "phrase": "memory_hierarchy"}, {"score": 0.003444861556939966, "phrase": "particular_execution_order"}, {"score": 0.0033442114331500407, "phrase": "potential_improvement"}, {"score": 0.003265805876551917, "phrase": "execution_schedule"}, {"score": 0.003123700735336378, "phrase": "novel_dynamic_analysis_approach"}, {"score": 0.0030868583963299698, "phrase": "inherent_locality_properties"}, {"score": 0.002874726518572154, "phrase": "computational-directed_acyclic_graph"}, {"score": 0.002824005136794786, "phrase": "data_dependences"}, {"score": 0.0027577621502315594, "phrase": "convex_subsets"}, {"score": 0.002530359917257626, "phrase": "single_specific_order"}, {"score": 0.0023987234349331383, "phrase": "valuable_role"}, {"score": 0.0023774580561555913, "phrase": "promising_code_regions"}, {"score": 0.0023633857274905977, "phrase": "manual_transformation"}, {"score": 0.002301081571414049, "phrase": "compiler_transformations"}, {"score": 0.0021813467128927347, "phrase": "case_studies"}, {"score": 0.0021049977753042253, "phrase": "lower_data_movement_costs"}], "paper_keywords": ["Data locality", " dynamic analysis", " tiling"], "paper_abstract": "Emerging computer architectures will feature drastically decreased flops/byte (ratio of peak processing rate to memory bandwidth) as highlighted by recent studies on Exascale architectural trends. Further, flops are getting cheaper, while the energy cost of data movement is increasingly dominant. The understanding and characterization of data locality properties of computations is critical in order to guide efforts to enhance data locality. Reuse distance analysis of memory address traces is a valuable tool to perform data locality characterization of programs. A single reuse distance analysis can be used to estimate the number of cache misses in a fully associative LRU cache of any size, thereby providing estimates on the minimum bandwidth requirements at different levels of the memory hierarchy to avoid being bandwidth bound. However, such an analysis only holds for the particular execution order that produced the trace. It cannot estimate potential improvement in data locality through dependence-preserving transformations that change the execution schedule of the operations in the computation. In this article, we develop a novel dynamic analysis approach to characterize the inherent locality properties of a computation and thereby assess the potential for data locality enhancement via dependence-preserving transformations. The execution trace of a code is analyzed to extract a Computational-Directed Acyclic Graph (CDAG) of the data dependences. The CDAG is then partitioned into convex subsets, and the convex partitioning is used to reorder the operations in the execution trace to enhance data locality. The approach enables us to go beyond reuse distance analysis of a single specific order of execution of the operations of a computation in characterization of its data locality properties. It can serve a valuable role in identifying promising code regions for manual transformation, as well as assessing the effectiveness of compiler transformations for data locality enhancement. We demonstrate the effectiveness of the approach using a number of benchmarks, including case studies where the potential shown by the analysis is exploited to achieve lower data movement costs and better performance.", "paper_title": "Beyond Reuse Distance Analysis: Dynamic Analysis for Characterization of Data Locality Potential", "paper_id": "WOS:000330509300032"}