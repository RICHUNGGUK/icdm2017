{"auto_keywords": [{"score": 0.044587302896904546, "phrase": "javascript"}, {"score": 0.00481495049065317, "phrase": "dynamic_detection_of_object_capability_violations"}, {"score": 0.004759635663291431, "phrase": "model_checking"}, {"score": 0.004544629724830453, "phrase": "new_tool"}, {"score": 0.004440780432053927, "phrase": "dynamic_object_capability_tracer"}, {"score": 0.004191377834552202, "phrase": "capability_leaks"}, {"score": 0.004119313626110943, "phrase": "object_capability_system"}, {"score": 0.0037121208432871118, "phrase": "untrusted_third-_party_code"}, {"score": 0.0034233569308012982, "phrase": "actual_execution"}, {"score": 0.003287482882222731, "phrase": "simple_way"}, {"score": 0.0032122679403131537, "phrase": "references_untrusted_code"}, {"score": 0.0028944757265206332, "phrase": "docat"}, {"score": 0.0027795345823932406, "phrase": "source_code"}, {"score": 0.0027159120461553634, "phrase": "sweet"}, {"score": 0.0025044739801784546, "phrase": "proxies"}, {"score": 0.0021668575137633317, "phrase": "common_ways"}, {"score": 0.002141898874982106, "phrase": "untrusted_code"}], "paper_keywords": ["Languages", " JavaScript", " object capability", " model checking", " proxies", " tool"], "paper_abstract": "In this paper we present a new tool called DOCaT (Dynamic Object Capability Tracer), a model checker for JavaScript that detects capability leaks in an object capability system. DOCaT includes an editor that highlights the sections of code that can be potentially transferred to untrusted third- party code along with a trace showing how the code could be leaked in an actual execution. This code highlighting provides a simple way of visualizing the references untrusted code potentially has access to and helps programmers to discover if their code is leaking more capabilities then required. DOCaT is implemented using a combination of source code rewriting (using Sweet. js, a JavaScript macro system), dynamic behavioral intercession (Proxies, introduced in ES6, the most recent version of JavaScript), and model checking. Together these methods are able to locate common ways for untrusted code to elevate its authority.", "paper_title": "Dynamic Detection of Object Capability Violations Through Model Checking", "paper_id": "WOS:000357123600011"}