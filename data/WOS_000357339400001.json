{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "progressive_and_explicit_refinement"}, {"score": 0.048970045726729895, "phrase": "multidimensional_data-flow_applications"}, {"score": 0.004648609688625397, "phrase": "uml_marte._process"}, {"score": 0.004567596860086148, "phrase": "data-flow_graphs"}, {"score": 0.00438399094249306, "phrase": "computation-intensive_embedded_systems"}, {"score": 0.004183137595671171, "phrase": "static_schedules"}, {"score": 0.00408617426304956, "phrase": "dynamic_overhead"}, {"score": 0.0040385352882334235, "phrase": "increase_predictability"}, {"score": 0.003968112038249246, "phrase": "resulting_schedule"}, {"score": 0.0038989120088094185, "phrase": "total_ordering"}, {"score": 0.0038534477978822133, "phrase": "actor_computations"}, {"score": 0.003591542373891629, "phrase": "initial_system"}, {"score": 0.0030833537429977797, "phrase": "logical_time"}, {"score": 0.0030295361111006866, "phrase": "explicitly_all_the_valid_schedules"}, {"score": 0.00284009509859163, "phrase": "proposed_approach"}, {"score": 0.002555247330102505, "phrase": "execution_platform"}, {"score": 0.0024379730432321656, "phrase": "uml_marte_concepts"}, {"score": 0.0023953929817357882, "phrase": "resulting_models"}, {"score": 0.002272053079580848, "phrase": "existing_tools"}, {"score": 0.0022455164874830777, "phrase": "early_design_validation"}, {"score": 0.002206290313627494, "phrase": "whole_approach"}, {"score": 0.002142426911242168, "phrase": "typical_application"}, {"score": 0.0021049977753042253, "phrase": "radar_signal_processing"}], "paper_keywords": ["MARTE", " Clock constraint specification language", " Embedded system design", " Logical time", " Repetitive structure modeling", " Multidimensional data-flow"], "paper_abstract": "Process networks and data-flow graphs are used to capture data-dependencies in computation-intensive embedded systems. Their simplicity allows the computation of static schedules that reduce the dynamic overhead and increase predictability. The resulting schedule is a total ordering of actor computations and communications. It can therefore become an over-specification of the initial system when several schedules are valid. This is particularly the case for multidimensional data-flow applications. We propose a methodology to avoid such an over-specification. We propose to use logical time to capture explicitly all the valid schedules for a given multi-dimensional data-flow model. Then, we show that the proposed approach allows for a progressive and explicit refinement of computation scheduling that also captures constraints imposed by the environment and the execution platform. All this is achieved by using uml marte concepts and the resulting models can be considered for simulation and analysis with existing tools for early design validation. The whole approach is validated on a typical application devoted to radar signal processing.", "paper_title": "Progressive and explicit refinement of scheduling for multidimensional data-flow applications using UML MARTE", "paper_id": "WOS:000357339400001"}