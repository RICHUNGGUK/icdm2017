{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gpu_strategies"}, {"score": 0.004731928080086235, "phrase": "unstructured_mesh_physics"}, {"score": 0.004337710093279712, "phrase": "physics_algorithms"}, {"score": 0.003907586297783078, "phrase": "graphics_processing_units"}, {"score": 0.0037411604449359794, "phrase": "typical_strategies"}, {"score": 0.00367658459781873, "phrase": "gpu_memory_management"}, {"score": 0.003399466007862412, "phrase": "memory_accesses"}, {"score": 0.003170667618004276, "phrase": "irregular_memory_storage_patterns"}, {"score": 0.002880927789104712, "phrase": "initial_gpu_version"}, {"score": 0.0028065957753430713, "phrase": "typical_unstructured_mesh_kernel"}, {"score": 0.002237477619351199, "phrase": "original_cpu_code"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["advanced architectures", " GPU", " unstructured mesh"], "paper_abstract": "There have been few efforts to date to write physics algorithms for general unstructured meshes (meshes composed of arbitrary polygons/polyhedra) on graphics processing units (GPUs). Typical strategies for GPU memory management, such as double-buffering and coalescing memory accesses, are difficult to apply to the irregular memory storage patterns of unstructured meshes. This paper presents results from an initial GPU version of a typical unstructured mesh kernel. Three different memory management strategies are described and implemented. Timing results for all three strategies are presented, in some cases showing speedups of over 20 times compared with the original CPU code.Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "A comparison of GPU strategies for unstructured mesh physics", "paper_id": "WOS:000321697100003"}