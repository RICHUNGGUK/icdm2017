{"auto_keywords": [{"score": 0.0496213341565463, "phrase": "application-specific_instruction-set_processors"}, {"score": 0.00481495049065317, "phrase": "architectural_enhancement_and_system_software_support_for_program_code_integrity_monitoring"}, {"score": 0.004633429997452688, "phrase": "computer_system"}, {"score": 0.004501774379030109, "phrase": "malicious_security_attacks"}, {"score": 0.004311241567238011, "phrase": "instruction_level"}, {"score": 0.0042495320879288615, "phrase": "code_modifications"}, {"score": 0.0039729853486821995, "phrase": "generalized_methodology"}, {"score": 0.003916098498242888, "phrase": "code_integrity"}, {"score": 0.003714368305523811, "phrase": "machine_instructions"}, {"score": 0.0035570425396761122, "phrase": "hardware_monitor"}, {"score": 0.0034392837410790293, "phrase": "processor's_execution_trace"}, {"score": 0.0032777653153451265, "phrase": "expected_program_behavior"}, {"score": 0.0029914213495838998, "phrase": "monitoring_mechanism"}, {"score": 0.002850875630787708, "phrase": "malicious_users"}, {"score": 0.002677964894127131, "phrase": "soft_errors"}, {"score": 0.0026523079380037706, "phrase": "code_injection_attacks"}, {"score": 0.0025155150482635688, "phrase": "operating_system"}, {"score": 0.002329009499335603, "phrase": "monitoring_architecture"}, {"score": 0.0023066880707738736, "phrase": "experimental_results"}, {"score": 0.002251813863195168, "phrase": "effective_hash_function_implementation"}, {"score": 0.002198242191529977, "phrase": "program_code_integrity_compromises"}, {"score": 0.002166711569953301, "phrase": "high_probability"}], "paper_keywords": ["Application-specific instruction-set processors (ASIPs)", " microarchitecture support for security and reliability", " microprocessors"], "paper_abstract": "Program code in a computer system can be altered either by malicious security attacks or by various faults in microprocessors. At the instruction level, all code modifications are manifested as bit flips. In this paper, we present a generalized methodology for monitoring code integrity at run-time in application-specific instruction-set processors. We embed monitoring microoperations in machine instructions, so the processor is augmented with a hardware monitor automatically. The monitor observes the processor's execution trace at run-time, checks whether it aligns with the expected program behavior, and signals any mismatches. Since the monitor works at a level below the instructions, the monitoring mechanism cannot be bypassed by software or compromised by malicious users. We discuss the ability and limitation of such monitoring mechanism for detecting both soft errors and code injection attacks. We propose two different schemes for managing the monitor, the operating system (OS) managed and application controlled, and design the constituent components within the monitoring architecture. Experimental results show that with an effective hash function implementation, our microarchitectural support can detect program code integrity compromises at a high probability with small area overhead and little performance degradation.", "paper_title": "Architectural Enhancement and System Software Support for Program Code Integrity Monitoring in Application-Specific Instruction-Set Processors", "paper_id": "WOS:000283548500002"}