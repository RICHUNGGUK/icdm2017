{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "bitwidth-aware_register_allocation"}, {"score": 0.012370903052728614, "phrase": "optimal_variable_packing"}, {"score": 0.010097452071601863, "phrase": "w-ssa_variables"}, {"score": 0.004545544875014869, "phrase": "general-purpose_processors"}, {"score": 0.004480571767714176, "phrase": "execution_time_performance"}, {"score": 0.004442032546224076, "phrase": "runtime_memory_requirements"}, {"score": 0.0042542311446793725, "phrase": "constrained_memory"}, {"score": 0.0041215546273657795, "phrase": "power_consumption"}, {"score": 0.0040978781692373005, "phrase": "embedded_processors"}, {"score": 0.004039277955304532, "phrase": "key_components"}, {"score": 0.003981512382183186, "phrase": "variable_packing_algorithm"}, {"score": 0.003947248753327447, "phrase": "multiple_narrow-width_variables"}, {"score": 0.0038796001080826778, "phrase": "tallam"}, {"score": 0.003857330549265882, "phrase": "gupta"}, {"score": 0.0037477480589453295, "phrase": "np-complete_problem"}, {"score": 0.0037262109150713466, "phrase": "arbitrary-width_variables"}, {"score": 0.00367290599188762, "phrase": "approximate_solution"}, {"score": 0.0035480536257462567, "phrase": "variable_packing_problem"}, {"score": 0.0034771855131805235, "phrase": "overall_packing"}, {"score": 0.003098460945716728, "phrase": "bitwidth_information"}, {"score": 0.003019083072274008, "phrase": "associated_bit_wastage"}, {"score": 0.0029163909226500597, "phrase": "nearest_next_power"}, {"score": 0.0028746373686059238, "phrase": "small_fraction"}, {"score": 0.0028416641115201974, "phrase": "total_number"}, {"score": 0.0027449901369969495, "phrase": "main_advantage"}, {"score": 0.002659256549464528, "phrase": "polynomial_time"}, {"score": 0.002452885602202018, "phrase": "variable_packing"}, {"score": 0.0024247382451294255, "phrase": "iterative_algorithm"}, {"score": 0.0022300809511147305, "phrase": "input_program"}, {"score": 0.002217245958060308, "phrase": "single_static_assignment"}, {"score": 0.0021171843749653455, "phrase": "significant_reduction"}, {"score": 0.0021049977753042253, "phrase": "dynamic_spilling"}], "paper_keywords": ["Algorithms", " Experimentation", " Performance", " Variable packing", " combined packing and coalescing"], "paper_abstract": "Bitwidth-aware register allocation has caught the attention of researchers aiming to effectively reduce the number of variables spilled into memory. For general-purpose processors, this improves the execution time performance and reduces runtime memory requirements (which in turn helps in the compilation of programs targeted to systems with constrained memory). Additionally, bitwidth-aware register allocation has been effective in reducing power consumption in embedded processors. One of the key components of bitwidth-aware register allocation is the variable packing algorithm that packs multiple narrow-width variables into one physical register. Tallam and Gupta [2003] have proved that optimal variable packing is an NP-complete problem for arbitrary-width variables and have proposed an approximate solution. In this article, we analyze the complexity of the variable packing problem and present three enhancements that improve the overall packing of variables. In particular, the improvements we describe are: (a) Width Static Single Assignment (W-SSA) form representation that splits the live range of a variable into several fixed-width live ranges (W-SSA variables); (b) PoTR Representation - use of powers-of-two representation for bitwidth information for W-SSA variables. Our empirical results have shown that the associated bit wastage resulting from the overapproximation of the widths of variables to the nearest next power of two is a small fraction compared to the total number of bits in use (approximate to 13%). The main advantage of this representation is that it leads to optimal variable packing in polynomial time; (c) Combined Packing and Coalescing - we discuss the importance of coalescing (combining variables whose live ranges do not interfere) in the context of variable packing and present an iterative algorithm to perform coalescing and packing of W-SSA variables represented in PoTR. Our experimental results show up to 76.00% decrease in the number of variables compared to the number of variables in the input program in Single Static Assignment (SSA) form. This reduction in the number of variables led to a significant reduction in dynamic spilling, packing, and unpacking instructions.", "paper_title": "Improved Bitwidth-Aware Variable Packing", "paper_id": "WOS:000324488500007"}