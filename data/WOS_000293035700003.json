{"auto_keywords": [{"score": 0.018001146713128583, "phrase": "mphf_description"}, {"score": 0.006844419468756955, "phrase": "successful_and_unsuccessful_searches"}, {"score": 0.006584124279381036, "phrase": "lookup_time"}, {"score": 0.005770525622065304, "phrase": "cpu_cache"}, {"score": 0.005493678485762543, "phrase": "minimal_perfect_hashing"}, {"score": 0.00481495049065317, "phrase": "indexing_internal_memory"}, {"score": 0.0047776860292876025, "phrase": "perfect_hash_function"}, {"score": 0.004704016000599167, "phrase": "injective_function"}, {"score": 0.004631476648170177, "phrase": "set_s"}, {"score": 0.004607545146600368, "phrase": "unique_values"}, {"score": 0.004443436195282021, "phrase": "hash_table"}, {"score": 0.004409034264881601, "phrase": "single_probe"}, {"score": 0.004374897510348334, "phrase": "minimal_perfect_hash_function"}, {"score": 0.004352286208389463, "phrase": "mphf"}, {"score": 0.004274058118188789, "phrase": "smallest_possible_range"}, {"score": 0.004208120996604837, "phrase": "hash_table_size"}, {"score": 0.0041863678337190225, "phrase": "exactly_the_number"}, {"score": 0.004143196873246147, "phrase": "s._mphfs"}, {"score": 0.004089856113955833, "phrase": "memory_efficient_storage"}, {"score": 0.004068711803266216, "phrase": "fast_retrieval"}, {"score": 0.004026749237490887, "phrase": "static_sets"}, {"score": 0.0039034303042299327, "phrase": "wasted_space"}, {"score": 0.003696606515746963, "phrase": "practical_implementations"}, {"score": 0.0034825937263286495, "phrase": "recent_results"}, {"score": 0.0031393948330209255, "phrase": "static_key_sets"}, {"score": 0.0030117504087859605, "phrase": "best_tradeoff"}, {"score": 0.002996163071478522, "phrase": "space_usage"}, {"score": 0.0029270094525230953, "phrase": "hash_schemes"}, {"score": 0.002904313736969863, "phrase": "linear_hashing"}, {"score": 0.0028892808275733594, "phrase": "quadratic_hashing"}, {"score": 0.002874325505148923, "phrase": "double_hashing"}, {"score": 0.0028594473715753336, "phrase": "dense_hashing"}, {"score": 0.002837274034386203, "phrase": "sparse_hashing"}, {"score": 0.002822587144384261, "phrase": "hopscotch_hashing"}, {"score": 0.0024155441065367078, "phrase": "first_scenario"}, {"score": 0.002359759876402679, "phrase": "compared_methods"}, {"score": 0.0023293259149436323, "phrase": "hash_table_entries"}, {"score": 0.002305260942304735, "phrase": "space_overhead"}, {"score": 0.00227552825359633, "phrase": "used_space"}, {"score": 0.0022520178263228056, "phrase": "key-value_pairs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Minimal perfect hashing", " Indexing internal memory"], "paper_abstract": "A perfect hash function (PHF) is an injective function that maps keys from a set S to unique values. Since no collisions occur, each key can be retrieved from a hash table with a single probe. A minimal perfect hash function (MPHF) is a PHF with the smallest possible range, that is, the hash table size is exactly the number of keys in S. MPHFs are widely used for memory efficient storage and fast retrieval of items from static sets. Differently from other hashing schemes, MPHFs completely avoid the problem of wasted space and wasted time to deal with collisions. Until recently, the amount of space to store an MPHF description for practical implementations found in the literature was O(log n) bits per key and therefore similar to the overhead of space of other hashing schemes. Recent results on MPHFs presented in the literature changed this scenario: an MPHF can now be described by approximately 2.6 bits per key. The objective of this paper is to show that MPHFs are, after the new recent results, a good option to index internal memory when static key sets are involved and both successful and unsuccessful searches are allowed. We have shown that MPHFs provide the best tradeoff between space usage and lookup time when compared with other open addressing and chaining hash schemes such as linear hashing, quadratic hashing, double hashing, dense hashing, cuckoo hashing, sparse hashing, hopscotch hashing, chaining with move to front heuristic and exact fit. We considered lookup time for successful and unsuccessful searches in two scenarios: (i) the MPHF description fits in the CPU cache and (ii) the MPHF description does not fit entirely in the CPU cache. Considering lookup time, the minimal perfect hashing outperforms the other hashing schemes in the two scenarios and, in the first scenario, the performance is better even when the compared methods leave more than 80% of the hash table entries free. Considering space overhead (the amount of used space other than the key-value pairs), the minimal perfect hashing is within a factor of O(log n) bits lower than the other hashing schemes for both scenarios. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Minimal perfect hashing: A competitive method for indexing internal memory", "paper_id": "WOS:000293035700003"}