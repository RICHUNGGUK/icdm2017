{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "domain_specific_languages"}, {"score": 0.008587768331189169, "phrase": "coopn."}, {"score": 0.004378309349451268, "phrase": "coopn"}, {"score": 0.003754731210715724, "phrase": "coopn_language_representation"}, {"score": 0.003700170452390401, "phrase": "standard_data_interchange"}, {"score": 0.003036468052876648, "phrase": "coopn_models"}, {"score": 0.002970476379751357, "phrase": "standard_format"}, {"score": 0.00276066021951467, "phrase": "software_prototyping"}, {"score": 0.0023669335188774834, "phrase": "uml"}, {"score": 0.0021049977753042253, "phrase": "rapid_system_prototyping"}], "paper_keywords": [""], "paper_abstract": "The work described in this article presents how we use COOPN in the context of the MDA (Model Driven Architecture) philosophy for prototyping Domain Specific Languages. With this principle we increase the abstraction of COOPN language representation enabling standard data interchange with other applications that use the same approach. In particular we will present the architecture of the transformation from Domain Specific Languages; its advantages concerning the ability to have COOPN models as a standard format for representing the semantics of Domain Specific Languages and to reuse software prototyping and testing techniques developped for this formalism. As example we will show how our work is proceeding towards transformation from UML to COOPN. We also argue how our approach can be easily used in order to produce rapid system prototyping and verification for Domain Specific Languages (DSLs).", "paper_title": "Prototyping domain specific languages with COOPN", "paper_id": "WOS:000238079700012"}