{"auto_keywords": [{"score": 0.023895726890989653, "phrase": "fit"}, {"score": 0.00481495049065317, "phrase": "weak_consistency_key-value_data_stores"}, {"score": 0.004764859786310636, "phrase": "highly_distributed_nosql_key-value_data_stores"}, {"score": 0.004545793387330536, "phrase": "modern_web_applications"}, {"score": 0.004314127287770832, "phrase": "relaxed_consistency"}, {"score": 0.004246947739596565, "phrase": "high_levels"}, {"score": 0.004051595625804513, "phrase": "design_choices"}, {"score": 0.0037261429556468217, "phrase": "quality_of_data"}, {"score": 0.003480993634130542, "phrase": "latency-based_slas"}, {"score": 0.003373334961160647, "phrase": "application_tolerance"}, {"score": 0.0033381913087533457, "phrase": "data_staleness"}, {"score": 0.003234934827553253, "phrase": "end-user_satisfaction"}, {"score": 0.003102195256794215, "phrase": "fine_balance"}, {"score": 0.0030378759123133644, "phrase": "qod"}, {"score": 0.0027936239349923464, "phrase": "quality-aware_schedulers"}, {"score": 0.0027213882346615406, "phrase": "necessary_computational_resources"}, {"score": 0.002678944072162297, "phrase": "foreground_user-queries"}, {"score": 0.002637160140011997, "phrase": "background_system-updates"}, {"score": 0.0026096659285441384, "phrase": "data_store_nodes"}, {"score": 0.0023997601127552256, "phrase": "novel_selective_approach"}, {"score": 0.002218299213266519, "phrase": "significant_improvements"}], "paper_keywords": ["NoSQL", " Key-value data stores", " Distributed database", " Scheduling", " Consistency", " SLA", " FLA", " Quality of data", " Quality of service"], "paper_abstract": "Highly distributed NoSQL key-value data stores are rapidly becoming the favorite choice for hosting modern web applications. Such platforms rely on data partitioning, replication and relaxed consistency to achieve high levels of performance and scalability. However, these design choices often exhibit a trade-off between latency (i.e., Quality of Service (QoS)) and consistency (i.e., Quality of Data (QoD)). In this work, in addition to latency-based SLAs, we also adopt the application tolerance to data staleness as another requirement determining the end-user satisfaction and our goal is to strike a fine balance between both the QoS and QoD provided to the end-user. Towards achieving that goal, we propose a suite of quality-aware schedulers for efficiently allocating the necessary computational resources between the foreground user-queries and the background system-updates at data store nodes. This suite of schedulers features our proposed Freshness/Tardiness (FIT) mechanism, which introduces a novel selective approach for scheduling the execution of queries and updates. Our experimental results show that FIT provides significant improvements in balancing the trade-off between QoS and QoD under both the state-transfer and operation-transfer update propagation models employed in current key-value data stores.", "paper_title": "Quality-aware schedulers for weak consistency key-value data stores", "paper_id": "WOS:000341913600004"}