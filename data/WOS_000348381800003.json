{"auto_keywords": [{"score": 0.04900554137256697, "phrase": "use_cases"}, {"score": 0.014005649110614561, "phrase": "use_case"}, {"score": 0.007833141757289382, "phrase": "event_completeness"}, {"score": 0.006664335757818026, "phrase": "review_speed"}, {"score": 0.00572425120274906, "phrase": "event_identification"}, {"score": 0.00566893424806351, "phrase": "first_experiment"}, {"score": 0.005559889919080241, "phrase": "second_experiment"}, {"score": 0.00481495066943768, "phrase": "hazop"}, {"score": 0.004556901872357751, "phrase": "main_quality_attributes"}, {"score": 0.004527462929045081, "phrase": "requirements_specifications"}, {"score": 0.004483659121004398, "phrase": "functional_requirements"}, {"score": 0.004041879818641576, "phrase": "missing_events"}, {"score": 0.003951175193382119, "phrase": "higher_project_costs"}, {"score": 0.0038127186374325582, "phrase": "good_method"}, {"score": 0.003200045185608395, "phrase": "ad_hoc_approach"}, {"score": 0.002941100683384888, "phrase": "accuracy_and_review_speed"}, {"score": 0.0029126002350975634, "phrase": "investigated_methods"}, {"score": 0.0028104345972072534, "phrase": "hazop_keywords"}, {"score": 0.0027295084882654917, "phrase": "benchmark_specification"}, {"score": 0.002608218347502229, "phrase": "hazop-based_review"}, {"score": 0.002549604441640963, "phrase": "ad_hoc_review"}, {"score": 0.0024601402359002056, "phrase": "reviewing_speed"}, {"score": 0.0024442137370930296, "phrase": "hazop-based_reviews"}, {"score": 0.0022029383047842627, "phrase": "hazop-based_identification"}, {"score": 0.0021534125023440895, "phrase": "useful_alternative"}, {"score": 0.0021394674440767124, "phrase": "ad_hoc_reviews"}, {"score": 0.0021049977753042253, "phrase": "higher_event_completeness"}], "paper_keywords": ["Requirements engineering", " Software quality", " Use cases", " HAZOP", " Controlled experiment"], "paper_abstract": "Completeness is one of the main quality attributes of requirements specifications. If functional requirements are expressed as use cases, one can be interested in event completeness. A use case is event complete if it contains description of all the events that can happen when executing the use case. Missing events in any use case can lead to higher project costs. Thus, the question arises of what is a good method of identification of events in use cases and what accuracy and review speed one can expect from it. The goal of this study was to check if (1) HAZOP-based event identification is more effective than ad hoc review and (2) what is the review speed of these two approaches. Two controlled experiments were conducted in order to evaluate ad hoc approach and H4U method to event identification. The first experiment included 18 students, while the second experiment was conducted with the help of 82 professionals. In both cases, accuracy and review speed of the investigated methods were measured and analyzed. Moreover, the usage of HAZOP keywords was analyzed. In both experiments, a benchmark specification based on use cases was used. The first experiment with students showed that a HAZOP-based review is more effective in event identification than ad hoc review and this result is statistically significant. However, the reviewing speed of HAZOP-based reviews is lower. The second experiment with professionals confirmed these results. These experiments showed also that event completeness is hard to achieve. It on average ranged from 0.15 to 0.26. HAZOP-based identification of events in use cases is an useful alternative to ad hoc reviews. It can achieve higher event completeness at the cost of an increase in effort.", "paper_title": "HAZOP-based identification of events in use cases An empirical study", "paper_id": "WOS:000348381800003"}