{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data_types"}, {"score": 0.04565922187614431, "phrase": "data_type"}, {"score": 0.034526216484340136, "phrase": "generic_functions"}, {"score": 0.029369069256307546, "phrase": "generic_views"}, {"score": 0.01237572299650145, "phrase": "generic_haskell"}, {"score": 0.004738078275822989, "phrase": "generic_function"}, {"score": 0.004121015628626403, "phrase": "polyp"}, {"score": 0.004077005481951783, "phrase": "pattern_functor"}, {"score": 0.0038638811223100184, "phrase": "fixed_point"}, {"score": 0.003741371936431574, "phrase": "structural_representation_type"}, {"score": 0.0036815763368083197, "phrase": "isomorphic_type_view"}, {"score": 0.0034148795808317555, "phrase": "generic_view"}, {"score": 0.0028446460307503343, "phrase": "different_view"}, {"score": 0.002407941567598653, "phrase": "functional_programming_language_haskell"}, {"score": 0.0022696277881969896, "phrase": "inductive_definitions"}, {"score": 0.0022453451864218477, "phrase": "type_structure"}, {"score": 0.0021392418081444798, "phrase": "generic_programming"}, {"score": 0.0021049977753042253, "phrase": "single_framework"}], "paper_keywords": [""], "paper_abstract": "A generic function is defined by induction on the structure of types. The structure of a data type can be defined in several ways. For example, in PolyP a pattern functor gives the structure of a data type viewed as a fixed point, and in Generic Haskell a structural representation type gives an isomorphic type view of a data type in terms of sums of products. Depending on this generic view on the structure of data types, some generic functions are easier, more difficult, or even impossible to define. Furthermore, the efficiency of some generic functions can be improved by choosing a different view. This paper introduces generic views on data types and shows why they are useful. Furthermore, it shows how generic views have been added to Generic Haskell, an extension of the functional programming language Haskell that supports the construction of generic functions. The separation between inductive definitions on type structure and generic views allows us to combine many approaches to generic programming in a single framework.", "paper_title": "Generic views on data types", "paper_id": "WOS:000239422700014"}