{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "platform-based_software_design_flow"}, {"score": 0.004764542405129454, "phrase": "heterogeneous_mpsoc._current_multimedia_applications"}, {"score": 0.00471465954562773, "phrase": "complex_heterogeneous_multiprocessor_architectures"}, {"score": 0.004665296491645837, "phrase": "specific_communication_infrastructure"}, {"score": 0.004520272777451894, "phrase": "required_performances"}, {"score": 0.004311109608629196, "phrase": "separate_low-level_code"}, {"score": 0.004177092026805232, "phrase": "dsp"}, {"score": 0.004047141845635495, "phrase": "late_global_validation"}, {"score": 0.00398370478688858, "phrase": "overall_application"}, {"score": 0.00392125815948488, "phrase": "hardware_platform"}, {"score": 0.0035853745478488254, "phrase": "easy_experimentation"}, {"score": 0.003437387719239532, "phrase": "platform_resources"}, {"score": 0.0033480035183418642, "phrase": "high-level_environment"}, {"score": 0.003226744277130179, "phrase": "initial_representations"}, {"score": 0.0031761255583359726, "phrase": "executable_software_stack"}, {"score": 0.003028969851366049, "phrase": "initial_model"}, {"score": 0.0029814443878969973, "phrase": "software_generation"}, {"score": 0.002858313353461727, "phrase": "different_software_abstraction_levels"}, {"score": 0.002828331235643921, "phrase": "specific_software_development_platforms"}, {"score": 0.0025858215477025117, "phrase": "different_software_components"}, {"score": 0.0025586903829811296, "phrase": "explicit_hardware-software_interaction"}, {"score": 0.0024529757621396717, "phrase": "multimedia_platform"}, {"score": 0.0024017638230939514, "phrase": "high_performance"}, {"score": 0.0023516185395256505, "phrase": "risc_processor"}, {"score": 0.0023025177990160487, "phrase": "communication_architecture"}, {"score": 0.0022544399432457164, "phrase": "efficient_executable_code"}, {"score": 0.002219040041886641, "phrase": "multimedia_application"}, {"score": 0.002172701452347454, "phrase": "automatic_tools"}, {"score": 0.0021385822825864425, "phrase": "proposed_flow_increases_productivity"}, {"score": 0.0021049977753042253, "phrase": "design_quality"}], "paper_keywords": ["multiprocessor system-on chip", " programming environment", " multimedia", " transaction level modeling", " software design", " Simulink", " SystemC"], "paper_abstract": "Current multimedia applications demand complex heterogeneous multiprocessor architectures with specific communication infrastructure in order to achieve the required performances. Programming these architectures usually results in writing separate low-level code for the different processors (DSP, microcontroller), implying late global validation of the overall application with the hardware platform. We propose a platform-based software design flow able to efficiently use the resources of the architecture and allowing easy experimentation of several mappings of the application onto the platform resources. We use a high-level environment to capture both application and architecture initial representations. An executable software stack is generated automatically for each processor from the initial model. The software generation and validation is performed gradually corresponding to different software abstraction levels. Specific software development platforms (abstract models of the architecture) are generated and used to allow debugging of the different software components with explicit hardware-software interaction. We applied this approach on a multimedia platform, involving a high performance DSP and a RISC processor, to explore communication architecture and generate an efficient executable code for a multimedia application. Based on automatic tools, the proposed flow increases productivity and preserves design quality.", "paper_title": "Platform-based software design flow for heterogeneous MPSoC", "paper_id": "WOS:000259432400003"}