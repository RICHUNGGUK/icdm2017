{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "insecure_programs"}, {"score": 0.004610058444728656, "phrase": "rigorous_security_analysis"}, {"score": 0.0034894451015047875, "phrase": "difficult_problem"}, {"score": 0.0027104531025934865, "phrase": "new_perspective"}, {"score": 0.002357632753637638, "phrase": "existing_transforming_type_system"}, {"score": 0.0021049977753042253, "phrase": "resulting_programs"}], "paper_keywords": ["language based security", " information flow control", " security type system", " unification"], "paper_abstract": "Before starting a rigorous security analysis of a given software system, the most likely outcome is often already clear, namely that the system is not entirely secure. Modifying a program such that it passes the analysis is a difficult problem and usually left entirely to the programmer. In this article, we show that and how unification can be used to compute such program transformations. This opens a new perspective on the problem of correcting insecure programs. We also demonstrate that integrating our approach into an existing transforming type system can improve the precision of the analysis and the quality of the resulting programs.", "paper_title": "Transformational typing and unification for automatically correcting insecure programs", "paper_id": "WOS:000251612600004"}