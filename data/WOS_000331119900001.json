{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "fft."}, {"score": 0.00481495049065317, "phrase": "high_performance_haskell_programming"}, {"score": 0.004605434064238641, "phrase": "new_methodology"}, {"score": 0.004518442937844318, "phrase": "high_performance_haskell_programs"}, {"score": 0.00443308765153716, "phrase": "embedded_domain_specific_languages"}, {"score": 0.004186534737631288, "phrase": "complete_library"}, {"score": 0.0038789122930433305, "phrase": "repa_library"}, {"score": 0.003548368289666932, "phrase": "standard_approach"}, {"score": 0.0034812740368914455, "phrase": "high_performance_libraries"}, {"score": 0.0033084729942065142, "phrase": "embedded_language_approach"}, {"score": 0.003245900020944865, "phrase": "initial_cost"}, {"score": 0.0031044458412608084, "phrase": "syntactic_overhead"}, {"score": 0.002988101395789399, "phrase": "stronger_performance_guarantees"}, {"score": 0.0029502941554043964, "phrase": "better_control"}, {"score": 0.0028761045789798103, "phrase": "simpler_implementation"}, {"score": 0.0027159094186967247, "phrase": "type_level_programming"}, {"score": 0.002664513608074113, "phrase": "value_level_programming"}, {"score": 0.0022434880661725493, "phrase": "push_arrays"}], "paper_keywords": ["EDSL", " array programming", " optimization", " meta programming"], "paper_abstract": "This paper argues for a new methodology for writing high performance Haskell programs by using Embedded Domain Specific Languages. We exemplify the methodology by describing a complete library, meta-repa, which is a reimplementation of parts of the repa library. The paper describes the implementation of meta-repa and contrasts it with the standard approach to writing high performance libraries. We conclude that even though the embedded language approach has an initial cost of defining the language and some syntactic overhead it gives a more tailored programming model, stronger performance guarantees, better control over optimizations, simpler implementation of fusion and inlining and allows for moving type level programming down to value level programming in some cases. We also provide benchmarks showing that meta-repa is as fast, or faster, than repa. Furthermore, meta-repa also includes push arrays and we demonstrate their usefulness for writing certain high performance kernels such as FFT.", "paper_title": "An EDSL Approach to High Performance Haskell Programming", "paper_id": "WOS:000331119900001"}