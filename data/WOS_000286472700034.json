{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "delay-bounded_scheduling"}, {"score": 0.0045726187330434025, "phrase": "new_characterization"}, {"score": 0.004297795905522757, "phrase": "deterministic_schedulers"}, {"score": 0.0038758293658651237, "phrase": "otherwise-deterministic_scheduler"}, {"score": 0.0036427316134070007, "phrase": "concurrency_bugs"}, {"score": 0.0030239842475439814, "phrase": "context_switches"}, {"score": 0.002931569771634119, "phrase": "buffered_events"}, {"score": 0.002726740692380339, "phrase": "systematic_exploration"}, {"score": 0.0024586427394152196, "phrase": "concurrent_programs"}, {"score": 0.002408265305704217, "phrase": "dynamic_task-creation"}, {"score": 0.002194011800331242, "phrase": "efficient_reductions"}, {"score": 0.0021049977753042253, "phrase": "sequential_program_analysis"}], "paper_keywords": ["Algorithms", " Reliability", " Testing", " Verification", " Concurrency", " Asynchronous programs", " Delay", " Sequentialization"], "paper_abstract": "We provide a new characterization of scheduling nondeterminism by allowing deterministic schedulers to delay their next-scheduled task. In limiting the delays an otherwise-deterministic scheduler is allowed, we discover concurrency bugs efficiently-by exploring few schedules-and robustly-i.e., independent of the number of tasks, context switches, or buffered events. Our characterization elegantly applies to any systematic exploration (e.g., testing, model checking) of concurrent programs with dynamic task-creation. Additionally, we show that certain delaying schedulers admit efficient reductions from concurrent to sequential program analysis.", "paper_title": "Delay-Bounded Scheduling", "paper_id": "WOS:000286472700034"}