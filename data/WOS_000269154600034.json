{"auto_keywords": [{"score": 0.0276788126170636, "phrase": "treerank"}, {"score": 0.00481495049065317, "phrase": "recursive_partitioning_methods"}, {"score": 0.004670722261414736, "phrase": "bipartite_ranking_problem"}, {"score": 0.004530794611704416, "phrase": "pursued_goal"}, {"score": 0.004241771072194993, "phrase": "whole_input_space_chi"}, {"score": 0.004156590395333602, "phrase": "positive_instances"}, {"score": 0.004011603024990615, "phrase": "maximum_probability"}, {"score": 0.0037746771370555546, "phrase": "input_data"}, {"score": 0.003717656912608012, "phrase": "real_line"}, {"score": 0.0036614948691735105, "phrase": "real-valued_scoring_function"}, {"score": 0.003569763795153386, "phrase": "natural_order"}, {"score": 0.0032251796659158696, "phrase": "roc_curve"}, {"score": 0.0030655302236416502, "phrase": "tree-structured_scoring_functions"}, {"score": 0.0029735479904284675, "phrase": "auc_criterion"}, {"score": 0.0028990018343924683, "phrase": "recursive_piecewise_linear_approximation"}, {"score": 0.0028551716387011637, "phrase": "optimal_roc_curve"}, {"score": 0.002672750634553146, "phrase": "novel_tree-based_algorithm"}, {"score": 0.002540377258232509, "phrase": "consistency_results"}, {"score": 0.0025146979283050923, "phrase": "generalization_bounds"}, {"score": 0.00248927752933113, "phrase": "functional_nature"}, {"score": 0.002426842369975213, "phrase": "ranking_method"}, {"score": 0.002260211578368138, "phrase": "committee-based_learning_procedures"}, {"score": 0.002203509076886664, "phrase": "\"base_ranker"}, {"score": 0.002126502291103601, "phrase": "obvious_drawbacks"}], "paper_keywords": ["Adaptive piecewise linear approximation", " AUC criterion", " bipartite ranking problem", " decision Tree", " ROC curve"], "paper_abstract": "This paper investigates how recursive partitioning methods can be adapted to the bipartite ranking problem. In ranking, the pursued goal is global: based on past data, define an order on the whole input space chi, so that positive instances take up the top ranks with maximum probability. The most natural way to order all instances consists of projecting the input data onto the real line through a real-valued scoring function s and use the natural order on R. The accuracy of the ordering induced by a candidate s is classically measured in terms of the ROC curve or the AUC. Here we discuss the design of tree-structured scoring functions obtained by recursively maximizing the AUC criterion. The connection with recursive piecewise linear approximation of the optimal ROC curve both in the L(1)-sense and in the L(infinity)-sense is highlighted. A novel tree-based algorithm for ranking, called TREERANK, is proposed. Consistency results and generalization bounds of functional nature are established for this ranking method, when considering either the L(1) or L(infinity) distance. We also describe committee-based learning procedures using TREERANK as a \"base ranker,\" in order to overcome obvious drawbacks of such a top-down partitioning technique. Simulation results on artificial data are also displayed.", "paper_title": "Tree-Based Ranking Methods", "paper_id": "WOS:000269154600034"}