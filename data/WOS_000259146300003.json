{"auto_keywords": [{"score": 0.02892278386101692, "phrase": "synthetic_benchmark_clone"}, {"score": 0.00481495049065317, "phrase": "proprietary_workloads"}, {"score": 0.004773040022691547, "phrase": "miniature_benchmarks"}, {"score": 0.004608997772926119, "phrase": "computer_architecture_research"}, {"score": 0.004568871736067739, "phrase": "industry_product_development"}, {"score": 0.004431149592844886, "phrase": "paramount_importance"}, {"score": 0.004297560964892607, "phrase": "real-world_applications"}, {"score": 0.004167982855788402, "phrase": "practical_challenges"}, {"score": 0.0041316803676012155, "phrase": "application_analysis_teams"}, {"score": 0.004095692768056685, "phrase": "benchmark_developers"}, {"score": 0.004024651422626329, "phrase": "real-world_workloads"}, {"score": 0.003852371777780562, "phrase": "proprietary_applications"}, {"score": 0.003545024951402821, "phrase": "tractable_amount"}, {"score": 0.003468287913322255, "phrase": "nontrivial_task"}, {"score": 0.003219553875143356, "phrase": "key_inherent_behavioral_attributes"}, {"score": 0.0031775430407770026, "phrase": "proprietary_workload"}, {"score": 0.0030951536886513567, "phrase": "miniature_synthetic_benchmark_clone"}, {"score": 0.0030148941188459987, "phrase": "benchmark_clone"}, {"score": 0.002936709606809639, "phrase": "functional_meaning"}, {"score": 0.002860546817196148, "phrase": "similar_performance_characteristics"}, {"score": 0.002823207272381655, "phrase": "target_application"}, {"score": 0.0027620516806198354, "phrase": "dynamic_instruction_count"}, {"score": 0.0026552818091968543, "phrase": "proprietary_application"}, {"score": 0.0026091594819333654, "phrase": "overall_simulation_time"}, {"score": 0.0025863988422430797, "phrase": "spec_cpu"}, {"score": 0.002552628669352939, "phrase": "simulation_time_reduction"}, {"score": 0.0025192983141887285, "phrase": "five_orders"}, {"score": 0.002464709648714996, "phrase": "entire_benchmark_execution"}, {"score": 0.0022480304016499605, "phrase": "power_and_performance_characteristics"}, {"score": 0.0021516366862117707, "phrase": "original_application"}, {"score": 0.002123531043641047, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "microarchitecture_configurations"}], "paper_keywords": ["design", " experimentation", " performance", " benchmarks", " workload characterization", " benchmark cloning"], "paper_abstract": "Benchmarks set standards for innovation in computer architecture research and industry product development. Consequently, it is of paramount importance that these workloads are representative of real-world applications. However, composing such representative workloads poses practical challenges to application analysis teams and benchmark developers (1) real-world workloads are intellectual property and vendors hesitate to share these proprietary applications; and (2) porting and reducing these applications to benchmarks that can be simulated in a tractable amount of time is a nontrivial task. In this paper, we address this problem by proposing a technique that automatically distills key inherent behavioral attributes of a proprietary workload and captures them into a miniature synthetic benchmark clone. The advantage of the benchmark clone is that it hides the functional meaning of the code but exhibits similar performance characteristics as the target application. Moreover, the dynamic instruction count of the synthetic benchmark clone is substantially shorter than the proprietary application, greatly reducing overall simulation time for SPEC CPU, the simulation time reduction is over five orders of magnitude compared to entire benchmark execution. Using a set of benchmarks representative of general-purpose, scientific, and embedded applications, we demonstrate that the power and performance characteristics of the synthetic benchmark clone correlate well with those of the original application across a wide range of microarchitecture configurations.", "paper_title": "Distilling the essence of proprietary workloads into miniature benchmarks", "paper_id": "WOS:000259146300003"}