{"auto_keywords": [{"score": 0.04143119734779178, "phrase": "processing_elements"}, {"score": 0.00481495049065317, "phrase": "single-unit_resource_systems"}, {"score": 0.004623608221548592, "phrase": "rapid_technology_advance"}, {"score": 0.00457696724030363, "phrase": "multiprocessor_system-on-"}, {"score": 0.00437281181878921, "phrase": "commodity_computing_platforms"}, {"score": 0.004328689762198895, "phrase": "embedded_applications"}, {"score": 0.003991305899593133, "phrase": "large_number"}, {"score": 0.003410380718649286, "phrase": "novel_hardware-oriented_deadlock_detection_algorithm"}, {"score": 0.003258090521354736, "phrase": "previously_published_methods"}, {"score": 0.002988685006809336, "phrase": "proposed_algorithm"}, {"score": 0.0029584874121320165, "phrase": "specialized_hardware"}, {"score": 0.002884317729022721, "phrase": "overall_runtime_complexity"}, {"score": 0.0027414948679658816, "phrase": "resource_allocation_events"}, {"score": 0.0025146979283050923, "phrase": "specific_detection"}, {"score": 0.002426842369975213, "phrase": "constant_runtime"}, {"score": 0.0023539789234610763, "phrase": "necessary_information"}, {"score": 0.0023301793939902015, "phrase": "multiple_resources"}, {"score": 0.002203509076886664, "phrase": "verilog_hdl"}, {"score": 0.002126502291103601, "phrase": "algorithm_invocation"}], "paper_keywords": ["Deadlock detection in hardware", " single-unit resource systems", " resource allocation graph", " system-on-chips"], "paper_abstract": "Due to rapid technology advance, Multiprocessor System-on-Chips (MPSoCs) are likely to become commodity computing platforms for embedded applications. In the future, it is possible that an MPSoC is equipped with a large number of processing elements as well as on-chip resources. The management of these faces many challenges, among which deadlock is one of the most crucial issues. This paper presents a novel hardware-oriented deadlock detection algorithm suitable for current and future MPSoCs. Unlike previously published methods whose runtime complexities are often affected by the number of processing elements and resources in the system, the proposed algorithm leverages specialized hardware to guarantee O(1) overall runtime complexity. Such complexity is achieved by: 1) classifying resource allocation events; 2) for each type of events, using hardware to perform a set of specific detection and/or preparation operations that only takes constant runtime; and 3) updating necessary information for multiple resources in parallel in hardware. We implement the algorithm in Verilog HDL and demonstrate through simulation that each algorithm invocation takes at most four clock cycles.", "paper_title": "A True O(1) Parallel Deadlock Detection Algorithm for Single-Unit Resource Systems and Its Hardware Implementation", "paper_id": "WOS:000272318700002"}