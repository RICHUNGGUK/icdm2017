{"auto_keywords": [{"score": 0.04051582885451674, "phrase": "data_structure"}, {"score": 0.00481495049065317, "phrase": "abstract_interpretation"}, {"score": 0.004756233569671719, "phrase": "programming_languages"}, {"score": 0.004717485406306594, "phrase": "dynamic_use"}, {"score": 0.004603369646022545, "phrase": "java"}, {"score": 0.0044005599565517875, "phrase": "acyclic_data_structure"}, {"score": 0.00361561247499551, "phrase": "x.f"}, {"score": 0.0030692309090066166, "phrase": "resource_usage"}, {"score": 0.002994701080666466, "phrase": "present_paper"}, {"score": 0.0029581155916843663, "phrase": "abstract-interpretation-based_formalization"}, {"score": 0.002921975748248106, "phrase": "static_analysis"}, {"score": 0.0028161764476743257, "phrase": "reduced_product"}, {"score": 0.002626645763725465, "phrase": "variable_w"}, {"score": 0.0025523518748506347, "phrase": "variable_v"}, {"score": 0.002294294558114909, "phrase": "cyclic_data_structure"}, {"score": 0.002157433262687853, "phrase": "chosen_abstraction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Abstract interpretation", " Acyclicity analysis", " Termination analysis", " Object-oriented programming", " Heap manipulation"], "paper_abstract": "In programming languages with dynamic use of memory, such as Java, knowing that a reference variable x points to an acyclic data structure is valuable for the analysis of termination and resource usage (e.g., execution time or memory consumption). For instance, this information guarantees that the depth of the data structure to which x points is greater than the depth of the data structure pointed to by x.f for any field f of x. This, in turn, allows bounding the number of iterations of a loop which traverses the structure by its depth, which is essential in order to prove the termination or infer the resource usage of the loop. The present paper provides an Abstract-Interpretation-based formalization of a static analysis for inferring acyclicity, which works on the reduced product of two abstract domains: reachability, which models the property that the location pointed to by a variable w can be reached by dereferencing another variable v (in this case, v is said to reach w); and cyclicity, modeling the property that v can point to a cyclic data structure. The analysis is proven to be sound and optimal with respect to the chosen abstraction. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Reachability-based acyclicity analysis by Abstract Interpretation", "paper_id": "WOS:000316584300004"}