{"auto_keywords": [{"score": 0.040635087600368644, "phrase": "overlay_structure"}, {"score": 0.00481495049065317, "phrase": "automatic_code_overlay_generation"}, {"score": 0.004743164872278112, "phrase": "code_fetch"}, {"score": 0.004637478829869904, "phrase": "increasing_interest"}, {"score": 0.004568326972997448, "phrase": "memory_hierarchies"}, {"score": 0.004466519142879166, "phrase": "distinct_memories"}, {"score": 0.004174451361776433, "phrase": "typical_embedded_systems"}, {"score": 0.004127657126534723, "phrase": "emerging_class"}, {"score": 0.004096751549280256, "phrase": "multicore_architectures"}, {"score": 0.0039308449157320815, "phrase": "available_higher-level_memory"}, {"score": 0.0036461569988218267, "phrase": "specialized_linker"}, {"score": 0.0036188435232325337, "phrase": "manual_code_overlaying"}, {"score": 0.003511613254403125, "phrase": "program_structure"}, {"score": 0.003485304124598714, "phrase": "maximum_memory_savings"}, {"score": 0.0034332736827447654, "phrase": "minimum_performance_degradation"}, {"score": 0.0033190180867511605, "phrase": "code_overlay_structure"}, {"score": 0.0032085525502105836, "phrase": "significant_performance_degradation"}, {"score": 0.0031845067058084583, "phrase": "traditional_techniques"}, {"score": 0.003125175084962886, "phrase": "program_context"}, {"score": 0.003021141590548526, "phrase": "automatic_code_overlay_generation_technique"}, {"score": 0.002953711377604328, "phrase": "traditional_automatic_code_overlaying_techniques"}, {"score": 0.0028769371032728733, "phrase": "system_context"}, {"score": 0.0027499252661633525, "phrase": "address_translation"}, {"score": 0.0026384167183586015, "phrase": "function_level"}, {"score": 0.002493592357827492, "phrase": "worst-case_number"}, {"score": 0.002330233210731173, "phrase": "static_temporal_relationship_graph"}, {"score": 0.0021940118003312397, "phrase": "inter-procedural_partial_redundancy_elimination_technique"}, {"score": 0.0021209097150420896, "phrase": "generated_overlay_structure"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Measurement", " Performance", " Code overlays", " Path expressions", " Static temporal relationship graphs", " Partial redundancy elimination"], "paper_abstract": "There is an increasing interest in explicitly managed memory hierarchies, where a hierarchy of distinct memories is exposed to the programmer and managed explicitly in software. These hierarchies can be found in typical embedded systems and an emerging class of multicore architectures. To run an application that requires more code memory than the available higher-level memory, typically an overlay structure is needed. The overlay structure is generated manually by the programmer or automatically by a specialized linker. Manual code overlaying requires the programmer to deeply understand the program structure for maximum memory savings as well as minimum performance degradation. Although the linker can automatically generate the code overlay structure, its memory savings are limited and it even brings significant performance degradation because traditional techniques do not consider the program context. In this article, we propose an automatic code overlay generation technique that overcomes the limitations of traditional automatic code overlaying techniques. We are dealing with a system context that imposes two distinct constraints: (1) no hardware support for address translation and (2) a spatially and temporally coarse grained faulting mechanism at the function level. Our approach addresses those two constraints as efficiently as possible. Our technique statically computes the Worst-Case Number of Conflict misses (WCNC) between two different code segments using path expressions. Then, it constructs a static temporal relationship graph with the WCNCs and emits an overlay structure for a given higher-level memory size. We also propose an inter-procedural partial redundancy elimination technique that minimizes redundant code copying caused by the generated overlay structure. Experimental results show that our approach is promising.", "paper_title": "Automatic Code Overlay Generation and Partially Redundant Code Fetch Elimination", "paper_id": "WOS:000305571600004"}