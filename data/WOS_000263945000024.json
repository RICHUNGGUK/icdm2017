{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "compressed_longest_common_substrings"}, {"score": 0.00447251540886613, "phrase": "compressed_strings"}, {"score": 0.004310501708408856, "phrase": "straight_line_programs"}, {"score": 0.003916098498242888, "phrase": "longest_common_substring"}, {"score": 0.0032558762499901727, "phrase": "polynomial_time_w.r.t"}, {"score": 0.0031845067058084583, "phrase": "compressed_size"}, {"score": 0.0030017207229983385, "phrase": "decompressed_size"}, {"score": 0.0028293966058473476, "phrase": "combinatorial_algorithms"}, {"score": 0.0021049977753042253, "phrase": "slp-compressed_strings"}], "paper_keywords": ["Text compression", " String processing algorithms", " Longest common substring", " Palindromes", " Straight line program"], "paper_abstract": "This paper studies two problems on compressed strings described in terms of straight line programs (SLPs). One is to compute the length of the longest common substring of two given SLP-compressed strings, and the other is to compute all palindromes of a given SLP-compressed string. In order to solve these problems efficiently (in polynomial time w.r.t. the compressed size) decompression is never feasible, since the decompressed size can be exponentially large. We develop combinatorial algorithms that solve these problems in O(n(4) log n) time with O(n(3)) space, and in O(n(4)) time with O(n(2)) space, respectively, where n is the size of the input SLP-compressed strings. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Efficient algorithms to compute compressed longest common substrings and compressed palindromes", "paper_id": "WOS:000263945000024"}