{"auto_keywords": [{"score": 0.04350641237861327, "phrase": "replay_speed"}, {"score": 0.00481495049065317, "phrase": "replay_parallelism"}, {"score": 0.0047273577269638725, "phrase": "deterministic_record-replay"}, {"score": 0.004620093797504386, "phrase": "multi-threaded_code"}, {"score": 0.004536029676655286, "phrase": "program_debugging"}, {"score": 0.004494570360108983, "phrase": "intrusion_analysis"}, {"score": 0.004253618550301311, "phrase": "proposed_designs"}, {"score": 0.0038447943243941685, "phrase": "intrusive_hardware"}, {"score": 0.003555902292752528, "phrase": "first_hardware-based_scheme"}, {"score": 0.003459191419478298, "phrase": "high_replay_speed"}, {"score": 0.0032886455096627324, "phrase": "commodity_snoopy_cache_coherence"}, {"score": 0.003140888248194296, "phrase": "-fly_software_backend_pass"}, {"score": 0.002931569771634119, "phrase": "high_replay_parallelism"}, {"score": 0.002748775748298028, "phrase": "trade-off_replay_parallelism"}, {"score": 0.0026011706232569316, "phrase": "full_system"}, {"score": 0.002286781334850213, "phrase": "average_replay_parallelism"}, {"score": 0.0021049977753042253, "phrase": "recording_speed"}], "paper_keywords": ["Deterministic Replay", " Application-level Parallel Replay", " Unintrusive Hardware-Assisted Recording", " Source-only Recording", " Backend Log Processing"], "paper_abstract": "Architectures for deterministic record-replay (R&R) of multi-threaded code are attractive for program debugging, intrusion analysis, and fault-tolerance uses. However, very few of the proposed designs have focused on maximizing replay speed - a key enabling property of these systems. The few efforts that focus on replay speed require intrusive hardware or software modifications, or target whole-system R&R rather than the more useful application-level R&R. This paper presents the first hardware-based scheme for unintrusive, application-level R&R that explicitly targets high replay speed. Our scheme, called Cyrus, requires no modification to commodity snoopy cache coherence. It introduces the concept of an on the-fly software Backend Pass during recording which, as the log is being generated, transforms it for high replay parallelism. This pass also fixes-up the log, and can flexibly trade-off replay parallelism for log size. We analyze the performance of Cyrus using full system (OS plus hardware) simulation. Our results show that Cyrus has negligible recording overhead. In addition, for 8-processor runs of SPLASH-2, Cyrus attains an average replay parallelism of 5, and a replay speed that is, on average, only about 50% lower than the recording speed.", "paper_title": "Cyrus: Unintrusive Application-Level Record-Replay for Replay Parallelism", "paper_id": "WOS:000321213100016"}