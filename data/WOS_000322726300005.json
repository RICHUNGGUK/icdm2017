{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "algorithmic_patterns"}, {"score": 0.004759635663291431, "phrase": "dsp_programs"}, {"score": 0.0047049532961375, "phrase": "automatic_parallelization"}, {"score": 0.0045709675813472884, "phrase": "extensible_knowledge"}, {"score": 0.004095567486538121, "phrase": "cetus_compiler_infrastructure"}, {"score": 0.003910441483033426, "phrase": "dsp_code"}, {"score": 0.0034832884999421374, "phrase": "performance_critical_constructs"}, {"score": 0.00344321906220063, "phrase": "dsp_applications"}, {"score": 0.003287482882222731, "phrase": "target-specific_parallel_algorithms"}, {"score": 0.003156984631072011, "phrase": "better_structuring"}, {"score": 0.0030847461428168614, "phrase": "pattern_recognition"}, {"score": 0.0029794666460666646, "phrase": "different_levels"}, {"score": 0.002861160152640875, "phrase": "higher_levels"}, {"score": 0.0027634902834910184, "phrase": "lower_level_patterns"}, {"score": 0.0026384167183586015, "phrase": "intermediate_representation"}, {"score": 0.0025929837295811673, "phrase": "better_extensibility"}, {"score": 0.0024899850926034567, "phrase": "structural_part"}, {"score": 0.002461313735611462, "phrase": "recognition_rules"}, {"score": 0.0024049552650867935, "phrase": "xml_form"}, {"score": 0.002349884235026956, "phrase": "tool_implementation"}, {"score": 0.002309408211203032, "phrase": "pattern_specifications"}, {"score": 0.0022828113789751694, "phrase": "information_about_detected_patterns"}, {"score": 0.0022048406330100697, "phrase": "optimized_code_generation"}, {"score": 0.0021049977753042253, "phrase": "low-power_high-throughput_multicore_dsp_architecture_epuma."}], "paper_keywords": ["Automatic parallelization", " Algorithmic pattern recognition", " Cetus", " DSP", " DSP code parallelization", " Compiler frameworks"], "paper_abstract": "We introduce an extensible knowledge based tool for idiom (pattern) recognition in DSP (digital signal processing) programs. Our tool utilizes functionality provided by the Cetus compiler infrastructure for detecting certain computation patterns that frequently occur in DSP code. We focus on recognizing patterns for for-loops and statements in their bodies as these often are the performance critical constructs in DSP applications for which replacement by highly optimized, target-specific parallel algorithms will be most profitable. For better structuring and efficiency of pattern recognition, we classify patterns by different levels of complexity such that patterns in higher levels are defined in terms of lower level patterns. The tool works statically on the intermediate representation. For better extensibility and abstraction, most of the structural part of recognition rules is specified in XML form to separate the tool implementation from the pattern specifications. Information about detected patterns will later be used for optimized code generation by local algorithm replacement e.g. for the low-power high-throughput multicore DSP architecture ePUMA.", "paper_title": "Extensible Recognition of Algorithmic Patterns in DSP Programs for Automatic Parallelization", "paper_id": "WOS:000322726300005"}