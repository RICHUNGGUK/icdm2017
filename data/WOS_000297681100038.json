{"auto_keywords": [{"score": 0.04699499363626632, "phrase": "ray_tracing"}, {"score": 0.004814981955635668, "phrase": "traversal"}, {"score": 0.004296264970612285, "phrase": "high-quality_global_illumination_effects"}, {"score": 0.00398177607914381, "phrase": "traversal_and_intersection_operations"}, {"score": 0.0034526191487098093, "phrase": "hardware_architecture"}, {"score": 0.0031693980719538287, "phrase": "ordered_depth-first_layout"}, {"score": 0.002854505078275351, "phrase": "required_memory_bandwidth"}, {"score": 0.0026705669656375197, "phrase": "three-phase_ray-triangle_intersection_architecture"}, {"score": 0.002359759876402679, "phrase": "latency_hiding_architecture"}, {"score": 0.0022715929119140194, "phrase": "ray_accumulation_unit"}, {"score": 0.0022287497627555895, "phrase": "cycle-accurate_simulation_results"}, {"score": 0.0021049977753042253, "phrase": "interactive_distribute_dray_tracing"}], "paper_keywords": ["ray tracing", " ray tracing hardware", " global illumination"], "paper_abstract": "Ray tracing naturally supports high-quality global illumination effects, but it is computationally costly. Traversal and intersection operations dominate the computation of ray tracing. To accelerate these two operations, we propose a hardware architecture integrating three novel approaches. First, we present an ordered depth-first layout and a traversal architecture using this layout to reduce the required memory bandwidth. Second, we propose a three-phase ray-triangle intersection architecture that takes advantage of early exit. Third, we propose a latency hiding architecture defined as the ray accumulation unit. Cycle-accurate simulation results indicate our architecture can achieve interactive distribute dray tracing.", "paper_title": "T&I Engine: Traversal and Intersection Engine for Hardware Accelerated Ray Tracing", "paper_id": "WOS:000297681100038"}