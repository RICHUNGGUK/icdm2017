{"auto_keywords": [{"score": 0.025451360000654986, "phrase": "stoke"}, {"score": 0.00481495049065317, "phrase": "loop-free_binary_superoptimization_task"}, {"score": 0.004518442937844318, "phrase": "competing_constraints"}, {"score": 0.004447201233380302, "phrase": "transformation_correctness"}, {"score": 0.004377077848734575, "phrase": "performance_improvement"}, {"score": 0.004140203942496321, "phrase": "cost_function"}, {"score": 0.004010624853427534, "phrase": "markov_chain_monte_carlo_sampler"}, {"score": 0.0037040785566765954, "phrase": "possible_programs"}, {"score": 0.002988101395789399, "phrase": "resulting_quality"}, {"score": 0.0027159094186967247, "phrase": "existing_superoptimizers"}], "paper_keywords": ["Performance", " Verification", " 64-bit", " x86", " x86-64", " Binary", " Markov Chain Monte Carlo", " MCMC", " Stochastic Search", " Superoptimization", " SMT"], "paper_abstract": "We formulate the loop-free binary superoptimization task as a stochastic search problem. The competing constraints of transformation correctness and performance improvement are encoded as terms in a cost function, and a Markov Chain Monte Carlo sampler is used to rapidly explore the space of all possible programs to find one that is an optimization of a given target program. Although our method sacrifices completeness, the scope of programs we are able to consider, and the resulting quality of the programs that we produce, far exceed those of existing superoptimizers. Beginning from binaries compiled by 11 vm - O0 for 64-bit x86, our prototype implementation, STOKE, is able to produce programs which either match or outperform the code produced by gcc - O3, icc -O3, and in some cases, expert handwritten assembly.", "paper_title": "Stochastic Superoptimization", "paper_id": "WOS:000321213100025"}