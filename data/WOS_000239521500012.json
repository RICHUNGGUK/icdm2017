{"auto_keywords": [{"score": 0.044027087409931595, "phrase": "different_versions"}, {"score": 0.00481495049065317, "phrase": "model_merging_language"}, {"score": 0.0046781613377273774, "phrase": "model_versions"}, {"score": 0.004545240514015278, "phrase": "difficult_challenge"}, {"score": 0.00433200902751133, "phrase": "model-driven_development"}, {"score": 0.003750260412839128, "phrase": "development_process"}, {"score": 0.0035741900278634616, "phrase": "different_individuals"}, {"score": 0.0034063576796640603, "phrase": "different_parts"}, {"score": 0.003309452522760298, "phrase": "overall_model"}, {"score": 0.002527654365712841, "phrase": "model_merging_technology"}, {"score": 0.0023178219772486868, "phrase": "industrial_software_development_process"}, {"score": 0.002208853811052348, "phrase": "automated_model_merging_technology"}], "paper_keywords": [""], "paper_abstract": "A difficult challenge in the industrialisation of Model-Driven Development is managing different versions of models. Different versions may arise at any time during the development process, due. to different individuals or teams working on different parts of the overall model. To manage these versions it is necessary to be able to identify differences and reconcile these differences in a single, integrated model. We describe the use of model merging technology for managing different versions of a model in an industrial software development process. The use of automated model merging technology is contrasted with an alternative, semi-automated approach. The contributions of model merging to helping to solve this problem are outlined.", "paper_title": "Using a model merging language for reconciling model versions", "paper_id": "WOS:000239521500012"}