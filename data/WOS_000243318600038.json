{"auto_keywords": [{"score": 0.02395890218016006, "phrase": "java"}, {"score": 0.005306459050016916, "phrase": "gui"}, {"score": 0.00481495049065317, "phrase": "document_distributions"}, {"score": 0.004603115982404017, "phrase": "compound_documents"}, {"score": 0.004565609517511076, "phrase": "distributed_systems"}, {"score": 0.00447316895126645, "phrase": "enriched_document"}, {"score": 0.004329124434198367, "phrase": "software_components"}, {"score": 0.003924121879214595, "phrase": "program_code"}, {"score": 0.003331275574328097, "phrase": "mobile_agent_technology"}, {"score": 0.003056682083784002, "phrase": "first_class_objects"}, {"score": 0.0029581155916843663, "phrase": "network_processing"}, {"score": 0.002770389097966904, "phrase": "document_components"}, {"score": 0.002659142621852998, "phrase": "local_or_remote_computers"}, {"score": 0.002220257443705344, "phrase": "implementation_language"}, {"score": 0.0021751997984619585, "phrase": "component_development_language"}], "paper_keywords": [""], "paper_abstract": "This paper presents a framework for building and managing compound documents in distributed systems. It enables an enriched document to be dynamically and nestedly composed of software components corresponding to various types of content, e.g., text, images, and windows. It permits the content of each component and program code to access the content inseparable inside the components so that the components can be viewed or modified without the need for any applications. It enables each component or document to migrate over a network under its own control by using mobile agent technology. Moreover, it introduces components as carriers or forwarders because it enables them to carry or transmit other components as first class objects to other locations. It offers several basic operations for network processing, e.g., forwarding, duplication, and synchronization. Since these operations are still document components, they can be dynamically deployed and customized at local or remote computers through GUI manipulations. It therefore allows an end-user to easily and rapidly configure network processing in the same way as if he/she had edited the documents. This paper describes the framework and its implementation, which currently uses Java as the implementation language as well as a component development language, and then illustrates several interesting applications that demonstrate its utility and flexibility.", "paper_title": "A document-centric component framework for document distributions", "paper_id": "WOS:000243318600038"}