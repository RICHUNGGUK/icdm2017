{"auto_keywords": [{"score": 0.036425209868891834, "phrase": "correct_processes"}, {"score": 0.03537870345379015, "phrase": "correct_process"}, {"score": 0.015719716506582538, "phrase": "weak_assumptions"}, {"score": 0.015634881083492636, "phrase": "initial_knowledge"}, {"score": 0.01153969623383923, "phrase": "underlying_network"}, {"score": 0.011260893383854682, "phrase": "fair_lossy_links"}, {"score": 0.009539112270226977, "phrase": "second_protocol"}, {"score": 0.004710791876940489, "phrase": "synchrony"}, {"score": 0.0046340196745259694, "phrase": "eventual_leader_election_problem"}, {"score": 0.004608730887154718, "phrase": "asynchronous_message-passing_systems"}, {"score": 0.004571055044692412, "phrase": "arbitrary_number_t"}, {"score": 0.004399248545002236, "phrase": "total_number"}, {"score": 0.004199247711875386, "phrase": "network_behavior"}, {"score": 0.004030310299445338, "phrase": "process_identities"}, {"score": 0.0037947054862511724, "phrase": "first_protocol"}, {"score": 0.0032372917632693403, "phrase": "actual_number"}, {"score": 0.0031932442564773468, "phrase": "considered_run"}, {"score": 0.0031671030360367843, "phrase": "eventually_timely_paths"}, {"score": 0.0026942333853202556, "phrase": "stronger_properties"}, {"score": 0.0024143815950383647, "phrase": "lower_bound_result"}, {"score": 0.002388043660169452, "phrase": "eventual_leader_election_protocol"}, {"score": 0.0023362245884046176, "phrase": "eventually_timely_links"}, {"score": 0.0022054750513000854, "phrase": "noteworthy_efficiency_property"}, {"score": 0.0021049977753042253, "phrase": "finite_domain"}], "paper_keywords": ["eventually timely and fair lossy links", " eventual leader election", " failure detector", " omega leader oracle", " process initial knowledge"], "paper_abstract": "This paper considers the eventual leader election problem in asynchronous message-passing systems where an arbitrary number t of processes can crash (t < n, where n is the total number of processes) It considers weak assumptions both on the initial knowledge of the processes and on the network behavior More precisely, initially, a process knows only its identity and the fact that the process identities are different and totally ordered (it knows neither n nor t) Two eventual leader election protocols and a lower bound are presented The first protocol assumes that a process also knows a lower bound a on the number of processes that do not crash This protocol requires the following behavioral properties from the underlying network the graph made up of the correct processes and fair lossy links is strongly connected, and there is a correct process connected to (n - f) - alpha other correct processes (where f is the actual number of crashes in the considered run) through eventually timely paths (paths made up of correct processes and eventually timely links) This protocol is not communication-efficient in the sense that each correct process has to send messages forever The second protocol is communication-efficient after some time, only the final common leader has to send messages forever This protocol does not require the processes to know alpha, but requires stronger properties from the underlying network each pair of correct processes has to be connected by fair lossy links (one in each direction), and there is a correct process whose n - f - 1 output links to the rest of correct processes have to be eventually timely A matching lower bound result shows that any eventual leader election protocol must have runs with this number of eventually timely links, even if all processes know all the processes identities In addition to being communication-efficient, the second protocol has another noteworthy efficiency property, namely, be the run finite or infinite, all the local variables and message fields have a finite domain in the run", "paper_title": "Eventual Leader Election with Weak Assumptions on Initial Knowledge, Communication Reliability, and Synchrony", "paper_id": "WOS:000284245500014"}