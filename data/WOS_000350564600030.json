{"auto_keywords": [{"score": 0.025929766175975626, "phrase": "vast"}, {"score": 0.00481495049065317, "phrase": "scale_network_forensics"}, {"score": 0.00462919213721188, "phrase": "security_breach"}, {"score": 0.004500891637057374, "phrase": "forensic_analysis"}, {"score": 0.004207230913063179, "phrase": "wide_range"}, {"score": 0.004160177106153782, "phrase": "heterogeneous_data_sources"}, {"score": 0.004067635935640407, "phrase": "long_period"}, {"score": 0.003954837422946628, "phrase": "iterative_nature"}, {"score": 0.003888659470009222, "phrase": "analysis_procedure"}, {"score": 0.003823584649521733, "phrase": "interactive_experience"}, {"score": 0.0036553070575015344, "phrase": "distributed_processing_paradigms"}, {"score": 0.0033974527047473044, "phrase": "batch-oriented_nature"}, {"score": 0.003266201217790818, "phrase": "sub-second_round-trip_times"}, {"score": 0.0031577303835881964, "phrase": "memory_processing"}, {"score": 0.003035711716881469, "phrase": "activity_logs"}, {"score": 0.0027898428590137515, "phrase": "visibility_across_space"}, {"score": 0.0026370661343466354, "phrase": "interactive_network_forensics"}, {"score": 0.002464709648714996, "phrase": "extended_actor_framework_libcppa"}, {"score": 0.0023962545023307937, "phrase": "lightweight_tasks"}, {"score": 0.0023694065215394593, "phrase": "negligible_overhead"}, {"score": 0.0022396019251440724, "phrase": "security_analysts"}, {"score": 0.0021773853011112882, "phrase": "huge_amounts"}, {"score": 0.0021049977753042253, "phrase": "incident_investigations"}], "paper_keywords": ["Security", " Network Forensics", " Message-oriented Middleware"], "paper_abstract": "When an organization detects a security breach, it undertakes a forensic analysis to figure out what happened. This investigation involves inspecting a wide range of heterogeneous data sources spanning over a long period of time. The iterative nature of the analysis procedure requires an interactive experience with the data. However, the distributed processing paradigms we find in practice today fail to provide this requirement: the batch-oriented nature of Map Reduce cannot deliver sub-second round-trip times, and distributed in-memory processing cannot store the terabytes of activity logs needed to inspect during an incident. We present the design and implementation of Visibility Across Space and Time (VAST), a distributed database to support interactive network forensics, and libcppa, its exceptionally scalable messaging core. The extended actor framework libcppa enables VAST to distribute lightweight tasks at negligible overhead. In our live demo, we showcase how VAST enables security analysts to grapple with the huge amounts of data often associated with incident investigations.", "paper_title": "Native Actors: How to Scale Network Forensics", "paper_id": "WOS:000350564600030"}