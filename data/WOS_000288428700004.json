{"auto_keywords": [{"score": 0.036359699237778445, "phrase": "parallel_ml"}, {"score": 0.004814951205791253, "phrase": "manticore"}, {"score": 0.004757366891541805, "phrase": "increasing_availability"}, {"score": 0.004719359108879602, "phrase": "commodity_multicore_processors"}, {"score": 0.004662913362513954, "phrase": "parallel_computing"}, {"score": 0.004234884779773412, "phrase": "previous_parallel_languages"}, {"score": 0.004134137523409649, "phrase": "large-scale_scientific_computing"}, {"score": 0.0038305869305614504, "phrase": "desktop_system"}, {"score": 0.003739421738326676, "phrase": "new_parallel-language_designs"}, {"score": 0.0036798490617699227, "phrase": "broader_spectrum"}, {"score": 0.003606711217432998, "phrase": "manticore_project"}, {"score": 0.0033150213498435617, "phrase": "parallel_applications"}, {"score": 0.00328849874768242, "phrase": "commodity_multicore_hardware"}, {"score": 0.0032231139180761183, "phrase": "diverse_collection"}, {"score": 0.00319732428387928, "phrase": "parallel_constructs"}, {"score": 0.003171740347925348, "phrase": "different_granularities"}, {"score": 0.003022465992278672, "phrase": "implicitly_threaded_parallel_constructs"}, {"score": 0.0029386456078004863, "phrase": "fine-grained_parallelism"}, {"score": 0.0028115863316685937, "phrase": "related_ones"}, {"score": 0.00254282157860369, "phrase": "data_parallelism"}, {"score": 0.0024822279007111255, "phrase": "present_work"}, {"score": 0.0024623517958288228, "phrase": "related_work"}, {"score": 0.002442634456448208, "phrase": "functional_data-parallel_language_designs"}, {"score": 0.002374855916752648, "phrase": "parallel_problems"}, {"score": 0.0023558375480288297, "phrase": "regular_structure"}, {"score": 0.002327594516681507, "phrase": "compiler_transformations"}, {"score": 0.0022001958412800745, "phrase": "detailed_examples"}, {"score": 0.0021219954544970878, "phrase": "formal_description"}], "paper_keywords": [""], "paper_abstract": "The increasing availability of commodity multicore processors is making parallel computing ever more widespread. In order to exploit its potential, programmers need languages that make the benefits of parallelism accessible and understandable. Previous parallel languages have traditionally been intended for large-scale scientific computing, and they tend not to be well suited to programming the applications one typically finds on a desktop system. Thus, we need new parallel-language designs that address a broader spectrum of applications. The Manticore project is our effort to address this need. At its core is Parallel ML, a high-level functional language for programming parallel applications on commodity multicore hardware. Parallel ML provides a diverse collection of parallel constructs for different granularities of work. In this paper, we focus on the implicitly threaded parallel constructs of the language, which support fine-grained parallelism. We concentrate on those elements that distinguish our design from related ones, namely, a novel parallel binding form, a nondeterministic parallel case form, and the treatment of exceptions in the presence of data parallelism. These features differentiate the present work from related work on functional data-parallel language designs, which have focused largely on parallel problems with regular structure and the compiler transformations-most notably, flattening-that make such designs feasible. We present detailed examples utilizing various mechanisms of the language and give a formal description of our implementation.", "paper_title": "Implicitly threaded parallelism in Manticore", "paper_id": "WOS:000288428700004"}