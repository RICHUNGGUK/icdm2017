{"auto_keywords": [{"score": 0.049124089120586564, "phrase": "multi-core"}, {"score": 0.00481495049065317, "phrase": "memory_accesses"}, {"score": 0.004757087682427765, "phrase": "row_buffer_conflicts"}, {"score": 0.004681012408089219, "phrase": "multi-bank_systems"}, {"score": 0.0045876189888390895, "phrase": "novel_kernel-level_memory_allocator"}, {"score": 0.004370973501074594, "phrase": "multi-bank"}, {"score": 0.003999907278478564, "phrase": "memory_container"}, {"score": 0.0037955672944969287, "phrase": "minimum_number"}, {"score": 0.003765067028482197, "phrase": "page_frames"}, {"score": 0.0036602262729063775, "phrase": "memory_organization"}, {"score": 0.0034452601929727752, "phrase": "bank_parallelism"}, {"score": 0.003308986613384597, "phrase": "page_frame_allocation"}, {"score": 0.003165283275312972, "phrase": "multiple_banks"}, {"score": 0.003114584448820957, "phrase": "thread's_access_pattern"}, {"score": 0.002872979681637667, "phrase": "architectural_characteristics"}, {"score": 0.002838387600282891, "phrase": "underlying_memory_organization"}, {"score": 0.002628747284714371, "phrase": "random_manner"}, {"score": 0.002545165985686468, "phrase": "regular_pattern"}, {"score": 0.0024052270356036743, "phrase": "inter-thread_access_interference"}, {"score": 0.002357131515622894, "phrase": "memory_banks"}, {"score": 0.0022914054720704546, "phrase": "linux_kernel_version"}, {"score": 0.002254672021120091, "phrase": "intel_xeon_system"}, {"score": 0.0021392979397427984, "phrase": "overall_performance"}, {"score": 0.0021220787047953093, "phrase": "memory_intensive_benchmarks"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Measurement", " Performance", " Row-buffer conflict", " Memory management", " Randomized algorithm", " Memory container", " Analysis tool"], "paper_abstract": "We propose a novel kernel-level memory allocator, called M-3 (M-cube, Multi-core Multi-bank Memory allocator), that has the following two features. First, it introduces and makes use of a notion of a memory container, which is defined as a unit of memory that comprises the minimum number of page frames that can cover all the banks of the memory organization, by exclusively assigning a container to a core so that each core achieves bank parallelism as much as possible. Second, it orchestrates page frame allocation so that pages that threads access are dispersed randomly across multiple banks so that each thread's access pattern is randomized. The development of M-3 is based on a tool that we develop to fully understand the architectural characteristics of the underlying memory organization. Using an extension of this tool, we observe that the same application that accesses pages in a random manner outperforms one that accesses pages in a regular pattern such as sequential or same ordered accesses. This is because such randomized accesses reduces inter-thread access interference on the rowbuffer in memory banks. We implement M-3 in the Linux kernel version 2.6.32 on the Intel Xeon system that has 16 cores and 32GB DRAM. Performance evaluation with various workloads show that M-3 improves the overall performance for memory intensive benchmarks by up to 85% with an average of about 40%.", "paper_title": "Regularities Considered Harmful: Forcing Randomness to Memory Accesses to Reduce Row Buffer Conflicts for Multi-Core, Multi-Bank Systems", "paper_id": "WOS:000321213100015"}