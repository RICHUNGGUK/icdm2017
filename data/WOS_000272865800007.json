{"auto_keywords": [{"score": 0.04862271607252209, "phrase": "pca"}, {"score": 0.00481495049065317, "phrase": "iterative_pca_algorithms"}, {"score": 0.004741167616693272, "phrase": "principal_component_analysis"}, {"score": 0.004526503177267299, "phrase": "key_statistical_technique"}, {"score": 0.00445712058827745, "phrase": "multivariate_data_analysis"}, {"score": 0.004355026964936104, "phrase": "large_data_sets"}, {"score": 0.0042552618754756934, "phrase": "common_approach"}, {"score": 0.004190019394361629, "phrase": "pca_computation"}, {"score": 0.004031238480458909, "phrase": "standard_nipals-pca_algorithm"}, {"score": 0.003427246079774314, "phrase": "first_few_components"}, {"score": 0.0031968441980848436, "phrase": "gram-schmidt_orthogonalization"}, {"score": 0.0029003803348233766, "phrase": "nipals-pca."}, {"score": 0.0027928270807396276, "phrase": "nvidia"}, {"score": 0.0025942468561537682, "phrase": "gs-pca_algorithms"}, {"score": 0.0025347150832077175, "phrase": "numerical_results"}, {"score": 0.0024574537875026634, "phrase": "gpu_parallel_optimized_versions"}, {"score": 0.002437017367420475, "phrase": "cublas"}, {"score": 0.0021049977753042253, "phrase": "cpu_optimized_versions"}], "paper_keywords": ["algorithms", " automata", " combinatorial optimization", " statistical mechanics", " stochastic processes"], "paper_abstract": "Principal component analysis (PCA) is a key statistical technique for multivariate data analysis. For large data sets, the common approach to PCA computation is based on the standard NIPALS-PCA algorithm, which unfortunately suffers from loss of orthogonality, and therefore its applicability is usually limited to the estimation of the first few components. Here we present an algorithm based on Gram-Schmidt orthogonalization (called GS-PCA), which eliminates this shortcoming of NIPALS-PCA. Also, we discuss the GPU (Graphics Processing Unit) parallel implementation of both NIPALS-PCA and GS-PCA algorithms. The numerical results show that the GPU parallel optimized versions, based on CUBLAS (NVIDIA), are substantially faster (up to 12 times) than the CPU optimized versions based on CBLAS (GNU Scientific Library).", "paper_title": "Parallel GPU Implementation of Iterative PCA Algorithms", "paper_id": "WOS:000272865800007"}