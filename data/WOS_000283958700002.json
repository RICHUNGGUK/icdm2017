{"auto_keywords": [{"score": 0.05007845862438665, "phrase": "message_logging_model"}, {"score": 0.04282201182938258, "phrase": "mtbf"}, {"score": 0.03592108361069665, "phrase": "message_logging"}, {"score": 0.004770211811866158, "phrase": "high_performance"}, {"score": 0.004552648949390462, "phrase": "high_performance_computing"}, {"score": 0.004385733482617193, "phrase": "direct_consequence"}, {"score": 0.00428451995524549, "phrase": "computational_power"}, {"score": 0.004166129325245761, "phrase": "mean_time"}, {"score": 0.003689628075766217, "phrase": "fault-tolerant_algorithms"}, {"score": 0.0036213041338584756, "phrase": "execution_environments"}, {"score": 0.00329813918116714, "phrase": "better_overall_performance"}, {"score": 0.0031328221096543823, "phrase": "faster_failure_recovery"}, {"score": 0.0030178044717552605, "phrase": "high_overhead"}, {"score": 0.002722758109991685, "phrase": "failure-free_message_logging_performance"}, {"score": 0.00263505298504827, "phrase": "useless_memory_copies"}, {"score": 0.002562123444678208, "phrase": "logged_events"}, {"score": 0.00246800641971897, "phrase": "pessimistic_message_logging_protocol"}, {"score": 0.0023662411481713704, "phrase": "previous_reference_implementation"}, {"score": 0.0022475295254231714, "phrase": "magnitude_improvement"}, {"score": 0.002185301851004467, "phrase": "zero_overhead"}], "paper_keywords": ["high performance computing", " fault tolerance", " message logging", " uncoordinated checkpoint"], "paper_abstract": "Over the past decade the number of processors used in high performance computing has increased to hundreds of thousands. As a direct consequence, and while the computational power follows the trend, the mean time between failures (MTBF) has suffered and is now being counted in hours. In order to circumvent this limitation, a number of fault-tolerant algorithms as well as execution environments have been developed using the message passing paradigm. Among them, message logging has been proved to achieve a better overall performance when the MTBF is low, mainly due to a faster failure recovery. However, message logging suffers from a high overhead when no failure occurs. Therefore, in this paper we discuss a refinement of the message logging model intended to improve the failure-free message logging performance. The proposed approach simultaneously removes useless memory copies and reduces the number of logged events. We present the implementation of a pessimistic message logging protocol in Open MPI and compare it with the previous reference implementation MPICH-V2. The results outline a several order of magnitude improvement on the performance and a zero overhead for most messages. Published in 2010 by John Wiley & Sons, Ltd.", "paper_title": "Redesigning the message logging model for high performance", "paper_id": "WOS:000283958700002"}