{"auto_keywords": [{"score": 0.04687072700394151, "phrase": "contextual_approximation"}, {"score": 0.0449038816416867, "phrase": "lr"}, {"score": 0.00481495049065317, "phrase": "call-by-need_lambda-calculus_with_letrec"}, {"score": 0.004529776351030488, "phrase": "applicative_similarity"}, {"score": 0.004384623928442369, "phrase": "applicative_bisimilarity"}, {"score": 0.00434906528856802, "phrase": "contextual_equivalence"}, {"score": 0.004244102948402086, "phrase": "deterministic_call"}, {"score": 0.004158563941891469, "phrase": "lambda_calculus"}, {"score": 0.00407474190126995, "phrase": "data_constructors"}, {"score": 0.004008897491380646, "phrase": "haskell's_seq-operator"}, {"score": 0.0039280803011236395, "phrase": "untyped_version"}, {"score": 0.0038803710796509227, "phrase": "core_language"}, {"score": 0.0038489318198466124, "phrase": "haskell"}, {"score": 0.003740679163860117, "phrase": "equivalence_proofs"}, {"score": 0.0034761488481944657, "phrase": "fully_abstract_and_surjective_transfer"}, {"score": 0.003433909720151841, "phrase": "call-by-name_calculus"}, {"score": 0.0033373303217961803, "phrase": "abramsky's_lazy_lambda_calculus"}, {"score": 0.0032833625797814474, "phrase": "latter_calculus_equivalence"}, {"score": 0.0031650944584992726, "phrase": "howe's_method"}, {"score": 0.0030017207229983385, "phrase": "inductively_defined_similarity"}, {"score": 0.002870066750788841, "phrase": "letrec_calculus"}, {"score": 0.002777949746964955, "phrase": "name_lambda_calculus"}, {"score": 0.002688781336915723, "phrase": "first_translation"}, {"score": 0.0026560841114619147, "phrase": "call-by-need_strategy"}, {"score": 0.002623783458189614, "phrase": "call-by-name_strategy"}, {"score": 0.002539550974361945, "phrase": "infinite_trees"}, {"score": 0.0024781515864648242, "phrase": "letrec_expressions"}, {"score": 0.0024480094603893175, "phrase": "second_translation"}, {"score": 0.002398583143633567, "phrase": "multi-fixpoint_combinators"}, {"score": 0.0021748483128942687, "phrase": "mentioned_calculi"}, {"score": 0.0021049977753042253, "phrase": "letrec-free_expressions"}], "paper_keywords": ["semantics", " contextual equivalence", " bisimulation", " lambda calculus", " call-by-need", " Haskell"], "paper_abstract": "This paper shows equivalence of several versions of applicative similarity and contextual approximation, and hence also of applicative bisimilarity and contextual equivalence, in LR, the deterministic call-by-need lambda calculus with letrec extended by data constructors, case-expressions and Haskell's seq-operator. LR models an untyped version of the core language of Haskell. The use of bisimilarities simplifies equivalence proofs in calculi and opens a way for more convenient correctness proofs for program transformations. The proof is by a fully abstract and surjective transfer into a call-by-name calculus, which is an extension of Abramsky's lazy lambda calculus. In the latter calculus equivalence of our similarities and contextual approximation can be shown by Howe's method. Similarity is transferred back to LR on the basis of an inductively defined similarity. The translation from the call-by-need letrec calculus into the extended call-by-name lambda calculus is the composition of two translations. The first translation replaces the call-by-need strategy by a call-by-name strategy and its correctness is shown by exploiting infinite trees which emerge by unfolding the letrec expressions. The second translation encodes letrec-expressions by using multi-fixpoint combinators and its correctness is shown syntactically by comparing reductions of both calculi. A further result of this paper is an isomorphism between the mentioned calculi, which is also an identity on letrec-free expressions.", "paper_title": "SIMULATION IN THE CALL-BY-NEED LAMBDA-CALCULUS WITH LETREC, CASE, CONSTRUCTORS, AND SEQ", "paper_id": "WOS:000353193000015"}