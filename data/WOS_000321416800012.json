{"auto_keywords": [{"score": 0.04810280430576511, "phrase": "information_product"}, {"score": 0.028198276166246455, "phrase": "information_products"}, {"score": 0.008673236160869086, "phrase": "behavior-based_utility_function"}, {"score": 0.00761119821548235, "phrase": "multiple_versions"}, {"score": 0.007418277576148156, "phrase": "linear_valuation_function"}, {"score": 0.006153913944598901, "phrase": "bilevel_programming_model"}, {"score": 0.004870585841746245, "phrase": "multi-version_strategy"}, {"score": 0.004584005829642029, "phrase": "self-selection_behavior"}, {"score": 0.004488436622161689, "phrase": "versioning_strategy"}, {"score": 0.004273085653512743, "phrase": "functional_and_nonfunctional_features"}, {"score": 0.004243172867451056, "phrase": "customers'_behavior"}, {"score": 0.004058508269656021, "phrase": "customers'_valuation"}, {"score": 0.003992510510741278, "phrase": "required_quality"}, {"score": 0.003936792490293843, "phrase": "customer's_requirement"}, {"score": 0.0037565999871472114, "phrase": "marginal_decrease"}, {"score": 0.003468933044077764, "phrase": "quality_levels"}, {"score": 0.003180776394700745, "phrase": "optimal_quality_levels"}, {"score": 0.0029997105964059785, "phrase": "correlated_decision_variables"}, {"score": 0.0029786851234338027, "phrase": "steady-state_evolutionary_algorithm"}, {"score": 0.0029439686837937308, "phrase": "local_search_method"}, {"score": 0.0028289227232398584, "phrase": "global_optimality"}, {"score": 0.002815686094434675, "phrase": "versioning_schemes"}, {"score": 0.0028025112262157147, "phrase": "numerical_experiments"}, {"score": 0.002756881426949874, "phrase": "specific_parameterization"}, {"score": 0.002731140682482055, "phrase": "hybrid_algorithm"}, {"score": 0.0027183603320329462, "phrase": "experimental_results"}, {"score": 0.002630552477266515, "phrase": "behavior-based_valuation_function"}, {"score": 0.0025635498871630475, "phrase": "one-version_scheme"}, {"score": 0.002509997746079366, "phrase": "maximal_number"}, {"score": 0.002446058265042169, "phrase": "new_lower-quality_version"}, {"score": 0.00241753451494621, "phrase": "total_profit"}, {"score": 0.0023670253727443693, "phrase": "lower_quality_level_version"}, {"score": 0.0023284694908038348, "phrase": "higher_quality_versions"}, {"score": 0.0022851722797681525, "phrase": "previous_versioning_schemes"}, {"score": 0.0022585203909344918, "phrase": "multi-version_scheme"}, {"score": 0.002175300873500652, "phrase": "greater_revenue"}, {"score": 0.0021651159238912023, "phrase": "price_discrimination"}, {"score": 0.0021549785581216063, "phrase": "heterogeneous_customers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Information product", " Versioning strategy", " Behavior-based utility function", " Bilevel programming model", " Evolutionary computation"], "paper_abstract": "This paper reconsiders two fundamental assumptions (i.e., on the quality of information product and the self-selection behavior of customers) that decide the optimality of versioning strategy (or vertically differentiated product line) for information products. The quality of an information product is clarified in terms of functional and nonfunctional features. The customers' behavior of self-selection among multiple versions of an information product is examined, and the disability of linear valuation function for exactly capturing customers' valuation on information products is clarified. The required quality is introduced to depict a customer's requirement on the quality of an information product, and a behavior-based utility function is thus defined, where a customer has a marginal decrease (different from the constant marginal in linear valuation function) on the valuation of versions with quality levels higher than the required, but the valuation of a customer diminishes quickly on versions with quality levels lower than the required. Then, a bilevel programming model is built to represent the task for optimizing the strategy of versioning an information product, with the monopolist as the leader and all customers as followers. Optimal quality levels and prices for multiple versions are obtained for a given number of versions. To deal with the nonlinearity and multimodality of this model due to correlated decision variables, a steady-state evolutionary algorithm, hybridized with the local search method (called the hybrid steady-state evolutionary algorithms), is developed to improve the global optimality of versioning schemes. Numerical experiments are conducted on the bilevel programming model with specific parameterization by using the hybrid algorithm. Experimental results verify the optimality of multi-version strategy and reveal various facets of its property. With the behavior-based valuation function of heterogeneous customers, the multi-version strategy is superior to the one-version scheme. The total profit increases logarithmically with the maximal number of versions, which means that the introduction of a new lower-quality version contributes less to the total profit of a monopolist. Furthermore, when a lower quality level version is offered to the market, higher quality versions are priced higher than they were in previous versioning schemes, indicating that a multi-version scheme can make more detailed segmentation of the market. Therefore, a monopolist is able to gain greater revenue via price discrimination on heterogeneous customers through vertically differentiating information products. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Optimal versioning strategy for information products with behavior-based utility function of heterogeneous customers", "paper_id": "WOS:000321416800012"}