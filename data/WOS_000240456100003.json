{"auto_keywords": [{"score": 0.047678511248687376, "phrase": "escheduler"}, {"score": 0.010612387000973441, "phrase": "multimedia_applications"}, {"score": 0.006180880099514536, "phrase": "total_energy"}, {"score": 0.004276390289178831, "phrase": "mobile_device"}, {"score": 0.004046020290832207, "phrase": "multimedia_timing_requirements"}, {"score": 0.003904495523681369, "phrase": "dynamic_voltage_scaling"}, {"score": 0.0038584250641318057, "phrase": "traditional_soft_real-time_cpu_scheduling"}, {"score": 0.0035648266669315943, "phrase": "scheduling_decisions"}, {"score": 0.003508834578859094, "phrase": "probability_distribution"}, {"score": 0.0034811680446852054, "phrase": "cycle_demand"}, {"score": 0.0033860360186761533, "phrase": "online_profiling"}, {"score": 0.0032804824152243106, "phrase": "linux_kernel"}, {"score": 0.00316565009987584, "phrase": "variable-speed_cpu"}, {"score": 0.003140680985599885, "phrase": "typical_multimedia_codecs"}, {"score": 0.00303072749758085, "phrase": "cycle_demand_distribution"}, {"score": 0.0027450280220853137, "phrase": "soft_performance_guarantees"}, {"score": 0.002627985415362773, "phrase": "application-specific_performance_requirements"}, {"score": 0.002447101794397243, "phrase": "scheduling_algorithm"}, {"score": 0.0024277864377046016, "phrase": "voltage_scaling"}, {"score": 0.002370748155770563, "phrase": "voltage_scaling_algorithms"}, {"score": 0.0023334673218688437, "phrase": "demand_distribution"}, {"score": 0.0022162970216404927, "phrase": "discrete_cpu_speeds"}, {"score": 0.0021901023885734, "phrase": "corresponding_total_power"}, {"score": 0.002164216680934624, "phrase": "whole_laptop"}, {"score": 0.002121750502427882, "phrase": "continuous_speeds"}, {"score": 0.0021049977753042253, "phrase": "cubic_speed-power_relationship"}], "paper_keywords": [""], "paper_abstract": "This article presents the design, implementation, and evaluation of EScheduler, an energy-efficient soft real-time CPU scheduler for multimedia applications running on a mobile device. EScheduler seeks to minimize the total energy consumed by the device while meeting multimedia timing requirements. To achieve this goal, EScheduler integrates dynamic voltage scaling into the traditional soft real-time CPU scheduling: It decides at what CPU speed to execute applications in addition to when to execute what applications. EScheduler makes these scheduling decisions based on the probability distribution of cycle demand of multimedia applications and obtains their demand distribution via online profiling. We have implemented EScheduler in the Linux kernel and evaluated it on a laptop with a variable-speed CPU and typical multimedia codecs. Our experimental results show four findings: first, the cycle demand distribution of our studied codecs is stable or changes slowly. This stability implies the feasibility to perform our proposed energy-efficient scheduling with low overhead. Second, EScheduler delivers soft performance guarantees to these codecs by bounding their deadline miss ratio under the application-specific performance requirements. Third, EScheduler reduces the total energy of the laptop by 14.4% to 37.2% relative to the scheduling algorithm without voltage scaling and by 2% to 10.5% relative to voltage scaling algorithms without considering the demand distribution. Finally, EScheduler saves energy by 2% to 5% by explicitly considering the discrete CPU speeds and the corresponding total power of the whole laptop, rather than assuming continuous speeds and cubic speed-power relationship.", "paper_title": "Energy-efficient CPU scheduling for multimedia applications", "paper_id": "WOS:000240456100003"}