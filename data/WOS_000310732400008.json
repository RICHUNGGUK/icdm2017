{"auto_keywords": [{"score": 0.048843518180451934, "phrase": "flash"}, {"score": 0.03647790400213414, "phrase": "poisson_solver"}, {"score": 0.00481495049065317, "phrase": "large_scale_simulations"}, {"score": 0.004740009255053372, "phrase": "flash_code"}, {"score": 0.0046176782475198085, "phrase": "multiphysics_multiscale_adaptive_mesh_refinement"}, {"score": 0.004569843506508553, "phrase": "amr"}, {"score": 0.004382364826200616, "phrase": "reactive_flows"}, {"score": 0.004293037688879811, "phrase": "astrophysics"}, {"score": 0.004180809918117248, "phrase": "flexible_applications_configuration_capability"}, {"score": 0.004072851768196397, "phrase": "dual_task"}, {"score": 0.0038049789989278463, "phrase": "fully_explicit_solvers"}, {"score": 0.0035733198242955634, "phrase": "underlying_mesh"}, {"score": 0.0033910448175165004, "phrase": "multigrid_method"}, {"score": 0.0033208039780305873, "phrase": "multigrid"}, {"score": 0.003251920460276645, "phrase": "processor_starvation"}, {"score": 0.0032012284065895537, "phrase": "communication_costs"}, {"score": 0.0031678720736808574, "phrase": "coarser_grids"}, {"score": 0.0028828348726682965, "phrase": "uniform_grid_mesh"}, {"score": 0.0028527866590859967, "phrase": "amr_mesh"}, {"score": 0.002678944072162297, "phrase": "scalability_limitation"}, {"score": 0.002609676416376978, "phrase": "flash."}, {"score": 0.0025824576209656676, "phrase": "principal_challenge"}, {"score": 0.002542174767860791, "phrase": "proposed_merger"}, {"score": 0.0024634797027967203, "phrase": "communication_algorithm"}, {"score": 0.0023499703712897293, "phrase": "uniform_grid"}, {"score": 0.002325467138436929, "phrase": "amr."}, {"score": 0.002218299213266519, "phrase": "performance_studies"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scalability", " multigrid", " AMR", " FLASH"], "paper_abstract": "FLASH is a multiphysics multiscale adaptive mesh refinement (AMR) code originally designed for simulation of reactive flows often found in Astrophysics. With its wide user base and flexible applications configuration capability, FLASH has a dual task of maintaining scalability and portability in all its solvers. The scalability of fully explicit solvers in the code is tied very closely to that of the underlying mesh. Others such as the Poisson solver based on a multigrid method have more complex scaling behavior. Multigrid methods suffer from processor starvation and dominating communication costs at coarser grids with increase in the number of processors. In this paper, we propose a combination of uniform grid mesh with AMR mesh, and the merger of two different sets of solvers to overcome the scalability limitation of the Poisson solver in FLASH. The principal challenge in the proposed merger is the efficiency of the communication algorithm to map the mesh back and forth between uniform grid and AMR. We present two different parallel mapping algorithms and also discuss results from performance studies of the two implementations. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Optimization of multigrid based elliptic solver for large scale simulations in the FLASH code", "paper_id": "WOS:000310732400008"}