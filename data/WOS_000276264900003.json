{"auto_keywords": [{"score": 0.028792504635115835, "phrase": "ctl"}, {"score": 0.00481495049065317, "phrase": "model_checking"}, {"score": 0.004728624975677976, "phrase": "useful_method"}, {"score": 0.004372002674739612, "phrase": "desired_behavior"}, {"score": 0.004216566615939546, "phrase": "mathematical_model"}, {"score": 0.00406663414150229, "phrase": "formal_specification"}, {"score": 0.0035181731203867456, "phrase": "model_checking_problem"}, {"score": 0.0034759420565135253, "phrase": "finite-state_open_systems"}, {"score": 0.00306189690236109, "phrase": "open_pushdown_systems"}, {"score": 0.0029707940194245216, "phrase": "related_model-checking_problem"}], "paper_keywords": ["Module checking", " Pushdown systems", " Branching temporal logics", " Tree automata"], "paper_abstract": "Model checking is a useful method to verify automatically the correctness of a system with respect to a desired behavior, by checking whether a mathematical model of the system satisfies a formal specification of this behavior. Many systems of interest are open, in the sense that their behavior depends on the interaction with their environment. The model checking problem for finite-state open systems (called module checking) has been intensively studied in the literature. In this paper, we focus on open pushdown systems and we study the related model-checking problem (pushdown module checking, for short) with respect to properties expressed by CTL and CTL (*) formulas. We show that pushdown module checking against CTL (resp., CTL (*)) is 2Exptime-complete (resp., 3Exptime-complete). Moreover, we prove that for a fixed CTL or CTL (*) formula, the problem is Exptime-complete.", "paper_title": "Pushdown module checking", "paper_id": "WOS:000276264900003"}