{"auto_keywords": [{"score": 0.03610310423475189, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "relational_query_coprocessing_on_graphics_processors"}, {"score": 0.004787500676821839, "phrase": "graphics_processors"}, {"score": 0.004679250110504641, "phrase": "powerful_coprocessors"}, {"score": 0.004652570301627026, "phrase": "general_purpose_computation"}, {"score": 0.004599664074521038, "phrase": "commodity_cpus"}, {"score": 0.004508515162768118, "phrase": "magnitude_higher_computation_power"}, {"score": 0.004393961059791322, "phrase": "new-generation_gpus"}, {"score": 0.004343982746943174, "phrase": "random_memory_locations"}, {"score": 0.00430687080979172, "phrase": "efficient_interprocessor_communication"}, {"score": 0.00428230507124341, "phrase": "on-chip_local_memory"}, {"score": 0.004221499407860181, "phrase": "general_purpose_parallel_programming_model"}, {"score": 0.0041378132174467105, "phrase": "gpu_features"}, {"score": 0.00409073644076669, "phrase": "graphics_processing"}, {"score": 0.004044193091458237, "phrase": "massively_multithreaded_architecture"}, {"score": 0.0040096320322921715, "phrase": "single-instruction-multiple-data_processing_style"}, {"score": 0.003918900658052011, "phrase": "single_application"}, {"score": 0.003775803846431323, "phrase": "limited_bandwidth"}, {"score": 0.003637913064193312, "phrase": "dynamic_memory_allocation"}, {"score": 0.0036171490978544607, "phrase": "gpu_kernels"}, {"score": 0.0035555630508414954, "phrase": "write_conflicts"}, {"score": 0.003505040278555349, "phrase": "careful_design"}, {"score": 0.0034061309156482407, "phrase": "coprocessing_database_queries"}, {"score": 0.0032536298009154052, "phrase": "in-memory_relational_query_coprocessing_system"}, {"score": 0.0032350525519996708, "phrase": "gdb"}, {"score": 0.0031982314504653405, "phrase": "gpu."}, {"score": 0.0031527521377717215, "phrase": "gpu_hardware_features"}, {"score": 0.0030901868389687534, "phrase": "highly_optimized_data-parallel_primitives"}, {"score": 0.0029772596754941076, "phrase": "common_relational_query_processing_algorithms"}, {"score": 0.002926536468412877, "phrase": "high_parallelism"}, {"score": 0.002884925971272727, "phrase": "high_memory_bandwidth"}, {"score": 0.0028276605157505977, "phrase": "parallel_computation"}, {"score": 0.002811508144760071, "phrase": "memory_optimizations"}, {"score": 0.0027794789059440023, "phrase": "memory_stalls"}, {"score": 0.0027321160319816458, "phrase": "coprocessing_techniques"}, {"score": 0.0026702152408596565, "phrase": "gpu-cpu_data_transfer_cost"}, {"score": 0.0025948026124758394, "phrase": "suitable_processors"}, {"score": 0.0024999332729520084, "phrase": "optimized_overall_performance"}, {"score": 0.0024223669182785157, "phrase": "intel_quad-core_cpu"}, {"score": 0.002353937539098277, "phrase": "microbenchmark_queries"}, {"score": 0.0023404848520465543, "phrase": "memory-resident_data"}, {"score": 0.0023138091498428855, "phrase": "tpc-h_queries"}, {"score": 0.0022940016281840546, "phrase": "complex_data_types"}, {"score": 0.0022808906900615325, "phrase": "multiple_query_operators"}, {"score": 0.002267854514730502, "phrase": "data_sets"}, {"score": 0.0022420047573094857, "phrase": "gpu_memory"}], "paper_keywords": ["Algorithms", " Measurement", " Performance", " Relational database", " join", " sort", " primitive", " parallel processing", " graphics processors"], "paper_abstract": "Graphics processors (GPUs) have recently emerged as powerful coprocessors for general purpose computation. Compared with commodity CPUs, GPUs have an order of magnitude higher computation power as well as memory bandwidth. Moreover, new-generation GPUs allow writes to random memory locations, provide efficient interprocessor communication through on-chip local memory, and support a general purpose parallel programming model. Nevertheless, many of the GPU features are specialized for graphics processing, including the massively multithreaded architecture, the Single-Instruction-Multiple-Data processing style, and the execution model of a single application at a time. Additionally, GPUs rely on a bus of limited bandwidth to transfer data to and from the CPU, do not allow dynamic memory allocation from GPU kernels, and have little hardware support for write conflicts. Therefore, a careful design and implementation is required to utilize the GPU for coprocessing database queries. In this article, we present our design, implementation, and evaluation of an in-memory relational query coprocessing system, GDB, on the GPU. Taking advantage of the GPU hardware features, we design a set of highly optimized data-parallel primitives such as split and sort, and use these primitives to implement common relational query processing algorithms. Our algorithms utilize the high parallelism as well as the high memory bandwidth of the GPU, and use parallel computation and memory optimizations to effectively reduce memory stalls. Furthermore, we propose coprocessing techniques that take into account both the computation resources and the GPU-CPU data transfer cost so that each operator in a query can utilize suitable processors-the CPU, the GPU, or both-for an optimized overall performance. We have evaluated our GDB system on a machine with an Intel quad-core CPU and an NVIDIA GeForce 8800 GTX GPU. Our workloads include microbenchmark queries on memory-resident data as well as TPC-H queries that involve complex data types and multiple query operators on data sets larger than the GPU memory. Our results show that our GPU-based algorithms are 2-27x faster than their optimized CPU-based counterparts on in-memory data. Moreover, the performance of our coprocessing scheme is similar to, or better than, both the GPU-only and the CPU-only schemes.", "paper_title": "Relational Query Coprocessing on Graphics Processors", "paper_id": "WOS:000273024000003"}