{"auto_keywords": [{"score": 0.03593355760997411, "phrase": "adaptive_search"}, {"score": 0.004676575291629554, "phrase": "peer_networks"}, {"score": 0.004520132822496416, "phrase": "distributed_hash_table"}, {"score": 0.004284755353695709, "phrase": "search_efficiency"}, {"score": 0.004081385289516914, "phrase": "unique_peer"}, {"score": 0.0040222701316738295, "phrase": "predefined_hash_functions"}, {"score": 0.003925633992809873, "phrase": "tight_coupling"}, {"score": 0.0038499929374478125, "phrase": "hosting_peers"}, {"score": 0.0038127186374325582, "phrase": "high_maintenance_cost"}, {"score": 0.003757480190200645, "phrase": "highly_dynamic_network"}, {"score": 0.0034423989472667756, "phrase": "distributed_caching"}, {"score": 0.0031079352545607267, "phrase": "predefined_hash_function"}, {"score": 0.0029031614127920232, "phrase": "\"_peers"}, {"score": 0.002861062731782219, "phrase": "high_probability"}, {"score": 0.0028058765785670546, "phrase": "desired_indices"}, {"score": 0.0027651847105654363, "phrase": "search_cost"}, {"score": 0.002685558057339722, "phrase": "searching_space"}, {"score": 0.0026209522797963447, "phrase": "dht_solutions"}, {"score": 0.002400944221804575, "phrase": "passive_fashion"}, {"score": 0.002320449502337321, "phrase": "updating_indices"}, {"score": 0.0022536005664642294, "phrase": "dicas_protocol"}, {"score": 0.002199363362666037, "phrase": "network_search_traffic"}, {"score": 0.0021464286727045623, "phrase": "small_cache_space"}, {"score": 0.0021049977753042253, "phrase": "individual_peer"}], "paper_keywords": ["peer-to-peer", " query response", " flooding", " distributed caching and adaptive search", " search efficiency"], "paper_abstract": "Peer-to-peer networks are widely criticized for their inefficient flooding search mechanism. Distributed Hash Table (DHT) algorithms have been proposed to improve the search efficiency by mapping the index of a file to a unique peer based on predefined hash functions. However, the tight coupling between indices and hosting peers incurs high maintenance cost in a highly dynamic network. To properly balance the tradeoff between the costs of indexing and searching, we propose the distributed caching and adaptive search (DiCAS) algorithm, where indices are passively cached in a group of peers based on a predefined hash function. Guided by the same function, adaptive search selectively forwards queries to \"matched\" peers with a high probability of caching the desired indices. The search cost is reduced due to shrunk searching space. Different from the DHT solutions, distributed caching loosely maps the index of a file to a group of peers in a passive fashion, which saves the cost of updating indices. Our simulation study shows that the DiCAS protocol can significantly reduce the network search traffic with the help of small cache space contributed by each individual peer.", "paper_title": "DiCAS: An efficient distributed caching mechanism for P2P systems", "paper_id": "WOS:000239937000004"}