{"auto_keywords": [{"score": 0.04946676866474616, "phrase": "classical_ssa_elimination"}, {"score": 0.048912784012203225, "phrase": "np"}, {"score": 0.023219058464505372, "phrase": "register_allocation"}, {"score": 0.004583211466066139, "phrase": "chaitin"}, {"score": 0.0041269626762569095, "phrase": "bouchez"}, {"score": 0.004001593911181055, "phrase": "hack"}, {"score": 0.0038561471948364723, "phrase": "interference_graph"}, {"score": 0.003738973626996355, "phrase": "static_single_assignment"}, {"score": 0.0034935290662899488, "phrase": "linear_time"}, {"score": 0.0033251716926666437, "phrase": "bouchez_et_al"}, {"score": 0.0031845067058084583, "phrase": "polynomial_time"}, {"score": 0.0030497740719977835, "phrase": "ssa_form"}, {"score": 0.002779894844207706, "phrase": "copy_instructions"}, {"score": 0.0023527296826339225, "phrase": "chaitin's_proof_technique"}, {"score": 0.0021311850321045767, "phrase": "graph_coloring_problem"}, {"score": 0.0021049977753042253, "phrase": "circular_arc_graphs"}], "paper_keywords": [""], "paper_abstract": "Chaitin proved that register allocation is equivalent to graph coloring and hence NP-complete. Recently, Bouchez, Brisk, and Hack have proved independently that the interference graph of a program in static single assignment (SSA) form is chordal and therefore colorable in linear time. Can we use the result of Bouchez et al. to do register allocation in polynomial time by first transforming the program to SSA form, then performing register allocation, and finally doing the classical SSA elimination that replaces phi-functions with copy instructions? In this paper we show that the answer is no, unless P = NP: register allocation after classical SSA elimination is NP-complete. Chaitin's proof technique does not work for programs after classical SSA elimination; instead we use a reduction from the graph coloring problem for circular arc graphs.", "paper_title": "Register allocation after classical SSA elimination is NP-complete", "paper_id": "WOS:000237082000006"}