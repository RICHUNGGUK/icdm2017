{"auto_keywords": [{"score": 0.04847167377939251, "phrase": "hardware_scheduler"}, {"score": 0.00481495049065317, "phrase": "task_queues"}, {"score": 0.004749646583168342, "phrase": "fpga-based_embedded_real-time_systems"}, {"score": 0.004497129150551236, "phrase": "real-time_performance"}, {"score": 0.004436116555817464, "phrase": "soft-core_processor_based_computing_systems"}, {"score": 0.00422899036681456, "phrase": "system_performance"}, {"score": 0.0040869663676860535, "phrase": "increased_hardware_resources"}, {"score": 0.003976775340098895, "phrase": "integration_difficulty"}, {"score": 0.0037910145286595386, "phrase": "fpga-based_systems"}, {"score": 0.0034450303951025704, "phrase": "new_task-queue_architecture"}, {"score": 0.003352088714126572, "phrase": "practical_task_controls"}, {"score": 0.003284026247389735, "phrase": "good_resource_scaling"}, {"score": 0.002984173420996039, "phrase": "priority_scheduling"}, {"score": 0.0029436264166293317, "phrase": "earliest_deadline_first"}, {"score": 0.0026384167183586015, "phrase": "system_utilization"}, {"score": 0.0024138345020219333, "phrase": "clock_cycles"}, {"score": 0.002254145085288829, "phrase": "additional_resource_cost"}, {"score": 0.0021634370496463793, "phrase": "typical_softcore_system"}, {"score": 0.0021194582289403925, "phrase": "small_scale"}, {"score": 0.0021049977753042253, "phrase": "embedded_application"}], "paper_keywords": ["FPGA", " task scheduling", " priority queue", " real-time systems"], "paper_abstract": "A hardware scheduler is developed to improve real-time performance of soft-core processor based computing systems. A hardware scheduler typically accelerates system performance at the cost of increased hardware resources, inflexibility and integration difficulty. However, the reprogrammability of FPGA-based systems removes the problems of inflexibility and integration difficulty. This paper introduces a new task-queue architecture to better support practical task controls and maintain good resource scaling. The scheduler can be configured to support various algorithms such as time sliced priority scheduling, Earliest Deadline First and Least Slack Time. The hardware scheduler reduces scheduling overhead by more than 1,000 clock cycles and raises the system utilization bound by a maximum 19.2 percent. Scheduling jitter is reduced from hundreds of clock cycles in software to just two or three cycles for most operations. The additional resource cost is no more than 17 percent of a typical softcore system for a small scale embedded application.", "paper_title": "A Hardware Scheduler Based on Task Queues for FPGA-Based Embedded Real-Time Systems", "paper_id": "WOS:000352491300004"}