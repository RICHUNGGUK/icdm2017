{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "string_complexity"}, {"score": 0.003773449694108617, "phrase": "string_complexity_measure_t-complexity"}, {"score": 0.003578600071301459, "phrase": "approximately_one_third"}, {"score": 0.0032527939106509946, "phrase": "running_time"}, {"score": 0.0030847461428168614, "phrase": "flott_implementation"}, {"score": 0.002833689453299307, "phrase": "art_suffix_tree_construction_algorithms"}, {"score": 0.0024947959375982614, "phrase": "lempel-ziv_production_complexity"}, {"score": 0.0021049977753042253, "phrase": "open_source_software"}], "paper_keywords": ["Coding theory", " information theory", " information filtering", " text analysis", " algorithms for data and knowledge management", " computation of transforms"], "paper_abstract": "This paper presents flott, a fast, low memory T-transform algorithm which can be used to compute the string complexity measure T-complexity. The algorithm uses approximately one third of the memory of its predecessor while reducing the running time by about 20 percent. The flott implementation has the same worst-case memory requirements as state of the art suffix tree construction algorithms. A suffix tree can be used to efficiently compute the Lempel-Ziv production complexity, which is another measure of string complexity. The C-implementation of flott is available as Open Source software.", "paper_title": "FLOTT-A Fast, Low Memory T-Transform Algorithm for Measuring String Complexity", "paper_id": "WOS:000333472500010"}