{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cyclic_dependencies"}, {"score": 0.008254460807156423, "phrase": "software_entities"}, {"score": 0.0047370749839861165, "phrase": "layered_software_architecture"}, {"score": 0.003916098498242888, "phrase": "optimal_layered_organization"}, {"score": 0.003399466007862412, "phrase": "automated_detection"}, {"score": 0.0030157628075954588, "phrase": "multiple_layers"}, {"score": 0.002646267286675984, "phrase": "human_inputs"}, {"score": 0.0024253827365474734, "phrase": "existing_solutions"}, {"score": 0.00230932021677234, "phrase": "package_layers"}, {"score": 0.002210814150677161, "phrase": "software_engineers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Remodularization", " Layered organization", " Cycle", " Package dependency"], "paper_abstract": "A layered software architecture helps in understanding the role of software entities (e.g. packages or classes) in a system and, hence, the impact of changes on these entities. However, the computation of an optimal layered organization in the presence of cyclic dependencies is difficult. In this paper, we present an approach that (i) provides a strategy supporting the automated detection of cyclic dependencies, (ii) proposes heuristics to break cyclic dependencies, and (iii) computes an organization of software entities in multiple layers even in the presence of cyclic dependencies. Our approach performs better than the other existing approaches in terms of accuracy and interactivity, and it supports human inputs and constraints. In this paper, we present this approach and compare it to existing solutions. We applied our approach on two large software systems to identify package layers and the results are manually validated by software engineers of the two systems. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "OZONE: Layer identification in the presence of cyclic dependencies", "paper_id": "WOS:000320742200006"}