{"auto_keywords": [{"score": 0.033441111085311365, "phrase": "modified_algorithm"}, {"score": 0.00481495049065317, "phrase": "optimal_mismatch_variant"}, {"score": 0.004756805752518494, "phrase": "horspool's_algorithm"}, {"score": 0.004670896353428476, "phrase": "string_matching_problem"}, {"score": 0.004614483128885678, "phrase": "i.e._the_task"}, {"score": 0.004186926251483987, "phrase": "fundamental_problem"}, {"score": 0.004136333933790974, "phrase": "computer_science"}, {"score": 0.003939980614608309, "phrase": "great_deal"}, {"score": 0.003822003373331997, "phrase": "numerous_applications"}, {"score": 0.003775803846431323, "phrase": "computational_biology"}, {"score": 0.0035965032173588753, "phrase": "modified_version"}, {"score": 0.0035530197642369464, "phrase": "horspool's_string"}, {"score": 0.003384262486955773, "phrase": "different_symbols"}, {"score": 0.003107935254560724, "phrase": "linear_average_running_time"}, {"score": 0.003051713660488494, "phrase": "precise_asymptotical_representation"}, {"score": 0.0029965060407413898, "phrase": "running_time"}, {"score": 0.0028367868542874763, "phrase": "average_running_time"}, {"score": 0.002751751956416832, "phrase": "well-known_results"}, {"score": 0.0027019561451518768, "phrase": "original_method"}, {"score": 0.002636956926079255, "phrase": "substantial_speed"}, {"score": 0.0025423706961391034, "phrase": "symbol_distributions"}, {"score": 0.0022508572821818124, "phrase": "high_precision"}, {"score": 0.0022101055924375725, "phrase": "random_sample"}, {"score": 0.00218334762335187, "phrase": "sublinear_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["average-case analysis", " string-matching algorithms"], "paper_abstract": "The string matching problem, i.e. the task of finding all occurrences of one string as a substring of another one, is a fundamental problem in computer science. Recently, this problem received a great deal of attention due to numerous applications in computational biology. In this paper we address a modified version of Horspool's string matching algorithm using the probabilities of the different symbols to speed up the search. We show that the modified algorithm has a linear average running time; a precise asymptotical representation of the running time will be proven. A comparison of the average running time of the modified algorithm with well-known results for the original method shows that a substantial speed up for most of the symbol distributions has been achieved. Finally, we show that the distribution of the symbols can be approximated to a high precision using a random sample of sublinear size. (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Fast string matching by using probabilities: On an optimal mismatch variant of Horspool's algorithm", "paper_id": "WOS:000239885600023"}