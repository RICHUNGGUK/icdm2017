{"auto_keywords": [{"score": 0.044879577737616465, "phrase": "xen"}, {"score": 0.00481495049065317, "phrase": "para-virtualized_virtual_machines"}, {"score": 0.004603115982404017, "phrase": "virtual_machine"}, {"score": 0.0044005599565517875, "phrase": "hardware_environment"}, {"score": 0.004241451614311598, "phrase": "near-native_performances"}, {"score": 0.004189698902282913, "phrase": "critical_part"}, {"score": 0.004038183610525504, "phrase": "physical_cpu_time"}, {"score": 0.0040052617265655035, "phrase": "virtual_machines"}, {"score": 0.003972607172518598, "phrase": "xen's_credit_scheduler"}, {"score": 0.0039402177950179345, "phrase": "blocked-to-boosted_mechanism"}, {"score": 0.003751331782523201, "phrase": "scheduling_priority"}, {"score": 0.0037055370870874484, "phrase": "blocked_vcpu"}, {"score": 0.0034990853199511982, "phrase": "current_vcpu"}, {"score": 0.003386301445203071, "phrase": "virtual_cpus"}, {"score": 0.003304097742490624, "phrase": "cpu-intensive_tasks"}, {"score": 0.002994701080666466, "phrase": "request_events"}, {"score": 0.002839352319679885, "phrase": "poor_application_performance"}, {"score": 0.0027477745788313163, "phrase": "novel_approach"}, {"score": 0.0027030963394733916, "phrase": "credit_scheduler"}, {"score": 0.0025211567863488962, "phrase": "vcpu"}, {"score": 0.002380534385718454, "phrase": "frequent_event_senders"}, {"score": 0.002266246304762945, "phrase": "experimental_evaluation"}, {"score": 0.002157433262687853, "phrase": "mixed_workloads"}, {"score": 0.0021049977753042253, "phrase": "possibly_caused_scheduling_unfairness"}], "paper_keywords": ["Virtual machine", " Xen", " Para-virtualization", " Credit scheduler"], "paper_abstract": "Para-virtualization features little performance degradation by presenting each virtual machine with an abstraction of hardware instead of fully emulating the hardware environment. A guest running atop Xen can achieve near-native performances. A critical part of Xen is its CPU scheduler which slices and dispatches physical CPU time to virtual machines. Xen's credit scheduler utilizes blocked-to-boosted mechanism to improve latency and throughput of I/O tasks. It boosts the scheduling priority of a blocked VCPU that receives an event. The boosted VCPU then pre-empts the current VCPU and gets executed straightaway. However, virtual CPUs that receive events while processing CPU-intensive tasks seldom block. Thus, the mechanism does not favor these VCPUs which process mixed workloads. Moreover, VCPUs that constantly send request events are not properly prioritized either. The two problems above can result in poor application performance to guest domains. We propose a novel approach to improve the credit scheduler, making it appropriately prioritize such domains. Our solution includes two aspects: 1) to schedule the VCPU that receives I/O events as soon as possible; 2) to switch in frequent event senders to let them initiate more I/O requests from time to time. The experimental evaluation demonstrates that our approach not only improves the responsiveness of domains doing mixed workloads, but also minimizes the possibly caused scheduling unfairness. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Scheduling para-virtualized virtual machines based on events", "paper_id": "WOS:000317889500004"}