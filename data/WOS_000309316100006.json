{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multipart_packets"}, {"score": 0.004729977262447766, "phrase": "abstract_setting"}, {"score": 0.004663074596384574, "phrase": "basic_information_units"}, {"score": 0.004467965784278827, "phrase": "single_packet"}, {"score": 0.004357927940322685, "phrase": "multiple_packets"}, {"score": 0.004000741805312148, "phrase": "communication_link_ingresses"}, {"score": 0.003958194802333944, "phrase": "large_arrival_bursts"}, {"score": 0.003916098498242888, "phrase": "dropped_packets"}, {"score": 0.0038744481564444173, "phrase": "algorithmic_question"}, {"score": 0.0035949949979695063, "phrase": "k_packets"}, {"score": 0.0032533888943254144, "phrase": "simple_online_distributed_randomized_algorithm"}, {"score": 0.0030294801733438, "phrase": "opt"}, {"score": 0.0029971349193857093, "phrase": "best_possible_goodput"}, {"score": 0.0028715299874549245, "phrase": "largest_burst"}, {"score": 0.0027610089418453614, "phrase": "burst-size_variability"}, {"score": 0.0026077803487003, "phrase": "fixed_burst_size"}, {"score": 0.0024108455980729284, "phrase": "high_probability"}, {"score": 0.0022608057001451414, "phrase": "simulation_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Competitive analysis", " Forward error correction", " Packet drop", " Packet fragmentation and reassembly", " Randomized algorithms"], "paper_abstract": "We study an abstract setting, where the basic information units (called \"superpackets\") do not fit into a single packet, and are therefore spread over multiple packets. We assume that a superpacket is useful only if the number of its delivered packets is above a certain threshold. Our focus of attention is communication link ingresses, where large arrival bursts result in dropped packets. The algorithmic question we address is which packets to drop so as to maximize goodput. Specifically, suppose that each superpacket consists of k packets, and that a superpacket can be reconstructed if at most beta . k of its packets are lost, for some given parameter 0 <= beta < 1. We present a simple online distributed randomized algorithm in this model, and prove that in any scenario, its expected goodput is Omega(OPT/(k root(1 - beta)sigma)), where OPT denotes the best possible goodput by any algorithm, and sigma denotes the size of the largest burst (the bound can be improved as a function of burst-size variability). We also analyze the effect of buffers on goodput under the assumption of fixed burst size, and show that in this case, when the buffer is not too small, our algorithm can attain, with high probability, (1 - epsilon) goodput utilization for any epsilon > 0. Finally, we present some simulation results that demonstrate that the behavior of our algorithm in practice is far better than our worst-case analytical bounds. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Overflow management with multipart packets", "paper_id": "WOS:000309316100006"}