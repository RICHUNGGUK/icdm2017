{"auto_keywords": [{"score": 0.03903924676594565, "phrase": "edit_distance"}, {"score": 0.004674333455266527, "phrase": "smoothed_complexity"}, {"score": 0.004639822587124109, "phrase": "sequence_alignment"}, {"score": 0.004554650954322244, "phrase": "semi-random_model"}, {"score": 0.004260719592945006, "phrase": "length_d"}, {"score": 0.003985680946956402, "phrase": "probability_p"}, {"score": 0.0038691879515317267, "phrase": "exactly_the_same_way"}, {"score": 0.0036870776660851007, "phrase": "smoothed_instances"}, {"score": 0.0036327808996444904, "phrase": "constant_factor_approximation"}, {"score": 0.003592581806180854, "phrase": "first_algorithm"}, {"score": 0.0035528259557800683, "phrase": "near-linear_time"}, {"score": 0.003448940584469061, "phrase": "fixed_epsilon"}, {"score": 0.003385555209074879, "phrase": "second_one"}, {"score": 0.0030176779201170306, "phrase": "worst-case_inputs"}, {"score": 0.00267969955652659, "phrase": "prevailing_technique"}, {"score": 0.00265987582861194, "phrase": "commonly_used_heuristics"}, {"score": 0.0025916375737852506, "phrase": "et_al"}, {"score": 0.0024786956187352327, "phrase": "smoothed_edit_distance"}, {"score": 0.0024512358145634336, "phrase": "simpler_variant"}, {"score": 0.0023098693749091163, "phrase": "ulam"}, {"score": 0.002176560171729638, "phrase": "ulam_metric"}, {"score": 0.0021049977753042253, "phrase": "general_edit_distance"}], "paper_keywords": ["Edit distance", " smooth complexity", " linear time", " sublinear time"], "paper_abstract": "We initiate the study of the smoothed complexity of sequence alignment, by proposing a semi-random model of edit distance between two input strings, generated as follows: First, an adversary chooses two binary strings of length d and a longest common subsequence A of them. Then, every character is perturbed independently with probability p, except that A is perturbed in exactly the same way inside the two strings. We design two efficient algorithms that compute the edit distance on smoothed instances up to a constant factor approximation. The first algorithm runs in near-linear time, namely d({1+epsilon}) for any fixed epsilon > 0. The second one runs in time sublinear in d, assuming the edit distance is not too small. These approximation and runtime guarantees are significantly better than the bounds that were known for worst-case inputs. Our technical contribution is twofold. First, we rely on finding matches between substrings in the two strings, where two substrings are considered a match if their edit distance is relatively small, a prevailing technique in commonly used heuristics, such as PatternHunter of Ma et al. [2002]. Second, we effectively reduce the smoothed edit distance to a simpler variant of (worst-case) edit distance, namely, edit distance on permutations (a.k.a. Ulam's metric). We are thus able to build on algorithms developed for the Ulam metric, whose much better algorithmic guarantees usually do not carry over to general edit distance.", "paper_title": "The Smoothed Complexity of Edit Distance", "paper_id": "WOS:000309426300012"}