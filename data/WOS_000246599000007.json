{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "video_processing_acceleration"}, {"score": 0.03764439525398964, "phrase": "video_processing_algorithms"}, {"score": 0.00476323161560059, "phrase": "application-specific_instruction-set_processors"}, {"score": 0.004611369021812453, "phrase": "good_alternative"}, {"score": 0.004464326432401002, "phrase": "productivity_gap"}, {"score": 0.004007083686875716, "phrase": "pure_hardware_architectures"}, {"score": 0.00394264312173188, "phrase": "pure_software_solutions"}, {"score": 0.00385832528624328, "phrase": "video_processing_performance_constraints"}, {"score": 0.003775803846431323, "phrase": "asip_design"}, {"score": 0.003695040819303525, "phrase": "good_tradeoff"}, {"score": 0.0034817084307034955, "phrase": "intrinsic_parallelism"}, {"score": 0.003370565320453525, "phrase": "asip_specialized_instructions"}, {"score": 0.003210446135114967, "phrase": "new_approach"}, {"score": 0.003124790943886441, "phrase": "tightly_coupled_specialized_instructions"}, {"score": 0.003091174805025578, "phrase": "asip"}, {"score": 0.0030250067691601967, "phrase": "video_processing"}, {"score": 0.002928399649340438, "phrase": "costly_data_communications"}, {"score": 0.0028348690177346448, "phrase": "data_reuse"}, {"score": 0.0027443174539994925, "phrase": "algorithm's_critical_loops"}, {"score": 0.0026423134393535243, "phrase": "new_intermediate_representation"}, {"score": 0.0025440911575156755, "phrase": "loop_parallelism_possibilities"}, {"score": 0.002345707314211983, "phrase": "ela_deinterlacer"}, {"score": 0.002198173002125907, "phrase": "considered_applications"}, {"score": 0.0021510820434023207, "phrase": "hardware_overhead"}, {"score": 0.0021049977753042253, "phrase": "additional_logic_gates"}], "paper_keywords": ["application-specific instruction-set processor", " design exploration", " optimization", " parallelism", " data grouping and reuse"], "paper_abstract": "Application-specific instruction-set processors (ASIPs) provide a good alternative for video processing acceleration, but the productivity gap implied by such a new technology may prevent leveraging it fully. Video processing SoCs need flexibility that is not available in pure hardware architectures, while pure software solutions do not meet video processing performance constraints. Thus, ASIP design could offer a good tradeoff between performance and flexibility. Video processing algorithms are often characterized by intrinsic parallelism that can be accelerated by ASIP specialized instructions. In this paper, we propose a new approach for exploiting sequences of tightly coupled specialized instructions in ASIP design applicable to video processing. Our approach, which avoids costly data communications by applying data grouping and data reuse, consists of accelerating an algorithm's critical loops by transforming them according to a new intermediate representation. This representation is optimized and loop parallelism possibilities are also explored. This approach has been applied to video processing algorithms such as the ELA deinterlacer and the 2D-DCT. Experimental results show speedups up to 18 (on the considered applications, while the hardware overhead in terms of additional logic gates was found to be between 18 and 59%.", "paper_title": "A novel application-specific instruction-set processor design approach for video processing acceleration", "paper_id": "WOS:000246599000007"}