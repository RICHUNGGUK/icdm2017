{"auto_keywords": [{"score": 0.045972615885752355, "phrase": "multiple_simd_architecture"}, {"score": 0.01558969107818844, "phrase": "shared_memory"}, {"score": 0.00899593147323415, "phrase": "shared_memory_multiple_simd_architecture"}, {"score": 0.008299320486243655, "phrase": "limited_register_number"}, {"score": 0.007656235676613177, "phrase": "real_multimedia_applications"}, {"score": 0.00481495049065317, "phrase": "shared-memory_multiple_simd_architecture"}, {"score": 0.0044786435725543685, "phrase": "processing_ability"}, {"score": 0.004440648141548589, "phrase": "modern_processors"}, {"score": 0.004310173770196077, "phrase": "multimedia_processing_field"}, {"score": 0.004255431326383001, "phrase": "multimedia_accelerator"}, {"score": 0.004148014765950199, "phrase": "power_consumption"}, {"score": 0.004112812699639956, "phrase": "chip_size"}, {"score": 0.003991932110277654, "phrase": "embedded_socs"}, {"score": 0.00387459052649752, "phrase": "mobile_environment"}, {"score": 0.003527712410706358, "phrase": "major_obstacles"}, {"score": 0.003239304090565123, "phrase": "optimizing_techniques"}, {"score": 0.0030776686414001964, "phrase": "compiler_framework"}, {"score": 0.0029871209444889716, "phrase": "high_performance_codes"}, {"score": 0.0028139168128067343, "phrase": "shared_data_bus"}, {"score": 0.0027662954811372154, "phrase": "register_locality"}, {"score": 0.002696366237523415, "phrase": "data_bus"}, {"score": 0.0026394405584281443, "phrase": "data_vector_replication"}, {"score": 0.002539978170928796, "phrase": "resource_allocation_algorithm"}, {"score": 0.002433843373780471, "phrase": "data_transformation"}, {"score": 0.0023926387830753033, "phrase": "experimental_results"}, {"score": 0.002215663255682209, "phrase": "average_speedup"}, {"score": 0.0021412594173592513, "phrase": "average_utilization"}, {"score": 0.002123051344001408, "phrase": "sm-simd_architecture"}], "paper_keywords": ["algorithms", " performance.", " optimization", " shared memory", " multiple SIMD", " locality", " replication"], "paper_abstract": "With the rapid growth of multimedia and game, these applications put more and more pressure on the processing ability of modern processors. Multiple SIMD architecture is widely used in multimedia processing field as a multimedia accelerator. With the consideration of power consumption and chip size, shared memory multiple SIMD architecture is mainly used in embedded SOCs. In order to further fit mobile environment, there is the constraint of limited register number as well. Although shared memory multiple SIMD architecture simplify the chip design, these constraints are the major obstacles to map the real multimedia applications to these architectures. Until now, to our best knowledge, there is little research on the optimizing techniques for shared memory multiple SIMD architecture. In this paper, we present a compiler framework, which aims at automatically generating high performance codes for shared memory multiple SIMD architecture. In this framework, we reduce the competition of shared data bus through increasing the register locality, improve the utilization of data bus by read-only data vector replication and solve the problem of limited register number through a resource allocation algorithm. The framework also handlers the issues concerning on data transformation. As the experimental results shown, this framework is successful in mapping real multimedia applications to shared memory multiple SIMD architecture. It leads to an average speedup by a factor of 3.19 and an average utilization of SM-SIMD architecture with 8 SIMD units by a factor of 52.6%.", "paper_title": "Optimizing compiler for shared-memory multiple SIMD architecture", "paper_id": "WOS:000202972200023"}