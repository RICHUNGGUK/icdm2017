{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "flash"}, {"score": 0.004532988904965752, "phrase": "publicly_available_high_performance_application_code"}, {"score": 0.004307286039184164, "phrase": "unconnected_legacy_codes"}, {"score": 0.004017437417375057, "phrase": "scientific_applications"}, {"score": 0.003712362078915926, "phrase": "inter-operable_modules"}, {"score": 0.003593555152077465, "phrase": "different_applications"}, {"score": 0.003543804852018315, "phrase": "flash_architecture"}, {"score": 0.0035110198699787013, "phrase": "arbitrarily_many_alternative_implementations"}, {"score": 0.0032593915869553714, "phrase": "greater_flexibility"}, {"score": 0.0031845067058084583, "phrase": "simple_and_elegant_mechanism"}, {"score": 0.003111336942540226, "phrase": "code_functionality"}, {"score": 0.003011706511096639, "phrase": "core_implementation"}, {"score": 0.0029288446848334576, "phrase": "built-in_unit_test_framework"}, {"score": 0.0028350413546400703, "phrase": "rigorous_software_maintenance_process"}, {"score": 0.0027062100658653485, "phrase": "dual_mode"}, {"score": 0.002431626477893495, "phrase": "solver_complexity"}, {"score": 0.0024091057723923857, "phrase": "portable_performance_requirements"}, {"score": 0.002375714262344562, "phrase": "legacy_codes"}, {"score": 0.0022995854132747233, "phrase": "user_surveys"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software architecture", " Portability", " Extensibility", " Massively parallel", " FLASH"], "paper_abstract": "FLASH is a publicly available high performance application code which has evolved into a modular, extensible software system from a collection of unconnected legacy codes. FLASH has been successful because its capabilities have been driven by the needs of scientific applications, without compromising maintainability, performance, and usability. In its newest incarnation, FLASH3 consists of inter-operable modules that can be combined to generate different applications. The FLASH architecture allows arbitrarily many alternative implementations of its components to co-exist and interchange with each other, resulting in greater flexibility. Further, a simple and elegant mechanism exists for customization of code functionality without the need to modify the core implementation of the source. A built-in unit test framework providing verifiability, combined with a rigorous software maintenance process, allow the code to operate simultaneously in the dual mode of production and development. In this paper we describe the FLASH3 architecture, with emphasis on solutions to the more challenging conflicts arising from solver complexity, portable performance requirements, and legacy codes. We also include results from user surveys conducted in 2005 and 2007, which highlight the success of the code. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Extensible component-based architecture for FLASH, a massively parallel, multiphysics simulation code", "paper_id": "WOS:000272283000002"}