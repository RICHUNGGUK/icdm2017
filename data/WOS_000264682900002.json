{"auto_keywords": [{"score": 0.04683590293207772, "phrase": "branch_outcome"}, {"score": 0.04149638088047677, "phrase": "piecewise_linear_branch_prediction"}, {"score": 0.0394922664518594, "phrase": "linear_functions"}, {"score": 0.00481495049065317, "phrase": "improved_branch_prediction_accuracy"}, {"score": 0.004703878334423852, "phrase": "instruction_throughput"}, {"score": 0.00466016686289196, "phrase": "today's_deep_pipelines"}, {"score": 0.004616859702338596, "phrase": "traditional_branch_predictors"}, {"score": 0.00453144352814823, "phrase": "pattern_history"}, {"score": 0.004304574865291508, "phrase": "stronger_and_more_natural_correlation"}, {"score": 0.003672427620845944, "phrase": "program_path"}, {"score": 0.0034559594248079807, "phrase": "predicted_not_taken_branches"}, {"score": 0.0032827577713351336, "phrase": "piecewise_linear_decision_surface"}, {"score": 0.003206916619690171, "phrase": "limit_study"}, {"score": 0.0030747771905143273, "phrase": "predictor_accuracy"}, {"score": 0.002989714021608139, "phrase": "practical_implementable_branch_predictor"}, {"score": 0.0028002471976921054, "phrase": "parameterized_version"}, {"score": 0.002735522834514124, "phrase": "previously_distinct_concepts"}, {"score": 0.0027100527874262446, "phrase": "perceptron_prediction"}, {"score": 0.002684819249720834, "phrase": "path-based_neural_prediction"}, {"score": 0.0025862068041567934, "phrase": "current_prominent_predictors"}, {"score": 0.002456486927713543, "phrase": "deeply_pipelined_simulated_microarchitecture"}, {"score": 0.0021750990136123367, "phrase": "average_misprediction_rate"}, {"score": 0.0021049977753042253, "phrase": "path-based_neural_predictor"}], "paper_keywords": ["Performance", " Branch prediction", " machine learning"], "paper_abstract": "Improved branch prediction accuracy is essential to sustaining instruction throughput with today's deep pipelines. Traditional branch predictors exploit correlations between pattern history and branch outcome to predict branches, but there is a stronger and more natural correlation between path history and branch outcome. We explore the potential for exploiting this correlation. We introduce piecewise linear branch prediction, an idealized branch predictor that develops a set of linear functions, one for each program path to the branch to be predicted, that separate predicted taken from predicted not taken branches. Taken together, all of these linear functions form a piecewise linear decision surface. We present a limit study of this predictor showing its potential to greatly improve predictor accuracy. We then introduce a practical implementable branch predictor based on piecewise linear branch prediction. In making our predictor practical, we show how a parameterized version of it unifies the previously distinct concepts of perceptron prediction and path-based neural prediction. Our new branch predictor has implementation costs comparable to current prominent predictors in the literature while significantly improving accuracy. For a deeply pipelined simulated microarchitecture our predictor with a 256-KB hardware budget improves the harmonic mean normalized instructions-per-cycle rate by 8% over both the original path-based neural predictor and 2Bc-gskew. The average misprediction rate is decreased by 16% over the path-based neural predictor and by 22% over 2Bc-gskew.", "paper_title": "Generalizing Neural Branch Prediction", "paper_id": "WOS:000264682900002"}