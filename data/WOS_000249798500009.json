{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "canonical_words"}, {"score": 0.004602773636967002, "phrase": "software_modules"}, {"score": 0.004081385289516914, "phrase": "trace-assertion_specifications"}, {"score": 0.0038624981944755813, "phrase": "underlying_mathematical_model"}, {"score": 0.003785836059995376, "phrase": "present_paper"}, {"score": 0.003637208212987409, "phrase": "moore"}, {"score": 0.0036007478932719417, "phrase": "mealy_outputs"}, {"score": 0.003459191419478298, "phrase": "extended_theory"}, {"score": 0.003240895431893263, "phrase": "unified_view"}, {"score": 0.0031925019616678217, "phrase": "trace-assertion_methodology"}, {"score": 0.0027881294891497115, "phrase": "infinite_modules"}, {"score": 0.0027327327233891865, "phrase": "error_handling"}, {"score": 0.0026919067120537055, "phrase": "awkward_features"}, {"score": 0.0026516890043911836, "phrase": "trace-assertion_method"}, {"score": 0.0024842242921857705, "phrase": "trace_assertions"}, {"score": 0.0021049977753042253, "phrase": "informal_state_machines"}], "paper_keywords": ["automaton", " canonical", " equivalence", " module", " rewriting", " specification", " trace"], "paper_abstract": "A theory of representation of semiautomata by canonical words and equivalences was developed in [7]. That work was motivated by trace-assertion specifications of software modules, but its focus was entirely on the underlying mathematical model. In the present paper we extend that theory to automata with Moore and Mealy outputs, and show how to apply the extended theory to the specification of modules. In particular, we present a unified view of the trace-assertion methodology, as guided by our theory. We illustrate this approach, and some specific issues, using several nontrivial examples. We include a discussion of finite versus infinite modules, methods of error handling, some awkward features of the trace-assertion method, and a comparison to specifications by automata. While specifications by trace assertions and automata are equivalent in power, there are cases where one approach appears to be more natural than the other. We conclude that, for certain types of system modules, formal specification by automata, as opposed to informal state machines, is not only possible, but practical.", "paper_title": "Representation of semiautomata by canonical words and equivalences, part II: Specification of software modules", "paper_id": "WOS:000249798500009"}