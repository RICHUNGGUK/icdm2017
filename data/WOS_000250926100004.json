{"auto_keywords": [{"score": 0.03280182630528363, "phrase": "running_time"}, {"score": 0.00836182267102504, "phrase": "crossing_module"}, {"score": 0.00481495049065317, "phrase": "arrangement_algorithm"}, {"score": 0.004776669953449352, "phrase": "plane_curves"}, {"score": 0.004517055580214742, "phrase": "approximate_crossing_point"}, {"score": 0.004375061788023814, "phrase": "general_position_requirements"}, {"score": 0.004271490815763164, "phrase": "crossing_module_output"}, {"score": 0.004007083686875716, "phrase": "cyclic_y_order"}, {"score": 0.003959353513286997, "phrase": "x_interval"}, {"score": 0.0038348235692738783, "phrase": "vertical_line"}, {"score": 0.003714195746979591, "phrase": "sweep_events"}, {"score": 0.0034702685641070283, "phrase": "linear_order"}, {"score": 0.0033745298175222056, "phrase": "realistic_computational_model"}, {"score": 0.0030292784088033838, "phrase": "n_curves"}, {"score": 0.003005151718290603, "phrase": "n_crossings"}, {"score": 0.002981216610222911, "phrase": "k_inconsistencies"}, {"score": 0.002945669860541221, "phrase": "output_arrangement"}, {"score": 0.0027964537059186893, "phrase": "input_curves"}, {"score": 0.002752075650871066, "phrase": "kn_epsilon_neighborhoods"}, {"score": 0.0027192536281209463, "phrase": "curve_tails"}, {"score": 0.0026126405272417783, "phrase": "tiny_horizontal_extensions"}, {"score": 0.002581477142020187, "phrase": "segment_tails"}, {"score": 0.002382987346529592, "phrase": "numerical_equation_solver"}, {"score": 0.0022352169832099153, "phrase": "output_accuracy"}], "paper_keywords": ["arrangements", " robust computational geometry"], "paper_abstract": "We present an arrangement algorithm for plane curves. The inputs are (1) continuous, compact, x-monotone curves and (2) a module that computes approximate crossing point of these curves, There are no general position requirements. We assume that the crossing module output is epsilon accurate, but allow it to be inconsistent, meaning that three curves anr in cyclic y order over an x interval. The curves are swept with a vertical line using the crossing module to compute and process sweep events. When the sweep detects an inconsistency, the algorithm breaks the cycle to obtain a linear order. We prove correctness in a realistic computational model of the crossing module. The number of vertice in the output is V = 2n+N+min (3kn, n(2)/2) and the running time is O(V log n) for n curves with N crossings and k inconsistencies. The output arrangement is realizable by curves that are O(epsilon+kn epsilon) close to the input curves, except in kn epsilon neighborhoods of the curve tails. The accuracy can be guaranteed everywhere by adding tiny horizontal extensions to the segment tails, but without the running time bound. An implementation is described for semi-algebraic curves based on a numerical equation solver. Experiments show that the extensions only slightly increase the running time and have little effect the output accuracy is close to epsilon, and the running time is close to that of the standard, non-robust floating point sweep.", "paper_title": "An approximate arrangement algorithm for semi-algebraic curves", "paper_id": "WOS:000250926100004"}