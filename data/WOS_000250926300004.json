{"auto_keywords": [{"score": 0.04860000689752459, "phrase": "closed_forms"}, {"score": 0.043525850970386325, "phrase": "kleene_iteration"}, {"score": 0.00481495049065317, "phrase": "new_method"}, {"score": 0.004569630374630379, "phrase": "recursive_boolean_function_definitions"}, {"score": 0.004072851768196397, "phrase": "iterative_approximation"}, {"score": 0.003946960862020283, "phrase": "fixed_point"}, {"score": 0.0035920758080335655, "phrase": "k-ary_function"}, {"score": 0.003303412571939192, "phrase": "mutual_recursion"}, {"score": 0.003102195256794215, "phrase": "exponential_number"}, {"score": 0.0026233771102489394, "phrase": "novel_variant"}, {"score": 0.0024894376091589244, "phrase": "repeated_computation"}], "paper_keywords": ["boolean functions", " fixed points", " decision diagrams", " kleene iteration"], "paper_abstract": "We present a new method for finding closed forms of recursive Boolean function definitions. Traditionally, these closed forms are found by Kleene iteration: iterative approximation until a fixed point is reached. Conceptually, our new method replaces each k-ary function by 2(k) Boolean constants defined by mutual recursion. The introduction of an exponential number of constants is mitigated by the simplicity of their definitions and by the use of a novel variant of ROBDDs to avoid repeated computation. Experiments suggest that this approach is significantly faster than Kleene iteration for examples that require many Kleene iteration steps.", "paper_title": "Un-kleene boolean equation solving", "paper_id": "WOS:000250926300004"}