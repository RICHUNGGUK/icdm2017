{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "generic_extensions"}, {"score": 0.00461575768501871, "phrase": "generic_libraries"}, {"score": 0.004342430078306461, "phrase": "language-neutral_library_interfaces"}, {"score": 0.00422177384286051, "phrase": "full_range"}, {"score": 0.004182301599359094, "phrase": "programming_idioms"}, {"score": 0.003861288537079326, "phrase": "language_bindings"}, {"score": 0.003807242767474929, "phrase": "neutral_interface"}, {"score": 0.0037363522297378777, "phrase": "better_expressibility"}, {"score": 0.0034984340449789745, "phrase": "import_bindings"}, {"score": 0.0034332736827447654, "phrase": "desired_programming_idioms"}, {"score": 0.0031695693589575916, "phrase": "performance_overhead"}, {"score": 0.002995677265350124, "phrase": "original_library_designers"}, {"score": 0.0028580564897994175, "phrase": "software_component"}, {"score": 0.0027395968397212053, "phrase": "component_extension"}, {"score": 0.002613709503583786, "phrase": "mature_language"}, {"score": 0.0024014759148123736, "phrase": "complex_library"}, {"score": 0.002291089893848235, "phrase": "library_extension_problem"}, {"score": 0.002248366278757655, "phrase": "component_organization"}, {"score": 0.0022064376000055764, "phrase": "software_composibility"}, {"score": 0.0021857667493036786, "phrase": "hierarchy_maintenance"}, {"score": 0.0021652891317252994, "phrase": "architecture_independence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Generics", " C plus plus templates", " Software component architecture", " Middleware", " Curiously reoccurring template pattern (CRTP)", " Type members"], "paper_abstract": "We examine what is necessary to allow generic libraries to be used naturally in a multi-language, potentially distributed environment. Language-neutral library interfaces usually do not support the full range of programming idioms that are available when a library is used natively. We investigate how to structure the language bindings of the neutral interface to achieve a better expressibility and code re-use. We furthermore address how language-neutral interfaces can be extended with import bindings to recover the desired programming idioms. We also address the question of how these extensions can be organized to minimize the performance overhead that arises from using objects in manners not anticipated by the original library designers. Our approach is to treat a library as a software component and to view the problem as one of component extension. We use C++ as an example of a mature language, with libraries using a variety of patterns, and use the Standard Template Library as an example of a complex library for which efficiency is important. By viewing the library extension problem as one of component organization, we enhance software composibility, hierarchy maintenance and architecture independence. (c) 2009 Elsevier B.V. All rights reserved.", "paper_title": "An architecture for generic extensions", "paper_id": "WOS:000287834500004"}