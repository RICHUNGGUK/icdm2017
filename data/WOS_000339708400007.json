{"auto_keywords": [{"score": 0.046355766549286886, "phrase": "constant_time"}, {"score": 0.00481495049065317, "phrase": "new_succinct_representations"}, {"score": 0.004792779140352901, "phrase": "ordinal_trees"}, {"score": 0.0046834372388970405, "phrase": "n-node_static_tree"}, {"score": 0.004410629943506433, "phrase": "word-ram_model"}, {"score": 0.004360010048390427, "phrase": "data_structures"}, {"score": 0.0042506731642425275, "phrase": "simple_and_flexible_data_structure"}, {"score": 0.004124971788093851, "phrase": "large_number"}, {"score": 0.004105964466912166, "phrase": "relevant_tree_operations"}, {"score": 0.003966162568548304, "phrase": "polylog-sized_trees"}, {"score": 0.003884567795946283, "phrase": "arbitrary_size"}, {"score": 0.0037006243674469657, "phrase": "core_subset"}, {"score": 0.0036077631183727764, "phrase": "previous_proposal"}, {"score": 0.0035745741513450832, "phrase": "dynamic_case"}, {"score": 0.003468796799802612, "phrase": "existing_data_structures"}, {"score": 0.0033739270918502285, "phrase": "min-max_tree"}, {"score": 0.0032439385071701718, "phrase": "static_scenario"}, {"score": 0.003177154457204775, "phrase": "improved_data_structure"}, {"score": 0.0029642838574678526, "phrase": "whole_subtrees"}, {"score": 0.002733843621554627, "phrase": "independent_interest"}, {"score": 0.002714943351733626, "phrase": "immediate_derivation"}, {"score": 0.0026961733945715643, "phrase": "improved_solution"}, {"score": 0.0026651772919894534, "phrase": "consecutive_elements"}, {"score": 0.0025683581446365165, "phrase": "second_one"}, {"score": 0.0025271105810644253, "phrase": "operations_sum"}, {"score": 0.002503837900969975, "phrase": "limited_updates"}, {"score": 0.0024865237976623286, "phrase": "optimal_time"}, {"score": 0.0024522530645471065, "phrase": "third_one"}, {"score": 0.0024352948008307795, "phrase": "dynamic_bitmaps"}, {"score": 0.0023522423291484212, "phrase": "zero-order_entropy_bounds"}, {"score": 0.0021843879253500894, "phrase": "best_existing_bounds"}, {"score": 0.002174303033371869, "phrase": "entropy-bounded_storage"}, {"score": 0.0021492935956059283, "phrase": "compressed_full-text_self-indexes"}, {"score": 0.0021049977753042253, "phrase": "burrows-wheeler_transform"}], "paper_keywords": ["Succinct tree representations", " compressed sequence representations", " compressed text databases"], "paper_abstract": "We propose new succinct representations of ordinal trees and match various space/time lower bounds. It is known that any n-node static tree can be represented in 2n + o(n) bits so that a number of operations on the tree can be supported in constant time under the word-RAM model. However, the data structures are complicated and difficult to dynamize. We propose a simple and flexible data structure, called the range min-max tree, that reduces the large number of relevant tree operations considered in the literature to a few primitives that are carried out in constant time on polylog-sized trees. The result is extended to trees of arbitrary size, retaining constant time and reaching 2n + O(n/polylog(n)) bits of space. This space is optimal for a core subset of the operations supported and significantly lower than in any previous proposal. For the dynamic case, where insertion/deletion (indels) of nodes is allowed, the existing data structures support a very limited set of operations. Our data structure builds on the range min-max tree to achieve 2n + O(nllog n) bits of space and O(log n) time for all operations supported in the static scenario, plus indels. We also propose an improved data structure using 2n + O(n log log n/ log n) bits and improving the time to the optimal O(log n/ log log n) for most operations. We extend our support to forests, where whole subtrees can be attached to or detached from others, in time O(log(1+is an element of) n) for any is an element of> O. Such operations had not been considered before. Our techniques are of independent interest. An immediate derivation yields an improved solution to range minimum/maximum queries where consecutive elements differ by 1, achieving n + O(n/polylog(n)) bits of space. A second one stores an array of numbers supporting operations sum and search and limited updates, in optimal time O(log n/ log log n). A third one allows representing dynamic bitmaps and sequences over alphabets of size sigma, supporting rank/select and indels, within zero-order entropy bounds and time O(log n log sigma-/log log n)(2)) for all operations. This time is the optimal O(log n/ log log n) on bitmaps and polylogsized alphabets. This improves upon the best existing bounds for entropy-bounded storage of dynamic sequences, compressed full-text self-indexes, and compressed-space construction of the Burrows-Wheeler transform.", "paper_title": "Fully Functional Static and Dynamic Succinct Trees", "paper_id": "WOS:000339708400007"}