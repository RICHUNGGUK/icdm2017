{"auto_keywords": [{"score": 0.03386533127184744, "phrase": "lindex"}, {"score": 0.007152368807539886, "phrase": "graph_databases"}, {"score": 0.006282890763831847, "phrase": "subgraph_isomorphism_tests"}, {"score": 0.006145728892795268, "phrase": "graph_indices"}, {"score": 0.004788416208637939, "phrase": "subgraph_querying"}, {"score": 0.004762027452336851, "phrase": "wide_applications"}, {"score": 0.004624287333748294, "phrase": "database_graphs"}, {"score": 0.004619455453039897, "phrase": "query_graph"}, {"score": 0.004556062353747973, "phrase": "subgraph-querying_algorithm"}, {"score": 0.004346933820596678, "phrase": "graph_database"}, {"score": 0.0041821912292076165, "phrase": "np"}, {"score": 0.003978866233891427, "phrase": "subgraph-querying_algorithms"}, {"score": 0.003935096593139715, "phrase": "candidate_answer"}, {"score": 0.0038489909212815485, "phrase": "false_answers"}, {"score": 0.0037961306355345577, "phrase": "candidate_graph"}, {"score": 0.003503497128638099, "phrase": "filtering_rate"}, {"score": 0.003426802993964843, "phrase": "specifically_designed_index_structure"}, {"score": 0.0030592380520393985, "phrase": "key-value_pairs"}, {"score": 0.00273856268065539, "phrase": "subgraph_queries"}, {"score": 0.0026785685146367513, "phrase": "subgraph-querying_efficiency"}, {"score": 0.002506337760405508, "phrase": "subgraph_indexing_features"}, {"score": 0.0024856006642521317, "phrase": "previous_works"}, {"score": 0.00244463852203525, "phrase": "novel_index_structure"}, {"score": 0.002391067964886602, "phrase": "false_graphs"}, {"score": 0.0023581827290168464, "phrase": "fast_index_lookups"}, {"score": 0.0022937597795708964, "phrase": "index_construction"}, {"score": 0.0022004029656808224, "phrase": "substructure_index_features"}, {"score": 0.002158143503928412, "phrase": "fast_and_scalable_subgraph-querying_infrastructure"}], "paper_keywords": [""], "paper_abstract": "Subgraph querying has wide applications in various fields such as cheminformatics and bioinformatics. Given a query graph, q, a subgraph-querying algorithm retrieves all graphs, D(q), which have q as a subgraph, from a graph database, D. Subgraph querying is costly because it uses subgraph isomorphism tests, which are NP-complete. Graph indices are commonly used to improve the performance of subgraph querying in graph databases. Subgraph-querying algorithms first construct a candidate answer set by filtering out a set of false answers and then verify each candidate graph using subgraph isomorphism tests. To build graph indices, various kinds of substructure (subgraph, subtree, or path) features have been proposed with the goal of maximizing the filtering rate. Each of them works with a specifically designed index structure, for example, discriminative and frequent subgraph features work with gIndex, delta-TCFG features work with FG-index, etc. We propose Lindex, a graph index, which indexes subgraphs contained in database graphs. Nodes in Lindex represent key-value pairs where the key is a subgraph in a database and the value is a list of database graphs containing the key. We propose two heuristics that are used in the construction of Lindex that allows us to determine answers to subgraph queries conducting less subgraph isomorphism tests. Consequently, Lindex improves subgraph-querying efficiency. In addition, Lindex is compatible with any choice of features. Empirically, we demonstrate that Lindex used in conjunction with subgraph indexing features proposed in previous works outperforms other specifically designed index structures. As a novel index structure, Lindex (1) is effective in filtering false graphs (2) provides fast index lookups, (3) is fast with respect to index construction and maintenance, and (4) can be constructed using any set of substructure index features. These four properties result in a fast and scalable subgraph-querying infrastructure. We substantiate the benefits of Lindex and its disk-resident variation Lindex+ theoretically and empirically.", "paper_title": "Lindex: a lattice-based index for graph databases", "paper_id": "WOS:000316500800005"}