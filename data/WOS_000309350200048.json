{"auto_keywords": [{"score": 0.049469816714638924, "phrase": "cphash"}, {"score": 0.005108119893064705, "phrase": "hash_table"}, {"score": 0.005010940976545758, "phrase": "fine-grained_locks"}, {"score": 0.00481495049065317, "phrase": "cache-partitioned_hash_table"}, {"score": 0.0046632033374901715, "phrase": "concurrent_hash_table"}, {"score": 0.0046038458731764926, "phrase": "multicore_processors"}, {"score": 0.004024242000713225, "phrase": "cphash's_message"}, {"score": 0.003750260412839128, "phrase": "asynchronous_messages"}, {"score": 0.0036553070575015344, "phrase": "multiple_messages"}, {"score": 0.0035856674209019234, "phrase": "single_cache_line_transfer"}, {"score": 0.0026865721000905235, "phrase": "on-chip_interconnect"}, {"score": 0.0026523079380037706, "phrase": "dram._cpserver"}, {"score": 0.002244596395352896, "phrase": "better_throughput"}, {"score": 0.0021049977753042253, "phrase": "cpserver"}], "paper_keywords": ["Design", " Performance"], "paper_abstract": "CPHASH is a concurrent hash table for multicore processors. CPHASH partitions its table across the caches of cores and uses message passing to transfer lookups/inserts to a partition. CPHASH's message passing avoids the need for locks, pipelines batches of asynchronous messages, and packs multiple messages into a single cache line transfer. Experiments on a 80-core machine with 2 hardware threads per core show that CPHASH has similar to 1.6x higher throughput than a hash table implemented using fine-grained locks. An analysis shows that CPHASH wins because it experiences fewer cache misses and its cache misses are less expensive, because of less contention for the on-chip interconnect and DRAM. CPSERVER, a key/value cache server using CPHASH, achieves similar to 5% higher throughput than a key/value cache server that uses a hash table with fine-grained locks, but both achieve better throughput and scalability than MEMCACHED. The throughput of CPHASH and CPSERVER also scale near-linearly with the number of cores.", "paper_title": "CPHASH: A Cache-Partitioned Hash Table", "paper_id": "WOS:000309350200048"}