{"auto_keywords": [{"score": 0.044857284553732626, "phrase": "dis"}, {"score": 0.0069593387642821365, "phrase": "mu_engines"}, {"score": 0.004904407075074409, "phrase": "average_query_completion_time"}, {"score": 0.00481495049065317, "phrase": "sub-query_processing"}, {"score": 0.004764859786310636, "phrase": "distributed_data_integration_systems"}, {"score": 0.0047152877145889656, "phrase": "data_integration_system"}, {"score": 0.0043367547691560175, "phrase": "geographically_distributed_data_sources"}, {"score": 0.004202741104973709, "phrase": "multiple_remote_sources"}, {"score": 0.003988487841970088, "phrase": "query_result"}, {"score": 0.0038450179181069833, "phrase": "wide-area_networks"}, {"score": 0.0037261429556468217, "phrase": "overall_query_response_time"}, {"score": 0.0035920758080335655, "phrase": "query_performance"}, {"score": 0.003480993634130542, "phrase": "communication_cost"}, {"score": 0.0033381913087533457, "phrase": "data_flow_style_query_execution_model"}, {"score": 0.002974886152979993, "phrase": "particular_operator"}, {"score": 0.0029131986574478046, "phrase": "multiple_sub-queries"}, {"score": 0.002678944072162297, "phrase": "overlapping_data"}, {"score": 0.002476424729269258, "phrase": "overall_communication_overhead"}, {"score": 0.002412371116984224, "phrase": "experimental_results"}, {"score": 0.002289180040240783, "phrase": "parameterized_queries"}, {"score": 0.0021049977753042253, "phrase": "non-parameterized_queries"}], "paper_keywords": ["Cloud computing", " Grid computing", " Data integration", " Query", " Data flow"], "paper_abstract": "Data integration system (DIS) is becoming paramount when Cloud/Grid applications need to integrate and analyze data from geographically distributed data sources. DIS gathers data from multiple remote sources, integrates and analyzes the data to obtain a query result. As Clouds/Grids are distributed over wide-area networks, communication cost usually dominates overall query response time. Therefore we can expect that query performance can be improved by minimizing communication cost. In our method, DIS uses a data flow style query execution model. Each query plan is mapped to a group of mu Engines, each of which is a program corresponding to a particular operator. Thus, multiple sub-queries from concurrent queries are able to share mu Engines. We reconstruct these sub-queries to exploit overlapping data among them. As a result, all the sub-queries can obtain their results, and overall communication overhead can be reduced. Experimental results show that, when DIS runs a group of parameterized queries, our reconstructing algorithm can reduce the average query completion time by 32-48%; when DIS runs a group of non-parameterized queries, the average query completion time of queries can be reduced by 25-35%. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Optimization of sub-query processing in distributed data integration systems", "paper_id": "WOS:000291846700002"}