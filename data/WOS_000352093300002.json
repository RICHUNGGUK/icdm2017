{"auto_keywords": [{"score": 0.03232720371645867, "phrase": "requirements_specification"}, {"score": 0.00481495049065317, "phrase": "software_evolution"}, {"score": 0.004691136491297242, "phrase": "software_systems"}, {"score": 0.004621813738791474, "phrase": "manual_task"}, {"score": 0.0033301694494391643, "phrase": "source_code"}, {"score": 0.003102488033561956, "phrase": "requirements-impacting_changes"}, {"score": 0.00229361668293267, "phrase": "impacted_requirements"}, {"score": 0.0022013916728990564, "phrase": "total_number"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["requirements evolution", " requirements update", " impact analysis", " traceability", " artifact synchronization"], "paper_abstract": "Updating the requirements specification when software systems evolve is a manual task that is expensive and time consuming. Therefore, maintainers usually apply the changes to the code directly and leave the requirements unchanged. This results in the requirements rapidly becoming obsolete and useless. In this paper, we propose an approach that supports the maintainer in keeping the requirements specification consistent with the implementation, by identifying the requirements that are impacted whenever the code is changed. Our approach works as follows. First, we analyze the changes that have been applied to the source code and detect if they are likely to impact the requirements or not. Second, we trace the requirements-impacting changes back to the requirements specification to identify the parts that might need to be modified. The output of the tracing is a list of requirements that are sorted according to their likelihood of being impacted. Automatically identifying the parts of the requirements specification that are likely to need maintenance reduces the effort needed for keeping the requirements up-to-date and thus makes the task of the maintainer easier. When applying our approach in three cases studies, 70% to 100% of the impacted requirements were identified within a list that includes less than 20% of the total number of requirements in the specification. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Supporting requirements update during software evolution", "paper_id": "WOS:000352093300002"}