{"auto_keywords": [{"score": 0.03190812938259865, "phrase": "tinyos"}, {"score": 0.004815168583686983, "phrase": "modular"}, {"score": 0.0047113960612140335, "phrase": "sensor_nodes"}, {"score": 0.004660453113061494, "phrase": "wireless_sensor_networks"}, {"score": 0.004413846562278824, "phrase": "permanent_network_infrastructure"}, {"score": 0.004225950334493496, "phrase": "human_accessibility"}, {"score": 0.003362660648932247, "phrase": "dynamic_exchange"}, {"score": 0.0033262524445013303, "phrase": "software_components"}, {"score": 0.003219368413618912, "phrase": "operating_system"}, {"score": 0.0031329184724341592, "phrase": "core_idea"}, {"score": 0.0028249975318149468, "phrase": "normal_compilation_process"}, {"score": 0.0027641218567092665, "phrase": "runtime_composition"}, {"score": 0.0027341763737751467, "phrase": "tinyos_components"}, {"score": 0.0026898636962522505, "phrase": "sensor_node"}, {"score": 0.002646267286675984, "phrase": "proposed_solution"}, {"score": 0.002575167114383286, "phrase": "system_architecture"}, {"score": 0.002412204754253618, "phrase": "programming_model"}, {"score": 0.002347378595930709, "phrase": "existing_components"}, {"score": 0.0021987994275190314, "phrase": "low_performance_overhead"}, {"score": 0.002151388538895855, "phrase": "smaller_-_up"}], "paper_keywords": ["in situ reprogramming", " software updates", " modular development", " incremental updates", " remote reprogramming", " transparent code integration", " TinyOS"], "paper_abstract": "Wireless sensor networks are envisioned to be deployed in the absence of permanent network infrastructure and in environments with limited or no human accessibility. Hence, such deployments demand mechanisms to remotely (i. e., over the air) reconfigure and update the software on the nodes. In this paper we introduce DyTOS, a TinyOS based remote reprogramming approach that enables the dynamic exchange of software components and thus incrementally update the operating system and its applications. The core idea is to preserve the modularity of TinyOS, i. e., its componentisation, which is lost during the normal compilation process, and enable runtime composition of TinyOS components on the sensor node. The proposed solution integrates seamlessly into the system architecture of TinyOS: It does not require any changes to the programming model of TinyOS and all existing components can be reused transparently. Our evaluation shows that DyTOS incurs a low performance overhead while keeping a smaller - up to one third - memory footprint than other comparable solutions.", "paper_title": "Modular remote reprogramming of sensor nodes", "paper_id": "WOS:000364814200012"}