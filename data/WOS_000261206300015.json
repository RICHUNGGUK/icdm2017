{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "connected_graph"}, {"score": 0.004449045430179066, "phrase": "communication_links"}, {"score": 0.003038983069081333, "phrase": "randomized_self-stabilizing_algorithm"}, {"score": 0.0025938977569302177, "phrase": "distributed_scheduler"}, {"score": 0.002448704249007665, "phrase": "edge_token_algorithm"}, {"score": 0.002362105010110277, "phrase": "building_block"}, {"score": 0.002245975340642921, "phrase": "ring_orientation_problem"}, {"score": 0.002166530105679438, "phrase": "token_circulation_problem"}], "paper_keywords": ["edge token", " leader election", " mutual exclusion", " orientation", " self-stabilization"], "paper_abstract": "Consider a connected graph with nodes (or processes) and edges (or communication links). An edge token associated with an edge is a token maintained by the two nodes connected by the edge; one and only one of the two nodes holds the token. An edge token can be passed from one node to the other if so desired. This paper first presents a randomized self-stabilizing algorithm to implement the edge token, in which each process maintains two three-state variables for an edge; the scheme works under the distributed scheduler with the read/write atomicity. Then, the edge token algorithm is used as a building block in two other self-stabilizing algorithms: one is for ring orientation problem and the other for token circulation problem on trees. All the proposed algorithms are uniform.", "paper_title": "The Self-Stabilizing Edge-Token and Its Applications", "paper_id": "WOS:000261206300015"}