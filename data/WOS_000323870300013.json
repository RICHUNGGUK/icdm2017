{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "aspect-oriented_programming"}, {"score": 0.0453350952845424, "phrase": "crosscutting_modularity"}, {"score": 0.044340662163821175, "phrase": "class_modularity"}, {"score": 0.004544629724830453, "phrase": "crosscutting_concerns"}, {"score": 0.004095567486538121, "phrase": "class_developers"}, {"score": 0.004001938457469328, "phrase": "parallel_development"}, {"score": 0.002945175711537758, "phrase": "adequate_design_rules"}, {"score": 0.002795671770303977, "phrase": "design_rule_specification_language"}, {"score": 0.00270023138867066, "phrase": "initial_phases"}, {"score": 0.00265373679629359, "phrase": "development_process"}, {"score": 0.0025336179740814905, "phrase": "modular_development"}, {"score": 0.0022434880661725493, "phrase": "real_case_study"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Aspect-oriented programming", " Design rules", " Modularity"], "paper_abstract": "Aspect-oriented programming is known as a technique for modularizing crosscutting concerns. However, constructs aimed to support crosscutting modularity might actually break class modularity. As a consequence, class developers face changeability, parallel development and comprehensibility problems, because they must be aware of aspects whenever they develop or maintain a class. At the same time, aspects are vulnerable to changes in classes, since there is no contract specifying the points of interaction amongst these elements. These problems can be mitigated by using adequate design rules between classes and aspects. We present a design rule specification language and explore its benefits since the initial phases of the development process, specially with the aim of supporting modular development of classes and aspects. We discuss how our language improves crosscutting modularity without breaking class modularity. We evaluate it using a real case study and compare it with other approaches. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "A design rule language for aspect-oriented programming", "paper_id": "WOS:000323870300013"}