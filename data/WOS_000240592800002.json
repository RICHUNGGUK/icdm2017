{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "format-string_attacks"}, {"score": 0.015320872964656816, "phrase": "flexible_validation"}, {"score": 0.0046429592670444945, "phrase": "format-string_attack"}, {"score": 0.004477083974172596, "phrase": "software_security"}, {"score": 0.004272456401437226, "phrase": "program_source_code_analysis"}, {"score": 0.003972504904621217, "phrase": "source_code_unavailable_software"}, {"score": 0.0037908515763223107, "phrase": "transparent_run-time_approach"}, {"score": 0.0035245918797629804, "phrase": "library_interposition"}, {"score": 0.0034881076466982226, "phrase": "elf_binary_analysis"}, {"score": 0.0032940691998512963, "phrase": "program_execution"}, {"score": 0.0032094634756436595, "phrase": "security_validation_layer"}, {"score": 0.0031597433845085092, "phrase": "printf-family_functions"}, {"score": 0.0031270239691197515, "phrase": "c_standard_library"}, {"score": 0.0030308784612749647, "phrase": "flexible_policy"}, {"score": 0.002968424524565369, "phrase": "format_string_attack"}, {"score": 0.0028622019660721363, "phrase": "format_string"}, {"score": 0.0027741761880779535, "phrase": "dangerous_format_specifiers"}, {"score": 0.002448260697722081, "phrase": "program_source_code"}, {"score": 0.0023361440016375972, "phrase": "legacy_applications"}, {"score": 0.0021049977753042253, "phrase": "low_performance_overhead"}], "paper_keywords": [""], "paper_abstract": "Format-string attack is one of the few truly threats to software security. Many previous methods for addressing this problem rely on program source code analysis or special recompilation, and hence exhibit limitations when applied to protect the source code unavailable software. In this paper, we present a transparent run-time approach to the defense against format-string attacks via dynamic taint and flexible validation. By leveraging library interposition and ELF binary analysis, we taint all the untrusted user-supplied data as well as their propagations during program execution, and add a security validation layer to the printf-family functions in C Standard Library in order to enforce a flexible policy to detect the format string attack on the basis of whether the format string has been tainted and contains dangerous format specifiers. Compared with other existing methods, our approach offers several benefits. It does not require the knowledge of the application or any modification to the program source code, and can therefore also be used with legacy applications. Moreover, as shown in our experiment, it is highly effective against the most types of format-string attacks and incurs low performance overhead.", "paper_title": "Transparent run-time prevention of format-string attacks via dynamic taint and flexible validation", "paper_id": "WOS:000240592800002"}