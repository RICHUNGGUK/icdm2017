{"auto_keywords": [{"score": 0.038840076428792135, "phrase": "calling_context"}, {"score": 0.03449254112778733, "phrase": "activation_records"}, {"score": 0.00481495049065317, "phrase": "context_abstraction"}, {"score": 0.004692227830462433, "phrase": "interprocedural_program_analysis"}, {"score": 0.004543193737836748, "phrase": "computing_procedure_summaries"}, {"score": 0.004398872331144531, "phrase": "computing_adequate_summaries"}, {"score": 0.00415050117148714, "phrase": "recursive_procedures"}, {"score": 0.003916098498242888, "phrase": "complementary_framework"}, {"score": 0.003865826699096508, "phrase": "interprocedural_analysis"}, {"score": 0.003767203575060969, "phrase": "direct_abstraction"}, {"score": 0.003531474887552889, "phrase": "inductive_structure"}, {"score": 0.0030832123624449028, "phrase": "separation_logic"}, {"score": 0.0030435998319355883, "phrase": "inductive_definitions"}, {"score": 0.002985130390111069, "phrase": "key_element"}, {"score": 0.002927780883930371, "phrase": "abstract_domain"}, {"score": 0.002427035025924384, "phrase": "abstract_interpretation-based_analysis_framework"}, {"score": 0.0022897425998475362, "phrase": "call_site"}, {"score": 0.0021462652605453163, "phrase": "shape_analyzers"}, {"score": 0.0021049977753042253, "phrase": "fluid_per_program_point_abstraction"}], "paper_keywords": ["Languages", " Verification", " interprocedural analysis", " context-sensitivity", " calling context", " shape analysis", " inductive definitions", " separation logic", " symbolic abstract domain"], "paper_abstract": "Interprocedural program analysis is often performed by computing procedure summaries. While possible, computing adequate summaries is difficult, particularly in the presence of recursive procedures. In this paper, we propose a complementary framework for interprocedural analysis based on a direct abstraction of the calling context. Specifically, our approach exploits the inductive structure of a calling context by treating it directly as a stack of activation records. We then build an abstraction based on separation logic with inductive definitions. A key element of this abstract domain is the use of parameters to refine the meaning of such call stack summaries and thus express relations across activation records and with the heap. In essence, we define an abstract interpretation-based analysis framework for recursive programs that permits a fluid per call site abstraction of the call stack-much like how shape analyzers enable a fluid per program point abstraction of the heap.", "paper_title": "Calling Context Abstraction with Shapes", "paper_id": "WOS:000286472700015"}