{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.004684157900507474, "phrase": "k-nearest_neighbors"}, {"score": 0.004515252649226697, "phrase": "collaborative_filtering"}, {"score": 0.003689053436223376, "phrase": "poor_efficiency"}, {"score": 0.0031553611552558986, "phrase": "k-nearest_neighbors_algorithm"}, {"score": 0.002985988377995789, "phrase": "distributed_architecture"}, {"score": 0.002799810685137358, "phrase": "response_time"}, {"score": 0.002673957615079041, "phrase": "recommender_systems"}, {"score": 0.00257735013358606, "phrase": "item_partition"}, {"score": 0.002286781334850213, "phrase": "user_partition"}, {"score": 0.0021441057555396013, "phrase": "faster_response_time"}, {"score": 0.0021049977753042253, "phrase": "higher_throughput"}], "paper_keywords": ["Recommender systems", " collaborative filtering", " distributed systems", " performance", " simulation"], "paper_abstract": "Collaborative filtering is one of the most popular recommendation techniques. While the quality of the recommendations has been significantly improved in the last years, most approaches present poor efficiency and scalability. In this paper, we study several factors that affect the performance of a k-Nearest Neighbors algorithm, and we propose a distributed architecture that significantly improves both throughput and response time. Two techniques for distributing recommender systems, user and item partition, were proposed and evaluated using that simulation model. We have found that user partition is generally better, with a faster response time and higher throughput.", "paper_title": "Distributed architecture for k-nearest neighbors recommender systems", "paper_id": "WOS:000356936800010"}