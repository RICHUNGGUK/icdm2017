{"auto_keywords": [{"score": 0.03312104079878856, "phrase": "compressed_suffix_tree"}, {"score": 0.011667139660931207, "phrase": "sigma"}, {"score": 0.00481495049065317, "phrase": "genome-scale_sequence_analysis"}, {"score": 0.004537525607322823, "phrase": "biological_sequence_analysis"}, {"score": 0.004237138632255772, "phrase": "real_genomic_sequences"}, {"score": 0.004160435626849478, "phrase": "main_memory_size"}, {"score": 0.0038849148160362257, "phrase": "dna_sequence"}, {"score": 0.003310684108128973, "phrase": "size_difference"}, {"score": 0.0028863414975346512, "phrase": "text_size"}, {"score": 0.002682669289913153, "phrase": "typical_suffix_tree_operations"}, {"score": 0.0026220103561723066, "phrase": "factor_slowdown"}, {"score": 0.0023927516438886445, "phrase": "normal_suffix_tree"}, {"score": 0.002370955769074803, "phrase": "typical_operations"}, {"score": 0.002234031373581961, "phrase": "gnu_license"}, {"score": 0.0021735249249471614, "phrase": "example_program"}, {"score": 0.0021438877099090262, "phrase": "typical_pattern_discovery_task"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": [""], "paper_abstract": "Suffix tree is one of the most fundamental data structures in string algorithms and biological sequence analysis. Unfortunately, when it comes to implementing those algorithms and applying them to real genomic sequences, often the main memory size becomes the bottleneck. This is easily explained by the fact that while a DNA sequence of length n from alphabet Sigma = {A, C, G, T} can be stored in n log vertical bar Sigma vertical bar = 2n bits, its suffix tree occupies O(n log n) bits. In practice, the size difference easily reaches factor 50. We provide an implementation of the compressed suffix tree very recently proposed by Sadakane (Theory of Computing Systems, in press). The compressed suffix tree occupies space proportional to the text size, i.e. O(n log vertical bar Sigma vertical bar) bits, and supports all typical suffix tree operations with at most log n factor slowdown. Our experiments show that, e. g. on a 10 MB DNA sequence, the compressed suffix tree takes 10% of the space of normal suffix tree. Typical operations are slowed down by factor 60. Availability: The C++ implementation under GNU license is available at http://www.cs.helsinki.fi/group/suds/cst/. An example program implementing a typical pattern discovery task is included. Experimental results in this note correspond to version 0.95. Contact: vmakinen@cs.helsinki.fi.", "paper_title": "Compressed suffix tree - a basis for genome-scale sequence analysis", "paper_id": "WOS:000245350200015"}