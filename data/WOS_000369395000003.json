{"auto_keywords": [{"score": 0.027727419198400112, "phrase": "amortized_analysis"}, {"score": 0.00481495049065317, "phrase": "resource_consumption"}, {"score": 0.004511663118269957, "phrase": "important_and_well-studied_problem"}, {"score": 0.004367228576339114, "phrase": "numeric_programs"}, {"score": 0.004310752197635499, "phrase": "side_effects"}, {"score": 0.004227398267369744, "phrase": "abstract_interpretation-based_invariant_generation"}, {"score": 0.004039094712469991, "phrase": "recursion_depths"}, {"score": 0.003986844722309844, "phrase": "function_calls"}, {"score": 0.003834099867584972, "phrase": "alternative_approach"}, {"score": 0.0037844916274672544, "phrase": "resource-bound_analysis"}, {"score": 0.003735522846193052, "phrase": "numeric_and_heap-manipulating_programs"}, {"score": 0.003663250792230243, "phrase": "type-based_amortized_resource_analysis"}, {"score": 0.0034322572683276654, "phrase": "imperative_code"}, {"score": 0.003257960296952439, "phrase": "first-order_ml-like_language"}, {"score": 0.002973904674745238, "phrase": "multivariate_polynomials"}, {"score": 0.002679386232765167, "phrase": "example_programs"}, {"score": 0.002576603426735759, "phrase": "current_abstract_interpretation-based_techniques"}, {"score": 0.0023982749733789882, "phrase": "non-linear_intermediate_values"}, {"score": 0.0021049977753042253, "phrase": "compound_programs"}], "paper_keywords": [""], "paper_abstract": "Proving bounds on the resource consumption of a program by statically analyzing its source code is an important and well-studied problem. Automatic approaches for numeric programs with side effects usually apply abstract interpretation-based invariant generation to derive bounds on loops and recursion depths of function calls. This article presents an alternative approach to resource-bound analysis for numeric and heap-manipulating programs that uses type-based amortized resource analysis. As a first step towards the analysis of imperative code, the technique is developed for a first-order ML-like language with unsigned integers and arrays. The analysis automatically derives bounds that are multivariate polynomials in the numbers and the lengths of the arrays in the input. Experiments with example programs demonstrate two main advantages of amortized analysis over current abstract interpretation-based techniques. For one thing, amortized analysis can handle programs with non-linear intermediate values like f((n + m)(2)). For another thing, amortized analysis is compositional and works naturally for compound programs like f(g(x)).", "paper_title": "Type-based amortized resource analysis with integers and arrays", "paper_id": "WOS:000369395000003"}