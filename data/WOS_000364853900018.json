{"auto_keywords": [{"score": 0.049747721549480595, "phrase": "small_files"}, {"score": 0.012251396080488738, "phrase": "distributed_file_systems"}, {"score": 0.01204213809049459, "phrase": "massive_numbers"}, {"score": 0.006880840528958142, "phrase": "traditional_file_systems"}, {"score": 0.0063098818940149504, "phrase": "data_servers"}, {"score": 0.00481495049065317, "phrase": "managing_massive_numbers"}, {"score": 0.004585792654828894, "phrase": "tfs"}, {"score": 0.00443000995237127, "phrase": "combined-block-storage_approach"}, {"score": 0.004234456398783788, "phrase": "extfs"}, {"score": 0.0037889466472096284, "phrase": "flat_lightweight_file_system"}, {"score": 0.003621588555525458, "phrase": "simple_metadata_scheme"}, {"score": 0.003584025547693836, "phrase": "flat_storage_architecture"}, {"score": 0.003485744667868367, "phrase": "traditional_file_system"}, {"score": 0.0032516342542969387, "phrase": "original_data_access_procedure"}, {"score": 0.003217896008931311, "phrase": "new_metadata"}, {"score": 0.0031187606191012012, "phrase": "metadata_size"}, {"score": 0.002939737235379635, "phrase": "open_source"}, {"score": 0.0029295314433077134, "phrase": "distributed_file_system"}, {"score": 0.002869034325496957, "phrase": "taobao_filesystem"}, {"score": 0.0027517521202367074, "phrase": "alibaba"}, {"score": 0.002723219520754069, "phrase": "china"}, {"score": 0.002630085891013006, "phrase": "extensive_experiments"}, {"score": 0.0025137856138000014, "phrase": "file_size"}, {"score": 0.0023611760395203106, "phrase": "random_read"}, {"score": 0.002320449502337321, "phrase": "dfs_environment"}, {"score": 0.00221781065048839, "phrase": "iflatlfs-based_tfs"}, {"score": 0.0021049977753042253, "phrase": "hybrid_access"}], "paper_keywords": ["Distributed file system", " data server", " small file", " performance optimization"], "paper_abstract": "The processing of massive numbers of small files is a challenge in the design of distributed file systems. Currently, the combined-block-storage approach is prevalent. However, the approach employs the traditional file systems such as ExtFS and may cause inefficiency when accessing small files randomly located in the disk. This paper focuses on optimizing the performance of data servers in accessing massive numbers of small files. We present a Flat Lightweight File System (iFlatLFS) to manage small files, which is based on a simple metadata scheme and a flat storage architecture. iFlatLFS is designed to substitute the traditional file system on data servers and can be deployed underneath distributed file systems that store massive numbers of small files. iFlatLFS can greatly simplify the original data access procedure. The new metadata proposed in this paper occupies only a fraction of the metadata size based on traditional file systems. We have implemented iFlatLFS in CentOS 5.5 and integrated it into an open source Distributed File System (DFS), called Taobao FileSystem (TFS), which is developed by a top B2C service provider, Alibaba, in China and is managing over 28.6 billion small photos. We have conducted extensive experiments to verify the performance of iFlatLFS. The results show that when the file size ranges from 1 to 64 KB, iFlatLFS is faster than Ext4 by 48 and 54 percent on average for random read and write in the DFS environment, respectively. Moreover, after iFlatLFS is integrated into TFS, iFlatLFS-based TFS is faster than the existing Ext4-based TFS by 45 and 49 percent on average for random read access and hybrid access (the mix of read and write accesses), respectively.", "paper_title": "Performance Optimization for Managing Massive Numbers of Small Files in Distributed File Systems", "paper_id": "WOS:000364853900018"}