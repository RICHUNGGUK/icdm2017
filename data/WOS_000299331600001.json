{"auto_keywords": [{"score": 0.042980055209087174, "phrase": "conventional_helper"}, {"score": 0.0152828953927324, "phrase": "linked_data_structures"}, {"score": 0.009721721364560634, "phrase": "main_thread"}, {"score": 0.00481495049065317, "phrase": "performance_optimization"}, {"score": 0.0044967055264893184, "phrase": "chip_multiprocessor"}, {"score": 0.004420472010542188, "phrase": "well_known_approach"}, {"score": 0.004345525254560329, "phrase": "memory_latency"}, {"score": 0.004199406257273994, "phrase": "linked_data_structures_accesses"}, {"score": 0.003966667994579941, "phrase": "useless_prefetches"}, {"score": 0.0039216854691927865, "phrase": "cache_thrashing"}, {"score": 0.0033811403330431897, "phrase": "improved_helper"}, {"score": 0.0033048445033866795, "phrase": "skip_helper"}, {"score": 0.002999274091205852, "phrase": "balance_delinquent_loads"}, {"score": 0.002931569771634119, "phrase": "prefetching_thread"}, {"score": 0.002706383680762465, "phrase": "proposed_solution"}, {"score": 0.002675654549462983, "phrase": "average_performance"}, {"score": 0.002414290278501595, "phrase": "delinquent_loads"}, {"score": 0.0023064582783867645, "phrase": "active_threaded_prefetching"}, {"score": 0.0021413855297794946, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "targeted_applications"}], "paper_keywords": ["Chip multiprocessor (CMP)", " Prefetching thread", " Delinquent load", " Performance analysis", " Hotspot profiling"], "paper_abstract": "Helper threaded prefetching based on Chip Multiprocessor is a well known approach to reducing memory latency and has been explored in linked data structures accesses. However, conventional helper threaded prefetching often suffers from useless prefetches and cache thrashing, which affect its effectiveness. In this paper, we first analyzed the shortcomings of conventional helper threaded prefetching for linked data structures. Then we proposed an improved helper threaded prefetching, Skip Helper Threaded Prefetching, for hotspots with two level data traversals. Our solution is to profile the applications and balance delinquent loads between main thread and prefetching thread based on the characteristic of operations in their hotspots. Evaluations show that the proposed solution improves average performance by 8.9% (-O2) and 8.5% (-O3) over the conventional helper threaded prefetching that greedily prefetches all delinquent loads. We also compare our proposal with the active threaded prefetching which synchronizes with main thread by semaphore, and find that our proposal provides better performance for the targeted applications.", "paper_title": "The Performance Optimization of Threaded Prefetching for Linked Data Structures", "paper_id": "WOS:000299331600001"}