{"auto_keywords": [{"score": 0.04535994665072432, "phrase": "cbse"}, {"score": 0.04006313190982079, "phrase": "aop"}, {"score": 0.027507999683207565, "phrase": "ac"}, {"score": 0.00481495049065317, "phrase": "component-based_and_aspect-oriented_systems"}, {"score": 0.003967021436047945, "phrase": "program_structure"}, {"score": 0.0034191818674096453, "phrase": "cbse_principles"}, {"score": 0.0033752699884302463, "phrase": "aop."}, {"score": 0.0032259472087775138, "phrase": "twofold_integration"}, {"score": 0.0031435973361119713, "phrase": "cbse."}, {"score": 0.00306334226516593, "phrase": "general_model"}, {"score": 0.002927780883930371, "phrase": "fractal_aspect_component"}, {"score": 0.002834642455442609, "phrase": "fac"}, {"score": 0.0027801631944598206, "phrase": "software_system"}, {"score": 0.0027444334639134217, "phrase": "regular_components"}, {"score": 0.002709161672473817, "phrase": "aspect_components"}, {"score": 0.0025394700487126414, "phrase": "regular_component"}, {"score": 0.00247460024299964, "phrase": "crosscutting_concern"}, {"score": 0.0023958326775913165, "phrase": "aspect_domain"}, {"score": 0.0021049977753042253, "phrase": "first-class_runtime_entities"}], "paper_keywords": [""], "paper_abstract": "Aspect-Oriented Programming (AOP) and Component-Based Software Engineering (CBSE) offer solutions to improve the separation of concerns and to enhance a program structure. If the integration of AOP into CBSE has already been proposed, none of these solutions focus on the application of CBSE principles to AOP. In this paper we propose a twofold integration of AOP and CBSE. We introduce a general model for components and aspects, named Fractal Aspect Component (FAC). FAC decomposes a software system into regular components and aspect components (ACs), where an AC is a regular component that embodies a crosscutting concern. We reify the aspect domain of an AC and the relationship between an AC and a component, called an aspect binding, as first-class runtime entities. This clarifies the architecture of a system where components and aspects coexist. The system can evolve from the design to the execution by adding or removing components, aspects or bindings.", "paper_title": "A model for developing component-based and aspect-oriented systems", "paper_id": "WOS:000241358100017"}