{"auto_keywords": [{"score": 0.031494787351117264, "phrase": "alternative_services"}, {"score": 0.00481495049065317, "phrase": "bpel_processes"}, {"score": 0.004588891098290524, "phrase": "web_services_business_process_execution_language"}, {"score": 0.004316396683332752, "phrase": "composite_business_processes"}, {"score": 0.0038692638652494697, "phrase": "ws-bpel_scenario_designer"}, {"score": 0.003736166999097443, "phrase": "ws-bpel"}, {"score": 0.0035761913760242697, "phrase": "system_fault_handier_specification"}, {"score": 0.0034835017385881385, "phrase": "additional_task"}, {"score": 0.003438058620195309, "phrase": "ws_scenario_designer"}, {"score": 0.0032764307492734145, "phrase": "extra_maintenance_activities"}, {"score": 0.0031498398446368056, "phrase": "middleware-based_framework"}, {"score": 0.0031223774204093713, "phrase": "system_exception_resolution"}, {"score": 0.0030281251520610604, "phrase": "failure_interception"}, {"score": 0.0027985846558073457, "phrase": "process_consumer-specified_quality_of_service"}, {"score": 0.0026436755508085223, "phrase": "syntactic_differences"}, {"score": 0.0026091594819333654, "phrase": "originally_invoked_services"}, {"score": 0.0025863988422430797, "phrase": "functionally_equivalent_replacements"}, {"score": 0.0025192983141887285, "phrase": "xslt-based_transformations"}, {"score": 0.0024007585788965655, "phrase": "ws-bpel_scenarios"}, {"score": 0.002297831085501592, "phrase": "system_fault_handlers"}, {"score": 0.002218668420806254, "phrase": "performance_measures"}, {"score": 0.0021049977753042253, "phrase": "proposed_middleware_layer"}], "paper_keywords": ["web services", " exception handling", " middleware", " performance metrics", " quality of service", " QoS", " scalability", " BPEL process", " exception resolution"], "paper_abstract": "Web Services Business Process Execution Language (WS-BPEL) is widely used nowadays for specifying and executing composite business processes. During the execution, however, of such business processes, a number Of faults stemming from the nature of SOA may occur. The WS-BPEL scenario designer must therefore use the provisions offered by WS-BPEL to catch these exceptions and resolve them. The system fault handier specification, however, is an additional task for the WS scenario designer, while the presence of such handlers within the scenario necessitates extra maintenance activities. In this paper, we propose a middleware-based framework for system exception resolution, which undertakes the tasks of failure interception, discovery of alternative services and their invocation. The process of selecting the alternative services can be driven by process consumer-specified Quality of Service (QoS) policy. Moreover, the middleware arranges for bridging syntactic differences between the originally invoked services and functionally equivalent replacements to it, by employing XSLT-based transformations. The middleware is deployed and maintained independently of the WS-BPEL scenarios. thus removing the need for specifying and maintaining system fault handlers within the scenarios. We also present performance measures, establishing that the overhead imposed by the addition of the proposed middleware layer is minimal.", "paper_title": "IQoS-aware exception resolution for BPEL processes: a middleware-based framework and performance evaluation", "paper_id": "WOS:000271838200003"}