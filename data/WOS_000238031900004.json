{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "inter-user_communication_applications"}, {"score": 0.004577440795549049, "phrase": "event-driven_framework"}, {"score": 0.004351595642056769, "phrase": "internet_gaming"}, {"score": 0.00413684709497912, "phrase": "frequent_communication"}, {"score": 0.0038343546245999285, "phrase": "event-driven_programming"}, {"score": 0.003349984456443527, "phrase": "output_buffering_mechanism"}, {"score": 0.0029020077365708966, "phrase": "helper_processes"}, {"score": 0.0024302416436559867, "phrase": "application_development"}, {"score": 0.0022145052062614514, "phrase": "online_game_development"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["inter-user communication applications", " event-driven programming", " concurrent programming", " framework", " threads"], "paper_abstract": "This paper presents an event-driven framework for inter-user communication applications, such as Internet gaming or chatting, that require frequent communication among users. This paper addresses two major blocking problems for event-driven programming for inter-user communication applications, namely output blocking and request blocking. For the former, an output buffering mechanism is presented to solve this problem. For the latter, a service requesting mechanism with helper processes is presented to solve this problem. The above two mechanisms are incorporated into the framework presented in this paper to facilitate application development. In practice, this framework has been applied to online game development. (C) 2005 Elsevier B.V. All rights reserved.", "paper_title": "An event-driven framework for inter-user communication applications", "paper_id": "WOS:000238031900004"}