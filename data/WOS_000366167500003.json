{"auto_keywords": [{"score": 0.04896221231267542, "phrase": "cloud_infrastructure"}, {"score": 0.04178514569843149, "phrase": "resource_performance"}, {"score": 0.00481495049065317, "phrase": "reactive_resource_provisioning_heuristics"}, {"score": 0.004592905436175987, "phrase": "low_latency_analysis"}, {"score": 0.004549734943142138, "phrase": "high-velocity_data_streams"}, {"score": 0.0044435677598780796, "phrase": "distributed_continuous_dataflow_systems"}, {"score": 0.004401794742140806, "phrase": "contemporary_stream_processing_systems"}, {"score": 0.004258644418211771, "phrase": "elastic_cloud_resources"}, {"score": 0.0041987222897385676, "phrase": "variable_data_rates"}, {"score": 0.004120130206000757, "phrase": "application_qos"}, {"score": 0.0038564191670589884, "phrase": "autonomic_methods"}, {"score": 0.003802135020791801, "phrase": "elastic_resources"}, {"score": 0.0035925056609681194, "phrase": "\"dynamic_dataflows"}, {"score": 0.003525220627709056, "phrase": "alternate_tasks"}, {"score": 0.0034920505103165403, "phrase": "additional_control"}, {"score": 0.0034428776029411974, "phrase": "dataflow's_cost"}, {"score": 0.0033150974333333244, "phrase": "optimization_problem"}, {"score": 0.0032376465741070274, "phrase": "runtime_resource_provisioning"}, {"score": 0.003132236287543072, "phrase": "application's_qos"}, {"score": 0.0030446120560494155, "phrase": "resource_cost"}, {"score": 0.0028630535573013686, "phrase": "variable-sized_bin_packing_algorithm"}, {"score": 0.0027437235598539904, "phrase": "near-optimal_solution"}, {"score": 0.0027050595279115015, "phrase": "large-scale_simulation_study"}, {"score": 0.0026543514413663893, "phrase": "linear_road"}, {"score": 0.0026169883145788207, "phrase": "vm"}, {"score": 0.002555761854502478, "phrase": "aws_public_cloud"}, {"score": 0.0024960069794216977, "phrase": "ga-based_heuristic"}, {"score": 0.002460825108719896, "phrase": "better_quality_schedule"}, {"score": 0.002426137929553722, "phrase": "greedy_heuristics"}, {"score": 0.0022070310530794097, "phrase": "input_data_rates"}, {"score": 0.0021049977753042253, "phrase": "fast_data_applications"}], "paper_keywords": ["Dataflows", " stream processing", " cloud", " resource management", " scheduling", " high velocity data", " runtime adaptation"], "paper_abstract": "The need for low latency analysis over high-velocity data streams motivates the need for distributed continuous dataflow systems. Contemporary stream processing systems use simple techniques to scale on elastic cloud resources to handle variable data rates. However, application QoS is also impacted by variability in resource performance exhibited by clouds and hence necessitates autonomic methods of provisioning elastic resources to support such applications on cloud infrastructure. We develop the concept of \"dynamic dataflows\" which utilize alternate tasks as additional control over the dataflow's cost and QoS. Further, we formalize an optimization problem to represent deployment and runtime resource provisioning that allows us to balance the application's QoS, value, and the resource cost. We propose two greedy heuristics, centralized and sharded, based on the variable-sized bin packing algorithm and compare against a Genetic Algorithm (GA) based heuristic that gives a near-optimal solution. A large-scale simulation study, using the linear road benchmark and VM performance traces from the AWS public cloud, shows that while GA-based heuristic provides a better quality schedule, the greedy heuristics are more practical, and can intelligently utilize cloud elasticity to mitigate the effect of variability, both in input data rates and cloud resource performance, to meet the QoS of fast data applications.", "paper_title": "Reactive Resource Provisioning Heuristics for Dynamic Dataflows on Cloud Infrastructure", "paper_id": "WOS:000366167500003"}