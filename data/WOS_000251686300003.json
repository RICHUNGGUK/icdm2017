{"auto_keywords": [{"score": 0.03641062883629123, "phrase": "correctly_rounded_result"}, {"score": 0.00481495049065317, "phrase": "arbitrary_precision_constants"}, {"score": 0.004611224230543916, "phrase": "floating-point_number_x"}, {"score": 0.0043738432231020885, "phrase": "floating-point_arithmetic"}, {"score": 0.004188702178897384, "phrase": "fused_multiply"}, {"score": 0.003992129945230457, "phrase": "modern_processors"}, {"score": 0.003916098498242888, "phrase": "ibm_power_pc"}, {"score": 0.003199864072042816, "phrase": "values_x"}, {"score": 0.0027431953780099826, "phrase": "compile_time"}, {"score": 0.0023515464194592195, "phrase": "wider_internal_format"}, {"score": 0.0022956075241520064, "phrase": "intermediate_calculations"}, {"score": 0.0022409963215568565, "phrase": "fourth_method"}, {"score": 0.0021876814398268775, "phrase": "additional_information"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_nonbinary"}], "paper_keywords": ["floating-point arithmetic", " computer arithmetic", " multiplication by constants", " fused multiply-add instruction", " correct rounding"], "paper_abstract": "We introduce an algorithm for multiplying a floating-point number x by a constant C that is not exactly representable in floating-point arithmetic. Our algorithm uses a multiplication and a fused multiply and add instruction. Such instructions are available in some modern processors such as the IBM Power PC and the Intel/HP Itanium. We give three methods for checking whether, for a given value of C and a given floating-point format, our algorithm returns a correctly rounded result for any x. When it does not, some of our methods return all of the values x for which the algorithm fails. The three methods are complementary: The first two do not always allow one to conclude, yet they are simple enough to be used at compile time, while the third one always either proves that our algorithm returns a correctly rounded result for any x or gives all of the counterexamples. We generalize our study to the case where a wider internal format is used for the intermediate calculations, which gives a fourth method. Our programs and some additional information ( such as the case where an arbitrary nonbinary even radix is used), as well as examples of runs of our programs, can be downloaded from http://perso.ens-lyon.fr/jean-michel.muller/MultConstant.html.", "paper_title": "Correctly rounded multiplication by arbitrary precision constants", "paper_id": "WOS:000251686300003"}