{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "matrix_algorithm"}, {"score": 0.004671932143798307, "phrase": "model_checking"}, {"score": 0.004478782833067256, "phrase": "circuit_design"}, {"score": 0.004425072111844721, "phrase": "network_protocol_analysis"}, {"score": 0.004372002674739612, "phrase": "bug_hunting"}, {"score": 0.004319566932528865, "phrase": "recent_research"}, {"score": 0.004267757384195032, "phrase": "automatic_verification"}, {"score": 0.004140924670517666, "phrase": "single_model-checking_technique"}, {"score": 0.003922011960904278, "phrase": "application_areas"}, {"score": 0.0033725614574134396, "phrase": "different_techniques"}, {"score": 0.002952900365829518, "phrase": "software_design"}, {"score": 0.002796616969627065, "phrase": "software_architectures"}, {"score": 0.00276314123575907, "phrase": "sa"}, {"score": 0.002616762777413686, "phrase": "abstract_descriptions"}, {"score": 0.0025853238923610076, "phrase": "complex_software_systems"}, {"score": 0.0024932498388507084, "phrase": "direct_model"}, {"score": 0.002419025278429845, "phrase": "kripke_structure"}, {"score": 0.0022771244331421586, "phrase": "domain_specific_software_architecture_description_languages"}], "paper_keywords": ["Direct Model Checking (DMC)", " Kripke semantics structure", " CTL logic", " Matrix Algorithm"], "paper_abstract": "During the last decade, Model Checking has proven its efficacy and power in circuit design, network protocol analysis and bug hunting. Recent research on automatic verification has shown that no single model-checking technique has the edge over all others in all application areas. So, it is very difficult to determine which technique is the most suitable for a given model. It is thus sensible to apply different techniques to the same model. However, this is a very tedious and time-consuming task, for each algorithm uses its own description language. Applying Model Checking in software design and verification has been proved very difficult. Software architectures (SA) are engineering artifacts that provide high-level and abstract descriptions of complex software systems. In this paper a Direct Model Checking (DMC) method based on Kripke Structure and Matrix Algorithm is provided. Combined and integrated with domain specific software architecture description languages (ADLs), DMC can be used for computing consistency and other critical properties.", "paper_title": "Direct model checking matrix algorithm", "paper_id": "WOS:000242640200010"}