{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gui_test-case_prioritization"}, {"score": 0.004769702911065878, "phrase": "weight-based_methods"}, {"score": 0.004614643339546038, "phrase": "gui-based_application"}, {"score": 0.004485735417293941, "phrase": "conventional_code-based_application"}, {"score": 0.004339867166576126, "phrase": "underlying_codes"}, {"score": 0.004278807087784626, "phrase": "gui_application"}, {"score": 0.004178935413340453, "phrase": "possible_combinations"}, {"score": 0.004081385289516914, "phrase": "large_gui-input_sequence"}, {"score": 0.0040049806975968145, "phrase": "numerous_test_cases"}, {"score": 0.0038746849003761024, "phrase": "gui_testing"}, {"score": 0.003802135020791801, "phrase": "gui_test_cases"}, {"score": 0.0037133478610481994, "phrase": "found_bugs"}, {"score": 0.0035587046945919788, "phrase": "project_completion"}, {"score": 0.0033943947596098583, "phrase": "test_cases"}, {"score": 0.0032223742018434856, "phrase": "testing_process"}, {"score": 0.0031920445513574907, "phrase": "test-case_prioritization"}, {"score": 0.00297346171320082, "phrase": "fault_detection"}, {"score": 0.002931569771634119, "phrase": "testing_phase"}, {"score": 0.002679585860537941, "phrase": "weighted-event_flow_graph"}, {"score": 0.0026293540353514075, "phrase": "non-weighted_gui_test_case"}, {"score": 0.0025316905609748135, "phrase": "weight_scores"}, {"score": 0.0024960069794216977, "phrase": "weighted_scores"}, {"score": 0.0023470862747075228, "phrase": "dynamic_adjusted_scores"}, {"score": 0.0022492129111567824, "phrase": "experimental_results"}, {"score": 0.0022070310530794097, "phrase": "adjusted-weight_method"}, {"score": 0.0021656385587456952, "phrase": "better_fault-detection_rate"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["GUI testing", " Test-case prioritization", " Rate of detected fault", " Weight-based event flow graph"], "paper_abstract": "Testing the correctness of a GUI-based application is more complex than the conventional code-based application. In addition to testing the underlying codes of the GUI application, the space of possible combinations of events with a large GUI-input sequence also requires creating numerous test cases to confirm the adequacy of the GUI testing. Running all GUI test cases and then fixing all found bugs may be time-consuming and delaying the project completion. Hence, it is important to advance the test cases that uncover the most faults as fast as possible in the testing process. Test-case prioritization has been proposed and used in recent years because it can improve the rate of fault detection during the testing phase. However, few studies have discussed the problem of GUI test-case prioritization. In this paper, we propose a weighted-event flow graph for solving the non-weighted GUI test case and ranking GUI test cases based on weight scores. The weighted scores can either be ranked from high to low or be ordered by dynamic adjusted scores. Finally, three experiments are performed, and experimental results show that the adjusted-weight method can obtain a better fault-detection rate. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Design and analysis of GUI test-case prioritization using weight-based methods", "paper_id": "WOS:000275967500011"}