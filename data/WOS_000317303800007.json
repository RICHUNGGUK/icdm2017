{"auto_keywords": [{"score": 0.03373905846456355, "phrase": "spardl_models"}, {"score": 0.015719716506582538, "phrase": "periodic_control_systems"}, {"score": 0.004529093447865156, "phrase": "real-time_embedded_system_domain"}, {"score": 0.004419538941706716, "phrase": "traditional_manual_requirement_analysis"}, {"score": 0.004339108074589307, "phrase": "expert_knowledge"}, {"score": 0.003982617095636925, "phrase": "novel_requirement_analysis_approach"}, {"score": 0.0038624981944755813, "phrase": "automated_validation"}, {"score": 0.0037921662574137535, "phrase": "informal_requirement_specifications"}, {"score": 0.0036777702949712457, "phrase": "normalized_initial_requirement_documents"}, {"score": 0.0035233696341819437, "phrase": "intermediate_spardl_model"}, {"score": 0.003459191419478298, "phrase": "formal_syntax"}, {"score": 0.0033139366449568565, "phrase": "overall_system_behaviors"}, {"score": 0.0031553611552558986, "phrase": "executable_code"}, {"score": 0.0030601162942933665, "phrase": "derived_prototype_simulator"}, {"score": 0.0029677378488677983, "phrase": "testing-based_system_behavior_validation"}, {"score": 0.0027741761880779535, "phrase": "dataflow_relations"}, {"score": 0.0025459275963373496, "phrase": "software_engineers"}, {"score": 0.002469032978674379, "phrase": "potential_data_dependencies"}, {"score": 0.0024389277933858054, "phrase": "spardl_modules"}, {"score": 0.0023221248824337576, "phrase": "module_reuse"}, {"score": 0.0022797772939670063, "phrase": "new_version"}, {"score": 0.0021049977753042253, "phrase": "industry_design"}], "paper_keywords": ["SPARDL", " simulation", " dataflow analysis", " code generation"], "paper_abstract": "Periodic control systems (PCSs) are widely used in real-time embedded system domain. However, traditional manual requirement analysis assumes the expert knowledge, which is laborious and error-prone. This paper proposes a novel requirement analysis approach, which supports the automated validation of the informal requirement specifications. Based on the normalized initial requirement documents, our approach can construct an intermediate SPARDL model with both formal syntax and semantics. To check the overall system behaviors, our approach can transform the SPARDL models into executable code for simulation. The derived prototype simulator from SPARDL models enables the testing-based system behavior validation. Moreover, our approach enables the analysis of the dataflow relations in SPARDL models. By revealing input/output and affecting relations, our dataflow analysis techniques can help software engineers to figure out the potential data dependencies between SPARDL modules. This is very useful for the module reuse when a new version of the system is developed. A study of our approach using an industry design demonstrates the practicality and effectiveness of our approach.", "paper_title": "A novel requirement analysis approach for periodic control systems", "paper_id": "WOS:000317303800007"}