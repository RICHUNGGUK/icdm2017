{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "text-based_and_dependence-based_approaches"}, {"score": 0.00464343008299973, "phrase": "bug_origins"}, {"score": 0.004550783060775205, "phrase": "erroneous_code"}, {"score": 0.0043533862892678864, "phrase": "process_weaknesses"}, {"score": 0.004249332848326785, "phrase": "bug_detection_tools"}, {"score": 0.004064958518350867, "phrase": "fixing_bugs"}, {"score": 0.0038728990904778678, "phrase": "text_approach"}, {"score": 0.0038263136898042285, "phrase": "dependence_approach"}, {"score": 0.00363080961099728, "phrase": "textual_and_dependence-related_changes"}, {"score": 0.0035439655241057207, "phrase": "bug_fix"}, {"score": 0.0033223686422055834, "phrase": "available_implementations"}, {"score": 0.0027150658583211746, "phrase": "precise_definition"}, {"score": 0.0026932247685847246, "phrase": "program_dependence"}, {"score": 0.0025658094607383646, "phrase": "single_or_multiple_origins"}, {"score": 0.002534906456854208, "phrase": "potential_improvements"}, {"score": 0.0024642355970277497, "phrase": "pragmatic_strategies"}, {"score": 0.0024052270356036743, "phrase": "simple_modifications"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software maintenance", " bug origins", " mining software repositories", " program dependence graph", " version control", " bug tracking systems"], "paper_abstract": "Identifying bug origins - the point where erroneous code was introduced - is crucial for many software engineering activities, from identifying process weaknesses to gathering data to support bug detection tools. Unfortunately, this information is not usually recorded when fixing bugs, and recovering it later is challenging. Recently, the text approach and the dependence approach have been developed to tackle this problem. Respectively, they examine textual and dependence-related changes that occurred prior to a bug fix. However, only limited evaluation has been carried out, partially because of a lack of available implementations and of datasets linking bugs to origins. To address this, origins of 174 bugs in three projects were manually identified and compared to a simulation of the approaches. Both approaches were partially successful across a variety of bugs - achieving 29-79% precision and 40-70% recall. Results suggested the precise definition of program dependence could affect performance, as could whether the approaches identified a single or multiple origins. Some potential improvements are explored in detail and identify pragmatic strategies for combining techniques along with simple modifications. Even after adopting these improvements, there remain many challenges: large commits, unrelated changes and long periods between origins and fixes all reduce effectiveness. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Comparing text-based and dependence-based approaches for determining the origins of bugs", "paper_id": "WOS:000330799000006"}