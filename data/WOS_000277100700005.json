{"auto_keywords": [{"score": 0.04905392741766743, "phrase": "access_control_concerns"}, {"score": 0.011516716805163108, "phrase": "access_control_policies"}, {"score": 0.011071504425714933, "phrase": "access_control_diagrams"}, {"score": 0.00481495049065317, "phrase": "composable_access_control"}, {"score": 0.004577777897335174, "phrase": "security_policies"}, {"score": 0.004399616575575586, "phrase": "integral_part"}, {"score": 0.004352236750212992, "phrase": "software_development_process"}, {"score": 0.004274396662662802, "phrase": "acceptable_level"}, {"score": 0.004197942881217177, "phrase": "software_application"}, {"score": 0.004122850924351265, "phrase": "security_concerns"}, {"score": 0.0034792431564692997, "phrase": "non-security_concerns"}, {"score": 0.003295734286290854, "phrase": "uml"}, {"score": 0.0030882934359593144, "phrase": "mac"}, {"score": 0.0029252191241632888, "phrase": "changing_requirements"}, {"score": 0.0027708353425467927, "phrase": "access_control_features"}, {"score": 0.002682133505994396, "phrase": "specific_capabilities"}, {"score": 0.0026628098176168682, "phrase": "access_control_models"}, {"score": 0.0025313767218525965, "phrase": "different_access_control_policies"}, {"score": 0.002468107263634476, "phrase": "main_focus"}, {"score": 0.0022958971655679832, "phrase": "structure-preserving_mappings"}, {"score": 0.0022466111771668406, "phrase": "access_control"}, {"score": 0.002158979137177815, "phrase": "separate_access_control"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd"}], "paper_keywords": ["Access controls", " UML", " Separation of concerns", " Software engineering", " Model-driven development"], "paper_abstract": "Modeling of security policies, along with their realization in code, must be an integral part of the software development process, to achieve an acceptable level of security for a software application Among all of the security concerns (e g authentication, auditing, access control, confidentiality, etc), this paper addresses the incorporation of access control into software. The approach is to separate access control concerns from the rest of the design To assist designers to visualize access control policies separated from non-security concerns, this paper proposes a set of access control diagrams, i.e., extensions to the UML to represent three main access control models. role-based access control (RBAC), mandatory access control (MAC), and discretionary access control (DAC). To better adapt to changing requirements, and assist designers to customize access control policies, this paper proposes a set of access control features, i e, small components that realize specific capabilities of access control models Designers can select the features they require, and compose them to yield different access control policies When transitioning into code, the main focus is to preserve separation of access control concerns This paper describes an approach to realize access control diagrams and features in code through structure-preserving mappings, describes three different approaches to enforce access control in code, and evaluates the way each of them separate access control from other concerns (C) 2009 Elsevier Ltd All rights reserved", "paper_title": "A framework of composable access control features: Preserving separation of access control concerns from models to code", "paper_id": "WOS:000277100700005"}