{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "skyline_problem"}, {"score": 0.0047386923107107645, "phrase": "maxima_problem"}, {"score": 0.004553265070135597, "phrase": "database_community"}, {"score": 0.004445494322321316, "phrase": "set_p"}, {"score": 0.0044101380740283825, "phrase": "d-dimensional_points"}, {"score": 0.0038195342195623764, "phrase": "points_p"}, {"score": 0.0035544816252832375, "phrase": "main_result"}, {"score": 0.0034289106230496816, "phrase": "fixed_dimensionality_d"}, {"score": 0.003361069456060196, "phrase": "external_memory"}, {"score": 0.0031528393611136704, "phrase": "worst_case"}, {"score": 0.0029693204265884327, "phrase": "disk_block"}, {"score": 0.00288736193515505, "phrase": "main_memory"}, {"score": 0.0028643622911111942, "phrase": "similar_bounds"}, {"score": 0.002741091312632307, "phrase": "k-dominant_skyline"}, {"score": 0.0025405019456703325, "phrase": "data_space"}, {"score": 0.0025202582748972122, "phrase": "small_domains"}, {"score": 0.0024802523752944536, "phrase": "dimensionality_d"}, {"score": 0.002373472641477602, "phrase": "naive_algorithm"}, {"score": 0.0021049977753042253, "phrase": "naive_solution"}], "paper_keywords": ["Algorithms", " Theory", " Skyline", " admission point", " pareto set", " maxima set"], "paper_abstract": "We consider the skyline problem (aka the maxima problem), which has been extensively studied in the database community. The input is a set P of d-dimensional points. A point dominates another if the coordinate of the former is at most that of the latter on every dimension. The goal is to find the skyline, which is the set of points p is an element of P such that p is not dominated by any other point in P. The main result of this article is that, for any fixed dimensionality d >= 3, in external memory the skyline problem can be settled by performing O((N/B) log(M/B)(d-2)(N/B)) I/Os in the worst case, where N is the cardinality of P, B the size of a disk block, and M the capacity of main memory. Similar bounds can also be achieved for computing several skyline variants, including the k-dominant skyline, k-skyband, and alpha-skyline. Furthermore, the performance can be improved if some dimensions of the data space have small domains. When the dimensionality d is not fixed, the challenge is to outperform the naive algorithm that simply checks all pairs of points in P x P. We give an algorithm that terminates in O((N/B) log(d-2) N) I/Os, thus beating the naive solution for any d = O(log N/log log N).", "paper_title": "Worst-Case I/O-Efficient Skyline Algorithms", "paper_id": "WOS:000312942400004"}