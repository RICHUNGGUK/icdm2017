{"auto_keywords": [{"score": 0.04630684633148266, "phrase": "possible_products"}, {"score": 0.014603519811270262, "phrase": "enormous_number"}, {"score": 0.011702964055090598, "phrase": "pairwise_testing"}, {"score": 0.008386745466666535, "phrase": "feature_interactions"}, {"score": 0.00481495049065317, "phrase": "feature_interaction_coverage"}, {"score": 0.00477924690801092, "phrase": "software_product_line_engineering"}, {"score": 0.004743806810821005, "phrase": "testing_software_product_lines"}, {"score": 0.004570491683870396, "phrase": "high_degree"}, {"score": 0.004387117409226736, "phrase": "vast_majority"}, {"score": 0.004354572391793908, "phrase": "today's_testing"}, {"score": 0.004226778595997366, "phrase": "different_kinds"}, {"score": 0.004195418010131832, "phrase": "reuse_techniques"}, {"score": 0.004072275820209647, "phrase": "adaptability_capabilities"}, {"score": 0.004042056914551798, "phrase": "model-based_approaches"}, {"score": 0.0036689507925299885, "phrase": "individual_product_testing"}, {"score": 0.0031845067058084613, "phrase": "spl_context"}, {"score": 0.0030565692640988585, "phrase": "feature_models"}, {"score": 0.0030225753906647935, "phrase": "common_and_variable_parts"}, {"score": 0.00295571428544335, "phrase": "reusable_test_model"}, {"score": 0.002836942411239067, "phrase": "feature_model-based_coverage_criteria"}, {"score": 0.002815864555488112, "phrase": "test_model-based_coverage_criteria"}, {"score": 0.002763850622950247, "phrase": "data_flow_coverage"}, {"score": 0.002603758927691463, "phrase": "particular_attention"}, {"score": 0.0025272158996086378, "phrase": "major_challenge"}, {"score": 0.002508433454626386, "phrase": "spl_engineering"}, {"score": 0.0024620842899061614, "phrase": "concise_definition"}, {"score": 0.002443784721651744, "phrase": "feature_dependencies"}, {"score": 0.002398627220761343, "phrase": "testing_point"}, {"score": 0.0023368018449680295, "phrase": "adequacy_criteria"}, {"score": 0.002319431279824863, "phrase": "spl_coverage"}, {"score": 0.0023021895404322767, "phrase": "pairwise_feature_interaction_testing"}, {"score": 0.0022428442879034636, "phrase": "t-wise_case"}, {"score": 0.002128694000627911, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "automotive_domain"}], "paper_keywords": ["Software product lines", " Model-based engineering and testing", " Test generation and coverage", " Combinatorial testing", " Feature interaction"], "paper_abstract": "Testing software product lines (SPLs) is very challenging due to a high degree of variability leading to an enormous number of possible products. The vast majority of today's testing approaches for SPLs validate products individually using different kinds of reuse techniques for testing. Because of their reusability and adaptability capabilities, model-based approaches are suitable to describe variability and are therefore frequently used for implementation and testing purposes of SPLs. Due to the enormous number of possible products, individual product testing becomes more and more infeasible. Pairwise testing offers one possibility to test a subset of all possible products. However, according to the best of our knowledge, there is no contribution discussing and rating this approach in the SPL context. In this contribution, we provide a mapping between feature models describing the common and variable parts of an SPL and a reusable test model in the form of statecharts. Thereby, we interrelate feature model-based coverage criteria and test model-based coverage criteria such as control and data flow coverage and are therefore able to discuss the potentials and limitations of pairwise testing. We pay particular attention to test requirements for feature interactions constituting a major challenge in SPL engineering. We give a concise definition of feature dependencies and feature interactions from a testing point of view, and we discuss adequacy criteria for SPL coverage under pairwise feature interaction testing and give a generalization to the T-wise case. The concept and implementation of our approach are evaluated by means of a case study from the automotive domain.", "paper_title": "Model-based pairwise testing for feature interaction coverage in software product line engineering", "paper_id": "WOS:000308001900005"}