{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "arc_e"}, {"score": 0.035680674196695655, "phrase": "resource_consumption"}, {"score": 0.02761706749103778, "phrase": "fcspp."}, {"score": 0.004094639048362357, "phrase": "allowable_resource_consumption_quantities"}, {"score": 0.003524322230452833, "phrase": "u-n"}, {"score": 0.0034118234596993836, "phrase": "maximum_amount"}, {"score": 0.003289534854212415, "phrase": "node_n."}, {"score": 0.0029244418026475832, "phrase": "fcspp"}, {"score": 0.0028541057064952876, "phrase": "minimum-cost-feasible_path"}, {"score": 0.002685558057339722, "phrase": "resource-constrained_shortest-path_problem"}, {"score": 0.0026638482306228575, "phrase": "rcspp"}, {"score": 0.0026209522797963447, "phrase": "special_case"}, {"score": 0.0025578967205807843, "phrase": "new_dynamic_programming_algorithm"}, {"score": 0.002456148932305311, "phrase": "dominance_techniques"}, {"score": 0.002436289099444074, "phrase": "standard_rcspps"}, {"score": 0.002416589459425828, "phrase": "slightly_modified_problems"}, {"score": 0.0022738201751000865, "phrase": "knapsack_problems"}, {"score": 0.0022281257694320433, "phrase": "optimal_solution"}, {"score": 0.0022101055924375725, "phrase": "fcspp._computational_experiments"}, {"score": 0.0021049977753042253, "phrase": "naive_dynamic_programming_procedures"}], "paper_keywords": ["shortest path", " fixed charge", " dynamic programming"], "paper_abstract": "Consider a network N = (N, A) and associate with each arc e is an element of A a fixed cost c(e) for using arc e, an interval [l(e), u(e)] (l(e), u(e) is an element of Z) specifying the range of allowable resource consumption quantities along arc e, and a per-unit cost (c) over bar (e) for resource consumed along e. Furthermore, for each node n is an element of N, let U-n is an element of N be the maximum amount of resource consumption a path can accumulate before visiting node n. Given a source node n(s) is an element of N and sink node n(t) is an element of N, the fixed-charge shortest-path problem (FCSPP) seeks to find a minimum-cost-feasible path from n(s) to n(t). When resource consumption is simply additive, the resource-constrained shortest-path problem (RCSPP) is a special case of FCSPP. We develop a new dynamic programming algorithm for FCSPP. The algorithm uses solutions from labeling and dominance techniques for standard RCSPPs on slightly modified problems, and it combines these solutions by exploiting the structure provided by certain classes of knapsack problems to efficiently construct an optimal solution to FCSPP. Computational experiments demonstrate that our algorithm is often several orders of magnitude faster than naive dynamic programming procedures.", "paper_title": "The Fixed-Charge Shortest-Path Problem", "paper_id": "WOS:000310834700006"}