{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "higher-order_programs"}, {"score": 0.04826746166471345, "phrase": "higher-order_functional_programs"}, {"score": 0.004684157900507474, "phrase": "novel_verification_method"}, {"score": 0.00433645229352341, "phrase": "higher-order_recursion_schemes"}, {"score": 0.00373682045166829, "phrase": "simply_typed_lambda-calculus"}, {"score": 0.0036553070575015344, "phrase": "finite_base_types"}, {"score": 0.0034024277222012597, "phrase": "resource_usage_verification"}, {"score": 0.0032376465741070274, "phrase": "program_verification_problems"}, {"score": 0.0031495640320537252, "phrase": "model_checking_problems"}, {"score": 0.0031150035760241705, "phrase": "recursion_schemes"}, {"score": 0.0029805015010906013, "phrase": "recursion_scheme"}, {"score": 0.0027437235598539904, "phrase": "new_type-based_model-checking_algorithm"}, {"score": 0.002639740960006001, "phrase": "prototype_recursion_scheme_model_checker"}, {"score": 0.002511803988580901, "phrase": "first_implementation"}, {"score": 0.002470547930651519, "phrase": "recursion_scheme_model_checker"}, {"score": 0.002312174113289583, "phrase": "worst-case_time_complexity"}], "paper_keywords": ["Languages", " Verification", " Type systems", " model checking", " higher-order recursion schemes"], "paper_abstract": "We propose a novel verification method for higher-order functional programs based on higher-order model checking, or more precisely, model checking of higher-order recursion schemes (recursion schemes, for short). The most distinguishing feature of our verification method for higher-order programs is that it is sound, complete, and automatic for the simply typed lambda-calculus with recursion and finite base types, and for various program verification problems such as reachability, flow analysis, and resource usage verification. We first show that a variety of program verification problems can be reduced to model checking problems for recursion schemes, by transforming a program into a recursion scheme that generates a tree representing all the interesting possible event sequences of the program. We then develop a new type-based model-checking algorithm for recursion schemes and implement a prototype recursion scheme model checker. To our knowledge, this is the first implementation of a recursion scheme model checker. Experiments show that our model checker is reasonably fast, despite the worst-case time complexity of recursion scheme model checking being hyperexponential in general. Altogether, the results provide a new, promising approach to verification of higher-order functional programs.", "paper_title": "Model Checking Higher-Order Programs", "paper_id": "WOS:000321213700005"}