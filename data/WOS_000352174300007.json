{"auto_keywords": [{"score": 0.03909532426819403, "phrase": "architectural_design_views"}, {"score": 0.00481495049065317, "phrase": "architectural_decisions"}, {"score": 0.004764542405129454, "phrase": "component_view_models"}, {"score": 0.00471465954562773, "phrase": "reusable_architectural_knowledge_transformations"}, {"score": 0.0046164478775379105, "phrase": "architectural_design_decisions"}, {"score": 0.004356741449157895, "phrase": "design_rationale"}, {"score": 0.004288472456976113, "phrase": "architectural_knowledge"}, {"score": 0.003941964605885606, "phrase": "architectural_design"}, {"score": 0.003839510177926892, "phrase": "software_systems"}, {"score": 0.0035477930970463432, "phrase": "tedious_and_time-consuming_task"}, {"score": 0.003330406613112555, "phrase": "systematic_and_automated_support"}, {"score": 0.0029346624184926305, "phrase": "reusable_ak_transformation_language"}, {"score": 0.0028734230458881903, "phrase": "automated_transformation"}, {"score": 0.0028432828877281388, "phrase": "reusable_ak_knowledge"}, {"score": 0.002813457986293993, "phrase": "component-and-connector_models"}, {"score": 0.002613239644974825, "phrase": "reusable_consistency_checking_rules"}, {"score": 0.0024272350606639147, "phrase": "industrial_case_study"}, {"score": 0.0023516185395256505, "phrase": "high_reusability"}, {"score": 0.0021957487795963666, "phrase": "large_numbers"}, {"score": 0.002172701452347454, "phrase": "recurring_decisions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Architectural decisions", " Architectural design", " Architectural knowledge", " AK transformation language", " Consistency checking"], "paper_abstract": "Architectural design decisions (ADDs) have been used in recent years for capturing design rationale and documenting architectural knowledge (AK). However, various architectural design views still provide the most common means for describing and communicating architectural design. The evolution of software systems requires that both ADDs and architectural design views are documented and maintained, which is a tedious and time-consuming task in the long run. Also, in lack of a systematic and automated support for bridging between ADDs and architectural design views, decisions and designs tend to become inconsistent over time. In our proposal, we introduce a reusable AK transformation language for supporting the automated transformation of reusable AK knowledge to component-and-connector models, the architectural design view used most commonly today. In addition, reusable consistency checking rules verify the consistency between decisions and designs. We evaluate our approach in an industrial case study and show that it offers high reusability, provides automation, and can, in principle, deal with large numbers of recurring decisions. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Harmonizing architectural decisions with component view models using reusable architectural knowledge transformations and constraints", "paper_id": "WOS:000352174300007"}