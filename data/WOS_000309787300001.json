{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concept_lattice"}, {"score": 0.0230256462946627, "phrase": "call_graph"}, {"score": 0.01042657069134829, "phrase": "impact_analysis"}, {"score": 0.004688321299229397, "phrase": "software_change"}, {"score": 0.004626262572530872, "phrase": "cia"}, {"score": 0.004544770921520536, "phrase": "key_technique"}, {"score": 0.004484596684703308, "phrase": "unexpected_and_potential_effects"}, {"score": 0.004425215632459868, "phrase": "software_changes"}, {"score": 0.004347256848088215, "phrase": "changed_entity"}, {"score": 0.004270665568018583, "phrase": "current_cia_techniques"}, {"score": 0.00421410521089045, "phrase": "change_effect"}, {"score": 0.004139850082354509, "phrase": "potentially_impacted_entities"}, {"score": 0.00408501512749186, "phrase": "generated_results"}, {"score": 0.003838531755488468, "phrase": "impacted_entities"}, {"score": 0.0035908627899097407, "phrase": "ranked_list"}, {"score": 0.0035590664550919854, "phrase": "potentially_impacted_methods"}, {"score": 0.0035118972210075633, "phrase": "proposed_changed_methods"}, {"score": 0.003434662174045939, "phrase": "impacted_methods"}, {"score": 0.0033442114331500407, "phrase": "hierarchical_feature"}, {"score": 0.0032416819339366712, "phrase": "impact_factor"}, {"score": 0.003032405563826263, "phrase": "case_studies"}, {"score": 0.002572001496778222, "phrase": "predicted_impacted_methods"}, {"score": 0.0025492038831408715, "phrase": "higher_impact_factor_values"}, {"score": 0.002482013330276732, "phrase": "higher_probability"}, {"score": 0.0023010815714140467, "phrase": "jripples_cia_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Formal concept analysis", " Change impact analysis", " Call graph", " Impact factor", " Hierarchical impact results", " Case study"], "paper_abstract": "Software change impact analysis (CIA) is a key technique to identify unexpected and potential effects caused by software changes. Given a changed entity, most of current CIA techniques compute the change effect composed of some potentially impacted entities. The generated results are often of no help to the maintainers in starting the analysis of impacted entities. In this article, we combine concept lattice with call graph together to obtain a ranked list of potentially impacted methods from the proposed changed methods and/or classes. These impacted methods are ranked based on the hierarchical feature of concept lattice, represented by an impact factor, which can then be used to prioritize these methods to be inspected. Case studies based on four real-world programs show that our approach can improve the precision of the impact result without severely decreasing its recall, when compared with results from either concept lattice or call graph used independently. In addition, the predicted impacted methods with higher impact factor values are also shown to have higher probability to be affected by the changes. Our study also shows that our approach is better than the JRipples CIA approach in removing the false-positives, but at the cost of losing more false-negatives and much more time overhead. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Combining concept lattice with call graph for impact analysis", "paper_id": "WOS:000309787300001"}