{"auto_keywords": [{"score": 0.046081391722127746, "phrase": "java"}, {"score": 0.004909416190712331, "phrase": "vm"}, {"score": 0.00481495049065317, "phrase": "complete_and_precise_gc_traces"}, {"score": 0.004342430078306461, "phrase": "detailed_traces"}, {"score": 0.004295459433506106, "phrase": "garbage_collection-related_events"}, {"score": 0.004157561334726201, "phrase": "object_deaths"}, {"score": 0.004090274535243564, "phrase": "pointer_updates"}, {"score": 0.004024072318264299, "phrase": "prior_work"}, {"score": 0.0038737214010638745, "phrase": "merlin_algorithm"}, {"score": 0.00349324530379071, "phrase": "previous_tools"}, {"score": 0.0034180189629740426, "phrase": "method_entries"}, {"score": 0.003032228032253871, "phrase": "program_structure"}, {"score": 0.002855934865505357, "phrase": "jvm_tool_interface"}, {"score": 0.0025334249463305875, "phrase": "complete_traces"}, {"score": 0.0024923577071656014, "phrase": "weak_references"}, {"score": 0.002416913471868518, "phrase": "unsafe"}, {"score": 0.0021987994275190314, "phrase": "general_design_space"}, {"score": 0.00217496508306238, "phrase": "tracing_tools"}, {"score": 0.0021049977753042253, "phrase": "execution_model"}], "paper_keywords": ["Traces", " garbage collection", " Merlin algorithm", " Java"], "paper_abstract": "We present Elephant Tracks (ET), a dynamic program analysis tool for Java that produces detailed traces of garbage collection-related events, including object allocations, object deaths, and pointer updates. Like prior work, our tracing tool is based on the Merlin algorithm [6, 7], but offers several substantial new capabilities. First, it is much more precise than previous tools: it traces method entries and exits and measures time in terms of them, allowing it to place events precisely in the context of the program structure. Second, it is implemented using a combination of JVM Tool Interface (JVMTI) [13] callbacks and bytecode rewriting, and works with any standard JVM. Finally, it produces complete traces, including weak references, events from the Java Native Interface and sun.misc.Unsafe, and VM start up objects. In this paper we also explore the general design space of tracing tools, and carefully define the execution model that the traces represent.", "paper_title": "Elephant Tracks: Portable Production of Complete and Precise GC Traces", "paper_id": "WOS:000329972200011"}