{"auto_keywords": [{"score": 0.04233053722268815, "phrase": "arc-consistency_algorithms"}, {"score": 0.00481495049065317, "phrase": "fine-grained_arc-consistency_algorithm"}, {"score": 0.004777569299319633, "phrase": "non-normalized_constraint_satisfaction_problems._constraint_programming"}, {"score": 0.004630910803911567, "phrase": "numerous_real-life_problems"}, {"score": 0.004453874101119545, "phrase": "constraint_satisfaction_problems"}, {"score": 0.004333973355873714, "phrase": "constraint_programming_techniques"}, {"score": 0.004200874581076468, "phrase": "np-complete_so_filtering_techniques"}, {"score": 0.003931402465972151, "phrase": "search_space"}, {"score": 0.0031721009574803127, "phrase": "support_checks"}, {"score": 0.0030986716686217768, "phrase": "unsupported_values"}, {"score": 0.0026095369186867707, "phrase": "binary_and_non-normalized_constraints"}, {"score": 0.002422890839801611, "phrase": "propagation_phase"}, {"score": 0.0024040357029838774, "phrase": "unnecessary_or_ineffective_checking"}, {"score": 0.002311933249234786, "phrase": "constraint_checks"}, {"score": 0.0022146817879683204, "phrase": "evaluation_section"}, {"score": 0.0021049977753042253, "phrase": "random_and_non-normalized_instances"}], "paper_keywords": ["constraint satisfaction problems", " filtering techniques", " consistency algorithms"], "paper_abstract": "Constraint programming is a powerful software technology for solving numerous real-life problems. Many of these problems can be modeled as Constraint Satisfaction Problems (CSPs) and solved using constraint programming techniques. However, solving a CSP is NP-complete so filtering techniques to reduce the search space are still necessary. Arc-consistency algorithms are widely used to prune the search space. The concept of arc-consistency is bidirectional, i.e., it must be ensured in both directions of the constraint (direct and inverse constraints). Two of the most well-known and frequently used arc-consistency algorithms for filtering CSPs are AC3 and AC4. These algorithms repeatedly carry out revisions and require support checks for identifying and deleting all unsupported values from the domains. Nevertheless, many revisions are ineffective, i.e., they cannot delete any value and consume a lot of checks and time. In this paper, we present AC4-OP, an optimized version of AC4 that manages the binary and non-normalized constraints in only one direction, storing the inverse founded supports for their later evaluation. Thus, it reduces the propagation phase avoiding unnecessary or ineffective checking. The use of AC4-OP reduces the number of constraint checks by 50% while pruning the same search space as AC4. The evaluation section shows the improvement of AC4-OP over AC4, AC6 and AC7 in random and non-normalized instances.", "paper_title": "A FINE-GRAINED ARC-CONSISTENCY ALGORITHM FOR NON-NORMALIZED CONSTRAINT SATISFACTION PROBLEMS", "paper_id": "WOS:000298355400013"}