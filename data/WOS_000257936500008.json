{"auto_keywords": [{"score": 0.04083167311579893, "phrase": "middle_tier"}, {"score": 0.00481495049065317, "phrase": "application_server"}, {"score": 0.004755054742217193, "phrase": "available_components"}, {"score": 0.0047155367844327, "phrase": "three-tier_middleware_architecture"}, {"score": 0.004598933498016774, "phrase": "enterprise-distributed_applications"}, {"score": 0.00421297029755273, "phrase": "front_end"}, {"score": 0.0040238512275833265, "phrase": "user_interactions"}, {"score": 0.0038431888954930083, "phrase": "back_end"}, {"score": 0.0038112201846057445, "phrase": "storage_facilities"}, {"score": 0.003334309053314909, "phrase": "flexible_management"}, {"score": 0.00300351371036355, "phrase": "application-specific_manner"}, {"score": 0.0029291198314113608, "phrase": "availability_measures"}, {"score": 0.0028926147550022607, "phrase": "multitier_system"}, {"score": 0.0028685304140180137, "phrase": "challenging_system_design_problems"}, {"score": 0.0027741761880779535, "phrase": "exactly_once_execution"}, {"score": 0.002751075263422475, "phrase": "client_requests"}, {"score": 0.0027167830773160203, "phrase": "transaction_processing"}, {"score": 0.002477998427152547, "phrase": "middle_and_back-end_tiers"}, {"score": 0.0021766418372878835, "phrase": "performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "widely_deployed_open_source_application_server"}], "paper_keywords": ["application servers", " availability", " Enterprise Java Beans", " fault tolerance", " middleware", " replication", " transactions"], "paper_abstract": "Three-tier middleware architecture is commonly used for hosting enterprise-distributed applications. Typically, the application is decomposed into three layers: front end, middle tier, and back end. Front end (\"Web server\") is responsible for handling user interactions and acts as a client of the middle tier, while back end provides storage facilities for applications. Middle tier (\"Application server\") is usually the place where all computations are performed. One of the benefits of this architecture is that it allows flexible management of a cluster of computers for performance and scalability; further, availability measures, such as replication, can be introduced in each tier in an application-specific manner. However, incorporation of availability measures in a multitier system poses challenging system design problems of integrating open, nonproprietary solutions to transparent failover, exactly once execution of client requests, nonblocking transaction processing, and an ability to work with clusters. This paper describes how replication for availability can be incorporated within the middle and back-end tiers, meeting all these challenges. This paper develops an approach that requires enhancements to the middle tier only for supporting replication of both the middleware back-end tiers. The design, implementation, and performance evaluation of such a middle-tier-based replication scheme for multidatabase transactions on a widely deployed open source application server (JBoss) are presented.", "paper_title": "Enhancing an application server to support available components", "paper_id": "WOS:000257936500008"}