{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gapped_string_kernels"}, {"score": 0.043967328978991624, "phrase": "suffix_kernel_technique"}, {"score": 0.015553775575606972, "phrase": "suffix_kernel"}, {"score": 0.004579780586951551, "phrase": "p-length_gap-weighted_kernel"}, {"score": 0.004466519142879166, "phrase": "trie-based_approach"}, {"score": 0.004371660146981191, "phrase": "range_sum_technique"}, {"score": 0.004278807087784626, "phrase": "better_performance"}, {"score": 0.004143196873246147, "phrase": "efficient_approach"}, {"score": 0.003940706575253453, "phrase": "dynamic_programming_algorithms"}, {"score": 0.0037213333316218522, "phrase": "gap_penalty_lambda"}, {"score": 0.003451766520526601, "phrase": "new_string_kernels"}, {"score": 0.003306559295382181, "phrase": "-length_and_p-length_match-weighted_kernels"}, {"score": 0.0031335830806256777, "phrase": "-length_match-weighted_kernel"}, {"score": 0.0027151607914592552, "phrase": "-length_and_p-length_kernels"}, {"score": 0.00266693888510356, "phrase": "p-length_match-weighted_kernel"}, {"score": 0.002610198789888055, "phrase": "bit-parallel_technique"}, {"score": 0.0022777800735119405, "phrase": "longest_matching_subsequence"}, {"score": 0.0022213218042340752, "phrase": "empirical_results"}, {"score": 0.0021662599012740127, "phrase": "important_and_useful_approach"}, {"score": 0.0021507795710951384, "phrase": "computing_gapped_string_kernels"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["kernel methods", " string kernels", " gapped string kernels", " suffix kernel", " bit-parallel technique"], "paper_abstract": "In recent years, several approaches to computing the value of p-length gap-weighted kernel have been presented, such as trie-based approach, suffix kernel, and range sum technique. Although other approaches can achieve better performance in some cases, suffix kernel technique is still an efficient approach in this context. In this paper, we present a series of dynamic programming algorithms based on suffix kernel to compute gapped string kernels. Given strings s and t, and a gap penalty lambda, all-length gap-weighted kernel can be calculated in time O(vertical bar s vertical bar vertical bar t vertical bar) with our algorithms. Moreover, some new string kernels belonging to the family of gapped string kernels are presented, including all-length and p-length match-weighted kernels, and their variants. Based on the suffix kernel technique, we can compute all-length match-weighted kernel in time O(vertical bar s vertical bar vertical bar t vertical bar), and then p-length kernel in time O(p vertical bar s vertical bar vertical bar t vertical bar) using the relationship between all-length and p-length kernels. Furthermore, for p-length match-weighted kernel and its variant, a bit-parallel technique is used to reduce the complexity from O(p vertical bar s vertical bar vertical bar t vertical bar) to O([pk/w]vertical bar s vertical bar vertical bar t vertical bar), where is, is the word size of the machine (e.g. 32 or 64 in practice) and k is determined by the longest matching subsequence of two strings s and t. The empirical results suggest that the suffix kernel technique is an important and useful approach to computing gapped string kernels. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Efficient computations of gapped string kernels based on suffix kernel", "paper_id": "WOS:000253663800052"}