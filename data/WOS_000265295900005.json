{"auto_keywords": [{"score": 0.04308614909448945, "phrase": "component_directories"}, {"score": 0.00481495049065317, "phrase": "efficient_software_component_directories"}, {"score": 0.003916098498242888, "phrase": "dynamic_component_assembly_evolution"}, {"score": 0.003726533059542558, "phrase": "new_functionalities"}, {"score": 0.003516898780234098, "phrase": "new_requirements"}, {"score": 0.0033743949483348626, "phrase": "semi-automatic_evolution_processes"}, {"score": 0.0032376465741070274, "phrase": "theoretical_basis"}, {"score": 0.0029805015010906013, "phrase": "formal_concept_analysis"}, {"score": 0.002883439044844259, "phrase": "syntactic_description"}, {"score": 0.0023249757987087055, "phrase": "external_descriptions"}, {"score": 0.0021401625519713577, "phrase": "automatic_component_assembly"}, {"score": 0.0021049977753042253, "phrase": "automatic_component_substitution"}], "paper_keywords": ["component-based software engineering", " component directories", " formal concept analysis", " component classification"], "paper_abstract": "Component directories index components by the services they offer thus enabling us to rapidly access them. Component directories are also the cornerstone of dynamic component assembly evolution when components fail or when new functionalities have to be added to meet new requirements. This work targets semi-automatic evolution processes. It states the theoretical basis of on-the-fly construction of component directories using formal concept analysis based on the syntactic description of the services that components require or provide. In these directories, components are more clearly organised and new abstract and highly reusable component external descriptions suggested. Moreover, this organisation speeds up both automatic component assembly and automatic component substitution.", "paper_title": "Formal concept analysis-based service classification to dynamically build efficient software component directories", "paper_id": "WOS:000265295900005"}