{"auto_keywords": [{"score": 0.04549508303230704, "phrase": "n_points"}, {"score": 0.00481495049065317, "phrase": "minimum_number"}, {"score": 0.004105558123159003, "phrase": "smallest_number_l"}, {"score": 0.00405735420159564, "phrase": "straight_lines"}, {"score": 0.003893854740366981, "phrase": "s."}, {"score": 0.00314708280192844, "phrase": "algebraic_computation_tree_model"}, {"score": 0.002142696637011647, "phrase": "time_complexity"}, {"score": 0.0021049977753042253, "phrase": "exact_algorithm"}], "paper_keywords": [""], "paper_abstract": "We consider the minimum line covering problem: given a set S of n points in the plane, we want to find the smallest number l of straight lines needed to cover all n points in S. We show that this problem can be solved in O(n log l) time if l is an element of O(log(1-is an element of) n), and that this is optimal in the algebraic computation tree model (we show that the Omega(n log l) lower bound holds for all values of l up to O(root n)). Furthermore, a O(log l)-factor approximation can be found within the same O(n log I) time bound if l is an element of O((4)root n). For the case when l is an element of Omega(log n) we suggest how to improve the time complexity of the exact algorithm by a factor exponential in l.", "paper_title": "Covering a set of points with a minimum number of lines", "paper_id": "WOS:000238119900004"}