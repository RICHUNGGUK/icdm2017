{"auto_keywords": [{"score": 0.02343112821859271, "phrase": "xml"}, {"score": 0.00481495049065317, "phrase": "network_interface"}, {"score": 0.0047468516620285525, "phrase": "multithreaded_web_applications"}, {"score": 0.004613516457919661, "phrase": "realistic_software_systems"}, {"score": 0.004296264970612285, "phrase": "single_global_invariants"}, {"score": 0.0042354707960660706, "phrase": "complete_system_state"}, {"score": 0.004000741805312148, "phrase": "component_proofs"}, {"score": 0.0035949949979695063, "phrase": "standard_software_development"}, {"score": 0.003395640013786862, "phrase": "modular_proof_techniques"}, {"score": 0.00332375606483146, "phrase": "coq_proof_assistant"}, {"score": 0.0031393948330209224, "phrase": "first_modular_verification"}, {"score": 0.0027413748388534025, "phrase": "nonblocking_api"}, {"score": 0.002683304054823427, "phrase": "tcp_networking_streams"}, {"score": 0.002326304140277375, "phrase": "cooperative_threading_library"}, {"score": 0.0022287497627555895, "phrase": "domain-specific_language"}], "paper_keywords": ["modular program verification", " proof assistants", " thread libraries", " Internet servers", " domain-specific languages"], "paper_abstract": "Many verifications of realistic software systems are monolithic, in the sense that they define single global invariants over complete system state. More modular proof techniques promise to support reuse of component proofs and even reduce the effort required to verify one concrete system, just as modularity simplifies standard software development. This paper reports on one case study applying modular proof techniques in the Coq proof assistant. To our knowledge, it is the first modular verification certifying a system that combines infrastructure with an application of interest to end users. We assume a nonblocking API for managing TCP networking streams, and on top of that we work our way up to certifying multithreaded, database-backed Web applications. Key verified components include a cooperative threading library and an implementation of a domain-specific language for XML processing. We have deployed our case-study system on mobile robots, where it interfaces with off-the-shelf components for sensing, actuation, and control.", "paper_title": "From Network Interface to Multithreaded Web Applications", "paper_id": "WOS:000354800500049"}