{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "grouper"}, {"score": 0.004412000844879264, "phrase": "large_triangle_meshes"}, {"score": 0.004325208730208653, "phrase": "recently_published_squad_representation"}, {"score": 0.004042635935882651, "phrase": "fixed-size_records"}, {"score": 0.003869670975688832, "phrase": "squad"}, {"score": 0.0036893794227117194, "phrase": "new_connectivity_representation"}, {"score": 0.003517458289610994, "phrase": "coherent_order"}, {"score": 0.00347574024760684, "phrase": "memory-efficient_sequential_stream_processing"}, {"score": 0.0034073030552032304, "phrase": "linear-time_construction_algorithm"}, {"score": 0.003287482882222731, "phrase": "small_memory_footprint"}, {"score": 0.0032355864829403413, "phrase": "initial_ordering"}, {"score": 0.002917604283241353, "phrase": "well-known_np-hard_optimization_problem"}, {"score": 0.002837451022172113, "phrase": "effective_heuristic_solution"}, {"score": 0.002705121052747945, "phrase": "triangle_mesh_data_structure"}, {"score": 0.00267301171407926, "phrase": "direct_access"}, {"score": 0.0023253461255420436, "phrase": "amortized_constant_time"}, {"score": 0.0022886031992739126, "phrase": "data-parallel_processing"}, {"score": 0.0022434880661725493, "phrase": "instant_partitioning"}, {"score": 0.002225691463551672, "phrase": "fast_transmission"}, {"score": 0.002208035721125305, "phrase": "distributed_processing"}, {"score": 0.002164505365535068, "phrase": "efficient_out-of-core_access"}, {"score": 0.0021049977753042253, "phrase": "performance_benefits"}], "paper_keywords": ["Mesh compression", " mesh data structures", " random access", " out-of-core algorithms", " large meshes"], "paper_abstract": "We present Grouper: an all-in-one compact file format, random-access data structure, and streamable representation for large triangle meshes. Similarly to the recently published SQuad representation, Grouper represents the geometry and connectivity of a mesh by grouping vertices and triangles into fixed-size records, most of which store two adjacent triangles and a shared vertex. Unlike SQuad, however, Grouper interleaves geometry with connectivity and uses a new connectivity representation to ensure that vertices and triangles can be stored in a coherent order that enables memory-efficient sequential stream processing. We present a linear-time construction algorithm that allows streaming out Grouper meshes using a small memory footprint while preserving the initial ordering of vertices. As a part of this construction, we show how the problem of assigning vertices and triangles to groups reduces to a well-known NP-hard optimization problem, and present a simple yet effective heuristic solution that performs well in practice. Our array-based Grouper representation also doubles as a triangle mesh data structure that allows direct access to vertices and triangles. Storing only about two integer references per triangle-i.e., less than the three vertex references stored with each triangle in a conventional indexed mesh format-Grouper answers both incidence and adjacency queries in amortized constant time. Our compact representation enables data-parallel processing on multicore computers, instant partitioning and fast transmission for distributed processing, as well as efficient out-of-core access. We demonstrate the versatility and performance benefits of Grouper using a suite of example meshes and processing kernels.", "paper_title": "Grouper: A Compact, Streamable Triangle Mesh Data Structure", "paper_id": "WOS:000327960700009"}