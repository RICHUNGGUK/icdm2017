{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "real-time_properties"}, {"score": 0.004613175917207636, "phrase": "software_systems"}, {"score": 0.004216434794603139, "phrase": "concurrent_systems"}, {"score": 0.004039639718055365, "phrase": "effective_and_automated_veri"}, {"score": 0.003954030683259778, "phrase": "concurrent_software"}, {"score": 0.0038868464660354626, "phrase": "important_topic"}, {"score": 0.0038207994186834015, "phrase": "model_checking"}, {"score": 0.0037719988989298983, "phrase": "popular_automated_veri"}, {"score": 0.0035676056286816915, "phrase": "software_system"}, {"score": 0.003388745581055085, "phrase": "model-checking_methodology"}, {"score": 0.003316884515934182, "phrase": "timed_concurrent_constraint_programming_language_tccp"}, {"score": 0.0031505544969981096, "phrase": "model-checking_tools"}, {"score": 0.002904040426340639, "phrase": "timed_extension"}, {"score": 0.0028669153591624696, "phrase": "tccp_semantics"}, {"score": 0.0026199603775129516, "phrase": "real-time_extension"}, {"score": 0.002586457551025025, "phrase": "linear_time"}, {"score": 0.002575385171755899, "phrase": "temporal_logic"}, {"score": 0.002477837342313456, "phrase": "software_properties"}, {"score": 0.0023839754995935184, "phrase": "tccp_framework"}, {"score": 0.0023233800372985686, "phrase": "minor_modi"}, {"score": 0.002283839204519042, "phrase": "tccp_model_checker"}, {"score": 0.0021049977753042253, "phrase": "improved_ability"}], "paper_keywords": ["timed concurrent constraint paradigm", " model checking", " temporal logic"], "paper_abstract": "The size and complexity of software systems are continuously increasing, which makes them difficult and labor-intensive to develop, test and evolve. Since concurrent systems are particularly hard to verify by hand, achieving effective and automated veri. cation tools for concurrent software has become an important topic of research. Model checking is a popular automated veri. cation technology which allows us to determine the properties of a software system and enables more thorough and less costly testing. In this work, we improve the model-checking methodology previously developed for the timed concurrent constraint programming language tccp so that more sophisticated, real-time properties can be verified by the model-checking tools. The contributions of the paper are twofold. On the one hand, we de. ne a timed extension of the tccp semantics which considers an explicit, discrete notion of the passing of time. On the other hand, we consistently de. ne a real-time extension of the linear time temporal logic that is used to specify and analyze the software properties in tccp. Both extensions fit into the tccp framework perfectly in such a way that with minor modi. cations any tccp model checker can be reused to analyze real-time properties. Finally, by means of an example, we illustrate the improved ability to check real-time properties.", "paper_title": "Verifying real-time properties of tccp programs", "paper_id": "WOS:000243998500005"}