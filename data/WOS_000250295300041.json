{"auto_keywords": [{"score": 0.03465713624785701, "phrase": "data_discretization"}, {"score": 0.00481495049065317, "phrase": "classification_rule"}, {"score": 0.00478218760286811, "phrase": "software_diagnosis"}, {"score": 0.004749646583168342, "phrase": "modified_mepa._defective_software_modules"}, {"score": 0.004653339900995785, "phrase": "development_and_maintenance_costs"}, {"score": 0.004590217765551337, "phrase": "customer_satisfaction"}, {"score": 0.004558977045730675, "phrase": "effective_defect_prediction_models"}, {"score": 0.00448179813172021, "phrase": "quality_assurance_activities"}, {"score": 0.0044512920090463105, "phrase": "defect-prone_modules"}, {"score": 0.00439089854433895, "phrase": "software_quality"}, {"score": 0.0042725481832853315, "phrase": "real-world_databases"}, {"score": 0.004129067429043414, "phrase": "inconsistent_data"}, {"score": 0.0040591367766929344, "phrase": "random_error"}, {"score": 0.003990385737207714, "phrase": "measured_variable"}, {"score": 0.003963283641319011, "phrase": "han"}, {"score": 0.0037140731069193896, "phrase": "san_francisco"}, {"score": 0.003688773272422118, "phrase": "morgan_kaufmann_publishers"}, {"score": 0.0036386875640595944, "phrase": "decision_trees"}, {"score": 0.003516417950483685, "phrase": "noisy_or_outlier_data"}, {"score": 0.0034686643139273934, "phrase": "data_preprocessing_steps"}, {"score": 0.0033635683594830158, "phrase": "data_preprocessing"}, {"score": 0.0033406481167452436, "phrase": "concept_hierarchies"}, {"score": 0.0030460403366412126, "phrase": "discrete_features"}, {"score": 0.0029235593748707495, "phrase": "continuous_ones"}, {"score": 0.0028838340016375157, "phrase": "hussain"}, {"score": 0.0026747708876640377, "phrase": "data_mining_and_knowledge_discovery"}, {"score": 0.0025236349164549877, "phrase": "modified_minimize_entropy_principle_approach"}, {"score": 0.0024893297856666808, "phrase": "modified_mepa_system"}, {"score": 0.0024055884143050037, "phrase": "classification_tree_model"}, {"score": 0.0022618732192713235, "phrase": "prototype_system"}, {"score": 0.002246443296542436, "phrase": "discrete_data"}, {"score": 0.0022007808283071133, "phrase": "error_rate"}, {"score": 0.002141334979696276, "phrase": "proposed_approach"}], "paper_keywords": ["software diagnosis", " minimize entropy", " C4.5", " data discretization"], "paper_abstract": "Defective software modules cause software failures, increase development and maintenance costs, and reduce customer satisfaction. Effective defect prediction models can help developers focus quality assurance activities on defect-prone modules and thus improve software quality by using resources more efficiently. In real-world databases are highly susceptible to noisy, missing, and inconsistent data. Noise is a random error or variance in a measured variable [Han, J., & Kamber, M. (2001). Data Mining: Concepts and Techniques, San Francisco: Morgan Kaufmann Publishers]. When decision trees are built, many of the branches may reflect noisy or outlier data. Therefore, data preprocessing steps are very important. There are many methods for data preprocessing. Concept hierarchies are a form of data discretization that can use for data preprocessing. Data discretization has many advantages, such as data can be reduced and simplified. Using discrete features are usually more compact, shorter and more accurate than using continuous ones [Liu, H., Hussain, F., Tan, C.L., & Dash, M. (2002). Discretization: An enabling technique. Data Mining and Knowledge Discovery, 6(4), 393-423]. In this paper, we propose a modified minimize entropy principle approach and develop a modified MEPA system to partition the data, and then build the classification tree model. For verification, two NASA software projects KC2 and JM1 are applied to illustrate our proposed method. We establish a prototype system to discrete data from these projects. The error rate and number of rules show that the proposed approach is both better than other methods. (c) 2006 Elsevier Ltd. All rights reserved.", "paper_title": "Extracting classification rule of software diagnosis using modified MEPA", "paper_id": "WOS:000250295300041"}