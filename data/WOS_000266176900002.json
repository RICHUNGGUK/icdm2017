{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_patterns"}, {"score": 0.014981767887395641, "phrase": "design_pattern_evolution"}, {"score": 0.013312044490570144, "phrase": "possible_evolutions"}, {"score": 0.013138248986580267, "phrase": "design_pattern"}, {"score": 0.0047306078475683865, "phrase": "flexible_designs"}, {"score": 0.00436890075128947, "phrase": "modeling_elements"}, {"score": 0.003894512634265439, "phrase": "missing_part"}, {"score": 0.0038431888954930083, "phrase": "evolution_process"}, {"score": 0.003775803846431323, "phrase": "inconsistent_evolution"}, {"score": 0.003742554019950264, "phrase": "pattern_instances"}, {"score": 0.0034868462688262864, "phrase": "undetected_design_errors"}, {"score": 0.0032485526269852606, "phrase": "service-oriented_architecture"}, {"score": 0.003149471116658739, "phrase": "two-level_transformations"}, {"score": 0.0028826733506942554, "phrase": "xslt_transformations"}, {"score": 0.0028195727965553367, "phrase": "unified_modeling_language"}, {"score": 0.002794735123969152, "phrase": "uml"}, {"score": 0.002733539375462443, "phrase": "design_pattern_application"}, {"score": 0.002697474061842142, "phrase": "evolved_uml_model"}, {"score": 0.0025806490053534316, "phrase": "uml_models"}, {"score": 0.0025241429061867633, "phrase": "xml_metadata_interchange_format"}, {"score": 0.0023724065150232897, "phrase": "evolution_results"}, {"score": 0.002341094670523097, "phrase": "semantic_web_checker"}, {"score": 0.0022999859758286423, "phrase": "java_theorem_prover"}, {"score": 0.0022696277881969896, "phrase": "case_study"}, {"score": 0.0022396694076443446, "phrase": "large_real-world_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["design pattern evolution", " model transformation", " semantic web", " UML", " XSLT", " XMI", " SOA"], "paper_abstract": "Design patterns document flexible designs that may evolve over time. Design pattern evolution typically involves the addition or removal of a group of modeling elements, such as classes, attributes, operations, and relationships. However, the possible evolutions of each design pattern are often not explicitly documented. Missing part of the evolution process may result in inconsistent evolution. Pattern instances may interact with each other making the evolution of design patterns more error-prone. Undetected design errors and inconsistencies may cause failures of systems. In this paper, we propose a service-oriented architecture for design pattern evolution and analysis based on two-level transformations, thus making the possible evolutions of each design pattern explicit. In addition, we automate the evolution processes as XSLT transformations that can transform the unified modeling language (UML) model of a design pattern application into the evolved UML model of the pattern. Both the original and evolved UML models are represented in the XML Metadata Interchange format to facilitate the transformations. Furthermore, we check the consistency of the evolution results using the semantic web checker based on the Java Theorem Prover. A case study on a large real-world system is presented to illustrate and evaluate our approach. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "XSLT-based evolutions and analyses of design patterns", "paper_id": "WOS:000266176900002"}