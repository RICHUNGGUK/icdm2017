{"auto_keywords": [{"score": 0.032891514487138646, "phrase": "inferred_bounds"}, {"score": 0.00481495049065317, "phrase": "abstract_interpretation"}, {"score": 0.004597244847332915, "phrase": "previous_paper"}, {"score": 0.004477270137801732, "phrase": "abstract_interpretation-based_static_analysis"}, {"score": 0.004303127794432684, "phrase": "memory_consumption"}, {"score": 0.004218602458288531, "phrase": "functional_language"}, {"score": 0.0036958398682001015, "phrase": "heap_regions"}, {"score": 0.003459191419478298, "phrase": "garbage_collector"}, {"score": 0.0032591491777773035, "phrase": "important_property"}, {"score": 0.0027803070408286158, "phrase": "prior_inferred_bound"}, {"score": 0.002689746491842271, "phrase": "tighter_and_tighter_bounds"}, {"score": 0.0023096222276192194, "phrase": "case_studies"}, {"score": 0.002234358539133758, "phrase": "reductivity_property"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Resource analysis", " Abstract interpretation", " Functional languages", " Regions"], "paper_abstract": "In a previous paper we presented an abstract interpretation-based static analysis for inferring heap and stack memory consumption in a functional language. The language, called Safe, is eager and first-order, and its memory management system is based on heap regions instead of the more conventional approach of having a garbage collector. In this paper we concentrate on an important property of our analysis, namely that the inferred bounds are reductive under certain reasonable conditions. This means that by iterating the analysis using as input the prior inferred bound, we can get tighter and tighter bounds, all of them correct. In some cases, even the exact bound is obtained. The paper includes several examples and case studies illustrating in detail the reductivity property of the inferred bounds. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Space consumption analysis by abstract interpretation: Reductivity properties", "paper_id": "WOS:000368556800005"}