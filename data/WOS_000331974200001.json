{"auto_keywords": [{"score": 0.0465247817138105, "phrase": "full_search_algorithm"}, {"score": 0.00481495049065317, "phrase": "full_search_motion_estimation_algorithm"}, {"score": 0.004550669123303854, "phrase": "efficient_method"}, {"score": 0.004412654209742722, "phrase": "motion_estimation"}, {"score": 0.004106612344123407, "phrase": "massive_parallelism"}, {"score": 0.0040438338011467845, "phrase": "current_gpgpu_devices"}, {"score": 0.003982011128052839, "phrase": "parallelism_potential"}, {"score": 0.0037632749713937637, "phrase": "video_codecs_implementation"}, {"score": 0.0035021127041237887, "phrase": "comparison_reasons"}, {"score": 0.0033957904376127187, "phrase": "distinct_programming_paradigms"}, {"score": 0.003361069456060196, "phrase": "distinct_underlying_hardware_architectures"}, {"score": 0.00325901518290063, "phrase": "sequential_solution"}, {"score": 0.0032256881625734777, "phrase": "general-purpose_processor"}, {"score": 0.002955782731675529, "phrase": "openmp_library"}, {"score": 0.00266693888510356, "phrase": "cuda-based_solution"}, {"score": 0.0025202582748972122, "phrase": "theoretical_model"}, {"score": 0.002494466951433885, "phrase": "different_search_areas"}, {"score": 0.002456272788591051, "phrase": "full_search_motion_estimation"}, {"score": 0.002297472683488018, "phrase": "mpi"}, {"score": 0.002250601866422547, "phrase": "sequential_implementations"}], "paper_keywords": ["Motion estimation", " Block matching", " GPU", " CUDA", " OpenMP", " MPI"], "paper_abstract": "This work presents an efficient method to map the Full Search algorithm for Motion Estimation (ME) onto General Purpose Graphic Processing Unit (GPGPU) architectures using Compute Unified Device Architecture (CUDA) programming model. Our method jointly exploits the massive parallelism available in current GPGPU devices and the parallelism potential of Full Search algorithm. Our main goal is to evaluate the feasibility of video codecs implementation using GPGPUs and its advantages and drawbacks compared to other platforms. Therefore, for comparison reasons, three solutions were developed using distinct programming paradigms for distinct underlying hardware architectures: (i) a sequential solution for general-purpose processor (GPP); (ii) a parallel solution for multi-core GPP using OpenMP library; (iii) a distributed solution for cluster/grid machines using Message Passing Interface (MPI) library. The CUDA-based solution for GPGPUs achieves speed-up compatible to the indicated by the theoretical model for different search areas. Our GPGPU Full Search Motion Estimation provides 2x, 20x and 1664x speed-up when compared to MPI, OpenMP and sequential implementations, respectively. Compared to state-of-the-art, our solution reaches up to 17x speed-up.", "paper_title": "Parallelization of Full Search Motion Estimation Algorithm for Parallel and Distributed Platforms", "paper_id": "WOS:000331974200001"}