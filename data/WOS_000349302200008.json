{"auto_keywords": [{"score": 0.04610058521174456, "phrase": "different_ips"}, {"score": 0.03658241758566548, "phrase": "memory_accesses"}, {"score": 0.0281913281094062, "phrase": "fcfs"}, {"score": 0.00481495049065317, "phrase": "system-level_performance"}, {"score": 0.004440520324043846, "phrase": "concurrent_memory_accesses"}, {"score": 0.004378958522416482, "phrase": "memory_systems"}, {"score": 0.00428222231579898, "phrase": "future_mpsoc_design"}, {"score": 0.004187614134377688, "phrase": "system-level_design"}, {"score": 0.0041642934633917454, "phrase": "mpsoc"}, {"score": 0.004072275820209647, "phrase": "memory_access_time"}, {"score": 0.0040157986370637465, "phrase": "persisting_memory_wall_problem"}, {"score": 0.003916098498242888, "phrase": "longer_ip_stall_time"}, {"score": 0.003861778893236681, "phrase": "unnecessary_leakage_waste"}, {"score": 0.0036723696468167126, "phrase": "memory_wall_problem"}, {"score": 0.0034245614958572012, "phrase": "fairness_guarantee"}, {"score": 0.0033864888703414903, "phrase": "ip_leakage_waste"}, {"score": 0.0033582114955377405, "phrase": "long_memory_access"}, {"score": 0.003311604528903634, "phrase": "memory_access-aware_power-gating_policy"}, {"score": 0.0030794433253250476, "phrase": "response_time"}, {"score": 0.0030366934568888514, "phrase": "aggressively_power"}, {"score": 0.0029861739212143526, "phrase": "memory_request"}, {"score": 0.0029447150254434842, "phrase": "incorrect_power-gating_decisions"}, {"score": 0.002903830052664078, "phrase": "access-aware_power-gating_policy"}, {"score": 0.0028316582436089064, "phrase": "predicted_memory_latency"}, {"score": 0.0028080006828162156, "phrase": "individual_ip"}, {"score": 0.0027690086059100495, "phrase": "experimental_results"}, {"score": 0.0027382040767844093, "phrase": "proposed_hms_memory"}, {"score": 0.002707741309851526, "phrase": "system_throughput"}, {"score": 0.002670138110584137, "phrase": "first-come-first-serve"}, {"score": 0.002603758927691463, "phrase": "first-ready_first-come-first-serve"}, {"score": 0.002531933388815139, "phrase": "mobile_phones"}, {"score": 0.0024759041425281613, "phrase": "hms"}, {"score": 0.0023874685210506274, "phrase": "frfcfs."}, {"score": 0.002354302193867031, "phrase": "leakage_optimization"}, {"score": 0.002282945386810049, "phrase": "performance_penalty"}, {"score": 0.002251227801482381, "phrase": "conventional_timeout-based_power_gating"}, {"score": 0.002195240062575067, "phrase": "memory_access_orders"}, {"score": 0.0021708046703940026, "phrase": "memory_response_time_variation"}, {"score": 0.0021227451058653084, "phrase": "conventional_timeout_power_gating"}, {"score": 0.0021049977753042253, "phrase": "proposed_memory_access-aware_power_gating"}], "paper_keywords": ["Memory", " Performance", " Power", " MPSoC", " memory scheduling", " power gating"], "paper_abstract": "As the number of IPs in a multimedia Multi-Processor System-on-Chip (MPSoC) continues to increase, concurrent memory accesses from different IPs increasingly stress memory systems, which presents both opportunities and challenges for future MPSoC design. The impact of such requirements on the system-level design for MPSoC is twofold. First, contention among IPs prolongs memory access time, which exacerbates the persisting memory wall problem. Second, longer memory accesses lead to longer IP stall time, which results in unnecessary leakage waste. In this article, we propose two memory access-aware system-level design approaches for performance and leakage optimization. To alleviate the memory wall problem, we propose a Hierarchical Memory Scheduling (HMS) policy that schedules memory requests from the same IP and application consecutively to reduce interference among memory accesses from different IPs with a fairness guarantee. To reduce IP leakage waste due to long memory access, we propose a memory access-aware power-gating policy. A straightforward power-gating approach is to power gate an IP when it needs to fetch data from memory. However, due to the response time variation among memory accesses, aggressively power gating an IP whenever a memory request occurs may result in incorrect power-gating decisions. The proposed memory access-aware power-gating policy makes these decisions judiciously, based on the predicted memory latency of an individual IP and its energy breakeven time. The experimental results show that the proposed HMS memory scheduling policy improves system throughput by 42% compared to First-Come-First-Serve (FCFS) and by 21% compared to First-Ready First-Come-First-Serve (FR-FCFS) on an MPSoC for mobile phones. For the improvement of fairness, HMS improves fairness by 1.52x compared to FCFS and by 1.23x compared to FRFCFS. In the aspect of leakage optimization, our memory access-aware power-gating mechanism improves energy savings by 3.88x and reduces the performance penalty by 70% compared to conventional timeout-based power gating. We further demonstrate that our HMS memory scheduler can regulate memory access orders, thereby reducing memory response time variation. This leads to more accurate power-down decisions for both conventional timeout power gating and the proposed memory access-aware power gating.", "paper_title": "System-Level Performance and Power Optimization for MPSoC: A Memory Access-Aware Approach", "paper_id": "WOS:000349302200008"}