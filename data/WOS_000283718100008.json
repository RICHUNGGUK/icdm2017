{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "static_ip_router_tables"}, {"score": 0.00456020621016909, "phrase": "method-recursive_partitioning-to_partition_a_static_ip_router_table"}, {"score": 0.003831801113154043, "phrase": "multibit_trie"}, {"score": 0.0037087324991876727, "phrase": "hybrid_shape"}, {"score": 0.003219368413618912, "phrase": "router_table"}, {"score": 0.0030157628075954588, "phrase": "total_number"}, {"score": 0.00295078850927459, "phrase": "memory_accesses"}, {"score": 0.002646267286675984, "phrase": "recursive_partitioning"}, {"score": 0.0024519545383399773, "phrase": "popular_front-end_table_method"}, {"score": 0.002151388538895855, "phrase": "front-end_method"}], "paper_keywords": ["Packet forwarding", " longest prefix matching", " router table partitioning"], "paper_abstract": "We propose a method-recursive partitioning-to partition a static IP router table so that when each partition is represented using a base structure, such as a multibit trie or a hybrid shape shifting trie, there is a reduction in both the total memory required for the router table as well as in the total number of memory accesses needed to search the table. The efficacy of recursive partitioning is compared to that of the popular front-end table method to partition IP router tables. Our proposed recursive partitioning method outperformed the front-end method of all our test sets.", "paper_title": "Recursively Partitioned Static IP Router Tables", "paper_id": "WOS:000283718100008"}