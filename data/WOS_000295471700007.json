{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "root_parallelization"}, {"score": 0.03430340038332922, "phrase": "average_selection"}, {"score": 0.004624751696958501, "phrase": "parallelizing_monte_carlo"}, {"score": 0.004578382275810468, "phrase": "tree_search"}, {"score": 0.0038964032225585117, "phrase": "computer_go_programs"}, {"score": 0.0030895394261534776, "phrase": "majority_voting"}, {"score": 0.0029672941061574375, "phrase": "starting_code_base"}, {"score": 0.0028498718992429825, "phrase": "fuego"}, {"score": 0.0026554236621262515, "phrase": "best_programs"}, {"score": 0.0021049977753042253, "phrase": "extensive_analysis"}], "paper_keywords": ["Computer Go", " majority voting", " Monte Carlo tree search (MCTS)", " root parallelization", " tree parallelization"], "paper_abstract": "Parallelizing Monte Carlo tree search (MCTS) has been considered to be a way to improve the strength of Computer Go programs. In this paper, we analyze the performance of two root parallelization methods: the standard strategy based on average selection and our new strategy based on majority voting. As a starting code base, we used Fuego, which is one of the best programs available. Our experimental results with 64 central processing unit (CPU) cores show that majority voting outperforms average selection. Additionally, we show through an extensive analysis that root parallelization has limitations.", "paper_title": "Evaluating Root Parallelization in Go", "paper_id": "WOS:000295471700007"}