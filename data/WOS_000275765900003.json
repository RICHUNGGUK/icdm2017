{"auto_keywords": [{"score": 0.04392623154267516, "phrase": "security_patterns"}, {"score": 0.00481495049065317, "phrase": "security_pattern_compositions"}, {"score": 0.004768104290288521, "phrase": "software_security"}, {"score": 0.0046986841646790315, "phrase": "critically_important_issue"}, {"score": 0.004652963867892925, "phrase": "software_development"}, {"score": 0.004474468584252318, "phrase": "software_systems"}, {"score": 0.004387793971765289, "phrase": "security_problems"}, {"score": 0.004323886831151445, "phrase": "large_software_system_design"}, {"score": 0.004260906498835763, "phrase": "good_security_solutions"}, {"score": 0.0041174821422410544, "phrase": "expert_solutions"}, {"score": 0.004077394032903726, "phrase": "common_security_problems"}, {"score": 0.004017989546119125, "phrase": "best_practices"}, {"score": 0.003978866233891427, "phrase": "secure_software_design"}, {"score": 0.003863758357292741, "phrase": "security_pattern"}, {"score": 0.0038074544783102226, "phrase": "good_design_guideline"}, {"score": 0.0036086158606236365, "phrase": "composition_errors"}, {"score": 0.003192312493850036, "phrase": "automated_verification"}, {"score": 0.0029807934480637855, "phrase": "behavioral_aspect"}, {"score": 0.0029229785582000354, "phrase": "ccs"}, {"score": 0.002729246328390722, "phrase": "sequence_diagram"}, {"score": 0.002498873893632724, "phrase": "model_checker"}, {"score": 0.002321787726770895, "phrase": "design_stage"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design pattern", " Security", " Logics", " Process algebra", " Model checking"], "paper_abstract": "Software security becomes a critically important issue for software development when more and more malicious attacks explore the security holes in software systems. To avoid security problems, a large software system design may reuse good security solutions by applying security patterns. Security patterns document expert solutions to common security problems and capture best practices on secure software design and development. Although each security pattern describes a good design guideline, the compositions of these security patterns may be inconsistent and encounter problems and flaws. Therefore, the compositions of security patterns may be even insecure. In this paper, we present an approach to automated verification of the compositions of security patterns by model checking. We formally define the behavioral aspect of security patterns in CCS through their sequence diagrams. We also prove the faithfulness of the transformation from a sequence diagram to its CCS representation. In this way, the properties of the security patterns can be checked by a model checker when they are composed. Composition errors and problems can be discovered early in the design stage. We also use two case studies to illustrate our approach and show its capability to detect composition errors. (c) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Automated verification of security pattern compositions", "paper_id": "WOS:000275765900003"}