{"auto_keywords": [{"score": 0.04376849414216941, "phrase": "containment_domains"}, {"score": 0.00481495049065317, "phrase": "exascale_systems"}, {"score": 0.00440976345264104, "phrase": "efficient_resilience_scheme"}, {"score": 0.004003169429008801, "phrase": "programming_construct"}, {"score": 0.0037973594873521596, "phrase": "resilience_needs"}, {"score": 0.003447035529485425, "phrase": "error_detection"}, {"score": 0.0033868916699805224, "phrase": "state_preservation"}, {"score": 0.003101503914610488, "phrase": "weak_transactional_semantics"}, {"score": 0.0028151944356239952, "phrase": "application_hierarchies"}, {"score": 0.002717750004930131, "phrase": "hierarchical_state_preservation"}, {"score": 0.002381365139274329, "phrase": "generalized_trace-driven_simulation"}, {"score": 0.002142426911242168, "phrase": "checkpoint_restart"}, {"score": 0.0021049977753042253, "phrase": "redundant_execution_approaches"}], "paper_keywords": ["Exascale", " resilience", " flexible reliability", " fault-tolerance"], "paper_abstract": "This paper describes and evaluates a scalable and efficient resilience scheme based on the concept of containment domains. Containment domains are a programming construct that enable applications to express resilience needs and to interact with the system to tune and specialize error detection, state preservation and restoration, and recovery schemes. Containment domains have weak transactional semantics and are nested to take advantage of the machine and application hierarchies and to enable hierarchical state preservation, restoration and recovery. We evaluate the scalability and efficiency of containment domains using generalized trace-driven simulation and analytical analysis and show that containment domains are superior to both checkpoint restart and redundant execution approaches.", "paper_title": "Containment domains: A scalable, efficient and flexible resilience scheme for exascale systems", "paper_id": "WOS:000327739800011"}