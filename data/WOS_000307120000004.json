{"auto_keywords": [{"score": 0.047792824767915514, "phrase": "choc'late"}, {"score": 0.015719716506582538, "phrase": "case_generation"}, {"score": 0.01264165571124378, "phrase": "test_case_generation"}, {"score": 0.012459037473193435, "phrase": "associated_algorithms"}, {"score": 0.004675768396728975, "phrase": "choice_relation_framework"}, {"score": 0.004496402246090618, "phrase": "software_testers"}, {"score": 0.004097389262726735, "phrase": "single_choice_relation_table"}, {"score": 0.004037694641919865, "phrase": "entire_specification"}, {"score": 0.003319830633865628, "phrase": "preliminary_choice_relation_table"}, {"score": 0.0032714270066711835, "phrase": "specification_component"}, {"score": 0.0031457622320220364, "phrase": "final_table"}, {"score": 0.002880333728285514, "phrase": "preliminary_tables"}, {"score": 0.0027561164046279413, "phrase": "choice_relations"}, {"score": 0.002573424607574822, "phrase": "divide-and-conquer_methodology"}, {"score": 0.002379379676378223, "phrase": "dessert."}, {"score": 0.002356173823922118, "phrase": "theoretical_framework"}, {"score": 0.002157223877108711, "phrase": "case_studies"}], "paper_keywords": ["Black-box testing", " category-partition method", " choice relation framework", " choice relation table", " software testing", " test case generation"], "paper_abstract": "This paper extends the CHOiCe reLATion framEwork, abbreviated as CHOC'LATE, which assists software testers in the application of category/choice methods to testing. CHOC'LATE assumes that the tester is able to construct a single choice relation table from the entire specification; this table then forms the basis for test case generation using the associated algorithms. This assumption, however, may not hold true when the specification is complex and contains many specification components. For such a specification, the tester may construct a preliminary choice relation table from each specification component, and then consolidate all the preliminary tables into a final table to be processed by CHOC'LATE for test case generation. However, it is often difficult to merge these preliminary tables because such merging may give rise to inconsistencies among choice relations or overlaps among choices. To alleviate this problem, we introduce a DividE-and-conquer methodology for identifying categorieS, choiceS, and choicE Relations for Test case generation, abbreviated as DESSERT. The theoretical framework and the associated algorithms are discussed. To demonstrate the viability and effectiveness of our methodology, we describe case studies using the specifications of three real-life commercial software systems.", "paper_title": "DESSERT: a DividE-and-conquer methodology for identifying categorieS, choiceS, and choicE Relations for Test case generation", "paper_id": "WOS:000307120000004"}