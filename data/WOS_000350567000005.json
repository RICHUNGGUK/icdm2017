{"auto_keywords": [{"score": 0.031098289909574556, "phrase": "power_consumption"}, {"score": 0.030544179854065975, "phrase": "transcoding_deadlines"}, {"score": 0.00481495049065317, "phrase": "video_transcoding_server"}, {"score": 0.004513631630494221, "phrase": "n-screen"}, {"score": 0.004451546786101008, "phrase": "dynamic_adaptive_streaming"}, {"score": 0.004410671229801804, "phrase": "http"}, {"score": 0.004370102476358987, "phrase": "dash"}, {"score": 0.004211594861013822, "phrase": "wide_range"}, {"score": 0.0041154571996523505, "phrase": "video_content"}, {"score": 0.0040215052006051235, "phrase": "different_versions"}, {"score": 0.00398452530840582, "phrase": "transcoding_tasks"}, {"score": 0.003389557201018519, "phrase": "transcoding_workloads"}, {"score": 0.0032968474833776906, "phrase": "computation_times"}, {"score": 0.0032215231177304513, "phrase": "new_dynamic_voltage"}, {"score": 0.002714943351733626, "phrase": "linux_transcoding_server"}, {"score": 0.002652878591019016, "phrase": "frontend_node"}, {"score": 0.0026284507395498897, "phrase": "transcoding_requests"}, {"score": 0.0026042472337367015, "phrase": "heterogeneous_backend_nodes"}, {"score": 0.0025447065763362984, "phrase": "new_protocol"}, {"score": 0.0024636287344498298, "phrase": "dvfs"}, {"score": 0.0023851187337905412, "phrase": "thread_management"}, {"score": 0.002266765479420981, "phrase": "power_measurements"}, {"score": 0.0021945194903838132, "phrase": "system-wide_energy_consumption"}, {"score": 0.0021049977753042253, "phrase": "linux_ondemand_governor"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Multimedia systems", " low-power systems", " dynamic voltage and frequency scaling"], "paper_abstract": "Recent popular streaming services such as TV Everywhere, N-Screen, and dynamic adaptive streaming over HTTP (DASH) need to deliver content to the wide range of devices, requiring video content to be transcoded into different versions. Transcoding tasks require a lot of computation, and each task typically has its own real-time constraint. These make it difficult to manage transcoding, but the more efficient use of energy in servers is an imperative. We characterize transcoding workloads in terms of deadlines and computation times, and propose a new dynamic voltage and frequency scaling (DVFS) scheme that allocates a frequency and a workload to each CPU with the aim of minimizing power consumption while meeting all transcoding deadlines. This scheme has been simulated, and also implemented in a Linux transcoding server, in which a frontend node distributes transcoding requests to heterogeneous backend nodes. This required a new protocol for communication between nodes, a DVFS management scheme to reduce power consumption and thread management and scheduling schemes which ensure that transcoding deadlines are met. Power measurements show that this approach can reduce system-wide energy consumption by 17% to 31%, compared with the Linux Ondemand governor.", "paper_title": "Scheduling a Video Transcoding Server to Save Energy", "paper_id": "WOS:000350567000005"}