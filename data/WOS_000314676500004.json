{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "custom_instructions"}, {"score": 0.015467388594408032, "phrase": "extensible_processors"}, {"score": 0.0045843245695654875, "phrase": "conflicting_demands"}, {"score": 0.004546970518808189, "phrase": "performance_improvement"}, {"score": 0.004509919457793852, "phrase": "low_power_consumption"}, {"score": 0.0041725881174377345, "phrase": "instruction-set_extensions"}, {"score": 0.004038183610525504, "phrase": "manual_design"}, {"score": 0.0038446194432899183, "phrase": "large_and_complex_instructions"}, {"score": 0.0037055370870874484, "phrase": "repeatedly_used_ones"}, {"score": 0.003513443975425428, "phrase": "small_instructions"}, {"score": 0.003428164458163043, "phrase": "novel_algorithm"}, {"score": 0.003372460634140967, "phrase": "instruction_reusability"}, {"score": 0.0031714880645482496, "phrase": "high_complexity"}, {"score": 0.003069230909006614, "phrase": "canonical-form_construction_algorithm"}, {"score": 0.002994701080666466, "phrase": "directed_acyclic_graphs"}, {"score": 0.0028744731986533076, "phrase": "best_custom_instruction"}, {"score": 0.0028161764476743257, "phrase": "user-defined_fitness_function"}, {"score": 0.002480154140902474, "phrase": "multiple_custom_instructions"}, {"score": 0.002449839292715327, "phrase": "well-known_iterative_selection_algorithm"}, {"score": 0.002380534385718454, "phrase": "hybrid_algorithm"}, {"score": 0.002322689143237591, "phrase": "previous_algorithm"}, {"score": 0.002256973121326987, "phrase": "experimental_results"}, {"score": 0.002184137736856711, "phrase": "previous_approaches"}, {"score": 0.002148604369150115, "phrase": "algorithm_runtime"}, {"score": 0.0021049977753042253, "phrase": "performance_gain"}], "paper_keywords": ["Application-specific instruction-set processors (ASIPs)", " extensible processors", " input/output (I/O) serialization", " instruction-set extension", " isomorphism detection", " iterative selection"], "paper_abstract": "Extensible processors have been widely used to achieve the conflicting demands for performance improvement, low power consumption, and flexibility. As extensible processors have become more popular, several algorithms have been proposed for automatically identifying instruction-set extensions in order to reduce the effort of manual design and verification. However, most of them focus on finding large and complex instructions that are used only once, rather than repeatedly used ones. Moreover, some other approaches that consider recurrence are limited to finding small instructions. This paper proposes a novel algorithm that considers the instruction reusability as well as input/output (I/O) serialization. In order to overcome the high complexity of the problem, we develop a canonical-form construction algorithm for fast isomorphism detection on directed acyclic graphs and an incremental template generation algorithm that identifies the best custom instruction in terms of a user-defined fitness function. Moreover, our algorithm serializes I/O operations so that the numbers of inputs and outputs of custom instructions are not limited by the microarchitecture. This paper also proposes an algorithm for multiple custom instructions utilizing a well-known iterative selection algorithm. Last, it presents a hybrid algorithm composed of our algorithm and the previous algorithm that does not consider reusability. Experimental results show that our isomorphism-aware algorithm achieves significant improvement over previous approaches in terms of algorithm runtime, as well as performance gain obtained by custom instructions.", "paper_title": "Isomorphism-Aware Identification of Custom Instructions With I/O Serialization", "paper_id": "WOS:000314676500004"}