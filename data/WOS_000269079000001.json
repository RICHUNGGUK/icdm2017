{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "fault_management"}, {"score": 0.04000242598370855, "phrase": "program_execution"}, {"score": 0.033751589816881596, "phrase": "failure_probability"}, {"score": 0.03297082524138952, "phrase": "replication_degree"}, {"score": 0.004765482708043842, "phrase": "grid_middleware"}, {"score": 0.004417848254181138, "phrase": "parallel_programs"}, {"score": 0.004283019592801715, "phrase": "commodity_hardware"}, {"score": 0.004123781267600542, "phrase": "particular_attention"}, {"score": 0.0038492126993451337, "phrase": "fault-tolerance_deals"}, {"score": 0.0037445545584005014, "phrase": "transparent_fault_tolerance_facility"}, {"score": 0.0036553070575015344, "phrase": "fault_detection"}, {"score": 0.0034472883424839346, "phrase": "distributed_set"}, {"score": 0.0032622968443364888, "phrase": "first_contribution"}, {"score": 0.003044912038752554, "phrase": "execution_length"}, {"score": 0.0029114187110123105, "phrase": "replicated_parallel_program"}, {"score": 0.002670884656785558, "phrase": "second_contribution"}, {"score": 0.0024501740852758505, "phrase": "failure_detection_service"}, {"score": 0.002424942315592064, "phrase": "failure_detection_speed"}, {"score": 0.0023834640793589435, "phrase": "binary_round-robin_protocol"}, {"score": 0.0022399174232611853, "phrase": "application_execution"}, {"score": 0.0021049977753042253, "phrase": "real_detection_times"}], "paper_keywords": ["Grid computing", " Middleware", " Parallelism", " Fault-tolerance"], "paper_abstract": "We present in this paper a study on fault management in a grid middleware. The middleware is our home-grown software called P2P-MPI. This framework is MPJ compliant, allows users to execute message passing parallel programs, and its objective is to support environments using commodity hardware. Hence, running programs is failure prone and a particular attention must be paid to fault management. The fault management covers two issues: fault-tolerance and fault detection. Fault-tolerance deals with the program execution: P2P-MPI provides a transparent fault tolerance facility based on replication of computations. Fault detection concerns the monitoring of the program execution by the system. The monitoring is done through a distributed set of modules called failure detectors. The contribution of this paper is twofold. The first contribution is the evaluation of the failure probability of an application depending on the replication degree. The failure probability depends on the execution length, and we propose a model to evaluate the duration of a replicated parallel program. Then, we give an expression of the replication degree required to keep the failure probability of an execution under a given threshold. The second contribution is a study of the advantages and drawbacks of several fault detection systems found in the literature. The criteria of our evaluation are the reliability of the failure detection service and the failure detection speed. We retain the binary round-robin protocol for its failure detection speed, and we propose a variant of this protocol which is more reliable than the application execution in any case. Experiments involving of up to 256 processes, carried out on Grid'5000, show that the real detection times closely match the predictions.", "paper_title": "Fault-Management in P2P-MPI", "paper_id": "WOS:000269079000001"}