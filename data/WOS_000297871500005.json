{"auto_keywords": [{"score": 0.04978464912522237, "phrase": "uml_class_diagrams"}, {"score": 0.010419013069582638, "phrase": "software_reuse"}, {"score": 0.008937475793748354, "phrase": "semantic_technology"}, {"score": 0.007571306153696684, "phrase": "design_stage"}, {"score": 0.007387363485347065, "phrase": "application_ontology"}, {"score": 0.00481495049065317, "phrase": "ontology-based_retrieval"}, {"score": 0.0046544071297876695, "phrase": "important_area"}, {"score": 0.004625795150473604, "phrase": "software_companies"}, {"score": 0.004444037594955185, "phrase": "code_reuse"}, {"score": 0.00430907756010007, "phrase": "reuse_techniques"}, {"score": 0.004269391057037737, "phrase": "software_designs"}, {"score": 0.004243135792625782, "phrase": "even_software_specifications"}, {"score": 0.004139712771605295, "phrase": "software_design"}, {"score": 0.003964727263291033, "phrase": "retrieval_process"}, {"score": 0.0039281997063335735, "phrase": "effective_reuse"}, {"score": 0.003832423454781517, "phrase": "ontology-based_retrieval_technique"}, {"score": 0.003738973626996355, "phrase": "effective_retrieval_process"}, {"score": 0.0036477941360224435, "phrase": "de_facto_standard"}, {"score": 0.003614175930699828, "phrase": "design_stages"}, {"score": 0.0035808664384880213, "phrase": "software_development_process"}, {"score": 0.0035478628449322866, "phrase": "good_technique"}, {"score": 0.003314921989697641, "phrase": "uml_specifications"}, {"score": 0.0032641439000713306, "phrase": "uml_class_diagram_element_types"}, {"score": 0.0031551446537729107, "phrase": "uml_experts"}, {"score": 0.0031357200369281344, "phrase": "query_expansion"}, {"score": 0.0030876784650745973, "phrase": "domain_ontology"}, {"score": 0.003059206456855218, "phrase": "retrieval_phase"}, {"score": 0.0030123335878664064, "phrase": "minimal_distances"}, {"score": 0.0029479120854134996, "phrase": "shortest_path_algorithm"}, {"score": 0.0029027394930867902, "phrase": "case_study"}, {"score": 0.0028759679188458532, "phrase": "domain_ontology_importance"}, {"score": 0.002849442549612025, "phrase": "uml_class_diagram_retrieval_process"}, {"score": 0.002779894844207706, "phrase": "element_type_expansion_method"}, {"score": 0.002687022487756706, "phrase": "query_complexity"}, {"score": 0.002565345470805401, "phrase": "positive_return"}, {"score": 0.002494993595618653, "phrase": "poulin's_model"}, {"score": 0.0023967582707115354, "phrase": "coding_stage"}, {"score": 0.002239225269052105, "phrase": "uml_class_diagrams_retrieval"}, {"score": 0.002164376714559963, "phrase": "information_retrieval"}, {"score": 0.002144400314994328, "phrase": "retrieval_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Information retrieval", " Ontologies", " Software Reuse", " Software Engineering", " UML Class Diagrams"], "paper_abstract": "Context: Software Reuse has always been an important area amongst software companies in order to increase their productivity and the quality of their products, but code reuse is not the only answer for this. Nowadays, reuse techniques proposals include software designs or even software specifications. Therefore, this research focuses on software design, specifically on UML Class Diagrams. A semantic technology has been applied to facilitate the retrieval process for an effective reuse. Objective: This research proposes an ontology-based retrieval technique by semantic similarity in order to support effective retrieval process for UML Class Diagrams. Since UML Class Diagrams are a de facto standard in the design stages of a Software Development Process, a good technique is needed to reuse them, i.e. reusing during the design stage instead of just the coding stages. Method: An application ontology modeled using UML specifications was designed to compare UML Class Diagram element types. To measure their similarity, a survey was conducted amongst UML experts. Query expansion was improved by a domain ontology supporting the retrieval phase. The calculus of minimal distances in ontologies was solved using a shortest path algorithm. Results: The case study shows the domain ontology importance in the UML Class Diagram retrieval process as well as the importance of an element type expansion method, such as an application ontology. A correlation between the query complexity and retrieved elements has been identified, by analyzing results. Finally, a positive Return of Investment (ROI) was estimated using Poulin's Model. Conclusion: Because Software Reuse has not to be limited to the coding stage, approaches to reuse design stage must be developed, i.e. UML Class Diagrams reuse. This approach proposes a technique for UML Class Diagrams retrieval, which is one important step towards reuse. Semantic technology combined with information retrieval improves the retrieval results. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Towards an ontology-based retrieval of UML Class Diagrams", "paper_id": "WOS:000297871500005"}