{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "pollard's_rho_algorithm"}, {"score": 0.004073359218158693, "phrase": "group_element_nodes"}, {"score": 0.0036194914688460656, "phrase": "graph_nodes"}, {"score": 0.0031532895341013297, "phrase": "random_graph"}, {"score": 0.0027741761880779535, "phrase": "distinguished_point_collision_detection_method"}, {"score": 0.0026148807877309417, "phrase": "new_situation"}, {"score": 0.0025638362414466278, "phrase": "concrete_constructions"}, {"score": 0.0024405312482831646, "phrase": "multiplicative_subgroups"}, {"score": 0.0023694065215394593, "phrase": "finite_fields"}, {"score": 0.0021896891011033105, "phrase": "proposed_technique"}, {"score": 0.002146926767291475, "phrase": "practical_speedup"}, {"score": 0.0021049977753042253, "phrase": "existing_algorithms"}], "paper_keywords": ["Discrete logarithm problem", " Pollard's rho", " r-adding walk", " Distinguished point", " Finite field"], "paper_abstract": "Most generic and memory-efficient algorithms for solving the discrete logarithm problem construct a certain random graph consisting of group element nodes and return the solution when a collision is found among the graph nodes. In this work, we develop a technique for traveling through the random graph without fully computing each node and also provide an extension to the distinguished point collision detection method that is suitable for this new situation. Concrete constructions of this technique for multiplicative subgroups of the finite fields are given. Our implementations confirm that the proposed technique provides practical speedup over existing algorithms.", "paper_title": "Accelerating Pollard's Rho Algorithm on Finite Fields", "paper_id": "WOS:000299007100001"}