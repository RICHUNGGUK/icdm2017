{"auto_keywords": [{"score": 0.0326619465863625, "phrase": "stable-model_semantics"}, {"score": 0.00481495049065317, "phrase": "modularity_aspects_of_disjunctive_stable_models"}, {"score": 0.004725886853744007, "phrase": "programming_languages"}, {"score": 0.004406260054779782, "phrase": "software_development"}, {"score": 0.004146716743362567, "phrase": "answer-set_programming"}, {"score": 0.004108161406159407, "phrase": "fully_declarative_and_nonmonotonic_languages"}, {"score": 0.003920674807745575, "phrase": "modular_structure"}, {"score": 0.003689628075766217, "phrase": "entire_program"}, {"score": 0.0033761303704612734, "phrase": "disjunctive_information"}, {"score": 0.0031770714776989282, "phrase": "disjunctive_logic_programs"}, {"score": 0.0028265625216338875, "phrase": "novel_module_theorem"}, {"score": 0.002684819249720834, "phrase": "module_theorem"}, {"score": 0.0026474076254702525, "phrase": "well-known_splitting-set_theorem"}, {"score": 0.002514625755809045, "phrase": "positive_dependencies"}, {"score": 0.002344201345813952, "phrase": "shared_disjunctive_rules"}, {"score": 0.002289993730291136, "phrase": "generalized_shifting_technique"}, {"score": 0.002237036807966899, "phrase": "modular_equivalence"}, {"score": 0.002185301851004467, "phrase": "mutual_comparison"}, {"score": 0.0021049977753042253, "phrase": "translation-based_verification_method"}], "paper_keywords": [""], "paper_abstract": "Practically all programming languages allow the programmer to split a program into several modules which brings along several advantages in software development. In this paper, we are interested in the area of answer-set programming where fully declarative and nonmonotonic languages are applied. In this context, obtaining a modular structure for programs is by no means straightforward since the output of an entire program cannot in general be composed from the output of its components. To better understand the effects of disjunctive information on modularity we restrict the scope of analysis to the case of disjunctive logic programs (DLPs) subject to stable-model semantics. We define the notion of a DLP-function, where a well-defined input/output interface is provided, and establish a novel module theorem which indicates the compositionality of stable-model semantics for DLP-functions. The module theorem extends the well-known splitting-set theorem and enables the decomposition of DLP-functions given their strongly connected components based on positive dependencies induced by rules. In this setting, it is also possible to split shared disjunctive rules among components using a generalized shifting technique. The concept of modular equivalence is introduced for the mutual comparison of DLP-functions using a generalization of a translation-based verification method.", "paper_title": "Modularity Aspects of Disjunctive Stable Models", "paper_id": "WOS:000269486800005"}