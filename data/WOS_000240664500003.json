{"auto_keywords": [{"score": 0.03438826262822822, "phrase": "proposed_method"}, {"score": 0.013311083400999004, "phrase": "program_threads"}, {"score": 0.012725134426731252, "phrase": "alternative_methods"}, {"score": 0.012554367413632745, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "workload_distribution"}, {"score": 0.004749824776508639, "phrase": "dsm_clusters"}, {"score": 0.004664352260912174, "phrase": "appropriate_workload_distribution"}, {"score": 0.0045804107341714, "phrase": "user_applications"}, {"score": 0.004477595431209663, "phrase": "satisfactory_performance"}, {"score": 0.004417012437860011, "phrase": "distributed_shared_memory"}, {"score": 0.004377078173929219, "phrase": "sdsm"}, {"score": 0.0041827333568982055, "phrase": "present_study"}, {"score": 0.004126123386192962, "phrase": "novel_method"}, {"score": 0.004015182362035361, "phrase": "individual_computers"}, {"score": 0.003978866233891427, "phrase": "sdsm_clusters"}, {"score": 0.0037336520904376687, "phrase": "processor_speed"}, {"score": 0.0036998728605395384, "phrase": "data-sharing_aspects"}, {"score": 0.0035515951985356374, "phrase": "application_performance"}, {"score": 0.003424771860049617, "phrase": "appropriate_workload_distributions"}, {"score": 0.0028944757265206332, "phrase": "location_policy"}, {"score": 0.0028037753646260937, "phrase": "appropriate_node_combinations"}, {"score": 0.002765776659294382, "phrase": "program_performance"}, {"score": 0.0027159094186967247, "phrase": "resource_utilization"}, {"score": 0.0025716240685409513, "phrase": "teamster"}, {"score": 0.002536763634539386, "phrase": "experimental_results"}, {"score": 0.0023372808856170386, "phrase": "chosen_test_applications"}, {"score": 0.002203016940021265, "phrase": "proper_node_combinations"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["distributed shared memory", " workload distribution", " memory availability", " location policy", " node combination"], "paper_abstract": "Achieving an appropriate workload distribution is essential if user applications are to achieve a satisfactory performance on software distributed shared memory (SDSM) clusters. To address this problem, the present study develops a novel method for distributing program threads onto the individual computers of SDSM clusters. In contrast to alternative methods, the proposed approach takes account not only of processor speed and data-sharing aspects, but also memory availability, such that application performance can be enhanced through the implementation of appropriate workload distributions. In addition, when distributing the program threads, the proposed method specifically chooses only those computers that can enhance the performance of the application, rather than simply distributing the threads to all the available nodes in the cluster. This location policy makes it possible to specify the appropriate node combinations that optimize program performance while simultaneously maximizing resource utilization. The proposed method is implemented on a testbed referred to as Teamster. The experimental results demonstrate that, compared to alternative methods, the proposed approach delivers a 20-30% improvement in the performance of the chosen test applications. Importantly, it is shown that the proposed method can efficiently specify proper node combinations for the applications. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Adapting workload distribution on software DSM clusters", "paper_id": "WOS:000240664500003"}