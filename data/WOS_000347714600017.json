{"auto_keywords": [{"score": 0.04101004342397492, "phrase": "reusable_components"}, {"score": 0.008933106814505272, "phrase": "control-flow_synthesis"}, {"score": 0.00481495049065317, "phrase": "probabilistic_components._synthesis"}, {"score": 0.004715702140552199, "phrase": "automatic_construction"}, {"score": 0.0044608829094248985, "phrase": "classical_synthesis_algorithms"}, {"score": 0.0036468482216440233, "phrase": "real_life"}, {"score": 0.003571591012750155, "phrase": "almost_every_non-trivial_commercial_software_system"}, {"score": 0.003217896008931311, "phrase": "web-service_orchestration"}, {"score": 0.0028392566579629407, "phrase": "lustig"}, {"score": 0.0028000331411407627, "phrase": "vardi"}, {"score": 0.0025578967205807843, "phrase": "dataflow_synthesis"}, {"score": 0.0024704333220467393, "phrase": "controlflow_synthesis"}, {"score": 0.0021947755130109696, "phrase": "probabilistic_components"}], "paper_keywords": ["temporal synthesis", " probabilistic components"], "paper_abstract": "Synthesis is the automatic construction of a system from its specification. In classical synthesis algorithms, it is always assumed that the system is \"constructed from scratch\" rather than composed from reusable components. This, of course, rarely happens in real life, where almost every non-trivial commercial software system relies heavily on using libraries of reusable components. Furthermore, other contexts, such as web-service orchestration, can be modeled as synthesis of a system from a library of components. Recently, Lustig and Vardi introduced dataflow and control-flow synthesis from libraries of reusable components. They proved that dataflow synthesis is undecidable, while controlflow synthesis is decidable. In this work, we consider the problem of control-flow synthesis from libraries of probabilistic components. We show that this more general problem is also decidable.", "paper_title": "SYNTHESIS FROM PROBABILISTIC COMPONENTS", "paper_id": "WOS:000347714600017"}