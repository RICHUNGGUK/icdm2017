{"auto_keywords": [{"score": 0.04532453011512728, "phrase": "similarity_queries"}, {"score": 0.037215072668367856, "phrase": "query_reference"}, {"score": 0.03611898900204017, "phrase": "full_answer"}, {"score": 0.00481495049065317, "phrase": "important_feature"}, {"score": 0.004759507166427077, "phrase": "database_management_systems"}, {"score": 0.004405779372462873, "phrase": "tough_issue"}, {"score": 0.004141742095830515, "phrase": "answer_sizes"}, {"score": 0.0040002088320302935, "phrase": "similarity_query"}, {"score": 0.003480676282281569, "phrase": "dbms"}, {"score": 0.0033228699494959172, "phrase": "server_processing_power"}, {"score": 0.003123527559542239, "phrase": "client_requests"}, {"score": 0.0030283730114326014, "phrase": "traditional_queries"}, {"score": 0.0027386335451725762, "phrase": "similarity_range"}, {"score": 0.0027175263159330523, "phrase": "k-nearest_neighbor_queries"}, {"score": 0.002391779843744166, "phrase": "reported_experiments"}, {"score": 0.00230098581403254, "phrase": "interesting_part"}, {"score": 0.0022308329460335985, "phrase": "answering_queries"}, {"score": 0.0021544587602892466, "phrase": "non-paged_way"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Query paging", " Similarity queries", " Backward paging", " Forward paging"], "paper_abstract": "An important feature of a database management systems (DBMS) is its client/server architecture, where managing shared memory among the clients and the server is always an tough issue. However, similarity queries are specially sensitive to this kind of architecture, since the answer sizes vary widely. Usually, the answers of similarity query are fully processed to be sent in full to the user, who often is interested in just parts of the answer, e.g. just few elements closer or farther to the query reference. Compelling the DBMS to retrieve the full answer, further ignoring its majority is at least a waste of server processing power. Paging the answer is a technique that splits the answer onto several pages, following client requests. Despite the success of paging on traditional queries, little work has been done to support it in similarity queries. In this work, we present a technique that not only provides paging in similarity range or k-nearest neighbor queries, but also supports them in two variations: the forward similarity query and the backward similarity query. They return elements either increasingly farther of increasingly closer to the query reference. The reported experiments show that, depending on the proportion of the interesting part over the full answer, both techniques allow answering queries much faster than it is obtained in the non-paged way. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Paged similarity queries", "paper_id": "WOS:000293035700002"}