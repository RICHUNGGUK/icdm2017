{"auto_keywords": [{"score": 0.04431452575137328, "phrase": "lsc"}, {"score": 0.009571590461282475, "phrase": "linear_logic"}, {"score": 0.008164595914954725, "phrase": "abstract_machines"}, {"score": 0.00481495049065317, "phrase": "distilling_abstract_machines"}, {"score": 0.004535124351828787, "phrase": "lambda_calculi"}, {"score": 0.0044990584725586764, "phrase": "explicit_substitutions"}, {"score": 0.004375061788023814, "phrase": "graphical_syntaxes"}, {"score": 0.004271490815763164, "phrase": "linear_substitution_calculus"}, {"score": 0.0041703614123283165, "phrase": "new_approach"}, {"score": 0.00405538690701843, "phrase": "small-step_calculi"}, {"score": 0.0038195342195623764, "phrase": "environment-based_abstract_machines"}, {"score": 0.0033745298175222056, "phrase": "structural_congruence"}, {"score": 0.003334309053314909, "phrase": "distillation_process"}, {"score": 0.0032423089921154503, "phrase": "weak_linear_head_reduction"}, {"score": 0.0031402604946939743, "phrase": "central_role"}, {"score": 0.002633639053207304, "phrase": "kam"}, {"score": 0.002602211650484875, "phrase": "cek"}, {"score": 0.0024802523752944536, "phrase": "simplified_versions"}, {"score": 0.002450664469481097, "phrase": "secd"}, {"score": 0.002382987346529592, "phrase": "sestoft's_machine"}, {"score": 0.0022987068521717765, "phrase": "new_machines"}, {"score": 0.0022803854904010347, "phrase": "global_environments"}, {"score": 0.0021909411820497707, "phrase": "time_complexity"}, {"score": 0.0021049977753042253, "phrase": "complexity-preserving_abstraction"}], "paper_keywords": ["Lambda-calculus", " abstract machines", " explicit substitutions", " linear logic", " call-by-need", " linear head reduction"], "paper_abstract": "It is well-known that many environment-based abstract machines can be seen as strategies in lambda calculi with explicit substitutions (ES). Recently, graphical syntaxes and linear logic led to the linear substitution calculus (LSC), a new approach to ES that is halfway between small-step calculi and traditional calculi with ES. This paper studies the relationship between the LSC and environment-based abstract machines. While traditional calculi with ES simulate abstract machines, the LSC rather distills them: some transitions are simulated while others vanish, as they map to a notion of structural congruence. The distillation process unveils that abstract machines in fact implement weak linear head reduction, a notion of evaluation having a central role in the theory of linear logic. We show that such a pattern applies uniformly in call-by-name, call-by-value, and call-by-need, catching many machines in the literature. We start by distilling the KAM, the CEK, and a sketch of the ZINC, and then provide simplified versions of the SECD, the lazy KAM, and Sestoft's machine. Along the way we also introduce some new machines with global environments. Moreover, we show that distillation preserves the time complexity of the executions, i.e. the LSC is a complexity-preserving abstraction of abstract machines.", "paper_title": "Distilling Abstract Machines", "paper_id": "WOS:000349143000031"}