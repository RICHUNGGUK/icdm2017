{"auto_keywords": [{"score": 0.041269222832803924, "phrase": "hard_real-time_system"}, {"score": 0.031071491193311245, "phrase": "timing_constraint"}, {"score": 0.02763740548243862, "phrase": "taclc"}, {"score": 0.015719716506582524, "phrase": "hard_real-time_systems"}, {"score": 0.008295395459294565, "phrase": "cache_lines"}, {"score": 0.004655742198075387, "phrase": "increasingly_important_issue"}, {"score": 0.004480196733208298, "phrase": "existing_leakage_reduction_techniques"}, {"score": 0.004089239912167375, "phrase": "high_performance"}, {"score": 0.0037322713756404295, "phrase": "cpu_shutdown_technique"}, {"score": 0.003608732492631878, "phrase": "architectural-level_shutdown_techniques"}, {"score": 0.003199864072042816, "phrase": "cpu_leakage"}, {"score": 0.003138874040786261, "phrase": "existing_architecture-level_shutdown_techniques"}, {"score": 0.0028100102841877835, "phrase": "first_attempt"}, {"score": 0.002677964894127131, "phrase": "cache_leakage_reduction"}, {"score": 0.0025034338848015166, "phrase": "low-leakage_states"}, {"score": 0.0023972750359328235, "phrase": "experimental_results"}, {"score": 0.002329009499335603, "phrase": "system_slack"}, {"score": 0.0022956075241520064, "phrase": "cache_leakage"}, {"score": 0.0022409963215568565, "phrase": "low_cpu_utilization"}, {"score": 0.002198242191529977, "phrase": "comparable_leakage_reduction"}, {"score": 0.002166711569953301, "phrase": "leakage_control_policy"}, {"score": 0.0021049977753042253, "phrase": "low-leakage_modes"}], "paper_keywords": ["Cache", " leakage control", " hard real-time systems", " energy management"], "paper_abstract": "Leakage energy consumption is an increasingly important issue as the technology continues to shrink. Existing leakage reduction techniques for hard real-time systems utilize slack to turn off a CPU completely. However, turning on/off a processor involves high performance and energy overheads. Hence, a hard real-time system is very likely to have unutilized slack if only the CPU shutdown technique is used to reduce leakage. Architectural-level shutdown techniques in all instances have a much lower overheads than turning off a CPU; therefore, they can be utilized in a hard real-time system to further reduce CPU leakage. However, existing architecture-level shutdown techniques cause unpredictable performance degradation thereby unsuitable for a hard real-time system that must meet the timing constraint in all cases. This paper is the first attempt to bridge this gap. This paper focuses on cache leakage reduction and proposes the first Timing-Aware Cache Leakage Control (TACLC) mechanism. TACLC exploits system slack to turn cache lines into low-leakage states provided that the timing constraint is met. The experimental results demonstrate that TACLC effectively utilizes system slack to reduce cache leakage. For systems with low CPU utilization, TACLC achieves comparable leakage reduction to the leakage control policy that aggressively turns cache lines into low-leakage modes while neglecting the timing constraint.", "paper_title": "TACLC: Timing-Aware Cache Leakage Control for Hard Real-Time Systems", "paper_id": "WOS:000289900300002"}