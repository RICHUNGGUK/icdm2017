{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "low-level_code"}, {"score": 0.007673488291154056, "phrase": "type_safety"}, {"score": 0.004670896353428476, "phrase": "unified_approach"}, {"score": 0.004614483128885678, "phrase": "type_checking"}, {"score": 0.004012500850311087, "phrase": "traditional_type_checkers"}, {"score": 0.0035965032173588753, "phrase": "concise_specifications"}, {"score": 0.0034465894339710864, "phrase": "untyped_program's_heap"}, {"score": 0.0032431667821391044, "phrase": "type_checker"}, {"score": 0.0030331993611107328, "phrase": "low-level_formalization"}, {"score": 0.0029783256772952073, "phrase": "c_program's_heap"}, {"score": 0.002802462902794585, "phrase": "smt_solver"}, {"score": 0.0027019561451518768, "phrase": "decision_procedure"}, {"score": 0.002481200970201421, "phrase": "nominal_and_structural_subtyping"}, {"score": 0.002392188222609101, "phrase": "per-structure_basis"}, {"score": 0.0021700901058417602, "phrase": "complex_type_invariants"}, {"score": 0.0021438155673297377, "phrase": "low-level_c_code"}], "paper_keywords": ["Languages", " Verification"], "paper_abstract": "We present a unified approach to type checking and property checking for low-level code. Type checking for low-level code is challenging because type safety often depends on complex, program-specific invariants that are difficult for traditional type checkers to express. Conversely, property checking for low-level code is challenging because it is difficult to write concise specifications that distinguish between locations in an untyped program's heap. We address both problems simultaneously by implementing a type checker for low-level code as part of our property checker. We present a low-level formalization of a C program's heap and its types that can be checked with an SMT solver, and we provide a decision procedure for checking type safety. Our type system is flexible enough to support a combination of nominal and structural subtyping for C, on a per-structure basis. We discuss several case studies that demonstrate the ability of this tool to express and check complex type invariants in low-level C code, including several small Windows device drivers.", "paper_title": "Unifying Type Checking and Property Checking for Low-Level Code", "paper_id": "WOS:000272013800028"}