{"auto_keywords": [{"score": 0.035712999120767676, "phrase": "flexpref"}, {"score": 0.009741693198888022, "phrase": "preference_method"}, {"score": 0.008713768692145006, "phrase": "database_systems"}, {"score": 0.004779085953614184, "phrase": "personalized_database_systems"}, {"score": 0.004620957579769604, "phrase": "numerous_preference_evaluation_methods"}, {"score": 0.0040691889755318155, "phrase": "database_system"}, {"score": 0.004023775199194536, "phrase": "double-edged_sword"}, {"score": 0.003949204622915113, "phrase": "efficient_query_processing"}, {"score": 0.003919763262805793, "phrase": "arbitrary_database_queries"}, {"score": 0.003637112258469488, "phrase": "database_engine"}, {"score": 0.0034385353123700885, "phrase": "extensible_preference_evaluation"}, {"score": 0.003324614337607016, "phrase": "query_processor"}, {"score": 0.0032507647824680684, "phrase": "wide_array"}, {"score": 0.003226513431715486, "phrase": "preference_evaluation_methods"}, {"score": 0.0031904741237384106, "phrase": "single_extensible_code_base"}, {"score": 0.00276725708403607, "phrase": "efficient_execution"}, {"score": 0.0027466028572379455, "phrase": "preference_queries"}, {"score": 0.0027261023678401696, "phrase": "common_database_operations"}, {"score": 0.002655544981260646, "phrase": "query_optimization_framework"}, {"score": 0.0025771355599741915, "phrase": "theoretical_framework"}, {"score": 0.002337906603857861, "phrase": "case_studies"}, {"score": 0.002294507393862231, "phrase": "seven_state-of-the-art_preference_evaluation_methods"}, {"score": 0.002144821509621687, "phrase": "postgresql"}, {"score": 0.0021049977753042253, "phrase": "single-table_and_multitable_preference_queries"}], "paper_keywords": ["Design", " Performance", " Preference query processing", " extensibility"], "paper_abstract": "Personalized database systems give users answers tailored to their personal preferences. While numerous preference evaluation methods for databases have been proposed (e.g., skyline, top-k, k-dominance, k-frequency), the implementation of these methods at the core of a database system is a double-edged sword. Core implementation provides efficient query processing for arbitrary database queries, however, this approach is not practical since each existing (and future) preference method requires implementation within the database engine. To solve this problem, this article introduces FlexPref, a framework for extensible preference evaluation in database systems. FlexPref, implemented in the query processor, aims to support a wide array of preference evaluation methods in a single extensible code base. Integration with FlexPref is simple, involving the registration of only three functions that capture the essence of the preference method. Once integrated, the preference method \"lives\" at the core of the database, enabling the efficient execution of preference queries involving common database operations. This article also provides a query optimization framework for FlexPref, as well as a theoretical framework that defines the properties a preference method must exhibit to be implemented in FlexPref. To demonstrate the extensibility of FlexPref, this article also provides case studies detailing the implementation of seven state-of-the-art preference evaluation methods within FlexPref. We also experimentally study the strengths and weaknesses of an implementation of FlexPref in PostgreSQL over a range of single-table and multitable preference queries.", "paper_title": "Flexible and Extensible Preference Evaluation in Database Systems", "paper_id": "WOS:000324072200004"}