{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "minizinc"}, {"score": 0.004610058444728656, "phrase": "solver-agnostic_modeling_language"}, {"score": 0.004287680323820891, "phrase": "combinatorial_satisfaction"}, {"score": 0.004165105357908494, "phrase": "optimization_problems"}, {"score": 0.0038737214010638745, "phrase": "solver-independent_modeling_language"}, {"score": 0.0035507457285983268, "phrase": "constraint-programming_solvers"}, {"score": 0.0034491650585057754, "phrase": "mixed_integer_programming"}, {"score": 0.0033021988455635403, "phrase": "sat_and_sat_modulo_theory"}, {"score": 0.0031159081999910694, "phrase": "hybrid_solvers"}, {"score": 0.00269475174341129, "phrase": "minizinc_challenge"}, {"score": 0.0024342079318127423, "phrase": "different_strengths"}, {"score": 0.0023644936731468252, "phrase": "different_solvers"}, {"score": 0.0021049977753042253, "phrase": "minizinc_models"}], "paper_keywords": [""], "paper_abstract": "MiniZinc is a solver-agnostic modeling language for defining and solving combinatorial satisfaction and optimization problems. MiniZinc provides a solver-independent modeling language that is now supported by constraint-programming solvers, mixed integer programming solvers, SAT and SAT modulo theory solvers, and hybrid solvers. Every year since 2008 we have run the MiniZinc Challenge, which compares and contrasts the different strengths of different solvers and solving technologies on a set of MiniZinc models. Here we report on what we have learned from running the competition for 6 years.", "paper_title": "The MiniZinc Challenge 2008-2013", "paper_id": "WOS:000337768900006"}