{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "exception_handling"}, {"score": 0.004716520738331953, "phrase": "powerful_abstraction"}, {"score": 0.004283019592801715, "phrase": "reliable_operating_systems"}, {"score": 0.004109600767747015, "phrase": "system_components"}, {"score": 0.004053362743156545, "phrase": "exceptional_conditions"}, {"score": 0.003916098498242888, "phrase": "error_handling_code"}, {"score": 0.003435426082776884, "phrase": "choices_operating_system"}, {"score": 0.0031626225189867354, "phrase": "exceptional_error_conditions"}, {"score": 0.0030344301563232944, "phrase": "critical_kernel_errors"}, {"score": 0.0029722900280316216, "phrase": "invalid_memory_access"}, {"score": 0.002931569771634119, "phrase": "undefined_instructions"}, {"score": 0.0028321862184182913, "phrase": "language-based_software_exceptions"}, {"score": 0.002643386043540555, "phrase": "software_exceptions"}, {"score": 0.0025892330566358503, "phrase": "simple_and_unified_manner"}, {"score": 0.0024842242921857705, "phrase": "exception_hierarchy"}, {"score": 0.0023834640793589435, "phrase": "catch-rethrow_approach"}, {"score": 0.002302619021497886, "phrase": "protection_domains"}, {"score": 0.0021342613107011624, "phrase": "generic_recovery_techniques"}, {"score": 0.0021049977753042253, "phrase": "policy-driven_micro-reboots"}], "paper_keywords": [""], "paper_abstract": "Exception handling is a powerful abstraction that can be used to help manage errors and support the construction of reliable operating systems. Using exceptions to notify system components about exceptional conditions also reduces coupling of error handling code and increases the modularity of the system. We explore the benefits of incorporating exception handling into the Choices operating system in order to improve reliability. We extend the set of exceptional error conditions in the kernel to include critical kernel errors such as invalid memory access and undefined instructions by wrapping them with language-based software exceptions. This allows developers to handle both hardware and software exceptions in a simple and unified manner through the use of an exception hierarchy. We also describe a catch-rethrow approach for exception propagation across protection domains. When an exception is caught by the system, generic recovery techniques like policy-driven micro-reboots and restartable processes are applied, thus increasing the reliability of the system.", "paper_title": "Exception handling in the choices operating system", "paper_id": "WOS:000241860400003"}