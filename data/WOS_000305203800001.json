{"auto_keywords": [{"score": 0.025361707468513746, "phrase": "fibonacci"}, {"score": 0.014636971234255135, "phrase": "fft"}, {"score": 0.00481495049065317, "phrase": "dynamic_multiple_work_stealing_strategy"}, {"score": 0.004693476992528682, "phrase": "lazy-task_creation"}, {"score": 0.004633888966463624, "phrase": "efficient_method"}, {"score": 0.004497762477097628, "phrase": "grain-size_problem"}, {"score": 0.004328576620172575, "phrase": "effective_load_balancing_strategy"}, {"score": 0.004130376386308024, "phrase": "dynamic_work"}, {"score": 0.004043298628655316, "phrase": "lazy-task_creation_technique"}, {"score": 0.004008981656795115, "phrase": "efficient_fine-grain_task_scheduling"}, {"score": 0.00387459052649752, "phrase": "load_balancing_granularity"}, {"score": 0.003776750773624222, "phrase": "task_parents"}, {"score": 0.003557924423642353, "phrase": "run-time_information"}, {"score": 0.003104038398386081, "phrase": "first_work_stealing_strategy"}, {"score": 0.002825949329865926, "phrase": "fixed_number"}, {"score": 0.0027078974645805736, "phrase": "cilk_and_openmp_task_implementations"}, {"score": 0.0025183881730011597, "phrase": "irregular_workloads"}, {"score": 0.002475755804232436, "phrase": "uts_benchmarks"}, {"score": 0.002413153346716919, "phrase": "regular_workloads"}, {"score": 0.002362192695471035, "phrase": "strassen's_matrix_multiplication"}, {"score": 0.0023123057299992587, "phrase": "sparse-lu_factorization"}, {"score": 0.0022828795331819025, "phrase": "dynamic-length_strategy"}, {"score": 0.0022346638243276717, "phrase": "fixed-length_strategy"}, {"score": 0.0021049977753042253, "phrase": "load_imbalance"}], "paper_keywords": ["multiple steals", " steal overhead", " load imbalance", " frame management", " overhead reduction"], "paper_abstract": "Lazy-task creation is an efficient method of overcoming the overhead of the grain-size problem in parallel computing. Work stealing is an effective load balancing strategy for parallel computing. In this paper, we present dynamic work stealing strategies in a lazy-task creation technique for efficient fine-grain task scheduling. The basic idea is to control load balancing granularity depending on the number of task parents in a stack. The dynamic-length strategy of work stealing uses run-time information, which is information on the load of the victim, to determine the number of tasks that a thief is allowed to steal. We compare it with he bottommost first work stealing strategy used in Stack Thread/MP, and the fixed-length strategy of work stealing, where a thief requests to steal a fixed number of tasks, as well as other multithreaded frameworks such as Cilk and OpenMP task implementations. The experiments show that the dynamic-length strategy of work stealing performs well in irregular workloads such as in UTS benchmarks, as well as in regular workloads such as Fibonacci, Strassen's matrix multiplication, FFT, and Sparse-LU factorization. The dynamic-length strategy works better than the fixed-length strategy because it is more flexible than the latter; this strategy can avoid load imbalance due to overstealing.", "paper_title": "Dynamic Multiple Work Stealing Strategy for Flexible Load Balancing", "paper_id": "WOS:000305203800001"}