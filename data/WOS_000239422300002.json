{"auto_keywords": [{"score": 0.0494698167146389, "phrase": "object_orientation"}, {"score": 0.004208881856146758, "phrase": "interfaces_-_object_orientation"}, {"score": 0.00334144503360907, "phrase": "oriented_software_systems"}, {"score": 0.0027212777001495176, "phrase": "formal_definition"}, {"score": 0.0026865721000905235, "phrase": "class_composition"}, {"score": 0.002635339648135844, "phrase": "semantic_complications"}, {"score": 0.002145942273032774, "phrase": "state_assertions"}, {"score": 0.0021049977753042253, "phrase": "state_machines"}], "paper_keywords": [""], "paper_abstract": "We discuss - on the basis of a theory of components, architectures, refinement, and interfaces - object orientation with its notions of objects and classes aiming at interfaces of classes and of components as well as their specification. We define and analyze, in particular, concepts of components and interfaces for object oriented software systems and their architecture. We discuss \"design by contract\" as well as \"specification by contract\" and analyze their limitations. We discuss how to model interfaces. We treat a formal definition of class composition and analyze semantic complications. We outline, in particular, how we can extend concepts from object orientation towards components and more sophisticated ways to handle interfaces. Our approach is based on the notion of states, state assertions, and state machines.", "paper_title": "Core theory of interfaces and architecture and its impact on object orientation", "paper_id": "WOS:000239422300002"}