{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "petri_net-based_digital_architecture"}, {"score": 0.00447251540886613, "phrase": "component-based_approach"}, {"score": 0.00424734451992536, "phrase": "complex_digital_systems"}, {"score": 0.004185108816866677, "phrase": "field-programmable_gate_arrays"}, {"score": 0.003664315990489347, "phrase": "petri_nets"}, {"score": 0.002914288956035066, "phrase": "possible_situation"}, {"score": 0.002726740692380339, "phrase": "complex_models"}, {"score": 0.0026867260506696455, "phrase": "human_errors"}, {"score": 0.0025324393547676623, "phrase": "model_exception"}, {"score": 0.0021049977753042253, "phrase": "programmable_logic_device"}], "paper_keywords": ["Exception", " field-programmable gate array (FPGA)", " implementation", " macroplace (MP)", " Petri nets (PNs)", " validation"], "paper_abstract": "A component-based approach to the specification and implementation of complex digital systems on field-programmable gate arrays (FPGAs) has been developed, with the behavior and composition of the components specified by Petri nets (PNs). Yet modeling behavior in the case of error becomes intricate if only PNs are used. In this case, the designer often has to address every possible situation when an error occurs, which leads to complex models and human errors. This paper offers a way to model exception handling by adding the concept of macroplace (MP) to the formalism while preserving the conformity and efficiency of the implementation on a programmable logic device (such as FPGAs), as well as the analyzability of the model.", "paper_title": "Handling Exceptions in Petri Net-Based Digital Architecture: From Formalism to Implementation on FPGAs", "paper_id": "WOS:000358885800005"}