{"auto_keywords": [{"score": 0.03141343816813769, "phrase": "linear_system"}, {"score": 0.00481495049065317, "phrase": "improved_cache_utilization"}, {"score": 0.004769958800452922, "phrase": "preconditioner_efficiency"}, {"score": 0.0046593017130868, "phrase": "space-filling_curve"}, {"score": 0.00461575768501871, "phrase": "element-_and_vertex-reordering_technique"}, {"score": 0.004162703509434786, "phrase": "parallel_implementations"}, {"score": 0.004028054020045027, "phrase": "reasonable_amount"}, {"score": 0.003897742942358768, "phrase": "low_cache_utilization"}, {"score": 0.0038431888954930083, "phrase": "unstructured_data_access_patterns"}, {"score": 0.003649585593445665, "phrase": "mesh_vertices"}, {"score": 0.00351491577968631, "phrase": "hilbert_space-filling_curves"}, {"score": 0.0034171734618737436, "phrase": "fe_methods"}, {"score": 0.0033851984021896287, "phrase": "unstructured_meshes"}, {"score": 0.0033377940531761985, "phrase": "reordering_technique"}, {"score": 0.003291051334991867, "phrase": "mesh_elements"}, {"score": 0.0030525578912808647, "phrase": "atomic_regions"}, {"score": 0.002912331664922248, "phrase": "fe_analysis"}, {"score": 0.0028446460307503343, "phrase": "preconditioned_conjugate_gradient_method"}, {"score": 0.002765490759189057, "phrase": "block-jacobi_preconditioner"}, {"score": 0.0026384167183586015, "phrase": "stiffness_matrix_diagonal"}, {"score": 0.0024818877663889813, "phrase": "stiffness_matrix_assembly_step"}, {"score": 0.0023789822182914877, "phrase": "single-core_processor"}, {"score": 0.0021049977753042253, "phrase": "stiffness_matrix"}], "paper_keywords": ["Parallel mesh warping", " Vertex reordering", " Element reordering", " Hilbert space-filling curves", " Cache utilization", " Preconditioner efficiency"], "paper_abstract": "Solving partial differential equations using finite element (FE) methods for unstructured meshes that contain billions of elements is computationally a very challenging task. While parallel implementations can deliver a solution in a reasonable amount of time, they suffer from low cache utilization due to unstructured data access patterns. In this work, we reorder the way the mesh vertices and elements are stored in memory using Hilbert space-filling curves to improve cache utilization in FE methods for unstructured meshes. This reordering technique enumerates the mesh elements such that parallel threads access shared vertices at different time intervals, reducing the time wasted waiting to acquire locks guarding atomic regions. Further, when the linear system resulting from the FE analysis is solved using the preconditioned conjugate gradient method, the performance of the block-Jacobi preconditioner also improves, as more nonzeros are present near the stiffness matrix diagonal. Our results show that our reordering reduces the L1 and L2 cache miss-rates in the stiffness matrix assembly step by about 50 and 10 %, respectively, on a single-core processor. We also reduce the number of iterations required to solve the linear system by about 5 %. Overall, our reordering reduces the time to assemble the stiffness matrix and to solve the linear system on a 4-socket, 48-core multi-processor by about 20 %.", "paper_title": "Improved cache utilization and preconditioner efficiency through use of a space-filling curve mesh element- and vertex-reordering technique", "paper_id": "WOS:000342283400009"}