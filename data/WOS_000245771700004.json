{"auto_keywords": [{"score": 0.04881990207677595, "phrase": "layered_performance_models"}, {"score": 0.00481495049065317, "phrase": "interaction_tree_algorithms"}, {"score": 0.0047385702897315436, "phrase": "effective_architecture"}, {"score": 0.004540734419151103, "phrase": "software_architecture"}, {"score": 0.004147216579100177, "phrase": "typical_responses"}, {"score": 0.0038487848937121204, "phrase": "tracing_experiment"}, {"score": 0.0035908627899097407, "phrase": "system_architecture"}, {"score": 0.003332332086930163, "phrase": "previous_work"}, {"score": 0.0032793933580835574, "phrase": "angio_traces"}, {"score": 0.0031422859551159506, "phrase": "standard_trace_formats"}, {"score": 0.0030595112110658675, "phrase": "custom_format"}, {"score": 0.0029159568444629053, "phrase": "simpler_algorithm"}, {"score": 0.002662871928330334, "phrase": "internal_parallelism"}, {"score": 0.0025109095718850376, "phrase": "sametech"}, {"score": 0.002431699464104896, "phrase": "\"interaction_trees"}, {"score": 0.0021049977753042253, "phrase": "performance_models"}], "paper_keywords": ["software performance", " performance modelling", " performance tracing", " reverse engineering", " software architecture"], "paper_abstract": "Models of software architecture and software performance both depend on identifying and describing the interactions between the components, during typical responses. This work identifies the components and interactions that are active during a tracing experiment, hence the name \"effective architecture\" and also derives layered performance models. The System Architecture and Model Extraction Technique (SAMEtech) described here overcomes a weakness of previous work with \"angio traces\" in two ways. It only requires standard trace formats (rather than a custom format which captures causality) and it uses a simpler algorithm which scales up linearly for very large traces. It accepts some limitations: components must not have internal parallelism with forking and joining of the flow of execution. SAMEtech uses pattern matching based on \"interaction trees\" for detecting various types of interactions (asynchronous, blocking synchronous, nested synchronous, and forwarding). With this information it builds architecture and performance models. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Interaction tree algorithms to extract effective architecture and layered performance models from traces", "paper_id": "WOS:000245771700004"}