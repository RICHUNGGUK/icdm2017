{"auto_keywords": [{"score": 0.025277506657904566, "phrase": "ga"}, {"score": 0.00481495049065317, "phrase": "robust_networks"}, {"score": 0.0045591142048535165, "phrase": "ad-hoc_networks"}, {"score": 0.004364224683011796, "phrase": "vital_functionality"}, {"score": 0.004332559296185432, "phrase": "emergency_services"}, {"score": 0.00430112267051817, "phrase": "military_operations"}, {"score": 0.004254393078576148, "phrase": "disaster_relief"}, {"score": 0.004177631185971939, "phrase": "significant_impact"}, {"score": 0.003898307690037192, "phrase": "critical_software_requirements"}, {"score": 0.003800156761779008, "phrase": "packet_transfer"}, {"score": 0.0036775717816768133, "phrase": "software's_requirements"}, {"score": 0.0035980453088879393, "phrase": "link_failure"}, {"score": 0.0033329590158056935, "phrase": "requirement-satisfying_state"}, {"score": 0.003284718806701356, "phrase": "complex_network"}, {"score": 0.0031212935348800467, "phrase": "time_pressure"}, {"score": 0.0030986183831544487, "phrase": "tool_support"}, {"score": 0.002987682397171167, "phrase": "search-based_tool"}, {"score": 0.0029574198874505017, "phrase": "ndl"}, {"score": 0.0027876981671591202, "phrase": "network-hosted_applications"}, {"score": 0.0027373270600305885, "phrase": "latency_requirements"}, {"score": 0.0026296828616623994, "phrase": "network_configuration"}, {"score": 0.0025447584328314754, "phrase": "single_link_failures"}, {"score": 0.0025170626402362633, "phrase": "multi-objective_optimisation"}, {"score": 0.002480602069295564, "phrase": "conflicting_demands"}, {"score": 0.002444668348634501, "phrase": "low_resource_use"}, {"score": 0.002314481096847367, "phrase": "good_results"}, {"score": 0.0021049977753042253, "phrase": "small_networks"}], "paper_keywords": ["Network calculus", " Systems of systems", " Genetic algorithms", " Safety", " Robustness"], "paper_abstract": "Software systems that rely on ad-hoc networks are increasingly complex and prevalent. Some of these systems provide vital functionality to emergency services, military operations, and disaster relief; such systems may have significant impact on the safety of people involved in those operations. It is therefore important that those networks support critical software requirements, including those for latency of packet transfer. If a network ceases to meet the software's requirements (e.g. due to a link failure) then engineers must be able to understand it well enough to reconfigure the network and restore it to a requirement-satisfying state. Given a complex network, it is difficult for a human to do this, especially under time pressure. Tool support would therefore be valuable. This paper presents a search-based tool which takes as input a network defined using the Network Description Language (NDL), annotated with a set of network-hosted applications and a set of latency requirements between each. The tool can evolve variants of the network configuration which meet the requirements and are robust to single link failures, using multi-objective optimisation to resolve the conflicting demands of robustness and low resource use. We have investigated how the Genetic Algorithm (GA) can be configured to find good results, and how the time taken to evolve networks scales with the size of the network. We conclude that the approach is effective for small networks (tens of nodes) but scales poorly beyond that.", "paper_title": "Evolving robust networks for systems-of-systems: is it viable for large networks?", "paper_id": "WOS:000342429900012"}