{"auto_keywords": [{"score": 0.04203400118778606, "phrase": "design_space"}, {"score": 0.02809996684541807, "phrase": "candidate_sub-graphs"}, {"score": 0.00481495049065317, "phrase": "graph_reduction"}, {"score": 0.004561950666122737, "phrase": "major_concern"}, {"score": 0.004524220016675624, "phrase": "heterogeneous_multi-processor_system"}, {"score": 0.0043401761815767, "phrase": "large_design_space"}, {"score": 0.004304271837157217, "phrase": "rapid_identification"}, {"score": 0.0042157995925335544, "phrase": "tight_time-to-market_constraints"}, {"score": 0.004077995480957875, "phrase": "graph_reduction_techniques"}, {"score": 0.003895810929926511, "phrase": "partition_quality"}, {"score": 0.003784120134537663, "phrase": "proposed_approach"}, {"score": 0.00352597432462803, "phrase": "former_phase"}, {"score": 0.00345344412693677, "phrase": "dynamic_programming-based_algorithm"}, {"score": 0.0034106416719768035, "phrase": "path_flow_algorithm"}, {"score": 0.0033128141572497704, "phrase": "reducible_sub-graph_candidates"}, {"score": 0.003164765265198019, "phrase": "dag"}, {"score": 0.00313849462329633, "phrase": "task_graph_model"}, {"score": 0.0030739103951333696, "phrase": "algorithm_deloop"}, {"score": 0.0030231983220281836, "phrase": "arbitrary_directed_graph"}, {"score": 0.002936451109357539, "phrase": "reducible_sub-graphs"}, {"score": 0.002900037689072025, "phrase": "original_graph"}, {"score": 0.002828556054338357, "phrase": "algorithm_pfa"}, {"score": 0.0027934839041893604, "phrase": "dag."}, {"score": 0.0027133032795773697, "phrase": "existing_approach"}, {"score": 0.002624482632439123, "phrase": "arbitrary_task_graphs"}, {"score": 0.002591927716261631, "phrase": "latter_phase"}, {"score": 0.0025385621498128243, "phrase": "reduction_model"}, {"score": 0.0025070703395635133, "phrase": "accurate_estimation"}, {"score": 0.002486292595645607, "phrase": "task_execution_time"}, {"score": 0.00235536166148219, "phrase": "experimental_results"}, {"score": 0.002316476356455289, "phrase": "proposed_methods"}, {"score": 0.0022036216160494925, "phrase": "partitioning_quality"}, {"score": 0.0021853532419450887, "phrase": "hardware-parallel_execution"}, {"score": 0.0021049977753042253, "phrase": "proposed_sub-graph_reduction_model"}], "paper_keywords": ["Hardware/software partitioning", " Algorithm", " Graph reduction", " Reducible sub-graph"], "paper_abstract": "The hardware/software (HW/SW) partitioning is a major concern in heterogeneous multi-processor system-on-a-chip design, where the large design space prohibits rapid identification of optimal HW/SW solutions to meet tight time-to-market constraints. In this paper, we propose graph reduction techniques to reduce the design space for HW/SW partitioning without sacrificing the partition quality. There are two major phases in the proposed approach: reducible sub-graph searching and sub-graph evaluation and reduction. In the former phase, we design a dynamic programming-based algorithm, named path flow algorithm (PFA), to identify reducible sub-graph candidates for directed acyclic graph (DAG) as most previous works use DAG as task graph model. We also propose algorithm DeLoop to transform an arbitrary directed graph into a DAG such that all reducible sub-graphs on the original graph can be detected by performing algorithm PFA on the DAG. Our approach overcomes the limitation of the existing approach by enabling the identification of candidate sub-graphs in arbitrary task graphs. In latter phase, we propose a reduction model which enables accurate estimation of task execution time on hardware and design a method to select candidate sub-graphs for reduction. Experimental results demonstrate that the proposed methods not only reduce the design space, but also notably improve the partitioning quality since hardware-parallel execution of tasks is taken into account in the proposed sub-graph reduction model.", "paper_title": "Algorithmic aspects of graph reduction for hardware/software partitioning", "paper_id": "WOS:000355231600018"}