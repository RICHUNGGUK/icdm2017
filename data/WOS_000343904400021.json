{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallel_tree-search"}, {"score": 0.0047709540557306284, "phrase": "finding_shortest-span_error-correcting_cdo_codes"}, {"score": 0.004641351004344458, "phrase": "convolutional_self-doubly"}, {"score": 0.00410017409033388, "phrase": "implicitly-exhaustive_search_algorithm"}, {"score": 0.003809628721278519, "phrase": "resulting_high-performance_parallel_implementation"}, {"score": 0.0030695103543472908, "phrase": "fastest_published_cdo_validation_function"}, {"score": 0.003027462227648001, "phrase": "high-performance_pseudorandom_search_algorithms"}, {"score": 0.0028914057633212045, "phrase": "deterministic_search-space_reduction"}, {"score": 0.002723607240517261, "phrase": "novel_data_structure"}, {"score": 0.0026616868981501006, "phrase": "incremental_computations"}, {"score": 0.0026252106881752067, "phrase": "resulting_validation_function_speedup"}, {"score": 0.002265833357217618, "phrase": "load-balancing_techniques"}, {"score": 0.002194011800331242, "phrase": "processor_cores"}, {"score": 0.0021342613107011624, "phrase": "exhaustive_search"}, {"score": 0.0021049977753042253, "phrase": "search_space"}], "paper_keywords": ["Convolutional code", " self-doubly orthogonal code", " parallel tree-traversal", " data-reuse", " systematic encoder", " threshold decoder"], "paper_abstract": "Finding optimal/short-span Convolutional Self-Doubly Orthogonal (CDO) codes and Simplified-CDO (S-CDO) codes for a specified order J is computationally very challenging. This paper describes several optimizations that were applied to an implicitly-exhaustive search algorithm in order to reduce the time required for finding these types of codes. The resulting high-performance parallel implementation provides an impressive speedup that is greater than 16 300 (CDO, J - 7) and 6300 (S-CDO, J - 8) over the reference implicitly-exhaustive search algorithm, and greater than 2000 (J - 17) over the fastest published CDO validation function used in high-performance pseudorandom search algorithms. These speedups are achieved through enhancements in the deterministic search-space reduction, and a vastly improved validation function that makes use of a novel data structure for enabling data-reuse and incremental computations. The resulting validation function speedup is greater than 60 000 (S-CDO, J = 17) and 190 000 (CDO, J = 17) when compared to its reference implementation. The combination of optimizations and load-balancing techniques allowed us to leverage hundreds of processor cores in order to complete an exhaustive search over a search space that is some 10(14) times larger than what was previously possible.", "paper_title": "Optimizing the Parallel Tree-Search for Finding Shortest-Span Error-Correcting CDO Codes", "paper_id": "WOS:000343904400021"}