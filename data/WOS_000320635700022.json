{"auto_keywords": [{"score": 0.047862640203653314, "phrase": "gae"}, {"score": 0.015719706115306452, "phrase": "google_app_engine"}, {"score": 0.004520272777451894, "phrase": "scientific_computing"}, {"score": 0.004402854153653114, "phrase": "generic_master_slave_framework"}, {"score": 0.004243552607799184, "phrase": "new_algorithms"}, {"score": 0.003799275066001196, "phrase": "google_infrastructure"}, {"score": 0.003720060615588018, "phrase": "fault_tolerant_resubmission_mechanism"}, {"score": 0.0035106041824568618, "phrase": "parallel_rank"}, {"score": 0.0031262984171100856, "phrase": "google_cloud_infrastructure"}, {"score": 0.0030935140058168885, "phrase": "experimental_results"}, {"score": 0.0030449789178940787, "phrase": "important_speedup"}, {"score": 0.0028886123801902517, "phrase": "embarrassingly_parallel_monte_carlo_simulations"}, {"score": 0.0026830601040919166, "phrase": "resource_quotas"}, {"score": 0.002654911400878851, "phrase": "free_use"}, {"score": 0.0024789887640568093, "phrase": "middleware_overheads"}, {"score": 0.0023516185395256505, "phrase": "cheaper_computation"}, {"score": 0.0023025177990160487, "phrase": "cpu_cycle-based_payment_granularity"}, {"score": 0.0022307779508260205, "phrase": "hourly_billing_intervals"}, {"score": 0.0021050027911604795, "phrase": "elsevier"}], "paper_keywords": ["Cloud computing", " Scientific computing", " Performance analysis"], "paper_abstract": "We investigate the potential of Google App Engine (GAE) for scientific computing. We designed a generic master slave framework that enables implementation and integration of new algorithms by instantiating one interface and two abstract classes. Applications are dynamically scheduled, executed, and monitored by the framework on the Google infrastructure, including a fault tolerant resubmission mechanism upon certain failures. We describe the implementation of a parallel rank sort algorithm using our framework and analyse the speedup, the execution overheads, and the cost of executing it on the Google Cloud infrastructure. Experimental results show that important speedup can be obtained from using GAE, especially for embarrassingly parallel Monte Carlo simulations. The two main obstacles that hinder the performance of applications on GAE are the resource quotas upon free use (especially the 30 s sequential execution time limit) and the middleware overheads. Cost-wise, GAE offers opportunities for cheaper computation due to the CPU cycle-based payment granularity, as opposed to the hourly billing intervals of other providers such as Amazon EC2. (C) 2013 Elsevier BM. All rights reserved.", "paper_title": "Scientific computing with Google App Engine", "paper_id": "WOS:000320635700022"}