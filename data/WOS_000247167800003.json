{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "canonical_antichain_partition"}, {"score": 0.02518175735169495, "phrase": "lisset_problem"}, {"score": 0.0045789085863942825, "phrase": "window_pi"}, {"score": 0.0038158228131483854, "phrase": "lisw_problem"}, {"score": 0.00373274905589689, "phrase": "longest_increasing_subsequences"}, {"score": 0.0036976999184012535, "phrase": "sliding_window"}, {"score": 0.0036745161755323994, "phrase": "fixed-size_w"}, {"score": 0.0034722729543863267, "phrase": "set_s-fix"}, {"score": 0.0028930745799089683, "phrase": "optimal_output-sensitive_algorithm"}, {"score": 0.0027784115353943852, "phrase": "output"}, {"score": 0.0025831266474492308, "phrase": "lisset"}, {"score": 0.002471740959383183, "phrase": "set_s-var"}, {"score": 0.002456224752333807, "phrase": "variable-size_windows"}, {"score": 0.0023875955141436363, "phrase": "efficient_solution"}, {"score": 0.002335557552408265, "phrase": "lis"}, {"score": 0.0022277818172421584, "phrase": "straightforward_generalization"}, {"score": 0.002213793650525558, "phrase": "classical_lis_algorithms"}, {"score": 0.0021929755499482174, "phrase": "upper_bound"}, {"score": 0.002105007807034302, "phrase": "elsevier"}], "paper_keywords": ["longest increasing subsequences", " canonical antichain partition", " data streaming model"], "paper_abstract": "Given a sequence pi(1)pi(2) center dot center dot center dot pi(n), a longest increasing subsequence (LIS) in a window pi < l, r > = pi(l)pi(l)+1 center dot center dot center dot pi r is a longest subsequence sigma = pi i(1)pi i(2) center dot center dot center dot pi(iT) such that l <= i(1) < i(2) center dot center dot center dot < i(T) <= r and pi(i1) < pi(i2) < center dot center dot center dot < pi(iT). We consider the LISW problem, which is to find the longest increasing subsequences in a sliding window of fixed-size w over a sequence. Formally, it is to find a LIS for every window in a set S-FIX = {pi < i + 1, i + w > vertical bar 0 <= i <= n - w} boolean OR {pi < 1, i >, pi < n - i, n > vertical bar i < w}. By maintaining a canonical antichain partition in windows, wer present an optimal output-sensitive algorithm to solve this problem in O (OUTPUT) time, where OUTPUT is the sum of the lengths of the n + w - 1 LISs in those windows of S-FIX. In addition, we propose a more generalized problem called LISSET problem, which is to find a LIS for every window in a set S-VAR containing variable-size windows. By applying our algorithm, we provide an efficient solution for the LISSET problem to output a LIS (or all the LISs) in every window which is better than the straightforward generalization of classical LIS algorithms. An upper bound of our algorithm on the LISSET problem is discussed. (c) 2007 Elsevier B. V. All rights reserved.", "paper_title": "Longest increasing subsequences in windows based on canonical antichain partition", "paper_id": "WOS:000247167800003"}