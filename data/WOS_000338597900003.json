{"auto_keywords": [{"score": 0.025032392208329042, "phrase": "android"}, {"score": 0.00481495049065317, "phrase": "dalvik_bytecode"}, {"score": 0.004408729661992651, "phrase": "android_platform"}, {"score": 0.00428892403807229, "phrase": "open_nature"}, {"score": 0.0036553070575015344, "phrase": "serious_problem"}, {"score": 0.00282048824450047, "phrase": "first_formalisation_of_the_complete_dalvik_bytecode_language_including_reflection_features_and_the_first_formally_specified_control_flow_analysis"}, {"score": 0.0022994427535192492, "phrase": "google_play_app_market"}, {"score": 0.0022368274529152342, "phrase": "android_market"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dalvik", " Android", " Static analysis", " Flow logic", " Reflection"], "paper_abstract": "With the large, and rapidly increasing, number of smartphones based on the Android platform, combined with the open nature of the platform that allows \"apps\" to be downloaded and executed on the smartphone, misbehaving and malicious (malware) apps are set to become a serious problem. To counter this problem, automated tools for analysing and verifying apps are essential. Furthermore, to ensure high-fidelity of such tools, it is essential to formally specify both semantics and analyses. In this paper we present, to the best of our knowledge, the first formalisation of the complete Dalvik bytecode language including reflection features and the first formally specified control flow analysis for the language, including advanced control flow features such as dynamic dispatch, exceptions, and reflection. To determine which features to include in the formalisation and analysis, 1700 Android apps from the Google Play app market (formerly known as Android Market) were downloaded and examined. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Formalisation and analysis of Dalvik bytecode", "paper_id": "WOS:000338597900003"}