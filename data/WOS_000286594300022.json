{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "existing_macro_systems_force_programmers"}, {"score": 0.004040688646993605, "phrase": "significant_parts"}, {"score": 0.0038112201846057445, "phrase": "low-quality_language_extensions"}, {"score": 0.002966084234963723, "phrase": "new_language"}, {"score": 0.0027974705482714884, "phrase": "new_macro_system"}, {"score": 0.002682917193736698, "phrase": "robust_language_extensions"}, {"score": 0.0026384167183586015, "phrase": "easy-to-understand_specifications"}, {"score": 0.0023079225317714815, "phrase": "context-sensitive_constraints"}, {"score": 0.0022133711375320244, "phrase": "appropriate_feedback"}, {"score": 0.0021049977753042253, "phrase": "ad_hoc_validation_code"}], "paper_keywords": ["Design", " Languages"], "paper_abstract": "Existing macro systems force programmers to make a choice between clarity of specification and robustness. If they choose clarity, they must forgo validating significant parts of the specification and thus produce low-quality language extensions. If they choose robustness, they must write in a style that mingles the implementation with the specification and therefore obscures the latter. This paper introduces a new language for writing macros. With the new macro system, programmers naturally write robust language extensions using easy-to-understand specifications. The system translates these specifications into validators that detect misuses-including violations of context-sensitive constraints-and automatically synthesize appropriate feedback, eliminating the need for ad hoc validation code.", "paper_title": "Fortifying Macros", "paper_id": "WOS:000286594300022"}