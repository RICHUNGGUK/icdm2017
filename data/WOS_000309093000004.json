{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "monte-carlo_tree_search"}, {"score": 0.004769444094319619, "phrase": "go_knowledge-based_systems"}, {"score": 0.004483909657713567, "phrase": "iwcg_of"}, {"score": 0.004116440453049531, "phrase": "in-tree_phase"}, {"score": 0.004058180509184539, "phrase": "simulation_game"}, {"score": 0.003925414526537783, "phrase": "selected_ranges"}, {"score": 0.0037432199549135826, "phrase": "play-out_phase"}, {"score": 0.00369022262431101, "phrase": "priority_orders"}, {"score": 0.0036379729015583975, "phrase": "simulation_move-generators"}, {"score": 0.0035356745476539885, "phrase": "play-out_move"}, {"score": 0.0035022161192936234, "phrase": "essential_domain_knowledge"}, {"score": 0.0033395980635636644, "phrase": "dynamic_randomization_techniques"}, {"score": 0.003199687131875466, "phrase": "simulation_games"}, {"score": 0.0031693980719538287, "phrase": "experimental_testing"}, {"score": 0.003007846011394511, "phrase": "latest_version"}, {"score": 0.0026202187680903063, "phrase": "playing_strength"}, {"score": 0.0024397017438101726, "phrase": "winning_rate"}, {"score": 0.002416589819213546, "phrase": "gnugo"}, {"score": 0.0022824314760583834, "phrase": "dynamic_randomization"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Monte-Carlo Tree Search", " UCT algorithm", " Simulation game", " Domain knowledge", " Go", " Search parameters", " Move generators", " Dynamic randomization"], "paper_abstract": "This paper is an extension of the article 1131 presented at IWCG of TAA1 2010. It proposes two dynamic randomization techniques for Monte-Carlo Tree Search (MCTS) in Go. First, during the in-tree phase of a simulation game, the parameters are randomized in selected ranges before each simulation move. Second, during the play-out phase, the priority orders of the simulation move-generators are hierarchically randomized before each play-out move. Essential domain knowledge used in MCTS for Go is discussed. Both dynamic randomization techniques increase diversity while keeping the sanity of the simulation games. Experimental testing has been completely re-conducted more extensively with the latest version of GoIntellect (GI) on all three Go categories of 19 x 19, 13 x 13, and 9 x 9 boards. The results show that dynamic randomization increases the playing strength of GI significantly with 128K simulations per move, the improvement is about seven percentage points in the winning rate against GnuGo on 19 x 19 Go over the version of Cl without dynamic randomization, about three percentage points on 13 x 13 Go, and four percentage points on 9 x 9 Go. (c) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic randomization and domain knowledge in Monte-Carlo Tree Search for Go knowledge-based systems", "paper_id": "WOS:000309093000004"}