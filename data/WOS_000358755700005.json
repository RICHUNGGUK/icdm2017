{"auto_keywords": [{"score": 0.033495725113678786, "phrase": "hadoop"}, {"score": 0.031550457115170724, "phrase": "re-org_tasks"}, {"score": 0.014347425826440843, "phrase": "event_log_files"}, {"score": 0.00481495049065317, "phrase": "gom-hadoop"}, {"score": 0.004689650818647484, "phrase": "efficient_analytics"}, {"score": 0.004648609688625397, "phrase": "ordered_datasets"}, {"score": 0.004429191773525288, "phrase": "business_intelligence_analysis"}, {"score": 0.003985602342418578, "phrase": "temporal_ordering"}, {"score": 0.003747575730190958, "phrase": "user_id"}, {"score": 0.0036660436272785476, "phrase": "user_behavior"}, {"score": 0.003586278948128509, "phrase": "analytical_workload"}, {"score": 0.003492840830999027, "phrase": "relative_order-preserving"}, {"score": 0.003298631258267805, "phrase": "big_data_analytics"}, {"score": 0.0032410683344688625, "phrase": "mapreduce_programming_paradigm"}, {"score": 0.00308788133472785, "phrase": "massive_parallel_processing"}, {"score": 0.002670296619878048, "phrase": "distributed_framework"}, {"score": 0.002623669616798891, "phrase": "efficient_group-order-merge_mechanism"}, {"score": 0.002339771435910601, "phrase": "extensive_experiments"}, {"score": 0.0023192471808039746, "phrase": "real-world_datasets"}, {"score": 0.002288797099841088, "phrase": "evaluation_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["GOM-Hadoop", " Distributed framework", " MapReduce", " Ordered dataset"], "paper_abstract": "One of the most common datasets exploited by many corporations to conduct business intelligence analysis is event log files. Oftentimes, the records in event log files are temporally ordered, and need to be grouped by certain key with the temporal ordering preserved to facilitate further analysis. One such example is to group temporally ordered events by user ID in order to analyze user behavior. This kind of analytical workload, here referred to as RElative Order-pReserving based Grouping (RE-ORG), is quite common in big data analytics, where the MapReduce programming paradigm (and its open-source implementation, Hadoop) is widely adopted for massive parallel processing. However, using MapReduce/Hadoop for executing RE-ORG tasks on ordered datasets is not efficient due to its internal sort-merge mechanism when shuffling data from mappers to reducers. In this paper, we propose a distributed framework that adopts an efficient group-order-merge mechanism to speed up the execution of RE-ORG tasks. We demonstrate the advantage of our framework by formally modeling its execution process and by comparing its performance with Hadoop through extensive experiments on real-world datasets. The evaluation results show that our framework can achieve up to 6.3x speedup over Hadoop in executing RE-ORG tasks. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "GOM-Hadoop: A distributed framework for efficient analytics on ordered datasets", "paper_id": "WOS:000358755700005"}