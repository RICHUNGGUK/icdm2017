{"auto_keywords": [{"score": 0.04957466661795795, "phrase": "simulink"}, {"score": 0.03278446688500523, "phrase": "target_architecture"}, {"score": 0.00481495049065317, "phrase": "memory-efficient_multithreaded_code_generation"}, {"score": 0.004714023408114857, "phrase": "heterogeneous_mpsoc._emerging_embedded_systems"}, {"score": 0.004664352260912174, "phrase": "heterogeneous_multiprocessor_soc_architectures"}, {"score": 0.0043080553835735825, "phrase": "embedded_systems_increases"}, {"score": 0.004262643556463569, "phrase": "software_programming"}, {"score": 0.004195418010131832, "phrase": "increasing_number"}, {"score": 0.004021267064832957, "phrase": "multithreaded_code_generation"}, {"score": 0.003978866233891427, "phrase": "heterogeneous_architecture_adaptation"}, {"score": 0.003936910716320182, "phrase": "short_design_time"}, {"score": 0.0038748022659578865, "phrase": "low_cost_implementation"}, {"score": 0.0034118234596993836, "phrase": "functional_modeling_style"}, {"score": 0.0033579708256295847, "phrase": "data-intensive_and_control-dependent_target_applications"}, {"score": 0.003150900886669123, "phrase": "functional_model"}, {"score": 0.0029253546782349875, "phrase": "system_architecture_simulink_model"}, {"score": 0.002879158342988017, "phrase": "code_generator"}, {"score": 0.002833689453299307, "phrase": "multithreaded_code"}, {"score": 0.002561892963059385, "phrase": "multithread_code_generator"}, {"score": 0.0025348408238837655, "phrase": "lescea"}, {"score": 0.002468450551616404, "phrase": "dataflow_based_memory_optimization_techniques"}, {"score": 0.0023532890136269986, "phrase": "motion-jpeg_decoder"}, {"score": 0.002255431275670053, "phrase": "proposed_multithread_code_generator"}, {"score": 0.002231607958228148, "phrase": "easy_software_programming"}, {"score": 0.002208035721125305, "phrase": "different_multiprocessor_architectures"}, {"score": 0.0021847119298612264, "phrase": "substantially_reduced_data_memory_size"}, {"score": 0.0021049977753042253, "phrase": "code_memory_size"}], "paper_keywords": ["multithreaded code generation", " memory size reduction", " multiprocessor SoC", " Simulink"], "paper_abstract": "Emerging embedded systems require heterogeneous multiprocessor SoC architectures that can satisfy both high-performance and programmability. However, as the complexity of embedded systems increases, software programming on an increasing number of multiprocessors faces several critical problems, such as multithreaded code generation, heterogeneous architecture adaptation, short design time, and low cost implementation. In this paper, we present a software code generation flow based on Simulink to address these problems. We propose a functional modeling style to capture data-intensive and control-dependent target applications, and a system architecture modeling style to seamlessly transform the functional model into the target architecture. Both models are described using Simulink. From a system architecture Simulink model, a code generator produces a multithreaded code, inserting thread and communication primitives to abstract the heterogeneity of the target architecture. In addition, the multithread code generator called LESCEA applies the extensions of dataflow based memory optimization techniques, considering both data and control dependency. Experimental results on a Motion-JPEG decoder and an H.264 decoder show that the proposed multithread code generator enables easy software programming on different multiprocessor architectures with substantially reduced data memory size (up to 68.0%) and code memory size (up to 15.9%).", "paper_title": "Memory-efficient multithreaded code generation from Simulink for heterogeneous MPSoC", "paper_id": "WOS:000251650100002"}