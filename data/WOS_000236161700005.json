{"auto_keywords": [{"score": 0.030111448138176584, "phrase": "pds"}, {"score": 0.008982828631412018, "phrase": "interreplica_communication"}, {"score": 0.00481495049065317, "phrase": "multithreaded_applications"}, {"score": 0.004772137871562584, "phrase": "software-based_active_replication"}, {"score": 0.004645959941491617, "phrase": "performance_overhead"}, {"score": 0.004613983251573975, "phrase": "lsa"}, {"score": 0.0044430006374681285, "phrase": "thread_scheduling"}, {"score": 0.004373153545256941, "phrase": "existing_solutions"}, {"score": 0.004306205029641728, "phrase": "replica_behavior"}, {"score": 0.004229927464182562, "phrase": "strong_replica_consistency"}, {"score": 0.00419229472352669, "phrase": "multithreaded_environments"}, {"score": 0.003955679223407243, "phrase": "shared_data"}, {"score": 0.0036335821512795026, "phrase": "natural_concurrency"}, {"score": 0.0035851703423654432, "phrase": "leader_replica"}, {"score": 0.003505908076430666, "phrase": "follower_replicas"}, {"score": 0.002918483026678636, "phrase": "failure_behavior"}, {"score": 0.0027659126653647712, "phrase": "triplicated_system"}, {"score": 0.0026806139086152365, "phrase": "performance_evaluation"}, {"score": 0.0025404470150468387, "phrase": "lower_throughput"}, {"score": 0.0024953686545818587, "phrase": "fault-injection_campaign"}], "paper_keywords": ["fault tolerance", " replication", " multithreading", " nondeterminism", " fault injection"], "paper_abstract": "Software-based active replication is expensive in terms of performance overhead. Multithreading can help improve performance; however, thread scheduling is a source of nondeterminism in replica behavior. To achieve strong replica consistency in multithreaded environments, this paper proposes intercepting mutex lock/unlock operations performed by threads on accessing the shared data and contributes with two algorithmic solutions: 1) a Loose Synchronization Algorithm (LSA), which captures the natural concurrency in a leader replica and projects it on follower replicas through interreplica communication, and 2) a Preemptive Deterministic Scheduler (PDS) algorithm, which removes the need for interreplica communication through the notion of round and by suspending threads when it is unable (yet) to schedule them deterministically. Failure behavior and performance of LSA and PDS implementations are evaluated in a triplicated system and compared with existing solutions. A performance evaluation indicates that LSA and PDS outperform existing solutions, with PDS offering lower throughput than LSA. A fault-injection campaign shows that PDS is more robust to errors due to the absence of interreplica communication. Hence, LSA and PDS represent a trade-off between performance and dependability. Finally, LSA and PDS are demonstrated in replicating the Apache Web server, a substantial real-world application.", "paper_title": "Active replication of multithreaded applications", "paper_id": "WOS:000236161700005"}