{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "connector_architectures"}, {"score": 0.038495110929304084, "phrase": "connector_architecture"}, {"score": 0.004642292792558686, "phrase": "current_software_systems"}, {"score": 0.004537525607322823, "phrase": "important_role"}, {"score": 0.004414907432703781, "phrase": "coordination_logic"}, {"score": 0.004315249628884236, "phrase": "common_patterns"}, {"score": 0.0039027036493682887, "phrase": "connector_implementation"}, {"score": 0.0037971749182744334, "phrase": "predefined_elements"}, {"score": 0.003561865840737996, "phrase": "actual_connector_code"}, {"score": 0.003433987036569199, "phrase": "manual_resolution"}, {"score": 0.0030352396244492604, "phrase": "automated_method"}, {"score": 0.0028210902750714075, "phrase": "automated_resolution"}, {"score": 0.0026704265616705023, "phrase": "propositional_logic"}, {"score": 0.0026461080202599694, "phrase": "relational_calculus"}, {"score": 0.0025981315738078793, "phrase": "connector_theory"}, {"score": 0.0025627194819793347, "phrase": "constraint_specification"}, {"score": 0.0025047659706737215, "phrase": "important_resolution_factors"}, {"score": 0.0024481198073210567, "phrase": "constraint_solver"}, {"score": 0.002403724423251419, "phrase": "suitable_connector_architecture"}, {"score": 0.0021438877099090262, "phrase": "alloy_language"}], "paper_keywords": ["Software architecture", " Software connectors", " Constraint solving", " Middleware-based connectors", " Connector theory", " Alloy"], "paper_abstract": "In current software systems, connectors play an important role by encapsulating the communication and coordination logic. Since they share common patterns (elements) depending on characteristics of the connections, the elements can be predefined and reused. A method of connector implementation based on a composition of predefined elements naturally comprises two steps: resolution of the connector architecture, and creation of the actual connector code based on the architecture. However, manual resolution of a connector architecture is very difficult due to the number of factors to be considered. Thus, the challenge is to come up with an automated method, able to address all the important factors. In this paper, we present a method for automated resolution of connector architectures based on constraint solving techniques. We exploit a propositional logic with relational calculus for defining a connector theory, a constraint specification reflecting both the predefined parts and the important resolution factors, and employ a constraint solver to find a suitable connector architecture as a model of the theory. As a proof of the concept, we show how the theory can be captured in the Alloy language and resolved via the Alloy Analyzer.", "paper_title": "Automated resolution of connector architectures using constraint solving (ARCAS method)", "paper_id": "WOS:000335236300019"}