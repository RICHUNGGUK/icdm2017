{"auto_keywords": [{"score": 0.049124089120586564, "phrase": "good_performance"}, {"score": 0.00481495049065317, "phrase": "incoherent_ray_tracing"}, {"score": 0.00464811139983244, "phrase": "gpu_hardware"}, {"score": 0.004309725894724034, "phrase": "gpu_memory_hierarchy"}, {"score": 0.004036369952624852, "phrase": "efficient_data_management"}, {"score": 0.003995876175614403, "phrase": "task_management"}, {"score": 0.003936192447074789, "phrase": "gpu"}, {"score": 0.003916098498242888, "phrase": "based_ray_tracing"}, {"score": 0.0038186039088445524, "phrase": "dynamic_and_uncertainty"}, {"score": 0.003780286517897356, "phrase": "ray_tracing"}, {"score": 0.003704797078215222, "phrase": "data-management_layer"}, {"score": 0.0036676174658755683, "phrase": "task-management_layer"}, {"score": 0.0036125439380579626, "phrase": "fuzzy_spatial_analysis"}, {"score": 0.003540392285585644, "phrase": "two-level_ray_sorting"}, {"score": 0.003487222504700868, "phrase": "ray_bucket_structure"}, {"score": 0.0034348484776384643, "phrase": "ray_data"}, {"score": 0.003366233863411861, "phrase": "warp's_threads"}, {"score": 0.0032658649336454923, "phrase": "coherent_geometry"}, {"score": 0.0031684791285366315, "phrase": "memory_bandwidth"}, {"score": 0.002982307044758515, "phrase": "data-driven_execution"}, {"score": 0.0029374939071038146, "phrase": "coherent_data"}, {"score": 0.002878785759716458, "phrase": "adaptive_ray_compaction"}, {"score": 0.0028355237433457313, "phrase": "inactive_threads"}, {"score": 0.0027929100418926725, "phrase": "task_efficiency"}, {"score": 0.0026155094974689595, "phrase": "compaction_cost"}, {"score": 0.0024617483174454113, "phrase": "memory-optimized_dynamic_traversal_management"}, {"score": 0.0023523750536537102, "phrase": "frequent_sorting_computation"}, {"score": 0.0023287359930308864, "phrase": "compaction_operations"}, {"score": 0.0021807544600219216, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b._v."}], "paper_keywords": ["Ray tracing", " GPU", " CUDA", " Secondary ray", " Memory access"], "paper_abstract": "To obtain good performance on the GPU hardware, it is necessary to design algorithms to manage data, access memory under GPU memory hierarchy, and schedule more efficient threads. In this paper, we propose an efficient data management and task management designed for GPU based ray tracing. Due to the dynamic and uncertainty in ray tracing, we design data-management layer and task-management layer combined with fuzzy spatial analysis, use the two-level ray sorting and a ray bucket structure to reorganize ray data, then a warp's threads can be scheduled to access coherent geometry and nodes data, reduce memory bandwidth, and dispatch the data locally. We schedule tasks in data-driven execution according to coherent data, propose an adaptive ray compaction to eliminate inactive threads, maintain task efficiency of threads in a warp, and design two heuristics to decrease the compaction cost. On the basis of it, we also introduce a memory-optimized dynamic traversal management to reduce incoherent memory access, and avoid frequent sorting computation and compaction operations. Our experiments demonstrate all of these work combined can achieve good performance. Crown Copyright (C) 2012 Published by Elsevier B. V. All rights reserved.", "paper_title": "Efficient data management for incoherent ray tracing", "paper_id": "WOS:000311506900001"}