{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multiplicative_drift_analysis"}, {"score": 0.010700025846192033, "phrase": "expected_time"}, {"score": 0.00464811139983244, "phrase": "suitable_way"}, {"score": 0.004509694461067052, "phrase": "randomized_search_heuristics"}, {"score": 0.004442032546224076, "phrase": "evolutionary_algorithms"}, {"score": 0.004331501320993783, "phrase": "classical_drift_theorem"}, {"score": 0.004288059466938456, "phrase": "easier_analyses"}, {"score": 0.004223708778943785, "phrase": "often_encountered_situation"}, {"score": 0.004160319763461951, "phrase": "optimization_progress"}, {"score": 0.004036369952624852, "phrase": "current_distance"}, {"score": 0.0037235274565193665, "phrase": "classical_problem"}, {"score": 0.003576286811853861, "phrase": "arbitrary_linear_pseudo-boolean_function"}, {"score": 0.0034348484776384643, "phrase": "relatively_simple_proof"}, {"score": 0.003332440548684892, "phrase": "linear_function"}, {"score": 0.0030895394261534776, "phrase": "bit_string"}, {"score": 0.0026823700218343506, "phrase": "corresponding_lower_bound"}, {"score": 0.002388283252319309, "phrase": "natural_proofs"}, {"score": 0.0023523750536537102, "phrase": "better_constants"}, {"score": 0.0023053339328456234, "phrase": "best_known_runtime_bounds"}, {"score": 0.002214048743052355, "phrase": "combinatorial_problems"}, {"score": 0.002137137933768807, "phrase": "shortest_paths"}, {"score": 0.0021049977753042253, "phrase": "euler_tours"}], "paper_keywords": ["Evolutionary algorithms", " Randomized search heuristics", " Runtime analysis", " Drift analysis"], "paper_abstract": "We introduce multiplicative drift analysis as a suitable way to analyze the runtime of randomized search heuristics such as evolutionary algorithms. Our multiplicative version of the classical drift theorem allows easier analyses in the often encountered situation that the optimization progress is roughly proportional to the current distance to the optimum. To display the strength of this tool, we regard the classical problem of how the (1+1) Evolutionary Algorithm optimizes an arbitrary linear pseudo-Boolean function. Here, we first give a relatively simple proof for the fact that any linear function is optimized in expected time O(nlogn), where n is the length of the bit string. Afterwards, we show that in fact any such function is optimized in expected time at most (1+o(1))1.39enlnn, again using multiplicative drift analysis. We also prove a corresponding lower bound of (1-o(1))enlnn which actually holds for all functions with a unique global optimum. We further demonstrate how our drift theorem immediately gives natural proofs (with better constants) for the best known runtime bounds for the (1+1) Evolutionary Algorithm on combinatorial problems like finding minimum spanning trees, shortest paths, or Euler tours in graphs.", "paper_title": "Multiplicative Drift Analysis", "paper_id": "WOS:000310222000008"}