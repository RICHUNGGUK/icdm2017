{"auto_keywords": [{"score": 0.039415135072106644, "phrase": "partial_page_updates"}, {"score": 0.015164139669368153, "phrase": "flash_memory"}, {"score": 0.00481495049065317, "phrase": "hybrid_flash_translation"}, {"score": 0.004691465925553365, "phrase": "write_reduction"}, {"score": 0.004594951819987416, "phrase": "nand_flash_memory"}, {"score": 0.004430784015995566, "phrase": "embedded_devices"}, {"score": 0.004317109072311102, "phrase": "solid_state_drives"}, {"score": 0.004141238989360548, "phrase": "low_power_consumption"}, {"score": 0.0036363418376496484, "phrase": "early_depletion"}, {"score": 0.003598705020845104, "phrase": "free_pages"}, {"score": 0.0035614563596982306, "phrase": "frequent_garbage_collections"}, {"score": 0.0033633514001658086, "phrase": "large_portion"}, {"score": 0.0032599633778910516, "phrase": "file_contents"}, {"score": 0.003143341238802547, "phrase": "general-purpose_cache"}, {"score": 0.003015143226706584, "phrase": "duplicated_contents"}, {"score": 0.0028325548627901004, "phrase": "hybrid_approach"}, {"score": 0.002579140290642792, "phrase": "endurance_problem"}, {"score": 0.0025524176761139413, "phrase": "performance_degradation"}, {"score": 0.00239778324260337, "phrase": "latest_contents"}, {"score": 0.002360607691114015, "phrase": "high-speed_temporary_storage"}, {"score": 0.002324007171619245, "phrase": "content_cache"}, {"score": 0.0022642601698943687, "phrase": "experimental_results"}, {"score": 0.0021381565332182773, "phrase": "garbage_collections"}, {"score": 0.0021049977753042253, "phrase": "small_overhead"}], "paper_keywords": ["Flash memory", " endurance", " caching", " logging", " flash translation layer", " solid state drives", " partial page update"], "paper_abstract": "NAND flash memory has been widely used to build embedded devices such as smartphones and solid state drives (SSD) because of its high performance, low power consumption, great shock resistance and small form factor. However, its lifetime and performance are greatly constrained by partial page updates, which will lead to early depletion of free pages and frequent garbage collections. On the one hand, partial page updates are prevalent as a large portion of I/O does not modify file contents drastically. On the other hand, general-purpose cache usually does not specifically consider and eliminate duplicated contents, despite its popularity. In this paper, we propose a hybrid approach called FTL2, which employs both logging and mapping techniques in flash translation layer (FTL), to tackle the endurance problem and performance degradation caused by partial page updates in flash memory. FTL2 logs the latest contents in a high-speed temporary storage, called Content Cache to handle partial page updates. Experimental results show that FTL2 can greatly reduce page writes and postpone garbage collections with a small overhead.", "paper_title": "FTL2 : A Hybrid Flash Translation Layer with Logging for Write Reduction in Flash Memory", "paper_id": "WOS:000321865100011"}