{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "python"}, {"score": 0.008546128111886948, "phrase": "computational_physics"}, {"score": 0.004630910803911567, "phrase": "relatively_new_computing_language"}, {"score": 0.004559270778306828, "phrase": "guido_van_rossum"}, {"score": 0.004523865550323285, "phrase": "a.s._tanenbaum"}, {"score": 0.004488734023485018, "phrase": "r._van_renesse"}, {"score": 0.004453874101119545, "phrase": "h._van_staveren"}, {"score": 0.0044192837023190445, "phrase": "g.j._sharp"}, {"score": 0.004384960761826366, "phrase": "s.j._mullender"}, {"score": 0.0043509032299218955, "phrase": "a.j._jansen"}, {"score": 0.004317109072311102, "phrase": "g._van_rossum"}, {"score": 0.004233762728640565, "phrase": "amoeba_distributed_operating_system"}, {"score": 0.0033502512757488433, "phrase": "suitable_language"}, {"score": 0.0031474338010045386, "phrase": "high_performance_computing"}, {"score": 0.0031107911390188055, "phrase": "compiled_language"}, {"score": 0.00300339527261653, "phrase": "computer_algebra"}, {"score": 0.002956876759042817, "phrase": "maple"}, {"score": 0.0028436364707396613, "phrase": "program_development"}, {"score": 0.002810520668490478, "phrase": "interpreted_language"}, {"score": 0.0027886573969044042, "phrase": "considerable_advantages"}, {"score": 0.0027134630181926854, "phrase": "python's_attractions"}, {"score": 0.0023946630984825207, "phrase": "line_documentation"}, {"score": 0.0022320552886508876, "phrase": "vpython"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["education", " graphics", " computational physics", " computation", " python"], "paper_abstract": "Python is a relatively new computing language, created by Guido van Rossum [A.S. Tanenbaum, R. van Renesse, H. van Staveren, G.J. Sharp, S.J. Mullender, A.J. Jansen, G. van Rossum, Experiences with the Amoeba distributed operating system, Communications of the ACM 33 (1990) 46-63; also on-line at http://www.cs.vu.nl/pub/amoeba/. [6]], which is particularly suitable for teaching a course in computational physics. There are two questions to be considered: (i) For whom is the course intended? (ii) What are the criteria for a suitable language, and why choose Python? The criteria include the nature of the application. High performance computing requires a compiled language, e.g., FORTRAN. For some applications a computer algebra, e.g., Maple, is appropriate. For teaching, and for program development, an interpreted language has considerable advantages: Python appears particularly suitable. Python's attractions include (i) its system of modules which makes it easy to extend, (ii) its excellent graphics (VPython module), (iii) its excellent on line documentation, (iv) it is free and can be downloaded from the web. Python and VPython will be described briefly, and some programs demonstrated. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Python: a language for computational physics", "paper_id": "WOS:000248161700080"}