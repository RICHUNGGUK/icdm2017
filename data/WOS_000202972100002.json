{"auto_keywords": [{"score": 0.04966877349162058, "phrase": "atomic_blocks"}, {"score": 0.038759453592462786, "phrase": "atomic_block"}, {"score": 0.00481495049065317, "phrase": "memory_transactions"}, {"score": 0.004475266375001531, "phrase": "language's_implementation"}, {"score": 0.004379977556546879, "phrase": "existing_work"}, {"score": 0.004231699728933577, "phrase": "word-based_transactional_memory"}, {"score": 0.0041773934798743405, "phrase": "scalable_multiprocessor_performance"}, {"score": 0.0040708542958968605, "phrase": "basic_structure"}, {"score": 0.0037348894128879082, "phrase": "shared_memory"}, {"score": 0.003592859432554987, "phrase": "thread-private_log"}, {"score": 0.0032259472087775138, "phrase": "four-pronged_approach"}, {"score": 0.00307657476125683, "phrase": "new_'direct_access'_implementation"}, {"score": 0.0030239842475439814, "phrase": "thread-private_logs"}, {"score": 0.002934098412396701, "phrase": "compiler_optimizations"}, {"score": 0.002566997205079849, "phrase": "duplicate_log_entries"}, {"score": 0.0024061887405214186, "phrase": "gc-time_techniques"}, {"score": 0.0023346234464901978, "phrase": "long-running_atomic_blocks"}, {"score": 0.0022848092812445533, "phrase": "short-running_scalable_concurrent_benchmarks"}, {"score": 0.0022073031056287903, "phrase": "non-thread-safe_baseline"}, {"score": 0.0021695394558562927, "phrase": "long_atomic_blocks"}, {"score": 0.002132420504803564, "phrase": "shared_memory_accesses"}], "paper_keywords": ["algorithms", " languages", " performance", " atomicity", " critical regions", " transactional memory"], "paper_abstract": "Atomic blocks allow programmers to delimit sections of code as 'atomic', leaving the language's implementation to enforce atomicity. Existing work has shown how to implement atomic blocks over word-based transactional memory that provides scalable multiprocessor performance without requiring changes to the basic structure of objects in the heap. However, these implementations perform poorly because they interpose on all accesses to shared memory in the atomic block, redirecting updates to a thread-private log which must be searched by reads in the block and later reconciled with the heap when leaving the block. This paper takes a four-pronged approach to improving performance: (1) we introduce a new 'direct access' implementation that avoids searching thread-private logs, (2) we develop compiler optimizations to reduce the amount of logging (e. g. when a thread accesses the same data repeatedly in an atomic block), (3) we use runtime filtering to detect duplicate log entries that are missed statically, and (4) we present a series of GC-time techniques to compact the logs generated by long-running atomic blocks. Our implementation supports short-running scalable concurrent benchmarks with less than 50% overhead over a non-thread-safe baseline. We support long atomic blocks containing millions of shared memory accesses with a 2.5-4.5x slowdown.", "paper_title": "Optimizing memory transactions", "paper_id": "WOS:000202972100002"}