{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "xml-driven_application_generators"}, {"score": 0.004753670676591174, "phrase": "compiler_construction_tools"}, {"score": 0.0045162169185355, "phrase": "conventional_compiler_construction_tools"}, {"score": 0.004050116768809519, "phrase": "document_interface"}, {"score": 0.003922378980031565, "phrase": "standard_stream-oriented_xml_processing_framework"}, {"score": 0.003362944428837724, "phrase": "suitable_tokens"}, {"score": 0.003133844153806967, "phrase": "next_step"}, {"score": 0.003034916887102753, "phrase": "syntactic_structure"}, {"score": 0.002901627749562029, "phrase": "generation-specific_context-free_grammars"}, {"score": 0.0027564303939865476, "phrase": "semantic_actions"}, {"score": 0.002635339648135844, "phrase": "generation-oriented_translation_schemes"}, {"score": 0.0025034338848015166, "phrase": "generation_tasks"}, {"score": 0.002378114613631841, "phrase": "working_application_generators"}, {"score": 0.0023327506323251074, "phrase": "standard_parser_generation_technology"}, {"score": 0.0021049977753042253, "phrase": "shortest-route_search_applications"}], "paper_keywords": ["Application Generators", " Compiler Construction Tools", " XML Processing", " Software Development Approach"], "paper_abstract": "This paper describes how to use conventional compiler construction tools, and parser generators in particular, to build XML-driven application generators. In our approach, the document interface is provided by a standard stream-oriented XML processing framework (e. g., SAX or StAX). This framework is used to program a generic, customizable XML scanner that transforms documents into streams of suitable tokens (opening and closing tags, character data, etc.). The next step is to characterize the syntactic structure of these streams in terms of generation-specific context-free grammars. By adding suitable semantic attributes and semantic actions to these grammars, developers obtain generation-oriented translation schemes: high-level specifications of the generation tasks. These specifications are then turned into working application generators by using standard parser generation technology. We illustrate the approach with < e-Subway >, an XML-driven generator of shortest-route search applications in subway networks.", "paper_title": "Building XML-Driven Application Generators with Compiler Construction Tools", "paper_id": "WOS:000306542400003"}