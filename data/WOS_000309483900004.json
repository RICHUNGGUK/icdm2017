{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "jit_compiled_code"}, {"score": 0.0150102936004729, "phrase": "web_applications"}, {"score": 0.004747997855358171, "phrase": "binary_code_patching"}, {"score": 0.004703878334423852, "phrase": "javascript_engine._javascript"}, {"score": 0.004638462976078815, "phrase": "core_language"}, {"score": 0.004344965512058521, "phrase": "web_pages"}, {"score": 0.004108161406159407, "phrase": "javascript_engines"}, {"score": 0.004050996777117918, "phrase": "important_issue"}, {"score": 0.003920674807745575, "phrase": "execution_speed"}, {"score": 0.0037768448223352083, "phrase": "jit"}, {"score": 0.003570889780957037, "phrase": "jit_compilers"}, {"score": 0.0032370412139943808, "phrase": "embedded_systems"}, {"score": 0.0031770714776989282, "phrase": "system_resources"}, {"score": 0.0030178044717552605, "phrase": "reusing_technique"}, {"score": 0.002948066398723126, "phrase": "javascript_engine"}, {"score": 0.0029069972482610403, "phrase": "compilation_overhead"}, {"score": 0.0027741761880779535, "phrase": "runtime_dependency"}, {"score": 0.0027483472371835865, "phrase": "jit_compiled_binary_code"}, {"score": 0.0026474076254702525, "phrase": "direct_binary_code_patching_method"}, {"score": 0.002586224704850524, "phrase": "javascript"}, {"score": 0.0025501663511912002, "phrase": "webkit"}, {"score": 0.0023996890513009743, "phrase": "total_compilation_time"}, {"score": 0.0023662411481713704, "phrase": "modified_sfx_javascript_engine"}, {"score": 0.0021049977753042253, "phrase": "web_services"}], "paper_keywords": ["JavaScript engine", " JIT compiler", " binary code patching"], "paper_abstract": "JavaScript is a core language of web applications. As the most frequently used web language, it is used in more than 90% of web pages around the world. As a result, the performance of JavaScript engines becomes an important issue. In order to increase the execution speed of web applications, many JavaScript engines are embedded in JIT (Just-in-time) Compiler. However, JIT compilers are required to execute and compile applications at the same time. Therefore, this technique has been hardly applicable to embedded systems, in which system resources are limited. In this paper, we present a reusing technique of JIT compiled code in the JavaScript engine to reduce compilation overhead. In order to reuse JIT compiled code, problems for runtime dependency in JIT compiled binary code must be resolved. We used a direct binary code patching method on Squirrel FisheXtreme (SFX) JavaScript engine of WebKit for the experiment. Through the experiment, we showed that the total compilation time of the modified SFX JavaScript engine was slightly increased up to 9.4% by saving codes, but the time was reduced up to 49%, averagely 44%, depending on web services when the code was reused.", "paper_title": "REUSE OF JIT COMPILED CODE BASED ON BINARY CODE PATCHING IN JAVASCRIPT ENGINE", "paper_id": "WOS:000309483900004"}