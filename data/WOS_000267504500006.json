{"auto_keywords": [{"score": 0.03448187694539982, "phrase": "application_models"}, {"score": 0.010294375648462518, "phrase": "domain_analysis"}, {"score": 0.007590294213384583, "phrase": "domain_knowledge"}, {"score": 0.00481495049065317, "phrase": "domain_models"}, {"score": 0.004766090327062509, "phrase": "application_design"}, {"score": 0.0043258453436258405, "phrase": "system_developers"}, {"score": 0.004260134699483774, "phrase": "valid_applications"}, {"score": 0.003906116922372891, "phrase": "metamodeling_techniques"}, {"score": 0.003866443402315402, "phrase": "feature-oriented_approaches"}, {"score": 0.003807684498435389, "phrase": "architectural-based_methods"}, {"score": 0.0033857878144822906, "phrase": "insufficient_guidelines"}, {"score": 0.0032008144731234265, "phrase": "domain_rules"}, {"score": 0.0029951555610569225, "phrase": "application-specific_knowledge"}, {"score": 0.0027741761880779535, "phrase": "general_approach"}, {"score": 0.002690406375639144, "phrase": "domain_modeling"}, {"score": 0.0025958582759972315, "phrase": "specifying_domains"}, {"score": 0.0022961534630650347, "phrase": "adom_approach"}, {"score": 0.0022382002476510573, "phrase": "uml_domain_models"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Domain engineering", " Software product line engineering", " Domain analysis", " Metamodeling", " Feature oriented", " Variability management"], "paper_abstract": "Domain analysis enables identifying families of applications and capturing their terminology in order to assist and guide system developers to design valid applications in the domain. One major way of carrying out the domain analysis is modeling. Several studies suggest using metamodeling techniques, feature-oriented approaches, or architectural-based methods for modeling domains and specifying applications in those domains. However, these methods mainly focus on representing the domain knowledge, providing insufficient guidelines (if any) for creating application models that satisfy the domain rules and constraints. In particular, validation of the application models which include application-specific knowledge is insufficiently dealt. In order to fill these lacks, we propose a general approach, called Application-based DOmain Modeling (ADOM), which enables specifying domains and applications similarly, (re)using domain knowledge in application models, and validating the application models against the relevant In this paper we present the ADOM approach, demonstrating its application to UML domain models. 2.0 class and sequence diagrams. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Utilizing domain models for application design and validation", "paper_id": "WOS:000267504500006"}