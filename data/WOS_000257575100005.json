{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "repast_agent-based_simulations"}, {"score": 0.004509694461067052, "phrase": "agent_toolkits"}, {"score": 0.0044644734709113985, "phrase": "reliable_templates"}, {"score": 0.0043533862892678864, "phrase": "even_the_largest_mas_simulations"}, {"score": 0.004202472962684885, "phrase": "computational_limitations"}, {"score": 0.003955787027818305, "phrase": "parallel_logic"}, {"score": 0.003876806615011266, "phrase": "design_process"}, {"score": 0.0036125439380579626, "phrase": "processing_power"}, {"score": 0.003576286811853861, "phrase": "true_interoperation"}, {"score": 0.003540392285585644, "phrase": "sequential_agent-simulation_platforms"}, {"score": 0.0034348484776384643, "phrase": "different_toolkits"}, {"score": 0.0033492947290751996, "phrase": "common_abstract_domains"}, {"score": 0.0030895394261534776, "phrase": "computational_power"}, {"score": 0.0030431198971423937, "phrase": "distributed_simulation_infrastructure"}, {"score": 0.0029973957125353306, "phrase": "design_efficiency"}, {"score": 0.002952356518921907, "phrase": "agent_toolkit"}, {"score": 0.002821247621250663, "phrase": "higher-level_architecture"}, {"score": 0.002723301730223192, "phrase": "multiple_instances"}, {"score": 0.0026823700218343506, "phrase": "java-based_lightweight_agentsimulation_toolkit_repast"}, {"score": 0.0025892330566358503, "phrase": "engineering_process"}, {"score": 0.0024247382451294255, "phrase": "specific_case"}, {"score": 0.002388283252319309, "phrase": "repast_toolkit"}, {"score": 0.0023170054862555896, "phrase": "performance_results"}, {"score": 0.0022706700510423954, "phrase": "significant_speedup"}, {"score": 0.002158836285985314, "phrase": "hla._copyright"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["distributed simulation", " multi-agent simulation"], "paper_abstract": "Large, experimental multi-agent system (MAS) simulations are highly demanding tasks, both computationally and developmentally. Agent toolkits provide reliable templates for the design of even the largest MAS simulations, without offering a solution to computational limitations. Conversely, distributed simulation architectures offer performance benefits, but the introduction of parallel logic can complicate the design process significantly. The motivations of distribution are not limited to this question of processing power. True interoperation of sequential agent-simulation platforms would allow agents designed using different toolkits to transparently interact in common abstract domains. This paper discusses the design and implementation of a system capable of harnessing the computational power of a distributed simulation infrastructure with the design efficiency of an agent toolkit. The system permits integration, through a higher-level architecture (HLA) federation, of multiple instances of the Java-based lightweight agentsimulation toolkit RePast. This paper defines abstractly the engineering process necessary in creating such middleware, and reports on the experience in the specific case of the RePast toolkit. The paper also presents performance results that illustrate that significant speedup can be achieved through the integration of RePast with HLA. Copyright (c) 2008 John Wiley & Sons, Ltd.", "paper_title": "Distributing RePast agent-based simulations with HLA", "paper_id": "WOS:000257575100005"}