{"auto_keywords": [{"score": 0.04472882712454684, "phrase": "local_image_processing_algorithms"}, {"score": 0.02928782728207763, "phrase": "window_memoization"}, {"score": 0.00481495049065317, "phrase": "high-performance_image_processing_software"}, {"score": 0.004523272849033429, "phrase": "new_performance_improvement_technique"}, {"score": 0.004338661611644755, "phrase": "software_implementations"}, {"score": 0.004104132253183181, "phrase": "memoization_techniques"}, {"score": 0.003909301559145041, "phrase": "data_redundancy"}, {"score": 0.003855347387268162, "phrase": "image_processing"}, {"score": 0.0035222812668916736, "phrase": "redundant_computations"}, {"score": 0.0033549790559972053, "phrase": "similar_neighborhoods"}, {"score": 0.0029602552900111407, "phrase": "performance_improvement"}, {"score": 0.0028000270988465486, "phrase": "optimized_architecture"}, {"score": 0.002630085891013006, "phrase": "six_image_processing_algorithms"}, {"score": 0.002505054869094183, "phrase": "performance_model"}, {"score": 0.0021947755130109696, "phrase": "total_average_speedup"}, {"score": 0.002164432930854161, "phrase": "different_algorithms"}, {"score": 0.002134508934917511, "phrase": "different_input_images"}, {"score": 0.0021049977753042253, "phrase": "different_processors"}], "paper_keywords": ["Computational redundancy", " Memoization", " Reuse", " High-performance real-time image processing"], "paper_abstract": "In this paper, we present a new performance improvement technique, window memoization, for software implementations of local image processing algorithms. Window memoization combines the memoization techniques proposed in software and hardware with data redundancy in image processing to improve the performance of local image processing algorithms. It minimizes the number of redundant computations performed on an image by identifying similar neighborhoods of pixels in the image and skipping the computations that are not necessary. This leads to performance improvement in software. We have developed an optimized architecture for window memoization in software and applied it to six image processing algorithms. We have also developed a performance model to predict the speedups obtained by window memoization in software. The typical (average) speedups range from 1.2x to 7.9x while the total average speedup for different algorithms with different input images across different processors is 3.95x.", "paper_title": "Window memoization: toward high-performance image processing software", "paper_id": "WOS:000350563300002"}