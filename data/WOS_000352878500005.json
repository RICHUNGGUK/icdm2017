{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cloud_storage_auditing"}, {"score": 0.009600438084970875, "phrase": "current_auditing_protocols"}, {"score": 0.004766683200410046, "phrase": "key-exposure_resistance"}, {"score": 0.004601508848655033, "phrase": "important_service"}, {"score": 0.004397487039229447, "phrase": "public_cloud"}, {"score": 0.004160319763461951, "phrase": "client's_secret_key"}, {"score": 0.003780286517897356, "phrase": "possibly_weak_sense"}, {"score": 0.003704797078215222, "phrase": "low_security_settings"}, {"score": 0.0031684791285366315, "phrase": "new_aspect"}, {"score": 0.0029672941061574375, "phrase": "client's_key_exposure"}, {"score": 0.0028642924503126154, "phrase": "first_practical_solution"}, {"score": 0.002821247621250663, "phrase": "new_problem"}, {"score": 0.0026959452932289797, "phrase": "security_model"}, {"score": 0.0026688629249775925, "phrase": "auditing_protocol"}, {"score": 0.0026420518944303716, "phrase": "key-exposure_resilience"}, {"score": 0.0024993218789131437, "phrase": "binary_tree_structure"}, {"score": 0.0024617483174454113, "phrase": "preorder_traversal_technique"}, {"score": 0.0024125253170522816, "phrase": "secret_keys"}, {"score": 0.0023053339328456234, "phrase": "novel_authenticator_construction"}, {"score": 0.0022592313766072658, "phrase": "forward_security"}, {"score": 0.002202894673025544, "phrase": "blockless_verifiability"}, {"score": 0.0021697677572213086, "phrase": "security_proof"}, {"score": 0.002137137933768807, "phrase": "performance_analysis"}], "paper_keywords": ["Data storage", " cloud storage auditing", " homomorphic linear authenticator", " cloud computation", " key-exposure resistance"], "paper_abstract": "Cloud storage auditing is viewed as an important service to verify the integrity of the data in public cloud. Current auditing protocols are all based on the assumption that the client's secret key for auditing is absolutely secure. However, such assumption may not always be held, due to the possibly weak sense of security and/or low security settings at the client. If such a secret key for auditing is exposed, most of the current auditing protocols would inevitably become unable to work. In this paper, we focus on this new aspect of cloud storage auditing. We investigate how to reduce the damage of the client's key exposure in cloud storage auditing, and give the first practical solution for this new problem setting. We formalize the definition and the security model of auditing protocol with key-exposure resilience and propose such a protocol. In our design, we employ the binary tree structure and the preorder traversal technique to update the secret keys for the client. We also develop a novel authenticator construction to support the forward security and the property of blockless verifiability. The security proof and the performance analysis show that our proposed protocol is secure and efficient.", "paper_title": "Enabling Cloud Storage Auditing With Key-Exposure Resistance", "paper_id": "WOS:000352878500005"}