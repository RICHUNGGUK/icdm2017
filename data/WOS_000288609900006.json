{"auto_keywords": [{"score": 0.034378871215094774, "phrase": "utility_function"}, {"score": 0.010876313759132828, "phrase": "alternative_mappings"}, {"score": 0.009948612873529935, "phrase": "optimization_problem"}, {"score": 0.008870131878711645, "phrase": "adaptive_workflow_execution"}, {"score": 0.00481495049065317, "phrase": "concurrent_workflows"}, {"score": 0.0046632033374901715, "phrase": "coordinated_use"}, {"score": 0.004633429997452688, "phrase": "computational_resources"}, {"score": 0.0046038458731764926, "phrase": "workflow_definition_languages"}, {"score": 0.004195418010131832, "phrase": "physical_resources"}, {"score": 0.004063116219782941, "phrase": "workflow_management_system"}, {"score": 0.0038600230206554792, "phrase": "available_resources"}, {"score": 0.00376230106601654, "phrase": "shared_resources"}, {"score": 0.0036670439738769505, "phrase": "resource_capabilities"}, {"score": 0.0035286453655992904, "phrase": "task-to-resource_mapping"}, {"score": 0.0033845816848753073, "phrase": "utility_functions"}, {"score": 0.00334144503360907, "phrase": "relative_merits"}, {"score": 0.0031540120386134058, "phrase": "candidate_mapping"}, {"score": 0.0028463059289874637, "phrase": "different_objectives"}, {"score": 0.002416589459425828, "phrase": "execution_environments"}, {"score": 0.0023934306706217797, "phrase": "multiple_resources"}, {"score": 0.0022882500116799777, "phrase": "multiple_workflows"}, {"score": 0.002244596395352896, "phrase": "experimental_evaluation"}, {"score": 0.002208853811052348, "phrase": "utility_measures"}, {"score": 0.0021876814398268775, "phrase": "response_time"}, {"score": 0.0021528432044086044, "phrase": "pegasus_workflow_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scientific workflows", " utility functions", " adaptivity"], "paper_abstract": "Workflows are widely used in applications that require coordinated use of computational resources. Workflow definition languages typically abstract over some aspects of the way in which a workflow is to be executed, such as the level of parallelism to be used or the physical resources to be deployed. As a result, a workflow management system has the responsibility of establishing how best to map tasks within a workflow to the available resources. As workflows are typically run over shared resources, and thus face unpredictable and changing resource capabilities, there may be benefit to be derived from adapting the task-to-resource mapping while a workflow is executing. This paper describes the use of utility functions to express the relative merits of alternative mappings; in essence, a utility function can be used to give a score to a candidate mapping, and the exploration of alternative mappings can be cast as an optimization problem. In this approach, changing the utility function allows adaptations to be carried out with a view to meeting different objectives. The contributions of this paper include: (i) a description of how adaptive workflow execution can be expressed as an optimization problem where the objective of the adaptation is to maximize a utility function; (ii) a description of how the approach has been applied to support adaptive workflow execution in execution environments consisting of multiple resources, such as grids or clouds, in which adaptations are coordinated across multiple workflows; and (iii) an experimental evaluation of the approach with utility measures based on response time and profit using the Pegasus workflow system. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Utility functions for adaptively executing concurrent workflows", "paper_id": "WOS:000288609900006"}