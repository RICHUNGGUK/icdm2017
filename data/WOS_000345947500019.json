{"auto_keywords": [{"score": 0.05007851897071715, "phrase": "analysis_classes"}, {"score": 0.04209255139249549, "phrase": "software_architect's_preferences"}, {"score": 0.038769847507469174, "phrase": "ccic"}, {"score": 0.015473040379752378, "phrase": "software_components"}, {"score": 0.004565007074039171, "phrase": "software_design_phase"}, {"score": 0.0042820680211904235, "phrase": "distinct_components"}, {"score": 0.00378767277402891, "phrase": "clustering-based_method"}, {"score": 0.0034777028461723198, "phrase": "logical_components"}, {"score": 0.0030923570058383355, "phrase": "appropriate_logical_components"}, {"score": 0.002947266048104005, "phrase": "proper_number"}, {"score": 0.002824005136794786, "phrase": "software_architects"}, {"score": 0.0027058852678238632, "phrase": "implementation_framework"}, {"score": 0.002431699464104896, "phrase": "experimental_results"}, {"score": 0.0022087165619569006, "phrase": "existing_component_identification_methods"}, {"score": 0.0021735890994119757, "phrase": "fca-based_and_crud-based_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Component identification", " Software architect's preferences", " Hierarchical evolutionary algorithm"], "paper_abstract": "Context: Component identification during software design phase denotes a process of partitioning the functionalities of a system into distinct components. Several component identification methods have been proposed that cannot be customized to software architect's preferences. Objectives: In this paper, we propose a clustering-based method by the name of CCIC (Clustering analysis Classes to Identify software Components) to identify logical components from analysis classes according to software architect's preferences. Method: CCIC uses a customized HEA (Hierarchical Evolutionary Algorithm) to automatically classify analysis classes into appropriate logical components and avoid the problem of searching for the proper number of components. Furthermore, it allows software architects to determine the constraints in their deployment and implementation framework. Results: A series of experiments were conducted for four real-world case studies according to various proposed weighting schemes. Conclusion: According to experimental results, it is concluded that CCIC can identify more cohesive and independent components with respect to software architect's preferences in comparison with the existing component identification methods such as FCA-based and CRUD-based methods. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "CCIC: Clustering analysis classes to identify software components", "paper_id": "WOS:000345947500019"}