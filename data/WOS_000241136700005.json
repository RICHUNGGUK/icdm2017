{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "extended_state_identification"}, {"score": 0.0046993598473345395, "phrase": "model_checker"}, {"score": 0.004454691230204595, "phrase": "model_checking"}, {"score": 0.004326624385772596, "phrase": "finite_state_system"}, {"score": 0.004121275290411653, "phrase": "test_inputs"}, {"score": 0.004061584718427419, "phrase": "generated_test_inputs"}, {"score": 0.0040222701316738295, "phrase": "state_characterization"}, {"score": 0.0038876302202924644, "phrase": "internal_states"}, {"score": 0.003631671435460452, "phrase": "test_model"}, {"score": 0.0033271045779740683, "phrase": "temporal_logic"}, {"score": 0.0031690434364310435, "phrase": "model_checking_tool"}, {"score": 0.0031231012822640672, "phrase": "testing_input_generation"}, {"score": 0.0029031614127920232, "phrase": "input_model"}, {"score": 0.002861062731782219, "phrase": "testing_goal"}, {"score": 0.0028058765785670546, "phrase": "model_checking_algorithm"}, {"score": 0.002711842889248926, "phrase": "used_tool"}, {"score": 0.002672511078070529, "phrase": "presented_approach"}, {"score": 0.002608218347502229, "phrase": "small_changes"}, {"score": 0.0025207920578878894, "phrase": "capable_test_generation_method"}, {"score": 0.002389276641014013, "phrase": "test_exists"}, {"score": 0.0023091721866305426, "phrase": "descriptive_view"}, {"score": 0.002286781334850213, "phrase": "state-based_testing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["state characterization", " automata-based testing", " conformance testing", " model checking", " test generation", " protocol testing", " checking sequence generation", " software testing"], "paper_abstract": "This article presents a method for the application of model checking, i.e., verifying a finite state system against a given temporal specification, on the problem of generating test inputs. The generated test inputs allow state characterization, i.e., the identification of internal states of the software under test by observation of the input/output behavior only. A test model is derived semi-automatically from a given state-based specification and the testing goal is specified in terms of temporal logic. On the basis of these inputs, a model checking tool performs the testing input generation automatically. In consequence, the complexity of our approach is strongly depending on the input model, the testing goal, and the model checking algorithm, which is implemented in the used tool. The presented approach can be adapted with small changes to other model checking tools. It is a capable test generation method, whenever a finite state model of the software under test exists. Furthermore, it provides a descriptive view on state-based testing, which may be beneficial in other contexts, e.g., education and program comprehension. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Extended state identification and verification using a model checker", "paper_id": "WOS:000241136700005"}