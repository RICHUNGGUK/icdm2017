{"auto_keywords": [{"score": 0.0398577732669491, "phrase": "run_time"}, {"score": 0.007121061820450713, "phrase": "query_plans"}, {"score": 0.00481495049065317, "phrase": "efficient_collection_operations"}, {"score": 0.004740197030914445, "phrase": "collection_types"}, {"score": 0.004710620078577185, "phrase": "extensive_libraries"}, {"score": 0.004438642216475526, "phrase": "programming_languages"}, {"score": 0.004397151276300207, "phrase": "collection_queries"}, {"score": 0.003953068310598579, "phrase": "database_domain"}, {"score": 0.0037480753312398754, "phrase": "explicit_collection_queries"}, {"score": 0.0037130155038449554, "phrase": "run_time_query_optimization"}, {"score": 0.0036553070575015344, "phrase": "single_runs"}, {"score": 0.003487489029588045, "phrase": "previously_computed_results"}, {"score": 0.003454858296390957, "phrase": "proposed_approach"}, {"score": 0.0031845067058084583, "phrase": "earlier_executions"}, {"score": 0.002935248513348432, "phrase": "effective_cache_policy"}, {"score": 0.0027310193758440376, "phrase": "underlying_collections_change"}, {"score": 0.002680114113899346, "phrase": "cache_space"}, {"score": 0.0026384167183586015, "phrase": "cache_replacement_policy"}, {"score": 0.002533006895549614, "phrase": "aspectj."}, {"score": 0.002470237978694949, "phrase": "caching_sub_query_result"}, {"score": 0.002409020863483571, "phrase": "explicit_queries"}, {"score": 0.0023939545398857518, "phrase": "equivalent_programs"}, {"score": 0.0023789822182914877, "phrase": "collection_operations"}, {"score": 0.002262518422441041, "phrase": "real_world_robocode_programs"}, {"score": 0.0022273034991008326, "phrase": "jql"}, {"score": 0.0021926354732269846, "phrase": "experimental_results"}, {"score": 0.0021382831203116686, "phrase": "jql_approach"}, {"score": 0.0021049977753042253, "phrase": "program_run_time"}], "paper_keywords": ["Run time", " Collection operations", " Joins", " Query optimization", " Cache policy", " Join caching", " Selectivity"], "paper_abstract": "Many large programs operate on collection types. Extensive libraries are available in many programming languages, such as the C++ Standard Template Library, which make programming with collections convenient. Extending programming languages to provide collection queries as first class constructs in the language would not only allow programmers to write queries explicitly in their programs but it would also allow compilers to leverage the wealth of experience available from the database domain to optimize such queries. This paper describes an approach to reduce the run time of programs involving explicit collection queries by performing run time query optimization that is effective for single runs of a program. In addition, it also leverages a cache to store previously computed results. The proposed approach relies on histograms built from the data at run time to estimate the selectivity of joins and predicates in order to construct query plans. Information from earlier executions of the same query during run time is leveraged during the construction of the query plans, even when the data has changed between these executions. An effective cache policy is also determined for caching the results of join (sub) queries. The cache is maintained incrementally, when the underlying collections change, and use of the cache space is optimized by a cache replacement policy. Our approach has been implemented within the Java Query Language (JQL) framework using AspectJ. Our approach demonstrated that its run time query optimization in integration with caching sub query result significantly improves the run time of programs with explicit queries over equivalent programs performing collection operations by iterating over those collections. This paper evaluates our approach using synthetic as well as real world Robocode programs by comparing it to JQL as a benchmark. Experimental results show that our approach performs better than the JQL approach with respect to the program run time.", "paper_title": "Exploring optimization and caching for efficient collection operations", "paper_id": "WOS:000330975100002"}