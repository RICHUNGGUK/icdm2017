{"auto_keywords": [{"score": 0.049792109409163725, "phrase": "embedded_systems"}, {"score": 0.00481495049065317, "phrase": "dynamic_memory_managers"}, {"score": 0.004534136929881113, "phrase": "best_fit"}, {"score": 0.004373537527118041, "phrase": "memory_usage_and_energy_consumption"}, {"score": 0.0042953744947227535, "phrase": "software_engineers"}, {"score": 0.004256816146106783, "phrase": "difficult_choices"}, {"score": 0.0041183611532727375, "phrase": "special_impact"}, {"score": 0.0040569185796103845, "phrase": "portable_consumer_embedded_systems"}, {"score": 0.003984391456005223, "phrase": "limited_amount"}, {"score": 0.00396050388346298, "phrase": "multimedia_applications"}, {"score": 0.003740568332108757, "phrase": "high_performance"}, {"score": 0.0037181370924317834, "phrase": "extensive_memory_usage"}, {"score": 0.0036847412633483788, "phrase": "low_energy_consumption"}, {"score": 0.003597139600764093, "phrase": "novel_methodology"}, {"score": 0.0035648266669315943, "phrase": "genetic_programming"}, {"score": 0.003522192233486405, "phrase": "custom_dmms"}, {"score": 0.0032085525502105836, "phrase": "intensive_computation"}, {"score": 0.0031606404966938568, "phrase": "time-consuming_process"}, {"score": 0.003122824878906245, "phrase": "parallel_processing"}, {"score": 0.0029492697575981422, "phrase": "new_algorithms"}, {"score": 0.0028791027911595976, "phrase": "novel_parallel_evolutionary_algorithm"}, {"score": 0.002793730385549585, "phrase": "discrete_event_specification"}, {"score": 0.0026623547595573953, "phrase": "sequential_exploration_algorithm"}, {"score": 0.00233198831578686, "phrase": "global_quality"}, {"score": 0.0022089311733832985, "phrase": "final_dmm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Embedded systems design", " Dynamic memory management", " Evolutionary computation", " Distributed simulation"], "paper_abstract": "For the last 30 years, several dynamic memory managers (DMMs) have been proposed. Such DMMs include first fit, best fit, segregated fit and buddy systems. Since the performance, memory usage and energy consumption of each DMM differs, software engineers often face difficult choices in selecting the most suitable approach for their applications. This issue has special impact in the field of portable consumer embedded systems, that must execute a limited amount of multimedia applications (e.g., 3D games, video players, signal processing software, etc.), demanding high performance and extensive memory usage at a low energy consumption. Recently, we have developed a novel methodology based on genetic programming to automatically design custom DMMs, optimizing performance, memory usage and energy consumption. However, although this process is automatic and faster than state-of-the-art optimizations, it demands intensive computation, resulting in a time-consuming process. Thus, parallel processing can be very useful to enable to explore more solutions spending the same time, as well as to implement new algorithms. In this paper we present a novel parallel evolutionary algorithm for DMMs optimization in embedded systems, based on the Discrete Event Specification (DEVS) formalism over a Service Oriented Architecture (SOA) framework. Parallelism significantly improves the performance of the sequential exploration algorithm. On the one hand, when the number of generations are the same in both approaches, our parallel optimization framework is able to reach a speed-up of 86.40x when compared with other state-of-the-art approaches. On the other, it improves the global quality (i.e., level of performance, low memory usage and low energy consumption) of the final DMM obtained in a 36.36% with respect to two well-known general-purpose DMMs and two state-of-the-art optimization methodologies. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "A parallel evolutionary algorithm to optimize dynamic memory managers in embedded systems", "paper_id": "WOS:000283210200003"}