{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "-enabled_parallel_dataflow_architecture"}, {"score": 0.0046176782475198085, "phrase": "new_framework_design"}, {"score": 0.004545793387330536, "phrase": "multi-core_architectures"}, {"score": 0.004428452434981208, "phrase": "visualization_dataflow_systems"}, {"score": 0.004382364826200616, "phrase": "recent_hardware_advancements"}, {"score": 0.003926359151817743, "phrase": "existing_visualization_dataflow_systems"}, {"score": 0.0037653554368382814, "phrase": "new_resources"}, {"score": 0.0035176353680157367, "phrase": "shared_memory_multi-core_architectures"}, {"score": 0.0032861588691414667, "phrase": "parallel_dataflow_scheme"}, {"score": 0.003102195256794215, "phrase": "pipeline_elements"}, {"score": 0.002974886152979993, "phrase": "flexible_dataflow_architecture"}, {"score": 0.0028378798711397235, "phrase": "existing_systems"}, {"score": 0.0027936239349923464, "phrase": "unified_execution_model"}, {"score": 0.0024634797027967203, "phrase": "computing_resources"}, {"score": 0.002218299213266519, "phrase": "backward_compatibility"}, {"score": 0.0021049977753042253, "phrase": "performance_improvements"}], "paper_keywords": [""], "paper_abstract": "We propose a new framework design for exploiting multi-core architectures in the context of visualization dataflow systems. Recent hardware advancements have greatly increased the levels of parallelism available with all indications showing this trend will continue in the future. Existing visualization dataflow systems have attempted to take advantage of these new resources, though they still have a number of limitations when deployed on shared memory multi-core architectures. Ideally, visualization systems should be built on top of a parallel dataflow scheme that can optimally utilize CPUs and assign resources adaptively to pipeline elements. We propose the design of a flexible dataflow architecture aimed at addressing many of the shortcomings of existing systems including a unified execution model for both demand-driven and event-driven models; a resource scheduler that can automatically make decisions on how to allocate computing resources; and support for more general streaming data structures which include unstructured elements. We have implemented our system on top of VTK with backward compatibility. In this paper, we provide evidence of performance improvements on a number of applications.", "paper_title": "Streaming-Enabled Parallel Dataflow Architecture for Multicore Systems", "paper_id": "WOS:000280991300031"}