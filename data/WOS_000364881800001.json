{"auto_keywords": [{"score": 0.03256197219248931, "phrase": "parallel_parsing"}, {"score": 0.00481495049065317, "phrase": "local_parsability"}, {"score": 0.004009074013302036, "phrase": "parser_generator_tool"}, {"score": 0.0036335821512795026, "phrase": "parallel_input_analysis"}, {"score": 0.0035851703423654432, "phrase": "parallel_scanner"}, {"score": 0.003367611042980526, "phrase": "parallel_lexing"}, {"score": 0.0031773983151566158, "phrase": "json"}, {"score": 0.0031490963346175096, "phrase": "lua"}, {"score": 0.0031071175640144943, "phrase": "form_fit"}, {"score": 0.0029447150254434842, "phrase": "simple_grammar_changes"}, {"score": 0.002815864555488112, "phrase": "performance_figures"}, {"score": 0.002778317177178732, "phrase": "high_performance"}, {"score": 0.002741269087816162, "phrase": "multicore_platforms"}, {"score": 0.00269263690712392, "phrase": "real-world_inputs"}, {"score": 0.002506562885555113, "phrase": "production-grade_lr_parsers"}, {"score": 0.0024292428060702803, "phrase": "significant_speedups"}, {"score": 0.0024075916292945715, "phrase": "good_scaling"}, {"score": 0.0023861329619604666, "phrase": "multi-core_machines"}, {"score": 0.0023021895404322767, "phrase": "broad_and_critical_survey"}, {"score": 0.0022311596751824416, "phrase": "future_directions"}, {"score": 0.002181766829493483, "phrase": "semantic_analysis"}, {"score": 0.002162316557411786, "phrase": "incremental_parsing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel parsing algorithms", " Syntax analysis", " Parallel parser", " Operator precedence grammar"], "paper_abstract": "The property of local parsability allows to parse inputs through inspecting only a bounded-length string around the current token. This in turn enables the construction of a scalable, data-parallel parsing algorithm, which is presented in this work. Such an algorithm is easily amenable to be automatically generated via a parser generator tool, which was realized, and is also presented in the following. Furthermore, to complete the framework of a parallel input analysis, a parallel scanner can also combined with the parser. To prove the practicality of a parallel lexing and parsing approach, we report the results of the adaptation of JSON and Lua to a form fit for parallel parsing (i.e. an operator-precedence grammar) through simple grammar changes and scanning transformations. The approach is validated with performance figures from both high performance and embedded multicore platforms, obtained analyzing real-world inputs as a test-bench. The results show that our approach matches or dominates the performances of production-grade LR parsers in sequential execution, and achieves significant speedups and good scaling on multi-core machines. The work is concluded by a broad and critical survey of the past work on parallel parsing and future directions on the integration with semantic analysis and incremental parsing. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Parallel parsing made practical", "paper_id": "WOS:000364881800001"}