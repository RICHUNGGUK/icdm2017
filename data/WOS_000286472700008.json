{"auto_keywords": [{"score": 0.04958720442967608, "phrase": "unstaging_translation"}, {"score": 0.04861823021267309, "phrase": "multi-staged_programs"}, {"score": 0.04696562270914588, "phrase": "conventional_static_analysis"}, {"score": 0.00481495049065317, "phrase": "static_analysis_of_multi-staged_programs"}, {"score": 0.004716520738331953, "phrase": "static_analysis"}, {"score": 0.004549063619065006, "phrase": "basic_assumption"}, {"score": 0.004364919932563366, "phrase": "program_text"}, {"score": 0.004231699728933577, "phrase": "fixed_static_entity"}, {"score": 0.003956784357357341, "phrase": "semantic-preserving_translation"}, {"score": 0.003916098498242888, "phrase": "multi-staged_call-by-value_programs"}, {"score": 0.003441352119167824, "phrase": "multi-staged_program"}, {"score": 0.0031354779851351287, "phrase": "existing_static_analysis_techniques"}, {"score": 0.0030396665931462, "phrase": "conventional_unstaged_programs"}, {"score": 0.0028273061946184645, "phrase": "unstaged_version"}, {"score": 0.0026297428083782875, "phrase": "original_staged_program"}, {"score": 0.00257586859792573, "phrase": "staging_constructs"}, {"score": 0.002408265305704217, "phrase": "lisp's_quasi-quotation"}, {"score": 0.002251542790734307, "phrase": "intentional_variable-capturing_substitutions"}], "paper_keywords": ["Languages", " Theory", " Multi-staged languages", " Static analysis", " Unstaging translation", " Semantics preservation", " Abstract interpretation", " Projection"], "paper_abstract": "Static analysis of multi-staged programs is challenging because the basic assumption of conventional static analysis no longer holds: the program text itself is no longer a fixed static entity, but rather a dynamically constructed value. This article presents a semantic-preserving translation of multi-staged call-by-value programs into unstaged programs and a static analysis framework based on this translation. The translation is semantic-preserving in that every small-step reduction of a multi-staged program is simulated by the evaluation of its unstaged version. Thanks to this translation we can analyze multi-staged programs with existing static analysis techniques that have been developed for conventional unstaged programs: we first apply the unstaging translation, then we apply conventional static analysis to the unstaged version, and finally we cast the analysis results back in terms of the original staged program. Our translation handles staging constructs that have been evolved to be useful in practice (typified in Lisp's quasi-quotation): open code as values, unrestricted operations on references and intentional variable-capturing substitutions. This article omits references for which we refer the reader to our companion technical report.", "paper_title": "Static Analysis of Multi-Staged Programs via Unstaging Translation", "paper_id": "WOS:000286472700008"}