{"auto_keywords": [{"score": 0.032507228275705485, "phrase": "executed_hardware_configuration_instructions"}, {"score": 0.00481495049065317, "phrase": "partial_run-time_reconfiguration"}, {"score": 0.004545240514015278, "phrase": "performance_impact"}, {"score": 0.0044873778175404475, "phrase": "dynamic_hardware_reconfigurations"}, {"score": 0.004430248457624686, "phrase": "current_reconfigurable_technology"}, {"score": 0.0041287394089001405, "phrase": "molen_experimental_platform"}, {"score": 0.0035856674209019234, "phrase": "configuration_latency"}, {"score": 0.003298856341173034, "phrase": "performance_decrease"}, {"score": 0.003194736764837261, "phrase": "interprocedural_optimization"}, {"score": 0.003015508235745547, "phrase": "account_constraints"}, {"score": 0.0029391032882625473, "phrase": "\"fpga-area_placement_conflicts"}, {"score": 0.002864628676257225, "phrase": "available_hardware_configurations"}, {"score": 0.0028100102841877835, "phrase": "presented_algorithm"}, {"score": 0.0027212777001495154, "phrase": "hardware_configuration_instructions"}, {"score": 0.0026523079380037706, "phrase": "application's_main_procedure"}, {"score": 0.002601727192945944, "phrase": "presented_results"}, {"score": 0.0021597662797996843, "phrase": "maximal_theoretical_speedup"}, {"score": 0.0021049977753042253, "phrase": "reconfigurable_hardware_execution"}], "paper_keywords": ["reconfigurable computing", " compiler optimization", " reconfiguration overhead"], "paper_abstract": "In this paper, we study the performance impact of dynamic hardware reconfigurations for current reconfigurable technology. As a testbed, we target the Xilinx Virtex II Pro, the Molen experimental platform and the MPEG2 encoder as the application. Our experiments show that slowdowns of up to a factor 1000 are observed when the configuration latency is not hidden by the compiler. In order to avoid the performance decrease, we propose an interprocedural optimization that minimizes the number of executed hardware configuration instructions taking into account constraints such as the \"FPGA-area placement conflicts\" between the available hardware configurations. The presented algorithm allows the anticipation of hardware configuration instructions up to the application's main procedure. The presented results show that our optimization produces a reduction of 3 to 5 order of magnitude of the number of executed hardware configuration instructions. Moreover, the optimization allows to exploit up to 97% of the maximal theoretical speedup achieved by the reconfigurable hardware execution.", "paper_title": "Interprocedural compiler optimization for partial run-time reconfiguration", "paper_id": "WOS:000237975100005"}