{"auto_keywords": [{"score": 0.026571191086143982, "phrase": "ams"}, {"score": 0.015049839974510384, "phrase": "good_performance"}, {"score": 0.008737376952081329, "phrase": "server_mode"}, {"score": 0.008003935578856277, "phrase": "service_mode"}, {"score": 0.004518442937844318, "phrase": "subscription-based_premium_services"}, {"score": 0.004366387782457736, "phrase": "cloud_downloading"}, {"score": 0.004219427915728972, "phrase": "cloud_storage"}, {"score": 0.00413767314434795, "phrase": "user-interested_content"}, {"score": 0.003998380230709541, "phrase": "user_downloading_requests"}, {"score": 0.003920891569777894, "phrase": "requested_video"}, {"score": 0.0034187896011435245, "phrase": "alternative_design"}, {"score": 0.0033361232750221863, "phrase": "cloud_server"}, {"score": 0.003287482882222731, "phrase": "downloading_requests"}, {"score": 0.003130396338031522, "phrase": "helper_peer"}, {"score": 0.0027969169552385974, "phrase": "helper_mode"}, {"score": 0.0027159094186967247, "phrase": "high_request_rate"}, {"score": 0.0025860636370864084, "phrase": "video_population_size"}, {"score": 0.002523481637809674, "phrase": "adaptive_algorithm"}, {"score": 0.002254510319372956, "phrase": "blocked_movies"}, {"score": 0.0021049977753042253, "phrase": "different_operating_regimes"}], "paper_keywords": ["Cloud server", " file downloading", " helper", " peer-to-peer", " video"], "paper_abstract": "Video content downloading using the P2P approach is scalable, but does not always give good performance. Recently, subscription-based premium services have emerged, referred to as cloud downloading. In this service, the cloud storage and server caches user-interested content and updates the cache based on user downloading requests. If a requested video is not in the cache, the request is held in awaiting state until the cache is updated. We call this design server mode. An alternative design is to let the cloud server serve all downloading requests as soon as they arrive, behaving as a helper peer. We call this design helper mode. Our model and analysis show that both these designs are useful for certain operating regimes. The helper mode is good at handling a high request rate, while the server mode is good at scaling with video population size. We design an adaptive algorithm (AMS) to select the service mode automatically. Intuitively, AMS switches service mode from server mode to helper mode when too many peers request blocked movies, and vice versa. The ability of AMS to achieve good performance in different operating regimes is validated by simulation.", "paper_title": "An Adaptive Cloud Downloading Service", "paper_id": "WOS:000319228500009"}