{"auto_keywords": [{"score": 0.03370894964701269, "phrase": "small_alphabets"}, {"score": 0.025377605375170285, "phrase": "working_space"}, {"score": 0.004814951205791253, "phrase": "lz-compression"}, {"score": 0.004773904938276846, "phrase": "sublinear_time"}, {"score": 0.004672808182229058, "phrase": "dynamic_trie"}, {"score": 0.004613175917207636, "phrase": "fundamental_data_structure"}, {"score": 0.004496174406337201, "phrase": "computer_science"}, {"score": 0.004382127278148236, "phrase": "new_technique"}, {"score": 0.004307700591183651, "phrase": "dynamic_trie_t"}, {"score": 0.00409188863874203, "phrase": "unit-cost_ram_model"}, {"score": 0.004039639718055365, "phrase": "fixed_word_size_w."}, {"score": 0.0038044630943383497, "phrase": "linked_small_tries"}, {"score": 0.0034621581245372138, "phrase": "longest_common_prefix"}, {"score": 0.0034179225740833055, "phrase": "query_pattern_p"}, {"score": 0.0027230880516264685, "phrase": "first_algorithm"}, {"score": 0.002553382046204689, "phrase": "size_sigma"}, {"score": 0.002150659690967412, "phrase": "output_compressed_text"}, {"score": 0.0021049977753042253, "phrase": "alphabet_size"}], "paper_keywords": ["Data structures", " Dynamic trie", " Longest common prefix query", " LZ-compression"], "paper_abstract": "The dynamic trie is a fundamental data structure with applications in many areas of computer science. This paper proposes a new technique for maintaining a dynamic trie T of size at most 2 (w) nodes under the unit-cost RAM model with a fixed word size w. It is based on the idea of partitioning T into a set of linked small tries, each of which can be maintained efficiently. Our method is not only space-efficient, but also allows the longest common prefix between any query pattern P and the strings currently stored in T to be computed in o(|P|) time for small alphabets, and allows any leaf to be inserted into or deleted from T in o(log|T|) time. To demonstrate the usefulness of our new data structure, we apply it to LZ-compression. Significantly, we obtain the first algorithm for generating the lz78 encoding of a given string of length n over an alphabet of size sigma in sublinear (o(n)) time and sublinear (o(nlog sigma) bits) working space for small alphabets (). Moreover, the working space for our new algorithm is asymptotically less than or equal to the space for storing the output compressed text, regardless of the alphabet size.", "paper_title": "Linked Dynamic Tries with Applications to LZ-Compression in Sublinear Time and Space", "paper_id": "WOS:000350873800008"}