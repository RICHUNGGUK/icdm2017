{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gpu_code_generation"}, {"score": 0.004775918707955445, "phrase": "ode-based_applications"}, {"score": 0.004737201825299411, "phrase": "phased_shared-data_access_patterns"}, {"score": 0.004641770842098217, "phrase": "novel_code_generation_scheme"}, {"score": 0.004511373893354558, "phrase": "platform-aware_generation"}, {"score": 0.004456611869693865, "phrase": "heterogeneous_pool"}, {"score": 0.004209679094023478, "phrase": "memory_requirements"}, {"score": 0.004058180509184539, "phrase": "on-chip_memory"}, {"score": 0.003976373766630598, "phrase": "conventional_strategy"}, {"score": 0.003755949722774176, "phrase": "phased_nature"}, {"score": 0.003725470458263889, "phrase": "memory_access_patterns"}, {"score": 0.0036355032885145894, "phrase": "massive_parallelism"}, {"score": 0.003490343299449249, "phrase": "computational_systems_biology_application"}, {"score": 0.0032434583977423996, "phrase": "ordinary_differential_equations"}, {"score": 0.0031650944584992726, "phrase": "approximation_algorithm"}, {"score": 0.0028583875909257766, "phrase": "conditional_probability_tables"}, {"score": 0.002755384932325921, "phrase": "prespecified_discretization"}, {"score": 0.0025499307228648883, "phrase": "intermediate_data"}, {"score": 0.002283984048569816, "phrase": "proposed_code_generation_scheme"}, {"score": 0.0022378620428620782, "phrase": "significant_performance_improvements"}], "paper_keywords": ["GPU", " memory hierarchy", " code generation"], "paper_abstract": "We present a novel code generation scheme for GPUs. Its key feature is the platform-aware generation of a heterogeneous pool of threads. This exposes more data-sharing opportunities among the concurrent threads and reduces the memory requirements that would otherwise exceed the capacity of the on-chip memory. Instead of the conventional strategy of focusing on exposing as much parallelism as possible, our scheme leverages on the phased nature of memory access patterns found in many applications that exhibit massive parallelism. We demonstrate the effectiveness of our code generation strategy on a computational systems biology application. This application consists of computing a Dynamic Bayesian Network (DBN) approximation of the dynamics of signalling pathways described as a system of Ordinary Differential Equations (ODEs). The approximation algorithm involves (i) sampling many (of the order of a few million) times from the set of initial states, (ii) generating trajectories through numerical integration, and (iii) storing the statistical properties of this set of trajectories in Conditional Probability Tables (CPTs) of a DBN via a prespecified discretization of the time and value domains. The trajectories can be computed in parallel. However, the intermediate data needed for computing them, as well as the entries for the CPTs, are too large to be stored locally. Our experiments show that the proposed code generation scheme scales well, achieving significant performance improvements on three realistic signalling pathways models. These results suggest how our scheme could be extended to deal with other applications involving systems of ODEs.", "paper_title": "GPU Code Generation for ODE-Based Applications with Phased Shared-Data Access Patterns", "paper_id": "WOS:000330509300034"}