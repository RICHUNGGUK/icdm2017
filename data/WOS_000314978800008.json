{"auto_keywords": [{"score": 0.04942081582423982, "phrase": "bidirectional_transformation"}, {"score": 0.011516947352592103, "phrase": "concurrent_updates"}, {"score": 0.00481495049065317, "phrase": "concurrent_model_updates"}, {"score": 0.0047051051659828275, "phrase": "model-driven_software_development"}, {"score": 0.004192190072470619, "phrase": "bidirectional_model_transformation"}, {"score": 0.002883172383460653, "phrase": "reasonable_synchronization_behavior"}, {"score": 0.0028042741141125712, "phrase": "new_algorithm"}, {"score": 0.002652878591019016, "phrase": "model_difference"}, {"score": 0.002407290605654707, "phrase": "correctness_property"}, {"score": 0.0023741093119014436, "phrase": "hippocraticness_property"}, {"score": 0.00229844995872581, "phrase": "history_ignorance_property"}, {"score": 0.0021049977753042253, "phrase": "practical_runtime_management_framework"}], "paper_keywords": ["Model synchronization", " Bidirectional transformation", " Concurrent updates", " Model difference"], "paper_abstract": "Model-driven software development often involves several related models. When models are updated, the updates need to be propagated across all models to make them consistent. A bidirectional model transformation keeps two models consistent by updating one model in accordance with the other. However, it does not work when the two models are modified at the same time. In this paper we first examine the requirements for synchronizing concurrent updates. We view a synchronizer for concurrent updates as a function taking the two original models and the two updated models as input, and producing two new models where the updates are synchronized. We argue that the synchronizer should satisfy three properties that we define to ensure a reasonable synchronization behavior. We then propose a new algorithm to wrap any bidirectional transformation into a synchronizer with the help of model difference approaches. We show that synchronizers produced by our algorithm are ensured to satisfy the three properties if the bidirectional transformation satisfies the correctness property and the hippocraticness property. We also show that the history ignorance property contributes to the symmetry of our algorithm. An implementation of our algorithm shows that it worked well in a practical runtime management framework.", "paper_title": "Synchronizing concurrent model updates based on bidirectional transformation", "paper_id": "WOS:000314978800008"}