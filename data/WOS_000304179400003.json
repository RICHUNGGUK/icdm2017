{"auto_keywords": [{"score": 0.04267661540788139, "phrase": "utp"}, {"score": 0.03152522322876896, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "high-confidence_coordination_mechanisms"}, {"score": 0.004735254735115024, "phrase": "new_technologies"}, {"score": 0.004598933498016774, "phrase": "service-oriented_applications"}, {"score": 0.004503959683578956, "phrase": "coordination_mechanisms"}, {"score": 0.004447915226010682, "phrase": "unifying_theories"}, {"score": 0.004301834610818624, "phrase": "formal_semantic_foundation"}, {"score": 0.004230595706156783, "phrase": "programming_languages"}, {"score": 0.004108742905942481, "phrase": "key_concept"}, {"score": 0.003763763153640936, "phrase": "reo_connectors"}, {"score": 0.0036248960518324483, "phrase": "utp."}, {"score": 0.003505749731180509, "phrase": "semantic_foundation"}, {"score": 0.0031712256091350316, "phrase": "reference_document"}, {"score": 0.0031317126905234145, "phrase": "tool_support"}, {"score": 0.003105646788434812, "phrase": "reo"}, {"score": 0.0030541531847589833, "phrase": "test_case_generators"}, {"score": 0.0030160945545795494, "phrase": "fault-based_method"}, {"score": 0.002953711377604328, "phrase": "component_connectors"}, {"score": 0.0027510752634224726, "phrase": "possible_errors"}, {"score": 0.0027167830773160203, "phrase": "development_process"}, {"score": 0.002671722386856879, "phrase": "wrongly_used_channels"}, {"score": 0.0025623050508233078, "phrase": "wrongly_constructed_topology"}, {"score": 0.002477998427152547, "phrase": "unifying_formal_semantics"}, {"score": 0.0022601535748259785, "phrase": "faulty_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Connector", " Reo circuits", " Timed data sequence", " Design", " Refinement", " Test case generation"], "paper_abstract": "Over the past years, the need for high-confidence coordination mechanisms has intensified as new technologies have appeared for the development of service-oriented applications, making formalization of coordination mechanisms critical. Unifying Theories of Programming (UTP) provide a formal semantic foundation not only for programming languages but also for various expressive specification languages. A key concept in UTP is design: the familiar pre/post-condition pair that describes a contract. In this paper we use UTP to formalize Reo connectors, whereby connectors are interpreted as designs in UTP. This model can be used as a semantic foundation for proving properties of connectors, such as equivalence and refinement relations between connectors. Furthermore, it can be used as a reference document for developing tool support for Reo, such as test case generators. A fault-based method to generate test cases for component connectors from specifications is also provided in this paper. For connectors, faults are caused by possible errors during the development process, such as wrongly used channels, missing or redundant subcircuits, or circuits with wrongly constructed topology. We give test cases and connectors a unifying formal semantics by using the notion of design in UTP, and generate test cases by solving constraints obtained from a specification and a faulty implementation. A prototype serves to demonstrate the automatization of the approach. (c) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Connectors as designs: Modeling, refinement and test case generation", "paper_id": "WOS:000304179400003"}