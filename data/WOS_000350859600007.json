{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reused_functions"}, {"score": 0.04965786117733892, "phrase": "binary_code"}, {"score": 0.009260629030586071, "phrase": "open_source_software_packages"}, {"score": 0.006257057869902128, "phrase": "common_functionalities"}, {"score": 0.004292337783332826, "phrase": "significant_amount"}, {"score": 0.004016938499717623, "phrase": "reverse_engineering"}, {"score": 0.003877329308854808, "phrase": "common_libraries"}, {"score": 0.003826231150275071, "phrase": "false_correlations"}, {"score": 0.0037925389501636975, "phrase": "unrelated_code_bases"}, {"score": 0.0036612488600561675, "phrase": "sigma"}, {"score": 0.00344087639309216, "phrase": "novel_representation"}, {"score": 0.003219933655648714, "phrase": "sig"}, {"score": 0.003121719509312159, "phrase": "classic_program_analysis"}, {"score": 0.003080548510001051, "phrase": "control_flow_graph"}, {"score": 0.003053402354907241, "phrase": "register_flow_graph"}, {"score": 0.0029471818883482688, "phrase": "joint_data_structure"}, {"score": 0.0028572658971252616, "phrase": "different_semantic_descriptors"}, {"score": 0.0027947199430705077, "phrase": "unified_manner"}, {"score": 0.0024688710065898646, "phrase": "promising_results"}, {"score": 0.002341094670523097, "phrase": "case_study"}, {"score": 0.0022298075165758553, "phrase": "zeus"}, {"score": 0.002210105811846809, "phrase": "citadel"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Function identification", " Reverse engineering", " Binary program analysis", " Malware forensics", " Digital forensics"], "paper_abstract": "The capability of efficiently recognizing reused functions for binary code is critical to many digital forensics tasks, especially considering the fact that many modern malware typically contain a significant amount of functions borrowed from open source software packages. Such a capability will not only improve the efficiency of reverse engineering, but also reduce the odds of common libraries leading to false correlations between unrelated code bases. In this paper, we propose SIGMA, a technique for identifying reused functions in binary code by matching traces of a novel representation of binary code, namely, the Semantic Integrated Graph (SIG). The SIG s enhance and merge several existing concepts from classic program analysis, including control flow graph, register flow graph, and function call graph into a joint data structure. Such a comprehensive representation allows us to capture different semantic descriptors of common functionalities in a unified manner as graph traces, which can be extracted from binaries and matched to identify reused functions, actions, or open source software packages. Experimental results show that our approach yields promising results. Furthermore, we demonstrate the effectiveness of our approach through a case study using two malware known to share common functionalities, namely, Zeus and Citadel. (C) 2015 The Authors. Published by Elsevier Ltd.", "paper_title": "SIGMA: A Semantic Integrated Graph Matching Approach for identifying reused functions in binary code", "paper_id": "WOS:000350859600007"}