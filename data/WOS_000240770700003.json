{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "low-latency_checkpointing_scheme"}, {"score": 0.00465944657565638, "phrase": "fault-tolerant_mobile_computing_systems"}, {"score": 0.004363277689798392, "phrase": "conventional_distributed_systems"}, {"score": 0.004222299135545249, "phrase": "coordinated_checkpointing_scheme"}, {"score": 0.004041359131062721, "phrase": "global_checkpointing_process"}, {"score": 0.003997343989408636, "phrase": "mobile_systems"}, {"score": 0.0039322149318145845, "phrase": "piggyback_technique"}, {"score": 0.0037636590459094762, "phrase": "checkpoint_dependency_information"}, {"score": 0.003682100144121148, "phrase": "normal_message_transmission"}, {"score": 0.0035630518377071916, "phrase": "concurrent_checkpointing_technique"}, {"score": 0.0034478392374444177, "phrase": "pre-recorded_process_dependency_information"}, {"score": 0.003299977511820374, "phrase": "checkpoint_requests"}, {"score": 0.003264010423431402, "phrase": "dependent_processes"}, {"score": 0.0030730639262332698, "phrase": "dependency_tree"}, {"score": 0.00294122712771669, "phrase": "minimum_number"}, {"score": 0.0027843339377323878, "phrase": "important_property"}, {"score": 0.002738914205394527, "phrase": "mobile_applications"}, {"score": 0.0024679299547216956, "phrase": "checkpoint_request_propagation"}, {"score": 0.0024143815950383647, "phrase": "traditional_coordinated_checkpointing_approaches"}, {"score": 0.002273025527678093, "phrase": "piggybacked_information"}, {"score": 0.0022482261385133617, "phrase": "normal_runtime"}, {"score": 0.0021049977753042253, "phrase": "checkpoint_latency_time"}], "paper_keywords": ["fault tolerance", " mobile computing systems", " rollback recovery", " causal dependency", " coordinated checkpointing"], "paper_abstract": "Fault-tolerant mobile computing systems have different requirements and restrictions, not taken into account by conventional distributed systems. This paper presents a coordinated checkpointing scheme which reduces the delay involved in a global checkpointing process for mobile systems. A piggyback technique is used to track and record the checkpoint dependency information among processes during normal message transmission. During checkpointing, a concurrent checkpointing technique is designed to use the pre-recorded process dependency information to minimize process blocking time by sending checkpoint requests to dependent processes at once, hence saving the time to trace the dependency tree. We show that our checkpoint algorithm forces a minimum number of processes to take checkpoints, which is an important property for checkpointing mobile applications. Via probability-based analysis, we show that our scheme can significantly reduce the latency associated with checkpoint request propagation, compared with traditional coordinated checkpointing approaches. Experimental results indicate that we have < 2% overhead in transmitting piggybacked information during normal runtime. However, we can achieve up to a 60% reduction in checkpoint latency time.", "paper_title": "Design and evaluation of a low-latency checkpointing scheme for mobile computing systems", "paper_id": "WOS:000240770700003"}