{"auto_keywords": [{"score": 0.04829779156277875, "phrase": "networked_games"}, {"score": 0.04026157255412937, "phrase": "lag_compensation_techniques"}, {"score": 0.00481495049065317, "phrase": "lag_compensation"}, {"score": 0.004706699397060569, "phrase": "next_generation"}, {"score": 0.004566123591480369, "phrase": "lag_compensation_algorithms"}, {"score": 0.0036093693971289754, "phrase": "algorithms_limit"}, {"score": 0.0035281264325950556, "phrase": "different_algorithms"}, {"score": 0.0034749794034364197, "phrase": "inhibit_programmers"}, {"score": 0.0030311679447397725, "phrase": "programming_model"}, {"score": 0.0023235629819760018, "phrase": "explicit_treatment"}, {"score": 0.0022369407711124775, "phrase": "timelines_model"}, {"score": 0.0021049977753042253, "phrase": "janus_toolkit"}], "paper_keywords": ["Lag compensation", " Consistency maintenance", " Networked games"], "paper_abstract": "Lag compensation algorithms used in networked games require programmers to manage the complexities of dealing with both time and shared state. This can make implementing lag compensation techniques challenging. The difficulties in expressing these algorithms limit experimentation with different algorithms and inhibit programmers from exploring the space of the algorithms and testing their effects. The solution is to have a programming model that is better able to deal with time. In this paper, we present such a programming model, timelines. Timelines dramatically reduce the time and effort required to implement lag compensation techniques by allowing for the explicit treatment of time. The timelines model has been implemented as part of the Janus toolkit.", "paper_title": "Timelines: simplifying the programming of lag compensation for the next generation of networked games", "paper_id": "WOS:000320379500007"}