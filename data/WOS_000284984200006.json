{"auto_keywords": [{"score": 0.049784036779212434, "phrase": "distributed_systems"}, {"score": 0.04344501858332512, "phrase": "server_placement_problem"}, {"score": 0.04299918876879403, "phrase": "new_server"}, {"score": 0.03311722611002528, "phrase": "np"}, {"score": 0.03215547573729092, "phrase": "greedy_remove"}, {"score": 0.03198813896671373, "phrase": "greedy_add-remove"}, {"score": 0.024811671690175344, "phrase": "constrained_model"}, {"score": 0.00481495049065317, "phrase": "server_placement"}, {"score": 0.004649936560866145, "phrase": "data_server_placement"}, {"score": 0.004490552331642995, "phrase": "existing_work"}, {"score": 0.004055176557424983, "phrase": "existing_servers"}, {"score": 0.0040334640350288, "phrase": "user_requests"}, {"score": 0.003731339232636914, "phrase": "tree-structured_systems"}, {"score": 0.0035936635879882813, "phrase": "optimal_placement"}, {"score": 0.003574413263452281, "phrase": "k_extra_servers"}, {"score": 0.0034890505116128606, "phrase": "vertical_bar_v_vertical_bar_nodes"}, {"score": 0.0032449610741097992, "phrase": "extra_servers"}, {"score": 0.0032016639006812826, "phrase": "general_connected_graphs"}, {"score": 0.003150466780962537, "phrase": "server_placement_problems"}, {"score": 0.0030587157474484612, "phrase": "greedy_add"}, {"score": 0.002769209760453212, "phrase": "tree_networks"}, {"score": 0.002688532127821979, "phrase": "greedy_heuristic_algorithms"}, {"score": 0.002652639568848117, "phrase": "server_capacity_constraint"}, {"score": 0.00257534929958055, "phrase": "greedy_algorithms"}, {"score": 0.002561539797590314, "phrase": "good_results"}, {"score": 0.002520552881436672, "phrase": "upper_bounds"}, {"score": 0.002493592357827492, "phrase": "linear_programming_algorithm"}, {"score": 0.0024802559641917505, "phrase": "greedy"}, {"score": 0.0024405312482831646, "phrase": "unconstrained_model"}, {"score": 0.0022941723937662927, "phrase": "smaller_network_sizes"}, {"score": 0.0022513914267746397, "phrase": "larger_network_sizes"}, {"score": 0.002215356138269358, "phrase": "heuristic_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Competition-aware server placement", " Resource allocation", " Distributed system", " Grid and Cloud", " Maximizing benefit", " Minimizing construction cost", " Optimal algorithms", " Heuristic algorithms"], "paper_abstract": "Although the problem of data server placement in parallel and distributed systems has been studied extensively, most of the existing work assumes there is no competition between servers. Hence, their goal is to minimize read, update and storage cost. In this paper, we study the server placement problem in which a new server has to compete with existing servers for user requests. Therefore, in addition to minimizing cost, we also need to maximize the benefit of building a new server. Our major results include three parts. First, for tree-structured systems, we propose an O(vertical bar V vertical bar(3)k) time dynamic programming algorithm to find the optimal placement of k extra servers that maximizes the benefit in a tree with vertical bar V vertical bar nodes. We also propose an O(vertical bar V vertical bar(3)) time dynamic programming algorithm to find the optimal placement of extra servers that maximizes the benefit, without any constraint on the number of extra servers. Second, for general connected graphs, we prove that the server placement problems are NP-complete, and present three greedy heuristic algorithms, called Greedy Add, Greedy Remove and Greedy Add-Remove, to solve them. Third, we show that if the number of requests a server can handle (i.e., server capacity) is bounded, the server placement problem is NP-complete even for tree networks. We then derive a variation of the same set of greedy heuristic algorithms, with consideration of server capacity constraint, to solve the problem. Our experiment results demonstrate that the greedy algorithms achieve good results, when compared with the upper bounds found by a linear programming algorithm. Greedy Add performs best in the unconstrained model, yielding a benefit within 12% difference from the theoretical upper bound in average. For the constrained model, Greedy Remove performs best for smaller network sizes, while Greedy Add-Remove performs best for larger network sizes. On average, the heuristic algorithms yield a benefit within 13% difference from the theoretical upper bound in the constrained model. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Optimizing server placement in distributed systems in the presence of competition", "paper_id": "WOS:000284984200006"}