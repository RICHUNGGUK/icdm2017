{"auto_keywords": [{"score": 0.04870300013732668, "phrase": "matrix_inversion"}, {"score": 0.012476113443757583, "phrase": "time_complexity"}, {"score": 0.00481495049065317, "phrase": "gauss_jordan"}, {"score": 0.004586542937810823, "phrase": "cuda."}, {"score": 0.00436890075128947, "phrase": "large_matrices"}, {"score": 0.0040027552011993005, "phrase": "computational_tool"}, {"score": 0.003925633992809873, "phrase": "current_literature"}, {"score": 0.003294875957676514, "phrase": "cuda_platform"}, {"score": 0.0031690434364310435, "phrase": "large_scale_parallelization_feature"}, {"score": 0.0030778231027679464, "phrase": "massively_multithreaded_gpu."}, {"score": 0.0027651847105654363, "phrase": "performance_metrics"}, {"score": 0.002608218347502229, "phrase": "cpu_based_parallel_methods"}, {"score": 0.0024126686412257407, "phrase": "matrix_inversion_scales"}], "paper_keywords": ["Graphics processing unit", " Compute unified development architecture", " Matrix inversion", " Gauss Jordan", " Parallelization"], "paper_abstract": "The ability to invert large matrices quickly and accurately determines the effectiveness of a computational tool. Current literature suggests that time complexity of matrix inversion is 2 or higher. This paper redesigns the Gauss Jordan algorithm for matrix inversion on a CUDA platform to exploit the large scale parallelization feature of a massively multithreaded GPU. The algorithm is tested for various types of matrices and the performance metrics are studied and compared with CPU based parallel methods. We show that the time complexity of matrix inversion scales as n as long as n(2) threads can be supported by the CPU. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "A fast parallel Gauss Jordan algorithm for matrix inversion using CUDA", "paper_id": "WOS:000326667400003"}