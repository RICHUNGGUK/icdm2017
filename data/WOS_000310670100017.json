{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "small_files"}, {"score": 0.009858998349512486, "phrase": "native_hdfs"}, {"score": 0.009632273344657011, "phrase": "large_numbers"}, {"score": 0.008810034788141146, "phrase": "hdfs"}, {"score": 0.004777569299319633, "phrase": "cloud_storage"}, {"score": 0.004740500172317724, "phrase": "hadoop"}, {"score": 0.004703671193348433, "phrase": "file_system"}, {"score": 0.0045415338200109345, "phrase": "internet_services"}, {"score": 0.004217286731331736, "phrase": "significant_attention"}, {"score": 0.004024485331377682, "phrase": "small_file_problem"}, {"score": 0.0038554737609608255, "phrase": "heavy_burden"}, {"score": 0.0036505565334886227, "phrase": "data_placement"}, {"score": 0.00331125524068286, "phrase": "clear_cut-off_point"}, {"score": 0.0032855095476183372, "phrase": "large_and_small_files"}, {"score": 0.0030269369940823902, "phrase": "correlation_features"}, {"score": 0.0026923527275481804, "phrase": "optimized_approach"}, {"score": 0.002559072326933071, "phrase": "hdfs._file"}, {"score": 0.0024803459795996116, "phrase": "structurally-related_small_files"}, {"score": 0.002366763442497185, "phrase": "logically-related_small_files"}, {"score": 0.0023029188952824685, "phrase": "proposed_schemes"}, {"score": 0.002163367190715979, "phrase": "hadoop_file"}, {"score": 0.002154930852763048, "phrase": "archiving_facility"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Cloud storage", " Small file storage", " Storage efficiency", " Prefetching", " Access efficiency"], "paper_abstract": "Hadoop distributed file system (HDFS) is widely adopted to support Internet services. Unfortunately, native HDFS does not perform well for large numbers but small size files, which has attracted significant attention. This paper firstly analyzes and points out the reasons of small file problem of HDFS: (1) large numbers of small files impose heavy burden on NameNode of HDFS; (2) correlations between small files are not considered for data placement; and (3) no optimization mechanism, such as prefetching, is provided to improve I/O performance. Secondly, in the context of HDFS, the clear cut-off point between large and small files is determined through experimentation, which helps determine 'how small is small'. Thirdly, according to file correlation features, files are classified into three types: structurally-related files, logically-related files, and independent files. Finally, based on the above three steps, an optimized approach is designed to improve the storage and access efficiencies of small files on HDFS. File merging and prefetching scheme is applied for structurally-related small files, while file grouping and prefetching scheme is used for managing logically-related small files. Experimental results demonstrate that the proposed schemes effectively improve the storage and access efficiencies of small files, compared with native HDFS and a Hadoop file archiving facility. (c) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "An optimized approach for storing and accessing small files on cloud storage", "paper_id": "WOS:000310670100017"}