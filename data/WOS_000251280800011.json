{"auto_keywords": [{"score": 0.02968784522121099, "phrase": "near-optimal_time"}, {"score": 0.0118920318158258, "phrase": "ram_model"}, {"score": 0.00481495049065317, "phrase": "compressed_data_structures"}, {"score": 0.004755723591767513, "phrase": "space_usage"}, {"score": 0.004682708592184678, "phrase": "data-aware_manner"}, {"score": 0.004568198442824687, "phrase": "fundamental_dictionary_problem"}, {"score": 0.004540009134349177, "phrase": "set_data"}, {"score": 0.004415284957189386, "phrase": "data_structure"}, {"score": 0.004360952651269854, "phrase": "set_s"}, {"score": 0.004334036641115555, "phrase": "n_items"}, {"score": 0.0040486587472870076, "phrase": "well-known_data-aware_measure"}, {"score": 0.003852939975815287, "phrase": "novel_dictionary_structure"}, {"score": 0.00353284276988849, "phrase": "predecessor_queries"}, {"score": 0.0035110198699787013, "phrase": "nearly_optimal_time"}, {"score": 0.0034356998678889065, "phrase": "andersson"}, {"score": 0.003414467360488913, "phrase": "thorup's_predecessor_structure"}, {"score": 0.003393373193137233, "phrase": "a._andersson"}, {"score": 0.003372408902017458, "phrase": "m._thorup"}, {"score": 0.0032796556275748842, "phrase": "dynamic_searching_and_priority_queues"}, {"score": 0.0032392523450566505, "phrase": "acm_symposium"}, {"score": 0.0031795942461970033, "phrase": "stoc"}, {"score": 0.003054009753601139, "phrase": "select_queries"}, {"score": 0.002942495422585405, "phrase": "exactly_gap_bits"}, {"score": 0.0029152570900178956, "phrase": "leading_term"}, {"score": 0.0028704174214048937, "phrase": "constant_factor"}, {"score": 0.0027484916716887286, "phrase": "worst-case_perspective"}, {"score": 0.002488851299416018, "phrase": "partial_rank_queries"}, {"score": 0.0022889103976458437, "phrase": "worthwhile_compression"}, {"score": 0.0022747539135765204, "phrase": "combinatorial_methods"}, {"score": 0.002198440442866291, "phrase": "first_results"}, {"score": 0.002178074693316872, "phrase": "data-aware_space_usage"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["dictionary problem", " compressed", " gap encoding", " rank", " select", " predecessor", " BSGAP"], "paper_abstract": "In this paper, we propose measures for compressed data structures, in which space usage is measured in a data-aware manner. In particular, we consider the fundamental dictionary problem on set data, where the task is to construct a data structure for representing a set S of n items out of a universe U = {0,..., u - 1} and supporting various queries on S. We use a well-known data-aware measure for set data called gap to bound the space of our data structures. We describe a novel dictionary structure that requires gap + O(n log(u/n)/log n) + O(n log log(u/n)) bits. Under the RAM model, our dictionary supports membership, rank, and predecessor queries in nearly optimal time, matching the time bound of Andersson and Thorup's predecessor structure [A. Andersson, M. Thorup, Tight(er) worst-case bounds on dynamic searching and priority queues, in: ACM Symposium on Theory of Computing, STOC, 2000], while simultaneously improving upon their space usage. We support select queries even faster in O(log log n) time. Our dictionary structure uses exactly gap bits in the leading term (i.e., the constant factor is 1) and answers queries in near-optimal time. When seen from the worst-case perspective, we present the first O(n log(u/n))-bit dictionary structure that supports these queries in near-optimal time under the RAM model. We also build a dictionary which requires the same space and supports membership, select, and partial rank queries even more quickly in O(log log n) time. We go on to show that for many (real-world) datasets, data-aware methods lead to a worthwhile compression over combinatorial methods. To the best of our knowledge, these are the first results that achieve data-aware space usage and retain near-optimal time. (c) 2007 Published by Elsevier B.V.", "paper_title": "Compressed data structures: Dictionaries and data-aware measures", "paper_id": "WOS:000251280800011"}