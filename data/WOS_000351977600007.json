{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "flash_memory"}, {"score": 0.004680851157467745, "phrase": "spatial_data_management"}, {"score": 0.004647911247507267, "phrase": "data_analysis"}, {"score": 0.004550469496119256, "phrase": "spatial_data_retrieval"}, {"score": 0.004470823343432748, "phrase": "original_r-tree"}, {"score": 0.004408106853358092, "phrase": "magnetic_disks"}, {"score": 0.004346266306175988, "phrase": "poor_performance"}, {"score": 0.004240116703465252, "phrase": "special_features"}, {"score": 0.0039648318122148555, "phrase": "erase-before-write_feature"}, {"score": 0.0038953958723049287, "phrase": "original_updating_mechanism"}, {"score": 0.0037336520904376687, "phrase": "indexing_item"}, {"score": 0.003629557750546267, "phrase": "leaf_node"}, {"score": 0.003478813491904962, "phrase": "wide_use"}, {"score": 0.0033579708256295847, "phrase": "moving_trajectories"}, {"score": 0.003334309053314909, "phrase": "intelligent_transportation_systems"}, {"score": 0.003207108833360533, "phrase": "critical_issue"}, {"score": 0.00310664242361199, "phrase": "novel_spatial_index"}, {"score": 0.0030847461428168614, "phrase": "flash-optimized_r-"}, {"score": 0.0029150253706493852, "phrase": "node-splitting_operations"}, {"score": 0.002863921785266393, "phrase": "overflow_nodes"}, {"score": 0.0028037753646260937, "phrase": "unbalanced_tree_structure"}, {"score": 0.002640114583897493, "phrase": "overall_performance"}, {"score": 0.002548331088496964, "phrase": "new_buffering_scheme"}, {"score": 0.002357457094026928, "phrase": "extensive_experiments"}, {"score": 0.0023408288327263294, "phrase": "real_flash-memory_storage_devices"}, {"score": 0.0022997683233147125, "phrase": "flash_memory_simulation_platform"}, {"score": 0.0021501863832966966, "phrase": "different_metrics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Spatial index", " Flash memory", " Buffer management", " R-tree"], "paper_abstract": "R-tree has been widely used in spatial data management and data analysis to improve the performance of spatial data retrieval. However, the original R-tree is designed for magnetic disks, and has poor performance on flash memory, due to the special features of flash memory such as asymmetric read! write speeds (fast read, slow write) and the erase-before-write feature. Particularly, the original updating mechanism of R-tree usually has to update a few interior nodes when inserting an indexing item into or deleting an item from a leaf node, yielding many slow writes to flash memory. With the wide use of flash memory in many location-based fields, e.g., to store moving trajectories in intelligent transportation systems, how to optimize R-tree for flash memory has become a critical issue. In this paper, we propose a novel spatial index named Flash-Optimized R-tree that is optimized for flash memory. In particular, we propose to defer the node-splitting operations on R-tree by introducing overflow nodes, which results in an unbalanced tree structure. With this mechanism, we can reduce random writes to flash memory and improve the overall performance of R-tree. In addition, we present a new buffering scheme to efficiently cache the updates to the tree, which can further reduce random writes to flash memory. We conduct extensive experiments on real flash-memory storage devices as well as a flash memory simulation platform to evaluate the performance of our proposal, and the results suggest the efficiency of our proposal with respect to different metrics. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Optimizing R-tree for flash memory", "paper_id": "WOS:000351977600007"}