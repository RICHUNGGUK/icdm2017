{"auto_keywords": [{"score": 0.049651030276363126, "phrase": "compiler_provenance"}, {"score": 0.038494188353283706, "phrase": "bincomp"}, {"score": 0.00481495049065317, "phrase": "compiler_provenance_attribution"}, {"score": 0.0047292449487169345, "phrase": "numerous_pieces"}, {"score": 0.004582897918101983, "phrase": "compiler_family"}, {"score": 0.004096082254543022, "phrase": "function_fingerprinting"}, {"score": 0.004059438255358923, "phrase": "clone_detection"}, {"score": 0.0040050835356293365, "phrase": "authorship_attribution"}, {"score": 0.00384633057714983, "phrase": "efficient_and_automated_approach"}, {"score": 0.003406713877432236, "phrase": "disassembled_functions"}, {"score": 0.0032863459256972896, "phrase": "stratified_architecture"}, {"score": 0.0032132782979796895, "phrase": "first_layer"}, {"score": 0.0031702173541386888, "phrase": "supervised_compilation_process"}, {"score": 0.003099723664407622, "phrase": "known_programs"}, {"score": 0.003044455555031339, "phrase": "default_code_transformation"}, {"score": 0.0029767499830258754, "phrase": "second_layer"}, {"score": 0.002936849401568391, "phrase": "intersection_process"}, {"score": 0.0028715299874549245, "phrase": "compiled_binaries"}, {"score": 0.002833035775182696, "phrase": "statistical_features"}, {"score": 0.0026600905156986317, "phrase": "compiler-related_functions"}, {"score": 0.002624423288947767, "phrase": "third_layer"}, {"score": 0.0026009105281485888, "phrase": "semantic_features"}, {"score": 0.0025660347613972573, "phrase": "labeled_compiler-related_functions"}, {"score": 0.0025202582748972122, "phrase": "compiler_version"}, {"score": 0.0024864612830452254, "phrase": "optimization_level"}, {"score": 0.0023451553255837317, "phrase": "computational_resources"}, {"score": 0.0022118619998034742, "phrase": "elsevier_ltd"}, {"score": 0.0021723899772112423, "phrase": "dfrws."}, {"score": 0.0021336208506092173, "phrase": "open_access_article"}, {"score": 0.0021049977753042253, "phrase": "cc_by-nc-nd_license"}], "paper_keywords": ["Compiler provenance", " Reverse engineering", " Binary program analysis", " Digital forensics", " Programming analysis"], "paper_abstract": "Compiler provenance encompasses numerous pieces of information, such as the compiler family, compiler version, optimization level, and compiler-related functions. The extraction of such information is imperative for various binary analysis applications, such as function fingerprinting, clone detection, and authorship attribution. It is thus important to develop an efficient and automated approach for extracting compiler provenance. In this study, we present BinComp, a practical approach which, analyzes the syntax, structure, and semantics of disassembled functions to extract compiler provenance. BinComp has a stratified architecture with three layers. The first layer applies a supervised compilation process to a set of known programs to model the default code transformation of compilers. The second layer employs an intersection process that disassembles functions across compiled binaries to extract statistical features (e.g., numerical values) from common compiler/linker-inserted functions. This layer labels the compiler-related functions. The third layer extracts semantic features from the labeled compiler-related functions to identify the compiler version and the optimization level. Our experimental results demonstrate that BinComp is efficient in terms of-both computational resources and time. (C) 2015 The Authors. Published by Elsevier Ltd on behalf of DFRWS. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).", "paper_title": "BinComp: A stratified approach to compiler provenance Attribution", "paper_id": "WOS:000359330100016"}