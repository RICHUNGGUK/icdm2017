{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scientific_software"}, {"score": 0.0047468516620285525, "phrase": "computer_implementations"}, {"score": 0.0046797114400479135, "phrase": "theoretical_concepts"}, {"score": 0.004580769304731227, "phrase": "ever-increasing_role"}, {"score": 0.004357927940322685, "phrase": "scientific_ideas"}, {"score": 0.004116440453049531, "phrase": "relatively_small_models"}, {"score": 0.004058180509184539, "phrase": "empirical_setups"}, {"score": 0.004000741805312148, "phrase": "overarching_frameworks"}, {"score": 0.003347547260807785, "phrase": "cognitive_architectures"}, {"score": 0.002861302930564756, "phrase": "computer_program"}, {"score": 0.0026452734009203764, "phrase": "agile_development_methodology"}, {"score": 0.0025525322651112365, "phrase": "three-layer_scientific_test_harness"}, {"score": 0.0022608057001451414, "phrase": "extended_examples"}, {"score": 0.002212892265364764, "phrase": "unified_theories"}, {"score": 0.002181514206602054, "phrase": "human_learning"}, {"score": 0.0021049977753042253, "phrase": "chunking_and_template_theories"}], "paper_keywords": ["agile development", " CHREST", " cognitive architectures", " scientific software", " test-driven development"], "paper_abstract": "Computer implementations of theoretical concepts play an ever-increasing role in the development and application of scientific ideas. As the scale of such implementations increases from relatively small models and empirical setups to overarching frameworks from which many kinds of results may be obtained, it is important to consider the methodology by which these implementations are developed. Using cognitive architectures as an example, we discuss the relation between an implementation of an architecture and its underlying theory, a relation between a computer program and its description. We argue for the use of an agile development methodology, based around a three-layer scientific test harness and continuous refactoring, as most suitable for developing scientific software. The ideas are illustrated with extended examples of implementing unified theories of human learning, taken from the chunking and template theories.", "paper_title": "A theory-driven testing methodology for developing scientific software", "paper_id": "WOS:000309125400002"}