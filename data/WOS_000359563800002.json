{"auto_keywords": [{"score": 0.03831966082951129, "phrase": "codebase_replication"}, {"score": 0.029237135610446472, "phrase": "solstice"}, {"score": 0.012391028488666666, "phrase": "continuous_analysis_tools"}, {"score": 0.00481495049065317, "phrase": "feedback_delay"}, {"score": 0.0047689174754929195, "phrase": "software_development_tools"}, {"score": 0.004723322467153553, "phrase": "continuous_analysis"}, {"score": 0.004655742198075387, "phrase": "software_development"}, {"score": 0.004589124394375718, "phrase": "sooner_a_developer"}, {"score": 0.004458722048888919, "phrase": "program_analysis_results"}, {"score": 0.0041287394089001405, "phrase": "developer's_workflow"}, {"score": 0.0038230844545071303, "phrase": "better_approach"}, {"score": 0.003714368305523811, "phrase": "up-to-date_results"}, {"score": 0.003422781254306241, "phrase": "existing_offline_analysis"}, {"score": 0.0030642636185693054, "phrase": "developer's_codebase"}, {"score": 0.0029627701619228527, "phrase": "copy_codebase"}, {"score": 0.0028100102841877835, "phrase": "developer's_changes"}, {"score": 0.00266510562382701, "phrase": "publicly-available_eclipse_plug"}, {"score": 0.002351546769585221, "phrase": "findbugs"}, {"score": 0.0023066880707738736, "phrase": "data_race_detection"}, {"score": 0.002273605493468005, "phrase": "unit_testing"}, {"score": 0.0021563019696857768, "phrase": "implementation_effort"}, {"score": 0.0021356322417874106, "phrase": "case_studies"}, {"score": 0.0021049977753042253, "phrase": "solstice-based_continuous_analysis_tools"}], "paper_keywords": ["Continuous analysis", " Codebase Replication", " Solstice"], "paper_abstract": "During software development, the sooner a developer learns how code changes affect program analysis results, the more helpful that analysis is. Manually invoking an analysis may interrupt the developer's workflow or cause a delay before the developer learns the implications of the change. A better approach is continuous analysis tools that always provide up-to-date results. We present Codebase Replication, a technique that eases the implementation of continuous analysis tools by converting an existing offline analysis into an IDE-integrated, continuous tool with two desirable properties: isolation and currency. Codebase Replication creates and keeps in sync a copy of the developer's codebase. The analysis runs on the copy codebase without disturbing the developer and without being disturbed by the developer's changes. We developed Solstice, an open-source, publicly-available Eclipse plug-in that implements Codebase Replication. Solstice has less than 2.5 milliseconds overhead for most common developer actions. We used Solstice to implement four Eclipse-integrated continuous analysis tools based on the offline versions of FindBugs, PMD, data race detection, and unit testing. Each conversion required on average 710 LoC and 20 hours of implementation effort. Case studies indicate that Solstice-based continuous analysis tools are intuitive and easy-to-use.", "paper_title": "Reducing Feedback Delay of Software Development Tools via Continuous Analysis", "paper_id": "WOS:000359563800002"}