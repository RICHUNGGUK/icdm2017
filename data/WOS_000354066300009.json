{"auto_keywords": [{"score": 0.04959324222569227, "phrase": "sparsification_technique"}, {"score": 0.029714393707618907, "phrase": "dictionary_matching"}, {"score": 0.028413186461176774, "phrase": "compressed_index"}, {"score": 0.00481495049065317, "phrase": "compressing_dictionary_matching_index"}, {"score": 0.00457553517865013, "phrase": "total_length_n"}, {"score": 0.004506048850130758, "phrase": "dictionary_matching_problem"}, {"score": 0.0043258453436258405, "phrase": "query_text_t"}, {"score": 0.003807684498435389, "phrase": "classical_ac_automaton"}, {"score": 0.003769013114865439, "phrase": "aho"}, {"score": 0.0037307208089736835, "phrase": "corasick"}, {"score": 0.003692929207611494, "phrase": "commun"}, {"score": 0.003655357061098204, "phrase": "acm"}, {"score": 0.003351381374975648, "phrase": "space_requirement"}, {"score": 0.002889928791032578, "phrase": "space_requirements"}, {"score": 0.0025046245057922557, "phrase": "dynamic_updates"}, {"score": 0.0023798115577749225, "phrase": "approximate_dictionary_matching"}, {"score": 0.002272794656458419, "phrase": "query_time"}, {"score": 0.0021928902836049384, "phrase": "polylogarithmic_factor"}], "paper_keywords": ["Data compression", " Dictionary matching", " Text indexing", " Sparsification technique"], "paper_abstract": "Given a set of patterns of total length n, the dictionary matching problem is to index such that for any query text T, we can locate the occurrences of any pattern within T efficiently. This problem can be solved in optimal O(|T|+occ) time by the classical AC automaton (Aho and Corasick in Commun. ACM 18(6):333-340, 1975), where occ denotes the number of occurrences. The space requirement is O(n) words which is still far from optimal. In this paper, we show that in many cases, sparsification technique can be applied to improve the space requirements of the indexes for the dictionary matching and its related problems. First, we give a compressed index for dictionary matching, and show that such an index can be generalized to handle dynamic updates of . Also, we give a compressed index for approximate dictionary matching with one error. In each case, the query time is only slowed down by a polylogarithmic factor when compared with that achieved by the best O(n)-word counterparts.", "paper_title": "Compressing Dictionary Matching Index via Sparsification Technique", "paper_id": "WOS:000354066300009"}