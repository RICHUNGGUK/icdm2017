{"auto_keywords": [{"score": 0.033935685225089905, "phrase": "gcommit"}, {"score": 0.029826752063523265, "phrase": "g-arbiter"}, {"score": 0.00481495049065317, "phrase": "lazy-lazy_hardware_transactional_memory"}, {"score": 0.004757227624616643, "phrase": "transactional_memory"}, {"score": 0.004700532042154984, "phrase": "tm"}, {"score": 0.004588158931776543, "phrase": "compelling_alternative"}, {"score": 0.004505881071218599, "phrase": "multithreaded_programming"}, {"score": 0.004372002674739612, "phrase": "error-prone_lock-based_synchronization"}, {"score": 0.004216566615939546, "phrase": "lazy-lazy_hardware_tm"}, {"score": 0.004042166795461166, "phrase": "today's_hardware_tm_systems"}, {"score": 0.003922011960904278, "phrase": "commit_protocol"}, {"score": 0.0038054151244558123, "phrase": "severe_impact"}, {"score": 0.0036479866943736707, "phrase": "seq"}, {"score": 0.00360417515510547, "phrase": "scalable-tcc_implementation"}, {"score": 0.0030434561939032597, "phrase": "stcc-seq"}, {"score": 0.0029351141718104725, "phrase": "g-arbiter_microarchitecture"}, {"score": 0.0028823939507764238, "phrase": "minimal-latency_and_high-efficient_commits"}, {"score": 0.0025388705701873075, "phrase": "whole_on-chip_area"}, {"score": 0.0024932498388507084, "phrase": "marginal_energy_consumption"}, {"score": 0.0024632912250657636, "phrase": "full-system_simulations"}, {"score": 0.002419025278429845, "phrase": "target_system"}, {"score": 0.0023755529073496394, "phrase": "stamp_benchmarks"}, {"score": 0.002304824112812496, "phrase": "average_reductions"}, {"score": 0.002222717552124615, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "stcc-seq."}], "paper_keywords": ["Manycore CMPs", " Hardware transactional memory (HTM)", " Lazy-Lazy HTM", " Transaction commit"], "paper_abstract": "Transactional memory (TM) is a compelling alternative to simplify multithreaded programming that traditionally relies on error-prone lock-based synchronization for implementing cooperative tasks. Lazy-Lazy hardware TM is one of the most efficient schemes in today's hardware TM systems. Nonetheless, the commit protocol in these systems has severe impact on performance and energy. The SEQ in Scalable-TCC implementation (STCC-SEQ) is the most popular and efficient commit protocol to date. In this paper, we propose GCommit, a cost-effective hardware-based STCC-SEQ protocol. GCommit employs a G-Arbiter microarchitecture for achieving minimal-latency and high-efficient commits. We implement G-Arbiter with a standard 45 nm cell library. For a target 16-core CMP, a G-Arbiter just represents 0.07 % of the whole on-chip area, requiring marginal energy consumption. Full-system simulations of the target system with the STAMP benchmarks show that GCommit achieves average reductions of 15.7 and 13.7 % in execution time and energy, respectively, when compared with STCC-SEQ.", "paper_title": "Fast and efficient commits for Lazy-Lazy hardware transactional memory", "paper_id": "WOS:000365185400001"}