{"auto_keywords": [{"score": 0.02544080304608994, "phrase": "standard_b-trees"}, {"score": 0.00481495049065317, "phrase": "multiway_search_trees"}, {"score": 0.004736045157669388, "phrase": "database_systems"}, {"score": 0.004506968388996092, "phrase": "underlying_data_structure"}, {"score": 0.004218602458288531, "phrase": "bad_sequence"}, {"score": 0.0036553070575015344, "phrase": "average-case_analysis"}, {"score": 0.0032916702592724217, "phrase": "tree_height"}, {"score": 0.0029641011108505785, "phrase": "amortized_time"}, {"score": 0.00282048824450047, "phrase": "search_time"}, {"score": 0.0024569466759289055, "phrase": "latter_results"}, {"score": 0.002337848196418384, "phrase": "periodic_rebuilding"}, {"score": 0.0022368274529152342, "phrase": "data_structure"}], "paper_keywords": ["Algorithms", " Theory", " Design", " B-trees", " database access methods", " exponential potential function", " amortized complexity", " I/O model"], "paper_abstract": "Some database systems that use a form of B-tree for the underlying data structure do not do rebalancing on deletion. This means that a bad sequence of deletions can create a very unbalanced tree. Yet such databases perform well in practice. Avoidance of rebalancing on deletion has been justified empirically and by average-case analysis, but to our knowledge, no worst-case analysis has been done. We do such an analysis. We show that the tree height remains logarithmic in the number of insertions, independent of the number of deletions. Furthermore, the amortized time for an insertion or deletion, excluding the search time, is O(1), and nodes are modified by insertions and deletions with a frequency that is exponentially small in their height. The latter results do not hold for standard B-trees. By adding periodic rebuilding of the tree, we obtain a data structure that is theoretically superior to standard B-trees in many ways. Our results suggest that rebalancing on deletion not only is unnecessary but may be harmful.", "paper_title": "Deletion without Rebalancing in Multiway Search Trees", "paper_id": "WOS:000331124300008"}