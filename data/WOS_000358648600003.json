{"auto_keywords": [{"score": 0.049044989043430694, "phrase": "shared-memory_multiprocessors"}, {"score": 0.047698377071202586, "phrase": "adaptive_scheme"}, {"score": 0.00481495049065317, "phrase": "queue-based"}, {"score": 0.004780030485538593, "phrase": "adaptive_lock_algorithms"}, {"score": 0.004745362527093198, "phrase": "scalable_resource_allocation"}, {"score": 0.004625983640628956, "phrase": "scalable_lock_algorithm"}, {"score": 0.004493207015584002, "phrase": "resource_allocation_problem"}, {"score": 0.004364224683011796, "phrase": "-out-of-_mutual_exclusion_problem"}, {"score": 0.004223521213460728, "phrase": "shared_resources"}, {"score": 0.004117215958803593, "phrase": "arbitrary_number"}, {"score": 0.003898307690037192, "phrase": "exclusive_access"}, {"score": 0.003870009704443373, "phrase": "desired_resources"}, {"score": 0.0036909954181293405, "phrase": "distributed_system"}, {"score": 0.0036375920152538783, "phrase": "explicit_message"}, {"score": 0.0033329590158056935, "phrase": "performance_degradation"}, {"score": 0.003308751289007707, "phrase": "heavy_contention"}, {"score": 0.003248995912331012, "phrase": "desirable_fairness_guarantee"}, {"score": 0.0031787077057214086, "phrase": "first_multi-resource_lock_algorithm"}, {"score": 0.003132693064568434, "phrase": "strongest_first-in"}, {"score": 0.0029985954225814895, "phrase": "non-blocking_queue"}, {"score": 0.00293370839211022, "phrase": "previous_conflicting_resource_requests"}, {"score": 0.0027775505385261553, "phrase": "available_alternative_approaches"}, {"score": 0.0026392916936302355, "phrase": "eight_times"}, {"score": 0.0025447584328314754, "phrase": "boost's_lock_function"}, {"score": 0.0025170626402362633, "phrase": "intel_tbb's_queue_mutex"}, {"score": 0.002444668348634501, "phrase": "low_levels"}, {"score": 0.0021912115487610286, "phrase": "composite_adaptive_scheme"}, {"score": 0.002167355210897559, "phrase": "best_overall_performance"}, {"score": 0.0021049977753042253, "phrase": "system_contention"}], "paper_keywords": ["H-out-of-k mutual exclusion", " Lock-free programming", " Queue-based lock", " Resource allocation"], "paper_abstract": "We present a scalable lock algorithm and an adaptive scheme for shared-memory multiprocessors addressing the resource allocation problem, which is also known as the -out-of- mutual exclusion problem. In this problem, threads compete for shared resources where a thread may request an arbitrary number of resources at the same time. The challenge is for each thread to acquire exclusive access to desired resources while preventing deadlock or starvation. Many existing approaches solve this problem in a distributed system, but the explicit message passing paradigm they adopt is not optimal for shared-memory. Other applicable methods, like two-phase locking and resource hierarchy, suffer from performance degradation under heavy contention, while lacking a desirable fairness guarantee. This work describes the first multi-resource lock algorithm that guarantees the strongest first-in, first-out fairness. Our methodology is based on a non-blocking queue where competing threads spin on previous conflicting resource requests. In our experimental evaluation we compared the overhead and scalability of our lock to the best available alternative approaches using a micro-benchmark. As contention increases, our multi-resource lock obtains an average of eight times speed-up over the alternatives including GNU C++'s lock method, Boost's lock function, and Intel TBB's queue mutex. To further improve the performance on low levels of contention, we introduce an adaptive scheme that is composed of two different lock algorithms and alternates the use the locks depending on the level of contention. Our experimental results show that the composite adaptive scheme achieves the best overall performance comparing with using either lock alone when system contention is not known a priori.", "paper_title": "Queue-Based and Adaptive Lock Algorithms for Scalable Resource Allocation on Shared-Memory Multiprocessors", "paper_id": "WOS:000358648600003"}