{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "modelling_languages"}, {"score": 0.010888256302130165, "phrase": "instance_models"}, {"score": 0.004733347359490221, "phrase": "model-driven_engineering"}, {"score": 0.00447115003744675, "phrase": "complete_life_cycle"}, {"score": 0.004420472010542188, "phrase": "complex_software-intensive_systems"}, {"score": 0.004296264970612285, "phrase": "entire_product_families"}, {"score": 0.0041517954514423625, "phrase": "entire_modelling_languages"}, {"score": 0.003877211065759289, "phrase": "domain-specific_languages"}, {"score": 0.0037042817107563785, "phrase": "application_domain"}, {"score": 0.0035390378585554547, "phrase": "modelling_domain"}, {"score": 0.0034789831290103967, "phrase": "manual_process"}, {"score": 0.003419943984098415, "phrase": "tedious_and_error-prone_migration"}, {"score": 0.0030164423559955896, "phrase": "different_evolution_scenarios"}, {"score": 0.0029483516334882862, "phrase": "modelling_artefacts"}, {"score": 0.0028006988338192375, "phrase": "transformation_models"}, {"score": 0.0026452734009203764, "phrase": "required_remedial_actions"}, {"score": 0.002585539416877115, "phrase": "primitive_scenarios"}, {"score": 0.002527150892127982, "phrase": "possible_evolutions"}, {"score": 0.0023463203637929466, "phrase": "high-level_framework"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Evolution", " Modelling languages", " Language engineering", " Model-driven engineering", " Model transformation"], "paper_abstract": "In model-driven engineering, evolution is inevitable over the course of the complete life cycle of complex software-intensive systems and more importantly of entire product families. Not only instance models, but also entire modelling languages are subject to change. This is in particular true for domain-specific languages, whose language constructs are tightly coupled to an application domain. The most popular approach to evolution in the modelling domain is a manual process, with tedious and error-prone migration of artefacts such as instance models as a result. This paper provides a taxonomy for evolution of modelling languages and discusses the different evolution scenarios for various kinds of modelling artefacts, such as instance models, meta-models, and transformation models. Subsequently, the consequences of evolution and the required remedial actions are decomposed into primitive scenarios such that all possible evolutions can be covered exhaustively. These primitives are then used in a high-level framework for the evolution of modelling languages. We suggest that our structured approach enables the design of(semi-)automatic modelling language evolution solutions. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A framework for evolution of modelling languages", "paper_id": "WOS:000292806900011"}