{"auto_keywords": [{"score": 0.049715817986079124, "phrase": "timing_diagram"}, {"score": 0.006455016493284309, "phrase": "timing_diagram_model"}, {"score": 0.00481495049065317, "phrase": "software_requirement"}, {"score": 0.004547656324173302, "phrase": "software_specification"}, {"score": 0.004378672260401467, "phrase": "proposed_method"}, {"score": 0.004150377643719188, "phrase": "timing_diagram_drawing_method"}, {"score": 0.0038166522763373434, "phrase": "typical_timing_diagrams"}, {"score": 0.00377326532920359, "phrase": "extra_features"}, {"score": 0.0037020429480068653, "phrase": "field_engineers'_requests"}, {"score": 0.0035500334260484376, "phrase": "formal_method"}, {"score": 0.0034303002275695446, "phrase": "formal_description"}, {"score": 0.003391290302481397, "phrase": "converting_algorithm"}, {"score": 0.0031542917620807093, "phrase": "system_specifications"}, {"score": 0.0024899186481178075, "phrase": "system_specification"}, {"score": 0.0023069440108381364, "phrase": "mixed_specification"}, {"score": 0.0021785729703227698, "phrase": "test_case_generation"}, {"score": 0.0021620042653528846, "phrase": "model_check"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Timing diagram", " Modeling software", " Simulink/Stateflow", " Finite-state machine", " Statechart"], "paper_abstract": "Context: A methodology is needed to model software specification with both timing diagram and Simulink/Stateflow (SL/SF) and to convert timing diagram model into SL/SF model. Objectives: This paper aims to propose a timing diagram drawing method and the algorithm to convert a timing diagram model into the equivalently behaving SL/SF model. Method: We add a few extra features to those of the typical timing diagrams. The extra features were chosen by the field engineers' requests and the survey of many different commercial models. This paper proposes the formal method to describe the timing diagram. Based on the formal description, the converting algorithm translates a timing diagram into the SL/SF model. Results: By providing a path from timing diagram to SL/SF, system specifications can be described with both SL/SF and timing diagram. This paper addresses the details of outcomes that the proposed method was successfully applied to modeling \"Theft watch system\" and \"Automotive power window controller. The proposed method has been successfully applied to other commercial systems, and to the models provided by Mathworks. Conclusion: This paper proposed a methodology to describe system specification with both timing diagram and SL/SF. The strategy might help designers more efficiently describe specifications. In addition, the mixed specification can be simulated in SL/SF, and the specification can utilize other third party SL/SF tools such as test case generation or model check utilities. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Modeling software requirement with timing diagram and Simulink Stateflow", "paper_id": "WOS:000288919900005"}