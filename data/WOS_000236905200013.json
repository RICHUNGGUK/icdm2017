{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "core_calculus"}, {"score": 0.0047563776685277314, "phrase": "dynamic_flow_policies"}, {"score": 0.00458488025289647, "phrase": "static_notion"}, {"score": 0.004157058883925715, "phrase": "changing_events"}, {"score": 0.004031699976413366, "phrase": "static_verification"}, {"score": 0.003982617095636925, "phrase": "secure_information_flow"}, {"score": 0.0038862297330905836, "phrase": "popular_theme"}, {"score": 0.0038389110156920926, "phrase": "recent_programming_language_research"}, {"score": 0.003769006950727621, "phrase": "information_flow_policies"}, {"score": 0.0036553070575015344, "phrase": "multilevel_security"}, {"score": 0.0035668128900149814, "phrase": "static_view"}, {"score": 0.0035233696341819437, "phrase": "security_levels"}, {"score": 0.003293688299319582, "phrase": "dynamic_information_flow_policies"}, {"score": 0.0025615908073796027, "phrase": "effect_system"}, {"score": 0.0025148871904409095, "phrase": "ml-like_language"}, {"score": 0.002424012799998538, "phrase": "completely_static_verification"}, {"score": 0.0023944552329463035, "phrase": "flow_lock_policies"}, {"score": 0.002265833357217618, "phrase": "semantic_security_property_generalising_noninterference"}, {"score": 0.002183938718432764, "phrase": "simple_mechanism"}, {"score": 0.0021049977753042253, "phrase": "recently_proposed_information_flow_paradigms"}], "paper_keywords": [""], "paper_abstract": "Security is rarely a static notion. What is considered to be confidential or untrusted data varies over time according to changing events and states. The static verification of secure information flow has been a popular theme in recent programming language research, but information flow policies considered are based on multilevel security which presents a static view of security levels. In this paper we introduce a very simple mechanism for specifying dynamic information flow policies, flow locks, which specify conditions under which data may be read by a certain actor. The interface between the policy and the code is via instructions which open and close flow locks. We present a type and effect system for an ML-like language with references which permits the completely static verification of flow lock policies, and prove that the system satisfies a semantic security property generalising noninterference. We show that this simple mechanism can represent a number of recently proposed information flow paradigms for declassification.", "paper_title": "Flow locks: Towards a core calculus for dynamic flow policies", "paper_id": "WOS:000236905200013"}