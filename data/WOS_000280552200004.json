{"auto_keywords": [{"score": 0.04838919478929022, "phrase": "small_alphabets"}, {"score": 0.044018256322395075, "phrase": "k-mismatch_problem"}, {"score": 0.04179546919304622, "phrase": "faast"}, {"score": 0.00481495049065317, "phrase": "approximate_boyer-moore"}, {"score": 0.004481132747216135, "phrase": "new_variation"}, {"score": 0.004401342842183475, "phrase": "approximate_boyer-moore_string_matching"}, {"score": 0.003044455555031339, "phrase": "k-difference_problem"}, {"score": 0.0028844769395018595, "phrase": "searching_time"}, {"score": 0.002543043781904587, "phrase": "lower_time_complexity"}, {"score": 0.00249767641333441, "phrase": "faast."}, {"score": 0.0021821915946356168, "phrase": "new_algorithms"}], "paper_keywords": ["Approximate string matching", " Edit distance", " Hamming distance", " Complexity of algorithms", " Biological sequences"], "paper_abstract": "Recently a new variation of approximate Boyer-Moore string matching was presented for the k-mismatch problem. The variation, called FAAST, is specifically tuned for small alphabets. We further improve this algorithm gaining speedups in both preprocessing and searching. We also present three variations of the algorithm for the k-difference problem. We show that the searching time of the algorithms is average-optimal and the preprocessing also has a lower time complexity than FAAST. Our experiments show that our algorithm for the k-mismatch problem is about 30% faster than FAAST and the new algorithms compare well against other state-of-the-art algorithms for approximate string matching.", "paper_title": "Approximate Boyer-Moore String Matching for Small Alphabets", "paper_id": "WOS:000280552200004"}