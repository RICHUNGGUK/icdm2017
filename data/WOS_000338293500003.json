{"auto_keywords": [{"score": 0.03941280956909655, "phrase": "asp_programs"}, {"score": 0.014555519693211116, "phrase": "asp."}, {"score": 0.013606756916570652, "phrase": "dynamic_magic_set"}, {"score": 0.00995905795291097, "phrase": "super-coherent_programs"}, {"score": 0.00481495049065317, "phrase": "super-coherence_problems"}, {"score": 0.004783852487938866, "phrase": "asp._adapting"}, {"score": 0.004737579882204798, "phrase": "database_theory"}, {"score": 0.004571692719970733, "phrase": "grounding_components"}, {"score": 0.004542158659382197, "phrase": "asp_systems"}, {"score": 0.004483659121004398, "phrase": "important_topic"}, {"score": 0.0043830840694466, "phrase": "magic_set_method"}, {"score": 0.0037030390595465673, "phrase": "recent_work"}, {"score": 0.0036671822784770463, "phrase": "large_fragment"}, {"score": 0.0029506624896613446, "phrase": "especially_the_first_question"}, {"score": 0.0027472888482450776, "phrase": "propositional_program"}, {"score": 0.00265090644169702, "phrase": "disjunctive_case"}, {"score": 0.00257456206600449, "phrase": "normal_programs"}, {"score": 0.002549604441640963, "phrase": "hardness_proofs"}, {"score": 0.0025248881422983553, "phrase": "difficult_part"}, {"score": 0.0024048460326284416, "phrase": "reduct_models"}, {"score": 0.002268287853885277, "phrase": "second_question"}, {"score": 0.002224510044064184, "phrase": "relevant_asp_reasoning_tasks"}, {"score": 0.0021049977753042253, "phrase": "practical_interest"}], "paper_keywords": ["Answer Set Programming (ASP)", " complexity analysis", " coherence", " uniform equivalence", " foundations"], "paper_abstract": "Adapting techniques from database theory in order to optimize Answer Set Programming (ASP) systems, and in particular the grounding components of ASP systems, is an important topic in ASP. In recent years, the Magic Set method has received some interest in this setting, and a variant of it, called Dynamic Magic Set, has been proposed for ASP. However, this technique has a caveat, because it is not correct (in the sense of being query-equivalent) for all ASP programs. In a recent work, a large fragment of ASP programs, referred to as super-coherent programs, has been identified, for which Dynamic Magic Set is correct. The fragment contains all programs which possess at least one answer set, no matter which set of facts is added to them. Two open question remained: How complex is it to determine whether a given program is super-coherent? Does the restriction to super-coherent programs limit the problems that can be solved? Especially the first question turned out to be quite difficult to answer precisely. In this paper, we formally prove that deciding whether a propositional program is super-coherent is Pi(P)(3) -complete in the disjunctive case, while it is Pi(P)(2) -complete for normal programs. The hardness proofs are the difficult part in this endeavor: We proceed by characterizing the reductions by the models and reduct models which the ASP programs should have, and then provide instantiations that meet the given specifications. Concerning the second question, we show that all relevant ASP reasoning tasks can be transformed into tasks over super-coherent programs, although this transformation is more of theoretical than practical interest.", "paper_title": "Complexity of super-coherence problems in ASP", "paper_id": "WOS:000338293500003"}