{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "chr_programs"}, {"score": 0.00475413908468027, "phrase": "program_transformation"}, {"score": 0.004664352260912174, "phrase": "appealing_technique"}, {"score": 0.004518442937844318, "phrase": "run-time_efficiency"}, {"score": 0.003978866233891427, "phrase": "syntactic_program_manipulations"}, {"score": 0.003829877278269543, "phrase": "semantic_equivalence"}, {"score": 0.003663067281537946, "phrase": "basic_operations"}, {"score": 0.0034154440860550564, "phrase": "procedure_call"}, {"score": 0.003245900020944865, "phrase": "large_body"}, {"score": 0.0030651710672229926, "phrase": "sequential_programs"}, {"score": 0.002912963877144772, "phrase": "concurrent_languages"}, {"score": 0.0028037753646260937, "phrase": "unfolding_system"}, {"score": 0.002768293851511292, "phrase": "constraint_handling_rules_programs"}, {"score": 0.0026815368507715, "phrase": "unfolding_rule"}, {"score": 0.0024372021710656585, "phrase": "unfolded_rule"}, {"score": 0.0022292394795878643, "phrase": "suitable_conditions"}], "paper_keywords": ["CHR (Constraint Handling Rules)", " program transformation", " unfolding", " confluence", " termination"], "paper_abstract": "Program transformation is an appealing technique which allows to improve run-time efficiency, space-consumption, and more generally to optimize a given program. Essentially, it consists of a sequence of syntactic program manipulations which preserves some kind of semantic equivalence. Unfolding is one of the basic operations used by most program transformation systems and consists of the replacement of a procedure call by its definition. While there is a large body of literature on the transformation and unfolding of sequential programs, very few papers have addressed this issue for concurrent languages. This paper defines an unfolding system for Constraint Handling Rules programs. We define an unfolding rule, show its correctness and discuss some conditions that can be used to delete an unfolded rule while preserving the program meaning. We also prove that, under some suitable conditions, confluence and termination are preserved by the above transformation.", "paper_title": "Unfolding for CHR programs", "paper_id": "WOS:000351762100001"}