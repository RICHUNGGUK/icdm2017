{"auto_keywords": [{"score": 0.04796789568919049, "phrase": "object-oriented_systems"}, {"score": 0.03876531165202005, "phrase": "higher_odds"}, {"score": 0.00481495049065317, "phrase": "class_change-"}, {"score": 0.004707672504464783, "phrase": "poor_design_choices"}, {"score": 0.003975416846030462, "phrase": "argouml"}, {"score": 0.003916098498242888, "phrase": "mylyn"}, {"score": 0.0038721890530859578, "phrase": "rhino"}, {"score": 0.002987236799291296, "phrase": "almost_all_releases"}, {"score": 0.002502995662011305, "phrase": "structural_changes"}, {"score": 0.0024105326885334962, "phrase": "qualitative_explanations"}, {"score": 0.002286781334850213, "phrase": "release_notes"}, {"score": 0.0022696277881969896, "phrase": "bug_reports"}, {"score": 0.0022441378838655712, "phrase": "obtained_results"}, {"score": 0.002218933616777076, "phrase": "posteriori_previous_work"}, {"score": 0.0021049977753042253, "phrase": "quality_assurance"}], "paper_keywords": ["Antipatterns", " Mining software repositories", " Empirical software engineering"], "paper_abstract": "Antipatterns are poor design choices that are conjectured to make object-oriented systems harder to maintain. We investigate the impact of antipatterns on classes in object-oriented systems by studying the relation between the presence of antipatterns and the change- and fault-proneness of the classes. We detect 13 antipatterns in 54 releases of ArgoUML, Eclipse, Mylyn, and Rhino, and analyse (1) to what extent classes participating in antipatterns have higher odds to change or to be subject to fault-fixing than other classes, (2) to what extent these odds (if higher) are due to the sizes of the classes or to the presence of antipatterns, and (3) what kinds of changes affect classes participating in antipatterns. We show that, in almost all releases of the four systems, classes participating in antipatterns are more change-and fault-prone than others. We also show that size alone cannot explain the higher odds of classes with antipatterns to underwent a (fault-fixing) change than other classes. Finally, we show that structural changes affect more classes with antipatterns than others. We provide qualitative explanations of the increase of change- and fault-proneness in classes participating in antipatterns using release notes and bug reports. The obtained results justify a posteriori previous work on the specification and detection of antipatterns and could help to better focus quality assurance and testing activities.", "paper_title": "An exploratory study of the impact of antipatterns on class change- and fault-proneness", "paper_id": "WOS:000300343800004"}