{"auto_keywords": [{"score": 0.038310925689172756, "phrase": "ppa"}, {"score": 0.032153479967535134, "phrase": "processor_time"}, {"score": 0.00481495049065317, "phrase": "parallel_portfolios"}, {"score": 0.004692227830462433, "phrase": "wide_range"}, {"score": 0.004644014990871423, "phrase": "combinatorial_optimization_algorithms"}, {"score": 0.004525629293824217, "phrase": "complex_reasoning_tasks"}, {"score": 0.004410248125081398, "phrase": "single_algorithm"}, {"score": 0.0037965243835456214, "phrase": "parallel_portfolio"}, {"score": 0.0035497797026638033, "phrase": "diverse_algorithms"}, {"score": 0.0034771228725942846, "phrase": "single_problem"}, {"score": 0.003353521531649663, "phrase": "single_processor"}, {"score": 0.003071274938566466, "phrase": "different_shares"}, {"score": 0.0029164434911787187, "phrase": "effective_method"}, {"score": 0.0026297428083782875, "phrase": "optimal_static_schedule"}, {"score": 0.0025493457404304446, "phrase": "np-complete_problem"}, {"score": 0.0025100713447593773, "phrase": "general_class"}, {"score": 0.0024842242921857705, "phrase": "utility_functions"}, {"score": 0.0023346234464901978, "phrase": "random_instances"}, {"score": 0.0021049977753042253, "phrase": "fastest_individual_algorithm"}], "paper_keywords": ["algorithm portfolios", " resource bounded reasoning", " combinatorial optimization"], "paper_abstract": "A wide range of combinatorial optimization algorithms have been developed for complex reasoning tasks. Frequently, no single algorithm outperforms all the others. This has raised interest in leveraging the performance of a collection of algorithms to improve performance. We show how to accomplish this using a Parallel Portfolio of Algorithms (PPA). A PPA is a collection of diverse algorithms for solving a single problem, all running concurrently on a single processor until a solution is produced. The performance of the portfolio may be controlled by assigning different shares of processor time to each algorithm. We present an effective method for finding a PPA in which the share of processor time allocated to each algorithm is fixed. Finding the optimal static schedule is shown to be an NP-complete problem for a general class of utility functions. We present bounds on the performance of the PPA over random instances and evaluate the performance empirically on a collection of 23 state-of-the-art SAT algorithms. The results show significant performance gains over the fastest individual algorithm in the collection.", "paper_title": "Learning parallel portfolios of algorithms", "paper_id": "WOS:000247210400004"}