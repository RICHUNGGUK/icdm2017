{"auto_keywords": [{"score": 0.04613998105509961, "phrase": "rasp"}, {"score": 0.015719714774698138, "phrase": "rasp."}, {"score": 0.004766683200410046, "phrase": "previous_work"}, {"score": 0.004202472962684885, "phrase": "declarative_reasoning"}, {"score": 0.0038964032225585117, "phrase": "set_semantics"}, {"score": 0.0038573081851680656, "phrase": "quantitative_reasoning"}, {"score": 0.00376127170364341, "phrase": "algebraic_structure"}, {"score": 0.003576286811853861, "phrase": "rasp_framework"}, {"score": 0.003487222504700868, "phrase": "preference_reasoning"}, {"score": 0.003452218803245602, "phrase": "resources_usage"}, {"score": 0.003216804708106142, "phrase": "expressive_constructs"}, {"score": 0.0031684791285366315, "phrase": "complex_preferences_specification"}, {"score": 0.0031366648074858555, "phrase": "aggregate_resources"}, {"score": 0.0028642924503126154, "phrase": "new_constructs"}, {"score": 0.002723301730223192, "phrase": "plain_asp."}, {"score": 0.0024747144427802537, "phrase": "np"}, {"score": 0.0024125281905075383, "phrase": "asp."}, {"score": 0.0021479597698614373, "phrase": "ground_rasp_program"}, {"score": 0.0021049977753042253, "phrase": "pure_asp_encoding"}], "paper_keywords": ["Answer set programming", " quantitative reasoning", " preferences", " language extensions"], "paper_abstract": "In previous work we have proposed an extension to ASP (Answer Set Programming), called RASP, standing for ASP with Resources. RASP supports declarative reasoning on production and consumption of (amounts of) resources. The approach combines answer set semantics with quantitative reasoning and relies on an algebraic structure to support computations and comparisons of amounts. The RASP framework provides some form of preference reasoning on resources usage. In this paper, we go further in this direction by introducing expressive constructs for supporting complex preferences specification on aggregate resources. We present a refinement of the semantics of RASP so as to take into account the new constructs. For all the extensions, we provide an encoding into plain ASP. We prove that the complexity of establishing the existence of an answer set, in such an enriched framework, remains NP-complete as in ASP. Finally, we report on raspberry, a prototypical implementation of RASP. This tool consists of a compiler that, given a ground RASP program, produces a pure ASP encoding suitable to be processed by commonly available ASP-solvers.", "paper_title": "Extending and Implementing RASP", "paper_id": "WOS:000287022900002"}