{"auto_keywords": [{"score": 0.041820332056100244, "phrase": "mutation_testing"}, {"score": 0.008638216555240488, "phrase": "safety-critical_software"}, {"score": 0.00481495049065317, "phrase": "test_quality"}, {"score": 0.004669845451682529, "phrase": "primary_means"}, {"score": 0.004568871736067739, "phrase": "safety-critical_systems"}, {"score": 0.0044118153390803405, "phrase": "certification_authority"}, {"score": 0.004354315061804687, "phrase": "sufficient_testing"}, {"score": 0.004149792080414689, "phrase": "test_coverage_levels"}, {"score": 0.00406001734835979, "phrase": "safety_standards"}, {"score": 0.004024651422626329, "phrase": "industry_guidelines"}, {"score": 0.003937573222812911, "phrase": "alternative_or_complementary_method"}, {"score": 0.0038862297330905836, "phrase": "test_sufficiency"}, {"score": 0.0037198532511087566, "phrase": "safety-critical_industry"}, {"score": 0.0035761913760242697, "phrase": "empirical_evaluation"}, {"score": 0.003468287913322255, "phrase": "airborne_software_systems"}, {"score": 0.003378385493203297, "phrase": "coverage_requirements"}, {"score": 0.003191485583025302, "phrase": "high-integrity_subsets"}, {"score": 0.0031360813491708005, "phrase": "ada"}, {"score": 0.002949598537993663, "phrase": "test_cases"}, {"score": 0.002823207272381655, "phrase": "traditional_structural_coverage_analysis"}, {"score": 0.0027985846558073457, "phrase": "manual_peer_review"}, {"score": 0.0026436755508085223, "phrase": "test_activity"}, {"score": 0.002552628669352939, "phrase": "requirements_definition"}, {"score": 0.002530359917257626, "phrase": "coding_process"}, {"score": 0.002443206010337041, "phrase": "program_characteristics"}, {"score": 0.0024218895273910943, "phrase": "mutation_survival"}, {"score": 0.0023798115577749225, "phrase": "program_size"}, {"score": 0.0023079225317714815, "phrase": "test_areas"}, {"score": 0.0022579036318895753, "phrase": "dormant_faults"}, {"score": 0.0022382002476510573, "phrase": "industry_feedback"}, {"score": 0.0021049977753042253, "phrase": "typical_verification_life_cycle"}], "paper_keywords": ["Mutation", " safety-critical software", " verification", " testing", " certification"], "paper_abstract": "Testing provides a primary means for assuring software in safety-critical systems. To demonstrate, particularly to a certification authority, that sufficient testing has been performed, it is necessary to achieve the test coverage levels recommended or mandated by safety standards and industry guidelines. Mutation testing provides an alternative or complementary method of measuring test sufficiency, but has not been widely adopted in the safety-critical industry. In this study, we provide an empirical evaluation of the application of mutation testing to airborne software systems which have already satisfied the coverage requirements for certification. Specifically, we apply mutation testing to safety-critical software developed using high-integrity subsets of C and Ada, identify the most effective mutant types, and analyze the root causes of failures in test cases. Our findings show how mutation testing could be effective where traditional structural coverage analysis and manual peer review have failed. They also show that several testing issues have origins beyond the test activity, and this suggests improvements to the requirements definition and coding process. Our study also examines the relationship between program characteristics and mutation survival and considers how program size can provide a means for targeting test areas most likely to have dormant faults. Industry feedback is also provided, particularly on how mutation testing can be integrated into a typical verification life cycle of airborne software.", "paper_title": "An Empirical Evaluation of Mutation Testing for Improving the Test Quality of Safety-Critical Software", "paper_id": "WOS:000319338200005"}