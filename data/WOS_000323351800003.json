{"auto_keywords": [{"score": 0.027946457161723823, "phrase": "hirundo"}, {"score": 0.0257166746483632, "phrase": "cdr"}, {"score": 0.00481495049065317, "phrase": "stream_programs"}, {"score": 0.0047761092701293474, "phrase": "source_program_operator_graph_transformations"}, {"score": 0.004737579882204798, "phrase": "distributed_data_stream_processing"}, {"score": 0.0046803650677267146, "phrase": "data_analysis_paradigm"}, {"score": 0.004642604455537883, "phrase": "massive_amounts"}, {"score": 0.00445830200258645, "phrase": "real-time_constraints"}, {"score": 0.0041112665381266315, "phrase": "fine_tune"}, {"score": 0.003964007795174772, "phrase": "stream_processing_system"}, {"score": 0.003900257249255497, "phrase": "manual_fine_tuning"}, {"score": 0.003853115465608543, "phrase": "stream_program"}, {"score": 0.0037301606780397456, "phrase": "huge_amounts"}, {"score": 0.003700037700138249, "phrase": "programmer_time"}, {"score": 0.003524322230452833, "phrase": "automated_process"}, {"score": 0.003495855671790616, "phrase": "stream_program_performance_optimization"}, {"score": 0.003453584878128719, "phrase": "semantic_preserving_automatic_code_transformation"}, {"score": 0.0034118234596993836, "phrase": "stream_processing_job_performance"}, {"score": 0.003289534854212415, "phrase": "input_program"}, {"score": 0.003236596168242036, "phrase": "program_structure"}, {"score": 0.0031974502006267163, "phrase": "directed_acyclic_graph"}, {"score": 0.003070340620983981, "phrase": "tri-op_transformation"}, {"score": 0.0030455297429878873, "phrase": "bi-op_transformation"}, {"score": 0.0030086877092638945, "phrase": "resulting_sample_program_space"}, {"score": 0.0028425481299483254, "phrase": "ranked_list"}, {"score": 0.0028195727965553367, "phrase": "sample_programs"}, {"score": 0.0027854565462509095, "phrase": "higher_performance"}, {"score": 0.0026530590435527527, "phrase": "prototype_stream_program_performance_optimization_mechanism"}, {"score": 0.002537216271965659, "phrase": "spade_programs"}, {"score": 0.0024963543716522087, "phrase": "system_s_stream_processing_run-time"}, {"score": 0.002466139325703204, "phrase": "five_real_world_applications"}, {"score": 0.0024362905502888312, "phrase": "vwap"}, {"score": 0.0023972617399507295, "phrase": "twitter"}, {"score": 0.0023776656246300063, "phrase": "apnoea"}], "paper_keywords": ["Stream processing", " Performance optimization", " Code transformation", " Data-intensive computing", " Automatic tuning"], "paper_abstract": "Distributed data stream processing is a data analysis paradigm where massive amounts of data produced by various sources are analyzed online within real-time constraints. Execution performance of a stream program/query executed on such middleware is largely dependent on the ability of the programmer to fine tune the program to match the topology of the stream processing system. However, manual fine tuning of a stream program is a very difficult, error prone process that demands huge amounts of programmer time and expertise which are expensive to obtain. We describe an automated process for stream program performance optimization that uses semantic preserving automatic code transformation to improve stream processing job performance. We first identify the structure of the input program and represent the program structure in a Directed Acyclic Graph. We transform the graph using the concepts of Tri-OP Transformation and Bi-Op Transformation. The resulting sample program space is pruned using both empirical as well as profiling information to obtain a ranked list of sample programs which have higher performance compared to their parent program. We successfully implemented this methodology on a prototype stream program performance optimization mechanism called Hirundo. The mechanism has been developed for optimizing SPADE programs which run on System S stream processing run-time. Using five real world applications (called VWAP, CDR, Twitter, Apnoea, and Bargain) we show the effectiveness of our approach. Hirundo was able to identify a 31.1 times higher performance version of the CDR application within seven minutes time on a cluster of 4 nodes.", "paper_title": "Automatic optimization of stream programs via source program operator graph transformations", "paper_id": "WOS:000323351800003"}