{"auto_keywords": [{"score": 0.047079478675496576, "phrase": "large_graph"}, {"score": 0.01561435125529378, "phrase": "shortest_distance_queries"}, {"score": 0.013601363783894654, "phrase": "large_graphs"}, {"score": 0.00481495049065317, "phrase": "undirected_world"}, {"score": 0.0046857508651690916, "phrase": "graph_analysis"}, {"score": 0.004638195656547484, "phrase": "mining_tasks"}, {"score": 0.00457553517865013, "phrase": "database_applications"}, {"score": 0.004231249907249981, "phrase": "real_applications"}, {"score": 0.004188287972391714, "phrase": "intensive_queries"}, {"score": 0.0040619911719900976, "phrase": "shortest_distances"}, {"score": 0.003899476621346112, "phrase": "-pairs_shortest_distances"}, {"score": 0.003807684498435389, "phrase": "distance_labeling"}, {"score": 0.0037307208089736835, "phrase": "all-pairs_shortest_distances"}, {"score": 0.003680274684654909, "phrase": "distance_labels"}, {"score": 0.003581412258960711, "phrase": "pre-computing_step"}, {"score": 0.0032336801561165113, "phrase": "existing_algorithms"}, {"score": 0.003083758773470612, "phrase": "np"}, {"score": 0.0030310732341527168, "phrase": "heuristic_algorithms"}, {"score": 0.0030002605593597966, "phrase": "large_size_distance_labels"}, {"score": 0.0029096837584084182, "phrase": "-pairs_shortest_paths"}, {"score": 0.0028218336994432864, "phrase": "multi-hop_distance_labeling_approach"}, {"score": 0.0026449626324264275, "phrase": "multi-hop_distance_labels"}, {"score": 0.0026091594819333654, "phrase": "pre-computing_all-pairs_shortest_paths"}, {"score": 0.0024623110626032364, "phrase": "shortest_distance_query"}, {"score": 0.0023960878466674795, "phrase": "query-specific_small_set"}, {"score": 0.0022766712610014484, "phrase": "shortest_distance"}, {"score": 0.002163193271881447, "phrase": "extensive_performance_studies"}, {"score": 0.0021484955960643167, "phrase": "large_real_graphs"}], "paper_keywords": ["Large graph", " Shortest distance queries", " Graph labeling"], "paper_abstract": "Shortest distance queries are essential not only in graph analysis and graph mining tasks but also in database applications, when a large graph needs to be dealt with. Such shortest distance queries are frequently issued by end-users or requested as a subroutine in real applications. For intensive queries on large graphs, it is impractical to compute shortest distances on-line from scratch, and impractical to materialize all-pairs shortest distances. In the literature, 2-hop distance labeling is proposed to index the all-pairs shortest distances. It assigns distance labels to vertices in a large graph in a pre-computing step off-line and then answers shortest distance queries on-line by making use of such distance labels, which avoids exhaustively traversing the large graph when answering queries. However, the existing algorithms to generate 2-hop distance labels are not scalable to large graphs. Finding an optimal 2-hop distance labeling is NP-hard, and heuristic algorithms may generate large size distance labels while still needing to pre-compute all-pairs shortest paths. In this paper, we propose a multi-hop distance labeling approach, which generates a subset of the 2-hop distance labels as index off-line. We can compute the multi-hop distance labels efficiently by avoiding pre-computing all-pairs shortest paths. In addition, our multi-hop distance labeling is small in size to be stored. To answer a shortest distance query between two vertices, we first generate the query-specific small set of 2-hop distance labels for the two vertices based on our multi-hop distance labels stored and compute the shortest distance between the two vertices based on the 2-hop distance labels generated on-line. We conducted extensive performance studies on large real graphs and confirmed the efficiency of our multi-hop distance labeling scheme.", "paper_title": "The exact distance to destination in undirected world", "paper_id": "WOS:000311406800006"}