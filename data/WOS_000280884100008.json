{"auto_keywords": [{"score": 0.04874330526858656, "phrase": "type_reconstruction"}, {"score": 0.00481495049065317, "phrase": "dynamically_typed_programming_languages"}, {"score": 0.004627944735913613, "phrase": "static_types"}, {"score": 0.004575854901681043, "phrase": "program_elements"}, {"score": 0.00447341965028879, "phrase": "static_type"}, {"score": 0.004275347843870176, "phrase": "wide_range"}, {"score": 0.0034867406208212146, "phrase": "type_inference"}, {"score": 0.0033893426032054366, "phrase": "active_field"}, {"score": 0.0030606302942851027, "phrase": "execution_speed"}, {"score": 0.002958281631770322, "phrase": "existing_approaches"}, {"score": 0.002859345731792013, "phrase": "direct_feedback"}, {"score": 0.002827105825163379, "phrase": "development_environments"}, {"score": 0.002656158309155626, "phrase": "type_reconstruction_algorithm"}, {"score": 0.002279011030331704, "phrase": "byte-code_evaluator"}, {"score": 0.0021049977753042253, "phrase": "concrete_case_studies"}], "paper_keywords": ["Performance", " Experimentation", " Algorithms", " Human Factors", " Type Reconstruction", " Type Inference", " Dynamic Programming Languages", " Development Environments"], "paper_abstract": "Type inference and type reconstruction derive static types for program elements that have no static type associated with them. They have a wide range of usage, such as helping to eliminate the burden of manually specifying types, verifying whether a program is type-safe, helping to produce more optimized code or helping to understand programs. While type inference and type reconstruction is an active field of research, most existing techniques are interested foremost in the precision of their approaches, at the expense of execution speed. As a result, existing approaches are not suited to give direct feedback in development environments, where interactivity dictates very fast approaches. This paper presents a type reconstruction algorithm for variables that is extremely fast (in the order of milliseconds) and reasonably precise (75 percent). The system is implemented as a byte-code evaluator in several Smalltalk environments, and its execution speed and precision are validated on a number of concrete case studies.", "paper_title": "Fast Type Reconstruction for Dynamically Typed Programming Languages", "paper_id": "WOS:000280884100008"}