{"auto_keywords": [{"score": 0.04367732323962223, "phrase": "embedded_environments"}, {"score": 0.03998275230530839, "phrase": "proposed_garbage_collector"}, {"score": 0.036229190503611196, "phrase": "young_generation"}, {"score": 0.00481495049065317, "phrase": "embedded_java_virtual_machine"}, {"score": 0.004669845451682529, "phrase": "java_virtual_machine"}, {"score": 0.004598933498016774, "phrase": "core_component"}, {"score": 0.004529093447865156, "phrase": "application_programmers"}, {"score": 0.0044150318724093226, "phrase": "memory_management"}, {"score": 0.003986684503518077, "phrase": "garbage_collector"}, {"score": 0.003711723285313348, "phrase": "generational_garbage_collection"}, {"score": 0.003581412258960711, "phrase": "young_and_old_generations"}, {"score": 0.0035269696779744266, "phrase": "semi-space_copying_collector"}, {"score": 0.0033685408148574846, "phrase": "incremental_copying_collector"}, {"score": 0.0032836104153151973, "phrase": "old_generation"}, {"score": 0.0031682817605340028, "phrase": "proposed_method"}, {"score": 0.0031360786664165093, "phrase": "fast_allocations"}, {"score": 0.0026359661683151006, "phrase": "delay_time"}, {"score": 0.0025958582759972315, "phrase": "garbage_collection"}, {"score": 0.0025174594088331853, "phrase": "real_time_constraints"}, {"score": 0.00240426758768164, "phrase": "barrier_mechanism"}, {"score": 0.00235560370536971, "phrase": "reachable_objects"}, {"score": 0.0023197517832705297, "phrase": "specific_frame"}], "paper_keywords": [""], "paper_abstract": "Garbage collection in the Java virtual machine is a core component that relieves application programmers of difficulties related to memory management. It should also take into account the characteristics of embedded environments. In this paper, we propose a garbage collector that meets the requirements for embedded environments. The proposed garbage collector is primarily based on generational garbage collection where a heap is composed of young and old generations. A semi-space copying collector is employed for a young generation, and an incremental copying collector is employed for an old generation. Owing to its contiguous allocations, the proposed method provides fast allocations and the locality of references. By adjusting the size of a young generation, the block size, and the number of blocks in a frame, it is able to control the delay time caused by garbage collection, and thus guarantee the real time constraints. Also, it employs a novel write barrier mechanism for efficiently determining reachable objects in a specific frame. With all these characteristics together, the proposed garbage collector can reclaim all the garbage objects precisely as well as timely. To reveal its superiority, we perform a series of experiments.", "paper_title": "Garbage collection in an embedded Java virtual machine", "paper_id": "WOS:000242122000054"}