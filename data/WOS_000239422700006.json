{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "randomized_algorithms"}, {"score": 0.0047707093928203, "phrase": "coq._randomized_algorithms"}, {"score": 0.004619027561771169, "phrase": "efficiently_approximated_solutions"}, {"score": 0.0045765783794477505, "phrase": "complex_problems"}, {"score": 0.004492841495994535, "phrase": "primality_testing"}, {"score": 0.004390312150344245, "phrase": "good_average_behavior"}, {"score": 0.004290112502811656, "phrase": "distributed_computing"}, {"score": 0.004153647187175639, "phrase": "subtle_reasoning"}, {"score": 0.004096493540086106, "phrase": "algorithmic_and_probabilistic_aspects"}, {"score": 0.003822263046602146, "phrase": "important_issue"}, {"score": 0.003734979290204709, "phrase": "new_method"}, {"score": 0.0035994372026264478, "phrase": "proof_assistant"}, {"score": 0.0035498822293046884, "phrase": "higher-order_logic"}, {"score": 0.0034368818187904744, "phrase": "monadic_interpretation"}, {"score": 0.0034052594710793664, "phrase": "randomized_programs"}, {"score": 0.0033739270918502285, "phrase": "probabilistic_distribution"}, {"score": 0.003177154457204775, "phrase": "operational_semantics"}, {"score": 0.0030476702431093687, "phrase": "complex_formalization"}, {"score": 0.0030196181347744372, "phrase": "measure_theory"}, {"score": 0.0029234476524900794, "phrase": "algebraic_properties"}, {"score": 0.00288317238346065, "phrase": "unit_interval"}, {"score": 0.00274017282519193, "phrase": "general_rules"}, {"score": 0.002652878591019016, "phrase": "randomized_algorithm"}, {"score": 0.0025212722607043546, "phrase": "general_recursive_functions"}, {"score": 0.0023741093119014436, "phrase": "bernoulli_distribution"}, {"score": 0.002341384304635523, "phrase": "coin_flip"}, {"score": 0.0022772782536385717, "phrase": "random_walk"}, {"score": 0.0021049977753042253, "phrase": "coq_proof_assistant"}], "paper_keywords": [""], "paper_abstract": "Randomized algorithms are widely used either for finding efficiently approximated solutions to complex problems, for instance primality testing, or for obtaining good average behavior, for instance in distributed computing. Proving properties of such algorithms requires subtle reasoning both on algorithmic and probabilistic aspects of the programs. Providing tools for the mechanization of reasoning is consequently an important issue. Our paper presents a new method for proving properties of randomized algorithms in a proof assistant based on higher-order logic. It is based on the monadic interpretation of randomized programs as probabilistic distribution [1]. It does not require the definition of an operational semantics for the language nor the development of a complex formalization of measure theory, but only use functionals and algebraic properties of the unit interval. Using this model, we show the validity of general rules for estimating the probability for a randomized algorithm to satisfy certain properties, in particular in the case of general recursive functions. We apply this theory for formally proving a program implementing a Bernoulli distribution from a coin flip and the termination of a random walk. All the theories and results presented in this paper have been fully formalized and proved in the COQ proof assistant [2].", "paper_title": "Proofs of randomized algorithms in CoQ", "paper_id": "WOS:000239422700006"}