{"auto_keywords": [{"score": 0.03869507098334237, "phrase": "type_system"}, {"score": 0.011682438549352293, "phrase": "well-typed_processes"}, {"score": 0.00481495049065317, "phrase": "copyless_message_passing."}, {"score": 0.004342430078306461, "phrase": "process_interaction"}, {"score": 0.004209893377338457, "phrase": "copy_less_message_passing"}, {"score": 0.003956784357357341, "phrase": "singularity_os."}, {"score": 0.0034236045013591437, "phrase": "memory_faults"}, {"score": 0.003353521531649663, "phrase": "memory_leaks"}, {"score": 0.0032510690712452147, "phrase": "communication_errors"}, {"score": 0.0021490449563443025, "phrase": "original_variant"}, {"score": 0.0021049977753042253, "phrase": "session_types"}], "paper_keywords": ["copyless message passing", " concurrency", " type theory", " subtyping", " session types"], "paper_abstract": "We present a calculus that models a form of process interaction based on copy less message passing, in the style of Singularity OS. The calculus is equipped with a type system ensuring that well-typed processes are free from memory faults, memory leaks, and communication errors. The type system is essentially linear, but we show that linearity alone is inadequate, because it leaves room for scenarios where well-typed processes leak significant amounts or memory. We address these problemis basing the type system upon an original variant of session types.", "paper_title": "TYPING COPYLESS MESSAGE PASSING", "paper_id": "WOS:000302505000017"}