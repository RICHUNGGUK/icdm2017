{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "stack_based_self-modifying_code"}, {"score": 0.0043560464825349275, "phrase": "reverse_engineering_attacks"}, {"score": 0.004283913685201902, "phrase": "software_obfuscation_techniques"}, {"score": 0.004040688646993605, "phrase": "reverse_engineering"}, {"score": 0.0039737570920809215, "phrase": "software_programs"}, {"score": 0.003092690568543981, "phrase": "code_area"}, {"score": 0.002941389980674657, "phrase": "data_area"}, {"score": 0.0028685304140180137, "phrase": "execution_time"}, {"score": 0.002530359917257626, "phrase": "experimental_results"}, {"score": 0.0023665766694993535, "phrase": "static_and_dynamic_attacks"}, {"score": 0.0022886952510350416, "phrase": "obfuscated_program"}, {"score": 0.002158505888557746, "phrase": "normal_binary_programs"}, {"score": 0.0021049977753042253, "phrase": "obfuscations_good_stealth_measure"}], "paper_keywords": ["Computer security", " software engineering", " software safety", " software security"], "paper_abstract": "Software code released to the user has the risk of reverse engineering attacks. Software obfuscation techniques can be employed to make the reverse engineering of software programs harder. In this paper, we propose a potent, stealthy, and cost-effective algorithm to obfuscate software programs. The main idea of the algorithm is to remove control flow information from the code area and hide them in the data area. During execution time, these instructions are reconstructed, thereby preserving the semantics of the program. Experimental results indicate that the algorithm performs well against static and dynamic attacks. Also the obfuscated program is hard to be differentiated from normal binary programs demonstrating the obfuscations good stealth measure.", "paper_title": "Potent and Stealthy Control Flow Obfuscation by Stack Based Self-Modifying Code", "paper_id": "WOS:000318598500008"}