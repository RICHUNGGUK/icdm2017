{"auto_keywords": [{"score": 0.04493572071439469, "phrase": "early_defect_detection_activities"}, {"score": 0.042619555492085175, "phrase": "testing_activities"}, {"score": 0.015719716506582538, "phrase": "software_testing_focus"}, {"score": 0.009524694865678618, "phrase": "confidence_counter"}, {"score": 0.004655576530003855, "phrase": "software_development"}, {"score": 0.004529093447865156, "phrase": "testing_effort"}, {"score": 0.004392565073466714, "phrase": "software_quality_assurance"}, {"score": 0.0041316803676012155, "phrase": "early_defect_data"}, {"score": 0.0039341294012600085, "phrase": "key_challenges"}, {"score": 0.003711723285313348, "phrase": "thorough_understanding"}, {"score": 0.0035887342563437935, "phrase": "aggravating_factor"}, {"score": 0.003417054482155433, "phrase": "concrete_environments"}, {"score": 0.0033651019362620866, "phrase": "underlying_goal"}, {"score": 0.0032635467579751423, "phrase": "better_understanding"}, {"score": 0.002886977102894829, "phrase": "different_quality_classes"}, {"score": 0.0027572166867780275, "phrase": "case-study-based_comparison"}, {"score": 0.0026986685585382347, "phrase": "aggregated_fmeasures"}, {"score": 0.0026576091519087065, "phrase": "industry_environments"}, {"score": 0.002453934333239467, "phrase": "inspection_results"}, {"score": 0.0024389277933858054, "phrase": "suitable_data"}, {"score": 0.0024018107447434022, "phrase": "evaluated_knowledge"}, {"score": 0.002315012841166354, "phrase": "integrated_inspection"}, {"score": 0.002258893331333988, "phrase": "product_data"}, {"score": 0.0021441057555396013, "phrase": "new_context"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Inspection", " Testing", " Integration", " F-measure", " Case study"], "paper_abstract": "Context: Quality assurance effort, especially testing effort, is frequently a major cost factor during software development. Consequently, one major goal is often to reduce testing effort. One promising way to improve the effectiveness and efficiency of software quality assurance is the use of data from early defect detection activities to provide a software testing focus. Studies indicate that using a combination of early defect data and other product data to focus testing activities outperforms the use of other product data only. One of the key challenges is that the use of data from early defect detection activities (such as inspections) to focus testing requires a thorough understanding of the relationships between these early defect detection activities and testing. An aggravating factor is that these relationships are highly context-specific and need to be evaluated for concrete environments. Objective: The underlying goal of this paper is to help companies get a better understanding of these relationships for their own environment, and to provide them with a methodology for finding relationships in their own environments. Method: This article compares three different strategies for evaluating assumed relationships between inspections and testing. We compare a confidence counter, different quality classes, and the F-measure including precision and recall. Results: One result of this case-study-based comparison is that evaluations based on the aggregated Fmeasures are more suitable for industry environments than evaluations based on a confidence counter. Moreover, they provide more detailed insights about the validity of the relationships. Conclusion: We have confirmed that inspection results are suitable data for controlling testing activities. Evaluated knowledge about relationships between inspections and testing can be used in the integrated inspection and testing approach In(2)Test to focus testing activities. Product data can be used in addition. However, the assumptions have to be evaluated in each new context. (C) 2014 Elsevier B.V. All rights reserved,", "paper_title": "Analyzing the relationships between inspections and testing to provide a software testing focus", "paper_id": "WOS:000336010100006"}