{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "qos"}, {"score": 0.0047480570903422345, "phrase": "soa"}, {"score": 0.004703878334423852, "phrase": "real-time_middleware"}, {"score": 0.004638462976078815, "phrase": "networked_embedded_systems"}, {"score": 0.004573953147933065, "phrase": "service-based_paradigm"}, {"score": 0.004468415400599571, "phrase": "software_design"}, {"score": 0.004108161406159407, "phrase": "service_graph"}, {"score": 0.004032118497047498, "phrase": "service_composition"}, {"score": 0.003812299519486331, "phrase": "service_interfaces"}, {"score": 0.003604421041893448, "phrase": "required_interface"}, {"score": 0.0034398445347109396, "phrase": "composition_criteria"}, {"score": 0.0033919477901198716, "phrase": "application_level_requirements"}, {"score": 0.0032522091171602557, "phrase": "interface_view"}, {"score": 0.0029343128039167185, "phrase": "application_level_qos_requirements"}, {"score": 0.002893434697072309, "phrase": "specific_selection"}, {"score": 0.0028664985822266344, "phrase": "particular_services"}, {"score": 0.002787181295054319, "phrase": "bi-dimensional_model"}, {"score": 0.0027483472371835865, "phrase": "qos_properties"}, {"score": 0.0026105159490849364, "phrase": "application_functionality"}, {"score": 0.0024336086025284836, "phrase": "practical_implementation"}, {"score": 0.0023996890513009743, "phrase": "qos_model"}, {"score": 0.0023662411481713704, "phrase": "iland_project"}, {"score": 0.002300734266971646, "phrase": "dynamic_reconfiguration"}, {"score": 0.0022793032191981404, "phrase": "real-time_service-based_applications"}, {"score": 0.0021347607855562102, "phrase": "proposed_qos_model"}, {"score": 0.0021049977753042253, "phrase": "specific_use_case"}], "paper_keywords": [""], "paper_abstract": "Architecting networked embedded systems following a service-based paradigm improves the flexibility in software design and development. Services can be connected and composed to provide more complex functionality in the form of a service graph or application. Service composition must be done according to two different goals. On the one hand, service interfaces must be compatible, i.e., the provided interface of a service must match the required interface of the connecting one. On the other hand, composition criteria must meet application level requirements or QoS constrains. This paper provides an interface view of services highlighting the way in which they expose their QoS requirements in their interfaces. Based on this, it is explored how application level QoS requirements influence the specific selection of particular services. The paper identifies a bi-dimensional model of the QoS properties of services that are related to (1) the application functionality and (2) the execution requirements or computational resources needed from the platform. The paper provides a practical implementation of this QoS model in the iLAND project. iLAND middleware supports the dynamic reconfiguration of real-time service-based applications that specify their QoS requirements in this way. The paper validates the proposed QoS model with a specific use case.", "paper_title": "A bi-dimensional QoS model for SOA and real-time middleware", "paper_id": "WOS:000331487300004"}