{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_structures"}, {"score": 0.004721711709176679, "phrase": "hp_finite_element_software"}, {"score": 0.004607686390487483, "phrase": "approximate_solutions"}, {"score": 0.004562847483469705, "phrase": "partial_differential_equations"}, {"score": 0.004409304640026443, "phrase": "finite_dimensional_function_space"}, {"score": 0.004345085569121329, "phrase": "hp_adaptive_finite_element_methods"}, {"score": 0.004240116703465252, "phrase": "discrete_spaces"}, {"score": 0.004178351419209898, "phrase": "different_polynomial_degrees"}, {"score": 0.0041174821422410544, "phrase": "shape_functions"}, {"score": 0.004037694641919865, "phrase": "locally_refined_mesh"}, {"score": 0.003959447096055027, "phrase": "basic_idea"}, {"score": 0.0038261310307416475, "phrase": "algorithms_and_data_structures"}, {"score": 0.0034187896011435245, "phrase": "special_combinations"}, {"score": 0.003385480888810982, "phrase": "finite_elements"}, {"score": 0.003319830633865628, "phrase": "discontinuous_galerkin_methods"}, {"score": 0.003192312493850036, "phrase": "generic_data_structures"}, {"score": 0.0030696773722514105, "phrase": "hp_methods"}, {"score": 0.0030397596289795143, "phrase": "arbitrary_elements"}, {"score": 0.002742648551009682, "phrase": "finite_element"}, {"score": 0.002663208600887875, "phrase": "generic_algorithms"}, {"score": 0.0025608471909800076, "phrase": "hp_context"}, {"score": 0.0024383967028975616, "phrase": "numerical_examples"}, {"score": 0.002321787726770895, "phrase": "hp-specific_parts"}, {"score": 0.002232519579957707, "phrase": "total_computing_time"}, {"score": 0.0021999341184897217, "phrase": "reference_implementation"}, {"score": 0.0021049977753042253, "phrase": "open_source_deal"}], "paper_keywords": ["Algorithms", " Design", " Object orientation", " data structures", " software design", " finite element software", " hp finite element methods"], "paper_abstract": "Finite element methods approximate solutions of partial differential equations by restricting the problem to a finite dimensional function space. In hp adaptive finite element methods, one defines these discrete spaces by choosing different polynomial degrees for the shape functions defined on a locally refined mesh. Although this basic idea is quite simple, its implementation in algorithms and data structures is challenging. It has apparently not been documented in the literature in its most general form. Rather, most existing implementations appear to be for special combinations of finite elements, or for discontinuous Galerkin methods. In this article, we discuss generic data structures and algorithms used in the implementation of hp methods for arbitrary elements, and the complications and pitfalls one encounters. As a consequence, we list the information a description of a finite element has to provide to the generic algorithms for it to be used in an hp context. We support our claim that our reference implementation is efficient using numerical examples in two dimensions and three dimensions, and demonstrate that the hp-specific parts of the program do not dominate the total computing time. This reference implementation is also made available as part of the Open Source deal. II finite element library.", "paper_title": "Data Structures and Requirements for hp Finite Element Software", "paper_id": "WOS:000264244100004"}