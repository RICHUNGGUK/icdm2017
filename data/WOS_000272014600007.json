{"auto_keywords": [{"score": 0.04789396098417503, "phrase": "parallel_environments"}, {"score": 0.03913799101431997, "phrase": "tascell"}, {"score": 0.00481495049065317, "phrase": "-based_load_balancing"}, {"score": 0.004770211811866158, "phrase": "high-productivity_languages"}, {"score": 0.004205226397573506, "phrase": "irregular_ones"}, {"score": 0.003939033374807842, "phrase": "\"logical\"_threads"}, {"score": 0.0038661089070527424, "phrase": "oldest-first_work_stealing_strategy"}, {"score": 0.0037592362369401546, "phrase": "\"logical_thread\"-free_framework"}, {"score": 0.0036382660173943393, "phrase": "higher_performance"}, {"score": 0.003570889780957037, "phrase": "wider_range"}, {"score": 0.0033919477901198716, "phrase": "tascell_worker"}, {"score": 0.0033447157263095223, "phrase": "\"real\"_task"}, {"score": 0.0032522091171602557, "phrase": "idle_worker"}, {"score": 0.0029206231857112305, "phrase": "logical_threads"}, {"score": 0.0025862068041567934, "phrase": "concurrently_runnable_logical_thread"}, {"score": 0.002514625755809045, "phrase": "elegant_and_highly-efficient_backtrack_search_algorithms"}, {"score": 0.0022058510091498666, "phrase": "single_program"}, {"score": 0.0021247934141234988, "phrase": "memory_environments"}, {"score": 0.0021049977753042253, "phrase": "reasonable_efficiency"}], "paper_keywords": ["Design", " Languages", " Performance", " load balancing", " parallel computing", " backtracking", " backtrack search"], "paper_abstract": "High-productivity languages for parallel computing become more important as parallel environments including multicores become more common. Cilk is such a language. It provides good load balancing for many applications including irregular ones; that is, it keeps all workers busy by creating plenty of \"logical\" threads and adopting the oldest-first work stealing strategy. This paper proposes a \"logical thread\"-free framework called Tascell, which achieves a higher performance and supports a wider range of parallel environments including clusters without loss of productivity. A Tascell worker spawns a \"real\" task only when requested by another idle worker. The worker performs the spawning by temporarily \"backtracking\" and restoring its oldest task-spawnable state. Our approach eliminates the cost of spawning/managing logical threads. It also promotes the reuse of workspaces and improves the locality of reference since it does not need to prepare a workspace for each concurrently runnable logical thread. Furthermore, Tascell enables elegant and highly-efficient backtrack search algorithms with delayed workspace copying. For instance, our 16-queens problem solver is 1.86 times faster than Cilk on a system with two dual-core processors. Our approach also enables a single program to run in both shared and distributed memory environments with reasonable efficiency and scalability.", "paper_title": "Backtracking-based Load Balancing", "paper_id": "WOS:000272014600007"}