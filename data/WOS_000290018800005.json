{"auto_keywords": [{"score": 0.049814160273841765, "phrase": "uppaal"}, {"score": 0.00481495049065317, "phrase": "model_checker"}, {"score": 0.004530023871441992, "phrase": "zeroconf"}, {"score": 0.004406121974246201, "phrase": "dynamic_configuration"}, {"score": 0.004122353948221617, "phrase": "ietf."}, {"score": 0.003509487090932835, "phrase": "informal_text"}, {"score": 0.003283272764794988, "phrase": "corresponding_piece"}, {"score": 0.0029709144755382787, "phrase": "formal_verification"}, {"score": 0.0026000466400112974, "phrase": "mutual_exclusion_property"}, {"score": 0.00251478366610296, "phrase": "arbitrary_number"}, {"score": 0.0024594969044952108, "phrase": "ip_addresses"}, {"score": 0.0022253345930383257, "phrase": "new_abstraction_relation"}, {"score": 0.002140400526572388, "phrase": "committed_locations"}, {"score": 0.0021049977753042253, "phrase": "model_checking_problem"}], "paper_keywords": ["Algorithms", " Standardization", " Verification", " Compositional reasoning", " compositional abstraction", " modelling", " industrial case study", " simulation relation", " timed automata", " uppaal", " zeroconf protocol"], "paper_abstract": "The model checker Uppaal is used to formally model and analyze parts of Zeroconf, a protocol for dynamic configuration of IPv4 link-local addresses that has been defined in RFC 3927 of the IETF. Our goal has been to construct a model that (a) is easy to understand by engineers, (b) comes as close as possible to the informal text (for each transition in the model there should be a corresponding piece of text in the RFC), and (c) may serve as a basis for formal verification. Our modeling efforts revealed several errors (or at least ambiguities) in the RFC that no one else spotted before. We present two proofs of the mutual exclusion property for Zeroconf (for an arbitrary number of hosts and IP addresses): a manual, operational proof, and a proof that combines model checking with the application of a new abstraction relation that is compositional with respect to committed locations. The model checking problem has been solved using Uppaal and the abstractions have been checked by hand.", "paper_title": "Formal Specification and Analysis of Zeroconf Using Uppaal", "paper_id": "WOS:000290018800005"}