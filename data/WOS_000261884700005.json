{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java_dynamic_tree"}, {"score": 0.004690025569165577, "phrase": "suite_of_medical_applications"}, {"score": 0.004301834610818624, "phrase": "whole_suite"}, {"score": 0.004269630481719451, "phrase": "medical_applications"}, {"score": 0.004158794879468156, "phrase": "snomed._methods"}, {"score": 0.003578255090799811, "phrase": "patient_interview"}, {"score": 0.003382017342396959, "phrase": "large_set"}, {"score": 0.003356675879109443, "phrase": "chief_complaints"}, {"score": 0.0032817813775647756, "phrase": "physical_examination"}, {"score": 0.003021141590548526, "phrase": "commercial_dbms"}, {"score": 0.0029648446274266765, "phrase": "multi-encounter_patient_data"}, {"score": 0.0027916474315624537, "phrase": "dbms"}, {"score": 0.002719055901632759, "phrase": "large_terminology_files"}, {"score": 0.0026483647033436674, "phrase": "health_care_provider"}, {"score": 0.0026087958216676676, "phrase": "entire_terminology"}, {"score": 0.002437907960209364, "phrase": "progress_notes"}, {"score": 0.002365587018070219, "phrase": "single_hierarchical_structure"}, {"score": 0.0021693692831601745, "phrase": "major_help"}, {"score": 0.0021049977753042253, "phrase": "snomed-ct."}], "paper_keywords": ["SNOMED", " terminology control", " database management systems", " data display"], "paper_abstract": "Objectives: Now that the National Library of Medicine has made SNOMED-CT widely available, we a le trying to manage the terminology of a whole suite of medical applications and map our terminology into that in SNOMED. Methods: This paper describes the design and implementation of the Java Dynamic Tree that provides structure to our medical terminology and explains how it functions as the core of our system. Results: The tree was designed to reflect the stages in a patient interview, so it contains components for identifying the patient and the provider, a large set of chief complaints, review of systems, physical examination, several history modules, medications, laboratory tests imaging, and special procedures. The tree is mirrored in a commercial DBMS, which also states multi-encounter patient data, disorder patterns for our Bayesian diagnostic system, and the data and rules for other expert systems. The DBMS facilitates the import and export of large terminology files. Conclusions: Out Java Dynamic Tree allows the health care provider to view the entire terminology along with the structure that supports it, as well as the mechanism for the generation of progress notes and other documents, in terms of a single hierarchical structure. Changes in terminology con be propagated through the system under the control of the expert. The import/export facility has been a major help by replacing our original terminology by the terminology in SNOMED-CT.", "paper_title": "Using a Java Dynamic Tree to Manage the Terminology in a Suite of Medical Applications", "paper_id": "WOS:000261884700005"}