{"auto_keywords": [{"score": 0.0464485993141056, "phrase": "computational_kernels"}, {"score": 0.025307200182037703, "phrase": "eda_domain"}, {"score": 0.004815316573636744, "phrase": "gpu"}, {"score": 0.004767826806287385, "phrase": "acceleration_of_system"}, {"score": 0.004752221133109136, "phrase": "-level_design_tasks"}, {"score": 0.004365623248150127, "phrase": "np"}, {"score": 0.004209202947762995, "phrase": "high_running_times"}, {"score": 0.004167982855788402, "phrase": "mid-sized_problems"}, {"score": 0.004020252310319777, "phrase": "commodity_graphics_processing_units"}, {"score": 0.003865033938931324, "phrase": "electronic_design_automation"}, {"score": 0.0038397743437392244, "phrase": "eda"}, {"score": 0.003584025547693836, "phrase": "standard_schedulability_analysis_problems"}, {"score": 0.0035141291835319682, "phrase": "gpu-based_engine"}, {"score": 0.003356275163203055, "phrase": "embedded_systems_domain"}, {"score": 0.003247868216333148, "phrase": "combinatorial_optimization_problem-viz"}, {"score": 0.0032054891061528896, "phrase": "knapsack_problem"}, {"score": 0.0031019373572233706, "phrase": "experimental_results"}, {"score": 0.0028762499230524812, "phrase": "full_problem"}, {"score": 0.002765077844399801, "phrase": "even_low-end"}, {"score": 0.0027560092576928595, "phrase": "desktop_and_notebook_computers"}, {"score": 0.00266693888510356, "phrase": "extra_hardware_cost"}, {"score": 0.002640781900605126, "phrase": "recent_research"}, {"score": 0.002538687900036229, "phrase": "non-graphics_applications"}, {"score": 0.0022406537579986842, "phrase": "core_problem"}, {"score": 0.0021049977753042253, "phrase": "wider_variety"}], "paper_keywords": ["GPGPU", " Timing analysis", " Design space exploration", " Electronic design automation"], "paper_abstract": "Many system-level design tasks (e.g., high-level timing analysis, hardware/software partitioning and design space exploration) involve computational kernels that are intractable (usually NP-hard). As a result, they involve high running times even for mid-sized problems. In this paper we explore the possibility of using commodity graphics processing units (GPUs) to accelerate such tasks that commonly arise in the electronic design automation (EDA) domain. We demonstrate this idea via two detailed case studies. The first explores the possibility of using GPUs to speedup standard schedulability analysis problems. The second proposes a GPU-based engine for a general hardware/software design space exploration problem. Not only do these problems commonly arise in the embedded systems domain, their computational kernels turn out to be variants of a combinatorial optimization problem-viz., the knapsack problem-that lies at the heart of several EDA applications. Experimental results show that our GPU-based implementations offer very attractive speedups for the computational kernels (up to 100x), and speedups of up to 17x for the full problem. In contrast to ASIC/FPGA-based accelerators-given that even low-end desktop and notebook computers are now equipped with GPUs-our solution involves no extra hardware cost. Although recent research has shown the benefits of using GPUs for a variety of non-graphics applications (e.g., in databases and bioinformatics), harnessing the parallelism of GPUs to accelerate problems from the EDA domain has not been sufficiently explored so far. We believe that our results and the generality of the core problem that we address will motivate researchers from this community to explore the possibility of using GPUs for a wider variety of problems from the EDA domain.", "paper_title": "GPU-based Acceleration of System-level Design Tasks", "paper_id": "WOS:000277428300004"}