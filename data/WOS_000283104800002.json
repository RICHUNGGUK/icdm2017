{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "complexity_gap"}, {"score": 0.004757227624616643, "phrase": "fcfs_mutual_exclusion"}, {"score": 0.004700193486903964, "phrase": "mutual_exclusion"}, {"score": 0.004216566615939546, "phrase": "shared_resource"}, {"score": 0.004042166795461166, "phrase": "in.a_fair_order"}, {"score": 0.0038284549148537373, "phrase": "complexity_gap_between_fcfs_me_and_me_in_the_asynchronous_shared_memory_model"}, {"score": 0.0034135407979996673, "phrase": "first_known_fcfs_me_algorithm"}, {"score": 0.002713579450415928, "phrase": "theta"}, {"score": 0.002508365161206412, "phrase": "point_contention"}, {"score": 0.002448446849997207, "phrase": "known_rmr_complexity_lower_bounds"}, {"score": 0.002222717552124615, "phrase": "rmr_complexity"}, {"score": 0.0021960024679620886, "phrase": "prior_algorithms"}, {"score": 0.0021049977753042253, "phrase": "fcfs_property"}], "paper_keywords": [""], "paper_abstract": "First-Come-First-Served (FCFS) mutual exclusion (ME) is the problem of ensuring that processes attempting to concurrently access a shared resource do so one by one, in.a fair order. In this paper, we close the complexity gap between FCFS ME and ME in the asynchronous shared memory model where processes communicate using atomic reads and writes only, and do not fail. Our main result is the first known FCFS ME algorithm that makes O (log N) remote memory references (RMRs) per passage and uses only atomic reads and writes. Our algorithm is also adaptive to point contention. More precisely, the number of RMRs a process makes per passage in our algorithm is Theta (min(k, log N)), where k is the point contention. Our algorithm matches known RMR complexity lower bounds for the class of ME algorithms that use reads and writes only, and beats the RMR complexity of prior algorithms in this class that have the FCFS property.", "paper_title": "Closing the complexity gap between FCFS mutual exclusion and mutual exclusion", "paper_id": "WOS:000283104800002"}