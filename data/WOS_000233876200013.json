{"auto_keywords": [{"score": 0.029322338265635402, "phrase": "algorithmic_models"}, {"score": 0.00481495049065317, "phrase": "software_effort_estimation"}, {"score": 0.004765788394931875, "phrase": "accurate_software_estimation"}, {"score": 0.004692980391580608, "phrase": "cost_estimation"}, {"score": 0.004645057834614705, "phrase": "quality_estimation"}, {"score": 0.004597622380240611, "phrase": "risk_analysis"}, {"score": 0.004527371799277529, "phrase": "major_issue"}, {"score": 0.004481132747216135, "phrase": "software_project_management"}, {"score": 0.004278807087784626, "phrase": "soft_computing_framework"}, {"score": 0.004191829338769843, "phrase": "challenging_problem"}, {"score": 0.004064653055162238, "phrase": "preprocessing_neurofuzzy_inference_system"}, {"score": 0.003782655283668953, "phrase": "contributing_factors"}, {"score": 0.0036303546926971966, "phrase": "neuro-fuzzy_bank"}, {"score": 0.003292685392413911, "phrase": "appropriate_algorithmic_model"}, {"score": 0.003160049822855747, "phrase": "default_algorithmic_model"}, {"score": 0.003048370487544551, "phrase": "better_model"}, {"score": 0.0026806884201358515, "phrase": "estimation_problems"}, {"score": 0.0026261108615242557, "phrase": "neural_networks"}, {"score": 0.0025992391074270097, "phrase": "fuzzy_logic"}, {"score": 0.002393907896783117, "phrase": "expert_knowledge"}, {"score": 0.0023694065215394593, "phrase": "project_data"}, {"score": 0.0023451553255837317, "phrase": "good_interpretability"}, {"score": 0.0022856052476424344, "phrase": "imprecise_and_uncertain_inputs"}, {"score": 0.0022390533383717715, "phrase": "industry_project_data"}, {"score": 0.0021049977753042253, "phrase": "software_cost"}], "paper_keywords": [""], "paper_abstract": "Accurate software estimation such as cost estimation, quality estimation and risk analysis is a major issue in software project management. In this paper, we present a soft computing framework to tackle this challenging problem. We first use a preprocessing neurofuzzy inference system to handle the dependencies among contributing factors and decouple the effects of the contributing factors into individuals. Then we use a neuro-fuzzy bank to calibrate the parameters of contributing factors. In order to extend our framework into fields that lack of an appropriate algorithmic model of their own, we propose a default algorithmic model that can be replaced when a better model is available. One feature of this framework is that the architecture is inherently independent of the choice of algorithmic models or the nature of the estimation problems. By integrating neural networks, fuzzy logic and algorithmic models into one scheme, this framework has learning ability, integration capability of both expert knowledge and project data, good interpretability, and robustness to imprecise and uncertain inputs. Validation using industry project data shows that the framework produces good results when used to predict software cost.", "paper_title": "A soft computing framework for software effort estimation", "paper_id": "WOS:000233876200013"}