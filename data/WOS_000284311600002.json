{"auto_keywords": [{"score": 0.0464374488056209, "phrase": "search_space"}, {"score": 0.00481495049065317, "phrase": "modern_variable"}, {"score": 0.004592214823540993, "phrase": "key_factor"}, {"score": 0.004402854153653114, "phrase": "constraint_solving"}, {"score": 0.0040047396607954325, "phrase": "numerous_heuristics"}, {"score": 0.003529149828147388, "phrase": "constraint_weights"}, {"score": 0.003383475802364289, "phrase": "variable_assignments"}, {"score": 0.002997203022420553, "phrase": "wide_range"}, {"score": 0.002640947693258573, "phrase": "new_revision"}, {"score": 0.0025722202862084186, "phrase": "recorded_failures"}, {"score": 0.0025052769325080255, "phrase": "propagation_list"}, {"score": 0.0024789887640568093, "phrase": "arc_consistency"}, {"score": 0.0022904032758108775, "phrase": "constraint_checks"}, {"score": 0.002266364679369248, "phrase": "list_operations"}, {"score": 0.0021049977753042253, "phrase": "explored_search_tree"}], "paper_keywords": ["Constraint Satisfaction", " Search heuristics", " Variable ordering", " Revision ordering"], "paper_abstract": "A key factor that can dramatically reduce the search space during constraint solving is the criterion under which the variable to be instantiated next is selected. For this purpose numerous heuristics have been proposed. Some of the best of such heuristics exploit information about failures gathered throughout search and recorded in the form of constraint weights, while others measure the importance of variable assignments in reducing the search space. In this work we experimentally evaluate the most recent and powerful variable ordering heuristics, and new variants of them, over a wide range of benchmarks. Results demonstrate that heuristics based on failures are in general more efficient. Based on this, we then derive new revision ordering heuristics that exploit recorded failures to efficiently order the propagation list when arc consistency is maintained during search. Interestingly, in addition to reducing the number of constraint checks and list operations, these heuristics are also able to cut down the size of the explored search tree.", "paper_title": "Evaluating and Improving Modern Variable and Revision Ordering Strategies in CSPs", "paper_id": "WOS:000284311600002"}