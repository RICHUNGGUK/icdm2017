{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "equivalence_modulo_inputs"}, {"score": 0.041193980626642264, "phrase": "test_inputs"}, {"score": 0.004361428012479218, "phrase": "optimizing_compilers"}, {"score": 0.004187284711626886, "phrase": "close_interplay"}, {"score": 0.0036411406244705557, "phrase": "possible_inputs"}, {"score": 0.0034753508746887957, "phrase": "natural_collection"}, {"score": 0.003415137969569376, "phrase": "original_program's_emi_variants"}, {"score": 0.0031660031870090434, "phrase": "difficult-to-find_miscompilations"}, {"score": 0.0030750809317435304, "phrase": "practical_implementation"}, {"score": 0.0029867619862229853, "phrase": "c_compilers"}, {"score": 0.0029009722548088306, "phrase": "program's_test_executions"}, {"score": 0.0026736239243583654, "phrase": "gcc"}, {"score": 0.0026426194709408225, "phrase": "llvm"}, {"score": 0.002244494905883452, "phrase": "program_transformation"}, {"score": 0.0022184630090454132, "phrase": "analysis_systems"}], "paper_keywords": ["Algorithms", " Languages", " Reliability", " Verification", " Compiler testing", " miscompilation", " equivalent program variants", " automated testing"], "paper_abstract": "We introduce equivalence modulo inputs (EMI), a simple, widely applicable methodology for validating optimizing compilers. Our key insight is to exploit the close interplay between (1) dynamically executing a program on some test inputs and (2) statically compiling the program to work on all possible inputs. Indeed, the test inputs induce a natural collection of the original program's EMI variants, which can help differentially test any compiler and specifically target the difficult-to-find miscompilations. To create a practical implementation of EMI for validating C compilers, we profile a program's test executions and stochastically prune its unexecuted code. Our extensive testing in eleven months has led to 147 confirmed, unique bug reports for GCC and LLVM alone. The majority of those bugs are miscompilations, and more than 100 have already been fixed. Beyond testing compilers, EMI can be adapted to validate program transformation and analysis systems in general. This work opens up this exciting, new direction.", "paper_title": "Compiler Validation via Equivalence Modulo Inputs", "paper_id": "WOS:000344455800025"}