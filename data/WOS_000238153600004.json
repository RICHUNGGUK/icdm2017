{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "all-substrings_longest_common_subsequence_problem"}, {"score": 0.003957078581524691, "phrase": "substring_b"}, {"score": 0.0037507793596022326, "phrase": "longest_string"}, {"score": 0.0034715658596258018, "phrase": "sequential_algorithm"}, {"score": 0.003118838635447237, "phrase": "parallel_algorithm"}, {"score": 0.003063627258654102, "phrase": "alcs_problem"}, {"score": 0.002593091742792519, "phrase": "proposed_algorithm"}, {"score": 0.0021049977753042253, "phrase": "lcs_and_alcs_problems"}], "paper_keywords": ["parallel algorithm", " longest common subsequence", " BSP", " CGM", " LCS", " all-substrings LCS"], "paper_abstract": "Given two strings A and B of lengths n(a) and n(b), respectively, the All-substrings Longest Common Subsequence (ALCS) problem obtains, for any substring B' of B, the length of the longest string that is a subsequence of both A and B'. The sequential algorithm for this problem takes O(n(a)n(b)) time and O(n(b)) space. We present a parallel algorithm for the ALCS problem on the Coarse-Grained Multicomputer (BSP/CGM) model with p < root n(a) processors, that takes O(n(a)n(b)/p) time, O(log p) communication rounds and O(n(b)root n(a)) space per processor. The proposed algorithm also solves the basic Longest Common Subsequence (LCS) problem that finds the longest string ( and not only its length) that is a subsequence of both A and B. To our knowledge, this is the best BSP/CGM algorithm in the literature for the LCS and ALCS problems.", "paper_title": "A coarse-grained parallel algorithm for the all-substrings longest common subsequence problem", "paper_id": "WOS:000238153600004"}