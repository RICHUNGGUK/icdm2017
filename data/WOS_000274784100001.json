{"auto_keywords": [{"score": 0.037792988336144924, "phrase": "fast_address_generator"}, {"score": 0.035918182345546376, "phrase": "effective_address_computations"}, {"score": 0.004743164872278112, "phrase": "cache_accesses"}, {"score": 0.004672444473700524, "phrase": "effective_address_calculations"}, {"score": 0.004334285093946002, "phrase": "alu"}, {"score": 0.004174451361776433, "phrase": "extra_latencies"}, {"score": 0.004020492138367616, "phrase": "data_cache_accesses"}, {"score": 0.00396050388346298, "phrase": "fast_address_generation"}, {"score": 0.003757480190200645, "phrase": "cache_access_latencies"}, {"score": 0.0033315236647127734, "phrase": "computed_effective_addresses"}, {"score": 0.0032085525502105836, "phrase": "dummy_register_file"}, {"score": 0.0031606404966938568, "phrase": "experimental_results"}, {"score": 0.0029095936591723645, "phrase": "store_instructions"}, {"score": 0.0026986685585382347, "phrase": "execution_times"}, {"score": 0.002560162916190598, "phrase": "multiple_dummy_register_files"}, {"score": 0.00223570488212345, "phrase": "average_execution_times"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cache latencies", " Fast address generation", " Hit time reduction"], "paper_abstract": "Effective address calculations for load and store instructions need to compete for ALU with other instructions and hence extra latencies might be incurred to data cache accesses. Fast address generation is an approach proposed to reduce cache access latencies. This paper presents a fast address generator that can eliminate most of the effective address computations by storing computed effective addresses of previous load/store instructions in a dummy register file. Experimental results show that this fast address generator can reduce effective address computations of load and store instructions by about 74% on average for SPECint2000 benchmarks and cut the execution times by 8.5%. Furthermore, when multiple dummy register files are deployed, this fast address generator eliminates over 90% of effective address computations of load and store instructions and improves the average execution times by 9.3%. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "On reducing load/store latencies of cache accesses", "paper_id": "WOS:000274784100001"}