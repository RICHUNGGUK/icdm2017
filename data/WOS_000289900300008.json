{"auto_keywords": [{"score": 0.049407782669650464, "phrase": "property_falsification"}, {"score": 0.03714860508296158, "phrase": "overall_test_generation_time"}, {"score": 0.00481495049065317, "phrase": "property_learning_techniques_for_efficient_generation_of_directed_tests"}, {"score": 0.004680851157467745, "phrase": "model_checking"}, {"score": 0.004518442937844318, "phrase": "automated_generation"}, {"score": 0.004455061431809975, "phrase": "directed_tests"}, {"score": 0.004330941610682453, "phrase": "state_space_explosion_problem"}, {"score": 0.004270178957872099, "phrase": "traditional_model_checking_techniques"}, {"score": 0.004151188559520802, "phrase": "large_scale_designs"}, {"score": 0.004092937456065441, "phrase": "sat-based_bounded_model_checking"}, {"score": 0.003923023699005215, "phrase": "prohibitively_large_time"}, {"score": 0.0038679618585498597, "phrase": "resource_requirements"}, {"score": 0.0034543031591181546, "phrase": "single_property"}, {"score": 0.003287482882222731, "phrase": "similar_properties"}, {"score": 0.00310664242361199, "phrase": "variable_assignments"}, {"score": 0.0030630037175103032, "phrase": "common_conflict_clauses"}, {"score": 0.002998688867384969, "phrase": "prechecked_partial_or_similar_sat_instances"}, {"score": 0.002735194789581153, "phrase": "decision_ordering-based_learnings"}, {"score": 0.002677744558540711, "phrase": "single_sat_instance"}, {"score": 0.0024947959375982614, "phrase": "similar_sat_instances"}, {"score": 0.00232431758517087, "phrase": "decision_ordering-based_learning"}, {"score": 0.00229164285862567, "phrase": "conflict_clauses-based_learning"}, {"score": 0.0021501863832966966, "phrase": "hardware_benchmarks"}], "paper_keywords": ["Bounded model checking", " directed test generation", " conflict clause forwarding", " decision ordering"], "paper_abstract": "Property falsification in model checking is widely used for automated generation of directed tests. Due to state space explosion problem, traditional model checking techniques cannot handle large scale designs. SAT-based bounded model checking is promising to address the prohibitively large time and resource requirements during the property falsification. This article presents several efficient learning techniques that can improve the overall test generation time for a single property as well as a cluster of similar properties. The goal is to exploit both variable assignments and common conflict clauses of the prechecked partial or similar SAT instances for property falsification. Our method makes three novel contributions: 1) investigates the decision ordering-based learnings for a single SAT instance; 2) applies the decision ordering learnings between similar SAT instances; and 3) exploits the relation between the decision ordering-based learning and conflict clauses-based learning. Our experimental results using both software and hardware benchmarks demonstrate that our approach can drastically reduce the overall test generation time.", "paper_title": "Property Learning Techniques for Efficient Generation of Directed Tests", "paper_id": "WOS:000289900300008"}