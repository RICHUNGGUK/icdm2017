{"auto_keywords": [{"score": 0.024157270607651535, "phrase": "gpu"}, {"score": 0.012826517832628581, "phrase": "usa"}, {"score": 0.004472146692254812, "phrase": "computational_capabilities"}, {"score": 0.004431041346291019, "phrase": "graphics_processing_units"}, {"score": 0.004309968592440261, "phrase": "cuda_environment"}, {"score": 0.004192190072470619, "phrase": "laplacian_pde."}, {"score": 0.0038756055612167942, "phrase": "performance_reference"}, {"score": 0.003752275718257509, "phrase": "optimization_methods"}, {"score": 0.0036496814103475174, "phrase": "significant_speedup"}, {"score": 0.003616108223034427, "phrase": "memory_access_patterns"}, {"score": 0.0035335154419206634, "phrase": "critical_factor"}, {"score": 0.0035010071030752883, "phrase": "efficient_program_execution"}, {"score": 0.003312121699003206, "phrase": "data_reorganization"}, {"score": 0.0032514447965530354, "phrase": "highest_feasible_memory_throughput"}, {"score": 0.003177154457204775, "phrase": "performance_benefits"}, {"score": 0.0031333949463567554, "phrase": "cpu_version"}, {"score": 0.0030196181347744372, "phrase": "direct_comparison"}, {"score": 0.002991823455621222, "phrase": "optimal_versions'_performance"}, {"score": 0.0028566300478906916, "phrase": "cuda_version"}, {"score": 0.0025802660239538353, "phrase": "single_threaded_cpu_version"}, {"score": 0.0024409345168575833, "phrase": "global_memory_cache"}, {"score": 0.002407290605654707, "phrase": "recent_gpu_architectures"}, {"score": 0.0023741093119014436, "phrase": "high_performance"}, {"score": 0.0023091093387071593, "phrase": "special_memory_types"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["GPU computing", " CUDA", " red", " black SOR", " PDEs"], "paper_abstract": "This work presents our strategy, applied optimizations and results in our effort to exploit the computational capabilities of graphics processing units (GPUs) under the CUDA environment in order to solve the Laplacian PDE. The parallelizable red/black successive over-relaxation (SOR) method was used. Additionally, a program for the CPU was developed as a performance reference. Various performance improvements were achieved by using optimization methods, which proved to provide significant speedup. Memory access patterns prove to be a critical factor in efficient program execution on GPUs and it is, therefore, appropriate to follow data reorganization to achieve the highest feasible memory throughput. The same approach exhibits performance benefits on the CPU version, as well. Eventually, a direct comparison of optimal versions' performance was realized. A 10xspeedup was measured for the CUDA version on an NVidia GTX480 GPU (NVidia Corp, Sta. Clara, CA, USA), exceeding 142GB/s bandwidth, over the single threaded CPU version when run on an Intel Core i7 2600K CPU. The results prove that the global memory cache added on recent GPU architectures assist achieving high performance without requiring to employ the special memory types provided by the GPU (i.e. shared, texture or constant memory). Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Graphics processing unit acceleration of the red/black SOR method", "paper_id": "WOS:000318042500008"}