{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "feature_location_problem"}, {"score": 0.004694092086199672, "phrase": "component_modification_impact"}, {"score": 0.004576253356889219, "phrase": "large_software_system"}, {"score": 0.004489810932879285, "phrase": "inherently_difficult_task"}, {"score": 0.004321772629297024, "phrase": "comprehending_system"}, {"score": 0.004159997145421619, "phrase": "actual_maintenance_task"}, {"score": 0.004055511503825102, "phrase": "feature_location_techniques"}, {"score": 0.003903663808332582, "phrase": "source_code_components"}, {"score": 0.00385431710959668, "phrase": "specific_software_features"}, {"score": 0.0034154440860550564, "phrase": "domain_experts"}, {"score": 0.0033295966773779174, "phrase": "feature_location_process"}, {"score": 0.0031242709509664837, "phrase": "novel_hybrid_feature_location_approach"}, {"score": 0.0030651710672229926, "phrase": "static_and_dynamic_analysis_techniques"}, {"score": 0.0029502941554043964, "phrase": "component_dependency_graph"}, {"score": 0.0025160740422447837, "phrase": "component_modi"}, {"score": 0.0024372021710656585, "phrase": "remaining_parts"}, {"score": 0.0022292394795878643, "phrase": "extensive_knowledge"}, {"score": 0.0021456243019466843, "phrase": "case_study"}], "paper_keywords": [""], "paper_abstract": "Maintaining a large software system is an inherently difficult task that often involves locating and comprehending system features prior to performing the actual maintenance task at hand. Feature location techniques were introduced to locate the source code components implementing specific software features. Common to these approaches is that they rely either on exercising several features of a system, and/or domain experts to guide the feature location process. In this study, the authors present a novel hybrid feature location approach that combines static and dynamic analysis techniques. Our approach uses a component dependency graph of the system to provide a ranking of the components according to their feature relevance. The ranking itself is based on the impact of a component modi. cation on the remaining parts of a system. Our approach can almost be completely automated without requiring an extensive knowledge of the system. A case study performed on two open source projects is presented to evaluate the applicability and effectiveness of our approach.", "paper_title": "Approach for solving the feature location problem by measuring the component modification impact", "paper_id": "WOS:000268400500004"}