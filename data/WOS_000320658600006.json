{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multifragment_effects"}, {"score": 0.012796720803819168, "phrase": "existing_methods"}, {"score": 0.012507072717847217, "phrase": "large_models"}, {"score": 0.011947961899786827, "phrase": "gpu"}, {"score": 0.0047051051659828275, "phrase": "graphics_processing_units"}, {"score": 0.004555499634179394, "phrase": "high_speed"}, {"score": 0.004153647187175639, "phrase": "gpu's_memory"}, {"score": 0.00398452530840582, "phrase": "whole_scene_geometry"}, {"score": 0.0037177622939493084, "phrase": "data_transmission"}, {"score": 0.0034368818187904744, "phrase": "stream_method"}, {"score": 0.0034052594710793664, "phrase": "accurate_rendering"}, {"score": 0.003177154457204775, "phrase": "efficient_manner"}, {"score": 0.002817296806751052, "phrase": "gpu."}, {"score": 0.0027275289970185015, "phrase": "model_data_part"}, {"score": 0.002407290605654707, "phrase": "processed_parts"}], "paper_keywords": ["Multifragment effects", " depth ordering", " fixed amount of memory", " large models", " accurate rendering"], "paper_abstract": "Rendering multifragment effects using graphics processing units (GPUs) is attractive for high speed. However, the efficiency is seriously compromised, because ordering fragments on GPUs is not easy and the GPU's memory may not be large enough to store the whole scene geometry. Hitherto, existing methods have been unsuitable for large models or have required many passes for data transmission from CPU to GPU, resulting in a bottleneck for speedup. This paper presents a stream method for accurate rendering of multifragment effects. It decomposes the model into parts and manages these in an efficient manner, guaranteeing that the parts can easily be ordered with respect to any viewpoint, and that each part can be rendered correctly on the GPU. Thus, we can transmit the model data part by part, and once a part has been loaded onto the GPU, we immediately render it and composite its result with the results of the processed parts. In this way, we need only a single pass for data access with a very low bounded memory requirement. Moreover, we treat parts in packs for further acceleration. Results show that our method is much faster than existing methods and can easily handle large models of any size.", "paper_title": "Memory-Efficient Single-Pass GPU Rendering of Multifragment Effects", "paper_id": "WOS:000320658600006"}