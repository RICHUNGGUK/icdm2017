{"auto_keywords": [{"score": 0.044139596559609286, "phrase": "sigma"}, {"score": 0.008753360845007002, "phrase": "vertical_bar"}, {"score": 0.00481495049065317, "phrase": "longest_increasing_subsequence"}, {"score": 0.004527619017250708, "phrase": "data-streaming_model"}, {"score": 0.0040385352882334235, "phrase": "one-pass_algorithm"}, {"score": 0.0038309141193444015, "phrase": "update_time"}, {"score": 0.0036660436272785476, "phrase": "sigma_vertical_bar"}, {"score": 0.003284145698220425, "phrase": "lower_bound"}, {"score": 0.003198554193075258, "phrase": "space_requirement"}, {"score": 0.0031289290660162145, "phrase": "general_alphabets"}, {"score": 0.00304737045343781, "phrase": "input_stream"}, {"score": 0.0029161225023394363, "phrase": "actual_lis"}, {"score": 0.002670304898016693, "phrase": "lcs"}, {"score": 0.0024776677004255104, "phrase": "general_alphabets_sigma"}, {"score": 0.002339771435910601, "phrase": "lcs_problem"}], "paper_keywords": ["LIS", " LCS", " data-streaming model", " algorithms", " lower bounds"], "paper_abstract": "We present algorithms and lower bounds for the Longest Increasing Subsequence (LIS) and Longest Common Subsequence (LCS) problems in the data-streaming model. To decide if the LIS of a given stream of elements drawn from an alphabet Sigma has length at least k, we discuss a one-pass algorithm using O(k log vertical bar Sigma vertical bar) space, with update time either O(log k) or O(log log vertical bar Sigma vertical bar); for vertical bar Sigma vertical bar=O(1), we can achieve O(log k) space and constant-time updates. We also prove a lower bound of Omega(k) on the space requirement for this problem for general alphabets Sigma, even when the input stream is a permutation of Sigma. For finding the actual LIS, we give a [log(1+1/epsilon)]-pass algorithm using O(k(1+epsilon) log vertical bar Sigma vertical bar)space, for any epsilon>0. For LCS, there is a trivial Theta(1)-approximate O(log n)-space streaming algorithm when vertical bar Sigma vertical bar=O(1). For general alphabets Sigma, the problem is much harder. We prove several lower bounds on the LCS problem, of which the strongest is the following: it is necessary to use Omega(n/rho(2)) space to approximate the LCS of two n-element streams to within a factor of rho, even if the streams are permutations of each other.", "paper_title": "Finding longest increasing and common subsequences in streaming data", "paper_id": "WOS:000236792900004"}