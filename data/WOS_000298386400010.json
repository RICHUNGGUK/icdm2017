{"auto_keywords": [{"score": 0.04643876418254707, "phrase": "compression_ratios"}, {"score": 0.00481495049065317, "phrase": "text_compression"}, {"score": 0.004704495156558224, "phrase": "semistatic_word-based_byte-oriented_compressors"}, {"score": 0.0045119929871912405, "phrase": "natural_language_texts"}, {"score": 0.00432733352307636, "phrase": "fast_direct_searching"}, {"score": 0.00428733103049275, "phrase": "compressed_text"}, {"score": 0.004054931951058077, "phrase": "even_more_benefits"}, {"score": 0.00357689487273538, "phrase": "word-based_byte-oriented_statistical_compressor"}, {"score": 0.003367188029221534, "phrase": "even_better_compression_ratios"}, {"score": 0.0031697368057340895, "phrase": "typical_large_english_texts"}, {"score": 0.003054009753601139, "phrase": "slow_prediction"}, {"score": 0.0030257422786589723, "phrase": "partial_matching_compressors"}, {"score": 0.0028882701690741467, "phrase": "final_compressor"}, {"score": 0.0028482561434303886, "phrase": "word-based_compressed_text"}, {"score": 0.0027827907725673845, "phrase": "typical_self-indexes"}, {"score": 0.002656327554326748, "phrase": "time_performance"}, {"score": 0.0025712297362596574, "phrase": "compression_step"}, {"score": 0.002500456462028735, "phrase": "well-known_tagged_huffman_code"}, {"score": 0.0024429654627197393, "phrase": "new_suffix-free_dense-code-based_compressor"}, {"score": 0.0022889103976458437, "phrase": "non-suffix-free_codes"}, {"score": 0.002134592410214824, "phrase": "original_text"}, {"score": 0.0021049977753042253, "phrase": "indexed_searches"}], "paper_keywords": ["natural language text compression", " search on compressed text", " compressed text indexing"], "paper_abstract": "Semistatic word-based byte-oriented compressors are known to be attractive alternatives to compress natural language texts. With compression ratios around 30-35%, they allow fast direct searching of compressed text. In this article, we reveal that these compressors have even more benefits. We show that most of the state-of-the-art compressors benefit from compressing not the original text, but the compressed representation obtained by a word-based byte-oriented statistical compressor. For example, p7zip with a dense-coding preprocessing achieves even better compression ratios and much faster compression than p7zip alone. We reach compression ratios below 17% in typical large English texts, which was obtained only by the slow prediction by partial matching compressors. Furthermore, searches perform much faster if the final compressor operates over word-based compressed text. We show that typical self-indexes also profit from our preprocessing step. They achieve much better space and time performance when indexing is preceded by a compression step. Apart from using the well-known Tagged Huffman code, we present a new suffix-free Dense-Code-based compressor that compresses slightly better. We also show how some self-indexes can handle non-suffix-free codes. As a result, the compressed/indexed text requires around 35% of the space of the original text and allows indexed searches for both words and phrases.", "paper_title": "Boosting Text Compression with Word-Based Statistical Encoding(1)", "paper_id": "WOS:000298386400010"}