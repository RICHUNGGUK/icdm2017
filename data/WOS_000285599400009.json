{"auto_keywords": [{"score": 0.049584128839210984, "phrase": "floating-point_arithmetic"}, {"score": 0.008959168934593819, "phrase": "exact_points"}, {"score": 0.00481495049065317, "phrase": "algebraic_functions"}, {"score": 0.004141238989360548, "phrase": "input_floating-point_values"}, {"score": 0.003771185758226876, "phrase": "nearest_arithmetic"}, {"score": 0.0033633514001658086, "phrase": "first_case"}, {"score": 0.0031270239691197515, "phrase": "second_case"}, {"score": 0.002983916676307492, "phrase": "exact_point"}, {"score": 0.0029224275921964724, "phrase": "usual_algebraic_functions"}, {"score": 0.0021493248730171132, "phrase": "decimal_formats"}], "paper_keywords": ["Floating-point arithmetic", " correct rounding", " algebraic function"], "paper_abstract": "When implementing a function f in floating-point arithmetic, if we wish correct rounding and good performance, it is important to know if there are input floating-point values x such that f(x) is either the middle of two consecutive floating-point numbers (assuming rounded-to-nearest arithmetic), or a floating-point number (assuming rounded toward +/- infinity or toward 0 arithmetic). In the first case, we say that f(x) is a midpoint, and in the second case, we say that f(x) is an exact point. For some usual algebraic functions and various floating-point formats, we prove whether or not there exist midpoints or exact points. When there exist midpoints or exact points, we characterize them or list all of them (if there are not too many). The results and the techniques presented in this paper can be used in particular to deal with both the binary and the decimal formats defined in the IEEE 754-2008 standard for floating-point arithmetic.", "paper_title": "Midpoints and Exact Points of Some Algebraic Functions in Floating-Point Arithmetic", "paper_id": "WOS:000285599400009"}