{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "fpga"}, {"score": 0.00481495049065317, "phrase": "control-dominant_circuits"}, {"score": 0.004768378525561471, "phrase": "general_purpose_processors"}, {"score": 0.004263972370406983, "phrase": "ever_increasing_performances"}, {"score": 0.004161553532799662, "phrase": "fruitful_decades"}, {"score": 0.0038876302202924644, "phrase": "processor-based_approaches"}, {"score": 0.0035965032173588753, "phrase": "fine_grain_parallelism"}, {"score": 0.0035443861412929006, "phrase": "dominant_applications"}, {"score": 0.003459191419478298, "phrase": "highly_specialized_people"}, {"score": 0.00342568771304873, "phrase": "hardware_design"}, {"score": 0.0030628762739398855, "phrase": "hardware_description_language"}, {"score": 0.0029747028229638625, "phrase": "dynamic_connections"}, {"score": 0.002931569771634119, "phrase": "token_sources"}, {"score": 0.0027383842769094354, "phrase": "synchronization_logic"}, {"score": 0.0025331002386232014, "phrase": "floating-point_matrix_multiplication_hardware_accelerator"}, {"score": 0.0024481856932959227, "phrase": "similar_computing_performances"}, {"score": 0.0024126686412257407, "phrase": "dedicated_designs"}, {"score": 0.002331781764406665, "phrase": "shorter_design_times"}, {"score": 0.0021674482571326283, "phrase": "advanced_hardware_design_skills"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": [""], "paper_abstract": "General purpose processors, graphics processing units (GPUs) and field-programmable gate-arrays (FPGAs) compete and collaborate to offer ever increasing performances. Nevertheless, despite fruitful decades of research, FPGA are still a lot more difficult to exploit than processor-based approaches. It is today possible to automatically map C/C++/SystemC algorithms into circuits. However, exploiting fine grain parallelism for control dominant applications is still reserved to highly specialized people in hardware design. This paper presents the application of our synchronized-transfer-level hardware design methodology to the implementation of pipelined floating point operators. The methodology builds on a hardware description language for which the designer manages dynamic connections between data token sources and sinks. A compiler automates the generation and the optimization of the synchronization logic, whose low-level complexity is thus hidden to the designer. Applied to the design of a floating-point matrix multiplication hardware accelerator, the proposed methodology leads to similar computing performances than the dedicated designs reported in the literature but within shorter design times (hours instead of days), simpler source code and no need for advanced hardware design skills. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Fast description and synthesis of control-dominant circuits", "paper_id": "WOS:000336700800017"}