{"auto_keywords": [{"score": 0.03799635259867218, "phrase": "mcemu"}, {"score": 0.0077073386863410484, "phrase": "application_development"}, {"score": 0.00481495049065317, "phrase": "software_development"}, {"score": 0.004692980391580608, "phrase": "multicore_systems"}, {"score": 0.004574085781766281, "phrase": "heterogeneous_multicore_systems"}, {"score": 0.004435363840720883, "phrase": "experienced_developers"}, {"score": 0.0038810583785936505, "phrase": "heterogeneous_multicore_system"}, {"score": 0.003802135020791801, "phrase": "time-consuming_and_difficult_task"}, {"score": 0.0034308688638878286, "phrase": "heterogeneous_multicore_emulator"}, {"score": 0.003143849342926373, "phrase": "basic_multicore_board_support_package"}, {"score": 0.0030957429853133147, "phrase": "interprocessor_communication_library"}, {"score": 0.002940626369102927, "phrase": "performance_monitoring"}, {"score": 0.002793260314529581, "phrase": "multicore_host_system"}, {"score": 0.0026945086500597304, "phrase": "parallel_applications"}, {"score": 0.002533253511622532, "phrase": "system_software"}, {"score": 0.0023694065215394593, "phrase": "numerous_functional_and_performance_bugs"}], "paper_keywords": ["Performance", " Measurement", " Experimentation", " Design", " Parallel simulation", " performance estimation", " heterogeneous multicore systems", " embedded systems"], "paper_abstract": "Developing software for heterogeneous multicore systems is particularly challenging even for experienced developers. While emulators have proven useful to application development, very few heterogeneous multicore emulators have been made available by vendors so far, as building an emulator for a heterogeneous multicore system has been a time-consuming and difficult task. Thus, we proposed a framework, called MCEmu, to speed up the process of building a heterogeneous multicore emulator by integrating existing and/or new processor emulators. MCEmu is designed to help system and application development, with a basic multicore board support package, an interprocessor communication library, and tools for debugging, tracing, and performance monitoring. In addition, MCEmu can run on a multicore host system to accelerate the emulation of data parallel applications. We show that MCEmu can be very useful for developing system software before the system becomes available, as it has helped us catch numerous functional and performance bugs which could have been hard to find. In this article, we present the design of MCEmu and demonstrate its capabilities with our case studies.", "paper_title": "MCEmu: A Framework for Software Development and Performance Analysis of Multicore Systems", "paper_id": "WOS:000310163000001"}