{"auto_keywords": [{"score": 0.04427589583460464, "phrase": "cjoin"}, {"score": 0.00481495049065317, "phrase": "communicating_transactions"}, {"score": 0.0046741260449047976, "phrase": "formal_approach"}, {"score": 0.004515004397496303, "phrase": "long_running_transactions"}, {"score": 0.004069280130346136, "phrase": "join_calculus"}, {"score": 0.003989487818395848, "phrase": "lrt._transactions_in"}, {"score": 0.003853583126988071, "phrase": "transactional_interaction"}, {"score": 0.0030531596109756895, "phrase": "distinguishing_feature"}, {"score": 0.0029055323737809825, "phrase": "ongoing_transactions"}, {"score": 0.0024793019587009035, "phrase": "user-defined_programs"}, {"score": 0.0024306105794630246, "phrase": "automatic_rollback"}, {"score": 0.002278856202878812, "phrase": "common_programming_patterns"}, {"score": 0.0022452005651385095, "phrase": "mathematical_foundation"}, {"score": 0.0021902063413831545, "phrase": "prototype_language_implementation"}, {"score": 0.0021049977753042253, "phrase": "jocaml_compiler"}], "paper_keywords": [""], "paper_abstract": "This paper proposes a formal approach to the design and programming of long running transactions (LRTs). We exploit techniques from process calculi to define cJoin, which is an extension of the Join calculus with few well-disciplined primitives for LRT. Transactions in cJoin are intended to describe the transactional interaction of several partners, under the assumption that any partner executing a transaction may communicate only with other transactional partners. In such case, the transactions run by any party are bound to achieve the same outcome (i.e., all succeed or all fail). Hence, a distinguishing feature of cJoin, called dynamic joinability, is that ongoing transactions can be merged to complete their tasks and when this happens either all succeed or all abort. Additionally, cJoin is based on compensations i.e., partial executions of transactions are recovered by executing user-defined programs instead of providing automatic rollback. The expressiveness and generality of cJoin is demonstrated by many examples addressing common programming patterns. The mathematical foundation is accompanied by a prototype language implementation, which is an extension of the JoCaml compiler.", "paper_title": "cJoin: Join with communicating transactions", "paper_id": "WOS:000348369900004"}