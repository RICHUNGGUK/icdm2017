{"auto_keywords": [{"score": 0.04026893024653011, "phrase": "middleware_platforms"}, {"score": 0.027927458871339825, "phrase": "posaml"}, {"score": 0.00481495049065317, "phrase": "middleware_provisioning"}, {"score": 0.004765482708043842, "phrase": "next_generation_distributed_applications"}, {"score": 0.004644014990871423, "phrase": "heterogeneous_platforms"}, {"score": 0.004596295252559861, "phrase": "different_kinds"}, {"score": 0.00443308765153716, "phrase": "applications'_growing_functional_complexity"}, {"score": 0.004188198923320451, "phrase": "system_developers"}, {"score": 0.004081385289516914, "phrase": "substantial_number"}, {"score": 0.004039423410198574, "phrase": "middleware_provisioning_challenges"}, {"score": 0.0037965243835456214, "phrase": "qos_properties"}, {"score": 0.003757480190200645, "phrase": "traditional_techniques"}, {"score": 0.003405948098114941, "phrase": "different_technologies"}, {"score": 0.0033190180867511605, "phrase": "middleware_provisioning_activities"}, {"score": 0.003234299589505403, "phrase": "different_actors"}, {"score": 0.003071274938566466, "phrase": "iterative_trial-and-error_process"}, {"score": 0.0028864239961184338, "phrase": "visual_models"}, {"score": 0.0026570998719084153, "phrase": "visual_modeling_language"}, {"score": 0.002298649369775623, "phrase": "visual_modeling_capabilities"}, {"score": 0.0022749744354271816, "phrase": "middleware-independent_configurations"}, {"score": 0.0022168460543913787, "phrase": "automated_middieware-specific_validation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["model-driven engineering", " visual domain-specific modeling languages", " generative tools"], "paper_abstract": "Next generation distributed applications are often hosted on heterogeneous platforms including different kinds of middleware. Due to the applications' growing functional complexity and their multiple quality of service (QoS) requirements, system developers are increasingly facing a substantial number of middleware provisioning challenges, which include configuring, optimizing and validating the middleware platforms for QoS properties. Traditional techniques for middleware provisioning tend to use non-intuitive, low-level and technology-specific approaches, which are tedious, error prone, and non-reusable across different technologies. Quite often the middleware provisioning activities are carried out by different actors without much interaction among them, which results in an iterative trial-and-error process to provisioning. Higher level abstractions, particularly those that use visual models, are effective in addressing these challenges. This paper describes the design of a visual modeling language called POSAML (pattern-oriented software architecture modeling language) and associated tools that provide an intuitive, higher level and unified framework for provisioning middleware platforms. POSAML provides visual modeling capabilities for middleware-independent configurations and optimizations while enabling automated middieware-specific validation of system QoS properties. (c) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "POSAML: A visual modeling language for middleware provisioning", "paper_id": "WOS:000250316000002"}