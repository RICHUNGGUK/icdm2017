{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "higher-order_graph_grammars"}, {"score": 0.004774324145784758, "phrase": "higher-order_functions"}, {"score": 0.004576253356889219, "phrase": "fundamental_role"}, {"score": 0.004537631845923196, "phrase": "computer_science"}, {"score": 0.004404994123834589, "phrase": "functional_programming"}, {"score": 0.004294381488413906, "phrase": "graph_transformation"}, {"score": 0.004064117897000019, "phrase": "important_approach"}, {"score": 0.003829877278269543, "phrase": "visual_languages"}, {"score": 0.0037178503842258087, "phrase": "concurrent_and_non-deterministic_systems"}, {"score": 0.003593812067062062, "phrase": "vast_theory"}, {"score": 0.003459191419478298, "phrase": "higher-order_transformation"}, {"score": 0.003400984514637656, "phrase": "graph_rewriting_rules"}, {"score": 0.0031777570808834213, "phrase": "dynamic_systems"}, {"score": 0.003150900886669123, "phrase": "graph_transformation_systems"}, {"score": 0.0030847461428168614, "phrase": "model_transformations"}, {"score": 0.0029817668105720924, "phrase": "main_contribution"}, {"score": 0.0028822153400215973, "phrase": "double-pushout_transformation"}, {"score": 0.0027159094186967247, "phrase": "valid_graph_rule"}, {"score": 0.0026701760128830573, "phrase": "dpo_diagrams"}, {"score": 0.002570064617803693, "phrase": "rule_transformations"}, {"score": 0.0025375331660958665, "phrase": "negative_application_conditions"}, {"score": 0.0024736973328071026, "phrase": "second-order_rules"}, {"score": 0.0024114635128122783, "phrase": "rule_structure"}, {"score": 0.0022626276288355432, "phrase": "first-_and_second-order_derivations"}, {"score": 0.002205692205167157, "phrase": "alternative_ways"}, {"score": 0.002177762848946681, "phrase": "second-order_transformations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph transformation", " Double-pushout approach", " Higher-order transformations"], "paper_abstract": "Higher-order functions - the ones which manipulate other functions - have a fundamental role in Computer Science, specially in areas such as functional programming and theory of computation. Graph transformation - the rule-based modification of graphs - is also an important approach used in many contexts, as for instance, the definition of syntax and semantics of visual languages and the modelling and analysis of concurrent and non-deterministic systems. Although the algebraic double-pushout (DPO) approach to graph transformation has a vast theory, it does not present a notion of higher-order transformation, i.e., transformation of graph rewriting rules themselves. Higher-order would be required, for instance, to ease the modelling of dynamic systems through graph transformation systems, and to describe model transformations that modify graph rewriting rules. The main contribution of this work is a notion of double-pushout transformation for graph rewriting rules, where the result of the rewriting is a valid graph rule. We use DPO diagrams in the category of graph spans to describe rule transformations, and negative application conditions (NACs) in the second-order rules to enforce preservation of the rule structure. We define a model named second-order graph grammars, capable of first- and second-order derivations. Finally, we discuss alternative ways of defining second-order transformations. (C) 2015 Published by Elsevier B.V.", "paper_title": "Rule-based transformation of graph rewriting rules: Towards higher-order graph grammars", "paper_id": "WOS:000358625800001"}