{"auto_keywords": [{"score": 0.03394464802124141, "phrase": "reachability_queries"}, {"score": 0.00481495049065317, "phrase": "suffix_tree_graphs"}, {"score": 0.004610058444728656, "phrase": "graph_reachability_queries"}, {"score": 0.004413846562278824, "phrase": "acyclic_graphs"}, {"score": 0.004199766284749713, "phrase": "suffix_tree"}, {"score": 0.003971262520692664, "phrase": "simplified_reachability_labeling_algorithm"}, {"score": 0.0038978806337961565, "phrase": "agrawal_et_al"}, {"score": 0.003640183972131238, "phrase": "random_string"}, {"score": 0.002633941112839883, "phrase": "exhaustive_computational_calculations"}, {"score": 0.0023694065215394593, "phrase": "worst_case_instances"}, {"score": 0.0021049977753042253, "phrase": "worst_case_time"}], "paper_keywords": ["algorithms and data structures", " suffix trees", " graph reachability"], "paper_abstract": "We analyze the complexity of graph reachability queries on ST-graphs, defined as directed acyclic graphs (DAGs) obtained by merging the suffix tree of a given string and its suffix links. Using a simplified reachability labeling algorithm presented by Agrawal et al. (1989), we show that for a random string of length n, its ST-graph can be preprocessed in O(n log n) expected time and space to answer reachability queries in O(log n) time. Furthermore, we present a series of strings that require circle minus(n root n) time and space to answer reachability queries in O(log n) time for the same algorithm. Exhaustive computational calculations for strings of length n <= 33 have revealed that the same strings are also the worst case instances of the algorithm. We therefore conjecture that reachability queries can be answered in O(log n) time with a worst case time and space preprocessing complexity of circle minus(n root n).", "paper_title": "Reachability on suffix tree graphs", "paper_id": "WOS:000253948900011"}