{"auto_keywords": [{"score": 0.03465035281375813, "phrase": "linux"}, {"score": 0.011949016798280207, "phrase": "production_versions"}, {"score": 0.00481495049065317, "phrase": "linux_kernel_life_cycle"}, {"score": 0.004641770842098217, "phrase": "important_and_common_phenomenon"}, {"score": 0.004511373893354558, "phrase": "ever-extending_development_trajectory"}, {"score": 0.004124831019063503, "phrase": "linux_kernel"}, {"score": 0.003710323357333052, "phrase": "new_functionality"}, {"score": 0.003605997900398767, "phrase": "unique_element"}, {"score": 0.003433909720151841, "phrase": "new_production_versions"}, {"score": 0.0032040376301815544, "phrase": "release_follow-up_phase"}, {"score": 0.003126623133221065, "phrase": "new_development_version"}, {"score": 0.0030510733648183813, "phrase": "early_releases"}, {"score": 0.0029172611440429963, "phrase": "concurrent_merge_window"}, {"score": 0.002777949746964955, "phrase": "piecewise_linear_model"}, {"score": 0.002755384932325921, "phrase": "increasing_slopes"}, {"score": 0.0027218799769229596, "phrase": "best_description"}, {"score": 0.002634506575564286, "phrase": "perpetual_development_model"}, {"score": 0.002508663916554954, "phrase": "incremental_and_evolutionary_development"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software evolution", " Software release", " Maintenance", " Linux kernel"], "paper_abstract": "Software evolution is widely recognized as an important and common phenomenon, whereby the system follows an ever-extending development trajectory with intermittent releases. Nevertheless there have been only few lifecycle models that attempt to portray such evolution. We use the evolution of the Linux kernel as the basis for the formulation of such a model, integrating the progress in time with growth of the codebase, and differentiating between development of new functionality and maintenance of production versions. A unique element of the model is the sequence of activities involved in releasing new production versions, and how this has changed with the growth of Linux. In particular, the release follow-up phase before the forking of a new development version, which was prominent in early releases of production versions, has been eliminated in favor of a concurrent merge window in the release of 2.6.x versions. We also show that a piecewise linear model with increasing slopes provides the best description of the growth of Linux. The perpetual development model is used as a framework in which commonly recognized benefits of incremental and evolutionary development may be demonstrated, and to comment on issues such as architecture, conservation of familiarity, and failed projects. We suggest that this model and variants thereof may apply to many other projects in addition to Linux. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Perpetual development: A model of the Linux kernel life cycle", "paper_id": "WOS:000301630700007"}