{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model-driven_engineering_and_domain-specific_modeling_languages"}, {"score": 0.0037030390595465673, "phrase": "alternative_metamodeling_languages"}, {"score": 0.003493021648360933, "phrase": "specific_requirements"}, {"score": 0.003200045185608395, "phrase": "different_domains"}, {"score": 0.0028471655497661528, "phrase": "modeling_languages"}, {"score": 0.002608218347502229, "phrase": "different_metamodeling_languages"}, {"score": 0.0024601402359002056, "phrase": "latter_need"}, {"score": 0.002389276641014013, "phrase": "general_technique"}], "paper_keywords": ["Model Transformation", " Metamodel Translation", " Model-Driven Engineering"], "paper_abstract": "Model-Driven Engineering and Domain-Specific Modeling Languages are encouraging an increased used of metamodels for the definition of languages and tools. Although the Meta Object Facility language is the standard for metamodeling, there are alternative metamodeling languages that are aimed at satisfying specific requirements. In this context, sharing information throughout different domains and tools requires not only being able to translate models between modeling languages defined with the same metamodeling language, but also between different metamodeling languages. This paper addresses this latter need describing a general technique to define transformations that perform this translation. In this work, two case studies illustrate the application of this process.", "paper_title": "A Technique for Defining Metamodel Translations", "paper_id": "WOS:000272394700027"}