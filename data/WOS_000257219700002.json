{"auto_keywords": [{"score": 0.03363896917055259, "phrase": "model-typed_interfaces"}, {"score": 0.004814956926877314, "phrase": "cbse"}, {"score": 0.004568326972997448, "phrase": "reusable_software_components"}, {"score": 0.004334280585565239, "phrase": "software_systems"}, {"score": 0.004269630481719451, "phrase": "well_defined_interfaces"}, {"score": 0.0040508247605225214, "phrase": "data_intensive_business_logic"}, {"score": 0.00396050388346298, "phrase": "heavy_data_transfer"}, {"score": 0.003673675864705682, "phrase": "basic_data_types"}, {"score": 0.003511613254403125, "phrase": "large_interfaces"}, {"score": 0.003113441660343867, "phrase": "generic_interface_parameters"}, {"score": 0.002976019715894587, "phrase": "complex_structured_data"}, {"score": 0.002823329348987524, "phrase": "mdt"}, {"score": 0.002678433668156676, "phrase": "parameter_structure"}, {"score": 0.0026384167183586015, "phrase": "compatibility_checks"}, {"score": 0.002560162916190598, "phrase": "platform_independent_system_design_time"}, {"score": 0.002218933616777076, "phrase": "technology_mapping"}, {"score": 0.002185785627773535, "phrase": "idl"}, {"score": 0.0021369416775353107, "phrase": "corba_component_model"}, {"score": 0.002105032258403765, "phrase": "ccm"}], "paper_keywords": ["interfaces definition", " software engineering", " data modeling"], "paper_abstract": "Component based software engineering (CBSE) allows to design and develop reusable software components that can be assembled to construct software systems via well defined interfaces. However, designing such reusable components for data intensive business logic often requires heavy data transfer between components over interfaces. Static interface definitions using basic data types or structures of such lead to large interfaces susceptible to modifications. The goal of this paper is to present model-typed interfaces based on generic interface parameters, which allows to transfer complex structured data between components. Providing such generic, model-defined types (MDT) with data models specifying the parameter structure supports compatibility checks of model-typed interfaces at platform independent system design time. The methodology is described platform independently and the coherency with our system development process is discussed. Moreover, a technology mapping to IDL and the CORBA component model (CCM) is illustrated. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Model-typed component interfaces", "paper_id": "WOS:000257219700002"}