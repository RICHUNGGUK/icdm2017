{"auto_keywords": [{"score": 0.047510470298773616, "phrase": "multithreaded_processing"}, {"score": 0.01032574769177336, "phrase": "multicore_systems"}, {"score": 0.00481495049065317, "phrase": "implementation_techniques"}, {"score": 0.004749106104067268, "phrase": "query_processing"}, {"score": 0.00443308765153716, "phrase": "de_facto_standards"}, {"score": 0.004312622975366676, "phrase": "personal_computing"}, {"score": 0.004138010495069077, "phrase": "uninformed_way"}, {"score": 0.0037060428445111694, "phrase": "memory_access_bottleneck"}, {"score": 0.003459191419478298, "phrase": "query_evaluation"}, {"score": 0.0033419808453225516, "phrase": "system_design"}, {"score": 0.00327356326590461, "phrase": "partition_parallelism"}, {"score": 0.0032287289440915187, "phrase": "memory_pooling"}, {"score": 0.0031626225189867354, "phrase": "data_structures"}, {"score": 0.0029114187110123105, "phrase": "alternative_implementations"}, {"score": 0.00271735110571002, "phrase": "multiple_scenarios"}, {"score": 0.002680114113899346, "phrase": "hardware_platforms"}, {"score": 0.0023507916951658455, "phrase": "optimal_algorithm"}, {"score": 0.0022710523337245337, "phrase": "problem_parameters"}, {"score": 0.0022399174232611853, "phrase": "underlying_hardware"}, {"score": 0.0021342613107011624, "phrase": "good_first_step"}, {"score": 0.0021049977753042253, "phrase": "generic_multithreaded_parallelism"}], "paper_keywords": ["Parallel databases", " query processing", " parallel algorithms", " parallel processors", " multithreaded processors"], "paper_abstract": "Multicore systems and multithreaded processing are now the de facto standards of enterprise and personal computing. If used in an uninformed way, however, multithreaded processing might actually degrade performance. We present the facets of the memory access bottleneck as they manifest in multithreaded processing and show their impact on query evaluation. We present a system design based on partition parallelism, memory pooling, and data structures conducive to multithreaded processing. Based on this design, we present alternative implementations of the most common query processing algorithms, which we experimentally evaluate using multiple scenarios and hardware platforms. Our results show that the design and algorithms are indeed scalable across platforms, but the choice of optimal algorithm largely depends on the problem parameters and underlying hardware. However, our proposals are a good first step toward generic multithreaded parallelism.", "paper_title": "A Comparative Study of Implementation Techniques for Query Processing in Multicore Systems", "paper_id": "WOS:000327656800002"}