{"auto_keywords": [{"score": 0.0101108045162826, "phrase": "new_data_structure"}, {"score": 0.009885088501865267, "phrase": "scfg"}, {"score": 0.00481495049065317, "phrase": "explicitly_synchronized_languages"}, {"score": 0.004771435352180973, "phrase": "static_analysis"}, {"score": 0.0047283116134926645, "phrase": "concurrent_languages"}, {"score": 0.004664352260912174, "phrase": "complex_task"}, {"score": 0.0045804107341714, "phrase": "non-deterministic_execution"}, {"score": 0.004457309741979921, "phrase": "concurrent_language_being"}, {"score": 0.004397000006837371, "phrase": "process_synchronization"}, {"score": 0.003996983218174335, "phrase": "static_analysis_technique"}, {"score": 0.0038895008852940323, "phrase": "concurrent_and_explicitly_synchronized_languages"}, {"score": 0.0038021952185404474, "phrase": "csp"}, {"score": 0.0036663981146086103, "phrase": "particular_point"}, {"score": 0.0026427848602443293, "phrase": "slicing_process"}, {"score": 0.002502374576203785, "phrase": "real_specifications"}, {"score": 0.002468450551616404, "phrase": "good_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Concurrent programming", " CSP", " Program slicing"], "paper_abstract": "Static analysis of concurrent languages is a complex task due to the non-deterministic execution of processes. If the concurrent language being studied allows process synchronization, then the analyses are even more complex (and thus expensive), e.g., due to the phenomenon of deadlock. In this work we introduce a static analysis technique based on program slicing for concurrent and explicitly synchronized languages in general, and CSP in particular. Concretely. given a particular point in a specification, our technique allows us to know what parts of the specification must necessarily be executed before this point, and what parts of the specification could be executed before it. Our technique is based on a new data structure that extends the Synchronized Control Flow Graph (SCFG). We show that this new data structure improves the SCFG by taking into account the context in which processes are called and, thus, it makes the slicing process more precise. The technique has been implemented and tested with real specifications, producing good results. After formally defining our technique, we describe our tool, its architecture, its main applications and the results obtained from several experiments conducted in order to measure the performance of the tool. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Static slicing of explicitly synchronized languages", "paper_id": "WOS:000302387500002"}