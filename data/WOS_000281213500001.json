{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mfold"}, {"score": 0.00475413908468027, "phrase": "shared_memory_system"}, {"score": 0.004605434064238641, "phrase": "widely_used_application"}, {"score": 0.004518442937844318, "phrase": "rna_secondary_structure"}, {"score": 0.004377077848734575, "phrase": "important_problem"}, {"score": 0.004159997145421619, "phrase": "dynamic_programming_algorithm"}, {"score": 0.0040042529959108605, "phrase": "minimum_free_energy_structure"}, {"score": 0.003571018150056717, "phrase": "shared_memory_systems"}, {"score": 0.0034154440860550564, "phrase": "dynamic_programming_part"}, {"score": 0.0033295966773779174, "phrase": "message-passing_interface"}, {"score": 0.003144222265269426, "phrase": "parallelized_dp_algorithm"}, {"score": 0.0030847461428168614, "phrase": "data_transfers"}, {"score": 0.0026986685585382347, "phrase": "comparison_results"}, {"score": 0.0025974916908139472, "phrase": "parallel_mfold"}, {"score": 0.002391067964886602, "phrase": "performance_analysis_tool"}, {"score": 0.0022434880661725493, "phrase": "performance_gap"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["RNA secondary structure", " Mfold", " Parallelization", " Optimization", " MPI", " Shared memory system"], "paper_abstract": "Mfold is a widely used application for predicating RNA secondary structure, which is an important problem in bioinformatics. In Mfold, a dynamic programming algorithm is used to find the minimum free energy structure, which is the most time-consuming part. This paper focuses on the parallelization and optimization of Mfold on shared memory systems. First, we parallelize the dynamic programming part of Mfold with Message-Passing Interface (MPI). We further optimize the parallelized DP algorithm by eliminating data transfers among processes on a 16-way multi-processor system. We then compare the performance of our parallel Mfold before and after this optimization. The comparison results indicate that with optimization the parallel Mfold performs twice as fast. Furthermore, we make use of a performance analysis tool to gather several hardware performance events, which explain in details the performance gap incurred by this optimization. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Parallelization and optimization of Mfold on shared memory system", "paper_id": "WOS:000281213500001"}