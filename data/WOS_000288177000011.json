{"auto_keywords": [{"score": 0.029420333683948755, "phrase": "minority_codes"}, {"score": 0.02290752405527008, "phrase": "large_payloads"}, {"score": 0.010246295058294176, "phrase": "embedding_efficiency"}, {"score": 0.00481495049065317, "phrase": "improved_embedding_efficiency"}, {"score": 0.004180622964109706, "phrase": "coding_scheme"}, {"score": 0.003760137090849196, "phrase": "binary_bits"}, {"score": 0.003578600071301459, "phrase": "odd_number"}, {"score": 0.0033579708256295847, "phrase": "bit_value"}, {"score": 0.0030630037175103032, "phrase": "minority_bit"}, {"score": 0.0026214978443388653, "phrase": "complement_sequences"}, {"score": 0.0024423826953133844, "phrase": "watermarking_algorithms"}, {"score": 0.0021501863832966966, "phrase": "host_image"}, {"score": 0.0021049977753042253, "phrase": "watermarking_method"}], "paper_keywords": ["Watermarking", " Embedding efficiency", " Payload", " Minority codes"], "paper_abstract": "Improving embedding efficiency is important for watermarking with large payloads. In this paper, we propose a coding scheme named Minority codes by observing the relationship between the populations and positions of the binary bits in a sequence whose length is an odd number. In such a sequence, there is always a bit value, whose population is minority. We observe that the positions of the minority bit in two complement sequences are the same. By using this property, we create Minority codes whose codebook is composed of a pair of complement sequences for each entry. Minority codes can be combined with watermarking algorithms to improve embedding efficiency, because we can always identify the codeword that causes fewer embedding changes according to the host image and the watermarking method. The performance of Minority codes is analyzed theoretically and supported experimentally. The complexity of Minority codes is quite low and suitable for large payloads.", "paper_title": "Minority codes with improved embedding efficiency for large payloads", "paper_id": "WOS:000288177000011"}