{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "hot_optimizations"}, {"score": 0.004666228956744244, "phrase": "hardware_complexity_increases"}, {"score": 0.004451676867747938, "phrase": "execution_stack"}, {"score": 0.004359500411441827, "phrase": "performance_impact"}, {"score": 0.004202741104973709, "phrase": "production_compilers"}, {"score": 0.0041589926969138585, "phrase": "virtual_machines"}, {"score": 0.004115697805448384, "phrase": "substantial_development_effort"}, {"score": 0.004072851768196397, "phrase": "performance_tuning"}, {"score": 0.0040094142308666975, "phrase": "good_performance"}, {"score": 0.0036489343475053187, "phrase": "unpredictable_impact"}, {"score": 0.003610929883213109, "phrase": "running_time"}, {"score": 0.0035733198242955634, "phrase": "sometimes_degrading_performance"}, {"score": 0.0035176353680157367, "phrase": "today's_vms"}, {"score": 0.003480993634130542, "phrase": "sophisticated_feedback-directed_optimizations"}, {"score": 0.0033381913087533457, "phrase": "performance_degradations"}, {"score": 0.0030062165552187086, "phrase": "online_framework"}, {"score": 0.0028527866590859967, "phrase": "online_system"}, {"score": 0.0027645030021576926, "phrase": "performance_anomalies"}, {"score": 0.0025824576209656676, "phrase": "fundamental_shift"}, {"score": 0.002450602177683068, "phrase": "online_systems"}, {"score": 0.0023254633298356894, "phrase": "offline_empirical_optimization_search"}], "paper_keywords": ["languages", " performance", " virtual machines", " feedback-directed optmizations", " Java"], "paper_abstract": "As hardware complexity increases and virtualization is added at more layers of the execution stack, predicting the performance impact of optimizations becomes increasingly difficult. Production compilers and virtual machines invest substantial development effort in performance tuning to achieve good performance for a range of benchmarks. Although optimizations typically perform well on average, they often have unpredictable impact on running time, sometimes degrading performance significantly. Today's VMs perform sophisticated feedback-directed optimizations, but these techniques do not address performance degradations, and they actually make the situation worse by making the system more unpredictable. This paper presents an online framework for evaluating the effectiveness of optimizations, enabling an online system to automatically identify and correct performance anomalies that occur at runtime. This work opens the door for a fundamental shift in the way optimizations are developed and tuned for online systems, and may allow the body of work in offline empirical optimization search to be applied automatically at runtime. We present our implementation and evaluation of this system in a product Java VM.", "paper_title": "Online performance auditing: Using hot optimizations without getting burned", "paper_id": "WOS:000202972100021"}