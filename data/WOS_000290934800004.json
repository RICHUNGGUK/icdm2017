{"auto_keywords": [{"score": 0.04952525101149599, "phrase": "trace_visualization"}, {"score": 0.015719716506582538, "phrase": "program_comprehension"}, {"score": 0.004704187604192605, "phrase": "software_maintenance_activities"}, {"score": 0.004622783000449884, "phrase": "sufficient_level"}, {"score": 0.004211731831120046, "phrase": "execution_trace_visualization"}, {"score": 0.004138813595009761, "phrase": "common_approach"}, {"score": 0.003837089839193524, "phrase": "extravis"}, {"score": 0.003662410853488772, "phrase": "large_traces"}, {"score": 0.0034956560177000656, "phrase": "case_studies"}, {"score": 0.003375574760845742, "phrase": "quantitative_evaluations"}, {"score": 0.0033170847930578473, "phrase": "present_day"}, {"score": 0.0031845067058084613, "phrase": "first_controlled_experiment"}, {"score": 0.003093054709625219, "phrase": "added_value"}, {"score": 0.002952146666681891, "phrase": "eight_typical_tasks"}, {"score": 0.002817639725689939, "phrase": "representative_subject_system"}, {"score": 0.002720785798036066, "phrase": "control_group"}, {"score": 0.002142161017595363, "phrase": "time_requirements"}], "paper_keywords": ["Program comprehension", " dynamic analysis", " controlled experiment"], "paper_abstract": "Software maintenance activities require a sufficient level of understanding of the software at hand that unfortunately is not always readily available. Execution trace visualization is a common approach in gaining this understanding, and among our own efforts in this context is EXTRAVIS, a tool for the visualization of large traces. While many such tools have been evaluated through case studies, there have been no quantitative evaluations to the present day. This paper reports on the first controlled experiment to quantitatively measure the added value of trace visualization for program comprehension. We designed eight typical tasks aimed at gaining an understanding of a representative subject system, and measured how a control group (using the Eclipse IDE) and an experimental group (using both Eclipse and EXTRAVIS) performed these tasks in terms of time spent and solution correctness. The results are statistically significant in both regards, showing a 22 percent decrease in time requirements and a 43 percent increase in correctness for the group using trace visualization.", "paper_title": "A Controlled Experiment for Program Comprehension through Trace Visualization", "paper_id": "WOS:000290934800004"}