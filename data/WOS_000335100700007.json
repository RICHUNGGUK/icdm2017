{"auto_keywords": [{"score": 0.03441652477229554, "phrase": "ko"}, {"score": 0.00481495049065317, "phrase": "burrows-wheeler_transform"}, {"score": 0.00440093312826378, "phrase": "classic_burrows_wheeler_transform"}, {"score": 0.004289291421348352, "phrase": "lexicographic_order"}, {"score": 0.00418046991987597, "phrase": "distinct_total_ordering"}, {"score": 0.004039639718055365, "phrase": "v-order_string_comparison"}, {"score": 0.004005176784823524, "phrase": "lyndon-like"}, {"score": 0.003598317040926701, "phrase": "daykin_et_al"}, {"score": 0.0033067861075043946, "phrase": "aluru"}, {"score": 0.0030969799559421806, "phrase": "linear_v-sorting"}, {"score": 0.002929056388593134, "phrase": "input_string_x"}, {"score": 0.0026882700311968025, "phrase": "efficient_algorithm"}, {"score": 0.002553382046204689, "phrase": "bijective_algorithm"}, {"score": 0.0024356742694508662, "phrase": "future_research"}, {"score": 0.002373767863833987, "phrase": "iex-extension_orderings"}, {"score": 0.00218789980093445, "phrase": "possible_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Algorithm", " Bijective", " Burrows-Wheeler Transform", " Complexity", " Lexicographic order", " Lex-extension order", " Linear", " Lyndon word", " String", " Suffix array", " Total order", " V-BWT", " V-order", " V-transform", " V-word", " Word"], "paper_abstract": "In this paper we introduce the V-transform (V-BWT), a variant of the classic Burrows Wheeler Transform. The original BWT uses lexicographic order, whereas we apply a distinct total ordering of strings called V-order. V-order string comparison and Lyndon-like factorization of a string x = x[1..n] into V-words have recently been shown to be linear in their use of time and space (Daykin et al., 2011) [18]. Here we apply these subcomputations, along with Theta(n) suffix-sorting (Ko and Aluru, 2003) [26], to implement linear V-sorting of all the rotations of a string. When it is known that the input string x is a V-word, we compute the V-transform in Theta(n) time and space, and also outline an efficient algorithm for inverting the V-transform and recovering x. We further outline a bijective algorithm in the case that x is arbitrary. We propose future research into other variants of transforms using Iex-extension orderings (Daykin et al., 2013) [19]. Motivation for this work arises in possible applications to data compression. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A bijective variant of the Burrows-Wheeler Transform using V-order", "paper_id": "WOS:000335100700007"}