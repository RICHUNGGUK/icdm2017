{"auto_keywords": [{"score": 0.0268264590190707, "phrase": "agr"}, {"score": 0.015455896406014075, "phrase": "derivative_y"}, {"score": 0.00481495049065317, "phrase": "inverse_function"}, {"score": 0.004178351419209898, "phrase": "direct_proportion"}, {"score": 0.00414780558977049, "phrase": "growth_rate"}, {"score": 0.003949772956223261, "phrase": "continuous_or_discrete_interval"}, {"score": 0.00385431710959668, "phrase": "asymptotic_analysis"}, {"score": 0.003835503501758802, "phrase": "logarithmic_granularities"}, {"score": 0.0037427988766503377, "phrase": "polynomial_time"}, {"score": 0.0031457622320220364, "phrase": "ptr._besides"}, {"score": 0.0025608471909800076, "phrase": "existing_facts"}, {"score": 0.002486659929589854, "phrase": "inversion_problems"}, {"score": 0.002282304776934795, "phrase": "ptr"}, {"score": 0.002227055417826555, "phrase": "assumption_partitions"}, {"score": 0.0021625170763342957, "phrase": "new_evidence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Public key cryptosystem", " Transcendental logarithm problem", " Asymptotic granularity reduction", " Polynomial time reduction", " Provable security"], "paper_abstract": "It is well known that the inverse function of y = x with the derivative y' = 1 is x = y, the inverse function of y = c with the derivative y' = 0 is nonexistent, and so on. Hence, on the assumption that the noninvertibility of the univariate increasing function y = (x) with x > 0 is in direct proportion to the growth rate reflected by its derivative, the authors put forward a method of comparing difficulties in inverting two functions on a continuous or discrete interval called asymptotic granularity reduction (AGR) which integrates asymptotic analysis with logarithmic granularities, and is an extension and a complement to polynomial time (Turing) reduction (PTR). Prove by AGR that inverting y equivalent to x(x) (mod p) is computationally harder than inverting y equivalent to g(x) (mod p), and inverting y equivalent to g(xn) (mod p) is computationally equivalent to inverting y equivalent to g(x) (mod p), which are compatible with the results from PTR. Besides, apply AGR to the comparison of inverting y equivalent to x(n) (mod p) with y equivalent to g(x) (mod p), y equivalent to g(g1x) (mod p) with y equivalent to g(x) (mod p), and y equivalent to x(n) + x + 1 (mod p) with y equivalent to x(n) (mod p) in difficulty, and observe that the results are consistent with existing facts, which further illustrates that AGR is suitable for comparison of inversion problems in difficulty. Last, prove by AGR that inverting y equivalent to x(n)g(x) (mod p) is computationally equivalent to inverting y equivalent to g(x) (mod p) when PTR cannot be utilized expediently. AGR with the assumption partitions the complexities of problems more detailedly, and finds out some new evidence for the security of cryptosystems. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Asymptotic granularity reduction and its application", "paper_id": "WOS:000294592500022"}