{"auto_keywords": [{"score": 0.036384452583045866, "phrase": "underlying_virtual_machine"}, {"score": 0.00481495049065317, "phrase": "dgc-consistent_cuts"}, {"score": 0.004693476992528682, "phrase": "memory_management"}, {"score": 0.004653667500876187, "phrase": "distributed_objects"}, {"score": 0.004497762477097628, "phrase": "error-prone_task"}, {"score": 0.004402973626416765, "phrase": "memory_leaks"}, {"score": 0.0041657281535389615, "phrase": "automatic_memory_management"}, {"score": 0.003991932110277654, "phrase": "current_dgc_solutions"}, {"score": 0.003542786326740931, "phrase": "specialised_environments"}, {"score": 0.0025947642929906407, "phrase": "byte-code_modification"}, {"score": 0.002561752783323717, "phrase": "distributed_garbage_collector"}, {"score": 0.002465210678474529, "phrase": "common_language_infrastructure"}, {"score": 0.0021412594173592513, "phrase": "provided_aspect-oriented_functionalities"}, {"score": 0.0021049977753042253, "phrase": "performance_results"}], "paper_keywords": [""], "paper_abstract": "The memory management of distributed objects, when done manually, is an error-prone task. It leads to memory leaks and dangling references, causing applications to fail. Avoiding such errors requires automatic memory management, called distributed garbage collection (DGC). Current DGC solutions are either not safe, not complete or not portable to widely used platforms such as .NET. As a matter of fact, most solutions either run on specialised environments or require modifications of the underlying virtual machine (e.g. rotor, common language runtime (CLR)), hindering its immediate and widespread utilisation. This study describes the design, architecture, implementation and performance measurements of a DGC algorithm for .NET that: (i) is complete, that is, capable of reclaiming both acyclic and cyclic garbage, while (ii) being portable in the sense that it neither requires the underlying virtual machine to be modified, nor source or byte-code modification. The distributed garbage collector was implemented on top of two implementations of the common language infrastructure (.NET virtual machine specification): CLR and shared source CLI, commonly known as Rotor. The implementation requires no modification of the environment, it makes use of the provided aspect-oriented functionalities, and the performance results are encouraging.", "paper_title": "Complete distributed garbage collection using DGC-consistent cuts and .NET AOP-support", "paper_id": "WOS:000252797300005"}