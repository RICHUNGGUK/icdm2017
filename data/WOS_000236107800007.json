{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "injection_attacks"}, {"score": 0.02292486410251043, "phrase": "csse"}, {"score": 0.008646063608980719, "phrase": "context-sensitive_string_evaluation"}, {"score": 0.006326201647748999, "phrase": "user-provided_input"}, {"score": 0.004666460260366703, "phrase": "major_threat"}, {"score": 0.004630055463858585, "phrase": "application-level_security"}, {"score": 0.004504850679320975, "phrase": "sql_injection"}, {"score": 0.004469700997700534, "phrase": "cross-site_scripting"}, {"score": 0.004434824354230475, "phrase": "shell_injection_vulnerabilities"}, {"score": 0.0044002186469797476, "phrase": "existing_methods"}, {"score": 0.004100620365805411, "phrase": "application_developers"}, {"score": 0.003674461410107989, "phrase": "root_cause"}, {"score": 0.003424107910734022, "phrase": "platform-enforced_separation"}, {"score": 0.003241203549050267, "phrase": "metadata-preserving_string_operations"}, {"score": 0.003141093559655865, "phrase": "application_source_code_modifications"}, {"score": 0.0030680392468327147, "phrase": "underlying_platform"}, {"score": 0.002847691227421257, "phrase": "small_team"}, {"score": 0.002825435048559866, "phrase": "security-savvy_platform_developers"}, {"score": 0.0024920359789965783, "phrase": "prototype_csse_implementation"}, {"score": 0.002472557046447609, "phrase": "php"}, {"score": 0.0023220574539321494, "phrase": "phpbb"}], "paper_keywords": ["intrusion prevention", " internal sensors", " injection attacks", " web applications", " PHP"], "paper_abstract": "Injection vulnerabilities pose a major threat to application-level security. Some of the more common types are SQL injection, cross-site scripting and shell injection vulnerabilities. Existing methods for defending against injection attacks, that is, attacks exploiting these vulnerabilities, rely heavily on the application developers and are therefore error-prone. In this paper we introduce CSSE, a method to detect and prevent injection attacks. CSSE works by addressing the root cause why such attacks can succeed, namely the ad-hoc serialization of user-provided input. It provides a platform-enforced separation of channels, using a combination of assignment of metadata to user-provided input, metadata-preserving string operations and context-sensitive string evaluation. CSSE requires neither application developer interaction nor application source code modifications. Since only changes to the underlying platform are needed, it effectively shifts the burden of implementing countermeasures against injection attacks from the many application developers to the small team of security-savvy platform developers. Our method is effective against most types of injection attacks, and we show that it is also less error-prone than other solutions proposed so far. We have developed a prototype CSSE implementation for PHP, a platform that is particularly prone to these vulnerabilities. We used our prototype with phpBB, a well-known bulletin-board application, to validate our method. CSSE detected and prevented all the SQL injection attacks we could reproduce and incurred only reasonable run-time overhead.", "paper_title": "Defending against injection attacks through context-sensitive string evaluation", "paper_id": "WOS:000236107800007"}