{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "lenses"}, {"score": 0.004677711903652145, "phrase": "bidirectional_programming_languages"}, {"score": 0.004620093797504386, "phrase": "practical_approach"}, {"score": 0.004563182153397349, "phrase": "view_update_problem"}, {"score": 0.004201202199968683, "phrase": "function_mapping_sources"}, {"score": 0.004047781270412204, "phrase": "updated_sources"}, {"score": 0.0039323225960857956, "phrase": "sufficient_attention"}, {"score": 0.0038518661517315533, "phrase": "bidirectional_languages"}, {"score": 0.0034306925765832633, "phrase": "corresponding_pieces"}, {"score": 0.0033883824438527316, "phrase": "underlying_source"}, {"score": 0.003171358146412577, "phrase": "existing_bidirectional_languages"}, {"score": 0.0030554300179552415, "phrase": "practical_interest"}, {"score": 0.003005271873916767, "phrase": "specific_strategies"}, {"score": 0.0029194625087935345, "phrase": "underlying_theory"}, {"score": 0.0028596699752849682, "phrase": "general_framework"}, {"score": 0.0027665315772006575, "phrase": "arbitrary_heuristics"}, {"score": 0.0026543514413663893, "phrase": "lenses_with\"chunks"}, {"score": 0.002621590601574503, "phrase": "reorderable_pieces"}, {"score": 0.002373615081691254, "phrase": "essential_constraints"}, {"score": 0.0022773309395419427, "phrase": "core_language"}, {"score": 0.0021669202726173928, "phrase": "\"alignment_combinators"}, {"score": 0.0021049977753042253, "phrase": "alignment_strategies"}], "paper_keywords": ["Languages", " Design", " Theory", " Bidirectionallanguages", " lenses", " alignment", " view update problem", " Boomerang"], "paper_abstract": "Bidirectional programming languages are a practical approach to the view update problem. Programs in these languages, called lenses, define both a view and an update policy-i.e.,every prog ram can be read as a function mapping sources to views as well as one mapping updated views back to updated sources. One thorny issue that has not received sufficient attention in the design of bidirectional languages is alignment. In general, to correctly propagate an update to a view,a lens need stomatch up the pieces of the view with the corresponding pieces of the underlying source, even after data has been inserted, deleted, or reordered. However, existing bidirectional languages either support only simple strategies that fail on many examples of practical interest, orelse propose specific strategies that are baked deeply into the underlying theory. We propose a general framework of matching lenses that parame terizeslenses over arbitrary heuristics for calculating alignments. We enrich the types of lenses with\"chunks\" identifying reorderable pieces of the source and view that should be re-aligned after an update, and we formulate behavior all aws that capture essential constraints on the handling of chunks. We develop a core language of matching lenses for strings, together with a set of \"alignment combinators\" that implement a variety of alignment strategies", "paper_title": "Matching Lenses: Alignment and View Update", "paper_id": "WOS:000286594300018"}