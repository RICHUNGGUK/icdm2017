{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ms_pac-man"}, {"score": 0.004521566043596533, "phrase": "monte_carlo_tree_search"}, {"score": 0.003987134270704407, "phrase": "mcts"}, {"score": 0.0037778009042360758, "phrase": "almost_real-time_decision_making"}, {"score": 0.0035794251590584563, "phrase": "natural_end_state"}, {"score": 0.00333097896868937, "phrase": "monte_carlo"}, {"score": 0.0031845067058084583, "phrase": "five_player_tree_representation"}, {"score": 0.003044455555031339, "phrase": "limited_tree_search_depth"}, {"score": 0.002543043781904587, "phrase": "previous_work"}, {"score": 0.002282667669149476, "phrase": "excellent_scores"}, {"score": 0.0022218413146898887, "phrase": "previous_non-mcts_opponent"}], "paper_keywords": ["Max-n", " Monte Carlo", " Monte Carlo tree search (MCTS)", " Pac-Man"], "paper_abstract": "We present an application of Monte Carlo tree search (MCTS) for the game of Ms Pac-Man. Contrary to most applications of MCTS to date, Ms Pac-Man requires almost real-time decision making and does not have a natural end state. We approached the problem by performing Monte Carlo tree searches on a five player tree representation of the game with limited tree search depth. We performed a number of experiments using both the MCTS game agents (for pacman and ghosts) and agents used in previous work (for ghosts). Performance-wise, our approach gets excellent scores, outperforming previous non-MCTS opponent approaches to the game by up to two orders of magnitude.", "paper_title": "Fast Approximate Max-n Monte Carlo Tree Search for Ms Pac-Man", "paper_id": "WOS:000295473500005"}