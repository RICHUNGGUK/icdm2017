{"auto_keywords": [{"score": 0.04836250326740319, "phrase": "approximate_local_triangle_counting"}, {"score": 0.03524633097949294, "phrase": "local_number"}, {"score": 0.00481495049065317, "phrase": "large-scale_local_triangle_counting"}, {"score": 0.004505771917193233, "phrase": "large_graph"}, {"score": 0.0038676325043529524, "phrase": "global_number"}, {"score": 0.0036553070575015344, "phrase": "first_contribution"}, {"score": 0.0035124618008923504, "phrase": "efficiency_issues"}, {"score": 0.003477628306017313, "phrase": "massive_graphs"}, {"score": 0.003408990700300338, "phrase": "directed_case"}, {"score": 0.003286642683771891, "phrase": "related_local_clustering_coefficient"}, {"score": 0.003014576010931602, "phrase": "large-scale_web_graphs"}, {"score": 0.0029452441730331617, "phrase": "useful_features"}, {"score": 0.002925728709297618, "phrase": "content_quality_assessment"}, {"score": 0.00290634217991954, "phrase": "social_networks"}, {"score": 0.0026745503978347143, "phrase": "min-wise_independent_permutations"}, {"score": 0.002561401523136952, "phrase": "semi-streaming_fashion"}, {"score": 0.0025024660249697408, "phrase": "main_memory"}, {"score": 0.002453027723284009, "phrase": "sequential_scans"}, {"score": 0.0023806911724834024, "phrase": "first_algorithm"}, {"score": 0.002287542098172185, "phrase": "external_memory"}, {"score": 0.0022423402528961144, "phrase": "second_algorithm"}, {"score": 0.002190729937598138, "phrase": "theoretical_analysis"}, {"score": 0.0021617722702730407, "phrase": "experimental_results"}, {"score": 0.0021474369836979048, "phrase": "large_graphs"}, {"score": 0.0021190503591688834, "phrase": "practical_efficiency"}], "paper_keywords": ["Clustering coefficient", " massive-graph computing", " Web computing", " social networks"], "paper_abstract": "In this article, we study the problem of approximate local triangle counting in large graphs. Namely, given a large graph G = (V, E) we want to estimate as accurately as possible the number of triangles incident to every node v. V in the graph. We consider the question both for undirected and directed graphs. The problem of computing the global number of triangles in a graph has been considered before, but to our knowledge this is the first contribution that addresses the problem of approximate local triangle counting with a focus on the efficiency issues arising in massive graphs and that also considers the directed case. The distribution of the local number of triangles and the related local clustering coefficient can be used in many interesting applications. For example, we show that the measures we compute can help detect the presence of spamming activity in large-scale Web graphs, as well as to provide useful features for content quality assessment in social networks. For computing the local number of triangles (undirected and directed), we propose two approximation algorithms, which are based on the idea of min-wise independent permutations [Broder et al. 1998]. Our algorithms operate in a semi-streaming fashion, using O(|V|) space in main memory and performing O(log |V|) sequential scans over the edges of the graph. The first algorithm we describe in this article also uses O(|E|) space of external memory during computation, while the second algorithm uses only main memory. We present the theoretical analysis as well as experimental results on large graphs, demonstrating the practical efficiency of our approach.", "paper_title": "Efficient Algorithms for Large-Scale Local Triangle Counting", "paper_id": "WOS:000208169400004"}