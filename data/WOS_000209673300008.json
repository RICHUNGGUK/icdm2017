{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "concurrent_benchmarks"}, {"score": 0.004427366754240748, "phrase": "property-driven_benchmark_generation"}, {"score": 0.004044645056447888, "phrase": "multi-process_promela_code"}, {"score": 0.003992729692096799, "phrase": "known_and_tailored_complexity"}, {"score": 0.0036710872046569532, "phrase": "verification_tools"}, {"score": 0.003623949225126944, "phrase": "concurrent_software_systems"}, {"score": 0.003310447652300423, "phrase": "corresponding_property_profiles"}, {"score": 0.0030832123624449028, "phrase": "predefined_set"}, {"score": 0.0030435998319355883, "phrase": "ltl_properties"}, {"score": 0.0029658905122290536, "phrase": "pdbg_tool_chain"}, {"score": 0.0027801631944598206, "phrase": "intricate_structural_elements"}, {"score": 0.0026570998719084153, "phrase": "local_and_therefore_controllable_level"}, {"score": 0.002380381895973937, "phrase": "global_level"}, {"score": 0.0023497779149212737, "phrase": "property-preserving_transformations"}, {"score": 0.0021883400011393564, "phrase": "scalable_approach"}, {"score": 0.0021049977753042253, "phrase": "concrete_examples"}], "paper_keywords": ["Benchmark generation", " Concurrency", " Interference", " Synchronization", " LTL synthesis", " Model checking", " Property-oriented expansion", " Path condition extraction", " Theorem proving", " SAT solving", " Code motion"], "paper_abstract": "In this paper, we show how to extend our approach to property-driven benchmark generation (PDBG) to support concurrency in the benchmarks: we systematically produce multi-process PROMELA code of known and tailored complexity that can then serve as benchmark for the evaluation of analysis and verification tools for concurrent software systems. Key to this extension is the way in which we control the corresponding property profiles, i.e., the statements about the validity of a predefined set of LTL properties, along the PDBG tool chain. It is based on the idea to introduce intricate structural elements like synchronization and interference at a local and therefore controllable level, only concerning a few parallel components, and subsequently obfuscating the locality of these structures at the global level via property-preserving transformations of both the system components and the properties. This leads to a scalable approach which we illustrate along some concrete examples.", "paper_title": "Tailored generation of concurrent benchmarks", "paper_id": "WOS:000209673300008"}