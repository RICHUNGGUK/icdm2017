{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_marching"}, {"score": 0.003778253716938922, "phrase": "new_path_planning_algorithm"}, {"score": 0.0034975571855450373, "phrase": "set_methods"}, {"score": 0.003459191419478298, "phrase": "computational_costs"}, {"score": 0.0033651019362620866, "phrase": "level_set_methods"}, {"score": 0.0031150035760241705, "phrase": "level_set_function"}, {"score": 0.0030135741897058844, "phrase": "optimal_path"}, {"score": 0.0029641011108505785, "phrase": "gradient_descent"}, {"score": 0.002789528662623221, "phrase": "formal_analysis"}, {"score": 0.0022122603123901114, "phrase": "simulation_examples"}, {"score": 0.0021049977753042253, "phrase": "proposed_method"}], "paper_keywords": ["Path planning", " Autonomous vehicle", " Autonomous navigation"], "paper_abstract": "We investigate path planning algorithms that are based on level set methods for applications in which the environment is static, but where an a priori map is inaccurate and the environment is sensed in real-time. Our principal contribution is not a new path planning algorithm, but rather a formal analysis of path planning algorithms based on level set methods. Computational costs when planning paths with level set methods are due to the creation of the level set function. Once the level set function has been computed, the optimal path is simply gradient descent down the level set function. Our approach rests on the formal analysis of how value of the level set function changes when the changes in the environment are detected. We show that in many practical cases, only a small domain of the level set function needs to be re-computed when the environment changes. Simulation examples are presented to validate the effectiveness of the proposed method.", "paper_title": "Fast Path Re-planning Based on Fast Marching and Level Sets", "paper_id": "WOS:000322882100004"}