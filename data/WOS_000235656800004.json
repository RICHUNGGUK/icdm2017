{"auto_keywords": [{"score": 0.04497972432687123, "phrase": "weak_normalization"}, {"score": 0.00481495049065317, "phrase": "normalization_algorithm"}, {"score": 0.004392565073466714, "phrase": "constructive_proof"}, {"score": 0.004174064076143015, "phrase": "simply-typed_lambda-calculus"}, {"score": 0.0032668821950788533, "phrase": "tait's_strong_computability_predicates"}, {"score": 0.0030414140732789186, "phrase": "strong_eliminations"}, {"score": 0.002860546817196148, "phrase": "dependent_types"}, {"score": 0.0027741761880779535, "phrase": "extracted_program"}, {"score": 0.002331641523873951, "phrase": "simply-typed_higher-order_logic"}], "paper_keywords": [""], "paper_abstract": "We present a formalization of a constructive proof of weak normalization for the simply-typed lambda-calculus in the theorem prover Isabelle/HOL, and show how a program can be extracted from it. Unlike many other proofs of weak normalization based on Tait's strong computability predicates, which require a logic supporting strong eliminations and can give rise to dependent types in the extracted program, our formalization requires only relatively simple proof principles. Thus, the program obtained from this proof is typable in simply-typed higher-order logic as implemented in Isabelle/HOL, and a proof of its correctness can automatically be derived within the system.", "paper_title": "Extracting a normalization algorithm in Isabelle/HOL", "paper_id": "WOS:000235656800004"}