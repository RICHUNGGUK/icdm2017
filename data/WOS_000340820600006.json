{"auto_keywords": [{"score": 0.049593242225692294, "phrase": "software_product_lines"}, {"score": 0.02898452830624612, "phrase": "product-line_analyses"}, {"score": 0.00481495049065317, "phrase": "analysis_strategies"}, {"score": 0.004717723626157272, "phrase": "software-product-line_engineering"}, {"score": 0.004347972379250724, "phrase": "software_product_line"}, {"score": 0.004238452771031322, "phrase": "software_products"}, {"score": 0.004152818376630929, "phrase": "common_set"}, {"score": 0.004027586827290042, "phrase": "traditional_analysis_techniques"}, {"score": 0.003946195919158241, "phrase": "type_checking"}, {"score": 0.003906116922372891, "phrase": "model_checking"}, {"score": 0.0038467574225322086, "phrase": "theorem_proving"}, {"score": 0.0034733518170738517, "phrase": "product_line"}, {"score": 0.0033173234105492895, "phrase": "potentially_exponential_number"}, {"score": 0.0032836104153151973, "phrase": "valid_feature_combinations"}, {"score": 0.0031521392193570846, "phrase": "analysis_techniques"}, {"score": 0.003088384809415812, "phrase": "distinguishing_properties"}, {"score": 0.0029196116767956273, "phrase": "feature-related_code"}, {"score": 0.002831462722290752, "phrase": "variability_information"}, {"score": 0.0027600360731762997, "phrase": "emerging_field"}, {"score": 0.00235560370536971, "phrase": "systematic_research"}, {"score": 0.002137537770621167, "phrase": "research_agenda"}, {"score": 0.0021049977753042253, "phrase": "future_research"}], "paper_keywords": ["Design", " Experimentation", " Reliability", " Theory", " Verification", " Product-line analysis", " software product line", " program family", " software analysis", " type checking", " static analysis", " model checking", " theorem proving"], "paper_abstract": "Software-product-line engineering has gained considerable momentum in recent years, both in industry and in academia. A software product line is a family of software products that share a common set of features. Software product lines challenge traditional analysis techniques, such as type checking, model checking, and theorem proving, in their quest of ensuring correctness and reliability of software. Simply creating and analyzing all products of a product line is usually not feasible, due to the potentially exponential number of valid feature combinations. Recently, researchers began to develop analysis techniques that take the distinguishing properties of software product lines into account, for example, by checking feature-related code in isolation or by exploiting variability information during analysis. The emerging field of product-line analyses is both broad and diverse, so it is difficult for researchers and practitioners to understand their similarities and differences. We propose a classification of product-line analyses to enable systematic research and application. Based on our insights with classifying and comparing a corpus of 123 research articles, we develop a research agenda to guide future research on product-line analyses.", "paper_title": "A Classification and Survey of Analysis Strategies for Software Product Lines", "paper_id": "WOS:000340820600006"}