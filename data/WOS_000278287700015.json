{"auto_keywords": [{"score": 0.03515704688034637, "phrase": "software_metadata"}, {"score": 0.00481495049065317, "phrase": "memory_behaviour"}, {"score": 0.004780030485538593, "phrase": "dynamic_applications"}, {"score": 0.004710944813540894, "phrase": "new_embedded_systems"}, {"score": 0.004625983640628956, "phrase": "software_applications"}, {"score": 0.004592427776766215, "phrase": "specific_hardware_blocks"}, {"score": 0.004460609967916904, "phrase": "relevant_input_data_instances"}, {"score": 0.004238929161010395, "phrase": "input_data_samples"}, {"score": 0.003912533878506028, "phrase": "representative_samples"}, {"score": 0.003870009704443373, "phrase": "actual_input_data"}, {"score": 0.0038279459368975965, "phrase": "important_aspect"}, {"score": 0.0037179893149669845, "phrase": "dynamic_data_type_level"}, {"score": 0.0036375920152538783, "phrase": "designers_choice"}, {"score": 0.0035719191251314918, "phrase": "data_types"}, {"score": 0.0034066464009965425, "phrase": "analysis_phase"}, {"score": 0.003064913196639932, "phrase": "data-dependent_applications"}, {"score": 0.0029123920023263446, "phrase": "engineering_process"}, {"score": 0.002737327060030586, "phrase": "dynamically_allocated_data_types"}, {"score": 0.002707541142254756, "phrase": "embedded_systems"}, {"score": 0.0025170626402362633, "phrase": "appropriate_techniques"}, {"score": 0.002444668348634501, "phrase": "original_application"}, {"score": 0.0023830293456003765, "phrase": "complete_case_study"}, {"score": 0.0023485057246680854, "phrase": "extracted_software_metadata"}, {"score": 0.0023229408675543147, "phrase": "overall_improvements"}, {"score": 0.002167355210897559, "phrase": "static_techniques"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software metadata", " Profiling", " Analysis", " Embedded systems", " Dynamic data types", " Optimization"], "paper_abstract": "Development of new embedded systems requires tuning of the software applications to specific hardware blocks and platforms as well as to the relevant input data instances. The behaviour of these applications heavily relies on the nature of the input data samples, thus making them strongly data-dependent. For this reason, it is necessary to extensively profile them with representative samples of the actual input data. An important aspect of this profiling is done at the dynamic data type level, which actually steers the designers choice of implementation of these data types. The behaviour of the applications is then characterized, through an analysis phase, as a collection of software metadata that can be used to optimize the system as a whole. In this paper we propose to represent the behaviour of data-dependent applications to enable optimizations, rather than to analyze their structure or to define the engineering process behind them. Moreover, we specifically limit ourselves to the scope of applications dominated by dynamically allocated data types running on embedded systems. We characterize the software metadata that these optimizations require, and we present a methodology, as well as appropriate techniques, to obtain this information from the original application. The optimizations performed on a complete case study, utilizing the extracted software metadata, achieve overall improvements of up to 42% in the number of cycles spent accessing memory when compared to code optimized only with the static techniques applied by GNU G++. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Software metadata: Systematic characterization of the memory behaviour of dynamic applications", "paper_id": "WOS:000278287700015"}