{"auto_keywords": [{"score": 0.04702287152380103, "phrase": "minitasking"}, {"score": 0.00481495049065317, "phrase": "multiple_queries"}, {"score": 0.004757643419056999, "phrase": "deep_memory_hierarchy"}, {"score": 0.004589763483242731, "phrase": "complementary_novel_idea"}, {"score": 0.004322967486451877, "phrase": "cache_misses"}, {"score": 0.004220624516321415, "phrase": "data_temporal_locality"}, {"score": 0.0041703614123283165, "phrase": "multiple_concurrent_queries"}, {"score": 0.0038348235692738783, "phrase": "decision_support_systems"}, {"score": 0.0036553070575015344, "phrase": "significant_amount"}, {"score": 0.0035473867669654174, "phrase": "different_concurrent_queries"}, {"score": 0.0033409791799749403, "phrase": "temporal_locality"}, {"score": 0.0032814236411444022, "phrase": "query_execution"}, {"score": 0.0029280552768499056, "phrase": "experimental_results"}, {"score": 0.0028586409810976367, "phrase": "concurrent_tpc-h_query_workloads"}, {"score": 0.0024901940672239784, "phrase": "execution_time"}, {"score": 0.002169132543304096, "phrase": "tpc-h_throughput_test_workload"}, {"score": 0.0021049977753042253, "phrase": "end_performance"}], "paper_keywords": ["cache performance", " temporal locality", " mini-task scheduling", " concurrent queries"], "paper_abstract": "This paper proposes a complementary novel idea, called MiniTasking to further reduce the number of cache misses by improving the data temporal locality for multiple concurrent queries. Our idea is based on the observation that, in many workloads such as decision support systems (DSS), there is usually significant amount of data sharing among different concurrent queries. MiniTasking exploits such data sharing to improve data temporal locality by scheduling query execution at three levels: query level batching, operator level grouping and mini-task level scheduling. The experimental results with various types of concurrent TPC-H query workloads show that, with the traditional N-ary Storage Model (NSM) layout, MiniTasking significantly reduces the L2 cache misses by up to 83%, and thereby achieves 24% reduction in execution time. With the Partition Attributes Across (PAX) layout, MiniTasking further reduces the cache misses by 65% and the execution time by 9%. For the TPC-H throughput test workload, MiniTasking improves the end performance up to 20%.", "paper_title": "Efficient execution of multiple queries on deep memory hierarchy", "paper_id": "WOS:000245374700013"}