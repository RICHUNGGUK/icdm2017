{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "logic_programming"}, {"score": 0.004695900553353526, "phrase": "software_testing"}, {"score": 0.004248294537944227, "phrase": "software_industry"}, {"score": 0.0031056437850836326, "phrase": "systematic_approach"}, {"score": 0.003028727936200845, "phrase": "dynamic_testing"}, {"score": 0.0028805474861014722, "phrase": "concrete_and_symbolic_execution"}, {"score": 0.0025730425700096365, "phrase": "full_path_coverage"}, {"score": 0.002327310963701377, "phrase": "basic_properties"}, {"score": 0.0021049977753042253, "phrase": "prototype_implementation"}], "paper_keywords": ["Symbolic execution", " logic programming", " testing"], "paper_abstract": "Software testing is one of the most popular validation techniques in the software industry. Surprisingly, we can only find a few approaches to testing in the context of logic programming. In this paper, we introduce a systematic approach for dynamic testing that combines both concrete and symbolic execution. Our approach is fully automatic and guarantees full path coverage when it terminates. We prove some basic properties of our technique and illustrate its practical usefulness through a prototype implementation.", "paper_title": "Concolic testing in logic programming", "paper_id": "WOS:000367692200021"}