{"auto_keywords": [{"score": 0.027507999683207576, "phrase": "multiscale_representation"}, {"score": 0.00481495049065317, "phrase": "dynamic_path_planning_with_low_worst-case_complexity"}, {"score": 0.0046007229963284345, "phrase": "vlsi_design"}, {"score": 0.004568617813032014, "phrase": "robot_navigation"}, {"score": 0.004380616732302083, "phrase": "dynamic_shortest_path-planning_problems"}, {"score": 0.0042895249439546725, "phrase": "single_endpoint_pair"}, {"score": 0.004215057618794356, "phrase": "edge_weights"}, {"score": 0.0038078492247427594, "phrase": "incremental_search_algorithm"}, {"score": 0.003625537203803235, "phrase": "numerical_experiments"}, {"score": 0.0033919477901198716, "phrase": "vertex_expansions"}, {"score": 0.00329813918116714, "phrase": "edge_weight_value"}, {"score": 0.0030532878377173885, "phrase": "relatively_small_number"}, {"score": 0.0028564621282167685, "phrase": "optimal_path"}, {"score": 0.002662932198158107, "phrase": "baseline_lpa"}, {"score": 0.002616628760616317, "phrase": "efficient_use"}, {"score": 0.002473786357109046, "phrase": "changed_edges"}, {"score": 0.002422249273477746, "phrase": "priority_queue"}, {"score": 0.0022032718573953922, "phrase": "computational_complexity"}, {"score": 0.0021725557397878565, "phrase": "worst_case"}, {"score": 0.0021049977753042253, "phrase": "aforementioned_claims"}], "paper_keywords": ["A* algorithm", " beamlet-like structure", " dynamic programming", " LPA* algorithm", " path-planning", " quadtrees"], "paper_abstract": "Path-planning (equivalently, pathfinding) problems are fundamental in many applications, such as transportation, VLSI design, robot navigation, and many more. In this paper, we consider dynamic shortest path-planning problems on a graph with a single endpoint pair and with potentially changing edge weights over time. Several algorithms exist in the literature that solve this problem, notably among them the Lifelong Planning A* (LPA*) algorithm. The LPA* algorithm is an incremental search algorithm that replans the path when there are changes in the environment. In numerical experiments, however, it was observed that the performance of LPA* is sensitive in the number of vertex expansions required to update the graph when an edge weight value changes or when a vertex is added or deleted. Although, inmost cases, the classical LPA* requires a relatively small number of updates, in some other cases the amount of work required by the LPA* to find the optimal path can be overwhelming. To address this issue, in this paper, we propose an extension of the baseline LPA* algorithm, by making efficient use of a multiscale representation of the environment. This multiscale representation allows one to quickly localize the changed edges, and subsequently update the priority queue efficiently. This incremental multiscale LPA* (m-LPA* for short) algorithm leads to an improvement both in terms of robustness and computational complexity-in the worst case-when compared to the classical LPA*. Numerical experiments validate the aforementioned claims.", "paper_title": "Incremental Multi-Scale Search Algorithm for Dynamic Path Planning With Low Worst-Case Complexity", "paper_id": "WOS:000297342100010"}