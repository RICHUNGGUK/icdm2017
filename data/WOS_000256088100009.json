{"auto_keywords": [{"score": 0.04658611255447667, "phrase": "task_graphs"}, {"score": 0.00481495049065317, "phrase": "dynamic_task_graphs"}, {"score": 0.00476323161560059, "phrase": "selective_duplication"}, {"score": 0.004661446705304497, "phrase": "memory_and_time_constraints"}, {"score": 0.004512814529823301, "phrase": "hybrid_scheduling_methodology"}, {"score": 0.00441635700580562, "phrase": "multiprocessor_embedded_systems"}, {"score": 0.004345363360869553, "phrase": "proposed_methodology"}, {"score": 0.004007083686875716, "phrase": "conditional_tasks"}, {"score": 0.003675120438902734, "phrase": "three-phase_strategy"}, {"score": 0.0035965032173588753, "phrase": "task_nodes"}, {"score": 0.003158776195052182, "phrase": "possible_rescheduling"}, {"score": 0.0030414140732789186, "phrase": "code_memory_constraints"}, {"score": 0.0028968858148006823, "phrase": "runtime_scheduling_algorithm"}, {"score": 0.0028502479839354637, "phrase": "list_scheduling"}, {"score": 0.002789226820897593, "phrase": "actual_dynamics"}, {"score": 0.002685558057339722, "phrase": "current_time"}, {"score": 0.0025717770066591076, "phrase": "better_schedule_length"}, {"score": 0.002489608163017922, "phrase": "previous_techniques"}, {"score": 0.00235843888868088, "phrase": "low_overhead"}, {"score": 0.0022830706430588482, "phrase": "existing_online_techniques"}, {"score": 0.002222102813520549, "phrase": "model_parameters"}], "paper_keywords": ["multiprocessor scheduling", " conditional task graphs", " unpredictable tasks", " static and online scheduling", " hybrid scheduling", " node duplication"], "paper_abstract": "This paper presents a hybrid scheduling methodology for task graphs to multiprocessor embedded systems. The proposed methodology is designed for task graphs that are dynamic in nature due to the presence of conditional tasks and tasks whose execution times are unpredictable but bounded. We have presented the methodology as a three-phase strategy, in which task nodes are mapped to the processors in the first (static mapping) phase. In the second (selective duplication) phase, some critical nodes are identified and duplicated for possible rescheduling at runtime, depending on the code memory constraints of the processors. The third (online) phase is a runtime scheduling algorithm that performs list scheduling based on the actual dynamics of the schedule up to the current time. We show that this technique provides better schedule length (up to 20 percent) compared to previous techniques, which are predominantly static in nature, with low overhead and a complexity comparable with existing online techniques. The effects of model parameters like the number of processors, memory, and various task graph parameters on performance are investigated in this paper.", "paper_title": "Hybrid scheduling of dynamic task graphs with selective duplication for multiprocessors under memory and time constraints", "paper_id": "WOS:000256088100009"}