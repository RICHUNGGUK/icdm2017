{"auto_keywords": [{"score": 0.047667240890459914, "phrase": "explicit_substitutions"}, {"score": 0.004253618550301311, "phrase": "large_class"}, {"score": 0.0041666157975446564, "phrase": "higher-order_languages"}, {"score": 0.003680587852807675, "phrase": "functional_frameworks"}, {"score": 0.0034951469511975346, "phrase": "first_part"}, {"score": 0.0032176163279340206, "phrase": "named_variable-style_notation"}, {"score": 0.002755104031926742, "phrase": "whole_set"}, {"score": 0.0026986685585382347, "phrase": "useful_properties"}, {"score": 0.0026161698049580804, "phrase": "full_composition"}, {"score": 0.0025100713447593773, "phrase": "one-step_beta-reduction"}, {"score": 0.002408265305704217, "phrase": "beta-strong_normalisation"}, {"score": 0.002286781334850213, "phrase": "typed_terms"}, {"score": 0.0021049977753042253, "phrase": "related_calculi"}], "paper_keywords": ["operational semantics", " functional languages", " lambda calculus"], "paper_abstract": "Many different systems with explicit substitutions have been proposed to implement a large class of higher-order languages. Motivations and challenges that guided the development of such calculi in functional frameworks are surveyed in the first part of this paper. Then, very simple technology in named variable-style notation is used to establish a theory of explicit substitutions for the lambda-calculus which enjoys a whole set of useful properties such as full composition, simulation of one-step beta-reduction, preservation of beta-strong normalisation, strong normalisation of typed terms and confluence on metaterms. Normalisation of related calculi is also discussed.", "paper_title": "A THEORY OF EXPLICIT SUBSTITUTIONS WITH SAFE AND FULL COMPOSITION", "paper_id": "WOS:000271784800001"}