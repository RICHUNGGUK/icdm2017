{"auto_keywords": [{"score": 0.023974283232871745, "phrase": "cdcl"}, {"score": 0.00481495049065317, "phrase": "floating-point_logic"}, {"score": 0.004762202897268383, "phrase": "abstract_conflict_driven_clause_learning"}, {"score": 0.0046328364646343375, "phrase": "bit-precise_decision_procedure"}, {"score": 0.004506968388996092, "phrase": "floating-point_arithmetic"}, {"score": 0.004081385289516914, "phrase": "modern_sat"}, {"score": 0.004014452814186653, "phrase": "lattice-based_abstractions"}, {"score": 0.0039269071382230444, "phrase": "floating-point_intervals"}, {"score": 0.0033465923623290034, "phrase": "current_floating-point"}, {"score": 0.0032916702592724217, "phrase": "interval_reasoning"}, {"score": 0.0030808211830129304, "phrase": "conflict_analysis_algorithm"}, {"score": 0.0027741761880779535, "phrase": "assertion_checking_problems"}, {"score": 0.0026838147966444783, "phrase": "program_variables"}, {"score": 0.0025820967615278073, "phrase": "bit-vector_encoding_approach"}, {"score": 0.0021049977753042253, "phrase": "abstraction-based_smt_solvers"}], "paper_keywords": ["Decision procedures", " Floating-point logic", " Abstract interpretation", " SMT"], "paper_abstract": "We present a bit-precise decision procedure for the theory of floating-point arithmetic. The core of our approach is a non-trivial, lattice-theoretic generalisation of the conflict-driven clause learning algorithm in modern SAT solvers to lattice-based abstractions. We use floating-point intervals to reason about the ranges of variables, which allows us to directly handle arithmetic and is more efficient than encoding a formula as a bit-vector as in current floating-point solvers. Interval reasoning alone is incomplete, and we obtain completeness by developing a conflict analysis algorithm that reasons natively about intervals. We have implemented this method in the MATHSAT5 SMT solver and evaluated it on assertion checking problems that bound the values of program variables. Our new technique is faster than a bit-vector encoding approach on 80 % of the benchmarks, and is faster by one order of magnitude or more on 60 % of the benchmarks. The generalisation of CDCL we propose is widely applicable and can be used to derive abstraction-based SMT solvers for other theories.", "paper_title": "Deciding floating-point logic with abstract conflict driven clause learning", "paper_id": "WOS:000343210700005"}