{"auto_keywords": [{"score": 0.02612623765547044, "phrase": "stipple_images"}, {"score": 0.00481495049065317, "phrase": "example-based_approach"}, {"score": 0.004733347359490221, "phrase": "stipple_illustrations"}, {"score": 0.004600389726895716, "phrase": "scale-dependent_results"}, {"score": 0.0044967055264893184, "phrase": "intended_spatial_output_size"}, {"score": 0.004223415145617665, "phrase": "grayscale_process"}, {"score": 0.004081385289516914, "phrase": "on-screen_output"}, {"score": 0.0039216854691927865, "phrase": "medium_tonal_ranges"}, {"score": 0.003683213029483699, "phrase": "high_spatial_and_low_color_resolution"}, {"score": 0.003419943984098415, "phrase": "high-level_illustration_considerations"}, {"score": 0.0031754329320561317, "phrase": "stipple_artist"}, {"score": 0.0026302120935562568, "phrase": "fast_method"}, {"score": 0.0023463203637929466, "phrase": "basic_algorithm"}, {"score": 0.002254357921422124, "phrase": "large_images"}, {"score": 0.002216054733102974, "phrase": "extended_cpu_method"}, {"score": 0.0021659920594094407, "phrase": "finer_control"}, {"score": 0.0021049977753042253, "phrase": "interactive_rates"}], "paper_keywords": ["Stippling", " High-quality rendering", " Scale-dependent NPR", " Example-based techniques", " Illustrative visualization"], "paper_abstract": "We present an example-based approach to synthesizing stipple illustrations for static 2D images that produces scale-dependent results appropriate for an intended spatial output size and resolution. We show how treating stippling as a grayscale process allows us to both produce on-screen output and to achieve stipple merging at medium tonal ranges. At the same time we can also produce images with high spatial and low color resolution for print reproduction. In addition, we discuss how to incorporate high-level illustration considerations into the stippling process based on discussions with and observations of a stipple artist. Also, certain features such as edges can be extracted and used to control the placement of dots to improve the result. The implementation of the technique is based on a fast method for distributing dots using halftoning and can be used to create stipple images interactively. We describe both a CPU implementation of the basic algorithm that creates stipple images in real-time for large images and an extended CPU method that allows a finer control of the output at interactive rates. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Scale-dependent and example-based grayscale stippling", "paper_id": "WOS:000287621900016"}