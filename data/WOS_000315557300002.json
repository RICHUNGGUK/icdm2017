{"auto_keywords": [{"score": 0.036807805429807376, "phrase": "dynamic_number"}, {"score": 0.00481495049065317, "phrase": "petascale_global_optimization"}, {"score": 0.003798654583736764, "phrase": "serious_problem"}, {"score": 0.00334144503360907, "phrase": "total_amount"}, {"score": 0.0029391032882625473, "phrase": "massively_parallel_global_optimization_code"}, {"score": 0.0026523079380037706, "phrase": "modified_version"}, {"score": 0.002568542343945288, "phrase": "memory_use"}, {"score": 0.0025195550121331345, "phrase": "new_processes"}, {"score": 0.0024399717841513354, "phrase": "available_memory"}, {"score": 0.0023178219772486868, "phrase": "primary_design_challenges"}, {"score": 0.002244596395352896, "phrase": "performance_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Petascale", " Message passing interface (MPI)", " Dynamic process count", " Global optimization"], "paper_abstract": "There are many challenges that need to be met before efficient and reliable computation at the petascale is possible. Many scientific and engineering codes running at the petascale are likely to be memory intensive, which makes thrashing a serious problem for many petascale applications. One way to overcome this challenge is to use a dynamic number of processes, so that the total amount of memory available for the computation can be increased on demand. This paper describes modifications made to the massively parallel global optimization code pVTdirect in order to allow for a dynamic number of processes. In particular, the modified version of the code monitors memory use and spawns new processes if the amount of available memory is determined to be insufficient. The primary design challenges are discussed, and performance results are presented and analyzed. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Adjusting process count on demand for petascale global optimization", "paper_id": "WOS:000315557300002"}