{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "high-level_synthesis"}, {"score": 0.00471811808206897, "phrase": "formal_method"}, {"score": 0.004120289747942224, "phrase": "finite_state_machine"}, {"score": 0.0040648241451154525, "phrase": "data_path"}, {"score": 0.003272083495778595, "phrase": "equivalent_finite_path_segments"}, {"score": 0.0027429789393362703, "phrase": "path_segments"}, {"score": 0.002687702958515561, "phrase": "original_behavior"}, {"score": 0.0021337783230121286, "phrase": "experimental_results"}], "paper_keywords": ["equivalence checking", " finite state machine with data path (FSMD) models", " formal verification", " high-level synthesis (HLS)", " scheduling"], "paper_abstract": "A formal method for checking equivalence between a given behavioral specification prior to scheduling and the one produced by the scheduler is described. Finite state machine with data path (FSMD) models have been used to represent both the behaviors. The method consists of introducing cutpoints in one FSMD, visualizing its computations as concatenation of paths from cutpoints to cutpoints, and identifying equivalent finite path segments in the other FSMD; the process is then repeated with the FSMDs interchanged. Unlike many other reported techniques, this method is strong enough to work when path segments in the original behavior are merged, a common feature of scheduling. It is also capable of verifying several arithmetic transformations and many code-motion techniques employed during scheduling. Correctness and complexity of the method have been dealt with. Experimental results for several high-level synthesis benchmarks demonstrate the effectiveness of the method.", "paper_title": "An equivalence-checking method for scheduling verification in high-level synthesis", "paper_id": "WOS:000253840500013"}