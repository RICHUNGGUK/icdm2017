{"auto_keywords": [{"score": 0.022841033938614086, "phrase": "java"}, {"score": 0.007255266659392863, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "non-invasive_application-level_checkpointing"}, {"score": 0.004553510708976456, "phrase": "self-healing_applications"}, {"score": 0.004502943680955863, "phrase": "distributed_and_dynamic_computing_environments"}, {"score": 0.004258234216486091, "phrase": "alc"}, {"score": 0.00389427992231721, "phrase": "main_goal"}, {"score": 0.0038530101472370724, "phrase": "dsl"}, {"score": 0.0037449033166879874, "phrase": "non-invasive_reengineering"}, {"score": 0.0036214184763804034, "phrase": "application-level_checkpointing"}, {"score": 0.0034824716857663114, "phrase": "domain-specific_language"}, {"score": 0.0032747835779400212, "phrase": "perfect_means"}, {"score": 0.0028635111041882956, "phrase": "actual_checkpointing_code"}, {"score": 0.002815864555488112, "phrase": "existing_application"}, {"score": 0.002677616534005393, "phrase": "generated_checkpointing_code"}, {"score": 0.0025037596405075866, "phrase": "checkpointing_code"}, {"score": 0.0024211009463218484, "phrase": "slight_modifications"}, {"score": 0.0022386642196006567, "phrase": "alc_mechanism"}], "paper_keywords": ["Fault-tolerance", " Application-level checkpointing", " Domain-specific language"], "paper_abstract": "One of the key elements required for writing self-healing applications for distributed and dynamic computing environments is checkpointing. Checkpointing is a mechanism by which an application is made resilient to failures by storing its state periodically to the disk. The main goal of this research is to enable non-invasive reengineering of existing applications to insert Application-Level Checkpointing (ALC) mechanism. The Domain-Specific Language (DSL) developed in this research serves as a perfect means towards this end and is used for obtaining the ALC-specifications from the end-users. These specifications are used for generating and inserting the actual checkpointing code into the existing application. The performance of the application having the generated checkpointing code is comparable to the performance of the application in which the checkpointing code was inserted manually. With slight modifications, the DSL developed in this research can be used for specifying the ALC mechanism in several base languages (e.g., C/C++, Java, and FORTRAN).", "paper_title": "A technique for non-invasive application-level checkpointing", "paper_id": "WOS:000293392300001"}