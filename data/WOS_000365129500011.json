{"auto_keywords": [{"score": 0.04355159126538614, "phrase": "ast"}, {"score": 0.04274496381216917, "phrase": "origin_source_code"}, {"score": 0.040410500224664386, "phrase": "layout_information"}, {"score": 0.00481495049065317, "phrase": "format-preserving_printing"}, {"score": 0.004768378525561471, "phrase": "syntax-directed_definitions"}, {"score": 0.004676575291629554, "phrase": "source_codes"}, {"score": 0.004542158659382197, "phrase": "program_analysis"}, {"score": 0.004411588377842043, "phrase": "software_engineering"}, {"score": 0.004202223763361474, "phrase": "abstract_syntax_tree"}, {"score": 0.003983334573043943, "phrase": "critical_limitation"}, {"score": 0.0036493838225192883, "phrase": "poor_readability"}, {"score": 0.003459191419478298, "phrase": "bidirectional_transformation"}, {"score": 0.003018468582368033, "phrase": "concrete_syntax_tree"}, {"score": 0.002778682854371595, "phrase": "new_method"}, {"score": 0.00259554612218815, "phrase": "reasonable_cst"}, {"score": 0.0025085610829736144, "phrase": "cst"}, {"score": 0.0024009599499416443, "phrase": "bx"}, {"score": 0.002135995282374723, "phrase": "xml_language"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["format-preserving", " bidirectional transformation", " pretty printing", " unparsing", " tree matching"], "paper_abstract": "Transformations between source codes, such as refactorings and program analysis, are frequently used in software engineering. Typically, transformations are effectively implemented using an abstract syntax tree (AST) on the origin source code. However, a critical limitation of ASTs is the loss of layout information such as whitespace and comments, which can result in poor readability. To overcome this shortcoming, this paper proposes a bidirectional transformation (BX) method that maintains consistency in the layout between the origin and transformed. First, a section of origin source code will be translated to a concrete syntax tree (CST) that includes layout information. Second, to make the BX practical, a new method is constructed that matches an AST with its respective CST. Finally, to get a reasonable CST, a method to amend the CST is also provided. We prove that the BX is well-behaved, which implies that it satisfies both the PutGet and GetPut laws. Furthermore, we illustrate the correctness of the methodology by treating XML language as a case study.", "paper_title": "Constructing format-preserving printing from syntax-directed definitions", "paper_id": "WOS:000365129500011"}