{"auto_keywords": [{"score": 0.03466056219981683, "phrase": "cache_reuse"}, {"score": 0.011904443367864318, "phrase": "gateway_processor"}, {"score": 0.011094928298107909, "phrase": "different_sensors"}, {"score": 0.00999697610403412, "phrase": "code_layout"}, {"score": 0.0048150316515051805, "phrase": "cache"}, {"score": 0.004741304218199546, "phrase": "ban_applications"}, {"score": 0.004712160586409063, "phrase": "body-area_sensor_network"}, {"score": 0.004683195250422422, "phrase": "ban-based_health_monitoring"}, {"score": 0.004611554879923759, "phrase": "popular_alternative"}, {"score": 0.004583205112737672, "phrase": "traditional_wired_bio-monitoring_techniques"}, {"score": 0.0044991925146184025, "phrase": "continuous_processing"}, {"score": 0.004471530397729526, "phrase": "large_volumes"}, {"score": 0.004335739075947899, "phrase": "power_consumption"}, {"score": 0.00430907756010007, "phrase": "computation_bandwidth"}, {"score": 0.004243135792625782, "phrase": "serious_constraints"}, {"score": 0.004217041305117441, "phrase": "sensor_network_platforms"}, {"score": 0.004101579688745222, "phrase": "recent_interest"}, {"score": 0.004076352180903171, "phrase": "design_methods"}, {"score": 0.00405127920820053, "phrase": "modeling_and_software_analysis_techniques"}, {"score": 0.0038442670949832523, "phrase": "appropriate_optimization"}, {"score": 0.0037621210719690594, "phrase": "communication_gateway"}, {"score": 0.003727453167164546, "phrase": "wireless_ban"}, {"score": 0.0037045182324752404, "phrase": "accurate_modeling"}, {"score": 0.0036703791815812328, "phrase": "microarchitectural_details"}, {"score": 0.003591935475356008, "phrase": "significantly_better_resource_usage"}, {"score": 0.0034294219963679857, "phrase": "optimal_order"}, {"score": 0.0031551446537729107, "phrase": "different_memory_layouts"}, {"score": 0.0030972277169783067, "phrase": "different_sensor_data"}, {"score": 0.0030686679245324837, "phrase": "joint_optimization"}, {"score": 0.0029027394930867902, "phrase": "code_cache_reuse"}, {"score": 0.00284065508239492, "phrase": "difficult_combinatorial_optimization_problem"}, {"score": 0.002771321260809228, "phrase": "sampling_order"}, {"score": 0.0026458370516131255, "phrase": "different_code_layouts"}, {"score": 0.0025338369486914364, "phrase": "near-optimal_solutions"}, {"score": 0.0024643470263733674, "phrase": "sensor_sampling_order"}, {"score": 0.0024116163689723354, "phrase": "faint_fall_detection_application"}, {"score": 0.0023819914954155905, "phrase": "geriatric_care_domain"}, {"score": 0.002316656229510391, "phrase": "smart_sensors"}, {"score": 0.002295277579105177, "phrase": "physiological_and_physical_gait_signals"}, {"score": 0.002239225269052105, "phrase": "underlying_processor"}, {"score": 0.002164376714559963, "phrase": "sampling_frequency"}, {"score": 0.0021180510180905296, "phrase": "higher_reliability"}, {"score": 0.0021049977753042253, "phrase": "better_response_time"}], "paper_keywords": ["Health monitoring", " Body-area sensor networks", " Timing analysis", " Cache modeling"], "paper_abstract": "Body-area sensor network or BAN-based health monitoring is increasingly becoming a popular alternative to traditional wired bio-monitoring techniques. However, most biomonitoring applications need continuous processing of large volumes of data, as a result of which both power consumption and computation bandwidth turn out to be serious constraints for sensor network platforms. This has resulted in a lot of recent interest in design methods, modeling and software analysis techniques specifically targeted towards BANs and applications running on them. In this paper we show that appropriate optimization of the application running on the communication gateway of a wireless BAN and accurate modeling of the microarchitectural details of the gateway processor can lead to significantly better resource usage and power savings. In particular, we propose a method for deriving the optimal order in which the different sensors feeding the gateway processor should be sampled, to maximize cache reuse. In addition, we also investigate the effects on cache reuse of different memory layouts of the code processing the different sensor data. The joint optimization of code layout and the order in which the different sensors should be sampled-in order to maximize code cache reuse-turns out to be a difficult combinatorial optimization problem. But our experiments show that optimizing the sampling order of the sensors has a much larger influence on cache reuse, compared to the effects that different code layouts have. Based on this, we also propose a heuristic that obtains near-optimal solutions in jointly optimizing both code layout as well the sensor sampling order. Our case study using a faint fall detection application-from the geriatric care domain-which is fed by a number of smart sensors to detect physiological and physical gait signals of a patient show very attractive power consumption in the underlying processor. Alternatively, our method can be used to improve the sampling frequency of the sensors, leading to higher reliability and better response time of the application.", "paper_title": "Cache-aware optimization of BAN applications", "paper_id": "WOS:000270736200002"}