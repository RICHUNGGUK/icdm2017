{"auto_keywords": [{"score": 0.030476766528944144, "phrase": "pt"}, {"score": 0.008545051351802252, "phrase": "hybmig"}, {"score": 0.00826984067135129, "phrase": "ms"}, {"score": 0.00481495049065317, "phrase": "dynamic_plan"}, {"score": 0.0047472380621488616, "phrase": "continuous_queries"}, {"score": 0.004680473391946691, "phrase": "data_stream_environments"}, {"score": 0.004614643339546038, "phrase": "initial_plan"}, {"score": 0.004549734943142138, "phrase": "long-running_query"}, {"score": 0.004339867166576126, "phrase": "data_characteristics"}, {"score": 0.004198722289738563, "phrase": "query_optimizer"}, {"score": 0.004043003243656031, "phrase": "current_statistics"}, {"score": 0.003986103192038901, "phrase": "online_transition"}, {"score": 0.0038746849003761024, "phrase": "new_plan"}, {"score": 0.003643807817480753, "phrase": "effective_technique"}, {"score": 0.0036095259108028105, "phrase": "dynamic_plan_migration"}, {"score": 0.003410479630045025, "phrase": "cpu_overhead"}, {"score": 0.0031174595932694036, "phrase": "steady_output_rate"}, {"score": 0.002987557906013826, "phrase": "moving_states"}, {"score": 0.002782938683493689, "phrase": "serious_shortcomings"}, {"score": 0.0023806459272452353, "phrase": "second_step"}, {"score": 0.0022492129111567824, "phrase": "general_problem"}, {"score": 0.002145233716114996, "phrase": "old_plans"}, {"score": 0.0021049977753042253, "phrase": "black_boxes"}], "paper_keywords": ["query processing"], "paper_abstract": "In data stream environments, the initial plan of a long-running query may gradually become inefficient due to changes of the data characteristics. In this case, the query optimizer will generate a more efficient plan based on the current statistics. The online transition from the old to the new plan is called dynamic plan migration. In addition to correctness, an effective technique for dynamic plan migration should achieve the following objectives: 1) minimize the memory and CPU overhead of the migration, 2) reduce the duration of the transition, and 3) maintain a steady output rate. The only known solutions for this problem are the moving states (MS) and parallel track (PT) strategies, which have some serious shortcomings related to the above objectives. Motivated by these shortcomings, we first propose HybMig, which combines the merits of MS and PT and outperforms both in every aspect. As a second step, we extend PT, MS, and HybMig to the general problem of migration, where both the new and the old plans are treated as black boxes.", "paper_title": "HybMig: A hybrid approach to dynamic plan migration for continuous queries", "paper_id": "WOS:000243504100005"}