{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "python"}, {"score": 0.004779406424192843, "phrase": "accelerate_embedded_soc_design"}, {"score": 0.004674333455266527, "phrase": "systems_biology"}, {"score": 0.004487635647709636, "phrase": "popular_python"}, {"score": 0.0044052452943364314, "phrase": "design_productivity"}, {"score": 0.004372712391262538, "phrase": "embedded_system"}, {"score": 0.004213601332868765, "phrase": "\"glue\"_software"}, {"score": 0.004060256280654948, "phrase": "vhdl_components"}, {"score": 0.00403026082093352, "phrase": "programmable_processor_soft_ip_cores"}, {"score": 0.003840598580753804, "phrase": "hardware_components"}, {"score": 0.0037700424606538856, "phrase": "synthesizable_vhdl"}, {"score": 0.0036870776660851007, "phrase": "top-level_structural_descriptions"}, {"score": 0.0036598289615980837, "phrase": "processor-centric_socs"}, {"score": 0.0034875380341306468, "phrase": "user's_c_code"}, {"score": 0.003448940584469061, "phrase": "instruction_set_processor_core"}, {"score": 0.0033981387193790353, "phrase": "specific_tcl_scripts"}, {"score": 0.003335683866508191, "phrase": "design_project"}, {"score": 0.00328654473734697, "phrase": "processor's_description"}, {"score": 0.0031786037839399055, "phrase": "synthesizable_top-level_python_description"}, {"score": 0.0030856268625708695, "phrase": "hardware_abstraction_layer"}, {"score": 0.0030628110818969353, "phrase": "hal"}, {"score": 0.002995361424576051, "phrase": "user_applications"}, {"score": 0.002951220859491642, "phrase": "host_pc"}, {"score": 0.0028969560940141233, "phrase": "soc's_resources"}, {"score": 0.0028648759706752162, "phrase": "fpga._syspy's_design_capabilities"}, {"score": 0.0028017745468000587, "phrase": "developed_hal_software_api"}, {"score": 0.002689666606553487, "phrase": "efficient_soc's_performance"}, {"score": 0.002630414143385786, "phrase": "syspy's_design_flow"}, {"score": 0.0025064622665903645, "phrase": "computational_systems_biology"}, {"score": 0.0024786956187352327, "phrase": "designed_soc"}, {"score": 0.002370663905320869, "phrase": "programmable_soft_processor_core"}, {"score": 0.0023184226291364097, "phrase": "high_performance"}, {"score": 0.0022927343007881846, "phrase": "application_specific_core"}, {"score": 0.0022338938462817867, "phrase": "stochastic_behavior"}, {"score": 0.0022173607419126817, "phrase": "large_size"}, {"score": 0.0022091400304857043, "phrase": "biomolecular_reaction_networks"}, {"score": 0.002128587147609539, "phrase": "complex_biological_systems"}, {"score": 0.0021049977753042253, "phrase": "multiple_interacting_pathways"}], "paper_keywords": ["Design", " Algorithms", " Performance", " SoC", " scripting languages", " Python", " hw/sw co-design", " VHDL", " FPGA", " SysPy", " Systems Biology", " Biomolecular reaction networks", " Gillespie's Stochastic Simulation Algorithm"], "paper_abstract": "We present SysPy (System Python) a tool which exploits the strengths of the popular Python scripting language to boost design productivity of embedded System on Chips for FPGAs. SysPy acts as a \"glue\" software between mature HDLs, ready-to-use VHDL components and programmable processor soft IP cores. SysPy can be used to: (i) automatically translate hardware components described in Python into synthesizable VHDL, (ii) capture top-level structural descriptions of processor-centric SoCs in Python, (iii) implement all the steps necessary to compile the user's C code for an instruction set processor core and generate processor specific Tcl scripts that import to the design project all the necessary HDL files of the processor's description and instantiate/connect the core to other blocks in a synthesizable top-level Python description. Moreover, we have developed a Hardware Abstraction Layer (HAL) in Python which allows user applications running in a host PC to utilize effortlessly the SoC's resources in the FPGA. SysPy's design capabilities, when complemented with the developed HAL software API, provide all the necessary tools for hw/sw partitioning and iterative design for efficient SoC's performance tuning. We demonstrate how SysPy's design flow and functionalities can be used by building a processor-centric embedded SoC for computational systems biology. The designed SoC, implemented using a Xilinx Virtex-5 FPGA, combines the flexibility of a programmable soft processor core (Leon3) with the high performance of an application specific core to simulate flexibly and efficiently the stochastic behavior of large size biomolecular reaction networks. Such networks are essential for studying the dynamics of complex biological systems consisting of multiple interacting pathways.", "paper_title": "Python to Accelerate Embedded SoC Design: A Case Study for Systems Biology", "paper_id": "WOS:000346219200011"}