{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scientific_software"}, {"score": 0.004619295212985837, "phrase": "important_role"}, {"score": 0.004587464246981363, "phrase": "critical_decision_making"}, {"score": 0.0045088388224419, "phrase": "weather_predictions"}, {"score": 0.004462308985053246, "phrase": "climate_models"}, {"score": 0.0044351475309132, "phrase": "oracle_problems"}, {"score": 0.0043555900164106934, "phrase": "research_publications"}, {"score": 0.00426960064827532, "phrase": "cultural_differences"}, {"score": 0.004135387221172467, "phrase": "software_faults"}, {"score": 0.004106877044437756, "phrase": "systematic_testing"}, {"score": 0.003912712778141845, "phrase": "specific_challenges"}, {"score": 0.0036764506727132253, "phrase": "systematic_literature_survey"}, {"score": 0.0036133826040506798, "phrase": "relevant_literature"}, {"score": 0.003554274163784872, "phrase": "special_challenges"}, {"score": 0.0035268943257252224, "phrase": "relevant_information"}, {"score": 0.0034333577105672202, "phrase": "software_engineers"}, {"score": 0.003360057874429478, "phrase": "scientific_software_fall"}, {"score": 0.002986907667028281, "phrase": "software_engineering_community"}, {"score": 0.0028554143163813947, "phrase": "inseparable_entities"}, {"score": 0.0026735459686033627, "phrase": "unsolved_challenges"}, {"score": 0.0026459054525234706, "phrase": "software_engineering_researchers"}, {"score": 0.002460240519198386, "phrase": "scientist_developers"}, {"score": 0.0023275553629639395, "phrase": "existing_techniques"}, {"score": 0.0023034836169432233, "phrase": "code_clone_detection"}, {"score": 0.0022560827223539934, "phrase": "testing_process"}, {"score": 0.002149231173009159, "phrase": "testing_techniques"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Scientific software", " Software testing", " Systematic literature review", " Software quality"], "paper_abstract": "Context: Scientific software plays an important role in critical decision making, for example making weather predictions based on climate models, and computation of evidence for research publications. Recently, scientists have had to retract publications due to errors caused by software faults. Systematic testing can identify such faults in code. Objective: This study aims to identify specific challenges, proposed solutions, and unsolved problems faced when testing scientific software. Method: We conducted a systematic literature survey to identify and analyze relevant literature. We identified 62 studies that provided relevant information about testing scientific software. Results: We found that challenges faced when testing scientific software fall into two main categories: (1) testing challenges that occur due to characteristics of scientific software such as oracle problems and (2) testing challenges that occur due to cultural differences between scientists and the software engineering community such as viewing the code and the model that it implements as inseparable entities. In addition, we identified methods to potentially overcome these challenges and their limitations. Finally we describe unsolved challenges and how software engineering researchers and practitioners can help to overcome them. Conclusions: Scientific software presents special challenges for testing. Specifically, cultural differences between scientist developers and software engineers, along with the characteristics of the scientific software make testing more difficult. Existing techniques such as code clone detection can help to improve the testing process. Software engineers should consider special challenges posed by scientific software such as oracle problems when developing testing techniques. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Testing scientific software: A systematic literature review", "paper_id": "WOS:000340850700004"}