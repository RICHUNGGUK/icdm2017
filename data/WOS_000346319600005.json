{"auto_keywords": [{"score": 0.045912844607109565, "phrase": "type_information"}, {"score": 0.013371122358425701, "phrase": "method_signatures"}, {"score": 0.00481495049065317, "phrase": "java_type_obfuscation"}, {"score": 0.00460125407969429, "phrase": "bytecoded_.net"}, {"score": 0.004518567445500934, "phrase": "java"}, {"score": 0.004317848984770719, "phrase": "encoded_type_hierarchies"}, {"score": 0.0041637779492720295, "phrase": "field_declarations"}, {"score": 0.003942877273973902, "phrase": "bytecode_verification"}, {"score": 0.00334780964309978, "phrase": "class_hierarchy"}, {"score": 0.003141364320497748, "phrase": "type_hierarchy"}, {"score": 0.002975773395413937, "phrase": "interface"}, {"score": 0.0028944757265206332, "phrase": "object_factory_insertion"}, {"score": 0.0026188490199688013, "phrase": "creation_sites"}, {"score": 0.0024349853033241663, "phrase": "prototype_tool"}, {"score": 0.002391067964886602, "phrase": "java_bytecode"}, {"score": 0.002326669201839705, "phrase": "real-life_programs"}, {"score": 0.0022640009579466924, "phrase": "dacapo_benchmark_suite"}, {"score": 0.0021049977753042253, "phrase": "human_and_tool_analysis"}], "paper_keywords": ["Java bytecode", " obfuscation", " class hierarchy", " type information", " points-to sets", " understandability", " performance"], "paper_abstract": "Bytecoded .Net and Java programs reveal type information through encoded type hierarchies, casts, field declarations and method signatures. This facilitates bytecode verification, but it also helps reverse engineers. To obfuscate the type information, we combine three transformations. Class hierarchy flattening removes as much of the type hierarchy from programs as possible. Interface merging and object factory insertion further remove type information from casts, method signatures, and object creation sites. We evaluate these techniques with a prototype tool for Java bytecode. On real-life programs from the DaCapo benchmark suite, we demonstrate that our approach effectively hinders human and tool analysis with limited overhead.", "paper_title": "Pushing Java Type Obfuscation to the Limit", "paper_id": "WOS:000346319600005"}