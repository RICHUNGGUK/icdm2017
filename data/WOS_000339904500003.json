{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "sparql"}, {"score": 0.004600870784042767, "phrase": "efficient_processing"}, {"score": 0.004531637625717547, "phrase": "sparql_queries"}, {"score": 0.0044634416051962545, "phrase": "rdf_datasets"}, {"score": 0.004363058588000252, "phrase": "proposed_techniques"}, {"score": 0.004200724305692705, "phrase": "gstore_system"}, {"score": 0.004013843843250455, "phrase": "uniform_and_scalable_manner"}, {"score": 0.0038062581748678245, "phrase": "aggregate_operators"}, {"score": 0.003748937184382714, "phrase": "dynamic_rdf_datasets"}, {"score": 0.003501452436803395, "phrase": "rdf_data"}, {"score": 0.0034226302212225206, "phrase": "large_graph"}, {"score": 0.0032951702142329357, "phrase": "sparql_query"}, {"score": 0.0032209766681045365, "phrase": "query_graph"}, {"score": 0.0031010029460927864, "phrase": "query_answering_problem"}, {"score": 0.002985484575498061, "phrase": "subgraph_matching_problem"}, {"score": 0.002896167001212006, "phrase": "efficient_and_scalable_query_processing"}, {"score": 0.0027048247303526583, "phrase": "effective_pruning_rules"}, {"score": 0.0026640466056415298, "phrase": "efficient_search_algorithms"}, {"score": 0.0024504843466435487, "phrase": "aggregation_queries"}, {"score": 0.0023412849215629986, "phrase": "effective_maintenance_algorithm"}, {"score": 0.002288519595829552, "phrase": "online_updates"}, {"score": 0.002254003531073337, "phrase": "rdf_repositories"}, {"score": 0.0022200068884960836, "phrase": "extensive_experiments"}], "paper_keywords": ["RDF", " SPARQL", " Graph database", " Graph matching", " Aggregate query"], "paper_abstract": "We address efficient processing of SPARQL queries over RDF datasets. The proposed techniques, incorporated into the gStore system, handle, in a uniform and scalable manner, SPARQL queries with wildcards and aggregate operators over dynamic RDF datasets. Our approach is graph based. We store RDF data as a large graph and also represent a SPARQL query as a query graph. Thus, the query answering problem is converted into a subgraph matching problem. To achieve efficient and scalable query processing, we develop an index, together with effective pruning rules and efficient search algorithms. We propose techniques that use this infrastructure to answer aggregation queries. We also propose an effective maintenance algorithm to handle online updates over RDF repositories. Extensive experiments confirm the efficiency and effectiveness of our solutions.", "paper_title": "gStore: a graph-based SPARQL query engine", "paper_id": "WOS:000339904500003"}