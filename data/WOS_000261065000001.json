{"auto_keywords": [{"score": 0.03018967079524336, "phrase": "training_data"}, {"score": 0.00481495049065317, "phrase": "basic_block_instruction_scheduling"}, {"score": 0.004664352260912174, "phrase": "important_step"}, {"score": 0.004518442937844318, "phrase": "object_code"}, {"score": 0.004353948887538618, "phrase": "fundamental_problem"}, {"score": 0.004262643556463565, "phrase": "instruction_scheduling"}, {"score": 0.004151188559520802, "phrase": "minimum_length_schedule"}, {"score": 0.004085713541752114, "phrase": "basic_block"}, {"score": 0.004021267064832957, "phrase": "straight-line_sequence"}, {"score": 0.003916098498242888, "phrase": "single_entry_point"}, {"score": 0.00385431710959668, "phrase": "single_exit_point-subject"}, {"score": 0.0033402088717816446, "phrase": "potentially_time-consuming_process"}, {"score": 0.0031342307827666675, "phrase": "good_heuristics"}, {"score": 0.0030684249587688826, "phrase": "machine_learning"}, {"score": 0.0029722900280316216, "phrase": "recently_proposed_optimal_basic_block_scheduler"}, {"score": 0.0028037753646260937, "phrase": "decision_tree_learning_algorithm"}, {"score": 0.0027015344365793016, "phrase": "simple_heuristic"}, {"score": 0.0026168641536413978, "phrase": "automatically_constructed_decision_tree_heuristic"}, {"score": 0.002548331088496964, "phrase": "popular_critical-path_heuristic"}, {"score": 0.0025080963970078147, "phrase": "spec"}, {"score": 0.0024423826953133844, "phrase": "benchmark_suite"}, {"score": 0.0024037949232582462, "phrase": "decision_tree_heuristic"}, {"score": 0.0023408288327263316, "phrase": "basic_blocks"}, {"score": 0.002208035721125305, "phrase": "critical-path_heuristic"}, {"score": 0.0021616339773325704, "phrase": "improved_performance_guarantees"}, {"score": 0.0021049977753042253, "phrase": "worst-case_factor"}], "paper_keywords": ["Instruction scheduling", " Machine learning", " List scheduling heuristics"], "paper_abstract": "Instruction scheduling is an important step for improving the performance of object code produced by a compiler. A fundamental problem that arises in instruction scheduling is to find a minimum length schedule for a basic block-a straight-line sequence of code with a single entry point and a single exit point-subject to precedence, latency, and resource constraints. Solving the problem exactly is known to be difficult, and most compilers use a greedy list scheduling algorithm coupled with a heuristic. The heuristic is usually hand-crafted, a potentially time-consuming process. In contrast, we present a study on automatically learning good heuristics using techniques from machine learning. In our study, a recently proposed optimal basic block scheduler was used to generate the machine learning training data. A decision tree learning algorithm was then used to induce a simple heuristic from the training data. The automatically constructed decision tree heuristic was compared against a popular critical-path heuristic on the SPEC 2000 benchmarks. On this benchmark suite, the decision tree heuristic reduced the number of basic blocks that were not optimally scheduled by up to 55% compared to the critical-path heuristic, and gave improved performance guarantees in terms of the worst-case factor from optimality.", "paper_title": "Learning heuristics for basic block instruction scheduling", "paper_id": "WOS:000261065000001"}