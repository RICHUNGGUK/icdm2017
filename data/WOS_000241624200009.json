{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "transactional_web_services"}, {"score": 0.004642604455537883, "phrase": "composite_services"}, {"score": 0.003916098498242888, "phrase": "administrative_boundaries"}, {"score": 0.0035965032173588753, "phrase": "wide_variety"}, {"score": 0.0031845067058084613, "phrase": "fault-tolerant_web_services_orchestration"}, {"score": 0.0029244418026475832, "phrase": "exception_handling"}, {"score": 0.0027854565462509095, "phrase": "atomic_execution"}, {"score": 0.002685558057339722, "phrase": "scalable_commit_protocol"}, {"score": 0.0024963543716522087, "phrase": "heterogeneous_transactional_web_services"}, {"score": 0.002264607102799332, "phrase": "recovery_algorithm"}, {"score": 0.0021049977753042253, "phrase": "reliable_service_orchestration"}], "paper_keywords": [""], "paper_abstract": "As composite services are often long-running, loosely coupled, and cross application and administrative boundaries, they are susceptible to a wide variety of failures. This paper presents a solution for fault-tolerant web services orchestration by using relaxed atomic execution and exception handling. To achieve atomic execution, a scalable commit protocol is proposed, which allows heterogeneous transactional web services to participate in a composition. A recovery algorithm is given to ensure a reliable service orchestration in the presence of failures.", "paper_title": "Fault-tolerant orchestration of transactional Web services", "paper_id": "WOS:000241624200009"}