{"auto_keywords": [{"score": 0.04963913874714364, "phrase": "concurrency_errors"}, {"score": 0.03401790463741915, "phrase": "redundant_events"}, {"score": 0.029597415979366777, "phrase": "bifer"}, {"score": 0.00481495049065317, "phrase": "scalable_prediction"}, {"score": 0.0047268728636719725, "phrase": "predictive_trace_analysis"}, {"score": 0.004492841495994535, "phrase": "concurrent_programs"}, {"score": 0.004410629943506433, "phrase": "powerful_capability_support"}, {"score": 0.004270347498153512, "phrase": "previous_program_execution"}, {"score": 0.004231089088705995, "phrase": "existing_pta_techniques"}, {"score": 0.004172874316207784, "phrase": "considerable_challenges"}, {"score": 0.004096493540086106, "phrase": "large_traces"}, {"score": 0.004040123129261597, "phrase": "numerous_critical_events"}, {"score": 0.003929689573550262, "phrase": "analyzed_trace"}, {"score": 0.0036328561748082138, "phrase": "additional_errors"}, {"score": 0.0035663245542174224, "phrase": "found_candidate_ones"}, {"score": 0.003358368814209542, "phrase": "candidate_ones"}, {"score": 0.0029369970132915456, "phrase": "pta_results"}, {"score": 0.0028172726995962147, "phrase": "biphasic_trace_filter_approach"}, {"score": 0.0026775328564629577, "phrase": "residual_events"}, {"score": 0.0025683581446365165, "phrase": "general_concurrency_errors"}, {"score": 0.002429668083484833, "phrase": "lock_history"}, {"score": 0.0022458849724980904, "phrase": "efficient_filtering"}, {"score": 0.0021945194903838132, "phrase": "prototypical_tool"}, {"score": 0.002164264600379492, "phrase": "java_programs"}, {"score": 0.0021049977753042253, "phrase": "predictive_trace_analysis_framework"}], "paper_keywords": ["predictive trace analysis", " concurrency errors", " scalability"], "paper_abstract": "Predictive trace analysis (PTA), a static trace analysis technique for concurrent programs, can offer powerful capability support for finding concurrency errors unseen in a previous program execution. Existing PTA techniques always face considerable challenges in scaling to large traces which contain numerous critical events. One main reason is that an analyzed trace includes not only redundant memory accessing events and threads that cannot contribute to discovering any additional errors different from the found candidate ones, but also many residual synchronization events which still affect PTA to check whether these candidate ones are feasible or not even after removing the redundant events. Removing them from the trace can significantly improve the scalability of PTA without affecting the quality of the PTA results. In this paper, we propose a biphasic trace filter approach, BIFER in short, to filter these redundant events and residual events for improving the scalability of PTA to expose general concurrency errors. In addition, we design a model which indicates the lock history and the happens-before history of each thread with two kinds of ways to achieve the efficient filtering. We implement a prototypical tool BIFER for Java programs on the basis of a predictive trace analysis framework. Experiments show that BIFER can improve the scalability of PTA during the process of analyzing all of the traces.", "paper_title": "BIFER: a biphasic trace filter approach to scalable prediction of concurrency errors", "paper_id": "WOS:000368588400009"}