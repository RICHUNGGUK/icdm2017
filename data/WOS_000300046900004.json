{"auto_keywords": [{"score": 0.026012088016776437, "phrase": "customized_scheduler"}, {"score": 0.015719716506582538, "phrase": "distributed_applications"}, {"score": 0.004324723240308028, "phrase": "separately_written_applications"}, {"score": 0.004166129325245761, "phrase": "distributed_application"}, {"score": 0.003884212965525665, "phrase": "application-specific_schedulers"}, {"score": 0.0037768417338850274, "phrase": "global_state"}, {"score": 0.003672427620845944, "phrase": "scheduling_decisions"}, {"score": 0.0034884152484429207, "phrase": "catapults"}, {"score": 0.003407839062159497, "phrase": "application-specific_user_level_thread_schedulers"}, {"score": 0.0033447157263095223, "phrase": "domain-specific_language"}, {"score": 0.0032674478600540477, "phrase": "application-specific_user-level_thread_schedulers"}, {"score": 0.003162252895465901, "phrase": "master_schedulers"}, {"score": 0.0030891871245908665, "phrase": "distributed_parts"}, {"score": 0.0028664985822266344, "phrase": "distributed_catapults."}, {"score": 0.0026598200370569433, "phrase": "website_application"}, {"score": 0.002622755848331379, "phrase": "embedded_application"}, {"score": 0.0025862068041567934, "phrase": "load_balancing"}, {"score": 0.002514625755809045, "phrase": "scheduling_goal"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["thread scheduling", " application-specific schedulers", " domain-specific languages"], "paper_abstract": "This paper describes our work to improve the performance of distributed applications. We aim at certain application characteristics such as balancing load, allowing separately written applications to work better together, allowing a distributed application to adapt its behavior in more flexible ways, and so on. Our approach is to write application-specific schedulers, which can access the global state of the application in making scheduling decisions. To achieve this goal, we extended our earlier work on CATAPULTS (Creating And Testing APplication-specific User Level Thread Schedulers), a domain-specific language for creating and testing application-specific user-level thread schedulers, to distributed applications by adding master schedulers for dealing with the distributed parts of applications. This paper presents our design of, experimentation with, and implementation of distributed CATAPULTS. This paper presents several realistic examples to measure the feasibility of this approach, specifically: a website application, an embedded application, and load balancing. Each example has a scheduling goal for which we developed a customized scheduler. We measured the performance with and without the customized scheduler. The customized scheduler for each example was fairly straightforward to develop and each achieved its scheduling goal. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Application-specific thread schedulers for distributed applications", "paper_id": "WOS:000300046900004"}