{"auto_keywords": [{"score": 0.03170410769033944, "phrase": "presented_methodology"}, {"score": 0.00481495049065317, "phrase": "quasi-static_schedules"}, {"score": 0.004750178261675602, "phrase": "rvc-cal_dataflow_programs"}, {"score": 0.0045302298105691615, "phrase": "actor-based_dataflow_language"}, {"score": 0.004262273304740847, "phrase": "rvc-cal_programs"}, {"score": 0.004120289747942224, "phrase": "implementation_languages"}, {"score": 0.003983034747114983, "phrase": "vhdl"}, {"score": 0.003850299959557491, "phrase": "hardware_implementations"}, {"score": 0.0036470559917231218, "phrase": "automatic_discovery"}, {"score": 0.0035494788628319903, "phrase": "rvc-cal"}, {"score": 0.0033167679667625667, "phrase": "computational_burden"}, {"score": 0.003249966782844541, "phrase": "implementable_run-time_system"}, {"score": 0.0032061793819537633, "phrase": "design-time_compilation"}, {"score": 0.0030992666061123533, "phrase": "signal_processing_systems"}, {"score": 0.0029355502535757696, "phrase": "rvc-cal_program"}, {"score": 0.0028184476518849015, "phrase": "quasi-static_behavior"}, {"score": 0.002494361792853833, "phrase": "whole_segment"}, {"score": 0.0024111277643627154, "phrase": "code_generator"}, {"score": 0.0023625233416109917, "phrase": "quasi-statically_scheduled_version"}, {"score": 0.00222249726328354, "phrase": "based_quasi-static_scheduling"}], "paper_keywords": ["Scheduling", " Signal processing", " Dataflow analysis"], "paper_abstract": "RVC-CAL is an actor-based dataflow language that enables concurrent, modular and portable description of signal processing algorithms. RVC-CAL programs can be compiled to implementation languages such as C/C++ and VHDL for producing software or hardware implementations. This paper presents a methodology for automatic discovery of piecewise-deterministic (quasi-static) execution schedules for RVC-CAL program software implementations. Quasi-static scheduling moves computational burden from the implementable run-time system to design-time compilation and thus enables making signal processing systems more efficient. The presented methodology divides the RVC-CAL program into segments and hierarchically detects quasi-static behavior from each segment: first at the level of actors and later at the level of the whole segment. Finally, a code generator creates a quasi-statically scheduled version of the program. The impact of segment based quasi-static scheduling is demonstrated by applying the methodology to several RVC-CAL programs that execute up to 58 % faster after applying the presented methodology.", "paper_title": "Automatic Hierarchical Discovery of Quasi-Static Schedules of RVC-CAL Dataflow Programs", "paper_id": "WOS:000314776600003"}