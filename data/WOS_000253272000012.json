{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "temporal_join_operation"}, {"score": 0.039591220782297654, "phrase": "temporal_join"}, {"score": 0.004529093447865156, "phrase": "efficient_processing"}, {"score": 0.004419538941706716, "phrase": "temporal_relation"}, {"score": 0.004312622975366676, "phrase": "time_intervals"}, {"score": 0.0038389110156920926, "phrase": "matching_tuples"}, {"score": 0.0033961782274326948, "phrase": "efficient_data_structure"}, {"score": 0.0033139366449568565, "phrase": "equivalent_dominance"}, {"score": 0.0031553611552558986, "phrase": "inner_relation"}, {"score": 0.0030601162942933665, "phrase": "nested-loops_temporal_join_algorithm"}, {"score": 0.002878140062594849, "phrase": "inner_relations"}, {"score": 0.0027572166867780275, "phrase": "primary_memory"}, {"score": 0.002453934333239467, "phrase": "operand_relations"}, {"score": 0.0022382002476510573, "phrase": "cluster_scheme"}, {"score": 0.002197379785587054, "phrase": "index_scheme"}, {"score": 0.002157302200451323, "phrase": "efficient_storage"}, {"score": 0.0021049977753042253, "phrase": "direct_access"}], "paper_keywords": ["temporal relation", " temporal join operation", " time interval intersection", " searching problem", " dominance searching problem"], "paper_abstract": "This paper is concerned with the problem of efficient processing of temporal join operation on temporal relation. By mapping time intervals to points in the plane, we first show that the problem of determining the set of all matching tuples of a temporal join is equivalent to the dominance searching problem in the plane. Then, by using an efficient data structure for solving the equivalent dominance searching problem as an index for the inner relation, We Propose a nested-loops temporal join algorithm. For the case where the index for the inner relations too large to fit in the primary memory, We Propose another partition-based temporal join algorithm which does not need any index for the operand relations. Finally, in order to provide more efficient processing of temporal join, we propose a Cluster scheme and an index scheme to support efficient storage of tuples and direct access of matching tuples.", "paper_title": "Using dominance searching to speed up temporal join operation", "paper_id": "WOS:000253272000012"}