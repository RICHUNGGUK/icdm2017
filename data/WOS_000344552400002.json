{"auto_keywords": [{"score": 0.04945174901808068, "phrase": "multi-core_cpus"}, {"score": 0.04837478570324787, "phrase": "solid_and_fluid_vibration_problems"}, {"score": 0.031806748257653894, "phrase": "avx"}, {"score": 0.02548293011153673, "phrase": "openmp"}, {"score": 0.004815011274896442, "phrase": "sse"}, {"score": 0.004783358523770212, "phrase": "avx_instructions"}, {"score": 0.0047211510866981875, "phrase": "gpu"}, {"score": 0.004674402456361649, "phrase": "fdtd_scheme"}, {"score": 0.004552902997092495, "phrase": "unified_treatment"}, {"score": 0.0044199701363984495, "phrase": "finite-difference_time-domain"}, {"score": 0.004234749377133962, "phrase": "scaling_factor"}, {"score": 0.004193115761705178, "phrase": "velocity_fields"}, {"score": 0.004057258742593542, "phrase": "vibration_analysis"}, {"score": 0.004030618026002216, "phrase": "heterogenous_media"}, {"score": 0.0038236703468417215, "phrase": "porous_media"}, {"score": 0.003786062857121556, "phrase": "lossy_solid_materials"}, {"score": 0.0036154453601613982, "phrase": "fdtd"}, {"score": 0.0035680320746705064, "phrase": "spatial_resolutions"}, {"score": 0.0034409976875396596, "phrase": "acoustic_fdtd_problems"}, {"score": 0.0033514495661346524, "phrase": "bigger_grids"}, {"score": 0.0033075503163659055, "phrase": "memory_resources"}, {"score": 0.0032534813517243275, "phrase": "time_simulation_costs"}, {"score": 0.0032321012594688854, "phrase": "fdtd_code"}, {"score": 0.0031067299689394065, "phrase": "modern_parallel_architectures"}, {"score": 0.0030559337757849634, "phrase": "implicit_usage"}, {"score": 0.003025854378927907, "phrase": "advanced_vectorial_extensions"}, {"score": 0.002832731124016696, "phrase": "different_cores"}, {"score": 0.002786402392182809, "phrase": "openmp_directives"}, {"score": 0.0027680831622262027, "phrase": "graphic_processing_units"}, {"score": 0.002634463767377738, "phrase": "parallel_architecture"}, {"score": 0.0025828350676150354, "phrase": "highly-tuned_cpu_scheme"}, {"score": 0.0025405829212597586, "phrase": "relative_speed"}, {"score": 0.0024662589776071864, "phrase": "parallel_versions"}, {"score": 0.002308768837799101, "phrase": "best_sequential_version"}, {"score": 0.0022486192232506388, "phrase": "auto-vectorization_techniques"}, {"score": 0.0022118223311537954, "phrase": "implicitely_vectorial_instructions"}, {"score": 0.0021684583061292264, "phrase": "parallel_approaches"}, {"score": 0.0021470954708827125, "phrase": "massive_parallel_programming_techniques"}, {"score": 0.0021189380172266454, "phrase": "solid-vibration_problems"}, {"score": 0.0021049990292698628, "phrase": "fdtd."}], "paper_keywords": ["FDTD", " GPU", " CPU", " OpenMP", " AVX", " Vibration"], "paper_abstract": "In this work a unified treatment of solid and fluid vibration problems is developed by means of the Finite-Difference Time-Domain (FDTD). The scheme here proposed takes advantage from a scaling factor in the velocity fields that improves the performance of the method and the vibration analysis in heterogenous media. Moreover, the scheme has been extended in order to simulate both the propagation in porous media and the lossy solid materials. In order to accurately reproduce the interaction of fluids and solids in FDTD both time and spatial resolutions must be reduced compared with the set up used in acoustic FDTD problems. This aspect implies the use of bigger grids and hence more time and memory resources. For reducing the time simulation costs, FDTD code has been adapted in order to exploit the resources available in modern parallel architectures. For CPUs the implicit usage of the advanced vectorial extensions (AVX) in multi-core CPUs has been considered. In addition, the computation has been distributed along the different cores available by means of OpenMP directives. Graphic Processing Units have been also considered and the degree of improvement achieved by means of this parallel architecture has been compared with the highly-tuned CPU scheme by means of the relative speed up. The speed up obtained by the parallel versions implemented were up to 3 (AVX and OpenMP) and 40 (CUDA) times faster than the best sequential version for CPU that also uses OpenMP with auto-vectorization techniques, but non includes implicitely vectorial instructions. Results obtained with both parallel approaches demonstrate that massive parallel programming techniques are mandatory in solid-vibration problems with FDTD.", "paper_title": "Performance analysis of SSE and AVX instructions in multi-core CPUs and GPU computing on FDTD scheme for solid and fluid vibration problems", "paper_id": "WOS:000344552400002"}