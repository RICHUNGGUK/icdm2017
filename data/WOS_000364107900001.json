{"auto_keywords": [{"score": 0.05007833083333683, "phrase": "graph_transformation_systems"}, {"score": 0.048750965097065044, "phrase": "agent-oriented_methodologies"}, {"score": 0.044363519465764695, "phrase": "different_agent-oriented_methodologies"}, {"score": 0.037069850759310075, "phrase": "gts"}, {"score": 0.004764435715755502, "phrase": "tropos_diagrams"}, {"score": 0.004583686207645165, "phrase": "software_system_development_industry"}, {"score": 0.004487989502479992, "phrase": "object-oriented_paradigms"}, {"score": 0.004394281902031765, "phrase": "pro_activity"}, {"score": 0.004024351756560517, "phrase": "informal_graphical_diagrams"}, {"score": 0.003968112038249246, "phrase": "automatic_analysis"}, {"score": 0.0038444185258456245, "phrase": "automated_analysis_capabilities"}, {"score": 0.0037773674108196376, "phrase": "high_quality_software_systems"}, {"score": 0.003659597920882104, "phrase": "formal_method"}, {"score": 0.003608437115371213, "phrase": "underlying_semantics"}, {"score": 0.0033749889869455407, "phrase": "different_diagrams"}, {"score": 0.0031234247639701134, "phrase": "tropos"}, {"score": 0.0029109914689364465, "phrase": "existing_object-oriented_methodologies"}, {"score": 0.0027225413530200505, "phrase": "abstract_syntax"}, {"score": 0.002693919110230191, "phrase": "existing_diagrams"}, {"score": 0.002600661525224505, "phrase": "type_graph"}, {"score": 0.0025462598594116373, "phrase": "structural_diagrams"}, {"score": 0.0025106241866273897, "phrase": "host_graphs"}, {"score": 0.00247548600804924, "phrase": "designed_meta-model"}, {"score": 0.00243225236680506, "phrase": "graph_rules"}, {"score": 0.0023315400785212785, "phrase": "detailed_diagrams"}, {"score": 0.002298902547676131, "phrase": "jack_skeleton_codes"}, {"score": 0.0022036996784968793, "phrase": "checking_consistency"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Formal modeling", " Graph transformation systems", " Agent-oriented software engineering", " Tropos"], "paper_abstract": "Today, the agent-oriented methodologies become increasingly attractive to the software system development industry. These methodologies mostly use object-oriented paradigms by concepts like autonomy, pro activity, reactivity, cooperation and alike. There are different agent-oriented methodologies each with different phases and diagrams. However, most of them are using informal graphical diagrams. Hence, automatic analysis of these diagrams may be a challenge. Automated analysis capabilities are necessary to develop high quality software systems. To alleviate this problem, using a formal method to describe the underlying semantics seems necessary. Since graph transformation systems (GTS) are widely used for defining the syntax and semantics of different diagrams and notations formally, in this paper, we are using GTS to formalize agent-oriented methodologies. Among different agent-oriented methodologies, we consider Tropos, because it is basically agent-based, in contrast to the other methodologies which are extensions of the existing object-oriented methodologies. To do so, our proposal consists of four steps: first, we define a meta-model for the abstract syntax of the existing diagrams which are used by the methodology (as a type graph); second, the structural diagrams are defined using host graphs consistent with the designed meta-model and behavioral ones using graph rules. Third, we refine the diagrams automatically to generate some detailed diagrams along with the JACK skeleton codes, and four, we finally verify and validate all the steps through checking consistency, compatibility, correctness and so on. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Using graph transformation systems to formalize Tropos diagrams", "paper_id": "WOS:000364107900001"}