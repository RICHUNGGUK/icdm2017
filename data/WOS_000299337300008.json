{"auto_keywords": [{"score": 0.04173352165758814, "phrase": "scientific_applications"}, {"score": 0.00481495049065317, "phrase": "reconfigurable_functional_unit_interface"}, {"score": 0.004781777766309739, "phrase": "modern_scientific_applications"}, {"score": 0.00425141240073214, "phrase": "single-thread_performance"}, {"score": 0.004178522455099832, "phrase": "highly_parallel_scientific_applications"}, {"score": 0.0041211075804202905, "phrase": "reconfigurable_accelerator"}, {"score": 0.004036455094603843, "phrase": "system_performance"}, {"score": 0.003953534569134559, "phrase": "design_constraints"}, {"score": 0.0038456073694665, "phrase": "reconfigurable_logic"}, {"score": 0.0036510928952124522, "phrase": "computation_model"}, {"score": 0.0036133826040506798, "phrase": "accelerator_architecture"}, {"score": 0.0035637052288771706, "phrase": "accelerator's_communication_interface"}, {"score": 0.0035269074381730453, "phrase": "cpu."}, {"score": 0.0034544053534458093, "phrase": "application_analysis"}, {"score": 0.003360057874429478, "phrase": "reconfigurable_functional_unit"}, {"score": 0.003290986600659723, "phrase": "integer_graphs"}, {"score": 0.0032569835069392924, "phrase": "complex_memory_addresses"}, {"score": 0.0031461489526079236, "phrase": "flexible_multi-instruction_interface_technique"}, {"score": 0.0030180996912267683, "phrase": "large_number"}, {"score": 0.002956037056206635, "phrase": "minor_cpu_datapath_modifications"}, {"score": 0.0029052913631676435, "phrase": "in-depth_examination"}, {"score": 0.002875261849352716, "phrase": "performance_effects"}, {"score": 0.0028554143163813947, "phrase": "different_communication_interfaces"}, {"score": 0.0027108484507501907, "phrase": "sandia's_scientific_applications"}, {"score": 0.0026828233195176155, "phrase": "rfu"}, {"score": 0.002564682311144514, "phrase": "cpu_instructions"}, {"score": 0.00254697318939512, "phrase": "dataflow_graphs"}, {"score": 0.0023518780693181796, "phrase": "proposed_interfaces"}, {"score": 0.0023275553629639395, "phrase": "spec-fp_benchmark_suite"}, {"score": 0.0021867999937268084, "phrase": "sandia_application_performance"}, {"score": 0.0021343846011837204, "phrase": "sandia_demands"}], "paper_keywords": ["Design", " Performance", " Reconfigurable functional units", " communication interfaces", " scientific applications"], "paper_abstract": "Modern scientific applications are large, complex, and highly parallel they are commonly executed on supercomputers with tens of thousands of processors. Yet these applications still commonly require weeks or even months to execute. Thus, single-thread performance remains a concern for highly parallel scientific applications. Adding a reconfigurable accelerator to each CPU could improve system performance; however, scientific applications have design constraints that differ from most application domains commonly accelerated by reconfigurable logic. In this article, we discuss the constraints imposed by scientific applications on the computation model, the accelerator architecture, and the accelerator's communication interface with the CPU. Based on these constraints and application analysis, we have previously proposed adding a Reconfigurable Functional Unit (RFU) to accelerate integer graphs that calculate complex memory addresses. In this work, we now propose a flexible multi-instruction interface technique that allows dataflow graphs implemented on the RFU to access a large number of inputs and outputs with minor CPU datapath modifications. We present an in-depth examination of the performance effects of different communication interfaces that use this technique, and select one that best matches the needs of Sandia's scientific applications. Although RFU execution overall improves performance, we also isolate two key negative performance effects introduced by aggregating CPU instructions into dataflow graphs: delayed issue and graph serialization. Finally, to demonstrate the marketability of an RFU beyond scientific applications, we reanalyze the proposed interfaces using the SPEC-fp benchmark suite. We show that although choosing an interface based on SPEC-fp needs is detrimental to Sandia application performance, choosing an interface based on Sandia demands works well for more general-purpose applications.", "paper_title": "Scientific Application Demands on a Reconfigurable Functional Unit Interface", "paper_id": "WOS:000299337300008"}