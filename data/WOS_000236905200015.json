{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "dynamic_reconfiguration"}, {"score": 0.00443308765153716, "phrase": "core_language"}, {"score": 0.00428892403807229, "phrase": "computational_and_architectural_primitives"}, {"score": 0.003516898780234098, "phrase": "safety_properties"}, {"score": 0.0034024277222012597, "phrase": "component_composition"}, {"score": 0.0031845067058084583, "phrase": "object-based_systems"}, {"score": 0.002789528662623221, "phrase": "typed_entities"}, {"score": 0.0026543514413663893, "phrase": "configuration_scripts"}, {"score": 0.002363806685815014, "phrase": "component_instances"}, {"score": 0.0022492129111567824, "phrase": "static_typing"}, {"score": 0.0021049977753042253, "phrase": "dynamic_type-directed_test"}], "paper_keywords": [""], "paper_abstract": "We define a core language combining computational and architectural primitives, and study how static typing may be used to ensure safety properties of component composition and dynamic reconfiguration in object-based systems. We show how our language can model typed entities analogous of configuration scripts, makefiles, components, and component instances, where static typing combined with a dynamic type-directed test on the structure of objects can enforce consistency of compositions and atomicity of reconfiguration.", "paper_title": "Types for dynamic reconfiguration", "paper_id": "WOS:000236905200015"}