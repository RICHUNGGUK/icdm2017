{"auto_keywords": [{"score": 0.030220846352583857, "phrase": "host_language"}, {"score": 0.00481495049065317, "phrase": "injection_attacks"}, {"score": 0.004762202897268383, "phrase": "syntax_embeddings"}, {"score": 0.00433645229352341, "phrase": "sql_queries"}, {"score": 0.00428892403807229, "phrase": "xml_output"}, {"score": 0.004218602458288531, "phrase": "shell_command_invocations"}, {"score": 0.0040366412779632085, "phrase": "unhygienic_string_manipulation"}, {"score": 0.0038838500580958744, "phrase": "client-supplied_strings"}, {"score": 0.00373682045166829, "phrase": "specially_crafted_input"}, {"score": 0.0036553070575015344, "phrase": "constructed_sentence"}, {"score": 0.003536346954940087, "phrase": "unintended_way"}, {"score": 0.003440166097491567, "phrase": "injection_attack"}, {"score": 0.002996992362027833, "phrase": "guest_languages"}, {"score": 0.002669042572650594, "phrase": "embedded_language"}, {"score": 0.002539689093411356, "phrase": "embedded_sentences"}, {"score": 0.0022741894748181243, "phrase": "relative_ease"}, {"score": 0.0022122603123901114, "phrase": "context-free_host"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Injection attacks", " Security", " Syntax embedding", " Program generation", " Program transformation", " Concrete object syntax"], "paper_abstract": "Software written in one language often needs to construct sentences in another language, such as SQL queries, XML output, or shell command invocations. This is almost always clone using unhygienic string manipulation, the concatenation of constants and client-supplied strings. A client can then supply specially crafted input that causes the constructed sentence to be interpreted in an unintended way, leading to an injection attack. We describe a more natural style of programming that yields code that is impervious to injections by construction. Our approach embeds the grammars of the guest languages (e.g. SQL) into that of the host language (e.g. Java) and automatically generates code that maps the embedded language to constructs in the host language that reconstruct the embedded sentences, addling escaping functions where appropriate. This approach is generic, meaning that it can be applied with relative ease to any combination of context-free host and guest languages. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Preventing injection attacks with syntax embeddings", "paper_id": "WOS:000278243200002"}