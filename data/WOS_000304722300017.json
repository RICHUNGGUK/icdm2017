{"auto_keywords": [{"score": 0.048706186715194215, "phrase": "software_defects"}, {"score": 0.04830148956384734, "phrase": "coding_errors"}, {"score": 0.027196945774462494, "phrase": "defect_densities"}, {"score": 0.00481495049065317, "phrase": "enterprise_resource_planning_software"}, {"score": 0.004542780650208743, "phrase": "disastrous_impact"}, {"score": 0.0044771659114402045, "phrase": "enterprise_application_software_category"}, {"score": 0.0042859292226559535, "phrase": "challenging_problem"}, {"score": 0.0041751141941485555, "phrase": "best_methods"}, {"score": 0.004138813595009761, "phrase": "new_coding_defects"}, {"score": 0.004114787982556699, "phrase": "enterprise_resource_planning"}, {"score": 0.004020066537823032, "phrase": "existing_coding_defects"}, {"score": 0.00398510860837973, "phrase": "large-scale_survey-based_ex-post-facto_study"}, {"score": 0.003859500298805362, "phrase": "sample_code"}, {"score": 0.003837089839193524, "phrase": "real-life_million_lines"}, {"score": 0.0038148090091532933, "phrase": "code_open-source_erp_software"}, {"score": 0.003619993477999133, "phrase": "developing_erp_software"}, {"score": 0.0032312384727026747, "phrase": "hypothetical_framework"}, {"score": 0.0031111332159761344, "phrase": "research_methodology"}, {"score": 0.003048315312818542, "phrase": "data_analysis_methods"}, {"score": 0.0030042210975126616, "phrase": "stated_hypotheses"}, {"score": 0.0029009722548088306, "phrase": "coding-error_based_defects"}, {"score": 0.0028341130433482565, "phrase": "appropriate_programming_language"}, {"score": 0.00278497898719426, "phrase": "manual_and_automated_code_auditing"}, {"score": 0.0027287285441182133, "phrase": "formal_test_case"}, {"score": 0.0025967927629150715, "phrase": "erp_system"}, {"score": 0.002536926192232391, "phrase": "erp_software"}, {"score": 0.0024784363584530976, "phrase": "regression_testing"}, {"score": 0.002442565308205871, "phrase": "resulting_defect_density_statistics"}, {"score": 0.0024072121760839427, "phrase": "epistemological_and_legal_commitments"}, {"score": 0.0023723695202202276, "phrase": "erp_systems"}, {"score": 0.0022184630090454132, "phrase": "coding-error_defects"}, {"score": 0.002186346373382786, "phrase": "future_research"}, {"score": 0.002142161017595363, "phrase": "actual_production_environments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Defect density", " Coding defects", " ERP", " Software development", " Defect reduction", " Code auditing", " Static code analysis", " Software testing"], "paper_abstract": "Software defects due to coding errors continue to plague the industry with disastrous impact, especially in the enterprise application software category. Identifying how much of these defects are specifically due to coding errors is a challenging problem. In this paper, we investigate the best methods for preventing new coding defects in enterprise resource planning (ERP) software, and discovering and fixing existing coding defects. A large-scale survey-based ex-post-facto study coupled with experiments involving static code analysis tools on both sample code and real-life million lines of code open-source ERP software were conducted for such purpose. The survey-based methodology consisted of respondents who had experience developing ERP software. This research sought to determine if software defects could be merely mitigated or totally eliminated, and what supporting policies, procedures and infrastructure were needed to remedy the problem. In this paper, we introduce a hypothetical framework developed to address our research questions, the hypotheses we have conjectured, the research methodology we have used, and the data analysis methods used to validate the stated hypotheses. Our study revealed that: (a) the best way for ERP developers to discover coding-error based defects in existing programs is to choose an appropriate programming language; perform a combination of manual and automated code auditing, static code analysis, and formal test case design, execution and analysis, (b) the most effective ways to mitigate defects in an ERP system is to track the defect densities in the ERP software, fix the defects found, perform regression testing, and update the resulting defect density statistics, and (c) the impact of epistemological and legal commitments on the defect densities of ERP systems is inconclusive. We feel that our proposed model has the potential to vastly improve the quality of ERP and other similar software by reducing the coding-error defects, and recommend that future research aimed at testing the model in actual production environments. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Coding-error based defects in enterprise resource planning software: Prevention, discovery, elimination and mitigation", "paper_id": "WOS:000304722300017"}