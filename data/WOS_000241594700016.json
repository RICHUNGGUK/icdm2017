{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "password-corrective_hashing"}, {"score": 0.004530023871441992, "phrase": "password_authentication_systems"}, {"score": 0.004430629452265786, "phrase": "transposition_and_substitution_errors"}, {"score": 0.004168349927332055, "phrase": "low_false_positive_rates"}, {"score": 0.003987367359722647, "phrase": "arbitrary_string"}, {"score": 0.0036485497734171294, "phrase": "provably_little_loss"}, {"score": 0.0034324073240680213, "phrase": "single_password-corrective_hash_function"}, {"score": 0.003283272764794988, "phrase": "key_property"}, {"score": 0.0032290277960438855, "phrase": "hash_function"}, {"score": 0.003105905142768581, "phrase": "single_data_entry_error"}, {"score": 0.002857605453835429, "phrase": "different_keys"}, {"score": 0.002794802975530612, "phrase": "precise_analytical_formulae"}, {"score": 0.0026732973536990373, "phrase": "corrective_hash_functions"}, {"score": 0.0025713100093065645, "phrase": "parameter_values"}, {"score": 0.002542890176213921, "phrase": "common_classes"}, {"score": 0.0023788319661581696, "phrase": "popular_crack-list"}, {"score": 0.0021885300925245516, "phrase": "user_transposition_errors"}, {"score": 0.002140400526572388, "phrase": "computational_cost"}, {"score": 0.0021049977753042253, "phrase": "crack_attack"}], "paper_keywords": [""], "paper_abstract": "We propose a way to increase the usability of password authentication systems by compensating for transposition and substitution errors. We show how to correct for these errors with low false positive rates (i.e., low probability that an arbitrary string will be accepted as the password for authentication). Thus our techniques increase usability with provably little loss of security. In particular, we propose applying a single password-corrective hash function to each entered password attempt. The key property of the hash function is that two strings differing by a single data entry error be likely to be hashed to the same key, while more substantially differing strings are hashed to different keys. We develop precise analytical formulae for the precision/recall tradeoffs for a variety of corrective hash functions. We evaluate these methods at parameter values reflecting common classes of keys/passwords. Finally, we evaluate these schemes using a popular crack-list (dictionary) of 680,000 common words. We show that we can correct for all user transposition errors while reducing the computational cost of a crack attack by only 13%.", "paper_title": "Improving usability through password-corrective hashing", "paper_id": "WOS:000241594700016"}