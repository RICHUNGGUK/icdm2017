{"auto_keywords": [{"score": 0.035003966118239874, "phrase": "vpstatic_model"}, {"score": 0.00481495049065317, "phrase": "efficient_context-sensitive_intrusion_detection"}, {"score": 0.004724708238414131, "phrase": "state_transition_table"}, {"score": 0.0046361494357125355, "phrase": "host-based_intrusion_detection_models"}, {"score": 0.004578030096508602, "phrase": "vpstatic"}, {"score": 0.0044079880067019765, "phrase": "acceptable_behaviors"}, {"score": 0.004325339932975582, "phrase": "monitored_program"}, {"score": 0.004271100220705305, "phrase": "static_analysis"}, {"score": 0.0041384457437123635, "phrase": "intrusion_detection"}, {"score": 0.004009894739765119, "phrase": "programs'_runtime_behaviors"}, {"score": 0.0038365781437074017, "phrase": "highly_desirable_feature"}, {"score": 0.003693973656103879, "phrase": "false_alarms"}, {"score": 0.0033814348757887232, "phrase": "high_accuracy"}, {"score": 0.003194580334752371, "phrase": "high_space_complexity"}, {"score": 0.00301801991152303, "phrase": "statically-constructed_state_transition_table"}, {"score": 0.002887450071878095, "phrase": "expected_transitions"}, {"score": 0.0028511898481970595, "phrase": "system_calls"}, {"score": 0.0027278178983579085, "phrase": "address_lists"}, {"score": 0.00264296841319955, "phrase": "behavior_model"}, {"score": 0.0025933275734892508, "phrase": "context-sensitive_intrusion_detection"}, {"score": 0.002449915958738505, "phrase": "space_efficiency"}, {"score": 0.0023290951071300433, "phrase": "time_efficiency"}, {"score": 0.0022142194702079866, "phrase": "memory_uses"}, {"score": 0.0021049977753042253, "phrase": "vpstatic_models"}], "paper_keywords": ["intrusion detection", " state transition table", " static analysis", " stack walks"], "paper_abstract": "Those host-based intrusion detection models like VPStatic first construct a model of acceptable behaviors for each monitored program via static analysis, and then perform intrusion detection by comparing them with programs' runtime behaviors. These models usually share the highly desirable feature that they do not produce false alarms but face the conflicts between accuracy and efficiency. For instance, the high accuracy of the VPStatic model is at the cost of high space complexity. In this paper, we use a statically-constructed state transition table (STT), which records expected transitions among system calls as well as their stack states (return address lists), as a behavior model to perform context-sensitive intrusion detection. According to our analysis, our STT model improves the space efficiency of the VPStatic model without decreasing its high precision and time efficiency. Experiments show that for three test programs, memory uses of our STT models are all much less than half of the VPStatic models'. Thereby, we alleviate the conflicts between the accuracy and the efficiency.", "paper_title": "Efficient Context-Sensitive Intrusion Detection Based on State Transition Table", "paper_id": "WOS:000293818300028"}