{"auto_keywords": [{"score": 0.03912269620023402, "phrase": "test_suite"}, {"score": 0.015395394349675818, "phrase": "mutation_analysis"}, {"score": 0.008935312787140461, "phrase": "mutation_tools"}, {"score": 0.008567947075648912, "phrase": "comparison_criteria"}, {"score": 0.00831973956256233, "phrase": "usage_profiles"}, {"score": 0.00481495049065317, "phrase": "software_engineering_tool"}, {"score": 0.004674952036988355, "phrase": "software_developers"}, {"score": 0.004296889776409743, "phrase": "common_and_difficult_problem"}, {"score": 0.004050514095922329, "phrase": "particular_instance"}, {"score": 0.003916098498242888, "phrase": "mutation_analysis_tools"}, {"score": 0.0032938942910948096, "phrase": "different_results"}, {"score": 0.0032524418285459324, "phrase": "original_program"}, {"score": 0.0032115093493071366, "phrase": "fault-injected_one"}, {"score": 0.0030657684627749364, "phrase": "fault-injected_variants"}, {"score": 0.002492703645963951, "phrase": "java"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["tool comparison", " software engineering", " software testing", " mutation analysis", " mutation testing"], "paper_abstract": "Software developers employ many tools in every step of the development. As automation progresses, tools take a more and more important place. A common and difficult problem is choosing a tool among every tool for a given task.As a particular instance of this problem, this paper considers mutation analysis tools. Mutation analysis is a way to evaluate the quality of a test suite. The quality is measured as the ability of the test suite to detect faults injected into the program under tests. A fault is detected if at least one test case gives different results on the original program and the fault-injected one. Mutation tools aim at automating and speeding both the generation of fault-injected variants, called mutants, and the execution of the test suite on those mutants.This paper proposes a methodology to compare tools and applies it for comparing mutation tools. This methodology proposes to dress a list of comparison criteria as well as a list of usage profiles. Mutation tools for Java are compared on paper and by experiments. The work is then extended to other languages to assert the pertinence of the comparison criteria and the usage profiles. Finally, lessons are drawn from our selection process. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Selecting a software engineering tool: lessons learnt from mutation analysis", "paper_id": "WOS:000355733900002"}