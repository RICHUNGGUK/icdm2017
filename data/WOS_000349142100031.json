{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "lock-free_data_structures"}, {"score": 0.03911486664931104, "phrase": "wait-free_implementations"}, {"score": 0.0045302298105691615, "phrase": "wait-free_data_structures"}, {"score": 0.004176509019758331, "phrase": "desirable_non-starvation_guarantee"}, {"score": 0.003983016985197904, "phrase": "practical_lock-free_implementations"}, {"score": 0.0038242899532391914, "phrase": "wait-free_data_structure_designs"}, {"score": 0.003272083495778595, "phrase": "lock-free_algorithms"}, {"score": 0.0032061793819537633, "phrase": "-free_ones"}, {"score": 0.0031629800646754474, "phrase": "even_a_nonexpert"}, {"score": 0.0030783143919343972, "phrase": "lock-free_data-structure"}, {"score": 0.0030163012350270025, "phrase": "practical_wait-free_one"}, {"score": 0.0028764048059439205, "phrase": "lock-free_data_structure"}, {"score": 0.0027804579695873827, "phrase": "normalized_form"}, {"score": 0.0026335379469691997, "phrase": "new_method"}, {"score": 0.002511349409241358, "phrase": "wait-free_linked-list"}], "paper_keywords": ["Wait-Freedom", " Lock-Freedom"], "paper_abstract": "Lock-free data structures guarantee overall system progress, whereas wait-free data structures guarantee the progress of each and every thread, providing the desirable non-starvation guarantee for concurrent data structures. While practical lock-free implementations are known for various data structures, wait-free data structure designs are rare. Wait-free implementations have been notoriously hard to design and often inefficient. In this work we present a transformation of lock-free algorithms to wait-free ones allowing even a nonexpert to transform a lock-free data-structure into a practical wait-free one. The transformation requires that the lock-free data structure is given in a normalized form defined in this work. Using the new method, we have designed and implemented wait-free linked-list, skiplist, and tree and we measured their performance. It turns out that for all these data structures the wait-free implementations are only a few percent slower than their lock-free counterparts, while still guaranteeing non-starvation.", "paper_title": "A Practical Wait-Free Simulation for Lock-Free Data Structures", "paper_id": "WOS:000349142100031"}