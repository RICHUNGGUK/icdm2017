{"auto_keywords": [{"score": 0.04639713146708781, "phrase": "ant_colony"}, {"score": 0.03133755014744724, "phrase": "finite_elements"}, {"score": 0.030916794882194856, "phrase": "triangular_elements"}, {"score": 0.00481495049065317, "phrase": "emergent_ant_colony_optimization"}, {"score": 0.004683073921949839, "phrase": "well_known_optimization_problem"}, {"score": 0.004570634647887452, "phrase": "computationally_expensive_finite_elements"}, {"score": 0.004523272849033429, "phrase": "smaller_subdomains"}, {"score": 0.004491970050862321, "phrase": "parallel_finite_elements_analysis"}, {"score": 0.004263972370406983, "phrase": "emergent_behaviour"}, {"score": 0.004219774794569897, "phrase": "ant_colonies"}, {"score": 0.0041184131734368825, "phrase": "combinatorial_problems"}, {"score": 0.00386876598761639, "phrase": "ant_colony_metaphor"}, {"score": 0.0036468482216440233, "phrase": "ant_colony_optimization_algorithm"}, {"score": 0.003584025547693836, "phrase": "unstructured_adaptive_meshes"}, {"score": 0.003559199464487982, "phrase": "parallel_explicit_time-stepping_finite_elements_analysis"}, {"score": 0.0034978813769575233, "phrase": "ant_colony_optimization_technique"}, {"score": 0.003413800638453572, "phrase": "swarm_intelligence"}, {"score": 0.003378385493203297, "phrase": "approximate_solutions"}, {"score": 0.0033549790559972053, "phrase": "combinatorial_optimization_problems"}, {"score": 0.003229103141223776, "phrase": "classical_ant_colony_optimization_technique"}, {"score": 0.003107935254560724, "phrase": "artificial_system"}, {"score": 0.002991300390411948, "phrase": "ant_colony_optimization"}, {"score": 0.0028890603352364273, "phrase": "swarm_intelligence_concept"}, {"score": 0.0028392545452904762, "phrase": "recursive_greedy_algorithm_optimization_method"}, {"score": 0.0027806165169981622, "phrase": "local_optimization_technique"}, {"score": 0.00266693888510356, "phrase": "optimization_algorithm"}, {"score": 0.0025937408242280757, "phrase": "recursive_bisection_approach"}, {"score": 0.0025137856138000014, "phrase": "normal_and_predictive_modes"}, {"score": 0.002479043701859468, "phrase": "predictive_mode"}, {"score": 0.0024533019565858073, "phrase": "trained_multi-layered_feedforward_neural_network"}, {"score": 0.0023529740798601015, "phrase": "finite_elements_mesh_generation"}, {"score": 0.002280423827531483, "phrase": "proposed_hybrid_approach"}, {"score": 0.0022567398334877847, "phrase": "recursive_bisection"}, {"score": 0.002149418970824546, "phrase": "well_known_finite_elements_domain_decomposer"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["ant colony optimization", " greedy algorithm", " domain decomposition", " finite elements", " subdomain generation", " neural networks"], "paper_abstract": "Finite elements mesh decomposition is a well known optimization problem and is used to split a computationally expensive finite elements mesh into smaller subdomains for parallel finite elements analysis. The ant colony optimization is a type of algorithm that seeks to model the emergent behaviour observed in ant colonies and utilize this behaviour to solve combinatorial problems. This technique has been applied to several problems, most of which are graph related because the ant colony metaphor can be most easily applied to such types of problems. This paper examines the application of ant colony optimization algorithm to the partitioning of unstructured adaptive meshes for parallel explicit time-stepping finite elements analysis. The concept of ant colony optimization technique in addition to the notion of swarm intelligence for finding approximate solutions to combinatorial optimization problems is described. This algorithm combines the features of the classical ant colony optimization technique with swarm intelligence to form a model which is an artificial system designed to perform a certain task. The application of the ant colony optimization for partitioning finite elements meshes based on triangular elements using the swarm intelligence concept is described. A recursive greedy algorithm optimization method is also presented as a local optimization technique to improve the quality of the solutions given by the ant colony optimization algorithm. The partitioning is based on the recursive bisection approach. The mesh partitioning is carried out using normal and predictive modes for which the predictive mode uses a trained multi-layered feedforward neural network that estimates the number of triangular elements that will be generated after finite elements mesh generation is carried out. The performance of the proposed hybrid approach for the recursive bisection of finite elements meshes is examined by decomposing two mesh examples and comparing them with a well known finite elements domain decomposer. (c) 2606 Elsevier Ltd. All rights reserved.", "paper_title": "Subdomain generation using emergent ant colony optimization", "paper_id": "WOS:000241309200001"}