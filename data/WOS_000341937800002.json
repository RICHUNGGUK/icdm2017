{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "efficient_code_generation"}, {"score": 0.04917503970392541, "phrase": "region-based_dynamic_binary_translator"}, {"score": 0.004664352260912174, "phrase": "region-based_jit_compilation"}, {"score": 0.004489810932879285, "phrase": "multiple_basic_blocks"}, {"score": 0.0040298010803060495, "phrase": "aggressive_code_optimisation"}, {"score": 0.003978866233891427, "phrase": "low_compilation_latency"}, {"score": 0.003928572641266562, "phrase": "performance-critical_dynamic_binary_translators"}, {"score": 0.003805591825381666, "phrase": "isolated_code_optimisation_techniques"}, {"score": 0.003459191419478298, "phrase": "complex_interactions"}, {"score": 0.0034154440860550564, "phrase": "indirect_branch_tables"}, {"score": 0.00337224813954299, "phrase": "translation_caches"}, {"score": 0.0033084729942065142, "phrase": "adverse_effects"}, {"score": 0.003026391655379905, "phrase": "complete_code_generation_strategy"}, {"score": 0.002733260122876447, "phrase": "code_quality"}, {"score": 0.0026815368507715, "phrase": "common_case"}, {"score": 0.002548331088496964, "phrase": "competitive_region-based_dynamic_compiler"}, {"score": 0.002421726275597666, "phrase": "llvm_jit_compilation_framework"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_qemu-arm"}], "paper_keywords": ["Design", " experimentation", " measurement", " performance", " Dynamic binary translation", " region-based just-in-time compilation", " alias analysis"], "paper_abstract": "Region-based JIT compilation operates on translation units comprising multiple basic blocks and, possibly cyclic or conditional, control flow between these. It promises to reconcile aggressive code optimisation and low compilation latency in performance-critical dynamic binary translators. Whilst various region selection schemes and isolated code optimisation techniques have been investigated it remains unclear how to best exploit such regions for efficient code generation. Complex interactions with indirect branch tables and translation caches can have adverse effects on performance if not considered carefully. In this paper we present a complete code generation strategy for a region-based dynamic binary translator, which exploits branch type and control flow profiling information to improve code quality for the common case. We demonstrate that using our code generation strategy a competitive region-based dynamic compiler can be built on top of the LLVM JIT compilation framework. For the ARM V5T target ISA and SPEC CPU 2006 benchmarks we achieve execution rates of, on average, 867 MIPS and up to 1323 MIPS on a standard X86 host machine, outperforming state-of-the-art QEMU-ARM by delivering a speedup of 264%.", "paper_title": "Efficient Code Generation in a Region-Based Dynamic Binary Translator", "paper_id": "WOS:000341937800002"}