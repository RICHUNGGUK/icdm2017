{"auto_keywords": [{"score": 0.04910527144315707, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "novel_method"}, {"score": 0.0047559432344272, "phrase": "context-free_grammars"}, {"score": 0.004221379262804442, "phrase": "bnf_converter"}, {"score": 0.004018087343963485, "phrase": "compiler_front"}, {"score": 0.003920128102807887, "phrase": "conventional_code_generation"}, {"score": 0.003824547895167011, "phrase": "labelled_bnf_grammars"}, {"score": 0.0037312893857519803, "phrase": "haskell_modules"}, {"score": 0.0036402965997795536, "phrase": "parser_generators"}, {"score": 0.003352658916650986, "phrase": "combinatory_libraries"}, {"score": 0.0030876784650745973, "phrase": "concrete_syntax"}, {"score": 0.00292674497467906, "phrase": "haskell_files"}, {"score": 0.0028908104750148245, "phrase": "compile_time"}, {"score": 0.002544296663333569, "phrase": "minimal_change"}, {"score": 0.0024116163689723333, "phrase": "generated_quasi-quoters"}, {"score": 0.0023430556582539805, "phrase": "defined_language"}, {"score": 0.002314271047073691, "phrase": "concrete_and_abstract_syntax"}, {"score": 0.0022670785913397637, "phrase": "previous_methods"}, {"score": 0.0021845387990972543, "phrase": "bnfc-meta"}, {"score": 0.0021049977753042253, "phrase": "abstract_syntax_types"}], "paper_keywords": ["Design", " Experimentation", " Languages", " Metaprogramming", " Domain Specific Languages"], "paper_abstract": "We present a novel method of embedding context-free grammars in Haskell, and to automatically generate parsers and pretty-printers from them. We have implemented this method in a library called BNFC-meta (from the BNF Converter, which it is built on). The library builds compiler front ends using metaprogramming instead of conventional code generation. Parsers are built from labelled BNF grammars that are defined directly in Haskell modules. Our solution combines features of parser generators (static grammar checks, a highly specialised grammar DSL) and adds several features that are otherwise exclusive to combinatory libraries such as the ability to reuse, parameterise and generate grammars inside Haskell. To allow writing grammars in concrete syntax, BNFC-meta provides a quasi-quoter that can parse grammars (embedded in Haskell files) at compile time and use metaprogramming to replace them with their abstract syntax. We also generate quasi-quoters so that the languages we define with BNFC-meta can be embedded in the same way. With a minimal change to the grammar, we support adding anti-quotation to the generated quasi-quoters, which allows users of the defined language to mix concrete and abstract syntax almost seamlessly. Unlike previous methods of achieving anti-quotation, the method used by BNFC-meta is simple, efficient and avoids polluting the abstract syntax types.", "paper_title": "Embedded Parser Generators", "paper_id": "WOS:000299326600010"}