{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model-check_recursive_schemes."}, {"score": 0.004689321062844586, "phrase": "model-based_approach"}, {"score": 0.004597244847332915, "phrase": "model_checking_problem"}, {"score": 0.004536862734384202, "phrase": "recursive_schemes"}, {"score": 0.004447766706144458, "phrase": "simply_typed_lambda_calculus"}, {"score": 0.004360412703519539, "phrase": "fixpoint_operator"}, {"score": 0.003820144626025562, "phrase": "lambda_y-calculus"}, {"score": 0.0033025823350563087, "phrase": "decision_procedure"}, {"score": 0.0029903851294825023, "phrase": "trivial_acceptance_conditions"}, {"score": 0.002951045605925464, "phrase": "divergence_testing"}, {"score": 0.0028739078688746374, "phrase": "already_interesting_challenges"}, {"score": 0.0028360962841331634, "phrase": "model_construction"}, {"score": 0.0024353398669404334, "phrase": "model-checking_problem"}], "paper_keywords": ["Higher-order model checking", " simply typed lambda-calculus", " tree automata", " denotational semantics"], "paper_abstract": "We propose a model-based approach to the model checking problem for recursive schemes. Since simply typed lambda calculus with the fixpoint operator, lambda Y-calculus, is equivalent to schemes, we propose the use of a model of lambda Y-calculus to discriminate the terms that satisfy a given property. If a model is finite in every type, this gives a decision procedure. We provide a construction of such a model for every property expressed by automata with trivial acceptance conditions and divergence testing. Such properties pose already interesting challenges for model construction. Moreover, we argue that having models capturing some class of properties has several other virtues in addition to providing decidability of the model-checking problem. As an illustration, we show a very simple construction transforming a scheme to a scheme reflecting a property captured by a given model.", "paper_title": "USING MODELS TO MODEL-CHECK RECURSIVE SCHEMES", "paper_id": "WOS:000359470700010"}