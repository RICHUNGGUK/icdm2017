{"auto_keywords": [{"score": 0.02450180768977451, "phrase": "hw_tasks"}, {"score": 0.00481495049065317, "phrase": "effective_preemptive_hardware_multitasking"}, {"score": 0.00469500313566324, "phrase": "modern_fpgas"}, {"score": 0.003693973656103879, "phrase": "time-multiplexed_resources"}, {"score": 0.0032763212574036748, "phrase": "efficient_method"}, {"score": 0.003235193484261443, "phrase": "hardware_task_preemption"}, {"score": 0.0029241700853970013, "phrase": "offline_tool"}, {"score": 0.0027451110240633144, "phrase": "design_time"}, {"score": 0.00264296841319955, "phrase": "embedded_system_framework"}, {"score": 0.002256619934086924, "phrase": "whole_system"}, {"score": 0.0021049977753042253, "phrase": "promising_results"}], "paper_keywords": ["dynamic partial reconfiguration", " hardware multitasking"], "paper_abstract": "Modern FPGAs (Field Programmable Gate Arrays), such as Xilinx Virtex-4, have the capability of changing their contents dynamically and partially, allowing implementation of such concepts as a HW (hardware) task. Similarly to its software counterpart, the HW task shares time-multiplexed resources with other HW tasks. To support preemptive multitasking in such systems, additional context saving and restoring mechanisms must be built practically from scratch. This paper presents an efficient method for hardware task preemption which is suitable for tasks containing both Flip-Flops and memory elements. Our solution consists of an offline tool for analyzing and manipulating bitstreams, used at the design time, as well as an embedded system framework. The framework contains a DMA-based (Direct Memory Access), instruction-driven reconfiguration/readback controller and a developed lightweight bus facilitating management of HW tasks. The whole system has been implemented on top of the Xilinx Virtex-4 FPGA and showed promising results for a variety of HW tasks.", "paper_title": "A Novel Framework for Effective Preemptive Hardware Multitasking on FPGAs", "paper_id": "WOS:000300471900007"}