{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "information_visualization"}, {"score": 0.0046253989970108985, "phrase": "image-space_operations"}, {"score": 0.0045726187330434025, "phrase": "modern_programmable_gpus"}, {"score": 0.004494570360108983, "phrase": "vast_potential"}, {"score": 0.004342430078306461, "phrase": "visual_flexibility"}, {"score": 0.0042928648367867835, "phrase": "information_visualization_research"}, {"score": 0.004219571240696568, "phrase": "surprisingly_few_applications"}, {"score": 0.0036763623220059933, "phrase": "high-level_abstract_data_types"}, {"score": 0.0033152062780180073, "phrase": "current_gpu_shader_languages"}, {"score": 0.003058944053868522, "phrase": "traditional_information_visualization_pipeline"}, {"score": 0.002938317647182056, "phrase": "gpu_shaders"}, {"score": 0.002822434555587263, "phrase": "final_image-space_step"}, {"score": 0.002726740692380339, "phrase": "multivariate_data"}, {"score": 0.0025596276616952516, "phrase": "current_view"}, {"score": 0.002487083025913648, "phrase": "theoretical_aspects"}, {"score": 0.002361632539339945, "phrase": "visual_programming_environment"}, {"score": 0.002321234686549485, "phrase": "visualization_shaders"}, {"score": 0.0022815262950738814, "phrase": "simple_drag-and-drop_interface"}, {"score": 0.0021049977753042253, "phrase": "well-known_visualization_techniques"}], "paper_keywords": ["GPU-acceleration", " shader programming", " interaction", " high-performance visualization"], "paper_abstract": "Modern programmable GPUs represent a vast potential in terms of performance and visual flexibility for information visualization research, but surprisingly few applications even begin to utilize this potential. In this paper, we conjecture that this may be due to the mismatch between the high-level abstract data types commonly visualized in our field, and the low-level floating-point model supported by current GPU shader languages. To help remedy this situation, we present a refinement of the traditional information visualization pipeline that is amenable to implementation using GPU shaders. The refinement consists of a final image-space step in the pipeline where the multivariate data of the visualization is sampled in the resolution of the current view. To concretize the theoretical aspects of this work, we also present a visual programming environment for constructing visualization shaders using a simple drag-and-drop interface. Finally, we give some examples of the use of shaders for well-known visualization techniques.", "paper_title": "Towards Utilizing GPUs in Information Visualization: A Model and Implementation of Image-Space Operations", "paper_id": "WOS:000270778900034"}