{"auto_keywords": [{"score": 0.04517806343671263, "phrase": "custom_instructions"}, {"score": 0.03133755014744723, "phrase": "proposed_technique"}, {"score": 0.014525498063738382, "phrase": "resource_sharing"}, {"score": 0.00481495049065317, "phrase": "mapping_area-time_efficient_custom_instructions"}, {"score": 0.0046993598473345395, "phrase": "efficient_custom_instructions"}, {"score": 0.004570634647887452, "phrase": "reconfigurable_processors"}, {"score": 0.004523272849033429, "phrase": "data_path"}, {"score": 0.00435375504298636, "phrase": "area_efficiency"}, {"score": 0.004205143879089321, "phrase": "large_increase"}, {"score": 0.004161553532799662, "phrase": "critical_path_delay"}, {"score": 0.0040334640350288, "phrase": "novel_strategy"}, {"score": 0.00395026016389782, "phrase": "architectural_constraints"}, {"score": 0.003909301559145041, "phrase": "fpga_device"}, {"score": 0.003815369123984481, "phrase": "low-area_delay_product"}, {"score": 0.003685067218455088, "phrase": "custom_instruction_data_paths"}, {"score": 0.003621588555525458, "phrase": "basic_clusters"}, {"score": 0.0035100601949451028, "phrase": "heuristic-based_cluster_merging_process"}, {"score": 0.0034376160364306637, "phrase": "fpga_logic_blocks"}, {"score": 0.003390149669470349, "phrase": "resource_sharing_method"}, {"score": 0.0033549790559972053, "phrase": "proposed_cluster_merging_process"}, {"score": 0.003285725064532174, "phrase": "common_resources"}, {"score": 0.003229103141223776, "phrase": "lesser_reliance"}, {"score": 0.0030756833977949273, "phrase": "final_stage"}, {"score": 0.0030226700832113942, "phrase": "logic_blocks"}, {"score": 0.0028590732866152118, "phrase": "area_costs"}, {"score": 0.002685558057339722, "phrase": "commercial_synthesis_tool"}, {"score": 0.002241087008892355, "phrase": "resource_sharing-based_method"}, {"score": 0.0022101055924375725, "phrase": "area-delay_product"}, {"score": 0.0021871503075921537, "phrase": "average_reductions"}], "paper_keywords": ["Automatic synthesis", " data-path design", " real-time and embedded systems", " reconfigurable hardware"], "paper_abstract": "Area-time efficient custom instructions are desirable for maximizing the performance of reconfigurable processors. Existing data path merging techniques based on resource sharing can be deployed to improve area efficiency of custom instructions. However, these techniques lead to large increase in the critical path delay. In this paper, we propose a novel strategy that takes into account the architectural constraints of the FPGA device in order to realize custom instructions with low-area delay product. The proposed strategy is based on partitioning the custom instruction data paths into a set of basic clusters such that they can be combined using a heuristic-based cluster merging process to maximize the utilization of FPGA logic blocks. Unlike the resource sharing method, the proposed cluster merging process does not maximize sharing of common resources and this leads to lesser reliance on multiplexers for implementing custom instructions. Resource sharing is only applied sparingly at the final stage to increase utilization of logic blocks. We show that the proposed technique leads to more than 34 percent, 34 percent, and 42 percent average reduction in area costs for Spartan-3, Virtex-4, and Virtex-5 architectures, respectively, when compared to optimizations achieved through commercial synthesis tool. We have also shown that the proposed technique leads to more than 18 percent, 17 percent, and 13 percent average reduction in area costs for Spartan-3, Virtex-4, and Virtex-5, respectively, when compared to results obtained using one of the most efficient resource sharing-based method reported in the literature. In addition, the proposed technique outperforms the resource sharing-based method in terms of area-delay product, with average reductions of more than 27 percent, 34 percent, and 19 percent for Spartan-3, Virtex-4, and Virtex-5, respectively.", "paper_title": "Architecture-Aware Technique for Mapping Area-Time Efficient Custom Instructions onto FPGAs", "paper_id": "WOS:000288751800006"}