{"auto_keywords": [{"score": 0.048016861279987125, "phrase": "fully_associative_structures"}, {"score": 0.035524421372478625, "phrase": "speculative_active_store_window"}, {"score": 0.027213882117153674, "phrase": "store_sequence_bloom_filter"}, {"score": 0.00481495049065317, "phrase": "far_store-load_forwarding"}, {"score": 0.004721711709176679, "phrase": "complexity-efficiency"}, {"score": 0.004675768396728975, "phrase": "conventional_dynamically_scheduled_processors"}, {"score": 0.004409304640026443, "phrase": "value_communication"}, {"score": 0.004240116703465252, "phrase": "flight_stores"}, {"score": 0.00413767314434795, "phrase": "store-load_order_violation"}, {"score": 0.004057495982111461, "phrase": "in-flight_forwarding"}, {"score": 0.003940122359770492, "phrase": "store-load_communications"}, {"score": 0.0038448988429199086, "phrase": "cam-based_micro-architecture"}, {"score": 0.0037336520904376687, "phrase": "store-load_communication"}, {"score": 0.0036079110889031874, "phrase": "new_micro-architecture"}, {"score": 0.003503497128638099, "phrase": "active_store_window"}, {"score": 0.0034020946201397057, "phrase": "new_structure"}, {"score": 0.0032714270066711835, "phrase": "lsq."}, {"score": 0.0031457622320220364, "phrase": "committed_stores"}, {"score": 0.003099888654615187, "phrase": "executing_loads"}, {"score": 0.0027026375053777543, "phrase": "order_load"}, {"score": 0.0026115277372906805, "phrase": "tagged_ssbf"}, {"score": 0.0024624103660827695, "phrase": "store-load_forwarding"}, {"score": 0.0022216045996270996, "phrase": "simpler_and_faster_design"}, {"score": 0.0021361800485636823, "phrase": "nosq"}], "paper_keywords": ["store-load forwarding", " load/store queue", " value-based load re-execution"], "paper_abstract": "Conventional dynamically scheduled processors often use fully associative structures named load/store queue (LSQ) to implement the value communication between loads and the older in-flight stores and to detect the store-load order violation. But this in-flight forwarding only occupies about 15% of all store-load communications, which makes the CAM-based micro-architecture the major bottleneck to scale store-load communication further. This paper presents a new micro-architecture named ASW (short for active store window). It provides a new structure named speculative active store window to implement more aggressively speculative store-load forwarding than conventional LSQ. This structure could forward the data of committed stores to the executing loads without accessing to L1 data cache, which is referred to as far forwarding in this paper. At the back-end of the pipeline, it uses in-order load re-execution filtered by the tagged SSBF (short for store sequence bloom filter) to verify the correctness of the store-load forwarding. The speculative active store window and tagged store sequence bloom filter are all set-associate structures that are more efficient and scalable than fully associative structures. Experiments show that this simpler and faster design outperforms a conventional load/store queue based design and the NoSQ design on most benchmarks by 10.22% and 8.71% respectively.", "paper_title": "Active Store Window: Enabling Far Store-Load Forwarding with Scalability and Complexity-Efficiency", "paper_id": "WOS:000306410600011"}