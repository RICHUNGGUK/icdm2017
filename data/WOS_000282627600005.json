{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pointer_safety"}, {"score": 0.038211931715737536, "phrase": "unknown_procedure"}, {"score": 0.004698514007994158, "phrase": "unknown_calls"}, {"score": 0.004556901872357751, "phrase": "automated_verification"}, {"score": 0.004446677711302801, "phrase": "heap-manipulating_imperative_programs"}, {"score": 0.004234129588974058, "phrase": "hoare-style_partial_correctness_specification"}, {"score": 0.00405646687267772, "phrase": "separation_logic"}, {"score": 0.0038154673253945003, "phrase": "unknown_procedure_u"}, {"score": 0.003700371064796848, "phrase": "specification_s-u"}, {"score": 0.003545024951402821, "phrase": "calling_contexts"}, {"score": 0.003253560798692431, "phrase": "specification_s"}, {"score": 0.0028430608076324727, "phrase": "derived_specification"}, {"score": 0.0027572166867780275, "phrase": "expected_specification"}, {"score": 0.0025459275963373496, "phrase": "abduction-based_shape_analysis"}, {"score": 0.0024389277933858054, "phrase": "prototype_system"}, {"score": 0.0023221248824337576, "phrase": "preliminary_results"}, {"score": 0.0021309898622781124, "phrase": "unknown_code"}], "paper_keywords": ["Inference", " Verification", " Abduction", " Separation logic"], "paper_abstract": "We study the automated verification of pointer safety for heap-manipulating imperative programs with unknown procedure calls. Given a Hoare-style partial correctness specification S = {Pre}C{Post} in separation logic, where the program C contains calls to some unknown procedure U, we infer a specification S-U for the unknown procedure U from the calling contexts. We show that the problem of verifying the program C against the specification S can be safely reduced to the problem of proving that the procedure U (once its code is available) meets the derived specification S-U. The expected specification S-U for the unknown procedure U is automatically calculated using an abduction-based shape analysis. We have also implemented a prototype system to validate the viability of our approach. Preliminary results show that the specifications derived by our tool fully capture the behaviors of the unknown code in many cases. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Verifying pointer safety for programs with unknown calls", "paper_id": "WOS:000282627600005"}