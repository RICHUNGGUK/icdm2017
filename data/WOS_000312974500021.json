{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "workflow_systems"}, {"score": 0.004688321299229397, "phrase": "unix_make"}, {"score": 0.004186105377259855, "phrase": "specific_design"}, {"score": 0.003942299471749811, "phrase": "gxp"}, {"score": 0.003663443192307343, "phrase": "single_node_systems"}, {"score": 0.0028052155436760528, "phrase": "useful_performance"}, {"score": 0.002572001496778222, "phrase": "dependence_analysis"}, {"score": 0.0023424328921363585, "phrase": "protein-protein_interactions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Distributed computing", " Workflow systems", " Make"], "paper_abstract": "This paper describes a rationale behind designing workflow systems based on the Unix make by showing a number of idioms useful for workflows comprising many tasks. It also demonstrates a specific design and implementation of such a workflow system called GXP make. GXP make supports all the features of GNU make and extends its platforms from single node systems to clusters, clouds, supercomputers, and distributed systems. Interestingly, it is achieved by a very small code base that does not modify GNU make implementation at all. While not being ideal for performance, it achieved a useful performance and scalability of dispatching one million tasks in approximately 5000 s (200 tasks per second, including dependence analysis) on an 8 core Intel Nehalem node. For real applications, recognition and classification of protein-protein interactions from biomedical texts on a supercomputer with more than 8000 cores are described. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Design and implementation of GXP make - A workflow system based on make", "paper_id": "WOS:000312974500021"}