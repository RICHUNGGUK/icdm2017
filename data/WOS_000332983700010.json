{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "nearest_neighbors"}, {"score": 0.004518442937844318, "phrase": "spatial_database_run"}, {"score": 0.00443308765153716, "phrase": "inefficient_way"}, {"score": 0.004159997145421619, "phrase": "almost_every_nearest_neighbor"}, {"score": 0.003829877278269543, "phrase": "mobile_computation"}, {"score": 0.003571018150056717, "phrase": "query_result"}, {"score": 0.003503497128638099, "phrase": "region_approach"}, {"score": 0.0026475981474045414, "phrase": "contact_zone"}, {"score": 0.0025160740422447837, "phrase": "right_region_generator_points"}, {"score": 0.002421726275597666, "phrase": "whole_points"}, {"score": 0.002316105585203396, "phrase": "reverse_nearest_neighbor_queries"}, {"score": 0.0022010126160835024, "phrase": "mobile_devices"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["RNN region", " influence zone", " contact zone", " peers", " Voronoi cell", " Voronoi diagram", " region vertex"], "paper_abstract": "Common reverse nearest neighbor queries in spatial database run in an inefficient way because they need to check a query result with almost every nearest neighbor. This wastes many time and resources, making this approach unsuitable for mobile computation. Instead of using the neighbors as candidates for the query result, a region approach can be used to answer the query. By using this approach, any objects located in the region will be considered candidate results for the query. To reduce the cost of creating the region, we introduce the concept of a contact zone, a method that can identify the right region generator points without having to process the whole points in the space, hence make reverse nearest neighbor queries by region possible to be run in mobile devices. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Finding reverse nearest neighbors by region", "paper_id": "WOS:000332983700010"}