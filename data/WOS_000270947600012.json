{"auto_keywords": [{"score": 0.04764602699421293, "phrase": "design_patterns"}, {"score": 0.004819238622412054, "phrase": "matrix"}, {"score": 0.0046390482426405324, "phrase": "recovering_design_patterns"}, {"score": 0.004502943680955863, "phrase": "good_solutions"}, {"score": 0.00443638953122199, "phrase": "common_and_recurring_problems"}, {"score": 0.0039088121438737924, "phrase": "pattern-related_information"}, {"score": 0.003737934295442975, "phrase": "large_system_implementations"}, {"score": 0.0036281710561308377, "phrase": "design_pattern_instances"}, {"score": 0.0035744997458371335, "phrase": "software_systems"}, {"score": 0.003367611042980526, "phrase": "original_design_decisions"}, {"score": 0.0031257046538823354, "phrase": "quality_assurance"}, {"score": 0.002251227801482381, "phrase": "real-world_systems"}, {"score": 0.0021049977753042253, "phrase": "analysis_results"}], "paper_keywords": ["Design pattern", " Extensible Markup Language (XML)", " reverse engineering", " Unified Modeling Language (UML)"], "paper_abstract": "Design patterns describe good solutions to common and recurring problems in software design. They have been widely applied in many software systems in industry. However, pattern-related information is typically not available in large system implementations. Recovering these design pattern instances in software systems can help not only to understand the original design decisions and tradeoffs but also to change the systems with quality assurance. This paper presents our approach on recovering design patterns based on matrices and weights. We formally specify our methods to encode both the systems and the design patterns into matrices and weight. Our formal specification rigorously defines the structural, behavioral, and semantic analyses of our approach. A set of experiments on real-world systems is also carried out to evaluate our approach with analysis results.", "paper_title": "A Matrix-Based Approach to Recovering Design Patterns", "paper_id": "WOS:000270947600012"}