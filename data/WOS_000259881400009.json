{"auto_keywords": [{"score": 0.025204317901183475, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "hybrid_algorithm"}, {"score": 0.004583205112737672, "phrase": "fast_sorting"}, {"score": 0.004527024978801684, "phrase": "large_lists"}, {"score": 0.004471530397729526, "phrase": "modern_gpus"}, {"score": 0.004335739075947899, "phrase": "high_speed"}, {"score": 0.00405127920820053, "phrase": "whole_algorithm"}, {"score": 0.003952513974962462, "phrase": "gpu-based_bucketsort"}, {"score": 0.0029027394930867902, "phrase": "standard_complexity"}, {"score": 0.0027457584014804574, "phrase": "long_time"}, {"score": 0.0026133424923929227, "phrase": "cpu_sorting"}, {"score": 0.002487296495786493, "phrase": "single_cpu_quicksort"}], "paper_keywords": ["Parallelism", " Sorting", " GPU-algorithms"], "paper_abstract": "This paper presents an algorithm for fast sorting of large lists using modern GPUs. The method achieves high speed by efficiently utilizing the parallelism of the CPU throughout the whole algorithm. Initially, GPU-based bucketsort or quicksort splits the list into enough sublists; then to be sorted in parallel using merge-sort. The algorithm is of complexity n log n, and for lists of 8 M elements and using a single Geforce 8800 GTS-512, it is 2.5 times as fast as the bitonic sort algorithms, with standard complexity of n(log n)(2), which for a long time was considered to be the fastest for CPU sorting. It is 6 times faster than single CPU quicksort, and 10% faster than the recent GPU-based radix sort. Finally, the algorithm is further parallelized to utilize two graphics cards, resulting in yet another 1.8 times speedup. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Fast parallel GPU-sorting using a hybrid algorithm", "paper_id": "WOS:000259881400009"}