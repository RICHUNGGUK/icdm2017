{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "code_analysis"}, {"score": 0.004356926418550194, "phrase": "runtime_disambiguation"}, {"score": 0.003995226376780718, "phrase": "low_complexity"}, {"score": 0.003942299471749811, "phrase": "hardware_signatures"}, {"score": 0.0038385317554884713, "phrase": "flexible_use"}, {"score": 0.0035908627899097407, "phrase": "signature_register_file"}, {"score": 0.003449972561293443, "phrase": "rich_isa."}, {"score": 0.003359119985242403, "phrase": "great_flexibility"}, {"score": 0.002881130228859848, "phrase": "softsig"}, {"score": 0.0027131212233443137, "phrase": "softsig_use"}, {"score": 0.0023113506171584157, "phrase": "five_popular_applications"}, {"score": 0.0022806798371116698, "phrase": "memoise"}, {"score": 0.0022057677637040396, "phrase": "dynamic_instructions"}, {"score": 0.0021049977753042253, "phrase": "execution_time"}], "paper_keywords": ["performance", " design", " memory disambiguation", " multi-core architectures", " runtime optimization"], "paper_abstract": "Many code analysis techniques for optimization, debugging, or parallelization need to perform runtime disambiguation of sets of addresses. Such operations can be supported efficiently and with low complexity with hardware signatures. To enable flexible use of signatures, this paper proposes to expose a Signature Register File to the software through a rich ISA. The software has great flexibility to decide, for each signature, which addresses to collect and which addresses to disambiguate against. We call this architecture SoftSig. In addition, as an example of SoftSig use, we show how to detect redundant function calls efficiently and eliminate them dynamically. We call this algorithm MemoiSE. On average for five popular applications, MemoiSE reduces the number of dynamic instructions by 9.3%, thereby reducing the execution time of the applications by 9%.", "paper_title": "SoftSig: Software-exposed hardware signatures for code analysis and optimization", "paper_id": "WOS:000256501300016"}