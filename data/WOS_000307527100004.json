{"auto_keywords": [{"score": 0.025906436559610023, "phrase": "semi-automated_procedure"}, {"score": 0.004815168583768755, "phrase": "modular"}, {"score": 0.004488946121663966, "phrase": "ontological_engineering"}, {"score": 0.004122490120202936, "phrase": "ontology-based_software_systems"}, {"score": 0.0038819041309353024, "phrase": "ontology_repositories"}, {"score": 0.0035292625231068517, "phrase": "first-order_ontologies"}, {"score": 0.003407549468745519, "phrase": "non-conservative_extension"}, {"score": 0.0030823667846259836, "phrase": "core_hierarchies"}, {"score": 0.002873331232538783, "phrase": "non-conservative_extensions"}, {"score": 0.002830410693265704, "phrase": "unique_root_theory"}, {"score": 0.0027602925235474317, "phrase": "relative_interpretation"}, {"score": 0.0025473475682739784, "phrase": "different_core_hierarchies"}, {"score": 0.002362620540317279, "phrase": "irreducible_modules"}, {"score": 0.0021049977753042253, "phrase": "different_ontologies"}], "paper_keywords": ["Ontology repository", " modularity", " first-order logic", " non-conservative extension", " conservative extension", " reducibility", " similarity"], "paper_abstract": "From its inception, the focus of ontological engineering has been to support the reusability and shareability of ontologies, as well as interoperability of ontology-based software systems. Among the approaches employed to address these challenges have been ontology repositories and the modularization of ontologies. In this paper we combine these approaches and use the relationships between first-order ontologies within a repository (such as non-conservative extension and relative interpretation) to characterize the criteria for modularity. In particular, we introduce the notion of core hierarchies, which are sets of theories with the same non-logical lexicons and which are all non-conservative extensions of a unique root theory. The technique of relative interpretation leads to the notion of reducibility of a theory to a set of theories in different core hierarchies. We show how these relationships support a semi-automated procedure that decomposes an ontology into irreducible modules. We also propose a semi-automated procedure that can use the relationships between modules to characterize which modules can be shared and reused among different ontologies.", "paper_title": "Modular first-order ontologies via repositories", "paper_id": "WOS:000307527100004"}