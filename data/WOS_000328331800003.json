{"auto_keywords": [{"score": 0.027331742756797124, "phrase": "blendfuzz"}, {"score": 0.015395803279812895, "phrase": "highly_structured_inputs"}, {"score": 0.00481495049065317, "phrase": "grammar-based_fuzz_testing"}, {"score": 0.004665296491645837, "phrase": "fuzz_testing"}, {"score": 0.004356741449157895, "phrase": "effective_technique"}, {"score": 0.004288472456976113, "phrase": "software_vulnerabilities"}, {"score": 0.003529149828147388, "phrase": "test_input"}, {"score": 0.0031929098985796814, "phrase": "novel_approach"}, {"score": 0.0031428202743657057, "phrase": "highly_structured_input_programs"}, {"score": 0.003061072337623773, "phrase": "existing_test_cases"}, {"score": 0.003028969851366049, "phrase": "multiple_grammatical_fragments"}, {"score": 0.0029038817737006405, "phrase": "new_series"}, {"score": 0.0028734230458881903, "phrase": "test_cases"}, {"score": 0.002740253546178098, "phrase": "previously_unexplored_places"}, {"score": 0.002697245874076643, "phrase": "target_program"}, {"score": 0.0024659480471085405, "phrase": "higher_code_coverage"}, {"score": 0.0023146962503449186, "phrase": "previously_unreported_vulnerabilities"}, {"score": 0.0022904032758108775, "phrase": "real-world_applications"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["security vulnerability", " fuzz testing", " fault Injection", " grammar-based test generation"], "paper_abstract": "Fuzz testing, also known as fuzzing, has long been recognized as an effective technique to detect software vulnerabilities. Unfortunately, this approach is demonstrated noneffective when applied to test programs with highly structured inputs, such as interpreters and compilers. These programs usually process inputs in several stages as lexing and parsing, where the test input will be rejected if its structure does not obey the grammar. In this paper, we present a novel approach for fuzzing highly structured input programs. By disassembling the existing test cases into multiple grammatical fragments and inferring their grammar structures, we build a new series of test cases that can pass the validation and reach the previously unexplored places in the target program. We have implemented this approach in our general fuzzing framework BlendFuzz. Experiments have shown that BlendFuzz achieves higher code coverage compared with other blackbox fuzzing tools. BlendFuzz has also detected over two dozens of previously unreported vulnerabilities in real-world applications, with seven of them being considered high risky. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Structurized grammar-based fuzz testing for programs with highly structured inputs", "paper_id": "WOS:000328331800003"}