{"auto_keywords": [{"score": 0.043869754172865795, "phrase": "scientific_programming"}, {"score": 0.026614702921491033, "phrase": "chapel"}, {"score": 0.00481495049065317, "phrase": "locality-aware_high_productivity_languages"}, {"score": 0.004680725471654037, "phrase": "first_specification"}, {"score": 0.0046368166127362925, "phrase": "fortran_language"}, {"score": 0.004465243405240743, "phrase": "\"automatic_programming_system"}, {"score": 0.004313526644128428, "phrase": "assembly_language"}, {"score": 0.004153866009835335, "phrase": "key_issue"}, {"score": 0.003913021620260308, "phrase": "efficient_object_programs"}, {"score": 0.0037681291547896198, "phrase": "similar_situation"}, {"score": 0.0036860898876135534, "phrase": "right_programming_paradigm"}, {"score": 0.00366297866938793, "phrase": "high_performance_computing_systems"}, {"score": 0.003594507685403249, "phrase": "traditional_language"}, {"score": 0.0035162351426730972, "phrase": "major_role"}, {"score": 0.003461368259695762, "phrase": "high-_productivity_programming_languages"}, {"score": 0.0033647490935899134, "phrase": "high-_level_support"}, {"score": 0.0033436458712965272, "phrase": "locality_awareness"}, {"score": 0.0031895204047028554, "phrase": "high_performance_fortran"}, {"score": 0.0030713353414700295, "phrase": "current_language_developments"}, {"score": 0.00305206673249775, "phrase": "peta-scale_computing"}, {"score": 0.0030044208366869205, "phrase": "data-parallel_language"}, {"score": 0.0029113423551788264, "phrase": "high-_level_interface"}, {"score": 0.0028930745799089683, "phrase": "programming_scientific_applications"}, {"score": 0.0027858433744614767, "phrase": "explicitly_parallel_message-passing_program"}, {"score": 0.0027165695539715495, "phrase": "hpf"}, {"score": 0.0026076388058390815, "phrase": "subsequent_languages"}, {"score": 0.0025188786741217077, "phrase": "paper_deals"}, {"score": 0.0024795356895447765, "phrase": "modern_object-oriented_language"}, {"score": 0.0024254832239892017, "phrase": "darpa."}, {"score": 0.002335542599406245, "phrase": "user-defined_distributions"}, {"score": 0.0022489295919084643, "phrase": "vienna_fortran"}, {"score": 0.0021792054532842682, "phrase": "concise_specification"}, {"score": 0.0021655216339356693, "phrase": "sparse_data_distributions"}, {"score": 0.0021049977753042253, "phrase": "future_research"}], "paper_keywords": [""], "paper_abstract": "When the first specification of the FORTRAN language was released in 1956, the goal was to provide an \"automatic programming system\" that would enhance the economy of programming by replacing assembly language with a notation closer to the domain of scientific programming. A key issue in this context, explicitly recognized by the authors of the language, was the requirement to produce efficient object programs that could compete with their hand-coded counterparts. More than 50 years later, a similar situation exists with respect to finding the right programming paradigm for high performance computing systems. FORTRAN, as the traditional language for scientific programming, has played a major role in the quest for high- productivity programming languages that satisfy very strict performance constraints. This paper focuses on high- level support for locality awareness, one of the most important requirements in this context. The discussion centers on the High Performance Fortran (HPF) family of languages, and their influence on current language developments for peta-scale computing. HPF is a data-parallel language that was designed to provide the user with a high- level interface for programming scientific applications, while delegating to the compiler the task of generating an explicitly parallel message-passing program. We outline developments that led to HPF, explain its major features, identify a set of weaknesses, and discuss subsequent languages that address these problems. The final part of the paper deals with Chapel, a modern object-oriented language developed in the High Productivity Computing Systems (HPCS) program sponsored by DARPA. A salient property of Chapel is its general framework for the support of user-defined distributions, which is related in many ways to ideas first described in Vienna Fortran. This framework is general enough to allow a concise specification of sparse data distributions. The paper concludes with an outlook to future research in this area.", "paper_title": "From FORTRAN 77 to locality-aware high productivity languages for peta-scale computing", "paper_id": "WOS:000207414500005"}