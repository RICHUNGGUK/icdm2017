{"auto_keywords": [{"score": 0.007227316187209778, "phrase": "unfolding"}, {"score": 0.004527371799277529, "phrase": "polygonal_trees"}, {"score": 0.004412654209742722, "phrase": "continuous_motions"}, {"score": 0.0043452175611323335, "phrase": "rigid_edges"}, {"score": 0.004256895619944631, "phrase": "vertex_joints"}, {"score": 0.004191829338769843, "phrase": "edge_crossings"}, {"score": 0.0038413947966606118, "phrase": "common_straight_line"}, {"score": 0.0036303546926971966, "phrase": "designated_leaf_node"}, {"score": 0.003378385493203297, "phrase": "convex_polygon"}, {"score": 0.0030171910207671205, "phrase": "square_or_cubic_lattice"}, {"score": 0.0026126405272417783, "phrase": "tree_edges"}], "paper_keywords": ["Folding", " unfolding", " straightening", " convexifying", " locked trees", " locked polygons"], "paper_abstract": "We consider the problems of straightening polygonal trees and convexifying polygons by continuous motions such that rigid edges can rotate around vertex joints and no edge crossings are allowed. A tree can be straightened if all its edges can be aligned along a common straight line such that each edge points \"away\" from a designated leaf node. A polygon can be convexified if it can be reconfigured to a convex polygon. A lattice tree (resp. polygon) is a tree (resp. polygon) containing only edges from a square or cubic lattice. We first show that a 2D lattice chain or a 3D lattice tree can be straightened efficiently in O(n) moves and time, where n is the number of tree edges. We then show that a 2D lattice tree can be straightened efficiently in O(n(2)) moves and time. Furthermore, we prove that a 2D lattice polygon or a 3D lattice polygon with simple shadow can be convexified efficiently in O(n) moves and in O(n log n) time. Finally, we show that two special classes of diameter-4 trees in two dimensions can always be straightened.", "paper_title": "ON UNFOLDING LATTICE POLYGONS/TREES AND DIAMETER-4 TREES", "paper_id": "WOS:000267510600006"}