{"auto_keywords": [{"score": 0.04979620480283765, "phrase": "long_lived_bugs"}, {"score": 0.006479245147455166, "phrase": "fixing_processes"}, {"score": 0.004674457608503586, "phrase": "integral_part"}, {"score": 0.004646852519870358, "phrase": "software_development"}, {"score": 0.004578547645288202, "phrase": "large_number"}, {"score": 0.004511242245115447, "phrase": "poor_software_quality"}, {"score": 0.004471332715426312, "phrase": "buggy_behavior"}, {"score": 0.004462610906535461, "phrase": "overall_bug_fixing_process"}, {"score": 0.004302413946305072, "phrase": "detrimental_effect"}, {"score": 0.004264343940547844, "phrase": "user's_overall_experience"}, {"score": 0.004226609368143841, "phrase": "software_product"}, {"score": 0.003798916441627028, "phrase": "entire_bug_repositories"}, {"score": 0.0032464924707850556, "phrase": "bug_repositories"}, {"score": 0.0032272929113113203, "phrase": "popular_open_source_projects"}, {"score": 0.0031703706626348507, "phrase": "five_different_perspectives"}, {"score": 0.002970086492041853, "phrase": "seven_open-source_projects"}, {"score": 0.0029176875118345075, "phrase": "considerable_number"}, {"score": 0.002807297104719042, "phrase": "user's_experience"}, {"score": 0.0027252240573281163, "phrase": "long_assignment_time"}, {"score": 0.002591154768100912, "phrase": "specific_reasons"}, {"score": 0.002470987929071079, "phrase": "significant_number"}, {"score": 0.0024201785622872847, "phrase": "careful_triaging"}, {"score": 0.002356380755825062, "phrase": "change_effort"}, {"score": 0.0021555948898187944, "phrase": "analytical_approaches"}, {"score": 0.002142832962924139, "phrase": "prioritizing_bugs_based_on_bug_severity_as_well_as_expected_bug_fixing_effort"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Bug tracking", " Bug triaging", " Bug survival time"], "paper_abstract": "Context: Bug fixing is an integral part of software development and maintenance. A large number of bugs often indicate poor software quality, since buggy behavior not only causes failures that may be costly but also has a detrimental effect on the user's overall experience with the software product. The impact of long lived bugs can be even more critical since experiencing the same bug version after version can be particularly frustrating for user. While there are many studies that investigate factors affecting bug fixing time for entire bug repositories, to the best of our knowledge, none of these studies investigates the extent and reasons of long lived bugs. Objective: In this paper, we investigate the triaging and fixing processes of long lived bugs so that we can identify the reasons for delay and improve the overall bug fixing process. Methodology: We mine the bug repositories of popular open source projects, and analyze long lived bugs from five different perspectives: their proportion, severity, assignment, reasons, as well as the nature of fixes. Results: Our study on seven open-source projects shows that there are a considerable number of long lived bugs in each system and over 90% of them adversely affect the user's experience. The reasons for these long lived bugs are diverse including long assignment time, not understanding their importance in advance, etc. However, many bug-fixes were delayed without any specific reasons. Furthermore, 40% of long lived bugs need only small fixes. Conclusion: Our overall results suggest that a significant number of long lived bugs may be minimized through careful triaging and prioritization if developers could predict their severity, change effort, and change impact in advance. We believe our results will help both developers and researchers better to understand factors behind delays, improve the overall bug fixing process, and investigate analytical approaches for prioritizing bugs based on bug severity as well as expected bug fixing effort. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Understanding the triaging and fixing processes of long lived bugs", "paper_id": "WOS:000356110100008"}