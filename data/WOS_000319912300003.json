{"auto_keywords": [{"score": 0.0455702982349357, "phrase": "component_behavior"}, {"score": 0.04077690482280568, "phrase": "behavior_modeling_languages"}, {"score": 0.037812126757560544, "phrase": "implementation_languages"}, {"score": 0.02991201451803045, "phrase": "tbp"}, {"score": 0.00481495049065317, "phrase": "component-based_development"}, {"score": 0.004766090327062509, "phrase": "well-established_methodology"}, {"score": 0.004560002169647084, "phrase": "component_based_development_offers"}, {"score": 0.004392565073466714, "phrase": "subsequent_analysis"}, {"score": 0.004274650638302117, "phrase": "correctness_guarantees"}, {"score": 0.004188287972391714, "phrase": "composition_errors"}, {"score": 0.0041316803676012155, "phrase": "component_updates"}, {"score": 0.003926105480202798, "phrase": "huge_differences"}, {"score": 0.003769006950727621, "phrase": "common_implementation_languages"}, {"score": 0.0031682817605340028, "phrase": "current_component_applications"}, {"score": 0.0029798924689472014, "phrase": "new_behavior_modeling_language"}, {"score": 0.002841124508908794, "phrase": "model_level"}, {"score": 0.0026449626324264275, "phrase": "theoretical_framework"}, {"score": 0.002538996868327341, "phrase": "communication_errors"}, {"score": 0.0025131738347596586, "phrase": "refinement_relation"}, {"score": 0.0024707163158758307, "phrase": "hierarchical_components"}, {"score": 0.0024455860314641243, "phrase": "main_asset"}, {"score": 0.0024289743270061157, "phrase": "tbp_formalism"}, {"score": 0.002323708293955822, "phrase": "imperative_object_oriented_languages"}, {"score": 0.002230584233627327, "phrase": "reasoning_about_hierarchical_components"}, {"score": 0.0022078909877264884, "phrase": "primitive_components"}, {"score": 0.002185548834604797, "phrase": "java"}, {"score": 0.0021484955960643167, "phrase": "bridging_abstractions"}, {"score": 0.0021049977753042253, "phrase": "modeling_languages"}], "paper_keywords": ["Behavior modeling", " Verification", " Model checking", " Refinement", " Composition", " Component systems"], "paper_abstract": "Component-based development is a well-established methodology of software development. Nevertheless, some of the benefits that the component based development offers are often neglected. One of them is modeling and subsequent analysis of component behavior, which can help establish correctness guarantees, such as absence of composition errors and safety of component updates. We believe that application of component behavior modeling in practice is limited due to huge differences between the behavior modeling languages (e.g., process algebras) and the common implementation languages (e.g., Java). As a result, many concepts of the implementation languages are either very different or completely missing in the behavior modeling languages. As an example, even though behavior modeling languages are practical for modeling and analysis of various message-based protocols, they are not well suited for modeling current component applications, where thread-based parallelism, lock-based synchronization, and nested method calls are the essential building blocks. With this in mind, we propose a new behavior modeling language for software components, Threaded Behavior Protocols (TBP). At the model level, TBP provides developers with the concepts known from the implementation languages and essential to most component applications. In addition, the theoretical framework of TBP provides a notion of correctness based on absence of communication errors and a refinement relation to verify correctness of hierarchical components. The main asset of TBP formalism is that it links together the notion of threads as used in imperative object oriented languages and the notion of refinement. For instance, this allows reasoning about hierarchical components composed of primitive components implemented in Java without the need of bridging abstractions and simplifications enforced by the modeling languages.", "paper_title": "Threaded behavior protocols", "paper_id": "WOS:000319912300003"}