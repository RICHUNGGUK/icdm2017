{"auto_keywords": [{"score": 0.0045357787854931894, "phrase": "linear_recurrences"}, {"score": 0.004315487055548749, "phrase": "multiple_disjoint_streams"}, {"score": 0.0040048667115255, "phrase": "efficient_jump-ahead_facilities"}, {"score": 0.0036250779580069455, "phrase": "appropriate_k_x_k_binary_matrix"}, {"score": 0.0032975819773787985, "phrase": "e._g."}, {"score": 0.0031686717525002935, "phrase": "popular_mersenne_twister"}, {"score": 0.002984665318717504, "phrase": "matrix-vector_multiplication"}, {"score": 0.0028966970007550798, "phrase": "large_amount"}, {"score": 0.0027834145465170292, "phrase": "k_x_k_matrix"}, {"score": 0.0026612444314342023, "phrase": "faster_algorithm"}, {"score": 0.0025827837420330816, "phrase": "large_number"}, {"score": 0.0025191653363555193, "phrase": "linear_recurrence"}, {"score": 0.0022913497040895586, "phrase": "matrix_method"}, {"score": 0.002223770196464436, "phrase": "polynomial_calculus"}, {"score": 0.0021907299375981356, "phrase": "characteristic_polynomial"}, {"score": 0.0021049977753042253, "phrase": "sliding_window_algorithm"}], "paper_keywords": ["simulation", " random number generation", " jumping ahead", " multiple streams"], "paper_abstract": "T he fastest long-period random number generators currently available are based on linear recurrences modulo 2. So far, software that provides multiple disjoint streams and substreams has not been available for these generators because of the lack of efficient jump-ahead facilities. In principle, it suffices to multiply the state (a k-bit vector) by an appropriate k x k binary matrix to find the new state far ahead in the sequence. However, when k is large (e. g., for a generator such as the popular Mersenne twister, for which k = 19, 937), this matrix-vector multiplication is slow, and a large amount of memory is required to store the k x k matrix. In this paper, we provide a faster algorithm to jump ahead by a large number of steps in a linear recurrence modulo 2. The method uses much less than the k(2) bits of memory required by the matrix method. It is based on polynomial calculus modulo the characteristic polynomial of the recurrence, and uses a sliding window algorithm for the multiplication.", "paper_title": "Efficient jump ahead for F(2)-linear random number generators", "paper_id": "WOS:000257473600005"}