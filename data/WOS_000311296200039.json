{"auto_keywords": [{"score": 0.041562269310917936, "phrase": "source_code"}, {"score": 0.007075101922763377, "phrase": "program_semantics"}, {"score": 0.00481495049065317, "phrase": "integrated_development_environment_recommendations"}, {"score": 0.004768378525561471, "phrase": "modern_integrated_development_environments"}, {"score": 0.004653900688892822, "phrase": "common_tasks"}, {"score": 0.004460740584972504, "phrase": "quick_fix_scout"}, {"score": 0.004454691230204595, "phrase": "error_corrections"}, {"score": 0.004181839414007266, "phrase": "recommended_changes"}, {"score": 0.004061584718427419, "phrase": "rename_refactoring"}, {"score": 0.0035443861412929006, "phrase": "compilation_errors"}, {"score": 0.0034760655218366, "phrase": "name_collision_warning"}, {"score": 0.00342568771304873, "phrase": "developer_input"}, {"score": 0.0029458777184930896, "phrase": "extra_burden"}, {"score": 0.0026466064623118105, "phrase": "code_transformations"}, {"score": 0.002608218347502229, "phrase": "eclipse_quick_fix"}, {"score": 0.0023776656246300063, "phrase": "quick_fix_recommendations"}, {"score": 0.002297949552105756, "phrase": "compilation-error_removal_tasks"}, {"score": 0.002220900173110114, "phrase": "quick_fix"}, {"score": 0.0021780349459687622, "phrase": "sample_size"}, {"score": 0.0021049977753042253, "phrase": "statistical_significance"}], "paper_keywords": ["Algorithms", " Experimentation", " Human Factors", " Quick Fix Scout", " Eclipse", " Quick Fix dialog", " Quick Fix", " speculative analysis", " IDE", " recommendations"], "paper_abstract": "Modern integrated development environments make recommendations and automate common tasks, such as refactorings, auto-completions, and error corrections. However, these tools present little or no information about the consequences of the recommended changes. For example, a rename refactoring may: modify the source code without changing program semantics; modify the source code and (incorrectly) change program semantics; modify the source code and (incorrectly) create compilation errors; show a name collision warning and require developer input; or show an error and not change the source code. Having to compute the consequences of a recommendation - either mentally or by making source code changes - puts an extra burden on the developers. This paper aims to reduce this burden with a technique that informs developers of the consequences of code transformations. Using Eclipse Quick Fix as a domain, we describe a plug-in, Quick Fix Scout, that computes the consequences of Quick Fix recommendations. In our experiments, developers completed compilation-error removal tasks 10% faster when using Quick Fix Scout than Quick Fix, although the sample size was not large enough to show statistical significance.", "paper_title": "Speculative Analysis of Integrated Development Environment Recommendations", "paper_id": "WOS:000311296200039"}