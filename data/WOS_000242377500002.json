{"auto_keywords": [{"score": 0.015006354243819717, "phrase": "shared_state"}, {"score": 0.00481495049065317, "phrase": "hla-based_distributed_simulation"}, {"score": 0.00422177384286051, "phrase": "simulation_research_community"}, {"score": 0.0035648266669315943, "phrase": "high_level_architecture"}, {"score": 0.0033377940531761985, "phrase": "middleware_approach"}, {"score": 0.0029816229984366374, "phrase": "hla_runtime_infrastructure"}, {"score": 0.0026633568650501873, "phrase": "receive-order_messages"}, {"score": 0.0025171669791790438, "phrase": "implementation_issues"}, {"score": 0.0023346234464901978, "phrase": "experimental_results"}, {"score": 0.0021450029487459403, "phrase": "simple_request-reply_approach"}, {"score": 0.0021049977753042253, "phrase": "timestamp-order_messages"}], "paper_keywords": ["shared state", " zero lookahead", " High Level Architecture", " distributed simulation"], "paper_abstract": "The problem of shared state is well known to the parallel and distributed simulation research community. In this article, the authors revisit the problem of shared state in the context of a High Level Architecture (HLA)-based distributed simulation. A middleware approach is proposed to solve this problem within the framework of the HLA runtime infrastructure. Four solutions to this problem are implemented in the middleware using receive-order messages. The authors discuss the implementation issues of these four solutions in the middleware. Experimental results comparing the performance of these four solutions against a simple request-reply approach using timestamp-order messages are also presented.", "paper_title": "Shared state synchronization for HLA-based distributed simulation", "paper_id": "WOS:000242377500002"}