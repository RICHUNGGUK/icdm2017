{"auto_keywords": [{"score": 0.04899859623334621, "phrase": "model_checker"}, {"score": 0.04629407489194252, "phrase": "erlang"}, {"score": 0.00481495049065317, "phrase": "distributed_functional_programming_language"}, {"score": 0.004642292792558686, "phrase": "distributed_programs"}, {"score": 0.004558289038745564, "phrase": "erlang_programming_language"}, {"score": 0.004103817210338686, "phrase": "industrial_strength"}, {"score": 0.004085115444878828, "phrase": "distributed_applications"}, {"score": 0.0040479661688863884, "phrase": "excellent_failure_tolerance_characteristics"}, {"score": 0.0036944890904337833, "phrase": "full_erlang_data_type_support"}, {"score": 0.0036275736378775757, "phrase": "general_process_communication"}, {"score": 0.0035945701438887282, "phrase": "node_semantics"}, {"score": 0.003449718244515019, "phrase": "intra-process_communication"}, {"score": 0.0034027387694902287, "phrase": "fault_detection"}, {"score": 0.003177235604998673, "phrase": "component_library"}, {"score": 0.0030491497463386924, "phrase": "model_checking_tool"}, {"score": 0.002769950045729965, "phrase": "new_verification_algorithms"}, {"score": 0.002682669289913153, "phrase": "complex_data_structures"}, {"score": 0.0025627194819793347, "phrase": "executable_models"}, {"score": 0.00243694486220507, "phrase": "erlang_interpreter"}, {"score": 0.0023173287402646577, "phrase": "cleanly_structure"}, {"score": 0.0021243539405631866, "phrase": "early_indications"}], "paper_keywords": ["verification"], "paper_abstract": "We present a model checker for verifying distributed programs written in the Erlang programming language. Providing a model checker for Erlang is especially rewarding since the language is by now being seen as a very capable platform for developing industrial strength distributed applications with excellent failure tolerance characteristics. In contrast to most other Erlang verification attempts, we provide support for a very substantial part of the language. The model checker has full Erlang data type support, support for general process communication, node semantics (inter-process behave subtly different from intra-process communication), fault detection and fault tolerance through process linking, and can verify programs written using the OTP Erlang component library ( used by most modern Erlang programs). As the model checking tool is itself implemented in Erlang we benefit from the advantages that a ( dynamically typed) functional programming language offers: easy prototyping and experimentation with new verification algorithms, rich executable models that use complex data structures directly programmed in Erlang, the ability to treat executable models interchangeably as programs ( to be executed directly by the Erlang interpreter) and data, and not least the possibility to cleanly structure and to cleanly combine various verification sub-tasks. In the paper we discuss the design of the tool and provide early indications on its performance.", "paper_title": "McErlang: A model checker for a distributed functional programming language", "paper_id": "WOS:000253409900014"}