{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "polyhedral_model"}, {"score": 0.007600383311234038, "phrase": "genetic_algorithm"}, {"score": 0.004671156704912419, "phrase": "high-level_loop_optimizations"}, {"score": 0.004583464412234181, "phrase": "good_performance"}, {"score": 0.004531637625717547, "phrase": "wide_variety"}, {"score": 0.004297388539539564, "phrase": "program_transformations"}, {"score": 0.004200724305692705, "phrase": "balanced_workload"}, {"score": 0.0038938807148174975, "phrase": "target_architecture"}, {"score": 0.0037918465913284478, "phrase": "complex_code_restructuring"}, {"score": 0.0036368625017975343, "phrase": "simplistic_performance_models"}, {"score": 0.0035147642199945387, "phrase": "modern_architectures"}, {"score": 0.0034226302212225206, "phrase": "inaccurate_dependence_analysis"}, {"score": 0.0032951702142329357, "phrase": "complex_interactions"}, {"score": 0.0032702516771609957, "phrase": "transformation_sequences"}, {"score": 0.0031724417545242315, "phrase": "peak_performance"}, {"score": 0.0030775481952377017, "phrase": "complete_iterative_framework"}, {"score": 0.002896167001212006, "phrase": "large_and_expressive_search_space"}, {"score": 0.0027671619871474764, "phrase": "static_control_loop_nest"}, {"score": 0.0027048247303526583, "phrase": "feedback-driven_iterative_heuristic"}, {"score": 0.0026640466056415298, "phrase": "search_space_properties"}, {"score": 0.002555040841339798, "phrase": "good_solutions"}, {"score": 0.0025357050267224715, "phrase": "small_kernels"}, {"score": 0.0025165151708122957, "phrase": "larger_benchmarks"}, {"score": 0.002497470177389344, "phrase": "higher_dimensional_spaces"}, {"score": 0.0024043803470189455, "phrase": "significant_performance_improvement"}, {"score": 0.0022972306948217548, "phrase": "specialized_operators"}, {"score": 0.0022625835448873495, "phrase": "polyhedral_representation"}, {"score": 0.0022454559805729717, "phrase": "program_dependences"}, {"score": 0.0022115879730677, "phrase": "experimental_evidence"}, {"score": 0.0021617392821644005, "phrase": "huge_optimization_spaces"}, {"score": 0.002137236968970666, "phrase": "good_performance_improvements"}, {"score": 0.002121056250381627, "phrase": "large_loop_nests"}, {"score": 0.0021049977753042253, "phrase": "complex_memory_accesses"}], "paper_keywords": ["algorithms", " experimentation", " performance", " affine scheduling", " genetic algorithm", " iterative compilation", " loop transformation"], "paper_abstract": "High-level loop optimizations are necessary to achieve good performance over a wide variety of processors. Their performance impact can be significant because they involve in-depth program transformations that aim to sustain a balanced workload over the computational, storage, and communication resources of the target architecture. Therefore, it is mandatory that the compiler accurately models the target architecture as well as the effects of complex code restructuring. However, because optimizing compilers (1) use simplistic performance models that abstract away many of the complexities of modern architectures, (2) rely on inaccurate dependence analysis, and (3) lack frameworks to express complex interactions of transformation sequences, they typically uncover only a fraction of the peak performance available on many applications. We propose a complete iterative framework to address these issues. We rely on the polyhedral model to construct and traverse a large and expressive search space. This space encompasses only legal, distinct versions resulting from the restructuring of any static control loop nest. We first propose a feedback-driven iterative heuristic tailored to the search space properties of the polyhedral model. Though, it quickly converges to good solutions for small kernels, larger benchmarks containing higher dimensional spaces are more challenging and our heuristic misses opportunities for significant performance improvement. Thus, we introduce the use of a genetic algorithm with specialized operators that leverage the polyhedral representation of program dependences. We provide experimental evidence that the genetic algorithm effectively traverses huge optimization spaces, achieving good performance improvements on large loop nests with complex memory accesses.", "paper_title": "Iterative optimization in the polyhedral model: Part II, multidimensional time", "paper_id": "WOS:000257820400009"}