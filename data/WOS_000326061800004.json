{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "total_weighted_completion_time"}, {"score": 0.004767826806287385, "phrase": "fully_parallel_jobs"}, {"score": 0.004721162131188487, "phrase": "integer_parallel_units"}, {"score": 0.0037834649508375544, "phrase": "time_unit"}, {"score": 0.002986969236641105, "phrase": "c-i"}, {"score": 0.0027211399302761365, "phrase": "np"}, {"score": 0.0025137856138000014, "phrase": "simple_greedy_algorithm"}, {"score": 0.0024768883044869023, "phrase": "approximation_ratio"}, {"score": 0.0023811153883132536, "phrase": "polynomial_time_algorithm"}, {"score": 0.002233301265743633, "phrase": "different_resource_requirements"}], "paper_keywords": ["Algorithms", " Machine scheduling", " Weighted completion time", " Parallel jobs", " Integer parallel units"], "paper_abstract": "We consider the total weighted completion time minimization in the following scheduling problem. There are m identical resources available at each time unit, and n jobs. Each job requires a number s(i) of resources and one resource can only be assigned to one job at each time unit. Each job is also called fully parallel such that the job is satisfied once it receives enough resources no matter how the resources distribute. The objective is to find a schedule that minimizes Sigma w(i)C(i), where w(i) is the weight of job J(i) and C-i is the time when job J(i) receives s(i) resources. We show that the total weighted completion time minimization is NP-hard when m is an input of the problem. We then give a simple greedy algorithm with an approximation ratio 2. Finally, we present a polynomial time algorithm with complexity O(n(d+1)) to solve this problem when the number of different resource requirements that are not multiples of m is at most d. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Minimizing the total weighted completion time of fully parallel jobs with integer parallel units", "paper_id": "WOS:000326061800004"}