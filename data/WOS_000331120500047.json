{"auto_keywords": [{"score": 0.02754579203597755, "phrase": "ocaml"}, {"score": 0.005540423255957641, "phrase": "jif"}, {"score": 0.00481495049065317, "phrase": "general_diagnosis"}, {"score": 0.004761132425263795, "phrase": "static_errors"}, {"score": 0.00462919213721188, "phrase": "general_way"}, {"score": 0.004551781491498328, "phrase": "programmer_mistakes"}, {"score": 0.004425616928975799, "phrase": "static_analyses"}, {"score": 0.004351595642056769, "phrase": "type_checking"}, {"score": 0.004278807087784626, "phrase": "program_analysis"}, {"score": 0.004160177106153782, "phrase": "constraint_language"}, {"score": 0.004022137057452406, "phrase": "unsatisfiable_constraints"}, {"score": 0.003932654396285872, "phrase": "unsatisfiable_system"}, {"score": 0.003717528595128948, "phrase": "program_expressions"}, {"score": 0.00345530020388352, "phrase": "different_error_explanations"}, {"score": 0.003303177222901723, "phrase": "programmer's_code"}, {"score": 0.003175556211659149, "phrase": "simplest_explanations"}, {"score": 0.003087419032091453, "phrase": "bayesian_principles"}, {"score": 0.0029681091946289757, "phrase": "programmer-stated_assumptions"}, {"score": 0.002743105561254975, "phrase": "new_error_diagnosis_approach"}, {"score": 0.0023694065215394593, "phrase": "previously_collected_programs"}, {"score": 0.0022270182923887012, "phrase": "existing_compilers"}, {"score": 0.0021651504858015364, "phrase": "general_technique"}, {"score": 0.0021049977753042253, "phrase": "programmer_errors"}], "paper_keywords": ["Error diagnosis", " static program analysis", " type inference", " information flow"], "paper_abstract": "We introduce a general way to locate programmer mistakes that are detected by static analyses such as type checking. The program analysis is expressed in a constraint language in which mistakes result in unsatisfiable constraints. Given an unsatisfiable system of constraints, both satisfiable and unsatisfiable constraints are analyzed, to identify the program expressions most likely to be the cause of unsatisfiability. The likelihood of different error explanations is evaluated under the assumption that the programmer's code is mostly correct, so the simplest explanations are chosen, following Bayesian principles. For analyses that rely on programmer-stated assumptions, the diagnosis also identifies assumptions likely to have been omitted. The new error diagnosis approach has been implemented for two very different program analyses: type inference in OCaml and information flow checking in Jif. The effectiveness of the approach is evaluated using previously collected programs containing errors. The results show that when compared to existing compilers and other tools, the general technique identifies the location of programmer errors significantly more accurately.", "paper_title": "Toward General Diagnosis of Static Errors", "paper_id": "WOS:000331120500047"}