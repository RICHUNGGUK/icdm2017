{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "substring_compression"}, {"score": 0.004492841495994535, "phrase": "compressed_substring"}, {"score": 0.004410629943506433, "phrase": "generalized_substring_compression"}, {"score": 0.004172874316207784, "phrase": "additional_context_substring"}, {"score": 0.004058826900076531, "phrase": "context_substrings"}, {"score": 0.0038935506745975835, "phrase": "compressed_format"}, {"score": 0.0038222630466021494, "phrase": "context_substring"}, {"score": 0.003484864867147635, "phrase": "first_non-trivial_correct_algorithm"}, {"score": 0.0033274664434575136, "phrase": "new_method"}, {"score": 0.0032514447965530354, "phrase": "longest_common_prefix"}, {"score": 0.0031333949463567554, "phrase": "independent_interest"}, {"score": 0.0030196181347744372, "phrase": "efficient_algorithm"}, {"score": 0.002909960617042717, "phrase": "range_successor_queries"}, {"score": 0.0025802660239538353, "phrase": "best_query_times"}, {"score": 0.0024409345168575833, "phrase": "compression_query"}, {"score": 0.002418453525649304, "phrase": "generalized_substring_compression_query"}, {"score": 0.002266765479420981, "phrase": "preliminary_version"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data compression", " Lempel-Ziv compression", " Suffix tree", " Range searching"], "paper_abstract": "In substring compression one is given a text to preprocess so that, upon request, a compressed substring is returned. Generalized substring compression is the same with the following twist. The queries contain an additional context substring (or a collection of context substrings) and the answers are the substring in compressed format, where the context substring is used to make the compression more efficient. We focus our attention on generalized substring compression and present the first non-trivial correct algorithm for this problem. Inherent to our algorithm is a new method for finding the bounded longest common prefix of substrings, which may be of independent interest. In addition, we propose an efficient algorithm for substring compression which makes use of range successor queries. We present several tradeoffs for both problems. For compressing the substring S[i..j] (possibly with the substring S[alpha..beta] as a context), the best query times we achieve are O(C) and O(C log(j-i/C)) for substring compression query and generalized substring compression query, respectively, where C is the number of phrases encoded. A preliminary version of this paper has been presented in [21]. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Generalized substring compression", "paper_id": "WOS:000334007300006"}