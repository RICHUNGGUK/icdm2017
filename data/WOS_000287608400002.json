{"auto_keywords": [{"score": 0.049683411510384516, "phrase": "wbsn_applications"}, {"score": 0.041737689026098784, "phrase": "spine"}, {"score": 0.015719439430799245, "phrase": "rapid_prototyping"}, {"score": 0.004736045157669388, "phrase": "wireless_body_sensor_networks"}, {"score": 0.004620093797504386, "phrase": "broad_range"}, {"score": 0.004506968388996092, "phrase": "real-time_health_monitoring"}, {"score": 0.004342430078306461, "phrase": "complex_task"}, {"score": 0.00418387341007444, "phrase": "typical_hardware_platforms"}, {"score": 0.004081385289516914, "phrase": "suitable_software_abstractions"}, {"score": 0.003916098498242888, "phrase": "node_environment"}, {"score": 0.003531474887552889, "phrase": "particular_application-specific_needs"}, {"score": 0.0032645475181624726, "phrase": "wbsn"}, {"score": 0.0030680994147125364, "phrase": "java_application"}, {"score": 0.002907405102646616, "phrase": "classification_functions"}, {"score": 0.002789528662623221, "phrase": "sensor_nodes"}, {"score": 0.0025678829712650437, "phrase": "utility_functions"}, {"score": 0.002504880563070155, "phrase": "tinyos_platforms"}, {"score": 0.0024535580495414783, "phrase": "different_architectural_choices"}, {"score": 0.002393353846080347, "phrase": "signal_processing_and_classification_functions"}, {"score": 0.0021669202726173928, "phrase": "spine_framework"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["body sensor networks", " domain-specific frameworks", " signal processing", " SPINE"], "paper_abstract": "Wireless body sensor networks (WBSNs) enable a broad range of applications for continuous and real-time health monitoring and medical assistance. Programming WBSN applications is a complex task especially due to the limitation of resources of typical hardware platforms and to the lack of suitable software abstractions. In this paper, SPINE (signal processing in-node environment), a domain-specific framework for rapid prototyping of WBSN applications, which is lightweight and flexible enough to be easily customized to fit particular application-specific needs, is presented. The architecture of SPINE has two main components: one implemented on the node coordinating the WBSN and one on the nodes with sensors. The former is based on a Java application, which allows to configure and manage the network and implements the classification functions that are too heavy to be implemented on the sensor nodes. The latter supports sensing, computing and data transmission operations through a set of libraries, protocols and utility functions that are currently implemented for TinyOS platforms. SPINE allows evaluating different architectural choices and deciding how to distribute signal processing and classification functions over the nodes of the network. Finally, this paper describes an activity monitoring application and presents the benefits of using the SPINE framework. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "SPINE: A domain-specific framework for rapid prototyping of WBSN applications", "paper_id": "WOS:000287608400002"}