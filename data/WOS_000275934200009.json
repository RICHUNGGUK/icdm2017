{"auto_keywords": [{"score": 0.041996689288621714, "phrase": "underlying_network"}, {"score": 0.00481495049065317, "phrase": "mobile_agents"}, {"score": 0.004634254474150777, "phrase": "\"mobile_agents"}, {"score": 0.004494570360108983, "phrase": "synchronised_steps"}, {"score": 0.004068907083697369, "phrase": "software_agents"}, {"score": 0.003961330917648707, "phrase": "computer_network"}, {"score": 0.0038125469099459905, "phrase": "potentially_hazardous_physical_terrain"}, {"score": 0.0037402558657576124, "phrase": "first_agent"}, {"score": 0.003697538418750941, "phrase": "faulty_node"}, {"score": 0.0027529929913806066, "phrase": "simple_deterministic_algorithm"}, {"score": 0.002530359917257626, "phrase": "faulty_nodes"}, {"score": 0.002435190484324197, "phrase": "worst-case_asymptotic_optimality"}, {"score": 0.002325689073229477, "phrase": "deterministic_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph exploration", " Mobile agents", " Distributed computing"], "paper_abstract": "We consider a fixed, undirected, known network and a number of \"mobile agents\" which can traverse the network in synchronised steps. Some nodes in the network may be faulty and the agents are to find the faults and repair them. The agents could be software agents, if the underlying network represents a computer network, or robots, if the underlying network represents some potentially hazardous physical terrain. Assuming that the first agent encountering a faulty node can immediately repair it, it is easy to see that the number of steps necessary and sufficient to complete this task is Theta(n/k + D), where n is the number of nodes in the network, D is the diameter of the network, and k is the number of agents. We consider the case where one agent can repair only one faulty node. After repairing the fault, the agent dies. We show that a simple deterministic algorithm for this problem terminates within O(n/k + D log f/log log f) steps, where f = min{n/k, n/D}, assuming that the number of faulty nodes is at most k/2. We also demonstrate the worst-case asymptotic optimality of this algorithm by showing a network such that for any deterministic algorithm, there is a placement of k/2 faults forcing the algorithm to work for Omega(n/k + D logf/log logf) steps. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Locating and repairing faults in a network with mobile agents", "paper_id": "WOS:000275934200009"}