{"auto_keywords": [{"score": 0.04746411390795375, "phrase": "software_system"}, {"score": 0.00481495049065317, "phrase": "structural_regularities"}, {"score": 0.00437021209960886, "phrase": "coding_conventions"}, {"score": 0.0043258453436258405, "phrase": "design_patterns"}, {"score": 0.0042819270655224916, "phrase": "architectural_guidelines"}, {"score": 0.004238452771031322, "phrase": "design_rules"}, {"score": 0.004007083686875716, "phrase": "system's_source_code"}, {"score": 0.003438058620195309, "phrase": "tool_suite"}, {"score": 0.0033857878144822906, "phrase": "relevant_structural_regularities"}, {"score": 0.0032336801561165113, "phrase": "current_and_later_versions"}, {"score": 0.0030726480920918097, "phrase": "intensive_tool_suite"}, {"score": 0.002964706925144123, "phrase": "intensional_views"}, {"score": 0.002718045523483502, "phrase": "source_code"}, {"score": 0.0026494747078097737, "phrase": "intensive"}, {"score": 0.0026091594819333654, "phrase": "code_entities"}, {"score": 0.0022382002476510573, "phrase": "abstract_factory_design_pattern"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software evolution", " Logic meta-programming", " Structural regularities"], "paper_abstract": "The design and implementation of a software system is often governed by a variety of coding conventions, design patterns, architectural guidelines, design rules, and other so-called structural regularities. To prevent a deterioration of the system's source code, it is important that these regularities are verified and enforced upon evolution of the system. The Intensional Views Environment (IntensiVE), presented in this article, is a tool suite for specifying relevant structural regularities in an (object-oriented) software system and verifying them against the current and later versions of the system. At the heart of the IntensiVE tool suite are (logic) program queries and the model of intensional views and relations, through which regularities are expressed. Upon verification of these regularities in the source code of the system, IntensiVE reports the code entities (i.e. classes, methods, variables, statements, etc.) that violate these constraints. We present IntensiVE and illustrate its application to the verification of an Abstract Factory design pattern in the implementation of a software system. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Enforcing structural regularities in software using IntensiVE", "paper_id": "WOS:000276464800004"}