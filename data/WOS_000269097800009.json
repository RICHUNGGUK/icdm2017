{"auto_keywords": [{"score": 0.05007226969505336, "phrase": "streaming_model"}, {"score": 0.03421353097385259, "phrase": "current_number"}, {"score": 0.004669085371587273, "phrase": "small_stretch"}, {"score": 0.004332894955218135, "phrase": "subgraph_s_subset"}, {"score": 0.003212663446866794, "phrase": "scanned_edges"}, {"score": 0.0031151864044353245, "phrase": "discovered_vertices"}, {"score": 0.002903311792572216, "phrase": "unweighted_undirected_graph"}, {"score": 0.0024667783849055634, "phrase": "memory_space"}, {"score": 0.002298902547676131, "phrase": "external_memory_blocks"}, {"score": 0.0021049977753042253, "phrase": "block_transfers"}], "paper_keywords": ["Graph algorithms", " Graph spanners", " Streaming algorithms", " External memory"], "paper_abstract": "We present algorithms for computing small stretch (alpha, beta)-spanners in the streaming model. An (alpha, beta)-spanner of a graph G is a subgraph S subset of G such that for each pair of vertices the distance in S is at most alpha times the distance in G plus beta. We assume that the graph is given as a stream of edges and vertices, and that only one pass over the data is allowed. Furthermore, the number of vertices and edges are not known in advance. We denote by m the current number of scanned edges and by n the current number of discovered vertices. In this model we show how to compute a (k, k - 1)-spanner of an unweighted undirected graph, for k = 2, 3, in O(1) amortized processing time per edge/vertex. The computed (k, k - 1)-spanners have O(n(1+1/k)) edges and our algorithms use only O(n(1+1/k)) words of memory space. In case only H(n) internal memory is available, the same spanners can be computed using O(n(1+1/k)/B) external memory blocks, each of size B. Each edge/vertex is processed in O(1) amortized time, plus O(1/B) amortized block transfers. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Small stretch (alpha, beta)-spanners in the streaming model", "paper_id": "WOS:000269097800009"}