{"auto_keywords": [{"score": 0.027183301840015005, "phrase": "cuda."}, {"score": 0.00481495049065317, "phrase": "bfecc_algorithm"}, {"score": 0.0046993598473345395, "phrase": "pure_advection_equations"}, {"score": 0.004476399615305783, "phrase": "present_work"}, {"score": 0.003822003373331997, "phrase": "general-purpose_graphics_processing_units"}, {"score": 0.0035965032173588753, "phrase": "nvidia's_compute_unified_device_architecture"}, {"score": 0.0031845067058084583, "phrase": "transient_pure_advection_equations"}, {"score": 0.0028195727965553367, "phrase": "previous_explicit_version"}, {"score": 0.002685558057339722, "phrase": "navier-stokes_solver"}, {"score": 0.002406799309495983, "phrase": "bfecc"}, {"score": 0.002264607102799332, "phrase": "unconditional_stable_stability"}, {"score": 0.0022101055924375725, "phrase": "semi-lagrangian_time_integration"}, {"score": 0.0021569129153653777, "phrase": "larger_time_steps"}, {"score": 0.0021049977753042253, "phrase": "eulerian_ones"}], "paper_keywords": ["GPGPU", " CUDA", " BFECC", " Semi-Lagrangian", " Level-Set", " Navier-Stokes"], "paper_abstract": "In the present work an implementation of the Back and Forth Error Compensation and Correction (BFECC) algorithm specially suited for running on General-Purpose Graphics Processing Units (GPGPUs) through Nvidia's Compute Unified Device Architecture (CUDA) is analyzed in order to solve transient pure advection equations. The objective is to compare it to a previous explicit version used in a Navier-Stokes solver fully written in CUDA. It turns out that BFECC could be implemented with unconditional stable stability using Semi-Lagrangian time integration allowing larger time steps than Eulerian ones.", "paper_title": "GPGPU implementation of the BFECC algorithm for pure advection equations", "paper_id": "WOS:000336424400008"}