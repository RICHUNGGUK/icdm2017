{"auto_keywords": [{"score": 0.03884165887626342, "phrase": "vdiff"}, {"score": 0.012966692652972258, "phrase": "position-independent_differencing_algorithm"}, {"score": 0.007618990589243094, "phrase": "vdiff's_output"}, {"score": 0.00481495049065317, "phrase": "verilog_hardware_description_language"}, {"score": 0.004737579882204798, "phrase": "code_review_tasks"}, {"score": 0.004586531354697466, "phrase": "hardware_design_description"}, {"score": 0.004537254814246843, "phrase": "existing_program_differencing_tools"}, {"score": 0.004252469672259375, "phrase": "sequential_execution_semantics"}, {"score": 0.0041840994704406866, "phrase": "hardware_description_languages"}, {"score": 0.004072573194988867, "phrase": "concurrent_computation"}, {"score": 0.003879234831701853, "phrase": "language_constructs"}, {"score": 0.0035386420095120706, "phrase": "verilog_hdl."}, {"score": 0.003245359940011418, "phrase": "verilog-specific_change_types"}, {"score": 0.002881255933884771, "phrase": "manually_classified_differences"}, {"score": 0.0026280534600940137, "phrase": "entire_revision_history"}, {"score": 0.002599763359352916, "phrase": "nine_open_projects"}, {"score": 0.0024896081630179194, "phrase": "user_study"}, {"score": 0.0024628046987344846, "phrase": "eight_hardware_design_experts"}, {"score": 0.0023970487263732737, "phrase": "program_differences"}, {"score": 0.0021627595586364724, "phrase": "experts'_classification"}, {"score": 0.0021394674440767124, "phrase": "verilog_changes"}, {"score": 0.0021049977753042253, "phrase": "existing_textual_program_differencing_tool"}], "paper_keywords": ["Software evolution", " Program differencing", " Hardware description languages"], "paper_abstract": "During code review tasks, comparing two versions of a hardware design description using existing program differencing tools such as diff is inherently limited because these tools implicitly assume sequential execution semantics, while hardware description languages are designed to model concurrent computation. We designed a position-independent differencing algorithm to robustly handle language constructs whose relative orderings do not matter. This paper presents Vdiff, an instantiation of this position-independent differencing algorithm for Verilog HDL. To help programmers reason about the differences at a high-level, Vdiff outputs syntactic differences in terms of Verilog-specific change types. The quantitative evaluation of Vdiff on two open source hardware design projects shows that Vdiff is very accurate, with overall 96.8 % precision and 97.3 % recall when using manually classified differences as a basis of comparison. Vdiff is also fast and scalable-it processes the entire revision history of nine open projects all under 5.35 minutes. We conducted a user study with eight hardware design experts to understand how the program differences identified by the experts match Vdiff's output. The study results show that Vdiff's output is better aligned with the experts' classification of Verilog changes than an existing textual program differencing tool.", "paper_title": "Vdiff: a program differencing algorithm for Verilog hardware description language", "paper_id": "WOS:000307506300004"}