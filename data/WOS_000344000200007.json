{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "computational_skew"}, {"score": 0.04489709945690732, "phrase": "strict_synchronization"}, {"score": 0.02424621907116419, "phrase": "overall_performance"}, {"score": 0.004771196027464407, "phrase": "synchronous_iterative_applications"}, {"score": 0.004727837281331949, "phrase": "computing_decomposition"}, {"score": 0.0046848707075530256, "phrase": "iterative_computing"}, {"score": 0.004600100053651545, "phrase": "web_applications"}, {"score": 0.004354841111644036, "phrase": "synchronous_algorithms"}, {"score": 0.004066498558415824, "phrase": "computational_skews"}, {"score": 0.003974673997871831, "phrase": "current_load_balancing_approaches"}, {"score": 0.0033410898465226417, "phrase": "completion_time"}, {"score": 0.0031627430133087616, "phrase": "effective_approach"}, {"score": 0.003119659433566212, "phrase": "synchronous_iterative_computing_applications"}, {"score": 0.0030076088903023034, "phrase": "negative_effects"}, {"score": 0.0029802289354540507, "phrase": "unresolved_computational_skews"}, {"score": 0.0028995712226514746, "phrase": "large_computational_task"}, {"score": 0.002860062341014677, "phrase": "computing_node"}, {"score": 0.0026220103561723066, "phrase": "previous_iteration"}, {"score": 0.002539379289856756, "phrase": "subsequent_iterations"}, {"score": 0.00243694486220507, "phrase": "related_data_objects"}, {"score": 0.002360132221690264, "phrase": "idle_time"}, {"score": 0.0022238315004700607, "phrase": "experimental_results"}], "paper_keywords": ["Synchronous iterative applications", " Computational skew", " Skew tolerance", " Computing decomposition"], "paper_abstract": "Iterative computing is pervasive in web applications, data mining and scientific computing. Many parallel algorithms for such applications are synchronous algorithms which need strict synchronization between iterations to ensure their correctness, making the performance sensitive to computational skews in each iteration. Current load balancing approaches may alleviate the effect of computational skew, but cannot completely solve the problem. As a result, for many applications, the skews in each iteration still exist and they are accumulated, seriously affecting the completion time of these applications. In this paper, we propose an effective approach to make synchronous iterative computing applications themselves have the ability to tolerate the negative effects of unresolved computational skews. This approach divides a large computational task in a computing node or worker into a number of sub-tasks which only depend on the states of a few objects from the previous iteration. This allows the sub-tasks in subsequent iterations to proceed in advance whenever the states of related data objects are available. Consequently, the idle time caused by strict synchronization is reduced and the overall performance is thus enhanced. Experimental results show that this approach can improve the overall performance by up to 2.45x in comparison with the state-of-the-art approaches.", "paper_title": "AsyIter: tolerating computational skew of synchronous iterative applications via computing decomposition", "paper_id": "WOS:000344000200007"}