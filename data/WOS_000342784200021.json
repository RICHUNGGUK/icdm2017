{"auto_keywords": [{"score": 0.02967301683452493, "phrase": "para_lite"}, {"score": 0.015719716506582538, "phrase": "data-intensive_workflows"}, {"score": 0.013944789098735906, "phrase": "udx"}, {"score": 0.011375898092871489, "phrase": "multiple_clients"}, {"score": 0.004356741449157895, "phrase": "parallel_database_systems"}, {"score": 0.004311109608629196, "phrase": "user-defined_executables"}, {"score": 0.004199101289890982, "phrase": "collective_queries"}, {"score": 0.00398370478688858, "phrase": "seamless_integrations"}, {"score": 0.003941964605885606, "phrase": "external_executables"}, {"score": 0.0039006600544599537, "phrase": "sql_statements"}, {"score": 0.003720060615588018, "phrase": "strict_specifications"}, {"score": 0.003623352647973122, "phrase": "collective_query"}, {"score": 0.0035665344993417603, "phrase": "sql_query"}, {"score": 0.0032954888655173666, "phrase": "arbitrary_udx."}, {"score": 0.0032437952431945724, "phrase": "efficient_parallelization"}, {"score": 0.0031594291695784286, "phrase": "data_transfer_optimization_algorithms"}, {"score": 0.0031098631445657158, "phrase": "query_results"}, {"score": 0.0030130446986008277, "phrase": "communication_cost"}, {"score": 0.0029814443878969973, "phrase": "computational_loads"}, {"score": 0.0026689487424251907, "phrase": "popular_lightweight_database"}, {"score": 0.002531845613305063, "phrase": "hive"}, {"score": 0.0025052769325080255, "phrase": "typical_sql_tasks"}, {"score": 0.0024144659350277954, "phrase": "commercial_dbms"}, {"score": 0.0022783523466965187, "phrase": "real-world_text_processing_workflow"}], "paper_keywords": ["data-intensive workflow", " parallel database system", " user-defined executable", " collective query"], "paper_abstract": "To better support data-intensive workflows which are typically built out of various independently developed executables, this paper proposes extensions to parallel database systems called User-Defined eXecutables (UDX) and collective queries. UDX facilitates the description of workflows by enabling seamless integrations of external executables into SQL statements without any efforts to write programs confirming to strict specifications of databases. A collective query is an SQL query whose results are distributed to multiple clients and then processed by them in parallel, using arbitrary UDX. It provides efficient parallelization of executables through the data transfer optimization algorithms that distribute query results to multiple clients, taking both communication cost and computational loads into account. We implement this concept in a system called Para Lite, a parallel database system based on a popular lightweight database SQLite. Our experiments show that Para Lite has several times higher performance over Hive for typical SQL tasks and has 10x speedup compared to a commercial DBMS for executables. In addition, this paper studies a real-world text processing workflow and builds it on top of Para Lite, Hadoop, Hive and general files. Our experiences indicate that Para Lite outperforms other systems in both productivity and performance for the workflow.", "paper_title": "ParaLite: A Parallel Database System for Data-Intensive Workflows", "paper_id": "WOS:000342784200021"}