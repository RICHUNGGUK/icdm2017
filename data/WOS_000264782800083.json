{"auto_keywords": [{"score": 0.026756161636025125, "phrase": "new_transactions"}, {"score": 0.00481495049065317, "phrase": "incremental_mining"}, {"score": 0.004737579882204798, "phrase": "frequent_pattern_tree"}, {"score": 0.0046869345704778345, "phrase": "fp"}, {"score": 0.004537254814246843, "phrase": "efficient_data_structure"}, {"score": 0.004488505301335364, "phrase": "association-rule_mining"}, {"score": 0.004392565073466714, "phrase": "candidate_itemsets"}, {"score": 0.004139128578531134, "phrase": "tree_structure"}, {"score": 0.003796267885124202, "phrase": "batch_way"}, {"score": 0.0037352048741373816, "phrase": "real-world_applications"}, {"score": 0.003210446135114967, "phrase": "tree_update_process"}, {"score": 0.002992456421856031, "phrase": "fufp-tree_construction"}, {"score": 0.0028968858148006823, "phrase": "pre-large_itemsets"}, {"score": 0.0028348690177346448, "phrase": "large_itemsets"}, {"score": 0.0027592065435732955, "phrase": "lower_support_threshold"}, {"score": 0.002714779217561487, "phrase": "upper_support_threshold"}, {"score": 0.002436289099444074, "phrase": "proposed_approach"}, {"score": 0.0023712394008737958, "phrase": "good_execution_time"}, {"score": 0.002345707314211983, "phrase": "tree_construction"}, {"score": 0.002270745003370529, "phrase": "small_number"}, {"score": 0.002198173002125907, "phrase": "experimental_results"}, {"score": 0.0021394674440767124, "phrase": "proposed_pre-fufp_maintenance_algorithm"}, {"score": 0.0021049977753042253, "phrase": "good_performance"}], "paper_keywords": ["Data mining", " FUFP-tree", " Pre-FUFP algorithm", " Pre-large itemsets", " Incremental mining", " Maintenance"], "paper_abstract": "The frequent pattern tree (FP-tree) is an efficient data structure for association-rule mining without generation of candidate itemsets. It was used to compress a database into a tree structure which stored only large items. It, however, needed to process all transactions in a batch way. In real-world applications, new transactions are usually incrementally inserted into databases. In the past, we proposed a Fast Updated FP-tree (FUFP-tree) structure to efficiently handle new transactions and to make the tree update process become easier. In this paper, we attempt to modify the FUFP-tree construction based on the concept of pre-large itemsets. Pre-large itemsets are defined by a lower Support threshold and an upper support threshold. It does not need to rest an the original database until a number of new transactions have been inserted. The proposed approach can thus achieve a good execution time for tree construction especially when each time a small number of transactions are inserted. Experimental results also show that the proposed Pre-FUFP maintenance algorithm has a good performance for incrementally handling new transactions. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "The Pre-FUFP algorithm for incremental mining", "paper_id": "WOS:000264782800083"}