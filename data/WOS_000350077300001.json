{"auto_keywords": [{"score": 0.029944639693001655, "phrase": "closed_sld_trees"}, {"score": 0.00481495049065317, "phrase": "finite_sld_trees"}, {"score": 0.0047370749839861165, "phrase": "search_space"}, {"score": 0.004685855684376706, "phrase": "sld_resolution"}, {"score": 0.004486432283770142, "phrase": "so-called_sld_tree"}, {"score": 0.004135010810625326, "phrase": "possibly_infinite_sld_trees"}, {"score": 0.004068087482412997, "phrase": "partial_evaluation"}, {"score": 0.004002242925856335, "phrase": "static_analyses"}, {"score": 0.0037697665240643066, "phrase": "finite_representation"}, {"score": 0.0037087324991876727, "phrase": "infinite_sld_tree"}, {"score": 0.0034180189629740426, "phrase": "finite_data_structure"}, {"score": 0.0032546105164772995, "phrase": "data_structure"}, {"score": 0.002855934865505357, "phrase": "basic_properties"}, {"score": 0.002575167114383286, "phrase": "simple_strategies"}, {"score": 0.0025059724686541263, "phrase": "different_levels"}, {"score": 0.0022228943786652914, "phrase": "test_case_generator"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Logic programming", " Semantics", " Program analysis"], "paper_abstract": "The search space of SLD resolution, usually represented by means of a so-called SLD tree, is often infinite. However, there are many applications that must deal with possibly infinite SLD trees, like partial evaluation or some static analyses. In this context, being able to construct a finite representation of an infinite SLD tree becomes useful. In this work, we introduce a framework to construct a finite data structure representing the (possibly infinite) SLD derivations for a goal. This data structure, called closed SLD tree, is built using four basic operations: unfolding, flattening, splitting, and subsumption. We prove some basic properties for closed SLD trees, namely that both computed answers and calls are preserved. We present a couple of simple strategies for constructing closed SLD trees with different levels of abstraction, together with some examples of its application. Finally, we illustrate the viability of our approach by introducing a test case generator based on exploring closed SLD trees. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A framework for computing finite SLD trees", "paper_id": "WOS:000350077300001"}