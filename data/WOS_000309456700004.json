{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "heedless_programming"}, {"score": 0.0047057084749407485, "phrase": "detectable_error"}, {"score": 0.004598933498016774, "phrase": "widespread_hazard"}, {"score": 0.0041001740903338834, "phrase": "forthright_words"}, {"score": 0.0035179764329354877, "phrase": "virtual_machine"}, {"score": 0.003334309053314909, "phrase": "dependable_software_development"}, {"score": 0.0031360786664165093, "phrase": "trivial_operations"}, {"score": 0.00290473242917264, "phrase": "programming_language_design"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["heedless programming", " dependability", " human error", " Excel", " FORTRAN", " Java", " JavaScript", " Mathematica", " design tradeoffs"], "paper_abstract": "Software should be correct and robust. This paper suggests that we need forthright words for the failure of not being robustheedless and heedlessnessand of recursively creating software (such as a compiler or virtual machine) that itself does not support dependable software development. Heedless programming is common, particularly affecting trivial operations such as on numbers, and extends deep into programming language design and into the use of computers more widely, thus making robust, dependable applications of all sorts unnecessarily problematic. The paper defines the problem and presents a call to action to start addressing the problems identified. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Heedless programming: ignoring detectable error is a widespread hazard", "paper_id": "WOS:000309456700004"}