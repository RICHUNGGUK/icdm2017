{"auto_keywords": [{"score": 0.03369793904889564, "phrase": "traid"}, {"score": 0.012275422684252737, "phrase": "tpc-c"}, {"score": 0.005224311821546071, "phrase": "\"group_commit"}, {"score": 0.00481495049065317, "phrase": "temporal_redundancy"}, {"score": 0.004780334370089564, "phrase": "spatial_redundancy"}, {"score": 0.004745965928357563, "phrase": "boost_transaction_processing_systems_performance"}, {"score": 0.004610934029355486, "phrase": "transaction_processing_techniques"}, {"score": 0.0045612889352793584, "phrase": "data_integrity"}, {"score": 0.004415523687947897, "phrase": "key_requirements"}, {"score": 0.004367973309172735, "phrase": "transaction_atomicity"}, {"score": 0.004197942881217177, "phrase": "transaction_processing_systems"}, {"score": 0.004167751468999615, "phrase": "tps"}, {"score": 0.004034504342397309, "phrase": "substantially_more_log_content"}, {"score": 0.004005476499933792, "phrase": "higher_log_flushing_latency"}, {"score": 0.003849502288990788, "phrase": "overall_throughput"}, {"score": 0.0038080244068553204, "phrase": "tps."}, {"score": 0.0037398845600185586, "phrase": "raid"}, {"score": 0.0036597104126905437, "phrase": "underlying_storage_system"}, {"score": 0.0035942114996235803, "phrase": "system_reliability"}, {"score": 0.0033557940171476683, "phrase": "underlying_raid_storage_system"}, {"score": 0.00333163309034114, "phrase": "database_logging_system"}, {"score": 0.003271986590873581, "phrase": "novel_reliable_storage_architecture"}, {"score": 0.0032484270911235526, "phrase": "transactional_raid"}, {"score": 0.0030438576446554138, "phrase": "recovery_references"}, {"score": 0.003011033940247791, "phrase": "updating_data"}, {"score": 0.0029358111718032704, "phrase": "log_content"}, {"score": 0.0028832306043717637, "phrase": "overall_transaction_processing_performance"}, {"score": 0.002682133505994396, "phrase": "current_tps_setups"}, {"score": 0.0026151058979100596, "phrase": "berkeley_db"}, {"score": 0.0025962659203978074, "phrase": "postgresql"}, {"score": 0.0024770482478966896, "phrase": "strong_access_locality"}, {"score": 0.002423882939663573, "phrase": "write-intensive_property"}, {"score": 0.0023804491500749106, "phrase": "traid_performance"}, {"score": 0.0022876085523721324, "phrase": "recovery_efficiency"}, {"score": 0.0022711207841260767, "phrase": "traid."}, {"score": 0.0021202820950055193, "phrase": "log_space"}], "paper_keywords": ["RAID", " transaction processing system", " log", " ACID"], "paper_abstract": "In the past few years, more storage system applications have employed transaction processing techniques to ensure data integrity and consistency. Logging is one of the key requirements to ensure transaction Atomicity, Consistency, Isolation, Durability (ACID) properties and data recoverability in transaction processing systems (TPS). Recently, emerging complex I/O bound transactions have resulted in substantially more log content and higher log flushing latency. The latency will delay transaction commit and decrease the overall throughput of the TPS. On the other hand, RAID is widely used as the underlying storage system for Databases to guarantee system reliability and availability with high I/O performance. In this paper, we observe the overlap between the redundancies in the underlying RAID storage system and database logging system, and propose a novel reliable storage architecture called Transactional RAID (TRAID). TRAID deduplicates this overlap by only logging one compact version (XOR results) of recovery references for the updating data. It minimizes the amount of log content and thereby boosts the overall transaction processing performance. At the same time, TRAID guarantees the same RAID reliability, as well as recovery correctness and ACID semantics as current TPS setups. We experiment on two open-source database systems: Berkeley DB and PostgreSQL, with three different workloads: standard OLTP benchmark TPC-C, customized TPC-C with strong access locality, and customized TPC-C with write-intensive property. Then we test TRAID performance with \"Group Commit\" enabled. Finally, we evaluate the recovery efficiency of TRAID. Our extensive results demonstrate that for throughput, TRAID outperforms RAID by 43.24-69.5 percent for various workloads; it also saves on log space by 28.57-35.48 percent, and outperforms RAID by about 20 percent in throughput with \"Group Commit\" enabled. At last, we show that TRAID outperforms RAID from 28.7 to 35.7 percent during the recovery.", "paper_title": "TRAID: Exploiting Temporal Redundancy and Spatial Redundancy to Boost Transaction Processing Systems Performance", "paper_id": "WOS:000300574100007"}