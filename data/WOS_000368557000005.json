{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "monomorphic_transformations"}, {"score": 0.0496399520594146, "phrase": "bidirectional_transformation"}, {"score": 0.029361644060673295, "phrase": "semantic_bidirectionalization"}, {"score": 0.004669314230331563, "phrase": "source_and_view_data_objects"}, {"score": 0.004180403355909392, "phrase": "better_language_support"}, {"score": 0.003943276844539606, "phrase": "unidirectional_programs"}, {"score": 0.0039070805769954005, "phrase": "general_purpose_languages"}, {"score": 0.00369674903275185, "phrase": "voigtlander"}, {"score": 0.0035958527554878655, "phrase": "unidirectional_program"}, {"score": 0.0035409897891004105, "phrase": "arbitrary_language_constructs"}, {"score": 0.0033813554890743665, "phrase": "respect_parametricity"}, {"score": 0.003350299880802315, "phrase": "free_theorems"}, {"score": 0.0032991709808491147, "phrase": "polymorphic_type"}, {"score": 0.003218977531454772, "phrase": "forensic_examination"}, {"score": 0.0029898699347664635, "phrase": "particular_syntax"}, {"score": 0.0028200832328369816, "phrase": "polymorphism_requirement"}, {"score": 0.002709487386923251, "phrase": "type_class_packm_gamma_alpha_mu"}, {"score": 0.0026517384677659027, "phrase": "concrete_datatype_gamma"}, {"score": 0.0026112423766508543, "phrase": "type_alpha"}, {"score": 0.002508816084407055, "phrase": "type_gamma"}, {"score": 0.0024704972295365164, "phrase": "monad_mu"}, {"score": 0.0023956021950024124, "phrase": "polymorphic_ones"}, {"score": 0.002308712197991421, "phrase": "case_studies"}, {"score": 0.0022945393604862354, "phrase": "typical_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Bidirectional transformation", " Free theorem", " Type class", " Haskell"], "paper_abstract": "A bidirectional transformation is a pair of mappings between source and view data objects, one in each direction. When the view is modified, the source is updated accordingly with respect to some laws. Over the years, a lot of effort has been made to offer better language support for programming such transformations. In particular, a technique known as bidirectionalization is able to analyze and transform unidirectional programs written in general purpose languages, and \"bidirectionalize\" them. Among others, an approach termed semantic bidirectionalization proposed by Voigtlander stands out in terms of user-friendliness. A unidirectional program can be written using arbitrary language constructs, as long as the function it represents is polymorphic and the language constructs respect parametricity. The free theorems that follow from the polymorphic type of the program allow a kind of forensic examination of the transformation, determining its effect without examining its implementation. This is convenient, as the programmer is not restricted to using a particular syntax; but it does require the transformation to be polymorphic. In this paper, we lift this polymorphism requirement to improve the applicability of semantic bidirectionalization. Concretely, we provide a type class PackM gamma alpha mu, which intuitively reads \"a concrete datatype gamma is abstracted to a type alpha, and the 'observations' made by a transformation on values of type gamma are recorded by a monad mu\". With PackM, we turn monomorphic transformations into polymorphic ones that are ready to be bidirectionalized. We demonstrate our technique with case studies of typical applications of bidirectional transformation, namely text processing. XML query and graph transformation, which were commonly considered beyond semantic bidirectionalization because of their monomorphic nature. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Bidirectionalization for free for monomorphic transformations", "paper_id": "WOS:000368557000005"}