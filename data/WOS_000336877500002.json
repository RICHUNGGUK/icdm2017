{"auto_keywords": [{"score": 0.015505298357274419, "phrase": "causality_tests"}, {"score": 0.00481495049065317, "phrase": "software_defects"}, {"score": 0.0044608829094248985, "phrase": "defect_prediction_approach"}, {"score": 0.004249188865832993, "phrase": "source_code_metrics"}, {"score": 0.003749654338704576, "phrase": "granger_causality_test"}, {"score": 0.0035965032173588753, "phrase": "source_code_metrics_values"}, {"score": 0.003107935254560724, "phrase": "source_code"}, {"score": 0.0030437652050982643, "phrase": "target_system"}, {"score": 0.002980916123365584, "phrase": "high_chance"}, {"score": 0.00266693888510356, "phrase": "average_precision"}, {"score": 0.0021947755130109696, "phrase": "better_precision"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Defect prediction", " Causality", " Granger test"], "paper_abstract": "In this paper, we propose a defect prediction approach centered on more robust evidences towards causality between source code metrics (as predictors) and the occurrence of defects. More specifically, we rely on the Granger causality test to evaluate whether past variations in source code metrics values can be used to forecast changes in time series of defects. Our approach triggers alarms when changes made to the source code of a target system have a high chance of producing defects. We evaluated our approach in several life stages of four Java-based systems. We reached an average precision greater than 50% in three out of the four systems we evaluated. Moreover, by comparing our approach with baselines that are not based on causality tests, it achieved a better precision. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Predicting software defects with causality tests", "paper_id": "WOS:000336877500002"}