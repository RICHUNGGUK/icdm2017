{"auto_keywords": [{"score": 0.03789823017882356, "phrase": "code_reuse"}, {"score": 0.023662181363233437, "phrase": "type_theory"}, {"score": 0.004814955496608903, "phrase": "ornaments"}, {"score": 0.0047310525657970615, "phrase": "dependent_types"}, {"score": 0.0041102032028337366, "phrase": "construction_software"}, {"score": 0.004020813632357377, "phrase": "extreme_accuracy"}, {"score": 0.0037973594873521596, "phrase": "structuring_medium"}, {"score": 0.0037311260623089436, "phrase": "special_purpose_logic"}, {"score": 0.003682207422331339, "phrase": "domain-specific_logics"}, {"score": 0.0035705347414368696, "phrase": "similarly_structured_data"}, {"score": 0.003298631258267805, "phrase": "inductive_families"}, {"score": 0.00307431840409833, "phrase": "functional_ornaments"}, {"score": 0.002903311792572216, "phrase": "natural_numbers"}, {"score": 0.0023192471808039746, "phrase": "adding_lists"}, {"score": 0.0021049977753042253, "phrase": "generic_programs"}], "paper_keywords": ["Dependent types", " Datatype", " Ornament"], "paper_abstract": "Programming with dependent types is a blessing and a curse. It is a blessing to be able to bake invariants into the definition of datatypes: we can finally write correct-by-construction software. However, this extreme accuracy is also a curse: a datatype is the combination of a structuring medium together with a special purpose logic. These domain-specific logics hamper any effort of code reuse among similarly structured data. In this paper, we exorcise our datatypes by adapting the notion of ornament to our universe of inductive families. We then show how code reuse can be achieved by ornamenting functions. Using these functional ornaments, we capture the relationship between functions such as the addition of natural numbers and the concatenation of lists. With this knowledge, we demonstrate how the implementation of the former informs the implementation of the latter: the user can ask the definition of addition to be lifted to lists and she will only be asked the details necessary to carry on adding lists rather than numbers. Our presentation is formalised in a type theory with a universe of datatypes and all our constructions have been implemented as generic programs, requiring no extension to the type theory.", "paper_title": "Transporting Functions across Ornaments", "paper_id": "WOS:000311296000011"}