{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "commute_time"}, {"score": 0.003995226376780718, "phrase": "random_walk"}, {"score": 0.003381607100127276, "phrase": "laplacian_matrix"}, {"score": 0.0031845067058084583, "phrase": "potential_paths"}, {"score": 0.002900426826591769, "phrase": "graph_structure"}, {"score": 0.002842920225545139, "phrase": "edge_insertions"}, {"score": 0.002537880772794665, "phrase": "vector_space"}, {"score": 0.0023113506171584157, "phrase": "important_properties"}, {"score": 0.0021333110194180997, "phrase": "object_motions"}, {"score": 0.0021049977753042253, "phrase": "image_sequences"}], "paper_keywords": [""], "paper_abstract": "This paper explores the use of commute-time preserving embedding as means of data-clustering. Commute time is a measure of the time taken for a random walk to set-out and return between a pair of nodes on a graph. It may be computed from the spectrum of the Laplacian matrix. Since the commute time is averaged over all potential paths between a pair of nodes, it is potentially robust to variations in graph structure due to edge insertions or deletions. Here we demonstrate how nodes of a graph can be embedded in a vector space in a manner that preserves commute time. We present a number of important properties of the embedding. We experiment with the method for separating object motions in image sequences.", "paper_title": "Graph embedding using commute time", "paper_id": "WOS:000240075100048"}