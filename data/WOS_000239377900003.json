{"auto_keywords": [{"score": 0.04338974403055337, "phrase": "live_objects"}, {"score": 0.00481495049065317, "phrase": "advanced_reference_counting_garbage_collectors"}, {"score": 0.004562362497952548, "phrase": "modern_reference_counting"}, {"score": 0.004481132747216135, "phrase": "reference_counting_collector"}, {"score": 0.00429715240295033, "phrase": "old_generation"}, {"score": 0.004195418010131832, "phrase": "large_fraction"}, {"score": 0.003857871979942733, "phrase": "tracing_collector"}, {"score": 0.0037664981403399064, "phrase": "young_generation"}, {"score": 0.0036553070575015344, "phrase": "small_fraction"}, {"score": 0.0030171910207671205, "phrase": "new_collector"}, {"score": 0.0028076592725295646, "phrase": "concurrent_reference_counting_collector"}, {"score": 0.002741091312632307, "phrase": "jikes_rvm_package"}, {"score": 0.0026760974046034854, "phrase": "short_pause_times"}, {"score": 0.0023033100935570755, "phrase": "modern_reference"}, {"score": 0.0022895278869126848, "phrase": "counting_collector"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["runtime systems", " memory management", " garbage collection", " generational garbage collection"], "paper_abstract": "We propose the use of generations with modern reference counting. A reference counting collector is well suited to collect the old generation, containing a large fraction of live objects that are modified infrequently. Such a collector can be combined with a tracing collector to collect the young generation, typically containing a small fraction of live objects. We have designed such a collector appropriate for running on a multiprocessor. As our building blocks, we used the sliding-views on-the-fly collectors. We have implemented the new collector on the Jikes Research Java Virtual Machine (Jikes RVM) and compared it with the concurrent reference counting collector supplied with the Jikes RVM package. Our measurements demonstrate short pause times, retaining those of the original on-the-fly collectors and a gain in application throughput time. It turns out that a modern reference counting collector may benefit from the use of generations. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Integrating generations with advanced reference counting garbage collectors", "paper_id": "WOS:000239377900003"}