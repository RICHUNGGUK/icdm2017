{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "football_pool_problem"}, {"score": 0.004721162131188487, "phrase": "integer_programming"}, {"score": 0.004073359218158693, "phrase": "lottery-type_game"}, {"score": 0.003802135020791801, "phrase": "soccer_matches"}, {"score": 0.003584025547693836, "phrase": "smallest_covering_code"}, {"score": 0.0034118234596993836, "phrase": "ternary_words"}, {"score": 0.003091767402370757, "phrase": "optimal_solution"}, {"score": 0.0028293966058473476, "phrase": "isomorphism_pruning"}, {"score": 0.0027741761880779535, "phrase": "subcode_enumeration"}, {"score": 0.0026933542552712033, "phrase": "linear_programming-based_bounding"}, {"score": 0.0025638362414466278, "phrase": "high-throughput_computational_grid"}, {"score": 0.0021049977753042253, "phrase": "optimal_code"}], "paper_keywords": ["football pool problem", " high-throughput computing", " branch and bound", " Condor", " master-worker"], "paper_abstract": "The football pool problem, which gets its name from a lottery-type game where participants predict the outcome of soccer matches, is to determine the smallest covering code of radius 1 of ternary words of length v. For v = 6, the optimal solution is not known. Using a combination of isomorphism pruning, subcode enumeration, and linear programming-based bounding, running on a high-throughput computational grid consisting of thousands of processors, we are able to improve the lower bound on the size of the optimal code from 65 to 71.", "paper_title": "Improving Bounds on the Football Pool Problem by Integer Programming and High-Throughput Computing", "paper_id": "WOS:000268558800008"}