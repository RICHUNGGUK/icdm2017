{"auto_keywords": [{"score": 0.04744942451594311, "phrase": "nand_flash_memory"}, {"score": 0.039860121328897394, "phrase": "severe_performance_degradation"}, {"score": 0.02938181474528689, "phrase": "leaf_node"}, {"score": 0.02780747220505483, "phrase": "log_node"}, {"score": 0.00481495049065317, "phrase": "lsb-tree"}, {"score": 0.0045876189888390895, "phrase": "nand_flash_ssds"}, {"score": 0.004424160689087029, "phrase": "storage_device"}, {"score": 0.004388631450145507, "phrase": "embedded_systems"}, {"score": 0.004301046274139699, "phrase": "low_power_consumption"}, {"score": 0.004249332848326785, "phrase": "lower_noise"}, {"score": 0.00418134346679498, "phrase": "hard_disk"}, {"score": 0.0038728990904778678, "phrase": "conventional_disk-based_systems"}, {"score": 0.003675023529026644, "phrase": "disk-based_index_structure"}, {"score": 0.003558294449586273, "phrase": "flash_memory-based_storage_systems"}, {"score": 0.003417565253539315, "phrase": "record_insertion"}, {"score": 0.0030895394261534776, "phrase": "frequent_node_splits"}, {"score": 0.0030278017562213265, "phrase": "tree_height"}, {"score": 0.002861402531078998, "phrase": "log-structured_b-tree_index_structure"}, {"score": 0.0027041233221381756, "phrase": "modified_data"}, {"score": 0.0025658094607383646, "phrase": "single_write_operation"}, {"score": 0.0024742098091226203, "phrase": "parent_node_changes"}, {"score": 0.0024149629835339926, "phrase": "index_structure"}, {"score": 0.0023666732429695908, "phrase": "write_operations"}, {"score": 0.0022095803687183107, "phrase": "key_order"}, {"score": 0.0021049977753042253, "phrase": "related_techniques"}], "paper_keywords": ["B-Tree", " Index structure", " Access method", " NAND flash memory", " Solid state drive"], "paper_abstract": "NAND flash memory has been widely used as a storage device for embedded systems because of its fast access speed, low power consumption, and lower noise compared to a hard disk. However, due to its unique characteristics such as the lack of an in-place update and asymmetric operation speed/unit, conventional disk-based systems and applications may experience severe performance degradation when NAND flash memory is used. When a disk-based index structure such as a B-Tree is implemented in flash memory-based storage systems, intensive overwrite operations, which are caused by record insertion, deletion, and reorganization, may result in severe performance degradation. Although several index structures have been proposed to overcome this problem, they suffer from frequent node splits, rapid increments of tree height, and poor space usage. In this paper, we propose a log-structured B-Tree index structure where a log node corresponding to a leaf node is allocated for updating the modified data, and then these data in the log node are stored in a single write operation. Our proposed index structure reduces additional write operations by deferring parent node changes. In addition, the index structure reduces the number of write operations by directly switching the log node to a leaf node if the data are sequentially inserted according to key order. Through various experiments, we show that our proposed index structure performs better than related techniques.", "paper_title": "LSB-Tree: a log-structured B-Tree index structure for NAND flash SSDs", "paper_id": "WOS:000357339400004"}