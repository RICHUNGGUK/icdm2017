{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "conceptual_schema_recovery"}, {"score": 0.004775531918452571, "phrase": "data-intensive_systems"}, {"score": 0.004602085616330634, "phrase": "information_systems_reverse_engineering"}, {"score": 0.004380540407926982, "phrase": "unified_perspective"}, {"score": 0.004326833704481825, "phrase": "reverse_engineering_process"}, {"score": 0.003952513974962462, "phrase": "software_reverse_engineering"}, {"score": 0.0038561471948364723, "phrase": "program_comprehension"}, {"score": 0.003824547895167011, "phrase": "software_maintenance"}, {"score": 0.003625347557965931, "phrase": "data_reverse_engineering"}, {"score": 0.0033388871136347704, "phrase": "legacy_databases"}, {"score": 0.0031518989079229714, "phrase": "reverse_engineering"}, {"score": 0.0030623570435946977, "phrase": "information_system's_constituencies"}, {"score": 0.002999955539996569, "phrase": "higher_integration"}, {"score": 0.00292674497467906, "phrase": "better_co-evolution"}, {"score": 0.0027856252557826467, "phrase": "high_availability"}, {"score": 0.002575934917174136, "phrase": "object-relational_mapping_design_patterns"}, {"score": 0.0024215727801940434, "phrase": "conceptual_schema"}, {"score": 0.0023721974375323267, "phrase": "domain_model"}, {"score": 0.002239225269052105, "phrase": "information_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["conceptual schema", " design pattern detection", " object-relational mapping", " reverse engineering"], "paper_abstract": "In this paper, an approach for information systems reverse engineering is proposed and applied. The aim is to support a unified perspective to the reverse engineering process of both data and software. At the state of the art, indeed, many methods, techniques, and tools for software reverse engineering have been proposed to support program comprehension, software maintenance, and software evolution. Other approaches and tools have been proposed for data reverse engineering, with the aim, for example, to provide complete and up-to-date documentation of legacy databases. However, the two engineering communities often worked independently, and very few approaches addressed the reverse engineering of both data and software as information system's constituencies. Hence, a higher integration is needed to support a better co-evolution of databases and programs, in an environment often characterized by high availability of data and volatility of information flows. Accordingly, the approach we propose leverages the detection of object-relational mapping design patterns to build a conceptual schema of the software under analysis. Then, the conceptual schema is mapped to the domain model of the system, to support the design of the evolution of the information system itself. The approach is evaluated on two large-scale open-source enterprise applications. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Pattern detection for conceptual schema recovery in data-intensive systems", "paper_id": "WOS:000346649500006"}