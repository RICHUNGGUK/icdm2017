{"auto_keywords": [{"score": 0.013166097317526248, "phrase": "total_number"}, {"score": 0.01190007195138197, "phrase": "underlying_computation"}, {"score": 0.00481495049065317, "phrase": "distributed_termination_detection"}, {"score": 0.004775335634705251, "phrase": "fundamental_problem"}, {"score": 0.00472301996090111, "phrase": "distributed_computing"}, {"score": 0.0046970764288494764, "phrase": "numerous_schemes"}, {"score": 0.004671274735676484, "phrase": "different_performance_characteristics"}, {"score": 0.0043484160674570034, "phrase": "significant_drawback"}, {"score": 0.004300757253399573, "phrase": "previous_methods"}, {"score": 0.004003404177052108, "phrase": "processing_elements"}, {"score": 0.0039813976794342, "phrase": "detection_delay"}, {"score": 0.003757480190200645, "phrase": "computing_resources"}, {"score": 0.0035461111918923117, "phrase": "novel_termination_detection_algorithm"}, {"score": 0.003421245054271364, "phrase": "relevant_performance_measures"}, {"score": 0.0033190180867511605, "phrase": "best-case_detection_delay"}, {"score": 0.003264547032549398, "phrase": "finite_optimal_worst-case_detection_delay"}, {"score": 0.0032109670662222416, "phrase": "order_terms"}, {"score": 0.0030135741897058844, "phrase": "arbitrary_topology"}, {"score": 0.0029805015010906013, "phrase": "k-ary_n-cube_tori"}, {"score": 0.002939669079524801, "phrase": "worst-case_delay"}, {"score": 0.0028439325713081527, "phrase": "target_topology"}, {"score": 0.00278184186397901, "phrase": "computational_complexities"}, {"score": 0.0027361626349903744, "phrase": "worst_case"}, {"score": 0.0026616868981501006, "phrase": "average_case"}, {"score": 0.002363806685815014, "phrase": "average_message"}, {"score": 0.0023507916951658455, "phrase": "cornputational_complexities"}, {"score": 0.0022994427535192492, "phrase": "counter-overflow_problems"}, {"score": 0.002243011652519744, "phrase": "previous_schemes"}, {"score": 0.0021579641460002523, "phrase": "message_communication"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["accumulation", " broadcast", " detection delay", " distributed computation", " k-ary n-cubes", " message complexity", " message passing", " termination detection"], "paper_abstract": "Distributed termination detection is a fundamental problem in parallel and distributed computing and numerous schemes with different performance characteristics have been proposed. These schemes, while being efficient with regard to one performance metric, prove to be inefficient in terms of other metrics. A significant drawback shared by all previous methods is that, on most popular topologies, they take Omega(P) time to detect and signal termination after its actual occurrence, where P is the total number of processing elements. Detection delay is arguably the most important metric to optimize, since it is directly related to the amount of idling of computing resources and to the delay in the utilization of results of the underlying computation. In this paper, we present a novel termination detection algorithm that is simultaneously optimal or near-optimal with respect to all relevant performance measures on any topology. In particular, our algorithm has a best-case detection delay of Theta(1) and a finite optimal worst-case detection delay on any topology equal in order terms to the time for an optimal one-to-all broadcast on that topology (which we accurately characterize for an arbitrary topology). On k-ary n-cube tori and meshes, the worst-case delay is Theta(D), where D is the diameter of the target topology. Further, our algorithm has message and computational complexities of Theta(MD + P) in the worst case and, for most applications, Theta(M + P) in the average case-the same as other message-efficient algorithms, and an optimal space complexity of Theta(P), where M is the total number of messages used by the underlying computation. We also give a scheme using counters that greatly reduces the constant associated with the average message and cornputational complexities, but does not suffer from the counter-overflow problems of other schemes. Finally, unlike some previous schemes, our algorithm does not rely on first-in first-out (FIFO) ordering for message communication to work correctly. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "An efficient delay-optimal distributed termination detection algorithm", "paper_id": "WOS:000250067100001"}