{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "proof-producing_program_analysis"}, {"score": 0.0043793594257092805, "phrase": "abstract_interpreter"}, {"score": 0.0034311578789991363, "phrase": "automatic_verification_tool"}, {"score": 0.003249966782844541, "phrase": "proof-synthesis_algorithms"}, {"score": 0.0031203609829058587, "phrase": "simple_flow_chart_language"}, {"score": 0.0025804616931593897, "phrase": "code_systems"}, {"score": 0.002162951519368368, "phrase": "verified_proof"}, {"score": 0.0021049977753042253, "phrase": "code_system"}], "paper_keywords": [""], "paper_abstract": "Proof-producing program analysis augments the invariants inferred by an abstract interpreter with their correctness proofs. If these invariants are precise enough to guarantee safety, this method is an automatic verification tool. We present proof-synthesis algorithms for a simple flow chart language and domains V -> V mapping variables to abstract values and discuss some benefits for proof carrying code systems. Our work has been carried out in Isabelle/HOL and incorporated within a verified proof carrying code system.", "paper_title": "Proof-producing program analysis", "paper_id": "WOS:000243130900020"}