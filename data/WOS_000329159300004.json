{"auto_keywords": [{"score": 0.04862079694002717, "phrase": "unpredictable_latencies"}, {"score": 0.0138471518306196, "phrase": "memory_operations"}, {"score": 0.007788660652422201, "phrase": "compact_state_machine"}, {"score": 0.00481495049065317, "phrase": "optimizing_wait_states"}, {"score": 0.00470975295439431, "phrase": "memory_references"}, {"score": 0.004198510172614725, "phrase": "unpredictable_memory_latencies"}, {"score": 0.0040347380310668994, "phrase": "chip_caches"}, {"score": 0.003999217176949845, "phrase": "dram_memory_modules"}, {"score": 0.003911771812701971, "phrase": "multiport_memories"}, {"score": 0.0038431888954930083, "phrase": "high-level_synthesis_compilers"}, {"score": 0.0038093479435377764, "phrase": "fixed_and_known_memory_latencies"}, {"score": 0.003660700128133065, "phrase": "code's_operations"}, {"score": 0.00354909279546064, "phrase": "source_code"}, {"score": 0.00344087639309216, "phrase": "state_machine"}, {"score": 0.003350744226113765, "phrase": "verilog"}, {"score": 0.0032485526269852606, "phrase": "scheduling_length"}, {"score": 0.002832081745025006, "phrase": "exponential_number"}, {"score": 0.002807118943000936, "phrase": "possible_orders"}, {"score": 0.0027578496677536373, "phrase": "parallel_memory_operations"}, {"score": 0.0025692477422626678, "phrase": "different_schedule"}, {"score": 0.0023101951336207955, "phrase": "possible_termination_orders"}, {"score": 0.0022101055924375725, "phrase": "execution_time"}, {"score": 0.0021712920081029194, "phrase": "regular_scheduling"}], "paper_keywords": ["Design"], "paper_abstract": "We consider the problem of synthesizing circuits (from C to Verilog) that are optimized to handle unpredictable latencies of memory operations. Unpredictable memory latencies can occur due to the use of on chip caches, DRAM memory modules, buffers/queues, or multiport memories. Typically, high-level synthesis compilers assume fixed and known memory latencies, and thus are able to schedule the code's operations efficiently. The operations in the source code are scheduled into states of a state machine whose states will be synthesized to Verilog. The goal is to minimize scheduling length by maximizing the number of operations (and in particular memory operations) that are executed in parallel at the same state. However, with unpredictable latencies, there can be an exponential number of possible orders in which these parallel memory operations can terminate. Thus, in order to minimize the scheduling, we need a different schedule for any such order. This is not practical, and we show a technique of synthesizing a compact state machine that schedules only a small subset of these possible termination orders. Our results show that this compact state machine can improve the execution time compared to a regular scheduling that waits for the termination of all the active memory references in every state.", "paper_title": "Optimizing Wait States in the Synthesis of Memory References with Unpredictable Latencies", "paper_id": "WOS:000329159300004"}