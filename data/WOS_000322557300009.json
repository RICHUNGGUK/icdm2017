{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "word_languages"}, {"score": 0.004613940521007727, "phrase": "computational_object"}, {"score": 0.0043511221096418475, "phrase": "obvious_approach"}, {"score": 0.00378767277402891, "phrase": "database_community"}, {"score": 0.003727527379253624, "phrase": "integrity_constraints"}, {"score": 0.003629392214109574, "phrase": "ai_community"}, {"score": 0.0035908627899097407, "phrase": "propositional_logics"}, {"score": 0.003010893527930816, "phrase": "input_string"}, {"score": 0.002662871928330334, "phrase": "bounded_repair_problem"}, {"score": 0.00256514094268541, "phrase": "regular_languages"}, {"score": 0.002405853977978678, "phrase": "repair_strategy"}, {"score": 0.002256435842862802, "phrase": "streaming_way"}, {"score": 0.002196944917134202, "phrase": "letter-to-letter_transducer"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Bounded repair", " Edit distance", " Regular languages"], "paper_abstract": "What do you do if a computational object (e.g. program trace) fails a specification? An obvious approach is to perform a repair: modify the object minimally to get something that satisfies the constraints. This approach has been investigated in the database community, for integrity constraints, and in the AI community for propositional logics. Here we study how difficult it is to repair a document in the form of a string. Specifically, we consider number of edits that must be applied to an input string in order to satisfy a given target language. This number may be unbounded; our main contribution is to. isolate the complexity of the bounded repair problem based on a characterization of the regular languages that admit bounded repairr. We consider the settings where the repair strategy is unconstrained and when the editing must be produced in a streaming way, i.e. by a letter-to-letter transducer. (C) 2013 Published by Elsevier Inc.", "paper_title": "Bounded repairability of word languages", "paper_id": "WOS:000322557300009"}