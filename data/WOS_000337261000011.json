{"auto_keywords": [{"score": 0.004764859786310636, "phrase": "synchronous_systems"}, {"score": 0.004593591780245872, "phrase": "customer_actions"}, {"score": 0.004522080178250592, "phrase": "complex_software_system"}, {"score": 0.004405348628112645, "phrase": "cloud_computing_system"}, {"score": 0.0042692243768616455, "phrase": "main_issues"}, {"score": 0.004115697805448384, "phrase": "private_computation"}, {"score": 0.003905864553426306, "phrase": "coordination_paradigm"}, {"score": 0.0037261429556468217, "phrase": "resource_r"}, {"score": 0.0031513240597392843, "phrase": "resource_slots"}, {"score": 0.0029438813080245544, "phrase": "specific_process"}, {"score": 0.002867771524071872, "phrase": "distributed_algorithm"}, {"score": 0.0028378798711397235, "phrase": "oblivious_assignment"}, {"score": 0.0027645030021576926, "phrase": "distributed_system"}, {"score": 0.0022299587520401747, "phrase": "rotating_token_paradigm"}, {"score": 0.0021383680500215267, "phrase": "probabilistic_analysis"}, {"score": 0.0021049977753042253, "phrase": "average_waiting_time"}], "paper_keywords": ["Distributed coordination abstractions", " Secure computations", " Mutual exclusion", " Distributed systems", " Failures"], "paper_abstract": "Preserving anonymity and privacy of customer actions within a complex software system, such as a cloud computing system, is one of the main issues that should be addressed to boost private computation outsourcing. In this paper, we propose a coordination paradigm, namely oblivious assignment with m slots of a resource R (with m >= 1), allowing processes to compete in order to get a slot of R, while ensuring at the same time both fairness in the assignment of resource slots and that no process learns which slot of R is assigned to a specific process. We present a distributed algorithm solving oblivious assignment with m slots within a distributed system, assuming (1) a bounded number of crash failures f, (2) the existence of at least f + 2 honest processes, and (3) m <= n (where n is the number of processes). The algorithm is based on a rotating token paradigm and its correctness is formally proved. A probabilistic analysis of the average waiting time before getting a slot is also provided. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Fault-tolerant oblivious assignment with m slots in synchronous systems", "paper_id": "WOS:000337261000011"}