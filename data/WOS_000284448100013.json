{"auto_keywords": [{"score": 0.04084574972884765, "phrase": "non_volatile_device"}, {"score": 0.034974622364427145, "phrase": "nand_flash_memory"}, {"score": 0.025460412214399628, "phrase": "non_volatile_cache"}, {"score": 0.00481495049065317, "phrase": "flash_non-volatile_cache"}, {"score": 0.0047472380621488616, "phrase": "disk_based_storage_systems"}, {"score": 0.004724878518219719, "phrase": "non_volatile_write_caches"}, {"score": 0.004422632150619634, "phrase": "data_consistency"}, {"score": 0.00438105507792004, "phrase": "flit_level"}, {"score": 0.0043194180167921165, "phrase": "storage_controller_write_cache_policies"}, {"score": 0.0038564191670589884, "phrase": "existing_work"}, {"score": 0.0037486121194392564, "phrase": "basic_cache_operations"}, {"score": 0.00326840809777013, "phrase": "based_mobile_storage_systems"}, {"score": 0.0032530123848073297, "phrase": "paw"}, {"score": 0.0030881143614111552, "phrase": "sequential_accesses"}, {"score": 0.003030247482854539, "phrase": "mobile_storage_systems"}, {"score": 0.0027567336518542858, "phrase": "synergistic_effect"}, {"score": 0.0027050595279115015, "phrase": "pattern_aware_write_cache_policy"}, {"score": 0.0025316905609748135, "phrase": "overall_system"}, {"score": 0.002426137929553724, "phrase": "practical_hard_disk_simulator"}, {"score": 0.002358220053411644, "phrase": "nand_flash_memory_experimental_results"}, {"score": 0.002155412043665635, "phrase": "traditional_one"}, {"score": 0.002125020720324262, "phrase": "high_efficiency"}, {"score": 0.0021049977753042253, "phrase": "energy_consumption"}], "paper_keywords": ["disk based storage systems", " non volatile cache", " NAND flash memory", " pattern aware write cache policy", " I/O clustering performance enhancement"], "paper_abstract": "In disk based storage systems non volatile write caches have been widely used to reduce write latency as well as to ensure data consistency at flit level of a storage controller Write cache policies should basically consider which data is important to cache and evict and they should also take into account the real I/O features of a non volatile device However existing work has mainly focused on improving basic cache operations but has not considered the I/O cost of a non volatile device properly In this paper we propose a pattern aware write cache policy PAW for a NAND flash memory in disk based mobile storage systems PAW is designed to face a mix of a number of sequential accesses and fewer non sequential ones in mobile storage systems by redirecting the latter to a NAND flash memory and the former to a disk In addition PAW em ploys the synergistic effect of combining a pattern aware write cache policy and an I/O clustering based queuing method to strengthen the sequentiality with the aim of reducing the overall system I/O latency For evaluations we have built a practical hard disk simulator with a non volatile cache of a NAND flash memory Experimental results show that our policy significantly improves the overall I/O performance by reducing the overhead from a non volatile cache considerably over a traditional one achieving a high efficiency in energy consumption.", "paper_title": "PAW: A Pattern-Aware Write Policy for a Flash Non-volatile Cache", "paper_id": "WOS:000284448100013"}