{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "heterogeneous_multicore_systems"}, {"score": 0.004767546015485477, "phrase": "energy-efficient_speculative_thread_execution"}, {"score": 0.004628101576367193, "phrase": "multicore_processors"}, {"score": 0.004448471107649881, "phrase": "fine-grained_thread-level_parallelism"}, {"score": 0.0043183186953102805, "phrase": "fast_on-chip_interconnection_communication"}, {"score": 0.004212759658511567, "phrase": "aggressive_nature"}, {"score": 0.004150661689086371, "phrase": "execution_models"}, {"score": 0.004069280130346136, "phrase": "excessive_energy_consumption_incommensurate"}, {"score": 0.004029187256595917, "phrase": "execution_time_reduction"}, {"score": 0.003911253966141701, "phrase": "thread-level_speculation"}, {"score": 0.003778004256546193, "phrase": "same-isa_heterogeneous_multicore_system"}, {"score": 0.003667395956878177, "phrase": "on-chip_resources"}, {"score": 0.0035954555250614197, "phrase": "speculative_threads"}, {"score": 0.0035424245257172234, "phrase": "performance_gain"}, {"score": 0.0034901729647741353, "phrase": "energy-efficient_way"}, {"score": 0.003421697038352743, "phrase": "systematic_design_space_exploration"}, {"score": 0.0033379819706003885, "phrase": "multicore_architecture"}, {"score": 0.0032887360307856635, "phrase": "heterogeneous_components"}, {"score": 0.0032563083791198534, "phrase": "processing_cores"}, {"score": 0.0032241994368246065, "phrase": "first-level_caches"}, {"score": 0.0031453010852936334, "phrase": "processor_reconfiguration_overheads"}, {"score": 0.00308357048262018, "phrase": "runtime_mechanisms"}, {"score": 0.0029784342137867776, "phrase": "program_execution"}, {"score": 0.0028203950416405563, "phrase": "dynamic_resource_allocation_scheme"}, {"score": 0.0027787638791664663, "phrase": "program_behaviors"}, {"score": 0.0027513507830537165, "phrase": "novel_processor_counters"}, {"score": 0.0026839922027139967, "phrase": "proposed_heterogeneous_system"}, {"score": 0.0026443691099806003, "phrase": "diverse_set"}, {"score": 0.002618278365749875, "phrase": "benchmark_programs"}, {"score": 0.002442693254693416, "phrase": "similar_performance"}, {"score": 0.0021049977753042253, "phrase": "energy-delay-squared_product"}], "paper_keywords": ["Thread-Level Speculation", " energy efficiency", " heterogeneous multicore", " dynamic resource allocation"], "paper_abstract": "With the emergence of multicore processors, various aggressive execution models have been proposed to exploit fine-grained thread-level parallelism, taking advantage of the fast on-chip interconnection communication. However, the aggressive nature of these execution models often leads to excessive energy consumption incommensurate to execution time reduction. In the context of Thread-Level Speculation, we demonstrated that on a same-ISA heterogeneous multicore system, by dynamically deciding how on-chip resources are utilized, speculative threads can achieve performance gain in an energy-efficient way. Through a systematic design space exploration, we built a multicore architecture that integrates heterogeneous components of processing cores and first-level caches. To cope with processor reconfiguration overheads, we introduced runtime mechanisms to mitigate their impacts. To match program execution with the most energy-efficient processor configuration, the system was equipped with a dynamic resource allocation scheme that characterizes program behaviors using novel processor counters. We evaluated the proposed heterogeneous system with a diverse set of benchmark programs from SPEC CPU2000 and CPU20006 suites. Compared to the most efficient homogeneous TLS implementation, we achieved similar performance but consumed 18% less energy. Compared to the most efficient homogeneous uniprocessor running sequential programs, we improved performance by 29% and reduced energy consumption by 3.6%, which is a 42% improvement in energy-delay-squared product.", "paper_title": "The Design and Implementation of Heterogeneous Multicore Systems for Energy-efficient Speculative Thread Execution", "paper_id": "WOS:000330509300005"}