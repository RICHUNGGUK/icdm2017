{"auto_keywords": [{"score": 0.0491952477301852, "phrase": "circuit_constraint"}, {"score": 0.00481495049065317, "phrase": "circuit_propagation"}, {"score": 0.004225950334493496, "phrase": "resulting_edges"}, {"score": 0.0037087324991876727, "phrase": "graph_problems"}, {"score": 0.0032953582866530966, "phrase": "lazy_clause_generation_solver"}, {"score": 0.00265038878247831, "phrase": "propagation_algorithm"}, {"score": 0.002444333100610621, "phrase": "propagation_complexity"}, {"score": 0.002384206251320424, "phrase": "simpler_propagators"}, {"score": 0.0021049977753042253, "phrase": "huge_explanations"}], "paper_keywords": ["Circuit", " Constraint propagation", " Explanation"], "paper_abstract": "The circuit constraint is used to constrain a graph represented by a successor for each node, such that the resulting edges form a circuit. Circuit and its variants are important for various kinds of tour-finding, path-finding and graph problems. In this paper we examine how to integrate the circuit constraint, and its variants, into a lazy clause generation solver. To do so we must extend the constraint to explain its propagation. We consider various propagation algorithms for circuit and examine how best to explain each of them. We compare the effectiveness of each propagation algorithm once we use explanation, since adding explanation changes the trade-off between propagation complexity and power. Simpler propagators, although less powerful, may produce more reusable explanations. Even though the most powerful propagator considered for circuit and variants creates huge explanations, we find that explanation is highly advantageous for solving problems involving this kind of constraint.", "paper_title": "Explaining circuit propagation", "paper_id": "WOS:000329319300001"}