{"auto_keywords": [{"score": 0.04071321179847176, "phrase": "multi-core_dsps"}, {"score": 0.033804577972842746, "phrase": "openmdsp"}, {"score": 0.00481495049065317, "phrase": "program_multi-core_dsps"}, {"score": 0.004782587436296574, "phrase": "multi-core_digital_signal_processors"}, {"score": 0.004655285779819366, "phrase": "wireless_telecommunication"}, {"score": 0.004623990904432388, "phrase": "core_network_transcoding"}, {"score": 0.004592905436175987, "phrase": "industrial_control"}, {"score": 0.004425616928975799, "phrase": "general-purpose_multi-processors"}, {"score": 0.004235717186207754, "phrase": "on-chip_core-local_memory"}, {"score": 0.004040275465056206, "phrase": "efficient_multi-core_dsp_applications"}, {"score": 0.003932654396285872, "phrase": "current_approach"}, {"score": 0.0038278890186559276, "phrase": "proprietary_vendor_software_development_kits"}, {"score": 0.003626626504149897, "phrase": "coarse-grained_task-level_parallel_code"}, {"score": 0.0035539019235553897, "phrase": "fine-grained_data"}, {"score": 0.003344332868248692, "phrase": "high-level_and_portable_parallel_prog-ramming_model"}, {"score": 0.0029815085406590426, "phrase": "openmp_memory_model"}, {"score": 0.002951444412262927, "phrase": "memory_hierarchy"}, {"score": 0.0027400176498756823, "phrase": "global_variables"}, {"score": 0.0026759663480185047, "phrase": "whole_array"}, {"score": 0.0026045914281028473, "phrase": "core-local_memory"}, {"score": 0.00252656192077797, "phrase": "access_directives"}, {"score": 0.002501073751997206, "phrase": "big_arrays"}, {"score": 0.0024842242921857705, "phrase": "core-local_memory_section"}, {"score": 0.002450864311898833, "phrase": "parallel_loop_processing"}, {"score": 0.0024016604071771556, "phrase": "data_movement"}, {"score": 0.0023774292521631093, "phrase": "direct_memory"}, {"score": 0.0022829193139224636, "phrase": "runtime_system"}, {"score": 0.002222004614440872, "phrase": "benchmarking_results"}, {"score": 0.002199582070223336, "phrase": "seven_of_nine_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "six_threads"}], "paper_keywords": ["OpenMP", " multi-core digital signal processor", " data parallelism", " Long Term Evolution"], "paper_abstract": "Multi-core digital signal processors (DSPs) are widely used in wireless telecommunication, core network transcoding, industrial control, and audio/video processing technologies, among others. In comparison with general-purpose multi-processors, multi-core DSPs normally have a more complex memory hierarchy, such as on-chip core-local memory and non-cache-coherent shared memory. As a result, efficient multi-core DSP applications are very difficult to write. The current approach used to program multi-core DSPs is based on proprietary vendor software development kits (SDKs), which only provide low-level, non-portable primitives. While it is acceptable to write coarse-grained task-level parallel code with these SDKs, writing fine-grained data parallel code with SDKs is a very tedious and error-prone approach. We believe that it is desirable to possess a high-level and portable parallel prog-ramming model for multi-core DSPs. In this paper, we propose OpenMDSP, an extension of OpenMP designed for multi-core DSPs. The goal of OpenMDSP is to fill the gap between the OpenMP memory model and the memory hierarchy of multi-core DSPs. We propose three classes of directives in OpenMDSP, including 1) data placement directives that allow programmers to control the placement of global variables conveniently, 2) distributed array directives that divide a whole array into sections and promote the sections into core-local memory to improve performance, and 3) stream access directives that promote big arrays into core-local memory section by section during parallel loop processing while hiding the latency of data movement by the direct memory access (DMA) of a DSP. We implement the compiler and runtime system for OpenMDSP on-PreeScale MSC8156. The benchmarking results show that seven of nine benchmarks achieve a speedup of more than a factor of 5 when using six threads.", "paper_title": "OpenMDSP: Extending OpenMP to Program Multi-Core DSPs", "paper_id": "WOS:000333071200014"}