{"auto_keywords": [{"score": 0.03657526290162966, "phrase": "gpufs"}, {"score": 0.00481495049065317, "phrase": "file_system"}, {"score": 0.00466877910546307, "phrase": "gpu_hardware"}, {"score": 0.004611554879923759, "phrase": "increasingly_general-purpose"}, {"score": 0.004335739075947899, "phrase": "gpu-as-coprocessor_programming_model"}, {"score": 0.004152502093643003, "phrase": "standard_operating_system_services"}, {"score": 0.0039281997063335735, "phrase": "program_development"}, {"score": 0.0038561471948364723, "phrase": "harmonious_integration"}, {"score": 0.0037621210719690594, "phrase": "computing_systems"}, {"score": 0.0033251716926666437, "phrase": "operating_system_support"}, {"score": 0.0032641439000713306, "phrase": "host_files"}, {"score": 0.003204232566468624, "phrase": "gpu_programs"}, {"score": 0.0031068064097811844, "phrase": "posix-like_api"}, {"score": 0.0030497740719977835, "phrase": "gpu_parallelism"}, {"score": 0.002938821840519756, "phrase": "gpu_file_access"}, {"score": 0.0028494425496120228, "phrase": "cpu's_buffer_cache"}, {"score": 0.0028146689025466223, "phrase": "gpu"}, {"score": 0.0026458370516131255, "phrase": "real_benchmarks"}, {"score": 0.0024416087858984644, "phrase": "gpufs_approach"}, {"score": 0.0023527296826339225, "phrase": "self-contained_gpu_program"}, {"score": 0.0022117133940361025, "phrase": "linux_kernel_source_tree"}, {"score": 0.0021710766932077972, "phrase": "seven_times"}, {"score": 0.0021049977753042253, "phrase": "eight-core_cpu."}], "paper_keywords": ["Performance", " Accelerators", " operating systems", " operating systems design", " GPGPUs", " file systems"], "paper_abstract": "As GPU hardware becomes increasingly general-purpose, it is quickly outgrowing the traditional, constrained GPU-as-coprocessor programming model. This article advocates for extending standard operating system services and abstractions to GPUs in order to facilitate program development and enable harmonious integration of GPUs in computing systems. As an example, we describe the design and implementation of GPUfs, a software layer which provides operating system support for accessing host files directly from GPU programs. GPUfs provides a POSIX-like API, exploits GPU parallelism for efficiency, and optimizes GPU file access by extending the host CPU's buffer cache into GPU memory. Our experiments, based on a set of real benchmarks adapted to use our file system, demonstrate the feasibility and benefits of the GPUfs approach. For example, a self-contained GPU program that searches for a set of strings throughout the Linux kernel source tree runs over seven times faster than on an eight-core CPU.", "paper_title": "GPUfs: Integrating a File System with GPUs", "paper_id": "WOS:000332125400001"}