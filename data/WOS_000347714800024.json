{"auto_keywords": [{"score": 0.03763600647701688, "phrase": "directed_containers"}, {"score": 0.0047666846164153955, "phrase": "altenkirch"}, {"score": 0.004718898871378659, "phrase": "ghani"}, {"score": 0.004331501320993783, "phrase": "container_representations"}, {"score": 0.003780286517897356, "phrase": "additional_structure"}, {"score": 0.0035048567587934254, "phrase": "common_situation"}, {"score": 0.0030895394261534776, "phrase": "natural_examples"}, {"score": 0.003058515297281172, "phrase": "non-empty_lists"}, {"score": 0.0030278017562213265, "phrase": "node-labelled_trees"}, {"score": 0.0029374939071038146, "phrase": "designated_position"}, {"score": 0.002821247621250663, "phrase": "set_functors"}, {"score": 0.0027788478707700274, "phrase": "fully-faithful_functor"}, {"score": 0.002437012847684331, "phrase": "directed_container"}, {"score": 0.0021049977753042253, "phrase": "dependently_typed_programming_language_agda"}], "paper_keywords": ["containers", " comonads", " datatypes", " dependently typed programming Agda"], "paper_abstract": "Abbott, Altenkirch, Ghani and others have taught us that many parameterized datatypes (set functors) can be usefully analyzed via container representations in terms of a set of shapes and a set of positions in each shape. This paper builds on the observation that datatypes often carry additional structure that containers alone do not account for. kVe introduce directed containers to capture the common situation where every position in a data-structure determines another data-structure, informally, the sub-data-structure rooted by that position. Some natural examples are non-empty lists and node-labelled trees, and data-structures with a designated position (zippers). While containers denote set functors via a fully-faithful functor, directed containers interpret fully-faithfully into comonads. But more is true: every comonad whose underlying functor is a container is represented by a directed container. In fact, directed containers are the same as containers that are comonads. We also describe some constructions of directed containers. We have formalized our development in the dependently typed programming language Agda.", "paper_title": "WHEN IS A CONTAINER A COMONAD?", "paper_id": "WOS:000347714800024"}