{"auto_keywords": [{"score": 0.04977563261359395, "phrase": "representative_sets"}, {"score": 0.045574376585012566, "phrase": "bodlaender_et_al"}, {"score": 0.015719716506582538, "phrase": "dynamic_programming"}, {"score": 0.015137772210423592, "phrase": "tree_decompositions"}, {"score": 0.010468431202570535, "phrase": "experimental_evaluation"}, {"score": 0.004664352260912174, "phrase": "steiner_tree"}, {"score": 0.0045328270272981825, "phrase": "frequently_used_approach"}, {"score": 0.004489810932879285, "phrase": "otherwise_intractable_problems"}, {"score": 0.00443308765153716, "phrase": "small_treewidth"}, {"score": 0.004391013899148212, "phrase": "recent_work"}, {"score": 0.004068427912211707, "phrase": "lecture_notes"}, {"score": 0.004042635935882651, "phrase": "computer_science"}, {"score": 0.004017062335824345, "phrase": "springer"}, {"score": 0.003991565915247661, "phrase": "berlin"}, {"score": 0.0037217945534790903, "phrase": "time_linear"}, {"score": 0.003559675269411366, "phrase": "tree_decomposition"}, {"score": 0.003492367968148819, "phrase": "central_idea"}, {"score": 0.003287482882222731, "phrase": "gaussian_elimination"}, {"score": 0.0031342307827666675, "phrase": "steiner_tree_problem"}, {"score": 0.0030847461428168614, "phrase": "classic_dynamic_programming_algorithm"}, {"score": 0.0030554300179552415, "phrase": "improved_dynamic_programming_algorithm"}, {"score": 0.003026391655379905, "phrase": "table_reduction"}, {"score": 0.002988101395789399, "phrase": "new_approach"}, {"score": 0.0029691377785333872, "phrase": "significant_improvements"}, {"score": 0.0029409171055888804, "phrase": "running_time"}, {"score": 0.002821685815956478, "phrase": "dynamic_programming_algorithm"}, {"score": 0.0026560424475094396, "phrase": "significant_theoretical_improvements"}, {"score": 0.0026140878612307536, "phrase": "viable_approach"}, {"score": 0.0025892330566358503, "phrase": "practical_setting"}, {"score": 0.002468450551616404, "phrase": "dynamic_programming_algorithms"}, {"score": 0.0024140251288559188, "phrase": "alternative_representation"}, {"score": 0.0023986960505076784, "phrase": "partial_solutions"}, {"score": 0.0023834640793589414, "phrase": "weighted_bit_strings"}, {"score": 0.002316105585203396, "phrase": "reduction_step"}], "paper_keywords": ["Experimental evaluation", " Algorithm engineering", " Steiner tree", " Treewidth", " Dynamic programming", " Exact algorithms"], "paper_abstract": "Dynamic programming on tree decompositions is a frequently used approach to solve otherwise intractable problems on instances of small treewidth. In recent work by Bodlaender et al. (Proceedings of the 40th international colloquium on automata, languages and programming, ICALP 2013, part I, volume 7965 of Lecture Notes in Computer Science. Springer, Berlin, pp 196-207, 2013), it was shown that for many connectivity problems, there exist algorithms that use time linear in the number of vertices and single exponential in the width of the tree decomposition that is used. The central idea is that it suffices to compute representative sets, and that these can be computed efficiently with help of Gaussian elimination. In this paper, we give an experimental evaluation of this technique for the Steiner Tree problem. Our comparison of the classic dynamic programming algorithm and the improved dynamic programming algorithm that employs table reduction shows that the new approach gives significant improvements on the running time of the algorithm and the size of the tables computed by the dynamic programming algorithm. Thus, the rank-based approach from Bodlaender et al. (2013) does not only give significant theoretical improvements but also is a viable approach in a practical setting, and showcases the potential of exploiting the idea of representative sets for speeding up dynamic programming algorithms. Furthermore, we propose an alternative representation of partial solutions using weighted bit strings in order to circumvent a part of the reduction step that is computationally expensive in practice. In the experimental evaluation we find that this representation yields further significant improvements. We show that the representation can also be used for the other problems fitting in the framework of Bodlaender et al. (2013).", "paper_title": "Speeding Up Dynamic Programming with Representative Sets: An Experimental Evaluation of Algorithms for Steiner Tree on Tree Decompositions", "paper_id": "WOS:000350232300006"}