{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "nonaccessible_applications"}, {"score": 0.004646258518859209, "phrase": "apple_human_interface_guidelines"}, {"score": 0.00430067200637091, "phrase": "best_user_experience"}, {"score": 0.003818326867123525, "phrase": "special_need"}, {"score": 0.0032130703855586685, "phrase": "already_existing_applications"}, {"score": 0.002991524908432975, "phrase": "source_code"}, {"score": 0.0028185852354729026, "phrase": "mach_code_injection_techniques"}, {"score": 0.0026241684260044414, "phrase": "enabled_application"}, {"score": 0.002371424085814217, "phrase": "case_study"}, {"score": 0.0022209780222461587, "phrase": "protools"}], "paper_keywords": [""], "paper_abstract": "Apple Human Interface Guidelines state that all applications should be accessible in order to provide the best user experience. Not all software vendors honor this statement and if an application does not support accessibility, people with disability or a special need can hardly use it or cannot use it at all. The purpose of this paper is to present a method that is capable of extending an already existing applications to support accessibility without the necessity to have access to the source code of the application. Paper proposes the use of Mach code injection techniques to load access enabling code into the context of the access enabled application and describes ways that are used to make the application accessible. There is also a case study of proposals offered by this paper on a portion of ProTools, a professional audio editing software that makes its mix table window accessible.", "paper_title": "Making nonaccessible applications accessible for visually impaired", "paper_id": "WOS:000239519000153"}