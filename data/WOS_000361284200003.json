{"auto_keywords": [{"score": 0.038769847507469174, "phrase": "undefined_behavior"}, {"score": 0.00481495049065317, "phrase": "provably_correct_peephole_optimizations"}, {"score": 0.004386063799793622, "phrase": "peephole_optimizations"}, {"score": 0.004103212598803194, "phrase": "llvm_code"}, {"score": 0.0035197152758635344, "phrase": "persistent_source"}, {"score": 0.0032925489316383955, "phrase": "domain-specific_language"}, {"score": 0.0026593184154220123, "phrase": "llvm_optimization_pass"}, {"score": 0.0024545413637350765, "phrase": "formal_methods"}, {"score": 0.002250415129116109, "phrase": "detailed_semantics"}, {"score": 0.00216200523125199, "phrase": "llvm."}], "paper_keywords": ["Compiler Verification", " Peephole Optimization", " Alive"], "paper_abstract": "Compilers should not miscompile. Our work addresses problems in developing peephole optimizations that perform local rewriting to improve the efficiency of LLVM code. These optimizations are individually difficult to get right, particularly in the presence of undefined behavior; taken together they represent a persistent source of bugs. This paper presents Alive, a domain-specific language for writing optimizations and for automatically either proving them correct or else generating counterexamples. Furthermore, Alive can be automatically translated into C++ code that is suitable for inclusion in an LLVM optimization pass. Alive is based on an attempt to balance usability and formal methods; for example, it captures-but largely hides-the detailed semantics of three different kinds of undefined behavior in LLVM. We have translated more than 300 LLVM optimizations into Alive and, in the process, found that eight of them were wrong.", "paper_title": "Provably Correct Peephole Optimizations with Alive", "paper_id": "WOS:000361284200003"}