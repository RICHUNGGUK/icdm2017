{"auto_keywords": [{"score": 0.04423467024884345, "phrase": "free_theorems"}, {"score": 0.02541256864521331, "phrase": "invariance_properties"}, {"score": 0.00481495049065317, "phrase": "algebraically_indexed_types"}, {"score": 0.0047761092701293474, "phrase": "reynolds'_relational_parametricity"}, {"score": 0.004718431349852634, "phrase": "powerful_way"}, {"score": 0.004494570360108983, "phrase": "data_representation"}, {"score": 0.004440277230269978, "phrase": "dazzling_array"}, {"score": 0.00436890075128947, "phrase": "reynolds'_theory"}, {"score": 0.004045157344249484, "phrase": "algebraic_datatypes"}, {"score": 0.003996271202811961, "phrase": "computer_science"}, {"score": 0.003916098498242888, "phrase": "common_theme"}, {"score": 0.003370565320453525, "phrase": "invariant_relationship"}, {"score": 0.003107935254560724, "phrase": "algebraic_structure"}, {"score": 0.0029244418026475832, "phrase": "programming_languages"}, {"score": 0.002865710140187219, "phrase": "algebraic_structures"}, {"score": 0.0028081546657056948, "phrase": "geometric_transformations"}, {"score": 0.002696479050724968, "phrase": "information_flow_security"}, {"score": 0.002578745296475411, "phrase": "analytic_uniform_continuity_properties"}, {"score": 0.0024963543716522087, "phrase": "general_abstraction_theorem"}, {"score": 0.0022923586577645143, "phrase": "non-definability_results"}, {"score": 0.0022011501095573747, "phrase": "trivial_programs"}, {"score": 0.002105031631462803, "phrase": "coq"}], "paper_keywords": ["Languages", " Theory", " Types", " parametricity", " units of measure", " dimensional analysis", " invariance", " computational geometry", " information flow", " metric types", " uniform continuity"], "paper_abstract": "Reynolds' relational parametricity provides a powerful way to reason about programs in terms of invariance under changes of data representation. A dazzling array of applications of Reynolds' theory exists, exploiting invariance to yield \"free theorems\", non-inhabitation results, and encodings of algebraic datatypes. Outside computer science, invariance is a common theme running through many areas of mathematics and physics. For example, the area of a triangle is unaltered by rotation or flipping. If we scale a triangle, then we scale its area, maintaining an invariant relationship between the two. The transformations under which properties are invariant are often organised into groups, with the algebraic structure reflecting the composability and invertibility of transformations. In this paper, we investigate programming languages whose types are indexed by algebraic structures such as groups of geometric transformations. Other examples include types indexed by principals-for information flow security-and types indexed by distances-for analysis of analytic uniform continuity properties. Following Reynolds, we prove a general Abstraction Theorem that covers all these instances. Consequences of our Abstraction Theorem include free theorems expressing invariance properties of programs, type isomorphisms based on invariance properties, and non-definability results indicating when certain algebraically indexed types are uninhabited or only inhabited by trivial programs. We have fully formalised our framework and most examples in Coq.", "paper_title": "Abstraction and Invariance for Algebraically Indexed Types", "paper_id": "WOS:000318629900009"}