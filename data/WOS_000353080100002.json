{"auto_keywords": [{"score": 0.042335347716798595, "phrase": "modeling_languages"}, {"score": 0.03269788843226681, "phrase": "model_migration"}, {"score": 0.00481495049065317, "phrase": "graph_transformation"}, {"score": 0.004774937143916685, "phrase": "model-driven_engineering"}, {"score": 0.004676345706416371, "phrase": "primary_artifacts"}, {"score": 0.004618166136069052, "phrase": "software_development_process"}, {"score": 0.004447915226010682, "phrase": "model-to-code_transformations"}, {"score": 0.004283913685201902, "phrase": "specific_domains"}, {"score": 0.004160531596936783, "phrase": "software_developers"}, {"score": 0.004074574278425223, "phrase": "generated_software"}, {"score": 0.003875424718379985, "phrase": "existing_models"}, {"score": 0.0037480753312398754, "phrase": "manual_migration"}, {"score": 0.003334309053314909, "phrase": "migration_results"}, {"score": 0.0031186510842824626, "phrase": "formal_framework"}, {"score": 0.003028727936200845, "phrase": "specific_modeling_approaches"}, {"score": 0.0027857990883821504, "phrase": "coupled_graph_transformations"}, {"score": 0.0026494723416072316, "phrase": "model_migrations"}, {"score": 0.0025838249689625775, "phrase": "existing_solutions"}, {"score": 0.00241658945942583, "phrase": "high-level_specification_approach"}, {"score": 0.0022601535748259785, "phrase": "meta-model_evolution_rule"}, {"score": 0.00223196703759329, "phrase": "default_migration_scheme"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Meta-model evolution", " Model migration", " Graph transformation"], "paper_abstract": "Model-driven engineering focuses on models as primary artifacts of the software development process, which means programs are mainly generated by model-to-code transformations. In particular, modeling languages tailored to specific domains promise to increase the productivity of software developers and the quality of generated software. Modeling languages, however, evolve over time and therefore, existing models have to be migrated accordingly. The manual migration of models tends to be tedious and error-prone, therefore tools have been developed to (partly) automate this process. Nevertheless, the migration results may not always be well-defined. In this article, we provide a formal framework for model migration which is independent of specific modeling approaches. We treat modeling languages, formalized by metamodels, as well as models as graphs and consider their co-evolutions as coupled graph transformations. In the same line, we study the conditions under which model migrations are well-defined. Existing solutions to model migration are either handwritten or default solutions that can hardly be customized. Here, we introduce a high-level specification approach, called model migration schemes, that supports automation and customization. Starting from a meta-model evolution rule, a default migration scheme can be automatically deduced and customized. (C) 2015 Published by Elsevier B.V.", "paper_title": "Co-evolving meta-models and their instance models: A formal approach based on graph transformation", "paper_id": "WOS:000353080100002"}