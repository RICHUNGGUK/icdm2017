{"auto_keywords": [{"score": 0.03598871877647395, "phrase": "archtrace"}, {"score": 0.01243359832924262, "phrase": "architectural_elements"}, {"score": 0.00481495049065317, "phrase": "architecture-to-implementation_traceability_links"}, {"score": 0.004617949594931096, "phrase": "multiple_representations"}, {"score": 0.004228016636379321, "phrase": "software_architecture"}, {"score": 0.004169519409162853, "phrase": "architecture-based_development"}, {"score": 0.004036141321779216, "phrase": "architectural_descriptions"}, {"score": 0.00399881984083004, "phrase": "corresponding_source_code"}, {"score": 0.00372965096877929, "phrase": "source_code_configuration_items"}, {"score": 0.003593555152077465, "phrase": "new_versions"}, {"score": 0.0035110198699787013, "phrase": "source_code"}, {"score": 0.003125835572347772, "phrase": "traceability_relations"}, {"score": 0.003068242064611088, "phrase": "code_elements"}, {"score": 0.0030257422786589723, "phrase": "policy-based_extensible_infrastructure"}, {"score": 0.0028615323526689582, "phrase": "traceability_management_policies"}, {"score": 0.0027827907725673845, "phrase": "working_styles"}, {"score": 0.0027188259793109264, "phrase": "high-level_approach"}, {"score": 0.0025832180231667853, "phrase": "ten_pluggable_traceability_management_policies"}, {"score": 0.0025121156016001864, "phrase": "retrospective_analysis"}, {"score": 0.002409108462448916, "phrase": "odyssey"}, {"score": 0.0021246816854197732, "phrase": "ideal_set"}, {"score": 0.0021049977753042253, "phrase": "traceability_links"}], "paper_keywords": ["traceability", " software architecture", " configuration management", " software evolution"], "paper_abstract": "A traditional obstacle in the use of multiple representations is the need to maintain traceability among the representations in the face of evolution. The introduction of software architecture, and architecture-based development, has brought this need to architectural descriptions and corresponding source code. Specifically, the task is to relate versions of architectural elements to versions of source code configuration items, and to update those relations as new versions of the architecture and source code are produced. We present ArchTrace, a new approach that we developed to address this problem. ArchTrace distinguishes itself by continuously updating traceability relations from architectural elements to code elements through a policy-based extensible infrastructure that allows a group of developers to choose a set of traceability management policies that best match their situational needs and/or working styles. We introduce the high-level approach of ArchTrace, discuss its extensible infrastructure, and present our current set of ten pluggable traceability management policies. We conclude with a retrospective analysis of data collected from a twenty month period of development and maintenance of Odyssey, a component-based software development environment comprised of over 50,000 lines of code. This analysis shows that our approach is promising: with respect to the ideal set of traceability links, the policies applied resulted in a precision of 95% and recall of 89%.", "paper_title": "Continuous and automated evolution of architecture-to-implementation traceability links", "paper_id": "WOS:000252670500004"}