{"auto_keywords": [{"score": 0.03520123308297538, "phrase": "organization_model"}, {"score": 0.0340341835646943, "phrase": "dynamic_organizations"}, {"score": 0.009440410222150437, "phrase": "multiagent_systems"}, {"score": 0.008374423002348723, "phrase": "dual_responsibility"}, {"score": 0.007329519742937986, "phrase": "context-driven_dynamic_agent_organizations"}, {"score": 0.006195368001497241, "phrase": "life-cycle_management"}, {"score": 0.004789272640417375, "phrase": "today's_distributed_applications"}, {"score": 0.004751011171658849, "phrase": "sensor_networks"}, {"score": 0.0047256726869051805, "phrase": "mobile_multimedia_applications"}, {"score": 0.0046879169243805785, "phrase": "intelligent_transportation_systems"}, {"score": 0.004662913362513954, "phrase": "huge_engineering_challenges"}, {"score": 0.004600983660690157, "phrase": "different_components"}, {"score": 0.00444377150105556, "phrase": "decentralized_system"}, {"score": 0.00440825801245188, "phrase": "system_components"}, {"score": 0.004303404058571052, "phrase": "unanticipated_ways"}, {"score": 0.004212287292580693, "phrase": "decentralized_systems"}, {"score": 0.004003511299646736, "phrase": "typical_way"}, {"score": 0.0038563012220659827, "phrase": "existing_approaches"}, {"score": 0.003684777127552325, "phrase": "associated_functionality"}, {"score": 0.003530293356008138, "phrase": "organization_dynamics"}, {"score": 0.00350205447167804, "phrase": "realistic_multiagent_systems"}, {"score": 0.003418681280929931, "phrase": "complex_task"}, {"score": 0.0032491108935498794, "phrase": "application_developers"}, {"score": 0.003154797861869504, "phrase": "integrated_approach"}, {"score": 0.0030305721447130567, "phrase": "macodo_approach"}, {"score": 0.0030063184802762775, "phrase": "middleware_platform"}, {"score": 0.002974281028713475, "phrase": "distributed_execution"}, {"score": 0.0028879224619717714, "phrase": "weyns_et_al"}, {"score": 0.002715349745905368, "phrase": "first-class_citizens"}, {"score": 0.0024263237087568464, "phrase": "dynamic_reorganizations"}, {"score": 0.0021049977753042253, "phrase": "traffic_monitoring_application"}], "paper_keywords": ["Theory", " Design", " Context", " intelligent transportation systems", " middleware", " multiagent system", " organization", " role"], "paper_abstract": "Today's distributed applications such as sensor networks, mobile multimedia applications, and intelligent transportation systems pose huge engineering challenges. Such systems often comprise different components that interact with each other as peers, as such forming a decentralized system. The system components and collaborations change over time, often in unanticipated ways. Multiagent systems belong to a class of decentralized systems that are known for realizing qualities such as adaptability, robustness, and scalability in such environments. A typical way to structure and manage interactions among agents is by means of organizations. Existing approaches usually endow agents with a dual responsibility: on the one hand agents have to play roles providing the associated functionality in the organization, on the other hand agents are responsible for setting up organizations and managing organization dynamics. Engineering realistic multiagent systems in which agents encapsulate this dual responsibility is a complex task. In this article, we present an organization model for context-driven dynamic agent organizations. The model defines abstractions that support application developers to describe dynamic organizations. The organization model is part of an integrated approach, called MACODO: Middleware Architecture for COntext-driven Dynamic agent Organizations. The complementary part of the MACODO approach is a middleware platform that supports the distributed execution of dynamic organizations specified using the abstractions, as described in Weyns et al. [2009]. In the model, the life-cycle management of dynamic organizations is separated from the agents: organizations are first-class citizens, and their dynamics are governed by laws. The laws specify how changes in the system (e.g., an agent joins an organization) and changes in the context (e.g., information observed in the environment) lead to dynamic reorganizations. As such, the model makes it easier to understand and specify dynamic organizations in multiagent systems, and promotes reusing the life-cycle management of dynamic organizations. The organization model is formally described to specify the semantics of the abstractions, and ensure its type safety. We apply the organization model to specify dynamic organizations for a traffic monitoring application.", "paper_title": "The MACODO Organization Model for Context-Driven Dynamic Agent Organizations", "paper_id": "WOS:000284284800004"}