{"auto_keywords": [{"score": 0.03901080897702869, "phrase": "polynomial_approximations"}, {"score": 0.00481495049065317, "phrase": "machine-efficient_polynomial_approximations"}, {"score": 0.004506048850130758, "phrase": "computing_system"}, {"score": 0.003866443402315402, "phrase": "finite_number"}, {"score": 0.0034733518170738517, "phrase": "finite_-_and_sometimes_small_-_number"}, {"score": 0.0032668821950788533, "phrase": "floating-point_representations"}, {"score": 0.0028170314398963704, "phrase": "degree-i_coefficient"}, {"score": 0.002731971103291716, "phrase": "fractional_bits"}, {"score": 0.002622528664187849, "phrase": "rational_number"}, {"score": 0.0025046245057922557, "phrase": "general_and_efficient_method"}, {"score": 0.002453934333239467, "phrase": "best_polynomial_approximation"}, {"score": 0.0021705796895687864, "phrase": "predefined_constants"}, {"score": 0.0021375377706211686, "phrase": "relative_error"}, {"score": 0.0021049977753042253, "phrase": "absolute_error"}], "paper_keywords": ["algorithms", " performance", " polynomial approximation", " minimax approximation", " floating-point arithmetic", " Chebyshev polynomials", " polytopes", " linear programming"], "paper_abstract": "Polynomial approximations are almost always used when implementing functions on a computing system. In most cases, the polynomial that best approximates ( for a given distance and in a given interval) a function has coefficients that are not exactly representable with a finite number of bits. And yet, the polynomial approximations that are actually implemented do have coefficients that are represented with a finite - and sometimes small - number of bits. This is due to the finiteness of the floating-point representations ( for software implementations), and to the need to have small, hence fast and/or inexpensive, multipliers ( for hardware implementations). We then have to consider polynomial approximations for which the degree-i coefficient has at most m(i) fractional bits; in other words, it is a rational number with denominator 2(mi). We provide a general and efficient method for finding the best polynomial approximation under this constraint. Moreover, our method also applies if some other constraints ( such as requiring some coefficients to be equal to some predefined constants or minimizing relative error instead of absolute error) are required.", "paper_title": "Computing machine-efficient polynomial approximations", "paper_id": "WOS:000239054800005"}