{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "performance_bottleneck"}, {"score": 0.01263756896219771, "phrase": "pattern_matching"}, {"score": 0.009190488276968974, "phrase": "policy_scripts"}, {"score": 0.004695900553353526, "phrase": "detailed_profiling"}, {"score": 0.004602773636967002, "phrase": "high-speed_network_intrusion_detection_system"}, {"score": 0.0043560464825349275, "phrase": "ever-increasing_amount"}, {"score": 0.004248294537944227, "phrase": "ever-complicated_attacks"}, {"score": 0.003980400251874277, "phrase": "high-speed_design"}, {"score": 0.00392100783796804, "phrase": "early_studies"}, {"score": 0.003356676378388349, "phrase": "snort"}, {"score": 0.0033231814056233103, "phrase": "bro"}, {"score": 0.003240895431893263, "phrase": "network_traffic"}, {"score": 0.0029909851863915283, "phrase": "snort_execution"}, {"score": 0.0029463123778313196, "phrase": "entire_packet_payloads"}, {"score": 0.0027602925235474317, "phrase": "obvious_bottleneck"}, {"score": 0.002719055901632759, "phrase": "bro_execution"}, {"score": 0.0026120705848349055, "phrase": "high-speed_nids_design"}, {"score": 0.0024717881264735477, "phrase": "possible_locations"}, {"score": 0.0024105326885334962, "phrase": "long_connections"}, {"score": 0.0023040642263522505, "phrase": "efficient_binary_codes"}, {"score": 0.0022022878843247257, "phrase": "connection_tracking"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Network intrusion detection system", " Pattern matching", " Performance profiling"], "paper_abstract": "Designing a high-speed network intrusion detection system (NIDS) has attracted much attention in recent years due to ever-increasing amount of network traffic and ever-complicated attacks. Numerous studies have been focusing on accelerating pattern matching for a high-speed design because some early studies observed that pattern matching is a performance bottleneck. However, the effectiveness of such acceleration has been challenged recently. This work therefore re-examines the performance bottleneck by profiling two popular NIDSs, Snort and Bro, with various types of network traffic in detail. In the profiling, we find pattern matching can be dominant in the Snort execution if the entire packet payloads in the connections are scanned, while executing the policy scripts is an obvious bottleneck in the Bro execution. This work suggests three promising directions towards a high-speed NIDS design for future research: a method to precisely specify the possible locations of the signatures in long connections, a compiler to transform the policy scripts to efficient binary codes for execution, and an efficient design of connection tracking and packet reassembly. (c) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Re-examining the performance bottleneck in a NIDS with detailed profiling", "paper_id": "WOS:000316091900017"}