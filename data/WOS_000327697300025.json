{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "abductive_inference"}, {"score": 0.004620093797504386, "phrase": "new_method"}, {"score": 0.004525629293824217, "phrase": "inductive_loop_invariants"}, {"score": 0.004372442291178139, "phrase": "boolean_combinations"}, {"score": 0.004312622975366676, "phrase": "linear_integer_constraints"}, {"score": 0.004224418476742716, "phrase": "key_idea"}, {"score": 0.004025531820226182, "phrase": "backtracking_search"}, {"score": 0.0039431758381711125, "phrase": "hoare-style_verification_condition_generation"}, {"score": 0.003731673223879279, "phrase": "quantifier_elimination"}, {"score": 0.0036553070575015344, "phrase": "candidate_invariants"}, {"score": 0.003435426082776884, "phrase": "loop_invariants"}, {"score": 0.0031193028729331667, "phrase": "key_feature"}, {"score": 0.0027361626349903744, "phrase": "program_correctness"}, {"score": 0.0026071599759743833, "phrase": "arbitrary_boolean_combinations"}, {"score": 0.0025014259919355453, "phrase": "linear_invariants"}, {"score": 0.0023999697562763433, "phrase": "proposed_approach"}, {"score": 0.002318566141177149, "phrase": "hola."}, {"score": 0.002255431275670053, "phrase": "hola"}, {"score": 0.0022092084106039834, "phrase": "interesting_invariants"}, {"score": 0.0021049977753042253, "phrase": "existing_state-of-the-art_invariant_generation_tools"}], "paper_keywords": ["Languages", " Verification", " Algorithms", " Experimentation", " Invariant Generation", " abductive inference", " static analysis"], "paper_abstract": "This paper presents a new method for generating inductive loop invariants that are expressible as boolean combinations of linear integer constraints. The key idea underlying our technique is to perform a backtracking search that combines Hoare-style verification condition generation with a logical abduction procedure based on quantifier elimination to speculate candidate invariants. Starting with true, our method iteratively strengthens loop invariants until they are inductive and strong enough to verify the program. A key feature of our technique is that it is lazy: It only infers those invariants that are necessary for verifying program correctness. Furthermore, our technique can infer arbitrary boolean combinations (including disjunctions) of linear invariants. We have implemented the proposed approach in a tool called HOLA. Our experiments demonstrate that HOLA can infer interesting invariants that are beyond the reach of existing state-of-the-art invariant generation tools.", "paper_title": "Inductive Invariant Generation via Abductive Inference", "paper_id": "WOS:000327697300025"}