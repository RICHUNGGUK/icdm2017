{"auto_keywords": [{"score": 0.04783466563954652, "phrase": "sdl_specification"}, {"score": 0.03390109869328918, "phrase": "hot_spots"}, {"score": 0.00481495049065317, "phrase": "sdl_specifications"}, {"score": 0.004763895422211728, "phrase": "efsm-based_test_generation"}, {"score": 0.004468684611798047, "phrase": "black_box_simulation"}, {"score": 0.004421284843189731, "phrase": "conformance_testing"}, {"score": 0.004016594765266821, "phrase": "potentially_hazardous_assumption"}, {"score": 0.00378767277402891, "phrase": "test_generation_method"}, {"score": 0.0037076911119175455, "phrase": "conformance_verification"}, {"score": 0.003629392214109574, "phrase": "coverage_criteria-driven_white_box_testing"}, {"score": 0.002824005136794786, "phrase": "test_sequences"}, {"score": 0.0026771333996253783, "phrase": "possible_infeasibility"}, {"score": 0.002537880772794665, "phrase": "constraint_solver"}, {"score": 0.002470987929071079, "phrase": "alternate_test_sequence"}, {"score": 0.002431699464104896, "phrase": "hot_spot"}, {"score": 0.002256435842862802, "phrase": "case_studies"}, {"score": 0.0022324489895237504, "phrase": "five_sdl_processes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["SDL", " EFSM (Extended Finite State Machine)", " Coverage testing", " Dominator analysis", " Hot spot", " Constraint solver"], "paper_abstract": "Existing methods for testing an SDL specification mainly allow for either black box simulation or conformance testing to verify that the behavior of an implementation matches its corresponding model. However, this relies on the potentially hazardous assumption that the model is completely correct. We propose a test generation method that can accomplish conformance verification as well as coverage criteria-driven white box testing of the specification itself. We first reformat a set of EFSMs equivalent to the processes in an SDL specification and identify \"hot spots\" - nodes or edges in the EFSM which should be prioritized during testing to effectively increase coverage. Then, we generate test sequences intended to cover selected hot spots; we address the possible infeasibility of such a test sequence by allowing for its rejection decided by a constraint solver and re-generation of an alternate test sequence to the hot spot. In this paper, we present our test generation method and tool, and provide case studies on five SDL processes demonstrating the effectiveness of our coverage-based test sequence selection. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Validation of SDL specifications using EFSM-based test generation", "paper_id": "WOS:000270619300003"}