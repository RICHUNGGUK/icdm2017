{"auto_keywords": [{"score": 0.033556290154998364, "phrase": "mpa"}, {"score": 0.00481495049065317, "phrase": "modeling_structured_event_streams"}, {"score": 0.004766388573192505, "phrase": "system_level_performance_analysis"}, {"score": 0.00457696724030363, "phrase": "analytic_real-time_analysis"}, {"score": 0.004306795240631196, "phrase": "event_type_information"}, {"score": 0.0038325685550319863, "phrase": "separate_streams"}, {"score": 0.003717656912608012, "phrase": "data_streams"}, {"score": 0.003606178185661875, "phrase": "higher_level_event_streams"}, {"score": 0.003462704420080129, "phrase": "proposed_technique"}, {"score": 0.003258090521354736, "phrase": "well_known_performance_evaluation_frameworks"}, {"score": 0.003144345057121367, "phrase": "modular_performance_analysis"}, {"score": 0.003019189898170698, "phrase": "novel_characterization"}, {"score": 0.002988685006809336, "phrase": "structured_event_streams"}, {"score": 0.0029137604783116065, "phrase": "event_count_curves"}, {"score": 0.0028120022457134267, "phrase": "event_streams"}, {"score": 0.0027554538693034163, "phrase": "individual_events"}, {"score": 0.0027000395818027366, "phrase": "finite_number"}, {"score": 0.002632332114727894, "phrase": "new_concept"}, {"score": 0.002592523232809191, "phrase": "explicit_maintenance"}, {"score": 0.0025663181430010686, "phrase": "stream-individual_information"}, {"score": 0.0025146979283050923, "phrase": "composed_stream"}, {"score": 0.0024516267507109753, "phrase": "system_components"}, {"score": 0.0023780209525032688, "phrase": "arbitrary_composition"}, {"score": 0.002260211578368138, "phrase": "distributed_event_processing"}, {"score": 0.00217017119491777, "phrase": "realistic_case-study"}, {"score": 0.002126502291103601, "phrase": "obtained_results"}], "paper_keywords": ["Design", " Verification", " Theory"], "paper_abstract": "This paper extends the methodology of analytic real-time analysis of distributed embedded systems towards merging and extracting sub-streams based on event type information. For example, one may first merge a set of given event streams, then process them jointly and finally decompose them into separate streams again. In other words, data streams can be hierarchically composed into higher level event streams and decomposed later on again. The proposed technique is strictly compositional, hence highly suited for being embedded into well known performance evaluation frameworks such as Symta/S and MPA (Modular Performance Analysis). It is based on a novel characterization of structured event streams which we denote as Event Count Curves. They characterize the structure of event streams in which the individual events belong to a finite number of classes. This new concept avoids the explicit maintenance of stream-individual information when routing a composed stream through a network of system components. Nevertheless it allows an arbitrary composition and decomposition of sub-streams at any stage of the distributed event processing. For evaluating our approach we analyze a realistic case-study and compare the obtained results with other existing techniques.", "paper_title": "Modeling Structured Event Streams in System Level Performance Analysis", "paper_id": "WOS:000277056500005"}