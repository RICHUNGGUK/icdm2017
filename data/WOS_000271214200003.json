{"auto_keywords": [{"score": 0.0239619532106783, "phrase": "asm"}, {"score": 0.00481495049065317, "phrase": "elegant_approach"}, {"score": 0.004721162131188487, "phrase": "fault_tolerant_systems"}, {"score": 0.004140726362519362, "phrase": "desired_behavior"}, {"score": 0.004086744751579196, "phrase": "self-stabilizing_algorithms"}, {"score": 0.003954837422946628, "phrase": "fundamental_distributed_tasks"}, {"score": 0.003852371777780562, "phrase": "leader_election"}, {"score": 0.003802135020791801, "phrase": "token_circulation"}, {"score": 0.003752550907120244, "phrase": "communication_network_protocols"}, {"score": 0.003584025547693836, "phrase": "guarded_commands"}, {"score": 0.0031845067058084583, "phrase": "self-stabilizing_microprocessor"}, {"score": 0.0031223774204093713, "phrase": "self-stabilizing_operating_system"}, {"score": 0.002962543869356265, "phrase": "high-level_description"}, {"score": 0.0027924625350414655, "phrase": "machine_language"}, {"score": 0.002547043222086858, "phrase": "self-stabilization_preserving_compiler"}, {"score": 0.0022777800735119405, "phrase": "abstract_state_machine"}, {"score": 0.002146926767291475, "phrase": "stabilization_property"}, {"score": 0.0021049977753042253, "phrase": "high_level_program"}], "paper_keywords": ["Languages", " Reliability", " Algorithms", " Compilers", " self-stabilization", " abstract state machines"], "paper_abstract": "Self-stabilization is an elegant approach for designing fault tolerant systems. A system is considered self-stabilizing if, starting in any state, it converges to the desired behavior. Self-stabilizing algorithms were designed for solving fundamental distributed tasks, such as leader election, token circulation and communication network protocols. The algorithms were expressed using guarded commands or pseudo-code. The realization of these algorithms requires the existence of a (self-stabilizing) infrastructure such as a self-stabilizing microprocessor and a self-stabilizing operating system for their execution. Moreover, the high-level description of the algorithms needs to be converted into machine language of the microprocessor. In this article, we present our design for a self-stabilization preserving compiler. The compiler we designed and implemented transforms programs written in a language similar to the abstract state machine (ASM). The compiler preserves the stabilization property of the high level program.", "paper_title": "Self-Stabilization Preserving Compiler", "paper_id": "WOS:000271214200003"}