{"auto_keywords": [{"score": 0.048644738257163776, "phrase": "fmea"}, {"score": 0.04634126494153628, "phrase": "failure_modes"}, {"score": 0.03812603190340472, "phrase": "model_checker"}, {"score": 0.00481495049065317, "phrase": "fault_injection_experiments"}, {"score": 0.004766388573192505, "phrase": "fmea._failure_modes"}, {"score": 0.004718314112245913, "phrase": "effects_analysis"}, {"score": 0.00457696724030363, "phrase": "widely_used_system"}, {"score": 0.004530794611704416, "phrase": "software_safety_analysis_technique"}, {"score": 0.004395040468458808, "phrase": "system_components"}, {"score": 0.004198965651975536, "phrase": "potential_hazards"}, {"score": 0.004011603024990615, "phrase": "labor-intensive_team-based_exercise"}, {"score": 0.0036988415150699945, "phrase": "fmea_process"}, {"score": 0.00351582806482809, "phrase": "system-level_consequences"}, {"score": 0.003341839487905525, "phrase": "runtime_faults"}, {"score": 0.0032251796659158696, "phrase": "system_specification"}, {"score": 0.003144345057121367, "phrase": "resulting_model"}, {"score": 0.0031125795874844438, "phrase": "safety_requirements"}, {"score": 0.0030500051941781034, "phrase": "temporal_logical_formulas"}, {"score": 0.0029735479904284706, "phrase": "safety_engineer"}, {"score": 0.0028990018343924683, "phrase": "component_failure"}, {"score": 0.0028263192354046245, "phrase": "multiple_failures"}, {"score": 0.0027414948679658816, "phrase": "specified_hazard_condition"}, {"score": 0.0025146979283050923, "phrase": "hazard_occurrence"}, {"score": 0.0024023079401125492, "phrase": "relevant_failure_propagation_pathways"}, {"score": 0.002226017732566121, "phrase": "performance_metrics"}, {"score": 0.002203509076886664, "phrase": "sal_model_checking"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["behavior trees", " failure modes and effects analysis", " fault injection experiments", " model checking"], "paper_abstract": "Failure Modes and Effects Analysis (FMEA) is a widely used system and software safety analysis technique that systematically identifies failure modes of system components and explores whether these failure modes might lead to potential hazards. In practice, FMEA is typically a labor-intensive team-based exercise, with little tool support. This article presents our experience with automating parts of the FMEA process, using a model checker to automate the search for system-level consequences of component failures. The idea is to inject runtime faults into a model based on the system specification and check if the resulting model violates safety requirements, specified as temporal logical formulas. This enables the safety engineer to identify if a component failure, or combination of multiple failures, can lead to a specified hazard condition. If so, the model checker produces an example of the events leading up to the hazard occurrence which the analyst can use to identify the relevant failure propagation pathways and co-effectors. The process is applied on three medium-sized case studies modeled with Behavior Trees. Performance metrics for SAL model checking are presented. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Experience with fault injection experiments for FMEA", "paper_id": "WOS:000295446900004"}