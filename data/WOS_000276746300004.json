{"auto_keywords": [{"score": 0.04870300013732668, "phrase": "design_patterns"}, {"score": 0.0396600464562225, "phrase": "design_pattern"}, {"score": 0.00481495049065317, "phrase": "qvt."}, {"score": 0.004722254884093624, "phrase": "main_goals"}, {"score": 0.004411588377842043, "phrase": "future_changes"}, {"score": 0.004202223763361474, "phrase": "adaptable_software"}, {"score": 0.004141365648080381, "phrase": "design_pattern_instances"}, {"score": 0.004041879818641576, "phrase": "minimal_impact"}, {"score": 0.003493021648360933, "phrase": "model_elements"}, {"score": 0.00323134923196813, "phrase": "possible_evolutions"}, {"score": 0.003003809128328864, "phrase": "evolution_process"}, {"score": 0.0029458777184930896, "phrase": "inconsistent_evolutions"}, {"score": 0.002778682854371595, "phrase": "evolution_processes"}, {"score": 0.002725081358527507, "phrase": "model_transformation_technology"}, {"score": 0.002659527314613792, "phrase": "formal_foundation"}, {"score": 0.002424450174817922, "phrase": "software_system_design"}, {"score": 0.002389276641014013, "phrase": "design_pattern_evolutions"}, {"score": 0.002331781764406665, "phrase": "tool_support"}, {"score": 0.0022125846715716304, "phrase": "view"}, {"score": 0.0021788122201501937, "phrase": "transformation"}, {"score": 0.002135995282374723, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "large_open-source_software_system"}], "paper_keywords": ["Design pattern evolution", " Model transformation", " UML", " QVT", " Model-driven architecture"], "paper_abstract": "One of the main goals of design patterns is to design for change. Many design patterns leave some room for future changes and evolutions. The application of design patterns leads to adaptable software since the design pattern instances could be changed with minimal impact on other parts of the system. Such changes, called the evolution of a design pattern instance in this paper, typically involve the addition or removal of a group of model elements, such as classes, attributes, operations, and relationships. However, the possible evolutions of each design pattern are often not explicitly documented. Missing a part of the evolution process may result in inconsistent evolutions. In this paper, we present our approach to assist the evolution processes of design patterns by model transformation technology. We provide a formal foundation for our approach by defining the predicates that can be used to describe the properties of each design pattern, software system design, and design pattern evolutions. We also provide tool support to automate the evolution processes based on the Query, View, and Transformation standard. A case study of a large open-source software system is conducted to illustrate and evaluate our approach.", "paper_title": "Design pattern evolutions in QVT", "paper_id": "WOS:000276746300004"}