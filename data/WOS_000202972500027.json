{"auto_keywords": [{"score": 0.04289311160718139, "phrase": "java_programs"}, {"score": 0.015719716506582538, "phrase": "java_software"}, {"score": 0.004757643419056999, "phrase": "large_amounts"}, {"score": 0.004535124351828787, "phrase": "language's_escape"}, {"score": 0.004481132747216135, "phrase": "unsuspecting_software_ecology"}, {"score": 0.0022352169832099153, "phrase": "important_information"}, {"score": 0.0021049977753042253, "phrase": "structural_relationships"}], "paper_keywords": ["design", " measurement", " power-law distributions", " object-oriented design", " Java"], "paper_abstract": "Large amounts of Java software have been written since the language's escape into unsuspecting software ecology more than ten years ago. Surprisingly little is known about the structure of Java programs in the wild: about the way methods are grouped into classes and then into packages, the way packages relate to each other, or the way inheritance and composition are used to put these programs together. We present the results of the first in-depth study of the structure of Java programs. We have collected a number of Java programs and measured their key structural attributes. We have found evidence that some relationships follow power-laws, while others do not. We have also observed variations that seem related to some characteristic of the application itself. This study provides important information for researchers who can investigate how and why the structural relationships we find may have originated, what they portend, and how they can be managed.", "paper_title": "Understanding the shape of Java software", "paper_id": "WOS:000202972500027"}