{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "per-thread_cycle_accounting._resource"}, {"score": 0.004576253356889219, "phrase": "per-thread_performance"}, {"score": 0.004240116703465252, "phrase": "system_software"}, {"score": 0.004081385289516914, "phrase": "coexecuting_threads"}, {"score": 0.003978866233891427, "phrase": "equal_progress"}, {"score": 0.00378145978325955, "phrase": "cycle_accounting_addresses"}, {"score": 0.003503497128638099, "phrase": "per-thread_progress_rates"}, {"score": 0.0021049977753042253, "phrase": "multithreaded_architectures"}], "paper_keywords": [""], "paper_abstract": "Resource sharing unpredictably affects per-thread performance in multithreaded architectures, but system software assumes all coexecuting threads make equal progress per-thread cycle accounting addresses. This problem by tracking per-thread progress rates for each coexecuting thread. this approach has the potential to improve quality of service (gos), service-level agreements (sla), performance predictability, service differentiation, and proportional-share performance on multithreaded architectures.", "paper_title": "PER-THREAD CYCLE ACCOUNTING", "paper_id": "WOS:000275020900009"}