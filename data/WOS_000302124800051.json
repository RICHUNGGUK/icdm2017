{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "recent_papers"}, {"score": 0.004732785510739708, "phrase": "wire-speed_packet_processing"}, {"score": 0.004417848254181138, "phrase": "direct_control"}, {"score": 0.004361163586439822, "phrase": "network_controllers"}, {"score": 0.004286708921931472, "phrase": "os_and_device_driver_overheads"}, {"score": 0.004106063237069123, "phrase": "similar_performance"}, {"score": 0.0040708542958968605, "phrase": "safer_conditions"}, {"score": 0.004035946043145475, "phrase": "standard_operating_systems"}, {"score": 0.003816197777388722, "phrase": "packet_buffers"}, {"score": 0.0034118270118683705, "phrase": "os."}, {"score": 0.003157184330555786, "phrase": "api."}, {"score": 0.002934098412396701, "phrase": "almost_one_order"}, {"score": 0.0028468767420392945, "phrase": "standard_os_path"}, {"score": 0.0027150087516999047, "phrase": "wire_speed"}, {"score": 0.00253400005142168, "phrase": "clock_speed"}, {"score": 0.0023650305205893353, "phrase": "metadata_management"}, {"score": 0.0023145690608400425, "phrase": "per-packet_system"}, {"score": 0.0021416404045850224, "phrase": "plain_and_simple_format"}, {"score": 0.0021049977753042253, "phrase": "run-time_decisions"}], "paper_keywords": ["Design", " experimentation", " performance", " Software packet processing", " operating systems"], "paper_abstract": "Recent papers have shown that wire-speed packet processing is feasible in software even at 10 Gbit/s, but the result has been achieved taking direct control of the network controllers to cut down OS and device driver overheads. In this paper we show how to achieve similar performance in safer conditions on standard operating systems. As in some other proposals, our framework, called netmap, maps packet buffers into the process' memory space; but unlike other proposals, any operation that may affect the state of the hardware is filtered by the OS. This protects the system from crashes induced by misbehaving programs, and simplifies the use of the API. Our tests show that netmap takes less than 90 clock cycles to move one packet between the wire and the application, almost one order of magnitude less than using the standard OS path. One core at 1.33 GHz can send or receive packets at wire speed on 10 Gbit/s links (14.88 Mpps), with very good scalability in the number of cores and clock speed. At least three factors contribute to this performance: A i) no overhead for encapsulation and metadata management; ii) no per-packet system calls and data copying; iii) much simpler device driver operation, because buffers have a plain and simple format that requires no run-time decisions.", "paper_title": "netmap: Memory Mapped Access To Network Devices", "paper_id": "WOS:000302124800051"}