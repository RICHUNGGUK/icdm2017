{"auto_keywords": [{"score": 0.049124089120586564, "phrase": "chase"}, {"score": 0.00481495049065317, "phrase": "weak_memory_models"}, {"score": 0.004624751696958501, "phrase": "lev's_concurrent_deque"}, {"score": 0.0044870272550540415, "phrase": "key_data_structure"}, {"score": 0.004397487039229447, "phrase": "shared-memory_parallel_programming"}, {"score": 0.004223708778943785, "phrase": "essential_role"}, {"score": 0.004139401327448807, "phrase": "work-stealing_schedulers"}, {"score": 0.003935892934907777, "phrase": "first_correctness_proof"}, {"score": 0.0038186039088445524, "phrase": "optimized_implementation"}, {"score": 0.0036676174658755683, "phrase": "lev's_deque"}, {"score": 0.003487222504700868, "phrase": "power_and_arm_architectures"}, {"score": 0.002628747284714371, "phrase": "systematic_experiments"}, {"score": 0.0024742098091226203, "phrase": "memory_barrier_optimizations"}, {"score": 0.0022365262201954643, "phrase": "deque_code"}, {"score": 0.0021049977753042253, "phrase": "relaxed_memory_models"}], "paper_keywords": ["lock-free algorithm", " work-stealing", " relaxed memory model", " proof"], "paper_abstract": "Chase and Lev's concurrent deque is a key data structure in shared-memory parallel programming and plays an essential role in work-stealing schedulers. We provide the first correctness proof of an optimized implementation of Chase and Lev's deque on top of the POWER and ARM architectures: these provide very relaxed memory models, which we exploit to improve performance but considerably complicate the reasoning. We also study an optimized x86 and a portable C11 implementation, conducting systematic experiments to evaluate the impact of memory barrier optimizations. Our results demonstrate the benefits of hand tuning the deque code when running on top of relaxed memory models.", "paper_title": "Correct and Efficient Work-Stealing for Weak Memory Models", "paper_id": "WOS:000324158900007"}