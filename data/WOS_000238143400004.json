{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "time_petri_nets"}, {"score": 0.004657185361669812, "phrase": "petri_nets"}, {"score": 0.004565007074039171, "phrase": "general_framework"}, {"score": 0.004386063799793622, "phrase": "real-time_reactive_systems"}, {"score": 0.004186105377259855, "phrase": "also_temporal_specifications"}, {"score": 0.003916098498242888, "phrase": "forward_zone-based_algorithm"}, {"score": 0.003813017794036879, "phrase": "state_space"}, {"score": 0.003737485125097945, "phrase": "bounded_time_petri_net"}, {"score": 0.0034730657554172405, "phrase": "classical_state_class_graph"}, {"score": 0.0031845067058084613, "phrase": "reachability_problem"}, {"score": 0.0029789104204803137, "phrase": "computed_state_space"}, {"score": 0.0029198522863606953, "phrase": "timed_automaton"}, {"score": 0.0027495914857929584, "phrase": "original_time_petri_net"}, {"score": 0.0026240423738883704, "phrase": "single_timed_automaton"}, {"score": 0.0025892330566358503, "phrase": "syntactical_clocks_reduction_methods"}, {"score": 0.0025548881238607758, "phrase": "daws"}, {"score": 0.002520990478125228, "phrase": "yovine"}, {"score": 0.0021049977753042253, "phrase": "efficient_timed_automata_tools"}], "paper_keywords": ["Time Petri Nets", " timed automata", " bisimulation", " reachability analysis", " zones"], "paper_abstract": "The theory of Petri Nets provides a general framework to specify the behaviors of real-time reactive systems and Time Petri Nets were introduced to take also temporal specifications into account. We present in this paper a forward zone-based algorithm to compute the state space of a bounded Time Petri Net: the method is different and more efficient than the classical State Class Graph. We prove the algorithm to be exact with respect to the reachability problem. Furthermore, we propose a translation of the computed state space into a Timed Automaton, proved to be timed bisimilar to the original Time Petri Net. As the method produce a single Timed Automaton, syntactical clocks reduction methods (DAWS and YOVINE for instance) may be applied to produce an automaton with fewer clocks. Then, our method allows to model-check T-TPN by the use of efficient Timed Automata tools.", "paper_title": "State space computation and analysis of Time Petri Nets", "paper_id": "WOS:000238143400004"}