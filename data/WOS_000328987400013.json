{"auto_keywords": [{"score": 0.03679129854688947, "phrase": "rtl_blocks"}, {"score": 0.00481495049065317, "phrase": "rtl_using_structural_dominance"}, {"score": 0.004762893197005439, "phrase": "register-transfer_level"}, {"score": 0.004610058444728656, "phrase": "resource-intensive_bottleneck"}, {"score": 0.00456020621016909, "phrase": "modern_very_large_scale_integration_computer-aided_design_flows"}, {"score": 0.004342430078306461, "phrase": "total_verification_effort"}, {"score": 0.003958937342925219, "phrase": "potential_bugs"}, {"score": 0.0037493114715625784, "phrase": "corresponding_corrections"}, {"score": 0.003648683020392928, "phrase": "iterative_algorithm"}, {"score": 0.003531474887552889, "phrase": "dominance_relationships"}, {"score": 0.003344407169522133, "phrase": "implied_solutions"}, {"score": 0.003290237137651949, "phrase": "new_solution"}, {"score": 0.0031500213134140953, "phrase": "formal_engine_calls"}, {"score": 0.0030654278282822027, "phrase": "modern_boolean_satisfiability"}, {"score": 0.002918826667294298, "phrase": "debugging_nonsolutions"}, {"score": 0.002646267286675984, "phrase": "precomputed_rtl_dominance_relationships"}, {"score": 0.002575167114383286, "phrase": "industrial_designs"}, {"score": 0.0025334249463305875, "phrase": "three-fold_reduction"}, {"score": 0.0024653491388223546, "phrase": "sat_calls"}, {"score": 0.0024253827365474734, "phrase": "solution_implications"}, {"score": 0.0023730978395564116, "phrase": "faster_sat_run-times"}, {"score": 0.002235040467016128, "phrase": "total_sat"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["Design debugging", " diagnosis", " formal methods", " formal verification", " SAT"], "paper_abstract": "Register-transfer level (RTL) debug has become a resource-intensive bottleneck in modern very large scale integration computer-aided design flows, consuming as much as 32% of the total verification effort. This paper aims to advance the state-of-the-art in automated RTL debuggers, which return all potential bugs in the RTL, called solutions, along with corresponding corrections. First, an iterative algorithm is presented to compute the dominance relationships between RTL blocks. These relationships are leveraged to discover implied solutions with every new solution, thus significantly reducing the number of formal engine calls. Furthermore, a modern Boolean satisfiability (SAT) solver is tailored to detect debugging nonsolutions, sets of RTL blocks guaranteed to be bug-free, and to imply other nonsolutions using the precomputed RTL dominance relationships. Extensive experiments on industrial designs show a three-fold reduction in the number of SAT calls due to solution implications, coupled with faster SAT run-times due to nonsolution implications, resulting in a 2.63x overall speedup in total SAT solving time, demonstrating the robustness and practicality of the proposed approach.", "paper_title": "Debugging RTL Using Structural Dominance", "paper_id": "WOS:000328987400013"}