{"auto_keywords": [{"score": 0.04320038033945778, "phrase": "xml_document"}, {"score": 0.015297261702605477, "phrase": "xml_documents"}, {"score": 0.012030925001319186, "phrase": "tree_structure"}, {"score": 0.00481495049065317, "phrase": "xml_document_trees"}, {"score": 0.004312622975366676, "phrase": "huge_memory_demands"}, {"score": 0.003841263262252044, "phrase": "considerable_amount"}, {"score": 0.0032198357970567595, "phrase": "efficient_way"}, {"score": 0.0031150035760241705, "phrase": "high_regularity"}, {"score": 0.002851790448644913, "phrase": "tree_patterns"}, {"score": 0.0026986685585382347, "phrase": "tree_compression"}, {"score": 0.0026252106881752067, "phrase": "basic_tree_operations"}, {"score": 0.002470547930651519, "phrase": "compressed_representation"}, {"score": 0.002175913488493802, "phrase": "xml_types"}, {"score": 0.0021520139248317333, "phrase": "testing_equality"}, {"score": 0.0021049977753042253, "phrase": "compressed_input_trees"}], "paper_keywords": ["tree grammar", " compression", " in-memory XML representation"], "paper_abstract": "Implementations that load XML documents and give access to them via, e.g., the DOM, suffer from huge memory demands: the space needed to load an XML document is usually many times larger than the size of the document. A considerable amount of memory is needed to store the tree structure of the XML document. In this paper, a technique is presented that allows to represent the tree structure of an XML document in an efficient way. The representation exploits the high regularity in XML documents by compressing their tree structure; the latter means to detect and remove repetitions of tree patterns. Formally, context-free tree grammars that generate only a single tree are used for tree compression. The functionality of basic tree operations, like traversal along edges, is preserved under this compressed representation. This allows to directly execute queries (and in particular, bulk operations) without prior decompression. The complexity of certain computational problems like validation against XML types or testing equality is investigated for compressed input trees. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Efficient memory representation of XML document trees", "paper_id": "WOS:000256864900007"}