{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "melton"}, {"score": 0.010066103326633734, "phrase": "c_programs"}, {"score": 0.007990465937930409, "phrase": "proposed_algorithm"}, {"score": 0.004521803560561489, "phrase": "memory_leaks"}, {"score": 0.004456717971917794, "phrase": "common_type"}, {"score": 0.004246428036409373, "phrase": "existing_memory_leak_detection_tools"}, {"score": 0.0041450181887917135, "phrase": "precise_interprocedural_analysis"}, {"score": 0.003911367220315185, "phrase": "static_interprocedural_analysis_algorithm"}, {"score": 0.0038364365168131586, "phrase": "fully_pathsensitive_analysis"}, {"score": 0.0037811784409635023, "phrase": "precise_function_behaviors"}, {"score": 0.0037087324991876727, "phrase": "memory_leak"}, {"score": 0.0035852640843794252, "phrase": "path-sensitive_symbolic_execution"}, {"score": 0.0034826993555190765, "phrase": "different_program_paths"}, {"score": 0.0034325187732054093, "phrase": "path_conditions"}, {"score": 0.0033830587647810132, "phrase": "novel_analysis_model"}, {"score": 0.003350480663660326, "phrase": "memory_state_transition_graph"}, {"score": 0.00320770578058916, "phrase": "tracking_process"}, {"score": 0.0030858947334838145, "phrase": "interprocedural_analysis"}, {"score": 0.0029258994809237787, "phrase": "mstg"}, {"score": 0.002828418443899226, "phrase": "procedure's_call_sites"}, {"score": 0.0027876387169652717, "phrase": "prototype_tool"}, {"score": 0.0026175952455594277, "phrase": "five_open_source_c_programs"}, {"score": 0.002241816883550397, "phrase": "standard_performance_evaluation_corporation"}, {"score": 0.0021049977753042253, "phrase": "art_approaches"}], "paper_keywords": ["memory leak", " bug finding", " static analysis", " symbolic execution"], "paper_abstract": "Memory leaks are a common type of defect that is hard to detect manually. Existing memory leak detection tools suffer from lack of precise interprocedural analysis and path-sensitivity. To address this problem, we present a static interprocedural analysis algorithm, that performs fully pathsensitive analysis and captures precise function behaviors, to detect memory leak in C programs. The proposed algorithm uses path-sensitive symbolic execution to track memory actions in different program paths guarded by path conditions. A novel analysis model called memory state transition graph (MSTG) is proposed to describe the tracking process and its results. In order to do interprocedural analysis, the proposed algorithm generates a summary for each procedure from MSTG and applies the summary at the procedure's call sites. A prototype tool called Melton is implemented for this procedure. Melton was applied to five open source C programs and 41 leaks were found. More than 90% of these leaks were subsequently confirmed and fixed by their maintainers. For comparison with other tools, Melton was also applied to some programs in standard performance evaluation corporation (SPEC) CPU 2000 benchmark suite and detected more leaks than the state of the art approaches.", "paper_title": "Melton: a practical and precise memory leak detection tool for C programs", "paper_id": "WOS:000348798400003"}