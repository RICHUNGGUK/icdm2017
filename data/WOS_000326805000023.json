{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dynamic_binary_translation"}, {"score": 0.01084978806107799, "phrase": "user-level_applications"}, {"score": 0.004780780407878596, "phrase": "mobile_platforms"}, {"score": 0.004730009579836666, "phrase": "android"}, {"score": 0.0045971138571344345, "phrase": "typical_operating_systems"}, {"score": 0.004452078350485375, "phrase": "smart_phones"}, {"score": 0.0044047527104545525, "phrase": "smart_tvs"}, {"score": 0.004265760046406154, "phrase": "kernel_instrumentation_framework"}, {"score": 0.004175533280178052, "phrase": "efficient_development"}, {"score": 0.003986509098918949, "phrase": "existing_approaches"}, {"score": 0.00388828234270598, "phrase": "kernel_state"}, {"score": 0.0038606630003037864, "phrase": "physical_register_value"}, {"score": 0.0038332390893263844, "phrase": "primitive_memory_map"}, {"score": 0.0035949949979695063, "phrase": "excessive_analysis_overhead"}, {"score": 0.0035567476133074533, "phrase": "existing_approach"}, {"score": 0.0034567253581991226, "phrase": "real_systems"}, {"score": 0.002986461855862617, "phrase": "new_dynamic_kernel_instrumentation_framework"}, {"score": 0.002881793492919646, "phrase": "device_drivers"}, {"score": 0.002751174423568564, "phrase": "large_portion"}, {"score": 0.0027316100642958544, "phrase": "os_development"}, {"score": 0.002683304054823427, "phrase": "frequent_execution"}, {"score": 0.002664221051021009, "phrase": "kernel_modules"}, {"score": 0.002635850034826311, "phrase": "dynamic_kernel_instrumentation_framework"}, {"score": 0.002570817338292482, "phrase": "translated_target_code"}, {"score": 0.0025343769150179764, "phrase": "costly_optimizations"}, {"score": 0.0025073851194697397, "phrase": "high_execution_performance"}, {"score": 0.002454258761940649, "phrase": "overall_performance"}, {"score": 0.002326304140277375, "phrase": "light-weight_translator"}, {"score": 0.0023015232625177755, "phrase": "pseudo-machine_instruction_representation"}, {"score": 0.0022851491693940272, "phrase": "tabular-base_translation"}, {"score": 0.0022608057001451414, "phrase": "typical_intermediate_representation"}, {"score": 0.002212892265364764, "phrase": "linux_system"}, {"score": 0.0021049977753042253, "phrase": "nominal_overhead"}], "paper_keywords": ["Dynamic binary translation", " Instrumentation", " Light-weight framework"], "paper_abstract": "Mobile platforms such as Android and iOS, which are based on typical operating systems, have been widely adopted in various computing devices from smart phones even to smart TVs. Along with this, the necessity of kernel instrumentation framework has also grown up for efficient development and debugging of a kernel itself and its components. Although the existing approaches are providing some information about the kernel state including physical register value and primitive memory map, it is hard for the developers to understand and exploit the information. Moreover, the excessive analysis overhead in the existing approach makes them impractical to be used in real systems. Meanwhile, there have been a few studies on analyzing the user-level applications using dynamic binary translation and they are now widely used. In this paper, by extending this idea of dynamic binary translation for user-level applications to the kernel, we propose a new dynamic kernel instrumentation framework. Our framework focuses on the modules such as device drivers, rather than the kernel itself, since the modules comprise a large portion of OS development. Because of the frequent execution of kernel modules, the dynamic kernel instrumentation framework should guarantee the quality of the translated target code. However, costly optimizations to achieve high execution performance are rather harmful to the overall performance. Therefore, in order to improve performance of both translations, we suggest light-weight translator based on pseudo-machine instruction representation and tabular-base translation instead of typical intermediate representation. We implement our framework on Linux system, and our experimental evaluations show that it could quite effectively instrument the target with nominal overhead.", "paper_title": "Light-weight kernel instrumentation framework using dynamic binary translation", "paper_id": "WOS:000326805000023"}