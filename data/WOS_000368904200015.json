{"auto_keywords": [{"score": 0.041851968963554545, "phrase": "code_variants"}, {"score": 0.0287488528811353, "phrase": "best_code_variant"}, {"score": 0.00481495049065317, "phrase": "testing_kernel_variants"}, {"score": 0.0047531999386950016, "phrase": "auto-tuning"}, {"score": 0.004692227830462433, "phrase": "automatic_performance_tuning"}, {"score": 0.004602233424629559, "phrase": "practical_application"}, {"score": 0.004044645056447888, "phrase": "large_number"}, {"score": 0.003647442345566347, "phrase": "light-weight_rollback_mechanism"}, {"score": 0.0034191818674096453, "phrase": "low_cost"}, {"score": 0.003331915219811852, "phrase": "proposed_mechanism"}, {"score": 0.0032259472087775138, "phrase": "target_code_block"}, {"score": 0.0031233388358844188, "phrase": "execution_state"}, {"score": 0.003004494701922268, "phrase": "previous_state"}, {"score": 0.0025394700487126414, "phrase": "code_variant"}, {"score": 0.00244278788608393, "phrase": "shortest_execution_time"}, {"score": 0.0022457226013538343, "phrase": "whole_application"}, {"score": 0.0021462652605453163, "phrase": "timing_overhead"}, {"score": 0.0021049977753042253, "phrase": "auto-tuning_process"}], "paper_keywords": ["auto-tuning", " rollback", " cache", " early termination"], "paper_abstract": "Automatic performance tuning of a practical application could be time-consuming and sometimes infeasible, because it often needs to evaluate the performances of a large number of code variants to find the best one. In this paper, hence, a light-weight rollback mechanism is proposed to evaluate each of code variants at a low cost. In the proposed mechanism, once one code variant of a target code block is executed, the execution state is rolled back to the previous state of not yet executing the block so as to repeatedly execute only the block to find the best code variant. It also has a feature of terminating a code variant whose execution time is longer than the shortest execution time so far. As a result, it can prevent executing the whole application many times and thus reduces the timing overhead of an auto-tuning process required for finding the best code variant.", "paper_title": "A Light-Weight Rollback Mechanism for Testing Kernel Variants in Auto-Tuning", "paper_id": "WOS:000368904200015"}