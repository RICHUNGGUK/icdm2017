{"auto_keywords": [{"score": 0.03751951230806167, "phrase": "taco"}, {"score": 0.03291069589684193, "phrase": "tacoplug"}, {"score": 0.00481495049065317, "phrase": "practical_jfsl_verification"}, {"score": 0.00476697427418509, "phrase": "taco._translation"}, {"score": 0.004719473826242326, "phrase": "annotated_code"}, {"score": 0.004579780586951551, "phrase": "sat-based_tool"}, {"score": 0.004466519142879166, "phrase": "java_programs"}, {"score": 0.004269630481719451, "phrase": "practical_interface"}, {"score": 0.004205940624913343, "phrase": "non-proficient_user"}, {"score": 0.004020492138367616, "phrase": "eclipse_plug-in"}, {"score": 0.00396050388346298, "phrase": "static_verifier"}, {"score": 0.003766908559075843, "phrase": "counterexample_trace"}, {"score": 0.0037106898330901534, "phrase": "debugging_session"}, {"score": 0.0034940519373446335, "phrase": "better_debugging_experience"}, {"score": 0.003459191419478298, "phrase": "tacoplug_interface"}, {"score": 0.003339886795391701, "phrase": "annotated_software"}, {"score": 0.0032900200522703923, "phrase": "taco_verifier"}, {"score": 0.0030060256866508606, "phrase": "annotated_source_code"}, {"score": 0.002902304851882577, "phrase": "error_trace"}, {"score": 0.002858952758523772, "phrase": "fault_understanding"}, {"score": 0.0027881294891497115, "phrase": "software_debugger"}, {"score": 0.0025730425700096365, "phrase": "dynamic_analysis"}, {"score": 0.002447101794397243, "phrase": "unit_test_case"}, {"score": 0.002362620540317279, "phrase": "detected_violation"}, {"score": 0.002224510044064184, "phrase": "motivational_example"}, {"score": 0.0021802872319258977, "phrase": "real-life_software_error"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["static analysis", " bounded verification", " eclipse plug-in", " TACO", " test case generation"], "paper_abstract": "Translation of Annotated COde (TACO) is a SAT-based tool for bounded verification of Java programs. One challenge many formal tools share is to provide a practical interface for a non-proficient user. In this article, we present an Eclipse plug-in for the static verifier TACO. This plug-in allows a user to walk a counterexample trace mimicking a debugging session. TacoPlug (our plug-in) uses and extends TACO to provide a better debugging experience. TacoPlug interface allows the user to verify an annotated software using the TACO verifier. If TACO finds a violation to the specification, TacoPlug presents it in terms of the annotated source code. TacoPlug features several views of the error trace to facilitate fault understanding. It resembles any software debugger, but the debugging occurs statically without executing the program. Furthermore, should a dynamic analysis be required, TacoPlug presents the user with a unit test case generated by TACO based on the detected violation. We show the usability of our tool by means of a motivational example taken from a real-life software error. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Practical JFSL verification using TACO", "paper_id": "WOS:000331275900005"}