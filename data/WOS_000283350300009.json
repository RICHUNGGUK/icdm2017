{"auto_keywords": [{"score": 0.040249988248110796, "phrase": "cad_applications"}, {"score": 0.00481495049065317, "phrase": "multicore_parallelization"}, {"score": 0.0047527118741586055, "phrase": "min-cost_flow_for_cad_applications"}, {"score": 0.004691273968935458, "phrase": "computational_complexity"}, {"score": 0.004570759604335229, "phrase": "primary_challenge"}, {"score": 0.004092026656771699, "phrase": "scalable_performance_improvements"}, {"score": 0.003935267970727093, "phrase": "multicore_resources"}, {"score": 0.003735522846193052, "phrase": "natural_question"}, {"score": 0.003639471039860495, "phrase": "huge_challenge"}, {"score": 0.0035923719610602245, "phrase": "cad_researchers"}, {"score": 0.0033439771810057717, "phrase": "nondeterministic_transactional_models"}, {"score": 0.003194898129853895, "phrase": "multicore_processors"}, {"score": 0.00307240091019322, "phrase": "multicore_shared-memory_machines"}, {"score": 0.002878556952876824, "phrase": "proposed_methodology"}, {"score": 0.0027862576750944277, "phrase": "min-cost_flow_problem"}, {"score": 0.0026619761089539595, "phrase": "key_problem"}, {"score": 0.002576603426735759, "phrase": "wire-length_optimization"}, {"score": 0.0024939618994290016, "phrase": "timing-constrained_voltage_assignment"}, {"score": 0.0023982749733789882, "phrase": "min-cost_flow"}, {"score": 0.002232261129770455, "phrase": "voltage_island_generation"}, {"score": 0.002132637840285576, "phrase": "scalable_speedup"}, {"score": 0.0021049977753042253, "phrase": "different_numbers"}], "paper_keywords": ["Min-cost flow", " multicore", " parallel programming"], "paper_abstract": "Computational complexity has been the primary challenge of many very large scale integration computer-aided design (CAD) applications. The emerging multicore and many-core microprocessors have the potential to offer scalable performance improvements. How to explore the multicore resources to speed up CAD applications is thus a natural question but also a huge challenge for CAD researchers. This paper proposes a methodology to explore concurrency via nondeterministic transactional models, and to program them on multicore processors for CAD applications. Various run-time scheduling implementations on multicore shared-memory machines are discussed and the most efficient one is identified. The proposed methodology is applied to the min-cost flow problem which has been identified as the key problem in many design optimizations, from wire-length optimization in detailed placement to timing-constrained voltage assignment. A concurrent algorithm for min-cost flow has been developed based on the methodology. Experiments on voltage island generation in floorplanning have demonstrated its efficiency and scalable speedup over different numbers of cores.", "paper_title": "Multicore Parallelization of Min-Cost Flow for CAD Applications", "paper_id": "WOS:000283350300009"}