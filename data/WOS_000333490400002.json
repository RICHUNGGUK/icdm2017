{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fault_localization"}, {"score": 0.04885877600670675, "phrase": "execution_slices"}, {"score": 0.023031922054740497, "phrase": "hybrid_spectrum"}, {"score": 0.022838148023117573, "phrase": "full_slices"}, {"score": 0.004592340708764929, "phrase": "existing_fault_localization"}, {"score": 0.004533427352547707, "phrase": "execution_coverage"}, {"score": 0.004494570360108983, "phrase": "test_cases"}, {"score": 0.004417848254181138, "phrase": "suspicious_codes"}, {"score": 0.004305203085016233, "phrase": "program_slicing"}, {"score": 0.004195418010131832, "phrase": "program_entities"}, {"score": 0.004106063237069123, "phrase": "specific_criterion"}, {"score": 0.003933000051147382, "phrase": "beneficial_effect"}, {"score": 0.003751011827704279, "phrase": "novel_approach"}, {"score": 0.0033971539563683174, "phrase": "failed_test_cases"}, {"score": 0.0033391018638565715, "phrase": "passed_test_cases"}, {"score": 0.003212074324593725, "phrase": "intersecting_full_slices"}, {"score": 0.0030239842475439814, "phrase": "hybrid_slice_spectrum"}, {"score": 0.0029722900280316216, "phrase": "fault_location_report"}, {"score": 0.0027741761880779535, "phrase": "java_programming_language"}, {"score": 0.0026342827320931937, "phrase": "empirical_study"}, {"score": 0.0023650305205893353, "phrase": "final_experimental_results"}, {"score": 0.0021883400011393564, "phrase": "average_cost"}, {"score": 0.0021695394558562927, "phrase": "examined_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dynamic slicing", " Execute slicing", " Fault localization"], "paper_abstract": "Most of the existing fault localization approaches use execution coverage of test cases to isolate the suspicious codes that likely contain faults. Program slicing can extract the dependencies of program entities with respect to a specific criterion. Therefore this technique is expected to have a beneficial effect on fault localization. In this paper, we propose a novel approach using a hybrid spectrum of full slices and execution slices to improve the effectiveness of fault localization. In particular, our approach firstly computes full slices of failed test cases and execution slices of passed test cases respectively. Secondly it constructs the hybrid spectrum by intersecting full slices and execution slices. Finally it computes the suspiciousness of each statement in the hybrid slice spectrum and generates a fault location report with descending suspiciousness of each statement. We also implement our proposed approach in our prototype tool HSFal by Java programming language. To verify the effectiveness of our approach, we performed an empirical study by the prototype on several widely used open source programs. Our approach is compared with eight representative coverage-based and slice-based fault localization approaches. Final experimental results show that our proposed approach is more effective in fault localization than other compared approaches, and can reduce almost 2.98-31.79% of the average cost of examined code significantly. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "HSFal: Effective fault localization using hybrid spectrum of full slices and execution slices", "paper_id": "WOS:000333490400002"}