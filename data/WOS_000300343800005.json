{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "domain-specific_and_general-purpose_languages"}, {"score": 0.004634799977448855, "phrase": "domain-specific_languages"}, {"score": 0.0044424917428102445, "phrase": "simpler_notation"}, {"score": 0.004404994123834589, "phrase": "general-purpose_languages"}, {"score": 0.004186534737631288, "phrase": "specific_problem_domain"}, {"score": 0.004064117897000019, "phrase": "domain_relevance"}, {"score": 0.0039620308501590795, "phrase": "problem_representation"}, {"score": 0.0038789122930433305, "phrase": "programmers'_efficiency"}, {"score": 0.0037336520904376687, "phrase": "similar_solutions"}, {"score": 0.0037021153060910164, "phrase": "application_libraries"}, {"score": 0.003593812067062062, "phrase": "common_beliefs"}, {"score": 0.0035183910023550246, "phrase": "qualitative_conclusions"}, {"score": 0.0030457198309616694, "phrase": "new_program"}, {"score": 0.002956562077120703, "phrase": "similar_programs"}, {"score": 0.002548331088496964, "phrase": "different_domains"}, {"score": 0.0023210293050850276, "phrase": "program_comprehension"}, {"score": 0.002205692205167157, "phrase": "long-held_beliefs"}, {"score": 0.002177762848946681, "phrase": "dsl_community"}, {"score": 0.0021049977753042253, "phrase": "anecdotal_evidence"}], "paper_keywords": ["Domain-specific languages", " General-purpose languages", " Program understanding", " Program comprehension", " Controlled experiments", " Language evaluations"], "paper_abstract": "Domain-specific languages (DSLs) are often argued to have a simpler notation than general-purpose languages (GPLs), since the notation is adapted to the specific problem domain. Consequently, the impact of domain relevance on the creation of the problem representation is believed to improve programmers' efficiency and accuracy when using DSLs compared with using similar solutions like application libraries in GPLs. Most of the common beliefs have been based upon qualitative conclusions drawn by developers. Rather than implementing the same problem in a DSL and in a GPL and comparing the efficiency and accuracy of each approach, developers often compare the implementation of a new program in a DSL to their previous experiences implementing similar programs in GPLs. Such a conclusion may or may not be valid. This paper takes a more skeptical approach to acceptance of those beliefs. By reporting on a family of three empirical studies comparing DSLs and GPLs in different domains. The results of the studies showed that when using a DSL, developers are more accurate and more efficient in program comprehension than when using a GPL. These results validate some of the long-held beliefs of the DSL community that until now were only supported by anecdotal evidence.", "paper_title": "Program comprehension of domain-specific and general-purpose languages: comparison using a family of experiments", "paper_id": "WOS:000300343800005"}