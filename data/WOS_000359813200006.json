{"auto_keywords": [{"score": 0.036359699237778445, "phrase": "architectural_prototyping"}, {"score": 0.00481495049065317, "phrase": "architecture-centric_product_line_architecture"}, {"score": 0.004681653551412616, "phrase": "great_deal"}, {"score": 0.00432070565627091, "phrase": "best_architecture"}, {"score": 0.004084662575167727, "phrase": "early_stage"}, {"score": 0.004052007312730483, "phrase": "software_development"}, {"score": 0.0037999551521987426, "phrase": "operational_or_performance_expectations"}, {"score": 0.003635790924434452, "phrase": "architecture-centric_product_line"}, {"score": 0.0035350218469335573, "phrase": "proposed_approach"}, {"score": 0.003478694092089197, "phrase": "effective_requirements_validation"}, {"score": 0.00340954056723008, "phrase": "application-level_software"}, {"score": 0.003301733505307784, "phrase": "architecture_design"}, {"score": 0.0029982770062678926, "phrase": "multiple_architecture_alternatives"}, {"score": 0.0029386456078004863, "phrase": "critically_challenging_tasks"}, {"score": 0.0029034358982402346, "phrase": "product_line_architecture"}, {"score": 0.0028229071631385634, "phrase": "multiple_software_architecture_alternatives"}, {"score": 0.0026900059414552823, "phrase": "working_application_prototype"}, {"score": 0.002625914195439153, "phrase": "case_study"}, {"score": 0.0025224615049571427, "phrase": "robust_architecture_patterns"}, {"score": 0.002442634456448208, "phrase": "variation_mechanisms"}, {"score": 0.002384422461262006, "phrase": "different_domains"}, {"score": 0.0023558375480288297, "phrase": "development_process"}, {"score": 0.002191366809047192, "phrase": "upfront_requirements_analysis"}, {"score": 0.002147749117443578, "phrase": "rapid_architectural_prototyping"}, {"score": 0.0021049977753042253, "phrase": "architecture_alternatives"}], "paper_keywords": ["Software product line", " Architectural prototyping", " Requirements validation", " Patterns", " Architecture evaluation", " Software performance"], "paper_abstract": "Software architects typically spend a great deal of time and effort exploring uncertainties, evaluating alternatives, and balancing the concerns of stakeholders. Selecting the best architecture to meet both the functional and non-functional requirements is a critical but difficult task, especially at the early stage of software development when there may be many uncertainties. For example, how will a technology match the operational or performance expectations in reality? This paper presents an approach to building architecture-centric product line. The main objective of the proposed approach is to support effective requirements validation and architectural prototyping for the application-level software. Architectural prototyping is practically essential to architecture design and evaluation. However, architectural prototyping practiced in the field mostly is not used to explore alternatives. Effective construction and evaluation of multiple architecture alternatives is one of the critically challenging tasks. The product line architecture advocated in this paper consists of multiple software architecture alternatives, from which the architect can select and rapidly generate a working application prototype. The paper presents a case study of developing a framework that is primarily built with robust architecture patterns in distributed and concurrent computing and includes variation mechanisms to support various applications even in different domains. The development process of the framework is an application of software product line engineering with an aim to effectively facilitate upfront requirements analysis for an application and rapid architectural prototyping to explore and evaluate architecture alternatives.", "paper_title": "On building architecture-centric product line architecture", "paper_id": "WOS:000359813200006"}