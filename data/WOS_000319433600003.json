{"auto_keywords": [{"score": 0.045526138066185134, "phrase": "object_store"}, {"score": 0.00481495049065317, "phrase": "pool-based_evolutionary_algorithm"}, {"score": 0.0047172117216828, "phrase": "iterative_design"}, {"score": 0.004689650818647484, "phrase": "sofea"}, {"score": 0.0046079260641779755, "phrase": "evolutionary_algorithms"}, {"score": 0.00454090611248773, "phrase": "computer_networks"}, {"score": 0.004501160823792861, "phrase": "asynchronous_and_decentralized_way"}, {"score": 0.00440976345264104, "phrase": "pool_architecture"}, {"score": 0.004307569753106432, "phrase": "asynchronous_interaction"}, {"score": 0.004134372859330047, "phrase": "complex_behavior"}, {"score": 0.003549725559797692, "phrase": "ea"}, {"score": 0.0033968425231674262, "phrase": "average_evaluations"}, {"score": 0.0033572130837348623, "phrase": "increasingly_better_versions"}, {"score": 0.0032793312813966615, "phrase": "best_results"}, {"score": 0.0031845067058084583, "phrase": "running_time"}, {"score": 0.003038440237182784, "phrase": "average_number"}, {"score": 0.0028990540380955596, "phrase": "bigger_influence"}, {"score": 0.0028069426877159664, "phrase": "population_size"}, {"score": 0.0023674192513753996, "phrase": "fault_tolerance"}, {"score": 0.002206290313627494, "phrase": "good_methodology"}, {"score": 0.0021049977753042253, "phrase": "analytic_performance_prediction"}], "paper_keywords": ["Cloud computing", " Cloud storage", " Evolutionary algorithms", " Distributed algorithms", " NoSQL databases", " Key-value stores", " Complex systems"], "paper_abstract": "This paper focuses on the iterative design of SofEA , an architecture for distributing evolutionary algorithms (EAs) across computer networks in an asynchronous and decentralized way. SofEA is based on a pool architecture implemented on an object store, allowing the asynchronous interaction with which several clients. The fact that each client is autonomous leads to complex behavior, which will be examined in the work, so that the design can be validated, rules of thumb can be extracted, and the limits of scalability can be found. In this paper we advance the design of an asynchronous, fault-tolerant, and hopefully scalable distributed EA based on the object store CouchDB. We do so by iteratively analyzing running time and average evaluations to solutions on increasingly better versions of the algorithm, looking for the best results, at least from the point of view of running time. By doing so, we increase speed almost fourfold, and also decrement the average number of evaluations to solution in some cases. Experiments have shown also which critical parameters have the bigger influence on the performance in this kind of systems: live population size and number of conflicts, with both being influenced by the number of clients and the size of the population block each client handles at a time. These experiments also show that there is a balance between scalability and fault tolerance, with scalability dropping when a certain number of clients is reached; further clients only increase fault tolerance, at least in the configurations we are using in this paper. The paper also shows that experimentation and measurement conform a good methodology for the design of this kind of asynchronous, heterogeneous and distributed systems, where analytic performance prediction is almost impossible.", "paper_title": "Designing and testing a pool-based evolutionary algorithm", "paper_id": "WOS:000319433600003"}