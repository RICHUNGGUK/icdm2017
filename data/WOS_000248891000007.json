{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "real-time_tasks"}, {"score": 0.03316377535189864, "phrase": "recovery_blocks"}, {"score": 0.004207734323806386, "phrase": "timely_recovery"}, {"score": 0.0040622852274783275, "phrase": "k_transient_faults"}, {"score": 0.0039449104968131655, "phrase": "well-known_processor_demand_approach"}, {"score": 0.0038085117064624208, "phrase": "extra_overhead"}, {"score": 0.003676811616723809, "phrase": "potential_recovery_operations"}, {"score": 0.003633927813203731, "phrase": "earliest-deadline-first_scheduling"}, {"score": 0.0035288860880035985, "phrase": "necessary_and_sufficient_test"}, {"score": 0.0034673190692473903, "phrase": "dynamic_programming_technique"}, {"score": 0.0033473779327638322, "phrase": "previous_solutions"}, {"score": 0.0028568174308720167, "phrase": "online_version"}, {"score": 0.00270978310478061, "phrase": "priori_knowledge"}, {"score": 0.0026781477395106993, "phrase": "release_times"}, {"score": 0.0026313840069327713, "phrase": "online_algorithm"}, {"score": 0.0023953929817357882, "phrase": "ready_tasks"}, {"score": 0.002298902547676131, "phrase": "periodic_execution_settings"}, {"score": 0.0022323643840655646, "phrase": "sufficient_condition"}, {"score": 0.0021049977753042253, "phrase": "periodic_tasks"}], "paper_keywords": ["real-time scheduling", " real-time systems", " fault tolerance", " deadline-driven systems", " recovery blocks", " processor demand analysis"], "paper_abstract": "In this paper, we consider the problem of checking the feasibility of a set of n real-time tasks while provisioning for timely recovery from (at most) k transient faults. We extend the well-known processor demand approach to take into account the extra overhead that may be induced by potential recovery operations under Earliest-Deadline-First scheduling. We develop a necessary and sufficient test using a dynamic programming technique. An improvement upon the previous solutions is to address and efficiently solve the case where the recovery blocks associated with a given task do not necessarily have the same execution time. We also provide an online version of the algorithm that does not require a priori knowledge of release times. The online algorithm runs in O(m . k(2)) time, where m is the number of ready tasks. We extend the framework to periodic execution settings: We derive a sufficient condition that can be checked efficiently for the feasibility of periodic tasks in the presence of faults. Finally, we analyze the case where the recovery blocks are to be executed nonpreemptively and we formally show that the problem becomes intractable under that assumption.", "paper_title": "Exact fault-sensitive feasibility analysis of real-time tasks", "paper_id": "WOS:000248891000007"}