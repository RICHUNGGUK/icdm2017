{"auto_keywords": [{"score": 0.04509655915119651, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "message_passing_applications"}, {"score": 0.004513255056769647, "phrase": "portable_and_scalable_parallel_applications"}, {"score": 0.004358676214574977, "phrase": "efficient_parallel_applications"}, {"score": 0.004251500979153001, "phrase": "complex_task"}, {"score": 0.004126349202545883, "phrase": "extra_burden"}, {"score": 0.0035891316580885665, "phrase": "main_goal"}, {"score": 0.003397683082821229, "phrase": "explicit_parallelization"}, {"score": 0.0032324864013225166, "phrase": "parallel_applications"}, {"score": 0.002955050521440921, "phrase": "intrusive_changes"}, {"score": 0.002925728709297618, "phrase": "existing_sequential_programs"}, {"score": 0.0028394925080958205, "phrase": "generative_programming_tools"}, {"score": 0.0027420820738468577, "phrase": "domain-specific_language"}, {"score": 0.0024571101010891347, "phrase": "required_code"}, {"score": 0.00239657981537094, "phrase": "existing_sequential_applications"}, {"score": 0.0022799458141165587, "phrase": "generated_applications"}, {"score": 0.002223770196464436, "phrase": "manually_written_versions"}, {"score": 0.002136747803494932, "phrase": "explicit_changes"}, {"score": 0.0021049977753042253, "phrase": "existing_sequential_code"}], "paper_keywords": ["Parallel programming", " Explicit parallelization", " MPI", " Abstraction", " Generative programming", " Domain-specific language"], "paper_abstract": "Message Passing Interface (MPI) is the most popular standard for writing portable and scalable parallel applications for distributed memory architectures. Writing efficient parallel applications using MPI is a complex task, mainly due to the extra burden on programmers to explicitly handle all the complexities of message-passing (viz., inter-process communication, data distribution, load-balancing, and synchronization). The main goal of our research is to raise the level of abstraction of explicit parallelization using MPI such that the effort involved in developing parallel applications is significantly reduced in terms of the reduction in the amount of code written manually while avoiding intrusive changes to existing sequential programs. In this research, generative programming tools and techniques are combined with a domain-specific language, Hi-PaL (High-Level Parallelization Language), for automating the process of generating and inserting the required code for parallelization into the existing sequential applications. The results show that the performance of the generated applications is comparable to the manually written versions of the applications, while requiring no explicit changes to the existing sequential code.", "paper_title": "Raising the level of abstraction for developing message passing applications", "paper_id": "WOS:000298297000025"}