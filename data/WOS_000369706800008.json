{"auto_keywords": [{"score": 0.0407998439243262, "phrase": "program_code"}, {"score": 0.012988993418737478, "phrase": "forensic_tool"}, {"score": 0.011792523311393398, "phrase": "plc_logger"}, {"score": 0.006764734578687944, "phrase": "scada_systems"}, {"score": 0.005569080089677229, "phrase": "plc_debugging_tools"}, {"score": 0.005197423188500384, "phrase": "memory_addresses"}, {"score": 0.00481495049065317, "phrase": "digital_forensic_investigations_on_scada_systems."}, {"score": 0.004710227709931926, "phrase": "strong_evidence"}, {"score": 0.004622271625219495, "phrase": "forensic_capability"}, {"score": 0.004564544414530739, "phrase": "thorough_post-incident_investigations"}, {"score": 0.004535950496583731, "phrase": "current_live_forensic_tools"}, {"score": 0.004246271940215511, "phrase": "embedded_devices"}, {"score": 0.0036058303048537837, "phrase": "important_forensic_artefact"}, {"score": 0.0035162351426730972, "phrase": "attacker's_intentions"}, {"score": 0.003260543967539824, "phrase": "direct_access"}, {"score": 0.0031595558075901164, "phrase": "promising_functionalities"}, {"score": 0.003081015075417782, "phrase": "\"snapshot\"_function"}, {"score": 0.00292051932649827, "phrase": "specific_software"}, {"score": 0.0028839835971201846, "phrase": "case_example"}, {"score": 0.0024795356895447765, "phrase": "attacker's_intention"}, {"score": 0.002365152662601255, "phrase": "nist"}, {"score": 0.0023429088315910585, "phrase": "plc_logger's_suitability"}, {"score": 0.002241858171569679, "phrase": "experiment's_results"}], "paper_keywords": ["PLC debugging", " program code", " SCADA", " digital forensics", " NIST", " PLCs", " attackers"], "paper_abstract": "The Stuxnet malware attack has provided strong evidence for the development of a forensic capability to aid in thorough post-incident investigations. Current live forensic tools are typically used to acquire and examine memory from computers running either Windows or Unix. This makes them incompatible with embedded devices found on SCADA systems that have their own bespoke operating system. Currently, only a limited number of forensics tools have been developed for SCADA systems, with no development of tools to acquire the program code from PLCs. In this paper, we explore this problem with two main hypotheses in mind. Our first hypothesis was that the program code is an important forensic artefact that can be used to determine an attacker's intentions. Our second hypothesis was that PLC debugging tools can be used for forensics to facilitate the acquisition and analysis of the program code from PLCs. With direct access to the memory addresses of the PLC, PLC debugging tools have promising functionalities as a forensic tool, such as the \"Snapshot\" function that allows users to directly take values from the memory addresses of the PLC, without vendor specific software. As a case example we will focus on PLC Logger as a forensic tool to acquire and analyse the program code on a PLC. Using these two hypotheses we developed two experiments. The results from Experiment 1 provided evidence to indicate that it is possible to acquire the program code using PLC Logger and to identify the attacker's intention, therefore our hypothesis was accepted. In Experiment 2, we used an existing Computer Forensics Tool Testing (CFTT) framework by NIST to test PLC Logger's suitability as a forensic tool to analyse and acquire the program code. Based on the experiment's results, this hypothesis was rejected as PLC Logger had failed half of the tests. This suggests that PLC Logger in its current state has limited suitability as a forensic tool, unless the shortcomings are addressed.", "paper_title": "EXPLORING THE USE OF PLC DEBUGGING TOOLS FOR DIGITAL FORENSIC INVESTIGATIONS ON SCADA SYSTEMS", "paper_id": "WOS:000369706800008"}