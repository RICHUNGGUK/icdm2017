{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lanczos_kernel"}, {"score": 0.004581660953729745, "phrase": "fixed-point_implementation"}, {"score": 0.0045404698551856125, "phrase": "linear_algebra_kernels"}, {"score": 0.004499647408293102, "phrase": "low-cost_embedded_systems"}, {"score": 0.004281568920264999, "phrase": "fixed-point_arithmetic"}, {"score": 0.004243064277617193, "phrase": "additional_design_challenges"}, {"score": 0.00418595288276353, "phrase": "floating-point_arithmetic"}, {"score": 0.004055652445791872, "phrase": "peak_values"}, {"score": 0.0038764861784138117, "phrase": "linear_equations"}, {"score": 0.0036553070575015344, "phrase": "design_challenges"}, {"score": 0.0034623203126093833, "phrase": "bounding_problem"}, {"score": 0.003369669078274226, "phrase": "current_tools"}, {"score": 0.0032794890195334513, "phrase": "lanczos_iteration"}, {"score": 0.0032061793819537633, "phrase": "well-known_methods"}, {"score": 0.0031629800646754505, "phrase": "conjugate_gradient"}, {"score": 0.002955533639862811, "phrase": "low-complexity_scaling_procedure"}, {"score": 0.0028764048059439205, "phrase": "standard_linear_algebra"}, {"score": 0.0028376361457661415, "phrase": "tight_analytical_bounds"}, {"score": 0.0026634937939104177, "phrase": "original_matrix"}, {"score": 0.0025804616931593897, "phrase": "numerical_behavior"}, {"score": 0.0025572160146590623, "phrase": "fixed-point_implementations"}, {"score": 0.002522738549524317, "phrase": "modified_problem"}, {"score": 0.002389403849342894, "phrase": "floating-point_implementation"}, {"score": 0.0022836785412390544, "phrase": "field-programmable_gate"}, {"score": 0.0022124605840026313, "phrase": "potential_performance"}, {"score": 0.0021049977753042253, "phrase": "fixed-point_computation"}], "paper_keywords": ["Computer arithmetic", " computations on matrices", " numerical algorithms", " design aids"], "paper_abstract": "We consider the problem of enabling fixed-point implementation of linear algebra kernels on low-cost embedded systems, as well as motivating more efficient computational architectures for scientific applications. Fixed-point arithmetic presents additional design challenges compared to floating-point arithmetic, such as having to bound peak values of variables and control their dynamic ranges. Algorithms for solving linear equations or finding eigenvalues are typically nonlinear and iterative, making solving these design challenges a nontrivial task. For these types of algorithms, the bounding problem cannot be automated by current tools. We focus on the Lanczos iteration, the heart of well-known methods such as conjugate gradient and minimum residual. We show how one can modify the algorithm with a low-complexity scaling procedure to allow us to apply standard linear algebra to derive tight analytical bounds on all variables of the process, regardless of the properties of the original matrix. It is shown that the numerical behavior of fixed-point implementations of the modified problem can be chosen to be at least as good as a floating-point implementation, if necessary. The approach is evaluated on field-programmable gate array (FPGA) platforms, highlighting orders of magnitude potential performance and efficiency improvements by moving form floating-point to fixed-point computation.", "paper_title": "A Low Complexity Scaling Method for the Lanczos Kernel in Fixed-Point Arithmetic", "paper_id": "WOS:000348053400001"}