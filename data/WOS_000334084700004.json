{"auto_keywords": [{"score": 0.044975450332370666, "phrase": "semantic_actions"}, {"score": 0.03511010748291991, "phrase": "lambda_calculi"}, {"score": 0.030752854625884257, "phrase": "left-recursion_elimination"}, {"score": 0.00481495049065317, "phrase": "parsing_actions"}, {"score": 0.00458869631642791, "phrase": "parser_generator_tool"}, {"score": 0.004461634909525319, "phrase": "useful_semantic_information"}, {"score": 0.00437302709192313, "phrase": "purely_syntactic_analysis"}, {"score": 0.004101088357088207, "phrase": "parser_generator"}, {"score": 0.004003511299646736, "phrase": "grammar_rules"}, {"score": 0.0038305869305614504, "phrase": "functional_programming_view"}, {"score": 0.0036651042289628324, "phrase": "mostly_functional_programming_languages"}, {"score": 0.0033552055241931346, "phrase": "categorical_semantics"}, {"score": 0.0032621876512517398, "phrase": "premonoidal_categories"}, {"score": 0.003171740347925348, "phrase": "programming_languages"}, {"score": 0.0029268619875960715, "phrase": "syntactic_transformation"}, {"score": 0.002857143106182505, "phrase": "corresponding_semantic_transformation"}, {"score": 0.0026471070725516467, "phrase": "passing_style"}, {"score": 0.002553063001454623, "phrase": "functional_programming"}, {"score": 0.0024822279007111255, "phrase": "input_language"}, {"score": 0.0024623517958288228, "phrase": "parser_generators"}, {"score": 0.0024133533748653033, "phrase": "call-by-value_calculus"}, {"score": 0.0023369711258107244, "phrase": "type-and-effect_system"}, {"score": 0.002253920389285441, "phrase": "grammar_symbols"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Semantics", " Abstract machines", " Continuations", " Parser generators", " Left recursion elimination"], "paper_abstract": "Parsers, whether constructed by hand or automatically via a parser generator tool, typically need to compute some useful semantic information in addition to the purely syntactic analysis of their input. Semantic actions may be added to parsing code by hand, or the parser generator may have its own syntax for annotating grammar rules with semantic actions. In this paper, we take a functional programming view of such actions. We use concepts from the semantics of mostly functional programming languages and adapt them to give meaning to the actions of the parser. Specifically, the semantics is inspired by the categorical semantics of lambda calculi and the use of premonoidal categories for the semantics of effects in programming languages. This framework is then applied to our leading example, the transformation of grammars to eliminate left recursion. The syntactic transformation of left-recursion elimination leads to a corresponding semantic transformation of the actions for the grammar. We prove the semantic transformation correct and relate it to continuation passing style, a widely studied transformation in lambda calculi and functional programming. As an idealization of the input language of parser generators, we define a call-by-value calculus with first-order functions and a type-and-effect system where the effects are given by sequences of grammar symbols. The account of left-recursion elimination is then extended to this calculus. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "On the semantics of parsing actions", "paper_id": "WOS:000334084700004"}