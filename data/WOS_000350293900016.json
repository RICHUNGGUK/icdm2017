{"auto_keywords": [{"score": 0.03960315171485375, "phrase": "moldable_tasks"}, {"score": 0.01047980235298076, "phrase": "precedence_constraints"}, {"score": 0.005304406803574167, "phrase": "arbitrary_speedup_functions"}, {"score": 0.00481495049065317, "phrase": "moldable_task"}, {"score": 0.004655285779819366, "phrase": "increasing_number"}, {"score": 0.004577440795549049, "phrase": "current_parallel_machines"}, {"score": 0.004519908617935935, "phrase": "growing_need"}, {"score": 0.0044630962990919775, "phrase": "concurrent_execution"}, {"score": 0.004333283735537634, "phrase": "parallel_task_scheduling"}, {"score": 0.004154332348800334, "phrase": "moldable_task_model"}, {"score": 0.003999578057088828, "phrase": "fixed_number"}, {"score": 0.003802135020791801, "phrase": "efficient_scheduling_algorithms"}, {"score": 0.003584025547693836, "phrase": "theoretical_and_practical_approaches"}, {"score": 0.0031845067058084583, "phrase": "competing_approximation_algorithms"}, {"score": 0.0030399874838260886, "phrase": "speedup_function"}, {"score": 0.002770273247998903, "phrase": "resulting_speedup"}, {"score": 0.0027469703311742647, "phrase": "parallel_programs"}, {"score": 0.002723862897844177, "phrase": "current_hardware"}, {"score": 0.0027009493171069763, "phrase": "deep_memory_hierarchies"}, {"score": 0.0025458479274370832, "phrase": "new_algorithm"}, {"score": 0.0024302416436559867, "phrase": "makespan_objective"}, {"score": 0.002280990744438186, "phrase": "competitive_schedules"}, {"score": 0.0021866066626507028, "phrase": "approximation_algorithms"}, {"score": 0.0021682027434117095, "phrase": "non-decreasing_speedup_functions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multiprocessor task scheduling", " parallel and moldable tasks", " makespan optimization", " linear programming", " arbitrary speedup functions"], "paper_abstract": "Because of the increasing number of cores of current parallel machines and the growing need for a concurrent execution of tasks, the problem of parallel task scheduling is more relevant than ever, especially under the moldable task model, in which tasks are allocated to a fixed number of processors before execution. Much research has been conducted to develop efficient scheduling algorithms for moldable tasks, both in theory and practice. The problem is that theoretical and practical approaches expose shortcomings, for example, many approximation algorithms only guarantee bounds under assumptions, which are unrealistic in practice, or most heuristics have not been rigorously compared with competing approximation algorithms. In particular, it is often assumed that the speedup function of moldable tasks is either non-decreasing, sub-linear, or concave. In practice, however, the resulting speedup of parallel programs on current hardware with deep memory hierarchies is most often neither non-decreasing nor concave. We present a new algorithm for the problem of scheduling moldable tasks with precedence constraints for the makespan objective and for arbitrary speedup functions. We show through simulation that the algorithm not only creates competitive schedules for moldable tasks with arbitrary speedup functions but also outperforms other published heuristics and approximation algorithms for non-decreasing speedup functions. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "One step toward bridging the gap between theory and practice in moldable task scheduling with precedence constraints", "paper_id": "WOS:000350293900016"}