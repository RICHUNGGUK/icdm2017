{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "embedded_applications"}, {"score": 0.004721162131188487, "phrase": "embedded_system"}, {"score": 0.004652016085325825, "phrase": "single_application"}, {"score": 0.004216112320418982, "phrase": "optimal_one"}, {"score": 0.004053362743156545, "phrase": "optimal_cache_configuration"}, {"score": 0.003993958025223994, "phrase": "overall_memory_access_time"}, {"score": 0.00376488621224566, "phrase": "line_size"}, {"score": 0.0033950634506367235, "phrase": "cache_inclusion_property"}, {"score": 0.0033288399506044763, "phrase": "exact_cache_simulation"}, {"score": 0.0028857130140890787, "phrase": "almost_optimal_cache_configuration"}, {"score": 0.0028154895878702633, "phrase": "access_time"}, {"score": 0.0026277995163948263, "phrase": "cache_configurations"}, {"score": 0.0025137856138000036, "phrase": "conventional_approaches"}, {"score": 0.0022223176391038785, "phrase": "fastest_approach"}, {"score": 0.0021363670305843403, "phrase": "world_fastest_cache_design_space_exploration"}, {"score": 0.0021049977753042253, "phrase": "total_memory_access_time"}], "paper_keywords": ["cache", " cache optimization", " design space exploration", " cache simulation", " embedded system"], "paper_abstract": "In an embedded system where a single application or a class of applications is repeatedly executed on a processor, its cache configuration can be customized such that an optimal one is achieved. We can have an optimal cache configuration which minimizes overall memory access time by varying the three cache parameters: the number of sets, a line size, and an associativity. In this paper, we first propose two cache simulation algorithms: CRCB1 and CRCB2, based on Cache Inclusion Property. They realize exact cache simulation but decrease the number of cache hit/miss judgments dramatically. We further propose three more cache design space exploration algorithms: CRMF1, CRMF2, and CRMF3, based on our experimental observations. They can find an almost optimal cache configuration from the viewpoint of access time. By using our approach, the number of cache hit/miss judgments required for optimizing cache configurations is reduced to 1/10-1/50 compared to conventional approaches. As a result, our proposed approach totally runs an aver-age of 3.2 times faster and a maximum of 5.3 times faster compared to the fastest approach proposed so far. Our proposed cache simulation approach achieves the world fastest cache design space exploration when optimizing total memory access time.", "paper_title": "An L1 Cache Design Space Exploration System for Embedded Applications", "paper_id": "WOS:000267640300006"}