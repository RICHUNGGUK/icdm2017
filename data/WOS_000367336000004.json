{"auto_keywords": [{"score": 0.04631200717184357, "phrase": "csa"}, {"score": 0.03924506995144365, "phrase": "new_approach"}, {"score": 0.03308082729710934, "phrase": "model_checking"}, {"score": 0.00481495049065317, "phrase": "automatic_generation_of_minimal_cut_sets"}, {"score": 0.004753194996637899, "phrase": "cut_set"}, {"score": 0.004652016085325825, "phrase": "component_failure_modes"}, {"score": 0.004533427352547707, "phrase": "system_failure"}, {"score": 0.004475266375001531, "phrase": "set_analysis"}, {"score": 0.004342430078306461, "phrase": "critical_systems"}, {"score": 0.004249957578636515, "phrase": "system_vulnerabilities"}, {"score": 0.004213519983188574, "phrase": "design_time"}, {"score": 0.0041773934798743405, "phrase": "model_checking_tools"}, {"score": 0.0040186038781533946, "phrase": "minimal_cut_sets"}, {"score": 0.003623949225126944, "phrase": "bt_analyser"}, {"score": 0.003531474887552889, "phrase": "multiple_counterexamples"}, {"score": 0.003441352119167824, "phrase": "broader_class"}, {"score": 0.0034118234596993836, "phrase": "system_failures"}, {"score": 0.003296212583539166, "phrase": "failure_state_formulae"}, {"score": 0.0031845067058084583, "phrase": "traditional_approach"}, {"score": 0.0029089095588612007, "phrase": "already-discovered_cut_sets"}, {"score": 0.0028591768694918, "phrase": "model_checker"}, {"score": 0.0025892330566358503, "phrase": "tedious_and_error-prone_manual_process"}, {"score": 0.0025449518236394103, "phrase": "significantly_reduced_computation_time"}, {"score": 0.0024799423362011582, "phrase": "larger_models"}, {"score": 0.0023958326775913165, "phrase": "bt_analyser_for_csa"}, {"score": 0.0023145690608400425, "phrase": "single_best_strategy"}, {"score": 0.0021789194955896124, "phrase": "comparative_results"}, {"score": 0.0021049977753042253, "phrase": "behavior_tree_modelling_language"}], "paper_keywords": ["Behavior Trees", " minimal cut sets", " model checking", " safety analysis"], "paper_abstract": "A cut set is a collection of component failure modes that could lead to a system failure. Cut Set Analysis (CSA) is applied to critical systems to identify and rank system vulnerabilities at design time. Model checking tools have been used to automate the generation of minimal cut sets but are generally based on checking reachability of system failure states. This paper describes a new approach to CSA using a Linear Temporal Logic (LTL) model checker called BT Analyser that supports the generation of multiple counterexamples. The approach enables a broader class of system failures to be analysed, by generalising from failure state formulae to failure behaviours expressed in LTL. The traditional approach to CSA using model checking requires the model or system failure to be modified, usually by hand, to eliminate already-discovered cut sets, and the model checker to be rerun, at each step. By contrast, the new approach works incrementally and fully automatically, thereby removing the tedious and error-prone manual process and resulting in significantly reduced computation time. This in turn enables larger models to be checked. Two different strategies for using BT Analyser for CSA are presented. There is generally no single best strategy for model checking: their relative efficiency depends on the model and property being analysed. Comparative results are given for the A320 hydraulics case study in the Behavior Tree modelling language.", "paper_title": "Automatic Generation of Minimal Cut Sets", "paper_id": "WOS:000367336000004"}