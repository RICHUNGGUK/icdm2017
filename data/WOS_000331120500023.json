{"auto_keywords": [{"score": 0.024093535995731805, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "deterministic-by-construction_parallel_programming_models"}, {"score": 0.004484215355348556, "phrase": "principled_approach"}, {"score": 0.004448892453489832, "phrase": "deterministic-by-construction_parallel_programming"}, {"score": 0.004276390289178831, "phrase": "memory_locations"}, {"score": 0.004143196873246147, "phrase": "application-specific_lattice"}, {"score": 0.003935513160201076, "phrase": "old_and_new_values"}, {"score": 0.0036360703245710124, "phrase": "specified_threshold"}, {"score": 0.0029830992938695007, "phrase": "event_handlers"}, {"score": 0.0027341763737751467, "phrase": "expressive_and_useful_style"}, {"score": 0.002556109032208553, "phrase": "extended_lvars"}, {"score": 0.0022162970216404927, "phrase": "lvar-based_data_structures"}, {"score": 0.002172811149894415, "phrase": "case_study"}, {"score": 0.002138636271204459, "phrase": "programming_model"}, {"score": 0.0021049977753042253, "phrase": "parallel_speedup"}], "paper_keywords": ["Deterministic parallelism", " lattices", " quasi-determinism"], "paper_abstract": "Deterministic-by-construction parallel programming models offer the advantages of parallel speedup while avoiding the nondeterministic, hard-to-reproduce bugs that plague fully concurrent code. A principled approach to deterministic-by-construction parallel programming with shared state is offered by LVars: shared memory locations whose semantics are defined in terms of an application-specific lattice. Writes to an LVar take the least upper bound of the old and new values with respect to the lattice, while reads from an LVar can observe only that its contents have crossed a specified threshold in the lattice. Although it guarantees determinism, this interface is quite limited. We extend LVars in two ways. First, we add the ability to \"freeze\" and then read the contents of an LVar directly. Second, we add the ability to attach event handlers to an LVar, triggering a callback when the LVar's value changes. Together, handlers and freezing enable an expressive and useful style of parallel programming. We prove that in a language where communication takes place through these extended LVars, programs are at worst quasi-deterministic: on every run, they either produce the same answer or raise an error. We demonstrate the viability of our approach by implementing a library for Haskell supporting a variety of LVar-based data structures, together with a case study that illustrates the programming model and yields promising parallel speedup.", "paper_title": "Freeze After Writing Quasi-Deterministic Parallel Programming with LVars", "paper_id": "WOS:000331120500023"}