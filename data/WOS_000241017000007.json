{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "trace_cache"}, {"score": 0.010996373028604279, "phrase": "decoupled_design"}, {"score": 0.007638839556692812, "phrase": "trace_table"}, {"score": 0.004709333998298903, "phrase": "deeply_pipelined_superscalar_processors"}, {"score": 0.004333406378146173, "phrase": "desired_instruction_trace"}, {"score": 0.0038998328617557013, "phrase": "trace_request"}, {"score": 0.003451517638449501, "phrase": "conventional_instruction"}, {"score": 0.003105905142768581, "phrase": "trace_id"}, {"score": 0.0030715948036518603, "phrase": "pc-based_prediction_methods"}, {"score": 0.002905629026254221, "phrase": "instruction_memory_path"}, {"score": 0.0028260302580927856, "phrase": "accelerated_slow_path_instruction_delivery"}, {"score": 0.0026881926384093088, "phrase": "comparable_benefit"}, {"score": 0.0024054226746197706, "phrase": "high_tolerance"}], "paper_keywords": [""], "paper_abstract": "The trace cache is a technique that provides accurate, high bandwidth instruction fetch. However, when a desired instruction trace is not found in the cache, conventional instruction fetch and decode must be used to satisfy the trace request. Such auxiliary fetch hardware can be expensive in terms of energy, area and complexity. An approach to combine a trace cache and conventional instruction fetch hardware using a decoupled design is. explored. The design enables the processor to dynamically switch between trace ID and PC-based prediction methods and helps to hide the latency associated with the instruction memory path. The decoupled design with accelerated slow path instruction delivery and no instruction cache is able to provide comparable benefit to a front-end with an 8 kB instruction cache (within 2% of the instructions per cycle with the cache). High tolerance can be demonstrated for both trace table misses and increased memory latency when scaling down the size of the trace table and scaling up the L2 access latency.", "paper_title": "Trace cache miss tolerance for deeply pipelined superscalar processors", "paper_id": "WOS:000241017000007"}