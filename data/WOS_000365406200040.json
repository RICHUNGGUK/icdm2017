{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "interactive_smart_grid"}, {"score": 0.004690025569165577, "phrase": "hierarchical_smart_grid_architecture"}, {"score": 0.004568326972997448, "phrase": "smart_home"}, {"score": 0.004416465443332974, "phrase": "traditional_households"}, {"score": 0.004383406949799696, "phrase": "smart_devices"}, {"score": 0.004318027255281003, "phrase": "advanced_metering_infrastructure"}, {"score": 0.004269630481719451, "phrase": "intelligent_entities"}, {"score": 0.004237666411136617, "phrase": "instantaneous_and_distributive_decision-making_capabilities"}, {"score": 0.004143196873246147, "phrase": "individual_households"}, {"score": 0.004112175423546628, "phrase": "general_customer_units"}, {"score": 0.004081385289516914, "phrase": "possibly_large_scales"}, {"score": 0.003990385737207714, "phrase": "hidden_mode_markov_decision_process"}, {"score": 0.0037153426267756452, "phrase": "real-time_decision-making_framework"}, {"score": 0.0036324746826127997, "phrase": "demand_response_schemes"}, {"score": 0.003485304124598714, "phrase": "real-time_power-load_mismatches"}, {"score": 0.0034332736827447654, "phrase": "baum-welch_algorithm"}, {"score": 0.003369322866499541, "phrase": "nonstationary_dynamics"}, {"score": 0.0032694619052789768, "phrase": "value_iteration"}, {"score": 0.003172551230409948, "phrase": "hm-mdp_problem"}, {"score": 0.003136952589428254, "phrase": "conventional_vi"}, {"score": 0.003078504229140364, "phrase": "parsimonious_sets"}, {"score": 0.0030097975788892896, "phrase": "finite_representation"}, {"score": 0.002976019715894587, "phrase": "optimal_value_function"}, {"score": 0.0029095936591723645, "phrase": "value_function"}, {"score": 0.0028769371032728733, "phrase": "time_step"}, {"score": 0.0028233196851239753, "phrase": "representational_parsimonious_sets"}, {"score": 0.0027811441123794427, "phrase": "incremental_pruning_algorithm"}, {"score": 0.0027395968397212053, "phrase": "exact_algorithm"}, {"score": 0.002708843102301451, "phrase": "optimal_policies"}, {"score": 0.002688532127821979, "phrase": "maximum_rewards"}, {"score": 0.0026583500966092044, "phrase": "smart_homes"}, {"score": 0.002531418327080538, "phrase": "low-complexity_real-time_algorithm"}, {"score": 0.002392453087295389, "phrase": "q-learning-based_approximate_dynamic_programming"}, {"score": 0.0022022878843247257, "phrase": "scheduling_period"}, {"score": 0.0021530945641993152, "phrase": "exact_and_approximate_algorithms"}], "paper_keywords": ["Approximate dynamic programming (ADP)", " Baum-Welch algorithm", " hidden mode Markov decision process (HM-MDP)", " incremental pruning (IP)", " Q-learning", " smart home"], "paper_abstract": "In this paper, a hierarchical smart grid architecture is presented. The concept of smart home is extended in two aspects: 1) from traditional households with smart devices, such as advanced metering infrastructure, to intelligent entities with instantaneous and distributive decision-making capabilities; and 2) from individual households to general customer units of possibly large scales. We then develop a hidden mode Markov decision process (HM-MDP) model for a customer real-time decision-making problem. This real-time decision-making framework can effectively be integrated with demand response schemes, which are prediction based and therefore inevitably lead to real-time power-load mismatches. With the Baum-Welch algorithm adopted to learn the nonstationary dynamics of the environment, we propose a value iteration (VI)-based exact solution algorithm for the HM-MDP problem. Unlike conventional VI, the concept of parsimonious sets is used to enable a finite representation of the optimal value function. Instead of iterating the value function in each time step, we iterate the representational parsimonious sets by using the incremental pruning algorithm. Although this exact algorithm leads to optimal policies giving maximum rewards for the smart homes, its complexity suffers from the curse of dimensionality. To obtain a low-complexity real-time algorithm that allows adaptively incorporating new observations as the environment changes, we resort to Q-learning-based approximate dynamic programming. Q-learning offers more flexibility in practice because it does not require specific starting and ending points of the scheduling period. Performance analysis of both exact and approximate algorithms, as compared with the other possible alternative decision-making strategies, is presented in simulation results.", "paper_title": "Machine-Learning Aided Optimal Customer Decisions for an Interactive Smart Grid", "paper_id": "WOS:000365406200040"}