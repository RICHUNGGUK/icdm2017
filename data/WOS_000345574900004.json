{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_ray_stabbing"}, {"score": 0.004608284537368354, "phrase": "dynamic_set_s"}, {"score": 0.004541377162789232, "phrase": "n_horizontal_segments"}, {"score": 0.004283280680222718, "phrase": "vertical_ray_q"}, {"score": 0.004039792863335641, "phrase": "intersecting_q"}, {"score": 0.003810093416457147, "phrase": "external_memory_model"}, {"score": 0.0031039212233596415, "phrase": "reported_segments"}, {"score": 0.002680932410366204, "phrase": "b_set"}, {"score": 0.0024915167458844914, "phrase": "internal_memory"}], "paper_keywords": ["Ray stabbing", " segment intersection", " computational geometry", " dynamic data structures", " pointer machines"], "paper_abstract": "We consider maintaining a dynamic set S of N horizontal segments in R-2 such that, given a vertical ray Q in R-2, the segments in S intersecting Q can be reported efficiently. In the external memory model, we give a structure that consumes O(N/B) space, answers a query in O(log(B) N + K/B) time (where K is the number of reported segments), and can be updated in O(log(B) N) amortized time per insertion and deletion. With B set to a constant, the structure also works in internal memory, consuming space O(N), answering a query in O(log N + K) time, and supporting an update in O(log N) amortized time.", "paper_title": "Dynamic Ray Stabbing", "paper_id": "WOS:000345574900004"}