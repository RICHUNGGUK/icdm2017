{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "divisible_load_distribution"}, {"score": 0.046556461636962906, "phrase": "multi-installment_processing"}, {"score": 0.00475413908468027, "phrase": "start-up_costs"}, {"score": 0.004664352260912174, "phrase": "complete_b-ary_tree"}, {"score": 0.004404994123834589, "phrase": "complete_b-ary_tree_networks"}, {"score": 0.004213240903095234, "phrase": "divisible_load"}, {"score": 0.004081385289516914, "phrase": "communication_processes"}, {"score": 0.0040298010803060495, "phrase": "multiple_time_intervals"}, {"score": 0.003953639783762917, "phrase": "pipelined_fashion"}, {"score": 0.003503497128638102, "phrase": "initial_distribution_time"}, {"score": 0.0033508547759861186, "phrase": "closed-form_expressions"}, {"score": 0.003287482882222731, "phrase": "parallel_processing_time"}, {"score": 0.003026391655379905, "phrase": "asymptotic_speed-up"}, {"score": 0.0029691377785333872, "phrase": "proposed_algorithm"}, {"score": 0.002931569771634119, "phrase": "b_beta"}, {"score": 0.0028037753646260937, "phrase": "computation-to-communication_ratio"}, {"score": 0.002664513608074113, "phrase": "algorithm_m"}, {"score": 0.0026140878612307536, "phrase": "classic_algorithm"}, {"score": 0.0025160740422447837, "phrase": "algorithm_s"}, {"score": 0.002316105585203396, "phrase": "computation_and_communication_start-up_costs"}, {"score": 0.0021319959284827896, "phrase": "algorithm_ms"}, {"score": 0.0021049977753042253, "phrase": "even_better_performance"}], "paper_keywords": ["Divisible load", " complete b-ary tree", " load distribution", " pipelined communication", " multi-installment"], "paper_abstract": "This work investigates divisible load distribution using multi-installment processing on complete b-ary tree networks. Classic methods of distributing a divisible load divide the computation and communication processes into multiple time intervals in a pipelined fashion. The algorithm M (multi-installment) herein uses multi-installment processing with pipelined communication to reduce the initial distribution time and to improve the performance. Closed-form expressions for the parallel processing time and speed-up are derived. This work reveals that the asymptotic speed-up of the proposed algorithm is b beta + 1 where beta is the computation-to-communication ratio of a node in the system. Algorithm M outperforms the classic algorithm in all cases. The algorithm S (start-up cost) that is developed herein includes the computation and communication start-up costs. Finally, two algorithms M and S are combined to form algorithm MS with even better performance than each.", "paper_title": "Novel Methods for Divisible Load Distribution with Start-Up Costs on a Complete b-Ary Tree", "paper_id": "WOS:000362791400017"}