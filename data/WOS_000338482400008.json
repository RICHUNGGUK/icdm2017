{"auto_keywords": [{"score": 0.0417692326868065, "phrase": "om"}, {"score": 0.00481495049065317, "phrase": "open_music_visual_programming_language"}, {"score": 0.004597754207658615, "phrase": "domain-specific_visual_programming_language"}, {"score": 0.004534517530868195, "phrase": "computer-aided_music_composition"}, {"score": 0.004410629943506433, "phrase": "common_lisp"}, {"score": 0.004309968592440261, "phrase": "functional_processes"}, {"score": 0.004231089088705995, "phrase": "musical_data"}, {"score": 0.004077616905584829, "phrase": "demand-driven_evaluations"}, {"score": 0.003911578552479064, "phrase": "transformational_declarative_paradigm"}, {"score": 0.0037696519417841287, "phrase": "reactive_data-flow"}, {"score": 0.0035828427627676075, "phrase": "interactive_systems"}, {"score": 0.0032968474833776906, "phrase": "denotational_semantics"}, {"score": 0.0032514447965530354, "phrase": "visual_language"}, {"score": 0.002950608985750058, "phrase": "reactive_computations"}, {"score": 0.002909960617042717, "phrase": "functional_graphs"}, {"score": 0.002843450389745497, "phrase": "resulting_language"}, {"score": 0.0028172726995962173, "phrase": "data-driven_executions"}, {"score": 0.0027784560880013886, "phrase": "existing_demand-driven_mechanism"}, {"score": 0.0026042472337367015, "phrase": "incremental_construction"}, {"score": 0.0024750474634399797, "phrase": "visual_programming_workflow"}, {"score": 0.0022772782536385717, "phrase": "graphically_designed_functional_expressions"}, {"score": 0.002225196379204285, "phrase": "external_events"}, {"score": 0.0021245712108461227, "phrase": "computer-assisted_composition_environments"}, {"score": 0.0021049977753042253, "phrase": "real-time_musical_systems"}], "paper_keywords": ["Visual programming", " Functional languages", " Reactive data flow", " Propagation", " Evaluation strategy", " Computer-aided composition"], "paper_abstract": "Objectives: OpenMusic (OM) is a domain-specific visual programming language designed for computer-aided music composition. This language based on Common Lisp allows composers to develop functional processes generating or transforming musical data, and to execute them locally by demand-driven evaluations. As most historical computer-aided composition environments, OM relies on a transformational declarative paradigm, which is hard to conciliate with reactive data-flow (an evaluation scheme more adequate to the development of interactive systems). We propose to link these two evaluation paradigms in the same and consistent visual programming framework. Methods: We establish a denotational semantics of the visual language, which gives account for its demand-driven evaluation mechanism and the incremental construction of programs. We then extend this semantics to enable reactive computations in the functional graphs. Results: The resulting language merges data-driven executions with the existing demand-driven mechanism. A conservative implementation is proposed. Conclusions: We show that the incremental construction of programs and their data-driven and demand-driven evaluations can be smoothly integrated in the visual programming workflow. This integration allows for the propagation of changes in the programs, and the evaluation of graphically designed functional expressions as a response to external events, a first step in bridging the gap between computer-assisted composition environments and real-time musical systems. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "A reactive extension of the Open Music visual programming language", "paper_id": "WOS:000338482400008"}