{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "concept-language_pairs"}, {"score": 0.004761968711051715, "phrase": "human_designer_usage"}, {"score": 0.004674952036988355, "phrase": "rich_semantics"}, {"score": 0.004539005582217309, "phrase": "flexible_usage_-_e.g._design_ideation"}, {"score": 0.004423284899590467, "phrase": "contrastive_words"}, {"score": 0.004374593906165761, "phrase": "computational_usage"}, {"score": 0.004294625285753825, "phrase": "syntactic_tokens"}, {"score": 0.004123781267600542, "phrase": "brittle_failures"}, {"score": 0.003930581102447622, "phrase": "computational_design"}, {"score": 0.0036105923401756126, "phrase": "symbol_learning_process"}, {"score": 0.003126224853287381, "phrase": "grounded_symbol"}, {"score": 0.003069006373093756, "phrase": "relevant_symbols"}, {"score": 0.0029796206196589115, "phrase": "functional_viability"}, {"score": 0.0029467742734417255, "phrase": "stable_patterns"}, {"score": 0.002925077525258983, "phrase": "information-conserving_codes"}, {"score": 0.002860938351029155, "phrase": "cognitive_science"}, {"score": 0.0026966744704447275, "phrase": "design_space"}, {"score": 0.0026570998719084153, "phrase": "superior_designs"}, {"score": 0.002598821419664902, "phrase": "lower-dimensional_manifold"}, {"score": 0.002541817937194794, "phrase": "design_variables"}, {"score": 0.0024405312482831646, "phrase": "initial_semantics"}, {"score": 0.0022918601312169676, "phrase": "human_designers"}, {"score": 0.0022498783454674254, "phrase": "first_steps"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Cognition in design", " Design symbols", " Chunking", " Language learning"], "paper_abstract": "In human designer usage, symbols have a rich semantics, grounded on experience, which permits flexible usage - e.g. design ideation is improved by meanings triggered by contrastive words. In computational usage however, symbols are syntactic tokens whose semantics is mostly left to the implementation, resulting in brittle failures in many knowledge-based systems. Here we ask if one may define symbols in computational design as {label,meaning} pairs, as opposed to merely the label. We consider three questions that must be answered to bootstrap a symbol learning process: (a) which concepts are most relevant in a given domain, (b) how to define the semantics of such symbols, and (c) how to learn labels for these so as to form a grounded symbol. We propose that relevant symbols may be discovered by learning patterns of functional viability. The stable patterns are information-conserving codes, also called chunks in cognitive science, which relate to the process of acquiring expertise in humans. Regions of a design space that contain functionally superior designs can be mapped to a lower-dimensional manifold; the inter-relations of the design variables discovered thus constitute the chunks. Using these as the initial semantics for symbols, we show how the system can acquire labels for them by communicating with human designers. We demonstrate the first steps in this process in our baby designer approach, by learning two early grounded symbols, TIGHT and LOOSE. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Grounded discovery of symbols as concept-language pairs", "paper_id": "WOS:000306209900003"}