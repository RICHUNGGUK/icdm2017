{"auto_keywords": [{"score": 0.042591052876542836, "phrase": "extensible_inverted_files"}, {"score": 0.029736226698251874, "phrase": "retrieval_time"}, {"score": 0.00481495049065317, "phrase": "extensible_inverted_file_construction"}, {"score": 0.004747620102130588, "phrase": "inverted_file"}, {"score": 0.004681226806682058, "phrase": "commonly_used_index"}, {"score": 0.00461575768501871, "phrase": "archival_databases"}, {"score": 0.004362870617347183, "phrase": "information_filtering"}, {"score": 0.00432208488976429, "phrase": "dynamic_environments"}, {"score": 0.00422177384286051, "phrase": "inverted_files"}, {"score": 0.003916098498242888, "phrase": "fast_online_indexing"}, {"score": 0.003861288537079326, "phrase": "effective_storage_allocation_scheme"}, {"score": 0.003771631577951067, "phrase": "arrival_rate"}, {"score": 0.0037363522297378777, "phrase": "preallocate_storage"}, {"score": 0.003615443704375908, "phrase": "storage_allocation_scheme"}, {"score": 0.0032602525602322832, "phrase": "storage_allocation"}, {"score": 0.0032145922365231093, "phrase": "logarithmic_factor"}, {"score": 0.002939853413763817, "phrase": "storage_utilization_rate"}, {"score": 0.0028986672783671147, "phrase": "original_arrival_rate_storage_allocation_scheme"}, {"score": 0.002778529097886437, "phrase": "extensible_inverted_file"}, {"score": 0.002752513434446804, "phrase": "solid_state_disk"}, {"score": 0.0026384167183586015, "phrase": "in-memory_extensible"}, {"score": 0.0023902026696615473, "phrase": "main_index"}, {"score": 0.002291089893848235, "phrase": "novel_situations"}, {"score": 0.0021865657874524454, "phrase": "poisson"}, {"score": 0.0021652891317252994, "phrase": "normal_distribution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Inverted file", " Optimization", " Storage allocation"], "paper_abstract": "An inverted file is a commonly used index for both archival databases and free text where no updates are expected. Applications like information filtering and dynamic environments like the Internet require inverted files to be updated efficiently. Recently, extensible inverted files are proposed which can be used for fast online indexing. The effective storage allocation scheme for such inverted files uses the arrival rate to preallocate storage. In this article, this storage allocation scheme is improved by using information about both the arrival rates and their variability to predict the storage needed, as well as scaling the storage allocation by a logarithmic factor. The resultant, final storage utilization rate can be as high as 97-98% after indexing about 1.6 million documents. This compares favorably with the storage utilization rate of the original arrival rate storage allocation scheme. Our evaluation shows that the retrieval time for extensible inverted file on solid state disk is on average similar to the retrieval time for in-memory extensible inverted file. When file seek time is not an issue, our scalable storage allocation enables extensible inverted files to be used as the main index on disk. Our statistical storage allocation may be applicable to novel situations where the arrival of items follows a binomial, Poisson or normal distribution. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Scalable, statistical storage allocation for extensible inverted file construction", "paper_id": "WOS:000291846400002"}