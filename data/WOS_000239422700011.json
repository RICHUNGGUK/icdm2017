{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "concurrent_programs"}, {"score": 0.0464485993141056, "phrase": "stable_guards"}, {"score": 0.004007083686875716, "phrase": "smooth_derivations"}, {"score": 0.003468287913322255, "phrase": "formal_manner"}, {"score": 0.0031223774204093713, "phrase": "calculational_method"}, {"score": 0.0030414140732789186, "phrase": "feijen"}, {"score": 0.0028108690791085536, "phrase": "unity_style_progress_logic"}, {"score": 0.0023694065215394593, "phrase": "derivation_techniques"}, {"score": 0.0021049977753042253, "phrase": "essential_role"}], "paper_keywords": [""], "paper_abstract": "We present some techniques to obtain smooth derivations of concurrent programs that address both safety and progress in a formal manner. Our techniques form an extension to the calculational method of Feijen and van Casteren using a UNITY style progress logic. We stress the role of stable guards, and we illustrate the derivation techniques on some examples in which progress plays an essential role.", "paper_title": "Progress in deriving concurrent programs: Emphasizing the role of stable guards", "paper_id": "WOS:000239422700011"}