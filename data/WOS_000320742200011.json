{"auto_keywords": [{"score": 0.030041686957073252, "phrase": "ajmlc_compiler"}, {"score": 0.02890432233657509, "phrase": "bytecode_size"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_assertion"}, {"score": 0.0047206102433851975, "phrase": "jml"}, {"score": 0.0046741260449047976, "phrase": "program_transformations"}, {"score": 0.004515004397496303, "phrase": "aspectj_jml_compiler"}, {"score": 0.003911253966141701, "phrase": "source-code_modularity"}, {"score": 0.003421697038352743, "phrase": "jml_specifications"}, {"score": 0.0031609252620168446, "phrase": "generated_code's_bytecode_size"}, {"score": 0.0028768722873689432, "phrase": "new_optimized_version"}, {"score": 0.002454835845644037, "phrase": "code_quality"}, {"score": 0.002394719113232821, "phrase": "empirical_study"}, {"score": 0.0023476849595393872, "phrase": "optimized_and_non-optimized_versions"}, {"score": 0.002223039450439376, "phrase": "significant_improvement"}, {"score": 0.002168586864007222, "phrase": "running_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Aspect-oriented programming", " Program transformation", " JML"], "paper_abstract": "The AspectJ JML compiler (ajmlc) explores aspect-oriented programming (AOP) mechanisms to implement JML specifications, such as pre- and postconditions, and enforce them during runtime. This compiler was created to improve source-code modularity. Some experiments were conducted to evaluate the performance of the code generated through ajmlc. Results demonstrated that the strategy of adopting AOP to implement JML specifications is very promising. However, there is still a need for optimization of the generated code's bytecode size and running time. This paper presents a catalog of transformations which represent the optimizations implemented in the new optimized version of the ajmlc compiler. We employ such transformations to reduce the bytecode size and running time of the code generated through the ajmlc compiler. Aiming at demonstrating the impact of such transformation on the code quality, we conduct an empirical study using four applications in optimized and non-optimized versions generated by ajmlc. We show that our AOP transformations provide a significant improvement, regarding bytecode size and running time. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Optimizing generated aspect-oriented assertion checking code for JML using program transformations: An empirical study", "paper_id": "WOS:000320742200011"}