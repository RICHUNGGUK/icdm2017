{"auto_keywords": [{"score": 0.04962396550254858, "phrase": "top-m_influential_queries"}, {"score": 0.04286314458219275, "phrase": "multiple_top-k_queries"}, {"score": 0.03733093608013174, "phrase": "top-k_queries"}, {"score": 0.00481495049065317, "phrase": "reverse_top-k"}, {"score": 0.004503525064934708, "phrase": "ranking_functions"}, {"score": 0.004376273644295806, "phrase": "interesting_problem"}, {"score": 0.003902085339580381, "phrase": "heavy_workload"}, {"score": 0.00386496062825374, "phrase": "ranking_queries"}, {"score": 0.0036147562669032957, "phrase": "simple_solution"}, {"score": 0.0031921317979928406, "phrase": "similar_queries"}, {"score": 0.003161740194257218, "phrase": "common_results"}, {"score": 0.0029569247903654477, "phrase": "thorough_study"}, {"score": 0.0027129118211250336, "phrase": "block_indexed_nested_loops_paradigm"}, {"score": 0.00263612191603326, "phrase": "view-based_algorithm"}, {"score": 0.0025861368747446324, "phrase": "appropriate_optimization_techniques"}, {"score": 0.0024771000236931836, "phrase": "second_approach"}, {"score": 0.0021049977753042253, "phrase": "complex_queries"}], "paper_keywords": ["All top-k queries", " view-based index"], "paper_abstract": "Given a set of objects P and a set of ranking functions F over P, an interesting problem is to compute the top ranked objects for all functions. Evaluation of multiple top-k queries finds application in systems, where there is a heavy workload of ranking queries (e.g., online search engines and product recommendation systems). The simple solution of evaluating the top-k queries one-by-one does not scale well; instead, the system can make use of the fact that similar queries share common results to accelerate search. This paper is the first, to our knowledge, thorough study of this problem. We propose methods that compute all top-k queries in batch. Our first solution applies the block indexed nested loops paradigm, while our second technique is a view-based algorithm. We propose appropriate optimization techniques for the two approaches and demonstrate experimentally that the second approach is consistently the best. Our approach facilitates evaluation of other complex queries that depend on the computation of multiple top-k queries, such as reverse top-k and top-m influential queries. We show that our batch processing technique for these complex queries outperform the state-of-the-art by orders of magnitude.", "paper_title": "Efficient All Top-k Computation-A Unified Solution for All Top-k, Reverse Top-k and Top-m Influential Queries", "paper_id": "WOS:000316755100005"}