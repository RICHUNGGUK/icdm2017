{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dynamic_shortest-path_algorithms"}, {"score": 0.03212080927079841, "phrase": "heap-reduction_technique"}, {"score": 0.025200277363805975, "phrase": "dijkstra's_algorithm"}, {"score": 0.0043464021636703066, "phrase": "arc_weight"}, {"score": 0.004159763048814389, "phrase": "new_generic_technique"}, {"score": 0.003981106369547929, "phrase": "heap_sizes"}, {"score": 0.0033397385936467204, "phrase": "computational_times"}, {"score": 0.0031961879138783012, "phrase": "computational_testing"}, {"score": 0.0026613618933208467, "phrase": "random_weight_changes"}, {"score": 0.0024915167458844914, "phrase": "unit_weight_changes"}], "paper_keywords": ["shortest-path algorithms", " Dijkstra's algorithm", " dynamic shortest-path algorithms", " heaps", " graphs", " trees"], "paper_abstract": "Dynamic shortest-path algorithms update the shortest paths taking into account a change in an arc weight. This paper describes a new generic technique that allows the reduction of heap sizes used by several dynamic single-destination shortest-path algorithms. For unit weight changes, the updates can be done without heaps. These reductions almost always reduce the computational times for these algorithms. In computational testing, several dynamic shortest-path algorithms with and without the heap-reduction technique are compared. Speedups of up to a factor of 1.8 were observed using the heap-reduction technique on random weight changes and of over a factor of five on unit weight changes. We compare as well with Dijkstra's algorithm, which recomputes the paths from scratch. With respect to Dijkstra's algorithm, speedups of up to five orders of magnitude are observed.", "paper_title": "Speeding up dynamic shortest-path algorithms", "paper_id": "WOS:000255504700003"}