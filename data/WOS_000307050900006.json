{"auto_keywords": [{"score": 0.04953289560992991, "phrase": "variable_coalescing"}, {"score": 0.047667240890459914, "phrase": "multiple_address_registers"}, {"score": 0.00481495049065317, "phrase": "offset_assignment"}, {"score": 0.004494570360108983, "phrase": "dedicated_address_generation_unit"}, {"score": 0.004443276312972159, "phrase": "agu"}, {"score": 0.004342430078306461, "phrase": "address_generation"}, {"score": 0.004243862930012258, "phrase": "instruction_execution"}, {"score": 0.004123781267600542, "phrase": "address_computation"}, {"score": 0.004030157055463817, "phrase": "next_address"}, {"score": 0.003938650032712796, "phrase": "auto-modify_range"}, {"score": 0.0038713805573219297, "phrase": "careful_placement"}, {"score": 0.003592859432554987, "phrase": "arithmetic_instructions"}, {"score": 0.0034911335714333507, "phrase": "compact_and_efficient_code"}, {"score": 0.003431481042678356, "phrase": "simple_offset_assignment"}, {"score": 0.003130077012135034, "phrase": "general_offset_assignment"}, {"score": 0.002806256131739047, "phrase": "entire_duration"}, {"score": 0.0026505530211990147, "phrase": "np"}, {"score": 0.0025014259919355453, "phrase": "effective_heuristics"}, {"score": 0.0023889533502525527, "phrase": "assignment_problems"}, {"score": 0.002166421738415464, "phrase": "significant_improvement"}], "paper_keywords": ["Algorithms", " Languages", " Performance", " Simple offset assignment", " general offset assignment", " variable coalescing", " DSP", " AGU"], "paper_abstract": "Most modern digital signal processors (DSPs) provide multiple address registers and a dedicated address generation unit (AGU) which performs address generation in parallel to instruction execution. There is no address computation overhead if the next address is within the auto-modify range. A careful placement of variables in memory is utilized to decrease the number of address arithmetic instructions and thus to generate compact and efficient code. The simple offset assignment (SOA) problem concerns the layout of variables for machines with one address register and the general offset assignment (GOA) deals with multiple address registers. Both these problems assume that each variable needs to be allocated for the entire duration of a program. Both SOA and GOA are NP-complete. In this article, we present effective heuristics for the simple and the general offset assignment problems with variable coalescing where two or more non-interfering variables can be mapped into the same memory location. Results on several benchmarks show the significant improvement of our proposed heuristics compared to other heuristics in the literature.", "paper_title": "Storage Optimization through Offset Assignment with Variable Coalescing", "paper_id": "WOS:000307050900006"}