{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cache_coherence"}, {"score": 0.004466519142879166, "phrase": "gpu_architectures._gpus"}, {"score": 0.0038431888954930083, "phrase": "attractive_target"}, {"score": 0.0021049977753042253, "phrase": "java._temporal"}], "paper_keywords": [""], "paper_abstract": "GPUS HAVE BECOME AN ATTRACTIVE TARGET FOR ACCELERATING PARALLEL APPLICATIONS AND DELIVERING SIGNIFICANT SPEEDUPS AND ENERGY-EFFICIENCY GAINS OVER MULTICORE CPUS. PROGRAMMING GPUS, HOWEVER, REMAINS CHALLENGING BECAUSE EXISTING GPUS LACK THE WELL-DEFINED MEMORY MODEL REQUIRED TO SUPPORT HIGH-LEVEL LANGUAGES SUCH AS C++ AND JAVA. TEMPORAL COHERENCE, A SIMPLE AND INTUITIVE TIMER-BASED COHERENCE FRAMEWORK OPTIMIZED FOR GPU, TACKLES THIS CHALLENGE.", "paper_title": "CACHE COHERENCE FOR GPU ARCHITECTURES", "paper_id": "WOS:000337895100008"}