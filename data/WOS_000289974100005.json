{"auto_keywords": [{"score": 0.029476225378015083, "phrase": "geometric_objects"}, {"score": 0.02690634363146366, "phrase": "special_cases"}, {"score": 0.00481495049065317, "phrase": "dynamic_connectivity"}, {"score": 0.0047590526875526335, "phrase": "networks_and_geometry._dynamic_connectivity"}, {"score": 0.0047175535881504626, "phrase": "well-studied_problem"}, {"score": 0.00455512808829153, "phrase": "edge-update_model"}, {"score": 0.004436973156638976, "phrase": "undirected_graph"}, {"score": 0.004385444037750123, "phrase": "edge_insertions"}, {"score": 0.0036481919610079753, "phrase": "node_faults"}, {"score": 0.00356387956365613, "phrase": "data_structure"}, {"score": 0.0035431066088977025, "phrase": "vertex_updates"}, {"score": 0.0032456080226031417, "phrase": "previous_result"}, {"score": 0.003180454888446778, "phrase": "proceedings"}, {"score": 0.002990455094600558, "phrase": "fast_matrix_multiplication"}, {"score": 0.0029556753467726983, "phrase": "update_time"}, {"score": 0.00289577845874603, "phrase": "new_data_structure"}, {"score": 0.002853737430672232, "phrase": "geometric_connectivity"}, {"score": 0.0028040908178009263, "phrase": "dynamic_set"}, {"score": 0.0027633772255013164, "phrase": "query_connectivity"}, {"score": 0.0026915726427162705, "phrase": "intersection_graph"}, {"score": 0.0026063337716985906, "phrase": "bounded_transmission_radius"}, {"score": 0.0025684840886757055, "phrase": "nontrivial_fully_dynamic_results"}, {"score": 0.0025164138447059023, "phrase": "axis-parallel_line_segments"}, {"score": 0.0024726211151935365, "phrase": "similarly_improved_update_times"}, {"score": 0.0023184530549771815, "phrase": "sublinear_update_bounds"}, {"score": 0.0023049225851832084, "phrase": "virtually_all_families"}, {"score": 0.0022714400852767045, "phrase": "sublinear_time_range_queries"}, {"score": 0.0022188745774815847, "phrase": "first_sublinear_update_time"}, {"score": 0.002205923961799702, "phrase": "arbitrary_two-dimensional_line_segments"}, {"score": 0.00216118788395907, "phrase": "d-dimensional_simplices"}, {"score": 0.0021049977753042253, "phrase": "d-dimensional_balls"}], "paper_keywords": ["data structures", " dynamic graph algorithms", " connectivity", " computational geometry"], "paper_abstract": "Dynamic connectivity is a well-studied problem, but so far the most compelling progress has been confined to the edge-update model: maintain an understanding of connectivity in an undirected graph, subject to edge insertions and deletions. In this paper, we study two more challenging, yet equally fundamental, problems. Subgraph connectivity asks us to maintain an understanding of connectivity under vertex updates: updates can turn vertices on and off, and queries refer to the subgraph induced by on vertices. (For instance, this is closer to applications in networks of routers, where node faults may occur.) We describe a data structure supporting vertex updates in (O) over tilde (m(2/3)) amortized time, where m denotes the number of edges in the graph. This greatly improves upon the previous result [T. M. Chan, in Proceedings of the 34th Annual ACM Symposium on Theory of Computing (STOC), 2002, pp. 7-13], which required fast matrix multiplication and had an update time of O(m(0.94)). The new data structure is also simpler. Geometric connectivity asks us to maintain a dynamic set of n geometric objects and query connectivity in their intersection graph. (For instance, the intersection graph of balls describes connectivity in a network of sensors with bounded transmission radius.) Previously, nontrivial fully dynamic results were known only for special cases like axis-parallel line segments and rectangles. We provide similarly improved update times, (O) over tilde (n(2/3)), for these special cases. Moreover, we show how to obtain sublinear update bounds for virtually all families of geometric objects which allow sublinear time range queries. In particular, we obtain the first sublinear update time for arbitrary two-dimensional line segments: O*(n(9/10)); for d-dimensional simplices: O*(n(1-1/d(2d+1))); and for d-dimensional balls: O*(n(1-1/(d+1)(2d+3))).", "paper_title": "DYNAMIC CONNECTIVITY: CONNECTING TO NETWORKS AND GEOMETRY", "paper_id": "WOS:000289974100005"}