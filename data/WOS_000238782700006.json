{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "polynomial_time_algorithm"}, {"score": 0.00475413908468027, "phrase": "prime_factorization"}, {"score": 0.004694092086199672, "phrase": "quantum_computers"}, {"score": 0.004294381488413906, "phrase": "order_r"}, {"score": 0.004213240903095234, "phrase": "element_x"}, {"score": 0.004133627071344356, "phrase": "multiplicative_group"}, {"score": 0.0031242709509664837, "phrase": "trivial_factor"}, {"score": 0.002912963877144772, "phrase": "particular_case"}, {"score": 0.002785978280998868, "phrase": "rsa_modulus"}, {"score": 0.0026307897899760383, "phrase": "new_quantum_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Shor's quantum algorithm", " RSA modulus", " repunit"], "paper_abstract": "Shor proposed a polynomial time algorithm for prime factorization on quantum computers. For a given number N, he gave an algorithm for finding the order r of an element x in the multiplicative group (mod N). The method succeeds because factorization can be reduced to finding the order of an element using randomization. But the algorithm has two shortcomings, the order of the number must be even and the output might be a trivial factor. Actually, these drawbacks can be overcome in a particular case, i.e., N is an RSA modulus. In this paper, we propose a new quantum algorithm for factoring RSA modulus without the two drawbacks. Moreover, we show that the cost of the algorithm mainly depends on the calculation of ord(N) (2). (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "On computing ord(N)(2) and its application", "paper_id": "WOS:000238782700006"}