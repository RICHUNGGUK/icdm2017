{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "rapid_development"}, {"score": 0.004746263721902201, "phrase": "scalable_scientific_software"}, {"score": 0.004645057834614705, "phrase": "process_oriented_approach"}, {"score": 0.004578783486828809, "phrase": "scientific_applications"}, {"score": 0.004322967486451877, "phrase": "cluster_computing"}, {"score": 0.004261268957001927, "phrase": "grid_computing"}, {"score": 0.004023333616395949, "phrase": "python"}, {"score": 0.0038810583785936505, "phrase": "scientific_software"}, {"score": 0.0038256426589560774, "phrase": "communicating_sequential_processes"}, {"score": 0.00326572165784246, "phrase": "visual_representation"}, {"score": 0.0032190636347671675, "phrase": "better_understanding"}, {"score": 0.003150319576043518, "phrase": "process_workflow"}, {"score": 0.0028689475587958917, "phrase": "parallel_application"}, {"score": 0.002727967804120323, "phrase": "standard_multi-threading_mechanisms"}, {"score": 0.0024842242921857705, "phrase": "pycsp_library"}, {"score": 0.00232832698253493, "phrase": "stochastic_minimum_search"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Communicating Sequential Processes", " Many-core", " Grid computing", " Python"], "paper_abstract": "Scientific applications are often not written with multiprocessing, cluster computing or grid computing in mind. This paper suggests using Python and PyCSP to structure scientific software through Communicating Sequential Processes. Three scientific applications are used to demonstrate the features of PyCSP and how networks of processes may easily be mapped into a visual representation for better understanding of the process workflow. We show that for many sequential solutions, the difficulty in implementing a parallel application is removed. The use of standard multi-threading mechanisms such as locks, conditions and monitors is completely hidden in the PyCSP library. We show the three scientific applications: kNN, stochastic minimum search and McStas to scale well on multi-processing, cluster computing and grid computing platforms using PyCSP. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Rapid development of scalable scientific software using a process oriented approach", "paper_id": "WOS:000208808300015"}