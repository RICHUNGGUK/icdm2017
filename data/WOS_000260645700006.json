{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "sparse_matrix"}, {"score": 0.0047370749839861165, "phrase": "find_algorithm"}, {"score": 0.004437910956996051, "phrase": "nested_dissection"}, {"score": 0.004272164161788242, "phrase": "non-equilibrium_green's_functions"}, {"score": 0.004226041393896957, "phrase": "negf"}, {"score": 0.004157561334726201, "phrase": "nanoscale_transistors"}, {"score": 0.0034366728236876016, "phrase": "tree_structure"}, {"score": 0.0033810134162565843, "phrase": "upward_and_downward_traversal"}, {"score": 0.003290237137651949, "phrase": "significant_performance_improvements"}, {"score": 0.003201890266327127, "phrase": "memory_requirements"}, {"score": 0.003115908199991072, "phrase": "current_state-of-the-art_recursive_methods"}, {"score": 0.0030821642889841344, "phrase": "negf."}, {"score": 0.00230932021677234, "phrase": "green's_function"}, {"score": 0.002284290601837099, "phrase": "partial_differential_equations"}, {"score": 0.002259532329422255, "phrase": "find"}, {"score": 0.0021987994275190314, "phrase": "complex_boundary_conditions"}, {"score": 0.0021049977753042253, "phrase": "boundary_conditions"}], "paper_keywords": ["Nested dissection", " Green's function", " NEGF", " Nanotransistor", " Gaussian elimination", " Sparse matrix"], "paper_abstract": "An accurate and efficient algorithm, called fast inverse using nested dissection (FIND). for computing non-equilibrium Green's functions (NEGF) for nanoscale transistors has been developed and applied in the simulation of a novel dual-gate metal-oxide-semi conductor field-effect transistor (MOSFET) device structure. The method is based on the algorithm of nested dissection. A graph of the matrix is constructed and decomposed using a tree structure. An upward and downward traversal of the tree yields significant performance improvements for both the speed and memory requirements, compared to the current state-of-the-art recursive methods for NEGF. This algorithm is quite general and can be applied to any problem where certain entries of the inverse of a sparse matrix (e.g., its diagonal entries, the first row or column, etc.) need to be computed, As such it is applicable to the calculation of the Green's function of partial differential equations. FIND is applicable even when complex boundary conditions are used, for example non reflecting boundary conditions. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Computing entries of the inverse of a sparse matrix using the FIND algorithm", "paper_id": "WOS:000260645700006"}