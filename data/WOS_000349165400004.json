{"auto_keywords": [{"score": 0.02986605331378605, "phrase": "record_types"}, {"score": 0.00894101552048179, "phrase": "foreign_scalar_data_types"}, {"score": 0.00481495049065317, "phrase": "scheme_record_types"}, {"score": 0.004418456827500267, "phrase": "scheme_programming_language"}, {"score": 0.004331675965350876, "phrase": "new_record_types"}, {"score": 0.0036472537997966938, "phrase": "memory_layout"}, {"score": 0.0035755653799043, "phrase": "data_types"}, {"score": 0.0035052810710060893, "phrase": "procedural_record_types"}, {"score": 0.0034621652234129163, "phrase": "scheme"}, {"score": 0.0032807941194429235, "phrase": "run_time"}, {"score": 0.0031950646670695546, "phrase": "efficient_run-time_representation"}, {"score": 0.003050376875258722, "phrase": "good_run-time_performance"}, {"score": 0.0028549396580672417, "phrase": "extended_model"}, {"score": 0.002602127996667857, "phrase": "base_record_type"}, {"score": 0.0023249757987087055, "phrase": "garbage_collector"}, {"score": 0.002234358539133758, "phrase": "extended_record_type_systems"}, {"score": 0.002175913488493802, "phrase": "object-oriented_programming_model"}, {"score": 0.0021049977753042253, "phrase": "foreign_structured_data_types"}], "paper_keywords": [""], "paper_abstract": "The Revised(6) Report on the Algorithmic Language Scheme added a mechanism to the Scheme programming language for creating new record types procedurally. While many programming languages support user defined, structured data types, these are usually handled syntactically, so that the compiler can make choices at compile time about the memory layout of these data types. The procedural record types in Scheme, however, can be constructed at run time, making the efficient run-time representation of record types important to ensure good run-time performance. The runtime representation used in our implementation provides an extended model for record types allowing record types to represent foreign scalar data types, e.g., machine word integers, and allows the base record type to be extended to create non-R6RS record-type systems. This article describes our runtime representation for record types, how the garbage collector handles foreign scalar data types, and includes extended record type systems both for an object-oriented programming model and a representation of foreign structured data types.", "paper_title": "A run-time representation of scheme record types", "paper_id": "WOS:000349165400004"}