{"auto_keywords": [{"score": 0.03985590039430087, "phrase": "efficient_sparql_solution"}, {"score": 0.00481495049065317, "phrase": "efficient_rdf_management"}, {"score": 0.004288648163837944, "phrase": "atomic_triple_units"}, {"score": 0.0040866404150657005, "phrase": "specific_compression_methods"}, {"score": 0.004008516312861836, "phrase": "increasingly_larger_and_various_scalability_issues"}, {"score": 0.003819652968070514, "phrase": "rdf_stores"}, {"score": 0.0037586895199831095, "phrase": "compressed_rdf_datasets"}, {"score": 0.0036513878928387047, "phrase": "novel_rdf_indexing_technique"}, {"score": 0.0035931003474699583, "phrase": "compressed_space"}, {"score": 0.003412738820791168, "phrase": "disjoint_subsets"}, {"score": 0.003220596121589591, "phrase": "binary_matrices"}, {"score": 0.003199923972285777, "phrase": "subjects_objects"}, {"score": 0.0031286075376993103, "phrase": "corresponding_triple_exists"}, {"score": 0.002840484388249037, "phrase": "different_subject"}, {"score": 0.0027327860743648165, "phrase": "specific_weaknesses"}, {"score": 0.0027152365187093244, "phrase": "vertically_partitioned_representations"}, {"score": 0.0026891227034884536, "phrase": "resulting_technique"}, {"score": 0.002578826749477773, "phrase": "best_overall_performance"}, {"score": 0.002562263358004784, "phrase": "rdf_retrieval"}, {"score": 0.002311230481682913, "phrase": "traditional_join_algorithms"}, {"score": 0.0021880094145128957, "phrase": "traditional_vertical_partitioning"}, {"score": 0.0021739507091654755, "phrase": "join_solution"}, {"score": 0.00214610313234565, "phrase": "best_numbers"}, {"score": 0.0021049977753042253, "phrase": "non-joined_nodes"}], "paper_keywords": ["RDF", " Compressed index", " Vertical partitioning", " Memory-based SPARQL solution", " k(2)-tree"], "paper_abstract": "The Web of Data has been gaining momentum in recent years. This leads to increasingly publish more and more semi-structured datasets following, in many cases, the RDF (Resource Description Framework) data model based on atomic triple units of subject, predicate, and object. Although it is a very simple model, specific compression methods become necessary because datasets are increasingly larger and various scalability issues arise around their organization and storage. This requirement is even more restrictive in RDF stores because efficient SPARQL solution on the compressed RDF datasets is also required. This article introduces a novel RDF indexing technique that supports efficient SPARQL solution in compressed space. Our technique, called -triples, uses the predicate to vertically partition the dataset into disjoint subsets of pairs (subject, object), one per predicate. These subsets are represented as binary matrices of subjects objects in which 1-bits mean that the corresponding triple exists in the dataset. This model results in very sparse matrices, which are efficiently compressed using -trees. We enhance this model with two compact indexes listing the predicates related to each different subject and object in the dataset, in order to address the specific weaknesses of vertically partitioned representations. The resulting technique not only achieves by far the most compressed representations, but also achieves the best overall performance for RDF retrieval in our experimental setup. Our approach uses up to 10 times less space than a state-of-the-art baseline and outperforms its time performance by several orders of magnitude on the most basic query patterns. In addition, we optimize traditional join algorithms on -triples and define a novel one leveraging its specific features. Our experimental results show that our technique also overcomes traditional vertical partitioning for join solution, reporting the best numbers for joins in which the non-joined nodes are provided, and being competitive in most of the cases.", "paper_title": "Compressed vertical partitioning for efficient RDF management", "paper_id": "WOS:000357678800008"}