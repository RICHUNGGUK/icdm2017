{"auto_keywords": [{"score": 0.038951225571399926, "phrase": "point_primitives"}, {"score": 0.0275479686701374, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "streaming_compression_scheme"}, {"score": 0.004758053266234474, "phrase": "gigantic_point_sets"}, {"score": 0.004701825207431857, "phrase": "per-point_normals"}, {"score": 0.003980687255880282, "phrase": "high-resolution_iso-surfaces"}, {"score": 0.0037507793596022326, "phrase": "deferred_shading"}, {"score": 0.003619235073669304, "phrase": "rendering_quality"}, {"score": 0.003576416581189713, "phrase": "iso-surface_reconstruction"}, {"score": 0.0034715658596258018, "phrase": "hexagonal_close_packing"}, {"score": 0.003290494847464381, "phrase": "initial_data"}, {"score": 0.0031003255054939524, "phrase": "initial_domain"}, {"score": 0.003063627258654102, "phrase": "volumetric_gradients"}, {"score": 0.003009390313137981, "phrase": "incremental_encoding"}, {"score": 0.002768674345336861, "phrase": "high_fidelity"}, {"score": 0.002719644855867468, "phrase": "compressed_data_stream"}, {"score": 0.0026241684260044414, "phrase": "graphics_processing_unit"}, {"score": 0.0025471636425006155, "phrase": "decoded_point_positions"}, {"score": 0.00248718591918233, "phrase": "graphics_memory"}, {"score": 0.002234252028553481, "phrase": "high_quality_gigantic_data_sets"}, {"score": 0.00213023743193503, "phrase": "local_gpu_memory"}, {"score": 0.0021049977753042253, "phrase": "interactive_frame_rates"}], "paper_keywords": ["data compression", " GPU programming", " huge point clouds", " deferred shading"], "paper_abstract": "In this paper we present a streaming compression scheme for gigantic point sets including per-point normals. This scheme extends on our previous Duodecim approach [21] in two different ways. First, we show how to use this approach for the compression and rendering of high-resolution iso-surfaces in volumetric data sets. Second, we use deferred shading of point primitives to considerably improve rendering quality. Iso-surface reconstruction is performed in a hexagonal close packing (HCP) grid, into which the initial data set is resampled. Normals are resampled from the initial domain using volumetric gradients. By incremental encoding, only slightly more than 3 bits per surface point and 5 bits per surface normal are required at high fidelity. The compressed data stream can be decoded in the graphics processing unit (GPU). Decoded point positions are saved in graphics memory, and they are then used on the GPU again to render point primitives. In this way high quality gigantic data sets can directly be rendered from their compressed representation in local GPU memory at interactive frame rates (see Fig. 1).", "paper_title": "Compression and rendering of iso-surfaces and point sampled geometry", "paper_id": "WOS:000240833100001"}