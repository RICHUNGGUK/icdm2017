{"auto_keywords": [{"score": 0.044340662163821175, "phrase": "individual_processors"}, {"score": 0.0341618002047969, "phrase": "page_replacements"}, {"score": 0.0247996836750712, "phrase": "memory_resources"}, {"score": 0.00481495049065317, "phrase": "memory_resource_considerations"}, {"score": 0.004739056045644449, "phrase": "workload_distribution"}, {"score": 0.00468912237497774, "phrase": "software_dsm_systems"}, {"score": 0.004639712384096822, "phrase": "conventional_workload_distribution_schemes"}, {"score": 0.004566567411073082, "phrase": "distributed_shared_memory"}, {"score": 0.0044237033788643715, "phrase": "program_threads"}, {"score": 0.0043080553835735825, "phrase": "cpu_power"}, {"score": 0.004173244935967375, "phrase": "data-sharing_characteristics"}, {"score": 0.003916098498242888, "phrase": "program_execution_time"}, {"score": 0.0038339398365449507, "phrase": "computation_and_communication_costs"}, {"score": 0.0037935066882208235, "phrase": "memory_access_costs"}, {"score": 0.0037139103792217143, "phrase": "major_influence"}, {"score": 0.0036553070575015344, "phrase": "overall_program_performance"}, {"score": 0.0035408501923902477, "phrase": "insufficient_physical_memory_space"}, {"score": 0.0029409171055888804, "phrase": "thread_execution"}, {"score": 0.0027015344365793016, "phrase": "current_study"}, {"score": 0.002658863179011018, "phrase": "novel_workload_distribution_scheme"}, {"score": 0.0026308191587613005, "phrase": "dsm"}, {"score": 0.0024037949232582462, "phrase": "present_results"}, {"score": 0.002279508335630797, "phrase": "appropriate_workload_distribution"}, {"score": 0.002255431275670053, "phrase": "dsm_systems"}, {"score": 0.002196342933346204, "phrase": "proposed_scheme"}], "paper_keywords": ["workload distribution", " distributed shared memory (DSM)", " memory resource", " page replacement", " data-sharing characteristic"], "paper_abstract": "Conventional workload distribution schemes for software distributed shared memory (DSM) systems simply distribute the program threads in accordance with the CPU power of the individual processors or the data-sharing characteristics of the application. Although these schemes aim to minimize the program execution time by reducing the computation and communication costs, memory access costs also have a major influence on the overall program performance. If a processor has insufficient physical memory space to cache all of the data required by its local working threads, it must perform a series of page replacements if it is to complete its thread executions. Although these page replacements enable the threads to complete their tasks, thread execution is inevitably delayed by the latency of the page swapping operations. Consequently, the current study proposes a novel workload distribution scheme for DSM systems which considers not only the CPU power and data-sharing characteristics, but also the physical memory capabilities of the individual processors. The present results confirm the importance of considering memory resources when establishing an appropriate workload distribution for DSM systems and indicate that the proposed scheme is more effective than schemes which consider only CPU resources or memory resources, respectively.", "paper_title": "Incorporating memory resource considerations into the workload distribution of software DSM systems", "paper_id": "WOS:000243764700014"}