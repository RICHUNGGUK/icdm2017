{"auto_keywords": [{"score": 0.04962913836247384, "phrase": "pairwise_reachability_problem"}, {"score": 0.015356921034374593, "phrase": "multi-threaded_program"}, {"score": 0.00481495049065317, "phrase": "reachability_under_contextual_locking."}, {"score": 0.004614643339546038, "phrase": "control_locations"}, {"score": 0.004159241394996858, "phrase": "static_analysis"}, {"score": 0.003525220627709056, "phrase": "finite_set"}, {"score": 0.003459191419478298, "phrase": "popular_programming_paradigms"}, {"score": 0.0033943947596098583, "phrase": "lock_usage_patterns"}, {"score": 0.0031174595932694036, "phrase": "new_natural_programming_paradigm"}, {"score": 0.002987557906013826, "phrase": "lock_usage"}, {"score": 0.002580061425699194, "phrase": "procedure_call"}, {"score": 0.002519739850807611, "phrase": "procedure_returns"}, {"score": 0.002426137929553722, "phrase": "polynomial-time_decidable"}, {"score": 0.002391938519840648, "phrase": "new_programming_paradigm"}, {"score": 0.0022175019341824603, "phrase": "recursive_locking_mechanism"}, {"score": 0.0021049977753042253, "phrase": "reentrant_lock"}], "paper_keywords": ["Staticanalysis", " Pushdown reachability", " Locks", " Reentrantlocks"], "paper_abstract": "The pairwise reachability problem for a multi-threaded program asks, given control locations in two threads, whether they can be simultaneously reached in an execution of the program. The problem is important for static analysis and is used to detect statements that are concurrently enabled. This problem is in general undecidable even when data is abstracted and when the threads (with recursion) synchronize only using a finite set of locks. Popular programming paradigms that limit the lock usage patterns have been identified under which the pairwise reachability problem becomes decidable. In this paper, we consider a new natural programming paradigm, called contextual locking, which ties the lock usage to calling patterns in each thread: we assume that locks are released in the same context that they were acquired and that every lock acquired by a thread in a procedure call is released before the procedure returns. Our main result is that the pairwise reachability problem is polynomial-time decidable for this new programming paradigm as well. The problem becomes undecidable if the locks are reentrant;reentrant locking is a recursive locking mechanism which allows a thread in a multi-threaded program to acquire the reentrant lock multiple times.", "paper_title": "REACHABILITY UNDER CONTEXTUAL LOCKING", "paper_id": "WOS:000327472100019"}