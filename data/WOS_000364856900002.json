{"auto_keywords": [{"score": 0.03952148495928651, "phrase": "periodic_continuous_queries"}, {"score": 0.0360693023549226, "phrase": "rm-uo_algorithm"}, {"score": 0.00481495049065317, "phrase": "novel_scheduling"}, {"score": 0.004736434518535051, "phrase": "periodic_queries"}, {"score": 0.004697655699119423, "phrase": "broadcast_environments"}, {"score": 0.004621043537046209, "phrase": "proven_efficient_approach"}, {"score": 0.0045084510240032535, "phrase": "common_data_needs"}, {"score": 0.004471530397729526, "phrase": "data_broadcast"}, {"score": 0.00430907756010007, "phrase": "dynamic_and_large-scale_data_dissemination"}, {"score": 0.004204054047427536, "phrase": "emerging_data_broadcast_applications"}, {"score": 0.004152502093643003, "phrase": "multiple_data_items"}, {"score": 0.00405127920820053, "phrase": "data-driven_decision_making"}, {"score": 0.0039362878637371574, "phrase": "important_problem"}, {"score": 0.003625347557965931, "phrase": "bandwidth_utilization"}, {"score": 0.003230723298995081, "phrase": "sr_algorithm"}, {"score": 0.0031132086055691214, "phrase": "original_queries"}, {"score": 0.002999955539996569, "phrase": "considerable_waste"}, {"score": 0.0029753513692467315, "phrase": "available_bandwidth"}, {"score": 0.002762774046280398, "phrase": "bandwidth_consumption"}, {"score": 0.0026953359825383624, "phrase": "multiple_query_merging"}, {"score": 0.0026732282286675954, "phrase": "mqm"}, {"score": 0.0026403934420630155, "phrase": "redundant_query_merging"}, {"score": 0.0025130460190930554, "phrase": "notable_bandwidth_savings"}, {"score": 0.0023819914954155905, "phrase": "unified_scheduling_algorithm"}, {"score": 0.0022484715639779153, "phrase": "rm-uo"}, {"score": 0.0021224200236681498, "phrase": "wireless_bandwidth_consumption"}, {"score": 0.0021049977753042253, "phrase": "query_service_ratio"}], "paper_keywords": ["On-demand data broadcast", " periodic continuous queries", " query merging", " real-time scheduling"], "paper_abstract": "Being a proven efficient approach to answering queries that have common data needs, data broadcast has received much attention in the past decade, especially for dynamic and large-scale data dissemination. An important class of emerging data broadcast applications must monitor multiple data items continuously in order to enable data-driven decision making. For such applications, an important problem that must be addressed is how to disseminate data to periodic continuous queries so that all the requests can be satisfied while the bandwidth utilization is minimized. To our best knowledge, the only known work on this topic is the RM-UO algorithm proposed in [27]. However, the RM-UO algorithm simply utilizes the Sr algorithm introduced in [13] to transform the original queries into 2-harmonic tasks, which would lead to a considerable waste of available bandwidth. In this paper, based on the observation that some queries can be merged to save bandwidth consumption, we propose two merging polices namely Multiple Query Merging (MQM) and Redundant Query Merging (RQM), and show that both can lead to notable bandwidth savings. Further, to disseminate data to periodic continuous queries, we implement a unified scheduling algorithm called UM, which combines both MQM and RQM. Extensive experiments have been conducted to compare our UM algorithm with RM-UO, and the results show that UM outperforms RM-UO considerably in terms of wireless bandwidth consumption and query service ratio.", "paper_title": "A Novel Scheduling Algorithm for Supporting Periodic Queries in Broadcast Environments", "paper_id": "WOS:000364856900002"}