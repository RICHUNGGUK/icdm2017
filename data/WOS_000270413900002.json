{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "spatial_skyline_queries"}, {"score": 0.04596150486972312, "phrase": "query_points"}, {"score": 0.031739857749506044, "phrase": "euclidean_distance"}, {"score": 0.02636302444477522, "phrase": "spatial_skyline"}, {"score": 0.023014633295135825, "phrase": "network_space"}, {"score": 0.004775854771026668, "phrase": "vector_spaces"}, {"score": 0.004462105963334103, "phrase": "data_points_p"}, {"score": 0.00435425242455915, "phrase": "data_point"}, {"score": 0.004295459433506106, "phrase": "derived_spatial_attributes"}, {"score": 0.004225950334493496, "phrase": "point's_distance"}, {"score": 0.004191616947529712, "phrase": "query_point"}, {"score": 0.004157562570540949, "phrase": "ssq"}, {"score": 0.003948184070897268, "phrase": "main_difference"}, {"score": 0.003916098498242888, "phrase": "regular_skyline_query"}, {"score": 0.0038737214010638745, "phrase": "spatial_domination"}, {"score": 0.0037903327482565097, "phrase": "q._ssq"}, {"score": 0.0037188360359702182, "phrase": "emergency_response"}, {"score": 0.003698656310338989, "phrase": "online_maps"}, {"score": 0.003668591097652231, "phrase": "main_intuition"}, {"score": 0.0035701213515857227, "phrase": "geometric_properties"}, {"score": 0.0035410972455664864, "phrase": "ssq_problem_space"}, {"score": 0.003502763862212204, "phrase": "exhaustive_examination"}, {"score": 0.003371824588148973, "phrase": "ssq_search"}, {"score": 0.003175850236547856, "phrase": "vertical_bar_s_vertical_bar"}, {"score": 0.003158607603419362, "phrase": "vertical_bar_c_vertical_bar"}, {"score": 0.0030570940593359413, "phrase": "convex_hull"}, {"score": 0.0028950820242352156, "phrase": "static_query_points"}, {"score": 0.002646267286675984, "phrase": "unnecessary_recomputation"}, {"score": 0.002445284486457686, "phrase": "network_distance"}, {"score": 0.0024253827365474734, "phrase": "spatial_network_database"}, {"score": 0.002341059621610796, "phrase": "voronoi"}, {"score": 0.0022967713922705, "phrase": "best_competitor_approach"}, {"score": 0.0022656961774446586, "phrase": "processing_time"}, {"score": 0.002186849855560281, "phrase": "good_approximation"}, {"score": 0.0021396960731214203, "phrase": "accurate_computation"}, {"score": 0.002128067018576581, "phrase": "spatial_skylines"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Spatial skyline", " spatial databases", " Voronoi diagrams"], "paper_abstract": "In this article, we first introduce the concept of Spatial Skyline Queries (SSQ). Given a set of data points P and a set of query points Q, each data point has a number of derived spatial attributes each of which is the point's distance to a query point. An SSQ retrieves those points of P which are not dominated by any other point in P considering their derived spatial attributes. The main difference with the regular skyline query is that this spatial domination depends on the location of the query points Q. SSQ has application in several domains such as emergency response and online maps. The main intuition and novelty behind our approaches is that we exploit the geometric properties of the SSQ problem space to avoid the exhaustive examination of all the point pairs in P and Q. Consequently, we reduce the complexity of SSQ search from O(vertical bar P vertical bar(2)vertical bar Q vertical bar) to O(vertical bar S vertical bar(2)vertical bar C vertical bar+root vertical bar P vertical bar), where vertical bar S vertical bar and vertical bar C vertical bar are the solution size and the number of vertices of the convex hull of Q, respectively. Considering Euclidean distance, we propose two algorithms, B(2)S(2) and VS(2), for static query points and one algorithm, VCS(2), for streaming Q whose points change location over time (e.g., are mobile). VCS(2) exploits the pattern of change in Q to avoid unnecessary recomputation of the skyline and hence efficiently perform updates. We also propose two algorithms, SNS(2) and VSNS(2), that compute the spatial skyline with respect to the network distance in a spatial network database. Our extensive experiments using real-world datasets verify that both R-tree-based B(2)S(2) and Voronoi-based VS(2) outperform the best competitor approach in terms of both processing time and I/O cost. Furthermore, their output computed based on Euclidean distance is a good approximation of the spatial skyline in network space. For accurate computation of spatial skylines in network space, our experiments showed the superiority of VSNS(2) over SNS(2).", "paper_title": "Processing Spatial Skyline Queries in Both Vector Spaces and Spatial Network Databases", "paper_id": "WOS:000270413900002"}