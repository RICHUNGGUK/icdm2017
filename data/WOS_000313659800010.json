{"auto_keywords": [{"score": 0.049829183702305026, "phrase": "collaborative_caching"}, {"score": 0.013740135397595558, "phrase": "optimal_caching"}, {"score": 0.013319427291350562, "phrase": "cache_size"}, {"score": 0.007438869060648044, "phrase": "cache_sizes"}, {"score": 0.00481495049065317, "phrase": "generalized_theory_of"}, {"score": 0.004545793387330536, "phrase": "cache_management"}, {"score": 0.004451676867747938, "phrase": "previous_theories"}, {"score": 0.004291617358806677, "phrase": "inclusion_property"}, {"score": 0.004137288854115515, "phrase": "access_sequence"}, {"score": 0.0038049789989278463, "phrase": "cache_hint"}, {"score": 0.0036680857629458785, "phrase": "binary_choice"}, {"score": 0.003629890385640276, "phrase": "lru"}, {"score": 0.0035920758080335655, "phrase": "mru."}, {"score": 0.003444732262403694, "phrase": "hint_interface"}, {"score": 0.0031348622158167195, "phrase": "hierarchical_relation"}, {"score": 0.003102195256794215, "phrase": "collaborative_caching_subsumes"}, {"score": 0.0029284999172756103, "phrase": "priority_hint"}, {"score": 0.0028828348726682965, "phrase": "previous_binary_hint"}, {"score": 0.0027790254309734428, "phrase": "general_hint"}, {"score": 0.002693018258362651, "phrase": "new_cache_replacement_policy"}, {"score": 0.0025824576209656676, "phrase": "complete_range"}, {"score": 0.002528887105463588, "phrase": "mru"}, {"score": 0.002502519068890319, "phrase": "lru."}, {"score": 0.002450602177683068, "phrase": "new_type"}, {"score": 0.002412371116984224, "phrase": "property-non-uniform_inclusion"}, {"score": 0.0023499703712897293, "phrase": "one-pass_algorithm"}, {"score": 0.002301211274459965, "phrase": "miss_rate"}, {"score": 0.002183684303511462, "phrase": "priority_hints"}], "paper_keywords": ["Algorithms", " Performance", " Theory", " collaborative caching", " cache replacement policy", " priority cache hint", " priority LRU", " optimal size-oblivious hint"], "paper_abstract": "Collaborative caching allows software to use hints to influence cache management in hardware. Previous theories have shown that such hints observe the inclusion property and can obtain optimal caching if the access sequence and the cache size are known ahead of time. Previously, the interface of a cache hint is limited, e.g., a binary choice between LRU and MRU. In this paper, we generalize the hint interface, where a hint is a number encoding a priority. We show the generality in a hierarchical relation where collaborative caching subsumes non-collaborative caching, and within collaborative caching, the priority hint subsumes the previous binary hint. We show two theoretical results for the general hint. The first is a new cache replacement policy, priority LRU, which permits the complete range of choices between MRU and LRU. We prove a new type of inclusion property-non-uniform inclusion-and give a one-pass algorithm to compute the miss rate for all cache sizes. Second, we show that priority hints can enable the use of the same hints to obtain optimal caching for all cache sizes, without having to know the cache size beforehand.", "paper_title": "A Generalized Theory of Collaborative Caching", "paper_id": "WOS:000313659800010"}