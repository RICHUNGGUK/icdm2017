{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "verification_effort"}, {"score": 0.004778258911940497, "phrase": "component-based_software_engineering"}, {"score": 0.004741845603430361, "phrase": "built-in_testing"}, {"score": 0.0047057084749407485, "phrase": "today_component-_and_service-based_technologies"}, {"score": 0.004563880494020726, "phrase": "enterprise_computing"}, {"score": 0.003931118518507637, "phrase": "component-based_systems"}, {"score": 0.0038271712887391015, "phrase": "traditional_testing_techniques"}, {"score": 0.0036274201504044685, "phrase": "associated_costs"}, {"score": 0.003372844338742438, "phrase": "system_verification_process"}, {"score": 0.0032336801561165113, "phrase": "built-in_tests"}, {"score": 0.0029722900280316216, "phrase": "testing_process"}, {"score": 0.0025892330566358503, "phrase": "run-time_tests"}, {"score": 0.00254983442025512, "phrase": "resource-aware_infrastructure"}, {"score": 0.002435190484324197, "phrase": "minimal_impact"}, {"score": 0.0023889533502525527, "phrase": "system_services"}, {"score": 0.0022990901047984197, "phrase": "component-based_verification"}, {"score": 0.0022640963589007457, "phrase": "main_features"}, {"score": 0.0021049977753042253, "phrase": "system_verification_effort"}], "paper_keywords": ["integration test", " run-time testing", " built-in test", " MORABIT"], "paper_abstract": "Today component- and service-based technologies play a central role in many aspects of enterprise computing. However, although the technologies used to define, implement, and assemble components have improved significantly over recent years, techniques for verifying systems created from them have changed very little. The correctness and reliability of component-based systems are still usually checked using the traditional testing techniques that were in use before components and services became widespread, and the associated costs and overheads still remain high. This paper presents an approach that addresses this problem by making the system verification process more component-oriented. Based on the notion of built-in tests (BIT)-tests that are packaged and distributed with prefabricated, off-the-shelf components-the approach partially automates the testing process, thereby reducing the level of effort needed to establish the acceptability of the system. The approach consists of a method that defines how components should be written to support and make use of run-time tests, and a resource-aware infrastructure that arranges for tests to be executed when they have a minimal impact on the delivery of system services. After providing an introduction to the principles behind component-based verification and explaining the main features of the approach and its supporting infrastructure, we show by means of a case study how it can reduce system verification effort.", "paper_title": "Reducing verification effort in component-based software engineering through built-in testing", "paper_id": "WOS:000247193400003"}