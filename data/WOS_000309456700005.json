{"auto_keywords": [{"score": 0.041953052650748286, "phrase": "simd"}, {"score": 0.004745260932479212, "phrase": "explicit_vectorization"}, {"score": 0.004631335513513859, "phrase": "established_trend"}, {"score": 0.004586531354697466, "phrase": "cpu_development"}, {"score": 0.004498213310668266, "phrase": "moore's_law"}, {"score": 0.004305639197085793, "phrase": "scalar_execution_speed"}, {"score": 0.004101285040435945, "phrase": "mimd"}, {"score": 0.004041879818641576, "phrase": "improved_vector_units"}, {"score": 0.0038876302202924644, "phrase": "mimd_developments"}, {"score": 0.003775803846431323, "phrase": "library_research"}, {"score": 0.003579046565851265, "phrase": "latest_hardware_improvements"}, {"score": 0.0034760655218366, "phrase": "stronger_focus"}, {"score": 0.003442460894562528, "phrase": "api"}, {"score": 0.0033433365160336842, "phrase": "computational_power"}, {"score": 0.003215659239270654, "phrase": "auto-vectorizing_compilers"}, {"score": 0.0031383410838018984, "phrase": "necessary_simd_code"}, {"score": 0.0029458777184930896, "phrase": "simd_capabilities"}, {"score": 0.002725081358527507, "phrase": "streaming_simd_extension"}, {"score": 0.002659527314613792, "phrase": "vc_library"}, {"score": 0.00247215300812495, "phrase": "portable_vectorized_code"}, {"score": 0.0023546584691707512, "phrase": "vc"}, {"score": 0.002297949552105756, "phrase": "source_code"}, {"score": 0.002264607102799332, "phrase": "full_utilization"}, {"score": 0.002231747358665628, "phrase": "hardware's_simd_capabilities"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["SIMD", " C plus", " data-parallel", " AVX", " LRBni", " SSE", " optimization", " Vc", " vectorization"], "paper_abstract": "It is an established trend that CPU development takes advantage of Moore's Law to improve in parallelism much more than in scalar execution speed. This results in higher hardware thread counts (MIMD) and improved vector units (SIMD), of which the MIMD developments have received the focus of library research and development in recent years. To make use of the latest hardware improvements, SIMD must receive a stronger focus of API research and development because the computational power can no longer be neglected and often auto-vectorizing compilers cannot generate the necessary SIMD code, as will be shown in this paper. Nowadays, the SIMD capabilities are sufficiently significant to warrant vectorization of algorithms requiring more conditional execution than was originally expected for Streaming SIMD Extension to handle. The Vc library (http://compeng.uni-frankfurt.de/?vc) was designed to support developers in the creation of portable vectorized code. Its capabilities and performance have been thoroughly tested. Vc provides portability of the source code, allowing full utilization of the hardware's SIMD capabilities, without introducing any overhead. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Vc: A C++ library for explicit vectorization", "paper_id": "WOS:000309456700005"}