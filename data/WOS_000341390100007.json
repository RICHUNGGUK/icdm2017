{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unified_wcet_analysis_framework"}, {"score": 0.03730575590231708, "phrase": "shared_cache"}, {"score": 0.004726382602809228, "phrase": "multicore_platforms"}, {"score": 0.0044702911400353535, "phrase": "multicore_architectures"}, {"score": 0.004388035083357706, "phrase": "worst-case_execution_time"}, {"score": 0.004073809704022463, "phrase": "increasingly_difficult_problem"}, {"score": 0.0024658019116387845, "phrase": "timing_anomaly_free_multicore_architecture"}, {"score": 0.002375714262344562, "phrase": "wcet."}, {"score": 0.002331909406363425, "phrase": "detailed_experiment_methodology"}, {"score": 0.0022052711621931144, "phrase": "reasonably_tight_wcet_estimates"}, {"score": 0.0021445492649196955, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "benchmark_programs"}], "paper_keywords": ["Design", " Performance", " Verification", " WCET", " shared cache", " shared bus", " multicore"], "paper_abstract": "With the advent of multicore architectures, worst-case execution time (WCET) analysis has become an increasingly difficult problem. In this article, we propose a unified WCET analysis framework for multicore processors featuring both shared cache and shared bus. Compared to other previous works, our work differs by modeling the interaction of shared cache and shared bus with other basic microarchitectural components (e.g., pipeline and branch predictor). In addition, our framework does not assume a timing anomaly free multicore architecture for computing the WCET. A detailed experiment methodology suggests that we can obtain reasonably tight WCET estimates in a wide range of benchmark programs.", "paper_title": "A Unified WCET Analysis Framework for Multicore Platforms", "paper_id": "WOS:000341390100007"}