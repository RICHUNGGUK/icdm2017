{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cycle_collection"}, {"score": 0.004667149874736771, "phrase": "cyclic_garbage"}, {"score": 0.004477083974172596, "phrase": "reference_counting"}, {"score": 0.003712796038920873, "phrase": "preferred_one"}, {"score": 0.0036363418376496484, "phrase": "better_scalability"}, {"score": 0.0034700069041302003, "phrase": "entire_heap"}, {"score": 0.003345895878114341, "phrase": "new_\"lightweight\"_cyclic_reference_counting_algorithm"}, {"score": 0.003143341238802547, "phrase": "cycle_problem"}, {"score": 0.0030946423142739813, "phrase": "simpler_and_more_efficient_way"}, {"score": 0.0030151432267065815, "phrase": "lightweight_hypothesis"}, {"score": 0.0029530125680590413, "phrase": "single_sub-graph"}, {"score": 0.0028921584725218642, "phrase": "individual_cycles"}, {"score": 0.0028325548627901004, "phrase": "basic_unit"}, {"score": 0.0027169974137406148, "phrase": "garbage_cycles"}, {"score": 0.002674885993329912, "phrase": "single_trace"}, {"score": 0.0025259712348798323, "phrase": "redundant_scans"}, {"score": 0.002499798127196099, "phrase": "garbage_objects"}, {"score": 0.002206045784326466, "phrase": "jikes_research_virtual_machine"}, {"score": 0.0021049977753042253, "phrase": "new_algorithm"}], "paper_keywords": ["garbage collection", " reference counting", " cycle collection", " Java"], "paper_abstract": "The lack of collecting cyclic garbage is generally considered the major weakness of reference counting. Reference counted systems handle this problem by incorporating either a global tracing collector, or a \"partial\" tracing collector that considers only the cycle candidates but needs several traces on them. In particular, the latter has become a preferred one as it has better scalability and locality ( no need to scan the entire heap). This paper presents a new \"lightweight\" cyclic reference counting algorithm, which is based on partial tracing and deals with the cycle problem in a simpler and more efficient way. By exploiting the lightweight hypothesis that considers a single sub-graph, instead of individual cycles, as the basic unit of cycle collection, the algorithm can detect garbage cycles in a single trace. In addition, we propose a technique for eliminating redundant scans over garbage objects, thus improving the efficiency of the algorithm. The pseudocode and its correctness proof are also presented. Finally, an implementation based on Jikes Research Virtual Machine is provided to demonstrate the effectiveness of the new algorithm.", "paper_title": "A simple and efficient algorithm for cycle collection", "paper_id": "WOS:000253408200002"}