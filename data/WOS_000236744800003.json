{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_systems"}, {"score": 0.00475382761232911, "phrase": "software_systems"}, {"score": 0.004673530058379246, "phrase": "long_time"}, {"score": 0.0044786435725543685, "phrase": "system_classes"}, {"score": 0.004291848822287492, "phrase": "source-code_reading"}, {"score": 0.0041657281535389615, "phrase": "developers'_understanding"}, {"score": 0.003958049372486465, "phrase": "class_co-evolution"}, {"score": 0.003891140864902669, "phrase": "implicit_design_dependencies_clusters"}, {"score": 0.0038090874465452214, "phrase": "\"parallel\"_ways"}, {"score": 0.0034828730516958807, "phrase": "data-mining_method"}, {"score": 0.0034386016613475335, "phrase": "\"hidden\"_co-evolutions"}, {"score": 0.0032810180076973806, "phrase": "umldiff"}, {"score": 0.00317095235382607, "phrase": "uml_class_models"}, {"score": 0.003130633384437765, "phrase": "object-oriented_software_system"}, {"score": 0.0030515222178491923, "phrase": "\"change_records"}, {"score": 0.0029871209444889716, "phrase": "design-level_changes"}, {"score": 0.002924074850256874, "phrase": "change_records"}, {"score": 0.0028259493298659288, "phrase": "individual_system_class"}, {"score": 0.002790004829699627, "phrase": "\"class_change_profiles"}, {"score": 0.0027078974645805736, "phrase": "class_change_profile"}, {"score": 0.0024969812322112174, "phrase": "apriori_association-rule_mining_algorithm"}, {"score": 0.0024234763342790852, "phrase": "categorical_class_change_profiles"}, {"score": 0.0023824468367751365, "phrase": "co-evolution_patterns"}, {"score": 0.0022442249871042026, "phrase": "recovered_knowledge"}, {"score": 0.002215663255682209, "phrase": "overall_understanding"}, {"score": 0.0021968238865548812, "phrase": "system_evolution"}, {"score": 0.0021504218042734677, "phrase": "future_maintenance_activities"}], "paper_keywords": ["structural differencing", " design evolution", " design understanding", " design mentoring"], "paper_abstract": "As software systems evolve over a long time, non-trivial and often unintended relationships among system classes arise, which cannot be easily perceived through source-code reading. As a result, the developers' understanding of continuously evolving, large, long-lived systems deteriorates steadily. A most interesting relationship is class co-evolution: because of implicit design dependencies clusters of classes change in \"parallel\" ways and recognizing such co-evolution is crucial in effectively extending and maintaining the system. In this paper, we propose a data-mining method for recovering \"hidden\" co-evolutions of system classes. This method relies on our UML-aware structural differencing algorithm, UMLDiff, which, given a sequence of UML class models of an object-oriented software system, produces a sequence of \"change records\" that describe the design-level changes over its life span. The change records are analyzed from the perspective of each individual system class to extract \"class change profiles\". Each phase of a class change profile is then discretized and classified into one of two general change types: function extension or refactoring. Finally, the Apriori association-rule mining algorithm is applied to the database of categorical class change profiles, to elicit co-evolution patterns among two or more classes, which may be as yet undocumented and unknown. The recovered knowledge facilitates the overall understanding of system evolution and the planning of future maintenance activities. We report on one real world case study evaluating our approach.", "paper_title": "Understanding the evolution and co-evolution of classes in object-oriented systems", "paper_id": "WOS:000236744800003"}