{"auto_keywords": [{"score": 0.03715400509693953, "phrase": "dag"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_multicore_system"}, {"score": 0.004461761855323898, "phrase": "heterogeneous_cluster"}, {"score": 0.00440976345264104, "phrase": "multicore-based_machines"}, {"score": 0.004307569753106432, "phrase": "satellite_data"}, {"score": 0.004183137595671171, "phrase": "large_data_sets"}, {"score": 0.0040385352882334235, "phrase": "deadline_constraint"}, {"score": 0.003991449490087454, "phrase": "multiple_applications"}, {"score": 0.0038534477978822133, "phrase": "directed_acyclic_graph"}, {"score": 0.0036553070575015344, "phrase": "dedicated_heterogeneous_distributed_computing_system"}, {"score": 0.0033277936960179892, "phrase": "task_execution_times"}, {"score": 0.0029592333031063156, "phrase": "heterogeneous_multicore-based_parallel_system"}, {"score": 0.0027741761880779535, "phrase": "common_deadline"}, {"score": 0.0026313840069327713, "phrase": "execution_times"}, {"score": 0.002339771435910601, "phrase": "five_static_resource_allocation_heuristics"}, {"score": 0.0022192891418394514, "phrase": "six_different_scenarios"}, {"score": 0.002193367454830741, "phrase": "different_ratios"}, {"score": 0.0021049977753042253, "phrase": "loose_and_tight_deadlines"}], "paper_keywords": ["Directed acyclical graph", " Heterogeneous computing", " Resource allocation"], "paper_abstract": "In this study, we consider an environment composed of a heterogeneous cluster of multicore-based machines used to analyze satellite data. The workload involves large data sets and is subject to a deadline constraint. Multiple applications, each represented by a directed acyclic graph (DAG), are allocated to a dedicated heterogeneous distributed computing system. Each vertex in the DAG represents a task that needs to be executed and task execution times vary substantially across machines. The goal of this research is to assign the tasks in applications to a heterogeneous multicore-based parallel system in such a way that all applications complete before a common deadline, and their completion times are robust against uncertainties in execution times. We define a measure that quantifies robustness in this environment. We design, compare, and evaluate five static resource allocation heuristics that attempt to maximize robustness. We consider six different scenarios with different ratios of computation versus communication, and loose and tight deadlines. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Robust static resource allocation of DAGs in a heterogeneous multicore system", "paper_id": "WOS:000326057700016"}