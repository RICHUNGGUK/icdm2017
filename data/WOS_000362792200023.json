{"auto_keywords": [{"score": 0.03971153651924658, "phrase": "nest"}, {"score": 0.00481495049065317, "phrase": "locality-aware_approximate_queries"}, {"score": 0.004721529233535422, "phrase": "cloud_computing_applications"}, {"score": 0.0045997680394590365, "phrase": "huge_volume"}, {"score": 0.004481132747216135, "phrase": "accurate_and_fast_approximate_queries"}, {"score": 0.004322967486451877, "phrase": "locality-sensitive_hashing"}, {"score": 0.004225223692701494, "phrase": "approximate_queries"}, {"score": 0.004156757045329242, "phrase": "imbalanced_load"}, {"score": 0.0041296807537109246, "phrase": "space_inefficiency"}, {"score": 0.004102780105064226, "phrase": "distributed_data_servers"}, {"score": 0.004023120753104693, "phrase": "query_accuracy"}, {"score": 0.00398387063819657, "phrase": "long_query_latency"}, {"score": 0.003932129823796712, "phrase": "cloud_servers"}, {"score": 0.0038181472934630347, "phrase": "novel_scheme"}, {"score": 0.0036712747276274617, "phrase": "cost-effective_approximate_queries"}, {"score": 0.0035300318844877286, "phrase": "cuckoo-driven_locality-sensitive_hashing"}, {"score": 0.003405321679000047, "phrase": "cuckoo-driven_method"}, {"score": 0.0033720784894045544, "phrase": "load-balancing_buckets"}, {"score": 0.003221169966797793, "phrase": "adjacent_buckets"}, {"score": 0.003179303164775306, "phrase": "constant-scale_query_complexity"}, {"score": 0.0031379788088249576, "phrase": "worst_case"}, {"score": 0.0030369955065974222, "phrase": "space_utilization"}, {"score": 0.0030171910207671205, "phrase": "fast_query_response"}, {"score": 0.002948883844627217, "phrase": "salient_property"}, {"score": 0.0028633212043378564, "phrase": "nest_design"}, {"score": 0.0028353540399641336, "phrase": "real_hybrid_storage_system"}, {"score": 0.002708399936381754, "phrase": "flat_addressing"}, {"score": 0.0026907324647716395, "phrase": "efficient_operations"}, {"score": 0.0026731855031676324, "phrase": "ssd"}, {"score": 0.0026470650216161577, "phrase": "system_performance"}, {"score": 0.00259559608895677, "phrase": "proper_\"division"}, {"score": 0.0024631735269020735, "phrase": "heterogeneous_storage_hierarchy"}, {"score": 0.002407378648209689, "phrase": "optimal_balance"}, {"score": 0.0023760637960293257, "phrase": "indexing_bottleneck"}, {"score": 0.002360559092734843, "phrase": "theoretical_analysis"}, {"score": 0.0023451553255837317, "phrase": "extensive_experiments"}, {"score": 0.0023222396443960225, "phrase": "lanl"}, {"score": 0.002307083221755957, "phrase": "microsoft_metadata"}, {"score": 0.0022401007567642347, "phrase": "salient_properties"}, {"score": 0.0021821915946356168, "phrase": "approximate_query_service"}, {"score": 0.002167949230651206, "phrase": "cloud_computing_environments"}, {"score": 0.0021327478049969423, "phrase": "open-source_codes"}, {"score": 0.0021049977753042253, "phrase": "public_use"}], "paper_keywords": ["Hybrid storage systems", " approximate queries", " locality"], "paper_abstract": "Cloud computing applications face the challenges of dealing with a huge volume of data that needs the support of accurate and fast approximate queries to enhance system scalability and improve quality of service. Locality-sensitive hashing (LSH) can support the approximate queries that unfortunately suffer from imbalanced load and space inefficiency among distributed data servers, which severely limits the query accuracy and incurs long query latency between users and cloud servers. In this paper, we propose a novel scheme, called NEST, which offers easy-to-use and cost-effective approximate queries for cloud computing. The novelty of NEST is to leverage cuckoo-driven locality-sensitive hashing to find similar items that are further placed closely through cuckoo-driven method to obtain load-balancing buckets in hash tables. NEST hence carries out flat and manageable addressing in adjacent buckets, and obtains constant-scale query complexity even in the worst case. The benefits of NEST include the increments of space utilization and fast query response. Moreover, due to the salient property of flat addressing in NEST, we implement NEST design in a real hybrid storage system, which consists of DRAM, SSD, and hard disk. The flat addressing allows efficient operations in SSD to improve system performance. We argue that a proper \"division of labor\" among DRAM, SSD, and hard disk in the hybrid and heterogeneous storage hierarchy is desperately needed to strike an optimal balance to remove the indexing bottleneck. Theoretical analysis and extensive experiments (on LANL and Microsoft metadata) in a large-scale cloud testbed demonstrate the salient properties of NEST to meet the needs of approximate query service in cloud computing environments. We have offered open-source codes of NEST for public use.", "paper_title": "The Design and Implementations of Locality-Aware Approximate Queries in Hybrid Storage Systems", "paper_id": "WOS:000362792200023"}