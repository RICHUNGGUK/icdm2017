{"auto_keywords": [{"score": 0.025980966224411945, "phrase": "swapbypass"}, {"score": 0.00481495049065317, "phrase": "guest_upcalls"}, {"score": 0.004760394308239882, "phrase": "symbiotic_virtualization"}, {"score": 0.0046797114400479135, "phrase": "new_approach"}, {"score": 0.0044967055264893184, "phrase": "guest_os"}, {"score": 0.004420472010542188, "phrase": "native_hardware_interface"}, {"score": 0.004345525254560329, "phrase": "full_system_virtualization"}, {"score": 0.004175533280178052, "phrase": "software_interface"}, {"score": 0.004012167978674377, "phrase": "vmm"}, {"score": 0.0037044144397617544, "phrase": "os"}, {"score": 0.0036001255166809793, "phrase": "symbiotic_virtualization_interface"}, {"score": 0.003193606324727067, "phrase": "symcall_symbiotic_virtualization_interface"}, {"score": 0.002999275430040092, "phrase": "palacios"}, {"score": 0.0029483516334882862, "phrase": "clean_synchronous_upcalls"}, {"score": 0.002898291237210567, "phrase": "symbiotic_guest"}, {"score": 0.002690975370565776, "phrase": "synchronous_collection"}, {"score": 0.0026604207233593973, "phrase": "semantically_rich_guest_data"}, {"score": 0.0025416235470290286, "phrase": "new_vmm_features"}, {"score": 0.0023064582783867645, "phrase": "swap_decisions"}, {"score": 0.002254357921422124, "phrase": "symbiotic_linux_guest"}, {"score": 0.0021659920594094407, "phrase": "detailed_performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "symcall"}], "paper_keywords": ["Design", " Experimentation", " Measurement", " Performance", " virtual machine monitors", " operating systems"], "paper_abstract": "Symbiotic virtualization is a new approach to system virtualization in which a guest OS targets the native hardware interface as in full system virtualization, but also optionally exposes a software interface that can be used by a VMM, if present, to increase performance and functionality. Neither the VMM nor the OS needs to support the symbiotic virtualization interface to function together, but if both do, both benefit. We describe the design and implementation of the SymCall symbiotic virtualization interface in our publicly available Palacios VMM for modern x86 machines. SymCall makes it possible for Palacios to make clean synchronous upcalls into a symbiotic guest, much like system calls. One use of symcalls is to allow synchronous collection of semantically rich guest data during exit handling in order to enable new VMM features. We describe the implementation of SwapBypass, a VMM service based on SymCall that reconsiders swap decisions made by a symbiotic Linux guest. Finally, we present a detailed performance evaluation of both SwapBypass and SymCall.", "paper_title": "SymCall: Symbiotic Virtualization Through VMM-to-Guest Upcalls", "paper_id": "WOS:000294949300018"}