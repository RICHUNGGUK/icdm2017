{"auto_keywords": [{"score": 0.049751375642011174, "phrase": "common_supercell"}, {"score": 0.015542804812538854, "phrase": "minimal_strain"}, {"score": 0.01152060415087027, "phrase": "electronic_structure"}, {"score": 0.011134348751070942, "phrase": "cellmatch_code"}, {"score": 0.009473010367598232, "phrase": "distributed_program"}, {"score": 0.009408497551813316, "phrase": "test_data"}, {"score": 0.004738430358164348, "phrase": "recent_emergence"}, {"score": 0.004505730493778452, "phrase": "new_routes"}, {"score": 0.0044646604326553695, "phrase": "novel_materials"}, {"score": 0.004444265372139406, "phrase": "mere_layer-by-layer_combinations"}, {"score": 0.004046020290832207, "phrase": "lattice_constants"}, {"score": 0.003945359100993919, "phrase": "new_periodic_cell"}, {"score": 0.0039093768070721955, "phrase": "moire_type"}, {"score": 0.0035507457285983268, "phrase": "computational_treatment"}, {"score": 0.003534510708818631, "phrase": "appropriate_method"}, {"score": 0.0034862481266528427, "phrase": "density_functional_theory"}, {"score": 0.0034703069812158935, "phrase": "tight_binding"}, {"score": 0.0033300663114870883, "phrase": "selected_materials"}, {"score": 0.0031239355536665896, "phrase": "program"}, {"score": 0.0031016551924301847, "phrase": "cellmatch_catalogue"}, {"score": 0.003017491783139307, "phrase": "cpc_program_library"}, {"score": 0.003003687602473099, "phrase": "queen's_university"}, {"score": 0.002989946605131206, "phrase": "belfast"}, {"score": 0.002976267838335964, "phrase": "n._ireland"}, {"score": 0.0029490976406067694, "phrase": "standard_cpc"}, {"score": 0.002721664743644582, "phrase": "tar.gz_programming_language"}, {"score": 0.0027092819771304386, "phrase": "python"}, {"score": 0.0026599578953193817, "phrase": "python_interpreter"}, {"score": 0.0026296594707232277, "phrase": "linux"}, {"score": 0.0026175952455594277, "phrase": "aix."}, {"score": 0.002587748829718558, "phrase": "large_systems"}, {"score": 0.0023936009276796836, "phrase": "total_energy"}, {"score": 0.002344687536424102, "phrase": "systematic_search"}, {"score": 0.002328605691048833, "phrase": "phase_space"}, {"score": 0.0023073342853439935, "phrase": "unit_cell_vectors"}, {"score": 0.0022967713922705, "phrase": "unusual_features"}, {"score": 0.00221907247160276, "phrase": "total_energy_program"}, {"score": 0.0021538582230287025, "phrase": "search_parameters"}, {"score": 0.002134179690164151, "phrase": "reasonable_values"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Electronic structure", " Density functional theory", " van der Waals materials", " Commensurate structures", " Moire patterns", " Epitaxial growth"], "paper_abstract": "Recent emergence of 2D materials (the so-called van der Waals materials), of which graphene is the most famous one, opens new routes in creation of novel materials by mere layer-by-layer combinations. Moreover, a growth of such materials is typically done on a substrate. In both cases structures appear that are periodical in the plane but the periodicity is very different from simple 1 x 1 commensurate unit cells combinations which appears for materials with very similar values of lattice constants. Much more common is the case in which a new periodic cell is of a moire type such as 10 x 10 over 9 x 9 in case of graphene on Ir(111). Once the shape of the common supercell for 2 different 2D materials, or a material and the surface is found - it is easy to do a computational treatment with appropriate method for electronic structure - such as density functional theory, tight binding or some other. The purpose of the CellMatch code is to generate such common supercell given the two unit cells of selected materials. The CellMatch code searches within given combinatorial space and sorts results by the strain imposed on one of the components, while the other component experiences zero strain. Program summary Program title: CellMatch Catalogue identifier: AEYD_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEYD_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 18603 No. of bytes in distributed program, including test data, etc.: 129294 Distribution format: tar.gz Programming language: Python. Computer: Any architecture with a python interpreter. Operating system: Linux, AIX. RAM: Even for large systems almost negligible usage of memory. Classification: 7.3. Nature of problem: Contracting a common supercell that fits the atoms of two unit cells with minimal strain. This is used as input for any total energy or electronic structure code. Solution method: Straightforward systematic search in the phase space of combinations of unit cell vectors. Unusual features: Output, atomic structure of the supercell, can be used in any total energy program. Running time: Usually very short (seconds) if the search parameters are kept at reasonable values. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "CellMatch: Combining two unit cells into a common supercell with minimal strain", "paper_id": "WOS:000362919500032"}