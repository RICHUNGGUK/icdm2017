{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "hilbert_curve"}, {"score": 0.017215260218067657, "phrase": "ann_query"}, {"score": 0.010085246187638168, "phrase": "large_number"}, {"score": 0.008992087963181518, "phrase": "ccsf_strategy"}, {"score": 0.008654461569895432, "phrase": "neighboring_blocks"}, {"score": 0.0069447298568486495, "phrase": "hilbert"}, {"score": 0.006725001021133753, "phrase": "one-nearest-neighbor_query"}, {"score": 0.004545240514015278, "phrase": "one-nearest-neighbor_queries"}, {"score": 0.004430248457624686, "phrase": "total_ordering"}, {"score": 0.004401955895933783, "phrase": "spatial_proximity"}, {"score": 0.0043738432231020885, "phrase": "spatial_objects"}, {"score": 0.00433200902751133, "phrase": "hilbert_curve_approach"}, {"score": 0.0042495320879288615, "phrase": "spatial_locality"}, {"score": 0.004222501861159736, "phrase": "chen"}, {"score": 0.004195439832056206, "phrase": "chang"}, {"score": 0.0041419901614217275, "phrase": "neighbor_finding_strategy"}, {"score": 0.00396027311392058, "phrase": "absolute_location"}, {"score": 0.0037382581492847104, "phrase": "peano_curve"}, {"score": 0.0035060903664150115, "phrase": "unnecessary_distance_comparisons"}, {"score": 0.003194736764837261, "phrase": "one-nearest-neighbor_finding_strategy"}, {"score": 0.0030839851024657395, "phrase": "onhc_strategy"}, {"score": 0.002948547333717581, "phrase": "quaternary_numbers"}, {"score": 0.002901627749562029, "phrase": "relative_locations"}, {"score": 0.0028738341066290815, "phrase": "query_block"}, {"score": 0.0028463059289874637, "phrase": "neighboring_block"}, {"score": 0.0027741761880779535, "phrase": "nearest_neighbor"}, {"score": 0.002601727192945944, "phrase": "all-nearest-neighbors_finding_strategy"}, {"score": 0.0025195550121331345, "phrase": "anhc_strategy"}, {"score": 0.0024399717841513354, "phrase": "simulation_result"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Hilbert curve", " Nearest neighbor queries", " R-tree", " Space filling curves", " Spatial index"], "paper_abstract": "An all-nearest-neighbors (ANN) query retrieves all nearest neighbors to all query objects. We may perform large number of one-nearest-neighbor queries to answer such an ANN query. Due to no total ordering of spatial proximity among spatial objects, the Hilbert curve approach has proposed to preserve the spatial locality. Chen and Chang have proposed a neighbor finding strategy (denoted as the CCSF strategy) based on the Hilbert curve to compute the absolute location of the neighboring blocks. However, it costs much time during the transformation between the Hilbert curve and the Peano curve. On the other hand, in the strategy based on R or R*-trees for an ANN query, large number of unnecessary distance comparisons have to be done due to the problem of overlaps within the R-tree, resulting in many redundant disk accesses. Therefore, in this paper, we first propose the one-nearest-neighbor finding strategy directly based on the Hilbert curve (denoted as the ONHC strategy) for a one-nearest-neighbor query. By relations among orientations, orders, and quaternary numbers, we compute the relative locations of the query block and the neighboring block in the Hilbert curve. Then, the nearest neighbor of one query point can be found directly from these neighboring blocks. Next, by using our ONHC strategy, we propose the all-nearest-neighbors finding strategy based on the Hilbert curve (denoted as the ANHC strategy) for an ANN query. Finally, from the simulation result, we show that our ONHC strategy needs less response time (the CPU-time and the I/O time) than the CCSF strategy for the one-nearest-neighbor query. We also show that our ANHC strategy needs less response time than the strategy based on R*-trees for an ANN query. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "All-nearest-neighbors finding based on the Hilbert curve", "paper_id": "WOS:000288343900121"}