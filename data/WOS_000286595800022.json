{"auto_keywords": [{"score": 0.049407782669650464, "phrase": "type_classes"}, {"score": 0.004814952636065881, "phrase": "implicits"}, {"score": 0.004582776475320544, "phrase": "haskell"}, {"score": 0.004486640769041646, "phrase": "disciplined_alternative"}, {"score": 0.0044237033788643715, "phrase": "ad-hoc_polymorphism"}, {"score": 0.004121960535174029, "phrase": "type-safe_solution"}, {"score": 0.003978866233891427, "phrase": "software_engineering_and_programming_languages"}, {"score": 0.0037868092509097404, "phrase": "retroactive_extension"}, {"score": 0.0035283552859817764, "phrase": "good_mechanism"}, {"score": 0.003478813491904962, "phrase": "concept-based_generic_programming"}, {"score": 0.003195787852087248, "phrase": "type-level_computation"}, {"score": 0.0030630037175103032, "phrase": "lightweight_approach"}, {"score": 0.002833689453299307, "phrase": "concept_pattern"}, {"score": 0.0024772013657695896, "phrase": "scala's_type_system"}, {"score": 0.002211947103318718, "phrase": "haskell_type_class_system"}, {"score": 0.002165475272070707, "phrase": "scala"}, {"score": 0.0021049977753042253, "phrase": "generic_programming"}], "paper_keywords": ["Languages", " Type classes", " C plus plus concepts", " Abstract datatypes", " Scala"], "paper_abstract": "Type classes were originally developed in Haskell as a disciplined alternative to ad-hoc polymorphism. Type classes have been shown to provide a type-safe solution to important challenges in software engineering and programming languages such as, for example, retroactive extension of programs. They are also recognized as a good mechanism for concept-based generic programming and, more recently, have evolved into a mechanism for type-level computation. This paper presents a lightweight approach to type classes in object-oriented (OO) languages with generics using the CONCEPT pattern and implicits (a type-directed implicit parameter passing mechanism). This paper also shows how Scala's type system conspires with implicits to enable, and even surpass, many common extensions of the Haskell type class system, making Scala ideally suited for generic programming in the large.", "paper_title": "Type Classes as Objects and Implicits", "paper_id": "WOS:000286595800022"}