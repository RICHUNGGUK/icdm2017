{"auto_keywords": [{"score": 0.04737883303680886, "phrase": "real-world_graphs"}, {"score": 0.03884432419079766, "phrase": "trivial_algorithm"}, {"score": 0.026084104296837836, "phrase": "degree_sequence"}, {"score": 0.00481495049065317, "phrase": "triangle_enumeration_work"}, {"score": 0.004660453113061494, "phrase": "fundamental_graph_operation"}, {"score": 0.004576763709613412, "phrase": "important_interpretations"}, {"score": 0.0045108906244892165, "phrase": "especially_social_and_other_interaction_networks"}, {"score": 0.003916098498242888, "phrase": "special_graphs"}, {"score": 0.0038737214010638745, "phrase": "major_speedups"}, {"score": 0.0034366728236876016, "phrase": "good_heuristic"}, {"score": 0.0032546105164772995, "phrase": "lowest_degree"}, {"score": 0.003115908199991072, "phrase": "remarkable_speedups"}, {"score": 0.00295078850927459, "phrase": "heavy-tailed_degree_distributions"}, {"score": 0.002855934865505357, "phrase": "erased_configuration_model"}, {"score": 0.0026366753045215558, "phrase": "expected_running_time"}, {"score": 0.002524271763646109, "phrase": "ecm"}, {"score": 0.0022472527731744974, "phrase": "non_trivial_speedups"}, {"score": 0.002230984431056064, "phrase": "simple_triangle_enumeration_algorithms"}, {"score": 0.002151388538895855, "phrase": "expected_linear-time_performance"}, {"score": 0.0021049977753042253, "phrase": "power_law"}], "paper_keywords": [""], "paper_abstract": "Listing all triangles is a fundamental graph operation. Triangles can have important interpretations in real-world graphs, especially social and other interaction networks. Despite the lack of provably efficient (linear, or slightly super linear) worst-case algorithms for this problem, practitioners run simple, efficient heuristics to find all triangles in graphs with millions of vertices. How are these heuristics exploiting the structure of these special graphs to provide major speedups in running time?We study one of the most prevalent algorithms used by practitioners. A trivial algorithm enumerates all paths of length 2, and checks if each such path is incident to a triangle. A good heuristic is to enumerate only those paths of length 2 in which the middle vertex has the lowest degree. It is easily implemented and is empirically known to give remarkable speedups over the trivial algorithm.We study the behavior of this algorithm over graphs with heavy-tailed degree distributions, a defining feature of real-world graphs. The erased configuration model (ECM) efficiently generates a graph with asymptotically (almost) any desired degree sequence. We show that the expected running time of this algorithm over the distribution of graphs created by the ECM is controlled by the (4/3)-norm of the degree sequence. Norms of the degree sequence are a measure of the heaviness of the tail, and it is precisely this feature that allows non trivial speedups of simple triangle enumeration algorithms. As a corollary of our main theorem, we prove expected linear-time performance for degree sequences following a power law with exponent 7/3, and non trivial speedup whenever (2, 3).", "paper_title": "WHY DO SIMPLE ALGORITHMS FOR TRIANGLE ENUMERATION WORK IN THE REAL WORLD?", "paper_id": "WOS:000362949500003"}