{"auto_keywords": [{"score": 0.04298956016148599, "phrase": "extensible_languages"}, {"score": 0.015719716506582538, "phrase": "adaptable_parsing_expression_grammars"}, {"score": 0.004372712391262538, "phrase": "new_constructs"}, {"score": 0.004292422863834094, "phrase": "automatic_generation"}, {"score": 0.004260719592945006, "phrase": "syntactic_analysers"}, {"score": 0.00418247778205288, "phrase": "adequate_resources"}, {"score": 0.003956234229826621, "phrase": "syntax_macro_definitions"}, {"score": 0.0038691879515317267, "phrase": "severe_restrictions"}, {"score": 0.0037283301619292636, "phrase": "macro_definitions"}, {"score": 0.0036598289615980837, "phrase": "different_files"}, {"score": 0.0035265659032655845, "phrase": "syntax_analysis"}, {"score": 0.0033981387193790353, "phrase": "main_reasons"}, {"score": 0.0032987614613108345, "phrase": "appropriate_formal_models"}, {"score": 0.0031086137705026457, "phrase": "formal_definition"}, {"score": 0.0028969560940141233, "phrase": "input_string"}, {"score": 0.0028648759706752162, "phrase": "proposed_model"}, {"score": 0.002822652835367827, "phrase": "similar_approaches"}, {"score": 0.0025916375737852506, "phrase": "pacicrat_parsers"}, {"score": 0.0024421501497321027, "phrase": "fly_modifications"}, {"score": 0.00241509422805775, "phrase": "production_rules"}, {"score": 0.0023972232771581753, "phrase": "parse_time"}, {"score": 0.002344398099179438, "phrase": "standard_peg."}, {"score": 0.002250549946875429, "phrase": "real_extensible_language"}, {"score": 0.00222561197623787, "phrase": "initial_performance_tests"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Extensible languages", " Adaptable grammars", " PEG"], "paper_abstract": "The term \"extensible language\" is especially used when a language allows the extension of its own concrete syntax and the definition of the semantics of new constructs. Most popular tools designed for automatic generation of syntactic analysers do not offer any adequate resources for the specification of extensible languages. When used in the implementation of features like syntax macro definitions, these tools usually impose severe restrictions. For example, it may be required that macro definitions and their use reside in different files; or it may be impossible to perform the syntax analysis in one single pass. We claim that one of the main reasons for these limitations is the lack of appropriate formal models for the definition of the syntax of extensible languages. This paper presents the design and formal definition of Adaptable Parsing Expression Grammars, an extension to the Parsing Expression Grammar (PEG) model that allows the manipulation of its own production rules during the analysis of an input string. The proposed model compares favourably with similar approaches for the definition of the syntax of extensible languages. An implementation of the model is also presented, simulating the behaviour of pacicrat parsers. Among the challenges for this implementation is the use of attributes and on the fly modifications on the production rules at parse time, features not present in standard PEG. This approach has been used on the definition of a real extensible language, and initial performance tests suggest that the model may work well in practice. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "The formalization and implementation of Adaptable Parsing Expression Grammars", "paper_id": "WOS:000345180900003"}