{"auto_keywords": [{"score": 0.03430158767591974, "phrase": "expressive_power"}, {"score": 0.00481495049065317, "phrase": "service-oriented_programming"}, {"score": 0.00470862827326028, "phrase": "formal_account"}, {"score": 0.004482873744893272, "phrase": "service-based_systems"}, {"score": 0.004364310576600359, "phrase": "service_composition"}, {"score": 0.003459191419478298, "phrase": "labelled_transition_semantics"}, {"score": 0.003397866151093552, "phrase": "equivalence_result"}, {"score": 0.003367611543880675, "phrase": "sscc"}, {"score": 0.0030520148188164084, "phrase": "van_der_aalst_workflow_patterns"}, {"score": 0.0030113280682863234, "phrase": "automotive_case_study"}, {"score": 0.002971182100871581, "phrase": "european_project"}, {"score": 0.002957919048133256, "phrase": "sensoria"}, {"score": 0.0028539179130824786, "phrase": "simple_type_system"}, {"score": 0.002778317177178732, "phrase": "service_protocols"}, {"score": 0.0027047136845332917, "phrase": "behavioural_theory"}, {"score": 0.0025404470150468387, "phrase": "different_primitives"}, {"score": 0.0024953686545818587, "phrase": "final_application"}, {"score": 0.0023754752864092437, "phrase": "program_transformations"}, {"score": 0.0022613292987262177, "phrase": "typical_uml_sequence_diagram"}, {"score": 0.002162316557411786, "phrase": "service-oriented_programming_style"}, {"score": 0.0021049977753042253, "phrase": "web_services_technology"}], "paper_keywords": [""], "paper_abstract": "We give a formal account of stream-based, service-centered calculus (SSCC), a calculus for modelling service-based systems, suitable to describe both service composition (orchestration) and the protocols that services follow when invoked (conversation). The calculus includes primitives for defining and invoking services, for isolating conversations (called sessions) among clients and servers, and for orchestrating services. The calculus is equipped with a reduction and a labelled transition semantics related by an equivalence result. SSCC provides a good trade-off between expressive power for modelling and simplicity for analysis. We assess the expressive power by modelling van der Aalst workflow patterns and an automotive case study from the European project Sensoria. For analysis, we present a simple type system ensuring compatibility of client and service protocols. We also study the behavioural theory of the calculus, highlighting some axioms that capture the behaviour of the different primitives. As a final application of the theory, we define and prove correct some program transformations. These allow to start modelling a system from a typical UML Sequence Diagram, and then transform the specification to match the service-oriented programming style, thus simplifying its implementation using web services technology.", "paper_title": "The stream-based service-centred calculus: a foundation for service-oriented programming", "paper_id": "WOS:000341369900003"}