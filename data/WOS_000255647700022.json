{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "special_functional_units"}, {"score": 0.009568657138031062, "phrase": "clock_cycles"}, {"score": 0.006196279765001166, "phrase": "practical_time"}, {"score": 0.005882448656357272, "phrase": "proposed_method"}, {"score": 0.004600596158672458, "phrase": "behavioral_synthesis"}, {"score": 0.004282787299993434, "phrase": "clock_cycle_time"}, {"score": 0.004227398267369744, "phrase": "total_functional_unit_area_constraints"}, {"score": 0.0039097293657870584, "phrase": "shorter_delay"}, {"score": 0.003859146369720225, "phrase": "smaller_area"}, {"score": 0.0037844916274672544, "phrase": "cascaded_basic_functional_units"}, {"score": 0.003735522846193052, "phrase": "specific_operation_patterns"}, {"score": 0.0033006894756949776, "phrase": "resource_sharing"}, {"score": 0.003257960296952439, "phrase": "intermediate_operation_results"}, {"score": 0.0030326180561817497, "phrase": "almost_all_conventional_methods"}, {"score": 0.0027145478956494356, "phrase": "tight_area_constraint"}, {"score": 0.0023672002840029517, "phrase": "experimental_results"}, {"score": 0.0021747784376752776, "phrase": "small_application"}, {"score": 0.0021049977753042253, "phrase": "realistic_application"}], "paper_keywords": ["behavioral synthesis", " scheduling", " allocation", " module selection", " operation chaining"], "paper_abstract": "This paper proposes a novel Behavioral Synthesis method that tries to reduce the number of clock cycles under clock cycle time and total functional unit area constraints using special functional units efficiently. Special functional units are designed to have shorter delay and/or smaller area than the cascaded basic functional units for specific operation patterns. For example, a Multiply-Accumulator is one of them. However, special functional units may have less flexibility for resource sharing because intermediate operation results may not be able to be obtained. Hence, almost all conventional methods can not handle special functional units efficiently for the reduction of clock cycles in practical time, especially under a tight area constraint. The proposed method makes it possible to solve module selection, scheduling, and functional unit allocation problems using special functional units in practical time with some heuristics. Experimental results show that the proposed method has achieved maximally 33% reduction of the cycles for a small application and 14% reduction for a realistic application in practical time.", "paper_title": "A behavioral synthesis method with special functional units", "paper_id": "WOS:000255647700022"}