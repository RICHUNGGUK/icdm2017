{"auto_keywords": [{"score": 0.04604539445141672, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "simpler_typed_languages"}, {"score": 0.004668059458774745, "phrase": "first_family"}, {"score": 0.004620093797504386, "phrase": "tagless_interpretations"}, {"score": 0.004549063619065006, "phrase": "higher-order_typed_object_language"}, {"score": 0.004253618550301311, "phrase": "dependent_types"}, {"score": 0.004209893377338457, "phrase": "generalized_algebraic_data_types"}, {"score": 0.0040186038781533946, "phrase": "statically_type-preserving_interpretations"}, {"score": 0.0037381083634085424, "phrase": "partial_evaluator"}, {"score": 0.0032510690712452147, "phrase": "de_bruijn"}, {"score": 0.0032176163279340206, "phrase": "higher-order_abstract_syntax"}, {"score": 0.0031193028729331667, "phrase": "data_constructors"}, {"score": 0.0030083825666563898, "phrase": "object_terms"}, {"score": 0.0029467742734417255, "phrase": "initial_algebra"}, {"score": 0.0028864239961184364, "phrase": "coalgebraic_structure"}, {"score": 0.002769395841379498, "phrase": "inductive_maps"}, {"score": 0.0026297428083782875, "phrase": "typed_partial_evaluation"}, {"score": 0.0026026666736474404, "phrase": "cps_transformations"}, {"score": 0.0025361866386341796, "phrase": "object_term"}, {"score": 0.0021049977753042253, "phrase": "higher-kinded_types"}], "paper_keywords": [""], "paper_abstract": "We have built the first family of tagless interpretations for a higher-order typed object language in a typed metalanguage (Haskell or ML) that require no dependent types, generalized algebraic data types, or postprocessing to eliminate tags. The statically type-preserving interpretations include an evaluator, a compiler (or staged evaluator), a partial evaluator, and call-by-name and call-by-value continuation-passing style (CPS) transformers. Our principal technique is to encode de Bruijn or higher-order abstract syntax using combinator functions rather than data constructors. In other words, we represent object terms not in an initial algebra but using the coalgebraic structure of the lambda-calculus. Our representation also simulates inductive maps from types to types, which are required for typed partial evaluation and CPS transformations. Our encoding of an object term abstracts uniformly over the family of ways to interpret it, yet statically assures that the interpreters never get stuck. This family of interpreters thus demonstrates again that it is useful to abstract over higher-kinded types.", "paper_title": "Finally tagless, partially evaluated: Tagless staged interpreters for simpler typed languages", "paper_id": "WOS:000270762600003"}