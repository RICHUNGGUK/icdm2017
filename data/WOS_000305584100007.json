{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "behavioral_interface_specification_languages"}, {"score": 0.004741845603430361, "phrase": "formal_code-level_annotations"}, {"score": 0.0041316803676012155, "phrase": "intended_behavior"}, {"score": 0.004068907083697369, "phrase": "program_modules"}, {"score": 0.0038271712887391015, "phrase": "program_behavior"}, {"score": 0.0037402558657576124, "phrase": "guiding_implementation"}, {"score": 0.003438058620195309, "phrase": "modular_development"}, {"score": 0.003208999546225013, "phrase": "automated_analysis"}, {"score": 0.003160200215473349, "phrase": "program_verification"}, {"score": 0.0029722900280316216, "phrase": "common_code_vulnerabilities"}, {"score": 0.00288255520607591, "phrase": "light-weight_application-specific_semantic_properties"}, {"score": 0.002731971103291716, "phrase": "test_oracles"}, {"score": 0.0026698611202305715, "phrase": "full_formal_program_verification"}, {"score": 0.002472822097373027, "phrase": "automatic_program_verification"}, {"score": 0.0021375377706211686, "phrase": "scientific_challenges"}, {"score": 0.0021049977753042253, "phrase": "large-scale_software_verification"}], "paper_keywords": ["Design", " Documentation", " Reliability", " Verification", " Abstraction", " assertion", " behavioral subtyping", " frame conditions", " interface specification language", " invariant", " JML", " postcondition", " precondition", " separation logic", " Spec#", " SPARK"], "paper_abstract": "Behavioral interface specification languages provide formal code-level annotations, such as preconditions, postconditions, invariants, and assertions that allow programmers to express the intended behavior of program modules. Such specifications are useful for precisely documenting program behavior, for guiding implementation, and for facilitating agreement between teams of programmers in modular development of software. When used in conjunction with automated analysis and program verification tools, such specifications can support detection of common code vulnerabilities, capture of light-weight application-specific semantic properties, generation of test cases and test oracles, and full formal program verification. This article surveys behavioral interface specification languages with a focus toward automatic program verification and with a view towards aiding the Verified Software Initiative-a fifteen-year, cooperative, international project directed at the scientific challenges of large-scale software verification.", "paper_title": "Behavioral Interface Specification Languages", "paper_id": "WOS:000305584100007"}