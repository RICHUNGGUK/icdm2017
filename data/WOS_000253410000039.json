{"auto_keywords": [{"score": 0.025290005605527396, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "conscientious_software"}, {"score": 0.004728624975677976, "phrase": "recently_proposed_paradigm"}, {"score": 0.004425072111844721, "phrase": "allopoietic_part"}, {"score": 0.004319566932528865, "phrase": "application_functionality"}, {"score": 0.0037825134619339537, "phrase": "environmental_changes"}, {"score": 0.0037371212381934853, "phrase": "practical_application"}, {"score": 0.0036700484729006136, "phrase": "conscientious_software_paradigm"}, {"score": 0.0034759420565135253, "phrase": "suitable_autopoietic_programming_languages"}, {"score": 0.0033725614574134396, "phrase": "concrete_architectures"}, {"score": 0.0032920678776655783, "phrase": "autopoietic_and_allopoietic_parts"}, {"score": 0.003117890043128058, "phrase": "second_challenge"}, {"score": 0.0027463775689957255, "phrase": "new_and_existing_applications"}, {"score": 0.002600995957987461, "phrase": "architectural_design"}, {"score": 0.0025235718883452585, "phrase": "autopoietic_simulator"}, {"score": 0.002209319719984651, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "conscientious_java_application"}], "paper_keywords": ["aspect-oriented programming", " conscientious software"], "paper_abstract": "Conscientious software is a recently proposed paradigm for developing reliable, self-sustaining software systems. Conscientious software systems consist of an allopoietic part, which encapsulates application functionality, and an autopoietic part that is responsible for keeping the system alive by monitoring the application and adapting it to environmental changes. Practical application of the conscientious software paradigm requires solutions to two open problems: The design of suitable autopoietic programming languages and the proposal of concrete architectures for combining the autopoietic and allopoietic parts. In this paper, we tackle the second challenge, and propose a concrete, aspect-oriented architecture for realizing conscientious software. Here, we introduce epi-aspects, a construct for upgrading new and existing applications into conscientious software. This paper provides the architectural design of epi-aspects, an autopoietic simulator, and a concrete framework for developing epi-aspects in Java. The framework and the simulator are used to conduct a case study in which we develop and test a conscientious Java application.", "paper_title": "Epi-aspects: Aspect-oriented conscientious software", "paper_id": "WOS:000253410000039"}