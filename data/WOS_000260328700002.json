{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "new_trait-based_stream_library"}, {"score": 0.004620093797504386, "phrase": "composition_mechanism"}, {"score": 0.004494570360108983, "phrase": "pure_units"}, {"score": 0.004214729542986473, "phrase": "trait_composition_mechanism"}, {"score": 0.004119049028319832, "phrase": "multiple_or_mixin_inheritance"}, {"score": 0.004007083686875716, "phrase": "full_control"}, {"score": 0.0039522429946090174, "phrase": "trait_composition"}, {"score": 0.003689053436223376, "phrase": "code_reuse"}, {"score": 0.0034751259234824913, "phrase": "possible_composition_problems"}, {"score": 0.003334309053314909, "phrase": "single_inheritance"}, {"score": 0.0030978690667758497, "phrase": "nile"}, {"score": 0.002711109302199029, "phrase": "composition_mechanisms"}, {"score": 0.002686284749214443, "phrase": "nile's_core"}, {"score": 0.0026252106881752067, "phrase": "compact_collection"}, {"score": 0.0024842242921857705, "phrase": "backward-compatible_new_stream_library"}, {"score": 0.0023400004981080818, "phrase": "squeak_equivalent"}, {"score": 0.002183938718432764, "phrase": "concrete_illustration"}, {"score": 0.002163930783583212, "phrase": "trait_reuse_capability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Object-oriented programming Inheritance", " Refactoring", " Traits", " Code reuse", " Smalltalk"], "paper_abstract": "Recent years saw the development of a composition mechanism called traits. Traits are pure units of behavior that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. To evaluate the expressiveness of traits, some hierarchies were refactored. showing code reuse. However, such large refactorings, while valuable, may not exhibit all possible composition problems, since the hierarchies were previously expressed using single inheritance and following certain patterns. This paper presents our work on designing and implementing a new trait-based stream library named Nile. It evaluates how far traits enable reuse, what problems can be encountered when building a library using traits from scratch and compares the traits solution to alternative composition mechanisms. Nile's core allows the definition of compact collection and file streaming libraries as well as the implementation of a backward-compatible new stream library. Nile method size shows a reduction of 40% compared to the Squeak equivalent. The possibility to reuse the same set of traits to implement two distinct libraries is a concrete illustration of trait reuse capability. (c) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "Traits at work: The design of a new trait-based stream library", "paper_id": "WOS:000260328700002"}