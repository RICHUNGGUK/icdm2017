{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.003936560022538905, "phrase": "oo_programming"}, {"score": 0.003621588555525458, "phrase": "extended_language"}, {"score": 0.0035468507553681034, "phrase": "program_preprocessing"}, {"score": 0.0033317342432676385, "phrase": "extended_programs"}, {"score": 0.003285725064532174, "phrase": "ordinary_java_programs"}, {"score": 0.0028392545452904762, "phrase": "class_hierarchy"}, {"score": 0.0026118503041971976, "phrase": "formal_and_actual_parameter"}, {"score": 0.0021049977753042253, "phrase": "overloaded_methods"}], "paper_keywords": [""], "paper_abstract": "M parameters extend Java by allowing methods to have methods as parameters. [8] furnishes a semantics of m parameters and applications in OO programming. In this paper, we present an implementation of the extended language based on program preprocessing. We also discuss the integration of the extended programs with ordinary Java programs, and hence Java API. Furthermore, mc_parameters are defined: they are a variant of m parameters for which the class hierarchy of the method passed as parameter must be provided in the formal and actual parameter. Semantics for mc_parameters is given but, in this case, an implementation with callbacks [20] is proposed. Eventually, we discuss how mc_parameters deal with overloaded methods.", "paper_title": "Java Omega: The Structures and the Implementation of a Preprocessor for Java with m_ and mc_parameters", "paper_id": "WOS:000267901600005"}