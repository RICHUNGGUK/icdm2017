{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_programs"}, {"score": 0.004424268136268051, "phrase": "program_design"}, {"score": 0.004024863549087511, "phrase": "concurrent_program_design_goals"}, {"score": 0.003984968827278219, "phrase": "modular_program_design_goals"}, {"score": 0.00392586404888927, "phrase": "main_idea"}, {"score": 0.003330620799215608, "phrase": "gof"}, {"score": 0.0031686717525002935, "phrase": "object-oriented_software"}, {"score": 0.003014576010931602, "phrase": "design_space"}, {"score": 0.002701361707441567, "phrase": "execution_space"}, {"score": 0.0025827837420330816, "phrase": "potentially_available_concurrency"}, {"score": 0.0025571463140118805, "phrase": "software_systems"}, {"score": 0.0022913497040895586, "phrase": "interesting_preliminary_result"}, {"score": 0.002158179521369965, "phrase": "concurrency_and_synchronization_concerns"}], "paper_keywords": ["Design", " Human Factors", " Languages", " Modularity", " concurrency", " ease of program design", " design patterns", " synergistic decoupling"], "paper_abstract": "General purpose object-oriented programs typically aren't embarrassingly parallel. For these applications, finding enough concurrency remains a challenge in program design. To address this challenge, in the P (a) over tilde(n) over bar ini project we are looking at reconciling concurrent program design goals with modular program design goals. The main idea is that if programmers improve the modularity of their programs they should get concurrency for free. In this work we describe one of our directions to reconcile these two goals by enhancing Gang-of-Four (GOF) object-oriented design patterns. GOF patterns are commonly used to improve the modularity of object-oriented software. These patterns describe strategies to decouple components in design space and specify how these components should interact. Our hypothesis is that if these patterns are enhanced to also decouple components in execution space applying them will concomitantly improve the design and potentially available concurrency in software systems. To evaluate our hypothesis we have studied all 23 GOF patterns. For 18 patterns out of 23, our hypothesis has held true. Another interesting preliminary result reported here is that for 17 out of these 18 studied patterns, concurrency and synchronization concerns were completely encapsulated in our concurrent design pattern framework.", "paper_title": "Concurrency by Modularity: Design Patterns, a Case in Point", "paper_id": "WOS:000286595800048"}