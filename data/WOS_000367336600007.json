{"auto_keywords": [{"score": 0.04851515525749308, "phrase": "lambda_pi-calculus"}, {"score": 0.04826746166471345, "phrase": "modulo"}, {"score": 0.02322495154729563, "phrase": "modulo_beta"}, {"score": 0.008383367721616125, "phrase": "subject_reduction"}, {"score": 0.007308064011582271, "phrase": "rewrite_rules"}, {"score": 0.004736045157669388, "phrase": "lambda_pi-calculus_modulo"}, {"score": 0.00443308765153716, "phrase": "dependent_types"}, {"score": 0.00428892403807229, "phrase": "user-defined_rewrite_rules"}, {"score": 0.004172360444377281, "phrase": "expressive_logical_framework"}, {"score": 0.003970439654470374, "phrase": "type_systems"}, {"score": 0.0039053194919285725, "phrase": "shallow_way"}, {"score": 0.0038624981944755813, "phrase": "basic_properties"}, {"score": 0.0033837135367113004, "phrase": "rewrite_system"}, {"score": 0.002996992362027833, "phrase": "non_confluence"}, {"score": 0.002286781334850213, "phrase": "lambda_pi-calculusmodulo"}, {"score": 0.002261666793030715, "phrase": "higher-order_rewrite_system"}, {"score": 0.0021049977753042253, "phrase": "confluence_results"}], "paper_keywords": [""], "paper_abstract": "The lambda Pi-calculus Modulo is a variant of the lambda-calculus with dependent types where beta-conversion is extended with user-defined rewrite rules. It is an expressive logical framework and has been used to encode logics and type systems in a shallow way. Basic properties such as subject reduction or uniqueness of types do not hold in general in the lambda Pi-calculus Modulo. However, they hold if the rewrite system generated by the rewrite rules together with beta-reduction is confluent. But this is too restrictive. To handle the case where non confluence comes from the interference between the beta-reduction and rewrite rules with lambda-abstraction on their left-hand side, we introduce a notion of rewriting modulo beta for the lambda Pi-calculus Modulo. We prove that confluence of rewriting modulo beta is enough to ensure subject reduction and uniqueness of types. We achieve our goal by encoding the lambda Pi-calculusModulo into Higher-Order Rewrite System (HRS). As a consequence, we also make the confluence results for HRSs available for the lambda Pi-calculus Modulo.", "paper_title": "Rewriting Modulo beta in the lambda Pi-Calculus Modulo", "paper_id": "WOS:000367336600007"}