{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "approximate_string_matching"}, {"score": 0.04472882712454684, "phrase": "metric_space"}, {"score": 0.004721162131188487, "phrase": "radically_new_indexing_approach"}, {"score": 0.0045748683993128425, "phrase": "metric_properties"}, {"score": 0.004521179256835894, "phrase": "edit_distance"}, {"score": 0.004129873531628877, "phrase": "suffix_tree"}, {"score": 0.0040176151419992956, "phrase": "approximate_query"}, {"score": 0.003939296259436904, "phrase": "proximity_query"}, {"score": 0.003787191644093659, "phrase": "occ_occurrences"}, {"score": 0.003626626504149897, "phrase": "r_differences"}, {"score": 0.003405109584265324, "phrase": "average_time"}, {"score": 0.0027415611720084006, "phrase": "construction_time"}, {"score": 0.0025038930574283174, "phrase": "first_index"}, {"score": 0.0024842242921857705, "phrase": "average_search_time_polynomial"}, {"score": 0.002323142666222693, "phrase": "previous_methods"}, {"score": 0.0021724831184390192, "phrase": "simpler_scheme"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["indexed approximate string matching", " metric spaces", " metric indexes", " suffix trees", " suffix arrays"], "paper_abstract": "We present a radically new indexing approach for approximate string matching. The scheme uses the metric properties of the edit distance and can be applied to any other metric between strings. We build a metric space where the sites are the nodes of the suffix tree of the text, and the approximate query is seen as a proximity query on that metric space. This permits us finding the occ occurrences of a pattern of length in, permitting up to r differences, in a text of length n over an alphabet of size a, in average time O(m(1+epsilon) + occ) for any epsilon > 0, if r = o(m/log, m) and m > ((1 + epsilon)/epsilon)log(sigma) n. The index works well up to r < (3 - root 2)m/log(sigma) m, where it achieves its maximum average search complexity O(m(1+root 2+epsilon) + occ). The construction time of the index is O(m(1+root 2+epsilon) n log n) and its space is O(m(1+root 2+epsilon) n). This is the first index achieving average search time polynomial in in and independent of n, for r = O(m /log(sigma) m). Previous methods achieve this complexity only for r = O(m/log(sigma) m). We also present a simpler scheme needing O(n) space. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "A metric index for approximate string matching", "paper_id": "WOS:000235826900020"}