{"auto_keywords": [{"score": 0.04278076566247289, "phrase": "jop"}, {"score": 0.015719707847180738, "phrase": "java_processor"}, {"score": 0.014306765401355826, "phrase": "time-predictable_java_processor"}, {"score": 0.013943639497802451, "phrase": "wcet_analysis"}, {"score": 0.010870509968410831, "phrase": "wcet_analysis_tool"}, {"score": 0.009230867294098432, "phrase": "method_cache"}, {"score": 0.00457138247462329, "phrase": "worst-case_execution_time"}, {"score": 0.004492950096237056, "phrase": "analyzable_java_system"}, {"score": 0.004228839109569368, "phrase": "java_bytecode_level"}, {"score": 0.004014800383343256, "phrase": "time-predictable_execution"}, {"score": 0.003980191398041843, "phrase": "real-time_tasks"}, {"score": 0.0037786899855446, "phrase": "java_virtual_machine"}, {"score": 0.003697760799674494, "phrase": "cycle_accuracy"}, {"score": 0.003665874747419775, "phrase": "jop."}, {"score": 0.003571850980647622, "phrase": "low-level_wcet_analysis"}, {"score": 0.003450213580299164, "phrase": "whole_java_methods"}, {"score": 0.003361702510958392, "phrase": "cache_analysis"}, {"score": 0.003261295948815592, "phrase": "integer_linear_programming"}, {"score": 0.003177615880037735, "phrase": "low-level_analysis"}, {"score": 0.0031365819432206004, "phrase": "bytecode_level"}, {"score": 0.00308269056870936, "phrase": "method_cache_analysis"}, {"score": 0.0030428787018636147, "phrase": "integrated_data-flow_analysis"}, {"score": 0.0030166226457616616, "phrase": "receiver-type_analysis"}, {"score": 0.002990592465417758, "phrase": "dynamic_method_dispatches"}, {"score": 0.0029647862293448895, "phrase": "loop-bound_analysis"}, {"score": 0.0029012378668247397, "phrase": "model_checking_approach"}, {"score": 0.0026146109167103655, "phrase": "standard_wcet_benchmarks"}, {"score": 0.002558550798698463, "phrase": "wcet"}, {"score": 0.0024288443150616056, "phrase": "tight_wcet_bounds"}, {"score": 0.0022857899334246946, "phrase": "static_approach"}, {"score": 0.0022464835515931592, "phrase": "static_approximation"}, {"score": 0.002169882514603539, "phrase": "practical_purposes"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["worst-case execution time", " Java processor", " real-time system"], "paper_abstract": "In this paper, we propose a solution for a worst-case execution time (WCET) analyzable Java system: a combination of a time-predictable Java processor and a tool that performs WCET analysis at Java bytecode level. We present a Java processor, called JOP, designed for time-predictable execution of real-time tasks. The execution time of bytecodes, the instructions of the Java virtual machine, is known to cycle accuracy for JOP. Therefore, JOP simplifies the low-level WCET analysis. A method cache, which fills whole Java methods into the cache, simplifies cache analysis. The WCET analysis tool is based on integer linear programming. The tool performs the low-level analysis at the bytecode level and integrates the method cache analysis. An integrated data-flow analysis performs receiver-type analysis for dynamic method dispatches and loop-bound analysis. Furthermore, a model checking approach to WCET analysis is presented where the method cache can be exactly simulated. The combination of the time-predictable Java processor and the WCET analysis tool is evaluated with standard WCET benchmarks and three real-time applications. The WCET friendly architecture of JOP and the integrated method cache analysis yield tight WCET bounds. Comparing the exact, but expensive, model checking-based analysis of the method cache with the static approach demonstrates that the static approximation of the method cache is sufficiently tight for practical purposes. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Worst-case execution time analysis for a Java processor", "paper_id": "WOS:000277352100002"}