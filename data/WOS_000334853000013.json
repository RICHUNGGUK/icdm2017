{"auto_keywords": [{"score": 0.047916548037392745, "phrase": "stream_compaction"}, {"score": 0.00481495049065317, "phrase": "-kernel_stream_compaction"}, {"score": 0.004692980391580608, "phrase": "multi-kernel_data_visualization"}, {"score": 0.004645057834614705, "phrase": "general-purpose_gpus"}, {"score": 0.004191829338769843, "phrase": "input_stream"}, {"score": 0.0040438338011467845, "phrase": "compacted_stream"}, {"score": 0.003961613484271729, "phrase": "mixed_input_stream"}, {"score": 0.0038217146888983576, "phrase": "load_balancing"}, {"score": 0.003782655283668953, "phrase": "memory_footprint"}, {"score": 0.0037057255600764475, "phrase": "numerous_applications"}, {"score": 0.0036490529923833884, "phrase": "wide_range"}, {"score": 0.003378385493203297, "phrase": "computer_graphics"}, {"score": 0.0032256881625734777, "phrase": "-kernel_stream_compaction_method"}, {"score": 0.0030798711656591948, "phrase": "operating_kernel"}, {"score": 0.0030017207229983385, "phrase": "conventional_parallel_compaction_methods"}, {"score": 0.0028659990472580154, "phrase": "prefix_sum_kernel"}, {"score": 0.0028076592725295646, "phrase": "scatter_kernel"}, {"score": 0.0026261108615242557, "phrase": "volumetric_data"}, {"score": 0.002468938912850425, "phrase": "standard_out-of-kernel_thrust"}, {"score": 0.0023451553255837317, "phrase": "real-world_application"}, {"score": 0.0022973933270056743, "phrase": "data_visualization"}, {"score": 0.0022275639370573264, "phrase": "novel_multi-kernel_ray-tracing_pipeline"}, {"score": 0.0021049977753042253, "phrase": "conventional_single-kernel_approach"}], "paper_keywords": ["stream compaction", " parallel computing", " GPU", " ray-tracing", " isosurface", " volume visualization"], "paper_abstract": "Stream compaction is an important parallel computing primitive that produces a reduced (compacted) output stream consisting of only valid elements from an input stream containing both invalid and valid elements. Computing on this compacted stream rather than the mixed input stream leads to improvements in performance, load balancing and memory footprint. Stream compaction has numerous applications in a wide range of domains: e. g. deferred shading, isosurface extraction and surface voxelization in computer graphics and visualization. We present a novel In-Kernel stream compaction method, where compaction is completed before leaving an operating kernel. This contrasts with conventional parallel compaction methods that require leaving the kernel and running a prefix sum kernel followed by a scatter kernel. We apply our compaction methods to ray-tracing-based visualization of volumetric data. We demonstrate that the proposed In-Kernel compaction outperforms the standard out-of-kernel Thrust parallel-scan method for performing stream compaction in this real-world application. For the data visualization, we also propose a novel multi-kernel ray-tracing pipeline for increased thread coherency and show that it outperforms a conventional single-kernel approach.", "paper_title": "InK-Compact: In-Kernel Stream Compaction and Its Application to Multi-Kernel Data Visualization on General-Purpose GPUs", "paper_id": "WOS:000334853000013"}