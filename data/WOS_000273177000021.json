{"auto_keywords": [{"score": 0.03897200869072899, "phrase": "model_checking"}, {"score": 0.035578525542312466, "phrase": "property-based_slicing"}, {"score": 0.00481495049065317, "phrase": "slicing_for_agent_verification"}, {"score": 0.004773904938276846, "phrase": "programming_languages"}, {"score": 0.0046928556063004214, "phrase": "multi-agent_systems"}, {"score": 0.004632968695963776, "phrase": "new_programming_paradigm"}, {"score": 0.004554673903837217, "phrase": "popularity"}, {"score": 0.00443878620915958, "phrase": "multi-agent_programming_languages"}, {"score": 0.004363401436068803, "phrase": "increasingly_sophisticated_applications"}, {"score": 0.004289291421348352, "phrase": "critical_areas"}, {"score": 0.003971006689166329, "phrase": "model-checking_techniques"}, {"score": 0.0036605323485683983, "phrase": "verification_technique"}, {"score": 0.003629291866667764, "phrase": "large_software_systems"}, {"score": 0.003232653376857698, "phrase": "agentspeak_multi-agent_systems"}, {"score": 0.0031640918630415566, "phrase": "literal_dependence_graphs"}, {"score": 0.0030837288356760973, "phrase": "logic_programs"}, {"score": 0.0030183163057929687, "phrase": "program_slice"}, {"score": 0.0028916124463906983, "phrase": "original_program"}, {"score": 0.002854645802851, "phrase": "slicing_criterion"}, {"score": 0.0027583557819362034, "phrase": "ltl_operators"}, {"score": 0.002586457551025025, "phrase": "slicing_algorithm"}, {"score": 0.0025099367332615794, "phrase": "agentspeak_program"}, {"score": 0.002477837342313456, "phrase": "autonomous_planetary_exploration_rovers"}, {"score": 0.0023839754995935184, "phrase": "model-checking_state_space"}, {"score": 0.0023134312557290043, "phrase": "significant_reduction"}, {"score": 0.002283839204519042, "phrase": "state_space"}, {"score": 0.002150659690967412, "phrase": "important_impact"}, {"score": 0.0021231452870210965, "phrase": "future_practicality"}, {"score": 0.0021049977753042253, "phrase": "agent_verification"}], "paper_keywords": ["Program verification", " multi-agent programming languages", " property-based slicing", " model checking", " multi-agent systems"], "paper_abstract": "Programming languages designed specifically for multi-agent systems represent a new programming paradigm that has gained Popularity over recent years, with some multi-agent programming languages being used in increasingly sophisticated applications, often in critical areas. To support this, we have developed a set of tools to allow the use of model-checking techniques in the verification of systems directly implemented in one particular language called AgentSpeak. The success of model checking as a verification technique for large software systems is dependent partly on its use in combination with various state-space reduction techniques. an important example of which is property-based slicing. This article introduces an algorithm for property-based slicing of AgentSpeak multi-agent systems. The algorithm uses literal dependence graphs. as developed for slicing logic programs, and generates a program slice whose state space is stuttering-equivalent to that of the original program; the slicing criterion is a property in a logic with LTL operators and (shallow) BDI modalities. In addition to showing correctness and characterizing the complexity of the slicing algorithm, we apply it to an AgentSpeak program based on autonomous planetary exploration rovers, and we discuss how slicing reduces the model-checking state space. The experiment results show a significant reduction in the state space required for model checking that agent. thus indicating that this approach can have an important impact on the future practicality of agent verification.", "paper_title": "Property-based Slicing for Agent Verification", "paper_id": "WOS:000273177000021"}