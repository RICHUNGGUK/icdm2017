{"auto_keywords": [{"score": 0.03736108349380211, "phrase": "program_data_locality"}, {"score": 0.00481495049065317, "phrase": "reuse_distance_distribution"}, {"score": 0.004662913362513954, "phrase": "ever-increasing_gap"}, {"score": 0.004035777314816881, "phrase": "primary_bottlenecks"}, {"score": 0.003971502222405927, "phrase": "computer_systems"}, {"score": 0.003908246778916674, "phrase": "modern_architecture_systems"}, {"score": 0.0033822643082593285, "phrase": "platform_independent_data-layout_optimization_framework"}, {"score": 0.0030962064913500164, "phrase": "variable_relation_model"}, {"score": 0.003022465992278672, "phrase": "variables'_reuse_distance_distribution"}, {"score": 0.0024524733595572084, "phrase": "dynamic_array"}, {"score": 0.002432834929068545, "phrase": "regrouping_method"}, {"score": 0.0023940274498526213, "phrase": "group_dynamic_arrays"}, {"score": 0.002209060366991921, "phrase": "data-layout_optimization_framework"}, {"score": 0.0021049977753042253, "phrase": "program_performance"}], "paper_keywords": [""], "paper_abstract": "As the ever-increasing gap between the speed of processor and the speed of memory has become the cause of one of primary bottlenecks of computer systems, modern architecture systems use cache to solve this problem, whose utility heavily depends on program data locality. This paper introduces a platform independent data-layout optimization framework to improve program data locality. This framework uses a variable relation model based on variables' reuse distance distribution to quantitate the relation of variables and accordingly assigns variables which are often accessed together in one group. At the same time this framework introduces a dynamic array regrouping method to group dynamic arrays assigned in a group. Experiments show that this data-layout optimization framework can effectively improve program data locality and program performance.", "paper_title": "Data-layout optimization using reuse distance distribution", "paper_id": "WOS:000240081000086"}