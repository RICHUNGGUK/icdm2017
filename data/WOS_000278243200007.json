{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "concept_maps"}, {"score": 0.004645959941491617, "phrase": "library_composition"}, {"score": 0.004462892860919036, "phrase": "adaptation_mechanisms"}, {"score": 0.004344855841195913, "phrase": "non-intrusive_adaptation_mechanisms"}, {"score": 0.004248869786808024, "phrase": "data_structures"}, {"score": 0.00419229472352669, "phrase": "library's_api._development"}, {"score": 0.004081385289516914, "phrase": "widely_practiced_method"}, {"score": 0.003868257410961701, "phrase": "source_code"}, {"score": 0.0038338299812503, "phrase": "non-modifiable_binary_libraries"}, {"score": 0.0036335821512795026, "phrase": "next_version"}, {"score": 0.00341309513558946, "phrase": "improved_ability"}, {"score": 0.0031916366459252992, "phrase": "different_libraries"}, {"score": 0.0031350397225314262, "phrase": "best_practices"}, {"score": 0.0030248298759040695, "phrase": "gui_widgets"}, {"score": 0.002957919048133256, "phrase": "differing_apis"}, {"score": 0.0028795712616923462, "phrase": "generic_layout_engine"}, {"score": 0.0027535633837592597, "phrase": "run-time_concept_idiom"}, {"score": 0.0024953686545818587, "phrase": "image_processing_library"}, {"score": 0.0024620842899061614, "phrase": "graph_algorithm_library"}, {"score": 0.0023861329619604666, "phrase": "transparent_adaptation_layer"}, {"score": 0.0023437863565921053, "phrase": "efficient_application"}, {"score": 0.002322895056238477, "phrase": "graph_algorithms"}, {"score": 0.002291905937251069, "phrase": "image_processing_domain"}, {"score": 0.002241171326888997, "phrase": "adaptation_layer"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["C plus", " Concepts", " Software libraries", " Component adaptation", " Generic programming", " Polymorphism"], "paper_abstract": "This paper explores the definition, applications, and limitations of concepts and concept maps in C++, with a focus on library composition. We also compare and contrast concepts to adaptation mechanisms in other languages. Efficient, non-intrusive adaptation mechanisms are essential when adapting data structures to a library's API. Development with reusable components is a widely practiced method of building software. Components vary in form, ranging from source code to non-modifiable binary libraries. The Concepts language features, slated to appear in the next version of C++, have been designed with such compositions in mind, promising an improved ability to create generic, non-intrusive, efficient, and identity-preserving adapters. We report on two cases of data structure adaptation between different libraries, and illustrate best practices and idioms. First, we adapt GUI widgets from several libraries, with differing APIs, for use with a generic layout engine. We further develop this example to describe the run-time concept idiom, extending the applicability of concepts to domains where run-time polymorphism is required. Second, we compose an image processing library and a graph algorithm library, by making use of a transparent adaptation layer, enabling the efficient application of graph algorithms to the image processing domain. We use the adaptation layer to realize a few key algorithms, and report little or no performance degradation. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Programming with C plus plus concepts", "paper_id": "WOS:000278243200007"}