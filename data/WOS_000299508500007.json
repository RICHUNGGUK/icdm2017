{"auto_keywords": [{"score": 0.030741209193052274, "phrase": "ctf"}, {"score": 0.00481495049065317, "phrase": "execution_traces"}, {"score": 0.004719473826242326, "phrase": "behavioural_aspects"}, {"score": 0.0046491050101721545, "phrase": "software_system"}, {"score": 0.004511485198940203, "phrase": "efficient_tool_support"}, {"score": 0.004143196873246147, "phrase": "analysing_execution_traces"}, {"score": 0.003980400251874277, "phrase": "different_formats"}, {"score": 0.0036007478932719417, "phrase": "better_synergies"}, {"score": 0.0035648266669315943, "phrase": "trace_analysis_tools"}, {"score": 0.003407549468745519, "phrase": "standard_format"}, {"score": 0.0032085525502105836, "phrase": "graph-based_format"}, {"score": 0.0027741761880779535, "phrase": "programming_languages"}, {"score": 0.002719055901632759, "phrase": "object-oriented_and_procedural_ones"}, {"score": 0.002560162916190598, "phrase": "vast_size"}, {"score": 0.0022696277881969896, "phrase": "acyclic_directed_graphs"}, {"score": 0.00223570488212345, "phrase": "similar_subtrees"}, {"score": 0.0021262430665847797, "phrase": "seat"}, {"score": 0.0021049977753042253, "phrase": "software_exploration_and_analysis_tool"}], "paper_keywords": ["Metamodelling", " Exchange format", " Execution traces", " Dynamic analysis"], "paper_abstract": "Understanding the behavioural aspects of a software system can be made easier if efficient tool support is provided. Lately, there has been an increase in the number of tools for analysing execution traces. These tools, however, have different formats for representing execution traces, which hinders interoperability and limits reuse and sharing of data. To allow for better synergies among trace analysis tools, it would be beneficial to develop a standard format for exchanging traces. In this paper, we present a graph-based format, called compact trace format (CTF), which we hope will lead the way towards such a standard. CTF can model traces generated from a variety of programming languages, including both object-oriented and procedural ones. CTF is built with scalability in mind to overcome the vast size of most interesting traces. Indeed, the design of CTF is based on the idea that call trees can be transformed into more compact ordered acyclic directed graphs by representing similar subtrees only once. CTF is also supported by our trace analysis tool SEAT (Software Exploration and Analysis Tool).", "paper_title": "A metamodel for the compact but lossless exchange of execution traces", "paper_id": "WOS:000299508500007"}