{"auto_keywords": [{"score": 0.04279173842399326, "phrase": "mesh_edit_distance"}, {"score": 0.029312288193051882, "phrase": "editing_operations"}, {"score": 0.00481495049065317, "phrase": "polygonal_modeling"}, {"score": 0.004680624753255133, "phrase": "meshgit"}, {"score": 0.004448169552315403, "phrase": "polygonal_meshes"}, {"score": 0.004348580182733617, "phrase": "subdivision_modeling_workflows"}, {"score": 0.004251210982670317, "phrase": "version_control"}, {"score": 0.004203343568960231, "phrase": "text_editing"}, {"score": 0.0037320255482878365, "phrase": "minimum_cost"}, {"score": 0.0033893426032054366, "phrase": "iterative_greedy_algorithm"}, {"score": 0.0032026066791743866, "phrase": "model_complexity"}, {"score": 0.0031308163228919773, "phrase": "practical_solution"}, {"score": 0.003009022147559257, "phrase": "mesh_correspondence"}, {"score": 0.0029249294679606656, "phrase": "mesh_editing_operations"}, {"score": 0.002859345731792013, "phrase": "first_mesh"}, {"score": 0.0026411384812121503, "phrase": "meaningful_visual_difference"}, {"score": 0.002305014991156598, "phrase": "conflicting_operations"}, {"score": 0.002253299769886694, "phrase": "non-conflicting_edits"}, {"score": 0.0021049977753042253, "phrase": "conflicting_edits"}], "paper_keywords": ["polygonal modeling", " geometry", " diff and merge", " visualization"], "paper_abstract": "This paper presents MeshGit, a practical algorithm for diffing and merging polygonal meshes typically used in subdivision modeling workflows. Inspired by version control for text editing, we introduce the mesh edit distance as a measure of the dissimilarity between meshes. This distance is defined as the minimum cost of matching the vertices and faces of one mesh to those of another. We propose an iterative greedy algorithm to approximate the mesh edit distance, which scales well with model complexity, providing a practical solution to our problem. We translate the mesh correspondence into a set of mesh editing operations that transforms the first mesh into the second. The editing operations can be displayed directly to provide a meaningful visual difference between meshes. For merging, we compute the difference between two versions and their common ancestor, as sets of editing operations. We robustly detect conflicting operations, automatically apply non-conflicting edits, and allow the user to choose how to merge the conflicting edits. We evaluate MeshGit by diffing and merging a variety of meshes and find it to work well for all.", "paper_title": "MeshGit: Diffing and Merging Meshes for Polygonal Modeling", "paper_id": "WOS:000321840100004"}