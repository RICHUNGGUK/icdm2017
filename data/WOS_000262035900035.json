{"auto_keywords": [{"score": 0.033476785207093754, "phrase": "partial_programming"}, {"score": 0.00481495049065317, "phrase": "adaptive_programming_integrating_reinforcement_learning"}, {"score": 0.004743594110762319, "phrase": "programming_language"}, {"score": 0.004696608876994947, "phrase": "current_programming_languages"}, {"score": 0.004650086856905758, "phrase": "software_engineering_paradigms"}, {"score": 0.004513255056769647, "phrase": "intelligent_multi-agent_systems"}, {"score": 0.004424268136268051, "phrase": "interactive_games"}, {"score": 0.004188459638572375, "phrase": "increasingly_complex_behavior"}, {"score": 0.004105850229681625, "phrase": "dynamic_environments"}, {"score": 0.0040449598280454645, "phrase": "promising_solution"}, {"score": 0.0039651694106206245, "phrase": "adaptive_systems"}, {"score": 0.0033639840192975835, "phrase": "new_programming_language"}, {"score": 0.0032164136388931805, "phrase": "adaptive_programming_primitives"}, {"score": 0.0029111767710750117, "phrase": "code-writing_time"}, {"score": 0.0028536871476905847, "phrase": "run-time_system"}, {"score": 0.0026745503978347143, "phrase": "software_agents"}, {"score": 0.0025827837420330816, "phrase": "existing_languages"}, {"score": 0.0025191653363555193, "phrase": "language-level_support"}, {"score": 0.0023727863021828547, "phrase": "example_agent"}], "paper_keywords": ["Algorithms", " Languages", " Design", " Adaptive Programming", " Reinforcement Learning", " Partial Programming", " Object-Oriented Programming"], "paper_abstract": "Current programming languages and software engineering paradigms are proving insufficient for building intelligent multi-agent systems-such as interactive games and narratives-where developers are called upon to write increasingly complex behavior for agents in dynamic environments. A promising solution is to build adaptive systems; that is, to develop software written specifically to adapt to its environment by changing its behavior in response to what it observes in the world. In this paper we describe a new programming language, An Adaptive Behavior Language (A(2)BL), that implements adaptive programming primitives to support partial programming, a paradigm in which a programmer need only specify the details of behavior known at code-writing time, leaving the run-time system to learn the rest. Partial programming enables programmers to more easily encode software agents that are difficult to write in existing languages that do not offer language-level support for adaptivity. We motivate the use of partial programming with an example agent coded in a cutting-edge, but non-adaptive agent programming language (ABL), and show how A(2)BL can encode the same agent much more naturally.", "paper_title": "Towards Adaptive Programming Integrating Reinforcement Learning into a Programming Language", "paper_id": "WOS:000262035900035"}