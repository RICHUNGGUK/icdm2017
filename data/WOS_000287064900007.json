{"auto_keywords": [{"score": 0.04878455414226702, "phrase": "flash_memory"}, {"score": 0.015719873526977523, "phrase": "ami"}, {"score": 0.012798942289270225, "phrase": "system_performance"}, {"score": 0.010619825325146902, "phrase": "garbage_collection"}, {"score": 0.0101746110354084, "phrase": "data_blocks"}, {"score": 0.009785927816643232, "phrase": "space_utilization"}, {"score": 0.0047587234712024775, "phrase": "advanced_endurance_management_technique"}, {"score": 0.004721602309430702, "phrase": "flash_memory_storage_systems"}, {"score": 0.004648222388468414, "phrase": "small_size"}, {"score": 0.004365881789903319, "phrase": "storage_devices"}, {"score": 0.004348813532606792, "phrase": "fir_consumer_electronics"}, {"score": 0.0043148760739240575, "phrase": "mobile_computers"}, {"score": 0.004281202319048493, "phrase": "wireless_devices"}, {"score": 0.00424779023663186, "phrase": "embedded_systems"}, {"score": 0.0037915057447460133, "phrase": "erase_cycles"}, {"score": 0.003688892770976908, "phrase": "single_worn-out_block"}, {"score": 0.0036172962914449826, "phrase": "entire_flash_memory_device"}, {"score": 0.0034646205853140558, "phrase": "system_support"}, {"score": 0.0034375594065869032, "phrase": "erasure_management"}, {"score": 0.0032924448113309797, "phrase": "novel_idea"}, {"score": 0.0032667240408191015, "phrase": "system_software"}, {"score": 0.0031782684007251403, "phrase": "allocation_of_memory_intellectually"}, {"score": 0.0031658283119347396, "phrase": "fir_nand_flash_memories"}, {"score": 0.0030321497870310077, "phrase": "access_frequencies"}, {"score": 0.0029500270981001058, "phrase": "separate_limited_number"}, {"score": 0.002926973459215349, "phrase": "log_blocks"}, {"score": 0.002792375587031108, "phrase": "proposed_new_system_architecture"}, {"score": 0.0026954938318408464, "phrase": "optimal_number"}, {"score": 0.0026535183547537655, "phrase": "minimum_overhead"}, {"score": 0.0026327757304477665, "phrase": "data_migration"}, {"score": 0.0026019646284747024, "phrase": "hybrid_wear-leveling_approach"}, {"score": 0.002551409948440577, "phrase": "evenly_wear-down_flash_memory"}, {"score": 0.0024920359789965783, "phrase": "system_life_lime"}, {"score": 0.0021049977753042253, "phrase": "efficient_flash_bandwidth_utilization"}], "paper_keywords": ["Consumer electronics", " embedded systems", " data organization", " endurance management", " memory management", " and system performance"], "paper_abstract": "Flash memory is small size, lightweight, shock-resistant, nonvolatile, and consumes little power. Flash memory therefore shows promise for use in storage devices fir consumer electronics, mobile computers, wireless devices and embedded systems. However, flash memory cannot be overwritten unless erased in advance. Erase operations are slow that usually decrease system performance and consume power. The number of erase cycles is also limited, and a single worn-out block affects the usefulness of entire flash memory device. Therefore, for power conservation, better system performance and longer flash memory lifetime, system support for erasure management is necessary. In this paper, we propose a novel idea of system software for garbage collection and wear-leveling called Allocation of Memory Intellectually fir NAND flash memories. Proposed scheme classifies data blocks intellectually according to their write access frequencies and improves the space utilization by allocating separate limited number of log blocks to both natures, hot and cold, of data blocks with proposed new system architecture. Our proposed cleaning scheme achieves a block to erase with optimal number of space utilization and minimum overhead of data migration. A hybrid wear-leveling approach is also proposed to evenly wear-down flash memory. Proposed scheme enhances the system life lime by managing the blocks according to their degree of worn. We compared our proposed idea with two previous schemes. Our proposed idea improved system performance 95% for garbage collection and 36% fir wear-leveling. The evaluation results prove that our proposed scheme, AMI, outperforms both previous schemes particularly with efficient flash bandwidth utilization and attempted erase operations.", "paper_title": "AMI: An Advanced Endurance Management Technique for Flash Memory Storage Systems", "paper_id": "WOS:000287064900007"}