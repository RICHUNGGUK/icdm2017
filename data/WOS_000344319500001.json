{"auto_keywords": [{"score": 0.042883101090019415, "phrase": "abstract_interpretation_framework"}, {"score": 0.00481495049065317, "phrase": "global_sparse_analysis_framework"}, {"score": 0.004579005794486596, "phrase": "general_method"}, {"score": 0.004502943680955863, "phrase": "global_static_analyzers"}, {"score": 0.00400459716272594, "phrase": "general_sparse_analysis_technique"}, {"score": 0.0039380388343479384, "phrase": "relational_as_well_as_nonrelational_semantics_properties"}, {"score": 0.003808209866576388, "phrase": "analysis_designers"}, {"score": 0.003641713874009232, "phrase": "global_and_correct_static_analyzer"}, {"score": 0.0034824716857663114, "phrase": "underlying_sound_static_analyzer"}, {"score": 0.0031845067058084583, "phrase": "underlying_analysis"}, {"score": 0.0029945352738604742, "phrase": "resulting_sparse_version"}, {"score": 0.0028795712616923462, "phrase": "underlying_analyzer"}, {"score": 0.0027382040767844093, "phrase": "existing_sparse_analyses"}, {"score": 0.00269263690712392, "phrase": "restricted_instances"}, {"score": 0.002531933388815139, "phrase": "sparse_nonrelational_and_relational_static_analyses"}, {"score": 0.0022386642196006567, "phrase": "implementation_techniques"}, {"score": 0.0021049977753042253, "phrase": "sparse_analysis_process"}], "paper_keywords": ["Programming Languages", " Program Analysis", " Static analysis", " abstract interpretation", " sparse analysis"], "paper_abstract": "In this article, we present a general method for achieving global static analyzers that are precise and sound, yet also scalable. Our method, on top of the abstract interpretation framework, is a general sparse analysis technique that supports relational as well as nonrelational semantics properties for various programming languages. Analysis designers first use the abstract interpretation framework to have a global and correct static analyzer whose scalability is unattended. Upon this underlying sound static analyzer, analysis designers add our generalized sparse analysis techniques to improve its scalability while preserving the precision of the underlying analysis. Our method prescribes what to prove to guarantee that the resulting sparse version should preserve the precision of the underlying analyzer. We formally present our framework and show that existing sparse analyses are all restricted instances of our framework. In addition, we show more semantically elaborate design examples of sparse nonrelational and relational static analyses. We then present their implementation results that scale to globally analyze up to one million lines of C programs. We also show a set of implementation techniques that turn out to be critical to economically support the sparse analysis process.", "paper_title": "Global Sparse Analysis Framework", "paper_id": "WOS:000344319500001"}