{"auto_keywords": [{"score": 0.04365437218346704, "phrase": "source_code"}, {"score": 0.013053726128095947, "phrase": "source_code_analysis_techniques"}, {"score": 0.004789918982594721, "phrase": "technical_debt_identification"}, {"score": 0.004765016982888318, "phrase": "software_systems"}, {"score": 0.0047402438279438765, "phrase": "technical_debt"}, {"score": 0.004678870311639579, "phrase": "short-term_goals"}, {"score": 0.004594273895196032, "phrase": "long-term_goals"}, {"score": 0.00444118525702523, "phrase": "release_date"}, {"score": 0.004406584582772764, "phrase": "well-refactored_implementation"}, {"score": 0.0043608674815879345, "phrase": "long-term_health"}, {"score": 0.0038881074726931355, "phrase": "code-level_debt"}, {"score": 0.0037389008316269716, "phrase": "multiple_tools"}, {"score": 0.0036142111184389236, "phrase": "different_tools"}, {"score": 0.0034573864329600413, "phrase": "td_\"interest"}, {"score": 0.0033683237474307582, "phrase": "latter_question"}, {"score": 0.003230555482626455, "phrase": "interest_payments"}, {"score": 0.003188665780451096, "phrase": "increased_defect-"}, {"score": 0.0031227655905108668, "phrase": "different_td_identification"}, {"score": 0.0030106906724530953, "phrase": "future_td_\"interest"}, {"score": 0.0029331010547170187, "phrase": "automatic_static_analysis_issues"}, {"score": 0.002813083646853756, "phrase": "apache_hadoop_open_source_software_project"}, {"score": 0.00276935064076508, "phrase": "statistical_measures"}, {"score": 0.0027334248520330803, "phrase": "different_techniques"}, {"score": 0.0027191850147812767, "phrase": "td_indicators"}, {"score": 0.002642178125822508, "phrase": "high_interest"}, {"score": 0.0025943101835888896, "phrase": "large_number"}, {"score": 0.0025673464455688816, "phrase": "higher_change-proneness"}, {"score": 0.002468698571619528, "phrase": "different_problems"}, {"score": 0.0024366635039367065, "phrase": "dispersed_coupling_and_modularity_violations"}, {"score": 0.0023862677479769352, "phrase": "higher_defect-proneness"}, {"score": 0.0023491545128442874, "phrase": "strong_relationship"}, {"score": 0.0023369118494234484, "phrase": "modularity_violations"}, {"score": 0.002294561646628924, "phrase": "initial_overview"}, {"score": 0.002276646782260818, "phrase": "td_landscape"}, {"score": 0.0022529771934744927, "phrase": "different_td_techniques"}, {"score": 0.0022006144972018526, "phrase": "different_locations"}], "paper_keywords": ["Technical debt", " Software maintenance", " Software quality", " Source code analysis", " Modularity violations", " Grime", " Code smells", " ASA"], "paper_abstract": "Software systems accumulate technical debt (TD) when short-term goals in software development are traded for long-term goals (e.g., quick-and-dirty implementation to reach a release date versus a well-refactored implementation that supports the long-term health of the project). Some forms of TD accumulate over time in the form of source code that is difficult to work with and exhibits a variety of anomalies. A number of source code analysis techniques and tools have been proposed to potentially identify the code-level debt accumulated in a system. What has not yet been studied is if using multiple tools to detect TD can lead to benefits, that is, if different tools will flag the same or different source code components. Further, these techniques also lack investigation into the symptoms of TD \"interest\" that they lead to. To address this latter question, we also investigated whether TD, as identified by the source code analysis techniques, correlates with interest payments in the form of increased defect- and change-proneness. Comparing the results of different TD identification approaches to understand their commonalities and differences and to evaluate their relationship to indicators of future TD \"interest.\" We selected four different TD identification techniques (code smells, automatic static analysis issues, grime buildup, and Modularity violations) and applied them to 13 versions of the Apache Hadoop open source software project. We collected and aggregated statistical measures to investigate whether the different techniques identified TD indicators in the same or different classes and whether those classes in turn exhibited high interest (in the form of a large number of defects and higher change-proneness). The outputs of the four approaches have very little overlap and are therefore pointing to different problems in the source code. Dispersed Coupling and Modularity violations were co-located in classes with higher defect-proneness. We also observed a strong relationship between Modularity violations and change-proneness. Our main contribution is an initial overview of the TD landscape, showing that different TD techniques are loosely coupled and therefore indicate problems in different locations of the source code. Moreover, our proxy interest indicators (change- and defect-proneness) correlate with only a small subset of TD indicators.", "paper_title": "Comparing four approaches for technical debt identification", "paper_id": "WOS:000338530800002"}