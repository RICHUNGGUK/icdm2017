{"auto_keywords": [{"score": 0.044672559367905706, "phrase": "five_requirements"}, {"score": 0.03564335604172775, "phrase": "perfect_hashing"}, {"score": 0.00481495049065317, "phrase": "almost_perfect_subtype_test"}, {"score": 0.004684157900507474, "phrase": "important_issue"}, {"score": 0.004577869668211548, "phrase": "object-oriented_programming_languages"}, {"score": 0.0037402558657576124, "phrase": "subtyping_test_implementation"}, {"score": 0.0036385493850693983, "phrase": "usual_hashtables"}, {"score": 0.0036052633308076933, "phrase": "cohen's_display"}, {"score": 0.0035233696341819437, "phrase": "well-known_technique"}, {"score": 0.0034911335714333507, "phrase": "single_inheritance_hierarchies"}, {"score": 0.0034433297275344877, "phrase": "novel_approach"}, {"score": 0.0031121406603482112, "phrase": "immutable_hashtables"}, {"score": 0.003027462227648001, "phrase": "resulting_technique"}, {"score": 0.00286493504971388, "phrase": "java-like_languages"}, {"score": 0.0028127163745564777, "phrase": "single_inheritance"}, {"score": 0.0027614468443073028, "phrase": "multiple_subtyping"}, {"score": 0.0026616868981501006, "phrase": "method_invocation"}, {"score": 0.002530359917257626, "phrase": "proposed_technique"}, {"score": 0.002405496949144104, "phrase": "palacz"}, {"score": 0.0023834640793589435, "phrase": "vitek"}, {"score": 0.002276283303864666, "phrase": "cycle_level"}, {"score": 0.002224510044064184, "phrase": "driesen's_pseudo-code"}, {"score": 0.0021940118003312397, "phrase": "linear-space_criterion"}, {"score": 0.0021539955106204354, "phrase": "statistical_simulation"}, {"score": 0.0021049977753042253, "phrase": "large-scale_class_hierarchies"}], "paper_keywords": ["Experimentation", " Languages", " Measurement", " Performance", " Casting", " coloring", " downcast", " dynamic loading", " interfaces", " method tables", " multiple inheritance", " multiple subtyping", " perfect hashing", " single inheritance", " subtype test", " virtual function tables"], "paper_abstract": "Subtype tests are an important issue in the implementation of object-oriented programming languages. Many techniques have been proposed, but none of them perfectly fulfills the five requirements that we have identified: constant-time, linear-space, multiple inheritance, dynamic loading and inlining. In this article, we propose a subtyping test implementation that involves a combination of usual hashtables and Cohen's display, which is a well-known technique for single inheritance hierarchies. This novel approach is based on perfect hashing, that is, an optimized and truly constant-time variant of hashing that applies to immutable hashtables. We show that the resulting technique closely meets all five requirements. Furthermore, in the framework of JAVA-like languages-characterized by single inheritance of classes and multiple subtyping of interfaces-perfect hashing also applies to method invocation when the receiver is typed by an interface. The proposed technique is compared to some alternatives, including the proposal by Palacz and Vitek [2003]. Time-efficiency is assessed at the cycle level in the framework of Driesen's pseudo-code and the linear-space criterion is validated by statistical simulation on benchmarks consisting of large-scale class hierarchies.", "paper_title": "Perfect Hashing as an Almost Perfect Subtype Test", "paper_id": "WOS:000260958900004"}