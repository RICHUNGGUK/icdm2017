{"auto_keywords": [{"score": 0.046081391722127746, "phrase": "domain_decomposition"}, {"score": 0.00481495049065317, "phrase": "matrix_assembly"}, {"score": 0.00475254914916922, "phrase": "massive_parallelism"}, {"score": 0.004610058444728656, "phrase": "efficient_load_balancing"}, {"score": 0.00457013354092966, "phrase": "minimal_synchronizations"}, {"score": 0.004244375827831527, "phrase": "increasing_number"}, {"score": 0.004099183062034004, "phrase": "new_many-core_processors"}, {"score": 0.003941746077126688, "phrase": "hybrid_approach"}, {"score": 0.0038568987435766014, "phrase": "distributed_memory_parallelism"}, {"score": 0.003660614912817745, "phrase": "shared_memory_parallelism"}, {"score": 0.0035199624440843892, "phrase": "core_level"}, {"score": 0.003399466007862412, "phrase": "new_trade-off"}, {"score": 0.003311799410921826, "phrase": "memory_locality"}, {"score": 0.003170667618004276, "phrase": "finite_element_matrix_assembly"}, {"score": 0.003129509028432954, "phrase": "industrial_fluid_dynamic_code"}, {"score": 0.0030888830649190282, "phrase": "dassault_aviation"}, {"score": 0.002893505913503472, "phrase": "high_parallel_efficiency"}, {"score": 0.002855934865505357, "phrase": "good_data_locality"}, {"score": 0.0027943943921568456, "phrase": "improved_bandwidth_usage"}, {"score": 0.0027341763737751467, "phrase": "current_nodes"}, {"score": 0.0026986685585382347, "phrase": "optimized_pure_mpi_version"}, {"score": 0.0024306740161601625, "phrase": "intel_xeon_phi_version"}, {"score": 0.002151388538895855, "phrase": "physical_cores"}], "paper_keywords": ["Algorithms", " Performance", " Divide-and-conquer", " vectorization", " domain decomposition", " unstructured mesh", " task", " computational fluid dynamic", " matrix assembly"], "paper_abstract": "Exposing massive parallelism on 3D unstructured meshes computation with efficient load balancing and minimal synchronizations is challenging. Current approaches relying on domain decomposition and mesh coloring struggle to scale with the increasing number of cores per nodes, especially with new many-core processors. In this paper, we propose an hybrid approach using domain decomposition to exploit distributed memory parallelism, Divide-and-Conquer, D&C, to exploit shared memory parallelism and improve locality, and mesh coloring at core level to exploit vectors. It illustrates a new trade-off for many-cores between structuredness, memory locality, and vectorization. We evaluate our approach on the finite element matrix assembly of an industrial fluid dynamic code developed by Dassault Aviation. We compare our D&C approach to domain decomposition and to mesh coloring. D&C achieves a high parallel efficiency, a good data locality as well as an improved bandwidth usage. It competes on current nodes with the optimized pure MPI version with a minimum 10% speed-up. D&C shows an impressive 319x strong scaling on 512 cores (32 nodes) with only 2000 vertices per core. Finally, the Intel Xeon Phi version has a performance similar to 10 Intel E5-2665 Xeon Sandy Bridge cores and 95% parallel efficiency on the 60 physical cores. Running on 4 Xeon Phi (240 cores), D&C has 92% efficiency on the physical cores and performance similar to 33 Intel E5-2665 Xeon Sandy Bridge cores.", "paper_title": "Scalable and Efficient Implementation of 3D Unstructured Meshes Computation: A Case Study on Matrix Assembly", "paper_id": "WOS:000367254800012"}