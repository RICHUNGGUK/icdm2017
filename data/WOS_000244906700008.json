{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "grid_applications"}, {"score": 0.004621279527317074, "phrase": "application_developers"}, {"score": 0.004300830853119242, "phrase": "workflow_model"}, {"score": 0.0041703614123283165, "phrase": "widely_accepted_paradigm"}, {"score": 0.004127753467337283, "phrase": "high-level_composition"}, {"score": 0.003941319912895672, "phrase": "low-level_imperative_programming_model"}, {"score": 0.0035021127041237887, "phrase": "new_model"}, {"score": 0.003275807170434343, "phrase": "application_developer"}, {"score": 0.003192700856094016, "phrase": "grid-related_issues"}, {"score": 0.0028965265680502335, "phrase": "grid"}, {"score": 0.002851301751761804, "phrase": "correctness_checker"}, {"score": 0.002708399936381754, "phrase": "correct_execution"}, {"score": 0.00266693888510356, "phrase": "workflow_coordination"}, {"score": 0.0025992391074270097, "phrase": "formal_specification"}, {"score": 0.00248167018931442, "phrase": "real-world_experimental_results"}, {"score": 0.0021709933368474223, "phrase": "grid_middleware_software"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["specification techniques", " coherence and coordination", " workflow management", " functional constructs", " correctness proofs", " performance evaluation"], "paper_abstract": "The so called \"invisible Grid\", transparent to application developers, is still far from being a reality. One reason is that the workflow model, which emerged as a widely accepted paradigm for high-level composition of Grid applications, is based on a low-level imperative programming model prone to programming errors. The issue of developing correct (bug-free) Grid applications has not been addressed by the community. We propose a new model for building Grid applications based on two programming phases: (1) formal functional specification, written by the application developer not interested in any Grid-related issues; (2) imperative workflow-based coordination, written by the computer scientist, which ports and efficiently executes the Specification onto the Grid. A correctness checker automatically connects both parts at compile-time and insures the correct execution of the workflow coordination with respect to the formal specification. We validate Our approach for three scientific applications and show real-world experimental results that demonstrate the scalability of our coordination model and the fact that the overhead introduced by Our correctness checker is insignificant when compared to the latencies exhibited by the Grid middleware software. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Specification-correct and scalable coordination of Grid applications", "paper_id": "WOS:000244906700008"}