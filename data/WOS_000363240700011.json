{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "synchronization-function-level_parallel_multicore_instruction-set_simulations"}, {"score": 0.004305481798183612, "phrase": "tremendous_increase"}, {"score": 0.004199766284749713, "phrase": "multicore_designs"}, {"score": 0.00402094658848301, "phrase": "mciss"}, {"score": 0.0037318666008429014, "phrase": "timing_synchronization"}, {"score": 0.0035951877427580006, "phrase": "accurate_simulation_results"}, {"score": 0.0035507457285983268, "phrase": "parallel_mciss"}, {"score": 0.0034420211080526094, "phrase": "huge_synchronization_overhead"}, {"score": 0.0032546105164772995, "phrase": "highly_efficient_and_effective_parallel_mciss_approach"}, {"score": 0.003135356056324338, "phrase": "synchronization_function"}, {"score": 0.0029645930408561086, "phrase": "state-of-the-art_critical-section-level_simulation_approach"}, {"score": 0.0026835920552084488, "phrase": "synchronization_overhead"}, {"score": 0.0026013505538490223, "phrase": "optimization_methods"}, {"score": 0.0025373711401047772, "phrase": "hybrid_scheduling_technique"}, {"score": 0.002474961375646351, "phrase": "analysis_algorithm"}, {"score": 0.0023546984428119864, "phrase": "host_platform"}, {"score": 0.00231111848128734, "phrase": "best_simulation_performance"}, {"score": 0.002226357953581725, "phrase": "proposed_approach"}, {"score": 0.0021851480717840484, "phrase": "simulation_speed"}, {"score": 0.0021049977753042253, "phrase": "accurate_timing"}], "paper_keywords": ["Deterministic", " parallel multicore instruction-set simulations (MCISSs)", " timing synchronization"], "paper_abstract": "Multicore instruction-set simulation (MCISS) has become more and more important due to tremendous increase in number of multicore designs. To boost the speed of MCISS, one of the most effective and commonly used approaches is parallel simulation. However, timing synchronization must be applied to ensure accurate simulation results of parallel MCISS, and may induce huge synchronization overhead. In this paper, we propose a highly efficient and effective parallel MCISS approach by synchronizing timing before each synchronization function (SF) call. We improve the applicability of the state-of-the-art critical-section-level simulation approach with a generic blocking/nonblocking send/receive model covering all types of SFs. To further reduce synchronization overhead, we also introduce optimization methods such as a hybrid scheduling technique and provide an analysis algorithm that helps the designers to choose the host platform with the best simulation performance. Experiments show that the proposed approach attains a simulation speed of up to 285 MIPS, while producing accurate timing and functional results.", "paper_title": "Highly Efficient and Effective Approach for Synchronization-Function-Level Parallel Multicore Instruction-Set Simulations", "paper_id": "WOS:000363240700011"}