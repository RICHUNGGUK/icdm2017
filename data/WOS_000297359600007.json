{"auto_keywords": [{"score": 0.04721824538477128, "phrase": "performance_optimizations"}, {"score": 0.03789823017882356, "phrase": "rfsa"}, {"score": 0.03349571545056148, "phrase": "application_developer"}, {"score": 0.030883451621122163, "phrase": "selection_algorithm"}, {"score": 0.00481495049065317, "phrase": "reduced_function_set_abstraction"}, {"score": 0.004710306419574744, "phrase": "mpi-io._programmers_productivity"}, {"score": 0.004487989502479992, "phrase": "high_performance_computing"}, {"score": 0.004003169429008801, "phrase": "efficient_code"}, {"score": 0.0038647641000798135, "phrase": "exact_usage"}, {"score": 0.0038141000450978746, "phrase": "optimization_functions"}, {"score": 0.00376409764683147, "phrase": "programmer_productivity"}, {"score": 0.003447035529485425, "phrase": "existing_parallel_programming_interface"}, {"score": 0.003212663446866794, "phrase": "performance_optimization_functions"}, {"score": 0.00303398491761013, "phrase": "specific_function"}, {"score": 0.002994178996584381, "phrase": "proposed_set"}, {"score": 0.0028151948545894656, "phrase": "mpi-io."}, {"score": 0.002544017922741882, "phrase": "data_types"}, {"score": 0.0025217065652145443, "phrase": "file_views"}, {"score": 0.0024451427672857458, "phrase": "medium-scale_clusters"}, {"score": 0.0024236971719454807, "phrase": "nersc"}, {"score": 0.0023604768913655463, "phrase": "improved_programmer_productivity"}, {"score": 0.0021709339252206825, "phrase": "performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "different_optimizations"}], "paper_keywords": ["Parallel programmer productivity", " MPI-IO"], "paper_abstract": "Programmers productivity has always been overlooked as compared to the performance optimizations in high performance computing (HPC) community. In many parallel programming languages like MPI/MPI-IO, the performance optimizations are provided as various function options to the programmers. In order to write an efficient code, they are required to know the exact usage of the optimization functions, hence programmer productivity is limited. In this paper, we present RFSA, a Reduced Function Set Abstraction based on an existing parallel programming interface (MPI-IO) for I/O. The purpose of RFSA is to hide the performance optimization functions from the application developer, and relieve the application developer from deciding on a specific function. The proposed set of functions rely on a selection algorithm to decide among the most common optimizations provided by MPI-IO. We implement a selection algorithm for I/O functions like read, write, etc., and also merge a set of functions for data types and file views. By running different parallel I/O benchmarks on both medium-scale clusters and NERSC supercomputers, we show an improved programmer productivity (35.7% on average). This approach incurs an overhead of 2-5% for one particular optimization, and shows performance improvement of 17% when a combination of different optimizations is required by an application.", "paper_title": "Reduced Function Set Abstraction (RFSA) for MPI-IO", "paper_id": "WOS:000297359600007"}