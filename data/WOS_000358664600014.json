{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "integrity_constraints"}, {"score": 0.036297196938033884, "phrase": "xml_schemas"}, {"score": 0.03369594687840481, "phrase": "platform-independent_level"}, {"score": 0.015397832559667004, "phrase": "schematron"}, {"score": 0.008637600442747416, "phrase": "ocl_expression"}, {"score": 0.008371800263288431, "phrase": "xml_schema_level"}, {"score": 0.004748281926718607, "phrase": "ocl"}, {"score": 0.004633805690244912, "phrase": "model_driven_development"}, {"score": 0.004553796631676113, "phrase": "miller"}, {"score": 0.004522080178250592, "phrase": "mukerji"}, {"score": 0.004413036532585712, "phrase": "software_system"}, {"score": 0.004016413965935386, "phrase": "platform-specific_constructs"}, {"score": 0.003629882559085245, "phrase": "declarative_transformation"}, {"score": 0.003303412571939192, "phrase": "different_views"}, {"score": 0.0031568304678554243, "phrase": "uniform_conceptual_schema"}, {"score": 0.0031130463625133496, "phrase": "uml_class_diagram"}, {"score": 0.003069867656852932, "phrase": "xml_schema"}, {"score": 0.002974886152979996, "phrase": "uniform_uml_class_diagram"}, {"score": 0.002832928222306059, "phrase": "uml_class_diagrams"}, {"score": 0.0027838831266525773, "phrase": "object_constraint_language"}, {"score": 0.002697726021470387, "phrase": "integrity_constraint"}, {"score": 0.0024894376091589244, "phrase": "xml_documents"}, {"score": 0.002337684811187166, "phrase": "schematron_expression"}, {"score": 0.0021049977753042253, "phrase": "schematron_constraints"}], "paper_keywords": ["Integrity constraints", " OCL", " UML", " XML", " Schematron", " Conceptual modeling"], "paper_abstract": "The idea behind Model Driven Development (MDD) (Miller and Mukerji 2003) is to model the software system on several layers of abstraction. A designer starts from the very abstract specification (independent of the platform and language used) and progresses to more concrete models (using platform-specific constructs) and finally to code. Ideally, each step of the transformation of the model from the more abstract to the less abstract is achieved by a declarative transformation obtained (semi-)automatically. In our previous work, we have developed an approach for designing XML schemas based on MDD. We showed that a set of XML schemas representing different views of the same problem domain can be first modeled in a platform-independent level with a uniform conceptual schema expressed as a UML class diagram. Then each XML schema can be modeled as a view on this uniform UML class diagram. In this paper, we further extend our approach to modeling XML schemas using UML class diagrams with modeling integrity constraints using Object Constraint Language (OCL). We show that an integrity constraint expressed at the platform-independent level as an OCL expression can be translated to an expression at the XML schema level which can be used to validate XML documents. In particular, we propose a method which translates an OCL expression at the platform-independent level to a Schematron expression. Schematron is a language which enables to express integrity constraints at the XML schema level. We show that our approach saves time and prevents from errors made by designers when expressing Schematron constraints manually.", "paper_title": "Model-driven approach to modeling and validating integrity constraints for XML with OCL and Schematron", "paper_id": "WOS:000358664600014"}