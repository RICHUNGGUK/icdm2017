{"auto_keywords": [{"score": 0.04887120582438803, "phrase": "multi-core_cpu"}, {"score": 0.015719716506582538, "phrase": "color-entropy_preprocessed_chan-vese_model"}, {"score": 0.004653667500876187, "phrase": "gpu._face"}, {"score": 0.004575053987970206, "phrase": "important_computer_vision_technology"}, {"score": 0.0043842558719324526, "phrase": "cell_phone_applications"}, {"score": 0.004347057700479576, "phrase": "industry_robots"}, {"score": 0.0041835168653521, "phrase": "novel_way"}, {"score": 0.004112812699639956, "phrase": "face_contour_detecting_application"}, {"score": 0.003991932110277654, "phrase": "total_variation_g-norm"}, {"score": 0.00387459052649752, "phrase": "complicated_and_unsupervised_computational_method"}, {"score": 0.0036191240628152205, "phrase": "heavily_correlated_data_processing"}, {"score": 0.0034828730516958807, "phrase": "novel_approach"}, {"score": 0.003423969509052361, "phrase": "data-dependent_core_parts"}, {"score": 0.0033517342967390065, "phrase": "runtime_performance"}, {"score": 0.003309124298009635, "phrase": "model_computation"}, {"score": 0.003239304090565123, "phrase": "parallelized_program"}, {"score": 0.003144042829340181, "phrase": "gpu."}, {"score": 0.002731130835178169, "phrase": "amd"}, {"score": 0.0026507289852980512, "phrase": "parallelized_routines"}, {"score": 0.002583713580625699, "phrase": "whole_program"}, {"score": 0.002475755804232436, "phrase": "parallelized_entropy_filter_routine"}, {"score": 0.0023221983158528163, "phrase": "parallelization_methodologies"}, {"score": 0.0022442249871042026, "phrase": "thread_models"}, {"score": 0.0021968238865548812, "phrase": "synchronization_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Face detection", " Color-entropy preprocessing", " Chan-Vese segmentation model", " Parallelization"], "paper_abstract": "Face tracking is an important computer vision technology that has been widely adopted in many areas, from cell phone applications to industry robots. In this paper, we introduce a novel way to parallelize a face contour detecting application based on the color-entropy preprocessed Chan-Vese model utilizing a total variation G-norm. This particular application is a complicated and unsupervised computational method requiring a large amount of calculations. Several core parts therein are difficult to parallelize due to heavily correlated data processing among iterations and pixels. We develop a novel approach to parallelize the data-dependent core parts and significantly improve the runtime performance of the model computation. We implement the parallelized program on OpenCL for both multi-core CPU and GPU. For 640 * 480 input images, the parallelized program on a NVidia GTX970 GPU, a NVidia GTX660 GPU, and an AMD FX8530 8-core CPU is on average 18.6, 12.0 and 4.40 times faster than its single-thread C version on the AMD FX8530 CPU, respectively. Some parallelized routines have much higher performance improvement compared to the whole program. For instance, on the NVidia GTX970 GPU, the parallelized entropy filter routine is on average 74.0 times faster than its single-thread C version on the AMD FX8530 8-core CPU. We discuss the parallelization methodologies in detail, including the scalability, thread models, as well as synchronization methods for both multi-core CPU and GPU. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Parallelization of a color-entropy preprocessed Chan-Vese model for face contour detection on multi-core CPU and GPU", "paper_id": "WOS:000364892500003"}