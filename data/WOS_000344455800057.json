{"auto_keywords": [{"score": 0.04945075598243112, "phrase": "model_counting"}, {"score": 0.04315920329261463, "phrase": "quantitative_analyses"}, {"score": 0.03260064589781526, "phrase": "smc"}, {"score": 0.00481495049065317, "phrase": "unbounded_strings"}, {"score": 0.004204459295724526, "phrase": "numerous_applications"}, {"score": 0.0040708542958968605, "phrase": "program_execution_time"}, {"score": 0.0040186038781533946, "phrase": "information_flow"}, {"score": 0.003967021436047945, "phrase": "combinatorial_circuit_designs"}, {"score": 0.003865826699096508, "phrase": "probabilistic_reasoning"}, {"score": 0.003742941972172613, "phrase": "new_approach"}, {"score": 0.003623949225126944, "phrase": "structured_data_types"}, {"score": 0.0034191818674096453, "phrase": "key_ingredient"}, {"score": 0.003353521531649663, "phrase": "new_technique"}, {"score": 0.0031435968684569112, "phrase": "combinatorial_counting"}, {"score": 0.0028346293790895024, "phrase": "expressive_string_language"}, {"score": 0.002709161672473817, "phrase": "previous_finite-size_analysis_tools"}, {"score": 0.0025892330566358503, "phrase": "model_constraints"}, {"score": 0.0025394700487126414, "phrase": "real-world_javascript_applications"}, {"score": 0.0023958326775913165, "phrase": "practical_feasibility"}, {"score": 0.002304606411453748, "phrase": "security_applications"}, {"score": 0.0022168460543913787, "phrase": "comparative_strengths"}, {"score": 0.0021883400011393564, "phrase": "password_strength_meters"}, {"score": 0.002132420504803564, "phrase": "information_leakage"}, {"score": 0.0021049977753042253, "phrase": "side_channels"}], "paper_keywords": [""], "paper_abstract": "Model counting is the problem of determining the number of solutions that satisfy a given set of constraints. Model counting has numerous applications in the quantitative analyses of program execution time, information flow, combinatorial circuit designs as well as probabilistic reasoning. We present a new approach to model counting for structured data types, specifically strings in this work. The key ingredient is a new technique that leverages generating functions as a basic primitive for combinatorial counting. Our tool SMC which embodies this approach can model count for constraints specified in an expressive string language efficiently and precisely, thereby outperforming previous finite-size analysis tools. SMC is expressive enough to model constraints arising in real-world JavaScript applications and UNIX C utilities. We demonstrate the practical feasibility of performing quantitative analyses arising in security applications, such as determining the comparative strengths of password strength meters and determining the information leakage via side channels.", "paper_title": "A Model Counter For Constraints Over Unbounded Strings", "paper_id": "WOS:000344455800057"}