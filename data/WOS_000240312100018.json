{"auto_keywords": [{"score": 0.038928562270111176, "phrase": "ftl"}, {"score": 0.00481495049065317, "phrase": "design_patterns"}, {"score": 0.004306968571854912, "phrase": "particular_form"}, {"score": 0.003928969293303814, "phrase": "commonly_occurring_structures"}, {"score": 0.0031845067058084583, "phrase": "formal_modelling"}, {"score": 0.0028108690791085536, "phrase": "patterns_instances"}, {"score": 0.0023694065215394593, "phrase": "z_promotion_pattern"}, {"score": 0.0022628564592874147, "phrase": "z_promotion"}, {"score": 0.002218668420806254, "phrase": "proved_properties"}, {"score": 0.002146926767291475, "phrase": "z_promotions"}, {"score": 0.0021049977753042253, "phrase": "template_instantiation"}], "paper_keywords": ["patterns", " templates", " proof", " Z", " formal development"], "paper_abstract": "Design patterns are usually described in terms of instances. Templates describe sentences of some language with a particular form, generate sentences upon instantiation, and can be used to describe those commonly occurring structures that make a pattern. This paper presents FTL, a language to express templates, and an approach to proof with templates. This enables reuse at the level of formal modelling and verification: patterns of models are captured once and their structure is explored for proof, so that patterns instances can be generated mechanically and proved results related with the pattern can be reused in any context. The paper uses templates to capture the Z promotion pattern and metaproof to prove properties of Z promotion. The proved properties are applicable directly to Z promotions built by template instantiation.", "paper_title": "A formal template language enabling metaproof", "paper_id": "WOS:000240312100018"}