{"auto_keywords": [{"score": 0.0495290999002817, "phrase": "vcpu_ballooning"}, {"score": 0.00481495049065317, "phrase": "dynamic_virtual_machine_scheduling"}, {"score": 0.004677847043645765, "phrase": "multi-core_processors"}, {"score": 0.004597457370802855, "phrase": "de-facto_configuration"}, {"score": 0.004389745162172933, "phrase": "smp_virtual_machines"}, {"score": 0.004095567486538121, "phrase": "computing_resources"}, {"score": 0.0037989951856280423, "phrase": "guest_vms"}, {"score": 0.0036907133026806327, "phrase": "new_research_problem"}, {"score": 0.003503497128638102, "phrase": "double_scheduling"}, {"score": 0.0033839745649214548, "phrase": "lock-holder_preemption"}, {"score": 0.003287482882222731, "phrase": "cpu_fragmentation"}, {"score": 0.0032309093154028663, "phrase": "priority_inversion"}, {"score": 0.0031937337757356526, "phrase": "prior_approaches"}, {"score": 0.003120657021758196, "phrase": "new_problems"}, {"score": 0.0028119023819663472, "phrase": "flexcore"}, {"score": 0.0025336613464933024, "phrase": "vm"}, {"score": 0.002432971714608409, "phrase": "unnecessary_scheduling"}, {"score": 0.002391067964886602, "phrase": "hypervisor_layer"}, {"score": 0.0022176487309947266, "phrase": "complete_kvm-based_implementation"}, {"score": 0.0021668575137633317, "phrase": "average_performance_improvement"}, {"score": 0.002141898874982106, "phrase": "parsec_applications"}], "paper_keywords": ["virtualization", " SMP virtual machine", " multicore processor", " vCPU ballooning"], "paper_abstract": "As multi-core processors become the de-facto configuration in modern computers, the adoption of SMP Virtual Machines (VMs) has been increasing, allowing for more efficient use of computing resources. However, because of existence of schedulers in both the hypervisor and the guest VMs, this creates a new research problem, viz., double scheduling. Although double scheduling may cause many issues including lock-holder preemption, vCPU stacking, CPU fragmentation, and priority inversion, prior approaches have either introduced new problems and/or addressed the problem incompletely. In this paper, we describe the design and implementation of FlexCore, a new scheduling scheme using vCPU ballooning, which dynamically adjusts the number of vCPUs of a VM at runtime. This essentially eliminates unnecessary scheduling in the hypervisor layer, and thus, boosts performance significantly. An evaluation using a complete KVM-based implementation shows that the average performance improvement for PARSEC applications on a 12-core Intel machine is approximately 52.9%, ranging from 35.4% to 79.6%.", "paper_title": "FlexCore: Dynamic Virtual Machine Scheduling Using VCPU Ballooning", "paper_id": "WOS:000364490000002"}