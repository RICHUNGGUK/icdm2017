{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "model_transformation"}, {"score": 0.030246313194662117, "phrase": "type_analysis"}, {"score": 0.013574465925432464, "phrase": "code_generation"}, {"score": 0.004605565335682916, "phrase": "model-driven_software_development"}, {"score": 0.00450429688285697, "phrase": "code_generators"}, {"score": 0.004471035765089235, "phrase": "domain-specific_languages"}, {"score": 0.00418247778205288, "phrase": "core_technique"}, {"score": 0.003985680946956402, "phrase": "structured_representation"}, {"score": 0.003897989308486044, "phrase": "target_program"}, {"score": 0.0038548668648948044, "phrase": "plain_text"}, {"score": 0.003579280847524597, "phrase": "target_language"}, {"score": 0.0035135084960705816, "phrase": "better_modularity"}, {"score": 0.0034875380341306468, "phrase": "code_generation_rules"}, {"score": 0.003360527337581911, "phrase": "internal_code_generation"}, {"score": 0.00328654473734697, "phrase": "high-level_extensions"}, {"score": 0.0032261342460565457, "phrase": "lower-level_constructs"}, {"score": 0.0031668306413359794, "phrase": "model-to-model_transformations"}, {"score": 0.0030288982511487835, "phrase": "improved_architecture"}, {"score": 0.002929394386754424, "phrase": "model_normalization_rules"}, {"score": 0.002791393223133408, "phrase": "coarse-grained_stages"}, {"score": 0.0026697693423477727, "phrase": "new_style"}, {"score": 0.0025916375737852506, "phrase": "normalizing_transformations"}, {"score": 0.002562929776267296, "phrase": "fine-grained_manner"}, {"score": 0.002534539169474629, "phrase": "normalization_strategy"}, {"score": 0.0025064622665903645, "phrase": "simple_extension_interface"}, {"score": 0.0023972232771581753, "phrase": "realistic_case_study"}, {"score": 0.002379484250348599, "phrase": "domain-specific_language_engineering"}, {"score": 0.0023184226291364097, "phrase": "webdsl"}, {"score": 0.0022927344714833, "phrase": "stratego"}, {"score": 0.0021049977753042253, "phrase": "code-to-code_transformations"}], "paper_keywords": ["Transformation", " Transformation engineering", " Term rewriting", " Webapplication DSL", " Combination of analysis and transformation"], "paper_abstract": "The realization of model-driven software development requires effective techniques for implementing code generators for domain-specific languages. This paper identifies techniques for improving separation of concerns in the implementation of generators. The core technique is code generation by model transformation, that is, the generation of a structured representation (model) of the target program instead of plain text. This approach enables the transformation of code after generation, which in turn enables the extension of the target language with features that allow better modularity in code generation rules. The technique can also be applied to 'internal code generation' for the translation of high-level extensions of a DSL to lower-level constructs within the same DSL using model-to-model transformations. This paper refines our earlier description of code generation by model transformation with an improved architecture for the composition of model-to-model normalization rules, solving the problem of combining type analysis and transformation. Instead of coarse-grained stages that alternate between normalization and type analysis, we have developed a new style of type analysis that can be integrated with normalizing transformations in a fine-grained manner. The normalization strategy has a simple extension interface and integrates non-local, context-sensitive transformation rules. We have applied the techniques in a realistic case study of domain-specific language engineering, i.e. the code generator for WebDSL, using Stratego, a high-level transformation language that integrates model-to-model, model-to-code, and code-to-code transformations.", "paper_title": "Code generation by model transformation: a case study in transformation modularity", "paper_id": "WOS:000278472700006"}