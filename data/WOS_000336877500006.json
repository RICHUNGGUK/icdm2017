{"auto_keywords": [{"score": 0.04350641237861327, "phrase": "web_service_users"}, {"score": 0.00481495049065317, "phrase": "load_balancing"}, {"score": 0.0047563776685277314, "phrase": "fault_tolerance"}, {"score": 0.004698514007994158, "phrase": "web_services"}, {"score": 0.004556901872357751, "phrase": "rapid_growth"}, {"score": 0.004392565073466714, "phrase": "smart_phones"}, {"score": 0.00428629884026304, "phrase": "personal_computers"}, {"score": 0.0039341294012600085, "phrase": "large_web_services"}, {"score": 0.0038862297330905836, "phrase": "additional_disk_space"}, {"score": 0.0037921662574137535, "phrase": "required_disk_space"}, {"score": 0.0033961782274326948, "phrase": "powerful_network_file_system"}, {"score": 0.0033548062793973144, "phrase": "large_web_service_providers"}, {"score": 0.0031553611552558986, "phrase": "scalable_network_file_systems"}, {"score": 0.0030601162942933665, "phrase": "variable_number"}, {"score": 0.002913650880082273, "phrase": "internal_fragmentation"}, {"score": 0.002878140062594849, "phrase": "small_files"}, {"score": 0.0027741761880779535, "phrase": "free_space"}, {"score": 0.0026252106881752067, "phrase": "overall_loading"}, {"score": 0.00257735013358606, "phrase": "bucket_servers"}, {"score": 0.002336414425972225, "phrase": "total_disk"}, {"score": 0.0022938068444116827, "phrase": "proposed_mechanisms"}, {"score": 0.0022382002476510573, "phrase": "scalable_network_file_system_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Load balancing", " Fault tolerance", " Network file system"], "paper_abstract": "Because of the rapid growth of the World Wide Web and the popularization of smart phones, tablets and personal computers, the number of web service users is increasing rapidly. As a result, large web services require additional disk space, and the required disk space increases with the number of web service users. Therefore, it is important to design and implement a powerful network file system for large web service providers. In this paper, we present three design issues for scalable network file systems. We use a variable number of objects within a bucket to decrease internal fragmentation in small files. We also propose a free space and access load-balancing mechanism to balance overall loading on the bucket servers. Finally, we propose a mechanism for caching frequently accessed data to lower the total disk I/O. These proposed mechanisms can effectively improve scalable network file system performance for large web services. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Scalable network file systems with load balancing and fault tolerance for web services", "paper_id": "WOS:000336877500006"}