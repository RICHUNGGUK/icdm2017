{"auto_keywords": [{"score": 0.04234004787461167, "phrase": "physical_memory"}, {"score": 0.015253145825317867, "phrase": "available_physical_memory"}, {"score": 0.00481495049065317, "phrase": "frequent_itemset_mining_methods"}, {"score": 0.0047602693158272655, "phrase": "time_scalability"}, {"score": 0.004547656324173302, "phrase": "real-world_databases"}, {"score": 0.00434449804021954, "phrase": "serious_bottleneck"}, {"score": 0.004295136518467118, "phrase": "existing_methods"}, {"score": 0.004150377643719188, "phrase": "new_methods"}, {"score": 0.003934795713147731, "phrase": "secondary_storage"}, {"score": 0.0038900709793274484, "phrase": "mining_process"}, {"score": 0.00348300993356662, "phrase": "disk_based_approach"}, {"score": 0.0034434031685313315, "phrase": "fp-growth"}, {"score": 0.0032519989404960073, "phrase": "main_memory"}, {"score": 0.003190584226787897, "phrase": "modified_structure"}, {"score": 0.003130325700934738, "phrase": "disk_resident"}, {"score": 0.0030829367866722825, "phrase": "main_memory_bottleneck"}, {"score": 0.002956272941199248, "phrase": "frequent_itemsets"}, {"score": 0.0029115112555515277, "phrase": "arbitrary_sizes"}, {"score": 0.0026976391682197133, "phrase": "original_fp-growth"}, {"score": 0.002636587060621144, "phrase": "secondary_memory"}, {"score": 0.0024615764782448214, "phrase": "small_databases"}, {"score": 0.0024428607154967806, "phrase": "high_support_threshold_values"}, {"score": 0.0023069440108381364, "phrase": "huge_databases"}, {"score": 0.0022894012453842064, "phrase": "low_support_threshold_values"}, {"score": 0.0022375675189464715, "phrase": "available_secondary_storage"}, {"score": 0.0021785729703227698, "phrase": "reported_test_results"}, {"score": 0.0021455612994325424, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "main_memory_based_approaches"}], "paper_keywords": ["Frequent pattern", " Association rules", " Data mining", " FP-growth", " FP-tree", " DRFP-growth", " DRFP-tree"], "paper_abstract": "Frequent itemset mining methods basically address time scalability and greatly rely on available physical memory. However, the size of real-world databases to be mined is exponentially increasing, and hence main memory size is a serious bottleneck of the existing methods. So, it is necessary to develop new methods that do not fully rely on physical memory; new methods that utilize the secondary storage in the mining process should be the target. This motivates the work described in this paper; we mainly propose (Disk Resident Frequent Pattern) DRFP-Growth as a disk based approach similar to FP-Growth. DRFP-growth uses DRFP-tree, which is treated exactly as FP-tree when constructed in main memory and gets into a modified structure when it turns into disk resident to overcome the main memory bottleneck. This way, we are able to mine for frequent itemsets from databases of arbitrary sizes without being restricted by the available physical memory. In other words, we initially try to mine the database using the original FP-growth; we expand into the secondary memory only if we run out of physical memory. So, DRFP-growth is very comparable to FP-growth for small databases and high support threshold values. On the other hand, using DRFP-growth, we are still able to mine huge databases for low support threshold values (the only limitation is the available secondary storage rather than physical memory). The reported test results demonstrate how the proposed approach succeeds for cases where main memory based approaches fail.", "paper_title": "DRFP-tree: disk-resident frequent pattern tree", "paper_id": "WOS:000264460000002"}