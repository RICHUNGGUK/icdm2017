{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "complexity_gap"}, {"score": 0.003784120134537663, "phrase": "k-colouring_problem"}, {"score": 0.00352597432462803, "phrase": "k-precolouring_extension_problem"}, {"score": 0.0031254704616199614, "phrase": "g._a_k-list_assignment"}, {"score": 0.002816814445002924, "phrase": "list_k-colouring_problem"}, {"score": 0.002496659907186784, "phrase": "computational_complexity"}, {"score": 0.00224061675049049, "phrase": "fixed_positive_integers"}, {"score": 0.0021049977753042253, "phrase": "new_np-completeness_results"}], "paper_keywords": ["graph colouring", " forbidden induced subgraph", " computational complexity", " list colouring", " precolouring extension"], "paper_abstract": "For a positive integer k and graph G = (V, E), a k-colouring of G is amapping c : V ->{1, 2,..., k} such that c(u) not equal c(v) whenever uv is an element of E. The k-Colouring problem is to decide, for a given G, whether a k-colouring of G exists. The k-Precolouring Extension problem is to decide, for a given G = (V, E), whether a colouring of a subset of V can be extended to a k-colouring of G. A k-list assignment of a graph is an allocation of a list-a subset of {1,..., k}-to each vertex, and the List k-Colouring problem is to decide, for a given G, whether G has a k-colouring in which each vertex is coloured with a colour from its list. We consider the computational complexity of these three decision problems when restricted to graphs that do not contain a cycle on s vertices or a path on t vertices as induced subgraphs (for fixed positive integers s and t). We report on past work and prove a number of new NP-completeness results.", "paper_title": "Narrowing the Complexity Gap for Colouring (C-s, P-t)-Free Graphs", "paper_id": "WOS:000365157000019"}