{"auto_keywords": [{"score": 0.039597752374290154, "phrase": "nuda"}, {"score": 0.00481495049065317, "phrase": "many-core_systems"}, {"score": 0.0047707093928203, "phrase": "traditional_debugging_methodologies"}, {"score": 0.004619027561771169, "phrase": "debugging_support"}, {"score": 0.0045765783794477505, "phrase": "many-core_parallel_programming"}, {"score": 0.004410629943506433, "phrase": "race_conditions"}, {"score": 0.004270347498153512, "phrase": "existing_debugging_tools"}, {"score": 0.004172874316207784, "phrase": "globally_synchronized_signals"}, {"score": 0.003947884118204803, "phrase": "first_contribution"}, {"score": 0.0038046452381676967, "phrase": "novel_non-uniform_debugging_architecture"}, {"score": 0.003683565150278339, "phrase": "ring_interconnection_schema"}, {"score": 0.003616108223034427, "phrase": "hardware-assisted_debugging"}, {"score": 0.003517223847512266, "phrase": "many-core_processing_scenarios"}, {"score": 0.0033739270918502285, "phrase": "debugging_support_structures"}, {"score": 0.0032968474833776906, "phrase": "hierarchical_clusters"}, {"score": 0.0032514447965530354, "phrase": "address_overlap"}, {"score": 0.0032066653632708965, "phrase": "design_strategy"}, {"score": 0.0031625006830124512, "phrase": "address_space"}, {"score": 0.00309023627455429, "phrase": "non-uniform_protocols"}, {"score": 0.002991823455621222, "phrase": "nonintrusive_approach"}, {"score": 0.0029642838574678526, "phrase": "lockset-based_race_detection"}, {"score": 0.002909960617042717, "phrase": "nuda."}, {"score": 0.00288317238346065, "phrase": "non-uniform_page-based_monitoring_cache"}, {"score": 0.0027275289970185015, "phrase": "access_footprints"}, {"score": 0.0026042472337367015, "phrase": "race_detection_probe"}, {"score": 0.0025683581446365165, "phrase": "execution_ordering"}, {"score": 0.0025212722607043546, "phrase": "proposed_approach"}, {"score": 0.0024636239664210433, "phrase": "parallel_race_bugs"}, {"score": 0.00229844995872581, "phrase": "average_slowdown_cost"}, {"score": 0.0022458849724980904, "phrase": "net_hardware_cost"}, {"score": 0.0021049977753042253, "phrase": "increasingly_complex_many-core_systems"}], "paper_keywords": ["NUDA", " lockset", " data race", " nonintrusive", " manycore", " debugging"], "paper_abstract": "Traditional debugging methodologies are limited in their ability to provide debugging support for many-core parallel programming. Synchronization problems or bugs due to race conditions are particularly difficult to detect with existing debugging tools. Most traditional debugging approaches rely on globally synchronized signals, but these pose their own problems in terms of scalability. The first contribution of this paper is to propose a novel non-uniform debugging architecture (NUDA) based on a ring interconnection schema. Our approach makes hardware-assisted debugging both feasible and scalable for many-core processing scenarios. The key idea is to distribute the debugging support structures across a set of hierarchical clusters while avoiding address overlap. The design strategy allows the address space to be monitored using non-uniform protocols. Our second contribution is to propose a nonintrusive approach to lockset-based race detection supported by the NUDA. A non-uniform page-based monitoring cache in each NUDA node is used to keep track of the access footprints. The union of all the caches can serve as a race detection probe without disturbing execution ordering. Using the proposed approach, we show that parallel race bugs can be precisely captured, and that most false-positive alerts can be efficiently eliminated at an average slowdown cost of only 1.4-3.6 percent. The net hardware cost is relatively low, so that the NUDA can easily be scaled to increasingly complex many-core systems.", "paper_title": "NUDA: A Non-Uniform Debugging Architecture and Nonintrusive Race Detection for Many-Core Systems", "paper_id": "WOS:000298560500006"}