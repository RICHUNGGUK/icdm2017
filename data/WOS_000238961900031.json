{"auto_keywords": [{"score": 0.023618278306569283, "phrase": "sequential_insertion"}, {"score": 0.023325552575137024, "phrase": "batch-construction"}, {"score": 0.00481495049065317, "phrase": "index_recovery"}, {"score": 0.004605434064238641, "phrase": "essential_step"}, {"score": 0.00454725669814484, "phrase": "database_recovery"}, {"score": 0.004489810932879285, "phrase": "fast_recovery"}, {"score": 0.004321772629297024, "phrase": "necessary_condition"}, {"score": 0.004267163206961948, "phrase": "fast_database_recovery"}, {"score": 0.003757480190200645, "phrase": "max-pl."}, {"score": 0.003709974534103202, "phrase": "main_idea"}, {"score": 0.003663067281537946, "phrase": "max-pl"}, {"score": 0.0034154440860550564, "phrase": "pre-stored_max_keys"}, {"score": 0.0031643005824589917, "phrase": "data_pointers"}, {"score": 0.002988101395789399, "phrase": "pipelining_mechanism"}, {"score": 0.002912963877144772, "phrase": "data_records"}, {"score": 0.0025974916908139472, "phrase": "overall_performance"}, {"score": 0.0025160740422447837, "phrase": "time_complexity"}, {"score": 0.0024842242921857705, "phrase": "space_requirement"}, {"score": 0.002360796860462937, "phrase": "experimental_study"}], "paper_keywords": ["B plus -Trees", " index rebuilding", " index reconstruction", " index recovery"], "paper_abstract": "Rebuilding an index is an essential step for database recovery. Fast recovery of the index is a necessary condition for fast database recovery. The B+-Tree is the most popular index structure in database systems. In this paper, we present a fast B+-Tree rebuilding algorithm called Max-PL. The main idea of Max-PL is that at first it constructs a B+-Tree index structure using the pre-stored max keys of the leaf nodes, and then inserts the keys and data pointers into the index. The algorithm employs a pipelining mechanism for reading the data records and inserting the keys into the index. It also exploits parallelisms in several phases to boost the overall performance. We analyze the time complexity and space requirement of the algorithm, and perform the experimental study to compare its performance to other B+-Trees rebuilding algorithms; Sequential Insertion and Batch-Construction. The results show that our algorithm runs on average at least 670% faster than Sequential Insertion and 200% faster than Batch-Construction.", "paper_title": "Fast rebuilding B+-Trees for index recovery", "paper_id": "WOS:000238961900031"}