{"auto_keywords": [{"score": 0.028981502876428932, "phrase": "proposed_approach"}, {"score": 0.015719716506582538, "phrase": "prelarge_trees"}, {"score": 0.00836285789788034, "phrase": "new_transactions"}, {"score": 0.004759635663291431, "phrase": "incrementally_mine_frequent_itemsets"}, {"score": 0.004677847043645765, "phrase": "frequent_pattern_tree"}, {"score": 0.004624221529837011, "phrase": "fp"}, {"score": 0.004466519142879166, "phrase": "efficient_data_structure"}, {"score": 0.004415189385015778, "phrase": "association-rule_mining"}, {"score": 0.004314285113050873, "phrase": "candidate_itemsets"}, {"score": 0.004048483412089098, "phrase": "tree_structure"}, {"score": 0.0036907133026806327, "phrase": "batch_way"}, {"score": 0.003306559295382181, "phrase": "tree_update_process"}, {"score": 0.002996761094541162, "phrase": "association_rules"}, {"score": 0.0028944757265206332, "phrase": "pre-large_itemsets"}, {"score": 0.0027795345823932406, "phrase": "pre-large_concepts"}, {"score": 0.002623184850933423, "phrase": "original_database"}, {"score": 0.002391067964886602, "phrase": "good_execution_time"}, {"score": 0.002363532907211947, "phrase": "tree_construction"}, {"score": 0.002309408211203032, "phrase": "small_number"}, {"score": 0.0022048406330100697, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "good_performance"}], "paper_keywords": ["Data Mining", " FP-tree", " Prelarge-tree Algorithm", " Incremental Mining", " Maintenance"], "paper_abstract": "The frequent pattern tree (FP-tree) is an efficient data structure for association-rule mining without generation of candidate itemsets. It was used to compress a database into a tree structure which stored only large items. It, however, needed to process all transactions in a batch way. In the past, we proposed a Fast Updated FP-tree (FUFP-tree) structure to efficiently handle new transactions and to make the tree update process become easier. In this paper, we propose the structure of prelarge trees to incrementally mine association rules based on the concept of pre-large itemsets. Due to the properties of pre-large concepts, the proposed approach does not need to rescan the original database until a number of new transactions have been inserted. The proposed approach can thus achieve a good execution time for tree construction especially when a small number of transactions are inserted each time. Experimental results also show that the proposed approach has a good performance for incrementally handling new transactions.", "paper_title": "Using the Structure of Prelarge Trees to Incrementally Mine Frequent Itemsets", "paper_id": "WOS:000274651600002"}