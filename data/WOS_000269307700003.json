{"auto_keywords": [{"score": 0.03005907338620277, "phrase": "first_variant"}, {"score": 0.028589123209321127, "phrase": "second_variant"}, {"score": 0.00481495049065317, "phrase": "weighted_sum_coloring"}, {"score": 0.0047797212183363835, "phrase": "batch_scheduling_of"}, {"score": 0.004762202897268383, "phrase": "conflicting_jobs"}, {"score": 0.0045736684402340275, "phrase": "manufacturing_systems"}, {"score": 0.004007083686875716, "phrase": "processing_time_p"}, {"score": 0.0039053194919285725, "phrase": "undirected_intersection_graph"}, {"score": 0.0038624981944755813, "phrase": "vertical_bar"}, {"score": 0.0032021226849872054, "phrase": "last_job"}, {"score": 0.003030247482854539, "phrase": "job_completion_times"}, {"score": 0.002942373803701752, "phrase": "completion_time"}, {"score": 0.0024842242921857705, "phrase": "greedy_set_cover_algorithm"}, {"score": 0.0024389277933858054, "phrase": "perfect_graphs"}, {"score": 0.002368160970983679, "phrase": "new_or_improved_approximations"}, {"score": 0.0023249757987087055, "phrase": "different_classes"}, {"score": 0.0022575078732617678, "phrase": "widely_different_genres"}, {"score": 0.002136226584784576, "phrase": "common_feature"}, {"score": 0.0021049977753042253, "phrase": "randomized_geometric_partitioning"}], "paper_keywords": ["Approximation algorithms", " Batch scheduling", " Geometric partitioning"], "paper_abstract": "Motivated by applications in batch scheduling of jobs in manufacturing systems and distributed computing, we study two related problems. Given is a set of jobs {J (1),aEuro broken vertical bar,J (n) }, where J (j) has a processing time p (j) , and an undirected intersection graph G=({1,aEuro broken vertical bar,n},E), with an edge (i,j) whenever the pair of jobs J (i) and J (j) cannot be processed in the same batch. We are to schedule the jobs in batches, where each batch completes its processing when the last job in the batch completes execution. The goal is to minimize the sum of job completion times. Our two problems differ in the definition of completion time of a job within a given batch. In the first variant, a job completes its execution when its batch is completed, whereas in the second variant, a job completes execution when its own processing is completed. For the first variant, we show that an adaptation of the greedy set cover algorithm gives a 4-approximation for perfect graphs. For the second variant, we give new or improved approximations for a number of different classes of graphs. The algorithms are of widely different genres (LP, greedy, subgraph covering), yet they curiously share a common feature in their use of randomized geometric partitioning.", "paper_title": "Weighted Sum Coloring in Batch Scheduling of Conflicting Jobs", "paper_id": "WOS:000269307700003"}