{"auto_keywords": [{"score": 0.049460287006492715, "phrase": "transactional_web_services"}, {"score": 0.015719716506582538, "phrase": "fault-tolerant_composition"}, {"score": 0.011462686413437617, "phrase": "facts"}, {"score": 0.008677129791382573, "phrase": "fault-handling_logic"}, {"score": 0.0045411156682300695, "phrase": "web_services_composition_language"}, {"score": 0.00445332728705756, "phrase": "widespread_acceptance"}, {"score": 0.004395742407834023, "phrase": "composition_technologies"}, {"score": 0.004338898899247236, "phrase": "web_services_composition"}, {"score": 0.004227398267369744, "phrase": "efficient_and_cost-effective_way"}, {"score": 0.004012885020428863, "phrase": "web_services"}, {"score": 0.0038092152998069786, "phrase": "reliable_web_services_composition"}, {"score": 0.0037599278182081056, "phrase": "unreliable_web_services"}, {"score": 0.0036871853429163953, "phrase": "significant_and_challenging_problem"}, {"score": 0.003194898129853895, "phrase": "high-level_exception_handling_strategies"}, {"score": 0.0029933487820771217, "phrase": "fault-tolerant_mechanism"}, {"score": 0.0029163246959273605, "phrase": "handling_and_transaction_techniques"}, {"score": 0.002804478352027886, "phrase": "specification_module"}, {"score": 0.0027501697136375555, "phrase": "verification_module"}, {"score": 0.0026969099161088398, "phrase": "service_designers"}, {"score": 0.002477753633057247, "phrase": "implementation_module"}, {"score": 0.002382687623348748, "phrase": "ws-bpel."}, {"score": 0.002351813899450668, "phrase": "case_study"}, {"score": 0.0022468671200629024, "phrase": "experimental_results"}, {"score": 0.002160640052461594, "phrase": "fault_tolerance"}, {"score": 0.002132637840285576, "phrase": "composite_services"}, {"score": 0.0021049977753042253, "phrase": "acceptable_overheads"}], "paper_keywords": ["Reliable Web services composition", " fault tolerant", " transaction", " exception handling"], "paper_abstract": "Along with the standardization of Web services composition language and the widespread acceptance of composition technologies, Web services composition is becoming an efficient and cost-effective way to develop modern business applications. As Web services are inherently unreliable, how to deliver reliable Web services composition over unreliable Web services is a significant and challenging problem. In this paper, we propose FACTS, a framework for fault-tolerant composition of transactional Web services. We identify a set of high-level exception handling strategies and a new taxonomy of transactional Web services to devise a fault-tolerant mechanism that combines exception handling and transaction techniques. We also devise a specification module and a verification module to assist service designers to construct fault-handling logic conveniently and correctly. Furthermore, we design an implementation module to automatically implement fault-handling logic in WS-BPEL. A case study demonstrates the viability of our framework and experimental results show that FACTS can improve fault tolerance of composite services with acceptable overheads.", "paper_title": "FACTS: A Framework for Fault-Tolerant Composition of Transactional Web Services", "paper_id": "WOS:000208240600006"}