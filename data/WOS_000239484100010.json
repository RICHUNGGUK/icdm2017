{"auto_keywords": [{"score": 0.045521727399967175, "phrase": "weighted_matching"}, {"score": 0.03363896917055258, "phrase": "maximum_weighted_matching"}, {"score": 0.00481495049065317, "phrase": "weighted_matchings"}, {"score": 0.004483909657713567, "phrase": "distributed_algorithms"}, {"score": 0.0036207206487324506, "phrase": "arbitrary_weighted_trees"}, {"score": 0.003544088803300751, "phrase": "first_algorithm"}, {"score": 0.0034690732089830045, "phrase": "randomised_distributed_algorithm"}, {"score": 0.0033001333942688747, "phrase": "arbitrary_weighted_tree"}, {"score": 0.002923214590192792, "phrase": "running_time"}, {"score": 0.0028006988338192375, "phrase": "second_algorithm"}, {"score": 0.0021352776064254195, "phrase": "maximum_unweighted_matchings"}, {"score": 0.0021049977753042253, "phrase": "regular_and_almost_regular_graphs"}], "paper_keywords": [""], "paper_abstract": "In this paper, we study distributed algorithms to compute a weighted matching that have constant (or at least sub-logarithmic) running time and that achieve approximation ratio 2 + is an element of or better. In fact we present two such synchronous algorithms, that work on arbitrary weighted trees. The first algorithm is a randomised distributed algorithm that computes a weighted matching of an arbitrary weighted tree, that approximates the maximum weighted matching by a factor 2 + is an element of. The running time is O(1). The second algorithm is deterministic, and approximates the maximum weighted matching by a factor 2 + is an element of, but has running time 0(log* vertical bar V vertical bar). Our algorithms can also be used to compute maximum unweighted matchings on regular and almost regular graphs within a constant approximation.", "paper_title": "Efficient distributed weighted matchings on trees", "paper_id": "WOS:000239484100010"}