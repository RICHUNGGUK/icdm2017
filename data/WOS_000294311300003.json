{"auto_keywords": [{"score": 0.04780597585803098, "phrase": "in-network_stream-processing"}, {"score": 0.033322936002888284, "phrase": "different_applications"}, {"score": 0.00481495049065317, "phrase": "multiple_concurrent_in-network_stream-processing_applications"}, {"score": 0.004498213310668266, "phrase": "stream-processing_application"}, {"score": 0.004284755353695709, "phrase": "steady-state_mode"}, {"score": 0.004101281992566145, "phrase": "different_locations"}, {"score": 0.003906586074865932, "phrase": "updated_final_results"}, {"score": 0.0038499929374478125, "phrase": "desired_rate"}, {"score": 0.0037030390595465673, "phrase": "operator_computations"}, {"score": 0.003294875957676514, "phrase": "multiple_concurrent_stream-processing_applications"}, {"score": 0.003200045185608395, "phrase": "different_operator_trees"}, {"score": 0.0031079352545607267, "phrase": "common_subtrees"}, {"score": 0.0030480018094535158, "phrase": "intermediate_results"}, {"score": 0.002903161412792026, "phrase": "complexity_results"}, {"score": 0.0028750275511802157, "phrase": "different_versions"}, {"score": 0.0028333356794133053, "phrase": "operator_mapping_problem"}, {"score": 0.0027383842769094354, "phrase": "integer_linear_programs"}, {"score": 0.0026466064623118105, "phrase": "particularly_relevant_version"}, {"score": 0.0025589401437016283, "phrase": "np"}, {"score": 0.002199363362666037, "phrase": "common_sub-trees"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["In-network stream-processing", " Trees of operators", " Multiple concurrent applications", " Operator mapping", " Polynomial heuristics"], "paper_abstract": "This work investigates the operator mapping problem for in-network stream-processing. In a stream-processing application, a tree of operators is applied, in steady-state mode, to datasets that are continuously updated at different locations in the network. The goal is to generate updated final results at a desired rate. In in-network stream-processing, dataset updates and operator computations are performed by servers distributed in a network. We consider the problem of mapping operators to these servers in the case of multiple concurrent stream-processing applications. In this case, different operator trees corresponding to different applications may share common subtrees, so that intermediate results can be reused by different applications. This work provides complexity results for different versions of the operator mapping problem, which can be formulated as integer linear programs. Several polynomial-time heuristics are proposed for a particularly relevant version of the problem, which is NP-hard. These heuristics are compared and evaluated via simulation. The results demonstrate the importance of mapping the operators to appropriate processors, and the importance of sharing common sub-trees across operator trees. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Resource allocation for multiple concurrent in-network stream-processing applications", "paper_id": "WOS:000294311300003"}