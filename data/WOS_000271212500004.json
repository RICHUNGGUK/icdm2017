{"auto_keywords": [{"score": 0.04933866662045337, "phrase": "compiler_analysis"}, {"score": 0.03902168420537032, "phrase": "last_use"}, {"score": 0.00481495049065317, "phrase": "early_register_release"}, {"score": 0.004691465925553365, "phrase": "register_pressure"}, {"score": 0.0046429592670444945, "phrase": "modern_superscalar_processors"}, {"score": 0.004339609346924681, "phrase": "cheap_back-up_storage"}, {"score": 0.004206338218873218, "phrase": "potential_benefits"}, {"score": 0.004162826481635768, "phrase": "register_occupancy_reduction"}, {"score": 0.0040771431404398855, "phrase": "existing_hardware-based_schemes"}, {"score": 0.003542976343910816, "phrase": "redefining_instruction"}, {"score": 0.0033285306462537884, "phrase": "global_view"}, {"score": 0.0032094634756436595, "phrase": "simple_dataflow_analysis"}, {"score": 0.0028622019660721363, "phrase": "design_space"}, {"score": 0.002619748321217153, "phrase": "simple_compiler_analysis"}, {"score": 0.0024868131939261716, "phrase": "potential_register_file_occupancy_reduction"}, {"score": 0.0021831803612759855, "phrase": "varying_register_file_sizes"}, {"score": 0.0021049977753042253, "phrase": "existing_techniques"}], "paper_keywords": ["Experimentation", " Measurement", " Performance", " Low-power design", " energy efficiency", " compiler", " microarchitecture", " register file"], "paper_abstract": "Register pressure in modern superscalar processors can be reduced by releasing registers early and by copying their contents to cheap back-up storage. This article quantifies the potential benefits of register occupancy reduction and shows that existing hardware-based schemes typically achieve only a small fraction of this potential. This is because they are unable to accurately determine the last use of a register and must wait until the redefining instruction enters the pipeline. On the other hand, compilers have a global view of the program and, using simple dataflow analysis, can determine the last use. This article evaluates the extent to which compiler analysis can aid early releasing, explores the design space, and introduces commit and issue-based early releasing schemes, quantifying their benefits. Using simple compiler analysis and microarchitecture changes, we achieve 70% of the potential register file occupancy reduction. By adding more hardware support, we can increase this to 94%. Our schemes are compared to state-of-the-art approaches for varying register file sizes and are shown to outperform these existing techniques.", "paper_title": "Exploring the Limits of Early Register Release: Exploiting Compiler Analysis", "paper_id": "WOS:000271212500004"}