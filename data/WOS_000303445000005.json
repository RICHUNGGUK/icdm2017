{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "continuous_sampling"}, {"score": 0.004764542405129454, "phrase": "distributed_streams"}, {"score": 0.00468991337957911, "phrase": "fundamental_problem"}, {"score": 0.004640808212832262, "phrase": "data_management"}, {"score": 0.004402854153653114, "phrase": "large_data_set"}, {"score": 0.00433386573276633, "phrase": "approximate_query_answering"}, {"score": 0.004288472456976113, "phrase": "selectivity_estimation"}, {"score": 0.0042212686864468805, "phrase": "query_planning"}, {"score": 0.00388016972840459, "phrase": "multiple_distributed_sites"}, {"score": 0.003819339842998955, "phrase": "main_challenge"}, {"score": 0.003312901888725435, "phrase": "evolving_data"}, {"score": 0.002769304577201566, "phrase": "communication-efficient_protocols"}, {"score": 0.0025722202862084186, "phrase": "k_distributed_streams"}, {"score": 0.0023891283748647416, "phrase": "full_streams"}, {"score": 0.002326938965568362, "phrase": "sliding_window_cases"}, {"score": 0.0022307779508260205, "phrase": "time_units"}, {"score": 0.0021049977753042253, "phrase": "logarithmic_factors"}], "paper_keywords": ["Algorithms", " theory", " Distributed tracking", " random sampling"], "paper_abstract": "A fundamental problem in data management is to draw and maintain a sample of a large data set, for approximate query answering, selectivity estimation, and query planning. With large, streaming data sets, this problem becomes particularly difficult when the data is shared across multiple distributed sites. The main challenge is to ensure that a sample is drawn uniformly across the union of the data while minimizing the communication needed to run the protocol on the evolving data. At the same time, it is also necessary to make the protocol lightweight, by keeping the space and time costs low for each participant. In this article, we present communication-efficient protocols for continuously maintaining a sample (both with and without replacement) from k distributed streams. These apply to the case when we want a sample from the full streams, and to the sliding window cases of only the W most recent elements, or arrivals within the last w time units. We show that our protocols are optimal (up to logarithmic factors), not just in terms of the communication used, but also the time and space costs for each participant.", "paper_title": "Continuous Sampling from Distributed Streams", "paper_id": "WOS:000303445000005"}