{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "theory"}, {"score": 0.00470341117804131, "phrase": "lru-mru_collaborative_cache_management"}, {"score": 0.004567596860086148, "phrase": "cache_management"}, {"score": 0.004461761855323898, "phrase": "data_reuse"}, {"score": 0.00440976345264104, "phrase": "collaborative_caching"}, {"score": 0.004207734323806386, "phrase": "access_information"}, {"score": 0.003968112038249246, "phrase": "optimal_cache_performance"}, {"score": 0.00376409764683147, "phrase": "collaborative_caching_system"}, {"score": 0.0036126731589251906, "phrase": "different_caching_methods"}, {"score": 0.0033473779327638322, "phrase": "arbitrary_ways"}, {"score": 0.0030295361111006866, "phrase": "theoretical_foundation"}, {"score": 0.002994178996584381, "phrase": "collaborative_caches"}, {"score": 0.002924694271730544, "phrase": "inclusion_principle"}, {"score": 0.0028234703730349916, "phrase": "distance_metric"}, {"score": 0.0027741761880779535, "phrase": "lru-mru"}, {"score": 0.002693919110230191, "phrase": "new_stack_distance"}, {"score": 0.0026313840069327713, "phrase": "program_analysis"}, {"score": 0.002540285736232122, "phrase": "hierarchical_collaborative_cache_system"}, {"score": 0.0024813081174066653, "phrase": "single_cache_configuration"}, {"score": 0.0023674192513753996, "phrase": "optimal_caching"}, {"score": 0.0023124457559811087, "phrase": "average_miss_ratio"}, {"score": 0.0022323643840655646, "phrase": "simple_feedback-driven_compilation_technique"}, {"score": 0.0021049977753042253, "phrase": "optimal_improvement"}], "paper_keywords": ["Algorithms", " Measurement", " Performance", " collaborative caching", " bipartite cache", " cache replacement algorithm", " LRU", " MRU", " OPT"], "paper_abstract": "The goal of cache management is to maximize data reuse. Collaborative caching provides an interface for software to communicate access information to hardware. In theory, it can obtain optimal cache performance. In this paper, we study a collaborative caching system that allows a program to choose different caching methods for its data. As an interface, it may be used in arbitrary ways, sometimes optimal but probably suboptimal most times and even counter productive. We develop a theoretical foundation for collaborative caches to show the inclusion principle and the existence of a distance metric we call LRU-MRU stack distance. The new stack distance is important for program analysis and transformation to target a hierarchical collaborative cache system rather than a single cache configuration. We use 10 benchmark programs to show that optimal caching may reduce the average miss ratio by 24%, and a simple feedback-driven compilation technique can utilize collaborative cache to realize 50% of the optimal improvement.", "paper_title": "On the Theory and Potential of LRU-MRU Collaborative Cache Management", "paper_id": "WOS:000298295400004"}