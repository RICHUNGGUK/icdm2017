{"auto_keywords": [{"score": 0.04599283119366167, "phrase": "event_matching"}, {"score": 0.03570437638468883, "phrase": "hash_tree"}, {"score": 0.004349337717774093, "phrase": "fundamental_component"}, {"score": 0.0037495207047193034, "phrase": "system_performance"}, {"score": 0.0036553070575015344, "phrase": "significant_performance_degradation"}, {"score": 0.003578600071301459, "phrase": "large_numbers"}, {"score": 0.0031375577552605533, "phrase": "hash_table"}, {"score": 0.003032820755030689, "phrase": "hash_lists"}, {"score": 0.0030071857666598193, "phrase": "hash_chaining"}, {"score": 0.0029691377785333872, "phrase": "hash_list"}, {"score": 0.0028944757265206332, "phrase": "indexed_attribute"}, {"score": 0.002857849698346116, "phrase": "novel_overlapping_divisions"}, {"score": 0.002821685815956478, "phrase": "attribute's_value_domain"}, {"score": 0.002762423953243486, "phrase": "multiple_hash_lists"}, {"score": 0.002658863179011018, "phrase": "basic_idea"}, {"score": 0.002603012037901889, "phrase": "matching_efficiencies"}, {"score": 0.002548331088496964, "phrase": "search_space"}, {"score": 0.0023309080951251335, "phrase": "extensive_experiments"}, {"score": 0.0023111922860677672, "phrase": "different_settings"}, {"score": 0.00229164285862567, "phrase": "experimental_results"}, {"score": 0.0022434880661725493, "phrase": "better_performance"}, {"score": 0.002196342933346204, "phrase": "large_margin"}, {"score": 0.0021410718792612173, "phrase": "matching_speed"}], "paper_keywords": ["Content-based publish/subscribe", " event matching", " index structure", " performance", " matching time"], "paper_abstract": "Content-based publish/subscribe systems have been employed to deal with complex distributed information flows in many applications. It is well recognized that event matching is a fundamental component of such large-scale systems. Event matching searches a space which is composed of all subscriptions. As the scale and complexity of a system grows, the efficiency of event matching becomes more critical to system performance. However, most existing methods suffer significant performance degradation when the system has large numbers of both subscriptions and their component constraints. In this paper, we present Hash Tree (H-Tree), a highly efficient index structure for event matching. H-Tree is a hash table in nature that is a combination of hash lists and hash chaining. A hash list is built up on an indexed attribute by realizing novel overlapping divisions of the attribute's value domain, providing more efficient space consumption. Multiple hash lists are then combined into a hash tree. The basic idea behind H-Tree is that matching efficiencies are improved when the search space is substantially reduced by pruning most of the subscriptions that are not matched. We have implemented H-Tree and conducted extensive experiments in different settings. Experimental results demonstrate that H-Tree has better performance than its counterparts by a large margin. In particular, the matching speed is faster by three orders of magnitude than its counterparts when the numbers of both subscriptions and their component constraints are huge.", "paper_title": "H-Tree: An Efficient Index Structure for Event Matching in Content-Based Publish/Subscribe Systems", "paper_id": "WOS:000354526000011"}