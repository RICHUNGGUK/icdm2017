{"auto_keywords": [{"score": 0.04812854551814997, "phrase": "type_inference"}, {"score": 0.011540879464134762, "phrase": "type_annotations"}, {"score": 0.009782571582177105, "phrase": "polymorphic_recursion"}, {"score": 0.007551944861382956, "phrase": "vector_types"}, {"score": 0.00481495049065317, "phrase": "complete_type_inference"}, {"score": 0.0047651735498110605, "phrase": "hindley-milner"}, {"score": 0.004715908063787721, "phrase": "vector_sizes"}, {"score": 0.004571133708117498, "phrase": "program_analysis"}, {"score": 0.004500414250942443, "phrase": "static_properties"}, {"score": 0.003993216345115755, "phrase": "denotational_semantics"}, {"score": 0.0039519004610213595, "phrase": "abstract_interpretation"}, {"score": 0.003850464100878052, "phrase": "completeness_results"}, {"score": 0.0037908515763223107, "phrase": "abstract_interpretation_literature"}, {"score": 0.0036743708250589484, "phrase": "type_inferences"}, {"score": 0.0032599633778910516, "phrase": "resulting_algorithm"}, {"score": 0.0031597433845085092, "phrase": "milner-mycroft"}, {"score": 0.0030466955629231047, "phrase": "hindley-milner_types"}, {"score": 0.0028622019660721363, "phrase": "practical_check"}, {"score": 0.0027454383581457555, "phrase": "type_schemes"}, {"score": 0.0025657442830956017, "phrase": "abstract_domain"}, {"score": 0.0022524959504997303, "phrase": "linear_equalities"}, {"score": 0.0022175679453857473, "phrase": "practical_uses"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Type inference", " Completeness", " Abstract interpretation", " Polymorphic recursion", " Vector size inference"], "paper_abstract": "Type inference and program analysis both infer static properties about a program. Yet, they are constructed using very different techniques. We reconcile both approaches by deriving a type inference from a denotational semantics using abstract interpretation. We observe that completeness results in the abstract interpretation literature can be used to derive type inferences that are backward complete, implying that type annotations cannot improve the result of type inference, thus making type annotations optional. The resulting algorithm is similar to that of Milner-Mycroft, that is, it infers Hindley-Milner types while allowing for polymorphic recursion. Although undecidable, we present a practical check that reliably distinguishes typeable from untypeable programs.,Instead of type schemes, we use expansion to instantiate types. Since our expansion operator is agnostic to the abstract domain, we are able to apply it not only to types. We illustrate this by inferring the size of vector types using systems of linear equalities and present practical uses of polymorphic recursion using vector types. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Deriving a complete type inference for Hindley-Milner and vector sizes using expansion", "paper_id": "WOS:000344578700006"}