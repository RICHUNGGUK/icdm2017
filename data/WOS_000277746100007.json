{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "core_software_component"}, {"score": 0.004662427600500598, "phrase": "small_specialized_embedded_systems"}, {"score": 0.0045879792359519375, "phrase": "large_distributed_oss"}, {"score": 0.0038846843242954935, "phrase": "user_and_system_processes"}, {"score": 0.0037615180375561805, "phrase": "increasingly_distributed_and_decentralized_systems"}, {"score": 0.0036227329311981195, "phrase": "existing_oss_employ"}, {"score": 0.003470358620464986, "phrase": "unmanageable_programming_complexities"}, {"score": 0.0033602844686125375, "phrase": "resulting_systems"}, {"score": 0.0030017207229983385, "phrase": "process-oriented_design"}, {"score": 0.002953711377604328, "phrase": "universal_serial_bus_device_driver_infrastructure"}, {"score": 0.0027543636132088332, "phrase": "occam-pi_multiprocessing_language"}, {"score": 0.002407941567598653, "phrase": "aliasing_errors"}, {"score": 0.0023189818169615135, "phrase": "operating_system_scalability"}, {"score": 0.0021049977753042253, "phrase": "initial_online_publication"}], "paper_keywords": ["concurrency", " operating systems", " RMoX", " embedded systems", " occam-pi", " CSP", " USB"], "paper_abstract": "Operating systems (OSs) are the core software component of many modern computer systems, ranging from small specialized embedded systems through to large distributed OSs. The demands placed upon these systems are increasingly complex, in particular, the need to handle concurrency in order to exploit increasingly parallel (multi-core) hardware, to support increasing numbers of user and system processes and to take advantage of increasingly distributed and decentralized systems. The languages and designs that existing OSs employ provide little support for concurrency, leading to unmanageable programming complexities and ultimately errors in the resulting systems, which are hard to detect, hard to remove and hard to prove correct. This article presents the process-oriented design of a universal serial bus device driver infrastructure for the Raw Metal occam eXperiment (RMoX) OS and its implementation in the occam-pi multiprocessing language. We show how concurrency can be used for the benefit of such systems, simplifying design and implementation, providing freedom from race-hazard and aliasing errors and the potential for guarantees of operating system scalability, reliability and efficiency. Copyright (C) 2007 F.R.M. Barnes & C.G. Ritson. [Correction made here after initial online publication]", "paper_title": "Process-oriented device driver development", "paper_id": "WOS:000277746100007"}