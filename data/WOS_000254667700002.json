{"auto_keywords": [{"score": 0.0416461944039994, "phrase": "ocl_specifications"}, {"score": 0.015175592942866451, "phrase": "ocl"}, {"score": 0.00481495049065317, "phrase": "object_constraint_language_specifications"}, {"score": 0.004713162564945179, "phrase": "object_constraint_language"}, {"score": 0.004515967518891287, "phrase": "important_role"}, {"score": 0.004357927940322685, "phrase": "precise_models"}, {"score": 0.003646629717560631, "phrase": "complex_or_duplicated_expressions"}, {"score": 0.003419943984098415, "phrase": "refactoring_techniques"}, {"score": 0.0026077803487003, "phrase": "better_ones"}, {"score": 0.0023766673143502384, "phrase": "model_regression_testing"}, {"score": 0.002181514206602054, "phrase": "ocl_specification"}, {"score": 0.0021049977753042253, "phrase": "manually_performed_refactorings"}], "paper_keywords": [""], "paper_abstract": "The object constraint language (OCL) plays an important role in the elaboration of precise models. Although OCL was designed to be both formal and simple, OCL specifications may be difficult to understand and evolve, particularly those containing complex or duplicated expressions. In this paper, we discuss how refactoring techniques can be applied in order to improve the understandability and maintainability of OCL specifications. In particular, we present several potentially bad constructions often found in OCL specifications and a collection of refactorings that can be applied to replace such constructions by better ones. We also briefly discuss how refactorings can be automated and how model regression testing can be used to increase our confidence that the semantics of an OCL specification has been preserved after manually performed refactorings.", "paper_title": "Refactoring object constraint language specifications", "paper_id": "WOS:000254667700002"}