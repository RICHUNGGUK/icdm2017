{"auto_keywords": [{"score": 0.041425500262378435, "phrase": "program_execution"}, {"score": 0.00481506061581894, "phrase": "sos"}, {"score": 0.0047224703862074665, "phrase": "dynamic_race_detection"}, {"score": 0.0046859752697029355, "phrase": "stationary_analysis"}, {"score": 0.00464976086880886, "phrase": "data_races"}, {"score": 0.00445550467119693, "phrase": "concurrent_program_execution"}, {"score": 0.004421063493736839, "phrase": "traditional_testing_techniques"}, {"score": 0.0042859292226559535, "phrase": "recent_research"}, {"score": 0.004219912413995784, "phrase": "targeted_dynamic_analysis_techniques"}, {"score": 0.004027876348834879, "phrase": "false_race_reports"}, {"score": 0.003889583851551197, "phrase": "precise_race_detection"}, {"score": 0.0033952989364738353, "phrase": "optimization_technique"}, {"score": 0.003045355729156972, "phrase": "stationary_objects"}, {"score": 0.003010063382882408, "phrase": "main_contribution"}, {"score": 0.0029066143383279217, "phrase": "stationary_object"}, {"score": 0.0025967927629150715, "phrase": "average_overhead"}, {"score": 0.002507511542447125, "phrase": "fasttrack"}, {"score": 0.002310915790114425, "phrase": "deployed_environments"}, {"score": 0.0021715177915174375, "phrase": "five_times_more_races"}, {"score": 0.0021546940063069137, "phrase": "pacer"}, {"score": 0.0021049977753042253, "phrase": "runtime_overhead"}], "paper_keywords": ["Experimentation", " Languages", " Performance", " Race", " concurrency", " threading", " monitoring"], "paper_abstract": "Data races are subtle and difficult to detect errors that arise during concurrent program execution. Traditional testing techniques fail to find these errors, but recent research has shown that targeted dynamic analysis techniques can be developed to precisely detect races (i.e., no false race reports are generated) during program execution. Unfortunately, precise race detection is still too expensive to be used in practice. State-of-the-art techniques still slow down program execution by a factor of eight or more. In this paper, we incorporate an optimization technique based on the observation that many thread-shared objects are written early in their lifetimes and then become read-only for the remainder of their lifetimes; these are known as stationary objects. The main contribution of our work is the insight that once a stationary object becomes thread-shared, races cannot occur. Therefore, our proposed approach does not monitor access to these objects. As such, our system only incurs an average overhead of 45% of that of an implementation of FastTrack, a low-overhead dynamic race detector. We then compared the effectiveness of our approach to detect races in deployed environments with that of Pacer, a sampling based race detector based on FastTrack. We found that our approach can detect over five times more races than Pacer when we budget 50% for runtime overhead.", "paper_title": "SOS: Saving Time in Dynamic Race Detection with Stationary Analysis", "paper_id": "WOS:000298294500004"}