{"auto_keywords": [{"score": 0.048231156244864744, "phrase": "infeasible_paths"}, {"score": 0.010464607030004264, "phrase": "graph_model"}, {"score": 0.010063091758603869, "phrase": "mm_paths"}, {"score": 0.004814976592442579, "phrase": "uml"}, {"score": 0.004577440795549049, "phrase": "uml_model-based_analysis"}, {"score": 0.004376131419366239, "phrase": "lower_overhead"}, {"score": 0.004254814649568355, "phrase": "code-based_analysis"}, {"score": 0.004183638135671596, "phrase": "possible_way"}, {"score": 0.00397714507836836, "phrase": "uml_based_analysis"}, {"score": 0.003845154818609644, "phrase": "uml_models"}, {"score": 0.0036966717141736355, "phrase": "null_reference_check"}, {"score": 0.003655366569434599, "phrase": "nlc"}, {"score": 0.0034359094594153304, "phrase": "large_number"}, {"score": 0.0033594249301033604, "phrase": "uml_sequence_diagrams"}, {"score": 0.002951444412262927, "phrase": "mm_path"}, {"score": 0.0028857130140890787, "phrase": "execution_sequence"}, {"score": 0.002853396755102163, "phrase": "model_elements"}, {"score": 0.002727700630869639, "phrase": "method_scope"}, {"score": 0.002535115422089855, "phrase": "mux_and_nlc_patterns"}, {"score": 0.0023962545023307937, "phrase": "test_cases"}, {"score": 0.0023296961971785357, "phrase": "prior-detected_infeasible_paths"}, {"score": 0.0022906498741695094, "phrase": "test_effort_estimation"}, {"score": 0.0022396019251440724, "phrase": "better_test_planning"}, {"score": 0.0022020622730208514, "phrase": "early_stages"}, {"score": 0.0021773853011112882, "phrase": "software_development_life_cycle"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Infeasible path detection", " Model-based analysis", " Softwaretesting", " UML sequence diagram"], "paper_abstract": "UML model-based analysis is gaining wide acceptance for its cost effectiveness and lower overhead for processing compared to code-based analysis. A possible way to enhance the precision of the results of UML based analysis is by detecting infeasible paths in UML models. Our investigation reveals that two interaction patterns called Null Reference Check (NLC) and Mutually Exclusive (MUX) can cause a large number of infeasible paths in UML sequence diagrams. To detect such infeasible paths, we construct a graph model (called SIG), generate MM paths from the graph model, where an MM path refers to an execution sequence of model elements from the start to end of a method scope. Subsequently, we determine infeasibility of the MM paths with respect to MUX and NLC patterns. Our proposed model-based approach is useful to help exclude generation of test cases and test data for prior-detected infeasible paths, refine test effort estimation, and facilitate better test planning in the early stages of software development life cycle. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "A UML model-based approach to detect infeasible paths", "paper_id": "WOS:000358699700005"}