{"auto_keywords": [{"score": 0.048534495128882256, "phrase": "robustness_function"}, {"score": 0.010612387000973441, "phrase": "resource_allocation"}, {"score": 0.004752221133109136, "phrase": "scheduling_problems"}, {"score": 0.004363846362238565, "phrase": "maximum_increase"}, {"score": 0.0036553070575015344, "phrase": "efficient_algorithms"}, {"score": 0.003312486229143855, "phrase": "partition_and_scheduling_matroids"}, {"score": 0.0031845067058084583, "phrase": "scheduling_matroids"}, {"score": 0.003021502415143067, "phrase": "time_algorithm"}, {"score": 0.002943147037670826, "phrase": "complete_description"}, {"score": 0.0025638362414466278, "phrase": "partition_matroids"}, {"score": 0.0024007585788965655, "phrase": "complete_robustness_function"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["robustness", " optimization", " scheduling", " partition matroid"], "paper_abstract": "The robustness function of an optimization (minimization) problem measures the maximum increase in the value of its optimal solution that can be produced by spending a given amount of resources increasing the values of the elements in its input. We present efficient algorithms for computing the robustness function of resource allocation and scheduling problems that can be modeled with partition and scheduling matroids. For the case of scheduling matroids, we give an O(m(2)n(2)) time algorithm for computing a complete description of the robustness function, where in is the number of elements in the matroid and n is its rank. For partition matroids, we give two algorithms: one that computes the complete robustness function in O(m log m) time, and other that optimally evaluates the robustness function at only a specified point. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Efficient algorithms for robustness in resource allocation and scheduling problems", "paper_id": "WOS:000235826900019"}