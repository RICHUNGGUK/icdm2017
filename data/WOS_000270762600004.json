{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "agda"}, {"score": 0.04824812744015586, "phrase": "relational_program_derivation"}, {"score": 0.004283576270012874, "phrase": "relational_specification"}, {"score": 0.004119762981892093, "phrase": "algebraic_rules"}, {"score": 0.0037224647319912293, "phrase": "dependent_type_theory"}, {"score": 0.003389704997952315, "phrase": "type_checker"}, {"score": 0.0029224275921964724, "phrase": "relational_derivations"}, {"score": 0.002854761308379149, "phrase": "dependently_typed_programming_language"}, {"score": 0.0026609940110902666, "phrase": "algebraic_derivation"}, {"score": 0.00253916011199984, "phrase": "type_system"}, {"score": 0.0024040357029838774, "phrase": "optimisation_problem"}, {"score": 0.0021049977753042253, "phrase": "inductive_types"}], "paper_keywords": [""], "paper_abstract": "Relational program derivation is the technique of stepwise refining a relational specification to a program by algebraic rules. The program thus obtained is correct by construction. Meanwhile, dependent type theory is rich enough to express various correctness properties to be verified by the type checker. We have developed a library, AoPA (Algebra of Programming in Agda), to encode relational derivations in the dependently typed programming language Agda. A program is Coupled with an algebraic derivation whose correctness is guaranteed by the type system. Two non-trivial examples are presented: an optimisation problem and a derivation of quicksort in which well-founded recursion is used to model terminating hylomorphisms in a language with inductive types.", "paper_title": "Algebra of programming in Agda: Dependent types for relational program derivation", "paper_id": "WOS:000270762600004"}