{"auto_keywords": [{"score": 0.048734215142491696, "phrase": "surface-embedded_graphs"}, {"score": 0.00481495049065317, "phrase": "first_algorithm"}, {"score": 0.004733347359490221, "phrase": "maximum_flows"}, {"score": 0.004626680470601208, "phrase": "near-linear_time"}, {"score": 0.0043208252177835815, "phrase": "genus_g"}, {"score": 0.0036207206487324506, "phrase": "combinatorial_algorithm"}, {"score": 0.0033427754823819157, "phrase": "special_case"}, {"score": 0.0033048445033866795, "phrase": "planar_graphs"}, {"score": 0.003068537223324389, "phrase": "best_previous_time_bounds"}, {"score": 0.002898291237210567, "phrase": "general_sparse_graphs"}, {"score": 0.0028006988338192375, "phrase": "fixed_genus"}, {"score": 0.0027218799769229596, "phrase": "time_bounds"}, {"score": 0.002690975370565776, "phrase": "roughly_a_factor"}, {"score": 0.0026604207233593973, "phrase": "root_n."}, {"score": 0.002570817338292482, "phrase": "homology_class"}, {"score": 0.0022672718785099666, "phrase": "weighted_sum"}, {"score": 0.00224151735457093, "phrase": "directed_facial_cycles"}, {"score": 0.0022034318550547866, "phrase": "dual_formulation"}, {"score": 0.0021413855297794946, "phrase": "minimum-cost_circulation"}], "paper_keywords": ["maximum flow", " topological graph theory", " homology"], "paper_abstract": "We describe the first algorithm to compute maximum flows in surface-embedded graphs in near-linear time. Specifically, given a graph embedded on a surface of genus g, with two specified vertices s and t and integer edge capacities that sum to C, our algorithm computes a maximum (s, t)-flow in O(g(8)n log(2) n log(2) C) time. We also present a combinatorial algorithm that takes g(O(g)) n(3/2) arithmetic operations. Except for the special case of planar graphs, for which an O(n log n)-time algorithm has been known for 20 years, the best previous time bounds for maximum flows in surface-embedded graphs follow from algorithms for general sparse graphs. For graphs of any fixed genus, our algorithms improve these time bounds by roughly a factor of root n. Our key insight is to optimize the homology class of the flow, rather than directly optimizing the flow itself; two flows are in the same homology class if their difference is a weighted sum of directed facial cycles. A dual formulation of our algorithm computes the minimum-cost circulation in a given (real or integer) homology class.", "paper_title": "HOMOLOGY FLOWS, COHOMOLOGY CUTS", "paper_id": "WOS:000312600700011"}