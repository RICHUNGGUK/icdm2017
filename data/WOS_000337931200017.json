{"auto_keywords": [{"score": 0.009772184992388728, "phrase": "mincpp"}, {"score": 0.004464987136420614, "phrase": "massive_amounts"}, {"score": 0.004315879542755464, "phrase": "file_assignment_method"}, {"score": 0.004267287100135339, "phrase": "significant_role"}, {"score": 0.0042351951710402425, "phrase": "data_management"}, {"score": 0.0038683363637006902, "phrase": "non-partitioned_file"}, {"score": 0.0037109446302945903, "phrase": "aggregated_bandwidth"}, {"score": 0.003641528016135388, "phrase": "file_allocation_metric"}, {"score": 0.0034279721355412285, "phrase": "also_these_metrics"}, {"score": 0.0033765627434550432, "phrase": "static_property"}, {"score": 0.0031784960695034645, "phrase": "dynamic_property"}, {"score": 0.003154566400499823, "phrase": "file_access"}, {"score": 0.00307221807606505, "phrase": "based_on_file_access_density_definition"}, {"score": 0.0030033417337933625, "phrase": "new_static_file_assignment_algorithm"}, {"score": 0.0028485585670146025, "phrase": "disk_contention_property"}, {"score": 0.002763709443278514, "phrase": "file_partition_property"}, {"score": 0.0026212437316947197, "phrase": "different_disks"}, {"score": 0.0025819015229390663, "phrase": "file_request_arrival"}, {"score": 0.002552781867125423, "phrase": "poisson_process"}, {"score": 0.002476721068743341, "phrase": "proposed_schemes"}, {"score": 0.0022110892229209407, "phrase": "file_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel I/O system", " Partitioned file", " File assignment algorithm", " I/O contention probability", " Distributed resource management"], "paper_abstract": "One problem with data-intensive computing facilitating is how to effectively manage massive amounts of data stored in a parallel I/O system. The file assignment method plays a significant role in data management. However, in the context of a parallel I/O system, most existing file assignment approaches share the following two limitations. First, most existing methods are designed for a non-partitioned file, while the file in a parallel I/O system is generally partitioned to provide aggregated bandwidth. Second, the file allocation metric, e.g. service time, of most existing methods is difficult to determine in practice, and also these metrics only reflect the static property of the file. In this paper, a new metric, namely file access density is proposed to capture the dynamic property of file access, i.e. disk contention property. Based on file access density definition, this paper introduces a new static file assignment algorithm named MinCPP and its dynamic version DMinCPP, both of which aim at minimizing the disk contention property. Furthermore MinCPP and DMinCPP take the file partition property into consideration by trying to allocate the partitions belonging to the same file onto different disks. By assuming file request arrival follows the Poisson process, we prove the effectiveness of the proposed schemes both analytically and experimentally. The MinCPP presented in this study can be applied to reorganize the files stored in a large-scale parallel I/O system and the DMinCPP can be integrated into file systems which dynamically allocate files in a batch. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Towards minimizing disk I/O contention: A partitioned file assignment approach", "paper_id": "WOS:000337931200017"}