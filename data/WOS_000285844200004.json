{"auto_keywords": [{"score": 0.031794000108525684, "phrase": "memory-efficient_pattern-matching_algorithm"}, {"score": 0.02638388613279743, "phrase": "memory_reduction"}, {"score": 0.00481495049065317, "phrase": "efficient_pattern_matching_algorithm_for_memory_architecture"}, {"score": 0.004749646583168342, "phrase": "network_intrusion_detection_system"}, {"score": 0.004590217765551337, "phrase": "packet_contents"}, {"score": 0.004466519142879166, "phrase": "predefined_malicious_or_suspicious_patterns"}, {"score": 0.004375928080972614, "phrase": "traditional_software_alone_pattern"}, {"score": 0.004143196873246147, "phrase": "high_throughput"}, {"score": 0.0040869663676860535, "phrase": "today's_networking"}, {"score": 0.0038960785110831162, "phrase": "pattern_matching"}, {"score": 0.0038170129089059013, "phrase": "hardware_approaches"}, {"score": 0.0037651925588909783, "phrase": "memory-based_architecture"}, {"score": 0.00332924643541238, "phrase": "increasing_number"}, {"score": 0.003284026247389735, "phrase": "attack_patterns"}, {"score": 0.003195414285736136, "phrase": "throughput_requirement"}, {"score": 0.0030879936732269293, "phrase": "successful_network_intrusion_detection_system"}, {"score": 0.0026565317818265394, "phrase": "memory_requirement"}, {"score": 0.002602555367635598, "phrase": "snort_rule_sets"}, {"score": 0.002549672862868133, "phrase": "new_algorithm"}, {"score": 0.0024138345020219333, "phrase": "traditional_aho-corasick_algorithm"}, {"score": 0.0021634370496463793, "phrase": "bit-split_algorithm"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_memory-based_approach"}], "paper_keywords": ["Aho-Corasick (AC) algorithm", " finite automata", " pattern matching"], "paper_abstract": "Network intrusion detection system is used to inspect packet contents against thousands of predefined malicious or suspicious patterns. Because traditional software alone pattern matching approaches can no longer meet the high throughput of today's networking, many hardware approaches are proposed to accelerate pattern matching. Among hardware approaches, memory-based architecture has attracted a lot of attention because of its easy reconfigurability and scalability. In order to accommodate the increasing number of attack patterns and meet the throughput requirement of networks, a successful network intrusion detection system must have a memory-efficient pattern-matching algorithm and hardware design. In this paper, we propose a memory-efficient pattern-matching algorithm which can significantly reduce the memory requirement. For Snort rule sets, the new algorithm achieves 21% of memory reduction compared with the traditional Aho-Corasick algorithm. In addition, we can gain 24% of memory reduction by integrating our approach to the bit-split algorithm which is the state-of-the-art memory-based approach.", "paper_title": "Efficient Pattern Matching Algorithm for Memory Architecture", "paper_id": "WOS:000285844200004"}