{"auto_keywords": [{"score": 0.03226147039959236, "phrase": "selection_policy"}, {"score": 0.00481495049065317, "phrase": "virtual_services"}, {"score": 0.00467207889925365, "phrase": "service-oriented_paradigm"}, {"score": 0.004475266375001531, "phrase": "similar_functional_needs"}, {"score": 0.004323776691055635, "phrase": "functionally_equivalent_software_services"}, {"score": 0.003899269293218826, "phrase": "selection_rules"}, {"score": 0.0038326698261576023, "phrase": "end_user"}, {"score": 0.0037510726160174396, "phrase": "gui"}, {"score": 0.0036553070575015344, "phrase": "software_service"}, {"score": 0.003546722347907148, "phrase": "-user's_selection_policy"}, {"score": 0.003267925215811654, "phrase": "virtual_service"}, {"score": 0.0032259472087775138, "phrase": "key_innovation"}, {"score": 0.0029980260560551982, "phrase": "heterogeneous_parameters"}, {"score": 0.0027741761880779535, "phrase": "additional_parameters"}, {"score": 0.002703327151461985, "phrase": "existing_or_new_policy"}, {"score": 0.0026116610153271943, "phrase": "end_users"}, {"score": 0.0025122373359090454, "phrase": "selection_process"}, {"score": 0.0024586427394152196, "phrase": "gui_element"}, {"score": 0.0023958326775913165, "phrase": "virtual_service_design"}], "paper_keywords": ["service discovery", " service selection", " virtual service", " service selector", " service aggregation", " marketplace"], "paper_abstract": "With the adoption of a service-oriented paradigm on the Web, many software services are likely to fulfil similar functional needs for end-users. We propose to aggregate functionally equivalent software services within one single virtual service, that is, to associate a functionality, a graphical user interface (GUI), and a set of selection rules. When an end user invokes such a virtual service through its GUI to answer his/her functional need, the software service that best responds to the end-user's selection policy is selected and executed and the result is then rendered to the end-user through the GUI of the virtual service. A key innovation in this paper is the flexibility of our proposed service selection policy. First, each selection policy can refer to heterogeneous parameters (e.g., service price, end-user location, and QoS). Second, additional parameters can be added to an existing or new policy with little investment. Third, the end users themselves define a selection policy to apply during the selection process, thanks to the GUI element added as part of the virtual service design. This approach was validated though the design, implementation, and testing of an end-to-end architecture, including the implementation of several virtual services and utilizing several software services available today on the Web.", "paper_title": "A flexible service selection for executing virtual services", "paper_id": "WOS:000316567600001"}