{"auto_keywords": [{"score": 0.046793532854124374, "phrase": "unary_languages"}, {"score": 0.04567075142558645, "phrase": "deterministic_automata"}, {"score": 0.015026041856555102, "phrase": "absolute_worst_case_time_complexity"}, {"score": 0.013659126717644578, "phrase": "de_bruijn_words"}, {"score": 0.011687584806198721, "phrase": "splitting_sets"}, {"score": 0.009038290371727944, "phrase": "cover_automata"}, {"score": 0.00481495049065317, "phrase": "hopcroft's_minimization_technique"}, {"score": 0.00476644166703416, "phrase": "dfa"}, {"score": 0.004718314112245913, "phrase": "dfca."}, {"score": 0.004553822674247401, "phrase": "hopcroft's_minimization_algorithm"}, {"score": 0.004114641015648682, "phrase": "previous_paper"}, {"score": 0.00407311508450996, "phrase": "berstel"}, {"score": 0.004032004448520852, "phrase": "carton"}, {"score": 0.003445174898115646, "phrase": "fifo_mode"}, {"score": 0.0032088487124106936, "phrase": "previous_result"}, {"score": 0.0026592094867526803, "phrase": "hopcroft's_method"}, {"score": 0.002501955525421155, "phrase": "lifo_implementation"}, {"score": 0.0024641134634779535, "phrase": "splitting_list"}, {"score": 0.002271725588755076, "phrase": "regular_deterministic_finite_automata"}, {"score": 0.0021923400552366777, "phrase": "deterministic_finite_cover_automata"}, {"score": 0.002148226022654619, "phrase": "s._yu"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cover automata", " Minimization", " Hopcroft's algorithm", " Time complexity"], "paper_abstract": "We show that the absolute worst case time complexity for Hopcroft's minimization algorithm applied to unary languages is reached only for deterministic automata or cover automata following the structure of the de Bruijn words. A previous paper by Berstel and Carton gave the example of de Bruijn words as a language that requires O(n log n) steps in the case of deterministic automata by carefully choosing the splitting sets and processing these sets in a FIFO mode for the list of the splitting sets in the algorithm. We refine the previous result by showing that the Berstel/Carton example is actually the absolute worst case time complexity in the case of unary languages for deterministic automata. We show that the same result is valid also for the case of cover automata and an algorithm based on the Hopcroft's method used for minimization of cover automata. We also show that a LIFO implementation for the splitting list will not achieve the same absolute worst time complexity for the case of unary languages both in the case of regular deterministic finite automata or in the case of the deterministic finite cover automata as defined by S. Yu. Published by Elsevier B.V.", "paper_title": "On the Hopcroft's minimization technique for DFA and DFCA", "paper_id": "WOS:000266446600013"}