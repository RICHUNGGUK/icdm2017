{"auto_keywords": [{"score": 0.0495133738546852, "phrase": "mobile_embedded_systems"}, {"score": 0.015719716506582538, "phrase": "dsp_applications"}, {"score": 0.004701825207431857, "phrase": "dsp_processors"}, {"score": 0.004618720776729413, "phrase": "dedicated_address_generation_units"}, {"score": 0.004456872931482395, "phrase": "address_computation"}, {"score": 0.0041995784967999985, "phrase": "dsp_compilers"}, {"score": 0.004028326293950714, "phrase": "efficient_code"}, {"score": 0.003980687255880282, "phrase": "compact_size"}, {"score": 0.0034922880300145283, "phrase": "small_changes"}, {"score": 0.0034304883989739804, "phrase": "source_code_level"}, {"score": 0.0033299015941662302, "phrase": "variable_layout"}, {"score": 0.0031003255054939524, "phrase": "large_energy_overheads"}, {"score": 0.002655616553414394, "phrase": "update-conscious_code_update_scheme"}, {"score": 0.0025020469669826497, "phrase": "incremental_offset_assignment"}, {"score": 0.0024431289979171505, "phrase": "recent_variable_coalescing_heuristic"}, {"score": 0.002357337046408753, "phrase": "code_difference"}, {"score": 0.0023018188296933923, "phrase": "update_primitives"}, {"score": 0.0022209780222461587, "phrase": "update-conscious_code_update"}, {"score": 0.002168664249034287, "phrase": "code_similarity"}, {"score": 0.0021049977753042253, "phrase": "update_script_sizes"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Incremental coalescing simple offset assignment (ICSOA)", " Incremental coalescing general offset assignment (ICGOA)", " context-aware script", " context-unaware script"], "paper_abstract": "DSP processors usually provide dedicated address generation units (AGUs) to assist address computation. By carefully allocating variables in the memory, DSP compilers take advantage of AGUs and generate efficient code with compact size and improved performance. However, DSP applications running on mobile embedded systems often need to be updated after their initial releases. Studies showed that small changes at the source code level may significantly change the variable layout in the memory and thus the binary code, which causes large energy overheads to mobile embedded systems that patch through wireless or satellite communication, and often pecuniary burden to the users. In this paper, we propose an update-conscious code update scheme to effectively reduce patch size. It first performs incremental offset assignment based on a recent variable coalescing heuristic, and then summarizes the code difference using two types of update primitives. Our experimental results showed that using update-conscious code update can greatly improve code similarity and thus reduce the update script sizes.", "paper_title": "An Efficient Code Update Scheme for DSP Applications in Mobile Embedded Systems", "paper_id": "WOS:000277056500012"}