{"auto_keywords": [{"score": 0.03020942633336309, "phrase": "virtual_mining_views"}, {"score": 0.00481495049065317, "phrase": "pattern_mining"}, {"score": 0.00475924837336259, "phrase": "relational_databases"}, {"score": 0.004569293780076254, "phrase": "imielinski"}, {"score": 0.0045164213346314645, "phrase": "mannila"}, {"score": 0.004386887374401584, "phrase": "inductive_databases"}, {"score": 0.004310949776826717, "phrase": "kdd_applications"}, {"score": 0.004162978902905443, "phrase": "business_applications"}, {"score": 0.0036838048761094933, "phrase": "popular_relational_query_language"}, {"score": 0.003641220752801061, "phrase": "sql"}, {"score": 0.003336468343971626, "phrase": "completely_different_and_new_approach"}, {"score": 0.0032406882260115587, "phrase": "dbms"}, {"score": 0.003039445153076014, "phrase": "mining_algorithms"}, {"score": 0.0029867619862229853, "phrase": "database_query_optimizer"}, {"score": 0.0026892447164623247, "phrase": "traditional_relational_tables"}, {"score": 0.002551762519273805, "phrase": "database_system"}, {"score": 0.002435453488008121, "phrase": "mining_algorithm"}, {"score": 0.002129701089817251, "phrase": "popular_association_rule"}, {"score": 0.0021049977753042253, "phrase": "frequent_set_mining_problems"}], "paper_keywords": [""], "paper_abstract": "Almost a decade ago, Imielinski and Mannila introduced the notion of Inductive Databases to manage KDD applications just as DBMSs successfully manage business applications. The goal is to follow one of the key DBMS paradigms: building optimizing compilers for ad hoc queries. During the past decade, several researchers proposed extensions to the popular relational query language, SQL, in order to express such mining queries. In this paper, we propose a completely different and new approach, which extends the DBMS itself, not the query language, and integrates the mining algorithms into the database query optimizer. To this end, we introduce virtual mining views, which can be queried as if they were traditional relational tables (or views). Every time the database system accesses one of these virtual mining views, a mining algorithm is triggered to materialize all tuples needed to answer the query. We show how this can be done effectively for the popular association rule and frequent set mining problems.", "paper_title": "Integrating pattern mining in relational databases", "paper_id": "WOS:000241104900038"}