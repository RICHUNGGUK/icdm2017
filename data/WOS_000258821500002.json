{"auto_keywords": [{"score": 0.04427688803338459, "phrase": "program_source_code"}, {"score": 0.01063953722745155, "phrase": "functional_and_structural_descriptors"}, {"score": 0.010235156665246896, "phrase": "functional_descriptors"}, {"score": 0.00481495049065317, "phrase": "function-based_descriptors"}, {"score": 0.004722038375317162, "phrase": "software_digital_libraries"}, {"score": 0.004667149874736771, "phrase": "software_development"}, {"score": 0.004488734023485018, "phrase": "existing_software_components"}, {"score": 0.00396218934254591, "phrase": "challenging_task"}, {"score": 0.003389704997952315, "phrase": "functional_and_structural_information"}, {"score": 0.0033502512757488433, "phrase": "software_component_search"}, {"score": 0.0032855095476183372, "phrase": "proposed_model"}, {"score": 0.0031597433845085092, "phrase": "single_representation"}, {"score": 0.0030625949549620475, "phrase": "selected_terms"}, {"score": 0.00300339527261653, "phrase": "weighting_scheme"}, {"score": 0.002888396879326153, "phrase": "structural_descriptors"}, {"score": 0.0027995677499976406, "phrase": "structural_relationships"}, {"score": 0.002756180088265064, "phrase": "design_patterns"}, {"score": 0.0027347383772384102, "phrase": "software_metrics"}, {"score": 0.002619748321217153, "phrase": "program_descriptors"}, {"score": 0.0024514505056251316, "phrase": "similarity_measurement"}, {"score": 0.0024134449026937586, "phrase": "vector_model"}, {"score": 0.0023946630984825207, "phrase": "data_distribution"}, {"score": 0.0023209828061385596, "phrase": "program_retrieval"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": [""], "paper_abstract": "In software development, it is often desirable to re-use existing software components. Currently, a number of repositories of components are available - generally including program source code, but finding the ones that can be re-used for an application is a challenging task. Program source code may be viewed as a form of data, containing both structure and function; it is therefore important to make use of this information in representing programs in the repository. We propose to combine the functional and structural information to facilitate software component search and retrieval. The proposed model reveals how functional and structural descriptors are identified and combined into a single representation. The functional descriptors are identified by extracting selected terms from program source code and a weighting scheme is adopted to differentiate the importance of terms. Structural descriptors that comprise of information generated based on structural relationships, such as design patterns and software metrics, are extracted from a program to be added as program descriptors. In order to retrieve components that are relevant to a given query, the use of similarity measurement based on the vector model and data distribution are investigated. The experiments undertaken on program retrieval indicate that the use of a combination of functional and structural descriptors is better than using functional descriptors on their own. Furthermore, programs retrieved using the proposed approach are less complex and easy to maintain.", "paper_title": "Combining structure and function-based descriptors for component retrieval in software digital libraries", "paper_id": "WOS:000258821500002"}