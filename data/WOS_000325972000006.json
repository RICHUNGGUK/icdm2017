{"auto_keywords": [{"score": 0.024228561640718054, "phrase": "adifor"}, {"score": 0.00481495049065317, "phrase": "application-tailored_linear_algebra_algorithms"}, {"score": 0.004352876088312741, "phrase": "linear_algebra_operations"}, {"score": 0.0042495320879288615, "phrase": "problem-specific_knowledge"}, {"score": 0.003953932197201054, "phrase": "current_libraries"}, {"score": 0.003916098498242888, "phrase": "computing_environments"}, {"score": 0.0035914198812657897, "phrase": "knowledge-aware_linear_algebra_compiler"}, {"score": 0.0034892684482068347, "phrase": "matrix_equations"}, {"score": 0.003034916887102753, "phrase": "successive_instances"}, {"score": 0.00266510562382701, "phrase": "search_space"}, {"score": 0.002601727192945944, "phrase": "redundant_computations"}, {"score": 0.0024556852466581527, "phrase": "sensitivity_and_genome_studies"}, {"score": 0.0024088451312725924, "phrase": "first_application"}, {"score": 0.0021356322417874106, "phrase": "genome_studies"}, {"score": 0.0021049977753042253, "phrase": "produced_algorithms"}], "paper_keywords": ["automation", " domain-specific languages", " domain-specific compilers", " numerical linear algebra", " generation of algorithms", " knowledge management"], "paper_abstract": "In this paper, we tackle the problem of automatically generating algorithms for linear algebra operations by taking advantage of problem-specific knowledge. In most situations, users possess much more information about the problem at hand than what current libraries and computing environments accept; evidence shows that if properly exploited, such information leads to uncommon/unexpected speedups. We introduce a knowledge-aware linear algebra compiler that allows users to input matrix equations together with properties about the operands and the problem itself; for instance, they can specify that the equation is part of a sequence, and how successive instances are related to one another. The compiler exploits all of this information to guide the generation of algorithms, to limit the size of the search space, and to avoid redundant computations. We applied the compiler to equations arising as part of sensitivity and genome studies. For the first application, the algorithms produced by our compiler attained, when compared with ADIFOR, speedups of between 29x and 79x. In the case of genome studies, the produced algorithms outperformed the state-of-the-art libraries GenABEL and FaST-LMM by factors beyond 1000.", "paper_title": "Application-tailored linear algebra algorithms: A search-based approach", "paper_id": "WOS:000325972000006"}