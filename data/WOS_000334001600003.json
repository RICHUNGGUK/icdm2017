{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "service_compositions"}, {"score": 0.0076229616156918, "phrase": "design_time"}, {"score": 0.004772367030970874, "phrase": "variability_models"}, {"score": 0.004730158389701481, "phrase": "web_services"}, {"score": 0.004667541072056214, "phrase": "complex_contexts"}, {"score": 0.004626255242038005, "phrase": "arising_events"}, {"score": 0.004484596684703308, "phrase": "whole_system"}, {"score": 0.004289686492089571, "phrase": "autonomic_mechanisms"}, {"score": 0.004066898031169739, "phrase": "computing_infrastructure"}, {"score": 0.0038900709793274484, "phrase": "variability_constructs"}, {"score": 0.003838531755488468, "phrase": "language_level"}, {"score": 0.003359119985242403, "phrase": "semantically_rich_variability_model"}, {"score": 0.003299880298525127, "phrase": "dynamic_adaptation"}, {"score": 0.0032129675521135616, "phrase": "problematic_event"}, {"score": 0.0029263562233195423, "phrase": "variability_model_result"}, {"score": 0.002861961643289598, "phrase": "composition_model"}, {"score": 0.002811464848641341, "phrase": "underlying_service_composition"}, {"score": 0.0027131212233443137, "phrase": "service_composition"}, {"score": 0.002629889135655667, "phrase": "business_process_execution_language"}, {"score": 0.00241658945942583, "phrase": "optimum_adaptations"}, {"score": 0.0023845255359681143, "phrase": "variability_model"}, {"score": 0.0023010815714140467, "phrase": "constraint_programming"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Variability", " Models at runtime", " Autonomic computing", " Dynamic adaptation", " Dynamic software product line", " Web service composition", " Constraint programming", " Verification"], "paper_abstract": "Web services run in complex contexts where arising events may compromise the quality of the whole system. Thus, it is desirable to count on autonomic mechanisms to guide the self-adaptation of service compositions according to changes in the computing infrastructure. One way to achieve this goal is by implementing variability constructs at the language level. However, this approach may become tedious, difficult to manage, and error-prone. In this paper, we propose a solution based on a semantically rich variability model to support the dynamic adaptation of service compositions. When a problematic event arises in the context, this model is leveraged for decision-making. The activation and deactivation of features in the variability model result in changes in a composition model that abstracts the underlying service composition. These changes are reflected into the service composition by adding or removing fragments of Business Process Execution Language (WS-BPEL) code, which can be deployed at runtime. In order to reach optimum adaptations, the variability model and its possible configurations are verified at design time using Constraint Programming. An evaluation demonstrates several benefits of our approach, both at design time and at runtime. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Dynamic adaptation of service compositions with variability models", "paper_id": "WOS:000334001600003"}