{"auto_keywords": [{"score": 0.04630542274767929, "phrase": "cpu_cores"}, {"score": 0.015719716506582538, "phrase": "single_gpu_card"}, {"score": 0.009825609907115033, "phrase": "cpu_card"}, {"score": 0.004763785973620115, "phrase": "laplace-domain_full_waveform_inversion"}, {"score": 0.004713162564945179, "phrase": "efficient_long-wavelength_velocity_estimation_method"}, {"score": 0.004629977311316031, "phrase": "low-frequency_components"}, {"score": 0.004467965784278827, "phrase": "large_cluster"}, {"score": 0.004311598785718415, "phrase": "extremely_long_computing_time"}, {"score": 0.004250588556735512, "phrase": "large_impedance_matrix"}, {"score": 0.004175533280178052, "phrase": "source_positions"}, {"score": 0.003607834976869384, "phrase": "iterative_matrix_solver"}, {"score": 0.003544088803300751, "phrase": "cuda_programming_language"}, {"score": 0.0035189057079817285, "phrase": "forward_and_backward_modeling_parts"}, {"score": 0.0034444213065548688, "phrase": "remaining_parts"}, {"score": 0.0033595546458933825, "phrase": "fortran"}, {"score": 0.0033001333942688747, "phrase": "uniformly_structured_grid"}, {"score": 0.003265012781840765, "phrase": "nonzero_values"}, {"score": 0.0032302647179383915, "phrase": "sparse_impedance_matrix"}, {"score": 0.003094920033010818, "phrase": "preconditioned_conjugate_gradient_method"}, {"score": 0.0029441472095672397, "phrase": "numerical_experiment"}, {"score": 0.0028715299874549245, "phrase": "floating_point_operation"}, {"score": 0.002790723338582723, "phrase": "laplace-domain_wavefield"}, {"score": 0.0027025233739857374, "phrase": "original_cpu"}, {"score": 0.002683304054823427, "phrase": "modified_cpu_programs"}, {"score": 0.0024984517279573906, "phrase": "parallelized_inversion_code"}, {"score": 0.0023936956017015696, "phrase": "cpu-based_serial_code"}, {"score": 0.0023180144105895257, "phrase": "impedance_matrix"}, {"score": 0.0022527488455744674, "phrase": "proposed_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["CUDA", " GPU", " Waveform inversion", " Laplace domain"], "paper_abstract": "The Laplace-domain full waveform inversion is an efficient long-wavelength velocity estimation method for seismic datasets lacking low-frequency components. However, to invert a 3D velocity model, a large cluster of CPU cores have commonly been required to overcome the extremely long computing time caused by a large impedance matrix and a number of source positions. In this study, a workstation with a single GPU card (NVIDIA GTX 580) is successfully used for the 3D Laplace-domain full waveform inversion rather than a large cluster of CPU cores. To exploit a CPU for our inversion algorithm, the routine for the iterative matrix solver is ported to the CUDA programming language for forward and backward modeling parts with minimized modification of the remaining parts, which were originally written in Fortran 90. Using a uniformly structured grid set, nonzero values in the sparse impedance matrix can be arranged according to certain rules, which efficiently parallelize the preconditioned conjugate gradient method for a number of threads contained in the CPU card. We perform a numerical experiment to verify the accuracy of a floating point operation performed by a CPU to calculate the Laplace-domain wavefield. We also measure the efficiencies of the original CPU and modified CPU programs using a cluster of CPU cores and a workstation with a CPU card, respectively. Through the analysis, the parallelized inversion code for a CPU achieves the speedup of 14.7-24.6x compared to a CPU-based serial code depending on the degrees of freedom of the impedance matrix. Finally, the practicality of the proposed algorithm is examined by inverting a 3D long-wavelength velocity model using wide azimuth real datasets in 3.7 days. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "3D Laplace-domain full waveform inversion using a single GPU card", "paper_id": "WOS:000336778300001"}