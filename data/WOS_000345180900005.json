{"auto_keywords": [{"score": 0.05006680781716705, "phrase": "aspectual_feature_modules"}, {"score": 0.04954068009199478, "phrase": "software_product_lines"}, {"score": 0.0491928442016334, "phrase": "feature-oriented_programming"}, {"score": 0.04833336021935964, "phrase": "aspect-oriented_programming"}, {"score": 0.04301896938588357, "phrase": "afm"}, {"score": 0.004555781299332848, "phrase": "programming_techniques"}, {"score": 0.004505638402009237, "phrase": "composition_mechanisms"}, {"score": 0.004263046902817659, "phrase": "good_variability_mechanisms"}, {"score": 0.003974349782102708, "phrase": "feature_modules"}, {"score": 0.0039016690475620185, "phrase": "concern_modularity"}, {"score": 0.0034160263294684785, "phrase": "spl_evolution"}, {"score": 0.003378385493203297, "phrase": "main_purpose"}, {"score": 0.003267925215811654, "phrase": "simultaneous_use"}, {"score": 0.0031845067058084583, "phrase": "afm_approach"}, {"score": 0.003091767402370757, "phrase": "quantitative_data"}, {"score": 0.002541817937194794, "phrase": "object-oriented_programming"}, {"score": 0.0025045102029373854, "phrase": "change_propagation"}, {"score": 0.0023869914500743083, "phrase": "afm_option"}, {"score": 0.0023346234464901978, "phrase": "product_line"}, {"score": 0.0021682027434117095, "phrase": "refactoring_components'_design"}, {"score": 0.0021442819603609835, "phrase": "higher_degree"}, {"score": 0.0021049977753042253, "phrase": "spl_structure"}], "paper_keywords": ["Software product lines", " Feature-oriented programming", " Aspect-oriented programming", " Aspectual feature modules", " Variability mechanisms"], "paper_abstract": "Feature-Oriented Programming (FOP) and Aspect-Oriented Programming (AOP) are programming techniques based on composition mechanisms, called refinements and aspects, respectively, These techniques are assumed to be good variability mechanisms for implementing Software Product Lines (SPLs). Aspectual Feature Modules (AFM) is an approach that combines advantages of feature modules and aspects to increase concern modularity. Some guidelines on how to integrate these techniques have been established in some studies, but these studies do not focus the analysis on how effectively AFM can preserve the modularity and stability facilitating SPL evolution. The main purpose of this paper is to investigate whether the simultaneous use of aspects and features through the AFM approach facilitates the evolution of SPLs. The quantitative data were collected from two SPLs developed using four different variability mechanisms: (1) feature modules, aspects and aspects refinements of AFM, (2) aspects of aspect-oriented programming (AOP), (3) feature modules of feature-oriented programming (FOP), and (4) conditional compilation (CC) with object-oriented programming. Metrics for change propagation and modularity were calculated and the results support the benefits of the AFM option in a context where the product line has been evolved with addition or modification of crosscutting concerns. However a drawback of this approach is that refactoring components' design requires a higher degree of modifications to the SPL structure. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A quantitative and qualitative assessment of aspectual feature modules for evolving software product lines", "paper_id": "WOS:000345180900005"}