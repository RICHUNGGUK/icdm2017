{"auto_keywords": [{"score": 0.0364156588244298, "phrase": "adaptic"}, {"score": 0.00481495049065317, "phrase": "adaptive_input-aware"}, {"score": 0.004795298466667565, "phrase": "compilation_for_graphics_engines"}, {"score": 0.004736820055728928, "phrase": "graphics_processing_units"}, {"score": 0.004491506786670695, "phrase": "high_performance_computations"}, {"score": 0.004436716583179764, "phrase": "tedious_process"}, {"score": 0.0044005599565517875, "phrase": "performance_tuning"}, {"score": 0.004241451614311598, "phrase": "wider_adoption"}, {"score": 0.004104838067758352, "phrase": "programmability_challenges"}, {"score": 0.004054745478848129, "phrase": "gpu's_complex_memory_hierarchy"}, {"score": 0.003956379470617348, "phrase": "well-known_application_design_problem"}, {"score": 0.003876226041373242, "phrase": "different_gpus"}, {"score": 0.0037667216301666196, "phrase": "single_gpu_target"}, {"score": 0.0037055370870874484, "phrase": "program's_input_characteristics"}, {"score": 0.0036453427552753533, "phrase": "already-optimized_implementation"}, {"score": 0.003145609726536791, "phrase": "high-level_streaming_language"}, {"score": 0.003069230909006614, "phrase": "difficult_task"}, {"score": 0.0030441844088874366, "phrase": "input_portable_optimizations"}, {"score": 0.0030193416820392554, "phrase": "code_generation"}, {"score": 0.002933973181012572, "phrase": "efficient_use"}, {"score": 0.002898127432512101, "phrase": "memory_hierarchy"}, {"score": 0.0028627183712016894, "phrase": "thread_composition"}, {"score": 0.0027931892160452513, "phrase": "properly_optimized_version"}, {"score": 0.0026920404458807444, "phrase": "actual_program_input"}, {"score": 0.002637433799290365, "phrase": "head-to-head_comparison"}, {"score": 0.0025419268593509484, "phrase": "cuda"}, {"score": 0.0022111720236287547, "phrase": "hand-optimized_programs'_\"comfort_zone"}, {"score": 0.0021398115287338693, "phrase": "input-aware_results"}, {"score": 0.0021049977753042253, "phrase": "different_gpu_targets"}], "paper_keywords": ["Design", " Languages", " Performance", " Streaming", " Compiler", " GPU", " Optimization", " Portability"], "paper_abstract": "While graphics processing units (GPUs) provide low-cost and efficient platforms for accelerating high performance computations, the tedious process of performance tuning required to optimize applications is an obstacle to wider adoption of GPUs. In addition to the programmability challenges posed by GPU's complex memory hierarchy and parallelism model, a well-known application design problem is target portability across different GPUs. However, even for a single GPU target, changing a program's input characteristics can make an already-optimized implementation of a program perform poorly. In this work, we propose Adaptic, an adaptive input-aware compilation system to tackle this important, yet overlooked, input portability problem. Using this system, programmers develop their applications in a high-level streaming language and let Adaptic undertake the difficult task of input portable optimizations and code generation. Several input-aware optimizations are introduced to make efficient use of the memory hierarchy and customize thread composition. At runtime, a properly optimized version of the application is executed based on the actual program input. We perform a head-to-head comparison between the Adaptic generated and hand-optimized CUDA programs. The results show that Adaptic is capable of generating codes that can perform on par with their hand-optimized counterparts over certain input ranges and outperform them when the input falls out of the hand-optimized programs' \"comfort zone\". Furthermore, we show that input-aware results are sustainable across different GPU targets making it possible to write and optimize applications once and run them anywhere.", "paper_title": "Adaptive Input-aware Compilation for Graphics Engines", "paper_id": "WOS:000307582100002"}