{"auto_keywords": [{"score": 0.05007850832134249, "phrase": "file_system"}, {"score": 0.03820679588870147, "phrase": "recon"}, {"score": 0.014126464130595897, "phrase": "transactional_updates"}, {"score": 0.004747797773204986, "phrase": "runtime"}, {"score": 0.00470325458481566, "phrase": "file_system_bugs"}, {"score": 0.004508661664944657, "phrase": "existing_reliability_methods"}, {"score": 0.004104456271230213, "phrase": "typical_workarounds"}, {"score": 0.003531474887552889, "phrase": "file_system_metadata"}, {"score": 0.0034984340449789745, "phrase": "buggy_file_system_operations"}, {"score": 0.0034171734618737436, "phrase": "file_systems"}, {"score": 0.003369322866499541, "phrase": "crash_consistency"}, {"score": 0.0032756158688245, "phrase": "declarative_statements"}, {"score": 0.002953711377604328, "phrase": "file_system_integrity"}, {"score": 0.002752513434446804, "phrase": "buggy_file_systems"}, {"score": 0.0027139447110929586, "phrase": "major_challenges"}, {"score": 0.0026014425686078993, "phrase": "file_system_behavior"}, {"score": 0.0025290375256888883, "phrase": "file_system_code"}, {"score": 0.002447101794397243, "phrase": "file-system_specific_metadata_interpretation"}, {"score": 0.002291089893848235, "phrase": "consistency_invariants"}, {"score": 0.0021755038991725147, "phrase": "random_as_well_as_targeted_file-system_corruption"}], "paper_keywords": ["Reliability", " Verification", " Performance", " Measurement", " Metadata consistency", " runtime verification", " file system checker"], "paper_abstract": "File system bugs that corrupt metadata on disk are insidious. Existing reliability methods, such as check-sums, redundancy, or transactional updates, merely ensure that the corruption is reliably preserved. Typical workarounds, based on using backups or repairing the file system, are painfully slow. Worse, the recovery may result in further corruption. We present Recon, a system that protects file system metadata from buggy file system operations. Our approach leverages file systems that provide crash consistency using transactional updates. We define declarative statements called consistency invariants for a file system. These invariants must be satisfied by each transaction being committed to disk to preserve file system integrity. Recon checks these invariants at commit, thereby minimizing the damage caused by buggy file systems. The major challenges to this approach are specifying invariants and interpreting file system behavior correctly without relying on the file system code. Recon provides a framework for file-system specific metadata interpretation and invariant checking. We show the feasibility of interpreting metadata and writing consistency invariants for the Linux ext3 file system using this framework. Recon can detect random as well as targeted file-system corruption at runtime as effectively as the offline e2fsck file-system checker, with low overhead.", "paper_title": "Recon: Verifying File System Consistency at Runtime", "paper_id": "WOS:000312212500004"}