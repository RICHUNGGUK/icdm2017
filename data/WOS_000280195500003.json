{"auto_keywords": [{"score": 0.048880968765446134, "phrase": "dynamic_languages"}, {"score": 0.004553822674247401, "phrase": "different_software_development_scenarios"}, {"score": 0.004485085675709643, "phrase": "web_engineering"}, {"score": 0.0044398358177815305, "phrase": "rapid_prototyping"}, {"score": 0.004263336444795021, "phrase": "runtime_adaptiveness"}, {"score": 0.003341839487905525, "phrase": "compiler_optimisations"}, {"score": 0.0031603487697867538, "phrase": "typed_languages"}, {"score": 0.0030500051941781034, "phrase": "stadyn_programming_language"}, {"score": 0.0029584874121320165, "phrase": "stadyn"}, {"score": 0.002928594036918225, "phrase": "gathering-type_information"}, {"score": 0.0028263192354046245, "phrase": "dynamic_variables"}, {"score": 0.0027554538693034163, "phrase": "type_information"}, {"score": 0.0026863605504566924, "phrase": "early_type_error_detection"}, {"score": 0.002618995204424126, "phrase": "static_and_dynamic_codes"}, {"score": 0.002592523232809191, "phrase": "better_runtime_performance"}, {"score": 0.0025146979283050923, "phrase": "concerns_principle"}, {"score": 0.002390133671838149, "phrase": "runtime_flexibility"}, {"score": 0.0023659694724243764, "phrase": "dynamic_typing"}, {"score": 0.002271725588755076, "phrase": "static_typing"}, {"score": 0.002237357942660354, "phrase": "runtime_performance_assessment"}, {"score": 0.0021049977753042253, "phrase": "dynamic_and_static_typing"}], "paper_keywords": [""], "paper_abstract": "Dynamic languages are becoming increasingly popular for different software development scenarios such as Web engineering, rapid prototyping or the construction of applications that require runtime adaptiveness. These languages are built on the idea of supporting reasoning about (and customising) program structure, behaviour and environment at runtime. The dynamism offered by dynamic languages is, however, counteracted by two main limitations: no early type error detection and fewer opportunities for compiler optimisations. To obtain the benefits of both dynamically and statically typed languages, the authors have designed the StaDyn programming language that provides both approaches. StaDyn keeps gathering-type information at compile time, even when dynamic variables are used. This type information is used to offer early type error detection, direct interoperation between static and dynamic codes and better runtime performance. Following the Separation of Concerns principle, it is possible to customise the trade-off between runtime flexibility of dynamic typing and safety, performance and robustness of static typing. A runtime performance assessment is presented to show an estimate of the benefits of combining dynamic and static typing in the same programming language.", "paper_title": "Including both static and dynamic typing in the same programming language", "paper_id": "WOS:000280195500003"}