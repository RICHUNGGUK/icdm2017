{"auto_keywords": [{"score": 0.04441442159222666, "phrase": "motif"}, {"score": 0.015719501768337463, "phrase": "simulation-based_design"}, {"score": 0.012028968505196896, "phrase": "explicit_notion"}, {"score": 0.00461786618294789, "phrase": "complex_control_structures"}, {"score": 0.004588266612786895, "phrase": "programmed_graph_transformation"}, {"score": 0.00452963285314407, "phrase": "modular_construction"}, {"score": 0.004500596283281564, "phrase": "parallel_composition"}, {"score": 0.004443077867798955, "phrase": "temporal_dimension"}, {"score": 0.004372207937638619, "phrase": "usual_transformation_control_structures"}, {"score": 0.0043302273768286905, "phrase": "first_part"}, {"score": 0.00415290083567118, "phrase": "discrete_event_system_specification"}, {"score": 0.003881601350247482, "phrase": "individual_transformation_rules"}, {"score": 0.0038319633481562402, "phrase": "atomic_devs_models"}, {"score": 0.003746614207577534, "phrase": "devs"}, {"score": 0.003379939505148497, "phrase": "second_part"}, {"score": 0.0033259706583441857, "phrase": "case_study"}, {"score": 0.0031488204239389335, "phrase": "modern_computer_games"}, {"score": 0.003098530474496842, "phrase": "well-known_game"}, {"score": 0.0029240263074648792, "phrase": "player_behaviour"}, {"score": 0.0028773161919794094, "phrase": "human_players'_behaviour"}, {"score": 0.00260387228762141, "phrase": "game_design"}, {"score": 0.002562263358004784, "phrase": "playability_performance_measure"}, {"score": 0.0024810246251233195, "phrase": "pacman_game"}, {"score": 0.0021669551936989886, "phrase": "real_player"}, {"score": 0.002139197034966045, "phrase": "game_model"}, {"score": 0.0021049977753042253, "phrase": "real-time_devs_simulator"}], "paper_keywords": ["Simulation", " DEVS", " Graph transformation"], "paper_abstract": "We introduce the MoTif (Modular Timed graph transformation) language, which allows one to elegantly model complex control structures for programmed graph transformation. These include modular construction, parallel composition, and a temporal dimension in addition to the usual transformation control structures. The first part of this contribution formally introduces MoTif and its semantics is based on the Discrete EVent system Specification (DEVS) formalism which allows for highly modular, hierarchical modelling of timed, reactive systems. In MoTif, graphs are embedded in events and individual transformation rules are embedded in atomic DEVS models. Aside effect of the use of DEVS is the introduction of an explicit notion of time. This allows one to model a time-advance for every rule as well as to interrupt (pre-empt) rule execution. In the second part, we design a case study to show how the explicit notion of time allows for the simulation-based design of reactive systems such as modern computer games. We use the well-known game of PacMan as an example and model its dynamics in MoTif. This also allows the modelling of player behaviour, incorporating data about human players' behaviour, and reaction times. Thus, a model of both player and game is obtained which can be used to evaluate, through simulation, the playability of a game design. We propose a playability performance measure and change the value of some parameters of the PacMan game. For each variant of the game thus obtained, simulation yields a value for the quality of the game. This allows us to choose an \"optimal\" (from a playability point of view) game configuration. The user model is subsequently replaced by a visual interface to a real player, and the game model is executed using a real-time DEVS simulator.", "paper_title": "A modular timed graph transformation language for simulation-based design", "paper_id": "WOS:000320446300011"}