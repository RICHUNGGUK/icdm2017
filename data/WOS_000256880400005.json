{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "interprocess_communication"}, {"score": 0.009691787592067602, "phrase": "integer_linear_programming"}, {"score": 0.008159294185468563, "phrase": "hybrid_classification_scheme"}, {"score": 0.004781777766309739, "phrase": "process_network_representation"}, {"score": 0.004748832495727873, "phrase": "nested-loop_programs"}, {"score": 0.004683618147754759, "phrase": "signal-processing_architectures"}, {"score": 0.004571630734130793, "phrase": "loosely_coupled_heterogeneous_components"}, {"score": 0.004477765573115626, "phrase": "specialized_ip_cores"}, {"score": 0.0044469055125323466, "phrase": "reconfigurable_units"}, {"score": 0.004222105714769577, "phrase": "process_network_model"}, {"score": 0.004008624230034271, "phrase": "compaan_compiler"}, {"score": 0.003859034476437495, "phrase": "matlab"}, {"score": 0.003832612678694653, "phrase": "c."}, {"score": 0.0037276938184125532, "phrase": "particular_problem"}, {"score": 0.0037019839121200508, "phrase": "nested_loop_programs"}, {"score": 0.003576060405460302, "phrase": "pn_representation"}, {"score": 0.0035391223341472502, "phrase": "nested_loop_program"}, {"score": 0.0035025644647418983, "phrase": "global_memory_arrays"}, {"score": 0.0033717094055177995, "phrase": "distributed_communication_structure"}, {"score": 0.003290986600659723, "phrase": "network_processes"}, {"score": 0.003157061070428828, "phrase": "different_requirements"}, {"score": 0.0030076664326204013, "phrase": "time_tests"}, {"score": 0.002845541839157798, "phrase": "second_part"}, {"score": 0.0027773810175217273, "phrase": "alternative_classification_techniques"}, {"score": 0.0027486699590262343, "phrase": "polynomial_complexity"}, {"score": 0.0026185499482623, "phrase": "definitive_answer"}, {"score": 0.0025914765323897604, "phrase": "ilp_tests"}, {"score": 0.0025293860389728516, "phrase": "present_tests"}, {"score": 0.0022560827223539934, "phrase": "alternative_techniques"}, {"score": 0.002119640369431708, "phrase": "important_part"}], "paper_keywords": ["static analysis", " integer linear programming", " matrix manipulations", " hybrid classification approach"], "paper_abstract": "New embedded signal-processing architectures are emerging that are composed of loosely coupled heterogeneous components like CPUs or DSPs, specialized IP cores, reconfigurable units, or memories. We believe that these architectures should be programmed using the process network model of computation. To ease the mapping of applications, we are developing the Compaan compiler that automatically derives a process network (PN) description from an application written in Matlab or C. In this paper, we investigate a particular problem in nested loop programs, which is about classifying the interprocess communication in the PN representation of the nested loop program. The global memory arrays present in the code have to be replaced by a distributed communication structure used for communicating data between the network processes. We show that four types of communication exist, each exhibiting different requirements when realizing them in hardware or software. We first present two compile time tests that are based on integer linear programming to decide the type of the communication. In the second part of this paper, we present alternative classification techniques that have polynomial complexity. However, in some cases, those techniques do not give a definitive answer and the ILP tests have to be applied. All present tests are combined in a hybrid classification scheme that correctly classifies the interprocess communication. In only 5% of the cases to classify, we have to rely on integer linear programming while, in the remaining 95%, the alternative techniques presented in this paper are able to correctly classify each case. The hybrid classification scheme has become an important part of our Compaan compiler.", "paper_title": "Classifying interprocess communication in process network representation of nested-loop programs", "paper_id": "WOS:000256880400005"}