{"auto_keywords": [{"score": 0.04558099031824589, "phrase": "dynprop"}, {"score": 0.021499625240609378, "phrase": "dynqf"}, {"score": 0.009942471364868482, "phrase": "dynfo"}, {"score": 0.00481495049065317, "phrase": "formal_languages"}, {"score": 0.004539005582217309, "phrase": "dynamic_complexity_classes"}, {"score": 0.004306968571854912, "phrase": "string_languages"}, {"score": 0.004223032986655664, "phrase": "latter_two_classes"}, {"score": 0.004007083686875716, "phrase": "quantifier-free_first-order_updates"}, {"score": 0.003631390978147703, "phrase": "languages_maintainable"}, {"score": 0.003537275726870251, "phrase": "exactly_the_regular_languages"}, {"score": 0.003423042581201533, "phrase": "arbitrary_precomputation"}, {"score": 0.003334309053314909, "phrase": "lower_bounds"}, {"score": 0.0031429522153349405, "phrase": "dynfo."}, {"score": 0.002982068153662372, "phrase": "context-free_language"}, {"score": 0.0027924625350414655, "phrase": "specific_context-free_languages"}, {"score": 0.0027022262179041334, "phrase": "dyck"}, {"score": 0.0025137856138000014, "phrase": "dynamic_complexity"}, {"score": 0.002480961181275199, "phrase": "regular_tree_languages"}, {"score": 0.0023694065215394593, "phrase": "arbitrary_structures"}, {"score": 0.0022777800735119405, "phrase": "first-order_definable_properties"}, {"score": 0.002189689209796759, "phrase": "dynprop."}, {"score": 0.0021049977753042253, "phrase": "existential_first-order_property"}], "paper_keywords": ["Languages", " Theory"], "paper_abstract": "The article investigates the power of the dynamic complexity classes DYNFO, DYNQF, and DYNPROP over string languages. The latter two classes contain problems that can be maintained using quantifier-free first-order updates, with and without auxiliary functions, respectively. It is shown that the languages maintainable in DYNPROP are exactly the regular languages, even when allowing arbitrary precomputation. This enables lower bounds for DYNPROP and separates DYNPROP from DYNQF and DYNFO. Further, it is shown that any context-free language can be maintained in DYNFO and a number of specific context-free languages, for example all Dyck-languages, are maintainable in DYNQF. Furthermore, the dynamic complexity of regular tree languages is investigated and some results concerning arbitrary structures are obtained: There exist first-order definable properties which are not maintainable in DYNPROP. On the other hand, any existential first-order property can be maintained in DYNQF when allowing precomputation.", "paper_title": "The Dynamic Complexity of Formal Languages", "paper_id": "WOS:000308370100001"}