{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed_real-time_systems"}, {"score": 0.0045843245695654875, "phrase": "raw_computing_power"}, {"score": 0.0040880724328903, "phrase": "diverse_classes"}, {"score": 0.003828912548622257, "phrase": "example_process_control_tasks"}, {"score": 0.0037667216301666196, "phrase": "network_protocol_stacks"}, {"score": 0.0037055370870874484, "phrase": "man-machine_interfaces"}, {"score": 0.0035278613436978933, "phrase": "virtualization_techniques"}, {"score": 0.003331275574328097, "phrase": "multiple_operating_systems"}, {"score": 0.002994701080666466, "phrase": "security_and_execution_timing_points"}, {"score": 0.0027817658627604653, "phrase": "acceptable_real-time_execution_characteristics"}, {"score": 0.0026700637696697414, "phrase": "competing_approaches"}, {"score": 0.002605201547405916, "phrase": "main_advantages"}, {"score": 0.002229380111189829, "phrase": "better_modularity"}], "paper_keywords": ["Virtual machines", " Real-time operating systems", " Embedded systems"], "paper_abstract": "The steady increase in raw computing power of the processors commonly adopted for distributed real-time systems leads to the opportunity of hosting diverse classes of tasks on the same hardware, for example process control tasks, network protocol stacks and man-machine interfaces. This paper describes how virtualization techniques can be used to concurrently run multiple operating systems on the same physical machine, although they are kept fully separated from the security and execution timing points of view, and still have them exhibit acceptable real-time execution characteristics. With respect to competing approaches, the main advantages of this method are that it requires little or no, modifications to the operating systems it hosts, along with a better modularity and clarity of design. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Virtual machines for distributed real-time systems", "paper_id": "WOS:000261466600006"}