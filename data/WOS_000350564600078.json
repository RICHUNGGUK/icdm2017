{"auto_keywords": [{"score": 0.04596583295354634, "phrase": "tetris"}, {"score": 0.00481495049065317, "phrase": "multi-resource_packing_for_cluster_schedulers"}, {"score": 0.004720043307726269, "phrase": "modern_data-parallel_clusters"}, {"score": 0.004673290248999786, "phrase": "highly_diverse_resource_requirements"}, {"score": 0.004024863549087511, "phrase": "resource_types"}, {"score": 0.00392586404888927, "phrase": "resource_fragmentation"}, {"score": 0.0035358770665604657, "phrase": "current_schedulers"}, {"score": 0.0034146585649631692, "phrase": "multidimensional_bin_packing_problem"}, {"score": 0.0033306180744375616, "phrase": "cluster_schedulers"}, {"score": 0.0033140589981208693, "phrase": "wherein_task_arrivals"}, {"score": 0.003281186608301359, "phrase": "machine_availability_change"}, {"score": 0.0032324864013225166, "phrase": "online_manner"}, {"score": 0.0031845067058084583, "phrase": "task's_resource"}, {"score": 0.00286795254228461, "phrase": "average_job_completion_time"}, {"score": 0.002701361707441567, "phrase": "fair_allocations"}, {"score": 0.002634830238219976, "phrase": "best_performance"}, {"score": 0.0025317627242523104, "phrase": "large_class"}, {"score": 0.0025066304722422463, "phrase": "fairness_policies"}, {"score": 0.0023846534541336326, "phrase": "good_performance"}, {"score": 0.0021049977753042253, "phrase": "nearly_perfect_fairness"}], "paper_keywords": ["Cluster schedulers", " multi-dimensional packing", " makespan", " completion time", " fairness"], "paper_abstract": "Tasks in modern data-parallel clusters have highly diverse resource requirements along CPU, memory, disk and network. We present Tetris, a multi-resource cluster scheduler that packs tasks to machines based on their requirements of all resource types. Doing so avoids resource fragmentation as well as over-allocation of the resources that are not explicitly allocated, both of which are drawbacks of current schedulers. Tetris adapts heuristics for the multidimensional bin packing problem to the context of cluster schedulers wherein task arrivals and machine availability change in an online manner and wherein task's resource needs change with time and with the machine that the task is placed at. In addition, Tetris improves average job completion time by preferentially serving jobs that have less remaining work. We observe that fair allocations do not offer the best performance and the above heuristics are compatible with a large class of fairness policies; hence, we show how to simultaneously achieve good performance and fairness. Trace-driven simulations and deployment of our Apache YARN prototype on a 250 node cluster show gains of over 30% in makespan and job completion time while achieving nearly perfect fairness.", "paper_title": "Multi-Resource Packing for Cluster Schedulers", "paper_id": "WOS:000350564600078"}