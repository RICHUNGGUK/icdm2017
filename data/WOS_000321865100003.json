{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fault_detection"}, {"score": 0.03843856552198327, "phrase": "instruction_results"}, {"score": 0.004577869668211548, "phrase": "unending_technology_scaling"}, {"score": 0.004372442291178139, "phrase": "semiconductor_industry"}, {"score": 0.004332471656145115, "phrase": "fault_tolerance_techniques"}, {"score": 0.004214729542986473, "phrase": "existing_designs"}, {"score": 0.004007083686875716, "phrase": "research_attention"}, {"score": 0.0037060428445111664, "phrase": "blind_strategy"}, {"score": 0.003555902292752528, "phrase": "large_overhead"}, {"score": 0.00338060449446278, "phrase": "unnecessary_rollbacks"}, {"score": 0.0032585499655442404, "phrase": "subsequent_execution"}, {"score": 0.0030135741897058844, "phrase": "minimum_set"}, {"score": 0.00283870598459543, "phrase": "proposed_technique"}, {"score": 0.0026986685585382347, "phrase": "execution_hotspot"}, {"score": 0.0025420267431501367, "phrase": "final_program_results"}, {"score": 0.0023725232579531273, "phrase": "proposed_hotspot-targeting_technique"}, {"score": 0.0021049977753042253, "phrase": "full_fault_coverage"}], "paper_keywords": ["Performance", " Reliability", " Reliability", " Fault detection & recovery", " Checkpointing", " Application-Specific optimization"], "paper_abstract": "While the unending technology scaling has brought reliability to the forefront of concerns of semiconductor industry, fault tolerance techniques are still rarely incorporated into existing designs due to their high overhead. One fault tolerance scheme that receives a lot of research attention is duplication and checkpointing. However, most of the techniques in the category employ a blind strategy to compare instruction results, therefore not only generating large overhead in buffering and verifying these values, but also inducing unnecessary rollbacks to recover faults that will never influence subsequent execution. To tackle these issues, we introduce in this paper an approach that identifies the minimum set of instruction results for fault detection and checkpointing. For a given application, the proposed technique first identifies the control and data flow information of each execution hotspot, and then selects only the instruction results that either influence the final program results or are needed during re-execution as the comparison set. Our experimental studies demonstrate that the proposed hotspot-targeting technique is able to reduce nearly 88% of the comparison overhead and mask over 38% of the total injected faults of all the injected faults while at the same time delivering full fault coverage.", "paper_title": "Boosting Efficiency of Fault Detection and Recovery through Application-Specific Comparison and Checkpointing", "paper_id": "WOS:000321865100003"}