{"auto_keywords": [{"score": 0.034012209640315184, "phrase": "competitive_ratio"}, {"score": 0.030678008488936204, "phrase": "avr"}, {"score": 0.013579864828727587, "phrase": "yao"}, {"score": 0.013478068942309167, "phrase": "demers"}, {"score": 0.013327081095506252, "phrase": "shenker"}, {"score": 0.012883797110762717, "phrase": "computer_science"}, {"score": 0.00481495049065317, "phrase": "power_management_technique"}, {"score": 0.004548848077202625, "phrase": "dual-objective_scheduling_problems"}, {"score": 0.004480394224548146, "phrase": "operating_system"}, {"score": 0.004184825434585617, "phrase": "resulting_schedule"}, {"score": 0.003720600007408015, "phrase": "qos_constraint"}, {"score": 0.0036924762294207633, "phrase": "deadline_feasibility"}, {"score": 0.003501452436803395, "phrase": "online_speed"}, {"score": 0.0034749794034364197, "phrase": "algorithm_average_rate"}, {"score": 0.0033455764382772754, "phrase": "constant_speed"}, {"score": 0.0030082398041055003, "phrase": "speed_s_uses_power_s"}, {"score": 0.002643888053328987, "phrase": "alpha_approaches_infinity"}, {"score": 0.0025843206540392184, "phrase": "competitive_analysis"}, {"score": 0.0024227171881502614, "phrase": "large_alpha"}, {"score": 0.002368120987066921, "phrase": "alternative_proof"}, {"score": 0.002137236968970666, "phrase": "original_analysis"}, {"score": 0.0021049977753042253, "phrase": "yao_et_al"}], "paper_keywords": ["Speed scaling", " Voltage scaling", " Scheduling", " Online algorithms", " Power management"], "paper_abstract": "Speed scaling is a power management technique that involves dynamically changing the speed of a processor. This gives rise to dual-objective scheduling problems, where the operating system both wants to conserve energy and optimize some Quality of Service (QoS) measure of the resulting schedule. Yao, Demers, and Shenker (Proc. IEEE Symp. Foundations of Computer Science, pp. 374-382, 1995) considered the problem where the QoS constraint is deadline feasibility and the objective is to minimize the energy used. They proposed an online speed scaling algorithm Average Rate (AVR) that runs each job at a constant speed between its release and its deadline. They showed that the competitive ratio of AVR is at most (2 alpha) (alpha) /2 if a processor running at speed s uses power s (alpha) . We show the competitive ratio of AVR is at least ((2-delta)alpha) (alpha) /2, where delta is a function of alpha that approaches zero as alpha approaches infinity. This shows that the competitive analysis of AVR by Yao, Demers, and Shenker is essentially tight, at least for large alpha. We also give an alternative proof that the competitive ratio of AVR is at most (2 alpha) (alpha) /2 using a potential function argument. We believe that this analysis is significantly simpler and more elementary than the original analysis of AVR in Yao et al. (Proc. IEEE Symp. Foundations of Computer Science, pp. 374-382, 1995).", "paper_title": "Average Rate Speed Scaling", "paper_id": "WOS:000290267000009"}