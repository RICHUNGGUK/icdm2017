{"auto_keywords": [{"score": 0.04189650756075026, "phrase": "structural_failures"}, {"score": 0.00481495049065317, "phrase": "ontology-driven_information_system_design"}, {"score": 0.00477924690801092, "phrase": "conventional_information_systems"}, {"score": 0.00465634671242413, "phrase": "relational_database"}, {"score": 0.004306205029641728, "phrase": "heterogenous_knowledge"}, {"score": 0.004027031316965272, "phrase": "information_system"}, {"score": 0.003724034990158436, "phrase": "stable_database_schema"}, {"score": 0.0036689507925299885, "phrase": "widely_accepted_alternative"}, {"score": 0.003641713874009232, "phrase": "relational_databases"}, {"score": 0.003614678418617691, "phrase": "semantic_web_ontologies"}, {"score": 0.003561205990687285, "phrase": "software_developers"}, {"score": 0.00353476609156032, "phrase": "adequate_frameworks"}, {"score": 0.003508521802236789, "phrase": "design_methodologies"}, {"score": 0.003280891942617853, "phrase": "ontology-backed_software_applications"}, {"score": 0.0028688545415450407, "phrase": "integrity_constraints"}, {"score": 0.0026626797255348287, "phrase": "particular_application"}, {"score": 0.002613487968156893, "phrase": "invalid_data"}, {"score": 0.002574788013427524, "phrase": "first_case"}, {"score": 0.0025461386232786356, "phrase": "ontology_change"}, {"score": 0.002389696110283506, "phrase": "second_case"}, {"score": 0.0023281003994670714, "phrase": "entered_data"}, {"score": 0.0022261705957258506, "phrase": "object_ontological_mapping"}, {"score": 0.0022096205841489786, "phrase": "transaction_management"}, {"score": 0.0021687871397741425, "phrase": "api."}, {"score": 0.0021526564019119466, "phrase": "reference_java_implementation"}, {"score": 0.0021049977753042253, "phrase": "proof-of-concept_application"}], "paper_keywords": ["Information system", " ontology", " Web Ontology Language"], "paper_abstract": "Conventional information systems are built on top of a relational database that requires its data model to be stable. This lack of adaptability is very restrictive for systems that manipulate evolving or heterogenous knowledge. The authors of this paper faced this issue at the time of the development of an information system of structural failures. As knowledge on structural failures is very heterogeneous and dynamic, it is practically impossible to define a stable database schema ahead. The widely accepted alternative to relational databases are semantic web ontologies. However, software developers miss adequate frameworks and design methodologies in this area. This paper tries to fill the gap by proposing a methodology for designing ontology-backed software applications that make the ontology possible to evolve while being exploited by one or more applications at the same time. The methodology relies on a contract between the ontology and the application that is formally expressed in terms of integrity constraints. Violation of the contract means either that the ontology evolved in a way that is incompatible with the particular application or the application produced invalid data. In the first case, the ontology change must either be rolled back, or the application needs to be upgraded. In the second case, the user has to modify entered data to fulfill the contract. Furthermore, this paper elaborates an object ontological mapping, transaction management, and efficient querying API. A reference Java implementation of the methodology and the proof-of-concept application in the civil engineering domain is introduced at the end of the paper.", "paper_title": "Ontology-Driven Information System Design", "paper_id": "WOS:000303069100005"}