{"auto_keywords": [{"score": 0.030736321282749512, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "location-based_services"}, {"score": 0.004786211598268987, "phrase": "gpu_run_time_analysis"}, {"score": 0.004715109042114676, "phrase": "location-based_service"}, {"score": 0.004617328272121826, "phrase": "nearest_point"}, {"score": 0.004310040700905537, "phrase": "user-specific_information"}, {"score": 0.0041703614123283165, "phrase": "security_concerns"}, {"score": 0.00407161650109722, "phrase": "previous_solutions"}, {"score": 0.003823350854607601, "phrase": "novel_idea"}, {"score": 0.0037216229812089686, "phrase": "database_design"}, {"score": 0.003633464433320317, "phrase": "exact_nearest_poi"}, {"score": 0.003432338275868245, "phrase": "first_part"}, {"score": 0.003361069456060196, "phrase": "topological_space"}, {"score": 0.00333097896868937, "phrase": "object_space"}, {"score": 0.0032423089921154503, "phrase": "transmission_cost"}, {"score": 0.0032036590920314725, "phrase": "disjointed_neighborhoods"}, {"score": 0.0030904433394138963, "phrase": "database_matrix"}, {"score": 0.003053598205821532, "phrase": "object_location"}, {"score": 0.002919287408226361, "phrase": "graphical_processing_unit"}, {"score": 0.002841545331522694, "phrase": "parallel_implementation"}, {"score": 0.002790867657645595, "phrase": "computing_power"}, {"score": 0.002765867822046626, "phrase": "streaming_multiprocessors"}, {"score": 0.0027246967293115343, "phrase": "parallel_computing_platform"}, {"score": 0.002708399936381754, "phrase": "programming_model"}, {"score": 0.002692200353719145, "phrase": "compute_unified_device_architecture"}, {"score": 0.0026362590493392785, "phrase": "second_part"}, {"score": 0.002604814679863312, "phrase": "serial_implementation"}, {"score": 0.0025583481578439894, "phrase": "execution_time"}, {"score": 0.0025051811853674215, "phrase": "scalable_design"}, {"score": 0.0024604876113911173, "phrase": "population_size"}, {"score": 0.002445767214680791, "phrase": "minimal_impact"}, {"score": 0.0024311346712789553, "phrase": "user_experience"}, {"score": 0.0023949342544966916, "phrase": "gpu-cuda_parallel_implementation"}, {"score": 0.002352202897945092, "phrase": "cpu_serial_processing"}, {"score": 0.002289536409184423, "phrase": "cpu."}, {"score": 0.002255431275670053, "phrase": "optimal_size"}, {"score": 0.0022085455097790537, "phrase": "similar_scalable_algorithm"}, {"score": 0.0021496900363962602, "phrase": "gpu_execution_time"}, {"score": 0.0021049977753042253, "phrase": "chosen_parameter"}], "paper_keywords": ["Disjointed neighborhood", " Hausdorff space", " Parallel processing", " GPU computing", " CUDA", " Topological space"], "paper_abstract": "Private query in location-based service allows users to request and receive nearest point of interest (POI) without revealing their location or object received. However, since the service is customized, it requires user-specific information. Problems arise when a user due to privacy or security concerns is unwilling to disclose this information. Previous solutions to hide them have been found to be deficient and sometimes inefficient. In this paper, we propose a novel idea that will partition objects into neighborhoods supported by database design that allows a user to retrieve the exact nearest POI without revealing its location, or the object retrieved. The paper is organized into two parts. In the first part, we adopted the concept of topological space to generalize object space. To help limit information disclosed and minimize transmission cost, we create disjointed neighborhoods such that each neighborhood contains no more than one object. We organize the database matrix to align with object location in the area. For optimization, we introduce the concept of kernel in graphical processing unit (GPU), and we then develop parallel implementation of our algorithm by utilizing the computing power of the streaming multiprocessors of GPU and the parallel computing platform and programming model of Compute Unified Device Architecture (CUDA). In the second part, we study serial implementation of our algorithm with respect to execution time and complexity. Our experiment shows a scalable design that is suitable for any population size with minimal impact to user experience. We also study GPU-CUDA parallel implementation and compared the performance with CPU serial processing. The results show 23.9 improvement of GPU over CPU. To help determine the optimal size for the parameters in our design or similar scalable algorithm, we provide analysis and model for predicting GPU execution time based on the size of the chosen parameter.", "paper_title": "Direct private query in location-based services with GPU run time analysis", "paper_id": "WOS:000349259600006"}