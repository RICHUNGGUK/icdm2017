{"auto_keywords": [{"score": 0.04464717024532878, "phrase": "software_system"}, {"score": 0.00481495049065317, "phrase": "dynamic_knowledge_extraction"}, {"score": 0.004772367030970874, "phrase": "software_systems_using_sequential_pattern_mining._software_system_analysis"}, {"score": 0.004565007074039171, "phrase": "major_problem"}, {"score": 0.00450456611645112, "phrase": "reverse_engineering_literature"}, {"score": 0.004444921827311577, "phrase": "early_approaches"}, {"score": 0.004386063799793622, "phrase": "software_functionality"}, {"score": 0.004308791766002289, "phrase": "static_properties"}, {"score": 0.004176813329075736, "phrase": "static_approaches"}, {"score": 0.00378767277402891, "phrase": "novel_technique"}, {"score": 0.003754140294151593, "phrase": "dynamic_analysis"}, {"score": 0.0037209035703970705, "phrase": "software_systems"}, {"score": 0.003574929398913029, "phrase": "software_features"}, {"score": 0.0035118972210075633, "phrase": "proposed_approach"}, {"score": 0.003465350958971198, "phrase": "specific_feature"}, {"score": 0.003359119985242403, "phrase": "task_scenarios"}, {"score": 0.0032272929113113203, "phrase": "execution_traces"}, {"score": 0.0031422859551159506, "phrase": "sequential_pattern_mining_technique"}, {"score": 0.0031006232333900055, "phrase": "generated_execution"}, {"score": 0.0030189426536422577, "phrase": "execution_patterns"}, {"score": 0.002965684305115369, "phrase": "specific_feature_functionality"}, {"score": 0.002874726518572154, "phrase": "extracted_execution_patterns"}, {"score": 0.002811464848641341, "phrase": "concept_lattice"}, {"score": 0.0027865506182608263, "phrase": "separate_feature-specific_group"}, {"score": 0.0027373807320805084, "phrase": "commonly_used_group"}, {"score": 0.0025605773834404253, "phrase": "closely_related_features"}, {"score": 0.0025266078302900036, "phrase": "source_code"}, {"score": 0.002352886041381761, "phrase": "structural_merits"}, {"score": 0.002290858045013009, "phrase": "component_cohesion"}, {"score": 0.0022705467477443417, "phrase": "functional_scattering"}, {"score": 0.00221068461235127, "phrase": "prototype_toolkit"}, {"score": 0.002123831297790248, "phrase": "pine_email_client"}], "paper_keywords": ["Sequential pattern mining", " feature extraction", " execution trace", " scenario analysis"], "paper_abstract": "Software system analysis for identifying software functionality in source code remains a major problem in the reverse engineering literature. The early approaches for extracting software functionality mainly relied on static properties of software system. However, the static approaches by nature suffer from the lack of semantic and hence are not appropriate for this task. This paper presents a novel technique for dynamic analysis of software systems to identify the implementation of certain software functionality known as software features. In the proposed approach, a specific feature is shared by a number of task scenarios that are applied on the software system to generate execution traces. The application of a sequential pattern mining technique on the generated execution traces allows us to extract execution patterns that reveal the specific feature functionality. In a further step, the extracted execution patterns are distributed over a concept lattice to separate feature-specific group of functions from commonly used group of functions. The use of lattice also allows for identifying a family of closely related features in the source code. Moreover, in this work we provide a set of metrics for evaluating the structural merits of the software system such as component cohesion and functional scattering. We have implemented a prototype toolkit and experimented with two case studies Xfig drawing tool and Pine email client with very promising results.", "paper_title": "DYNAMIC KNOWLEDGE EXTRACTION FROM SOFTWARE SYSTEMS USING SEQUENTIAL PATTERN MINING", "paper_id": "WOS:000286751700001"}