{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "subsequence_combinatorics"}, {"score": 0.003797690272118125, "phrase": "contiguous_part"}, {"score": 0.0036453427552753533, "phrase": "counting_subsequences"}, {"score": 0.0034422330919613294, "phrase": "biological_sequence_analysis"}, {"score": 0.00335867620389808, "phrase": "machine_learning"}, {"score": 0.003277140908834426, "phrase": "coding_theory"}, {"score": 0.0031199418866663543, "phrase": "categorical_time_series"}, {"score": 0.0030441844088874366, "phrase": "social_sciences"}, {"score": 0.0028744731986533076, "phrase": "word_complexity"}, {"score": 0.0026920404458807444, "phrase": "efficient_dynamic_programming_algorithms"}, {"score": 0.0025628355581338563, "phrase": "distinct_subsequences"}, {"score": 0.0022849068677290836, "phrase": "joint_embeddings"}], "paper_keywords": ["Subsequence", " Combinatorics", " Dynamic programming", " Algorithm"], "paper_abstract": "A subsequence is obtained from a string by deleting any number of characters; thus in contrast to a substring. a subsequence is not necessarily a contiguous part of the string. Counting subsequences under various constraints has become relevant to biological sequence analysis, to machine learning, to coding theory, to the analysis of categorical time series in the social sciences, and to the theory of word complexity. We present theorems that lead to efficient dynamic programming algorithms to count (1) distinct subsequences in a string, (2) distinct common subsequences of two strings, (3) matching joint embeddings in two strings, (4) distinct subsequences with a given minimum span, and (5) sequences generated by a string allowing characters to come in runs of a length that is bounded from above. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Algorithms for subsequence combinatorics", "paper_id": "WOS:000261785400006"}