{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "transaction_processing_software"}, {"score": 0.004741395005218184, "phrase": "modern_transaction_processing_software"}, {"score": 0.004668957916795845, "phrase": "acid_properties"}, {"score": 0.0041703614123283165, "phrase": "computing_environments"}, {"score": 0.004085579055228594, "phrase": "typical_examples"}, {"score": 0.004023120753104693, "phrase": "long-running_transactions"}, {"score": 0.0039010428828989826, "phrase": "service-oriented_architectures"}, {"score": 0.003802135020791801, "phrase": "new_transaction_models"}, {"score": 0.0037057255600764475, "phrase": "advanced_or_extended_transactions"}, {"score": 0.003574830654211291, "phrase": "transaction_properties"}, {"score": 0.0034841647157189985, "phrase": "proof-theoretic_approaches"}, {"score": 0.003413284742632989, "phrase": "recent_progress"}, {"score": 0.003378385493203297, "phrase": "model_checking"}, {"score": 0.0032256881625734777, "phrase": "model-driven_approach"}, {"score": 0.003160049822855747, "phrase": "provably_correct_implementation"}, {"score": 0.0031116963435584982, "phrase": "transaction_model"}, {"score": 0.002971016979295967, "phrase": "state_machines"}, {"score": 0.0029255474957478474, "phrase": "transaction_participants"}, {"score": 0.0027505037762786087, "phrase": "possible_execution_paths"}, {"score": 0.002708399936381754, "phrase": "synchronized_state_machines"}, {"score": 0.0026532596852754525, "phrase": "property_violations"}, {"score": 0.0025726416100664853, "phrase": "verified_transaction_model"}, {"score": 0.002393907896783117, "phrase": "nested_transactions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["transaction processing", " model-driven development", " code generation", " model-checking"], "paper_abstract": "In modern transaction processing software, the ACID properties (atomicity, consistency, isolation, durability) are often relaxed, in order to address requirements that arise in computing environments of today. Typical examples are the long-running transactions in mobile computing, in service-oriented architectures and B2B collaborative applications. These new transaction models are collectively known as advanced or extended transactions. Formal specification and reasoning for transaction properties have been limited to proof-theoretic approaches, despite the recent progress in model checking. In this work, we present a model-driven approach for generating a provably correct implementation of the transaction model of interest. The model is specified by state machines for the transaction participants, which are synchronized on a set of events. All possible execution paths of the synchronized state machines are checked for property violations. An implementation for the verified transaction model is then automatically generated. To demonstrate the approach, the specification of nested transactions is verified, because it is the basis for many advanced transaction models. Concurrency and Computation: Practice and Experience. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Model checking and code generation for transaction processing software", "paper_id": "WOS:000302611000006"}