{"auto_keywords": [{"score": 0.0356535846972009, "phrase": "handler_abstraction"}, {"score": 0.00481495049065317, "phrase": "plotkin_and_pretnar's_handlers"}, {"score": 0.004626255242038005, "phrase": "sweet_spot"}, {"score": 0.0045346863560033175, "phrase": "design_space"}, {"score": 0.004415395176043526, "phrase": "effectful_computation"}, {"score": 0.004299228562179176, "phrase": "effect_signatures"}, {"score": 0.004186105377259855, "phrase": "algebraic_effects"}, {"score": 0.004103212598803194, "phrase": "high_degree"}, {"score": 0.0038900709793274484, "phrase": "effectful_programs"}, {"score": 0.00378767277402891, "phrase": "concrete_interpretation"}, {"score": 0.003449972561293443, "phrase": "algebraic_computation"}, {"score": 0.0032925489316383955, "phrase": "multiple_settings"}, {"score": 0.002900426826591769, "phrase": "position_paper"}, {"score": 0.0026950674053179404, "phrase": "gentle_introduction"}, {"score": 0.002572001496778222, "phrase": "illustrative_examples"}, {"score": 0.0025042115651986332, "phrase": "straightforward_operational_semantics"}, {"score": 0.0022504181450352045, "phrase": "sml"}, {"score": 0.0022057677637040396, "phrase": "racket_implementations"}, {"score": 0.0021620042653528846, "phrase": "present_experimental_results"}, {"score": 0.0021049977753042253, "phrase": "existing_code"}], "paper_keywords": ["algebraic effects", " effect handlers", " effect typing", " monads", " continuations", " Haskell", " modularity"], "paper_abstract": "Plotkin and Pretnar's handlers for algebraic effects occupy a sweet spot in the design space of abstractions for effectful computation. By separating effect signatures from their implementation, algebraic effects provide a high degree of modularity, allowing programmers to express effectful programs independently of the concrete interpretation of their effects. A handler is an interpretation of the effects of an algebraic computation. The handler abstraction adapts well to multiple settings: pure or impure, strict or lazy, static types or dynamic types. This is a position paper whose main aim is to popularise the handler abstraction. We give a gentle introduction to its use, a collection of illustrative examples, and a straightforward operational semantics. We describe our Haskell implementation of handlers in detail, outline the ideas behind our OCaml, SML, and Racket implementations, and present experimental results comparing handlers with existing code.", "paper_title": "Handlers in Action", "paper_id": "WOS:000327696700014"}