{"auto_keywords": [{"score": 0.04519529475002557, "phrase": "aojpl"}, {"score": 0.019509326298721427, "phrase": "jpl"}, {"score": 0.004918726355979456, "phrase": "intel_xeon"}, {"score": 0.00481495049065317, "phrase": "method-level_parallel_library"}, {"score": 0.00467672365043496, "phrase": "jomp"}, {"score": 0.0046069985410261746, "phrase": "improved_version"}, {"score": 0.00452063603944825, "phrase": "aspect-oriented_programming"}, {"score": 0.00439082105401086, "phrase": "software_threads"}, {"score": 0.004164644263639545, "phrase": "run-time_reflection"}, {"score": 0.00406083086983316, "phrase": "openmp-like_notations"}, {"score": 0.0034899090274046014, "phrase": "experimental_results"}, {"score": 0.0032148229832850215, "phrase": "jgf_benchmark_suite"}, {"score": 0.003174464741377186, "phrase": "varying_numbers"}, {"score": 0.0021049977753042253, "phrase": "good_scalability"}], "paper_keywords": ["Parallel library", " Scalability", " Aspect-oriented programming", " Method-level parallelism"], "paper_abstract": "This paper proposes a method-level parallel library, called JPL, and an improved version based on aspect-oriented programming, called AOJPL. Both JPL and AOJPL execute a method based on run-time reflection. By adding OpenMP-like notations to the definition of a method, AOJPL can automatically finish some tasks of JPL, thus making AOJPL easy to utilize. Experimental results show that when JPL and AOJPL are applied to several benchmarks in the JGF Benchmark Suite for varying numbers of threads on two different multicore processors (Intel Xeon and Sun Sparc T2), their performance tracks JOMP very closely under the situation that the number of software threads is not more than a number (8 for Intel Xeon and 64 for Sun Sparc T2). When the number of software threads surpasses the number, JPL and AOJPL significantly outperform JOMP for all four benchmarks. Both JPL and AOJPL can gain good scalability.", "paper_title": "A scalable method-level parallel library and its improvement", "paper_id": "WOS:000308110100035"}