{"auto_keywords": [{"score": 0.04774633807425784, "phrase": "weak_fairness"}, {"score": 0.007790264397573323, "phrase": "weaker_version"}, {"score": 0.0075778695944483795, "phrase": "first_approach"}, {"score": 0.00481495049065317, "phrase": "scalable_model_checking"}, {"score": 0.004788327412856401, "phrase": "self-stabilizing_programs"}, {"score": 0.004670325028652672, "phrase": "symbolic_model_checker"}, {"score": 0.0031933617014256676, "phrase": "huang's_mutual_exclusion_program"}, {"score": 0.002889532416504619, "phrase": "second_approach"}, {"score": 0.002810373366887749, "phrase": "hoepman's_ring-orientation_program"}, {"score": 0.0026956712908896147, "phrase": "weak_stabilization"}, {"score": 0.002473203873496859, "phrase": "transformation_algorithms"}, {"score": 0.0024526718637463596, "phrase": "weak_stabilizing_programs"}, {"score": 0.002333001929659445, "phrase": "deterministic_self-stabilization"}, {"score": 0.002275369652100353, "phrase": "probabilistic_self-stabilization"}, {"score": 0.002256476304581947, "phrase": "significantly_reduced_cost"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Self-stabilization", " Fairness", " Fault-tolerance", " Verification", " Model checking"], "paper_abstract": "Existing approaches for verifying self-stabilization with a symbolic model checker have relied on the use of weak fairness. We point out that this approach has limited scalability. To overcome this limitation, first, we show that if self-stabilization is possible without fairness then the cost of verifying self-stabilization is substantially lower. In fact, we observe from several case studies that the cost of verification under weak fairness is more than 1000 times that of the cost without fairness. For the case where weak fairness is essential for self-stabilization, we demonstrate the feasibility of two approaches for improving scalability: (1) decomposition and (2) utilizing the weaker version of self-stabilization, namely weak stabilization. In the first approach, the designer partitions the program into components where each component satisfies its property without fairness. We show that the first approach enables us to verify Huang's mutual exclusion program for uniform rings with 31 processes (state space 10(138)) whereas without this approach, it was not possible to verify the same program with 5 processes (state space 10(10)). In the second approach, a weaker version of self-stabilization is verified. For Hoepman's ring-orientation program on odd-length ring, we show that it is possible to verify weak stabilization for 301 processes (state space 10(181)) whereas self-stabilization could not be verified for 9 processes (state space 10(5)) under weak fairness. Furthermore, one can utilize transformation algorithms to convert weak stabilizing programs to probabilistically stabilizing programs. Hence, for the case where it is not possible to verify deterministic self-stabilization, one can obtain the assurance provided by probabilistic self-stabilization at a significantly reduced cost. Finally, we also present 5 case studies to illustrate the scalability of stabilization with techniques suggested in this paper. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Towards scalable model checking of self-stabilizing programs", "paper_id": "WOS:000315614400003"}