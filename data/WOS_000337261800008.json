{"auto_keywords": [{"score": 0.03616457540369227, "phrase": "formal_semantics"}, {"score": 0.030191547958552147, "phrase": "consistency_checking"}, {"score": 0.015719716506582538, "phrase": "impact_analysis"}, {"score": 0.01142591913701867, "phrase": "change_impact_analysis"}, {"score": 0.01116530239698572, "phrase": "requirements_relations"}, {"score": 0.009404883274587123, "phrase": "proposed_changes"}, {"score": 0.00922034243606934, "phrase": "requirements_models"}, {"score": 0.008240405574053904, "phrase": "false_positive_impacts"}, {"score": 0.0047357308775561255, "phrase": "metamodeling_approach"}, {"score": 0.004505771917193233, "phrase": "software_systems"}, {"score": 0.004446349752828045, "phrase": "new_requirements"}, {"score": 0.004329835888760592, "phrase": "textual_artifacts"}, {"score": 0.004160740888748725, "phrase": "requirements_document"}, {"score": 0.004092240621596351, "phrase": "requirements_engineer"}, {"score": 0.00397175830521626, "phrase": "single_change"}, {"score": 0.0038676325043529524, "phrase": "actual_impact"}, {"score": 0.003264872488939969, "phrase": "requirements_metamodel"}, {"score": 0.003243246027166794, "phrase": "commonly_used_requirements_relation_types"}, {"score": 0.0031792196429621888, "phrase": "first-order_logic"}, {"score": 0.0030246125031350903, "phrase": "textual_requirement"}, {"score": 0.0027834145465170292, "phrase": "tool_support"}, {"score": 0.0026834578825190407, "phrase": "requirements_inferencing"}, {"score": 0.002595698433525986, "phrase": "described_approach"}, {"score": 0.002287542098172185, "phrase": "change_classification"}, {"score": 0.0022723746977318642, "phrase": "change_alternatives"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Requirements metamodel", " Change impact analysis", " Proposing and propagating changes"], "paper_abstract": "Context: Following the evolution of the business needs, the requirements of software systems change continuously and new requirements emerge frequently. Requirements documents are often textual artifacts with structure not explicitly given. When a change in a requirements document is introduced, the requirements engineer may have to manually analyze all the requirements for a single change. This may result in neglecting the actual impact of a change. Consequently, the cost of implementing a change may become several times higher than expected. Objective: In this paper, we aim at improving change impact analysis in requirements by using formal semantics of requirements relations and requirements change types. Method: In our previous work we present a requirements metamodel with commonly used requirements relation types and their semantics formalized in first-order logic. In this paper the classification of requirements changes based on structure of a textual requirement is provided with formal semantics. The formalization of requirements relations and changes is used for propagating proposed changes and consistency checking of proposed changes in requirements models. The tool support for change impact analysis in requirements models is an extension of our Tool for Requirements Inferencing and Consistency Checking (TRIC). Results: The described approach for change impact analysis helps in the elimination of some false positive impacts in change propagation, and enables consistency checking of changes. Conclusion: We illustrate our approach in an example which shows that the formal semantics of requirements relations and change classification enables change alternatives to be proposed semi-automatically, the reduction of some false positive impacts and contradicting changes in requirements to be determined. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Change impact analysis for requirements: A metamodeling approach", "paper_id": "WOS:000337261800008"}