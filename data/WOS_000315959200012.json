{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nand_flash_memory"}, {"score": 0.015551603673996278, "phrase": "adaptive_page_layout_scheme"}, {"score": 0.004535481695403089, "phrase": "storage_medium"}, {"score": 0.004486432283770142, "phrase": "mobile_embedded_devices"}, {"score": 0.004225950334493496, "phrase": "translation_layers"}, {"score": 0.004090274535243564, "phrase": "flash-efficient_index_structure"}, {"score": 0.003958937342925219, "phrase": "novel_index_structure"}, {"score": 0.003362660648932244, "phrase": "single_flash_memory_page"}, {"score": 0.003219368413618912, "phrase": "flash_write_operation"}, {"score": 0.002934764205541183, "phrase": "page_layout"}, {"score": 0.0028715299874549245, "phrase": "workload_characteristics"}, {"score": 0.0027341763737751467, "phrase": "flash_pages"}, {"score": 0.002704554429386671, "phrase": "different_page_layouts"}, {"score": 0.0025611773887867255, "phrase": "real_workload"}, {"score": 0.002347378595930709, "phrase": "flash_operations"}, {"score": 0.0022967713922705, "phrase": "small_in-memory_cache"}, {"score": 0.0022595414135537697, "phrase": "kb"}, {"score": 0.0021987994275190314, "phrase": "overall_performance"}], "paper_keywords": ["NAND flash memory", " index structure", " B+-Tree"], "paper_abstract": "As NAND flash memory is gaining popularity as a storage medium for mobile embedded devices, many flash-aware file systems, flash-aware DBMSes, and flash translation layers (FTLs) require an flash-efficient index structure. This paper proposes a novel index structure called mu*-Tree which natively works on NAND flash memory, aiming at improving performance over B+-Tree. mu*-Tree stores all the nodes along the path from the root to the leaf into a single flash memory page in order to minimize the number of flash write operation when a node is updated. Furthermore, mu*-Tree has an adaptive page layout scheme which dynamically adjusts the page layout according to the workload characteristics on-the-fly. mu*-Tree also allows flash pages with different page layouts to coexist in the same tree. Our evaluation results with real workload traces show that mu*-Tree outperforms B+-Tree by up to 55 percent in terms of the time needed for flash operations. With a small in-memory cache of 32 KB, mu*-Tree improves the overall performance by up to five times compared to B+-Tree with the same cache size.", "paper_title": "mu*-Tree: An Ordered Index Structure for NAND Flash Memory with Adaptive Page Layout Scheme", "paper_id": "WOS:000315959200012"}