{"auto_keywords": [{"score": 0.030754840068907746, "phrase": "hmac"}, {"score": 0.004143196873246147, "phrase": "proposed_rescheduling"}, {"score": 0.003949693102823493, "phrase": "critical_path"}, {"score": 0.003540539868937462, "phrase": "required_hardware_resources"}, {"score": 0.003284026247389735, "phrase": "constant_initialization_vector"}, {"score": 0.0032173412933955117, "phrase": "second_one"}, {"score": 0.0031305230217636495, "phrase": "different_initialization_vectors"}, {"score": 0.002786858120570499, "phrase": "fragmented_messages"}, {"score": 0.0026384167183586015, "phrase": "experimental_results"}, {"score": 0.002463906556781983, "phrase": "constant_iv"}, {"score": 0.0023810183846557486, "phrase": "imputable_iv._comparisons"}, {"score": 0.002332626862738603, "phrase": "related_art"}, {"score": 0.0021049977753042253, "phrase": "current_academia_proposals"}], "paper_keywords": [""], "paper_abstract": "This paper proposes the rescheduling of the SHA-1 hash function operations on hardware implementations. The proposal is mapped on the Xilinx Virtex II Pro technology. The proposed rescheduling allows for a manipulation of the critical path in the SHA-1 function computation, facilitating the implementation of a more parallelized structure without an increase on the required hardware resources. Two cores have been developed, one that uses a constant initialization vector and a second one that allows for different Initialization Vectors (IV), in order to be used in HMAC and in the processing of fragmented messages. A hybrid software/hardware implementation is also proposed. Experimental results indicate a throughput of 1.4 Gbits/s requiring only 533 slices for a constant IV and 596 for an imputable IV. Comparisons to SHA-1 related art suggest improvements of the throughput /slice metric of 29% against the most recent commercial cores and 59% to the current academia proposals.", "paper_title": "Rescheduling for optimized SHA-1 calculation", "paper_id": "WOS:000239423500043"}