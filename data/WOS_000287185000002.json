{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "classical_approach"}, {"score": 0.004349955692802962, "phrase": "cost_relations"}, {"score": 0.0036328561748082138, "phrase": "first_phase"}, {"score": 0.0035828427627676075, "phrase": "considerable_attention"}, {"score": 0.003484864867147635, "phrase": "cost_analyses"}, {"score": 0.003389557201018519, "phrase": "programming_languages"}, {"score": 0.0033428820402140683, "phrase": "second_phase"}, {"score": 0.003118942369691329, "phrase": "first_practical_framework"}, {"score": 0.0030476702431093687, "phrase": "closed-form_upper_bounds"}, {"score": 0.0028172726995962173, "phrase": "distinctive_features"}, {"score": 0.00274017282519193, "phrase": "cost_analysis"}, {"score": 0.002714943351733626, "phrase": "realistic_programming_languages"}, {"score": 0.0026042472337367015, "phrase": "simple_complexity_classes"}, {"score": 0.0025212722607043546, "phrase": "reasonably_accurate_solutions"}, {"score": 0.0024865237976623286, "phrase": "key_idea"}, {"score": 0.002341384304635523, "phrase": "semantic-based_static_analyses"}, {"score": 0.0021843879253500894, "phrase": "ranking_functions"}, {"score": 0.002164264600379492, "phrase": "loop_invariants"}, {"score": 0.0021049977753042253, "phrase": "partial_evaluation"}], "paper_keywords": ["Cost analysis", " Closed-form upper bounds", " Resource analysis", " Automatic complexity analysis", " Static analysis", " Abstract interpretation", " Programming languages"], "paper_abstract": "The classical approach to automatic cost analysis consists of two phases. Given a program and some measure of cost, the analysis first produces cost relations (CRs), i.e., recursive equations which capture the cost of the program in terms of the size of its input data. Second, CRs are converted into closed-form, i.e., without recurrences. Whereas the first phase has received considerable attention, with a number of cost analyses available for a variety of programming languages, the second phase has been comparatively less studied. This article presents, to our knowledge, the first practical framework for the generation of closed-form upper bounds for CRs which (1) is fully automatic, (2) can handle the distinctive features of CRs, originating from cost analysis of realistic programming languages, (3) is not restricted to simple complexity classes, and (4) produces reasonably accurate solutions. A key idea in our approach is to view CRs as programs, which allows applying semantic-based static analyses and transformations to bound them, namely our method is based on the inference of ranking functions and loop invariants and on the use of partial evaluation.", "paper_title": "Closed-Form Upper Bounds in Static Cost Analysis", "paper_id": "WOS:000287185000002"}