{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unfamiliar_code"}, {"score": 0.03401932891645662, "phrase": "unfamiliar_programs"}, {"score": 0.004596960835906736, "phrase": "source_code"}, {"score": 0.004388796812234033, "phrase": "widely_available_and_potentially_rich_learning_resource"}, {"score": 0.0039085400187964196, "phrase": "programming_experience"}, {"score": 0.0036459007842756983, "phrase": "exploratory_study"}, {"score": 0.0032718761046588835, "phrase": "specific_functionality"}, {"score": 0.0026347074232350503, "phrase": "code_search_strategies"}, {"score": 0.002345944657572499, "phrase": "future_programming_environments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Non-programmer", " End-user", " Code search", " Strategy", " Barrier", " Comprehension", " Navigation", " Graphic output", " Storytelling alice"], "paper_abstract": "Source code on the web is a widely available and potentially rich learning resource for non-programmers. However, unfamiliar code can be daunting to end-users without programming experience. This paper describes the results of an exploratory study in which we asked non-programmers to find and modify the code responsible for specific functionality within unfamiliar programs. We present two interacting models of how non-programmers approach this problem: the Task Process Model and the Landmark-mapping model. Using these models, we describe code search strategies non-programmers employed and the barriers they encountered. Finally, we propose guidelines for future programming environments that support non-programmers in finding functionality in unfamiliar programs. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Non-programmers identifying functionality in unfamiliar code: strategies and barriers", "paper_id": "WOS:000282035800003"}