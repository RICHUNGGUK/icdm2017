{"auto_keywords": [{"score": 0.0490670488207421, "phrase": "application_requirements"}, {"score": 0.04236613065377659, "phrase": "confab"}, {"score": 0.00481495049065317, "phrase": "wsn_protocol_stacks"}, {"score": 0.004780780407878596, "phrase": "deployment_feedback"}, {"score": 0.0047468516620285525, "phrase": "extreme_diversity"}, {"score": 0.004663074596384574, "phrase": "large_number"}, {"score": 0.004629977311316031, "phrase": "different_available_protocols"}, {"score": 0.0045971138571344345, "phrase": "key_characteristics"}, {"score": 0.00456448259718331, "phrase": "wireless_sensor_networks"}, {"score": 0.004389089062127892, "phrase": "systematic_approach"}, {"score": 0.004296264970612285, "phrase": "application_specific_protocol_stacks"}, {"score": 0.004250588556735512, "phrase": "automated_fashion"}, {"score": 0.0040726680518382965, "phrase": "performance_evaluation"}, {"score": 0.0039723268236794935, "phrase": "automatic_protocol_stack_composition"}, {"score": 0.00388828234270598, "phrase": "optimization_approach"}, {"score": 0.003819599991449801, "phrase": "protocol_stack"}, {"score": 0.003752126270661821, "phrase": "interdependent_configurable_components"}, {"score": 0.0035063811070537233, "phrase": "individual_components"}, {"score": 0.0034690732089830045, "phrase": "optimal_fashion"}, {"score": 0.0034077704063304208, "phrase": "deployment_scenario_description"}, {"score": 0.0033356305227059072, "phrase": "desired_performance_metrics"}, {"score": 0.0032883848851259123, "phrase": "suitable_protocol_stacks"}, {"score": 0.003265012781840765, "phrase": "parameter_settings"}, {"score": 0.0032073043728420843, "phrase": "ontology_centric_knowledge_base"}, {"score": 0.0030293828200315797, "phrase": "appropriate_protocol_stacks"}, {"score": 0.002923214590192792, "phrase": "additional_plugins"}, {"score": 0.0028207566216121856, "phrase": "deployed_systems"}, {"score": 0.0028006988338192375, "phrase": "user_inputs"}, {"score": 0.0027708785175203556, "phrase": "network_performance"}, {"score": 0.0027413748388534025, "phrase": "plugin_mechanism"}, {"score": 0.002664221051021009, "phrase": "genetic_algorithms"}, {"score": 0.0025800088089364737, "phrase": "component_parameters"}, {"score": 0.002561658528837694, "phrase": "efficient_exploration"}, {"score": 0.0025343769150179764, "phrase": "corresponding_state_space"}, {"score": 0.0024718415971488627, "phrase": "well-known_medium_access_control"}, {"score": 0.002385166298265828, "phrase": "indriya_testbed"}, {"score": 0.0023681985426916366, "phrase": "different_user"}, {"score": 0.002359759876402679, "phrase": "specified_application_and_deployment_conditions"}, {"score": 0.0023015232625177755, "phrase": "confab_framework"}, {"score": 0.0022770057597574734, "phrase": "based_design"}, {"score": 0.0022527488455744656, "phrase": "powerful_enabler"}, {"score": 0.0022287497627555895, "phrase": "protocol_stacks"}, {"score": 0.002173739308244513, "phrase": "high_performance_characteristics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Ontology", " Knowledge base", " Component based design", " Protocol stack composition", " Optimization", " Deployment feedback"], "paper_abstract": "Extreme diversity of application requirements and a large number of different available protocols are key characteristics of Wireless Sensor Networks (WSNs). There is a need for a systematic approach to rapidly compose and optimize application specific protocol stacks in an automated fashion. In this article we present the design, implementation and performance evaluation of CONFab, a framework for automatic protocol stack composition founded on the component based optimization approach. We treat a protocol stack as a collection of interdependent configurable components and have a goal to find the most suitable composition of components, as well as optimal parameters selection of individual components in an optimal fashion. CONFab captures a deployment scenario description, relates it to the desired performance metrics, and suggests suitable protocol stacks and parameter settings. It utilizes an ontology centric knowledge base to select components from a pool of alternatives and reason on their compatibility, thus creating appropriate protocol stacks. The framework is equipped with a number of additional plugins that allow, for instance, incorporating feedback from deployed systems and user inputs to anticipate network performance. The plugin mechanism also enables incorporating further advanced optimization routines, such as genetic algorithms, which can be used for optimization of component parameters and efficient exploration of the corresponding state space. We use a set of well-known medium access control and routing protocols to validate the framework on the Indriya testbed in different user specified application and deployment conditions. Our experimental results show that CONFab framework with its component based design is a powerful enabler in obtaining protocol stacks that suit application requirements and thereby achieving high performance characteristics for the network. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "CONFab: Ontology and component based optimization of WSN protocol stacks with deployment feedback", "paper_id": "WOS:000347272300007"}