{"auto_keywords": [{"score": 0.04744942451594311, "phrase": "reverse_engineering"}, {"score": 0.04001538688662844, "phrase": "control_flow_graph"}, {"score": 0.015594896635038083, "phrase": "parallel_control-flow_obfuscation"}, {"score": 0.012077541701703698, "phrase": "obfuscating_transformations"}, {"score": 0.010456337940138375, "phrase": "target_code_blocks"}, {"score": 0.008556196593619371, "phrase": "obfuscated_program"}, {"score": 0.00481495049065317, "phrase": "quantitative_evaluation"}, {"score": 0.004477992162329249, "phrase": "software_obfuscation"}, {"score": 0.004370973501074594, "phrase": "control-flow_obfuscation"}, {"score": 0.003951800212882157, "phrase": "increasing_parallelism"}, {"score": 0.003719773848735395, "phrase": "atomic_operators"}, {"score": 0.0036454883790271843, "phrase": "proposed_framework"}, {"score": 0.003308986613384597, "phrase": "parallel_control-flow_obfuscating_transformation"}, {"score": 0.003040050100579337, "phrase": "original_program"}, {"score": 0.0029553380263320195, "phrase": "third_phase"}, {"score": 0.0028498718992429825, "phrase": "program_complexity"}, {"score": 0.0027041233221381756, "phrase": "obfuscating_transformation"}, {"score": 0.0024842242921857705, "phrase": "potency_metric"}, {"score": 0.0023287359930308864, "phrase": "control-flow_obfuscating_transformation"}, {"score": 0.00224558083320154, "phrase": "appropriate_obfuscating_transformation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Software obfuscation", " Security evaluation", " Reverse engineering", " Software metrics", " Control flow graph"], "paper_abstract": "Software obfuscation is intended to protect a program by thwarting reverse engineering. Several types of software obfuscation have been proposed, and control-flow obfuscation is a commonly adopted one. In this paper, we present a framework to evaluate parallel control-flow obfuscation, which raises difficulty of reverse engineering by increasing parallelism of a program. We also define a control flow graph of a program and some atomic operators for obfuscating transformations. The proposed framework comprises three phases: parsing, formalization and evaluation. A program is first parsed to a control flow graph. Then, we formalize a parallel control-flow obfuscating transformation based on our atomic operators. By selecting target code blocks in the control flow graph and applying obfuscating transformations to the target code blocks, the original program is then obfuscated. In the third phase, we define a measure to calculate the program complexity. The measure can be considered as a degree to which an obfuscating transformation can confuse a human trying to understand the obfuscated program. Such a measure can also be used as the base of the potency metric to estimate the capability of the obfuscated program against reverse engineering. Our novel framework helps efficiently examine a control-flow obfuscating transformation in a systematic manner and helps select an appropriate obfuscating transformation among a number of candidates to better protect a program. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "A framework for quantitative evaluation of parallel control-flow obfuscation", "paper_id": "WOS:000312677200004"}