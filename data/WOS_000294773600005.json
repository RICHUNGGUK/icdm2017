{"auto_keywords": [{"score": 0.039108224572764534, "phrase": "complete_regeneration"}, {"score": 0.0385050329583071, "phrase": "whole_test_suite"}, {"score": 0.03791077770628044, "phrase": "new_model"}, {"score": 0.03294505476643653, "phrase": "reusable_test_cases"}, {"score": 0.00481495049065317, "phrase": "model_evolution"}, {"score": 0.004763565662615503, "phrase": "protocol_software_specifications"}, {"score": 0.004712726613162057, "phrase": "regression_testing_process_improvement"}, {"score": 0.004662427600500598, "phrase": "model-based_testing"}, {"score": 0.0038846843242954935, "phrase": "test_suites"}, {"score": 0.003781772207256374, "phrase": "regression_testing"}, {"score": 0.0033423183812284294, "phrase": "microsoft"}, {"score": 0.0032712190037495975, "phrase": "specification_evolution"}, {"score": 0.003167441161387607, "phrase": "test_case_reusability_analysis_technique"}, {"score": 0.003066945490483524, "phrase": "original_test_suite"}, {"score": 0.0030178961017306646, "phrase": "graph_analysis"}, {"score": 0.0029221312451219203, "phrase": "test_suite_augmentation_technique"}, {"score": 0.002875391177926809, "phrase": "new_test_cases"}, {"score": 0.0028142286985235977, "phrase": "change-related_parts"}, {"score": 0.002568435291444709, "phrase": "high_percentage"}, {"score": 0.0025003054002226965, "phrase": "low-redundancy_new_test_cases"}, {"score": 0.0023189818169615135, "phrase": "regression_testing_time"}, {"score": 0.0022453451864218477, "phrase": "requirement_coverage"}, {"score": 0.0021857667493036786, "phrase": "requirements_specifications"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["model-based testing", " regression testing", " protocol document testing"], "paper_abstract": "Model-based testing helps test engineers automate their testing tasks so that they are more cost-effective. When the model is changed because of the evolution of the specification, it is important to maintain the test suites up to date for regression testing. A complete regeneration of the whole test suite from the new model, although inefficient, is still frequently used in the industry, including Microsoft. To handle specification evolution effectively, we propose a test case reusability analysis technique to identify reusable test cases of the original test suite based on graph analysis. We also develop a test suite augmentation technique to generate new test cases to cover the change-related parts of the new model. The experiment on four large protocol document testing projects shows that our technique can successfully identify a high percentage of reusable test cases and generate low-redundancy new test cases. When compared with a complete regeneration of the whole test suite, our technique significantly reduces regression testing time while maintaining the stability of requirement coverage over the evolution of requirements specifications. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Assuring the model evolution of protocol software specifications by regression testing process improvement", "paper_id": "WOS:000294773600005"}