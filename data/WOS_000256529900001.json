{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "program_comprehension"}, {"score": 0.04953289560992989, "phrase": "multiple_information_sources"}, {"score": 0.04766724089045989, "phrase": "software_maintenance"}, {"score": 0.0046253989970108985, "phrase": "key_activity"}, {"score": 0.00436742595270452, "phrase": "comprehending_programs"}, {"score": 0.004030157055463817, "phrase": "effective_comprehension_strategy"}, {"score": 0.003961330917648707, "phrase": "associated_efficient_approach"}, {"score": 0.0038271712887391015, "phrase": "sophisticated_tool_support"}, {"score": 0.0037402558657576124, "phrase": "indispensable_elements"}, {"score": 0.0036763623220059933, "phrase": "entire_solution_to_program_comprehension"}, {"score": 0.003592859432554987, "phrase": "high_costs"}, {"score": 0.003531474887552889, "phrase": "nontrivial_activity"}, {"score": 0.0034118234596993836, "phrase": "objective-oriented_comprehension_strategy"}, {"score": 0.0033152062780180073, "phrase": "traditional_comprehensive_understanding_strategy"}, {"score": 0.003130077012135034, "phrase": "on-demand_understanding"}, {"score": 0.002758273619951683, "phrase": "corresponding_framework"}, {"score": 0.0025892330566358503, "phrase": "feature-oriented_program_comprehension_approach"}, {"score": 0.002444544487772349, "phrase": "specific_category"}, {"score": 0.00241658945942583, "phrase": "feature-related_software_maintenance"}, {"score": 0.0023480892503414596, "phrase": "case_studies"}, {"score": 0.002268441347979241, "phrase": "proposed_solution"}, {"score": 0.0022041312401435346, "phrase": "studied_cases"}, {"score": 0.0021539955106204354, "phrase": "experimental_prototype"}, {"score": 0.0021049977753042253, "phrase": "software_engineers"}], "paper_keywords": ["program comprehension", " feature-oriented program comprehension", " feature location", " information retrieval"], "paper_abstract": "Program comprehension is a key activity throughout software maintenance and reuse. The knowledge acquired through comprehending programs can guide engineers to perform various kinds of software maintenance and reuse tasks. The effective comprehension strategy and the associated efficient approach, as well as the sophisticated tool support, are the indispensable elements for an entire solution to program comprehension to reduce the high costs of this nontrivial activity. This paper presents an objective-oriented comprehension strategy, contrasting to the traditional comprehensive understanding strategy in the literature. It is a kind of on-demand understanding for specific tasks and more effective in practice. In addition, using multiple information sources to understand programs is proposed with the corresponding framework. From these two points of views, we propose a feature-oriented program comprehension approach using requirement documentation. This approach aims at a specific category of feature-related software maintenance and reuse tasks. Case studies are conducted to evaluate the proposed solution. Results from the studied cases show that the experimental prototype provides more explicit advices for software engineers when performing these tasks.", "paper_title": "An objective-oriented approach to program comprehension using multiple information sources", "paper_id": "WOS:000256529900001"}