{"auto_keywords": [{"score": 0.03889571019423314, "phrase": "rnn"}, {"score": 0.004312622975366676, "phrase": "natural_generalization"}, {"score": 0.004208282550386197, "phrase": "continuous_nearest-neighbor_queries"}, {"score": 0.0037459885494311217, "phrase": "efficient_in-memory_processing_and_secondary_memory_pruning_techniques"}, {"score": 0.0035668128900149814, "phrase": "high-dimensional_spaces"}, {"score": 0.003417054482155433, "phrase": "krnn_queries"}, {"score": 0.0033139366449568565, "phrase": "k_nearest_neighbors"}, {"score": 0.0030414140732789186, "phrase": "auxiliary_solution-based_index_exo-tree"}, {"score": 0.002913650880082273, "phrase": "nn_query"}, {"score": 0.002791239714439304, "phrase": "existing_nn_processing_algorithm"}, {"score": 0.0026091594819333654, "phrase": "extensive_empirical_study"}, {"score": 0.002224510044064184, "phrase": "query_ranges"}, {"score": 0.0021705796895687864, "phrase": "nearest_neighbors"}, {"score": 0.0021049977753042253, "phrase": "cache_sizes"}], "paper_keywords": ["spatial database", " nearest-neighbor search"], "paper_abstract": "A range nearest-neighbor (RNN) query retrieves the nearest neighbor (NN) for every point in a range. It is a natural generalization of point and continuous nearest-neighbor queries and has many applications. In this paper, we consider the ranges as (hyper) rectangles and propose efficient in-memory processing and secondary memory pruning techniques for RNN queries in both 2D and high-dimensional spaces. These techniques are generalized for kRNN queries, which return the k nearest neighbors for every point in the range. In addition, we devise an auxiliary solution-based index EXO-tree to speed up any type of NN query. EXO-tree is orthogonal to any existing NN processing algorithm and, thus, can be transparently integrated. An extensive empirical study was conducted to evaluate the CPU and I/O performance of these techniques, and the study showed that they are efficient and robust under various data sets, query ranges, numbers of nearest neighbors, dimensions, and cache sizes.", "paper_title": "Range nearest-neighbor query", "paper_id": "WOS:000233938200006"}