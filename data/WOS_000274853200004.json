{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dynamic_clustered_metric_trees"}, {"score": 0.014198331651145053, "phrase": "similarity_search"}, {"score": 0.01331083483157433, "phrase": "access_methods"}, {"score": 0.007082546739796051, "phrase": "cpu_costs"}, {"score": 0.004749377457292245, "phrase": "complex_data_types"}, {"score": 0.004589307360976108, "phrase": "free_text"}, {"score": 0.004434608130268514, "phrase": "general_searching_approach"}, {"score": 0.004241235563017201, "phrase": "similar_objects"}, {"score": 0.004140613635632826, "phrase": "metric_distance_function"}, {"score": 0.004098221047046135, "phrase": "important_class"}, {"score": 0.004014728271095809, "phrase": "metric_data"}, {"score": 0.003839594092937135, "phrase": "paged_and_balanced_tree"}, {"score": 0.0037356237848699867, "phrase": "compact_regions"}, {"score": 0.003634458561248524, "phrase": "dynamic_insertions"}, {"score": 0.0035972293900260414, "phrase": "single_objects"}, {"score": 0.0032675746199502614, "phrase": "novel_algorithms"}, {"score": 0.002927545222513142, "phrase": "proposed_bulk_loading_algorithm"}, {"score": 0.0028975361811534265, "phrase": "index_bottom-up_layer"}, {"score": 0.002838435157502933, "phrase": "new_sampling"}, {"score": 0.002771001596749451, "phrase": "clustering_results"}, {"score": 0.002705165729333657, "phrase": "selected_sample_sets"}, {"score": 0.0026774300859545826, "phrase": "proposed_bulk_insertion_algorithm"}, {"score": 0.002649978056195926, "phrase": "bulk_loading_algorithm"}, {"score": 0.002587010112064415, "phrase": "new_index_structure"}, {"score": 0.002508239347479441, "phrase": "existing_structures"}, {"score": 0.002482517733720377, "phrase": "unified_high_quality_index"}, {"score": 0.002448631085132444, "phrase": "novel_decomposition_method"}, {"score": 0.0023578033235964356, "phrase": "significantly_improved_construction"}, {"score": 0.0023416540209862803, "phrase": "search_performance"}, {"score": 0.002247049536955399, "phrase": "extensive_experimental_study_show"}, {"score": 0.0022240004131756095, "phrase": "proposed_algorithms"}, {"score": 0.002208765537836048, "phrase": "alternative_methods"}, {"score": 0.0021861082519868567, "phrase": "construction_costs"}, {"score": 0.0021049977753042253, "phrase": "search_costs"}], "paper_keywords": ["Metric access methods", " Bulk loading", " Bulk insertion", " Indexing methods", " Metric spaces", " Similarity search"], "paper_abstract": "Repositories of complex data types, such as images, audio, video and free text, are becoming increasingly frequent in various fields. A general searching approach for such data types is that of similarity search, where the search is for similar objects and similarity is modeled by a metric distance function. An important class of access methods for similarity search in metric data is that of dynamic clustered metric trees, where the index is structured as a paged and balanced tree and the space is partitioned hierarchically into compact regions. While access methods of this class allow dynamic insertions typically of single objects, the problem of efficiently inserting a given data set into the index in bulk is largely open. In this article we address this problem and propose novel algorithms corresponding to its two cases, where the index is initially empty (i.e. bulk loading), and where the index is initially non empty (i.e. bulk insertion). The proposed bulk loading algorithm builds the index bottom-up layer by layer, using a new sampling based clustering method, which improves clustering results by improving the quality of the selected sample sets. The proposed bulk insertion algorithm employs the bulk loading algorithm to load the given data into a new index structure, and then merges the new and the existing structures into a unified high quality index, using a novel decomposition method to reduce overlaps between the structures. Both algorithms yield significantly improved construction and search performance, and are applicable to all dynamic clustered metric trees. Results from an extensive experimental study show that the proposed algorithms outperform alternative methods, reducing construction costs by up to 47% for CPU costs and 99% for I/O costs, and search costs by up to 48% for CPU costs and 30% for I/O costs.", "paper_title": "Bulk construction of dynamic clustered metric trees", "paper_id": "WOS:000274853200004"}