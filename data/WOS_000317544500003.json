{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "-space_garbage_collection"}, {"score": 0.004754600386388821, "phrase": "semispace_garbage_collectors"}, {"score": 0.004380265418103948, "phrase": "good_performance"}, {"score": 0.004271100220705305, "phrase": "mark-compact_collectors"}, {"score": 0.00406083086983316, "phrase": "extra_heap_space"}, {"score": 0.003984665807155269, "phrase": "live_objects"}, {"score": 0.0033814348757887232, "phrase": "high_infant_mortality"}, {"score": 0.003276321257403678, "phrase": "half_the_heap"}, {"score": 0.003095257144856771, "phrase": "memory_usage"}, {"score": 0.002780025943393764, "phrase": "online_predictions"}, {"score": 0.0026597250663309385, "phrase": "reserved_space"}, {"score": 0.002544616720630384, "phrase": "skew-space_garbage_collector"}, {"score": 0.0023587312574818208, "phrase": "mmtk_framework"}, {"score": 0.002256619934086924, "phrase": "encouraging_results"}, {"score": 0.002228263890334039, "phrase": "related_garbage_collection_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Skew space", " Mark compact", " Semi space", " Garbage collection", " Space efficiency"], "paper_abstract": "Semispace garbage collectors relocate all the live objects in one step, which is simple and leads to good performance. Compared with mark-compact collectors, however, they need to reserve extra heap space for copying live objects. As much as half of the heap could be reserved as it is possible that all the allocated objects survive. In reality, however, most programs exhibit a high infant mortality, and therefore reserving half the heap is wasteful. We have observed that the memory usage of many ordinary programs is relatively stable over the course of their execution. This provides an opportunity for online predictions to dynamically adjust and optimize the reserved space. Consequently, we propose a skew-space garbage collector that reserves space dynamically. This collector is implemented using the MMTk framework of the likes RVM and gives encouraging results against related garbage collection algorithms for the DaCapo and SPECjvm98 benchmarks. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Skew-space garbage collection", "paper_id": "WOS:000317544500003"}