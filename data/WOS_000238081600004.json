{"auto_keywords": [{"score": 0.03830596095410129, "phrase": "intermediate_program_representation"}, {"score": 0.036748593022488035, "phrase": "precise_dynamic_slices"}, {"score": 0.00481495049065317, "phrase": "efficient_interprocedural_dynamic_slicing_algorithm"}, {"score": 0.004371660146981191, "phrase": "intraprocedural_dynamic_slicing_algorithm"}, {"score": 0.004011867299107537, "phrase": "interprocedural_calls"}, {"score": 0.003378385493203297, "phrase": "interprocedural_dynamic_slicing_algorithm"}, {"score": 0.0032016639006812856, "phrase": "control_dependence_graphs"}, {"score": 0.002473560912156024, "phrase": "existing_dynamic_slicing_algorithms"}, {"score": 0.0021049977753042253, "phrase": "composite_data_structures"}], "paper_keywords": ["program slicing", " static slicing", " dynamic slicing", " program debugging", " control flow graph", " control dependence graph", " program dependence graph"], "paper_abstract": "We present an efficient interprocedural dynamic slicing algorithm for structured programs. We first propose an intraprocedural dynamic slicing algorithm, and subsequently extend it to handle interprocedural calls. Our intraprocedural dynamic slicing algorithm uses control dependence graph as the intermediate program representation, and computes precise dynamic slices. The interprocedural dynamic slicing algorithm uses a collection of control dependence graphs (one for each procedure) as the intermediate program representation. and computes precise dynamic slices. We show that our proposed interprocedural dynamic slicing algorithm is more efficient than the existing dynamic slicing algorithms. We also discuss how our algorithm can be extended to efficiently handle recursion, composite data structures and pointers. (C) 2005 Elsevier Inc. All rights reserved.", "paper_title": "An efficient interprocedural dynamic slicing method", "paper_id": "WOS:000238081600004"}