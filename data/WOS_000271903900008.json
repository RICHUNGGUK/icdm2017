{"auto_keywords": [{"score": 0.03224726441329197, "phrase": "aspectj"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_calculus"}, {"score": 0.004046020290832207, "phrase": "main_contribution"}, {"score": 0.0038179283509963695, "phrase": "lambda_saop_advice"}, {"score": 0.0034995881411519925, "phrase": "effect-based_type_inference_system"}, {"score": 0.0033262524445013303, "phrase": "static_typing"}, {"score": 0.0032546105164772995, "phrase": "proposed_semantics"}, {"score": 0.0023990982005125763, "phrase": "effect-based_inference_algorithm"}, {"score": 0.002135812692862058, "phrase": "required_soundness"}, {"score": 0.0021049977753042253, "phrase": "preservation_proofs"}], "paper_keywords": ["Security", " aspect-oriented programming", " calculus"], "paper_abstract": "This paper presents an aspect-oriented calculus for security called lambda_SAOP. It is based on the lambda_calculus and contains pointcuts that are relevant to security hardening of applications. The main contribution of the paper is a semantics for lambda_SAOP advice weaving in the presence of these pointcuts. We instrument the effect-based type inference system to inject advices into expressions during static typing. The proposed semantics for advice weaving is in the spirit of AspectJ, a prominent aspect-oriented programming language, where advices are injected before, after or around the join points that match their respective pointcuts. For this purpose, we accommodate the effect-based inference algorithm to take matching and weaving processes into consideration. In addition, we establish the required soundness and preservation proofs.", "paper_title": "lambda_SAOP: A Security AOP Calculus", "paper_id": "WOS:000271903900008"}