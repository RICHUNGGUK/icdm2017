{"auto_keywords": [{"score": 0.04892132379047204, "phrase": "tls"}, {"score": 0.03821060723498927, "phrase": "scalar_values"}, {"score": 0.015719437699238357, "phrase": "speculative_threads"}, {"score": 0.009323619823862709, "phrase": "hardware_techniques"}, {"score": 0.0047563776685277314, "phrase": "thread-level_speculation"}, {"score": 0.004501453956464956, "phrase": "general-purpose_programs"}, {"score": 0.004419538941706716, "phrase": "parallel_execution"}, {"score": 0.0039341294012600085, "phrase": "program_performance"}, {"score": 0.0034804536625952596, "phrase": "frequent_data_dependences"}, {"score": 0.003293688299319582, "phrase": "specint_benchmarks"}, {"score": 0.0024842242921857705, "phrase": "critical_forwarding_path"}, {"score": 0.0021705796895687864, "phrase": "compiler_scheduling"}, {"score": 0.0021049977753042253, "phrase": "additional_performance_benefits"}], "paper_keywords": ["design", " experimentation", " performance", " thread-level speculation", " chip-multiprocessing", " automatic parallelization", " instruction scheduling"], "paper_abstract": "Thread-level speculation (TLS) allows us to automatically parallelize general-purpose programs by supporting parallel execution of threads that might not actually be independent. In this article, we focus on one important limitation of program performance under TLS, which stalls as a result of synchronizing and forwarding scalar values between speculative threads that would otherwise cause frequent data dependences and, hence, failed speculation. Using SPECint benchmarks that have been automatically transformed by our compiler to exploit TLS, we present, evaluate in detail, and compare both compiler and hardware techniques for improving the communication of scalar values. We find that through our dataflow algorithms for three increasingly aggressive instruction scheduling techniques, the compiler can drastically reduce the critical forwarding path introduced by the synchronization and forwarding of scalar values. We also show that hardware techniques for reducing synchronization can be complementary to compiler scheduling, but that the additional performance benefits are minimal and are generally not worth the cost.", "paper_title": "Compiler and hardware support for reducing the synchronization of speculative threads", "paper_id": "WOS:000256753500003"}