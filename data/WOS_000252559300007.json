{"auto_keywords": [{"score": 0.04222565054522196, "phrase": "mile"}, {"score": 0.008604136517239505, "phrase": "time_sequences"}, {"score": 0.0061100327926900105, "phrase": "mining_process"}, {"score": 0.00481495049065317, "phrase": "sequential_patterns"}, {"score": 0.004461359547152617, "phrase": "mining_sequential_patterns"}, {"score": 0.004404994123834589, "phrase": "multiple_time_sequences"}, {"score": 0.004267163206961948, "phrase": "state-of-the-art_sequential_pattern_mining_algorithm"}, {"score": 0.004240116703465252, "phrase": "prefixspan"}, {"score": 0.003953683710361183, "phrase": "mi"}, {"score": 0.003459191419478298, "phrase": "efficient_algorithm"}, {"score": 0.003204841443605308, "phrase": "existing_patterns"}, {"score": 0.003144222265269426, "phrase": "redundant_data_scanning"}, {"score": 0.0029691377785333872, "phrase": "new_patterns'_discovery_process"}, {"score": 0.002750721367040336, "phrase": "prior_knowledge"}, {"score": 0.0026986685585382347, "phrase": "data_distribution"}, {"score": 0.0025000985765154028, "phrase": "extensive_empirical_results"}, {"score": 0.0021456243019466843, "phrase": "time_efficiency"}, {"score": 0.0021049977753042253, "phrase": "constrained_environments"}], "paper_keywords": ["data mining", " sequential patterns", " time sequences"], "paper_abstract": "(I)n this paper, we deal with mining sequential patterns in multiple time sequences. Building on a state-of-the-art sequential pattern mining algorithm PrefixSpan for mining transaction databases, we propose MILE ((MI) under bar ning in mu (L) under bar tiple s (E) under bar quences), an efficient algorithm to facilitate the mining process. MILE recursively utilizes the knowledge of existing patterns to avoid redundant data scanning, and therefore can effectively speed up the new patterns' discovery process. Another unique feature of MILE is that it can incorporate prior knowledge of the data distribution in time sequences into the mining process to further improve the performance. Extensive empirical results show that MILE is significantly faster than PrefixSpan. As MILE consumes more memory than PrefixSpan, we also present a solution to trade time efficiency in memory constrained environments.", "paper_title": "Mining sequential patterns across time sequences", "paper_id": "WOS:000252559300007"}