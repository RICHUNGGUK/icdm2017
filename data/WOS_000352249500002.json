{"auto_keywords": [{"score": 0.0353385937542054, "phrase": "copa"}, {"score": 0.015246075879159111, "phrase": "gpu_implementations"}, {"score": 0.00470975295439431, "phrase": "multicore_cpu"}, {"score": 0.004699505915233286, "phrase": "experimental_results"}, {"score": 0.0043496334756644535, "phrase": "financial_management"}, {"score": 0.0042734067085669885, "phrase": "cargo_loading"}, {"score": 0.0034714553759044664, "phrase": "high_time_complexity"}, {"score": 0.0033805214040814233, "phrase": "cost-optimal_parallel_algorithm"}, {"score": 0.0032919615578986816, "phrase": "erew_pram_model"}, {"score": 0.0032629585038738856, "phrase": "shared_memory"}, {"score": 0.003107935254560724, "phrase": "optimal_solutions"}, {"score": 0.0028446460307503343, "phrase": "open_mp"}, {"score": 0.00281962649584391, "phrase": "gpu"}, {"score": 0.0027700855441353165, "phrase": "cuda._a_series"}, {"score": 0.002512990657100351, "phrase": "significant_amount"}, {"score": 0.002490833392316362, "phrase": "execution_time"}, {"score": 0.0023935128386292966, "phrase": "multicore_cpu_implementations"}, {"score": 0.002320449502337321, "phrase": "sequential_dynamic_programming_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cost-optimal parallel algorithm", " EREW PRAM", " GPU", " Multicore CPU", " 0-1 knapsack"], "paper_abstract": "The 0-1 knapsack problem has been extensively studied in the past years due to its immediate applications in industry and financial management, such as cargo loading, stock cutting, and budget control. Many algorithms have been proposed to solve this problem, most of which are heuristic, as the problem is well-known to be NP-hard. Only a few optimal algorithms have been designed to solve this problem but with high time complexity. This paper proposes the cost-optimal parallel algorithm (COPA) on an EREW PRAM model with shared memory to solve this problem. COPA is scalable and yields optimal solutions consuming less computational time. Furthermore, this paper implements COPA on two scenarios - multicore CPU based architectures using Open MP and GPU based configurations using CUDA. A series of experiments are conducted to examine the performance of COPA under two different test platforms. The experimental results show that COPA could reduce a significant amount of execution time. Our approach achieves the speedups of up to 10.26 on multicore CPU implementations and 17.53 on GPU implementations when the sequential dynamic programming algorithm for KP01 is considered as a baseline. Importantly, GPU implementations outstand themselves in the experimental results. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A cost-optimal parallel algorithm for the 0-1 knapsack problem and its performance on multicore CPU and GPU implementations", "paper_id": "WOS:000352249500002"}