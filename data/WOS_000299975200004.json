{"auto_keywords": [{"score": 0.031101597451231745, "phrase": "cpu_code"}, {"score": 0.015493331092024352, "phrase": "high-order_compact_finite_difference_scheme"}, {"score": 0.004815133528682739, "phrase": "gpu"}, {"score": 0.004474468584252318, "phrase": "fluid_flow_problems"}, {"score": 0.004323886831151445, "phrase": "graphical_processing_unit"}, {"score": 0.004219427915728972, "phrase": "compute_unified_device_architecture"}, {"score": 0.004077394032903726, "phrase": "compact_scheme"}, {"score": 0.004017989546119125, "phrase": "high-order_low_pass_filter"}, {"score": 0.0038261310307416475, "phrase": "classical_fourth-order_runge-kutta_method"}, {"score": 0.003697287104870263, "phrase": "vortical_disturbance"}, {"score": 0.0036434002236454305, "phrase": "temporal_mixing_layer"}, {"score": 0.0034187896011435245, "phrase": "numerical_method"}, {"score": 0.003303617297414837, "phrase": "nvidia's_scientific_computing_gpus"}, {"score": 0.003130396338031522, "phrase": "single_core_cpu"}, {"score": 0.0029807934480637855, "phrase": "calculation_time"}, {"score": 0.0028662606272282926, "phrase": "cyclic_tridiagonal_systems"}, {"score": 0.0028106505443369545, "phrase": "compact_solution"}, {"score": 0.0026372419109713923, "phrase": "coefficient_matrix"}, {"score": 0.002535876002754739, "phrase": "cublas_library"}, {"score": 0.002474505516708906, "phrase": "shared_memory_feature"}, {"score": 0.0023677483882740317, "phrase": "coalescing_issues"}, {"score": 0.0022107428653358715, "phrase": "different_mesh_sizes"}, {"score": 0.0021678232353129472, "phrase": "cpu_computations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["GPU computing", " High-order compact scheme", " Computational fluid dynamics"], "paper_abstract": "In this study, a high-order compact finite difference scheme for the solution of fluid flow problems is implemented to run on a Graphical Processing Unit (CPU) using Compute Unified Device Architecture (CUDA). Besides the compact scheme, a high-order low pass filter is also employed. For time integration, the classical fourth-order Runge-Kutta method is used. Advection of a vortical disturbance and a temporal mixing layer, two basic flows, are chosen for the application of this numerical method on a Tesla C1060, one of NVIDIA's scientific computing GPUs. Obtained results are compared with those obtained on a single core CPU (AMD Phenom 2.5 GHz) in terms of calculation time. The CPU code exploits LAPACK/BLAS library to solve cyclic tridiagonal systems generated by the compact solution and filtering schemes, whereas the CPU code uses the inverse of the coefficient matrix to solve the same linear systems by utilizing the CUBLAS library. Moreover, the shared memory feature of the CPU is also employed to ease coalescing issues on some parts of the CPU code. Speedups between 9x-16.5x are achieved for different mesh sizes in comparison to CPU computations. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "A GPU application for high-order compact finite difference scheme", "paper_id": "WOS:000299975200004"}