{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "higher-order_abstract_syntax"}, {"score": 0.004718897469501381, "phrase": "logical_framework"}, {"score": 0.004353421219532164, "phrase": "coq"}, {"score": 0.004167315942319306, "phrase": "object_logics"}, {"score": 0.004016072233242585, "phrase": "tactical_theorem"}, {"score": 0.003780286517897356, "phrase": "classical_type_theory"}, {"score": 0.003679969180334367, "phrase": "de_bruijn_representation"}, {"score": 0.0036186222999811802, "phrase": "definitional_layer"}, {"score": 0.0035344448639851827, "phrase": "object_languages"}, {"score": 0.0033832583769880576, "phrase": "higher_level"}, {"score": 0.003238517900104576, "phrase": "multi-level_reasoning_fashion"}, {"score": 0.003141946396146676, "phrase": "twelf"}, {"score": 0.0031208781925736984, "phrase": "abella"}, {"score": 0.0030380052848799155, "phrase": "middle_layer"}, {"score": 0.0028594775336675897, "phrase": "non-stratifiable_hypothetical_judgments"}, {"score": 0.0028023242231187363, "phrase": "object_logic_inference_rules"}, {"score": 0.0027187231747900814, "phrase": "simple_example"}, {"score": 0.0026823700218343506, "phrase": "type_soundness"}, {"score": 0.0025935941070969575, "phrase": "pure_functional_language"}, {"score": 0.002558909812664716, "phrase": "minimal_intuitionistic_logic"}, {"score": 0.0025332005503938947, "phrase": "specification_logic"}, {"score": 0.002482552408222559, "phrase": "analogous_result"}, {"score": 0.0024576084154573396, "phrase": "continuation-machine_presentation"}, {"score": 0.00243291444168046, "phrase": "operational_semantics"}, {"score": 0.0023523750536537102, "phrase": "ordered_linear_logic"}, {"score": 0.0023131084326717755, "phrase": "specification_layer"}, {"score": 0.0022215160785078797, "phrase": "new_specification_logics"}, {"score": 0.0021770860717929192, "phrase": "significantly_more_complex_object_logic"}, {"score": 0.0021049977753042253, "phrase": "new_specification_logic"}], "paper_keywords": ["Logical frameworks", " Higher-order abstract syntax", " Interactive theorem proving", " Induction", " Variable binding", " Isabelle/HOL", " Coq"], "paper_abstract": "Combining higher-order abstract syntax and (co)-induction in a logical framework is well known to be problematic. We describe the theory and the practice of a tool called Hybrid, within Isabelle/HOL and Coq, which aims to address many of these difficulties. It allows object logics to be represented using higher-order abstract syntax, and reasoned about using tactical theorem proving and principles of (co)induction. Moreover, it is definitional, which guarantees consistency within a classical type theory. The idea is to have a de Bruijn representation of lambda-terms providing a definitional layer that allows the user to represent object languages using higher-order abstract syntax, while offering tools for reasoning about them at the higher level. In this paper we describe how to use Hybrid in a multi-level reasoning fashion, similar in spirit to other systems such as Twelf and Abella. By explicitly referencing provability in a middle layer called a specification logic, we solve the problem of reasoning by (co)induction in the presence of non-stratifiable hypothetical judgments, which allow very elegant and succinct specifications of object logic inference rules. We first demonstrate the method on a simple example, formally proving type soundness (subject reduction) for a fragment of a pure functional language, using a minimal intuitionistic logic as the specification logic. We then prove an analogous result for a continuation-machine presentation of the operational semantics of the same language, encoded this time in an ordered linear logic that serves as the specification layer. This example demonstrates the ease with which we can incorporate new specification logics, and also illustrates a significantly more complex object logic whose encoding is elegantly expressed using features of the new specification logic.", "paper_title": "Hybrid", "paper_id": "WOS:000298108400002"}