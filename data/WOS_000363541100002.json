{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "formal_representation"}, {"score": 0.04028465982960715, "phrase": "co-simulation_tools"}, {"score": 0.030364287442202893, "phrase": "co-simulation_interfaces"}, {"score": 0.004567990533989851, "phrase": "different_application_domains"}, {"score": 0.004440277230269978, "phrase": "continuous_and_discrete_sub-systems"}, {"score": 0.0043161190928529755, "phrase": "specific_global_modeling"}, {"score": 0.004281284532043714, "phrase": "validation_challenges"}, {"score": 0.0041784516085055035, "phrase": "global_simulation_models"}, {"score": 0.004144723510171449, "phrase": "heterogeneous_systems"}, {"score": 0.004078078530972285, "phrase": "efficient_tools"}, {"score": 0.004045157344249484, "phrase": "systems'_validation"}, {"score": 0.003964007795174772, "phrase": "new_type"}, {"score": 0.00374531366198605, "phrase": "coherent_tools"}, {"score": 0.003700037700138249, "phrase": "co-simulation_models'_designers"}, {"score": 0.0035530197642369464, "phrase": "simulation_tools"}, {"score": 0.0032497506915502876, "phrase": "validation_process"}, {"score": 0.0031845067058084583, "phrase": "model-based_generic_approach"}, {"score": 0.003057910095857785, "phrase": "new_skills"}, {"score": 0.0030086877092638945, "phrase": "formal_verification_domain"}, {"score": 0.002936331371903168, "phrase": "generic_conceptual_framework"}, {"score": 0.0028425481299483254, "phrase": "co-simulation_tools_design"}, {"score": 0.002740607717745287, "phrase": "rigorous_global_formal_co-simulation_models"}, {"score": 0.002466139325703204, "phrase": "global_formal_model"}, {"score": 0.0022190974300886467, "phrase": "accurate_tools"}, {"score": 0.0022011501095573747, "phrase": "global_execution_models"}, {"score": 0.0021049977753042253, "phrase": "co-simulation_tool"}], "paper_keywords": ["Continuous time systems", " Discrete event systems", " Formal verification", " Modeling", " Co-simulation"], "paper_abstract": "Modern systems integrate components specific to different application domains. Frequently, these systems combine continuous and discrete sub-systems and therefore their design involves overcoming specific global modeling and validation challenges. In order to generate global simulation models of heterogeneous systems the designers need efficient tools for systems' validation. Therefore, a new type of designers emerged, the designers of co-simulation tools. Their main objective is to provide coherent tools for the co-simulation models' designers. Given the diversity of abstractions, languages and simulation tools, the design of co-simulation tools may be costly and time consuming. Thus, the key for the improvement of the validation process is to define a model-based generic approach before the implementation of these tools. This requires new skills on formalism and formal verification domain. This paper proposes a generic conceptual framework based on formal representation of the co-simulation interfaces for co-simulation tools design. The framework can be used to provide rigorous global formal co-simulation models for continuous/discrete heterogeneous systems. It allows the definition for implementation of the co-simulation interfaces starting with their formal definitions that are gradually refined and verified. The global formal model also provides the rules for the implementation and the generation of the interfaces. The framework is the skeleton on which the designers can build accurate tools for global execution models of continuous/discrete heterogeneous systems. The approach was used to design a co-simulation tool that is presented in this paper.", "paper_title": "A generic conceptual framework based on formal representation for the design of continuous/discrete co-simulation tools", "paper_id": "WOS:000363541100002"}