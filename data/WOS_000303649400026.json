{"auto_keywords": [{"score": 0.03829477508328847, "phrase": "determinator"}, {"score": 0.00481495049065317, "phrase": "deterministic_execution"}, {"score": 0.00464976086880886, "phrase": "fault_tolerance"}, {"score": 0.00451642066363115, "phrase": "current_methods"}, {"score": 0.004438250823243621, "phrase": "parallel_programs"}, {"score": 0.0042610532651691305, "phrase": "high_costs"}, {"score": 0.004187284711626886, "phrase": "misbehaved_software"}, {"score": 0.004020066537823032, "phrase": "time-dependent_races"}, {"score": 0.003973523379376352, "phrase": "input-_or_path-dependent_races"}, {"score": 0.003792657064634775, "phrase": "new_parallel_programming_model"}, {"score": 0.003375574760845742, "phrase": "model's_practicality"}, {"score": 0.003336468343971626, "phrase": "determinator's_microkernel_application_programming_interface"}, {"score": 0.0032978728345292897, "phrase": "api"}, {"score": 0.0026119782818898193, "phrase": "private_workspace_model"}, {"score": 0.002536926192232391, "phrase": "process-level_parallel_programming"}, {"score": 0.0023380300046435187, "phrase": "reliably_detected_conflicts"}, {"score": 0.002310915790114425, "phrase": "coarse-grained_parallel_benchmarks"}, {"score": 0.002231441081806766, "phrase": "nondeterministic_systems"}, {"score": 0.0021799789348982534, "phrase": "multicore_pcs"}, {"score": 0.0021049977753042253, "phrase": "distributed_cluster"}], "paper_keywords": [""], "paper_abstract": "Deterministic execution offers many benefits for debugging, fault tolerance, and security. Current methods of executing parallel programs deterministically, however, often incur high costs, allow misbehaved software to defeat repeatability, and transform time-dependent races into input- or path-dependent races without eliminating them. We introduce a new parallel programming model addressing these issues, and use Determinator, a proof-of-concept OS, to demonstrate the model's practicality. Determinator's microkernel application programming interface (API) provides only \"shared-nothing\" address spaces and deterministic inter-process communication primitives to make execution of all unprivileged code-well-behaved or not-precisely repeatable. Atop this microkernel, Determinator's user-level run-time offers a private workspace model for both thread-level and process-level parallel programming. This model avoids the introduction of read/write data races, and converts write/write races into reliably detected conflicts. Coarse-grained parallel benchmarks perform and scale comparably to nondeterministic systems, both on multicore PCs and across nodes in a distributed cluster.", "paper_title": "Efficient System-Enforced Deterministic Parallelism", "paper_id": "WOS:000303649400026"}