{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "context-oriented_extension"}, {"score": 0.004301834610818624, "phrase": "primitive_constructs"}, {"score": 0.004066076430818046, "phrase": "program_behaviour"}, {"score": 0.0031845067058084583, "phrase": "previous_work"}, {"score": 0.0030097975788892896, "phrase": "mlcoda"}, {"score": 0.0021049977753042253, "phrase": "functional_one"}], "paper_keywords": [""], "paper_abstract": "Context-Oriented programming languages provide us with primitive constructs to adapt program behaviour depending on the evolution of their operational environment, namely the context. In previous work we proposed MLCoDa, a context-oriented language with two-components: a declarative constituent for programming the context and a functional one for computing. This paper describes the implementation of MLCoDa as an extension of F#.", "paper_title": "A Context-Oriented Extension of F#", "paper_id": "WOS:000367350600003"}