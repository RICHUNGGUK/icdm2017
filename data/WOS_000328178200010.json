{"auto_keywords": [{"score": 0.03909956878951596, "phrase": "control_system"}, {"score": 0.0071047765224035875, "phrase": "control_ad_libitum_philosophy"}, {"score": 0.005689910689735372, "phrase": "haa_architecture"}, {"score": 0.00481495049065317, "phrase": "robot_teams"}, {"score": 0.004714023408114857, "phrase": "mobile_robotics"}, {"score": 0.004518442937844318, "phrase": "custom_hardware"}, {"score": 0.004330941610682453, "phrase": "new_approach"}, {"score": 0.004285289574869884, "phrase": "system_design"}, {"score": 0.004136548839735555, "phrase": "lifecycle_performance"}, {"score": 0.004078502325220629, "phrase": "control_system_structure"}, {"score": 0.003813669883040509, "phrase": "significant_progress"}, {"score": 0.003773449694108617, "phrase": "real-world_application"}, {"score": 0.003746871277361436, "phrase": "mobile_robot_teams"}, {"score": 0.0035533891890176823, "phrase": "diverse_components"}, {"score": 0.003417860345208549, "phrase": "haa"}, {"score": 0.003310813458610484, "phrase": "provably_correct_distributed_algorithms"}, {"score": 0.0030414140732789186, "phrase": "basic_functionality"}, {"score": 0.0029670381308395505, "phrase": "specifically_the_ability"}, {"score": 0.002793874145713024, "phrase": "robot_team"}, {"score": 0.0027159094186967247, "phrase": "processing_network"}, {"score": 0.0026494723416072316, "phrase": "heterogeneous_teams"}, {"score": 0.0024947959375982614, "phrase": "different_rates"}, {"score": 0.0024772013657695896, "phrase": "software_failure"}, {"score": 0.002259426425685765, "phrase": "concurrent_software"}, {"score": 0.0022434880661725493, "phrase": "hardware_failures"}, {"score": 0.0021731423856364003, "phrase": "foraging_task"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Robot teams", " Control system architecture", " Distributed systems", " Fault tolerance", " Hardware-in-the-loop simulation"], "paper_abstract": "As the applications of mobile robotics evolve it has become increasingly less practical for researchers to design custom hardware and control systems for each problem. This paper presents a new approach to control system design in order to look beyond end-of-lifecycle performance, and consider control system structure, flexibility, and extensibility. Towards these ends the Control ad libitum philosophy was proposed, stating that to make significant progress in the real-world application of mobile robot teams the control system must be structured such that teams can be formed in real-time from diverse components. The Control ad libitum philosophy was applied to the design of the HAA (Host, Avatar, Agent) architecture: a modular hierarchical framework built with provably correct distributed algorithms. A control system for mapping, exploration, and foraging was developed using the HAA architecture and evaluated in three experiments. First, the basic functionality of the HAA architecture was studied, specifically the ability to: (a) dynamically form the control system, (b) dynamically form the robot team, (c) dynamically form the processing network, and (d) handle heterogeneous teams and allocate robots between tasks based on their capabilities. Secondly, the control system was tested with different rates of software failure and was able to successfully complete its tasks even when each module was set to fail every 0.5-1.5 min. Thirdly, the control system was subjected to concurrent software and hardware failures, and was still able to complete a foraging task in a 216 m(2) environment. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A fault-tolerant approach to robot teams", "paper_id": "WOS:000328178200010"}