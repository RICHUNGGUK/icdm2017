{"auto_keywords": [{"score": 0.04830148956384734, "phrase": "css"}, {"score": 0.04005279366419059, "phrase": "call-time_choice"}, {"score": 0.01540587667089621, "phrase": "flp"}, {"score": 0.013148040512230749, "phrase": "basic_properties"}, {"score": 0.012268217721805055, "phrase": "run-time_choice"}, {"score": 0.009081519721976806, "phrase": "proposed_plural_semantics"}, {"score": 0.00481495049065317, "phrase": "functional_logic_programming"}, {"score": 0.004663308508906048, "phrase": "non-terminating_and_non-confluent_constructor_systems"}, {"score": 0.004529581568905548, "phrase": "non-strict_and_non-deterministic_functions"}, {"score": 0.004114787982556699, "phrase": "standard_choice"}, {"score": 0.004090901264701185, "phrase": "modern_flp_languages"}, {"score": 0.003904713104101532, "phrase": "practical_flp_systems"}, {"score": 0.003781629193080687, "phrase": "singular_denotational_semantics"}, {"score": 0.0037161295884407626, "phrase": "plural_semantics"}, {"score": 0.0036411406244705557, "phrase": "latter_identification"}, {"score": 0.0035989687070420977, "phrase": "pattern_matching"}, {"score": 0.0032031180198375283, "phrase": "bubbling_property"}, {"score": 0.00310208083392418, "phrase": "previous_proposals"}, {"score": 0.0029867619862229853, "phrase": "set_inclusion"}, {"score": 0.00280126189041041, "phrase": "simple_syntactic_criterion"}, {"score": 0.0027128661086995203, "phrase": "program_transformation"}, {"score": 0.0025816953009851072, "phrase": "practical_level"}, {"score": 0.0025221759076833124, "phrase": "new_expressive_capabilities"}, {"score": 0.0024712203541477815, "phrase": "declarative_flavor"}, {"score": 0.002414241727802253, "phrase": "standard_semantics"}, {"score": 0.0023585737444452573, "phrase": "best_option"}, {"score": 0.002212002242551553, "phrase": "maude_system"}, {"score": 0.0021927323694667694, "phrase": "resulting_interpreter"}, {"score": 0.0021049977753042253, "phrase": "combined_semantics"}], "paper_keywords": ["non-deterministic functions", " semantics", " program transformation", " term rewriting", " Maude"], "paper_abstract": "Modern functional logic programming (FLP) languages use non-terminating and non-confluent constructor systems (CSs) as programs in order to define non-strict and non-deterministic functions. Two semantic alternatives have been usually considered for parameter passing with this kind of functions: call-time choice and run-time choice. While the former is the standard choice of modern FLP languages, the latter lacks some basic properties - mainly compositionality - that have prevented its use in practical FLP systems. Traditionally it has been considered that call-time choice induces a singular denotational semantics, while run-time choice induces a plural semantics. We have discovered that this latter identification is wrong when pattern matching is involved, and thus in this paper we propose two novel compositional plural semantics for CSs that are different from run-time choice. We investigate the basic properties of our plural semantics - compositionality, polarity, and monotonicity for substitutions, and a restricted form of the bubbling property for CSs - and the relation between them and to previous proposals, concluding that these semantics form a hierarchy in the sense of set inclusion of the set of values computed by them. Besides, we have identified a class of programs characterized by a simple syntactic criterion for which the proposed plural semantics behave the same, and a program transformation that can be used to simulate one of the proposed plural semantics by term rewriting. At the practical level, we study how to use the new expressive capabilities of these semantics for improving the declarative flavor of programs. As call-time choice is the standard semantics for FLP, it still remains the best option for many common programming patterns. Therefore, we propose a language that combines call-time choice and our plural semantics, which we have implemented in the Maude system. The resulting interpreter is then employed to develop and test several significant examples showing the capabilities of the combined semantics.", "paper_title": "Singular and plural functions for functional logic programming", "paper_id": "WOS:000338044200002"}