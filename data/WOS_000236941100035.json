{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "craig_interpolation"}, {"score": 0.004707188147442449, "phrase": "symbolic_pushdown_systems"}, {"score": 0.0046018264570209765, "phrase": "counterexample-guided_abstraction_refinement"}, {"score": 0.004156012879026324, "phrase": "powerful_method"}, {"score": 0.004062937864702115, "phrase": "software_model-checking"}, {"score": 0.0030606302942851027, "phrase": "craig_interpolants"}, {"score": 0.0023848164282879885, "phrase": "multiple_counterexamples"}, {"score": 0.0021049977753042253, "phrase": "model-checker_moped"}], "paper_keywords": [""], "paper_abstract": "Counterexample-guided abstraction refinement (CEGAR) has proven to be a powerful method for software model-checking. In this paper, we investigate this concept in the context of sequential (possibly recursive) programs whose statements are given as BDDs. We examine how Craig interpolants can be computed efficiently in this case and propose a new, special type of interpolants. Moreover, we show how to treat multiple counterexamples in one refinement cycle. We have implemented this approach within the model-checker Moped and report on experiments.", "paper_title": "Abstraction refinement with Craig interpolation and symbolic pushdown systems", "paper_id": "WOS:000236941100035"}