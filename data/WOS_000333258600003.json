{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bandwidth_adaptive_cache_coherence_optimizations_for_chip_multiprocessors"}, {"score": 0.004771196027464407, "phrase": "chip_multiprocessors"}, {"score": 0.004663533386096864, "phrase": "different_technological_parameters"}, {"score": 0.004621148492564008, "phrase": "physical_constraints"}, {"score": 0.004579147045265106, "phrase": "earlier_multi-processor_systems"}, {"score": 0.004374772264092067, "phrase": "cache_coherence_protocols"}, {"score": 0.00429558848734449, "phrase": "contemporary_cache_coherence_protocols"}, {"score": 0.004103817210338686, "phrase": "high_number"}, {"score": 0.003920573616298175, "phrase": "producer-consumer_sharing_patterns"}, {"score": 0.003832031470970347, "phrase": "performance_bottleneck"}, {"score": 0.0037454814403672697, "phrase": "cores_increases"}, {"score": 0.003611034322786669, "phrase": "efficient_and_scalable_cache_coherence_protocols"}, {"score": 0.003465521267039616, "phrase": "adaptive_hybrid_protocol"}, {"score": 0.0032805541677236325, "phrase": "proposed_protocol"}, {"score": 0.0032064196784562017, "phrase": "write-invalidate_scheme"}, {"score": 0.0030491497463386924, "phrase": "potential_consumers"}, {"score": 0.0030076088903023034, "phrase": "observed_producer-consumer_sharing_patterns"}, {"score": 0.0029128614098881253, "phrase": "adaptive_protocol"}, {"score": 0.0028731719610706214, "phrase": "interconnection_resource"}, {"score": 0.0028600623410146796, "phrase": "aware_mechanism"}, {"score": 0.0028340217672278975, "phrase": "experimental_evaluations"}, {"score": 0.00274472767672686, "phrase": "full-system_simulation"}, {"score": 0.0025162511343171, "phrase": "scientific_applications"}, {"score": 0.0024481198073210567, "phrase": "parallel_benchmark_suites"}, {"score": 0.0023818288346547692, "phrase": "proposed_mechanisms"}, {"score": 0.002360132221690264, "phrase": "cache-to-cache_sharing"}, {"score": 0.0022857351723674004, "phrase": "application_performance"}, {"score": 0.002193509835371438, "phrase": "proposed_interconnection_resource"}, {"score": 0.0021049977753042253, "phrase": "varying_interconnection_utilizations"}], "paper_keywords": ["Cache coherence", " Multi-core", " Bandwidth adaptive"], "paper_abstract": "Chip Multiprocessors (CMPs) have different technological parameters and physical constraints than earlier multi-processor systems, which should be taken into consideration when designing cache coherence protocols. Also, contemporary cache coherence protocols use invalidate schemes that are known to generate a high number of coherence misses. This is especially true under producer-consumer sharing patterns that can become a performance bottleneck as the number of cores increases. This paper presents two mechanisms to design efficient and scalable cache coherence protocols for CMPs. First, we propose an adaptive hybrid protocol to reduce coherence misses observed in write-invalidate based protocols. The proposed protocol is based on a write-invalidate scheme. However, adaptively, it can push updates to potential consumers based on observed producer-consumer sharing patterns. Secondly, we extend this adaptive protocol with an interconnection resource aware mechanism. Experimental evaluations, conducted on a tiled-CMP via full-system simulation, were used to assess the performance from our proposed dynamic hybrid protocols. Performance analysis is presented on a set of scientific applications from the SPLASH-2 and NAS parallel benchmark suites. Results showed that the proposed mechanisms reduce cache-to-cache sharing misses up to 48 % and speed up application performance up to 34 %. In addition, the proposed interconnection resource aware mechanism is proven to perform well under varying interconnection utilizations.", "paper_title": "Bandwidth Adaptive Cache Coherence Optimizations for Chip Multiprocessors", "paper_id": "WOS:000333258600003"}