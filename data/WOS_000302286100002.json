{"auto_keywords": [{"score": 0.030159203119173368, "phrase": "lalp"}, {"score": 0.00481495049065317, "phrase": "program_custom_fpga-based_acceleration_engines"}, {"score": 0.00450130420152996, "phrase": "embedded_and_high-performance_computing_systems"}, {"score": 0.0042650992966174065, "phrase": "application-specific_integrated_circuits"}, {"score": 0.004133055661437163, "phrase": "implementation_flexibility"}, {"score": 0.004005149615415742, "phrase": "fpgas"}, {"score": 0.0038810583785936505, "phrase": "hardware_developers"}, {"score": 0.0037948184359488284, "phrase": "hardware_description_languages"}, {"score": 0.0036938633866235924, "phrase": "vhdl"}, {"score": 0.003660795745108875, "phrase": "verilog"}, {"score": 0.003563370084662192, "phrase": "high-level_compilation_flow"}, {"score": 0.0034841647157189985, "phrase": "c_programs"}, {"score": 0.0033914308417007316, "phrase": "open_issues"}, {"score": 0.003361069456060196, "phrase": "broader_efficient_results"}, {"score": 0.0032278619401770858, "phrase": "fpga"}, {"score": 0.003058179790439378, "phrase": "novel_language"}, {"score": 0.0030171910207671205, "phrase": "fpga-based_accelerators"}, {"score": 0.002910545717767559, "phrase": "mapping_capabilities"}, {"score": 0.0028715299874549245, "phrase": "main_ideas"}, {"score": 0.0027825094419000637, "phrase": "higher_abstraction_level"}, {"score": 0.0026962411675196213, "phrase": "intrinsic_parallelism"}, {"score": 0.0026720866990543744, "phrase": "hardware_resources"}, {"score": 0.0025660347613972573, "phrase": "execution_stages"}, {"score": 0.0025316254589087973, "phrase": "compiler_techniques"}, {"score": 0.00247529638625566, "phrase": "efficient_implementations"}, {"score": 0.0023770362063833903, "phrase": "loop_pipelining"}, {"score": 0.0021049977753042253, "phrase": "high-performance_computing_solutions"}], "paper_keywords": ["Loop pipelining", " Compilers", " Reconfigurable computing", " FPGA"], "paper_abstract": "Field-Programmable Gate Arrays (FPGAs) are becoming increasingly important in embedded and high-performance computing systems. They allow performance levels close to the ones obtained with Application-Specific Integrated Circuits, while still keeping design and implementation flexibility. However, to efficiently program FPGAs, one needs the expertise of hardware developers in order to master hardware description languages (HDLs) such as VHDL or Verilog. Attempts to furnish a high-level compilation flow (e.g., from C programs) still have to address open issues before broader efficient results can be obtained. Bearing in mind an FPGA available resources, it has been developed LALP (Language for Aggressive Loop Pipelining), a novel language to program FPGA-based accelerators, and its compilation framework, including mapping capabilities. The main ideas behind LALP are to provide a higher abstraction level than HDLs, to exploit the intrinsic parallelism of hardware resources, and to allow the programmer to control execution stages whenever the compiler techniques are unable to generate efficient implementations. Those features are particularly useful to implement loop pipelining, a well regarded technique used to accelerate computations in several application domains. This paper describes LALP, and shows how it can be used to achieve high-performance computing solutions.", "paper_title": "LALP: A Language to Program Custom FPGA-Based Acceleration Engines", "paper_id": "WOS:000302286100002"}