{"auto_keywords": [{"score": 0.025459786162551214, "phrase": "service-oriented_applications"}, {"score": 0.00481495049065317, "phrase": "service-oriented_software_development"}, {"score": 0.004332894955218135, "phrase": "stand-alone_tool"}, {"score": 0.004183137595671171, "phrase": "ontology_component"}, {"score": 0.003916098498242888, "phrase": "ontology_design"}, {"score": 0.003847802030433298, "phrase": "research_topic"}, {"score": 0.0036020923276404403, "phrase": "stand-alone_applications"}, {"score": 0.00355485940716082, "phrase": "paper_studies"}, {"score": 0.003372019835750424, "phrase": "integral_part"}, {"score": 0.0033277936960179892, "phrase": "service-oriented_application"}, {"score": 0.0031845067058084583, "phrase": "brief_survey"}, {"score": 0.0031565959573536194, "phrase": "existing_ontology_design_patterns"}, {"score": 0.00307431840409833, "phrase": "general_principles"}, {"score": 0.003007389443770562, "phrase": "software_applications"}, {"score": 0.0029161225023394363, "phrase": "ontology_design_process"}, {"score": 0.0028526276660691525, "phrase": "software_development_processes"}, {"score": 0.0028276174348291923, "phrase": "design_ontologies"}, {"score": 0.002753891109273246, "phrase": "overall_software_architecture"}, {"score": 0.002670296619878048, "phrase": "software_evolution"}, {"score": 0.0025665261770229757, "phrase": "software_validation"}, {"score": 0.002488604965680912, "phrase": "common_ontology_patterns"}, {"score": 0.002298902547676131, "phrase": "sensei"}, {"score": 0.0022787359717772976, "phrase": "fcint"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["ontology", " design pattern", " SOA software development"], "paper_abstract": "Modern software often uses ontologies as its key component to store data and their relationships. This is different from using an ontology as a stand-alone tool for knowledge sharing and representation. The ontology component needs to work with other software components and needs to evolve as the software evolves. Ontology design has been a research topic for years; however, most of these studies focus on using ontologies as stand-alone applications. This paper studies ontology patterns that can be applied to design ontologies as an integral part of a service-oriented application. The paper first briefly reviews various ontology design issues including a brief survey of existing ontology design patterns. The paper then outlines general principles for using ontologies in software applications, including the needs to incorporate ontology design process as a part of software development processes, design ontologies as a component of an overall software architecture, and use ontologies to enhance software evolution and the role that ontologies can play in software validation. The paper then proposes some common ontology patterns that can be used to design ontologies in service-oriented applications. This is followed by examining two international projects, SENSEI and FCINT, where ontologies are used in service-oriented applications and several ontology design patterns are used. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Ontology patterns for service-oriented software development", "paper_id": "WOS:000319997100008"}