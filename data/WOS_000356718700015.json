{"auto_keywords": [{"score": 0.03943657512144075, "phrase": "ptm"}, {"score": 0.00481495049065317, "phrase": "persistent_transactional_memory"}, {"score": 0.004272724011826495, "phrase": "transactional_memory"}, {"score": 0.004188761488463841, "phrase": "tm"}, {"score": 0.003945467978172845, "phrase": "emerging_non-volatile_memory"}, {"score": 0.003643185395780667, "phrase": "transactional_updates"}, {"score": 0.0033976871256700997, "phrase": "aci"}, {"score": 0.003106112985011102, "phrase": "undo_log"}, {"score": 0.0030447882545999194, "phrase": "nvm"}, {"score": 0.0028113140998735366, "phrase": "transactional_data_structures"}, {"score": 0.0027284410545226306, "phrase": "machine_crash"}, {"score": 0.00256993314099902, "phrase": "ptm_design"}, {"score": 0.0024941578231560055, "phrase": "intel's_restricted_transactional_memory"}, {"score": 0.0021907299375981356, "phrase": "cache-based_simulator"}, {"score": 0.0021049977753042253, "phrase": "additional_cache_line_flushes"}], "paper_keywords": ["Hardware transactional memory", " non-volatile random access memory"], "paper_abstract": "This paper proposes persistent transactional memory (PTM), a new design that adds durability to transactional memory (TM) by incorporating with the emerging non-volatile memory (NVM). PTM dynamically tracks transactional updates to cache lines to ensure the ACI (atomicity, consistency and isolation) properties during cache flushes and leverages an undo log in NVM to ensure PTM can always consistently recover transactional data structures from a machine crash. This paper describes the PTM design based on Intel's restricted transactional memory. A preliminary evaluation using a concurrent key/value store and a database with a cache-based simulator shows that the additional cache line flushes are small.", "paper_title": "Persistent Transactional Memory", "paper_id": "WOS:000356718700015"}