{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "spatio-temporal_interval_join"}, {"score": 0.004283019592801715, "phrase": "join_condition"}, {"score": 0.004224418476742716, "phrase": "future_time_interval"}, {"score": 0.003731673223879279, "phrase": "inner_index"}, {"score": 0.003680587852807675, "phrase": "small_sub-trees"}, {"score": 0.0035804980565263024, "phrase": "join_process"}, {"score": 0.0033651019362620866, "phrase": "disk_page"}, {"score": 0.00327356326590461, "phrase": "window_search"}, {"score": 0.0030135741897058844, "phrase": "consecutive_window_searches"}, {"score": 0.002851790448644913, "phrase": "overlapping_index_pages"}, {"score": 0.002643386043540555, "phrase": "ptjoin"}, {"score": 0.0025537472239953807, "phrase": "page_accesses"}, {"score": 0.0023834640793589435, "phrase": "interval_stjoin"}, {"score": 0.0021049977753042253, "phrase": "buffer_size"}], "paper_keywords": ["spatio-temporal interval join", " tree partition", " moving objects"], "paper_abstract": "A predictive spatio-temporal interval join finds all pairs of moving objects satisfying a join condition on future time interval and space. In this paper, we propose a method called PTJoin. PTJoin partitions the inner index into small sub-trees and performs the join process for each sub-tree to reduce the number of disk page accesses for each window search. Furthermore, to reduce the number of pages accessed by consecutive window searches, we partition the index so that overlapping index pages do not belong to the same partition. Our experiments show that PTJoin reduces the number of page accesses by up to an order of magnitude compared to Interval_STJoin [9], which is the state-of-the-art solution, when the buffer size is small.", "paper_title": "Partitioned-Tree Nested Loop Join: An Efficient Join for Spatio-Temporal Interval Join", "paper_id": "WOS:000319085800023"}