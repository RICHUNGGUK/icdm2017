{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "imperfect_information"}, {"score": 0.010052868556278627, "phrase": "propositional_mu-calculus"}, {"score": 0.004743164872278112, "phrase": "model_checking_problem"}, {"score": 0.004695900553353526, "phrase": "finite-state_open_systems"}, {"score": 0.004248294537944227, "phrase": "perfect_and_imperfect_information"}, {"score": 0.004081385289516914, "phrase": "perfect_information_case"}, {"score": 0.003980400251874277, "phrase": "infinite-state_systems"}, {"score": 0.003729335910488339, "phrase": "pushdown_module"}, {"score": 0.0036553070575015344, "phrase": "imperfect_information_setting"}, {"score": 0.003407549468745519, "phrase": "system's_control_states"}, {"score": 0.0033735490732324713, "phrase": "pushdown_store_content"}, {"score": 0.0031606404966938568, "phrase": "branching-time_temporal_logics_ctl"}, {"score": 0.0029909851863915283, "phrase": "pushdown_module_checking"}, {"score": 0.002873331232538783, "phrase": "pushdown_model_checking"}, {"score": 0.0025859868507329634, "phrase": "pushdown_store"}, {"score": 0.002447101794397243, "phrase": "control_states"}, {"score": 0.0022469668051596004, "phrase": "ctl"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Pushdown model checking", " Open systems", " Infinite-state systems", " Branching-time temporal-logics", " Modal mu-calculus", " Game theory"], "paper_abstract": "The model checking problem for finite-state open systems (module checking) has been extensively studied in the literature, both in the context of environments with perfect and imperfect information about the system. Recently, the perfect information case has been extended to infinite-state systems (pushdown module checking). In this paper, we extend pushdown module checking to the imperfect information setting; i.e., to the case where the environment has only a partial view of the system's control states and pushdown store content. We study the complexity of this problem with respect to the branching-time temporal logics CTL, CTL* and the propositional mu-calculus. We show that pushdown module checking, which is by itself harder than pushdown model checking, becomes undecidable when the environment has imperfect information. We also show that undecidability relies on hiding information about the pushdown store. Indeed, we prove that with imperfect information about the control states, but a visible pushdown store, the problem is decidable and its complexity is 2EXPTIME-complete for CTL and the propositional mu-calculus, and 3EXPTIME-complete for CTL*. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Pushdown module checking with imperfect information", "paper_id": "WOS:000314073500001"}