{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "boolean_expressions"}, {"score": 0.018737423536884876, "phrase": "mumcut_strategy"}, {"score": 0.015190477586940105, "phrase": "general_form"}, {"score": 0.010185314503510515, "phrase": "hypothesized_faults"}, {"score": 0.009890720397227864, "phrase": "program_source"}, {"score": 0.008794385930160981, "phrase": "logical_decisions"}, {"score": 0.004730458558634266, "phrase": "based_testing"}, {"score": 0.004355267258397068, "phrase": "fault_based_techniques"}, {"score": 0.004129873531628877, "phrase": "model_conditions"}, {"score": 0.003735349093835257, "phrase": "test_cases"}, {"score": 0.003562912424153324, "phrase": "eight_common_types"}, {"score": 0.0034388111429203222, "phrase": "original_expression"}, {"score": 0.003378385493203297, "phrase": "irredundant_disjunctive_normal_form"}, {"score": 0.003338690782620756, "phrase": "idnf._software_practitioners"}, {"score": 0.002747032054567753, "phrase": "boolean"}, {"score": 0.0026045914281028473, "phrase": "empirical_studies"}, {"score": 0.0025436978068459565, "phrase": "fault_detection_capability"}, {"score": 0.0023139986108451967, "phrase": "mutated_expression"}, {"score": 0.0022070310530794097, "phrase": "boolean_expression"}, {"score": 0.002155412043665635, "phrase": "syntactic_change"}, {"score": 0.0021049977753042253, "phrase": "particular_type"}], "paper_keywords": ["Black-box testing", " Boolean specification", " Fault based testing", " Fault detection", " MUMCUT strategy", " Software testing", " Specification based testing"], "paper_abstract": "Fault based testing aims at detecting hypothesized faults based on specifications or program source. There are some fault based techniques for testing Boolean expressions which are commonly used to model conditions in specifications as well as logical decisions in program source. The MUMCUT strategy has been proposed to generate test cases from Boolean expressions. Moreover, it detects eight common types of hypothesized faults provided that the original expression is in irredundant disjunctive normal form, IDNF. Software practitioners are more likely to write the conditions and logical decisions in general form rather than IDNF. Hence, it is interesting to investigate the fault detecting capability of the MUMCUT strategy with respect to general form Boolean expressions. In this article, we perform empirical studies to investigate the fault detection capability of the MUMCUT strategy with respect to general form Boolean expressions as well as mutated expressions. A mutated expression can be obtained from the original given Boolean expression by making a syntactic change based on a particular type of fault.", "paper_title": "On detecting faults for Boolean expressions", "paper_id": "WOS:000267224200003"}