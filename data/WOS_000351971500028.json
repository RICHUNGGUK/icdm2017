{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_systems"}, {"score": 0.004501160823792861, "phrase": "software_models"}, {"score": 0.004396858397567621, "phrase": "collaborative_development"}, {"score": 0.004195418010131832, "phrase": "change_operations"}, {"score": 0.003991449490087454, "phrase": "merged_model"}, {"score": 0.0039449104968131655, "phrase": "non-conflicting_operations"}, {"score": 0.003633927813203731, "phrase": "valid_merged_model"}, {"score": 0.0033769698684652646, "phrase": "operation_type"}, {"score": 0.003298631258267805, "phrase": "existing_works"}, {"score": 0.0032315723330399375, "phrase": "equal_importance"}, {"score": 0.003138124398958758, "phrase": "first_time"}, {"score": 0.0031106189016953142, "phrase": "multi-objective_formulation"}, {"score": 0.0030653094605910727, "phrase": "model_merging"}, {"score": 0.002967931416941965, "phrase": "best_trade-off"}, {"score": 0.0029161225023394363, "phrase": "omitted_operations"}, {"score": 0.00284844402835852, "phrase": "important_operations"}, {"score": 0.0027987150590078123, "phrase": "seven_open_source_systems"}, {"score": 0.0027579362569638945, "phrase": "different_existing_model_merging_approaches"}, {"score": 0.0025106241866273897, "phrase": "existing_approaches"}, {"score": 0.0024740326111852757, "phrase": "high_importance_score"}, {"score": 0.002459545376635285, "phrase": "merged_operations"}, {"score": 0.002416589459425828, "phrase": "interesting_feature"}, {"score": 0.0023466530426848064, "phrase": "practical_value"}, {"score": 0.002272053079580848, "phrase": "merging_tasks"}, {"score": 0.002212780203829396, "phrase": "pareto_front"}, {"score": 0.002193367454830741, "phrase": "interesting_guidance"}, {"score": 0.0021613897794439227, "phrase": "best_solutions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Search-based software engineering", " Merging", " Multi-objective optimization"], "paper_abstract": "Nowadays, software systems are complex and large. To cope with this situation, teams of developers have to cooperate and work in parallel on software models. Thus, techniques to support the collaborative development of models are a must. To this end, several approaches exist to identify the change operations applied in parallel, to detect conflicts among them, as well as to construct a merged model by incorporating all non-conflicting operations. Conflicts often denote situations where the application of one operation disables the applicability of another one. Consequently, one operation has to be omitted to construct a valid merged model in such scenarios. When having to decide which operation to omit, the importance of its application has to be taken into account depending on the operation type and the application context. However, existing works treat the operations to merge with equal importance. We introduce in this paper, for the first time, a multi-objective formulation of the problem of model merging, based on NSGA-II, that aims to find the best trade-off between minimizing the number of omitted operations and maximizing the number of successfully applied important operations. We evaluated our approach using seven open source systems and compared it with different existing model merging approaches. The merging solutions obtained with our approach were found in all of the scenarios of our experiments to be comparable in terms of minimizing the number of conflicts to those suggested by existing approaches and to carry a high importance score of merged operations. Our results also revealed an interesting feature concerning the trade-off between the two conflicting objectives that demonstrates the practical value of taking the importance of operations into account in model merging tasks. In fact, the shape of the Pareto front represents an interesting guidance for developers to select best solutions based on their preferences. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "MOMM: Multi-objective model merging", "paper_id": "WOS:000351971500028"}