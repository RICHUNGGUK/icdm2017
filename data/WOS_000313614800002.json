{"auto_keywords": [{"score": 0.03750628528480424, "phrase": "dynamic_software_updates"}, {"score": 0.00481495049065317, "phrase": "javadaptor_-_flexible"}, {"score": 0.004738325072560588, "phrase": "java_applications"}, {"score": 0.004570326517392777, "phrase": "new_requirements"}, {"score": 0.004101088357088207, "phrase": "time_periods"}, {"score": 0.003939748053452577, "phrase": "highly_available_applications"}, {"score": 0.0038305869305614504, "phrase": "complex_applications"}, {"score": 0.0037544644262310525, "phrase": "new_program_parts"}, {"score": 0.0034232607917050392, "phrase": "large_body"}, {"score": 0.00328849874768242, "phrase": "existing_approaches"}, {"score": 0.0030468495296763617, "phrase": "specific_runtime_environments"}, {"score": 0.0029982770062678926, "phrase": "program's_architecture"}, {"score": 0.0028458424624708844, "phrase": "java"}, {"score": 0.0027778947555117243, "phrase": "flexible_dynamic_software_updates"}, {"score": 0.0025326211341475903, "phrase": "program_architecture"}, {"score": 0.002472269923319476, "phrase": "class_replacements"}, {"score": 0.0023940274498526213, "phrase": "java_hotswap"}, {"score": 0.0022812715029149216, "phrase": "major_standard_java_virtual_machines"}, {"score": 0.002209060366991921, "phrase": "non-trivial_case_studies"}, {"score": 0.002165091261117016, "phrase": "existing_dynamic_software_update_approaches"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["dynamic software updates", " program evolution", " state migration: tool support"], "paper_abstract": "Software is changed frequently during its life cycle. New requirements come, and bugs must be fixed. To update an application, it usually must be stopped, patched, and restarted. This causes time periods of unavailability, which is always a problem for highly available applications. Even for the development of complex applications, restarts to test new program parts can be time consuming and annoying. Thus, we aim at dynamic software updates to update programs at runtime. There is a large body of research on dynamic software updates, but so far, existing approaches have shortcomings either in terms of flexibility or performance. In addition, some of them depend on specific runtime environments and dictate the program's architecture. We present JavAdaptor, the first runtime update approach based on Java that (a) offers flexible dynamic software updates, (b) is platform independent, (c) introduces only minimal performance overhead, and (d) does not dictate the program architecture. JavAdaptor combines schema changing class replacements by class renaming and caller updates with Java HotSwap using containers and proxies. It runs on top of all major standard Java virtual machines. We evaluate our approach's applicability and performance in non-trivial case studies and compare it with existing dynamic software update approaches. Copyright (C) 2012 John Wiley & Sons, Ltd.", "paper_title": "JavAdaptor - Flexible runtime updates of Java applications", "paper_id": "WOS:000313614800002"}