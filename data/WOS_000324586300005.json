{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nonogram_puzzle"}, {"score": 0.03521203935158321, "phrase": "time_complexity"}, {"score": 0.004728499903204582, "phrase": "rectangular_grid"}, {"score": 0.004527269879990066, "phrase": "column_constraints"}, {"score": 0.004367884618518511, "phrase": "np"}, {"score": 0.003987755561492638, "phrase": "efficient_approach"}, {"score": 0.003944606115768627, "phrase": "nonogram_puzzles"}, {"score": 0.0038737214010638745, "phrase": "fast_dynamic_programming"}, {"score": 0.0038459270304415216, "phrase": "dp"}, {"score": 0.0037087324991876727, "phrase": "worst_case"}, {"score": 0.0036026484429137998, "phrase": "grid_size"}, {"score": 0.003589602322126282, "phrase": "l_x_l"}, {"score": 0.003512308265830794, "phrase": "average_number"}, {"score": 0.0033021988455635403, "phrase": "best_line-solving_method"}, {"score": 0.00295078850927459, "phrase": "batenburg"}, {"score": 0.0029294420752976947, "phrase": "kosters"}, {"score": 0.002665555782056494, "phrase": "fp_methods"}, {"score": 0.002646267286675984, "phrase": "useful_guidance"}, {"score": 0.00260810691979637, "phrase": "next_promising_pixel"}, {"score": 0.002542642270762272, "phrase": "proposed_methods"}, {"score": 0.0024968877430444304, "phrase": "fast_nonogram_solver"}, {"score": 0.002469830206270585, "phrase": "lalafrogkk."}, {"score": 0.002407827985570249, "phrase": "webpbn.com"}, {"score": 0.002355920629285463, "phrase": "nonogram_tournaments"}, {"score": 0.002255431275670053, "phrase": "artificial_intelligence"}, {"score": 0.0022148537158777843, "phrase": "taiwan"}, {"score": 0.0021592189144729775, "phrase": "proposed_fp_methods"}], "paper_keywords": ["Backtracking", " fully probing (FP)", " nonogram", " NP-completeness", " painted by number", " puzzles"], "paper_abstract": "A nonogram puzzle is played on a rectangular grid of pixels with clues given in the form of row and column constraints. The aim of solving a nonogram puzzle, an NP-complete problem, is to paint all the pixels of the grid in black and white while satisfying these constraints. This paper proposes an efficient approach to solving nonogram puzzles. We propose a fast dynamic programming (DP) method for line solving, whose time complexity in the worst case O(kl) is only, where the grid size l x l is and k is the average number of integers in one constraint, always smaller than. In contrast, the time complexity for the best line-solving method in the past is O(kl(2)). We also propose some fully probing (FP) methods to solve more pixels before running backtracking. Our FP methods can solve more pixels than the method proposed by Batenburg and Kosters (before backtracking), while having a time complexity that is smaller than theirs by a factor of O(l). Most importantly, these FP methods provide useful guidance in choosing the next promising pixel to guess during backtracking. The proposed methods are incorporated into a fast nonogram solver, named LalaFrogKK. The program outperformed all the programs collected in webpbn.com, and also won both nonogram tournaments that were held at the 2011 Conference on Technologies and Applications of Artificial Intelligence (TAAI 2011, Taiwan). We expect that the proposed FP methods can also be applied to solving other puzzles efficiently.", "paper_title": "An Efficient Approach to Solving Nonograms", "paper_id": "WOS:000324586300005"}