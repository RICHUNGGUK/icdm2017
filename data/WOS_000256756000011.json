{"auto_keywords": [{"score": 0.04409532278951084, "phrase": "disjoint_accesses"}, {"score": 0.00481495049065317, "phrase": "practical_lock-free_shared_data_structure"}, {"score": 0.004597457370802855, "phrase": "concurrent_deque"}, {"score": 0.004143196873246147, "phrase": "atomic_primitives"}, {"score": 0.00402514392911723, "phrase": "modern_computer_systems"}, {"score": 0.003978866233891427, "phrase": "previously_known_lock-free_algorithms"}, {"score": 0.003777088546146369, "phrase": "non-available_atomic_synchronization_primitives"}, {"score": 0.0033644530302903513, "phrase": "single-word_compare-and-swap_atomic_primitives"}, {"score": 0.003120657021758196, "phrase": "deleted_nodes"}, {"score": 0.0030492472433481764, "phrase": "unnecessary_operation_retries"}, {"score": 0.002945175711537758, "phrase": "empirical_study"}, {"score": 0.0027475383418803724, "phrase": "high_contention_show"}, {"score": 0.002608040688794517, "phrase": "increasing_number"}, {"score": 0.0025336179740814905, "phrase": "deque_implementations"}, {"score": 0.0024756080101497086, "phrase": "low_concurrency"}, {"score": 0.0024049606359209893, "phrase": "michael"}, {"score": 0.002363532907211947, "phrase": "best_performance"}, {"score": 0.002129527338875116, "phrase": "high_concurrency"}, {"score": 0.0021049977753042253, "phrase": "non-uniform_memory_architecture"}], "paper_keywords": ["deque", " doubly linked list", " non-blocking", " rock-free", " shared data structure", " multi-thread", " concurrent"], "paper_abstract": "We present a practical lock-free shared data structure that efficiently implements the operations of a concurrent deque as well as a general doubly linked list. The implementation supports parallelism for disjoint accesses and uses atomic primitives which are available in modern computer systems. Previously known lock-free algorithms of doubly linked lists are either based on non-available atomic synchronization primitives, only implement a subset of the functionality, or are not designed for disjoint accesses. Our algorithm only requires single-word compare-and-swap atomic primitives, supports fully dynamic list sizes, and allows traversal also through deleted nodes and thus avoids unnecessary operation retries. We have performed an empirical study of our new algorithm on two different multiprocessor platforms. Results of the experiments performed under high contention show that the performance of our implementation scales linearly with increasing number of processors. Considering deque implementations and systems with low concurrency, the algorithm by Michael shows the best performance. However, as our algorithm is designed for disjoint accesses, it performs significantly better on systems with high concurrency and non-uniform memory architecture. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Lock-free deques and doubly linked lists", "paper_id": "WOS:000256756000011"}