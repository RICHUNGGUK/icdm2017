{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "boolean_expression"}, {"score": 0.04650334340899582, "phrase": "boolean_expressions"}, {"score": 0.004602233424629559, "phrase": "novel_dynamic_data_structure"}, {"score": 0.0043705604923728195, "phrase": "high-dimensional_discrete_space"}, {"score": 0.003941478054422721, "phrase": "effective_two-phase_space-cutting_technique"}, {"score": 0.003816197777388722, "phrase": "discrete_and_finite_domain_properties"}, {"score": 0.0036006068766833103, "phrase": "self-adjustment_policies"}, {"score": 0.0034191818674096453, "phrase": "workload_changes"}, {"score": 0.0029658905122290536, "phrase": "underlying_discrete_and_finite_space"}, {"score": 0.0028901595183546576, "phrase": "be-tree's_matching_time"}, {"score": 0.0027444334639134217, "phrase": "general_index_structure"}, {"score": 0.002622947550220266, "phrase": "wide_range"}, {"score": 0.00244278788608393, "phrase": "targeted_web_advertising"}, {"score": 0.0021883400011393564, "phrase": "comprehensive_evaluation"}, {"score": 0.0021601997088758957, "phrase": "state-of-the-art_index_structures"}, {"score": 0.0021051397653684837, "phrase": "boolean"}], "paper_keywords": ["Algorithms", " Design", " Measurement", " Experimentation", " Performance", " Boolean expressions", " complex event processing", " data structure", " publish/subscribe"], "paper_abstract": "BE-Tree is a novel dynamic data structure designed to efficiently index Boolean expressions over a high-dimensional discrete space. BE-Tree copes with both high-dimensionality and expressiveness of Boolean expressions by introducing an effective two-phase space-cutting technique that specifically utilizes the discrete and finite domain properties of the space. Furthermore, BE-Tree employs self-adjustment policies to dynamically adapt the tree as the workload changes. Moreover, in BE-Tree, we develop two novel cache-conscious predicate evaluation techniques, namely, lazy and bitmap evaluations, that also exploit the underlying discrete and finite space to substantially reduce BE-Tree's matching time by up to 75%. BE-Tree is a general index structure for matching Boolean expression which has a wide range of applications including (complex) event processing, publish/subscribe matching, emerging applications in cospaces, profile matching for targeted web advertising, and approximate string matching. Finally, the superiority of BE-Tree is proven through a comprehensive evaluation with state-of-the-art index structures designed for matching Boolean expressions.", "paper_title": "Analysis and Optimization for Boolean Expression Indexing", "paper_id": "WOS:000321211900001"}