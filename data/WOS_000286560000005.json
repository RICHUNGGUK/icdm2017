{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "faster_functions"}, {"score": 0.004545240514015278, "phrase": "general_technique"}, {"score": 0.00429057323623293, "phrase": "recursive_programs"}, {"score": 0.0038600230206554792, "phrase": "j._funct"}, {"score": 0.003154012038613403, "phrase": "simple_fixed-point_semantics"}, {"score": 0.002730023736069673, "phrase": "initial-algebra_semantics"}, {"score": 0.0022956075241520064, "phrase": "structured_pattern"}, {"score": 0.0021876814398268775, "phrase": "fold_operators"}], "paper_keywords": [""], "paper_abstract": "The worker/wrapper transformation is a general technique for improving the performance of recursive programs by changing their types. The previous formalisation (A. Gill & G. Hutton, J. Funct. Program., vol. 19, 2009, pp. 227-251) was based upon a simple fixed-point semantics of recursion. In this paper, we develop a more structured approach, based upon initial-algebra semantics. In particular, we show how the worker/wrapper transformation can be applied to programs defined using the structured pattern of recursion captured by fold operators, and illustrate our new technique with a number of examples.", "paper_title": "Factorising folds for faster functions", "paper_id": "WOS:000286560000005"}