{"auto_keywords": [{"score": 0.043069853910456694, "phrase": "runtime_verification"}, {"score": 0.00481495049065317, "phrase": "timed_probabilistic_properties"}, {"score": 0.004752221133109136, "phrase": "nonfunctional_aspects"}, {"score": 0.004710854091689325, "phrase": "system_behavior"}, {"score": 0.004649474569983707, "phrase": "essential_component"}, {"score": 0.004608997772926119, "phrase": "practical_software_development"}, {"score": 0.004042295865725559, "phrase": "timed_and_probabilistic_nonfunctional_properties"}, {"score": 0.004007083686875716, "phrase": "component-based_architectures"}, {"score": 0.0038862297330905836, "phrase": "common_information_model"}, {"score": 0.0037361664435836845, "phrase": "microsoft_net-based_implementation"}, {"score": 0.0035605741849764187, "phrase": "timed_probabilistic_behavior"}, {"score": 0.0035141291835319682, "phrase": "probabilistic_computational_tree_logic"}, {"score": 0.003393206299636482, "phrase": "formal_semantics"}, {"score": 0.0032764307492734145, "phrase": "application_execution"}, {"score": 0.0030951536886513567, "phrase": "required_timing_behavior"}, {"score": 0.0030414140732789186, "phrase": "overall_average"}, {"score": 0.002962543869356265, "phrase": "local_\"trends"}, {"score": 0.0028857130140890787, "phrase": "latter_aspect"}, {"score": 0.0027863537694678094, "phrase": "exponential_smoothing_prediction_techniques"}, {"score": 0.002749980017065414, "phrase": "truth_function"}, {"score": 0.002497319603143104, "phrase": "state_transitions"}, {"score": 0.0023694065215394593, "phrase": "wide_range"}, {"score": 0.0023487324083283205, "phrase": "nonfunctional_properties"}, {"score": 0.0023079225317714815, "phrase": "prediction_purposes"}, {"score": 0.0021993066642488237, "phrase": "precise_contracts"}, {"score": 0.0021801135036476136, "phrase": "system_monitoring"}, {"score": 0.0021049977753042253, "phrase": "extended_cim_monitoring_infrastructure"}], "paper_keywords": ["system monitoring", " nonfunctional properties", " prediction"], "paper_abstract": "Understanding nonfunctional aspects of system behavior is an essential component of practical software development and maintenance. Many nonfunctional system properties, such as reliability and availability, involve time and probabilities. In this paper, we present a framework for runtime verification and prediction of timed and probabilistic nonfunctional properties of component-based architectures, built using the Meta-Object Facility and the Distributed Management Task Force's Common Information Model (CIM) standard. We describe a Microsoft NET-based implementation of our framework. We define a language for describing timed probabilistic behavior based on Probabilistic Computational Tree Logic (PCTL). We provide a formal semantics for this language in terms of observed application execution traces. The semantics is interesting in that it permits checking of required timing behavior both over the overall average of traces and also over local \"trends\" in traces. The latter aspect of the semantics is achieved by incorporating exponential smoothing prediction techniques into the truth function for statements of our language. The semantics is generic over the aspects of an application that are represented by states and state transitions. This enables the language to be used to describe a wide range of nonfunctional properties for runtime verification and prediction purposes. We explain how statements of our language axe used to define precise contracts for system monitoring, through relating the semantics to an extended CIM monitoring infrastructure.", "paper_title": "Verification and prediction of timed probabilistic properties over the DMTF CIM", "paper_id": "WOS:000241964400007"}