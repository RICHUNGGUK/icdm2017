{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "session_types"}, {"score": 0.015719716506582538, "phrase": "multithreaded_functional_language"}, {"score": 0.004422325007817267, "phrase": "complex_protocols"}, {"score": 0.004186926251483987, "phrase": "static_type_checking"}, {"score": 0.0041112665381266315, "phrase": "session_type"}, {"score": 0.003988180913997414, "phrase": "communication_channel"}, {"score": 0.0038923605771735838, "phrase": "state_transitions"}, {"score": 0.003531474887552889, "phrase": "type_checking"}, {"score": 0.0034049123167891955, "phrase": "individual_messages"}, {"score": 0.0027019561451518768, "phrase": "dynamic_changes"}, {"score": 0.002511600086227215, "phrase": "argument_and_result_types"}, {"score": 0.0022923586577645143, "phrase": "type_checking_system"}, {"score": 0.0022101055924375725, "phrase": "subject_reduction"}, {"score": 0.00218334762335187, "phrase": "runtime_type_safety_theorems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["session types", " static type checking", " concurrent programming", " specification of communication protocols"], "paper_abstract": "We define a language whose type system, incorporating session types, allows complex protocols to be specified by types and verified by static type checking. A session type, associated with a communication channel, specifies the state transitions of a protocol and also the data types of messages associated with transitions; thus type checking can verify both correctness of individual messages and correctness of sequences of transitions. Previously, session types have mainly been studied in the context of the pi-calculus; instead, our formulation is based on a multithreaded functional language with side-effecting input/output operations. Our typing judgements statically describe dynamic changes in the types of channels, and our function types not only specify argument and result types but also describe changes in channels. We formalize the syntax, semantics and type checking system of our language, and prove subject reduction and runtime type safety theorems. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Type checking a multithreaded functional language with session types", "paper_id": "WOS:000242872300004"}