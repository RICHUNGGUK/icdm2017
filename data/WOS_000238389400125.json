{"auto_keywords": [{"score": 0.041451887954457145, "phrase": "cap"}, {"score": 0.015430035847996453, "phrase": "co-array_notation"}, {"score": 0.014324912790757949, "phrase": "fortran"}, {"score": 0.00898635862976529, "phrase": "revised_semantics"}, {"score": 0.00481495049065317, "phrase": "co-array_fortran"}, {"score": 0.004594137808658537, "phrase": "compact_syntax"}, {"score": 0.004508661664944657, "phrase": "programming_parallel_programs"}, {"score": 0.0036324746826127997, "phrase": "fortran_language_standard"}, {"score": 0.003369322866499544, "phrase": "revised_semantic_definition"}, {"score": 0.0026633568650501873, "phrase": "language_model"}, {"score": 0.002447101794397243, "phrase": "programmer_error"}, {"score": 0.0021652891317252994, "phrase": "collective_operations"}, {"score": 0.0021049977753042253, "phrase": "-array_notation"}], "paper_keywords": [""], "paper_abstract": "Co-array notation provides a compact syntax for programming parallel programs. Co-array Fortran (CAF) introduced and implements this notation, and CAP is currently proposed as an extension to the Fortran language standard. We believe that co-array notation requires a revised semantic definition beyond that specified by CAP for both pragmatic reasons within Fortran and to make the notation attractive for incorporation into other programming languages. The revised semantics make the language model easier to understand and reduces the potential for programmer error. Furthermore, these revised semantics allow CAP to be extended to capture collective operations in co-array notation.", "paper_title": "Co-array collectives: Refined semantics for Co-array Fortran", "paper_id": "WOS:000238389400125"}