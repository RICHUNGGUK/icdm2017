{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "packer"}, {"score": 0.008891593703378348, "phrase": "multiple_virtual_spaces"}, {"score": 0.008527080238585217, "phrase": "virtual_spaces"}, {"score": 0.00785313993564353, "phrase": "efficient_memory_management"}, {"score": 0.006925043179651348, "phrase": "garbage_collection"}, {"score": 0.006432512932899228, "phrase": "inefficient_space_utilization"}, {"score": 0.005696039958594796, "phrase": "multiple_spaces"}, {"score": 0.0047732596509542135, "phrase": "parallel_garbage_collection"}, {"score": 0.004650330504968421, "phrase": "fundamental_challenge"}, {"score": 0.004610058444728656, "phrase": "garbage_collector"}, {"score": 0.00443308765153716, "phrase": "recycled_space"}, {"score": 0.004394688617163029, "phrase": "minimal_time_overhead"}, {"score": 0.004135010810625326, "phrase": "large_object_space"}, {"score": 0.004046020290832207, "phrase": "normal_object_space"}, {"score": 0.0034441627435203804, "phrase": "existing_gc_designs"}, {"score": 0.0034143003168921114, "phrase": "different_gc_algorithms"}, {"score": 0.003384695931421288, "phrase": "different_spaces"}, {"score": 0.0032830808525570903, "phrase": "pause_time"}, {"score": 0.002893505913503472, "phrase": "novel_concept"}, {"score": 0.0024306740161601625, "phrase": "garbage_collection_pause_time"}, {"score": 0.0023679315987170857, "phrase": "novel_parallelization_method"}, {"score": 0.0022472527731744974, "phrase": "compacting_gc_parallelization_problem"}, {"score": 0.002218054404179068, "phrase": "discreted_acyclic_graph"}], "paper_keywords": ["Garbage collection", " Java virtual machine", " memory management", " parallel systems"], "paper_abstract": "The fundamental challenge of garbage collector (GC) design is to maximize the recycled space with minimal time overhead. For efficient memory management, in many GC designs the heap is divided into large object space (LOS) and normal object space (non-LOS). When either space is full, garbage collection is triggered even though the other space may still have plenty of room, thus leading to inefficient space utilization. Also, space partitioning in existing GC designs implies different GC algorithms for different spaces. This not only prolongs the pause time of garbage collection, but also makes collection inefficient on multiple spaces. To address these problems, we propose Packer, a parallel garbage collection algorithm based on the novel concept of virtual spaces. Instead of physically dividing the heap into multiple spaces, Packer manages multiple virtual spaces in one physical space. With multiple virtual spaces, Packer offers efficient memory management. With one physical space, Packer avoids the problem of an inefficient space utilization. To reduce the garbage collection pause time, we also propose a novel parallelization method that is applicable to multiple virtual spaces. Specifically, we reduce the compacting GC parallelization problem into a discreted acyclic graph (DAG) traversal parallelization problem, and apply it to both normal and large object compaction.", "paper_title": "Packer: Parallel Garbage Collection Based on Virtual Spaces", "paper_id": "WOS:000309113200008"}