{"auto_keywords": [{"score": 0.031963387236997626, "phrase": "new_strategy"}, {"score": 0.00481495049065317, "phrase": "trie-based_approximate_string_matching"}, {"score": 0.0047026237903774895, "phrase": "transmitted_string_x"}, {"score": 0.004652432101282386, "phrase": "corresponding_string_y"}, {"score": 0.004602773636967002, "phrase": "noisy_version"}, {"score": 0.004169972101509753, "phrase": "generalized_levenshtein_distance"}, {"score": 0.004063894124395344, "phrase": "total_number"}, {"score": 0.003969018740062018, "phrase": "x_epsilon_h."}, {"score": 0.003926626018798576, "phrase": "data_structure"}, {"score": 0.003901407184706592, "phrase": "search_costs"}, {"score": 0.003851452506862434, "phrase": "document_size"}, {"score": 0.003737355634024171, "phrase": "approximate_string_matching"}, {"score": 0.0034369643346301216, "phrase": "common_prefix"}, {"score": 0.003407549468745519, "phrase": "artificial_intelligence"}, {"score": 0.003194789993438313, "phrase": "game_trees"}, {"score": 0.0031335830806256777, "phrase": "new_bb_pruning_strategy"}, {"score": 0.0030934292993284747, "phrase": "dictionary-based_approximate_string_matching"}, {"score": 0.002875391177926809, "phrase": "search_algorithm"}, {"score": 0.0028507687231271745, "phrase": "pruning_strategy"}, {"score": 0.002748447402646332, "phrase": "suitable_string"}, {"score": 0.002684199575281511, "phrase": "reported_trie-based_methods"}, {"score": 0.002672681704787764, "phrase": "kashyap"}, {"score": 0.002661209956589233, "phrase": "oommen"}, {"score": 0.002604592203512228, "phrase": "shang"}, {"score": 0.0025934127228147727, "phrase": "merrettal"}, {"score": 0.0025822818714499795, "phrase": "ieee_trans_knowledge_data_eng"}, {"score": 0.002478886882619159, "phrase": "edit_distance_computations"}, {"score": 0.0023953156183281537, "phrase": "h."}, {"score": 0.0023339957650910965, "phrase": "string_lengths"}, {"score": 0.0022794140330617417, "phrase": "trie_data_structure"}, {"score": 0.0022501808805393915, "phrase": "marked_improvement"}], "paper_keywords": ["trie-based syntactic pattern recognition", " approximate string matching", " noisy syntactic recognition using tries", " branch and bound techniques", " pruning"], "paper_abstract": "This paper deals with the problem of estimating a transmitted string X* by processing the corresponding string Y, which is a noisy version of X*. We assume that Y contains substitution, insertion, and deletion errors, and that X* is an element of a finite (but possibly, large) dictionary, H. The best estimate X+ of X*, is defined as that element of H which minimizes the generalized Levenshtein distance D(X, Y) between X and Y such that the total number of errors is not more than K, for all X epsilon H. The trie is a data structure that offers search costs that are independent of the document size. Tries also combine prefixes together, and so by using tries in approximate string matching we can utilize the information obtained in the process of evaluating any one D(X (i) , Y), to compute any other D(X (j) , Y), where X (i) and X (j) share a common prefix. In the artificial intelligence (AI) domain, branch and bound (BB) schemes are used when we want to prune paths that have costs above a certain threshold. These techniques have been applied to prune, for example, game trees. In this paper, we present a new BB pruning strategy that can be applied to dictionary-based approximate string matching when the dictionary is stored as a trie. The new strategy attempts to look ahead at each node, c, before moving further, by merely evaluating a certain local criterion at c. The search algorithm according to this pruning strategy will not traverse inside the subtrie(c) unless there is a \"hope\" of determining a suitable string in it. In other words, as opposed to the reported trie-based methods (Kashyap and Oommen in Inf Sci 23(2):123-142, 1981; Shang and Merrettal in IEEE Trans Knowledge Data Eng 8(4):540-547, 1996), the pruning is done a priori before even embarking on the edit distance computations. The new strategy depends highly on the variance of the lengths of the strings in H. It combines the advantages of partitioning the dictionary according to the string lengths, and the advantages gleaned by representing H using the trie data structure. The results demonstrate a marked improvement (up to 30% when costs are of a 0/1 form, and up to 47% when costs are general) with respect to the number of operations needed on three benchmark dictionaries.", "paper_title": "A novel look-ahead optimization strategy for trie-based approximate string matching", "paper_id": "WOS:000240830900006"}