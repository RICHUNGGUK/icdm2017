{"auto_keywords": [{"score": 0.043113908496203904, "phrase": "osck"}, {"score": 0.04130020033892652, "phrase": "kernel_rootkits"}, {"score": 0.00481495049065317, "phrase": "system_kernel_integrity"}, {"score": 0.004536592536813498, "phrase": "operating_system_state"}, {"score": 0.004338390136272005, "phrase": "dangerous_threat"}, {"score": 0.004274257668843717, "phrase": "system_security"}, {"score": 0.0038510053729959074, "phrase": "malicious_modifications"}, {"score": 0.0037940502405699765, "phrase": "operating_system_data"}, {"score": 0.0036281710561308377, "phrase": "existing_techniques"}, {"score": 0.0034437574674180365, "phrase": "safety_properties"}, {"score": 0.003392804886610623, "phrase": "large_portions"}, {"score": 0.0033177813460815346, "phrase": "kernel_heap"}, {"score": 0.0032686865485199806, "phrase": "minimal_overhead"}, {"score": 0.0031726587374218277, "phrase": "type_information"}, {"score": 0.0030565692640988585, "phrase": "unmodified_kernel_source_code"}, {"score": 0.0030113280682863234, "phrase": "in-memory_kernel_data_structures"}, {"score": 0.0029667545082292376, "phrase": "high-performance_integrity_checks"}, {"score": 0.002836942411239067, "phrase": "running_operating_system"}, {"score": 0.0027949428646076627, "phrase": "data_races"}, {"score": 0.0026726283357752585, "phrase": "deterministic_solution"}, {"score": 0.002613487968156893, "phrase": "kernel_memory"}, {"score": 0.0025366596616434793, "phrase": "consistent_state"}, {"score": 0.0023368018449680295, "phrase": "current_systems"}, {"score": 0.002217880187104576, "phrase": "osck_api"}, {"score": 0.0021687806803474367, "phrase": "kernel_developers"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_integrity_properties"}], "paper_keywords": ["Security", " Verification", " Rootkit detection"], "paper_abstract": "Kernel rootkits that modify operating system state to avoid detection are a dangerous threat to system security. This paper presents OSck, a system that discovers kernel rootkits by detecting malicious modifications to operating system data. OSck integrates and extends existing techniques for detecting rootkits, and verifies safety properties for large portions of the kernel heap with minimal overhead. We deduce type information for verification by analyzing unmodified kernel source code and in-memory kernel data structures. High-performance integrity checks that execute concurrently with a running operating system create data races, and we demonstrate a deterministic solution for ensuring kernel memory is in a consistent state. We introduce two new classes of kernel rootkits that are undetectable by current systems, motivating the need for the OSck API that allows kernel developers to conveniently specify arbitrary integrity properties.", "paper_title": "Ensuring Operating System Kernel Integrity with OSck", "paper_id": "WOS:000290854400023"}