{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "stable_model"}, {"score": 0.004642604455537883, "phrase": "declarative_semantics"}, {"score": 0.00453113241842654, "phrase": "prolog_programs"}, {"score": 0.0041112665381266315, "phrase": "starting_point"}, {"score": 0.003822003373331997, "phrase": "set_programming"}, {"score": 0.0034676182423067307, "phrase": "new_definition"}, {"score": 0.0028195727965553367, "phrase": "original_definition"}, {"score": 0.002348883765159185, "phrase": "syntactic_transformation"}, {"score": 0.002264607102799332, "phrase": "parallel_circumscription"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Answer set programming", " Circumscription", " Nonmonotonic reasoning", " Program completion", " Stable models"], "paper_abstract": "The concept of a stable model provided a declarative semantics for Prolog programs with negation as failure and became a starting point for the development of answer set programming. In this paper we propose a new definition of that concept, which covers many constructs used in answer set programming and, unlike the original definition, refers neither to grounding nor to fixpoints. It is based on a syntactic transformation similar to parallel circumscription. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Stable models and circumscription", "paper_id": "WOS:000285947700010"}