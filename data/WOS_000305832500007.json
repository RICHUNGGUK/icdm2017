{"auto_keywords": [{"score": 0.036493951257548334, "phrase": "specification_logic"}, {"score": 0.010008413662994669, "phrase": "reasoning_logic"}, {"score": 0.00481495049065317, "phrase": "relational_descriptions"}, {"score": 0.004714869813251479, "phrase": "diverse_computational_notions"}, {"score": 0.0046007229963284345, "phrase": "operational_semantics"}, {"score": 0.004489327204473076, "phrase": "non-deterministic_machines"}, {"score": 0.004069963083642548, "phrase": "object_languages"}, {"score": 0.003957477564354679, "phrase": "natural_next_question"}, {"score": 0.003715579364728729, "phrase": "second_logic"}, {"score": 0.0035625556447293804, "phrase": "satisfactory_reasoning_logic"}, {"score": 0.0031182092708983184, "phrase": "natural_treatment"}, {"score": 0.003021334228842501, "phrase": "binding_structures"}, {"score": 0.002937745193225725, "phrase": "free_and_bound_variables"}, {"score": 0.002738723329538679, "phrase": "strong_mechanisms"}, {"score": 0.0024912073108138613, "phrase": "atomic_judgments"}, {"score": 0.0024651215047303593, "phrase": "inference_rules"}, {"score": 0.002388487669097511, "phrase": "special_generic_quantifier"}, {"score": 0.0022344212744309327, "phrase": "interactive_theorem_prover"}, {"score": 0.0021801944769738618, "phrase": "two-level_logic_approach"}, {"score": 0.00210499840229361, "phrase": "abella"}], "paper_keywords": ["Two-level logic", " Nominal abstraction", " Generic judgments", " del-quantification", " lambda-tree syntax"], "paper_abstract": "Relational descriptions have been used in formalizing diverse computational notions, including, for example, operational semantics, typing, and acceptance by non-deterministic machines. We therefore propose a (restricted) logical theory over relations as a language for specifying such notions. Our specification logic is further characterized by an ability to explicitly treat binding in object languages. Once such a logic is fixed, a natural next question is how we might prove theorems about specifications written in it. We propose to use a second logic, called a reasoning logic, for this purpose. A satisfactory reasoning logic should be able to completely encode the specification logic. Associated with the specification logic are various notions of binding: for quantifiers within formulas, for eigenvariables within sequents, and for abstractions within terms. To provide a natural treatment of these aspects, the reasoning logic must encode binding structures as well as their associated notions of scope, free and bound variables, and capture-avoiding substitution. Further, to support arguments about provability, the reasoning logic should possess strong mechanisms for constructing proofs by induction and co-induction. We provide these capabilities here by using a logic called which represents relations over lambda-terms via definitions of atomic judgments, contains inference rules for induction and co-induction, and includes a special generic quantifier. We show how provability in the specification logic can be transparently encoded in . We also describe an interactive theorem prover called Abella that implements and this two-level logic approach and we present several examples that demonstrate the efficacy of Abella in reasoning about computations.", "paper_title": "A Two-Level Logic Approach to Reasoning About Computations", "paper_id": "WOS:000305832500007"}