{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "metric-based_filtering"}, {"score": 0.004728624975677976, "phrase": "design_pattern_detection_approaches"}, {"score": 0.004588158931776543, "phrase": "high-level_recurring_abstractions"}, {"score": 0.004293584349522444, "phrase": "key_task"}, {"score": 0.004165987300206134, "phrase": "software_engineering"}, {"score": 0.00399367108161192, "phrase": "program_comprehension"}, {"score": 0.003945754887845885, "phrase": "design_recovery"}, {"score": 0.0038516336597530614, "phrase": "re-documenting_object-oriented_systems"}, {"score": 0.003714629047818465, "phrase": "current_design_pattern_detection_approaches"}, {"score": 0.0036479584876742085, "phrase": "high_time_complexity"}, {"score": 0.003352256019007896, "phrase": "guiding_principles"}, {"score": 0.00306189690236109, "phrase": "practical_limit"}, {"score": 0.0029351141718104725, "phrase": "pattern_detection_approach"}, {"score": 0.002830617996609902, "phrase": "filtering_phase"}, {"score": 0.002779769492357829, "phrase": "possible_existence"}, {"score": 0.0026646374739979694, "phrase": "candidate_patterns"}, {"score": 0.0025235718883452585, "phrase": "analyzed_design_fragments"}, {"score": 0.002478225374613311, "phrase": "herein_proposed_filtering_approach"}, {"score": 0.002448446849997207, "phrase": "semantic_and_structural_design_metrics"}, {"score": 0.0023755529073496394, "phrase": "semantic_and_structural_symptoms"}, {"score": 0.0023470051993423483, "phrase": "design_pattern_instances"}, {"score": 0.002169607777109063, "phrase": "approach_for_pattern_discovery"}, {"score": 0.0021049977753042253, "phrase": "open_source_system"}], "paper_keywords": ["Object-oriented metrics", " Design patterns", " Quality assurance", " Filtering"], "paper_abstract": "Design patterns represent high-level recurring abstractions that reflect the know-how of experts. Their detection is a key task in the context of software engineering; it is very useful in program comprehension, design recovery and also for re-documenting object-oriented systems. Despite their usefulness, current design pattern detection approaches have a high time complexity that hinders their application. This complexity is further aggravated with the absence of guiding principles in determining which pattern to look for first among the various patterns. To overcome this practical limit, we propose to optimize any pattern detection approach by foregoing it by a filtering phase that detects possible existence of patterns and that orders the candidate patterns in terms of their degree of resemblance to the analyzed design fragments. The herein proposed filtering approach exploits semantic and structural design metrics to look for the semantic and structural symptoms of design pattern instances. Its performance is experimentally demonstrated through our design pattern detection method MAPeD (Multi-phase Approach for Pattern Discovery) applied on the open source system JUnit.", "paper_title": "Using metric-based filtering to improve design pattern detection approaches", "paper_id": "WOS:000357527900004"}