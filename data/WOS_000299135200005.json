{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.00471193241675062, "phrase": "cellular_computing_models"}, {"score": 0.004671342094877447, "phrase": "membrane_computing"}, {"score": 0.004551647527068771, "phrase": "abstract_formal_computing_models"}, {"score": 0.004247180402119585, "phrase": "living_cells"}, {"score": 0.003894963476923956, "phrase": "polynomial_time_solutions"}, {"score": 0.0038613835226952117, "phrase": "np-complete_problems"}, {"score": 0.003618558599449415, "phrase": "intrinsic_massively_parallelism"}, {"score": 0.0035873530542209686, "phrase": "p_systems"}, {"score": 0.0035410467987580484, "phrase": "exponential_computational_workspace"}, {"score": 0.003480230347985338, "phrase": "non-intensive_floating_point_nature"}, {"score": 0.003275454623236867, "phrase": "recognizer_p_systems"}, {"score": 0.0032471982781283374, "phrase": "active_membranes"}, {"score": 0.00319141242685261, "phrase": "satisfiability_problem"}, {"score": 0.003163878786694538, "phrase": "linear_time"}, {"score": 0.0031365819432206004, "phrase": "different_instances"}, {"score": 0.003109519872758431, "phrase": "graphics_processing_units"}, {"score": 0.0030166226457616616, "phrase": "efficient_handling"}, {"score": 0.0029776614744264724, "phrase": "exponential_workspace"}, {"score": 0.0029264925857346497, "phrase": "p_systems_computation"}, {"score": 0.0029134659616160564, "phrase": "nvidia"}, {"score": 0.0028762004595878714, "phrase": "different_data_policies"}, {"score": 0.0028390477456009568, "phrase": "memory_bandwidth"}, {"score": 0.002802373595203129, "phrase": "data_locality"}, {"score": 0.002754208576828914, "phrase": "dynamic_queues"}, {"score": 0.0026835045963349647, "phrase": "target_p_system"}, {"score": 0.0025696647013416863, "phrase": "valid_alternative"}, {"score": 0.0025474814283429213, "phrase": "high-performance_computing"}, {"score": 0.0025145641652082164, "phrase": "considerably_lower_cost"}, {"score": 0.002387083859537412, "phrase": "largest_problem_size"}, {"score": 0.0022857899334246946, "phrase": "new_hardware_generation"}, {"score": 0.002207851585508636, "phrase": "total_speed-up"}], "paper_keywords": ["Manycore", " GPUs", " P systems", " SAT problem", " High performance computing"], "paper_abstract": "Membrane Computing is a discipline aiming to abstract formal computing models, called membrane systems or P systems, from the structure and functioning of the living cells as well as from the cooperation of cells in tissues, organs, and other higher order structures. This framework provides polynomial time solutions to NP-complete problems by trading space for time, and whose efficient simulation poses challenges in three different aspects: an intrinsic massively parallelism of P systems, an exponential computational workspace, and a non-intensive floating point nature. In this paper, we analyze the simulation of a family of recognizer P systems with active membranes that solves the Satisfiability problem in linear time on different instances of Graphics Processing Units (GPUs). For an efficient handling of the exponential workspace created by the P systems computation, we enable different data policies to increase memory bandwidth and exploit data locality through tiling and dynamic queues. Parallelism inherent to the target P system is also managed to demonstrate that GPUs offer a valid alternative for high-performance computing at a considerably lower cost. Furthermore, scalability is demonstrated on the way to the largest problem size we were able to run, and considering the new hardware generation from Nvidia, Fermi, for a total speed-up exceeding four orders of magnitude when running our simulations on the Tesla S2050 server.", "paper_title": "The GPU on the simulation of cellular computing models", "paper_id": "WOS:000299135200005"}