{"auto_keywords": [{"score": 0.04980874191704607, "phrase": "moving_objects"}, {"score": 0.01461605617840155, "phrase": "query_results"}, {"score": 0.00898890480137249, "phrase": "plu"}, {"score": 0.00481495049065317, "phrase": "continuous_queries"}, {"score": 0.004747314816584038, "phrase": "significant_overhead"}, {"score": 0.004707188147442449, "phrase": "frequent_location_updates"}, {"score": 0.004627944735913613, "phrase": "poor_performance"}, {"score": 0.004299621153829837, "phrase": "existing_solutions"}, {"score": 0.004275347843870176, "phrase": "lazy_updates"}, {"score": 0.004167795561137289, "phrase": "unnecessary_location_updates"}, {"score": 0.003916098498242888, "phrase": "simplified_scenario"}, {"score": 0.00370044870195814, "phrase": "trajectory_movement_model"}, {"score": 0.0036691380448651443, "phrase": "arbitrary_movement_model"}, {"score": 0.003617539106699534, "phrase": "first_strategy"}, {"score": 0.0035869274480340727, "phrase": "trajectory_movement_environment"}, {"score": 0.0035565739009596267, "phrase": "adaptive_safe_region"}, {"score": 0.0034768766116014672, "phrase": "adjustable_safe_region"}, {"score": 0.0034086028336466688, "phrase": "surrounding_dynamic_queries"}, {"score": 0.0033797531990222124, "phrase": "communication_overhead"}, {"score": 0.003332210257373994, "phrase": "highly_dynamic_environment"}, {"score": 0.003148612096891635, "phrase": "multiple_query_types"}, {"score": 0.002916650173868229, "phrase": "location_probes"}, {"score": 0.0028837660125643127, "phrase": "affected_data_objects"}, {"score": 0.002803164004793949, "phrase": "second_proposed_strategy"}, {"score": 0.0027794243746094905, "phrase": "arbitrary_movement_environment"}, {"score": 0.002755885236633142, "phrase": "partition-based_lazy_update"}, {"score": 0.002656158309155626, "phrase": "location_information_tables"}, {"score": 0.0025819015229390663, "phrase": "moving_object"}, {"score": 0.0025600309252607977, "phrase": "possible_query_movements"}, {"score": 0.0025311573083044545, "phrase": "location_update"}, {"score": 0.0024395426929046415, "phrase": "smart_server"}, {"score": 0.0023646113279358646, "phrase": "data_structure"}, {"score": 0.002279011030331704, "phrase": "query_locations"}, {"score": 0.002234206434819338, "phrase": "mobile-side_and_server-side_processes"}, {"score": 0.0021778895748464045, "phrase": "simulation_results"}, {"score": 0.0021049977753042253, "phrase": "existing_methods"}], "paper_keywords": ["location updates", " continuous queries", " location-based services"], "paper_abstract": "The significant overhead related to frequent location updates from moving objects often results in poor performance. As most of the location updates do not affect the query results, the network bandwidth and the battery life of moving objects are wasted. Existing solutions propose lazy updates, but such techniques generally avoid only a small fraction of all unnecessary location updates because of their basic approach (e.g., safe regions, time or distance thresholds). Furthermore, most prior work focuses on a simplified scenario where queries are either static or rarely change their positions. In this study, two novel efficient location update strategies are proposed in a trajectory movement model and an arbitrary movement model, respectively. The first strategy for a trajectory movement environment is the Adaptive Safe Region (ASR) technique that retrieves an adjustable safe region which is continuously reconciled with the surrounding dynamic queries. The communication overhead is reduced in a highly dynamic environment where both queries and data objects change their positions frequently. In addition, we design a framework that supports multiple query types (e.g., range and c-kNN queries). In this framework, our query re-evaluation algorithms take advantage of ASRs and issue location probes only to the affected data objects, without flooding the system with many unnecessary location update requests. The second proposed strategy for an arbitrary movement environment is the Partition-based Lazy Update (PLU, for short) algorithm that elevates this idea further by adopting Location Information Tables (LITs) which (a) allow each moving object to estimate possible query movements and issue a location update only when it may affect any query results and (b) enable smart server probing that results in fewer messages. We first define the data structure of an LIT which is essentially packed with a set of surrounding query locations across the terrain and discuss the mobile-side and server-side processes in correspondence to the utilization of LITs. Simulation results confirm that both the ASR and PLU concepts improve scalability and efficiency over existing methods.", "paper_title": "Efficient Location Updates for Continuous Queries over Moving Objects", "paper_id": "WOS:000277548500004"}