{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "early_reply"}, {"score": 0.042690431187572216, "phrase": "synchronous_invocation"}, {"score": 0.00378767277402891, "phrase": "invocation's_servicer"}, {"score": 0.003614895644619489, "phrase": "message_passing_notations"}, {"score": 0.0034963129868796033, "phrase": "deferred_reply"}, {"score": 0.0031006232333900055, "phrase": "additional_flexibility"}, {"score": 0.0030189426536422577, "phrase": "realistic_applications"}, {"score": 0.0023739321566540682, "phrase": "programming_notations"}, {"score": 0.0022057677637040396, "phrase": "run-time_costs"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["concurrency", " message passing", " early reply", " deferred reply", " forward", " transformations", " JR programming language"], "paper_abstract": "Message passing notations (language, package, etc.) typically include some form of asynchronous or synchronous invocation. In a synchronous invocation, the invoker waits for the invocation's servicer to pass back results. Some message passing notations also include early reply or deferred reply (including forwarding), which alters how and when the servicer passes back its results; this additional flexibility is useful in realistic applications. It is well known how to transform a synchronous invocation into only asynchronous invocations. This paper extends such transformations to early reply and forward. This paper also describes the use of these transformations within the implementations of programming notations. Using the transformation simplifies the implementation without significantly affecting run-time costs. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Transformations for early reply and forward message passing mechanisms", "paper_id": "WOS:000363766600008"}