{"auto_keywords": [{"score": 0.031580847435344256, "phrase": "multiple_workflow_applications"}, {"score": 0.00481495049065317, "phrase": "task_rearrangement"}, {"score": 0.004715908063787721, "phrase": "computing_systems"}, {"score": 0.004034962424068988, "phrase": "workflow_application"}, {"score": 0.003972504904621217, "phrase": "multiple_precedence-constrained_tasks"}, {"score": 0.0034162643819889054, "phrase": "actual_execution"}, {"score": 0.00331125524068286, "phrase": "original_schedule"}, {"score": 0.0031762308449055305, "phrase": "resource_contention"}, {"score": 0.0031107911390188055, "phrase": "performance_prediction"}, {"score": 0.0029376803941247084, "phrase": "inter-task_dependencies"}, {"score": 0.002674885993329912, "phrase": "account_scheduling_robustness"}, {"score": 0.0026061419474030633, "phrase": "dynamic_task_rearrangement"}, {"score": 0.002579140290642792, "phrase": "rescheduling_algorithm"}, {"score": 0.0025259712348798323, "phrase": "scheduling_flexibility"}, {"score": 0.002499798127196099, "phrase": "precedence_constraints"}, {"score": 0.0024103044278902916, "phrase": "resource_allocation"}, {"score": 0.002385326947545194, "phrase": "multiple_workflows"}, {"score": 0.0022760856906838814, "phrase": "delayed_execution"}, {"score": 0.0022407927161620855, "phrase": "subsequent_tasks"}, {"score": 0.002206045784326466, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "multiple-workflow_scheduling"}], "paper_keywords": ["Scheduling", " Workflow applications", " Workflow scheduling", " Rescheduling"], "paper_abstract": "Large-scale distributed computing systems like grids and more recently clouds are a platform of choice for many resource-intensive applications. Workflow applications account for the majority of these applications, particularly in science and engineering. A workflow application consists of multiple precedence-constrained tasks with data dependencies. Since resources in those systems are shared by many users and applications deployed there are very diverse, scheduling is complicated. Often, the actual execution of applications differs from the original schedule following delays such as those caused by resource contention and other issues in performance prediction. These delays have further impact when running multiple workflow applications due to inter-task dependencies. In this paper, we investigate the problem of scheduling multiple workflow applications concurrently, explicitly taking into account scheduling robustness. We present a dynamic task rearrangement and rescheduling algorithm that exploits the scheduling flexibility from precedence constraints among tasks. The algorithm optimizes resource allocation among multiple workflows, and it often stops the influence of delayed execution passing to subsequent tasks. The experimental results demonstrate that our approach can significantly improve performance in multiple-workflow scheduling.", "paper_title": "Adaptive multiple-workflow scheduling with task rearrangement", "paper_id": "WOS:000352360300006"}