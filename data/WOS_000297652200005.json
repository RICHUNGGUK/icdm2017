{"auto_keywords": [{"score": 0.03973761244758953, "phrase": "grid_cells"}, {"score": 0.03076620360242571, "phrase": "indirect_addressing"}, {"score": 0.00481495049065317, "phrase": "irregular_grids"}, {"score": 0.004652016085325825, "phrase": "spherical_surface"}, {"score": 0.0045464538515249085, "phrase": "global_numerical_weather_prediction"}, {"score": 0.004268293864953256, "phrase": "grid_mesh_distance"}, {"score": 0.004195418010131832, "phrase": "entire_globe"}, {"score": 0.0041001740903338834, "phrase": "neighboring_grid_cells"}, {"score": 0.0038936755823756226, "phrase": "unique_programming_challenges"}, {"score": 0.003697538418750941, "phrase": "neighboring_cells"}, {"score": 0.0035722806911457545, "phrase": "icosahedral_grid"}, {"score": 0.003511246498068952, "phrase": "one-dimensional_vector_loop_structure"}, {"score": 0.0026955672787561742, "phrase": "run_time"}, {"score": 0.0026342827320931937, "phrase": "easy_implementation"}, {"score": 0.0026041635822373265, "phrase": "different_memory_layouts"}, {"score": 0.002574387911697005, "phrase": "cache_blocking"}, {"score": 0.002321234686549485, "phrase": "execution_time"}, {"score": 0.0022296340517805125, "phrase": "directly_addressable_index_innermost"}, {"score": 0.0021049977753042253, "phrase": "performance_penalties"}], "paper_keywords": ["irregular grid", " indirect addressing", " performance"], "paper_abstract": "For simulation on a spherical surface, such as global numerical weather prediction, icosahedral grids are superior to their competitors in uniformity of grid mesh distance across the entire globe and lack of neighboring grid cells that share only a single vertex. Use of such a grid presents unique programming challenges related to iteration across grid cells and location of neighboring cells. Here we describe an icosahedral grid with a one-dimensional vector loop structure, table specified memory order, and an indirect addressing scheme that yields very compact code despite the complexities of this grid. This approach allows the same model code to be used for many grid structures. Indirect addressing also allows grid cells to be stored in any order, selectable at run time. This permits easy implementation of different memory layouts for cache blocking, distributed-memory parallelism, and static load balancing. Since indirect addressing can adversely affect execution time we organize arrays to place a directly addressable index innermost. We also describe experiments designed to measure any performance penalties accrued from use of indirect addressing.", "paper_title": "A general method for modeling on irregular grids", "paper_id": "WOS:000297652200005"}