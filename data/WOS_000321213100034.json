{"auto_keywords": [{"score": 0.03533593891347226, "phrase": "ipls"}, {"score": 0.01329602190567612, "phrase": "loop_iterations"}, {"score": 0.00481495049065317, "phrase": "program_specialization"}, {"score": 0.004654826737377134, "phrase": "program_invariants"}, {"score": 0.004185289462328125, "phrase": "program_input"}, {"score": 0.0041450181887917135, "phrase": "predictable_patterns"}, {"score": 0.004007083686875716, "phrase": "existing_specializers"}, {"score": 0.0037087324991876727, "phrase": "invariant-induced_pattern_based_loop_specialization"}, {"score": 0.00346589179059467, "phrase": "everyday_use"}, {"score": 0.0034325187732054093, "phrase": "real_applications"}, {"score": 0.0033830587647810132, "phrase": "dynamic_information-flow_tracking"}, {"score": 0.003100865267124765, "phrase": "multiple_iterations"}, {"score": 0.003070996252787868, "phrase": "hot_loops"}, {"score": 0.0028421434495262796, "phrase": "large_window"}, {"score": 0.002760778494680823, "phrase": "aggressive_optimization"}, {"score": 0.002630299922281955, "phrase": "recurring_patterns"}, {"score": 0.0025549840900344596, "phrase": "concrete_loops"}, {"score": 0.0025181367444581967, "phrase": "specialized_binary"}, {"score": 0.002469830206270585, "phrase": "real-world_programs"}, {"score": 0.002274630121183437, "phrase": "geomean_speedup"}, {"score": 0.0022202042044679984, "phrase": "maximum_speedup"}, {"score": 0.0021670777282518424, "phrase": "original_codes"}, {"score": 0.0021049977753042253, "phrase": "eleven_scripts"}], "paper_keywords": ["Design", " Languages", " Performance", " Loop specialization", " Partial evaluation", " Profile based optimization", " Program specialization"], "paper_abstract": "Program specialization optimizes a program with respect to program invariants, including known, fixed inputs. These invariants can be used to enable optimizations that are otherwise unsound. In many applications, a program input induces predictable patterns of values across loop iterations, yet existing specializers cannot fully capitalize on this opportunity. To address this limitation, we present Invariant-induced Pattern based Loop Specialization (IPLS), the first fully-automatic specialization technique designed for everyday use on real applications. Using dynamic information-flow tracking, IPLS profiles the values of instructions that depend solely on invariants and recognizes repeating patterns across multiple iterations of hot loops. IPLS then specializes these loops, using those patterns to predict values across a large window of loop iterations. This enables aggressive optimization of the loop; conceptually, this optimization reconstructs recurring patterns induced by the input as concrete loops in the specialized binary. IPLS specializes real-world programs that prior techniques fail to specialize without requiring hints from the user. Experiments demonstrate a geomean speedup of 14.1% with a maximum speedup of 138% over the original codes when evaluated on three script interpreters and eleven scripts each.", "paper_title": "Practical Automatic Loop Specialization", "paper_id": "WOS:000321213100034"}