{"auto_keywords": [{"score": 0.04062412513846852, "phrase": "ci"}, {"score": 0.005339913640990625, "phrase": "execution_logs"}, {"score": 0.00481495049065317, "phrase": "communicated_information"}, {"score": 0.004753576127735001, "phrase": "large_software_systems"}, {"score": 0.0047292449487169345, "phrase": "substantial_research"}, {"score": 0.004705037720076602, "phrase": "software_engineering"}, {"score": 0.004645057834614705, "phrase": "dynamic_nature"}, {"score": 0.004621279527317074, "phrase": "software_systems"}, {"score": 0.004562362497952548, "phrase": "software_maintenance"}, {"score": 0.004539005582217309, "phrase": "program_comprehension"}, {"score": 0.004446762251086613, "phrase": "automated_instrumentation"}, {"score": 0.0041703614123283165, "phrase": "dynamic_information"}, {"score": 0.0040438338011467845, "phrase": "code_base"}, {"score": 0.003982011128052839, "phrase": "system_administrators'_attention"}, {"score": 0.003961613484271729, "phrase": "important_run-time_phenomena"}, {"score": 0.003782655283668953, "phrase": "system_events"}, {"score": 0.0036490529923833884, "phrase": "log_processing_apps"}, {"score": 0.003584025547693836, "phrase": "software_system"}, {"score": 0.003056215415620319, "phrase": "case_study"}, {"score": 0.002895620643297197, "phrase": "logging_statements"}, {"score": 0.002873375998309551, "phrase": "source_code"}, {"score": 0.0028221322455573624, "phrase": "better_traceability"}, {"score": 0.0027575854424604965, "phrase": "ci."}, {"score": 0.002673804838281251, "phrase": "high_rate"}, {"score": 0.0026193670580850125, "phrase": "fragile_lpas"}, {"score": 0.0024373950372964573, "phrase": "robust_analysis_techniques"}, {"score": 0.0023694065215394593, "phrase": "implementation-level_ci"}, {"score": 0.0023033100935570755, "phrase": "error_messages"}, {"score": 0.0022275639370573264, "phrase": "domain-level_ci"}, {"score": 0.002176585279759007, "phrase": "latter_ci"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["reverse engineering", " software evolution", " communicated information", " execution log analysis"], "paper_abstract": "Substantial research in software engineering focuses on understanding the dynamic nature of software systems in order to improve software maintenance and program comprehension. This research typically makes use of automated instrumentation and profiling techniques after the fact, that is, without considering domain knowledge. In this paper, we examine another source of dynamic information that is generated from statements that have been inserted into the code base during development to draw the system administrators' attention to important run-time phenomena. We call this source communicated information (CI). Examples of CI include execution logs and system events. The availability of CI has sparked the development of an ecosystem of Log Processing Apps (LPAs) that surround the software system under analysis to monitor and document various run-time constraints. The dependence of LPAs on the timeliness, accuracy and granularity of the CI means that it is important to understand the nature of CI and how it evolves over time, both qualitatively and quantitatively. Yet, to our knowledge, little empirical analysis has been performed on CI and its evolution. In a case study on two large open source and one industrial software systems, we explore the evolution of CI by mining the execution logs of these systems and the logging statements in the source code. Our study illustrates the need for better traceability between CI and the LPAs that analyze the CI. In particular, we find that the CI changes at a high rate across versions, which could lead to fragile LPAs. We found that up to 70% of these changes could have been avoided and the impact of 15% to 80% of the changes can be controlled through the use of robust analysis techniques by LPAs. We also found that LPAs that track implementation-level CI (e.g. performance analysis) and the LPAs that monitor error messages (system health monitoring) are more fragile than LPAs that track domain-level CI (e.g. workload modelling), because the latter CI tends to be long-lived. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "An exploratory study of the evolution of communicated information about the execution of large software systems", "paper_id": "WOS:000330799000002"}