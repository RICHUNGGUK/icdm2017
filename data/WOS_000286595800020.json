{"auto_keywords": [{"score": 0.033196982587530136, "phrase": "libsync"}, {"score": 0.006222875305578536, "phrase": "api_usages"}, {"score": 0.00481495049065317, "phrase": "api_usage_adaptation"}, {"score": 0.004749824776508639, "phrase": "existing_library_components"}, {"score": 0.0045804107341714, "phrase": "software_development"}, {"score": 0.004477595431209663, "phrase": "library_components"}, {"score": 0.004397000006837371, "phrase": "new_feature_requests"}, {"score": 0.0042209023469249205, "phrase": "new_standards"}, {"score": 0.004126123386192962, "phrase": "software_libraries"}, {"score": 0.0040334640350288, "phrase": "corresponding_changes"}, {"score": 0.003942877273973905, "phrase": "updated_libraries"}, {"score": 0.003907212558276185, "phrase": "existing_api_usage_adaptation_techniques"}, {"score": 0.003683097597914604, "phrase": "deprecated_api"}, {"score": 0.0035677736570659813, "phrase": "complex_adaptations"}, {"score": 0.0034876091188625535, "phrase": "new_object"}, {"score": 0.0033937776228549557, "phrase": "different_api_method"}, {"score": 0.0032282396745967504, "phrase": "updated_api_method"}, {"score": 0.003056819704624705, "phrase": "api_usage_code"}, {"score": 0.003015401937358271, "phrase": "complex_api_usage_adaptation_patterns"}, {"score": 0.0028944757265206332, "phrase": "new_library_version"}, {"score": 0.002778385486855157, "phrase": "library's_test_code"}, {"score": 0.0026188490199688013, "phrase": "api_declarations"}, {"score": 0.002502374576203785, "phrase": "associated_api_usage_skeletons"}, {"score": 0.00245724480030654, "phrase": "library_migration"}, {"score": 0.0023586493263143553, "phrase": "extracted_api_usage_skeletons"}, {"score": 0.002326669201839705, "phrase": "api_usage_adaptation_patterns"}, {"score": 0.0022847009758393405, "phrase": "learned_adaptation_patterns"}, {"score": 0.0021049977753042253, "phrase": "real-world_software_systems"}], "paper_keywords": ["Algorithm", " Design", " Experimentation", " Reliability", " Software Evolution", " API Usage Model", " API Evolution", " API Usage Adaptation", " Program Differencing"], "paper_abstract": "Reusing existing library components is essential for reducing the cost of software development and maintenance. When library components evolve to accommodate new feature requests, to fix bugs, or to meet new standards, the clients of software libraries often need to make corresponding changes to correctly use the updated libraries. Existing API usage adaptation techniques support simple adaptation such as replacing the target of calls to a deprecated API, however, cannot handle complex adaptations such as creating a new object to be passed to a different API method, or adding an exception handling logic that surrounds the updated API method calls. This paper presents LIBSYNC that guides developers in adapting API usage code by learning complex API usage adaptation patterns from other clients that already migrated to a new library version (and also from the API usages within the library's test code). LIBSYNC uses several graph-based techniques (1) to identify changes to API declarations by comparing two library versions, (2) to extract associated API usage skeletons before and after library migration, and (3) to compare the extracted API usage skeletons to recover API usage adaptation patterns. Using the learned adaptation patterns, LIBSYNC recommends the locations and edit operations for adapting API usages. The evaluation of LIBSYNC on real-world software systems shows that it is highly correct and useful with a precision of 100% and a recall of 91%.", "paper_title": "A Graph-based Approach to API Usage Adaptation", "paper_id": "WOS:000286595800020"}