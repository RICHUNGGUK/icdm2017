{"auto_keywords": [{"score": 0.0317853051857015, "phrase": "computational_contracts"}, {"score": 0.00481495049065317, "phrase": "software_contracts"}, {"score": 0.004676575291629554, "phrase": "important_role"}, {"score": 0.004564291332315995, "phrase": "robust_software"}, {"score": 0.004520132822496416, "phrase": "contract_systems"}, {"score": 0.004411588377842043, "phrase": "statically_typed_languages"}, {"score": 0.004263972370406983, "phrase": "dynamically-typed_programming_languages"}, {"score": 0.004161553532799662, "phrase": "higher-order_contracts"}, {"score": 0.004081385289516914, "phrase": "black-box_approach"}, {"score": 0.0034760655218366, "phrase": "access_permissions"}, {"score": 0.003200045185608395, "phrase": "behavioural_runtime_validation"}, {"score": 0.0031079352545607267, "phrase": "higherorder_programming"}, {"score": 0.002931569771634119, "phrase": "contract_model"}, {"score": 0.002903161412792026, "phrase": "blame_assignment"}, {"score": 0.002861062731782219, "phrase": "higher-order_setting"}, {"score": 0.0028058765785670546, "phrase": "systematic_way"}, {"score": 0.0027651847105654363, "phrase": "temporal_contracts"}, {"score": 0.002355962976725561, "phrase": "scheme"}, {"score": 0.002331781764406665, "phrase": "ambienttalk"}, {"score": 0.0021674482571326283, "phrase": "prototype-based_programming"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Higher-order contracts", " Languages", " Design", " Reliability", " Theory"], "paper_abstract": "Software contracts have proven to play an important role for the development of robust software. Contract systems are widely adopted in statically typed languages and are currently finding their entrance in dynamically-typed programming languages. Most research on higher-order contracts has adopted a black-box approach where only input and output are checked. These systems cannot check many interesting concerns about the behaviour of a function. Examples include prohibiting or ensuring that certain functions are called, checking access permissions, time or memory constraints, interaction protocols, etc. To address this need for behavioural runtime validation, while preserving support for higherorder programming, we introduce the notion of computational contracts. Computational contracts is a contract model with blame assignment in a higher-order setting that provides a systematic way to specify temporal contracts over objects and functions and their possibly higher-order arguments. We show various applications of computational contracts, and explain how to assign blame in case of a violation. Computational contracts have been integrated in both Scheme and AmbientTalk, a dynamically-typed object-oriented language built upon the principles of prototype-based programming. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Computational contracts", "paper_id": "WOS:000347741200004"}