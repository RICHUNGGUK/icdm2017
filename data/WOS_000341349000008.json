{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_ecosystems"}, {"score": 0.04406081498856465, "phrase": "variability_mechanisms"}, {"score": 0.0055818633521437355, "phrase": "large_free_markets"}, {"score": 0.00457361957857233, "phrase": "android"}, {"score": 0.00438921882244081, "phrase": "desired_functionality"}, {"score": 0.004344292058151148, "phrase": "large_variety"}, {"score": 0.004028525144566374, "phrase": "software_product_lines"}, {"score": 0.003919459003028067, "phrase": "conceptual_successors"}, {"score": 0.0037100724714897084, "phrase": "empirical_understanding"}, {"score": 0.0036469533983843755, "phrase": "successful_software_ecosystems"}, {"score": 0.003572621286677047, "phrase": "five_ecosystems"}, {"score": 0.0035118324133358706, "phrase": "linux_kernel"}, {"score": 0.0034284557556382815, "phrase": "qualitative_analysis"}, {"score": 0.0032675746199502614, "phrase": "conceptual_framework"}, {"score": 0.0032340913850061764, "phrase": "ecosystem-specific_aspects"}, {"score": 0.0032009501549788576, "phrase": "common_terminology"}, {"score": 0.003168147459025106, "phrase": "quantitative_analysis"}, {"score": 0.0031249312057114237, "phrase": "growth_rates"}, {"score": 0.0030929051195273715, "phrase": "-most_importantly-dependency_structures"}, {"score": 0.0029680398526914565, "phrase": "rich_dependency_languages"}, {"score": 0.002947723206640026, "phrase": "variability_descriptions"}, {"score": 0.0028678338651577056, "phrase": "abstract_capabilities"}, {"score": 0.00281900316527787, "phrase": "concrete_variability_units"}, {"score": 0.002761499542632865, "phrase": "fast-growing_ecosystems"}, {"score": 0.002705165729333657, "phrase": "variability_models"}, {"score": 0.002668248039798779, "phrase": "system-wide_abstractions"}, {"score": 0.0026138115448726567, "phrase": "centralized_variability_management"}, {"score": 0.0024996360740525284, "phrase": "latter_ecosystems"}, {"score": 0.002440231768165477, "phrase": "common_vocabularies"}, {"score": 0.002423519259896573, "phrase": "dynamic_discovery"}, {"score": 0.002382235844852208, "phrase": "strong_encapsulation"}, {"score": 0.002333620799300123, "phrase": "uniform_distribution_channels"}, {"score": 0.002278152865899792, "phrase": "specialized_mechanisms"}, {"score": 0.002201187194326849, "phrase": "product_lines"}, {"score": 0.002148860300945803, "phrase": "new_discipline_variability_encouragement"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software ecosystems", " Empirical software engineering", " Software product lines", " Variability management", " Mining software repositories"], "paper_abstract": "Context: Software ecosystems are increasingly popular for their economic, strategic, and technical advantages. Application platforms such as Android or iOS allow users to highly customize a system by selecting desired functionality from a large variety of assets. This customization is achieved using variability mechanisms. Objective: Variability mechanisms are well-researched in the context of software product lines. Although software ecosystems are often seen as conceptual successors, the technology that sustains their success and growth is much less understood. Our objective is to improve empirical understanding of variability mechanisms used in successful software ecosystems. Method: We analyze five ecosystems, ranging from the Linux kernel through Eclipse to Android. A qualitative analysis identifies and characterizes variability mechanisms together with their organizational context. This analysis leads to a conceptual framework that unifies ecosystem-specific aspects using a common terminology. A quantitative analysis investigates scales, growth rates, and-most importantly-dependency structures of the ecosystems. Results: In all the studied ecosystems, we identify rich dependency languages and variability descriptions that declare many direct and indirect dependencies. Indirect dependencies to abstract capabilities, as opposed to concrete variability units, are used predominantly in fast-growing ecosystems. We also find that variability models-while providing system-wide abstractions over code work best in centralized variability management and are, thus, absent in ecosystems with large free markets. These latter ecosystems tend to emphasize maintaining capabilities and common vocabularies, dynamic discovery, and binding with strong encapsulation of contributions, together with uniform distribution channels. Conclusion: The use of specialized mechanisms in software ecosystems with large free markets, as opposed to software product lines, calls for recognition of a new discipline variability encouragement. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Variability mechanisms in software ecosystems", "paper_id": "WOS:000341349000008"}