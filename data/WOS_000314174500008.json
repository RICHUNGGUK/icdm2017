{"auto_keywords": [{"score": 0.044728827124546816, "phrase": "fault_detection"}, {"score": 0.014732193806739523, "phrase": "test_cases"}, {"score": 0.009926503268075598, "phrase": "test_suite"}, {"score": 0.00481495049065317, "phrase": "dependency_structures"}, {"score": 0.004731492618963217, "phrase": "functional_test_suites"}, {"score": 0.004690305164360866, "phrase": "test_case_prioritization"}, {"score": 0.0041136473765874815, "phrase": "earlier_feedback"}, {"score": 0.00407781620412982, "phrase": "system_developers"}, {"score": 0.003607630811220324, "phrase": "functional_dependencies"}, {"score": 0.0031223774204093713, "phrase": "test_case_prioritization_techniques"}, {"score": 0.003068166587650604, "phrase": "dependency_information"}, {"score": 0.002823207272381655, "phrase": "test_ordering"}, {"score": 0.002541469965286169, "phrase": "complex_interactions"}, {"score": 0.002464709648714996, "phrase": "fault_detection_rate"}, {"score": 0.0024218895273910943, "phrase": "arbitrary_test_orderings"}, {"score": 0.0024007585788965655, "phrase": "empirical_evaluations"}, {"score": 0.0023798115577749225, "phrase": "six_systems"}, {"score": 0.0023487324083283205, "phrase": "industry_use"}, {"score": 0.0021801135036476136, "phrase": "untreated_order"}, {"score": 0.0021610874773389096, "phrase": "random_orders"}, {"score": 0.0021328586481696157, "phrase": "test_suites"}, {"score": 0.0021049977753042253, "phrase": "existing\"_coarse-grained\"_techniques"}], "paper_keywords": ["Software engineering", " testing and debugging", " test execution"], "paper_abstract": "Test case prioritization is the process of ordering the execution of test cases to achieve a certain goal, such as increasing the rate of fault detection. Increasing the rate of fault detection can provide earlier feedback to system developers, improving fault fixing activity and, ultimately, software delivery. Many existing test case prioritization techniques consider that tests can be run in any order. However, due to functional dependencies that may exist between some test cases-that is, one test case must be executed before another-this is often not the case. In this paper, we present a family of test case prioritization techniques that use the dependency information from a test suite to prioritize that test suite. The nature of the techniques preserves the dependencies in the test ordering. The hypothesis of this work is that dependencies between tests are representative of interactions in the system under test, and executing complex interactions earlier is likely to increase the fault detection rate, compared to arbitrary test orderings. Empirical evaluations on six systems built toward industry use demonstrate that these techniques increase the rate of fault detection compared to the rates achieved by the untreated order, random orders, and test suites ordered using existing\" coarse-grained\" techniques based on function coverage.", "paper_title": "Using Dependency Structures for Prioritization of Functional Test Suites", "paper_id": "WOS:000314174500008"}