{"auto_keywords": [{"score": 0.03423057083405171, "phrase": "language_constructs"}, {"score": 0.00481495049065317, "phrase": "time-aware_stream_processing_applications"}, {"score": 0.004757643419056999, "phrase": "automatic_parallelization"}, {"score": 0.004701015188740582, "phrase": "nested_loop_programs"}, {"score": 0.004535124351828787, "phrase": "attractive_method"}, {"score": 0.004454377387615279, "phrase": "embedded_real-time_stream_processing_applications"}, {"score": 0.003999089046152065, "phrase": "dependent_functional_behavior"}, {"score": 0.0037216229812089686, "phrase": "time_dependent_behavior"}, {"score": 0.0034220655476652683, "phrase": "independent_implementation"}, {"score": 0.0032036590920314725, "phrase": "temporal_semantics"}, {"score": 0.003053598205821532, "phrase": "time_dependent_applications"}, {"score": 0.002945669860541221, "phrase": "corresponding_data-driven_implementation"}, {"score": 0.0028076592725295646, "phrase": "multi-core_system"}, {"score": 0.0027246967293115343, "phrase": "time-aware_language_constructs"}, {"score": 0.0023451553255837317, "phrase": "media_access_control"}, {"score": 0.0023173482410693887, "phrase": "mac"}, {"score": 0.0021049977753042253, "phrase": "introduced_concepts"}], "paper_keywords": ["Languages", " Design", " Automatic Parallelization", " Multi-core", " Real-time", " Time-aware"], "paper_abstract": "Automatic parallelization of Nested Loop Programs (NLPs) is an attractive method to create embedded real-time stream processing applications for multi-core systems. However, the description and parallelization of applications with a time dependent functional behavior has not been considered in NLPs. In such a description, semantic information about time dependent behavior must be made available for the compiler, such that an optimized time independent implementation can be generated automatically. This article introduces language constructs with temporal semantics to NLPs. Using these language constructs, time dependent applications can be specified and a corresponding data-driven implementation can be generated for use on a multi-core system. Despite that these time-aware language constructs can be data-dependent, the application remains functionally deterministic. Pipelining is exploited to increase the throughput of an application. The media access control (MAC) protocol of an IEEE 802.11p WLAN transceiver is used to illustrate the relevance and applicability of the introduced concepts.", "paper_title": "Sequential Specification of Time-Aware Stream Processing Applications", "paper_id": "WOS:000316414200004"}