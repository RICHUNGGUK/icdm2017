{"auto_keywords": [{"score": 0.0471650770544538, "phrase": "program_data"}, {"score": 0.015719716506582538, "phrase": "approximate_computing"}, {"score": 0.004761968711051715, "phrase": "approximation_based_programming_paradigm"}, {"score": 0.004657739551687038, "phrase": "error-resilient_applications"}, {"score": 0.004606479650820579, "phrase": "low_power_embedded_devices"}, {"score": 0.004390764654147291, "phrase": "better_energy_efficiency"}, {"score": 0.0040186038781533946, "phrase": "application's_accuracy"}, {"score": 0.003816197777388722, "phrase": "energy_efficiency"}, {"score": 0.003774164192882704, "phrase": "attractive_trade-off"}, {"score": 0.003705130724701598, "phrase": "application's_domain"}, {"score": 0.0036778708850237814, "phrase": "recent_works"}, {"score": 0.0036508108698357932, "phrase": "source_code_annotations"}, {"score": 0.003623949225126944, "phrase": "type_qualifiers"}, {"score": 0.003584025547693836, "phrase": "safe_approximate_computation"}, {"score": 0.0034034331737042363, "phrase": "source_codes"}, {"score": 0.0032800186243040663, "phrase": "real-world_applications"}, {"score": 0.003196292402522254, "phrase": "source_code"}, {"score": 0.003035177667751495, "phrase": "novel_sensitivity_analysis"}, {"score": 0.0028715299874549245, "phrase": "asac"}, {"score": 0.0026768142335374156, "phrase": "program_output"}, {"score": 0.0022665781920241245, "phrase": "manual_annotations"}, {"score": 0.0021442819603609835, "phrase": "acceptable_qos_threshold"}, {"score": 0.0021049977753042253, "phrase": "non-critical_data"}], "paper_keywords": ["approximate computing", " power-aware computing", " automatic programming", " sensitivity analysis"], "paper_abstract": "The approximation based programming paradigm is especially attractive for developing error-resilient applications, targeting low power embedded devices. It allows for program data to be computed and stored approximately for better energy efficiency. The duration of battery in the smartphones, tablets, etc. is generally more of a concern to users than an application's accuracy or fidelity beyond certain acceptable quality of service. Therefore, relaxing accuracy to improve energy efficiency is an attractive trade-off when permissible by the application's domain. Recent works suggest source code annotations and type qualifiers to facilitate safe approximate computation and data manipulation. It requires rewriting of programs or the availability of source codes for annotations. This may not be feasible as real-world applications tend to be large, with source code that is not readily available. In this paper, we propose a novel sensitivity analysis that automatically generates annotations for programs for the purpose of approximate computing. Our framework, ASAC, extracts information about the sensitivity of the output with respect to program data. We show that the program output is sensitive to only a subset of program data that we deem critical, and hence must be precise. The rest of the data can be computed and stored approximately. We evaluated our analysis on a range of applications, and achieved a 86% accuracy compared to manual annotations by programmers. We validated our analysis by showing that the applications are within the acceptable QoS threshold if we approximate the non-critical data.", "paper_title": "ASAC: Automatic Sensitivity Analysis for Approximate Computing", "paper_id": "WOS:000341937800012"}