{"auto_keywords": [{"score": 0.04916809664432026, "phrase": "sequence_diagrams"}, {"score": 0.010535560055371063, "phrase": "suffix_tree"}, {"score": 0.00481495049065317, "phrase": "tree-based_approach"}, {"score": 0.004651271219032404, "phrase": "core_artefacts"}, {"score": 0.004644968360894313, "phrase": "proposed_approach"}, {"score": 0.004615656893404919, "phrase": "software_development"}, {"score": 0.004323690117778359, "phrase": "big_concern"}, {"score": 0.004192730391924712, "phrase": "software_models"}, {"score": 0.003750260412839128, "phrase": "initial_attempt"}, {"score": 0.003459191419478298, "phrase": "special_preprocessing"}, {"score": 0.002875678729214611, "phrase": "separate_reusable_sequence_diagram"}, {"score": 0.0028100102841877835, "phrase": "traditional_construction_algorithm"}, {"score": 0.002788454815865172, "phrase": "suffix_trees"}, {"score": 0.0027458373015999916, "phrase": "special_algorithm"}, {"score": 0.002703869368554536, "phrase": "longest_common_prefixes"}, {"score": 0.0023995846112991625, "phrase": "six_industrial_applications"}, {"score": 0.0022474806085983536, "phrase": "main_contribution"}, {"score": 0.0021294699637639564, "phrase": "prototype_implementation"}, {"score": 0.0021049977753042253, "phrase": "initial_evaluation"}], "paper_keywords": [""], "paper_abstract": "Models are core artefacts in software development and maintenance. Consequently, quality of models, especially maintainability and extensibility, becomes a big concern for most non-trivial applications. For some reasons, software models usually contain some duplications. These duplications had better be detected and removed because the duplications may reduce maintainability, extensibility and reusability of models. As an initial attempt to address the issue, the author propose an approach in this study to detecting duplications in sequence diagrams. With special preprocessing, the author convert 2-dimensional (2-D) sequence diagrams into an 1-D array. Then the author construct a suffix tree for the array. With the suffix tree, duplications are detected and reported. To ensure that every duplication detected with the suffix tree can be extracted as a separate reusable sequence diagram, the author revise the traditional construction algorithm of suffix trees by proposing a special algorithm to detect the longest common prefixes of suffixes. The author also probe approaches to removing duplications. The proposed approach has been implemented in DuplicationDetector. With the implementation, the author evaluated the proposed approach on six industrial applications. Evaluation results suggest that the approach is effective in detecting duplications in sequence diagrams. The main contribution of the study is an approach to detecting duplications in sequence diagrams, a prototype implementation and an initial evaluation.", "paper_title": "Suffix tree-based approach to detecting duplications in sequence diagrams", "paper_id": "WOS:000293379300004"}