{"auto_keywords": [{"score": 0.0386284122510087, "phrase": "source_code"}, {"score": 0.02322730111336097, "phrase": "design-pattern_instances"}, {"score": 0.008233492158936888, "phrase": "design_patterns"}, {"score": 0.004646088032529303, "phrase": "source-code_comprehensibility"}, {"score": 0.004392565073466714, "phrase": "software_maintenance"}, {"score": 0.004303830426772906, "phrase": "explicit_specification"}, {"score": 0.003351381374975648, "phrase": "different_experience"}, {"score": 0.00290473242917264, "phrase": "nontrivial_chunk"}, {"score": 0.002860546817196148, "phrase": "open-source_software_system"}, {"score": 0.002622528664187849, "phrase": "graphical_or_textual_representations"}, {"score": 0.0024414225109100672, "phrase": "uml_class_diagrams"}, {"score": 0.00240426758768164, "phrase": "documented_instances"}, {"score": 0.0021049977753042253, "phrase": "adequate_level"}], "paper_keywords": ["Design", " Documentation", " Human Factors", " Design patterns", " controlled experiment", " maintenance", " replications", " software models", " source-code comprehension"], "paper_abstract": "Design patterns are recognized as a means to improve software maintenance by furnishing an explicit specification of class and object interactions and their underlying intent [Gamma et al. 1995]. Only a few empirical investigations have been conducted to assess whether the kind of documentation for design patterns implemented in source code affects its comprehensibility. To investigate this aspect, we conducted a family of four controlled experiments with 88 participants having different experience (i.e., professionals and Bachelor, Master, and PhD students). In each experiment, the participants were divided into three groups and asked to comprehend a nontrivial chunk of an open-source software system. Depending on the group, each participant was, or was not, provided with graphical or textual representations of the design patterns implemented within the source code. We graphically documented design-pattern instances with UML class diagrams. Textually documented instances are directly reported source code as comments. Our results indicate that documenting design-pattern instances yields an improvement in correctness of understanding source code for those participants with an adequate level of experience.", "paper_title": "Documenting Design-Pattern Instances: A Family of Experiments on Source-Code Comprehensibility", "paper_id": "WOS:000354826200002"}