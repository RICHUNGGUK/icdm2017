{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "certifying_computations"}, {"score": 0.004750178261675602, "phrase": "formal_verification"}, {"score": 0.00468627326602559, "phrase": "complex_algorithms"}, {"score": 0.004262273304740847, "phrase": "current_automatic_verification_tools"}, {"score": 0.00414830454375092, "phrase": "intricate_mathematical_theorems"}, {"score": 0.004092463367307375, "phrase": "certifying_algorithms"}, {"score": 0.0034311578789991363, "phrase": "original_algorithm"}, {"score": 0.003057503388220776, "phrase": "current_tools"}, {"score": 0.0026157259734105, "phrase": "automatic_verifier_vcc"}, {"score": 0.0024440836179156593, "phrase": "interactive_theorem"}, {"score": 0.00237861522566195, "phrase": "high-level_mathematical_properties"}, {"score": 0.002148315508445588, "phrase": "typical_examples"}, {"score": 0.0021049977753042253, "phrase": "industrial-level_and_widespread_algorithmic_library_leda."}], "paper_keywords": ["Software verification", " Certifying algorithms", " Certifying computations", " Formal verification", " VCC", " Isabelle", " Interactive theorem proving", " Automatic code verification"], "paper_abstract": "Formal verification of complex algorithms is challenging. Verifying their implementations goes beyond the state of the art of current automatic verification tools and usually involves intricate mathematical theorems. Certifying algorithms compute in addition to each output a witness certifying that the output is correct. A checker for such a witness is usually much simpler than the original algorithm-yet it is all the user has to trust. The verification of checkers is feasible with current tools and leads to computations that can be completely trusted. We describe a framework to seamlessly verify certifying computations. We use the automatic verifier VCC for establishing the correctness of the checker and the interactive theorem prover Isabelle/HOL for high-level mathematical properties of algorithms. We demonstrate the effectiveness of our approach by presenting the verification of typical examples of the industrial-level and widespread algorithmic library LEDA.", "paper_title": "A Framework for the Verification of Certifying Computations", "paper_id": "WOS:000331656500001"}