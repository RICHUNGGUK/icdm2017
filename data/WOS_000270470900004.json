{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-based_dsms"}, {"score": 0.0046781613377273774, "phrase": "binary_code"}, {"score": 0.004311241567238011, "phrase": "completely_software-based_framework"}, {"score": 0.004050161917889161, "phrase": "dsm"}, {"score": 0.003916098498242888, "phrase": "dsm_systems"}, {"score": 0.0037683358267785435, "phrase": "cluster_nodes"}, {"score": 0.0036788184374592706, "phrase": "transfers_data"}, {"score": 0.0035914198812657897, "phrase": "storage_node"}, {"score": 0.0035399770257915466, "phrase": "local_node"}, {"score": 0.003325410433297401, "phrase": "dynamic_binary_rewriter"}, {"score": 0.003262035294895737, "phrase": "access_behavior"}, {"score": 0.003215295260684715, "phrase": "application_and_place_prefetches"}, {"score": 0.0029343925814926787, "phrase": "different_types"}, {"score": 0.0029062860108533374, "phrase": "access_patterns"}, {"score": 0.0028235667474151714, "phrase": "memory_access_behavior"}, {"score": 0.0025398521156505425, "phrase": "application's_behavior"}, {"score": 0.0023743009016047424, "phrase": "manual_prefetching"}, {"score": 0.002251813863195168, "phrase": "performance_gains"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["prefetching", " distributed shared memory", " cluster computing"], "paper_abstract": "Dynamic optimizers modify the binary code of programs at runtime by profiling and optimizing certain aspects of the execution. We present a completely software-based framework that dynamically optimizes programs for object-based distributed shared memory (DSM) systems on clusters. In DSM systems, reducing the number of messages between cluster nodes is crucial. Prefetching transfers data in advance from the storage node to the local node so that communication is minimized. Our framework uses a profiler and a dynamic binary rewriter that monitor the access behavior of the application and place prefetches where they are beneficial to speed up the application. In addition, we use two distinct predictors to handle different types of access patterns. A meta-predictor analyzes the memory access behavior and dynamically enables one of the predictors. Our system also adapts the number of prefetches per request to best fit the application's behavior. The evaluation shows that the performance of our system is better than the manual prefetching. The number of messages sent decreases by up to 90%. Performance gains of up to 80% can be observed on benchmarks. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "A meta-predictor framework for prefetching in object-based DSMs", "paper_id": "WOS:000270470900004"}