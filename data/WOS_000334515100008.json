{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "deforming_cables"}, {"score": 0.004568326972997448, "phrase": "similar_objects"}, {"score": 0.004466519142879166, "phrase": "important_part"}, {"score": 0.004399905285945236, "phrase": "numerous_models"}, {"score": 0.004334280585565239, "phrase": "computational_biology"}, {"score": 0.00396050388346298, "phrase": "hair_modeling"}, {"score": 0.003901407184706592, "phrase": "computer_graphics"}, {"score": 0.003459191419478298, "phrase": "deforming_cable"}, {"score": 0.003407549468745519, "phrase": "linear_segments"}, {"score": 0.0032817813775647756, "phrase": "sweep-and-prune_algorithm"}, {"score": 0.0028021527740710508, "phrase": "existing_algorithms"}, {"score": 0.0026986685585382347, "phrase": "high_proportion"}, {"score": 0.0025219085140220773, "phrase": "multi-threaded_version"}, {"score": 0.002286781334850213, "phrase": "worst-case_bounds"}], "paper_keywords": ["Bounding volume hierarchy", " Sweep-and-prune", " Self-collision detection", " Cable simulation"], "paper_abstract": "Detecting self-collision for cables and similar objects is an important part of numerous models in computational biology (protein chains), robotics (electric cables), hair modeling, computer graphics, etc. In this paper the 1D sweep-and-prune algorithm for detecting self-collisions of a deforming cable comprising linear segments is investigated. The sweep-and-prune algorithm is compared with other state-of-the-art self-collision detection algorithms for deforming cables and is shown to be up to an order of magnitude faster than existing algorithms for cables with a high proportion of segments moving. We also present a multi-threaded version of the algorithm and investigate its performance. In addition, we present worst-case bounds for 1D sweep-and-prune algorithms whereby the colliding objects do not exceed a certain object density, and apply these results to deforming cables.", "paper_title": "1D sweep-and-prune self-collision detection for deforming cables", "paper_id": "WOS:000334515100008"}