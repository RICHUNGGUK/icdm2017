{"auto_keywords": [{"score": 0.049248469394552366, "phrase": "anonymous_systems"}, {"score": 0.04778714188575569, "phrase": "unique_identity"}, {"score": 0.0075195159033616555, "phrase": "first_implementation"}, {"score": 0.00481495049065317, "phrase": "multiple_leaders"}, {"score": 0.004681971826924847, "phrase": "classical_distributed_systems"}, {"score": 0.0045208777171271254, "phrase": "new_distributed_systems"}, {"score": 0.003957477564354679, "phrase": "computational_power"}, {"score": 0.0039024014688338964, "phrase": "huge_number"}, {"score": 0.003689628075766217, "phrase": "anonymous_distributed_systems"}, {"score": 0.0035129562812850784, "phrase": "classical_and_anonymous_asynchronous"}, {"score": 0.0033800778203837757, "phrase": "impossibility_result"}, {"score": 0.0033564619316337634, "phrase": "failure_detectors"}, {"score": 0.003206916619690171, "phrase": "weakest_failure_detector_class"}, {"score": 0.003151184191185831, "phrase": "classical_asynchronous_systems"}, {"score": 0.0030002172602367682, "phrase": "anonymous_version"}, {"score": 0.002948066398723126, "phrase": "weakest_failure_detector"}, {"score": 0.002787181295054319, "phrase": "open_question"}, {"score": 0.002729133029776093, "phrase": "important_drawback"}, {"score": 0.002473786357109046, "phrase": "failure_detector_class"}, {"score": 0.002380120876826732, "phrase": "process_crashes"}, {"score": 0.0021049977753042253, "phrase": "anonymous_asynchronous_systems"}], "paper_keywords": ["Failure detectors", " Consensus", " Anonymity", " Fault tolerance", " Anonymous omega"], "paper_abstract": "In classical distributed systems, each process has a unique identity. Today, new distributed systems have emerged where a unique identity is not always possible to be assigned to each process. For example, in many sensor networks a unique identity is not possible to be included in each device due to its small storage capacity, reduced computational power, or the huge number of devices to be identified. In these cases, we have to work with anonymous distributed systems where processes cannot be identified. Consensus cannot be solved in classical and anonymous asynchronous distributed systems where processes can crash. To bypass this impossibility result, failure detectors are added to these systems. It is known that is the weakest failure detector class for solving consensus in classical asynchronous systems when a majority of processes never crashes. Although was introduced as an anonymous version of to find the weakest failure detector in anonymous systems to solve consensus when a majority of processes never crashes is nowadays an open question. Furthermore, has the important drawback that it is not implementable. Very recently, has been introduced as a counterpart of for anonymous systems. In this paper, we show that the failure detector class is strictly weaker than (i.e., provides less information about process crashes than ). We also present in this paper the first implementation of (hence, we also show that is implementable), and, finally, we include the first implementation of consensus in anonymous asynchronous systems augmented with and where a majority of processes does not crash.", "paper_title": "Eventual election of multiple leaders for solving consensus in anonymous systems", "paper_id": "WOS:000361531500004"}