{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "helper_thread"}, {"score": 0.00927976633225404, "phrase": "control_parameters"}, {"score": 0.009125300442710184, "phrase": "traditional_manual_methods"}, {"score": 0.004681525814235883, "phrase": "chip_multi-processor"}, {"score": 0.004450568197899267, "phrase": "irregular_data-intensive_applications"}, {"score": 0.004351595642056769, "phrase": "helper_thread_prefetching_quality"}, {"score": 0.004044822781630218, "phrase": "better_values"}, {"score": 0.003932654396285872, "phrase": "time-consuming_and_complicated_enumeration_process"}, {"score": 0.003802135020791801, "phrase": "better_parameter_values"}, {"score": 0.0036347979916389467, "phrase": "control_framework"}, {"score": 0.003594123364051622, "phrase": "hpcf"}, {"score": 0.0034944094552943, "phrase": "dynamic_behavior"}, {"score": 0.00345530020388352, "phrase": "irregular_application"}, {"score": 0.0033974527047473044, "phrase": "proposed_hpcf"}, {"score": 0.0033218213825698417, "phrase": "commodity_multi-core_platforms"}, {"score": 0.003175556211659149, "phrase": "olden"}, {"score": 0.0031223774204093713, "phrase": "scalable_synthetic_compact_application"}, {"score": 0.00293487292076612, "phrase": "proposed_approach"}, {"score": 0.002853396755102163, "phrase": "performance_gain"}, {"score": 0.0027123819773059127, "phrase": "manual_best_parameter_values"}, {"score": 0.00266693888510356, "phrase": "performance_improvements"}, {"score": 0.002637082357935436, "phrase": "mst"}, {"score": 0.002607532551439309, "phrase": "mcf"}, {"score": 0.0022270182923887012, "phrase": "parameter_values"}, {"score": 0.0021049977753042253, "phrase": "hpcf_tool"}], "paper_keywords": ["Parameter-value optimization", " Data-intensive computing", " Helper thread prefetching", " Chip multi-processor"], "paper_abstract": "Helper thread prefetching can improve performance of irregular data-intensive applications. However, helper thread prefetching quality depends on the values of control parameters. Adopting traditional manual methods to find the better values of control parameters is a time-consuming and complicated enumeration process. For selecting dynamically the better parameter values, this paper proposes a helper thread prefetching control framework (HPCF) based on the dynamic behavior of irregular application. The proposed HPCF is evaluated on commodity multi-core platforms by using selected benchmarks from SPEC2006, Olden, and Scalable Synthetic Compact Application #2 (SSCA2). Results show that the proposed approach is effective, the performance gain is similar to skip helper thread prefetching with the manual best parameter values. The performance improvements for Mst, Mcf, and SSCA2 benchmarks are 34.5, 18.9, and 21.4 %, respectively. More importantly, compared with traditional manual methods, a helper thread does not input the parameter values manually and may be quickly solved by using the HPCF tool.", "paper_title": "Helper Thread Prefetching Control Framework on Chip Multi-processor", "paper_id": "WOS:000349887300002"}