{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "throughput"}, {"score": 0.0053549557150984264, "phrase": "workflows"}, {"score": 0.004764859786310636, "phrase": "latency_optimization"}, {"score": 0.004545793387330536, "phrase": "mapping_applications"}, {"score": 0.004498490110526062, "phrase": "parallel_platforms"}, {"score": 0.004428452434981208, "phrase": "challenging_problem"}, {"score": 0.0043367547691560175, "phrase": "simple_application_patterns"}, {"score": 0.0042692243768616455, "phrase": "pipeline_or_fork_graphs"}, {"score": 0.004115697805448384, "phrase": "workflow_applications"}, {"score": 0.0037066895459425824, "phrase": "simplified_model"}, {"score": 0.0036489343475053187, "phrase": "communication_cost"}, {"score": 0.0035361001070845677, "phrase": "exhaustive_list"}, {"score": 0.0034992667091713813, "phrase": "complexity_results"}, {"score": 0.0034628156490003775, "phrase": "different_problem_instances"}, {"score": 0.0034267429854665035, "phrase": "pipeline_or_fork_stages"}, {"score": 0.0032180376288035296, "phrase": "consecutive_data"}, {"score": 0.0031678720736808574, "phrase": "different_processors"}, {"score": 0.0029438813080245544, "phrase": "i.e._the_computation"}, {"score": 0.002542174767860791, "phrase": "simple_model"}, {"score": 0.002387214876538434, "phrase": "inherent_complexity"}, {"score": 0.0023499703712897293, "phrase": "mapping_problem"}, {"score": 0.002301211274459965, "phrase": "polynomial_algorithms"}, {"score": 0.002206700502606511, "phrase": "solid_theoretical_foundations"}, {"score": 0.0021049977753042253, "phrase": "optimization_problems"}], "paper_keywords": ["Pipeline graphs", " Fork graphs", " Scheduling algorithms", " Throughput maximization", " Latency minimization", " Bi-criteria optimization", " Heterogeneous platforms", " Complexity results"], "paper_abstract": "Mapping applications onto parallel platforms is a challenging problem, even for simple application patterns such as pipeline or fork graphs. Several antagonist criteria should be optimized for workflow applications, such as throughput and latency (or a combination). In this paper, we consider a simplified model with no communication cost, and we provide an exhaustive list of complexity results for different problem instances. Pipeline or fork stages can be replicated in order to increase the throughput by sending consecutive data sets onto different processors. In some cases, stages can also be data-parallelized, i.e. the computation of one single data set is shared between several processors. This leads to a decrease of the latency and an increase of the throughput. Some instances of this simple model are shown to be NP-hard, thereby exposing the inherent complexity of the mapping problem. We provide polynomial algorithms for other problem instances. Altogether, we provide solid theoretical foundations for the study of mono-criterion or bi-criteria mapping optimization problems.", "paper_title": "Complexity Results for Throughput and Latency Optimization of Replicated and Data-parallel Workflows", "paper_id": "WOS:000276699200006"}