{"auto_keywords": [{"score": 0.04715783641110325, "phrase": "stema"}, {"score": 0.010612387000973441, "phrase": "java_programs"}, {"score": 0.004603525341738782, "phrase": "new_memory_management_system"}, {"score": 0.004284302478991387, "phrase": "execution_time"}, {"score": 0.004059438255358923, "phrase": "prolific_types"}, {"score": 0.0036443694410100507, "phrase": "special_memory_space"}, {"score": 0.0032716011062067286, "phrase": "memory_reuse"}, {"score": 0.0031277316566463978, "phrase": "prolific_objects"}, {"score": 0.0030171910207671205, "phrase": "improved_cache_locality"}, {"score": 0.002936849401568391, "phrase": "memory_fragmentation"}, {"score": 0.0025202582748972122, "phrase": "experimental_results"}, {"score": 0.0022019274077124795, "phrase": "marksweep"}, {"score": 0.00216263228969761, "phrase": "copyms"}, {"score": 0.0021049981932971273, "phrase": "semispace"}], "paper_keywords": ["experimentation", " languages", " measurement", " performance", " memory allocator", " garbage collector", " mutator", " Java", " object co-location", " memory reuse"], "paper_abstract": "We introduce a new memory management system, STEMA, which can improve the execution time of Java programs. STEMA detects prolific types on-the-fly and co-locates their objects in a special memory space which supports reuse of memory. We argue and show that memory reuse and co-location of prolific objects can result in improved cache locality, reduced memory fragmentation, reduced GC time, and faster object allocation. We evaluate STEMA using 16 benchmarks. Experimental results show that STEMA performs 2.7%, 4.0%, and 8.2% on average better than MarkSweep, CopyMS, and SemiSpace.", "paper_title": "Object co-location and memory reuse for Java programs", "paper_id": "WOS:000252933900004"}