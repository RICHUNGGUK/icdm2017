{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "partial_expressions"}, {"score": 0.004754600386388821, "phrase": "modern_programming_frameworks"}, {"score": 0.00469500313566324, "phrase": "enormous_libraries"}, {"score": 0.0046069985410261746, "phrase": "complex_structures"}, {"score": 0.0044079880067019765, "phrase": "large_part"}, {"score": 0.0043527164193299574, "phrase": "modern_programming"}, {"score": 0.004009894739765119, "phrase": "unfamiliar_part"}, {"score": 0.0038124354878360032, "phrase": "novel_way"}, {"score": 0.0036476222647061243, "phrase": "unknown_api"}, {"score": 0.0030563953060027175, "phrase": "efficient_algorithm"}, {"score": 0.0029990127367275966, "phrase": "likely_completions"}, {"score": 0.0029241700853970013, "phrase": "ranking_scheme"}, {"score": 0.002609770322855842, "phrase": "known_expressions"}, {"score": 0.0025285834281312705, "phrase": "powerful_language"}, {"score": 0.002481085648977411, "phrase": "api_discovery"}, {"score": 0.0023887436047824386, "phrase": "small_impedance_mismatch"}, {"score": 0.002285335999629823, "phrase": "automated_experiment"}, {"score": 0.0021453112313233554, "phrase": "intended_expression"}], "paper_keywords": ["Languages", " Experimentation", " program synthesis", " partial expressions", " code completion", " type-based analysis", " ranking"], "paper_abstract": "Modern programming frameworks provide enormous libraries arranged in complex structures, so much so that a large part of modern programming is searching for APIs that \"surely exist\" somewhere in an unfamiliar part of the framework. We present a novel way of phrasing a search for an unknown API: the programmer simply writes an expression leaving holes for the parts they do not know. We call these expressions partial expressions. We present an efficient algorithm that produces likely completions ordered by a ranking scheme based primarily on the similarity of the types of the APIs suggested to the types of the known expressions. This gives a powerful language for both API discovery and code completion with a small impedance mismatch from writing code. In an automated experiment on mature C# projects, we show our algorithm can place the intended expression in the top 10 choices over 80% of the time.", "paper_title": "Type-Directed Completion of Partial Expressions", "paper_id": "WOS:000307582100025"}