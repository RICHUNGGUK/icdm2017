{"auto_keywords": [{"score": 0.04356314987168927, "phrase": "mce"}, {"score": 0.010612344518808, "phrase": "maximal_cliques"}, {"score": 0.010464798104793714, "phrase": "large_graph"}, {"score": 0.004703291842290037, "phrase": "mapreduce"}, {"score": 0.004637478829869904, "phrase": "highly_uneven_subproblem_sizes"}, {"score": 0.004551199992546761, "phrase": "maximal_clique_enumeration"}, {"score": 0.004362870617347183, "phrase": "maximal_clique"}, {"score": 0.004104456271230213, "phrase": "important_tool"}, {"score": 0.004047020753789236, "phrase": "densely_connected_subgraphs"}, {"score": 0.003990385737207714, "phrase": "numerous_applications"}, {"score": 0.003953068310598579, "phrase": "data_mining"}, {"score": 0.003916098498242888, "phrase": "web_graphs"}, {"score": 0.0038794730876377057, "phrase": "social_networks"}, {"score": 0.003825173769489887, "phrase": "biological_networks"}, {"score": 0.003771631577951067, "phrase": "effective_sequential_methods"}, {"score": 0.0036667768092524576, "phrase": "scalable_parallel_methods"}, {"score": 0.0034984340449789745, "phrase": "new_parallel_algorithm"}, {"score": 0.0034332736827447654, "phrase": "parallel_enumeration_of_cliques"}, {"score": 0.003306559295382181, "phrase": "mapreduce_framework"}, {"score": 0.0032602525602322832, "phrase": "previous_works"}, {"score": 0.0031845067058084583, "phrase": "post-processing_step"}, {"score": 0.003139903872290182, "phrase": "duplicate_and_non-maximal_cliques"}, {"score": 0.003110515172439764, "phrase": "peco"}, {"score": 0.002995677265350124, "phrase": "key_technical_ingredient"}, {"score": 0.002953711377604328, "phrase": "total_ordering"}, {"score": 0.0027916287357898544, "phrase": "novel_way"}, {"score": 0.002726740692380339, "phrase": "balanced_distribution"}, {"score": 0.0026384167183586015, "phrase": "redundant_work"}, {"score": 0.0025409639091476363, "phrase": "hadoop_mapreduce"}, {"score": 0.0023456351719724957, "phrase": "large_real-world_graphs"}, {"score": 0.0021652891317252994, "phrase": "available_parallelism"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Graph mining", " Maximal clique enumeration", " Enumeration algorithm", " MapReduce", " Hadoop", " Parallel algorithm", " Clique", " Load balancing"], "paper_abstract": "We consider Maximal Clique Enumeration (MCE) from a large graph. A maximal clique is perhaps the most fundamental dense substructure in a graph, and MCE is an important tool to discover densely connected subgraphs, with numerous applications to data mining on web graphs, social networks, and biological networks. While effective sequential methods for MCE are known, scalable parallel methods for MCE are still lacking. We present a new parallel algorithm for MCE, Parallel Enumeration of Cliques using Ordering (PECO), designed for the MapReduce framework. Unlike previous works, which required a post-processing step to remove duplicate and non-maximal cliques, PECO enumerates only maximal cliques with no duplicates. The key technical ingredient is a total ordering of the vertices of the graph which is used in a novel way to achieve a load balanced distribution of work, and to eliminate redundant work among processors. We implemented PECO on Hadoop MapReduce, and our experiments on a cluster show that the algorithm can effectively process a variety of large real-world graphs with millions of vertices and tens of millions of maximal cliques, and scales well with the degree of available parallelism. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Mining maximal cliques from a large graph using MapReduce: Tackling highly uneven subproblem sizes", "paper_id": "WOS:000356189400010"}