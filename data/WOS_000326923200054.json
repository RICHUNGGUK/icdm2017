{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.04427410516262621, "phrase": "many-lights_rendering"}, {"score": 0.004412780054037622, "phrase": "gpu-based_out-of-core_rendering_approach"}, {"score": 0.004176194589991187, "phrase": "efficient_and_scalable_rendering_framework"}, {"score": 0.003970439654470374, "phrase": "data_sizes"}, {"score": 0.0037747835341722636, "phrase": "core_memory_storage_size"}, {"score": 0.0037231102027070724, "phrase": "data_management"}, {"score": 0.0034433297275344877, "phrase": "graph_traversal_optimization_problem"}, {"score": 0.0033190180867511605, "phrase": "core_lights"}, {"score": 0.0032886455096627324, "phrase": "geometry_data"}, {"score": 0.0031699005399973496, "phrase": "shading_computations"}, {"score": 0.0031121406603482112, "phrase": "shortest_path"}, {"score": 0.002945081009084692, "phrase": "proposed_data_management"}, {"score": 0.0026986685585382347, "phrase": "cpu_host_memory"}, {"score": 0.0026616868981501006, "phrase": "gpu_device_memory"}, {"score": 0.0025420267431501367, "phrase": "out-of-core_data_preparation"}, {"score": 0.0024842242921857705, "phrase": "optimal_data_layouts"}, {"score": 0.002405496949144104, "phrase": "out-of-core_shading"}, {"score": 0.0023834640793589435, "phrase": "graph-based_data_management"}, {"score": 0.002297327670408112, "phrase": "out-of-core_detailed_geometry"}, {"score": 0.002276283303864666, "phrase": "out-of-core_lights"}, {"score": 0.0022041312401435346, "phrase": "complex_global_illumination_effects"}, {"score": 0.002183938718432764, "phrase": "increased_data_access_coherence"}, {"score": 0.0021342613107011624, "phrase": "magnitude_performance_gain"}, {"score": 0.0021049977753042253, "phrase": "cpu-based_approach"}], "paper_keywords": ["out-of-core", " global illumination", " many-lights", " GPU"], "paper_abstract": "In this paper, we present a GPU-based out-of-core rendering approach under the many-lights rendering framework. Many-lights rendering is an efficient and scalable rendering framework for a large number of lights. But when the data sizes of lights and geometry are both beyond the in-core memory storage size, the data management of these two out-of-core data becomes critical and challenging. In our approach, we formulate such a data management as a graph traversal optimization problem that first builds out-of-core lights and geometry data into a graph, and then guides shading computations by finding a shortest path to visit all vertices in the graph. Based on the proposed data management, we develop a GPU-based out-of-GPU-core rendering algorithm that manages data between the CPU host memory and the GPU device memory. Two main steps are taken in the algorithm: the out-of-core data preparation to pack data into optimal data layouts for the many-lights rendering, and the out-of-core shading using graph-based data management. We demonstrate our algorithm on scenes with out-of-core detailed geometry and out-of-core lights. Results show that our approach generates complex global illumination effects with increased data access coherence and has one order of magnitude performance gain over the CPU-based approach.", "paper_title": "GPU-based Out-of-Core Many-Lights Rendering", "paper_id": "WOS:000326923200054"}