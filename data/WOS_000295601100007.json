{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scratch-pad_memory"}, {"score": 0.009034736694700942, "phrase": "scratch-pad_memory_space"}, {"score": 0.00472961267657106, "phrase": "priority-based_preemptive_multi-task_systems"}, {"score": 0.004579780586951551, "phrase": "primary_goals"}, {"score": 0.004530894050040479, "phrase": "embedded_real-time_domains"}, {"score": 0.0043095378396174125, "phrase": "cache_memory"}, {"score": 0.0041136473765874815, "phrase": "preemptive_multi-task_environment"}, {"score": 0.003940706575253453, "phrase": "fixed-priority-based_preemptive_multi-task_systems"}, {"score": 0.003708033700676924, "phrase": "energy_reduction"}, {"score": 0.0036684182697540382, "phrase": "instruction_memory_subsystems"}, {"score": 0.003616252896285766, "phrase": "spatial_method"}, {"score": 0.00347657813672945, "phrase": "temporal_method"}, {"score": 0.0034394269654205094, "phrase": "running_task"}, {"score": 0.0034148795808317555, "phrase": "entire_scratch-pad_space"}, {"score": 0.0032016639006812826, "phrase": "hybrid_method"}, {"score": 0.003100085797251317, "phrase": "higher_priority_task"}, {"score": 0.003023307182674672, "phrase": "lower_priority_task"}, {"score": 0.002927371124061966, "phrase": "higher_priority_tasks"}, {"score": 0.0028446460307503343, "phrase": "integer_programming_problem"}, {"score": 0.0025546627686955656, "phrase": "real-time_task_scheduling"}, {"score": 0.0024383449794706477, "phrase": "energy_minimization"}, {"score": 0.002377916348320401, "phrase": "rtos-hardware_cooperative_support_mechanism"}, {"score": 0.0022453451864218477, "phrase": "fully_functional_real-time_operating_system"}, {"score": 0.0021049977753042253, "phrase": "conventional_method"}], "paper_keywords": ["scratch-pad memory", " energy optimization", " compiler", " code allocation", " multi-task systems"], "paper_abstract": "Energy minimization has become one of the primary goals in the embedded real-time domains. Consequently, scratch-pad memory has been employed as partial or entire replacement for cache memory due to its better energy efficiency. However, most previous approaches were not applicable to a preemptive multi-task environment. We propose three methods of partitioning and allocation of scratch-pad memory for fixed-priority-based preemptive multi-task systems. The three methods, i.e., spatial, temporal, and hybrid methods, achieve energy reduction in the instruction memory subsystems. With the spatial method, each task occupies its exclusive space in scratch-pad memory. With the temporal method, the running task uses entire scratch-pad space. The content of scratch-pad memory is swapped out as a task executes or gets preempted. The hybrid method is based on the spatial one but a higher priority task can temporarily use the space of lower priority task. The amount of space is prioritized for higher priority tasks. We formulate each method as an integer programming problem that simultaneously determines (1) partitioning of scratch-pad memory space for the tasks, and (2) allocation of program code to scratch-pad memory space for each task. Our methods not only support the real-time task scheduling but also consider aggressively the periods and priorities of tasks for the energy minimization: Additionally, we implement an RTOS-hardware cooperative support mechanism for runtime code allocation to the scratch-pad memory space. We have made the experiments with the fully functional real-time operating system. The experimental results have demonstrated the effectiveness of our techniques. Up to 73% energy reduction compared to a conventional method was achieved.", "paper_title": "Partitioning and Allocation of Scratch-Pad Memory for Energy Minimization of Priority-Based Preemptive Multi-Task Systems", "paper_id": "WOS:000295601100007"}