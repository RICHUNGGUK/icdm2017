{"auto_keywords": [{"score": 0.048970045726729895, "phrase": "malicious_transactions"}, {"score": 0.00481495049065317, "phrase": "static_and_dynamic_recovery"}, {"score": 0.004648609688625397, "phrase": "even_state"}, {"score": 0.004567596860086148, "phrase": "art_database_protection_mechanisms"}, {"score": 0.00438399094249306, "phrase": "malicious_attacks"}, {"score": 0.004257360656055417, "phrase": "database_environment"}, {"score": 0.0038989120088094185, "phrase": "later_transactions"}, {"score": 0.0035915423738916256, "phrase": "traditional_log-based_recovery_schemes"}, {"score": 0.003101503914610488, "phrase": "even_the_unaffected_transactions"}, {"score": 0.0028736379396305596, "phrase": "column_dependency-based_approach"}, {"score": 0.0028069426877159642, "phrase": "affected_transactions"}, {"score": 0.0024236964502593254, "phrase": "database_consistency"}, {"score": 0.002353554841514325, "phrase": "static_recovery_algorithm"}, {"score": 0.0022854384756395116, "phrase": "on-line_version"}, {"score": 0.0021677478798910565, "phrase": "detailed_performance_evaluation"}, {"score": 0.002129877319760485, "phrase": "proposed_scheme"}, {"score": 0.0021049977753042253, "phrase": "tpc-c_benchmark_suite"}], "paper_keywords": ["Database security", " Intrusion", " Recovery", " Transaction dependency graph", " Compensation", " On-line recovery"], "paper_abstract": "Even state of the art database protection mechanisms often fail to prevent occurrence of malicious attacks. Since in a database environment, the modifications made by one transaction may affect the execution of some of the later transactions, it leads to spreading of the damage caused by malicious (bad) transactions. Following traditional log-based recovery schemes, one can rollback (undo) the effect of all the transactions, both malicious as well as non-malicious. In such a scenario, even the unaffected transactions are also rolled back. In this paper, we propose a column dependency-based approach to identify the affected transactions which need to be compensated along with the malicious transactions. To ensure durability, committed non-malicious transactions are then re-executed in a manner that retains database consistency. We present a static recovery algorithm as well as an on-line version of the same and prove their correctness. A detailed performance evaluation of the proposed scheme with TPC-C benchmark suite is also presented.", "paper_title": "A column dependency-based approach for static and dynamic recovery of databases from malicious transactions", "paper_id": "WOS:000274038500004"}