{"auto_keywords": [{"score": 0.04876112166657543, "phrase": "dcc"}, {"score": 0.008016233992914639, "phrase": "dependency_analyses"}, {"score": 0.00481495049065317, "phrase": "noninterference_for_free"}, {"score": 0.004734987730139094, "phrase": "dependency_core_calculus"}, {"score": 0.004306205029641728, "phrase": "information_flow"}, {"score": 0.004211069233133584, "phrase": "key_property"}, {"score": 0.003960101604693806, "phrase": "low-level_observer"}, {"score": 0.0035216195857272403, "phrase": "system_f"}, {"score": 0.0032383707002544755, "phrase": "parametric_polymorphism"}, {"score": 0.0028635111041882956, "phrase": "f-omega"}, {"score": 0.0027535633837592597, "phrase": "observer-sensitive_equivalence"}, {"score": 0.002707741309851526, "phrase": "essential_use"}, {"score": 0.002531933388815139, "phrase": "dcc's_type_system"}, {"score": 0.0023941575109692336, "phrase": "polymorphic_language"}, {"score": 0.002251228220508502, "phrase": "dcc."}, {"score": 0.0022137465420508785, "phrase": "proof_techniques"}, {"score": 0.0021049977753042253, "phrase": "full_abstraction_results"}], "paper_keywords": ["Languages", " Security", " Theory", " Noninterference", " parametricity", " dependency", " security", " information flow", " polymorphism", " logical relations", " secure compilation", " fully abstract compilation"], "paper_abstract": "The dependency core calculus (DCC) is a framework for studying a variety of dependency analyses (e.g., secure information flow). The key property provided by DCC is noninterference, which guarantees that a low-level observer (attacker) cannot distinguish high-level (protected) computations. The proof of noninterference for DCC suggests a connection to parametricity in System F, which suggests that it should be possible to implement dependency analyses in languages with parametric polymorphism. We present a translation from DCC into F-omega and prove that the translation preserves noninterference. To express noninterference in F-omega, we define a notion of observer-sensitive equivalence that makes essential use of both first-order and higher-order polymorphism. Our translation provides insights into DCC's type system and shows how DCC can be implemented in a polymorphic language without loss of the noninterference (security) guarantees available in DCC. Our contributions include proof techniques that should be valuable when proving other secure compilation or full abstraction results.", "paper_title": "Noninterference for Free", "paper_id": "WOS:000367255800010"}