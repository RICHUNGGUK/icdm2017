{"auto_keywords": [{"score": 0.04338533595946324, "phrase": "reorder_buffer"}, {"score": 0.037815462808410714, "phrase": "tlb"}, {"score": 0.01116110207607869, "phrase": "interrupt_handler"}, {"score": 0.00481495049065317, "phrase": "lock-up_free_translation_lookaside_buffers"}, {"score": 0.0047113960612140335, "phrase": "general-purpose_precise_interrupt_mechanisms"}, {"score": 0.004543708337879809, "phrase": "order_processors"}, {"score": 0.00438207073931569, "phrase": "cpu"}, {"score": 0.004339807233454581, "phrase": "handler_instructions"}, {"score": 0.004007083686875716, "phrase": "pipeline-representing_significant_work"}, {"score": 0.003611372092422529, "phrase": "managed_translation_look-aside_buffer"}, {"score": 0.0034575183446164215, "phrase": "novel_method"}, {"score": 0.003350480663660326, "phrase": "first_level_interrupt-handlers"}, {"score": 0.003215476180579496, "phrase": "user-level_code"}, {"score": 0.002961519813246521, "phrase": "exceptional_instruction"}, {"score": 0.002897710777957041, "phrase": "handler_code"}, {"score": 0.0028079547597248604, "phrase": "lock-up_free_tlbs"}, {"score": 0.002754103864198219, "phrase": "append_schemes"}, {"score": 0.00269475174341129, "phrase": "available_reorder_buffer_space"}, {"score": 0.0026430660986106955, "phrase": "performance_model"}, {"score": 0.0026049517737353365, "phrase": "alpha_designers"}, {"score": 0.002586100683947367, "phrase": "palo_alto_design_center"}, {"score": 0.002555012803938138, "phrase": "california"}, {"score": 0.0025120472621109496, "phrase": "performance_impact"}, {"score": 0.002469830206270585, "phrase": "traditional_scheme"}, {"score": 0.0024342079318127423, "phrase": "lined_scheme"}, {"score": 0.0023530698447434308, "phrase": "large_memory_footprints"}, {"score": 0.0022912159969025467, "phrase": "pipeline_state"}, {"score": 0.0022581640371583233, "phrase": "energy_savings"}, {"score": 0.002236394113351282, "phrase": "performance_improvements"}, {"score": 0.0021987994275190314, "phrase": "free_tlbs"}, {"score": 0.002115219801631874, "phrase": "execution_time"}], "paper_keywords": ["reorder-buffer (ROB)", " precise interrupts", " exception handlers", " in-line interrupt", " lock-up free", " translation lookaside buffers (TLBs)", " performance modeling"], "paper_abstract": "The effects of the general-purpose precise interrupt mechanisms in use for the past few decades have received very little attention. When modern out-of-order processors handle interrupts precisely, they typically begin by flushing the pipeline to make the CPU available to execute handler instructions. In doing so, the CPU ends up flushing many instructions that have been brought in to the reorder buffer. In particular, these instructions may have reached a very deep stage in the pipeline-representing significant work that is wasted. In addition, an overhead of several cycles and wastage of energy ( per exception detected) can be expected in refetching and reexecuting the instructions flushed. This paper concentrates on improving the performance of precisely handling software managed translation look-aside buffer (TLB) interrupts, one of the most frequently occurring interrupts. The paper presents a novel method of in-lining the interrupt handler within the reorder buffer. Since the first level interrupt-handlers of TLBs are usually small, they could potentially fit in the reorder buffer along with the user-level code already there. In doing so, the instructions that would otherwise be flushed from the pipe need not be refetched and reexecuted. Additionally, it allows for instructions independent of the exceptional instruction to continue to execute in parallel with the handler code. By in-lining the TLB interrupt handler, this provides lock-up free TLBs. This paper proposes the prepend and append schemes of in-lining the interrupt handler into the available reorder buffer space. The two schemes are implemented on a performance model of the Alpha 21264 processor built by Alpha designers at the Palo Alto Design Center (PADC), California. We compare the overhead and performance impact of handling TLB interrupts by the traditional scheme, the append in-lined scheme, and the prepend in-lined scheme. For small, medium, and large memory footprints, the overhead is quantified by comparing the number and pipeline state of instructions flushed, the energy savings, and the performance improvements. We find that lock- up free TLBs reduce the overhead of refetching and reexecuting the instructions flushed by 30-95 percent, reduce the execution time by 5-25 percent, and also reduce the energy wasted by 30-90 percent.", "paper_title": "In-line interrupt handling and lock-up free translation lookaside buffers (TLBs)", "paper_id": "WOS:000236116200007"}