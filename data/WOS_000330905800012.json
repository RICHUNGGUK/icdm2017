{"auto_keywords": [{"score": 0.032733955867664956, "phrase": "unnecessary_computations"}, {"score": 0.00481495049065317, "phrase": "synchronous_programs"}, {"score": 0.004700468701207975, "phrase": "synchronous_model"}, {"score": 0.0037544644262310525, "phrase": "internal_variables"}, {"score": 0.00319732428387928, "phrase": "future_reaction_steps"}, {"score": 0.002974281028713475, "phrase": "compile-time_optimization_procedure"}, {"score": 0.002636489396049042, "phrase": "current_or_future_computations"}, {"score": 0.0024133533748653033, "phrase": "passive_code"}, {"score": 0.0021738146596180404, "phrase": "reaction_time"}], "paper_keywords": ["Languages", " Performance", " Measurement", " Synchronous languages", " passive code", " dataflow analysis", " static analysis", " optimization"], "paper_abstract": "The synchronous model of computation requires that in every step, inputs are read and outputs are synchronously computed as the reaction of the program. In addition, all internal variables are updated in parallel even though not all of these values might be required for the current and the future reaction steps. To avoid unnecessary computations, we present a compile-time optimization procedure that computes for every variable a condition that determines whether its value is required for current or future computations. In this sense, our optimizations allow us to identify passive code that can be disabled to avoid unnecessary computations and therefore to reduce the reaction time of programs or their energy consumption.", "paper_title": "Passive Code in Synchronous Programs", "paper_id": "WOS:000330905800012"}