{"auto_keywords": [{"score": 0.03377150178570037, "phrase": "worst_case"}, {"score": 0.00481495049065317, "phrase": "online_version"}, {"score": 0.004756805752518494, "phrase": "conflict-free_coloring"}, {"score": 0.00453113241842654, "phrase": "newly_inserted_point"}, {"score": 0.003822003373331997, "phrase": "deterministic_and_randomized_algorithms"}, {"score": 0.00342568771304873, "phrase": "inserted_points"}, {"score": 0.0030953529970646626, "phrase": "simple_algorithm"}, {"score": 0.0024761702541879213, "phrase": "simplest_proposed_algorithm"}, {"score": 0.0023970487263732737, "phrase": "random_order"}, {"score": 0.00235843888868088, "phrase": "incomplete_analysis"}, {"score": 0.0023016843709107297, "phrase": "high_probability"}, {"score": 0.0021049977753042253, "phrase": "relevant_ranges"}], "paper_keywords": ["conflict-free coloring", " online algorithms", " randomized algorithms", " branching processes"], "paper_abstract": "We consider an online version of the conflict-free coloring of a set of points on the line, where each newly inserted point must be assigned a color upon insertion, and at all times the coloring has to be conflict-free, in the sense that in every interval I there is a color that appears exactly once in I. We present deterministic and randomized algorithms for achieving this goal, and analyze their performance, that is, the maximum number of colors that they need to use, as a function of the number n of inserted points. We first show that a natural and simple ( deterministic) approach may perform rather poorly, requiring Omega(root n) colors in the worst case. We then derive two efficient variants of this simple algorithm. The first is deterministic and uses O(log(2) n) colors, and the second is randomized and uses O( log n) colors with high probability. We also show that the O(log(2) n) bound on the number of colors used by our deterministic algorithm is tight on the worst case. We also analyze the performance of the simplest proposed algorithm when the points are inserted in a random order and present an incomplete analysis that indicates that, with high probability, it uses only O(log n) colors. Finally, we show that in the extension of this problem to two dimensions, where the relevant ranges are disks, n colors may be required in the worst case.", "paper_title": "Online conflict-free coloring for intervals", "paper_id": "WOS:000244630600006"}