{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "sequential_java"}, {"score": 0.004513957235071457, "phrase": "multi-core_processors"}, {"score": 0.003267925215811654, "phrase": "parallelization_strategy"}, {"score": 0.0031032109441552287, "phrase": "algebraic_laws"}, {"score": 0.0024586427394152196, "phrase": "specialized_parallel_version"}, {"score": 0.002319458696920282, "phrase": "jgb"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal methods", " Concurrency", " Parallel processing", " Performance evaluation", " Program correctness"], "paper_abstract": "Nowadays multi-core processors can be found everywhere. It is well known that one way of improving performance is by parallelization. In this paper we propose a parallelization strategy for Java using algebraic laws. We perform an experiment with two benchmarks and show that our strategy produces a gain similar to a specialized parallel version provided by the Java Grande Benchmark (JGB). (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Introducing concurrency in sequential Java via laws", "paper_id": "WOS:000286557600007"}