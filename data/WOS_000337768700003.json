{"auto_keywords": [{"score": 0.0455589480943724, "phrase": "ffs"}, {"score": 0.004680851157467745, "phrase": "software_package_freshs"}, {"score": 0.004598933498016774, "phrase": "parallel_simulation"}, {"score": 0.004566567411073082, "phrase": "rare_events"}, {"score": 0.004534428070512318, "phrase": "sampling_techniques"}, {"score": 0.004486640769041646, "phrase": "'splitting'_family"}, {"score": 0.004392565073466714, "phrase": "forward_flux_sampling"}, {"score": 0.004315670715009727, "phrase": "stochastic_process_rare_event_sampling"}, {"score": 0.004136548839735555, "phrase": "rare_event_sampling"}, {"score": 0.004078502325220629, "phrase": "quasi-static_and_full_non-equilibrium_regimes"}, {"score": 0.003909185474360582, "phrase": "underlying_physics"}, {"score": 0.003773449694108617, "phrase": "example_plugins"}, {"score": 0.003681238363808568, "phrase": "popular_md_packages"}, {"score": 0.00364241514972915, "phrase": "lammps"}, {"score": 0.003616766546763106, "phrase": "espresso"}, {"score": 0.0035408501923902477, "phrase": "simple_interface"}, {"score": 0.0033937776228549557, "phrase": "self-written_code"}, {"score": 0.003264316172836322, "phrase": "simulation_program"}, {"score": 0.003229870860371533, "phrase": "modular_structure"}, {"score": 0.003195787852087248, "phrase": "flexible_implementation"}, {"score": 0.003150900886669123, "phrase": "physics_engines"}, {"score": 0.0030847461428168614, "phrase": "objective_comparison"}, {"score": 0.0030630037175103032, "phrase": "different_sampling_algorithms"}, {"score": 0.002988101395789399, "phrase": "optimal_use"}, {"score": 0.0029253546782349875, "phrase": "system_states"}, {"score": 0.0028842551358494823, "phrase": "standard_database_technology"}, {"score": 0.0026494723416072316, "phrase": "high-performance_parallel_hardware"}, {"score": 0.0025846562485378247, "phrase": "even_heterogeneous_networks"}, {"score": 0.0025664295665392203, "phrase": "inexpensive_machines"}, {"score": 0.0025036399134110822, "phrase": "automatic_interface_placement"}, {"score": 0.0024597305738431226, "phrase": "nearly_constant_flux"}, {"score": 0.0022276618873985445, "phrase": "next_interface"}, {"score": 0.002211947103318718, "phrase": "freshs"}, {"score": 0.0021501863832966966, "phrase": "publicly_available_parallelized_rare_event_sampling_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Rare event sampling", " Forward Flux Sampling (FFS)", " Stochastic Process Rare Event Sampling (SPRES)", " GROMACS", " LAMMPS", " ESPResSo", " HPC", " Chemical physics"], "paper_abstract": "We present the software package FRESHS (http://www.freshs.org) for parallel simulation of rare events using sampling techniques from the 'splitting' family of methods. Initially, Forward Flux Sampling (FFS) and Stochastic Process Rare Event Sampling (SPRES) have been implemented. These two methods together make rare event sampling available for both quasi-static and full non-equilibrium regimes. Our framework provides a plugin system for software implementing the underlying physics of the system of interest. At present, example plugins exist for our framework to steer the popular MD packages GROMACS, LAMMPS and ESPResSo, but due to the simple interface of our plugin system, it is also easy to attach other simulation software or self-written code. Use of our framework does not require recompilation of the simulation program. The modular structure allows the flexible implementation of further sampling methods or physics engines and creates a basis for objective comparison of different sampling algorithms. Our code is designed to make optimal use of available compute resources. System states are managed using standard database technology so as to allow checkpointing, scaling and flexible analysis. The communication within the framework uses plain TCP/IP networking and is therefore suited to high-performance parallel hardware as well as to distributed or even heterogeneous networks of inexpensive machines. For FFS we implemented an automatic interface placement that ensures optimal, nearly constant flux through the interfaces. We introduce 'ghost' (or gook-ahead') runs that remedy the bottleneck which occurs when progressing to the next interface. FRESHS is open-source, providing a publicly available parallelized rare event sampling system. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "The Flexible Rare Event Sampling Harness System (FRESHS)", "paper_id": "WOS:000337768700003"}