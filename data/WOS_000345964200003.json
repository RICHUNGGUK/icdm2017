{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "evolutionary_algorithms"}, {"score": 0.005007495632154116, "phrase": "fitness_evaluation"}, {"score": 0.004766683200410046, "phrase": "parameterized_runtime_analysis"}, {"score": 0.004683371330233808, "phrase": "problem_structure"}, {"score": 0.004659835253478786, "phrase": "algorithmic_runtime"}, {"score": 0.00454390917314786, "phrase": "theoretical_understanding"}, {"score": 0.0044644734709113985, "phrase": "parameterized_analysis"}, {"score": 0.004408581547122343, "phrase": "euclidean_traveling_salesperson_problem"}, {"score": 0.004309725894724034, "phrase": "structural_properties"}, {"score": 0.004288059466938456, "phrase": "tsp_instances"}, {"score": 0.004245051445971095, "phrase": "optimization_process"}, {"score": 0.004026208353551013, "phrase": "inner_points"}, {"score": 0.003985816112027955, "phrase": "first_part"}, {"score": 0.0038573081851680656, "phrase": "strictly_black_box"}, {"score": 0.0037707671704262217, "phrase": "euclidean_tsp"}, {"score": 0.003751800058095924, "phrase": "expected_time"}, {"score": 0.003417565253539315, "phrase": "minimum_angle_epsilon"}, {"score": 0.003241242300607129, "phrase": "mixed_mutation_strategy"}, {"score": 0.003192550774552538, "phrase": "permutation_jumps"}, {"score": 0.003144588408756064, "phrase": "upper_bound"}, {"score": 0.0029006629445479095, "phrase": "second_part"}, {"score": 0.0027929100418926725, "phrase": "domain_knowledge"}, {"score": 0.002744000573794144, "phrase": "euclidean_tsp."}, {"score": 0.0026959645528873933, "phrase": "ea"}, {"score": 0.0026554236621262515, "phrase": "m._theile"}, {"score": 0.002595777378885434, "phrase": "traveling_salesperson_problem"}, {"score": 0.0025761937402886954, "phrase": "population-based_evolutionary_algorithm"}, {"score": 0.0025374674652885354, "phrase": "computer_science"}, {"score": 0.002437030866695337, "phrase": "tsp"}, {"score": 0.0024247382451294255, "phrase": "k_inner_points"}, {"score": 0.002282166507956957, "phrase": "dynamic_programming_step"}, {"score": 0.002214048743052355, "phrase": "evolutionary_algorithm"}], "paper_keywords": ["Evolutionary algorithms", " runtime analysis", " parameterized analysis", " combinatorial optimization"], "paper_abstract": "Parameterized runtime analysis seeks to understand the influence of problem structure on algorithmic runtime. In this paper, we contribute to the theoretical understanding of evolutionary algorithms and carry out a parameterized analysis of evolutionary algorithms for the Euclidean traveling salesperson problem (Euclidean TSP). We investigate the structural properties in TSP instances that influence the optimization process of evolutionary algorithms and use this information to bound their runtime. We analyze the runtime in dependence of the number of inner points k. In the first part of the paper, we study a (mu + lambda) EA in a strictly black box setting and show that it can solve the Euclidean TSP in expected time O (n . A(epsilon) . max ((mu/lambda) . n(2), 1) + (mu/lambda) . n(4k)(2k - 1)!) where A is a function of the minimum angle epsilon between any three points. Based on insights provided by the analysis, we improve this upper bound by introducing a mixed mutation strategy that incorporates both 2-opt moves and permutation jumps. This strategy improves the upper bound to O(n . A(epsilon) . max {(mu/lambda) . n(2), 1} + (mu/lambda) . n(2k)(k - 1)!). In the second part of the paper, we use the information gained in the analysis to incorporate domain knowledge to design two fixed-parameter tractable (FPT) evolutionary algorithms for the planar Euclidean TSP. We first develop a (mu + lambda) EA based on an analysis by M. Theile, 2009, \"Exact solutions to the traveling salesperson problem by a population-based evolutionary algorithm,\" Lecture notes in computer science, Vol. 5482 (pp. 145-155), that solves the TSP with k inner points in O(max{2(k)k(2)n(2)lambda(-1), n}) generations with probability 1 - e(-Omega(n)). We then design a (mu + lambda) EAthat incorporates a dynamic programming step into the fitness evaluation. We prove that a variant of this evolutionary algorithm using 2-opt mutation solves the problem after O(max{(k - 2)!k(2k-2)lambda(-1), 1}) steps in expectation with a cost of O(nk) for each fitness evaluation.", "paper_title": "Parameterized Runtime Analyses of Evolutionary Algorithms for the Planar Euclidean Traveling Salesperson Problem", "paper_id": "WOS:000345964200003"}