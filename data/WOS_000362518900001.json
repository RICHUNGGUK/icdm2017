{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "drainage_network"}, {"score": 0.03074880035138802, "phrase": "terraflow"}, {"score": 0.004781498797706604, "phrase": "massive_terrains"}, {"score": 0.00474827840031692, "phrase": "external_memory_flooding_process"}, {"score": 0.004306610946695577, "phrase": "huge_terrains"}, {"score": 0.0042617859335771615, "phrase": "external_memory"}, {"score": 0.0041589926969138585, "phrase": "large_volume"}, {"score": 0.004130079333979522, "phrase": "high_resolution_terrestrial_data"}, {"score": 0.004058668702112495, "phrase": "internal_memory_algorithms"}, {"score": 0.00396075511616602, "phrase": "flow_direction"}, {"score": 0.003798346343693706, "phrase": "flooding_process"}, {"score": 0.0037456980766939836, "phrase": "internal_depressions"}, {"score": 0.003505378950567746, "phrase": "common_method"}, {"score": 0.003468864442215017, "phrase": "downhill_flow"}, {"score": 0.0033265580369717996, "phrase": "emflow"}, {"score": 0.0032919001003538758, "phrase": "new_strategy"}, {"score": 0.0031458272260508637, "phrase": "terrain_cells"}, {"score": 0.0030378759123133644, "phrase": "special_data_structure"}, {"score": 0.002995736705764765, "phrase": "cache_memory"}, {"score": 0.002974886152979993, "phrase": "emflow's_execution_time"}, {"score": 0.002651015392318126, "phrase": "larger_datasets"}, {"score": 0.0025510720021028107, "phrase": "internal_memory"}, {"score": 0.0021875036343988806, "phrase": "future_interactive_system"}, {"score": 0.0021049977753042253, "phrase": "new_hydrography"}], "paper_keywords": ["Terrain modeling", " Hydrology", " External memory", " GIS"], "paper_abstract": "We present EMFlow, a very efficient algorithm and its implementation, to compute the drainage network (i.e. the flow direction and flow accumulation) on huge terrains stored in external memory. Its utility lies in processing the large volume of high resolution terrestrial data newly available, which internal memory algorithms cannot handle efficiently. The flow direction is computed using an adaptation of our previous method RWFlood that uses a flooding process to quickly remove internal depressions or basins. Flooding, proceeding inward from the outside of the terrain, works oppositely to the common method of computing downhill flow from the peaks. To reduce the number of I/O operations, EMFlow adopts a new strategy to subdivide the terrain into islands that are processed separately. The terrain cells are grouped into blocks that are stored in a special data structure managed as a cache memory. EMFlow's execution time was compared against the two most recent and most efficient published methods: TerraFlow and r.watershed.seg. It was, on average, 25 and 110 times faster than TerraFlow and r.watershed.seg respectively. Also, EMFlow could process larger datasets. Processing a 50000 x 50000 terrain on a machine with 2GB of internal memory took about 4500 seconds, compared to 87000 seconds for TerraFlow while r.watershed.seg failed on terrains larger than 15000 x15000. On very small, say1000 x1000 terrains, EMFlow takes under a second, compared to 6 and 20 seconds in r.watershed.seg and TerraFlow respectively. So EMFlow could be a component of a future interactive system where a user could modify terrain and immediately see the new hydrography.", "paper_title": "Efficiently computing the drainage network on massive terrains using external memory flooding process", "paper_id": "WOS:000362518900001"}