{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dbms_features"}, {"score": 0.004658426838467567, "phrase": "specific_feature"}, {"score": 0.004544397491117709, "phrase": "dbms"}, {"score": 0.004115267130977749, "phrase": "query_execution_plan"}, {"score": 0.0034306925765832633, "phrase": "test_database"}, {"score": 0.0029559346879594254, "phrase": "database_generator"}, {"score": 0.0028127163745564777, "phrase": "generated_test_databases"}, {"score": 0.002676418520290942, "phrase": "test_requirements"}, {"score": 0.0025892330566358503, "phrase": "test_queries"}, {"score": 0.002344311033783139, "phrase": "test_case_constructions"}, {"score": 0.002305799666781492, "phrase": "test_executions"}, {"score": 0.0022492129111567824, "phrase": "wide_range"}, {"score": 0.0022122603123901114, "phrase": "dbms_feature_testing_tasks"}, {"score": 0.0021049977753042253, "phrase": "proposed_framework"}], "paper_keywords": ["Database testing", " Data generation", " Symbolic query processing", " Symbolic execution"], "paper_abstract": "Testing a specific feature of a DBMS requires controlling the inputs and outputs of the operators in the query execution plan. However, that is practically difficult to achieve because the inputs/outputs of a query depend on the content of the test database. In this paper, we propose a framework to test DBMS features. The framework includes a database generator called QAGen so that the generated test databases are able to meet the test requirements defined on the test queries. The framework also includes a set of tools to automate test case constructions and test executions. A wide range of DBMS feature testing tasks can be facilitated by the proposed framework.", "paper_title": "A framework for testing DBMS features", "paper_id": "WOS:000276437900004"}