{"auto_keywords": [{"score": 0.048010005733846804, "phrase": "language_extensions"}, {"score": 0.00481495049065317, "phrase": "bytecode_a"}, {"score": 0.004549242970806199, "phrase": "programmer_productivity"}, {"score": 0.0038124354878360032, "phrase": "base_language"}, {"score": 0.0036707250689857348, "phrase": "extensible_compilers"}, {"score": 0.0034244153725855, "phrase": "base_compiler's_internal_stages"}, {"score": 0.0032556926399045635, "phrase": "separate_compilation"}, {"score": 0.0031346115554600003, "phrase": "low-level_primitives"}, {"score": 0.0029241700853970013, "phrase": "unbalanced_synchronization"}, {"score": 0.0027106334164712057, "phrase": "open_compiler_model"}, {"score": 0.0026597250663309385, "phrase": "normalization_steps"}, {"score": 0.002609770322855842, "phrase": "high-level_language"}, {"score": 0.002481085648977413, "phrase": "core_language"}, {"score": 0.002373690110881497, "phrase": "mixed_java"}, {"score": 0.0022423971916457662, "phrase": "composition_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "expression-level_language_extensions"}], "paper_keywords": ["Languages", " Design", " Dryad Compiler", " Stratego", " Java", " Bytecode", " SDF", " Compilers", " Meta Programming", " Embedded Languages", " Language Extensions", " Domain-Specific Languages", " Source Tracing", " Traits", " Iterators"], "paper_abstract": "Language extensions increase programmer productivity by providing concise, often domain-specific syntax, and support for static verification of correctness, security, and style constraints. Language extensions can often be realized through translation to the base language, supported by preprocessors and extensible compilers. However, various kinds of extensions require further adaptation of a base compiler's internal stages and components, for example to support separate compilation or to make use of low-level primitives of the platform (e. g., jump instructions or unbalanced synchronization). To allow for a more loosely coupled approach, we propose an open compiler model based on normalization steps from a high-level language to a subset of it, the core language. We developed such a compiler for a mixed Java and (core) bytecode language, and evaluate its effectiveness for composition mechanisms such as traits, as well as statement-level and expression-level language extensions.", "paper_title": "Mixing Source and Bytecode A Case for Compilation by Normalization", "paper_id": "WOS:000262035900006"}