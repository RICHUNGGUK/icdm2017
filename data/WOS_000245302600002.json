{"auto_keywords": [{"score": 0.03948898724276865, "phrase": "ahe"}, {"score": 0.00481495049065317, "phrase": "grid-based_computational_science"}, {"score": 0.00463507149599759, "phrase": "multiple_administrative_domains"}, {"score": 0.00459990650330792, "phrase": "grid_middleware"}, {"score": 0.004444921827311577, "phrase": "grid_resources"}, {"score": 0.0041662189933067, "phrase": "general_scientific_use"}, {"score": 0.003934795713147731, "phrase": "grid_technology"}, {"score": 0.0039049226745413224, "phrase": "computational_scientists"}, {"score": 0.003378385493203297, "phrase": "legacy_applications"}, {"score": 0.003352722512047951, "phrase": "distributed_grid_resources"}, {"score": 0.0032894118890753805, "phrase": "higher_level_abstraction"}, {"score": 0.003190584226787897, "phrase": "existing_grid_middleware_schemes"}, {"score": 0.003071201732948199, "phrase": "computational_scientist"}, {"score": 0.002956272941199248, "phrase": "particular_underlying_grid_middleware"}, {"score": 0.0028347983387988847, "phrase": "distributed_resources"}, {"score": 0.00266693888510356, "phrase": "web_services"}, {"score": 0.002636587060621144, "phrase": "well-defined_standards-compliant_interface"}, {"score": 0.0025282151875392817, "phrase": "application_instances"}, {"score": 0.002470987929071079, "phrase": "transparent_manner"}, {"score": 0.0024150528983695446, "phrase": "user_experience"}, {"score": 0.0023424328921363585, "phrase": "computational_science_codes"}, {"score": 0.002186904773823281, "phrase": "complex_workflows"}, {"score": 0.0021537671245615286, "phrase": "grid_infrastructure"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["grid computing", " scientific workflows", " middleware", " service oriented architecture", " web services"], "paper_abstract": "Grid computing is distributed computing performed transparently across multiple administrative domains. Grid middleware, which is meant to enable access to grid resources, is currently widely seen as being too heavyweight and, in consequence, unwieldy for general scientific use. Its heavyweight nature, especially on the client-side, has severely restricted the uptake of grid technology by computational scientists. In this paper, we describe the Application Hosting Environment (AHE) which we have developed to address some of these problems. The AHE is a lightweight, easily deployable environment designed to allow the scientist to quickly and easily run legacy applications on distributed grid resources. It provides a higher level abstraction of a grid than is offered by existing grid middleware schemes such as the Globus Toolkit. As a result, the computational scientist does not need to know the details of any particular underlying grid middleware and is isolated from any changes to it on the distributed resources. The functionality provided by the AHE is 'application-centric': applications are exposed as web services with a well-defined standards-compliant interface. This allows the computational scientist to start and manage application instances on a grid in a transparent manner, thus greatly simplifying the user experience. We describe how a range of computational science codes have been hosted within the AHE and how the design of the AHE allows us to implement complex workflows for deployment on grid infrastructure. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "The application hosting environment: Lightweight middleware for grid-based computational science", "paper_id": "WOS:000245302600002"}