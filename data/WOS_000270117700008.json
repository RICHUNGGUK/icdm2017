{"auto_keywords": [{"score": 0.049715817986079144, "phrase": "integrity_constraints"}, {"score": 0.04793931676065058, "phrase": "software_systems"}, {"score": 0.041267462874429006, "phrase": "system_state"}, {"score": 0.004724158990345732, "phrase": "key_role"}, {"score": 0.004198082549566806, "phrase": "integrity_checking_component"}, {"score": 0.0039049226745413224, "phrase": "integrity_checking"}, {"score": 0.0037161794591176033, "phrase": "system_performance"}, {"score": 0.0034697573205392887, "phrase": "efficient_integrity_checking"}, {"score": 0.003443402656397069, "phrase": "uml-based_software_specifications"}, {"score": 0.0033019779616246356, "phrase": "object_constraint_language"}, {"score": 0.0028456326741466494, "phrase": "irrelevant_verifications"}, {"score": 0.002499438189264537, "phrase": "consistent_state"}, {"score": 0.002263336340041527, "phrase": "model-driven_development_framework"}, {"score": 0.002220551141101661, "phrase": "final_implementation"}, {"score": 0.0021537671245615286, "phrase": "incremental_way"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Model-driven development", " Efficient constraint checking", " Incremental", " Runtime checking", " UML", " OCL"], "paper_abstract": "Integrity constraints play a key role in the specification and development of software systems since they state conditions that must always be satisfied by the system at runtime. Therefore, software systems must include some kind of integrity checking component that ensures that all constraints still hold after the execution of any operation that modifies the system state. Integrity checking must be as efficient as possible not to seriously slow down the system performance at runtime. In this sense, this paper proposes a set of techniques to facilitate the efficient integrity checking of UML-based software specifications, usually complemented with a set of integrity constraints defined in Object Constraint Language (OCL) to express all rules that cannot be graphically defined. In particular, our techniques are able to determine, at design-time. when and how each constraint must be checked at runtime to avoid irrelevant verifications. We refer to these techniques as incremental because they minimize the subset of the system state that needs to be checked after each change by assuming that the system was initially in a consistent state and just reevaluating the elements that may have been affected by that change. We also show how the techniques can be integrated in a model-driven development framework to automatically generate a final implementation that automatically checks all constraints in an incremental way. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Incremental integrity checking of UML/OCL conceptual schemas", "paper_id": "WOS:000270117700008"}