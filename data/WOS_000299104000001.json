{"auto_keywords": [{"score": 0.042939704157479226, "phrase": "index_scan"}, {"score": 0.039745155174602975, "phrase": "full_table_scan"}, {"score": 0.031618278413001126, "phrase": "sorted_index_scan"}, {"score": 0.015573597099571271, "phrase": "flash_memory_ssds"}, {"score": 0.00481495049065317, "phrase": "optimizing_index_scans"}, {"score": 0.0046364836476864325, "phrase": "memory_ssds"}, {"score": 0.004549734943142138, "phrase": "random_reads"}, {"score": 0.004464602028530629, "phrase": "sequential_and_random_read"}, {"score": 0.0040049806975968145, "phrase": "flash_memory_storage_devices"}, {"score": 0.0038564191670589884, "phrase": "existing_index_scan"}, {"score": 0.0025678829712650437, "phrase": "retrieved_records"}, {"score": 0.002358220053411644, "phrase": "new_external_index-based_sort_algorithm"}, {"score": 0.0022492129111567824, "phrase": "key_value_distribution"}, {"score": 0.0022175019341824603, "phrase": "index_leaf_nodes"}, {"score": 0.0021049977753042253, "phrase": "available_sort_memory_size"}], "paper_keywords": ["flash memory SSDs", " sorted index scan", " partitioned sort"], "paper_abstract": "Unlike harddisks, flash memory SSDs have very fast latency in random reads and thus the relative bandwidth gap between sequential and random read is quite small, though not negligible. For this reason, it has been believed that index scan would become more attractive access method in flash memory storage devices. In reality, however, the existing index scan can outperform the full table scan only in very selective predicates. In this paper, we investigate how to optimize the index scan on flash memory SSDs. First, we empirically show that the index scan underperforms the full table scan even when the selectivity of selection predicate is less than 5% and explain its reason. Second, we revisit the idea of sorted index scan and demonstrate that it can outperform the full table scan even when the selectivity is larger than 30%. However, one drawback of the sorted index scan is that it loses the sortedness of the retrieved records. Third, in order to efficiently resort the result from the sorted index scan, we propose a new external index-based sort algorithm, partitioned sort, which exploits the information of key value distribution in the index leaf nodes. It can sort data in one pass regardless of the available sort memory size.", "paper_title": "Optimizing Index Scans on Flash Memory SSDs", "paper_id": "WOS:000299104000001"}