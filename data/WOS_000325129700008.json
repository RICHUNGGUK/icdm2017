{"auto_keywords": [{"score": 0.03644451033122438, "phrase": "service_choreography"}, {"score": 0.007740489563401459, "phrase": "web_service_choreography"}, {"score": 0.004734038956773703, "phrase": "global_models"}, {"score": 0.004694092086199672, "phrase": "service_interactions"}, {"score": 0.004261905417484149, "phrase": "chor"}, {"score": 0.0039620308501590795, "phrase": "initial_channel_set"}, {"score": 0.003624429617337833, "phrase": "required_channels"}, {"score": 0.0033865859510157238, "phrase": "complex_channel_constraints"}, {"score": 0.0029691377785333872, "phrase": "redundant_channels"}, {"score": 0.002833689453299307, "phrase": "interaction_flows"}, {"score": 0.0027390682208834013, "phrase": "channel_absence"}, {"score": 0.002658863179011018, "phrase": "simple_language"}, {"score": 0.0024012441367538434, "phrase": "formal_operational_semantics"}, {"score": 0.0023013968622710847, "phrase": "static_checking"}, {"score": 0.0022530375696567136, "phrase": "channel_passing"}, {"score": 0.0021870332034407817, "phrase": "complexity_results"}, {"score": 0.0021049977753042253, "phrase": "illustrated_service_choreography_examples"}], "paper_keywords": ["web service choreography", " channel passing", " algorithms"], "paper_abstract": "Web service choreography describes global models of service interactions among a set of participants. For an interaction to be executed, the participants must know the required channel(s) used in the interaction, otherwise the execution will get stuck. Since channels are composed dynamically, the initial channel set of each participant is often insufficient to meet the requirements. It is the responsibility of the participants to pass required channels owned (known) by one to others. Since service choreography may involve many participants and complex channel constraints, it is hard for designers to specify channel passing in a choreography exactly as required. We address the problem of checking whether a service choreography lacks channels or has redundant channels, and how to automatically generate channel passing based on interaction flows of the service choreography in the case of channel absence. Concretely, we propose a simple language Chor (c) , a channel interaction sub-language for modeling the channel passing aspect of service choreography. Based on the formal operational semantics of Chor (c) , the algorithms for static checking of service choreography and generating channel passing are also studied, and the complexity results of algorithms are discussed. Moreover, some illustrated service choreography examples are presented to show how to formalize and analyze service choreography with channel passing in Chor(c) .", "paper_title": "Algorithms for checking channel passing in web service choreography", "paper_id": "WOS:000325129700008"}