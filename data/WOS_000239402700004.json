{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "program_slicing"}, {"score": 0.00471228691115201, "phrase": "important_decomposition_technique"}, {"score": 0.004322967486451877, "phrase": "software_analyzing"}, {"score": 0.003965684670332574, "phrase": "current_slicing_methods"}, {"score": 0.0035601676907962626, "phrase": "system_dependence_graph"}, {"score": 0.0034097787109430384, "phrase": "novel_formal_tool"}, {"score": 0.0031277316566463978, "phrase": "language-independent_slice_monad_transformer"}, {"score": 0.002952745241052452, "phrase": "semantic_descriptions"}, {"score": 0.0028279422436488116, "phrase": "modular_way"}, {"score": 0.002747676657869163, "phrase": "corresponding_slicing_algorithms"}, {"score": 0.002669683153809812, "phrase": "program_slices"}, {"score": 0.0025568135952982345, "phrase": "abstract_syntax"}, {"score": 0.0024136908511423875, "phrase": "intermediate_structures"}, {"score": 0.002362105010110277, "phrase": "dependence_graphs"}, {"score": 0.0022785613865764923, "phrase": "execution_history"}, {"score": 0.0021821915946356168, "phrase": "language-flexibility_properties"}], "paper_keywords": ["program slicer", " modular monadic semantics", " monad", " monad transformer"], "paper_abstract": "Program slicing is an important decomposition technique. It has been widely used in many software activities, such as software analyzing, understanding, debugging, testing, and maintenance. The current slicing methods and tools, however, are monolithic, and mainly based on program or system dependence graph. This paper presents a novel formal tool for program slicing. It abstracts the computation of program slicing as a language-independent slice monad transformer, which can be applied to the semantic descriptions of the program in a modular way, forming the corresponding slicing algorithms. Such algorithms allow program slices to be computed directly on abstract syntax, with no need to explicitly construct intermediate structures such as dependence graphs or to record an execution history. It has reusability and language-flexibility properties in comparison with the current program slicing methods/tools.", "paper_title": "A monadic program slicer", "paper_id": "WOS:000239402700004"}