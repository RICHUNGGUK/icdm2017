{"auto_keywords": [{"score": 0.035691633403631795, "phrase": "cholesky"}, {"score": 0.013154675489785314, "phrase": "lapack"}, {"score": 0.008438869223406566, "phrase": "scalapack"}, {"score": 0.00481495049065317, "phrase": "dense_linear_algebra_operations"}, {"score": 0.004645057834614705, "phrase": "state-of-the-art_dense_linear_algebra_software"}, {"score": 0.0042920078348374375, "phrase": "performance_losses"}, {"score": 0.004230749292148046, "phrase": "multicore_processors"}, {"score": 0.004023120753104693, "phrase": "thread-level_parallelism"}, {"score": 0.0038256426589560774, "phrase": "coarse-grain_dataflow_model"}, {"score": 0.003637822529522622, "phrase": "programming_multicore_architectures"}, {"score": 0.003459191419478298, "phrase": "classic_dense_linear_algebra_workloads"}, {"score": 0.0032893028281789287, "phrase": "qr_factorization"}, {"score": 0.0032190636347671675, "phrase": "lu_factorization"}, {"score": 0.003150319576043518, "phrase": "dynamic_data-driven_execution"}, {"score": 0.002995554770117301, "phrase": "coarse-grain_dataflow"}, {"score": 0.00284837132359445, "phrase": "nested_parallelism"}, {"score": 0.002747676657869163, "phrase": "cilk_framework"}, {"score": 0.0025568135952982345, "phrase": "arbitrary_direct_acyclic_graph"}, {"score": 0.0024664004864629703, "phrase": "smp_superscalar_framework"}, {"score": 0.002396371892825691, "phrase": "coding_effort"}, {"score": 0.0022138542785562444, "phrase": "thread_level"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["task graph", " scheduling", " multicore", " linear algebra", " factorization", " Cholesky", " LU", " QR", " direct acyclic graph", " dynamic scheduling", " matrix factorization"], "paper_abstract": "State-of-the-art dense linear algebra software, such as the LAPACK and ScaLAPACK libraries, suffers performance losses on multicore processors due to their inability to fully exploit thread-level parallelism. At the same time, the coarse-grain dataflow model gains popularity as a paradigm for programming multicore architectures. This Work looks at implementing classic dense linear algebra workloads, the Cholesky factorization, the QR factorization and the LU factorization, using dynamic data-driven execution. Two emerging approaches to implementing coarse-grain dataflow are examined, the model of nested parallelism, represented by the Cilk framework, and the model of parallelism expressed through an arbitrary Direct Acyclic Graph, represented by the SMP Superscalar framework. Performance and coding effort are analyzed and compared against code manually parallelized at the thread level. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Scheduling dense linear algebra operations on multicore processors", "paper_id": "WOS:000273409900002"}