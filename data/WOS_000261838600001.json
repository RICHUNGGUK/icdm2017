{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "aggregate_functions"}, {"score": 0.004755353864362941, "phrase": "dlv_system"}, {"score": 0.004716031208088975, "phrase": "disjunctive_logic_programming"}, {"score": 0.004431246962597134, "phrase": "finite_structures"}, {"score": 0.004163587877500036, "phrase": "high_expressiveness"}, {"score": 0.004077995480957875, "phrase": "simple_properties"}, {"score": 0.00399415558125301, "phrase": "real-world_applications"}, {"score": 0.003847546889061499, "phrase": "simple_and_natural_manner"}, {"score": 0.003706299561774348, "phrase": "arithmetic_operators"}, {"score": 0.003285380677401785, "phrase": "classic_dlp."}, {"score": 0.0031779030120854144, "phrase": "dlp"}, {"score": 0.0031125001790084936, "phrase": "conservative_way"}, {"score": 0.002960979624379786, "phrase": "disputed_semantics"}, {"score": 0.0027703320456201074, "phrase": "extended_language"}, {"score": 0.0025070703395635133, "phrase": "computational_complexity"}, {"score": 0.00235536166148219, "phrase": "higher_cost"}, {"score": 0.002212812864395738, "phrase": "dlv-a_state-of-the-art_dlp_system"}, {"score": 0.0021049977753042253, "phrase": "proposed_extension"}], "paper_keywords": ["disjunctive logic programming", " answer set programming", " aggregates", " knowledge representation", " implementation"], "paper_abstract": "Disjunctive logic programming (DLP) is a very expressive formalism. It allows for expressing every property of finite structures that is decidable in the complexity class Sigma(P)(2) (=NP(NP)). Despite this high expressiveness, there are some simple properties, often arising in real-world applications, which cannot be encoded in a simple and natural manner. Especially properties that require the use of arithmetic operators (like sum, times, or count) on a set or multiset of elements, which satisfy some conditions, cannot be naturally expressed in classic DLP. To overcome this deficiency, we extend DLP by aggregate functions in a conservative way. In particular, we avoid the introduction of constructs with disputed semantics, by requiring aggregates to be stratified. We formally define the semantics of the extended language (called DLP(A)), and illustrate how it can be profitably used for representing knowledge. Furthermore, we analyze the computational complexity of DLP(A), showing that the addition of aggregates does not bring a higher cost in that respect. Finally, we provide an implementation of DLP(A) in DLV-a state-of-the-art DLP system-and report on experiments which confirm the usefulness of the proposed extension also for the efficiency of computation.", "paper_title": "Design and implementation of aggregate functions in the DLV system", "paper_id": "WOS:000261838600001"}