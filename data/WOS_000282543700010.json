{"auto_keywords": [{"score": 0.0396600464562225, "phrase": "deductive_power"}, {"score": 0.011896791369968567, "phrase": "implication_graphs"}, {"score": 0.008136767140130131, "phrase": "sat_solver"}, {"score": 0.00481495049065317, "phrase": "sat_solvers"}, {"score": 0.004278807087784626, "phrase": "conjunctive_normal_form"}, {"score": 0.004249188865832993, "phrase": "subsumed_clauses"}, {"score": 0.004176033420846065, "phrase": "partial_resolution"}, {"score": 0.00386876598761639, "phrase": "existing_transformations"}, {"score": 0.0031514627590375354, "phrase": "new_preprocessing_algorithm"}, {"score": 0.0029499784768149146, "phrase": "new_clauses"}, {"score": 0.0029193609786176632, "phrase": "existing_ones"}, {"score": 0.0028590732866152118, "phrase": "conflict_analysis"}, {"score": 0.002320449502337321, "phrase": "subsumption_check"}, {"score": 0.002202427244004817, "phrase": "strong_conflict_analysis"}, {"score": 0.002164432930854161, "phrase": "unsatisfiability_proofs"}, {"score": 0.0021049977753042253, "phrase": "new_techniques"}], "paper_keywords": ["CNF", " distillation", " DPLL", " preprocessing", " SAT"], "paper_abstract": "Satisfiability (SAT) solvers often benefit from transformations of the formula to be decided that allow them to do more through deduction and decrease their reliance on enumeration. For formulae in conjunctive normal form, subsumed clauses may be removed or partial resolution may be applied. The objectives of simplifying the formula and speeding up the solver are sometimes competing. We characterize existing transformations in terms of their impact on the deductive power of the formula and their effects on the sizes of the implication graphs. For example, we show that variable elimination works by improving implication graphs. We also present two new techniques that try to increase deductive power. The first is a check performed during the computation of resolvents. The second is a new preprocessing algorithm based on distillation that combines simplification and increase of deductive power. Most current SAT solvers apply resolution at various stages to derive new clauses or simplify existing ones. The former happens during conflict analysis, while the latter is usually done during preprocessing. We show how subsumption of the operands by the resolvent can be inexpensively detected during resolution; we then discuss how this detection is used to improve three stages of the SAT solver: variable elimination, clause distillation, and conflict analysis. The \"on-the-fly\" subsumption check is easily integrated in a SAT solver. In particular, it is compatible with strong conflict analysis and the generation of unsatisfiability proofs. Experiments show the effectiveness of the new techniques.", "paper_title": "Making Deduction More Effective in SAT Solvers", "paper_id": "WOS:000282543700010"}