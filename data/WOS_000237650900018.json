{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bulk-synchronous_parallelism"}, {"score": 0.00462919213721188, "phrase": "performance_results"}, {"score": 0.004556901872357751, "phrase": "parallel_algorithms"}, {"score": 0.004415675459182871, "phrase": "longest_common_subsequence"}, {"score": 0.003832198214757852, "phrase": "string_distances"}, {"score": 0.0035981701736904495, "phrase": "parallel_algorithm"}, {"score": 0.0035141291835319682, "phrase": "variable_grid_size"}, {"score": 0.0032223742018434856, "phrase": "linear_communication_costs"}, {"score": 0.0030494153169181334, "phrase": "bsp_context"}, {"score": 0.0029781530607129653, "phrase": "runtime_estimations"}, {"score": 0.0028405715222684183, "phrase": "experimental_values"}, {"score": 0.0027093285574752457, "phrase": "different_bsp"}, {"score": 0.002688050388891007, "phrase": "programming_libraries"}, {"score": 0.0026252106881752067, "phrase": "efficient_implementation"}, {"score": 0.0025841336988141235, "phrase": "sequential_computation"}, {"score": 0.002445347925313158, "phrase": "bsp_model"}, {"score": 0.00238816839721704, "phrase": "appropriate_optimized_bsp_library"}, {"score": 0.0022958180852458215, "phrase": "plain_mpi"}, {"score": 0.0021049977753042253, "phrase": "tuned_grid_size_parameter"}], "paper_keywords": [""], "paper_abstract": "This paper presents performance results for parallel algorithms that compute the longest common subsequence of two strings. This algorithm is a representative of a class of algorithms that compute string to string distances and has computational complexity O(n(2)). The parallel algorithm uses a variable grid size, runs in O(p) supersteps (synchronization phases) and has linear communication costs. We study this algorithm in BSP context, give runtime estimations and compare the predictions to experimental values measured on three different parallel architectures, using different BSP programming libraries and an efficient implementation for sequential computation. We find that using the BSP model and the appropriate optimized BSP library improves the performance over plain MPI, and that scalability can be improved by using a tuned grid size parameter.", "paper_title": "Efficient longest common subsequence computation using bulk-synchronous parallelism", "paper_id": "WOS:000237650900018"}