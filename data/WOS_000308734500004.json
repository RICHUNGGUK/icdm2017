{"auto_keywords": [{"score": 0.036066180892878, "phrase": "seesms"}, {"score": 0.00481495049065317, "phrase": "secure_mobile_messaging_framework"}, {"score": 0.004603525341738782, "phrase": "scientific_software_development"}, {"score": 0.00450130420152996, "phrase": "black_boxes"}, {"score": 0.004461051281091779, "phrase": "algorithmic_software_libraries"}, {"score": 0.004401342842183475, "phrase": "prior_assessment"}, {"score": 0.0041703614123283165, "phrase": "experimental_performance"}, {"score": 0.003969250376327401, "phrase": "theoretical_expectation"}, {"score": 0.003611751858608048, "phrase": "software_framework"}, {"score": 0.0035156341294017685, "phrase": "encrypted_and_digitally_signed_sms_messages"}, {"score": 0.0033160345607565565, "phrase": "java_bc_library"}, {"score": 0.0029767499830258754, "phrase": "castiglione_et_al"}, {"score": 0.0028715299874549245, "phrase": "unexpected_phenomena"}, {"score": 0.002833035775182696, "phrase": "ecdsa-based_cryptosystem"}, {"score": 0.0027329045377212768, "phrase": "rsa"}, {"score": 0.0023770362063833903, "phrase": "algorithmic_and_programming_optimizations_techniques"}, {"score": 0.0023033100935570755, "phrase": "significant_performance_boost"}, {"score": 0.0022520496048464406, "phrase": "original_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Mobile secure communications", " SMS", " Elliptic curve cryptography", " Performance analysis", " Encryption", " RSA"], "paper_abstract": "It is quite usual in the world of scientific software development to use, as black boxes, algorithmic software libraries without any prior assessment of their efficiency. This approach relies on the assumption that the experimental performance of these libraries, although correct, will match the theoretical expectation of their algorithmic counterparts. In this paper we discuss the case of SEESMS (Secure Extensible and Efficient SMS). It is a software framework that allows two peers to exchange encrypted and digitally signed SMS messages. The cryptographic part of SEESMS is implemented on top of the Java BC library (The Legion of Bouncy Castle, 2010), a widely used open-source library. The preliminary experimentations conducted on SEESMS, discussed in Castiglione et al. (2010), revealed some unexpected phenomena like the ECDSA-based cryptosystem being generally and significantly slower than the RSA-based equivalent. In this paper, we analyze these phenomena by profiling the code of SEESMS and expose the issues causing its bad performance. Then, we apply some algorithmic and programming optimizations techniques. The resulting code exhibits a significant performance boost with respect to the original implementation, and requires less memory in order to be run. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Engineering a secure mobile messaging framework", "paper_id": "WOS:000308734500004"}