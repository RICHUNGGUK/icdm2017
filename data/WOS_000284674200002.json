{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "grammar-based_test_generation"}, {"score": 0.04665103656723687, "phrase": "gbtg"}, {"score": 0.004615202066192795, "phrase": "extensive_study"}, {"score": 0.004566567411073082, "phrase": "practical_use"}, {"score": 0.004353948887538618, "phrase": "source_code"}, {"score": 0.004240116703465252, "phrase": "context-free_grammars"}, {"score": 0.0038339398365449507, "phrase": "extensible_markup_language"}, {"score": 0.003597625122515975, "phrase": "communications_protocols"}, {"score": 0.003559675269411366, "phrase": "recent_research"}, {"score": 0.0034299649219748513, "phrase": "-array_techniques"}, {"score": 0.003375826910838081, "phrase": "pairwise_testing"}, {"score": 0.0033402088717816446, "phrase": "gbtg_tools"}, {"score": 0.0032355864829403413, "phrase": "considerable_power"}, {"score": 0.0028487656293168795, "phrase": "automated_software_testing"}, {"score": 0.0028037753646260937, "phrase": "first_case_study"}, {"score": 0.0027741761880779535, "phrase": "html_injection_vulnerabilities"}, {"score": 0.0027303606813078255, "phrase": "rss_feed_parser"}, {"score": 0.002687235334499192, "phrase": "second_case_study"}, {"score": 0.0026168641536413978, "phrase": "network_firewalls"}, {"score": 0.002561892963059385, "phrase": "tcp_flag_attacks"}, {"score": 0.0025214217930287003, "phrase": "case_studies"}, {"score": 0.0024037949232582462, "phrase": "gbtg_context"}, {"score": 0.0023038418282549274, "phrase": "large_test_logs"}, {"score": 0.0021731423856364003, "phrase": "fully_automated_gbtg_test_suites"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Automated testing", " Grammar-based test generation", " Covering array", " Really Simple Syndication (RSS)", " eXtended Markup Language (XML)", " TCP"], "paper_abstract": "Grammar-based test generation (GBTG) has seen extensive study and practical use since the 1970s. GBTG was introduced to generate source code for testing compilers from context-free grammars specifying language syntax. More recently, GBTG has been applied to many other testing problems, including the generation of eXtensible Markup Language (XML) documents and the generation of packets for testing communications protocols. Recent research has shown how to integrate covering-array techniques such as pairwise testing into GBTG tools. While the integration offers considerable power to the tester, there are few practical demonstrations in the literature. We present two case studies showing how to use grammars and covering arrays for automated software testing. The first case study exposes HTML injection vulnerabilities in an RSS feed parser. The second case study determines the effectiveness of network firewalls when faced with TCP flag attacks. The case studies illustrate the use of covering arrays in a GBTG context, the use of visualization to understand large test logs, and the issues and tradeoffs in the design of fully automated GBTG test suites. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Two case studies in grammar-based test generation", "paper_id": "WOS:000284674200002"}