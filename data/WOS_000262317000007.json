{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "disk-based_string_management"}, {"score": 0.004556901872357751, "phrase": "large_quantities"}, {"score": 0.004392565073466714, "phrase": "sort_order"}, {"score": 0.004081385289516914, "phrase": "efficient_general-purpose_disk-based_data_structure"}, {"score": 0.0036553070575015344, "phrase": "competitive_alternative"}, {"score": 0.0031360786664165093, "phrase": "new_algorithms"}, {"score": 0.002985988377995789, "phrase": "equality_search"}, {"score": 0.002949598537993663, "phrase": "variable-length_strings"}, {"score": 0.0028958411976400646, "phrase": "disk-resident_b-trie"}, {"score": 0.0028084079003212973, "phrase": "novel_splitting_strategies"}, {"score": 0.0027403605798830984, "phrase": "critical_element"}, {"score": 0.002690406375639144, "phrase": "practical_implementation"}], "paper_keywords": ["B-tree", " Burst trie", " Secondary storage", " Vocabulary accumulation", " Word-level indexing", " Data structures"], "paper_abstract": "A wide range of applications require that large quantities of data be maintained in sort order on disk. The B-tree, and its variants, are an efficient general-purpose disk-based data structure that is almost universally used for this task. The B-trie has the potential to be a competitive alternative for the storage of data where strings are used as keys, but has not previously been thoroughly described or tested. We propose new algorithms for the insertion, deletion, and equality search of variable-length strings in a disk-resident B-trie, as well as novel splitting strategies which are a critical element of a practical implementation. We experimentally compare the B-trie against variants of B-tree on several large sets of strings with a range of characteristics. Our results demonstrate that, although the B-trie uses more memory, it is faster, more scalable, and requires less disk space.", "paper_title": "B-tries for disk-based string management", "paper_id": "WOS:000262317000007"}