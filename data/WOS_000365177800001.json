{"auto_keywords": [{"score": 0.03602030258510233, "phrase": "maxsat"}, {"score": 0.015719681869278673, "phrase": "dynamic_programming"}, {"score": 0.01287552289108565, "phrase": "tractable_cases"}, {"score": 0.004655924035639928, "phrase": "dynamic_programming_algorithms"}, {"score": 0.004593787100061613, "phrase": "propositional_model"}, {"score": 0.00432423070113186, "phrase": "maxsat._tools"}, {"score": 0.004266501496765747, "phrase": "graph_structure_theory"}, {"score": 0.00300749708357049, "phrase": "incidence_graphs"}, {"score": 0.002907992115184249, "phrase": "unbounded_clique-width"}, {"score": 0.002755567647101251, "phrase": "previous_results"}, {"score": 0.0025761937402886954, "phrase": "structural_decompositions"}, {"score": 0.002524688179363081, "phrase": "incidence_graph"}, {"score": 0.0024742098091226203, "phrase": "input_formula"}, {"score": 0.0023923066544220277, "phrase": "limited_experimental_results"}], "paper_keywords": [""], "paper_abstract": "We look at dynamic programming algorithms for propositional model counting, also called #SAT, and MAXSAT. Tools from graph structure theory, in particular treewidth, have been used to successfully identify tractable cases in many subfields of AI, including SAT, Constraint Satisfaction Problems (CSP), Bayesian reasoning, and planning. In this paper we attack #SAT and MAXSAT using similar, but more modern, graph structure tools. The tractable cases will include formulas whose class of incidence graphs have not only unbounded treewidth but also unbounded clique-width. We show that our algorithms extend all previous results for MAXSAT and #SAT achieved by dynamic programming along structural decompositions of the incidence graph of the input formula. We present some limited experimental results, comparing implementations of our algorithms to state-of-the-art #SAT and MAXSAT solvers, as a proof of concept that warrants further research.", "paper_title": "Solving #SAT and MAXSAT by Dynamic Programming", "paper_id": "WOS:000365177800001"}