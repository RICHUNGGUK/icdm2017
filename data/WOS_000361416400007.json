{"auto_keywords": [{"score": 0.04780597585803098, "phrase": "core_members"}, {"score": 0.019052203470394852, "phrase": "coredevrec"}, {"score": 0.009562107798632475, "phrase": "pull_requests"}, {"score": 0.008472533900901547, "phrase": "manual_assignment"}, {"score": 0.007740489563401459, "phrase": "contribution_evaluation"}, {"score": 0.007314977228299957, "phrase": "code_changes"}, {"score": 0.004756805752518494, "phrase": "pull-based_software_development"}, {"score": 0.0046499153449647964, "phrase": "github"}, {"score": 0.004045157344249484, "phrase": "short_time"}, {"score": 0.003884479830773329, "phrase": "popular_projects"}, {"score": 0.003524322230452833, "phrase": "growing_need"}, {"score": 0.003495855671790616, "phrase": "automatic_core_member_recommendation"}, {"score": 0.00342568771304873, "phrase": "evaluation_process"}, {"score": 0.0030953529970646626, "phrase": "specific_core_members"}, {"score": 0.0028425481299483254, "phrase": "support_vector_machines"}, {"score": 0.0028081546657056948, "phrase": "different_kinds"}, {"score": 0.002751751956416832, "phrase": "file_paths"}, {"score": 0.0027295084882654917, "phrase": "modified_codes"}, {"score": 0.002526938673434697, "phrase": "five_popular_projects"}, {"score": 0.002320449502337321, "phrase": "baseline_approach"}, {"score": 0.0021569129153653777, "phrase": "higher_accuracy"}, {"score": 0.0021049977753042253, "phrase": "trinity_core"}], "paper_keywords": ["core member recommendation", " contribution evaluation", " pull-based software development"], "paper_abstract": "The pull-based software development helps developers make contributions flexibly and efficiently. Core members evaluate code changes submitted by contributors, and decide whether to merge these code changes into repositories or not. Ideally, code changes are assigned to core members and evaluated within a short time after their submission. However, in reality, some popular projects receive many pull requests, and core members have difficulties in choosing pull requests which are to be evaluated. Therefore, there is a growing need for automatic core member recommendation, which improves the evaluation process. In this paper, we investigate pull requests with manual assignment. Results show that 3.2%similar to 40.6% of pull requests are manually assigned to specific core members. To assist with the manual assignment, we propose CoreDevRec to recommend core members for contribution evaluation in GitHub. CoreDevRec uses support vector machines to analyze different kinds of features, including file paths of modified codes, relationships between contributors and core members, and activeness of core members. We evaluate CoreDevRec on 18 651 pull requests of five popular projects in GitHub. Results show that CoreDevRec achieves accuracy from 72.9% to 93.5% for top 3 recommendation. In comparison with a baseline approach, CoreDevRec improves the accuracy from 18.7% to 81.3% for top 3 recommendation. Moreover, CoreDevRec even has higher accuracy than manual assignment in the project Trinity Core. We believe that CoreDevRec can improve the assignment of pull requests.", "paper_title": "CoreDevRec: Automatic Core Member Recommendation for Contribution Evaluation", "paper_id": "WOS:000361416400007"}