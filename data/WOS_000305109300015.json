{"auto_keywords": [{"score": 0.05007637157079302, "phrase": "linux_cpu-bound_processes"}, {"score": 0.046199120423520326, "phrase": "linux"}, {"score": 0.04545634436849381, "phrase": "cpu-bound_processes"}, {"score": 0.036009163882852226, "phrase": "starvation_problem"}, {"score": 0.004603244077348199, "phrase": "prior_research_work"}, {"score": 0.003474799999519295, "phrase": "underlying_root_causes"}, {"score": 0.0033405704229694656, "phrase": "effective_solutions"}, {"score": 0.00319348234663792, "phrase": "detailed_implementations"}, {"score": 0.003052890811945422, "phrase": "cfs"}, {"score": 0.0028214413724451442, "phrase": "execution_time"}, {"score": 0.0027898428590137515, "phrase": "incoming_traffic_load"}, {"score": 0.0026222551419772867, "phrase": "mainboard_architectures"}, {"score": 0.0025928815987676535, "phrase": "uni-processing"}, {"score": 0.0025208755851561368, "phrase": "symmetric_multi-processing"}, {"score": 0.0023962545023307937, "phrase": "proposed_solutions"}, {"score": 0.0022396019251440724, "phrase": "negative_impact"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Operating system", " Linux", " Network I/O", " CPU scheduler", " Starvation", " Performance", " CPU-bound processes"], "paper_abstract": "In prior research work, it has been demonstrated that Linux can starve CPU-bound processes in the presence of network I/O. The starvation of Linux CPU-bound processes occurs under the two Linux schedulers, namely the 2.6 O(1) scheduler and the more recent 2.6 Completely Fair Scheduler (CFS). In this paper, we analyze the underlying root causes of this starvation problem and we propose effective solutions that can mitigate such starvation. We present detailed implementations of our proposed solutions for both O(1) and CFS Linux schedulers. We empirically evaluate the effectiveness of our proposed solutions in terms of execution time and incoming traffic load. For our experimental study and analysis, we consider two types of mainboard architectures: Uni-Processing (UP) and Symmetric Multi-Processing (SMP). Our empirical results show that the proposed solutions are highly effective in mitigating the starvation problem for CPU-bound processes with no negative impact on the performance of network I/O-bound processes. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Mitigating starvation of Linux CPU-bound processes in the presence of network I/O", "paper_id": "WOS:000305109300015"}