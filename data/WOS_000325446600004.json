{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "breakable_objects"}, {"score": 0.04257133096705247, "phrase": "acyclic_breakable_objects"}, {"score": 0.00475413908468027, "phrase": "distributed_shared-memory_systems"}, {"score": 0.004537631845923196, "phrase": "special_broken_state"}, {"score": 0.004330941610682453, "phrase": "special_broken_symbol"}, {"score": 0.0038624981944755813, "phrase": "broken_state"}, {"score": 0.0037021153060910164, "phrase": "consensus_power"}, {"score": 0.0036090884921108086, "phrase": "richer_but_less_covered_cyclic_breakable_objects"}, {"score": 0.0034886660821793576, "phrase": "cyclic_breakable_objects"}, {"score": 0.0034299649219748513, "phrase": "general_algorithmic_framework"}, {"score": 0.003301461490509176, "phrase": "breakable_queue"}, {"score": 0.0031643005824589917, "phrase": "previous_paper"}, {"score": 0.0030586736004285216, "phrase": "operation-wise_breakable_objects"}, {"score": 0.0028216858159564808, "phrase": "running_examples"}, {"score": 0.002750721367040336, "phrase": "generic_framework"}, {"score": 0.0025810006125483835, "phrase": "nontrivial_implementations"}, {"score": 0.0024842242921857705, "phrase": "impossibility_results"}, {"score": 0.0024527767211457046, "phrase": "exact_consensus_numbers"}, {"score": 0.0023507916951658455, "phrase": "example_objects"}, {"score": 0.0022722584151582616, "phrase": "generic_consensus_number"}, {"score": 0.002196342933346204, "phrase": "simple_and_natural_non-breakable_object_class"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Distributed computing", " Shared memory", " Wait-free hierarchy", " Consensus number", " Breakable objects"], "paper_abstract": "In distributed shared-memory systems, a breakable object is one that may enter a special broken state, after which all operations will fail and return a special broken symbol perpendicular to(B). Most breakable objects appeared in literature belong to a class we call acyclic breakable objects, in which every operation moves the object closer to the broken state. We show in general that acyclic breakable objects have limited consensus power. Our main results focus on the richer but less covered cyclic breakable objects. We study the consensus numbers of cyclic breakable objects by using a general algorithmic framework, and obtain several interesting results. In particular one result on a breakable queue points out a mistake that appeared both in a previous paper and a textbook. We further study operation-wise breakable objects in which some operations on the object may break but not other operations. We use various breakable queues as running examples, and demonstrate that the generic framework can be applied in this context as well, and in some cases with nontrivial implementations of the framework. We also provide matching impossibility results to obtain exact consensus numbers for all the cases we consider. Finally, since all example objects we found in the literature with a generic consensus number n are breakable objects, we provide a simple and natural non-breakable object class with generic consensus number n. (c) 2013 Elsevier B.V. All rights reserved.", "paper_title": "On the power of breakable objects", "paper_id": "WOS:000325446600004"}