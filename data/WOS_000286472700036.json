{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "ml."}, {"score": 0.00481495049065317, "phrase": "dynamic_multirole_session_types"}, {"score": 0.004750178261675602, "phrase": "multiparty_session_types"}, {"score": 0.00468627326602559, "phrase": "structured_safe_communications"}, {"score": 0.004120289747942224, "phrase": "common_distributed_interaction_patterns"}, {"score": 0.0040373708328770306, "phrase": "peer-to-peer_protocols"}, {"score": 0.0038242899532391914, "phrase": "new_role-based_multiparty_session_type_theory"}, {"score": 0.0036224139706218916, "phrase": "local_behaviours"}, {"score": 0.0035494788628319903, "phrase": "arbitrary_number"}, {"score": 0.003249966782844541, "phrase": "polling_operation"}, {"score": 0.0031203609829058587, "phrase": "current_set"}, {"score": 0.003057503388220776, "phrase": "role's_participants"}, {"score": 0.0028764048059439205, "phrase": "universal_types"}, {"score": 0.0027060037347363987, "phrase": "type_safety"}, {"score": 0.0026514708899935333, "phrase": "multiparty_locking_mechanism"}, {"score": 0.0025630077791393125, "phrase": "communication_safety"}, {"score": 0.0024440836179156593, "phrase": "stronger_progress_property"}, {"score": 0.0022836785412390544, "phrase": "previous_systems"}, {"score": 0.0021776870246727233, "phrase": "implementation_mechanisms"}], "paper_keywords": ["Theory", " Types", " Design", " communications", " roles", " multiparty", " session types", " mobile processes", " dynamic protocols", " join-leave", " peer-to-peer", " auction"], "paper_abstract": "Multiparty session types enforce structured safe communications between several participants, as long as their number is fixed when the session starts. In order to handle common distributed interaction patterns such as peer-to-peer protocols or cloud algorithms, we propose a new role-based multiparty session type theory where roles are defined as classes of local behaviours that an arbitrary number of participants can dynamically join and leave. We offer programmers a polling operation that gives access to the current set of a role's participants in order to fork processes. Our type system with universal types for polling can handle this dynamism and retain type safety. A multiparty locking mechanism is introduced to provide communication safety, but also to ensure a stronger progress property for joining participants that has never been guaranteed in previous systems. Finally, we present some implementation mechanisms used in our prototype extension of ML.", "paper_title": "Dynamic Multirole Session Types", "paper_id": "WOS:000286472700036"}