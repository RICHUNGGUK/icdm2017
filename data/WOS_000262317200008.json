{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "massive_urban_models"}, {"score": 0.004550029253278477, "phrase": "memory_transfer_bottleneck"}, {"score": 0.004062937864702115, "phrase": "compressed_representation"}, {"score": 0.0037109446302945903, "phrase": "crude_building_outlines"}, {"score": 0.0034279721355412285, "phrase": "ray-tracing_displacement_maps"}, {"score": 0.0029920129598858545, "phrase": "displacement_map"}, {"score": 0.002859345731792013, "phrase": "decompression_algorithm"}, {"score": 0.002671263324230699, "phrase": "individual_entries"}, {"score": 0.0025819015229390663, "phrase": "fragment_shader"}, {"score": 0.0024120247307686084, "phrase": "massive_urban_model"}, {"score": 0.0021049977753042253, "phrase": "basic_geometry-based_renderer"}], "paper_keywords": ["Massive urban models", " displacement mapping", " real-time rendering", " compression"], "paper_abstract": "We describe an approach to render massive urban models. To prevent a memory transfer bottleneck, we propose to render the models from a compressed representation directly. Our solution is based on rendering crude building outlines as polygons and generating details by ray-tracing displacement maps in the fragment shader. We demonstrate how to compress a displacement map so that a decompression algorithm can selectively and quickly access individual entries in a fragment shader. Our prototype implementation shows how a massive urban model can be compressed by a factor of 85 and outperform a basic geometry-based renderer by a factor of 40 to 80 in rendering speed.", "paper_title": "Compressed Facade Displacement Maps", "paper_id": "WOS:000262317200008"}