{"auto_keywords": [{"score": 0.03796568354240064, "phrase": "data_sender"}, {"score": 0.00481495049065317, "phrase": "tcp_sack_generation"}, {"score": 0.004633429997452688, "phrase": "caida_internet_traces"}, {"score": 0.004545240514015278, "phrase": "tcp_traffic"}, {"score": 0.004089239912167375, "phrase": "seven_misbehaviors"}, {"score": 0.0032463805170627686, "phrase": "worst_case"}, {"score": 0.00247944491239733, "phrase": "wide_range"}, {"score": 0.002432152706473349, "phrase": "operating_systems"}, {"score": 0.0023857610912536714, "phrase": "tbit"}, {"score": 0.0021876814398268775, "phrase": "seven_ways"}, {"score": 0.0021049977753042253, "phrase": "performance_loss"}], "paper_keywords": ["Reliability", " Verification", " SACK", " Selective Acknowledgment", " TBIT", " TCP"], "paper_abstract": "While analyzing CAIDA Internet traces of TCP traffic to detect instances of data reneging, we frequently observed seven misbehaviors in the generation of SACKs. These misbehaviors could result in a data sender mistakenly thinking data reneging occurred. With one misbehavior, the worst case could result in a data sender receiving a SACK for data that was transmitted but never received. This paper presents a methodology and its application to test a wide range of operating systems using TBIT to fingerprint which ones misbehave in each of the seven ways. Measuring the performance loss due to these misbehaviors is outside the scope of this study; the goal is to document the misbehaviors so they may be corrected. One can conclude that the handling of SACKs while simple in concept is complex to implement.", "paper_title": "Misbehaviors in TCP SACK Generation", "paper_id": "WOS:000289669400002"}