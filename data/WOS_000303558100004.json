{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "feature_modules"}, {"score": 0.004733625412289433, "phrase": "feature_interactions"}, {"score": 0.0043842558719324526, "phrase": "classic_examples"}, {"score": 0.004310173770196077, "phrase": "feature_interaction"}, {"score": 0.0037928847801943404, "phrase": "cross-product_and_interaction_operations"}, {"score": 0.0034532961266947734, "phrase": "cide_tool"}, {"score": 0.00317095235382607, "phrase": "formal_model"}, {"score": 0.0028139168128067343, "phrase": "previously_unrelated_results"}, {"score": 0.0027662954811372175, "phrase": "feature_oriented_software_development"}, {"score": 0.0023123057299992587, "phrase": "composed_documents"}, {"score": 0.0021049977753042253, "phrase": "fosd_tooling"}], "paper_keywords": ["Design", " Theory", " FOSD", " CIDE", " back-propagation", " feature interactions", " feature products"], "paper_abstract": "The relationship between feature modules and feature interactions is not well-understood. To explain classic examples of feature interaction, we show that features are not only composed sequentially, but also by cross-product and interaction operations that heretofore were implicit in the literature. Using the CIDE tool as our starting point, we (a) present a formal model of these operations, (b) show how it connects and explains previously unrelated results in Feature Oriented Software Development (FOSD), and (c) describe a tool, based on our formalism, that demonstrates how changes in composed documents can be back-propagated to their original feature module definitions, thereby improving FOSD tooling.", "paper_title": "Feature Interactions, Products, and Composition", "paper_id": "WOS:000303558100004"}