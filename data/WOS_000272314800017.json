{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_debugging_activities_through_rate-based_simulation_approaches"}, {"score": 0.004646088032529303, "phrase": "software_reliability"}, {"score": 0.0038271712887391015, "phrase": "available_debuggers"}, {"score": 0.0033173234105492895, "phrase": "newly_detected_faults"}, {"score": 0.0032008144731234265, "phrase": "practical_experience"}, {"score": 0.0031521392193570846, "phrase": "fault-removal_time"}, {"score": 0.003010496595090984, "phrase": "removed_faults"}, {"score": 0.002934566917795928, "phrase": "total_number"}, {"score": 0.00290473242917264, "phrase": "detected_faults"}, {"score": 0.002860546817196148, "phrase": "fault_detection_activities"}, {"score": 0.002649472341607234, "phrase": "queueing_theory"}, {"score": 0.0025826247025542213, "phrase": "possible_debugging_behavior"}, {"score": 0.002556359086441866, "phrase": "software_development"}, {"score": 0.0023435920614377306, "phrase": "proposed_methods"}, {"score": 0.002284444272376043, "phrase": "real_software_failure_data"}, {"score": 0.0022041312401435346, "phrase": "proposed_framework"}, {"score": 0.0021705796895687864, "phrase": "project_managers"}, {"score": 0.0021375377706211686, "phrase": "appropriate_staffing_level"}, {"score": 0.0021049977753042253, "phrase": "debugging_team"}], "paper_keywords": ["Fault correction", " non-homogeneous Poisson process (NHPP)", " software reliability growth model (SRGM)", " software testing"], "paper_abstract": "Research in the field of software reliability, dedicated to the analysis of software failure processes, is quite diverse. In recent years, several attractive rate-based simulation approaches have been proposed. Thus far, it appears that most existing simulation approaches do not take into account the number of available debuggers (or developers). In practice, the number of debuggers will be carefully controlled. If all debuggers are busy, they may not address newly detected faults for some time. Furthermore, practical experience shows that fault-removal time is not negligible, and the number of removed faults generally lags behind the total number of detected faults, because fault detection activities continue as faults are being removed. Given these facts, we apply the queueing theory to describe and explain possible debugging behavior during software development. Two simulation procedures are developed based on G/G/infinity, and G/G/m queueing models, respectively. The proposed methods will be illustrated using real software failure data. The analysis conducted through the proposed framework can help project managers assess the appropriate staffing level for the debugging team from the standpoint of performance, and cost-effectiveness.", "paper_title": "Staffing Level and Cost Analyses for Software Debugging Activities Through Rate-Based Simulation Approaches", "paper_id": "WOS:000272314800017"}