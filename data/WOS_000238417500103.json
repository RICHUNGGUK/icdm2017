{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "double-free_and_other_abuses"}, {"score": 0.004610058444728656, "phrase": "linux_kernel_source_code"}, {"score": 0.0036553070575015344, "phrase": "million_lines"}, {"score": 0.003399466007862412, "phrase": "linux_kernel_source"}, {"score": 0.003115908199991072, "phrase": "freed_memory"}, {"score": 0.002655894070657161, "phrase": "model-checking_techniques"}], "paper_keywords": [""], "paper_abstract": "The analysis described in this article detects about two real and uncorrected deadlock situations per thousand C source files or million lines of code in the Linux kernel source, and three accesses to freed memory, at a few seconds per file. In distinction to model-checking techniques, the analysis applies a configurable \"3-phase\" Hoare-style logic to an abstract interpretation of C code to obtain its results.", "paper_title": "Checking for deadlock, double-free and other abuses in the Linux kernel source code", "paper_id": "WOS:000238417500103"}