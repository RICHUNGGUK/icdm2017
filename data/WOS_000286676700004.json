{"auto_keywords": [{"score": 0.047905977291456965, "phrase": "eds"}, {"score": 0.04561964088260011, "phrase": "gui"}, {"score": 0.045214207239656794, "phrase": "web_applications"}, {"score": 0.00481495049065317, "phrase": "single_model_and_test_prioritization_strategies"}, {"score": 0.0046394362688524475, "phrase": "-driven_software"}, {"score": 0.0044495843279816075, "phrase": "incoming_events"}, {"score": 0.004408456735066782, "phrase": "common_examples"}, {"score": 0.004073809704022463, "phrase": "large_number"}, {"score": 0.004036141321779216, "phrase": "possible_event_sequences"}, {"score": 0.003907013105134715, "phrase": "user_interface"}, {"score": 0.003852939975815287, "phrase": "valuable_contributions"}, {"score": 0.0035110198699787013, "phrase": "first_single_model"}, {"score": 0.0031697368057340895, "phrase": "generic_prioritization_criteria"}, {"score": 0.0028615323526689582, "phrase": "unified_theory"}, {"score": 0.002731500545019039, "phrase": "empirical_study"}, {"score": 0.002656327554326748, "phrase": "web-based_applications"}, {"score": 0.0025832180231667853, "phrase": "new_model"}, {"score": 0.0025474193855847074, "phrase": "similar_behavior"}, {"score": 0.0023867931451842087, "phrase": "event_interactions"}, {"score": 0.0022155569675462333, "phrase": "smallest_number"}, {"score": 0.002195033004022173, "phrase": "parameter_value_settings"}], "paper_keywords": ["Combinatorial interaction testing", " covering arrays", " event-driven software (EDS)", " t-way interaction coverage", " test suite prioritization", " user-session testing", " Web application testing", " GUI testing"], "paper_abstract": "Event-Driven Software (EDS) can change state based on incoming events; common examples are GUI and Web applications. These EDSs pose a challenge to testing because there are a large number of possible event sequences that users can invoke through a user interface. While valuable contributions have been made for testing these two subclasses of EDS, such efforts have been disjoint. This work provides the first single model that is generic enough to study GUI and Web applications together. In this paper, we use the model to define generic prioritization criteria that are applicable to both GUI and Web applications. Our ultimate goal is to evolve the model and use it to develop a unified theory of how all EDS should be tested. An empirical study reveals that the GUI and Web-based applications, when recast using the new model, show similar behavior. For example, a criterion that gives priority to all pairs of event interactions did well for GUI and Web applications; another criterion that gives priority to the smallest number of parameter value settings did poorly for both. These results reinforce our belief that these two subclasses of applications should be modeled and studied together.", "paper_title": "Developing a Single Model and Test Prioritization Strategies for Event-Driven Software", "paper_id": "WOS:000286676700004"}