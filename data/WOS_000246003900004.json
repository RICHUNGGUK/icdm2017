{"auto_keywords": [{"score": 0.04129626980690317, "phrase": "fagerberg"}, {"score": 0.0276557601116052, "phrase": "data_structure"}, {"score": 0.00481495049065317, "phrase": "dynamic_sparse_graphs"}, {"score": 0.004642105253191792, "phrase": "dynamic_graph"}, {"score": 0.004221072004655573, "phrase": "bounded_arboricity"}, {"score": 0.00411436400374349, "phrase": "dense_subgraphs"}, {"score": 0.003908940988435398, "phrase": "g.s._brodal"}, {"score": 0.0038804410204616954, "phrase": "r._fagerberg"}, {"score": 0.0038528298235826148, "phrase": "dynamic"}, {"score": 0.003810093416457147, "phrase": "sparse_graphs"}, {"score": 0.0037549812723309817, "phrase": "proc"}, {"score": 0.003646399625591736, "phrase": "data_structures"}, {"score": 0.0035541673947328163, "phrase": "lecture_notes_in_comput"}, {"score": 0.0034390861025300977, "phrase": "springer"}, {"score": 0.0034139508427226944, "phrase": "berlin"}, {"score": 0.0032079118323314424, "phrase": "constant_worst-case_time"}, {"score": 0.002970476379751357, "phrase": "complementary_result"}, {"score": 0.0025844959244701224, "phrase": "brodal"}, {"score": 0.0025468951021098717, "phrase": "efficient_dictionaries"}, {"score": 0.00224032791638295, "phrase": "last_result"}, {"score": 0.002112727588996884, "phrase": "constant_k."}], "paper_keywords": ["data structures", " graph algorithms", " adjacency", " orientation", " dynamic"], "paper_abstract": "We deal with the problem of maintaining a dynamic graph so that queries of the form \"is there an edge between u and v?\" are processed fast. We consider graphs of bounded arboricity, i.e., graphs with no dense subgraphs, like, for example, planar graphs. Brodal and Fagerberg [G.S. Brodal, R. Fagerberg, Dynamic representations of sparse graphs, in: Proc. 6th Internal. Workshop on Algorithms and Data Structures (WADS'99), in: Lecture Notes in Comput. Sci., vol. 1663, Springer, Berlin, 1999, pp. 342-351] described a very simple linear-size data structure which processes queries in constant worst-case time and performs insertions and deletions in 0(l) and O(log n) amortized time, respectively. We show a complementary result that their data structure can be used to get O(log n) worst-case time for query, 0(l) amortized time for insertions and 0(l) worst-case time for deletions. Moreover, our analysis shows chat by combining the data structure of Brodal and Fagerberg with efficient dictionaries one gets O(log log log n) worst-case time bound for queries and deletions and O(log log log n) amortized time for insertions, with size of the data structure still linear. This last result holds even for graphs of arboricity bounded by 0(log(k) n), for some constant k. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Adjacency queries in dynamic sparse graphs", "paper_id": "WOS:000246003900004"}