{"auto_keywords": [{"score": 0.0376089663795216, "phrase": "pais"}, {"score": 0.004883976926658371, "phrase": "intra-sub-cluster_file"}, {"score": 0.00481495049065317, "phrase": "proximity-aware_interest-clustered"}, {"score": 0.004737328254103122, "phrase": "efficient_file_query"}, {"score": 0.004673595320100892, "phrase": "overall_performance"}, {"score": 0.004514977089676155, "phrase": "file_sharing"}, {"score": 0.004475329531698828, "phrase": "file_query"}, {"score": 0.004451142490911742, "phrase": "clustering_peers"}, {"score": 0.0043793594257092805, "phrase": "file_query_performance"}, {"score": 0.004227759140635559, "phrase": "peer_interest"}, {"score": 0.004204904449336037, "phrase": "physical_proximity"}, {"score": 0.00414830454375092, "phrase": "higher_file_query_efficiency"}, {"score": 0.0038581922150544927, "phrase": "bloom_filter"}, {"score": 0.003803608030258807, "phrase": "physically-close_nodes"}, {"score": 0.0035930624319243224, "phrase": "hierarchical_topology"}, {"score": 0.003544668879158414, "phrase": "intelligent_file_replication_algorithm"}, {"score": 0.003506422098649799, "phrase": "file_query_efficiency"}, {"score": 0.003366623631047523, "phrase": "physically_close_nodes"}, {"score": 0.0030783143919343972, "phrase": "common-sub-interest_nodes"}, {"score": 0.002931569771634119, "phrase": "lower_capacity_nodes"}, {"score": 0.002915701586760994, "phrase": "higher_capacity_nodes"}, {"score": 0.002899919044381904, "phrase": "distributed_file"}, {"score": 0.002868609051439957, "phrase": "node_overload"}, {"score": 0.002776687200568343, "phrase": "proactive_file_information_collection"}, {"score": 0.0027467040582827146, "phrase": "file_requester"}, {"score": 0.0026228362985699113, "phrase": "file_information_collection"}, {"score": 0.0025874764081459385, "phrase": "based_file_information_collection"}, {"score": 0.002504540558270083, "phrase": "file_sharing_efficiency"}, {"score": 0.002470771526638146, "phrase": "bloom_filter_results"}, {"score": 0.002444084163719651, "phrase": "sixth"}, {"score": 0.0024111277643627154, "phrase": "recently_visited_file"}, {"score": 0.0023529203904298864, "phrase": "based_approach"}, {"score": 0.0023086189774576805, "phrase": "newly_added_bloom_filter_information"}, {"score": 0.0022651497894502714, "phrase": "trace-driven_experimental_results"}, {"score": 0.002246771033171679, "phrase": "real-world_planetlab_testbed"}, {"score": 0.0021222192823687164, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "high_effectiveness"}], "paper_keywords": ["P2P networks", " file sharing system", " proximity awareness", " file replication", " Bloom filter"], "paper_abstract": "Efficient file query is important to the overall performance of peer-to-peer (P2P) file sharing systems. Clustering peers by their common interests can significantly enhance the efficiency of file query. Clustering peers by their physical proximity can also improve file query performance. However, few current works are able to cluster peers based on both peer interest and physical proximity. Although structured P2Ps provide higher file query efficiency than unstructured P2Ps, it is difficult to realize it due to their strictly defined topologies. In this work, we introduce a Proximity-Aware and Interest-clustered P2P file sharing System (PAIS) based on a structured P2P, which forms physically-close nodes into a cluster and further groups physically-close and common-interest nodes into a sub-cluster based on a hierarchical topology. PAIS uses an intelligent file replication algorithm to further enhance file query efficiency. It creates replicas of files that are frequently requested by a group of physically close nodes in their location. Moreover, PAIS enhances the intra-sub-cluster file searching through several approaches. First, it further classifies the interest of a sub-cluster to a number of sub-interests, and clusters common-sub-interest nodes into a group for file sharing. Second, PAIS builds an overlay for each group that connects lower capacity nodes to higher capacity nodes for distributed file querying while avoiding node overload. Third, to reduce file searching delay, PAIS uses proactive file information collection so that a file requester can know if its requested file is in its nearby nodes. Fourth, to reduce the overhead of the file information collection, PAIS uses bloom filter based file information collection and corresponding distributed file searching. Fifth, to improve the file sharing efficiency, PAIS ranks the bloom filter results in order. Sixth, considering that a recently visited file tends to be visited again, the bloom filter based approach is enhanced by only checking the newly added bloom filter information to reduce file searching delay. Trace-driven experimental results from the real-world PlanetLab testbed demonstrate that PAIS dramatically reduces overhead and enhances the efficiency of file sharing with and without churn. Further, the experimental results show the high effectiveness of the intra-sub-cluster file searching approaches in improving file searching efficiency.", "paper_title": "A Proximity-Aware Interest-Clustered P2P File Sharing System", "paper_id": "WOS:000354526000002"}