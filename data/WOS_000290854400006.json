{"auto_keywords": [{"score": 0.03395053002397818, "phrase": "drfx_memory_model"}, {"score": 0.00481495049065317, "phrase": "efficient_processor_support"}, {"score": 0.004569905085027681, "phrase": "longstanding_challenge"}, {"score": 0.00452670409375785, "phrase": "shared-memory_concurrency"}, {"score": 0.004420472010542188, "phrase": "memory_model"}, {"score": 0.004337276328199398, "phrase": "efficient_implementation"}, {"score": 0.004275904315753662, "phrase": "strong_and_simple_guarantees"}, {"score": 0.004019797503157808, "phrase": "hardware_optimizations"}, {"score": 0.003925414526537783, "phrase": "data-race-free_programs"}, {"score": 0.0034526191487098093, "phrase": "racy_programs"}, {"score": 0.0032766780632972363, "phrase": "earlier_work"}, {"score": 0.0030802351224657673, "phrase": "potential_violations"}, {"score": 0.002895535087931938, "phrase": "data_races"}, {"score": 0.002708960273193547, "phrase": "detailed_micro-architecture_design"}, {"score": 0.0024747842618794255, "phrase": "hardware_simulator"}, {"score": 0.0022076347769273805, "phrase": "tso"}, {"score": 0.0021049977753042253, "phrase": "strong_guarantees"}], "paper_keywords": ["Design", " Performance", " memory models", " data-races", " memory model exception", " soft fences"], "paper_abstract": "A longstanding challenge of shared-memory concurrency is to provide a memory model that allows for efficient implementation while providing strong and simple guarantees to programmers. The C++0x and Java memory models admit a wide variety of compiler and hardware optimizations and provide sequentially consistent (SC) semantics for data-race-free programs. However, they either do not provide any semantics (C++0x) or provide a hard-to-understand semantics (Java) for racy programs, compromising the safety and debuggability of such programs. In earlier work we proposed the DRFx memory model, which addresses this problem by dynamically detecting potential violations of SC due to the interaction of compiler or hardware optimizations with data races and halting execution upon detection. In this paper, we present a detailed micro-architecture design for supporting the DRFx memory model, formalize the design and prove its correctness, and evaluate the design using a hardware simulator. We describe a set of DRFx-compliant complexity-effective optimizations which allow us to attain performance close to that of TSO (Total Store Model) and DRF0 while providing strong guarantees for all programs.", "paper_title": "Efficient Processor Support for DRFx, a Memory Model with Exceptions", "paper_id": "WOS:000290854400006"}