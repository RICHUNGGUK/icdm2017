{"auto_keywords": [{"score": 0.04325124255431723, "phrase": "mpi"}, {"score": 0.009252345352702716, "phrase": "rpc"}, {"score": 0.00481495049065317, "phrase": "openmp_programning_interface"}, {"score": 0.0047563776685277314, "phrase": "teamster-g._an_easy_programming_interface"}, {"score": 0.004578339731034632, "phrase": "rmi"}, {"score": 0.004556901872357751, "phrase": "user's_desire"}, {"score": 0.004473982381245469, "phrase": "distributed_resources"}, {"score": 0.003958299299658418, "phrase": "grid_computing"}, {"score": 0.003438058620195309, "phrase": "grid_environment"}, {"score": 0.003293688299319582, "phrase": "grid-enabled_software_dsm_system"}, {"score": 0.003253560798692431, "phrase": "teamster-g._however"}, {"score": 0.0030789331635764122, "phrase": "multithreaded_programming_toolkit"}, {"score": 0.002985988377995789, "phrase": "adopted_consistency_protocol"}, {"score": 0.0028958411976400646, "phrase": "user's_programming_load"}, {"score": 0.0027572166867780275, "phrase": "openmp_programming_interface"}, {"score": 0.0025615908073796027, "phrase": "novel_loop_scheduling_algorithm"}, {"score": 0.002530359917257626, "phrase": "profiled_multiprocessor_scheduling"}, {"score": 0.0023944552329463035, "phrase": "load_balance"}, {"score": 0.0022382002476510573, "phrase": "openmp_interface"}, {"score": 0.0021441057555396013, "phrase": "preliminary_performance"}, {"score": 0.0021049977753042253, "phrase": "openmp_programs"}], "paper_keywords": [""], "paper_abstract": "An easy programming interface is a key factor to affect user's desire to exploit distributed resources for resolving their problems. Recently, much effort has been put into enabling MPI, RPC, and RMI for grid computing. However, these programming inter-faces are not as easy as shared memory. To simplify the programming on the grid environment, we recently have developed a grid-enabled software DSM system called Teamster-G. However, users still must be familiar with the multithreaded programming toolkit and aware of the adopted consistency protocol. To further minimize user's programming load, we are devoted to supporting the OpenMP programming interface on Teamster-G in this study. Furthermore, we propose a novel loop scheduling algorithm called Profiled Multiprocessor Scheduling (PMS) for addressing the problem of load balance. We will describe the design and implementation of the OpenMP interface on Teamster-G, and discuss the preliminary performance of the OpenMP programs in this paper.", "paper_title": "Supporting the OpenMP programning interface on Teamster-G", "paper_id": "WOS:000237540300054"}