{"auto_keywords": [{"score": 0.04458957169940879, "phrase": "elimination_transformations"}, {"score": 0.008591878654758254, "phrase": "general_dummy_elimination"}, {"score": 0.00481495049065317, "phrase": "associative-commutative_rewriting_systems"}, {"score": 0.004013843843250455, "phrase": "dummy_elimination"}, {"score": 0.003953409087444568, "phrase": "distribution_elimination"}, {"score": 0.003245520963944678, "phrase": "dependency_pairs"}, {"score": 0.0029629009627331355, "phrase": "essential_property"}, {"score": 0.0025843206540392184, "phrase": "elimination_transformation"}, {"score": 0.002220006888496082, "phrase": "corresponding_restricted_argument_filtering_transformation"}, {"score": 0.0021049977753042253, "phrase": "ac-dependency_pair_method"}], "paper_keywords": ["(AC-)termination", " (AC-)dependency pair", " argument filtering", " elimination transformation"], "paper_abstract": "To simplify the task of proving termination and AC-termination of term rewriting systems, elimination transformations have been vigorously studied since the 1990s. Dummy elimination, distribution elimination, general dummy elimination, and improved general dummy elimination are examples of elimination transformations. In this paper we clarify the essence of elimination transformations based on the notion of dependency pairs. We first present a theorem that gives a general and essential property for elimination transformations, making them sound with AC-termination. Based on the theorem, we design an elimination transformation called the argument filtering transformation. Next, we clarify the relation among various elimination transformations by comparing them with a corresponding restricted argument filtering transformation. Finally, we compare the AC-dependency pair method with the argument filtering transformation.", "paper_title": "Elimination transformations for associative-commutative rewriting systems", "paper_id": "WOS:000243690800003"}