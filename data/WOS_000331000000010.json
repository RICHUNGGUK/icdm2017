{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "misuse_cases"}, {"score": 0.04968510255692419, "phrase": "mal-activity_diagrams"}, {"score": 0.004658426838467567, "phrase": "functional_security_analysis"}, {"score": 0.0045820747375409435, "phrase": "secure_software_engineering"}, {"score": 0.004522971495176988, "phrase": "proposed_technique"}, {"score": 0.004488384083300084, "phrase": "software_systems"}, {"score": 0.0043066860455264, "phrase": "harmful_software_technologies"}, {"score": 0.0039649719120779066, "phrase": "functional_security_requirements"}, {"score": 0.0039323225960857956, "phrase": "security_concerns"}, {"score": 0.0038678251731669865, "phrase": "development_life_cycle"}, {"score": 0.003804381587788162, "phrase": "system_designers"}, {"score": 0.003726533059542558, "phrase": "security_mechanisms"}, {"score": 0.003680587852807675, "phrase": "system_design"}, {"score": 0.0036052633308076933, "phrase": "external_defensive_mechanisms"}, {"score": 0.0035461111918923117, "phrase": "model-driven_engineering_process"}, {"score": 0.0033190180867511605, "phrase": "systematic_approach"}, {"score": 0.0031064226956732497, "phrase": "human_skill"}, {"score": 0.002907405102646616, "phrase": "security_requirements"}, {"score": 0.002778006389296707, "phrase": "insecure_system"}, {"score": 0.002709862658377861, "phrase": "authoring_structure"}, {"score": 0.0025892330566358503, "phrase": "desired_model_transformation"}, {"score": 0.00240328454980006, "phrase": "former_well-known_hacker"}, {"score": 0.0023834640793589435, "phrase": "mitnick"}, {"score": 0.002363822258365393, "phrase": "simon"}, {"score": 0.0022773309395419427, "phrase": "human_element"}, {"score": 0.0022399188408111586, "phrase": "wiley"}, {"score": 0.002221441363605067, "phrase": "indianapolis"}, {"score": 0.0021049977753042253, "phrase": "correct_mal-activity_diagrams"}], "paper_keywords": ["Model transformation", " Misuse cases", " Mal-activity diagrams", " Metamodels"], "paper_abstract": "Secure software engineering is concerned with developing software systems that will continue delivering its intended functionality despite a multitude of harmful software technologies that can attack these systems from anywhere and at anytime. Misuse cases and mal-activity diagrams are two techniques to model functional security requirements address security concerns early in the development life cycle. This allows system designers to equip their systems with security mechanisms built within system design rather than relying on external defensive mechanisms. In a model-driven engineering process, misuse cases are expected to drive the construction of mal-activity diagrams. However, a systematic approach to transform misuse cases into mal-activity diagrams is missing. Therefore, this process remains dependent on human skill and judgment, which raises the risk of developing mal-activity diagrams that are inconsistent with the security requirements described in misuse cases, leading to the development of an insecure system. This paper presents an authoring structure for misuse cases and a transformation technique to systematically perform this desired model transformation. A study was conducted to evaluate the proposed technique using 46 attack stories outlined in a book by a former well-known hacker (Mitnick and Simon in The art of deception: controlling the human element of security, Wiley, Indianapolis, 2002). The results indicate that applying the proposed technique produces correct mal-activity diagrams from misuse cases.", "paper_title": "From misuse cases to mal-activity diagrams: bridging the gap between functional security analysis and design", "paper_id": "WOS:000331000000010"}