{"auto_keywords": [{"score": 0.0367698002611785, "phrase": "crawling_phase"}, {"score": 0.029781621838727648, "phrase": "field_value_pairs"}, {"score": 0.00481495049065317, "phrase": "web_applications"}, {"score": 0.004755054742217193, "phrase": "production_environment"}, {"score": 0.004503959683578956, "phrase": "web_application_vulnerability_assessment"}, {"score": 0.004410938507689426, "phrase": "vulnerability_assessment"}, {"score": 0.004283913685201902, "phrase": "vulnerability_scanner"}, {"score": 0.0039737570920809215, "phrase": "first_phase"}, {"score": 0.003795335309109018, "phrase": "second_phase"}, {"score": 0.0037168948492715386, "phrase": "malformed_values"}, {"score": 0.003535165233011893, "phrase": "known_vulnerability_patterns"}, {"score": 0.003092690568543981, "phrase": "main_challenges"}, {"score": 0.003066945490483524, "phrase": "crawling_web_applications"}, {"score": 0.00300351371036355, "phrase": "web_forms"}, {"score": 0.002978508766388785, "phrase": "correct_values"}, {"score": 0.0028926147550022607, "phrase": "web_vulnerability_scanners"}, {"score": 0.0028327783069076883, "phrase": "generic_list"}, {"score": 0.0026941587813581252, "phrase": "new_pairs"}, {"score": 0.002627407106087633, "phrase": "novel_method"}, {"score": 0.002594652434287807, "phrase": "candidate_web_form_field_values"}, {"score": 0.0023665766694993535, "phrase": "form_fields_values"}, {"score": 0.002337066031028783, "phrase": "client_side_code"}, {"score": 0.002298288831092204, "phrase": "candidate_values"}, {"score": 0.0022696277881969896, "phrase": "external_data_source"}, {"score": 0.0022133711375320244, "phrase": "proposed_method"}, {"score": 0.0021049977753042253, "phrase": "dynamic_vulnerability_assessment"}], "paper_keywords": ["Web vulnerability Scanner", " Crawling", " Web forms", " Fields values", " Deep web"], "paper_abstract": "Usually organizations deploy web applications into the production environment with vulnerabilities. To avoid it, organizations need to run a web application vulnerability assessment. The most prevalent kind of vulnerability assessment is when the tester uses a vulnerability scanner. This assessment can be divided into two phases: crawling and testing. The purpose of the first phase is to gather all the access points of the application. In the second phase the tester sends some malformed values to the application, and then analyze the response looking for known vulnerability patterns. The crawling phase is critical because if the tester cannot reach the applications content, he or she couldn't test that content to find vulnerabilities. One of the main challenges of crawling web applications are to fill out web forms with correct values. To face this challenge, web vulnerability scanners used to include a generic list of field value pairs. These scanners also let the tester to add new pairs. This paper presents a novel method for searching candidate web form field values. The challenge is to map more applications content than using the field value pairs included by default. Our method will try to get form fields values executing the client side code and looking for candidate values in an external data source.We have test the proposed method and the experiments show that it can improve the crawling phase of dynamic vulnerability assessment.", "paper_title": "Web from preprocessor for crawling", "paper_id": "WOS:000360564600020"}