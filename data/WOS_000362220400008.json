{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "malicious_data"}, {"score": 0.004724020632103649, "phrase": "deallocated_java_objects"}, {"score": 0.004634799977448855, "phrase": "dalvik_vm."}, {"score": 0.004461359547152617, "phrase": "data_exposure"}, {"score": 0.004404994123834589, "phrase": "main_memory"}, {"score": 0.004321772629297024, "phrase": "insecure_deallocation"}, {"score": 0.004081385289516914, "phrase": "common_memory_management_schemes"}, {"score": 0.003978866233891427, "phrase": "declarative_approaches"}, {"score": 0.003903663808332582, "phrase": "unreasonably_long_data_lifetime"}, {"score": 0.003829877278269543, "phrase": "programming_language_level"}, {"score": 0.003663067281537946, "phrase": "current_platforms"}, {"score": 0.003459191419478298, "phrase": "confidential_data"}, {"score": 0.00337224813954299, "phrase": "particularly_difficult_case"}, {"score": 0.0033297803960132084, "phrase": "java"}, {"score": 0.0031845067058084583, "phrase": "specific_implementation"}, {"score": 0.0030847461428168614, "phrase": "dalvik_vm_runtime_environment"}, {"score": 0.002988101395789399, "phrase": "application_level_programmer"}, {"score": 0.002950334543176733, "phrase": "android"}, {"score": 0.0028397103530211415, "phrase": "garbage_collection"}, {"score": 0.002548331088496964, "phrase": "performance_impact"}, {"score": 0.0023013968622710847, "phrase": "freed_java_objects"}, {"score": 0.0022293632828683683, "phrase": "ram"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Secure deallocation", " Garbage collection", " Android Dalvik VM"], "paper_abstract": "We study the problem of data exposure in main memory caused by insecure deallocation, which is still the default in all common memory management schemes. We propose declarative approaches to handle unreasonably long data lifetime at the programming language level, and present several directions on how current platforms can be improved to minimize the lifetime of confidential data. For the particularly difficult case of Java with its automated garbage collection approach, we present a specific implementation of our approach for the Dalvik VM runtime environment. We give the application level programmer of Android more control over memory by making garbage collection predictable, and by providing the ability to explicitly override and free memory. While the performance impact arising from our approach is negligible in most scenarios, we prove its effectiveness by validating that no freed Java objects can be traced in RAM at runtime anymore. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Secure garbage collection: Preventing malicious data harvesting from deallocated Java objects inside the Dalvik VM", "paper_id": "WOS:000362220400008"}