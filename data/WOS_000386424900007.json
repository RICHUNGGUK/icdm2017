{"auto_keywords": [{"score": 0.041843926397594905, "phrase": "s-store"}, {"score": 0.010087771729390894, "phrase": "h-store"}, {"score": 0.00481495049065317, "phrase": "meets_transaction_processing"}, {"score": 0.004653667500876187, "phrase": "real-time_applications"}, {"score": 0.004459605573798577, "phrase": "short_atomic_computations"}, {"score": 0.00402610372759447, "phrase": "single_system"}, {"score": 0.003825362190580511, "phrase": "oltp"}, {"score": 0.003697100573612401, "phrase": "simple_transaction_model"}, {"score": 0.0035731269727067496, "phrase": "traditional_oltp_system"}, {"score": 0.003468053168607071, "phrase": "stream-oriented_guarantees"}, {"score": 0.003104038398386081, "phrase": "transaction_processing_facilities"}, {"score": 0.0029491324941225356, "phrase": "additional_features"}, {"score": 0.002850168497994985, "phrase": "similar_implementations"}, {"score": 0.00268488398249084, "phrase": "higher_throughput"}, {"score": 0.0025947642929906407, "phrase": "equivalent_deployment"}, {"score": 0.0023824468367751365, "phrase": "modest_amount"}, {"score": 0.002362192695471035, "phrase": "new_functionality"}, {"score": 0.0022634701016820587, "phrase": "esper"}, {"score": 0.0022442249871042026, "phrase": "apache_storm"}, {"score": 0.0021049977753042253, "phrase": "stronger_correctness_guarantees"}], "paper_keywords": [""], "paper_abstract": "Stream processing addresses the needs of real-time applications. Transaction processing addresses the coordination and safety of short atomic computations. Heretofore, these two modes of operation existed in separate, stove-piped systems. In this work, we attempt to fuse the two computational paradigms in a single system called S-Store. In this way, S-Store can simultaneously accommodate OLTP and streaming applications. We present a simple transaction model for streams that integrates seamlessly with a traditional OLTP system, and provides both ACID and stream-oriented guarantees. We chose to build S-Store as an extension of H-Store - an open-source, in-memory, distributed OLTP database system. By implementing S-Store in this way, we can make use of the transaction processing facilities that H-Store already provides, and we can concentrate on the additional features that are needed to support streaming. Similar implementations could be done using other main-memory OLTP platforms. We show that we can actually achieve higher throughput for streaming workloads in S-Store than an equivalent deployment in H-Store alone. We also show how this can be achieved within H-Store with the addition of a modest amount of new functionality. Furthermore, we compare S-Store to two state-of-the-art streaming systems, Esper and Apache Storm, and show how S-Store can sometimes exceed their performance while at the same time providing stronger correctness guarantees.", "paper_title": "S-Store: Streaming Meets Transaction Processing", "paper_id": "WOS:000386424900007"}