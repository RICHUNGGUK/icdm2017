{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "source_code"}, {"score": 0.02192541109299893, "phrase": "use_cases"}, {"score": 0.010327087937538244, "phrase": "software_system"}, {"score": 0.0067764312346825905, "phrase": "use_case_identification"}, {"score": 0.004630055463858585, "phrase": "important_problem"}, {"score": 0.00459393336391459, "phrase": "software_maintenance"}, {"score": 0.004365881789903319, "phrase": "behavioral_requirements"}, {"score": 0.0041328796505374155, "phrase": "use_case_model"}, {"score": 0.003958529104387973, "phrase": "novel_approach"}, {"score": 0.0038363485899400285, "phrase": "central_idea"}, {"score": 0.003703380599999214, "phrase": "branch_statements"}, {"score": 0.0036600862989330106, "phrase": "primary_mechanism"}, {"score": 0.0034375594065869032, "phrase": "static_representation"}, {"score": 0.0034107088717109857, "phrase": "software_systems"}, {"score": 0.0033708244679086265, "phrase": "branch_information"}, {"score": 0.0033314049082500794, "phrase": "traditional_call_graph"}, {"score": 0.0028588847851995533, "phrase": "brcg."}, {"score": 0.0026431267487109543, "phrase": "pruned_brcg"}, {"score": 0.0025215486544004134, "phrase": "human_experts"}, {"score": 0.0024436119167523156, "phrase": "pruned_brcg._overall"}, {"score": 0.0023773911659018803, "phrase": "intensive_human_involvement"}, {"score": 0.002206536029072657, "phrase": "case_studies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["use case", " software maintenance", " software metrics", " program comprehension", " reverse engineering", " branch-reserving call graph"], "paper_abstract": "Understanding the behavior of a software system is an important problem in software maintenance. As use cases have been accepted as an effective means for describing behavioral requirements for a software system, it should be helpful for maintainers to acquire the use case model from source code. In this paper, we propose a novel approach to identifying use cases in source code. The central idea of our approach is based on the observation that branch statements are a primary mechanism to separate one use case from another in source code. Following this idea, we design a static representation of software systems through incorporating branch information into the traditional call graph, which is named the Branch-Reserving Call Graph (BRCG). To effectively use this representation for use case identification, branches that do not serve as the separations of use cases should be pruned off in the BRCG. In this paper, we also provide a metric-based heuristic to automate this pruning. From the pruned BRCG, use cases, which may just undergo some modifications from human experts, can be generated through traversing the pruned BRCG. Overall, our method can effectively reduce the intensive human involvement in use case identification. We have also performed two case studies for this method on two shareware systems. The results from the case studies can confirm the effectiveness of our approach. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Identifying use cases in source code", "paper_id": "WOS:000242249600010"}