{"auto_keywords": [{"score": 0.04639215358795362, "phrase": "ssa_form"}, {"score": 0.00481495049065317, "phrase": "back-translation_algorithms"}, {"score": 0.004772367030970874, "phrase": "static_single_assignment_forms"}, {"score": 0.004709193603747991, "phrase": "static_single_assignment_form"}, {"score": 0.004565007074039171, "phrase": "popular_intermediate_representation"}, {"score": 0.004121490798711703, "phrase": "hypothetical_function"}, {"score": 0.0036715973701254823, "phrase": "normal_form"}, {"score": 0.0036390887584943723, "phrase": "code_generation"}, {"score": 0.003314591878914152, "phrase": "briggs_et_al"}, {"score": 0.0032272929113113203, "phrase": "sreedhar_et_al"}, {"score": 0.003114449258490062, "phrase": "almost_no_research"}, {"score": 0.0030595112110658675, "phrase": "ssa_back-translation_algorithms"}, {"score": 0.0027741761880779535, "phrase": "briggs'_algorithm"}, {"score": 0.002641621667026613, "phrase": "spec_benchmarks"}, {"score": 0.0025492038831408715, "phrase": "sreedhar's_method"}, {"score": 0.0023845255359681143, "phrase": "briggs'_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Static single assignment form", " Back-translation", " Intermediate language", " Machine-independent program transformation", " Compiler"], "paper_abstract": "The static single assignment form (SSA form) is a popular intermediate representation in compilers. In the SSA form, the definition of each variable textually appears only once in the program by using a hypothetical function called a phi-function. Because these functions are nonexecutable, it is necessary to delete the phi-functions and return the SSA form to the normal form before code generation. This conversion is called SSA back-translation. Two major algorithms exist for SSA back-translation. One by Briggs et al., the other by Sreedhar et al. To date, there has been almost no research that compares these SSA back-translation algorithms. In this paper, we clarify the merits and demerits of these algorithms. We also propose an improvement to Briggs' algorithm. We then compare the three methods through experiments using the SPEC benchmarks. Our experiments show that in most cases, Sreedhar's method is the more favorable. The efficiency of its object code is better than that from Briggs' method by a few percent in general, up to a maximum of 28%. The experiments have also clarified several characteristic features of these methods. (C) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "Comparison and evaluation of back-translation algorithms for static single assignment forms", "paper_id": "WOS:000262973600003"}