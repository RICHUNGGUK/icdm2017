{"auto_keywords": [{"score": 0.02929712519086578, "phrase": "bondhu"}, {"score": 0.00481495049065317, "phrase": "layout_techniques"}, {"score": 0.004692227830462433, "phrase": "online_social_network_data"}, {"score": 0.0045726187330434025, "phrase": "social_networking_applications'_disk_access_patterns"}, {"score": 0.0040186038781533946, "phrase": "today's_disk_layout_techniques"}, {"score": 0.003767203575060969, "phrase": "social_networking_workloads"}, {"score": 0.0033971539563683174, "phrase": "authors'_disk_layout_techniques"}, {"score": 0.0031435968684569112, "phrase": "social_graph"}, {"score": 0.0030239842475439814, "phrase": "placement_decisions"}, {"score": 0.0029089095588612007, "phrase": "read_latency"}, {"score": 0.0021601997088758957, "phrase": "median_response_time"}, {"score": 0.0021049977753042253, "phrase": "online_social_network_operations"}], "paper_keywords": [""], "paper_abstract": "Social networking applications' disk access patterns differ from those of traditional applications. However, today's disk layout techniques aren't adapted to social networking workloads, and thus their performance suffers. The authors' disk layout techniques leverage community structure in a social graph to make placement decisions that optimize read latency. Their layout manager, Bondhu, incorporates these techniques and is integrated into the popular Neo4j graph database engine. Experimental results show that Bondhu improves the median response time for online social network operations by as much as 48 percent.", "paper_title": "Disk Layout Techniques for Online Social Network Data", "paper_id": "WOS:000303277200005"}