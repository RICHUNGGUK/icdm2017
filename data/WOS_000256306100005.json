{"auto_keywords": [{"score": 0.04937176974353987, "phrase": "web_services"}, {"score": 0.010612387000973441, "phrase": "behavioral_compatibility"}, {"score": 0.009426840267294213, "phrase": "web_service_b"}, {"score": 0.00800816548708639, "phrase": "web_service"}, {"score": 0.0040571383470418085, "phrase": "web_service_a"}, {"score": 0.0035216195857272403, "phrase": "state_machines"}, {"score": 0.0034695189961509625, "phrase": "guarded_transitions"}, {"score": 0.0030794433253250476, "phrase": "extended_version"}, {"score": 0.0030113280682863234, "phrase": "conventional_methods_rule"}, {"score": 0.0028581775908203683, "phrase": "object-oriented_paradigm"}, {"score": 0.002499094513009327, "phrase": "state_machine"}, {"score": 0.0023543037128493345, "phrase": "wsdl"}, {"score": 0.002319431279824863, "phrase": "wsci."}, {"score": 0.0021049977753042253, "phrase": "extended_methods_rule"}], "paper_keywords": ["web services", " behavioral compatibility", " state diagrams"], "paper_abstract": "This paper proposed an approach to checking behavioral compatibility between Web services. If Web service B can be used in replacement of Web service A in such a way that the replacement is transparent to clients, Web service B is compatible to Web service A. We use state machines with guarded transitions to specify behaviors of Web services. To check compatibility between two Web services, we propose an extended version of the conventional methods rule, which has been used in object-oriented paradigm. To support our approach, we have implemented a tool. First, the tool constructs a state machine for a Web service whose behavior is expressed in WSDL and WSCI. Then, the tool can verify compatibility between Web services by using the extended methods rule.", "paper_title": "An approach to checking behavioral compatibility between web services", "paper_id": "WOS:000256306100005"}