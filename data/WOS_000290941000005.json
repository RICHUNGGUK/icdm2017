{"auto_keywords": [{"score": 0.046398885159174105, "phrase": "on-demand_software"}, {"score": 0.015076231563581746, "phrase": "legacy_software"}, {"score": 0.011296771671824002, "phrase": "remote_visits"}, {"score": 0.00481495049065317, "phrase": "on-demand_legacy_desktop_software"}, {"score": 0.004747620102130588, "phrase": "user-level_virtualization_technologies"}, {"score": 0.004529881123652277, "phrase": "existing_windows_desktop_applications"}, {"score": 0.004241648852523704, "phrase": "friendly_and_compatible_method"}, {"score": 0.003953068310598579, "phrase": "client-end_file_system"}, {"score": 0.003789395499639015, "phrase": "windows_user-space_file_system"}, {"score": 0.0034984340449789745, "phrase": "local_file_system"}, {"score": 0.0034171734618737436, "phrase": "quite_a_few_optimizations"}, {"score": 0.0031995142224983094, "phrase": "local_cache"}, {"score": 0.003081400693055518, "phrase": "-addressable_storage"}, {"score": 0.00288508742557518, "phrase": "io"}, {"score": 0.0028047899594686003, "phrase": "software_execution"}, {"score": 0.002778529097886437, "phrase": "detailed_access-pattern_analyses"}, {"score": 0.0027012086158226456, "phrase": "file_system"}, {"score": 0.0024014759148123736, "phrase": "corresponding_overhead"}, {"score": 0.0022589720760078274, "phrase": "compatible_and_networked_computer"}, {"score": 0.0021049977753042253, "phrase": "local_host"}], "paper_keywords": ["on-demand software", " software as a service", " user-space file system", " cloud storage"], "paper_abstract": "Some user-level virtualization technologies have been used to convert legacy software (like the existing Windows desktop applications) into the on-demand software without any modification. To give the client a friendly and compatible method to access on-demand legacy software across the Internet, this paper presents a client-end file system for this usage case. It is a Windows user-space file system based on the cloud storage (where the on-demand software is stored), which converts the local file system accesses into remote visits. Quite a few optimizations are adopted and adjusted to suit the file-access-pattern of on-demand software, including the local cache, metadata/data/software pre-fetch and content-addressable storage (CAS), to decrease the number of remote visits and/or to overlap IO (input/output) operations with software execution. Detailed access-pattern analyses are also presented. This file system has been implemented and tests show that it is practical for much daily-used software-a local cache of limited size can provide up to 80% hit ratio and the corresponding overhead of running-time is about 37%. Owing to this method, on any compatible and networked computer, a user can use his/her personalized software conveniently although it does not exist on the local host.", "paper_title": "A user-space file system for on-demand legacy desktop software", "paper_id": "WOS:000290941000005"}