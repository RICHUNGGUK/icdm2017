{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "static_analysis_of_synchronous_programs"}, {"score": 0.004681971826924847, "phrase": "efficient_design"}, {"score": 0.004616859702338596, "phrase": "multi-clocked_embedded_systems"}, {"score": 0.004334832612029898, "phrase": "sound_abstraction"}, {"score": 0.0042446888127531945, "phrase": "efficient_static_analysis"}, {"score": 0.004185632403886255, "phrase": "synchronous_programs"}, {"score": 0.004127394241838696, "phrase": "multi-clock_embedded_systems"}, {"score": 0.004069963083642548, "phrase": "signal."}, {"score": 0.003929843413153981, "phrase": "boolean_theory"}, {"score": 0.0038751504050385183, "phrase": "numeric_interval_approximation"}, {"score": 0.003768028741967194, "phrase": "clock_relations"}, {"score": 0.0036382660173943393, "phrase": "logical_and_numerical_expressions"}, {"score": 0.0033919477901198716, "phrase": "proposed_solution"}, {"score": 0.003162252895465901, "phrase": "empty_clocks"}, {"score": 0.0031182092708983184, "phrase": "mutual_exclusion"}, {"score": 0.0028068030356445894, "phrase": "component_activations"}, {"score": 0.002767696345005216, "phrase": "clock_inclusion"}, {"score": 0.002456486927713543, "phrase": "signal_compiler"}, {"score": 0.0023223663501882917, "phrase": "smaller_footprint"}, {"score": 0.0021049977753042253, "phrase": "new_abstraction"}], "paper_keywords": ["Verification", " Design", " Reliability", " Embedded systems", " static analysis", " abstraction", " abstract clocks", " synchronous programming", " compilation"], "paper_abstract": "In this paper, we propose a sound abstraction for an efficient static analysis of synchronous programs describing multi-clock embedded systems in SIGNAL. This abstraction combines the Boolean theory and numeric interval approximation to adequately address clock relations defined as combinations of logical and numerical expressions. Through a few examples, we show how the proposed solution is used to determine absence of reaction captured by empty clocks; mutual exclusion captured by two or more clocks whose associated signals never occur at the same time; or hierarchical control of component activations via clock inclusion. We also show this analysis improves the quality of the code generated automatically by the SIGNAL compiler, e. g., a code with smaller footprint, or a code executed more efficiently thanks to optimizations enabled by the new abstraction.", "paper_title": "Static Analysis of Synchronous Programs in Signal for Efficient Design of Multi-Clocked Embedded Systems", "paper_id": "WOS:000294608700008"}