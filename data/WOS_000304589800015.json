{"auto_keywords": [{"score": 0.05005284721069981, "phrase": "one-dimensional_cellular_automata"}, {"score": 0.041712156789843864, "phrase": "ca"}, {"score": 0.0041637779492720295, "phrase": "intrinsic_universality"}, {"score": 0.003378385493203297, "phrase": "computation_model"}, {"score": 0.0031990183472675377, "phrase": "space-time_diagram"}, {"score": 0.003056819704624705, "phrase": "dependency_graph"}, {"score": 0.002816556934231128, "phrase": "treillis_automata"}, {"score": 0.0024572448003065423, "phrase": "simple_uniform_simulation"}, {"score": 0.0021049977753042253, "phrase": "intrinsic_universal_ca."}], "paper_keywords": ["Cellular automata", " Simulation", " Universality", " Programmation"], "paper_abstract": "This article shows how universal computations can be achieved on one-dimensional cellular automata. We are interested in intrinsic universality: we want a CA in which any other CA can be represented and simulated with no intermediate coding relevant to another computation model. We first abstract the space-time diagram in favor of the dependency graph. Then we show how such a dependency graph (via treillis automata) can be realized by what is called a grid, leading to a simple uniform simulation. Finally, we exhibit a very simple universal brick that can be used in grids to obtain an intrinsic universal CA.", "paper_title": "Grids and universal computations on one-dimensional cellular automata", "paper_id": "WOS:000304589800015"}