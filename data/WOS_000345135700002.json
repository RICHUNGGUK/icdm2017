{"auto_keywords": [{"score": 0.027101864185063367, "phrase": "additional_transition_constraints"}, {"score": 0.00481495049065317, "phrase": "muc_extraction"}, {"score": 0.0047732596509542135, "phrase": "unsatisfiable_constraint_networks"}, {"score": 0.004690952711665194, "phrase": "applied_artificial_intelligence"}, {"score": 0.004337710093279712, "phrase": "discrete_variables"}, {"score": 0.004225950334493496, "phrase": "allowed_instantiation_values"}, {"score": 0.004063664475797303, "phrase": "constraint_network"}, {"score": 0.003757480190200645, "phrase": "actual_reasons"}, {"score": 0.003660614912817745, "phrase": "global_solution"}, {"score": 0.0034291991359158827, "phrase": "unsatisfiable_constraint_network"}, {"score": 0.003384695931421288, "phrase": "useful_process"}, {"score": 0.003048782877550259, "phrase": "bad_worst-case_computational_complexity_results"}, {"score": 0.0027581067089091434, "phrase": "successive_identification"}, {"score": 0.0027341763737751467, "phrase": "so-called_transition_constraints"}, {"score": 0.002629026692001082, "phrase": "local_search"}, {"score": 0.002516917671182532, "phrase": "main_iteration_step"}, {"score": 0.002473420909291381, "phrase": "general_constraint_networks"}, {"score": 0.0023068049914566975, "phrase": "model_rotation"}, {"score": 0.00226693109377084, "phrase": "sat-related_technology"}], "paper_keywords": ["Constraint solving problems", " CSP", " Constraint network", " MUC", " Unsatisfiable core", " Stochastic local search", " SLS"], "paper_abstract": "One very fertile domain of applied Artificial Intelligence is constraint solving technologies. Especially, constraint networks that concern problems that can be represented using discrete variables, together with constraints on allowed instantiation values for these variables. Every solution to a constraint network must satisfy every constraint. When no solution exists, the user might want to know the actual reasons leading to the absence of global solution. In this respect, extracting MUCs (Minimal Unsatisfiable Cores) from an unsatisfiable constraint network is a useful process when causes of unsatisfiability must be understood so that the network can be re-engineered and relaxed to become satisfiable. Despite bad worst-case computational complexity results, various MUC-finding approaches that appear tractable for many real-life instances have been proposed. Many of them are based on the successive identification of so-called transition constraints. In this respect, we show how local search can be used to possibly extract additional transition constraints at each main iteration step. In the general constraint networks setting, the approach is shown to outperform a technique based on a form of model rotation imported from the SAT-related technology and that also exhibits additional transition constraints. Our extensive computational experimentations show that this enhancement also boosts the performance of state-of-the-art DC(WCORE)-like MUC extractors.", "paper_title": "Boosting MUC extraction in unsatisfiable constraint networks", "paper_id": "WOS:000345135700002"}