{"auto_keywords": [{"score": 0.025150110213468017, "phrase": "cadp"}, {"score": 0.00481495049065317, "phrase": "concurrent_c_programs"}, {"score": 0.0047804843375940835, "phrase": "cadp."}, {"score": 0.00471228691115201, "phrase": "reliable_software"}, {"score": 0.00467855218490191, "phrase": "industrial_critical_systems_benefits"}, {"score": 0.004595263305771512, "phrase": "formal_models"}, {"score": 0.004562362497952548, "phrase": "verification_tools"}, {"score": 0.004322967486451877, "phrase": "complete_model-based_methodology"}, {"score": 0.0042004472903194616, "phrase": "starting_point"}, {"score": 0.004140490129683107, "phrase": "final_reliable_code"}, {"score": 0.004096082254543022, "phrase": "verification_step"}, {"score": 0.0040086845241492424, "phrase": "high-level_models"}, {"score": 0.003798231095121328, "phrase": "existing_code"}, {"score": 0.003637822529522622, "phrase": "concurrent_c_code"}, {"score": 0.0035729944980593324, "phrase": "high-level_formal_model"}, {"score": 0.0034841647157189985, "phrase": "existing_tools"}, {"score": 0.0034467717443162015, "phrase": "basic_components"}, {"score": 0.00333697550984782, "phrase": "labeled_transition_system"}, {"score": 0.0033011569787033297, "phrase": "source_code"}, {"score": 0.003253994336864267, "phrase": "flow_control"}, {"score": 0.002984794722633428, "phrase": "namely_the_functionality"}, {"score": 0.002942138511829811, "phrase": "operating_system"}, {"score": 0.0028586409810976367, "phrase": "demand-driven_static_analyses"}, {"score": 0.00267931029131157, "phrase": "whole_proposal"}, {"score": 0.0025938977569302177, "phrase": "cadp_toolbox"}, {"score": 0.0025202582748972122, "phrase": "analysis_modules"}, {"score": 0.0024842242921857705, "phrase": "labeled_transition_systems"}, {"score": 0.00245753647863636, "phrase": "core_model"}, {"score": 0.0023791769068748194, "phrase": "existing_architecture"}, {"score": 0.0022785613865764923, "phrase": "c_program_verification"}, {"score": 0.0022138542785562444, "phrase": "extended_cadp_toolbox"}, {"score": 0.002166530105679438, "phrase": "vlts_benchmark_suite"}, {"score": 0.0021509807762081145, "phrase": "c_implementations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software model checking", " Data flow analysis", " Labeled transition system", " Boolean equation system", " CADP verification toolbox"], "paper_abstract": "The development of reliable software for industrial critical systems benefits from the use of formal models and verification tools for detecting and correcting errors as early as possible. Ideally, with a complete model-based methodology, the formal models should be the starting point to obtain the final reliable code and the verification step should be done over the high-level models. However, this is not the case for many projects, especially when integrating existing code. In this paper, we describe an approach to verify concurrent C code by automatically extracting a high-level formal model that is suitable for analysis with existing tools. The basic components of our approach are: (1) a method to construct a labeled transition system from the source code, that takes flow control and interaction among processes into account; (2) a modeling scheme of the behavior that is external to the program, namely the functionality provided by the operating system; (3) the use of demand-driven static analyses to make a further abstraction of the program, thus saving time and memory during its verification. The whole proposal has been implemented as an extension of the CADP toolbox, which already provides a variety of analysis modules for several input languages using labeled transition systems as the core model. The approach taken fits well within the existing architecture of CADP which does not need to be altered to enable C program verification. We illustrate the use of the extended CADP toolbox by considering examples of the VLTS benchmark suite and C implementations of various concurrent programs. Published by Elsevier B.V.", "paper_title": "A model-extraction approach to verifying concurrent C programs with CADP", "paper_id": "WOS:000300748000012"}