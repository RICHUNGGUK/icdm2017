{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "program_slicing"}, {"score": 0.004689650818647484, "phrase": "widespread_interest"}, {"score": 0.004487989502479992, "phrase": "source_code_analysis"}, {"score": 0.00440976345264104, "phrase": "manipulation_community"}, {"score": 0.0041102032028337366, "phrase": "large_number"}, {"score": 0.0040385352882334235, "phrase": "different_forms"}, {"score": 0.003698442219929622, "phrase": "program's_behaviour"}, {"score": 0.002941913249957503, "phrase": "formal_mechanism"}, {"score": 0.002717750004930131, "phrase": "formal_framework"}, {"score": 0.002488604965680912, "phrase": "program_projection"}, {"score": 0.002298902547676131, "phrase": "ordering_relationship"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["program slicing", " dynamic slicing", " static slicing", " conditioned slicing", " simultaneous slicing", " formal methods"], "paper_abstract": "The widespread interest in program slicing within the source code analysis and manipulation community has led to the introduction of a large number of different forms of slicing. Each preserves some aspect of a program's behaviour and simplifies the program to focus exclusively upon this behaviour. In order to understand the similarities and differences between forms of slicing, a formal mechanism is required. This paper further develops a formal framework for comparing forms of slicing using a theory of program projection. This framework is used to reveal the ordering relationship between various static, dynamic, simultaneous and conditioned forms of slicing. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "A formalisation of the relationship between forms of program slicing", "paper_id": "WOS:000240092100003"}