{"auto_keywords": [{"score": 0.04963419481547922, "phrase": "numa"}, {"score": 0.020333599194931787, "phrase": "numa_systems"}, {"score": 0.01854679137806514, "phrase": "multi-threaded_programs"}, {"score": 0.01804144377086581, "phrase": "critical_thread"}, {"score": 0.00481495049065317, "phrase": "multi-threaded_program_performance"}, {"score": 0.004681971826924847, "phrase": "nonuniform_memory_access"}, {"score": 0.004468415400599571, "phrase": "data_centers"}, {"score": 0.00436530211426514, "phrase": "previous_works"}, {"score": 0.004324723240308028, "phrase": "single-threaded_multiprogrammed_workloads"}, {"score": 0.003604421041893448, "phrase": "system_performance"}, {"score": 0.0035542408902458677, "phrase": "new_challenges"}, {"score": 0.0034238045290210534, "phrase": "single-threaded_situation"}, {"score": 0.003329117824699891, "phrase": "additional_scheduling_scheme"}, {"score": 0.0032370412139943808, "phrase": "performance_degradation"}, {"score": 0.002893434697072309, "phrase": "lagging_problem"}, {"score": 0.0028002471976921054, "phrase": "costly_remote_shared_data_accesses"}, {"score": 0.0023996890513009743, "phrase": "parsec_benchmark"}, {"score": 0.002311525062244175, "phrase": "program_performance"}, {"score": 0.0021750990136123367, "phrase": "linux_kernel_scheduling_mechanism"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multi/many-core processors", " NUMA architecture", " critical thread", " thread scheduling", " symmetrical mapping"], "paper_abstract": "The nonuniform memory access (NUMA) architecture has been used extensively in data centers. Most of the previous works used single-threaded multiprogrammed workloads to study the performance of NUMA systems, which mainly focus on two classes of problems: resource contention and data locality. However, when running multi-threaded programs on NUMA systems, the critical thread of these programs significantly influences the system performance and brings new challenges that are different from those in a single-threaded situation. In particular, an additional scheduling scheme is desired to avoid the performance degradation caused by the critical thread of multi-threaded programs running on NUMA systems. This work presents a scheduler, Symmetrical Scheduler, which successfully solves the lagging problem by balancing the number of the costly remote shared data accesses for threads on NUMA systems. To the best of our knowledge, little work has been conducted to examine the performance impacted by the critical thread of multi-threaded programs on NUMA systems. By running the PARSEC benchmark on such systems, our methodology can improve the program performance by a factor of 6% on average and achieve maximally 25.3% improvement compared with Linux kernel scheduling mechanism. Copyright (C) 2015 John Wiley & Sons, Ltd.", "paper_title": "SymS: a symmetrical scheduler to improve multi-threaded program performance on NUMA systems", "paper_id": "WOS:000368086000023"}