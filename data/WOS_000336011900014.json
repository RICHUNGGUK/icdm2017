{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "leakage_resilience"}, {"score": 0.015620840115765184, "phrase": "random_extractors"}, {"score": 0.008549215644923709, "phrase": "leakage-resilient_cryptographic_primitives"}, {"score": 0.007504345200055958, "phrase": "side-channel_attacks"}, {"score": 0.0046046429665581555, "phrase": "important_building_blocks"}, {"score": 0.004502943680955863, "phrase": "recent_efforts"}, {"score": 0.004265173275117678, "phrase": "unprotected_implementations"}, {"score": 0.003670904035061963, "phrase": "protected_instantiations"}, {"score": 0.0035555237584957455, "phrase": "classical_countermeasures"}, {"score": 0.003499195973264457, "phrase": "cryptographic_components"}, {"score": 0.0033568708392230544, "phrase": "physical_leakage_resilience"}, {"score": 0.0030991854367616737, "phrase": "leakage-resilient_stream_cipher"}, {"score": 0.0029259540174253426, "phrase": "underlying_extractor"}, {"score": 0.0028068790615886755, "phrase": "underlying_pseudo-random_generator"}, {"score": 0.0027447761472348614, "phrase": "stream_cipher"}, {"score": 0.002591303221962211, "phrase": "existing_observations"}, {"score": 0.002477878389967939, "phrase": "new_observations"}, {"score": 0.0024307967304431806, "phrase": "known_ones"}, {"score": 0.0023846075213405284, "phrase": "previous_observations"}, {"score": 0.0022729292542096077, "phrase": "obvious_theoretical_interest"}, {"score": 0.0022584385508256566, "phrase": "important_practical_significance"}, {"score": 0.0021457826677689037, "phrase": "leakage-resilient_cryptography"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Side-channel attack", " Random extractor", " Cryptographic instantiation", " Leakage resilience", " Masking and shuffling"], "paper_abstract": "Random extractors are proven to be important building blocks in constructing leakage-resilient cryptographic primitives. Nevertheless, recent efforts have shown that they are likely more leaky than other elementary components (e.g. block ciphers) in unprotected implementations of these primitives, in the context of side-channel attacks. In this context, to the adversary, the extractors themselves could become the point of interest. Therefore, this paper extends the problem of how leakage resilience of random extractors could be in the case of protected instantiations. Specifically, we investigate the feasibility of applying classical countermeasures to ameliorate leakage resilience of cryptographic components and/or primitives against side-channel attacks. Then we show how to evaluate the physical leakage resilience of these instantiations both theoretically and practically. The countermeasures considered are masking, shuffling, and the combination of both. Taking the leakage-resilient stream cipher presented at FOCS 2008 as a case of study, we not only examine the leakage resilience of the underlying extractor, but also discuss how leakages from the extractor and from the underlying pseudo-random generator respectively impact the leakage resilience of the stream cipher as a whole. On the one hand, our theoretical and experimental results, which are consistent, do justify some existing observations. On the other hand, which is more important, our results reveal some new observations that do contrast with these known ones, which explicitly indicates that previous observations are (mostly likely) incomplete. We argue that our work is of both obvious theoretical interest and important practical significance, and may help foster the further research on the design and implementation of random extractors in leakage-resilient cryptography. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "On hardening leakage resilience of random extractors for instantiations of leakage-resilient cryptographic primitives", "paper_id": "WOS:000336011900014"}