{"auto_keywords": [{"score": 0.04708600080273322, "phrase": "information_flow"}, {"score": 0.041369559181851014, "phrase": "class_initialization"}, {"score": 0.03354340758612289, "phrase": "error_recovery"}, {"score": 0.031148872652186122, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "class_initialization_in_java-like_languages"}, {"score": 0.0047588556219929756, "phrase": "language-based_information-flow_security"}, {"score": 0.004567596860086148, "phrase": "security_policies"}, {"score": 0.004461761855323898, "phrase": "language_constructs"}, {"score": 0.004257360656055417, "phrase": "understanding_information_flow"}, {"score": 0.004207734323806386, "phrase": "object-oriented_programs"}, {"score": 0.0037201996003549246, "phrase": "security_implications"}, {"score": 0.0035288860880035985, "phrase": "information_propagation"}, {"score": 0.0030833537429977797, "phrase": "type-and-effect_system"}, {"score": 0.0028568174308720167, "phrase": "arbitrary_lattice"}, {"score": 0.0028234703730349916, "phrase": "security_levels"}, {"score": 0.0027417911324611917, "phrase": "class_hierarchy"}, {"score": 0.0026781477395106993, "phrase": "field_initializers"}, {"score": 0.002600661525224505, "phrase": "class_initializers"}, {"score": 0.0023124457559811087, "phrase": "insecure_flows"}, {"score": 0.0022854384756395116, "phrase": "out-of-scope_contextual_information"}, {"score": 0.0021049977753042253, "phrase": "termination-insensitive_noninterference"}], "paper_keywords": ["Information flow control", " program analysis"], "paper_abstract": "Language-based information-flow security is concerned with specifying and enforcing security policies for information flow via language constructs. Although much progress has been made on understanding information flow in object-oriented programs, little attention has been given to the impact of class initialization on information flow. This paper turns the spotlight on security implications of class initialization. We reveal the subtleties of information propagation when classes are initialized, and demonstrate how these flows can be exploited to leak information through error recovery. Our main contribution is a type-and-effect system which tracks these information flows. The type system is parameterized by an arbitrary lattice of security levels. Flows through the class hierarchy and dependencies in field initializers are tracked by typing class initializers wherever they could be executed. The contexts in which each class can be initialized are tracked to prevent insecure flows of out-of-scope contextual information through class initialization statuses and error recovery. We show that the type system enforces termination-insensitive noninterference.", "paper_title": "Securing Class Initialization in Java-like Languages", "paper_id": "WOS:000312779000001"}