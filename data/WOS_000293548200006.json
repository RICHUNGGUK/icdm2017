{"auto_keywords": [{"score": 0.028771794242744172, "phrase": "program_authorship"}, {"score": 0.00481495049065317, "phrase": "user-defined_identifiers"}, {"score": 0.004780334370089564, "phrase": "java_source_code_authorship_identification"}, {"score": 0.004711843410316589, "phrase": "source_code"}, {"score": 0.004644329185633612, "phrase": "varying_levels"}, {"score": 0.0032601856292942106, "phrase": "source_code_author_classification"}, {"score": 0.002682133505994396, "phrase": "data_sets"}, {"score": 0.0025962638592454974, "phrase": "class_names"}, {"score": 0.002486021541116251, "phrase": "simple_variables"}, {"score": 0.002468107263634476, "phrase": "method_names"}, {"score": 0.002441477009112022, "phrase": "java_programs"}, {"score": 0.00213567715613494, "phrase": "code_plagiarism_analysis"}, {"score": 0.0021049977753042253, "phrase": "underlying_methods"}], "paper_keywords": ["Program Identifiers", " Java", " Source code", " N-gram", " Authorship Identification"], "paper_abstract": "When writing source code, programmers have varying levels of freedom when it comes to the creation and use of identifiers. Do they habitually use the same identifiers, names that are different to those used by others? Is it then possible to tell who the author of a piece of code is by examining these identifiers? If so, can we use the presence or absence of identifiers to assist in correctly classifying programs to authors? Is it possible to hide the provenance of programs by identifier renaming? In this study, we assess the importance of three types of identifiers in source code author classification for two different Java program data sets. We do this through a sequence of experiments in which we disguise one type of identifier at a time. These experiments are performed using as a tool the Source Code Author Profiles (SAP) method. The results show that, although identifiers when examined as a whole do not seem to reflect program authorship for these data sets, when examined separately there is evidence that class names do signal the author of the program. In contrast, simple variables and method names used in Java programs do not appear to reflect program authorship. On the contrary, our analysis suggests that such identifiers are so common as to mask authorship. We believe that these results have applicability in relation to the robustness of code plagiarism analysis and that the underlying methods could be valuable in cases of litigation arising from disputes over program authorship.", "paper_title": "The significance of user-defined identifiers in Java source code authorship identification", "paper_id": "WOS:000293548200006"}