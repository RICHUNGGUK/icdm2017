{"auto_keywords": [{"score": 0.049390246951185, "phrase": "javasplit"}, {"score": 0.010612387000973441, "phrase": "standard_multithreaded_java"}, {"score": 0.010090319444251058, "phrase": "distributed_execution"}, {"score": 0.004643594260262632, "phrase": "portable_runtime_environment"}, {"score": 0.004478308876320956, "phrase": "multithreaded_java_programs"}, {"score": 0.004350308086118336, "phrase": "augmented_computational_power"}, {"score": 0.004287680323820891, "phrase": "increased_memory_capacity"}, {"score": 0.00393032656248792, "phrase": "available_machines"}, {"score": 0.0038457240885563146, "phrase": "previous_works"}, {"score": 0.0037087324991876727, "phrase": "java_portability"}, {"score": 0.0036026484429137998, "phrase": "nonstandard_java_virtual_machine"}, {"score": 0.0035507476647466435, "phrase": "jvm"}, {"score": 0.0034742854447532678, "phrase": "compromise_transparency"}, {"score": 0.003399466007862412, "phrase": "user_intervention"}, {"score": 0.003048782877550259, "phrase": "heterogenous_collection"}, {"score": 0.0030048355421601705, "phrase": "java-enabled_machines"}, {"score": 0.0021670777282518424, "phrase": "operating_systems"}, {"score": 0.0021049977753042253, "phrase": "communication_hardware"}], "paper_keywords": ["distributed computing", " Java", " bytecode instrumentation", " distributed shared memory"], "paper_abstract": "JavaSplit is a portable runtime environment for distributed execution of standard multithreaded Java programs. It gains augmented computational power and increased memory capacity by distributing the threads and objects of an application among the available machines. Unlike previous works, which either forfeit Java portability by using a nonstandard Java Virtual Machine (JVM) or compromise transparency by requiring user intervention in making the application suitable for distributed execution, JavaSplit automatically executes standard multithreaded Java on any heterogenous collection of Java-enabled machines. Each machine carries out its part of the computation using nothing but its local standard (unmodified) JVM. Neither the programmer nor the person submitting the program for execution needs to be aware of JavaSplit or its distributed nature. We evaluate the efficiency of JavaSplit on several combinations of operating systems, JVM implementations, and communication hardware.", "paper_title": "A platform-independent distributed runtime for standard multithreaded java", "paper_id": "WOS:000238022500002"}