{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "max-kernel_search"}, {"score": 0.004160681347769684, "phrase": "countless_domains"}, {"score": 0.004058180509184539, "phrase": "wide_applicability"}, {"score": 0.003958194802333944, "phrase": "image_matching"}, {"score": 0.0039300808153474205, "phrase": "information_retrieval"}, {"score": 0.0038744481564444173, "phrase": "similarity_search"}, {"score": 0.0038332390893263844, "phrase": "collaborative_filtering"}, {"score": 0.003646629717560631, "phrase": "generalized_technique"}, {"score": 0.0035189057079817285, "phrase": "single-tree_algorithm"}, {"score": 0.0034077704063304208, "phrase": "max-kernel_solution"}, {"score": 0.003371508176308189, "phrase": "single_query_point"}, {"score": 0.0032302647179383915, "phrase": "reference_objects"}, {"score": 0.002923214590192792, "phrase": "query_points"}, {"score": 0.0024984517279573906, "phrase": "abstract_objects"}, {"score": 0.0024368006923629476, "phrase": "explicit_representation"}, {"score": 0.0023936956017015696, "phrase": "kernel_space"}, {"score": 0.0023766673143502384, "phrase": "empirical_results"}, {"score": 0.0023015232625177755, "phrase": "five_orders"}, {"score": 0.0022851491693940272, "phrase": "magnitude_speedup"}, {"score": 0.0022050057829960694, "phrase": "approximate_extensions"}, {"score": 0.002181514206602054, "phrase": "fastmks_algorithms"}, {"score": 0.0021049977753042253, "phrase": "wiley_periodicals"}], "paper_keywords": ["similarity search", " dual-tree algorithms", " branch-and-bound", " cover trees", " kernel trick"], "paper_abstract": "The problem of max-kernel search arises everywhere: given a query point p(q), a set of reference objects S-r and some kernel K, find argmax(pr is an element of Sr) K(p(q), p(r)). Max-kernel search is ubiquitous and appears in countless domains of science, thanks to the wide applicability of kernels. A few domains include image matching, information retrieval, bio-informatics, similarity search, and collaborative filtering (to name just a few). However, there is no generalized technique for efficiently solving max-kernel search. This paper presents a single-tree algorithm called single-tree FastMKS which returns the max-kernel solution for a single query point in provably O(log N) time (where N is the number of reference objects), and also a dual-tree algorithm (dual-tree FastMKS) which is useful for max-kernel search with many query points. If the set of query points is of size O(N), this algorithm returns a solution in provably O(N) time, which is significantly better than the O(N-2) linear scan solution; these bounds are dependent on the expansion constant of the data. These algorithms work for abstract objects, as they do not require explicit representation of the points in kernel space. Empirical results for a variety of datasets show up to five orders of magnitude speedup in some cases. In addition, we present approximate extensions of the FastMKS algorithms that can achieve further speedups. (C) 2014 Wiley Periodicals, Inc.", "paper_title": "Dual-Tree Fast Exact Max-Kernel Search", "paper_id": "WOS:000364191700002"}