{"auto_keywords": [{"score": 0.04085533311726174, "phrase": "reconfigurable_hardware"}, {"score": 0.03312665937810415, "phrase": "rns"}, {"score": 0.00481495049065317, "phrase": "programmable_and_reconfigurable_cryptography"}, {"score": 0.0045200127552893704, "phrase": "design_automation"}, {"score": 0.004439097815805505, "phrase": "modular_arithmetic"}, {"score": 0.004262273304740847, "phrase": "comprehensive_set"}, {"score": 0.00414830454375092, "phrase": "programming_language"}, {"score": 0.004110993414942228, "phrase": "respective_compiler"}, {"score": 0.0040373708328770306, "phrase": "parallel_computation_platforms"}, {"score": 0.003983016985197904, "phrase": "graphical_processing_units"}, {"score": 0.0038242899532391914, "phrase": "input_algorithm"}, {"score": 0.003755782496223915, "phrase": "high-level_programming_language"}, {"score": 0.0037052319241099954, "phrase": "crns"}, {"score": 0.003369669078274226, "phrase": "fully_functional_accelerator"}, {"score": 0.003294350220187021, "phrase": "embedded_systems"}, {"score": 0.0031062822219953524, "phrase": "arithmetic's_parallelization_properties"}, {"score": 0.0030644247579222333, "phrase": "fully_automated_way"}, {"score": 0.002915701586760994, "phrase": "mathematical_details"}, {"score": 0.0028764048059439205, "phrase": "employed_arithmetic"}, {"score": 0.002687702958515561, "phrase": "proposed_framework"}, {"score": 0.0026634937939104177, "phrase": "experimental_results"}, {"score": 0.0026157259734105, "phrase": "supported_back-ends"}, {"score": 0.0025923609702853674, "phrase": "gpu"}, {"score": 0.002568824863790892, "phrase": "hdl"}, {"score": 0.002466303439899648, "phrase": "modular_exponentiation"}, {"score": 0.0023571835517819124, "phrase": "elliptic_curve"}, {"score": 0.002336033906438669, "phrase": "ec"}, {"score": 0.0022631003204259224, "phrase": "competitive_latency"}, {"score": 0.0022224972632835416, "phrase": "minimum_design_effort"}, {"score": 0.0021049977753042253, "phrase": "dedicated_solutions"}], "paper_keywords": ["Algorithms", " Residue Number System (RNS)", " modular arithmetic", " cryptography", " general-purpose graphical processing units (GPGPU)", " framework"], "paper_abstract": "This article proposes the Computing with the Residue Number System (CRNS) framework, which aims at the design automation of accelerators for Modular Arithmetic (MA). The framework provides a comprehensive set of tools ranging from a programming language and respective compiler to back-ends targeting parallel computation platforms such as Graphical Processing Units (GPUs) and reconfigurable hardware. Given an input algorithm described with a high-level programming language, the CRNS can be used to obtain in a few seconds the corresponding optimized Parallel Thread Execution (PTX) program ready to be run on GPUs or the Hardware Description Language (HDL) specification of a fully functional accelerator suitable for reconfigurable hardware and embedded systems. The resulting framework's implementations benefit from the Residue Number System (RNS) arithmetic's parallelization properties in a fully automated way. Designers do not need to be familiar with the mathematical details concerning the employed arithmetic, namely the RNS representation. In order to thoroughly describe and evaluate the proposed framework, experimental results obtained for the supported back-ends (GPU and HDL) are presented targeting the implementation of the modular exponentiation used in the Rivest-Shamir-Adleman (RSA) algorithm and Elliptic Curve (EC) point multiplication. Results suggest competitive latency and throughput with minimum design effort and overcoming all the development issues that arise in the specification and verification of dedicated solutions.", "paper_title": "The CRNS Framework and its Application to Programmable and Reconfigurable Cryptography", "paper_id": "WOS:000313911800010"}