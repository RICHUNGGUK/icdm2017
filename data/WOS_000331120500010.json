{"auto_keywords": [{"score": 0.0046970764288494764, "phrase": "c_programming_language"}, {"score": 0.004506968388996092, "phrase": "execution_order"}, {"score": 0.0035461111918923117, "phrase": "even_more_behaviors"}, {"score": 0.0033743949483348626, "phrase": "execution_orders"}, {"score": 0.003264547032549398, "phrase": "c_compilers"}, {"score": 0.0030554300179552415, "phrase": "c_standard"}, {"score": 0.002789528662623221, "phrase": "formal_verification"}, {"score": 0.0026543514413663893, "phrase": "operational_and_axiomatic_semantics"}, {"score": 0.0025678829712650437, "phrase": "separation_logic"}, {"score": 0.002504880563070155, "phrase": "non-determinism_and_sequence_points"}, {"score": 0.0021049977753042253, "phrase": "coq_proof_assistant"}], "paper_keywords": ["Operational Semantics", " Separation Logic", " C Verification", " Interactive Theorem Proving", " Coq"], "paper_abstract": "The C11 standard of the C programming language does not specify the execution order of expressions. Besides, to make more effective optimizations possible (e. g. delaying of side-effects and interleaving), it gives compilers in certain cases the freedom to use even more behaviors than just those of all execution orders. Widely used C compilers actually exploit this freedom given by the C standard for optimizations, so it should be taken seriously in formal verification. This paper presents an operational and axiomatic semantics (based on separation logic) for non-determinism and sequence points in C. We prove soundness of our axiomatic semantics with respect to our operational semantics. This proof has been fully formalized using the Coq proof assistant.", "paper_title": "An Operational and Axiomatic Semantics for Non-determinism and Sequence Points in C", "paper_id": "WOS:000331120500010"}