{"auto_keywords": [{"score": 0.03250938140687976, "phrase": "sdf-like_regions"}, {"score": 0.00481495049065317, "phrase": "statically_schedulable_regions"}, {"score": 0.004772818068176176, "phrase": "dataflow_programs"}, {"score": 0.0047310525657970615, "phrase": "dataflow_descriptions"}, {"score": 0.0046079260641779755, "phrase": "wide_range"}, {"score": 0.004567596860086148, "phrase": "digital_signal_processing"}, {"score": 0.004527641886958865, "phrase": "dsp"}, {"score": 0.00440976345264104, "phrase": "multi-media_processing"}, {"score": 0.004238682850598745, "phrase": "dataflow_modeling"}, {"score": 0.004201571673071299, "phrase": "synchronous_dataflow"}, {"score": 0.004164802626987211, "phrase": "sdf"}, {"score": 0.004074212307838049, "phrase": "static_scheduling"}, {"score": 0.0040385352882334235, "phrase": "computational_modules"}, {"score": 0.003968112038249246, "phrase": "system_performance"}, {"score": 0.003714748329627737, "phrase": "sdf_modeling"}, {"score": 0.003617986748565421, "phrase": "cal"}, {"score": 0.0034319005131102495, "phrase": "dynamically-structured_dsp_applications"}, {"score": 0.003226834737003501, "phrase": "powerful_static_scheduling_capabilities"}, {"score": 0.00304737045343781, "phrase": "dynamic_dataflow_descriptionsin"}, {"score": 0.002981026404927824, "phrase": "generalized_specification_framework"}, {"score": 0.002903311792572216, "phrase": "important_step"}, {"score": 0.0028652153774536967, "phrase": "static_scheduling_techniques"}, {"score": 0.0028276174348291923, "phrase": "dynamic_dataflow_framework"}, {"score": 0.0027417911324611917, "phrase": "different_dataflow_languages"}, {"score": 0.0025892330566358503, "phrase": "hsu_et_al"}, {"score": 0.0023501014144112443, "phrase": "existing_sdf_scheduling_techniques"}, {"score": 0.0023090525096074264, "phrase": "static_properties"}, {"score": 0.002248816575548875, "phrase": "dynamic_dataflow_models"}, {"score": 0.0021805201234139475, "phrase": "optimized_approach"}, {"score": 0.0021330078238529465, "phrase": "parallel_processing_platforms"}, {"score": 0.0021049977753042253, "phrase": "multi-core_processors"}], "paper_keywords": ["CAL", " DIF", " Dataflow", " Quasi-static scheduling", " Multicore processors"], "paper_abstract": "Dataflow descriptions have been used in a wide range of Digital Signal Processing (DSP) applications, such as multi-media processing, and wireless communications. Among various forms of dataflow modeling, Synchronous Dataflow (SDF) is geared towards static scheduling of computational modules, which improves system performance and predictability. However, many DSP applications do not fully conform to the restrictions of SDF modeling. More general dataflow models, such as CAL (Eker and Janneck 2003), have been developed to describe dynamically-structured DSP applications. Such generalized models can express dynamically changing functionality, but lose the powerful static scheduling capabilities provided by SDF. This paper focuses on the detection of SDF-like regions in dynamic dataflow descriptionsin particular, in the generalized specification framework of CAL. This is an important step for applying static scheduling techniques within a dynamic dataflow framework. Our techniques combine the advantages of different dataflow languages and tools, including CAL (Eker and Janneck 2003), DIF (Hsu et al. 2005) and CAL2C (Roquier et al. 2008). In addition to detecting SDF-like regions, we apply existing SDF scheduling techniques to exploit the static properties of these regions within enclosing dynamic dataflow models. Furthermore, we propose an optimized approach for mapping SDF-like regions onto parallel processing platforms such as multi-core processors.", "paper_title": "Exploiting Statically Schedulable Regions in Dataflow Programs", "paper_id": "WOS:000289166100011"}