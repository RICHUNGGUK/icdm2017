{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dataflow_graphs"}, {"score": 0.031383332366980904, "phrase": "motion_estimation_algorithm"}, {"score": 0.004646088032529303, "phrase": "signal_processing_systems"}, {"score": 0.00457553517865013, "phrase": "growing_research_area"}, {"score": 0.004529093447865156, "phrase": "focus_shifts"}, {"score": 0.004483120978156604, "phrase": "high_level_design_methodologies"}, {"score": 0.0044150318724093226, "phrase": "data_intensive_systems"}, {"score": 0.004347972379250724, "phrase": "based_synthesis"}, {"score": 0.004238452771031322, "phrase": "inefficient_usage"}, {"score": 0.00411064950774695, "phrase": "restrictive_nature"}, {"score": 0.004068907083697369, "phrase": "synchronous_dataflow_and_its_inability_to_easily_model_data_reuse"}, {"score": 0.003545024951402821, "phrase": "memory_architectures"}, {"score": 0.003438058620195309, "phrase": "hardware_implementation"}, {"score": 0.003351381374975648, "phrase": "data_reuse"}, {"score": 0.0032336801561165113, "phrase": "memory_hierarchies"}, {"score": 0.0032008144731234265, "phrase": "off-chip_memory_bandwidth"}, {"score": 0.003010496595090984, "phrase": "original_dataflow_graph_level_specification"}, {"score": 0.00290473242917264, "phrase": "minimal_increase"}, {"score": 0.002875200380397413, "phrase": "memory_size"}, {"score": 0.002530359917257626, "phrase": "processing_elements"}, {"score": 0.0023798115577749225, "phrase": "memory_architecture"}, {"score": 0.0021049977753042253, "phrase": "hardware_resources"}], "paper_keywords": ["Memory hierarchy", " Motion estimation", " Dataflow graph", " Hardware synthesis", " Data reuse"], "paper_abstract": "Hardware synthesis from dataflow graphs of signal processing systems is a growing research area as focus shifts to high level design methodologies. For data intensive systems, dataflow based synthesis can lead to an inefficient usage of memory due to the restrictive nature of synchronous dataflow and its inability to easily model data reuse. This paper explores how dataflow graph changes can be used to drive both the on-chip and off-chip memory organisation and how these memory architectures can be mapped to a hardware implementation. By exploiting the data reuse inherent to many image processing algorithms and by creating memory hierarchies, off-chip memory bandwidth can be reduced by a factor of a thousand from the original dataflow graph level specification of a motion estimation algorithm, with a minimal increase in memory size. This analysis is verified using results gathered from implementation of the motion estimation algorithm on a Xilinx Virtex-4 FPGA, where the delay between the memories and processing elements drops from 14.2 ns down to 1.878 ns through the refinement of the memory architecture. Care must be taken when modeling these algorithms however, as inefficiencies in these models can be easily translated into overuse of hardware resources.", "paper_title": "SoC Memory Hierarchy Derivation from Dataflow Graphs", "paper_id": "WOS:000278580800007"}