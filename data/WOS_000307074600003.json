{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "layout_randomization"}, {"score": 0.03423057083405171, "phrase": "high-level_programming_language"}, {"score": 0.003927848423072668, "phrase": "programming-language_terms"}, {"score": 0.002910545717767559, "phrase": "lower-level_language"}, {"score": 0.0028076592725295646, "phrase": "memory_addresses"}, {"score": 0.0024604876113911173, "phrase": "low-level_attacks"}, {"score": 0.0021049977753042253, "phrase": "full_abstraction_results"}], "paper_keywords": ["Languages", " Security", " Theory", " Randomization", " protection"], "paper_abstract": "Layout randomization is a powerful, popular technique for software protection. We present it and study it in programming-language terms. More specifically, we consider layout randomization as part of an implementation for a high-level programming language; the implementation translates this language to a lower-level language in which memory addresses are numbers. We analyze this implementation, by relating low-level attacks against the implementation to contexts in the high-level programming language, and by establishing full abstraction results.", "paper_title": "On Protection by Layout Randomization", "paper_id": "WOS:000307074600003"}