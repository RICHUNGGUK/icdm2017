{"auto_keywords": [{"score": 0.043407466945887825, "phrase": "appsec"}, {"score": 0.007357821663084712, "phrase": "dynamic_shared_objects"}, {"score": 0.006710146127873053, "phrase": "human-machine_interaction_data"}, {"score": 0.00481495049065317, "phrase": "safe_execution_environment_for_security_sensitive_applicationst"}, {"score": 0.004763895422211728, "phrase": "malicious_os_kernel"}, {"score": 0.004663396040465122, "phrase": "user's_private_data"}, {"score": 0.004500402226115475, "phrase": "application's_intention"}, {"score": 0.004374385639298755, "phrase": "privacy_enforcement"}, {"score": 0.004304963945457799, "phrase": "application_level"}, {"score": 0.004259293347851015, "phrase": "os_level"}, {"score": 0.003687960013746783, "phrase": "untrusted_os"}, {"score": 0.0035338315037521627, "phrase": "untrusted_os._appsec"}, {"score": 0.0034777028461723198, "phrase": "safe_loader"}, {"score": 0.003404244237372396, "phrase": "code_integrity"}, {"score": 0.0030758904011907533, "phrase": "kernel_memory_accesses"}, {"score": 0.002947266048104005, "phrase": "devices_isolation_mechanism"}, {"score": 0.002884979280317279, "phrase": "human-machine_interaction_devices"}, {"score": 0.002824005136794786, "phrase": "compromised_kernel"}, {"score": 0.002662871928330334, "phrase": "privileged-based_window_system"}, {"score": 0.0026205405415623525, "phrase": "application's_x_resources"}, {"score": 0.002578880352208335, "phrase": "major_advantages"}, {"score": 0.0023051837161137674, "phrase": "kernel_memory_access"}, {"score": 0.002196944917134202, "phrase": "application's_data"}], "paper_keywords": ["Design", " Security", " Performance", " Privacy", " VMM", " Kernel", " Human-machine interaction"], "paper_abstract": "Malicious OS kernel can easily access user's private data in main memory and pries human-machine interaction data, even one that employs privacy enforcement based on application level or OS level. This paper introduces AppSec, a hypervisor-based safe execution environment, to protect both the memory data and human-machine interaction data of security sensitive applications from the untrusted OS transparently. AppSec provides several security mechanisms on an untrusted OS. AppSec introduces a safe loader to check the code integrity of application and dynamic shared objects. During runtime, AppSec protects application and dynamic shared objects from being modified and verifies kernel memory accesses according to application's intention. AppSec provides a devices isolation mechanism to prevent the human-machine interaction devices being accessed by compromised kernel. On top of that, AppSec further provides a privileged-based window system to protect application's X resources. The major advantages of AppSec are threefold. First, AppSec verifies and protects all dynamic shared objects during runtime. Second, AppSec mediates kernel memory access according to application's intention but does not encrypts all application's data roughly. Third, AppSec provides a trusted I/O path from end-user to application. A prototype of AppSec is implemented and shows that AppSec is efficient and practical.", "paper_title": "AppSec: A Safe Execution Environment for Security Sensitive Applicationst", "paper_id": "WOS:000361284300015"}