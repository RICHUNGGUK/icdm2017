{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "abstract_dynamic_slicing"}, {"score": 0.0333087563415604, "phrase": "general_framework"}, {"score": 0.004654642380553263, "phrase": "large_volumes"}, {"score": 0.004499647408293102, "phrase": "relatively_simple_operations"}, {"score": 0.004439097815805505, "phrase": "large_opportunities"}, {"score": 0.004409127897028587, "phrase": "performance_optimizations"}, {"score": 0.004247858437831649, "phrase": "existing_optimization"}, {"score": 0.004219174171937721, "phrase": "tooling_technology"}, {"score": 0.004176509019758331, "phrase": "jit_optimizations"}, {"score": 0.004092463367307375, "phrase": "performance_experts"}, {"score": 0.0040648241451154525, "phrase": "deployed_applications"}, {"score": 0.0037600281647068522, "phrase": "diffuse_nature"}, {"score": 0.0037346256869699975, "phrase": "runtime_bloat"}, {"score": 0.0036470559917231218, "phrase": "calling_contexts"}, {"score": 0.0034079696245884073, "phrase": "large_performance_bottlenecks"}, {"score": 0.0032610064507843776, "phrase": "traditional_performance_metrics"}, {"score": 0.0032170707904803125, "phrase": "running_time"}, {"score": 0.0030992666061123533, "phrase": "scalable_analysis_algorithms"}, {"score": 0.0030265495849271617, "phrase": "java_programs"}, {"score": 0.0029256091368059446, "phrase": "generalized_form"}, {"score": 0.002905827490766696, "phrase": "runtime_dependence_graph"}, {"score": 0.0028472791870440065, "phrase": "semantics-aware_technique"}, {"score": 0.0028184476518849015, "phrase": "high_scalability"}, {"score": 0.002789907247876628, "phrase": "dynamic_slicing"}, {"score": 0.0027616550517346066, "phrase": "abstract_domains"}, {"score": 0.0026424892463535717, "phrase": "cost-benefit_analysis"}, {"score": 0.0026157259734105, "phrase": "help_programmers"}, {"score": 0.002598034157587518, "phrase": "performance_bottlenecks"}, {"score": 0.0025028412246758994, "phrase": "high_construction_cost"}, {"score": 0.002485911017095097, "phrase": "low_benefit"}, {"score": 0.0024607296642187824, "phrase": "forward_execution"}, {"score": 0.0023867021254922755, "phrase": "large-scale_and_long-running_java_applications"}, {"score": 0.0022992346264367374, "phrase": "inefficient_operations"}, {"score": 0.002252880693912436, "phrase": "better_performance"}, {"score": 0.0021410346041739804, "phrase": "dynamic_analyses"}, {"score": 0.0021049977753042253, "phrase": "application_domains"}], "paper_keywords": ["Languages", " Measurement", " Performance", " Runtime bloat", " dynamic analysis", " abstract dynamic slicing", " copy profiling", " cost-benefit analysis"], "paper_abstract": "Many large-scale Java applications suffer from runtime bloat. They execute large volumes of methods and create many temporary objects, all to execute relatively simple operations. There are large opportunities for performance optimizations in these applications, but most are being missed by existing optimization and tooling technology. While JIT optimizations struggle for a few percent improvement, performance experts analyze deployed applications and regularly find gains of 2x or more. Finding such big gains is difficult, for both humans and compilers, because of the diffuse nature of runtime bloat. Time is spread thinly across calling contexts, making it difficult to judge how to improve performance. Our experience shows that, in order to identify large performance bottlenecks in a program, it is more important to understand its dynamic dataflow than traditional performance metrics, such as running time. This article presents a general framework for designing and implementing scalable analysis algorithms to find causes of bloat in Java programs. At the heart of this framework is a generalized form of runtime dependence graph computed by abstract dynamic slicing, a semantics-aware technique that achieves high scalability by performing dynamic slicing over bounded abstract domains. The framework is instantiated to create two independent dynamic analyses, copy profiling and cost-benefit analysis, that help programmers identify performance bottlenecks by identifying, respectively, high-volume copy activities and data structures that have high construction cost but low benefit for the forward execution. We have successfully applied these analyses to large-scale and long-running Java applications. We show that both analyses are effective at detecting inefficient operations that can be optimized for better performance. We also demonstrate that the general framework is flexible enough to be instantiated for dynamic analyses in a variety of application domains.", "paper_title": "Scalable Runtime Bloat Detection Using Abstract Dynamic Slicing", "paper_id": "WOS:000336444200003"}