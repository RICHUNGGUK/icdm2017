{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "rapidly_instantiating_blas_functionality"}, {"score": 0.004481132747216135, "phrase": "basic_linear_algebra_subprograms"}, {"score": 0.003861175855298779, "phrase": "blis"}, {"score": 0.003802135020791801, "phrase": "necessary_kernels"}, {"score": 0.0036678472439508484, "phrase": "simplest_set"}, {"score": 0.003574830654211291, "phrase": "high_performance"}, {"score": 0.0034308688638878286, "phrase": "higher-level_framework_code"}, {"score": 0.003160049822855747, "phrase": "different_operations"}, {"score": 0.0030017207229983385, "phrase": "high-performance_kernels"}, {"score": 0.002910545717767559, "phrase": "immediate_optimization"}, {"score": 0.0028659990472580154, "phrase": "blas-like_operations"}, {"score": 0.0026261108615242557, "phrase": "productivity_multiplier"}, {"score": 0.0025726416100664853, "phrase": "blas-dependent_applications"}, {"score": 0.0024311346712789553, "phrase": "generalized_c_interface"}, {"score": 0.0023211517663846346, "phrase": "latter_api._preliminary_performance"}, {"score": 0.0021049977753042253, "phrase": "established_commercial_product"}], "paper_keywords": ["Algorithms", " Performance", " Linear algebra", " libraries", " high-performance", " matrix", " BLAS"], "paper_abstract": "The BLAS-like Library Instantiation Software (BLIS) framework is a new infrastructure for rapidly instantiating Basic Linear Algebra Subprograms (BLAS) functionality. Its fundamental innovation is that virtually all computation within level-2 (matrix-vector) and level-3 (matrix-matrix) BLAS operations can be expressed and optimized in terms of very simple kernels. While others have had similar insights, BLIS reduces the necessary kernels to what we believe is the simplest set that still supports the high performance that the computational science community demands. Higher-level framework code is generalized and implemented in ISO C99 so that it can be reused and/or reparameterized for different operations (and different architectures) with little to no modification. Inserting high-performance kernels into the framework facilitates the immediate optimization of any BLAS-like operations which are cast in terms of these kernels, and thus the framework acts as a productivity multiplier. Users of BLAS-dependent applications are given a choice of using the traditional Fortran-77 BLAS interface, a generalized C interface, or any other higher level interface that builds upon this latter API. Preliminary performance of level-2 and level-3 operations is observed to be competitive with two mature open source libraries (OpenBLAS and ATLAS) as well as an established commercial product (Intel MKL).", "paper_title": "BLIS: A Framework for Rapidly Instantiating BLAS Functionality", "paper_id": "WOS:000355670800002"}