{"auto_keywords": [{"score": 0.03693349071862124, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "implementation_of_scale_and_rotation_invariant"}, {"score": 0.004633515396498121, "phrase": "nvidia"}, {"score": 0.004556901872357751, "phrase": "cuda._object"}, {"score": 0.00443308765153716, "phrase": "major_technique"}, {"score": 0.004372442291178139, "phrase": "image_processing"}, {"score": 0.004312622975366676, "phrase": "computer_vision"}, {"score": 0.0038624981944755813, "phrase": "parallel_implementation"}, {"score": 0.0037834649508375544, "phrase": "recently_proposed_scale-_and_rotation-invariant_on-line_object_tracking_system"}, {"score": 0.003555902292752528, "phrase": "graphics_processing_units"}, {"score": 0.003435426082776884, "phrase": "compute_unified_device_architecture"}, {"score": 0.0032287289440915187, "phrase": "single_instruction_multiple_threads"}, {"score": 0.00307657476125683, "phrase": "original_algorithm"}, {"score": 0.0029928611380840757, "phrase": "cpu-based_parallel_design"}, {"score": 0.0028321862184182913, "phrase": "data_parallelism"}, {"score": 0.002793380001054064, "phrase": "memory_usage"}, {"score": 0.0026616868981501006, "phrase": "optimization_technique"}, {"score": 0.0025537472239953807, "phrase": "nvidia's_gpu"}, {"score": 0.0024842242921857705, "phrase": "data_transfer_time"}, {"score": 0.0024501740852758505, "phrase": "experimental_results"}, {"score": 0.0021490449563443025, "phrase": "efficiency_equivalence"}], "paper_keywords": ["object tracking", " classifier updating", " GPGPU", " CUDA"], "paper_abstract": "Object tracking is a major technique in image processing and computer vision. Tracking speed will directly determine the quality of applications. This paper presents a parallel implementation for a recently proposed scale- and rotation-invariant on-line object tracking system. The algorithm is based on NVIDIA's Graphics Processing Units (GPU) using Compute Unified Device Architecture (CUDA), following the model of single instruction multiple threads. Specifically, we analyze the original algorithm and propose the CPU-based parallel design. Emphasis is placed on exploiting the data parallelism and memory usage. In addition, we apply optimization technique to maximize the utilization of NVIDIA's GPU and reduce the data transfer time. Experimental results show that our GPGPU-based method running on a GTX480 graphics card could achieve up to 12X speed-up compared with the efficiency equivalence on an Intel E8400 3.0 GHz CPU, including I/O time.", "paper_title": "Implementation of Scale and Rotation Invariant On-Line Object Tracking Based on CUDA", "paper_id": "WOS:000298304900032"}