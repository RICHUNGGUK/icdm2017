{"auto_keywords": [{"score": 0.048072204126071466, "phrase": "aetg"}, {"score": 0.04747057536702851, "phrase": "tcg"}, {"score": 0.03637477534265549, "phrase": "test_suites"}, {"score": 0.03232057720457451, "phrase": "test_suite_size"}, {"score": 0.00481495049065317, "phrase": "pairwise_interaction_testing"}, {"score": 0.004705278218845159, "phrase": "interaction_test_suites"}, {"score": 0.004674402456361649, "phrase": "software_testing"}, {"score": 0.00452302256811929, "phrase": "tconfig"}, {"score": 0.0044933373574179624, "phrase": "simulated_annealing"}, {"score": 0.0044199701363984495, "phrase": "combinatorial_design_techniques"}, {"score": 0.004070644790285917, "phrase": "reasonable_compromise"}, {"score": 0.004004151534026732, "phrase": "small_test_suites"}, {"score": 0.003977858136481356, "phrase": "fast_test-suite_generation"}, {"score": 0.0038616499489536123, "phrase": "testing_scenarios"}, {"score": 0.0037242008128962104, "phrase": "worst-case_logarithmic_guarantee"}, {"score": 0.003373616465890001, "phrase": "practical_testing_scenarios"}, {"score": 0.003296665348248805, "phrase": "new_algorithm"}, {"score": 0.003086311260099341, "phrase": "logarithmic_worst-case_guarantee"}, {"score": 0.00289888453546698, "phrase": "competitive_size"}, {"score": 0.002795607293713107, "phrase": "published_methods"}, {"score": 0.0025913692304671675, "phrase": "test_suite"}, {"score": 0.002574328937802055, "phrase": "specified_tests"}, {"score": 0.002433926157079375, "phrase": "statistical_analysis"}, {"score": 0.002394104138423188, "phrase": "five_variables"}, {"score": 0.002354932118789557, "phrase": "density_algorithm"}, {"score": 0.002339442939538852, "phrase": "execution_time"}, {"score": 0.0021900332274791827, "phrase": "multiple_candidates"}, {"score": 0.0021684583061292264, "phrase": "multiple_repetitions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["covering array", " mixed-level covering array", " one-row-at-a-time greedy algorithm", " pairwise coverage", " software interaction testing"], "paper_abstract": "There are many published algorithms for generating interaction test suites for software testing, exemplified by AETG, IPO, TCG, TConfig, simulated annealing and other heuristic search, and combinatorial design techniques. Among these, greedy one-test-at-a-time methods (such as AETG and TCG) have proven to be a reasonable compromise between the needs for small test suites, fast test-suite generation, and flexibility to accommodate a variety of testing scenarios. However, such methods suffer from the lack of a worst-case logarithmic guarantee on test suite size, while methods that provide such a guarantee at present are less efficient or flexible, or do not produce test suites that are competitive in size for practical testing scenarios. In this paper, a new algorithm establishes that efficient, greedy, one-test-at-a-time methods can indeed produce a logarithmic worst-case guarantee on the test suite size. In addition, this can be done while still producing test suites that are of competitive size, and in a time that is comparable to the published methods. It is deterministic, guaranteeing reproducibility. It generates only one candidate test at a time, permits users to 'seed' the test suite with specified tests, and allows users to specify constraints of combinations that should be avoided. Further, statistical analysis examines the impact of five variables used to tune this density algorithm for execution time and test suite size: weighting of density for factors, scaling of density, tie-breaking, use of multiple candidates, and multiple repetitions using randomization. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "The density algorithm for pairwise interaction testing", "paper_id": "WOS:000249168500003"}