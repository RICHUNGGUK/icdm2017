{"auto_keywords": [{"score": 0.004756805752518494, "phrase": "single-core_architectures"}, {"score": 0.004342430078306461, "phrase": "new_multicore_design_alternatives"}, {"score": 0.004212453011596424, "phrase": "heterogeneous_multicore_architectures"}, {"score": 0.004012500850311087, "phrase": "developing_applications"}, {"score": 0.00386876598761639, "phrase": "easy_task"}, {"score": 0.0037301606780397456, "phrase": "appropriate_tools"}, {"score": 0.003685067218455088, "phrase": "programming_models"}, {"score": 0.0035100601949451028, "phrase": "runtime_system"}, {"score": 0.0033637374697995616, "phrase": "memory_transactions"}, {"score": 0.0033230588808076267, "phrase": "transactional_programs"}, {"score": 0.0031459887611258765, "phrase": "development_time"}, {"score": 0.003089080923888397, "phrase": "synchronization_mistakes"}, {"score": 0.0030147970456037274, "phrase": "lock-based_approaches"}, {"score": 0.0028890603352364273, "phrase": "experimental_results"}, {"score": 0.0028195727965553367, "phrase": "prototype_implementation"}, {"score": 0.0027685531038981847, "phrase": "stamp_benchmark_show"}, {"score": 0.002636956926079255, "phrase": "low_contention_levels"}, {"score": 0.002406799309495983, "phrase": "small_performance_loss"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Multiprocessors", " Parallel programming", " Transactional memory"], "paper_abstract": "Single-core architectures have hit the end of the road and industry and academia are currently exploiting new multicore design alternatives. In special, heterogeneous multicore architectures have attracted a lot of attention but developing applications for such architectures is not an easy task due to the lack of appropriate tools and programming models. We present the design of a runtime system for the Cell/BE architecture that works with memory transactions. Transactional programs are automatically instrumented by the compiler, shortening development time and avoiding synchronization mistakes usually present in lock-based approaches (such as deadlock). Experimental results conducted with a prototype implementation and the STAMP benchmark show good scalability for applications with moderate to low contention levels, and whose transactions are not too small. For those cases in which a small performance loss is admissible, we believe that the ease of programming provided by transactions greatly pays off. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "A transactional runtime system for the Cell/BE architecture", "paper_id": "WOS:000310669600001"}