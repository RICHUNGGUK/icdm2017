{"auto_keywords": [{"score": 0.04726673405217005, "phrase": "xml_data"}, {"score": 0.0070854097863103935, "phrase": "xml_key_propagation"}, {"score": 0.00622963559902513, "phrase": "functional_dependencies"}, {"score": 0.006081010462383986, "phrase": "relational_design"}, {"score": 0.005260452563488871, "phrase": "xml_keys"}, {"score": 0.00481495049065317, "phrase": "xml_constraints"}, {"score": 0.0045691640746165045, "phrase": "relational_storage"}, {"score": 0.0037047971883885995, "phrase": "bcnf"}, {"score": 0.00363080961099728, "phrase": "efficient_relational_storage"}, {"score": 0.0033628392198449134, "phrase": "functional_dependency"}, {"score": 0.003229815147800001, "phrase": "pre-defined_mappings"}, {"score": 0.0030523478413779686, "phrase": "normal_form"}, {"score": 0.0029553380263320195, "phrase": "minimum_cover"}, {"score": 0.0027704444816096484, "phrase": "universal_relation"}, {"score": 0.00266079124891013, "phrase": "relational_schema"}, {"score": 0.002494279207996077, "phrase": "polynomial_time"}, {"score": 0.002227508035618043, "phrase": "key_propagation"}, {"score": 0.0022006705963260433, "phrase": "first_step"}, {"score": 0.0021049977753042253, "phrase": "semantic_level"}], "paper_keywords": ["XML", " integrity constraints", " XML keys", " functional dependencies"], "paper_abstract": "We present a technique for refining the design of relational storage for XML data. The technique is based on XML key propagation: given a set of keys on XML data and a mapping (transformation) from the XML data to relations, what functional dependencies must hold on the relations produced by the mapping? With the functional dependencies one can then convert the relational design into, e.g. 3NF BCNF, and thus develop efficient relational storage for XML data. We provide several algorithms for computing XML key propagation. One algorithm is to check whether a functional dependency is propagated from it set of XML keys via a pre-defined mappings this allows one to determine whether or not the relational design is in a normal form. The others are to compute a minimum cover for all functional dependencies that are propagated from a set of XML keys and hold on a universal relation: these provide guidance for how to design a relational schema for storing XML data. These algorithms show that XML key propagation and its associated minimum cover can be computed in polynomial time. Our experimental results verify that these algorithms are efficient in practice. We also investigate the complexity of propagating other XML constraints to relations. The ability to compute XML key propagation is a first step toward establishing a connection between XML data and its relational representation at the semantic level. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Propagating XML constraints to relations", "paper_id": "WOS:000245835100005"}