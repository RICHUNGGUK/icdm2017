{"auto_keywords": [{"score": 0.02960681967137819, "phrase": "apt_logic_programs"}, {"score": 0.004608879242346434, "phrase": "probability_distribution"}, {"score": 0.004263972370406983, "phrase": "different_points"}, {"score": 0.003757480190200645, "phrase": "event_b"}, {"score": 0.0034423989472667756, "phrase": "single_thread"}, {"score": 0.00323134923196813, "phrase": "logic_programs"}, {"score": 0.0031536550157613974, "phrase": "key_notion"}, {"score": 0.0031079352545607267, "phrase": "frequency_function"}, {"score": 0.003048001809453513, "phrase": "first_time"}, {"score": 0.0029892206557359836, "phrase": "different_types"}, {"score": 0.0029602552900111433, "phrase": "intrathread_reasoning"}, {"score": 0.0028195727965553367, "phrase": "interthread_reasoning"}, {"score": 0.002685558057339722, "phrase": "comprehensive_set"}, {"score": 0.002659527314613792, "phrase": "complexity_results"}, {"score": 0.0026337482179592422, "phrase": "consistency_checking"}, {"score": 0.002366110899738696, "phrase": "linear_programming"}, {"score": 0.0021886732310288128, "phrase": "linear_programs"}, {"score": 0.0021569129153653777, "phrase": "better_computational_properties"}, {"score": 0.0021049977753042253, "phrase": "real_world_application"}], "paper_keywords": ["Algorithms", " Languages", " Probabilistic and temporal reasoning", " threads", " frequency functions", " imprecise probabilities"], "paper_abstract": "The semantics of most logics of time and probability is given via a probability distribution over threads, where a thread is a structure specifying what will be true at different points in time (in the future). When assessing the probabilities of statements such as \"Event a will occur within 5 units of time of event b,\" there are many different semantics possible, even when assessing the truth of this statement within a single thread. We introduce the syntax of annotated probabilistic temporal (APT) logic programs and axiomatically introduce the key notion of a frequency function (for the first time) to capture different types of intrathread reasoning, and then provide a semantics for intrathread and interthread reasoning in APT logic programs parameterized by such frequency functions. We develop a comprehensive set of complexity results for consistency checking and entailment in APT logic programs, together with sound and complete algorithms to check consistency and entailment. The basic algorithms use linear programming, but we then show how to substantially and correctly reduce the sizes of these linear programs to yield better computational properties. We describe a real world application we are developing using APT logic programs.", "paper_title": "Annotated Probabilistic Temporal Logic", "paper_id": "WOS:000286593700006"}