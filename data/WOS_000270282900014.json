{"auto_keywords": [{"score": 0.010612387000973441, "phrase": "finite_state_machines"}, {"score": 0.007276095616567056, "phrase": "class_models"}, {"score": 0.004778594263962987, "phrase": "aspect-oriented_programming_modularizes"}, {"score": 0.004548848077202625, "phrase": "specified_points"}, {"score": 0.004514491994233911, "phrase": "program_execution"}, {"score": 0.004313713204732449, "phrase": "desired_properties"}, {"score": 0.004232702713825967, "phrase": "conceptual_integrity"}, {"score": 0.004075198669927074, "phrase": "aspect-oriented_system"}, {"score": 0.003763186299187111, "phrase": "aspect-oriented_modeling"}, {"score": 0.003501452436803395, "phrase": "crosscutting_concerns"}, {"score": 0.0034749794034364197, "phrase": "incremental_modification_requirements"}, {"score": 0.0034226302212225206, "phrase": "class_state_models"}, {"score": 0.003383884759373793, "phrase": "verification_purposes"}, {"score": 0.003320277992107974, "phrase": "aspect_models"}, {"score": 0.0032578629307203097, "phrase": "aspect-oriented_model"}, {"score": 0.0032209766681045365, "phrase": "weaving_mechanism"}, {"score": 0.0031484483754909026, "phrase": "woven_models"}, {"score": 0.0025453546203590364, "phrase": "large_number"}, {"score": 0.002459810433812049, "phrase": "system_requirements"}, {"score": 0.002288519595829552, "phrase": "quality_assurance"}, {"score": 0.0022711961447468114, "phrase": "aspect-oriented_state_models"}, {"score": 0.0021865218861454256, "phrase": "model-checking_state-based_specification"}, {"score": 0.0021049977753042253, "phrase": "system_design_problems"}], "paper_keywords": ["aspect-oriented modeling", " finite state machines", " modeling", " verification", " model checking"], "paper_abstract": "Aspect-oriented programming modularizes cross cutting concerns in to aspects with the advice invoked at the specified points of program execution. Aspects can be use din a harmful way that invalidates desired properties and even estroys the conceptual integrity of programs. To assure the quality of an aspect-oriented system, rigorous analysis and design of aspects are highly desirable. In this paper,we present an approach to aspect-oriented modeling and verification with finite state machines. Our approach provides explicit notations(e.g., pointcut, advice and aspect) for capturing crosscutting concerns and incremental modification requirements with respect to class state models. For verification purposes, we compose the aspect models and class models in an aspect-oriented model through a weaving mechanism. Then we transform the woven models and the class models not a reflected by the aspects in to FSP (Finite State Processes), which are to be checked by the LTSA (Labeled Transition System Analyzer) model checker against the desired system properties. We have applied our approach to the modeling and verification of three aspect-oriented systems. To further evaluate the erectiveness of verification,we created a large number of a we aspect models and verified them against the system requirements. The results show that the verification has revealed all a wed models. This indicates that our approach is erective in quality assurance of aspect-oriented state models. As such, our approach can be used for model-checking state-based specification of aspect-oriented design and can uncover some system design problems be fore the system is implemented.", "paper_title": "Aspect-Oriented Modeling and Verification with Finite State Machines", "paper_id": "WOS:000270282900014"}