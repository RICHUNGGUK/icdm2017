{"auto_keywords": [{"score": 0.04331150839474401, "phrase": "new_kernel_extension"}, {"score": 0.03308455906382881, "phrase": "old_module"}, {"score": 0.025573480039983554, "phrase": "hotswap_system"}, {"score": 0.00481495049065317, "phrase": "linux_kernel_modules"}, {"score": 0.004768104290288521, "phrase": "contemporary_operating_system_kernels"}, {"score": 0.004585212379675535, "phrase": "kernel_extensions"}, {"score": 0.004409304640026443, "phrase": "existing_kernel_extension"}, {"score": 0.003697287104870263, "phrase": "kernel_extension"}, {"score": 0.003503497128638099, "phrase": "linux_module_system"}, {"score": 0.0030847461428168614, "phrase": "new_module"}, {"score": 0.0029229677574293725, "phrase": "dependent_applications"}, {"score": 0.0027969169552386, "phrase": "linux_file_system_module"}, {"score": 0.0027026375053777543, "phrase": "corresponding_partitions"}, {"score": 0.0025608471909800076, "phrase": "proposed_system"}, {"score": 0.002511147699138714, "phrase": "linux_kernel"}, {"score": 0.002474505516708906, "phrase": "existing_modules"}, {"score": 0.0021891781017389783, "phrase": "runtime_overhead"}, {"score": 0.0021678232353129472, "phrase": "module_invocations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["dynamic software update", " hotswapping", " Linux kernel", " module", " operating system"], "paper_abstract": "Contemporary operating system kernels are able to improve their functionality by installing kernel extensions at runtime. However, when an existing kernel extension needs to be upgraded, it must be completely removed before the new kernel extension is installed. Consequently, the new kernel extension needs to be run from the beginning, which also influences the applications using this kernel extension. This work describes the design and implementation of a Linux module system that supports hotswapping, in which a module can be replaced while it is in use. Rather than completely removing the old module, the new module can inherit the state held by the old module so the dependent applications are not affected. For example, a Linux file system module can be hotswapped without unmounting the corresponding partitions and terminating the applications that use these partitions. The proposed system is implemented on Linux kernel 2.6.11. Existing modules can be loaded into the hotswap system without change and can be hotswapped by changing only a few lines. Additionally, the hotswap system does not impose any runtime overhead on module invocations. (C) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Hotswapping Linux kernel modules", "paper_id": "WOS:000235818400002"}