{"auto_keywords": [{"score": 0.03694997677639137, "phrase": "existing_studies"}, {"score": 0.00481495049065317, "phrase": "query_facility_q"}, {"score": 0.004573748810476845, "phrase": "user_u"}, {"score": 0.003998286635727259, "phrase": "existing_experimental_studies"}, {"score": 0.0037234376132464493, "phrase": "fixed_penalty"}, {"score": 0.0034537189001268113, "phrase": "extremely_small_buffer"}, {"score": 0.003306559295382181, "phrase": "serious_disadvantage"}, {"score": 0.0031035949505887083, "phrase": "small_buffer"}, {"score": 0.002901538668877986, "phrase": "proposed_algorithm"}, {"score": 0.0027668603377225564, "phrase": "best_algorithm"}, {"score": 0.0025359354516609795, "phrase": "comprehensive_experimental_study"}, {"score": 0.002408623172021922, "phrase": "wide_variety"}, {"score": 0.0023150468182777813, "phrase": "carefully_developed_filtering_strategy"}, {"score": 0.0021814396743238176, "phrase": "optimized_version"}, {"score": 0.0021049977753042253, "phrase": "original_version"}], "paper_keywords": [""], "paper_abstract": "Given a set of users, a set of facilities and a query facility q, a reverse k nearest neighbors (RkNN) query returns every user u for which the query is one of its k closest facilities. RkNN queries have been extensively studied under a variety of settings and many sophisticated algorithms have been proposed to answer these queries. However, the existing experimental studies suffer from a few limitations. For example, some studies estimate the I/O cost by charging a fixed penalty per I/O and we show that this may be misleading. Also, the existing studies either use an extremely small buffer or no buffer at all which puts some algorithms at serious disadvantage. We show that the performance of these algorithms is significantly improved even when a small buffer (containing 100 pages) is used. Finally, in each of the existing studies, the proposed algorithm is mainly compared only with its predecessor assuming that it was the best algorithm at the time which is not necessarily true as shown in our experimental study. Motivated by these limitations, we present a comprehensive experimental study that addresses these limitations and compares some of the most notable algorithms under a wide variety of settings. Furthermore, we also present a carefully developed filtering strategy that significantly improves TPL which is one of the most popular RkNN algorithms. Specifically, the optimized version is up to 20 times faster than the original version and reduces its I/O cost up to two times.", "paper_title": "Reverse k Nearest Neighbors Query Processing: Experiments and Analysis", "paper_id": "WOS:000362280300014"}