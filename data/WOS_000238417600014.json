{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "algebraic_specifications"}, {"score": 0.004382737590042589, "phrase": "test_data"}, {"score": 0.004209539728590977, "phrase": "test_data_sets"}, {"score": 0.0040978781692373005, "phrase": "selection_criteria"}, {"score": 0.003909522412849035, "phrase": "specification_axioms"}, {"score": 0.0038314621564116192, "phrase": "unfolding_selection_criterion"}, {"score": 0.003704797078215222, "phrase": "input_domain"}, {"score": 0.0035823043879169153, "phrase": "case_analysis"}, {"score": 0.003510754567808717, "phrase": "unfolding_procedure"}, {"score": 0.0033268412940032103, "phrase": "input_domains"}, {"score": 0.003238517900104576, "phrase": "finer_subdomains"}, {"score": 0.002507748938616919, "phrase": "positive_conditional_specification"}, {"score": 0.0021049977753042253, "phrase": "starting_reference_test_data"}], "paper_keywords": ["specification-based testing", " algebraic specifications", " selection criteria", " unfolding", " proof tree normalization", " conditional rewriting"], "paper_abstract": "This paper deals with test data set selection from algebraic specifications. Test data sets are generated from selection criteria which are usually defined to cover specification axioms. The unfolding selection criterion consists in covering the input domain of an operation using case analysis. The unfolding procedure can be iterated in order to split input domains of operations into finer subdomains. In this paper we propose to extend an;unfolding procedure previously developed in [5,19] that could only be performed on very low level, i.e. executable specifications. On the contrary, our new unfolding procedure can be applied to any positive conditional specification. We show that our unfolding procedure is sound (no test is added) and complete (no test is lost) with respect to the starting reference test data set.", "paper_title": "Testing from algebraic specifications: Test data set selection by unfolding axioms", "paper_id": "WOS:000238417600014"}