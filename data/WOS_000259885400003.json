{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model-driven_software_development"}, {"score": 0.004575053987970206, "phrase": "language_technology"}, {"score": 0.003958049372486465, "phrase": "explicit_meta-representation"}, {"score": 0.0037928847801943404, "phrase": "ast-like_structure"}, {"score": 0.003728767810685882, "phrase": "ast"}, {"score": 0.003634587156159668, "phrase": "abstract_syntax_tree"}, {"score": 0.0034828730516958807, "phrase": "programmatic_way"}, {"score": 0.0031981188104809994, "phrase": "user-defined_annotations"}, {"score": 0.0029116257477000617, "phrase": "language_platforms"}, {"score": 0.0028139168128067343, "phrase": "generalized_annotated_ast"}, {"score": 0.002742787059497186, "phrase": "gaast"}, {"score": 0.0024969812322112174, "phrase": "model-driven_development_process"}, {"score": 0.0023123057299992587, "phrase": "gaast_language_technology"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["MDA", " Attribute programming", " Transformations"], "paper_abstract": "This paper is about language technology for facilitating model-driven software development. We argue that two features are important for this purpose: (a) support for explicit meta-representation of programs as an AST-like structure (AST stands for abstract syntax tree) accessible in a programmatic way before and beyond the compilation, and (b) support for user-defined annotations of program elements. That is, we argue for language platforms organized around a Generalized Annotated AST, or GAAST languages for short. We outline the problems with a model-driven development process based on languages without such a support and show how GAAST language technology addresses these problems. (C) 2008 Published by Elsevier B.V.", "paper_title": "Language support for model-driven software development", "paper_id": "WOS:000259885400003"}