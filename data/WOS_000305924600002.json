{"auto_keywords": [{"score": 0.048852464629815365, "phrase": "scripting_languages"}, {"score": 0.00481495049065317, "phrase": "language_compatibility"}, {"score": 0.004752873752686246, "phrase": "language_compilers"}, {"score": 0.0045124316982387315, "phrase": "language_implementations"}, {"score": 0.003480230347985338, "phrase": "c_apis"}, {"score": 0.003405671497507337, "phrase": "foreign-function_interfaces"}, {"score": 0.0033471722682967046, "phrase": "third-party_extensions"}, {"score": 0.003261295948815592, "phrase": "tight_integration"}, {"score": 0.0032191849045822415, "phrase": "original_implementation"}, {"score": 0.0031230216871739776, "phrase": "large_standard_libraries"}, {"score": 0.0028762004595878714, "phrase": "run-time_code_generation"}, {"score": 0.002754208576828914, "phrase": "fully_compatible_compiler"}, {"score": 0.0026146109167103655, "phrase": "ahead-of-time_compiler"}, {"score": 0.00259204257180177, "phrase": "php."}, {"score": 0.0025364615261136655, "phrase": "original_php_implementation"}, {"score": 0.0025036862991477437, "phrase": "provided_c_api"}, {"score": 0.0023562342764987254, "phrase": "important_scripting_language_features"}, {"score": 0.0022562464662197867, "phrase": "limited_future_language_changes"}, {"score": 0.002188784900536406, "phrase": "performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Compiler", " Scripting language"], "paper_abstract": "Although scripting languages have become very popular, even mature scripting language implementations remain interpreted. Several compilers and reimplementations have been attempted, generally focusing on performance. Based on our survey of these reimplementations, we determine that there are three important features of scripting languages that are difficult to compile or reimplement. Since scripting languages are defined primarily through the semantics of their original implementations, they often change semantics between releases. They provide C APIs, used both for foreign-function interfaces and to write third-party extensions. These APIs typically have tight integration with the original implementation, and are used to provide large standard libraries, which are difficult to re-use, and costly to reimplement. Finally, they support run-time code generation. These features make it difficult to design a fully compatible compiler. We present a technique to support these features in an ahead-of-time compiler for PHP. Our technique uses the original PHP implementation through the provided C API, both in our compiler and in our generated code. We support all of these important scripting language features. Additionally, our approach allows us to automatically support limited future language changes. We present a discussion and performance evaluation of this technique. (c) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A practical solution for achieving language compatibility in scripting language compilers", "paper_id": "WOS:000305924600002"}