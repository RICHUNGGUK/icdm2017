{"auto_keywords": [{"score": 0.048539652036902976, "phrase": "software_architecture"}, {"score": 0.00481495049065317, "phrase": "architectural_assumptions"}, {"score": 0.004224911726496726, "phrase": "functional_or_quality_requirements"}, {"score": 0.004166129325245761, "phrase": "design_decisions"}, {"score": 0.003884212965525665, "phrase": "personal_experience"}, {"score": 0.003848088904418221, "phrase": "domain_knowledge"}, {"score": 0.003812299519486331, "phrase": "budget_constraints"}, {"score": 0.0037768417338850274, "phrase": "available_expertise"}, {"score": 0.0031182092708983184, "phrase": "accepted_way"}, {"score": 0.0026974065918918275, "phrase": "later_stage"}, {"score": 0.0025264171945423254, "phrase": "earlier_ones"}, {"score": 0.0023551955270737215, "phrase": "existing_software_product"}, {"score": 0.002237036807966899, "phrase": "commercial_software_product"}, {"score": 0.0021247934141234988, "phrase": "evolutionary_capabilities"}], "paper_keywords": ["software architecture", " architectural knowledge", " assumptions", " architecture recovery"], "paper_abstract": "During the creation of a software architecture, the architects and stakeholders take a lot of decisions. Many of these decisions can be directly related to functional or quality requirements. Some design decisions, though, are more or less arbitrarily made on the fly because of personal experience, domain knowledge, budget constraints, available expertise, and the like. These decisions, as well as the reasons for those decisions, are often not explicit upfront. They are implicit, and usually remain undocumented. We call them assumptions. There is no accepted way to document assumptions, and the relation between the software architecture and these assumptions easily gets lost, becomes hidden in the girders of the architecture. They are rediscovered at a later stage, when the software evolves and assumptions become invalid or new assumptions contradict earlier ones. In this paper, we develop a method to recover such assumptions from an existing software product. We illustrate the method by applying it to a commercial software product, and show how the results can help assess the evolutionary capabilities of its architecture. (c) 2005 Elsevier Inc. All rights reserved.", "paper_title": "Recovering architectural assumptions", "paper_id": "WOS:000236834600010"}