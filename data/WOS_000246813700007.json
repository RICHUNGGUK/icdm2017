{"auto_keywords": [{"score": 0.04834686887008023, "phrase": "full_disjunction"}, {"score": 0.00481495049065317, "phrase": "incremental_algorithm"}, {"score": 0.00471465954562773, "phrase": "full_disjunctions"}, {"score": 0.004496542293425754, "phrase": "join_operator"}, {"score": 0.004356741449157895, "phrase": "connected_relations"}, {"score": 0.00398370478688858, "phrase": "natural_extension"}, {"score": 0.00392125815948488, "phrase": "binary_outerjoin_operator"}, {"score": 0.0038597866217852353, "phrase": "arbitrary_number"}, {"score": 0.0037397086147485897, "phrase": "useful_operator"}, {"score": 0.0037005154613244363, "phrase": "information_integration"}, {"score": 0.003312901888725435, "phrase": "previous_algorithms"}, {"score": 0.0030935140058168885, "phrase": "lower_total_runtime"}, {"score": 0.003028969851366049, "phrase": "full_result"}, {"score": 0.002813457986293993, "phrase": "constant_k."}, {"score": 0.002740253546178098, "phrase": "natural_class"}, {"score": 0.002711506442590442, "phrase": "ranking_functions"}, {"score": 0.0023891283748647416, "phrase": "approximate_full_disjunctions"}, {"score": 0.0023025177990160487, "phrase": "consistent_tuples"}, {"score": 0.0021612684684351974, "phrase": "block-based_execution"}, {"score": 0.0021049977753042253, "phrase": "tuple-based_execution"}], "paper_keywords": ["incomplete information", " query processing", " full disjunction", " null values", " outer-join", " ranking", " approximate"], "paper_abstract": "The full disjunction is a variation of the join operator that maximally combines tuples from connected relations, while preserving all information in the relations. The full disjunction can be seen as a natural extension of the binary outerjoin operator to an arbitrary number of relations and is a useful operator for information integration. This paper presents the algorithm INCREMENTALFD for computing the full disjunction of a set of relations. INCREMENTALFD improves upon previous algorithms for computing the full disjunction in four ways. First, it has a lower total runtime when computing the full result and a lower runtime when computing only k tuples of the result, for any constant k. Second, for a natural class of ranking functions, INCREMENTALFD can be adapted to return tuples in ranking order. Third, a variation of INCREMENTALFD can be used to return approximate full disjunctions (which contain maximal approximately join consistent tuples). Fourth, INCREMENTALFD can be adapted to have a block-based execution, instead of a tuple-based execution. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "An incremental algorithm for computing ranked full disjunctions", "paper_id": "WOS:000246813700007"}