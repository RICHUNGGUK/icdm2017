{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "safe_composition_of_non-monotonic_features"}, {"score": 0.004055176557424983, "phrase": "legal_combinations"}, {"score": 0.0031335830806256777, "phrase": "prior_work"}, {"score": 0.002610198789888055, "phrase": "case_studies"}, {"score": 0.0023440589015485077, "phrase": "developed_programs"}, {"score": 0.0021049977753042253, "phrase": "automated_concepts"}], "paper_keywords": ["Verification", " design", " Feature-oriented programming", " safe composition", " refactoring", " AHEAD"], "paper_abstract": "Programs can be composed from features. We want to verify automatically that all legal combinations of features can be composed safely without errors. Prior work on this problem assumed that features add code monotonically. We generalize prior work to enable features to add and remove code, describe our analyses and implementation, and review case studies. We observe that more expressive features increase the complexity of developed programs rapidly - up to the point where tools and automated concepts as presented in this paper are indispensable for verification.", "paper_title": "Safe Composition of Non-Monotonic Features", "paper_id": "WOS:000280547600019"}