{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "logic_programs"}, {"score": 0.0067081565663149115, "phrase": "logic_program"}, {"score": 0.00665018271041574, "phrase": "transformational_approaches"}, {"score": 0.004590052784169268, "phrase": "termination_analysis"}, {"score": 0.004337710093279712, "phrase": "direct_approaches"}, {"score": 0.004028452405970376, "phrase": "term_rewrite_system"}, {"score": 0.003129509028432954, "phrase": "well-moded_programs"}, {"score": 0.002906138793910919, "phrase": "definite_logic_program"}, {"score": 0.002663620639539737, "phrase": "infinite_terms"}, {"score": 0.0024950747439601863, "phrase": "automated_termination_analysis"}, {"score": 0.0023270035715132866, "phrase": "logic_programming"}, {"score": 0.0023068049914566975, "phrase": "occur_check"}, {"score": 0.0021702292394814144, "phrase": "termination_prover_aprove"}, {"score": 0.0021049977753042253, "phrase": "large_collection"}], "paper_keywords": ["Languages", " Theory", " Verification", " Logic programming", " termination analysis", " term rewriting", " dependency pairs"], "paper_abstract": "There are two kinds of approaches for termination analysis of logic programs: \"transformational\" and \"direct\" ones. Direct approaches prove termination directly on the basis of the logic program. Transformational approaches transform a logic program into a Term Rewrite System (TRS) and then analyze termination of the resulting TRS instead. Thus, transformational approaches make all methods previously developed for TRSs available for logic programs as well. However, the applicability of most existing transformations is quite restricted, as they can only be used for certain subclasses of logic programs. (Most of them are restricted to well-moded programs.) In this article we improve these transformations such that they become applicable for any definite logic program. To simulate the behavior of logic programs by TRSs, we slightly modify the notion of rewriting by permitting infinite terms. We show that our transformation results in TRSs which are indeed suitable for automated termination analysis. In contrast to most other methods for termination of logic programs, our technique is also sound for logic programming without occur check, which is typically used in practice. We implemented our approach in the termination prover AProVE and successfully evaluated it on a large collection of examples.", "paper_title": "Automated Termination Proofs for Logic Programs by Term Rewriting", "paper_id": "WOS:000272039900002"}