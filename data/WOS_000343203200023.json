{"auto_keywords": [{"score": 0.04912982131704959, "phrase": "sized_types"}, {"score": 0.00481495049065317, "phrase": "logic_programs"}, {"score": 0.00476697427418509, "phrase": "abstract_interpretation"}, {"score": 0.004602773636967002, "phrase": "novel_general_resource_analysis"}, {"score": 0.0035827424231607784, "phrase": "different_argument_positions"}, {"score": 0.00354700018079049, "phrase": "logic_predicates"}, {"score": 0.003424677513304057, "phrase": "resource_analysis"}, {"score": 0.003356675879109443, "phrase": "lower_and_upper_bounds"}, {"score": 0.0031448288291084, "phrase": "input_term"}, {"score": 0.0029909851863915283, "phrase": "existing_resource_analyses"}, {"score": 0.002830410693265704, "phrase": "abstract_interpretation_framework"}, {"score": 0.002719055901632759, "phrase": "abstract_domain"}, {"score": 0.0026120705848349055, "phrase": "ciao_preprocessor"}, {"score": 0.002560162916190598, "phrase": "abstract_domain_operations"}, {"score": 0.0024348510123716424, "phrase": "recurrence_equations"}, {"score": 0.0023864566654035924, "phrase": "size_and_resource_usage_functions"}, {"score": 0.002246955931290095, "phrase": "previous_resource_analysis"}, {"score": 0.002213371302331552, "phrase": "ciaopp"}, {"score": 0.0021049977753042253, "phrase": "art_systems"}], "paper_keywords": [""], "paper_abstract": "We present a novel general resource analysis for logic programs based on sized types. Sized types are representations that incorporate structural (shape) information and allow expressing both lower and upper bounds on the size of a set of terms and their subterms at any position and depth. They also allow relating the sizes of terms and subterms occurring at different argument positions in logic predicates. Using these sized types, the resource analysis can infer both lower and upper bounds on the resources used by all the procedures in a program as functions on input term (and subterm) sizes, overcoming limitations of existing resource analyses and enhancing their precision. Our new resource analysis has been developed within the abstract interpretation framework, as an extension of the sized types abstract domain, and has been integrated into the Ciao preprocessor, CiaoPP. The abstract domain operations are integrated with the setting up and solving of recurrence equations for inferring both size and resource usage functions. We show that the analysis is an improvement over the previous resource analysis present in CiaoPP and compares well in power to state of the art systems.", "paper_title": "Resource Usage Analysis of Logic Programs via Abstract Interpretation Using Sized Types", "paper_id": "WOS:000343203200023"}