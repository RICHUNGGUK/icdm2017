{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "deletion_propagation"}, {"score": 0.00892195939807058, "phrase": "unidimensional_algorithm"}, {"score": 0.007996182478476844, "phrase": "self_joins"}, {"score": 0.004469741878165207, "phrase": "polynomial_time"}, {"score": 0.004052358316137446, "phrase": "conjunctive_query"}, {"score": 0.004028331922354964, "phrase": "cq"}, {"score": 0.0038069853794502353, "phrase": "buneman_et_al"}, {"score": 0.0037396377535454887, "phrase": "simple_cqs"}, {"score": 0.0036408354779365643, "phrase": "straightforward_algorithm"}, {"score": 0.003502695291158573, "phrase": "additional_cases"}, {"score": 0.0033005717517287036, "phrase": "np"}, {"score": 0.0032226482496329626, "phrase": "constant_ratio"}, {"score": 0.003063627258654102, "phrase": "hard_cqs"}, {"score": 0.0030454408569868347, "phrase": "exactly_the_ones"}, {"score": 0.0026954557881801546, "phrase": "approximation_algorithms"}, {"score": 0.00248718591918233, "phrase": "sunflower_hypergraph"}, {"score": 0.0024070101893580408, "phrase": "approximation_ratio"}, {"score": 0.0022813374895267664, "phrase": "monotone_submodular_function"}, {"score": 0.0022543116010603293, "phrase": "matroid_constraint"}, {"score": 0.002214370556271579, "phrase": "known_algorithm"}, {"score": 0.002181626277903721, "phrase": "second_algorithm"}, {"score": 0.0021622120805979937, "phrase": "smaller_approximation_ratio"}, {"score": 0.0021049977753042253, "phrase": "combined_complexity"}], "paper_keywords": ["Algorithms", " Theory", " Deletion propagation", " dichotomy", " approximation"], "paper_abstract": "In deletion propagation, tuples from the database are deleted in order to reflect the deletion of a tuple from the view. Such an operation may result in the (often necessary) deletion of additional tuples from the view, besides the intentionally deleted one. The article studies the complexity of deletion propagation, where the view is defined by a conjunctive query (CQ), and the goal is to maximize the number of tuples that remain in the view. Buneman et al. showed that for some simple CQs, this problem can be solved by a straightforward algorithm, which is called here the unidimensional algorithm. The article identifies additional cases of CQs where the unidimensional algorithm succeeds, and in contrast, shows that for some other CQs the problem is NP-hard to approximate better than some constant ratio. In fact, it is shown here that among the CQs without self joins, the hard CQs are exactly the ones that the unidimensional algorithm fails on. In other words, the following dichotomy result is proved: for every CQ without self joins, deletion propagation is either APX-hard or solvable (in polynomial time) by the unidimensional algorithm. The article then presents approximation algorithms for certain CQs where deletion propagation is APX-hard. Specifically, two constant-ratio (and polynomial-time) approximation algorithms are given for the class of sunflower CQs (i.e., CQs having a sunflower hypergraph) without self joins. The first algorithm, providing the approximation ratio 1 - 1/e, is obtained by formulating the problem at hand as that of maximizing a monotone submodular function subject to a matroid constraint, and then using a known algorithm for such maximization. The second algorithm gives a smaller approximation ratio, 1/2, yet in polynomial time even under combined complexity. Finally, it is shown that self joins can significantly harden approximation in deletion propagation.", "paper_title": "Maximizing Conjunctive Views in Deletion Propagation", "paper_id": "WOS:000312942400002"}