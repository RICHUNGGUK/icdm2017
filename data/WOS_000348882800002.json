{"auto_keywords": [{"score": 0.04564717793584703, "phrase": "provenance_tracking"}, {"score": 0.00481495049065317, "phrase": "conditional_rewriting_logic_computations"}, {"score": 0.004573483858954342, "phrase": "specific_contents"}, {"score": 0.004397000006837371, "phrase": "trace_exploration_techniques"}, {"score": 0.003966833706820594, "phrase": "input_data"}, {"score": 0.003779169459469458, "phrase": "impact_tracking"}, {"score": 0.003644249428737351, "phrase": "program_input"}, {"score": 0.0034299649219748513, "phrase": "equational_logic"}, {"score": 0.0033989238477802864, "phrase": "rewrite_rules"}, {"score": 0.003141364320497748, "phrase": "rwl_computations"}, {"score": 0.0031035049228517715, "phrase": "nondeterministic_execution"}, {"score": 0.0030199761431186434, "phrase": "different_ways"}, {"score": 0.0027910516355928983, "phrase": "program_execution"}, {"score": 0.00266693888510356, "phrase": "required_exploration_mode"}, {"score": 0.0026347821012634586, "phrase": "different_inspection_criteria"}, {"score": 0.0025638362414466278, "phrase": "practical_algorithms"}, {"score": 0.002540613621469429, "phrase": "program_steppers"}, {"score": 0.0024797072773840704, "phrase": "computation_tree"}, {"score": 0.0024423826953133844, "phrase": "dynamic_detection"}, {"score": 0.0024129269611844794, "phrase": "data_dependencies"}, {"score": 0.002326669201839705, "phrase": "anima_graphical_tool"}, {"score": 0.002209711182025705, "phrase": "input_change_impact"}, {"score": 0.002169848044716866, "phrase": "program_behavior"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Rewriting logic", " Trace exploration", " Maude", " Conditional rewrite theories"], "paper_abstract": "Trace exploration is concerned with techniques that allow computation traces to be dynamically searched for specific contents. Depending on whether the exploration is carried backward or forward, trace exploration techniques allow provenance tracking or impact tracking to be done. The aim of provenance tracking is to show how (parts of) a program output depends on (parts of) its input and to help estimate which input data need to be modified to accomplish a change in the outcome. The aim of impact tracking is to identify the scope and potential consequences of changing the program input. Rewriting Logic (RWL) is a logic of change that supplements (an extension of) the equational logic by adding rewrite rules that are used to describe (nondeterministic) transitions between states. In this paper, we present a rich and highly dynamic, parameterized technique for the forward inspection of RWL computations that allows the nondeterministic execution of a given conditional rewrite theory to be followed up in different ways. With this technique, an analyst can browse, slice, filter, or search the traces as they come to life during the program execution. The navigation of the trace is driven by a user-defined, inspection criterion that specifies the required exploration mode. By selecting different inspection criteria, one can automatically derive a family of practical algorithms such as program steppers and more sophisticated dynamic trace slicers that compute summaries of the computation tree, thereby facilitating the dynamic detection of control and data dependencies across the tree. Our methodology, which is implemented in the Anima graphical tool, allows users to evaluate the effects of a given statement or instruction in isolation, track input change impact, and gain insight into program behavior (or misbehavior). (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Exploring conditional rewriting logic computations", "paper_id": "WOS:000348882800002"}