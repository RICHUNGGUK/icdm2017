{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_engineers"}, {"score": 0.038211931715737536, "phrase": "programming_task"}, {"score": 0.026897811453592893, "phrase": "redundant_tasks"}, {"score": 0.003982617095636925, "phrase": "software_engineering_process"}, {"score": 0.0035233696341819437, "phrase": "required_level"}, {"score": 0.003375429082739004, "phrase": "residual_error_probability"}, {"score": 0.0027741761880779535, "phrase": "programming_endeavour"}, {"score": 0.0026252106881752067, "phrase": "non-trained_software_engineers"}, {"score": 0.0024389277933858054, "phrase": "desired_quality"}, {"score": 0.0023221248824337576, "phrase": "domain_specific_languages"}, {"score": 0.002183938718432764, "phrase": "small_constant"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Software engineering", " Software quality", " Redundancy"], "paper_abstract": "Software engineers are humans and so they make lots of mistakes. Typically 1 out of 10 to 100 tasks go wrong. The only way to avoid these mistakes is to introduce redundancy in the software engineering process. This article is a plea to consciously introduce several levels of redundancy for each programming task. Depending on the required level of correctness, expressed in a residual error probability (typically 10(-3) to 10(-10)), each programming task must be carried out redundantly 4 to 8 times. This number is hardly influenced by the size of a programming endeavour. Training software engineers do have some effect as non-trained software engineers require a double amount of redundant tasks to deliver software of a desired quality. More compact programming, for instance by using domain specific languages, only reduces the number of redundant tasks by a small constant. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Software engineering: Redundancy is key", "paper_id": "WOS:000345725100014"}