{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "high-throughput_microtriangle_rasterization"}, {"score": 0.004543046350523362, "phrase": "modern_gpu_architectures"}, {"score": 0.004486800020569973, "phrase": "efficient_way"}, {"score": 0.004394592555435104, "phrase": "fixed_throughput"}, {"score": 0.0043401761815767, "phrase": "special_purpose"}, {"score": 0.004198323646273642, "phrase": "classic_pipeline"}, {"score": 0.004146327465630697, "phrase": "gpu_scalability"}, {"score": 0.003895810929926511, "phrase": "shader_core_counts"}, {"score": 0.003863568356785813, "phrase": "increasing_gflops"}, {"score": 0.003831591603702392, "phrase": "modern_gpus"}, {"score": 0.003706299561774348, "phrase": "multiple_shader_threads"}, {"score": 0.0036150168165327286, "phrase": "powerful_wide-alu_instructions"}, {"score": 0.003285380677401785, "phrase": "shader_cores"}, {"score": 0.0032446544415922615, "phrase": "higher_performance"}, {"score": 0.0032177835714470027, "phrase": "traditional_edge_equation"}, {"score": 0.0031125001790084936, "phrase": "attila_gpu_shader_isa"}, {"score": 0.0030231983220281836, "phrase": "ieee_international_symposium_on_performance_analysis_of_systems"}, {"score": 0.00284034646798833, "phrase": "rasterization_precision_requirement"}, {"score": 0.0027588314610845705, "phrase": "novel_subpixel_bounding_box_size_optimization"}, {"score": 0.0026135859312619875, "phrase": "small_triangles"}, {"score": 0.002528021281333922, "phrase": "proposed_shader_rasterization_program"}, {"score": 0.0024554476124885806, "phrase": "original_pixel_shader_program"}, {"score": 0.002231310272815607, "phrase": "better_performance"}, {"score": 0.0022036216160494925, "phrase": "classic_rasterizer"}], "paper_keywords": ["Microtriangle rasterization", " GPU rendering", " Shader performance"], "paper_abstract": "This paper shows that breaking the barrier of 1 triangle/clock rasterization rate for microtriangles in modern GPU architectures in an efficient way is possible. The fixed throughput of the special purpose culling and triangle setup stages of the classic pipeline limits the GPU scalability to rasterize many triangles in parallel when these cover very few pixels. In contrast, the shader core counts and increasing GFLOPs in modern GPUs clearly suggests parallelizing this computation entirely across multiple shader threads, making use of the powerful wide-ALU instructions. In this paper, we present a very efficient SIMD-like rasterization code targeted at very small triangles that scales very well with the number of shader cores and has higher performance than traditional edge equation based algorithms. We have extended the ATTILA GPU shader ISA (del Barrioet al. in IEEE International Symposium on Performance Analysis of Systems and Software, pp. 231-241, 2006) with two fixed point instructions to meet the rasterization precision requirement. This paper also introduces a novel subpixel Bounding Box size optimization that adjusts the bounds much more finely, which is critical for small triangles, and doubles the 2x2-pixel stamp test efficiency. The proposed shader rasterization program can run on top of the original pixel shader program in such a way that selected fragments are rasterized, attribute interpolated and pixel shaded in the same pass. Our results show that our technique yields better performance than a classic rasterizer at 8 or more shader cores, with speedups as high as 4x for 16 shader cores.", "paper_title": "A SIMD-efficient 14 instruction shader program for high-throughput microtriangle rasterization", "paper_id": "WOS:000278135800031"}