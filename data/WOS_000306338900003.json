{"auto_keywords": [{"score": 0.05007848702263348, "phrase": "esterel_specifications"}, {"score": 0.048877326221094704, "phrase": "esterel"}, {"score": 0.00475413908468027, "phrase": "synchronous_languages"}, {"score": 0.004489810932879285, "phrase": "reactive_systems"}, {"score": 0.00443308765153716, "phrase": "safety-critical_domains"}, {"score": 0.004081385289516914, "phrase": "underlying_\"synchrony_hypothesis"}, {"score": 0.003757480190200645, "phrase": "real_implementations"}, {"score": 0.003663067281537946, "phrase": "c_code"}, {"score": 0.003437248394635138, "phrase": "model-driven_and_architecture-aware_timing_analysis_framework"}, {"score": 0.0032253056091816495, "phrase": "general-purpose_processors"}, {"score": 0.003144222265269426, "phrase": "model-level_information"}, {"score": 0.0030847461428168614, "phrase": "traditional_timing_analysis"}, {"score": 0.0029691377785333872, "phrase": "accurate_time_estimates"}, {"score": 0.0028761045789798103, "phrase": "large_number"}, {"score": 0.0028397103530211415, "phrase": "infeasible_paths"}, {"score": 0.002785978280998868, "phrase": "generated_code"}, {"score": 0.002750721367040336, "phrase": "experimental_results"}, {"score": 0.002468450551616404, "phrase": "traditional_assembly_code_level"}, {"score": 0.002391067964886602, "phrase": "substantially_less_analysis_time"}, {"score": 0.002286781334850213, "phrase": "traceability_links"}, {"score": 0.002215081186105616, "phrase": "generated_c_code"}, {"score": 0.0021049977753042253, "phrase": "time-critical_computations"}], "paper_keywords": ["Esterel", " Synchronous programming", " Performance debugging", " WCET analysis"], "paper_abstract": "Synchronous languages like Esterel have been widely adopted for designing reactive systems in safety-critical domains such as avionics. Specifications written in Esterel are based on the underlying \"synchrony hypothesis\", which needs to be validated when Esterel specifications get compiled to real implementations (such as C code). In this work, we present a model-driven and architecture-aware timing analysis framework for C code generated from Esterel and executed on general-purpose processors. By integrating model-level information into the traditional timing analysis, we can efficiently compute accurate time estimates via systematically eliminating a large number of infeasible paths in the generated code. Experimental results show that with our proposed intermediate representation level infeasible path analysis in the model compilation, we obtain up to 16.1 % tighter WCET estimates compared to the traditional assembly code level infeasible path detection with substantially less analysis time. Furthermore, by maintaining the traceability links between Esterel specifications and the generated C code, we are able to map the time-critical computations at the C-level back to the Esterel-level.", "paper_title": "Performance debugging of Esterel specifications", "paper_id": "WOS:000306338900003"}