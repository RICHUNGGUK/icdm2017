{"auto_keywords": [{"score": 0.03649614039937124, "phrase": "ast"}, {"score": 0.00481495049065317, "phrase": "optimizing_ast_interpreters"}, {"score": 0.004642105253191792, "phrase": "elegant_way"}, {"score": 0.004192215542455457, "phrase": "zippy"}, {"score": 0.004159763048814389, "phrase": "widespread_adoption"}, {"score": 0.003315374849824563, "phrase": "java_virtual_machine"}, {"score": 0.0031039212233596415, "phrase": "ast_interpreters"}, {"score": 0.0030587884803931964, "phrase": "just-in-time_compilation"}, {"score": 0.0028220038404484196, "phrase": "ast_optimizations"}, {"score": 0.0027405092973494293, "phrase": "subsequent_optimizations"}, {"score": 0.002473325513637559, "phrase": "average_speedup"}, {"score": 0.002401875938287542, "phrase": "generator-bound_programs"}], "paper_keywords": ["Languages", " Performance", " generator", " iterator", " dynamic languages", " optimization", " Python"], "paper_abstract": "Generators offer an elegant way to express iterators. However, performance has always been their Achilles heel and has prevented widespread adoption. We present techniques to efficiently implement and optimize generators. We have implemented our optimizations in ZipPy, a modern, light-weight AST interpreter based Python 3 implementation targeting the Java virtual machine. Our implementation builds on a framework that optimizes AST interpreters using just-in-time compilation. In such a system, it is crucial that AST optimizations do not prevent subsequent optimizations. Our system was carefully designed to avoid this problem. We report an average speedup of 3.58 x for generator-bound programs. As a result, using generators no longer has downsides and programmers are free to enjoy their upsides.", "paper_title": "Accelerating Iterators in Optimizing AST Interpreters", "paper_id": "WOS:000348907400041"}