{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "charge-conserving_current_deposition"}, {"score": 0.0040444053843446326, "phrase": "parallel_graphics_processors"}, {"score": 0.0038352452380298464, "phrase": "cpu_implementation"}, {"score": 0.0036093693971289754, "phrase": "cold_plasma_runs"}, {"score": 0.003501452436803395, "phrase": "extremely_relativistic_plasma_runs"}, {"score": 0.0031966173935538992, "phrase": "single_threaded_state-of-art_cpu_code"}, {"score": 0.002896167001212006, "phrase": "current_deposition_scheme"}, {"score": 0.0026640466056415298, "phrase": "thread_racing_technique"}, {"score": 0.0026040262154057607, "phrase": "parallel_particle_sorting_scheme"}], "paper_keywords": ["Graphics processing unit (GPU)", " Computer unified device architecture (CUDA)", " Particle-in-cell (PIC) plasma simulation"], "paper_abstract": "We present an implementation of a 2D fully relativistic, electromagnetic particle-in-cell code, with charge-conserving current deposition, on parallel graphics processors (CPU) with CUDA. The CPU implementation achieved a one particle-step process time of 2.52 ns for cold plasma runs and 9.15 ns for extremely relativistic plasma runs, which are respectively 81 and 27 times faster than a single threaded state-of-art CPU code. A particle-based computation thread assignment was used in the current deposition scheme and write conflicts among the threads were resolved by a thread racing technique. A parallel particle sorting scheme was also developed and used. The implementation took advantage of fast on-chip shared memory, and can in principle be extended to 3D. (C) 2010 Elsevier Inc. All rights reserved", "paper_title": "Particle-in-cell simulations with charge-conserving current deposition on graphic processing units", "paper_id": "WOS:000286782300047"}