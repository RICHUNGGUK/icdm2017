{"auto_keywords": [{"score": 0.043506412378613246, "phrase": "hdph"}, {"score": 0.026897811453592883, "phrase": "fault_tolerance"}, {"score": 0.013428294865978085, "phrase": "hdph-rs"}, {"score": 0.008613638841171842, "phrase": "topology_awareness"}, {"score": 0.00481495049065317, "phrase": "scalable_reliable_computation"}, {"score": 0.004669845451682529, "phrase": "functional_computations"}, {"score": 0.004529093447865156, "phrase": "fault_recovery"}, {"score": 0.004419538941706716, "phrase": "non-uniform_communication_topologies"}, {"score": 0.00428629884026304, "phrase": "emergent_large_scale_parallel_architectures"}, {"score": 0.003982617095636925, "phrase": "haskell_dsls"}, {"score": 0.0038154673253945003, "phrase": "irregular_task-parallel_computations"}, {"score": 0.003769006950727621, "phrase": "large_distributed-memory_architectures"}, {"score": 0.0036330132038261795, "phrase": "api"}, {"score": 0.0035887342563437935, "phrase": "explicit_task_placement"}, {"score": 0.003545024951402818, "phrase": "sophisticated_work"}, {"score": 0.002985988377995789, "phrase": "operational_semantics"}, {"score": 0.0028430608076324727, "phrase": "semantic_equivalence"}, {"score": 0.0024389277933858054, "phrase": "dsl_implementations"}, {"score": 0.0023079225317714815, "phrase": "initial_evaluation"}, {"score": 0.0021049977753042253, "phrase": "hpc_platform"}], "paper_keywords": ["embedded domain specific languages", " parallelism", " topology awareness", " fault tolerance"], "paper_abstract": "The statelessness of functional computations facilitates both parallelism and fault recovery. Faults and non-uniform communication topologies are key challenges for emergent large scale parallel architectures. We report on HdpH and HdpH-RS, a pair of Haskell DSLs designed to address these challenges for irregular task-parallel computations on large distributed-memory architectures. Both DSLs share an API combining explicit task placement with sophisticated work stealing. HdpH focuses on scalability by making placement and stealing topology aware whereas HdpH-RS delivers reliability by means of fault tolerant work stealing. We present operational semantics for both DSLs and investigate conditions for semantic equivalence of HdpH and HdpH-RS programs, that is, conditions under which topology awareness can be transparently traded for fault tolerance. We detail how the DSL implementations realise topology awareness and fault tolerance. We report an initial evaluation of scalability and fault tolerance on a 256-core cluster and on up to 32K cores of an HPC platform.", "paper_title": "The HdpH DSLs for Scalable Reliable Computation", "paper_id": "WOS:000358311500007"}