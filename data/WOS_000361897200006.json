{"auto_keywords": [{"score": 0.04798652790106826, "phrase": "fast_storage_devices"}, {"score": 0.00481495049065317, "phrase": "user-level_file_system"}, {"score": 0.004477870190590885, "phrase": "social_network_services"}, {"score": 0.004428139418750855, "phrase": "cloud_platforms"}, {"score": 0.00409508755819924, "phrase": "disk-based_storage"}, {"score": 0.004027031316965272, "phrase": "byte-addressable_and_low-latency_non-volatile_memory_technologies"}, {"score": 0.003501991125315889, "phrase": "high_performance"}, {"score": 0.0029945352738604742, "phrase": "software_stack"}, {"score": 0.002847540262784593, "phrase": "byte-capable_interface"}, {"score": 0.002800158709933889, "phrase": "byte-aware_file_system"}, {"score": 0.0025892330566358503, "phrase": "unnecessary_layers"}, {"score": 0.0023281003994670714, "phrase": "multiple_benchmarks"}, {"score": 0.0022893422054387235, "phrase": "experimental_results"}], "paper_keywords": ["File system", " Fast storage device", " I/O stack", " Low latency I/O"], "paper_abstract": "Lately, fast storage devices are rapidly increasing in social network services, cloud platforms, etc. Unfortunately, the traditional Linux I/O stack is designed to maximize performance on disk-based storage. Emerging byte-addressable and low-latency non-volatile memory technologies (e.g., phase-change memories, MRAMs, and the memristor) provide very different characteristics, so the disk-based I/O stack cannot lead to high performance. This paper presents a high performance I/O stack for the fast storage devices. Our scheme is to remove the concept of block and to simplify the whole I/O path and software stack, which results in only two layers that are the byte-capable interface and the byte-aware file system called BAFS. We aim to minimize I/O latency and maximize bandwidth by eliminating the unnecessary layers and supporting byte-addressable I/O without requiring changes to applications. We have implemented a prototype and evaluated its performance with multiple benchmarks. The experimental results show that our I/O stack achieves 6.2 times on average and up to 17.5 times performance gains compared to the existing Linux I/O stack.", "paper_title": "Design and evaluation of a user-level file system for fast storage devices", "paper_id": "WOS:000361897200006"}