{"auto_keywords": [{"score": 0.04550984591034793, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "multi-objective_optimisation"}, {"score": 0.0046164478775379105, "phrase": "automated_test_data_generation"}, {"score": 0.004520272777451894, "phrase": "procedural_and_object-oriented_programs"}, {"score": 0.004199101289890982, "phrase": "structural_code_coverage"}, {"score": 0.003819339842998955, "phrase": "hybrid_self-adaptive_and_multi-objective_evolutionary_algorithms"}, {"score": 0.003623352647973122, "phrase": "preliminary_activity"}, {"score": 0.0035106041824568618, "phrase": "automatic_instrumentation"}, {"score": 0.0034738037330064885, "phrase": "source_code"}, {"score": 0.0033656930865509547, "phrase": "relevant_data_flow_information"}, {"score": 0.0031594291695784286, "phrase": "test_data_sets"}, {"score": 0.0027258422018680453, "phrase": "mutation_testing"}, {"score": 0.002640947693258573, "phrase": "actual_coverage_percentage"}, {"score": 0.0024789887640568093, "phrase": "static_data_flow_analysis"}, {"score": 0.0023516185395256505, "phrase": "dramatic_decrease"}], "paper_keywords": ["testing", " data flow", " evolutionary algorithms", " automated test data generation", " object-oriented software", " mutation testing"], "paper_abstract": "This paper presents a technique for automated test data generation applicable to both procedural and object-oriented programs. During the generation, the test cases are optimised such as to maximise structural code coverage by minimising at the same time the number of test cases required. To cope with these two inherently conflicting goals, hybrid self-adaptive and multi-objective evolutionary algorithms are applied. Our approach is based on a preliminary activity that provides support for the automatic instrumentation of source code in order to record the relevant data flow information at runtime. By exclusively utilising the insight gained hereby, test data sets are successively enhanced towards the goals mentioned above. Finally, the efficiency of the test set generated is evaluated in terms of its fault detection capability by means of mutation testing. In addition, the actual coverage percentage achieved is determined by taking into account the results of a static data flow analysis of the system under test. Thanks to the dramatic decrease of effort required for generating and verifying test cases, the technique presented here allows to substantially improve the V&V-phase of complex, safety-relevant software. Preliminary experimental results gained so far are reported in the paper.", "paper_title": "Automatic test data generation by multi-objective optimisation", "paper_id": "WOS:000241623700032"}