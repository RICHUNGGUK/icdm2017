{"auto_keywords": [{"score": 0.040600490254161195, "phrase": "false_errors"}, {"score": 0.033244376728729756, "phrase": "precision_loss"}, {"score": 0.00481495049065317, "phrase": "abstract_interpretations"}, {"score": 0.0046993598473345395, "phrase": "interpretation_techniques"}, {"score": 0.0043161190928529755, "phrase": "abstract_fixpoints"}, {"score": 0.003640516896245813, "phrase": "dag-based_abstraction_refinement_technique"}, {"score": 0.0028890603352364273, "phrase": "new_interpolated_widen_operator"}, {"score": 0.002264607102799332, "phrase": "abstraction_refinement_procedure"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Program correctness", " Abstract interpretation", " Interpolation", " CEGAR"], "paper_abstract": "interpretation techniques prove properties of programs by computing abstract fixpoints. All such analyses suffer from the possibility of false errors. We present a dag-based abstraction refinement technique to automatically refine such abstract interpretations and reduce false errors. This technique refines precision loss due to widen operator by a new interpolated widen operator and refines precision loss due to join operator by disjunctions. We prove the soundness and progress properties of this abstraction refinement procedure. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Refining abstract interpretations", "paper_id": "WOS:000280205500011"}