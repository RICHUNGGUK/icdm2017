{"auto_keywords": [{"score": 0.049324540543845156, "phrase": "language-integrated_query"}, {"score": 0.0453665111651286, "phrase": "microsoft's_linq_framework"}, {"score": 0.00481495049065317, "phrase": "practical_theory_of_language-integrated_query"}, {"score": 0.004627441072541506, "phrase": "renewed_attention"}, {"score": 0.004173244935967375, "phrase": "practical_theory"}, {"score": 0.003885085477351673, "phrase": "quoted_terms"}, {"score": 0.0033937776228549557, "phrase": "dynamic_generation"}, {"score": 0.0032099453192629976, "phrase": "nested_intermediate_data"}, {"score": 0.0031592690527974285, "phrase": "higher-order_features"}, {"score": 0.0030119758165837625, "phrase": "first-order_queries"}, {"score": 0.0028037753646260937, "phrase": "host_query"}, {"score": 0.00267301171407926, "phrase": "single_sql_query"}, {"score": 0.0025892330566358503, "phrase": "experimental_results"}, {"score": 0.002279508335630797, "phrase": "sql_query"}, {"score": 0.0021049977753042253, "phrase": "sql_queries"}], "paper_keywords": ["lambda calculus", " LINQ", " F#", " SQL", " quotation", " anti-quotation"], "paper_abstract": "Language-integrated query is receiving renewed attention, in part because of its support through Microsoft's LINQ framework. We present a practical theory of language-integrated query based on quotation and normalisation of quoted terms. Our technique supports join queries, abstraction over values and predicates, composition of queries, dynamic generation of queries, and queries with nested intermediate data. Higher-order features prove useful even for constructing first-order queries. We prove a theorem characterising when a host query is guaranteed to generate a single SQL query. We present experimental results confirming our technique works, even in situations where Microsoft's LINQ framework either fails to produce an SQL query or, in one case, produces an avalanche of SQL queries.", "paper_title": "A Practical Theory of Language-Integrated Query", "paper_id": "WOS:000327696700038"}