{"auto_keywords": [{"score": 0.048734215142491696, "phrase": "model-driven_development"}, {"score": 0.04720912624670318, "phrase": "modular_development"}, {"score": 0.00481495049065317, "phrase": "verifying_protocol_conformance"}, {"score": 0.004769444094319619, "phrase": "software_model"}, {"score": 0.004420472010542188, "phrase": "state_machines"}, {"score": 0.00388828234270598, "phrase": "protocol_conformance"}, {"score": 0.0037432199549135826, "phrase": "actual_behavior"}, {"score": 0.0036207206487324506, "phrase": "protocol_specifications"}, {"score": 0.003261133560558666, "phrase": "embedded_systems"}, {"score": 0.0030656196752517836, "phrase": "component_behavior"}, {"score": 0.0028006988338192375, "phrase": "conformance_check"}, {"score": 0.0027610089418453614, "phrase": "state_space_exploration"}, {"score": 0.0026202187680903063, "phrase": "software_model_checker"}, {"score": 0.00258307991054107, "phrase": "mdd_tool"}, {"score": 0.0025708601978929172, "phrase": "ibm"}, {"score": 0.0023485549678832628, "phrase": "unexpected_conformance_errors"}, {"score": 0.002326304140277375, "phrase": "encouraging_performance"}, {"score": 0.0021763278640166707, "phrase": "embedded_components"}, {"score": 0.0021251363422701446, "phrase": "industrial_applications"}, {"score": 0.002104998402294156, "phrase": "mdd."}], "paper_keywords": ["Component-based software engineering", " behavioral interface specifications", " software modeling", " model-driven development", " formal specification and verification", " software model checking"], "paper_abstract": "To facilitate modular development, the use of state machines has been proposed to specify the protocol (i.e., the sequence of messages) that each port of a component can engage in. The protocol conformance checking problem consists of determining whether the actual behavior of a component conforms to the protocol specifications on its ports. In this paper, we consider this problem in the context of the model-driven development (MDD) of embedded systems based on UML 2, in which UML 2 state machines are used to specify component behavior. We provide a definition of conformance which slightly extends those found in the literature and reduce the conformance check to a state space exploration. We describe a tool implementing the approach using the Java PathFinder software model checker and the MDD tool IBM Rational RoseRT, discuss its application to three case studies, and show how the tool repeatedly allowed us to find unexpected conformance errors with encouraging performance. We conclude that the approach is promising for supporting the modular development of embedded components in the context of industrial applications of MDD.", "paper_title": "Verifying Protocol Conformance Using Software Model Checking for the Model-Driven Development of Embedded Systems", "paper_id": "WOS:000323643000009"}