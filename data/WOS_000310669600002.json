{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "shape_graphs"}, {"score": 0.04451719316583288, "phrase": "code_section"}, {"score": 0.004723322467153553, "phrase": "data_dependence_detection_test"}, {"score": 0.004651271219032404, "phrase": "new_conflict_analysis_algorithm"}, {"score": 0.004545240514015278, "phrase": "intensive_use"}, {"score": 0.00451043437607004, "phrase": "recursive_data_structures"}, {"score": 0.0036788184374592706, "phrase": "traversing_information"}, {"score": 0.0035673211706948576, "phrase": "path_expressions"}, {"score": 0.003154012038613403, "phrase": "different_loop"}, {"score": 0.0030820072734233693, "phrase": "different_call_instance"}, {"score": 0.003046621804854539, "phrase": "recursive_function"}, {"score": 0.002864628676257225, "phrase": "exponential_complexity"}, {"score": 0.0027247727563746694, "phrase": "computational_cost"}, {"score": 0.0024842242921857705, "phrase": "data_dependence_analysis_times"}, {"score": 0.0023995846112991625, "phrase": "studied_benchmarks"}, {"score": 0.0023538120430501392, "phrase": "previous_data_dependence_algorithm"}, {"score": 0.0022911901892022847, "phrase": "uncovered_data_dependences"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Languages and compilers", " Data types and structures", " Program analysis", " Data dependencies", " Linked representations"], "paper_abstract": "We propose a data dependence detection test based on a new conflict analysis algorithm for C codes which make intensive use of recursive data structures dynamically allocated in the heap. This algorithm requires two pieces of information from the code section under analysis (a loop or a recursive function): (i) abstract shape graphs that represent the state of the heap at the code section; and (ii) path expressions that collect the traversing information for each statement. Our algorithm projects the path expressions on the shape graphs and checks over the graphs to ascertain whether one of the sites reached by a write statement matches one of the sites reached by another statement on a different loop iteration (or on a different call instance in a recursive function), in which case a conflict between the two statements is reported. Although our algorithm presents exponential complexity, we have found that in practice the parameters that dominate the computational cost have very low values, and to the best of our knowledge, all the other related studies involve higher costs. In fact, our experimental results show reductions in the data dependence analysis times of one or two orders of magnitude in some of the studied benchmarks when compared to a previous data dependence algorithm. Thanks to the information on uncovered data dependences, we have manually parallelized these codes, achieving speedups of 2.19 to 3.99 in four cores. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "A data dependence test based on the projection of paths over shape graphs", "paper_id": "WOS:000310669600002"}