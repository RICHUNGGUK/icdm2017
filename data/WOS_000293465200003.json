{"auto_keywords": [{"score": 0.04472882712454684, "phrase": "symbolic_execution"}, {"score": 0.00481495049065317, "phrase": "scalable_symbolic_execution-driven_test_generation"}, {"score": 0.004568871736067739, "phrase": "advanced_program_analysis"}, {"score": 0.004223032986655664, "phrase": "symbolic_techniques"}, {"score": 0.003980875186335867, "phrase": "path-based_test_generation"}, {"score": 0.003752550907120244, "phrase": "large_programs"}, {"score": 0.0036553070575015344, "phrase": "exponential_number"}, {"score": 0.0032908057622663732, "phrase": "path_explosion_problem"}, {"score": 0.0032266093099550955, "phrase": "search_strategies"}, {"score": 0.0031636612155559267, "phrase": "quick_branch_coverage"}, {"score": 0.0028480459059007468, "phrase": "reachability-guided_strategy"}, {"score": 0.002737960968372391, "phrase": "reachability_graph"}, {"score": 0.0026321198895843173, "phrase": "unvisited_portions"}, {"score": 0.002416589459425828, "phrase": "conflict_analysis"}, {"score": 0.0023694065215394593, "phrase": "nonchronological_backtracking"}, {"score": 0.0023079225317714815, "phrase": "experimental_evidence"}, {"score": 0.0021896891011033105, "phrase": "search_space"}, {"score": 0.0021049977753042253, "phrase": "test_generation"}], "paper_keywords": ["test generation", " software testing", " symbolic execution", " path explosion", " conflict analysis"], "paper_abstract": "With the advent of advanced program analysis and constraint solving techniques, several test generation tools use variants of symbolic execution. Symbolic techniques have been shown to be very effective in path-based test generation; however, they fail to scale to large programs due to the exponential number of paths to be explored. In this paper, we focus on tackling this path explosion problem and propose search strategies to achieve quick branch coverage under symbolic execution, while exploring only a fraction of paths in the program. We present a reachability-guided strategy that makes use of the reachability graph of the program to explore unvisited portions of the program and a conflict-driven backtracking strategy that utilizes conflict analysis to perform nonchronological backtracking. We present experimental evidence that these strategies can significantly reduce the search space and improve the speed of test generation for programs.", "paper_title": "Strategies for scalable symbolic execution-driven test generation for programs", "paper_id": "WOS:000293465200003"}