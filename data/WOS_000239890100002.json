{"auto_keywords": [{"score": 0.027553172033826717, "phrase": "optimal_performance"}, {"score": 0.02719380227276455, "phrase": "memory_consumption"}, {"score": 0.00481495049065317, "phrase": "dynamic_memory_management"}, {"score": 0.004655924035639928, "phrase": "total_program_execution_time"}, {"score": 0.004593787100061613, "phrase": "object_oriented_languages"}, {"score": 0.004266501496765747, "phrase": "c._bad_memory_management"}, {"score": 0.004209539728590977, "phrase": "severe_waste"}, {"score": 0.0033946556965877873, "phrase": "computer_memory"}, {"score": 0.0033268412940032103, "phrase": "expensive_and_limited_resource"}, {"score": 0.0030688220103201836, "phrase": "memory_allocator"}, {"score": 0.0029873281676201565, "phrase": "best_performance"}, {"score": 0.0029473940028924748, "phrase": "least_memory_consumption"}, {"score": 0.002811770047652563, "phrase": "tunable_allocators"}, {"score": 0.0027370835853738626, "phrase": "general_purpose_allocators"}, {"score": 0.002664375650349975, "phrase": "operating_systems"}, {"score": 0.0023603078194781965, "phrase": "program's_needs"}, {"score": 0.002206606452557159, "phrase": "nearly_equal_memory_consumption"}, {"score": 0.0021335427588412056, "phrase": "well_known_doug_lea_allocator"}, {"score": 0.0021049977753042253, "phrase": "seven_benchmark_programs"}], "paper_keywords": ["dynamic memory allocation", " performance", " tuning", " optimization"], "paper_abstract": "Dynamic memory management can make up to 60% of total program execution time. Object oriented languages such as C++ can use 20 times more memory than procedural languages like C. Bad memory management causes severe waste of memory, several times that actually needed, in programs. It can also cause degradation in performance. Many widely used allocators waste memory and/or CPU time. Since computer memory is an expensive and limited resource its efficient utilization is necessary. There cannot exist a memory allocator that will deliver best performance and least memory consumption for all programs and therefore easily tunable allocators are required. General purpose allocators that come with operating systems give less than optimal performance or memory consumption. An allocator with a few tunable parameters can be tailored to a program's needs for optimal performance and memory consumption. Our tunable hybrid allocator design shows 11-54% better performance and nearly equal memory consumption when compared to the well known Doug Lea allocator in seven benchmark programs. (C) 2005 Elsevier Inc. All rights reserved.", "paper_title": "A tunable hybrid memory allocator", "paper_id": "WOS:000239890100002"}