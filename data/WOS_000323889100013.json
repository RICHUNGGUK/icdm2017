{"auto_keywords": [{"score": 0.038873053151351256, "phrase": "average-case_model"}, {"score": 0.030902079666486712, "phrase": "join-project_plan"}, {"score": 0.00481495049065317, "phrase": "joins._relational_joins"}, {"score": 0.004704187604192605, "phrase": "relational_algebra"}, {"score": 0.004525190364108967, "phrase": "standard_database_query_language_sql."}, {"score": 0.004319322238010043, "phrase": "output_size"}, {"score": 0.004236321075918639, "phrase": "important_task"}, {"score": 0.0042035670399069485, "phrase": "database_query_optimizers"}, {"score": 0.004012271808564447, "phrase": "good_execution_plans"}, {"score": 0.0038296485293910026, "phrase": "theoretical_perspective"}, {"score": 0.003756021561809324, "phrase": "worst-case_model"}, {"score": 0.0035711248264686415, "phrase": "known_probability_distribution"}, {"score": 0.003516079377293321, "phrase": "former_case"}, {"score": 0.003435092524339692, "phrase": "worst-case_size"}, {"score": 0.003329994649432498, "phrase": "fractional_edge_cover_number"}, {"score": 0.003178326919668771, "phrase": "upper_bound"}, {"score": 0.0028729252198422825, "phrase": "fractional_edge"}, {"score": 0.0027741761880779535, "phrase": "join_plan"}, {"score": 0.002720785798036066, "phrase": "intermediate_projections"}, {"score": 0.002440192402613492, "phrase": "expected_time"}, {"score": 0.002356282242320051, "phrase": "constant_factor"}, {"score": 0.00224013518726087, "phrase": "key_combinatorial_parameter"}, {"score": 0.002188472974132732, "phrase": "maximum_density"}, {"score": 0.002163089417146551, "phrase": "underlying_hypergraph"}, {"score": 0.0021049977753042253, "phrase": "effective_use"}], "paper_keywords": ["fractional edge cover", " linear programming", " join", " database query", " query plan"], "paper_abstract": "Relational joins are at the core of relational algebra, which in turn is the core of the standard database query language SQL. As their evaluation is expensive and very often dominated by the output size, it is an important task for database query optimizers to compute estimates on the size of joins and to find good execution plans for sequences of joins. We study these problems from a theoretical perspective, both in the worst-case model and in an average-case model where the database is chosen according to a known probability distribution. In the former case, our first key observation is that the worst-case size of a query is characterized by the fractional edge cover number of its underlying hypergraph, a combinatorial parameter previously known to provide an upper bound. We complete the picture by proving a matching lower bound and by showing that there exist queries for which the join-project plan suggested by the fractional edge cover approach may be substantially better than any join plan that does not use intermediate projections. On the other hand, we show that in the average-case model, every join-project plan can be turned into a plan containing no projections in such a way that the expected time to evaluate the plan increases only by a constant factor independent of the size of the database. Not surprisingly, the key combinatorial parameter in this context is the maximum density of the underlying hypergraph. We show how to make effective use of this parameter to eliminate the projections.", "paper_title": "SIZE BOUNDS AND QUERY PLANS FOR RELATIONAL JOINS", "paper_id": "WOS:000323889100013"}