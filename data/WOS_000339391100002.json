{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "spl_refinements"}, {"score": 0.004721711709176679, "phrase": "software_product_lines"}, {"score": 0.004562847483469705, "phrase": "typical_program_refactoring_tools"}, {"score": 0.004345085569121329, "phrase": "new_features"}, {"score": 0.004017989546119125, "phrase": "existing_products"}, {"score": 0.003920891569777894, "phrase": "typical_program_refactorings"}, {"score": 0.0037888687452790953, "phrase": "spl_context"}, {"score": 0.003661275004971829, "phrase": "core_assets"}, {"score": 0.0035902958977673313, "phrase": "additional_artifacts"}, {"score": 0.0035379628447303703, "phrase": "feature_models"}, {"score": 0.003503497128638102, "phrase": "configuration_knowledge"}, {"score": 0.0032714270066711835, "phrase": "alternative_assets"}, {"score": 0.0031767199435197243, "phrase": "well-formed_program"}, {"score": 0.003054681986032532, "phrase": "manual_changes"}, {"score": 0.003024909947609294, "phrase": "existing_program_refactoring_tools"}, {"score": 0.0029807934480637855, "phrase": "behavioral_changes"}, {"score": 0.002937318465594425, "phrase": "existing_product_configurations"}, {"score": 0.002742648551009682, "phrase": "product_line_evolution"}, {"score": 0.0026501935378083663, "phrase": "spl_transformations"}, {"score": 0.002573424607574822, "phrase": "original_spl_products"}, {"score": 0.002523481637809674, "phrase": "different_and_practical_approximations"}, {"score": 0.0021784745589727246, "phrase": "code_coverage"}], "paper_keywords": ["software product lines", " safe evolution", " refactoring", " checking tools"], "paper_abstract": "Developers evolve software product lines (SPLs) manually or using typical program refactoring tools. However, when evolving an SPL to introduce new features or to improve its design, it is important to make sure that the behavior of existing products is not affected. Typical program refactorings cannot guarantee that because the SPL context goes beyond code and other kinds of core assets, and involves additional artifacts such as feature models and configuration knowledge. Besides that, we typically have to deal with a set of alternative assets that do not constitute a well-formed program in an SPL. As a result, manual changes and existing program refactoring tools may introduce behavioral changes or invalidate existing product configurations. To reduce such risks, we propose approaches and implement four tools for making product line evolution safer. These tools check if SPL transformations preserve the behavior of the original SPL products. They implement different and practical approximations of refinement notions from a theory for safely evolving SPLs. Besides specifying the algorithms of each approach, we compare them with respect to soundness, performance and code coverage in 35 evolution scenarios of an SPL with 32 KLOC.", "paper_title": "A Toolset for Checking SPL Refinements", "paper_id": "WOS:000339391100002"}