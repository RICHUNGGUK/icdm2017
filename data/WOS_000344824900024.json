{"auto_keywords": [{"score": 0.047916548037392745, "phrase": "quantum_circuit"}, {"score": 0.013497284815126725, "phrase": "u'"}, {"score": 0.01219090209512432, "phrase": "quantum_gates"}, {"score": 0.011009552772500819, "phrase": "distributed_program"}, {"score": 0.010925658538007877, "phrase": "test_data"}, {"score": 0.00481495049065317, "phrase": "software_package"}, {"score": 0.004802613210836481, "phrase": "qcompiler"}, {"score": 0.004778223813051847, "phrase": "chen"}, {"score": 0.004753806598340383, "phrase": "wang"}, {"score": 0.004692980391580608, "phrase": "general_quantum_compilation_framework"}, {"score": 0.004550669123303854, "phrase": "sequential_set"}, {"score": 0.004527371799277529, "phrase": "elementary_quantum_gates"}, {"score": 0.004423994518127831, "phrase": "extended_software"}, {"score": 0.004367581653370531, "phrase": "permutation_matrices_p"}, {"score": 0.004012803888284523, "phrase": "quantum_circuit_implementation"}, {"score": 0.003982011128052839, "phrase": "matrix_component"}, {"score": 0.003861175855298779, "phrase": "high-performance_computers"}, {"score": 0.00383154215593113, "phrase": "multiprocessor_architecture"}, {"score": 0.00374399358035391, "phrase": "total_number"}, {"score": 0.0036594641630427254, "phrase": "program"}, {"score": 0.0036303546926971966, "phrase": "optqc_catalogue"}, {"score": 0.0035292075751165502, "phrase": "cpc_program_library"}, {"score": 0.0035111212173850426, "phrase": "queen's_university"}, {"score": 0.003493127482810965, "phrase": "belfast"}, {"score": 0.00347522512377874, "phrase": "n._ireland"}, {"score": 0.0034396947486115812, "phrase": "standard_cpc"}, {"score": 0.003143849342926373, "phrase": "tar.gz_programming_language"}, {"score": 0.003127776557777529, "phrase": "fortran"}, {"score": 0.0030640804704319255, "phrase": "fortran_compiler"}, {"score": 0.003048370487544551, "phrase": "mpi_library"}, {"score": 0.0030094799909065055, "phrase": "linux"}, {"score": 0.0027860884734700595, "phrase": "threshold-based_acceptance_strategy"}, {"score": 0.002743441412836047, "phrase": "permutation_matrices"}, {"score": 0.0025008899942794817, "phrase": "unitary_operator"}, {"score": 0.00247529638625566, "phrase": "recursively_applyingthe_cosine-sine_decomposition"}, {"score": 0.002393907896783117, "phrase": "unitary_matrix"}, {"score": 0.002357249810661667, "phrase": "prescribed_maximum_number"}, {"score": 0.0023331227492950422, "phrase": "qubit_permutation_selection"}, {"score": 0.002315189274315822, "phrase": "subsequent_simulated_annealing_algorithm"}, {"score": 0.0023033100935570755, "phrase": "running_time_estimates"}, {"score": 0.0022390533383717715, "phrase": "simulation_results"}, {"score": 0.0021654157292186967, "phrase": "fornax_supercomputer"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Quantum computation", " Quantum gates", " Quantum circuit", " Quantum compiler", " Optimization", " Stimulated annealing"], "paper_abstract": "The software package Qcompiler (Chen and Wang 2013) provides a general quantum compilation framework, which maps any given unitary operation into a quantum circuit consisting of a sequential set of elementary quantum gates. In this paper, we present an extended software OptQC, which finds permutation matrices P and Q for a given unitary matrix U such that the number of gates in the quantum circuit of U = Q(T)P(T)U'PQ is significantly reduced, where U' is equivalent to U up to a permutation and the quantum circuit implementation of each matrix component is considered separately. We extend further this software package to make use of high-performance computers with a multiprocessor architecture using MPI. We demonstrate its effectiveness in reducing the total number of quantum gates required for various unitary operators. Program summary Program title: OptQC Catalogue identifier: AEUA_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEUA_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 178435 No. of bytes in distributed program, including test data, etc.: 491574 Distribution format: tar.gz Programming language: Fortran, MPI. Computer: Any computer with Fortran compiler and MPI library. Operating system: Linux. Classification: 4.15. Nature of problem: It aims to minimize the number of quantum gates required to implement a given unitary operation. Solution method: It utilizes a threshold-based acceptance strategy for simulated annealing to select permutation matrices P and Q for a given unitary matrix U such that the number of gates in the quantum circuit of U Q= Q(T)P(T)U'PQ is minimized, where U' is equivalent to U up to a permutation. The decomposition of a unitary operator is performed by recursively applyingthe cosine-sine decomposition. Running time: Running time increases with the size of the unitary matrix, as well as the prescribed maximum number of iterations for qubit permutation selection and the subsequent simulated annealing algorithm. Running time estimates are provided for each example in Section 4. All simulation results presented in this paper are obtained from running the program on the Fornax supercomputer managed by iVEC@UWA with Intel Xeon X5650 CPUs. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "OptQC: An optimized parallel quantum compiler", "paper_id": "WOS:000344824900024"}