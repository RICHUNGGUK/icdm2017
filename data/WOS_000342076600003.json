{"auto_keywords": [{"score": 0.048021200294285325, "phrase": "pcm"}, {"score": 0.004815003409023396, "phrase": "predictive"}, {"score": 0.004701015188740582, "phrase": "phase_change_memory"}, {"score": 0.004645057834614705, "phrase": "change_memory"}, {"score": 0.004340263267055143, "phrase": "promising_features"}, {"score": 0.004288581530198804, "phrase": "non-volatile_storage"}, {"score": 0.00407161650109722, "phrase": "random_accesses"}, {"score": 0.0038965930422333035, "phrase": "pcm-based_memory_systems"}, {"score": 0.0036993883017726265, "phrase": "dram."}, {"score": 0.0033880439015902446, "phrase": "database_systems"}, {"score": 0.003229374325577207, "phrase": "tree_node_splits"}, {"score": 0.003053598205821532, "phrase": "pre-allocating_space"}, {"score": 0.002818909613625567, "phrase": "novel_predictive_model"}, {"score": 0.0027852927366010406, "phrase": "future_data_distribution"}, {"score": 0.002741091312632307, "phrase": "current_data"}, {"score": 0.002560907803820395, "phrase": "leaf_node"}, {"score": 0.0024604876113911173, "phrase": "sorted_order"}, {"score": 0.002382993023201034, "phrase": "postgresql"}, {"score": 0.002326464619238653, "phrase": "emulated_environment"}, {"score": 0.0021049977753042253, "phrase": "pcm-like_hardware_environment"}], "paper_keywords": ["Phase change memory (PCM)", " non-volatile storage", " B-p-tree", " predictive model"], "paper_abstract": "Phase change memory (PCM) has been considered an attractive alternative to flash memory and DRAM. It has promising features, including non-volatile storage, byte addressability, fast read and write operations, and supports random accesses. However, there are challenges in designing algorithms for PCM-based memory systems, such as longer write latency and higher energy consumption compared to DRAM. In this paper, we propose a new predictive B+-tree index, called the B-p-tree, which is tailored for database systems that make use of PCM. Our B-p-tree reduces data movements caused by tree node splits and merges that arise from insertions and deletions. This is achieved by pre-allocating space on PCM for near future data. To ensure the space are allocated where they are needed, we propose a novel predictive model to ascertain future data distribution based on the current data. In addition, as in [4], when keys are inserted into a leaf node, they are packed but need not be in sorted order. We have implemented the B-p-tree in PostgreSQL and evaluated it in an emulated environment. Our experimental results show that the B-p-tree significantly reduces the number of writes, therefore making it write and energy efficient and suitable for a PCM-like hardware environment.", "paper_title": "B-p-Tree: A Predictive B+-Tree for Reducing Writes on Phase Change Memory", "paper_id": "WOS:000342076600003"}