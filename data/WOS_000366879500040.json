{"auto_keywords": [{"score": 0.0406224671469103, "phrase": "bridge_components"}, {"score": 0.013224960671276419, "phrase": "different_levels"}, {"score": 0.012461032235196587, "phrase": "virtual_prototyping"}, {"score": 0.008184752058128868, "phrase": "virtual_prototype"}, {"score": 0.00481495049065317, "phrase": "communication-driven_virtual_prototyping"}, {"score": 0.00476272232146049, "phrase": "networked_embedded_systems"}, {"score": 0.004685435383815233, "phrase": "communication-driven_virtual_prototyping_approach"}, {"score": 0.004634605533299669, "phrase": "existing_esl_design_methodology"}, {"score": 0.004509919457793852, "phrase": "data-flow_application"}, {"score": 0.004388573056434581, "phrase": "existing_synthesis_tools"}, {"score": 0.0043409496649822275, "phrase": "individual_subsystems"}, {"score": 0.004235670021313763, "phrase": "hardware_accelerators"}, {"score": 0.004121672175779706, "phrase": "different_subsystems"}, {"score": 0.0037055370870874484, "phrase": "different_communication_protocols"}, {"score": 0.003480031366799063, "phrase": "complete_esl_design_flow"}, {"score": 0.0034422330919613294, "phrase": "design_space_exploration"}, {"score": 0.0033403842729325395, "phrase": "implementation_cost"}, {"score": 0.0033221916309083273, "phrase": "additional_latency"}, {"score": 0.0031888580797296115, "phrase": "exploration_model"}, {"score": 0.0031370304755352486, "phrase": "required_communication-related_design_decisions"}, {"score": 0.0030776253120414826, "phrase": "binary_code"}, {"score": 0.003060859331898502, "phrase": "software_tasks"}, {"score": 0.0030193416820392554, "phrase": "different_synchronization_patterns"}, {"score": 0.0029540781456015215, "phrase": "implementation_candidates"}, {"score": 0.0029219883574645605, "phrase": "dse"}, {"score": 0.0027741761880779535, "phrase": "individual_synthesis_tool"}, {"score": 0.002633832886254408, "phrase": "system_integration"}, {"score": 0.002534974041090166, "phrase": "distributed_control_application"}, {"score": 0.0024733853322652637, "phrase": "six_subsystems"}, {"score": 0.0023935828056856176, "phrase": "video_processing_domain"}, {"score": 0.002329046510901109, "phrase": "resulting_subsystems"}, {"score": 0.002291165495057659, "phrase": "tlm"}, {"score": 0.0022538909843705115, "phrase": "rtl."}, {"score": 0.0022111720236287547, "phrase": "proposed_technique's_applicability"}, {"score": 0.00219311232069446, "phrase": "achieved_productivity_gain"}, {"score": 0.002169261457850553, "phrase": "resulting_simulation_performance"}, {"score": 0.0021515433205041585, "phrase": "considered_levels"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Virtual prototyping", " ESL design flow", " Communication refinement", " SystemC-TLM"], "paper_abstract": "This work presents a communication-driven virtual prototyping approach integrated in an existing ESL design methodology to automatically synthesize, evaluate, and optimize a data-flow application for mixed hardware/software and even networked MPSoCs. While existing synthesis tools are suitable for individual subsystems (e.g., software tasks for CPUs, hardware accelerators), the problem of establishing the communication between different subsystems that may even be simulated at different levels of abstraction is still challenging. As a remedy, we introduce the concept of bridge components in our architecture model that, during virtual prototyping, serve as integrators between subsystems that may have different communication protocols and be simulated at different levels of abstraction (e.g., TLM, behavioral level, RTL). We propose to consider bridges throughout the complete ESL design flow: Already during Design Space Exploration (DSE), the characteristics of bridge components such as implementation cost and additional latency on the application can be taken into account. Moreover, we extend the exploration model of the DSE to include required communication-related design decisions, i.e., the mapping of binary code for software tasks and the selection of different synchronization patterns for the communication. For virtual prototyping of implementation candidates derived by the DSE, the bridge components enable to automatically disassemble the system into subsystems and hand each subsystem over to an individual synthesis tool. When integrating the subsystems together, our methodology also synthesizes the interfaces for all bridges which significantly simplifies system integration. As a proof of concept, we present (I) a distributed control application that is transformed into a virtual prototype consisting of six subsystems and (II) a data-flow application from the video processing domain transformed into a virtual prototype consisting of three subsystems. The resulting subsystems can be concurrently simulated at TLM, behavioral level, and RTL. The experiments give evidence of the proposed technique's applicability, the achieved productivity gain, and the resulting simulation performance at the considered levels of abstraction. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Automatic communication-driven virtual prototyping and design for networked embedded systems", "paper_id": "WOS:000366879500040"}