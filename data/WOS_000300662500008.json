{"auto_keywords": [{"score": 0.049483572884790016, "phrase": "data_sets"}, {"score": 0.0070914799794953845, "phrase": "horizontal_aggregations"}, {"score": 0.005500001038774971, "phrase": "pivot_operator"}, {"score": 0.004873407283331498, "phrase": "spj_method"}, {"score": 0.004814985768664201, "phrase": "sql"}, {"score": 0.0047155367844327, "phrase": "data_mining_analysis"}, {"score": 0.004637478829869904, "phrase": "data_set"}, {"score": 0.004429388453288922, "phrase": "data_mining_project"}, {"score": 0.00421297029755273, "phrase": "existing_sql_aggregations"}, {"score": 0.0040238512275833265, "phrase": "aggregated_group"}, {"score": 0.003924284136338428, "phrase": "significant_manual_effort"}, {"score": 0.0037795163893761027, "phrase": "horizontal_layout"}, {"score": 0.0036097844103129043, "phrase": "sql_code"}, {"score": 0.0035648266669315943, "phrase": "aggregated_columns"}, {"score": 0.0035204268675160257, "phrase": "horizontal_tabular_layout"}, {"score": 0.0033204052817782438, "phrase": "new_class"}, {"score": 0.0031448288291084, "phrase": "horizontal_denormalized_layout"}, {"score": 0.0028926147550022607, "phrase": "standard_layout"}, {"score": 0.002594652434287807, "phrase": "standard_relational_algebra_operators"}, {"score": 0.0023764959294052964, "phrase": "large_tables"}, {"score": 0.002346861891137455, "phrase": "proposed_query_evaluation_methods"}, {"score": 0.0023079225317714815, "phrase": "similar_speed"}, {"score": 0.0021049977753042253, "phrase": "linear_scalability"}], "paper_keywords": ["Aggregation", " data preparation", " pivoting", " SQL"], "paper_abstract": "Preparing a data set for analysis is generally the most time consuming task in a data mining project, requiring many complex SQL queries, joining tables, and aggregating columns. Existing SQL aggregations have limitations to prepare data sets because they return one column per aggregated group. In general, a significant manual effort is required to build data sets, where a horizontal layout is required. We propose simple, yet powerful, methods to generate SQL code to return aggregated columns in a horizontal tabular layout, returning a set of numbers instead of one number per row. This new class of functions is called horizontal aggregations. Horizontal aggregations build data sets with a horizontal denormalized layout (e.g., point-dimension, observation-variable, instance-feature), which is the standard layout required by most data mining algorithms. We propose three fundamental methods to evaluate horizontal aggregations: CASE: Exploiting the programming CASE construct; SPJ: Based on standard relational algebra operators (SPJ queries); PIVOT: Using the PIVOT operator, which is offered by some DBMSs. Experiments with large tables compare the proposed query evaluation methods. Our CASE method has similar speed to the PIVOT operator and it is much faster than the SPJ method. In general, the CASE and PIVOT methods exhibit linear scalability, whereas the SPJ method does not.", "paper_title": "Horizontal Aggregations in SQL to Prepare Data Sets for Data Mining Analysis", "paper_id": "WOS:000300662500008"}