{"auto_keywords": [{"score": 0.040691162217611467, "phrase": "nids."}, {"score": 0.03873182624084259, "phrase": "load_balancer"}, {"score": 0.030570330175441415, "phrase": "dnnl"}, {"score": 0.00481495049065317, "phrase": "distributed_learning_algorithm"}, {"score": 0.004758457292840376, "phrase": "network_traffic_bandwidth"}, {"score": 0.004665764181113345, "phrase": "exponential_rate"}, {"score": 0.004261998281333649, "phrase": "increasingly_complex_intrusion_detection_methods"}, {"score": 0.004129873531628877, "phrase": "network_intrusion_detection"}, {"score": 0.004001828274595483, "phrase": "continuous_increasing_speed"}, {"score": 0.003908396188878932, "phrase": "new_challenges"}, {"score": 0.003787191644093659, "phrase": "gigabit_ethernet"}, {"score": 0.003742711659195878, "phrase": "ideal_policy"}, {"score": 0.003626626504149897, "phrase": "traffic_data"}, {"score": 0.003555902292752528, "phrase": "different_detection_sensors"}, {"score": 0.003472845095323694, "phrase": "splitting_data"}, {"score": 0.003260690513595527, "phrase": "specific_attack"}, {"score": 0.0032223742018434856, "phrase": "load_balancer_design"}, {"score": 0.0031223774204093713, "phrase": "new_bottleneck"}, {"score": 0.0029781530607129653, "phrase": "distributed_neural_network"}, {"score": 0.0028630535573013686, "phrase": "large_data_set"}, {"score": 0.0027093285574752457, "phrase": "independent_neural_network"}, {"score": 0.0025537472239953807, "phrase": "completeness_analysis"}, {"score": 0.0025237171554924128, "phrase": "dnnl's_learning_algorithm"}, {"score": 0.002224510044064184, "phrase": "standard_intrusion_detection_benchmark"}, {"score": 0.002121670413111008, "phrase": "high_detection_rate"}, {"score": 0.0021049977753042253, "phrase": "low_false_alarm_rate"}], "paper_keywords": ["Intrusion detection system", " Distributed learning", " Neural network", " Network behavior"], "paper_abstract": "As network traffic bandwidth is increasing at an exponential rate, it's impossible to keep up with the speed of networks by just increasing the speed of processors. Besides, increasingly complex intrusion detection methods only add further to the pressure on network intrusion detection (NIDS) platforms, so the continuous increasing speed and throughput of network poses new challenges to NIDS. To make NIDS usable in Gigabit Ethernet, the ideal policy is using a load balancer to split the traffic data and forward those to different detection sensors, which can analyze the splitting data in parallel. In order to make each slice contains all the evidence necessary to detect a specific attack, the load balancer design must be complicated and it becomes a new bottleneck of NIDS. To simplify the load balancer this paper put forward a distributed neural network learning algorithm (DNNL). Using DNNL a large data set can be split randomly and each slice of data is presented to an independent neural network; these networks can be trained in distribution and each one in parallel. Completeness analysis shows that DNNL's learning algorithm is equivalent to training by one neural network which uses the technique of regularization. The experiments to check the completeness and efficiency of DNNL are performed on the KDD'99 Data Set which is a standard intrusion detection benchmark. Compared with other approaches on the same benchmark, DNNL achieves a high detection rate and low false alarm rate.", "paper_title": "Large-scale network intrusion detection based on distributed learning algorithm", "paper_id": "WOS:000262672400003"}