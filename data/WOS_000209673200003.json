{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "structured_specifications"}, {"score": 0.04430576069817976, "phrase": "verification_process"}, {"score": 0.004763895422211728, "phrase": "conventional_specifications"}, {"score": 0.004663396040465122, "phrase": "flat_structure"}, {"score": 0.004492573860101133, "phrase": "underlying_logic"}, {"score": 0.004304963945457799, "phrase": "better_guidance"}, {"score": 0.003952828685048176, "phrase": "specification_framework"}, {"score": 0.003910879154656061, "phrase": "separation_logic"}, {"score": 0.003668333531296882, "phrase": "newly_introduced_structures"}, {"score": 0.0033861224940737846, "phrase": "case_analysis"}, {"score": 0.003244567402785763, "phrase": "disjointedness_conditions"}, {"score": 0.002931569771634119, "phrase": "existential_quantification"}, {"score": 0.0028543298631502107, "phrase": "novel_formulae"}, {"score": 0.002794001681064862, "phrase": "better_reuse"}, {"score": 0.002720376476146181, "phrase": "initial_experiments"}, {"score": 0.0025514745448798363, "phrase": "performance_overhead"}, {"score": 0.0021735890994119757, "phrase": "recent_development"}, {"score": 0.002116277794938425, "phrase": "freertos_scheduler"}, {"score": 0.0021049977753042253, "phrase": "ferreira_et_al"}], "paper_keywords": ["Structured specifications", " Separation logic", " ase analysis"], "paper_abstract": "Conventional specifications typically have a flat structure that is based primarily on the underlying logic. Such specifications lack structures that could provide better guidance to the verification process. In this work, we propose to add three new structures to a specification framework for separation logic to achieve a more precise and better guided verification for pointer-based programs. The newly introduced structures empower users with more control over the verification process in the following ways: (1) case analysis can be invoked to take advantage of disjointedness conditions in the logic, (2) early, as opposed to late, instantiation can minimise the use of existential quantification and (3) novel formulae structuring can provide better reuse of the verification process. Initial experiments have shown that structured specifications can lead to more precise verification without incurring any performance overhead. To support our proposal, we shall illustrate the usage of structured specifications in the context of proving termination and we will briefly outline the impact of our proposal on a recent development focussed on verifying the FreeRTOS scheduler Ferreira et al. (Int. J. Softw. Tools Technol. Trans. 2014).", "paper_title": "Expressive program verification via structured specifications", "paper_id": "WOS:000209673200003"}