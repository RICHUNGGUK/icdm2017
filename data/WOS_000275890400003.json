{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "currently_available_application_frameworks"}, {"score": 0.004620093797504386, "phrase": "automatic_design"}, {"score": 0.0045443671106012405, "phrase": "real-time_embedded_software"}, {"score": 0.004360412703519539, "phrase": "functional_and_non-functional_requirements"}, {"score": 0.0038838500580958744, "phrase": "internal_architecture_and_design_flow"}, {"score": 0.0037886833451021723, "phrase": "newly_proposed_framework"}, {"score": 0.003726533059542558, "phrase": "verifiable_embedded_real-time_application_framework"}, {"score": 0.0034879261743468574, "phrase": "namely_software_component-based_reuse"}, {"score": 0.0033190180867511605, "phrase": "formal_verification"}, {"score": 0.0032376465741070274, "phrase": "proposed_architecture"}, {"score": 0.0031845067058084583, "phrase": "vertaf"}, {"score": 0.0025678829712650437, "phrase": "reusable_hardware_and_software_design_components"}, {"score": 0.0024637379406427856, "phrase": "application_examples"}, {"score": 0.00240328454980006, "phrase": "vertaf_demonstrate_significantly_reduced_relative_design_effort"}, {"score": 0.0022122603123901114, "phrase": "software_components"}, {"score": 0.0021579641460002523, "phrase": "automatic_synthesis"}, {"score": 0.002122507495446441, "phrase": "verification_increases"}, {"score": 0.0021049977753042253, "phrase": "design_productivity"}], "paper_keywords": ["Application framework", " Code generation", " Real-time embedded software", " Formal synthesis", " Formal verification", " Scheduling", " Software components", " UML modeling"], "paper_abstract": "Currently available application frameworks that target at the automatic design of real-time embedded software are poor in integrating functional and non-functional requirements for mobile and ubiquitous systems. In this work, we present the internal architecture and design flow of a newly proposed framework called Verifiable Embedded Real-Time Application Framework (VERTAF), which integrates three techniques namely software component-based reuse, formal synthesis, and formal verification. The proposed architecture for VERTAF is component-based which allows plug-and-play for the scheduler and the verifier. The architecture is also easily extensible because reusable hardware and software design components can be added. Application examples developed using VERTAF demonstrate significantly reduced relative design effort, which shows how high-level reuse of software components combined with automatic synthesis and verification increases design productivity.", "paper_title": "Real-Time Embedded Software Design for Mobile and Ubiquitous Systems", "paper_id": "WOS:000275890400003"}