{"auto_keywords": [{"score": 0.03801816490579767, "phrase": "affine_partition_algorithm"}, {"score": 0.00493567318130272, "phrase": "generalized_gcd_test"}, {"score": 0.00481495049065317, "phrase": "improved_affine_partition_algorithm_for_compile-time_and"}, {"score": 0.004405919996432158, "phrase": "unimodular_transformations"}, {"score": 0.004346139434813299, "phrase": "loop_fusion"}, {"score": 0.0038170129089059013, "phrase": "automatic_discovery"}, {"score": 0.0037395458116642306, "phrase": "loop-level_parallelization"}, {"score": 0.0033982429092938764, "phrase": "runtime_efficiency"}, {"score": 0.003195414285736136, "phrase": "compile-time_speed"}, {"score": 0.002984173420996039, "phrase": "basic_dependence_testing_algorithm"}, {"score": 0.002805989498127897, "phrase": "strong_relationship"}, {"score": 0.0026747708876640377, "phrase": "compiling_speed"}, {"score": 0.0024138345020219333, "phrase": "optimal_solution"}, {"score": 0.002364777610365689, "phrase": "infinite_legal_solutions"}, {"score": 0.002254145085288829, "phrase": "minimum_communication_volume"}, {"score": 0.0022083264126633085, "phrase": "simplified_processor_space_expression"}], "paper_keywords": ["parallel compiler", " affine partition", " dependence testing"], "paper_abstract": "The Affine partitioning framework, which unifies many useful program transforms such as unimodular transformations, loop fusion, fission, scaling, reindexing, and statement reordering, has been proved to be successful in automatic discovery of the loop-level parallelization in programs. The affine partition algorithm was improved from the aspects of compile-time and runtime efficiency in this paper. Firstly, it improves compile-time speed of affine partition algorithm by using of generalized GCD test which is a basic dependence testing algorithm. This paper proved that generalized GCD test has a strong relationship with affine partition algorithm which can improve the compiling speed of the affine partition algorithm. Secondly, a method is put forward to select an optimal solution among the infinite legal solutions of the affine partition algorithm which ensures the minimum communication volume and the simplified processor space expression. Proved by experiments, the two innovations mentioned above can promote the compile-time and runtime efficiency of the affine partition algorithm.", "paper_title": "IMPROVED AFFINE PARTITION ALGORITHM FOR COMPILE-TIME AND RUNTIME PERFORMANCE", "paper_id": "WOS:000296754900014"}