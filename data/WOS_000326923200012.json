{"auto_keywords": [{"score": 0.004658426838467567, "phrase": "quad_meshing_methods"}, {"score": 0.004547782274166457, "phrase": "integer-grid_map"}, {"score": 0.004453116532937849, "phrase": "input_surface"}, {"score": 0.004373537527118041, "phrase": "canonical_grid"}, {"score": 0.004347327095048136, "phrase": "integer_iso-lines_forms"}, {"score": 0.004032597946578543, "phrase": "quad_extraction_step"}, {"score": 0.003948613642680196, "phrase": "actual_quad_mesh"}, {"score": 0.003913155833767365, "phrase": "mere_\"quad_texture"}, {"score": 0.003878027584672711, "phrase": "quad"}, {"score": 0.003751834457361072, "phrase": "trivial_matter"}, {"score": 0.003729335910488339, "phrase": "quite_the_opposite"}, {"score": 0.0036847412633483788, "phrase": "numerous_special_cases"}, {"score": 0.00362974436427641, "phrase": "numerical_inaccuracies"}, {"score": 0.003607975301026801, "phrase": "limited_solver"}, {"score": 0.003448801009772625, "phrase": "costly_countermeasures"}, {"score": 0.003397313647699294, "phrase": "significant_challenges"}, {"score": 0.0033667896755965464, "phrase": "quad_extractor"}, {"score": 0.003276848046269042, "phrase": "provided_parametrization"}, {"score": 0.0031797191359738356, "phrase": "limited_precision"}, {"score": 0.0031701655096648784, "phrase": "floating_point_representation"}, {"score": 0.003066945490483524, "phrase": "comprehensive_and_sound_description"}, {"score": 0.003021141590548526, "phrase": "quad_extraction"}, {"score": 0.0029492697575981422, "phrase": "complex_tolerance_thresholds"}, {"score": 0.002931569771634119, "phrase": "disambiguation_rules"}, {"score": 0.0028532214778379597, "phrase": "novel_strategy"}, {"score": 0.002819073586200239, "phrase": "common_local_fold-overs"}, {"score": 0.00267038214449389, "phrase": "otherwise_holes"}, {"score": 0.0026543514413663893, "phrase": "non-quad_polygons"}, {"score": 0.0025371413754846474, "phrase": "practical_use"}, {"score": 0.0025143263276317935, "phrase": "entire_class"}, {"score": 0.0024397439663334055, "phrase": "state_of_the_art_quad_meshing_methods"}, {"score": 0.002367368688024317, "phrase": "local_fold-overs"}, {"score": 0.0021049977753042253, "phrase": "quad_meshing"}], "paper_keywords": ["quad extraction", " quad meshing", " integer-grid maps"], "paper_abstract": "The most popular and actively researched class of quad remeshing techniques is the family of parametrization based quad meshing methods. They all strive to generate an integer-grid map, i.e. a parametrization of the input surface into R-2 such that the canonical grid of integer iso-lines forms a quad mesh when mapped back onto the surface in R-3. An essential, albeit broadly neglected aspect of these methods is the quad extraction step, i.e. the materialization of an actual quad mesh from the mere \"quad texture\". Quad (mesh) extraction is often believed to be a trivial matter but quite the opposite is true: numerous special cases, ambiguities induced by numerical inaccuracies and limited solver precision, as well as imperfections in the maps produced by most methods (unless costly countermeasures are taken) pose significant challenges to the quad extractor. We present a method to sanitize a provided parametrization such that it becomes numerically consistent even in a limited precision floating point representation. Based on this we are able to provide a comprehensive and sound description of how to perform quad extraction robustly and without the need for any complex tolerance thresholds or disambiguation rules. On top of that we develop a novel strategy to cope with common local fold-overs in the parametrization. This allows our method, dubbed QEx, to generate all-quadrilateral meshes where otherwise holes, non-quad polygons or no output at all would have been produced. We thus enable the practical use of an entire class of maps that was previously considered defective. Since state of the art quad meshing methods spend a significant share of their run time solely to prevent local fold-overs, using our method it is now possible to obtain quad meshes significantly quicker than before. We also provide libQEx, an open source C++ reference implementation of our method and thus significantly lower the bar to enter the field of quad meshing.", "paper_title": "QEx: Robust Quad Mesh Extraction", "paper_id": "WOS:000326923200012"}