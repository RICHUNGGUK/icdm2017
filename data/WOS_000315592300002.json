{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "abstract_representations"}, {"score": 0.00443308765153716, "phrase": "actual_execution_time"}, {"score": 0.004046020290832207, "phrase": "reflective_capability"}, {"score": 0.004010960493946656, "phrase": "significant_advances"}, {"score": 0.0037738708560271354, "phrase": "adaptive_systems"}, {"score": 0.0036288825833675127, "phrase": "similar_approach"}, {"score": 0.003504670673093149, "phrase": "dynamic_generation"}, {"score": 0.0034742854447532678, "phrase": "software_artefacts"}, {"score": 0.0034441627435203804, "phrase": "execution_time"}, {"score": 0.003399466007862412, "phrase": "important_area"}, {"score": 0.00326881479036966, "phrase": "software_mediators"}, {"score": 0.00321236577162671, "phrase": "crucial_problem"}, {"score": 0.0031568884810273226, "phrase": "distributed_systems"}, {"score": 0.0030487828775502563, "phrase": "emergent_middleware"}, {"score": 0.0029961221584602405, "phrase": "fundamentally_new_approach"}, {"score": 0.002957222630196853, "phrase": "interoperability_problems"}, {"score": 0.002918826667294298, "phrase": "complex_distributed_systems"}, {"score": 0.0028065957753430713, "phrase": "runtime_models"}, {"score": 0.0027104531025934865, "phrase": "underlying_networked_systems"}, {"score": 0.0026062133750675894, "phrase": "additional_knowledge"}, {"score": 0.002516917671182532, "phrase": "ontological_information"}, {"score": 0.0024842242921857705, "phrase": "semantic_reasoning"}, {"score": 0.0024095777415804346, "phrase": "novel_use"}, {"score": 0.0022277448907881306, "phrase": "supportive_algorithms"}, {"score": 0.0021049977753042253, "phrase": "appropriate_emergent_middleware"}], "paper_keywords": ["Runtime models", " Runtime interoperability", " Mediators", " Ontology"], "paper_abstract": "Models at runtime can be defined as abstract representations of a system, including its structure and behaviour, which exist in tandem with the given system during the actual execution time of that system. Furthermore, these models should be causally connected to the system being modelled, offering a reflective capability. Significant advances have been made in recent years in applying this concept, most notably in adaptive systems. In this paper we argue that a similar approach can also be used to support the dynamic generation of software artefacts at execution time. An important area where this is relevant is the generation of software mediators to tackle the crucial problem of interoperability in distributed systems. We refer to this approach as emergent middleware, representing a fundamentally new approach to resolving interoperability problems in the complex distributed systems of today. In this context, the runtime models are used to capture meta-information about the underlying networked systems that need to interoperate, including their interfaces and additional knowledge about their associated behaviour. This is supplemented by ontological information to enable semantic reasoning. This paper focuses on this novel use of models at runtime, examining in detail the nature of such runtime models coupled with consideration of the supportive algorithms and tools that extract this knowledge and use it to synthesise the appropriate emergent middleware.", "paper_title": "The role of models@run.time in supporting on-the-fly interoperability", "paper_id": "WOS:000315592300002"}