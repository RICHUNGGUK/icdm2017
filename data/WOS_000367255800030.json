{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "practical_general_purpose_immutable_sequence"}, {"score": 0.00477190623242136, "phrase": "state-of-the-art_immutable_collections"}, {"score": 0.004481132747216135, "phrase": "different_collection_implementations"}, {"score": 0.004114527599108729, "phrase": "code_evolution"}, {"score": 0.0038290829316346654, "phrase": "broad_range"}, {"score": 0.0035156341294017685, "phrase": "good_performance"}, {"score": 0.0034685354330506605, "phrase": "large_number"}, {"score": 0.003437486158494063, "phrase": "sequential_and_parallel_operations"}, {"score": 0.0033914308417007316, "phrase": "underlying_innovations"}, {"score": 0.003113696267229798, "phrase": "spatio-temporal_locality"}, {"score": 0.003071965703296204, "phrase": "rrb_data_structure"}, {"score": 0.0028586409810976367, "phrase": "rrb-vector_speedup"}, {"score": 0.0026126405272417783, "phrase": "discrete_operations"}, {"score": 0.0022520496048464406, "phrase": "memory_footprint"}, {"score": 0.0022318655527987846, "phrase": "rrb-vector"}, {"score": 0.0021049977753042253, "phrase": "competing_collections"}], "paper_keywords": ["Data Structures", " Immutable", " Sequences", " Arrays", " Trees", " Vectors", " Radix-Balanced", " Relaxed-Radix-Balanced"], "paper_abstract": "State-of-the-art immutable collections have wildly differing performance characteristics across their operations, often forcing programmers to choose different collection implementations for each task. Thus, changes to the program can invalidate the choice of collections, making code evolution costly. It would be desirable to have a collection that performs well for a broad range of operations. To this end, we present the RRB-Vector, an immutable sequence collection that offers good performance across a large number of sequential and parallel operations. The underlying innovations are: (1) the Relaxed-Radix-Balanced (RRB) tree structure, which allows efficient structural reorganization, and (2) an optimization that exploits spatio-temporal locality on the RRB data structure in order to offset the cost of traversing the tree. In our benchmarks, the RRB-Vector speedup for parallel operations is lower bounded by 7 x when executing on 4 CPUs of 8 cores each. The performance for discrete operations, such as appending on either end, or updating and removing elements, is consistently good and compares favorably to the most important immutable sequence collections in the literature and in use today. The memory footprint of RRB-Vector is on par with arrays and an order of magnitude less than competing collections.", "paper_title": "RRB Vector: A Practical General Purpose Immutable Sequence", "paper_id": "WOS:000367255800030"}