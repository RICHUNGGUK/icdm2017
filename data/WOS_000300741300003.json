{"auto_keywords": [{"score": 0.03843856552198327, "phrase": "api_objects"}, {"score": 0.00481495049065317, "phrase": "software_artefact"}, {"score": 0.0047172117216828, "phrase": "specialized_application_programming_interface"}, {"score": 0.004689692961878988, "phrase": "api"}, {"score": 0.004567596860086148, "phrase": "client_applications"}, {"score": 0.004474856549909555, "phrase": "software_system"}, {"score": 0.004320213877598964, "phrase": "development_process"}, {"score": 0.004282391936827106, "phrase": "model-driven_engineering"}, {"score": 0.004170892976671761, "phrase": "key_elements"}, {"score": 0.004134372859330047, "phrase": "software_engineering_activity"}, {"score": 0.004098171194242233, "phrase": "api_management"}, {"score": 0.004026712228523795, "phrase": "model_level"}, {"score": 0.0038875036223018386, "phrase": "mde"}, {"score": 0.0037311260623089436, "phrase": "api-mde_bridges"}, {"score": 0.0034268702387746106, "phrase": "declarative_rule-based_language"}, {"score": 0.0033868916699805224, "phrase": "mapping_definitions"}, {"score": 0.0033572130837348623, "phrase": "api_specifications"}, {"score": 0.00319386484766352, "phrase": "model_elements"}, {"score": 0.003175175896313016, "phrase": "vice_versa"}, {"score": 0.0030295361111006866, "phrase": "api_specification"}, {"score": 0.002749851878361472, "phrase": "bootstrap_process"}, {"score": 0.0025778550637768492, "phrase": "mde."}, {"score": 0.0025627610547510867, "phrase": "current_implementation"}, {"score": 0.002540285736232122, "phrase": "java_apis"}, {"score": 0.00236047917580105, "phrase": "swt"}, {"score": 0.0023466530426848064, "phrase": "jtwitter_apis"}, {"score": 0.0021550502873107654, "phrase": "api_models"}, {"score": 0.002142426911242168, "phrase": "mde-based_solutions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Application Programming Interface", " Model-Driven Engineering", " Domain-Specific Languages"], "paper_abstract": "Context: A software artefact typically makes its functionality available through a specialized Application Programming Interface (API) describing the set of services offered to client applications. In fact, building any software system usually involves managing a plethora of APIs, which complicates the development process. In Model-Driven Engineering (MDE). where models are the key elements of any software engineering activity, this API management should take place at the model level. Therefore, tools that facilitate the integration of APIs and MDE are clearly needed. Objective: Our goal is to automate the implementation of API-MDE bridges for supporting both the creation of models from API objects and the generation of such API objects from models. In this sense, this paper presents the API2MoL approach, which provides a declarative rule-based language to easily write mapping definitions to link API specifications and the metamodel that represents them. These definitions are then executed to convert API objects into model elements or vice versa. The approach also allows both the metamodel and the mapping to be automatically obtained from the API specification (bootstrap process). Method: After implementing the API2MoL engine, its correctness was validated using several APIs. Since APIs are normally large, we then developed a tool to implement the bootstrap process, which was also validated. Results: We provide a toolkit (language and bootstrap tool) for the creation of bridges between APIs and MDE. The current implementation focuses on Java APIs, although its adaptation to other statically typed object-oriented languages is straightforward. The correctness, expressiveness and completeness of the approach have been validated with the Swing, SWT and JTwitter APIs. Conclusion: API2MoL frees developers from having to manually implement the tasks of obtaining models from API objects and generating such objects from models. This helps to manage API models in MDE-based solutions. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "API2MoL: Automating the building of bridges between APIs and Model-Driven Engineering", "paper_id": "WOS:000300741300003"}