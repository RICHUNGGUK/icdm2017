{"auto_keywords": [{"score": 0.042347347931893084, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "gpu_architectures"}, {"score": 0.004542158659382197, "phrase": "dynamic_data_sharing"}, {"score": 0.004326624385772596, "phrase": "gpu_acceleration"}, {"score": 0.004121275290411653, "phrase": "novel_software_transactional_memory_system"}, {"score": 0.0037030390595465673, "phrase": "major_challenges"}, {"score": 0.0035965032173588753, "phrase": "good_scalability"}, {"score": 0.00342568771304873, "phrase": "massively_multithreading"}, {"score": 0.0031079352545607267, "phrase": "simt_execution_paradigm"}, {"score": 0.002711842889248926, "phrase": "hierarchical_validation_technique"}, {"score": 0.0021464286727045623, "phrase": "gpu-stm"}, {"score": 0.0021049977753042253, "phrase": "coarse-grain_locks"}], "paper_keywords": ["Multicore Processors", " Parallel Programming", " Run-time Environments", " SIMD Processors"], "paper_abstract": "To make applications with dynamic data sharing among threads benefit from GPU acceleration, we propose a novel software transactional memory system for GPU architectures (GPU-STM). The major challenges include ensuring good scalability with respect to the massively multithreading of GPUs, and preventing livelocks caused by the SIMT execution paradigm of GPUs. To this end, we propose (1) a hierarchical validation technique and (2) an encounter-time lock-sorting mechanism to deal with the two challenges, respectively. Evaluation shows that GPU-STM outperforms coarse-grain locks on GPUs by up to 20x.", "paper_title": "Software Transactional Memory for GPU Architectures", "paper_id": "WOS:000344987900013"}