{"auto_keywords": [{"score": 0.03670844314537668, "phrase": "shading_jobs"}, {"score": 0.00481495049065317, "phrase": "gpu._complex"}, {"score": 0.0047555023078686386, "phrase": "often_associates"}, {"score": 0.00469678464293492, "phrase": "long_shaders"}, {"score": 0.004638788604042707, "phrase": "huge_data_access"}, {"score": 0.0045249263666466005, "phrase": "good_performance"}, {"score": 0.004469042910390712, "phrase": "current_generation_gpu_hardware"}, {"score": 0.003946650265907885, "phrase": "gpu_memory"}, {"score": 0.003640183972131238, "phrase": "rendering_process"}, {"score": 0.0035951877427580006, "phrase": "complex_shaders"}, {"score": 0.003378385493203297, "phrase": "potential_memory_access"}, {"score": 0.003135356056324338, "phrase": "memory_hierarchies"}, {"score": 0.0027341763737751467, "phrase": "cache_utilization"}, {"score": 0.002700348931172875, "phrase": "gpu_hardware_utilization"}, {"score": 0.002633941112839883, "phrase": "poor_performance"}, {"score": 0.002585206414738808, "phrase": "large_branching"}, {"score": 0.0025373711401047772, "phrase": "sorting_work"}, {"score": 0.002444333100610621, "phrase": "plentiful_logic_function"}, {"score": 0.0022542611024997474, "phrase": "expensive_compaction_operation"}, {"score": 0.002226377015620296, "phrase": "gpu."}, {"score": 0.0021049977753042253, "phrase": "simd_packet"}], "paper_keywords": ["Shading", " GPU", " Ray tracing"], "paper_abstract": "Complex shading often associates with long shaders and huge data access. To obtain good performance on current generation GPU hardware, it is necessary to design some algorithms to manage data, schedule more efficient threads, and memory access under the hierarchy of GPU memory. In this paper, we propose an approach to accelerate the rendering process for complex shaders by analyzing and sorting shading jobs according to their complexity and potential memory access. We show that by sorting these shading jobs in three levels of memory hierarchies and reorganizing threads block according to the complexity, all shading jobs are scheduled in order, and we can significantly improve cache utilization and GPU hardware utilization, especially for poor performance caused by large branching. All sorting work are processed on CPU with plentiful logic function, and can be processed in a very efficient manner, compared with the expensive compaction operation on GPU. Our experiments with this hierarchy demonstrate improvements against a SIMD packet tracing with compaction on GPU.", "paper_title": "Complex shading efficiently for ray tracing on GPU", "paper_id": "WOS:000349356400020"}