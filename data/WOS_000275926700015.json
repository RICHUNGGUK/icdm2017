{"auto_keywords": [{"score": 0.035687560751607256, "phrase": "concurrency_bug"}, {"score": 0.00481495049065317, "phrase": "probabilistic_guarantees_of_finding_bugs"}, {"score": 0.004623224002010226, "phrase": "randomized_scheduler"}, {"score": 0.0045302298105691615, "phrase": "concurrency_bugs"}, {"score": 0.004439097815805505, "phrase": "current_stress-testing_methods"}, {"score": 0.004204904449336037, "phrase": "supplied_inputs"}, {"score": 0.003929391999210588, "phrase": "buggy_schedules"}, {"score": 0.0036968421974412522, "phrase": "missing_concurrency_bugs"}, {"score": 0.0033167679667625667, "phrase": "minimum_number"}, {"score": 0.003272083495778595, "phrase": "scheduling_constraints"}, {"score": 0.0030992666061123533, "phrase": "single_run"}, {"score": 0.0029959082125682918, "phrase": "n_threads"}, {"score": 0.002955533639862811, "phrase": "k_steps"}, {"score": 0.002494361792853833, "phrase": "well-known_types"}, {"score": 0.0023948164534491273, "phrase": "atomicity_violations"}, {"score": 0.0022992346264367374, "phrase": "small_bug-depths"}, {"score": 0.0021337783230121286, "phrase": "previously_unknown_and_known_concurrency_bugs"}], "paper_keywords": ["Algorithms", " Reliability", " Verification", " Concurrency", " Race Conditions", " Randomized Algorithms", " Testing"], "paper_abstract": "This paper presents a randomized scheduler for finding concurrency bugs. Like current stress-testing methods, it repeatedly runs a given test program with supplied inputs. However, it improves on stress-testing by finding buggy schedules more effectively and by quantifying the probability of missing concurrency bugs. Key to its design is the characterization of the depth of a concurrency bug as the minimum number of scheduling constraints required to find it. In a single run of a program with n threads and k steps, our scheduler detects a concurrency bug of depth d with probability at least 1/nk(d-1). We hypothesize that in practice, many concurrency bugs (including well-known types such as ordering errors, atomicity violations, and deadlocks) have small bug-depths, and we confirm the efficiency of our schedule randomization by detecting previously unknown and known concurrency bugs in several production-scale concurrent programs.", "paper_title": "A Randomized Scheduler with Probabilistic Guarantees of Finding Bugs", "paper_id": "WOS:000275926700015"}