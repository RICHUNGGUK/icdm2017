{"auto_keywords": [{"score": 0.015403239901379652, "phrase": "self-avoiding_walks"}, {"score": 0.009924550215962965, "phrase": "distributed_program"}, {"score": 0.009869339179764416, "phrase": "test_data"}, {"score": 0.0048149508482222, "phrase": "sawdoubler"}, {"score": 0.004752362132726821, "phrase": "total_number"}, {"score": 0.004664352260912174, "phrase": "regular_lattice"}, {"score": 0.0046382670208947605, "phrase": "length-doubling_method"}, {"score": 0.0045951139027274055, "phrase": "basic_concept"}, {"score": 0.004352592156102578, "phrase": "tree_data_structure"}, {"score": 0.004279950346170224, "phrase": "correction_terms"}, {"score": 0.004208515754292201, "phrase": "double_length"}, {"score": 0.00412281725068799, "phrase": "efficient_numbering"}, {"score": 0.0040997480534580065, "phrase": "lattice_sites"}, {"score": 0.004023775199194536, "phrase": "smaller_tree_data_structure"}, {"score": 0.003971430093451658, "phrase": "euclidean_distance"}, {"score": 0.0037970571662022798, "phrase": "main_loop"}, {"score": 0.0037336520904376687, "phrase": "multicore_architecture"}, {"score": 0.003719705944877787, "phrase": "experimental_results"}, {"score": 0.0036303124972717456, "phrase": "dual-core_pc"}, {"score": 0.003549696662886667, "phrase": "single-core_computation"}, {"score": 0.0034321055217729755, "phrase": "memory_use"}, {"score": 0.003318396860938148, "phrase": "sawdoubler_software"}, {"score": 0.003256855955136227, "phrase": "gnu_lgpl_license"}, {"score": 0.0032334663226501587, "phrase": "program"}, {"score": 0.003214455466823939, "phrase": "sawdoubler_catalogue"}, {"score": 0.0031430451507177388, "phrase": "cpc_program_library"}, {"score": 0.0031312981393997355, "phrase": "queen's_university"}, {"score": 0.0031195951267565174, "phrase": "belfast"}, {"score": 0.003107935254560724, "phrase": "n._ireland"}, {"score": 0.002883655046524374, "phrase": "tar.gz_programming_language"}, {"score": 0.0028728747019026485, "phrase": "c._computer"}, {"score": 0.002840774188169279, "phrase": "unix-like_operating_system"}, {"score": 0.0028037753646260937, "phrase": "large_problems"}, {"score": 0.00276725708403607, "phrase": "integer_arithmetic"}, {"score": 0.0027466028572379455, "phrase": "gcc_compiler"}, {"score": 0.0026805628083015186, "phrase": "linux"}, {"score": 0.0026706092192498735, "phrase": "mac"}, {"score": 0.00259165934428725, "phrase": "parallel_version"}, {"score": 0.0025531094361137562, "phrase": "\"extras\"_directory"}, {"score": 0.0025388011374541546, "phrase": "distribution_file"}, {"score": 0.0022731101514958845, "phrase": "additional_comments"}, {"score": 0.0022226067416335374, "phrase": "bcc"}, {"score": 0.002214313289794465, "phrase": "fcc"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-avoiding walk", " Enumeration", " Simple cubic lattice"], "paper_abstract": "This article presents SAWdoubler, a package for counting the total number Z(N) of self-avoiding walks (SAWs) on a regular lattice by the length-doubling method, of which the basic concept has been published previously by us. We discuss an algorithm for the creation of all SAWs of length N, efficient storage of these SAWs in a tree data structure, and an algorithm for the computation of correction terms to the count Z(2N) for SAWs of double length, removing all combinations of two intersecting single-length SAWs. We present an efficient numbering of the lattice sites that enables exploitation of symmetry and leads to a smaller tree data structure; this numbering is by increasing Euclidean distance from the origin of the lattice. Furthermore, we show how the computation can be parallelised by distributing the iterations of the main loop of the algorithm over the cores of a multicore architecture. Experimental results on the 3D cubic lattice demonstrate that Z(28) can be computed on a dual-core PC in only 1 h and 40 min, with a speedup of 1.56 compared to the single-core computation and with a gain by using symmetry of a factor of 26. We present results for memory use and show how the computation is made to fit in 4 GB RAM. It is easy to extend the SAWdoubler software to other lattices; it is publicly available under the GNU LGPL license. Program summary Program title: SAWdoubler Catalogue identifier: AEOB_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEOB_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU Lesser General Public Licence No. of lines in distributed program, including test data, etc.: 2101 No. of bytes in distributed program, including test data, etc.: 19816 Distribution format: tar.gz Programming language: C. Computer: Any computer with a UNIX-like operating system and a C compiler. For large problems, use is made of specific 128-bit integer arithmetic provided by the gcc compiler. Operating system: Any UNIX-like system; developed under Linux and Mac OS 10. Has the code been vectorised or parallelised?: Yes. A parallel version of the code is available in the \"Extras\" directory of the distribution file. RAM: Problem dependent (2 GB for counting SAWs of length 28 on the 3D cubic lattice) Classification: 16.11. Nature of problem: Computing the number of self-avoiding walks of a given length on a given lattice. Solution method: Length-doubling. Restrictions: The length of the walk must be even. Lattice is 3D simple cubic. Additional comments: The lattice can be replaced by other lattices, such as BCC, FCC, or a 2D square lattice. Running time: Problem dependent (2.5 h using one processor core for length 28 on the 3D cubic lattice). (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "SAWdoubler: A program for counting self-avoiding walks", "paper_id": "WOS:000315125500045"}