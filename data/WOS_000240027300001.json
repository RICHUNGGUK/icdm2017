{"auto_keywords": [{"score": 0.04196910718707931, "phrase": "time_integration"}, {"score": 0.01461392537253562, "phrase": "air_quality_models"}, {"score": 0.009164467478558362, "phrase": "diffusion_terms"}, {"score": 0.00481495049065317, "phrase": "reaction-diffusion_equations"}, {"score": 0.004683678340162048, "phrase": "fast_parallel_solver"}, {"score": 0.004598148732260261, "phrase": "reaction-convection-diffusion_equations"}, {"score": 0.004500327297560586, "phrase": "large-scale_computing"}, {"score": 0.0044181310380945705, "phrase": "main_solver"}, {"score": 0.004377595128584772, "phrase": "reaction-diffusion-convection_equations"}, {"score": 0.004284445575512898, "phrase": "numerical_simulation"}, {"score": 0.004258195773502909, "phrase": "population_models"}, {"score": 0.004193269776221305, "phrase": "reaction-diffusion_systems"}, {"score": 0.004104026260244116, "phrase": "pointwise_newton_iteration"}, {"score": 0.004066360459825868, "phrase": "space-dependent_terms"}, {"score": 0.003967593052753246, "phrase": "newton-jacobi_iteration"}, {"score": 0.0038121670939902574, "phrase": "scalable_parallelism"}, {"score": 0.00369674903275185, "phrase": "alternative_method"}, {"score": 0.003651562636212586, "phrase": "operator_splitting"}, {"score": 0.003350299880802315, "phrase": "reaction_term"}, {"score": 0.003278937848591921, "phrase": "good_scalability"}, {"score": 0.0032488198151299826, "phrase": "second_alternative"}, {"score": 0.003209090947105003, "phrase": "matrix-free_newton-krylov_methods"}, {"score": 0.003111874723370265, "phrase": "good_parallel_preconditioner"}, {"score": 0.0029261625894377286, "phrase": "new_family"}, {"score": 0.0028200832328369816, "phrase": "explicit_treatment"}, {"score": 0.0026192919458528597, "phrase": "simple_fft."}, {"score": 0.0025634604745178283, "phrase": "numerical_scheme"}, {"score": 0.002493417909212525, "phrase": "implicit_treatment"}, {"score": 0.002432762217202045, "phrase": "classical_schemes"}, {"score": 0.0023956021950024124, "phrase": "general_reaction-diffusion_problems"}, {"score": 0.0023517568875393345, "phrase": "regular_space_step"}, {"score": 0.0023301353812204607, "phrase": "filtering_process"}, {"score": 0.002287485527155396, "phrase": "black_box"}, {"score": 0.002224966726830651, "phrase": "critical_components"}, {"score": 0.0021909737736168122, "phrase": "high_potential"}, {"score": 0.0021508655858525683, "phrase": "medium-scale_parallel_computers"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["ODE", " filtering", " reaction-diffusion", " air quality"], "paper_abstract": "In this paper, we present a fast parallel solver designed for a system of reaction-convection-diffusion equations. A typical application is the large-scale computing of air quality models for which the main solver corresponds to reaction-diffusion-convection equations. Another potential application is the numerical simulation of population models where several colonies compete. Reaction-diffusion systems can be integrated in time by pointwise Newton iteration when all space-dependent terms are explicit in the time integration. A Newton-Jacobi iteration makes this scheme implicit. Such methods are easy to code and have scalable parallelism. However, they are numerically inefficient. An alternative method is to use operator splitting, decoupling the time integration of the reaction from the time integration of convection-diffusion. However, such methods may not be time accurate thanks to the stiffness of the reaction term and are complex to parallelize with good scalability. A second alternative is to use matrix-free Newton-Krylov methods. These techniques are particularly efficient provided that a good parallel preconditioner is customized to the application. The method is then not trivial to implement. We propose here a-new family of fast, easy to code and numerically efficient reaction-diffusion solvers based on a filtering technique that stabilizes the explicit treatment of the diffusion terms. The scheme is completely explicit with respect to space, and the postprocessing to stabilize time stepping uses a simple FFT. We demonstrate the potential of this numerical scheme with two examples in air quality models that usually require the implicit treatment of diffusion terms and have compared our solution to classical schemes for two nonlinear reaction-diffusion problems. For general reaction-diffusion problems on tensorial product grids with regular space step, the filtering process can be applied as a black box postprocessing procedure. Further, we demonstrate on critical components of the algorithm the high potential of parallelism of our method on medium-scale parallel computers. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "A filtering technique for system of reaction-diffusion equations", "paper_id": "WOS:000240027300001"}