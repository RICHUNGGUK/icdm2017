{"auto_keywords": [{"score": 0.0046650615456476155, "phrase": "high_processing_overhead"}, {"score": 0.004628320711601916, "phrase": "physics_simulation"}, {"score": 0.004573748810476845, "phrase": "real-time_results"}, {"score": 0.00425951071471662, "phrase": "physical_equilibrium"}, {"score": 0.004225950334493496, "phrase": "modern_physics_simulation_software"}, {"score": 0.003904495523681369, "phrase": "potential_activation"}, {"score": 0.003753022329975749, "phrase": "running_time"}, {"score": 0.003636070324571016, "phrase": "physics_software_design"}, {"score": 0.0034674164050273568, "phrase": "remaining_running_time"}, {"score": 0.0032546105164772995, "phrase": "specific_broad_phase_collision_detection"}, {"score": 0.003153140905312787, "phrase": "storage_methods"}, {"score": 0.0030068193773923387, "phrase": "physics_pipeline"}, {"score": 0.002855934865505357, "phrase": "integration_techniques"}, {"score": 0.0026911959223982727, "phrase": "running_time_independent"}, {"score": 0.0025359354516609795, "phrase": "published_methods"}, {"score": 0.0025159206854716274, "phrase": "available_physics_software"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["physics", " broad phase", " multicore", " virtual reality"], "paper_abstract": "Large virtual environments with many interactive objects pose high processing overhead for physics simulation and require real-time results. Most of these objects are not being interacted with at the same time, leaving many in physical equilibrium. Modern physics simulation software eliminates some work for the case of objects at rest, but these objects still pose overhead because of potential activation during processing, which can constitute the majority of running time for some environments. We present a physics software design that eliminates overhead associated with bodies at rest, reducing the remaining running time to be proportional to the number of objects being interacted with. Our design consists of specific broad phase collision detection, contact group generation, and object storage methods, as well as intermediate structures and interfacing methods within the physics pipeline. It can be combined with various narrow phase collision detection, constraint solving, and integration techniques, as well as methods of parallelism. We show that our system produces a running time independent of the number of objects at rest, and that our methods compare favorably with published methods and available physics software when simulating environments with many objects at rest. CR Categories: I.3.6 [Computer graphics]: Methodology and techniquesGraphics data structures and data types; I.3.7 [Computer graphics]: Three-dimensional graphics and realismvirtual reality. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Accelerating physics in large, continuous virtual environments", "paper_id": "WOS:000299201000003"}