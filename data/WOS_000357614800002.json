{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "malware_analysis_of_android"}, {"score": 0.004782455247247007, "phrase": "user-supplied_predicates"}, {"score": 0.004750178261675602, "phrase": "today's_mobile_platforms"}, {"score": 0.004607594060491493, "phrase": "third-party_applications"}, {"score": 0.004576491793324233, "phrase": "sensitive_private_data"}, {"score": 0.004364550313102054, "phrase": "legitimately-granted_permissions"}, {"score": 0.004106353084467526, "phrase": "text-messaging_application"}, {"score": 0.003850299959557491, "phrase": "fine-grained_application_use"}, {"score": 0.0034898187091432806, "phrase": "automated_analyses"}, {"score": 0.0031737251921267725, "phrase": "human_judgment"}, {"score": 0.0030783143919343972, "phrase": "semantic-based_program_analysis"}, {"score": 0.002975652654536407, "phrase": "alternative_approach"}, {"score": 0.002955533639862811, "phrase": "malware_detection"}, {"score": 0.002886179212100513, "phrase": "analyst-crafted_semantic_predicates"}, {"score": 0.0028376361457661415, "phrase": "analysis_results"}, {"score": 0.0028184476518849015, "phrase": "human-oriented_semantic-based_program_analysis"}, {"score": 0.0027152006721460347, "phrase": "mobile_applications"}, {"score": 0.0025892330566358503, "phrase": "semantic_predicates"}, {"score": 0.0025370474510475628, "phrase": "trade_speed"}, {"score": 0.0024029583021102255, "phrase": "suspicious_state"}, {"score": 0.002162951519368368, "phrase": "permission_and_profiling_reports"}, {"score": 0.0021049977753042253, "phrase": "common_malicious_behaviors"}], "paper_keywords": ["static analysis", " human analysis", " malware detection"], "paper_abstract": "Today's mobile platforms provide only coarse-grained permissions to users with regard to how third-party applications use sensitive private data. Unfortunately, it is easy to disguise malware within the boundaries of legitimately-granted permissions. For instance, granting access to \"contacts\" and \"internet\" may be necessary for a text-messaging application to function, even though the user does not want contacts transmitted over the internet. To understand fine-grained application use of permissions, we need to statically analyze their behavior. Even then, malware detection faces three hurdles: (1) analyses may be prohibitively expensive, (2) automated analyses can only find behaviors that they are designed to find, and (3) the maliciousness of any given behavior is application-dependent and subject to human judgment. To remedy these issues, we propose semantic-based program analysis, with a human in the loop as an alternative approach to malware detection. In particular, our analysis allows analyst-crafted semantic predicates to search and filter analysis results. Human-oriented semantic-based program analysis can systematically, quickly and concisely characterize the behaviors of mobile applications. We describe a tool that provides analysts with a library of the semantic predicates and the ability to dynamically trade speed and precision. It also provides analysts the ability to statically inspect details of every suspicious state of (abstract) execution in order to make a ruling as to whether or not the behavior is truly malicious with respect to the intent of the application. In addition, permission and profiling reports are generated to aid analysts in identifying common malicious behaviors.", "paper_title": "AnaDroid: Malware Analysis of Android with User-supplied Predicates", "paper_id": "WOS:000357614800002"}