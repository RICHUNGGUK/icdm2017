{"auto_keywords": [{"score": 0.033422023259301756, "phrase": "reqos"}, {"score": 0.03256767243931295, "phrase": "low-priority_applications"}, {"score": 0.00481495049065317, "phrase": "warehouse_scale_computer"}, {"score": 0.00476707052021167, "phrase": "multicore_processors"}, {"score": 0.004735414083933722, "phrase": "expanding_core_counts"}, {"score": 0.004657185361669812, "phrase": "server_market"}, {"score": 0.004610866942420572, "phrase": "overall_utilization"}, {"score": 0.00448958076531243, "phrase": "warehouse_scale_computers"}, {"score": 0.004356926418550194, "phrase": "multiple_workloads"}, {"score": 0.0042281749832498, "phrase": "computational_power"}, {"score": 0.004186105377259855, "phrase": "modern_processors"}, {"score": 0.004048861559569661, "phrase": "wscs"}, {"score": 0.0037750632698768704, "phrase": "multiple_applications"}, {"score": 0.003687960013746783, "phrase": "multicore_machine"}, {"score": 0.0036390887584943723, "phrase": "shared_memory_resources"}, {"score": 0.003614895644619489, "phrase": "application_qos"}, {"score": 0.0035908627899097407, "phrase": "severe_cross-core_performance_interference"}, {"score": 0.003543274176146227, "phrase": "wsc"}, {"score": 0.003404244237372396, "phrase": "wsc_utilization"}, {"score": 0.0033256684464109242, "phrase": "high-priority_user-facing_applications"}, {"score": 0.0032489004068215407, "phrase": "low_machine_utilization"}, {"score": 0.0029789104204803137, "phrase": "high-priority_co-runners"}, {"score": 0.0028145947051539354, "phrase": "contentious_code_regions"}, {"score": 0.0026950674053179404, "phrase": "high-priority_applications"}, {"score": 0.0026504553106526016, "phrase": "pressure_low-priority_applications"}, {"score": 0.0026152965305133373, "phrase": "memory_subsystem"}, {"score": 0.0025978919678702793, "phrase": "cross-core_interference"}, {"score": 0.002438203996977464, "phrase": "performance_interference"}, {"score": 0.002413901117219286, "phrase": "application_qos._applying_reqos"}, {"score": 0.002381872778203302, "phrase": "smashbench"}, {"score": 0.00235813005446246, "phrase": "real_multicore_machines"}, {"score": 0.0023036445575469046, "phrase": "machine_utilization"}, {"score": 0.0021191072118924067, "phrase": "energy_efficiency"}, {"score": 0.0021049977753042253, "phrase": "modern_multicore_machines"}], "paper_keywords": ["Performance", " Algorithms", " Measurement", " datacenter", " warehouse scale computers", " quality of service", " contention", " cross-core interference", " compiler", " dynamic techniques", " online adaptation", " runtime systems", " multicore"], "paper_abstract": "As multicore processors with expanding core counts continue to dominate the server market, the overall utilization of the class of datacenters known as warehouse scale computers (WSCs) depends heavily on colocation of multiple workloads on each server to take advantage of the computational power provided by modern processors. However, many of the applications running in WSCs, such as websearch, are user-facing and have quality of service (QoS) requirements. When multiple applications are co-located on a multicore machine, contention for shared memory resources threatens application QoS as severe cross-core performance interference may occur. WSC operators are left with two options: either disregard QoS to maximize WSC utilization, or disallow the co-location of high-priority user-facing applications with other applications, resulting in low machine utilization and millions of dollars wasted. This paper presents ReQoS, a static/dynamic compilation approach that enables low-priority applications to adaptively manipulate their own contentiousness to ensure the QoS of high-priority co-runners. ReQoS is composed of a profile guided compilation technique that identifies and inserts markers in contentious code regions in low-priority applications, and a lightweight runtime that monitors the QoS of high-priority applications and reactively reduces the pressure low-priority applications generate to the memory subsystem when cross-core interference is detected. In this work, we show that ReQoS can accurately diagnose contention and significantly reduce performance interference to ensure application QoS. Applying ReQoS to SPEC2006 and SmashBench workloads on real multicore machines, we are able to improve machine utilization by more than 70% in many cases, and more than 50% on average, while enforcing a 90% QoS threshold. We are also able to improve the energy efficiency of modern multicore machines by 47% on average over a policy of disallowing co-locations.", "paper_title": "ReQoS: Reactive Static/Dynamic Compilation for QoS in Warehouse Scale Computer", "paper_id": "WOS:000321213100008"}