{"auto_keywords": [{"score": 0.029356679592053916, "phrase": "software_patents"}, {"score": 0.013551371337249417, "phrase": "intellectual_property_rights"}, {"score": 0.013241694435354012, "phrase": "patenting_system"}, {"score": 0.01306788175623339, "phrase": "software_life_cycle"}, {"score": 0.00481495049065317, "phrase": "\"trivial\"_software_patents"}, {"score": 0.004719664411221952, "phrase": "so-called_\"trivial\"_software_patents"}, {"score": 0.004459758783346486, "phrase": "case-based_approach"}, {"score": 0.004400705158735729, "phrase": "better_understanding"}, {"score": 0.0041721750101390825, "phrase": "software_development"}, {"score": 0.004089556946377719, "phrase": "life_cycle"}, {"score": 0.003955465362027017, "phrase": "defensive_patent-aware_software_life_cycle"}, {"score": 0.003651245743840663, "phrase": "new_patents"}, {"score": 0.003602869162400599, "phrase": "ipr"}, {"score": 0.0032925489316383955, "phrase": "software_patent"}, {"score": 0.0032597581672236453, "phrase": "inequality_operator"}, {"score": 0.0032272929113113203, "phrase": "granted_european_patent"}, {"score": 0.0032058286587989234, "phrase": "memory_managernent"}, {"score": 0.00312138530097218, "phrase": "trivial_patents"}, {"score": 0.0029198522863606953, "phrase": "extensive_discussion"}, {"score": 0.0027865506182608263, "phrase": "patent_claims"}, {"score": 0.0027495914857929584, "phrase": "computer_implemented_inventions"}, {"score": 0.002704079288159013, "phrase": "prior_art"}, {"score": 0.0026504553106526016, "phrase": "open_source_software"}, {"score": 0.0025892330566358503, "phrase": "government-funded_research"}, {"score": 0.0024958641143547856, "phrase": "\"integrity_axiom"}, {"score": 0.002470987929071079, "phrase": "software_patent_authors"}, {"score": 0.002405853977978678, "phrase": "software_patent_research"}, {"score": 0.0022579435307530944, "phrase": "complete_reinterpretation"}, {"score": 0.002213147136067999, "phrase": "software_engineering_perspective"}, {"score": 0.0021191072118924067, "phrase": "explicit_conclusions"}, {"score": 0.0021049977753042253, "phrase": "policy_recommendations"}], "paper_keywords": ["software patents", " trivial patents", " intellectual property rights", " software engineering", " patent life cycle", " software engineering life cycle", " open source software", " prior am patent claims", " patent policy"], "paper_abstract": "So-called \"trivial\" software patents undermine the patenting system and are detrimental for innovation. In this paper we use a case-based approach to get a better understanding of this phenomenon. First, we establish a baseline for studying the relation between software development and intellectual property rights by formulating a life cycle for the patenting system as well as three variations of the software life cycle: the defensive patent-aware software life cycle that prevents patent infringements, the more offensive patent-based software life cycle that aims both at preventing infringements and at creating new patents, and the IPR-based software life cycle that considers all forms of protection of intellectual property rights including copyright and secrecy. Next, we study an application for a software patent concerning the inequality operator and a granted European patent on memory managernent. We also briefly mention other examples of trivial patents. These examples serve to clarify the issues that arise when integrating patents in the software life cycle. In an extensive discussion, we cover the difference between expression and idea, the role of patent claims, software patents versus computer implemented inventions, the role of prior art, implications of software patents for open source software, for education, and for government-funded research. We conclude the discussion with the formulation of an \"integrity axiom\" for software patent authors and owners and sketch an agenda for software patent research. We conclude that patents are too important to be left to lawyers and economists and that a complete reinterpretation of the patenting system from a software engineering perspective is necessary to understand all ramifications of software patents. We end with explicit conclusions and policy recommendations. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "About \"trivial\" software patents: the IsNot case", "paper_id": "WOS:000243246500002"}