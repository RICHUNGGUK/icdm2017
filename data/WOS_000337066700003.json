{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "resource_management"}, {"score": 0.004717723626157272, "phrase": "message-passing_concurrency"}, {"score": 0.004392565073466714, "phrase": "main_form"}, {"score": 0.004174064076143015, "phrase": "message-passing_programming_paradigm"}, {"score": 0.0031360786664165093, "phrase": "channel_allocation"}, {"score": 0.0027459678326877744, "phrase": "different_types"}, {"score": 0.0026091594819333654, "phrase": "added_expressiveness"}, {"score": 0.002479150189700726, "phrase": "runtime_errors"}, {"score": 0.00235560370536971, "phrase": "substructural_type_system"}, {"score": 0.0021928902836049384, "phrase": "affine_typing"}, {"score": 0.0021049977753042253, "phrase": "ill-behaved_programs"}], "paper_keywords": ["Message-passing concurrency", " type systems", " resource management"], "paper_abstract": "We view channels as the main form of resources in a message-passing programming paradigm. These channels need to be carefully managed in settings where resources are scarce. To study this problem, we extend the pi-calculus with primitives for channel allocation and deallocation and allow channels to be reused to communicate values of different types. Inevitably, the added expressiveness increases the possibilities for runtime errors. We define a substructural type system, which combines uniqueness typing and affine typing to reject these ill-behaved programs.", "paper_title": "Uniqueness typing for resource management in message-passing concurrency", "paper_id": "WOS:000337066700003"}