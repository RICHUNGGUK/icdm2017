{"auto_keywords": [{"score": 0.04506785476449152, "phrase": "amc"}, {"score": 0.01571356488393785, "phrase": "history-based_task_allocator"}, {"score": 0.008112187633639086, "phrase": "parallel_applications"}, {"score": 0.007032667018047743, "phrase": "preference-based_task_scheduler"}, {"score": 0.00481495049065317, "phrase": "single-isa_asymmetric_multicore_architectures"}, {"score": 0.004556901872357751, "phrase": "power_efficiency"}, {"score": 0.004457579615095599, "phrase": "current_parallel_programming_environments"}, {"score": 0.004172360444377281, "phrase": "symmetric_multicore_architectures"}, {"score": 0.0040366412779632085, "phrase": "equal_performance"}, {"score": 0.0038624981944755813, "phrase": "unbalanced_workloads"}, {"score": 0.0033837135367113004, "phrase": "adaptive_workload-aware_task_scheduler"}, {"score": 0.0028675712105299496, "phrase": "parallel_application"}, {"score": 0.0026986685585382347, "phrase": "preference_list"}, {"score": 0.002539689093411356, "phrase": "task_allocation"}, {"score": 0.0023378493567176102, "phrase": "wats"}, {"score": 0.002261666793030715, "phrase": "energy_efficiency"}, {"score": 0.0022368274529152342, "phrase": "task-based_applications"}, {"score": 0.0021049977753042253, "phrase": "traditional_task_schedulers"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Task grouping", " history-based task allocation", " dynamic task scheduling"], "paper_abstract": "Single-ISA Asymmetric Multicore (AMC) architectures have shown high performance as well as power efficiency. However, current parallel programming environments do not perform well on AMC because they are designed for symmetric multicore architectures in which all cores provide equal performance. Their random task scheduling policies can result in unbalanced workloads in AMC and severely degrade the performance of parallel applications. To balance the workloads of parallel applications in AMC, this article proposes an adaptive Workload-Aware Task Scheduler (WATS) that consists of a history-based task allocator and a preference-based task scheduler. The history-based task allocator is based on a near-optimal, static task allocation using the historical statistics collected during the execution of a parallel application. The preference-based task scheduler, which schedules tasks based on a preference list, can dynamically adjust the workloads in AMC if the task allocation is less optimal due to approximation in the history-based task allocator. Experimental results show that WATS can improve both the performance and energy efficiency of task-based applications, with the performance gain up to 66.1% compared with traditional task schedulers.", "paper_title": "Adaptive Workload-Aware Task Scheduling for Single-ISA Asymmetric Multicore Architectures", "paper_id": "WOS:000334573800008"}