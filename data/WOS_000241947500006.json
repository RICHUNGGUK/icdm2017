{"auto_keywords": [{"score": 0.043891862951523725, "phrase": "certainty_level"}, {"score": 0.00481495049065317, "phrase": "new_framework"}, {"score": 0.004481132747216135, "phrase": "non_monotonic"}, {"score": 0.003951453722517865, "phrase": "possibility_theory"}, {"score": 0.003857871979942733, "phrase": "non_monotonic_semantics"}, {"score": 0.0038119123317396954, "phrase": "stable_models"}, {"score": 0.0037664981403399064, "phrase": "logic_programs"}, {"score": 0.0037216229812089686, "phrase": "default_negation"}, {"score": 0.0035901685646972585, "phrase": "possibility_distribution"}, {"score": 0.0035051129798529, "phrase": "clear_semantics"}, {"score": 0.0033409791799749403, "phrase": "possibilistic_stable_model"}, {"score": 0.0032229262928681304, "phrase": "syntactic_process"}, {"score": 0.0031465436619697385, "phrase": "fix-point_operator"}, {"score": 0.003071965703296204, "phrase": "particular_models"}, {"score": 0.0022352169832099153, "phrase": "possibilistic_stable_models"}, {"score": 0.0021953290937408807, "phrase": "available_softwares"}, {"score": 0.002169132543304096, "phrase": "answer_set_programming"}, {"score": 0.0021049977753042253, "phrase": "main_lines"}], "paper_keywords": ["non monotonic reasoning", " uncertainty", " logic programming", " possibility theory", " answer set programming"], "paper_abstract": "In this work, we introduce a new framework able to deal with a reasoning that is at the same time non monotonic and uncertain. In order to take into account a certainty level associated to each piece of knowledge, we use possibility theory to extend the non monotonic semantics of stable models for logic programs with default negation. By means of a possibility distribution we define a clear semantics of such programs by introducing what is a possibilistic stable model. We also propose a syntactic process based on a fix-point operator to compute these particular models representing the deductions of the program and their certainty. Then, we show how this introduction of a certainty level on each rule of a program can be used in order to restore its consistency in case of the program has no model at all. Furthermore, we explain how we can compute possibilistic stable models by using available softwares for Answer Set Programming and we describe the main lines of the system that we have developed to achieve this goal.", "paper_title": "Possibilistic uncertainty handling for answer set programming", "paper_id": "WOS:000241947500006"}