{"auto_keywords": [{"score": 0.04845849110410783, "phrase": "multiple_versions"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_computing_environments"}, {"score": 0.004778258911940497, "phrase": "tasks_having_dependencies"}, {"score": 0.004616560363089716, "phrase": "heterogeneous_computing"}, {"score": 0.0045464538515249085, "phrase": "interconnected_machines"}, {"score": 0.004511799033574768, "phrase": "varied_computational_capabilities"}, {"score": 0.004392565073466714, "phrase": "computational_demands"}, {"score": 0.004260134699483774, "phrase": "resource_allocation"}, {"score": 0.004227653047394939, "phrase": "hc_environments"}, {"score": 0.00411589720697736, "phrase": "scheduling_task_execution"}, {"score": 0.004068907083697369, "phrase": "assigned_machines"}, {"score": 0.003697538418750941, "phrase": "distributed_hc_environment"}, {"score": 0.0035600770066142088, "phrase": "np"}, {"score": 0.003438058620195309, "phrase": "heuristic_techniques"}, {"score": 0.003398780792129312, "phrase": "near-optimal_solutions"}, {"score": 0.0033215617190376565, "phrase": "hc_environment"}, {"score": 0.002949598537993663, "phrase": "mapping_problem"}, {"score": 0.0028828965611765673, "phrase": "ga"}, {"score": 0.0026698611202305715, "phrase": "min-min_heuristics"}, {"score": 0.0026494723416072316, "phrase": "simulation_studies"}, {"score": 0.002472822097373027, "phrase": "performance_measure"}, {"score": 0.00241658945942583, "phrase": "weighted_priorities"}, {"score": 0.0021622717349518744, "phrase": "genitor_technique"}, {"score": 0.002137537770621167, "phrase": "best_results"}, {"score": 0.0021049977753042253, "phrase": "faster_two_phase_greedy_approach"}], "paper_keywords": ["Deadlines", " Heterogeneous computing", " Genetic algorithms", " Mapping", " Min-min", " Priorities", " Resource allocation", " Resource management", " Scheduling"], "paper_abstract": "Heterogeneous computing (HQ environments composed of interconnected machines with varied computational capabilities are well suited to meet the computational demands of large, diverse groups of tasks. One aspect of resource allocation in HC environments is matching tasks with machines and scheduling task execution on the assigned machines. We will refer to this matching and scheduling process as mapping. The problem of mapping these tasks onto the machines of a distributed HC environment has been shown, in general, to be NP-complete. Therefore, the development of heuristic techniques to find near-optimal solutions is required. In the HC environment investigated, tasks have deadlines, priorities, multiple versions, and may be composed of communicating subtasks. The best static (off-line) techniques from some previous studies are adapted and applied to this mapping problem: a genetic algorithm (GA), a GENITOR-style algorithm, and a two phase greedy technique based on the concept of Min-min heuristics. Simulation studies compare the performance of these heuristics in several overloaded scenarios, i.e., not all tasks can be executed by their deadlines. The performance measure used is the sum of weighted priorities of tasks that completed before their deadline, adjusted based on the version of the task used. It is shown that for the cases studied here, the GENITOR technique finds the best results, but the faster two phase greedy approach also performs very well. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Static resource allocation for heterogeneous computing environments with tasks having dependencies, priorities, deadlines, and multiple versions", "paper_id": "WOS:000260095000009"}