{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fpga-accelerated_genetic_algorithms"}, {"score": 0.004752221133109136, "phrase": "fpga-based_genetic_algorithms"}, {"score": 0.004539005582217309, "phrase": "complex_applications"}, {"score": 0.004421471944783611, "phrase": "extensive_hardware_architecture_customisation"}, {"score": 0.004278807087784626, "phrase": "accelerated_gas"}, {"score": 0.004223032986655664, "phrase": "potential_users"}, {"score": 0.004167982855788402, "phrase": "hardware_design_experience"}, {"score": 0.004007083686875716, "phrase": "general-purpose_automated_framework"}, {"score": 0.003852371777780562, "phrase": "ga_system"}, {"score": 0.003631390978147703, "phrase": "customisable_hardware_architectures"}, {"score": 0.003537275726870251, "phrase": "unified_platform"}, {"score": 0.0034911335714333507, "phrase": "different_chromosomes"}, {"score": 0.0031223774204093713, "phrase": "hardware-specific_code"}, {"score": 0.002982068153662372, "phrase": "application_inputs"}, {"score": 0.002943147037670826, "phrase": "ga_parameters"}, {"score": 0.0028293966058473476, "phrase": "time-consuming_recompilation"}, {"score": 0.0027200305495826797, "phrase": "ga_execution"}, {"score": 0.0025807396931129926, "phrase": "high_performance_fpga_platform"}, {"score": 0.0024325244760735566, "phrase": "travelling_salesman_problem"}, {"score": 0.0023850311572318496, "phrase": "locating_problem"}, {"score": 0.0023384629381463054, "phrase": "np-hard_set"}, {"score": 0.002233301265743633, "phrase": "system's_flexibility"}, {"score": 0.0021896891011033105, "phrase": "average_speedup"}, {"score": 0.0021049977753042253, "phrase": "multi-core_cpu."}], "paper_keywords": ["genetic algorithm", " field programmable gate array", " FPGA", " automated framework"], "paper_abstract": "FPGA-based genetic algorithms (GAs) can effectively optimise complex applications, but require extensive hardware architecture customisation. To promote these accelerated GAs to potential users without hardware design experience, this study proposes a general-purpose automated framework for creating and executing a GA system on FPGAs. This framework contains scalable and customisable hardware architectures while providing a unified platform for different chromosomes. At compile-time, only a high-level input of the target application needs to be provided, without any hardware-specific code being necessary. At run-time, application inputs and GA parameters can be tuned, without time-consuming recompilation, for finding further good configurations of GA execution. The framework was tested on a high performance FPGA platform using nine problems and benchmarks, including the travelling salesman problem, a locating problem and the NP-hard set covering problem. Experiments show the system's flexibility and an average speedup of 29 times over a multi-core CPU.", "paper_title": "A general-purpose framework for FPGA-accelerated genetic algorithms", "paper_id": "WOS:000368397200003"}