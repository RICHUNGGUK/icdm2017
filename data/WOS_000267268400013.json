{"auto_keywords": [{"score": 0.03668569649960335, "phrase": "progress_guarantees"}, {"score": 0.008300308772847072, "phrase": "underlying_system"}, {"score": 0.00481495049065317, "phrase": "parallel_programs"}, {"score": 0.004774115617883476, "phrase": "bounded_lock-freedom"}, {"score": 0.0046141941030386525, "phrase": "modern_computing_systems"}, {"score": 0.004402973626416765, "phrase": "high_responsiveness"}, {"score": 0.0043656173407379895, "phrase": "aid_scalability"}, {"score": 0.004112812699639956, "phrase": "system_locks"}, {"score": 0.0039077616208517026, "phrase": "progress_inhibitors"}, {"score": 0.003841699919521703, "phrase": "subtle_ways"}, {"score": 0.003776750773624222, "phrase": "notions_of_progress_guarantee"}, {"score": 0.003309124298009635, "phrase": "linear_temporal_logic"}, {"score": 0.0029491324941225356, "phrase": "practical_systems"}, {"score": 0.002886885861509621, "phrase": "formal_definition"}, {"score": 0.0027781249331615813, "phrase": "concurrent_program"}, {"score": 0.002433843373780471, "phrase": "operating_systems"}, {"score": 0.0024028742248152425, "phrase": "hardware_platforms"}, {"score": 0.0022442249871042026, "phrase": "composition_theorem"}, {"score": 0.0022062235065459274, "phrase": "lock-free_algorithms"}, {"score": 0.002178144355363467, "phrase": "bounded_lock-free_supporting_systems"}, {"score": 0.0021049977753042253, "phrase": "composed_execution"}], "paper_keywords": ["Performance", " Reliability", " Theory", " Verification", " Bounded lock-freedom", " Lock-freedom", " Progress Guarantees", " Parallel Computation", " Model Checking"], "paper_abstract": "Parallel platforms are becoming ubiquitous with modern computing systems. Many parallel applications attempt to avoid locks in order to achieve high responsiveness, aid scalability, and avoid deadlocks and livelocks. However, avoiding the use of system locks does not guarantee that no locks are actually used, because progress inhibitors may occur in subtle ways through various program structures. Notions of progress guarantee such as lock-freedom, wait-freedom, and obstruction-freedom have been proposed in the literature to provide various levels of progress guarantees. In this paper we formalize the notions of progress guarantees using linear temporal logic (LTL). We concentrate on lock-freedom and propose a variant of it denoted bounded lock-freedom, which is more suitable for guaranteeing progress in practical systems. We use this formal definition to build a tool that checks if a concurrent program is bounded lock-free for a given bound. We then study the interaction between programs with progress guarantees and the underlying system (e. g., compilers, runtimes, operating systems, and hardware platforms). We propose a means to argue that an underlying system supports lock-freedom. A composition theorem asserts that bounded lock-free algorithms running on bounded lock-free supporting systems retain bounded lock-freedom for the composed execution.", "paper_title": "Progress Guarantee for Parallel Programs via Bounded Lock-Freedom", "paper_id": "WOS:000267268400013"}