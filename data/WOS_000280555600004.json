{"auto_keywords": [{"score": 0.009846830535293389, "phrase": "proc"}, {"score": 0.00970895885065183, "phrase": "computer_science"}, {"score": 0.00481495049065317, "phrase": "related_machines"}, {"score": 0.004795585480947173, "phrase": "online_scheduling"}, {"score": 0.0047379542803396915, "phrase": "semi-online_problem"}, {"score": 0.004671588539217021, "phrase": "basic_online_scheduling_problem"}, {"score": 0.004652919042469491, "phrase": "jobs"}, {"score": 0.004550783060775205, "phrase": "parallel_machines"}, {"score": 0.004496080495247288, "phrase": "fixed_capacity"}, {"score": 0.004406360418456518, "phrase": "arriving_job"}, {"score": 0.004223708778943785, "phrase": "unlimited_time"}, {"score": 0.00419823857480455, "phrase": "stored_job"}, {"score": 0.00402417909321803, "phrase": "new_job"}, {"score": 0.0038417798012011155, "phrase": "makespan_minimization"}, {"score": 0.003780286517897356, "phrase": "first_question"}, {"score": 0.003719773848735395, "phrase": "standard_online_scheduling"}, {"score": 0.0035701977490734684, "phrase": "k"}, {"score": 0.0035296940954990964, "phrase": "second_question"}, {"score": 0.003487222504700868, "phrase": "constant_k"}, {"score": 0.003452218803245602, "phrase": "larger_buffer"}, {"score": 0.003282383509542342, "phrase": "best_competitive_ratio"}, {"score": 0.0032103286429744616, "phrase": "oper"}, {"score": 0.0031857488885949823, "phrase": "lett"}, {"score": 0.0031336319120870435, "phrase": "zhang"}, {"score": 0.0030339249574479307, "phrase": "englert"}, {"score": 0.002753713653068895, "phrase": "best_possible_ratio"}, {"score": 0.0027150658583211746, "phrase": "similar_results"}, {"score": 0.0026877919303211232, "phrase": "multiple_identical_machines"}, {"score": 0.0021049977753042253, "phrase": "optimal_bounds"}], "paper_keywords": ["Semi-online algorithms", " Scheduling", " Uniformly related machines"], "paper_abstract": "Online scheduling with a buffer is a semi-online problem which is strongly related to the basic online scheduling problem. Jobs arrive one by one and are to be assigned to parallel machines. A buffer of a fixed capacity K is available for storing at most K input jobs. An arriving job must be either assigned to a machine immediately upon arrival, or it can be stored in the buffer for unlimited time. A stored job which is removed from the buffer (possibly, in order to allocate a space in the buffer for a new job) must be assigned immediately as well. We study the case of two uniformly related machines of speed ratio s >= 1, with the goal of makespan minimization. Two natural questions can be asked. The first question is whether this model is different from standard online scheduling, that is, is any size of buffer K > 0 already helpful to the algorithm, compared to the case K = 0. The second question is whether there exists a constant K, so that a larger buffer is no longer beneficial to an algorithm, that is, increasing the size of the buffer above this threshold would not change the best competitive ratio further. Previous work (Kellerer et al., Oper. Res. Lett. 21, 235242, 1997; Zhang, Inf. Process. Lett. 61, 145-148, 1997; Englert et al., Proc. 48th Symp. Foundations of Computer Science (FOCS), 2008) shows that in the case s = 1, already K = 1 allows to design a 4/3-competitive algorithm, which is best possible for any K >= 1, whereas the best possible ratio for K = 0 is 3/2. Similar results have been show for multiple identical machines (Englert et al., Proc. 48th Symp. Foundations of Computer Science (FOCS), 2008). We answer both questions affirmatively, and show that a buffer of size K = 2 is sufficient to achieve the a competitive ratio which matches the lower bound for K --> infinity for any s > 1. In fact, we show that a buffer of size K = 1 can evidently be exploited by the algorithm for any s > 1, but for a range of values of s, it is still weaker than a buffer of size 2. On the other hand, in the case s >= 2, a buffer of size K = 1 already allows to achieve optimal bounds.", "paper_title": "Online scheduling with a buffer on related machines", "paper_id": "WOS:000280555600004"}