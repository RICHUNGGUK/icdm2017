{"auto_keywords": [{"score": 0.04838919478929022, "phrase": "behavior_trees"}, {"score": 0.02322730111336099, "phrase": "natural_language_requirements"}, {"score": 0.010461867400320396, "phrase": "state_machines"}, {"score": 0.009533707155391381, "phrase": "uml_state_machines"}, {"score": 0.004385555408850022, "phrase": "behavior_tree_models"}, {"score": 0.0041703614123283165, "phrase": "graphical_modelling_notation"}, {"score": 0.004023120753104693, "phrase": "dynamic_system_behaviour"}, {"score": 0.003690527690610707, "phrase": "software_development"}, {"score": 0.003385336776758738, "phrase": "test_case_generators"}, {"score": 0.0032190636347671675, "phrase": "formal_path"}, {"score": 0.003105305189036267, "phrase": "executable_model"}, {"score": 0.002910545717767559, "phrase": "requirements_validation"}, {"score": 0.0028279422436488116, "phrase": "model-driven_software_development_methods"}, {"score": 0.002502179809452131, "phrase": "atl"}, {"score": 0.002396371892825691, "phrase": "security-alarm_system_case_study"}, {"score": 0.002197966048531954, "phrase": "debug_requirements"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Requirements", " Requirements Validation", " Behavior Trees", " Behavior Engineering", " MDE", " Model Transformation", " UML State Machine"], "paper_abstract": "This paper defines a transformation from Behavior Tree models to UML state machines. Behavior Trees are a graphical modelling notation for capturing and formalising dynamic system behaviour described in natural language requirements. But state machines are more widely used in software development, and are required for use with many tools, such as test case generators. Combining the two approaches provides a formal path from natural language requirements to an executable model of the system. This in turn facilitates requirements validation and transition to model-driven software development methods. The approach is demonstrated by defining a mapping from Behavior Trees to UML state machines using the ATLAS Transformation Language (ATL) in the Eclipse Modeling Framework. A security-alarm system case study is used to illustrate the use of Behavior Trees and execution to debug requirements. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Execution of natural language requirements using State Machines synthesised from Behavior Trees", "paper_id": "WOS:000309315500019"}