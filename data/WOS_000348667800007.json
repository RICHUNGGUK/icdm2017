{"auto_keywords": [{"score": 0.04533960886628084, "phrase": "slp"}, {"score": 0.005638277230500633, "phrase": "slp."}, {"score": 0.00481495049065317, "phrase": "grammar-compressed_strings"}, {"score": 0.004382913938427474, "phrase": "straight-line_program"}, {"score": 0.004212759658511567, "phrase": "context_free_grammar"}, {"score": 0.004150661689086371, "phrase": "chomsky_normal_form"}, {"score": 0.0038727120021750973, "phrase": "length_n"}, {"score": 0.003455765987713262, "phrase": "derivation_tree"}, {"score": 0.0028768722873689432, "phrase": "main_components"}, {"score": 0.0027650234530228923, "phrase": "new_technique"}, {"score": 0.0026443691099806003, "phrase": "useful_tool"}, {"score": 0.002605329434787829, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Straight-line programs (SLPs)", " Runs", " Squares", " Gapped palindromes", " Compressed string processing algorithms"], "paper_abstract": "We address the problems of detecting and counting various forms of regularities in a string represented as a straight-line program (SLP) which is essentially a context free grammar in the Chomsky normal form. Given an SLP of size n that represents a string s of length N, our algorithm computes all runs and squares in sin O(n(3)h) time and O(n(2)) space, where his the height of the derivation tree of the SLP. We also show an algorithm to compute all gapped-palindromes in O(n(3)h + gnh logN) time and O(n(2)) space, where g is the length of the gap. As one of the main components of the above solution, we propose a new technique called approximate doubling which seems to be a useful tool for a wide range of algorithms on SLPs. Indeed, we show that the technique can be used to compute the periods and covers of the string in O(n(2)h) time and O(nh(n + log(2)N)) time, respectively. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Detecting regularities on grammar-compressed strings", "paper_id": "WOS:000348667800007"}