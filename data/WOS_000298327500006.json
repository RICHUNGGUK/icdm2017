{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "algorithm"}, {"score": 0.004159446063902181, "phrase": "timing-closure_flows"}, {"score": 0.0040186038781533946, "phrase": "lower-bound_and_upper-bound_placements"}, {"score": 0.0037188360359702182, "phrase": "upper-bound_placement"}, {"score": 0.0035620354052144656, "phrase": "novel_look-ahead_legalization_algorithm"}, {"score": 0.0031314063049446427, "phrase": "capo"}, {"score": 0.0029980260560551982, "phrase": "solution_quality"}, {"score": 0.002703327151461985, "phrase": "single_thread"}, {"score": 0.002375253757224999, "phrase": "larger_benchmarks"}, {"score": 0.0023145690608400425, "phrase": "new_algorithm"}, {"score": 0.0021416404045850224, "phrase": "empirical_studies"}], "paper_keywords": ["Algorithms", " layout", " multicore", " optimization", " physical design", " placement"], "paper_abstract": "We propose a self-contained, flat, quadratic global placer that is simpler than existing placers and easier to integrate into timing-closure flows. It maintains lower-bound and upper-bound placements that converge to a final solution. The upper-bound placement is produced by a novel look-ahead legalization algorithm. Our placer SimPL outperforms mPL6, FastPlace3, NTUPlace3, APlace2, and Capo simultaneously in runtime and solution quality, running 7.10 times faster than mPL6 (when using a single thread) and reducing wirelength by 3% on the ISPD 2005 benchmark suite. More significant improvements are achieved on larger benchmarks. The new algorithm is amenable to parallelism, and we report empirical studies with SSE2 instructions and up to eight parallel threads.", "paper_title": "SimPL: An Effective Placement Algorithm", "paper_id": "WOS:000298327500006"}