{"auto_keywords": [{"score": 0.03602394543856097, "phrase": "dvs"}, {"score": 0.00481495049065317, "phrase": "peak_performance"}, {"score": 0.00473320761888448, "phrase": "dynamic_voltage_scaling"}, {"score": 0.0045348429403481464, "phrase": "dynamic_power_consumption"}, {"score": 0.004496174406337201, "phrase": "embedded_multiprocessors"}, {"score": 0.00443878620915958, "phrase": "future_technologies"}, {"score": 0.004326188427877999, "phrase": "leakage_current"}, {"score": 0.0038585443691853956, "phrase": "dvs."}, {"score": 0.0036762529165489644, "phrase": "processor_shutdown"}, {"score": 0.003582928547553209, "phrase": "leakage-aware_scheduling_heuristics"}, {"score": 0.0034919649825540396, "phrase": "best_trade-off"}, {"score": 0.0033026956021014204, "phrase": "optimal_number"}, {"score": 0.0032465423581390625, "phrase": "experimental_results"}, {"score": 0.00319134078848996, "phrase": "public_benchmark_set"}, {"score": 0.0031640918630415566, "phrase": "task_graphs"}, {"score": 0.003137074867443131, "phrase": "real_parallel_applications"}, {"score": 0.0030573959252626695, "phrase": "total_energy_consumption"}, {"score": 0.0030054007508185858, "phrase": "tight_deadlines"}, {"score": 0.002954287204671032, "phrase": "critical_path_length"}, {"score": 0.002879237498994052, "phrase": "loose_deadlines"}, {"score": 0.0023134312557290043, "phrase": "different_frequencies"}, {"score": 0.002178529882942255, "phrase": "energy_reduction"}, {"score": 0.0021049977753042253, "phrase": "theoretical_limits"}], "paper_keywords": ["Multiprocessor", " Scheduling", " Leakage power", " Voltage scaling"], "paper_abstract": "When peak performance is unnecessary, Dynamic Voltage Scaling (DVS) can be used to reduce the dynamic power consumption of embedded multiprocessors. In future technologies, however, static power consumption due to leakage current is expected to increase significantly. Then it will be more effective to limit the number of processors employed (i.e., turn some of them off), or to use a combination of DVS and processor shutdown. In this paper, leakage-aware scheduling heuristics are presented that determine the best trade-off between these three techniques: DVS, processor shutdown, and finding the optimal number of processors. Experimental results obtained using a public benchmark set of task graphs and real parallel applications show that our approach reduces the total energy consumption by up to 46% for tight deadlines (1.5x the critical path length) and by up to 73% for loose deadlines (8x the critical path length) compared to an approach that only employs DVS. We also compare the energy consumed by our scheduling algorithms to two absolute lower bounds, one for the case where all processors continuously run at the same frequency, and one for the case where the processors can run at different frequencies and these frequencies may change over time. The results show that the energy reduction achieved by our best approach is close to these theoretical limits.", "paper_title": "Leakage-Aware Multiprocessor Scheduling", "paper_id": "WOS:000267825200007"}