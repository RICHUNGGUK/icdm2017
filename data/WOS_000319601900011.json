{"auto_keywords": [{"score": 0.043452207739444186, "phrase": "flash_disks"}, {"score": 0.010205018710155134, "phrase": "digestjoin"}, {"score": 0.00481495049065317, "phrase": "nonindexed_join_processing"}, {"score": 0.00477190623242136, "phrase": "flash_storage-based_systems"}, {"score": 0.0047292449487169345, "phrase": "flash_memory-based_disks"}, {"score": 0.0046659637258752535, "phrase": "simply_flash_disks"}, {"score": 0.004521566043596533, "phrase": "today's_computer_systems"}, {"score": 0.0043619799095455415, "phrase": "dropping_price"}, {"score": 0.004226949670141375, "phrase": "database_systems"}, {"score": 0.0038636556112977226, "phrase": "magnetic_hard_disks"}, {"score": 0.003677280504320639, "phrase": "query_processing"}, {"score": 0.003531474887552889, "phrase": "processing-on_flash_storage_media"}, {"score": 0.003406713877432236, "phrase": "new_framework"}, {"score": 0.0032132782979796895, "phrase": "intermediate_result_size"}, {"score": 0.0031702173541386888, "phrase": "fast_random_reads"}, {"score": 0.0029901699209266435, "phrase": "join_attributes"}, {"score": 0.002897482096228207, "phrase": "projected_attributes"}, {"score": 0.0028076592725295646, "phrase": "full_tuples"}, {"score": 0.002708399936381754, "phrase": "final_join_results"}, {"score": 0.002543043781904587, "phrase": "second_phase"}, {"score": 0.0023451553255837317, "phrase": "extensive_experiments"}, {"score": 0.002313701040445819, "phrase": "real_flash_disk"}, {"score": 0.0022520496048464406, "phrase": "tpc-h_data_sets"}, {"score": 0.0021821915946356168, "phrase": "traditional_sort-merge_join"}, {"score": 0.002124036931047162, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "system_configurations"}], "paper_keywords": ["Query processing", " joins", " flash memory", " relational databases"], "paper_abstract": "Flash memory-based disks (or simply flash disks) have been widely used in today's computer systems. With their continuously increasing capacity and dropping price, it is envisioned that some database systems will operate on flash disks in the near future. However, the I/O characteristics of flash disks are different from those of magnetic hard disks. Motivated by this, we study the core of query processing in row-based database systems-join processing-on flash storage media. More specifically, we propose a new framework, called DigestJoin, to optimize nonindexed join processing by reducing the intermediate result size and exploiting fast random reads of flash disks. DigestJoin consists of two phases: 1) projecting the join attributes followed by a join on the projected attributes, and 2) fetching the full tuples that satisfy the join to produce the final join results. While the problem of tuple/page fetching with the minimum I/O cost (in the second phase) is intractable, we propose three heuristic page-fetching strategies for flash disks. We have implemented DigestJoin and conducted extensive experiments on a real flash disk. Our evaluation results based on TPC-H data sets show that DigestJoin clearly outperforms the traditional sort-merge join and hash join under a wide range of system configurations.", "paper_title": "Optimizing Nonindexed Join Processing in Flash Storage-Based Systems", "paper_id": "WOS:000319601900011"}