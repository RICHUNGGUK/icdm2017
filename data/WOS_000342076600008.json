{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.004600228893803583, "phrase": "large_dynamic_graphs"}, {"score": 0.004530794611704416, "phrase": "graph_theory"}, {"score": 0.00441738161338662, "phrase": "key_metric"}, {"score": 0.004285010985001827, "phrase": "high_cohesion"}, {"score": 0.004156590395333602, "phrase": "'dense'_regions"}, {"score": 0.004011603024990615, "phrase": "real_world_graphs"}, {"score": 0.00395101799538683, "phrase": "social_network_graphs"}, {"score": 0.0035337158050484474, "phrase": "k-core_subgraphs"}, {"score": 0.0032746712603464235, "phrase": "continuous_updates"}, {"score": 0.003144345057121367, "phrase": "real_world_data_sets"}, {"score": 0.003034558550137019, "phrase": "single_server"}, {"score": 0.0028697077879305064, "phrase": "new_set"}, {"score": 0.002840708910768261, "phrase": "distributed_algorithms"}, {"score": 0.0028120022457134267, "phrase": "k-core_view_construction"}, {"score": 0.0027414948679658816, "phrase": "horizontally_scaling_storage"}, {"score": 0.002713788077665689, "phrase": "computing_platform"}, {"score": 0.002618995204424126, "phrase": "partitioned_graph_data"}, {"score": 0.0025275050635202878, "phrase": "k-core_properties"}, {"score": 0.0024766636161181544, "phrase": "unnecessary_computation"}, {"score": 0.0024516267507109753, "phrase": "experimental_evaluation_results"}, {"score": 0.0024023079401125492, "phrase": "magnitude_speedup"}, {"score": 0.002294929467537814, "phrase": "batch_windows"}, {"score": 0.002271725588755076, "phrase": "complete_reconstruction"}, {"score": 0.0021049977753042253, "phrase": "rich_social_network"}], "paper_keywords": ["k-core", " graph theory", " distributed computing", " dynamic social networks"], "paper_abstract": "In graph theory, k-core is a key metric used to identify subgraphs of high cohesion, also known as the 'dense' regions of a graph. As the real world graphs such as social network graphs grow in size, the contents get richer and the topologies change dynamically, we are challenged not only to materialize k-core subgraphs for one time but also to maintain them in order to keep up with continuous updates. Adding to the challenge is that real world data sets are outgrowing the capacity of a single server and its main memory. These challenges inspired us to propose a new set of distributed algorithms for k-core view construction and maintenance on a horizontally scaling storage and computing platform. Our algorithms execute against the partitioned graph data in parallel and take advantage of k-core properties to aggressively prune unnecessary computation. Experimental evaluation results demonstrated orders of magnitude speedup and advantages of maintaining k-core incrementally and in batch windows over complete reconstruction. Our algorithms thus enable practitioners to create and maintain many k-core views on different topics in rich social network content simultaneously.", "paper_title": "Distributed k-Core View Materialization and Maintenance for Large Dynamic Graphs", "paper_id": "WOS:000342076600008"}