{"auto_keywords": [{"score": 0.04954397446159369, "phrase": "coq"}, {"score": 0.04400931503224136, "phrase": "reo"}, {"score": 0.00481495049065317, "phrase": "component_connectors"}, {"score": 0.004577440795549049, "phrase": "powerful_concept"}, {"score": 0.004425616928975799, "phrase": "concurrent_activities"}, {"score": 0.004254814649568355, "phrase": "compositional_coordination_languages"}, {"score": 0.0038668462001710314, "phrase": "large-scale_distributed_applications"}, {"score": 0.0037595947142663997, "phrase": "complex_component_connectors"}, {"score": 0.0036966717141736355, "phrase": "simpler_ones"}, {"score": 0.0035141291835319682, "phrase": "new_approach"}, {"score": 0.0033974527047473044, "phrase": "reo_connectors"}, {"score": 0.0032296377835432533, "phrase": "higher-order_logic"}, {"score": 0.00319348234663792, "phrase": "a.-calculus"}, {"score": 0.0031577303835881964, "phrase": "basic_notions"}, {"score": 0.002951444412262927, "phrase": "inductive_types"}, {"score": 0.0028695095228791724, "phrase": "data_streams"}, {"score": 0.0025928815987676535, "phrase": "input_constraints"}, {"score": 0.0025494354909453847, "phrase": "connectors'_properties"}, {"score": 0.0023828389061068735, "phrase": "ltl"}, {"score": 0.0023035922232490106, "phrase": "simulation-based_model-checking_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Coordination", " Reo", " Connector", " Coq", " Verification"], "paper_abstract": "Connectors have emerged as a powerful concept for composition and coordination of concurrent activities encapsulated as components and services. Compositional coordination languages like Reo, serve as a means to formally specify and implement connectors. They support large-scale distributed applications by allowing construction of complex component connectors out of simpler ones. In this paper, we present a new approach to modeling and verification of Reo connectors via Coq, a proof assistant based on higher-order logic and A.-calculus. Basic notions in Reo, like nodes and channels, are defined by inductive types. By tracing the data streams, we provide a method for simulation of the behavior and output of a given Reo connector. With input constraints specified, connectors' properties can be proved by induction. Furthermore, properties specified in LTL can be verified using a simulation-based model-checking approach. An access control system is investigated to show our approach. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Modeling and verification of component connectors in Coq", "paper_id": "WOS:000366230400005"}