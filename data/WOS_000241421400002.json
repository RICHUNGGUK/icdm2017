{"auto_keywords": [{"score": 0.031093968454572737, "phrase": "domain"}, {"score": 0.00481495049065317, "phrase": "domain_reuse"}, {"score": 0.004653667500876187, "phrase": "domain_engineering"}, {"score": 0.004459605573798577, "phrase": "narrow_and_stable_domains"}, {"score": 0.004273601449537163, "phrase": "wide-scope_applications"}, {"score": 0.003991932110277654, "phrase": "domain_composition"}, {"score": 0.003697100573612401, "phrase": "existing_domains"}, {"score": 0.0029871209444889716, "phrase": "formal_and_executable_domain_models"}, {"score": 0.0028623555849897632, "phrase": "non-standard_relationships"}, {"score": 0.0027662954811372175, "phrase": "different_domains"}, {"score": 0.002696366237523415, "phrase": "specific_methodology"}, {"score": 0.0021412594173592513, "phrase": "composite_domains"}], "paper_keywords": ["model composition", " reuse", " domain engineering", " MDE"], "paper_abstract": "Domain engineering is a very efficient approach for narrow and stable domains. However, building wide-scope applications often involves crosscutting several domains, such that domain composition becomes a necessity. Our approach aims at reusing existing domains, without charging or adapting them, even when they have been independently designed and implemented. The volution consists of establishing relationships between formal and executable domain models. Domain composition requires non-standard relationships between concepts from different domains and a specific methodology for defining and implementing them. The paper shows the issues addressed and the solutions found in our Melusine environment, based on the experience accumulated in developing composite domains for various industrial applications.", "paper_title": "Relationships for domain reuse and composition", "paper_id": "WOS:000241421400002"}