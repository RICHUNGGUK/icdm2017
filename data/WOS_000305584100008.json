{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "runtime_countermeasures"}, {"score": 0.004735254735115024, "phrase": "code_injection"}, {"score": 0.004319830179921363, "phrase": "memory_safety"}, {"score": 0.004040688646993605, "phrase": "code_injection_attacks"}, {"score": 0.0037480753312398754, "phrase": "execution_flow"}, {"score": 0.00347657813672945, "phrase": "key_role"}, {"score": 0.0031448288291084, "phrase": "countermeasures_exists"}, {"score": 0.0030160945545795468, "phrase": "comprehensive_and_structured_survey"}, {"score": 0.0027054473441439422, "phrase": "different_trade-offs"}, {"score": 0.0021049977753042253, "phrase": "evaluation_framework"}], "paper_keywords": ["Security", " Code injection", " countermeasures", " C", " C plus"], "paper_abstract": "The lack of memory safety in C/C++ often leads to vulnerabilities. Code injection attacks exploit these vulnerabilities to gain control over the execution flow of applications. These attacks have played a key role in many major security incidents. Consequently, a huge body of research on countermeasures exists. We provide a comprehensive and structured survey of vulnerabilities and countermeasures that operate at runtime. These countermeasures make different trade-offs in terms of performance, effectivity, compatibility, etc., making it hard to evaluate and compare countermeasures in a given context. We define a classification and evaluation framework on the basis of which countermeasures can be assessed.", "paper_title": "Runtime Countermeasures for Code Injection Attacks Against C and C++ Programs", "paper_id": "WOS:000305584100008"}