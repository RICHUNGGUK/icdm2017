{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_space_exploration"}, {"score": 0.0396600464562225, "phrase": "desertfd"}, {"score": 0.036962449923098536, "phrase": "design_space"}, {"score": 0.004642604455537883, "phrase": "computer_based_systems_increases"}, {"score": 0.004289966839994858, "phrase": "design_choices"}, {"score": 0.004186926251483987, "phrase": "conflicting_optimization_criteria"}, {"score": 0.00386876598761639, "phrase": "tradeoff_decisions"}, {"score": 0.003822003373331997, "phrase": "design_time"}, {"score": 0.0037075456471849892, "phrase": "domain-independent_design_space_exploration_tool"}, {"score": 0.0034676182423067307, "phrase": "constraint_satisfaction"}, {"score": 0.0033637374697995616, "phrase": "formal_tree-based_view"}, {"score": 0.0032039415997394817, "phrase": "common_structure"}, {"score": 0.003107935254560724, "phrase": "flexible_scripting_language"}, {"score": 0.003051713660488494, "phrase": "mathematical_expressions"}, {"score": 0.0030147970456037274, "phrase": "property_composition"}, {"score": 0.0029783256772952073, "phrase": "user-specified_constraints"}, {"score": 0.0029066973917258655, "phrase": "design_space_representation_result"}, {"score": 0.002636956926079255, "phrase": "property_composition_formulas"}, {"score": 0.0025578967205807843, "phrase": "constraint_satisfaction_problem"}, {"score": 0.002526938673434697, "phrase": "finite_domain_constraints"}, {"score": 0.0023346234464901978, "phrase": "high_level_custom_computer_architecture"}, {"score": 0.0021438155673297377, "phrase": "distributed_embedded_control_units"}, {"score": 0.0021049977753042253, "phrase": "steer-by-wire_automotive_application"}], "paper_keywords": ["Design space exploration", " Finite domain constraints", " Embedded systems"], "paper_abstract": "As the complexity of computer based systems increases, designers are faced with the task of balancing a variety of design choices and parameters against conflicting optimization criteria. Design space exploration seeks to automate or partially automate the process of evaluating tradeoff decisions at design time. DesertFD is a domain-independent design space exploration tool which facilitates the representation and pruning of a design space using constraint satisfaction. DesertFD offers a formal tree-based view of a family of systems related through common structure, together with a flexible scripting language for modeling mathematical expressions governing property composition. User-specified constraints applied to the design space representation result in a pruning of the space. We discuss the reduction of the design space, property composition formulas and constraints into a constraint satisfaction problem using finite domain constraints. We examine two example design space exploration problems to evaluate DesertFD: the generation of a high level custom computer architecture for supporting H.264-based motion estimation, and the reliability-driven mapping of tasks to distributed embedded control units in a steer-by-wire automotive application.", "paper_title": "DesertFD: a finite-domain constraint based tool for design space exploration", "paper_id": "WOS:000274434300003"}