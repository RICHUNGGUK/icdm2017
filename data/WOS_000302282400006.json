{"auto_keywords": [{"score": 0.02431777675002257, "phrase": "fpga_implementation"}, {"score": 0.00481495049065317, "phrase": "direct_linear_system_solver"}, {"score": 0.0045324756541157574, "phrase": "scientific_applications"}, {"score": 0.004442032546224076, "phrase": "large_development_cost"}, {"score": 0.004406360418456518, "phrase": "short_life_span"}, {"score": 0.004370973501074594, "phrase": "fpga_designs"}, {"score": 0.004266501496765747, "phrase": "scientific_computing_community"}, {"score": 0.004232365065131729, "phrase": "fpga"}, {"score": 0.00418134346679498, "phrase": "scientific_computing"}, {"score": 0.0041144374213500715, "phrase": "embedded_computing"}, {"score": 0.00398380712846857, "phrase": "hardware_libraries"}, {"score": 0.0038885527668812807, "phrase": "fpga-based_system"}, {"score": 0.003734833703909746, "phrase": "fpga."}, {"score": 0.003473178781851477, "phrase": "linear_equations"}, {"score": 0.003040050100579337, "phrase": "software-based_generator"}, {"score": 0.0029672941061574375, "phrase": "software_programming_language"}, {"score": 0.002884603537502399, "phrase": "hardware_description_language"}, {"score": 0.0027816546451972725, "phrase": "fpga_capacity"}, {"score": 0.002759279370360986, "phrase": "external_memory_capabilities"}, {"score": 0.002639385610609024, "phrase": "largest_fpga"}, {"score": 0.002494279207996077, "phrase": "single_processor"}, {"score": 0.0024149629835339926, "phrase": "highly_optimized_software_implementation"}, {"score": 0.002385872451981323, "phrase": "processor_vendor"}, {"score": 0.002357131515622894, "phrase": "single_precision_matrices"}, {"score": 0.0021917966722180132, "phrase": "useful_gflop_operation"}, {"score": 0.0021049977753042253, "phrase": "double_precision"}], "paper_keywords": ["Design", " Algorithms", " Performance", " FPGA", " linear system solver", " acceleration", " portable", " scalable", " LU decomposition"], "paper_abstract": "FPGAs have the potential to serve as a platform for accelerating many computations including scientific applications. However, the large development cost and short life span for FPGA designs have limited their adoption by the scientific computing community. FPGA-based scientific computing and many kinds of embedded computing could become more practical if there were hardware libraries that were portable to any FPGA-based system with performance that scaled with the size of the FPGA. To illustrate this idea we have implemented one common super-computing library function: the LU factorization method for solving systems of linear equations. This paper describes a method for making the design both portable and scalable that should be illustrative if such libraries are to be built in the future. The design is a software-based generator that leverages both the flexibility of a software programming language and the parameters inherent in an hardware description language. The generator accepts parameters that describe the FPGA capacity and external memory capabilities. We compare the performance of our engine executing on the largest FPGA available at the time of this work (an Altera Stratix III 3S340) to a single processor core fabricated in the same 65nm IC process running a highly optimized software implementation from the processor vendor. For single precision matrices on the order of 10,000 x 10,000 elements, the FPGA implementation is 2.2 times faster and the energy dissipated per useful GFLOP operation is a factor of 5 times less. For double precision, the FPGA implementation is 1.7 times faster and 3.5 times more energy efficient.", "paper_title": "Portable and Scalable FPGA-Based Acceleration of a Direct Linear System Solver", "paper_id": "WOS:000302282400006"}