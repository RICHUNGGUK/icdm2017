{"auto_keywords": [{"score": 0.030879127828332683, "phrase": "modelcc"}, {"score": 0.010792644741669572, "phrase": "language_specification"}, {"score": 0.010318942474473746, "phrase": "language_processing"}, {"score": 0.00481495049065317, "phrase": "modelcc_-_a_pragmatic_parser_generator"}, {"score": 0.004771672073078768, "phrase": "syntax-directed_translation_tools"}, {"score": 0.0045404698551856125, "phrase": "formal_grammar"}, {"score": 0.004359625030298944, "phrase": "specific_requirements"}, {"score": 0.004300951511110487, "phrase": "parser_generator"}, {"score": 0.004204904449336037, "phrase": "software_engineers"}, {"score": 0.004129607015893271, "phrase": "resulting_grammar"}, {"score": 0.004092463367307375, "phrase": "semantic_actions"}, {"score": 0.004037370832877034, "phrase": "resulting_system"}, {"score": 0.00391167729353583, "phrase": "input_text_format"}, {"score": 0.0037052054802048707, "phrase": "subsequent_changes"}, {"score": 0.003638823482920949, "phrase": "entire_language_processing_tool_chain"}, {"score": 0.0034780071331554003, "phrase": "multiple_copies"}, {"score": 0.002699889709390707, "phrase": "aforementioned_problems"}, {"score": 0.002639502113350897, "phrase": "grammar-driven_parser_generators"}, {"score": 0.0025804616931593897, "phrase": "conceptual_model"}, {"score": 0.002212460584002629, "phrase": "desired_conceptual_model"}, {"score": 0.0021531831652035482, "phrase": "powerful_tool"}, {"score": 0.0021049977753042253, "phrase": "domain-specific_languages"}], "paper_keywords": ["Model-based parser generators", " language workbenches", " model-driven software development"], "paper_abstract": "Syntax-directed translation tools require the specification of a language by means of a formal grammar. This grammar must also conform to the specific requirements of the parser generator to be used. Software engineers then annotate the resulting grammar with semantic actions for the resulting system to perform its desired functionality. Whenever the input text format is modified, the grammar has to be updated and the subsequent changes propagate throughout the entire language processing tool chain. Moreover, if several applications use the same language, multiple copies of the same language specification have to be maintained in sync, since language specification (i.e. the grammar) is tightly coupled to language processing (i.e. the semantic actions that annotate that grammar). In this paper, we introduce ModelCC, a model-based parser generator that decouples language specification from language processing, hence avoiding the aforementioned problems that are caused by grammar-driven parser generators. ModelCC receives a conceptual model as input, along with constraints that annotate it. It is then able to create a parser for a given textual representation format, so that the generated parser fully automates the instantiation of the desired conceptual model. ModelCC is also a powerful tool for the design of domain-specific languages.", "paper_title": "ModelCC - A Pragmatic Parser Generator", "paper_id": "WOS:000348584500004"}