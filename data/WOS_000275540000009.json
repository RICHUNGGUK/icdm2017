{"auto_keywords": [{"score": 0.05007847282349091, "phrase": "lock-free_synchronization"}, {"score": 0.03983926434466606, "phrase": "uam"}, {"score": 0.03138030064715207, "phrase": "lock-free_and_lock-based_sharing"}, {"score": 0.004664352260912174, "phrase": "real-time_systems"}, {"score": 0.004447201233380302, "phrase": "dynamic_embedded_real-time_systems"}, {"score": 0.004273951631010383, "phrase": "resource_overloads"}, {"score": 0.004206548500039536, "phrase": "arbitrary_activity_arrivals"}, {"score": 0.004074901471704325, "phrase": "activity_arrival_behaviors"}, {"score": 0.003978866233891427, "phrase": "unimodal_arbitrary_arrival_model"}, {"score": 0.0037040785566765954, "phrase": "stronger_\"adversary"}, {"score": 0.0033937776228549557, "phrase": "lock-free_retries"}, {"score": 0.0032614317990293695, "phrase": "utility_accrual_scheduling"}, {"score": 0.002917604283241353, "phrase": "uam."}, {"score": 0.0027815466400771768, "phrase": "activities'_accrued_timeliness_utility"}, {"score": 0.0023532890136269986, "phrase": "total_accrued_utility"}, {"score": 0.0021049977753042253, "phrase": "posix_rtos_implementation"}], "paper_keywords": ["Experimentation", " Performance", " Theory", " Time/utility function", " utility accrual criteria", " real-time", " lock-free", " scheduling", " synchronization"], "paper_abstract": "We consider lock-free synchronization for dynamic embedded real-time systems that are subject to resource overloads and arbitrary activity arrivals. We model activity arrival behaviors using the unimodal arbitrary arrival model (or UAM). UAM embodies a stronger \"adversary\" than most traditional arrival models. We derive an upper bound on lock-free retries under the UAM with utility accrual scheduling-the first such result. We establish the tradeoffs between lock-free and lock-based sharing under UAM. These include conditions under which activities' accrued timeliness utility is greater under lock-free than lock-based, and the consequent lower and upper bound on the total accrued utility that is possible with lock-free and lock-based sharing. We confirm our analytical results with a POSIX RTOS implementation.", "paper_title": "Lock-Free Synchronization for Dynamic Embedded Real-Time Systems", "paper_id": "WOS:000275540000009"}