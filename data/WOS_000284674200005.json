{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "genetic_programming"}, {"score": 0.004548253531664032, "phrase": "manufacturer's_testing_procedures"}, {"score": 0.004345525254560329, "phrase": "corresponding_bug_fix"}, {"score": 0.004296264970612285, "phrase": "multiple_changes"}, {"score": 0.004247560712327667, "phrase": "higher_order_mutation_testing"}, {"score": 0.004128192012388041, "phrase": "defect_interactions"}, {"score": 0.004035107125458193, "phrase": "software_testing"}, {"score": 0.003989351600022163, "phrase": "fault_finding"}, {"score": 0.003877211065759289, "phrase": "multi-objective_pareto_optimal_approach"}, {"score": 0.0038332390893263844, "phrase": "monte_carlo"}, {"score": 0.0037682108720193956, "phrase": "genetic_algorithms"}, {"score": 0.003641433168173135, "phrase": "higher_order_mutants"}, {"score": 0.0033427754823819157, "phrase": "complex_faults"}, {"score": 0.0031215289677725693, "phrase": "traditional_first_order_mutations"}, {"score": 0.003051073364818384, "phrase": "simple_faults"}, {"score": 0.002982203248352076, "phrase": "based_approaches"}, {"score": 0.0025127604406208668, "phrase": "single_faults"}, {"score": 0.0023329572140896237, "phrase": "strong_typing"}, {"score": 0.0023064582783867645, "phrase": "bnf_grammars"}, {"score": 0.0022672718785099666, "phrase": "based_mutation_testing"}, {"score": 0.0021784009230363627, "phrase": "ancient_heavily_optimised_every_day_c_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Pareto optimality", " Mutation testing", " Higher order mutation", " SBSE", " Monte Carlo", " Genetic algorithm", " Genetic programming", " NSGA-II", " Strongly typed GP", " Grammar based GP", " Non-determinism", " Triangle", " Schedule", " tcas", " Gzip"], "paper_abstract": "It is said 90% of faults that survive manufacturer's testing procedures are complex. That is, the corresponding bug fix contains multiple changes. Higher order mutation testing is used to study defect interactions and their impact on software testing for fault finding. We adopt a multi-objective Pareto optimal approach using Monte Carlo sampling, genetic algorithms and genetic programming to search for higher order mutants which are both hard-to-kill and realistic. The space of complex faults (higher order mutants) is much larger than that of traditional first order mutations which correspond to simple faults, nevertheless search based approaches make this scalable. The problems of non-determinism and efficiency are overcome. Easy to detect faults may become harder to detect when they interact and impossible to detect single faults may be brought to light when code contains two such faults. We use strong typing and BNF grammars in search based mutation testing to find examples of both in ancient heavily optimised every day C code. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Efficient multi-objective higher order mutation testing with genetic programming", "paper_id": "WOS:000284674200005"}