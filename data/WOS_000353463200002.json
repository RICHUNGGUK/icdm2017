{"auto_keywords": [{"score": 0.04865678212430773, "phrase": "gpu"}, {"score": 0.004815340854058249, "phrase": "adaptive"}, {"score": 0.004728624975677976, "phrase": "hyperbolic_block-structured_amr_applications"}, {"score": 0.004372206625076973, "phrase": "amr"}, {"score": 0.004165987300206134, "phrase": "numerical_solutions"}, {"score": 0.004042166795461166, "phrase": "block-structured_amr_approaches"}, {"score": 0.0038749521906474593, "phrase": "non-uniform_sizes"}, {"score": 0.0032920678776655783, "phrase": "adaptive_execution"}, {"score": 0.003252542052430779, "phrase": "block-structured_amr_applications"}, {"score": 0.003155784719225786, "phrase": "hyperbolic_directionally_split_solvers"}, {"score": 0.0030991131563500446, "phrase": "effective_hybrid_execution_strategies"}, {"score": 0.0030069062905274976, "phrase": "uniform_patches"}, {"score": 0.0029351141718104725, "phrase": "efficient_execution"}, {"score": 0.002899861600151726, "phrase": "non-uniform_patches"}, {"score": 0.002779769492357829, "phrase": "bin-packing_work_units"}, {"score": 0.0027298319171606498, "phrase": "balance_gpu_computations"}, {"score": 0.0026970382454914437, "phrase": "adaptive_asynchronism"}, {"score": 0.0026647691273439795, "phrase": "cpu"}, {"score": 0.0025697460140513932, "phrase": "knapsack_formulation"}, {"score": 0.0025235718883452585, "phrase": "scheduling_communications"}, {"score": 0.0024932498388507084, "phrase": "multi-gpu_executions"}, {"score": 0.002419025278429845, "phrase": "synthetic_and_real_data"}, {"score": 0.0023755529073496394, "phrase": "single-gpu_and_multi-gpu_executions"}, {"score": 0.0021049977753042253, "phrase": "existing_strategies"}], "paper_keywords": ["Adaptive mesh refinement", " GPU executions", " dynamic load balancing", " asynchronous executions of CPUs and GPUs", " coalesced access"], "paper_abstract": "A block-structured adaptive mesh refinement (AMR) technique has been used to obtain numerical solutions for many scientific applications. Some block-structured AMR approaches have focused on forming patches of non-uniform sizes where the size of a patch can be tuned to the geometry of a region of interest. In this paper, we develop strategies for adaptive execution of block-structured AMR applications on GPUs, for hyperbolic directionally split solvers. While effective hybrid execution strategies exist for applications with uniform patches, our work considers efficient execution of non-uniform patches with different workloads. Our techniques include bin-packing work units to load balance GPU computations, adaptive asynchronism between CPU and GPU executions using a knapsack formulation, and scheduling communications for multi-GPU executions. Our experiments with synthetic and real data, for single-GPU and multi-GPU executions, on Tesla S1070 and Fermi C2070 clusters, show that our strategies result in up to a 3.23 speedup in performance over existing strategies.", "paper_title": "Adaptive executions of hyperbolic block-structured AMR applications on GPU systems", "paper_id": "WOS:000353463200002"}