{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mutation_testing"}, {"score": 0.044476153128415616, "phrase": "test_suite"}, {"score": 0.004755650013733963, "phrase": "powerful_and_flexible_test_technique"}, {"score": 0.004620093797504386, "phrase": "small_change"}, {"score": 0.004064548693812535, "phrase": "original_description"}, {"score": 0.0037419747525425586, "phrase": "potential_small_slips"}, {"score": 0.0032916702592724217, "phrase": "larger_changes"}, {"score": 0.0032109670662222416, "phrase": "new_approach"}, {"score": 0.0030177339185643226, "phrase": "semantic_mutation_testing"}, {"score": 0.0027437235598539904, "phrase": "possible_misunderstandings"}, {"score": 0.002709862658377861, "phrase": "description_language"}, {"score": 0.0026543514413663893, "phrase": "different_class"}, {"score": 0.0025892330566358503, "phrase": "likely_misunderstandings"}, {"score": 0.002315367926547472, "phrase": "c_code"}, {"score": 0.0022492129111567824, "phrase": "semantic_mutation_testing_tool"}, {"score": 0.002122507495446441, "phrase": "semantic_mutation_operators"}], "paper_keywords": ["Mutation testing", " Semantics", " Misunderstandings"], "paper_abstract": "Mutation testing is a powerful and flexible test technique. Traditional mutation testing makes a small change to the syntax of a description (usually a program) in order to create a mutant. A test suite is considered to be good if it distinguishes between the original description and all of the (functionally non-equivalent) mutants. These mutants can be seen as representing potential small slips and thus mutation testing aims to produce a test suite that is good at finding such slips. It has also been argued that a test suite that finds such small changes is likely to find larger changes. This paper describes a new approach to mutation testing, called semantic mutation testing. Rather than mutate the description, semantic mutation testing mutates the semantics of the language in which the description is written. The mutations of the semantics of the language represent possible misunderstandings of the description language and thus capture a different class of faults. Since the likely misunderstandings are highly context dependent, this context should be used to determine which semantic mutants should be produced. The approach is illustrated through examples with statecharts and C code. The paper also describes a semantic mutation testing tool for C and the results of experiments that investigated the nature of some semantic mutation operators for C. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Semantic mutation testing", "paper_id": "WOS:000315978700002"}