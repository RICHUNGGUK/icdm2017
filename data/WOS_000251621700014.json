{"auto_keywords": [{"score": 0.04601284855430019, "phrase": "xflat"}, {"score": 0.013663046529017312, "phrase": "query_performance"}, {"score": 0.013425384289099973, "phrase": "published_xml_view"}, {"score": 0.00481495049065317, "phrase": "published_xml_data"}, {"score": 0.004758457292840376, "phrase": "exceptional_attention"}, {"score": 0.004459334186889869, "phrase": "xml_view_publishing_method"}, {"score": 0.003986103192038901, "phrase": "sensitive_data"}, {"score": 0.003939296259436904, "phrase": "encryption_techniques"}, {"score": 0.0038246602895705643, "phrase": "xml_tree"}, {"score": 0.003584025547693836, "phrase": "multiple_users"}, {"score": 0.0031845067058084583, "phrase": "storage_strategy"}, {"score": 0.0031100973266506163, "phrase": "nested_encryption_cost"}, {"score": 0.0030735451757603555, "phrase": "view_construction"}, {"score": 0.0030195184114140063, "phrase": "nested_decryption_cost"}, {"score": 0.002984027623988469, "phrase": "query_evaluation"}, {"score": 0.0027961342030212353, "phrase": "user-specific_schema"}, {"score": 0.0026986685585382347, "phrase": "total_space_cost"}, {"score": 0.0024118292918742967, "phrase": "xml_schema_index"}, {"score": 0.0023277282036119106, "phrase": "final_xml_view"}, {"score": 0.002286781334850213, "phrase": "experimental_results"}, {"score": 0.002181069180139225, "phrase": "proposed_xflat_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["XML publish", " security", " XML query processing"], "paper_abstract": "The security of published XML data receives exceptional attention due to its sensitive nature in many applications. This paper proposes an XML view publishing method called XFlat. Compared with other methods, XFlat focuses on query performance over the published XML view while simultaneously protecting the sensitive data via encryption techniques. XFlat decomposes an XML tree into a set of sub-trees, in each of which multiple users have the same accessibility to all nodes, and may encrypt and store each sub-tree in a flat, sequential manner. This storage strategy can avoid the nested encryption cost in view construction and the nested decryption cost in query evaluation. In addition, we discuss how to generate a user-specific schema and how to minimize the total space cost of the published XML view when considering the overhead of the relationships among the sub-trees. We also propose an XML schema index to enhance query performance over the final XML view. The experimental results demonstrate the effectiveness and efficiency of the proposed XFlat method. (c) 2007 Elsevier Inc. All rights reserved.", "paper_title": "XFlat: query-friendly encrypted XML view publishing", "paper_id": "WOS:000251621700014"}