{"auto_keywords": [{"score": 0.03246855872517173, "phrase": "accelerate"}, {"score": 0.0043161190928529755, "phrase": "advanced_type_system"}, {"score": 0.004136333933790974, "phrase": "type_families"}, {"score": 0.004036968488559984, "phrase": "crucial_role"}, {"score": 0.003845313870879042, "phrase": "rigorous_type_discipline"}, {"score": 0.0037988336463795963, "phrase": "runtime_errors"}, {"score": 0.0036627245728600073, "phrase": "embedded_language_applications"}, {"score": 0.003531474887552889, "phrase": "embedded_language_compiler"}, {"score": 0.0033029038236817372, "phrase": "safety_guarantees"}, {"score": 0.003107935254560724, "phrase": "compilation_pipeline"}, {"score": 0.002685558057339722, "phrase": "source_language"}, {"score": 0.0026209522797963447, "phrase": "low-level_register_language"}, {"score": 0.0023776656246300063, "phrase": "new_type-safe_interface"}, {"score": 0.0023346234464901978, "phrase": "industrial-strength_llvm_compiler_infrastructure"}, {"score": 0.0021966859554037174, "phrase": "competitive_runtimes"}], "paper_keywords": ["Arrays", " Data Parallelism", " Embedded Language", " Code Generation", " Dynamic Compilation", " GPGPU", " Haskell", " LLVM"], "paper_abstract": "Embedded languages are often compiled at application runtime; thus, embedded compile-time errors become application runtime errors. We argue that advanced type system features, such as GADTs and type families, play a crucial role in minimising such runtime errors. Specifically, a rigorous type discipline reduces runtime errors due to bugs in both embedded language applications and the implementation of the embedded language compiler itself. In this paper, we focus on the safety guarantees achieved by type preserving compilation. We discuss the compilation pipeline of Accelerate, a high-performance array language targeting both multicore CPUs and GPUs, where we are able to preserve types from the source language down to a low-level register language in SSA form. Specifically, we demonstrate the practicability of our approach by creating a new type-safe interface to the industrial-strength LLVM compiler infrastructure, which we used to build two new Accelerate backends that show competitive runtimes on a set of benchmarks across both CPUs and GPUs.", "paper_title": "Type-safe Runtime Code Generation: Accelerate to LLVM", "paper_id": "WOS:000370549100019"}