{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "existing_algorithms"}, {"score": 0.030085977154011265, "phrase": "new_algorithm"}, {"score": 0.004741845603430361, "phrase": "computing_dominators"}, {"score": 0.004460309246062286, "phrase": "single_procedures"}, {"score": 0.004260134699483774, "phrase": "computing_power"}, {"score": 0.004068907083697369, "phrase": "whole-program_analyses"}, {"score": 0.00385658790017119, "phrase": "growing_need"}, {"score": 0.0037402558657576124, "phrase": "dominator_computation_algorithms"}, {"score": 0.003683407561208816, "phrase": "context-sensitive_interprocedural_dominators"}, {"score": 0.0035722806911457545, "phrase": "transitive_reduction"}, {"score": 0.0034911335714333507, "phrase": "interprocedural_dominator_graph"}, {"score": 0.0032585499655442404, "phrase": "intraprocedural_case"}, {"score": 0.0027741761880779535, "phrase": "interprocedural_dominators"}, {"score": 0.002690406375639144, "phrase": "theoretical_complexity"}, {"score": 0.002472822097373027, "phrase": "straightforward_iterative_solution"}, {"score": 0.002416589459425828, "phrase": "data_flow_equations"}, {"score": 0.0021049977753042253, "phrase": "basic_blocks"}], "paper_keywords": ["algorithms", " languages", " interprocedural control flow graph", " dominators", " interprocedural analysis"], "paper_abstract": "Existing algorithms for computing dominators are formulated for control flow graphs of single procedures. With the rise of computing power, and the viability of whole-program analyses and optimizations, there is a growing need to extend the dominator computation algorithms to context-sensitive interprocedural dominators. Because the transitive reduction of the interprocedural dominator graph is not a tree, as in the intraprocedural case, it is not possible to extend existing algorithms directly. In this article, we propose a new algorithm for computing interprocedural dominators. Although the theoretical complexity of this new algorithm is as high as that of a straightforward iterative solution of the data flow equations, our experimental evaluation demonstrates that the algorithm is practically viable, even for programs consisting of several hundred thousands of basic blocks.", "paper_title": "A practical interprocedural dominance algorithm", "paper_id": "WOS:000248913500002"}