{"auto_keywords": [{"score": 0.043616210216916355, "phrase": "rmi"}, {"score": 0.02904629118641448, "phrase": "rt-dgc"}, {"score": 0.00481495049065317, "phrase": "distributed_real-time_java"}, {"score": 0.00465964893087681, "phrase": "real-time_distribution_middleware"}, {"score": 0.004568871736067739, "phrase": "high-level_languages"}, {"score": 0.004509582293923447, "phrase": "java"}, {"score": 0.004392565073466714, "phrase": "increasing_interest"}, {"score": 0.00433531459712787, "phrase": "next_generation_applications"}, {"score": 0.004223032986655664, "phrase": "java's_remote_method_invocation"}, {"score": 0.003980875186335867, "phrase": "new_distributed_horizons"}, {"score": 0.003802135020791801, "phrase": "distributed_application_programmers"}, {"score": 0.003537275726870251, "phrase": "distributed_garbage_collector"}, {"score": 0.003400640983719424, "phrase": "unreachable_remote_objects"}, {"score": 0.003334309053314909, "phrase": "distributed_ecosystem"}, {"score": 0.0030017207229983385, "phrase": "real-time_java_communications"}, {"score": 0.0028293966058473476, "phrase": "simple_characterization"}, {"score": 0.0027741761880779535, "phrase": "predictable_real-time_distributed_garbage_collector"}, {"score": 0.0025807396931129926, "phrase": "middleware_infrastructure"}, {"score": 0.0024325244760735566, "phrase": "bounded_overhead"}, {"score": 0.002218668420806254, "phrase": "distributed_real-time_java_application"}, {"score": 0.0021049977753042253, "phrase": "intrinsic_cost"}], "paper_keywords": ["Real-time", " Java", " Distributed garbage collection", " Middleware", " DRTSJ", " RSTJ"], "paper_abstract": "The use of real-time distribution middleware programmed with high-level languages like Java is becoming of increasing interest in next generation applications. Technology like Java's Remote Method Invocation (RMI) paves the way towards these new distributed horizons. RMI offers many high-level abstractions useful for distributed application programmers to reduce their development times. One of these abstractions is a distributed garbage collector (DGC) that removes unreachable remote objects from the distributed ecosystem. However, in real-time Java, distributed garbage collection is underspecified and it introduces unbounded indeterminism on end-to-end real-time Java communications. This article analyzes this problem proposing a simple characterization for a predictable real-time distributed garbage collector (RT-DGC). The approach requires support from the middleware infrastructure that implements the abstraction but it also introduces bounded overhead. The article provides insight on the performance that RT-DGC offers to a distributed real-time Java application and the extra overheads due to the intrinsic cost of this abstraction.", "paper_title": "A simple distributed garbage collector for distributed real-time Java", "paper_id": "WOS:000344813000030"}