{"auto_keywords": [{"score": 0.04266752219437901, "phrase": "flash_memory_storage"}, {"score": 0.031412433020445524, "phrase": "generic_framework"}, {"score": 0.030883460554712864, "phrase": "fast"}, {"score": 0.004815275091982309, "phrase": "generic"}, {"score": 0.004710306419574744, "phrase": "search_trees"}, {"score": 0.004669085371587273, "phrase": "flash_memory_storage_systems"}, {"score": 0.004628223381645729, "phrase": "tree_index_structures"}, {"score": 0.0045877173513910055, "phrase": "crucial_components"}, {"score": 0.004547564208690591, "phrase": "data_management_systems"}, {"score": 0.004507760907425495, "phrase": "existing_tree_index_structure"}, {"score": 0.00440976345264104, "phrase": "implicit_assumption"}, {"score": 0.0043519860930099795, "phrase": "underlying_external_memory_storage"}, {"score": 0.004294962474996283, "phrase": "conventional_magnetic_hard_disk_drives"}, {"score": 0.003968112038249246, "phrase": "main_storage_media"}, {"score": 0.0039333604469462356, "phrase": "mobile_devices"}, {"score": 0.0038989120088094185, "phrase": "digital_cameras"}, {"score": 0.003633927813203731, "phrase": "existing_tree_index_structures"}, {"score": 0.003539252646181146, "phrase": "direct_approach"}, {"score": 0.00346223706087128, "phrase": "unique_characteristics"}, {"score": 0.0034319005131102495, "phrase": "flash_memory"}, {"score": 0.0031845067058084583, "phrase": "sub_optimal_performance"}, {"score": 0.0030206579994328975, "phrase": "flash-aware_search_trees"}, {"score": 0.002941913249957503, "phrase": "flash-aware_tree_index_structures"}, {"score": 0.0028526276660691525, "phrase": "previous_attempts"}, {"score": 0.0028276174348291923, "phrase": "flash_memory_indexing"}, {"score": 0.002623669616798891, "phrase": "wide_class"}, {"score": 0.0025778546800417808, "phrase": "tree_structures"}, {"score": 0.0023604768913655463, "phrase": "flash_operations"}, {"score": 0.002339771435910601, "phrase": "memory_flushing"}, {"score": 0.0023192471808039746, "phrase": "crash_recovery_techniques"}, {"score": 0.002298902547676131, "phrase": "extensive_experimental_results"}, {"score": 0.002248816575548875, "phrase": "actual_implementation"}, {"score": 0.0021998194157393353, "phrase": "gist_index_structure"}, {"score": 0.0021805253185830467, "phrase": "postgresql"}, {"score": 0.0021236300589450143, "phrase": "better_performance"}], "paper_keywords": ["Flash memory", " Tree", " Spatial", " Index structure", " Storage", " Multi-dimensional", " Data", " System"], "paper_abstract": "Tree index structures are crucial components in data management systems. Existing tree index structure are designed with the implicit assumption that the underlying external memory storage is the conventional magnetic hard disk drives. This assumption is going to be invalid soon, as flash memory storage is increasingly adopted as the main storage media in mobile devices, digital cameras, embedded sensors, and notebooks. Though it is direct and simple to port existing tree index structures on the flash memory storage, that direct approach does not consider the unique characteristics of flash memory, i.e., slow write operations, and erase-before-update property, which would result in a sub optimal performance. In this paper, we introduce FAST (i.e., Flash-Aware Search Trees) as a generic framework for flash-aware tree index structures. FAST distinguishes itself from all previous attempts of flash memory indexing in two aspects: (1) FAST is a generic framework that can be applied to a wide class of data partitioning tree structures including R-tree and its variants, and (2) FAST achieves both efficiency and durability of read and write flash operations through memory flushing and crash recovery techniques. Extensive experimental results, based on an actual implementation of FAST inside the GiST index structure in PostgreSQL, show that FAST achieves better performance than its competitors.", "paper_title": "Generic and efficient framework for search trees on flash memory storage systems", "paper_id": "WOS:000320392800002"}