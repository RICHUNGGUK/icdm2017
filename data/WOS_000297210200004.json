{"auto_keywords": [{"score": 0.043178270803165684, "phrase": "delta"}, {"score": 0.015626336575515737, "phrase": "linial"}, {"score": 0.010610534373871224, "phrase": "polylogarithmic_time"}, {"score": 0.008359154359727523, "phrase": "running_time"}, {"score": 0.004767118498560508, "phrase": "n-vertex_graph"}, {"score": 0.004672868619910998, "phrase": "maximum_degree_delta"}, {"score": 0.004603400427647185, "phrase": "vertex_upsilon"}, {"score": 0.0045462962093987674, "phrase": "v_hosts"}, {"score": 0.0042605287427860865, "phrase": "discrete_rounds"}, {"score": 0.004218181063178522, "phrase": "distributed_vertex_coloring_problem"}, {"score": 0.003760297688599612, "phrase": "efficient_randomized_algorithms"}, {"score": 0.003436785843635843, "phrase": "high_probability"}, {"score": 0.0033771793949625806, "phrase": "best_known_deterministic_algorithm"}, {"score": 0.0030027931370019585, "phrase": "deterministic_polylogarithmic_time"}, {"score": 0.0027649406355736757, "phrase": "deterministic_algorithm"}, {"score": 0.002584379962895876, "phrase": "delta_logn"}, {"score": 0.0025522570524412385, "phrase": "arbitrarily_slow-growing_function"}, {"score": 0.0021049977753042253, "phrase": "alpha_log"}], "paper_keywords": ["Algorithms", " Arboricity", " arbdefective coloring", " partial orientation"], "paper_abstract": "Consider an n-vertex graph G = (V, E) of maximum degree Delta, and suppose that each vertex upsilon is an element of V hosts a processor. The processors are allowed to communicate only with their neighbors in G. The communication is synchronous, that is, it proceeds in discrete rounds. In the distributed vertex coloring problem, the objective is to color G with Delta + 1, or slightly more than Delta + 1, colors using as few rounds of communication as possible. (The number of rounds of communication will be henceforth referred to as running time.) Efficient randomized algorithms for this problem are known for more than twenty years [Alon et al. 1986; Luby 1986]. Specifically, these algorithms produce a (Delta + 1)-coloring within O(log n) time, with high probability. On the other hand, the best known deterministic algorithm that requires polylogarithmic time employs O(Delta(2)) colors. This algorithm was devised in a seminal FOCS'87 paper by Linial [1987]. Its running time is O(log*n). In the same article, Linial asked whether one can color with significantly less than Delta(2) colors in deterministic polylogarithmic time. By now, this question of Linial became one of the most central long-standing open questions in this area. In this article, we answer this question in the affirmative, and devise a deterministic algorithm that employs Delta(1 to (1))(1) colors, and runs in polylogarithmic time. Specifically, the running time of our algorithm is O(f (Delta) log Delta logn), for an arbitrarily slow-growing function f (Delta) = omega(1). We can also produce an O(Delta(1+n))-coloring in O(log Delta logn)-time, for an arbitrarily small constant eta > 0, and an O(Delta)-coloring in O(Delta(epsilon) logn) time, for an arbitrarily small constant epsilon > 0. Our results are, in fact, far more general than this. In particular, for a graph of arboricity a, our algorithm produces an O(a(1+eta))-coloring, for an arbitrarily small constant eta > 0, in time O(log alpha log n).", "paper_title": "Deterministic Distributed Vertex Coloring in Polylogarithmic Time", "paper_id": "WOS:000297210200004"}