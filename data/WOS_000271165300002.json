{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "sparse_algebra_codes"}, {"score": 0.04425618028201675, "phrase": "running_threads"}, {"score": 0.004773692073488661, "phrase": "simultaneous_multithreading_architectures"}, {"score": 0.004053362743156545, "phrase": "memory_hierarchy"}, {"score": 0.0039841418890102925, "phrase": "poor_locality"}, {"score": 0.0038326698261576023, "phrase": "major_bottleneck"}, {"score": 0.003441352119167824, "phrase": "sparse_matrix_ones"}, {"score": 0.003296212583539166, "phrase": "irregular_codes"}, {"score": 0.003267925215811654, "phrase": "smt_architectures"}, {"score": 0.0031982609080278643, "phrase": "high_performance"}, {"score": 0.0031166151196841308, "phrase": "data_reordering_technique"}, {"score": 0.0029089095588612007, "phrase": "locality_model"}, {"score": 0.0028346293790895024, "phrase": "previous_works"}, {"score": 0.0026570998719084153, "phrase": "smt_architecture"}, {"score": 0.0025780912201045555, "phrase": "real_architecture"}, {"score": 0.002555950807368337, "phrase": "intel's_hyper-threading"}, {"score": 0.00253400005142168, "phrase": "important_reductions"}, {"score": 0.0024799423362011582, "phrase": "cache_misses"}, {"score": 0.0023145690608400425, "phrase": "locality_improvement_technique"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["sparse matrix", " irregular codes", " data reuse", " locality", " multithreading", " sparse algebra codes"], "paper_abstract": "In this paper the problem of the locality of sparse algebra codes on simultaneous multithreading (SMT) architectures is studied. In these kind of architectures many hardware structures are dynamically shared among the running threads. This puts a lot of stress on the memory hierarchy, and a poor locality, both inter-thread and intra-thread, may become a major bottleneck in the performance of a code. This behavior is even more pronounced when the code is irregular, which is the case of sparse matrix ones. Therefore, techniques that increase the locality of irregular codes on SMT architectures are important to achieve high performance. This paper proposes a data reordering technique specially tuned for these kind of architectures and codes. It is based on a locality model developed by the authors in previous works. The technique has been tested, first, using a simulator of a SMT architecture, and subsequently, on a real architecture as Intel's Hyper-Threading. Important reductions in the number of cache misses have been achieved, even when the number of running threads grows. When applying the locality improvement technique, we also decrease the total execution time and improve the scalabitity of the code. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Increasing data reuse of sparse algebra codes on simultaneous multithreading architectures", "paper_id": "WOS:000271165300002"}