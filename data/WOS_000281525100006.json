{"auto_keywords": [{"score": 0.04351475728041089, "phrase": "flextm"}, {"score": 0.010311900942963364, "phrase": "parallel_commits"}, {"score": 0.00481495049065317, "phrase": "flexible_transactional_memory_support"}, {"score": 0.004617494576218827, "phrase": "tm"}, {"score": 0.004401342842183475, "phrase": "mixed_fashion"}, {"score": 0.004233284262727897, "phrase": "transactional_state"}, {"score": 0.003987126862293129, "phrase": "access_sets"}, {"score": 0.0036662773795817544, "phrase": "speculative_updates"}, {"score": 0.003633464433320317, "phrase": "local_cache"}, {"score": 0.0035901685646972585, "phrase": "overflow_table"}, {"score": 0.003558034354882912, "phrase": "unbounded_updates"}, {"score": 0.0033914308417007316, "phrase": "specified_location"}, {"score": 0.0032814236411444022, "phrase": "stm-inspired_commit_protocol"}, {"score": 0.0032229262928681304, "phrase": "decentralized_manner"}, {"score": 0.0030997236644076196, "phrase": "implementation_tradeoffs"}, {"score": 0.003071965703296204, "phrase": "flextm's_versioning_and_conflict_detection_mechanisms"}, {"score": 0.002963390095037466, "phrase": "high-quality_software_tms"}, {"score": 0.0029018301277718415, "phrase": "hybrid_tms"}, {"score": 0.0027741761880779535, "phrase": "policy_flexibility"}, {"score": 0.0027246967293115343, "phrase": "distributed_commit_protocol"}, {"score": 0.0026680819883265574, "phrase": "aggressive_centralized_arbiter_mechanism"}, {"score": 0.0025583481578439894, "phrase": "aggressive_hardware_controller"}, {"score": 0.0025127084501976745, "phrase": "base_flextm_design"}, {"score": 0.002453116398642071, "phrase": "speculative_transaction_state"}, {"score": 0.0023949342544966916, "phrase": "hardware-software_approach"}, {"score": 0.0022895278869126848, "phrase": "overflow_region"}, {"score": 0.002262209824105154, "phrase": "metadata_cache"}, {"score": 0.0022419349154472806, "phrase": "speculative_data_replacements"}, {"score": 0.0021953290937408807, "phrase": "flextm-s's_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Synchronization", " Atomicity", " Transactional memory", " Version management", " Conflict detection", " FlexTM"], "paper_abstract": "We present FlexTM (FLEXible Transactional Memory), a high performance TM framework that allows software to determine when (eagerly, lazily, or in a mixed fashion) and how to manage conflicts, while employing hardware to manage transactional state and to track conflicts. FlexTM coordinates four decoupled hardware mechanisms: read and write signatures, which summarize per-thread access sets: per-thread conflict summary tables (CSTs), which identify the processors with which conflicts have occurred: Programmable Data isolation, which buffers speculative updates in the local cache and uses an overflow table to handle unbounded updates: and Alert-On-Update, which notifies a thread immediately when a specified location is written by another processor. The CSTs enable an STM-inspired commit protocol that manages conflicts in a decentralized manner (no global arbitration) and allows parallel commits. We explore the implementation tradeoffs associated with FlexTM's versioning and conflict detection mechanisms. Our results demonstrate that FlexTM exhibits similar to 5x speedup over high-quality software TMs, and similar to 1.8x speedup over hybrid TMs (those with software always in the loop), with no loss in policy flexibility. We find that the distributed commit protocol improves performance by 2%-14% over an aggressive centralized arbiter mechanism that also allows parallel commits. Finally, we compare the use of an aggressive hardware controller (as used in the base FlexTM design) to manage and to access any speculative transaction state overflowed from the cache, to a hardware-software approach dubbed FlexTM-S (FlexTM-Streamlined), where software manages the overflow region but uses a metadata cache to accelerate speculative data replacements and their subsequent accesses. We demonstrate that FlexTM-S's performance is within 10% of FlexTM's despite its substantially simpler virtualization mechanism. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Implementation tradeoffs in the design of flexible transactional memory support", "paper_id": "WOS:000281525100006"}