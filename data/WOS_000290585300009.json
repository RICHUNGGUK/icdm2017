{"auto_keywords": [{"score": 0.02679304367042305, "phrase": "false_alarms"}, {"score": 0.00481495049065317, "phrase": "computer_systems"}, {"score": 0.004645057834614705, "phrase": "proper_defense_mechanisms"}, {"score": 0.004597622380240611, "phrase": "intrusion_detection_systems"}, {"score": 0.004527371799277529, "phrase": "important_role"}, {"score": 0.004256895619944631, "phrase": "multivariant_execution"}, {"score": 0.004191829338769843, "phrase": "intrusion_detection_mechanism"}, {"score": 0.003782655283668953, "phrase": "identical_behavior"}, {"score": 0.00374399358035391, "phrase": "normal_execution_conditions"}, {"score": 0.0035021127041237887, "phrase": "detectable_differences"}, {"score": 0.0030017207229983385, "phrase": "monitoring_mechanism"}, {"score": 0.002910545717767559, "phrase": "kernel_privileges"}, {"score": 0.0027505037762786087, "phrase": "asynchronous_signals"}, {"score": 0.0026945086500597304, "phrase": "multithreaded_or_multiprocess_applications"}, {"score": 0.0023451553255837317, "phrase": "multivariant_execution_technique"}, {"score": 0.002262209824105154, "phrase": "code_injection_attacks"}, {"score": 0.0022275639370573264, "phrase": "empirical_results"}, {"score": 0.002193447487477984, "phrase": "dual-variant_execution"}, {"score": 0.0021049977753042253, "phrase": "multicore_processors"}], "paper_keywords": ["Intrusion detection", " multivariant execution", " n-variant execution", " system call"], "paper_abstract": "The number and complexity of attacks on computer systems are increasing. This growth necessitates proper defense mechanisms. Intrusion detection systems play an important role in detecting and disrupting attacks before they can compromise software. Multivariant execution is an intrusion detection mechanism that executes several slightly different versions, called variants, of the same program in lockstep. The variants are built to have identical behavior under normal execution conditions. However, when the variants are under attack, there are detectable differences in their execution behavior. At runtime, a monitor compares the behavior of the variants at certain synchronization points and raises an alarm when a discrepancy is detected. We present a monitoring mechanism that does not need any kernel privileges to supervise the variants. Many sources of inconsistencies, including asynchronous signals and scheduling of multithreaded or multiprocess applications, can cause divergence in behavior of variants. These divergences cause false alarms. We provide solutions to remove these false alarms. Our experiments show that the multivariant execution technique is effective in detecting and preventing code injection attacks. The empirical results demonstrate that dual-variant execution has on average 17 percent performance overhead when deployed on multicore processors.", "paper_title": "Runtime Defense against Code Injection Attacks Using Replicated Execution", "paper_id": "WOS:000290585300009"}