{"auto_keywords": [{"score": 0.03214200678593939, "phrase": "divergence_map"}, {"score": 0.00481495049065317, "phrase": "gpu_applications"}, {"score": 0.00475382761232911, "phrase": "increasing_programmability"}, {"score": 0.004693476992528682, "phrase": "high_computational_power"}, {"score": 0.004653667500876187, "phrase": "graphics_processing_units"}, {"score": 0.0045556080393342165, "phrase": "general_purpose_programming"}, {"score": 0.004459605573798577, "phrase": "full_benefit"}, {"score": 0.004402973626416765, "phrase": "execution_environment"}, {"score": 0.004347057700479576, "phrase": "challenging_task"}, {"score": 0.0039244530915794025, "phrase": "different_program_paths"}, {"score": 0.0033232673019931206, "phrase": "deep_understanding"}, {"score": 0.002754516260621121, "phrase": "dynamic_profiling_techniques"}, {"score": 0.0026394405584281443, "phrase": "open_source"}, {"score": 0.0026282000779095987, "phrase": "parallel_thread_execution_compiler"}, {"score": 0.002444254652283002, "phrase": "core_regions"}, {"score": 0.0023824468367751365, "phrase": "well-known_public_applications"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["GPU programming", " profiling", " CUDA", " divergence"], "paper_abstract": "The increasing programmability and the high computational power of graphics processing units make them attractive to general purpose programming. However, taking full benefit of this execution environment is a challenging task. One of these challenges stems from divergences, a phenomenon that occurs when threads that execute in lock-step are forced to take different program paths because of branches in the code. In face of divergences, some threads will have to wait, idly, while their diverging siblings execute. Optimizing the code to avoid divergences is difficult because this task demands a deep understanding of programs that might be large and convoluted. To facilitate the detection of divergences, this paper introduces the divergence map, a data structure that indicates the location and the volume of divergences in a program. We build this map via dynamic profiling techniques, which we have implemented on top of an open source Parallel Thread Execution compiler. To illustrate the importance of the divergence map, we have used it to pinpoint the core regions that must be optimized in well-known public applications. By hand optimizing some applications, we have added 911% speedups onto kernels that have already gone through the sieve of many programmers. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Profiling divergences in GPU applications", "paper_id": "WOS:000316418300002"}