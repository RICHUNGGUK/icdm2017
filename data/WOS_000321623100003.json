{"auto_keywords": [{"score": 0.049062712519921996, "phrase": "high_utility_itemsets"}, {"score": 0.009538134356778728, "phrase": "mining_algorithm"}, {"score": 0.008345643587225766, "phrase": "multiple_database_scans"}, {"score": 0.00730114316086127, "phrase": "utility_information"}, {"score": 0.004662427600500598, "phrase": "data_streams"}, {"score": 0.004612662942073808, "phrase": "high_utility_itemsets_mining"}, {"score": 0.004539005582217305, "phrase": "hot_topic"}, {"score": 0.004490552331642995, "phrase": "data_stream_mining"}, {"score": 0.00409895142748329, "phrase": "data_stream"}, {"score": 0.0038226070564362697, "phrase": "existing_algorithms"}, {"score": 0.003451766520526601, "phrase": "new_data_structure"}, {"score": 0.0030017207229983385, "phrase": "fixed_number"}, {"score": 0.002969628818856786, "phrase": "transaction_itemsets"}, {"score": 0.0027841357057119317, "phrase": "proposed_data_structure"}, {"score": 0.0027395968397212053, "phrase": "sliding_window_approach"}, {"score": 0.0026242699269026204, "phrase": "hum-ut"}, {"score": 0.0024209250169088575, "phrase": "transactional_data_streams"}, {"score": 0.002382182688788248, "phrase": "hum-ut_algorithm"}, {"score": 0.0022941723937662927, "phrase": "additional_database_scan"}, {"score": 0.0022696277881969896, "phrase": "experiment_results"}, {"score": 0.002209406458446019, "phrase": "better_performance"}, {"score": 0.0021392418081444798, "phrase": "different_experimental_conditions"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_algorithm"}], "paper_keywords": ["Data mining", " data streams", " frequent itemsets", " high utility itemsets"], "paper_abstract": "High utility itemsets mining is a hot topic in data stream mining. It is essential that the mining algorithm should be efficient in both time and space for data stream is continuous and unbounded. To the best of our knowledge, the existing algorithms require multiple database scans to mine high utility itemsets, and this hinders their efficiency. In this paper, we propose a new data structure, called UT-Tree (Utility on Tail Tree), for maintaining utility information of transaction itemsets to avoid multiple database scans. The UT-Tree is created with one database scan, and contains a fixed number of transaction itemsets; utility information is stored on tail-nodes only. Based on the proposed data structure and the sliding window approach, we propose a mining algorithm, called HUM-UT (High Utility itemsets Mining based on UT-Tree), to find high utility itemsets from transactional data streams. The HUM-UT algorithm mines high utility itemsets from the UT-Tree without additional database scan. Experiment results show that our algorithm has better performance and is more stable under different experimental conditions than the state-of-the-art algorithm HUPMS in terms of time and space.", "paper_title": "UT-Tree: Efficient mining of high utility itemsets from data streams", "paper_id": "WOS:000321623100003"}