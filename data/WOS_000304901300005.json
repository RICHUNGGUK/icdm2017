{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "static_pipelining"}, {"score": 0.004695900553353526, "phrase": "new_generation"}, {"score": 0.004618166136069052, "phrase": "mobile_applications"}, {"score": 0.004541712637353326, "phrase": "reduced_energy_consumption"}, {"score": 0.004429388453288922, "phrase": "execution_performance"}, {"score": 0.004007083686875716, "phrase": "conflicting_demands"}, {"score": 0.00390792986752692, "phrase": "innovative_statically_pipelined_processor"}, {"score": 0.0037795163893761027, "phrase": "optimizing_compiler"}, {"score": 0.003685972800046028, "phrase": "central_idea"}, {"score": 0.002594652434287807, "phrase": "simpler_hardware"}, {"score": 0.0022886952510350416, "phrase": "traditional_architectures"}, {"score": 0.00223196703759329, "phrase": "initial_results"}, {"score": 0.0021049977753042253, "phrase": "power_consumption"}], "paper_keywords": [""], "paper_abstract": "A new generation of mobile applications requires reduced energy consumption without sacrificing execution performance. In this paper, we propose to respond to these conflicting demands with an innovative statically pipelined processor supported by an optimizing compiler. The central idea of the approach is that the control during each cycle for each portion of the processor is explicitly represented in each instruction. Thus the pipelining is in effect statically determined by the compiler. The benefits of this approach include simpler hardware and that it allows the compiler to perform optimizations that are not possible on traditional architectures. The initial results indicate that static pipelining can significantly reduce power consumption without adversely affecting performance.", "paper_title": "An Overview of Static Pipelining", "paper_id": "WOS:000304901300005"}