{"auto_keywords": [{"score": 0.03862495247285584, "phrase": "mpc_abstractions"}, {"score": 0.023950749467471798, "phrase": "jvm_threads"}, {"score": 0.00481495049065317, "phrase": "linguistic_abstractions"}, {"score": 0.00476697427418509, "phrase": "message-passing_concurrency"}, {"score": 0.0046491050101721545, "phrase": "java_virtual_machine"}, {"score": 0.004602773636967002, "phrase": "efficient_mapping"}, {"score": 0.0043344943871281285, "phrase": "cpu"}, {"score": 0.0038819041309353024, "phrase": "polynomial_time"}, {"score": 0.0037106898330901534, "phrase": "local_characteristics"}, {"score": 0.003407549468745519, "phrase": "mapping_technique"}, {"score": 0.003290021031064687, "phrase": "panini"}, {"score": 0.0032571885279065126, "phrase": "akka"}, {"score": 0.003097865379563127, "phrase": "representative_mpc_frameworks"}, {"score": 0.002509284173541882, "phrase": "default_mapping_techniques"}, {"score": 0.0021802872319258977, "phrase": "communication_overheads"}, {"score": 0.0021049977753042253, "phrase": "cache_locality"}], "paper_keywords": ["Experimentation", " Performance", " MPC", " Multi-core", " Java", " JVM", " Thread Mapping"], "paper_abstract": "Efficient mapping of message passing concurrency (MPC) abstractions to Java Virtual Machine (JVM) threads is critical for performance, scalability, and CPU utilization; but tedious and time consuming to perform manually. In general, this mapping cannot be found in polynomial time, but we show that by exploiting the local characteristics of MPC abstractions and their communication patterns this mapping can be determined effectively. We describe our MPC abstraction to thread mapping technique, its realization in two frameworks (Panini and Akka), and its rigorous evaluation using several benchmarks from representative MPC frameworks. We also compare our technique against four default mapping techniques: thread-all, round-robin-task-all, random-task-all and work-stealing. Our evaluation shows that our mapping technique can improve the performance by 30%-60% over default mapping techniques. These improvements are due to a number of challenges addressed by our technique namely: i) balancing the computations across JVM threads, ii) reducing the communication overheads, iii) utilizing information about cache locality, and iv) mapping MPC abstractions to threads in a way that reduces the contention between JVM threads.", "paper_title": "Effectively Mapping Linguistic Abstractions for Message-Passing Concurrency to Threads on the Java Virtual Machine", "paper_id": "WOS:000367256500048"}