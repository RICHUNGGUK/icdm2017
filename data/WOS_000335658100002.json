{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asymptotic_parallel_time_complexity"}, {"score": 0.023092191011557423, "phrase": "data-dependent_algorithms"}, {"score": 0.008704851976156504, "phrase": "particular_parallel_computer"}, {"score": 0.007917848801242048, "phrase": "performance_order"}, {"score": 0.004743933823295797, "phrase": "scientific_research_community"}, {"score": 0.004605012887484129, "phrase": "high-performance_computing"}, {"score": 0.004550585106483935, "phrase": "also_everyday_life"}, {"score": 0.0044967977146747684, "phrase": "industry_algorithms"}, {"score": 0.004378078970574258, "phrase": "parallel_computers"}, {"score": 0.004339203636449911, "phrase": "efficient_and_economical_way"}, {"score": 0.004249825947483216, "phrase": "time-constrained_problems"}, {"score": 0.004088674329188, "phrase": "vested_interest"}, {"score": 0.004040324509631854, "phrase": "asymptotic_time_complexity"}, {"score": 0.0040163635646888645, "phrase": "parallel_algorithms"}, {"score": 0.003795677450778112, "phrase": "data_size"}, {"score": 0.0037174533606734897, "phrase": "main_other_parameters"}, {"score": 0.00368442237104581, "phrase": "challenging_problem"}, {"score": 0.003608482801645977, "phrase": "good_estimate"}, {"score": 0.003565791062038201, "phrase": "great_examples"}, {"score": 0.0033999985007372216, "phrase": "traveling_salesman_problem"}, {"score": 0.0032035208958667064, "phrase": "knowledge_discovery_methodology"}, {"score": 0.0031561961485589633, "phrase": "considerable_number"}, {"score": 0.003063627258654102, "phrase": "interactive_and_iterative_process"}, {"score": 0.002903771635043968, "phrase": "key_parameters"}, {"score": 0.0028779496327516634, "phrase": "time_complexity"}, {"score": 0.0027522340188241446, "phrase": "subsequent_improved_time_complexity_model"}, {"score": 0.0026714812866037584, "phrase": "new_data_sets"}, {"score": 0.002616364603666959, "phrase": "numerical_identification"}, {"score": 0.0025471636425006155, "phrase": "global_pruning_traveling_salesman_problem_implementation"}, {"score": 0.002428617044669043, "phrase": "performance_prediction"}, {"score": 0.002414191082427217, "phrase": "data-dependent_parallel_algorithms"}, {"score": 0.0023433334920926713, "phrase": "defined_knowledge_discovery_methodology"}, {"score": 0.0023224836187453954, "phrase": "subsequent_hypotheses"}, {"score": 0.002214370556271579, "phrase": "experimental_results"}, {"score": 0.0021946656099592608, "phrase": "expected_capability"}, {"score": 0.0021751356291518716, "phrase": "proposed_methodology"}, {"score": 0.002142970278347126, "phrase": "performance_time_order"}, {"score": 0.0021049977753042253, "phrase": "real_execution_time"}], "paper_keywords": ["Complexity", " Data-Dependent Algorithms", " Parallel Computing", " Performance Order"], "paper_abstract": "The scientific research community has reached a stage of maturity where its strong need for high-performance computing has diffused into also everyday life of engineering and industry algorithms. In efforts to satisfy this need, parallel computers provide an efficient and economical way to solve large-scale and/or time-constrained problems. As a consequence, the end-users of these systems have a vested interest in defining the asymptotic time complexity of parallel algorithms to predict their performance on a particular parallel computer. The asymptotic parallel time complexity of data-dependent algorithms depends on the number of processors, data size, and other parameters. Discovering the main other parameters is a challenging problem and the clue in obtaining a good estimate of performance order. Great examples of these types of applications are sorting algorithms, searching algorithms and solvers of the traveling salesman problem (TSP). This article encompasses all the knowledge discovery aspects to the problem of defining the asymptotic parallel time complexity of data-dependent algorithms. The knowledge discovery methodology begins by designing a considerable number of experiments and measuring their execution times. Then, an interactive and iterative process explores data in search of patterns and/or relationships detecting some parameters that affect performance. Knowing the key parameters which characterise time complexity, it becomes possible to hypothesise to restart the process and to produce a subsequent improved time complexity model. Finally, the methodology predicts the performance order for new data sets on a particular parallel computer by replacing a numerical identification. As a case of study, a global pruning traveling salesman problem implementation (GP-TSP) has been chosen to analyze the influence of indeterminism in performance prediction of data-dependent parallel algorithms, and also to show the usefulness of the defined knowledge discovery methodology. The subsequent hypotheses generated to define the asymptotic parallel time complexity of the TSP were corroborated one by one. The experimental results confirm the expected capability of the proposed methodology; the predictions of performance time order were rather good comparing with real execution time (in the order of 85%).", "paper_title": "Defining Asymptotic Parallel Time Complexity of Data-dependent Algorithms", "paper_id": "WOS:000335658100002"}