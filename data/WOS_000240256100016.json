{"auto_keywords": [{"score": 0.045112814636767376, "phrase": "previous_type_systems"}, {"score": 0.03600704009648377, "phrase": "type_inference"}, {"score": 0.00481495049065317, "phrase": "deadlock-free_processes"}, {"score": 0.004630910803911567, "phrase": "previous_type_system"}, {"score": 0.004119762981892093, "phrase": "reasonable_type_inference_algorithm"}, {"score": 0.003870541730075597, "phrase": "deadlock-_freedom"}, {"score": 0.0034700069041302003, "phrase": "new_type_system"}, {"score": 0.0029224275921964724, "phrase": "simply-typed_acalculus"}, {"score": 0.002745438358145758, "phrase": "deadlock-free_fragment"}, {"score": 0.002579140290642792, "phrase": "realistic_programs"}, {"score": 0.0024040357029838774, "phrase": "type_system"}, {"score": 0.00234834406550549, "phrase": "recursive_data_structures"}, {"score": 0.0021381565332182773, "phrase": "recent_release"}, {"score": 0.002105000283258511, "phrase": "typical"}], "paper_keywords": [""], "paper_abstract": "We extend a previous type system for the pi-calculus that guarantees deadlock-freedom. The previous type systems for deadlock-freedom either lacked a reasonable type inference algorithm or were not strong enough to ensure deadlock- freedom of processes using recursion. Although the extension is fairly simple, the new type system admits type inference and is much more expressive than the previous type systems that admit type inference. In fact, we show that the simply-typed Acalculus with recursion can be encoded into the deadlock-free fragment of our typed pi-calculus. To enable analysis of realistic programs, we also present an extension of the type system to handle recursive data structures like lists. Both extensions have already been incorporated into the recent release of TyPiCal, a type-based analyzer for the pi-calculus.", "paper_title": "A new type system for deadlock-free processes", "paper_id": "WOS:000240256100016"}