{"auto_keywords": [{"score": 0.03778413671149982, "phrase": "hyperdex"}, {"score": 0.004815072276957652, "phrase": "distributed"}, {"score": 0.004763895422211728, "phrase": "searchable_key-value_store"}, {"score": 0.004713379149462482, "phrase": "distributed_key-value_stores"}, {"score": 0.004613940521007727, "phrase": "standard_component"}, {"score": 0.004565007074039171, "phrase": "high-performance_web_services"}, {"score": 0.00439777299939725, "phrase": "key-value_stores"}, {"score": 0.0042820680211904235, "phrase": "scalability_advantages"}, {"score": 0.00421410521089045, "phrase": "traditional_databases"}, {"score": 0.004038076978795421, "phrase": "restricted_api"}, {"score": 0.003973971215091993, "phrase": "object_retrieval"}, {"score": 0.0033680968918579717, "phrase": "unique_search"}, {"score": 0.003261934055562238, "phrase": "secondary_attributes"}, {"score": 0.003210110095236981, "phrase": "key_insight"}, {"score": 0.0030923570058383355, "phrase": "hyperspace_hashing"}, {"score": 0.003010893527930816, "phrase": "multiple_attributes"}, {"score": 0.002931569771634119, "phrase": "multidimensional_hyperspace"}, {"score": 0.0028391271282216758, "phrase": "efficient_implementations"}, {"score": 0.0027495914857929584, "phrase": "primary_key"}, {"score": 0.0026771333996253783, "phrase": "partially-specified_secondary_attribute_searches"}, {"score": 0.002592693161475495, "phrase": "novel_chaining_protocol"}, {"score": 0.0025109095718850376, "phrase": "strong_consistency"}, {"score": 0.002431699464104896, "phrase": "fault_tolerance"}, {"score": 0.0023549822490693344, "phrase": "full_system"}, {"score": 0.0022564371868470236, "phrase": "cassandra"}, {"score": 0.002196944917134202, "phrase": "partially_specified_objects"}], "paper_keywords": ["Key-Value Store", " NoSQL", " Fault-Tolerance", " Strong Consistency", " Performance"], "paper_abstract": "Distributed key-value stores are now a standard component of high-performance web services and cloud computing applications. While key-value stores offer significant performance and scalability advantages compared to traditional databases, they achieve these properties through a restricted API that limits object retrieval an object can only be retrieved by the (primary and only) key under which it was inserted. This paper presents HyperDex, a novel distributed key-value store that provides a unique search primitive that enables queries on secondary attributes. The key insight behind HyperDex is the concept of hyperspace hashing in which objects with multiple attributes are mapped into a multidimensional hyperspace. This mapping leads to efficient implementations not only for retrieval by primary key, but also for partially-specified secondary attribute searches and range queries. A novel chaining protocol enables the system to achieve strong consistency, maintain availability and guarantee fault tolerance. An evaluation of the full system shows that HyperDex is 12-13x faster than Cassandra and MongoDB for finding partially specified objects. Additionally, HyperDex achieves 2-4x higher throughput for get/put operations.", "paper_title": "HyperDex: A Distributed, Searchable Key-Value Store", "paper_id": "WOS:000309217600003"}