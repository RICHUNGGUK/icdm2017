{"auto_keywords": [{"score": 0.0418534058206419, "phrase": "source_code"}, {"score": 0.015719716506582538, "phrase": "source-level_programming_tools"}, {"score": 0.014426801065831536, "phrase": "java_bytecode"}, {"score": 0.004706305193222972, "phrase": "transparent_program_transformations"}, {"score": 0.004600100053651545, "phrase": "managed_languages"}, {"score": 0.004496280772084575, "phrase": "platform-independent_intermediate_representation"}, {"score": 0.004354841111644036, "phrase": "relative_high_level"}, {"score": 0.004237138632255772, "phrase": "widespread_practice"}, {"score": 0.0040479661688863884, "phrase": "maintained_version"}, {"score": 0.0034813964296826973, "phrase": "transparent_persistence_architectures"}, {"score": 0.0031917943932454314, "phrase": "synchronize_objects"}, {"score": 0.0031627430133087616, "phrase": "stable_storage"}, {"score": 0.0030491497463386924, "phrase": "bytecode_level"}, {"score": 0.0028082176224611542, "phrase": "program's_runtime_behavior"}, {"score": 0.0027073229284666294, "phrase": "runtime_behavior"}, {"score": 0.0026582395558737855, "phrase": "original_source_code"}, {"score": 0.0024258208033731154, "phrase": "domain-specific_language"}, {"score": 0.0023386327847292805, "phrase": "source-level_programming_tool"}, {"score": 0.0022649119108225564, "phrase": "bytecode_enhancements"}, {"score": 0.0021049977753042253, "phrase": "source_code_editor"}], "paper_keywords": ["Languages", " Design", " Experimentation", " Domain-specific languages", " enhancement", " program transformation", " bytecode engineering", " debugging"], "paper_abstract": "Programs written in managed languages are compiled to a platform-independent intermediate representation, such as Java bytecode. The relative high level of Java bytecode has engendered a widespread practice of changing the bytecode directly, without modifying the maintained version of the source code. This practice, called bytecode engineering or enhancement, has become indispensable in transparently introducing various concerns, including persistence, distribution, and security. For example, transparent persistence architectures help avoid the entanglement of business and persistence logic in the source code by changing the bytecode directly to synchronize objects with stable storage. With functionality added directly at the bytecode level, the source code reflects only partial semantics of the program. Specifically, the programmer can neither ascertain the program's runtime behavior by browsing its source code, nor map the runtime behavior back to the original source code. This paper presents an approach that improves the utility of source-level programming tools by providing enhancement specifications written in a domain-specific language. By interpreting the specifications, a source-level programming tool can gain an awareness of the bytecode enhancements and improve its precision and usability. We demonstrate the applicability of our approach by making a source code editor and a symbolic debugger enhancements-aware.", "paper_title": "Enhancing Source-Level Programming Tools with An Awareness of Transparent Program Transformations", "paper_id": "WOS:000271211300017"}