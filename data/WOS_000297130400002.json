{"auto_keywords": [{"score": 0.03475676895688574, "phrase": "pricing_oracle"}, {"score": 0.016437076034817286, "phrase": "pricing_problem"}, {"score": 0.010612387000973441, "phrase": "generic_scheme"}, {"score": 0.009281103369616697, "phrase": "compact_formulation"}, {"score": 0.006995460323373166, "phrase": "root_node"}, {"score": 0.004747141873785, "phrase": "branching_scheme"}, {"score": 0.004647206916983993, "phrase": "column_generation_procedure"}, {"score": 0.004565529359523792, "phrase": "application_specific_and_generic_schemes"}, {"score": 0.004298367681427065, "phrase": "standard_branching"}, {"score": 0.0041485458333515, "phrase": "dantzig-wolfe_reformulation"}, {"score": 0.004003925104720979, "phrase": "multiple_identical_subsystems"}, {"score": 0.0039195744361570075, "phrase": "original_variable_space"}, {"score": 0.00378290546281883, "phrase": "application_specific_context"}, {"score": 0.0036380471217986065, "phrase": "wider_choice"}, {"score": 0.003100800861459349, "phrase": "generic_branching_scheme"}, {"score": 0.00285753732066807, "phrase": "subproblem_variables"}, {"score": 0.0027382698136572785, "phrase": "extended_formulation"}, {"score": 0.0027092368768921542, "phrase": "original_problem"}, {"score": 0.0026333078412549807, "phrase": "subproblem_solution"}, {"score": 0.002605384872894451, "phrase": "branching_constraints"}, {"score": 0.0025055037815033725, "phrase": "lagrangian_relaxation"}, {"score": 0.002426630714074822, "phrase": "limited_number"}, {"score": 0.002333586381274878, "phrase": "previously_proposed_approaches"}, {"score": 0.0022520931135078404, "phrase": "cutting_stock_and_bin_packing_problems"}, {"score": 0.0022124176057373365, "phrase": "first_branch-and-price_algorithm"}], "paper_keywords": ["Integer programming", " Dantzig-Wolfe reformulation", " Branch-and-price"], "paper_abstract": "Developing a branching scheme that is compatible with the column generation procedure can be challenging. Application specific and generic schemes have been proposed in the literature, but they have their drawbacks. One generic scheme is to implement standard branching in the space of the compact formulation to which the Dantzig-Wolfe reformulation was applied. However, in the presence of multiple identical subsystems, the mapping to the original variable space typically induces symmetries. An alternative, in an application specific context, can be to expand the compact formulation to offer a wider choice of branching variables. Other existing generic schemes for use in branch-and-price imply modifications to the pricing problem. This is a concern because the pricing oracle on which the method relies might become obsolete beyond the root node. This paper presents a generic branching scheme in which the pricing oracle of the root node remains of use after branching (assuming that the pricing oracle can handle bounds on the subproblem variables). The scheme does not require the use of an extended formulation of the original problem. It proceeds by recursively partitioning the subproblem solution set. Branching constraints are enforced in the pricing problem instead of being dualized via Lagrangian relaxation, and the pricing problem is solved by a limited number of calls to the pricing oracle. This generic scheme builds on previously proposed approaches and unifies them. We illustrate its use on the cutting stock and bin packing problems. This is the first branch-and-price algorithm capable of solving such problems to integrality without modifying the subproblem or expanding its variable space.", "paper_title": "Branching in branch-and-price: a generic scheme", "paper_id": "WOS:000297130400002"}