{"auto_keywords": [{"score": 0.04741605366089177, "phrase": "memory_accesses"}, {"score": 0.00481495049065317, "phrase": "array_interleaving-an"}, {"score": 0.004500414250942443, "phrase": "data_storage"}, {"score": 0.004430784015995566, "phrase": "significant_difference"}, {"score": 0.004250302819248558, "phrase": "wide_range"}, {"score": 0.004206338218873218, "phrase": "data-intensive_applications"}, {"score": 0.004034962424068988, "phrase": "modern_architectures"}, {"score": 0.003993216345115755, "phrase": "wide_memory_accesses"}, {"score": 0.003712796038920873, "phrase": "energy_efficiency"}, {"score": 0.003598705020845104, "phrase": "data_elements"}, {"score": 0.0035614563596982306, "phrase": "multiple_arrays"}, {"score": 0.0035245918797629804, "phrase": "contiguous_locations"}, {"score": 0.00339853518227171, "phrase": "spatial_locality"}, {"score": 0.0031928040608991543, "phrase": "right_set"}, {"score": 0.0031270239691197515, "phrase": "vector_registers"}, {"score": 0.0029530125680590413, "phrase": "global_analysis"}, {"score": 0.0029224275921964724, "phrase": "array_accesses"}, {"score": 0.002847339938387273, "phrase": "possibly_different_array_behavior"}, {"score": 0.0028178463431115562, "phrase": "different_loop_nests"}, {"score": 0.002702887319160532, "phrase": "data_layout_decisions"}, {"score": 0.002633425544817301, "phrase": "program_regions"}, {"score": 0.0025657442830956017, "phrase": "detailed_estimates"}, {"score": 0.002448260697722081, "phrase": "also_the_cost"}, {"score": 0.00239778324260337, "phrase": "actual_data_layout_modifications"}, {"score": 0.002311933249234786, "phrase": "vector_register_widths"}, {"score": 0.0022291501521610737, "phrase": "appropriate_granularity"}, {"score": 0.0021049977753042253, "phrase": "memory_energy"}], "paper_keywords": ["Design", " Data layout", " memory energy optimization", " SIMD architecture"], "paper_abstract": "Optimizations related to memory accesses and data storage make a significant difference to the performance and energy of a wide range of data-intensive applications. These techniques need to evolve with modern architectures supporting wide memory accesses. We investigate array interleaving, a data layout transformation technique that achieves energy efficiency by combining the storage of data elements from multiple arrays in contiguous locations, in an attempt to exploit spatial locality. The transformation reduces the number of memory accesses by loading the right set of data into vector registers, thereby minimizing redundant memory fetches. We perform a global analysis of array accesses, and account for possibly different array behavior in different loop nests that might ultimately lead to changes in data layout decisions for the same array across program regions. Our technique relies on detailed estimates of the savings due to interleaving, and also the cost of performing the actual data layout modifications. We also account for the vector register widths and the possibility of choosing the appropriate granularity for interleaving. Experiments on several benchmarks show a 6-34% reduction in memory energy due to the strategy.", "paper_title": "Array Interleaving-An Energy-Efficient Data Layout Transformation", "paper_id": "WOS:000357174900011"}