{"auto_keywords": [{"score": 0.04335242353897879, "phrase": "grammatical_evolution"}, {"score": 0.013646628051868434, "phrase": "proposed_framework"}, {"score": 0.01096922524729709, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "combinatorial_optimization_problems"}, {"score": 0.004759507166427077, "phrase": "generic_problem"}, {"score": 0.004632597963417253, "phrase": "diverse_set"}, {"score": 0.004544016163767266, "phrase": "challenging_task"}, {"score": 0.004388796812234033, "phrase": "hyper-heuristic_framework"}, {"score": 0.004304856672196293, "phrase": "effective_and_generic_solution_method"}, {"score": 0.00406250784433007, "phrase": "online_solver_builder"}, {"score": 0.0037170399498025215, "phrase": "perturbation_heuristics"}, {"score": 0.003674192201248236, "phrase": "evolved_templates"}, {"score": 0.0036459007842756983, "phrase": "improvement_heuristics"}, {"score": 0.0035761182400032487, "phrase": "complete_search_method"}, {"score": 0.0032341743028995265, "phrase": "carter"}, {"score": 0.0032092321991810456, "phrase": "itc"}, {"score": 0.003075584591849127, "phrase": "christofides"}, {"score": 0.003051901070840402, "phrase": "golden"}, {"score": 0.0028356575042385156, "phrase": "state-of-the-art_hyper-heuristics"}, {"score": 0.0027386335451725762, "phrase": "different_problem_domains"}, {"score": 0.0025842289219860795, "phrase": "adaptive_memory_mechanism"}, {"score": 0.0025054621733192283, "phrase": "high_quality"}, {"score": 0.002486147565139633, "phrase": "diverse_solutions"}, {"score": 0.002391779843744166, "phrase": "experimental_results"}, {"score": 0.002292097733181405, "phrase": "adaptive_memory"}, {"score": 0.0021796224306652326, "phrase": "improved_framework"}, {"score": 0.002146135455995725, "phrase": "bespoke_methodologies"}, {"score": 0.0021049977753042253, "phrase": "best_known_results"}], "paper_keywords": ["Grammatical evolution", " hyper-heuristics", " timetabling", " vehicle routing"], "paper_abstract": "Designing generic problem solvers that perform well across a diverse set of problems is a challenging task. In this work, we propose a hyper-heuristic framework to automatically generate an effective and generic solution method by utilizing grammatical evolution. In the proposed framework, grammatical evolution is used as an online solver builder, which takes several heuristic components (e. g., different acceptance criteria and different neighborhood structures) as inputs and evolves templates of perturbation heuristics. The evolved templates are improvement heuristics, which represent a complete search method to solve the problem at hand. To test the generality and the performance of the proposed method, we consider two well-known combinatorial optimization problems: exam timetabling (Carter and ITC 2007 instances) and the capacitated vehicle routing problem (Christofides and Golden instances). We demonstrate that the proposed method is competitive, if not superior, when compared to state-of-the-art hyper-heuristics, as well as bespoke methods for these different problem domains. In order to further improve the performance of the proposed framework we utilize an adaptive memory mechanism, which contains a collection of both high quality and diverse solutions and is updated during the problem solving process. Experimental results show that the grammatical evolution hyper-heuristic, with an adaptive memory, performs better than the grammatical evolution hyper-heuristic without a memory. The improved framework also outperforms some bespoke methodologies, which have reported best known results for some instances in both problem domains.", "paper_title": "Grammatical Evolution Hyper-Heuristic for Combinatorial Optimization Problems", "paper_id": "WOS:000327970300007"}