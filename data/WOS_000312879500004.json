{"auto_keywords": [{"score": 0.03471106580504896, "phrase": "derived_propagators"}, {"score": 0.006914988876649978, "phrase": "gecode"}, {"score": 0.00481495049065317, "phrase": "linear_constraints"}, {"score": 0.00471228691115201, "phrase": "unit_and_non-unit_coefficients_constraint_variants"}, {"score": 0.004230749292148046, "phrase": "better_performance"}, {"score": 0.004110831924517065, "phrase": "constraint_decomposition"}, {"score": 0.003798231095121328, "phrase": "propagator_variants"}, {"score": 0.003637822529522622, "phrase": "dedicated_propagator_implementations"}, {"score": 0.0029740732099993706, "phrase": "essential_properties"}, {"score": 0.0025021765811679446, "phrase": "type_conversion"}, {"score": 0.002362105010110277, "phrase": "implementation_architecture"}, {"score": 0.0022298571016688335, "phrase": "underlying_constraint_programming_system"}, {"score": 0.0021821915946356168, "phrase": "detailed_evaluation"}], "paper_keywords": ["Constraint propagation", " Constraint solver implementation", " Views", " Parametric propagators"], "paper_abstract": "When implementing a propagator for a constraint, one must decide about variants: When implementing min, should one also implement max Should one implement linear constraints both with unit and non-unit coefficients Constraint variants are ubiquitous: implementing them requires considerable (if not prohibitive) effort and decreases maintainability, but will deliver better performance than resorting to constraint decomposition. This paper shows how to use views to derive propagator variants, combining the efficiency of dedicated propagator implementations with the simplicity and effortlessness of decomposition. A model for views and derived propagators is introduced. Derived propagators are proved to be perfect in that they inherit essential properties such as correctness and domain and bounds consistency. Techniques for systematically deriving propagators such as transformation, generalization, specialization, and type conversion are developed. The paper introduces an implementation architecture for views that is independent of the underlying constraint programming system. A detailed evaluation of views implemented in Gecode shows that derived propagators are efficient and that views often incur no overhead. Views have proven essential for implementing Gecode, substantially reducing the amount of code that needs to be written and maintained.", "paper_title": "View-based propagator derivation", "paper_id": "WOS:000312879500004"}