{"auto_keywords": [{"score": 0.031908129382598634, "phrase": "test_frames"}, {"score": 0.015719716506582538, "phrase": "cpm_testing"}, {"score": 0.015607443749143106, "phrase": "prolog_programs"}, {"score": 0.015385373642640048, "phrase": "cpm"}, {"score": 0.014896670495382602, "phrase": "test_frame_reduction"}, {"score": 0.004745665541429529, "phrase": "category_partition_method"}, {"score": 0.004643594260262632, "phrase": "general_approach"}, {"score": 0.004610058444728656, "phrase": "specification-_based_program_testing"}, {"score": 0.004303252595782034, "phrase": "test_frame_refinement"}, {"score": 0.004195418010131832, "phrase": "new_information"}, {"score": 0.004165105357908494, "phrase": "test_frame_generation"}, {"score": 0.003916098498242888, "phrase": "implementation_related_knowledge"}, {"score": 0.0038877961007492646, "phrase": "alternative_information"}, {"score": 0.0038179283509963695, "phrase": "cpm_test_frames"}, {"score": 0.003681923235979914, "phrase": "call_patterns_semantics"}, {"score": 0.003525074461418428, "phrase": "call_patterns_analysis"}, {"score": 0.003290237137651949, "phrase": "updated_test_frames"}, {"score": 0.003070996252787868, "phrase": "\"uncared\"_data"}, {"score": 0.003037736332283186, "phrase": "original_set"}, {"score": 0.0028249975318149468, "phrase": "first_effect"}, {"score": 0.0027943943921568456, "phrase": "input_domain"}, {"score": 0.002675252546913683, "phrase": "procedure's_input_domain"}, {"score": 0.002255431275670053, "phrase": "test_case_generation"}, {"score": 0.002230984431056064, "phrase": "updated_set"}, {"score": 0.0021049977753042253, "phrase": "approximation_call_patterns_semantics"}], "paper_keywords": ["CPM testing", " prolog programs", " call patterns semantics", " test frame reduction", " test frame refinement"], "paper_abstract": "Category Partition Method (CPM) is a general approach to specification- based program testing, where test frame reduction and refinement are two important issues. Test frame reduction is necessary since too many test frames may be produced, and test frame refinement is important since during CPM testing new information about test frame generation may be achieved and considered incrementally. Besides the information provided by testers or users, implementation related knowledge offers alternative information for reducing and refining CPM test frames. This paper explores the idea by proposing a call patterns semantics based test frame updating method for Prolog programs, in which a call patterns analysis is used to collect information about the way in which procedures are used in a program. The updated test frames will be represented as constraints. The effect of our test frame updating is two-fold. On one hand, it removes \"uncared\" data from the original set of test frames; on the other hand, it refines the test frames to which we should pay more attention. The first effect makes the input domain on which a procedure must be tested a subset of the procedure's input domain, and the latter makes testers stand more chance to find out the faults that are more likely to show their presence in the use of the program under consideration. Our test frame updating method preserves the effectiveness of CPM testing with respect to the detection of faults we care. The test case generation from the updated set of test frames is also discussed. In order to show the applicability of our method an approximation call patterns semantics is proposed, and the test frame updating on the semantics is illustrated by an example.", "paper_title": "Test frame updating in CPM testing of Prolog programs", "paper_id": "WOS:000254850300007"}