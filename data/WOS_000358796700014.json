{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "adaptive_wavelet_collocation_method"}, {"score": 0.004682414867878963, "phrase": "parallel_adaptive_wavelet_collocation_method"}, {"score": 0.004579005794486596, "phrase": "large_class"}, {"score": 0.004528156929805637, "phrase": "partial_differential_equations"}, {"score": 0.004258372598568333, "phrase": "asynchronous_parallel_wavelet_transform"}, {"score": 0.00409508755819924, "phrase": "parallel_wavelet"}, {"score": 0.00389427992231721, "phrase": "highest_level"}, {"score": 0.003703282519292336, "phrase": "tree-like_structure"}, {"score": 0.003561205990687285, "phrase": "priori_defined_level"}, {"score": 0.0033301694494391612, "phrase": "dynamic_domain"}, {"score": 0.003166751241099304, "phrase": "minimum_quanta"}, {"score": 0.0029612292670237505, "phrase": "fully_automated_and_efficient_handling"}, {"score": 0.0029282926103224717, "phrase": "non-simply_connected_partitioning"}, {"score": 0.0028316582436089064, "phrase": "dynamic_load_balancing"}, {"score": 0.0027690086059100495, "phrase": "domain_repartitioning"}, {"score": 0.002722930209707764, "phrase": "grid_adaptation_step"}, {"score": 0.0026330549554033876, "phrase": "appropriate_processes"}, {"score": 0.0025892330566358503, "phrase": "approximately_the_same_number"}, {"score": 0.0024620842899061614, "phrase": "parallel_efficiency"}, {"score": 0.002354302193867031, "phrase": "parallel_adaptive_wavelet-based_coherent_vortex_simulations"}, {"score": 0.002251227801482381, "phrase": "effective_non-adaptive_resolutions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parallel algorithm", " Parallel computing", " Domain decomposition", " Dynamic load balancing", " Wavelets", " Lifting scheme", " Second generation wavelets", " Adaptive grid", " Multiresolution", " Multilevel method", " Multigrid method", " Numerical method", " Partial differential equations", " Elliptic problem"], "paper_abstract": "A parallel adaptive wavelet collocation method for solving a large class of Partial Differential Equations is presented. The parallelization is achieved by developing an asynchronous parallel wavelet transform, which allows one to perform parallel wavelet transform and derivative calculations with only one data synchronization at the highest level of resolution. The data are stored using tree-like structure with tree roots starting at a priori defined level of resolution. Both static and dynamic domain partitioning approaches are developed. For the dynamic domain partitioning, trees are considered to be the minimum quanta of data to be migrated between the processes. This allows fully automated and efficient handling of non-simply connected partitioning of a computational domain. Dynamic load balancing is achieved via domain repartitioning during the grid adaptation step and reassigning trees to the appropriate processes to ensure approximately the same number of grid points on each process. The parallel efficiency of the approach is discussed based on parallel adaptive wavelet-based Coherent Vortex Simulations of homogeneous turbulence with linear forcing at effective non-adaptive resolutions up to 2048(3) using as many as 2048 CPU cores. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Parallel adaptive wavelet collocation method for PDEs", "paper_id": "WOS:000358796700014"}