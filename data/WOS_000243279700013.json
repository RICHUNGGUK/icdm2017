{"auto_keywords": [{"score": 0.029664970002437303, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "maximally_separated_sets"}, {"score": 0.004625983640628956, "phrase": "n_points"}, {"score": 0.004364224683011796, "phrase": "maximally_separated_subset"}, {"score": 0.003955523458325766, "phrase": "decision_problem"}, {"score": 0.0034315678891900184, "phrase": "disk-intersection_graphs"}, {"score": 0.0033329590158056935, "phrase": "unit_disks"}, {"score": 0.0032371745435372168, "phrase": "disk-intersection_graph_g"}, {"score": 0.0031099353574309606, "phrase": "nonempty_intersection"}, {"score": 0.0030761074505030184, "phrase": "set_i"}, {"score": 0.0029123920023263446, "phrase": "independent_set"}, {"score": 0.0026201089205321704, "phrase": "linear-time_epsilon-approximation_algorithm"}, {"score": 0.0025447584328314754, "phrase": "exact_algorithms"}, {"score": 0.002272641094287882, "phrase": "recent_algorithm"}, {"score": 0.0022397131088479514, "phrase": "j._fiala"}, {"score": 0.0022234280592615756, "phrase": "j._algorithms"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_values"}], "paper_keywords": ["disk-intersection graphs", " independent set", " geometric optimization"], "paper_abstract": "Let S be a set of n points in R-2. Given an integer 1 <= k <= n, we wish to find a maximally separated subset I subset of S of size k; this is a subset for which the minimum among the ((k)(2)) pairwise distances between its points is as large as possible. The decision problem associated with this problem is to determine whether there exists I subset of S, | I| = k, so that all ((k)(2)) pairwise distances in I are at least 2. This problem can also be formulated in terms of disk-intersection graphs: Let D be the set of unit disks centered at the points of S. The disk-intersection graph G of D has as edges all pairs of disks with nonempty intersection. Any set I with the above properties is then the set of centers of disks that form an independent set in the graph G. This problem is known to be NP-complete if k is part of the input. In this paper we first present a linear-time epsilon-approximation algorithm for any constant k. Next we give exact algorithms for the cases k = 3 and k = 4 that run in time O(n(4/3)polylog(n)). We also present a simpler n(O(root k))-time exact algorithm ( as compared with the recent algorithm in [J. Alber and J. Fiala, J. Algorithms, 52 ( 2004), pp. 134 - 151]) for arbitrary values of k.", "paper_title": "Computing maximally separated sets in the plane", "paper_id": "WOS:000243279700013"}