{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "source_code"}, {"score": 0.010090765679650874, "phrase": "design_patterns"}, {"score": 0.0080001508463601, "phrase": "design_pattern"}, {"score": 0.007341521192897656, "phrase": "variant_implementations"}, {"score": 0.006770910109188164, "phrase": "design_pattern_instances"}, {"score": 0.005310305259619379, "phrase": "proposed_method"}, {"score": 0.004766388573192505, "phrase": "classification_approach"}, {"score": 0.004670722261414736, "phrase": "software_designers"}, {"score": 0.004530794611704416, "phrase": "software_design_phase"}, {"score": 0.004306795240631196, "phrase": "implementation_phase"}, {"score": 0.004156590395333602, "phrase": "challenging_issues"}, {"score": 0.004114641015648682, "phrase": "conformance_checking"}, {"score": 0.0034277338119963886, "phrase": "existing_system"}, {"score": 0.0033759367489122716, "phrase": "reverse_engineering_task"}, {"score": 0.0028120022457134267, "phrase": "new_method"}, {"score": 0.002727606388863445, "phrase": "design_pattern_detection_problem"}, {"score": 0.0026863605504566924, "phrase": "learning_problem"}, {"score": 0.0026457367614424756, "phrase": "proposed_design_pattern_detector"}, {"score": 0.0023301793939902015, "phrase": "open_source_codes"}, {"score": 0.002294929467537814, "phrase": "six_different_design_patterns"}, {"score": 0.002260211578368138, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design pattern detection", " Machine learning", " Support vector machine", " Object-oriented metrics"], "paper_abstract": "Nowadays, software designers attempt to employ design patterns in software design phase, but design patterns may be not used in the implementation phase. Therefore, one of the challenging issues is conformance checking of source code and design, i.e., design patterns. In addition, after developing a system, usually its documents are not maintained, so, identifying design pattern from source code can help to achieve the design of an existing system as a reverse engineering task. The variant implementations (i.e., different source codes) of a design pattern make hard to detect the design pattern instances from the source code. To address this issue, in this paper, we propose a new method which aims to map the design pattern detection problem into a learning problem. The proposed design pattern detector is made by learning from the information extracted from design pattern instances which normally include variant implementations. To evaluate the proposed method, we applied it on open source codes to detect six different design patterns. The experimental results show that the proposed method is promising and effective. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Source code and design conformance, design pattern detection from source code by classification approach", "paper_id": "WOS:000345517500028"}