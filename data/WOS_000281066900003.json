{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multiple_workflows"}, {"score": 0.004754600386388821, "phrase": "computational_grids"}, {"score": 0.004665483918844599, "phrase": "workflow_paradigm"}, {"score": 0.0036476222647061243, "phrase": "distributed_platforms"}, {"score": 0.00353426342004404, "phrase": "multiple_requisitions"}, {"score": 0.002980124909321296, "phrase": "multiple_workflow_scheduling_algorithms"}, {"score": 0.002609770322855842, "phrase": "schedule_length"}, {"score": 0.0024654516678953658, "phrase": "initial_schedule"}, {"score": 0.0023290951071300433, "phrase": "external_load"}, {"score": 0.002145535103990042, "phrase": "grid"}, {"score": 0.0021049977753042253, "phrase": "good_average_makespan"}], "paper_keywords": ["Grid computing", " Workflow", " Scheduling"], "paper_abstract": "The workflow paradigm has become the standard to represent processes and their execution flows. With the evolution of e-Science, workflows are becoming larger and more computational demanding. Such e-Science necessities match with what computational Grids have to offer. Grids are shared distributed platforms which will eventually receive multiple requisitions to execute workflows. With this, there is a demand for a scheduler which deals with multiple workflows in the same set of resources, thus the development of multiple workflow scheduling algorithms is necessary. In this paper we describe four different initial strategies for scheduling multiple workflows on Grids and evaluate them in terms of schedule length and fairness. We present results for the initial schedule and for the makespan after the execution with external load. From the results we conclude that interleaving the workflows on the Grid leads to good average makespan and provides fairness when multiple workflows share the same set of resources.", "paper_title": "Towards the Scheduling of Multiple Workflows on Computational Grids", "paper_id": "WOS:000281066900003"}