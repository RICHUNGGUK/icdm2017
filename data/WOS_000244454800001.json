{"auto_keywords": [{"score": 0.03871149933217833, "phrase": "feads"}, {"score": 0.023027782536146554, "phrase": "network_processors"}, {"score": 0.00481495049065317, "phrase": "application_design_space"}, {"score": 0.0046079260641779755, "phrase": "inherently_parallel_nature"}, {"score": 0.004567596860086148, "phrase": "network_processing_applications"}, {"score": 0.00440976345264104, "phrase": "application_tasks"}, {"score": 0.004294962474996283, "phrase": "memory_contention"}, {"score": 0.004238682850598745, "phrase": "major_challenges"}, {"score": 0.00416478405812793, "phrase": "full_performance_potential"}, {"score": 0.004056334733843591, "phrase": "large_variety"}, {"score": 0.004020813632357377, "phrase": "processor_architectures"}, {"score": 0.0039333604469462356, "phrase": "increasing_complexity"}, {"score": 0.0038989120088094185, "phrase": "network_applications"}, {"score": 0.0037311260623089436, "phrase": "novel_framework"}, {"score": 0.0034168317227203206, "phrase": "simulated_annealing_approach"}, {"score": 0.003372019835750424, "phrase": "design_space_exploration"}, {"score": 0.003342471131048328, "phrase": "application_mapping"}, {"score": 0.0033131804981786747, "phrase": "processor_resources"}, {"score": 0.003198554193075258, "phrase": "r-periodic_scheduling"}, {"score": 0.0031565959573536194, "phrase": "higher_throughput_schedules"}, {"score": 0.003101503914610488, "phrase": "dynamic_performance_metrics"}, {"score": 0.002994178996584381, "phrase": "realistic_workloads"}, {"score": 0.0029161225023394363, "phrase": "petri_net"}, {"score": 0.002802825862847951, "phrase": "architectural_resources"}, {"score": 0.0027417911324611917, "phrase": "constructed_schedule"}, {"score": 0.0025328377393370642, "phrase": "manual_scheduling"}, {"score": 0.0025106241866273897, "phrase": "linear_task_flow_graphs"}, {"score": 0.0024559368099486647, "phrase": "feads'_schedules"}, {"score": 0.0023192471808039746, "phrase": "manual_schedules"}, {"score": 0.0022787359717772976, "phrase": "static_scheduling"}, {"score": 0.002258745901862197, "phrase": "tasks_results"}, {"score": 0.0021049977753042253, "phrase": "task_scheduling"}], "paper_keywords": ["cyclic scheduling", " design space exploration", " network processor", " programming model", " performance Evaluation", " petri Nets"], "paper_abstract": "Network processors are designed to handle the inherently parallel nature of network processing applications. However, partitioning and scheduling of application tasks and data allocation to reduce memory contention remain as major challenges in realizing the full performance potential of a given network processor. The large variety of processor architectures in use and the increasing complexity of network applications further aggravate the problem. This work proposes a novel framework, called FEADS, for automating the task of application partitioning and scheduling for network processors. FEADS uses the simulated annealing approach to perform design space exploration of application mapping onto processor resources. Further, it uses cyclic and r-periodic scheduling to achieve higher throughput schedules. To evaluate dynamic performance metrics such as throughput and resource utilization under realistic workloads, FEADS automatically generates a Petri net (PN) which models the application, architectural resources, mapping and the constructed schedule and their interaction. The throughput obtained by schedules constructed by FEADS is comparable to that obtained by manual scheduling for linear task flow graphs; for more complicated task graphs, FEADS' schedules have a throughput which is upto 2.5 times higher compared to the manual schedules. Further, static scheduling of tasks results in an increase in throughput by upto 30% compared to an implementation of the same mapping without task scheduling.", "paper_title": "FEADS: A framework for exploring the application design space on network processors", "paper_id": "WOS:000244454800001"}