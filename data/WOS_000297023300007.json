{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multithreaded_optimization"}, {"score": 0.004766683200410046, "phrase": "dynamic_optimization"}, {"score": 0.004555371402128666, "phrase": "static_optimization"}, {"score": 0.004419703921314433, "phrase": "dynamic_binary_translation"}, {"score": 0.004266501496765747, "phrase": "system_performance"}, {"score": 0.00418134346679498, "phrase": "almost_all_the_existing_dynamic_optimization_techniques"}, {"score": 0.003995876175614403, "phrase": "single-threaded_executive_environment"}, {"score": 0.003799397093447221, "phrase": "striking_runtime_overhead"}, {"score": 0.003704797078215222, "phrase": "multithreaded_dbt_framework"}, {"score": 0.0036491673002304326, "phrase": "associated_hardware"}, {"score": 0.003594369823549604, "phrase": "mtcrossbit"}, {"score": 0.003522579870903474, "phrase": "helper_thread"}, {"score": 0.003452218803245602, "phrase": "hot_trace"}, {"score": 0.003233075944817365, "phrase": "main_thread"}, {"score": 0.003105168935158648, "phrase": "different_cores"}, {"score": 0.0030431198971423963, "phrase": "multi-core_resources"}, {"score": 0.002982307044758515, "phrase": "better_performance"}, {"score": 0.002750934994181092, "phrase": "dual-special-parallel_translation_caches"}, {"score": 0.002709589081384597, "phrase": "new_lock-free_threads_communication_mechanism-assembly_language_communication"}, {"score": 0.0024742098091226203, "phrase": "original_crossbit"}, {"score": 0.0022937210378944457, "phrase": "uniprocessor_machines"}], "paper_keywords": ["dynamic binary translator", " hot trace", " multithreaded framework", " parallelism", " multicore"], "paper_abstract": "Dynamic optimization has been proposed to overcome many limitations caused by static optimization and is widely applied in dynamic binary translation (DBT) to effectively enhance system performance. However, almost all the existing dynamic optimization techniques or methods employed in DBT systems for a single-threaded executive environment considerably increase the complexity of the hardware or the striking runtime overhead. We propose a multithreaded DBT framework with no associated hardware called the MTCrossBit, where a helper thread for building a hot trace is employed to significantly reduce the overhead. In addition, the main thread and helper thread are each assigned to different cores to use the multi-core resources efficiently to attain better performance, two novel methods yet to be implemented in the MTCrossBit are presented: the dual-special-parallel translation caches and the new lock-free threads communication mechanism-assembly language communication (ASLC). We then apply quantitative analysis to prove that MTCrossBit can speed up the original CrossBit. Simultaneously, we present results from the implementation of the MTCrossBit on the uniprocessor machines with multi-cores utilizing the benchmark-SPECint 2000, and illustrate that we achieved some success with the above concurrent architecture.", "paper_title": "MTCrossBit: A dynamic binary translation system based on multithreaded optimization", "paper_id": "WOS:000297023300007"}