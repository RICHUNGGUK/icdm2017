{"auto_keywords": [{"score": 0.04939815249833027, "phrase": "modern_processor"}, {"score": 0.02786321200972759, "phrase": "cc-cubing"}, {"score": 0.00481495049065317, "phrase": "cache-conscious_data_cube_computation"}, {"score": 0.0047013405841819025, "phrase": "data_cube_computation"}, {"score": 0.004634459424542272, "phrase": "important_problem"}, {"score": 0.004525088883501587, "phrase": "data_warehousing"}, {"score": 0.004482079525648026, "phrase": "olap"}, {"score": 0.003958439439112026, "phrase": "cache_behavior"}, {"score": 0.003773680962197766, "phrase": "cache-conscious_cubing_approach"}, {"score": 0.003632080001489739, "phrase": "data_cubes"}, {"score": 0.0034459835582278746, "phrase": "cache_performances"}, {"score": 0.003176899769744057, "phrase": "multiple_dimensions"}, {"score": 0.00311669276800628, "phrase": "partitioning_scheme"}, {"score": 0.003072285184441679, "phrase": "data_spatial_locality"}, {"score": 0.0029853535424953595, "phrase": "cache_lines"}, {"score": 0.0029569247903654477, "phrase": "software_prefetching_techniques"}, {"score": 0.002873247913129334, "phrase": "sorting_phase"}, {"score": 0.002752139271586703, "phrase": "data_scans"}, {"score": 0.0026742419973883134, "phrase": "cache-aware_method"}, {"score": 0.0025737890313763407, "phrase": "sort_algorithm"}, {"score": 0.002477100761241533, "phrase": "buc"}, {"score": 0.0024534993283766332, "phrase": "star-cubing"}, {"score": 0.0024301229420875155, "phrase": "mm-cubing"}, {"score": 0.0022401855403251653, "phrase": "thread-based_cc-cubing_smt_method"}, {"score": 0.0021049977753042253, "phrase": "single-threaded_cc-cubing_algorithm"}], "paper_keywords": ["data warehousing", " OLAP (online analytical processing)", " data cube computation", " cache-conscious", " SMT (simultaneous multithreading)"], "paper_abstract": "Data cube computation is an important problem in the field of data warehousing and OLAP (online analytical processing). Although it has been studied extensively in the past, most of its algorithms are designed without considering CPU and cache behavior. In this paper, we first propose a cache-conscious cubing approach called CC-Cubing to efficiently compute data cubes on a modern processor. This method can enhance CPU and cache performances. It adopts an integrated depth-first and breadth-first partitioning order and partitions multiple dimensions simultaneously. The partitioning scheme improves the data spatial locality and increases the utilization of cache lines. Software prefetching techniques are then applied in the sorting phase to hide the expensive cache misses associated with data scans. In addition, a cache-aware method is used in CC-Cubing to switch the sort algorithm dynamically. Our performance study shows that CC-Cubing outperforms BUC, Star-Cubing and MM-Cubing in most cases. Then, in order to fully utilize an SMT (simultaneous multithreading) processor, we present a thread-based CC-Cubing SMT method. This parallel method provides an improvement up to 27% for the single-threaded CC-Cubing algorithm.", "paper_title": "Cache-Conscious Data Cube Computation on a Modern Processor", "paper_id": "WOS:000268249500009"}