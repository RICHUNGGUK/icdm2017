{"auto_keywords": [{"score": 0.03355202817847117, "phrase": "trace_optimizations"}, {"score": 0.00481495049065317, "phrase": "bala_et_al"}, {"score": 0.004638602678192715, "phrase": "gal_et_al"}, {"score": 0.004468684611798047, "phrase": "mozilla_firefox's_javascript_engine"}, {"score": 0.00432798883489909, "phrase": "jit"}, {"score": 0.0041251561573501455, "phrase": "frequently-executed_paths"}, {"score": 0.004038076978795421, "phrase": "optimized_code"}, {"score": 0.003869373085652601, "phrase": "original_code"}, {"score": 0.003687960013746783, "phrase": "optimization_strategy"}, {"score": 0.0030595112110658675, "phrase": "traditional_optimization_techniques"}, {"score": 0.002947266048104005, "phrase": "trace_compiler"}, {"score": 0.0026486862281576086, "phrase": "traditional_compiler"}, {"score": 0.002470987929071079, "phrase": "incomparable_sets"}, {"score": 0.002405853977978678, "phrase": "imperative_calculus"}, {"score": 0.0022324489895237504, "phrase": "optimization_soundness"}, {"score": 0.0021049977753042253, "phrase": "sound_optimizations"}], "paper_keywords": ["Languages", " Theory", " just-in-time compilation", " compiler correctness", " bisimulation"], "paper_abstract": "The technique of trace-based just-in-time compilation was introduced by Bala et al. and was further developed by Gal et al. It currently enjoys success in Mozilla Firefox's JavaScript engine. A trace-based JIT compiler leverages run-time profiling to optimize frequently-executed paths while enabling the optimized code to \"bail out\" to the original code when the path has been invalidated. This optimization strategy differs from those of other JIT compilers and opens the question of which trace optimizations are sound. In this paper we present a framework for reasoning about the soundness of trace optimizations, and we show that some traditional optimization techniques are sound when used in a trace compiler while others are unsound. The converse is also true: some trace optimizations are sound when used in a traditional compiler while others are unsound. So, traditional and trace optimizations form incomparable sets. Our setting is an imperative calculus for which tracing is explicitly spelled out in the semantics. We define optimization soundness via a notion of bisimulation, and we show that sound optimizations lead to confluence and determinacy of stores.", "paper_title": "The Essence of Compiling with Traces", "paper_id": "WOS:000286472700047"}