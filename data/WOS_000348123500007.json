{"auto_keywords": [{"score": 0.04458003012492911, "phrase": "approximate_entity_extraction"}, {"score": 0.03947447987613366, "phrase": "jaccard_similarity"}, {"score": 0.036962449923098536, "phrase": "unified_method"}, {"score": 0.026798580238129824, "phrase": "high_performance"}, {"score": 0.00481495049065317, "phrase": "approximate_dictionary-based_entity_extraction"}, {"score": 0.004768378525561471, "phrase": "dictionary-based_entity_extraction"}, {"score": 0.004411588377842043, "phrase": "recent_trend"}, {"score": 0.0043477114072437316, "phrase": "extraction_recall"}, {"score": 0.0039447744176901054, "phrase": "existing_methods"}, {"score": 0.0037030390595465673, "phrase": "character-based_dissimilarity"}, {"score": 0.003631671435460452, "phrase": "edit_distance"}, {"score": 0.0033271045779740683, "phrase": "programing_efforts"}, {"score": 0.003278878522165815, "phrase": "hardware_requirements"}, {"score": 0.0030778231027679464, "phrase": "unified_framework"}, {"score": 0.0029458777184930896, "phrase": "cosine_similarity"}, {"score": 0.002917331114260319, "phrase": "dice_similarity"}, {"score": 0.002751751956416832, "phrase": "high-performance_requirement"}, {"score": 0.0026986685585382347, "phrase": "data_streams"}, {"score": 0.002646841595215392, "phrase": "twitter"}, {"score": 0.0025578967205807843, "phrase": "efficient_algorithms"}, {"score": 0.002331781764406665, "phrase": "shared_computation"}, {"score": 0.002264607102799332, "phrase": "unnecessary_redundant_computation"}, {"score": 0.0021780349459687622, "phrase": "efficient_filtering_algorithms"}, {"score": 0.0021464286727045623, "phrase": "effective_pruning_techniques"}, {"score": 0.002125612498781805, "phrase": "experimental_results"}], "paper_keywords": ["Approximate entity extraction", " Unified framework", " Filtering algorithms", " Pruning techniques"], "paper_abstract": "Dictionary-based entity extraction identifies predefined entities (e.g., person names or locations) from documents. A recent trend for improving extraction recall is to support approximate entity extraction, which finds all substrings from documents that approximately match entities in a given dictionary. Existing methods to address this problem support either token-based similarity (e.g., Jaccard Similarity) or character-based dissimilarity (e.g., Edit Distance). It calls for a unified method to support various similarity/dissimilarity functions, since a unified method can reduce the programing efforts, the hardware requirements, and the manpower. In this paper, we propose a unified framework to support various similarity/dissimilarity functions, such as jaccard similarity, cosine similarity, dice similarity, edit similarity, and edit distance. Since many real-world applications have high-performance requirement for approximate entity extraction on data streams (e.g., Twitter), we focus on devising efficient algorithms to achieve high performance. We find that many substrings in documents have overlaps, and we can utilize the shared computation across the overlaps to avoid unnecessary redundant computation. To this end, we propose efficient filtering algorithms and develop effective pruning techniques. Experimental results show our method achieves high performance and outperforms state-of-the-art studies significantly.", "paper_title": "A unified framework for approximate dictionary-based entity extraction", "paper_id": "WOS:000348123500007"}