{"auto_keywords": [{"score": 0.049648703742940926, "phrase": "data_processing"}, {"score": 0.00481495049065317, "phrase": "extensible_frameworks"}, {"score": 0.004665207830063741, "phrase": "mdp"}, {"score": 0.004623293817364921, "phrase": "modular"}, {"score": 0.004459190343665408, "phrase": "ubiquitous_task"}, {"score": 0.00441909542037375, "phrase": "scientific_research"}, {"score": 0.004223941453664225, "phrase": "appropriate_algorithms"}, {"score": 0.004055652445791872, "phrase": "software_implementations"}, {"score": 0.0038590090616766434, "phrase": "concrete_applications"}, {"score": 0.0035898158129721003, "phrase": "individual_processing_steps"}, {"score": 0.0035095935622207956, "phrase": "example_training"}, {"score": 0.0031773149810690494, "phrase": "visual_description"}, {"score": 0.0030922667860233603, "phrase": "modular_toolkit"}, {"score": 0.00298238929037041, "phrase": "open_source"}, {"score": 0.002968983606682159, "phrase": "python"}, {"score": 0.0028248293967214947, "phrase": "unified_framework"}, {"score": 0.0026157259734105, "phrase": "newer_features"}, {"score": 0.002592165248512232, "phrase": "mop"}, {"score": 0.002488724764295623, "phrase": "repetitive_tasks"}, {"score": 0.00233594452829104, "phrase": "parallel_computing"}, {"score": 0.002252880693912436, "phrase": "flexible_extension_mechanism"}, {"score": 0.0021337783230121286, "phrase": "bi-directional_data_flow"}], "paper_keywords": ["Machine learning", " Python", " Scientific computing", " Computational neuroscience"], "paper_abstract": "Data processing is a ubiquitous task in scientific research, and much energy is spent on the development of appropriate algorithms. It is thus relatively easy to find software implementations of the most common methods. On the other hand, when building concrete applications, developers are often confronted with several additional chores that need to be carried out beside the individual processing steps. These include for example training and executing a sequence of several algorithms, writing code that can be executed in parallel on several processors, or producing a visual description of the application. The Modular toolkit for Data Processing (MDP) is an open source Python library that provides an implementation of several widespread algorithms and offers a unified framework to combine them to build more complex data processing architectures. In this paper we concentrate on some of the newer features of MOP, focusing on the choices made to automatize repetitive tasks for users and developers. In particular, we describe the support for parallel computing and how this is implemented via a flexible extension mechanism. We also briefly discuss the support for algorithms that require bi-directional data flow. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Building extensible frameworks for data processing: The case of MDP, Modular toolkit for Data Processing", "paper_id": "WOS:000328297100005"}