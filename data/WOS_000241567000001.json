{"auto_keywords": [{"score": 0.03130891940123786, "phrase": "abstract_model"}, {"score": 0.013743575370529193, "phrase": "abstraction_efficiency"}, {"score": 0.009812668938904293, "phrase": "synchronous_onion_rings"}, {"score": 0.00481495049065317, "phrase": "ariadne's_bundle"}, {"score": 0.004757643419056999, "phrase": "multiple_threads"}, {"score": 0.004719816332271661, "phrase": "abstraction_refinement"}, {"score": 0.004608121749000898, "phrase": "scalable_abstraction-refinement_method"}, {"score": 0.004535124351828787, "phrase": "invariant_properties"}, {"score": 0.0044990584725586764, "phrase": "large_sequential_circuits"}, {"score": 0.004392565073466714, "phrase": "fine-grain_abstraction"}, {"score": 0.004288581530198804, "phrase": "abstract_counterexamples"}, {"score": 0.004237512575106522, "phrase": "shortest_length"}, {"score": 0.003943569631183138, "phrase": "concrete_model"}, {"score": 0.0038043055953253047, "phrase": "fully_automatic_techniques"}, {"score": 0.003611751858608048, "phrase": "maximal_abstraction_efficiency"}, {"score": 0.0035403060198952244, "phrase": "fine-grain_abstraction_approach"}, {"score": 0.0033745298175222056, "phrase": "large_combinational_logic_cones"}, {"score": 0.00334766260508788, "phrase": "boolean_network_variables"}, {"score": 0.0032423089921154503, "phrase": "state_variables"}, {"score": 0.0031028232755683674, "phrase": "refinement_algorithm"}, {"score": 0.0027631038845413393, "phrase": "global_guidance"}, {"score": 0.002730150696072947, "phrase": "abstraction_refinement_process"}, {"score": 0.002382987346529592, "phrase": "invisible_variables"}, {"score": 0.0022531762659857507, "phrase": "experimental_comparisons"}, {"score": 0.0021049977753042253, "phrase": "run_time"}], "paper_keywords": ["abstraction refinement", " binary decision diagram (BDD)", " formal verification", " model checking", " satisfiability (SAT)"], "paper_abstract": "The authors propose a scalable abstraction-refinement method for model checking invariant properties on large sequential circuits, which is based on fine-grain abstraction and simultaneous analysis of all abstract counterexamples of the shortest length. Abstraction efficiency is introduced to measure or a given abstraction-refinement algorithm how much of the concrete model is required to make the decision. The fully automatic techniques presented in this paper can efficiently reach or come near to the maximal abstraction efficiency. First, a fine-grain abstraction approach is given to keep the abstraction granularity small by breaking down large combinational logic cones with Boolean network variables (BNVs) and then treating both state variables and BNVs as atoms in abstraction. Second, a refinement algorithm is proposed based on an improved Ariadne's bundle(1) of synchronous onion rings on the abstract model, through which the transitions contain all shortest abstract counterexamples. The synchronous onion rings are exploited in two distinct ways to provide global guidance to the abstraction refinement process. The scalability of our algorithm is ensured in the sense that all the analysis and computation required in our refinement algorithm are conducted on the abstract model. Finally, we derive sequential don't cares from the invisible variables and use them to constrain the behavior of the abstract model. We conducted experimental comparisons of our new method with various existing techniques. The results show that our method outperforms other counterexample-guided methods in terms of both run time and abstraction efficiency.", "paper_title": "Improving Ariadne's bundle by following multiple threads in abstraction refinement", "paper_id": "WOS:000241567000001"}