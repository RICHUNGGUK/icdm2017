{"auto_keywords": [{"score": 0.027300940453606773, "phrase": "xpath"}, {"score": 0.00481495049065317, "phrase": "typed_iterators"}, {"score": 0.004772593750252861, "phrase": "xml._xml_transformations"}, {"score": 0.004627244470096107, "phrase": "xml_types"}, {"score": 0.0044863018460183784, "phrase": "xml_elements"}, {"score": 0.0038431888954930083, "phrase": "xml_documents"}, {"score": 0.002999823428906084, "phrase": "hard-coded_iterators"}, {"score": 0.0029471818883482688, "phrase": "fairly_standard_usage_scenarios"}, {"score": 0.002807118943000936, "phrase": "generic_language"}, {"score": 0.0027456676902333304, "phrase": "xml_data"}, {"score": 0.0026267609106294817, "phrase": "compilation_target"}, {"score": 0.0024688710065898646, "phrase": "statically_typed_host_programming_language"}, {"score": 0.0023935128386292966, "phrase": "product_types"}, {"score": 0.0023307492812556204, "phrase": "xml_processing_capabilities"}, {"score": 0.0022396694076443446, "phrase": "required_degree"}, {"score": 0.0021331586055770447, "phrase": "practical_impact"}], "paper_keywords": ["design", " languages", " theory", " XML", " iterators", " polymorphism", " subtyping"], "paper_abstract": "XML transformations are very sensitive to types: XML types describe the tags and attributes of XML elements as well as the number, kind, and order of their sub-elements. Therefore, operations, even simple ones, that modify these features may affect the types of documents. Operations on XML documents are performed by iterators that, to be useful, need to be typed by a kind of polymorphism that goes beyond what currently exists. For this reason these iterators are not programmed but, rather, hard-coded in the languages. However, this approach soon reaches its limits, as the hard-coded iterators cannot cover fairly standard usage scenarios. As a solution to this problem we propose a generic language to define iterators for XML data. This language can either be used as a compilation target (e.g., for XPATH) or it can be grafted on any statically typed host programming language (as long as this has product types) to endow it with XML processing capabilities. We show that our language mostly offers the required degree of polymorphism, study its formal properties, and show its expressiveness and practical impact by providing several usage examples and encodings.", "paper_title": "Typed iterators for XML", "paper_id": "WOS:000259436700004"}