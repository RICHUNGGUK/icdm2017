{"auto_keywords": [{"score": 0.043626296647104795, "phrase": "application_behavior"}, {"score": 0.014748872683775846, "phrase": "dynamic_profiling"}, {"score": 0.01095919136928511, "phrase": "profiling_methodologies"}, {"score": 0.00481495049065317, "phrase": "dynamic_profiling_mechanisms"}, {"score": 0.004778594263962987, "phrase": "sensor_networks"}, {"score": 0.004635881163634672, "phrase": "application-specific_tuning"}, {"score": 0.004600870784042767, "phrase": "wireless_sensor_networks"}, {"score": 0.0044634416051962545, "phrase": "accurate_view"}, {"score": 0.004412965940679449, "phrase": "application's_runtime_behavior"}, {"score": 0.0041374874583908535, "phrase": "environmental_conditions"}, {"score": 0.003908678575537341, "phrase": "significant_runtime_overheads"}, {"score": 0.0038207243221070166, "phrase": "sensor-specific_constraints"}, {"score": 0.0037774893672602506, "phrase": "profiling_requirements"}, {"score": 0.0036784938661226104, "phrase": "design_assistance"}, {"score": 0.0035957006001349915, "phrase": "appropriate_profiling_methodologies"}, {"score": 0.0035415392642831616, "phrase": "designer_productivity"}, {"score": 0.0034749794034364197, "phrase": "methodology_design_guidelines"}, {"score": 0.003435643372146385, "phrase": "extensive_evaluation"}, {"score": 0.0032332256013507072, "phrase": "network_traffic_overhead"}, {"score": 0.0031724417545242315, "phrase": "code_impacts"}, {"score": 0.0030892533800837463, "phrase": "energy_consumption_increases"}, {"score": 0.0029741713977710495, "phrase": "network_traffic"}, {"score": 0.002951673109860487, "phrase": "code_size"}, {"score": 0.002907184330345933, "phrase": "time_overheads"}, {"score": 0.0027048247303526583, "phrase": "overhead_variations"}, {"score": 0.002623881637290192, "phrase": "single_profiling_method"}, {"score": 0.002497470177389344, "phrase": "application-specific_profiling_methodology_customization"}, {"score": 0.0023771343615901185, "phrase": "profiler-customization_methodology"}, {"score": 0.0023412849215629986, "phrase": "code_generator_module"}, {"score": 0.0023235629819760018, "phrase": "overhead_estimation_module"}, {"score": 0.0022972306948217548, "phrase": "profile_data_management_module"}, {"score": 0.0021948455916770233, "phrase": "different_profiling_methodologies"}, {"score": 0.0021049977753042253, "phrase": "design_time"}], "paper_keywords": ["Adaptive algorithm", " dynamic profiling and optimization (DPOP)", " dynamic profiling", " embedded software", " wireless sensor networks (WSN)"], "paper_abstract": "To reduce the complexity associated with application-specific tuning of wireless sensor networks (WSNs), dynamic profiling enables an accurate view of an application's runtime behavior, such that the network can be reoptimized at runtime in response to changing application behavior or environmental conditions. However, the dynamic profiling must be able to accurately capture application behavior without incurring significant runtime overheads. Since application-and sensor-specific constraints dictate the profiling requirements and tolerated overheads, designers require design assistance to quickly evaluate and select appropriate profiling methodologies. To increase designer productivity, we formulate profiling methodology design guidelines based on extensive evaluation and analysis of a variety of profiling methodologies suitable for dynamically monitoring WSNs with respect to network traffic overhead, power, and code impacts associated with each method. While energy consumption increases are reasonable, ranging from 0.5% to 2.6%, network traffic, code size, and computation time overheads can be as high as 66.2%, 75.9%, and 136.6%, respectively. Our results show that these overhead variations are highly application specific, and a single profiling method is not suitable for all types of application behavior, thus necessitating, application-specific profiling methodology customization. To facilitate rapid development of these profiling methodologies, we present a profiler-customization methodology consisting of a code generator module, overhead estimation module, and profile data management module. Using our profiling-customization methodology, designers can rapidly evaluate the overhead of different profiling methodologies, and automatically integrate the most appropriate methodology into the application at design time.", "paper_title": "Application-Specific Customization of Dynamic Profiling Mechanisms for Sensor Networks", "paper_id": "WOS:000371388200022"}