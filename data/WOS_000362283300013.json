{"auto_keywords": [{"score": 0.03511498344372032, "phrase": "computational_performance"}, {"score": 0.03237737311784829, "phrase": "graph_twist"}, {"score": 0.00481495049065317, "phrase": "two-tier_optimizations"}, {"score": 0.004767826806287385, "phrase": "large-scale_real-world_graphs"}, {"score": 0.004606479650820579, "phrase": "vertex_degree_distribution"}, {"score": 0.004561386908745206, "phrase": "highly_skewed_edge_weight_distribution"}, {"score": 0.004516733575701128, "phrase": "existing_vertex-centric_iterative_graph_computation_models"}, {"score": 0.004195418010131832, "phrase": "parallel_execution"}, {"score": 0.004133940019630129, "phrase": "inherent_workload_imbalance"}, {"score": 0.004093453936415085, "phrase": "vertex_level"}, {"score": 0.003877737556673229, "phrase": "short_execution_time"}, {"score": 0.0038397509389856625, "phrase": "low-degree_vertices"}, {"score": 0.003428665921276366, "phrase": "insignificant_vertices"}, {"score": 0.0028016507334576216, "phrase": "big_graph"}, {"score": 0.002640781900605126, "phrase": "computation_tier"}, {"score": 0.0026148807877309417, "phrase": "graplawist"}, {"score": 0.0023928819778638055, "phrase": "computational_utility"}, {"score": 0.002357755095722877, "phrase": "graph_applications"}, {"score": 0.002233301265743633, "phrase": "iterative_graph_computations"}, {"score": 0.0022005118194652704, "phrase": "utility-aware_pruning_techniques"}, {"score": 0.0021049977753042253, "phrase": "introduced_error"}], "paper_keywords": [""], "paper_abstract": "Large-scale real-world graphs are known to have highly skewed vertex degree distribution and highly skewed edge weight distribution. Existing vertex-centric iterative graph computation models suffer from a number of serious problems: (1) poor performance of parallel execution due to inherent workload imbalance at vertex level; (2) inefficient CPU resource utilization clue to short execution time for low-degree vertices compared to the cost of in-memory or on-disk vertex access; and (3) incapability of pruning insignificant vertices or edges to improve the computational performance. In this paper, we address the above technical challenges by designing and implementing a scalable, efficient, and provably correct two-tier graph parallel processing system, Graph Twist. At storage and access tier, Graph Twist maximizes parallel efficiency by employing three graph parallel abstractions for partitioning a big graph by slice, strip or dice based partitioning techniques. At computation tier, Graplawist presents two utility-aware pruning strategies: slice pruning and cut pruning, to further improve the computational performance while preserving the computational utility defined by graph applications. Thenretie at alySIS is provided to quantitatively prove that iterative graph computations powered by utility-aware pruning techniques can achieve a very good approximation with bounds on the introduced error.", "paper_title": "GraphTwist: Fast Iterative Graph Computation with Two-tier Optimizations", "paper_id": "WOS:000362283300013"}