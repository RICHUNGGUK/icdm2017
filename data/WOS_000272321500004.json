{"auto_keywords": [{"score": 0.0426766154078814, "phrase": "system_state"}, {"score": 0.00481495049065317, "phrase": "basic_behavior_schemas"}, {"score": 0.004774937143916685, "phrase": "uml_class_diagrams"}, {"score": 0.004656871909510407, "phrase": "software_system"}, {"score": 0.004579780586951551, "phrase": "relevant_static_and_dynamic_aspects"}, {"score": 0.004485200522202792, "phrase": "dynamic_aspects"}, {"score": 0.004337900700685262, "phrase": "behavioral_schema"}, {"score": 0.004230595706156783, "phrase": "system_operations"}, {"score": 0.0036097844103129043, "phrase": "class_diagram"}, {"score": 0.0032381878248821383, "phrase": "manual_specification"}, {"score": 0.0031579997262619758, "phrase": "error-prone_and_time-consuming_activity"}, {"score": 0.002953711377604328, "phrase": "automatic_generation"}, {"score": 0.0029169007179202164, "phrase": "basic_behavior_schema"}, {"score": 0.0027974705482714884, "phrase": "static_aspects"}, {"score": 0.0027054473441439422, "phrase": "uml_class_diagram"}, {"score": 0.0026494723416072316, "phrase": "possible_dependencies"}, {"score": 0.002426717832834137, "phrase": "model-driven_development"}, {"score": 0.0023764959294052964, "phrase": "full_implementation"}, {"score": 0.002194929830604162, "phrase": "behavioral_specification"}, {"score": 0.0021049977753042253, "phrase": "improved_code_generation_phase"}], "paper_keywords": ["Behavior schema", " Operation", " Structural event", " Class diagram", " UML", " OCL"], "paper_abstract": "The specification of a software system must include all relevant static and dynamic aspects of the domain. Dynamic aspects are usually specified by means of a behavioral schema consisting of a set of system operations that the user may execute to update the system state. To be useful, such a set must be complete (i.e. through these operations, users should be able to modify the population of all elements in the class diagram) and executable (i.e. for each operation, there must exist a system state over which the operation can be successfully applied). A manual specification of these operations is an error-prone and time-consuming activity. Therefore, the aim of this paper is to present a strategy for the automatic generation of a basic behavior schema. Operations in the schema are drawn from the static aspects of the domain as defined in the UML class diagram and take into account possible dependencies among them to ensure the completeness and executability of the operations. We believe our approach is especially useful in a Model-Driven Development setting, where the full implementation of the system is derived from its specification. In this context, our approach facilitates the definition of the behavioral specification and ensures its quality obtaining, as a result, an improved code generation phase.", "paper_title": "Automatic generation of basic behavior schemas from UML class diagrams", "paper_id": "WOS:000272321500004"}