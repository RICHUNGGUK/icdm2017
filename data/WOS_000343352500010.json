{"auto_keywords": [{"score": 0.025325674119790528, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "object-oriented_systems"}, {"score": 0.004508661664944657, "phrase": "service-specific_groups"}, {"score": 0.004466519142879166, "phrase": "related_software_classes"}, {"score": 0.004362870617347183, "phrase": "oo_systems"}, {"score": 0.004201991568145053, "phrase": "better_software_comprehension"}, {"score": 0.004162703509434786, "phrase": "efficient_architecture_recovery"}, {"score": 0.004085221464783815, "phrase": "service_candidates"}, {"score": 0.004028054020045027, "phrase": "legacy_software"}, {"score": 0.0039716833701918365, "phrase": "service-oriented_architecture"}, {"score": 0.0038431888954930083, "phrase": "cloud-based_distributed_systems"}, {"score": 0.003684048704119722, "phrase": "novel_approach"}, {"score": 0.003649585593445665, "phrase": "automatic_module_extraction"}, {"score": 0.0035648266669315943, "phrase": "oo_software_systems"}, {"score": 0.0034171734618737436, "phrase": "weighted_and_directed_graph"}, {"score": 0.003369322866499541, "phrase": "software_system"}, {"score": 0.003081400693055518, "phrase": "clustering_algorithm"}, {"score": 0.0026633568650501873, "phrase": "positional_probabilities"}, {"score": 0.0026014425686078993, "phrase": "machine-learning-based_classification_system"}, {"score": 0.002493592357827492, "phrase": "real-world_oo_reference_system"}, {"score": 0.0024241817763927163, "phrase": "automatic_module_extraction_tool"}, {"score": 0.002248366278757655, "phrase": "highly_accurate_decompositions"}, {"score": 0.002196077907454079, "phrase": "authoritative_module_structures"}, {"score": 0.0021652891317252994, "phrase": "existing_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software architecture recovery", " Software modularization", " SOA"], "paper_abstract": "Developers apply object-oriented (OO) design principles to produce modular, reusable software. Therefore, service-specific groups of related software classes called modules arise in OO systems. Extracting the modules is critical for better software comprehension, efficient architecture recovery, determination of service candidates to migrate legacy software to a service-oriented architecture, and transportation of such services to cloud-based distributed systems. In this study, we propose a novel approach to automatic module extraction to identify services in OO software systems. In our approach, first we create a weighted and directed graph of the software system in which vertices and edges represent the classes and their relations, respectively. Then, we apply a clustering algorithm over the graph to extract the modules. We calculate the weight of an edge by considering its probability of being within a module or between modules. To estimate these positional probabilities, we propose a machine-learning-based classification system that we train with data gathered from a real-world OO reference system. We have implemented an automatic module extraction tool and evaluated the proposed approach on several open-source and industrial projects. The experimental results show that the proposed approach generates highly accurate decompositions that are close to authoritative module structures and outperforms existing methods. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A learning-based module extraction method for object-oriented systems", "paper_id": "WOS:000343352500010"}