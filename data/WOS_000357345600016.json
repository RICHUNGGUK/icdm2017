{"auto_keywords": [{"score": 0.04112289743676209, "phrase": "garbage_outputs"}, {"score": 0.010981971548445036, "phrase": "reversible_full_adders"}, {"score": 0.010320200322895344, "phrase": "partial_products"}, {"score": 0.009871819610497544, "phrase": "ancilla_inputs"}, {"score": 0.00481495049065317, "phrase": "binary_tree_data_structure"}, {"score": 0.004645959941491617, "phrase": "promising_computing_paradigm"}, {"score": 0.004563691742821759, "phrase": "quantum_computing"}, {"score": 0.004523103062368843, "phrase": "optical_computing"}, {"score": 0.004482873744893272, "phrase": "dissipationless_computing"}, {"score": 0.0044430006374681285, "phrase": "low-power_computing"}, {"score": 0.004344855841195913, "phrase": "reversible_logic"}, {"score": 0.004118026552723285, "phrase": "input_and_output_vectors"}, {"score": 0.004027031316965272, "phrase": "constant_ancilla_inputs"}, {"score": 0.003955679223407243, "phrase": "gate_functions"}, {"score": 0.0035851703423654432, "phrase": "primary_goal"}, {"score": 0.003505908076430666, "phrase": "existing_literature"}, {"score": 0.003397866151093552, "phrase": "reversible_multipliers"}, {"score": 0.0033227310662785293, "phrase": "reversible_half_adders"}, {"score": 0.003220315882881027, "phrase": "half_adders"}, {"score": 0.002905454531687249, "phrase": "binary_tree-based_design_methodology"}, {"score": 0.002815864555488112, "phrase": "proposed_binary_tree-based_design_methodology"}, {"score": 0.0026567282965815823, "phrase": "reversible_ripple_adders"}, {"score": 0.0026330549554033876, "phrase": "zero_ancilla_bit"}, {"score": 0.0026095920086044145, "phrase": "zero_garbage_bit"}, {"score": 0.0024953686545818587, "phrase": "garbage_bits"}, {"score": 0.002418393046947528, "phrase": "proposed_design_methodology"}, {"score": 0.0021334650920198715, "phrase": "reversible_signed_multiplier"}, {"score": 0.0021049977753042253, "phrase": "modified_baugh-wooley_multiplication_methodology"}], "paper_keywords": ["Reversible computing", " Arithmetic circuits", " Arithmetic logic unit (ALU)", " Baugh-Wooley multiplier", " Array multiplier", " Binary tree"], "paper_abstract": "Reversible logic has emerged as a promising computing paradigm having applications in quantum computing, optical computing, dissipationless computing and low-power computing, etc. In reversible logic there exists a one-to-one mapping between the input and output vectors. Reversible circuits require constant ancilla inputs for reconfiguration of gate functions and garbage outputs that help in keeping reversibility. Reversible circuits of many qubits are extremely difficult to realize; thus, reduction in the number of ancilla inputs and the garbage outputs is the primary goal of optimization. In existing literature, researchers have proposed several designs of reversible multipliers based on reversible full adders and reversible half adders. The use of reversible full adders and half adders for the addition of partial products increases the overhead in terms of the number of ancilla inputs and garbage outputs. This paper presents a binary tree-based design methodology for an reversible multiplier. The proposed binary tree-based design methodology for reversible multiplier performs the addition of partial products in parallel using the reversible ripple adders with zero ancilla bit and zero garbage bit; thereby, minimizing the number of ancilla and garbage bits used in the design. The proposed design methodology shows a 17.86-60.34 % improvement in terms of ancilla inputs; and 21.43-52.17 % in terms of garbage outputs compared to all the existing reversible multiplier designs. The methodology is also extended to the design of reversible signed multiplier based on modified Baugh-Wooley multiplication methodology.", "paper_title": "Reversible logic based multiplication computing unit using binary tree data structure", "paper_id": "WOS:000357345600016"}