{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_and_effective_distribution"}, {"score": 0.004527371799277529, "phrase": "internet_users"}, {"score": 0.004412654209742722, "phrase": "critical_task"}, {"score": 0.004191829338769843, "phrase": "\"windows_update"}, {"score": 0.004064653055162238, "phrase": "largest_update_services"}, {"score": 0.003861175855298779, "phrase": "general_guidelines"}, {"score": 0.00374399358035391, "phrase": "fast_and_effective_planet-scale_patch_dissemination_system"}, {"score": 0.003574830654211291, "phrase": "extensive_set"}, {"score": 0.003192700856094016, "phrase": "empirical_observations"}, {"score": 0.003160049822855747, "phrase": "analytical_results"}, {"score": 0.0030957429853133147, "phrase": "interesting_properties"}, {"score": 0.0030640804704319255, "phrase": "today's_update_traffic"}, {"score": 0.0028807718824400697, "phrase": "alternative_patch_delivery_strategies"}, {"score": 0.0026532596852754525, "phrase": "key_factors"}, {"score": 0.00250732953434891, "phrase": "server_workload"}, {"score": 0.002468938912850425, "phrase": "network_traffic"}, {"score": 0.0023694065215394593, "phrase": "patch_delivery"}, {"score": 0.0022973933270056743, "phrase": "invariant_properties"}, {"score": 0.002250601866422547, "phrase": "user_behavior"}, {"score": 0.0022275639370573264, "phrase": "architectural_characteristics"}, {"score": 0.0022047613106966723, "phrase": "today's_internet"}, {"score": 0.0021267708018655493, "phrase": "general_problem"}, {"score": 0.0021049977753042253, "phrase": "internet-wide_dissemination"}], "paper_keywords": ["management", " measurement", " performance", " design", " software updates", " peer-to-peer", " caching"], "paper_abstract": "Fast and effective distribution of software updates (a.k.a. patches) to millions of Internet users has evolved into a critical task over the last years. In this paper, we characterize \"Windows Update\", one of the largest update services in the world, with the aim to draw general guidelines on how to best design and architect a fast and effective planet-scale patch dissemination system. To this end, we analyze an extensive set of data traces collected over the period of a year, consisting of billions of queries from over 300 million computers. Based on empirical observations and analytical results, we identify interesting properties of today's update traffic and user behavior. Building on this analysis, we consider alternative patch delivery strategies such as caching and peer-to-peer and evaluate their performance. We identify key factors that determine the effectiveness of these schemes in reducing the server workload and the network traffic, and in speeding-up the patch delivery. Most of our findings are invariant properties induced by either user behavior or architectural characteristics of today's Internet, and thus apply to the general problem of Internet-wide dissemination of software updates.", "paper_title": "Planet scale software updates", "paper_id": "WOS:000241393000039"}