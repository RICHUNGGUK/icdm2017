{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "desktop_high_performance_computing"}, {"score": 0.0041703614123283165, "phrase": "high_performance_computing_platform"}, {"score": 0.00407161650109722, "phrase": "decoupled_style"}, {"score": 0.004023120753104693, "phrase": "tuple_space"}, {"score": 0.003789137457228946, "phrase": "message-passing_model"}, {"score": 0.003611751858608048, "phrase": "high_performance_computing"}, {"score": 0.0034841647157189985, "phrase": "tuple_space_model"}, {"score": 0.0034220655476652683, "phrase": "distributed_computing"}, {"score": 0.003321008590273796, "phrase": "architectural_consideration"}, {"score": 0.0032229262928681304, "phrase": "dtuples_platform"}, {"score": 0.0031654684543975077, "phrase": "dynamic_organization"}, {"score": 0.003109031770476385, "phrase": "computing_resources"}, {"score": 0.002790867657645595, "phrase": "computation_resources"}, {"score": 0.0025660347613972573, "phrase": "dtupleshpc._second"}, {"score": 0.0024901940672239784, "phrase": "simple_tuple_space_programming_model"}, {"score": 0.0021049977753042253, "phrase": "key_design_concepts"}], "paper_keywords": [""], "paper_abstract": "This paper introduces a Linda [2] like peer-to-peer tuple space middleware build on top of distributed hash table - DTuplesHPC. This tuple space middleware is capable of being a high performance computing platform. And the decoupled style of tuple space [1] model is used instead of the message-passing model that is widely used in MPI based high performance computing. With the help of tuple space model, the distributed computing can be liberated from architectural consideration. First, the DTuples platform allows the dynamic organization of the computing resources. That is to say, the job can be submitted at any time, but the computation resources may be ready later. The time and space are all decoupled in DTuplesHPC. Second, it brings the simple tuple space programming model to the large-scale high performance computing at desktop. In our design, the in(), rd(), out(), copy-collect() and eval() primitives are supported. In this paper, we present the key design concepts of the DTuples.", "paper_title": "DTuplesHPC: Distributed tuple space for desktop high performance computing", "paper_id": "WOS:000241449500034"}