{"auto_keywords": [{"score": 0.030133157825954923, "phrase": "pattern-based_designs"}, {"score": 0.00481495049065317, "phrase": "design_component_contracts"}, {"score": 0.004764542405129454, "phrase": "software_patterns"}, {"score": 0.00468991337957911, "phrase": "new_design_paradigm"}, {"score": 0.004402854153653114, "phrase": "particular_context"}, {"score": 0.004288472456976113, "phrase": "static_and_dynamic_structure"}, {"score": 0.004111584914709491, "phrase": "software_design"}, {"score": 0.004047141845635495, "phrase": "key_promise"}, {"score": 0.00398370478688858, "phrase": "pattern-based_approach"}, {"score": 0.0037793152987497286, "phrase": "software_systems"}, {"score": 0.003720060615588018, "phrase": "building_blocks"}, {"score": 0.0034555479218891638, "phrase": "significant_problems"}, {"score": 0.0032954888655173666, "phrase": "composed_systems"}, {"score": 0.0029346624184926305, "phrase": "formal_model"}, {"score": 0.0026689487424251907, "phrase": "formal_framework"}, {"score": 0.0025452314655691165, "phrase": "object-oriented_designs"}, {"score": 0.0025052769325080255, "phrase": "mathematically_rigorous_modeling"}, {"score": 0.0024789887640568093, "phrase": "analysis_techniques"}, {"score": 0.0024529757621396717, "phrase": "object-oriented_systems"}, {"score": 0.0023891283748647416, "phrase": "basic_building_blocks"}, {"score": 0.0023640560785711923, "phrase": "design_components"}, {"score": 0.002326938965568362, "phrase": "case_study"}, {"score": 0.0022783523466965187, "phrase": "hypermedia_web-based_application"}, {"score": 0.00218419478369074, "phrase": "distributed_systems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["component-based software design", " contract", " design pattern"], "paper_abstract": "Software patterns are a new design paradigm used to solve problems that arise when developing software within a particular context. Patterns capture the static and dynamic structure and collaboration among the components in a software design. A key promise of the pattern-based approach is that it may greatly simplify the construction of software systems out of building blocks and thus reuse experience and reduce cost. However, it also introduces significant problems in ensuring the integrity and reliability of these composed systems because of their complex software topologies, interactions and transactions. There is a need to capture these features as a contract through a formal model that allows us to analyze pattern-based designs. In this paper, we provide an overview of a formal framework for ensuring the integrity of the compositions in object-oriented designs by providing mathematically rigorous modeling and analysis techniques for object-oriented systems comprising pattern-based designs as the basic building blocks or design components. A case study related to a hypermedia Web-based application has been presented to illustrate our approach in distributed systems. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "Automating the analysis of design component contracts", "paper_id": "WOS:000234610800002"}