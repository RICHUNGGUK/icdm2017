{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "new_approach"}, {"score": 0.004760394308239882, "phrase": "automated_reasoning"}, {"score": 0.004706453355638515, "phrase": "higher-order_programs"}, {"score": 0.004626680470601208, "phrase": "symbolic_execution"}, {"score": 0.004548253531664032, "phrase": "behavioral_contracts"}, {"score": 0.0044967055264893184, "phrase": "symbolic_values"}, {"score": 0.0043953478557600565, "phrase": "symbolic_approximation"}, {"score": 0.004345525254560329, "phrase": "higher-order_behavior"}, {"score": 0.004081385289516914, "phrase": "abstract_reduction_semantics"}, {"score": 0.003989351600022163, "phrase": "operational_semantics"}, {"score": 0.003641433168173135, "phrase": "operational_interpretation"}, {"score": 0.0034004869983267085, "phrase": "executable_semantics"}, {"score": 0.00332375606483146, "phrase": "program_behavior"}, {"score": 0.003267342521938321, "phrase": "contract_failures"}, {"score": 0.003193606324727067, "phrase": "possible_instantiations"}, {"score": 0.0031573626285069157, "phrase": "symbolic_components"}, {"score": 0.002999274091205852, "phrase": "expressive_language"}, {"score": 0.002931569771634119, "phrase": "arbitrary_programs"}, {"score": 0.0028490783932465288, "phrase": "dependent_function_contracts"}, {"score": 0.0028006988338192375, "phrase": "recursive_contracts"}, {"score": 0.0027374647587075935, "phrase": "rich_language"}, {"score": 0.0026604207233593973, "phrase": "powerful_symbolic_reasoning"}, {"score": 0.0026302120935562568, "phrase": "existing_program_constructs"}, {"score": 0.0024700776739384977, "phrase": "contract_correctness"}, {"score": 0.002386869729952315, "phrase": "sound_and_computable_approximation"}, {"score": 0.0023064582783867667, "phrase": "fully_automated_contract_verification"}, {"score": 0.0021659920594094407, "phrase": "existing_programs"}, {"score": 0.0021049977753042253, "phrase": "contract-elimination_optimizations"}], "paper_keywords": ["Languages", " Theory", " Verification", " Higher-order contracts", " symbolic execution", " reduction semantics"], "paper_abstract": "We present a new approach to automated reasoning about higher-order programs by extending symbolic execution to use behavioral contracts as symbolic values, thus enabling symbolic approximation of higher-order behavior. Our approach is based on the idea of an abstract reduction semantics that gives an operational semantics to programs with both concrete and symbolic components. Symbolic components are approximated by their contract and our semantics gives an operational interpretation of contracts-as-values. The result is an executable semantics that soundly predicts program behavior, including contract failures, for all possible instantiations of symbolic components. We show that our approach scales to an expressive language of contracts including arbitrary programs embedded as predicates, dependent function contracts, and recursive contracts. Supporting this rich language of specifications leads to powerful symbolic reasoning using existing program constructs. We then apply our approach to produce a verifier for contract correctness of components, including a sound and computable approximation to our semantics that facilitates fully automated contract verification. Our implementation is capable of verifying contracts expressed in existing programs, and of justifying contract-elimination optimizations.", "paper_title": "Higher-Order Symbolic Execution via Contracts", "paper_id": "WOS:000311296200031"}