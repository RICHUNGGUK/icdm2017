{"auto_keywords": [{"score": 0.04706664181384449, "phrase": "pattern_language"}, {"score": 0.00481495049065317, "phrase": "pattern_language_verification"}, {"score": 0.004773476989344654, "phrase": "model_driven_design"}, {"score": 0.004210576688291019, "phrase": "model-driven_approach"}, {"score": 0.0038447018470115146, "phrase": "design_model"}, {"score": 0.003665874747419775, "phrase": "single_pattern"}, {"score": 0.003510507340837656, "phrase": "detected_patterns"}, {"score": 0.003405671497507337, "phrase": "semantic_aspects"}, {"score": 0.002888692115811987, "phrase": "presented_formalism"}, {"score": 0.0028390477456009568, "phrase": "case_study"}, {"score": 0.0027781870000242004, "phrase": "enterprise_architectural_patterns"}, {"score": 0.0025920406425973368, "phrase": "proposed_formalism"}, {"score": 0.002449997042686432, "phrase": "open_source"}, {"score": 0.0024393978073660757, "phrase": "modeling_tool"}, {"score": 0.002335889180060105, "phrase": "sample_web_application"}, {"score": 0.002236762786982225, "phrase": "walkthrough_scenarios"}, {"score": 0.0021233361369222344, "phrase": "designer_repair"}, {"score": 0.0021049977753042253, "phrase": "detected_problems"}], "paper_keywords": ["Model Driven Engineering", " Pattern Language Verification"], "paper_abstract": "This paper addresses the problem of verifying the application of a Pattern Language in a design that is built based upon the patterns of the language in a model-driven approach. We propose a process named Pattern Language Verifier (PLV) which consists of four phases, working on a design model, to (I) verify the structure of every single pattern, (2) verify the relationships between the detected patterns, (3) verify the semantic aspects of the patterns, and (4) report the problems and help the designer fix them. Building a PLV for a given Pattern Language, requires the structural, syntactic, and semantic rules of the language to be precisely defined using the presented formalism. For the case study, a group of enterprise architectural patterns is selected as the Pattern Language. The structural, syntactic, and semantic rules of the language are defined using the proposed formalism. A PLV is designed and implemented as an integration into an open source modeling tool. The tool is then utilized in designing a sample web application. The usefulness of the tool is represented by walkthrough scenarios that show finding the mistakes in the model and helping the designer repair the detected problems. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Pattern Language Verification in Model Driven Design", "paper_id": "WOS:000319533500023"}