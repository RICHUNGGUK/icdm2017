{"auto_keywords": [{"score": 0.046518682750576405, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "distributed_real-time_java"}, {"score": 0.0045820747375409435, "phrase": "real-time_distribution_middlewares"}, {"score": 0.004506968388996092, "phrase": "high-level_languages"}, {"score": 0.004312622975366672, "phrase": "industrial_systems"}, {"score": 0.004149429072483132, "phrase": "development_efforts"}, {"score": 0.003992385826251404, "phrase": "complex_networked_applications"}, {"score": 0.003841263262252044, "phrase": "better_development_tools"}, {"score": 0.0035978135115828837, "phrase": "rmi"}, {"score": 0.0035755653799043, "phrase": "particular_perspective"}, {"score": 0.003536346954940087, "phrase": "java's_distributed_technologies"}, {"score": 0.0033465923623290034, "phrase": "java's_remote_method_invocation"}, {"score": 0.00325555555110395, "phrase": "additional_support"}, {"score": 0.0032198357970567595, "phrase": "asynchronous_remote_invocations"}, {"score": 0.002789528662623221, "phrase": "synchronous_communications"}, {"score": 0.002261666793030715, "phrase": "proposed_model"}, {"score": 0.002175913488493802, "phrase": "empirical_evidences"}, {"score": 0.0021049977753042253, "phrase": "partial_proof"}], "paper_keywords": ["Distributed real-time Java", " real-time Java middleware", " real-time systems", " RT-remote method invocation (RMI)"], "paper_abstract": "More and more, the use of real-time distribution middlewares programmed with high-level languages like Java is becoming of interest for industrial systems because this type of infrastructures reduce development efforts required to both design and maintain complex networked applications. In that way towards having better development tools, this paper deals with the very specific issue of the asynchronism from the particular perspective of Java's distributed technologies. It proposes and evaluates an extension to the Java's Remote Method Invocation (RMI) with additional support for asynchronous remote invocations. Such a mechanism makes the transmission of some messages, typically those that do not require any confirmation from the server, much more efficient than synchronous communications, and consequently they optimize and speed up the performance of many industrial networked applications. In more detail, this paper concerns with the model itself and the set of changes it requires within their middleware programming interfaces and inside communication protocols to accommodate the proposed model. The proposal is supported by empirical evidences from a prototype developed as partial proof-of-concept.", "paper_title": "Simple Asynchronous Remote Invocations for Distributed Real-Time Java", "paper_id": "WOS:000268823700009"}