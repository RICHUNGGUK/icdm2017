{"auto_keywords": [{"score": 0.03810695834896041, "phrase": "dma"}, {"score": 0.010263140724199083, "phrase": "tcdm"}, {"score": 0.00481495049065317, "phrase": "scratchpad-based_multi-core_clusters"}, {"score": 0.004669180816745142, "phrase": "many-core_accelerators"}, {"score": 0.0041446453895708, "phrase": "tightly_coupled_data_memory"}, {"score": 0.0037792227071149985, "phrase": "higher_programming_effort"}, {"score": 0.003750260412839128, "phrase": "memory_transfers"}, {"score": 0.0035263833746562788, "phrase": "tcdm_copies"}, {"score": 0.003459191419478298, "phrase": "context_software_caches"}, {"score": 0.003328611206488653, "phrase": "local_tcdm"}, {"score": 0.003290403747743492, "phrase": "external_memory"}, {"score": 0.0031178024467857215, "phrase": "software_caches"}, {"score": 0.003070166825722112, "phrase": "non-negligible_overheads"}, {"score": 0.003000070450638437, "phrase": "cache_runtime"}, {"score": 0.002977061391551628, "phrase": "many-core_systems"}, {"score": 0.0027670642397888494, "phrase": "single_memory_word"}, {"score": 0.002662541169311738, "phrase": "software_cache_runtimes"}, {"score": 0.002631959004685823, "phrase": "good_example"}, {"score": 0.0026117657828249137, "phrase": "computer_vision_applications"}, {"score": 0.0025521085778978042, "phrase": "multi-byte_objects"}, {"score": 0.002427473263013356, "phrase": "software_cache_implementation"}, {"score": 0.0023995846112991625, "phrase": "stmicroelectronics_sthorm_acceleration_fabric"}, {"score": 0.002372015603684862, "phrase": "special_focus"}, {"score": 0.0023538120430501392, "phrase": "object-oriented_caching_techniques"}, {"score": 0.002273605493468005, "phrase": "global_overhead"}, {"score": 0.0022388390432214415, "phrase": "proposed_software_cache"}, {"score": 0.0021049977753042253, "phrase": "object-oriented_software_cache"}], "paper_keywords": ["Tightly-Coupled multi-core", " software cache", " Scratch-pad Memory", " thread-safe", " STHORM"], "paper_abstract": "A widely adopted design paradigm for many-core accelerators features processing elements grouped in clusters. Due to area, power and design simplicity, processors in the same clusters are often not equipped with data-caches but rather share a tightly coupled data memory (TCDM). Even if the use of a TCDM is more energy and area efficient than a cache, it requires a higher programming effort because memory transfers need to be explicitly managed (often with DMA-based off-chip memory to TCDM copies) . In this context software caches can be used to automatically transfer data between the local TCDM and the external memory, simplifying the task of the programmer. Despite their ease of use, software caches may incur in non-negligible overheads due to repeatedly invoking the cache runtime. Many-Core systems, however, are often used today for applications in which the unit of computation is not the single memory word but rather more complex data objects, opening room for optimization in software cache runtimes. A good example are computer vision applications, where the computation involves multi-byte objects (e.g feature descriptors). In this paper we present a software cache implementation for the STMicroelectronics STHORM acceleration fabric, with special focus on object-oriented caching techniques aimed at reducing as much as possible the global overhead introduced by the proposed software cache. Our software cache is validated by a set of experiments, and three case studies of Object-Oriented software cache for computer vision applications.", "paper_title": "A Novel Object-Oriented Software Cache for Scratchpad-Based Multi-Core Clusters", "paper_id": "WOS:000341693600005"}