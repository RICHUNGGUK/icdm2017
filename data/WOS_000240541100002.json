{"auto_keywords": [{"score": 0.04930986456658361, "phrase": "multiple-level_programming_environment"}, {"score": 0.015719716506582538, "phrase": "polynomial_arithmetic"}, {"score": 0.014664841853641758, "phrase": "implementation_techniques"}, {"score": 0.004028796143006953, "phrase": "lower_level_languages"}, {"score": 0.0038375280115736958, "phrase": "machine_arithmetic"}, {"score": 0.0036159990127332315, "phrase": "generic_programming"}, {"score": 0.00355782527287734, "phrase": "high-level_language"}, {"score": 0.0033888405252810927, "phrase": "polynomial_data_type_implementations"}, {"score": 0.003334309053314909, "phrase": "different_language_levels"}, {"score": 0.0032629623869308436, "phrase": "lisp"}, {"score": 0.003193129886123359, "phrase": "assembly."}, {"score": 0.0030086877092638945, "phrase": "different_levels"}, {"score": 0.0026423134393535265, "phrase": "computer_algebra_system"}, {"score": 0.0025440911575156755, "phrase": "polynomial_operation"}, {"score": 0.0024761702541879213, "phrase": "user_level"}, {"score": 0.0023712394008737958, "phrase": "language_level"}, {"score": 0.002295463032589125, "phrase": "specific_machine_architecture"}, {"score": 0.0021049977753042253, "phrase": "significant_manner"}], "paper_keywords": [""], "paper_abstract": "The purpose of this study is to investigate implementation techniques for polynomial arithmetic in a multiple-level programming environment. Indeed, certain polynomial data types and algorithms can further take advantage of the features of lower level languages, such as their specialized data structures or direct access to machine arithmetic. Whereas, other polynomial operations, like Grobner basis over an arbitrary field, are suitable for generic programming in a high-level language. We are interested in the integration of polynomial data type implementations realized at different language levels, such as LISP, C and ASSEMBLY. In particular, we consider situations for which code from different levels can be combined together within the same application in order to achieve high-performance. We have developed implementation techniques in the multiple-level programming environment provided by the computer algebra system AXIOM. For a given algorithm realizing a polynomial operation, available at the user level, we combine the strengths of each language level and the features of a specific machine architecture. Our experimentations show that this allows us to improve performances of this operation in a significant manner.", "paper_title": "Efficient implementation of polynomial arithmetic in a multiple-level programming environment", "paper_id": "WOS:000240541100002"}