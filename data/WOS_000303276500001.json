{"auto_keywords": [{"score": 0.049584128839210984, "phrase": "concurrency_control_algorithms"}, {"score": 0.04909435677365326, "phrase": "software_transactional_memories"}, {"score": 0.00481495049065317, "phrase": "analytical_modeling"}, {"score": 0.004594951819987416, "phrase": "commit-time-locking"}, {"score": 0.004477083974172596, "phrase": "analytical_performance_modeling_approach"}, {"score": 0.004141238989360548, "phrase": "realistic_execution_pattern"}, {"score": 0.003972504904621217, "phrase": "transactional_and_non-transactional_code_portions"}, {"score": 0.0035614563596982306, "phrase": "transactional_contexts"}, {"score": 0.0034519997658752598, "phrase": "detailed_approach"}, {"score": 0.00339853518227171, "phrase": "key_parameters"}, {"score": 0.00331125524068286, "phrase": "execution_cost"}, {"score": 0.0032769720645483102, "phrase": "transactional_and_non-transactional_operations"}, {"score": 0.003015143226706584, "phrase": "proposed_modeling_methodology"}, {"score": 0.002759769970554556, "phrase": "different_stm_concurrency_control_algorithms"}, {"score": 0.002579140290642792, "phrase": "commit-time-locking_algorithms"}, {"score": 0.002448260697722081, "phrase": "presented_analytical_model"}, {"score": 0.002385326947545194, "phrase": "simulation_results"}, {"score": 0.00234834406550549, "phrase": "workload_profiles"}, {"score": 0.0022524959504997303, "phrase": "stamp_benchmark_suite"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software Transactional Memories", " Performance evaluation", " Analytical models", " Concurrency control"], "paper_abstract": "We present an analytical performance modeling approach for concurrency control algorithms in the context of Software Transactional Memories (STMs). We consider a realistic execution pattern where each thread alternates the execution of transactional and non-transactional code portions. Our model captures dynamics related to the execution of both (i) transactional read/write memory accesses and (ii) non-transactional operations, even when they occur within transactional contexts. We rely on a detailed approach explicitly capturing key parameters, such as the execution cost of transactional and non-transactional operations, as well as the cost of begin, commit and abort operations. The proposed modeling methodology is general and extensible, lending itself to be easily specialized to capture the behavior of different STM concurrency control algorithms. In this work we specialize it to model the performance of Commit-Time-Locking algorithms, which are currently used by several STM systems. The presented analytical model has been validated against simulation results based on workload profiles derived by tracing applications proper of the STAMP benchmark suite, running on top of the TL2 transactional memory layer. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "On the analytical modeling of concurrency control algorithms for Software Transactional Memories: The case of Commit-Time-Locking", "paper_id": "WOS:000303276500001"}