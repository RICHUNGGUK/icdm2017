{"auto_keywords": [{"score": 0.04762987004578423, "phrase": "zombie_chasing"}, {"score": 0.010474923411434968, "phrase": "buffer_cache"}, {"score": 0.00481495049065317, "phrase": "dirty_data"}, {"score": 0.00462919213721188, "phrase": "novel_technique"}, {"score": 0.00450933377534525, "phrase": "efficient_flash_management"}, {"score": 0.004470071518923524, "phrase": "solid_state_drives"}, {"score": 0.004316396683332752, "phrase": "unique_characteristics"}, {"score": 0.004278807087784626, "phrase": "nand_flash_memory"}, {"score": 0.003937573222812911, "phrase": "trim_command"}, {"score": 0.003802135020791801, "phrase": "dead_data"}, {"score": 0.003752550907120244, "phrase": "file_deletions"}, {"score": 0.003438058620195309, "phrase": "new_liveness_state"}, {"score": 0.003305243635051068, "phrase": "live_data"}, {"score": 0.0031775430407770026, "phrase": "corresponding_dirty_data"}, {"score": 0.003068166587650604, "phrase": "new_zombie-aware_garbage_collection_algorithms"}, {"score": 0.002860546817196148, "phrase": "zombie-aware_garbage_collection_algorithms"}, {"score": 0.0027620516806198354, "phrase": "linux_kernel"}, {"score": 0.0026321198895843173, "phrase": "zombie_data"}, {"score": 0.0025638362414466278, "phrase": "comprehensive_evaluations"}, {"score": 0.0024007585788965655, "phrase": "ssd_performance"}, {"score": 0.002359046870732839, "phrase": "garbage_collection_overhead"}, {"score": 0.002287783663138828, "phrase": "tpc-c_benchmark"}, {"score": 0.0022579036318895753, "phrase": "oracle_dbms"}, {"score": 0.002161091339247561, "phrase": "tps"}, {"score": 0.0021049977753042253, "phrase": "negligible_overhead"}], "paper_keywords": ["Solid state drive (SSD)", " NAND flash memory", " flash translation layer (FTL)", " data liveness", " operating systems"], "paper_abstract": "This paper presents a novel technique, called Zombie Chasing, for efficient flash management in solid state drives (SSDs). Due to the unique characteristics of NAND flash memory, SSDs need to accurately understand the liveness of the data stored in themselves. Recently, the TRIM command has been introduced to notify SSDs of dead data caused by file deletions, which otherwise could not be tracked by SSDs. This paper goes one step further and proposes a new liveness state, called the zombie state, to denote live data that will be dead shortly due to the corresponding dirty data in the buffer cache. We also devise new zombie-aware garbage collection algorithms which utilize the information about such zombie data inside SSDs. To evaluate Zombie Chasing, we implement zombie-aware garbage collection algorithms in the prototype SSD and modify the Linux kernel and the Oracle DBMS to deliver the information on the zombie data to the prototype SSD. Through comprehensive evaluations using our in-house micro-benchmark and the TPC-C benchmark, we observe that Zombie Chasing improves SSD performance effectively by reducing garbage collection overhead. Especially, our evaluation with the TPC-C benchmark on the Oracle DBMS shows that Zombie Chasing enhances the Transactions Per Second (TPS) value by up to 22% with negligible overhead.", "paper_title": "Zombie Chasing: Efficient Flash Management Considering Dirty Data in the Buffer Cache", "paper_id": "WOS:000348053400021"}