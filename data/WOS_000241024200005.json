{"auto_keywords": [{"score": 0.032501446262619214, "phrase": "era"}, {"score": 0.004329630571352367, "phrase": "reactive_systems"}, {"score": 0.004129873531628877, "phrase": "important_features"}, {"score": 0.003986103192038901, "phrase": "eca_language"}, {"score": 0.0038930368103015467, "phrase": "reactive_and_reasoning_capabilities"}, {"score": 0.003626626504149897, "phrase": "complex_actions"}, {"score": 0.003378385493203297, "phrase": "declarative_semantics"}, {"score": 0.0026355812883224203, "phrase": "logic_programs"}, {"score": 0.002233301265743633, "phrase": "external_updates"}, {"score": 0.002155412043665635, "phrase": "self_updates"}], "paper_keywords": [""], "paper_abstract": "Event-Condition-Action (ECA) languages are an intuitive and powerful paradigm for programming reactive systems. Usually, important features for an ECA language are reactive and reasoning capabilities, the possibility to express complex actions and events, and a declarative semantics. In this paper, we introduce ERA, an ECA language based on, and extending the framework of logic programs updates that, together with these features, also exhibits capabilities to integrate external updates and perform self updates to its knowledge (data and classical rules) and behaviour (reactive rules).", "paper_title": "An event-condition-action logic programming language", "paper_id": "WOS:000241024200005"}