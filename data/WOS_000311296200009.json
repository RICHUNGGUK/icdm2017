{"auto_keywords": [{"score": 0.03232230463128067, "phrase": "phase-ordering_problem"}, {"score": 0.00481495049065317, "phrase": "compiler_optimization_phase-ordering_problem"}, {"score": 0.004773476989344654, "phrase": "machine_learning"}, {"score": 0.0047323590206695305, "phrase": "today's_compilers"}, {"score": 0.004492950096237056, "phrase": "correct_choice"}, {"score": 0.004377806391261418, "phrase": "significant_impact"}, {"score": 0.004120435930514554, "phrase": "correct_order"}, {"score": 0.003945879572348638, "phrase": "long_standing_problem"}, {"score": 0.003911862375084159, "phrase": "compilation_research"}, {"score": 0.003634262647873338, "phrase": "complicated_ways"}, {"score": 0.003602922164562919, "phrase": "traditional_compilers"}, {"score": 0.003465189575252443, "phrase": "fixed_order"}, {"score": 0.0030960762496815768, "phrase": "good_solution"}, {"score": 0.0029776614744264724, "phrase": "new_approach"}, {"score": 0.0029264925857346497, "phrase": "good_optimization_orderings"}, {"score": 0.0028513785049061767, "phrase": "dynamic_compiler"}, {"score": 0.002754208576828914, "phrase": "markov_process"}, {"score": 0.0026718978608934077, "phrase": "current_state"}, {"score": 0.0025696647013416863, "phrase": "better_solution"}, {"score": 0.0024288443150616056, "phrase": "artificial_neural_network"}, {"score": 0.0023664730217196252, "phrase": "beneficial_optimization"}, {"score": 0.002207851585508636, "phrase": "jikes_rvm"}, {"score": 0.002179313258573377, "phrase": "significant_improvements"}, {"score": 0.0021325650133686516, "phrase": "standard_java_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "well-engineered_fixed_order"}], "paper_keywords": ["Compilers", " Optimization", " Code generation", " Connectionism and neural nets", " Phase Ordering", " Compiler optimization", " Machine learning", " Neural Networks", " Java", " Jikes RVM", " Code Feature Generation"], "paper_abstract": "Today's compilers have a plethora of optimizations to choose from, and the correct choice of optimizations can have a significant impact on the performance of the code being optimized. Furthermore, choosing the correct order in which to apply those optimizations has been a long standing problem in compilation research. Each of these optimizations interacts with the code and in turn with all other optimizations in complicated ways. Traditional compilers typically apply the same set of optimization in a fixed order to all functions in a program, without regard the code being optimized. Understanding the interactions of optimizations is very important in determining a good solution to the phase-ordering problem. This paper develops a new approach that automatically selects good optimization orderings on a per method basis within a dynamic compiler. Our approach formulates the phase-ordering problem as a Markov process and uses a characterization of the current state of the code being optimized to creating a better solution to the phase ordering problem. Our technique uses neuro-evolution to construct an artificial neural network that is capable of predicting beneficial optimization ordering for a piece of code that is being optimized. We implemented our technique in Jikes RVM and achieved significant improvements on a set of standard Java benchmarks over a well-engineered fixed order.", "paper_title": "Mitigating the Compiler Optimization Phase-Ordering Problem using Machine Learning", "paper_id": "WOS:000311296200009"}