{"auto_keywords": [{"score": 0.03434145117173231, "phrase": "dispensable_svs"}, {"score": 0.012152235852365537, "phrase": "kernel_outputs"}, {"score": 0.00481495049065317, "phrase": "altering_performances"}, {"score": 0.004774115617883476, "phrase": "support_vector_machines"}, {"score": 0.004733625412289433, "phrase": "sv_machines"}, {"score": 0.004402973626416765, "phrase": "local_minima"}, {"score": 0.004291848822287492, "phrase": "largest_distance"}, {"score": 0.0042373381286051354, "phrase": "separating_hyperplane"}, {"score": 0.004112812699639956, "phrase": "solid_theoretical_foundation"}, {"score": 0.004043425116807282, "phrase": "svm"}, {"score": 0.003941215575554871, "phrase": "efficient_sequential_minimal_optimization"}, {"score": 0.0036501160751879784, "phrase": "similar_levels"}, {"score": 0.003468053168607071, "phrase": "overlapped_information"}, {"score": 0.003211788912325178, "phrase": "crosswise_propagation"}, {"score": 0.0029617414861784525, "phrase": "feature_space"}, {"score": 0.002924074850256874, "phrase": "svm_formulation"}, {"score": 0.002850168497994985, "phrase": "famous_smo-based_software"}, {"score": 0.002790004829699627, "phrase": "typical_kernels"}, {"score": 0.0027662954811372175, "phrase": "different_parameters"}, {"score": 0.0027311076665349657, "phrase": "data_sets"}, {"score": 0.0024547103576350233, "phrase": "experimental_results"}, {"score": 0.0024028742248152425, "phrase": "pruning_method"}, {"score": 0.00235213013487844, "phrase": "svms'_performances"}, {"score": 0.0021049977753042253, "phrase": "high-dimensional_feature_space"}], "paper_keywords": ["Architectures", " crosswise propagation (CP)", " high-dimensional feature space", " pruning", " support vector machines (SVMs)", " upper bound"], "paper_abstract": "Support vector machines (SV machines, SVMs) have many merits that distinguish themselves from many other machine-learning algorithms, such as the nonexistence of local minima, the possession of the largest distance from the separating hyperplane to the SVs, and a solid theoretical foundation. However, SVM training algorithms such as the efficient sequential minimal optimization (SMO) often produce many SVs. Some scholars have found that the kernel outputs are frequently of similar levels, which insinuate the redundancy of SVs. By analyzing the overlapped information of kernel outputs, a succinct separating-hyperplane-securing method for pruning the dispensable SVs based on crosswise propagation (CP) is systematically developed. The method also circumvents the problem of explicitly discerning SVs in feature space as the SVM formulation does. Experiments with the famous SMO-based software LibSVM reveal that all typical kernels with different parameters on the data sets contribute the dispensable SVs. Some 1% similar to 9% (in some scenarios, more than 50%) dispensable SVs are found. Furthermore, the experimental results also verify that the pruning method does not alter the SVMs' performances at all. As a corollary, this paper further contributes in theory a new lower upper bound on the number of SVs in the high-dimensional feature space.", "paper_title": "Pruning Support Vector Machines Without Altering Performances", "paper_id": "WOS:000260119900011"}