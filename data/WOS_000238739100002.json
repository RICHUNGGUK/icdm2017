{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "string_arguments"}, {"score": 0.03157244457765462, "phrase": "unique_match_sequence"}, {"score": 0.01433491142882286, "phrase": "generalization_process"}, {"score": 0.004726052718910578, "phrase": "least_general_generalization"}, {"score": 0.004667699745282977, "phrase": "lgg"}, {"score": 0.004071249707923223, "phrase": "specific_generalization"}, {"score": 0.003357435261066107, "phrase": "positive_examples"}, {"score": 0.00266693888510356, "phrase": "similar_parts"}, {"score": 0.002633941112839883, "phrase": "differing_parts"}, {"score": 0.0022542611024997474, "phrase": "coverage_algorithm"}, {"score": 0.0021049977753042253, "phrase": "match_sequences"}], "paper_keywords": ["inductive logic programming", " machine learning", " string generalization"], "paper_abstract": "The least general generalization (LGG) of strings may cause an over-generalization in the generalization process of the clauses of predicates with string arguments. We propose a specific generalization (SG) for strings to reduce over-generalization. SGs of strings are used in the generalization of a set of strings representing the arguments of a set of positive examples of a predicate with string arguments. In order to create a SG of two strings, first, a unique match sequence between these strings is found. A unique match sequence of two strings consists of similarities and differences to represent similar parts and differing parts between those strings. The differences in the unique match sequence are replaced to create a SG of those strings. In the generalization process, a coverage algorithm based on SGs of strings or learning heuristics based on match sequences are used.", "paper_title": "Generalizing predicates with string arguments", "paper_id": "WOS:000238739100002"}