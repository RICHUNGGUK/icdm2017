{"auto_keywords": [{"score": 0.03217160122346607, "phrase": "worse_case"}, {"score": 0.030826052653415044, "phrase": "context_switching"}, {"score": 0.029420333683948783, "phrase": "miss_rate"}, {"score": 0.00481495049065317, "phrase": "tlb_context_switching_miss_ratio"}, {"score": 0.004682288586254123, "phrase": "address_translations"}, {"score": 0.004645057834614705, "phrase": "virtual_addresses"}, {"score": 0.004608121749000898, "phrase": "physical_addresses"}, {"score": 0.0044277810648955624, "phrase": "memory_system_performance"}, {"score": 0.00423751446432394, "phrase": "tlb"}, {"score": 0.004120694410890683, "phrase": "different_methodologies"}, {"score": 0.004039221742250308, "phrase": "tlb_misses"}, {"score": 0.0038965930422333035, "phrase": "total_size"}, {"score": 0.0036993855514735746, "phrase": "fully_associativity"}, {"score": 0.0034702685641070283, "phrase": "operating_system"}, {"score": 0.003255295296893174, "phrase": "context_switching_issue"}, {"score": 0.0031402604946939743, "phrase": "address_space_identifier"}, {"score": 0.0031028232755683674, "phrase": "tlb_tags"}, {"score": 0.002841545331522694, "phrase": "banked_tlb_structure"}, {"score": 0.002818909613625567, "phrase": "prefetching_mechanism"}, {"score": 0.0025405019456703325, "phrase": "proposed_mechanism"}, {"score": 0.0025101968585850474, "phrase": "acceptable_performance_improvement"}, {"score": 0.0023079225317714815, "phrase": "proposed_architecture"}], "paper_keywords": ["TLB", " operating system", " context switching", " virtual memory", " address translation"], "paper_abstract": "Address translations from virtual addresses to physical addresses are widely considered as one of the most important issue for memory system performance. In order to improve the performance, the Translation Lookaside Buffer (TLB) is used. Lots of different methodologies are proposed to reduce TLB misses. Most designs just simply try to increase the total size of their TLBs to reduce the capacity misses or just simply use the fully associativity to reduce the conflict misses. Furthermore, some designs even try to incorporate the operating system (OS) and TLBs with very complex methods. Only some studies consider influence of performance on the context switching issue. Most traditional designs just simply added some types of address space identifier within the TLB tags. Nevertheless, the worse case of all is the x86 architecture which flushes all its TLB entries on context switching. This paper proposes a banked TLB structure with prefetching mechanism to reduce the miss rate in context switching for 32K page size. All simulations were done with modified SimpleScalar 3.0d tool suite and SPEC95 benchmarks. The results show that the proposed mechanism can provide acceptable performance improvement than the worse case x86 style design. The miss rate may even be only 1/10 or less. Thus, the proposed architecture may be suitable to be implemented inside processors to reduce the context switching misses. Furthermore, we'll try to implement it inside our new asynchronous processor.", "paper_title": "Reducing the TLB Context Switching Miss Ratio With Banked and Prefetching Mechanism", "paper_id": "WOS:000261206300017"}