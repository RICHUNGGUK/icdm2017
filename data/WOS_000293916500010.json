{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "role_graph_model"}, {"score": 0.004645057834614705, "phrase": "access_control"}, {"score": 0.004401342842183475, "phrase": "exceptional_circumstances"}, {"score": 0.0042459818200777846, "phrase": "regular_user"}, {"score": 0.0033914308417007316, "phrase": "security_design"}, {"score": 0.00333097896868937, "phrase": "static_delegation"}, {"score": 0.0032132782979796895, "phrase": "unforseen_circumstances"}, {"score": 0.003071965703296204, "phrase": "dynamic_delegation"}, {"score": 0.002543043781904587, "phrase": "runtime_events"}, {"score": 0.0023877593141554353, "phrase": "rgm."}, {"score": 0.0021821915946356168, "phrase": "rbac_models"}, {"score": 0.0021049977753042253, "phrase": "edge-labeling_method"}], "paper_keywords": ["Access controls", " security", " integrity", " protection"], "paper_abstract": "Delegation in access control is used to deal with exceptional circumstances, when a regular user is unable to perform their normal job and delegates all or part of it to others. These situations can be anticipated and built into the security design as static delegation; however, unforseen circumstances can still occur requiring dynamic delegation to be specified at runtime. This paper presents both static and dynamic delegation in the context of the Role Graph Model. To properly capture runtime events, we add sessions to the RGM. We then introduce session-oriented, dynamic delegation, a new concept in RBAC models, using an edge-labeling method. Constraints applicable to both static and dynamic delegation are examined.", "paper_title": "Static and Dynamic Delegation in the Role Graph Model", "paper_id": "WOS:000293916500010"}