{"auto_keywords": [{"score": 0.02478478650470629, "phrase": "microsoft"}, {"score": 0.00481495049065317, "phrase": "high_dependability"}, {"score": 0.004731928080086235, "phrase": "distributed_workload_execution"}, {"score": 0.004630150894006861, "phrase": "historical_information"}, {"score": 0.00428146713705618, "phrase": "reputation-based_task_scheduling_strategy"}, {"score": 0.003993544228876303, "phrase": "best-effort_oriented_tasks"}, {"score": 0.0038906171474520756, "phrase": "execution-related_constraints"}, {"score": 0.0038568987435766014, "phrase": "available_data_services"}, {"score": 0.003581797255879607, "phrase": "task_scheduling"}, {"score": 0.003535320700255283, "phrase": "candidate_service"}, {"score": 0.0033699898113395328, "phrase": "task_execution"}, {"score": 0.0032546105164772995, "phrase": "task's_execution_objective"}, {"score": 0.003170667618004276, "phrase": "high_performance"}, {"score": 0.0031159081999910694, "phrase": "specified_requirements"}, {"score": 0.0030754582519753474, "phrase": "election_mechanism"}, {"score": 0.0029961221584602405, "phrase": "candidate_services"}, {"score": 0.002770150086489194, "phrase": "task's_execution_time"}, {"score": 0.0026986685585382347, "phrase": "candidate_classification_mechanisms"}, {"score": 0.0025500402081330394, "phrase": "dependability_degradation"}, {"score": 0.0024950747439601863, "phrase": "malicious_or_erroneous_services"}, {"score": 0.0024519545383399773, "phrase": "proposed_strategies"}, {"score": 0.0022768346311104735, "phrase": "benchmark_data"}, {"score": 0.002237477619351199, "phrase": "obtained_results"}, {"score": 0.0021987994275190314, "phrase": "proposed_scheduling_mechanism"}, {"score": 0.0021607883988873492, "phrase": "highly_dependable_and_efficient_system"}, {"score": 0.0021049977753042253, "phrase": "malicious_or_erroneous_data_services"}], "paper_keywords": ["Distributed databases", " scheduling", " dependability", " reputation"], "paper_abstract": "Reputation systems use historical information about a service as the basis to predict its future behavior. In this work, we present a reputation-based task scheduling strategy for distributed database systems, which efficiently schedules workloads composed (or not) by best-effort oriented tasks and by tasks that have execution-related constraints. Available data services may participate in an election to choose the service that would execute each task. During task scheduling, each candidate service commits itself to satisfy some requirements or to finish a task execution by a certain time, depending on the task's execution objective. In order to achieve high performance while still satisfying specified requirements, the election mechanism combines two reputation models: one classifies candidate services over their dependability (qualitative perspective), while the other is used to build expectations on a task's execution time (quantitative perspective). Candidate classification mechanisms, recall elections and reelections rules are used to prevent performance or dependability degradation by the presence of malicious or erroneous services. We evaluated proposed strategies over widely used real-world DBMS (Oracle 11g and Microsoft SQL Server) using benchmark data and queries. Obtained results prove that the proposed scheduling mechanism leads to a highly dependable and efficient system even in the presence of malicious or erroneous data services.", "paper_title": "Elections and Reputation for High Dependability and Performance in Distributed Workload Execution", "paper_id": "WOS:000358226400014"}