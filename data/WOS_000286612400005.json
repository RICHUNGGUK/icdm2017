{"auto_keywords": [{"score": 0.04752555935900583, "phrase": "activity_diagrams"}, {"score": 0.015719716506582538, "phrase": "test_scenarios"}, {"score": 0.014035741618441146, "phrase": "use_cases"}, {"score": 0.013693890295176826, "phrase": "activity_diagram"}, {"score": 0.013099126159560083, "phrase": "possible_scenarios"}, {"score": 0.00978500921577698, "phrase": "proposed_approach"}, {"score": 0.004767261858417823, "phrase": "uml_activity_diagrams"}, {"score": 0.004696608876994947, "phrase": "system_developers"}, {"score": 0.004650086856905758, "phrase": "unified_modeling_language"}, {"score": 0.0044685410845412745, "phrase": "possible_flows"}, {"score": 0.0040854526743211396, "phrase": "useful_design_artifact"}, {"score": 0.003829290275367182, "phrase": "use_case"}, {"score": 0.003553540530701019, "phrase": "challenging_task"}, {"score": 0.003448863509392547, "phrase": "path_identification"}, {"score": 0.0028822890425197582, "phrase": "control_constructs"}, {"score": 0.0028253682745674608, "phrase": "transformation_approach"}, {"score": 0.0027148677103585985, "phrase": "nested_structures"}, {"score": 0.002595698433525986, "phrase": "intermediate_testable_model"}, {"score": 0.0025066323380332784, "phrase": "itm"}, {"score": 0.0023259039577313294, "phrase": "existing_work"}, {"score": 0.0021907299375981356, "phrase": "design_models"}, {"score": 0.002136747803494932, "phrase": "testability_information"}, {"score": 0.0021049977753042253, "phrase": "existing_approaches"}], "paper_keywords": ["UML", " Software testing", " Model-based testing", " Activity diagram", " Test case generation"], "paper_abstract": "Often system developers follow Unified Modeling Language (UML) activity diagrams to depict all possible flows of controls commonly known as scenarios of use cases. Hence, an activity diagram is treated as a useful design artifact to identify all possible scenarios and then check faults in scenarios of a use case. However, identification of all possible scenarios and then testing with activity diagrams is a challenging task because several control flow constructs and their nested combinations make path identification difficult. In this paper, we address this problem and propose an approach to identify all scenarios from activity diagrams and use them to test use cases. The proposed approach is based on the classification of control constructs followed by a transformation approach which takes into account any combination of nested structures and transforms an activity diagram into a model called Intermediate Testable Model (ITM). We use ITM to generate test scenarios. With our approach it is possible to generate more scenarios than the existing work. Further, the proposed approach can be directly carried out using design models without any addition of testability information unlike the existing approaches.", "paper_title": "Synthesis of test scenarios using UML activity diagrams", "paper_id": "WOS:000286612400005"}