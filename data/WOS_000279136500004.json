{"auto_keywords": [{"score": 0.04834469683626629, "phrase": "chiba"}, {"score": 0.044728635819998905, "phrase": "program_transformation"}, {"score": 0.04286647638739477, "phrase": "developed_templates"}, {"score": 0.00481495049065317, "phrase": "program_transformation_templates_for_tupling"}, {"score": 0.004709567162738894, "phrase": "term_rewriting"}, {"score": 0.003945117054416623, "phrase": "previous_framework"}, {"score": 0.0037463983616303786, "phrase": "lambda_calculus"}, {"score": 0.003161065111494053, "phrase": "well-known_technique"}, {"score": 0.003091767402370757, "phrase": "redundant_recursive_calls"}, {"score": 0.00266693888510356, "phrase": "tuple_symbols"}, {"score": 0.0021842976754894846, "phrase": "wider_variety"}, {"score": 0.0021049977753042253, "phrase": "tupling_transformations"}], "paper_keywords": ["program transformation", " tupling", " term rewriting"], "paper_abstract": "Chiba et al. (2006) proposed a framework of program transformation of term rewriting systems by developed templates. Contrast to the previous framework of program transformation by templates based on lambda calculus, this framework provides a method to verify the correctness of transformation automatically. Tupling (Bird, 1980) is a well-known technique to eliminate redundant recursive calls for improving efficiency of programs. In Chiba et al's framework, however, one can not use tuple symbols to construct developed templates. Thus their framework is not capable of tupling transformations. In this paper, we propose a more flexible notion of templates so that a wider variety of transformations, including tupling transformations, can be handled.", "paper_title": "Program Transformation Templates for Tupling Based on Term Rewriting", "paper_id": "WOS:000279136500004"}