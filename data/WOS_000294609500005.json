{"auto_keywords": [{"score": 0.044224840412019774, "phrase": "programming_language"}, {"score": 0.00481495049065317, "phrase": "geometry_constructions"}, {"score": 0.0040334640350288, "phrase": "automation_problem"}, {"score": 0.0039626308903511764, "phrase": "program_synthesis_problem"}, {"score": 0.0038246602895705643, "phrase": "new_program_synthesis_technique"}, {"score": 0.0036052633308076933, "phrase": "symbolic_reasoning"}, {"score": 0.003562912424153324, "phrase": "concrete_reasoning"}, {"score": 0.003459191419478298, "phrase": "deep_theoretical_result"}, {"score": 0.0033584796908285894, "phrase": "random_testing"}, {"score": 0.00320338467974835, "phrase": "instruction_set"}, {"score": 0.0031100973266506163, "phrase": "higher_level_primitives"}, {"score": 0.0030554300179552415, "phrase": "basic_constructions"}, {"score": 0.0030017207229983385, "phrase": "textbook_chapters"}, {"score": 0.0027469703311742647, "phrase": "complicated_constructions"}, {"score": 0.0026045914281028473, "phrase": "forward_exhaustive_search"}, {"score": 0.0025587867729949037, "phrase": "goal-directed_heuristic"}, {"score": 0.0025137856138000014, "phrase": "backward_reasoning"}, {"score": 0.002286781334850213, "phrase": "high-school_textbooks"}, {"score": 0.0022070310530794097, "phrase": "reasonable_amount"}, {"score": 0.0021049977753042253, "phrase": "amazing_set"}], "paper_keywords": ["Algorithms", " Theory", " Program synthesis", " Ruler-Compass geometry constructions", " Abstraction", " Forward and Backward Analysis"], "paper_abstract": "In this paper, we study the problem of automatically solving ruler/compass based geometry construction problems. We first introduce a logic and a programming language for describing such constructions and then phrase the automation problem as a program synthesis problem. We then describe a new program synthesis technique based on three key insights: (i) reduction of symbolic reasoning to concrete reasoning (based on a deep theoretical result that reduces verification to random testing), (ii) extending the instruction set of the programming language with higher level primitives (representing basic constructions found in textbook chapters, inspired by how humans use their experience and knowledge gained from chapters to perform complicated constructions), and (iii) pruning the forward exhaustive search using a goal-directed heuristic (simulating backward reasoning performed by humans). Our tool can successfully synthesize constructions for various geometry problems picked up from high-school textbooks and examination papers in a reasonable amount of time. This opens up an amazing set of possibilities in the context of making classroom teaching interactive.", "paper_title": "Synthesizing Geometry Constructions", "paper_id": "WOS:000294609500005"}