{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "address_generation_optimization_for_embedded_high-performance_processors"}, {"score": 0.004718431349852634, "phrase": "nowadays_embedded_systems"}, {"score": 0.0046238380150870435, "phrase": "impressive_rate"}, {"score": 0.004476399615305783, "phrase": "complex_array_index_manipulation"}, {"score": 0.004422325007817267, "phrase": "large_number"}, {"score": 0.004386637056030611, "phrase": "data_accesses"}, {"score": 0.004298666679374568, "phrase": "high_performance_specific_computation"}, {"score": 0.004263972370406983, "phrase": "general_purpose_processors"}, {"score": 0.004161553532799662, "phrase": "reasonable_energy_consumption"}, {"score": 0.003996271202811961, "phrase": "low_power"}, {"score": 0.003947973513495612, "phrase": "required_programmability"}, {"score": 0.00374531366198605, "phrase": "compiler_effort"}, {"score": 0.003685067218455088, "phrase": "available_instruction"}, {"score": 0.0036553070575015344, "phrase": "data_parallelism"}, {"score": 0.0035965032173588753, "phrase": "data_path"}, {"score": 0.0033163269450817716, "phrase": "computational_resources"}, {"score": 0.0031974502006267163, "phrase": "increasing_parallel_computation"}, {"score": 0.0030828215204304473, "phrase": "main_bottleneck"}, {"score": 0.00303319936111073, "phrase": "available_parallelism"}, {"score": 0.002936331371903168, "phrase": "current_embedded_architectures"}, {"score": 0.0029008064765926414, "phrase": "special_unit"}, {"score": 0.002831037222426215, "phrase": "main_computing_elements"}, {"score": 0.002796782643988021, "phrase": "efficient_feed"}, {"score": 0.0026103363762901423, "phrase": "future_architectures"}, {"score": 0.002547535564922075, "phrase": "enormous_memory_bandwidth"}, {"score": 0.002526938673434697, "phrase": "distributed_memories"}, {"score": 0.0024761702541879213, "phrase": "address_generators"}, {"score": 0.00241658945942583, "phrase": "effective_next_generation"}, {"score": 0.0023970487263732737, "phrase": "embedded_processors"}, {"score": 0.0023776656246300063, "phrase": "global_trade-offs"}, {"score": 0.002148172508419683, "phrase": "address_generation_process"}, {"score": 0.0021307975800397816, "phrase": "embedded_systems"}, {"score": 0.0021049977753042253, "phrase": "current_research_trends"}], "paper_keywords": ["address generation", " optimization", " embedded"], "paper_abstract": "Nowadays embedded systems are growing at an impressive rate and provide more and more sophisticated applications characterized by having a complex array index manipulation and a large number of data accesses. Those applications require high performance specific computation that general purpose processors can not deliver at a reasonable energy consumption. Very long instruction word architectures seem a good solution providing enough computational performance at low power with the required programmability to speed up the time to market. Those architectures rely on compiler effort to exploit the available instruction and data parallelism to keep the data path busy all the time. With the density of transistors doubling each 18 months, more and more sophisticated architectures with a high number of computational resources running in parallel are emerging. With this increasing parallel computation, the access to data is becoming the main bottleneck that limits the available parallelism. To alleviate this problem, in current embedded architectures, a special unit works in parallel with the main computing elements to ensure efficient feed and storage of the data: the address generator unit, which comes in many flavors. Future architectures will have to deal with enormous memory bandwidth in distributed memories and the development of address generators units will be crucial for effective next generation of embedded processors where global trade-offs between reaction-time, bandwidth, energy and area must be achieved. This paper provides a survey of methods and techniques that optimize the address generation process for embedded systems, explaining current research trends and needs for future.", "paper_title": "Address Generation Optimization for Embedded High-Performance Processors: A Survey", "paper_id": "WOS:000259920500004"}