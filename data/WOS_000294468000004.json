{"auto_keywords": [{"score": 0.0492082249341756, "phrase": "mobile_systems"}, {"score": 0.00481495049065317, "phrase": "-based_approach"}, {"score": 0.0047709540557306284, "phrase": "security_policy_verification"}, {"score": 0.004536029676655286, "phrase": "automated_verification"}, {"score": 0.004352411290383643, "phrase": "explicit_notion"}, {"score": 0.004025531820226182, "phrase": "different_locations"}, {"score": 0.003916098498242888, "phrase": "security_issues"}, {"score": 0.0037402558657576124, "phrase": "labeled_kripke_structures"}, {"score": 0.0036385493850693983, "phrase": "location_net"}, {"score": 0.0035722806911457545, "phrase": "hierarchical_nesting"}, {"score": 0.0033651019362620866, "phrase": "generic_security-policy_specification_language"}, {"score": 0.0032287289440915187, "phrase": "code_location"}, {"score": 0.003083655376444887, "phrase": "access_control"}, {"score": 0.0030554300179552415, "phrase": "information_flow_specification"}, {"score": 0.002985988377995789, "phrase": "prototype_framework"}, {"score": 0.002825681384008326, "phrase": "program_code"}, {"score": 0.0026373136897864763, "phrase": "abstraction-refinement_techniques"}, {"score": 0.00257735013358606, "phrase": "location_abstractions"}, {"score": 0.002518746501941657, "phrase": "program_state_space"}, {"score": 0.002427732996314194, "phrase": "mobile_code_benchmarks"}, {"score": 0.002361632539339945, "phrase": "experimental_results"}, {"score": 0.002297327670408112, "phrase": "proposed_mobile_system"}, {"score": 0.00226583335721762, "phrase": "policy_specification_formalisms"}, {"score": 0.0021940118003312397, "phrase": "model_checking-based_approach"}, {"score": 0.002124461969404541, "phrase": "security_properties"}], "paper_keywords": ["Software verification", " Program security and safety", " Mobile systems", " Security policies", " Access control", " Information flow"], "paper_abstract": "This article describes an approach for the automated verification of mobile systems. Mobile systems are characterized by the explicit notion of location (e.g., sites where they run) and the ability to execute at different locations, yielding a number of security issues. To this aim, we formalize mobile systems as Labeled Kripke Structures, encapsulating the notion of location net that describes the hierarchical nesting of the threads constituting the system. Then, we formalize a generic security-policy specification language that includes rules for expressing and manipulating the code location. In contrast to many other approaches, our technique supports both access control and information flow specification. We developed a prototype framework for model checking of mobile systems. It works directly on the program code (in contrast to most traditional process-algebraic approaches that can model only limited details of mobile systems) and uses abstraction-refinement techniques, based also on location abstractions, to manage the program state space. We experimented with a number of mobile code benchmarks by verifying various security policies. The experimental results demonstrate the validity of the proposed mobile system modeling and policy specification formalisms and highlight the advantages of the model checking-based approach, which combines the validation of security properties with other checks, such as the validation of buffer overflows.", "paper_title": "A model checking-based approach for security policy verification of mobile systems", "paper_id": "WOS:000294468000004"}