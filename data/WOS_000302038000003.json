{"auto_keywords": [{"score": 0.04835764792705378, "phrase": "cocoalib"}, {"score": 0.00481495049065317, "phrase": "heuristically_certified_form"}, {"score": 0.004764859786310636, "phrase": "floating-point_arithmetic"}, {"score": 0.004405348628112645, "phrase": "fast_alternative"}, {"score": 0.0043367547691560175, "phrase": "rational_arithmetic"}, {"score": 0.004137288854115515, "phrase": "paired_floats"}, {"score": 0.004072854189671092, "phrase": "traverso"}, {"score": 0.004030449969901066, "phrase": "zanoni"}, {"score": 0.0037066895459425824, "phrase": "underlying_floating-point_arithmetic_system"}, {"score": 0.0035361001070845677, "phrase": "twin-float_arithmetic"}, {"score": 0.0034088473318056537, "phrase": "input_data"}, {"score": 0.003251920460276645, "phrase": "high_enough_precision"}, {"score": 0.0031678720736808574, "phrase": "total_cancellation_heuristic"}, {"score": 0.002974886152979993, "phrase": "classical_algebraic_algorithms"}, {"score": 0.0029284999172756103, "phrase": "buchberger's_algorithm"}, {"score": 0.0027790254309734428, "phrase": "exact_rational_value"}, {"score": 0.002637160140011997, "phrase": "exact_answer"}, {"score": 0.0025555322596460036, "phrase": "approximate_computation"}, {"score": 0.002362320344521919, "phrase": "ringtwinfloat"}, {"score": 0.002241679436497571, "phrase": "wide_variety"}, {"score": 0.002218299213266519, "phrase": "algebraic_computations"}, {"score": 0.002183684303511462, "phrase": "grobner_bases"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Heuristically guaranteed finite-precision arithmetic"], "paper_abstract": "We present a heuristically certified form of floating-point arithmetic and its implementation in CoCoALib. This arithmetic is intended to act as a fast alternative to exact rational arithmetic, and is developed from the idea of paired floats expounded by Traverso and Zanoni (2002). As prerequisites we need a source of (pseudo-)random numbers, and an underlying floating-point arithmetic system where the user can set the precision. Twin-float arithmetic can be used only where the input data are exact, or can be obtained at high enough precision. Our arithmetic includes a total cancellation heuristic for sums and differences, and so can be used in classical algebraic algorithms such as Buchberger's algorithm. We also present a (new) algorithm for recovering an exact rational value from a twin-float, so in some cases an exact answer can be obtained from an approximate computation. The ideas presented here are implemented as a ring in CoCoALib, called RingTwinFloat, allowing them to be used easily in a wide variety of algebraic computations (including Grobner bases). (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Twin-float arithmetic", "paper_id": "WOS:000302038000003"}