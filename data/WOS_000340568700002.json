{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "linux"}, {"score": 0.017636693556636336, "phrase": "kbuild"}, {"score": 0.00856682611904284, "phrase": "build_system"}, {"score": 0.007862741079413909, "phrase": "variability_constraints"}, {"score": 0.00467207889925365, "phrase": "build_system_variability"}, {"score": 0.004612147352416241, "phrase": "build_systems"}, {"score": 0.004456044928556639, "phrase": "final_built_product"}, {"score": 0.004305203085016233, "phrase": "software_variability"}, {"score": 0.004249957578636515, "phrase": "linux_kernel"}, {"score": 0.004159446063902181, "phrase": "biggest_open_source_software_systems"}, {"score": 0.0038492126993451337, "phrase": "variability_implementation"}, {"score": 0.0037348894128879082, "phrase": "case_study"}, {"score": 0.003441352119167824, "phrase": "quantitative_analysis"}, {"score": 0.0033680032592969633, "phrase": "kbuild."}, {"score": 0.003212074324593725, "phrase": "variability_anomalies"}, {"score": 0.0031032109441552287, "phrase": "dead_and_undead_artifacts"}, {"score": 0.003037047249598515, "phrase": "previous_work"}, {"score": 0.0029467742734417255, "phrase": "system_variability_constraints"}, {"score": 0.002668582249630492, "phrase": "large_percentage"}, {"score": 0.0026342827320931937, "phrase": "variability_information"}, {"score": 0.0025122373359090454, "phrase": "variability_analysis"}, {"score": 0.002375253757224999, "phrase": "file_level"}, {"score": 0.0023145690608400425, "phrase": "kconfig"}, {"score": 0.0022457226013538343, "phrase": "code_level"}, {"score": 0.0021601997088758957, "phrase": "kconfig."}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software variability", " variability anomalies", " Linux", " build systems", " KBUILD"], "paper_abstract": "Although build systems control what code gets compiled into the final built product, they are often overlooked when studying software variability. The Linux kernel is one of the biggest open source software systems supporting variability and contains over 10,000 configurable features described in its KCONFIG files. To understand the role of the build system in variability implementation, we use Linux as a case study. We study its build system, KBUILD, and extract the variability constraints in its Makefiles. We first provide a quantitative analysis of the variability in KBUILD. We then study how the variability constraints in the build system affect variability anomalies detected in Linux. We concentrate on dead and undead artifacts, and by extending previous work, we show that considering build system variability constraints allows more anomalies to be detected. We provide examples of such anomalies on both the code block and source file level. Our work shows that KBUILD contains a large percentage of the variability information in Linux, so it should not be ignored during variability analysis. Nonetheless, the anomalies we find suggest that variability on the file level in KBUILD is consistent with KCONFIG, whereas the constraints on the code level are harder to keep consistent with both KBUILD and KCONFIG. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "The Linux kernel: a case study of build system variability", "paper_id": "WOS:000340568700002"}