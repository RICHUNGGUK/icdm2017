{"auto_keywords": [{"score": 0.038661520814563984, "phrase": "data_redistribution"}, {"score": 0.012983686490567893, "phrase": "data_blocks"}, {"score": 0.00481495049065317, "phrase": "rs-coded_storage_clusters"}, {"score": 0.0046659637258752535, "phrase": "erasure-coded_storage_clusters"}, {"score": 0.004562362497952548, "phrase": "increased_storage_capacity"}, {"score": 0.004342430078306461, "phrase": "efficient_scaling_scheme"}, {"score": 0.004303591748086452, "phrase": "reed-solomon-coded_storage_clusters"}, {"score": 0.004041238873048836, "phrase": "uniform_data_distribution"}, {"score": 0.003933736547198066, "phrase": "old_and_new_chunks"}, {"score": 0.0038810583785936505, "phrase": "transposed_data_layout"}, {"score": 0.0038119123317396954, "phrase": "scale-rs"}, {"score": 0.003777800904236079, "phrase": "data_movement"}, {"score": 0.0036443694410100507, "phrase": "parity_update"}, {"score": 0.003531474887552889, "phrase": "lower_bound"}, {"score": 0.003499864176875713, "phrase": "data_migration_traffic"}, {"score": 0.0034529760173586583, "phrase": "necessary_data_blocks"}, {"score": 0.0034220655476652683, "phrase": "old_data_chunks"}, {"score": 0.0033914308417007316, "phrase": "new_chunks"}, {"score": 0.0033011569787033297, "phrase": "update_traffic"}, {"score": 0.003256922225995089, "phrase": "parity_difference_blocks"}, {"score": 0.0031702173541386888, "phrase": "individual_data_chunk"}, {"score": 0.003044455555031339, "phrase": "scaled_storage_clusters"}, {"score": 0.0029901699209266435, "phrase": "read_parallelism"}, {"score": 0.002820319063320601, "phrase": "reed-solomon-coded_storage_cluster"}, {"score": 0.0027206133859493725, "phrase": "experimental_results"}, {"score": 0.0026481480455339055, "phrase": "highest_read_performance"}, {"score": 0.00249767641333441, "phrase": "six_data_chunks"}, {"score": 0.002366361492754389, "phrase": "aggregate_write_throughput"}, {"score": 0.002282667669149476, "phrase": "online_filling"}, {"score": 0.002262209824105154, "phrase": "offline_filling"}, {"score": 0.0021821915946356168, "phrase": "user_response_time"}, {"score": 0.0021049977753042253, "phrase": "bandwidth_competition"}], "paper_keywords": ["Erasure-coded storage cluster", " cluster scaling", " data redistribution", " parity update"], "paper_abstract": "It is indispensable to scale erasure-coded storage clusters to meet requirements of increased storage capacity and I/O performance. In this study, we propose an efficient scaling scheme for Reed-Solomon-coded storage clusters called Scale-RS, which has three salient features. First, Scale-RS achieves uniform data distribution by equally placing data blocks among old and new chunks using a transposed data layout. Second, Scale-RS minimizes data movement incurred in the procedures of data redistribution and parity update. Scale-RS not only reaches the lower bound of data migration traffic by transferring necessary data blocks from old data chunks to new chunks, but it also reduces update traffic via generating parity difference blocks from data blocks stored in an individual data chunk. Third, Scale-RS improves the I/O performance of scaled storage clusters in terms of read parallelism and write throughput. We implement Scale-RS along with two alternative scaling schemes in a Reed-Solomon-coded storage cluster, on which real-world I/O traces are replayed. Experimental results demonstrate that Scale-RS achieves the highest read performance among the three scaling schemes after data redistribution. When it comes to scaling from six data chunks to nine, Scale-RS can outperform the other two scaling schemes in terms of aggregate write throughput by a factor of 2.85 and 3.05 under online filling and offline filling, respectively. We also show that user response time is slightly enlarged during data redistribution due to bandwidth competition between migration and user I/Os.", "paper_title": "Scale-RS: An Efficient Scaling Scheme for RS-Coded Storage Clusters", "paper_id": "WOS:000354526000018"}