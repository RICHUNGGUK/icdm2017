{"auto_keywords": [{"score": 0.04772120669047254, "phrase": "heap_space"}, {"score": 0.00481495049065317, "phrase": "garbage_collected_languages"}, {"score": 0.004665483918844599, "phrase": "dynamic_memory_consumption"}, {"score": 0.0043527164193299574, "phrase": "software_development"}, {"score": 0.0041384457437123635, "phrase": "garbage_collection"}, {"score": 0.003934681262271618, "phrase": "peak_heap_consumption"}, {"score": 0.003788444178071508, "phrase": "maximum_size"}, {"score": 0.0032556926399045635, "phrase": "existing_heap_space_analyses"}, {"score": 0.00305639530600272, "phrase": "specific_models"}, {"score": 0.00301801991152303, "phrase": "garbage_collectors"}, {"score": 0.0028692628457408025, "phrase": "actual_memory_usage"}, {"score": 0.0027625134766418266, "phrase": "novel_static_analysis"}, {"score": 0.0027278178983579085, "phrase": "garbage-collected_imperative_languages"}, {"score": 0.0026597250663309385, "phrase": "upper_bounds"}, {"score": 0.002609770322855842, "phrase": "peak_heap_usage"}, {"score": 0.002299830460180699, "phrase": "object_lifetime"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Static analysis", " Live heap space analysis", " Peak memory consumption", " Low-level languages", " Java bytecode", " Garbage collection"], "paper_abstract": "Accurately predicting the dynamic memory consumption (or heap space) of programs can be critical during software development. It is well-known that garbage collection (GC) complicates such problem. The peak heap consumption of a program is the maximum size of the data on the heap during its execution, i.e., the minimum amount of heap space needed to safely run the program. Existing heap space analyses either do not take deallocation into account or adopt specific models of garbage collectors which do not necessarily correspond to the actual memory usage. This paper presents a novel static analysis for garbage-collected imperative languages that infers accurate upper bounds on the peak heap usage, including exponential, logarithmic and polynomial bounds. A unique characteristic of the analysis is that it is parametric on the notion of object lifetime, i.e., on when objects become collectible. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Heap space analysis for garbage collected languages", "paper_id": "WOS:000321536100012"}