{"auto_keywords": [{"score": 0.029218408740257874, "phrase": "timed_operational_semantics"}, {"score": 0.028620667214365143, "phrase": "denotational_semantics"}, {"score": 0.00481495049065317, "phrase": "nested_interrupts"}, {"score": 0.004615202066192795, "phrase": "dependable_software"}, {"score": 0.004550469496119256, "phrase": "embedded_and_real-time_operating_systems"}, {"score": 0.004361644989356558, "phrase": "crucial_but_extremely_difficult_issue"}, {"score": 0.003923023699005215, "phrase": "interrupt_handling_behaviors"}, {"score": 0.003603989174919527, "phrase": "time_analysis"}, {"score": 0.003241312187060814, "phrase": "programming_language"}, {"score": 0.0021501863832966966, "phrase": "derived_denotational_semantics"}, {"score": 0.0021049977753042253, "phrase": "original_denotational_semantics"}], "paper_keywords": ["embedded and real-time operating systems", " interrupts", " operational semantics", " denotational semantics", " semantics linking"], "paper_abstract": "In the design of dependable software for embedded and real-time operating systems, time analysis is a crucial but extremely difficult issue, the challenge of which is exacerbated due to the randomness and nondeterminism of interrupt handling behaviors. Thus research into a theory that integrates interrupt behaviors and time analysis seems to be important and challenging. In this paper, we present a programming language to describe programs with interrupts that is comprised of two essential parts: main program and interrupt handling programs.We also explore a timed operational semantics and a denotational semantics to specify the meanings of our language. Furthermore, a strategy of deriving denotational semantics from the timed operational semantics is provided to demonstrate the soundness of our operational semantics by showing the consistency between the derived denotational semantics and the original denotational semantics.", "paper_title": "Semantic theories of programs with nested interrupts", "paper_id": "WOS:000354194300001"}