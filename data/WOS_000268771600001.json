{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bipartite_networks"}, {"score": 0.004525629293824217, "phrase": "self-stabilizing_algorithm"}, {"score": 0.004209893377338457, "phrase": "bipartite_network"}, {"score": 0.003956784357357341, "phrase": "distinct_colors"}, {"score": 0.0037188360359702182, "phrase": "self-stabilizing_property"}, {"score": 0.0032176163279340206, "phrase": "de-centralized_way"}, {"score": 0.0030239842475439814, "phrase": "proper_coloring"}, {"score": 0.002931569771634119, "phrase": "whole_system"}, {"score": 0.002726740692380339, "phrase": "optimal_edge_coloring"}, {"score": 0.0021049977753042253, "phrase": "initial_configuration"}], "paper_keywords": ["Distributed system", " Edge coloring", " Fault-tolerance", " Self-stabilization"], "paper_abstract": "This paper presents a self-stabilizing algorithm to color the edges of a bipartite network such that any two adjacent edges receive distinct colors. The algorithm has the self-stabilizing property; it works without initializing the system. It also works in a de-centralized way without a leader computing a proper coloring for the whole system. Moreover, it finds an optimal edge coloring and its time complexity is O(n (2) k + m) moves, where k is the number of edges that are not properly colored in the initial configuration.", "paper_title": "Distributed edge coloration for bipartite networks", "paper_id": "WOS:000268771600001"}