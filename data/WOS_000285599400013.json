{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "fpu"}, {"score": 0.00481495049065317, "phrase": "performing_arithmetic_operations_on_round-to-nearest_representations"}, {"score": 0.00474827840031692, "phrase": "composite_computation"}, {"score": 0.004666228956744244, "phrase": "constant_need"}, {"score": 0.0046176782475198085, "phrase": "intermediate_results"}, {"score": 0.004413036532585712, "phrase": "number_representations"}, {"score": 0.004101366149219787, "phrase": "simple_truncation"}, {"score": 0.0038383157378810277, "phrase": "particular_encoding"}, {"score": 0.003798346343693706, "phrase": "binary_representation"}, {"score": 0.0036680857629458816, "phrase": "digit_set"}, {"score": 0.0034207673889407003, "phrase": "essentially_an_ordinary_radix_complement_representation"}, {"score": 0.0033851312604425516, "phrase": "appended_round-bit"}, {"score": 0.0031348622158167195, "phrase": "radix_complement"}, {"score": 0.0030591665967282886, "phrase": "nearest_representations"}, {"score": 0.0030062165552187086, "phrase": "constant_time"}, {"score": 0.0027741761880779535, "phrase": "constant_time_operation"}, {"score": 0.0027166392914444023, "phrase": "sign_inversion"}, {"score": 0.002641770514171764, "phrase": "ordinary_two's_complement_representations"}, {"score": 0.0024377918036784336, "phrase": "meaningful_way"}, {"score": 0.002412371116984224, "phrase": "minimal_cost"}, {"score": 0.0023214036848949876, "phrase": "two's_complement_representation"}, {"score": 0.002241679436497571, "phrase": "fixed-point_encoding"}, {"score": 0.00217987162651941, "phrase": "floating-point_representations"}], "paper_keywords": ["Signed-digit", " round-to-nearest", " constant-time rounding and sign-inversion", " floating-point representation", " doublerounding"], "paper_abstract": "During any composite computation, there is a constant need for rounding intermediate results before they can participate in further processing. Recently, a class of number representations denoted RN-Codings were introduced, allowing an unbiased rounding-to-nearest to take place by a simple truncation, with the property that problems with double-roundings are avoided. In this paper, we first investigate a particular encoding of the binary representation. This encoding is generalized to any radix and digit set; however, radix complement representations for even values of the radix turn out to be particularly feasible. The encoding is essentially an ordinary radix complement representation with an appended round-bit, but still allowing rounding-to-nearest by truncation, and thus avoiding problems with double-roundings. Conversions from radix complement to these round-to-nearest representations can be performed in constant time, whereas conversion the other way, in general, takes at least logarithmic time. Not only is rounding-to-nearest a constant time operation, but so is also sign inversion, both of which are at best log-time operations on ordinary two's complement representations. Addition and multiplication on such fixed-point representations are first analyzed and defined in such a way that rounding information can be carried along in a meaningful way, at minimal cost. The analysis is carried through for a compact (canonical) encoding using two's complement representation, supplied with a round-bit. Based on the fixed-point encoding, it is shown possible to define floating-point representations, and a sketch of the implementation of an FPU is presented.", "paper_title": "Performing Arithmetic Operations on Round-to-Nearest Representations", "paper_id": "WOS:000285599400013"}