{"auto_keywords": [{"score": 0.046040545801964726, "phrase": "billion-scale_graphs"}, {"score": 0.022536279662986432, "phrase": "connected_components"}, {"score": 0.00481495049065317, "phrase": "dsp-cc-"}, {"score": 0.004628223381645729, "phrase": "billion-scale_networks"}, {"score": 0.004507760907425495, "phrase": "core_operation"}, {"score": 0.004468304427278713, "phrase": "graph_data"}, {"score": 0.004238682850598745, "phrase": "single_server"}, {"score": 0.004146510711518748, "phrase": "distributed_machines"}, {"score": 0.004020813632357377, "phrase": "representative_methods"}, {"score": 0.0038647641000798135, "phrase": "state-of-the_art_disk-based_distributed_method"}, {"score": 0.0037641274929335745, "phrase": "mapreduce"}, {"score": 0.0037147496184203217, "phrase": "powergraph"}, {"score": 0.0036660436272785476, "phrase": "-state-of-the-art_in-memory_distributed_system"}, {"score": 0.0031151864044353245, "phrase": "single_pc."}, {"score": 0.00304737045343781, "phrase": "disk-based_sequential_access-oriented_parallel_processing"}, {"score": 0.0028526276660691525, "phrase": "parallel_processing"}, {"score": 0.002729744174693491, "phrase": "ultra-fast_disk-based_parallel_algorithm"}, {"score": 0.002544017922741882, "phrase": "sequential_disk_scan"}, {"score": 0.0025217065652145443, "phrase": "page-level_cache-conscious_parallel_processing"}, {"score": 0.0024451427672857458, "phrase": "dsp-cc"}, {"score": 0.0023501014144112443, "phrase": "limited_memory_size"}, {"score": 0.002258745901862197, "phrase": "medium-sized_graphs"}, {"score": 0.0021518875024104244, "phrase": "distributed_competitors"}, {"score": 0.0021049977753042253, "phrase": "representative_disk-based_parallel_method"}], "paper_keywords": ["Graphs", " disk-based", " parallel", " connected components", " SSD"], "paper_abstract": "Computing connected components is a core operation on graph data. Since billion-scale graphs cannot be resident in memory of a single server, several approaches based on distributed machines have recently been proposed. The representative methods are Hash-To-Min and PowerGraph. Hash-To-Min is the state-of-the art disk-based distributed method which minimizes the number of MapReduce rounds. PowerGraph is the-state-of-the-art in-memory distributed system, which is typically faster than the disk-based distributed one, however, requires a lot of machines for handling billion-scale graphs. In this paper, we propose an I/O efficient parallel algorithm for billion-scale graphs in a single PC. We first propose the Disk-based Sequential access-oriented Parallel processing (DSP) model that exploits sequential disk access in terms of disk I/Os and parallel processing in terms of computation. We then propose an ultra-fast disk-based parallel algorithm for computing connected components, DSP-CC, which largely improves the performance through sequential disk scan and page-level cache-conscious parallel processing. Extensive experimental results show that DSP-CC 1) computes connected components in billion-scale graphs using the limited memory size whereas in-memory algorithms can only support medium-sized graphs with the same memory size, and 2) significantly outperforms all distributed competitors as well as a representative disk-based parallel method.", "paper_title": "DSP-CC-: I/O Efficient Parallel Computation of Connected Components in Billion-Scale Networks", "paper_id": "WOS:000361245300006"}