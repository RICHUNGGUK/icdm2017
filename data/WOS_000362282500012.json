{"auto_keywords": [{"score": 0.04887274176294741, "phrase": "searchlight"}, {"score": 0.00481495049065317, "phrase": "large_multidimensional_data"}, {"score": 0.004738765336344627, "phrase": "new_system"}, {"score": 0.004619356874848538, "phrase": "constraint_solving_and_data_management_techniques"}, {"score": 0.004560780566066473, "phrase": "constraint_programming"}, {"score": 0.004417559493780342, "phrase": "dbms"}, {"score": 0.004170940184489072, "phrase": "rich_expressiveness"}, {"score": 0.004118026552723285, "phrase": "constraintbased_search"}, {"score": 0.004052823656906696, "phrase": "modern_cp_solvers"}, {"score": 0.003826492478418294, "phrase": "enriched_functionality"}, {"score": 0.0037299855191553, "phrase": "search-intensive_applications"}, {"score": 0.003635903652803253, "phrase": "first_system"}, {"score": 0.003601235776892337, "phrase": "generic_search"}, {"score": 0.003532885029484907, "phrase": "large_multi-dimensional_data_collections"}, {"score": 0.0034437574674180365, "phrase": "point_search"}, {"score": 0.0034218279328844746, "phrase": "mining_tasks"}, {"score": 0.0033142503315912986, "phrase": "first-class_citizens"}, {"score": 0.0032721691785599833, "phrase": "solver_logic"}, {"score": 0.0031998046354547705, "phrase": "native_support"}, {"score": 0.0031591719975282073, "phrase": "necessary_apis"}, {"score": 0.0031190537176106386, "phrase": "transparent_execution"}, {"score": 0.00307944332532505, "phrase": "query_plans"}, {"score": 0.0029635959701543313, "phrase": "speculative_solving_existing_solvers"}, {"score": 0.0029259540174253426, "phrase": "entire_data_set"}, {"score": 0.002907312188714594, "phrase": "main-memory_resident"}, {"score": 0.002861224098631869, "phrase": "innovative_two_stage"}, {"score": 0.0028520942752886507, "phrase": "solve-validate"}, {"score": 0.0027535633837592597, "phrase": "mainmemory_synopses"}, {"score": 0.002718581874516321, "phrase": "candidate_search_results"}, {"score": 0.0026499429068956686, "phrase": "real_data"}, {"score": 0.002591303221962211, "phrase": "cp_solver_logic"}, {"score": 0.0025178072071268534, "phrase": "large_search"}, {"score": 0.002501759237420687, "phrase": "data_spaces"}, {"score": 0.0024620842899061614, "phrase": "search_distribution"}, {"score": 0.0024230370118191267, "phrase": "prototype_implementation"}, {"score": 0.0023922444655593046, "phrase": "google's_or-tools"}, {"score": 0.002324381111188894, "phrase": "research_tools"}, {"score": 0.0022875127203850027, "phrase": "dbms_scidb."}, {"score": 0.0022802093550930245, "phrase": "extensive_experimental_results"}, {"score": 0.0021943626624131413, "phrase": "next_best_approach"}, {"score": 0.0021049977753042253, "phrase": "end_response_time"}], "paper_keywords": [""], "paper_abstract": "We present a new system, called Searchlight, that uniquely integrates constraint solving and data management techniques. It allows Constraint Programming (CP) machinery to run efficiently inside a DBMS without the need to extract, transform and move the data. This marriage concurrently offers the rich expressiveness and efficiency of constraintbased search and optimization provided by modern CP solvers, and the ability of DBMSs to store and query data at scale, resulting in an enriched functionality that can effectively support both data- and search-intensive applications. As such, Searchlight is the first system to support generic search, exploration and mining over large multi-dimensional data collections, going beyond point algorithms designed for point search and mining tasks. Searchlight makes the following scientific contributions: Constraint solvers as first-class citizens Instead of treating solver logic as a black-box, Searchlight provides native support, incorporating the necessary APIs for its specification and transparent execution as part of query plans, as well as novel algorithms for its optimized execution and parallelization. Speculative solving Existing solvers assume that the entire data set is main-memory resident. Searchlight uses an innovative two stage Solve-Validate approach that allows it to operate speculatively yet safely on mainmemory synopses, quickly producing candidate search results that can later be efficiently validated on real data. Computation and I/O load balancing As CP solver logic can be computationally expensive, executing it on large search and data spaces requires novel CPU-I/O balancing approaches when performing search distribution. We built a prototype implementation of Searchlight on Google's Or-Tools, an open-source suite of operations research tools, and the array DBMS SciDB. Extensive experimental results show that Searchlight often performs orders of magnitude faster than the next best approach (SciDBonly or CP-solver-only) in terms of end response time and time to first result.", "paper_title": "Searchlight: Enabling Integrated Search and Exploration over Large Multidimensional Data", "paper_id": "WOS:000362282500012"}