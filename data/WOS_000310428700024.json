{"auto_keywords": [{"score": 0.03583574966327729, "phrase": "explicit_parallelization"}, {"score": 0.014299678177483344, "phrase": "modern_software_engineering_tools"}, {"score": 0.00481495049065317, "phrase": "non-invasive_explicit_parallelization"}, {"score": 0.004081385289516914, "phrase": "parallel_applications"}, {"score": 0.004010960493946656, "phrase": "distributed_memory_architectures"}, {"score": 0.003907586297783078, "phrase": "main_goal"}, {"score": 0.003254610516477302, "phrase": "template_metaprogramming"}, {"score": 0.0031984060035955292, "phrase": "aspect-oriented_programming"}, {"score": 0.0031431690368229443, "phrase": "program_transformation_engine"}, {"score": 0.00303553181618577, "phrase": "domain-specific_language"}, {"score": 0.0029830992938695033, "phrase": "hi-pal."}, {"score": 0.0021049977753042253, "phrase": "significant_loss"}], "paper_keywords": ["Explicit parallelization", " Template metaprogramming", " Aspect-oriented programming", " Generative programming", " Domain-specific languages"], "paper_abstract": "This paper presents an overview of our experiments in integrating modern software engineering tools and techniques with the process of developing parallel applications for distributed memory architectures. The main goal was to determine the methods that have the potential of reducing the complexities associated with explicit parallelization. We experimented with template metaprogramming, aspect-oriented programming, program transformation engine, and a domain-specific language called Hi-PaL. The pros and cons of using each technique for explicit parallelization are presented in this paper. Our experiments demonstrate that through a combination of modern software engineering tools and techniques, the effort involved in explicit parallelization can be reduced by 90 % without any significant loss in performance.", "paper_title": "Tools and techniques for non-invasive explicit parallelization", "paper_id": "WOS:000310428700024"}