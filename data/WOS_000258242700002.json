{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cryptographic_operations"}, {"score": 0.004635477242873163, "phrase": "information_flow"}, {"score": 0.0043786774510943625, "phrase": "information-flow_definitions"}, {"score": 0.0042354707960660706, "phrase": "public_data"}, {"score": 0.003962899903266524, "phrase": "encrypted_output"}, {"score": 0.003906804492585634, "phrase": "secret_inputs"}, {"score": 0.0035525230119401153, "phrase": "secret_keys"}, {"score": 0.003485605409687907, "phrase": "underlying_cryptographic_algorithm"}, {"score": 0.0032922964156452696, "phrase": "noninterference_definition"}, {"score": 0.0032456625605347417, "phrase": "safe_encryption"}, {"score": 0.0031693980719538317, "phrase": "key_generation"}, {"score": 0.0028274743316389437, "phrase": "small_imperative_language"}, {"score": 0.0028006988338192375, "phrase": "primitive_cryptographic_operations"}, {"score": 0.0027610089418453614, "phrase": "type_system"}, {"score": 0.0027348611289528583, "phrase": "dangerous_program_behavior"}, {"score": 0.0026452734009203764, "phrase": "secret_key_or_confusing_keys"}, {"score": 0.0025343769150179764, "phrase": "secure_implementations"}, {"score": 0.0025103699913760057, "phrase": "cryptographic_protocols"}, {"score": 0.0024051153560799335, "phrase": "standard_noninterference_property"}, {"score": 0.0023152577218214804, "phrase": "natural_extensions"}, {"score": 0.0022393843660697484, "phrase": "public-key_cryptography"}, {"score": 0.0021049977753042253, "phrase": "chosen-ciphertext_attacks"}], "paper_keywords": ["language-based security", " information flow", " noninterference", " cryptography", " security type systems"], "paper_abstract": "Cryptographic operations are essential for many security-critical systems. Reasoning about information flow in such systems is challenging because typical (noninterference-based) information-flow definitions allow no flow from secret to public data. Unfortunately, this implies that programs with encryption are ruled out because encrypted output depends on secret inputs: the plaintext and the key. However, it is desirable to allow flows arising from encryption with secret keys provided that the underlying cryptographic algorithm is strong enough. In this article we conservatively extend the noninterference definition to allow safe encryption, decryption, and key generation. To illustrate the usefulness of this approach, we propose (and implement) a type system that guarantees noninterference for a small imperative language with primitive cryptographic operations. The type system prevents dangerous program behavior (e.g., giving away a secret key or confusing keys and nonkeys), which we exemplify with secure implementations of cryptographic protocols. Because the model is based on a standard noninterference property, it allows us to develop some natural extensions. In particular, we consider public-key cryptography and integrity, which accommodate reasoning about primitives that are vulnerable to chosen-ciphertext attacks. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Cryptographically-masked flows", "paper_id": "WOS:000258242700002"}