{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "gpu"}, {"score": 0.004627441072541506, "phrase": "curved_polygons"}, {"score": 0.004554488671294504, "phrase": "simplicial_coverings"}, {"score": 0.004240116703465252, "phrase": "new_algorithm"}, {"score": 0.004042635935882651, "phrase": "cubic_bezier_curve_segments"}, {"score": 0.0037040785566765954, "phrase": "simple_preprocessing"}, {"score": 0.003559675269411366, "phrase": "computing_tessellations"}, {"score": 0.003287482882222731, "phrase": "geometry_shader"}, {"score": 0.0028715299874549245, "phrase": "stencil_buffer"}, {"score": 0.0026307897899760383, "phrase": "frame_buffer"}, {"score": 0.002468450551616404, "phrase": "fragment_shader"}, {"score": 0.002391067964886602, "phrase": "implicit_equation"}, {"score": 0.0023346234464901978, "phrase": "bezier_curve"}, {"score": 0.002138799283553239, "phrase": "proposed_method"}], "paper_keywords": ["Rasterization algorithms", " Bezier curves", " GPU programming"], "paper_abstract": "In this work, we describe a new algorithm for rendering polygons defined by cubic Bezier curve segments in current GPUs. Unlike other approaches, our algorithm has a simple preprocessing that does not require computing tessellations, and can be implemented in GPU as a geometry shader. The polygon is decomposed into a set of simplices which are individually rasterized into the stencil buffer to recreate the shape that is finally rendered in the frame buffer. Each simplex is rasterized using a fragment shader that evaluates the implicit equation of the Bezier curve to discard the pixels that fall outside it. The proposed method is simple, fast, robust and general, as it can handle curved polygons with holes, several components or self-intersections. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "GPU-based rendering of curved polygons using simplicial coverings", "paper_id": "WOS:000260360400011"}