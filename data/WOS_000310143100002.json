{"auto_keywords": [{"score": 0.008713768692145013, "phrase": "scalar_fields"}, {"score": 0.004713656264685915, "phrase": "combinatorial_algorithm"}, {"score": 0.004670896353428476, "phrase": "general_topological_simplification"}, {"score": 0.004558748120167778, "phrase": "scalar_field"}, {"score": 0.004476399615305783, "phrase": "simplified_field_g"}, {"score": 0.004382196270563035, "phrase": "constrained_subset"}, {"score": 0.00425103400920119, "phrase": "small_distance"}, {"score": 0.004174220694700258, "phrase": "data-fitting_purpose"}, {"score": 0.0041112665381266315, "phrase": "previous_algorithms"}, {"score": 0.003916098498242888, "phrase": "critical_points"}, {"score": 0.0038336409728616035, "phrase": "topological_persistence"}, {"score": 0.003685067218455088, "phrase": "standard_epsilon-simplification"}, {"score": 0.0035965032173588753, "phrase": "new_iterative_algorithm"}, {"score": 0.003563841266960747, "phrase": "constrained_reconstruction"}, {"score": 0.0035422310038875048, "phrase": "sub-_and_sur-level_sets"}, {"score": 0.003117405395602633, "phrase": "triangulated_surfaces"}, {"score": 0.0028454331415283213, "phrase": "previous_techniques"}, {"score": 0.0027184540871935284, "phrase": "input_function"}, {"score": 0.002677396270783542, "phrase": "corresponding_simplified_function"}, {"score": 0.0026530590435527527, "phrase": "appealing_application_area"}, {"score": 0.0026129863248033807, "phrase": "scalar_field_design"}, {"score": 0.0025578967205807843, "phrase": "threshold_parameter"}, {"score": 0.002534642970039115, "phrase": "robust_pruning"}, {"score": 0.002519257735651759, "phrase": "topological_noise"}, {"score": 0.0023776656246300063, "phrase": "numerical_solvers"}, {"score": 0.002348883765159185, "phrase": "topological_guarantees"}, {"score": 0.0023275257102180554, "phrase": "certified_geometry_processing"}, {"score": 0.0022715134070706174, "phrase": "numerical_noise"}, {"score": 0.0022303885749306645, "phrase": "time_efficiency"}, {"score": 0.0021569129153653777, "phrase": "supplemental_material"}, {"score": 0.00211785847468134, "phrase": "topological_cleaning"}, {"score": 0.0021049977753042253, "phrase": "surface_meshes"}], "paper_keywords": ["Scalar field visualization", " scalar field design", " topological simplification"], "paper_abstract": "We present a combinatorial algorithm for the general topological simplification of scalar fields on surfaces. Given a scalar field f, our algorithm generates a simplified field g that provably admits only critical points from a constrained subset of the singularities of f, while guaranteeing a small distance parallel to f - g parallel to(infinity) for data-fitting purpose. In contrast to previous algorithms, our approach is oblivious to the strategy used for selecting features of interest and allows critical points to be removed arbitrarily. When topological persistence is used to select the features of interest, our algorithm produces a standard epsilon-simplification. Our approach is based on a new iterative algorithm for the constrained reconstruction of sub- and sur-level sets. Extensive experiments show that the number of iterations required for our algorithm to converge is rarely greater than 2 and never greater than 5, yielding O (n log (n)) practical time performances. The algorithm handles triangulated surfaces with or without boundary and is robust to the presence of multi-saddles in the input. It is simple to implement, fast in practice and more general than previous techniques. Practically, our approach allows a user to arbitrarily simplify the topology of an input function and robustly generate the corresponding simplified function. An appealing application area of our algorithm is in scalar field design since it enables, without any threshold parameter, the robust pruning of topological noise as selected by the user. This is needed for example to get rid of inaccuracies introduced by numerical solvers, thereby providing topological guarantees needed for certified geometry processing. Experiments show this ability to eliminate numerical noise as well as validate the time efficiency and accuracy of our algorithm. We provide a lightweight C++ implementation as supplemental material that can be used for topological cleaning on surface meshes.", "paper_title": "Generalized Topological Simplification of Scalar Fields on Surfaces", "paper_id": "WOS:000310143100002"}