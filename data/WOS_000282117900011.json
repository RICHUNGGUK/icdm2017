{"auto_keywords": [{"score": 0.02898452830624612, "phrase": "uml"}, {"score": 0.00481495049065317, "phrase": "component_compatibility"}, {"score": 0.0046937237797352515, "phrase": "software_engineering_methods"}, {"score": 0.004552255360140208, "phrase": "software_components"}, {"score": 0.0040481944502103505, "phrase": "component_interfaces"}, {"score": 0.004007083686875716, "phrase": "software_compositions"}, {"score": 0.0038467574225322086, "phrase": "composed_systems"}, {"score": 0.003769006950727621, "phrase": "incompatibility_errors"}, {"score": 0.003711723285313348, "phrase": "software_developers"}, {"score": 0.0035997452281985465, "phrase": "relevant_reusable_entities"}, {"score": 0.00342054627009158, "phrase": "validation_tools"}, {"score": 0.003334309053314909, "phrase": "behavioural_incompatibility_issues"}, {"score": 0.0032836104153151973, "phrase": "integrated_support"}, {"score": 0.0032172054825137866, "phrase": "ontological_techniques"}, {"score": 0.003025915966640355, "phrase": "comprehensive_software_engineering_framework"}, {"score": 0.0029798924689472014, "phrase": "software_composition"}, {"score": 0.002949598537993663, "phrase": "design_time"}, {"score": 0.002889928791032578, "phrase": "compatibility_guarantees"}, {"score": 0.0027741761880779535, "phrase": "model-driven_development_approach"}, {"score": 0.002690406375639144, "phrase": "ontology_techniques"}, {"score": 0.002622528664187849, "phrase": "component_properties"}, {"score": 0.002416589459425828, "phrase": "component_discovery"}, {"score": 0.002392008392892289, "phrase": "compatibility_checking"}, {"score": 0.0023197517832705297, "phrase": "proposed_approach"}, {"score": 0.002272794656458419, "phrase": "software_engineering"}, {"score": 0.0021928902836049384, "phrase": "multiple_stakeholders"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software composition", " Semantic interfaces", " Model-driven development", " UML", " Ontology techniques", " Validation", " Dynamic discovery", " Software deployment"], "paper_abstract": "Despite advances in software engineering methods and tools, understanding what software components do and ensuring that they work well together remains difficult. This is chiefly due to the lack of support for specifying component interfaces and software compositions formally. Due to these shortcomings, composed systems are subject to incompatibility errors, and software developers struggle to retrieve and understand relevant reusable entities. Constructs recently added to the Unified Modeling Language (UML) supported by validation tools can detect and solve behavioural incompatibility issues, while integrated support for characterisation using ontological techniques can describe what a component does. This paper presents a comprehensive software engineering framework that supports software composition at design time and runtime with compatibility guarantees. Our main contributions are (a) a model-driven development approach that combines UML modelling and ontology techniques for the specification of component properties, their validation and their transformation to code, (b) a middleware platform that supports component discovery, compatibility checking and deployment. Following the proposed approach gives benefits for software engineering, in particular in settings where multiple stakeholders are involved. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "A comprehensive engineering framework for guaranteeing component compatibility", "paper_id": "WOS:000282117900011"}