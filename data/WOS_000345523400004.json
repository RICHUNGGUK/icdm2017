{"auto_keywords": [{"score": 0.04839718571524074, "phrase": "star"}, {"score": 0.03134199094777776, "phrase": "explored_symbolic_state"}, {"score": 0.00481495049065317, "phrase": "input_stimulus_generation"}, {"score": 0.004776853267973129, "phrase": "hybrid_static"}, {"score": 0.004682917599491709, "phrase": "rtl._we"}, {"score": 0.00453643016617164, "phrase": "functional_input_vector_generation"}, {"score": 0.004377077848734575, "phrase": "source_code"}, {"score": 0.004325208730208653, "phrase": "register-transfer_level"}, {"score": 0.004206548500039536, "phrase": "star_approach"}, {"score": 0.004123781267600542, "phrase": "rtl_symbolic_execution"}, {"score": 0.004091130285858113, "phrase": "concrete_simulation"}, {"score": 0.00385431710959668, "phrase": "concrete_simulation_path"}, {"score": 0.0036747384051186937, "phrase": "path_constraints"}, {"score": 0.003559675269411366, "phrase": "smt_solver"}, {"score": 0.003517458289610994, "phrase": "satisfiable_assignment"}, {"score": 0.00347574024760684, "phrase": "valid_input_vector"}, {"score": 0.003353521531649663, "phrase": "path_explosion"}, {"score": 0.0033269488835014583, "phrase": "symbolic_execution"}, {"score": 0.0032099453192629976, "phrase": "explored_symbolic_state_caching_method"}, {"score": 0.0031342307827666675, "phrase": "explored_symbolic_states"}, {"score": 0.0028944757265206332, "phrase": "bitmap_encoding"}, {"score": 0.002372103459168231, "phrase": "running_efficiency"}, {"score": 0.002353361378528725, "phrase": "star."}, {"score": 0.002279508335630797, "phrase": "enhanced_star"}, {"score": 0.0022345720876241044, "phrase": "high_coverage"}, {"score": 0.0022168460543913787, "phrase": "benchmark_rtl_designs"}, {"score": 0.0021559025985688255, "phrase": "test_generation_process"}], "paper_keywords": ["Design", " Reliability", " Verification", " Static analysis", " symbolic execution", " design verification", " coverage", " SMT"], "paper_abstract": "We enhance STAR, an automatic technique for functional input vector generation for design validation. STAR statically analyzes the source code of the Register-Transfer Level (RTL) design. The STAR approach is a hybrid between RTL symbolic execution and concrete simulation that offsets the disadvantages of both. The symbolic execution, which follows the concrete simulation path, extracts constraints for that path. The guard in the path constraints is then mutated and passed to an SMT solver. A satisfiable assignment generates a valid input vector. However, STAR suffers the problem of path explosion during symbolic execution. In this article, we present an explored symbolic state caching method to attack path explosion. Explored symbolic states are states starting from which all subpaths have been explored. Each explored symbolic state is stored in the form of bitmap encoding of branches to ease comparison. When the explored symbolic state is reached again in the following symbolic execution, all subpaths can be pruned. In addition, we use two types of optimizations: (a) dynamic UD chain slicing; and (b) local conflict resolution to improve the running efficiency of STAR. We demonstrate that the results of the enhanced STAR are promising in showing high coverage on benchmark RTL designs, and the runtime of the test generation process is reduced from several hours to less than 20 minutes.", "paper_title": "Scaling Input Stimulus Generation through Hybrid Static and Dynamic Analysis of RTL", "paper_id": "WOS:000345523400004"}