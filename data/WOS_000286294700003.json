{"auto_keywords": [{"score": 0.03949131510361903, "phrase": "dewey"}, {"score": 0.00481495049065317, "phrase": "extended_dewey_labeling_scheme"}, {"score": 0.004688989566904871, "phrase": "tree_pattern"}, {"score": 0.004627244470096107, "phrase": "xml_database"}, {"score": 0.004566308708871429, "phrase": "core_operation"}, {"score": 0.004526129302830441, "phrase": "efficient_evaluation"}, {"score": 0.0044863018460183784, "phrase": "xml_queries"}, {"score": 0.0044272138900038095, "phrase": "dewey_labeling_scheme"}, {"score": 0.004292337783332826, "phrase": "xml_document"}, {"score": 0.004235793609579307, "phrase": "xml_query_processing"}, {"score": 0.003911771812701971, "phrase": "xml_tree_pattern_matching"}, {"score": 0.003826231150275071, "phrase": "novel_labeling_scheme"}, {"score": 0.003660700128133065, "phrase": "existing_dewey_labeling_scheme"}, {"score": 0.003335948601271999, "phrase": "internal_query_nodes"}, {"score": 0.0032919615578986816, "phrase": "query_processing"}, {"score": 0.0031774686451753477, "phrase": "extended_dewey"}, {"score": 0.003080548510001051, "phrase": "holistic_xml_tree_pattern_matching_algorithms"}, {"score": 0.0029602552900111407, "phrase": "xml_twig_pattern_query"}, {"score": 0.0028826733506942554, "phrase": "generalized_xml_tree_pattern"}, {"score": 0.0028195727965553367, "phrase": "gtjfast"}, {"score": 0.002733539375462443, "phrase": "non-output_nodes"}, {"score": 0.0026267609106294817, "phrase": "gtjfasttl"}, {"score": 0.0025018875576502606, "phrase": "level_pruning"}, {"score": 0.0023724065150232897, "phrase": "xml_tree_pattern"}, {"score": 0.0023101951336207955, "phrase": "existing_approaches"}, {"score": 0.0021809311689473493, "phrase": "intermediate_results"}, {"score": 0.002161695357601592, "phrase": "query_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["XML database", " XML query processing", " Performance"], "paper_abstract": "Finding all the occurrences of a tree pattern in an XML database is a core operation for efficient evaluation of XML queries. The Dewey labeling scheme is commonly used to label an XML document to facilitate XML query processing by recording information on the path of an element. In order to improve the efficiency of XML tree pattern matching, we introduce a novel labeling scheme, called extended Dewey, which effectively extends the existing Dewey labeling scheme to combine the types and identifiers of elements in a label, and to avoid the scan of labels for internal query nodes to accelerate query processing (in I/O cost). Based on extended Dewey, we propose a series of holistic XML tree pattern matching algorithms. We first present TJFast to answer an XML twig pattern query. To efficiently answer a generalized XML tree pattern, we then propose GTJFast, an optimization that exploits the non-output nodes. In addition, we propose TJFastTL and GTJFastTL based on the tag + level data partition scheme to further reduce I/O costs by level pruning. Finally, we report our comprehensive experimental results to show that our set of XML tree pattern matching algorithms are superior to existing approaches in terms of the number of elements scanned, the size of intermediate results and query performance. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Indexing and querying XML using extended Dewey labeling scheme", "paper_id": "WOS:000286294700003"}