{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "real-time_tasks"}, {"score": 0.028851096418336983, "phrase": "proposed_method"}, {"score": 0.004602773636967002, "phrase": "dynamic_scheduling"}, {"score": 0.0044219992735047954, "phrase": "single_and_multiple_transient_faults"}, {"score": 0.0036921366375716005, "phrase": "tasks_utilization"}, {"score": 0.0036188435232325337, "phrase": "defined_criticality_threshold"}, {"score": 0.0035648266669315943, "phrase": "proposed_scheduling_method"}, {"score": 0.0035292625231068517, "phrase": "current_ready_tasks"}, {"score": 0.003424677513304057, "phrase": "noncritical_ones"}, {"score": 0.0032085525502105836, "phrase": "appropriate_fault-tolerance_policy"}, {"score": 0.003113441660343867, "phrase": "scheduling_decisions"}, {"score": 0.0029463123778313196, "phrase": "scheduling_feasibility"}, {"score": 0.0028446460307503343, "phrase": "total_tasks_execution_time"}, {"score": 0.0026252106881752067, "phrase": "rollback_recovery"}, {"score": 0.0025989960809479104, "phrase": "hardware_replication"}, {"score": 0.0025730425700096365, "phrase": "experimental_results"}, {"score": 0.0024842242921857705, "phrase": "multiple_transient_faults"}, {"score": 0.002447101794397243, "phrase": "feasibility_rate"}, {"score": 0.0021693692831601745, "phrase": "traditional_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Real-time systems", " Dynamic scheduling", " Fault tolerance", " Multicore processors"], "paper_abstract": "This paper presents a dynamic scheduling for real-time tasks in multicore processors to tolerate single and multiple transient faults. The scheduling is performed based on three important issues: (I) current released tasks, (2) current available processor cores, and (3) consideration of the number of faults and their occurrences. Using tasks utilization along with a defined criticality threshold in the proposed scheduling method, current ready tasks are divided into critical- and noncritical ones. Based on whether a task is critical or noncritical, an appropriate fault-tolerance policy is exploited. Moreover, scheduling decisions are made to fulfill two key goals: (1) increasing scheduling feasibility and (2) decreasing the total tasks execution time. Several simulation experiments are carried out to compare the proposed method with two well-known methods, called checkpointing with rollback recovery and hardware replication. Experimental results reveal that in the presence of multiple transient faults, the feasibility rate of the proposed method is considerably higher than the other well-known fault-tolerance methods. Moreover, the average timing overhead of this method is lower than the traditional methods. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "DFTS: A dynamic fault-tolerant scheduling for real-time tasks in multicore processors", "paper_id": "WOS:000330751800010"}