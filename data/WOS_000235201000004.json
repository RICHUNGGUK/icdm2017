{"auto_keywords": [{"score": 0.03491695658737417, "phrase": "bytesurgeon"}, {"score": 0.010612388045651601, "phrase": "smalltalk"}, {"score": 0.004611224230543916, "phrase": "wide_interest"}, {"score": 0.004458722048888919, "phrase": "off-the-shelf_component_adaptation"}, {"score": 0.0042495320879288615, "phrase": "new_language_features"}, {"score": 0.004188702178897384, "phrase": "current_wave"}, {"score": 0.004108942392772092, "phrase": "advanced_technologies"}, {"score": 0.004069631519385246, "phrase": "better_separation"}, {"score": 0.003953932197201054, "phrase": "aspect-oriented_programming"}, {"score": 0.003878625406105021, "phrase": "solid_testimony"}, {"score": 0.0037322713756404295, "phrase": "almost_all_proposals"}, {"score": 0.003608798846371487, "phrase": "java"}, {"score": 0.0035399770257915466, "phrase": "tool_providers"}, {"score": 0.0035060903664150115, "phrase": "severe_restrictions"}, {"score": 0.003215295260684715, "phrase": "binary_code"}, {"score": 0.003123808471618783, "phrase": "full_advantage"}, {"score": 0.003034916887102753, "phrase": "squeak_environment"}, {"score": 0.0029914213495838998, "phrase": "bytecode_transformation"}, {"score": 0.0026142814606853037, "phrase": "source_code"}, {"score": 0.002527654365712841, "phrase": "appropriate_high-level_abstractions"}, {"score": 0.0023972750359328235, "phrase": "bytecode_level"}, {"score": 0.0022626835039082746, "phrase": "method_wrappers"}, {"score": 0.0022195180846985123, "phrase": "mop"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["smalltalk", " object-oriented programming", " bytecode transformation", " metaprogramming"], "paper_abstract": "Transforming programs to alter their semantics is of wide interest, for purposes as diverse as off-the-shelf component adaptation, optimizatiom. trace generation, and experimentation with new language features. The current wave of interest in advanced technologies for better separation of concerns, such as aspect-oriented programming, is a solid testimony of this fact. Strangely enough, almost all proposals are formulated in the context of Java, in which tool providers encounter severe restrictions due to the rigidity of the environment. This paper presents BYTESURGEON, a library to transform binary code in Smalltalk. BYTESURGEON takes full advantage of the flexibility of the Squeak environment to enable bytecode transformation at runtime, thereby allowing dynamic, on-the-fly modification of applications. BYTESURGEON operates on bytecode in order to cope with situations where the source code is not available, while providing appropriate high-level abstractions so that users do not need to program at the bytecode level. We illustrate the use of BYTESURGEON via the implementation of method wrappers and a simple MOP, and report on its efficiency. (c) 2005 Elsevier Ltd. All rights reserved.", "paper_title": "Runtime bytecode transformation for Smalltalk", "paper_id": "WOS:000235201000004"}