{"auto_keywords": [{"score": 0.04758008554756529, "phrase": "np"}, {"score": 0.02596833260452478, "phrase": "bandwidth"}, {"score": 0.00481495049065317, "phrase": "exact_algorithms"}, {"score": 0.0043258453436258405, "phrase": "long_time"}, {"score": 0.004175297442270952, "phrase": "feige"}, {"score": 0.003923528861921195, "phrase": "kilian"}, {"score": 0.0036274201504044685, "phrase": "polynomial_space_algorithm"}, {"score": 0.0034118234596993836, "phrase": "new_algorithm"}, {"score": 0.0029270797740550973, "phrase": "closer_look"}, {"score": 0.00283870598459543, "phrase": "major_modification"}, {"score": 0.002255431275670053, "phrase": "conquer_analysis"}, {"score": 0.0022041312401435346, "phrase": "time_complexity"}, {"score": 0.0021049977753042253, "phrase": "graph_layout_problems"}], "paper_keywords": ["Bandwidth", " exact algorithms", " Measure & Conquer"], "paper_abstract": "We deal with exact algorithms for BANDWIDTH, a long studied NP-hard problem. For a long time nothing better than the trivial O*(n!)1 exhaustive search was known. In 2000, Feige and Kilian [Feige 20001 came up with a O(10*)-time and polynomial space algorithm. In this article we present a new algorithm that solves BANDWIDTH in O*(5(n)) time and O*(2(n)) space. Then, we take a closer look and introduce a major modification that makes it run in O(4.83(n)) time with a cost of a O*(4(n)) space complexity. This modification allowed us to perform the Measure & Conquer analysis for the time complexity which was not used for graph layout problems before.", "paper_title": "Even Faster Exact Bandwidth", "paper_id": "WOS:000301391300008"}