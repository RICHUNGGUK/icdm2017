{"auto_keywords": [{"score": 0.030919375285442998, "phrase": "streamer"}, {"score": 0.00481495049065317, "phrase": "distributed_memory"}, {"score": 0.004646088032529303, "phrase": "model_traffic_patterns"}, {"score": 0.004598933498016774, "phrase": "social_interactions"}, {"score": 0.004529093447865156, "phrase": "web_pages"}, {"score": 0.003946195919158241, "phrase": "closeness_centrality"}, {"score": 0.0038271712887391015, "phrase": "global_metric"}, {"score": 0.00342054627009158, "phrase": "relative_importance"}, {"score": 0.0032836104153151973, "phrase": "best_known_algorithm"}, {"score": 0.0032172054825137866, "phrase": "cc_scores"}, {"score": 0.0027741761880779535, "phrase": "closeness_centrality_scores"}, {"score": 0.002659718788231318, "phrase": "spmm"}, {"score": 0.002466510117718297, "phrase": "numa_effects"}, {"score": 0.002367676766637248, "phrase": "closeness_centrality_values"}, {"score": 0.0023435920614377306, "phrase": "real-life_networks"}, {"score": 0.0022382002476510573, "phrase": "almost_linear_speedups"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Closeness centrality", " Incremental centrality", " BPS", " Parallel programming", " Cluster computing"], "paper_abstract": "Networks are commonly used to model traffic patterns, social interactions, or web pages. The vertices in a network do not possess the same characteristics: some vertices are naturally more connected and some vertices can be more important. Closeness centrality (CC) is a global metric that quantifies how important is a given vertex in the network. When the network is dynamic and keeps changing, the relative importance of the vertices also changes. The best known algorithm to compute the CC scores makes it impractical to recompute them from scratch after each modification. In this paper, we propose STREAMER, a distributed memory framework for incrementally maintaining the closeness centrality scores of a network upon changes. It leverages pipelined, replicated parallelism, and SpMM-based BFSs, and it takes NUMA effects into account. It makes maintaining the closeness centrality values of real-life networks with millions of interactions significantly faster and obtains almost linear speedups on a 64 nodes 8 threads/node cluster. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Incremental closeness centrality in distributed memory", "paper_id": "WOS:000359174600002"}