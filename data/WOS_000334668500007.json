{"auto_keywords": [{"score": 0.04426252329364738, "phrase": "process_authentication"}, {"score": 0.040937157136485436, "phrase": "process_names"}, {"score": 0.00481495049065317, "phrase": "high_system_assurance"}, {"score": 0.004612376827433774, "phrase": "modern_operating_system_kernels"}, {"score": 0.004546755482549647, "phrase": "process_authentication_mechanism"}, {"score": 0.004397230847865867, "phrase": "user-level_application"}, {"score": 0.0041522059428827345, "phrase": "process_identification"}, {"score": 0.003773680962197766, "phrase": "os_environment"}, {"score": 0.003597514862052876, "phrase": "executable_paths"}, {"score": 0.003176899769744057, "phrase": "system_assurance"}, {"score": 0.0031018195951638882, "phrase": "lightweight_secure_application_authentication_framework"}, {"score": 0.00305762327908599, "phrase": "user-level_applications"}, {"score": 0.0027129118211250336, "phrase": "system_call_monitoring_framework"}, {"score": 0.0026742419973883134, "phrase": "unauthorized_use"}, {"score": 0.0026235360404084137, "phrase": "system_resources"}, {"score": 0.002488985155689794, "phrase": "requested_system"}, {"score": 0.0023500947553957074, "phrase": "linux"}, {"score": 0.0022401855403251653, "phrase": "reasonably_low_overhead"}, {"score": 0.0021560018573288666, "phrase": "cryptographically_authenticating_applications"}, {"score": 0.0021049977753042253, "phrase": "operating_system"}], "paper_keywords": ["Operating system security", " process authentication", " secret application credential", " system call monitoring"], "paper_abstract": "This paper points out the need in modern operating system kernels for a process authentication mechanism, where a process of a user-level application proves its identity to the kernel. Process authentication is different from process identification. Identification is a way to describe a principal; PIDs or process names are identifiers for processes in an OS environment. However, the information such as process names or executable paths that is conventionally used by OS to identify a process is not reliable. As a result, malware may impersonate other processes, thus violating system assurance. We propose a lightweight secure application authentication framework in which user-level applications are required to present proofs at runtime to be authenticated to the kernel. To demonstrate the application of process authentication, we develop a system call monitoring framework for preventing unauthorized use or access of system resources. It verifies the identity of processes before completing the requested system calls. We implement and evaluate a prototype of our monitoring architecture in Linux. The results from our extensive performance evaluation show that our prototype incurs reasonably low overhead, indicating the feasibility of our approach for cryptographically authenticating applications and their processes in the operating system.", "paper_title": "Process Authentication for High System Assurance", "paper_id": "WOS:000334668500007"}