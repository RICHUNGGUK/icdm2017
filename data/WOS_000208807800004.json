{"auto_keywords": [{"score": 0.050073745612801646, "phrase": "derivative_computation"}, {"score": 0.047468276711237926, "phrase": "automatic_differentiation"}, {"score": 0.0047555023078686386, "phrase": "generated_libraries"}, {"score": 0.004469042910390712, "phrase": "valuable_technique"}, {"score": 0.004199766284749713, "phrase": "source_transformation"}, {"score": 0.004122179528285764, "phrase": "highest_efficiency_results"}, {"score": 0.00402094658848301, "phrase": "gradient_computations"}, {"score": 0.0038978806337961565, "phrase": "operator_overloading"}, {"score": 0.003825849505589868, "phrase": "viable_alternative"}, {"score": 0.0037551444630619015, "phrase": "application_contexts"}, {"score": 0.0035951877427580006, "phrase": "higher_order_derivatives"}, {"score": 0.0032143649757754595, "phrase": "currently_available_source_transformation_tools"}, {"score": 0.003039311963787733, "phrase": "code_generator"}, {"score": 0.002700348931172875, "phrase": "generated_code"}, {"score": 0.0025691622090542304, "phrase": "limited_loop_unrolling"}, {"score": 0.0025059724686541263, "phrase": "main_focus"}, {"score": 0.002429161048032688, "phrase": "multithreaded_derivative_computation"}, {"score": 0.002325554982412043, "phrase": "synchronous_scheme"}, {"score": 0.002296837388975746, "phrase": "fortran"}, {"score": 0.0022402661832994094, "phrase": "test_results"}, {"score": 0.0021851480717840484, "phrase": "proof-of-concept_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Automatic differentiation", " Operator overloading", " Generated code", " Loop unrolling", " Multithreaded computation"], "paper_abstract": "The computation of derivatives via automatic differentiation is a valuable technique in many science and engineering applications. While the implementation of automatic differentiation via source transformation yields the highest efficiency results, particularly for gradient computations, the implementation via operator overloading remains a viable alternative for some application contexts. Examples include the computation of higher order derivatives or cases where C++ as the language of choice still proves to be too complicated for the currently available source transformation tools. In this paper, we utilize a code generator to create libraries that overload intrinsics for derivative computation, and discuss approaches to improve the efficiency of the generated code. We first discuss the use of limited loop unrolling, but the main focus of the paper is multithreaded derivative computation, in particular an asynchronous scheme for C++ and a synchronous scheme for Fortran. We present test results obtained with a proof-of-concept implementation. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Multithreaded derivative computation with generated libraries", "paper_id": "WOS:000208807800004"}