{"auto_keywords": [{"score": 0.03558890411262225, "phrase": "class_diagrams"}, {"score": 0.015225786405218465, "phrase": "uml_class_diagrams"}, {"score": 0.013922654348885188, "phrase": "logical_inconsistency"}, {"score": 0.009849657952163065, "phrase": "exptime"}, {"score": 0.00481495049065317, "phrase": "restricted_uml_class_diagrams"}, {"score": 0.004543193737836748, "phrase": "visual_specification"}, {"score": 0.004484908028307205, "phrase": "software_systems"}, {"score": 0.0040708542958968605, "phrase": "tractable_consistency_checking"}, {"score": 0.003694884775158077, "phrase": "first-order_predicate_logic"}, {"score": 0.003331915219811852, "phrase": "different_expressive_powers"}, {"score": 0.0032468685934998335, "phrase": "optimized_algorithms"}, {"score": 0.0031038434681956396, "phrase": "np"}, {"score": 0.00306339262467474, "phrase": "pspace"}, {"score": 0.0028530201960995896, "phrase": "class_diagram"}, {"score": 0.0024586427394152196, "phrase": "completeness_constraints"}, {"score": 0.0023650305205893353, "phrase": "value_types"}, {"score": 0.0021049977753042253, "phrase": "meaningful_restriction"}], "paper_keywords": [""], "paper_abstract": "Automatic debugging of UML class diagrams helps in the visual specification of software systems because users cannot detect errors in logical inconsistency easily. This paper focuses on tractable consistency checking of UML class diagrams. We accurately identify inconsistencies in these diagrams by translating them into first-order predicate logic generalized by counting quantifiers and classify their expressivities by eliminating some components. For class diagrams of different expressive powers, we introduce optimized algorithms that compute their respective consistencies in P, NP, PSPACE, or EXPTIME with respect to the size of a class diagram. In particular, for two cases in which class diagrams contain (i) disjointness constraints and overwriting/multiple inheritances and (ii) these components along with completeness constraints, the restriction of attribute value types decreases the complexities from EXPTIME to P and PSPACE. Additionally, we confirm the existence of a meaningful restriction of class diagrams that prevents any logical inconsistency.", "paper_title": "Consistency checking algorithms for restricted UML class diagrams", "paper_id": "WOS:000235837300013"}