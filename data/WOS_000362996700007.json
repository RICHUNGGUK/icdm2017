{"auto_keywords": [{"score": 0.02644989528682113, "phrase": "matlab"}, {"score": 0.016656070017498827, "phrase": "julia"}, {"score": 0.00481495049065317, "phrase": "multiple_trace_transform_implementations"}, {"score": 0.004483450050677258, "phrase": "programming_languages"}, {"score": 0.004352123742308589, "phrase": "exact_application"}, {"score": 0.0041995784967999985, "phrase": "better_choice"}, {"score": 0.004028326293950714, "phrase": "productive_environment"}, {"score": 0.00368442237104581, "phrase": "poor_choices"}, {"score": 0.003513133457324989, "phrase": "case_study_algorithm"}, {"score": 0.0034715658596258018, "phrase": "multiple_programming_languages"}, {"score": 0.0032709661258673206, "phrase": "case_study"}, {"score": 0.0031750418391373035, "phrase": "trace_transform"}, {"score": 0.0030273620861817055, "phrase": "widely_used_class"}, {"score": 0.002991524908432975, "phrase": "integral_transforms"}, {"score": 0.0028354207806133153, "phrase": "highly_optimized_version"}, {"score": 0.002801849371896573, "phrase": "nvidia_graphics_processing_units"}, {"score": 0.002719644855867468, "phrase": "productivity_overview"}, {"score": 0.0026714812866037584, "phrase": "in-depth_performance_analysis"}, {"score": 0.002428617044669043, "phrase": "best_choice"}, {"score": 0.002329412930430366, "phrase": "interesting_emerging_choice"}, {"score": 0.0022881443200668886, "phrase": "realistic_images"}, {"score": 0.002168664249034289, "phrase": "best_performance"}, {"score": 0.0021049977753042253, "phrase": "high_development_cost"}], "paper_keywords": ["Trace transform", " MATLAB", " MEX", " Octave", " Scilab", " C plus", " OpenMP", " CUDA", " Julia"], "paper_abstract": "Scientific algorithms are designed and implemented in a variety of programming languages. Depending on the exact application, some languages are a better choice than others: some offer a productive environment while others focus on performance. Selecting a language is often difficult, with poor choices resulting in much higher development times. By implementing a case study algorithm in multiple programming languages, we compare their pros and cons. As a case study, we selected the trace transform, an image processing algorithm from the widely used class of integral transforms. We describe each implementation, including a highly optimized version for NVIDIA graphics processing units, and present a productivity overview and an in-depth performance analysis, from which we draw more generic conclusions. We have found that MATLAB is still the best choice overall, but Julia proves an interesting emerging choice. For realistic images, our compute unified device architecture (CUDA) implementation offers the best performance, albeit at a high development cost.", "paper_title": "Case study of multiple trace transform implementations", "paper_id": "WOS:000362996700007"}