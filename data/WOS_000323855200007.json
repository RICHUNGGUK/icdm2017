{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multi-domain_clock"}, {"score": 0.004730158389701481, "phrase": "conventional_clock_skew_scheduling"}, {"score": 0.004688487032769242, "phrase": "css"}, {"score": 0.004626255242038005, "phrase": "sequential_circuits"}, {"score": 0.004444921827311577, "phrase": "parametric_shortest_path_algorithm"}, {"score": 0.004405596416783185, "phrase": "howard's_algorithm"}, {"score": 0.004103212598803194, "phrase": "large_set"}, {"score": 0.004066898031169739, "phrase": "arbitrary_dedicated_clock_delays"}, {"score": 0.003977505904363489, "phrase": "multi-domain_clock_skew_scheduling"}, {"score": 0.003770869401884267, "phrase": "total_number"}, {"score": 0.003737485125097945, "phrase": "clock_delays"}, {"score": 0.0036553070575015344, "phrase": "new_problem"}, {"score": 0.003404244237372396, "phrase": "novel_method"}, {"score": 0.003299880298525127, "phrase": "mild_restrictions"}, {"score": 0.0031845067058084583, "phrase": "special_mixed_integer_linear_programming_problem"}, {"score": 0.003073154478201771, "phrase": "similar_techniques"}, {"score": 0.003032405563826263, "phrase": "css_problem"}, {"score": 0.0029789104204803137, "phrase": "solution_quality"}, {"score": 0.002900426826591769, "phrase": "critical-cycle-oriented_refinement"}, {"score": 0.0027989800906333784, "phrase": "optimal_solutions"}, {"score": 0.0026771333996253783, "phrase": "experimental_results"}, {"score": 0.0026534064006291853, "phrase": "large_circuits"}, {"score": 0.002629889135655667, "phrase": "opencores_benchmarks"}, {"score": 0.002537880772794665, "phrase": "existing_algorithms"}, {"score": 0.002482013330276732, "phrase": "runtime_performance"}, {"score": 0.0023010815714140467, "phrase": "mdcss_problem"}, {"score": 0.0022705467477443417, "phrase": "preprocessing_step"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Clock skew scheduling", " Multi-domain", " Minimum cycle ratio", " Timing optimization"], "paper_abstract": "Conventional clock skew scheduling (CSS) for sequential circuits can be solved effectively using methods including the parametric shortest path algorithm and Howard's algorithm. Nevertheless, its application is practically limited due to the difficulties in reliably implementing a large set of arbitrary dedicated clock delays for flip-flops. Thus multi-domain clock skew scheduling (MDCSS) was proposed to tackle this by constraining the total number of clock delays. However, this new problem is hard to solve optimally in general. In this paper, we propose a novel method to efficiently solve it. Under mild restrictions, the problem is transformed into a special mixed integer linear programming problem, which can be solved optimally using similar techniques for the CSS problem. Then the solution quality is further improved by a critical-cycle-oriented refinement. As a result, our method obtains optimal solutions for 88 of the 93 tests on ISCAS89 benchmarks. The experimental results on large circuits in Opencores benchmarks also demonstrate its efficiency of at least one order faster than existing algorithms. To improve the runtime performance, we also devise a graph pruning algorithm that can be applied to methods for the MDCSS problem as a preprocessing step. Its application on our method shows a speedup of 2.66X on average. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "SmipRef: An efficient method for multi-domain clock skew scheduling", "paper_id": "WOS:000323855200007"}