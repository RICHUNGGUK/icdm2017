{"auto_keywords": [{"score": 0.04718561448870172, "phrase": "test_data_generators"}, {"score": 0.00481495049065317, "phrase": "random_data"}, {"score": 0.004760765880314089, "phrase": "uniform_distribution"}, {"score": 0.0031845067058084613, "phrase": "labour_intensive_and_error"}, {"score": 0.0030955250132409964, "phrase": "handwritten_generators"}, {"score": 0.003026127736667187, "phrase": "unpredictable_distribution"}, {"score": 0.002671263324230699, "phrase": "better_performance"}, {"score": 0.0024814079299143536, "phrase": "predictable_way"}, {"score": 0.0024534188907003726, "phrase": "experimental_evaluation"}, {"score": 0.0023579143175099324, "phrase": "automatically_derived_generators"}, {"score": 0.0022661190184053628, "phrase": "handwritten_ones"}, {"score": 0.0021049977753042253, "phrase": "realistic_applications"}], "paper_keywords": [""], "paper_abstract": "We present a technique for automatically deriving test data generators from a given executable predicate representing the set of values we are interested in generating. The distribution of these generators is uniform over values of a given size. To make the generation efficient, we rely on laziness of the predicate, allowing us to prune the space of values quickly. In contrast, implementing test data generators by hand is labour intensive and error prone. Moreover, handwritten generators often have an unpredictable distribution of values, risking that some values are arbitrarily underrepresented. We also present a variation of the technique that has better performance, but where the distribution is skewed in a limited, albeit predictable way. Experimental evaluation of the techniques shows that the automatically derived generators are much easier to define than handwritten ones, and their performance, while lower, is adequate for some realistic applications.", "paper_title": "Generating constrained random data with uniform distribution", "paper_id": "WOS:000368240300001"}