{"auto_keywords": [{"score": 0.035698766494454484, "phrase": "hist"}, {"score": 0.00481495049065317, "phrase": "mining_version_histories"}, {"score": 0.004758188582347737, "phrase": "code_smells"}, {"score": 0.004628320711601916, "phrase": "poor_design_and_implementation_choices"}, {"score": 0.0045557008859819234, "phrase": "code_comprehension"}, {"score": 0.0043103495043308755, "phrase": "detection_techniques"}, {"score": 0.0042426974826585695, "phrase": "structural_information"}, {"score": 0.004110549138321181, "phrase": "code_elements"}, {"score": 0.003935513160201076, "phrase": "historical_information"}, {"score": 0.003904495523681369, "phrase": "smell_detection"}, {"score": 0.0037828412206668206, "phrase": "change_history_information"}, {"score": 0.0034949911830140967, "phrase": "blob"}, {"score": 0.0027668603377225564, "phrase": "first_study"}, {"score": 0.002596937660779953, "phrase": "competitive_approaches"}, {"score": 0.002556109032208553, "phrase": "code_analysis"}, {"score": 0.0025259082947443343, "phrase": "single_system's_snapshot"}, {"score": 0.002456816881853114, "phrase": "second_study"}, {"score": 0.0023150468182777813, "phrase": "competitive_code_analysis_techniques"}, {"score": 0.0022876877275935757, "phrase": "developers'_perception"}, {"score": 0.0022696277881969896, "phrase": "poor_design"}, {"score": 0.0022517100995552443, "phrase": "implementation_choices"}, {"score": 0.0021471293746360026, "phrase": "code_smell_instances"}], "paper_keywords": ["Code smells", " mining software repositories", " empirical studies"], "paper_abstract": "Code smells are symptoms of poor design and implementation choices that may hinder code comprehension, and possibly increase change-and fault-proneness. While most of the detection techniques just rely on structural information, many code smells are intrinsically characterized by how code elements change over time. In this paper, we propose Historical Information for Smell deTection (HIST), an approach exploiting change history information to detect instances of five different code smells, namely Divergent Change, Shotgun Surgery, Parallel Inheritance, Blob, and Feature Envy. We evaluate HIST in two empirical studies. The first, conducted on 20 open source projects, aimed at assessing the accuracy of HIST in detecting instances of the code smells mentioned above. The results indicate that the precision of HIST ranges between 72 and 86 percent, and its recall ranges between 58 and 100 percent. Also, results of the first study indicate that HIST is able to identify code smells that cannot be identified by competitive approaches solely based on code analysis of a single system's snapshot. Then, we conducted a second study aimed at investigating to what extent the code smells detected by HIST (and by competitive code analysis techniques) reflect developers' perception of poor design and implementation choices. We involved 12 developers of four open source projects that recognized more than 75 percent of the code smell instances identified by HIST as actual design/implementation problems.", "paper_title": "Mining Version Histories for Detecting Code Smells", "paper_id": "WOS:000354475400003"}