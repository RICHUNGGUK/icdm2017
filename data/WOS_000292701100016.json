{"auto_keywords": [{"score": 0.02450721758045108, "phrase": "yap"}, {"score": 0.00481495049065317, "phrase": "linear-based_strategies"}, {"score": 0.004674952036988355, "phrase": "logic_programs"}, {"score": 0.004620093797504386, "phrase": "tabled_evaluation"}, {"score": 0.004539005582217309, "phrase": "recognized_and_powerful_technique"}, {"score": 0.00438105507792004, "phrase": "traditional_prolog_systems"}, {"score": 0.004228577663320847, "phrase": "redundant_subcomputations"}, {"score": 0.00405735420159564, "phrase": "tabling_mechanisms"}, {"score": 0.003802135020791801, "phrase": "suspension-based_mechanisms"}, {"score": 0.0036914757355166966, "phrase": "better_results"}, {"score": 0.0033584796908285894, "phrase": "linear_tabling_mechanisms"}, {"score": 0.0031100973266506163, "phrase": "standard_linear_tabled_evaluation"}, {"score": 0.0029489527539649737, "phrase": "new_strategy"}, {"score": 0.002651213849567608, "phrase": "yap_system"}, {"score": 0.002455009746748708, "phrase": "underlying_execution_environment"}, {"score": 0.0023834640793589435, "phrase": "data_structures"}, {"score": 0.002142696637011647, "phrase": "first_and_fair_comparison"}, {"score": 0.0021049977753042253, "phrase": "different_linear_tabling_strategies"}], "paper_keywords": ["linear tabling", " integration", " implementation"], "paper_abstract": "Tabled evaluation is a recognized and powerful technique that overcomes some limitations of traditional Prolog systems in dealing with recursion and redundant subcomputations. We can distinguish two main categories of tabling mechanisms: suspension-based tabling and linear tabling. While suspension-based mechanisms are considered to obtain better results in general, they have more memory space requirements and are more complex and harder to implement than linear tabling mechanisms. Arguably, the SLDT and Dynamic Reordering of Alternatives (DRA) strategies are the two most successful extensions to standard linear tabled evaluation. In this work, we propose a new strategy, named dynamic reordering of solutions, and we present a framework, on top of the Yap system, that supports the combination of all these three strategies. Our implementation shares the underlying execution environment and most of the data structures used to implement tabling in Yap. We thus argue that all these common features allows us to make a first and fair comparison between these different linear tabling strategies and, therefore, better understand the advantages and weaknesses of each, when used solely or combined with the others.", "paper_title": "On combining linear-based strategies for tabled evaluation of logic programs", "paper_id": "WOS:000292701100016"}