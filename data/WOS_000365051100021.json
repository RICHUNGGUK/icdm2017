{"auto_keywords": [{"score": 0.029613664015831456, "phrase": "cpu."}, {"score": 0.00481495049065317, "phrase": "geostatistical_software_library"}, {"score": 0.004424160689087029, "phrase": "geostatistical_community"}, {"score": 0.004232232993872917, "phrase": "sequential_fortran_codes"}, {"score": 0.003765067028482197, "phrase": "multi-core_era"}, {"score": 0.003704797078215222, "phrase": "cpu_resources"}, {"score": 0.003675023529026644, "phrase": "gslib_algorithms"}, {"score": 0.00363080961099728, "phrase": "large_datasets"}, {"score": 0.0035296940954990964, "phrase": "compute-_and_memory-intensive_applications"}, {"score": 0.0033628392198449134, "phrase": "gslib_applications"}, {"score": 0.003335804608791029, "phrase": "code_optimization"}, {"score": 0.003308986613384597, "phrase": "hybrid_parallel_processing"}, {"score": 0.0032559935867182035, "phrase": "compute-intensive_applications"}, {"score": 0.003229815147800001, "phrase": "minimal_code_modifications"}, {"score": 0.003114584448820957, "phrase": "elapsed_time"}, {"score": 0.0030523478413779686, "phrase": "studied_routines"}, {"score": 0.00301560261110296, "phrase": "multi-core_processing"}, {"score": 0.0029197572138773237, "phrase": "openmp_directives"}, {"score": 0.0027704444816096484, "phrase": "multi-node_processing"}, {"score": 0.0026715589067557526, "phrase": "mpi_messages"}, {"score": 0.002639385610609024, "phrase": "compute_nodes"}, {"score": 0.002282166507956957, "phrase": "desktop_environment"}, {"score": 0.0022365262201954643, "phrase": "multi-node_server"}, {"score": 0.002174155795026218, "phrase": "speedup_and_efficiency_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Geostatistics", " Stochastic simulation", " Kriging", " GSLIB", " Code optimization", " OpenMP", " MPI"], "paper_abstract": "The Geostatistical Software Library (GSLIB) has been used in the geostatistical community for more than thirty years. It was designed as a bundle of sequential Fortran codes, and today it is still in use by many practitioners and researchers. Despite its widespread use, few attempts have been reported in order to bring this package to the multi-core era. Using all CPU resources, GSLIB algorithms can handle large datasets and grids, where tasks are compute- and memory-intensive applications. In this work, a methodology is presented to accelerate GSLIB applications using code optimization and hybrid parallel processing, specifically for compute-intensive applications. Minimal code modifications are added decreasing as much as possible the elapsed time of execution of the studied routines. If multi-core processing is available, the user can activate OpenMP directives to speed up the execution using all resources of the CPU. If multi-node processing is available, the execution is enhanced using MPI messages between the compute nodes.Four case studies are presented: experimental variogram calculation, kriging estimation, sequential gaussian and indicator simulation. For each application, three scenarios (small, large and extra large) are tested using a desktop environment with 4 CPU-cores and a multi-node server with 128 CPU-nodes. Elapsed times, speedup and efficiency results are shown. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Acceleration of the Geostatistical Software Library (GSLIB) by code optimization and hybrid parallel programming", "paper_id": "WOS:000365051100021"}