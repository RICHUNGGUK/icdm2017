{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_pattern_application"}, {"score": 0.04848814465265614, "phrase": "software_patterns"}, {"score": 0.013137393146865097, "phrase": "research_design"}, {"score": 0.010808325067377134, "phrase": "study_design"}, {"score": 0.0047125386314695455, "phrase": "research_design_practices"}, {"score": 0.004626484449627427, "phrase": "expert_knowledge"}, {"score": 0.004584045720295891, "phrase": "successful_solutions"}, {"score": 0.004555968736680118, "phrase": "recurring_problems"}, {"score": 0.004271300595883407, "phrase": "empirical_findings"}, {"score": 0.0039920586058503705, "phrase": "empirical_studies"}, {"score": 0.003943276844539606, "phrase": "human_participants"}, {"score": 0.0038593331981451257, "phrase": "systematic_mapping_study"}, {"score": 0.0035192788686342668, "phrase": "empirical_research_efforts"}, {"score": 0.003111874723370265, "phrase": "object-oriented_design_patterns"}, {"score": 0.0030362200439452585, "phrase": "architectural_patterns"}, {"score": 0.0026273662637635747, "phrase": "final_artifact"}, {"score": 0.002462903804873404, "phrase": "qualitative_measures"}, {"score": 0.0023517568875393345, "phrase": "nine_studies"}, {"score": 0.00217082725339744, "phrase": "participants'_experience_level"}, {"score": 0.0021508655858525683, "phrase": "appropriate_training"}, {"score": 0.0021310870821926917, "phrase": "problem_sets"}, {"score": 0.0021049977753042253, "phrase": "commonly_used_measures"}], "paper_keywords": ["Software pattern", " Mapping study", " Systematic review", " Empirical evaluation", " Empirical design"], "paper_abstract": "Context: Software patterns encapsulate expert knowledge for constructing successful solutions to recurring problems. Although a large collection of software patterns is available in literature, empirical evidence on how well various patterns help in problem solving is limited and inconclusive. The context of these empirical findings is also not well understood, limiting applicability and generalizability of the findings. Objective: To characterize the research design of empirical studies exploring software pattern application involving human participants. Method: We conducted a systematic mapping study to identify and analyze 30 primary empirical studies on software pattern application, including 24 original studies and 6 replications. We characterize the research design in terms of the questions researchers have explored and the context of empirical research efforts. We also classify the studies in terms of measures used for evaluation, and threats to validity considered during study design and execution. Results: Use of software patterns in maintenance is the most commonly investigated theme, explored in 16 studies. Object-oriented design patterns are evaluated in 14 studies while 4 studies evaluate architectural patterns. We identified 10 different constructs with 31 associated measures used to evaluate software patterns. Measures for 'efficiency' and 'usability' are commonly used to evaluate the problem solving process. While measures for 'completeness', 'correctness' and 'quality' are commonly used to evaluate the final artifact. Overall, 'time to complete a task' is the most frequently used measure, employed in 15 studies to measure 'efficiency'. For qualitative measures, studies do not report approaches for minimizing biases 27% of the time. Nine studies do not discuss any threats to validity. Conclusion: Subtle differences in study design and execution can limit comparison of findings. Establishing baselines for participants' experience level, providing appropriate training, standardizing problem sets, and employing commonly used measures to evaluate performance can support replication and comparison of results across studies. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "How have we evaluated software pattern application? A systematic mapping study of research design practices", "paper_id": "WOS:000356110100002"}