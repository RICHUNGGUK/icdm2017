{"auto_keywords": [{"score": 0.01286734108035185, "phrase": "hardware_support"}, {"score": 0.01179340682169213, "phrase": "windows"}, {"score": 0.0048152707581590485, "phrase": "stack"}, {"score": 0.004487989502479992, "phrase": "hijacking_program_controls"}, {"score": 0.0033277936960179892, "phrase": "secure_return_address_stack"}, {"score": 0.003212663446866794, "phrase": "smashing_attacks"}, {"score": 0.002994178996584381, "phrase": "source_code"}, {"score": 0.002670296619878048, "phrase": "multi-thread_application"}, {"score": 0.0025328377393370642, "phrase": "multi-thread_applications"}, {"score": 0.002381365139274329, "phrase": "relative_performance_overhead"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Stack smashing attack", " Buffer overflow", " Memory pointer corruption attack", " Retum address stack", " Binary rewriting"], "paper_abstract": "Stack smashing is one of the most popular techniques for hijacking program controls. Various techniques have been proposed, but most techniques need to alter compilers or require hardware support, and only few of them are developed for Windows. In this paper, we design a Secure Return Address Stack to defeat stack smashing attacks on Windows. Our approach does not need source code and hardware support We also extend our approach to instrument a DLL, a multi-thread application, and DLLs used by multi-thread applications. Benchmark GnuWin32 shows that the relative performance overhead of our approach is only between 3.47% and 8.59%. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An enhancement of return address stack for security", "paper_id": "WOS:000346548400002"}