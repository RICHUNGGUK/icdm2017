{"auto_keywords": [{"score": 0.04955691910341986, "phrase": "stream_processors"}, {"score": 0.01543806385940299, "phrase": "memory_accesses"}, {"score": 0.014569896436523413, "phrase": "srf"}, {"score": 0.010782369631239012, "phrase": "stream_references"}, {"score": 0.00481495049065317, "phrase": "loop-dependent_stream"}, {"score": 0.0043464021636703066, "phrase": "controlled_storage"}, {"score": 0.004175006647851034, "phrase": "current_stream_compilers"}, {"score": 0.0041445748748895365, "phrase": "reuse_exploitation"}, {"score": 0.00406945841245389, "phrase": "simple_stream_references"}, {"score": 0.003937649447496154, "phrase": "compiler_analysis"}, {"score": 0.0035671997165370403, "phrase": "stream_programs"}, {"score": 0.003476963781647026, "phrase": "loop-dependent_stream_references"}, {"score": 0.0031845216286313653, "phrase": "srg"}, {"score": 0.0031382058937207413, "phrase": "identified_reuse"}, {"score": 0.002959617637433, "phrase": "whole_sequences"}, {"score": 0.002895291306821514, "phrase": "partial_sequences"}, {"score": 0.002613056713968863, "phrase": "vector_processing"}, {"score": 0.0023756164484983874, "phrase": "limited_srf_capacity"}, {"score": 0.0021676351850669017, "phrase": "best_existing_compilation_techniques"}, {"score": 0.002128272293291141, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "resultant_speed-up"}], "paper_keywords": ["Algorithms", " Design", " Management", " Performance", " Experimentation", " Stream programming model", " stream professor", " stream register file", " streamc", " stream reuse"], "paper_abstract": "Memory accesses limit the performance of stream processors. By exploiting the reuse of data held in the Stream Register File (SRF), an on-chip, software controlled storage, the number of memory accesses can be reduced. In current stream compilers, reuse exploitation is only attempted for simple stream references, those whose start and end are known. Compiler analysis, from outside of stream processors, does not directly enable the consideration of other more complex stream references. In this article, we propose a transformation to automatically optimize stream programs to exploit the reuse supplied by loop-dependent stream references. The transformation is based on three results: lemmas identifying the reuse supplied by stream references, a new abstract representation called the Stream Reuse Graph (SRG) depicting the identified reuse, and the optimization of the SRG for our transformation. Both the reuse between the whole sequences accessed by stream references and between partial sequences is exploited in the article. In particular, partial reuse and its treatment are quite new and have never, to the best of our knowledge, appeared in scalar and vector processing. At the same time, reusing streams increases the pressure on the SRF, and this presents a problem of which reuse should be exploited within limited SRF capacity. We extend our analysis to achieve this objective. Finally, we implement our techniques based on the StreamC/KernelC compiler that has been optimized with the best existing compilation techniques for stream processors. Experimental results show a resultant speed-up of 1.14 to 2.54 times using a range of benchmarks.", "paper_title": "Exploiting the Reuse Supplied by Loop-Dependent Stream References for Stream Processors", "paper_id": "WOS:000282764900006"}