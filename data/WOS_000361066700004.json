{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "static_race_detection"}, {"score": 0.036539044699620084, "phrase": "iterace"}, {"score": 0.004782848614014638, "phrase": "java_parallel_loops"}, {"score": 0.00473509474652851, "phrase": "significant_progress"}, {"score": 0.004656557209439822, "phrase": "important_problem"}, {"score": 0.004564021871465994, "phrase": "previous_techniques"}, {"score": 0.004518442937844318, "phrase": "general_approach"}, {"score": 0.004355163162038354, "phrase": "low-level_concurrency_constructs"}, {"score": 0.004073196909500369, "phrase": "higher_level"}, {"score": 0.0038350096441245153, "phrase": "major_programming_languages"}, {"score": 0.003671663469605366, "phrase": "extra_semantic_information"}, {"score": 0.003331828027460222, "phrase": "intrinsic_thread"}, {"score": 0.0032005497177523025, "phrase": "new_loop_parallelism_mechanism"}, {"score": 0.0028463798740405665, "phrase": "common_pitfall"}, {"score": 0.002827365415832384, "phrase": "static_analyses"}, {"score": 0.0027618067917046583, "phrase": "seven_case_studies"}, {"score": 0.0027159094186967247, "phrase": "false_warnings"}, {"score": 0.0026618355977665745, "phrase": "six_bugs"}, {"score": 0.002644050667977234, "phrase": "real-world_applications"}, {"score": 0.0023592142778542055, "phrase": "specialization_technique"}, {"score": 0.0023356021521252495, "phrase": "running_time"}, {"score": 0.0021622381640810442, "phrase": "technique's_effect"}, {"score": 0.0021191645265024855, "phrase": "possible_combinations"}], "paper_keywords": ["Reliability", " Verification", " Static race detection", " Java", " synchronization", " static analysis"], "paper_abstract": "Despite significant progress in recent years, the important problem of static race detection remains open. Previous techniques took a general approach and looked for races by analyzing the effects induced by low-level concurrency constructs (e.g., java. lang. Thread). But constructs and libraries for expressing parallelism at a higher level (e.g., fork-join, futures, parallel loops) are becoming available in all major programming languages. We claim that specializing an analysis to take advantage of the extra semantic information provided by the use of these constructs and libraries improves precision and scalability. We present ITERACE, a set of techniques that are specialized to use the intrinsic thread, safety, and dataflow structure of collections and of the new loop parallelism mechanism introduced in Java 8. Our evaluation shows that ITERACE is fast and precise enough to be practical. It scales to programs of hundreds of thousands of lines of code and reports very few race warnings, thus avoiding a common pitfall of static analyses. In five out of the seven case studies, ITERACE reported no false warnings. Also, it revealed six bugs in real-world applications. We reported four of them: one had already been fixed, and three were new and the developers confirmed and fixed them. Furthermore, we evaluate the effect of each specialization technique on the running time and precision of the analysis. For each application, we run the analysis under 32 different configurations. This allows to analyze each technique's effect both alone and in all possible combinations with other techniques.", "paper_title": "Effective Techniques for Static Race Detection in Java Parallel Loops", "paper_id": "WOS:000361066700004"}