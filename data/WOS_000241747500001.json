{"auto_keywords": [{"score": 0.03659429864956849, "phrase": "sb"}, {"score": 0.02619754765714513, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "efficient_synchronization"}, {"score": 0.004734038956773703, "phrase": "-chip_multiprocessors"}, {"score": 0.004634799977448855, "phrase": "optimized_synchronization_techniques"}, {"score": 0.00459568664065473, "phrase": "shared_memory"}, {"score": 0.004537631845923196, "phrase": "chip_multiprocessors"}, {"score": 0.0042944012698533434, "phrase": "noc"}, {"score": 0.004204320052179726, "phrase": "future_mobile_systems"}, {"score": 0.004151188559520802, "phrase": "proposed_solution"}, {"score": 0.003995772867224968, "phrase": "synchronization_operations"}, {"score": 0.0039620308501590795, "phrase": "continuous_polling"}, {"score": 0.0039119492240482, "phrase": "shared_variable"}, {"score": 0.003829877278269543, "phrase": "large_contentions"}, {"score": 0.0031110402375026016, "phrase": "spin_lock_implementation"}, {"score": 0.003071682293903262, "phrase": "constant_number"}, {"score": 0.0030457198309616694, "phrase": "network_transactions"}, {"score": 0.0030199761431186434, "phrase": "memory_accesses"}, {"score": 0.0028944757265206332, "phrase": "efficient_implementation"}, {"score": 0.0028457440091791252, "phrase": "experimental_validation"}, {"score": 0.0027624272421171085, "phrase": "grapes"}, {"score": 0.0026475981474045414, "phrase": "multiprocessor_systems"}, {"score": 0.002391067964886602, "phrase": "coherence_schemes"}, {"score": 0.0023408288327263316, "phrase": "eight-processor_target_architecture"}, {"score": 0.002281930100792185, "phrase": "sb-based_solution"}, {"score": 0.0021229583685841405, "phrase": "synchronization_variables"}, {"score": 0.0021049977753042253, "phrase": "directory-based_coherence_protocol"}], "paper_keywords": ["embedded systems", " energy-aware systems", " multiprocessor system-on-chip (MPSoC)", " network-on-chip (NoC)", " synchronization"], "paper_abstract": "This paper investigates optimized synchronization techniques for shared memory on-chip multiprocessors (CMPs), based on network-on-chip (NoC) and targeted at future mobile systems. The proposed solution is based on the idea of locally performing synchronization operations requiring continuous polling of a shared variable, thus, featuring large contentions (e.g., spin locks and barriers). A hardware (HW) module, the synchronization-operation buffer (SB), has been introduced to queue and to manage the requests issued by the processors. By using this mechanism, we propose a spin lock implementation requiring a constant number of network transactions and memory accesses per lock acquisition. The SB also supports an efficient implementation of barriers. Experimental validation has been carried out by using GRAPES, a cycle-accurate performance/power simulation platform for multiprocessor systems-on-chip (MPSoCs). Two different architectures have been explored to prove that the proposed approach is effective independently from caches and coherence schemes adopted. For an eight-processor target architecture, we show that the SB-based solution achieves up to 50% performance improvement and 30% energy saving with respect to synchronization based on the caching of the synchronization variables and directory-based coherence protocol. Furthermore, we prove the scalability. of the proposed approach when the number of processors increases.", "paper_title": "Efficient synchronization for embedded on-chip multiprocessors", "paper_id": "WOS:000241747500001"}