{"auto_keywords": [{"score": 0.03209407174434937, "phrase": "context-insensitive_analysis"}, {"score": 0.031064946721235453, "phrase": "introspective_analysis"}, {"score": 0.0048149540663384284, "phrase": "context-sensitivity"}, {"score": 0.00465634671242413, "phrase": "primary_approach"}, {"score": 0.004354572391793908, "phrase": "oft-reported_problem"}, {"score": 0.004322267755421529, "phrase": "context-sensitive_analyses"}, {"score": 0.003737934295442975, "phrase": "first_sign"}, {"score": 0.0034954725617970294, "phrase": "program's_size"}, {"score": 0.0033801845720347118, "phrase": "precise_context-sensitive_analyses"}, {"score": 0.0028581775908203683, "phrase": "context-sensitive_analysis"}, {"score": 0.002784540221128404, "phrase": "small_precision_expense"}, {"score": 0.002722930209707764, "phrase": "common_adaptivity_pattern"}, {"score": 0.002508433454626386, "phrase": "program_elements"}, {"score": 0.0024346858809238766, "phrase": "running_time"}, {"score": 0.002389696110283506, "phrase": "technical_challenge"}, {"score": 0.002293616682932668, "phrase": "simple_but_principled_approach"}, {"score": 0.0022013916728990564, "phrase": "dramatic_speedup"}, {"score": 0.0021049977753042253, "phrase": "deep_context-sensitive_analyses"}], "paper_keywords": ["Algorithms", " Languages", " Performance", " points-to analysis", " context-sensitivity", " object-sensitivity", " type-sensitivity"], "paper_abstract": "Context-sensitivity is the primary approach for adding more precision to a points-to analysis, while hopefully also maintaining scalability. An oft-reported problem with context-sensitive analyses, however, is that they are bi-modal: either the analysis is precise enough that it manipulates only manageable sets of data, and thus scales impressively well, or the analysis gets quickly derailed at the first sign of imprecision and becomes orders-of-magnitude more expensive than would be expected given the program's size. There is currently no approach that makes precise context-sensitive analyses (of any flavor: call-site-, object-, or type-sensitive) scale across the board at a level comparable to that of a context-insensitive analysis. To address this issue, we propose introspective analysis: a technique for uniformly scaling context-sensitive analysis by eliminating its performance-detrimental behavior, at a small precision expense. Introspective analysis consists of a common adaptivity pattern: first perform a context-insensitive analysis, then use the results to selectively refine (i.e., analyze context-sensitively) program elements that will not cause explosion in the running time or space. The technical challenge is to appropriately identify such program elements. We show that a simple but principled approach can be remarkably effective, achieving scalability (often with dramatic speedup) for benchmarks previously completely out-of-reach for deep context-sensitive analyses.", "paper_title": "Introspective Analysis: Context-Sensitivity, Across the Board", "paper_id": "WOS:000344455800050"}