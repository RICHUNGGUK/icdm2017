{"auto_keywords": [{"score": 0.049596205816074275, "phrase": "decimal_multiplication"}, {"score": 0.04287039156384935, "phrase": "decimal_carry-save_addition"}, {"score": 0.00481495049065317, "phrase": "decimal_floating-point_multiplication"}, {"score": 0.004623608221548592, "phrase": "financial_analysis"}, {"score": 0.004530794611704416, "phrase": "tax_calculation"}, {"score": 0.004485085675709643, "phrase": "currency_conversion"}, {"score": 0.003991305899593133, "phrase": "binary_carry-save_addition"}, {"score": 0.0038131738052230254, "phrase": "nonpipelined_iterative_implementation"}, {"score": 0.0037555742428544096, "phrase": "multiplier_utilizing_binary_carry-save_addition"}, {"score": 0.0032251796659158696, "phrase": "floating-point_arithmetic"}, {"score": 0.003019189898170698, "phrase": "decimal_fixed-point_multipliers"}, {"score": 0.0029137604783116065, "phrase": "exponent_generation"}, {"score": 0.002884317729022721, "phrase": "sticky_bit_generation"}, {"score": 0.0028120022457134267, "phrase": "intermediate_product"}, {"score": 0.0027414948679658816, "phrase": "exception_detection"}, {"score": 0.0026863605504566924, "phrase": "novel_features"}, {"score": 0.002592523232809191, "phrase": "decimal_floating-point_numbers"}, {"score": 0.0024766636161181544, "phrase": "sticky_bit"}, {"score": 0.0024392031587145728, "phrase": "iterative_design"}, {"score": 0.0023659694724243764, "phrase": "shift_amount"}, {"score": 0.0023301793939902015, "phrase": "efficient_decimal"}, {"score": 0.002294929467537814, "phrase": "iterative_and_parallel_decimal_fixed-point_and_floating-point_multipliers"}, {"score": 0.0021049977753042253, "phrase": "verified_verilog_register-transfer-level_models"}], "paper_keywords": ["Decimal multiplication", " binary coded decimal", " floating-point arithmetic", " serial multiplication", " parallel multiplication", " pipelined multiplication"], "paper_abstract": "Decimal multiplication is important in many commercial applications including financial analysis, banking, tax calculation, currency conversion, insurance, and accounting. This paper presents the design of two decimal floating-point multipliers: one whose partial product accumulation strategy employs decimal carry-save addition and one that employs binary carry-save addition. The multiplier based on decimal carry-save addition favors a nonpipelined iterative implementation. The multiplier utilizing binary carry-save addition allows for an efficient pipelined implementation when latency and throughput are considered more important than area. Both designs comply with specifications for decimal multiplication given in the IEEE 754 Standard for Floating-Point Arithmetic (IEEE 754-2008). The multipliers extend previously published decimal fixed-point multipliers by adding several features, including exponent generation, sticky bit generation, shifting of the intermediate product, rounding, and exception detection and handling. Novel features of the multipliers include support for decimal floating-point numbers, on-the-fly generation of the sticky bit in the iterative design, early estimation of the shift amount, and efficient decimal rounding. Iterative and parallel decimal fixed-point and floating-point multipliers are compared in terms of their area, delay, latency, and throughput based on verified Verilog register-transfer-level models.", "paper_title": "Decimal Floating-Point Multiplication", "paper_id": "WOS:000266273200004"}