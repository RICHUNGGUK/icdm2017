{"auto_keywords": [{"score": 0.04805212023869437, "phrase": "doop"}, {"score": 0.014158697082655046, "phrase": "datalog"}, {"score": 0.009304657577713643, "phrase": "paddle"}, {"score": 0.00481495049065317, "phrase": "doop_framework"}, {"score": 0.004655742198075387, "phrase": "java_programs"}, {"score": 0.004050116768809519, "phrase": "declarative_approach"}, {"score": 0.003916098498242888, "phrase": "full_end-to-end_analysis"}, {"score": 0.0037683358267785435, "phrase": "novel_technique"}, {"score": 0.003714368305523811, "phrase": "highly_recursive_datalog_programs"}, {"score": 0.0035229930971258316, "phrase": "full_order-of-magnitude_improvements"}, {"score": 0.0033900126423990823, "phrase": "lhotak"}, {"score": 0.0033575566897536906, "phrase": "hendren"}, {"score": 0.003169222811082848, "phrase": "context-sensitive_analyses"}, {"score": 0.003108814986752103, "phrase": "exact_same_logical_points"}, {"score": 0.002677964894127131, "phrase": "still_substantial_speedups"}, {"score": 0.002479445650641347, "phrase": "whaley"}, {"score": 0.0023743009016047424, "phrase": "open_problems"}, {"score": 0.0021771713131746636, "phrase": "wide_range"}], "paper_keywords": ["Algorithms", " Languages", " Performance"], "paper_abstract": "We present the Doop framework for points-to analysis of Java programs. Doop builds on the idea of specifying pointer analysis algorithms declaratively, using Datalog: a logic-based language for defining (recursive) relations. We carry the declarative approach further than past work by describing the full end-to-end analysis in Datalog and optimizing aggressively using a novel technique specifically targeting highly recursive Datalog programs. As a result, Doop achieves several benefits, including full order-of-magnitude improvements in runtime. We compare Doop with Lhotak and Hendren's Paddle, which defines the state of the art for context-sensitive analyses. For the exact same logical points-to definitions (and, consequently, identical precision) Doop is more than 15x faster than Paddle for a 1-call-site sensitive analysis of the DaCapo benchmarks, with lower but still substantial speedups for other important analyses. Additionally, Doop scales to very precise analyses that are impossible with Paddle and Whaley et al.'s bddbddb, directly addressing open problems in past literature. Finally, our implementation is modular and can be easily configured to analyses with a wide range of characteristics, largely due to its declarativeness.", "paper_title": "Strictly Declarative Specification of Sophisticated Points-to Analyses", "paper_id": "WOS:000271211300014"}