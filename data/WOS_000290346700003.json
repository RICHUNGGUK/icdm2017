{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "clean_separation"}, {"score": 0.004586531354697466, "phrase": "higher_order_rippling"}, {"score": 0.004404445045826858, "phrase": "proof_search_guidance_technique"}, {"score": 0.004161553532799662, "phrase": "mathematical_induction"}, {"score": 0.003453584878128719, "phrase": "first-order_formulae"}, {"score": 0.0030828215204304473, "phrase": "higher-order_syntax"}, {"score": 0.0028890603352364273, "phrase": "annotated_terms"}, {"score": 0.0027741761880779535, "phrase": "special_substitution"}, {"score": 0.0026423134393535265, "phrase": "key_feature"}, {"score": 0.0022281257694320433, "phrase": "selected_examples"}, {"score": 0.0021049977753042253, "phrase": "lambda_clam"}], "paper_keywords": ["Higher order logic", " Automated theorem proving", " Proof planning", " Rippling"], "paper_abstract": "Rippling is a proof search guidance technique with particular application to proof by mathematical induction. It is based on a concept of annotating the differences between two terms. In its original formulation this annotation was only appropriate to first-order formulae. We use a notion of embedding to adapt these annotations appropriately for higher-order syntax. This representation simplifies the theory of annotated terms, no longer requiring special substitution and unification theorems. A key feature of the representation is that it provides a clean separation of the term and the annotation. We illustrate this with selected examples using our implementation of these ideas in lambda Clam.", "paper_title": "The Use of Embeddings to Provide a Clean Separation of Term and Annotation for Higher Order Rippling", "paper_id": "WOS:000290346700003"}