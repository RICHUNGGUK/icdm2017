{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "logical_systems"}, {"score": 0.049754507386661914, "phrase": "test-driven_development"}, {"score": 0.004467923521931474, "phrase": "tdd"}, {"score": 0.004347972379250724, "phrase": "extreme_programming"}, {"score": 0.004231249907249981, "phrase": "software_engineers"}, {"score": 0.004020740863986328, "phrase": "expected_properties"}, {"score": 0.003939487754302632, "phrase": "development_phase"}, {"score": 0.0037818557818203188, "phrase": "applied_logics"}, {"score": 0.0036305081978734127, "phrase": "software_implementation"}, {"score": 0.003581412258960711, "phrase": "clear_list"}, {"score": 0.003545024951402818, "phrase": "desired_inferences"}, {"score": 0.003380029058401904, "phrase": "system_step"}, {"score": 0.0032668821950788502, "phrase": "seven_advantages"}, {"score": 0.0031467766123827717, "phrase": "logical_theory"}, {"score": 0.0030207674474548403, "phrase": "inferential_power"}, {"score": 0.0029596622424171264, "phrase": "second_important_benefit"}, {"score": 0.0026449626324264275, "phrase": "formal_science"}, {"score": 0.0025826247025542213, "phrase": "empirical_one"}, {"score": 0.0025046245057922557, "phrase": "specific_and_concrete_goals"}, {"score": 0.00240426758768164, "phrase": "formal_theories"}, {"score": 0.0022382002476510573, "phrase": "formal_system"}, {"score": 0.002222994077182071, "phrase": "significant_benefits"}, {"score": 0.0021705796895687864, "phrase": "new_logics"}, {"score": 0.0021049977753042253, "phrase": "open_source_software"}], "paper_keywords": ["Methodology", " Test-driven development", " Applied logic", " Empirical logic", " Logic engineering"], "paper_abstract": "In this paper, I stress the utility of employing test-driven development (TDD) for conceiving logical systems. TDD, originally invented in the context of Extreme Programming, is a methodology widely used by software engineers to conceive and develop programs. Its main principle is to design the tests of the expected properties of the system before the development phase. I argue that this methodology is especially convenient in conceiving applied logics. Indeed, this technique is efficient with most decidable logics having a software implementation. Having a clear list of the desired inferences right from the beginning makes it possible to refine the properties of the system step by step until its completion. I distinguish and detail seven advantages of the usage of TDD for the conception of a logical theory. Most importantly, this methodology increases the predictability of the inferential power of the theory. A second important benefit is that the time required for the conception of the logic goes down dramatically. This methodology will change both ideas and practices. Logic is no longer considered to be a formal science, but rather to be an empirical one. Research in the field is geared toward specific and concrete goals. Programs are considered tools used to verify the conformity of formal theories. To sum up, I defend the view that, in some situations, this way of designing a formal system brings significant benefits, and that the construction of new logics can be conducted similarly to the development of open source software.", "paper_title": "Speed Up the Conception of Logical Systems with Test-Driven Development", "paper_id": "WOS:000209640900004"}