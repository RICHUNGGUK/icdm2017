{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_layout_optimizations"}, {"score": 0.004653120760786245, "phrase": "cache_line"}, {"score": 0.004420472010542188, "phrase": "total_number"}, {"score": 0.0043703658695579085, "phrase": "cache_line_refills"}, {"score": 0.003944112858235306, "phrase": "structure_data_layout_optimizations"}, {"score": 0.00332375606483146, "phrase": "cache_line_utilization"}, {"score": 0.0031754329320561317, "phrase": "lightweight_approach"}, {"score": 0.0031215289677725693, "phrase": "intra-instance_affinity"}, {"score": 0.00308610073274614, "phrase": "inter-instance_affinity"}, {"score": 0.0030337085953063125, "phrase": "complex_memory_trace_analyses"}, {"score": 0.002931569771634119, "phrase": "aslop"}, {"score": 0.0027218799769229596, "phrase": "spec_cpu"}, {"score": 0.0026152363154073707, "phrase": "olden"}, {"score": 0.0025416235470290286, "phrase": "extensive_structure_types"}, {"score": 0.0023196699954340437, "phrase": "maximal_reshaping"}, {"score": 0.002153653728048424, "phrase": "best_results"}], "paper_keywords": ["compiler optimization", " data-layout optimization", " memory hierarchy", " inter-instance affinity", " intra-instance affinity"], "paper_abstract": "By rearranging the data, data layout optimizations improve the utilization of a cache line between two of its successive refills, thus reducing the total number of cache line refills and improving the performance of a program. In this paper, we show that to enable structure data layout optimizations to be effective, two parameters, namely intra-instance affinity and inter-instance affinity, need to be considered at the same time in order to model the cache line utilization more accurately. We also propose a lightweight approach to measure intra-instance affinity and inter-instance affinity to avoid complex memory trace analyses. A prototype, called ASLOP, has been implemented in the Open64 compiler and evaluated using benchmarks from SPEC CPU 2000, SPEC CPU 2006 and Olden benchmark suites that have extensive structure types. Our approach can achieve up to 48.1% performance improvement over the original programs, and 11.9% over the optimized programs using maximal reshaping, an existing approach that is known to produce close to the best results, on the two platforms we tested.", "paper_title": "ASLOP: A field-access affinity-based structure data layout optimizer", "paper_id": "WOS:000293465200001"}