{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multi-tenant_database"}, {"score": 0.04857614522657875, "phrase": "novel_mechanism"}, {"score": 0.04481780851221896, "phrase": "small_tenants"}, {"score": 0.03425988913179591, "phrase": "shared_table"}, {"score": 0.004426664694837159, "phrase": "small_businesses"}, {"score": 0.004312622975366672, "phrase": "large_number"}, {"score": 0.0038179283509963695, "phrase": "multiple_tenants'_data"}, {"score": 0.003592207774973802, "phrase": "existing_solutions"}, {"score": 0.003352510981201335, "phrase": "layer"}, {"score": 0.0033021988455635403, "phrase": "possible_reference_constraints"}, {"score": 0.00304435946188921, "phrase": "active_tenants"}, {"score": 0.002940115663512404, "phrase": "dbms"}, {"score": 0.002814759530655965, "phrase": "newly-created_tables"}, {"score": 0.0027822459052173113, "phrase": "active_tenant"}, {"score": 0.0026791410961432677, "phrase": "specified_time_period"}, {"score": 0.0024342079318127423, "phrase": "layer_mechanism"}, {"score": 0.002406079497110672, "phrase": "layer-mysql"}, {"score": 0.002357632753637638, "phrase": "traditional_disk-based_relational_dbms_mysql"}, {"score": 0.002303455608777205, "phrase": "acceptable_performance"}, {"score": 0.0022702274881448692, "phrase": "layer-voltdb"}, {"score": 0.002224510044064184, "phrase": "in-memory_relational_dbms_voltdb"}, {"score": 0.0021797112385590913, "phrase": "experimental_results"}, {"score": 0.0021420294823879292, "phrase": "proposed_mechanism"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Cloud computing", " Multi-tenancy", " Database-as-a-Service"], "paper_abstract": "This paper presents a novel mechanism to cost-efficiently support multi-tenant database as a service (MTD-BaaS) in cloud for small businesses. We aim at the scenarios where a large number of small tenants are served but only some of them are active simultaneously. By small tenants, we mean that a tenant may have many small-sized tables while only a small number of those tables are accessed concurrently for each query. As most MTDBaaS providers, we consolidate multiple tenants' data into the same database management system (DBMS) to reduce the cost of operation. However, our solution distinguishes itself from the existing solutions by a novel mechanism: Load As You quERy (LAYER in short). Concretely, tenants can define and create their own tables with LAYER, and set up possible reference constraints between any two tables. A shared table is used to store all data for all tenants, but only a moderate number of working tables are maintained for answering queries from active tenants. When a new query is submitted, tables involved in the query but not yet in the DBMS will be restored: tables are created, and data are loaded to these newly-created tables. If an active tenant becomes inactive (logs out or no query is issued in a specified time period), tables belonging to the tenant could be dropped when necessary, and updates to these tables would be mirrored to the shared table for backup. We provide two implementations of the LAYER mechanism, one is LAYER-MySQL, which is based on the traditional disk-based relational DBMS MySQL, and can yield high consolidation and acceptable performance; the other is LAYER-VoltDB, which is based on the in-memory relational DBMS VoltDB, and can provide much higher performance. Experimental results validate the feasibility of the proposed mechanism. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "LAYER: A cost-efficient mechanism to support multi-tenant database as a service in cloud", "paper_id": "WOS:000349507000007"}