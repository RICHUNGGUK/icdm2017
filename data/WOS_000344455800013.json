{"auto_keywords": [{"score": 0.030564974451874567, "phrase": "boolean_functions"}, {"score": 0.00481495049065317, "phrase": "row-polymorphic_records"}, {"score": 0.004706699397060569, "phrase": "powerful_concept"}, {"score": 0.004671156704912419, "phrase": "type_systems"}, {"score": 0.004480394224548146, "phrase": "dynamically_typed_languages"}, {"score": 0.004396267325338022, "phrase": "flexible_records"}, {"score": 0.004232702713825967, "phrase": "record_field"}, {"score": 0.004090682761004765, "phrase": "type_inference_algorithm"}, {"score": 0.004013843843250455, "phrase": "runtime_errors"}, {"score": 0.0038498211283780484, "phrase": "clear_notion"}, {"score": 0.0037774893672602506, "phrase": "inferred_types"}, {"score": 0.0036784938661226104, "phrase": "type_annotations"}, {"score": 0.0035820833812158005, "phrase": "typeable_programs"}, {"score": 0.0032702516771609957, "phrase": "empty_record"}, {"score": 0.0030658872249549893, "phrase": "optimal_algorithm"}, {"score": 0.0029629009627331355, "phrase": "derived_inference_rules"}, {"score": 0.002929344511491418, "phrase": "novel_combination"}, {"score": 0.002907184330345933, "phrase": "type_terms"}, {"score": 0.002820202660128789, "phrase": "unification-based_type_inference"}, {"score": 0.0025069746344846397, "phrase": "record_concatenation"}, {"score": 0.0024227171881502636, "phrase": "boolean_satisfiability_problems"}, {"score": 0.0024043803470189455, "phrase": "different_complexity"}, {"score": 0.002305974875400655, "phrase": "smt_problems"}, {"score": 0.0022711961447468114, "phrase": "practical_side"}, {"score": 0.002153540857619362, "phrase": "practical_evidence"}, {"score": 0.0021049977753042253, "phrase": "real-world_applications"}], "paper_keywords": ["Languages", " Theory", " Verification", " type inference", " abstract interpretation", " expansion", " completeness", " row polymorphism", " Boolean functions"], "paper_abstract": "Flexible records are a powerful concept in type systems that form the basis of, for instance, objects in dynamically typed languages. One caveat of using flexible records is that a program may try to access a record field that does not exist. We present a type inference algorithm that checks for these runtime errors. The novelty of our algorithm is that it satisfies a clear notion of completeness: The inferred types are optimal in the sense that type annotations cannot increase the set of typeable programs. Under certain assumptions, our algorithm guarantees the following stronger property: it rejects a program if and only if it contains a path from an empty record to a field access on which the field has not been added. We derive this optimal algorithm by abstracting a semantics to types. The derived inference rules use a novel combination of type terms and Boolean functions that retains the simplicity of unification-based type inference but adds the ability of Boolean functions to express implications, thereby addressing the challenge of combining implications and types. By following our derivation method, we show how various operations such as record concatenation and branching if a field exists lead to Boolean satisfiability problems of different complexity. Analogously, we show that more expressive type systems give rise to SMT problems. On the practical side, we present an implementation of the select and update operations and give practical evidence that these are sufficient in real-world applications.", "paper_title": "Optimal Inference of Fields in Row-Polymorphic Records", "paper_id": "WOS:000344455800013"}