{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "xml_documents"}, {"score": 0.04407953898448545, "phrase": "path_information"}, {"score": 0.009646502321474057, "phrase": "relational_database"}, {"score": 0.009099640701583625, "phrase": "inverted_index"}, {"score": 0.004763895422211728, "phrase": "redundant_path_information"}, {"score": 0.004638602678192715, "phrase": "improved_approach"}, {"score": 0.004492573860101133, "phrase": "large_volume"}, {"score": 0.004059673618719782, "phrase": "reduced_path_information"}, {"score": 0.0038079353103469865, "phrase": "xml_document"}, {"score": 0.003571751184289622, "phrase": "relational_tables"}, {"score": 0.0034777028461723198, "phrase": "root_node"}, {"score": 0.0033680968918579717, "phrase": "existing_xml_storage_methods"}, {"score": 0.003314591878914152, "phrase": "relational_data_model"}, {"score": 0.0030758904011907533, "phrase": "storage_overhead"}, {"score": 0.0030270132320276096, "phrase": "query_processing_performance"}, {"score": 0.0029789104204803137, "phrase": "increased_data_volume"}, {"score": 0.0028850080424618185, "phrase": "xml"}, {"score": 0.002794001681064862, "phrase": "internal_node_path_information"}, {"score": 0.0027495914857929584, "phrase": "leaf_node_path_information"}, {"score": 0.0026205405415623525, "phrase": "data_volume"}, {"score": 0.002578880352208335, "phrase": "large_amount"}, {"score": 0.0023424328921363585, "phrase": "smaller_number"}, {"score": 0.002317533977770783, "phrase": "posting_lists"}, {"score": 0.0022928991183989115, "phrase": "key_words"}, {"score": 0.0021390191069313945, "phrase": "xpath_query_performance"}, {"score": 0.0021049977753042253, "phrase": "existing_methods"}], "paper_keywords": [""], "paper_abstract": "We propose an improved approach that stores and queries a large volume of XML documents in a relational database, while removing the redundancy of path information and using an inverted index on the reduced path information. In order to store XML documents in a relational database, the XML document is decomposed into nodes based on its tree structure, and stored in relational tables with path information from the root node to each node. The existing XML storage methods which use relational data model, usually store path information for every node. Thus, they can increase storage overhead and decrease query processing performance with the increased data volume. Our approach stores only leaf node path information in XML tree structure while finding out internal node path information from the leaf node path information. In this manner, our approach can reduce data volume for a large amount of XML documents to a degree and also reduce the size of inverted index for the path information with the smaller number of posting lists by key words. We show the effectiveness of this approach through several experiments that compare XPath query performance with the existing methods.", "paper_title": "Storing and querying of XML documents without redundant path information", "paper_id": "WOS:000237646100053"}