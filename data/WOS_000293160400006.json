{"auto_keywords": [{"score": 0.004191829338769843, "phrase": "message_forwarding_problem"}, {"score": 0.004127753467337283, "phrase": "message-switched_network"}, {"score": 0.0040438338011467845, "phrase": "system_resources"}, {"score": 0.0035201528214608914, "phrase": "routing_algorithm"}, {"score": 0.0033957904376127187, "phrase": "arbitrary_initialization"}, {"score": 0.003143849342926373, "phrase": "et_al"}, {"score": 0.0029255474957478474, "phrase": "snap-stabilizing_algorithms"}, {"score": 0.0028221322455573624, "phrase": "state_model"}, {"score": 0.002393907896783117, "phrase": "snap-stabilizing_algorithm"}, {"score": 0.002309242063033298, "phrase": "space_complexity"}, {"score": 0.002250601866422547, "phrase": "cournier_et_al"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-stabilization", " Snap-stabilization", " Message forwarding"], "paper_abstract": "A snap-stabilizing protocol, starting from any configuration, always behaves according to its specification. In this paper, we are interested in the message forwarding problem in a message-switched network in which the system resources must be managed in order to deliver messages to any processor of the network. To this end, we use the information provided by a routing algorithm. In the context of an arbitrary initialization (due to stabilization), this information may be corrupted. In Cournier et al. (2009) [1], we show that there exist snap-stabilizing algorithms for this problem (in the state model). This implies that we can request the system to begin forwarding messages without losses even if routing information is initially corrupted. In this paper, we propose another snap-stabilizing algorithm for this problem which improves the space complexity of the one in Cournier et al. (2009) [1]. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "How to improve snap-stabilizing point-to-point communication space complexity?", "paper_id": "WOS:000293160400006"}