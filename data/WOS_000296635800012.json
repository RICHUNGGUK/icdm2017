{"auto_keywords": [{"score": 0.0047761092701293474, "phrase": "multicore_architectures"}, {"score": 0.004512814529823301, "phrase": "parallel_interval_branch"}, {"score": 0.004476399615305783, "phrase": "bound_algorithm"}, {"score": 0.004422325007817267, "phrase": "available_computational_resources"}, {"score": 0.004212453011596424, "phrase": "new_thread"}, {"score": 0.004094639048362357, "phrase": "ancestor_workload"}, {"score": 0.003996271202811961, "phrase": "load_balancing"}, {"score": 0.003760527969356061, "phrase": "interested_use_branch"}, {"score": 0.0037150687722055727, "phrase": "-bound_algorithms"}, {"score": 0.0035386420095120706, "phrase": "proposed_methods"}, {"score": 0.003171615440419782, "phrase": "dynamic_scheduling_policies"}, {"score": 0.002877361619893651, "phrase": "operating_system"}, {"score": 0.002707444334463544, "phrase": "multicore_architecture"}, {"score": 0.002685558057339722, "phrase": "experimental_results"}, {"score": 0.0026423134393535243, "phrase": "appropriate_number"}, {"score": 0.0026209522797963447, "phrase": "running_threads"}, {"score": 0.00241658945942583, "phrase": "thread_creation_decisions"}, {"score": 0.00233936726307301, "phrase": "better_results"}, {"score": 0.0022371907579775796, "phrase": "presented_models"}, {"score": 0.002183347623351868, "phrase": "idle_processor"}, {"score": 0.0021049977753042253, "phrase": "desired_results"}], "paper_keywords": ["Multithreaded", " Shared memory parallel processors", " Performance analysis", " Branch-and-bound", " Global optimization", " Irregularity"], "paper_abstract": "This work studies how to adapt the number of threads of a parallel Interval Branch and Bound algorithm to the available computational resources based on its current performance. Basically, a thread can create a new thread that will process part of the ancestor workload. In this way, load balancing is inherent to the creation of threads. The applications in which we are interested use branch-and-bound algorithms which are highly irregular and therefore difficult to predict. The proposed methods can be used for more predictable algorithms as well. This research complements and does not substitute other devices that improve the exploitation of the system, such as dynamic scheduling policies or work-stealing. Several approaches are presented. They differ in the metrics used and in the need or not having to modify the Operating System (O.S.). The scenario for this research is just one multithreaded application running in a multicore architecture. Experimental results show that the appropriate number of running threads can be determined at run-time, avoiding having to statically establish the number of threads of an application. Thread creation decisions have to be made frequently to obtain better results, but are time-consuming. One of the presented models uses the existence of an idle processor to carry out these decisions, obtaining the desired results.", "paper_title": "Adaptive parallel interval branch and bound algorithms based on their performance for multicore architectures", "paper_id": "WOS:000296635800012"}