{"auto_keywords": [{"score": 0.045745364372558925, "phrase": "finite_deterministic_transition_system"}, {"score": 0.043057418799981796, "phrase": "target_service"}, {"score": 0.00481495049065317, "phrase": "service_composition"}, {"score": 0.003579179502431823, "phrase": "available_services"}, {"score": 0.003095257144856771, "phrase": "new_technique"}, {"score": 0.0027976491158911514, "phrase": "computational_complexity_point"}, {"score": 0.002544616720630384, "phrase": "\"just-in-time\"_fashion"}, {"score": 0.0022423971916457684, "phrase": "possible_compositions"}, {"score": 0.0021049977753042253, "phrase": "actual_composition"}], "paper_keywords": [""], "paper_abstract": "In this paper we study the issue of service composition, for services that export a representation of their behavior in the form of a finite deterministic transition system. In particular, given a specification of the target service requested by the client as a finite deterministic transition system, the problem we face is how we can exploit the computations of the available services for realizing the computations of the target service. While ways to tackle such a problem are known, in this paper we present a new technique that is based on the notion of simulation, which is still optimal from the computational complexity point. Notably, such a technique, opens up the possibility of devising composition in a \"just-in-time\" fashion. Indeed, we show that, by exploiting simulation, it is actually possible to implicitly compute all possible compositions at once, and delay the choice of the actual composition to run-time.", "paper_title": "Automatic service composition via simulation", "paper_id": "WOS:000255611400010"}