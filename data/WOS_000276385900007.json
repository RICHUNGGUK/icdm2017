{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model_checking_software"}, {"score": 0.004458722048888919, "phrase": "appropriate_tools"}, {"score": 0.00429057323623293, "phrase": "embedded_systems_developers"}, {"score": 0.004208881856146758, "phrase": "direct_verification"}, {"score": 0.0039729853486821995, "phrase": "manual_modeling"}, {"score": 0.0038230844545071303, "phrase": "new_approach"}, {"score": 0.0035627492415494216, "phrase": "assembly_code"}, {"score": 0.0034282732966589478, "phrase": "state_space"}, {"score": 0.0033200826267264383, "phrase": "tailored_simulator"}, {"score": 0.0029203055813347874, "phrase": "real_microcontroller"}, {"score": 0.0027741761880779535, "phrase": "abstraction_techniques"}, {"score": 0.002703869368554536, "phrase": "state-explosion_problem"}, {"score": 0.002585081657512565, "phrase": "different_formal_methods"}, {"score": 0.0023178219772486868, "phrase": "explicit_and_symbolic_model_checking_techniques"}, {"score": 0.0022302306304023602, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "applied_abstraction_techniques"}], "paper_keywords": ["Algorithms", " Verification", " Assembly code", " formal verification", " microcontroller", " model checking", " static analysis"], "paper_abstract": "The interest of industries in model checking software for microcontrollers is increasing. However, there are currently no appropriate tools that can be applied by embedded systems developers for the direct verification of software for microcontrollers without the need for manual modeling. This article describes a new approach to model checking software for microcontrollers, which verifies the assembly code of the software. The state space is built using a tailored simulator, which abstracts from time, handles nondeterminism, and creates an overapproximation of the behavior shown by the real microcontroller. Within this simulator, we apply abstraction techniques to tackle the state-explosion problem. In our approach, we combine different formal methods, namely, model checking, static analysis, and abstract interpretation. We also combine explicit and symbolic model checking techniques. This article presents a case study using several programs to demonstrate the efficiency of the applied abstraction techniques and to show the applicability of this approach.", "paper_title": "Model Checking of Software for Microcontrollers", "paper_id": "WOS:000276385900007"}