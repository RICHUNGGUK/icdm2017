{"auto_keywords": [{"score": 0.04967913398382335, "phrase": "software_maintenance"}, {"score": 0.015719716506582538, "phrase": "intelligent_agent_systems"}, {"score": 0.01359345584545469, "phrase": "agent_systems"}, {"score": 0.01090234939389839, "phrase": "impact_analysis"}, {"score": 0.010327181970831307, "phrase": "agent_system"}, {"score": 0.004675652357253327, "phrase": "important_and_lengthy_phase"}, {"score": 0.004617187934074393, "phrase": "software_life-cycle"}, {"score": 0.004408976280483648, "phrase": "total_software_development_costs"}, {"score": 0.0043721365634105565, "phrase": "intelligent_agent_technology"}, {"score": 0.004192484908247302, "phrase": "increasing_number"}, {"score": 0.003986581218661184, "phrase": "new_problems"}, {"score": 0.0038227112550093863, "phrase": "substantial_amount"}, {"score": 0.003634901808509402, "phrase": "agent-based_systems"}, {"score": 0.003427380591229386, "phrase": "critical_issue"}, {"score": 0.0032726467814278345, "phrase": "potential_effects"}, {"score": 0.0029587924529332695, "phrase": "well-known_and_widely-developed_belief_desire_intention_agent_systems"}, {"score": 0.0027317585060414253, "phrase": "source_code"}, {"score": 0.002532724486603177, "phrase": "agent's_behaviour"}, {"score": 0.002204646157481869, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Change impact analysis", " Multi-agent systems"], "paper_abstract": "Software maintenance and evolution is an important and lengthy phase in the software life-cycle which can account for as much as two-thirds of the total software development costs. Intelligent agent technology has evolved rapidly over the past few years as evidenced by the increasing number of agent systems in many different domains. Intelligent agent systems with their distinct characteristics and behaviours introduce new problems in software maintenance. However, in contrast to a substantial amount of work in providing methodologies for analysing, designing and implementing agent-based systems, there has been very little work on maintenance and evolution of agent systems. A critical issue in software maintenance and evolution is change impact analysis: estimating the potential effects of changes before they are made as an agent system evolves. In this paper, we propose two distinct approaches to change impact analysis for the well-known and widely-developed Belief Desire Intention agent systems. On the one hand, our static technique computes the impact of a change by analysing the source code and identifying various dependencies within the agent system. On the other hand, our dynamic technique builds a representation of an agent's behaviour by analysing its execution traces which consist of goals and plans, and uses this representation to estimate impacts. We have implemented both techniques and in this paper we also report on the experimental results that compare their effectiveness in practice. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Supporting change impact analysis for intelligent agent systems", "paper_id": "WOS:000321536100026"}