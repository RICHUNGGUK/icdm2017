{"auto_keywords": [{"score": 0.04844170546569222, "phrase": "static_single_assignment_form"}, {"score": 0.04531922987867075, "phrase": "bytecode_verification"}, {"score": 0.004815215771351813, "phrase": "java"}, {"score": 0.00457013354092966, "phrase": "java_virtual_machines"}, {"score": 0.004153041453795458, "phrase": "iterative_dataflow_analysis"}, {"score": 0.003907586297783078, "phrase": "type_safety"}, {"score": 0.0038401488612789963, "phrase": "temporary_variables"}, {"score": 0.003741166563702403, "phrase": "jvm"}, {"score": 0.003459191419478298, "phrase": "alternative_verification_mechanism"}, {"score": 0.0033699898113395328, "phrase": "jvm_bytecode"}, {"score": 0.002906138793910919, "phrase": "control_flow_merge_points"}, {"score": 0.0027341763737751467, "phrase": "single_pass"}, {"score": 0.0026175952455594277, "phrase": "new_algorithm"}, {"score": 0.0025059724686541263, "phrase": "standard_jvm_bytecode_verifier"}, {"score": 0.0023990982005125763, "phrase": "additional_benefit"}, {"score": 0.0022768346311104735, "phrase": "side_effect"}, {"score": 0.0021049977753042253, "phrase": "subsequent_dynamic_compilation_stage"}], "paper_keywords": ["algorithms", " design", " experimentation", " languages", " performance", " security", " verification", " Java bytecode verification", " static single assignment form", " dataflow analysis"], "paper_abstract": "Java Virtual Machines (JVMs) traditionally perform bytecode verification by way of an iterative dataflow analysis. Bytecode verification is necessary to ensure type safety because temporary variables in the JVM are not statically typed. We present an alternative verification mechanism that transforms JVM bytecode into Static Single Assignment Form (SSA) and thereby propagates definitions directly to uses. Type checking at control flow merge points can then be performed in a single pass. Our prototype implementation of the new algorithm is faster than the standard JVM bytecode verifier. It has the additional benefit of generating SSA as a side effect, which may be immediately useful for a subsequent dynamic compilation stage.", "paper_title": "Java bytecode verification via static single assignment form", "paper_id": "WOS:000259035300004"}