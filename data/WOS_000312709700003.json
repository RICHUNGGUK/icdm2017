{"auto_keywords": [{"score": 0.02619678298426521, "phrase": "nsga"}, {"score": 0.00481495049065317, "phrase": "software_defects"}, {"score": 0.004661446705304497, "phrase": "runtime_errors"}, {"score": 0.004611369021812453, "phrase": "software_maintenance_difficulties"}, {"score": 0.004229556887896042, "phrase": "software_lifecycle"}, {"score": 0.0037352048741373816, "phrase": "manual_process"}, {"score": 0.00355782527287734, "phrase": "two-step_automated_approach"}, {"score": 0.0033888405252810927, "phrase": "maintainability_defects"}, {"score": 0.003352388337911934, "phrase": "source_code"}, {"score": 0.003298441494378465, "phrase": "genetic_programming"}, {"score": 0.0032278559855285945, "phrase": "automatic_generation"}, {"score": 0.0030086877092638945, "phrase": "fastidious_manual_rule_definition_task"}, {"score": 0.0028968858148006823, "phrase": "detected_defects"}, {"score": 0.0028348690177346448, "phrase": "correction_effort"}, {"score": 0.002789226820897593, "phrase": "correction_solution"}, {"score": 0.002685558057339722, "phrase": "refactoring_operations"}, {"score": 0.0025857324180891526, "phrase": "corrected_defects"}, {"score": 0.0025578967205807843, "phrase": "minimal_code_modification_effort"}, {"score": 0.0024896081630179194, "phrase": "non-dominated_sorting_genetic_algorithm"}, {"score": 0.0023712394008737958, "phrase": "best_compromise"}, {"score": 0.002333044307949414, "phrase": "six_open_source_projects"}, {"score": 0.002222102813520549, "phrase": "known_defects"}, {"score": 0.0021745003291048356, "phrase": "proposed_corrections"}, {"score": 0.0021049977753042253, "phrase": "minimal_effort"}], "paper_keywords": ["Maintainability defects", " Software maintenance", " Search-based software engineering", " Multi-objective optimization", " By example", " Effort"], "paper_abstract": "Software defects often lead to bugs, runtime errors and software maintenance difficulties. They should be systematically prevented, found, removed or fixed all along the software lifecycle. However, detecting and fixing these defects is still, to some extent, a difficult, time-consuming and manual process. In this paper, we propose a two-step automated approach to detect and then to correct various types of maintainability defects in source code. Using Genetic Programming, our approach allows automatic generation of rules to detect defects, thus relieving the designer from a fastidious manual rule definition task. Then, we correct the detected defects while minimizing the correction effort. A correction solution is defined as the combination of refactoring operations that should maximize as much as possible the number of corrected defects with minimal code modification effort. We use the Non-dominated Sorting Genetic Algorithm (NSGA-II) to find the best compromise. For six open source projects, we succeeded in detecting the majority of known defects, and the proposed corrections fixed most of them with minimal effort.", "paper_title": "Maintainability defects detection and correction: a multi-objective approach", "paper_id": "WOS:000312709700003"}