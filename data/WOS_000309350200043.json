{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "-free_linked-lists"}, {"score": 0.004671588539217021, "phrase": "linked-list_data_structure"}, {"score": 0.004397487039229447, "phrase": "lock-free_versions"}, {"score": 0.0038186039088445524, "phrase": "practical_wait-free_linked-list"}, {"score": 0.0033156708990372047, "phrase": "better_performance"}, {"score": 0.0029973957125353306, "phrase": "fast-path-slow-path_methodology"}, {"score": 0.002628747284714371, "phrase": "harris's_lock-free_list"}], "paper_keywords": ["Algorithms", " Design", " Performance"], "paper_abstract": "The linked-list data structure is fundamental and ubiquitous. Lock-free versions of the linked-list are well known. However, the existence of a practical wait-free linked-list has been open. In this work we designed such a linked-list. To achieve better performance, we have also extended this design using the fast-path-slow-path methodology. The resulting implementation achieves performance which is competitive with that of Harris's lock-free list, while still guaranteeing non-starvation via wait-freedom. We have also developed a proof for the correctness and the wait-freedom of our design.", "paper_title": "Wait-Free Linked-Lists", "paper_id": "WOS:000309350200043"}