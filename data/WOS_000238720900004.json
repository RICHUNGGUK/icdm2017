{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "recursive_programs"}, {"score": 0.004543193737836748, "phrase": "modem_programming_languages"}, {"score": 0.004342430078306461, "phrase": "software_reliability"}, {"score": 0.0032051601987130207, "phrase": "large_programs"}, {"score": 0.0031435968684569112, "phrase": "recursive_functions"}, {"score": 0.0030832123624449028, "phrase": "exceptional_information"}, {"score": 0.0027444334639134217, "phrase": "new_static_analysis_approach"}, {"score": 0.0026570998719084153, "phrase": "exception_handling"}, {"score": 0.002260301305523054, "phrase": "new_method"}, {"score": 0.0021742244283295986, "phrase": "exception_types"}, {"score": 0.0021049977753042253, "phrase": "recursive_function"}], "paper_keywords": ["exception handling", " programming language", " reliability", " exception propagation", " recursive function", " static analysis"], "paper_abstract": "Exception handling in modem programming languages is a mechanism that can improve software reliability. Since the signature of an C++ function may not specify the set of exceptions that the function can propagate, it is necessary to figure out the exceptions that may be raised during executing program, the origins of them and their propagation paths. Unfortunately, in large programs that contain recursive functions, this exceptional information can be difficult, if not impossible, to determine. Therefore, the paper proposes a new static analysis approach to analyze C++ recursive functions with exception handling constructs. Firstly, it presents a model that can describe the exception handling information for a C++ single function. Then, it proposes a new method to compute the set of exception types that propagate from a recursive function. Finally, the limitations and the applications of the model are discussed.", "paper_title": "An approach to analyzing recursive programs with exception handling constructs", "paper_id": "WOS:000238720900004"}