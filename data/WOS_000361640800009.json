{"auto_keywords": [{"score": 0.03755359252962418, "phrase": "communication_pattern"}, {"score": 0.032970825241389536, "phrase": "regular_router"}, {"score": 0.00481495049065317, "phrase": "fp-nuca"}, {"score": 0.004684157900507474, "phrase": "large_nuca_caches"}, {"score": 0.004652016085325825, "phrase": "nuca_caches"}, {"score": 0.004494570360108983, "phrase": "wire_delays"}, {"score": 0.0043875257506180865, "phrase": "complex_networks"}, {"score": 0.004327500975159818, "phrase": "traditional_approaches"}, {"score": 0.004224418476742716, "phrase": "intelligent_block_placement"}, {"score": 0.004123781267600542, "phrase": "migration_schemes"}, {"score": 0.003997891221012094, "phrase": "novel_approach"}, {"score": 0.003916098498242888, "phrase": "fp-nuca."}, {"score": 0.0038624981944755813, "phrase": "conventional_approaches"}, {"score": 0.0037834649508375544, "phrase": "novel_method"}, {"score": 0.0037060428445111694, "phrase": "last_level_cache"}, {"score": 0.003531474887552889, "phrase": "nuca_cache"}, {"score": 0.0032398798149196432, "phrase": "new_type"}, {"score": 0.0032176163279340206, "phrase": "noc_router"}, {"score": 0.002931569771634119, "phrase": "fast_path_message"}, {"score": 0.002841971477743441, "phrase": "fast_path"}, {"score": 0.002707993764473537, "phrase": "bank_predictor"}, {"score": 0.0025014259919355453, "phrase": "art_protocols"}, {"score": 0.0022092084106039834, "phrase": "freeze_router"}, {"score": 0.0021940216019093383, "phrase": "vhdl"}, {"score": 0.0021564750534280863, "phrase": "additional_fast_path_logic"}, {"score": 0.0021195791482462004, "phrase": "timing_overheads"}, {"score": 0.0021049977753042253, "phrase": "index_terms-nuca_caches"}], "paper_keywords": ["NUCA caches", " freeze router", " bank prediction"], "paper_abstract": "NUCA caches have traditionally been proposed as a solution for mitigating wire delays, and delays introduced due to complex networks on chip. Traditional approaches have reported significant performance gains with intelligent block placement, location, replication, and migration schemes. In this paper, we propose a novel approach in this space, called FP-NUCA. It differs from conventional approaches, and relies on a novel method of co-designing the last level cache and the network on chip. We artificially constrain the communication pattern in the NUCA cache such that all the messages travel along a few predefined paths (fast paths) for each set of banks. We leverage this communication pattern by designing a new type of NOC router called the Freeze router, which augments a regular router by adding a layer of circuitry that gates the clock of the regular router when there is a fast path message waiting to be transmitted. Messages along the fast path do not require buffering, switching, or routing. We incorporate a bank predictor with our novel NOC for reducing the number of messages, and resultant energy consumption. We compare our performance with state of the art protocols, and report speedups of up to 31 percent (mean: 6.3 percent), and ED2 reduction up to 46 percent (mean: 10.4 percent) for a suite of Splash and Parsec benchmarks. We implement the Freeze router in VHDL and show that the additional fast path logic has minimal area and timing overheads. Index Terms-NUCA caches, freeze", "paper_title": "FP-NUCA: A Fast NOC Layer for Implementing Large NUCA Caches", "paper_id": "WOS:000361640800009"}