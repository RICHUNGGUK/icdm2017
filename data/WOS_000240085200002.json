{"auto_keywords": [{"score": 0.02861224897188298, "phrase": "formal_semantics"}, {"score": 0.02683899032632184, "phrase": "open_knowledge_source"}, {"score": 0.004718897469501381, "phrase": "short_introduction"}, {"score": 0.004288059466938456, "phrase": "traditional_software_engineering_process"}, {"score": 0.00418134346679498, "phrase": "mixed_process"}, {"score": 0.0040978781692373005, "phrase": "knowware_engineering_issues"}, {"score": 0.004036369952624852, "phrase": "technical_subtleties"}, {"score": 0.003876806615011266, "phrase": "building_models"}, {"score": 0.0036676174658755683, "phrase": "system_components"}, {"score": 0.00363080961099728, "phrase": "different_types"}, {"score": 0.003558294449586273, "phrase": "key_issues"}, {"score": 0.003332440548684892, "phrase": "system_composition"}, {"score": 0.0032494292163722065, "phrase": "ladder_principle"}, {"score": 0.0031208772639433145, "phrase": "waterfall_model"}, {"score": 0.003058515297281172, "phrase": "tower_principle"}, {"score": 0.0029374939071038146, "phrase": "fountain_model"}, {"score": 0.002750934994181092, "phrase": "co-engineering_process"}, {"score": 0.0026688629249775925, "phrase": "ne_core_problem"}, {"score": 0.0024493494346360415, "phrase": "suitable_tool"}, {"score": 0.0022592313766072658, "phrase": "preliminary_delineation"}, {"score": 0.0022252591643049744, "phrase": "co-algebraic_semantics"}, {"score": 0.0021917966722180132, "phrase": "typical_example"}], "paper_keywords": ["knowware", " knowledge middleware", " software/knowware coengineering"], "paper_abstract": "After a short introduction to the concepts of knowware, knowware engineering and knowledge middleware, this paper proposes to study the software/knowware co-engineering. Different from the traditional software engineering process, it is a mixed process involving both software engineering and knowware engineering issues. The technical subtleties of such a mixed process are discussed and guidelines of building models for it are proposed. It involves three parallel lines of developing system components of different types-The. key issues of this process are how to guarantee the correctness and appropriateness of system composition and decomposition. The ladder principle, which is a modification of the waterfall model, and the tower principle, which is a modification of the fountain model, are proposed. We also studied the possibility of equipping the co-engineering process, with a formal semantics. ne core problem of establishing such a theory is to give a formal semantics to an open knowledge source. We have found a suitable tool for this purpose. That is the co-algebra. We also try to give a preliminary delineation of a co-algebraic semantics for a typical example of open knowledge source - the knowledge distributed on the World Wide Web.", "paper_title": "Towards a software/knowware co-engineering", "paper_id": "WOS:000240085200002"}