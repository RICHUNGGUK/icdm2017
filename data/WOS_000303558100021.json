{"auto_keywords": [{"score": 0.04955111375780364, "phrase": "editor_libraries"}, {"score": 0.0053252887165287765, "phrase": "sugarj"}, {"score": 0.00481495049065317, "phrase": "language_environment"}, {"score": 0.004709333998298903, "phrase": "large_software_projects"}, {"score": 0.004261885692956071, "phrase": "single_files"}, {"score": 0.003751228706861377, "phrase": "integrated_development_environments"}, {"score": 0.0035486713647627246, "phrase": "ide_services"}, {"score": 0.0032290277960438855, "phrase": "extensible_and_compositional_way"}, {"score": 0.0030715948036518603, "phrase": "single_file"}, {"score": 0.002970955471308649, "phrase": "java"}, {"score": 0.002779318608820933, "phrase": "editor_services"}, {"score": 0.00262910358108176, "phrase": "object_language"}, {"score": 0.002486987042061596, "phrase": "regular_import_statements"}, {"score": 0.002445865715873089, "phrase": "file-by-file_basis"}, {"score": 0.0022502133699402018, "phrase": "eclipse-based_spoofax_language_workbench"}, {"score": 0.0021049977753042253, "phrase": "fully-fledged_and_schema-aware_xml_editor"}], "paper_keywords": ["Languages", " language extensibility", " library", " DSL embedding", " language workbench"], "paper_abstract": "Large software projects consist of code written in a multitude of different (possibly domain-specific) languages, which are often deeply interspersed even in single files. While many proposals exist on how to integrate languages semantically and syntactically, the question of how to support this scenario in integrated development environments (IDEs) remains open: How can standard IDE services, such as syntax highlighting, outlining, or reference resolving, be provided in an extensible and compositional way, such that an open mix of languages is supported in a single file? Based on our library-based syntactic extension language for Java, SugarJ, we propose to make IDEs extensible by organizing editor services in editor libraries. Editor libraries are libraries written in the object language, SugarJ, and hence activated and composed through regular import statements on a file-by-file basis. We have implemented an IDE for editor libraries on top of SugarJ and the Eclipse-based Spoofax language workbench. We have validated editor libraries by evolving this IDE into a fully-fledged and schema-aware XML editor as well as an extensible LATEX editor, which we used for writing this paper.", "paper_title": "Growing a Language Environment with Editor Libraries", "paper_id": "WOS:000303558100021"}