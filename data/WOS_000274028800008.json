{"auto_keywords": [{"score": 0.04902896582647278, "phrase": "automated_code_generation"}, {"score": 0.015719716506582538, "phrase": "quadrature_representations"}, {"score": 0.015548237087755759, "phrase": "finite_element_tensors"}, {"score": 0.01463750588738334, "phrase": "finite_element_matrices"}, {"score": 0.004191540451296395, "phrase": "variational_form"}, {"score": 0.004054299982508618, "phrase": "standard_mathematical_notation"}, {"score": 0.003987367359722647, "phrase": "low-level_computer_code"}, {"score": 0.003608266640131664, "phrase": "form_compiler"}, {"score": 0.0033384259516301223, "phrase": "quadrature_approach"}, {"score": 0.003158088307044493, "phrase": "optimization_strategies"}, {"score": 0.002970914475538276, "phrase": "relative_performance"}, {"score": 0.002779318608820933, "phrase": "particular_emphasis"}, {"score": 0.0027486060614330043, "phrase": "complicated_variational_forms"}, {"score": 0.002585638506308606, "phrase": "simple_forms"}, {"score": 0.0024594969044952108, "phrase": "run-time_performance"}, {"score": 0.002275369652100353, "phrase": "generated_code"}, {"score": 0.0021049977753042253, "phrase": "variational_forms"}], "paper_keywords": ["Algorithms", " Performance", " Finite element method", " code generation"], "paper_abstract": "We examine aspects of the computation of finite element matrices and vectors that are made possible by automated code generation. Given a variational form in a syntax that resembles standard mathematical notation, the low-level computer code for building finite element tensors, typically matrices, vectors and scalars, can be generated automatically via a form compiler. In particular, the generation of code for computing finite element matrices using a quadrature approach is addressed. For quadrature representations, a number of optimization strategies which are made possible by automated code generation are presented. The relative performance of two different automatically generated representations of finite element matrices is examined, with a particular emphasis on complicated variational forms. It is shown that approaches which perform best for simple forms are not tractable for more complicated problems in terms of run-time performance, the time required to generate the code or the size of the generated code. The approach and optimizations elaborated here are effective for a range of variational forms.", "paper_title": "Optimizations for Quadrature Representations of Finite Element Tensors through Automated Code Generation", "paper_id": "WOS:000274028800008"}