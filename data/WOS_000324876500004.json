{"auto_keywords": [{"score": 0.04712665802421912, "phrase": "sdfg"}, {"score": 0.04288793106091865, "phrase": "buffer_sizes"}, {"score": 0.038581863253885955, "phrase": "static-order_schedules"}, {"score": 0.00481495049065317, "phrase": "synchronous_dataflow_graphs"}, {"score": 0.004597457370802855, "phrase": "model_streaming_applications"}, {"score": 0.004389745162172933, "phrase": "scheduling_decisions"}, {"score": 0.004314285113050873, "phrase": "sdfg_analysis"}, {"score": 0.00402514392911723, "phrase": "scheduled_graphs"}, {"score": 0.003978866233891427, "phrase": "analysis_times"}, {"score": 0.0037989951856280423, "phrase": "sdfg._sdfgs"}, {"score": 0.003523822585025555, "phrase": "static-order_schedule"}, {"score": 0.0033257460346754687, "phrase": "homogeneous_sdfg"}, {"score": 0.003138768436081888, "phrase": "exponential_increase"}, {"score": 0.0029622717081190667, "phrase": "analysis_results"}, {"score": 0.002447101794397243, "phrase": "sdfg._experiments"}, {"score": 0.0021543421286324945, "phrase": "reduced_analysis_times"}, {"score": 0.002129527338875116, "phrase": "performance_properties"}, {"score": 0.0021049977753042253, "phrase": "tighter_resource_requirements"}], "paper_keywords": ["Periodic schedules", " schedule modeling", " single appearance schedules", " synchronous dataflow graphs"], "paper_abstract": "Synchronous dataflow graphs (SDFGs) are used extensively to model streaming applications. An SDFG can be extended with scheduling decisions, allowing SDFG analysis to obtain properties, such as throughput or buffer sizes for the scheduled graphs. Analysis times depend strongly on the size of the SDFG. SDFGs can be statically scheduled using static-order schedules. The only generally applicable technique to model a static-order schedule in an SDFG is to convert it to a homogeneous SDFG (HSDFG). This may lead to an exponential increase in the size of the graph and to suboptimal analysis results (e. g., for buffer sizes in multiprocessors). We present techniques to model two types of static-order schedules, i.e., periodic schedules and periodic single appearance schedules, directly in an SDFG. Experiments show that both techniques produce more compact graphs compared to the technique that relies on a conversion to an HSDFG. This results in reduced analysis times for performance properties and tighter resource requirements.", "paper_title": "Schedule-Extended Synchronous Dataflow Graphs", "paper_id": "WOS:000324876500004"}