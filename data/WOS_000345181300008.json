{"auto_keywords": [{"score": 0.04942444706912143, "phrase": "ocl."}, {"score": 0.00481495049065317, "phrase": "temporal_properties"}, {"score": 0.004684157900507474, "phrase": "object_constraint_language"}, {"score": 0.0044026610128451256, "phrase": "static_constraints"}, {"score": 0.004283019592801715, "phrase": "object-oriented_systems"}, {"score": 0.004081385289516914, "phrase": "dynamic_constraints"}, {"score": 0.003970439654470374, "phrase": "system_behavior"}, {"score": 0.0035804980565263024, "phrase": "temporal_and_real-time_properties"}, {"score": 0.003296212583539166, "phrase": "temporal_layer"}, {"score": 0.0032287289440915187, "phrase": "ocl_language"}, {"score": 0.0031193028729331667, "phrase": "dwyer_et_al"}, {"score": 0.0029114187110123105, "phrase": "formal_scenario-based_semantics"}, {"score": 0.0027741761880779535, "phrase": "eclipse_ocl"}, {"score": 0.0025537472239953807, "phrase": "compositional_approach"}, {"score": 0.002518746501941657, "phrase": "ocl_temporal_properties"}, {"score": 0.0024842242921857705, "phrase": "finite-state_automata"}, {"score": 0.0023834640793589435, "phrase": "automatic_test_generators"}, {"score": 0.002224510044064184, "phrase": "model_driven_engineering"}, {"score": 0.0021940118003312397, "phrase": "usual_formal_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["OCL", " Temporal patterns", " Eclipse/MDT", " Model-driven engineering", " Formal methods"], "paper_abstract": "The Object Constraint language (OCL) is widely used to express static constraints on models and object-oriented systems. However, the notion of dynamic constraints, controlling the system behavior over time, has not been natively supported. Such dynamic constraints are necessary to handle temporal and real-time properties of systems. In this paper, we first add a temporal layer to the OCL language, based syntactically on Dwyer et al.'s specification patterns. We enrich it with formal scenario-based semantics and integrate it into the current Eclipse OCL plug-in. Second, we translate, with a compositional approach, OCL temporal properties into finite-state automata and we connect our framework to automatic test generators. This way, we create a bridge linking model driven engineering and usual formal methods. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Specification of temporal properties with OCL", "paper_id": "WOS:000345181300008"}