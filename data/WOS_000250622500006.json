{"auto_keywords": [{"score": 0.024988146242154514, "phrase": "powerpc"}, {"score": 0.00481495049065317, "phrase": "transportation_formats"}, {"score": 0.004623224002010226, "phrase": "static_single-assignment_form"}, {"score": 0.004262273304740847, "phrase": "faster_just-in-time_compilation_times"}, {"score": 0.003983016985197904, "phrase": "stack-based_virtual_machines"}, {"score": 0.002955533639862811, "phrase": "ssa-based_mobile_code_representation"}, {"score": 0.002724428781940696, "phrase": "verifiable_ssa-based_ir"}, {"score": 0.0026514708899935333, "phrase": "jikes_rvm._performance_results"}, {"score": 0.002162951519368368, "phrase": "compilation_time"}, {"score": 0.0021049977753042253, "phrase": "code_quality"}], "paper_keywords": ["languages", " measurement", " performance", " virtual machines", " static single-assignment form", " SafeTSA"], "paper_abstract": "Although one might expect transportation formats based on static single-assignment form (SSA) to yield faster just-in-time compilation times than those based on stack-based virtual machines, this claim has not previously been validated, in practice. We attempt to quantify the effect of using an SSA-based mobile code representation by integrating support for a verifiable SSA-based IR into Jikes RVM. Performance results, measured with various optimizations and on both the IA32 and PowerPC, show improvements in both compilation time and code quality.", "paper_title": "SSA-based mobile code: Implementation and empirical evaluation", "paper_id": "WOS:000250622500006"}