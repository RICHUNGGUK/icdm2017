{"auto_keywords": [{"score": 0.04705607998366276, "phrase": "tensor_contractions"}, {"score": 0.00481495049065317, "phrase": "tensor_contraction_expressions"}, {"score": 0.004775918707955445, "phrase": "hybrid_cpu-gpu_execution"}, {"score": 0.0046797114400479135, "phrase": "generalized_multidimensional_matrix_multiplication_operations"}, {"score": 0.004585433265422727, "phrase": "quantum_chemistry"}, {"score": 0.004548253531664032, "phrase": "efficient_execution"}, {"score": 0.0044747919503484055, "phrase": "graphics_processing_units"}, {"score": 0.004278807087784626, "phrase": "index_permutation"}, {"score": 0.004244102948402086, "phrase": "small_dimension-sizes"}, {"score": 0.004209679094023478, "phrase": "thread_block_utilization"}, {"score": 0.003976373766630598, "phrase": "code_generation_tool"}, {"score": 0.0037866774001097596, "phrase": "cuda_code"}, {"score": 0.0036355032885145894, "phrase": "data_movement"}, {"score": 0.003576792280688324, "phrase": "gpu."}, {"score": 0.003504595508262064, "phrase": "gpu-enabled_code"}, {"score": 0.0032434583977423996, "phrase": "nwchem"}, {"score": 0.0028467558213723697, "phrase": "entire_system"}, {"score": 0.002634506575564286, "phrase": "contraction_code"}, {"score": 0.00260246764210499, "phrase": "new_series"}, {"score": 0.0023694065215394593, "phrase": "fermi_gpus"}, {"score": 0.0022196745041124888, "phrase": "single_fermi_gpu"}, {"score": 0.0021049977753042253, "phrase": "sequential_cpu_version"}], "paper_keywords": ["Hybrid CPU plus GPU execution", " CUDA", " Tensor Contraction Expressions"], "paper_abstract": "Tensor contractions are generalized multidimensional matrix multiplication operations that widely occur in quantum chemistry. Efficient execution of tensor contractions on Graphics Processing Units (GPUs) requires several challenges to be addressed, including index permutation and small dimension-sizes reducing thread block utilization. Moreover, to apply the same optimizations to various expressions, we need a code generation tool. In this paper, we present our approach to automatically generate CUDA code to execute tensor contractions on GPUs, including management of data movement between CPU and GPU. To evaluate our tool, GPU-enabled code is generated for the most expensive contractions in CCSD(T), a key coupled cluster method, and incorporated into NWChem, a popular computational chemistry suite. For this method, we demonstrate speedup over a factor of 8.4 using one GPU as compared to one CPU core and over 2.6 when utilizing the entire system using hybrid CPU+GPU solution with 2 GPUs and 5 cores (instead of 7 cores per node). We further investigate tensor contraction code on a new series of GPUs, the Fermi GPUs, and provide several effective optimization algorithms. For the same computation of CCSD(T), on a cluster with Fermi GPUs, we achieve a speedup of 3.4 over a cluster with T10 GPUs. With a single Fermi GPU on each node, we achieve a speedup of 43 over the sequential CPU version.", "paper_title": "Optimizing tensor contraction expressions for hybrid CPU-GPU execution", "paper_id": "WOS:000316011800011"}