{"auto_keywords": [{"score": 0.047569781329700335, "phrase": "embedded_software"}, {"score": 0.04496930556292013, "phrase": "high-level_information"}, {"score": 0.00481495049065317, "phrase": "embedded_ansi-c_software"}, {"score": 0.004721711709176679, "phrase": "model_checking"}, {"score": 0.004409304640026443, "phrase": "propositional_formula_sizes"}, {"score": 0.004198839649063847, "phrase": "potential_optimizations"}, {"score": 0.0041174821422410544, "phrase": "state_space"}, {"score": 0.0037888687452790953, "phrase": "propositional_logic"}, {"score": 0.0037336520904376687, "phrase": "smt_solvers"}, {"score": 0.0036792371574197826, "phrase": "generated_verification_conditions"}, {"score": 0.003520687960750365, "phrase": "different_background_theories"}, {"score": 0.0034864625294544187, "phrase": "smt"}, {"score": 0.003336123771254509, "phrase": "ansi-c"}, {"score": 0.0031767199435197243, "phrase": "completely_automatic_way"}, {"score": 0.002951739421935396, "phrase": "model_checkers"}, {"score": 0.002852256089630964, "phrase": "finite_bit_width"}, {"score": 0.002560847572190032, "phrase": "boolector"}, {"score": 0.002474505516708906, "phrase": "cbmc_front-end"}, {"score": 0.0024028135317872, "phrase": "standard_software_model"}, {"score": 0.002356173823922118, "phrase": "typical_embedded_software_applications"}, {"score": 0.0023104373174118458, "phrase": "control_systems"}, {"score": 0.002276717177453959, "phrase": "medical_devices"}, {"score": 0.0021784745589727246, "phrase": "larger_problems"}, {"score": 0.002157223877108711, "phrase": "existing_tools"}, {"score": 0.0021049977753042253, "phrase": "verification_time"}], "paper_keywords": ["Software engineering", " formal methods", " verification", " model checking"], "paper_abstract": "Propositional bounded model checking has been applied successfully to verify embedded software, but remains limited by increasing propositional formula sizes and the loss of high-level information during the translation preventing potential optimizations to reduce the state space to be explored. These limitations can be overcome by encoding high-level information in theories richer than propositional logic and using SMT solvers for the generated verification conditions. Here, we propose the application of different background theories and SMT solvers to the verification of embedded software written in ANSI-C in order to improve scalability and precision in a completely automatic way. We have modified and extended the encodings from previous SMT-based bounded model checkers to provide more accurate support for variables of finite bit width, bit-vector operations, arrays, structures, unions, and pointers. We have integrated the CVC3, Boolector, and Z3 solvers with the CBMC front-end and evaluated them using both standard software model checking benchmarks and typical embedded software applications from telecommunications, control systems, and medical devices. The experiments show that our ESBMC model checker can analyze larger problems than existing tools and substantially reduce the verification time.", "paper_title": "SMT-Based Bounded Model Checking for Embedded ANSI-C Software", "paper_id": "WOS:000307120000014"}