{"auto_keywords": [{"score": 0.035313380523673145, "phrase": "adapter_model"}, {"score": 0.00481495049065317, "phrase": "distributed_component-based_systems"}, {"score": 0.004725385523804256, "phrase": "heterogeneous_and_distributed_nature"}, {"score": 0.004666598697538815, "phrase": "automotive_software_systems"}, {"score": 0.004579780586951551, "phrase": "flexible_software_components"}, {"score": 0.004438642216475526, "phrase": "different_environments"}, {"score": 0.004274981117736524, "phrase": "interface_adaptation"}, {"score": 0.004195418010131832, "phrase": "promising_approach"}, {"score": 0.003965468669507077, "phrase": "respective_components"}, {"score": 0.003916098498242888, "phrase": "recent_work"}, {"score": 0.0038673406001234535, "phrase": "finite-state_machines"}, {"score": 0.003819187440994939, "phrase": "behavioural_adapter_modelling"}, {"score": 0.003771631577951067, "phrase": "code_generation"}, {"score": 0.0035648266669315943, "phrase": "new_hierarchical_adapter_architecture"}, {"score": 0.0034332736827447654, "phrase": "global_and_local_adaptations"}, {"score": 0.0030862341714020694, "phrase": "behavioural_changes"}, {"score": 0.003028727936200845, "phrase": "adapted_components"}, {"score": 0.0029169007179202164, "phrase": "abstract_interface"}, {"score": 0.0027741761880779535, "phrase": "executable_adapter_code"}, {"score": 0.002722468694023035, "phrase": "key_goal"}, {"score": 0.002671722386856879, "phrase": "modelling_approach"}, {"score": 0.0025892330566358503, "phrase": "existing_interface_description_languages"}, {"score": 0.0025569530630374995, "phrase": "respective_code_generators"}, {"score": 0.002341958851390876, "phrase": "linux-based_automotive_operating_system"}, {"score": 0.0022696277881969896, "phrase": "practical_realization"}, {"score": 0.0021857667493036786, "phrase": "automotive_use_case"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Interface adaptation", " Behavioural adaptation", " Adapter architecture", " Software composition"], "paper_abstract": "The heterogeneous and distributed nature of automotive software systems demands for flexible software components which can operate in different environments. In this context, interface adaptation is a promising approach to achieve the flexibility without directly changing the respective components. Recent work uses finite-state machines for behavioural adapter modelling and code generation. Based upon such a state-based approach, we developed a new hierarchical adapter architecture which enables the separation of global and local adaptations. Dividing the adapter model into two parts results in a much smaller state machine and makes the adapter more independent from behavioural changes of the adapted components. Our approach relies on an abstract interface and adapter model and enables the generation of executable adapter code. A key goal of the modelling approach is the reuse of existing interface description languages and respective code generators. The approach is completely tool-supported and was evaluated for a Linux-based automotive operating system. We show a practical realization of the models using an automotive use case. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A layered interface-adaptation architecture for distributed component-based systems", "paper_id": "WOS:000352174300009"}