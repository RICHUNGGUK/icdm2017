{"auto_keywords": [{"score": 0.04314074539597285, "phrase": "power"}, {"score": 0.00481495049065317, "phrase": "data_mining_for_weak_memory"}, {"score": 0.004719816332271661, "phrase": "axiomatic_generic_framework"}, {"score": 0.004663636232080366, "phrase": "weak_memory"}, {"score": 0.0044990584725586764, "phrase": "sequential_consistency"}, {"score": 0.0044101380740283825, "phrase": "total_store_order"}, {"score": 0.00438210441754608, "phrase": "tso"}, {"score": 0.004007083686875716, "phrase": "preceding_operational_model"}, {"score": 0.0037740295668681014, "phrase": "operational_model"}, {"score": 0.003709463965392969, "phrase": "arm"}, {"score": 0.003569862912613189, "phrase": "arm."}, {"score": 0.003229374325577207, "phrase": "new_simulation_tool"}, {"score": 0.0030171910207671205, "phrase": "concise_way"}, {"score": 0.002752075650871066, "phrase": "axiomatic_description"}, {"score": 0.0026547761341670505, "phrase": "previous_simulation_tools"}, {"score": 0.002581477142020187, "phrase": "verification_time"}, {"score": 0.0024901940672239784, "phrase": "bounded_model_checking"}, {"score": 0.0023545567809591804, "phrase": "empirical_data"}, {"score": 0.002262209824105154, "phrase": "debian_linux_distribution"}, {"score": 0.0021049977753042253, "phrase": "weak_memory_idioms"}], "paper_keywords": ["Theory", " Experimentation", " Verification", " Concurrency", " weak memory models", " software verification"], "paper_abstract": "We propose an axiomatic generic framework for modelling weak memory We show how to instantiate this framework for Sequential Consistency (SC), Total Store Order (TSO), C++ restricted to release-acquire atomics, and Power. For Power, we compare our model to a preceding operational model in which we found a flaw. To do so, we define an operational model that we show equivalent to our axiomatic model. We also propose a model for ARM. Our testing on this architecture revealed a behaviour later acknowledged as a bug by ARM, and more recently, 31 additional anomalies. We offer a new simulation tool, called herd, which allows the user to specify the model of his choice in a concise way. Given a specification of a model, the tool becomes a simulator for that model. The tool relies on an axiomatic description; this choice allows us to outperform all previous simulation tools. Additionally, we confirm that verification time is vastly improved, in the case of bounded model checking. Finally, we put our models in perspective, in the light of empirical data obtained by analysing the C and C++ code of a Debian Linux distribution. We present our new analysis tool, called mole, which explores a piece of code to find the weak memory idioms that it uses.", "paper_title": "Herding Cats: Modelling, Simulation, Testing, and Data Mining for Weak Memory", "paper_id": "WOS:000339861300003"}