{"auto_keywords": [{"score": 0.03709788182167048, "phrase": "incremental_method"}, {"score": 0.00481495049065317, "phrase": "xml_view_maintenance"}, {"score": 0.004641351004344458, "phrase": "non_monitored_data_sources"}, {"score": 0.004119049028319832, "phrase": "view_maintenance"}, {"score": 0.0039341294012600085, "phrase": "materialized_views"}, {"score": 0.0037921662574137535, "phrase": "data_modifications"}, {"score": 0.003689053436223376, "phrase": "data_sources"}, {"score": 0.003427540517249369, "phrase": "xml_views"}, {"score": 0.003213920601037463, "phrase": "first_how_to_store_xml_views"}, {"score": 0.0030135741897058844, "phrase": "different_data_sources"}, {"score": 0.00290473242917264, "phrase": "relational_dbms."}, {"score": 0.002723607240517261, "phrase": "view_definition"}, {"score": 0.0026252106881752067, "phrase": "mapping_patterns"}, {"score": 0.0021049977753042253, "phrase": "re-computing_all_stored_data"}], "paper_keywords": [""], "paper_abstract": "In this paper, we are dealing with the topic of view maintenance which consists of maintaining materialized views in response to data modifications on the data sources. We propose an incremental method to maintain XML views. This is achieved by defining first how to store XML views, which may be obtained over different data sources, in a relational DBMS. The identifiers used to store the view definition (in particular mapping patterns, unions and joins) allow the definition of the incremental method in the sense that the materialization of the view does not require re-computing all stored data to maintain XML views.", "paper_title": "Incremental method for XML view maintenance in case of non monitored data sources", "paper_id": "WOS:000235805500012"}