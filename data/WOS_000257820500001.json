{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.004571133708117502, "phrase": "real-time_systems"}, {"score": 0.004362226376603478, "phrase": "language_extensions"}, {"score": 0.003993216345115755, "phrase": "order-of-magnitude_reductions"}, {"score": 0.003771185758226876, "phrase": "different_trade-offs"}, {"score": 0.0032769720645483102, "phrase": "flexible_task_graphs"}, {"score": 0.0031107911390188055, "phrase": "different_isolation_policies"}, {"score": 0.002983916676307492, "phrase": "orthogonal_manner"}, {"score": 0.002803213985198645, "phrase": "new_combinations"}, {"score": 0.002702887319160532, "phrase": "particular_applications"}, {"score": 0.002579140290642792, "phrase": "ibm_web-sphere_real_time_java_virtual_machine"}, {"score": 0.002422890839801611, "phrase": "flexotasks"}, {"score": 0.002360607691114015, "phrase": "periodic_threads"}, {"score": 0.002299921909935613, "phrase": "standard_deviation"}, {"score": 0.002206045784326466, "phrase": "significantly_better_performance"}, {"score": 0.0021831803612759855, "phrase": "rtsj's_scoped_memory_constructs"}, {"score": 0.0021049977753042253, "phrase": "global_garbage_collection"}], "paper_keywords": ["languages", " experimentation", " real-time systems", " Java virtual machine", " memory management", " ownership types"], "paper_abstract": "The disadvantages of unconstrained shared-memory multi-threading in Java, especially with regard to latency and determinism in real-time systems, have given rise to a variety of language extensions that place restrictions on how threads allocate, share, and communicate memory, leading to order-of-magnitude reductions in latency and jitter. However, each model makes different trade-offs with respect to expressiveness, efficiency, enforcement, and latency, and no one model is best for all applications. In this paper we present Flexible Task Graphs (Flexotasks), a single system that allows different isolation policies and mechanisms to be combined in an orthogonal manner, subsuming four previously proposed models as well as making it possible to use new combinations best suited to the needs of particular applications. We evaluate our implementation on top of the IBM Web-Sphere Real Time Java virtual machine using both a microbenchmark and a 30 KLOC avionics collision detector. We show that Flexotasks are capable of executing periodic threads at 10 KHz with a standard deviation of 1.2 mu s and that it achieves significantly better performance than RTSJ's scoped memory constructs while remaining impervious to interference from global garbage collection.", "paper_title": "Flexible task graphs: A unified restricted thread programming model for java", "paper_id": "WOS:000257820500001"}