{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "medusa"}, {"score": 0.012189124648390592, "phrase": "graph_processing"}, {"score": 0.005546477548997501, "phrase": "runtime_system"}, {"score": 0.004770211811866158, "phrase": "simplified_graph_processing"}, {"score": 0.004638462976078815, "phrase": "common_data_structures"}, {"score": 0.00453144352814823, "phrase": "efficient_graph_processing"}, {"score": 0.004426882270402403, "phrase": "application_performance"}, {"score": 0.004324723240308028, "phrase": "graphics_processing_unit"}, {"score": 0.004284601434731534, "phrase": "gpu"}, {"score": 0.004089025268611497, "phrase": "bfs"}, {"score": 0.004050996777117918, "phrase": "shortest_paths"}, {"score": 0.0038301525703886585, "phrase": "gpu_programs"}, {"score": 0.0036213041338584756, "phrase": "graph_structures"}, {"score": 0.0034398445347109396, "phrase": "programming_framework"}, {"score": 0.0031475032122226, "phrase": "small_set"}, {"score": 0.0031182092708983184, "phrase": "user-defined_apis"}, {"score": 0.0029206356801269187, "phrase": "gpu."}, {"score": 0.002839812512030847, "phrase": "graph-centric_optimizations"}, {"score": 0.002787181295054319, "phrase": "architecture_features"}, {"score": 0.0026105159490849364, "phrase": "multiple_gpus"}, {"score": 0.0024336086025284836, "phrase": "gpgpu_programs"}, {"score": 0.0023551955270737215, "phrase": "source_code"}, {"score": 0.0022686625017583387, "phrase": "optimization_techniques"}, {"score": 0.0021049977753042253, "phrase": "manually_tuned_gpu_graph_operations"}], "paper_keywords": ["GPGPU", " GPU programming", " graph processing", " runtime framework"], "paper_abstract": "Graphs are common data structures for many applications, and efficient graph processing is a must for application performance. Recently, the graphics processing unit (GPU) has been adopted to accelerate various graph processing algorithms such as BFS and shortest paths. However, it is difficult to write correct and efficient GPU programs and even more difficult for graph processing due to the irregularities of graph structures. To simplify graph processing on GPUs, we propose a programming framework called Medusa which enables developers to leverage the capabilities of GPUs by writing sequential C/C++ code. Medusa offers a small set of user-defined APIs and embraces a runtime system to automatically execute those APIs in parallel on the GPU. We develop a series of graph-centric optimizations based on the architecture features of GPUs for efficiency. Additionally, Medusa is extended to execute on multiple GPUs within a machine. Our experiments show that 1) Medusa greatly simplifies implementation of GPGPU programs for graph processing, with many fewer lines of source code written by developers and 2) the optimization techniques significantly improve the performance of the runtime system, making its performance comparable with or better than manually tuned GPU graph operations.", "paper_title": "Medusa: Simplified Graph Processing on GPUs", "paper_id": "WOS:000337966400015"}