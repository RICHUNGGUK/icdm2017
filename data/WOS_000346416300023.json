{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "qemu_emulator"}, {"score": 0.0047555023078686386, "phrase": "linux_process_trace_generation"}, {"score": 0.0046676969718111765, "phrase": "gdb_debugger"}, {"score": 0.004581505405526037, "phrase": "software_debugging"}, {"score": 0.0045249263666466005, "phrase": "trace_generation_techniques"}, {"score": 0.004386503433248535, "phrase": "highly_complex_bugs"}, {"score": 0.0041478818670853115, "phrase": "embedded_software_development"}, {"score": 0.003946650265907885, "phrase": "trace_generation_infrastructure"}, {"score": 0.003617616153730564, "phrase": "arm_isa_emulation"}, {"score": 0.0034634973175137486, "phrase": "continuous_instruction-level_trace_generation"}, {"score": 0.003378385493203297, "phrase": "standard_gdb_client"}, {"score": 0.003234425353582135, "phrase": "dynamically_log_registers"}, {"score": 0.0031944286166257466, "phrase": "memory_addresses"}, {"score": 0.0030017207229983385, "phrase": "trace_experiments"}, {"score": 0.0029645930408561086, "phrase": "five_different_modes"}, {"score": 0.0028737647829311587, "phrase": "trace_generation"}, {"score": 0.00265038878247831, "phrase": "single_linux_process"}, {"score": 0.0025059724686541263, "phrase": "linux_process"}, {"score": 0.002384206251320424, "phrase": "existing_qemu_trace_capabilities"}, {"score": 0.0022683432490549064, "phrase": "software-instrumented_tracing_scheme"}], "paper_keywords": ["Verification", " Performance", " Reliability", " Software debugging", " trace generation", " instrumentation", " emulation", " binary translation", " QEMU", " GDB", " Linux"], "paper_abstract": "In software debugging, trace generation techniques are used to resolve highly complex bugs. However, the emulators increasingly used for embedded software development do not yet offer the types of trace generation infrastructure available in hardware. In this article, we make changes to the ARM ISA emulation of the QEMU emulator to allow for continuous instruction-level trace generation. Using a standard GDB client, tracepoints can be inserted to dynamically log registers and memory addresses without altering executing code. The ability to run trace experiments in five different modes allows the scope of trace generation to be narrowed as needed, down to the level of a single Linux process. Our scheme collects the execution traces of a Linux process on average between 9.6x-0.7x the speed of existing QEMU trace capabilities, with 96.7% less trace data volume. Compared to a software-instrumented tracing scheme, our method is both unobtrusive and performs on average between 3-4 orders of magnitude faster.", "paper_title": "Dynamically Instrumenting the QEMU Emulator for Linux Process Trace Generation with the GDB Debugger", "paper_id": "WOS:000346416300023"}