{"auto_keywords": [{"score": 0.048778468893892986, "phrase": "verifast"}, {"score": 0.003916098498242888, "phrase": "detailed_explanations"}, {"score": 0.0035072146967082083, "phrase": "alternative_solutions"}, {"score": 0.0030135741897058844, "phrase": "modular_verifier"}, {"score": 0.0028914855674641877, "phrase": "java"}, {"score": 0.0028127163745564777, "phrase": "c_source_code"}, {"score": 0.0024842242921857705, "phrase": "separation_logic"}, {"score": 0.0021049977753042253, "phrase": "symbolic_execution"}], "paper_keywords": ["Formal verification", " Program correctness", " Separation logic"], "paper_abstract": "We describe our experience solving the VerifyThis 2012 challenges with our program verification tool VeriFast, including detailed explanations of our solutions. We also describe some alternative solutions that we developed after the competition. VeriFast is a modular verifier that takes Java or C source code annotated with function/method specifications written in a variant of separation logic, and verifies that the code complies with the annotations through symbolic execution.", "paper_title": "Solving the VerifyThis 2012 challenges with VeriFast", "paper_id": "WOS:000362687300002"}