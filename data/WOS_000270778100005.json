{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "linkless_octree"}, {"score": 0.0047310525657970615, "phrase": "multi-level_perfect_hashing"}, {"score": 0.004487989502479992, "phrase": "spatial_partitioning_data_structure"}, {"score": 0.003968112038249246, "phrase": "storage_requirements"}, {"score": 0.0038309141193444015, "phrase": "memory_overhead"}, {"score": 0.0037311260623089436, "phrase": "parent-to-child_pointers"}, {"score": 0.003447035529485425, "phrase": "actual_data"}, {"score": 0.00307431840409833, "phrase": "novel_data_structure"}, {"score": 0.0028652153774536967, "phrase": "explicit_parent-to-child_pointer_links"}, {"score": 0.002693919110230191, "phrase": "storage_locations"}, {"score": 0.002646880721119838, "phrase": "subdivided_nodes"}, {"score": 0.0025106241866273897, "phrase": "important_properties"}, {"score": 0.0024667783849055634, "phrase": "uniform_spatial_partitioning_trees"}, {"score": 0.002142426911242168, "phrase": "image_compression"}, {"score": 0.0021049977753042253, "phrase": "path_planning_examples"}], "paper_keywords": [""], "paper_abstract": "The standard C/C++ implementation of a spatial partitioning data structure, such as octree and quadtree, is often inefficient in terms of storage requirements particularly when the memory overhead for maintaining parent-to-child pointers is significant with respect to the amount of actual data in each tree node. In this work, we present a novel data structure that implements uniform spatial partitioning without storing explicit parent-to-child pointer links. Our linkless tree encodes the storage locations of subdivided nodes using perfect hashing while retaining important properties of uniform spatial partitioning trees, such as coarse-to-fine hierarchical representation, efficient storage usage, and efficient random accessibility. We demonstrate the performance of our linkless trees using image compression and path planning examples.", "paper_title": "Linkless Octree Using Multi-Level Perfect Hashing", "paper_id": "WOS:000270778100005"}