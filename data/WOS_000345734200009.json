{"auto_keywords": [{"score": 0.04459144378563889, "phrase": "matrix_exponential"}, {"score": 0.03868263724791148, "phrase": "distributed_program"}, {"score": 0.03843643656271108, "phrase": "test_data"}, {"score": 0.03644451033122438, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "distributed_memory_computers"}, {"score": 0.00477270620699354, "phrase": "general_field"}, {"score": 0.0047517225918491226, "phrase": "quantum_information"}, {"score": 0.00471003041684707, "phrase": "quantum_walks"}, {"score": 0.004668702337888892, "phrase": "increasingly_important_role"}, {"score": 0.004637943320980023, "phrase": "physical_models"}, {"score": 0.004617549453503027, "phrase": "quantum_algorithms"}, {"score": 0.004546871314156398, "phrase": "distributed_memory_software_package_pyctqw"}, {"score": 0.004506968388996092, "phrase": "object-oriented_python_interface"}, {"score": 0.0043508127628396915, "phrase": "python_and_fortran_interfaces"}, {"score": 0.004331675965350876, "phrase": "pyctqw"}, {"score": 0.004218602458288531, "phrase": "performance_behavior"}, {"score": 0.004172360444377281, "phrase": "distributed_memory_cluster"}, {"score": 0.00411768332587936, "phrase": "chebyshev"}, {"score": 0.004099422105642623, "phrase": "krylov-subspace"}, {"score": 0.004054479957160662, "phrase": "quantum_walk_propagation"}, {"score": 0.003942126396485544, "phrase": "program"}, {"score": 0.0039139403288692065, "phrase": "pycrqw_catalogue"}, {"score": 0.0038117295927320525, "phrase": "cpc_program_library"}, {"score": 0.003794954883650141, "phrase": "queen's_university"}, {"score": 0.0037782542786731687, "phrase": "belfast"}, {"score": 0.0037616257726386933, "phrase": "n._ireland"}, {"score": 0.003474487141172438, "phrase": "tar.gz_programming_language"}, {"score": 0.0034441451229868998, "phrase": "python"}, {"score": 0.0033837301445931263, "phrase": "mpi."}, {"score": 0.003376256617671467, "phrase": "operating_system"}, {"score": 0.003295417328836177, "phrase": "mpi"}, {"score": 0.003244798350857128, "phrase": "graph_size"}, {"score": 0.0028360962841331634, "phrase": "arbitrary_undirected_graphs"}, {"score": 0.00280496585980086, "phrase": "distributed_memory_implementations"}, {"score": 0.0027497872987114385, "phrase": "kiylov-subspace"}, {"score": 0.0027376731558425046, "phrase": "chebyshev_expansion_techniques"}, {"score": 0.002695691261677256, "phrase": "continuous-time_quantum_walkers"}, {"score": 0.0026484975955468897, "phrase": "supplied_python_module"}, {"score": 0.0026368316427706493, "phrase": "matplotlib"}, {"score": 0.0025906626745331, "phrase": "quantum_walking_system"}, {"score": 0.0025509294021449254, "phrase": "available_memory"}, {"score": 0.0025340874787959195, "phrase": "current_package"}, {"score": 0.002408597721998433, "phrase": "parallelized_krylov_subspace_method"}, {"score": 0.0023979830698575306, "phrase": "chebyshev_approximation_scheme"}, {"score": 0.0023301162505951468, "phrase": "quantum_walk_dynamics"}, {"score": 0.0023096222276192194, "phrase": "multi-particle_entanglement"}, {"score": 0.002284257410355161, "phrase": "arbitrary_diagonal_defects"}, {"score": 0.002259170524733298, "phrase": "graph_nodes"}, {"score": 0.0022442505380273854, "phrase": "transmission_and_resonance_structures"}, {"score": 0.0021330830123432614, "phrase": "simultaneous_walkers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Continuous-time quantum walk", " Multiple walkers", " Pade approximant", " Krylov subspace method", " Chebyshev matrix expansion"], "paper_abstract": "In the general field of quantum information and computation, quantum walks are playing an increasingly important role in constructing physical models and quantum algorithms. We have recently developed a distributed memory software package pyCTQW, with an object-oriented Python interface, that allows efficient simulation of large multi-particle CTQW (continuous-time quantum walk)-based systems. In this paper, we present an introduction to the Python and Fortran interfaces of pyCTQW, discuss various numerical methods of calculating the matrix exponential, and demonstrate the performance behavior of pyCTQW on a distributed memory cluster. In particular, the Chebyshev and Krylov-subspace methods for calculating the quantum walk propagation are provided, as well as methods for visualization and data analysis. Program summary Program title: pyCrQW Catalogue identifier: AEUN_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEUN_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: yes No. of lines in distributed program, including test data, etc.: 130389 No. of bytes in distributed program, including test data, etc.: 4971890 Distribution format: tar.gz Programming language: Fortran and Python. Computer: Workstation or cluster implementing MPI. Operating system: Any operating system with Fortran, python, and MPI installed. RAM: Depends on graph size and number of walkers Classification: 4.15, 14. External routines: PETSc [1-3], SLEPc [4-6], MPI, NumPy and SciPy [7-9], Matplotlib [10], Networla [11] Nature of problem: Simulates, visualizes and analyzes continuous-time quantum walks on arbitrary undirected graphs. Solution method: Distributed memory implementations of the matrix exponential, via a choice of Kiylov-subspace and Chebyshev expansion techniques, are used to simulate the continuous-time quantum walkers. Visualization ability is provided via the supplied Python module and Matplotlib. Restrictions: The size of the quantum walking system is limited by the amount of available memory. The current package implements up to 3 simultaneous walkers with interactions, but it can be readily extended. Unusual features: In addition to utilizing a parallelized Krylov subspace method and Chebyshev approximation scheme to maximize efficiency, pyCTQW also provides functions for visualization of the quantum walk dynamics and calculation of multi-particle entanglement, and allows for arbitrary diagonal defects to be placed on graph nodes to explore transmission and resonance structures. Running time: Runtime varies depending on the size of the graph, number of processors used, and number of simultaneous walkers. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "pyCTQW: A continuous-time quantum walk simulator on distributed memory computers", "paper_id": "WOS:000345734200009"}