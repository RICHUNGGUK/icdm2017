{"auto_keywords": [{"score": 0.03644451033122438, "phrase": "see."}, {"score": 0.015719709579057044, "phrase": "untrusted_software"}, {"score": 0.004608422081389008, "phrase": "safe_execution_environment"}, {"score": 0.004440570928903645, "phrase": "\"_new_software"}, {"score": 0.004395859169800476, "phrase": "configuration_changes"}, {"score": 0.0043663006236597975, "phrase": "existing_software"}, {"score": 0.004164858807302222, "phrase": "key_property"}, {"score": 0.0038538167879752137, "phrase": "operating_system"}, {"score": 0.0037765536386719775, "phrase": "one-way_isolation"}, {"score": 0.003700833742881285, "phrase": "see"}, {"score": 0.0035779805381654438, "phrase": "host_os"}, {"score": 0.003401278997237025, "phrase": "see_processes"}, {"score": 0.0033218213825698417, "phrase": "host_os_processes"}, {"score": 0.003168413874902081, "phrase": "wide_range"}, {"score": 0.0030839447259626215, "phrase": "malicious_code"}, {"score": 0.003063180586734181, "phrase": "controlled_execution"}, {"score": 0.0030017207229983385, "phrase": "software_configuration_changes"}, {"score": 0.0029614320534324104, "phrase": "software_patches"}, {"score": 0.002872742947035998, "phrase": "convenient_way"}, {"score": 0.0028246207858247732, "phrase": "system_changes"}, {"score": 0.0024591621759745648, "phrase": "consistency_criteria"}, {"score": 0.0024343522820859578, "phrase": "semantic_consistency"}, {"score": 0.0024097920845706795, "phrase": "committed_results"}, {"score": 0.0022984065518052476, "phrase": "os_kernel"}, {"score": 0.002259883463607508, "phrase": "safe-execution_environment"}, {"score": 0.002199582070223336, "phrase": "fairly_complex_server"}, {"score": 0.0021049977753042253, "phrase": "low_performance_overheads"}], "paper_keywords": ["Systems", " Security", " Isolation", " one-way isolation"], "paper_abstract": "In this article, we present an approach for realizing a safe execution environment (SEE) that enables users to \"try out\" new software ( or configuration changes to existing software) without the fear of damaging the system in any manner. A key property of our SEE is that it faithfully reproduces the behavior of applications, as if they were running natively on the underlying ( host) operating system. This is accomplished via one-way isolation : processes running within the SEE are given read-access to the environment provided by the host OS, but their write operations are prevented from escaping outside the SEE. As a result, SEE processes cannot impact the behavior of host OS processes, or the integrity of data on the host OS. SEEs support a wide range of tasks, including: study of malicious code, controlled execution of untrusted software, experimentation with software configuration changes, testing of software patches, and so on. It provides a convenient way for users to inspect system changes made within the SEE. If these changes are not accepted, they can be rolled back at the click of a button. Otherwise, the changes can be committed so as to become visible outside the SEE. We provide consistency criteria that ensure semantic consistency of the committed results. We develop two different implementation approaches, one in user-land and the other in the OS kernel, for realizing a safe-execution environment. Our implementation results show that most software, including fairly complex server and client applications, can run successfully within our SEEs. It introduces low performance overheads, typically below 10 percent.", "paper_title": "Alcatraz: An Isolated Environment for Experimenting with Untrusted Software", "paper_id": "WOS:000263100100001"}