{"auto_keywords": [{"score": 0.04876985276069079, "phrase": "dna_sequence_matching"}, {"score": 0.008510411434456825, "phrase": "suffix_tree"}, {"score": 0.005346717933525682, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "large_dna_databases"}, {"score": 0.004735519962945449, "phrase": "molecular_biology"}, {"score": 0.0044800522651664695, "phrase": "dna_databases"}, {"score": 0.004406121974246201, "phrase": "huge_volume"}, {"score": 0.004309434349688514, "phrase": "fast_indexes"}, {"score": 0.0042148594491580324, "phrase": "efficient_processing"}, {"score": 0.0037931018103829427, "phrase": "index_structure"}, {"score": 0.003588291565092195, "phrase": "storage_overhead"}, {"score": 0.0034324073240680213, "phrase": "seamless_integration"}, {"score": 0.003283272764794988, "phrase": "new_index_structure"}, {"score": 0.003175676186323053, "phrase": "proposed_index_structure"}, {"score": 0.0030715948036518603, "phrase": "primary_part"}, {"score": 0.002987463078971627, "phrase": "binary_bit-string_representation"}, {"score": 0.002873524721802591, "phrase": "secondary_part"}, {"score": 0.0028417741269408194, "phrase": "fast_access"}, {"score": 0.002794802975530612, "phrase": "trie's_leaf_nodes"}, {"score": 0.002614534850703364, "phrase": "efficient_algorithms"}, {"score": 0.0023656467839555458, "phrase": "performance_evaluation"}, {"score": 0.002164331818029166, "phrase": "smaller_storage_space"}], "paper_keywords": ["DNA databases", " DNA sequence matching", " indexing"], "paper_abstract": "In molecular biology, DNA sequence matching is one of the most crucial operations. Since DNA databases contain a huge volume of sequences, fast indexes are essential for efficient processing of DNA sequence matching. In this paper, we first point out the problems of the suffix tree, an index structure widely-used for DNA sequence matching, in respect of storage overhead, search performance, and difficulty in seamless integration with DBMS. Then, we propose a new index structure that resolves such problems. The proposed index structure consists of two parts: the primary part realizes the trie as binary bit-string representation without any pointers, and the secondary part helps fast access to the trie's leaf nodes that need to be accessed for post-processing. We also suggest efficient algorithms based on that index for DNA sequence matching. To verify the superiority of the proposed approach, we conduct performance evaluation via a series of experiments. The results reveal that the proposed approach, which requires smaller storage space, can be a few orders of magnitude faster than the suffix tree.", "paper_title": "An efficient approach for sequence matching in large DNA databases", "paper_id": "WOS:000236053800008"}