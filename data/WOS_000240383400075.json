{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "collision_detection"}, {"score": 0.022980773789996002, "phrase": "hardware_implementation"}, {"score": 0.005816181601996504, "phrase": "software_implementation"}, {"score": 0.0047113960612140335, "phrase": "spatial_reasoning"}, {"score": 0.004635187610736025, "phrase": "core_constituent"}, {"score": 0.0045850648862091085, "phrase": "physical_simulation"}, {"score": 0.004486432283770142, "phrase": "computer_animation"}, {"score": 0.004437910956996051, "phrase": "computer-aided_design"}, {"score": 0.004366106816225457, "phrase": "geographic_information_systems"}, {"score": 0.004203030435498069, "phrase": "contact_analysis"}, {"score": 0.004068087482412997, "phrase": "moving_objects"}, {"score": 0.003399466007862412, "phrase": "fourteen_cases"}, {"score": 0.003308195943172624, "phrase": "graphics_hardware"}, {"score": 0.0032546105164772995, "phrase": "efficient_collision_detection"}, {"score": 0.003032228032253871, "phrase": "approximate_but_efficient_mechanism"}, {"score": 0.0029830992938695033, "phrase": "program_codes"}, {"score": 0.002855934865505357, "phrase": "intersection_part"}, {"score": 0.0027341763737751467, "phrase": "interaction_point"}, {"score": 0.002704554429386671, "phrase": "collision_time"}, {"score": 0.0025611773887867255, "phrase": "flight_path_problem"}, {"score": 0.00251966141432339, "phrase": "actual_satellite_picture"}, {"score": 0.002492359933390511, "phrase": "seoul"}, {"score": 0.0023990982005125763, "phrase": "polygon_mesh"}, {"score": 0.002347378595930709, "phrase": "experimental_results"}, {"score": 0.00217496508306238, "phrase": "code_optimization_and_hardware_implementation"}, {"score": 0.0021049977753042253, "phrase": "collision_detection_process"}], "paper_keywords": [""], "paper_abstract": "Spatial reasoning is a core constituent in physical simulation, robotics, computer animation, computer-aided design, and geographic information systems. Many problems in these areas involve contact analysis and collision detection between static and/or moving objects. Due to its wide range of applications, collision detection between objects has been studied in various fields, but collision detection is still considered a major computational bottleneck. We classified collision detection problems into fourteen cases and implemented those using graphics hardware. For efficient collision detection, the algorithm uses various forms of bounding volumes, which are an approximate but efficient mechanism, and program codes are optimized. Our algorithm also produces the intersection part inside an object as well as the interaction point and collision time. We tested both software implementation and hardware implementation on the flight path problem with an actual satellite picture of Seoul, which was represented in a polygon mesh with 250,000 triangle lists. Experimental results demonstrated that hardware implementation was up to 70 times faster than software implementation and that code optimization and hardware implementation can significantly speed up the collision detection process.", "paper_title": "Spatial reasoning for collision detection and hardware implementation", "paper_id": "WOS:000240383400075"}