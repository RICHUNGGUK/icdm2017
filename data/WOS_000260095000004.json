{"auto_keywords": [{"score": 0.042457032177558765, "phrase": "boolean_operations"}, {"score": 0.00481495049065317, "phrase": "greedy_and_optimal_scheduling"}, {"score": 0.004781215097314411, "phrase": "greedy_scheduling_heuristics"}, {"score": 0.0047310525657970615, "phrase": "low_complexity"}, {"score": 0.004648609688625397, "phrase": "hardware-based_crossbar_schedulers"}, {"score": 0.004551563730037998, "phrase": "maximum_matching_algorithm"}, {"score": 0.004519665344659923, "phrase": "bipartite_graphs"}, {"score": 0.004425299304063172, "phrase": "optimal_scheduling"}, {"score": 0.004394281902031765, "phrase": "crossbar-based_interconnection_networks"}, {"score": 0.004302522426263979, "phrase": "scalability_cost"}, {"score": 0.0039264465913491356, "phrase": "inherent_parallelism"}, {"score": 0.003885216927966404, "phrase": "custom_hardware_design"}, {"score": 0.0038309141193444015, "phrase": "maximum_matching"}, {"score": 0.003737697279708501, "phrase": "matrix_computations"}, {"score": 0.0035831245825960617, "phrase": "pure_logic_scheduler"}, {"score": 0.0032697235411641695, "phrase": "algorithmic_complexity"}, {"score": 0.003235367401211807, "phrase": "n_x_n_network"}, {"score": 0.003044702021237908, "phrase": "k"}, {"score": 0.002983652306921617, "phrase": "optimization_steps"}, {"score": 0.002941913249957503, "phrase": "optimal_scheduling_algorithm"}, {"score": 0.002761176640988626, "phrase": "maximum_matching_scheduler"}, {"score": 0.0027034263575471352, "phrase": "optimal_schedule"}, {"score": 0.0026190518142076608, "phrase": "time_complexity"}, {"score": 0.0025733173062050018, "phrase": "crossbar_sizes"}, {"score": 0.0024929933447362554, "phrase": "fpga_synthesis_results"}, {"score": 0.0024408384127819734, "phrase": "greedy_schedule"}, {"score": 0.0022747238867190417, "phrase": "optimization_step"}, {"score": 0.0021499920551456956, "phrase": "current_technology"}, {"score": 0.0021049977753042253, "phrase": "future_technologies"}], "paper_keywords": ["Maximum matching", " Time division multiplexing", " Circuit switching", " Large cardinality cross bar", " Scheduling", " Hardware acceleration"], "paper_abstract": "Greedy scheduling heuristics provide a low complexity and scalable albeit particularly sub-optimal strategy for hardware-based crossbar schedulers. In contrast, the maximum matching algorithm for Bipartite graphs can be used to provide optimal scheduling for crossbar-based interconnection networks with a significant complexity and scalability cost. In this paper, we show how maximum matching can be reformulated in terms of Boolean operations rather than the more traditional formulations. By leveraging the inherent parallelism available in custom hardware design, we reformulate maximum matching in terms of Boolean operations rather than matrix computations and introduce three maximum matching implementations in hardware. Specifically, we examine a Pure Logic Scheduler with three dimensions of parallelism, a Matrix Scheduler with two dimensions of parallelism and a Vector Scheduler with one dimension of parallelism. These designs reduce the algorithmic complexity for an N x N network from O(N-3) to O(1), O(K), and O(KN), respectively, where K is the number of optimization steps. While an optimal scheduling algorithm requires K = 2N - 1 steps, by starting with our hardware-based greedy strategy to generate an initial schedule, our simulation results show that the maximum matching scheduler can achieve 99% of the optimal schedule when K = 9. We examine hardware and time complexity of these architectures for crossbar sizes of up to N = 1024. Using FPGA synthesis results, we show that a greedy schedule for crossbars, ranging from 8 x 8 to 256 x 256, can be optimized in less than 20 ns per optimization step. For crossbars reaching 1024 x 1024 the scheduling can be completed in approximately 10 mu s with current technology and could reach under 90 ns with future technologies. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "A two-stage hardware scheduler combining greedy and optimal scheduling", "paper_id": "WOS:000260095000004"}