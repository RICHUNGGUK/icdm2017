{"auto_keywords": [{"score": 0.03104244392514206, "phrase": "dpll"}, {"score": 0.015581436836502083, "phrase": "clause_learning"}, {"score": 0.006700681664860648, "phrase": "sat"}, {"score": 0.00481495049065317, "phrase": "restricted_branching"}, {"score": 0.004462892860919036, "phrase": "central_role"}, {"score": 0.0044231966846655394, "phrase": "complete_methods"}, {"score": 0.004364310576600359, "phrase": "structured_instances"}, {"score": 0.004325487452170154, "phrase": "constraint_satisfaction_problems"}, {"score": 0.004027031316965272, "phrase": "propositional_satisfiability"}, {"score": 0.0038510053729959074, "phrase": "propositional_formulas"}, {"score": 0.0036173729405604674, "phrase": "davis-putnam-logemann-loveland_procedure"}, {"score": 0.0032638170723261538, "phrase": "strong_unit_propagation_backdoor_set"}, {"score": 0.0030794433253250476, "phrase": "input_variables"}, {"score": 0.00303839203670705, "phrase": "super-polynomial_increase"}, {"score": 0.002957919048133256, "phrase": "optimal_proofs"}, {"score": 0.0028284924551705516, "phrase": "input-restricted_dpll"}, {"score": 0.002765912871190205, "phrase": "dpll."}, {"score": 0.0025632898741546556, "phrase": "unlimited_restarts"}, {"score": 0.0025404470150468387, "phrase": "input-restricted_clause"}, {"score": 0.002181766829493483, "phrase": "input-restricted_branching"}], "paper_keywords": ["Propositional satisfiability", " Branching heuristics", " Clause learning", " DPLL", " Proof complexity", " Problem structure", " Backdoor sets"], "paper_abstract": "The techniques for making decisions, that is, branching, play a central role in complete methods for solving structured instances of constraint satisfaction problems (CSPs). In this work we consider branching heuristics in the context of propositional satisfiability (SAT), where CSPs are expressed as propositional formulas. In practice, there are cases when SAT solvers based on the Davis-Putnam-Logemann-Loveland procedure (DPLL) benefit from limiting the set of variables the solver is allowed to branch on to so called input variables which provide a strong unit propagation backdoor set to any SAT instance. Theoretically, however, restricting branching to input variables implies a super-polynomial increase in the length of the optimal proofs for DPLL (without clause learning), and thus input-restricted DPLL cannot polynomially simulate DPLL. In this paper we settle the case of DPLL with clause learning. Surprisingly, even with unlimited restarts, input-restricted clause learning DPLL cannot simulate DPLL (even without clause learning). The opposite also holds, and hence DPLL and input-restricted clause learning DPLL are polynomially incomparable. Additionally, we analyze the effect of input-restricted branching on clause learning solvers in practice with various structured real-world benchmarks.", "paper_title": "Limitations of restricted branching in clause learning", "paper_id": "WOS:000266448200003"}