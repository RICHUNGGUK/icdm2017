{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multi-processor_speed"}, {"score": 0.004527024978801684, "phrase": "dynamic_speed"}, {"score": 0.004204054047427536, "phrase": "arrival_time"}, {"score": 0.00405127920820053, "phrase": "processing_volume"}, {"score": 0.003808845109556467, "phrase": "energy_consumption"}, {"score": 0.0037159680715717056, "phrase": "multi-processor_environments"}, {"score": 0.003244050414264445, "phrase": "different_processor"}, {"score": 0.0031260524791486347, "phrase": "offline_problem"}, {"score": 0.0030497740719977835, "phrase": "optimal_schedules"}, {"score": 0.002938821840519756, "phrase": "polynomial_time"}, {"score": 0.002867098884583832, "phrase": "convex_non-decreasing_power_function"}, {"score": 0.002762774046280398, "phrase": "previously_known_strategy"}, {"score": 0.0026458370516131255, "phrase": "linear_programming"}, {"score": 0.0025812459787060097, "phrase": "online_problem"}, {"score": 0.0025027144548626975, "phrase": "optimal_available_and_average_rate"}, {"score": 0.002456744238900652, "phrase": "yao_et_al"}, {"score": 0.0023527296826339225, "phrase": "single_processor"}, {"score": 0.0022531089868518235, "phrase": "power_functions"}, {"score": 0.0021049977753042253, "phrase": "processor_speed"}], "paper_keywords": ["Energy efficiency", " Offline algorithm", " Online algorithm", " Flow computation", " Competitive analysis"], "paper_abstract": "We investigate a very basic problem in dynamic speed scaling where a sequence of jobs, each specified by an arrival time, a deadline and a processing volume, has to be processed so as to minimize energy consumption. We study multi-processor environments with m parallel variable-speed processors assuming that job migration is allowed, i.e. whenever a job is preempted it may be moved to a different processor. We first study the offline problem and show that optimal schedules can be computed efficiently in polynomial time, given any convex non-decreasing power function. In contrast to a previously known strategy, our algorithm does not resort to linear programming. For the online problem, we extend two algorithms Optimal Available and Average Rate proposed by Yao et al. [15] for the single processor setting. Here we concentrate on power functions P(s) = s(alpha), where s is the processor speed and alpha > 1 is a constant. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "On multi-processor speed scaling with migration", "paper_id": "WOS:000356644600008"}