{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "modular"}, {"score": 0.004758457292840376, "phrase": "almost_everywhere_invariants"}, {"score": 0.004665764181113345, "phrase": "generic_analysis_approach"}, {"score": 0.004611013257082199, "phrase": "imperative_relationship_update_problem"}, {"score": 0.004450568197899267, "phrase": "global_invariant"}, {"score": 0.0042452552248398445, "phrase": "dependent_refinement_types"}, {"score": 0.0040176151419992956, "phrase": "traditional_flow-insensitive_type_checking"}, {"score": 0.003877737556673229, "phrase": "desired_invariants"}, {"score": 0.003584025547693833, "phrase": "type_analysis"}, {"score": 0.003541923233726252, "phrase": "type_invariants"}, {"score": 0.00348655247465418, "phrase": "inefficient_analysis"}, {"score": 0.003459191419478298, "phrase": "verbose_specifications"}, {"score": 0.0033518704336033874, "phrase": "generic_lifting"}, {"score": 0.0033255627814855163, "phrase": "modular_refinement_type_analyses"}, {"score": 0.003286486670483032, "phrase": "symbolic_analysis"}, {"score": 0.00320970209394799, "phrase": "concise_invariants"}, {"score": 0.0030017207229983385, "phrase": "global_relationship_invariants"}, {"score": 0.0026986685585382347, "phrase": "relationship_invariants"}, {"score": 0.0025436978068459565, "phrase": "significant_challenge"}, {"score": 0.002494039334114861, "phrase": "global_type_consistency"}, {"score": 0.002464709648714996, "phrase": "heap_locations"}, {"score": 0.002407078478216306, "phrase": "almost_type-consistent_heaps"}, {"score": 0.002259883463607508, "phrase": "reflective_method"}, {"score": 0.002233301265743633, "phrase": "dynamic_languages"}, {"score": 0.0022070310530794097, "phrase": "refinement_type_checking_problem"}, {"score": 0.0021384748235753425, "phrase": "reflective_call_safety"}, {"score": 0.002121670413111008, "phrase": "interactive_speeds"}, {"score": 0.0021049977753042253, "phrase": "commonly-used_objective-c_libraries"}], "paper_keywords": ["almost everywhere invariants", " dependent refinement types", " almost type-consistent heaps", " reflection", " Objective-C"], "paper_abstract": "We present a generic analysis approach to the imperative relationship update problem, in which destructive updates temporarily violate a global invariant of interest. Such invariants can be conveniently and concisely specified with dependent refinement types, which are efficient to check flow-insensitively. Unfortunately, while traditional flow-insensitive type checking is fast, it is inapplicable when the desired invariants can be temporarily broken. To overcome this limitation, past works have directly ratcheted up the complexity of the type analysis and associated type invariants, leading to inefficient analysis and verbose specifications. In contrast, we propose a generic lifting of modular refinement type analyses with a symbolic analysis to efficiently and effectively check concise invariants that hold almost everywhere. The result is an efficient, highly modular flow-insensitive type analysis to optimistically check the preservation of global relationship invariants that can fall back to a precise, disjunctive symbolic analysis when the optimistic assumption is violated. This technique permits programmers to temporarily break and then re-establish relationship invariants-a flexibility that is crucial for checking relationships in real-world, imperative languages. A significant challenge is selectively violating the global type consistency invariant over heap locations, which we achieve via almost type-consistent heaps. To evaluate our approach, we have encoded the problem of verifying the safety of reflective method calls in dynamic languages as a refinement type checking problem. Our analysis is capable of validating reflective call safety at interactive speeds on commonly-used Objective-C libraries and applications.", "paper_title": "Fissile Type Analysis: Modular Checking of Almost Everywhere Invariants", "paper_id": "WOS:000331120500008"}