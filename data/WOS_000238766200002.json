{"auto_keywords": [{"score": 0.0475359022069799, "phrase": "placement_information"}, {"score": 0.015719716506582538, "phrase": "pass_separation_techniques"}, {"score": 0.01359345584545469, "phrase": "circuit_layout"}, {"score": 0.012824706019532419, "phrase": "relative_placement_information"}, {"score": 0.009226837835108755, "phrase": "compilation_procedure"}, {"score": 0.009150111892243807, "phrase": "pebble_programs"}, {"score": 0.004636594774238505, "phrase": "compilation_tools"}, {"score": 0.004597861947580946, "phrase": "parametrised_hardware_designs"}, {"score": 0.004464831339066198, "phrase": "pebble"}, {"score": 0.004317450843594688, "phrase": "structural_vhdl"}, {"score": 0.004054071599735255, "phrase": "efficient_designs"}, {"score": 0.003953256858638655, "phrase": "hardware_libraries"}, {"score": 0.0038066979615349822, "phrase": "higher_level"}, {"score": 0.003665552439863732, "phrase": "explicit_coordinates"}, {"score": 0.003286420941205958, "phrase": "flattening_procedure"}, {"score": 0.0031912018800904314, "phrase": "parametrised_blocks"}, {"score": 0.003138030910104256, "phrase": "circuit_description"}, {"score": 0.0030470980812086247, "phrase": "semantic_descriptions"}, {"score": 0.0029587924529332695, "phrase": "flattened_pebble_languages"}, {"score": 0.002873038567884343, "phrase": "relative_placement_method"}, {"score": 0.0027203027216256013, "phrase": "explicit_coordinate_expressions"}, {"score": 0.0026414426081951734, "phrase": "symbolic_placement_constraints"}, {"score": 0.002532724486603177, "phrase": "partial_evaluation"}, {"score": 0.0024489727828322693, "phrase": "parametrised_circuit_descriptions"}, {"score": 0.0024284701569889113, "phrase": "relative_placement"}, {"score": 0.0023779596230982234, "phrase": "original_hierarchical_descriptions"}, {"score": 0.002289667393538803, "phrase": "pattern_matcher_design"}, {"score": 0.0022139352210982398, "phrase": "resource_usage"}, {"score": 0.0021861845339709533, "phrase": "des_encryption"}, {"score": 0.0021049977753042253, "phrase": "des_design"}], "paper_keywords": [""], "paper_abstract": "This paper presents a framework for verifying compilation tools for parametrised hardware designs with placement information. The framework involves Pebble, a simple declarative language based on Structural VHDL which supports the use of placement information to guide circuit layout; such information often leads to efficient designs that are particularly important for hardware libraries. Relative placement information enables control of circuit layout at a higher level of abstraction than placement information in the form of explicit coordinates. An approach based on pass separation techniques is adopted for specifying and verifying two Pebble abstraction mechanisms: a flattening procedure and a relative placement method. For the flattening procedure, which takes a set of parametrised blocks and unfolds the circuit description into a netlist, we provide semantic descriptions of both the hierarchical and the flattened Pebble languages to prove its functional correctness. For the relative placement method, we specify the compilation procedure from Pebble programs with relative placement information to Pebble programs with explicit coordinate expressions, often in the form of symbolic placement constraints. This compilation procedure can be used in conjunction with partial evaluation to optimise the size and speed of parametrised circuit descriptions using relative placement, without flattening the original hierarchical descriptions. Our approach has been used for optimising a pattern matcher design, which results in a 33% reduction in resource usage. For DES encryption, our method can reduce the size of a DES design by 60%.", "paper_title": "Provably-correct hardware compilation tools based on pass separation techniques", "paper_id": "WOS:000238766200002"}