{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "performance-sensitive_queries"}, {"score": 0.03637755549890172, "phrase": "query_complexity"}, {"score": 0.0047468516620285525, "phrase": "algorithmic_complexity"}, {"score": 0.004701985831087475, "phrase": "performance_predictions"}, {"score": 0.004657542074154025, "phrase": "database_queries"}, {"score": 0.004613516457919661, "phrase": "service_providers"}, {"score": 0.004399525320473839, "phrase": "cost-based_or_rule-based_approaches"}, {"score": 0.004275904315753662, "phrase": "database_query_execution_plans"}, {"score": 0.004195418010131832, "phrase": "virtual_machine"}, {"score": 0.003944112858235306, "phrase": "shared_infrastructures"}, {"score": 0.0037969755088553326, "phrase": "right_combination"}, {"score": 0.00370780481244907, "phrase": "proper_tuning"}, {"score": 0.003569451476205552, "phrase": "performance_prediction_model"}, {"score": 0.0035356745476539885, "phrase": "query_execution_time"}, {"score": 0.003371508176308189, "phrase": "user_query_execution_time"}, {"score": 0.0032922964156452696, "phrase": "five_basic_operator_complexities"}, {"score": 0.0028409576481842457, "phrase": "performance_prediction"}, {"score": 0.0027218799769229596, "phrase": "performance-sensitive_query"}, {"score": 0.00258307991054107, "phrase": "tpc-w."}, {"score": 0.002416589459425828, "phrase": "application_query"}, {"score": 0.0023485549678832628, "phrase": "performance_model"}, {"score": 0.0023152577218214804, "phrase": "tpc-w_benchmark"}, {"score": 0.0022393843660697484, "phrase": "real_life_scenario"}, {"score": 0.0022076314894741394, "phrase": "average_prediction_error_rate"}, {"score": 0.0021049977753042253, "phrase": "predictive_model"}], "paper_keywords": ["query performance", " data size", " query complexity", " performance-sensitive query"], "paper_abstract": "Performance predictions for database queries allow service providers to determine what resources are needed to ensure their performance. Cost-based or rule-based approaches have been proposed to optimize database query execution plans. However, Virtual Machine (VM)-based database services have little or no sharing of resources or interactions between applications hosted on shared infrastructures. Neither providers nor users have the right combination of visibility/access/expertise to perform proper tuning and provisioning. This paper presents a performance prediction model for query execution time estimates based on the query complexity for various data sizes. The user query execution time is a combination of five basic operator complexities: O(1), O(log(n)), O(n), O(n log(n), and O(n(2)). Moreover, tests indicate that not all queries are equally important for performance prediction. As such, this paper illustrates a performance-sensitive query locating process on three benchmarks: RUBiS, RUBBoS, and TPC-W. A key observation is that performance-sensitive queries are only a small proportion (20%) of the application query set. Evaluation of the performance model on the TPC-W benchmark shows that the query complexity in a real life scenario has an average prediction error rate of less than 10% which demonstrates the effectiveness of this predictive model.", "paper_title": "Performance Prediction for Performance-Sensitive Queries Based on Algorithmic Complexity", "paper_id": "WOS:000209529500008"}