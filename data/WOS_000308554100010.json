{"auto_keywords": [{"score": 0.04078865209726493, "phrase": "mas"}, {"score": 0.00481495049065317, "phrase": "virtualization_technology"}, {"score": 0.004789272640417375, "phrase": "data_centers"}, {"score": 0.004662913362513954, "phrase": "cloud_providers"}, {"score": 0.004600983660690157, "phrase": "complex_applications"}, {"score": 0.004564219532677855, "phrase": "virtualized_hardware"}, {"score": 0.004515655183335171, "phrase": "big_virtualized_data_centers"}, {"score": 0.00440825801245188, "phrase": "user_side"}, {"score": 0.00426900754050533, "phrase": "cost-efficient_configurations"}, {"score": 0.004201033616196156, "phrase": "dynamic_environments"}, {"score": 0.004167451906343558, "phrase": "service_level_objectives"}, {"score": 0.004079201887393388, "phrase": "software_solution"}, {"score": 0.004014237988692121, "phrase": "human_intervention"}, {"score": 0.003908246778916674, "phrase": "multi-agent_system"}, {"score": 0.003704555230221382, "phrase": "configure_applications"}, {"score": 0.003606711217432998, "phrase": "cost_estimates"}, {"score": 0.003549245218355768, "phrase": "application_specific_knowledge"}, {"score": 0.0034554889970700993, "phrase": "necessary_resources"}, {"score": 0.0034004242101610556, "phrase": "worker_agent"}, {"score": 0.0033105861567468086, "phrase": "specified_quality"}, {"score": 0.003257822913724802, "phrase": "noisy_clouds"}, {"score": 0.0032317564571381656, "phrase": "job_instances"}, {"score": 0.003146360480030653, "phrase": "scheduler_agent"}, {"score": 0.0030962064913500164, "phrase": "limited_resources"}, {"score": 0.0030632140728305813, "phrase": "cost-aware_scheduling"}, {"score": 0.0030063184802762775, "phrase": "low_costs"}, {"score": 0.002982258337258428, "phrase": "whole_architecture"}, {"score": 0.0029112237481352084, "phrase": "public_or_private_clouds"}, {"score": 0.0028801967655724403, "phrase": "private_cloud"}, {"score": 0.0027965622831515463, "phrase": "virtual_machines"}, {"score": 0.002722634472231842, "phrase": "rule-based_mapping_algorithm"}, {"score": 0.0026014029631519545, "phrase": "generic_way"}, {"score": 0.002559913463313091, "phrase": "initial_mapping"}, {"score": 0.0025462308249913643, "phrase": "request_time"}, {"score": 0.0024263237087568464, "phrase": "energy-aware_scheduler"}, {"score": 0.0023940274498526213, "phrase": "cheap_resources"}, {"score": 0.00236849950258728, "phrase": "spot_market"}, {"score": 0.002299689297293321, "phrase": "saas_stack"}, {"score": 0.002244876254113051, "phrase": "energy_function"}, {"score": 0.0021049977753042253, "phrase": "real_cloud_system"}], "paper_keywords": ["Cloud computing", " Autonomic resource management", " SLO-fulfilling", " Cost-aware"], "paper_abstract": "Virtualization technology makes data centers more dynamic and easier to administrate. Today, cloud providers offer customers access to complex applications running on virtualized hardware. Nevertheless, big virtualized data centers become stochastic environments and the simplification on the user side leads to many challenges for the provider. He has to find cost-efficient configurations and has to deal with dynamic environments to ensure service level objectives (SLOs). We introduce a software solution that reduces the degree of human intervention to manage clouds. It is designed as a multi-agent system (MAS) and placed on top of the Infrastructure as a Service (IaaS) layer. Worker agents allocate resources, configure applications, check the feasibility of requests, and generate cost estimates. They are equipped with application specific knowledge allowing it to estimate the type and number of necessary resources. During runtime, a worker agent monitors the job and adapts its resources to ensure the specified quality of service-even in noisy clouds where the job instances are influenced by other jobs. They interact with a scheduler agent, which takes care of limited resources and does a cost-aware scheduling by assigning jobs to times with low costs. The whole architecture is self-optimizing and able to use public or private clouds. Building a private cloud needs to face the challenge to find a mapping of virtual machines (VMs) to hosts. We present a rule-based mapping algorithm for VMs. It offers an interface where policies can be defined and combined in a generic way. The algorithm performs the initial mapping at request time as well as a remapping during runtime. It deals with policy and infrastructure changes. An energy-aware scheduler and the availability of cheap resources provided by a spot market are analyzed. We evaluated our approach by building up an SaaS stack, which assigns resources in consideration of an energy function and that ensures SLOs of two different applications, a brokerage system and a high-performance computing software. Experiments were done on a real cloud system and by simulations.", "paper_title": "Cost-Aware and SLO-Fulfilling Software as a Service", "paper_id": "WOS:000308554100010"}