{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "observational_determinism_security_property"}, {"score": 0.0155263051162166, "phrase": "promela"}, {"score": 0.01241972354336547, "phrase": "observational_determinism"}, {"score": 0.010566096173698254, "phrase": "self-composition_approach"}, {"score": 0.004695900553353526, "phrase": "spin._observational_determinism"}, {"score": 0.004438642216475526, "phrase": "concurrent_programs"}, {"score": 0.004301834610818624, "phrase": "public_variables"}, {"score": 0.004195418010131832, "phrase": "private_variables"}, {"score": 0.0038431888954930083, "phrase": "different_definitions"}, {"score": 0.0034984340449789745, "phrase": "standard_property"}, {"score": 0.003047776993499616, "phrase": "single_formula"}, {"score": 0.0028805474861014722, "phrase": "new_specification"}, {"score": 0.0027916287357898544, "phrase": "linear_temporal_logic"}, {"score": 0.002688532127821979, "phrase": "general_method"}, {"score": 0.00262191949451482, "phrase": "appropriate_program_model"}, {"score": 0.002493592357827492, "phrase": "observational_determinism_property"}, {"score": 0.002431797888365548, "phrase": "embedded_c_codes"}, {"score": 0.0023566987138026285, "phrase": "spin_model_checker"}, {"score": 0.0021857667493036786, "phrase": "promela_code"}, {"score": 0.0021049977753042253, "phrase": "program_model"}], "paper_keywords": ["Model checking", " Linear temporal logic (LTL)", " Information flowsecurity", " Observational determinism", " SPIN", " PROMELA"], "paper_abstract": "Observational determinism is a property that ensures the confidentiality in concurrent programs. It conveys that public variables are independent of private variables during the execution of programs, and the scheduling policy of threads. Different definitions for observational determinism have been proposed. On the other hand, observational determinism is not a standard property and it should be checked over two or more executions of a program. The self-composition approach allows comparing two different copies of a program using a single formula. In this paper, we propose a new specification for the observational determinism security property in linear temporal logic. We also present a general method to create the appropriate program model using the self-composition approach. Both the program model and the observational determinism property are encoded in embedded C codes in PROMELA using the SPIN model checker. The paper also discusses a method for the instrumentation of PROMELA code in order to encode the program model for specifying the observational determinism security property.", "paper_title": "Model checking the observational determinism security property using PROMELA and SPIN", "paper_id": "WOS:000365426000003"}