{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_pattern_instances"}, {"score": 0.015469842941326485, "phrase": "method_signatures"}, {"score": 0.010023459164442661, "phrase": "pattern_instances"}, {"score": 0.009612105607093982, "phrase": "joint_classes"}, {"score": 0.00470697922443172, "phrase": "design_patterns"}, {"score": 0.004661446705304497, "phrase": "best_practices"}, {"score": 0.004571692719970733, "phrase": "high-level_structures"}, {"score": 0.004469151810727749, "phrase": "efficient_recovery"}, {"score": 0.004397313229350093, "phrase": "program_comprehension"}, {"score": 0.00436890075128947, "phrase": "software_reengineering"}, {"score": 0.004215868268050613, "phrase": "straightforward_task"}, {"score": 0.004094639048362357, "phrase": "novel_comprehensive_approach"}, {"score": 0.003925633992809873, "phrase": "key_point"}, {"score": 0.0038127186374325582, "phrase": "different_design_pattern_instances"}, {"score": 0.0037635782112965662, "phrase": "commonly_recurring_sub-patterns"}, {"score": 0.0035616743422949766, "phrase": "class_relationship"}, {"score": 0.0034704317267505035, "phrase": "underlying_method_signatures"}, {"score": 0.0033815186230026243, "phrase": "source_codes"}, {"score": 0.003348764681887211, "phrase": "gof_patterns"}, {"score": 0.0030778231027679464, "phrase": "possible_constituents"}, {"score": 0.003018468582368033, "phrase": "subgraph_discovery"}, {"score": 0.0029892206557359836, "phrase": "sub-pattern_instances"}, {"score": 0.002865710140187219, "phrase": "predefined_patterns"}, {"score": 0.0028013259314454407, "phrase": "behavioral_characteristics"}, {"score": 0.0027472888482450776, "phrase": "predefined_method_signature_templates"}, {"score": 0.002685558057339722, "phrase": "final_pattern_instances"}, {"score": 0.0026423134393535265, "phrase": "existing_approaches"}, {"score": 0.002566215899764421, "phrase": "previous_ideas"}, {"score": 0.0025248881422983553, "phrase": "comprehensive_and_elaborative_approach"}, {"score": 0.0024442137370930296, "phrase": "graph_isomorphism"}, {"score": 0.002420516633871837, "phrase": "prime_number_composition"}, {"score": 0.002366110899738696, "phrase": "search_space"}, {"score": 0.0022830706430588482, "phrase": "behavioral_features"}, {"score": 0.002246292543825748, "phrase": "test_cases"}, {"score": 0.002231747358665628, "phrase": "full_code_coverage"}, {"score": 0.0021886732310288128, "phrase": "extensive_experiments"}, {"score": 0.0021534125023440895, "phrase": "nine_open_source_software_systems"}, {"score": 0.0021049977753042253, "phrase": "balanced_high_precision"}], "paper_keywords": ["Design pattern recovery", " Design patterns", " Sub-patterns", " Graph mining", " Method signature"], "paper_abstract": "Design patterns are formalized best practices that address concerns related to high-level structures for applications being developed. The efficient recovery of design pattern instances significantly facilitates program comprehension and software reengineering. However, the recovery of design pattern instances is not a straightforward task. In this paper, we present a novel comprehensive approach to the recovery of instances of 23 GoF design patterns from source codes. The key point of the approach lies in that we consider different design pattern instances consist of some commonly recurring sub-patterns that are easier to be detected. In addition, we focus not only on the class relationship, but also on the characteristics of underlying method signatures in classes. We first transform the source codes and predefined GoF patterns into graphs, with the classes as nodes and the relationships as edges. We then identify the instances of sub-patterns that would be the possible constituents of pattern instances by means of subgraph discovery. The sub-pattern instances are further merged by the joint classes to see if the collective matches one of the predefined patterns. Finally, we compare the behavioral characteristics of method invocation with the predefined method signature templates of GoF patterns to obtain the final pattern instances directly. Compared with existing approaches, we integrate and improve some of the previous ideas and put forward a comprehensive and elaborative approach also based on our own ideas. We detect sub-patterns via graph isomorphism based on prime number composition and the joint classes to reduce the search space. Meanwhile, we employ the method signatures to investigate the behavioral features to avoid choosing the test cases with full code coverage. The results of the extensive experiments on recovering pattern instances from nine open source software systems demonstrate that our approach obtains the balanced high precision and recall. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "A comprehensive approach to the recovery of design pattern instances based on sub-patterns and method signatures", "paper_id": "WOS:000351971500001"}