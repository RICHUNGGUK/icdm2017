{"auto_keywords": [{"score": 0.04937176974353987, "phrase": "asp"}, {"score": 0.005089564682759558, "phrase": "third_asp_competition"}, {"score": 0.00481495049065317, "phrase": "-set_programming"}, {"score": 0.00477924690801092, "phrase": "answer-set_programming"}, {"score": 0.004673709383305897, "phrase": "truly_declarative_programming_paradigm"}, {"score": 0.004570491683870396, "phrase": "non-monotonic_reasoning"}, {"score": 0.004306205029641728, "phrase": "efficient_asp_systems"}, {"score": 0.004072275820209647, "phrase": "solving_methods"}, {"score": 0.003614678418617691, "phrase": "new_asp_solver"}, {"score": 0.003280891942617853, "phrase": "machine_learning_techniques"}, {"score": 0.003220315882881027, "phrase": "\"best\"_available_solver"}, {"score": 0.0031845067058084583, "phrase": "per-instance_basis"}, {"score": 0.0030794433253250476, "phrase": "latter_direction"}, {"score": 0.0029889584492584073, "phrase": "cheap-to-compute_syntactic_features"}, {"score": 0.0029228387900175554, "phrase": "asp_programs"}, {"score": 0.0028581775908203683, "phrase": "classification_methods"}, {"score": 0.0027026971435126553, "phrase": "solvers'_performance"}, {"score": 0.0026330549554033876, "phrase": "algorithm_selection_strategies"}, {"score": 0.002574788013427524, "phrase": "test_set"}, {"score": 0.002443784721651744, "phrase": "different_training"}, {"score": 0.0024256208351516027, "phrase": "test_sets"}, {"score": 0.0023368018449680295, "phrase": "\"system_track"}], "paper_keywords": ["answer-set programming", " automated algorithm selection", " multi-engine solvers"], "paper_abstract": "Answer-set programming (ASP) is a truly declarative programming paradigm proposed in the area of non-monotonic reasoning and logic programming, which has been recently employed in many applications. The development of efficient ASP systems is, thus, crucial. Having in mind the task of improving the solving methods for ASP, there are two usual ways to reach this goal: (i) extending state-of-the-art techniques and ASP solvers or (ii) designing a new ASP solver from scratch. An alternative to these trends is to build on top of state-of-the-art solvers, and to apply machine learning techniques for choosing automatically the \"best\" available solver on a per-instance basis. In this paper, we pursue this latter direction. We first define a set of cheap-to-compute syntactic features that characterize several aspects of ASP programs. Then, we apply classification methods that, given the features of the instances in a training set and the solvers' performance on these instances, inductively learn algorithm selection strategies to be applied to a test set. We report the results of a number of experiments considering solvers and different training and test sets of instances taken from the ones submitted to the \"System Track\" of the Third ASP Competition. Our analysis shows that by applying machine learning techniques to ASP solving, it is possible to obtain very robust performance: our approach can solve more instances compared with any solver that entered the Third ASP Competition.", "paper_title": "A multi-engine approach to answer-set programming", "paper_id": "WOS:000346848400002"}