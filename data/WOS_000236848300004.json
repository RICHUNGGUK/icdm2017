{"auto_keywords": [{"score": 0.03461617249114157, "phrase": "bunch"}, {"score": 0.00481495049065317, "phrase": "automatic_modularization"}, {"score": 0.004758457292840376, "phrase": "software_systems"}, {"score": 0.004674952036988355, "phrase": "bunch_tool"}, {"score": 0.004592905436175987, "phrase": "modern_software_systems"}, {"score": 0.00405735420159564, "phrase": "software_clustering_techniques"}, {"score": 0.0037797419108291227, "phrase": "architectural-level_views"}, {"score": 0.0037133478610481994, "phrase": "system's_structure"}, {"score": 0.0035210572541244664, "phrase": "bunch_clustering_system"}, {"score": 0.003378385493203297, "phrase": "search_techniques"}, {"score": 0.0032223742018434856, "phrase": "subsystem_decomposition"}, {"score": 0.0028127163745564777, "phrase": "source_code"}, {"score": 0.0027307746993761035, "phrase": "fitness_function"}, {"score": 0.0026355812883224203, "phrase": "graph_partitions"}, {"score": 0.0025892330566358503, "phrase": "search_algorithms"}, {"score": 0.0025286975935774245, "phrase": "satisfactory_solution"}, {"score": 0.0024405312482831646, "phrase": "case_study"}, {"score": 0.002233301265743633, "phrase": "significant_software_systems"}, {"score": 0.0021049977753042253, "phrase": "software_clustering_results"}], "paper_keywords": ["clustering", " reverse engineering", " reengineering", " program comprehension", " optimization", " maintainability"], "paper_abstract": "Since modern software systems are large and complex, appropriate abstractions of their structure are needed to make them more understandable and, thus, easier to maintain. Software clustering techniques are useful to support the creation of these abstractions by producing architectural-level views of a system's structure directly from its source code. This paper examines the Bunch clustering system which, unlike other software clustering tools, uses search techniques to perform clustering. Bunch produces a subsystem decomposition by partitioning a graph of the entities (e.g., classes) and relations (e.g., function calls) in the source code. Bunch uses a fitness function to evaluate the quality of graph partitions and uses search algorithms to find a satisfactory solution. This paper presents a case study to demonstrate how Bunch can be used to create views of the structure of significant software systems. This paper also outlines research to evaluate the software clustering results produced by bunch.", "paper_title": "On the automatic modularization of software systems using the Bunch tool", "paper_id": "WOS:000236848300004"}