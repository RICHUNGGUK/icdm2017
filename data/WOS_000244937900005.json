{"auto_keywords": [{"score": 0.027556317138316112, "phrase": "tuning_time"}, {"score": 0.02410978339549448, "phrase": "node_repetition"}, {"score": 0.00481495049065317, "phrase": "broadcasted_index_tree_structures"}, {"score": 0.00471228691115201, "phrase": "continuous_broadcast"}, {"score": 0.004513450434595191, "phrase": "index_structure"}, {"score": 0.00441718685609235, "phrase": "effective_way"}, {"score": 0.004230749292148046, "phrase": "wireless_mobile_environment"}, {"score": 0.004052148727852149, "phrase": "mobile_client"}, {"score": 0.0038810583785936505, "phrase": "relevant_data"}, {"score": 0.003637822529522622, "phrase": "reduced_power_consumption"}, {"score": 0.003313053707792957, "phrase": "broadcasted_index_trees"}, {"score": 0.00326572165784246, "phrase": "query_execution"}, {"score": 0.0031730701021262155, "phrase": "partial_traversal"}, {"score": 0.002952745241052452, "phrase": "range_queries"}, {"score": 0.002910545717767559, "phrase": "nearest_neighbor_queries"}, {"score": 0.00278752137116301, "phrase": "index_trees"}, {"score": 0.0026889720516076205, "phrase": "mobile_clients"}, {"score": 0.0024664004864629724, "phrase": "client's_available_memory"}, {"score": 0.0023791769068748194, "phrase": "real_and_synthetic_data"}, {"score": 0.0021049977753042253, "phrase": "priority-based_data_management"}], "paper_keywords": ["data dissemination", " index tree structures", " latency and tuning time", " query processing", " wireless broadcast"], "paper_abstract": "The continuous broadcast of data together with an index structure is an effective way of disseminating data in a wireless mobile environment. The index allows a mobile client to tune in only when relevant data is available on the channel and leads to reduced power consumption for the clients. This paper investigates the execution of queries on broadcasted index trees when query execution corresponds to a partial traversal of the tree. Queries exhibiting this behavior include range queries and nearest neighbor queries. We present two broadcast schedules for index trees and two query algorithms executed by mobile clients. Our solutions simultaneously minimize tuning time and latency and adapt to the client's available memory. Experimental results using real and synthetic data compare results for a broadcast with node repetition to one without node repetition and they show how a priority-based data management can help reduce tuning time and latency. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Efficient query execution on broadcasted index tree structures", "paper_id": "WOS:000244937900005"}