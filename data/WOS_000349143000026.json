{"auto_keywords": [{"score": 0.004638602678192715, "phrase": "datatype-generic_treatment"}, {"score": 0.00458940888106061, "phrase": "recursive_container_types"}, {"score": 0.004374385639298755, "phrase": "increasing_order"}, {"score": 0.0042820680211904235, "phrase": "ordering_invariant"}, {"score": 0.004081385289516914, "phrase": "binary_search_trees"}, {"score": 0.003973971215091993, "phrase": "generic_treatment"}, {"score": 0.003687960013746783, "phrase": "failed_experiments"}, {"score": 0.003629392214109574, "phrase": "transferable_learning_experiences"}, {"score": 0.0034777028461723198, "phrase": "total_element"}, {"score": 0.0029630461161780203, "phrase": "agda's_instance_arguments"}, {"score": 0.002869613770219469, "phrase": "proof_search"}, {"score": 0.0026914710445743693, "phrase": "program_text"}, {"score": 0.00256514094268541, "phrase": "indexed_recursive_container_types"}, {"score": 0.0021049977753042253, "phrase": "type_checking"}], "paper_keywords": ["dependent types", " Agda", " ordering", " balancing", " sorting"], "paper_abstract": "I present a datatype-generic treatment of recursive container types whose elements are guaranteed to be stored in increasing order, with the ordering invariant rolled out systematically. Intervals, lists and binary search trees are instances of the generic treatment. On the journey to this treatment, I report a variety of failed experiments and the transferable learning experiences they triggered. I demonstrate that a total element ordering is enough to deliver insertion and flattening algorithms, and show that (with care about the formulation of the types) the implementations remain as usual. Agda's instance arguments and pattern synonyms maximize the proof search done by the typechecker and minimize the appearance of proofs in program text, often eradicating them entirely. Generalizing to indexed recursive container types, invariants such as size and balance can be expressed in addition to ordering. By way of example, I implement insertion and deletion for 2-3 trees, ensuring both order and balance by the discipline of type checking.", "paper_title": "How to Keep Your Neighbours in Order", "paper_id": "WOS:000349143000026"}