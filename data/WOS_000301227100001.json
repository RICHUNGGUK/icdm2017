{"auto_keywords": [{"score": 0.04709637579880684, "phrase": "formal_theory"}, {"score": 0.03287838234092789, "phrase": "col"}, {"score": 0.025914665734855392, "phrase": "conservative_fragment"}, {"score": 0.00481495049065317, "phrase": "computability_logic._computability_logic"}, {"score": 0.0046928556063004214, "phrase": "recently_introduced_semantical_platform"}, {"score": 0.004144810537437608, "phrase": "interactive_computational_tasks"}, {"score": 0.003788196352457501, "phrase": "algorithmic_winning_strategy"}, {"score": 0.0037398106866046972, "phrase": "logical_operators"}, {"score": 0.003316884515934182, "phrase": "expressive_power"}, {"score": 0.0032465423581390625, "phrase": "qualitatively_new_way"}, {"score": 0.003137074867443131, "phrase": "earlier_languages"}, {"score": 0.003044313656896057, "phrase": "circuit-style_structures"}, {"score": 0.0028302635493019867, "phrase": "different_parts"}, {"score": 0.002553382046204689, "phrase": "well_known_independence-friendly_logic"}, {"score": 0.00249919111154604, "phrase": "present_leap"}, {"score": 0.002373767863833987, "phrase": "classical_logic"}, {"score": 0.002274059352027924, "phrase": "formula-based_version"}, {"score": 0.0021049977753042253, "phrase": "prior_familiarity"}], "paper_keywords": ["Computability logic", " Abstract resource semantics", " Independence-friendly logic", " Game semantics", " Interactive computation"], "paper_abstract": "Computability logic (CoL) is a recently introduced semantical platform and ambitious program for redeveloping logic as a formal theory of computability, as opposed to the formal theory of truth that logic has more traditionally been. Its expressions represent interactive computational tasks seen as games played by a machine against the environment, and \"truth\" is understood as existence of an algorithmic winning strategy. With logical operators standing for operations on games, the formalism of CoL is open-ended, and has already undergone series of extensions. This article extends the expressive power of CoL in a qualitatively new way, generalizing formulas (to which the earlier languages of CoL were limited) to circuit-style structures termed cirquents. The latter, unlike formulas, are able to account for subgame/subtask sharing between different parts of the overall game/task. Among the many advantages offered by this ability is that it allows us to capture, refine and generalize the well known independence-friendly logic which, after the present leap forward, naturally becomes a conservative fragment of CoL, just as classical logic had been known to be a conservative fragment of the formula-based version of CoL. Technically, this paper is self-contained, and can be read without any prior familiarity with CoL.", "paper_title": "FROM FORMULAS TO CIRQUENTS IN COMPUTABILITY LOGIC", "paper_id": "WOS:000301227100001"}