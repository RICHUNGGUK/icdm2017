{"auto_keywords": [{"score": 0.04454153022265074, "phrase": "triangle_server"}, {"score": 0.043570429014757106, "phrase": "rendering_engine"}, {"score": 0.004634254474150777, "phrase": "direct_tessellation"}, {"score": 0.004563880494020726, "phrase": "spline_surfaces"}, {"score": 0.004131994716924274, "phrase": "gpu"}, {"score": 0.004007083686875716, "phrase": "triangle_vertices"}, {"score": 0.0031121406603482112, "phrase": "new_architecture"}, {"score": 0.002860546817196148, "phrase": "present_paper"}, {"score": 0.002731971103291716, "phrase": "newly_proposed_architecture"}, {"score": 0.0026698611202305715, "phrase": "current_paper"}, {"score": 0.002530359917257626, "phrase": "backsurface_rejection"}, {"score": 0.0024918548761791435, "phrase": "nurbs_real_time_tesselation"}, {"score": 0.002343599040294187, "phrase": "api."}, {"score": 0.0021049977753042253, "phrase": "pixel_shaders"}], "paper_keywords": [""], "paper_abstract": "In current 3D graphics architectures, the bus between the triangle server and the rendering engine GPU is clogged with triangle vertices and their many attributes (normal vectors, colors, texture coordinates). We have developed a new 3D graphics architecture using data compression to unclog the bus between the triangle server and the rendering engine. This new architecture has been described in [1]. In the present paper we describe further developments of the newly proposed architecture. The current paper shows several interesting extensions of our architecture such as backsurface rejection, NURBS real time tesselation and a description of a surface based API. We also show how the implementation of our architecture operates on top of the pixel shaders.", "paper_title": "Extensions for 3D graphics rendering engine used for direct tessellation of spline surfaces", "paper_id": "WOS:000238389400029"}