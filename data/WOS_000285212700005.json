{"auto_keywords": [{"score": 0.04953663923501101, "phrase": "haskell's_deriving_mechanism"}, {"score": 0.0048150077000639595, "phrase": "haskell"}, {"score": 0.0046797114400479135, "phrase": "automatic_generation"}, {"score": 0.00410472586903709, "phrase": "enum"}, {"score": 0.00401216440036853, "phrase": "show"}, {"score": 0.0033427754823819157, "phrase": "particular_class"}, {"score": 0.0031037644581516973, "phrase": "different_compilers"}, {"score": 0.0029652292779277782, "phrase": "new_approach"}, {"score": 0.0027689017918347755, "phrase": "arbitrary_class_instances"}, {"score": 0.0027374647587075935, "phrase": "standard_datatype-generic_programming_techniques"}, {"score": 0.002333305495464819, "phrase": "functor"}, {"score": 0.0023064582783867645, "phrase": "typeable"}, {"score": 0.0021049977753042253, "phrase": "utrecht_haskell_compiler"}], "paper_keywords": ["Languages"], "paper_abstract": "Haskell's deriving mechanism supports the automatic generation of instances for a number of functions. The Haskell 98 Report only specifies how to generate instances for the Eq, Ord, Enum, Bounded, Show, and Read classes. The description of how to generate instances is largely informal. The generation of instances imposes restrictions on the shape of datatypes, depending on the particular class to derive. As a consequence, the portability of instances across different compilers is not guaranteed. We propose a new approach to Haskell's deriving mechanism, which allows users to specify how to derive arbitrary class instances using standard datatype-generic programming techniques. Generic functions, including the methods from six standard Haskell 98 derivable classes, can be specified entirely within Haskell 98 plus multi-parameter type classes, making them lightweight and portable. We can also express Functor, Typeable, and many other derivable classes with our technique. We implemented our deriving mechanism together with many new derivable classes in the Utrecht Haskell Compiler.", "paper_title": "A Generic Deriving Mechanism for Haskell", "paper_id": "WOS:000285212700005"}