{"auto_keywords": [{"score": 0.048912784012203225, "phrase": "matlab"}, {"score": 0.00481495049065317, "phrase": "matlab_feval"}, {"score": 0.0047559432344272, "phrase": "dynamic_techniques"}, {"score": 0.004611554879923759, "phrase": "popular_dynamic_array-based_language"}, {"score": 0.00430907756010007, "phrase": "built-in_function_feval"}, {"score": 0.004230068512904886, "phrase": "important_matlab_feature"}, {"score": 0.0041269626762569095, "phrase": "numerical_programs"}, {"score": 0.0037621210719690594, "phrase": "function_name"}, {"score": 0.0031649018957020337, "phrase": "significant_performance_overheads"}, {"score": 0.0031260524791486347, "phrase": "function_calls"}, {"score": 0.0030123335878664064, "phrase": "matlab_interpreters"}, {"score": 0.0026458370516131255, "phrase": "feval_calls"}, {"score": 0.0025972447844047515, "phrase": "first_approach"}, {"score": 0.0025338369486914364, "phrase": "stack_replacement_technology"}, {"score": 0.002426566352219338, "phrase": "second_approach"}, {"score": 0.0022670785913397637, "phrase": "runtime_input_argument_types"}, {"score": 0.0022117133940361025, "phrase": "experimental_results"}, {"score": 0.0021845387990972543, "phrase": "seven_numerical_solvers"}, {"score": 0.0021049977753042253, "phrase": "good_performance_improvements"}], "paper_keywords": ["Dynamic Optimization", " JIT Compilation", " feval", " LLVM", " MATLAB", " McJIT"], "paper_abstract": "MATLAB is a popular dynamic array-based language used by engineers, scientists and students worldwide. The built-in function feval is an important MATLAB feature for certain classes of numerical programs and solvers which benefit from having functions as parameters. Programmers may pass a function name or function handle to the solver and then the solver uses feval to indirectly call the function. In this paper, we show that there are significant performance overheads for function calls via feval, in both MATLAB interpreters and JITs. The paper then proposes, implements and compares two on-the-fly mechanisms for specialization of feval calls. The first approach uses on-stack replacement technology, as supported by McVM/McOSR. The second approach specializes calls of functions with feval using a combination of runtime input argument types and values. Experimental results on seven numerical solvers show that the techniques provide good performance improvements.", "paper_title": "Optimizing MATLAB feval with Dynamic Techniques", "paper_id": "WOS:000331121000009"}