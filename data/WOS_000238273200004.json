{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multijava"}, {"score": 0.008749311706002346, "phrase": "java"}, {"score": 0.007286664848566763, "phrase": "open_classes"}, {"score": 0.004736045157669388, "phrase": "conservative_extension"}, {"score": 0.004658426838467567, "phrase": "java_programming_language"}, {"score": 0.0045820747375409435, "phrase": "symmetric_multiple_dispatch"}, {"score": 0.004408729661992651, "phrase": "multiple_dispatch"}, {"score": 0.004265354774450696, "phrase": "binary_method_problem"}, {"score": 0.004081385289516914, "phrase": "extensibility_problem"}, {"score": 0.0040366412779632085, "phrase": "object-oriented_programming_languages"}, {"score": 0.003948613642680196, "phrase": "modular_addition"}, {"score": 0.0038838500580958744, "phrase": "new_types"}, {"score": 0.003841263262252044, "phrase": "new_operations"}, {"score": 0.003778253716938922, "phrase": "existing_type_hierarchy"}, {"score": 0.003478321590910367, "phrase": "modular_compilation_strategies"}, {"score": 0.003328184259386487, "phrase": "key_ideas"}, {"score": 0.00327356326590461, "phrase": "language_design"}, {"score": 0.002931569771634119, "phrase": "functional_languages"}, {"score": 0.0028834401604791076, "phrase": "ml."}, {"score": 0.002758907973783665, "phrase": "application_domains"}, {"score": 0.0025820967615278073, "phrase": "pervasive_computing"}, {"score": 0.0025537472239953807, "phrase": "graphical_user_interfaces"}, {"score": 0.00241658945942583, "phrase": "desired_programming_idioms"}, {"score": 0.0022994427535192514, "phrase": "static_typechecking"}, {"score": 0.002224510044064184, "phrase": "tedious_and_type-unsafe_workarounds"}, {"score": 0.0021049977753042253, "phrase": "new_kinds"}], "paper_keywords": ["open objects", " extensible classes", " extensible external methods", " external methods", " multimethods", " method families", " generic functions", " object-oriented programming languages", " single dispatch", " multiple dispatch", " encapsulation", " modularity", " static type-checking", " subtyping", " inheritance", " Java language", " MultiJava language", " separate compilation", " expression problem", " binary method problem", " augmenting method problem"], "paper_abstract": "MultiJava is a conservative extension of the Java programming language that adds symmetric multiple dispatch and open classes. Among other benefits, multiple dispatch provides a solution to the binary method problem. Open classes provide a solution to the extensibility problem of object-oriented programming languages, allowing the modular addition of both new types and new operations to an existing type hierarchy. This article illustrates and motivates the design of MultiJava and describes its modular static typechecking and modular compilation strategies. Although MultiJava extends Java, the key ideas of the language design are applicable to other object-oriented languages, such as C# and C++, and even, with some modifications, to functional languages such as ML. This article also discusses the variety of application domains in which MultiJava has been successfully used by others, including pervasive computing, graphical user interfaces, and compilers. MultiJava allows users to express desired programming idioms in a way that is declarative and supports static typechecking, in contrast to the tedious and type-unsafe workarounds required in Java. MultiJava also provides opportunities for new kinds of extensibility that are not easily available in Java.", "paper_title": "MultiJava: Design rationale, compiler implementation, and applications", "paper_id": "WOS:000238273200004"}