{"auto_keywords": [{"score": 0.049479057100967866, "phrase": "mutation_testing"}, {"score": 0.015719716506582538, "phrase": "multithreaded_code"}, {"score": 0.007399926947791477, "phrase": "test_suite"}, {"score": 0.005644891806739419, "phrase": "general_framework"}, {"score": 0.004665483918844599, "phrase": "well-established_method"}, {"score": 0.004435885269134359, "phrase": "test_suites"}, {"score": 0.0043527164193299574, "phrase": "major_cost"}, {"score": 0.0036018503805251424, "phrase": "test_cases"}, {"score": 0.0033814348757887232, "phrase": "test_case"}, {"score": 0.003235193484261443, "phrase": "multiple_possible_thread_schedules"}, {"score": 0.003075765038696993, "phrase": "efficient_exploration"}, {"score": 0.002815383690003621, "phrase": "five_techniques"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["mutation testing", " multithreaded code"], "paper_abstract": "Mutation testing is a well-established method for measuring and improving the quality of test suites. A major cost of mutation testing is the time required to execute the test suite on all the mutants. This cost is even greater when the system under test is multithreaded: not only are test cases from the test suite executed on many mutants but also each test case is executedor more precisely, exploredfor multiple possible thread schedules. This paper introduces a general framework for efficient exploration that can reduce the time for mutation testing of multithreaded code. The paper presents five techniques (four optimizations and one heuristic) that are implemented in a tool called MuTMuT within the general framework. Evaluation of MuTMuT on mutation testing of 12 multithreaded programs shows that it can substantially reduce the time required for mutation testing of multithreaded code.Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Efficient mutation testing of multithreaded code", "paper_id": "WOS:000321749900003"}