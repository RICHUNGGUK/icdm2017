{"auto_keywords": [{"score": 0.0393378573740974, "phrase": "module_systems"}, {"score": 0.03780833220459644, "phrase": "global_java_ecosystem"}, {"score": 0.004815215771351813, "phrase": "java"}, {"score": 0.004668957916795845, "phrase": "runtime_module_systems"}, {"score": 0.004504193207111593, "phrase": "core_mechanisms"}, {"score": 0.004435363840720883, "phrase": "interoperable_runtime_module_systems"}, {"score": 0.004256895619944631, "phrase": "component_platforms"}, {"score": 0.0041703614123283165, "phrase": "eclipse_rich_client_platform"}, {"score": 0.004127753467337283, "phrase": "apache_geronimo"}, {"score": 0.003941319912895672, "phrase": "java_classes"}, {"score": 0.0034663083890589235, "phrase": "first_step"}, {"score": 0.003292685392413911, "phrase": "different_module_systems"}, {"score": 0.0032423089921154503, "phrase": "traditional_java_class_loaders"}, {"score": 0.003209152260950748, "phrase": "geronimo_beans"}, {"score": 0.0030640804704319255, "phrase": "low-level_core_mechanisms"}, {"score": 0.0028807718824400697, "phrase": "reusable_and_adaptable_mechanisms"}, {"score": 0.0026532596852754525, "phrase": "single_runtime_environment"}, {"score": 0.0025202582748972122, "phrase": "different_open-source_component_platforms"}, {"score": 0.0023451553255837317, "phrase": "integration_challenges"}, {"score": 0.0023211517663846346, "phrase": "heterogeneous_module_systems"}, {"score": 0.0022275639370573264, "phrase": "current_implementation"}, {"score": 0.002204765578837237, "phrase": "felix"}, {"score": 0.002159852420283463, "phrase": "apache_community"}, {"score": 0.0021049977753042253, "phrase": "integration_path"}], "paper_keywords": [""], "paper_abstract": "We present the design of core mechanisms for building interoperable runtime module systems. Runtime modules are the cornerstone of component platforms, such as Eclipse Rich Client Platform or Apache Geronimo, since they provide components with their namespace for Java classes and resources. Unfortunately, much diversity exists today regarding module systems, thereby hindering the creation of a global Java ecosystem for components. Our approach proposes a first step towards a solution since our design can model and integrate different module systems such as traditional Java class loaders, Geronimo Beans, or the OSGi framework. We propose low-level core mechanisms, both modular and flexible, that enables building such module systems from reusable and adaptable mechanisms. Furthermore, once module systems are built with our core mechanisms, our approach enables their integration within a single runtime environment. This is especially important at a time where different open-source component platforms, as well as the products built upon them, are facing the integration challenges between heterogeneous module systems. Our design is the basis of the current implementation of Felix, within the Apache community; it illustrates an integration path towards a global Java ecosystem for components.", "paper_title": "A Java framework for building and integrating runtime module systems", "paper_id": "WOS:000243318600050"}