{"auto_keywords": [{"score": 0.004460309246062286, "phrase": "execution_event"}, {"score": 0.00437021209960886, "phrase": "popular_approach"}, {"score": 0.004238452771031322, "phrase": "hpc_applications"}, {"score": 0.003807684498435389, "phrase": "application_execution"}, {"score": 0.003563172322934695, "phrase": "application_performance"}, {"score": 0.0032172054825137866, "phrase": "large_event"}, {"score": 0.003010496595090984, "phrase": "mpi_application_event"}, {"score": 0.002530359917257626, "phrase": "combined_framework"}, {"score": 0.0022041312401435346, "phrase": "proposed_combination"}, {"score": 0.0021049977753042253, "phrase": "mpi_applications"}], "paper_keywords": ["Simulation", " offline", " MPI applications", " traces"], "paper_abstract": "The off-line (or post-mortem) analysis of execution event traces is a popular approach to understand the performance of HPC applications that use the message passing paradigm. Combining this analysis with simulation makes it possible to \"replay\" the application execution to explore \"what if?\" scenarios, e.g., assessing application performance in a range of (hypothetical) execution environments. However, such off-line analysis faces scalability issues for acquiring, storing, or replaying large event traces. We first present two previously proposed and complementary frameworks for off-line replaying of MPI application event traces, each with its own objectives and limitations. We then describe how these frameworks can be combined so as to capitalize on their respective strengths while alleviating several of their limitations. We claim that the combined framework affords levels of scalability that are beyond that achievable by either one of the two individual frameworks. We evaluate this framework to illustrate the benefits of the proposed combination for a more scalable off-line analysis of MPI applications.", "paper_title": "Toward More Scalable Off-Line Simulations of MPI Applications", "paper_id": "WOS:000365777500004"}