{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "homogeneous_real-time_systems"}, {"score": 0.004724365740062236, "phrase": "real-time_systems"}, {"score": 0.004255639740735269, "phrase": "commercial_terms"}, {"score": 0.004058180509184539, "phrase": "social_impact"}, {"score": 0.003906804492585634, "phrase": "real-time_computers"}, {"score": 0.003725470458263889, "phrase": "life-critical_applications"}, {"score": 0.0035525230119401153, "phrase": "stringent_reliability_conditions"}, {"score": 0.00332375606483146, "phrase": "real-time_system"}, {"score": 0.0029935730127943496, "phrase": "reliability_requirements"}, {"score": 0.0028006988338192375, "phrase": "critical_task_deadlines"}, {"score": 0.0021049977753042253, "phrase": "software_failure"}], "paper_keywords": ["Algorithms", " Reliability", " Cyber-physical systems", " task assignment", " task scheduling", " real-time systems", " time redundancy"], "paper_abstract": "Real-time systems are one of the most important applications of computers, both in commercial terms and in terms of social impact. Increasingly, real-time computers are used to control life-critical applications and need to meet stringent reliability conditions. Since the reliability of a real-time system is related to the probability of meeting its hard deadlines, these reliability requirements translate to the need to meet critical task deadlines with a very high probability. We survey the problem of how to schedule tasks in such a way that deadlines continue to be met despite processor (permanent or transient) or software failure.", "paper_title": "Fault-Tolerant Scheduling in Homogeneous Real-Time Systems", "paper_id": "WOS:000336405900006"}