{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "combinatorial_auctions"}, {"score": 0.0043842558719324526, "phrase": "winning_bids"}, {"score": 0.004328576620172575, "phrase": "winner_determination_problem"}, {"score": 0.004275341747007288, "phrase": "np"}, {"score": 0.0040779081518317415, "phrase": "interesting_variant"}, {"score": 0.00397495478332679, "phrase": "bid_evaluation_problem"}, {"score": 0.003760685138103153, "phrase": "precedence_constraints"}, {"score": 0.0037287578312533596, "phrase": "temporal_windows"}, {"score": 0.0036813768831946004, "phrase": "bep"}, {"score": 0.003512702405367876, "phrase": "transportation_routes"}, {"score": 0.0034532961266947734, "phrase": "take_off_and_landing_time_slot_allocation_problems"}, {"score": 0.0033374705499418377, "phrase": "optimization_algorithms"}, {"score": 0.0032950412841674026, "phrase": "constraint_programming"}, {"score": 0.0032531496610470377, "phrase": "integer_programming"}, {"score": 0.0029744042270542655, "phrase": "bep_instances"}, {"score": 0.0029491324941225356, "phrase": "multi_agent_negotiation"}, {"score": 0.002850168497994985, "phrase": "agent_negotiation"}, {"score": 0.0027662954811372154, "phrase": "developed_algorithms"}, {"score": 0.0027194778713860715, "phrase": "decision_tree_machine_learning_technique"}, {"score": 0.0026394405584281443, "phrase": "instance_structure"}, {"score": 0.0026058621464926826, "phrase": "solving_algorithm"}, {"score": 0.002561752783323717, "phrase": "automatic_algorithm_selection_procedure"}, {"score": 0.0024028742248152425, "phrase": "best_algorithm"}, {"score": 0.0023123057299992587, "phrase": "significant_time_saving_w.r.t"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["combinatorial auctions", " combinatorial optimization", " decision tree machine learning", " algorithm selection"], "paper_abstract": "In combinatorial auctions bidders can post bids on groups of items. The problem of selecting the winning bids, called Winner Determination Problem, is NP-hard. In this paper, we consider an interesting variant of this problem, called Bid Evaluation Problem (BEP), where items are services and are subject to precedence constraints and temporal windows. The BEP has many practical applications, such as, for instance, in transportation routes auctions and in take off and landing time slot allocation problems. We have developed a number of optimization algorithms based on Constraint Programming, on Integer Programming and on the combination of the two techniques. We first show that all algorithms proposed outperform the only commercial system for solving BEP instances called Multi AGent Negotiation Testbed, a more general tool for agent negotiation. Then, we evaluate the developed algorithms and use the decision tree machine learning technique for finding a relation between the instance structure and the solving algorithm and providing an automatic algorithm selection procedure. We show that we can achieve an accuracy of 90% in predicting the best algorithm given the instance to be solved with a significant time saving w.r.t. a single solving technique or a costless, but less accurate, prediction technique. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Bid evaluation in combinatorial auctions: optimization and learning", "paper_id": "WOS:000269090900002"}