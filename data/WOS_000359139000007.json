{"auto_keywords": [{"score": 0.030316400616731052, "phrase": "optimization_model"}, {"score": 0.00481495049065317, "phrase": "-functional_or_quality_requirements"}, {"score": 0.00443308765153716, "phrase": "software_system"}, {"score": 0.004181839414007266, "phrase": "functional_aspect"}, {"score": 0.004141365648080381, "phrase": "requirements_engineering"}, {"score": 0.004101281992566145, "phrase": "recent_years"}, {"score": 0.003925633992809873, "phrase": "non-functional_requirements"}, {"score": 0.0038127186374325582, "phrase": "nfr_framework"}, {"score": 0.003757480190200645, "phrase": "qualitative_method"}, {"score": 0.003278878522165815, "phrase": "associated_implementation_methods"}, {"score": 0.0031845067058084583, "phrase": "fully_documented_decision"}, {"score": 0.003107935254560724, "phrase": "said_methods"}, {"score": 0.003018468582368033, "phrase": "formal_linear_programming_optimization_model"}, {"score": 0.0029031614127920232, "phrase": "operationalization_selection"}, {"score": 0.0026986685585382347, "phrase": "original_framework"}, {"score": 0.0026209522797963447, "phrase": "sensitivity_analysis"}, {"score": 0.0025085435314540837, "phrase": "useful_data"}, {"score": 0.002400944221804575, "phrase": "additional_data"}, {"score": 0.002320449502337321, "phrase": "conflict_resolution"}, {"score": 0.002264607102799332, "phrase": "initial_quantitative_values"}, {"score": 0.0021049977753042253, "phrase": "simulation-based_analysis"}], "paper_keywords": ["requirements engineering", " non-functional requirements", " NFR framework", " optimization", " simulation"], "paper_abstract": "Non-functional or quality requirements such as, performance, timeliness and security are often crucial for the success of a software system. Several well-known techniques and frameworks have been developed to deal with the functional aspect of requirements engineering. Recent years have seen the emergence of frameworks that incorporate non-functional requirements (NFRs). The NFR Framework is a qualitative method that bridges the gap between the idea of NFRs, and a software design that encompasses these ideas. The framework functions by modelling NFRs and the associated implementation methods, eventually resulting in a fully documented decision regarding the implementation of said methods. This paper presents a formal linear programming optimization model for the NFR Framework with regard to operationalization selection. The optimization model has the capability of handling large, complicated graphs that were unwieldy in the original framework. The inclusion of a sensitivity analysis expands the functionality of the optimization model to provide useful data on even the smallest of problems. These additional data allow the optimization model to assist in conflict resolution with regard to the initial quantitative values. The approach is illustrated using two case studies from the literature and verified through a simulation-based analysis.", "paper_title": "Non-Functional Requirements Framework: A Mathematical Programming Approach", "paper_id": "WOS:000359139000007"}