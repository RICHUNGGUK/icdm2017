{"auto_keywords": [{"score": 0.04942981937458461, "phrase": "multi-temporal_databases"}, {"score": 0.029947261988086258, "phrase": "previous_schema_versions"}, {"score": 0.00481495049065317, "phrase": "efficient_management_of_schema_versioning"}, {"score": 0.004590217765551337, "phrase": "complete_data_history"}, {"score": 0.004527947981009528, "phrase": "temporal_databases"}, {"score": 0.004466519142879166, "phrase": "database_management_systems"}, {"score": 0.0038960785110831162, "phrase": "different_schema_versions"}, {"score": 0.0037395458116642306, "phrase": "new_approach"}, {"score": 0.0034924598001567944, "phrase": "efficient_management"}, {"score": 0.0034450303951025704, "phrase": "schema_versions"}, {"score": 0.003306559295382181, "phrase": "smooth_conversion"}, {"score": 0.003239418275717787, "phrase": "temporal_database"}, {"score": 0.0031305230217636495, "phrase": "new_schema_version"}, {"score": 0.003066945490483524, "phrase": "basic_idea"}, {"score": 0.0029235593748707495, "phrase": "automatic_transfer"}, {"score": 0.002767856819656175, "phrase": "new_version"}, {"score": 0.0026565317818265394, "phrase": "data_loss"}, {"score": 0.002532284627202572, "phrase": "temporal_intervals"}, {"score": 0.0021932609696277937, "phrase": "legacy_applications"}, {"score": 0.0021049977753042253, "phrase": "schema_evolution"}], "paper_keywords": ["Schema evolution", " schema versioning", " temporal databases", " multi-temporal databases", " application time", " database conversion"], "paper_abstract": "To guarantee a complete data history in temporal databases, database management systems have to manage both evolution of schema over time; through their versioning, and evolution of data defined under different schema versions. This paper proposes a new approach for schema versioning in multi-temporal databases. It allows an efficient management of schema versions and their underlying data, through a smooth conversion of the temporal database. When creating a new schema version, the basic idea consists in forbidding 1) any automatic transfer of data defined under previous schema versions to this new version, in order to avoid data loss and ambiguousness in the interpretation of temporal intervals of data, and 2) any change in the structures of previous schema versions, in order to permit to the legacy applications to remain operational after this schema evolution.", "paper_title": "Efficient Management of Schema Versioning in Multi-Temporal Databases", "paper_id": "WOS:000312043700007"}