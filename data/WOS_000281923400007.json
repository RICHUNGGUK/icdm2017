{"auto_keywords": [{"score": 0.043779260734752676, "phrase": "ohc"}, {"score": 0.015533739383981547, "phrase": "compound_loops"}, {"score": 0.015411001346528695, "phrase": "verilog"}, {"score": 0.00481495049065317, "phrase": "best_compromise"}, {"score": 0.004570326517392777, "phrase": "special_optimization_problem"}, {"score": 0.00444377150105556, "phrase": "nested_and_consecutive_sub-loops"}, {"score": 0.004286171444202565, "phrase": "compound_loop"}, {"score": 0.004217925382695912, "phrase": "different_optimized_hardware_configuration"}, {"score": 0.004134137523409649, "phrase": "optimized_execution_times"}, {"score": 0.003939748053452577, "phrase": "optimized_execution_time"}, {"score": 0.0035350218469335573, "phrase": "minimal_ohc"}, {"score": 0.0034508665218929745, "phrase": "different_heat_levels"}, {"score": 0.0032753168662834516, "phrase": "good_compromise"}, {"score": 0.003146360480030653, "phrase": "nested_loops"}, {"score": 0.003083793024782014, "phrase": "quite_a_few_systems"}, {"score": 0.002880196765572443, "phrase": "integer_linear_programming"}, {"score": 0.0027778947555117243, "phrase": "fast_space_exploration_technique"}, {"score": 0.002733598121537801, "phrase": "efficient_variant"}, {"score": 0.002668470532683947, "phrase": "novel_aspect"}, {"score": 0.002636489396049042, "phrase": "proposed_system"}, {"score": 0.0025736694380861604, "phrase": "real_latencies"}, {"score": 0.00254282157860369, "phrase": "hardware_units"}, {"score": 0.0024230746206056536, "phrase": "real_values"}, {"score": 0.0023653276631862958, "phrase": "highlevel_synthesis_systems"}, {"score": 0.0023463854193479274, "phrase": "experimental_results"}, {"score": 0.0023182554418193927, "phrase": "significant_improvement"}, {"score": 0.0022630008787375435, "phrase": "significant_increase"}, {"score": 0.0022358683283304533, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["High-level synthesis", " FPGA", " Compilation"], "paper_abstract": "In this work we consider a special optimization problem involved with compiling compound loops (combining nested and consecutive sub-loops) to Verilog. Each sub-loop of the compound loop may require a different optimized hardware configuration (OHC) for optimized execution times. For example, one loop requires at least two memory ports and one multiplier for an optimized execution time, while another loop may require only one memory port but two multipliers, yet one OHC should be selected for both loops. The goal is to compute a minimal OHC which, based on the different heat levels (expected number of iterations) of the sub-loops, is a good compromise between all the conflicting requirements of each sub-loop. Though synthesis of nested loops has been implemented in quite a few systems this aspect has not been considered so far. We avoid the use of time consuming integer linear programming (ILP) techniques and instead use a fast space exploration technique combined with an efficient variant of list scheduling. Another novel aspect of the proposed system is the observation that the real latencies of the hardware units should be considered as variables of the OHC rather than fixed real values as is usually done in highlevel synthesis systems. Experimental results show a significant improvement in the OHC without a significant increase in the execution time due to the use of this search procedure.(1) (C) 2010 Published by Elsevier B.V.", "paper_title": "Finding the best compromise in compiling compound loops to Verilog", "paper_id": "WOS:000281923400007"}