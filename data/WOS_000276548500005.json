{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cuda_compatible_gpus"}, {"score": 0.043616210216916355, "phrase": "proposed_method"}, {"score": 0.032584416833242265, "phrase": "reconstruction_performance"}, {"score": 0.004773040022691547, "phrase": "compute_unified_device_architecture"}, {"score": 0.004649474569983707, "phrase": "software_development_platform"}, {"score": 0.004529093447865156, "phrase": "c-like_programs"}, {"score": 0.004470071518923524, "phrase": "nvidia_graphics_processing_unit"}, {"score": 0.004297560964892607, "phrase": "acceleration_method"}, {"score": 0.004260134699483774, "phrase": "cone_beam_reconstruction"}, {"score": 0.0041136473765874815, "phrase": "feldkamp"}, {"score": 0.0040779174174506395, "phrase": "davis"}, {"score": 0.004024656208486298, "phrase": "kress"}, {"score": 0.003687439449869248, "phrase": "memory_bandwidth"}, {"score": 0.003529543381704363, "phrase": "memory_latency"}, {"score": 0.003393206299636482, "phrase": "multiple_gpus"}, {"score": 0.003219553875143356, "phrase": "reconstruction_code"}, {"score": 0.0031360786664165093, "phrase": "analytical_model"}, {"score": 0.0030547611342112693, "phrase": "multi-gpu_environments"}, {"score": 0.0028857130140890787, "phrase": "theoretical_memory_bandwidth"}, {"score": 0.0025863988422430797, "phrase": "previous_cuda-based_method"}, {"score": 0.002497319603143104, "phrase": "cpu-based_method"}, {"score": 0.002464709648714996, "phrase": "vector_intrinsics"}, {"score": 0.0024325244760735566, "phrase": "detailed_analyses"}, {"score": 0.0023384629381463054, "phrase": "acceleration_techniques"}, {"score": 0.0022777800735119405, "phrase": "naive_method"}, {"score": 0.0021896891011033105, "phrase": "core_reconstruction"}, {"score": 0.0021705796895687864, "phrase": "large-scale_datasets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cone beam reconstruction", " Acceleration", " GPU", " CUDA"], "paper_abstract": "Compute unified device architecture (CUDA) is a software development platform that allows us to run C-like programs on the nVIDIA graphics processing unit (CPU). This paper presents an acceleration method for cone beam reconstruction using CUDA compatible GPUs. The proposed method accelerates the Feldkamp, Davis, and Kress (FDK) algorithm using three techniques: (1) off-chip memory access reduction for saving the memory bandwidth; (2) loop unrolling for hiding the memory latency; and (3) multithreading for exploiting multiple GPUs. We describe how these techniques can be incorporated into the reconstruction code. We also show an analytical model to understand the reconstruction performance on multi-GPU environments. Experimental results show that the proposed method runs at 83% of the theoretical memory bandwidth, achieving a throughput of 64.3 projections per second (pps) for reconstruction of 512(3)-voxel volume from 360 512(2)-pixel projections. This performance is 41% higher than the previous CUDA-based method and is 24 times faster than a CPU-based method optimized by vector intrinsics. Some detailed analyses are also presented to understand how effectively the acceleration techniques increase the reconstruction performance of a naive method. We also demonstrate out-of-core reconstruction for large-scale datasets, up to 1024(3)-voxel volume. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "High-performance cone beam reconstruction using CUDA compatible GPUs", "paper_id": "WOS:000276548500005"}