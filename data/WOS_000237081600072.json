{"auto_keywords": [{"score": 0.03830596095410129, "phrase": "data_layer"}, {"score": 0.00481495049065317, "phrase": "novel_architecture"}, {"score": 0.004763565662615503, "phrase": "data_processing"}, {"score": 0.004637478829869904, "phrase": "functional_fusion"}, {"score": 0.004490552331642995, "phrase": "computation_layer"}, {"score": 0.004165497627464024, "phrase": "significant_speedups"}, {"score": 0.004121015016128205, "phrase": "data_processing_jobs"}, {"score": 0.004055176557424983, "phrase": "data_analysis"}, {"score": 0.003969018740062018, "phrase": "large_data_sets"}, {"score": 0.00360445399057499, "phrase": "grid"}, {"score": 0.0035648266669315943, "phrase": "job_submission_events"}, {"score": 0.003470358620464986, "phrase": "query_processor"}, {"score": 0.0034148795808317555, "phrase": "dbms_side"}, {"score": 0.0032888418378433037, "phrase": "data_processing_job"}, {"score": 0.003150466780962537, "phrase": "early_deployment"}, {"score": 0.0031167895790050405, "phrase": "on-the-fly_data_aggregation_techniques"}, {"score": 0.002859977408815691, "phrase": "stark_contrast"}, {"score": 0.0028293966058473476, "phrase": "existing_grid_solutions"}, {"score": 0.002769209760453212, "phrase": "data_layers"}, {"score": 0.002447101794397243, "phrase": "optimal_solution"}, {"score": 0.0023189818169615135, "phrase": "computation_speed-up_benefits"}, {"score": 0.0021857667493036786, "phrase": "real_business_deployment"}, {"score": 0.0021507795710951384, "phrase": "financial_customer_profiling"}, {"score": 0.002127765807039172, "phrase": "common_types"}, {"score": 0.0021049977753042253, "phrase": "data_analytics"}], "paper_keywords": [""], "paper_abstract": "In [12] we introduce a novel architecture for data processing, based on a functional fusion between a data and a computation layer. In this demo we show how this architecture is leveraged to offer significant speedups for data processing jobs such as data analysis and mining over large data sets. One novel contribution of our solution is its data-driven approach. The computation infrastructure is controlled from within the data layer. Grid compute job submission events are based within the query processor on the DBMS side and in effect controlled by the data processing job to be performed. This allows the early deployment of on-the-fly data aggregation techniques, minimizing the amount of data to be transfered to/from compute nodes and is in stark contrast to existing Grid solutions that interact with data layers as external (mainly) \"storage\" components. By integrating scheduling intelligence in the data layer itself we show that it is possible to provide a close to optimal solution to the more general grid trade-off between required data replication costs and computation speed-up benefits. We validate this in a scenario derived from a real business deployment, involving financial customer profiling using common types of data analytics.", "paper_title": "XG: A grid-enabled query processing engine", "paper_id": "WOS:000237081600072"}