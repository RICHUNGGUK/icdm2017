{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "three-dimensional_meshes"}, {"score": 0.0046797114400479135, "phrase": "emerging_use"}, {"score": 0.004641770842098217, "phrase": "mesh-based_multicomputers"}, {"score": 0.004585433265422727, "phrase": "recently_mesh-based_multiprocessor_systems"}, {"score": 0.0044025116437190785, "phrase": "processor_management"}, {"score": 0.004278807087784626, "phrase": "mesh-based_multiprocessor"}, {"score": 0.004226856126282259, "phrase": "repeated_submesh_allocations"}, {"score": 0.004141663280057689, "phrase": "system_network"}, {"score": 0.00399260264462941, "phrase": "unallocated_nodes"}, {"score": 0.0037866774001097596, "phrase": "contiguous_processor_allocation"}, {"score": 0.003740679163860117, "phrase": "new_tasks"}, {"score": 0.0035477010181860376, "phrase": "suitable_submesh"}, {"score": 0.0032700071110068323, "phrase": "adjacent_free_nodes"}, {"score": 0.0031522185379771056, "phrase": "new_task"}, {"score": 0.003076052206618737, "phrase": "low_system_performance"}, {"score": 0.003051073364818384, "phrase": "task_migration"}, {"score": 0.0027330029055210926, "phrase": "newly_freed_areas"}, {"score": 0.00266693888510356, "phrase": "larger_submeshes"}, {"score": 0.002508663916554954, "phrase": "code_task_migration"}, {"score": 0.0024480094603893175, "phrase": "congestion_detection"}, {"score": 0.0024281181691350085, "phrase": "different_steps"}, {"score": 0.0024083881142747954, "phrase": "task_migration_algorithms"}, {"score": 0.0022561982694417116, "phrase": "new_task_migration_algorithm"}, {"score": 0.0021571717917276724, "phrase": "special_case"}], "paper_keywords": ["Multicomputers", " Interconnection networks", " 3D Meshes", " 2D Meshes", " Task migration"], "paper_abstract": "As a result of the emerging use of mesh-based multicomputers (and recently mesh-based multiprocessor systems-on-chip), issues related to processor management have attracted much attention. In a mesh-based multiprocessor, after repeated submesh allocations and de-allocations, the system network may be fragmented, i.e. there might be unallocated nodes in the network. As a result, in a system with contiguous processor allocation, no new tasks can start running due to the lack of enough free adjacent processors to form a suitable submesh. Although there might be enough free processors available, they remain idle until the allocator can find a set of adjacent free nodes forming a submesh to be used for the new task. This can lead to low system performance. Task migration was introduced as a solution to this problem through migration of tasks running on some submeshes to other free areas in order to reduce fragmentation by chaining the newly freed areas and disengaging nodes to form larger submeshes. In this paper, we propose a novel structured and formulated way to code task migration, which is helpful for congestion detection in different steps of task migration algorithms. Moreover, considering the fact that the 3D mesh-based multicomputers are now very popular, a new task migration algorithm in 3D meshes is proposed. We also address the special case of the 2D migration in a 3D mesh multicomputer.", "paper_title": "Task migration in three-dimensional meshes", "paper_id": "WOS:000290027500004"}