{"auto_keywords": [{"score": 0.03782808165713525, "phrase": "conventional_methods"}, {"score": 0.00481495049065317, "phrase": "coding-based_ensemble_learning"}, {"score": 0.004726052718910578, "phrase": "software_defect_prediction"}, {"score": 0.004638788604042707, "phrase": "classification_methods"}, {"score": 0.004553128404612054, "phrase": "software_defect"}, {"score": 0.004469042910390712, "phrase": "static_code_attributes"}, {"score": 0.004359328949187473, "phrase": "great_deal"}, {"score": 0.004225950334493496, "phrase": "class-imbalance_characteristic"}, {"score": 0.004173743791750695, "phrase": "software_defect_data"}, {"score": 0.0034634973175137486, "phrase": "cost-sensitive_learning"}, {"score": 0.0034206862586206367, "phrase": "bagging"}, {"score": 0.0031944286166257466, "phrase": "important_information"}, {"score": 0.0031549249117721946, "phrase": "unexpected_mistakes"}, {"score": 0.0030017207229983385, "phrase": "original_data_distribution"}, {"score": 0.0028917056916949744, "phrase": "novel_method"}, {"score": 0.002803104254950008, "phrase": "imbalanced_binary-class_data"}, {"score": 0.00265038878247831, "phrase": "defect_predictor"}, {"score": 0.0026013505538490223, "phrase": "multiclass_data"}, {"score": 0.0025532173213934422, "phrase": "specific_coding_scheme"}, {"score": 0.0025059724686541263, "phrase": "thorough_experiment"}, {"score": 0.002444333100610621, "phrase": "classification_algorithms"}, {"score": 0.0023694065215394593, "phrase": "six_conventional_imbalance_data-handling_methods"}, {"score": 0.0022542611024997474, "phrase": "experimental_results"}, {"score": 0.0021987994275190314, "phrase": "proposed_method"}], "paper_keywords": ["Class-imbalance data", " meta learning", " multiclassifier", " software defect prediction"], "paper_abstract": "Using classification methods to predict software defect proneness with static code attributes has attracted a great deal of attention. The class-imbalance characteristic of software defect data makes the prediction much difficult; thus, a number of methods have been employed to address this problem. However, these conventional methods, such as sampling, cost-sensitive learning, Bagging, and Boosting, could suffer from the loss of important information, unexpected mistakes, and overfitting because they alter the original data distribution. This paper presents a novel method that first converts the imbalanced binary-class data into balanced multiclass data and then builds a defect predictor on the multiclass data with a specific coding scheme. A thorough experiment with four different types of classification algorithms, three data coding schemes, and six conventional imbalance data-handling methods was conducted over the 14 NASA datasets. The experimental results show that the proposed method with a one-against-one coding scheme is averagely superior to the conventional methods.", "paper_title": "Using Coding-Based Ensemble Learning to Improve Software Defect Prediction", "paper_id": "WOS:000312885400057"}