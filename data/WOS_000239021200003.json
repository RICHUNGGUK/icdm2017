{"auto_keywords": [{"score": 0.0390696586676462, "phrase": "mrs"}, {"score": 0.00481495049065317, "phrase": "fine-grained_software_modifications"}, {"score": 0.004577440795549049, "phrase": "small_increments"}, {"score": 0.0043029342321223825, "phrase": "modification_record-mr"}, {"score": 0.004090577229368418, "phrase": "configuration_management"}, {"score": 0.004044822781630218, "phrase": "version_control"}, {"score": 0.0026370661343466354, "phrase": "development_stage"}, {"score": 0.0024786330057813225, "phrase": "new_features"}, {"score": 0.0021049977753042253, "phrase": "source_code"}], "paper_keywords": ["software evolution", " version control", " software visualization", " software artifacts"], "paper_abstract": "Software is typically improved and modified in small increments (we refer to each of these increments as a modification record-MR). MRs are usually stored in a configuration management or version control system and can be retrieved for analysis. In this study we retrieved the MRs from several mature open software projects. We then concentrated our analysis on those MRs that fix defects and provided heuristics to automatically classify them. We used the information in the MRs to visualize what files are changed at the same time, and who are the people who tend to modify certain files. We argue that these visualizations can be used to understand the development stage of in which a project is at a given time (new features are added, or defects are being fixed), the level of modularization of a project, and how developers might interact between each other and the source code of a system.", "paper_title": "An empirical study of fine-grained software modifications", "paper_id": "WOS:000239021200003"}