{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mapreduce_jobs"}, {"score": 0.008397065341208407, "phrase": "performance_benefits"}, {"score": 0.005790652582501265, "phrase": "makespan_improvements"}, {"score": 0.004734718930096544, "phrase": "cloud_computing"}, {"score": 0.004695103516280934, "phrase": "attractive_option"}, {"score": 0.004616859702338596, "phrase": "suitable_size"}, {"score": 0.00436530211426514, "phrase": "key_challenge"}, {"score": 0.004256599284336768, "phrase": "mapreduce_clusters"}, {"score": 0.003968585341590009, "phrase": "production_jobs"}, {"score": 0.0039024014688338964, "phrase": "new_data"}, {"score": 0.003837317088477703, "phrase": "offline_analysis"}, {"score": 0.0037839069098097983, "phrase": "different_optimization_techniques"}, {"score": 0.0036689971286619767, "phrase": "production_workloads"}, {"score": 0.0034398445347109396, "phrase": "significant_impact"}, {"score": 0.0033919477901198716, "phrase": "cluster_resource_utilization"}, {"score": 0.00329813918116714, "phrase": "job_schedule"}, {"score": 0.0031445615154154258, "phrase": "simple_abstraction"}, {"score": 0.0031182092708983184, "phrase": "mapreduce_job"}, {"score": 0.0030319482153908037, "phrase": "stage_durations"}, {"score": 0.002956349387955386, "phrase": "classic_johnson_algorithm"}, {"score": 0.00289885212998798, "phrase": "optimal_two-stage_job_schedule"}, {"score": 0.002834505099882888, "phrase": "constructed_schedule"}, {"score": 0.0028107438825394028, "phrase": "extensive_set"}, {"score": 0.002756070639666095, "phrase": "realistic_workloads"}, {"score": 0.002562123444678208, "phrase": "right_order"}, {"score": 0.0024982099091662375, "phrase": "simplified_abstraction"}, {"score": 0.002477260798809435, "phrase": "johnson's_algorithm"}, {"score": 0.0024427343146442284, "phrase": "suboptimal_job_schedule"}, {"score": 0.0024086878766794695, "phrase": "novel_heuristic"}, {"score": 0.002388487669097511, "phrase": "balancedpools"}, {"score": 0.0023551955270737215, "phrase": "johnson's_schedule_results"}, {"score": 0.002264420105254984, "phrase": "suboptimal_makespan"}, {"score": 0.0021771357714479946, "phrase": "new_balancedpools_algorithm"}], "paper_keywords": ["MapReduce", " Hadoop", " batch workloads", " optimized schedule", " minimized makespan"], "paper_abstract": "Cloud computing offers an attractive option for businesses to rent a suitable size MapReduce cluster, consume resources as a service, and pay only for resources that were consumed. A key challenge in such environments is to increase the utilization of MapReduce clusters to minimize their cost. One way of achieving this goal is to optimize the execution of Mapreduce jobs on the cluster. For a set of production jobs that are executed periodically on new data, we can perform an offline analysis for evaluating performance benefits of different optimization techniques. In this work, we consider a subset of production workloads that consists of MapReduce jobs with no dependencies. We observe that the order in which these jobs are executed can have a significant impact on their overall completion time and the cluster resource utilization. Our goal is to automate the design of a job schedule that minimizes the completion time (makespan) of such a set of MapReduce jobs. We introduce a simple abstraction where each MapReduce job is represented as a pair of map and reduce stage durations. This representation enables us to apply the classic Johnson algorithm that was designed for building an optimal two-stage job schedule. We evaluate the performance benefits of the constructed schedule through an extensive set of simulations over a variety of realistic workloads. The results are workload and cluster-size dependent, but it is typical to achieve up to 10-25 percent of makespan improvements by simply processing the jobs in the right order. However, in some cases, the simplified abstraction assumed by Johnson's algorithm may lead to a suboptimal job schedule. We design a novel heuristic, called BalancedPools, that significantly improves Johnson's schedule results (up to 15-38 percent), exactly in the situations when it produces suboptimal makespan. Overall, we observe up to 50 percent in the makespan improvements with the new BalancedPools algorithm. The results of our simulation study are validated through experiments on a 66-node Hadoop cluster.", "paper_title": "Orchestrating an Ensemble of MapReduce Jobs for Minimizing Their Makespan", "paper_id": "WOS:000324386500006"}