{"auto_keywords": [{"score": 0.041078685670043524, "phrase": "provenance_information"}, {"score": 0.011005914579807386, "phrase": "open_provenance_model"}, {"score": 0.004815411160453601, "phrase": "swift"}, {"score": 0.0047057084749407485, "phrase": "swift_parallel_scripting_language"}, {"score": 0.004359078118356132, "phrase": "large-scale_computations"}, {"score": 0.004227653047394939, "phrase": "distributed_environments"}, {"score": 0.004068907083697369, "phrase": "data_model"}, {"score": 0.0032585499655442404, "phrase": "swift's_provenance_data_model"}, {"score": 0.002731971103291716, "phrase": "specific_scientific_workflow"}, {"score": 0.002530359917257626, "phrase": "provenance_queries"}, {"score": 0.0022382002476510573, "phrase": "swift's_provenance_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Provenance", " Parallel scripting languages", " Scientific workflows"], "paper_abstract": "The Swift parallel scripting language allows for the specification, execution and analysis of large-scale computations in parallel and distributed environments. It incorporates a data model for recording and querying provenance information. In this article we describe these capabilities and evaluate the interoperability with other systems through the use of the Open Provenance Model. We describe Swift's provenance data model and compare it to the Open Provenance Model. We also describe and evaluate activities performed within the Third Provenance Challenge, which consisted of implementing a specific scientific workflow, capturing and recording provenance information of its execution, performing provenance queries, and exchanging provenance information with other systems. Finally, we propose improvements to both the Open Provenance Model and Swift's provenance system. (C) 2011 Published by Elsevier B.V.", "paper_title": "Provenance management in Swift", "paper_id": "WOS:000290180200013"}