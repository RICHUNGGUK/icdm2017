{"auto_keywords": [{"score": 0.04682254053814278, "phrase": "soc"}, {"score": 0.00481495049065317, "phrase": "dynamic_error_handling"}, {"score": 0.0047310525657970615, "phrase": "service_oriented_applications"}, {"score": 0.004074212307838049, "phrase": "unidirectional_one-way_or_bidirectional_request-response_communication_patterns"}, {"score": 0.003633927813203731, "phrase": "error_handling"}, {"score": 0.0033868916699805224, "phrase": "compensation_handlers"}, {"score": 0.002941913249957503, "phrase": "current_error_handling_primitives"}, {"score": 0.0022787359717772976, "phrase": "process_calculus"}, {"score": 0.0021049977753042253, "phrase": "expected_high-level_properties"}], "paper_keywords": [""], "paper_abstract": "Service Oriented Computing (SOC) allows for the composition of services which communicate using unidirectional one-way or bidirectional request-response communication patterns. Most service orchestration languages proposed so far provide also primitives for error handling based on fault, termination, and compensation handlers. Our work is motivated by the difficulties encountered in programming some error handling strategies using current error handling primitives. We propose as a solution an orchestration programming style in which handlers are dynamically installed. We assess our proposal by formalizing our approach as an extension of the process calculus SOCK and by proving that our formalization satisfies some expected high-level properties.", "paper_title": "Dynamic Error Handling in Service Oriented Applications", "paper_id": "WOS:000271473100005"}