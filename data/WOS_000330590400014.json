{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mcs_algorithm"}, {"score": 0.004701556483912018, "phrase": "maximum_clique_problem"}, {"score": 0.003947358102140903, "phrase": "tomita_et_al"}, {"score": 0.0032614317990293695, "phrase": "suggested_improvements"}, {"score": 0.003109390330476147, "phrase": "efficient_heuristic"}, {"score": 0.00267301171407926, "phrase": "dynamic_memory_allocation"}, {"score": 0.0025687008721685454, "phrase": "impressive_results"}, {"score": 0.002429451930463481, "phrase": "benchmark_instance"}], "paper_keywords": ["Maximum clique problem", " Branch-and-bound algorithm", " Heuristic solution", " Graph colouring"], "paper_abstract": "In this paper we present improvements to one of the most recent and fastest branch-and-bound algorithm for the maximum clique problem-MCS algorithm by Tomita et al. (Proceedings of the 4th international conference on Algorithms and Computation, WALCOM'10, pp. 191-203, 2010). The suggested improvements include: incorporating of an efficient heuristic returning a high-quality initial solution, fast detection of clique vertices in a set of candidates, better initial colouring, and avoiding dynamic memory allocation. Our computational study shows some impressive results, mainly we have solved p_hat1000-3 benchmark instance which is intractable for MCS algorithm and got speedups of 7, 3000, and 13000 times for gen400_p0.9_55, gen400_p0.9_65, and gen400_p0.9_75 instances correspondingly.", "paper_title": "Improvements to MCS algorithm for the maximum clique problem", "paper_id": "WOS:000330590400014"}