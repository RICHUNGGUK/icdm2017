{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "embedded_domain-specific_languages"}, {"score": 0.04855239486253465, "phrase": "model-driven_engineering"}, {"score": 0.004464326432401002, "phrase": "domain-specific_languages"}, {"score": 0.004298666679374568, "phrase": "fundamental_part"}, {"score": 0.004252469672259375, "phrase": "language_engineering"}, {"score": 0.0041840994704406866, "phrase": "development_cost"}, {"score": 0.003879234831701853, "phrase": "general-purpose_programming_language"}, {"score": 0.003796267885124202, "phrase": "implementation_effort"}, {"score": 0.0037352048741373816, "phrase": "reuse_techniques"}, {"score": 0.003695040819303525, "phrase": "key_aspects"}, {"score": 0.0036553070575015344, "phrase": "dsl_approaches"}, {"score": 0.0028348690177346448, "phrase": "dsl_developer"}, {"score": 0.0028043588777213533, "phrase": "user_point"}, {"score": 0.0025167026017217926, "phrase": "composition_mechanisms"}, {"score": 0.0024761702541879213, "phrase": "abstract_syntax"}, {"score": 0.0024495111090152857, "phrase": "concrete_syntax"}, {"score": 0.002410058288617039, "phrase": "model_transformation_levels"}, {"score": 0.0023712394008737958, "phrase": "dsl's_definition"}, {"score": 0.0022830706430588482, "phrase": "software_framework"}, {"score": 0.0021394674440767124, "phrase": "case_study"}], "paper_keywords": ["Domain-specific languages", " model-driven development", " families of DSLs", " DSL composition"], "paper_abstract": "With the emergence of model-driven engineering (MDE), the creation of domain-specific languages (DSLs) is becoming a fundamental part of language engineering. The development cost of a DSL should be modest compared to the cost of developing a general-purpose programming language. Reducing the implementation effort and providing reuse techniques are key aspects for DSL approaches to be really effective. In this paper, we present an approach to build embedded domain-specific languages applying the principles of model-driven engineering. On the basis of this approach, we will tackle reuse of DSLs by defining families of DSLs, addressing reuse both from the DSL developer and user point of views. A family of DSLs will be built up by composing several DSLs, so we will propose composition mechanisms for the abstract syntax, concrete syntax, and model transformation levels of a DSL's definition. Finally, we contribute a software framework to support our approach, and we illustrate the paper with a case study to demonstrate its practical applicability.", "paper_title": "A Model-Based Approach to Families of Embedded Domain-Specific Languages", "paper_id": "WOS:000272172800006"}