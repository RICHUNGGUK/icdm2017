{"auto_keywords": [{"score": 0.04923786745654407, "phrase": "self-adaptive_software"}, {"score": 0.011256822185634143, "phrase": "action_selection_mechanism"}, {"score": 0.00991520849265766, "phrase": "typical_rule-based_approach"}, {"score": 0.00481495049065317, "phrase": "goal-driven_approach"}, {"score": 0.004647206916983993, "phrase": "closed-loop_system"}, {"score": 0.004163290958633733, "phrase": "adaptation_goals"}, {"score": 0.004018158280364063, "phrase": "decision_making"}, {"score": 0.003947492797744999, "phrase": "goal-driven_models"}, {"score": 0.0038918527536981897, "phrase": "requirements_engineering"}, {"score": 0.0037561467438280175, "phrase": "run-time_adaptation"}, {"score": 0.0036900720643677034, "phrase": "research_gap"}, {"score": 0.0035995085881892464, "phrase": "deciding_process"}, {"score": 0.003511159930253876, "phrase": "goal-action-attribute_model"}, {"score": 0.0033886832371468954, "phrase": "cooperative_decision_making"}, {"score": 0.0033054920459613018, "phrase": "gaam"}, {"score": 0.003258871417680268, "phrase": "appropriate_adaptation"}, {"score": 0.0031451673059794205, "phrase": "light-weight_and_scalable_run-time_model"}, {"score": 0.00286770704394124, "phrase": "simulated_multi-tier_enterprise_application"}, {"score": 0.0026805109390121706, "phrase": "systematic_design"}, {"score": 0.0026333078412549807, "phrase": "detailed_statistical_analysis"}, {"score": 0.0025055037815033725, "phrase": "obtained_results"}, {"score": 0.002426630714074822, "phrase": "engineering_self-adaptive_software"}, {"score": 0.0023006418600072325, "phrase": "proposed_mechanism"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["self-adaptive software", " goal-driven model", " run-time action selection"], "paper_abstract": "Self-adaptive software is a closed-loop system, since it continuously monitors its context (i.e. environment) and/or self (i.e. software entities) in order to adapt itself properly to changes. We believe that representing adaptation goals explicitly and tracing them at run-time are helpful in decision making for adaptation. While goal-driven models are used in requirements engineering, they have not been utilized systematically yet for run-time adaptation. To address this research gap, this article focuses on the deciding process in self-adaptive software, and proposes the Goal-Action-Attribute Model (GAAM). An action selection mechanism, based on cooperative decision making, is also proposed that uses GAAM to select the appropriate adaptation action(s). The emphasis is on building a light-weight and scalable run-time model which needs less design and tuning effort comparing with a typical rule-based approach. The GAAM and action selection mechanism are evaluated using a set of experiments on a simulated multi-tier enterprise application, and two sample ordinal and cardinal action preference lists. The evaluation is accomplished based on a systematic design of experiment and a detailed statistical analysis in order to investigate several research questions. The findings are promising, considering the obtained results, and other impacts of the approach on engineering self-adaptive software. Although, one case study is not enough to generalize the findings, and the proposed mechanism does not always outperform a typical rule-based approach, less effort, scalability, and flexibility of GAAM are remarkable. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Towards a goal-driven approach to action selection in self-adaptive software", "paper_id": "WOS:000299417200004"}