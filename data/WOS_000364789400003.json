{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_fault_management"}, {"score": 0.0047057084749407485, "phrase": "runtime_verification"}, {"score": 0.004443276312972159, "phrase": "software_fault_tolerance"}, {"score": 0.004147523799581407, "phrase": "runtime_verification_techniques"}, {"score": 0.0038713805573219297, "phrase": "runtime_model"}, {"score": 0.0037834649508375544, "phrase": "running_program"}, {"score": 0.003296212583539166, "phrase": "runtime_software_fault_management"}, {"score": 0.002711109302199029, "phrase": "runtime_fault_management_system_prototype"}, {"score": 0.002530359917257626, "phrase": "rule_description"}, {"score": 0.002472822097373027, "phrase": "event_acquisition"}], "paper_keywords": ["software fault tolerance", " runtime verification", " runtime model"], "paper_abstract": "To achieve the software fault tolerance at runtime, based on runtime verification techniques, this paper proposes a runtime model of running program, which is used to define the actions and constrains for runtime software fault management. This model contains the descriptions of event, path, scope and adjustment. A runtime fault management system prototype, which mainly includes the rule description, event acquisition, fault diagnosis and handling, is implemented to verify the model. Two test cases are used to estimate the effect of the prototype, and the results show that this method can handle faults successfully at runtime.", "paper_title": "Modelling software fault management with runtime verification", "paper_id": "WOS:000364789400003"}