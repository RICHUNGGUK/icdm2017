{"auto_keywords": [{"score": 0.04548812433856783, "phrase": "soft_errors"}, {"score": 0.005138815535649033, "phrase": "obvious_partitioning"}, {"score": 0.0050535016009867, "phrase": "multimedia_data"}, {"score": 0.00481495049065317, "phrase": "partially_protected_caches"}, {"score": 0.0047881480263782675, "phrase": "resource-constrained_embedded_systems"}, {"score": 0.004721789694995182, "phrase": "technology_scaling"}, {"score": 0.004682414867878963, "phrase": "soft_error_rate"}, {"score": 0.004643366854108453, "phrase": "earth-bound_embedded_systems"}, {"score": 0.0046046429665581555, "phrase": "deep_subnanometer_technology"}, {"score": 0.004528156929805637, "phrase": "serious_design_consideration"}, {"score": 0.004502943680955863, "phrase": "partially_protected_cache"}, {"score": 0.004428139418750855, "phrase": "promising_microarchitectural_feature"}, {"score": 0.004258372598568333, "phrase": "sensitive_embedded_processors"}, {"score": 0.004199327998100358, "phrase": "ppc"}, {"score": 0.0040157986370637465, "phrase": "memory_hierarchy"}, {"score": 0.003696332117949541, "phrase": "page_partitions"}, {"score": 0.0036723696468167126, "phrase": "protected_cache"}, {"score": 0.003641713874009232, "phrase": "error-resilient_data"}, {"score": 0.0036247357831386165, "phrase": "failure_rate"}, {"score": 0.003611313078276589, "phrase": "unprotected_cache"}, {"score": 0.003501991125315889, "phrase": "aminimal_power"}, {"score": 0.0034824716857663114, "phrase": "performance_penalty"}, {"score": 0.003367611042980526, "phrase": "compiler's_ability"}, {"score": 0.003348838095597268, "phrase": "partition_application_data"}, {"score": 0.0033301694494391643, "phrase": "error-prone_and_error-resilient_data"}, {"score": 0.003229330714669772, "phrase": "multimedia_applications"}, {"score": 0.003011328068286321, "phrase": "entire_code"}, {"score": 0.002887634989058733, "phrase": "quite_significant_component"}, {"score": 0.0028635111041882956, "phrase": "entire_application_data"}, {"score": 0.0027153251683182784, "phrase": "general_applications"}, {"score": 0.0026404301857006576, "phrase": "data_caches"}, {"score": 0.002625700271311702, "phrase": "instruction_caches"}, {"score": 0.002574788013427524, "phrase": "vulnerability-based_partitioning_schemes"}, {"score": 0.0024620842899061614, "phrase": "minimal_power_and_performance_overheads"}, {"score": 0.0024143368618449114, "phrase": "hp_ipaq-like_processor"}, {"score": 0.0023477242928918, "phrase": "mibench_suite"}, {"score": 0.002282945386810049, "phrase": "data_ppcs"}, {"score": 0.002164738347530832, "phrase": "instruction_ppcs"}], "paper_keywords": ["Design", " Experimentation", " Performance", " Reliability", " Page partitioning technique", " partially protected cache", " soft error", " vulnerability", " embedded systems"], "paper_abstract": "Increasing exponentially with technology scaling, the soft error rate even in earth-bound embedded systems manufactured in deep subnanometer technology is projected to become a serious design consideration. Partially protected cache (PPC) is a promising microarchitectural feature to mitigate failures due to soft errors in power, performance, and cost sensitive embedded processors. A processor with PPC maintains two caches, one protected and the other unprotected, both at the same level of memory hierarchy. The intuition behind PPCs is that not all data in the application is equally prone to soft errors. By finding and mapping the data that is more prone to soft errors to the protected cache, and error-resilient data to the unprotected cache, failures induced by soft errors can be significantly reduced at aminimal power and performance penalty. Consequently, the effectiveness of PPCs critically hinges on the compiler's ability to partition application data into error-prone and error-resilient data. The effectiveness of PPCs has previously been demonstrated on multimedia applications-where an obvious partitioning of data exists, the multimedia data is inherently resilient to soft errors, and the rest of the data and the entire code is assumed to beerror-prone. Since the amount of multimedia data is a quite significant component of the entire application data, this obvious partitioning is quite effective. However, no such obvious data and code partitioning exists for general applications. This severely restricts the applicability of PPCs to data caches and instruction caches in general. This article investigates vulnerability-based partitioning schemes that are applicable to applications in general and effectively reduce failures due to soft errors at minimal power and performance overheads. Our experimental results on an HP iPAQ-like processor enhanced with PPC architecture, running benchmarks from the MiBench suite demonstrate that our partitioning heuristic efficiently finds page partitions for data PPCs that can reduce the failure rate by 48% at only 2% performance and 7% energy overhead, and finds page partitions for instruction PPCs that reduce the failure rate by 50% at only 2% performance and 8% energy overhead, on average.", "paper_title": "Partitioning Techniques for Partially Protected Caches in Resource-Constrained Embedded Systems", "paper_id": "WOS:000282762400003"}