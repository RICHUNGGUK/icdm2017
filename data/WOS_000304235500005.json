{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_similarity_search"}, {"score": 0.004688321299229397, "phrase": "similarity_based_searches"}, {"score": 0.004236639288852276, "phrase": "proposed_techniques"}, {"score": 0.004147216579100177, "phrase": "fast_insertion"}, {"score": 0.004103212598803194, "phrase": "new_elements"}, {"score": 0.003931798194574009, "phrase": "main_effect"}, {"score": 0.0034777028461723198, "phrase": "new_technique"}, {"score": 0.003422462630994095, "phrase": "fast_insertions"}, {"score": 0.0032969458013463807, "phrase": "static_tree-based_indexes"}, {"score": 0.0031760175583084274, "phrase": "resulting_index"}, {"score": 0.0028391271282216758, "phrase": "performance_degradation"}, {"score": 0.0028089634624677957, "phrase": "search_time"}, {"score": 0.002720376476146181, "phrase": "expected_number"}, {"score": 0.0026914710445743693, "phrase": "distance_computations"}, {"score": 0.0026345758986796703, "phrase": "average_time_complexity"}, {"score": 0.0022087165619569006, "phrase": "artificial_and_real_data"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Similarity search", " Metric space", " Dynamic index", " Insertions"], "paper_abstract": "To speed up similarity based searches many indexing techniques have been proposed in order to address the problem of efficiency. However, most of the proposed techniques do not admit fast insertion of new elements once the index is built. The main effect is that changes in the environment are very costly to be taken into account. In this work, we propose a new technique to allow fast insertions of elements in a family of static tree-based indexes. Unlike other techniques, the resulting index is exactly equal to the index that would be obtained by building it from scratch. Therefore there is no performance degradation in search time. We show that the expected number of distance computations (and the average time complexity) is bounded by a function that grows with log(2)(n)) where n is the size of the database. In order to check the correctness of our approach some experiments with artificial and real data are carried out. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A log square average case algorithm to make insertions in fast similarity search", "paper_id": "WOS:000304235500005"}