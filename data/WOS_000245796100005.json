{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dense_storage"}, {"score": 0.004632039024076267, "phrase": "small_sparse_linear_systems"}, {"score": 0.004456044928556639, "phrase": "data_structure"}, {"score": 0.004123781267600542, "phrase": "linear_solver"}, {"score": 0.003967021436047945, "phrase": "relatively_small_sparse_systems"}, {"score": 0.003577414339646767, "phrase": "run-time_performance"}, {"score": 0.003353521531649663, "phrase": "memory_footprint"}, {"score": 0.0031435968684569112, "phrase": "direct_and_sparse_solvers"}, {"score": 0.0023958326775913165, "phrase": "medium_fill-in"}], "paper_keywords": ["algorithms", " experimentation", " performance", " sparse unsymmetric matrices", " linear equations"], "paper_abstract": "A data structure is used to build a linear solver specialized for relatively small sparse systems. The proposed solver, optimized for run-time performance at the expense of memory footprint, outperforms widely used direct and sparse solvers for systems with between 100 and 3000 equations. A multithreaded version of the solver is shown to give some speedups for problems with medium fill-in, while it does not give any benefit for very sparse problems.", "paper_title": "Using dense storage to solve small sparse linear systems", "paper_id": "WOS:000245796100005"}