{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "fgcj"}, {"score": 0.04905833888034288, "phrase": "minimal_core_calculus"}, {"score": 0.046433377080865944, "phrase": "lambda_expressions"}, {"score": 0.04579831249542828, "phrase": "java_simple_closures"}, {"score": 0.028540159828601436, "phrase": "anonymous_class_objects"}, {"score": 0.026234119952923768, "phrase": "translation_semantics"}, {"score": 0.0046118021635786315, "phrase": "featherweight_generic_java"}, {"score": 0.004546000131069232, "phrase": "fgj"}, {"score": 0.004052148727852149, "phrase": "reduction_semantics_framework"}, {"score": 0.003853251284913932, "phrase": "type_safety"}, {"score": 0.003798231095121328, "phrase": "abstraction_property"}, {"score": 0.003611951089424257, "phrase": "java"}, {"score": 0.003385336776758738, "phrase": "ordinary_java"}, {"score": 0.003105305189036267, "phrase": "translation_semantics_framework"}, {"score": 0.0029740732099993706, "phrase": "implementation_features"}, {"score": 0.0028689475587958917, "phrase": "simple_closures"}, {"score": 0.0025202582748972122, "phrase": "reduction_semantics"}, {"score": 0.0024136908511423875, "phrase": "fgacj."}, {"score": 0.0023791769068748194, "phrase": "fgacj"}, {"score": 0.0022138542785562444, "phrase": "java_interfaces"}, {"score": 0.0021049977753042253, "phrase": "restricted_definition"}], "paper_keywords": [""], "paper_abstract": "FGCJ is a minimal core calculus that extends Featherweight Generic Java, FGJ, with lambda expressions for Java Simple Closures. It has been introduced to study, in a reduction semantics framework, properties of Java Simple Closures, including type safety and abstraction property. F is a source-to-source, translation rule system from Java 1.5 extended with lambda expressions, back to ordinary Java 1.5. It has been introduced to study, in a translation semantics framework, the design and the implementation features of lambda expressions, including simple closures, this transparency, not local variables and relations with anonymous class objects. In this paper we prove that the reduction semantics and the translation semantics commute in FGACJ. Where FGACJ is a minimal core calculus that extends FGCJ, by adding Java interfaces and anonymous class objects and that allows a restricted definition of translation semantics F.", "paper_title": "The Equivalence of Reduction and Translation Semantics of Java Simple Closures", "paper_id": "WOS:000311528000003"}