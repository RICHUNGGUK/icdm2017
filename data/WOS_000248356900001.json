{"auto_keywords": [{"score": 0.031539476490019626, "phrase": "conflict_misses"}, {"score": 0.00481495049065317, "phrase": "simultaneous_minimization"}, {"score": 0.004487458217390551, "phrase": "loop"}, {"score": 0.004089725258435817, "phrase": "well-known_loop_transformation"}, {"score": 0.0038467574225322086, "phrase": "nested_loops"}, {"score": 0.0037307208089736835, "phrase": "matrix_computations"}, {"score": 0.0034733518170738517, "phrase": "low_associativities"}, {"score": 0.0033004240095380623, "phrase": "key_challenges"}, {"score": 0.0030414140732789186, "phrase": "capacity_misses"}, {"score": 0.002718045523483502, "phrase": "tile_size"}, {"score": 0.0026359661683151006, "phrase": "array-dimension_size"}, {"score": 0.002284444272376043, "phrase": "tile-size_selection"}, {"score": 0.0021049977753042253, "phrase": "array_padding"}], "paper_keywords": ["caches", " optimizing compilers", " loop transformation", " array padding"], "paper_abstract": "Loop tiling (or loop blocking) is a well-known loop transformation to improve temporal locality in nested loops which perform matrix computations. When targeting caches that have low associativities, one of the key challenges for loop tiling is to simultaneously minimize capacity misses and conflict misses. This paper analyzes the effect of the tile size and the array-dimension size on capacity misses and conflict misses. The analysis supports the approach of combining tile-size selection (to minimize capacity misses) with array padding (to minimize conflict misses).", "paper_title": "Simultaneous minimization of capacity and conflict misses", "paper_id": "WOS:000248356900001"}