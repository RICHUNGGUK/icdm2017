{"auto_keywords": [{"score": 0.042290086911772, "phrase": "type_safety"}, {"score": 0.04140253863234901, "phrase": "object_encapsulation"}, {"score": 0.03605434207696697, "phrase": "tps"}, {"score": 0.03182874753775729, "phrase": "java"}, {"score": 0.024495123368290867, "phrase": "distributed_programming"}, {"score": 0.00481495049065317, "phrase": "continuously_increasing_number"}, {"score": 0.0047797212183363835, "phrase": "interconnected_computer_devices"}, {"score": 0.004692766317526887, "phrase": "programming_abstractions"}, {"score": 0.004392565073466714, "phrase": "candidate_abstraction"}, {"score": 0.0042497136254424995, "phrase": "large_scale"}, {"score": 0.004218602458288531, "phrase": "common_practices"}, {"score": 0.004096409451697279, "phrase": "low-level_abstractions"}, {"score": 0.0038624981944755813, "phrase": "additional_burden"}, {"score": 0.0038342108263454628, "phrase": "software_developers"}, {"score": 0.0037505809981715024, "phrase": "aforementioned_type_safety"}, {"score": 0.0036822794196763506, "phrase": "increasing_importance"}, {"score": 0.0036418947847496365, "phrase": "accrued_number"}, {"score": 0.003615217162972726, "phrase": "software_components"}, {"score": 0.0035755653799043, "phrase": "modern_applications"}, {"score": 0.0034975571855450373, "phrase": "increasing_number"}, {"score": 0.003471933181807712, "phrase": "hardware_components"}, {"score": 0.0033712944392793195, "phrase": "high-level_variant"}, {"score": 0.002931569771634119, "phrase": "specific_extension"}, {"score": 0.0028993944292191433, "phrase": "java_language"}, {"score": 0.0027946649584841754, "phrase": "recent_general-purpose_features"}, {"score": 0.002713604305939145, "phrase": "behavioral_reflection"}, {"score": 0.0026155681847364483, "phrase": "aforementioned_features"}, {"score": 0.0025678829712650437, "phrase": "additional_features"}, {"score": 0.00244792069601419, "phrase": "distributed_and_concurrent_programming"}, {"score": 0.00238565827614317, "phrase": "alternative_programming_languages"}, {"score": 0.0023421554740581615, "phrase": "tps."}, {"score": 0.0023164335087514252, "phrase": "alternative_abstractions"}, {"score": 0.0022741894748181243, "phrase": "\"classic\"_and_recent_ones"}, {"score": 0.002216336059488137, "phrase": "programming_language_support"}, {"score": 0.0021049977753042253, "phrase": "current_mainstream_programming_languages"}], "paper_keywords": ["languages", " design", " abstraction", " generics", " Java", " publish/subscribe", " reflection", " type", " distribution"], "paper_abstract": "A continuously increasing number of interconnected computer devices makes the requirement for programming abstractions for remote one-to-many interaction yet more stringent. The publish/ subscribe paradigm has been advocated as a candidate abstraction for such one-to-many interaction at large scale. Common practices in publish/ subscribe, however, include low-level abstractions which hardly leverage type safety, and provide only poor support for object encapsulation. This tends to put additional burden on software developers; guarantees such as the aforementioned type safety and object encapsulation become of increasing importance with an accrued number of software components, which modern applications also involve, besides an increasing number of hardware components. Type-based publish/subscribe (TPS) is a high-level variant of the publish/subscribe paradigm which aims precisely at providing guarantees such as type safety and encapsulation. We present the rationale and principles underlying TPS, as well as two implementations in Java: the first based on a specific extension of the Java language, and a second novel implementation making use of recent general-purpose features of Java, such as generics and behavioral reflection. We compare the two approaches, thereby evaluating the aforementioned features-as well as additional features which have been included in the most recent Java 1.5 release-in the context of distributed and concurrent programming. We discuss the benefits of alternative programming languages and features for implementing TPS. By revisiting alternative abstractions for distributed programming, including \"classic\" and recent ones, we extend our investigations to programming language support for distributed programming in general, pointing out that overall, the support in current mainstream programming languages is still insufficient.", "paper_title": "Type-based publish/subscribe: Concepts and experiences", "paper_id": "WOS:000243927300006"}