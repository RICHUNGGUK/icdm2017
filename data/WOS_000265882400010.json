{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pipelined_filter_ordering"}, {"score": 0.00475413908468027, "phrase": "central_problem"}, {"score": 0.004714023408114857, "phrase": "database_query_optimization"}, {"score": 0.004556901872357751, "phrase": "optimal_order"}, {"score": 0.004404994123834589, "phrase": "commutative_filters"}, {"score": 0.0036864465771943933, "phrase": "renewed_attention"}, {"score": 0.0035183910023550246, "phrase": "continuous_high-speed_data_streams"}, {"score": 0.0034299649219748513, "phrase": "pipelined_filter_ordering_problems"}, {"score": 0.003315499339103866, "phrase": "fault_detection"}, {"score": 0.0031777570808834213, "phrase": "attribute_costs"}, {"score": 0.0029565620771207003, "phrase": "classical_pipelined_filter"}, {"score": 0.0024736973328071026, "phrase": "expected_value"}, {"score": 0.0024527767211457046, "phrase": "multiplicative_regret"}, {"score": 0.002159339925217916, "phrase": "kodialam"}], "paper_keywords": ["Pipelined filter ordering", " selection ordering", " query optimization", " flow algorithms"], "paper_abstract": "Pipelined filter ordering is a central problem in database query optimization. The problem is to determine the optimal order in which to apply a given set of commutative filters (predicates) to a set of elements (the tuples of a relation), so as to find, as efficiently as possible, the tuples that satisfy all of the filters. Optimization of pipelined filter ordering has recently received renewed attention in the context of environments such as the Web, continuous high-speed data streams, and sensor networks. Pipelined filter ordering problems are also studied in areas such as fault detection and machine learning under names such as learning with attribute costs, minimum-sum set cover, and satisficing search. We present algorithms for two natural extensions of the classical pipelined filter ordering problem: (1) a distributional-type problem where the filters run in parallel and the goal is to maximize throughput, and (2) an adversarial-type problem where the goal is to minimize the expected value of multiplicative regret. We present two related algorithms for solving (1), both running in time O(n(2)), which improve on the O(n(3) log n) algorithm of Kodialam. We use techniques from our algorithms for (1) to obtain an algorithm for (2).", "paper_title": "Algorithms for Distributional and Adversarial Pipelined Filter Ordering Problems", "paper_id": "WOS:000265882400010"}