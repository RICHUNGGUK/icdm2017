{"auto_keywords": [{"score": 0.041562269310917936, "phrase": "system_performance"}, {"score": 0.03517083259120442, "phrase": "multithreaded_network_applications"}, {"score": 0.00481495049065317, "phrase": "thread_assignment_of_multithreaded_network_applications"}, {"score": 0.004636340567075841, "phrase": "multithreaded_processors"}, {"score": 0.004537254814246843, "phrase": "large_number"}, {"score": 0.00427550604912774, "phrase": "particular_optimal_assignment"}, {"score": 0.004229556887896042, "phrase": "running_threads"}, {"score": 0.0041840994704406866, "phrase": "processor_hardware_contexts"}, {"score": 0.00385832528624328, "phrase": "optimal_thread_assignments"}, {"score": 0.0036965463897627574, "phrase": "np"}, {"score": 0.0034817084307034955, "phrase": "blackbox_scheduler"}, {"score": 0.003370565320453525, "phrase": "thread_assignment"}, {"score": 0.003193129886123359, "phrase": "minimum_information"}, {"score": 0.0031417377608722, "phrase": "target_processor_architecture"}, {"score": 0.0030414140732789186, "phrase": "hardware_requirements"}, {"score": 0.0029126002350975634, "phrase": "proposed_method"}, {"score": 0.0028348690177346448, "phrase": "industrial_case_study"}, {"score": 0.0025717770066591076, "phrase": "proposed_thread_assignment_method"}, {"score": 0.002530359917257626, "phrase": "best_actual_thread_assignment"}, {"score": 0.0024896081630179194, "phrase": "evaluation_sample"}, {"score": 0.0023079225317714815, "phrase": "load_balancing_algorithms"}, {"score": 0.0021049977753042253, "phrase": "naive_thread_assignment"}], "paper_keywords": ["Chip multithreading (CMT)", " process scheduling", " performance modeling"], "paper_abstract": "The introduction of multithreaded processors comprised of a large number of cores with many shared resources makes thread scheduling, and in particular optimal assignment of running threads to processor hardware contexts to become one of the most promising ways to improve the system performance. However, finding optimal thread assignments for workloads running in state-of-the-art multicore/multithreaded processors is an NP-complete problem. In this paper, we propose BlackBox scheduler, a systematic method for thread assignment of multithreaded network applications running on multicore/multithreaded processors. The method requires minimum information about the target processor architecture and no data about the hardware requirements of the applications under study. The proposed method is evaluated with an industrial case study for a set of multithreaded network applications running on the UltraSPARC T2 processor. In most of the experiments, the proposed thread assignment method detected the best actual thread assignment in the evaluation sample. The method improved the system performance from 5 to 48 percent with respect to load balancing algorithms used in state-of-the-art OSs, and up to 60 percent with respect to a naive thread assignment.", "paper_title": "Thread Assignment of Multithreaded Network Applications in Multicore/Multithreaded Processors", "paper_id": "WOS:000326501400020"}