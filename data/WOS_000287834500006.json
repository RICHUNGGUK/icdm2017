{"auto_keywords": [{"score": 0.03451632685516017, "phrase": "type_system"}, {"score": 0.015719716506582538, "phrase": "type_systems"}, {"score": 0.01181618748455829, "phrase": "domain-specific_abstractions"}, {"score": 0.004635881163634672, "phrase": "type-safe_xml_processing"}, {"score": 0.0041374874583908535, "phrase": "programming_language"}, {"score": 0.0038352452380298464, "phrase": "run-time_invariants"}, {"score": 0.003501452436803395, "phrase": "additional_static_checking"}, {"score": 0.003371066990851953, "phrase": "library_techniques"}, {"score": 0.0030775481952376987, "phrase": "main_contribution"}, {"score": 0.0030082398041055003, "phrase": "programmable_\"subtype\"_relation"}, {"score": 0.0026843584448921565, "phrase": "type_qualifiers"}, {"score": 0.0024691719264774165, "phrase": "xml_processing_language"}, {"score": 0.0022200068884960836, "phrase": "valid_xml_documents"}], "paper_keywords": ["Type systems", " XML", " Type qualifiers", " C plus", " Template metaprogramming", " Active libraries"], "paper_abstract": "Type systems built directly into the compiler or interpreter of a programming language cannot be easily extended to keep track of run-time invariants of new abstractions. Yet, programming with domain-specific abstractions could benefit from additional static checking. This paper presents library techniques for extending the type system of C++ to support domain-specific abstractions. The main contribution is a programmable \"subtype\" relation. As a demonstration of the techniques, we implement a type system for defining type qualifiers in C++, as well as a type system for the XML processing language, capable of, e.g., statically guaranteeing that a program only produces valid XML documents according to a given XML schema. (c) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Extending type systems in a library: Type-safe XML processing in C plus", "paper_id": "WOS:000287834500006"}