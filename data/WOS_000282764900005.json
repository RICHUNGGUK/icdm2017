{"auto_keywords": [{"score": 0.04057795977356098, "phrase": "ac_algorithm"}, {"score": 0.030759686576611857, "phrase": "look-up_tables"}, {"score": 0.02722004569645178, "phrase": "control_logic"}, {"score": 0.00481495049065317, "phrase": "memory-efficient_pipelined_implementation"}, {"score": 0.0047587234712024775, "phrase": "aho-corasick_string-matching_algorithm"}, {"score": 0.004648222388468414, "phrase": "internet_technology"}, {"score": 0.004558091785667046, "phrase": "emerging_applications"}, {"score": 0.00452252857066346, "phrase": "data_communications"}, {"score": 0.004487241576747549, "phrase": "network_security_require_matching"}, {"score": 0.004365881789903319, "phrase": "large_signature_sets"}, {"score": 0.004264463695140275, "phrase": "real_time"}, {"score": 0.0041167185402778425, "phrase": "memory-efficient_hardware_implementation"}, {"score": 0.0039122637074546895, "phrase": "attractive_feature"}, {"score": 0.003761900996118551, "phrase": "string-matching_problem"}, {"score": 0.0036172962914449826, "phrase": "input_stream"}, {"score": 0.003561017335579207, "phrase": "computation_time"}, {"score": 0.0033708244679086265, "phrase": "major_disadvantage"}, {"score": 0.0032924448113309797, "phrase": "high_memory_cost"}, {"score": 0.003228517923065361, "phrase": "transition_rules"}, {"score": 0.0031907572162427978, "phrase": "underlying_deterministic_finite_automaton"}, {"score": 0.003141093559655865, "phrase": "pipelined_processing"}, {"score": 0.00310435218261112, "phrase": "state_graph"}, {"score": 0.0030440661915657175, "phrase": "character_trie"}, {"score": 0.002926973459215349, "phrase": "intelligent_implementation"}, {"score": 0.0028701222153940283, "phrase": "memory_cost"}, {"score": 0.0027705505273051007, "phrase": "signature_set"}, {"score": 0.0027167300506093944, "phrase": "snort"}, {"score": 0.00268493828558848, "phrase": "control_structure"}, {"score": 0.002472552537325606, "phrase": "dual-port_memories"}, {"score": 0.002453297740188806, "phrase": "fpga"}, {"score": 0.00238674051726235, "phrase": "system_throughput"}, {"score": 0.0021049977753042253, "phrase": "fpga_circuitry"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Security", " String-matching", " deterministic and nondeterministic finite automaton", " pipelined processing", " intrusion detection system"], "paper_abstract": "With rapid advancement in Internet technology and usages, some emerging applications in data communications and network security require matching of huge volume of data against large signature sets with thousands of strings in real time. In this article, we present a memory-efficient hardware implementation of the well-known Aho-Corasick (AC) string-matching algorithm using a pipelining approach called P-AC. An attractive feature of the AC algorithm is that it can solve the string-matching problem in time linearly proportional to the length of the input stream, and the computation time is independent of the number of strings in the signature set. A major disadvantage of the AC algorithm is the high memory cost required to store the transition rules of the underlying deterministic finite automaton. By incorporating pipelined processing, the state graph is reduced to a character trie that only contains forward edges. Together with an intelligent implementation of look-up tables, the memory cost of P-AC is only about 18 bits per character for a signature set containing 6,166 strings extracted from Snort. The control structure of P-AC is simple and elegant. The cost of the control logic is very low. With the availability of dual-port memories in FPGA devices, we can double the system throughput by duplicating the control logic such that the system can process two data streams concurrently. Since our method is memory-based, incremental changes to the signature set can be accommodated by updating the look-up tables without reconfiguring the FPGA circuitry.", "paper_title": "A Memory-Efficient Pipelined Implementation of the Aho-Corasick String-Matching Algorithm", "paper_id": "WOS:000282764900005"}