{"auto_keywords": [{"score": 0.03860123629093743, "phrase": "user_preferences"}, {"score": 0.033853798163865266, "phrase": "new_query"}, {"score": 0.015584374765208468, "phrase": "partially_ordered_domains"}, {"score": 0.010875214938373807, "phrase": "query_processor"}, {"score": 0.00481495049065317, "phrase": "skyline_query_processing"}, {"score": 0.004731492618963217, "phrase": "existing_methods"}, {"score": 0.004568871736067739, "phrase": "individual_skyline_query"}, {"score": 0.00450933377534525, "phrase": "data_sets"}, {"score": 0.004223032986655664, "phrase": "on-line_applications"}, {"score": 0.004186253035932442, "phrase": "low_response_time"}, {"score": 0.004024651422626329, "phrase": "cache-based_framework"}, {"score": 0.003972247274425741, "phrase": "css"}, {"score": 0.0038692638652494697, "phrase": "query_processing_time"}, {"score": 0.003818807671883534, "phrase": "high-responsive_applications"}, {"score": 0.0035761913760242697, "phrase": "current_query"}, {"score": 0.003545024951402821, "phrase": "useful_candidate_result_points"}, {"score": 0.003468287913322255, "phrase": "answered_queries"}, {"score": 0.0031498398446368025, "phrase": "result_sets"}, {"score": 0.0031223774204093713, "phrase": "selected_queries"}, {"score": 0.0030951536886513567, "phrase": "compatible_user_preferences"}, {"score": 0.0030281251520610604, "phrase": "similarity_measure"}, {"score": 0.002835599469639296, "phrase": "cached_query"}, {"score": 0.002497319603143104, "phrase": "partial_result_sets"}, {"score": 0.0023384629381463054, "phrase": "cached_queries"}, {"score": 0.0022382002476510573, "phrase": "relevant_cached_queries"}, {"score": 0.002218668420806254, "phrase": "similarity_measures"}, {"score": 0.0021993066642488237, "phrase": "extensive_experiments"}], "paper_keywords": ["Query processing", " multi-dimensional databases", " indexing methods", " data management"], "paper_abstract": "Existing methods have addressed the issue of handling each individual skyline query performed on data sets with partially ordered domains. However, it is still very challenging to process such queries for on-line applications with low response time. In this paper, we introduce a cache-based framework, called CSS, for further reducing the query processing time to support high-responsive applications. Skyline queries that were previously processed with user preferences similar to those of the current query contribute useful candidate result points. Hence, the answered queries are cached with both their results and user preferences such that the query processor can rapidly retrieve the result for a new query only from the result sets of selected queries with compatible user preferences. We introduce a similarity measure that establishes the level of similarity between the user preferences of a new query and a cached query; hence the system can start with the most similar candidates. Furthermore, if a new query is only partially answerable from the cache, then the query processor utilizes the partial result sets and performs less expensive constraint skyline queries guided by violated preferences. Furthermore, we introduce two access methods for cached queries indexed by their user preferences to only access a set of relevant cached queries for similarity measures. Extensive experiments are presented to demonstrate the performance and utility of our novel approach.", "paper_title": "Caching Support for Skyline Query Processing with Partially Ordered Domains", "paper_id": "WOS:000343607500005"}