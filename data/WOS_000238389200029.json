{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "interval_analysis"}, {"score": 0.0045464538515249085, "phrase": "conventional_floating-point_computations"}, {"score": 0.004392565073466714, "phrase": "guaranteed_error_bounds"}, {"score": 0.0041001740903338834, "phrase": "interval_methods"}, {"score": 0.003916098498242888, "phrase": "widespread_use"}, {"score": 0.0038271712887391015, "phrase": "large_scale_computational_science_applications"}, {"score": 0.0034512514926836667, "phrase": "performance_perspective"}, {"score": 0.003221316290858497, "phrase": "floating_point"}, {"score": 0.003006654007926993, "phrase": "small_computational_kernels"}, {"score": 0.002938317647182056, "phrase": "particularly_attention"}, {"score": 0.0027741761880779535, "phrase": "sun_fortran_interval_implementation"}, {"score": 0.0023346234464901978, "phrase": "fundamental_differences"}, {"score": 0.002255431275670053, "phrase": "operation_counts"}, {"score": 0.0022041312401435346, "phrase": "memory_references_requirements"}, {"score": 0.0021049977753042253, "phrase": "floating_point_codes"}], "paper_keywords": [""], "paper_abstract": "Interval analysis is an alternative to conventional floating-point computations that offers guaranteed error bounds. Despite this advantage, interval methods have not gained widespread use in large scale computational science applications. This paper addresses this issue from a performance perspective, comparing the performance of floating point and interval operations for some small computational kernels. Particularly attention is given to the Sun Fortran interval implementation, although the strategies introduced here to enhance performance are applicable to other interval implementations. Fundamental differences in the operation counts and memory references requirements of interval and floating point codes are discussed.", "paper_title": "Interval arithmetic and computational science: Performance considerations", "paper_id": "WOS:000238389200029"}