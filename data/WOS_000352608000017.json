{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "scalable_distributed_processing"}, {"score": 0.04499886913709998, "phrase": "existing_approaches"}, {"score": 0.02648111594963545, "phrase": "dknn"}, {"score": 0.004776669953449352, "phrase": "k_nearest_neighbor_queries"}, {"score": 0.004608121749000898, "phrase": "moving_objects"}, {"score": 0.0044990584725586764, "phrase": "k-nearest_neighbor"}, {"score": 0.0041703614123283165, "phrase": "centralized_setting"}, {"score": 0.004137184278868391, "phrase": "query_processing"}, {"score": 0.00405538690701843, "phrase": "single_server"}, {"score": 0.0038043055953253047, "phrase": "distributed_setting"}, {"score": 0.00374399358035391, "phrase": "vast_volume"}, {"score": 0.003684634192576662, "phrase": "concurrent_queries"}, {"score": 0.003334309053314909, "phrase": "k-nn_queries"}, {"score": 0.003255295296893174, "phrase": "new_index_structure"}, {"score": 0.003229374325577207, "phrase": "dynamic_strip_index"}, {"score": 0.0031028232755683674, "phrase": "different_data_distributions"}, {"score": 0.003065830998810144, "phrase": "grid_indexes"}, {"score": 0.0028529310661977577, "phrase": "distributed_processing"}, {"score": 0.0027852927366010406, "phrase": "distributed_k-nn_search"}, {"score": 0.002708399936381754, "phrase": "dsi._dknn"}, {"score": 0.0026654155072292707, "phrase": "uncertain_number"}, {"score": 0.002644179117033107, "phrase": "potentially_expensive_iterations"}, {"score": 0.002373472641477602, "phrase": "distributed_stream_processing"}, {"score": 0.0023357913211723884, "phrase": "extensive_experiments"}, {"score": 0.0021909411820497707, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "alternative_methods"}], "paper_keywords": ["k nearest neighbor query", " distributed query processing", " moving objects"], "paper_abstract": "Central to many applications involving moving objects is the task of processing k-nearest neighbor (k-NN) queries. Most of the existing approaches to this problem are designed for the centralized setting where query processing takes place on a single server; it is difficult, if not impossible, for them to scale to a distributed setting to handle the vast volume of data and concurrent queries that are increasingly common in those applications. To address this problem, we propose a suite of solutions that can support scalable distributed processing of k-NN queries. We first present a new index structure called Dynamic Strip Index (DSI), which can better adapt to different data distributions than exiting grid indexes. Moreover, it can be naturally distributed across the cluster, therefore lending itself well to distributed processing. We further propose a distributed k-NN search (DKNN) algorithm based on DSI. DKNN avoids having an uncertain number of potentially expensive iterations, and is thus more efficient and more predictable than existing approaches. DSI and DKNN are implemented on Apache S4, an open-source platform for distributed stream processing. We perform extensive experiments to study the characteristics of DSI and DKNN, and compare them with three baseline methods. Experimental results show that our proposal scales well and significantly outperforms the alternative methods.", "paper_title": "Scalable Distributed Processing of K Nearest Neighbor Queries over Moving Objects", "paper_id": "WOS:000352608000017"}