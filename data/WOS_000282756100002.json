{"auto_keywords": [{"score": 0.04452657881400446, "phrase": "deterministic_regular_expressions"}, {"score": 0.011435175742123493, "phrase": "alphabet_symbol"}, {"score": 0.00481495049065317, "phrase": "learning_deterministic_regular_expressions"}, {"score": 0.004658426838467567, "phrase": "xml_data"}, {"score": 0.004571269461883144, "phrase": "appropriate_dtd"}, {"score": 0.004528301408585875, "phrase": "xml_schema_definition"}, {"score": 0.0044857364169860825, "phrase": "xsd"}, {"score": 0.004360412703519539, "phrase": "xml_documents"}, {"score": 0.004178935413340453, "phrase": "positive_example_words"}, {"score": 0.003948613642680196, "phrase": "complete_class"}, {"score": 0.0038746849003761024, "phrase": "positive_examples"}, {"score": 0.0037133478610481994, "phrase": "regular_expressions"}, {"score": 0.0036610702290043387, "phrase": "practical_dtds"}, {"score": 0.0030446120560494155, "phrase": "small_k."}, {"score": 0.0027050595279115015, "phrase": "probabilistic_algorithm"}, {"score": 0.002641823250595624, "phrase": "increasing_values"}, {"score": 0.002555761854502478, "phrase": "deterministic_one"}, {"score": 0.002449208093757498, "phrase": "minimum_description_length_argument"}, {"score": 0.0023139986108451967, "phrase": "real_world"}, {"score": 0.002292199117499287, "phrase": "synthetic_data"}, {"score": 0.002155412043665635, "phrase": "simpler_classes"}, {"score": 0.0021049977753042253, "phrase": "previous_work"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Regular expressions", " schema inference", " XML"], "paper_abstract": "Inferring an appropriate DTD or XML Schema Definition (XSD) for a given collection of XML documents essentially reduces to learning deterministic regular expressions from sets of positive example words. Unfortunately, there is no algorithm capable of learning the complete class of deterministic regular expressions from positive examples only, as we will show. The regular expressions occurring in practical DTDs and XSDs, however, are such that every alphabet symbol occurs only a small number of times. As such, in practice it suffices to learn the subclass of deterministic regular expressions in which each alphabet symbol occurs at most k times, for some small k. We refer to such expressions as k-occurrence regular expressions (k-OREs for short). Motivated by this observation, we provide a probabilistic algorithm that learns k-OREs for increasing values of k, and selects the deterministic one that best describes the sample based on a Minimum Description Length argument. The effectiveness of the method is empirically validated both on real world and synthetic data. Furthermore, the method is shown to be conservative over the simpler classes of expressions considered in previous work.", "paper_title": "Learning Deterministic Regular Expressions for the Inference of Schemas from XML Data", "paper_id": "WOS:000282756100002"}