{"auto_keywords": [{"score": 0.030926517488363503, "phrase": "generalized_task_parallelization"}, {"score": 0.00481495049065317, "phrase": "generalized_task_parallelism"}, {"score": 0.004753670676591174, "phrase": "existing_approaches"}, {"score": 0.0046038458731764926, "phrase": "good_results"}, {"score": 0.004545240514015278, "phrase": "specific_domains"}, {"score": 0.004050116768809519, "phrase": "complex_software"}, {"score": 0.0038476708316022823, "phrase": "practical_reasons"}, {"score": 0.0037262941538784094, "phrase": "largely_differing_approaches"}, {"score": 0.0035856674209019234, "phrase": "engineering_hell"}, {"score": 0.0034725269588525534, "phrase": "theoretical_reasons"}, {"score": 0.0033845816848753073, "phrase": "joint_cost_model"}, {"score": 0.003215295260684715, "phrase": "parallelization_methods"}, {"score": 0.003054450075234415, "phrase": "parallel_code"}, {"score": 0.00299622333197717, "phrase": "program_dependence_graph"}, {"score": 0.002958021635132416, "phrase": "integer_linear_programming"}, {"score": 0.0028830690329478465, "phrase": "central_aspects"}, {"score": 0.0028463059289874637, "phrase": "existing_parallelization_approaches"}, {"score": 0.0027920359090544107, "phrase": "single_unified_framework"}, {"score": 0.0026865760988289147, "phrase": "llvm"}, {"score": 0.0022882500116799777, "phrase": "different_domains"}, {"score": 0.0021049977753042253, "phrase": "quad-core_machine"}], "paper_keywords": ["Performance", " Automatic parallelization", " integer linear programming", " just-in-time compilation"], "paper_abstract": "Existing approaches to automatic parallelization produce good results in specific domains. Yet, it is unclear how to integrate their individual strengths to match the demands and opportunities of complex software. This lack of integration has both practical reasons, as integrating those largely differing approaches into one compiler would impose an engineering hell, as well as theoretical reasons, as no joint cost model exists that would drive the choice between parallelization methods. By reducing the problem of generating parallel code from a program dependence graph to integer linear programming, generalized task parallelization integrates central aspects of existing parallelization approaches into a single unified framework. Implemented on top of LLVM, the framework seamlessly integrates enabling technologies such as speculation, privatization, and the realization of reductions. Evaluating our implementation on various C programs from different domains, we demonstrate the effectiveness and generality of generalized task parallelization. On a quad-core machine with hyperthreading we achieve speedups of up to 4.6x.", "paper_title": "Generalized Task Parallelism", "paper_id": "WOS:000353749300008"}