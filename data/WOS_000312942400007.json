{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "alternative_shortest_paths"}, {"score": 0.04362134741957494, "phrase": "spatial_network"}, {"score": 0.009431626368788058, "phrase": "space_complexity"}, {"score": 0.007223525900566007, "phrase": "real_road_networks"}, {"score": 0.004790230103466081, "phrase": "spatial_networks"}, {"score": 0.004765636025196421, "phrase": "shortest_path_query"}, {"score": 0.004680542234803855, "phrase": "spatial_network_databases"}, {"score": 0.004585142537943873, "phrase": "shortest_path_queries"}, {"score": 0.00456159659731398, "phrase": "real_time"}, {"score": 0.004434229146194447, "phrase": "single_shortest_path"}, {"score": 0.00434382793897547, "phrase": "common_ways"}, {"score": 0.004125773078637226, "phrase": "vickrey_pricing"}, {"score": 0.00406250784433007, "phrase": "vertex_upsilon"}, {"score": 0.003562322256892338, "phrase": "based_approach"}, {"score": 0.003534889186471058, "phrase": "single_pair_alternative_shortest_path_and_all_pairs_shortest_paths_processing"}, {"score": 0.003383364717254709, "phrase": "naive_way"}, {"score": 0.003255052087405443, "phrase": "possible_vertex"}, {"score": 0.0030994630902300133, "phrase": "art_approach"}, {"score": 0.0030676643955722884, "phrase": "storage_cost"}, {"score": 0.002989583371652771, "phrase": "center_points"}, {"score": 0.0029436891448690176, "phrase": "single-source_alternative_shortest_paths"}, {"score": 0.0027957221876121706, "phrase": "storage_scheme"}, {"score": 0.0027527957803126775, "phrase": "shortest_path_quadtrees"}, {"score": 0.0027035450387550277, "phrase": "avoiding_vertex"}, {"score": 0.002476546030310661, "phrase": "comparable_query_performance"}, {"score": 0.002441738221282892, "phrase": "k"}, {"score": 0.0023886965615920173, "phrase": "returned_paths"}, {"score": 0.002148906319501576, "phrase": "space_cost"}, {"score": 0.002132334524593275, "phrase": "proposed_ispqf"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Spatial networks", " shortest paths", " real-time query processing"], "paper_abstract": "Shortest path query is one of the most fundamental queries in spatial network databases. There exist algorithms that can process shortest path queries in real time. However, many complex applications require more than just the calculation of a single shortest path. For example, one of the common ways to determine the importance (or price) of a vertex or an edge in spatial network is to use Vickrey pricing, which intuitively values the vertex upsilon (or edge e) based on how much harder for travelling from the sources to the destinations without using upsilon (or e). In such cases, the alternative shortest paths without using upsilon (or e) are required. In this article, we propose using a precomputation based approach for both single pair alternative shortest path and all pairs shortest paths processing. To compute the alternative shortest path between a source and a destination efficiently, a naive way is to precompute and store all alternative shortest paths between every pair of vertices avoiding every possible vertex (or edge), which requires O(n(4)) space. Currently, the state of the art approach for reducing the storage cost is to choose a subset of the vertices as center points, and only store the single-source alternative shortest paths from those center points. Such approach has the space complexity of O(n(2) log n). We propose a storage scheme termed iSPQF, which utilizes shortest path quadtrees by observing the relationships between each avoiding vertex and its corresponding alternative shortest paths. We have reduced the space complexity from the naive O(n(4)) (or the state of the art O(n(2) log n)) to O(min(gamma, L)n(1.5)) with comparable query performance of O(K), where K is the number of vertices in the returned paths, L is the diameter of the spatial network, and gamma is a value that depends on the structure of the spatial network, which is empirically estimated to be 40 for real road networks. Experiments on real road networks have shown that the space cost of the proposed iSPQF is scalable, and both the algorithms based on iSPQF are efficient.", "paper_title": "Finding Alternative Shortest Paths in Spatial Networks", "paper_id": "WOS:000312942400007"}