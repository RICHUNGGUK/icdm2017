{"auto_keywords": [{"score": 0.04915285332263578, "phrase": "cloud_computing_environment"}, {"score": 0.04889136866197645, "phrase": "cloud_computing"}, {"score": 0.04548812433856781, "phrase": "high_performance_applications"}, {"score": 0.033096240026277673, "phrase": "maximum_ratio"}, {"score": 0.00481495049065317, "phrase": "scheduling_algorithm"}, {"score": 0.0047881480263782675, "phrase": "divisible_load"}, {"score": 0.00465634671242413, "phrase": "emerging_technology"}, {"score": 0.004617515080028721, "phrase": "information_technology_resources"}, {"score": 0.004502943680955863, "phrase": "computing_resources"}, {"score": 0.004465385614779578, "phrase": "pay-per-use_basis"}, {"score": 0.004378958522416482, "phrase": "effective_infrastructure"}, {"score": 0.004330321475256457, "phrase": "divisible_load_applications"}, {"score": 0.004083665825986903, "phrase": "optimal_performance"}, {"score": 0.003993426807961349, "phrase": "cloud_virtualization"}, {"score": 0.003960101604693806, "phrase": "supporting_cloud_middleware"}, {"score": 0.0038510053729959074, "phrase": "extensive_experiments"}, {"score": 0.00381886412166831, "phrase": "divisible_load_application"}, {"score": 0.0037869901077566526, "phrase": "cloud_environment"}, {"score": 0.0037449033166879874, "phrase": "overall_application_execution_time"}, {"score": 0.0037136443127486684, "phrase": "cloud_networking"}, {"score": 0.0036929495300985094, "phrase": "computing_capacities"}, {"score": 0.003651904029696065, "phrase": "application's_user"}, {"score": 0.003601235776892337, "phrase": "real_applications"}, {"score": 0.003571171678599011, "phrase": "amazon_cloud_computing_environment"}, {"score": 0.0034630606658026595, "phrase": "theoretical_model"}, {"score": 0.003405472159599445, "phrase": "adequate_solutions"}, {"score": 0.00315791054946254, "phrase": "algorithm_result"}, {"score": 0.0030880650254703408, "phrase": "measured_normalized_makespan"}, {"score": 0.00306227185008558, "phrase": "ideal_makespan"}, {"score": 0.0030113280682863234, "phrase": "communication_to_computation_ratio"}, {"score": 0.0028795712616923462, "phrase": "heterogeneous_setting"}, {"score": 0.002823750388759926, "phrase": "large_data_sets"}, {"score": 0.002776763584415067, "phrase": "ensemble_clustering_model"}, {"score": 0.0027458730206408005, "phrase": "computation_to_communication_ratio"}, {"score": 0.0026478260192958924, "phrase": "large_data_set"}, {"score": 0.002596485860622193, "phrase": "small_data"}, {"score": 0.002524860443787103, "phrase": "important_speedup"}, {"score": 0.002321622497840739, "phrase": "amazon"}, {"score": 0.002146640685357451, "phrase": "cloud_computing_developers"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["distributed systems", " cloud computing", " divisible load application", " autonomous computing", " scheduling", " perform"], "paper_abstract": "Cloud computing is an emerging technology in which information technology resources are virtualized to users in a set of computing resources on a pay-per-use basis. It is seen as an effective infrastructure for high performance applications. Divisible load applications occur in many scientific and engineering applications. However, dividing an application and deploying it in a cloud computing environment face challenges to obtain an optimal performance due to the overheads introduced by the cloud virtualization and the supporting cloud middleware. Therefore, we provide results of series of extensive experiments in scheduling divisible load application in a Cloud environment to decrease the overall application execution time considering the cloud networking and computing capacities presented to the application's user. We experiment with real applications within the Amazon cloud computing environment. Our extensive experiments analyze the reasons of the discrepancies between a theoretical model and the reality and propose adequate solutions. These discrepancies are due to three factors: the network behavior, the application behavior and the cloud computing virtualization. Our results show that applying the algorithm result in a maximum ratio of 1.41 of the measured normalized makespan versus the ideal makespan for application in which the communication to computation ratio is big. They show that the algorithm is effective for those applications in a heterogeneous setting reaching a ratio of 1.28 for large data sets. For application following the ensemble clustering model in which the computation to communication ratio is big and variable, we obtained a maximum ratio of 4.7 for large data set and a ratio of 2.11 for small data set. Applying the algorithm also results in an important speedup. These results are revealing for the type of applications we consider under experiments. The experiments also reveal the impact of the choice of the platforms provided by Amazon on the performance of the applications under study. Considering the emergence of cloud computing for high performance applications, the results in this paper can be widely adopted by cloud computing developers. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Implementation and performance evaluation of a scheduling algorithm for divisible load parallel applications in a cloud computing environment", "paper_id": "WOS:000353032900002"}