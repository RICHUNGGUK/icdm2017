{"auto_keywords": [{"score": 0.03947447987613366, "phrase": "multicore_cpus"}, {"score": 0.03666941473417694, "phrase": "existing_compilers"}, {"score": 0.03241550063150125, "phrase": "generated_code"}, {"score": 0.00481495049065317, "phrase": "targeting_optimized_library_calls"}, {"score": 0.004664352260912174, "phrase": "directive-based_programming_approaches"}, {"score": 0.004576311142275048, "phrase": "openmp"}, {"score": 0.004518444280442635, "phrase": "openacc"}, {"score": 0.004213240903095234, "phrase": "programming_models"}, {"score": 0.0041074234667687875, "phrase": "compiler_directives"}, {"score": 0.004055511503825102, "phrase": "code_sections"}, {"score": 0.0033508547759861186, "phrase": "annotated_sections"}, {"score": 0.003204841443605308, "phrase": "hardware-specific_architectural_features"}, {"score": 0.0028761045789798103, "phrase": "underlying_hardware"}, {"score": 0.002750721367040336, "phrase": "code_generation_framework"}, {"score": 0.0026986685585382347, "phrase": "linear_algebraic_operations"}, {"score": 0.0026475981474045414, "phrase": "annotated_codes"}, {"score": 0.0025160740422447837, "phrase": "optimized_vendor-provided_platform-specific_library_calls"}, {"score": 0.0023458049872325214, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["Code generation", " OpenMP", " OpenACC", " multicore CPU", " GPU"], "paper_abstract": "Directive-based programming approaches such as OpenMP and OpenACC have gained popularity due to their ease of programming. These programming models typically involve adding compiler directives to code sections such as loops in order to parallelize them for execution on multicore CPUs or GPUs. However, one problem with this approach is that existing compilers generate code directly from the annotated sections and do not make use of hardware-specific architectural features. As a result, the generated code is unable to fully exploit the capabilities of the underlying hardware. Alternatively, we propose a code generation framework in which linear algebraic operations in the annotated codes are recognized, extracted and mapped to optimized vendor-provided platform-specific library calls. We demonstrate that such an approach can result in better performance in the generated code compared to those which are generated by existing compilers. This is substantiated by experimental results on multicore CPUs and GPUs.", "paper_title": "A Code Generation Framework for Targeting Optimized Library Calls for Multiple Platforms", "paper_id": "WOS:000356138700001"}