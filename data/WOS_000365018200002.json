{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_clones"}, {"score": 0.015486197052498344, "phrase": "duplicated_code"}, {"score": 0.004714023408114857, "phrase": "software_systems"}, {"score": 0.004410331572207815, "phrase": "source_code"}, {"score": 0.004252974635533396, "phrase": "limited_support"}, {"score": 0.003388639163205525, "phrase": "evaluation_results"}, {"score": 0.0032087293763784722, "phrase": "compile_errors"}, {"score": 0.003189336613974265, "phrase": "test_failures"}, {"score": 0.003141364320497748, "phrase": "computational_cost"}, {"score": 0.0031129269142224194, "phrase": "proposed_approach"}, {"score": 0.003010834638993771, "phrase": "vast_majority"}, {"score": 0.002983575324622826, "phrase": "examined_cases"}, {"score": 0.0029209233709517634, "phrase": "large-scale_empirical_study"}, {"score": 0.0028857130140890787, "phrase": "million_clone_pairs"}, {"score": 0.0028422946420821075, "phrase": "nine_open-source_projects"}, {"score": 0.0027741761880779535, "phrase": "different_clone_properties"}, {"score": 0.0027574024919144635, "phrase": "tool_configuration_options"}, {"score": 0.0026508118618120114, "phrase": "production_code"}, {"score": 0.0025794354905140527, "phrase": "test_code"}, {"score": 0.002525248554951453, "phrase": "close_relative_location"}, {"score": 0.002376605162340897, "phrase": "distant_locations"}, {"score": 0.002169848044716866, "phrase": "small_size"}, {"score": 0.0021049977753042253, "phrase": "larger_size"}], "paper_keywords": ["Code duplication", " software clone management", " clone refactoring", " refactorability assessment", " empirical study"], "paper_abstract": "The presence of duplicated code in software systems is significant and several studies have shown that clones can be potentially harmful with respect to the maintainability and evolution of the source code. Despite the significance of the problem, there is still limited support for eliminating software clones through refactoring, because the unification and merging of duplicated code is a very challenging problem, especially when software clones have gone through several modifications after their initial introduction. In this work, we propose an approach for automatically assessing whether a pair of clones can be safely refactored without changing the behavior of the program. In particular, our approach examines if the differences present between the clones can be safely parameterized without causing any side-effects. The evaluation results have shown that the clones assessed as refactorable by our approach can be indeed refactored without causing any compile errors or test failures. Additionally, the computational cost of the proposed approach is negligible (less than a second) in the vast majority of the examined cases. Finally, we perform a large-scale empirical study on over a million clone pairs detected by four different clone detection tools in nine open-source projects to investigate how refactorability is affected by different clone properties and tool configuration options. Among the highlights of our conclusions, we found that a) clones in production code tend to be more refactorable than clones in test code, b) clones with a close relative location (i.e., same method, type, or file) tend to be more refactorable than clones in distant locations (i.e., same hierarchy, or unrelated types), c) Type-1 clones tend to be more refactorable than the other clone types, and d) clones with a small size tend to be more refactorable than clones with a larger size.", "paper_title": "Assessing the Refactorability of Software Clones", "paper_id": "WOS:000365018200002"}