{"auto_keywords": [{"score": 0.02667619405753512, "phrase": "average_case"}, {"score": 0.004815057040519387, "phrase": "hamming"}, {"score": 0.004724158990345732, "phrase": "wildcards_matching"}, {"score": 0.004688321299229397, "phrase": "approximate_pattern_matching"}, {"score": 0.00463507149599759, "phrase": "fundamental_problem"}, {"score": 0.004547656324173302, "phrase": "information_retrieval_applications"}, {"score": 0.004461882369408972, "phrase": "different_matching_relations"}, {"score": 0.0044111930537670705, "phrase": "hamming_distance"}, {"score": 0.00405658135587089, "phrase": "fixed_alphabet"}, {"score": 0.004025787455454387, "phrase": "length_sigma"}, {"score": 0.00394981748347167, "phrase": "length_m"}, {"score": 0.0038900709793274484, "phrase": "integer_k."}, {"score": 0.0032396224508754387, "phrase": "heuristics_approaches"}, {"score": 0.0031542917620807093, "phrase": "suffix_tree"}, {"score": 0.003130325700934738, "phrase": "suffix_array"}, {"score": 0.003094716540812336, "phrase": "burrows_wheeler_transform"}, {"score": 0.0030595112110658675, "phrase": "practical_implementations"}, {"score": 0.003036263091666092, "phrase": "error_tree"}, {"score": 0.0030017207229983385, "phrase": "novel_tree_structure"}, {"score": 0.0029115112555515277, "phrase": "approximate_pattern_matching_problems"}, {"score": 0.0028565082986974602, "phrase": "faster_computation_time"}, {"score": 0.0027286918886186245, "phrase": "tree_structure"}, {"score": 0.0024804352736263005, "phrase": "query_time"}, {"score": 0.0021049977753042253, "phrase": "edit_distance"}], "paper_keywords": ["algorithms", " biology", " cancer genomics", " computational molecular biology", " DNA computing"], "paper_abstract": "Approximate pattern matching is a fundamental problem in the bioinformatics and information retrieval applications. The problem involves different matching relations such as Hamming distance, edit distances, and the wildcards matching problem. The input is usually a text of length n over a fixed alphabet of length Sigma, a pattern of length m, and an integer k. The output is to find all positions that have <= k Hamming distance, edit distance, or wildcards matching with P. Many algorithms and indexes have been proposed to solve the problems more efficiently, but due to the space and time complexities of the problems, most tools adopted heuristics approaches based on, for instance, suffix tree, suffix array, or Burrows Wheeler Transform to reach practical implementations. Error Tree is a novel tree structure that is mainly oriented to solve the approximate pattern matching problems, using less space and faster computation time. The algorithm proposes for Hamming distance and wildcards matching a tree structure that needs O(n log(Sigma)(k) n/k!) words and takes O(m(k)/k! + occ)(O(m+ log(Sigma)(k)/k! + occ) in the average case) of query time for any online/offline pattern, where occ is the number of outputs. In addition, a tree structure of O(2(k)n log(Sigma)(k)/k!) words and O(m(k)/k! + 3(k)occ)(O(m+ log(Sigma)(k) n/k! + 3(k)occ) in the average case) query time for edit distance for any online/offline pattern.", "paper_title": "Error Tree: A Tree Structure for Hamming and Edit Distances and Wildcards Matching", "paper_id": "WOS:000365646800006"}