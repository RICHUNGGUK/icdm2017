{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "novel_program_analysis_framework"}, {"score": 0.004664352260912174, "phrase": "lewis'_theory"}, {"score": 0.0041074234667687875, "phrase": "change-impact_static_analysis"}, {"score": 0.003978866233891427, "phrase": "program's_source_code"}, {"score": 0.002833689453299307, "phrase": "lewis'_logic"}, {"score": 0.002658863179011018, "phrase": "proposed_changes"}, {"score": 0.002316105585203396, "phrase": "automated_tool"}, {"score": 0.0021049977753042253, "phrase": "code_change-impact_analysis"}], "paper_keywords": ["Formal verification", " proof theory", " theorem proving", " software engineering"], "paper_abstract": "This article shows a novel program analysis framework based on Lewis' theory of counterfactuals. Using this framework we are capable of performing change-impact static analysis on a program's source code. In other words, we are able to prove the properties induced by changes to a given program before applying these changes. Our contribution is two-fold; we show how to use Lewis' logic of counterfactuals to prove that proposed changes to a program preserve its correctness. We report the development of an automated tool based on resolution and theorem proving for performing code change-impact analysis.", "paper_title": "CODE-CHANGE IMPACT ANALYSIS USING COUNTERFACTUALS: THEORY AND IMPLEMENTATION", "paper_id": "WOS:000335515100004"}