{"auto_keywords": [{"score": 0.027114209972221387, "phrase": "adl"}, {"score": 0.00481495049065317, "phrase": "component_interaction_protocols"}, {"score": 0.004640590144749795, "phrase": "adl_level"}, {"score": 0.00447251540886613, "phrase": "current_interaction_protocols"}, {"score": 0.004342430078306461, "phrase": "components'_behavior"}, {"score": 0.00388729255686046, "phrase": "real-life_component_based_applications"}, {"score": 0.0037463983616303786, "phrase": "first_class_entities"}, {"score": 0.0027878797103973313, "phrase": "potential_approaches"}, {"score": 0.0026867260506696455, "phrase": "lts-based_interaction_specification"}, {"score": 0.0023346234464901978, "phrase": "behavior_protocols"}, {"score": 0.0022168460543913787, "phrase": "positive_experience"}, {"score": 0.0021522261505574035, "phrase": "exception-aware_behavior_protocols"}, {"score": 0.0021049977753042253, "phrase": "real-life_fractal_component_model_application"}], "paper_keywords": [""], "paper_abstract": "At ADL level, most of the current interaction protocols designed to specify components' behavior at their interfaces do not allow to capture exceptions explicitly. Based on our experience with real-life component based applications, handling exceptions as first class entities in a (formal) behavior specification is an absolute necessity. Otherwise, due to the need to capture exceptions indirectly, the specification becomes very complex, therefore hard to read and, consequently, error-prone. After analyzing potential approaches to introducing exceptions to LTS-based interaction specification (expressed via terms/expressions) in ADL, the paper presents the way we built exceptions into the behavior protocols. Finally, we discuss the positive experience with applying these exception-aware behavior protocols to a real-life Fractal component model application.", "paper_title": "Exceptions in component interaction protocols - Necessity", "paper_id": "WOS:000239422300013"}