{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "efficient_verifiable_data"}, {"score": 0.004692227830462433, "phrase": "d._schroder"}, {"score": 0.004652016085325825, "phrase": "h._schroder"}, {"score": 0.004612147352416241, "phrase": "verifiable_data"}, {"score": 0.004249957578636515, "phrase": "streamed_data"}, {"score": 0.0035620354052144656, "phrase": "vds."}, {"score": 0.003170811465728631, "phrase": "previous_vds_schemes"}, {"score": 0.003037047249598515, "phrase": "upper_bound"}, {"score": 0.002226430168622392, "phrase": "collision-resistant_hash_functions"}, {"score": 0.0021695394558562927, "phrase": "random_oracles"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["data streaming", " public verifiability", " cloud computing"], "paper_abstract": "In 2012, D. Schroder and H. Schroder introduced verifiable data streaming (VDS) that enables a client to append, search, verify, and update the streamed data efficiently. After storing the data with a server, a client issues a query to receive a proof that the data of the client are still correctly stored. Anyone can check the validity of the proof publicly in VDS. However, the length of a secret of a client, the length of a proof, and the complexity of appending an element in the previous VDS schemes are O(log n), where n is the upper bound on the number of elements to be stored. In this paper, we suggest a more efficient VDS scheme. In our scheme, the length of a secret of a client is only O(1), and the length of a proof and the complexity of appending an element are O(log i), where i(<= n) is the index of an element. We also show that our scheme is secure under any collision-resistant hash functions and unforgeable signature schemes without random oracles. Copyright (C) 2015 John Wiley & Sons, Ltd.", "paper_title": "Efficient verifiable data streaming", "paper_id": "WOS:000367922500056"}