{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "efficient_operations"}, {"score": 0.0044853402274804815, "phrase": "specialized_storage_engines"}, {"score": 0.00430907756010007, "phrase": "plain_data_stores"}, {"score": 0.004204054047427536, "phrase": "large_amounts"}, {"score": 0.004076352180903171, "phrase": "logical_inference"}, {"score": 0.004001593118269276, "phrase": "current_triple-stores"}, {"score": 0.003880017219275826, "phrase": "owl_lite"}, {"score": 0.0036477941360224435, "phrase": "non-triple_form"}, {"score": 0.0034294219963679857, "phrase": "owl_lite_triples"}, {"score": 0.0033457659530207306, "phrase": "high_flexibility"}, {"score": 0.0032742371135183195, "phrase": "object-relational_database"}, {"score": 0.0030123335878664064, "phrase": "distinguishing_features"}, {"score": 0.0028759679188458532, "phrase": "easy_integration"}, {"score": 0.002771321260809228, "phrase": "triple_queries"}, {"score": 0.002754313785070872, "phrase": "sql"}, {"score": 0.0026953359825383624, "phrase": "specialized_data-dependent_schema"}, {"score": 0.00252603724135373, "phrase": "dbms"}, {"score": 0.0024340759772801847, "phrase": "extensive_use"}, {"score": 0.0024190798397126924, "phrase": "bulk_loading"}, {"score": 0.00224615642504509, "phrase": "postgresql-based_implementation_show"}, {"score": 0.002144400314994328, "phrase": "state-of-the-art_triple-stores"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Triple-store", " OWL Lite", " Bulk operations", " Specialized schema"], "paper_abstract": "An increasing number of (semantic) web applications store a very large number of (subject, predicate, object) triples in specialized storage engines called triple-stores. Often, triple-stores are used mainly as plain data stores, i.e., for inserting and retrieving large amounts of triples, but not using more advanced features such as logical inference, etc. However, current triple-stores are not optimized for such bulk operations and/or do not support OWL Lite. Further, triple-stores can be inflexible when the data has to be integrated with other kinds of data in non-triple form, e.g., standard relational data. This paper presents 3XL, a triple-store that efficiently supports operations on very large amounts of OWL Lite triples. 3XL also provides the user with high flexibility as it stores data in an object-relational database in a schema that is easy to use and understand. It is, thus, easy to integrate 3XL data with data from other sources. The distinguishing features of 3XL include (a) flexibility as the data is stored in a database, allowing easy integration with other data, and can be queried by means of both triple queries and SQL, (b) using a specialized data-dependent schema (with intelligent partitioning) which is intuitive and efficient to use, (c) using object-relational DBMS features such as inheritance, (d) efficient loading through extensive use of bulk loading and caching, and (e) efficient triple query operations, especially in the important case when the subject and/or predicate is known. Extensive experiments with a PostgreSQL-based implementation show that 3XL performs very well for such operations and that the performance is comparable to state-of-the-art triple-stores. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "3XL: Supporting efficient operations on very large OWL Lite triple-stores", "paper_id": "WOS:000289395000006"}