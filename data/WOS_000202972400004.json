{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "delimited_control"}, {"score": 0.034316372449548334, "phrase": "dynamic_environment"}, {"score": 0.004642292792558686, "phrase": "web_applications"}, {"score": 0.004600100053651545, "phrase": "database_cursors"}, {"score": 0.004537525607322823, "phrase": "mobile_code"}, {"score": 0.0043947942344037105, "phrase": "language_features"}, {"score": 0.003956558420993431, "phrase": "open_and_subtle_problem"}, {"score": 0.003867206750827, "phrase": "typed_language"}, {"score": 0.0037284065559949064, "phrase": "dynamic_binding"}, {"score": 0.003545625043276134, "phrase": "theoretical_and_practical_points"}, {"score": 0.0034027387694902287, "phrase": "delimited_dynamic_binding"}, {"score": 0.0033410898465226417, "phrase": "delimited_continuation"}, {"score": 0.003091262582401731, "phrase": "captured_continuation"}, {"score": 0.0028600623410146796, "phrase": "reduction-preserving_translation"}, {"score": 0.0024933627927613902, "phrase": "haskell"}, {"score": 0.0024258208033731154, "phrase": "mutable_dynamic_variables"}, {"score": 0.0022857351723674004, "phrase": "older_bindings"}, {"score": 0.0022238315004700607, "phrase": "stack_inspection"}, {"score": 0.0021340985236583034, "phrase": "execution_context"}, {"score": 0.0021049977753042253, "phrase": "inductive_data_structure"}], "paper_keywords": ["dynamic binding", " delimited continuations", " monads"], "paper_abstract": "Dynamic binding and delimited control are useful together in many settings, including Web applications, database cursors, and mobile code. We examine this pair of language features to show that the semantics of their interaction is ill-defined yet not expressive enough for these uses. We solve this open and subtle problem. We formalise a typed language DB+DC that combines a calculus DB of dynamic binding and a calculus DC of delimited control. We argue from theoretical and practical points of view that its semantics should be based on delimited dynamic binding: capturing a delimited continuation closes over part of the dynamic environment, rather than all or none of it; reinstating the captured continuation supplements the dynamic environment, rather than replacing or inheriting it. We introduce a type- and reduction-preserving translation from DB + DC to DC, which proves that delimited control macro-expresses dynamic binding. We use this translation to implement DB+DC in Scheme, OCaml, and Haskell. We extend DB + DC with mutable dynamic variables and a facility to obtain not only the latest binding of a dynamic variable but also older bindings. This facility provides for stack inspection and (more generally) folding over the execution context as an inductive data structure.", "paper_title": "Delimited dynamic binding", "paper_id": "WOS:000202972400004"}