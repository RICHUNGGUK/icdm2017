{"auto_keywords": [{"score": 0.0496213341565463, "phrase": "queue"}, {"score": 0.005179276703769686, "phrase": "dpi"}, {"score": 0.00481495049065317, "phrase": "dfa_history"}, {"score": 0.004723322467153553, "phrase": "deflation_dfa."}, {"score": 0.004633429997452688, "phrase": "increasing_demand"}, {"score": 0.004589124394375718, "phrase": "network_devices"}, {"score": 0.004523455475492876, "phrase": "deep_packet_inspection"}, {"score": 0.004352876088312741, "phrase": "network_security"}, {"score": 0.004229158339021651, "phrase": "packet_payload"}, {"score": 0.004089239912167375, "phrase": "predefined_patterns"}, {"score": 0.0039729853486821995, "phrase": "regular_expressions"}, {"score": 0.0037683358267785435, "phrase": "mapping_regexes"}, {"score": 0.0037322713756404295, "phrase": "deterministic_finite_automaton"}, {"score": 0.0035914198812657897, "phrase": "state_explosion_problem"}, {"score": 0.0034725269588525534, "phrase": "dfa_explosion"}, {"score": 0.0030938932434437178, "phrase": "extended_dfa_approach"}, {"score": 0.0030642636185693054, "phrase": "regex_matching"}, {"score": 0.0029203055813347874, "phrase": "memory_size_reduction"}, {"score": 0.002850875630787708, "phrase": "fully_automated_approach"}, {"score": 0.0027564303939865476, "phrase": "pipeline_queues"}, {"score": 0.00266510562382701, "phrase": "matching_history"}, {"score": 0.0026142814606853037, "phrase": "state_explosion"}, {"score": 0.0025767987652419054, "phrase": "kleene_closure"}, {"score": 0.0025521085778978042, "phrase": "length_restriction"}, {"score": 0.00242047093248845, "phrase": "fully_automated_signature_compilation"}, {"score": 0.0023972750359328235, "phrase": "polynomial_running_time"}, {"score": 0.002219516542316085, "phrase": "strict_theoretical_proof"}, {"score": 0.0021049977753042253, "phrase": "traditional_dfa."}], "paper_keywords": ["Deterministic Finite Automaton (DFA)", " Regular Expression (Regex)", " Deep Packet Classification (DPI)", " NIDS (Network Intrusion Detection System)"], "paper_abstract": "There is an increasing demand for network devices to perform deep packet inspection (DPI) in order to enhance network security. In DPI, the packet payload is compared against a set of predefined patterns that can be specified using regular expressions (regexes). It is well-known that mapping regexes to deterministic finite automaton (DFA) may suffer from the state explosion problem. Through observation, we attribute DFA explosion to the necessity of remembering matching history. In this paper, we investigate how to manage matching history efficiently and propose an extended DFA approach for regex matching called fcq-FA, which can make a memory size reduction of about 1,000 times with a fully automated approach. In fcq-FA, we use pipeline queues and counters to help record the matching history. Hence, state explosion caused by Kleene closure and length restriction can be completely avoided. Furthermore, it achieves a fully automated signature compilation with polynomial running time and space. The equivalence between fcq-FA and the traditional DFA is guaranteed by a strict theoretical proof, which means fcq-FA can process all the regexes supported by the traditional DFA.", "paper_title": "Managing DFA History with Queue for Deflation DFA", "paper_id": "WOS:000304305000001"}