{"auto_keywords": [{"score": 0.04570398300724071, "phrase": "model_elements"}, {"score": 0.00481495049065317, "phrase": "software_models"}, {"score": 0.004761132425263795, "phrase": "evolving_models"}, {"score": 0.00462919213721188, "phrase": "file-based_software_configuration_management_systems"}, {"score": 0.004254814649568355, "phrase": "globally_unique_identifiers"}, {"score": 0.0033594249301033604, "phrase": "partial_transformation"}, {"score": 0.003266201217790818, "phrase": "sufficient_management"}, {"score": 0.0032296377835432533, "phrase": "inter-model_relationships"}, {"score": 0.002918394200972564, "phrase": "even_complete_model_fragments"}, {"score": 0.002805597755796506, "phrase": "fine-grained_history_representation"}, {"score": 0.00266693888510356, "phrase": "identification_links"}, {"score": 0.0025928815987676535, "phrase": "different_model_revisions"}, {"score": 0.0023166075278110254, "phrase": "explicit_expression"}, {"score": 0.0022906498741695094, "phrase": "model_evolution"}, {"score": 0.0021049977753042253, "phrase": "fine-grained_elements"}], "paper_keywords": ["Model evolution", " Traceability", " Identification"], "paper_abstract": "Evolving models are often managed in file-based software configuration management systems. This causes the identification problem: if the model elements are not assigned with globally unique identifiers, we cannot identify them over time. However, if such identifiers would be given, they can be misleading because the elements to which they are assigned might change completely. As a consequence, evolution becomes incomprehensible, partial transformation is hampered, and sufficient management of inter-model relationships (e.g. traceability links) is impeded. This article presents an approach to identify model elements or even complete model fragments over time. It establishes a fine-grained history representation to describe model evolution. The representation contains identification links between the elements of different model revisions allowing us to identify elements of a given revision in other revisions or variants of the model. Due to the explicit expression of model evolution, it further enables the capturing of changes that have been applied to the fine-grained elements inside a model.", "paper_title": "Unique identification of elements in evolving software models", "paper_id": "WOS:000335236300012"}