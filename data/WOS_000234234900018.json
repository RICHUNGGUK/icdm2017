{"auto_keywords": [{"score": 0.029561758661908195, "phrase": "drap"}, {"score": 0.026090704171822063, "phrase": "parallel_hypercube_algorithm"}, {"score": 0.00481495049065317, "phrase": "discrete_resource_allocation_problems"}, {"score": 0.004652016085325825, "phrase": "parallel_processing"}, {"score": 0.004516733575701128, "phrase": "difficult_discrete_optimization_problems"}, {"score": 0.004321118442104989, "phrase": "combinatorial_search"}, {"score": 0.004257806363128601, "phrase": "large-scale_computations"}, {"score": 0.003548905904860611, "phrase": "efficient_parallel_hypercube_algorithm"}, {"score": 0.003496868378204657, "phrase": "discrete_resource_allocation_problem"}, {"score": 0.0033950634506367235, "phrase": "sequential_divide-and-conquer_algorithm"}, {"score": 0.003200230621987751, "phrase": "parallel_hypercube_machine"}, {"score": 0.0030464123943266673, "phrase": "discrete_resources"}, {"score": 0.0029576827451501956, "phrase": "d-dimensional_hypercube"}, {"score": 0.0028293966058473476, "phrase": "parallel_algorithm"}, {"score": 0.002640781900605126, "phrase": "simulation_study"}, {"score": 0.0025262061502713683, "phrase": "experimental_results"}, {"score": 0.0024891269874339553, "phrase": "speedup_factor"}, {"score": 0.0022005118194652704, "phrase": "processing_nodes"}, {"score": 0.0021049977753042253, "phrase": "load_balancing"}], "paper_keywords": ["combinatorial optimization", " discrete resource allocation", " divide and conquer", " economics", " hypercube", " parallel processing", " simulation"], "paper_abstract": "It has been suggested that parallel processing helps in the solution of difficult discrete optimization problems, in particular, those problems that exhibit combinatorial search and require large-scale computations. By using a number of processors that are connected, coordinated and operating simultaneously, the solutions to such problems can be obtained much more quickly. The purpose of this paper is to propose an efficient parallel hypercube algorithm for the discrete resource allocation problem (DRAP). A sequential divide-and-conquer algorithm is first proposed. The algorithm is then modified for a parallel hypercube machine by exploiting its inherent parallelism. To allocate N units of discrete resources to n agents using a d-dimensional hypercube of p = 2(d) nodes, this parallel algorithm solves the DRAP in O((n/P + log(2) p)N-2) time. A simulation study is conducted on a 32-node nCUBE/2 hypercube computer to present the experimental results. The speedup factor of the parallel hypercube algorithm is found to be more significant when the number of agents in the DRAP is much greater than the number of processing nodes on the hypercube. Some issues related to load balancing, routing, scalability, and mappings of the parallel hypercube algorithm are also discussed.", "paper_title": "A parallel hypercube algorithm for discrete resource allocation problems", "paper_id": "WOS:000234234900018"}