{"auto_keywords": [{"score": 0.03654516494859162, "phrase": "prolog"}, {"score": 0.00481495049065317, "phrase": "model_inconsistencies"}, {"score": 0.0047468516620285525, "phrase": "automated_regression_planning"}, {"score": 0.004580769304731227, "phrase": "main_challenges"}, {"score": 0.004515967518891287, "phrase": "model-driven_software_engineering"}, {"score": 0.004296264970612285, "phrase": "design_model_inconsistencies"}, {"score": 0.004087207102190335, "phrase": "artificial_intelligence_technique"}, {"score": 0.004029359223675788, "phrase": "automated_planning"}, {"score": 0.0036207206487324506, "phrase": "badger"}, {"score": 0.0031845067058084613, "phrase": "different_types"}, {"score": 0.0031393948330209224, "phrase": "structural_inconsistencies"}, {"score": 0.0030949200330108156, "phrase": "uml_models"}, {"score": 0.0030293828200315797, "phrase": "generated_models"}, {"score": 0.002986461855862617, "phrase": "reverse-engineered_models"}, {"score": 0.002861302930564756, "phrase": "largest_ones"}, {"score": 0.0024630345285372958, "phrase": "java_program"}, {"score": 0.0022447206386952126, "phrase": "resolution_plans"}, {"score": 0.002150580119047236, "phrase": "cost_function"}, {"score": 0.0021049977753042253, "phrase": "planner_algorithm"}], "paper_keywords": ["Automated planning", " Inconsistency resolution", " Software modeling"], "paper_abstract": "One of the main challenges in model-driven software engineering is to automate the resolution of design model inconsistencies. We propose to use the artificial intelligence technique of automated planning for the purpose of resolving such inconsistencies through the generation of one or more resolution plans. We implemented Badger, a regression planner in Prolog that generates such plans. We assess its scalability on the resolution of different types of structural inconsistencies in UML models using both generated models and reverse-engineered models of varying sizes, the largest ones containing more than 10,000 model elements. We illustrate the metamodel-independence of our approach by applying it to the resolution of code smells in a Java program. We discuss how the user can adapt the order in which resolution plans are presented by modifying the cost function of the planner algorithm.", "paper_title": "Resolving model inconsistencies using automated regression planning", "paper_id": "WOS:000349026100026"}