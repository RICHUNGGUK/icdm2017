{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.0489226300933176, "phrase": "high_dimensional_data"}, {"score": 0.004756805752518494, "phrase": "self-organizing_map"}, {"score": 0.004395532072377065, "phrase": "wide_range"}, {"score": 0.004238134740341528, "phrase": "pattern_recognition"}, {"score": 0.004186926251483987, "phrase": "image_processing"}, {"score": 0.004086350434865782, "phrase": "som_model"}, {"score": 0.003574695610710444, "phrase": "euclidean_distances"}, {"score": 0.003531474887552889, "phrase": "training_vectors"}, {"score": 0.00342568771304873, "phrase": "second_part"}, {"score": 0.0032431667821391044, "phrase": "pre-defined_neighborhood_structure"}, {"score": 0.0031269043024513567, "phrase": "graphics_processing_unit"}, {"score": 0.0029244418026475832, "phrase": "graphics_rendering_ability"}, {"score": 0.0028367868542874763, "phrase": "distance_calculation"}, {"score": 0.0027184540871935284, "phrase": "matrix_multiplication"}, {"score": 0.0026050445177883005, "phrase": "update_process"}, {"score": 0.002526938673434697, "phrase": "point-rendering_process"}, {"score": 0.0024511688853030168, "phrase": "fragment_shader"}, {"score": 0.002421499421848063, "phrase": "experimental_results"}, {"score": 0.0023063614119692476, "phrase": "previous_cuda_implementations"}, {"score": 0.0022371907579775796, "phrase": "large_neighborhood_case"}, {"score": 0.0021049977753042253, "phrase": "large_codebook_size"}], "paper_keywords": ["Graphics processing unit", " Self-organizing maps", " Compute shader", " CUDA"], "paper_abstract": "The self-organizing map (SOM) model is an effective technique applicable in a wide range of areas, such as pattern recognition and image processing. In the SOM model, the most time-consuming procedure is the training process. It consists of two time-consuming parts. The first part is the calculation of the Euclidean distances between training vectors and codevectors. The second part is the update of the codevectors with the pre-defined neighborhood structure. This paper proposes a graphics processing unit (GPU) algorithm that accelerates these two parts using the graphics rendering ability of GPUs. The distance calculation is implemented in the form of matrix multiplication with compute shader, while the update process is treated as a point-rendering process with vertex shader and fragment shader. Experimental results show that our algorithm runs much faster than previous CUDA implementations, especially for the large neighborhood case. Also, our method can handle the case with large codebook size and high dimensional data.", "paper_title": "GPU Accelerated Self-Organizing Map for High Dimensional Data", "paper_id": "WOS:000354203700004"}