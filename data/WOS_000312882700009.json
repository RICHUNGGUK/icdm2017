{"auto_keywords": [{"score": 0.024027926949628384, "phrase": "best_tested_index"}, {"score": 0.00481495049065317, "phrase": "efficient_spatiotemporal_indexing"}, {"score": 0.0044967055264893184, "phrase": "object_location_updates"}, {"score": 0.004420472010542188, "phrase": "linear_motion_model"}, {"score": 0.004081385289516914, "phrase": "existing_spatiotemporal_indexes"}, {"score": 0.0036622637391432143, "phrase": "high_query_performance"}, {"score": 0.0036207206487324506, "phrase": "high_update_performance"}, {"score": 0.0032302647179383915, "phrase": "high_rate"}, {"score": 0.002898291237210567, "phrase": "limited-sized_ram_buffer"}, {"score": 0.002675654549462983, "phrase": "theoretical_and_empirical_evidence"}, {"score": 0.0025127604406208668, "phrase": "update_performance"}, {"score": 0.002442025065383455, "phrase": "extensive_experiments"}, {"score": 0.0024005409468262203, "phrase": "recognized_spatiotemporal_benchmark"}, {"score": 0.002359759876402679, "phrase": "solid_state_drive"}], "paper_keywords": ["spatiotemporal databases", " indexing", " query processing"], "paper_abstract": "In this paper, we study the problem of efficient spatiotemporal indexing of moving objects. In order to reduce the frequency of object location updates, a linear motion model is used to model the near future location of moving objects. A number of existing spatiotemporal indexes have already been proposed for indexing these models. However, these indexes are either designed to offer high query performance or high update performance. Therefore, they are all ill suited to handle situations where both queries and updates arrive at a high rate. In this paper, we propose the (STPR)-T-e*-tree which extends the TPR*-tree to more efficiently use a limited-sized RAM buffer for processing queries in batches and rapidly arriving updates. We provide both theoretical and empirical evidence of the effectiveness of the (STPR)-T-e*-tree in improving query and update performance. We have conducted extensive experiments using a recognized spatiotemporal benchmark on a solid state drive. The (STPR)-T-e*-tree simultaneously outperforms the best tested index optimized for queries by up to a factor of 5.6 for query I/O and outperforms the best tested index for updates by up to a factor of 11.5 for update I/O.", "paper_title": "(STPR)-T-e*-tree: Efficient Buffering for Spatiotemporal Indexes Via Shared Execution", "paper_id": "WOS:000312882700009"}