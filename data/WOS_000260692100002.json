{"auto_keywords": [{"score": 0.049390036742903154, "phrase": "esl"}, {"score": 0.03711522701821291, "phrase": "tlm"}, {"score": 0.036726565381146485, "phrase": "tlm_level"}, {"score": 0.00481495049065317, "phrase": "odyssey_approach"}, {"score": 0.004780183091824403, "phrase": "early_simulation-based_equivalence_checking"}, {"score": 0.004660453113061494, "phrase": "executable_transaction-level_model"}, {"score": 0.0045108906244892165, "phrase": "electronic_system-level"}, {"score": 0.004397875849247165, "phrase": "new_techniques"}, {"score": 0.004318881178805575, "phrase": "esl_designs"}, {"score": 0.004195418010131832, "phrase": "esl_synthesis"}, {"score": 0.004150030918669128, "phrase": "promising_verification_strategy"}, {"score": 0.0041200448395938526, "phrase": "future_very_complex_designs"}, {"score": 0.003987755561492638, "phrase": "highest_level"}, {"score": 0.003831801113154043, "phrase": "lower_level"}, {"score": 0.0037493114715625784, "phrase": "initial_golden_model"}, {"score": 0.003668591097652231, "phrase": "simulation-based_functional_verification"}, {"score": 0.0036026484429137998, "phrase": "odyssey."}, {"score": 0.0035507457285983268, "phrase": "transaction-level_model"}, {"score": 0.003399466007862412, "phrase": "partial_timing"}, {"score": 0.0033262524445013303, "phrase": "input_esl_design"}, {"score": 0.0030821633718368206, "phrase": "host_machine"}, {"score": 0.003059869469624301, "phrase": "corresponding_input_stimuli"}, {"score": 0.002961522457297694, "phrase": "systemc"}, {"score": 0.0027741761880779535, "phrase": "higher_simulation_speed"}, {"score": 0.0025334249463305875, "phrase": "tlm_simulation_performance"}, {"score": 0.002515090164966655, "phrase": "experimental_results"}, {"score": 0.002460876181416983, "phrase": "early_validation"}, {"score": 0.0024342079318127423, "phrase": "esl_synthesis_process"}, {"score": 0.0023388674614404324, "phrase": "lower_levels"}, {"score": 0.0022718774783143203, "phrase": "design_cycle"}, {"score": 0.002239103860494545, "phrase": "co-simulation_overhead"}, {"score": 0.002190825828942124, "phrase": "original_esl_design"}, {"score": 0.002135812692862058, "phrase": "partitioning_quality"}, {"score": 0.0021049977753042253, "phrase": "communication_to_computation_ratio"}], "paper_keywords": ["Hardware-software co-simulation", " Equivalence checking", " Simulation-based verification", " Transaction-level model", " ODYSSEY methodology", " Hardware-software co-design"], "paper_abstract": "Design technology is expected to rise to electronic system-level (ESL). This necessitates new techniques and tools for synthesizing ESL designs and for verifying them before and after ESL synthesis. A promising verification strategy for future very complex designs is to initially verify the design at the highest level of abstraction, and then check the equivalence of the lower level automatically generated models against that initial golden model. We present one such approach to simulation-based functional verification implemented in our ESL design methodology called ODYSSEY. Our ESL synthesis tool generates a transaction-level model (TLM) at TLM level 2 (i.e., design with partial timing) that corresponds to the input ESL design (which is at TLM level 3; i.e., sole functionality without timing). Both the ESL design and its generated TLM model can be simulated on a host machine with corresponding input stimuli to establish their functional equivalence. The TLM is in SystemC, and hence executable, and also models both hardware and software components in C++ to achieve higher simulation speed. We introduce an implementation of a TLM level 2 model that is tailored to our ESL design methodology and apply our approach to a number of benchmarks to evaluate the TLM simulation performance. Experimental results show that the approach suits early validation of the ESL synthesis process since its simulation performance is more than 4 orders of magnitude higher than simulations at lower levels and it is generated early in the design cycle. Also the co-simulation overhead - compared to simulating the original ESL design in C++ -- depends on the partitioning quality in terms of communication to computation ratio. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "The ODYSSEY approach to early simulation-based equivalence checking at ESL level using automatically generated executable transaction-level model", "paper_id": "WOS:000260692100002"}