{"auto_keywords": [{"score": 0.034503478591515375, "phrase": "attack_signatures"}, {"score": 0.004641890423057823, "phrase": "signature_databases"}, {"score": 0.004593591780245872, "phrase": "pattern_matching"}, {"score": 0.004498490110526062, "phrase": "network_attacks"}, {"score": 0.004314127287770832, "phrase": "traditional_pm_algorithms"}, {"score": 0.004224786847720058, "phrase": "telltale_patterns"}, {"score": 0.004180809918117248, "phrase": "network_flows"}, {"score": 0.004072851768196397, "phrase": "real-world_network_traffic"}, {"score": 0.0038049789989278463, "phrase": "network_streams"}, {"score": 0.0035733198242955634, "phrase": "fingerprinting_and_pm_methods"}, {"score": 0.0034267429854665035, "phrase": "malicious_traffic"}, {"score": 0.003085989256759819, "phrase": "attack-free_connections"}, {"score": 0.0030378759123133644, "phrase": "input_traffic"}, {"score": 0.002450602177683068, "phrase": "false_matches"}, {"score": 0.002387214876538434, "phrase": "multiple_fingerprinting_techniques"}, {"score": 0.0023623206962490547, "phrase": "bloom-filter"}, {"score": 0.002337684811187166, "phrase": "rabin-fingerprint"}, {"score": 0.0021496083700137305, "phrase": "fingerprinter"}, {"score": 0.0021049977753042253, "phrase": "attack_detection_process"}], "paper_keywords": ["pattern matching engine of IDSs", " IPSs", " multi-pattern matching algorithms", " fingerprinting and digesting techniques", " intrusion detection process"], "paper_abstract": "Intrusion detection/prevention systems (IDSs/IPSs) heavily rely on signature databases and pattern matching (PM) techniques to identify network attacks. The engines of such systems often employ traditional PM algorithms to search for telltale patterns in network flows. The observations that real-world network traffic is largely legitimate and that telltales manifested by exploits rarely appear in network streams lead us to the proposal of Fingerprinter. This framework integrates fingerprinting and PM methods to rapidly distinguish well-behaved from malicious traffic. Fingerprinter produces concise digests or fingerprints for attack signatures during its programming phase. In its querying phase, the framework quickly identifies attack-free connections by transforming input traffic into its fingerprint space and matching its digest against those of attack signatures. If the legitimacy of a stream cannot be determined by fingerprints alone, our framework uses the <monospace>Boyer-Moore</monospace> algorithm to ascertain whether attack signatures appear in the stream. To reduce false matches, we resort to multiple fingerprinting techniques including Bloom-Filter and Rabin-Fingerprint. Experimentation with a prototype and a variety of traces has helped us establish that Fingerprinter significantly accelerates the attack detection process.", "paper_title": "A Digest and Pattern Matching-Based Intrusion Detection Engine", "paper_id": "WOS:000269200300007"}