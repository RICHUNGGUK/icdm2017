{"auto_keywords": [{"score": 0.004212453011596424, "phrase": "memory-efficient_algorithms"}, {"score": 0.004012500850311087, "phrase": "efficient_forward_and_backward_traversal"}, {"score": 0.0034676182423067307, "phrase": "linked_structures"}, {"score": 0.003384262486955773, "phrase": "garbage_collection"}, {"score": 0.0033029038236817372, "phrase": "hash-chain_computations"}, {"score": 0.0029244418026475832, "phrase": "performance_testing_platform"}, {"score": 0.0028541057064952876, "phrase": "traversal_algorithms"}, {"score": 0.0026530590435527527, "phrase": "algorithms_animation"}, {"score": 0.002466139325703204, "phrase": "computer_programs"}, {"score": 0.0021049977753042253, "phrase": "lts_system"}], "paper_keywords": ["pebbling", " program rollback", " hash chain", " list traversal", " synopsis"], "paper_abstract": "The List-Traversal Synopses (LTS) system enables the efficient execution, utilization, and integration of memory-efficient algorithms that can support efficient forward and backward traversal of unidirectional lists. It has applications ranging from traversal of linked structures, garbage collection, hash-chain computations and program rollback. The system provides animation and performance testing platform for traversal algorithms. We will demonstrate the algorithms animation, and will demonstrate how computer programs can be made reversible, and actually run backwards, using the LTS system.", "paper_title": "LTS: The List-Traversal Synopses system", "paper_id": "WOS:000239450400035"}