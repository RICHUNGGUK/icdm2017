{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "\"mouldable_code"}, {"score": 0.004674952036988355, "phrase": "nested_code_graph_transformation"}, {"score": 0.0036553070575015344, "phrase": "high-performance_code_generation"}, {"score": 0.0031845067058084613, "phrase": "conceptual_organisation"}, {"score": 0.002943147037670826, "phrase": "algebraic_graph_transformation_rules"}, {"score": 0.0024891269874339553, "phrase": "implementation_nature"}, {"score": 0.002233301265743633, "phrase": "long-term_project"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": [""], "paper_abstract": "Program transformation is currently de facto restricted to abstract syntax tree rewriting. However, many program transformation patterns, in particular in the realm of high-performance code generation, can more naturally be understood and expressed as graph transformations. We describe the conceptual organisation of a system based on application of algebraic graph transformation rules to data-flow and control-flow graphs, and outline the work, both theoretical and of implementation nature, that still needs to be done to realise this long-term project. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Towards \"mouldable code\" via nested code graph transformation", "paper_id": "WOS:000338266900011"}