{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "static_defect_detection"}, {"score": 0.049435104149514145, "phrase": "software_testing"}, {"score": 0.034762647822704884, "phrase": "suspicious_statements"}, {"score": 0.03047446884731441, "phrase": "test-data_generation"}, {"score": 0.004654642380553263, "phrase": "important_technique"}, {"score": 0.0044692705329574, "phrase": "software_systems"}, {"score": 0.003850299959557491, "phrase": "effective_test_data"}, {"score": 0.0037219886365287085, "phrase": "test-data_generation_technique"}, {"score": 0.0035016702571862165, "phrase": "static_defect_detection_analysis"}, {"score": 0.0030783143919343972, "phrase": "test_data"}, {"score": 0.0028184476518849015, "phrase": "constraint_satisfaction_problem"}, {"score": 0.002724428781940696, "phrase": "case_study"}, {"score": 0.0025284524249379265, "phrase": "simple_comparison"}, {"score": 0.002427549902743566, "phrase": "line_tool"}, {"score": 0.002237637525225501, "phrase": "junit_factory"}, {"score": 0.0021049977753042253, "phrase": "fault_detection"}], "paper_keywords": ["test-data generation", " suspicious statements", " software testing", " constraint satisfaction problem"], "paper_abstract": "Software testing is an important technique to assure the quality of software systems, especially high-confidence systems. To automate the process of software testing, many automatic test-data generation techniques have been proposed. To generate effective test data, we propose a test-data generation technique guided by static defect detection in this paper. Using static defect detection analysis, our approach first identifies a set of suspicious statements which are likely to contain faults, then generates test data to cover these suspicious statements by converting the problem of test-data generation to the constraint satisfaction problem. We performed a case study to validate the effectiveness of our approach, and made a simple comparison with another test-data generation on-line tool, JUnit Factory. The results show that, compared with JUnit Factory, our approach generates fewer test data that are competitive on fault detection.", "paper_title": "Test-Data Generation Guided by Static Defect Detection", "paper_id": "WOS:000265041400010"}