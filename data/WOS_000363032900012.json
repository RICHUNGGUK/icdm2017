{"auto_keywords": [{"score": 0.04226242611520467, "phrase": "automatic_generation"}, {"score": 0.040464845026801276, "phrase": "mbt"}, {"score": 0.00481495049065317, "phrase": "empirical_comparison"}, {"score": 0.004634552430216732, "phrase": "performance_testing"}, {"score": 0.0045547927862194856, "phrase": "testing_tools"}, {"score": 0.004414653335578912, "phrase": "software_testing_activity"}, {"score": 0.004308630865024719, "phrase": "different_techniques"}, {"score": 0.004104132253183181, "phrase": "model-based_testing"}, {"score": 0.004005537264228818, "phrase": "testing_artifacts"}, {"score": 0.003964007795174772, "phrase": "software_models"}, {"score": 0.0038957429132649175, "phrase": "main_benefits"}, {"score": 0.003378385493203297, "phrase": "cr-based_tools"}, {"score": 0.0033317342432676385, "phrase": "user_interaction"}, {"score": 0.0032971676471625646, "phrase": "system_under_test"}, {"score": 0.0032067276476968032, "phrase": "recorded_test"}, {"score": 0.0030756833977949273, "phrase": "experimental_study"}, {"score": 0.0029705677977833857, "phrase": "mbt_and_cr-based_tools"}, {"score": 0.0026209522797963447, "phrase": "performance_testers"}, {"score": 0.0025937408242280757, "phrase": "performance_test_engineers"}, {"score": 0.002531342785762364, "phrase": "m.sc"}, {"score": 0.0023776656246300063, "phrase": "performance_test_scripts"}, {"score": 0.0023043558058824572, "phrase": "simple_testing_tasks"}, {"score": 0.002248899833549883, "phrase": "cr-based_tool"}, {"score": 0.002202427244004817, "phrase": "mbt_tool"}, {"score": 0.0021049977753042253, "phrase": "testing_tasks"}], "paper_keywords": ["Empirical study", " Experimental study", " Model-based testing", " Script generation", " Testing automation", " Performance testing"], "paper_abstract": "A variety of testing tools has been developed to support and automate the software testing activity. Some of them may use different techniques such as Model-based Testing (MBT) or Capture and Replay (CR). Model-based Testing is a technique for automatic generation of testing artifacts based on software models. One of the main benefits of using MBT is related to the easiness of maintaining models over code; hence, it is likely that using models as a source for automatic generation of scripts requires less effort and reduces the number of faults. Otherwise, CR-based tools basically record the user interaction with the System Under Test (SUT) and then playback the recorded test. This paper presents our effort on setting up and running an experimental study performed in order to evaluate the effort to use MBT and CR-based tools to generate performance scripts. Thus, we apply an MBT and a CR approaches for the purpose of evaluation with respect to the effort to generate scripts and scenarios from the perspective of the performance testers and the performance test engineers in the context of undergraduates, M.Sc. and Ph.D. students, performance testers and performance test engineers for the generation of performance test scripts and scenarios. Our results indicate that, for simple testing tasks, the effort of using a CR-based tool was lower than using an MBT tool, but as the complexity or size of the activities of the testing tasks increases, the advantage of using MBT increased significantly.", "paper_title": "An empirical comparison of model-based and capture and replay approaches for performance testing", "paper_id": "WOS:000363032900012"}