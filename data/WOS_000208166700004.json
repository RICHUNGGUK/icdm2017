{"auto_keywords": [{"score": 0.04879655533384408, "phrase": "perl"}, {"score": 0.00481495049065317, "phrase": "fpga-based_perl_compatible_regular_expressions"}, {"score": 0.00464976086880886, "phrase": "regular_expressions"}, {"score": 0.004507667881645218, "phrase": "mainstream_signature_based_network_intrusion_detection_systems"}, {"score": 0.00440394242852293, "phrase": "known_attack_signatures"}, {"score": 0.004336115760817672, "phrase": "polymorphic_worms"}, {"score": 0.004236321075918639, "phrase": "underlying_string_matching_engine"}, {"score": 0.004122781047853192, "phrase": "network_packet"}, {"score": 0.004090901264701185, "phrase": "pcre"}, {"score": 0.004012271808564447, "phrase": "traditional_regular_expressions"}, {"score": 0.003950453462399077, "phrase": "advanced_features"}, {"score": 0.003874512990986722, "phrase": "pattern_matching"}, {"score": 0.0038296485293910026, "phrase": "performance_bottleneck"}, {"score": 0.003800026771283179, "phrase": "software-based_nidss"}, {"score": 0.0037414662674652805, "phrase": "big_portion"}, {"score": 0.0036411406244705557, "phrase": "payload_inspection"}, {"score": 0.003557283483525861, "phrase": "unacceptable_packet_drop_rate"}, {"score": 0.0034753508746887957, "phrase": "unexamined_packets"}, {"score": 0.003435092524339692, "phrase": "security_hole"}, {"score": 0.0033429545815200825, "phrase": "hardware_acceleration"}, {"score": 0.0032031180198375283, "phrase": "marginal_performance"}, {"score": 0.003129317057177867, "phrase": "hardware_approaches"}, {"score": 0.0031050953733360825, "phrase": "fpga-based_acceleration_engines"}, {"score": 0.003045355729156972, "phrase": "new_signatures"}, {"score": 0.002817639725689939, "phrase": "complete_set"}, {"score": 0.0027958237350835607, "phrase": "malicious_signatures"}, {"score": 0.002763415176377921, "phrase": "pcres"}, {"score": 0.002731381261399358, "phrase": "fpga_chip"}, {"score": 0.0026788122684116224, "phrase": "space_consuming_components"}, {"score": 0.0026069066266394118, "phrase": "constrained_repetitions"}, {"score": 0.0023654615987859402, "phrase": "basic_components"}, {"score": 0.0023289568500915207, "phrase": "configurable_logic_block"}, {"score": 0.0022841153001549193, "phrase": "space_usage"}, {"score": 0.00224013518726087, "phrase": "basic_pcre_blocks"}, {"score": 0.002154693685426657, "phrase": "experimental_results"}, {"score": 0.0021214346747442363, "phrase": "proposed_scheme"}, {"score": 0.0021049977753042253, "phrase": "existing_designs"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Security", " Network intrusion detection", " FPGA", " string matching", " regular expression"], "paper_abstract": "With their expressiveness and simplicity, Perl compatible regular expressions (PCREs) have been adopted in mainstream signature based network intrusion detection systems (NIDSs) to describe known attack signatures, especially for polymorphic worms. NIDSs rely on an underlying string matching engine that simulates PCREs to inspect each network packet. PCRE is a superset of traditional regular expressions, and provides advanced features. However, this pattern matching becomes a performance bottleneck of software-based NIDSs, causing a big portion of their execution time to be dedicated to payload inspection, which results in an unacceptable packet drop rate. The penetration of these unexamined packets creates a security hole in such systems. Over the past decade, hardware acceleration for the pattern matching has been studied extensively and a marginal performance has been achieved. Among hardware approaches, FPGA-based acceleration engines provide great flexibility because new signatures can be compiled and programmed into their reconfigurable architecture. As more and more malicious signatures are discovered, it becomes harder to map a complete set of malicious signatures specified in PCREs to an FPGA chip. One of the space consuming components is the counter used in the constrained repetitions for PCREs. Therefore, we propose a space efficient SelectRAM counter for PCREs that use counting. The design takes advantage of the basic components contained in a configurable logic block, and thus optimizes space usage. A set of basic PCRE blocks has been built in hardware to implement PCREs. Experimental results show that the proposed scheme outperforms existing designs by at least fivefold.", "paper_title": "Space Optimization on Counters for FPGA-Based Perl Compatible Regular Expressions", "paper_id": "WOS:000208166700004"}