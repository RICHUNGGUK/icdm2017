{"auto_keywords": [{"score": 0.04953663923501098, "phrase": "tiny_embedded_devices"}, {"score": 0.010766223218497479, "phrase": "ram"}, {"score": 0.00481495049065317, "phrase": "java_call_stack_design"}, {"score": 0.004548253531664032, "phrase": "large_feature-rich_programs"}, {"score": 0.0041517954514423625, "phrase": "useful_operation"}, {"score": 0.004035107125458193, "phrase": "wireless_sensor_applications"}, {"score": 0.0038114397487574838, "phrase": "call_stack_redesign"}, {"score": 0.003725470458263889, "phrase": "efficient_use"}, {"score": 0.003683213029483699, "phrase": "ram_storage"}, {"score": 0.003641433168173135, "phrase": "cpu_cycles"}, {"score": 0.0035796471115594553, "phrase": "java_program"}, {"score": 0.0034988876789164235, "phrase": "wireless_sensor_mote"}, {"score": 0.0034004869983267085, "phrase": "application_programs"}, {"score": 0.0031393948330209255, "phrase": "large_number"}, {"score": 0.0029148831519944358, "phrase": "frequent_ram_allocations"}, {"score": 0.002706383680762465, "phrase": "critical_improvements"}, {"score": 0.0026003455833291124, "phrase": "small_amount"}, {"score": 0.0025416235470290286, "phrase": "limited_battery_life"}, {"score": 0.0024005409468262203, "phrase": "complex_multi-threaded_object_oriented_program"}, {"score": 0.0021908807203548345, "phrase": "resulting_savings"}, {"score": 0.0021413855297794946, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "wide_variety"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Performance", " Wireless Sensor Networks", " Call Stack", " Memory Management", " JVM", " Java Virtual Machine", " TakaTuka"], "paper_abstract": "The ability of tiny embedded devices to run large feature-rich programs is typically constrained by the amount of memory installed on such devices. Furthermore, the useful operation of these devices in wireless sensor applications is limited by their battery life. This paper presents a call stack redesign targeted at an efficient use of RAM storage and CPU cycles by a Java program running on a wireless sensor mote. Without compromising the application programs, our call stack redesign saves 30% of RAM, on average, evaluated over a large number of benchmarks. On the same set of benchmarks, our design also avoids frequent RAM allocations and deallocations, resulting in average 80% fewer memory operations and 23% faster program execution. These may be critical improvements for tiny embedded devices that are equipped with small amount of RAM and limited battery life. However, our call stack redesign is equally effective for any complex multi-threaded object oriented program developed for desktop computers. We describe the redesign, measure its performance and report the resulting savings in RAM and execution time for a wide variety of programs.", "paper_title": "Rethinking Java Call Stack Design for Tiny Embedded Devices", "paper_id": "WOS:000307580000001"}