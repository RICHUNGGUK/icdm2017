{"auto_keywords": [{"score": 0.048222474581311896, "phrase": "program_faults"}, {"score": 0.041748810603257275, "phrase": "suspicious_code"}, {"score": 0.03515585983779111, "phrase": "bp_neural_network"}, {"score": 0.00481495049065317, "phrase": "bp_neural_network-based"}, {"score": 0.004795955374639942, "phrase": "effective_fault_localization."}, {"score": 0.004758188582347737, "phrase": "program_debugging"}, {"score": 0.004720717782144015, "phrase": "fault_localization"}, {"score": 0.0046650615456476155, "phrase": "exact_locations"}, {"score": 0.00450198136261303, "phrase": "ad-hoc_approach"}, {"score": 0.004413846562278824, "phrase": "programmers'_intuitive_guesswork"}, {"score": 0.004276390289178831, "phrase": "better_way"}, {"score": 0.004192653260742387, "phrase": "well-justified_method"}, {"score": 0.004126840854872329, "phrase": "case_studies"}, {"score": 0.003904495523681369, "phrase": "possible_fault_locations"}, {"score": 0.003536720212056521, "phrase": "software_risk_analysis"}, {"score": 0.003508834578859094, "phrase": "cost_prediction"}, {"score": 0.0034674164050273568, "phrase": "reliability_estimation"}, {"score": 0.0032546105164772995, "phrase": "input-output_relationship"}, {"score": 0.0030913302090179967, "phrase": "corresponding_outputs"}, {"score": 0.002947868524740683, "phrase": "coverage_data"}, {"score": 0.0029246121262946384, "phrase": "statement_coverage"}, {"score": 0.0026911959223982727, "phrase": "trained_network"}, {"score": 0.0026175952455594277, "phrase": "executable_statement"}, {"score": 0.00246657044320953, "phrase": "descending_order"}, {"score": 0.0022696277881969896, "phrase": "different_programs"}, {"score": 0.0022428042503686053, "phrase": "siemens_suite"}, {"score": 0.0022162970216404927, "phrase": "unix_suite"}, {"score": 0.0021049977753042253, "phrase": "bp_neural_network-based_fault_localization_method"}], "paper_keywords": ["Fault localization", " program debugging", " BP (Back-Propagation) neural network", " suspiciousness of code", " successful test", " failed test"], "paper_abstract": "In program debugging, fault localization identifies the exact locations of program faults. Finding these faults using an ad-hoc approach or based only on programmers' intuitive guesswork can be very time consuming. A better way is to use a well-justified method, supported by case studies for its effectiveness, to automatically identify and prioritize suspicious code for an examination of possible fault locations. To do so, we propose the use of a back-propagation (BP) neural network, a machine learning model which has been successfully applied to software risk analysis, cost prediction, and reliability estimation, to help programmers effectively locate program faults. A BP neural network is suitable for learning the input-output relationship from a set of data, such as the inputs and the corresponding outputs of a program. We first train a BP neural network with the coverage data (statement coverage in our case) and the execution result (success or failure) collected from executing a program, and then we use the trained network to compute the suspiciousness of each executable statement, a in terms of its likelihood of containing faults. Suspicious code is ranked in descending order based on its suspiciousness. Programmers will examine such code from the top of the rank to identify faults. Four case studies on different programs (the Siemens suite, the Unix suite, grep and gzip) are conducted. Our results suggest that a BP neural network-based fault localization method is effective in locating program faults.", "paper_title": "BP NEURAL NETWORK-BASED EFFECTIVE FAULT LOCALIZATION", "paper_id": "WOS:000269249400006"}