{"auto_keywords": [{"score": 0.03750553927857153, "phrase": "sblci"}, {"score": 0.02819827616624647, "phrase": "logical_components"}, {"score": 0.0058321427181328945, "phrase": "iterative_scheme"}, {"score": 0.004634799977448855, "phrase": "software_design_phase"}, {"score": 0.004576253356889219, "phrase": "important_way"}, {"score": 0.0044424917428102445, "phrase": "graph_partitioning"}, {"score": 0.00440563352688313, "phrase": "clustering"}, {"score": 0.004330941771573385, "phrase": "crud"}, {"score": 0.004240116703465252, "phrase": "fca-based_methods"}, {"score": 0.004081385289516914, "phrase": "early_stage"}, {"score": 0.004046923261950549, "phrase": "software_design"}, {"score": 0.0038953958723049287, "phrase": "classical_clustering_techniques"}, {"score": 0.003813669883040509, "phrase": "expert_judgment"}, {"score": 0.003639835714755229, "phrase": "novel_method"}, {"score": 0.0036090884921108086, "phrase": "component_identification"}, {"score": 0.002994449398035894, "phrase": "customized_ga"}, {"score": 0.002944039482467119, "phrase": "cohesion_and_coupling_metrics"}, {"score": 0.0028457440091791252, "phrase": "ga_operators"}, {"score": 0.0027978304423349246, "phrase": "cohesive_component_concept"}, {"score": 0.0026363807171515255, "phrase": "high-level_components"}, {"score": 0.002603012037901889, "phrase": "first_iteration"}, {"score": 0.0025375331660958665, "phrase": "next_iterations"}, {"score": 0.0024947959375982614, "phrase": "low-level_sub-components"}, {"score": 0.0024320326084093465, "phrase": "previous_iterations"}, {"score": 0.0022434880661725493, "phrase": "better_alternative"}, {"score": 0.0021593396036472777, "phrase": "existing_component_identification_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Logical component identification", " Search-based software design", " Genetic algorithm"], "paper_abstract": "Context: Identifying suitable components during the software design phase is an important way to obtain more maintainable software. Many methods including Graph Partitioning, Clustering-based, CRUD-based, and FCA-based methods have been proposed to identify components at an early stage of software design. However, most of these methods use classical clustering techniques, which rely on expert judgment. Objective: In this paper, we propose a novel method for component identification, called SBLCI (Search-Based Logical Component Identification), which is based on GA (genetic algorithm), and complies with an iterative scheme to obtain logical components. Method: SBLCI identifies logical components of a system from its analysis models using a customized GA, which considers cohesion and coupling metrics as its fitness function, and has four novel guided GA operators based on the cohesive component concept. In addition, SBLCI has an iterative scheme in which it initially identifies high-level components in the first iteration. Then, in the next iterations, it identifies low-level sub-components for each identified component in previous iterations. Results: We evaluated the effectiveness of SBLCI with three real-world cases. Results revealed that SBLCI is a better alternative for identifying logical components and sub-components in comparison with existing component identification methods. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "An evolutionary approach to identify logical components", "paper_id": "WOS:000341902600003"}