{"auto_keywords": [{"score": 0.04371887194895359, "phrase": "rewrite_rules"}, {"score": 0.00481495049065317, "phrase": "proof_assistant"}, {"score": 0.004697655699119423, "phrase": "curry-howard_isomorphism"}, {"score": 0.0045832786445773755, "phrase": "coq"}, {"score": 0.004230068512904886, "phrase": "arbitrary_set"}, {"score": 0.004076352180903171, "phrase": "underlying_formal_system"}, {"score": 0.0034720284451902083, "phrase": "logical_consistency"}, {"score": 0.0024116163689723354, "phrase": "dependent_pattern_matching_schemes"}, {"score": 0.0023673193616134637, "phrase": "coquand"}, {"score": 0.0023095087175944496, "phrase": "mcbride"}, {"score": 0.0021049977753042253, "phrase": "standard_pattern_matching"}], "paper_keywords": ["term rewriting", " calculus of constructions", " logical consistency", " higher-order rewriting", " higher-order logic", " type theory", " lambda calculus"], "paper_abstract": "Adding rewriting to a proof assistant based on the Curry-Howard isomorphism, such as Coq, may greatly improve usability of the tool. Unfortunately adding an arbitrary set of rewrite rules may render the underlying formal system undecidable and inconsistent. While ways to ensure termination and confluence, and hence decidability of type-checking, have already been studied to some extent, logical consistency has got little attention so far. In this paper we show that consistency is a consequence of canonicity, which in turn follows from the assumption that all functions defined by rewrite rules are complete. We provide a sound and terminating, but necessarily incomplete algorithm to verify this property. The algorithm accepts all definitions that follow dependent pattern matching schemes presented by Coquand and studied by McBride in his PhD thesis. It also accepts many definitions by rewriting including rules which depart from standard pattern matching.", "paper_title": "CONSISTENCY AND COMPLETENESS OF REWRITING IN THE CALCULUS OF CONSTRUCTIONS", "paper_id": "WOS:000262643100008"}