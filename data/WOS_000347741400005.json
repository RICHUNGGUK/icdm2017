{"auto_keywords": [{"score": 0.010365350157698034, "phrase": "dynamic_types"}, {"score": 0.008482822195880759, "phrase": "evl_framework"}, {"score": 0.004592128194844475, "phrase": "common_programming_problems"}, {"score": 0.004497899823062428, "phrase": "different_mechanisms"}, {"score": 0.00421410521089045, "phrase": "language_feature"}, {"score": 0.004139850082354509, "phrase": "general_and_flexible_way"}, {"score": 0.00378767277402891, "phrase": "virtual_function_dispatch"}, {"score": 0.0036122174327316054, "phrase": "so-called_function_comparison_operator"}, {"score": 0.0035485301437669656, "phrase": "symmetric_and_asymmetric_dispatch_algorithms"}, {"score": 0.0034143536023161403, "phrase": "class_inheritance"}, {"score": 0.003314591878914152, "phrase": "predicate_dispatch"}, {"score": 0.0032755054812060444, "phrase": "dedicated_fco"}, {"score": 0.003032405563826263, "phrase": "new_functions"}, {"score": 0.0029877604856619806, "phrase": "dispatch_tables"}, {"score": 0.0029437707610254255, "phrase": "cache_strategies"}, {"score": 0.0027577621502315594, "phrase": "non-intrusive_reflection_library"}, {"score": 0.0027010719929751, "phrase": "dynamic_class_loading"}, {"score": 0.002669200981678889, "phrase": "policy-based_class_templates"}, {"score": 0.0026455440999251503, "phrase": "virtual_but_not_repeated_inheritance"}, {"score": 0.00260657976055413, "phrase": "type_compatibility"}, {"score": 0.002530359917257626, "phrase": "function_calls"}, {"score": 0.002434588227798036, "phrase": "selected_function"}, {"score": 0.0024130056662967293, "phrase": "requested_tuple"}, {"score": 0.0022874602835499195, "phrase": "error-code_strategy"}, {"score": 0.0022337748928022887, "phrase": "dedicated_policy_class"}, {"score": 0.002168432656901106, "phrase": "standard_virtual_functions"}, {"score": 0.002142832962924141, "phrase": "fast_cache"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Multi-methods", " Multiple dispatch", " Runtime type information", " Object-oriented programming", " C plus"], "paper_abstract": "Multi-methods are functions whose calls at runtime are resolved depending on the dynamic types of more than one argument. They are useful for common programming problems. However, while many languages provide different mechanisms to implement them in one way or another, there is still, to the best of our knowledge, no library or language feature that handles them in a general and flexible way. In this paper, we present the EVL (Extended Virtual function Library) framework which provides a set of classes in C++ aiming at solving this problem. The EVL framework provides a generalization of virtual function dispatch through the number of dimensions and the selection of the function to invoke using a so-called Function Comparison Operator. Our library provides both symmetric and asymmetric dispatch algorithms that can be refined by the programmer to include criteria other than class inheritance. For instance, the EVL framework provides multi-methods with predicate dispatch by defining a dedicated FCO based not only on the dynamic types of the arguments but also on their values. This flexibility greatly helps to resolve ambiguities without having to define new functions. Our multi-methods also unify dispatch tables and caching by introducing cache strategies for which the implementation is a balance between memory and speed. To define multi-methods in C++, we implement a non-intrusive reflection library providing fast dynamic casting and supporting dynamic class loading. Our multi-methods are policy-based class templates that support virtual but not repeated inheritance. They check the type compatibility of functions at compile-time, preserve type-safety and resolve function calls at runtime by invoking the cache or updating it by computing the selected function for the requested tuple of types. By default, our multi-methods handle dispatch errors at runtime by throwing exceptions but an error-code strategy can be set up by defining a dedicated policy class. Performance of our multi-methods is comparable with that of standard virtual functions when configured with fast cache. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "EVL: A framework for multi-methods in C plus", "paper_id": "WOS:000347741400005"}