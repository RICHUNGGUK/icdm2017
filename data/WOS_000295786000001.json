{"auto_keywords": [{"score": 0.04734547775045444, "phrase": "incoming_data"}, {"score": 0.00481495049065317, "phrase": "anytime_stream_mining"}, {"score": 0.0047547526023100665, "phrase": "streaming_data"}, {"score": 0.004597861947580946, "phrase": "clustering_results"}, {"score": 0.004157446556371582, "phrase": "single_pass"}, {"score": 0.00403709306806495, "phrase": "possibly_varying_inter-arrival_times"}, {"score": 0.0035444736871640147, "phrase": "current_result"}, {"score": 0.0032726467814278345, "phrase": "parameter-free_algorithm"}, {"score": 0.0031512402798625056, "phrase": "data_stream"}, {"score": 0.003098733069760013, "phrase": "best_use"}, {"score": 0.0030089355635315005, "phrase": "current_constraints"}, {"score": 0.0027203027216256013, "phrase": "greater_importance"}, {"score": 0.0026637384761565605, "phrase": "efficient_and_effective_handling"}, {"score": 0.0026083473154448326, "phrase": "clustree"}, {"score": 0.0024800509241747013, "phrase": "stream_summaries"}, {"score": 0.0023779596230982234, "phrase": "aggregation_mechanisms"}, {"score": 0.0023481578019624843, "phrase": "novel_descent_strategies"}, {"score": 0.002309000874224222, "phrase": "clustering_result"}, {"score": 0.002289667393538803, "phrase": "slower_streams"}, {"score": 0.002122775261369663, "phrase": "different_stream_characteristics"}, {"score": 0.0021049977753042253, "phrase": "accurate_and_scalable_anytime_stream_clustering"}], "paper_keywords": ["Data mining", " Clustering", " Anytime", " Stream mining"], "paper_abstract": "Clustering streaming data requires algorithms that are capable of updating clustering results for the incoming data. As data is constantly arriving, time for processing is limited. Clustering has to be performed in a single pass over the incoming data and within the possibly varying inter-arrival times of the stream. Likewise, memory is limited, making it impossible to store all data. For clustering, we are faced with the challenge of maintaining a current result that can be presented to the user at any given time. In this work, we propose a parameter-free algorithm that automatically adapts to the speed of the data stream. It makes best use of the time available under the current constraints to provide a clustering of the objects seen up to that point. Our approach incorporates the age of the objects to reflect the greater importance of more recent data. For efficient and effective handling, we introduce the ClusTree, a compact and self-adaptive index structure for maintaining stream summaries. Additionally we present solutions to handle very fast streams through aggregation mechanisms and propose novel descent strategies that improve the clustering result on slower streams as long as time permits. Our experiments show that our approach is capable of handling a multitude of different stream characteristics for accurate and scalable anytime stream clustering.", "paper_title": "The ClusTree: indexing micro-clusters for anytime stream mining", "paper_id": "WOS:000295786000001"}