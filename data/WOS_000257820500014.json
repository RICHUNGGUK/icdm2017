{"auto_keywords": [{"score": 0.04728879811253772, "phrase": "running_time"}, {"score": 0.00796678097732275, "phrase": "hot_methods"}, {"score": 0.00747955139617664, "phrase": "hot_method"}, {"score": 0.00481495049065317, "phrase": "embedded_java"}, {"score": 0.004798937560652061, "phrase": "just-in-time_compilers"}, {"score": 0.004610866942420572, "phrase": "compilation_overhead"}, {"score": 0.004474645041899596, "phrase": "precise_and_efficient_hot_spot_detection"}, {"score": 0.004371470939474398, "phrase": "cold_methods"}, {"score": 0.00420008205995114, "phrase": "small_runtime_overhead"}, {"score": 0.003981928669805484, "phrase": "long-running_method"}, {"score": 0.0038513524381387364, "phrase": "precise_measurement"}, {"score": 0.003700279655380723, "phrase": "embedded_systems"}, {"score": 0.003404244237372396, "phrase": "sun's_hotspot_heuristic_counts_loop_iterations"}, {"score": 0.003314591878914152, "phrase": "loop_sizes"}, {"score": 0.0032925489316383955, "phrase": "method_sizes"}, {"score": 0.0032272929113113203, "phrase": "static_analysis_heuristic"}, {"score": 0.0031006232333900055, "phrase": "heavy-cost_bytecodes"}, {"score": 0.002795867549039675, "phrase": "imprecise_hot_spot_detection"}, {"score": 0.0027404283412788997, "phrase": "new_hot_spot_detection"}, {"score": 0.0026240423738883704, "phrase": "relatively_low_overhead"}, {"score": 0.002529421374791293, "phrase": "simple_arithmetic_calculation"}, {"score": 0.0024875444192203485, "phrase": "precise_count"}, {"score": 0.0024627509513027923, "phrase": "interpreted_bytecodes"}, {"score": 0.002405853977978678, "phrase": "static_analysis_technique"}, {"score": 0.0023424328921363585, "phrase": "huge_execution_time"}, {"score": 0.0023036445575469046, "phrase": "static_prediction"}, {"score": 0.002220551141101661, "phrase": "proposed_dynamic_estimation_technique"}, {"score": 0.0021476098263617954, "phrase": "performance_benefit"}, {"score": 0.0021049977753042253, "phrase": "hotspot_heuristic"}], "paper_keywords": ["performance", " experimentation", " languages", " Java just-in-time compilation", " hot spot detection", " Sun's HotSpot heuristic", " Java virtual machine", " J2ME CDC"], "paper_abstract": "Most Java just-in-time compilers (JITC) try to compile only hot methods since the compilation overhead is part of the running time. This requires precise and efficient hot spot detection, which includes distinguishing hot methods from cold methods, detecting them as early as possible, and paying a small runtime overhead for detection. A hot method could be identified by measuring its running time during interpretation since a long-running method is likely to be a hot method. However, precise measurement of the running time during execution is too expensive, especially in embedded systems, so many counter-based heuristics have been proposed to estimate it. The Simple heuristic counts only method invocations without any consideration of loops [1], while Sun's HotSpot heuristic counts loop iterations as well, but does not consider loop sizes or method sizes [2,14]. The static analysis heuristic estimates the running time of a method by statically analyzing loops or heavy-cost bytecodes but does not measure their dynamic counts [3]. Although the overhead of these heuristics is low, they do not estimate the running time precisely, which may lead to imprecise hot spot detection. This paper proposes a new hot spot detection heuristic which can estimate the running time more precisely than others with a relatively low overhead. It dynamically counts only important bytecodes interpreted, but with a simple arithmetic calculation it can obtain the precise count of all interpreted bytecodes. We also propose employing a static analysis technique to predict those hot methods which spend a huge execution time once invoked. This static prediction can allow compiling these methods at their first-invocation, complementing the proposed dynamic estimation technique. We implemented both, which led to a performance benefit of 10% compared to the HotSpot heuristic.", "paper_title": "Enhanced hot spot detection heuristics for embedded java just-in-time compilers", "paper_id": "WOS:000257820500014"}