{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "delimited_and_composable_control"}, {"score": 0.004736563452994885, "phrase": "production_programming_environment"}, {"score": 0.004508942069742167, "phrase": "composable_continuations"}, {"score": 0.004387225575447685, "phrase": "theoretical_programming_language_research"}, {"score": 0.0038470175104007524, "phrase": "operators'_existence"}, {"score": 0.00380511089035825, "phrase": "production_programming_languages"}, {"score": 0.003485824905231454, "phrase": "demonstrably_useful_constructs"}, {"score": 0.0029736479837154843, "phrase": "viable_implementation"}, {"score": 0.002925149105307855, "phrase": "production_system"}, {"score": 0.0027691111795848183, "phrase": "substantial_design_element"}, {"score": 0.002679501909303057, "phrase": "formal_model"}, {"score": 0.0026070408483940535, "phrase": "significant_practical_exploration"}, {"score": 0.002536534348967786, "phrase": "resulting_version"}, {"score": 0.002508867228980776, "phrase": "plt_scheme"}, {"score": 0.0024679299547216956, "phrase": "expressive_combination"}, {"score": 0.002388043660169452, "phrase": "dynamic_binding"}, {"score": 0.002349073225500705, "phrase": "exception_handling"}, {"score": 0.002285527382381719, "phrase": "additional_operators"}, {"score": 0.0022482261385133617, "phrase": "intended_benefits"}, {"score": 0.002223696715077018, "phrase": "existing_control_operators"}, {"score": 0.0021049977753042253, "phrase": "control_operators"}], "paper_keywords": ["design", " languages"], "paper_abstract": "Operators for delimiting control and for capturing composable continuations litter the landscape of theoretical programming language research. Numerous papers explain their advantages, how the operators explain each other (or don't), and other aspects of the operators' existence. Production programming languages, however, do not support these operators, partly because their relationship to existing and demonstrably useful constructs-such as exceptions and dynamic binding-remains relatively unexplored. In this paper, we report on our effort of translating the theory of delimited and composable control into a viable implementation for a production system. The report shows how this effort involved a substantial design element, including work with a formal model, as well as significant practical exploration and engineering. The resulting version of PLT Scheme incorporates the expressive combination of delimited and composable control alongside dynamic-wind, dynamic binding, and exception handling. None of the additional operators subvert the intended benefits of existing control operators, so that programmers can freely mix and match control operators.", "paper_title": "Adding delimited and composable control to a production programming environment", "paper_id": "WOS:000253409900019"}