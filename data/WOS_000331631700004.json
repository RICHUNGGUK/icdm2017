{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "stack_machines"}, {"score": 0.00827195151612697, "phrase": "logarithmic_space"}, {"score": 0.004946001912294592, "phrase": "lower_bounds"}, {"score": 0.004780780407878596, "phrase": "space-bounded_stack_machine"}, {"score": 0.0047468516620285525, "phrase": "regular_turing_machine"}, {"score": 0.004713162564945179, "phrase": "read-only_input_tape"}, {"score": 0.004613669920975784, "phrase": "stack"}, {"score": 0.004409986283958706, "phrase": "turing_machines"}, {"score": 0.0040678331568263105, "phrase": "borodin_et_al"}, {"score": 0.003906804492585634, "phrase": "significant_new_lower_bounds"}, {"score": 0.0036727235025069828, "phrase": "input_tape"}, {"score": 0.003612125115868367, "phrase": "explicit_permuted_inner_product_function"}, {"score": 0.0035779458261087486, "phrase": "stack_machine_computing"}, {"score": 0.003436242862104006, "phrase": "input_size"}, {"score": 0.0033875770020590796, "phrase": "logarithmic_space_stack_machines"}, {"score": 0.003161870571621082, "phrase": "single_pass"}, {"score": 0.003117524237869549, "phrase": "parity"}, {"score": 0.0030438277325793932, "phrase": "nc."}, {"score": 0.003007846570831067, "phrase": "allender"}, {"score": 0.002895535087931938, "phrase": "widely_believed_complexity_assumption"}, {"score": 0.0028477233301258042, "phrase": "novel_communication_complexity_reduction"}, {"score": 0.0028140548269469934, "phrase": "already_wide_range"}, {"score": 0.002767584756033483, "phrase": "communication_complexity"}, {"score": 0.0025954008219792337, "phrase": "-bounded_stack_machine"}, {"score": 0.002576941349223576, "phrase": "related_function"}, {"score": 0.002492513778739949, "phrase": "combining_function"}, {"score": 0.0024281181691350085, "phrase": "known_communication_complexity_lower_bounds"}, {"score": 0.0023152577218214804, "phrase": "similar_trade-off_lower_bounds"}, {"score": 0.0022824314760583834, "phrase": "constant_number"}, {"score": 0.0022715929119140194, "phrase": "pass-bounded_external_tapes"}, {"score": 0.002181514206602054, "phrase": "complexity_assumption"}, {"score": 0.002171153824638682, "phrase": "e_pspace."}, {"score": 0.0021352776064254195, "phrase": "unbounded_stack"}, {"score": 0.0021150431408355104, "phrase": "main_technical_novelty"}], "paper_keywords": ["Turing Machine", " stack", " AuxPDA", " lower bound", " communication complexity", " space bound", " reversals", " streaming"], "paper_abstract": "A space-bounded Stack Machine is a regular Turing Machine with a read-only input tape, several space-bounded read-write work tapes, and an unbounded stack. Stack Machines with a logarithmic space bound have been connected to other classical models of computation, such as polynomial-time Turing Machines (P) (Cook in J Assoc Comput Mach 18:4-18, 1971) and polynomial size, polylogarithmic depth, bounded fan-in circuits (NC) e.g., Borodin et al. (SIAM J Comput 18, 1989). In this paper, we present significant new lower bounds and techniques for Stack Machines. This comes in the form of a trade-off lower bound between space and number of passes over the input tape. Specifically, we give an explicit permuted inner product function such that any Stack Machine computing this function requires either space or number of passes for every constant , where N is the input size. In the case of logarithmic space Stack Machines, this yields an unconditional lower bound for the number of passes. To put this result in perspective, we note that Stack Machines with logarithmic space and a single pass over the input can compute Parity, Majority, as well as certain languages outside NC. The latter follows from Allender (J Assoc Comput Mach 36:912-928, 1989), conditional on the widely believed complexity assumption that PSPACE EXP. Our technique is a novel communication complexity reduction, thereby extending the already wide range of models of computation for which communication complexity can be used to obtain lower bounds. Informally, we show that a k-player number-in-hand (NIH) communication protocol for a base function f can efficiently simulate a space- and pass-bounded Stack Machine for a related function F, which consists of several \"permuted\" instances of f, bundled together by a combining function h. Trade-off lower bounds for Stack Machines then follow from known communication complexity lower bounds. The framework for this reduction was given by Beame & Huynh-Ngoc (2008), who used it to obtain similar trade-off lower bounds for Turing Machines with a constant number of pass-bounded external tapes. We also prove that the latter cannot efficiently simulate Stack Machines, conditional on the complexity assumption that E PSPACE. It is the treatment of an unbounded stack which constitutes the main technical novelty in our communication complexity reduction.", "paper_title": "Tradeoff lower lounds for stack machines", "paper_id": "WOS:000331631700004"}