{"auto_keywords": [{"score": 0.04937387161038601, "phrase": "grid_rpc_system"}, {"score": 0.015719716506582538, "phrase": "data_management_layer"}, {"score": 0.01337328441071986, "phrase": "large_amount"}, {"score": 0.013242742069449556, "phrase": "common_data"}, {"score": 0.004605258779434384, "phrase": "useful_and_intuitive_programming_interface"}, {"score": 0.0045599093158915326, "phrase": "master-worker_type_applications"}, {"score": 0.0043183186953102805, "phrase": "parameter_search_programs"}, {"score": 0.00395017798595193, "phrase": "rpc_model"}, {"score": 0.0035249212996297363, "phrase": "poor_performance"}, {"score": 0.0032241994368246065, "phrase": "data_transfer"}, {"score": 0.0031297538950335233, "phrase": "rpc_programming"}, {"score": 0.0030081030319492343, "phrase": "prototype_data_transfer_layer"}, {"score": 0.0029490571526071016, "phrase": "omnirpc"}, {"score": 0.0028484940955893134, "phrase": "parallel_programming"}, {"score": 0.002806449337145999, "phrase": "grid_environment"}, {"score": 0.0027513507830537165, "phrase": "efficient_data_transmission"}, {"score": 0.0026443691099806003, "phrase": "intermediate_relay_servers"}, {"score": 0.002301572462091142, "phrase": "proposed_system"}, {"score": 0.0022675820982741347, "phrase": "synthetic_workloads"}, {"score": 0.002234092591045251, "phrase": "real_grid_application"}, {"score": 0.002168586864007222, "phrase": "omnistorage"}, {"score": 0.0021049977753042253, "phrase": "omnirpc_applications"}], "paper_keywords": [""], "paper_abstract": "A grid RPC system provides a useful and intuitive programming interface for master-worker type applications in a grid environment. In many grid applications, such as parameter search programs, both master and workers are often required to have a large amount of common data. Since in the RPC model the data must be transferred from the master directly to each worker, the master is sometimes a bottleneck, resulting in poor performance. In order to improve the performance in such cases, we propose a model to decouple the data transfer by a data management layer from the RPC programming. We have designed and implemented a prototype data transfer layer called OmniStorage to OmniRPC, which is a grid RPC system for parallel programming in a grid environment. This allows efficient data transmission of a large amount of data by placing intermediate relay servers, taking the network topology into account, to route the communication and cache the common data in the server. We have evaluated the performance of the proposed system by using synthetic workloads and a real grid application. The results show that OmniStorage can improve the performance of OmniRPC applications compared to the case of using only OmniRPC.", "paper_title": "Performance improvement by data management layer in a grid RPC system", "paper_id": "WOS:000237540300033"}