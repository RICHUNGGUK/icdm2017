{"auto_keywords": [{"score": 0.0407704748864984, "phrase": "core_language"}, {"score": 0.01028780852103207, "phrase": "xml"}, {"score": 0.006418592825337006, "phrase": "path_errors"}, {"score": 0.00481495049065317, "phrase": "xml._xml_database_query_languages"}, {"score": 0.004563691742821759, "phrase": "relatively_little_attention"}, {"score": 0.0044430006374681285, "phrase": "language_design"}, {"score": 0.004325487452170154, "phrase": "xml_update_language"}, {"score": 0.004289206028759951, "phrase": "flux"}, {"score": 0.00419229472352669, "phrase": "functional_updates"}, {"score": 0.004045068727683462, "phrase": "functional_programming_languages"}, {"score": 0.003991196463806465, "phrase": "prior_work"}, {"score": 0.0037997077863530897, "phrase": "clear_operational_semantics"}, {"score": 0.003474694300991964, "phrase": "recursive_types"}, {"score": 0.0034437574674180365, "phrase": "update_procedures"}, {"score": 0.0033525843225012918, "phrase": "high-level_source_language"}, {"score": 0.003149094460617212, "phrase": "meaningful_type_errors"}, {"score": 0.0028667159745494933, "phrase": "\"dead\"_subexpressions"}, {"score": 0.0028032928749970026, "phrase": "useful_work"}, {"score": 0.0026095920086044145, "phrase": "optimization_opportunities"}, {"score": 0.0023333173799963795, "phrase": "source_update_language"}, {"score": 0.0021526564019119466, "phrase": "path-error_analysis"}, {"score": 0.0021049977753042253, "phrase": "dead-code_analysis"}], "paper_keywords": ["languages", " XML", " update languages", " type systems", " static analysis"], "paper_abstract": "XML database query languages have been studied extensively, but XML database updates have received relatively little attention, and pose many challenges to language design. We are developing an XML update language called FLUX, which stands for FunctionaL Updates for XML, drawing upon ideas from functional programming languages. In prior work, we have introduced a core language for FLUX with a clear operational semantics and a sound, decidable static type system based on regular expression types. Our initial proposal had several limitations. First, it lacked support for recursive types or update procedures. Second, although a high-level source language can easily be translated to the core language, it is difficult to propagate meaningful type errors from the core language back to the source. Third, certain updates are well-formed yet contain path errors, or \"dead\" subexpressions which never do any useful work. It would be useful to detect path errors, since they often represent errors or optimization opportunities. In this paper, we address all three limitations. Specifically, we present an improved, sound type system that handles recursion. We also formalize a source update language and give a translation to the core language that preserves and reflects typability. We also develop a path-error analysis (a form of dead-code analysis) for updates.", "paper_title": "FLUX: FunctionaL Updates for XML", "paper_id": "WOS:000259436700003"}