{"auto_keywords": [{"score": 0.02962492740417451, "phrase": "normal_computation_process"}, {"score": 0.00481495049065317, "phrase": "fluid_rendering"}, {"score": 0.00458940888106061, "phrase": "adaptive_particle_shape"}, {"score": 0.004327981760540394, "phrase": "real-time_fluid_rendering"}, {"score": 0.004059673618719782, "phrase": "local_density"}, {"score": 0.003995226376780718, "phrase": "rendering_process"}, {"score": 0.003910879154656061, "phrase": "large_radius"}, {"score": 0.003869373085652601, "phrase": "peaceful_fluid_particle"}, {"score": 0.0037474693720823643, "phrase": "bumpy_surface_artifact"}, {"score": 0.003668333531296882, "phrase": "small_radius"}, {"score": 0.0035908627899097407, "phrase": "obviously_spherical_shape"}, {"score": 0.003422462630994095, "phrase": "fluid_particle"}, {"score": 0.003261934055562235, "phrase": "weber_number"}, {"score": 0.0031760175583084274, "phrase": "fast_moving_particles"}, {"score": 0.003108911488613549, "phrase": "ellipsoidal_appearance"}, {"score": 0.00304321897427383, "phrase": "splash_particle_shape"}, {"score": 0.003010893527930816, "phrase": "turbulent_flow"}, {"score": 0.002900426826591769, "phrase": "adaptive_normal_calculation_method"}, {"score": 0.0028391271282216758, "phrase": "numerical_calculation_errors"}, {"score": 0.0027495914857929584, "phrase": "sampling_interval"}, {"score": 0.0026345758986796703, "phrase": "viewing_distance"}, {"score": 0.0025243592424524764, "phrase": "fuzzy_edges"}, {"score": 0.002497531381123025, "phrase": "double_image_effect"}, {"score": 0.0024578219177450876, "phrase": "fixed_sampling_interval"}, {"score": 0.002244410443944976, "phrase": "computing_time"}, {"score": 0.0021049977753042253, "phrase": "real-time_fluid_rendering_application"}], "paper_keywords": ["Fluid rendering", " Splatting", " Particle shape", " Normal calculation"], "paper_abstract": "In this paper, we present an adaptive particle shape setting method in Lagrangian-approach based screen space splatting algorithm in real-time fluid rendering. The particle radius will be adjusted according to its Weber number and local density in the rendering process so that a large radius of peaceful fluid particle can help to eliminate a bumpy surface artifact, and a small radius can prevent the obviously spherical shape of particles in splash. The shape of fluid particle will be controlled adaptively on the basis of Weber number too, so that fast moving particles could have an ellipsoidal appearance which describes the splash particle shape in turbulent flow persuasively. We also propose an adaptive normal calculation method to avoid the numerical calculation errors in the normal computation process. The sampling interval will be set in accordance with the viewing distance from camera to the fluid so that fuzzy edges or double image effect in a fixed sampling interval normal computation process could be prevented. Both of the two approaches introduced in this paper take only small amount of computing time and will have little impact on the time consuming property of a real-time fluid rendering application.", "paper_title": "Adaptive particle shape setting and normal calculation methods in fluid rendering", "paper_id": "WOS:000338317400009"}