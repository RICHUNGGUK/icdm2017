{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "daptable_processes"}, {"score": 0.004473982381245469, "phrase": "dynamic_process_evolution"}, {"score": 0.004372442291178139, "phrase": "direct_ways"}, {"score": 0.004214729542986473, "phrase": "run_ning_processes"}, {"score": 0.004007083686875716, "phrase": "adaptation_capabilities"}, {"score": 0.0037231102027070724, "phrase": "dynamic_update"}, {"score": 0.0035722806911457545, "phrase": "wide_range"}, {"score": 0.0035395987202335223, "phrase": "evolvability_patterns"}, {"score": 0.0035072146967082083, "phrase": "concurrent_processes"}, {"score": 0.003427540517249369, "phrase": "core_calculus"}, {"score": 0.0033961782274326948, "phrase": "adaptable_processes"}, {"score": 0.0032886455096627324, "phrase": "bounded_and_eventual_adaptation"}, {"score": 0.003140888248194296, "phrase": "consecutive_erroneous_states"}, {"score": 0.002427732996314194, "phrase": "dynamic_and_static_topologies"}, {"score": 0.0023507916951658455, "phrase": "different_evolvability_patterns"}, {"score": 0.002297327670408112, "phrase": "specification_language"}, {"score": 0.002183938718432764, "phrase": "fundamental_properties"}, {"score": 0.002163930783583212, "phrase": "evolvable_processes"}, {"score": 0.002124461969404541, "phrase": "richer_languages"}, {"score": 0.0021049977753042253, "phrase": "evolvability_capabilities"}], "paper_keywords": ["Process calculi", " dynamic evolution", " expressiveness and decidability", " adaptation", " verification", " evolvable processes"], "paper_abstract": "We propose the concept of a daptable processes as a way of overcoming the limitations that process calculi have for describing patterns of dynamic process evolution. Such patterns rely on direct ways of controlling the behavior and location of run ning processes, and so they are at the heart of the adaptation capabilities present in many modern concurrent systems. Adaptable processes have a location and are sensible to actions of dynamic update at runtime; this allows to express a wide range of evolvability patterns for concurrent processes. We introduce a core calculus of adaptable processes and propose two verification problems for them: bounded and eventual adaptation. While the former ensures that the number of consecutive erroneous states that can be traversed during a computation is bound by some given number k, the latter ensures that if the system enters into a state with errors then a state without errors will be eventually reached. We study the (un) decidability of these two problems in several variants of the calculus, which result from considering dynamic and static topologies of adaptable processes as well as different evolvability patterns. Rather than a specification language, our calculus intends to be a basis for investigating the fundamental properties of evolvable processes and for developing richer languages with evolvability capabilities.", "paper_title": "ADAPTABLE PROCESSES", "paper_id": "WOS:000315381600017"}