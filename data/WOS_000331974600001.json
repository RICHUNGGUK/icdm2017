{"auto_keywords": [{"score": 0.0344525139183746, "phrase": "migration_overhead"}, {"score": 0.01425980496300719, "phrase": "sram"}, {"score": 0.013878499946917212, "phrase": "energy_efficiency"}, {"score": 0.01218391368355013, "phrase": "hybrid_cache"}, {"score": 0.00481495049065317, "phrase": "stt-ram-based_hybrid_cache"}, {"score": 0.00465944657565638, "phrase": "hybrid_cache_architecture"}, {"score": 0.004558564684763264, "phrase": "spin-transfer_torque"}, {"score": 0.004176321608449849, "phrase": "hybrid_caches"}, {"score": 0.004130842663662047, "phrase": "migration-based_techniques"}, {"score": 0.003997343989408636, "phrase": "migration_technique"}, {"score": 0.0039322149318145845, "phrase": "write-intensive_and_read-intensive_data"}, {"score": 0.0038893841455214153, "phrase": "stt-ram"}, {"score": 0.0035826234811610316, "phrase": "extra_reads"}, {"score": 0.0035049738376240567, "phrase": "data_movements"}, {"score": 0.0034478392374444177, "phrase": "stencil_loops"}, {"score": 0.0033546701239540555, "phrase": "data_dependencies"}, {"score": 0.0030899524399043863, "phrase": "interleaved_read"}, {"score": 0.0030395624703152212, "phrase": "memory_access_pattern"}, {"score": 0.002989991779830814, "phrase": "memory_block"}, {"score": 0.0028932554846476718, "phrase": "loop_retiming_framework"}, {"score": 0.0027389142053945246, "phrase": "interleaved_memory_access_pattern"}, {"score": 0.002679501909303057, "phrase": "proposed_loop_retiming_technique"}, {"score": 0.0026357877401570764, "phrase": "interleaved_memory_accesses"}, {"score": 0.00236199235951202, "phrase": "experimental_results"}, {"score": 0.002273025527678093, "phrase": "proposed_methods"}, {"score": 0.0021994343316143125, "phrase": "migration_number"}, {"score": 0.0021049977753042253, "phrase": "cache_dynamic_energy"}], "paper_keywords": ["Embedded systems", " energy", " hybrid cache", " loop retiming", " migration", " STT-RAM"], "paper_abstract": "Recently hybrid cache architecture consisting of both spin-transfer torque RAM (STT-RAM) and SRAM has been proposed for energy efficiency. In hybrid caches, migration-based techniques have been proposed. A migration technique dynamically moves write-intensive and read-intensive data between STT-RAM and SRAM to explore the advantages of hybrid cache. Meanwhile, migrations also introduce extra reads and writes during data movements. For stencil loops with read and write data dependencies, we observe that migration overhead is significant, and migrations closely correlate to the interleaved read and write memory access pattern in a memory block. This paper proposes a loop retiming framework during compilation to reduce the migration overhead by changing the interleaved memory access pattern. With the proposed loop retiming technique, the interleaved memory accesses can be significantly reduced so that migration overhead is mitigated, and energy efficiency of hybrid cache is significantly improved. The experimental results have shown that, with the proposed methods, on average, the migration number is reduced up to 27.1% and the cache dynamic energy is reduced up to 14.0%.", "paper_title": "Migration-Aware Loop Retiming for STT-RAM-Based Hybrid Cache in Embedded Systems", "paper_id": "WOS:000331974600001"}