{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "assembly-level_data-flow_graphs"}, {"score": 0.0046046429665581555, "phrase": "larger_project"}, {"score": 0.004403480614319231, "phrase": "declarative_assembly_language"}, {"score": 0.004211069233133584, "phrase": "multiple_code_paths"}, {"score": 0.004118026552723285, "phrase": "particular_quantities"}, {"score": 0.00399714680711765, "phrase": "instruction_scheduler"}, {"score": 0.0038798015183611275, "phrase": "execution_resources"}, {"score": 0.0038224221344037236, "phrase": "superscalar_execution"}, {"score": 0.0037101871762082153, "phrase": "key_design_points"}, {"score": 0.0034954725617970294, "phrase": "data_flow"}, {"score": 0.002901124599876666, "phrase": "assembly_instructions"}, {"score": 0.0027741761880779535, "phrase": "theoretical_foundations"}, {"score": 0.0027331033178323145, "phrase": "data-flow_graph_theory"}, {"score": 0.002613487968156893, "phrase": "also_relational_aspects"}, {"score": 0.0025556529150386168, "phrase": "functorial_semantics"}, {"score": 0.002499094513009327, "phrase": "kleene_category"}, {"score": 0.0023368018449680295, "phrase": "data-flow-with-choice_aspects"}, {"score": 0.0021049977753042253, "phrase": "necessary_correctness_proofs"}], "paper_keywords": [""], "paper_abstract": "As part of a larger project, we have built a declarative assembly language that enables us to specify multiple code paths to compute particular quantities, giving the instruction scheduler more flexibility in balancing execution resources for superscalar execution. Since the key design points for this language are to only describe data flow, have built-in facilities for redundancies, and still have code that looks like assembler, by virtue of consisting mainly of assembly instructions, we are basing the theoretical foundations on data-flow graph theory, and have to accommodate also relational aspects. Using functorial semantics into a Kleene category of \"hyper-paths\", we formally capture the data-flow-with-choice aspects of this language and its implementation, providing also the framework for the necessary correctness proofs.", "paper_title": "Control-flow semantics for assembly-level data-flow graphs", "paper_id": "WOS:000238185200012"}