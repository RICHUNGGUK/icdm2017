{"auto_keywords": [{"score": 0.04369208689750059, "phrase": "ao"}, {"score": 0.00481495049065317, "phrase": "crosscutting_concerns"}, {"score": 0.004769444094319619, "phrase": "requirements_engineering"}, {"score": 0.004635477242873163, "phrase": "generated_benefits"}, {"score": 0.0043786774510943625, "phrase": "complexity_reduction"}, {"score": 0.004337276328199398, "phrase": "current_systems"}, {"score": 0.004000741805312148, "phrase": "software_development_complexity"}, {"score": 0.003944112858235306, "phrase": "oo_advantages"}, {"score": 0.003815064377019477, "phrase": "ao_software_development"}, {"score": 0.0036207206487324506, "phrase": "early_aspect"}, {"score": 0.0035865371101832556, "phrase": "ea"}, {"score": 0.0034526191487098093, "phrase": "early_stages"}, {"score": 0.003419943984098415, "phrase": "software_development"}, {"score": 0.003355515315708125, "phrase": "domain_analysis_requirements_specification"}, {"score": 0.0032149396890830575, "phrase": "newest_software_engineering_paradigms"}, {"score": 0.0031393948330209224, "phrase": "new_studies"}, {"score": 0.0029511579080222137, "phrase": "improved_methods"}, {"score": 0.0028409576481842457, "phrase": "new_way"}, {"score": 0.0026705669656375197, "phrase": "systematic_activities"}, {"score": 0.002632716358833918, "phrase": "early_consideration"}, {"score": 0.002570817338292482, "phrase": "crosscutting_functional_requirements"}, {"score": 0.0025103699913760057, "phrase": "non-functional_requirements"}, {"score": 0.002186712881521657, "phrase": "development_cycle"}, {"score": 0.0021251363422701446, "phrase": "broadly_scoped_properties"}, {"score": 0.0021049977753042253, "phrase": "system_development"}], "paper_keywords": ["early aspects", " requirements engineering", " decomposition", " composition", " methodologies"], "paper_abstract": "In spite of the generated benefits, Object-Oriented (OO) paradigm seems reaching its limits, regarding complexity reduction of current systems. In this context, the Aspect Oriented (AO) comes up as an alternative to reduce software development complexity while keeping OO advantages. Needs for investigating methodologies of AO Software Development have emerged a long with AO. As an example, Early Aspect (EA) aims to identify aspects on the early stages of software development, such as domain analysis requirements specification and architectural design. Being one of the newest software engineering paradigms, AO emphasizes that new studies and experiments should be carefully carried out, in order to establish improved methods, techniques and tools applicable to this new way of development. In this paper, we discuss a sequence of systematic activities toward an early consideration of specifying and separating crosscutting Functional Requirements (FRs) and Non-Functional Requirements (NFRs) by the adoption of use-cases to model systems. This approach would make it possible to identify and resolve conflicts between requirements earlier in the development cycle and can promote traceability of broadly scoped properties throughout system development, maintenance and evolution.", "paper_title": "Modularization of crosscutting concerns in requirements engineering", "paper_id": "WOS:000257681100003"}