{"auto_keywords": [{"score": 0.04494891748893781, "phrase": "domain_boundary"}, {"score": 0.00481495049065317, "phrase": "efficient_and_good_delaunay"}, {"score": 0.004775335634705251, "phrase": "random_points"}, {"score": 0.004660125571119387, "phrase": "poisson"}, {"score": 0.004445316841017889, "phrase": "disk-free_subregion"}, {"score": 0.004241992646082069, "phrase": "delaunay"}, {"score": 0.004115267130977749, "phrase": "empty_circles"}, {"score": 0.00409264825541748, "phrase": "intermediate_triangulations"}, {"score": 0.0040366412779632085, "phrase": "circle_centers"}, {"score": 0.004014452814186653, "phrase": "unconstrained_angles"}, {"score": 0.0039269071382230444, "phrase": "biased_cdt_methods"}, {"score": 0.003820144626025562, "phrase": "one-dimensional_maximal_poisson_disk_sampling"}, {"score": 0.003516898780234098, "phrase": "random_meshes"}, {"score": 0.0034306925765832633, "phrase": "fracture_simulations"}, {"score": 0.0033837135367113004, "phrase": "mesh_edges"}, {"score": 0.003355834430771482, "phrase": "deterministic_meshes"}, {"score": 0.003328184259386487, "phrase": "non-physical_phenomena"}, {"score": 0.0032826043188559613, "phrase": "random_meshes_aids_simulation_validation"}, {"score": 0.003264547032549398, "phrase": "poisson-disk_triangulations"}, {"score": 0.0032287289440915187, "phrase": "graphics_rendering_artifacts"}, {"score": 0.0031845067058084583, "phrase": "blue-noise_property"}, {"score": 0.0031495640320537252, "phrase": "two-dimensional_domains"}, {"score": 0.002851790448644913, "phrase": "maximal_poisson_distribution"}, {"score": 0.0028360962841331634, "phrase": "n_output_points"}, {"score": 0.0027437235598539904, "phrase": "sampling_radius"}, {"score": 0.0025963890234079333, "phrase": "nearly_linear"}, {"score": 0.0025537472239953807, "phrase": "similar_subroutine"}, {"score": 0.002363806685815014, "phrase": "square_background_mesh"}, {"score": 0.0022679195103377124, "phrase": "constant_time"}, {"score": 0.002224510044064184, "phrase": "gpu_implementations"}, {"score": 0.0021404817947723166, "phrase": "triangle"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Computer-aided design, engineering, and manufacturing", " Computational geometry and topology", " Product and assembly modeling", " Geophysical applications", " Mesh generation"], "paper_abstract": "We present a Conforming Delaunay Triangulation (CDT) algorithm based on maximal Poisson disk sampling. Points are unbiased, meaning the probability of introducing a vertex in a disk-free subregion is proportional to its area, except in a neighborhood of the domain boundary. In contrast, Delaunay refinement CDT algorithms place points dependent on the geometry of empty circles in intermediate triangulations, usually near the circle centers. Unconstrained angles in our mesh are between 30 and 120, matching some biased CDT methods. Points are placed on the boundary using a one-dimensional maximal Poisson disk sampling. Any triangulation method producing angles bounded away from 0 and 180 must have some bias near the domain boundary to avoid placing vertices infinitesimally close to the boundary. Random meshes are preferred for some simulations, such as fracture simulations where cracks must follow mesh edges, because deterministic meshes may introduce non-physical phenomena. An ensemble of random meshes aids simulation validation. Poisson-disk triangulations also avoid some graphics rendering artifacts, and have the blue-noise property. We mesh two-dimensional domains that may be non-convex with holes, required points, and multiple regions in contact. Our algorithm is also fast and uses little memory. We have recently developed a method for generating a maximal Poisson distribution of n output points, where n = Theta(Area/r(2)) and r is the sampling radius. It takes O(n) memory and O(n log n) expected time; in practice the time is nearly linear. This, or a similar subroutine, generates our random points. Except for this subroutine, we provably use O(n) time and space. The subroutine gives the location of points in a square background mesh. Given this, the neighborhood of each point can be meshed independently in constant time. These features facilitate parallel and GPU implementations. Our implementation works well in practice as illustrated by several examples and comparison to Triangle. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Efficient and good Delaunay meshes from random points", "paper_id": "WOS:000297495200021"}