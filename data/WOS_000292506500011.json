{"auto_keywords": [{"score": 0.04828362906607965, "phrase": "olap"}, {"score": 0.006417776564046314, "phrase": "olap."}, {"score": 0.00481495049065317, "phrase": "native_join-index"}, {"score": 0.004678940805063634, "phrase": "online_analytical_processing"}, {"score": 0.004482063543727601, "phrase": "increasing_requirements"}, {"score": 0.004439445472040688, "phrase": "massive_volume_analytical_applications"}, {"score": 0.004293434614435972, "phrase": "in-memory_processing"}, {"score": 0.004192078165260057, "phrase": "join_indexes"}, {"score": 0.004132411680987228, "phrase": "high_performance_storage_media"}, {"score": 0.00409310463335204, "phrase": "efficient_storage_models"}, {"score": 0.0038834787946979863, "phrase": "olap_applications"}, {"score": 0.003791763445590174, "phrase": "vital_limitation"}, {"score": 0.0037556843869894566, "phrase": "main-memory_database_based_olap"}, {"score": 0.003632080001489739, "phrase": "high_performance"}, {"score": 0.003580355398511932, "phrase": "large_size"}, {"score": 0.0033969001271637934, "phrase": "novel_memory_dimension_table_model"}, {"score": 0.0033166379485150507, "phrase": "primary_keys"}, {"score": 0.00326939082861424, "phrase": "dimension_table"}, {"score": 0.003176899769744057, "phrase": "dimensional_tuple_addresses"}, {"score": 0.00311669276800628, "phrase": "higher_performance"}, {"score": 0.003087017178815267, "phrase": "dimensional_tuple_access"}, {"score": 0.0029996699429582835, "phrase": "dimension_tables"}, {"score": 0.002859533151305368, "phrase": "directly_dimensional_tuple"}, {"score": 0.0028187792953857957, "phrase": "ddta"}, {"score": 0.00263612191603326, "phrase": "query_processing"}, {"score": 0.002598543802992702, "phrase": "memory_dimension_table"}, {"score": 0.0025737890313763407, "phrase": "direct_dimensional_tuple_access"}, {"score": 0.0024417832296664698, "phrase": "predicate_tree"}, {"score": 0.002406968743305622, "phrase": "predicate_operation_length"}, {"score": 0.002372649454733251, "phrase": "useless_predicate_processing"}, {"score": 0.00230546852838578, "phrase": "ddta-join_algorithm"}, {"score": 0.0022509365210787993, "phrase": "simulated_row-store_main_memory_query_processing"}, {"score": 0.0022188370388602813, "phrase": "open-source_column-store"}, {"score": 0.0021252533072727707, "phrase": "reduced_join_cost"}, {"score": 0.0021049977753042253, "phrase": "simple_yet_efficient_query_processing"}], "paper_keywords": ["directly dimensional tuple accessing (DDTA)", " DDTA-JOIN", " native join-index", " predicate tree"], "paper_abstract": "The performance of online analytical processing (OLAP) is critical for meeting the increasing requirements of massive volume analytical applications. Typical techniques, such as in-memory processing, column-storage, and join indexes focus on high performance storage media, efficient storage models, and reduced query processing. While they effectively perform OLAP applications, there is a vital limitation: main-memory database based OLAP (MMOLAP) cannot provide high performance for a large size data set. In this paper, we propose a novel memory dimension table model, in which the primary keys of the dimension table can be directly mapped to dimensional tuple addresses. To achieve higher performance of dimensional tuple access, we optimize our storage model for dimension tables based on OLAP query workload features. We present directly dimensional tuple accessing (DDTA) based join (DDTA-JOIN), a technique to optimize query processing on the memory dimension table by direct dimensional tuple access. We also contribute by proposing an optimization of the predicate tree to shorten predicate operation length by pruning useless predicate processing. Our experimental results show that the DDTA-JOIN algorithm is superior to both simulated row-store main memory query processing and the open-source column-store main memory database MonetDB, thanks to the reduced join cost and simple yet efficient query processing.", "paper_title": "Improving performance by creating a native join-index for OLAP", "paper_id": "WOS:000292506500011"}