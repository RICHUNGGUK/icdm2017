{"auto_keywords": [{"score": 0.04635910410147262, "phrase": "service_replicas"}, {"score": 0.040437138629194604, "phrase": "service_providers"}, {"score": 0.02459638390246772, "phrase": "proposed_algorithms"}, {"score": 0.00481495049065317, "phrase": "virtual_servers_co-migration_for_mobile_accesses"}, {"score": 0.0042250952759280225, "phrase": "mobile_batch-request_demands"}, {"score": 0.004160612392068268, "phrase": "effective_way"}, {"score": 0.003988293689448734, "phrase": "service_access_latency"}, {"score": 0.003957735532719663, "phrase": "end_users"}, {"score": 0.003882356585452982, "phrase": "network_costs"}, {"score": 0.003692997523960715, "phrase": "bulk-data_transfer"}, {"score": 0.003636605792981828, "phrase": "overall_monetary_costs"}, {"score": 0.0034993519231560637, "phrase": "service_migration"}, {"score": 0.003445906915464945, "phrase": "overall_costs"}, {"score": 0.0033802431627410223, "phrase": "co-migration_algorithm_migk"}, {"score": 0.003215295260684715, "phrase": "randomized_algorithm"}, {"score": 0.003178384350932103, "phrase": "competitive_cost"}, {"score": 0.0030583717270715556, "phrase": "k_services"}, {"score": 0.0030232568024943455, "phrase": "static_n-node_network"}, {"score": 0.0029656229252935417, "phrase": "maximal_ratio"}, {"score": 0.002931569771634119, "phrase": "migration_costs"}, {"score": 0.002875678729214611, "phrase": "neighbor_nodes"}, {"score": 0.0027458373015999916, "phrase": "maximum_wired_transmission_cost"}, {"score": 0.0027143009946473937, "phrase": "wireless_link_cost"}, {"score": 0.0025521085778978042, "phrase": "parallel_dynamic_programming"}, {"score": 0.0025229249489703677, "phrase": "dp"}, {"score": 0.0024368411484675823, "phrase": "sampling_techniques"}, {"score": 0.002381169982803105, "phrase": "optimal_dp_results"}, {"score": 0.0022911901892022847, "phrase": "extensive_simulation_studies"}, {"score": 0.002256155453630723, "phrase": "cloud_network_topologies"}, {"score": 0.0021625417261202603, "phrase": "mobile_access_patterns"}, {"score": 0.0021294699637639564, "phrase": "service_request_sequences"}, {"score": 0.0021049977753042253, "phrase": "cost-effective_way"}], "paper_keywords": ["VM co-migration", " service migration", " mobile access", " branch", " bound algorithm"], "paper_abstract": "In this paper, we study the problem of co-migrating a set of service replicas residing on one or more redundant virtual servers in clouds in order to satisfy a sequence of mobile batch-request demands in a cost effective way. With such a migration, we can not only reduce the service access latency for end users but also minimize the network costs for service providers. The co-migration can be achieved at the cost of bulk-data transfer and increases the overall monetary costs for the service providers. To gain the benefits of service migration while minimizing the overall costs, we propose a co-migration algorithm Migk for multiple servers, each hosting a service replicas. Migk is a randomized algorithm with a competitive cost of O(gamma log n/min{1/k), mu/lambda+mu}) to migrate k services in a static n-node network where gamma is the maximal ratio of the migration costs between any pair of neighbor nodes in the network, and where lambda and mu represent the maximum wired transmission cost and the wireless link cost respectively. For comparison, we also study this problem in its static off-line form by proposing a parallel dynamic programming (hereafter DP) based algorithm that integrates the branch&bound strategy with sampling techniques in order to approximate the optimal DP results. We validate the advantage of the proposed algorithms via extensive simulation studies using various requests patterns and cloud network topologies. Our simulation results show that the proposed algorithms can effectively adapt to mobile access patterns to satisfy the service request sequences in a cost-effective way.", "paper_title": "Virtual Servers Co-Migration for Mobile Accesses: Online versus Off-Line", "paper_id": "WOS:000364856900013"}