{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "internet_applications"}, {"score": 0.004767546015485477, "phrase": "cloud_computing_services"}, {"score": 0.004605258779434384, "phrase": "automatic_scaling_property"}, {"score": 0.004339744430169516, "phrase": "cloud_service_provider"}, {"score": 0.0040491842732233154, "phrase": "cloud_environment"}, {"score": 0.00395017798595193, "phrase": "application_instance"}, {"score": 0.0038919354605673104, "phrase": "virtual_machine"}, {"score": 0.0038536490082748203, "phrase": "vm"}, {"score": 0.003778004256546193, "phrase": "virtualization_technology"}, {"score": 0.0037222908218253054, "phrase": "fault_isolation"}, {"score": 0.0033379819706003885, "phrase": "class_constraint"}, {"score": 0.0032887360307856635, "phrase": "practical_limit"}, {"score": 0.003053159610975692, "phrase": "efficient_semi-online_color_set_algorithm"}, {"score": 0.002724207384182295, "phrase": "experiment_results"}, {"score": 0.0025668646315794947, "phrase": "open_source_implementation"}, {"score": 0.0024916260764216752, "phrase": "normal_qos_five_times"}, {"score": 0.002442693254693416, "phrase": "flash_crowds"}, {"score": 0.002418587525752333, "phrase": "large_scale_simulations"}, {"score": 0.0023130151703068444, "phrase": "decision_time"}, {"score": 0.0021259846592569386, "phrase": "magnitude_improvement"}, {"score": 0.0021049977753042253, "phrase": "traditional_application_placement_algorithms"}], "paper_keywords": ["Cloud computing", " virtualization", " auto scaling", " CCBP", " green computing"], "paper_abstract": "Many Internet applications can benefit from an automatic scaling property where their resource usage can be scaled up and down automatically by the cloud service provider. We present a system that provides automatic scaling for Internet applications in the cloud environment. We encapsulate each application instance inside a virtual machine (VM) and use virtualization technology to provide fault isolation. We model it as the Class Constrained Bin Packing (CCBP) problem where each server is a bin and each class represents an application. The class constraint reflects the practical limit on the number of applications a server can run simultaneously. We develop an efficient semi-online color set algorithm that achieves good demand satisfaction ratio and saves energy by reducing the number of servers used when the load is low. Experiment results demonstrate that our system can improve the throughput by 180% over an open source implementation of Amazon EC2 and restore the normal QoS five times as fast during flash crowds. Large scale simulations demonstrate that our algorithm is extremely scalable: the decision time remains under 4 s for a system with 10 000 servers and 10 000 applications. This is an order of magnitude improvement over traditional application placement algorithms in enterprise environments.", "paper_title": "Automatic Scaling of Internet Applications for Cloud Computing Services", "paper_id": "WOS:000336672600005"}