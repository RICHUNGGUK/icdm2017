{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asynchronous_programs"}, {"score": 0.006877422027306534, "phrase": "task_buffer"}, {"score": 0.00645991579614413, "phrase": "fair_termination_property"}, {"score": 0.0063484782128596035, "phrase": "fair_termination_problem"}, {"score": 0.005620129590898658, "phrase": "posted_tasks"}, {"score": 0.005169335199031225, "phrase": "liveness_properties"}, {"score": 0.005044762997395191, "phrase": "fair_termination"}, {"score": 0.0046176782475198085, "phrase": "popular_technique"}, {"score": 0.004522080178250592, "phrase": "concurrent_interactions"}, {"score": 0.004237732785793817, "phrase": "petri_nets"}, {"score": 0.004173524877260367, "phrase": "non-preemptive_scheduler"}, {"score": 0.004130079333979522, "phrase": "future_point"}, {"score": 0.004058668702112495, "phrase": "decision_procedure"}, {"score": 0.0038787040860731935, "phrase": "asynchronous_program"}, {"score": 0.0038383157378810277, "phrase": "fairness_condition"}, {"score": 0.0037066895459425824, "phrase": "fair_executions"}, {"score": 0.0036680857629458816, "phrase": "fairness_assumptions"}, {"score": 0.0034207673889407003, "phrase": "non-deterministic_branch"}, {"score": 0.003314965171168532, "phrase": "liveness_property"}, {"score": 0.002892920908794289, "phrase": "unbounded_stack"}, {"score": 0.002872783899731766, "phrase": "recursive_calls"}, {"score": 0.0027838831266525773, "phrase": "unbounded_task_buffer"}, {"score": 0.002651015392318126, "phrase": "fair_termination_problems"}, {"score": 0.0025510720021028107, "phrase": "latter_problem"}, {"score": 0.0025333084852052147, "phrase": "presburger_satisfiability"}, {"score": 0.0024721021985994115, "phrase": "multi-threaded_recursive_programs"}, {"score": 0.00227323596233465, "phrase": "related_properties"}, {"score": 0.002249527353528286, "phrase": "fair_non-starvation"}, {"score": 0.0022260654608669593, "phrase": "posted_task"}, {"score": 0.00217987162651941, "phrase": "safety_properties"}, {"score": 0.0021049977753042253, "phrase": "maximum_number"}], "paper_keywords": ["Languages", " Verification", " Reliability", " asynchronous (event-driven) programming", " liveness", " fair termination", " Petri Nets"], "paper_abstract": "Asynchronous or \"event-driven\" programming is a popular technique to efficiently and flexibly manage concurrent interactions. In these programs, the programmer can post tasks that get stored in a task buffer and get executed atomically by a non-preemptive scheduler at a future point. We give a decision procedure for the fair termination property of asynchronous programs. The fair termination problem asks, given an asynchronous program and a fairness condition on its executions, does the program always terminate on fair executions? The fairness assumptions rule out certain undesired bad behaviors, such as where the scheduler ignores a set of posted tasks forever, or where a non-deterministic branch is always chosen in one direction. Since every liveness property reduces to a fair termination property, our decision procedure extends to liveness properties of asynchronous programs. Our decision procedure for the fair termination of asynchronous programs assumes all variables are finite-state. Even though variables are finite-state, asynchronous programs can have an unbounded stack from recursive calls made by tasks, as well as an unbounded task buffer of pending tasks. We show a reduction from the fair termination problem for asynchronous programs to fair termination problems on Petri Nets, and our main technical result is a reduction of the latter problem to Presburger satisfiability. Our decidability result is in contrast to multi-threaded recursive programs, for which liveness properties are undecidable. While we focus on fair termination, we show our reduction to Petri Nets can be used to prove related properties such as fair non-starvation (every posted task is eventually executed) and safety properties such as boundedness (find a bound on the maximum number of posted tasks that can be in the task buffer at any point).", "paper_title": "Verifying Liveness for Asynchronous Programs", "paper_id": "WOS:000272013800010"}