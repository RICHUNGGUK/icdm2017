{"auto_keywords": [{"score": 0.046030203640502004, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "open_type_functions"}, {"score": 0.004312622975366676, "phrase": "open_type-level_functions"}, {"score": 0.003820144626025562, "phrase": "functional_dependencies"}, {"score": 0.003132236287543072, "phrase": "key_technical_challenge"}, {"score": 0.0030638704739988595, "phrase": "entailment_checking"}, {"score": 0.0026543514413663893, "phrase": "complete_algorithm"}, {"score": 0.0025337991705839586, "phrase": "ghc"}, {"score": 0.0024299678474208023, "phrase": "practically-important_variants"}, {"score": 0.0021049977753042253, "phrase": "active_use"}], "paper_keywords": ["algorithms", " languages", " Haskell", " type checking", " type functions", " type families"], "paper_abstract": "We report on an extension of Haskell with open type-level functions and equality constraints that unifies earlier work on GADTs, functional dependencies, and associated types. The contribution of the paper is that we identify and characterise the key technical challenge of entailment checking; and we give a novel, decidable, sound, and complete algorithm to solve it, together with some practically-important variants. Our system is implemented in GHC, and is already in active use.", "paper_title": "Type checking with open type functions", "paper_id": "WOS:000259436700007"}