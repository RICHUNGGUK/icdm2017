{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_component_co-installability"}, {"score": 0.004762202897268383, "phrase": "modern_software_systems"}, {"score": 0.004556901872357751, "phrase": "large_repositories"}, {"score": 0.004265354774450696, "phrase": "fundamental_challenge"}, {"score": 0.0036352070472201086, "phrase": "co-installability_problem"}, {"score": 0.003516898780234098, "phrase": "boolean_satisfiability"}, {"score": 0.00327356326590461, "phrase": "novel_theoretical_framework"}, {"score": 0.0032021226849872054, "phrase": "formally_certified_semantic_preserving_graph-theoretic_transformations"}, {"score": 0.0030470127429039497, "phrase": "concrete_component_repository"}, {"score": 0.0029641011108505785, "phrase": "simpler_structure"}, {"score": 0.00282048824450047, "phrase": "equivalent_co-installability_properties"}, {"score": 0.0026107601878587816, "phrase": "concise_view"}, {"score": 0.0025678829712650437, "phrase": "co-installability_issues"}, {"score": 0.0025257081555100556, "phrase": "original_repository"}, {"score": 0.0023249757987087055, "phrase": "efficient_computation"}, {"score": 0.0022994427535192514, "phrase": "strong_conflicts"}, {"score": 0.0021049977753042253, "phrase": "coq_proof_assistant"}], "paper_keywords": ["Algorithms", " Theory", " Verification", " Component", " dependencies", " conflicts", " co-installability", " package management", " open source"], "paper_abstract": "Modern software systems are built by composing components drawn from large repositories, whose size and complexity is increasing at a very fast pace. A fundamental challenge for the maintainability and the scalability of such software systems is the ability to quickly identify the components that can or cannot be installed together: this is the co-installability problem, which is related to boolean satisfiability and is known to be algorithmically hard. This article develops a novel theoretical framework, based on formally certified semantic preserving graph-theoretic transformations, that allows us to associate to each concrete component repository a much smaller one with a simpler structure, that we call strongly flat, with equivalent co-installability properties. This flat repository can be displayed in a way that provides a concise view of the co-installability issues in the original repository, or used as a basis for various algorithms related to co-installability, like the efficient computation of strong conflicts between components. The proofs contained in this work have been machine checked using the Coq proof assistant.", "paper_title": "On Software Component Co-Installability", "paper_id": "WOS:000326024500007"}