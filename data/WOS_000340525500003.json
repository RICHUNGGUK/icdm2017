{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "resource_exhaustion_exceptions"}, {"score": 0.012183120233819535, "phrase": "leaked_resources"}, {"score": 0.006754389076971972, "phrase": "resource_leaks"}, {"score": 0.0045411156682300695, "phrase": "garbage_collectors"}, {"score": 0.004367228576339114, "phrase": "non-memory_finite_system_resources"}, {"score": 0.004065474891313382, "phrase": "available_resources"}, {"score": 0.0037112756920669593, "phrase": "effective_recovery_approach"}, {"score": 0.0027862576750944277, "phrase": "failure_code"}, {"score": 0.0027323009127771525, "phrase": "resource_collector"}, {"score": 0.002477753633057247, "phrase": "java_programs"}, {"score": 0.0024456516553345966, "phrase": "experimental_results"}, {"score": 0.0022912596877648723, "phrase": "reported_resource_leaks"}, {"score": 0.002160640052461594, "phrase": "average_execution_time_increase"}, {"score": 0.0021049977753042253, "phrase": "negligible_bytecode_size_increase"}], "paper_keywords": ["Failure avoidance", " Resource leaks", " Resource collection", " Exception handling", " Reliability"], "paper_abstract": "Despite the availability of garbage collectors, programmers must manually manage non-memory finite system resources such as file descriptors. Resource leaks can gradually consume all available resources and cause programs to raise resource exhaustion exceptions. However, programmers commonly provide no effective recovery approach for resource exhaustion exceptions, which often causes programs to halt without completing their tasks. In this paper, we propose to automatically recover programs from resource exhaustion exceptions caused by resource leaks. We transform programs to catch resource exhaustion exceptions, collect leaked resources, and then retry the failure code. A resource collector is designed to identify leaked resources and safely release them. We implement our approach for Java programs. Experimental results show that our approach can successfully handle resource exhaustion exceptions caused by reported resource leaks and allow programs to complete their tasks with an average execution time increase of 2.52% and negligible bytecode size increase.", "paper_title": "Automatic recovery from resource exhaustion exceptions by collecting leaked resources", "paper_id": "WOS:000340525500003"}