{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "embedded_processors"}, {"score": 0.004767261858417823, "phrase": "register_file"}, {"score": 0.004581162468419365, "phrase": "soft_errors"}, {"score": 0.004513255056769647, "phrase": "traditional_redundancy_based_schemes"}, {"score": 0.004188459638572375, "phrase": "timing_critical_path"}, {"score": 0.00392586404888927, "phrase": "hottest_blocks"}, {"score": 0.003829290275367182, "phrase": "software_approaches"}, {"score": 0.003661382948704217, "phrase": "previous_approaches"}, {"score": 0.0036070601923916196, "phrase": "instruction_scheduling"}, {"score": 0.0034834098902271626, "phrase": "local_scope"}, {"score": 0.003347259612209552, "phrase": "compiler_approach"}, {"score": 0.003281186608301359, "phrase": "interprocedural_program_analysis"}, {"score": 0.0030600032877646263, "phrase": "protected_memory"}, {"score": 0.0029403531729828574, "phrase": "integer_linear_programming_problem"}, {"score": 0.0027834145465170292, "phrase": "iterative_optimization_method"}, {"score": 0.0027420820738468577, "phrase": "kernighan-lin's_graph"}, {"score": 0.0022913497040895586, "phrase": "code_size_overhead"}, {"score": 0.0021049977753042253, "phrase": "highly_optimized_binaries"}], "paper_keywords": ["Algorithms", " Reliability", " Performance", " Soft error", " register file", " vulnerability", " static analysis", " embedded system", " compilation", " link-time optimization"], "paper_abstract": "Register File (RF) is extremely vulnerable to soft errors, and traditional redundancy based schemes to protect the RF are prohibitive not only because RF is often in the timing critical path of the processor, but also since it is one of the hottest blocks on the chip. Software approaches would be ideal in this case, but previous approaches based on instruction scheduling are only moderately effective due to local scope. In this article we present a compiler approach, based on interprocedural program analysis, to reduce the vulnerability of registers by temporarily writing live variables to protected memory. We formulate the problem as an integer linear programming problem and also present a very efficient heuristic algorithm. Further we present an iterative optimization method based on Kernighan-Lin's graph partitioning algorithm. Our experiments demonstrate that our proposed techniques can reduce the vulnerability of a RF by 33 similar to 37% on average and up to 66%, with a small 2% increase in runtime. In addition, our overhead reduction optimization can effectively reduce the code size overhead, by more than 40% on average, to a mere 5 similar to 6%, compared to highly optimized binaries.", "paper_title": "Software-Based Register File Vulnerability Reduction for Embedded Processors", "paper_id": "WOS:000329135500013"}