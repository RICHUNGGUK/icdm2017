{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code_motion_techniques"}, {"score": 0.004535481695403089, "phrase": "formal_verification_method"}, {"score": 0.0042489946866108895, "phrase": "finite_state_machine"}, {"score": 0.004203031684771239, "phrase": "datapath"}, {"score": 0.004157561334726201, "phrase": "fsmd"}, {"score": 0.0038948525410795517, "phrase": "output_behaviors"}, {"score": 0.003831801113154043, "phrase": "synthesis_step"}, {"score": 0.0033810134162565843, "phrase": "equivalent_finite_path_segments"}, {"score": 0.00295078850927459, "phrase": "uniform_and_nonuniform_code_motion_techniques"}, {"score": 0.002779217021776702, "phrase": "nonuniform_code_motions"}, {"score": 0.0027341763737751467, "phrase": "equivalent_path_segments"}, {"score": 0.002704554429386671, "phrase": "model_checking"}, {"score": 0.0026607205525625995, "phrase": "data-flow_properties"}, {"score": 0.0024386325347607674, "phrase": "equivalence_checking"}, {"score": 0.002386062690026682, "phrase": "appropriate_properties"}, {"score": 0.0023219374444738723, "phrase": "model_checking_tool_nusmv"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["Verification", " Formal verification", " equivalence checking", " FSMD models", " high-level synthesis", " code motion", " model checking"], "paper_abstract": "A formal verification method for checking correctness of code motion techniques is presented in this article. Finite State Machine with Datapath (FSMD) models have been used to represent the input and the output behaviors of each synthesis step. The method introduces cutpoints in one FSMD, visualizes its computations as concatenation of paths from cutpoints to cutpoints, and then identifies equivalent finite path segments in the other FSMD; the process is then repeated with the FSMDs interchanged. Unlike many other reported techniques, the method is capable of verifying both uniform and nonuniform code motion techniques. It has been underlined in this work that for nonuniform code motions, identifying equivalent path segments involves model checking of some data-flow properties. Our method automatically identifies the situations where such properties are needed to be checked during equivalence checking, generates the appropriate properties, and invokes the model checking tool NuSMV to verify them. The correctness and the complexity of the method have been dealt with. Experimental results demonstrate the effectiveness of the method.", "paper_title": "Formal Verification of Code Motion Techniques Using Data-Flow-Driven Equivalence Checking", "paper_id": "WOS:000307079000012"}