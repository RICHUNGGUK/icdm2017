{"auto_keywords": [{"score": 0.03718034097391593, "phrase": "netkat"}, {"score": 0.00481495049065317, "phrase": "growing_interest"}, {"score": 0.004769958800452922, "phrase": "high-level_languages"}, {"score": 0.004182301599359094, "phrase": "network_hardware"}, {"score": 0.004123781267600542, "phrase": "foundational_principles"}, {"score": 0.004009175817816061, "phrase": "semantic_foundation"}, {"score": 0.003953068310598579, "phrase": "language_designers"}, {"score": 0.003807242767474929, "phrase": "new_features"}, {"score": 0.0033377940531761985, "phrase": "solid_mathematical_foundation"}, {"score": 0.0032449610741097992, "phrase": "sound_and_complete_equational_theory"}, {"score": 0.0029260602766930065, "phrase": "sequential_composition_operators"}, {"score": 0.0026633568650501873, "phrase": "canonical_and_well-studied_mathematical_structure"}, {"score": 0.0026260427295996275, "phrase": "kleene"}, {"score": 0.0025649861878775256, "phrase": "kat"}, {"score": 0.0023456351719724957, "phrase": "practical_applications"}, {"score": 0.0023127544795063263, "phrase": "equational_theory"}, {"score": 0.002291089893848235, "phrase": "syntactic_techniques"}, {"score": 0.0022273034991008326, "phrase": "non-interference_properties"}, {"score": 0.0021049977753042253, "phrase": "compilation_algorithms"}], "paper_keywords": ["Software-defined networking", " Frenetic", " Network programming languages", " Domain-specific languages", " Kleene algebra with tests", " NetKAT"], "paper_abstract": "Recent years have seen growing interest in high-level languages for programming networks. But the design of these languages has been largely ad hoc, driven more by the needs of applications and the capabilities of network hardware than by foundational principles. The lack of a semantic foundation has left language designers with little guidance in determining how to incorporate new features, and programmers without a means to reason precisely about their code. This paper presents NetKAT, a new network programming language that is based on a solid mathematical foundation and comes equipped with a sound and complete equational theory. We describe the design of NetKAT, including primitives for filtering, modifying, and transmitting packets; union and sequential composition operators; and a Kleene star operator that iterates programs. We show that NetKAT is an instance of a canonical and well-studied mathematical structure called a Kleene algebra with tests (KAT) and prove that its equational theory is sound and complete with respect to its denotational semantics. Finally, we present practical applications of the equational theory including syntactic techniques for checking reachability, proving non-interference properties that ensure isolation between programs, and establishing the correctness of compilation algorithms.", "paper_title": "NetKAT: Semantic Foundations for Networks", "paper_id": "WOS:000331120500011"}