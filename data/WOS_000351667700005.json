{"auto_keywords": [{"score": 0.043236008352619086, "phrase": "refactoring_operations"}, {"score": 0.00481495049065317, "phrase": "correction_tasks"}, {"score": 0.004767546015485477, "phrase": "chemical_reaction_optimization"}, {"score": 0.003815607281455725, "phrase": "external_behavior"}, {"score": 0.0037593414153801394, "phrase": "large-scale_systems"}, {"score": 0.0031609252620168446, "phrase": "different_criteria"}, {"score": 0.0029344771385297137, "phrase": "existing_refactoring_approaches"}, {"score": 0.0026443691099806003, "phrase": "chemical_reaction_optimization_metaheuristic_search"}, {"score": 0.002592444377471345, "phrase": "suitable_refactoring_solutions"}, {"score": 0.0024306105794630246, "phrase": "fixed_riskiest_code-smells"}, {"score": 0.0023130151703068444, "phrase": "five_medium-"}, {"score": 0.0022901862321082407, "phrase": "large-sized_open-source_systems"}], "paper_keywords": ["Search-based software engineering", " Refactoring, software quality", " Code-smells", " Chemical reaction optimization"], "paper_abstract": "The presence of code-smells increases significantly the cost of maintenance of systems and makes them difficult to change and evolve. To remove code-smells, refactoring operations are used to improve the design of a system by changing its internal structure without altering the external behavior. In large-scale systems, the number of code-smells to fix can be very large and not all of them can be fixed automatically. Thus, the prioritization of the list of code-smells is required based on different criteria such as the risk and importance of classes. However, most of the existing refactoring approaches treat the code-smells to fix with the same importance. In this paper, we propose an approach based on a chemical reaction optimization metaheuristic search to find the suitable refactoring solutions (i.e., sequence of refactoring operations) that maximize the number of fixed riskiest code-smells according to the maintainer's preferences/criteria. We evaluate our approach on five medium- and large-sized open-source systems and seven types of code-smells. Our experimental results show the effectiveness of our approach compared to other existing approaches and three different others metaheuristic searches.", "paper_title": "Prioritizing code-smells correction tasks using chemical reaction optimization", "paper_id": "WOS:000351667700005"}