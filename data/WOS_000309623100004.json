{"auto_keywords": [{"score": 0.048152320835937894, "phrase": "spsp"}, {"score": 0.036698837788888675, "phrase": "acs-spsp"}, {"score": 0.00481495049065317, "phrase": "software_project"}, {"score": 0.004717125879761534, "phrase": "ant_colony_optimization"}, {"score": 0.004668957916795845, "phrase": "software_project_scheduling_problem"}, {"score": 0.004481132747216135, "phrase": "important_and_challenging_problems"}, {"score": 0.004390060342250211, "phrase": "software_project_managers"}, {"score": 0.004322967486451877, "phrase": "highly_competitive_software_industry"}, {"score": 0.0041490029730869345, "phrase": "np-hard_problem"}, {"score": 0.004085579055228594, "phrase": "increasing_numbers"}, {"score": 0.0037057255600764475, "phrase": "effective_algorithm"}, {"score": 0.003361069456060196, "phrase": "software_projects"}, {"score": 0.0030798711656591948, "phrase": "task_nodes"}, {"score": 0.0030171910207671205, "phrase": "construction_graph"}, {"score": 0.002986329509791943, "phrase": "aco."}, {"score": 0.002971016979295967, "phrase": "six_domain-based_heuristics"}, {"score": 0.002851301751761804, "phrase": "task_efforts"}, {"score": 0.0027505037762786087, "phrase": "task_importance"}, {"score": 0.0026945086500597304, "phrase": "heuristic_strategies"}, {"score": 0.0026261108615242557, "phrase": "allocated_dedications"}, {"score": 0.002456272788591051, "phrase": "genetic_algorithm"}, {"score": 0.002357249810661667, "phrase": "experimental_results"}, {"score": 0.002309242063033298, "phrase": "proposed_algorithm"}, {"score": 0.0022390533383717715, "phrase": "higher_hit_rates"}, {"score": 0.0021709933368474223, "phrase": "previous_genetic_algorithm_solution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Scheduling", " Automatic software management", " Software project scheduling", " Ant colony optimization"], "paper_abstract": "Software project scheduling problem (SPSP) is one of the important and challenging problems faced by the software project managers in the highly competitive software industry. As the problem is becoming an NP-hard problem with the increasing numbers of employees and tasks, only a few algorithms exist and the performance is still not satisfying. To design an effective algorithm for SPSP, this paper proposes an ant colony optimization (ACO) approach which is called ACS-SPSP algorithm. Since a task in software projects involves several employees, in this paper, by splitting tasks and distributing dedications of employees to task nodes we get the construction graph for ACO. Six domain-based heuristics are designed to consider the factors of task efforts, allocated dedications of employees and task importance. Among these heuristic strategies, the heuristic of allocated dedications of employees to other tasks performs well. ACS-SPSP is compared with a genetic algorithm to solve the SPSP on 30 random instances. Experimental results show that the proposed algorithm is promising and can obtain higher hit rates with more accuracy compared to the previous genetic algorithm solution. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Solving software project scheduling problems with ant colony optimization", "paper_id": "WOS:000309623100004"}