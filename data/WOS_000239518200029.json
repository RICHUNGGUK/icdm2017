{"auto_keywords": [{"score": 0.04500352715676157, "phrase": "constraint_domain"}, {"score": 0.043113908496203925, "phrase": "horn_clauses"}, {"score": 0.00481495049065317, "phrase": "semantic_constructions"}, {"score": 0.004743806810821005, "phrase": "definite_programs"}, {"score": 0.004570491683870396, "phrase": "main_problem"}, {"score": 0.004486212539464774, "phrase": "well-known_problem"}, {"score": 0.004403480614319231, "phrase": "algebraic_specification"}, {"score": 0.004042056914551798, "phrase": "new_predicates"}, {"score": 0.003405472159599445, "phrase": "novel_way"}, {"score": 0.0031845067058084583, "phrase": "functorial_presentation"}, {"score": 0.0030565692640988585, "phrase": "logic_program"}, {"score": 0.002826383890518307, "phrase": "constraint_domains"}, {"score": 0.0026134922474235476, "phrase": "opp"}, {"score": 0.0025844090835070986, "phrase": "specific_constraint_solver"}, {"score": 0.0025461386232786356, "phrase": "operational_semantics"}, {"score": 0.0024075916292945715, "phrase": "specific_domain"}, {"score": 0.0023719332915829268, "phrase": "least_fixpoint"}, {"score": 0.0022013916728990564, "phrase": "logic_theory"}, {"score": 0.0021049977753042253, "phrase": "sense_equivalent"}], "paper_keywords": [""], "paper_abstract": "The semantic constructions and results for definite programs do not extend when dealing with negation. The main problem is related to a well-known problem in the area of algebraic specification: if we fix a constraint domain as a given model, its free extension by means of a set of Horn clauses defining a set of new predicates is semicomputable. However, if the language of the extension is richer than Horn clauses its free extension (if it exists) is not necessarily semicomputable. In this paper we present a framework that allows us to deal with these problems in a novel way. This framework is based on two main ideas: a reformulation of the notion of constraint domain and a functorial presentation of our semantics. In particular, the semantics of a logic program P is defined in terms of three functors: (OTP, ALG(P), LOG(P)) that apply to constraint domains and provide the operational, the least fixpoint and the logical semantics of P, respectively. The idea is that the application of OPP to a specific constraint solver, provides the operational semantics of P that uses this solver; the application of ALG(P) to a specific domain, provides the least fixpoint of P over this domain; and the application of LOG(P) to a theory of constraints provides the logic theory associated to P. We prove that these three functors are in some sense equivalent.", "paper_title": "A functorial framework for constraint normal logic programming", "paper_id": "WOS:000239518200029"}