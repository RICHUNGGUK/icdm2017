{"auto_keywords": [{"score": 0.033688793277003325, "phrase": "query_performance"}, {"score": 0.015296565059412815, "phrase": "layer_size"}, {"score": 0.009400077629308676, "phrase": "top-k_queries"}, {"score": 0.005849955924858447, "phrase": "pl_index"}, {"score": 0.00481495049065317, "phrase": "monotone_top-k_queries"}, {"score": 0.004236139082910124, "phrase": "monotone_linear_score_functions"}, {"score": 0.004210374961392525, "phrase": "layer-based_methods"}, {"score": 0.004184766878267706, "phrase": "well-known_techniques"}, {"score": 0.004159313896487805, "phrase": "top-k_query_processing"}, {"score": 0.00404667000994945, "phrase": "single_list"}, {"score": 0.0039611630554706205, "phrase": "ith_layer"}, {"score": 0.003865642389848873, "phrase": "top-i_tuple"}, {"score": 0.003379859206640552, "phrase": "new_layer-ordering_method"}, {"score": 0.003018793951710705, "phrase": "multiple_sublayer_lists"}, {"score": 0.002982140436039972, "phrase": "single_layer_list"}, {"score": 0.0028924362743419523, "phrase": "convex_skyline"}, {"score": 0.0025132370375220213, "phrase": "score_function"}, {"score": 0.0024903043450159594, "phrase": "approximately_linear"}, {"score": 0.0023283888577500895, "phrase": "sublayer_lists"}, {"score": 0.0023142006730269386, "phrase": "experimental_results"}, {"score": 0.0023000987455816593, "phrase": "synthetic_and_real_data_sets"}, {"score": 0.002230864807344675, "phrase": "existing_methods"}, {"score": 0.002210502984649107, "phrase": "small_values"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Top-k queries", " Monotone linear score functions", " Partitioning", " Merging", " Skylines", " Convex hulls"], "paper_abstract": "A top-k query returns k tuples with the highest (or the lowest) scores from a relation. The score is computed by combining the values of one or more attributes. We focus on top-k queries having monotone linear score functions. Layer-based methods are well-known techniques for top-k query processing. These methods construct a database as a single list of layers. Here, the ith layer has the tuples that can be the top-i tuple. Thus, these methods answer top-k queries by reading at most k layers. Query performance. however, is poor when the number of tuples in each layer (simply, the layer size) is large. In this paper, we propose a new layer-ordering method, called the Partitioned-Layer Index (simply, the PL Index), that significantly improves query performance by reducing the layer size. The PL Index uses the notion of partitioning, which constructs a database as multiple sublayer lists instead of a single layer list subsequently reducing the layer size. The PL Index also uses the convex skyline, which is a subset of the skyline, to construct a sublayer to further reduce the layer size. The PL Index has the following desired properties. The query performance of the PL Index is quite insensitive to the weights of attributes (called the preference vector) of the score function and is approximately linear in the value of k. The PL Index is capable of tuning query performance for the most frequently used value of k by controlling the number of sublayer lists. Experimental results using synthetic and real data sets show that the query performance of the PL Index significantly outperforms existing methods except for small values of k (say, k <= 9). (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "The partitioned-layer index: Answering monotone top-k queries using the convex skyline and partitioning-merging technique", "paper_id": "WOS:000269116700007"}