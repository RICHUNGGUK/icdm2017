{"auto_keywords": [{"score": 0.0478539733603157, "phrase": "oblivious_algorithms"}, {"score": 0.01389258044943207, "phrase": "total_weight"}, {"score": 0.013097730955003939, "phrase": "oblivious_algorithm"}, {"score": 0.009807344145546995, "phrase": "approximation_ratio"}, {"score": 0.00481495049065317, "phrase": "special_family"}, {"score": 0.004758053266234474, "phrase": "randomized_algorithms"}, {"score": 0.004701825207431857, "phrase": "max_dicut"}, {"score": 0.003728529119516347, "phrase": "vertex_v"}, {"score": 0.0027034948760997564, "phrase": "even_directed_cycle"}, {"score": 0.002639845784408318, "phrase": "negative_example"}, {"score": 0.0025169965861573185, "phrase": "best_approximation_ratio"}, {"score": 0.0022745508619577927, "phrase": "natural_extensions"}], "paper_keywords": ["Linear programming", " Local Algorithms"], "paper_abstract": "This paper introduces a special family of randomized algorithms for Max DICUT that we call oblivious algorithms. Let the bias of a vertex be the ratio between the total weight of its outgoing edges and the total weight of all its edges. An oblivious algorithm selects at random in which side of the cut to place a vertex v, with probability that only depends on the bias of v, independently of other vertices. The reader may observe that the algorithm that ignores the bias and chooses each side with probability 1/2 has an approximation ratio of 1/4, whereas no oblivious algorithm can have an approximation ratio better than 1/2 (with an even directed cycle serving as a negative example). We attempt to characterize the best approximation ratio achievable by oblivious algorithms, and present results that are nearly tight. The paper also discusses natural extensions of the notion of oblivious algorithms, and extensions to the more general problem of Max 2-AND.", "paper_title": "Oblivious Algorithms for the Maximum Directed Cut Problem", "paper_id": "WOS:000352290500008"}