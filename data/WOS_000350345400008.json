{"auto_keywords": [{"score": 0.049460287006492715, "phrase": "source_instrumentation"}, {"score": 0.035047814099400075, "phrase": "contextual_information"}, {"score": 0.00481495049065317, "phrase": "java_code_instrumentation"}, {"score": 0.00466085208934021, "phrase": "important_role"}, {"score": 0.004600596158672458, "phrase": "dynamic_program_analysis"}, {"score": 0.004482400730101345, "phrase": "current_instrumentation_implementations"}, {"score": 0.004338898899247236, "phrase": "ad_hoc_rules"}, {"score": 0.003194898129853895, "phrase": "source_code"}, {"score": 0.003133052778244851, "phrase": "queried_points"}, {"score": 0.002935393439834135, "phrase": "new_method"}, {"score": 0.002878556952876824, "phrase": "declarative_code_queries"}, {"score": 0.002644678812707061, "phrase": "expressive_code_queries"}, {"score": 0.0025934566395017424, "phrase": "jins_language"}, {"score": 0.0024616504443079512, "phrase": "sql-like_style"}, {"score": 0.002160640052461594, "phrase": "reduced_complexity"}, {"score": 0.002132637840285576, "phrase": "instrumentation_specifications"}], "paper_keywords": ["Source query", " Code instrumentation", " Java"], "paper_abstract": "Source instrumentation plays an important role in dynamic program analysis. However, current instrumentation implementations require programmers to write ad hoc rules that are often too complex to use and maintain. To address this complexity, we divide the task of source instrumentation into two steps: first, the source points are queried, into which code fragments should be planted; secondly, the code fragments including contextual information are generated and planted into source code through the queried points. According to this idea, we present a new method based on declarative code queries, which makes it easier to specify instrumentations using contextual information collected from expressive code queries. The JIns language provided by our method is constructed following an SQL-like style, which is well known and widely used by programmers. We evaluate the method in terms of the reduced complexity of instrumentation specifications for several common instrumentation tasks.", "paper_title": "A declarative approach for Java code instrumentation", "paper_id": "WOS:000350345400008"}