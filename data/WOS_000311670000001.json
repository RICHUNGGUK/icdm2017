{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "turing"}, {"score": 0.007217240984567841, "phrase": "turing_machine"}, {"score": 0.0047640912542139605, "phrase": "turing's_present-day"}, {"score": 0.004733832711585386, "phrase": "-time_relevance"}, {"score": 0.0044985505960427625, "phrase": "algorithmic_limits"}, {"score": 0.004432145918671558, "phrase": "effective_mechanism"}, {"score": 0.004114487566822382, "phrase": "godel"}, {"score": 0.003893273258745852, "phrase": "universal_turing_machine"}, {"score": 0.003731210452196135, "phrase": "turing_machines"}, {"score": 0.0036839151921893216, "phrase": "finite-state_automaton"}, {"score": 0.0036527173198112103, "phrase": "vending_machine"}, {"score": 0.003575869513481065, "phrase": "discrete_squares"}, {"score": 0.00354558338838633, "phrase": "paper_roll"}, {"score": 0.003319374033697422, "phrase": "putnam"}, {"score": 0.002571383474748273, "phrase": "computational_mechanical_process"}, {"score": 0.002511875279674581, "phrase": "arbitrary_precision"}, {"score": 0.0024485229420100744, "phrase": "turing's_innovative_concept"}, {"score": 0.002407176087240648, "phrase": "discrete-time_quantization"}, {"score": 0.0023969486682734182, "phrase": "computational_biological_processes"}, {"score": 0.002331518955492763, "phrase": "tape-the_turing_machine"}], "paper_keywords": ["Alan Turing", " Turing machines", " computability", " functionalism", " learning"], "paper_abstract": "Turing's present-day and all-time relevance arises from the timelessness of the issues he tackled, and the innovative light he shed upon them. Turing first defined the algorithmic limits of computability, when determined via effective mechanism, and showed the generality of his definition by proving its equivalence to other general, but less algorithmic, non-mechanical, more abstract formulations of computability. In truth, his originality much impressed Godel, for the simplicity of the mechanism invoked-what we nowadays call a Turing Machine (or program)-and for the proof of existence of a Universal Turing Machine (what we call digital computer)-which can demonstrably mimic any other Turing Machine, i.e. execute any program. Indeed, Turing Machines simply rely on having a finite-state automaton (like a vending machine), and an unbound paper tape made of discrete squares (like a paper roll), with at most one rewritable symbol on each square. Turing also first implicitly introduced the perspective of 'functionalism'-though he did not use the word, it was introduced later by Putnam, inspired by Turing's work-by showing that what counts is the realizability of functions, independently of the hardware that embodies them. And that realizability is afforded by the very simplicity of his devised mechanism, what he then called A-machines (but now bear his name), which rely solely on the manipulation of symbols-as discrete as the fingers of one hand-wherein both data and instructions are represented with symbols, both being subject to manipulation. The twain, data as well as instructions, are stored in memory, where instructions double as data and as rules for acting-the stored program idea. No one to this day has invented a computational mechanical process with such general properties, which cannot be theoretically approximated with arbitrary precision by some Turing Machine, wherein interactions are to be captured by Turing's innovative concept of oracle. In these days of discrete-time quantization, computational biological processes, and proof of ever expanding universe-the automata and the tape-the Turing Machine reigns supreme. Moreover, universal functionalism-another Turing essence-is what enables the inevitable bringing together of the ghosts in the several embodied machines (silicon-based, biological, extra-terrestrial or otherwise) to promote their symbiotic epistemic co-evolution, since they partake of the same theoretic functionalism. Turing is truly and forever among us.", "paper_title": "Turing is among us", "paper_id": "WOS:000311670000001"}