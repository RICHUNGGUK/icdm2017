{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "progressive_computation"}, {"score": 0.004724365740062236, "phrase": "skyline_queries"}, {"score": 0.004635477242873163, "phrase": "multi-disk_environment"}, {"score": 0.0043786774510943625, "phrase": "d-dimensional_points"}, {"score": 0.0034526191487098093, "phrase": "interesting_scenario"}, {"score": 0.0033875770020590796, "phrase": "skyline_retrieval"}, {"score": 0.0032922964156452696, "phrase": "multi-dimensional_points"}, {"score": 0.0031693980719538287, "phrase": "multiple_disks"}, {"score": 0.0031096747349602344, "phrase": "efficient_algorithms"}, {"score": 0.003022186855664124, "phrase": "progressive_skyline_computation"}, {"score": 0.002854505078275351, "phrase": "parallel_r-trees"}, {"score": 0.0024513404432665153, "phrase": "effective_pruning_strategies"}, {"score": 0.0022715929119140194, "phrase": "non-qualifying_entries"}, {"score": 0.0021659920594094407, "phrase": "synthetic_data"}], "paper_keywords": [""], "paper_abstract": "Given a set of d-dimensional points, skyline query returns the points that are not dominated by any other point on all dimensions. In this paper, we study an interesting scenario of skyline retrieval, where multi-dimensional points are distributed among multiple disks. Efficient algorithms for parallelizing progressive skyline computation are developed, using the parallel R-trees. The core of our scheme is to visit more entries from some disks simultaneously and enable effective pruning strategies with dominance checking to prune away the non-qualifying entries. Extensive experiments with synthetic data confirm that our proposed algorithms are both efficient and scalable.", "paper_title": "Parallelizing progressive computation for skyline queries in multi-disk environment", "paper_id": "WOS:000241155300068"}