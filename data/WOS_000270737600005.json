{"auto_keywords": [{"score": 0.032997694157524564, "phrase": "devs"}, {"score": 0.009230467910068593, "phrase": "developed_code"}, {"score": 0.006331897155736449, "phrase": "uml"}, {"score": 0.0057091486606852485, "phrase": "proposed_eudevs"}, {"score": 0.00481495049065317, "phrase": "devs_theory"}, {"score": 0.004627848087788984, "phrase": "system_design"}, {"score": 0.004380673342749118, "phrase": "specific_objectives"}, {"score": 0.004083876271505206, "phrase": "underlying_simulator"}, {"score": 0.003949095579343987, "phrase": "simulation_engine"}, {"score": 0.0036256778700153227, "phrase": "domain_knowledge"}, {"score": 0.0036036131261225936, "phrase": "simulation_techniques"}, {"score": 0.0033695566513755096, "phrase": "discrete_event_specification"}, {"score": 0.003228564642402843, "phrase": "cleaner_methodology"}, {"score": 0.003046578530654012, "phrase": "discrete_event"}, {"score": 0.0030095886792602137, "phrase": "highly_detailed_level"}, {"score": 0.0029369469007332963, "phrase": "devs_modeling_code"}, {"score": 0.0028924362743419523, "phrase": "earlier_efforts"}, {"score": 0.002771352849127134, "phrase": "transformation_mechanism"}, {"score": 0.0027460713949639492, "phrase": "inherent_differences"}, {"score": 0.002655324730688008, "phrase": "integrated_approach"}, {"score": 0.002544141963686395, "phrase": "executable_uml"}, {"score": 0.0024600517975561127, "phrase": "obtained_devs_models"}, {"score": 0.0024301658667103565, "phrase": "specific_class"}, {"score": 0.0024153589988125303, "phrase": "devs_models"}, {"score": 0.0022930799650968544, "phrase": "xfd-devs."}, {"score": 0.00218364206035443, "phrase": "bifurcated_model-continuity-based_lifecycle_methodology"}, {"score": 0.0021049977753042253, "phrase": "complete_example"}], "paper_keywords": ["DEVS", " XFD-DEVS", " UML-based modeling", " XML", " model transformation", " eUDEVS", " SES", " DUNIP"], "paper_abstract": "Modeling and simulation (M&S) for system design and prototyping is practiced today both in industry and academia. M&S are two different areas altogether and have specific objectives. However, most of the time these two separate areas are taken together. The developed code is woven tightly around both the model and the underlying simulator that executes it. This constrains both the model development and the simulation engine that has an impact on the scalability of the developed code. Furthermore, a lot of time is spent in developing a model because it needs both domain knowledge and simulation techniques, which also requires communication among users and developers. The Unified Modeling Language (UML) is widely accepted in industry, whereas discrete event specification (DEVS)-based modeling that separates the model and the simulator, provides a cleaner methodology to develop models and is much used in academia. DEVS today is used by engineers who understand discrete event modeling at a highly detailed level and are able to translate requirements to DEVS modeling code. There have been earlier efforts to integrate UML and DEVS but they have not succeeded in providing a transformation mechanism owing to inherent differences in these two modeling paradigms. In this paper we present an integrated approach to cross-transformations between UML and DEVS using the proposed eUDEVS, which stands for executable UML based on DEVS. Further, we also show that the obtained DEVS models belong to a specific class of DEVS models called finite deterministic DEVS (FD-DEVS) that is available as a W3C XML schema in XFD-DEVS. We also put the proposed eUDEVS in a much larger unifying framework called the DEVS unified process that allows bifurcated model-continuity-based lifecycle methodology for systems M&S. Finally, we demonstrate the concepts with a complete example.", "paper_title": "eUDEVS: Executable UML with DEVS Theory of Modeling and Simulation", "paper_id": "WOS:000270737600005"}