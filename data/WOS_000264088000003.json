{"auto_keywords": [{"score": 0.04600650068870181, "phrase": "batch_rekeying"}, {"score": 0.03818988992284084, "phrase": "optimal_key_tree"}, {"score": 0.00481495049065317, "phrase": "optimal_trees"}, {"score": 0.004776297980616768, "phrase": "group_key_management"}, {"score": 0.0047379542803396915, "phrase": "batch_updates"}, {"score": 0.00464343008299973, "phrase": "group_key_management_problem"}, {"score": 0.004550783060775205, "phrase": "previous_work"}, {"score": 0.004442032546224076, "phrase": "key_updates"}, {"score": 0.004064958518350867, "phrase": "probability_p"}, {"score": 0.003951800212882157, "phrase": "new_user"}, {"score": 0.0039042694651106884, "phrase": "batch_period"}, {"score": 0.0038573081851680656, "phrase": "total_number"}, {"score": 0.003558294449586273, "phrase": "linear_time"}, {"score": 0.0031020367403802773, "phrase": "membership_changes"}, {"score": 0.0029913511336659327, "phrase": "heuristic_algorithm"}, {"score": 0.0029553380263320195, "phrase": "sparse_case"}, {"score": 0.0028155572612699976, "phrase": "simulation_results"}, {"score": 0.00266079124891013, "phrase": "refined_heuristic_algorithm"}, {"score": 0.0025866199378466754, "phrase": "approximation_ratio"}, {"score": 0.0022914054720704546, "phrase": "approximation_algorithm"}], "paper_keywords": ["Key management", " Key trees", " Batch update", " Approximation algorithms", " Optimality"], "paper_abstract": "We investigate the group key management problem for broadcasting applications. Previous work showed that, in handling key updates, batch rekeying can be more cost effective than individual rekeying. One model for batch rekeying is to assume that every user has probability p, of being replaced by a new user during a batch period with the total number of users unchanged. Under this model, it was recently shown that an optimal key tree can be constructed in linear time when p is a constant and in O(n(4)) time when p -> 0. In this paper, we investigate more efficient algorithms for the case p -> 0, i.e., when membership changes are sparse. We design an O(n) heuristic algorithm for the sparse case and show that it produces a nearly 2-approximation to the optimal key tree. Simulation results show that its performance is even better in practice. We also design a refined heuristic algorithm and show that it achieves an approximation ratio of 1 + is an element of for any fixed is an element of > 0 and n, as p -> 0. Finally, we give another approximation algorithm for any p is an element of (0, 0.693) which is shown to be quite good by our simulations. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Approximately optimal trees for group key management with batch updates", "paper_id": "WOS:000264088000003"}