{"auto_keywords": [{"score": 0.04602278391010143, "phrase": "uml"}, {"score": 0.00481495049065317, "phrase": "uml_class_model_evolution"}, {"score": 0.004549242970806199, "phrase": "model-driven_development"}, {"score": 0.0038124354878360032, "phrase": "application's_structural_model"}, {"score": 0.0034899090274046014, "phrase": "underlying_database_schema"}, {"score": 0.003194580334752371, "phrase": "large_volume"}, {"score": 0.0025933275734892508, "phrase": "model_evolution"}, {"score": 0.002544616720630384, "phrase": "ultimate_requirement"}, {"score": 0.002299830460180699, "phrase": "structural_uml_models"}, {"score": 0.0021049977753042253, "phrase": "relational_database_domain"}], "paper_keywords": ["Model evolution", " Schema evolution", " Model differencing", " Schema matching", " Object-relational mapping"], "paper_abstract": "In the context of model-driven development of database applications with UML, the (usually relational) database schema is obtained automatically from the application's structural (class) UML model. Changes in requirements often lead to modifications of the application's structural model. Such changes, in turn, have to be propagated to the underlying database schema. Very often, especially when the system is in production with a large volume of users' live data, the data is considered to be valuable enough to be preserved through these changes. This paper describes an approach to cope with the problem of model evolution with the ultimate requirement to preserve the data stored in the database. The algorithm interactively determines differences between structural UML models before and after the changes and resolves those differences into transformations in the relational database domain.", "paper_title": "An interactive tool for UML class model evolution in database applications", "paper_id": "WOS:000360764200011"}