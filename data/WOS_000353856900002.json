{"auto_keywords": [{"score": 0.04117972994186605, "phrase": "formal_model"}, {"score": 0.0407769748728513, "phrase": "distributed_traffic_control_protocol"}, {"score": 0.00481495049065317, "phrase": "distributed_multi-path_cellular_flows"}, {"score": 0.004701710196317656, "phrase": "distributed_traffic_control"}, {"score": 0.004653993775422955, "phrase": "partitioned_plane"}, {"score": 0.00437765047900432, "phrase": "geographic_partition"}, {"score": 0.004075834722188658, "phrase": "route_entities"}, {"score": 0.0038467574225322086, "phrase": "minimum_separation"}, {"score": 0.003485196263406553, "phrase": "adjacent_cells"}, {"score": 0.003222687723450745, "phrase": "distributed_traffic_control_systems"}, {"score": 0.0031682817605340028, "phrase": "liveness_analysis"}, {"score": 0.003104201872147936, "phrase": "distributed_algorithms"}, {"score": 0.003051790083321992, "phrase": "robot_swarms"}, {"score": 0.0030310732341527168, "phrase": "intelligent_highway_systems"}, {"score": 0.0030002605593597966, "phrase": "new_failures"}, {"score": 0.0029096837584084182, "phrase": "single_target_cell"}, {"score": 0.002783643041818689, "phrase": "feasible_paths"}, {"score": 0.002755338691613447, "phrase": "target_cell"}, {"score": 0.002690406375639144, "phrase": "multiple_targets"}, {"score": 0.002547663224855668, "phrase": "non-deadlocking_failures"}, {"score": 0.002331641523873951, "phrase": "simulation_results"}, {"score": 0.002245842206945282, "phrase": "entity_throughput"}, {"score": 0.0022078909877264884, "phrase": "entity_velocity"}, {"score": 0.002185428109917791, "phrase": "single-target_path_complexity"}, {"score": 0.0021705796895687864, "phrase": "failure-recovery_rates"}, {"score": 0.0021484955960643167, "phrase": "multi-target_path_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Distributed systems", " Swarm robotics", " Formal methods", " Traffic control", " Liveness"], "paper_abstract": "We study the problem of distributed traffic control in the partitioned plane, where the movement of all entities (robots, vehicles, etc.) within each geographic partition (cell) is the same. Each cell is controlled by software to move entities across the cell to route entities from sources to targets without collisions. We present a formal model of a distributed traffic control protocol that guarantees minimum separation between entities, even as the software controlling some cells fails by crashing. The distributed traffic control protocol relies on two principles: (a) temporary blocking entity transfers between adjacent cells for maintenance of safety and (b) local geographical routing for guaranteeing progress of entities to their targets. Establishing liveness in distributed traffic control systems is challenging, but liveness analysis will be necessary to apply distributed algorithms in applications like coordinating robot swarms and intelligent highway systems. Once new failures stop occurring, in the case of a single target cell, the protocol is guaranteed to self-stabilize and entities with feasible paths to the target cell make progress towards it. For multiple targets, failures may cause deadlocks in the system, so we identify a class of non-deadlocking failures where all entities are guaranteed to make progress to their respective targets. Our assertional proofs may serve as templates for the analysis of other distributed traffic control protocols. We also present simulation results to validate the formal model, and to provide estimates of entity throughput as a function of entity velocity, safety separation distance, single-target path complexity, failure-recovery rates, and multi-target path complexity. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Safe and stabilizing distributed multi-path cellular flows", "paper_id": "WOS:000353856900002"}