{"auto_keywords": [{"score": 0.04338425681647202, "phrase": "marte"}, {"score": 0.004749824776508639, "phrase": "uml_profile"}, {"score": 0.004497973025639345, "phrase": "general_modeling_framework"}, {"score": 0.004201774694043468, "phrase": "modeling_capabilities"}, {"score": 0.004051828608343507, "phrase": "available_verification_techniques"}, {"score": 0.003996983218174335, "phrase": "clock_constraint_specification_language"}, {"score": 0.0038368442918503072, "phrase": "companion_language"}, {"score": 0.003683097597914604, "phrase": "formal_support"}, {"score": 0.0036332251283046997, "phrase": "causal_and_temporal_analysis"}, {"score": 0.0034717929086014636, "phrase": "state-based_semantics"}, {"score": 0.003440374855100391, "phrase": "ccsl"}, {"score": 0.0033937776228549557, "phrase": "correctness_properties"}, {"score": 0.003056819704624705, "phrase": "previous_work"}, {"score": 0.002988101395789399, "phrase": "extended_finite_state_machines"}, {"score": 0.0029209233709517634, "phrase": "integer_linear_programming"}, {"score": 0.0027159094186967247, "phrase": "intentional_representation"}, {"score": 0.0026790983342162887, "phrase": "pure_boolean_abstractions"}, {"score": 0.002391067964886602, "phrase": "important_role"}, {"score": 0.002305589818994465, "phrase": "logical_description"}, {"score": 0.0021830553825770097, "phrase": "execution_platform"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Logical time", " Architecture-driven analysis", " UML MARTE", " Reachability analysis"], "paper_abstract": "The UML Profile for Modeling and Analysis of Real-Time and Embedded systems promises a general modeling framework to design and analyze systems. Lots of works have been published on the modeling capabilities offered by MARTE, much less on available verification techniques. The Clock Constraint Specification Language (CCSL), first introduced as a companion language for MARTE, was devised to offer a formal support to conduct causal and temporal analysis on MARTE models. This work relies on a state-based semantics for CCSL to establish correctness properties on MARTE/CCSL specifications. We propose and compare two different techniques to build the state-space of a specification. One is an extension of some previous work and is based on extended finite state machines. It relies on integer linear programming to solve the constraints and reduce the state-space. The other one is based on an intentional representation and uses pure Boolean abstractions but offers no guarantee to terminate when the specification is not safe. The approach is illustrated on one simple example where the architecture plays an important role. We describe a process where the logical description of the application is progressively refined to take into account the execution platform through allocation. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Correctness issues on MARTE/CCSL constraints", "paper_id": "WOS:000360591600005"}