{"auto_keywords": [{"score": 0.04900345495625394, "phrase": "api"}, {"score": 0.008958158052967081, "phrase": "previous_version"}, {"score": 0.007844140297620447, "phrase": "secondary_memory"}, {"score": 0.0075453103007964714, "phrase": "pooclapack"}, {"score": 0.007364323198564978, "phrase": "blas"}, {"score": 0.005898432631486593, "phrase": "distributed_program"}, {"score": 0.005869812749764089, "phrase": "test_data"}, {"score": 0.005155523024025002, "phrase": "plapack"}, {"score": 0.00481495049065317, "phrase": "huge_dense_linear_systems"}, {"score": 0.004800239472208032, "phrase": "new_version"}, {"score": 0.004799345875045229, "phrase": "hdss"}, {"score": 0.0047220745303195805, "phrase": "fortran_application_programming_interface"}, {"score": 0.00466872254769817, "phrase": "parallel_solution"}, {"score": 0.004594400038016154, "phrase": "linear_systems"}, {"score": 0.0045416381585516264, "phrase": "efficient_solution"}, {"score": 0.004497611914019863, "phrase": "wide_range"}, {"score": 0.004483031117738302, "phrase": "parallel_platforms"}, {"score": 0.004360979173011898, "phrase": "core_strategies"}, {"score": 0.004297708666743105, "phrase": "huge_linear_systems"}, {"score": 0.004277618995194743, "phrase": "double-precision_arithmetic"}, {"score": 0.004228479560924842, "phrase": "parallel_linear_algebra_library"}, {"score": 0.004221618021987051, "phrase": "plapack."}, {"score": 0.004040489762419297, "phrase": "local_matrix_operations"}, {"score": 0.004001302079400111, "phrase": "friendly_interface"}, {"score": 0.003962492955616174, "phrase": "almost_all_the_technical_aspects"}, {"score": 0.003936828724220784, "phrase": "parallel_execution"}, {"score": 0.0037862834291945654, "phrase": "best_way"}, {"score": 0.003617881365441061, "phrase": "experimental_results"}, {"score": 0.0035944410560302996, "phrase": "high_performance"}, {"score": 0.0034799780789579278, "phrase": "program"}, {"score": 0.0033572711365152676, "phrase": "cpc_program_library"}, {"score": 0.0033463747810160045, "phrase": "queen's_university"}, {"score": 0.0033355137963919793, "phrase": "belfast"}, {"score": 0.0033246876972930772, "phrase": "n._ireland"}, {"score": 0.0033031406967497018, "phrase": "standard_cpc"}, {"score": 0.002957425108141394, "phrase": "mpi_primitives"}, {"score": 0.0029144673208954365, "phrase": "external"}, {"score": 0.0027000164360086116, "phrase": "comput"}, {"score": 0.002692414554435635, "phrase": "phys"}, {"score": 0.0026824985945868188, "phrase": "comm"}, {"score": 0.0025797736488646847, "phrase": "linear_equations"}, {"score": 0.00255471674028837, "phrase": "standard_lapack_capabilities"}, {"score": 0.00254641849927579, "phrase": "solution_method"}, {"score": 0.002509407877657538, "phrase": "parallelized_routines"}, {"score": 0.002493131414917848, "phrase": "lu_factorization"}, {"score": 0.00248099321460724, "phrase": "efficient_secondary_storage_algorithms"}, {"score": 0.0024689139647543035, "phrase": "available_main_memory"}, {"score": 0.002409392049180583, "phrase": "high_accuracy"}, {"score": 0.0022797223372343577, "phrase": "initialization_routine"}, {"score": 0.0021430204586686146, "phrase": "eight-node_commodity_cluster"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["LU decomposition", " Out-of-core", " Parallel computing"], "paper_abstract": "HDSS (Huge Dense Linear System Solver) is a Fortran Application Programming Interface (API) to facilitate the parallel solution of very large dense systems to scientists and engineers. The API makes use of parallelism to yield an efficient solution of the systems on a wide range of parallel platforms, from clusters of processors to massively parallel multiprocessors. It exploits out-of-core strategies to leverage the secondary memory in order to solve huge linear systems O(100.000). The API is based on the parallel linear algebra library PLAPACK. and on its Out-Of-Core (OOC) extension POOCLAPACK. Both PLAPACK and POOCLAPACK use the Message Passing Interface (MPI) as the communication. layer and BLAS to perform the local matrix operations. The API provides a friendly interface to the users, hiding almost all the technical aspects related to the parallel execution of the code and the use of the secondary memory to solve the systems. In particular, the API can automatically select the best way to store and solve the systems, depending of the dimension of the system, the number of processes and the main memory of the platform. Experimental results on several parallel platforms report high performance. reaching more than 1 TFLOP with 64 cores to solve a system with more than 200 000 equations and more than 10 000 right-hand side vectors. New version program summary Program title: Huge Dense System Solver (HDSS) Catalogue identifier: AEHU_v1_1 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEHU_v1_1.html Program obtainable from: CPC Program Library. Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence. http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 87 062 No. of bytes in distributed program, including test data, etc.: 1 069 110 Distribution format: tar.gz Programming language: Fortran90. C Computer: Parallel architectures: multiprocessors, computer clusters Operating system: Linux/Unix Has the code been vectorized or parallelized?: Yes, includes MPI primitives. RAM: Tested for up to 190 GB Classification: 6.5 External routines: MPI (http://www.mpi-forum.org/), BLAS (http://www.netlib.org/blas/), PLAPACK (http://www.cs.utexas.edu/-plapack/). POOCLAPACK (ftp://ftp.cs.utexas.edu/pub/rvdg/PLAPACK/pooclapack.ps) (code for PLAPACK and POOCLAPACK is included in the distribution). Catalogue identifier of previous version: AEHU_v1_0 Journal reference of previous version: Comput. Phys. Comm. 182 (2011) 533 Does the new version supersede the previous version?: Yes Nature of problem: Huge scale dense systems of linear equations, Ax = B. beyond standard LAPACK capabilities. Solution method: The linear systems are solved by means of parallelized routines based on the LU factorization, using efficient secondary storage algorithms when the available main memory is insufficient. Reasons for new version: In many applications we need to guarantee a high accuracy in the solution of very large linear systems and we can do it by using double-precision arithmetic. Summary of revisions: Version 1.1 Can be used to solve linear systems using double-precision arithmetic. New version of the initialization routine. The user can choose the kind of arithmetic and the values of several parameters of the environment. Running time: About 5 hours to solve a system with more than 200 000 equations and more than 10000 right-hand side vectors using double-precision arithmetic on an eight-node commodity cluster with a total of 64 Intel cores. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A parallel solver for huge dense linear systems", "paper_id": "WOS:000294525800012"}