{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "linear_approximation"}, {"score": 0.00470325458481566, "phrase": "unfolded_and_pipelined_cordic"}, {"score": 0.004637478829869904, "phrase": "high-performance_hardware_element"}, {"score": 0.004551199992546761, "phrase": "wide_variety"}, {"score": 0.004123781267600542, "phrase": "significant_interest"}, {"score": 0.0034171734618737436, "phrase": "single_unit"}, {"score": 0.0032756158688245, "phrase": "linear_approximation_scheme"}, {"score": 0.0031995142224983094, "phrase": "unified_implementation"}, {"score": 0.003095923814666088, "phrase": "fully_parallel_tree_multipliers"}, {"score": 0.0030097975788892896, "phrase": "second_half"}, {"score": 0.0029816229984366374, "phrase": "cordic_iterations"}, {"score": 0.0028312983170567948, "phrase": "scale_factor"}, {"score": 0.002688532127821979, "phrase": "rotation_process"}, {"score": 0.002470237978694949, "phrase": "existing_analytical_expressions"}, {"score": 0.002323663295811215, "phrase": "rough_area-time_model"}, {"score": 0.0022168460543913787, "phrase": "significant_reductions"}, {"score": 0.0021049977753042253, "phrase": "actual_implementations"}], "paper_keywords": ["CORDIC", " computer arithmetic", " rotations", " numerical processors"], "paper_abstract": "The unfolded and pipelined CORDIC is a high-performance hardware element that produces a wide variety of one and two argument functions with high throughput. The reduction in delay, power, and area (cost) are of significant interest regarding this module due to its high demand for resources. The linear approximation to rotation has been proposed to achieve such reductions. However, the schemes for rotation (multiplication) and vectoring (division) complicate the implementation in a single unit. In this work, we improve the linear approximation scheme, leading to a unified implementation for rotation and vectoring, where fully parallel tree multipliers are used instead of the second half of CORDIC iterations. We also combine the linear approximation to rotation with the scale factor compensation so that the compensation is concurrently performed with the rotation process. We then extend the method to 3D CORDIC. Such an extension is not straightforward due to the lack of existing analytical expressions for the convergence of the algorithm. A comparison, using a rough area-time model and synthesis results, shows that our proposals may achieve significant reductions in delay, with no increase in area, in actual implementations.", "paper_title": "Low-latency pipelined 2D and 3D CORDIC processors", "paper_id": "WOS:000252471400009"}