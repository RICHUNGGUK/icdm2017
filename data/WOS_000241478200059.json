{"auto_keywords": [{"score": 0.03746094921310435, "phrase": "cbf"}, {"score": 0.00481495049065317, "phrase": "bloom_filters"}, {"score": 0.004688321299229397, "phrase": "counting_bloom_filter"}, {"score": 0.004444921827311577, "phrase": "bloom_filter_data_structure"}, {"score": 0.004251728624599691, "phrase": "membership_queries"}, {"score": 0.0036553070575015344, "phrase": "bloom_filter"}, {"score": 0.0034963129868796033, "phrase": "space_savings"}, {"score": 0.003404244237372396, "phrase": "false_positives"}, {"score": 0.0032561349010603734, "phrase": "simple_hashing-based_alternative"}, {"score": 0.0031703706626348507, "phrase": "d-left_hashing"}], "paper_keywords": [""], "paper_abstract": "A counting Bloom filter (CBF) generalizes a Bloom filter data structure so as to allow membership queries on a set that can be changing dynamically via insertions and deletions. As with a Bloom filter, a CBF obtains space savings by allowing false positives. We provide a simple hashing-based alternative based on d-left hashing called a d-left CBF (dlCBF). The dlCBF offers the same functionality as a CBF, but uses less space, generally saving a factor of two or more. We describe the construction of dlCBFs, provide an analysis, and demonstrate their effectiveness experimentally.", "paper_title": "An improved construction for counting bloom filters", "paper_id": "WOS:000241478200059"}