{"auto_keywords": [{"score": 0.05007821724263498, "phrase": "unifying_theories"}, {"score": 0.046166196857162806, "phrase": "hoare"}, {"score": 0.03568045852616996, "phrase": "circus"}, {"score": 0.004756805752518494, "phrase": "proofpower-z."}, {"score": 0.0046993598473345395, "phrase": "increasing_interest"}, {"score": 0.004558748120167778, "phrase": "different_computational_paradigms"}, {"score": 0.0037529131348732715, "phrase": "theorem_prover"}, {"score": 0.0037075456471849892, "phrase": "proofpower-z"}, {"score": 0.0032235100652080123, "phrase": "dijkstra"}, {"score": 0.002526938673434697, "phrase": "tool_support"}, {"score": 0.0024662175217156817, "phrase": "csp"}, {"score": 0.002104998402292434, "phrase": "utp."}], "paper_keywords": ["Relational semantics", " Theorem proving", " Circus"], "paper_abstract": "The increasing interest in the combination of different computational paradigms is well represented by Hoare and He in the Unifying Theories of Programming (UTP). In this paper, we present a mechanisation of part of that work in a theorem prover, ProofPower-Z; the theories of alphabetised relations, designs, reactive and CSP processes are in the scope of this paper. Furthermore, the mechanisation of Circus, a language that combines Z, CSP, specification statements and Dijkstra's guarded command language, is also presented here. We also present an account of how this mechanisation is achieved, and more interestingly, of what issues were raised, and of our decisions. We aim at providing tool support not only for CSP and Circus, but also for further explorations of Hoare and He's unification, and for the mechanisation of languages whose semantics is based on the UTP.", "paper_title": "Unifying theories in ProofPower-Z", "paper_id": "WOS:000313073100007"}