{"auto_keywords": [{"score": 0.028609066229114653, "phrase": "nhpga"}, {"score": 0.02322730111336098, "phrase": "frequency_constraints"}, {"score": 0.009563052728448143, "phrase": "design_variables"}, {"score": 0.007259188788107973, "phrase": "truss_shape"}, {"score": 0.007178429946409822, "phrase": "optimization_problems"}, {"score": 0.006737363234838582, "phrase": "solution_quality"}, {"score": 0.006394424101541571, "phrase": "higher_quality_solutions"}, {"score": 0.005466276451442656, "phrase": "parallel_computing"}, {"score": 0.005425586911140131, "phrase": "simplex_search"}, {"score": 0.004761253507368234, "phrase": "parallel_genetic_algorithm"}, {"score": 0.004501578643090429, "phrase": "dynamic_performance"}, {"score": 0.004240116703465252, "phrase": "-sectional_areas"}, {"score": 0.004161553532799662, "phrase": "slow_convergence"}, {"score": 0.004130535674260505, "phrase": "even_divergence"}, {"score": 0.004084440052083978, "phrase": "shape_and_sizing_variables"}, {"score": 0.003890540531028228, "phrase": "sizing_variables"}, {"score": 0.0038471128411102914, "phrase": "widely_different_orders"}, {"score": 0.003761700847771486, "phrase": "multiple_frequency_constraints"}, {"score": 0.003719705944877787, "phrase": "difficult_dynamic_sensitivity_analysis"}, {"score": 0.0036781781340563748, "phrase": "optimal_criteria"}, {"score": 0.0036507498735369576, "phrase": "mathematical_programming_methods"}, {"score": 0.0036235254023315798, "phrase": "considerable_limitations"}, {"score": 0.003516635512391528, "phrase": "complex_dynamic_sensitivity_analysis"}, {"score": 0.00342568771304873, "phrase": "local_optima"}, {"score": 0.0034001358540125303, "phrase": "genetic_algorithms"}, {"score": 0.0033370841436001597, "phrase": "great_potentials"}, {"score": 0.0031904741237384106, "phrase": "global_probabilistic_population_search_techniques"}, {"score": 0.0031430451507177388, "phrase": "gradient_information"}, {"score": 0.003107935254560724, "phrase": "improved_genetic_algorithms"}, {"score": 0.002993701876937243, "phrase": "serial_ga"}, {"score": 0.0027159094186967247, "phrase": "niche_hybrid_parallel_genetic_algorithm"}, {"score": 0.0026160472919135444, "phrase": "computational_cost"}, {"score": 0.002436289099444074, "phrase": "genetic_algorithm"}, {"score": 0.002418099158357658, "phrase": "niche_technique"}, {"score": 0.002337906603857861, "phrase": "computing_time"}, {"score": 0.002226734412397011, "phrase": "potential_algorithm_architecture"}, {"score": 0.002177218756653181, "phrase": "robust_and_global_search_characteristics"}, {"score": 0.0021367960510499575, "phrase": "strong_exploitation_ability"}, {"score": 0.0021049977753042253, "phrase": "computational_speedup_property"}], "paper_keywords": ["Truss optimization", " Genetic algorithm", " Frequency constraints", " Parallel computing", " Structural optimization"], "paper_abstract": "Truss shape and sizing optimization under frequency constraints is extremely useful when improving the dynamic performance of structures. However, coupling of two different types of design variables, nodal coordinates and cross-sectional areas, often lead to slow convergence or even divergence. Because shape and sizing variables coupled increase the number of design variables and the changes of shape and sizing variables are of widely different orders of magnitude. Otherwise, multiple frequency constraints often cause difficult dynamic sensitivity analysis. Thus optimal criteria and mathematical programming methods have considerable limitations on solving the problems because of needing complex dynamic sensitivity analysis and being easily trapped into the local optima. Genetic Algorithms (GAs) show great potentials to solve the truss shape and sizing optimization problems. Since GAs adopt global probabilistic population search techniques and require no gradient information. The improved genetic algorithms can effectively increase the solution quality. However, the serial GA is computationally expensive and is limited on gaining higher quality solutions. To solve the truss shape and sizing optimization problems with frequency constraints more effectively and efficiently, a Niche Hybrid Parallel Genetic Algorithm (NHPGA) is proposed to significantly reduce the computational cost and to further improve solution quality. The NHPGA is to blend the advantages of parallel computing, simplex search and genetic algorithm with niche technique. Several typical truss optimization examples demonstrate that NHPGA can significantly reduce computing time and attain higher quality solutions. It also suggests that the NHPGA provide a potential algorithm architecture, which effectively combines the robust and global search characteristics of genetic algorithm, strong exploitation ability of simplex search and computational speedup property of parallel computing.", "paper_title": "Truss optimization on shape and sizing with frequency constraints based on parallel genetic algorithm", "paper_id": "WOS:000289985500007"}