{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "scenario-based_specifications"}, {"score": 0.004500891637057374, "phrase": "automatic_generation"}, {"score": 0.004425616928975799, "phrase": "reactive_systems"}, {"score": 0.004207230913063179, "phrase": "scenario-based_language"}, {"score": 0.00413684709497912, "phrase": "live_sequence_charts"}, {"score": 0.003378385493203297, "phrase": "system_specification"}, {"score": 0.0031845067058084613, "phrase": "two-player_game"}, {"score": 0.0027819985260847577, "phrase": "winning_strategy"}, {"score": 0.00257831812581194, "phrase": "correct_implementation"}, {"score": 0.0023694065215394593, "phrase": "system_correctness"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Synthesis", " Live sequence charts", " LSC", " Specification", " Scenario-based programming"], "paper_abstract": "We consider the problem of the automatic generation of reactive systems from specifications given in the scenario-based language of live sequence charts (LSCs). We start by extending the language so that it becomes more suitable for synthesis. We then translate a system specification given in the language into a two-player game between the system and the environment. By solving the game, we generate a winning strategy for the system, which corresponds to a correct implementation of the specification. We also define two notions of system correctness, and show how each can be synthesized. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Synthesis from scenario-based specifications", "paper_id": "WOS:000301620100016"}