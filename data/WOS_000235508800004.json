{"auto_keywords": [{"score": 0.048329338700166584, "phrase": "cppc"}, {"score": 0.015719716506582538, "phrase": "portable_checkpointing"}, {"score": 0.004370814742381778, "phrase": "checkpointing_tool"}, {"score": 0.004274257668843717, "phrase": "heterogeneous_clusters"}, {"score": 0.004211069233133584, "phrase": "grid_infrastructures"}, {"score": 0.0040571383470418085, "phrase": "portable_protocols"}, {"score": 0.00399714680711765, "phrase": "portable_checkpoint_files"}, {"score": 0.0039380388343479384, "phrase": "portable_code"}, {"score": 0.0037940502405699765, "phrase": "variable_level"}, {"score": 0.0035744997458371335, "phrase": "small_checkpoint_files"}, {"score": 0.0034695189961509625, "phrase": "parallel_processes"}, {"score": 0.0033177813460815346, "phrase": "runtime_coordination"}, {"score": 0.0031257046538823354, "phrase": "restart_time"}, {"score": 0.0030338645940033875, "phrase": "restart_point"}, {"score": 0.0029667545082292376, "phrase": "directive-based_checkpointing_precompiler"}, {"score": 0.0027949428646076627, "phrase": "user's_effort"}, {"score": 0.0026330549554033876, "phrase": "parallel_mpi_programs"}, {"score": 0.0024805205483927743, "phrase": "sequential_ones"}, {"score": 0.0023719332915829268, "phrase": "parallel_programs"}, {"score": 0.002319431279824863, "phrase": "different_message-passing_libraries"}, {"score": 0.0021049977753042253, "phrase": "different_test_applications"}], "paper_keywords": ["parallel programming", " fault tolerance", " checkpointing", " MPI"], "paper_abstract": "This paper presents CPPC (Controller/Precompiler for Portable Checkpointing), a checkpointing tool designed for heterogeneous clusters and Grid infrastructures through the use of portable protocols, portable checkpoint files and portable code. It works at variable level being user-directed, thus generating small checkpoint files. It allows parallel processes to checkpoint independently, without runtime coordination or message-logging. Consistency is achieved at restart time by negotiating the restart point. A directive-based checkpointing precompiler has also been implemented to ease up user's effort. CPPC was designed to work with parallel MPI programs, though it can be used with sequential ones, and easily extended to parallel programs written using different message-passing libraries, due to its highly modular design. Experimental results are shown using CPPC with different test applications.", "paper_title": "Controller/precompiler for portable checkpointing", "paper_id": "WOS:000235508800004"}