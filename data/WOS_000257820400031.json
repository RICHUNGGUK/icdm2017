{"auto_keywords": [{"score": 0.045193980089541806, "phrase": "array_contents"}, {"score": 0.00481495049065317, "phrase": "simple_programs"}, {"score": 0.004780057833960188, "phrase": "array"}, {"score": 0.004701556483912018, "phrase": "array_dependency_analysis"}, {"score": 0.004123781267600542, "phrase": "abstract_interpretation"}, {"score": 0.003994714109598034, "phrase": "restricted_cases"}, {"score": 0.003808619097554076, "phrase": "\"_loops"}, {"score": 0.0037634608487353183, "phrase": "basic_idea"}, {"score": 0.003588100032858716, "phrase": "symbolic_intervals"}, {"score": 0.0030481444896915504, "phrase": "new_idea"}, {"score": 0.0030000149283621286, "phrase": "relational_abstract_properties"}, {"score": 0.0028601252251285025, "phrase": "abstract_variables"}, {"score": 0.0025382066972107777, "phrase": "abstract_semantics"}, {"score": 0.002478297391121455, "phrase": "abstract_properties"}, {"score": 0.0024006068621542642, "phrase": "prototype_tool"}, {"score": 0.002208035721125305, "phrase": "sorted_array"}, {"score": 0.0021049977753042253, "phrase": "\"_sentinel"}], "paper_keywords": ["verification", " theory", " program verification", " abstract interpretation", " invariant synthesis", " arrays", " sorting algorithms", " \"sentinel\""], "paper_abstract": "Array bound checking and array dependency analysis (for parallelization) have been widely studied. However, there are much less results about analyzing properties of array contents. In this paper, we propose a way of using abstract interpretation for discovering properties about array contents in some restricted cases: one-dimensional arrays, traversed by simple \"for\" loops. The basic idea, borrowed from [GRS05], consists in partitioning arrays into symbolic intervals (e.g., [1, i-1], [i, i], [i + 1, n]), and in associating with each such interval I and each array A an abstract variable A(I); the new idea is to consider relational abstract properties psi(A(I), B-I, ...) about these abstract variables, and to interpret such a property pointwise on the interval I: for all l is an element of I, psi(A[l], B[l], ...). The abstract semantics of our simple programs according to these abstract properties has been defined and implemented in a prototype tool. The method is able, for instance, to discover that the result of an insertion sort is a sorted array, or that, in an array traversal guarded by a \" sentinel\", the index stays within the bounds.", "paper_title": "Discovering properties about arrays in simple programs", "paper_id": "WOS:000257820400031"}