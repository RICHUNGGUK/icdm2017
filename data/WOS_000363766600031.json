{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cell-based_fetch_length_algorithm"}, {"score": 0.004481954307639453, "phrase": "two-dimensional_euclidean_plane"}, {"score": 0.004444317282171449, "phrase": "cell-based_algorithms"}, {"score": 0.004388450908826472, "phrase": "simple_and_effective_solution"}, {"score": 0.004296889776409743, "phrase": "input_area"}, {"score": 0.003999578057088828, "phrase": "appropriate_cells"}, {"score": 0.003932654396285872, "phrase": "resulting_structure"}, {"score": 0.0037701851296383405, "phrase": "input_objects"}, {"score": 0.0036759314172445934, "phrase": "cell_size"}, {"score": 0.0031710903727066313, "phrase": "nonempty_cells"}, {"score": 0.0029890721584351684, "phrase": "memory_accesses"}, {"score": 0.002889778121878728, "phrase": "graphics_processing_unit"}, {"score": 0.0028656911354639062, "phrase": "gpu"}, {"score": 0.0028174721236762317, "phrase": "control_flow_divergence"}, {"score": 0.0026445028886931837, "phrase": "explicit_attempts"}, {"score": 0.002535115422089855, "phrase": "input_data"}, {"score": 0.0025137856138000036, "phrase": "sparse_traversal"}, {"score": 0.0023996317685956213, "phrase": "initial_gpu_implementation"}, {"score": 0.0023100907305651872, "phrase": "speed_improvement"}, {"score": 0.0021590588269751816, "phrase": "random_order"}], "paper_keywords": ["GPGPU", " sparse rasterization", " cell-based algorithms"], "paper_abstract": "For determining distances (fetch lengths) from points to polygons in a two-dimensional Euclidean plane, cell-based algorithms provide a simple and effective solution. They divide the input area into a grid of cells that cover the area. The objects are stored into the appropriate cells, and the resulting structure is used for solving the problem. When the input objects are distributed unevenly or the cell size is small, most of the cells may be empty. The representation is then called sparse. In the method proposed in this work, each cell contains information about its distance to the nonempty cells. It is then possible to skip over several empty cells at a time without memory accesses. A cell-based fetch length algorithm is implemented on a graphics processing unit (GPU). Because control flow divergence reduces its performance, several methods to reduce the divergence are studied. While many of the explicit attempts turn out to be unsuccessful, sorting of the input data and sparse traversal are observed to greatly improve performance: compared with the initial GPU implementation, up to 45-fold speedup is reached. The speed improvement is greatest when the map is very sparse and the points are given in a random order. Copyright (c) 2015John Wiley & Sons, Ltd.", "paper_title": "Performance tuning and sparse traversal technique for a cell-based fetch length algorithm on a GPU", "paper_id": "WOS:000363766600031"}