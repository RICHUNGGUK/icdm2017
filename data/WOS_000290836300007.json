{"auto_keywords": [{"score": 0.031901763874956926, "phrase": "proposed_oracle"}, {"score": 0.015055366757314968, "phrase": "automated_test_oracle"}, {"score": 0.010451595682822935, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "software_test_oracle"}, {"score": 0.004711009518112459, "phrase": "important_issues"}, {"score": 0.004681724410889531, "phrase": "software_testing"}, {"score": 0.004580646169804186, "phrase": "test_oracles"}, {"score": 0.004552167735445606, "phrase": "reliable_sources"}, {"score": 0.004290262018446916, "phrase": "actual_results"}, {"score": 0.004081385289516914, "phrase": "oracle_challenges"}, {"score": 0.003968375473736599, "phrase": "output-domain_generation"}, {"score": 0.003906944616017869, "phrase": "output_domain_mapping"}, {"score": 0.0037633479183921677, "phrase": "actual_outputs"}, {"score": 0.0036705501633715297, "phrase": "automated_test_oracle_framework"}, {"score": 0.003513606861892222, "phrase": "output_domain"}, {"score": 0.0034808560862878567, "phrase": "multi-networks_oracles"}, {"score": 0.0034484095283984443, "phrase": "artificial_neural_networks"}, {"score": 0.00338441786634626, "phrase": "second_challenge"}, {"score": 0.0033528672260542854, "phrase": "last_challenge"}, {"score": 0.003300932921856956, "phrase": "automated_comparator"}, {"score": 0.0032599633778910516, "phrase": "oracle_precision"}, {"score": 0.0032195006850887363, "phrase": "comparison_tolerance"}, {"score": 0.0031400710087822487, "phrase": "industry_strength_case_study"}, {"score": 0.002931569771634119, "phrase": "misclassification_error"}, {"score": 0.0028951712636442906, "phrase": "mutation_testing"}, {"score": 0.0028414166961286233, "phrase": "evaluation_framework"}, {"score": 0.0027886573969044042, "phrase": "case_study"}, {"score": 0.0027626452333204144, "phrase": "golden_version"}, {"score": 0.002686051638007268, "phrase": "comparative_study"}, {"score": 0.0026609940110902666, "phrase": "existing_automated_oracles"}, {"score": 0.0026361695237709874, "phrase": "proposed_one"}, {"score": 0.0024842242921857705, "phrase": "oracle_generation_process"}, {"score": 0.0023047189563870593, "phrase": "injected_faults"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software test oracle", " I/O Relationship Analysis", " Artificial neural networks", " Mutation testing"], "paper_abstract": "Context: One of the important issues of software testing is to provide an automated test oracle. Test oracles are reliable sources of how the software under test must operate. In particular, they are used to evaluate the actual results that produced by the software. However, in order to generate an automated test oracle, oracle challenges need to be addressed. These challenges are output-domain generation, input domain to output domain mapping, and a comparator to decide on the accuracy of the actual outputs. Objective: This paper proposes an automated test oracle framework to address all of these challenges. Method: I/O Relationship Analysis is used to generate the output domain automatically and Multi-Networks Oracles based on artificial neural networks are introduced to handle the second challenge. The last challenge is addressed using an automated comparator that adjusts the oracle precision by defining the comparison tolerance. The proposed approach was evaluated using an industry strength case study, which was injected with some faults. The quality of the proposed oracle was measured by assessing its accuracy, precision, misclassification error and practicality. Mutation testing was considered to provide the evaluation framework by implementing two different versions of the case study: a Golden Version and a Mutated Version. Furthermore, a comparative study between the existing automated oracles and the proposed one is provided based on which challenges they can automate. Results: Results indicate that the proposed approach automated the oracle generation process 97% in this experiment. Accuracy of the proposed oracle was up to 98.26%, and the oracle detected up to 97.7% of the injected faults. Conclusion: Consequently, the results of the study highlight the practicality of the proposed oracle in addition to the automation it offers. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "An automated framework for software test oracle", "paper_id": "WOS:000290836300007"}