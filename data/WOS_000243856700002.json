{"auto_keywords": [{"score": 0.04947137057828526, "phrase": "regular_languages"}, {"score": 0.048284223646677074, "phrase": "apc"}, {"score": 0.028818583867887944, "phrase": "pspace"}, {"score": 0.00481495049065317, "phrase": "natural_subclass"}, {"score": 0.004694092086199672, "phrase": "alphabetic_pattern_constraints"}, {"score": 0.004267163206961948, "phrase": "iterative_application"}, {"score": 0.003709974534103202, "phrase": "closure_property"}, {"score": 0.003437248394635138, "phrase": "regular_model_checking"}, {"score": 0.0033084729942065142, "phrase": "parametrized_linear_networks"}, {"score": 0.0032666255024083983, "phrase": "regular_processes"}, {"score": 0.0030847461428168614, "phrase": "asynchronous_distributed_systems"}, {"score": 0.002614098756035372, "phrase": "nfa"}, {"score": 0.002532153969581394, "phrase": "nlogspace"}, {"score": 0.0021049977753042253, "phrase": "class_apc."}], "paper_keywords": ["regular model checking", " semi-commutations", " rewrite systems", " verification"], "paper_abstract": "We propose a natural Subclass of regular languages (Alphabetic Pattern Constraints, APC) which is effectively closed under permutation rewriting, i.e., under iterative application of rules of the form ab -> ba. It is well-known that regular languages do not have this Closure property, in general. Our result can be applied for example to regular model checking, for verifying properties of parametrized linear networks Of regular processes, and for modeling and verifying properties of asynchronous distributed systems. We also consider the complexity of testing membership in APC and show that the question is complete for PSPACE when the input is an NFA, and complete for NLOGSPACE when it is a DFA. Moreover, we show that both the inclusion problem and the question of closure under permutation rewriting are PSPACE-complete when we restrict to the class APC. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Permutation rewriting and algorithmic verification", "paper_id": "WOS:000243856700002"}