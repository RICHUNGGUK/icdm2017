{"auto_keywords": [{"score": 0.026737954955972858, "phrase": "bugassist"}, {"score": 0.00481495049065317, "phrase": "cause_clue_clauses"}, {"score": 0.004737879690862494, "phrase": "maximum_satisfiability"}, {"score": 0.004342430078306461, "phrase": "error_cause_localization"}, {"score": 0.00424538577579635, "phrase": "maximal_satisfiability_problem"}, {"score": 0.004084022274429013, "phrase": "maximum_number"}, {"score": 0.0040186038781533946, "phrase": "boolean_formula"}, {"score": 0.003865826699096508, "phrase": "intuitive_level"}, {"score": 0.003623949225126944, "phrase": "bounded_model_checking"}, {"score": 0.0034081501761600067, "phrase": "bounded_unrolling"}, {"score": 0.003342700977158772, "phrase": "boolean_trace_formula"}, {"score": 0.003093195541269291, "phrase": "unsatisfiable_formula"}, {"score": 0.002927780883930371, "phrase": "assertion_condition"}, {"score": 0.002834630855559476, "phrase": "max-sat"}, {"score": 0.0027891678712374975, "phrase": "maximal_set"}, {"score": 0.002622947550220266, "phrase": "potential_cause"}, {"score": 0.0024906610581090223, "phrase": "error_localization"}, {"score": 0.00247460024299964, "phrase": "c_programs"}, {"score": 0.002380381895973937, "phrase": "benchmark_examples"}, {"score": 0.0023650305205893353, "phrase": "injected_faults"}, {"score": 0.0021049977753042253, "phrase": "common_classes"}], "paper_keywords": ["Verification", " Reliability", " Debugging", " Fault localization", " Maximum Satisfiability"], "paper_abstract": "Much effort is spent by programmers everyday in trying to reduce long, failing execution traces to the cause of the error. We present an algorithm for error cause localization based on a reduction to the maximal satisfiability problem (MAX-SAT), which asks what is the maximum number of clauses of a Boolean formula that can be simultaneously satisfied by an assignment. At an intuitive level, our algorithm takes as input a program and a failing test, and comprises the following three steps. First, using bounded model checking, and a bound obtained from the execution of the test, we encode the semantics of a bounded unrolling of the program as a Boolean trace formula. Second, for a failing program execution (e. g., one that violates an assertion or a post-condition), we construct an unsatisfiable formula by taking the formula and additionally asserting that the input is the failing test and that the assertion condition does hold at the end. Third, using MAX-SAT, we find a maximal set of clauses in this formula that can be satisfied together, and output the complement set as a potential cause of the error. We have implemented our algorithm in a tool called BugAssist that performs error localization for C programs. We demonstrate the effectiveness of BugAssist on a set of benchmark examples with injected faults, and show that in most cases, BugAssist can quickly and precisely isolate a few lines of code whose change eliminates the error. We also demonstrate how our algorithm can be modified to automatically suggest fixes for common classes of errors such as off-by-one.", "paper_title": "Cause Clue Clauses: Error Localization using Maximum Satisfiability", "paper_id": "WOS:000294609500038"}