{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "thrashing_effect"}, {"score": 0.004265354774450696, "phrase": "active_memory_allocations"}, {"score": 0.004126623209579942, "phrase": "physical_memory"}, {"score": 0.003948613642680196, "phrase": "physical_memory_range"}, {"score": 0.003820144626025562, "phrase": "operating_system"}, {"score": 0.0035755653799043, "phrase": "context_switch"}, {"score": 0.00325555555110395, "phrase": "bin_packing_approximation_algorithms"}, {"score": 0.0030808211830129304, "phrase": "scheduling-medium-term_scheduling"}, {"score": 0.002947790697936243, "phrase": "medium-term_scheduler"}, {"score": 0.002851790448644913, "phrase": "round-robin_manner"}, {"score": 0.002789528662623221, "phrase": "short-term_scheduler"}, {"score": 0.0027437235598539904, "phrase": "standard_linux_scheduler"}, {"score": 0.002470547930651519, "phrase": "shared_memory_maintenance"}, {"score": 0.0023249757987087055, "phrase": "new_scheduler"}, {"score": 0.0022368274529152342, "phrase": "original_scheduler"}, {"score": 0.0021879624017959493, "phrase": "real-time_privileges"}, {"score": 0.002128376306688074, "phrase": "significant_improvement"}, {"score": 0.0021049977753042253, "phrase": "heavily_loaded_memories"}], "paper_keywords": ["scheduling", " allocation", " deallocation strategies", " swapping", " virtual memory", " process management"], "paper_abstract": "We suggest a method for minimizing the paging on a system with a very heavy memory usage. Sometimes there are processes with active memory allocations that should be in the physical memory, but their total size exceeds the physical memory range. In such cases, the operating system starts swapping pages in and out of the memory on every context switch. We minimize this thrashing by splitting the processes into a number of bins, using Bin Packing approximation algorithms. We modify the scheduler to have two levels of scheduling-medium-term scheduling and short-term scheduling. The medium-term scheduler switches the bins in a Round-Robin manner, whereas the short-term scheduler runs the standard Linux scheduler among the processes in each bin. We show that this feature does not impose modifications on the shared memory maintenance. In addition, we show how to adjust the new scheduler to fit some elements of the original scheduler like priority and real-time privileges. Experimental results show significant improvement on heavily loaded memories. The code of this project is free and can be found in http://www.cs.biu.ac.il/similar to reubenm.", "paper_title": "Medium-term scheduler as a solution for the thrashing effect", "paper_id": "WOS:000237172200004"}