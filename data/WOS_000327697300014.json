{"auto_keywords": [{"score": 0.04333695708487271, "phrase": "set-based_pre-analysis"}, {"score": 0.00481495049065317, "phrase": "points-to_analysis"}, {"score": 0.00450052670755585, "phrase": "flow-insensitive_points"}, {"score": 0.0043080553835735825, "phrase": "static_abstraction"}, {"score": 0.004173244935967375, "phrase": "program's_variables"}, {"score": 0.0039005612858880115, "phrase": "set_level"}, {"score": 0.0038390240716280302, "phrase": "value_level"}, {"score": 0.0037485269508155516, "phrase": "set_level_results"}, {"score": 0.0037188360359702182, "phrase": "significant_optimization_opportunities"}, {"score": 0.0036311617742547167, "phrase": "input_program"}, {"score": 0.003588100032858716, "phrase": "simplified_form"}, {"score": 0.0034619440946558186, "phrase": "rewrite_results"}, {"score": 0.0034073030552032304, "phrase": "local_variables"}, {"score": 0.003313741359811683, "phrase": "subsequent_value-based_points"}, {"score": 0.0031467250930224126, "phrase": "normal_form"}, {"score": 0.0030000149283621255, "phrase": "off-line_optimization"}, {"score": 0.0028715299874549245, "phrase": "new_elements"}, {"score": 0.0024101837218440834, "phrase": "different_analyses"}, {"score": 0.0023626775529531486, "phrase": "java_programs"}, {"score": 0.0022977342663599042, "phrase": "program's_local_variables"}, {"score": 0.0022434880661725493, "phrase": "computed_context-sensitive_points"}, {"score": 0.002181813794658713, "phrase": "wide_set"}], "paper_keywords": ["points-to analysis", " optimization", " off-line"], "paper_abstract": "We present set-based pre-analysis: a virtually universal optimization technique for flow-insensitive points-to analysis. Points-to analysis computes a static abstraction of how object values flow through a program's variables. Set-based pre-analysis relies on the observation that much of this reasoning can take place at the set level rather than the value level. Computing constraints at the set level results in significant optimization opportunities: we can rewrite the input program into a simplified form with the same essential points-to properties. This rewrite results in removing both local variables and instructions, thus simplifying the subsequent value-based points-to computation. Effectively, set-based pre-analysis puts the program in a normal form optimized for points-to analysis. Compared to other techniques for off-line optimization of points-to analyses in the literature, the new elements of our approach are the ability to eliminate statements, and not just variables, as well as its modularity: set-based pre-analysis can be performed on the input just once, e. g., allowing the pre-optimization of libraries that are subsequently reused many times and for different analyses. In experiments with Java programs, set-based pre-analysis eliminates 30% of the program's local variables and 30% or more of computed context-sensitive points-to facts, over a wide set of benchmarks and analyses, resulting in a similar to 20% average speedup (max: 110%, median: 18%).", "paper_title": "Set-Based Pre-Processing for Points-To Analysis", "paper_id": "WOS:000327697300014"}