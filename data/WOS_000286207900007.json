{"auto_keywords": [{"score": 0.040341907947413075, "phrase": "xml_tree_pattern"}, {"score": 0.00481495049065317, "phrase": "business_and_enterprises"}, {"score": 0.004725526595221342, "phrase": "xml"}, {"score": 0.004551199992546761, "phrase": "increasing_need"}, {"score": 0.004508661664944657, "phrase": "efficient_processing"}, {"score": 0.004424768776701965, "phrase": "xml_data"}, {"score": 0.004261617028111862, "phrase": "tree_pattern_query"}, {"score": 0.004201991568145053, "phrase": "xml_database"}, {"score": 0.004143196873246147, "phrase": "core_operation"}, {"score": 0.004104456271230213, "phrase": "xml_query_processing"}, {"score": 0.004066076430818046, "phrase": "prior_works"}, {"score": 0.004009175817816061, "phrase": "holistic_twig_pattern"}, {"score": 0.003916098498242888, "phrase": "efficient_technique"}, {"score": 0.0034984340449789745, "phrase": "xml_query_languages"}, {"score": 0.0032602525602322832, "phrase": "negation_function"}, {"score": 0.003229741076887151, "phrase": "order-based_axis"}, {"score": 0.0030525578912808647, "phrase": "large_set"}, {"score": 0.0028446460307503343, "phrase": "a-d_relationships"}, {"score": 0.0026633568650501873, "phrase": "theoretical_framework"}, {"score": 0.002552946390854313, "phrase": "intrinsic_reason"}, {"score": 0.002470237978694949, "phrase": "holistic_algorithms"}, {"score": 0.0023456351719724957, "phrase": "novel_algorithms"}, {"score": 0.002280333649167796, "phrase": "extended_xml_tree_patterns"}, {"score": 0.0022273034991008326, "phrase": "experimental_results"}, {"score": 0.0021755038991725147, "phrase": "synthetic_data_sets"}], "paper_keywords": ["Query processing", " XML/XSL/RDF", " algorithms", " tree pattern"], "paper_abstract": "As business and enterprises generate and exchange XML data more often, there is an increasing need for efficient processing of queries on XML data. Searching for the occurrences of a tree pattern query in an XML database is a core operation in XML query processing. Prior works demonstrate that holistic twig pattern matching algorithm is an efficient technique to answer an XML tree pattern with parent-child (P-C) and ancestor-descendant (A-D) relationships, as it can effectively control the size of intermediate results during query processing. However, XML query languages (e. g., XPath and XQuery) define more axes and functions such as negation function, order-based axis, and wildcards. In this paper, we research a large set of XML tree pattern, called extended XML tree pattern, which may include P-C, A-D relationships, negation functions, wildcards, and order restriction. We establish a theoretical framework about \"matching cross\" which demonstrates the intrinsic reason in the proof of optimality on holistic algorithms. Based on our theorems, we propose a set of novel algorithms to efficiently process three categories of extended XML tree patterns. A set of experimental results on both real-life and synthetic data sets demonstrate the effectiveness and efficiency of our proposed theories and algorithms.", "paper_title": "Extended XML Tree Pattern Matching: Theories and Algorithms", "paper_id": "WOS:000286207900007"}