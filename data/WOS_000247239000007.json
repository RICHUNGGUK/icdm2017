{"auto_keywords": [{"score": 0.04135205133273675, "phrase": "verification_approach"}, {"score": 0.03253253627295769, "phrase": "synchronization_policy"}, {"score": 0.00481495049065317, "phrase": "significant_progress"}, {"score": 0.004749106104067268, "phrase": "automated_verification_techniques"}, {"score": 0.004652016085325825, "phrase": "model_checking"}, {"score": 0.004342430078306461, "phrase": "challenging_problem"}, {"score": 0.0038624981944755813, "phrase": "design_patterns"}, {"score": 0.0037834649508375544, "phrase": "scalable_automated_verification"}, {"score": 0.003459191419478298, "phrase": "highly_dependable_concurrent_programming"}, {"score": 0.0033883824438527316, "phrase": "design_pattern"}, {"score": 0.0033419808453225516, "phrase": "concurrency_controllers"}, {"score": 0.00327356326590461, "phrase": "concurrency_controller_class"}, {"score": 0.003140888248194296, "phrase": "guarded_commands"}, {"score": 0.0029114187110123105, "phrase": "correct_usage"}, {"score": 0.002755104031926742, "phrase": "assume-guarantee_style_modular_verification_strategy"}, {"score": 0.0026252106881752067, "phrase": "controller_behavior"}, {"score": 0.002318566141177149, "phrase": "behavior_verification_tasks"}, {"score": 0.0022710523337245337, "phrase": "specialized_verification_techniques"}, {"score": 0.002194011800331242, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "presented_approach"}], "paper_keywords": ["model checking", " interfaces", " concurrent programming", " synchronization", " design patterns"], "paper_abstract": "There has been significant progress in automated verification techniques based on model checking. However, scalable software model checking remains a challenging problem. We believe that this problem can be addressed using a design for verification approach based on design patterns that facilitate scalable automated verification. In this paper, we present a design for verification approach for highly dependable concurrent programming using a design pattern for concurrency controllers. A concurrency controller class consists of a set of guarded commands defining a synchronization policy, and a stateful interface describing the correct usage of the synchronization policy. We present an assume-guarantee style modular verification strategy which separates the verification of the controller behavior from the verification of the conformance to its interface. This allows us to execute the interface and behavior verification tasks separately using specialized verification techniques. We present a case study demonstrating the effectiveness of the presented approach.", "paper_title": "Highly dependable concurrent programming using design for verification", "paper_id": "WOS:000247239000007"}