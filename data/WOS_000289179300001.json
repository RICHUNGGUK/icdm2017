{"auto_keywords": [{"score": 0.03733542705020162, "phrase": "abstraction_gap"}, {"score": 0.00481495049065317, "phrase": "runtime_software_architecture"}, {"score": 0.004612147352416241, "phrase": "runtime_software_architectures"}, {"score": 0.004231699728933577, "phrase": "high_abstraction_level"}, {"score": 0.0041773934798743405, "phrase": "key_issue"}, {"score": 0.004123849910528338, "phrase": "rsa"}, {"score": 0.004035946043145475, "phrase": "causal_connection"}, {"score": 0.003799796252156605, "phrase": "current_system"}, {"score": 0.0036553070575015344, "phrase": "proper_system_changes"}, {"score": 0.003608370966473902, "phrase": "main_challenge"}, {"score": 0.003324743991757282, "phrase": "synchronization_mechanism"}, {"score": 0.003296212583539166, "phrase": "architecture_configurations"}, {"score": 0.003267925215811654, "phrase": "system_states"}, {"score": 0.003212074324593725, "phrase": "causal_connections"}, {"score": 0.00306334226516593, "phrase": "generic_solution"}, {"score": 0.0029467742734417255, "phrase": "bidirectional_transformation"}, {"score": 0.002555950807368337, "phrase": "system_manipulations"}, {"score": 0.0025014259919355453, "phrase": "generative_tool-set"}, {"score": 0.0024061887405214186, "phrase": "wide_class"}, {"score": 0.0023046064114537503, "phrase": "jonas_jee_system"}, {"score": 0.0021789194955896124, "phrase": "practical_systems"}, {"score": 0.0021601997088758957, "phrase": "typical_architecture_models"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software architecture", " Bidirectional transformation", " Runtime system management"], "paper_abstract": "Runtime software architectures (RSA) are architecture-level, dynamic representations of running software systems, which help monitor and adapt the systems at a high abstraction level. The key issue to support RSA is to maintain the causal connection between the architecture and the system, ensuring that the architecture represents the current system, and the modifications on the architecture cause proper system changes. The main challenge here is the abstraction gap between the architecture and the system. In this paper, we investigate the synchronization mechanism between architecture configurations and system states for maintaining the causal connections. We identify four required properties for such synchronization, and provide a generic solution satisfying these properties. Specifically, we utilize bidirectional transformation to bridge the abstraction gap between architecture and system, and design an algorithm based on it, which addresses issues such as conflicts between architecture and system changes, and exceptions of system manipulations. We provide a generative tool-set that helps developers implement this approach on a wide class of systems. We have successfully applied our approach on JOnAS JEE system to support it with C2-styled runtime software architecture, as well as some other cases between practical systems and typical architecture models. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Supporting runtime software architecture: A bidirectional-transformation-based approach", "paper_id": "WOS:000289179300001"}