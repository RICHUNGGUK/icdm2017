{"auto_keywords": [{"score": 0.004698229304089357, "phrase": "distributed_applications"}, {"score": 0.004293840838533456, "phrase": "unreliable_nodes"}, {"score": 0.004224130367280183, "phrase": "communication_links"}, {"score": 0.003797690272118125, "phrase": "reliable_role_management"}, {"score": 0.003277140908834426, "phrase": "self-organizing_and_self-stabilizing_role_assignment_mechanism"}, {"score": 0.002921975748248106, "phrase": "deployed_algorithms"}, {"score": 0.0025211567863488962, "phrase": "transient_fault"}, {"score": 0.002266246304762945, "phrase": "proposed_algorithms"}, {"score": 0.00219311232069446, "phrase": "communication_overhead"}, {"score": 0.002157433262687853, "phrase": "memory_usage"}, {"score": 0.0021049977753042253, "phrase": "stabilization_time"}], "paper_keywords": [""], "paper_abstract": "Developing distributed applications for sensor/actuator networks is challenging, particularly, with regard to unreliable nodes and communication links. Splitting applications into roles eases the development significantly but presumes a reliable role management that autonomously assigns roles to devices depending on their capabilities. In this paper, we present a self-organizing and self-stabilizing role assignment mechanism as an integral part of alight-weight, flexible middleware. The deployed algorithms tolerate the addition and removal of devices at runtime and are also able to recover from any transient fault. Considering that resources are restricted on many devices, we analyze the proposed algorithms with respect to communication overhead, memory usage, and stabilization time.", "paper_title": "Self-organizing and self-stabilizing role assignment in sensor/actuator networks", "paper_id": "WOS:000243318600052"}