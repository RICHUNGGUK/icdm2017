{"auto_keywords": [{"score": 0.04449264151645753, "phrase": "snapshot_operation"}, {"score": 0.04161684142707831, "phrase": "update_operation"}, {"score": 0.03359696120280819, "phrase": "component_r"}, {"score": 0.03334597480924377, "phrase": "partial_snapshot"}, {"score": 0.026472421418502128, "phrase": "later\"_strategy"}, {"score": 0.00481495049065317, "phrase": "atomic_snapshot_object"}, {"score": 0.00469260526822018, "phrase": "asynchronous_processes"}, {"score": 0.0043215158337835706, "phrase": "new_value"}, {"score": 0.004094018760244776, "phrase": "net_effect"}, {"score": 0.003928728331703105, "phrase": "concurrent_snapshot_operations"}, {"score": 0.0038189638340666936, "phrase": "partial_snapshot_objects"}, {"score": 0.003674192201248236, "phrase": "input_parameter"}, {"score": 0.0034184246667842105, "phrase": "partial_snapshot_object_algorithms"}, {"score": 0.0028320036365874273, "phrase": "second_contribution"}, {"score": 0.0027813397260607487, "phrase": "partial_snapshot_algorithm"}, {"score": 0.0027035450387550277, "phrase": "previous_efficiency_properties"}, {"score": 0.0026415117759038547, "phrase": "proposed_algorithms"}, {"score": 0.002451122390347861, "phrase": "previous_algorithms"}, {"score": 0.0023278569001363263, "phrase": "base_registers"}, {"score": 0.0022568866348667547, "phrase": "interesting_tradeoff"}, {"score": 0.0022394839933089074, "phrase": "synchronization_power"}, {"score": 0.0022222152430170254, "phrase": "base_operations"}, {"score": 0.00219372874680729, "phrase": "base_atomic_registers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Adaptive algorithm", " Asynchronous shared memory system", " Asynchrony", " Atomicity", " Efficiency", " Concurrency", " Linearizability", " LL/SC atomic registers", " Locality", " Partial snapshot", " Process crash", " Read/write atomic register", " Wait-free algorithm"], "paper_abstract": "An atomic snapshot object is an object that can be concurrently accessed by asynchronous processes prone to crash. It is made of m components (base atomic registers) and is defined by two operations: an update operation that allows a process to atomically assign a new value to a component and a snapshot operation that atomically reads and returns the values of all the components. To cope with the net effect of concurrency, asynchrony and failures, the algorithm implementing the update operation has to help concurrent snapshot operations so that they always terminate. This paper is on partial snapshot objects. Such an object provides a snapshot operation that can take any subset of the components as input parameter, and atomically reads and returns the values of this subset of components. The paper has two contributions. The first is the introduction of two properties for partial snapshot object algorithms, called help-locality and freshness. Help-locality requires that an update operation helps only the concurrent partial snapshot operations that read the component it writes. When an update of a component r helps a partial snapshot, freshness requires that the update provides the partial snapshot with a value of the component r that is at least as recent as the value it writes into that component. (No snapshot algorithm proposed so far satisfies these properties). The second contribution consists of an update and a partial snapshot algorithm that are wait-free, linearizable and satisfy the previous efficiency properties. Interestingly, the principle that underlies the proposed algorithms is different from the one used so far, namely, it is based on the \"write first, and help later\" strategy. An improvement of the previous algorithms is also presented. Based on LL/SC atomic registers (instead of read/write registers), this improvement decreases the number of base registers from O(n(2)) to O(n). This shows an interesting tradeoff relating the synchronization power of the base operations and the number of base atomic registers when using the \"write first, and help later\" strategy. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Help when needed, but no more: Efficient read/write partial snapshot", "paper_id": "WOS:000296997700001"}