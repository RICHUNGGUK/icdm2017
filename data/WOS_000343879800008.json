{"auto_keywords": [{"score": 0.031127679754225243, "phrase": "significant_effect"}, {"score": 0.02814596192888193, "phrase": "cache_fault_rate"}, {"score": 0.00481495049065317, "phrase": "aspect_oriented_software"}, {"score": 0.004362870617347183, "phrase": "aspect-oriented_programming"}, {"score": 0.004047020753789236, "phrase": "base_program"}, {"score": 0.0038431888954930083, "phrase": "control_flow_switching"}, {"score": 0.003771631577951067, "phrase": "incremental_effect"}, {"score": 0.003598492288058048, "phrase": "join_points_increases"}, {"score": 0.0034494494982242187, "phrase": "case_study"}, {"score": 0.003154701855951328, "phrase": "base_program_performance"}, {"score": 0.003081400693055518, "phrase": "aspect_program"}, {"score": 0.002995677265350124, "phrase": "aspect-oriented_approach"}, {"score": 0.0028047899594686003, "phrase": "aspect-oriented_program"}, {"score": 0.002752513434446804, "phrase": "non-aspect_program"}, {"score": 0.002564985233317994, "phrase": "non-aspect_programs"}, {"score": 0.0024128022009415476, "phrase": "close_correlation"}, {"score": 0.0022696277881969896, "phrase": "aspect_code"}, {"score": 0.0021249064184347658, "phrase": "large_number"}, {"score": 0.0021049977753042253, "phrase": "join_points"}], "paper_keywords": ["Aspect-oriented programming", " Architectural patterns", " Concurrency", " Software performance"], "paper_abstract": "The aim of this work is to measure the impact of aspect-oriented programming on software performance. Thus, we hypothesized as follow: adding aspects to a base program will affect its performance because of the overhead caused by the control flow switching, and that incremental effect on performance is more obvious as the number of join points increases. To test our hypotheses we carried out a case study of two concurrent architectures: Half-Sync/Half-Async and Leader/Followers. Aspects are extracted and encapsulated and the base program performance was compared to the aspect program. Our results show that the aspect-oriented approach does not have significant effect on the performance and that in some cases an aspect-oriented program even outperforms the non-aspect program. We also investigated the effect of cache fault rate on performance for both aspect and non-aspect programs. Based on our experiments, the results demonstrate that there is a close correlation between the cache fault rate and performance, which may be in favor of aspect code if some aspects are frequently accessed. Additionally, the introduction of a large number of join points does not have significant effect on performance.", "paper_title": "Measuring the performance of aspect oriented software: A case study of Leader/Followers and Half-Sync/Half-Async architectures", "paper_id": "WOS:000343879800008"}