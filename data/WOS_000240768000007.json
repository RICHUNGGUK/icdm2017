{"auto_keywords": [{"score": 0.04253822983451731, "phrase": "mhaskell"}, {"score": 0.011356848661265604, "phrase": "weak_mobility"}, {"score": 0.008092406743071361, "phrase": "strong_mobility"}, {"score": 0.00481495049065317, "phrase": "mobile_haskell"}, {"score": 0.00469500313566324, "phrase": "mobile_language"}, {"score": 0.0041384457437123635, "phrase": "computational_grid._mobile_haskell"}, {"score": 0.003959594975607075, "phrase": "small_extension"}, {"score": 0.003909923690310641, "phrase": "concurrent_haskell"}, {"score": 0.003764603272900618, "phrase": "distributed_mobile_software"}, {"score": 0.003693973656103879, "phrase": "higher_order_communication_channels"}, {"score": 0.0036476222647061243, "phrase": "mobile_channels"}, {"score": 0.003317970131738248, "phrase": "new_computations"}, {"score": 0.0032763212574036748, "phrase": "remote_locations"}, {"score": 0.0030371471832258317, "phrase": "running_threads"}, {"score": 0.0027625134766418266, "phrase": "higher-order_channels"}, {"score": 0.0027278178983579085, "phrase": "first-class_continuations"}, {"score": 0.002676587673012276, "phrase": "haskell's_high_level_features"}, {"score": 0.002609770322855842, "phrase": "higher-order_functions"}, {"score": 0.0024968185204913957, "phrase": "monadic_programming"}, {"score": 0.0023438664524018634, "phrase": "runtime_system"}, {"score": 0.0021049977753042253, "phrase": "mobile_agent_case_study"}], "paper_keywords": ["mobile computation", " strong mobility", " functional programming", " Haskell"], "paper_abstract": "In a mobile language, computations can move between locations in a network to better utilise resources, e.g., as in a computational GRID. Mobile Haskell, or mHaskell, is a small extension of Concurrent Haskell that enables the construction of distributed mobile software by introducing higher order communication channels called Mobile Channels (MChannels). mHaskell only provides weak mobility, i.e. the ability to start new computations on remote locations. This paper shows how strong mobility, i.e. the ability to migrate running threads between locations, can be implemented in a language like mHaskell with weak mobility, higher-order channels and first-class continuations. Using Haskell's high level features, such as higher-order functions, type classes and support for monadic programming, strong mobility is achieved without any changes to the runtime system, or built-in support for continuations. Strong mobility is illustrated with examples and a mobile agent case study.", "paper_title": "Strong mobility in Mobile Haskell", "paper_id": "WOS:000240768000007"}