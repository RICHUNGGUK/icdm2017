{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data-flow_computations"}, {"score": 0.004737579882204798, "phrase": "canonical_ted_representation"}, {"score": 0.0046238380150870435, "phrase": "efficient_graph-based_method"}, {"score": 0.003996271202811961, "phrase": "common-subexpression_elimination"}, {"score": 0.0038375280115736958, "phrase": "algebraic_expressions"}, {"score": 0.0037150687722055727, "phrase": "canonical_taylor_expansion_diagram_representation"}, {"score": 0.0034817084307034955, "phrase": "latency_and_hardware_cost"}, {"score": 0.0033163269450817716, "phrase": "scheduled_implementation"}, {"score": 0.003236596168242036, "phrase": "generated_data-flow_graphs"}, {"score": 0.003107935254560724, "phrase": "high-level_synthesis"}, {"score": 0.002936331371903168, "phrase": "initial_specification"}, {"score": 0.0028425481299483254, "phrase": "traditional_algebraic_decomposition_methods"}, {"score": 0.002685558057339722, "phrase": "resulting_implementations"}, {"score": 0.002599763359352916, "phrase": "better_performance"}, {"score": 0.0025578967205807843, "phrase": "smaller_datapath_area"}, {"score": 0.002456148932305311, "phrase": "traditional_algebraic_decomposition_techniques"}, {"score": 0.0023970487263732737, "phrase": "described_method"}, {"score": 0.0022830706430588482, "phrase": "arbitrary_algebraic_expressions"}, {"score": 0.0021049977753042253, "phrase": "application_domain"}], "paper_keywords": ["Algebraic optimizations", " common-subexpression elimination (CSE)", " data-flow graphs (DFGs)", " high-level synthesis", " Taylor expansion diagrams (TEDs)"], "paper_abstract": "An efficient graph-based method to optimize polynomial expressions in data-flow computations is presented. The method is based on the factorization, common-subexpression elimination, and decomposition of algebraic expressions performed on a canonical Taylor expansion diagram representation. It targets the minimization of the latency and hardware cost of arithmetic operators in the scheduled implementation. The generated data-flow graphs are better suited for high-level synthesis than those extracted directly from the initial specification or obtained with traditional algebraic decomposition methods. Experimental results show that the resulting implementations are characterized by better performance and smaller datapath area than those obtained using traditional algebraic decomposition techniques. The described method is generic, applicable to arbitrary algebraic expressions, and does not require any knowledge of the application domain.", "paper_title": "Optimization of Data-Flow Computations Using Canonical TED Representation", "paper_id": "WOS:000269155200004"}