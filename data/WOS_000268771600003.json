{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "theta"}, {"score": 0.004559661374976129, "phrase": "novel_partially_synchronous_system_model"}, {"score": 0.004457309741979921, "phrase": "asynchronous_model"}, {"score": 0.0041637779492720295, "phrase": "longest_and_shortest_end-to-end_delays"}, {"score": 0.004015182362035361, "phrase": "upper_bound"}, {"score": 0.0036663981146086103, "phrase": "unknown_global_stabilization_time"}, {"score": 0.0033937776228549557, "phrase": "bounded_drift_local_clocks"}, {"score": 0.0032725712584012953, "phrase": "vlsi_systems-on-chip"}, {"score": 0.003015401937358271, "phrase": "lock-step_rounds"}, {"score": 0.0028944757265206332, "phrase": "byzantine_failures"}, {"score": 0.0028037753646260937, "phrase": "distributed_computing"}, {"score": 0.0026913130726432645, "phrase": "basic_consensus_algorithm"}, {"score": 0.00266693888510356, "phrase": "partially_synchronous_systems"}, {"score": 0.0026427848602443267, "phrase": "dwork_et_al"}, {"score": 0.002468450551616404, "phrase": "byzantine_consensus"}, {"score": 0.0023694065215394593, "phrase": "timing_transformation_technique"}, {"score": 0.0023372808856170386, "phrase": "simple_correctness_proofs"}, {"score": 0.002193013499219711, "phrase": "detailed_relation"}], "paper_keywords": ["Computing models", " Fault-tolerant distributed algorithms", " Partially synchronous systems", " Clocks and time"], "paper_abstract": "We present a novel partially synchronous system model, which augments the asynchronous model by a (possibly unknown) bound I similar to on the ratio of longest and shortest end-to-end delays of messages simultaneously in transit. An upper bound on those delays need not exist, however, and even I similar to may hold only after some unknown global stabilization time. I similar to-algorithms are fully message-driven and do not have access to bounded drift local clocks, which makes them particularly suitable for VLSI Systems-on-Chip, for example. In this model, we provide a simulation of (eventually achieved) lock-step rounds, which even works in the presence of Byzantine failures. It follows that most problems in distributed computing have a solution in our model: Using the basic consensus algorithm for partially synchronous systems by Dwork et al. (J ACM 35(2):288-323, 1988), for example, Byzantine consensus can be solved. We also introduce a timing transformation technique that facilitates simple correctness proofs and performance analyses of I similar to-algorithms, and provide a detailed relation of the I similar to-Model to other partially synchronous system models.", "paper_title": "The Theta-Model: achieving synchrony without clocks", "paper_id": "WOS:000268771600003"}