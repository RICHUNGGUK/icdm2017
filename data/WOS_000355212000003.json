{"auto_keywords": [{"score": 0.049774466498282044, "phrase": "high-level_transformations"}, {"score": 0.006321220095659049, "phrase": "configure_data"}, {"score": 0.0053050108082472605, "phrase": "proposed_methodology"}, {"score": 0.00481495049065317, "phrase": "obfuscating_dsp_circuits"}, {"score": 0.004693631352125911, "phrase": "novel_approach"}, {"score": 0.004648925234889467, "phrase": "obfuscated_circuits"}, {"score": 0.004211069233133584, "phrase": "dsp_circuits"}, {"score": 0.004078780515171644, "phrase": "iterative_data-flow_graphs"}, {"score": 0.004014196517907476, "phrase": "area-speed-power_tradeoffs"}, {"score": 0.003950631096355195, "phrase": "first_attempt"}, {"score": 0.003900501415804221, "phrase": "design_flow"}, {"score": 0.0034880375790382586, "phrase": "signal_processing_point"}, {"score": 0.0033354927389810207, "phrase": "third-order_digital_filter"}, {"score": 0.003251328737784481, "phrase": "ninth-order_filter"}, {"score": 0.003220315882881027, "phrase": "time-multiplexed_manner"}, {"score": 0.0031895978980118127, "phrase": "latter_two_modes"}, {"score": 0.003139048969111903, "phrase": "functionally_incorrect_modes"}, {"score": 0.0031190537176106386, "phrase": "multiple_meaningful_modes"}, {"score": 0.003050064985384108, "phrase": "filter_order"}, {"score": 0.0030306348247409703, "phrase": "different_applications"}, {"score": 0.002973081656751767, "phrase": "nonmeaningful_modes"}, {"score": 0.0029447150254434842, "phrase": "correct_key_input"}, {"score": 0.0029166231715842894, "phrase": "fsm"}, {"score": 0.002815864555488112, "phrase": "circuit_operation"}, {"score": 0.002797922160172791, "phrase": "functional_obfuscation"}, {"score": 0.0027272854809826785, "phrase": "correct_initialization_key"}, {"score": 0.0026840435773116127, "phrase": "wrong_initialization_key"}, {"score": 0.0024620842899061614, "phrase": "obfuscated_dsp_circuit"}, {"score": 0.0024463906152005772, "phrase": "structural_obfuscation"}, {"score": 0.0022656723439661163, "phrase": "strong_obfuscation"}, {"score": 0.0021664698544866753, "phrase": "th-order_iir_filter_benchmark"}], "paper_keywords": ["Digital signal processing (DSP)", " functional obfuscation", " hardware security", " high-level transformations", " intellectual property (IP) protection", " obfuscation", " reconfigurable design", " structural obfuscation"], "paper_abstract": "This paper presents a novel approach to design obfuscated circuits for digital signal processing (DSP) applications using high-level transformations, a key-based obfuscating finite-state machine (FSM), and a reconfigurator. The goal is to design DSP circuits that are harder to reverse engineer. High-level transformations of iterative data-flow graphs have been exploited for area-speed-power tradeoffs. This is the first attempt to develop a design flow to apply high-level transformations that not only meet these tradeoffs but also simultaneously obfuscate the architectures both structurally and functionally. Several modes of operations are introduced for obfuscation where the outputs are meaningful from a signal processing point of view, but are functionally incorrect. Examples of such modes include a third-order digital filter that can also implement a sixth-order or ninth-order filter in a time-multiplexed manner. The latter two modes are meaningful but represent functionally incorrect modes. Multiple meaningful modes can be exploited to reconfigure the filter order for different applications. Other modes may correspond to nonmeaningful modes. A correct key input to an FSM activates a reconfigurator. The configure data controls various modes of the circuit operation. Functional obfuscation is accomplished by requiring use of the correct initialization key, and configure data. Wrong initialization key fails to enable the reconfigurator, and a wrong configure data activates either a meaningful but nonfunctional or nonmeaningful mode. Probability of activating the correct mode is significantly reduced leading to an obfuscated DSP circuit. Structural obfuscation is also achieved by the proposed methodology via high-level transformations. Experimental results show that the overhead of the proposed methodology is small, while a strong obfuscation is attained. For example, the area overhead for a (3l) th-order IIR filter benchmark is only 17.7% with a 128-bit configuration key, where 1 <= l <= 8, i.e., the order of this filter should be a multiple of 3, and can vary from 3 to 24.", "paper_title": "Obfuscating DSP Circuits via High-Level Transformations", "paper_id": "WOS:000355212000003"}