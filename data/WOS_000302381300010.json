{"auto_keywords": [{"score": 0.04959024199151092, "phrase": "mcsp"}, {"score": 0.005598869410621887, "phrase": "fpt_algorithm"}, {"score": 0.00481495049065317, "phrase": "minimum_common_string_partition"}, {"score": 0.004550669123303854, "phrase": "genome_rearrangement"}, {"score": 0.0031116963435584982, "phrase": "input_strings"}, {"score": 0.002955782731675529, "phrase": "optimal_common_partition"}, {"score": 0.0028807718824400697, "phrase": "constant_integer"}, {"score": 0.0027365831080767874, "phrase": "np"}, {"score": 0.0026806884201358515, "phrase": "ca_parts"}, {"score": 0.002262209824105154, "phrase": "k_exists"}, {"score": 0.0022275639370573264, "phrase": "general_case"}, {"score": 0.0021049977753042253, "phrase": "special_case"}], "paper_keywords": ["Minimum common string partition", " Genomic distance", " Genome rearrangement", " NP-completeness", " FPT algorithms"], "paper_abstract": "Minimum Common String Partition (MCSP) has drawn much attention due to its application in genome rearrangement. In this paper, we investigate three variants of MCSP: MCSP (c) , which requires that there are at most c elements in the alphabet; d-MCSP, which requires the occurrence of each element to be bounded by d; and x-balanced MCSP, which requires the length of blocks being in range (n/k-x,n/k+x), where n is the length of the input strings, k is the number of blocks in the optimal common partition and x is a constant integer. We show that MCSP (c) is NP-hard when ca parts per thousand yen2. As for d-MCSP, we present an FPT algorithm which runs in O (au)((d!)(2k) ) time. As it is still unknown whether an FPT algorithm only parameterized on k exists for the general case of MCSP, we also devise an FPT algorithm for the special case x-balanced MCSP parameterized on both k and x.", "paper_title": "Minimum common string partition revisited", "paper_id": "WOS:000302381300010"}