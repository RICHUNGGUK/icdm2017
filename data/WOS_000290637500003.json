{"auto_keywords": [{"score": 0.04062691623728583, "phrase": "gentilini_et_al"}, {"score": 0.00481495049065317, "phrase": "time_efficient_simulation_algorithm"}, {"score": 0.0045726187330434025, "phrase": "simulation_preorder"}, {"score": 0.00452043800760441, "phrase": "kripke_structures"}, {"score": 0.004443276312972159, "phrase": "labelled_transition_systems"}, {"score": 0.004195418010131832, "phrase": "rnzato"}, {"score": 0.004007083686875716, "phrase": "best_time_complexity"}, {"score": 0.0036553070575015344, "phrase": "glabbeek_and_ploeger"}, {"score": 0.003511246498068952, "phrase": "best_space_complexity"}, {"score": 0.003353521531649663, "phrase": "critical_issues"}, {"score": 0.003296212583539166, "phrase": "simulation_algorithm"}, {"score": 0.003221316290858497, "phrase": "memory_requirements"}, {"score": 0.003094306770612843, "phrase": "model_checking"}, {"score": 0.0030239842475439814, "phrase": "large_state_spaces"}, {"score": 0.00290473242917264, "phrase": "new_simulation_algorithm"}, {"score": 0.002806256131739047, "phrase": "space_saving_modification"}, {"score": 0.0027424619603260837, "phrase": "efficient_algorithm"}, {"score": 0.0027111099074745974, "phrase": "ranzato"}, {"score": 0.00268011431335759, "phrase": "tapparo"}, {"score": 0.0026342827320931937, "phrase": "symbolic_representation"}, {"score": 0.0022296340517805125, "phrase": "suitable_state_partition"}, {"score": 0.0021416404045850224, "phrase": "novel_simulation_algorithm"}, {"score": 0.0021049977753042253, "phrase": "space_complexity"}], "paper_keywords": ["Simulation preorder", " simulation algorithm", " coarsest partition problem"], "paper_abstract": "A number of algorithms for computing the simulation preorder on Kripke structures and on labelled transition systems are available. Among them, the algorithm by Rnzato and Tap-paro [2007] has the best time complexity, while the algorithm by Gentilini et al. [2003] - successively corrected by van Glabbeek and Ploeger [2008] - has the best space complexity. Both space and time complexities are critical issues in a simulation algorithm, in particular memory requirements are crucial in the context of model checking when dealing with large state spaces. Here, we propose a new simulation algorithm that is obtained as a space saving modification of the time efficient algorithm by Ranzato and Tapparo: a symbolic representation of sets is embedded in this algorithm so that any set of states manipulated by the algorithm can be efficiently stored as a set of blocks of a suitable state partition. It turns out that this novel simulation algorithm has a space complexity comparable with Gentilini et al.'s algorithm while improving on Gentilini et al.'s time bound.", "paper_title": "Saving Space in a Time Efficient Simulation Algorithm", "paper_id": "WOS:000290637500003"}