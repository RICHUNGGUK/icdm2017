{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "input"}, {"score": 0.004600870784042767, "phrase": "hep_applications"}, {"score": 0.004531637625717547, "phrase": "varint_encoding"}, {"score": 0.004429727701202369, "phrase": "new_data_format"}, {"score": 0.004232702713825967, "phrase": "structural_data"}, {"score": 0.0041374874583908535, "phrase": "experimental_data"}, {"score": 0.003720600007408015, "phrase": "compact_binary_form"}, {"score": 0.0036645642553325215, "phrase": "variable-size_integer_encoding"}, {"score": 0.0035281264325950556, "phrase": "google's_protocol_buffers_package"}, {"score": 0.003320277992107974, "phrase": "promc_library"}, {"score": 0.003245520963944678, "phrase": "smaller_file_sizes"}, {"score": 0.0031966173935538992, "phrase": "mc_records"}, {"score": 0.0031010029460927864, "phrase": "existing_input-output_libraries"}, {"score": 0.0030311679447397725, "phrase": "high-energy_physics"}, {"score": 0.0028525124381208705, "phrase": "proposed_format"}, {"score": 0.002746225320405654, "phrase": "abstract_data_layouts"}, {"score": 0.0027048247303526583, "phrase": "concrete_programming_implementations"}, {"score": 0.002623881637290192, "phrase": "random_access"}, {"score": 0.0026191469382749136, "phrase": "java"}, {"score": 0.0025260919226344305, "phrase": "promc_files"}, {"score": 0.00238295581009905, "phrase": "fortran"}, {"score": 0.002305974875400655, "phrase": "programming_languages"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data", " Format", " IO", " Input-output", " LHC"], "paper_abstract": "A new data format for Monte Carlo (MC) events, or any structural data, including experimental data, is discussed. The format is designed to store data in a compact binary form using variable-size integer encoding as implemented in the Google's Protocol Buffers package. This approach is implemented in the PRoMC library which produces smaller file sizes for MC records compared to the existing input-output libraries used in high-energy physics (HEP). Other important features of the proposed format are a separation of abstract data layouts from concrete programming implementations, self-description and random access. Data stored in PRoMC files can be written, read and manipulated in a number of programming languages, such C++, JAVA, FORTRAN and PYTHON. Published by Elsevier B.V.", "paper_title": "ProMC: Input-output data format for HEP applications using varint encoding", "paper_id": "WOS:000340340200026"}