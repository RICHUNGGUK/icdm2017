{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_couplings"}, {"score": 0.004476399615305783, "phrase": "software_coupling"}, {"score": 0.004284755353695709, "phrase": "quality_factors"}, {"score": 0.004081385289516914, "phrase": "object-oriented_languages"}, {"score": 0.003527181559366122, "phrase": "object-oriented_language_features"}, {"score": 0.0031383410838018953, "phrase": "software_couplings"}, {"score": 0.003092842645798083, "phrase": "object-oriented_relationships"}, {"score": 0.002751751956416832, "phrase": "static_analysis_tool"}, {"score": 0.002659527314613792, "phrase": "java_packages"}, {"score": 0.0024963543716522087, "phrase": "coupling_measurement"}, {"score": 0.0024481856932959227, "phrase": "source_code"}, {"score": 0.002297949552105756, "phrase": "previous_measures"}, {"score": 0.0021049977753042253, "phrase": "predictive_efforts"}], "paper_keywords": ["Object-oriented programming", " Quality analysis and evaluation", " Analysis", " Complexity measures", " Maintainability", " Test execution"], "paper_abstract": "One key to several quality factors of software is the way components are connected. Software coupling can be used to estimate a number of quality factors, including maintainability, complexity, and reliability. Object-oriented languages are designed to reduce the number of dependencies among classes, which encourages separation of concerns and should reduce the amount of coupling. At the same time, the object-oriented language features change the way the connections are made, how they must be analyzed, and how they are measured. This paper discusses software couplings based on object-oriented relationships between classes, specifically focusing on types of couplings that are not available until after the implementation is completed, and presents a static analysis tool that measures couplings among classes in Java packages. Data from evaluating the tool on several open-source projects are provided. The coupling measurement is based on source code, which has the advantage of being quantitative and more precise than previous measures, but the disadvantage of not being available before implementation, and thus not useful for some predictive efforts.", "paper_title": "Quantitatively measuring object-oriented couplings", "paper_id": "WOS:000261412500003"}