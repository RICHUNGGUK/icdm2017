{"auto_keywords": [{"score": 0.03495924847163338, "phrase": "rom_data"}, {"score": 0.00640889297662695, "phrase": "bit_cell"}, {"score": 0.004725886853744007, "phrase": "math_function_evaluation"}, {"score": 0.004681971826924847, "phrase": "digital_signal_processing"}, {"score": 0.004616859702338596, "phrase": "built-in_self-test"}, {"score": 0.004344965512058521, "phrase": "large_on-chip_\"tables"}, {"score": 0.004264558080356621, "phrase": "read-only_memories"}, {"score": 0.003741712498615481, "phrase": "extra_wordline"}, {"score": 0.003587616378156851, "phrase": "selected_access_transistor"}, {"score": 0.0031182092708983184, "phrase": "sram_mode"}, {"score": 0.0030604342671868836, "phrase": "rom_mode"}, {"score": 0.003003726508522467, "phrase": "proposed_rom-embedded_sram"}, {"score": 0.002787181295054319, "phrase": "special_write_steps"}, {"score": 0.0026598200370569433, "phrase": "sram_array"}, {"score": 0.0025741370320813968, "phrase": "conventional_load_instruction"}, {"score": 0.002550165781755603, "phrase": "unique_virtual_address_space"}, {"score": 0.002445021071485221, "phrase": "rom-embedded_cache"}, {"score": 0.0023551955270737215, "phrase": "tag_arrays"}, {"score": 0.002333258365963463, "phrase": "translation_look-aside_buffers"}, {"score": 0.002289993730291138, "phrase": "fast_rom_operations"}, {"score": 0.0022475295254231714, "phrase": "example_applications"}, {"score": 0.002154835714714195, "phrase": "low-cost_logic_testing"}, {"score": 0.0021049977753042253, "phrase": "mathematical_functions"}], "paper_keywords": ["Cache design", " random access memory (RAM)", " read-only memory (ROM)", " ROM-embedded static RAM (SRAM)", " SRAM design"], "paper_abstract": "There are many important applications, such as math function evaluation, digital signal processing, and built-in self-test, whose implementations can be faster and simpler if we can have large on-chip \"tables\" stored as read-only memories (ROMs). We show that conventional de facto standard 6T and 8T static random access memory (SRAM) bit cells can embed ROM data without area overhead or performance degradation on the bit cells. Just by adding an extra wordline (WL) and connecting the WL to selected access transistor of the bit cell (based on whether a 0 or 1 is to be stored as ROM data in that location), the bit cell can work both in the SRAM mode and in the ROM mode. In the proposed ROM-embedded SRAM, during SRAM operations, ROM data is not available. To retrieve the ROM data, special write steps associated with proper via connections load ROM data into the SRAM array. The ROM data is read by conventional load instruction with unique virtual address space assigned to the data. This allows the ROM-embedded cache (R-cache) to bypass tag arrays and translation look-aside buffers, leading to fast ROM operations. We show example applications to illustrate how the R-cache can lead to low-cost logic testing and faster evaluation of mathematical functions.", "paper_title": "Area Efficient ROM-Embedded SRAM Cache", "paper_id": "WOS:000322830200002"}