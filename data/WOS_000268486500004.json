{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "combinatorial_auctions"}, {"score": 0.004430784015995566, "phrase": "previously-unseen_instance"}, {"score": 0.004362226376603478, "phrase": "np-complete_problem"}, {"score": 0.0034881076466982226, "phrase": "algorithm's_runtime"}, {"score": 0.003434085751246066, "phrase": "problem_instance"}, {"score": 0.0028178463431115562, "phrase": "algorithm_portfolios"}, {"score": 0.0027169974137406148, "phrase": "test_distributions"}, {"score": 0.002674885993329912, "phrase": "hard_problems"}, {"score": 0.00253916011199984, "phrase": "case_study"}, {"score": 0.002499798127196099, "phrase": "combinatorial_auction_winner_determination_problem"}, {"score": 0.0023361440016375972, "phrase": "algorithm's_running_time"}, {"score": 0.0022524959504997303, "phrase": "algorithm_portfolio"}, {"score": 0.0021945833590668973, "phrase": "best_single_algorithm"}, {"score": 0.0021381565332182773, "phrase": "standard_benchmark_suite"}], "paper_keywords": ["Design", " Economics", " Experimentation", " Measurement", " Performance", " Empirical analysis of algorithms", " algorithm portfolios", " combinatorial auctions", " runtime prediction"], "paper_abstract": "Is it possible to predict how long an algorithm will take to solve a previously-unseen instance of an NP-complete problem? If so, what uses can be found for models that make such predictions? This article provides answers to these questions and evaluates the answers experimentally. We propose the use of supervised machine learning to build models that predict an algorithm's runtime given a problem instance. We discuss the construction of these models and describe techniques for interpreting them to gain understanding of the characteristics that cause instances to be hard or easy. We also present two applications of our models: building algorithm portfolios that outperform their constituent algorithms, and generating test distributions that emphasize hard problems. We demonstrate the effectiveness of our techniques in a case study of the combinatorial auction winner determination problem. Our experimental results show that we can build very accurate models of an algorithm's running time, interpret our models, build an algorithm portfolio that strongly outperforms the best single algorithm, and tune a standard benchmark suite to generate much harder problem instances.", "paper_title": "Empirical Hardness Models: Methodology and a Case Study on Combinatorial Auctions", "paper_id": "WOS:000268486500004"}