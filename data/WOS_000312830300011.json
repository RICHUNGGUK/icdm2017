{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "transactional_memory"}, {"score": 0.036748593022488035, "phrase": "false_conflicts"}, {"score": 0.03277374817475705, "phrase": "spatial_locality"}, {"score": 0.004563427013973105, "phrase": "conventional_multithreaded_programming"}, {"score": 0.00441883624011048, "phrase": "concurrent_programs"}, {"score": 0.004278807087784626, "phrase": "unbounded_tm"}, {"score": 0.004233119608341877, "phrase": "concurrent_threads"}, {"score": 0.004165497627464024, "phrase": "hardware_signatures"}, {"score": 0.003802135020791801, "phrase": "per-thread_fixed_hardware_bloom_filters"}, {"score": 0.003584025547693836, "phrase": "memory_addresses"}, {"score": 0.0034148795808317555, "phrase": "nonexisting_conflicts"}, {"score": 0.0031504667809625344, "phrase": "novel_signature_design"}, {"score": 0.002953711377604328, "phrase": "new_hash_function_mappings"}, {"score": 0.002890887778279196, "phrase": "nearby_located_addresses"}, {"score": 0.002681315076008658, "phrase": "large_transactions"}, {"score": 0.002473560912156024, "phrase": "extra_hardware"}, {"score": 0.0024339783012484032, "phrase": "proposed_signature"}, {"score": 0.0023566987138026285, "phrase": "gems_simulator"}, {"score": 0.0022941723937662927, "phrase": "stamp_benchmark_suite"}, {"score": 0.0021975548867457606, "phrase": "significant_improvement"}], "paper_keywords": ["Hardware Transactional Memory", " signatures", " bloom filters", " H3 hashing", " memory locality"], "paper_abstract": "Transactional Memory (TM) is an alternative to conventional multithreaded programming to ease the writing of concurrent programs. In the context of unbounded TM, concurrent threads may use hardware signatures to record all the memory addresses issued inside a transaction to detect conflicts. Signatures are usually implemented as per-thread fixed hardware Bloom filters that summarize a very large amount of read and write memory addresses at the cost of false conflicts (detection of nonexisting conflicts). In this paper, to reduce the probability of false conflicts, a novel signature design that exploits spatial locality is proposed. The design is based on new hash function mappings, so that nearby located addresses share some bits inserted in the filters. This is favorable particularly for large transactions that usually exhibit some amount of spatial locality. Besides, its implementation does not require extra hardware. The proposed signature was experimentally evaluated using the GEMS simulator and all the codes of the STAMP benchmark suite. In most cases, the results show significant improvement, particularly in the codes that involve long-running, large-data transactions.", "paper_title": "LS-Sig: Locality-Sensitive Signatures for Transactional Memory", "paper_id": "WOS:000312830300011"}