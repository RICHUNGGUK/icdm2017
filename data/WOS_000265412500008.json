{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multiprocessor_real-time"}, {"score": 0.004342430078306461, "phrase": "multiprocessor_real-time_systems"}, {"score": 0.004042635935882651, "phrase": "real-time_scheduling"}, {"score": 0.003947358102140903, "phrase": "mutator_timing_assurances"}, {"score": 0.00385431710959668, "phrase": "memory_allocation"}, {"score": 0.0037935066882208235, "phrase": "garbage_collection"}, {"score": 0.0036456298076415652, "phrase": "scheduling_algorithm"}, {"score": 0.003588100032858716, "phrase": "gcmua."}, {"score": 0.00347574024760684, "phrase": "mutator_activities"}, {"score": 0.0029409171055888804, "phrase": "gcmua"}, {"score": 0.0028944757265206332, "phrase": "lower_bounds"}, {"score": 0.0022977342663599042, "phrase": "mutator_execution-time"}, {"score": 0.0021049977753042253, "phrase": "gcmua's_effectiveness"}], "paper_keywords": ["Real time", " garbage collection", " time/utility functions", " scheduling", " multiprocessors"], "paper_abstract": "We consider garbage collection (GC) in dynamic, multiprocessor real-time systems. We consider the time-based, concurrent GC approach and focus on real-time scheduling to obtain mutator timing assurances, despite memory allocation and garbage collection. We present a scheduling algorithm called GCMUA. The algorithm considers mutator activities that are subject to time/utility function time constraints, stochastic execution-time and memory demands, and overloads. We establish that GCMUA probabilistically lower bounds each mutator activity's accrued utility, lower bounds the system-wide total accrued utility, and upper bounds the timing assurances' sensitivity to variations in mutator execution-time and memory demand estimates. Our simulation experiments validate our analytical results and confirm GCMUA's effectiveness.", "paper_title": "Garbage Collector Scheduling in Dynamic, Multiprocessor Real-Time Systems", "paper_id": "WOS:000265412500008"}