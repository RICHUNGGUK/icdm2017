{"auto_keywords": [{"score": 0.0494096760831155, "phrase": "visitor_pattern"}, {"score": 0.012574945339095409, "phrase": "original_visitor_pattern"}, {"score": 0.007935577033084023, "phrase": "object_structure"}, {"score": 0.00481495049065317, "phrase": "visitor_software_design_pattern"}, {"score": 0.004681226806682058, "phrase": "behavioral_software_design_pattern"}, {"score": 0.00425351638505599, "phrase": "visitor_patterns"}, {"score": 0.004066076430818046, "phrase": "visitor_pattern's_usefulness"}, {"score": 0.003990385737207714, "phrase": "software_design"}, {"score": 0.003581620064675766, "phrase": "java_walkabout_class"}, {"score": 0.003531474887552889, "phrase": "dynamic_dispatcher"}, {"score": 0.0034657012607680203, "phrase": "minimal_resemblance"}, {"score": 0.0034171734618737436, "phrase": "original_visitor_pattern's_structure"}, {"score": 0.0032602525602322832, "phrase": "new_operations"}, {"score": 0.003081400693055518, "phrase": "related_behavior"}, {"score": 0.002912331664922248, "phrase": "comprehensive_survey"}, {"score": 0.0028446460307503343, "phrase": "software_practitioners"}, {"score": 0.002726740692380339, "phrase": "major_enhancements"}, {"score": 0.0023127544795063263, "phrase": "original_visitor_pattern_structure"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["extended Visitor patterns", " design patterns", " survey", " alternative Visitor patterns", " Visitor pattern"], "paper_abstract": "The Visitor pattern is a behavioral software design pattern where different objects represent an operation to be performed on elements of an object structure. Despite the benefits of the Visitor pattern, its rigid structure has limitations. Owing to the Visitor pattern's usefulness and importance to software design, many researchers have extended and modified the original Visitor pattern to overcome its limitations. Researchers have even replaced the Visitor pattern with more refined design patterns (e.g., Reflective Visitor pattern, Java Walkabout Class, and Dynamic Dispatcher) that bear minimal resemblance to the original Visitor pattern's structure while retaining its major advantages (e.g., ability to add new operations to an object structure without changing the classes of objects, localizing related behavior, and accumulating state). This article therefore provides a comprehensive survey of the Visitor pattern for software practitioners. Within the survey, we focus on major enhancements that have been made to the original Visitor pattern to overcome its limitations. On the basis of our survey results, we found that variations of the Visitor pattern can be separated into two categories: extended Visitor patterns where the original Visitor pattern structure stays intact and alternative Visitor patterns where the structure of the original Visitor pattern is altered. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "A survey report of enhancements to the visitor software design pattern", "paper_id": "WOS:000335825800003"}