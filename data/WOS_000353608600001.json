{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "temporal_graphs"}, {"score": 0.013580140601999193, "phrase": "compression_techniques"}, {"score": 0.013445194088406227, "phrase": "compact_and_self-indexed_data_structures"}, {"score": 0.004766683200410046, "phrase": "compact_sequence_representations"}, {"score": 0.004671588539217021, "phrase": "binary_relations"}, {"score": 0.004502126088469323, "phrase": "temporal_graph"}, {"score": 0.004266501496765747, "phrase": "temporal_adjacency_logs"}, {"score": 0.003805788648230075, "phrase": "time-interval_log"}, {"score": 0.003558294449586273, "phrase": "inverted_indexes"}, {"score": 0.003510754567808717, "phrase": "adjacency_logs"}, {"score": 0.003360578019762703, "phrase": "compact_adjacency_sequence"}, {"score": 0.0033380972260139367, "phrase": "cas"}, {"score": 0.003282383509542342, "phrase": "adjacent_vertices"}, {"score": 0.003206002589892253, "phrase": "wavelet_tree"}, {"score": 0.003163154491827937, "phrase": "compact_events"}, {"score": 0.0031387402135256343, "phrase": "time"}, {"score": 0.0031104048283579107, "phrase": "cet"}, {"score": 0.0029873281676201565, "phrase": "interleaved_wavelet_tree"}, {"score": 0.002755567647101251, "phrase": "multidimensional_symbols"}, {"score": 0.0026023381988430666, "phrase": "previous_alternatives"}, {"score": 0.0024742098091226203, "phrase": "large_temporal_graphs"}, {"score": 0.0024576084154573396, "phrase": "efficient_use"}, {"score": 0.0024084679931209514, "phrase": "good_time_performance"}, {"score": 0.0023842666006371267, "phrase": "wide_range"}, {"score": 0.0023682672729645714, "phrase": "useful_queries"}, {"score": 0.002206606452557159, "phrase": "interesting_representations"}, {"score": 0.0021479597698614355, "phrase": "different_application_domains"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Temporal graphs", " Compact data structures", " Wavelet tree"], "paper_abstract": "Temporal graphs represent vertices and binary relations that change along time. In this paper, a temporal graph is conceptualized as the sequences of changes on its edges during its lifetime, also known as temporal adjacency logs. The paper explores the use of compression techniques, and compact and self-indexed data structures, to represent large temporal graphs. More specifically, we present four strategies to represent temporal graphs. The first two strategies, Time-interval Log per Edge (EdgeLog) and the Adjacency Log of Events (EveLog), use compression techniques over the inverted indexes that represent the adjacency logs. Then, we introduce two new strategies to represent temporal graphs using compact and self-indexed data structures. Compact Adjacency Sequence (CAS) represents changes on adjacent vertices as a sequence stored in a Wavelet Tree, and the Compact Events ordered by Time (CET) represents the edges that change in each time instant using Interleaved Wavelet Tree, a new compact and self-indexed data structure specifically designed in this work that is able to represent a sequence of multidimensional symbols (that is, tuples of symbols encoded together). We experimentally evaluate the four strategies and compare them with previous alternatives in the state-of-the-art showing that the four alternatives can represent large temporal graphs making efficient use of space, while keeping good time performance for a wide range of useful queries. We conclude that the use of compression techniques or the use of compact and self-indexed data structures open the possibility for the design of interesting representations of temporal graphs that fit the heeds of different application domains. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Data structures for temporal graphs based on compact sequence representations", "paper_id": "WOS:000353608600001"}