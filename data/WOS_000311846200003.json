{"auto_keywords": [{"score": 0.04581502828053674, "phrase": "n_clients"}, {"score": 0.00481495049065317, "phrase": "concurrent_multiresource_arbiter"}, {"score": 0.004558564684763264, "phrase": "novel_type"}, {"score": 0.004508942069742167, "phrase": "asynchronous_arbiter"}, {"score": 0.004245476558619167, "phrase": "concurrent_utilization"}, {"score": 0.004199247711875386, "phrase": "multiple_resources"}, {"score": 0.004108288481894523, "phrase": "useful_device"}, {"score": 0.003682100144121148, "phrase": "new_grant"}, {"score": 0.003524227590204673, "phrase": "accessible_special_case"}, {"score": 0.0034102660898135155, "phrase": "concurrent_implementation"}, {"score": 0.0033363396054797044, "phrase": "fully_sequential_design"}, {"score": 0.0032107911131811057, "phrase": "sequential_design"}, {"score": 0.0029412271277166873, "phrase": "initial_request"}, {"score": 0.002861708609922034, "phrase": "concurrent_design"}, {"score": 0.0028305047329728254, "phrase": "higher_performance"}, {"score": 0.0027389142053945246, "phrase": "longer_resource_utilization_time"}, {"score": 0.0026942333853202556, "phrase": "scalable_tiled_structure"}, {"score": 0.0026070408483940535, "phrase": "arbiter_structure"}, {"score": 0.0024276590297034064, "phrase": "subsequent_implementations"}, {"score": 0.002223696715077018, "phrase": "additional_connecting_logic"}, {"score": 0.002128220632893247, "phrase": "larger_sizes"}], "paper_keywords": ["Self-timed circuits", " speed independent", " asynchronous arbiters", " multiresource arbitration"], "paper_abstract": "This paper presents a novel type of asynchronous arbiter that allocates M interchangeable resources among N clients. This arbiter enables the concurrent utilization of multiple resources and is a useful device in various load-balancing circuits. Dedicated request signals from the resources and the clients are used in pairs to form each new grant. The 2 x 2 arbiter is examined as an accessible special case of the N x M arbiter. A concurrent implementation is compared to fully sequential design. It is shown that the sequential design can be more practical when the time between a grant and the withdrawal of the initial request is small. The concurrent design provides higher performance in a system with a longer resource utilization time. A scalable tiled structure is developed to extend the arbiter structure beyond 2 x 2 to support N clients and M resources. Models and subsequent implementations of the tiles are presented. The tiles can be repeated without the use of additional connecting logic, enabling the construction of arbiters of larger sizes. Several examples demonstrate the usage of the arbiter.", "paper_title": "Concurrent Multiresource Arbiter: Design and Applications", "paper_id": "WOS:000311846200003"}