{"auto_keywords": [{"score": 0.03596176205294267, "phrase": "permissionflow"}, {"score": 0.015719716506582538, "phrase": "inter-application_permission_leaks"}, {"score": 0.004778291557628152, "phrase": "android"}, {"score": 0.004652016085325825, "phrase": "already_well-established_permission_systems"}, {"score": 0.0045464538515249085, "phrase": "application_components"}, {"score": 0.004375789703278455, "phrase": "single_communication_mechanism"}, {"score": 0.004053362743156545, "phrase": "android_application_vulnerability"}, {"score": 0.003976523732243618, "phrase": "unauthorized_access"}, {"score": 0.003946195919158241, "phrase": "permission-protected_information"}, {"score": 0.003797978200741566, "phrase": "confused_deputy"}, {"score": 0.003769006950727621, "phrase": "permission_collusion"}, {"score": 0.0036413370053909886, "phrase": "application_vulnerability"}, {"score": 0.003531474887552889, "phrase": "taint_analysis"}, {"score": 0.003296212583539166, "phrase": "byte_code"}, {"score": 0.003246091321090681, "phrase": "android_applications"}, {"score": 0.0031967297437935772, "phrase": "permissionflow_analysis"}, {"score": 0.0031360786664165093, "phrase": "static_technique"}, {"score": 0.0031121406603482112, "phrase": "automatic_identification"}, {"score": 0.003088384809415812, "phrase": "permission-protected_information_sources"}, {"score": 0.0030648097361278856, "phrase": "permission-based_systems"}, {"score": 0.003006654007926993, "phrase": "application_programming_interfaces"}, {"score": 0.0029270797740550973, "phrase": "permission_checking"}, {"score": 0.002731971103291716, "phrase": "permission_mapper"}, {"score": 0.0026393362602995254, "phrase": "previous_work"}, {"score": 0.0026091594819333654, "phrase": "fully_automatic_identification"}, {"score": 0.0025110337774260773, "phrase": "popular_applications"}, {"score": 0.002370704665003412, "phrase": "tested_applications"}, {"score": 0.0022125996721544514, "phrase": "proposed_analysis"}, {"score": 0.0021539955106204354, "phrase": "android_ecosystem"}, {"score": 0.0021049977753042253, "phrase": "similar_analyses"}], "paper_keywords": [""], "paper_abstract": "The Android (R) operating system builds upon already well-established permission systems but complements them by allowing application components to be reused within and across applications through a single communication mechanism, called the Intent mechanism. In this paper, we describe techniques that we developed for statically detecting Android application vulnerability to attacks that obtain unauthorized access to permission-protected information. We address three kinds of such attacks, known as confused deputy, permission collusion, and Intent spoofing. We show that application vulnerability to these attacks can be detected using taint analysis. Based on this technique, we developed PermissionFlow, a tool for discovering vulnerabilities in the byte code and configuration of Android applications. To enable PermissionFlow analysis, we developed a static technique for automatic identification of permission-protected information sources in permission-based systems. This technique identifies application programming interfaces (APIs) whose execution leads to permission checking and considers these APIs to be sources of taint. Based on this approach, we developed Permission Mapper, a component of PermissionFlow that improves on previous work by performing fully automatic identification of such APIs for Android Java (R) code. Our automated analysis of popular applications found that 56% of the most popular 313 Android applications actively use intercomponent information flows. Among the tested applications, PermissionFlow found four exploitable vulnerabilities. By helping ensure the absence of inter-application permission leaks, we believe that the proposed analysis will be highly beneficial to the Android ecosystem and other mobile platforms that may use similar analyses in the future.", "paper_title": "Automatic detection of inter-application permission leaks in Android applications", "paper_id": "WOS:000330131500011"}