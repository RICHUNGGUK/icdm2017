{"auto_keywords": [{"score": 0.009927310153918798, "phrase": "data-flow_iteration"}, {"score": 0.004815059535982149, "phrase": "modular"}, {"score": 0.004491678520807451, "phrase": "program_slicing"}, {"score": 0.0043215158337835706, "phrase": "program_decomposition_techniques"}, {"score": 0.004222515162635615, "phrase": "traditional_slicing_methods"}, {"score": 0.0039085400187964196, "phrase": "new_formal_method"}, {"score": 0.0038485929962942776, "phrase": "program_slicing-modular_monadic_slicing"}, {"score": 0.003562322256892338, "phrase": "modular_monadic"}, {"score": 0.0032972747743006603, "phrase": "forward_program_slicing"}, {"score": 0.002913483929932102, "phrase": "forward_monad"}, {"score": 0.0027175263159330523, "phrase": "point-to_information_and_slices_the_program"}, {"score": 0.002476546030310661, "phrase": "traditional_data-flow_iteration_methods"}, {"score": 0.00218807532188779, "phrase": "language_independence"}, {"score": 0.0021049977753042253, "phrase": "original_monadic_slicing_method"}], "paper_keywords": [""], "paper_abstract": "Program slicing is a family of program decomposition techniques. For traditional slicing methods lack modularity and flexibility, we have proposed a new formal method for program slicing-modular monadic slicing. This paper presents an approach to extend the modular monadic slicing for handling pointers. With the inspiration of forward program slicing, our approach obtains the point-to information through the data-flow iteration. By combining the forward monad slicing with data-flow iteration, our method computes the point-to information and slices the program in the same phase. So our approach has the same precision as traditional data-flow iteration methods, but needs less space. In addition, our approach also inherits the properties of language independence and reusability from the original monadic slicing method.", "paper_title": "Modular monadic slicing in the presence of pointers", "paper_id": "WOS:000238417500101"}