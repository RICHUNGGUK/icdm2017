{"auto_keywords": [{"score": 0.0496729815270419, "phrase": "combinatorial_testing"}, {"score": 0.010612387000973441, "phrase": "constrained_combinatorial_testing"}, {"score": 0.004693476992528682, "phrase": "effective_testing_technique"}, {"score": 0.004497762477097628, "phrase": "input_combinations_coverage"}, {"score": 0.004459605573798577, "phrase": "combinatorial_optimization"}, {"score": 0.004201381218977942, "phrase": "t-wise_tuple"}, {"score": 0.004112812699639956, "phrase": "different_system_input_parameters"}, {"score": 0.003858110309630846, "phrase": "test_suite"}, {"score": 0.0034977560416755726, "phrase": "pairwise_testing"}, {"score": 0.003309124298009635, "phrase": "input_values"}, {"score": 0.0032255172568437965, "phrase": "account_constraints"}, {"score": 0.0031845067058084583, "phrase": "system_parameters"}, {"score": 0.0030515222178491923, "phrase": "invalid_or_not_realizable_input_values_combinations"}, {"score": 0.0028745946327439656, "phrase": "formal_logic"}, {"score": 0.0027662954811372175, "phrase": "test_predicates"}, {"score": 0.0026734504926268442, "phrase": "logical_problem"}, {"score": 0.0026282000779095987, "phrase": "external_formal_logic_tool"}, {"score": 0.0025183881730011597, "phrase": "input_domain"}, {"score": 0.002475755804232436, "phrase": "logical_predicates"}, {"score": 0.0023123057299992587, "phrase": "select_tuples"}, {"score": 0.002215663255682209, "phrase": "test_suite_layout"}, {"score": 0.002187464225869713, "phrase": "proposed_approach"}, {"score": 0.0021412594173592513, "phrase": "prototype_tool_implementation"}, {"score": 0.0021049977753042253, "phrase": "experimental_assessment"}], "paper_keywords": ["Model-based testing", " Combinatorial testing", " Test generation"], "paper_abstract": "Combinatorial testing is as an effective testing technique to reveal failures in a given system, based on input combinations coverage and combinatorial optimization. Combinatorial testing of strength t (t >= 2) requires that each t-wise tuple of values of the different system input parameters is covered by at least one test case. Combinatorial test suite generation algorithms aim at producing a test suite covering all the required tuples in a small (possibly minimal) number of test cases, in order to reduce the cost of testing. The most used combinatorial technique is the pairwise testing (t = 2) which requires coverage of all pairs of input values. Constrained combinatorial testing takes also into account constraints over the system parameters, for instance forbidden tuples of inputs, modeling invalid or not realizable input values combinations. In this paper a new approach to combinatorial testing, tightly integrated with formal logic, is presented. In this approach, test predicates are used to formalize combinatorial testing as a logical problem, and an external formal logic tool is applied to solve it. Constraints over the input domain are expressed as logical predicates too, and effectively handled by the same tool. Moreover, inclusion or exclusion of select tuples is supported, allowing the user to customize the test suite layout. The proposed approach is supported by a prototype tool implementation and results of experimental assessment are also presented.", "paper_title": "A Formal Logic Approach to Constrained Combinatorial Testing", "paper_id": "WOS:000284665000002"}