{"auto_keywords": [{"score": 0.034279735830197444, "phrase": "coverage_profiles"}, {"score": 0.015346376298980214, "phrase": "code-coverage-based_testing"}, {"score": 0.00481495049065317, "phrase": "structural_code_coverage_metrics"}, {"score": 0.004745260932479212, "phrase": "software_testing"}, {"score": 0.004631335513513859, "phrase": "widely-used_testing_strategy"}, {"score": 0.004476399615305783, "phrase": "meaningful_decision_criterion"}, {"score": 0.0043477114072437316, "phrase": "test_suite"}, {"score": 0.004141365648080381, "phrase": "safety-critical_applications"}, {"score": 0.003831310632470526, "phrase": "code-coverage_testing"}, {"score": 0.003775803846431323, "phrase": "structural_code_coverage_criteria"}, {"score": 0.003685067218455088, "phrase": "source_code"}, {"score": 0.003631671435460452, "phrase": "generated_machine_code"}, {"score": 0.0035443861412929006, "phrase": "different_code_structure"}, {"score": 0.003493021648360933, "phrase": "code_optimizations"}, {"score": 0.003278878522165815, "phrase": "automatic_calculation"}, {"score": 0.0030778231027679464, "phrase": "concrete_test_suite"}, {"score": 0.0026466064623118105, "phrase": "coverage_profile"}, {"score": 0.002400944221804575, "phrase": "error-detection_likelihood"}, {"score": 0.0023431692392929353, "phrase": "experimental_results"}, {"score": 0.002231747358665628, "phrase": "structural_code_coverage"}, {"score": 0.002210110858196368, "phrase": "gcc"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["structural code coverage", " source-level test-data generation", " coverage preservation"], "paper_abstract": "Code-coverage-based testing is a widely-used testing strategy with the aim of providing a meaningful decision criterion for the adequacy of a test suite. Code-coverage-based testing is also mandated for the development of safety-critical applications; for example, the DO178b document requires the application of the modified condition/decision coverage. One critical issue of code-coverage testing is that structural code coverage criteria are typically applied to source code whereas the generated machine code may result in a different code structure because of code optimizations performed by a compiler. In this work, we present the automatic calculation of coverage profiles describing which structural code-coverage criteria are preserved by which code optimization, independently of the concrete test suite. These coverage profiles allow to easily extend compilers with the feature of preserving any given code-coverage criteria by enabling only those code optimizations that preserve it. Furthermore, we describe the integration of these coverage profile into the compiler GCC. With these coverage profiles, we answer the question of how much code optimization is possible without compromising the error-detection likelihood of a given test suite. Experimental results conclude that the performance cost to achieve preservation of structural code coverage in GCC is rather low. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Optimizing compilation with preservation of structural code coverage metrics to support software testing", "paper_id": "WOS:000333923400002"}