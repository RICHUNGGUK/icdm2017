{"auto_keywords": [{"score": 0.027189041588123346, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_multiprocessor_synthesis"}, {"score": 0.0047273577269638725, "phrase": "automated_implementation"}, {"score": 0.0043764594918057915, "phrase": "sequential_programs"}, {"score": 0.004344424495876066, "phrase": "multiple_parallel_processors"}, {"score": 0.004187718090913465, "phrase": "existing_traditional_parallelizing_techniques"}, {"score": 0.004111488691642256, "phrase": "mpsoc-related_problems"}, {"score": 0.0039341294012600085, "phrase": "concurrency_potentials"}, {"score": 0.003778253716938922, "phrase": "automated_application_partition_technique"}, {"score": 0.0036958398682001015, "phrase": "completely_automatic_parallelism"}, {"score": 0.0033961782274326948, "phrase": "template-based_algorithm"}, {"score": 0.003334309053314909, "phrase": "special_load-compute-store"}, {"score": 0.003213920601037463, "phrase": "specific-instruction_customization"}, {"score": 0.0031786562062819327, "phrase": "application_specific_instruction-set_processors"}, {"score": 0.0031553635024022387, "phrase": "asips"}, {"score": 0.0030526216870671325, "phrase": "proposed_algorithm"}, {"score": 0.003019121766552419, "phrase": "dynamic_pipelining"}, {"score": 0.002996992362027833, "phrase": "asip_techniques"}, {"score": 0.0029641011108505785, "phrase": "iterative_improvement_strategy"}, {"score": 0.0029100802280971065, "phrase": "initial_pipelining_scheme"}, {"score": 0.002846549461929597, "phrase": "maximum_parallelism"}, {"score": 0.0027844017803674444, "phrase": "primary_partition_results"}, {"score": 0.0025868521085189843, "phrase": "specific_instruction_configurations"}, {"score": 0.00247509835229599, "phrase": "commercial_extensible_multiprocessor_design_flow"}, {"score": 0.0024389277933858054, "phrase": "xtensa-based_xtmp_platform"}, {"score": 0.002421040737931745, "phrase": "tensilica_inc."}, {"score": 0.00238565827614317, "phrase": "case_study"}, {"score": 0.002368160970983679, "phrase": "fast_fourier_transform"}, {"score": 0.0023164335087514252, "phrase": "experimental_results"}, {"score": 0.0022825763382627443, "phrase": "partitioned_programs"}, {"score": 0.0022327141073440436, "phrase": "average_speedup"}, {"score": 0.002183938718432764, "phrase": "original_sequential_programs"}, {"score": 0.0021049977753042253, "phrase": "uniprocessor_system"}], "paper_keywords": ["application partitioning", " CAD algorithm", " MPSoC", " ASIP", " synthesis"], "paper_abstract": "To achieve an automated implementation for the application-specific heterogeneous multiprocessor systems-on-chip (MPSoC), partitioning and mapping the sequential programs onto multiple parallel processors is one of the most difficult challenges. However, the existing traditional parallelizing techniques cannot solve the MPSoC-related problems effectively, so designers are still required to manually extract the concurrency potentials in the program. To solve this bottleneck, an automated application partition technique is needed. However, completely automatic parallelism is ineffective, so it is promising to explore concurrency for certain practical special structures. To settle those issues, this paper proposes a template-based algorithm to automatically partition a special load-compute-store (I-CS) loop structure. Since specific-instruction customization for the application specific instruction-set processors (ASIPS) has interactions with task partitioning, the proposed algorithm integrates the dynamic pipelining and ASIP techniques using an iterative improvement strategy: first, an initial pipelining scheme is generated to obtain the maximum parallelism; second, under the primary partition results specific instructions are customized respectively for each subprogram; third, the program is repartitioned via pipelining under the specific instruction configurations. The proposed method has been implemented in the context of a commercial extensible multiprocessor design flow, using the Xtensa-based XTMP platform from Tensilica Inc. Based on a case study of Fast Fourier Transform (FFT), the experimental results indicate that the partitioned programs by the proposed method demonstrate an average speedup of IN compared to the original sequential programs which have not been partitioned and run on the uniprocessor system.", "paper_title": "Pipeline-Based Partition Exploration for Heterogeneous Multiprocessor Synthesis", "paper_id": "WOS:000272393900017"}