{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "standard_way"}, {"score": 0.0044826811976193485, "phrase": "traditional_platforms"}, {"score": 0.004412000844879264, "phrase": "high-assurance_programming"}, {"score": 0.004273951631010383, "phrase": "current_implementations"}, {"score": 0.004206548500039536, "phrase": "type_theory"}, {"score": 0.003885085477351673, "phrase": "obvious_truths"}, {"score": 0.003823791479971016, "phrase": "explicit_proofs"}, {"score": 0.0028715299874549245, "phrase": "colored_terms"}, {"score": 0.0027159094186967247, "phrase": "colored_types"}, {"score": 0.0021731423856364003, "phrase": "precise_types"}, {"score": 0.0021049977753042253, "phrase": "parametricity_results"}], "paper_keywords": ["type-theory", " parametricity", " erasure"], "paper_abstract": "Dependent type-theory aims to become the standard way to formalize mathematics at the same time as displacing traditional platforms for high-assurance programming. However, current implementations of type theory are still lacking, in the sense that some obvious truths require explicit proofs, making type-theory awkward to use for many applications, both in formalization and programming. In particular, notions of erasure are poorly supported. In this paper we propose an extension of type-theory with colored terms, color erasure and interpretation of colored types as predicates. The result is a more powerful type-theory: some definitions and proofs may be omitted as they become trivial, it becomes easier to program with precise types, and some parametricity results can be internalized.", "paper_title": "Type-Theory In Color", "paper_id": "WOS:000327696700007"}