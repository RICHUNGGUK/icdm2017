{"auto_keywords": [{"score": 0.04938215553287494, "phrase": "solid_state_drives"}, {"score": 0.04413298285224641, "phrase": "nand_flash_memory"}, {"score": 0.03979231715020777, "phrase": "garbage_collection"}, {"score": 0.03777837636915964, "phrase": "flash_memory"}, {"score": 0.029513985602016766, "phrase": "duplicate_data"}, {"score": 0.00481495049065317, "phrase": "data_de-duplication"}, {"score": 0.00479147041454407, "phrase": "access_framework"}, {"score": 0.004652963867892925, "phrase": "rapid_development"}, {"score": 0.004496402246090618, "phrase": "traditional_hard_drives"}, {"score": 0.0041579627441997, "phrase": "main_challenge"}, {"score": 0.0038448988429199086, "phrase": "write_requests"}, {"score": 0.0037336520904376687, "phrase": "free_space"}, {"score": 0.003661275004971829, "phrase": "\"out-place_update"}, {"score": 0.0035553221885904467, "phrase": "frequent_activities"}, {"score": 0.003385480888810982, "phrase": "overall_performance"}, {"score": 0.0032714270066711835, "phrase": "data_storage"}, {"score": 0.003054681986032532, "phrase": "important_topic"}, {"score": 0.0029086869572567072, "phrase": "data_de-duplication_access_framework"}, {"score": 0.002689430273401131, "phrase": "space_consumption"}, {"score": 0.0026115277372906805, "phrase": "file-based_de-duplication"}, {"score": 0.002573424607574822, "phrase": "static_chunking_de-duplication_scheme"}, {"score": 0.002523481637809674, "phrase": "complete_data_de-duplication"}, {"score": 0.0024503741901918527, "phrase": "application-based_locality"}, {"score": 0.0024264776194357993, "phrase": "file-name_locality"}, {"score": 0.0023104373174118458, "phrase": "experimental_results"}, {"score": 0.002276717177453959, "phrase": "proposed_framework"}], "paper_keywords": ["embedded systems", " flash memory", " solid state drives", " data de-duplication", " storage systems"], "paper_abstract": "With the rapid development of SSDs (Solid State Drives), traditional hard drives in many applications have been replaced by SSDs. Since SSDs consist of NAND flash memory, the main challenge to SSDs is that NAND flash memory is highly sensitive to write requests. A lot of write requests will cause garbage collection to reclaim free space due to the \"out-place update\" characteristic of flash memory. Frequent activities of garbage collection will reduce the lifetime of flash memory and overall performance. When SSDs are used for data storage, how to significantly decrease the amount of data written will become an important topic. In the paper, we will propose a data de-duplication access framework for SSDs. The objective is to eliminate duplicate data as much as possible and reduce space consumption. We will combine a file-based de-duplication and a static chunking de-duplication scheme to reach a complete data de-duplication. We will also investigate application-based locality and file-name locality to find out duplicate data. According to the experimental results, the proposed framework can efficiently identify duplicate data and decrease a lot of data written, and at the same time, the overhead is also reasonable.", "paper_title": "A Data De-duplication Access Framework for Solid State Drives", "paper_id": "WOS:000308780300009"}