{"auto_keywords": [{"score": 0.040018529529699524, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "dynamic_software_testing"}, {"score": 0.004579780586951551, "phrase": "dynamic_test_data_generation_framework"}, {"score": 0.00421297029755273, "phrase": "program_analyser"}, {"score": 0.003535165233011893, "phrase": "code_paths"}, {"score": 0.0034476484413811987, "phrase": "control_flow_graphs"}, {"score": 0.0029419014253094745, "phrase": "cu"}, {"score": 0.0027510752634224726, "phrase": "optimum_set"}, {"score": 0.00246765655376112, "phrase": "proposed_approach"}, {"score": 0.0022696277881969896, "phrase": "empirical_results"}, {"score": 0.0021049977753042253, "phrase": "existing_dynamic_test_data_generation_methods"}], "paper_keywords": ["Software testing", " Automatic test cases generation", " Genetic algorithms"], "paper_abstract": "This paper proposes a dynamic test data generation framework based on genetic algorithms. The framework houses a Program Analyser and a Test Case Generator, which intercommunicate to automatically generate test cases. The Program Analyser extracts statements and variables, isolates code paths and creates control flow graphs. The Test Case Generator utilises two optimisation algorithms, the Batch-Optimistic (BO) and the Close-Up (CU), and produces a near to optimum set of test cases with respect to the edge/condition coverage criterion. The efficacy of the proposed approach is assessed oil a number of programs and the empirical results indicate that its performance is significantly better compared to existing dynamic test data generation methods. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Automatic, evolutionary test data generation for dynamic software testing", "paper_id": "WOS:000260276700006"}