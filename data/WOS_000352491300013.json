{"auto_keywords": [{"score": 0.011354830409606961, "phrase": "segment_size"}, {"score": 0.00481495049065317, "phrase": "novel_multithreaded_variable_size_chunking_method"}, {"score": 0.004621447740470602, "phrase": "multicore_architecture"}, {"score": 0.00454090611248773, "phrase": "modern_microprocessors"}, {"score": 0.00438399094249306, "phrase": "variable_size_chunking_method"}, {"score": 0.0039449104968131655, "phrase": "art_storage_devices"}, {"score": 0.0032315723330399375, "phrase": "master_thread"}, {"score": 0.0031938648476635225, "phrase": "dual_mode_chunking"}, {"score": 0.003138124398958758, "phrase": "client_thread"}, {"score": 0.00304737045343781, "phrase": "elaborate_performance_model"}, {"score": 0.0029766550209309127, "phrase": "optimal_multithreading_degree"}, {"score": 0.0028069426877159642, "phrase": "prototype_deduplication_system"}, {"score": 0.00270978310478061, "phrase": "available_cpu_cores"}, {"score": 0.0024813081174066653, "phrase": "chunking_performance"}, {"score": 0.002353554841514325, "phrase": "performance_issues"}, {"score": 0.0022323643840655646, "phrase": "performance_bottlenecks"}, {"score": 0.002206290313627492, "phrase": "modern_deduplication_systems"}, {"score": 0.002142426911242168, "phrase": "chunking_operation"}, {"score": 0.0021049977753042253, "phrase": "chunking_invariability"}], "paper_keywords": ["Content-based chunking", " deduplication", " multithread"], "paper_abstract": "In this work, we developed a novel multithreaded variable size chunking method, MUCH, which exploits the multicore architecture of the modern microprocessors. The legacy single threaded variable size chunking method leaves much to be desired in terms of effectively exploiting the bandwidth of the state of the art storage devices. MUCH guarantees chunking invariability: The result of chunking does not change regardless of the degree of multithreading or the segment size. This is achieved by inter and intra-segment coalescing at the master thread and Dual Mode Chunking at the client thread. We developed an elaborate performance model to determine the optimal multithreading degree and the segment size. MUCH is implemented in the prototype deduplication system. By fully exploiting the available CPU cores (quad-core), we achieved up to x4 increase in the chunking performance (MByte/sec). MUCH successfully addresses the performance issues of file chunking which is one of the performance bottlenecks in modern deduplication systems by parallelizing the file chunking operation while guaranteeing Chunking Invariability.", "paper_title": "MUCH: Multithreaded Content-Based File Chunking", "paper_id": "WOS:000352491300013"}