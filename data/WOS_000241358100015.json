{"auto_keywords": [{"score": 0.03936222094519933, "phrase": "context-aware_aspects"}, {"score": 0.00481495049065317, "phrase": "context-aware_applications"}, {"score": 0.004342430078306461, "phrase": "context-specific_behavior"}, {"score": 0.004216112320418982, "phrase": "base_programs"}, {"score": 0.003304339421246321, "phrase": "appropriate_support"}, {"score": 0.0032319109979344184, "phrase": "aspect_language"}, {"score": 0.002914288956035066, "phrase": "aspect_definitions"}, {"score": 0.0028715299874549245, "phrase": "access_information"}, {"score": 0.0026867260506696455, "phrase": "open_framework"}, {"score": 0.0025137856138000014, "phrase": "first-class_contexts"}, {"score": 0.002404706573379854, "phrase": "context_awareness"}, {"score": 0.0021049977753042253, "phrase": "application-specific_constructs"}], "paper_keywords": [""], "paper_abstract": "Context-aware applications behave differently depending on the context in which they are running. Since context-specific behavior tends to crosscut base programs, it can advantageously be implemented as aspects. This leads to the notion of context-aware aspects, i.e., aspects whose behavior depends on context. This paper analyzes. the issue of appropriate support from the aspect language to both restrict the scope of aspects according to the context and allow aspect definitions to access information associated to the context. We propose an open framework for context-aware aspects that allows for the definition of first-class contexts and supports the definition of context awareness constructs for aspects, including the ability to refer to past contexts, and to provide domain and application-specific constructs.", "paper_title": "Context-aware aspects", "paper_id": "WOS:000241358100015"}