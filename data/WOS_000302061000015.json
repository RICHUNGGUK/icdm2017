{"auto_keywords": [{"score": 0.03604976072922866, "phrase": "heterogeneous_metaheuristics"}, {"score": 0.01512581445950995, "phrase": "optimization_problems"}, {"score": 0.010917347691647207, "phrase": "proposed_framework"}, {"score": 0.00481495049065317, "phrase": "parallel_metaheuristic_framework_based_on_harmony"}, {"score": 0.00471193241675062, "phrase": "distributed_computing_systems."}, {"score": 0.004671342094877447, "phrase": "large_number"}, {"score": 0.004377806391261418, "phrase": "reasonable_amount"}, {"score": 0.004247180402119585, "phrase": "np-hard_nature"}, {"score": 0.003997458586709491, "phrase": "existing_algorithms"}, {"score": 0.003480230347985338, "phrase": "parallel_metaheuristics"}, {"score": 0.0033762956164519286, "phrase": "core_component"}, {"score": 0.0032191849045822415, "phrase": "recent_breed"}, {"score": 0.0031365819432206004, "phrase": "improvisation_process"}, {"score": 0.002990592465417758, "phrase": "parallel_metaheuristic"}, {"score": 0.0029392020223716966, "phrase": "local_optima"}, {"score": 0.002888692115811987, "phrase": "best_solutions"}, {"score": 0.0028390477456009568, "phrase": "worker_metaheuristics"}, {"score": 0.0027781870000242004, "phrase": "harmony_memory"}, {"score": 0.0026488343783448273, "phrase": "new-possibly_better-harmonies"}, {"score": 0.0025920406425973368, "phrase": "actual_solution_sharing"}, {"score": 0.0024183363693242943, "phrase": "applicability_validation"}, {"score": 0.002387083859537412, "phrase": "performance_evaluation"}, {"score": 0.0023257824499250653, "phrase": "parallel_hybrid_metaheuristic"}, {"score": 0.002266051712795851, "phrase": "task_scheduling_problem"}, {"score": 0.0022464835515931592, "phrase": "multiprocessor_computing_systems"}, {"score": 0.002169882514603539, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "compelling_approach"}], "paper_keywords": ["Parallel algorithm", " scheduling", " metaheuristics"], "paper_abstract": "A large number of optimization problems have been identified as computationally challenging and/or intractable to solve within a reasonable amount of time. Due to the NP-hard nature of these problems, in practice, heuristics account for the majority of existing algorithms. Metaheuristics are one very popular type of heuristics used for many of these optimization problems. In this paper, we present a novel parallel-metaheuristic framework, which effectively enables to devise parallel metaheuristics, particularly with heterogeneous metaheuristics. The core component of the proposed framework is its harmony-search-based coordinator. Harmony search is a recent breed of metaheuristic that mimics the improvisation process of musicians. The coordinator facilitates heterogeneous metaheuristics (forming a parallel metaheuristic) to escape local optima. Specifically, best solutions generated by these worker metaheuristics are maintained in the harmony memory of the coordinator, and they are used to form new-possibly better-harmonies (solutions) before actual solution sharing between workers occurs; hence, their solutions are harmonized with each other. For the applicability validation and the performance evaluation, we have implemented a parallel hybrid metaheuristic using the framework for the task scheduling problem on multiprocessor computing systems (e.g., computer clusters). Experimental results verify that the proposed framework is a compelling approach to parallelize heterogeneous metaheuristics.", "paper_title": "A PARALLEL METAHEURISTIC FRAMEWORK BASED ON HARMONY SEARCH FOR SCHEDULING IN DISTRIBUTED COMPUTING SYSTEMS", "paper_id": "WOS:000302061000015"}