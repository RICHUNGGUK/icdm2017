{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "program_understanding"}, {"score": 0.004661446705304497, "phrase": "c_programs"}, {"score": 0.00436890075128947, "phrase": "lax_type_enforcement"}, {"score": 0.004298666679374568, "phrase": "low-level_access"}, {"score": 0.004061584718427419, "phrase": "dynamic_analysis"}, {"score": 0.00374531366198605, "phrase": "program_types"}, {"score": 0.0035386420095120706, "phrase": "physical_subtyping"}, {"score": 0.0034817084307034955, "phrase": "conservative_garbage_collection"}, {"score": 0.0033433365160336842, "phrase": "program-defined_type"}, {"score": 0.0032629585038738856, "phrase": "allocated_storage_location"}, {"score": 0.0031845067058084583, "phrase": "\"untypable\"_blocks"}, {"score": 0.0031079352545607267, "phrase": "heap_corruption"}, {"score": 0.003057910095857785, "phrase": "type_safety_violations"}, {"score": 0.002936331371903168, "phrase": "symbolic_debug_information"}, {"score": 0.0026209522797963447, "phrase": "defined_program_types"}, {"score": 0.0023776656246300063, "phrase": "gnu_debugger"}, {"score": 0.0021049977753042253, "phrase": "medium-sized_programs"}], "paper_keywords": ["algorithms", " human factors", " languages", " reliability", " dynamic type inference", " constraints", " debugging tools", " heap visualization", " physical subtyping", " conservative garbage collection"], "paper_abstract": "C programs can be difficult to debug due to lax type enforcement and low-level access to memory. We present a dynamic analysis for C that checks heap snapshots for consistency with program types. Our approach builds on ideas from physical subtyping and conservative garbage collection. We infer a program-defined type for each allocated storage location or identify \"untypable\" blocks that reveal heap corruption or type safety violations. The analysis exploits symbolic debug information if present, but requires no annotation or recompilation beyond a list of defined program types and allocated heap blocks. We have integrated our analysis into the GNU Debugger (gdb), and describe our initial experience using this tool with several small to medium-sized programs.", "paper_title": "Dynamic heap type inference for program understanding and debugging", "paper_id": "WOS:000253407700007"}