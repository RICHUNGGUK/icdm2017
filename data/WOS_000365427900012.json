{"auto_keywords": [{"score": 0.036653305954379496, "phrase": "uml-b"}, {"score": 0.026419155679563232, "phrase": "gluing_invariants"}, {"score": 0.00481495049065317, "phrase": "uml-b._uml-b"}, {"score": 0.004730458558634266, "phrase": "'uml-like'_graphical_front-end"}, {"score": 0.004485735417293941, "phrase": "object-oriented_and_state_machine_modelling_concepts"}, {"score": 0.004105558123159003, "phrase": "class_diagram"}, {"score": 0.00405735420159564, "phrase": "state_machine_diagram_editors"}, {"score": 0.003939296259436904, "phrase": "corresponding_event-b."}, {"score": 0.0036914757355166966, "phrase": "system_models"}, {"score": 0.0036481158025940016, "phrase": "different_abstraction_levels"}, {"score": 0.0034185505275141077, "phrase": "special_consideration"}, {"score": 0.003338690782620756, "phrase": "higher-level_modelling_concepts"}, {"score": 0.003165739628969694, "phrase": "case_study"}, {"score": 0.0030374213037172803, "phrase": "uml-b."}, {"score": 0.0027307746993761035, "phrase": "refinement_rules"}, {"score": 0.0025892330566358503, "phrase": "abstract_syntax"}, {"score": 0.0025587867729949037, "phrase": "uml-b_notation"}, {"score": 0.002426137929553724, "phrase": "proof_obligations"}, {"score": 0.0023277282036119106, "phrase": "significant_step"}, {"score": 0.002286781334850213, "phrase": "verifiable_models"}, {"score": 0.0021049977753042253, "phrase": "uml-b_refinement"}], "paper_keywords": ["Visual modelling languages", " Formal specification", " UML-B", " Event-B", " Class diagram", " State machine"], "paper_abstract": "UML-B is a 'UML-like' graphical front-end for Event-B that provides support for object-oriented and state machine modelling concepts, which are not available in Event-B. In particular, UML-B includes class diagram and state machine diagram editors with automatic generation of corresponding Event-B. In Event-B, refinement is used to relate system models at different abstraction levels. The same refinement concepts are also applicable in UML-B but require special consideration due to the higher-level modelling concepts. In previous work, we described a case study to introduce support for refinement in UML-B. We now provide a more complete presentation of the technique of refinement in UML-B including a formalisation of the refinement rules and a definition of the extensions to the abstract syntax of UML-B notation. The provision of gluing invariants to discharge the proof obligations associated with a refinement is a significant step in providing verifiable models. We discuss and compare two approaches for constructing gluing invariants in the context of UML-B refinement.", "paper_title": "A method of refinement in UML-B", "paper_id": "WOS:000365427900012"}