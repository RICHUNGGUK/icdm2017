{"auto_keywords": [{"score": 0.03321325200261326, "phrase": "bsp"}, {"score": 0.00481495049065317, "phrase": "shared-memory_parallel_programming"}, {"score": 0.004140726362519362, "phrase": "distributed-memory_parallel_architectures"}, {"score": 0.003980875186335867, "phrase": "yzelman"}, {"score": 0.003928969293303814, "phrase": "bisseling"}, {"score": 0.003802135020791801, "phrase": "java_library"}, {"score": 0.003728000957725218, "phrase": "shared-memory_architectures"}, {"score": 0.003631390978147703, "phrase": "present_article"}, {"score": 0.003400640983719424, "phrase": "new_high-performance_multicorebsp"}, {"score": 0.003021502415143067, "phrase": "existing_bsp_software"}, {"score": 0.002866817775018445, "phrase": "distributed-memory_or_shared-memory_architectures"}, {"score": 0.002737960968372391, "phrase": "multicorebsp"}, {"score": 0.00268452026617243, "phrase": "high-performance_results"}, {"score": 0.0026321198895843173, "phrase": "paper_details"}, {"score": 0.002547043222086858, "phrase": "sparse_matrix-vector_multiplication"}, {"score": 0.0021049977753042253, "phrase": "highly_non-uniform_memory_access_architectures"}], "paper_keywords": ["High-performance computing", " Bulk synchronous parallel", " Shared-memory parallel programming", " Software library", " Fast Fourier transform", " Sparse matrix-vector multiplication"], "paper_abstract": "The bulk synchronous parallel (BSP) model, as well as parallel programming interfaces based on BSP, classically target distributed-memory parallel architectures. In earlier work, Yzelman and Bisseling designed a MulticoreBSP for Java library specifically for shared-memory architectures. In the present article, we further investigate this concept and introduce the new high-performance MulticoreBSP for C library. Among other features, this library supports nested BSP runs. We show that existing BSP software performs well regardless whether it runs on distributed-memory or shared-memory architectures, and show that applications in MulticoreBSP can attain high-performance results. The paper details implementing the Fast Fourier Transform and the sparse matrix-vector multiplication in BSP, both of which outperform state-of-the-art implementations written in other shared-memory parallel programming interfaces. We furthermore study the applicability of BSP when working on highly non-uniform memory access architectures.", "paper_title": "MulticoreBSP for C: A High-Performance Library for Shared-Memory Parallel Programming", "paper_id": "WOS:000336802500007"}