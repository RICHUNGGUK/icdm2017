{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "converse"}, {"score": 0.004732785510739708, "phrase": "finite_trees"}, {"score": 0.004533427352547707, "phrase": "sound_and_complete_satisfiability-testing_algorithm"}, {"score": 0.004268293864953256, "phrase": "alternation-free_modal_mu-calculus"}, {"score": 0.0037834649508375544, "phrase": "finite_ordered_trees"}, {"score": 0.003686935223424015, "phrase": "time_complexity"}, {"score": 0.003592859432554987, "phrase": "satisfiability-testing_algorithm"}, {"score": 0.003353521531649663, "phrase": "formula_size"}, {"score": 0.003157174936641705, "phrase": "symbolic_techniques"}, {"score": 0.0029722900280316216, "phrase": "crucial_implementation_techniques"}, {"score": 0.0023548511815224098, "phrase": "logical_formulas"}, {"score": 0.0023145690608400425, "phrase": "significant_size"}, {"score": 0.0022749744354271816, "phrase": "practical_value"}, {"score": 0.0021049977753042253, "phrase": "xml_trees"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Verification", " Modal logic", " satisfiability", " implementation"], "paper_abstract": "We present a sound and complete satisfiability-testing algorithm and its effective implementation for an alternation-free modal mu-calculus with converse, where formulas are cycle-free and are interpreted over finite ordered trees. The time complexity of the satisfiability-testing algorithm is 2(O(n)) in terms of formula size n. The algorithm is implemented using symbolic techniques (BDD). We present crucial implementation techniques and heuristics that we used to make the algorithm as fast as possible in practice. Our implementation is available online and can be used to solve logical formulas of significant size and practical value. We illustrate this in the setting of XML trees.", "paper_title": "Efficiently Deciding mu-Calculus with Converse over Finite Trees", "paper_id": "WOS:000353644400007"}