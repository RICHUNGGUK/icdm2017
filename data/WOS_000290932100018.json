{"auto_keywords": [{"score": 0.04299750205171382, "phrase": "accepted_intervals"}, {"score": 0.031980688517243595, "phrase": "online_algorithm"}, {"score": 0.00481495049065317, "phrase": "related_machines"}, {"score": 0.00458488025289647, "phrase": "n_intervals"}, {"score": 0.004473982381245469, "phrase": "fixed_starting_times"}, {"score": 0.004339108074589307, "phrase": "different_speeds"}, {"score": 0.003958299299658418, "phrase": "offline_version"}, {"score": 0.0036329805216306576, "phrase": "online_version"}, {"score": 0.0035233696341819437, "phrase": "lower_bound"}, {"score": 0.003417054482155433, "phrase": "competitive_ratio"}, {"score": 0.0033548062793973144, "phrase": "deterministic_online_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Scheduling", " Computational complexity", " Online algorithms", " Competitive analysis"], "paper_abstract": "We consider the problem of scheduling n intervals (jobs with fixed starting times) on m machines with different speeds with the objective to maximize the number of accepted intervals. We prove that the offline version of the problem is strongly NP-hard to solve. For the online version, we show a lower bound of 5/3 on the competitive ratio of any deterministic online algorithm for the problem. Moreover, we present two simple greedy rules for online algorithms and show that any online algorithm using these rules is 2-competitive. One of these 2-competitive algorithms is shown to run in O(n logm) time. Additionally, we prove that our greedy rules impose no loss in the sense that every online algorithm for the problem can be modified to use the rules without reducing the number of accepted intervals on any instance. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Interval scheduling on related machines", "paper_id": "WOS:000290932100018"}