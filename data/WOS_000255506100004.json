{"auto_keywords": [{"score": 0.046769512189469904, "phrase": "test_suite"}, {"score": 0.0043945048085683005, "phrase": "initial_testing"}, {"score": 0.004342430078306461, "phrase": "new_test_cases"}, {"score": 0.004189863767755212, "phrase": "whole_testing_process"}, {"score": 0.003531474887552889, "phrase": "quite_a_few_test_suite_reduction_techniques"}, {"score": 0.0033668870709083884, "phrase": "general_problem"}, {"score": 0.003313741359811683, "phrase": "optimal_representative"}, {"score": 0.0031342307827666675, "phrase": "experimental_studies"}, {"score": 0.003109390330476147, "phrase": "test_suite_reduction_techniques"}, {"score": 0.002964415652865295, "phrase": "recently_proposed_techniques"}, {"score": 0.0028487656293168795, "phrase": "reported_experiments"}, {"score": 0.002792638947473095, "phrase": "small_programs"}, {"score": 0.0027704982687041147, "phrase": "even_simulation_data"}, {"score": 0.002705121052747945, "phrase": "new_experimental_study"}, {"score": 0.0026412824985309323, "phrase": "harrold_et_al"}, {"score": 0.0025483721250106122, "phrase": "chen"}, {"score": 0.00252812242767189, "phrase": "lau's_gre_heuristic"}, {"score": 0.0025080765339659384, "phrase": "mansour"}, {"score": 0.002488183412451029, "phrase": "el-fakin's_genetic_algorithm-based_approach"}, {"score": 0.0024586427394152196, "phrase": "black_et_al"}, {"score": 0.002429451930463481, "phrase": "ilp-based_approach"}, {"score": 0.0023532890136269986, "phrase": "experimental_study"}, {"score": 0.0022614266476954467, "phrase": "appropriate_test_suite_reduction_technique"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["test suite reduction", " software testing", " test suite minimization", " empirical studies"], "paper_abstract": "In software development, developers often rely on testing to reveal bugs. Typically, a test suite should be prepared before initial testing, and new test cases may be added to the test suite during the whole testing process. This may usually cause the test suite to contain more or less redundancy. In other words, a subset of the test suite (called the representative set) may still satisfy all the test objectives. As the redundancy can increase the cost of executing the test suite, quite a few test suite reduction techniques have been brought out in spite of the NP-completeness of the general problem of finding the optimal representative set of a test suite. In the literature, there have been some experimental studies of test suite reduction techniques, but the limitations of the these experimental studies are quite obvious. Recently proposed techniques are not experimentally compared against each other, and reported experiments are mainly based on small programs or even simulation data. This paper presents a new experimental study of the four typical test suite reduction techniques, including Harrold et al.'s heuristic, and three other recently proposed techniques such as Chen and Lau's GRE heuristic, Mansour and El-Fakin's genetic algorithm-based approach, and Black et al.'s ILP-based approach. Based on the results of this experimental study, we also provide a guideline for choosing the appropriate test suite reduction technique and some insights into why the techniques vary in effectiveness and efficiency. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "An experimental study of four typical test suite reduction techniques", "paper_id": "WOS:000255506100004"}