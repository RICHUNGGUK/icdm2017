{"auto_keywords": [{"score": 0.039434146520232714, "phrase": "hottest"}, {"score": 0.00481495049065317, "phrase": "enhanced_testing"}, {"score": 0.004764220976404241, "phrase": "domain-specific_applications"}, {"score": 0.004714023408114857, "phrase": "model-based_testing"}, {"score": 0.004639712384096822, "phrase": "effective_black-box_test_generation_technique"}, {"score": 0.004542441734438654, "phrase": "existing_model-based_testing_techniques"}, {"score": 0.004377077848734575, "phrase": "implicit_domain-specific_properties"}, {"score": 0.004217708394188058, "phrase": "software_artifacts"}, {"score": 0.004151188559520802, "phrase": "design_documents"}, {"score": 0.0041074234667687875, "phrase": "requirement_specifications"}, {"score": 0.003916098498242888, "phrase": "test_model"}, {"score": 0.0036553070575015344, "phrase": "strongly_typed_domain-specific_language"}, {"score": 0.0034299649219748513, "phrase": "type-related_system_invariants"}, {"score": 0.0030039966201398966, "phrase": "domain-specific_requirements"}, {"score": 0.0029565620771207003, "phrase": "test_models"}, {"score": 0.002658863179011018, "phrase": "domain-specific_properties"}, {"score": 0.0026307897899760383, "phrase": "specific_type_constraints"}, {"score": 0.002508073621696602, "phrase": "haskelldb"}, {"score": 0.0024423826953133844, "phrase": "haskell-based_embedded_domain-specific_language"}, {"score": 0.0023408288327263316, "phrase": "example_application"}, {"score": 0.002196342933346204, "phrase": "asml"}, {"score": 0.002138799283553239, "phrase": "uml-based_testing"}, {"score": 0.0021049977753042253, "phrase": "efsm"}], "paper_keywords": ["languages", " performance", " reliability", " test case generation", " domain-specific languages", " model-based testing", " domain-specific testing", " database-specific test case generation", " test generation tools", " Haskell", " HaskellDB"], "paper_abstract": "Model-based testing is an effective black-box test generation technique for applications. Existing model-based testing techniques, however, fail to capture implicit domain-specific properties, as they overtly rely on software artifacts such as design documents, requirement specifications, etc., for completeness of the test model. This article presents a technique, HOTTest, which uses a strongly typed domain-specific language to model the system under test. This allows extraction of type-related system invariants, which can be related to various domain-specific properties of the application. Thus, using HOTTest, it is possible to automatically extract and embed domain-specific requirements into the test models. In this article we describe HOTTest, its principles and methodology, and how it is possible to relate domain-specific properties to specific type constraints. HOTTest is described using the example of HaskellDB, which is a Haskell-based embedded domain-specific language for relational databases. We present an example application of the technique and compare the results to some other commonly used Model-based test automation techniques like ASML-based testing, UML-based testing, and EFSM-based testing.", "paper_title": "HOTTest: A model-based test design technique for enhanced testing of domain-specific applications", "paper_id": "WOS:000240456500002"}