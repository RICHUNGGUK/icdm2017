{"auto_keywords": [{"score": 0.04729673582544897, "phrase": "security_inspection"}, {"score": 0.04419846536070138, "phrase": "security_experts"}, {"score": 0.04043812428061782, "phrase": "vulnerable_code_locations"}, {"score": 0.00481495049065317, "phrase": "code_churn"}, {"score": 0.0045850648862091085, "phrase": "software_vulnerabilities"}, {"score": 0.004135010810625326, "phrase": "code_locations"}, {"score": 0.003916098498242888, "phrase": "rare_occurrences"}, {"score": 0.0037697665240643066, "phrase": "challenging_task"}, {"score": 0.003668591097652231, "phrase": "software_metrics"}, {"score": 0.0036091892088392775, "phrase": "source_code"}, {"score": 0.0035701213515857227, "phrase": "development_history"}, {"score": 0.003201890266327127, "phrase": "testing_efforts"}, {"score": 0.0027491084541806823, "phrase": "open-source_projects"}, {"score": 0.0026463271549909133, "phrase": "linux"}, {"score": 0.0021049977753042253, "phrase": "random_selection"}], "paper_keywords": ["Fault prediction", " software metrics", " software security", " vulnerability prediction"], "paper_abstract": "Security inspection and testing require experts in security who think like an attacker. Security experts need to know code locations on which to focus their testing and inspection efforts. Since vulnerabilities are rare occurrences, locating vulnerable code locations can be a challenging task. We investigated whether software metrics obtained from source code and development history are discriminative and predictive of vulnerable code locations. If so, security experts can use this prediction to prioritize security inspection and testing efforts. The metrics we investigated fall into three categories: complexity, code churn, and developer activity metrics. We performed two empirical case studies on large, widely used open-source projects: the Mozilla Firefox web browser and the Red Hat Enterprise Linux kernel. The results indicate that 24 of the 28 metrics collected are discriminative of vulnerabilities for both projects. The models using all three types of metrics together predicted over 80 percent of the known vulnerable files with less than 25 percent false positives for both projects. Compared to a random selection of files for inspection and testing, these models would have reduced the number of files and the number of lines of code to inspect or test by over 71 and 28 percent, respectively, for both projects.", "paper_title": "Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities", "paper_id": "WOS:000297513700002"}