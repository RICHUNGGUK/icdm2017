{"auto_keywords": [{"score": 0.02681468715443094, "phrase": "metis"}, {"score": 0.00481495049065317, "phrase": "parallel_graph_coloring"}, {"score": 0.00459165923324494, "phrase": "new_efficient_parallel_algorithms"}, {"score": 0.004462663711734448, "phrase": "approximate_solutions"}, {"score": 0.004337276328199398, "phrase": "coloring_problems"}, {"score": 0.004136044939878838, "phrase": "existing_shared_memory_parallel_graph_coloring_algorithm"}, {"score": 0.0035525230119401153, "phrase": "cache_misses"}, {"score": 0.003419943984098415, "phrase": "vertex-to-processor_assignments"}, {"score": 0.003199687131875466, "phrase": "random_allocation"}, {"score": 0.0030802351224657673, "phrase": "experimental_results"}, {"score": 0.0028274743316389437, "phrase": "ibm_regatta_supercomputer"}, {"score": 0.0024747842618794255, "phrase": "graph_partitioning"}, {"score": 0.0021049977753042253, "phrase": "previous_algorithm"}], "paper_keywords": [""], "paper_abstract": "This paper presents new efficient parallel algorithms for finding approximate solutions to graph coloring problems. We consider an existing shared memory parallel graph coloring algorithm and suggest several enhancements both in terms of ordering the vertices so as to minimize cache misses, and performing vertex-to-processor assignments based on graph partitioning instead of random allocation. We report experimental results that demonstrate the performance of our algorithms on an IBM Regatta supercomputer when up to 12 processors are used. Our implementations use OpenMP for parallelization and Metis for graph partitioning. The experiments show that we get up to a 70% reduction in runtime compared to the previous algorithm.", "paper_title": "Speeding up parallel graph coloring", "paper_id": "WOS:000237003200130"}