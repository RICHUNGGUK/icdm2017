{"auto_keywords": [{"score": 0.03684001111564974, "phrase": "existing_faulttracer_approach"}, {"score": 0.03116522728244387, "phrase": "fifl"}, {"score": 0.00481495049065317, "phrase": "mechanical_faults"}, {"score": 0.004742290714667451, "phrase": "developer_faults"}, {"score": 0.00469445816161498, "phrase": "evolving_software"}, {"score": 0.004553822674247401, "phrase": "novel_methodology"}, {"score": 0.004507882471601552, "phrase": "localizing_faults"}, {"score": 0.004220314322073171, "phrase": "failure-inducing_edits"}, {"score": 0.004032002950217453, "phrase": "mechanical_program_transformations"}, {"score": 0.0036988415150699945, "phrase": "fifl_framework"}, {"score": 0.003393115177189967, "phrase": "potential_impacts"}, {"score": 0.003291336101694653, "phrase": "mutation_changes"}, {"score": 0.0031284221314354065, "phrase": "real-world_repositories"}, {"score": 0.00309681702203087, "phrase": "nine_java_projects"}, {"score": 0.002988685006809336, "phrase": "experimental_results"}, {"score": 0.0028551716387011637, "phrase": "state-of-the-art_faulttracer_technique"}, {"score": 0.002592523232809191, "phrase": "spectrum_information"}, {"score": 0.0025663181430010686, "phrase": "simulated_impact_information"}, {"score": 0.0024392031587145728, "phrase": "significance_level"}, {"score": 0.0023066199295447686, "phrase": "faulttracer"}], "paper_keywords": ["Algorithms", " Experimentation", " Software Evolution", " Regression Testing", " Fault Localization", " Mutation Testing"], "paper_abstract": "This paper presents a novel methodology for localizing faults in code as it evolves. Our insight is that the essence of failure-inducing edits made by the developer can be captured using mechanical program transformations (e. g., mutation changes). Based on the insight, we present the FIFL framework, which uses both the spectrum information of edits (obtained using the existing FAULTTRACER approach) as well as the potential impacts of edits (simulated by mutation changes) to achieve more accurate fault localization. We evaluate FIFL on real-world repositories of nine Java projects ranging from 5.7KLoC to 88.8KLoC. The experimental results show that FIFL is able to outperform the state-of-the-art FAULTTRACER technique for localizing failure-inducing program edits significantly. For example, all 19 FIFL strategies that use both the spectrum information and simulated impact information for each edit outperform the existing FAULTTRACER approach statistically at the significance level of 0.01. In addition, FIFL with its default settings outperforms FAULTTRACER by 2.33% to 86.26% on 16 of the 26 studied version pairs, and is only inferior than FAULTTRACER on one version pair.", "paper_title": "Injecting Mechanical Faults to Localize Developer Faults for Evolving Software", "paper_id": "WOS:000327697300043"}