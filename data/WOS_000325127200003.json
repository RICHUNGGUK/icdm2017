{"auto_keywords": [{"score": 0.03649502212066351, "phrase": "query_results"}, {"score": 0.02705502490725876, "phrase": "split_points"}, {"score": 0.00481495049065317, "phrase": "static_and_continuous_range_queries"}, {"score": 0.004679134285953932, "phrase": "spatial_range_search"}, {"score": 0.004596192494271827, "phrase": "computational_geometry"}, {"score": 0.004563427013973105, "phrase": "multimedia_problems"}, {"score": 0.004514714250357749, "phrase": "interest_objects"}, {"score": 0.0044346739635814135, "phrase": "range_search_query"}, {"score": 0.003969018740062018, "phrase": "query_point"}, {"score": 0.003829455440282146, "phrase": "better_results"}, {"score": 0.0036553070575015344, "phrase": "search_boundary"}, {"score": 0.0035141291835319682, "phrase": "approximate_range_search"}, {"score": 0.003342280102112269, "phrase": "approximate_static_range_search"}, {"score": 0.003066945490483524, "phrase": "better_performance"}, {"score": 0.003023307182674672, "phrase": "low_false_hit"}, {"score": 0.0030017207229983385, "phrase": "reasonable_false_miss"}, {"score": 0.0028857130140890787, "phrase": "continuous_query"}, {"score": 0.002744510304340939, "phrase": "spatial_databases"}, {"score": 0.0027151607914592552, "phrase": "mobile_user"}, {"score": 0.002610198789888055, "phrase": "continuous_range_search"}, {"score": 0.0023950275815082297, "phrase": "approximate_continuous_range_search"}, {"score": 0.0023356699564158426, "phrase": "search_minimization"}, {"score": 0.0022054488653549175, "phrase": "traditional_continuous_range_search"}, {"score": 0.0021049977753042253, "phrase": "overall_performance"}], "paper_keywords": ["Approximate static range", " Approximate continuous range", " Spatial databases", " Query processing"], "paper_abstract": "For many years, spatial range search has been applied to computational geometry and multimedia problems to find interest objects within a given radius. Range search query has traditionally been used to return all objects within a given radius. However, having all objects is not necessary, especially when there are already enough objects closer to the query point. Furthermore, expanding the radius may give users better results, especially when there are a lot of objects just outside the search boundary. Therefore, in this paper, we focus on approximate range search, where the query results are approximate, rather than exact. We propose approximate static range search (ARS) which combines two approaches, namely (i) lowerbound approximate range search, and (ii) upperbound approximate range search. Using ARS, we are able to deliver a better performance, together with low false hit and reasonable false miss. We also extend ARS in the context of a continuous query setting, in which the query moves. This is particularly important in spatial databases as a mobile user who invokes the query is moving. In terms of continuous range search, the intention is to find split points-the locations where the query results will be updated. Accordingly, we propose two methods for approximate continuous range search, namely (i) range search minimization, and (ii) split points minimization. Our performance evaluation which compares our methods with the traditional continuous range search shows that our methods considerably reduce the number of split points, thereby improving overall performance.", "paper_title": "Approximate algorithms for static and continuous range queries in mobile navigation", "paper_id": "WOS:000325127200003"}