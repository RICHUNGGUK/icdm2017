{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrency_anomalies"}, {"score": 0.015523329397504055, "phrase": "transactional_memory_programs"}, {"score": 0.004694092086199672, "phrase": "concurrent_programs"}, {"score": 0.00443308765153716, "phrase": "erroneous_and_unpredictable_program_behaviors"}, {"score": 0.004321772629297024, "phrase": "program_correctness"}, {"score": 0.003709974534103202, "phrase": "static_analysis_procedure"}, {"score": 0.003571018150056717, "phrase": "transactional_memory_anomalies"}, {"score": 0.0033937776228549557, "phrase": "classic_case"}, {"score": 0.0033508547759861186, "phrase": "low-level_dataraces"}, {"score": 0.003287482882222731, "phrase": "concurrent_accesses"}, {"score": 0.003245900020944865, "phrase": "shared_memory_cells"}, {"score": 0.0030457198309616694, "phrase": "memory_transaction"}, {"score": 0.0028761045789798103, "phrase": "high-level_dataraces"}, {"score": 0.0028037753646260937, "phrase": "programmer's_attention"}, {"score": 0.002733260122876447, "phrase": "memory_transactions"}, {"score": 0.002548331088496964, "phrase": "single_transaction"}, {"score": 0.0023458049872325214, "phrase": "different_sources"}, {"score": 0.0023013968622710847, "phrase": "well_known_low-and_high-level_anomalies"}, {"score": 0.0021049977753042253, "phrase": "static_analysis_techniques"}], "paper_keywords": ["testing", " verification", " concurrency", " software transactional memory", " static analysis"], "paper_abstract": "Concurrent programs may suffer from concurrency anomalies that may lead to erroneous and unpredictable program behaviors. To ensure program correctness, these anomalies must be diagnosed and corrected. This paper addresses the detection of both low-and high-level anomalies in the Transactional Memory setting. We propose a static analysis procedure and a framework to address Transactional Memory anomalies. We start by dealing with the classic case of low-level dataraces, identifying concurrent accesses to shared memory cells that are not protected within the scope of a memory transaction. Then, we address the case of high-level dataraces, bringing the programmer's attention to pairs of memory transactions that were misspecified and should have been combined into a single transaction. Our framework was applied to a set of programs, collected form different sources, containing well known low-and high-level anomalies. The framework demonstrated to be accurate, confirming the effectiveness of using static analysis techniques to precisely identify concurrency anomalies in Transactional Memory programs.", "paper_title": "Detecting Concurrency Anomalies in Transactional Memory Programs", "paper_id": "WOS:000292705700015"}