{"auto_keywords": [{"score": 0.03724961953707463, "phrase": "neighborhood_trees"}, {"score": 0.00481495049065317, "phrase": "large_networks"}, {"score": 0.004481132747216135, "phrase": "complex_data_objects"}, {"score": 0.004367581653370531, "phrase": "real_world"}, {"score": 0.004256895619944631, "phrase": "graph_patterns"}, {"score": 0.00421340730888561, "phrase": "large_graphs"}, {"score": 0.004106612344123407, "phrase": "fundamental_graph_analysis_tools"}, {"score": 0.004023120753104693, "phrase": "underlying_characteristics"}, {"score": 0.003961613484271729, "phrase": "complex_networks"}, {"score": 0.003782655283668953, "phrase": "new_tree-based_approach"}, {"score": 0.003724810609448597, "phrase": "subgraph-matching_performance"}, {"score": 0.0035932440062595252, "phrase": "new_graph_indexing_mechanism"}, {"score": 0.0033957904376127187, "phrase": "neighborhood_relationships"}, {"score": 0.003292685392413911, "phrase": "large_graph"}, {"score": 0.0032423089921154503, "phrase": "negative_vertices"}, {"score": 0.0031277316566463978, "phrase": "query_graph"}, {"score": 0.002955782731675529, "phrase": "candidate_trees"}, {"score": 0.002851301751761804, "phrase": "original_query_graph"}, {"score": 0.002585906251354904, "phrase": "matched_graphs"}, {"score": 0.002494466951433885, "phrase": "graph_query_optimizer"}, {"score": 0.002443671484766342, "phrase": "neighborhood_tree_selection_order"}, {"score": 0.0023694065215394593, "phrase": "cost_evaluation"}, {"score": 0.002262209824105154, "phrase": "real_and_synthetic_databases"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph querying", " Graph matching", " Neighborhood tree", " Indexing", " Social network"], "paper_abstract": "Graphs are used to model complex data objects and their relationships in the real world. Finding occurrences of graph patterns in large graphs is one of the fundamental graph analysis tools used to discover underlying characteristics from these complex networks. In this paper, we propose a new tree-based approach for improving subgraph-matching performance. First, we introduce a new graph indexing mechanism known as Neighborhood Trees (NTree), which records the neighborhood relationships of each vertex in the large graph to filter negative vertices. Second, we decompose a query graph into a set of neighborhood trees and only a subset of candidate trees, which can properly recover the original query graph. In this way, the tree-at-a-time method is used to obtain the matched graphs. Third, we employ a graph query optimizer to determine the neighborhood tree selection order on the basis of the cost evaluation of tree join operations. Experiments on both real and synthetic databases demonstrate that our approach is more efficient than other state-of-the-art indexing methods. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Graph indexing for large networks: A neighborhood tree-based approach", "paper_id": "WOS:000345491100005"}