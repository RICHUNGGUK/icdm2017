{"auto_keywords": [{"score": 0.04871345342241016, "phrase": "csfq"}, {"score": 0.04589854634090016, "phrase": "stlcc"}, {"score": 0.015435150618496523, "phrase": "congestion_control"}, {"score": 0.01330578730852191, "phrase": "congestion_level"}, {"score": 0.01047044576044501, "phrase": "packet_loss"}, {"score": 0.009951654588135527, "phrase": "self-verifying_csfq"}, {"score": 0.009746559347303015, "phrase": "tbcc"}, {"score": 0.009722707340049569, "phrase": "congestion_control_system"}, {"score": 0.009136570115140866, "phrase": "tlcc"}, {"score": 0.009072260819794866, "phrase": "competing_flows"}, {"score": 0.006910533175337508, "phrase": "fair_best_effort_service"}, {"score": 0.006821953473495771, "phrase": "token-based_congestion_control"}, {"score": 0.006672718382714604, "phrase": "heavy_load"}, {"score": 0.006615562228948188, "phrase": "token-limited_congestion_control"}, {"score": 0.006391760416129958, "phrase": "simple_version"}, {"score": 0.006215564763185823, "phrase": "inter-domain_router"}, {"score": 0.006130092180406936, "phrase": "congestion_collapse"}, {"score": 0.005866519301213463, "phrase": "congested_link"}, {"score": 0.005839438155344652, "phrase": "traffic_sources"}, {"score": 0.005364208460333689, "phrase": "edge_routers"}, {"score": 0.00534444250117629, "phrase": "core_routers"}, {"score": 0.00481495049065317, "phrase": "packet_loss_control_using_tokens"}, {"score": 0.004791295879639957, "phrase": "simultaneous_audio"}, {"score": 0.004776570513030216, "phrase": "data_traffic"}, {"score": 0.004692047278524071, "phrase": "insufficient_tcp_mechanism"}, {"score": 0.004683388912335356, "phrase": "network_congestion"}, {"score": 0.004663247850886235, "phrase": "open-loop_controller"}, {"score": 0.004640335040788, "phrase": "per-flow_bandwidth_consumption"}, {"score": 0.00456945229246975, "phrase": "closed-loop_congestion_control_principle"}, {"score": 0.004483052812637842, "phrase": "inter-domain_traffic"}, {"score": 0.0044336336951893, "phrase": "new_protocols"}, {"score": 0.0044254500665609235, "phrase": "inter-domain_congestion_control"}, {"score": 0.004376663143721898, "phrase": "input_traffic"}, {"score": 0.004368584210260205, "phrase": "inter-domain_link"}, {"score": 0.0043444363878356726, "phrase": "congestion_index"}, {"score": 0.00432574666718094, "phrase": "network_edge"}, {"score": 0.004315102791778593, "phrase": "network_performance"}, {"score": 0.004262273304740847, "phrase": "ip_protocols_modifications"}, {"score": 0.0042413222827368535, "phrase": "modern_ip_network_services"}, {"score": 0.004230885258150267, "phrase": "simultaneous_digital_transmission"}, {"score": 0.004199727383131598, "phrase": "congestion_control_protocols"}, {"score": 0.004181657584532622, "phrase": "packet_loss_parameter"}, {"score": 0.0041650092809768675, "phrase": "peer_domains"}, {"score": 0.004154759263493772, "phrase": "output_token_rate"}, {"score": 0.004145749925175546, "phrase": "packet_switching_networks"}, {"score": 0.0041050884453374716, "phrase": "transport_performance_indexes"}, {"score": 0.004049826643876077, "phrase": "high-level_models"}, {"score": 0.004012573559281466, "phrase": "specific_network_architecture"}, {"score": 0.003987927979118726, "phrase": "vast_literature"}, {"score": 0.003978112014839628, "phrase": "telecommunication_networks"}, {"score": 0.003951242021987713, "phrase": "first_one"}, {"score": 0.00394394526757378, "phrase": "time-varying_delay"}, {"score": 0.003936661934811829, "phrase": "control_point"}, {"score": 0.003922135436322746, "phrase": "second_one"}, {"score": 0.003890844265175239, "phrase": "feedback_signal"}, {"score": 0.0038408214492623265, "phrase": "best-effort_service"}, {"score": 0.00381957970104526, "phrase": "cooperative_environment"}, {"score": 0.0038090589841447116, "phrase": "xcp"}, {"score": 0.0037984549828326106, "phrase": "tcp_congestion_control_algorithm"}, {"score": 0.0037844365379204534, "phrase": "load_shedding"}, {"score": 0.003772793879444995, "phrase": "congestion_links"}, {"score": 0.0037426896926748394, "phrase": "active_queue_management"}, {"score": 0.0037219886365287085, "phrase": "transport_performance"}, {"score": 0.003674128713348913, "phrase": "high_speed_networks"}, {"score": 0.0036696027285233208, "phrase": "core-stateless_fair_queuing"}, {"score": 0.0036470559917231218, "phrase": "open-loop_control_system"}, {"score": 0.003620182029906888, "phrase": "flow_arrival_rate"}, {"score": 0.0036134944256871263, "phrase": "packet_header"}, {"score": 0.0035868668777711663, "phrase": "rate_label"}, {"score": 0.0035538572187287253, "phrase": "cachelogic"}, {"score": 0.003525493807130663, "phrase": "bit-torrent"}, {"score": 0.003490894468848886, "phrase": "quite_a_lot"}, {"score": 0.003480151725338411, "phrase": "real_numbers"}, {"score": 0.0033995763088007004, "phrase": "total_token_resource"}, {"score": 0.0033558482233114932, "phrase": "extra_bandwidth_resources"}, {"score": 0.0033208602255967484, "phrase": "domain_border"}, {"score": 0.00329638194132342, "phrase": "flow's_rate"}, {"score": 0.0032842103209666596, "phrase": "re-estimated_rate"}, {"score": 0.003275159386648914, "phrase": "source_edge_router"}, {"score": 0.00326805114687455, "phrase": "flow's_packet"}, {"score": 0.0032479635764117204, "phrase": "border_router"}, {"score": 0.003212115585984781, "phrase": "congestion_control_architecture_re-feedback"}, {"score": 0.003198281450220701, "phrase": "fixed_cost"}, {"score": 0.00319040291156249, "phrase": "bulk_inter-domain_congestion"}, {"score": 0.0031590817431342943, "phrase": "malignant_end-user"}, {"score": 0.003141598480804135, "phrase": "fixed_congestion"}, {"score": 0.0031338591340734517, "phrase": "inter-domain_interconnection"}, {"score": 0.003116515024468928, "phrase": "inter-domain_interconnection_polices"}, {"score": 0.0030916312207829796, "phrase": "private_peering_polices"}, {"score": 0.003068837396358883, "phrase": "mutual_charge"}, {"score": 0.003055618448225614, "phrase": "congestion_charges"}, {"score": 0.003049970576405933, "phrase": "peer_domain"}, {"score": 0.0030274916812425673, "phrase": "ska."}, {"score": 0.003018161994573729, "phrase": "new_and_better_mechanism"}, {"score": 0.002986684155194013, "phrase": "new_method"}, {"score": 0.002946433523793943, "phrase": "digital_number"}, {"score": 0.0029085171146999065, "phrase": "path_routers"}, {"score": 0.0028728586658417496, "phrase": "token_number"}, {"score": 0.002862246379638653, "phrase": "source's_edge_point"}, {"score": 0.002808035792927749, "phrase": "total_output"}, {"score": 0.0027753172765531547, "phrase": "output_packets"}, {"score": 0.0027429789393362703, "phrase": "iterative_algorithm"}, {"score": 0.002724428781940696, "phrase": "long_period"}, {"score": 0.0027143633003880404, "phrase": "stable_state"}, {"score": 0.002709344475507209, "phrase": "bad_parameter_configuration"}, {"score": 0.0026910211667310704, "phrase": "oscillated_process"}, {"score": 0.0026860453849293503, "phrase": "window_size"}, {"score": 0.0026827478024371494, "phrase": "tcp"}, {"score": 0.0026728214464564275, "phrase": "acknowledge_packets"}, {"score": 0.0026498356022587643, "phrase": "congestion_times"}, {"score": 0.0025884344326392423, "phrase": "oscillation_problem"}, {"score": 0.0025836478454939406, "phrase": "stable_token-limited_congestion_control"}, {"score": 0.0025456716198597627, "phrase": "output_rate"}, {"score": 0.002520663971508492, "phrase": "almost_no_packet"}, {"score": 0.002503613506414865, "phrase": "edge_router"}, {"score": 0.0024820792023911866, "phrase": "incoming_token_rate_increases"}, {"score": 0.0024774888010414206, "phrase": "core_router"}, {"score": 0.0024440836179156593, "phrase": "network_resources"}, {"score": 0.0024380584006432637, "phrase": "access_link"}, {"score": 0.002393339076815566, "phrase": "fair_bandwidth_allocation"}, {"score": 0.00237861522566195, "phrase": "section_iii"}, {"score": 0.0023727510188530803, "phrase": "tbcc."}, {"score": 0.0023479886230390063, "phrase": "section_v"}, {"score": 0.0023436456285419885, "phrase": "unified_congestion_control_model"}, {"score": 0.0023378674332831277, "phrase": "abstract_model"}, {"score": 0.002327789769916012, "phrase": "stlcc."}, {"score": 0.002302074343012115, "phrase": "current_internet"}, {"score": 0.0022724310215299286, "phrase": "tbcc_system"}, {"score": 0.0022598436138592934, "phrase": "ska_arrangement"}, {"score": 0.002237637525225501, "phrase": "incoming_token_rate"}, {"score": 0.0022074592164608134, "phrase": "extended_header_tkhead"}, {"score": 0.0021642870430530897, "phrase": "token-level"}, {"score": 0.002128516446021264, "phrase": "transmission_path"}, {"score": 0.0021232675171589865, "phrase": "reverse_packet"}, {"score": 0.0021049977753042253, "phrase": "forwarding_packet_header"}], "paper_keywords": ["P2P", " Congestion Control", " Congestion-Index", " CSFQ", " TBCC", " Re-feedback", " Inter-Domain", " TLCC"], "paper_abstract": "Presently the Internet accommodates simultaneous audio, video, and data traffic. This requires the Internet to guarantee the packet loss which at its turn depends very much on congestion control. A series of protocols have been introduced to supplement the insufficient TCP mechanism controlling the network congestion. CSFQ was designed as an open-loop controller to provide the fair best effort service for supervising the per-flow bandwidth consumption and has become helpless when the P2P flows started to dominate the traffic of the Internet. Token-Based Congestion Control (TBCC) is based on a closed-loop congestion control principle, which restricts token resources consumed by an end-user and provides the fair best effort service with O(1) complexity. As Self-Verifying CSFQ and Re-feedback, it experiences a heavy load by policing inter-domain traffic for lack of trust. In this paper, Stable Token-Limited Congestion Control (STLCC) is introduced as new protocols which appends inter-domain congestion control to TBCC and make the congestion control system to be stable. STLCC is able to shape output and input traffic at the inter-domain link with O(1) complexity. STLCC produces a congestion index, pushes the packet loss to the network edge and improves the network performance. Finally, the simple version of STLCC is introduced. This version is deployable in the Internet without any IP protocols modifications and preserves also the packet datagram. Modern IP network services provide for the simultaneous digital transmission of voice, video, and data. These services require congestion control protocols and algorithms which can solve the packet loss parameter can be kept under control. Congestion control is therefore, the cornerstone of packet switching networks [28]. It should prevent congestion collapse, provide fairness to competing flows and optimize transport performance indexes such as throughput, delay and loss. The literature abounds in papers on this subject; there are papers on high-level models [17][18][19] of the flow of packets through the network, and on specific network architecture [20][21][22][23][24][25][26] [27]. Despite this vast literature, congestion control in telecommunication networks struggles with two major problems that are not completely solved. The first one is the time-varying delay between the control point and the traffic sources. The second one is related to the possibility that the traffic sources do not follow the feedback signal. This latter may happen because some sources are silent as they have nothing to transmit. Congestion control of the best-effort service in the Internet was originally designed for a cooperative environment. It is still mainly dependent on the TCP congestion control algorithm at terminals, supplemented with load shedding [1] at congestion links. This model is called the Terminal Dependent Congestion Control case. Although routers equipped with Active Queue Management such as RED [2] can improve transport performance, they are neither able to prevent congestion collapse nor provide fairness to competing flows. In order to enhance fairness in high speed networks, Core-Stateless Fair Queuing (CSFQ) [3] set up an open-loop control system at the network layer, which inserts the label of the flow arrival rate onto the packet header at edge routers and drops the packet at core routers based on the rate label if congestion happens. CSFQ is the first to achieve approximate fair bandwidth allocation among flows with O(1) complexity at core routers. According to CacheLogic report, P2P traffic was 60% of all the Internet traffic in 2004, of which Bit-Torrent [4] was responsible for about 30% of the above, although the report generated quite a lot of discussions around the real numbers. In networks with P2P traffic, CSFQ can provide fairness to competing flows, but unfortunately it is not what end-users and operators really want. Token-Based Congestion Control (TBCC) [5] restricts the total token resource consumed by an end-user. So, no matter how many connections the end-user has set up, it cannot obtain extra bandwidth resources when TBCC is used. The Self-Verifying CSFQ [6] tries to expand CSFQ across the domain border. It randomly selects a flow, re-estimates the flow's rate, and checks whether the re-estimated rate is consistent with the label on the flow's packet. Consequently Self-Verifying CSFQ will put a heavy load on the border router and makes the weighted CSFQ null and void. In [7][8], the authors present a congestion control architecture Re-feedback, which aims to provide the fixed cost to end-users and bulk inter-domain congestion charging to network operators. Re-feedback not only demands very high level complexity to identify the malignant end-user, but also is difficult to provide the fixed congestion charging to the inter-domain interconnection with low complexity. There are three types of inter-domain interconnection polices, the Internet Exchange Points, the private peering and the transit. In the private peering polices, the Sender Keep All (SKA) peering arrangements are those in which traffic is exchanged between two domains without mutual charge. As Re-feedback is based on congestion charges to the peer domain, it is difficult for Re-feedback to support the requirements of SKA. In this paper a new and better mechanism for congestion control with application to Packet Loss in networks with P2P traffic is proposed. In this new method the edge and the core routers will write a measure of the quality of service guaranteed by the router by writing a digital number in the Option Field of the datagram of the packet. This is called a token. The token is read by the path routers and interpreted as its value will give a measure of the congestion especially at the edge routers. Based on the token number the edge router at the source's edge point will shape the traffic generated by the source, thus reducing the congestion on the path. In Token-Limited Congestion Control (TLCC) [9], the inter-domain router restricts the total output token rate to peer domains. When the output token rate exceeds the threshold, TLCC will decreases the Token-Level of output packets, and then the output token rate will decrease. Similarly to CSFQ and TBCC, TLCC uses also the iterative algorithm to estimate the congestion level of its output link, and requires a long period of time to reach a stable state. With bad parameter configuration, TLCC may cause the traffic to fall into an oscillated process. The window size of TCP flows will always increase when acknowledge packets are received, and the congestion level will increase at the congested link. At congestion times many flows will lose their packets. Then, the link will be idle and the congestion level will decrease. The two steps may be repeated alternately, and then the congestion control system will never reach stability. To solve the oscillation problem, the Stable Token-Limited Congestion Control (STLCC) is introduced. It integrates the algorithms of TLCC and XCP [10] altogether. In STLCC, the output rate of the sender is controlled according to the algorithm of XCP, so there is almost no packet lost at the congested link. At the same time, the edge router allocates all the access token resource to the incoming flows equally. When congestion happens, the incoming token rate increases at the core router, and then the congestion level of the congested link will also increase. Thus STLCC can measure the congestion level analytically, allocate network resources according to the access link, and further keep the congestion control system stable. This paper is organized as follows. In section II, the architecture of Token-Based Congestion Control (TBCC), which provides fair bandwidth allocation to end-users in the same domain will be introduced. Section III evaluates two congestion control algorithms CSFQ and TBCC. In section IV, STLCC is presented and the simulation is designed to demonstrate its validity. Section V presents the Unified Congestion Control Model which is the abstract model of CSFQ, Re-feedback and STLCC. In section VI, the simple version of STLCC is proposed, which can be deployed on the current Internet. Finally, conclusions will be given. To inter-connect two TBCC domains, the inter-domain router is added to the TBCC system as in Figure 8. To support the SKA arrangement, the inter-domain router should limit its output token rate to the rate of the other domains and police the incoming token rate from peer domains. To limit the output token rate, three elements tkprev, tkdown and tkbackdown are inserted into the extended header tkhead. At the source edge router, the tkprev is set to the same value as the tklevel and cannot be modified by routers. The sum of tkdown represents the decrements of Token-Level at all the inter-domain routers in the transmission path. When the packet arrives at the destination, the sum of tkpath and tkdown is the Congestion-Index of the transmission path. In the reverse packet, the tkbackdown is used to return the elements of tkdown in the forwarding packet header to the source edge router.", "paper_title": "Packet Loss Control Using Tokens at the Network Edge", "paper_id": "WOS:000300193600043"}