{"auto_keywords": [{"score": 0.05007712399672982, "phrase": "mapreduce_workloads"}, {"score": 0.046510070597947956, "phrase": "hadoop"}, {"score": 0.02435362236033463, "phrase": "real_setup"}, {"score": 0.004768762887977207, "phrase": "mapreduce"}, {"score": 0.004700027722284931, "phrase": "currently_popular_programming_model"}, {"score": 0.004632388761885302, "phrase": "parallel_computations"}, {"score": 0.004587835274176236, "phrase": "large_datasets"}, {"score": 0.004165105357908494, "phrase": "hadoop_job"}, {"score": 0.004085333687668526, "phrase": "reduce_tasks"}, {"score": 0.00393032656248792, "phrase": "input_problem"}, {"score": 0.0038737214010638745, "phrase": "precedence_constraints"}, {"score": 0.0038364365168131586, "phrase": "synchronization_delays"}, {"score": 0.0037267132967205136, "phrase": "pipeline_communication"}, {"score": 0.003399466007862412, "phrase": "analytical_models"}, {"score": 0.003146212656743413, "phrase": "intra-job_pipeline_parallelism"}, {"score": 0.0029400959763737364, "phrase": "hierarchical_model"}, {"score": 0.002883718207958817, "phrase": "precedence_graph_model"}, {"score": 0.0028421434495262796, "phrase": "queuing_network_model"}, {"score": 0.0027876387169652717, "phrase": "intra-job_synchronization_constraints"}, {"score": 0.0026687841359431105, "phrase": "precedence_graph"}, {"score": 0.002592369213499121, "phrase": "multiple_tasks"}, {"score": 0.002319127685733821, "phrase": "queuing_network_simulator"}, {"score": 0.0021049977753042253, "phrase": "average_job_response_time"}], "paper_keywords": ["Performance", " Hadoop", " Pipeline", " Queuing Network", " Task graph"], "paper_abstract": "MapReduce is a currently popular programming model to support parallel computations on large datasets. Among the several existing MapReduce implementations, Hadoop has attracted a lot of attention from both industry and research. In a Hadoop job, map and reduce tasks coordinate to produce a solution to the input problem, exhibiting precedence constraints and synchronization delays that are characteristic of a pipeline communication between maps (producers) and reduces (consumers). We here address the challenge of designing analytical models to estimate the performance of MapReduce workloads, notably Hadoop workloads, focusing particularly on the intra-job pipeline parallelism between map and reduce tasks belonging to the same job. We propose a hierarchical model that combines a precedence graph model and a queuing network model to capture the intra-job synchronization constraints. We first show how to build a precedence graph that represents the dependencies among multiple tasks of the same job. We then apply it jointly with an approximate Mean Value Analysis (aMVA) solution to predict mean job response time, throughput and resource utilization. We validate our solution against a queuing network simulator and a real setup in various scenarios, finding very close agreement in both cases. In particular, our model produces estimates of average job response time that deviate from measurements of a real setup by less than 15 %.", "paper_title": "Analytical Performance Models for MapReduce Workloads", "paper_id": "WOS:000317689500001"}