{"auto_keywords": [{"score": 0.028131630118475994, "phrase": "picky_semantics"}, {"score": 0.010263644388284964, "phrase": "wrong_module"}, {"score": 0.008167248006072086, "phrase": "lax_one"}, {"score": 0.00481495049065317, "phrase": "behavioral_software_contracts"}, {"score": 0.004774937143916685, "phrase": "interface_information"}, {"score": 0.004735254735115024, "phrase": "logical_assertions"}, {"score": 0.004676345706416371, "phrase": "rigorous_enforcement"}, {"score": 0.004598933498016774, "phrase": "useful_feedback"}, {"score": 0.004485200522202792, "phrase": "contract_violations"}, {"score": 0.004230595706156783, "phrase": "precise_explanations"}, {"score": 0.004195418010131832, "phrase": "correct_blame_assignment"}, {"score": 0.0040916230716372265, "phrase": "debugging_process"}, {"score": 0.0036248955128033084, "phrase": "blame_assignment"}, {"score": 0.0033204052817782438, "phrase": "proposed_semantics"}, {"score": 0.003292770855568091, "phrase": "higher-order_contracts"}, {"score": 0.0029909851863915283, "phrase": "lax_enforcement"}, {"score": 0.002966084234963723, "phrase": "dependent_higher-order_contracts"}, {"score": 0.0028805474861014722, "phrase": "higher-order_dependent_contract"}, {"score": 0.0027741761880779535, "phrase": "higher-order_functions"}, {"score": 0.002682917193736698, "phrase": "auxiliary_assertions"}, {"score": 0.002551612225562499, "phrase": "auxiliary_assertion"}, {"score": 0.002519800066326798, "phrase": "domain_contracts"}, {"score": 0.0022413233627905696, "phrase": "third_semantics"}], "paper_keywords": ["Languages", " Design", " Reliability", " Higher-order Programming", " Behavioral Contracts", " Blame Assignment"], "paper_abstract": "Behavioral software contracts supplement interface information with logical assertions. A rigorous enforcement of contracts provides useful feedback to developers if it signals contract violations as soon as they occur and if it assigns blame to violators with precise explanations. Correct blame assignment gets programmers started with the debugging process and can significantly decrease the time needed to discover and fix bugs. Sadly the literature on contracts lacks a framework for making statements about the correctness of blame assignment and for validating such statements. This paper fills the gap and uses the framework to demonstrate how one of the proposed semantics for higher-order contracts satisfies this criteria and another semantics occasionally assigns blame to the wrong module. Concretely, the paper applies the framework to the lax enforcement of dependent higher-order contracts and the picky one. A higher-order dependent contract specifies constraints for the domain and range of higher-order functions and also relates arguments and results in auxiliary assertions. The picky semantics ensures that the use of arguments in the auxiliary assertion satisfies the domain contracts and the lax one does not. While the picky semantics discovers more contract violations than the lax one, it occasionally blames the wrong module. Hence the paper also introduces a third semantics, dubbed indy, which fixes the problems of the picky semantics without giving up its advantages.", "paper_title": "Correct Blame for Contracts No More Scapegoating", "paper_id": "WOS:000286472700018"}