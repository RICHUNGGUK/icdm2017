{"auto_keywords": [{"score": 0.047715330048458, "phrase": "vm"}, {"score": 0.015588116864840585, "phrase": "speculative_communication"}, {"score": 0.006742957429885991, "phrase": "guest's_tcp_stack"}, {"score": 0.00481495049065317, "phrase": "highly_available_virtual_machines"}, {"score": 0.004444317282171449, "phrase": "seamless_failover"}, {"score": 0.004388450908826472, "phrase": "entire_soft-ware_stack"}, {"score": 0.004207230913063179, "phrase": "underlying_operating_system"}, {"score": 0.004067635935640407, "phrase": "commodity_hardware"}, {"score": 0.0038996120252338556, "phrase": "shared_memory"}, {"score": 0.003850566273995209, "phrase": "symmetric_multiprocessing"}, {"score": 0.0038182226992078115, "phrase": "smp"}, {"score": 0.0035091888798162176, "phrase": "consistency_requirements"}, {"score": 0.003479692058963528, "phrase": "network_performance"}, {"score": 0.0034359094594153304, "phrase": "basic_replication_mechanism"}, {"score": 0.0032800186243040663, "phrase": "replication_protocol"}, {"score": 0.003144426503333397, "phrase": "tcp_packets"}, {"score": 0.0028775998963807324, "phrase": "corresponding_execution_state"}, {"score": 0.0028174721236762317, "phrase": "backup_host"}, {"score": 0.0027469703311742647, "phrase": "replication_aware_congestion_control"}, {"score": 0.0026112013707473938, "phrase": "vmm's_replication_buffer"}, {"score": 0.00257831812581194, "phrase": "speculative_packets"}, {"score": 0.002389514188569084, "phrase": "magnitude_improvement"}, {"score": 0.0023694065215394593, "phrase": "bulk_data_transfer"}, {"score": 0.0022522565004588113, "phrase": "replication_awareness"}, {"score": 0.0021049977753042253, "phrase": "application-level_benchmarks"}], "paper_keywords": ["Design", " Reliability", " Performance", " Virtualization", " Hypervisor", " Checkpoint", " Recovery", " Fault Tolerance"], "paper_abstract": "Checkpoint-recovery based virtual machine (VM) replication is an attractive technique for accommodating VM installations with high-availability. It provides seamless failover for the entire soft-ware stack executed in the VM regardless the application or the underlying operating system (OS), it runs on commodity hardware, and it is inherently capable of dealing with shared memory non-determinism of symmetric multiprocessing (SMP) configurations. There have been several studies aiming at alleviating the overhead of replication, however, due to consistency requirements, network performance of the basic replication mechanism remains extremely poor. In this paper we revisit the replication protocol and extend it with speculative communication. Speculative communication silently acknowledges TCP packets of the VM, enabling the guest's TCP stack to progress with transmission without exposing the messages to the clients before the corresponding execution state is checkpointed to the backup host. Furthermore, we propose replication aware congestion control, an extension to the guest's TCP stack that aggressively fills up the VMM's replication buffer so that speculative packets can be backed up and released earlier to the clients. We observe up to an order of magnitude improvement in bulk data transfer with speculative communication, and close to native VM network performance when replication awareness is enabled in the guest OS. We provide results of micro-, as well as application-level benchmarks.", "paper_title": "Enhancing TCP Throughput of Highly Available Virtual Machines via Speculative Communication", "paper_id": "WOS:000308657200009"}