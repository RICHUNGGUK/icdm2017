{"auto_keywords": [{"score": 0.034158922014344305, "phrase": "application_software"}, {"score": 0.008699279307710757, "phrase": "timing_requirements"}, {"score": 0.00481495049065317, "phrase": "embedded_software_systems"}, {"score": 0.0033242742850902295, "phrase": "formal_approach"}, {"score": 0.003191714656606822, "phrase": "rtos_behavior_models"}, {"score": 0.0029289191071848403, "phrase": "system_model"}, {"score": 0.0027867539356701302, "phrase": "consistent_way"}, {"score": 0.002675571068567923, "phrase": "functional_requirements"}, {"score": 0.002522738549524317, "phrase": "case_study"}, {"score": 0.002466303807070445, "phrase": "arinc"}, {"score": 0.002252880693912436, "phrase": "behavioral_model"}, {"score": 0.0022124605840026313, "phrase": "specific_platform"}, {"score": 0.0021337783230121286, "phrase": "timing_constraints"}, {"score": 0.0021049977753042253, "phrase": "formal_way"}], "paper_keywords": ["Embedded software systems", " Real-time operating systems", " Model-driven development", " Statecharts", " TRoS", " Formal methods and engineering"], "paper_abstract": "Two main embedded software components, application software and platform software, i.e., the real-time operating system (RTOS), interact with each other in order to achieve the functionality of the system. However, they are so different in behaviors that one behavior modeling language is not sufficient to model both styles of behaviors and to reason about the characteristics of their individual behaviors as well as their parallel behavior and interaction properties. In this paper, we present a formal approach to the synthesis of the application software and the RTOS behavior models. In this approach, each of them is modeled with its adequate modeling language and then is composed into a system model for analysis. Moreover, this paper also presents a consistent way of analyzing the application software with respect to both functional requirements and timing requirements. To show the effectiveness of the approach, a case study is conducted, where ARINC 653 and its application are modeled and verified against timing requirements. Using our approach, application software can be constructed as a behavioral model independently from a specific platform and can be verified against various platforms and timing constraints in a formal way.", "paper_title": "Formal synthesis of application and platform behaviors of embedded software systems", "paper_id": "WOS:000354094400020"}