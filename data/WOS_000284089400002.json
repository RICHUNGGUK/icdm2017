{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code_injection_attacks"}, {"score": 0.004422325007817267, "phrase": "modern_architectural_solutions"}, {"score": 0.0043161190928529755, "phrase": "execute-disable_bit"}, {"score": 0.003939980614608309, "phrase": "program_layout_restrictions"}, {"score": 0.0037301606780397456, "phrase": "determined_attacker"}, {"score": 0.0035530197642369464, "phrase": "memory_architecture"}, {"score": 0.0035100601949451028, "phrase": "modern_processors"}, {"score": 0.00342568771304873, "phrase": "code_injection_problem"}, {"score": 0.0032629585038738856, "phrase": "code_memory"}, {"score": 0.003223494720348768, "phrase": "data_memory"}, {"score": 0.0030147970456037274, "phrase": "injected_code"}, {"score": 0.0029244418026475832, "phrase": "virtual_split_memory_system"}, {"score": 0.0028195727965553367, "phrase": "software-only_patch"}, {"score": 0.0027685531038981847, "phrase": "operating_system"}, {"score": 0.0026530590435527527, "phrase": "existing_schemes"}, {"score": 0.0026209522797963447, "phrase": "improved_protection"}, {"score": 0.002436289099444074, "phrase": "response_modes"}, {"score": 0.002392188222609101, "phrase": "code_injection_attack"}, {"score": 0.0022923586577645143, "phrase": "real-world_attacks"}, {"score": 0.0021700901058417602, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "reasonable_overhead"}], "paper_keywords": ["Code injection", " secure memory architecture"], "paper_abstract": "Code injection attacks, despite being well researched, continue to be a problem today. Modern architectural solutions such as the execute-disable bit and PaX have been useful in limiting the attacks; however, they enforce program layout restrictions and can oftentimes still be circumvented by a determined attacker. We propose a change to the memory architecture of modern processors that addresses the code injection problem at its very root by virtually splitting memory into code memory and data memory such that a processor will never be able to fetch injected code for execution. This virtual split memory system can be implemented as a software-only patch to an operating system and can be used to supplement existing schemes for improved protection. Furthermore, our system is able to accommodate a number of response modes when a code injection attack occurs. Our experiments with both benchmarks and real-world attacks show the system is effective in preventing a wide range of code injection attacks while incurring reasonable overhead.", "paper_title": "An Architectural Approach to Preventing Code Injection Attacks", "paper_id": "WOS:000284089400002"}