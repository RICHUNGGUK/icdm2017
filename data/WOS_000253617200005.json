{"auto_keywords": [{"score": 0.04852232688729349, "phrase": "formal_proof"}, {"score": 0.00481495049065317, "phrase": "module_checking"}, {"score": 0.004566954456805558, "phrase": "perlman_spanning_tree_protocol"}, {"score": 0.004360650460091426, "phrase": "ieee"}, {"score": 0.004163483341011529, "phrase": "mac"}, {"score": 0.0035519826240477444, "phrase": "radia_perlman"}, {"score": 0.0032376465741070274, "phrase": "stp_algorithm"}, {"score": 0.0031115683920520773, "phrase": "single_node"}, {"score": 0.0027619548979328154, "phrase": "formal_inductive_reasoning"}, {"score": 0.00240328454980006, "phrase": "surrounding_bridges"}, {"score": 0.0023249757987087055, "phrase": "rebeca_modular_verification_techniques"}, {"score": 0.0021330830123432614, "phrase": "model_checking"}, {"score": 0.0021049977753042253, "phrase": "open_systems"}], "paper_keywords": ["formal methods", " network protocols", " formal verification", " Rebeca", " modular verification"], "paper_abstract": "In the IEEE 802.1D standard for the Media Access Control layer (MAC layer) bridges, there is an STP (Spanning Tree Protocol) definition, based on the algorithm that was proposed by Radia Perlman. In this paper, we give a formal proof for correctness of the STP algorithm by showing that finally a single node is selected as the root of the tree and the loops are eliminated correctly. We use formal inductive reasoning to establish these requirements. In order to ensure that the bridges behave correctly regardless of the topology of the surrounding bridges and LANs, the Rebeca modular verification techniques are applied. These techniques are shown to be efficiently applicable in model checking of open systems.", "paper_title": "Integrating module checking and deduction in a formal proof for the perlman Spanning Tree Protocol (STP)", "paper_id": "WOS:000253617200005"}