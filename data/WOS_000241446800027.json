{"auto_keywords": [{"score": 0.038147415225674906, "phrase": "swclos"}, {"score": 0.00481495049065317, "phrase": "object_oriented_perspective"}, {"score": 0.004312622975366672, "phrase": "object-oriented_modeling"}, {"score": 0.0038624981944755813, "phrase": "static_oop_languages"}, {"score": 0.003802239865662734, "phrase": "java"}, {"score": 0.00348655247465418, "phrase": "owl_processor"}, {"score": 0.0033255627814855163, "phrase": "common_lisp_object_system"}, {"score": 0.0029547698888028697, "phrase": "application_domain_models"}, {"score": 0.0029085696787854933, "phrase": "owl"}, {"score": 0.0028405761722753464, "phrase": "oop"}, {"score": 0.0025841336988141235, "phrase": "semantic_gap"}, {"score": 0.0025436978068459565, "phrase": "owl_and_oop_languages"}, {"score": 0.002464712767636264, "phrase": "rdfs"}, {"score": 0.002426137929553722, "phrase": "owl_realization"}, {"score": 0.002242127152093798, "phrase": "oop_perspectives"}, {"score": 0.0021384748235753425, "phrase": "owl-full_level_performance"}, {"score": 0.0021049977753042253, "phrase": "swclos."}], "paper_keywords": [""], "paper_abstract": "Bridging the gap between OWL and Object-Oriented Programming (OOP) languages is an indispensable condition to enable the Object-Oriented Modeling in Software Engineering by OWL. However it is very difficult in case of static OOP languages like Java and C#. We have developed SWCLOS, which is an OWL processor seamlessly built on top of Common Lisp Object System (CLOS), a dynamic OOP language. SWCLOS allows programmers to develop application domain models by OWL and enables OOP upon the models. In this paper, we explain the semantic gap between OWL and OOP languages, introduce the RDFS and OWL realization at SWCLOS, and discuss the OWL features from OOP perspectives. Finally we demonstrate the OWL-Full level performance in SWCLOS.", "paper_title": "OWL - Full reasoning from an object oriented perspective", "paper_id": "WOS:000241446800027"}