{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "memory_footprint"}, {"score": 0.04926219622874721, "phrase": "linux_kernel"}, {"score": 0.02363669222305869, "phrase": "arm_platform"}, {"score": 0.004652016085325825, "phrase": "limited_built-in_configurability"}, {"score": 0.0045990373391266125, "phrase": "linux"}, {"score": 0.004494570360108983, "phrase": "expensive_code_size"}, {"score": 0.0042928648367867835, "phrase": "embedded_market"}, {"score": 0.004007083686875716, "phrase": "link-time_compaction"}, {"score": 0.003697538418750941, "phrase": "experimental_setups"}, {"score": 0.0034118234596993836, "phrase": "kernel_memory_footprint"}, {"score": 0.0032398798149196432, "phrase": "existing_binary_rewriters"}, {"score": 0.003166259444961177, "phrase": "proposed_techniques"}, {"score": 0.002758273619951683, "phrase": "seemingly_unnecessary_code"}, {"score": 0.0025158514649823724, "phrase": "code-compression_techniques"}, {"score": 0.002402731767209114, "phrase": "previous_ones"}, {"score": 0.002129356014992349, "phrase": "important_code_size_growth_problem"}, {"score": 0.0021049977753042253, "phrase": "compaction_and_compression_techniques"}], "paper_keywords": ["experimentation", " performance", " Linux kernel", " operating system", " compaction", " specialization", " system calls", " compression"], "paper_abstract": "The limited built-in configurability of Linux can lead to expensive code size overhead when it is used in the embedded market. To overcome this problem, we propose the application of link-time compaction and specialization techniques that exploit the a priori known, fixed runtime environment of many embedded systems. In experimental setups based on the ARM XScale and i386 platforms, the proposed techniques are able to reduce the kernel memory footprint with over 16%. We also show how relatively simple additions to existing binary rewriters can implement the proposed techniques for a complex, very unconventional program, such as the Linux kernel. We note that even after specialization, a lot of seemingly unnecessary code remains in the kernel and propose to reduce the footprint of this code by applying code-compression techniques. This technique, combined with the previous ones, reduces the memory footprint with over 23% for the i386 platform and 28% for the ARM platform. Finally, we pinpoint an important code size growth problem when compaction and compression techniques are combined on the ARM platform.", "paper_title": "Automated reduction of the memory footprint of the Linux kernel", "paper_id": "WOS:000256880600003"}