{"auto_keywords": [{"score": 0.03610310423475189, "phrase": "muvi"}, {"score": 0.02322730111336097, "phrase": "concurrency_bugs"}, {"score": 0.02272901618781969, "phrase": "synchronization_intentions"}, {"score": 0.016759874845448147, "phrase": "avio"}, {"score": 0.009099124231472567, "phrase": "root_causes"}, {"score": 0.0044272138900038095, "phrase": "software_bugs"}, {"score": 0.004235793609579307, "phrase": "programmers'_synchronization_intentions"}, {"score": 0.0039815737219022675, "phrase": "synchronization_assumptions"}, {"score": 0.003911771812701971, "phrase": "real_world"}, {"score": 0.0036445446531633368, "phrase": "understudied-single-variable_atomicity_intention"}, {"score": 0.0032342101452939977, "phrase": "related_bugs"}, {"score": 0.003121719509312159, "phrase": "interleaving_invariants"}, {"score": 0.003013129637451091, "phrase": "production_runs"}, {"score": 0.00289546142998427, "phrase": "special_hardware_support"}, {"score": 0.002807118943000936, "phrase": "multivariable_correlations"}, {"score": 0.00278237555651743, "phrase": "static_analysis"}, {"score": 0.0027456676902333304, "phrase": "multivariable_concurrency_bugs"}, {"score": 0.002697474061842142, "phrase": "real-world_large_multithreaded_applications"}, {"score": 0.0025578967205807843, "phrase": "previous_solutions"}, {"score": 0.002512990657100351, "phrase": "avio-h"}, {"score": 0.0024148246966817703, "phrase": "linux"}, {"score": 0.0023935141452781396, "phrase": "mozilla"}, {"score": 0.00237240969401683, "phrase": "mysql"}, {"score": 0.002279702500235741, "phrase": "race_detectors"}, {"score": 0.0021809311689473493, "phrase": "real-world_multivariable_concurrency_bugs"}], "paper_keywords": ["Concurrency bugs", " atomicity violation", " bug detection"], "paper_abstract": "Concurrency bugs are among the most difficult to detect and diagnose of all software bugs. This paper combats concurrency bugs from the perspective of programmers' synchronization intentions. We first study the root causes of 74 real-world concurrency bugs to understand what types of synchronization assumptions are violated in real world. This study reveals two classes of synchronization intentions that are common, frequently violated, and understudied-single-variable atomicity intention and multivariable correlation intention. Following this study, two bug detection tools, AVIO and MUVI, are proposed to automatically infer these two types of synchronization intentions and detect related bugs. Specifically, AVIO automatically extracts access interleaving invariants and detects a variety of atomicity-violations during production runs. It can work both with and without special hardware support in our implementation. MUVI automatically infers multivariable correlations through static analysis and detects multivariable concurrency bugs. Our evaluation with real-world large multithreaded applications shows that AVIO can detect more atomicity-violation bugs with 15 times fewer false positives on average than previous solutions. Besides, AVIO-H incurs negligible (0.4-0.5 percent) overhead. MUVI successfully extracts 6,449 access correlations from Linux, Mozilla, MySQL, and PostgreSQL with high (83 percent) accuracy. Race detectors extended by MUVI can correctly identify the root causes of real-world multivariable concurrency bugs in our experiments. They also report four new multivariable concurrency bugs that have never been reported before.", "paper_title": "Detecting Concurrency Bugs from the Perspectives of Synchronization Intentions", "paper_id": "WOS:000303207700009"}