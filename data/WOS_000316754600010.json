{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed_file_systems"}, {"score": 0.004710944813540894, "phrase": "key_building_blocks"}, {"score": 0.00467677555573346, "phrase": "cloud_computing_applications"}, {"score": 0.004609175313390942, "phrase": "mapreduce_programming_paradigm"}, {"score": 0.004476878957065829, "phrase": "computing_and_storage_functions"}, {"score": 0.004269913167716059, "phrase": "distinct_nodes"}, {"score": 0.004223521213460728, "phrase": "mapreduce_tasks"}, {"score": 0.0040135756033094225, "phrase": "cloud_computing_environment"}, {"score": 0.0035202324978577263, "phrase": "load_imbalance"}, {"score": 0.003481957226813911, "phrase": "distributed_file_system"}, {"score": 0.0034066464009965425, "phrase": "file_chunks"}, {"score": 0.0032253960472377356, "phrase": "production_systems"}, {"score": 0.0031671412657333364, "phrase": "central_node"}, {"score": 0.003144134096095217, "phrase": "chunk_reallocation"}, {"score": 0.0029444248503861167, "phrase": "considerable_workload"}, {"score": 0.0028702214190712036, "phrase": "system_size"}, {"score": 0.0027978827655799495, "phrase": "performance_bottleneck"}, {"score": 0.0027674397462322435, "phrase": "single_point"}, {"score": 0.002678078466226442, "phrase": "fully_distributed_load_rebalancing_algorithm"}, {"score": 0.0026105697442146357, "phrase": "load_imbalance_problem"}, {"score": 0.0025447584328314754, "phrase": "centralized_approach"}, {"score": 0.0025170626402362633, "phrase": "production_system"}, {"score": 0.002489667521500195, "phrase": "competing_distributed_solution"}, {"score": 0.0024268966855267153, "phrase": "simulation_results"}, {"score": 0.0023570895666021664, "phrase": "existing_centralized_approach"}, {"score": 0.002314481096847367, "phrase": "prior_distributed_algorithm"}, {"score": 0.002280948283235427, "phrase": "load_imbalance_factor"}, {"score": 0.0021515951441422082, "phrase": "hadoop_distributed_file_system"}, {"score": 0.0021049977753042253, "phrase": "cluster_environment"}], "paper_keywords": ["Load balance", " distributed file systems", " clouds"], "paper_abstract": "Distributed file systems are key building blocks for cloud computing applications based on the MapReduce programming paradigm. In such file systems, nodes simultaneously serve computing and storage functions; a file is partitioned into a number of chunks allocated in distinct nodes so that MapReduce tasks can be performed in parallel over the nodes. However, in a cloud computing environment, failure is the norm, and nodes may be upgraded, replaced, and added in the system. Files can also be dynamically created, deleted, and appended. This results in load imbalance in a distributed file system; that is, the file chunks are not distributed as uniformly as possible among the nodes. Emerging distributed file systems in production systems strongly depend on a central node for chunk reallocation. This dependence is clearly inadequate in a large-scale, failure-prone environment because the central load balancer is put under considerable workload that is linearly scaled with the system size, and may thus become the performance bottleneck and the single point of failure. In this paper, a fully distributed load rebalancing algorithm is presented to cope with the load imbalance problem. Our algorithm is compared against a centralized approach in a production system and a competing distributed solution presented in the literature. The simulation results indicate that our proposal is comparable with the existing centralized approach and considerably outperforms the prior distributed algorithm in terms of load imbalance factor, movement cost, and algorithmic overhead. The performance of our proposal implemented in the Hadoop distributed file system is further investigated in a cluster environment.", "paper_title": "Load Rebalancing for Distributed File Systems in Clouds", "paper_id": "WOS:000316754600010"}