{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_component_models"}, {"score": 0.049273293170208544, "phrase": "master-worker_paradigm"}, {"score": 0.02728076180433901, "phrase": "generic_approach"}, {"score": 0.004550029253278477, "phrase": "networking_technologies"}, {"score": 0.00447341965028879, "phrase": "multi-core_processors"}, {"score": 0.004373267443572639, "phrase": "wide_area_networks"}, {"score": 0.004324031677173549, "phrase": "parallel_infrastructures"}, {"score": 0.004227209809791869, "phrase": "higher_degree"}, {"score": 0.0037320255482878365, "phrase": "e-science_applications"}, {"score": 0.003627800727103479, "phrase": "parallel_processing"}, {"score": 0.003332210257373994, "phrase": "low-level_solutions"}, {"score": 0.0031308163228919773, "phrase": "modern_programming_practices"}, {"score": 0.00302612773666719, "phrase": "software_components"}, {"score": 0.0028756028995504035, "phrase": "well-known_master-worker_paradigm"}, {"score": 0.0027480831196871093, "phrase": "simple_and_resource_transparent_model"}, {"score": 0.0026864540069792275, "phrase": "efficient_utilization"}, {"score": 0.0023313149689465386, "phrase": "existing_software_component_model"}, {"score": 0.0022919762167777427, "phrase": "overall_approach"}, {"score": 0.0022405528759521856, "phrase": "synthetic_experiments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software component", " Master-worker", " Grids", " Clusters", " CCM"], "paper_abstract": "Recent advances in computing and networking technologies such as multi-core processors and high bandwidth wide area networks lead parallel infrastructures to reach a higher degree of complexity. Programmers have to face with both parallel and distributed programming paradigms when designing an application. This is especially true when dealing with e-Science applications. Moreover, as parallel processing is moving to the mainstream, it does not seem appropriate to rely on low-level solutions requiring expert knowledge. This paper studies how to combine modern programming practices such as those based on software components and one of the most important parallel programming paradigms which is the well-known master-worker paradigm. The goal is to provide a simple and resource transparent model while enabling an efficient utilization of resources. The paper proposes a generic approach to embed the master-worker paradigm into software component models and describes how this generic approach can be implemented within an existing software component model. The overall approach is validated with synthetic experiments on clusters and the Grid'5000 testbed. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Extending software component models with the master-worker paradigm", "paper_id": "WOS:000276548500002"}