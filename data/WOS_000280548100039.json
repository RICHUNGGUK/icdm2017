{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpgpu_programs"}, {"score": 0.04957786067961377, "phrase": "input-data_sharing"}, {"score": 0.047862640203653294, "phrase": "application_developers"}, {"score": 0.00468991337957911, "phrase": "high_performance_gpgpu_programs"}, {"score": 0.004288472456976113, "phrase": "hardware_features"}, {"score": 0.004243552607799184, "phrase": "specific_graphics_processors"}, {"score": 0.004025885154716127, "phrase": "low-level_hardware-specific_optimizations"}, {"score": 0.0037397086147485897, "phrase": "naive_gpu_kernel_function"}, {"score": 0.003330406613112555, "phrase": "memory_access_patterns"}, {"score": 0.0032609360162842767, "phrase": "optimized_code"}, {"score": 0.0030935140058168885, "phrase": "scientific_and_media_processing_algorithms"}, {"score": 0.0028432828877281388, "phrase": "matrix_multiplication"}, {"score": 0.002640947693258573, "phrase": "novel_approaches"}, {"score": 0.002518525107994039, "phrase": "effective_data_reuse"}, {"score": 0.0024529757621396717, "phrase": "hardware-specific_tuning"}, {"score": 0.002339246282204109, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "highly_fine-tuned_library"}], "paper_keywords": ["Performance", " Experimentation", " Languages", " GPGPU", " Compiler"], "paper_abstract": "Developing high performance GPGPU programs is challenging for application developers since the performance is dependent upon how well the code leverages the hardware features of specific graphics processors. To solve this problem and relieve application developers of low-level hardware-specific optimizations, we introduce a novel compiler to optimize GPGPU programs. Our compiler takes a naive GPU kernel function, which is functionally correct but without any consideration for performance optimization. The compiler then analyzes the code, identifies memory access patterns, and generates optimized code. The proposed compiler optimizations target at one category of scientific and media processing algorithms, which has the characteristics of input-data sharing when computing neighboring output pixels/elements. Many commonly used algorithms, such as matrix multiplication, convolution, etc., share such characteristics. For these algorithms, novel approaches are proposed to enforce memory coalescing and achieve effective data reuse. Data prefetching and hardware-specific tuning are also performed automatically with our compiler framework. The experimental results based on a set of applications show that our compiler achieves very high performance, either superior or very close to the highly fine-tuned library, NVIDIA CUBLAS 2.1.", "paper_title": "An Optimizing Compiler for GPGPU Programs with Input-Data Sharing", "paper_id": "WOS:000280548100039"}