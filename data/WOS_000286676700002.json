{"auto_keywords": [{"score": 0.04920822493417556, "phrase": "bristlecone"}, {"score": 0.00481495049065317, "phrase": "robust_software_applications"}, {"score": 0.004598933498016774, "phrase": "robust_software_systems"}, {"score": 0.004556901872357751, "phrase": "bristlecone_applications"}, {"score": 0.004273196830970426, "phrase": "application's_conceptual_operations"}, {"score": 0.0039341294012600085, "phrase": "individual_conceptual_operation"}, {"score": 0.0038447943243941685, "phrase": "high-level_organization_specification"}, {"score": 0.0037747835341722636, "phrase": "software_system"}, {"score": 0.0036721416244816455, "phrase": "consistent_state"}, {"score": 0.0035233696341819437, "phrase": "software_system's_execution"}, {"score": 0.00290473242917264, "phrase": "java_version"}, {"score": 0.00286493504971388, "phrase": "benchmark_application"}, {"score": 0.0026011706232569316, "phrase": "bristlecone_versions"}, {"score": 0.0025655216052760093, "phrase": "benchmark_applications"}, {"score": 0.0025071862539276283, "phrase": "injected_failures"}, {"score": 0.002472822097373027, "phrase": "bristlecone_compiler"}, {"score": 0.0024389277933858054, "phrase": "static_analysis"}, {"score": 0.0023834640793589435, "phrase": "organization_specification"}, {"score": 0.00226583335721762, "phrase": "task_interactions"}, {"score": 0.002124461969404541, "phrase": "high-level_structure"}], "paper_keywords": ["Software robustness"], "paper_abstract": "We present Bristlecone, a programming language for robust software systems. Bristlecone applications have two components: a high-level organization specification that describes how the application's conceptual operations interact and a low-level operational specification that describes the sequence of instructions that comprise an individual conceptual operation. Bristlecone uses the high-level organization specification to recover the software system from an error to a consistent state and to reason how to safely continue the software system's execution after the error. We have implemented a compiler and runtime for Bristlecone. We have evaluated this implementation on three benchmark applications: a Web crawler, a Web server, and a multiroom chat server. We developed both a Bristlecone version and a Java version of each benchmark application. We used injected failures to evaluate the robustness of each version of the application. We found that the Bristlecone versions of the benchmark applications more successfully survived the injected failures. The Bristlecone compiler contains a static analysis that operates on the organization specification to generate a set of diagrams that graphically present the task interactions in the application. We have used the analysis to help understand the high-level structure of three Bristlecone applications: a game server, a Web server, and a chat server.", "paper_title": "Bristlecone: Language Support for Robust Software Applications", "paper_id": "WOS:000286676700002"}