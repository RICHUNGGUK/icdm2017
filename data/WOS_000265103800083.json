{"auto_keywords": [{"score": 0.03971569370720237, "phrase": "decentralized_scheduling"}, {"score": 0.009283389212588583, "phrase": "mandatory_constraints"}, {"score": 0.007878747427685831, "phrase": "centralized_scheduling"}, {"score": 0.006363497347993463, "phrase": "global_waiting_queue"}, {"score": 0.00481495049065317, "phrase": "resource_allocation"}, {"score": 0.004788592035020304, "phrase": "computational_grid"}, {"score": 0.004762872854287721, "phrase": "grid"}, {"score": 0.004736305159231989, "phrase": "resource_sharing"}, {"score": 0.0047103751935235975, "phrase": "dynamic_allocation"}, {"score": 0.00468458651904683, "phrase": "computational_resources"}, {"score": 0.004620727987405077, "phrase": "great_challenge"}, {"score": 0.004582829542018412, "phrase": "numerous_resources"}, {"score": 0.004337960860900044, "phrase": "two-stage_optimization_model"}, {"score": 0.004255371088912042, "phrase": "job_constraints"}, {"score": 0.0041287394089001405, "phrase": "first_stage"}, {"score": 0.004050116768809519, "phrase": "resource_discovery_deals"}, {"score": 0.0038973170902076707, "phrase": "second_stage"}, {"score": 0.003875962465099124, "phrase": "negotiated_constraints"}, {"score": 0.0038336022513584173, "phrase": "knapsack_problem-based_optimization_problem"}, {"score": 0.003608732492631878, "phrase": "grid_resource_management"}, {"score": 0.003549718733070464, "phrase": "multi-constraint_multiple_knapsack_problem"}, {"score": 0.0034251339122991094, "phrase": "global_job_queue"}, {"score": 0.0033970080655122965, "phrase": "global_scheduler"}, {"score": 0.00334144503360907, "phrase": "proper_grid_site"}, {"score": 0.0033049071545971412, "phrase": "scheduling_strategy"}, {"score": 0.003145352865188648, "phrase": "multi-dimensional_knapsack_problem"}, {"score": 0.003043272957851679, "phrase": "local_job_queues"}, {"score": 0.0030265836903931604, "phrase": "allocation_decisions"}, {"score": 0.0029934784017784204, "phrase": "local_schedulers"}, {"score": 0.002968938406810311, "phrase": "jobs"}, {"score": 0.002856761712725157, "phrase": "local_scheduling"}, {"score": 0.002817748867229525, "phrase": "local_scheduler"}, {"score": 0.0026450225118952713, "phrase": "grid_economy_approach"}, {"score": 0.0026232857693533535, "phrase": "defined_utility"}, {"score": 0.0025874530719850156, "phrase": "user-concerned_metrics"}, {"score": 0.002573257062541549, "phrase": "system-concerned_metrics"}, {"score": 0.0025103303020759956, "phrase": "r._k._ahuja"}, {"score": 0.002496556366049961, "phrase": "c._b._cunha"}, {"score": 0.002428809329644027, "phrase": "combinatorial_optimization_problem"}, {"score": 0.0023759346019385638, "phrase": "constellation_model"}, {"score": 0.00236289633510808, "phrase": "genetic_algorithms"}, {"score": 0.0023499294490179788, "phrase": "constrained_optimization"}, {"score": 0.0023178219772486868, "phrase": "s._venkatraman"}, {"score": 0.0023051018745625053, "phrase": "g._g._yen"}, {"score": 0.0022302306304023602, "phrase": "experimental_results"}, {"score": 0.0022058167149652565, "phrase": "performance_metrics"}, {"score": 0.0021876814398268775, "phrase": "gained_utility"}, {"score": 0.002175673985064338, "phrase": "response_rate"}, {"score": 0.0021577859945449704, "phrase": "resource_utilization"}, {"score": 0.0021049977753042253, "phrase": "optimal_way"}], "paper_keywords": [""], "paper_abstract": "Grid enables resource sharing and dynamic allocation of computational resources. It is a great challenge to make numerous resources available on-demand to guarantee the Quality-of-Service for jobs. This paper presents a two-stage optimization model for resource allocation in grid. Job constraints are classified into mandatory constraints and negotiated constraints. In the first stage, a preprocessing procedure such as resource discovery deals with the mandatory constraints. This has been fulfilled as our previous work. In the second stage, negotiated constraints are treated as Knapsack Problem-based optimization problem. Centralized scheduling and decentralized scheduling have been considered in this paper. This work is fulfilled as part of the Constellation Model for grid resource management. We formulate centralized scheduling as Multi-Constraint Multiple Knapsack Problem (MCMKP). In centralized scheduling, jobs are submitted to a global job queue. A global scheduler assigns each job to a proper grid site according to the scheduling strategy. The scheduling is done periodically (e.g. daily or weekly). We formulate decentralized scheduling as Multi-Dimensional Knapsack Problem (MDKP). In decentralized scheduling, jobs are submitted to local job queues. Allocation decisions are made by local schedulers individually. Jobs that can not be executed immediately are sent to a global waiting queue. When local scheduling is initialized, a local scheduler can select jobs from both the local job queue and the global waiting queue. Objectives of both centralized scheduling and decentralized scheduling are to optimize the utility defined by a grid economy approach. The defined utility makes the trade-offs between user-concerned metrics and system-concerned metrics. Heuristic algorithms such as Very Large-Scale Neighborhood Search proposed by R. K. Ahuja and C. B. Cunha [2005] can be used to solve the combinatorial optimization problem. We implemented a prototype of the Constellation Model. Genetic algorithms for constrained optimization which is proposed by S. Venkatraman and G. G. Yen [2005] have been implemented to solve the above optimization problems. Experimental results show that, performance metrics such as gained utility, response rate, and resource utilization are improved and resources are allocated in an optimal way.", "paper_title": "Effective Reformulation for Resource Allocation in Computational Grid", "paper_id": "WOS:000265103800083"}