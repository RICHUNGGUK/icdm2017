{"auto_keywords": [{"score": 0.04505688027056708, "phrase": "wide_variety"}, {"score": 0.015719716506582538, "phrase": "graphics_engines"}, {"score": 0.009692585832202196, "phrase": "sponge"}, {"score": 0.0047784273577245505, "phrase": "graphics_processing_units"}, {"score": 0.004670504053818028, "phrase": "low_cost_platform"}, {"score": 0.004617455679463816, "phrase": "high_performance_computations"}, {"score": 0.004530371221172796, "phrase": "new_programming_languages"}, {"score": 0.0044619241321625785, "phrase": "cuda"}, {"score": 0.004428041916828994, "phrase": "opencl"}, {"score": 0.004377719094086111, "phrase": "gpu_programming"}, {"score": 0.00421410521089045, "phrase": "programming_gpus"}, {"score": 0.004150377643719188, "phrase": "cumbersome_task"}, {"score": 0.0038605361756636667, "phrase": "specific_gpu"}, {"score": 0.0038166522763373434, "phrase": "time-consuming_task"}, {"score": 0.0037589124802364384, "phrase": "thorough_understanding"}, {"score": 0.003687960013746783, "phrase": "underlying_hardware"}, {"score": 0.003659954070354848, "phrase": "unoptimized_cuda_programs"}, {"score": 0.0035908627899097407, "phrase": "small_fraction"}, {"score": 0.0035500334260484376, "phrase": "peak_gpu_performance"}, {"score": 0.0034963129868796033, "phrase": "gpu_code"}, {"score": 0.0034697573205392887, "phrase": "efficient_portability"}, {"score": 0.0031784407245606704, "phrase": "desired_performance"}, {"score": 0.0031422859551159506, "phrase": "non-trivial_task"}, {"score": 0.003106541164572609, "phrase": "significant_modifications"}, {"score": 0.003047865053078826, "phrase": "hardware_differences"}, {"score": 0.002867425368894356, "phrase": "synchronous_data"}, {"score": 0.0026976391682197133, "phrase": "efficient_code"}, {"score": 0.002596653214530156, "phrase": "current_gpu_programming_methods"}, {"score": 0.002547583216040341, "phrase": "different_generations"}, {"score": 0.0024335561337016174, "phrase": "hardware_details"}, {"score": 0.002387560868354908, "phrase": "memory_hierarchy"}, {"score": 0.0022894012453842064, "phrase": "write-once_software_paradigm"}, {"score": 0.0022120914337992034, "phrase": "optimized_cuda_code"}, {"score": 0.0021702728407945976, "phrase": "gpu_targets"}, {"score": 0.0021537671245615286, "phrase": "sponge's_compiler_optimizations"}, {"score": 0.0021049977753042253, "phrase": "baseline_cuda_implementations"}], "paper_keywords": ["Design", " Languages", " Performance", " Streaming", " Compiler", " GPU", " Optimization", " Portability"], "paper_abstract": "Graphics processing units (GPUs) provide a low cost platform for accelerating high performance computations. The introduction of new programming languages, such as CUDA and OpenCL, makes GPU programming attractive to a wide variety of programmers. However, programming GPUs is still a cumbersome task for two primary reasons: tedious performance optimizations and lack of portability. First, optimizing an algorithm for a specific GPU is a time-consuming task that requires a thorough understanding of both the algorithm and the underlying hardware. Unoptimized CUDA programs typically only achieve a small fraction of the peak GPU performance. Second, GPU code lacks efficient portability as code written for one GPU can be inefficient when executed on another. Moving code from one GPU to another while maintaining the desired performance is a non-trivial task often requiring significant modifications to account for the hardware differences. In this work, we propose Sponge, a compilation framework for GPUs using synchronous data flow streaming languages. Sponge is capable of performing a wide variety of optimizations to generate efficient code for graphics engines. Sponge alleviates the problems associated with current GPU programming methods by providing portability across different generations of GPUs and CPUs, and a better abstraction of the hardware details, such as the memory hierarchy and threading model. Using streaming, we provide a write-once software paradigm and rely on the compiler to automatically create optimized CUDA code for a wide variety of GPU targets. Sponge's compiler optimizations improve the performance of the baseline CUDA implementations by an average of 3.2x.", "paper_title": "Sponge: Portable Stream Programming on Graphics Engines", "paper_id": "WOS:000290854400031"}