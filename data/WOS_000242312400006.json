{"auto_keywords": [{"score": 0.0324337131484804, "phrase": "object-oriented_designs"}, {"score": 0.00481495049065317, "phrase": "object_systems"}, {"score": 0.004514714250357749, "phrase": "mathematical_characterization"}, {"score": 0.00441883624011048, "phrase": "object-oriented_concepts"}, {"score": 0.004233119608341877, "phrase": "observation-oriented_semantics"}, {"score": 0.00409895142748329, "phrase": "relational_object-based_language"}, {"score": 0.003526735797659508, "phrase": "type_casting"}, {"score": 0.003451766520526601, "phrase": "dynamic_binding"}, {"score": 0.00266693888510356, "phrase": "structural_and_behavioural_refinement"}, {"score": 0.0025273383208209922, "phrase": "design_calculus"}, {"score": 0.0023950275815082297, "phrase": "predicate_logic"}, {"score": 0.002344066579810659, "phrase": "hoare"}, {"score": 0.0022453451864218477, "phrase": "unifying_theories_of_programming"}], "paper_keywords": ["object orientation", " refinement", " semantics", " UTP"], "paper_abstract": "This article presents a mathematical characterization of object-oriented concepts by defining an observation-oriented semantics for a relational object-based language with a rich variety of features including subtypes, visibility, inheritance, type casting, dynamic binding and polymorphism. The language can be used to specify object-oriented designs as well as programs. We present a calculus that supports both structural and behavioural refinement of object-oriented designs. The design calculus is based on the predicate logic in Hoare and He's Unifying Theories of Programming (UTP). (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "rCOS: A refinement calculus of object systems", "paper_id": "WOS:000242312400006"}