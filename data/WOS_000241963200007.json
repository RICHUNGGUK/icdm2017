{"auto_keywords": [{"score": 0.04373932371398142, "phrase": "clustering_algorithm"}, {"score": 0.00481495049065317, "phrase": "structured_amr."}, {"score": 0.00456020621016909, "phrase": "clustering_operations"}, {"score": 0.004486432283770142, "phrase": "adaptive_meshing_operations"}, {"score": 0.004437910956996051, "phrase": "patch-based_structured_adaptive_mesh_refinement"}, {"score": 0.004389914037256842, "phrase": "samr"}, {"score": 0.004135095617079818, "phrase": "berger"}, {"score": 0.004090274535243564, "phrase": "rigoutsos"}, {"score": 0.0037697665240643066, "phrase": "single_program"}, {"score": 0.0036288825833675127, "phrase": "original_algorithm"}, {"score": 0.0030822147300428, "phrase": "ibm"}, {"score": 0.002855934865505357, "phrase": "unneeded_communications"}, {"score": 0.0028096544129939277, "phrase": "baseline_approach"}, {"score": 0.0027491084541806823, "phrase": "clustering_speed"}, {"score": 0.0025611773887867255, "phrase": "new_task-parallel_implementation"}, {"score": 0.0025059724686541263, "phrase": "communication_wait_time"}, {"score": 0.002151388538895855, "phrase": "large-scale_parallel_computer_systems"}], "paper_keywords": ["parallel computing", " high-performance computing", " task-parallel", " asynchronous", " clustering", " adaptive mesh refinement"], "paper_abstract": "We compare several different parallel implementation approaches for the clustering operations performed during adaptive meshing operations in patch-based structured adaptive mesh refinement (SAMR) applications. Specifically, we target the clustering algorithm of Berger and Rigoutsos. which is commonly used in many SAMR applications. The baseline for comparison is a single program, multiple data extension of the original algorithm that works well for up to O(10(2)) processors. Our goal is a clustering algorithm for machines of up to O(10(5)) processors, such as the 64K-processor IBM BlueGene/L (BG/L) system. We first present an algorithm that avoids unneeded communications of the baseline approach, improving the clustering speed by up to an order of magnitude. We then present a new task-parallel implementation to further reduce communication wait time, adding another order of magnitude of improvement. The new algorithms exhibit more favorable scaling behavior for our test problems. Performance is evaluated on a number of large-scale parallel computer systems, including a 16K-processor BG/L system. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Parallel clustering algorithms for structured AMR", "paper_id": "WOS:000241963200007"}