{"auto_keywords": [{"score": 0.04900373361376459, "phrase": "hfodd"}, {"score": 0.022833522964839783, "phrase": "new_version"}, {"score": 0.022530341606648498, "phrase": "hfb"}, {"score": 0.01945473035605939, "phrase": "hfb_matrix"}, {"score": 0.017070689549685224, "phrase": "previous_version"}, {"score": 0.016629574459664318, "phrase": "lapack"}, {"score": 0.010588440012820522, "phrase": "cartesian_deformed_harmonic-oscillator_basis"}, {"score": 0.010329076044784695, "phrase": "hf"}, {"score": 0.009857345962597085, "phrase": "shell_correction"}, {"score": 0.009579104596475043, "phrase": "multi-constraint_calculations"}, {"score": 0.009471426121454298, "phrase": "rpa_matrix"}, {"score": 0.009372012827099735, "phrase": "hfbtho"}, {"score": 0.00893053234151704, "phrase": "openmp_pragmas"}, {"score": 0.00885008003784495, "phrase": "simplex-breaking_case"}, {"score": 0.00883007945190848, "phrase": "scalapack_library"}, {"score": 0.008783585463040785, "phrase": "previous_published_version"}, {"score": 0.008496843853108354, "phrase": "distributed_program"}, {"score": 0.008477634729163004, "phrase": "test_data"}, {"score": 0.006784732938597166, "phrase": "local_density_approximation"}, {"score": 0.005680148365664511, "phrase": "hfb_equations"}, {"score": 0.00481495049065317, "phrase": "skyrme-hartree-fock-bogolyubov_equations"}, {"score": 0.0046925609843155355, "phrase": "nuclear_skyrme-hartree-fock"}, {"score": 0.004674826286909469, "phrase": "skyrme-hartree-fock-bogolyubov"}, {"score": 0.004514765369604429, "phrase": "lipkin"}, {"score": 0.004453619480940441, "phrase": "specific_numerical_methods"}, {"score": 0.004420010155444802, "phrase": "large-scale_multi-constraint_calculations"}, {"score": 0.0043700690462437665, "phrase": "hfb_method"}, {"score": 0.0042524907304879725, "phrase": "parity-conserving_skyrme-hfb_code"}, {"score": 0.004185363643464855, "phrase": "special_care"}, {"score": 0.004156918890075437, "phrase": "massively_parallel_leadership_class_computers"}, {"score": 0.0040758220118354265, "phrase": "scalable_input_data_routines"}, {"score": 0.003957861369196617, "phrase": "program"}, {"score": 0.00390054707283384, "phrase": "cpc_program_library"}, {"score": 0.003894638914557176, "phrase": "queen's_university"}, {"score": 0.0038887398631337277, "phrase": "belfast"}, {"score": 0.0038828493271095468, "phrase": "n._ireland"}, {"score": 0.003871095289609171, "phrase": "gnu_general_public_licence"}, {"score": 0.0037583347726252974, "phrase": "intel_pentium-iii"}, {"score": 0.003752641211788204, "phrase": "intel_xeon"}, {"score": 0.0037469562437761304, "phrase": "amd-athlon"}, {"score": 0.003741279855718848, "phrase": "amd-opteron"}, {"score": 0.0037186646382212515, "phrase": "unix"}, {"score": 0.0037130541362192467, "phrase": "linux"}, {"score": 0.003707400988080799, "phrase": "windows_xp"}, {"score": 0.0036682617653295683, "phrase": "mpi_ram"}, {"score": 0.003613061678362048, "phrase": "compiler_option"}, {"score": 0.0035722054585490314, "phrase": "real_and_complex_single-precision_floating-point_items"}, {"score": 0.003473398795206651, "phrase": "external"}, {"score": 0.0034419229897497488, "phrase": "naglib"}, {"score": 0.003395262673616455, "phrase": "complex_hermitian_matrices"}, {"score": 0.003364506555852357, "phrase": "arbitrary_real_matrices"}, {"score": 0.0033188922378808517, "phrase": "real_symmetric_matrices"}, {"score": 0.0033063315027881163, "phrase": "linpack"}, {"score": 0.003261503150667464, "phrase": "blas_routines"}, {"score": 0.0032393167543485124, "phrase": "double-precision_linear_algebra"}, {"score": 0.0032148415960256793, "phrase": "complex_linear_algebra"}, {"score": 0.0031808857460122503, "phrase": "bias_and_lapack_subroutines"}, {"score": 0.003159246168578502, "phrase": "knoxville"}, {"score": 0.003132996642395799, "phrase": "yes_nature"}, {"score": 0.0030999025680301896, "phrase": "realistic_cases"}, {"score": 0.0030928564460278307, "phrase": "main_ingredients"}, {"score": 0.0030811483723943794, "phrase": "nuclear_states"}, {"score": 0.0030601850739056967, "phrase": "zero-range_velocity-dependent_skyrme_interaction"}, {"score": 0.0030209749179832663, "phrase": "effective_and_fast_solution"}, {"score": 0.0030141076572127576, "phrase": "self-consistent_hartree-fock_equations"}, {"score": 0.00300497551338589, "phrase": "heavy_nuclei"}, {"score": 0.0029574824113522274, "phrase": "particle-particle_channel"}, {"score": 0.00293958730707235, "phrase": "zero-range_interaction"}, {"score": 0.0029284577326401206, "phrase": "simple_implementation"}, {"score": 0.0029151576884427783, "phrase": "hartree-fock-bogolyubov_method"}, {"score": 0.002895320465629276, "phrase": "cartesian_harmonic_oscillator_basis"}, {"score": 0.002884358005089565, "phrase": "single-quasiparticle_wave_functions"}, {"score": 0.0028625570902776312, "phrase": "skyrme_effective_interaction"}, {"score": 0.0028582166639188286, "phrase": "zero-range_pairing_interaction"}, {"score": 0.002838765813303058, "phrase": "iterative_diagonalization"}, {"score": 0.002832311572409948, "phrase": "mean-field_hamiltonians"}, {"score": 0.002828017016823908, "phrase": "routhians"}, {"score": 0.002810902932481504, "phrase": "local_neutron"}, {"score": 0.002806640607625214, "phrase": "proton_densities"}, {"score": 0.002802384727800294, "phrase": "suitable_constraints"}, {"score": 0.0027748779386977712, "phrase": "angular_momentum"}, {"score": 0.0027476403983774577, "phrase": "j._dudek"}, {"score": 0.0027435153815274812, "phrase": "comput"}, {"score": 0.002691919092267187, "phrase": "new_options"}, {"score": 0.002671623264744547, "phrase": "skyrme"}, {"score": 0.0026634717040868007, "phrase": "finite-temperature_hf"}, {"score": 0.0026453426237929728, "phrase": "multi-constrained_calculations"}, {"score": 0.002633324994793075, "phrase": "first_version"}, {"score": 0.002619373231474298, "phrase": "parallel_capabilities"}, {"score": 0.0025916904937828343, "phrase": "hf_states"}, {"score": 0.0025760030010338994, "phrase": "finite-temperature_formalism"}, {"score": 0.0025545872301634405, "phrase": "lipkin_translational_energy_correction_method"}, {"score": 0.0025237536400277115, "phrase": "two-basis_method"}, {"score": 0.0024970789239802844, "phrase": "augmented_lagrangian_method"}, {"score": 0.0024838472157222725, "phrase": "multiple_constraints"}, {"score": 0.0024688108821617613, "phrase": "linear_constraint_method"}, {"score": 0.002461326799833951, "phrase": "cranking_approximation"}, {"score": 0.00242792751685701, "phrase": "parity-conserving_code"}, {"score": 0.002405912887907765, "phrase": "matrix_elements"}, {"score": 0.0023822883686880837, "phrase": "parallel_interface"}, {"score": 0.0023768695047431906, "phrase": "mpi_library"}, {"score": 0.002362479242688652, "phrase": "scalable_model"}, {"score": 0.002357105331041391, "phrase": "input_data"}, {"score": 0.002279674735999843, "phrase": "serial_mode"}, {"score": 0.0022658715829385586, "phrase": "conserved_parity_and_signature_symmetries"}, {"score": 0.00226071692594679, "phrase": "full_spherical_basis"}, {"score": 0.002247028301598473, "phrase": "amd_opteron_processor"}, {"score": 0.0022385149385955173, "phrase": "standard_blas_and_lapack_libraries"}, {"score": 0.0022215846394707207, "phrase": "hfb_calculations"}, {"score": 0.002189768267470412, "phrase": "full_ho_shells"}, {"score": 0.002184786359667769, "phrase": "custom-built_optimized_blas_and_lapack_libraries"}, {"score": 0.002163328452315973, "phrase": "execution_time"}, {"score": 0.002153495855931993, "phrase": "threaded_version"}, {"score": 0.002142080841647318, "phrase": "threaded_bias_libraries"}, {"score": 0.002135585105378614, "phrase": "additional_factor"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hartree-Fock", " Hartree-Fock-Bogolyubov", " Skyrme interaction", " Angular-momentum projection", " lsospin projection", " Finite temperature", " Multi-threading", " Hybrid programming model", " High-performance computing"], "paper_abstract": "We describe the new version (v2.49t) of the code HFODD which solves the nuclear Skyrme-Hartree-Fock (HF) or Skyrme-Hartree-Fock-Bogolyubov (HFB) problem by using the Cartesian deformed harmonic-oscillator basis. In the new version, we have implemented the following physics features: (i) the isospin mixing and projection, (ii) the finite-temperature formalism for the HFB and HF + BCS methods, (iii) the Lipkin translational energy correction method, (iv) the calculation of the shell correction. A number of specific numerical methods have also been implemented in order to deal with large-scale multi-constraint calculations and hardware limitations: (i) the two-basis method for the HFB method, (ii) the Augmented Lagrangian Method CALM) for multi-constraint calculations, (iii) the linear constraint method based on the approximation of the RPA matrix for multi-constraint calculations, (iv) an interface with the axial and parity-conserving Skyrme-HFB code HFBTHO, (V) the mixing of the HF or HFB matrix elements instead of the HF fields. Special care has been paid to using the code on massively parallel leadership class computers. For this purpose, the following features are now available with this version: (i) the Message Passing Interface (MPI) framework, (ii) scalable input data routines, (iii) multi-threading via OpenMP pragmas, (iv) parallel diagonalization of the HFB matrix in the simplex-breaking case using the ScaLAPACK library. Finally, several little significant errors of the previous published version were corrected. New version program summary Program title: HFODD (v2.49t) Catalogue identifier: ADFL_v3_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/ADFL_v3_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public Licence v3 No. of lines in distributed program, including test data, etc.: 190614 No. of bytes in distributed program, including test data, etc.: 985 898 Distribution format: tar.gz Programming language: FORTRAN-90 Computer: Intel Pentium-III, Intel Xeon, AMD-Athlon, AMD-Opteron, Cray XT4, Cray XT5 Operating system: UNIX, LINUX, Windows XP Has the code been vectorized or parallelized?: Yes, parallelized using MPI RAM: 10 Word size: The code is written in single-precision for the use on a 64-bit processor. The compiler option -r8 or +autodblpad (or equivalent) has to be used to promote all real and complex single-precision floating-point items to double precision when the code is used on a 32-bit machine. Classification: 17.22 Catalogue identifier of previous version: ADFL_v2_2 Journal reference of previous version: Comput. Phys. Comm. 180 (2009) 2361 External routines: The user must have access to 1. the NAGLIB subroutine f02axe, or LAPACK subroutines zhpev, zhpevx, zheevr, or zheevd, which diagonalize complex hermitian matrices, 2. the LAPACK subroutines dgetri and dgetrf which invert arbitrary real matrices, 3. the LAPACK subroutines dsyevd, dsytrf and dsytri which compute eigenvalues and eigenfunctions of real symmetric matrices, 4. the LINPACK subroutines zgedi and zgeco, which invert arbitrary complex matrices and calculate determinants, 5. the BLAS routines dcopy, dscal, dgeem and dgemv for double-precision linear algebra and zcopy, zdscal, zgeem and zgemv for complex linear algebra, or provide another set of subroutines that can perform such tasks. The BIAS and LAPACK subroutines can be obtained from the Netlib Repository at the University of Tennessee, Knoxville: http://netlib2.cs.utk.edu/. Does the new version supersede the previous version?: Yes Nature of problem: The nuclear mean field and an analysis of its symmetries in realistic cases are the main ingredients of a description of nuclear states. Within the Local Density Approximation, or for a zero-range velocity-dependent Skyrme interaction, the nuclear mean field is local and velocity dependent. The locality allows for an effective and fast solution of the self-consistent Hartree-Fock equations, even for heavy nuclei, and for various nucleonic (n-particle-n-hole) configurations, deformations, excitation energies, or angular momenta. Similarly, Local Density Approximation in the particle-particle channel, which is equivalent to using a zero-range interaction, allows for a simple implementation of pairing effects within the Hartree-Fock-Bogolyubov method. Solution method: The program uses the Cartesian harmonic oscillator basis to expand single-particle or single-quasiparticle wave functions of neutrons and protons interacting by means of the Skyrme effective interaction and zero-range pairing interaction. The expansion coefficients are determined by the iterative diagonalization of the mean-field Hamiltonians or Routhians which depend non-linearly on the local neutron and proton densities. Suitable constraints are used to obtain states corresponding to a given configuration, deformation or angular momentum. The method of solution has been presented in: [J.Dobaczewski, J. Dudek, Comput. Phys. Commun. 102 (1997) 166]. Reasons for new version: Version 2.49s of HFODD provides a number of new options such as the isospin mixing and projection of the Skyrme functional, the finite-temperature HF and HFB formalism and optimized methods to perform multi-constrained calculations. It is also the first version of HFODD to contain threading and parallel capabilities. Summary of revisions: 1. Isospin mixing and projection of the HF states has been implemented. 2. The finite-temperature formalism for the HFB equations has been implemented. 3. The Lipkin translational energy correction method has been implemented. 4. Calculation of the shell correction has been implemented. 5. The two-basis method for the solution to the HFB equations has been implemented. 6. The Augmented Lagrangian Method (ALM) for calculations with multiple constraints has been implemented. 7. The linear constraint method based on the cranking approximation of the RPA matrix has been implemented. 8. An interface between HFODD and the axially-symmetric and parity-conserving code HFBTHO has been implemented. 9. The mixing of the matrix elements of the HF or HFB matrix has been implemented. 10. A parallel interface using the MPI library has been implemented. 11. A scalable model for reading input data has been implemented. 12. OpenMP pragmas have been implemented in three subroutines. 13. The diagonalization of the HFB matrix in the simplex-breaking case has been parallelized using the ScaLAPACK library. 14. Several little significant errors of the previous published version were corrected. Running time: In serial mode, running 6 HFB iterations for (152)Dy for conserved parity and signature symmetries in a full spherical basis of N = 14 shells takes approximately 8 min on an AMD Opteron processor at 2.6 GHz, assuming standard BLAS and LAPACK libraries. As a rule of thumb, runtime for HFB calculations for parity and signature conserved symmetries roughly increases as N(7), where N is the number of full HO shells. Using custom-built optimized BLAS and LAPACK libraries (such as in the ATLAS implementation) can bring down the execution time by 60%. Using the threaded version of the code with 12 threads and threaded BIAS libraries can bring an additional factor 2 speed-up, so that the same 6 HFB iterations now take of the order of 2 min 30 s. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Solution of the Skyrme-Hartree-Fock-Bogolyubov equations in the Cartesian deformed harmonic-oscillator basis. (VII) HFODD (v2.49t): A new version of the program", "paper_id": "WOS:000297494600021"}