{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_text_query_evaluation"}, {"score": 0.004650086856905758, "phrase": "cluster-based_implementation"}, {"score": 0.004604023526673226, "phrase": "distributed_information_retrieval_systems"}, {"score": 0.0043804319008535555, "phrase": "document-partitioned_system"}, {"score": 0.0038676325043529524, "phrase": "term-partitioned_system"}, {"score": 0.003661382948704217, "phrase": "inverted_lists"}, {"score": 0.003397683082821229, "phrase": "central_machine"}, {"score": 0.0032975819773787985, "phrase": "query_evaluation"}, {"score": 0.0031686717525002935, "phrase": "pipelined_query-evaluation_methodology"}, {"score": 0.0030906666356950887, "phrase": "term-partitioned_index"}, {"score": 0.0028966970007550798, "phrase": "query_terms"}, {"score": 0.0026480044868438875, "phrase": "computational_load"}, {"score": 0.0025066304722422463, "phrase": "term_distribution"}, {"score": 0.002408565679880478, "phrase": "new_pipelined_approach"}, {"score": 0.0023846534541336326, "phrase": "efficient_memory_utilization"}, {"score": 0.0023609780669713288, "phrase": "efficient_use"}, {"score": 0.002337537183727731, "phrase": "disk_accesses"}, {"score": 0.0022573076362326135, "phrase": "load_balancing"}, {"score": 0.0021049977753042253, "phrase": "preferred_method"}], "paper_keywords": ["distributed retrieval", " text searching", " index reptresentations"], "paper_abstract": "Two principal query-evaluation methodologies have been described for cluster-based implementation of distributed information retrieval systems: document partitioning and term partitioning. In a document-partitioned system, each of the processors hosts a subset of the documents in the collection, and executes every query against its local sub-collection. In a term-partitioned system, each of the processors hosts a subset of the inverted lists that make up the index of the collection, and serves them to a central machine as they are required for query evaluation. In this paper we introduce a pipelined query-evaluation methodology, based on a term-partitioned index, in which partially evaluated queries are passed amongst the set of processors that host the query terms. This arrangement retains the disk read benefits of term partitioning, but more effectively shares the computational load. We compare the three methodologies experimentally, and show that term distribution is inefficient and scales poorly. The new pipelined approach offers efficient memory utilization and efficient use of disk accesses, but suffers from problems with load balancing between nodes. Until these problems are resolved, document partitioning remains the preferred method.", "paper_title": "A pipelined architecture for distributed text query evaluation", "paper_id": "WOS:000247204400001"}