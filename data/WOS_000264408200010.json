{"auto_keywords": [{"score": 0.0387945566502603, "phrase": "operating_system"}, {"score": 0.02690976568946706, "phrase": "hybrid_task"}, {"score": 0.00481495049065317, "phrase": "hybrid_tasks"}, {"score": 0.004698229304089357, "phrase": "reconfiguration-based_architectures"}, {"score": 0.004382591802405206, "phrase": "high_computational_performance"}, {"score": 0.004293840838533456, "phrase": "general_purpose_processors"}, {"score": 0.004258843584164121, "phrase": "reconfigurable_fabrics"}, {"score": 0.0040880724328903, "phrase": "valuable_characteristics"}, {"score": 0.003972607172518598, "phrase": "modern_and_future_embedded_systems"}, {"score": 0.003828912548622257, "phrase": "hardware_tasks"}, {"score": 0.0035861227263414537, "phrase": "software_tasks"}, {"score": 0.003277140908834426, "phrase": "hardware_and_software_execution_domains"}, {"score": 0.0030818310926031024, "phrase": "different_computation_paradigms"}, {"score": 0.0029581155916843663, "phrase": "challenging_job"}, {"score": 0.0028627183712016894, "phrase": "comprehensive_and_embracing_methodology"}, {"score": 0.0027931892160452513, "phrase": "unified_task_representation"}, {"score": 0.0027253441561528495, "phrase": "final_implementation"}, {"score": 0.002459902948098627, "phrase": "underlying_infrastructure"}, {"score": 0.002380534385718454, "phrase": "dynamic_relocation"}, {"score": 0.00219311232069446, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Reconfigurable systems", " Embedded systems", " Dynamic task relocation", " Context switching", " Reconfigurable Systems-on-Chip"], "paper_abstract": "Reconfiguration-based architectures are increasingly gaining attention of designers due to their benefits of flexibility, re-programmability and high computational performance. The combination of general purpose processors and reconfigurable fabrics (e.g., FPGAs), may provide those valuable characteristics, which are becoming essential for modern and future embedded systems. Such hybrid systems permit the existence of hardware tasks, which shall be properly managed by the operating system, thus allowing for their coexistence with software tasks. Nevertheless. in order to completely exploit this feature, the operating system must be capable of relocating a task between hardware and software execution domains. Runtime relocation of tasks (including preemption and resumption) between two devices following different computation paradigms (parallel vs. instruction based) however is a challenging job. In this work we propose a comprehensive and embracing methodology, which starts from a unified task representation, and goes to the final implementation of such hybrid tasks. For its accomplishment, a framework is proposed to help the user in designing a hybrid task, which also generates automatically the underlying infrastructure that is in charge of performing the dynamic relocation of a hybrid task. In order to prove the applicability of our concept and the efficiency of our framework, a case study is presented including its results. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic relocation of hybrid tasks: Strategies and methodologies", "paper_id": "WOS:000264408200010"}