{"auto_keywords": [{"score": 0.04197548893255256, "phrase": "log_blocks"}, {"score": 0.010612387000973441, "phrase": "nand_flash_memory_storage_systems"}, {"score": 0.004506968388996092, "phrase": "log-block-based_ftls"}, {"score": 0.004139639802595566, "phrase": "large_amount"}, {"score": 0.004100712177044264, "phrase": "data_blocks"}, {"score": 0.00406214911915987, "phrase": "frequent_page"}, {"score": 0.003967314311312148, "phrase": "big_overhead"}, {"score": 0.0038564191670589884, "phrase": "system_bottleneck"}, {"score": 0.0036610702290043387, "phrase": "block-level_log-block_management_scheme"}, {"score": 0.003426647933818445, "phrase": "blog"}, {"score": 0.0033624514778823763, "phrase": "block_level_management"}, {"score": 0.0033150974333333244, "phrase": "update_pages"}, {"score": 0.00326840809777013, "phrase": "data_block"}, {"score": 0.0028360962841331634, "phrase": "garbage_collection_overhead"}, {"score": 0.0027567336518542858, "phrase": "novel_partial_merge_operation"}, {"score": 0.0025922974876210194, "phrase": "garbage_collection"}, {"score": 0.0024960069794216977, "phrase": "valid_pages"}, {"score": 0.002460825108719896, "phrase": "unnecessary_erase_operations"}, {"score": 0.002336004938424957, "phrase": "ftl_called_blogftl_for_mlc_nand_flash"}, {"score": 0.0022175019341824603, "phrase": "synthetic_traces"}, {"score": 0.00218623706110975, "phrase": "experimental_results"}, {"score": 0.002125020720324262, "phrase": "previous_log-block-based_ftls"}, {"score": 0.0021049977753042253, "phrase": "mlc_nand"}], "paper_keywords": ["NAND Flash memory", " FTL (Flash Translation Layer)", " log block", " garbage collection", " response time"], "paper_abstract": "Log-block-based FTL (Flash Translation Layer) schemes have been widely used to manage NAND flash memory storage systems in industry. In log-block-based FTLs, a few physical blocks called log blocks are used to hold all page updates from a large amount of data blocks. Frequent page updates in log blocks introduce big overhead so log blocks become the system bottleneck. To address this problem, this paper presents a block-level log-block management scheme called BLog (Block-level Log-Block Management). In BLog, with the block level management, the update pages of a data block can be collected together and put into the same log block as much as possible; therefore, we can effectively reduce the associativities of log blocks so as to reduce the garbage collection overhead. We also propose a novel partial merge operation called reduced-order merge by which we can effectively postpone the garbage collection of log blocks so as to maximally utilize valid pages and reduce unnecessary erase operations in log blocks. Based on BLog, we design an FTL called BLogFTL for MLC NAND flash. We conduct experiments on a mixture of real-world and synthetic traces. The experimental results show that our scheme outperforms the previous log-block-based FTLs for MLC NAND flash.", "paper_title": "BLog: Block-level Log-block Management for NAND Flash Memory Storage Systems", "paper_id": "WOS:000321865100013"}