{"auto_keywords": [{"score": 0.049146612112995945, "phrase": "limited_memory_environment"}, {"score": 0.00481495049065317, "phrase": "spatial_collocation_pattern_mining"}, {"score": 0.00450933377534525, "phrase": "rapid_growth"}, {"score": 0.004450568197899267, "phrase": "spatial_datasets"}, {"score": 0.004140726362519362, "phrase": "spatial_collocation_patterns"}, {"score": 0.0040334640350288, "phrase": "spatial_features"}, {"score": 0.0038271712887391015, "phrase": "spatial_neighborhood"}, {"score": 0.003703611021999795, "phrase": "efficient_methods"}, {"score": 0.0036553070575015344, "phrase": "collocation_discovery"}, {"score": 0.003400640983719424, "phrase": "limited_size"}, {"score": 0.003334309053314909, "phrase": "operational_memory"}, {"score": 0.0032908057622663732, "phrase": "limited_access"}, {"score": 0.0032054891061528896, "phrase": "short_access_times"}, {"score": 0.002982068153662372, "phrase": "large_size"}, {"score": 0.0029238768315330305, "phrase": "data_structures"}, {"score": 0.002866817775018445, "phrase": "efficient_identification"}, {"score": 0.0028293966058473476, "phrase": "collocation_instances"}, {"score": 0.0026321198895843173, "phrase": "collocation_pattern_mining"}, {"score": 0.002530359917257626, "phrase": "first_algorithm"}, {"score": 0.0024485643104830814, "phrase": "well-known_joinless_method"}, {"score": 0.0024007585788965655, "phrase": "shekhar"}, {"score": 0.00236940969654751, "phrase": "yoo"}, {"score": 0.002323142666222693, "phrase": "second_and_third_algorithms"}, {"score": 0.0022480304016499605, "phrase": "tree_structure"}, {"score": 0.0021328586481696157, "phrase": "wang_et_al."}], "paper_keywords": ["Spatial collocations", " Limited memory", " Pattern mining"], "paper_abstract": "Rapid growth of spatial datasets requires methods to find (semi-)automatically spatial knowledge from these sets. Spatial collocation patterns represent subsets of spatial features whose instances are frequently located together in a spatial neighborhood. In recent years, efficient methods for collocation discovery have been developed, however, none of them assume limited size of the operational memory or limited access to memory with short access times. Such restrictions are especially important in the context of the large size of the data structures required for efficient identification of collocation instances. In this work we present and compare three algorithms for collocation pattern mining in a limited memory environment. The first algorithm is based on the well-known joinless method introduced by Shekhar and Yoo. The second and third algorithms are inspired by a tree structure (iCPI-tree) presented by Wang et al. In our experimental evaluation, we have compared the efficiency of the algorithms, both on synthetic and real world datasets.", "paper_title": "Algorithms for spatial collocation pattern mining in a limited memory environment: a summary of results", "paper_id": "WOS:000339875000007"}