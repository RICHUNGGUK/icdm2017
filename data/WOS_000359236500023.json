{"auto_keywords": [{"score": 0.033027093762343744, "phrase": "wafs"}, {"score": 0.00481495049065317, "phrase": "workflow-aware_file_system"}, {"score": 0.00476323161560059, "phrase": "effective_storage_utilization"}, {"score": 0.004321952227344232, "phrase": "related_scheduling_algorithm"}, {"score": 0.00427550604912774, "phrase": "scientific_workflow_computation"}, {"score": 0.004161553532799662, "phrase": "wafs's_primary_design_goal"}, {"score": 0.003985487777785535, "phrase": "explicit_and_implicit_data_dependencies"}, {"score": 0.003695040819303525, "phrase": "wafs's_data"}, {"score": 0.003635600104609725, "phrase": "workflow_scheduler"}, {"score": 0.00355782527287734, "phrase": "effective_cost-performance_tradeoffs"}, {"score": 0.0034442607586033657, "phrase": "proper_resource_provisioning"}, {"score": 0.003407214479510987, "phrase": "storage_utilization"}, {"score": 0.003370565320453525, "phrase": "pay-as-you-go_clouds"}, {"score": 0.003158776195052182, "phrase": "traditional_hpc_systems"}, {"score": 0.002992456421856034, "phrase": "concurrent_workflow_instances"}, {"score": 0.002789226820897593, "phrase": "total_makespan"}, {"score": 0.002436289099444074, "phrase": "new_workflow_scheduling_algorithm"}, {"score": 0.002345707314211983, "phrase": "empirical_evidence"}, {"score": 0.0023079225317714815, "phrase": "acceptable_overheads"}, {"score": 0.002222102813520549, "phrase": "simulation-based_study"}, {"score": 0.0021863046959469863, "phrase": "representative_workflows"}, {"score": 0.002127915423138391, "phrase": "makespan_benefits"}], "paper_keywords": ["Dataflow concurrency", " workflow optimization", " cloud file system", " storage constraints", " workflow-aware file system"], "paper_abstract": "We present WaFS, a user-level file system, and a related scheduling algorithm for scientific workflow computation in the cloud. WaFS's primary design goal is to automatically detect and gather the explicit and implicit data dependencies between workflow jobs, rather than high-performance file access. Using WaFS's data, a workflow scheduler can either make effective cost-performance tradeoffs or improve storage utilization. Proper resource provisioning and storage utilization on pay-as-you-go clouds can be more cost effective than the uses of resources in traditional HPC systems. WaFS and the scheduler controls the number of concurrent workflow instances at runtime so that the storage is well used, while the total makespan (i.e., turnaround time for a workload) is not severely compromised. We describe the design and implementation of WaFS and the new workflow scheduling algorithm based on our previous work. We present empirical evidence of the acceptable overheads of our prototype WaFS and describe a simulation-based study, using representative workflows, to show the makespan benefits of our WaFS-enabled scheduling algorithm.", "paper_title": "WaFS: A Workflow-Aware File System for Effective Storage Utilization in the Cloud", "paper_id": "WOS:000359236500023"}