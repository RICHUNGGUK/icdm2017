{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mobile_agents"}, {"score": 0.00693043085031397, "phrase": "parallel_applications"}, {"score": 0.004624751696958501, "phrase": "increasing_gap"}, {"score": 0.004578382275810468, "phrase": "processor_speed"}, {"score": 0.004266501496765747, "phrase": "distributed_architectures"}, {"score": 0.004202472962684885, "phrase": "commodity_components"}, {"score": 0.004056769841308405, "phrase": "heterogeneous_computers"}, {"score": 0.004016072233242585, "phrase": "dynamically_evolving_utilization_loads"}, {"score": 0.0038186039088445524, "phrase": "parallel_computing_applications"}, {"score": 0.003540392285585644, "phrase": "execution_environment"}, {"score": 0.003417565253539315, "phrase": "efficient_access"}, {"score": 0.003152531962718477, "phrase": "traditional_storage_solutions"}, {"score": 0.003073988343893906, "phrase": "pull-based_model"}, {"score": 0.0028498718992429825, "phrase": "compute_nodes"}, {"score": 0.002764856305713066, "phrase": "memory_region"}, {"score": 0.002723301730223192, "phrase": "parallel_application"}, {"score": 0.0026554236621262515, "phrase": "application_data"}, {"score": 0.0024993218789131437, "phrase": "storage_nodes"}, {"score": 0.0024617483174454113, "phrase": "final_goal"}, {"score": 0.0021917966722180132, "phrase": "unique_characteristics"}], "paper_keywords": ["Distributed architectures", " mobile agents", " parallel I/O"], "paper_abstract": "In the last years, the increasing gap between processor speed and storage has exposed I/O as one of the most significant bottlenecks in parallel applications. Distributed architectures based on commodity components belonging to the same organization consists of heterogeneous computers with dynamically evolving utilization loads. These resources can be efficiently used for executing parallel computing applications provided that all the computers are under the same administrative domain. In this work we propose an execution environment which could provide these parallel applications an efficient access to storage in the case that distributed or parallel filesystem are not available. Unlike traditional storage solutions, we propose a pull-based model based on mobile agents. In this approach, the mobile agents can freely traverse the compute nodes as well as accessing the memory region of the parallel application. Therefore, the application data can be accessed by the mobile agents and efficiently transferred to the storage nodes. The final goal of this platform is to provide distributed asynchronous I/O services based on the usage of mobile agents. Experimentally we show that, by exploiting the unique characteristics of mobile agents, the efficiency of the I/O stage can be dramatically increased.", "paper_title": "Magio: using mobile agents to enhance parallel I/O", "paper_id": "WOS:000357768100001"}