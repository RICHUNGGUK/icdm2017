{"auto_keywords": [{"score": 0.03530992522222899, "phrase": "ummi"}, {"score": 0.030354520547355067, "phrase": "high_utility_itemsets"}, {"score": 0.028723678412536292, "phrase": "potential_itemsets"}, {"score": 0.012421384716028864, "phrase": "maximal_itemset_property"}, {"score": 0.01143563864411762, "phrase": "first_step"}, {"score": 0.006936614371607024, "phrase": "second_step"}, {"score": 0.004782977628406988, "phrase": "lexicographic_tree_structures"}, {"score": 0.004703966873298224, "phrase": "high_utility_mining"}, {"score": 0.004565007074039171, "phrase": "transactional_database"}, {"score": 0.004144452614362445, "phrase": "large_number"}, {"score": 0.004021954624114115, "phrase": "mining_bottleneck"}, {"score": 0.0038642157757169315, "phrase": "mining_performance"}, {"score": 0.003314591878914152, "phrase": "effective_lexicographic_tree_structure"}, {"score": 0.003131818247415968, "phrase": "previously_used_algorithms"}, {"score": 0.0031006232333900055, "phrase": "ctu-pro"}, {"score": 0.00306973798582805, "phrase": "optimized_twu-mining_algorithm"}, {"score": 0.002988868585379496, "phrase": "synthetic_datasets"}, {"score": 0.0026950674053179404, "phrase": "real_data_experiment"}, {"score": 0.002537880772794665, "phrase": "mining_step"}, {"score": 0.0025125868638809284, "phrase": "reasonable_amount"}, {"score": 0.0024545413637350765, "phrase": "approximately_fixed_amount"}, {"score": 0.0023268399760599336, "phrase": "experimental_results"}, {"score": 0.002295964130868963, "phrase": "proposed_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["High utility mining", " Maximal itemset mining", " Data mining", " Frequent pattern", " Lexicographic tree structure"], "paper_abstract": "The problem of high utility mining is discovering all of the high utility itemsets in a transactional database. Most algorithms find high utility itemsets in two steps. The first step identifies all of the potential itemsets. The second step then determines the high utility itemsets from the set of potential itemsets. The large number of potential itemsets in the first step is generally the mining bottleneck. If we can reduce the number of potential itemsets, the mining performance can be improved significantly. In this paper, we use a maximal itemset property and propose an algorithm called UMMI (high Utility Mining using the Maximal Itemset property) to significantly reduce the number of potential itemsets in the first step. In the second step, UMMI uses an effective lexicographic tree structure to determine all of the high utility itemsets. In general, UMMI outperforms all three of the previously used algorithms, including CTU-PRO, an optimized TWU-mining algorithm, and Two-Phase, in our experiments using synthetic datasets. On average, UMMI is 5, 3, and 7 times faster than CTU-PRO, TWU-mining, and Two-Phase, respectively. In a real data experiment. UMMI is 6 times faster than Two-Phase. The other two algorithms are not capable of completing the mining step in a reasonable amount of time. UMMI uses an approximately fixed amount of memory, which is generally less than the other algorithms for each mining. The experimental results show that the proposed algorithm can mine the high utility itemsets efficiently. In addition, UMMI is linearly scalable with respect to the number of transactions. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "High utility pattern mining using the maximal itemset property and lexicographic tree structures", "paper_id": "WOS:000308390600001"}