{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "program_debugging"}, {"score": 0.00481495049065317, "phrase": "embedded_systems"}, {"score": 0.004749106104067268, "phrase": "increasing_complexity"}, {"score": 0.0047057084749407485, "phrase": "modern_embedded_computer_systems"}, {"score": 0.004598933498016774, "phrase": "system_verification"}, {"score": 0.004515252649226697, "phrase": "system_development"}, {"score": 0.004352411290383643, "phrase": "chip_manufacturers"}, {"score": 0.0042928648367867835, "phrase": "hardware_infrastructure"}, {"score": 0.0037231102027070724, "phrase": "debug_tools"}, {"score": 0.0035722806911457545, "phrase": "new_approach"}, {"score": 0.0034911335714333507, "phrase": "program_execution"}, {"score": 0.0033961782274326948, "phrase": "proposed_trace_compressor"}, {"score": 0.003126481516783286, "phrase": "program_flow"}, {"score": 0.0026252106881752067, "phrase": "proposed_mechanism"}, {"score": 0.00257735013358606, "phrase": "trace_port_bandwidth"}, {"score": 0.002518746501941657, "phrase": "benchmark_programs"}, {"score": 0.00241658945942583, "phrase": "trace_port"}, {"score": 0.002361632539339945, "phrase": "sixfold_improvement"}, {"score": 0.0023400004981080818, "phrase": "state-of-the-art_commercial_solutions"}, {"score": 0.00226583335721762, "phrase": "on-chip_area"}, {"score": 0.0021342613107011624, "phrase": "continual_and_unobtrusive_program"}, {"score": 0.0021049977753042253, "phrase": "real_time"}], "paper_keywords": ["Compression technologies", " real time and embedded systems", " testing and debugging", " tracing"], "paper_abstract": "The increasing complexity of modern embedded computer systems makes software development and system verification the most critical steps in system development. To expedite verification and program debugging, chip manufacturers increasingly consider hardware infrastructure for program debugging and tracing, including logic to capture and filter traces, buffers to store traces, and a trace port through which the trace is read by the debug tools. In this paper, we introduce a new approach to capture and compress program execution traces in hardware. The proposed trace compressor encompasses two cost-effective structures, a stream descriptor cache, and a last stream predictor. Information about the program flow is translated into a sequence of hit and miss events in these structures, thus dramatically reducing the number of bits that need to be sent out of the chip. We evaluate the efficiency of the proposed mechanism by measuring the trace port bandwidth on a set of benchmark programs. Our mechanism requires only 0.15 bits/instruction/CPU on average on the trace port, which is a sixfold improvement over state-of-the-art commercial solutions. The trace compressor requires an on-chip area that is equivalent to one third of a 1 kilobyte cache and it allows for continual and unobtrusive program tracing in real time.", "paper_title": "Caches and Predictors for Real-Time, Unobtrusive, and Cost-Effective Program Tracing in Embedded Systems", "paper_id": "WOS:000290867300007"}