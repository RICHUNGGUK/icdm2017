{"auto_keywords": [{"score": 0.042579795888292596, "phrase": "nix"}, {"score": 0.00481495049065317, "phrase": "manycore_system"}, {"score": 0.004776297980616768, "phrase": "cloud_computing"}, {"score": 0.0047379542803396915, "phrase": "virtualized_cloud_computing"}, {"score": 0.004699916946246509, "phrase": "lower_costs"}, {"score": 0.0046621835537196754, "phrase": "easier_system_management"}, {"score": 0.004624751696958501, "phrase": "lower_energy_consumption"}, {"score": 0.0045691640746165045, "phrase": "high_performance_tasks"}, {"score": 0.00445997627516653, "phrase": "traditional_clouds"}, {"score": 0.004424160689087029, "phrase": "commodity_operating_systems"}, {"score": 0.0039677715255034595, "phrase": "manycore_central_processing_units"}, {"score": 0.003810909603178837, "phrase": "high_performance_applications"}, {"score": 0.003780286517897356, "phrase": "commodity_cloud_systems"}, {"score": 0.003704797078215222, "phrase": "heterogeneous_cpu_model"}, {"score": 0.0036454883790271843, "phrase": "shared_address_space"}, {"score": 0.003515479934694842, "phrase": "blue_gene"}, {"score": 0.003003452468800793, "phrase": "kernel_functions"}, {"score": 0.002748159131396737, "phrase": "traditional_kernels"}, {"score": 0.002504374718975704, "phrase": "traditional_systems"}, {"score": 0.0024052270356036743, "phrase": "tc_kernel"}, {"score": 0.0023666732429695908, "phrase": "system_call_traps"}, {"score": 0.002272964710550345, "phrase": "shared-memory_nature"}, {"score": 0.002104997879802406, "phrase": "alcatel-lucent"}], "paper_keywords": [""], "paper_abstract": "Virtualized cloud computing provides lower costs, easier system management and lower energy consumption. However high performance tasks are ill-suited for traditional clouds since commodity operating systems and hypervisors add cascading jitter to computation, slowing applications to a crawl. This paper presents an overview of NIX, an operating system for manycore central processing units (CPUs) which addresses the challenges of running high performance applications on commodity cloud systems. NIX features a heterogeneous CPU model and uses a shared address space. NIX has been influenced by our work on Blue Gene and more traditional clusters. NIX partitions cores by function: timesharing cores (TCs); application cores (ACs); and kernel cores (KCs). One or more TCs run traditional applications. KCs are optional, running kernel functions on demand. ACs are also optional, devoted to running an application with no interrupts; not even clock interrupts. Unlike traditional kernels, functions are not static: the number of TCs, KCs, and ACs can change as needed. Also unlike traditional systems, applications can communicate by sending messages to the TC kernel, instead of system call traps. These messages are active taking advantage of the shared-memory nature of manycore CPUs to pass pointers to data and code to coordinate cores. (c) 2012 Alcatel-Lucent.", "paper_title": "NIX: A Case for a Manycore System for Cloud Computing", "paper_id": "WOS:000307884800007"}