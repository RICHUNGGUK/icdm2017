{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "circuit_simulation"}, {"score": 0.004620093797504386, "phrase": "de_facto_standard"}, {"score": 0.004459334186889869, "phrase": "accurate_spice_simulations"}, {"score": 0.004406994912939125, "phrase": "today's_sub-micron_circuits"}, {"score": 0.00420368356873615, "phrase": "conventional_processors"}, {"score": 0.004129873531628877, "phrase": "spice_simulation"}, {"score": 0.00405735420159564, "phrase": "iterative_process"}, {"score": 0.003757480190200645, "phrase": "matrix_solution"}, {"score": 0.0036914757355166966, "phrase": "model_evaluation_phase"}, {"score": 0.003459191419478298, "phrase": "subsequent_phase"}, {"score": 0.0033190180867511605, "phrase": "highly_sparse_and_asymmetric_matrices"}, {"score": 0.00314708280192844, "phrase": "fpga_implementation"}, {"score": 0.003091767402370757, "phrase": "sparse_matrix_solver"}, {"score": 0.0029489527539649737, "phrase": "spice_circuit_simulations"}, {"score": 0.0028293966058473476, "phrase": "symbolic_analysis"}, {"score": 0.002763261749602258, "phrase": "accurate_task_flow-graph"}, {"score": 0.00266693888510356, "phrase": "multiple_granularities"}, {"score": 0.002620040660435039, "phrase": "high_floating-point_data_rates"}, {"score": 0.0025286975935774245, "phrase": "quantitative_comparison"}, {"score": 0.002426137929553724, "phrase": "state-of-the-art_software_packages"}, {"score": 0.002286781334850213, "phrase": "average_speed-ups"}, {"score": 0.0021682030662993866, "phrase": "umfpack"}, {"score": 0.0021426969561091237, "phrase": "klu"}, {"score": 0.0021049977753042253, "phrase": "kundert_sparse_matrix_packages"}], "paper_keywords": ["Hardware acceleration", " sparse matrices", " SPICE", " FPGA arithmetic", " pipeline and parallel arithmetic and logic structures"], "paper_abstract": "SPICE is the de facto standard for circuit simulation. However, accurate SPICE simulations of today's sub-micron circuits can often take days or weeks on conventional processors. A SPICE simulation is an iterative process that consists of two phases per iteration: model evaluation followed by a matrix solution. The model evaluation phase has been found to be easily parallelizable, unlike the subsequent phase, which involves the solution of highly sparse and asymmetric matrices. In this paper, we present an FPGA implementation of a sparse matrix solver, geared towards matrices that arise in SPICE circuit simulations. Our approach combines static pivoting with symbolic analysis to compute an accurate task flow-graph which efficiently exploits parallelism at multiple granularities and sustains high floating-point data rates. We also present a quantitative comparison between the performance of our hardware prototype and state-of-the-art software packages running on a general-purpose PC. We report average speed-ups of 9.65x, 11.83x, and 17.21x against UMFPACK, KLU, and Kundert Sparse matrix packages, respectively.", "paper_title": "Parallel Sparse Matrix Solution for Circuit Simulation on FPGAs", "paper_id": "WOS:000351458800015"}