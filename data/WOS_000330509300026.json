{"auto_keywords": [{"score": 0.027773607799187222, "phrase": "domain-specific_custom_instructions"}, {"score": 0.00481495049065317, "phrase": "application_domain"}, {"score": 0.004777214679969785, "phrase": "specialized_functional_units"}, {"score": 0.004739773204474094, "phrase": "hardware_specialization"}, {"score": 0.004684157900507474, "phrase": "renewed_interest"}, {"score": 0.0045748683993128425, "phrase": "power_limits"}, {"score": 0.004539005582217309, "phrase": "chip_designers"}, {"score": 0.004503422625191897, "phrase": "traditional_processor_architectures"}, {"score": 0.004415675459182871, "phrase": "general-purpose_computing"}, {"score": 0.004261998281333649, "phrase": "market_pressure"}, {"score": 0.004228577663320847, "phrase": "simpler_design_processes"}, {"score": 0.004178935413340453, "phrase": "new_power_limits"}, {"score": 0.004129873531628877, "phrase": "chip_specialization"}, {"score": 0.0040176151419992956, "phrase": "specific_application_yields_large_speedups"}, {"score": 0.003986103192038901, "phrase": "low-power_dissipation"}, {"score": 0.003772306776343196, "phrase": "domain-based_specialization"}, {"score": 0.0036697319652557363, "phrase": "hardware's_reusability"}, {"score": 0.003640938643675543, "phrase": "performance_efficiency"}, {"score": 0.003541923233726252, "phrase": "customized_compute_units"}, {"score": 0.003500313767208306, "phrase": "particular_operations"}, {"score": 0.0033917213078141373, "phrase": "automatic_techniques"}, {"score": 0.0033518704336033905, "phrase": "code_sequences"}, {"score": 0.0033255627814855163, "phrase": "different_applications"}, {"score": 0.0031970796597571367, "phrase": "new_custom_instruction"}, {"score": 0.0031100973266506163, "phrase": "configurable_specialized_functional_unit"}, {"score": 0.0030856823097470108, "phrase": "sfu"}, {"score": 0.0029899137403982027, "phrase": "canonical_representation"}, {"score": 0.0027961342030212353, "phrase": "larger_speedups"}, {"score": 0.002752390133272192, "phrase": "smaller_core_area"}, {"score": 0.0027307746993761035, "phrase": "previous_pattern-matching_techniques"}, {"score": 0.0026774738852854427, "phrase": "new_heuristics"}, {"score": 0.0026355812883224203, "phrase": "search_space"}, {"score": 0.0025436978068459565, "phrase": "best_performance"}, {"score": 0.002474447780553576, "phrase": "overall_performance"}, {"score": 0.002426137929553722, "phrase": "hardware_models"}, {"score": 0.0023787690061742566, "phrase": "nine_media_benchmarks"}, {"score": 0.0023139986108451946, "phrase": "core_area"}, {"score": 0.002259883463607508, "phrase": "sfu_customization"}, {"score": 0.0022333012657436307, "phrase": "largest_speedups"}, {"score": 0.0021384748235753425, "phrase": "domain-specific_hardware_acceleration"}, {"score": 0.0021049977753042253, "phrase": "continued_computing_system_performance_improvements"}], "paper_keywords": ["Customization", " acceleration", " specialized functional unit", " domain-specific", " application-specific", " canonical representation"], "paper_abstract": "Hardware specialization has received renewed interest recently as chips are hitting power limits. Chip designers of traditional processor architectures have primarily focused on general-purpose computing, partially due to time-to-market pressure and simpler design processes. But new power limits require some chip specialization. Although hardware configured for a specific application yields large speedups for low-power dissipation, its design is more complex and less reusable. We instead explore domain-based specialization, a scalable approach that balances hardware's reusability and performance efficiency. We focus on specialization using customized compute units that accelerate particular operations. In this article, we develop automatic techniques to identify code sequences from different applications within a domain that can be targeted to a new custom instruction that will be run inside a configurable specialized functional unit (SFU). We demonstrate that using a canonical representation of computations finds more common code sequences among applications that can be mapped to the same custom instruction, leading to larger speedups while specializing a smaller core area than previous pattern-matching techniques. We also propose new heuristics to narrow the search space of domain-specific custom instructions, finding those that achieve the best performance across applications. We estimate the overall performance achieved with our automatic techniques using hardware models on a set of nine media benchmarks, showing that when limiting the core area devoted to specialization, the SFU customization with the largest speedups includes both application- and domain-specific custom instructions. We demonstrate that exploring domain-specific hardware acceleration is key to continued computing system performance improvements.", "paper_title": "Accelerating an Application Domain with Specialized Functional Units", "paper_id": "WOS:000330509300026"}