{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "halvade"}, {"score": 0.00481498862885526, "phrase": "mapreduce"}, {"score": 0.0047113960612140335, "phrase": "post-sequencing_dna_analysis"}, {"score": 0.004610058444728656, "phrase": "read_mapping"}, {"score": 0.004413846562278824, "phrase": "whole_genome_sequencing"}, {"score": 0.004342430078306461, "phrase": "computational_step"}, {"score": 0.004046020290832207, "phrase": "multi-core_machine"}, {"score": 0.0037903327482565097, "phrase": "sequencing_pipelines"}, {"score": 0.003399466007862412, "phrase": "dna_sequencing_analysis_pipeline"}, {"score": 0.003219368413618912, "phrase": "gatk_best_practices_recommendations"}, {"score": 0.0031500213134140953, "phrase": "whole_genome"}, {"score": 0.003115908199991072, "phrase": "whole_exome_sequencing"}, {"score": 0.0025059724686541263, "phrase": "significant_speedup"}, {"score": 0.0024386325347607674, "phrase": "individual_tools"}, {"score": 0.0022843326589034405, "phrase": "java"}, {"score": 0.002186849855560281, "phrase": "wide_range"}, {"score": 0.0021397065881993385, "phrase": "hadoop"}, {"score": 0.0021049979843008482, "phrase": "cloudera"}], "paper_keywords": [""], "paper_abstract": "Motivation: Post-sequencing DNA analysis typically consists of read mapping followed by variant calling. Especially for whole genome sequencing, this computational step is very time-consuming, even when using multithreading on a multi-core machine. Results: We present Halvade, a framework that enables sequencing pipelines to be executed in parallel on a multi-node and/or multi-core compute infrastructure in a highly efficient manner. As an example, a DNA sequencing analysis pipeline for variant calling has been implemented according to the GATK Best Practices recommendations, supporting both whole genome and whole exome sequencing. Using a 15-node computer cluster with 360 CPU cores in total, Halvade processes the NA12878 dataset (human, 100 bp paired-end reads, 50x coverage) in <3 h with very high parallel efficiency. Even on a single, multi-core machine, Halvade attains a significant speedup compared with running the individual tools with multithreading. Availability and implementation: Halvade is written in Java and uses the Hadoop MapReduce 2.0 API. It supports a wide range of distributions of Hadoop, including Cloudera and Amazon EMR.", "paper_title": "Halvade: scalable sequence analysis with MapReduce", "paper_id": "WOS:000359312400009"}