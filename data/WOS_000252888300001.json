{"auto_keywords": [{"score": 0.04035238107891428, "phrase": "continuous_consensus"}, {"score": 0.028198276166246455, "phrase": "common_knowledge"}, {"score": 0.02242396365097538, "phrase": "concon"}, {"score": 0.008560908362407665, "phrase": "continuous_consensus_problem"}, {"score": 0.005544823713039734, "phrase": "moses"}, {"score": 0.005512099764810723, "phrase": "tuttle"}, {"score": 0.004538045400396629, "phrase": "correct_sites"}, {"score": 0.004458107800947839, "phrase": "local_copies"}, {"score": 0.004276996526659816, "phrase": "interesting_event"}, {"score": 0.004127601533040351, "phrase": "synchronous_systems"}, {"score": 0.004103212598803194, "phrase": "crash_and_omission_failures"}, {"score": 0.004054864445795109, "phrase": "upper_bound"}, {"score": 0.00386708010197837, "phrase": "simple_protocol"}, {"score": 0.003666159244841419, "phrase": "actions_processes"}, {"score": 0.003374094774912924, "phrase": "close_connection"}, {"score": 0.0032561349010603734, "phrase": "continuous_consensus_protocol"}, {"score": 0.002952516738708181, "phrase": "optimum_protocol"}, {"score": 0.0027495914857929584, "phrase": "external_inputs"}, {"score": 0.00260657976055413, "phrase": "correct_protocols"}, {"score": 0.0023633857274905977, "phrase": "uniform_version"}, {"score": 0.0021748801206355416, "phrase": "uniform_continuous_consensus"}, {"score": 0.0021049977753042253, "phrase": "optimum_solution"}], "paper_keywords": [""], "paper_abstract": "This paper introduces the continuous consensus problem, in which a core M[k] of information is continuously maintained at all correct sites of the system. All local copies of the core must be identical at all times k, and every interesting event should eventually enter the core. The continuous consensus problem is studied in synchronous systems with crash and omission failures, assuming an upper bound of t on the number of failures in any given run of the system. A simple protocol for continuous consensus, called CONCON, is presented. This protocol is knowledge-based: The actions processes take depend explicitly on their knowledge, as well as on their knowledge of what other processes know about failures and about events that occurred in the system. A close connection between continuous consensus and knowledge is established by showing that in every continuous consensus protocol, the information in the core at any given time must be common knowledge. Based on the characterization of common knowledge by Moses and Tuttle, it is shown that CONCON on is an optimum protocol for continuous consensus, maintaining the most up-to-date core possible at all times: For every pattern of failures and external inputs and each point in time, the core provided by CONCON on contains the cores of all correct protocols for continuous consensus. Indeed, the CONCON on protocol can be viewed as a simplification of the Moses and Tuttle construction for computing the common knowledge at a given point. Finally, a uniform version of continuous consensus is considered, in which all processes (faulty and nonfaulty) are guaranteed to maintain the same core at any given time. An algorithm for uniform continuous consensus is presented, and is also shown to be an optimum solution.", "paper_title": "Continuous consensus via common knowledge", "paper_id": "WOS:000252888300001"}