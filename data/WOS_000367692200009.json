{"auto_keywords": [{"score": 0.04913548507380238, "phrase": "program_analysis"}, {"score": 0.04382196281876911, "phrase": "logic_programs"}, {"score": 0.00481495049065317, "phrase": "intermediate_representation"}, {"score": 0.004446349752828045, "phrase": "conventional_imperative_programs"}, {"score": 0.004024863549087511, "phrase": "existing_lp_analyses"}, {"score": 0.003945467978172845, "phrase": "simple_lp_semantics"}, {"score": 0.003643185395780667, "phrase": "intermediate_program_representation"}, {"score": 0.0035358770665604657, "phrase": "compilation_process"}, {"score": 0.0032004205378150354, "phrase": "logic_program"}, {"score": 0.003014576010931602, "phrase": "machine_language"}, {"score": 0.0028113140998735366, "phrase": "simple_semantics"}, {"score": 0.00239657981537094, "phrase": "simple_lp_language"}, {"score": 0.0021049977753042253, "phrase": "convenient_program_representation"}], "paper_keywords": ["compilers", " control flow graphs", " intermediate representation", " program analysis and transformation", " SSA"], "paper_abstract": "Many recent analyses for conventional imperative programs begin by transforming programs into logic programs, capitalising on existing LP analyses and simple LP semantics. We propose using logic programs as an intermediate program representation throughout the compilation process. With restrictions ensuring determinism and single-modedness, a logic program can easily be transformed to machine language or other low-level language, while maintaining the simple semantics that makes it suitable as a language for program analysis and transformation. We present a simple LP language that enforces determinism and single-modedness, and show that it makes a convenient program representation for analysis and transformation.", "paper_title": "Horn clauses as an intermediate representation for program analysis and transformation", "paper_id": "WOS:000367692200009"}