{"auto_keywords": [{"score": 0.02964215870539032, "phrase": "prolog"}, {"score": 0.015719487915324758, "phrase": "prolog_programs"}, {"score": 0.008172357280343002, "phrase": "vipress"}, {"score": 0.0045709675813472884, "phrase": "established_technique"}, {"score": 0.004339293854115301, "phrase": "programming_community"}, {"score": 0.004119313626110943, "phrase": "software_readability"}, {"score": 0.0035855066449812273, "phrase": "logic_programming"}, {"score": 0.0027159094186967247, "phrase": "intended_and_operational_semantics"}, {"score": 0.0022305310659333864, "phrase": "large_prolog_legacy_system"}, {"score": 0.0021668575137633317, "phrase": "main_conclusion"}], "paper_keywords": ["refactoring", " software engineering", " program transformation", " programming environments", " tools"], "paper_abstract": "Refactoring is an established technique from the object-oriented (00) programming community to restructure code: it aims at improving software readability, maintainability, and extensibility. Although refactoring is not tied to the OO-paradigm in particular, its ideas have not been applied to logic programming until now. This paper applies the ideas of refactoring to Prolog programs. A catalogue is presented listing refactorings classified according to scope. Some of the refactorings have been adapted from the 00-paradigm, while others have been specifically designed for Prolog. The discrepancy between intended and operational semantics in Prolog is also addressed by some of the refactorings. In addition, ViPReSS, a semi-automatic refactoring browser, is discussed and the experience with applying ViPReSS to a large Prolog legacy system is reported. The main conclusion is that refactoring is both a viable technique in Prolog and a rather desirable one.", "paper_title": "Improving prolog programs: Refactoring for prolog", "paper_id": "WOS:000254430200003"}