{"auto_keywords": [{"score": 0.036244000758337475, "phrase": "ncs."}, {"score": 0.033732127079345045, "phrase": "rps_fb"}, {"score": 0.03036096497709556, "phrase": "code_reconfiguration"}, {"score": 0.00481495049065317, "phrase": "model-driven_development_of_reconfigurable_protocol_stack"}, {"score": 0.004760394308239882, "phrase": "networked_control_systems"}, {"score": 0.004706453355638515, "phrase": "innetworked_control_systems"}, {"score": 0.004548253531664032, "phrase": "performance_degradation"}, {"score": 0.004445739135694758, "phrase": "heterogeneous_and_dynamic_environment"}, {"score": 0.004296264970612285, "phrase": "reconfigurable_protocol_stacks"}, {"score": 0.003944112858235306, "phrase": "model-driven_development"}, {"score": 0.003725470458263889, "phrase": "novel_rps_function_block"}, {"score": 0.003559284776569813, "phrase": "communication_behavior"}, {"score": 0.0034004869983267085, "phrase": "existing_communication_fbs"}, {"score": 0.0033048445033866795, "phrase": "parameter_reconfiguration"}, {"score": 0.0032302647179383915, "phrase": "scheduling_table"}, {"score": 0.003068537223324389, "phrase": "communication_layer_function"}, {"score": 0.0030164423559955896, "phrase": "environment_and_system_variations"}, {"score": 0.0028328599839713866, "phrase": "java_algorithms"}, {"score": 0.0027689017918347755, "phrase": "different_application_requirements"}, {"score": 0.002690975370565776, "phrase": "java_virtual_machine"}, {"score": 0.0026604207233593973, "phrase": "different_platforms"}, {"score": 0.0025127604406208668, "phrase": "class_file"}, {"score": 0.0024700776739384977, "phrase": "specified_protocol"}, {"score": 0.002373276186210053, "phrase": "embedded_platform"}, {"score": 0.0021413855297794946, "phrase": "proposed_reconfiguration_method"}, {"score": 0.0021049977753042253, "phrase": "stable_and_predictable_behavior"}], "paper_keywords": ["IEC61499", " model-driven development", " networked control system (NCS)", " protocol stack", " reconfiguration"], "paper_abstract": "Innetworked control systems (NCS), the performance degradation introduced by the heterogeneous and dynamic environment has intensified the need for reconfigurable protocol stacks (RPS). In this paper, an IEC61499-based method is proposed for the model-driven development of RPS. The method is enabled by defining a novel RPS function block (FB), which unifies the communication behavior and interface of nodes in NCS. Beyond existing communication FBs in IEC61499, the parameter reconfiguration of routing and scheduling table in RPS FB is highlighted as the core of communication layer function to adapt environment and system variations. Furthermore, the method allows for the code reconfiguration on Java algorithms in RPS FB under different application requirements. Through porting the Java virtual machine on different platforms, the code reconfiguration is implemented by reloading the. class file for a specified protocol FB. A case study on the embedded platform, such as DSP/BIOS and ARM/Linux, is conducted to demonstrate the effectiveness and feasibility of the proposed reconfiguration method for maintaining stable and predictable behavior in NCS.", "paper_title": "Model-Driven Development of Reconfigurable Protocol Stack for Networked Control Systems", "paper_id": "WOS:000312885400025"}