{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "rule-based_systems"}, {"score": 0.004750527930368202, "phrase": "dna_computation"}, {"score": 0.004582897918101983, "phrase": "structural_errors"}, {"score": 0.0037608593980593035, "phrase": "rule_set_conclusion"}, {"score": 0.0037104876694493815, "phrase": "unreachable_goals"}, {"score": 0.003406713877432236, "phrase": "new_dna-based_computing_algorithm"}, {"score": 0.0033459905006404207, "phrase": "adleman's_dna_operations"}, {"score": 0.0031277316566463978, "phrase": "molecular_solution"}, {"score": 0.0028458096625791625, "phrase": "individual_rules"}, {"score": 0.0028076592725295646, "phrase": "relatively_short_dna_strands"}, {"score": 0.0027452053065200152, "phrase": "possible_rule_paths"}, {"score": 0.002708399936381754, "phrase": "directed_joining"}, {"score": 0.0026481480455339055, "phrase": "longer_strands"}, {"score": 0.00257760787870709, "phrase": "verification_algorithm"}, {"score": 0.0024641814990854463, "phrase": "proposed_dna_computation_algorithm"}, {"score": 0.002366361492754389, "phrase": "operational_time_complexity"}, {"score": 0.0022419349154472806, "phrase": "fact_clauses"}, {"score": 0.0022118619998034742, "phrase": "rule_base"}, {"score": 0.0021049977753042253, "phrase": "longest_inference_chain"}], "paper_keywords": ["molecular verification of rule-based systems", " based on DNA computation"], "paper_abstract": "Various graphic techniques have been developed to analyze structural errors in rule-based systems that utilize inference (propositional) logic rules. The four typical errors in rule-based systems are 1) redundancy ( numerous rule sets resulting in the same conclusion), 2) circularity ( a rule leading back to itself), 3) incompleteness ( dead ends or a rule set conclusion leading to unreachable goals), and 4) inconsistency ( rules conflicting with each other). This study presents a new DNA-based computing algorithm mainly based on Adleman's DNA operations. It can be used to detect such errors. There are three phases to this molecular solution: rule-to-DNA transformation design, solution space generation, and rule verification. We first encode individual rules by using relatively short DNA strands and then generate all possible rule paths by the directed joining of such short strands to form longer strands. We then conduct the verification algorithm to detect errors. The potential of applying this proposed DNA computation algorithm to rule verification is promising, given the operational time complexity of O(n*q), in which n denotes the number of fact clauses in the rule base, and q is the number of rules with the longest inference chain.", "paper_title": "Molecular verification of rule-based systems based on DNA computation", "paper_id": "WOS:000256017300008"}