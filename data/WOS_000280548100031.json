{"auto_keywords": [{"score": 0.048564928403357514, "phrase": "krash"}, {"score": 0.004556901872357751, "phrase": "reproducible_generation"}, {"score": 0.004515252649226697, "phrase": "system-level_cpu_load"}, {"score": 0.004332471656145115, "phrase": "shared_memory_machines"}, {"score": 0.004273196830970426, "phrase": "multiple_cpu_cores"}, {"score": 0.003970439654470374, "phrase": "parallel_application_developers"}, {"score": 0.0038271712887391015, "phrase": "partially_loaded_machine"}, {"score": 0.003757480190200645, "phrase": "observed_load"}, {"score": 0.0034911335714333507, "phrase": "cpu_load_generation"}, {"score": 0.003349670229755675, "phrase": "resulting_load"}, {"score": 0.0031845067058084583, "phrase": "concurrent_processes"}, {"score": 0.0030414140732789186, "phrase": "simple_run"}, {"score": 0.002999749669403939, "phrase": "cpu-intensive_application"}, {"score": 0.00290473242917264, "phrase": "system_scheduling_decisions"}, {"score": 0.00286493504971388, "phrase": "main_benefit"}, {"score": 0.0023944552329463035, "phrase": "dynamic_load_profile"}, {"score": 0.0022450768409733807, "phrase": "constant_load"}, {"score": 0.002224510044064184, "phrase": "krash_result"}], "paper_keywords": ["Experimentation", " Performance", " CPU load generation", " many cores", " experimentation testbed"], "paper_abstract": "In this article we present KRASH, a tool for reproducible generation of system-level CPU load. This tool is intended for use in shared memory machines equipped with multiple CPU cores which are usually exploited concurrently by several users. The objective of KRASH is to enable parallel application developers to validate their resources use strategies on a partially loaded machine by replaying an observed load in concurrence with their application. To reach this objective, we present a method for CPU load generation which behaves as realistically as possible: the resulting load is similar to the load that would be produced by concurrent processes run by other users. Nevertheless, contrary to a simple run of a CPU-intensive application, KRASH is not sensitive to system scheduling decisions. The main benefit brought by KRASH is this reproducibility: no matter how many processes are present in the system the load generated by our tool strictly respects a given load profile. To our knowledge, KRASH is the only tool that implements the generation of a dynamic load profile (a load varying with time). When used to generate a constant load, KRASH result is among the most realistic ones. Furthermore, KRASH provides more flexibility than other tools.", "paper_title": "KRASH: Reproducible CPU Load Generation on Many Cores Machines", "paper_id": "WOS:000280548100031"}