{"auto_keywords": [{"score": 0.02913332783498095, "phrase": "dynamic_types"}, {"score": 0.004533142516832776, "phrase": "excellent_context_abstraction"}, {"score": 0.004438439373358016, "phrase": "object-oriented_languages"}, {"score": 0.004216566615939546, "phrase": "context_depth"}, {"score": 0.004078923069461593, "phrase": "original_definition"}, {"score": 0.004042166795461166, "phrase": "object-sensitive_analysis"}, {"score": 0.0038516336597530614, "phrase": "context_elements"}, {"score": 0.003692271726952282, "phrase": "clean_model"}, {"score": 0.0036589868713755185, "phrase": "analysis_design_space"}, {"score": 0.00360417515510547, "phrase": "formal_and_informal_understanding"}, {"score": 0.0035181731203867456, "phrase": "good_object-sensitive_analyses"}, {"score": 0.003352256019007896, "phrase": "sub-optimal_choice"}, {"score": 0.0032920678776655783, "phrase": "severe_detriment"}, {"score": 0.0032037993117317175, "phrase": "\"full-object-sensitive\"_analysis"}, {"score": 0.003117890043128058, "phrase": "often_performance"}, {"score": 0.003080449000295983, "phrase": "exact_same_context_depth"}, {"score": 0.0029978373992477028, "phrase": "explicit_approximation"}, {"score": 0.002952900365829518, "phrase": "high_context_quality"}, {"score": 0.0029351141718104725, "phrase": "substantially_reduced_cost"}, {"score": 0.002830617996609902, "phrase": "unconventional_use"}, {"score": 0.0027713837460773974, "phrase": "context_types"}, {"score": 0.002561992219031343, "phrase": "context_choice"}, {"score": 0.0024336917123957387, "phrase": "major_impact"}, {"score": 0.0022429664506287577, "phrase": "analogous_object-sensitive_analysis"}, {"score": 0.002124176532827015, "phrase": "best_object-sensitive_analysis"}], "paper_keywords": ["Algorithms", " Languages", " Performance"], "paper_abstract": "Object-sensitivity has emerged as an excellent context abstraction for points-to analysis in object-oriented languages. Despite its practical success, however, object-sensitivity is poorly understood. For instance, for a context depth of 2 or higher, past scalable implementations deviate significantly from the original definition of an object-sensitive analysis. The reason is that the analysis has many degrees of freedom, relating to which context elements are picked at every method call and object creation. We offer a clean model for the analysis design space, and discuss a formal and informal understanding of object-sensitivity and of how to create good object-sensitive analyses. The results are surprising in their extent. We find that past implementations have made a sub-optimal choice of contexts, to the severe detriment of precision and performance. We define a \"full-object-sensitive\" analysis that results in significantly higher precision, and often performance, for the exact same context depth. We also introduce \"type-sensitivity\" as an explicit approximation of object-sensitivity that preserves high context quality at substantially reduced cost. A type-sensitive points-to analysis makes an unconventional use of types as context: the context types are not dynamic types of objects involved in the analysis, but instead upper bounds on the dynamic types of their allocator objects. Our results expose the influence of context choice on the quality of points-to analysis and demonstrate type-sensitivity to be an idea with major impact: It decisively advances the state-of-the-art with a spectrum of analyses that simultaneously enjoy speed (several times faster than an analogous object-sensitive analysis), scalability (comparable to analyses with much less context-sensitivity), and precision (comparable to the best object-sensitive analysis with the same context depth).", "paper_title": "Pick Your Contexts Well: Understanding Object-Sensitivity The Making of a Precise and Scalable Pointer Analysis", "paper_id": "WOS:000286472700003"}