{"auto_keywords": [{"score": 0.04706226145554155, "phrase": "matching_statistics"}, {"score": 0.046232683509134974, "phrase": "suffix_arrays"}, {"score": 0.0046394362688524475, "phrase": "new_algorithms"}, {"score": 0.003888905257972882, "phrase": "new_approach"}, {"score": 0.003543804852018315, "phrase": "common_substrings"}, {"score": 0.0030825404960282713, "phrase": "seven_different_methods"}, {"score": 0.002997735656669146, "phrase": "suffix_trees"}, {"score": 0.0028087949095629955, "phrase": "suffix_array_algorithms"}, {"score": 0.002731500545019039, "phrase": "inferior_asymptotic_worst_case"}, {"score": 0.002397923568994474, "phrase": "running_time_complexity"}, {"score": 0.0022889103976458437, "phrase": "good_performance"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["algorithms and data structures", " pattern matching", " Common Substring Problem", " matching statistics", " suffix array", " suffix tree"], "paper_abstract": "We present new algorithms for computing matching statistics with suffix arrays. We show how the Multiple Common Substring Problem can be solved efficiently in practice with a new approach using matching statistics. This problem consists of finding the common substrings of a set of strings. For the computation of matching statistics we compare seven different methods based on suffix trees and suffix arrays. Most of the suffix array algorithms have an inferior asymptotic worst case running time but a very low memory overhead and small constants in the running time complexity. Our experiments show a good performance in practice. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "Matching statistics: efficient computation and a new practical algorithm for the Multiple Common Substring Problem", "paper_id": "WOS:000235914600004"}