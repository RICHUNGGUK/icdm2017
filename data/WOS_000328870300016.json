{"auto_keywords": [{"score": 0.03206340250984373, "phrase": "rmi"}, {"score": 0.02868389767343151, "phrase": "remote_invocation"}, {"score": 0.00481495049065317, "phrase": "real-time_java_remote_invocations"}, {"score": 0.004618893461411858, "phrase": "increasing_cost"}, {"score": 0.004571133708117498, "phrase": "next_generation_real-time_applications"}, {"score": 0.004430784015995566, "phrase": "high-level_general-purpose_programming_languages"}, {"score": 0.004384960761826366, "phrase": "e.g._java"}, {"score": 0.004317109072311102, "phrase": "real-time_support"}, {"score": 0.0040771431404398855, "phrase": "distributed_real-time_java_technology"}, {"score": 0.0038907236419588255, "phrase": "centralized_systems"}, {"score": 0.0038304902197108643, "phrase": "real-time_java_virtual_machines"}, {"score": 0.003693533648584145, "phrase": "traditional_remote_invocation_communication_paradigms"}, {"score": 0.003580032420161922, "phrase": "operative_solution"}, {"score": 0.0034519997658752598, "phrase": "final_products"}, {"score": 0.0033285306462537884, "phrase": "paper_studies"}, {"score": 0.0031928040608991543, "phrase": "leading_effort"}, {"score": 0.0031597433845085092, "phrase": "real-time_java"}, {"score": 0.0030625949549620475, "phrase": "java's_remote_method_invocation"}, {"score": 0.0029376803941247084, "phrase": "real-time_remote_invocations"}, {"score": 0.002847339938387273, "phrase": "specific_approach"}, {"score": 0.0027454383581457555, "phrase": "predictable_mechanism"}, {"score": 0.002385326947545194, "phrase": "software_prototype_help"}, {"score": 0.0023361440016375972, "phrase": "key_entities"}, {"score": 0.0022407927161620855, "phrase": "remote_invocation_influence"}, {"score": 0.002206045784326466, "phrase": "end-to-end_response_time"}, {"score": 0.002171836484200008, "phrase": "distributed_real-time_java_application"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Real-time Java", " Real-time middleware", " RT-RMI", " RTSJ", " DRTSJ"], "paper_abstract": "A way to deal with the increasing cost of next generation real-time applications is to extend middleware and high-level general-purpose programming languages, e.g. Java, with real-time support that reduces development, deployment, and maintenance costs. In the particular path towards a distributed real-time Java technology, some important steps have been given into centralized systems to produce real-time Java virtual machines. However, the integration with traditional remote invocation communication paradigms is far from producing an operative solution that may be used to develop final products. In this context, the paper studies how The Real-Time Specification for Java (RTSJ), the leading effort in real-time Java, may be integrated with Java's Remote Method Invocation (RMI) in order to support real-time remote invocations. The article details a specific approach towards the problem of producing a predictable mechanism for the remote invocation - the core communication mechanism of RMI - via having control on the policies used in the remote invocation. Results obtained in a software prototype help understand how the key entities defined to control the performance of the remote invocation influence in the end-to-end response time of a distributed real-time Java application. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Resource management policies for real-time Java remote invocations", "paper_id": "WOS:000328870300016"}