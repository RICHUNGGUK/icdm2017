{"auto_keywords": [{"score": 0.05007844442530219, "phrase": "top-k_queries"}, {"score": 0.04953787572055814, "phrase": "nra"}, {"score": 0.03528581297726488, "phrase": "nra_algorithm"}, {"score": 0.004706699397060569, "phrase": "efficient_processing"}, {"score": 0.004618342952383313, "phrase": "increasing_attention"}, {"score": 0.0044634416051962545, "phrase": "lower_access_cost"}, {"score": 0.004412965940679449, "phrase": "crucial_concern"}, {"score": 0.004363058588000252, "phrase": "top-k_query_processing"}, {"score": 0.004248782702870078, "phrase": "top-k_query"}, {"score": 0.0038644521996539466, "phrase": "data_source"}, {"score": 0.0038352452380298464, "phrase": "fagin_et_al"}, {"score": 0.003383884759373793, "phrase": "key_observation"}, {"score": 0.002951673109860487, "phrase": "unnecessary_access_cost"}, {"score": 0.002874257080906824, "phrase": "snra_algorithm"}, {"score": 0.0028309318332306703, "phrase": "runtime_cost"}, {"score": 0.002788257824525862, "phrase": "snra-opt_algorithm"}, {"score": 0.0026438880533289893, "phrase": "snra"}, {"score": 0.002613935123129054, "phrase": "snra-opt"}, {"score": 0.002574523719093119, "phrase": "optimal_algorithms"}, {"score": 0.0025165151708122957, "phrase": "hsnra"}, {"score": 0.002488001663771768, "phrase": "hsnra-opt"}, {"score": 0.0024691719264774165, "phrase": "extensive_experimental_results"}, {"score": 0.0024227171881502636, "phrase": "significantly_fewer_sorted_accesses"}, {"score": 0.002288519595829552, "phrase": "proposed_snra-opt"}, {"score": 0.0021291312714904957, "phrase": "parameter_selection_problem"}, {"score": 0.0021049977753042253, "phrase": "snra_algorithms"}], "paper_keywords": ["NRA", " Top-k", " Optimization", " SNRA"], "paper_abstract": "Efficient processing of top-k queries has drawn increasing attention from both industry and academia due to its varied applications. Lower access cost is a crucial concern for a top-k query processing. Typically, when answering a top-k query, there exist two types of accesses: sorted access and random access. In some scenarios, the latter is not supported by the data source. Fagin et al. proposed the No Random Access (NRA) algorithm (Fagin et al, J Comput Syst Sci 66:614-656, 2003) for this situation. In this paper, we motivate our work by a key observation of the NRA algorithm: the number of accesses could be further reduced by selectively (instead of in parallel) performing sorted accesses to different lists of the dataset. Based on this insight, we propose a Selective NRA (SNRA) algorithm aiming to cut down the unnecessary access cost. Later, we optimize the SNRA algorithm in terms of runtime cost and present the SNRA-opt algorithm. Furthermore, we address the problem of instance optimality theoretically and turn SNRA (and SNRA-opt) into instance optimal algorithms, termed as Hybrid-SNRA (HSNRA) and HSNRA-opt. Extensive experimental results show that our algorithms perform significantly fewer sorted accesses than NRA (and its state-of-the-art variations). In terms of runtime cost, the proposed SNRA-opt and HSNRA-opt algorithms are two orders of magnitude faster than the NRA algorithm. In addition, we discuss the parameter selection problem of the SNRA algorithms, both theoretically and experimentally.", "paper_title": "Efficient processing of top-k queries: selective NRA algorithms", "paper_id": "WOS:000311029800006"}