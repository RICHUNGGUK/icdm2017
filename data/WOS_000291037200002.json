{"auto_keywords": [{"score": 0.039201688428618035, "phrase": "present_paper"}, {"score": 0.03879588922460013, "phrase": "minimal_perturbation_problem"}, {"score": 0.00481495049065317, "phrase": "minimal_perturbation"}, {"score": 0.0047804843375940835, "phrase": "dynamic_csps"}, {"score": 0.0046118021635786315, "phrase": "scheduling_problem"}, {"score": 0.004529696178827392, "phrase": "small_changes"}, {"score": 0.004401342842183475, "phrase": "original_problem"}, {"score": 0.004307459965946991, "phrase": "new_problem"}, {"score": 0.004096082254543022, "phrase": "original_schedule"}, {"score": 0.0039942998891989955, "phrase": "university_course_timetable"}, {"score": 0.003965684670332574, "phrase": "flight_scheduling"}, {"score": 0.0038119123317396954, "phrase": "minimal_changes"}, {"score": 0.0035601676907962626, "phrase": "constraint_satisfaction_problem"}, {"score": 0.0031277316566463978, "phrase": "changed_problem"}, {"score": 0.0030171910207671205, "phrase": "minimal_perturbations"}, {"score": 0.0029740732099993706, "phrase": "previous_solution"}, {"score": 0.002952745241052452, "phrase": "previous_studies"}, {"score": 0.0029210388852074208, "phrase": "formal_model"}, {"score": 0.002538470301402269, "phrase": "based_algorithms"}, {"score": 0.0024664008536483444, "phrase": "hebrard"}, {"score": 0.002370625627299064, "phrase": "new_approach"}, {"score": 0.0023116191163488824, "phrase": "proposed_method"}, {"score": 0.0022950308685133224, "phrase": "constraint_optimization"}, {"score": 0.0022785613865764923, "phrase": "constraint_satisfaction_techniques"}, {"score": 0.0022138542785562444, "phrase": "proposed_algorithm"}, {"score": 0.002197966048531954, "phrase": "former_algorithms"}, {"score": 0.002143247921132179, "phrase": "random_csps"}, {"score": 0.0021202154023229123, "phrase": "random_instances"}], "paper_keywords": ["Dynamic Constraint Satisfaction Problems (CSPs)"], "paper_abstract": "It is often the case that after a scheduling problem has been solved some small changes occur that make the solution of the original problem not valid. Solving the new problem from scratch can result in a schedule that is very different from the original schedule. In applications such as a university course timetable or flight scheduling, one would be interested in a solution that requires minimal changes for the users. The present paper considers the minimal perturbation problem. It is motivated by scenarios in which a Constraint Satisfaction Problem (CSP) is subject to changes. In particular, the case where some of the constraints are changed after a solution was obtained. The goal is to find a solution to the changed problem that is as similar as possible (e.g. includes minimal perturbations) to the previous solution. Previous studies proposed a formal model for this problem (Bartak et al. 2004), a best first search algorithm (Ross et al. 2000), complexity bounds (Hebrard et al. 2005), and branch and bound based algorithms (Bartak et al. 2004; Hebrard et al. 2005). The present paper proposes a new approach for solving the minimal perturbation problem. The proposed method interleaves constraint optimization and constraint satisfaction techniques. Our experimental results demonstrate the advantage of the proposed algorithm over former algorithms. Experiments were performed both on random CSPs and on random instances of the Meeting Scheduling Problem.", "paper_title": "Hybrid search for minimal perturbation in Dynamic CSPs", "paper_id": "WOS:000291037200002"}