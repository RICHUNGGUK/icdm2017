{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "live_migration"}, {"score": 0.017785201707628574, "phrase": "pre-copy_speed"}, {"score": 0.004774937143916685, "phrase": "virtual_machine"}, {"score": 0.004735254735115024, "phrase": "cpu_scheduling"}, {"score": 0.004522796947899013, "phrase": "migrated_vms"}, {"score": 0.004410938507689426, "phrase": "generated_run-time_memory_state_files"}, {"score": 0.004283913685201902, "phrase": "migration_destination_host"}, {"score": 0.004007083686875716, "phrase": "long_time"}, {"score": 0.00390792986752692, "phrase": "large_amount"}, {"score": 0.003763763153640936, "phrase": "extreme_cases"}, {"score": 0.0037324526526073404, "phrase": "dirty_memory_generation_rate"}, {"score": 0.003418958653159371, "phrase": "optimization_scheme"}, {"score": 0.003265365666305185, "phrase": "vcpu_working_frequency"}, {"score": 0.003066945490483524, "phrase": "remaining_dirty_memory"}, {"score": 0.0030160945545795468, "phrase": "desired_small_amount"}, {"score": 0.002978508766388785, "phrase": "vm_downtime"}, {"score": 0.0027857990883821504, "phrase": "migrated_application"}, {"score": 0.002751075263422475, "phrase": "high_memory_writing_speed"}, {"score": 0.0026164433143193015, "phrase": "low_network_bandwidth"}, {"score": 0.0025838249689625775, "phrase": "migration_parties"}, {"score": 0.002530359917257626, "phrase": "migration_liveness"}, {"score": 0.002477998427152547, "phrase": "application_performance"}, {"score": 0.0022886952510350416, "phrase": "original_live_migration"}, {"score": 0.00223196703759329, "phrase": "optimized_scheme"}, {"score": 0.0021857667493036786, "phrase": "application_downtime"}, {"score": 0.002158505888557746, "phrase": "acceptable_overhead"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Live virtual machine migration", " Pre-copy algorithm", " CPU scheduling", " Dirty rate"], "paper_abstract": "Live migration has been proposed to reduce the downtime for migrated VMs by pre-copying the generated run-time memory state files from the original host to the migration destination host. However, if the rate for such a dirty memory generation is high, it may take a long time to accomplish live migration because a large amount of data needs to be transferred. In extreme cases when dirty memory generation rate is faster than pre-copy speed, live migration will fail. In this work we address the problem by designing an optimization scheme for live migration, under which according to pre-copy speed, the VCPU working frequency may be reduced so that at a certain phase of the pre-copy the remaining dirty memory can reach a desired small amount. The VM downtime during the migration can be limited. The scheme works for the scenario where the migrated application has a high memory writing speed, or the pre-copy speed is slow, e.g., due to low network bandwidth between the migration parties. The method improves migration liveness at the cost of application performance, and works for those applications for which interruption causes much more serious problems than quality deterioration. Compared to the original live migration, our experiments show that the optimized scheme can reduce up to 88% of application downtime with an acceptable overhead. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Optimizing the live migration of virtual machine by CPU scheduling", "paper_id": "WOS:000291846700007"}