{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "stateflow_charts"}, {"score": 0.004750178261675602, "phrase": "simulink's_stateflow"}, {"score": 0.004654642380553263, "phrase": "graphical_notation"}, {"score": 0.004262273304740847, "phrase": "safety-critical_systems"}, {"score": 0.004010102190292041, "phrase": "major_concern"}, {"score": 0.003929391999210588, "phrase": "previous_work"}, {"score": 0.0036968421974412522, "phrase": "formal_models"}, {"score": 0.0034079696245884073, "phrase": "refinement_strategy"}, {"score": 0.0033167679667625667, "phrase": "automated_verification"}, {"score": 0.002955533639862811, "phrase": "architectural_patterns"}, {"score": 0.0028764048059439205, "phrase": "stateflow_code_generator"}, {"score": 0.0027804579695873827, "phrase": "detailed_procedure"}, {"score": 0.0027060037347363987, "phrase": "refinement_laws"}, {"score": 0.0024607296642187824, "phrase": "law_application"}, {"score": 0.002252880693912436, "phrase": "expected_architectural_pattern"}, {"score": 0.002148315508445588, "phrase": "refinement_verification"}, {"score": 0.0021049977753042253, "phrase": "high_level"}], "paper_keywords": ["Simulink", " Z", " CSP", " Tactics of refinement"], "paper_abstract": "Simulink's Stateflow is a graphical notation widely adopted in industry. Since it is frequently used to model safety-critical systems, correctness of implementations of Stateflow charts is a major concern. In previous work, we have shown how we can generate formal models for refinement of Stateflow charts automatically. Here, we define a refinement strategy that supports the automated verification of implementations with respect to these models. We consider the verification of implementations that follow architectural patterns used in the Stateflow code generator. We present a detailed procedure for application of refinement laws. If the implementation is correct, the procedure succeeds. If a law application fails, the implementation is either incorrect or does not use the expected architectural pattern. The very low proof burden associated with the refinement verification makes a high level of automation possible.", "paper_title": "Refinement-based verification of implementations of Stateflow charts", "paper_id": "WOS:000332688500008"}