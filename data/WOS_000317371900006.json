{"auto_keywords": [{"score": 0.03256554193119517, "phrase": "llnl."}, {"score": 0.00481495049065317, "phrase": "heavyweight_debugging_tools"}, {"score": 0.004676345706416371, "phrase": "debugging_execution"}, {"score": 0.004637478829869904, "phrase": "single_processors"}, {"score": 0.004598933498016774, "phrase": "multicore_systems"}, {"score": 0.00389164348807591, "phrase": "novel_runtime_platform"}, {"score": 0.0037480753312398754, "phrase": "identical_execution"}, {"score": 0.0036097844103129043, "phrase": "heavyweight_debugging_approaches"}, {"score": 0.0034332736827447654, "phrase": "serialized_case"}, {"score": 0.0032112354575523317, "phrase": "hardware-based_nondeterministic_behavior"}, {"score": 0.0031579997262619758, "phrase": "case_study"}, {"score": 0.0031056437850836326, "phrase": "recent_processor_bug"}, {"score": 0.0030541531847589833, "phrase": "total_overhead"}, {"score": 0.0029909851863915283, "phrase": "individual_tool"}, {"score": 0.0027974705482714884, "phrase": "nas_parallel_benchmarks"}, {"score": 0.0027741761880779535, "phrase": "hardware_fault_isolation"}, {"score": 0.002627407106087633, "phrase": "near-linear_reduction"}, {"score": 0.00246765655376112, "phrase": "intel's_pin_platform"}, {"score": 0.002426717832834137, "phrase": "overhead_reduction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["MPI", " Dynamic binary instrumentation", " Heavyweight tools"], "paper_abstract": "Idioms created for debugging execution on single processors and multicore systems have been successfully scaled to thousands of processors, but there is little hope that this class of techniques can continue to be scaled out to tens of millions of cores. In order to allow development of more scalable debugging idioms we introduce mpiecho, a novel runtime platform that enables cloning of MPI ranks. Given identical execution on each clone, we then show how heavyweight debugging approaches can be parallelized, reducing their overhead to a fraction of the serialized case. We also show how this platform can be useful in isolating the source of hardware-based nondeterministic behavior and provide a case study based on a recent processor bug at LLNL. While total overhead will depend on the individual tool, we show that the platform itself contributes little: 512x tool parallelization incurs at worst 2x overhead across the NAS Parallel benchmarks, hardware fault isolation contributes at worst an additional 44% overhead. Finally, we show how mpiecho can lead to near-linear reduction in overhead when combined with maid, a heavyweight memory tracking tool provided with Intel's pin platform. We demonstrate overhead reduction from 1466% to 53% and from 740% to 14% for cg (class D, 64 processes) and lu (class D, 64 processes), respectively, using only an additional 64 cores. Published by Elsevier B.V.", "paper_title": "Parallelizing heavyweight debugging tools with mpiecho", "paper_id": "WOS:000317371900006"}