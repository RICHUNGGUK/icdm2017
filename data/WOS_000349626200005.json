{"auto_keywords": [{"score": 0.04153356759103502, "phrase": "dsp"}, {"score": 0.009778180679990402, "phrase": "positive_hypergraph"}, {"score": 0.009719038950786097, "phrase": "dense_subgraphs"}, {"score": 0.009008991865313952, "phrase": "conditional_core_subgraph"}, {"score": 0.008027005183406008, "phrase": "divide-and-conquer_algorithm"}, {"score": 0.00481495049065317, "phrase": "positive_hypergraphs"}, {"score": 0.004684633969993391, "phrase": "novel_partition_framework"}, {"score": 0.004210374961392525, "phrase": "positive_weights"}, {"score": 0.00410886951639144, "phrase": "core_subgraph"}, {"score": 0.00404667000994945, "phrase": "disjoint_partition"}, {"score": 0.003830416706816913, "phrase": "ordered_list"}, {"score": 0.0037839460525667485, "phrase": "decreasing_densities"}, {"score": 0.0037266467875257136, "phrase": "underlying_clusters"}, {"score": 0.0033695566513755096, "phrase": "nonparametric_partition"}, {"score": 0.0033185114695278226, "phrase": "meaningful_clusters"}, {"score": 0.003288255061396602, "phrase": "bottom-up_way"}, {"score": 0.003218721776850253, "phrase": "exact_and_efficient_solution"}, {"score": 0.003121923422694974, "phrase": "min-partition_evolution_algorithm"}, {"score": 0.002963980409835403, "phrase": "parallel_processing"}, {"score": 0.0029012842615708215, "phrase": "unified_partition_framework"}, {"score": 0.0028748209350107743, "phrase": "broad_range"}, {"score": 0.002771352849127134, "phrase": "densest_k-subgraph_problem"}, {"score": 0.002721389815110392, "phrase": "np"}, {"score": 0.002663449329156526, "phrase": "graph_theory"}, {"score": 0.0026070935979443646, "phrase": "precise_solutions"}, {"score": 0.0025912128049184638, "phrase": "dks"}, {"score": 0.002544141963686395, "phrase": "graph-dependent_set"}, {"score": 0.002437603221807513, "phrase": "strong_result"}, {"score": 0.0023283888577500895, "phrase": "sparse_graphs"}, {"score": 0.002265217884758413, "phrase": "critical_k-set"}, {"score": 0.0021637103202214398, "phrase": "proposed_partition_framework"}, {"score": 0.0021243898166922177, "phrase": "experimental_results"}], "paper_keywords": ["Graph partition", " dense subgraph", " densest k-subgraph", " mode seeking", " image matching"], "paper_abstract": "In this paper, we present a novel partition framework, called dense subgraph partition (DSP), to automatically, precisely and efficiently decompose a positive hypergraph into dense subgraphs. A positive hypergraph is a graph or hypergraph whose edges, except self-loops, have positive weights. We first define the concepts of core subgraph, conditional core subgraph, and disjoint partition of a conditional core subgraph, then define DSP based on them. The result of DSP is an ordered list of dense subgraphs with decreasing densities, which uncovers all underlying clusters, as well as outliers. A divide-and-conquer algorithm, called min-partition evolution, is proposed to efficiently compute the partition. DSP has many appealing properties. First, it is a nonparametric partition and it reveals all meaningful clusters in a bottom-up way. Second, it has an exact and efficient solution, called min-partition evolution algorithm. The min-partition evolution algorithm is a divide-and-conquer algorithm, thus time-efficient and memory-friendly, and suitable for parallel processing. Third, it is a unified partition framework for a broad range of graphs and hypergraphs. We also establish its relationship with the densest k-subgraph problem (DkS), an NP-hard but fundamental problem in graph theory, and prove that DSP gives precise solutions to DkS for all k in a graph-dependent set, called critical k-set. To our best knowledge, this is a strong result which has not been reported before. Moreover, as our experimental results show, for sparse graphs, especially web graphs, the size of critical k-set is close to the number of vertices in the graph. We test the proposed partition framework on various tasks, and the experimental results clearly illustrate its advantages.", "paper_title": "Dense Subgraph Partition of Positive Hypergraphs", "paper_id": "WOS:000349626200005"}