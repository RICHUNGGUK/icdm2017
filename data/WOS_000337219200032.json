{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bipartite_graph_matching"}, {"score": 0.004643594260262632, "phrase": "new_algorithm"}, {"score": 0.0045108906244892165, "phrase": "graph_edit_distance"}, {"score": 0.004413846562278824, "phrase": "sub-optimal_way"}, {"score": 0.004225950334493496, "phrase": "distance_value"}, {"score": 0.0037357362372975327, "phrase": "reduced_run_time"}, {"score": 0.0034995881411519925, "phrase": "edit_costs"}, {"score": 0.0031614748814351823, "phrase": "distance_function"}, {"score": 0.0024519545383399773, "phrase": "empirical_validation"}, {"score": 0.0022148335975074904, "phrase": "obtained_speed"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph Edit Distance", " Bipartite graph matching", " Munkres algorithm"], "paper_abstract": "We present a new algorithm to compute the Graph Edit Distance in a sub-optimal way. We demonstrate that the distance value is exactly the same than the one obtained by the algorithm called Bipartite but with a reduced run time. The only restriction we impose is that the edit costs have to be defined such that the Graph Edit Distance can be really defined as a distance function, that is, the cost of insertion plus deletion of nodes (or arcs) have to be lower or equal than the cost of substitution of nodes (or arcs). Empirical validation shows that higher is the order of the graphs, higher is the obtained Speed up. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Fast computation of Bipartite graph matching", "paper_id": "WOS:000337219200032"}