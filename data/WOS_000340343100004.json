{"auto_keywords": [{"score": 0.02740019438542474, "phrase": "semantic_preservation"}, {"score": 0.02638594340725641, "phrase": "similar_contexts"}, {"score": 0.00481495049065317, "phrase": "software_refactoring"}, {"score": 0.004707810093520679, "phrase": "software_maintenance"}, {"score": 0.004558855900816642, "phrase": "software_system"}, {"score": 0.004443077867798955, "phrase": "total_cost"}, {"score": 0.004400419843791404, "phrase": "typical_software_project"}, {"score": 0.004358169586895055, "phrase": "new_functionalities"}, {"score": 0.004179703591623336, "phrase": "major_parts"}, {"score": 0.004073515217375164, "phrase": "maintenance_activities"}, {"score": 0.003931879808909078, "phrase": "design_structure"}, {"score": 0.003881601350247482, "phrase": "external_behavior"}, {"score": 0.0036868116297599255, "phrase": "code_fragments"}, {"score": 0.0035017626442279386, "phrase": "refactoring_solutions"}, {"score": 0.0032940025020351082, "phrase": "detection_step"}, {"score": 0.0032623406075681315, "phrase": "search-based_process"}, {"score": 0.003220596121589591, "phrase": "suitable_detection_rules"}, {"score": 0.0031691634837160572, "phrase": "design_defect"}, {"score": 0.0031085239972726106, "phrase": "genetic_algorithm"}, {"score": 0.0029714924513911897, "phrase": "refactoring_identification_step"}, {"score": 0.002942921364801519, "phrase": "multiobjective_search-based_approach"}, {"score": 0.002840484388249037, "phrase": "optimal_sequence"}, {"score": 0.002822245166926626, "phrase": "refactoring_operations"}, {"score": 0.002786116343849835, "phrase": "software_quality"}, {"score": 0.0027327860743648165, "phrase": "detected_defects"}, {"score": 0.002529454236169383, "phrase": "good_refactorings"}, {"score": 0.002371589020876307, "phrase": "suggested_refactoring_solutions"}, {"score": 0.0022889932805175406, "phrase": "refactored_program"}, {"score": 0.0022451572368358476, "phrase": "original_one"}, {"score": 0.0021880094145128935, "phrase": "domain_semantics"}, {"score": 0.0021323131137170478, "phrase": "historical_code"}, {"score": 0.0021049977753042253, "phrase": "new_refactoring_solutions"}], "paper_keywords": [""], "paper_abstract": "Many studies reported that software maintenance, traditionally defined as any modification made on a software system after its delivery, consumes up to 90% of the total cost of a typical software project. Adding new functionalities, correcting bugs, and modifying the code to improve its quality are major parts of those costs. To ease these maintenance activities, one of the most used techniques is the refactoring which improves design structure while preserving the external behavior. In general, refactoring is performed through two main steps: (1) detection of code fragments corresponding to design defects that need to be improved/fixed and (2) identification of refactoring solutions to achieve this goal. Our research project targets the automation of these two refactoring steps. Concretely, we consider the detection step as a search-based process to find the suitable detection rules for each type of design defect, by means of a genetic algorithm. To guide the rule-derivation process, real examples of design defects are used. For the refactoring identification step, a multiobjective search-based approach is also used. The process aims at finding the optimal sequence of refactoring operations that improve the software quality by minimizing the number of detected defects. In addition, we explore other objectives to optimize: the effort needed to apply refactorings, semantic preservation, and the similarity with good refactorings applied in the past to similar contexts. Hence, the effort corresponds to the code modification/adaptation score needed to apply the suggested refactoring solutions. On the other hand, the semantic preservation insures that the refactored program is semantically equivalent to the original one, and that it models correctly the domain semantics. Indeed, we use knowledge from historical code changes to propose new refactoring solutions in similar contexts to improve the automation of refactoring.", "paper_title": "Multiobjective Optimization for Software Refactoring and Evolution", "paper_id": "WOS:000340343100004"}