{"auto_keywords": [{"score": 0.049188612914091503, "phrase": "design_reuse"}, {"score": 0.01159923009258581, "phrase": "communication_protocols"}, {"score": 0.011244847313925476, "phrase": "ip"}, {"score": 0.00481495049065317, "phrase": "programmable_controller_ip_interface"}, {"score": 0.004522796947899013, "phrase": "system-on-chips_increases"}, {"score": 0.004301834610818624, "phrase": "low-level_design_issues"}, {"score": 0.003819187440994939, "phrase": "design_time"}, {"score": 0.0037246656582642272, "phrase": "different_applications"}, {"score": 0.003587235362628753, "phrase": "physical_interfaces"}, {"score": 0.00347657813672945, "phrase": "global_system-level_control"}, {"score": 0.0031448288291084, "phrase": "simppl_system_model"}, {"score": 0.003028727936200845, "phrase": "ip_modules"}, {"score": 0.002953711377604328, "phrase": "computing_element"}, {"score": 0.0029170361102101865, "phrase": "ce"}, {"score": 0.0028091907694771613, "phrase": "soc_design"}, {"score": 0.002756832447586547, "phrase": "field-programmable_gate_array"}, {"score": 0.0027225112368410983, "phrase": "fpga"}, {"score": 0.002671722386856879, "phrase": "application_specific_integrated_circuit"}, {"score": 0.0025569530630374995, "phrase": "ce_abstraction"}, {"score": 0.00247799842715255, "phrase": "system-level_communication"}, {"score": 0.002431797888365548, "phrase": "application-specific_control"}, {"score": 0.002341958851390876, "phrase": "control_redesign"}, {"score": 0.002283913454238574, "phrase": "new_applications"}, {"score": 0.0022413233627905696, "phrase": "simppl_model"}, {"score": 0.0022133711375320244, "phrase": "multi-clock_domain_soc_designs"}, {"score": 0.0021049977753042253, "phrase": "intermodule_links"}], "paper_keywords": ["application-specific architectures", " application-specific integrated circuits (ASICs)", " customizable controllers", " design reuse", " field-programmable. gate arrays (FPGAs)", " Intellectual Property (IP) reuse", " system integration", " system-on-chip design"], "paper_abstract": "As the complexity of designing system-on-chips increases, so does the need to abstract low-level design issues to improve designer productivity. The reuse of previously designed Intellectual Property (IP) modules is a common form of abstraction used to reduce design time. However, different applications typically use a variety of physical interfaces, communication protocols, and global system-level control for IP modules, which complicates design reuse. In this paper, we describe the SIMPPL system model and, an abstraction for IP modules, called the computing element (CE), that facilitate the SoC design for both field-programmable gate array (FPGA) and application specific integrated circuit (ASIC) platforms. The CE abstraction decouples the datapath and system-level communication from the application-specific control to promote design reuse by localizing control redesign of IP for new applications. The SIMPPL model facilitates multi-clock domain SoC designs and expedites system integration by defining the intermodule links and communication protocols.", "paper_title": "SIMPPL: an adaptable SoC framework using a programmable controller IP interface to facilitate design reuse", "paper_id": "WOS:000246270500001"}