{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "parallel_performance_wizard"}, {"score": 0.004594951819987416, "phrase": "partitioned_global-address-space_applications"}, {"score": 0.004453874101119545, "phrase": "high-performance_parallel_programs"}, {"score": 0.004294724955301414, "phrase": "performance_analysis_tools"}, {"score": 0.003972504904621217, "phrase": "message-passing_programs"}, {"score": 0.003771185758226876, "phrase": "programming_models"}, {"score": 0.003693533648584145, "phrase": "partitioned_global_address_space"}, {"score": 0.0035245918797629804, "phrase": "upc_and_shmem._existing_tools"}, {"score": 0.0034700069041302003, "phrase": "message-passing_models"}, {"score": 0.003345895878114341, "phrase": "pgas_models"}, {"score": 0.002832559499733291, "phrase": "pgas"}, {"score": 0.002803310764628655, "phrase": "mpi"}, {"score": 0.0027169974137406148, "phrase": "new_concepts"}, {"score": 0.0026888503045081505, "phrase": "namely_the_generic-operation-type_abstraction"}, {"score": 0.002512850690695835, "phrase": "multiple_programming_models"}, {"score": 0.002422890839801611, "phrase": "ppw's_automatic_analysis"}, {"score": 0.002206045784326466, "phrase": "ppw's_overhead"}, {"score": 0.0021831803612759855, "phrase": "storage_requirements"}, {"score": 0.0021049977753042253, "phrase": "application_case_studies"}], "paper_keywords": ["Performance analysis tool", " PGAS", " UPC", " SHMEM", " GASP", " generic-operation-type abstraction"], "paper_abstract": "Given the complexity of high-performance parallel programs, developers often must rely on performance analysis tools to help them improve the performance of their applications. While many tools support analysis of message-passing programs, tool support is limited for applications written in programming models that present a partitioned global address space (PGAS) to the programmer such as UPC and SHMEM. Existing tools that support message-passing models are difficult to extend to support PGAS models due to differences between the two paradigms and the techniques used in their implementations. In this paper, we present our work on Parallel Performance Wizard (PPW), a performance analysis system for PGAS and MPI application analysis. We discuss new concepts, namely the generic-operation-type abstraction and GASP-enabled data collection, developed to facilitate support for multiple programming models and then give an overview of PPW's automatic analysis and visualization capabilities. Finally, to show the usefulness of our system, we present results on PPW's overhead, storage requirements and scalability before demonstrating its effectiveness via application case studies.", "paper_title": "Parallel Performance Wizard: A Performance System for the Analysis of Partitioned Global-Address-Space Applications", "paper_id": "WOS:000284356600007"}