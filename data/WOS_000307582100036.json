{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "auxiliary_assertions"}, {"score": 0.015555892074578494, "phrase": "proof_rules"}, {"score": 0.00481495049065317, "phrase": "software_verifiers"}, {"score": 0.004714023408114857, "phrase": "automatically_generated_tools"}, {"score": 0.004615202066192795, "phrase": "programmer_productivity"}, {"score": 0.004447201233380302, "phrase": "dataflow_analyzers"}, {"score": 0.0043080553835735825, "phrase": "declarative_specifications"}, {"score": 0.0037336520904376687, "phrase": "automatic_synthesis"}, {"score": 0.0036942726653704213, "phrase": "software_verification_tools"}, {"score": 0.003503497128638099, "phrase": "employed_proof_rule"}, {"score": 0.0033579708256295847, "phrase": "inductive_invariants"}, {"score": 0.0031176485976102688, "phrase": "proof_rule"}, {"score": 0.0027889366191837504, "phrase": "recursive_equations"}, {"score": 0.002508073621696602, "phrase": "iterative_process"}, {"score": 0.002429451930463481, "phrase": "finitary_unrollings"}, {"score": 0.002316105585203396, "phrase": "automatic_safety"}, {"score": 0.00229164285862567, "phrase": "liveness_verifiers"}, {"score": 0.002219790619936024, "phrase": "multi-threaded_programs"}, {"score": 0.0021847119298612264, "phrase": "functional_programs"}, {"score": 0.0021274723597955567, "phrase": "resulting_verifiers"}, {"score": 0.0021049977753042253, "phrase": "existing_state-of-the-art_verification_tools"}], "paper_keywords": ["Proof rules", " verification tool synthesis", " software verification", " software model checking"], "paper_abstract": "Automatically generated tools can significantly improve programmer productivity. For example, parsers and dataflow analyzers can be automatically generated from declarative specifications in the form of grammars, which tremendously simplifies the task of implementing a compiler. In this paper, we present a method for the automatic synthesis of software verification tools. Our synthesis procedure takes as input a description of the employed proof rule, e.g., program safety checking via inductive invariants, and produces a tool that automatically discovers the auxiliary assertions required by the proof rule, e.g., inductive loop invariants and procedure summaries. We rely on a (standard) representation of proof rules using recursive equations over the auxiliary assertions. The discovery of auxiliary assertions, i.e., solving the equations, is based on an iterative process that extrapolates solutions obtained for finitary unrollings of equations. We show how our method synthesizes automatic safety and liveness verifiers for programs with procedures, multi-threaded programs, and functional programs. Our experimental comparison of the resulting verifiers with existing state-of-the-art verification tools confirms the practicality of the approach.", "paper_title": "Synthesizing Software Verifiers from Proof Rules", "paper_id": "WOS:000307582100036"}