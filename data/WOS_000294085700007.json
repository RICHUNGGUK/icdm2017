{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "collusion_detection"}, {"score": 0.015469842941326485, "phrase": "voting_pools"}, {"score": 0.0046238380150870435, "phrase": "agreement_problems"}, {"score": 0.004549524321051407, "phrase": "replicated_software_execution"}, {"score": 0.004161553532799662, "phrase": "byzantine_adversaries"}, {"score": 0.003289534854212415, "phrase": "voting_decisions"}, {"score": 0.0031845067058084583, "phrase": "different_malicious_strategies"}, {"score": 0.002936331371903168, "phrase": "fixed_identifiers"}, {"score": 0.002865710140187219, "phrase": "whitewashing_attacks"}, {"score": 0.0027741761880779535, "phrase": "graph-theoretic_approach"}, {"score": 0.0025578967205807843, "phrase": "maximum_independent_sets"}, {"score": 0.002246292543825748, "phrase": "practical_applicability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Collusion detection", " Maximum independent set", " Volunteer computing"], "paper_abstract": "From agreement problems to replicated software execution, we frequently find scenarios with voting pools. Unfortunately, Byzantine adversaries can join and collude to distort the results of an election. We address the problem of detecting these colluders, in scenarios where they repeatedly participate in voting decisions. We investigate different malicious strategies, such as naive or colluding attacks, with fixed identifiers or in whitewashing attacks. Using a graph-theoretic approach, we frame collusion detection as a problem of identifying maximum independent sets. We then propose several new graph-based methods and show, via analysis and simulations, their effectiveness and practical applicability for collusion detection. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "A maximum independent set approach for collusion detection in voting pools", "paper_id": "WOS:000294085700007"}