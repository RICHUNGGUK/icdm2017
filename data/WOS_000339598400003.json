{"auto_keywords": [{"score": 0.047232975924705364, "phrase": "sor_method"}, {"score": 0.00481495049065317, "phrase": "gpu_implementations"}, {"score": 0.004749913509007163, "phrase": "convection_diffusion_equation"}, {"score": 0.004701710196317656, "phrase": "local_modified_sor_method"}, {"score": 0.00457553517865013, "phrase": "parallel_form"}, {"score": 0.004483120978156604, "phrase": "numerical_solution"}, {"score": 0.004362808345000509, "phrase": "cuda."}, {"score": 0.0042025601346464365, "phrase": "fine_grain_parallelism_model"}, {"score": 0.004089725258435817, "phrase": "local_relaxation_version"}, {"score": 0.00395291546135423, "phrase": "red-black_ordering"}, {"score": 0.003157510936118389, "phrase": "grid_point"}, {"score": 0.0031254169757175257, "phrase": "global_communication"}, {"score": 0.0030831303297783877, "phrase": "adaptive_determination"}, {"score": 0.003051790083321992, "phrase": "best_value"}, {"score": 0.0029798924689472014, "phrase": "convergence_rate"}, {"score": 0.0026630475331025955, "phrase": "computational_capabilities"}, {"score": 0.002618064695883912, "phrase": "cuda_environment"}, {"score": 0.002530359917257626, "phrase": "simd_extensions"}, {"score": 0.0024961067883724707, "phrase": "avx"}, {"score": 0.002479150189700726, "phrase": "advanced_vector_extensions"}, {"score": 0.0024289743270061157, "phrase": "performance_references"}, {"score": 0.0023717148226629105, "phrase": "gpu_version"}, {"score": 0.00232370829395582, "phrase": "cpu_version"}, {"score": 0.0023079225317714815, "phrase": "significant_performance_improvement"}, {"score": 0.0022535101994966907, "phrase": "gpu_kernels"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Iterative methods", " R/B SOR", " GPU computing", " CUDA", " SSE2", " AVX"], "paper_abstract": "In this paper we study a parallel form of the SOR method for the numerical solution of the Convection Diffusion equation suitable for GPUs using CUDA. To exploit the parallelism offered by GPUs we consider the fine grain parallelism model. This is achieved by considering the local relaxation version of SOR. More specifically, we use SOR with red-black ordering using two sets of parameters omega(1ij) and omega(2ij) for the 5 point stencil. The parameter omega(1ij), is associated with each red (i +j even) grid point (if), whereas the parameter omega(2ij) is associated with each black (i + j odd) grid point (i,j). The use of a parameter for each grid point avoids the global communication required in the adaptive determination of the best value of omega and also increases the convergence rate of the SOR method (Varga, 1962) [38] and (Young, 1971) [41]. We present our strategy and the results of our effort to exploit the computational capabilities of GPUs under the CUDA environment. Additionally, two parallel CPU programs utilizing manual SSE2 (Streaming SIMD Extensions 2) and AVX (Advanced Vector Extensions) vectorization were developed as performance references. The optimizations applied on the GPU version were also considered for the CPU version. Significant performance improvement was achieved with all three developed GPU kernels differentiated by the degree of recomputations thus affecting the flops per element access ratio. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A comparison of CPU and GPU implementations for solving the Convection Diffusion equation using the local Modified SOR method", "paper_id": "WOS:000339598400003"}