{"auto_keywords": [{"score": 0.03933001930155138, "phrase": "cost_matrix"}, {"score": 0.010512667468117895, "phrase": "hardware_implementation"}, {"score": 0.01031600142916946, "phrase": "dynamic_programming"}, {"score": 0.00481495049065317, "phrase": "cost_matrix_structure"}, {"score": 0.004724365740062236, "phrase": "stereo_disparity_computation"}, {"score": 0.004569905085027681, "phrase": "powerful_method"}, {"score": 0.0045052562941109734, "phrase": "energy_minimisation_problems"}, {"score": 0.004462663711734448, "phrase": "computer_vision"}, {"score": 0.0043786774510943625, "phrase": "stereo_disparity_computations"}, {"score": 0.004077508669922702, "phrase": "frame-rate_processing"}, {"score": 0.004019797503157808, "phrase": "naive_implementation"}, {"score": 0.003925414526537783, "phrase": "timing_requirements"}, {"score": 0.0036553070575015344, "phrase": "improved_methods"}, {"score": 0.0035022161192936234, "phrase": "computing_cost_matrix_entries_along_anti-diagonals"}, {"score": 0.0034037221513153566, "phrase": "cost_matrix_entries"}, {"score": 0.003307988966112615, "phrase": "pipelined_architecture"}, {"score": 0.0029935730127943496, "phrase": "disparity_range"}, {"score": 0.002937153116494391, "phrase": "negative_disparities"}, {"score": 0.002895535087931938, "phrase": "rectified_images"}, {"score": 0.002683304054823427, "phrase": "boundary_conditions"}, {"score": 0.0024513404432665153, "phrase": "cox's_maximum-likelihood"}, {"score": 0.0024281181691350085, "phrase": "dynamic_programming_stereo_disparity_algorithm"}, {"score": 0.0022933216359142736, "phrase": "high_frame_rate"}, {"score": 0.0022076314894741394, "phrase": "large_disparity_range"}, {"score": 0.0021251363422701446, "phrase": "image_sizes"}], "paper_keywords": ["Stereo disparity", " Dynamic programming", " Field programmable gate arrays", " Pipeline processing", " Real-time systems", " Hardware"], "paper_abstract": "Dynamic programming is a powerful method for solving energy minimisation problems in computer vision, for example stereo disparity computations. While it may be desirable to implement this algorithm in hardware to achieve frame-rate processing, a naive implementation may fail to meet timing requirements. In this paper, the structure of the cost matrix is examined to provide improved methods of hardware implementation. It is noted that by computing cost matrix entries along anti-diagonals instead of rows, the cost matrix entries can be computed in a pipelined architecture. Further, if only a subset of the cost matrix needs to be considered, for example by placing limits on the disparity range (include neglecting negative disparities by assuming rectified images), the resources required to compute the cost matrix in parallel can be reduced. Boundary conditions required to allow computing a subset of the cost matrix are detailed. Finally, a hardware solution of Cox's maximum-likelihood, dynamic programming stereo disparity algorithm is implemented to demonstrate the performance achieved. The design provides high frame rate (>123 fps) estimates for a large disparity range (e.g. 128 pixels), for image sizes of 640 x 480 pixels, and can be simply extended to work well over 200 fps. (c) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Leveraging cost matrix structure for hardware implementation of stereo disparity computation using dynamic programming", "paper_id": "WOS:000283834900003"}