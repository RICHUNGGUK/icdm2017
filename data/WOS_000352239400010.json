{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "vm-mu_checkpoint"}, {"score": 0.004717125879761534, "phrase": "assessment_of_lightweight"}, {"score": 0.004668957916795845, "phrase": "-memory_vm_checkpointing"}, {"score": 0.004574085781766281, "phrase": "rollback_techniques"}, {"score": 0.004435363840720883, "phrase": "virtual_machines"}, {"score": 0.004278807087784626, "phrase": "vm-mcheckpoint"}, {"score": 0.0040438338011467845, "phrase": "high-frequency_checkpointing"}, {"score": 0.003861175855298779, "phrase": "existing_techniques"}, {"score": 0.0038217146888983576, "phrase": "vm_checkpointing"}, {"score": 0.0037057255600764475, "phrase": "checkpoint_overhead"}, {"score": 0.003361069456060196, "phrase": "incremental_checkpoints"}, {"score": 0.00332670230152448, "phrase": "volatile_memory"}, {"score": 0.0031277316566463978, "phrase": "error_detection"}, {"score": 0.0030640804704319255, "phrase": "corrupted_checkpoints"}, {"score": 0.0030017207229983385, "phrase": "checkpointing_frequency"}, {"score": 0.002895620643297197, "phrase": "markov_models"}, {"score": 0.002836679611901583, "phrase": "availability_improvements"}, {"score": 0.0026945086500597304, "phrase": "reasonably_reliable_hypervisors"}, {"score": 0.002533253511622532, "phrase": "evaluation_results"}, {"score": 0.0023694065215394593, "phrase": "program_execution_time"}, {"score": 0.0022856052476424344, "phrase": "spec_cint"}, {"score": 0.0022390533383717715, "phrase": "error_injection_experiments"}, {"score": 0.002159852420283463, "phrase": "error_detection_techniques"}, {"score": 0.0021377414429251647, "phrase": "rmk"}, {"score": 0.0021049977753042253, "phrase": "high_coverage"}], "paper_keywords": ["Checkpoint corruption", " checkpoint model", " error latency", " incremental checkpoint", " high-frequency checkpoint", " transient error"], "paper_abstract": "Checkpointing and rollback techniques enhance reliability and availability of virtual machines and their hosted IT services. This paper proposes VM-mCheckpoint, a light-weight pure-software mechanism for high-frequency checkpointing and rapid recovery for VMs. Compared with existing techniques of VM checkpointing, VM-mu Checkpoint tries to minimize checkpoint overhead and speed up recovery by means of copy-on-write, dirty-page prediction and in-place recovery, as well as saving incremental checkpoints in volatile memory. Moreover, VM-mu Checkpoint deals with the issue that latency in error detection potentially results in corrupted checkpoints, particularly when checkpointing frequency is high. We also constructed Markov models to study the availability improvements provided by VM-mu Checkpoint (from 99 to 99.98 percent on reasonably reliable hypervisors). We designed and implemented VM-mu Checkpoint in the XenVMM. The evaluation results demonstrate that VM-mu Checkpoint incurs an average of 6.3 percent overhead (in terms of program execution time) for 50 ms checkpoint intervals when executing the SPEC CINT 2006 benchmark. Error injection experiments demonstrate that VM-mu Checkpoint, combined with error detection techniques in RMK, provides high coverage of recovery.", "paper_title": "VM-mu Checkpoint: Design, Modeling, and Assessment of Lightweight In-Memory VM Checkpointing", "paper_id": "WOS:000352239400010"}