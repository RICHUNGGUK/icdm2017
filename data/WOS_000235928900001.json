{"auto_keywords": [{"score": 0.043101810797355644, "phrase": "haskell"}, {"score": 0.025784141102433513, "phrase": "hottest"}, {"score": 0.00481495049065317, "phrase": "higher-ordered-typed-functional_specification-based_test-generation_technique"}, {"score": 0.004298666679374568, "phrase": "haskelldb._haskelldb"}, {"score": 0.004229556887896042, "phrase": "embedded_domain"}, {"score": 0.004007083686875716, "phrase": "systematic_abstraction_process"}, {"score": 0.00394264312173188, "phrase": "system_invariants"}, {"score": 0.00385832528624328, "phrase": "test_cases"}, {"score": 0.003796267885124202, "phrase": "specific_requirements"}, {"score": 0.0037150687722055727, "phrase": "functional_languages"}, {"score": 0.0035965032173588753, "phrase": "new_concept"}, {"score": 0.003210446135114967, "phrase": "declarative_style"}, {"score": 0.0031759067385562553, "phrase": "haskell_based_languages"}, {"score": 0.003057910095857785, "phrase": "similar_concerns"}, {"score": 0.0025578967205807843, "phrase": "existing_model"}, {"score": 0.002345707314211983, "phrase": "traditional_technique"}, {"score": 0.0022830706430588482, "phrase": "test_suites"}, {"score": 0.0021164256448611045, "phrase": "traditional_model"}, {"score": 0.0021049977753042253, "phrase": "based_test_design_technique"}], "paper_keywords": ["empirical study", " controlled experiment", " EFSM software model", " software test automation", " functional specification language"], "paper_abstract": "HOTTest is a model based test automation technique of software systems based on models of the system described using HaskellDB. HaskellDB is an embedded domain specific language derived from Haskell. HOTTest enforces a systematic abstraction process and exploits system invariants for automatically producing test cases for domain specific requirements. Use of functional languages for system modeling is a new concept and hence HOTTest is subject to concerns of usability, like any other new technique. Also, the syntax and the declarative style of Haskell based languages make them difficult to learn. Similar concerns can be raised for HOTTest as it shares the same syntax with Haskell. In this paper we describe an experiment designed to study the usability of HOTTest and to compare it with existing model based test design techniques. The results show that HOTTest is more usable than the traditional technique and demonstrate that the test suites produced by HOTTest are more effective and efficient than those generated using the traditional model based test design technique.", "paper_title": "An experimental evaluation of a higher-ordered-typed-functional specification-based test-generation technique", "paper_id": "WOS:000235928900001"}