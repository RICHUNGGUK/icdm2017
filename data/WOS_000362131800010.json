{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nondeterministic_computations"}, {"score": 0.04126073658431364, "phrase": "polylogarithmic_query_complexity"}, {"score": 0.03485917626028694, "phrase": "polynomial_encoding"}, {"score": 0.03085801822199496, "phrase": "prior_work"}, {"score": 0.0047273577269638725, "phrase": "crucial_component"}, {"score": 0.004669845451682529, "phrase": "complexity_theory"}, {"score": 0.004515252649226697, "phrase": "interactive_proofs"}, {"score": 0.004487697242654525, "phrase": "multi-prover_interactive_proofs"}, {"score": 0.004446677711302801, "phrase": "probabilistically-checkable_proofs"}, {"score": 0.00428629884026304, "phrase": "machine's_computation"}, {"score": 0.00399483173553482, "phrase": "short_probabilistically-checkable_proofs"}, {"score": 0.0038624981944755813, "phrase": "pcp's_proof_length"}, {"score": 0.003666521536730407, "phrase": "encoded_computation"}, {"score": 0.0034911335714333507, "phrase": "pcp_proof_length"}, {"score": 0.003375429082739004, "phrase": "t-step_computation"}, {"score": 0.0033445420167761445, "phrase": "nondeterministic_turing_machine"}, {"score": 0.0032836104153151973, "phrase": "length_o"}, {"score": 0.0031553611552558986, "phrase": "best_known_length"}, {"score": 0.003050750896241337, "phrase": "nondeterministic_random-access_machines"}, {"score": 0.002748775748298028, "phrase": "reed-solomon_code"}, {"score": 0.0026986685585382347, "phrase": "best_pcps"}, {"score": 0.0026252106881752067, "phrase": "quasilinear-size_pcps"}, {"score": 0.0024842242921857705, "phrase": "additional_properties"}, {"score": 0.002265833357217618, "phrase": "short_pcps"}, {"score": 0.0022450768409733807, "phrase": "polylogarithmic-time_verifier"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Arithmetization", " Probabilistically-checkable proofs", " Polylogarithmic-time verifier"], "paper_abstract": "Arithmetizing computation is a crucial component of many fundamental results in complexity theory, including results that gave insight into the power of interactive proofs, multi-prover interactive proofs, and probabilistically-checkable proofs. Informally, an arithmetization is a way to encode a machine's computation so that its correctness can be easily verified via few probabilistic algebraic checks. We study the problem of arithmetizing nondeterministic computations for the purpose of constructing short probabilistically-checkable proofs (PCPs) with polylogarithmic query complexity. In such a setting, a PCP's proof length depends (at least!) linearly on the length, in bits, of the encoded computation. Thus, minimizing the number of bits in the encoding is crucial for minimizing PCP proof length. In this paper we show how to arithmetize any T-step computation on a nondeterministic Turing machine by using a polynomial encoding of length O (T . (log T)(2)). Previously, the best known length was Omega (T . (log T)(4)). For nondeterministic random-access machines, our length is O(T . (log T)(2+0(1))), while prior work only achieved Omega (T . (log T)(5)). The polynomial encoding that we use is the Reed-Solomon code. When combined with the best PCPs of proximity for this code, our result yields quasilinear-size PCPs with polylogarithmic query complexity that are shorter, by at least two logarithmic factors, than in all prior work. Our arithmetization also enjoys additional properties. First, it is succinct, i.e., the encoding of the computation can be probabilistically checked in (log T)(0(1)) time; this property is necessary for constructing short PCPs with a polylogarithmic-time verifier. Furthermore, our techniques extend, in a certain well-defined sense, to the arithmetization of yet other NEXP-complete languages. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Shorter arithmetization of nondeterministic computations", "paper_id": "WOS:000362131800010"}