{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.048213689049836965, "phrase": "scj"}, {"score": 0.004733901576706854, "phrase": "circus_models"}, {"score": 0.004680624753255133, "phrase": "safety-critical_java"}, {"score": 0.004524348699657099, "phrase": "novel_version"}, {"score": 0.004324031677173549, "phrase": "real-time_programming"}, {"score": 0.004227209809791869, "phrase": "safety-critical_applications"}, {"score": 0.0038392331564122387, "phrase": "formal_verification"}, {"score": 0.0037745459666402915, "phrase": "scj_program"}, {"score": 0.0035666632046674153, "phrase": "refinement-based_approach"}, {"score": 0.0033511469200347907, "phrase": "well_established_notations"}, {"score": 0.0032761415826950266, "phrase": "csp"}, {"score": 0.003009022147559257, "phrase": "timing_requirements"}, {"score": 0.002859345731792013, "phrase": "event_handlers"}, {"score": 0.002827105825163379, "phrase": "scj."}, {"score": 0.0027480831196871093, "phrase": "integrated_refinement"}, {"score": 0.0027170943110836425, "phrase": "value-based_specifications"}, {"score": 0.002686454006979225, "phrase": "class-based_designs"}, {"score": 0.0026262033625248445, "phrase": "memory_areas"}, {"score": 0.002552781867125423, "phrase": "refinement_strategy"}, {"score": 0.002398382089724878, "phrase": "scj_paradigm"}, {"score": 0.0022661190184053628, "phrase": "concurrent_version"}, {"score": 0.0022278779300543548, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "scj_community"}], "paper_keywords": ["SCJ", " Circus", " RTSJ", " Real-time systems", " Refinement", " Verification"], "paper_abstract": "Safety-Critical Java (SCJ) is a novel version of Java that addresses issues related to real-time programming and certification of safety-critical applications. In this paper, we propose a technique that reveals the issues involved in the formal verification of an SCJ program, and provides guidelines for tackling them in a refinement-based approach. It is based on Circus, a combination of well established notations: Z, CSP, Timed CSP, and object orientation. We cater for the specification of timing requirements and their decomposition towards the structure of missions and event handlers of SCJ. We also consider the integrated refinement of value-based specifications into class-based designs using SCJ scoped memory areas. We present a refinement strategy, a Circus variant that captures the essence of the SCJ paradigm, and a substantial example based approach on a concurrent version of a case study that has been used as a benchmark by the SCJ community: an aircraft collision detector.", "paper_title": "Safety-critical Java programs from Circus models", "paper_id": "WOS:000321960800003"}