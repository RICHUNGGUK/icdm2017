{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asynchronous_programs"}, {"score": 0.03982569637126584, "phrase": "interprocedural_dataflow_analysis"}, {"score": 0.031227936348435306, "phrase": "aifds_instances"}, {"score": 0.0047273577269638725, "phrase": "asynchronous_program"}, {"score": 0.00458488025289647, "phrase": "procedure_calls"}, {"score": 0.00410645614623058, "phrase": "non-deterministic_order"}, {"score": 0.004031699976413366, "phrase": "external_scheduler"}, {"score": 0.003958299299658418, "phrase": "later_point"}, {"score": 0.003700371064796848, "phrase": "aifds_problems"}, {"score": 0.0035668128900149814, "phrase": "ifds_problems"}, {"score": 0.0031553611552558986, "phrase": "aifds_instance"}, {"score": 0.0030414140732789186, "phrase": "demand-driven_algorithm"}, {"score": 0.0029677378488677983, "phrase": "corresponding_demand"}, {"score": 0.0027572166867780275, "phrase": "existing_interprocedural_dataflow_analysis_framework"}, {"score": 0.0025148871904409095, "phrase": "first_safety_verification_tool"}, {"score": 0.0024842242921857705, "phrase": "unbounded_asynchronous_programs"}, {"score": 0.0023507990454207936, "phrase": "expspace"}, {"score": 0.0021309898622781124, "phrase": "standard_optimizations"}, {"score": 0.0021049977753042253, "phrase": "interprocedural_dataflow_analyses"}], "paper_keywords": ["languages", " verification", " reliability", " asynchronous (event-driven) programming", " dataflow analysis"], "paper_abstract": "An asynchronous program is one that contains procedure calls which are not immediately executed from the callsite, but stored and \"dispatched\" in a non-deterministic order by an external scheduler at a later point. We formalize the problem of interprocedural dataflow analysis for asynchronous programs as AIFDS problems, a generalization of the IFDS problems for interprocedural dataflow analysis. We give an algorithm for computing the precise meet-over-valid-paths solution for any AIFDS instance, as well as a demand-driven algorithm for solving the corresponding demand AIFDS instances. Our algorithm can be easily implemented on top of any existing interprocedural dataflow analysis framework. We have implemented the algorithm on top of BLAST, thereby obtaining the first safety verification tool for unbounded asynchronous programs. Though the problem of solving AIFDS instances is EXPSPACE-hard, we find that in practice our technique can efficiently analyze programs by exploiting standard optimizations of interprocedural dataflow analyses.", "paper_title": "Interprocedural analysis of asynchronous programs", "paper_id": "WOS:000253407700036"}