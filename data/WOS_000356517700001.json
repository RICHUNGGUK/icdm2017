{"auto_keywords": [{"score": 0.049612338656328456, "phrase": "hyper-heuristic_framework"}, {"score": 0.045171522171843934, "phrase": "high-level_heuristic"}, {"score": 0.02892473429930308, "phrase": "problem-solving_process"}, {"score": 0.025950633620500287, "phrase": "proposed_hyper-heuristic"}, {"score": 0.00481495049065317, "phrase": "automatic_design"}, {"score": 0.004736973212570135, "phrase": "gene_expression"}, {"score": 0.00469079145638866, "phrase": "combinatorial_optimization_problems"}, {"score": 0.0046602528492463045, "phrase": "hyper-heuristic_approaches"}, {"score": 0.0045997680394590365, "phrase": "heuristic_design"}, {"score": 0.004525259757290933, "phrase": "multiple_problems"}, {"score": 0.004466519142879166, "phrase": "tailor-made_methodologies"}, {"score": 0.004143196873246147, "phrase": "heuristic_selection"}, {"score": 0.004023120753104693, "phrase": "returned_solution"}, {"score": 0.0039579160185689325, "phrase": "different_problems"}, {"score": 0.003919299546627271, "phrase": "even_instances"}, {"score": 0.0038810583785936505, "phrase": "different_landscape_structures"}, {"score": 0.0037932682371685433, "phrase": "efficient_high-level_heuristics"}, {"score": 0.00374399358035391, "phrase": "dramatic_impact"}, {"score": 0.0037195959056754444, "phrase": "hyper-heuristic_performance"}, {"score": 0.003611751858608048, "phrase": "human_knowledge"}, {"score": 0.003507023579658917, "phrase": "gene_expression_programming_algorithm"}, {"score": 0.0034276650497743603, "phrase": "instance-solving_process"}, {"score": 0.003295763459241421, "phrase": "generated_heuristic"}, {"score": 0.0031897187361850103, "phrase": "generated_solution"}, {"score": 0.003107337317471694, "phrase": "current_problem_state"}, {"score": 0.002948883844627217, "phrase": "resultant_solution"}, {"score": 0.0026557415971295633, "phrase": "solution_diversity"}, {"score": 0.0026126405272417783, "phrase": "memory_mechanism"}, {"score": 0.0025368092524479615, "phrase": "diverse_solutions"}, {"score": 0.002407378648209689, "phrase": "six_well-known_combinatorial_optimization_problems"}, {"score": 0.0023298518405721804, "phrase": "hyflex_software"}, {"score": 0.002314647987893668, "phrase": "empirical_results"}, {"score": 0.0022696277881969896, "phrase": "state-of-the-art_hyper-heuristics"}], "paper_keywords": ["Dynamic optimization", " gene expression programming", " hyper-heuristics", " timetabling", " vehicle routing"], "paper_abstract": "Hyper-heuristic approaches aim to automate heuristic design in order to solve multiple problems instead of designing tailor-made methodologies for individual problems. Hyper-heuristics accomplish this through a high-level heuristic (heuristic selection mechanism and an acceptance criterion). This automates heuristic selection, deciding whether to accept or reject the returned solution. The fact that different problems, or even instances, have different landscape structures and complexity, the design of efficient high-level heuristics can have a dramatic impact on hyper-heuristic performance. In this paper, instead of using human knowledge to design the high-level heuristic, we propose a gene expression programming algorithm to automatically generate, during the instance-solving process, the high-level heuristic of the hyper-heuristic framework. The generated heuristic takes information (such as the quality of the generated solution and the improvement made) from the current problem state as input and decides which low-level heuristic should be selected and the acceptance or rejection of the resultant solution. The benefit of this framework is the ability to generate, for each instance, different high-level heuristics during the problem-solving process. Furthermore, in order to maintain solution diversity, we utilize a memory mechanism that contains a population of both high-quality and diverse solutions that is updated during the problem-solving process. The generality of the proposed hyper-heuristic is validated against six well-known combinatorial optimization problems, with very different landscapes, provided by the HyFlex software. Empirical results, comparing the proposed hyper-heuristic with state-of-the-art hyper-heuristics, conclude that the proposed hyper-heuristic generalizes well across all domains and achieves competitive, if not superior, results for several instances on all domains.", "paper_title": "Automatic Design of a Hyper-Heuristic Framework With Gene Expression Programming for Combinatorial Optimization Problems", "paper_id": "WOS:000356517700001"}