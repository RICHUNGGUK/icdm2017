{"auto_keywords": [{"score": 0.0044863018460183784, "phrase": "performance_advantages"}, {"score": 0.0042734067085669885, "phrase": "similar_execution_resources"}, {"score": 0.004070573090297285, "phrase": "performance_contributions"}, {"score": 0.003911771812701971, "phrase": "ooo_hardware_speculation_support"}, {"score": 0.0038093479435377764, "phrase": "different_schedules"}, {"score": 0.003775803846431323, "phrase": "different_occurrences"}, {"score": 0.0036445446531633368, "phrase": "functional_unit_availability"}, {"score": 0.003502305158321511, "phrase": "good_static_schedules"}, {"score": 0.003149471116658739, "phrase": "-order_machine"}, {"score": 0.0029471818883482688, "phrase": "single_\"best\"_static_schedule"}, {"score": 0.0028699415886017468, "phrase": "ooo_schedule"}, {"score": 0.0027700855441353165, "phrase": "isa_mechanisms"}, {"score": 0.0026736945502820303, "phrase": "static_schedules"}, {"score": 0.002447101794397243, "phrase": "application's_critical_path"}, {"score": 0.0022999859758286423, "phrase": "branch_mispredictions"}, {"score": 0.002200337772403983, "phrase": "ooo_dynamism"}, {"score": 0.0021426288417854987, "phrase": "potentially_simpler_task"}], "paper_keywords": ["Performance", " Optimization", " Speculation", " Dynamic Scheduling"], "paper_abstract": "In this paper, we set out to study the performance advantages of an Out-of-Order (OOO) processor relative to in-order processors with similar execution resources. In particular, we try to tease apart the performance contributions from two sources: the improved schedules enabled by OOO hardware speculation support and its ability to generate different schedules on different occurrences of the same instructions based on operand and functional unit availability. We find that the ability to express good static schedules achieves the bulk of the speedup resulting from OOO. Specifically, of the 53% speedup achieved by OOO relative to a similarly provisioned in-order machine, we find that 88% of that speedup can be achieved by using a single \"best\" static schedule as suggested by observing an OOO schedule of the code. We discuss the ISA mechanisms that would be required to express these static schedules. Furthermore, we find that the benefits of dynamism largely come from two kinds of events that influence the application's critical path: load instructions that miss in the cache only part of the time and branch mispredictions. We find that much of the benefit of OOO dynamism can be achieved by the potentially simpler task of addressing these two behaviors directly.", "paper_title": "Discerning the Dominant Out-of-Order Performance Advantage: Is it Speculation or Dynamism?", "paper_id": "WOS:000321213100020"}