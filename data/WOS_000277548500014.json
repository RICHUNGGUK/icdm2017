{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_damage_recovery_for_web_databases"}, {"score": 0.004714023408114857, "phrase": "web_context"}, {"score": 0.004590820632326585, "phrase": "urgent_need"}, {"score": 0.004518442937844318, "phrase": "self-healing_database_system"}, {"score": 0.0041074234667687875, "phrase": "malicious_attacks"}, {"score": 0.0038339398365449507, "phrase": "continuous_services"}, {"score": 0.003597625122515975, "phrase": "dynamic_recovery"}, {"score": 0.0034118234596993836, "phrase": "extended_read_operation"}, {"score": 0.0033579708256295847, "phrase": "corrupted_data"}, {"score": 0.0032014433546265694, "phrase": "fine_grained_transaction_log"}, {"score": 0.0031342307827666675, "phrase": "extended_read"}, {"score": 0.0030521898646210413, "phrase": "user_transactions"}, {"score": 0.002879158342988017, "phrase": "dynamic_recovery_system"}, {"score": 0.002818692837561076, "phrase": "damage_repair"}, {"score": 0.002687235334499192, "phrase": "extended_read-write_dependency"}, {"score": 0.002575526825728026, "phrase": "execution_results"}, {"score": 0.002548331088496964, "phrase": "blind_write_transactions"}, {"score": 0.002429451930463481, "phrase": "recovery_conflicts"}, {"score": 0.002391067964886602, "phrase": "forward_recovery"}, {"score": 0.002328434471939886, "phrase": "confinement_activity"}, {"score": 0.0022674379203603224, "phrase": "in-repairing_data"}, {"score": 0.0021847119298612264, "phrase": "data_recovery"}, {"score": 0.0021274723597955567, "phrase": "performance_evaluation"}], "paper_keywords": ["dynamic recovery", " survivability", " availability"], "paper_abstract": "In the web context, there is an urgent need for a self-healing database system which has the ability to automatically locate and undo a set of transactions that are corrupted by malicious attacks. The metrics of survivability and availability require a database to provide continuous services during the period of recovery, which is referred to as dynamic recovery. In this paper, we present that an extended read operation from a corrupted data would cause damage spreading. We build a fine grained transaction log to record the extended read and write operations while user transactions are processing. Based on that, we propose a dynamic recovery system to implement the damage repair. The system captures damage spreading caused by extended read-write dependency between transactions. It also retains the execution results for blind write transactions and gives a solution to the issues of recovery conflicts caused by forward recovery. Moreover, a confinement activity is imposed on the in-repairing data to prevent a further damage propagation while the data recovery is processing. The performance evaluation in our experiments shows that the system is reliable and highly efficient.", "paper_title": "Dynamic Damage Recovery for Web Databases", "paper_id": "WOS:000277548500014"}