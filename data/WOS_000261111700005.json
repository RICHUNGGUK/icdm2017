{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ziggurat"}, {"score": 0.033184550155954, "phrase": "static_semantics"}, {"score": 0.004649302313891199, "phrase": "meta-language_system"}, {"score": 0.004457995891964028, "phrase": "scheme-like_macros"}, {"score": 0.004334832612029898, "phrase": "nontrivial_static_semantics"}, {"score": 0.004156526321619088, "phrase": "java"}, {"score": 0.003985305257857655, "phrase": "s-expression_concrete_syntax"}, {"score": 0.003848088904418221, "phrase": "language_designers"}, {"score": 0.003689628075766217, "phrase": "language_levels"}, {"score": 0.0033213460816510685, "phrase": "type_systems"}, {"score": 0.0028464607144683247, "phrase": "improved_reasoning_power"}, {"score": 0.002787181295054319, "phrase": "higher_level"}, {"score": 0.002598333022293788, "phrase": "language_level"}, {"score": 0.002439308179084911, "phrase": "ziggurat_framework"}, {"score": 0.002388487669097511, "phrase": "higher_level_language_facilities"}, {"score": 0.0022739766507258105, "phrase": "assembly_language"}, {"score": 0.0021801944769738618, "phrase": "termination_analysis"}, {"score": 0.0021347607855562102, "phrase": "polymorphic_type_system"}, {"score": 0.0021049977753042253, "phrase": "higher_order_flow_analysis"}], "paper_keywords": [""], "paper_abstract": "Ziggurat is a meta-language System that permits programmers to develop Scheme-like macros for languages With nontrivial static semantics, such as C or Java (suitably encoded in an S-expression concrete syntax). Ziggurat permits language designers to construct 'towers' of language levels With macros; each level in the tower may have its own static semantics, such as type systems or flow analyses. Crucially, the static semantics of the languages at two adjacent levels in the tower can be connected, allowing improved reasoning power at a higher level to be reflected down to the static semantics of the language level below. We demonstrate the utility of the Ziggurat framework by implementing higher level language facilities as macros on top of an assembly language, utilizing static semantics such as termination analysis, a polymorphic type system and higher order flow analysis.", "paper_title": "Building language towers with Ziggurat", "paper_id": "WOS:000261111700005"}