{"auto_keywords": [{"score": 0.049737306239071924, "phrase": "variational_programs"}, {"score": 0.04488224432995398, "phrase": "brute-force_strategy"}, {"score": 0.03726050649834258, "phrase": "variational_type_inference"}, {"score": 0.03687569511405131, "phrase": "variational_types"}, {"score": 0.03334785140864503, "phrase": "type_system"}, {"score": 0.03311722611002528, "phrase": "vlc"}, {"score": 0.02831207163019953, "phrase": "equivalence_rules"}, {"score": 0.00481495049065317, "phrase": "type_inference"}, {"score": 0.004679134285953932, "phrase": "conditional_compilation"}, {"score": 0.0046457802872573025, "phrase": "related_tools"}, {"score": 0.00449859196755507, "phrase": "huge_number"}, {"score": 0.004466519142879166, "phrase": "related_programs"}, {"score": 0.0040262522882015175, "phrase": "efficiency_reasons"}, {"score": 0.003829455440282146, "phrase": "underlying_variational_program"}, {"score": 0.003802135020791801, "phrase": "recent_research"}, {"score": 0.0036684182697540382, "phrase": "type_checking"}, {"score": 0.0034026714408341868, "phrase": "variational_program"}, {"score": 0.003342280102112269, "phrase": "variational_lambda_calculus"}, {"score": 0.0032712190037495975, "phrase": "formal_foundation"}, {"score": 0.003100085797251317, "phrase": "vlc_expressions"}, {"score": 0.003055977395076106, "phrase": "correspondingly_variational_types"}, {"score": 0.002824331600674865, "phrase": "variation_elimination"}, {"score": 0.0027543636132088332, "phrase": "plain_lambda_calculus_expression"}, {"score": 0.0026008598632891837, "phrase": "type_unification_problem"}, {"score": 0.002482443883144136, "phrase": "sound_and_complete_unification_algorithm"}, {"score": 0.0024383449794706477, "phrase": "unification_algorithm"}, {"score": 0.0024122616475793206, "phrase": "variational_type_inference_algorithm"}, {"score": 0.0023694065215394593, "phrase": "algorithm_w._we"}, {"score": 0.002285961573963468, "phrase": "principal_types"}, {"score": 0.0022054488653549175, "phrase": "sum_types"}, {"score": 0.0021507795710951384, "phrase": "variational_data_types"}, {"score": 0.0021049977753042253, "phrase": "previous_theoretical_results"}], "paper_keywords": ["Languages", " Theory", " Variational lambda calculus", " variational type inference", " variational types"], "paper_abstract": "Through the use of conditional compilation and related tools, many software projects can be used to generate a huge number of related programs. The problem of typing such variational software is difficult. The brute-force strategy of generating all variants and typing each one individually is: (1) usually infeasible for efficiency reasons and (2) produces results that do not map well to the underlying variational program. Recent research has focused mainly on efficiency and addressed only the problem of type checking. In this work we tackle the more general problem of variational type inference and introduce variational types to represent the result of typing a variational program. We introduce the variational lambda calculus (VLC) as a formal foundation for research on typing variational programs. We define a type system for VLC in which VLC expressions are mapped to correspondingly variational types. We show that the type system is correct by proving that the typing of expressions is preserved over the process of variation elimination, which eventually results in a plain lambda calculus expression and its corresponding type. We identify a set of equivalence rules for variational types and prove that the type unification problem modulo these equivalence rules is unitary and decidable; we also present a sound and complete unification algorithm. Based on the unification algorithm, the variational type inference algorithm is an extension of algorithm W. We show that it is sound and complete and computes principal types. We also consider the extension of VLC with sum types, a necessary feature for supporting variational data types, and demonstrate that the previous theoretical results also hold under this extension. Finally, we characterize the complexity of variational type inference and demonstrate the efficiency gains over the brute-force strategy.", "paper_title": "Extending Type Inference to Variational Programs", "paper_id": "WOS:000333537700001"}