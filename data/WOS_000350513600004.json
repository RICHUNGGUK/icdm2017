{"auto_keywords": [{"score": 0.046888273895838106, "phrase": "model_system_concept"}, {"score": 0.023070869061448725, "phrase": "software_engineering"}, {"score": 0.010612387000973441, "phrase": "general_theory"}, {"score": 0.00703268184016045, "phrase": "decision_framework"}, {"score": 0.0044026610128451256, "phrase": "software_engineering_design_process"}, {"score": 0.004039423410198574, "phrase": "interconnected_and_consistent_components"}, {"score": 0.0038758293658651237, "phrase": "software_system"}, {"score": 0.003757480190200645, "phrase": "multiple_facets"}, {"score": 0.0037188360359702182, "phrase": "software_engineering_project"}, {"score": 0.0034000828197314264, "phrase": "software_development_practices"}, {"score": 0.0033075957452554368, "phrase": "theoretical_decision_framework"}, {"score": 0.0032622968443364888, "phrase": "central_governance_component"}, {"score": 0.003044912038752554, "phrase": "project_building_stage"}, {"score": 0.0029722900280316216, "phrase": "design_process"}, {"score": 0.0029416973901327925, "phrase": "economic_perspective"}, {"score": 0.00276462370914216, "phrase": "possible_outcomes"}, {"score": 0.0026252106881752067, "phrase": "optimal_control"}, {"score": 0.0026071599759743833, "phrase": "modern_adaptive_software_development"}, {"score": 0.0025361866386341796, "phrase": "dynamic_programming"}, {"score": 0.0025014259919355453, "phrase": "optimal_sequence"}, {"score": 0.0024333239726872604, "phrase": "defined_time_horizon"}, {"score": 0.002302619021497886, "phrase": "well-studied_areas"}, {"score": 0.0022247130598574993, "phrase": "bayesian"}, {"score": 0.0022015970225369975, "phrase": "computational_case_studies"}, {"score": 0.0021789194955896124, "phrase": "conceptual_innovations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["General theory of software engineering", " Model systems", " Theoretic Decision Framework", " Optimal decision-under-risk process", " Adaptive software development"], "paper_abstract": "The contribution of this paper to a general theory of software engineering is twofold: it presents the model system concept, and it integrates the software engineering design process into a decision making theory and a value-based decision-under-risk process. The model system concept is defined as a collection of interconnected and consistent components that work together for defining, developing, and delivering a software system. This model system concept is used to represent the multiple facets of a software engineering project such as stakeholders and models related to domain/environment, success, decision, product, process, and property. The model system concept is derived from software development practices in the industry and academia. The theoretical decision framework acts as a central governance component for a given software engineering project. Applying this decision framework allows for effectively managing risks and uncertainties related to success in the project building stage. Especially, this puts the design process in an economic perspective, where concepts such as value-of-waiting, value-of-information and possible outcomes can be coped with explicitly. In practice, the decision framework allows for the optimal control of modern adaptive software development. In particular, one can use dynamic programming to find the optimal sequence of decisions to be made considering a defined time horizon. In this way we can relate our contribution to a theory of software engineering to the well-studied areas of automatic control, optimization, decision theory and Bayesian analysis. Computational case studies exemplify the conceptual innovations proposed in this paper. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "System components of a general theory of software engineering", "paper_id": "WOS:000350513600004"}