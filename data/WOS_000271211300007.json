{"auto_keywords": [{"score": 0.03194333757471042, "phrase": "thorn"}, {"score": 0.00481495049065317, "phrase": "thorn-robust"}, {"score": 0.004766439544900261, "phrase": "concurrent"}, {"score": 0.004718336539253916, "phrase": "extensible"}, {"score": 0.004623608221548592, "phrase": "jvm._scripting_languages"}, {"score": 0.00457696724030363, "phrase": "great_popularity"}, {"score": 0.00446240364863009, "phrase": "rapid_and_exploratory_development"}, {"score": 0.004285010985001827, "phrase": "weak_data_privacy"}, {"score": 0.004241771072194993, "phrase": "dynamic_typing"}, {"score": 0.004198965651975536, "phrase": "powerful_aggregate_data_types"}, {"score": 0.0040525061916685924, "phrase": "completed_parts"}, {"score": 0.004011603024990615, "phrase": "incomplete_programs"}, {"score": 0.003793876828939456, "phrase": "software_life_cycle"}, {"score": 0.00351582806482809, "phrase": "additional_weakness"}, {"score": 0.0031926001871260524, "phrase": "remote_services"}, {"score": 0.0028990022657933334, "phrase": "jvm."}, {"score": 0.002840708910768261, "phrase": "careful_selection"}, {"score": 0.0027000395818027366, "phrase": "industrial_grade_programs-e.g"}, {"score": 0.0023301793939902015, "phrase": "implementation_side"}, {"score": 0.002148226022654619, "phrase": "compiler_plugin_mechanism"}, {"score": 0.0021049977753042253, "phrase": "java_virtual_machine"}], "paper_keywords": ["Design", " Actors", " Pattern matching", " Scripting"], "paper_abstract": "Scripting languages enjoy great popularity due to their support for rapid and exploratory development. They typically have lightweight syntax, weak data privacy, dynamic typing, powerful aggregate data types, and allow execution of the completed parts of incomplete programs. The price of these features comes later in the software life cycle. Scripts are hard to evolve and compose, and often slow. An additional weakness of most scripting languages is lack of support for concurrency-though concurrency is required for scalability and interacting with remote services. This paper reports on the design and implementation of Thorn, a novel programming language targeting the JVM. Our principal contributions are a careful selection of features that support the evolution of scripts into industrial grade programs-e.g., an expressive module system, an optional type annotation facility for declarations, and support for concurrency based on message passing between lightweight, isolated processes. On the implementation side, Thorn has been designed to accommodate the evolution of the language itself through a compiler plugin mechanism and target the Java virtual machine.", "paper_title": "Thorn-Robust, Concurrent, Extensible Scripting on the JVM", "paper_id": "WOS:000271211300007"}