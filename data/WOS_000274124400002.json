{"auto_keywords": [{"score": 0.044672559367905706, "phrase": "measurement_tasks"}, {"score": 0.006842061304069401, "phrase": "on-demand_measurement_tasks"}, {"score": 0.0067383873999456185, "phrase": "ascending_order"}, {"score": 0.006636273911317406, "phrase": "clique_number"}, {"score": 0.00481495049065317, "phrase": "network_measurement"}, {"score": 0.004712913906047687, "phrase": "required_process"}, {"score": 0.004684157900507474, "phrase": "high_performance_networks"}, {"score": 0.004655576530003855, "phrase": "efficient_quality"}, {"score": 0.004515252649226697, "phrase": "service_verification"}, {"score": 0.004487697242654525, "phrase": "active_measurement"}, {"score": 0.004446677711302801, "phrase": "attractive_approach"}, {"score": 0.004406031457123015, "phrase": "measurement_traffic"}, {"score": 0.004081385289516914, "phrase": "common_parts"}, {"score": 0.0039341294012600085, "phrase": "computational_power"}, {"score": 0.0037921662574137535, "phrase": "measurement_accuracy"}, {"score": 0.003757480190200645, "phrase": "network_services"}, {"score": 0.003700371064796848, "phrase": "limited_resources"}, {"score": 0.0034911335714333507, "phrase": "network_state"}, {"score": 0.0033857878144822906, "phrase": "casual_measurements"}, {"score": 0.0031942814007173254, "phrase": "novel_scheduling_scheme"}, {"score": 0.0030789331635764122, "phrase": "graph_coloring_perspective"}, {"score": 0.002782694908561637, "phrase": "conflict_graph"}, {"score": 0.0027572166867780275, "phrase": "concurrent_execution"}, {"score": 0.0027403605798830984, "phrase": "multiple_measurement_tasks"}, {"score": 0.002723607240517261, "phrase": "high_resource_utilization"}, {"score": 0.002673957615079041, "phrase": "average_waiting_time"}, {"score": 0.002633273185094898, "phrase": "periodic_measurement_tasks"}, {"score": 0.0025459275963373496, "phrase": "waiting_time"}, {"score": 0.0024766170166319735, "phrase": "time_space_utilization"}, {"score": 0.002424012799998538, "phrase": "total_time"}, {"score": 0.002336414425972225, "phrase": "different_measurement_task_assignment_scenarios"}, {"score": 0.002217696306116023, "phrase": "concurrent_task_execution"}, {"score": 0.002197379785587054, "phrase": "simulation_results"}, {"score": 0.0021705796895687864, "phrase": "proposed_scheme"}, {"score": 0.002157302200451323, "phrase": "effective_contention_resolution"}, {"score": 0.0021441057555396013, "phrase": "low_execution_delays"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Scheduling", " Network measurement", " Active measurement", " Graph coloring", " Clique"], "paper_abstract": "Measurement is a required process in high performance networks for efficient quality-of-service (QoS) provisioning and service verification. Active measurement is an attractive approach because the measurement traffic injected into the network can be controlled and the measurement tasks can be distributed throughout the network. However, the execution of measurement tasks in common parts of a network may face contention for resources, such as computational power, memory, and link bandwidth. This contention could jeopardize measurement accuracy and affect network services. This contention for limited resources defines a conflict between measurement tasks. Furthermore, we consider two sets of measurement tasks, those used to monitor network state periodically, called periodic tasks, and those for casual measurements issued as needed, called on-demand measurement tasks. In this paper, we propose a novel scheduling scheme to resolve contention for resources of both periodic and on-demand measurement tasks from graph coloring perspective, called ascending order of the sum of clique number and degree of tasks. The scheme selects tasks according to the ascending order of the sum of clique number and conflict task degree in a conflict graph and allows concurrent execution of multiple measurement tasks for high resource utilization. The scheme decreases the average waiting time of all tasks in periodic measurement tasks scheduling. For on-demand measurement tasks, the proposed scheme minimizes the waiting time of inserted on-demand tasks while keeping time space utilization high. In other words, the total time spent on finishing all the tasks is shortened. We evaluate our proposed schemes under different measurement task assignment scenarios through computer simulations. and compare the performance of this scheme with others that also allow concurrent task execution. The simulation results show that the proposed scheme produces effective contention resolution and low execution delays. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Task-execution scheduling schemes for network measurement and monitoring", "paper_id": "WOS:000274124400002"}