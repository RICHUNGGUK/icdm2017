{"auto_keywords": [{"score": 0.04950097558699653, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "sparse_matrix_computations"}, {"score": 0.004558748120167778, "phrase": "sparse_linear_algebra_operation"}, {"score": 0.004342430078306461, "phrase": "sparse_matrix_storage_format"}, {"score": 0.004238134740341528, "phrase": "computing_power"}, {"score": 0.004161553532799662, "phrase": "underlying_hardware"}, {"score": 0.0038453138708790385, "phrase": "possible_kinds"}, {"score": 0.0037075456471849892, "phrase": "sparse_linear_algebra_software_packages"}, {"score": 0.0035100601949451028, "phrase": "new_storage_formats"}, {"score": 0.0034465894339710864, "phrase": "sparse_linear_algebra_application"}, {"score": 0.0031269043024513567, "phrase": "storage_format"}, {"score": 0.0030147970456037274, "phrase": "specific_operations"}, {"score": 0.0028715299874549245, "phrase": "important_features"}, {"score": 0.0027854565462509095, "phrase": "object_oriented_design_model"}, {"score": 0.002735052488172277, "phrase": "sparse_linear_algebra_package"}, {"score": 0.002669259222649505, "phrase": "design_patterns"}, {"score": 0.002406799309495983, "phrase": "unique_features"}, {"score": 0.0023346234464901978, "phrase": "experimental_results"}, {"score": 0.002278440725193305, "phrase": "proposed_software_infrastructure"}, {"score": 0.0021049977753042253, "phrase": "performance_loss"}], "paper_keywords": ["Algorithms", " Design", " Mathematics of computing", " sparse matrices", " object-oriented design"], "paper_abstract": "The efficiency of a sparse linear algebra operation heavily relies on the ability of the sparse matrix storage format to exploit the computing power of the underlying hardware. Since no format is universally better than the others across all possible kinds of operations and computers, sparse linear algebra software packages should provide facilities to easily implement and integrate new storage formats within a sparse linear algebra application without the need to modify it; it should also allow to dynamically change a storage format at run-time depending on the specific operations to be performed. Aiming at these important features, we present an Object Oriented design model for a sparse linear algebra package which relies on Design Patterns. We show that an implementation of our model can be efficiently achieved through some of the unique features of the Fortran 2003 language. Experimental results show that the proposed software infrastructure improves the modularity and ease of use of the code at no performance loss.", "paper_title": "Object-Oriented Techniques for Sparse Matrix Computations in Fortran 2003", "paper_id": "WOS:000308331100001"}