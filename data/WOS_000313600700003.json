{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "dynamic_inheritance"}, {"score": 0.04928275842421274, "phrase": "prototype-based_languages"}, {"score": 0.013039861560290905, "phrase": "dynamic_languages"}, {"score": 0.012404853322878672, "phrase": "virtual_machine"}, {"score": 0.004695343527290754, "phrase": "dynamically"}, {"score": 0.004540365779658683, "phrase": "different_software_development_scenarios"}, {"score": 0.0043721365634105565, "phrase": "existing_class-based_platforms"}, {"score": 0.004317569836847964, "phrase": "java"}, {"score": 0.004192484908247302, "phrase": "dynamic_features"}, {"score": 0.0038711548651825917, "phrase": "extra_layer"}, {"score": 0.003712011863784581, "phrase": "reflective_prototype-based_object_model"}, {"score": 0.0035148319209810128, "phrase": "runtime_performance_penalty"}, {"score": 0.003286420941205958, "phrase": "reflective_model"}, {"score": 0.0031117775337824853, "phrase": "efficient_class-based_virtual_machine"}, {"score": 0.0028251537271620996, "phrase": "runtime_performance_improvement"}, {"score": 0.0027088948471991454, "phrase": "direct_interoperation"}, {"score": 0.0023779596230982234, "phrase": "efficient_virtual_machine"}, {"score": 0.0023481578019624843, "phrase": "jit_compilation"}, {"score": 0.002289667393538803, "phrase": "extensive_evaluation"}, {"score": 0.0022609695885550058, "phrase": "runtime_performance"}, {"score": 0.0022420373745572837, "phrase": "memory_consumption"}, {"score": 0.0022139352210982398, "phrase": "programming_language_implementations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dynamic inheritance", " Prototype-based object-oriented model", " JIT compilation"], "paper_abstract": "Dynamically typed languages are becoming increasingly popular for different software development scenarios where runtime adaptability is important. Therefore, existing class-based platforms such as Java and .NET have been gradually incorporating dynamic features to support the execution of these languages. The implementations of dynamic languages on these platforms commonly generate an extra layer of software over the virtual machine, which reproduces the reflective prototype-based object model provided by most dynamic languages. Simulating this model frequently involves a runtime performance penalty, and makes the interoperation between class- and prototype-based languages difficult. Instead of simulating the reflective model of dynamic languages, our approach has been to extend the object-model of an efficient class-based virtual machine with prototype-based semantics, so that it can directly support both kinds of languages. Consequently, we obtain the runtime performance improvement of using the virtual machine JIT compiler, while a direct interoperation between languages compiled to our platform is also possible. In this paper, we formalize dynamic inheritance for both class- and prototype-based languages, and implement it as an extension of an efficient virtual machine that performs JIT compilation. We also present an extensive evaluation of the runtime performance and memory consumption of the programming language implementations that provide dynamic inheritance, including ours. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Efficient support of dynamic inheritance for class- and prototype-based languages", "paper_id": "WOS:000313600700003"}