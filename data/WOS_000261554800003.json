{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "java-based_component_systems"}, {"score": 0.004707188147442449, "phrase": "java-based_framework"}, {"score": 0.004654210559456924, "phrase": "component-based_software_systems"}, {"score": 0.004584495834677719, "phrase": "logic_laws"}, {"score": 0.004532892812505505, "phrase": "component_interactions"}, {"score": 0.004481868017991508, "phrase": "first-class_aspect"}, {"score": 0.00409372989087314, "phrase": "input_and_output_interfaces"}, {"score": 0.0039124037252916055, "phrase": "related_information"}, {"score": 0.0035734052458933547, "phrase": "inter-component_level"}, {"score": 0.0034933321145368336, "phrase": "linguistic_support"}, {"score": 0.0033008858616145205, "phrase": "general_forms"}, {"score": 0.0031905286720361145, "phrase": "interaction_space"}, {"score": 0.003026127736667187, "phrase": "different_levels"}, {"score": 0.0029694830678462787, "phrase": "heterogeneous_and_unknown_components"}, {"score": 0.002902903244616154, "phrase": "dynamic_introduction"}, {"score": 0.0028058141911641225, "phrase": "general_coordination_patterns"}, {"score": 0.0027119634978446895, "phrase": "first-order_logic"}, {"score": 0.0026813808976594183, "phrase": "reference_computational_model"}, {"score": 0.002476721068743341, "phrase": "adaptation_laws"}, {"score": 0.0024211628058125067, "phrase": "interaction_events"}, {"score": 0.002202742267484358, "phrase": "system_level"}, {"score": 0.0021049977753042253, "phrase": "dynamic_re-configurability"}], "paper_keywords": ["software adaptation", " software component", " logic programming"], "paper_abstract": "This paper describes a Java-based framework for developing component-based software systems supporting adaptation with logic laws and considering component interactions as a first-class aspect. On the one side, the framework makes it possible to specify the logic of interaction at the component-level, in terms of input and output interfaces, the events generated and observed by a component, and related information about the management of the control flow. On the other side, it is possible to specify the logic of interaction at the inter-component level, providing a modelling and linguistic support for designing and ( dynamically) programming the glue among the components, enabling general forms of adaptation, observation and construction of the interaction space. As a result, the framework supports the adaptation of components at different levels: from interoperability among heterogeneous and unknown components, to the support for dynamic introduction, removal and update of components, to general coordination patterns, such as workflow. The framework uses first-order logic as the reference computational model for describing and de. ning the logic of interaction: the modalities adopted by components to interact, the adaptation laws gluing the components and the interaction events occurring in the system are expressed as facts and rules. They compose the ( evolving) logic theories describing and de. ning the interaction at the system level, and can be observed and controlled at runtime to allow dynamic re-configurability.", "paper_title": "An Adaptation Logic Framework for Java-based Component Systems", "paper_id": "WOS:000261554800003"}