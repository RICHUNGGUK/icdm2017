{"auto_keywords": [{"score": 0.03892622593568118, "phrase": "information_extraction"}, {"score": 0.03748078420576964, "phrase": "database_queries"}, {"score": 0.00481495049065317, "phrase": "incremental_information_extraction"}, {"score": 0.004777392826700429, "phrase": "relational_databases"}, {"score": 0.004740126725341152, "phrase": "information_extraction_systems"}, {"score": 0.00459393336391459, "phrase": "special-purpose_processing_modules"}, {"score": 0.004487241576747549, "phrase": "particular_kind"}, {"score": 0.0044002186469797476, "phrase": "major_drawback"}, {"score": 0.004281202319048493, "phrase": "new_extraction_goal"}, {"score": 0.004005339423663657, "phrase": "entire_text_corpus"}, {"score": 0.003732526540522333, "phrase": "novel_approach"}, {"score": 0.0036600862989330106, "phrase": "extraction_needs"}, {"score": 0.0034510635632071978, "phrase": "database_systems"}, {"score": 0.003357633232360232, "phrase": "generic_extraction"}, {"score": 0.0032539388572032563, "phrase": "incremental_extraction"}, {"score": 0.0029966788947444535, "phrase": "automated_query_generation_components"}, {"score": 0.0029616217177058602, "phrase": "casual_users"}, {"score": 0.002881403688962202, "phrase": "query_language"}, {"score": 0.0026431267487109543, "phrase": "information_extraction_system"}, {"score": 0.0025816239578784067, "phrase": "extraction_results"}, {"score": 0.002462867872567125, "phrase": "new_module"}, {"score": 0.0024150092189446424, "phrase": "processing_time"}, {"score": 0.002349561762300369, "phrase": "traditional_pipeline_approach"}, {"score": 0.0022152149658434916, "phrase": "query_performance"}, {"score": 0.002180702259644951, "phrase": "real-time_applications"}, {"score": 0.0021049977753042253, "phrase": "high_quality_extraction_results"}], "paper_keywords": ["Text mining", " query languages", " information storage and retrieval"], "paper_abstract": "Information extraction systems are traditionally implemented as a pipeline of special-purpose processing modules targeting the extraction of a particular kind of information. A major drawback of such an approach is that whenever a new extraction goal emerges or a module is improved, extraction has to be reapplied from scratch to the entire text corpus even though only a small part of the corpus might be affected. In this paper, we describe a novel approach for information extraction in which extraction needs are expressed in the form of database queries, which are evaluated and optimized by database systems. Using database queries for information extraction enables generic extraction and minimizes reprocessing of data by performing incremental extraction to identify which part of the data is affected by the change of components or goals. Furthermore, our approach provides automated query generation components so that casual users do not have to learn the query language in order to perform extraction. To demonstrate the feasibility of our incremental extraction approach, we performed experiments to highlight two important aspects of an information extraction system: efficiency and quality of extraction results. Our experiments show that in the event of deployment of a new module, our incremental extraction approach reduces the processing time by 89.64 percent as compared to a traditional pipeline approach. By applying our methods to a corpus of 17 million biomedical abstracts, our experiments show that the query performance is efficient for real-time applications. Our experiments also revealed that our approach achieves high quality extraction results.", "paper_title": "Incremental Information Extraction Using Relational Databases", "paper_id": "WOS:000297357100007"}