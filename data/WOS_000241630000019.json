{"auto_keywords": [{"score": 0.030343089550264365, "phrase": "code_generation"}, {"score": 0.00481495049065317, "phrase": "lightweight_generator_refactoring"}, {"score": 0.004508286991825192, "phrase": "refactoring_techniques"}, {"score": 0.004190305872545087, "phrase": "existing_refactoring_techniques"}, {"score": 0.004099340908974491, "phrase": "target_language"}, {"score": 0.0035153544006182834, "phrase": "code_generator"}, {"score": 0.00336428077531883, "phrase": "uniform_treatment"}, {"score": 0.0032433414042726356, "phrase": "simple_demonstration_prototype"}], "paper_keywords": [""], "paper_abstract": "This paper presents an exercise to facilitate refactoring techniques not only on generated code, but also on generator templates by reusing existing refactoring techniques from the target language. Refactoring is particularly useful if not only the generated classes but also the template defining the result of the code generator can be adapted in a uniform treatment. We describe a simple demonstration prototype that illustrates our approach. The demonstration is based on the idea to define the templates for code generation themselves as compilable and therefore refactorable source code. However, this limits the directives embedded in the template used for code generation, as we have to embed those as comments. We explore how far this approach carries and where its limits are.", "paper_title": "Techniques for lightweight generator refactoring", "paper_id": "WOS:000241630000019"}