{"auto_keywords": [{"score": 0.04954517773618333, "phrase": "multiple_stream_time_series"}, {"score": 0.01126130884556076, "phrase": "stream_time_series"}, {"score": 0.0084884039243933, "phrase": "ares"}, {"score": 0.00481495049065317, "phrase": "efficient_similarity"}, {"score": 0.004620957579769604, "phrase": "time-series_databases"}, {"score": 0.004569414098372132, "phrase": "wide_spectrum"}, {"score": 0.004352592156102578, "phrase": "sj_query"}, {"score": 0.004008749730113699, "phrase": "matching_threshold"}, {"score": 0.003978866233891427, "phrase": "previous_work"}, {"score": 0.003890540531028228, "phrase": "static_time-series_databases"}, {"score": 0.003775803846431323, "phrase": "disk-based_multidimensional_indexes"}, {"score": 0.0036781781340563748, "phrase": "nested_loop"}, {"score": 0.0034643747383816164, "phrase": "similar_subsequences"}, {"score": 0.003387431241133385, "phrase": "low_memory_consumption"}, {"score": 0.003362163770566293, "phrase": "low_processing_cost"}, {"score": 0.003238616481108356, "phrase": "time-varying_stream_data"}, {"score": 0.0031666711243198992, "phrase": "existing_approaches"}, {"score": 0.0031430451507177388, "phrase": "static_databases"}, {"score": 0.0030388841099720843, "phrase": "efficient_and_effective_approach"}, {"score": 0.002883655046524374, "phrase": "novel_method"}, {"score": 0.00286213454317036, "phrase": "adaptive_radius-based"}, {"score": 0.00276725708403607, "phrase": "similarity_search"}, {"score": 0.0027466028572379455, "phrase": "false_dismissals"}, {"score": 0.002685558057339722, "phrase": "sj_processing"}, {"score": 0.002606264765409507, "phrase": "formal_cost_model"}, {"score": 0.0024916819803100635, "phrase": "data_characteristics"}, {"score": 0.0024546155360991567, "phrase": "minimum_number"}, {"score": 0.002436289099444074, "phrase": "refined_candidate_pairs"}, {"score": 0.002373214852820709, "phrase": "stream_processing"}, {"score": 0.0023031224517224757, "phrase": "cost_model"}, {"score": 0.0022688546528208133, "phrase": "space-efficient_synopses"}, {"score": 0.0021609589091422608, "phrase": "extensive_experiments"}], "paper_keywords": ["Stream time series", " ARES", " similarity join", " synopsis"], "paper_abstract": "Similarity join (SJ) in time-series databases has a wide spectrum of applications such as data cleaning and mining. Specifically, an SJ query retrieves all pairs of (sub) sequences from two time-series databases that epsilon-match with each other, where epsilon is the matching threshold. Previous work on this problem usually considers static time-series databases, where queries are performed either on disk-based multidimensional indexes built on static data or by nested loop join (NLJ) without indexes. SJ over multiple stream time series, which continuously outputs pairs of similar subsequences from stream time series, strongly requires low memory consumption, low processing cost, and query procedures that are themselves adaptive to time-varying stream data. These requirements invalidate the existing approaches in static databases. In this paper, we propose an efficient and effective approach to perform SJ among multiple stream time series incrementally. In particular, we present a novel method, Adaptive Radius-based Search (ARES), which can answer the similarity search without false dismissals and is seamlessly integrated into SJ processing. Most importantly, we provide a formal cost model for ARES, based on which ARES can be adaptive to data characteristics, achieving the minimum number of refined candidate pairs, and thus, suitable for stream processing. Furthermore, in light of the cost model, we utilize space-efficient synopses that are constructed for stream time series to further reduce the candidate set. Extensive experiments demonstrate the efficiency and effectiveness of our proposed approach.", "paper_title": "Efficient Similarity Join over Multiple Stream Time Series", "paper_id": "WOS:000269851800004"}