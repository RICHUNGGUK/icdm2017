{"auto_keywords": [{"score": 0.041382532531526364, "phrase": "python"}, {"score": 0.015174085310450744, "phrase": "fortran"}, {"score": 0.0048149526359914955, "phrase": "blitz"}, {"score": 0.004483120978156604, "phrase": "language_choice_tradeoffs"}, {"score": 0.0042819270655224916, "phrase": "advection_equation"}, {"score": 0.0038862297330905836, "phrase": "fortran's_built-in_array_containers"}, {"score": 0.0037307208089736835, "phrase": "multidimensional_positive-definite_advective_transport_algorithm"}, {"score": 0.0036181717017041387, "phrase": "introduced_codes"}, {"score": 0.0033004240095380623, "phrase": "mathematical_notation"}, {"score": 0.0031845067058084583, "phrase": "program_code"}, {"score": 0.0030569913145731408, "phrase": "programming_language_choice"}, {"score": 0.0029798924689472014, "phrase": "main_angles"}, {"score": 0.0029196116767956273, "phrase": "code_brevity"}, {"score": 0.0027041907335656782, "phrase": "performance_tests"}, {"score": 0.0026359661683151006, "phrase": "free_open-source_compilers"}, {"score": 0.00240426758768164, "phrase": "standard_terpreter"}, {"score": 0.002331641523873951, "phrase": "pypy_implementation"}, {"score": 0.002284444272376043, "phrase": "entire_source_code"}, {"score": 0.0021049977753042253, "phrase": "gnu_gpl_license"}], "paper_keywords": ["Object-oriented programming", " advection equation", " MPDATA", " C plus", " Fortran", " Python"], "paper_abstract": "Three object-oriented implementations of a prototype solver of the advection equation are introduced. The programs are based on Blitz++ (C++), NumPy (Python) and Fortran's built-in array containers. The solvers constitute mentations of the Multidimensional Positive-Definite Advective Transport Algorithm (MPDATA). The introduced codes serve examples for how the application of object-oriented programming (OOP) techniques and new language constructs from C++ and Fortran 2008 allow to reproduce the mathematical notation used in the literature within the program code. A on the tradeoffs of the programming language choice is presented. The main angles of comparison are code brevity and clarity (and hence maintainability and auditability) as well as performance. All performance tests are carried out using free open-source compilers. In the case of Python, a significant performance gain is observed when switching from the standard terpreter (CPython) to the PyPy implementation of Python. Entire source code of all three implementations is embedded in text and is licensed under the terms of the GNU GPL license.", "paper_title": "Formula translation in Blitz plus plus , NumPy and modern Fortran: A case study of the language choice tradeoffs", "paper_id": "WOS:000338983100002"}