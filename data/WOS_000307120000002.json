{"auto_keywords": [{"score": 0.04965333175972822, "phrase": "process_algebra"}, {"score": 0.00481495049065317, "phrase": "service_protocols"}, {"score": 0.00470862827326028, "phrase": "-the-fly_reduction_techniques"}, {"score": 0.0044430006374681285, "phrase": "modern_software_engineering"}, {"score": 0.004344855841195913, "phrase": "software_entities"}, {"score": 0.003868257410961701, "phrase": "application_requirements"}, {"score": 0.0035216195857272403, "phrase": "software_adaptation"}, {"score": 0.003459191419478298, "phrase": "hot_topic"}, {"score": 0.00341309513558946, "phrase": "nonintrusive_solution"}, {"score": 0.0033227310662785293, "phrase": "corrective_pieces"}, {"score": 0.0031916366459252992, "phrase": "complex_issue"}, {"score": 0.0031350397225314262, "phrase": "behavioral_interfaces"}, {"score": 0.002741269087816162, "phrase": "reused_entities'_conversations"}, {"score": 0.0027047136845332917, "phrase": "abstract_specification"}, {"score": 0.0025178072071268534, "phrase": "adaptation_problem"}, {"score": 0.0024292428060702803, "phrase": "exploration_and_reduction_techniques"}, {"score": 0.0023968383387667404, "phrase": "adaptor_protocols"}, {"score": 0.0023437863565921053, "phrase": "model-driven_engineering_paradigm"}, {"score": 0.0023021895404322767, "phrase": "service-oriented_computing"}, {"score": 0.002271476019266231, "phrase": "representative_field"}, {"score": 0.002251227801482381, "phrase": "composition-based_software_engineering"}, {"score": 0.0022112700457629494, "phrase": "service_description_languages"}, {"score": 0.002162316557411786, "phrase": "adaptation_process"}, {"score": 0.0021049977753042253, "phrase": "centralized_service_compositions"}], "paper_keywords": ["Service composition", " software adaptation", " interfaces", " protocols", " mismatch", " adaptation contracts", " process algebra", " on-the-fly generation", " verification", " tools"], "paper_abstract": "Reuse and composition are increasingly advocated and put into practice in modern software engineering. However, the software entities that are to be reused to build an application, e.g., services, have seldom been developed to integrate and to cope with the application requirements. As a consequence, they present mismatch, which directly hampers their reusability and the possibility of composing them. Software Adaptation has become a hot topic as a nonintrusive solution to work mismatch out using corrective pieces named adaptors. However, adaptation is a complex issue, especially when behavioral interfaces, or conversations, are taken into account. In this paper, we present state-of-the-art techniques to generate adaptors given the description of reused entities' conversations and an abstract specification of the way mismatch can be solved. We use a process algebra to encode the adaptation problem, and propose on-the-fly exploration and reduction techniques to compute adaptor protocols. Our approach follows the model-driven engineering paradigm, applied to service-oriented computing as a representative field of composition-based software engineering. We take service description languages as inputs of the adaptation process and we implement adaptors as centralized service compositions, i.e., orchestrations. Our approach is completely tool supported.", "paper_title": "Adaptation of Service Protocols Using Process Algebra and On-the-Fly Reduction Techniques", "paper_id": "WOS:000307120000002"}