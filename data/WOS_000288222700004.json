{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "minimal_unsatisfiable_subsets"}, {"score": 0.012352704539237177, "phrase": "overconstrained_csps"}, {"score": 0.012229053643276065, "phrase": "finite_domains"}, {"score": 0.012106625323642269, "phrase": "binary_constraints"}, {"score": 0.01089203958818959, "phrase": "subset_space"}, {"score": 0.00894751628048148, "phrase": "proposed_algorithms"}, {"score": 0.004766388573192505, "phrase": "over-constrained_csps"}, {"score": 0.0044398358177815305, "phrase": "overconstrained_csp"}, {"score": 0.00317643367669255, "phrase": "inconsistent_subsets"}, {"score": 0.003019189898170698, "phrase": "basic_approach"}, {"score": 0.0028551716387011637, "phrase": "different_order"}, {"score": 0.0027000395818027366, "phrase": "anytime_algorithms"}, {"score": 0.0026592094867526803, "phrase": "time_limit"}, {"score": 0.0025793874956029795, "phrase": "algorithm's_search"}, {"score": 0.0024268427312855384, "phrase": "muses"}, {"score": 0.0024023079401125492, "phrase": "experimental_evaluation"}, {"score": 0.002237357942660354, "phrase": "existing_indirect_algorithms"}, {"score": 0.0021049977753042253, "phrase": "large_csp_benchmarks"}], "paper_keywords": ["Overconstrained CSPs", " minimal unsatisfiable subsets", " MAX-CSP"], "paper_abstract": "In many situations, an explanation of the reasons behind inconsistency in an overconstrained CSP is required. This explanation can be given in terms of minimal unsatisfiable subsets (MUSes) of constraints. This paper presents algorithms for finding minimal unsatisfiable subsets (MUSes) of constraints in overconstrained CSPs with finite domains and binary constraints. The approach followed in overconstrained CSPs with finite domains and binary constraints. The approach followed is to generate subsets in the subset space, test them for consistency and record the inconsistent subsets found. We present three algorithms as variations of this basic approach. Each algorithm generates subsets in the subset space in a different order and curtails search by employing various search pruning mechanisms. The proposed algorithms are anytime algorithms: a time limit can be set on an algorithm's search and the algorithm can be made to find a subset of MUSes. Experimental evaluation of the proposed algorithms demonstrates that they perform two to three orders of magnitude better than the existing indirect algorithms. Furthermore, the algorithms are able to find MUSes in large CSP benchmarks.", "paper_title": "DIRECT ALGORITHMS FOR FINDING MINIMAL UNSATISFIABLE SUBSETS IN OVER-CONSTRAINED CSPs", "paper_id": "WOS:000288222700004"}