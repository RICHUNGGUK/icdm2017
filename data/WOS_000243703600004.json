{"auto_keywords": [{"score": 0.04410293038185961, "phrase": "independent_disks"}, {"score": 0.00481501413591532, "phrase": "reliable"}, {"score": 0.004712988631183401, "phrase": "parity_cache_table_support"}, {"score": 0.004652845998457721, "phrase": "data_availability"}, {"score": 0.004593467306126913, "phrase": "high_performance_computing_environment"}, {"score": 0.00443878620915958, "phrase": "data-intensive_world"}, {"score": 0.004307714033714706, "phrase": "raid"}, {"score": 0.004127094600862448, "phrase": "redundant_nodes"}, {"score": 0.00385368199735867, "phrase": "reliability_problem"}, {"score": 0.003788196352457501, "phrase": "striped_file_system"}, {"score": 0.0037078961288626185, "phrase": "efficient_way"}, {"score": 0.003598317040926701, "phrase": "distributed_and_parallel_paradigms"}, {"score": 0.0034919649825540396, "phrase": "overall_reliability"}, {"score": 0.003447349911141396, "phrase": "disk_system"}, {"score": 0.0034179225740833055, "phrase": "n_fold"}, {"score": 0.003232653376857698, "phrase": "parallel_virtual_file_system"}, {"score": 0.0031505544969981096, "phrase": "open_source"}, {"score": 0.0030054007508185858, "phrase": "linux_environment"}, {"score": 0.002879237498994052, "phrase": "fault_tolerance"}, {"score": 0.0028302635493019867, "phrase": "reliable_parallel_file_system"}, {"score": 0.0027230880516264685, "phrase": "reliability_support"}, {"score": 0.002665306227053693, "phrase": "mttf"}, {"score": 0.0026425357050743003, "phrase": "mean_time"}, {"score": 0.0024566655761509276, "phrase": "parity_cache_table"}, {"score": 0.0023636038312749245, "phrase": "parity_updating"}, {"score": 0.0022067620864082566, "phrase": "pvfs"}, {"score": 0.0021231452870210965, "phrase": "write_performance"}], "paper_keywords": ["cluster", " reliability", " parallel virtual file system", " redundant array of independent disks", " parity cache table"], "paper_abstract": "Providing data availability in a high performance computing environment is very important, especially in this data-intensive world. Most clusters either equip with RAID (Redundant Array of Independent Disks) devices or use redundant nodes to protect data from loss. However, neither of these can really solve the reliability problem incurred in a striped file system. Striping provides an efficient way to increase I/O throughput both in the distributed and parallel paradigms. But it also reduces the overall reliability of a disk system by N fold, where N is the number of independent disks in the system. Parallel Virtual File System (PVFS) is an open source parallel file system which has been widely used in the Linux environment. Its striping structure is good for performance but provides no fault tolerance. We implement Reliable Parallel File System (RPFS) based on PVFS but with reliability support. Our quantitative analysis shows that MTTF (Mean Time To Failure) of our RPFS is better than that of PVFS. Besides, we propose a parity cache table (PCT) to alleviate the penalty of parity updating. The evaluation of our RPFS shows that its read performance is almost the same as that of PVFS (2% to 13% degradation). As to the write performance, 28% to 45% improvement can be achieved depending on the behavior of the operations.", "paper_title": "Reliable parallel file system with parity cache table support", "paper_id": "WOS:000243703600004"}