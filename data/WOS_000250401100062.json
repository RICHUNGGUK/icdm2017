{"auto_keywords": [{"score": 0.03067008294770572, "phrase": "cache-oblivious_layouts"}, {"score": 0.00481495049065317, "phrase": "random-accessible_compressed_triangle"}, {"score": 0.004716520738331953, "phrase": "exponential_growth"}, {"score": 0.0046392209103157936, "phrase": "geometric_data"}, {"score": 0.00446987606516801, "phrase": "effective_use"}, {"score": 0.00443308765153716, "phrase": "multilevel_caches"}, {"score": 0.004396600680348434, "phrase": "limited_disk_storage"}, {"score": 0.004201202199968683, "phrase": "visualization_community"}, {"score": 0.004098291340525772, "phrase": "sequential_access_compression_schemes"}, {"score": 0.004031082737449308, "phrase": "cache-coherent_layouts"}, {"score": 0.003916098498242888, "phrase": "random_access"}, {"score": 0.003726533059542558, "phrase": "conflicting_modes"}, {"score": 0.0036958398682001015, "phrase": "data_access"}, {"score": 0.003560807940070886, "phrase": "novel_order-preserving_compression_method"}, {"score": 0.003459191419478298, "phrase": "compressed_triangle"}, {"score": 0.0031193028729331667, "phrase": "general_mesh_access_api"}, {"score": 0.003093595537995837, "phrase": "seamless_mesh_traversal"}, {"score": 0.0030680994147125364, "phrase": "incidence_queries"}, {"score": 0.0029805015010906013, "phrase": "particular_mesh_layout"}, {"score": 0.002778006389296707, "phrase": "high_cache_utilization"}, {"score": 0.002546708483171714, "phrase": "improved_performance"}, {"score": 0.002494531100339247, "phrase": "application_code_changes"}, {"score": 0.0024535580495414783, "phrase": "compression_rates"}, {"score": 0.0023249757987087055, "phrase": "reduced_data_transfer"}, {"score": 0.0021401625519713577, "phrase": "input_models"}], "paper_keywords": ["mesh compression", " random access", " cache-coherent layouts", " mesh data structures", " external memory algorithms"], "paper_abstract": "With the exponential growth in size of geometric data, it is becoming increasingly important to make effective use of multilevel caches, limited disk storage, and bandwidth. As a result, recent work in the visualization community has focused either on designing sequential access compression schemes or on producing cache-coherent layouts of (uncompressed) meshes for random access. Unfortunately combining these two strategies is challenging as they fundamentally assume conflicting modes of data access. In this paper, we propose a novel order-preserving compression method that supports transparent random access to compressed triangle meshes. Our decompression method selectively fetches from disk, decodes, and caches in memory requested parts of a mesh. We also provide a general mesh access API for seamless mesh traversal and incidence queries. While the method imposes no particular mesh layout, it is especially suitable for cache-oblivious layouts, which minimize the number of decompression 1/O requests and provide high cache utilization during access to decompressed, in-memory portions of the mesh. Moreover, the transparency of our scheme enables improved performance without the need for application code changes. We achieve compression rates on the order of 20:1 and significantly improved 1/O performance due to reduced data transfer. To demonstrate the benefits of our method, we implement two common applications as benchmarks. By using cache-oblivious layouts for the input models, we observe 2-6 times overall speedup compared to using uncompressed meshes.", "paper_title": "Random-accessible compressed triangle meshes", "paper_id": "WOS:000250401100062"}