{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "storage-centric_coordination"}, {"score": 0.0038900709793274484, "phrase": "eventual_unique_leader"}, {"score": 0.002572001496778222, "phrase": "first_leader_algorithm"}, {"score": 0.0025042115651986332, "phrase": "shared_memory_environments"}, {"score": 0.0023739321566540682, "phrase": "eventual_leader"}, {"score": 0.0023113506171584157, "phrase": "global_stabilization_time"}, {"score": 0.0021049977753042253, "phrase": "light-weight_lease"}], "paper_keywords": ["leases", " file systems", " mutual exclusion", " consensus"], "paper_abstract": "Reaching agreement among processes sharing read/write memory is possible only in the presence of an eventual unique leader. A leader that fails must be recoverable, but on the other hand, a live and well-performing leader should never be decrowned. This paper presents the first leader algorithm in shared memory environments that guarantees an eventual leader following global stabilization time. The construction is built using light-weight lease and renew primitives. The implementation is simple, yet efficient. It is uniform, in the sense that the number of potentially contending processes for leadership is not a priori known.", "paper_title": "Light-weight leases for storage-centric coordination", "paper_id": "WOS:000238022500003"}