{"auto_keywords": [{"score": 0.036744085913636274, "phrase": "gbtg"}, {"score": 0.015719716506582538, "phrase": "yougen"}, {"score": 0.012146978854533128, "phrase": "gbtg_tools"}, {"score": 0.004424441580112395, "phrase": "grammar-based_test_generation"}, {"score": 0.004353040792349733, "phrase": "context-free_grammars"}, {"score": 0.004213662826578328, "phrase": "test_cases"}, {"score": 0.004132178452877669, "phrase": "grammar_g"}, {"score": 0.0037599278182081056, "phrase": "generated_cases"}, {"score": 0.003398883295962739, "phrase": "industrial_projects"}, {"score": 0.0033439771810057717, "phrase": "academic_venues"}, {"score": 0.0033006894756949776, "phrase": "demonstrated_effectiveness"}, {"score": 0.0032685906228558706, "phrase": "tool_support"}, {"score": 0.003194898129853895, "phrase": "specific_domains"}, {"score": 0.0025934566395017424, "phrase": "previous_tools"}, {"score": 0.0025266963982350523, "phrase": "-array_tags"}, {"score": 0.0024858445890050614, "phrase": "generalized_form"}, {"score": 0.0024696889464469805, "phrase": "pairwise_testing"}, {"score": 0.0024297565926197505, "phrase": "considerable_power"}, {"score": 0.0023594945794976493, "phrase": "limited_form"}, {"score": 0.0023441581629788347, "phrase": "previous_gbtg_tools"}, {"score": 0.0022912596877648723, "phrase": "yougen_tags"}, {"score": 0.0022763657774198184, "phrase": "parse_trees"}, {"score": 0.0022542058337152913, "phrase": "new_construct"}, {"score": 0.002239552244442444, "phrase": "generation_trees"}, {"score": 0.002189009136006588, "phrase": "simple_examples"}, {"score": 0.002153605290802688, "phrase": "industrial_case_studies"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["automated testing", " grammar-based test generation", " covering array", " firewall testing", " RSS", " XML"], "paper_abstract": "Grammars are traditionally used to recognize or parse sentences in a language, but they can also be used to generate sentences. In grammar-based test generation (GBTG), context-free grammars are used to generate sentences that are interpreted as test cases. A generator reads a grammar G and generates L(G), the language accepted by the grammar. Often L(G) is so large that it is not practical to execute all of the generated cases. Therefore, GBTG tools support 'tags': extra-grammatical annotations which restrict the generation. Since its introduction in the early 1970s, GBTG has become well established: proven on industrial projects and widely published in academic venues. Despite the demonstrated effectiveness, the tool support is uneven; some tools target specific domains, e.g. compiler testing, while others are proprietary. The tools can be difficult to use and the precise meaning of the tags are sometimes unclear. As a result, while many testing practitioners and researchers are aware of GBTG, few have detailed knowledge or experience. We present YouGen, a new GBTG tool supporting many of the tags provided by previous tools. In addition, YouGen incorporates covering-array tags, which support a generalized form of pairwise testing. These tags add considerable power to GBTG tools and have been available only in limited form in previous GBTG tools. We provide semantics for the YouGen tags using parse trees and a new construct, generation trees. We illustrate YouGen with both simple examples and a number of industrial case studies. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Grammar-based test generation with YouGen", "paper_id": "WOS:000288080800005"}