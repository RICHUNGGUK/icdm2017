{"auto_keywords": [{"score": 0.03780999217534513, "phrase": "semi-static_methodology"}, {"score": 0.02475303182642929, "phrase": "semi-static_approach"}, {"score": 0.00481495049065317, "phrase": "dynamic_iterative_tasks"}, {"score": 0.004779876533667754, "phrase": "heterogeneous_computing_systems"}, {"score": 0.004693300099911199, "phrase": "execution_time"}, {"score": 0.004642105253191792, "phrase": "iterative_application"}, {"score": 0.004591466267316524, "phrase": "heterogeneous_parallel_computing_environment"}, {"score": 0.004541377162789232, "phrase": "appropriate_mapping_scheme"}, {"score": 0.004190305872545087, "phrase": "application_subtasks"}, {"score": 0.0041294419262414995, "phrase": "priori_or_change"}, {"score": 0.003528244907944199, "phrase": "initial_mapping"}, {"score": 0.0034516024325468653, "phrase": "application_iterations"}, {"score": 0.00336428077531883, "phrase": "changing_characteristics"}, {"score": 0.003327534497764259, "phrase": "application's_input_data"}, {"score": 0.0032314884215434857, "phrase": "application's_execution_time"}, {"score": 0.0030476078950483158, "phrase": "on-line_use"}, {"score": 0.0030253688063143157, "phrase": "off-line-derived_mappings"}, {"score": 0.002992313172550772, "phrase": "off-line_phase"}, {"score": 0.0029380187414193653, "phrase": "genetic_algorithm"}, {"score": 0.0028847066125323893, "phrase": "high-quality_mappings"}, {"score": 0.0028014064098604093, "phrase": "dynamic_parameters"}, {"score": 0.002770791022032813, "phrase": "dynamic_parameter_space_partitioning_and_sampling_scheme"}, {"score": 0.002710557619357275, "phrase": "parameter_space"}, {"score": 0.002613056713968863, "phrase": "\"best\"_mapping"}, {"score": 0.00253758084385033, "phrase": "mapping_table"}, {"score": 0.0025006623485285895, "phrase": "on-line_phase"}, {"score": 0.002473325513637559, "phrase": "actual_dynamic_parameters"}, {"score": 0.0024284249875593253, "phrase": "off-line-derived_mapping_table"}, {"score": 0.0023582694348219233, "phrase": "experimental_results"}, {"score": 0.002298544073884724, "phrase": "dynamic_on-line_approach"}, {"score": 0.0022077244919858218, "phrase": "line_ga_approach"}], "paper_keywords": ["heterogeneous computing", " parallel processing", " mapping", " scheduling", " iterative task graphs", " genetic algorithms", " automatic target recognition"], "paper_abstract": "Minimization of the execution time of an iterative application in a heterogeneous parallel computing environment requires an appropriate mapping scheme for matching and scheduling the subtasks of a given application onto the processors. Often, some of the characteristics of the application subtasks are unknown a priori or change from iteration to iteration during execution-time based on the inputs being processed. In such a scenario, it may not be feasible to use the same off-line-derived mapping for each iteration of the application. One possibility is to employ a semi-static methodology that starts with an initial mapping but dynamically performs remapping between application iterations by observing the effects of the changing characteristics of the application's input data, called dynamic parameters, on the application's execution time. A contribution in this paper is to implement and evaluate a semi-static methodology involving the on-line use of off-line-derived mappings. The off-line phase is based on a genetic algorithm (GA) to generate high-quality mappings for a range of values for the dynamic parameters. A dynamic parameter space partitioning and sampling scheme is proposed that partitions the parameter space into a number of hyper-rectangles, within which the \"best\" mapping for each hyper-rectangle is stored in a mapping table. During the on-line phase, the actual dynamic parameters are observed and the off-line-derived mapping table is referenced to choose the most suitable mapping. Experimental results indicate that the semi-static approach outperforms a dynamic on-line approach and performs reasonably, close to an infeasible on-line GA approach. Furthermore, the semi-static approach considerably outperforms the method of using the same mapping for all iterations. (c) 2005 Elsevier Inc. All rights reserved.", "paper_title": "A semi-static approach to mapping dynamic iterative tasks onto heterogeneous computing systems", "paper_id": "WOS:000234656800006"}