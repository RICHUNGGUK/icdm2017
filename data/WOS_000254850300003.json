{"auto_keywords": [{"score": 0.035231073541781545, "phrase": "test_sequences"}, {"score": 0.013006903932045103, "phrase": "partial_model"}, {"score": 0.00481495049065317, "phrase": "communication_coverage_criteria"}, {"score": 0.0047895188927660525, "phrase": "partial_model_generation"}, {"score": 0.00475162193118036, "phrase": "software_integration_testing"}, {"score": 0.004578678036953076, "phrase": "timed_distributed_software_system"}, {"score": 0.004435436814742896, "phrase": "timed_interface_automata"}, {"score": 0.004400329132129292, "phrase": "computational_tree_logic"}, {"score": 0.004330941610682453, "phrase": "communication-based_coverage_criteria"}, {"score": 0.004228897769592282, "phrase": "communication_paths"}, {"score": 0.004195418010131832, "phrase": "proposed_method"}, {"score": 0.004129248271757936, "phrase": "component_integration"}, {"score": 0.004053362743156545, "phrase": "e.g._behaviour_specifications"}, {"score": 0.004031937401078058, "phrase": "markovian_usage_models"}, {"score": 0.003753498345597498, "phrase": "transmission_gear"}, {"score": 0.0036942726653704213, "phrase": "separated_models"}, {"score": 0.0036650099009321083, "phrase": "driver_behaviour"}, {"score": 0.0036359780843400625, "phrase": "engine_condition"}, {"score": 0.003466536738232506, "phrase": "concrete_coverage_goal"}, {"score": 0.0034390716697976563, "phrase": "model_checker"}, {"score": 0.003270092550315648, "phrase": "generated_test_sequences"}, {"score": 0.0032355864829403413, "phrase": "partial_test-model"}, {"score": 0.002996038498317138, "phrase": "additional_partial_models"}, {"score": 0.0029801852573740645, "phrase": "incremental_integration_testing"}, {"score": 0.002879158342988017, "phrase": "combinatorial_explosion"}, {"score": 0.002391067964886602, "phrase": "large_industrial_software_systems"}, {"score": 0.002365815362517737, "phrase": "particular_model_checker"}, {"score": 0.0023532894340888384, "phrase": "uppaal"}, {"score": 0.002231607958228148, "phrase": "potential_additional_benefit"}, {"score": 0.0021789194955896124, "phrase": "visual_description"}, {"score": 0.0021616339773325704, "phrase": "state-based_testing"}], "paper_keywords": ["integration testing", " distributed systems", " coverage criteria", " timed state-based specifications"], "paper_abstract": "This paper considers the problem of integration testing the components of a timed distributed software system. We assume that communication between the components is specified using timed interface automata and use computational tree logic (CTL) to define communication-based coverage criteria that refer to send- and receive-statements and communication paths. The proposed method enables testers to focus during component integration on such parts of the specification, e.g. behaviour specifications or Markovian usage models, that are involved in the communication between components to be integrated. A more specific application area of this approach is the integration of test-models, e.g. a transmission gear can be tested based on separated models for the driver behaviour, the engine condition, and the mechanical and hydraulical transmission states. Given such a state-based specification of a distributed system and a concrete coverage goal, a model checker is used in order to determine the coverage or generate test sequences that achieve the goal. Given the generated test sequences we derive a partial test-model of the components from which the test sequences were derived. The partial model can be used to drive further testing and can also be used as the basis for producing additional partial models in incremental integration testing. While the process of deriving the test sequences could suffer from a combinatorial explosion, the effort required to generate the partial model is polynomial in the number of test sequences and their length. Thus, where it is not feasible to produce test sequences that achieve a given type of coverage it is still possible to produce a partial model on the basis of test sequences generated to achieve some other criterion. As a result, the process of generating a partial model has the potential to scale to large industrial software systems. While a particular model checker, UPPAAL, was used, it should be relatively straightforward to adapt the approach for use with other CTL based model checkers. A potential additional benefit of the approach is that it provides a visual description of the state-based testing of distributed systems, which may be beneficial in other contexts such as education and comprehension.", "paper_title": "Using communication coverage criteria and partial model generation to assist software integration testing", "paper_id": "WOS:000254850300003"}