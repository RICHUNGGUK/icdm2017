{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "logical_frameworks"}, {"score": 0.004491678520807451, "phrase": "language_specifications"}, {"score": 0.004190019394361629, "phrase": "small_and_large-scale_applications"}, {"score": 0.0038485929962942776, "phrase": "general_infrastructure"}, {"score": 0.0036178264212372497, "phrase": "programming_languages"}, {"score": 0.003374655868348244, "phrase": "logical_framework"}, {"score": 0.0031477782772867655, "phrase": "dependently_typed_lambdacalculus"}, {"score": 0.003075583447856341, "phrase": "light-weight_variants"}, {"score": 0.00282470997972535, "phrase": "major_role"}, {"score": 0.0026347074232350503, "phrase": "logical_framework_technology"}, {"score": 0.0023278569001363263, "phrase": "run-time_performance"}, {"score": 0.00218807532188779, "phrase": "brief_introduction"}], "paper_keywords": [""], "paper_abstract": "In recent years, logical frameworks which support formalizing language specifications together with their meta-theory have been pervasively used in small and large-scale applications, from certifying code [2] to advocating a general infrastructure for formalizing the meta-theory and semantics of programming languages [5]. In particular, the logical framework LF [9], based on the dependently typed lambdacalculus, and light-weight variants of it like LFi [17] have played a major role in these applications. While the acceptance of logical framework technology has grown and they have matured, one of the most criticized points is concerned with the run-time performance. In this tutorial we give a brief introduction to logical frameworks, describe its state-of-the art and present recent advances in addressing some of the existing performance issues.", "paper_title": "Overcoming performance barriers: Efficient verification techniques for logical frameworks", "paper_id": "WOS:000240061200001"}