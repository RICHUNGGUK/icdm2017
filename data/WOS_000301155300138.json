{"auto_keywords": [{"score": 0.04924934083174297, "phrase": "multi-agent_systems"}, {"score": 0.004815133171259442, "phrase": "distributed"}, {"score": 0.0044896599221451216, "phrase": "software_agents"}, {"score": 0.004149792080414689, "phrase": "open_and_heterogeneous_multi-agent_systems"}, {"score": 0.003802135020791801, "phrase": "distributed_fashion"}, {"score": 0.003752550907120244, "phrase": "centralized_account"}, {"score": 0.003671338229632309, "phrase": "single_point"}, {"score": 0.003498782065781398, "phrase": "result_fault-tolerance"}, {"score": 0.003393206299636482, "phrase": "decentralized_management"}, {"score": 0.0032336801561165113, "phrase": "truly_distributed_computational_realizations"}, {"score": 0.00308163068747474, "phrase": "normative_structures"}, {"score": 0.0027741761880779535, "phrase": "dynamic_nature"}, {"score": 0.0027140798043053986, "phrase": "potential_concurrency"}, {"score": 0.002690406375639144, "phrase": "agents'_actions"}, {"score": 0.0024113009621042677, "phrase": "run-time_algorithm"}, {"score": 0.002297831085501592, "phrase": "multi-agent_system"}, {"score": 0.0021610874773389096, "phrase": "distributed_setup"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Norm", " Software agents", " Normative conflict", " Multi-agent systems"], "paper_abstract": "Norms explicitly represent prohibitions, permissions and obligations associated with software agents, changing as agents act and interact in pursuit of their goals. Norms provide means of regulating open and heterogeneous multi-agent systems; however, in order to truly reflect the nature of multi-agent systems, norms should be managed in a distributed fashion. A centralized account of norms creates a single point-of-failure and bottlenecks, and as a result fault-tolerance and scalability are jeopardized. The decentralized management of norms is, nevertheless, a challenging issue and we observe a lack of truly distributed computational realizations of normative models. To remedy this, we propose normative structures, which allow the propagation of changes in the norms associated with agents, as a result of their actions. Due to the dynamic nature of multi-agent systems and the potential concurrency of agents' actions, conflicts may arise, whereby an action is simultaneously prohibited and obliged (or prohibited and permitted). We thus present a run-time algorithm to detect and resolve conflicts during the enactment of a multi-agent system, and show how this algorithm can be put to use within a distributed setup. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Distributed norm management for multi-agent systems", "paper_id": "WOS:000301155300138"}