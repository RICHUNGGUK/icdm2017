{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "helix"}, {"score": 0.0065451062411914125, "phrase": "helicoidal_properties"}, {"score": 0.006485071586384925, "phrase": "binary_trees"}, {"score": 0.005673628226328905, "phrase": "tree_height"}, {"score": 0.004770748156177377, "phrase": "ip"}, {"score": 0.004290112502811656, "phrase": "parallel_prefix"}, {"score": 0.004211594861013822, "phrase": "different_prefix_lengths"}, {"score": 0.0038222630466021494, "phrase": "prefix_modification"}, {"score": 0.0036328561748082138, "phrase": "long_and_numerous_prefixes"}, {"score": 0.0035335154419206634, "phrase": "single_memory_access"}, {"score": 0.003312121699003206, "phrase": "memory_accesses"}, {"score": 0.002936997013291548, "phrase": "single_memory"}, {"score": 0.0027275289970185015, "phrase": "single_field-programmable_gate_array"}, {"score": 0.002652878591019016, "phrase": "on-chip_memory"}, {"score": 0.0025447065763362984, "phrase": "external_memory"}, {"score": 0.0024073013566713788, "phrase": "fpga"}, {"score": 0.0023305762840188145, "phrase": "performance_penalties"}, {"score": 0.0022355167967736326, "phrase": "lookup_speeds"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["IP lookup", " Binary tree", " One memory access", " Helicoidal properties", " Double helix", " IPv6 lookup"], "paper_abstract": "In this paper, we propose an IF lookup scheme, called Helix, that performs parallel prefix matching at the different prefix lengths and uses the helicoidal properties of binary trees to reduce tree height. The reduction of the tree height is achieved without performing any prefix modification. Helix minimizes the amount of memory used to store long and numerous prefixes and achieves IF lookup and route updates in a single memory access. We evaluated the performance of Helix in terms of the number of memory accesses and amount of memory required for storing large IPv4 and IPv6 routing tables with up to 512,104 IPv4 and 389,956 IPv6 prefixes, respectively. In all the tested routing tables, Helix performs lookup in a single memory access while using very small memory amounts. We also show that Helix can be implemented on a single field-programmable gate array (FPGA) chip with on-chip memory for the IPv4 and IPv6 tables considered herein, without requiring external memory. Specifically, Helix uses up to 72% of the resources of an FPGA to accommodate the most demanding routing table, without performance penalties. The implementation shows that Helix may achieve lookup speeds beyond 1.2 billion packets per second (Gpps). (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Helix: IP lookup scheme based on helicoidal properties of binary trees", "paper_id": "WOS:000361403600006"}