{"auto_keywords": [{"score": 0.049604883316905664, "phrase": "deadlock_detection_scheduling"}, {"score": 0.046185630960691205, "phrase": "deadlock_detection"}, {"score": 0.014890878024236196, "phrase": "overall_performance"}, {"score": 0.014744873135853792, "phrase": "deadlock_handling"}, {"score": 0.00481495049065317, "phrase": "optimal_deadlock_detection_scheduling"}, {"score": 0.0044685410845412745, "phrase": "excessive_initiation"}, {"score": 0.0043804319008535555, "phrase": "overall_message_usage"}, {"score": 0.004294052530714228, "phrase": "degraded_system_performance"}, {"score": 0.004126349202545883, "phrase": "insufficient_initiation"}, {"score": 0.004024863549087511, "phrase": "deadlock_persistence_time"}, {"score": 0.00392586404888927, "phrase": "increased_deadlock_resolution_cost"}, {"score": 0.003716520760680603, "phrase": "performance_trade-off"}, {"score": 0.0031686717525002935, "phrase": "optimal_deadlock_detection_frequency"}, {"score": 0.0031061129850110994, "phrase": "minimum_long-run_mean_average_cost"}, {"score": 0.00299958349498286, "phrase": "message_complexities"}, {"score": 0.002925728709297618, "phrase": "resolution_algorithms"}, {"score": 0.0027834145465170292, "phrase": "deadlock_formation"}, {"score": 0.0026745503978347143, "phrase": "best_known_deadlock_detection"}, {"score": 0.0025571463140118805, "phrase": "asymptotically_optimal_frequency"}, {"score": 0.002481747081849503, "phrase": "overall_message_overhead"}, {"score": 0.0023846534541336326, "phrase": "total_number_n"}], "paper_keywords": ["deadlock detection scheduling", " deadlock formation rate", " deadlock persistence time"], "paper_abstract": "Deadlock detection scheduling is an important, yet often overlooked problem that can significantly affect the overall performance of deadlock handling. Excessive initiation of deadlock detection increases overall message usage, resulting in degraded system performance in the absence of deadlocks, while insufficient initiation of deadlock detection increases the deadlock persistence time, resulting in an increased deadlock resolution cost in the presence of deadlocks. The investigation of this performance trade-off, however, is missing in the literature. This paper studies the impact of deadlock detection scheduling on the overall performance of deadlock handling. In particular, we show that there exists an optimal deadlock detection frequency that yields the minimum long-run mean average cost, which is determined by the message complexities of the deadlock detection and resolution algorithms being used, as well as the rate of deadlock formation, denoted as lambda. For the best known deadlock detection and resolution algorithms, we show that the asymptotically optimal frequency of deadlock detection scheduling that minimizes the overall message overhead is O((lambda n)(1/3)) when the total number n of processes is sufficiently large. Furthermore, we show that, in general, fully distributed ( uncoordinated) deadlock detection scheduling cannot be performed as efficiently as centralized ( coordinated) deadlock detection scheduling.", "paper_title": "On optimal deadlock detection scheduling", "paper_id": "WOS:000239159700012"}