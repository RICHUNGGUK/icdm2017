{"auto_keywords": [{"score": 0.03722739012087964, "phrase": "distributed_real-time_java_applications"}, {"score": 0.03313033786159736, "phrase": "distributed_events"}, {"score": 0.00481495049065317, "phrase": "distributed_real-time_java"}, {"score": 0.004546043906503261, "phrase": "java"}, {"score": 0.004475022550508119, "phrase": "programming_language"}, {"score": 0.004428452434981208, "phrase": "real-time_applications"}, {"score": 0.004291617358806677, "phrase": "industrial_middleware"}, {"score": 0.003926359151817743, "phrase": "increased_portability"}, {"score": 0.0036873373225096624, "phrase": "large_distributed_applications"}, {"score": 0.0035733198242955634, "phrase": "dual_communication_model"}, {"score": 0.0032861588691414667, "phrase": "remote_invocations"}, {"score": 0.003085989256759819, "phrase": "proposed_model"}, {"score": 0.0029284999172756103, "phrase": "r._i."}, {"score": 0.002637160140011997, "phrase": "additional_support"}, {"score": 0.002253461585851626, "phrase": "current_api"}, {"score": 0.0021049977753042253, "phrase": "reference_implementation"}], "paper_keywords": ["Distributed real-time specification for Java (DRTSJ)", " middleware for factory communications", " real-time Java middleware", " real-time specification for Java (RTSJ)"], "paper_abstract": "More-and-more, the use of Java as a programming language for real-time applications is becoming of interest in industrial middleware. This is mainly because it offers advantages for the programmer as reduced deployment times, increased portability, and a number of APIs that may be integrated in large distributed applications. This paper contributes a dual communication model for distributed real-time Java applications. Current efforts in distributed real-time Java [e. g., The Distributed Real Time Specification for Java (DRTSJ)] are mainly focused on remote invocations (R. I.) and set aside other valuable approaches such as distributed events. The proposed model offers two choices for developing distributed real-time Java applications (one based on R. I., and another on distributed events), which may be used to develop applications. Both models include an additional support for asynchronism in communications, a feature that may speed up their communication performance. This paper includes a description for the two models, the changes that are required in the current API to accommodate them, and an empirical evaluation of their performance on a reference implementation.", "paper_title": "A Dual Programming Model for Distributed Real-Time Java", "paper_id": "WOS:000296728600022"}