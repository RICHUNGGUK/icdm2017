{"auto_keywords": [{"score": 0.041652837252711225, "phrase": "source_codes"}, {"score": 0.00481495049065317, "phrase": "software_diagrams"}, {"score": 0.0046781613377273774, "phrase": "iterative_software_development_methodology"}, {"score": 0.004545240514015278, "phrase": "version_control_system"}, {"score": 0.004168618849008299, "phrase": "modification_histories"}, {"score": 0.003643607569483598, "phrase": "conventional_version_control_systems"}, {"score": 0.0033737457695128203, "phrase": "logical_unit"}, {"score": 0.0029203055813347874, "phrase": "version_control_technique"}, {"score": 0.002837188425640173, "phrase": "diagrammatical_models"}, {"score": 0.0027830917623582903, "phrase": "logical_units"}, {"score": 0.0024556852466581527, "phrase": "version_control_functions"}, {"score": 0.0023857603808363527, "phrase": "meta-case_tool"}, {"score": 0.0022302306304023602, "phrase": "modeling_tool"}], "paper_keywords": ["UML diagram", " version control system", " meta-CASE", " repository"], "paper_abstract": "In iterative software development methodology, a version control system is used in order to record and manage modification histories of products such as source codes and models described in diagrams. However, conventional version control systems cannot manage the models as a logical unit because the systems mainly handle source codes. In this paper, we propose a version control technique for handling diagrammatical models as logical units. Then we illustrate the feasibility of our approach with the implementation of version control functions of a meta-CASE tool that is able to generate a modeling tool in order to deal with various diagrams.", "paper_title": "Meta-modeling based version control system for software diagrams", "paper_id": "WOS:000237203100009"}