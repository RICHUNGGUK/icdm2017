{"auto_keywords": [{"score": 0.004215397034321004, "phrase": "minimum_total_weighted_completion_time_problem"}, {"score": 0.003797491087815299, "phrase": "np"}, {"score": 0.003355515315708125, "phrase": "best_improving_neighbor"}, {"score": 0.0031393948330209224, "phrase": "weighted_matching"}, {"score": 0.003051073364818384, "phrase": "first_neighborhood"}, {"score": 0.002909342017421165, "phrase": "general_fashion"}, {"score": 0.002854505078275351, "phrase": "combined_operations"}, {"score": 0.0027741761880779535, "phrase": "basic_neighborhood"}, {"score": 0.0026705669656375197, "phrase": "basic_neighborhoods"}, {"score": 0.002546466113418944, "phrase": "second_approach"}, {"score": 0.002359759876402679, "phrase": "job_sets"}, {"score": 0.0021049977753042253, "phrase": "computational_study"}], "paper_keywords": ["Scheduling", " Parallel machines", " Total weighted completion time", " Very large-scale neighborhoods", " Local search"], "paper_abstract": "In this paper we study very large-scale neighborhoods for the minimum total weighted completion time problem on parallel machines, which is known to be strongly NP-hard. We develop two different ideas leading to very large-scale neighborhoods in which the best improving neighbor can be determined by calculating a weighted matching. The first neighborhood is introduced in a general fashion using combined operations of a basic neighborhood. Several examples for basic neighborhoods are given. The second approach is based on a partitioning of the job sets on the machines and a reassignment of them. In a computational study we evaluate the possibilities and the limitations of the presented very large-scale neighborhoods.", "paper_title": "Matching based very large-scale neighborhoods for parallel machine scheduling", "paper_id": "WOS:000297197900001"}