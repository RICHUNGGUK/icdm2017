{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "delay-insensitive_dual-rail_asynchronous_logic"}, {"score": 0.004621148492564008, "phrase": "existing_synchronous_logic_synthesis_tools"}, {"score": 0.004496280772084575, "phrase": "independent_single-rail_synchronous_boolean_network"}, {"score": 0.004179480763003705, "phrase": "dual-rail_boolean_network"}, {"score": 0.0039928721865882, "phrase": "formulated_constraint"}, {"score": 0.00393852508392789, "phrase": "hazard-free_implementation"}, {"score": 0.003849579089885659, "phrase": "dependent_mapping_procedure"}, {"score": 0.0037626342268042997, "phrase": "mcnc_and_iscas_benchmark_sets"}, {"score": 0.0036776458116294986, "phrase": "area_overhead"}, {"score": 0.0035945701438887282, "phrase": "synchronous_implementation"}, {"score": 0.003465521267039616, "phrase": "asynchronous_logic"}, {"score": 0.003356396922662246, "phrase": "and-or_nodes"}, {"score": 0.002769950045729965, "phrase": "detailed_comparison"}, {"score": 0.0026704265616705023, "phrase": "completion_detection_logic_inputs"}, {"score": 0.0024819522818492284, "phrase": "completion_detection"}, {"score": 0.0023818288346547692, "phrase": "network_structure"}, {"score": 0.002327956449278255, "phrase": "simple_gates"}, {"score": 0.002203570941628287, "phrase": "total_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Asynchronous logic", " Decomposition", " Multi-level implementation", " Boolean network", " Node"], "paper_abstract": "A synthesis flow oriented on producing the delay-insensitive dual-rail asynchronous logic is proposed. Within this flow, the existing synchronous logic synthesis tools are exploited to design technology independent single-rail synchronous Boolean network of complex (AND-OR) nodes. Next, the transformation into a dual-rail Boolean network is done. Each node is minimized under the formulated constraint to ensure hazard-free implementation. Then the technology dependent mapping procedure is applied. The MCNC and ISCAS benchmark sets are processed and the area overhead with respect to the synchronous implementation is evaluated. The implementations of the asynchronous logic obtained using the proposed (with AND-OR nodes) and the state-of-the-art (nodes are designed based on DIMS, direct logic and NCL) network structures are compared. A method, where nodes are designed as simple (NAND, NOR, etc.) gates is chosen for a detailed comparison. In our approach, the number of completion detection logic inputs is reduced significantly, since the number of nodes that should be supplied with the completion detection is less than in the case of the network structure that is based on simple gates. As a result, the improvement in sense of the total complexity and performance is obtained. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Dual-rail asynchronous logic multi-level implementation", "paper_id": "WOS:000328431900016"}