{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "jvm_access_control"}, {"score": 0.034930859844812624, "phrase": "type_system"}, {"score": 0.004615202066192795, "phrase": "static_type_system"}, {"score": 0.004518442937844318, "phrase": "java_virtual_machine"}, {"score": 0.004270178957872099, "phrase": "access_control_mechanism"}, {"score": 0.004064117897000019, "phrase": "java_implementation"}, {"score": 0.0038953958723049287, "phrase": "type_consistency"}, {"score": 0.0033817999428800457, "phrase": "prescribed_access_policy"}, {"score": 0.0030847461428168614, "phrase": "operational_semantics"}, {"score": 0.0030199761431186434, "phrase": "access_control"}, {"score": 0.0029150253706493852, "phrase": "java_stack_inspection"}, {"score": 0.0027741761880779535, "phrase": "well-typed_code"}, {"score": 0.0026967596578196325, "phrase": "access_policy"}, {"score": 0.002548331088496964, "phrase": "type_inference_algorithm"}, {"score": 0.002211947103318718, "phrase": "static_system"}, {"score": 0.0021049977753042253, "phrase": "costly_runtime_stack_inspection"}], "paper_keywords": ["languages", " security", " theory", " verification", " JVM", " access control", " stack inspection", " type system", " type inference"], "paper_abstract": "This article presents a static type system for the Java virtual machine (JVM) code that enforces an access control mechanism similar to that found in a Java implementation. In addition to verifying type consistency of a given JVM code, the type system statically verifies whether the code accesses only those resources that are granted by the prescribed access policy. The type system is proved to be sound with respect to an operational semantics that enforces access control dynamically, similar to Java stack inspection. This result ensures that \"well-typed code cannot violate access policy.\" The authors then develop a type inference algorithm and show that it is sound with respect to the type system. These results allow us to develop a static system for JVM access control, without resorting to costly runtime stack inspection.", "paper_title": "A static type system for JVM access control", "paper_id": "WOS:000243927300004"}