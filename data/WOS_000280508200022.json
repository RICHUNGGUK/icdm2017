{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "distributed_systems"}, {"score": 0.011774641694680756, "phrase": "prolog"}, {"score": 0.00989507954582338, "phrase": "dahl"}, {"score": 0.004498213310668266, "phrase": "difficult_task"}, {"score": 0.004411588377842043, "phrase": "declarative_programming_techniques"}, {"score": 0.004284755353695709, "phrase": "promising_potential"}, {"score": 0.0038876302202924644, "phrase": "data_log-based_languages"}, {"score": 0.0036671822784770463, "phrase": "programming_distributed_systems"}, {"score": 0.003527181559366122, "phrase": "relatively_little_attention"}, {"score": 0.00342568771304873, "phrase": "application_area"}, {"score": 0.0031079352545607267, "phrase": "prolog-based_programming_system"}, {"score": 0.0029031614127920232, "phrase": "declarative_development"}, {"score": 0.002659527314613792, "phrase": "event-driven_control_mechanism"}, {"score": 0.002608218347502229, "phrase": "built-in_networking_procedures"}, {"score": 0.002436289099444074, "phrase": "distributed_hash-table_data_structure"}, {"score": 0.002297949552105756, "phrase": "byzantine_fault_tolerance"}, {"score": 0.0022101055924375725, "phrase": "distributed_software_model_checker"}, {"score": 0.0021049977753042253, "phrase": "dahl-indicates"}], "paper_keywords": ["distributed systems", " logic programming", " Prolog"], "paper_abstract": "Development of distributed systems is a difficult task. Declarative programming techniques hold a promising potential for effectively supporting programmer in this challenge. While Data log-based languages have been actively explored for programming distributed systems, Prolog received relatively little attention in this application area so far. In this paper we present a Prolog-based programming system, called DAHL, for the declarative development of distributed systems. DAHL extends Prolog with an event-driven control mechanism and built-in networking procedures. Our experimental evaluation using a distributed hash-table data structure, a protocol for achieving Byzantine fault tolerance, and a distributed software model checker-all implemented in DAHL-indicates the viability of the approach.", "paper_title": "Applying Prolog to develop distributed systems", "paper_id": "WOS:000280508200022"}