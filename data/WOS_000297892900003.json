{"auto_keywords": [{"score": 0.04512421328011444, "phrase": "test_suite"}, {"score": 0.04265347421798511, "phrase": "regression_testing"}, {"score": 0.014875025313889354, "phrase": "test_cases"}, {"score": 0.013843466017055288, "phrase": "mpls_testing_area"}, {"score": 0.0096817691825219, "phrase": "software_system"}, {"score": 0.009628137628867597, "phrase": "large_code"}, {"score": 0.00481495049065317, "phrase": "large_code_problems"}, {"score": 0.0047881480263782675, "phrase": "software_developers"}, {"score": 0.004175935415610626, "phrase": "cisco_ios."}, {"score": 0.0040382952886546825, "phrase": "mpls_area"}, {"score": 0.003724034990158436, "phrase": "safe_regression_test_selection_approach"}, {"score": 0.003641713874009232, "phrase": "modification-traversing_test_cases"}, {"score": 0.003601235776892337, "phrase": "fault-revealing_test_cases"}, {"score": 0.0035512680138425237, "phrase": "cw-nummin"}, {"score": 0.003531474887552889, "phrase": "cw-costmin"}, {"score": 0.003501991125315889, "phrase": "cw-costcov-b"}, {"score": 0.0034630606658026595, "phrase": "safe-mode_approach"}, {"score": 0.003405472159599442, "phrase": "full-modified_function_coverage"}, {"score": 0.003348838095597268, "phrase": "modified_functions"}, {"score": 0.0032747835779400212, "phrase": "fault_distribution"}, {"score": 0.003247435909361318, "phrase": "testing_area"}, {"score": 0.0031227931314333534, "phrase": "subject_program"}, {"score": 0.002895721231882758, "phrase": "test's_junction_reachability"}, {"score": 0.0028795712616923462, "phrase": "function's_test_intensity"}, {"score": 0.0026110523141576886, "phrase": "maximal_amount"}, {"score": 0.002596485860622193, "phrase": "function_coverage"}, {"score": 0.0022261705957258506, "phrase": "bug-fix_releases"}, {"score": 0.0021406417439887907, "phrase": "low_test_intensities"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Regression testing", " Test case selection", " Test coverage", " Test intensity", " Software maintenance"], "paper_abstract": "Software developers frequently conduct regression testing on a series of major, minor, or bug-fix software or firmware releases. However, retesting all test cases for each release is time-consuming. For example, it takes about 36 test-bed-days to thoroughly exercise a test suite made up of 2320 test cases for the MPLS testing area that contains 57,758 functions in Cisco IOS. The cost is infeasible for a series of regression testing on the MPLS area. Thus, the test suite needs to be reduced intelligently, not just randomly, and its fault detection capability must be kept as much as possible. The mode of safe regression test selection approach is adopted for seeking a subset of modification-traversing test cases to substitute for fault-revealing test cases. The algorithms, CW-NumMin, CW-CostMin, and CW-CostCov-B, apply the safe-mode approach in selecting test cases for achieving full-modified function coverage. It is assumed that modified functions are fault-prone, and the fault distribution of the testing area is Pareto-like. Moreover, we also assume that once a subject program is getting more mature, its fault concentration will become stronger. Only function coverage criterion is adopted because of the scalability of a software system with large code. The metrics of test's junction reachability and function's test intensity are defined in this study for algorithms. Both CW-CovMax and CW-CostMin algorithms are not safe-mode, but the approaches they use still attempt to obtain a test suite with a maximal amount of function coverage under certain constraints, i.e. the effective-confidence level and time restriction. We conclude that the most effective algorithm in this study can significantly reduce the cost (time) of regression testing on the MPLS testing area to 1.10%, on the average. Approaches proposed here can be effectively and efficiently applied to the regression testing on bug-fix releases of a software system with large code, especially to the releases having very few modified functions with low test intensities. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Test coverage optimization for large code problems", "paper_id": "WOS:000297892900003"}