{"auto_keywords": [{"score": 0.04491687458404755, "phrase": "parallel_debuggers"}, {"score": 0.00481495049065317, "phrase": "highly_parallel_applications"}, {"score": 0.004773040022691547, "phrase": "contemporary_parallel_debuggers"}, {"score": 0.004450568197899267, "phrase": "sequential_debuggers"}, {"score": 0.004204602964512469, "phrase": "large_scale_scientific_applications"}, {"score": 0.00398959232769596, "phrase": "runtime_data"}, {"score": 0.0037198532511087566, "phrase": "expensive_but_useful_debugging_operations"}, {"score": 0.0036393456309815166, "phrase": "computational_codes"}, {"score": 0.003545024951402821, "phrase": "larger_data_structures"}, {"score": 0.003305243635051068, "phrase": "data-centric_debugging_approach"}, {"score": 0.003068166587650604, "phrase": "ad_hoc_debug-time_assertions"}, {"score": 0.0029110999689379497, "phrase": "parallel_computation"}, {"score": 0.0027863537694678094, "phrase": "program_state"}, {"score": 0.0025863988422430797, "phrase": "debugger's_performance"}, {"score": 0.002508284945907166, "phrase": "underlying_parallel_platform"}, {"score": 0.002475532161577715, "phrase": "available_compute_cores"}, {"score": 0.002443206010337041, "phrase": "parallel_debugging_functions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software debugging", " parallel debugger", " assertion"], "paper_abstract": "Contemporary parallel debuggers allow users to control more than one processing thread while supporting the same examination and visualisation operations of that of sequential debuggers. This approach restricts the use of parallel debuggers when it comes to large scale scientific applications run across hundreds of thousands compute cores. First, manually observing the runtime data to detect error becomes impractical because the data is too big. Second, performing expensive but useful debugging operations becomes infeasible as the computational codes become more complex, involving larger data structures, and as the machines become larger. This study explores the idea of a data-centric debugging approach, which could be used to make parallel debuggers more powerful. It discusses the use of ad hoc debug-time assertions that allow a user to reason about the state of a parallel computation. These assertions support the verification and validation of program state at runtime as a whole rather than focusing on that of only a single process state. Furthermore, the debugger's performance can be improved by exploiting the underlying parallel platform because the available compute cores can execute parallel debugging functions, while a program is idling at a breakpoint. We demonstrate the system with several case studies and evaluate the performance of the tool on a 20000 cores Cray XE6. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "A data-centric framework for debugging highly parallel applications", "paper_id": "WOS:000350752200004"}