{"auto_keywords": [{"score": 0.040956844534207316, "phrase": "chrism"}, {"score": 0.004815025573881837, "phrase": "prism"}, {"score": 0.0046688248760387435, "phrase": "prolog"}, {"score": 0.004611554879923759, "phrase": "probabilistic_predicates"}, {"score": 0.004555028829645471, "phrase": "built-in_support"}, {"score": 0.0044991925146184025, "phrase": "expectation-maximization_learning"}, {"score": 0.004444037594955185, "phrase": "constraint_handling_rules"}, {"score": 0.00428257928723, "phrase": "high-level_programming_language"}, {"score": 0.004204054047427536, "phrase": "multi-headed_multiset_rewrite_rules"}, {"score": 0.003976978140059542, "phrase": "new_probabilistic_logic_formalism"}, {"score": 0.0037389819658424956, "phrase": "chr"}, {"score": 0.003693106288118916, "phrase": "prism."}, {"score": 0.003558830226733501, "phrase": "high-level_rapid_prototyping"}, {"score": 0.0033873366086549735, "phrase": "\"chance_rules"}, {"score": 0.0033047037762521984, "phrase": "underlying_prism_system"}, {"score": 0.0031260524791486347, "phrase": "probability_computation"}, {"score": 0.0030876784650745973, "phrase": "parameter_learning"}, {"score": 0.0029937855454238507, "phrase": "chrism_language"}, {"score": 0.0028848643090508205, "phrase": "operational_semantics"}, {"score": 0.0026622351303038885, "phrase": "ambiguous_programs"}, {"score": 0.0025972447844047515, "phrase": "distribution_semantics"}, {"score": 0.002565345470805401, "phrase": "unambiguous_programs"}, {"score": 0.0021049977753042253, "phrase": "potential_application_domains"}], "paper_keywords": ["probabilistic logic learning", " constraint handling rules"], "paper_abstract": "PRISM is an extension of Prolog with probabilistic predicates and built-in support for expectation-maximization learning. Constraint Handling Rules (CHR) is a high-level programming language based on multi-headed multiset rewrite rules. In this paper, we introduce a new probabilistic logic formalism, called CHRiSM, based on a combination of CHR and PRISM. It can be used for high-level rapid prototyping of complex statistical models by means of \"chance rules\". The underlying PRISM system can then be used for several probabilistic inference tasks, including probability computation and parameter learning. We define the CHRiSM language in terms of syntax and operational semantics, and illustrate it with examples. We define the notion of ambiguous programs and define a distribution semantics for unambiguous programs. Next, we describe an implementation of CHRiSM, based on CH R(PRISM). We discuss the relation between CHRiSM and other probabilistic logic programming languages, in particular PCHR. Finally, we identify potential application domains.", "paper_title": "CHR(PRISM)-based probabilistic logic learning", "paper_id": "WOS:000280508200006"}