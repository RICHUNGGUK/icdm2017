{"auto_keywords": [{"score": 0.04972640973269946, "phrase": "ocloptimizer"}, {"score": 0.04137164392198624, "phrase": "opencl"}, {"score": 0.03652214908916555, "phrase": "opencl_codes"}, {"score": 0.031310638733312794, "phrase": "configuration_file"}, {"score": 0.02550053175643038, "phrase": "multiple_kernels"}, {"score": 0.00481495049065317, "phrase": "automatic_generation_of_optimized_opencl_codes"}, {"score": 0.004692227830462433, "phrase": "multicore_processors"}, {"score": 0.004522291357556591, "phrase": "parallel_programming"}, {"score": 0.00447251540886613, "phrase": "opencl_standard"}, {"score": 0.0043584824527198055, "phrase": "code_portability"}, {"score": 0.004200582085706493, "phrase": "programming_model"}, {"score": 0.004154332348800334, "phrase": "host_code"}, {"score": 0.004048378919038729, "phrase": "computational_devices"}, {"score": 0.003974349782102708, "phrase": "host_application_programming_interface"}, {"score": 0.003916098498242888, "phrase": "quite_verbose"}, {"score": 0.003623949225126944, "phrase": "automatic_performance_portability"}, {"score": 0.003428665921276366, "phrase": "specific_device"}, {"score": 0.003365930631436696, "phrase": "different_versions"}, {"score": 0.003304339421246321, "phrase": "task_partition_granularities"}, {"score": 0.003091767402370757, "phrase": "host_codes"}, {"score": 0.0030576885787607796, "phrase": "opencl_kernels"}, {"score": 0.0030239842475439814, "phrase": "specific_target_device"}, {"score": 0.002903540062437197, "phrase": "basic_kernel_characteristics"}, {"score": 0.0028085616610192456, "phrase": "code_transformations"}, {"score": 0.0027368368719283298, "phrase": "different_granularities"}, {"score": 0.002706659627293686, "phrase": "problem_decomposition"}, {"score": 0.00266693888510356, "phrase": "different_alternatives"}, {"score": 0.002541817937194794, "phrase": "iterative_optimization_process"}, {"score": 0.0025045102029373854, "phrase": "search_strategy"}, {"score": 0.0024586427394152196, "phrase": "user_specifications"}, {"score": 0.0023003498123420237, "phrase": "multicore_cpus"}, {"score": 0.0022834017104377525, "phrase": "different_accelerators"}, {"score": 0.002176235362654451, "phrase": "average_speedup"}, {"score": 0.0021284812539167112, "phrase": "baseline_hand-tuned_implementations"}, {"score": 0.0021049977753042253, "phrase": "single_kernel_codes"}], "paper_keywords": ["OpenCL", " performance portability", " genetic algorithms", " iterative optimization"], "paper_abstract": "The eruption of multicore processors and several kinds of accelerators has generalized the interest in parallel programming. The OpenCL standard is very appealing because it provides code portability across most of these platforms. It defines a programming model where a host code requests the execution of kernels in computational devices. Unfortunately, the host application programming interface of OpenCL is quite verbose, which makes the development of its host code tedious and error-prone. More importantly, OpenCL does not provide automatic performance portability. As a result, users have to hand-tune OpenCL codes for each specific device, which implies trying different versions of the kernels and task partition granularities. As an answer to this situation, we present OCLoptimizer, a tool that automatically generates host codes and optimizes OpenCL kernels for each specific target device based on a user provided configuration file. This configuration file describes basic kernel characteristics and annotations in the kernels that indicate the code transformations to test. Our tool can explore different granularities for the problem decomposition as well as different alternatives for the kernel. This exploration is performed by means of an iterative optimization process whose parameters and search strategy are defined by the user specifications. Support for OpenCL codes composed of multiple kernels is also provided by the tool. Experiments performed on multicore CPUs and different accelerators show that the tool is very effective, generating codes with an average speedup of 2.54 with respect to baseline hand-tuned implementations, in single kernel codes and 1.79 in a code with multiple kernels.", "paper_title": "Automatic Generation of Optimized OpenCL Codes Using OCLoptimizer", "paper_id": "WOS:000365157000018"}