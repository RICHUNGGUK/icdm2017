{"auto_keywords": [{"score": 0.029420333683948783, "phrase": "jef"}, {"score": 0.00481495049065317, "phrase": "change_profiles"}, {"score": 0.004766090327062509, "phrase": "reusable_and_non-reusable_software_systems"}, {"score": 0.004598933498016774, "phrase": "industrial_case_study"}, {"score": 0.004529093447865156, "phrase": "large_norwegian_oil_and_gas_company"}, {"score": 0.004483120978156604, "phrase": "statoil-hydro_asa"}, {"score": 0.004392565073466714, "phrase": "reusable_java-class_framework"}, {"score": 0.004152818376630929, "phrase": "software_changes"}, {"score": 0.0040481944502103505, "phrase": "reusable_framework"}, {"score": 0.003986684503518077, "phrase": "java_enterprise_framework"}, {"score": 0.0032668821950788533, "phrase": "change_types"}, {"score": 0.0032172054825137866, "phrase": "reused_framework"}, {"score": 0.0030726480920918097, "phrase": "perfective_changes"}, {"score": 0.00290473242917264, "phrase": "mean_value_adaptive_changes"}, {"score": 0.002530359917257626, "phrase": "preventive_changes"}, {"score": 0.0022267859286766553, "phrase": "long-term_payoff"}, {"score": 0.0021817065300196634, "phrase": "non-reusable_software_systems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["software reuse", " software quality", " software changes", " case study"], "paper_abstract": "This paper reports on an industrial case study in a large Norwegian Oil and Gas company (Statoil-Hydro ASA) involving a reusable Java-class framework and two applications that use that framework. We analyzed software changes from three releases of the reusable framework, called Java Enterprise Framework (JEF), and two applications reusing the framework, called Digital Cargo File (DCF) and Shipment and Allocation (S&A). On the basis of our analysis, we found the following: (1) Profiles of change types for the reused framework and the applications are similar, specifically, perfective changes dominate significantly. (2) Although on observing the mean value adaptive changes are more frequent and are active longer in JEF and S&A, these systems went through less refactoring than DCF. For DCF, we saw that preventive changes were more frequent and were active longer. (3) Finally, we found that designing for reuse seems to lead to a long-term payoff in relation to non-reusable software systems. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "An examination of change profiles in reusable and non-reusable software systems", "paper_id": "WOS:000281740000003"}