{"auto_keywords": [{"score": 0.04869496857615713, "phrase": "reactive_services"}, {"score": 0.041127085525376285, "phrase": "temporal_logic"}, {"score": 0.035862556853898, "phrase": "model_checking"}, {"score": 0.00481495049065317, "phrase": "rapid_composition"}, {"score": 0.004562847483469705, "phrase": "integrated_set"}, {"score": 0.004496402246090618, "phrase": "arctis"}, {"score": 0.004430920292612374, "phrase": "rapid_development"}, {"score": 0.004198839649063847, "phrase": "collaborative_building_blocks"}, {"score": 0.00413767314434795, "phrase": "behavioral_patterns"}, {"score": 0.003520687960750365, "phrase": "important_system_properties"}, {"score": 0.003319830633865628, "phrase": "error_traces"}, {"score": 0.0027969169552385974, "phrase": "automated_diagnoses"}, {"score": 0.002663208600887875, "phrase": "formal_semantics"}, {"score": 0.002548331088496964, "phrase": "state_machines"}, {"score": 0.002414616656410503, "phrase": "collaborative_models"}, {"score": 0.002333193766510394, "phrase": "executable_java_code"}, {"score": 0.0022434880661725493, "phrase": "mobile_treasure_hunt_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Service engineering", " Service composition", " UML", " Model-driven development", " Temporal logic", " Model checking"], "paper_abstract": "We present the integrated set of tools Arctis for the rapid development of reactive services. In our method, services are composed of collaborative building blocks that encapsulate behavioral patterns expressed as UML 2.0 collaborations and activities. Due to our underlying semantics in temporal logic, building blocks as well as their compositions can be transformed into formulas and model checked incrementally in order to guarantee that important system properties are kept. The process of model checking is fully automated. Error traces are presented to the users as easily understandable animations, so that no expertise in temporal logic is needed. In addition, the results of model checking are analyzed, so that in some cases automated diagnoses and fixes can be provided as well. The formal semantics also enables the correct, automatic synthesis of the activities to state machines which form the input of our code generators. Thus, the collaborative models can be fully automatically transformed into executable Java code. We present the development of a mobile treasure hunt system to exemplify the method and the tools. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Tool support for the rapid composition, analysis and implementation of reactive services", "paper_id": "WOS:000272061000012"}