{"auto_keywords": [{"score": 0.04016938422382131, "phrase": "linear_scan"}, {"score": 0.025943273253059018, "phrase": "auxiliary_index"}, {"score": 0.0046986841646790315, "phrase": "hashing_techniques"}, {"score": 0.004518442937844318, "phrase": "nearest_neighbor_search_problem"}, {"score": 0.004409304640026443, "phrase": "basic_idea"}, {"score": 0.004260906498835763, "phrase": "binary_codes"}, {"score": 0.004219427915728972, "phrase": "data_points"}, {"score": 0.003770373393393271, "phrase": "entire_data_base"}, {"score": 0.003715425273229361, "phrase": "hashing_method"}, {"score": 0.0031612033120065747, "phrase": "true_nearest_neighbors"}, {"score": 0.0030847461428168614, "phrase": "linear_scan_time"}, {"score": 0.002838319783373086, "phrase": "code_length"}, {"score": 0.0025860636370864084, "phrase": "novel_algorithm"}, {"score": 0.002391067964886602, "phrase": "offline_constructed_nearest_neighbor_table"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["Hashing", " indexing", " KD-tree", " nearest neighbor (NN) search"], "paper_abstract": "Recently, the hashing techniques have been widely applied to approximate the nearest neighbor search problem in many real applications. The basic idea of these approaches is to generate binary codes for data points which can preserve the similarity between any two of them. Given a query, instead of performing a linear scan of the entire data base, the hashing method can perform a linear scan of the points whose hamming distance to the query is not greater than r(h), where r(h) is a constant. However, in order to find the true nearest neighbors, both the locating time and the linear scan time are proportional to O(Sigma(rh)(i=0) ((c)(i)))) (c is the code length), which increase exponentially as r(h) increases. To address this limitation, we propose a novel algorithm named iterative expanding hashing in this paper, which builds an auxiliary index based on an offline constructed nearest neighbor table to avoid large r(h). This auxiliary index can be easily combined with all the traditional hashing methods. Extensive experimental results over various real large-scale datasets demonstrate the superiority of the proposed approach.", "paper_title": "Fast and Accurate Hashing Via Iterative Nearest Neighbors Expansion", "paper_id": "WOS:000343319700016"}