{"auto_keywords": [{"score": 0.030906843851002286, "phrase": "l_lambda"}, {"score": 0.015545916774765625, "phrase": "conventional_hardware_description_languages"}, {"score": 0.015119649415531204, "phrase": "functional_hardware_description_languages"}, {"score": 0.013986395475240136, "phrase": "source_programs"}, {"score": 0.013376854267473134, "phrase": "hardware_circuits"}, {"score": 0.011127805682748241, "phrase": "high-level_substitute"}, {"score": 0.00481495049065317, "phrase": "formal_semantics"}, {"score": 0.00413684709497912, "phrase": "wire_connections"}, {"score": 0.004022137057452406, "phrase": "lowest_level"}, {"score": 0.003932654396285872, "phrase": "high-level_descriptions"}, {"score": 0.0036966717141736355, "phrase": "lambda_calculus"}, {"score": 0.003247868216333148, "phrase": "higher-order_functions"}, {"score": 0.003140004304719746, "phrase": "linear_type_system"}, {"score": 0.003070086433952691, "phrase": "linear_use"}, {"score": 0.0030017207229983385, "phrase": "function_type"}, {"score": 0.0028857130140890787, "phrase": "structural_descriptions"}, {"score": 0.0026370661343466354, "phrase": "realizable_hardware_circuits"}, {"score": 0.00257831812581194, "phrase": "realizable_hardware_circuit"}, {"score": 0.002535115422089855, "phrase": "corresponding_expression"}, {"score": 0.0022777800735119405, "phrase": "simple_hardware_description_language"}, {"score": 0.0021049977753042253, "phrase": "fast_fourier_transform_circuit"}], "paper_keywords": ["languages", " hardware description language", " functional language", " linear type system"], "paper_abstract": "In efforts to overcome the complexity of the syntax and the lack of formal semantics of conventional hardware description languages, a number of functional hardware description languages have been developed. Like conventional hardware description languages, however, functional hardware description languages eventually convert all source programs into netlists, which describe wire connections in hardware circuits at the lowest level and conceal all high-level descriptions written into source programs. We develop a variant of the lambda calculus, called l lambda (linear lambda), which may serve as a high-level substitute for netlists. In order to support higher-order functions, l lambda uses a linear type system which enforces the linear use of variables of function type. The translation of l lambda into structural descriptions of hardware circuits is sound and complete in the sense that it maps expressions only to realizable hardware circuits and that every realizable hardware circuit has a corresponding expression in l lambda. To illustrate the use of l lambda as a high-level substitute for netlists, we design a simple hardware description language that extends l lambda with polymorphism, and use it to implement a Fast Fourier Transform circuit.", "paper_title": "Functional netlists", "paper_id": "WOS:000259436700036"}