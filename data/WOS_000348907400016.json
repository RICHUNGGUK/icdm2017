{"auto_keywords": [{"score": 0.04182833290656605, "phrase": "java"}, {"score": 0.005202044815178742, "phrase": "wildcards"}, {"score": 0.00481495049065317, "phrase": "refactoring_java_generics"}, {"score": 0.004579780586951551, "phrase": "wildcard_annotations"}, {"score": 0.004410938507689426, "phrase": "java_generic_libraries"}, {"score": 0.004301834610818624, "phrase": "heavy_manual_effort"}, {"score": 0.00347657813672945, "phrase": "java_type_system"}, {"score": 0.0027916287357898544, "phrase": "available_source_code"}, {"score": 0.002688532127821979, "phrase": "inter-procedural_flow_analysis"}, {"score": 0.0026384167183586015, "phrase": "method_body_analysis"}, {"score": 0.0025409639091476363, "phrase": "type_signatures"}, {"score": 0.002447101794397243, "phrase": "six_java_generic_libraries"}, {"score": 0.0023419588513908783, "phrase": "available_declarations"}, {"score": 0.0023127544795063263, "phrase": "variant_type_signatures"}], "paper_keywords": ["variance", " definition-site variance", " use-site variance", " wildcards", " generics", " polymorphism", " refactoring"], "paper_abstract": "Wildcard annotations can improve the generality of Java generic libraries, but require heavy manual effort. We present an algorithm for refactoring and inferring more general type instantiations of Java generics using wildcards. Compared to past approaches, our work is practical and immediately applicable: we assume no changes to the Java type system, while taking into account all its intricacies. Our system allows users to select declarations (variables, method parameters, return types, etc.) to generalize and considers declarations not declared in available source code. It then performs an inter-procedural flow analysis and a method body analysis, in order to generalize type signatures. We evaluate our technique on six Java generic libraries. We find that 34% of available declarations of variant type signatures can be generalized-i.e., relaxed with more general wildcard types. On average, 146 other declarations need to be updated when a declaration is generalized, showing that this refactoring would be too tedious and error-prone to perform manually.", "paper_title": "Refactoring Java Generics by Inferring Wildcards, In Practice", "paper_id": "WOS:000348907400016"}