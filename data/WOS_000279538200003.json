{"auto_keywords": [{"score": 0.035439003348600596, "phrase": "xml"}, {"score": 0.00481495049065317, "phrase": "model-driven_code_generation"}, {"score": 0.0046092435167207095, "phrase": "significant_progress"}, {"score": 0.004456980650437417, "phrase": "rapid_development"}, {"score": 0.004427134352966977, "phrase": "high_quality_code"}, {"score": 0.004125513927068713, "phrase": "purely_manual_approach"}, {"score": 0.004056769841308405, "phrase": "model-driven_code_generation_approach"}, {"score": 0.003975781274672803, "phrase": "aspect-oriented_development"}, {"score": 0.0038443635340052523, "phrase": "first_activity"}, {"score": 0.003630809610997277, "phrase": "graphical_model"}, {"score": 0.0035702793079311896, "phrase": "software_designer"}, {"score": 0.003522579870903474, "phrase": "uml_profile"}, {"score": 0.003498968822873231, "phrase": "aspect-oriented_software"}, {"score": 0.0033268412940032103, "phrase": "target_notation"}, {"score": 0.003227643104496149, "phrase": "xml_meta-model"}, {"score": 0.0030999503605193142, "phrase": "second_activity"}, {"score": 0.0030688220103201836, "phrase": "xml_model"}, {"score": 0.0030380052848799155, "phrase": "source_code"}, {"score": 0.002977294336234334, "phrase": "aspectj_meta-model"}, {"score": 0.0028402984404136754, "phrase": "extended_uml_model"}, {"score": 0.0027741761880779535, "phrase": "aspectj_code"}, {"score": 0.0027187231747900814, "phrase": "transformation_algorithms"}, {"score": 0.0026823700218343506, "phrase": "graph_transformations"}, {"score": 0.002664375650349975, "phrase": "tool_support"}, {"score": 0.0026199146891406, "phrase": "key_technical_issues"}, {"score": 0.0023682672729645714, "phrase": "existing_alternative_approaches"}, {"score": 0.0021844290159501313, "phrase": "banking_system_example"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model-driven development", " Aspect-oriented", " Automated code generation", " Software design", " Visual modeling", " AspectJ"], "paper_abstract": "Model-driven code generation has been investigated in traditional and object-oriented design paradigms; significant progress has been made. It offers many advantages including the rapid development of high quality code. Errors are reduced and the consistency between the design and the code is retained, in comparison with a purely manual approach. Here, a model-driven code generation approach based on graph transformations for aspect-oriented development is proposed. The approach has two main transformation activities. The first activity transforms a visual (graphical) model of the design into a formal, text-based notation that can be readily processed. The graphical model is created by the software designer and uses a UML profile for aspect-oriented software (i.e., FDAF) to represent aspects and their components. XML is the target notation for this step; the transformation uses the XML meta-model to ensure that the output complies with the language. The second activity transforms the XML model into AspectJ source code. The transformation uses the AspectJ meta-model to ensure the output complies with the language. The transformations from the extended UML model to XML and from XML to AspectJ code are fully automated. The transformation algorithms are based on graph transformations; tool support has been developed. Key technical issues in the approach are discussed, including performance, the amount of code generated, correctness, and adaptability, in addition to a comparison of the proposal with existing alternative approaches. The approach has been validated on three example systems: a banking system, classroom scheduling system, and an insurance system. The banking system example is presented in the paper. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Aspect-oriented model-driven skeleton code generation: A graph-based transformation approach", "paper_id": "WOS:000279538200003"}