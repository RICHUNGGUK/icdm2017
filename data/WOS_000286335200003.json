{"auto_keywords": [{"score": 0.04167930466566384, "phrase": "conflict_resolution_time"}, {"score": 0.03523806067698286, "phrase": "access_time"}, {"score": 0.03404669479787196, "phrase": "wasted_work"}, {"score": 0.00481495049065317, "phrase": "hardware-supported_memory_transactions"}, {"score": 0.004713594814274419, "phrase": "parallel_resources"}, {"score": 0.004614362802631256, "phrase": "atomic_blocks"}, {"score": 0.0044852808671980325, "phrase": "data_conflicts"}, {"score": 0.0043289723873340255, "phrase": "tm_system"}, {"score": 0.004133852714087407, "phrase": "resulting_contention"}, {"score": 0.003947492797744999, "phrase": "contention_management_policy"}, {"score": 0.0038780652371817447, "phrase": "hardware-supported_tm_systems"}, {"score": 0.003796355951305572, "phrase": "implementation_implications"}, {"score": 0.0037163618245226755, "phrase": "design_space"}, {"score": 0.0036380471217986065, "phrase": "policy_decisions"}, {"score": 0.0035995085881892464, "phrase": "significant_impact"}, {"score": 0.0035236476185949565, "phrase": "available_parallelism"}, {"score": 0.00346164863873186, "phrase": "individual_transactions"}, {"score": 0.003412833120814178, "phrase": "previous_research_findings"}, {"score": 0.0032937749380725317, "phrase": "problematic_access"}, {"score": 0.003258871417680268, "phrase": "side-step_conflicts"}, {"score": 0.0031340167205149813, "phrase": "dominant_effect"}, {"score": 0.0027972697690729453, "phrase": "aborted_transaction"}, {"score": 0.0026710032893246154, "phrase": "cumulative_amount"}, {"score": 0.0025233755103976317, "phrase": "lazy's_delayed_conflict_resolution"}, {"score": 0.0023754296478100865, "phrase": "sophisticated_priority_mechanisms"}, {"score": 0.0023502347146791285, "phrase": "contention_management"}, {"score": 0.002268161377269513, "phrase": "mixed_conflict_resolution"}, {"score": 0.002188947861949892, "phrase": "read-write_conflicts"}, {"score": 0.002120018771276572, "phrase": "good_compromise"}, {"score": 0.0021049977753042253, "phrase": "implementation_complexity"}], "paper_keywords": ["FlexTM", " Transactional memory", " Contention management", " Conflict detection", " Mixed"], "paper_abstract": "In order to exploit parallel resources, most transactional memory (TM) systems execute atomic blocks concurrently and must thus be prepared for data conflicts. In the event of a conflict, a TM system must choose a policy to decide when and how to manage the resulting contention. In this paper, we analyze the interplay between conflict resolution time and contention management policy in the context of hardware-supported TM systems, highlighting the performance and implementation implications of the various points in the design space. We show that both policy decisions have a significant impact on the ability to exploit available parallelism and ensure progress of individual transactions. Our analysis corroborates previous research findings that stalling (especially at access time and retrying the problematic access) helps side-step conflicts and avoid wasted work. We demonstrate that conflict resolution time has the dominant effect on performance: Lazy (which delays resolution to commit time) uncovers more parallelism than Eager (which resolves conflicts at access time). With Lazy, in spite of an aborted transaction tending to waste more work (31% more than Eager), the cumulative amount of wasted work is lower since fewer transactions are aborted (1.6 x less than Eager). Lazy's delayed conflict resolution also ensures progress and decreases the likelihood of pathologies (like livelock) while Eager needs sophisticated priority mechanisms in the contention management to avoid pathologies. Finally, we evaluate a mixed conflict resolution that detects write-write conflicts eagerly while detecting read-write conflicts lazily, and show that it provides a good compromise between implementation complexity and exploiting concurrency for performance.", "paper_title": "Analyzing Conflicts in Hardware-Supported Memory Transactions", "paper_id": "WOS:000286335200003"}