{"auto_keywords": [{"score": 0.0403633960777679, "phrase": "proposed_approach"}, {"score": 0.02000582450259645, "phrase": "singleton_clusters"}, {"score": 0.008693113048850601, "phrase": "complementary_mechanism"}, {"score": 0.0058096835173018875, "phrase": "utility_classes"}, {"score": 0.00481495049065317, "phrase": "adaptive_and_preventive_dendrogram_cutting_approach"}, {"score": 0.0046993598473345395, "phrase": "key_technique"}, {"score": 0.004628522534620679, "phrase": "reverse_engineering"}, {"score": 0.0045726187330434025, "phrase": "high-level_abstraction"}, {"score": 0.004462819565604272, "phrase": "limited_resources"}, {"score": 0.0043161190928529755, "phrase": "optimum_set"}, {"score": 0.003988180913997414, "phrase": "existing_agglomerative_clustering_algorithms"}, {"score": 0.0038805454197432337, "phrase": "architecture_recovery_problem"}, {"score": 0.0037988336463795963, "phrase": "redundant_effort"}, {"score": 0.0034570879043633114, "phrase": "least-squares_regression"}, {"score": 0.0033739844237277213, "phrase": "best_cut_level"}, {"score": 0.0033129660760880383, "phrase": "tree_diagram"}, {"score": 0.003272899463005088, "phrase": "taxonomic_relationships"}, {"score": 0.0032333158387737424, "phrase": "software_entities"}, {"score": 0.002933354468864442, "phrase": "exhaustive_and_highest_gap_dendrogram_cutting_methods"}, {"score": 0.0028541074054468773, "phrase": "dunn"}, {"score": 0.0028110048684383167, "phrase": "davies-bouldin"}, {"score": 0.002726740692380339, "phrase": "original_package_diagram"}, {"score": 0.002685558057339722, "phrase": "average_accuracy_rate"}, {"score": 0.002565695161331182, "phrase": "source_code"}, {"score": 0.002519257735651759, "phrase": "software_clustering"}, {"score": 0.002285389120812562, "phrase": "clustering_results"}, {"score": 0.002264607102799332, "phrase": "software_maintainers"}, {"score": 0.0022440136394950632, "phrase": "cutting_point_selection_process"}, {"score": 0.0021438155673297377, "phrase": "existing_clustering_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software maintenance", " Design recovery", " Software clustering", " Remodularization"], "paper_abstract": "Context: Software clustering is a key technique that is used in reverse engineering to recover a high-level abstraction of the software in the case of limited resources. Very limited research has explicitly discussed the problem of finding the optimum set of clusters in the design and how to penalize for the formation of singleton clusters during clustering. Objective: This paper attempts to enhance the existing agglomerative clustering algorithms by introducing a complementary mechanism. To solve the architecture recovery problem, the proposed approach focuses on minimizing redundant effort and penalizing for the formation of singleton clusters during clustering while maintaining the integrity of the results. Method: An automated solution for cutting a dendrogram that is based on least-squares regression is presented in order to find the best cut level. A dendrogram is a tree diagram that shows the taxonomic relationships of clusters of software entities. Moreover, a factor to penalize clusters that will form singletons is introduced in this paper. Simulations were performed on two open-source projects. The proposed approach was compared against the exhaustive and highest gap dendrogram cutting methods, as well as two well-known cluster validity indices, namely, Dunn's index and the Davies-Bouldin index. Results: When comparing our clustering results against the original package diagram, our approach achieved an average accuracy rate of 90.07% from two simulations after the utility classes were removed. The utility classes in the source code affect the accuracy of the software clustering, owing to its omnipresent behavior. The proposed approach also successfully penalized the formation of singleton clusters during clustering. Conclusion: The evaluation indicates that the proposed approach can enhance the quality of the clustering results by guiding software maintainers through the cutting point selection process. The proposed approach can be used as a complementary mechanism to improve the effectiveness of existing clustering algorithms. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient software clustering technique using an adaptive and preventive dendrogram cutting approach", "paper_id": "WOS:000325387500009"}