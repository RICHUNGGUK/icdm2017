{"auto_keywords": [{"score": 0.02568096136257874, "phrase": "transition_system"}, {"score": 0.00481495049065317, "phrase": "current_dominance"}, {"score": 0.00475382761232911, "phrase": "service-based_paradigm"}, {"score": 0.004653667500876187, "phrase": "specific_design"}, {"score": 0.0046141941030386525, "phrase": "architectural_principles"}, {"score": 0.0045170189971782135, "phrase": "soa"}, {"score": 0.004478644903380014, "phrase": "rest."}, {"score": 0.004273601449537163, "phrase": "long-running_transactions"}, {"score": 0.0039244530915794025, "phrase": "system_compensation"}, {"score": 0.0037128955884188773, "phrase": "scope-based_compensation"}, {"score": 0.0034977560416755726, "phrase": "business_logic"}, {"score": 0.0030645676308053444, "phrase": "'parent'_transactions"}, {"score": 0.002838033152426417, "phrase": "design_guidelines"}, {"score": 0.0027194778713860715, "phrase": "transactional_processes"}, {"score": 0.0026734504926268442, "phrase": "parallel_composition"}, {"score": 0.002561752783323717, "phrase": "single_service"}, {"score": 0.0024969812322112174, "phrase": "special_case"}, {"score": 0.002465210678474529, "phrase": "system_semantics"}, {"score": 0.0022828795331819025, "phrase": "linear_temporal_logic"}, {"score": 0.002150424366230609, "phrase": "sal"}], "paper_keywords": ["Service computing", " Long-running transaction", " Compensation", " Temporal logic"], "paper_abstract": "The current dominance of the service-based paradigm reflects the success of specific design and architectural principles embodied in terms like SOA and REST. This paper suggests further principles for the design of services exhibiting long-running transactions (that is, transactions whose characteristic feature is that in the case of failure not all system states can be automatically restored: system compensation is required). The principles are expressed at the level of scope-based compensation and fault handling, and ensure the consistency of data critical to the business logic. They do so by demanding (a) either the commitment of all of the transaction or none of it, and (b) that compensation is assured in case of failure in 'parent' transactions. The notion of scope is captured algebraically (rather than semantically) in order to express design guidelines which ensure that a given transaction satisfies those principles. Transactional processes are constructed by parallel composition of services, and transactions with scopes in a single service are dealt with as a special case. The system semantics is formalised as a transition system (in Z) and the principles are expressed as formulae in linear temporal logic over runs of the transition system. That facilitates the model checking (using SAL) of their bounded versions. Two simple examples are used throughout to illustrate definitions and finally to demonstrate the approach.", "paper_title": "Compensation by design", "paper_id": "WOS:000339105100001"}