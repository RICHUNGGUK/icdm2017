{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "forbidden_edges"}, {"score": 0.004346139434813299, "phrase": "faulty_pairwise_interactions"}, {"score": 0.004143196873246147, "phrase": "software_system"}, {"score": 0.0037910145286595386, "phrase": "input_combinations"}, {"score": 0.0035648266669315943, "phrase": "software_testing"}, {"score": 0.0027116246112603875, "phrase": "theoretical_framework"}, {"score": 0.002532284627202572, "phrase": "edge_clique"}, {"score": 0.002463906556781983, "phrase": "lower_and_upper_bounds"}, {"score": 0.002364777610365689, "phrase": "recursive_construction"}, {"score": 0.0021932609696277937, "phrase": "binary_alphabets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "Covering arrays (CAs) can be used to detect the existence of faulty pairwise interactions between parameters or components in a software system. The generalization considered here applies to the situation in which some input combinations are invalid, a requirement quite common in software testing. In this paper. we study covering arrays avoiding forbidden edges (CAFEs), where certain pairwise interactions are forbidden while all others must be covered, and we aim to minimize the number of tests. We establish a theoretical framework for this problem, by providing connections to the edge clique covering problem, lower and upper bounds, complexity results and a recursive construction. We also give an algorithm for the case of binary alphabets. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Covering arrays avoiding forbidden edges", "paper_id": "WOS:000271841100004"}