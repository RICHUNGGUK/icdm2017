{"auto_keywords": [{"score": 0.04795274928516732, "phrase": "api_documentation"}, {"score": 0.015528470795217419, "phrase": "client_code"}, {"score": 0.010052822264011264, "phrase": "natural_languages"}, {"score": 0.00481495049065317, "phrase": "natural_language_api_documentation"}, {"score": 0.004497973025639345, "phrase": "correct_api_usages"}, {"score": 0.003978866233891427, "phrase": "existing_research"}, {"score": 0.003141364320497748, "phrase": "mining_approaches"}, {"score": 0.0027910516355928983, "phrase": "resource_specifications"}, {"score": 0.0026307897899760383, "phrase": "five_libraries"}, {"score": 0.0025137856138000014, "phrase": "real_scale_libraries"}, {"score": 0.0024460897937643032, "phrase": "relatively_high_precisions"}, {"score": 0.002316105585203396, "phrase": "inferred_specifications"}, {"score": 0.0022640009579466924, "phrase": "open_source_projects"}, {"score": 0.002124247104243502, "phrase": "real_defects"}, {"score": 0.0021049977753042253, "phrase": "existing_projects"}], "paper_keywords": ["Inferring specifications", " API documentation"], "paper_abstract": "Many software libraries, especially those commercial ones, provide API documentation in natural languages to describe correct API usages. However, developers may still write code that is inconsistent with API documentation, partially because many developers are reluctant to carefully read API documentation as shown by existing research. As these inconsistencies may indicate defects, researchers have proposed various detection approaches, and these approaches need many known specifications. As it is tedious to write specifications manually for all APIs, various approaches have been proposed to mine specifications automatically. In the literature, most existing mining approaches rely on analyzing client code, so these mining approaches would fail to mine specifications when client code is not sufficient. Instead of analyzing client code, we propose an approach, called Doc2Spec, that infers resource specifications from API documentation in natural languages. We evaluated our approach on the Javadocs of five libraries. The results show that our approach performs well on real scale libraries, and infers various specifications with relatively high precisions, recalls, and F-scores. We further used inferred specifications to detect defects in open source projects. The results show that specifications inferred by Doc2Spec are useful to detect real defects in existing projects.", "paper_title": "Inferring specifications for resources from natural language API documentation", "paper_id": "WOS:000292556500002"}