{"auto_keywords": [{"score": 0.05007820304388614, "phrase": "hybrid_dataflow"}, {"score": 0.04350141739611852, "phrase": "wide_range"}, {"score": 0.03194333757471042, "phrase": "dash"}, {"score": 0.004623608221548592, "phrase": "current_trend"}, {"score": 0.004530794611704416, "phrase": "parallel_programming_models"}, {"score": 0.0044398358177815305, "phrase": "different_well_established_models"}, {"score": 0.00437281181878921, "phrase": "single_programming"}, {"score": 0.004220314322073171, "phrase": "efficient_implementation"}, {"score": 0.004114641015648682, "phrase": "real_world_applications"}, {"score": 0.0040525061916685924, "phrase": "dataflow_model"}, {"score": 0.0038520615699124123, "phrase": "research_community"}, {"score": 0.003587924960158317, "phrase": "recently_proposed_hybrid_parallel_programming_models"}, {"score": 0.003551694229680741, "phrase": "dataflow_and_traditional_shared_memory_models"}, {"score": 0.003393115177189967, "phrase": "task_dependency"}, {"score": 0.002884379533745879, "phrase": "berkeley"}, {"score": 0.0026863605504566924, "phrase": "emerging_applications"}, {"score": 0.002618995204424126, "phrase": "sequential_and_shared-memory_implementations"}, {"score": 0.0025533456276862626, "phrase": "intel"}, {"score": 0.002501955525421155, "phrase": "easy_comparison"}, {"score": 0.0024766636161181544, "phrase": "hybrid_dataflow_implementations"}, {"score": 0.0024516267507109753, "phrase": "traditional_shared_memory_implementations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Benchmark suite", " Dataflow", " Shared memory", " Transactional memory", " Programming model"], "paper_abstract": "The current trend in development of parallel programming models is to combine different well established models into a single programming, model in order to support efficient implementation of a wide range of real world applications. The dataflow model has particularly managed to recapture the interest of the research community due to its ability to express parallelism efficiently. Thus, a number of recently proposed hybrid parallel programming models combine dataflow and traditional shared memory models. Their findings have influenced the introduction of task dependency in the OpenMP 4.0 standard. This article presents DaSH - the first comprehensive benchmark suite for hybrid dataflow and shared memory programming models. DaSH features 11 benchmarks, each representing one of the Berkeley dwarfs that capture patterns of communication and computation common to a wide range of emerging applications. DaSH also includes sequential and shared-memory implementations based on OpenMP and Intel TBB to facilitate easy comparison between hybrid dataflow implementations and traditional shared memory implementations based on work-sharing and/or tasks. Finally, we use DaSH to evaluate three different hybrid dataflow models, identify their advantages and shortcomings, and motivate further research on their characteristics. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "DaSH: A benchmark suite for hybrid dataflow and shared memory programming models", "paper_id": "WOS:000357907400003"}