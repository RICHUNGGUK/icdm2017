{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "buffer_overflow_characteristics"}, {"score": 0.004738325072560588, "phrase": "significant_work"}, {"score": 0.00455202992136173, "phrase": "buffer_overflows"}, {"score": 0.0038152404172111815, "phrase": "array_boundary"}, {"score": 0.0036651042289628324, "phrase": "state_information"}, {"score": 0.003146360480030653, "phrase": "additional_changes"}, {"score": 0.0029504765287722465, "phrase": "incorrect_action"}, {"score": 0.0027890803075309926, "phrase": "nonsecure_state"}, {"score": 0.002615381301695394, "phrase": "buffer_overflow_vulnerabilities"}, {"score": 0.002374855916752648, "phrase": "exploitable_buffer_overflow"}, {"score": 0.0021049977753042253, "phrase": "alternate_approaches"}], "paper_keywords": ["Protection mechanisms", " software/program verification", " security and privacy", " arrays"], "paper_abstract": "Significant work on vulnerabilities focuses on buffer overflows, in which data exceeding the bounds of an array is loaded into the array. The loading continues past the array boundary, causing variables and state information located adjacent to the array to change. As the process is not programmed to check for these additional changes, the process acts incorrectly. The incorrect action often places the system in a nonsecure state. This work develops a taxonomy of buffer overflow vulnerabilities based upon characteristics, or preconditions that must hold for an exploitable buffer overflow to exist. We analyze several software and hardware countermeasures to validate the approach. We then discuss alternate approaches to ameliorating this vulnerability.", "paper_title": "A Taxonomy of Buffer Overflow Characteristics", "paper_id": "WOS:000301233900001"}