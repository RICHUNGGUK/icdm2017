{"auto_keywords": [{"score": 0.010763905019695985, "phrase": "maximum_per-stage_memory"}, {"score": 0.00481495049065317, "phrase": "pipelined_multibit-trie_router-tables"}, {"score": 0.004453874101119545, "phrase": "pipelined_router-table_applications"}, {"score": 0.004119772166482708, "phrase": "basu"}, {"score": 0.004056000283216154, "phrase": "narlikar"}, {"score": 0.0031107911390188055, "phrase": "least_total_memory_subject"}, {"score": 0.0030387767523076528, "phrase": "former_constraint"}, {"score": 0.0028996963188373144, "phrase": "better_pipelined_trees"}, {"score": 0.002579140290642792, "phrase": "node_pull-up_scheme"}, {"score": 0.002366763442497185, "phrase": "partitioning_heuristic"}, {"score": 0.002311933249234786, "phrase": "pipelined_multibit"}], "paper_keywords": ["packet routing", " longest matching-prefix", " controlled prefix expansion", " multibit trie", " pipelined router-table", " dynamic programming"], "paper_abstract": "Efficient algorithms to construct multibit tries suitable for pipelined router-table applications are developed. We first enhance the 1-phase algorithm of Basu and Narlikar [ 1], obtaining a 1-phase algorithm that is 2.5 to 3 times as fast. Next, we develop 2-phase algorithms that not only guarantee to minimize the maximum per-stage memory but also guarantee to use the least total memory subject to the former constraint. Our 2-phase algorithms not only generate better pipelined trees than those generated by the 1-phase algorithm, but they also take much less time. A node pull-up scheme that guarantees no increase in maximum per-stage memory as well as a partitioning heuristic that generates pipelined multibit tries requiring less maximum per-stage memory than required by the tries obtained using the 1-phase and 2-phase algorithms are also proposed.", "paper_title": "Efficient construction of pipelined multibit-trie router-tables", "paper_id": "WOS:000242167300003"}