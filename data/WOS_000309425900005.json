{"auto_keywords": [{"score": 0.04492795963065823, "phrase": "dxr"}, {"score": 0.00481495049065317, "phrase": "billion_routing_lookups"}, {"score": 0.004611369021812453, "phrase": "software_routing_implementation"}, {"score": 0.00441635700580562, "phrase": "specialized_lookup_hardware"}, {"score": 0.004094639048362357, "phrase": "large_routing_tables"}, {"score": 0.004050625770007516, "phrase": "compact_lookup_structures"}, {"score": 0.00394264312173188, "phrase": "cache_hierarchies"}, {"score": 0.003900257249255497, "phrase": "modern_cpus"}, {"score": 0.003635600104609725, "phrase": "cpu_cores"}, {"score": 0.0035771121569391916, "phrase": "smallest_configuration"}, {"score": 0.0034629341517018438, "phrase": "real-world_bgp_snapshot"}, {"score": 0.0029763124376934813, "phrase": "synthetic_tests"}, {"score": 0.002881263079883501, "phrase": "cpu."}, {"score": 0.0027443174539994925, "phrase": "increased_memory_footprint"}, {"score": 0.002656650588033728, "phrase": "software_implementation"}, {"score": 0.0025857324180891526, "phrase": "better_scalability"}, {"score": 0.0024495111090152857, "phrase": "freebsd_kernel"}, {"score": 0.002333044307949414, "phrase": "standard_apis"}, {"score": 0.002258485867726042, "phrase": "quagga"}, {"score": 0.002234165013865669, "phrase": "xorp"}, {"score": 0.0021394674440767124, "phrase": "lookup_results"}, {"score": 0.0021049977753042253, "phrase": "bsd_radix_tree"}], "paper_keywords": ["Algorithms", " Performance", " Experimentation"], "paper_abstract": "Can a software routing implementation compete in a field generally reserved for specialized lookup hardware? This paper presents DXR, an IPv4 lookup scheme based on transforming large routing tables into compact lookup structures which easily fit into cache hierarchies of modern CPUs. DXR supports various memory/speed tradeoffs and scales almost linearly with the number of CPU cores. The smallest configuration, D16R, distills a real-world BGP snapshot with 417,000 IPv4 prefixes and 213 distinct next hops into a structure consuming only 782 Kbytes, less than 2 bytes per prefix, and achieves 490 million lookups per second (MLps) in synthetic tests using uniformly random IPv4 keys on a commodity 8-core CPU. Some other DXR configurations exceed 700 MLps at the cost of increased memory footprint. DXR significantly outperforms a software implementation of DIR-24-8-BASIC, has better scalability, and requires less DRAM bandwidth. Our prototype works inside the FreeBSD kernel, which permits DXR to be used with standard APIs and routing daemons such as Quagga and XORP, and to be validated by comparing lookup results against the BSD radix tree.", "paper_title": "DXR: Towards a Billion Routing Lookups per Second in Software", "paper_id": "WOS:000309425900005"}