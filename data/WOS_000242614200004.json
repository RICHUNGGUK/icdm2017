{"auto_keywords": [{"score": 0.03022564535973555, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "memory_allocation"}, {"score": 0.004768104290288521, "phrase": "pipelined_router_forwarding_engines"}, {"score": 0.0046986841646790315, "phrase": "crucial_problem"}, {"score": 0.004260906498835763, "phrase": "processor_memories"}, {"score": 0.0038074544783102226, "phrase": "memory_sharing"}, {"score": 0.003770373393393271, "phrase": "idealized_sharing"}, {"score": 0.0036792371574197826, "phrase": "single_shared_memory"}, {"score": 0.003385480888810982, "phrase": "perfect_memory_sharing"}, {"score": 0.0033524956061690868, "phrase": "shared_memory"}, {"score": 0.0032237268289353983, "phrase": "two-port_memories"}, {"score": 0.002729246328390722, "phrase": "fast_approximation_algorithm"}, {"score": 0.002548331088496964, "phrase": "new_bin_packing_model"}, {"score": 0.002414616656410503, "phrase": "important_special_cases"}, {"score": 0.0023104373174118458, "phrase": "approximation_algorithm"}, {"score": 0.0021999341184897217, "phrase": "online_memory_allocation_problem"}, {"score": 0.0021678232353129472, "phrase": "fast_online_algorithms"}, {"score": 0.0021361800485636823, "phrase": "good_memory_utilization"}, {"score": 0.0021049977753042253, "phrase": "fast_updates"}], "paper_keywords": [""], "paper_abstract": "A crucial problem that needs to be solved is the allocation of memory to processors in a pipeline. Ideally, the processor memories should be totally separate (i.e., one-port memories) in order to minimize contention; however, this minimizes memory sharing. Idealized sharing occurs by using a single shared memory for all processors but this maximizes contention. Instead, in this paper we show that perfect memory sharing of shared memory can be achieved with a collection of two-port memories, as long as the number of processors is less than the number of memories. We show that the problem of allocation is NP-complete in general, but has a fast approximation algorithm that comes within a factor of 3/2 asymptotically. The proof utilizes a new bin packing model, which is interesting in its own right. Further, for important special cases that arise in practice a more sophisticated modification of this approximation algorithm is in fact optimal. We also discuss the online memory allocation problem and present fast online algorithms that provide good memory utilization while allowing fast updates.", "paper_title": "Parallelism versus memory allocation in pipelined router forwarding engines", "paper_id": "WOS:000242614200004"}