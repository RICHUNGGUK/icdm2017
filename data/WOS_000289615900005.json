{"auto_keywords": [{"score": 0.04958938437211513, "phrase": "pessimistic_concurrency_control"}, {"score": 0.048644738257163776, "phrase": "tm"}, {"score": 0.00481495049065317, "phrase": "hybrid_transactional_memory"}, {"score": 0.004718314112245913, "phrase": "transactional_memory"}, {"score": 0.00441738161338662, "phrase": "shared-memory_data_structures"}, {"score": 0.0039310261964323545, "phrase": "\"privatization\"_problem"}, {"score": 0.0038520615699124123, "phrase": "transactional_and_non-transactional_accesses"}, {"score": 0.0036988415150699945, "phrase": "inconsistent_results"}, {"score": 0.003462704420080129, "phrase": "important_performance_penalty"}, {"score": 0.0033588449972778004, "phrase": "reader-writer_locking"}, {"score": 0.003258090521354736, "phrase": "hybrid_tm_design"}, {"score": 0.0031603487697867538, "phrase": "performance_overheads"}, {"score": 0.0028263192354046245, "phrase": "architectural_support"}, {"score": 0.0026863605504566924, "phrase": "single_common_code_path"}, {"score": 0.002501955525421155, "phrase": "privatization_problem"}, {"score": 0.002414544068560716, "phrase": "hybrid_tm"}, {"score": 0.0023780209525032688, "phrase": "important_properties"}, {"score": 0.0023301793939902015, "phrase": "starvation_freedom"}, {"score": 0.002248755794042486, "phrase": "directory_reservations"}, {"score": 0.0021373366163721518, "phrase": "existent_solutions"}, {"score": 0.0021049977753042253, "phrase": "hardware_tm."}], "paper_keywords": ["Hybrid transactional memory", " Pessimistic concurrency control", " Writer starvation", " Directory reservation"], "paper_abstract": "Transactional Memory (TM) intends to simplify the design and implementation of the shared-memory data structures used in parallel software. Many Software TM systems are based on writer-locks to protect the data being modified. Such implementations can suffer from the \"privatization\" problem, in which transactional and non-transactional accesses to the same location can lead to inconsistent results. One solution is the use of Pessimistic Concurrency Control, but it entails an important performance penalty due to the need of reader-writer locking. In this paper a hybrid TM design is proposed to reduce the performance overheads caused by the use of these locks while combining three desirable features: (i) full TM functionality whether or not the architectural support is present; (ii) execution of a single common code path in software or hardware; and, (iii) immunity from the privatization problem. The analysis shows how a Hybrid TM can lose important properties, such as starvation freedom. To overcome this issue, Directory Reservations is presented, a low-cost mechanism improving existent solutions designed for Hardware TM.", "paper_title": "Hybrid Transactional Memory with Pessimistic Concurrency Control", "paper_id": "WOS:000289615900005"}