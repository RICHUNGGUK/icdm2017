{"auto_keywords": [{"score": 0.028363140420721168, "phrase": "enterprise_software_systems"}, {"score": 0.00481495049065317, "phrase": "large_enterprise_software_systems"}, {"score": 0.00452963285314407, "phrase": "different_contexts"}, {"score": 0.004220231044214606, "phrase": "business_units"}, {"score": 0.0036279606700393794, "phrase": "large_scale_enterprise_software_systems"}, {"score": 0.003479292061332723, "phrase": "large_industrial_enterprise_software_systems"}, {"score": 0.0032623406075681315, "phrase": "exploratory_case_study"}, {"score": 0.0031286075376993103, "phrase": "document_analysis"}, {"score": 0.003058875648995241, "phrase": "grounded_theory_approach"}, {"score": 0.003000340083107413, "phrase": "seven_types"}, {"score": 0.0027152365187093244, "phrase": "generic_types"}, {"score": 0.0026461551175041608, "phrase": "reusable_mechanisms"}, {"score": 0.0025954969340495353, "phrase": "variability_types"}, {"score": 0.002578826749477773, "phrase": "handling_mechanisms"}, {"score": 0.002529454236169383, "phrase": "real_world"}, {"score": 0.0025132071574192672, "phrase": "existing_concepts"}, {"score": 0.002449253189963288, "phrase": "previous_research_literature"}, {"score": 0.0023412157039327665, "phrase": "software_systems"}, {"score": 0.002296381861149051, "phrase": "theoretical_foundation"}, {"score": 0.0022742871983734737, "phrase": "variability_handling"}, {"score": 0.0021880094145128935, "phrase": "theoretical_foundations"}, {"score": 0.0021599821402426013, "phrase": "variability_handling_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Variability", " Enterprise software systems", " Case study", " Grounded theory"], "paper_abstract": "Context: Enterprise software systems (e.g., enterprise resource planning software) are often deployed in different contexts (e.g., different organizations or different business units or branches of one organization). However, even though organizations, business units or branches have the same or similar business goals, they may differ in how they achieve these goals. Thus, many enterprise software systems are subject to variability and adapted depending on the context in which they are used. Objective: Our goal is to provide a snapshot of variability in large scale enterprise software systems. We aim at understanding the types of variability that occur in large industrial enterprise software systems. Furthermore, we aim at identifying how variability is handled in such systems. Method: We performed an exploratory case study in two large software organizations, involving two large enterprise software systems. Data were collected through interviews and document analysis. Data were analyzed following a grounded theory approach. Results: We identified seven types of variability (e.g., functionality, infrastructure) and eight mechanisms to handle variability (e.g., add-ons, code switches). Conclusions: We provide generic types for classifying variability in enterprise software systems, and reusable mechanisms for handling such variability. Some variability types and handling mechanisms for enterprise software systems found in the real world extend existing concepts and theories. Others confirm findings from previous research literature on variability in software in general and are therefore not specific to enterprise software systems. Our findings also offer a theoretical foundation for describing variability handling in practice. Future work needs to provide more evaluations of the theoretical foundations, and refine variability handling mechanisms into more detailed practices. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "An industrial case study on variability handling in large enterprise software systems", "paper_id": "WOS:000349729700002"}