{"auto_keywords": [{"score": 0.030460281002330076, "phrase": "naive_bayes"}, {"score": 0.027442760024847877, "phrase": "buggy_f-measure"}, {"score": 0.00481495049065317, "phrase": "code_change-based_bug_prediction"}, {"score": 0.0043477114072437316, "phrase": "source_code_files"}, {"score": 0.004181839414007266, "phrase": "software_history"}, {"score": 0.0040027552011993005, "phrase": "impending_change"}, {"score": 0.00386876598761639, "phrase": "existing_classifier-based_bug_prediction_techniques"}, {"score": 0.003614044704141927, "phrase": "large_number"}, {"score": 0.003459191419478298, "phrase": "multiple_feature_selection_techniques"}, {"score": 0.003359647377874098, "phrase": "classification-based_bug_prediction_methods"}, {"score": 0.0032471155306148156, "phrase": "optimal_classification_performance"}, {"score": 0.0031690434364310435, "phrase": "total_number"}, {"score": 0.0028471655497661528, "phrase": "support_vector_machine"}, {"score": 0.0026337482179592422, "phrase": "feature_selection"}, {"score": 0.002608218347502229, "phrase": "significant_improvement"}, {"score": 0.0025085435314540837, "phrase": "prior_change_classification_bug_prediction_results"}, {"score": 0.0024601402359002056, "phrase": "second_and_fourth_authors"}, {"score": 0.0023776656246300063, "phrase": "svm's_improvement"}, {"score": 0.002231747358665628, "phrase": "varying_numbers"}, {"score": 0.0021780349459687622, "phrase": "strong_performance"}, {"score": 0.0021049977753042253, "phrase": "original_number"}], "paper_keywords": ["Reliability", " bug prediction", " machine learning", " feature selection"], "paper_abstract": "Machine learning classifiers have recently emerged as a way to predict the introduction of bugs in changes made to source code files. The classifier is first trained on software history, and then used to predict if an impending change causes a bug. Drawbacks of existing classifier-based bug prediction techniques are insufficient performance for practical use and slow prediction times due to a large number of machine learned features. This paper investigates multiple feature selection techniques that are generally applicable to classification-based bug prediction methods. The techniques discard less important features until optimal classification performance is reached. The total number of features used for training is substantially reduced, often to less than 10 percent of the original. The performance of Naive Bayes and Support Vector Machine (SVM) classifiers when using this technique is characterized on 11 software projects. Naive Bayes using feature selection provides significant improvement in buggy F-measure (21 percent improvement) over prior change classification bug prediction results (by the second and fourth authors [28]). The SVM's improvement in buggy F-measure is 9 percent. Interestingly, an analysis of performance for varying numbers of features shows that strong performance is achieved at even 1 percent of the original number of features.", "paper_title": "Reducing Features to Improve Code Change-Based Bug Prediction", "paper_id": "WOS:000316618800007"}