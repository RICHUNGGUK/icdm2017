{"auto_keywords": [{"score": 0.049483572884790016, "phrase": "test_suites"}, {"score": 0.004656871909510407, "phrase": "integration_perspective"}, {"score": 0.004618166136069052, "phrase": "test_suite_understanding"}, {"score": 0.004579780586951551, "phrase": "software_architectures"}, {"score": 0.004522796947899013, "phrase": "plug-in_and_service-oriented_architectures"}, {"score": 0.004160531596936783, "phrase": "well-known_example"}, {"score": 0.00390792986752692, "phrase": "extensible_ides"}, {"score": 0.003763763153640936, "phrase": "great_deal"}, {"score": 0.003685972800046028, "phrase": "new_products"}, {"score": 0.0035947360742084253, "phrase": "built_systems"}, {"score": 0.00347657813672945, "phrase": "complexity_developers"}, {"score": 0.0034476484413811987, "phrase": "extensive_automated_test_suites"}, {"score": 0.0033905067962602515, "phrase": "current_testing_tools"}, {"score": 0.002682917193736698, "phrase": "five_architectural_views"}, {"score": 0.0026384167183586015, "phrase": "extensibility_perspective"}, {"score": 0.0025838249689625775, "phrase": "-based_systems"}, {"score": 0.002509284173541882, "phrase": "static_and_dynamic_information"}, {"score": 0.002436888552432559, "phrase": "extension_initialization"}, {"score": 0.0022696277881969896, "phrase": "etse"}, {"score": 0.00223196703759329, "phrase": "test_suite_exploration_tool"}, {"score": 0.0021857667493036786, "phrase": "proposed_views"}, {"score": 0.002158505888557746, "phrase": "egit"}, {"score": 0.0021405207258001118, "phrase": "mylyn"}, {"score": 0.0021049977753042253, "phrase": "mylyn_connector"}], "paper_keywords": ["Plug-in systems", " Dynamic analysis", " Static analysis", " Test suite understanding"], "paper_abstract": "Software architectures such as plug-in and service-oriented architectures enable developers to build extensible software products, whose functionality can be enriched by adding or configuring components. A well-known example of such an architecture is Eclipse, best known for its use to create a series of extensible IDEs. Although such architectures give users and developers a great deal of flexibility to create new products, the complexity of the built systems increases. In order to manage this complexity developers use extensive automated test suites. Unfortunately, current testing tools offer little insight in which of the many possible combinations of components and components configurations are actually tested. The goal of this paper is to remedy this problem. To that end, we interview 25 professional developers on the problems they experience in test suite understanding for plug-in architectures. The findings have been incorporated in five architectural views that provide an extensibility perspective on plug-in-based systems and their test suites. The views combine static and dynamic information on plug-in dependencies, extension initialization, extension and service usage, and the test suites. The views have been implemented in ETSE, the Eclipse Plug-in Test Suite Exploration tool. We evaluate the proposed views by analyzing eGit, Mylyn, and a Mylyn connector.", "paper_title": "What your plug-in test suites really test: an integration perspective on test suite understanding", "paper_id": "WOS:000322462000002"}