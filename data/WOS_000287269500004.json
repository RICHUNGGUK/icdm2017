{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nested_datatypes"}, {"score": 0.03543704829341049, "phrase": "generalized_mendler-style_iteration"}, {"score": 0.028110267025340297, "phrase": "case_study"}, {"score": 0.004770211811866158, "phrase": "intensional_type_theory"}, {"score": 0.004703878334423852, "phrase": "definitional_extension_lngmit"}, {"score": 0.004595356579614969, "phrase": "inductive_constructions"}, {"score": 0.004385803860228622, "phrase": "coq"}, {"score": 0.004108161406159407, "phrase": "legal_datatype_definitions"}, {"score": 0.004069977602123085, "phrase": "cic"}, {"score": 0.0038301525703886585, "phrase": "recursively_defined_functions"}, {"score": 0.0037768417338850274, "phrase": "iteration_schemes"}, {"score": 0.003689628075766217, "phrase": "n._mendler"}, {"score": 0.0035376693476114733, "phrase": "polymorphic_typing_instead_of_structural_requirements"}, {"score": 0.0033919477901198716, "phrase": "induction_principle"}, {"score": 0.0032219438233946312, "phrase": "untyped_lambda_calculus"}, {"score": 0.0031919592786945126, "phrase": "explicit_flattening"}, {"score": 0.0031328221096543823, "phrase": "extended_case_study"}, {"score": 0.0030747771905143273, "phrase": "generic_level"}, {"score": 0.0026974065918918275, "phrase": "obtained_iterative_functions"}, {"score": 0.002445021071485221, "phrase": "\"hereditarily_canonical\"_terms"}, {"score": 0.0023223663501882896, "phrase": "whole_construction"}, {"score": 0.0021649437083408425, "phrase": "coq_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Coq", " Type theory", " Datatypes with true nesting", " Naturality for generalized maps", " Explicit flattening", " Monad laws for substitution", " Terminating recursion schemes"], "paper_abstract": "A definitional extension LNGMIt of the Calculus of Inductive Constructions (CIC), that underlies the proof assistant Coq, is presented that allows also to program with nested datatypes that are not legal datatype definitions of CIC since they are \"truly nested\". LNGMIt ensures termination of recursively defined functions that follow iteration schemes in the style of N. Mendler. Characteristically for them, termination comes from polymorphic typing instead of structural requirements on recursive calls. LNGMIt comes with an induction principle and generalized Mendler-style iteration that allows a very clean representation of substitution for an untyped lambda calculus with explicit flattening, as an extended case study. On the generic level, a notion of naturality adapted to generalized Mendler-style iteration is developed, and criteria for it are established, in particular, a map fusion theorem for the obtained iterative functions. Concerning the case study, substitution is proven to fulfill two of the three monad laws, the third one only for \"hereditarily canonical\" terms, but this is rectified by a relativization of the whole construction to those terms. All the generic results and the case study have been fully formalized with the Coq system. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Map fusion for nested datatypes in intensional type theory", "paper_id": "WOS:000287269500004"}