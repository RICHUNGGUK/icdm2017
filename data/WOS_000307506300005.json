{"auto_keywords": [{"score": 0.04561838947368895, "phrase": "data_races"}, {"score": 0.036881562772978674, "phrase": "jrf"}, {"score": 0.009690959385651333, "phrase": "sequential_consistency"}, {"score": 0.00481495049065317, "phrase": "jrf-e"}, {"score": 0.004574085781766281, "phrase": "memory_model-related_bugs"}, {"score": 0.004481132747216135, "phrase": "modern_relaxed_memory_models"}, {"score": 0.0040438338011467845, "phrase": "surprising_behavior"}, {"score": 0.0038413947966606118, "phrase": "different_order"}, {"score": 0.00374399358035391, "phrase": "source_code"}, {"score": 0.00368673793612343, "phrase": "different_threads"}, {"score": 0.0036490529923833884, "phrase": "inconsistent_views"}, {"score": 0.003574830654211291, "phrase": "shared_variables"}, {"score": 0.0035382855372646164, "phrase": "java_racefinder"}, {"score": 0.0033957904376127187, "phrase": "java_pathfinder"}, {"score": 0.0032423089921154503, "phrase": "java_bytecode"}, {"score": 0.0030798711656591948, "phrase": "java_memory_model"}, {"score": 0.0028221322455573624, "phrase": "jrf-eliminator"}, {"score": 0.0026532596852754525, "phrase": "model_checking"}, {"score": 0.0026261108615242557, "phrase": "specifically_counterexample_traces"}, {"score": 0.0024311346712789553, "phrase": "detected_data_races"}, {"score": 0.0021049977753042253, "phrase": "additional_properties"}], "paper_keywords": ["Data race", " Relaxed memory model", " Counterexample"], "paper_abstract": "According to modern relaxed memory models, programs that contain data races need not be sequentially consistent. Executions that are not sequentially consistent may exhibit surprising behavior such as operations on a thread occurring in a different order than indicated by the source code, or different threads having inconsistent views of updates of shared variables. Java Racefinder (JRF) is an extension of Java Pathfinder (JPF), a model checker for Java bytecode. JRF precisely detects data races as defined by the Java memory model and can thus be used to verify sequential consistency. We describe an extension to JRF, JRF-Eliminator (JRF-E), that analyzes information collected during model checking, specifically counterexample traces and acquiring histories, and provides advice to the programmer on how to eliminate detected data races from a program. Once data races have been eliminated, standard model checking and other verification techniques that implicitly assume sequential consistency can be soundly employed to verify additional properties.", "paper_title": "JRF-E: using model checking to give advice on eliminating memory model-related bugs", "paper_id": "WOS:000307506300005"}