{"auto_keywords": [{"score": 0.041387118029522024, "phrase": "composite_service"}, {"score": 0.00481495049065317, "phrase": "composite_web_services"}, {"score": 0.004553128404612054, "phrase": "novel_web_service_composition_framework"}, {"score": 0.004359328949187473, "phrase": "proposed_framework"}, {"score": 0.004305481798183612, "phrase": "adaptive_failure-handling"}, {"score": 0.0041478818670853115, "phrase": "failure-handling_submodules"}, {"score": 0.003617616153730564, "phrase": "composite_web_service"}, {"score": 0.0035728978842974246, "phrase": "service_instantiation"}, {"score": 0.0034206776096452015, "phrase": "individual_users"}, {"score": 0.003336614511719501, "phrase": "existing_frameworks"}, {"score": 0.003234425353582135, "phrase": "failure-handling_behaviors"}, {"score": 0.0031944286166257466, "phrase": "user's_requirements"}, {"score": 0.0031746155143471725, "phrase": "adaff"}, {"score": 0.003039311963787733, "phrase": "requirement-matched_failure"}, {"score": 0.0029830992938695007, "phrase": "manual_development"}, {"score": 0.0028737647829311587, "phrase": "flexible_composite_web_service_design"}, {"score": 0.0027341763737751467, "phrase": "failure_handling"}, {"score": 0.002700348931172875, "phrase": "variable_requirements"}, {"score": 0.002521623057264411, "phrase": "prototype_system"}, {"score": 0.0023990982005125763, "phrase": "composite_service_instance"}, {"score": 0.0023694065215394593, "phrase": "web_services_business_process_execution_language"}, {"score": 0.0022402661832994094, "phrase": "users'_requitement"}, {"score": 0.0021987994275190314, "phrase": "xml_format"}, {"score": 0.0021446993452098597, "phrase": "generated_instance"}, {"score": 0.0021049977753042253, "phrase": "activebpel_engine"}], "paper_keywords": ["composite Web service", " adaptive failure-handling", " dynamic workflow generation", " WS-BPEL"], "paper_abstract": "In this paper, we propose a novel Web service composition framework which dynamically accommodates various failure recovery requirements In the proposed framework called Adaptive Failure-handling Framework (AdaFF), failure-handling submodules are prepared during the design of a composite service, and some of them are systematically selected and automatically combined with the composite Web service at service instantiation in accordance with the requirement of Individual users In contrast, existing frameworks cannot adapt the failure-handling behaviors to user's requirements AdaFF rapidly delivers a composite service supporting the requirement-matched failure handling without manual development. and contributes to a flexible composite Web service design in that service architects never care about failure handling or variable requirements of users For proof of concept, we implement a prototype system of the AdaFF. which automatically generates a composite service instance with Web Services Business Process Execution Language (WS-BPEL) according to the users' requitement specified in XML format and executes the generated Instance on the ActiveBPEL engine.", "paper_title": "AdaFF: Adaptive Failure-Handling Framework for Composite Web Services", "paper_id": "WOS:000276848600016"}