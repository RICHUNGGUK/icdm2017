{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dynamic_binary_translation"}, {"score": 0.04916809664432026, "phrase": "embedded_systems"}, {"score": 0.004633429997452688, "phrase": "scratchpad_memory"}, {"score": 0.004545240514015278, "phrase": "important_challenges"}, {"score": 0.0041287394089001405, "phrase": "dynamic_binary_translator_stores"}, {"score": 0.003934970057482768, "phrase": "software-managed_code_cache"}, {"score": 0.00334144503360907, "phrase": "small_scratchpad_memory"}, {"score": 0.003246380517062771, "phrase": "code_cache"}, {"score": 0.003154012038613403, "phrase": "small_code_cache"}, {"score": 0.0030642636185693054, "phrase": "frequent_code_evictions"}, {"score": 0.0023178219772486868, "phrase": "translated_code_size"}, {"score": 0.0021049977753042253, "phrase": "program's_translated_code"}], "paper_keywords": ["Design", " Experimentation", " Measurement", " Performance", " Code generation", " dynamic binary translation", " footprint reduction", " system-on-chip"], "paper_abstract": "Important challenges for embedded systems can be addressed by dynamic binary translation. A dynamic binary translator stores translated instructions in a software-managed code cache, which is usually large to minimize overhead. This article shows how to use a small scratchpad memory for the code cache. A small code cache may require frequent code evictions and retranslation, which degrade performance. We propose techniques to reduce the number of instructions inserted by the translator and a way to form fragments that minimizes translated code size. With our techniques, a much smaller code cache can hold a program's translated code working set.", "paper_title": "Enabling Dynamic Binary Translation in Embedded Systems with Scratchpad Memory", "paper_id": "WOS:000313395700020"}