{"auto_keywords": [{"score": 0.02780171105606632, "phrase": "fortran"}, {"score": 0.004478308876320956, "phrase": "engineering_code_written"}, {"score": 0.003987755561492638, "phrase": "bevel_gear_cutting_processes"}, {"score": 0.0038737214010638745, "phrase": "highly_flexible_data_structures"}, {"score": 0.0032546105164772995, "phrase": "openmp_parallelization"}, {"score": 0.0030267296900520217, "phrase": "previously_applied_approaches"}, {"score": 0.0029400959763737364, "phrase": "nesting_parallel_sections"}, {"score": 0.002855934865505357, "phrase": "stack-based_algorithms"}, {"score": 0.0027341763737751467, "phrase": "recursive_procedures"}, {"score": 0.002469830206270585, "phrase": "binary_tree_structures"}, {"score": 0.0021670777282518424, "phrase": "recent_hardware"}, {"score": 0.0021049977753042253, "phrase": "fortran_compilers"}], "paper_keywords": ["OpenMP 3.0", " Tasking", " Nesting", " Fortran 90/95", " Recursive subroutines", " Parallelization", " Productivity"], "paper_abstract": "The modeling of bevel gear cutting processes requires highly flexible data structures and algorithms. We compare the effort and performance of an OpenMP parallelization employing OpenMP 3.0 tasks with previously applied approaches like nesting parallel sections and stack-based algorithms when parallelizing recursive procedures written in Fortran 95 working on binary tree structures. We take a look at various combinations of recent hardware and Fortran compilers.", "paper_title": "Productivity and Performance Portability of the OpenMP 3.0 Tasking Concept When Applied to an Engineering Code Written in Fortran 95", "paper_id": "WOS:000281163100004"}