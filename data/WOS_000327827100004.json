{"auto_keywords": [{"score": 0.031249958971954577, "phrase": "bucket_decomposition"}, {"score": 0.00481495049065317, "phrase": "graph_g"}, {"score": 0.004768104290288521, "phrase": "n_vertices"}, {"score": 0.0046986841646790315, "phrase": "minimum_b"}, {"score": 0.004219427915728972, "phrase": "adjacent_vertices"}, {"score": 0.003901754272977278, "phrase": "bandwidth_problem"}, {"score": 0.0036434002236454305, "phrase": "polynomial_space"}, {"score": 0.0034355662264234864, "phrase": "cygan_et_al"}, {"score": 0.0030397596289795143, "phrase": "bucket_decompositions"}, {"score": 0.002995427206425849, "phrase": "input_graph"}, {"score": 0.0029086869572567072, "phrase": "vertex_set"}, {"score": 0.002838319783373086, "phrase": "ordered_sets"}, {"score": 0.0027159094186967247, "phrase": "equal_sizes"}, {"score": 0.0024028135317872, "phrase": "smallest_bucket_size"}, {"score": 0.002265586601922693, "phrase": "divide-and-conquer_strategy"}, {"score": 0.0021784745589727246, "phrase": "improved_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Exponential time algorithm", " Approximation algorithm", " Graph bandwidth", " Bucket decomposition"], "paper_abstract": "The bandwidth of a graph G on n vertices is the minimum b such that the vertices of G can be labeled from 1 to n such that the labels of every pair of adjacent vertices differ by at most b. In this paper, we present a 2-approximation algorithm for the Bandwidth problem that takes worst-case O(1.9797(n)) = O(3(0.6217n)) time and uses polynomial space. This improves both the previous best 2- and 3-approximation algorithms of Cygan et al. which have O*(3(n)) and O*(2(n)) worst-case running time bounds, respectively. Our algorithm is based on constructing bucket decompositions of the input graph. A bucket decomposition partitions the vertex set of a graph into ordered sets (called buckets) of (almost) equal sizes such that all edges are either incident to vertices in the same bucket or to vertices in two consecutive buckets. The idea is to find the smallest bucket size for which there exists a bucket decomposition. The algorithm uses a divide-and-conquer strategy along with dynamic programming to achieve the improved time bound. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "An exponential time 2-approximation algorithm for bandwidth", "paper_id": "WOS:000327827100004"}