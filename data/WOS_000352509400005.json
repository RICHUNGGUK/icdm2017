{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "structural_polymorphism"}, {"score": 0.004707188147442449, "phrase": "recursive_types"}, {"score": 0.004550029253278477, "phrase": "type_system"}, {"score": 0.004448169552315403, "phrase": "objective_caml"}, {"score": 0.003627800727103479, "phrase": "structurally_polymorphic_types"}, {"score": 0.003467040410632942, "phrase": "polymorphic_object"}, {"score": 0.0031665087019813244, "phrase": "extra_specificity"}, {"score": 0.0027325449069867222, "phrase": "core_ml"}, {"score": 0.0024673738215365104, "phrase": "type_soundness"}, {"score": 0.002253299769886694, "phrase": "type_inference"}, {"score": 0.0021049977753042253, "phrase": "stack-based_interpreter"}], "paper_keywords": [""], "paper_abstract": "The type system of Objective Caml has many unique features, which make ensuring the correctness of its implementation difficult. One of these features is structurally polymorphic types, such as polymorphic object and variant types, which have the extra specificity of allowing recursion. We implemented in Coq a certified interpreter for Core ML extended with structural polymorphism and recursion. Along with type soundness of evaluation, soundness and principality of type inference, and correctness of a stack-based interpreter, are also proved.", "paper_title": "A certified implementation of ML with structural polymorphism and recursive types", "paper_id": "WOS:000352509400005"}