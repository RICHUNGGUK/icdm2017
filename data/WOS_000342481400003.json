{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "single_operation_multiple_data"}, {"score": 0.004641351004344458, "phrase": "today's_commodity_computational_systems"}, {"score": 0.003982617095636925, "phrase": "mainstream_computing"}, {"score": 0.003700371064796848, "phrase": "underlying_architecture"}, {"score": 0.0036553070575015344, "phrase": "execution_models"}, {"score": 0.0036107898615445797, "phrase": "current_research"}, {"score": 0.0035668128900149814, "phrase": "parallel_programming"}, {"score": 0.0033548062793973144, "phrase": "system's_heterogeneity"}, {"score": 0.00327356326590461, "phrase": "language_level"}, {"score": 0.0031553611552558986, "phrase": "uniform_framework"}, {"score": 0.0030601162942933665, "phrase": "single_operation_multiple_data_model"}, {"score": 0.002860546817196148, "phrase": "simple_extension"}, {"score": 0.0028084079003212973, "phrase": "java_programming_language"}, {"score": 0.0025615908073796027, "phrase": "multi-core_cpus"}, {"score": 0.0024842242921857705, "phrase": "performance_evaluation"}, {"score": 0.0023507916951658455, "phrase": "simple_programming_model"}, {"score": 0.0022382002476510573, "phrase": "performance_gains"}, {"score": 0.002183938718432764, "phrase": "hand-tuned_data-parallel_multi-threaded_java_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data parallelism", " Single Operation Multiple Data", " Multi-cores", " GPUs"], "paper_abstract": "Heterogeneity is omnipresent in today's commodity computational systems, which comprise at least one Central Processing Unit (CPU) and one Graphics Processing Unit (GPU). Nonetheless, all this computing power is not being harnessed in mainstream computing, as the programming of these systems entails many details of the underlying architecture and execution models. Current research on parallel programming is addressing these issues but, still, the system's heterogeneity is exposed at language level. This paper proposes a uniform framework, grounded on the Single Operation Multiple Data model, for the programming of such heterogeneous systems. We designed a simple extension of the Java programming language that embodies the model, and developed a compiler that generates code for both multi-core CPUs and GPUs. A performance evaluation attests that, despite being based on a simple programming model, the approach is able to deliver performance gains on par with hand-tuned data-parallel multi-threaded Java applications. (c) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Heterogeneous programming with Single Operation Multiple Data", "paper_id": "WOS:000342481400003"}