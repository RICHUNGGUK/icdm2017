{"auto_keywords": [{"score": 0.046743247979738646, "phrase": "simulation_rates"}, {"score": 0.00481495049065317, "phrase": "legacy_molecular_dynamics_software"}, {"score": 0.004761850836420121, "phrase": "directive-based_offload"}, {"score": 0.004709333998298903, "phrase": "directive-based_programming_models"}, {"score": 0.004555217356295278, "phrase": "many-core_coprocessors"}, {"score": 0.004430629452265786, "phrase": "molecular_dynamics"}, {"score": 0.004238307626560739, "phrase": "code_complexity"}, {"score": 0.004191540451296395, "phrase": "offload_models"}, {"score": 0.003608266640131664, "phrase": "lammps_molecular_dynamics_code"}, {"score": 0.0035486713647627246, "phrase": "concurrent_calculations"}, {"score": 0.0033570147767493746, "phrase": "standard_molecular_dynamics_algorithms"}, {"score": 0.003004103583782076, "phrase": "code_optimizations"}, {"score": 0.002794802975530612, "phrase": "extreme_cases"}, {"score": 0.0026732973536990373, "phrase": "lammas_benchmarks"}, {"score": 0.00262910358108176, "phrase": "production_molecular_dynamics_simulations"}, {"score": 0.002585638506308606, "phrase": "stampede_hybrid_supercomputer"}, {"score": 0.00252881829944971, "phrase": "nvidia"}, {"score": 0.0023656467839555458, "phrase": "organic_molecules"}, {"score": 0.00230080652063411, "phrase": "liquid_crystals"}, {"score": 0.002275369990910878, "phrase": "stampede"}, {"score": 0.002152332983488664, "phrase": "\"intel_package"}], "paper_keywords": ["Molecular dynamics", " Xeon Phi", " GPU", " Coprocessor", " Accelerator", " Many-core"], "paper_abstract": "Directive-based programming models are one solution for exploiting many-core coprocessors to increase simulation rates in molecular dynamics. They offer the potential to reduce code complexity with offload models that can selectively target computations to run on the CPU, the coprocessor, or both. In this paper, we describe modifications to the LAMMPS molecular dynamics code to enable concurrent calculations on a CPU and coprocessor. We demonstrate that standard molecular dynamics algorithms can run efficiently on both the CPU and an x86-based coprocessor using the same subroutines. As a consequence, we demonstrate that code optimizations for the coprocessor also result in speedups on the CPU; in extreme cases up to 4.7X. We provide results for LAMMAS benchmarks and for production molecular dynamics simulations using the Stampede hybrid supercomputer with both Intel (R) Xeon Phi (TM) coprocessors and NVIDIA GPUs: The optimizations presented have increased simulation rates by over 2X for organic molecules and over 7X for liquid crystals on Stampede. The optimizations are available as part of the \"Intel package\" supplied with LAMMPS. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Optimizing legacy molecular dynamics software with directive-based offload", "paper_id": "WOS:000357750100010"}