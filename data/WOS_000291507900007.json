{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "ii._lower_bounds"}, {"score": 0.004010960493946656, "phrase": "tree_decompositions"}, {"score": 0.003941746077126688, "phrase": "small_width"}, {"score": 0.003806866174028117, "phrase": "good_lower_bounds"}, {"score": 0.0032546105164772995, "phrase": "bound_algorithms"}, {"score": 0.002957222630196853, "phrase": "high_lower_bound"}, {"score": 0.002880927789104712, "phrase": "specific_graph_instance"}, {"score": 0.0027581067089091434, "phrase": "dynamic_programming_approach"}, {"score": 0.0023168823213024856, "phrase": "lower_bounds"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Treewidth", " Lower bounds", " Heuristics", " Graph algorithms"], "paper_abstract": "For several applications, it is important to be able to compute the treewidth of a given graph and to find tree decompositions of small width reasonably fast. Good lower bounds on the treewidth of a graph can, amongst others, help to speed up branch and bound algorithms that compute the treewidth of a graph exactly. A high lower bound for a specific graph instance can tell that a dynamic programming approach for solving a problem is infeasible for this instance. This paper gives an overview of several recent methods that give lower bounds on the treewidth of graphs. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Treewidth computations II. Lower bounds", "paper_id": "WOS:000291507900007"}