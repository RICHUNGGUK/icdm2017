{"auto_keywords": [{"score": 0.04776153899320318, "phrase": "similarity_coefficients"}, {"score": 0.042070971187967834, "phrase": "observed_failures"}, {"score": 0.029578773889651095, "phrase": "case_study"}, {"score": 0.02910591857297058, "phrase": "multiple_faults"}, {"score": 0.028068654296818766, "phrase": "synthesized_techniques"}, {"score": 0.00481495049065317, "phrase": "fault_localization"}, {"score": 0.004775335634705251, "phrase": "java_programs"}, {"score": 0.0046970764288494764, "phrase": "existing_fault-localization_techniques"}, {"score": 0.004378469469879815, "phrase": "dynamic_spectra"}, {"score": 0.004064548693812535, "phrase": "particular_program_feature"}, {"score": 0.0033190180867511605, "phrase": "fault-failure_correlation_measurements"}, {"score": 0.0032242793143795454, "phrase": "fault-localization_framework"}, {"score": 0.0031582637043009562, "phrase": "key_basic_blocks"}, {"score": 0.003132236287543072, "phrase": "program_features"}, {"score": 0.003093595537995837, "phrase": "noise-reduction_methodology"}, {"score": 0.0030052718739167696, "phrase": "fault-localization_techniques"}, {"score": 0.002931569771634119, "phrase": "five_base_techniques"}, {"score": 0.002907405102646616, "phrase": "five_real-life_median-scaled_programs"}, {"score": 0.0026875205754965537, "phrase": "experimental_result"}, {"score": 0.0024842242921857705, "phrase": "required_feature_values"}, {"score": 0.0022492129111567824, "phrase": "proposed_framework"}, {"score": 0.0022214412809055013, "phrase": "significant_and_positive_effect"}, {"score": 0.0021579641460002523, "phrase": "corresponding_base_techniques"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Fault localization", " Key block chain", " Noise reduction", " Program debugging"], "paper_abstract": "Context: Existing fault-localization techniques combine various program features and similarity coefficients with the aim of precisely assessing the similarities among the dynamic spectra of these program features to predict the locations of faults. Many such techniques estimate the probability of a particular program feature causing the observed failures. They often ignore the noise introduced by other features on the same set of executions that may lead to the observed failures. It is unclear to what extent such noise can be alleviated. Objective: This paper aims to develop a framework that reduces the noise in fault-failure correlation measurements. Method: We develop a fault-localization framework that uses chains of key basic blocks as program features and a noise-reduction methodology to improve on the similarity coefficients of fault-localization techniques. We evaluate our framework on five base techniques using five real-life median-scaled programs in different application domains. We also conduct a case study on subjects with multiple faults. Results: The experimental result shows that the synthesized techniques are more effective than their base techniques by almost 10%. Moreover, their runtime overhead factors to collect the required feature values are practical. The case study also shows that the synthesized techniques work well on subjects with multiple faults. Conclusion: We conclude that the proposed framework has a significant and positive effect on improving the effectiveness of the corresponding base techniques. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A general noise-reduction framework for fault localization of Java programs", "paper_id": "WOS:000317327000007"}