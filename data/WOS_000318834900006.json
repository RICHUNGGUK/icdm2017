{"auto_keywords": [{"score": 0.030555976854272263, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "consecutive_permutation_pattern_matching"}, {"score": 0.00457696724030363, "phrase": "length_m"}, {"score": 0.003717656912608012, "phrase": "simple_linear_time_algorithm"}, {"score": 0.003291336101694653, "phrase": "consecutive_symbols"}, {"score": 0.0027414948679658816, "phrase": "consecutive_subsequences"}, {"score": 0.0026057256900479026, "phrase": "natural_assumption"}, {"score": 0.0021923400552366777, "phrase": "classical_knuth-morris-pratt_string"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Permutation pattern matching", " Pattern matching", " Knuth-Morris-Pratt algorithm", " Analysis of algorithms"], "paper_abstract": "We say that two sequences x and w of length m are order-isomorphic (of the same \"shape\") if w[i] <= w[j] if and only if x[i] <= x[j] for each i, j is an element of [1, m]. We present a simple linear time algorithm for checking if a given sequence y of length n contains a factor which is order-isomorphic to a given pattern x. A factor is a subsequence of consecutive symbols of y, so we call our problem the consecutive permutation pattern matching. The (general) permutation pattern matching problem is related to general subsequences and is known to be NP-complete. We show that the situation for consecutive subsequences is significantly different and present an O(n + m) time algorithm under a natural assumption that the symbols of x can be sorted in O(m) time, otherwise the time is O (n + m logm). In our algorithm we use a modification of the classical Knuth-Morris-Pratt string matching algorithm. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A linear time algorithm for consecutive permutation pattern matching", "paper_id": "WOS:000318834900006"}