{"auto_keywords": [{"score": 0.04056439022745188, "phrase": "symbolic_execution"}, {"score": 0.00481495049065317, "phrase": "case_generation"}, {"score": 0.004764859786310636, "phrase": "object-oriented_imperative_languages"}, {"score": 0.0047152877145889656, "phrase": "clp._testing"}, {"score": 0.004641890423057823, "phrase": "vital_part"}, {"score": 0.004569630374630379, "phrase": "software_development_process"}, {"score": 0.004522080178250592, "phrase": "test_case_generation"}, {"score": 0.0040094142308666975, "phrase": "white-box_tcg"}, {"score": 0.0036680857629458785, "phrase": "normal_values"}, {"score": 0.003444732262403694, "phrase": "symbolic_values"}, {"score": 0.0034088473318056537, "phrase": "arbitrary_values"}, {"score": 0.002974886152979993, "phrase": "complex_heap-allocated_data_structures"}, {"score": 0.0028828348726682965, "phrase": "tcg_process"}, {"score": 0.0027936239349923464, "phrase": "virtual_invocations"}, {"score": 0.0025156683465194967, "phrase": "constraint_logic_programming"}, {"score": 0.0024377918036784336, "phrase": "promising_application_field"}, {"score": 0.0024123718353063653, "phrase": "tcg."}, {"score": 0.0023133055945761235, "phrase": "fully_clp-based_framework"}, {"score": 0.002253461585851626, "phrase": "oo_imperative_language"}, {"score": 0.0021609076467365247, "phrase": "corresponding_implementation"}, {"score": 0.0021049977753042253, "phrase": "challenging_java_programs"}], "paper_keywords": ["test case generation", " symbolic execution", " constraint logic programming"], "paper_abstract": "Testing is a vital part of the software development process. Test Case Generation (TCG) is the process of automatically generating a collection of test-cases which are applied to a system under test. White-box TCG is usually performed by means of symbolic execution, i.e., instead of executing the program on normal values (e.g., numbers), the program is executed on symbolic values representing arbitrary values. When dealing with an object-oriented (OO) imperative language, symbolic execution becomes challenging as, among other things, it must be able to backtrack, complex heap-allocated data structures should be created during the TCG process and features like inheritance, virtual invocations and exceptions have to be taken into account. Due to its inherent symbolic execution mechanism, we pursue in this paper that Constraint Logic Programming (CLP) has a promising application field in TCG. We will support our claim by developing a fully CLP-based framework to TCG of an OO imperative language, and by assessing it on a corresponding implementation on a set of challenging Java programs.", "paper_title": "Test case generation for object-oriented imperative languages in CLP", "paper_id": "WOS:000280508200020"}