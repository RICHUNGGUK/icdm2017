{"auto_keywords": [{"score": 0.030066192702221616, "phrase": "scj_theory"}, {"score": 0.00481495049065317, "phrase": "safety-critical_java_memory_model"}, {"score": 0.004727995968069753, "phrase": "safety-critical_java"}, {"score": 0.004503931457483988, "phrase": "java"}, {"score": 0.004449280529563265, "phrase": "real-time_programming"}, {"score": 0.004212453011596424, "phrase": "safety-critical_systems"}, {"score": 0.003988180913997414, "phrase": "international_effort"}, {"score": 0.0035100601949451028, "phrase": "first_formalisation"}, {"score": 0.0034465894339710864, "phrase": "scj_model"}, {"score": 0.0034049123167891955, "phrase": "memory_regions"}, {"score": 0.003323069755226759, "phrase": "hoare"}, {"score": 0.0032431667821391044, "phrase": "unifying_theories"}, {"score": 0.0029965060407413898, "phrase": "refinement_models"}, {"score": 0.0029602552900111407, "phrase": "object_orientation"}, {"score": 0.0027019577537850583, "phrase": "utp"}, {"score": 0.002636956926079255, "phrase": "general_theory"}, {"score": 0.002320449502337321, "phrase": "first_essential_ingredient"}, {"score": 0.002264607102799332, "phrase": "novel_programming_paradigm"}, {"score": 0.0022236080212027437, "phrase": "scj"}, {"score": 0.0021049977753042253, "phrase": "formal_reasoning_techniques"}], "paper_keywords": ["Safety-Critical Java", " Memory safety", " Semantics", " Unifying theories of programming", " Integration", " Refinement"], "paper_abstract": "Safety-Critical Java (SCJ) is a version of Java for real-time programming, restricted to facilitate certification of implementations of safety-critical systems. Its development is the result of an international effort involving experts from industry and academia. What we provide here is, as far as we know, the first formalisation of the SCJ model of memory regions. We use Hoare and He's unifying theories of programming (UTP), enabling the integration of our theory with refinement models for object orientation and concurrency. In developing the SCJ theory, we also make a contribution to UTP by providing a general theory of invariants (an instance of which is used in the SCJ theory). The results presented here are a first essential ingredient to formalise the novel programming paradigm embedded in SCJ, and enable the justification and development of formal reasoning techniques based on refinement.", "paper_title": "The Safety-Critical Java memory model formalised", "paper_id": "WOS:000313073100003"}