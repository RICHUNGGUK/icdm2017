{"auto_keywords": [{"score": 0.03892144403889801, "phrase": "declarative_process_models"}, {"score": 0.03770688949592306, "phrase": "timed_declare"}, {"score": 0.00481495049065317, "phrase": "timed_automata"}, {"score": 0.004772060936021876, "phrase": "priori_warnings"}, {"score": 0.004715465748738294, "phrase": "timed_declarative_process_models"}, {"score": 0.00461802698572959, "phrase": "high_variability"}, {"score": 0.00457688347567955, "phrase": "traditional_process_modeling_languages"}, {"score": 0.004363536354756615, "phrase": "cooperative_environments"}, {"score": 0.004311765153841034, "phrase": "human_knowledge"}, {"score": 0.004286109357236311, "phrase": "declarative_languages"}, {"score": 0.003860961077439364, "phrase": "process_execution"}, {"score": 0.0038037569581555967, "phrase": "modern_cooperative_business"}, {"score": 0.0037473971885087433, "phrase": "utmost_importance"}, {"score": 0.0034986714994770995, "phrase": "temporal_constraints"}, {"score": 0.0031139490563304767, "phrase": "extended_version"}, {"score": 0.003067778605343437, "phrase": "formal_timed_semantics"}, {"score": 0.0030404045763332437, "phrase": "entire_language"}, {"score": 0.002977475154200498, "phrase": "untimed_semantics"}, {"score": 0.002950904524853741, "phrase": "expected_way"}, {"score": 0.002323308052177842, "phrase": "priori_guidance"}, {"score": 0.0022015695920570167, "phrase": "declare_model"}, {"score": 0.0021559645899673664, "phrase": "resource_planning"}, {"score": 0.0021367093107378847, "phrase": "declare"}, {"score": 0.0021049977753042253, "phrase": "cpn_tools"}], "paper_keywords": ["Declarative process modeling", " metric temporal logic", " error detection", " operational support", " planning", " timed automata", " Declare"], "paper_abstract": "Many processes are characterized by high variability, making traditional process modeling languages cumbersome or even impossible to be used for their description. This is especially true in cooperative environments relying heavily on human knowledge. Declarative languages, like Declare, alleviate this issue by not describing what to do step-by-step but by defining a set of constraints between actions that must not be violated during the process execution. Furthermore, in modern cooperative business, time is of utmost importance. Therefore, declarative process models should be able to take this dimension into consideration. Timed Declare has already previously been introduced to monitor temporal constraints at runtime, but it has until now only been possible to provide an alert when a constraint has already been violated without the possibility of foreseeing and avoiding such violations. In this paper, we introduce an extended version of Timed Declare with a formal timed semantics for the entire language. The semantics degenerates to the untimed semantics in the expected way. We also introduce a translation to timed automata, which allows us to detect inconsistencies in models prior to execution and to early detect that a certain task is time sensitive. This means that either the task cannot be executed after a deadline (or before a latency), or that constraints are violated unless it is executed before (or after) a certain time. This makes it possible to use declarative process models to provide a priori guidance instead of just a posteriori detecting that an execution is invalid. We also outline how a Declare model with time can be used in resource planning and how Declare has been integrated into CPN Tools.", "paper_title": "Using Timed Automata for a Priori Warnings and Planning for Timed Declarative Process Models", "paper_id": "WOS:000336257600004"}