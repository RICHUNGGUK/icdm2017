{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "public_clouds"}, {"score": 0.032988713494529996, "phrase": "cloudia"}, {"score": 0.004750873844061641, "phrase": "increasing_number"}, {"score": 0.00470862827326028, "phrase": "distributed_data-driven_applications"}, {"score": 0.004625255533545965, "phrase": "shared_public_clouds"}, {"score": 0.004383852039913171, "phrase": "higher_utilization"}, {"score": 0.004344855841195913, "phrase": "lower_costs"}, {"score": 0.004306205029641728, "phrase": "private_clusters"}, {"score": 0.004229927464182562, "phrase": "high_utilization"}, {"score": 0.004154995396099332, "phrase": "cloud_providers"}, {"score": 0.0040996651541091575, "phrase": "virtual_machine_instances"}, {"score": 0.0038510053729959074, "phrase": "physically_distant_machines"}, {"score": 0.0037490909410974166, "phrase": "allocation_strategy"}, {"score": 0.0036826452656927877, "phrase": "large_differences"}, {"score": 0.0036498637283470386, "phrase": "average_latency"}, {"score": 0.0035532533960012298, "phrase": "large_class"}, {"score": 0.00341309513558946, "phrase": "significant_performance_degradation"}, {"score": 0.003293142761521425, "phrase": "application_components"}, {"score": 0.003011328068286321, "phrase": "application_node_deployments"}, {"score": 0.0027659126653647712, "phrase": "algorithmic_techniques"}, {"score": 0.002729029534060092, "phrase": "mixed-integer_programming"}, {"score": 0.0027047136845332917, "phrase": "constraint_programming_techniques"}, {"score": 0.0026095920086044145, "phrase": "possible_mappings"}, {"score": 0.0025863375961196005, "phrase": "application_nodes"}, {"score": 0.002506562885555113, "phrase": "synthetic_and_real_applications"}, {"score": 0.0023437863565921053, "phrase": "communication_cost"}, {"score": 0.0021720199689914464, "phrase": "service_response_time"}, {"score": 0.0021049977753042253, "phrase": "application_code"}], "paper_keywords": ["Embedding", " Cloud computing", " Parallel frameworks", " Database optimizations"], "paper_abstract": "An increasing number of distributed data-driven applications are moving into shared public clouds. By sharing resources and operating at scale, public clouds promise higher utilization and lower costs than private clusters. To achieve high utilization, however, cloud providers inevitably allocate virtual machine instances non-contiguously; i.e., instances of a given application may end-up in physically distant machines in the cloud. This allocation strategy can lead to large differences in average latency between instances. For a large class of applications, this difference can result in significant performance degradation, unless care is taken in how application components are mapped to instances. In this paper, we propose ClouDiA, a general deployment advisor that selects application node deployments minimizing either (i) the largest latency between application nodes, or (ii) the longest critical path among all application nodes. ClouDiA employs a number of algorithmic techniques, including mixed-integer programming and constraint programming techniques, to efficiently search the space of possible mappings of application nodes to instances. Through experiments with synthetic and real applications in Amazon EC2, we show that mean latency is a robust metric to model communication cost in these applications and that our search techniques yield a 15-55 % reduction in time-to-solution or service response time, without any need for modifying application code.", "paper_title": "ClouDiA: a deployment advisor for public clouds", "paper_id": "WOS:000361395800003"}