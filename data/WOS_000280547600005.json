{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "aspectj"}, {"score": 0.01147616517348197, "phrase": "arbitrary_code_region"}, {"score": 0.011328417766404994, "phrase": "join_point"}, {"score": 0.004650330504968421, "phrase": "good_candidate"}, {"score": 0.004550300345169981, "phrase": "aspect-oriented_programming"}, {"score": 0.004356620736507642, "phrase": "best_granularity"}, {"score": 0.004262881313926916, "phrase": "underlying_hardware"}, {"score": 0.004189337956225294, "phrase": "best_execution_performance"}, {"score": 0.003976203286249396, "phrase": "synchronization_code"}, {"score": 0.003757480190200645, "phrase": "different_hardware"}, {"score": 0.0036926236934657864, "phrase": "existing_aop_languages"}, {"score": 0.0032974089700312423, "phrase": "synchronization_aspect"}, {"score": 0.00321236577162671, "phrase": "alternative_feature"}, {"score": 0.0031845067058084583, "phrase": "feature_modeling"}, {"score": 0.0031023662967184216, "phrase": "available_synchronization_aspects"}, {"score": 0.002347378595930709, "phrase": "mandatory_advice"}, {"score": 0.002257070536352418, "phrase": "aspectbench_compiler"}, {"score": 0.00212343307513777, "phrase": "javassist"}, {"score": 0.002105013292696392, "phrase": "hadoop"}], "paper_keywords": ["Languages", " Design", " Aspect-Oriented Programming", " Feature-Oriented Programming", " Region", " Synchronization"], "paper_abstract": "Synchronization is a good candidate for an aspect in aspect-oriented programming (AOP) since programmers have to choose the best granularity of synchronization for the underlying hardware to obtain the best execution performance. If synchronization is an aspect, programmers can change the synchronization code independently of the rest of the program when the program runs on different hardware. However, existing AOP languages such as AspectJ have problems. They cannot select an arbitrary code region as a join point. Moreover, they cannot enforce weaving of a synchronization aspect. Since it is an alternative feature in feature modeling, at least one of available synchronization aspects must be woven. Otherwise, the program would be thread-unsafe. Since an aspect in AspectJ is inherently optional, programmers must be responsible for weaving it. To solve these problems, this paper proposes two new constructs for AspectJ, region cut and assertions for advice. Regioncut selects arbitrary code region as a join point and assertion for advice enforces weaving a mandatory advice. We implemented these constructs by extending the AspectBench compiler. We evaluated the design of our constructs by applying them to two open-source software products, Javassist and Hadoop.", "paper_title": "Extending AspectJ for Separating Regions", "paper_id": "WOS:000280547600005"}