{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "character_classes"}, {"score": 0.004760017604908536, "phrase": "prime_number_encoding"}, {"score": 0.0042928648367867835, "phrase": "length_m"}, {"score": 0.004171402455813099, "phrase": "length_n."}, {"score": 0.0041001740903338834, "phrase": "pattern_position"}, {"score": 0.004007083686875716, "phrase": "allowed_set"}, {"score": 0.0038936755823756226, "phrase": "finite_alphabet"}, {"score": 0.003873121386534477, "phrase": "sigma"}, {"score": 0.0037617986040878342, "phrase": "fft-based_algorithm"}, {"score": 0.0036763623220059933, "phrase": "novel_prime-numbers_encoding_scheme"}, {"score": 0.0034512514926836667, "phrase": "fastest_extant_approaches"}, {"score": 0.003334309053314909, "phrase": "boolean_convolutions"}, {"score": 0.0031845067058084583, "phrase": "sigma_vertical_bar"}, {"score": 0.002806256131739047, "phrase": "fastest_techniques"}, {"score": 0.0027741761880779535, "phrase": "wildcard_matching"}, {"score": 0.002726740692380339, "phrase": "special_case"}, {"score": 0.0026494723416072316, "phrase": "major_advantage"}, {"score": 0.002487083025913648, "phrase": "running_time"}, {"score": 0.002444544487772349, "phrase": "ram_word_size"}, {"score": 0.002294686545883412, "phrase": "character_classes_problems"}, {"score": 0.0022168460543913787, "phrase": "k_mismatches"}, {"score": 0.002191489192077851, "phrase": "hamming_distance"}, {"score": 0.0021049977753042253, "phrase": "subset_matching_problem"}], "paper_keywords": ["Pattern matching with character classes", " Subset matching", " Hamming distance", " FFT-based pattern matching"], "paper_abstract": "In pattern matching with character classes the goal is to find all occurrences of a pattern of length m in a text of length n. where each pattern position consists of an allowed set of characters from a finite alphabet Sigma. We present an FFT-based algorithm that uses a novel prime-numbers encoding scheme, which is log n/log m times faster than the fastest extant approaches, which are based on boolean convolutions. In particular, if m(vertical bar Sigma vertical bar) =n(0(1)), our algorithm runsin time O (n log m), matching the complexity of the fastest techniques for wildcard matching. a special case of our problem. A major advantage of our algorithm is that it allows a tradeoff between the running time and the RAM word size. Our algorithm also speeds up solutions to approximate matching with character classes problems-namely, matching with k mismatches and Hamming distance, as well as to the subset matching problem. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Faster pattern matching with character classes using prime number encoding", "paper_id": "WOS:000263385500001"}