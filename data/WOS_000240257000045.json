{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "counter_automata"}, {"score": 0.004594137808658537, "phrase": "verification_problem"}, {"score": 0.004424768776701965, "phrase": "one-selector_linked_data_structures"}, {"score": 0.00422177384286051, "phrase": "new_automated_approach"}, {"score": 0.003598492288058048, "phrase": "accurate_abstract_models"}, {"score": 0.0034657012607680203, "phrase": "abstract_heap_graphs"}, {"score": 0.003401148484767927, "phrase": "list_segments"}, {"score": 0.0026633568650501873, "phrase": "automatic_analysis_techniques"}, {"score": 0.002447101794397243, "phrase": "list_programs"}, {"score": 0.0021652891317252994, "phrase": "automatically_termination"}, {"score": 0.0021049977753042253, "phrase": "sorting_programs"}], "paper_keywords": [""], "paper_abstract": "We address the verification problem of programs manipulating one-selector linked data structures. We propose a new automated approach for checking safety and termination for these programs. Our approach is based on using counter automata as accurate abstract models: control states correspond to abstract heap graphs where list segments without sharing are collapsed, and counters are used to keep track of the number of elements in these segments. This allows to apply automatic analysis techniques and tools for counter automata in order to verify list programs. We show the effectiveness of our approach, in particular by verifying automatically termination of some sorting programs.", "paper_title": "Programs with lists are counter automata", "paper_id": "WOS:000240257000045"}