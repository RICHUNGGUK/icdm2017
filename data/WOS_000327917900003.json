{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "heap_sizing_rule"}, {"score": 0.036593342712279084, "phrase": "page_faults"}, {"score": 0.029673016834524942, "phrase": "execution_time"}, {"score": 0.0047395356621991935, "phrase": "garbage-collected_applications"}, {"score": 0.00468991337957911, "phrase": "dynamically-allocated_objects"}, {"score": 0.004520272777451894, "phrase": "programmer_productivity"}, {"score": 0.004356741449157895, "phrase": "garbage_collector"}, {"score": 0.003941964605885606, "phrase": "run-time_performance_overhead"}, {"score": 0.003720060615588018, "phrase": "heap_size_h"}, {"score": 0.0036617315529835497, "phrase": "smaller_h"}, {"score": 0.003529149828147388, "phrase": "large_h"}, {"score": 0.0032954888655173666, "phrase": "main_memory"}, {"score": 0.00291923164591297, "phrase": "application_trade_less_page_faults"}, {"score": 0.002697245874076643, "phrase": "heap-aware_page_fault_equation"}, {"score": 0.0024272350606639147, "phrase": "default_policy"}, {"score": 0.0023891283748647416, "phrase": "jikesrvm's_heap_size_manager"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Garbage collection", " Heap size", " Page fault", " Dynamic tuning"], "paper_abstract": "For garbage-collected applications, dynamically-allocated objects are contained in a heap. Programmer productivity improves significantly if there is a garbage collector to automatically deallocate objects that are no longer needed by the applications. However, there is a run-time performance overhead in garbage collection, and this cost is sensitive to heap size H: a smaller H will trigger more collection, but a large H can cause page faults, as when H exceeds the size M of main memory allocated to the application. This paper presents a Heap Sizing Rule for how H should vary with M. The Rule can help an application trade less page faults for more garbage collection, thus reducing execution time. It is based on a Heap-Aware Page Fault Equation that models how the number of page faults depends on H and M. Experiments show that this rule outperforms the default policy used by JikesRVM's heap size manager. Specifically, the number of faults and the execution time are reduced for both static and dynamically changing M. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "An equation-based Heap Sizing Rule", "paper_id": "WOS:000327917900003"}