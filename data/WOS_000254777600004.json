{"auto_keywords": [{"score": 0.04590884875550199, "phrase": "constraint_language"}, {"score": 0.00481495049065317, "phrase": "equality_constraint_languages"}, {"score": 0.004620093797504386, "phrase": "computational_complexity"}, {"score": 0.004506968388996092, "phrase": "constraint_satisfaction_problems"}, {"score": 0.0033743949483348626, "phrase": "boolean_combinations"}, {"score": 0.0032916702592724217, "phrase": "equality_relation"}, {"score": 0.002931569771634119, "phrase": "classification_result"}, {"score": 0.0028360962841331634, "phrase": "universal-algebraic_approach"}, {"score": 0.002789528662623221, "phrase": "infinite-valued_constraint_satisfaction"}, {"score": 0.0026543514413663893, "phrase": "equality_constraint_language"}, {"score": 0.002504880563070155, "phrase": "constant_unary_polymorphism"}, {"score": 0.0024434201175883674, "phrase": "injective_binary_polymorphism"}, {"score": 0.0023647711229896158, "phrase": "np"}], "paper_keywords": ["constraint satisfaction", " logic in computer science", " computational complexity", " clones on infinite domains"], "paper_abstract": "We classify the computational complexity of all constraint satisfaction problems where the constraint language is preserved by all permutations of the domain. A constraint language is preserved by all permutations of the domain if and only if all the relations in the language can be defined by boolean combinations of the equality relation. We call the corresponding constraint languages equality constraint languages. For the classification result we apply the universal-algebraic approach to infinite-valued constraint satisfaction, and show that an equality constraint language is tractable if it admits a constant unary polymorphism or an injective binary polymorphism, and is NP-complete otherwise. We also discuss how to determine algorithmically whether a given constraint language is tractable.", "paper_title": "The complexity of equality constraint languages", "paper_id": "WOS:000254777600004"}