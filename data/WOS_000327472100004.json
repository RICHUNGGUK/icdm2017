{"auto_keywords": [{"score": 0.023346179811879676, "phrase": "fdr"}, {"score": 0.00481495049065317, "phrase": "livelock_freedom"}, {"score": 0.00466085208934021, "phrase": "process_algebra"}, {"score": 0.0034322572683276654, "phrase": "static_analysis"}, {"score": 0.00307240091019322, "phrase": "inductive_structure"}, {"score": 0.0028973794653974327, "phrase": "denoted_process"}, {"score": 0.0024939618994290016, "phrase": "bdd-based_and_sat-based_implementations"}, {"score": 0.0022033327475266496, "phrase": "model_checker"}, {"score": 0.002132637840285576, "phrase": "low_rate"}, {"score": 0.0021049977753042253, "phrase": "inconclusive_results"}], "paper_keywords": ["Communicating Sequential Processes", " divergence", " fairness", " symbolic static analysis"], "paper_abstract": "In a process algebra with hiding and recursion it is possible to create processes which compute internally without ever communicating with their environment. Such processes are said to diverge or livelock. In this paper we show how it is possible to conservatively classify processes as livelock-free through a static analysis of their syntax. In particular, we present a collection of rules, based on the inductive structure of terms, which guarantee livelock-freedom of the denoted process. This gives rise to an algorithm which conservatively flags processes that can potentially livelock. We illustrate our approach by applying both BDD-based and SAT-based implementations of our algorithm to a range of benchmarks, and show that our technique in general substantially outperforms the model checker FDR whilst exhibiting a low rate of inconclusive results.", "paper_title": "A STATIC ANALYSIS FRAMEWORK FOR LIVELOCK FREEDOM IN CSP", "paper_id": "WOS:000327472100004"}