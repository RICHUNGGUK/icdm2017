{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "software_architectures"}, {"score": 0.009688592124987815, "phrase": "acme"}, {"score": 0.004720043307726269, "phrase": "coordination_paradigm"}, {"score": 0.0043804319008535555, "phrase": "significant_progress"}, {"score": 0.004315487055548749, "phrase": "component-based_development"}, {"score": 0.004209369306023422, "phrase": "major_subfield"}, {"score": 0.004167653403322565, "phrase": "software_engineering"}, {"score": 0.004105850229681625, "phrase": "associated_field"}, {"score": 0.004065156038847781, "phrase": "architecture_description_languages"}, {"score": 0.0038676325043529524, "phrase": "numerous_approaches"}, {"score": 0.0038102613924627647, "phrase": "formal_specification"}, {"score": 0.0037350832473790007, "phrase": "architectural_designs"}, {"score": 0.0034146585649631692, "phrase": "architectural_specifications"}, {"score": 0.0033639840192975835, "phrase": "executable_representations"}, {"score": 0.003152915289414825, "phrase": "generic_features"}, {"score": 0.0031061129850110994, "phrase": "typical_adl"}, {"score": 0.003075296862372287, "phrase": "executable_code"}, {"score": 0.003029643234751066, "phrase": "mapping_process"}, {"score": 0.002634830238219976, "phrase": "core_concepts"}, {"score": 0.002544422946205545, "phrase": "equivalent_executable_code"}, {"score": 0.0024941578231560055, "phrase": "coordination_language_manifold"}, {"score": 0.00239657981537094, "phrase": "skeletal_code"}, {"score": 0.0022913497040895586, "phrase": "translated_architectural_design"}, {"score": 0.002136747803494932, "phrase": "needed_code"}], "paper_keywords": ["coordination languages and models", " Software Architectures", " Architecture Description Languages", " code generation"], "paper_abstract": "Software Architectures have evolved considerably over the last decade and, partly also due to the significant progress made in component-based development, have become a major subfield of Software Engineering. The associated field of Architecture Description Languages (ADLs) has also evolved considerably, providing numerous approaches to the formal specification and representation of architectural designs. In this field, one of its most interesting (and rather recent) aspects has been the exploration of different ways to map architectural specifications down to executable representations. In this paper, we present a methodology for mapping the generic features of any typical ADL to executable code. The mapping process involves the use of ACME, a generic language for describing software architectures, and the coordination paradigm. More to the point, we show how the core concepts of ACME can be mapped to equivalent executable code written in the coordination language Manifold. The result is the generation of skeletal code which captures and implements the most important system implementation properties of the translated architectural design, thus significantly assisting the programmer in filling in the rest of the needed code. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "An implementation framework for Software Architectures based on the coordination paradigm", "paper_id": "WOS:000235045800002"}