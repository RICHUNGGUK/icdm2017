{"auto_keywords": [{"score": 0.025552116454713746, "phrase": "verilog"}, {"score": 0.00481495049065317, "phrase": "transactor_processes"}, {"score": 0.004773040022691547, "phrase": "transaction-level_models"}, {"score": 0.004608997772926119, "phrase": "verification_environment"}, {"score": 0.004548939310612501, "phrase": "whole_design_process"}, {"score": 0.004024651422626329, "phrase": "rtl_signal-based_communication"}, {"score": 0.00398959232769596, "phrase": "transaction-level_function-call-based_communication"}, {"score": 0.003687439449869248, "phrase": "transaction_level"}, {"score": 0.003408091901859624, "phrase": "different_role"}, {"score": 0.0033636292024305406, "phrase": "verification_process"}, {"score": 0.0030951536886513567, "phrase": "single_formal_specification"}, {"score": 0.002737960968372391, "phrase": "state-explosion_problems"}, {"score": 0.00266693888510356, "phrase": "specification_formalism"}, {"score": 0.0021610874773389096, "phrase": "automatically_generated_transactors"}, {"score": 0.002123531043641047, "phrase": "handcrafted_ones"}, {"score": 0.0021049977753042253, "phrase": "realistic_designs"}], "paper_keywords": ["code generation", " finite-state machine (FSM) simulation", " property specification language (PSL)", " standard co-emulation modeling interface (SCE-MI)", " state explosion", " SystemC", " transaction-level models (TLMs)", " transactor", " verification", " Verilog"], "paper_abstract": "Transaction-level models promise to be the basis of the verification environment for the whole design process. Realizing this promise requires connecting transaction-level and register-transfer-level (RTL) blocks through a transactor, which translates back and forth between RTL signal-based communication and transaction-level function-call-based communication. Each transactor is associated with a pair of interfaces, one at RTL and one at transaction level. Topically, however, a pair of interfaces is associated with more than one transactor, each assuming a different role in the verification process. In this paper, we propose a methodology in which both the interfaces and their relation are captured by a single formal specification. By using the specification, we show how the code for all the transactors associated with a pair of interfaces can be automatically generated. Our synthesis algorithm avoids the state-explosion problems associated with certain features of the specification formalism, at the expense of a more sophisticated simulation algorithm. We describe three different code-generation techniques targeted at different verification languages: 1) C++; 2) Verilog; and 3) the combination of the two that is compliant with the Standard Co-Emulation Modeling Interface protocol. In addition, we present several case studies demonstrating that automatically generated transactors can indeed replace handcrafted ones in realistic designs.", "paper_title": "Specification, synthesis, and simulation of transactor processes", "paper_id": "WOS:000258768200002"}