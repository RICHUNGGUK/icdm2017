{"auto_keywords": [{"score": 0.030323055991538322, "phrase": "source_sets"}, {"score": 0.00481495049065317, "phrase": "stateless_model_checking"}, {"score": 0.004736563452994885, "phrase": "powerful_technique"}, {"score": 0.004685012337701536, "phrase": "program_verification"}, {"score": 0.004508942069742167, "phrase": "exponential_growth"}, {"score": 0.004387225575447685, "phrase": "explored_executions"}, {"score": 0.004085856939524333, "phrase": "complete_coverage"}, {"score": 0.0040192915527630995, "phrase": "dynamic_partial_order_reduction"}, {"score": 0.0038470175104007524, "phrase": "new_dpor_algorithm"}, {"score": 0.003524227590204673, "phrase": "minimal_number"}, {"score": 0.0033546701239540555, "phrase": "novel_class"}, {"score": 0.0031240075437664314, "phrase": "persistent_sets"}, {"score": 0.0030899524399043863, "phrase": "previous_algorithms"}, {"score": 0.002925149105307855, "phrase": "existing_dpor_algorithm"}, {"score": 0.002564505790176378, "phrase": "novel_mechanism"}, {"score": 0.0023107372754933887, "phrase": "stateless_model_checking_tool"}, {"score": 0.0022855352096698544, "phrase": "erlang"}, {"score": 0.002128220632893247, "phrase": "wakeup_trees"}], "paper_keywords": ["dynamic partial oder reduction", " software model checking", " systematic testing", " concurrency", " source sets", " wakeup trees"], "paper_abstract": "Stateless model checking is a powerful technique for program verification, which however suffers from an exponential growth in the number of explored executions. A successful technique for reducing this number, while still maintaining complete coverage, is Dynamic Partial Order Reduction (DPOR). We present a new DPOR algorithm, which is the first to be provably optimal in that it always explores the minimal number of executions. It is based on a novel class of sets, called source sets, which replace the role of persistent sets in previous algorithms. First, we show how to modify an existing DPOR algorithm to work with source sets, resulting in an efficient and simple to implement algorithm. Second, we extend this algorithm with a novel mechanism, called wakeup trees, that allows to achieve optimality. We have implemented both algorithms in a stateless model checking tool for Erlang programs. Experiments show that source sets significantly increase the performance and that wakeup trees incur only a small overhead in both time and space.", "paper_title": "Optimal Dynamic Partial Order Reduction", "paper_id": "WOS:000331120500032"}