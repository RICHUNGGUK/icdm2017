{"auto_keywords": [{"score": 0.0399052563234505, "phrase": "spreadsheet_models"}, {"score": 0.00481495049065317, "phrase": "model-based_spreadsheet_applications"}, {"score": 0.004704187604192605, "phrase": "preferred_method"}, {"score": 0.004490212943845175, "phrase": "table-like_structure"}, {"score": 0.00436989807912238, "phrase": "end_users"}, {"score": 0.004122781047853192, "phrase": "recent_research"}, {"score": 0.003950453462399077, "phrase": "new_way"}, {"score": 0.003919900973086169, "phrase": "object-oriented_modeling"}, {"score": 0.003756021561809324, "phrase": "classheets"}, {"score": 0.0036695284042874395, "phrase": "concrete_spreadsheets"}, {"score": 0.003627028894710926, "phrase": "instance_level"}, {"score": 0.0034753508746887957, "phrase": "spreadsheet_applications"}, {"score": 0.0033559647822437298, "phrase": "almost_every_other_application"}, {"score": 0.002998390117435555, "phrase": "uttermost_source"}, {"score": 0.0029292922955739963, "phrase": "severe_impact"}, {"score": 0.002817639725689939, "phrase": "model-based_approach"}, {"score": 0.002527083139627522, "phrase": "spreadsheet_layer"}, {"score": 0.0024880904032564583, "phrase": "spreadsheet_model_update_propagation"}, {"score": 0.0024592402228499105, "phrase": "formal_framework"}, {"score": 0.002421291757425244, "phrase": "integrated_tool_suite"}, {"score": 0.00238392747425758, "phrase": "easy_creation"}, {"score": 0.0023654615987859402, "phrase": "safe_update"}, {"score": 0.002319918823705175, "phrase": "presented_approach"}, {"score": 0.0022576249214220187, "phrase": "software_evolution"}, {"score": 0.002154693685426657, "phrase": "severe_impacts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Model-based", " Spreadsheet", " Evolution", " Update", " Propagation"], "paper_abstract": "Using spreadsheets is the preferred method to calculate, display or store anything that fits into a table-like structure. They are often used by end users to create applications, although they have one critical drawback spreadsheets are very error-prone. Recent research has developed methods to reduce this error-proneness by introducing a new way of object-oriented modeling of spreadsheets before using them. These spreadsheet models, termed ClasSheets, are used to generate concrete spreadsheets on the instance level. By this approach sources of errors are reduced and spreadsheet applications become easier to understand. As usual for almost every other application, requirements on spreadsheets change due to the changing,environment. Thus, the problem of evolution of spreadsheets arises. The update and evolution of spreadsheets is the uttermost source of errors that may have severe impact. In this paper, we will introduce a model-based approach to spreadsheet evolution by propagating updates on spreadsheet models (i.e. ClassSheets) to spreadsheets. To this end, update commands for the ClassSheet layer are automatically transformed to those for the spreadsheet layer. We describe spreadsheet model update propagation using a formal framework and present an integrated tool suite that allows the easy creation and safe update of spreadsheet models. The presented approach greatly contributes to the problem of software evolution and maintenance for spreadsheets and thus avoids many errors that might have severe impacts. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Systematic evolution of model-based spreadsheet applications", "paper_id": "WOS:000307156200002"}