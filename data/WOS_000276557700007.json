{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ordered_read-write_locks"}, {"score": 0.0045726187330434025, "phrase": "orwl"}, {"score": 0.0037188360359702182, "phrase": "controlled_pro-active_access"}, {"score": 0.0035518193979811367, "phrase": "high_degree"}, {"score": 0.003471135453226184, "phrase": "different_tasks"}, {"score": 0.003296212583539166, "phrase": "iterative_computations"}, {"score": 0.0031481164109237636, "phrase": "cyclic_pattern"}, {"score": 0.003058944053868522, "phrase": "generic_technique"}, {"score": 0.002938317647182056, "phrase": "orwl._we"}, {"score": 0.0028715299874549245, "phrase": "possible_execution_patterns"}, {"score": 0.0027741761880779535, "phrase": "combinatorial_lattice_structure"}, {"score": 0.0025449518236394103, "phrase": "potential_deadlock"}, {"score": 0.002444544487772349, "phrase": "efficient_algorithms"}, {"score": 0.0023480892503414596, "phrase": "deadlock-free_initialization"}, {"score": 0.0021789194955896124, "phrase": "already_initialized_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Synchronization", " Iterative algorithms", " Read-write locks"], "paper_abstract": "We introduce the framework of ordered read-write locks, ORWL, that are characterized by two main features: a strict FIFO policy for access, and the attribution of access to lock-handles instead of processes or threads. These two properties together allow applications to have a controlled pro-active access to resources and thereby to achieve a high degree of asynchronicity between different tasks of the same application. For the case of iterative computations with many parallel tasks which access their resources in a cyclic pattern, we provide a generic technique to implement them by means of ORWL. We show that the possible execution patterns for such a system correspond to a combinatorial lattice structure and that this lattice is finite if and only if the configuration contains a potential deadlock. In addition, we provide efficient algorithms: one that allows for a deadlock-free initialization of such a system and another one for the detection of deadlocks in an already initialized system. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Iterative computations with ordered read-write locks", "paper_id": "WOS:000276557700007"}