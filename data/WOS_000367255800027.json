{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "new_interface"}, {"score": 0.004730158389701481, "phrase": "practical_functional_reactive_programming"}, {"score": 0.004176813329075736, "phrase": "original_frp_ideas"}, {"score": 0.0038556354709511818, "phrase": "original_space-leak_problems"}, {"score": 0.0036553070575015344, "phrase": "advanced_types"}, {"score": 0.003404244237372396, "phrase": "simple_and_expressive_way"}, {"score": 0.0032561349010603734, "phrase": "frp_code"}, {"score": 0.0030868583963299698, "phrase": "denotational_semantics"}, {"score": 0.002824005136794786, "phrase": "kripke_logical_relations"}, {"score": 0.0026771333996253783, "phrase": "frp_functions"}, {"score": 0.0023845255359681143, "phrase": "inherent_space-leak"}, {"score": 0.0021049977753042253, "phrase": "haskell_library"}], "paper_keywords": ["Functional Reactive Programming", " Space-leak", " Purely functional I/O", " Kripke logical relations"], "paper_abstract": "We present a new interface for practical Functional Reactive Programming (FRP) that (1) is close in spirit to the original FRP ideas, (2) does not have the original space-leak problems, without using arrows or advanced types, and (3) provides a simple and expressive way for performing I/O actions from FRP code. We also provide a denotational semantics for this new interface, and a technique (using Kripke logical relations) for reasoning about which FRP functions may \"forget their past\", i.e. which functions do not have an inherent space-leak. Finally, we show how we have implemented this interface as a Haskell library called FRPNow.", "paper_title": "Practical Principled FRP Forget the Past, Change the Future, FRPNow!", "paper_id": "WOS:000367255800027"}