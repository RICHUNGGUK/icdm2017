{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "number_search"}, {"score": 0.004397487039229447, "phrase": "game-playing_programs"}, {"score": 0.004056769841308405, "phrase": "distributed_computing_environment"}, {"score": 0.0038379074449947067, "phrase": "remote_processors"}, {"score": 0.003594369823549604, "phrase": "job-level_proof_number_search"}, {"score": 0.003417565253539315, "phrase": "generic_job-level_search"}, {"score": 0.003366233863411861, "phrase": "computer_game_search_problems"}, {"score": 0.0031845067058084583, "phrase": "difficult_openings"}, {"score": 0.0030431198971423937, "phrase": "postponed_sibling_generation"}, {"score": 0.0028642924503126154, "phrase": "virtual_win"}, {"score": 0.0028355237433457313, "phrase": "virtual_loss"}, {"score": 0.0028070431733705735, "phrase": "virtual_equivalence"}, {"score": 0.0024617483174454113, "phrase": "virtual-equivalence_policy"}], "paper_keywords": ["Connect6", " desktop grids", " job-level proof number search (JL-PNS)", " proof number search", " threat-space search"], "paper_abstract": "This paper introduces an approach, called generic job-level search, to leverage the game-playing programs which are already written and encapsulated as jobs. Such an approach is well suited to a distributed computing environment, since these jobs are allowed to be run by remote processors independently. In this paper, we present and focus on a job-level proof number search (JL-PNS), a kind of generic job-level search for solving computer game search problems, and apply JL-PNS to solving automatically several Connect6 positions, including some difficult openings. This paper also proposes a method of postponed sibling generation to generate nodes smoothly, and some policies, such as virtual win, virtual loss, virtual equivalence, flagging, or hybrids of the above, to expand the nodes. Our experiment compared these policies, and the results showed that the virtual-equivalence policy, together with flagging, performed the best against other policies. In addition, the results also showed that the speedups for solving these positions are 8.58 on average on 16 cores.", "paper_title": "Job-Level Proof Number Search", "paper_id": "WOS:000316479500004"}