{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fca-cia"}, {"score": 0.015427253391803434, "phrase": "fca"}, {"score": 0.01099149896542527, "phrase": "impacted_methods"}, {"score": 0.009509703817629766, "phrase": "changed_classes"}, {"score": 0.007845781471606994, "phrase": "fca-cia_technique"}, {"score": 0.0046797114400479135, "phrase": "cross-level_change_impact_analysis"}, {"score": 0.004620952504664952, "phrase": "java"}, {"score": 0.004476827153336614, "phrase": "cia"}, {"score": 0.004420472010542188, "phrase": "essential_technique"}, {"score": 0.004392565073466714, "phrase": "software_engineering"}, {"score": 0.004337276328199398, "phrase": "potential_influences"}, {"score": 0.004242183179689357, "phrase": "change_entities"}, {"score": 0.004045345788201993, "phrase": "software_maintainers"}, {"score": 0.0039691820377914635, "phrase": "unclear_starting_point"}, {"score": 0.00393163747242631, "phrase": "impacted_entities"}, {"score": 0.00373729411492695, "phrase": "novel_approach"}, {"score": 0.0037136840686010303, "phrase": "cross-level_cia"}, {"score": 0.003666908853711961, "phrase": "ranked_list"}, {"score": 0.003643741834170836, "phrase": "potentially_impacted_methods"}, {"score": 0.0036092644587974953, "phrase": "class-level_changes"}, {"score": 0.0035077705328504546, "phrase": "impact_results"}, {"score": 0.0032714883740359896, "phrase": "eclectic_approach"}, {"score": 0.0031996871318754685, "phrase": "formal_concept_analysis"}, {"score": 0.0031294568052050186, "phrase": "intermediate_representation"}, {"score": 0.003060763239325022, "phrase": "static_analysis"}, {"score": 0.0030317852687729878, "phrase": "source_code"}, {"score": 0.0029746473344900784, "phrase": "lattice_of_class_and_method_dependence"}, {"score": 0.002791829974944666, "phrase": "reachable_set"}, {"score": 0.0027046673104220422, "phrase": "hierarchical_property"}, {"score": 0.00267905164093555, "phrase": "locmd"}, {"score": 0.0026036473098881344, "phrase": "impact_factor"}, {"score": 0.0024747842618794255, "phrase": "empirical_evaluations"}, {"score": 0.002412758703672514, "phrase": "impact_factor_metric"}, {"score": 0.0023448318062933527, "phrase": "predicted_impacted_methods"}, {"score": 0.0023299979520479182, "phrase": "higher_impact_factor_values"}, {"score": 0.002159135340243625, "phrase": "icp"}, {"score": 0.0021454671611847507, "phrase": "based_cia_technique"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal concept analysis", " Change impact analysis", " Lattice of class and method dependence", " Impact factor"], "paper_abstract": "Background: Software Change Impact Analysis (CIA) is an essential technique in software engineering to identifying the potential influences of a change, or determining change entities to accomplish such a change. The results derived, in many cases, ambiguous for the software maintainers, introduces the problem of unclear starting point of these impacted entities. Objective: In an attempt to address this issue, this work proposes a novel approach for cross-level CIA, producing a ranked list of potentially impacted methods derived from class-level changes. Moreover, the approach of ranking the impact results is expected to be effective for maintainers to distinguish the probability of the impacted methods to be false-positives. Such results provide an eclectic approach for CIA. Method: The approach, FCA-CIA, uses formal concept analysis (FCA) to produce an intermediate representation of the program based on the static analysis of the source code. The representation is called Lattice of Class and Method Dependence (LoCMD). FCA-CIA takes the changed classes in the change set as a whole, and determines the reachable set from the changed classes on the LoCMD. Based on the hierarchical property of the LoCMD, the impacted methods are ranked according to the impact factor metric which corresponds to the priority of these methods to be inspected. Result: Empirical evaluations on four real-world software projects demonstrate the effectiveness of the impact factor metric and the FCA-CIA technique. The result shows the predicted impacted methods with higher impact factor values are more likely to be affected by the changes. Our study also shows that the FCA-CIA technique generates more accurate impact set than the JRipples and ICP coupling based CIA technique. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "FCA-CIA: An approach of using FCA to support cross-level change impact analysis for object oriented Java programs", "paper_id": "WOS:000320685200005"}