{"auto_keywords": [{"score": 0.03213059882380194, "phrase": "grid_system"}, {"score": 0.00481495049065317, "phrase": "dna_fragment_assembly"}, {"score": 0.004758457292840376, "phrase": "grid-based_genetic_algorithm"}, {"score": 0.004611013257082199, "phrase": "genetic_algorithm"}, {"score": 0.00457540924026446, "phrase": "ga"}, {"score": 0.004485735417293941, "phrase": "dna_fragment_assembly_problem"}, {"score": 0.00443308765153716, "phrase": "computational_grid"}, {"score": 0.004295681900150244, "phrase": "grea"}, {"score": 0.004228577663320847, "phrase": "steady-state_ga"}, {"score": 0.0041625173012740544, "phrase": "panmitic_population"}, {"score": 0.00404937519538515, "phrase": "computing_parallel_function_evaluations"}, {"score": 0.004001828274595483, "phrase": "asynchronous_way"}, {"score": 0.00384731849108269, "phrase": "condor_system"}, {"score": 0.0036987521452843987, "phrase": "dna_assembly_problem"}, {"score": 0.003626626504149897, "phrase": "np-hard_combinatorial_optimization_problem"}, {"score": 0.003432044343307207, "phrase": "new_genomes"}, {"score": 0.0033917213078141373, "phrase": "previous_works"}, {"score": 0.00314300947387659, "phrase": "k"}, {"score": 0.002931569771634119, "phrase": "basic_grid_algorithm"}, {"score": 0.0028293966058473476, "phrase": "improvement_method"}, {"score": 0.0026252106881752067, "phrase": "time_reductions"}, {"score": 0.0025038930574283174, "phrase": "optimal_solutions"}, {"score": 0.0023600807990911145, "phrase": "promising_approach"}, {"score": 0.0022777800735119405, "phrase": "large_dna_fragment_assembly_problem_instances"}, {"score": 0.0022157533515146503, "phrase": "grid_metaheuristics"}, {"score": 0.0021896891011033105, "phrase": "new_class"}, {"score": 0.002155412043665635, "phrase": "really_challenging_problems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["DNA fragment assembly", " grid computing", " genetic algorithm"], "paper_abstract": "In this paper we propose a genetic algorithm (GA) for solving the DNA fragment assembly problem in a computational grid. The algorithm, which is named GrEA, is a steady-state GA which uses a panmitic population, and it is based on computing parallel function evaluations in an asynchronous way. We have implemented GrEA on top of the Condor system, and we have used it to solve the DNA assembly problem. This is an NP-hard combinatorial optimization problem which is growing in importance and complexity as more research centers become involved on sequencing new genomes. While previous works on this problem have usually faced 30 K base pairs (bps) long instances, we have tackled here a 77 K bps long one to show how a grid system can move research forward. After analyzing the basic grid algorithm, we have studied the use of an improvement method to still enhance its scalability. Then, by using a grid composed of up to 150 computers, we have achieved time reductions from tens of days down to a few hours, and we have obtained near optimal solutions when solving the 77 K bps long instance (773 fragments). We conclude that our proposal is a promising approach to take advantage of a grid system to solve large DNA fragment assembly problem instances and also to learn more about grid metaheuristics as a new class of algorithms for really challenging problems. (c) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "DNA fragment assembly using a grid-based genetic algorithm", "paper_id": "WOS:000253801400006"}