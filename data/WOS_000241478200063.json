{"auto_keywords": [{"score": 0.029420333683948783, "phrase": "thorup"}, {"score": 0.004741845603430361, "phrase": "dynamic_all-pairs_shortest_path_problem"}, {"score": 0.004506048850130758, "phrase": "weighted_graph"}, {"score": 0.004437613070853689, "phrase": "dynamic_operations"}, {"score": 0.00437021209960886, "phrase": "edge_insertions"}, {"score": 0.0043258453436258405, "phrase": "edge_deletions"}, {"score": 0.004260134699483774, "phrase": "edge_weight_updates"}, {"score": 0.004068907083697369, "phrase": "suitable_superset"}, {"score": 0.004027586827290042, "phrase": "shortest_paths"}, {"score": 0.003769006950727621, "phrase": "previous_graph"}, {"score": 0.0036553070575015344, "phrase": "pathological_situations"}, {"score": 0.003509006038574667, "phrase": "large_portions"}, {"score": 0.0033173234105492895, "phrase": "maintained_paths"}, {"score": 0.0029798924689472014, "phrase": "suitable_path_cleaning_operations"}, {"score": 0.0028026735035370206, "phrase": "recent_efficient_algorithm"}, {"score": 0.002690406375639144, "phrase": "previous_algorithms"}, {"score": 0.002622528664187849, "phrase": "path_cleaning"}, {"score": 0.0025046245057922557, "phrase": "thorough_experimental_investigation"}, {"score": 0.002479150189700726, "phrase": "known_implementations"}, {"score": 0.002453934333239467, "phrase": "dynamic_shortest_path_algorithms"}, {"score": 0.002392008392892289, "phrase": "new_results"}, {"score": 0.0023197517832705297, "phrase": "previous_work"}, {"score": 0.0021817065300196634, "phrase": "theoretical_bounds"}], "paper_keywords": [""], "paper_abstract": "In the dynamic all-pairs shortest path problem we wish to maintain information about distances in a weighted graph subject to dynamic operations such as edge insertions, edge deletions, and edge weight updates. The most efficient algorithms for this problem maintain a suitable superset of shortest paths in the graph. This superset retains information about the history of previous graph updates so as to avoid pathological situations where algorithms are continuously forced to rebuild large portions of their data structures. On the other hand, the set of maintained paths may grow too large, resulting in both prohibitive space consumption and inefficient updates. To circumvent this problem, the algorithms perform suitable path cleaning operations. In this paper, we implement and experiment with a recent efficient algorithm by Thorup, which differs from the previous algorithms mainly in the way path cleaning is done, and we carry out a thorough experimental investigation on known implementations of dynamic shortest path algorithms. Our experimental study puts the new results into perspective with respect to previous work and gives evidence that path cleaning, although crucial for the theoretical bounds, appears to be instead of very limited impact in practice.", "paper_title": "Does path cleaning help in dynamic all-pairs shortest paths?", "paper_id": "WOS:000241478200063"}