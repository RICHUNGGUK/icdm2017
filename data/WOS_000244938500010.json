{"auto_keywords": [{"score": 0.029354285187227134, "phrase": "continuous_coordination"}, {"score": 0.015036137265723535, "phrase": "software_development"}, {"score": 0.00481495049065317, "phrase": "globally_distributed_software_development_projects"}, {"score": 0.004716113134313215, "phrase": "rapid_globalization"}, {"score": 0.004431554974667461, "phrase": "diverse_sites"}, {"score": 0.004178522455099832, "phrase": "previously_collocated_teams"}, {"score": 0.003939880387831148, "phrase": "team_members"}, {"score": 0.0037665925842197967, "phrase": "global_software_development_projects"}, {"score": 0.0037148167062767096, "phrase": "fundamental_paradox"}, {"score": 0.0036133826040506798, "phrase": "collaborative_activity"}, {"score": 0.003360057874429478, "phrase": "underlying_issue"}, {"score": 0.0032457271401035545, "phrase": "configuration_management_repositories"}, {"score": 0.0032233306034106127, "phrase": "issue_trackers"}, {"score": 0.003190024306903021, "phrase": "workflow_engines"}, {"score": 0.0031680109156103334, "phrase": "separate_time"}, {"score": 0.003124437382827821, "phrase": "concrete_but_isolated_process_steps"}, {"score": 0.0030285690317007805, "phrase": "human_activities"}, {"score": 0.0029662917511334604, "phrase": "periodic_resynchronization"}, {"score": 0.002915370532555375, "phrase": "easy_step"}, {"score": 0.002895246938820814, "phrase": "poor_understanding"}, {"score": 0.002875261849352716, "phrase": "human_nature"}, {"score": 0.0028161281608563267, "phrase": "new_approach"}, {"score": 0.0027870176748502045, "phrase": "collaborative_work"}, {"score": 0.0021867999937268084, "phrase": "continuous_coordination_paradigm"}, {"score": 0.002149231173009159, "phrase": "global_software_development"}], "paper_keywords": ["global software development", " distributed software development", " collaboration", " coordination", " awareness"], "paper_abstract": "Along, with the rapid globalization of companies, the globalization of software development has become a reality. Many software projects are now distributed in diverse sites across the globe. The distance between these sites creates several problems that did not exist for previously collocated teams. Problems with the coordination of the activities, as well as with the communication between team members, emerge. Many collaborative software engineering tools that have been used to date, in global software development projects, exhibit a fundamental paradox: they are meant to support the collaborative activity of software development, but cause individuals and groups to work more or less independently from one an other. The underlying issue is that existing software engineering tools, such as configuration management repositories, issue trackers, and workflow engines, separate time and tasks in concrete but isolated process steps. Designing tools based on the premise that human activities can be codified and that periodic resynchronization of tasks is an easy step reflects poor understanding of human nature. We therefore propose a new approach to supporting collaborative work called Continuous Coordination. Underlying Continuous Coordination is the premise that humans must not and cannot have their method of collaboration rigidly dictated, ''but should be supported flexibly with both the tools and the information to coordinate their activities and to collaborate in their activities' as they see fit. In this paper, we define the concept of Continuous Coordination, introduce our work to date in building prototypes that support the Continuous Coordination paradigm in the context of Global Software Development, and set out a further research agenda to be pursued.", "paper_title": "A new paradigm to support globally distributed software development projects", "paper_id": "WOS:000244938500010"}