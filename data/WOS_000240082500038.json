{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "sat"}, {"score": 0.00481495049065317, "phrase": "advanced_component"}, {"score": 0.004059438255358923, "phrase": "well_known_dpll_algorithm"}, {"score": 0.0035794251590584563, "phrase": "entirely_new_approach"}, {"score": 0.0035156341294017685, "phrase": "coding_components"}, {"score": 0.003361069456060196, "phrase": "cache_size"}, {"score": 0.0031277316566463978, "phrase": "new_cache_management_scheme"}, {"score": 0.002936849401568391, "phrase": "well_known_look"}, {"score": 0.002282667669149476, "phrase": "large_structured_instances"}], "paper_keywords": [""], "paper_abstract": "We introduce sharpSAT, a new #SAT solver that is based on the well known DPLL algorithm and techniques from SAT and #SAT solvers. Most importantly, we introduce an entirely new approach of coding components, which reduces the cache size by at least one order of magnitude, and a new cache management scheme. Furthermore, we apply a well known look ahead based on BCP in a manner that is well suited for #SAT solving. We show that these techniques are highly beneficial, especially on large structured instances, such that our solver performs significantly better than other #SAT solvers.", "paper_title": "sharpSAT - Counting models with advanced component caching and implicit BCP", "paper_id": "WOS:000240082500038"}