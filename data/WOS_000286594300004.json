{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "recaml"}, {"score": 0.00481495049065317, "phrase": "software_system"}, {"score": 0.004763565662615503, "phrase": "service_disruption"}, {"score": 0.0038846843242954935, "phrase": "outermost_loops"}, {"score": 0.003802135020791801, "phrase": "os_scheduling_loops"}, {"score": 0.0037615180375561805, "phrase": "recursive_functions"}, {"score": 0.0036815763368083197, "phrase": "dynamic_update"}, {"score": 0.0035648266669315943, "phrase": "program's_execution_state"}, {"score": 0.0034890505116128606, "phrase": "runtime_stack"}, {"score": 0.003306559295382181, "phrase": "type_errors"}, {"score": 0.0030834712590249863, "phrase": "dynamic_updates"}, {"score": 0.003050508020268648, "phrase": "running_programs"}, {"score": 0.0030017207229983385, "phrase": "execution_state"}, {"score": 0.002953711377604328, "phrase": "delimited_continuation"}, {"score": 0.002875391177926809, "phrase": "novel_feature"}, {"score": 0.002652639568848117, "phrase": "updating_policies"}, {"score": 0.0024339783012484032, "phrase": "coq_proof_assistant"}, {"score": 0.0023566987138026285, "phrase": "state-manipulating_updates"}, {"score": 0.0023314867226678555, "phrase": "type-safe_execution"}, {"score": 0.0022941723937662927, "phrase": "updated_program"}, {"score": 0.002162379426839795, "phrase": "caml_bytecode_interpreter"}], "paper_keywords": ["Languages", " dynamic software updating", " continuation", " functional language", " execution state introspection", " static typing", " Caml"], "paper_abstract": "To fix bugs or to enhance a software system without service disruption, one has to update it dynamically during execution. Most prior dynamic software updating techniques require that the code to be changed is not running at the time of the update. However, this restriction precludes any change to the outermost loops of servers, OS scheduling loops and recursive functions. Permitting a dynamic update to more generally manipulate the program's execution state, including the runtime stack, alleviates this restriction but increases the likelihood of type errors. In this paper we present ReCaml, a language for writing dynamic updates to running programs that views execution state as a delimited continuation. ReCaml includes a novel feature for introspecting continuations called match_cont which is sufficiently powerful to implement a variety of updating policies. We have formalized the core of ReCaml and proved it sound (using the Coq proof assistant), thus ensuring that state-manipulating updates preserve type-safe execution of the updated program. We have implemented ReCaml as an extension to the Caml bytecode interpreter and used it for several examples.", "paper_title": "ReCaml: Execution State as the Cornerstone of Reconfigurations", "paper_id": "WOS:000286594300004"}