{"auto_keywords": [{"score": 0.03156514549013027, "phrase": "frequent_xqps"}, {"score": 0.015719716506582538, "phrase": "xml_queries"}, {"score": 0.01444034859805169, "phrase": "costly_tree-containment_checking"}, {"score": 0.014058070972843836, "phrase": "existing_methods"}, {"score": 0.008777866397459679, "phrase": "esprit-i"}, {"score": 0.004771672073078768, "phrase": "existing_algorithms"}, {"score": 0.004707479285061122, "phrase": "frequent_xml_query_patterns"}, {"score": 0.004581660953729745, "phrase": "candidate_generate-and-test_strategy"}, {"score": 0.004204904449336037, "phrase": "candidate_query_patterns"}, {"score": 0.004074016501033133, "phrase": "entire_transaction_database"}, {"score": 0.003929391999210588, "phrase": "user_query_logs"}, {"score": 0.0037219886365287085, "phrase": "real_xml_databases"}, {"score": 0.003638823482920949, "phrase": "frequent_updates"}, {"score": 0.003525493807130663, "phrase": "existing_frequent_query_patterns"}, {"score": 0.0034467039994594065, "phrase": "new_frequent_query_patterns"}, {"score": 0.0031773149810690494, "phrase": "transaction_databases"}, {"score": 0.0031203609829058587, "phrase": "above-mentioned_problems"}, {"score": 0.003036832649117453, "phrase": "efficient_algorithm"}, {"score": 0.0029289225938890807, "phrase": "esprit"}, {"score": 0.0028376361457661415, "phrase": "one-to-one_mapping_technique"}, {"score": 0.0027867539356701276, "phrase": "frequent_sequences"}, {"score": 0.002455168454109375, "phrase": "cache_lookup"}, {"score": 0.00233594452829104, "phrase": "hit_rate"}, {"score": 0.002202469129781332, "phrase": "experimental_studies"}, {"score": 0.0021531831652035482, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "high_efficiency"}], "paper_keywords": ["XML query patterns", " Frequent query patterns", " XML frequent pattern mining", " Incremental mining", " Sequential pattern mining"], "paper_abstract": "Existing algorithms of mining frequent XML query patterns (XQPs) employ a candidate generate-and-test strategy. They involve expensive candidate enumeration and costly tree-containment checking. Further, most of existing methods compute the frequencies of candidate query patterns from scratch periodically by checking the entire transaction database, which consists of XQPs transferred from user query logs. However, it is not straightforward to maintain such discovered frequent patterns in real XML databases as there may be frequent updates that may not only invalidate some existing frequent query patterns but also generate some new frequent query patterns. Therefore, a drawback of existing methods is that they are rather inefficient for the evolution of transaction databases. To address above-mentioned problems, this paper proposes an efficient algorithm ESPRIT to mine frequent XQPs without costly tree-containment checking. ESPRIT transforms XML queries into sequences using a one-to-one mapping technique and mines the frequent sequences to generate frequent XQPs. We propose two efficient incremental algorithms, ESPRIT-i and ESPRIT-i (+), to incrementally mine frequent XQPs. We devise several novel optimization techniques of query rewriting, cache lookup, and cache replacement to improve the answerability and the hit rate of caching. We have implemented our algorithms and conducted a set of experimental studies on various datasets. The experimental results demonstrate that our algorithms achieve high efficiency and scalability and outperform state-of-the-art methods significantly.", "paper_title": "Incremental sequence-based frequent query pattern mining from XML queries", "paper_id": "WOS:000265081200006"}