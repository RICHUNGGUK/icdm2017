{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "load_shedding"}, {"score": 0.00429715240295033, "phrase": "dual_window_architectural_model"}, {"score": 0.003789137457228946, "phrase": "effective_load_shedding_strategy"}, {"score": 0.003526186748088922, "phrase": "load_shedding_process"}, {"score": 0.0034841647157189985, "phrase": "binary_indexed_trees"}, {"score": 0.0031845067058084583, "phrase": "high_arrival_rates"}, {"score": 0.0027246967293115343, "phrase": "variable_speed_ratio"}, {"score": 0.002612640527241776, "phrase": "cpu_resources"}], "paper_keywords": ["data stream", " window joins", " load shedding", " dual window model", " window resizing"], "paper_abstract": "We address several load shedding techniques over sliding window joins. We first construct a dual window architectural model including aux-windows and join-windows, and build statistics on aux-windows. With the statistics, we develop an effective load shedding strategy producing maximum subset join outputs. In order to accelerate the load shedding process, binary indexed trees have been utilized to reduce the cost on shedding evaluation. When streams have high arrival rates, we propose an approach incorporating front-shedding and rear-shedding, and find an optimal trade-off between them. As for the scenarios of variable speed ratio, we develop a plan reallocating CPU resources and dynamically resizing the windows. In addition, we prove that load shedding is not affected during the process of reallocation. Both synthetic and real data are used in our experiments, and the results show the promise of our strategies.", "paper_title": "Load shedding for window joins over streams", "paper_id": "WOS:000245374700003"}