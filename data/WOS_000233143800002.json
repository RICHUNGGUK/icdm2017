{"auto_keywords": [{"score": 0.004513957235071457, "phrase": "different_servers"}, {"score": 0.004249957578636515, "phrase": "total_download_duration"}, {"score": 0.004195418010131832, "phrase": "streaming_applications"}, {"score": 0.003916098498242888, "phrase": "data_arrival"}, {"score": 0.0038825121288253435, "phrase": "longer_playback_delays"}, {"score": 0.0037028514035425037, "phrase": "larger_required_memory_space"}, {"score": 0.0035162927451540065, "phrase": "mobile_devices"}, {"score": 0.003486123304074186, "phrase": "limited_resources"}, {"score": 0.0032398798149196432, "phrase": "data_blocks"}, {"score": 0.003157174936641705, "phrase": "different_data_blocks"}, {"score": 0.0030898642396380662, "phrase": "different_sources"}, {"score": 0.0030109772626153797, "phrase": "even_when_the_conditions"}, {"score": 0.0028715299874549245, "phrase": "parallel_download_scenario"}, {"score": 0.0028468767420392945, "phrase": "out-of-order_arrivals"}, {"score": 0.0025014259919355453, "phrase": "good_indicator"}, {"score": 0.0024061887405214186, "phrase": "order_arrival"}, {"score": 0.002375253757224999, "phrase": "resequencing-buffer_occupancy"}, {"score": 0.0022749744354271834, "phrase": "resequencing-buffer_occupancy_distribution"}], "paper_keywords": ["parallel download", " mirror server", " resequencing", " out-of-order arrival"], "paper_abstract": "Several recent studies have proposed methods to accelerate the receipt of a file by downloading its parts from different servers in parallel. The schemes suggested in most proposed parallel download approaches focus on reducing the total download duration. For streaming applications a more crucial performance issue is the regularity of flow of data to the application. Burstiness in data arrival implies longer playback delays, a higher probability of interruption at the application and larger required memory space for resequencing, which is undesirable and may become prohibitive for mobile devices with limited resources. This paper formulates models for an approach based on receiving only one copy of each of the data blocks in a file, while different data blocks may be obtained from different sources. This approach allows more robust download rates even when the conditions for each server/path used may change rapidly. In the parallel download scenario, out-of-order arrivals at the receiving side are unavoidable. We present methods to keep out-of-order low to ensure a more regulated flow of data to the application. A good indicator to the severeness of out-of-order arrival is the resequencing-buffer occupancy. The paper focuses on the analysis of the resequencing-buffer occupancy distribution and on the analysis of the methods used to reduce the occupancy of the buffer. (c) 2004 Elsevier B.V. All rights reserved.", "paper_title": "Parallel downloads for streaming applications - a resequencing analysis", "paper_id": "WOS:000233143800002"}