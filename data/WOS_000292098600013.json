{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "hardware_implementation"}, {"score": 0.004737579882204798, "phrase": "run-time_scheduler"}, {"score": 0.004611369021812453, "phrase": "new_generation"}, {"score": 0.004586531354697466, "phrase": "embedded_systems"}, {"score": 0.004537254814246843, "phrase": "high_performance"}, {"score": 0.00436890075128947, "phrase": "reconfigurable_hardware"}, {"score": 0.0041840994704406866, "phrase": "costly_reconfiguration_process"}, {"score": 0.004072573194988867, "phrase": "management_support"}, {"score": 0.003985487777785535, "phrase": "broader_use"}, {"score": 0.0034817084307034955, "phrase": "reconfigurable_resources"}, {"score": 0.003352388337911934, "phrase": "replacement_techniques"}, {"score": 0.003210446135114967, "phrase": "reconfiguration_delays"}, {"score": 0.0030086877092638945, "phrase": "useful_information"}, {"score": 0.0028502479839354637, "phrase": "near-optimal_schedules"}, {"score": 0.002789226820897593, "phrase": "local-optimum_decisions"}, {"score": 0.0027001292153471202, "phrase": "simple_computations"}, {"score": 0.002320449502337321, "phrase": "conventional_run-time_schedulers"}, {"score": 0.0022830706430588482, "phrase": "as-soon-as-possible_techniques"}, {"score": 0.0021394674440767124, "phrase": "reconfigurable_systems"}, {"score": 0.0021049977753042253, "phrase": "almost_optimal_results"}], "paper_keywords": ["Field-programmable gate arrays (FPGAs)", " reconfigurable architectures", " task scheduling"], "paper_abstract": "New generation embedded systems demand high performance, efficiency, and flexibility. Reconfigurable hardware can provide all these features. However, the costly reconfiguration process and the lack of management support have prevented a broader use of these resources. To solve these issues we have developed a scheduler that deals with task-graphs at run-time, steering its execution in the reconfigurable resources while carrying out both prefetch and replacement techniques that cooperate to hide most of the reconfiguration delays. In our scheduling environment, task-graphs are analyzed at design-time to extract useful information. This information is used at run-time to obtain near-optimal schedules, escaping from local-optimum decisions, while only carrying out simple computations. Moreover, we have developed a hardware implementation of the scheduler that applies all the optimization techniques while introducing a delay of only a few clock cycles. In the experiments our scheduler clearly outperforms conventional run-time schedulers based on as-soon-as-possible techniques. In addition, our replacement policy, specially designed for reconfigurable systems, achieves almost optimal results both regarding reuse and performance.", "paper_title": "A Hardware Implementation of a Run-Time Scheduler for Reconfigurable Systems", "paper_id": "WOS:000292098600013"}