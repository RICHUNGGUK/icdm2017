{"auto_keywords": [{"score": 0.03691381092373218, "phrase": "test_cases"}, {"score": 0.014533089104497798, "phrase": "interactive_theorem"}, {"score": 0.00481495049065317, "phrase": "theorem_prover-based_testing"}, {"score": 0.004536862734384202, "phrase": "test_case_generation_environment"}, {"score": 0.004274766964161756, "phrase": "testgen"}, {"score": 0.004163172790791119, "phrase": "integrated_workflow"}, {"score": 0.0037699306119313154, "phrase": "hol-testgen_method"}, {"score": 0.0035993041437026225, "phrase": "original_formula"}, {"score": 0.0033911868693238894, "phrase": "normal_form"}, {"score": 0.003132236287543072, "phrase": "ground_instances"}, {"score": 0.0028739078688746374, "phrase": "particular_emphasis"}, {"score": 0.0027437235598539904, "phrase": "explicit_test-hypotheses"}, {"score": 0.002636828502928141, "phrase": "concrete_programs"}, {"score": 0.00250073564820402, "phrase": "underlying_framework"}, {"score": 0.002387415084371473, "phrase": "black-box_unit"}, {"score": 0.0023249757987087055, "phrase": "reactive_sequence"}, {"score": 0.002294369814584028, "phrase": "white-box_test_scenarios"}, {"score": 0.0022196020509093694, "phrase": "particularly_clean_theoretical_foundations"}, {"score": 0.0021049977753042253, "phrase": "substantial_case-studies"}], "paper_keywords": ["Test case generation", " Domain partitioning", " Test sequence", " Theorem proving", " HOL-TestGen"], "paper_abstract": "HOL-TestGen is a specification and test case generation environment extending the interactive theorem prover Isabelle/HOL. As such, Testgen allows for an integrated workflow supporting interactive theorem proving, test case generation, and test data generation. The HOL-TestGen method is two-staged: first, the original formula is partitioned into test cases by transformation into a normal form called test theorem. Second, the test cases are analyzed for ground instances (the test data) satisfying the constraints of the test cases. Particular emphasis is put on the control of explicit test-hypotheses which can be proven over concrete programs. Due to the generality of the underlying framework, our system can be used for black-box unit, sequence, reactive sequence and white-box test scenarios. Although based on particularly clean theoretical foundations, the system can be applied for substantial case-studies.", "paper_title": "On theorem prover-based testing", "paper_id": "WOS:000323252400002"}