{"auto_keywords": [{"score": 0.05007844442530217, "phrase": "linked_data_structures"}, {"score": 0.04954756810706401, "phrase": "jml"}, {"score": 0.048761038597933674, "phrase": "formal_verification"}, {"score": 0.00445293569103488, "phrase": "concise_and_readable_specifications"}, {"score": 0.004258372598568333, "phrase": "formal_deductive_verification"}, {"score": 0.004141093507753515, "phrase": "singly_linked_list"}, {"score": 0.004072275820209647, "phrase": "binary_search_tree"}, {"score": 0.003916098498242888, "phrase": "main_characteristic"}, {"score": 0.0037449033166879874, "phrase": "observer_methods"}, {"score": 0.0035216195857272403, "phrase": "data_structure"}, {"score": 0.0030794433253250476, "phrase": "mixed_audience"}, {"score": 0.002847540262784593, "phrase": "specification_language_design"}, {"score": 0.0027690086059100495, "phrase": "in-depth_description"}, {"score": 0.002722930209707764, "phrase": "proposed_specifications"}, {"score": 0.0024620842899061614, "phrase": "verification_techniques"}, {"score": 0.0023807981747706376, "phrase": "deductive_verification_tool"}, {"score": 0.0023281003994670714, "phrase": "fully_automatic_verification"}, {"score": 0.0022893422054387235, "phrase": "linked_list_example"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Java Modeling Language (JML)", " Specification", " Formal verification", " Testing", " Linked data structures"], "paper_abstract": "We show how to write concise and readable specifications of linked data structures that are applicable for both formal deductive verification and testing. A singly linked list and a binary search tree are provided as examples. The main characteristic of the specifications is the use of observer methods, in particular to express reachability of elements in a data structure. The specifications are written in the Java Modeling Language (JML) and do not require extensions of that language. This paper addresses a mixed audience of users and developers in the fields of formal verification, testing, and specification language design. We provide an in-depth description of the proposed specifications and analyze the implications both for verification and testing. Based on this analysis we have developed verification techniques that are implemented in the deductive verification tool KeY and enable fully automatic verification of the linked list example. This techniques are also described in this paper. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Specifying linked data structures in JML for combining formal verification and testing", "paper_id": "WOS:000357708300003"}