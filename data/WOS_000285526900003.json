{"auto_keywords": [{"score": 0.044302566802889166, "phrase": "sequential_consistency"}, {"score": 0.03539191817705608, "phrase": "client_programs"}, {"score": 0.00481495049065317, "phrase": "concurrent_objects"}, {"score": 0.004704187604192605, "phrase": "concurrent_data_structures"}, {"score": 0.004386887374401584, "phrase": "correctness_conditions"}, {"score": 0.002850682396853918, "phrase": "observational_refinement"}, {"score": 0.002658068304632523, "phrase": "new_understanding"}, {"score": 0.002310915790114425, "phrase": "computation_steps"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Linearizability", " Sequential consistency", " Observational equivalence", " Observational refinement"], "paper_abstract": "Concurrent data structures are usually designed to satisfy correctness conditions such as sequential consistency or linearizability. In this paper, we consider the following fundamental question: What guarantees are provided by these conditions for client programs? We formally show that these conditions can be characterized in terms of observational refinement. Our study also provides a new understanding of sequential consistency and linearizability in terms of abstraction of dependency between computation steps of client programs. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Abstraction for concurrent objects", "paper_id": "WOS:000285526900003"}