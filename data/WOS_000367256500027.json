{"auto_keywords": [{"score": 0.026612855060913956, "phrase": "decaf"}, {"score": 0.00481495049065317, "phrase": "flexible_approximate_programming"}, {"score": 0.004747997855358171, "phrase": "approximate_computing"}, {"score": 0.004595356579614969, "phrase": "occasional_errors"}, {"score": 0.004510336430422002, "phrase": "probabilistic_effects"}, {"score": 0.004385733482617193, "phrase": "key_challenge"}, {"score": 0.00428451995524549, "phrase": "new_approach"}, {"score": 0.004185632403886255, "phrase": "type_system"}, {"score": 0.004127394241838696, "phrase": "high-level_constraints"}, {"score": 0.003939033374807842, "phrase": "type_inference"}, {"score": 0.0039024014688338964, "phrase": "code_specialization"}, {"score": 0.003848088904418221, "phrase": "optional_dynamic_tracking"}, {"score": 0.003689628075766217, "phrase": "core_type_system"}, {"score": 0.0033447157263095223, "phrase": "solver-aided_type_inference"}, {"score": 0.0032522091171602557, "phrase": "correctness_probability"}, {"score": 0.002948066398723126, "phrase": "optional_dynamic_type"}, {"score": 0.002893434697072309, "phrase": "complex_run-time_behavior"}, {"score": 0.0026974065918918275, "phrase": "high_degree"}, {"score": 0.0026722904884984348, "phrase": "programmer_control"}, {"score": 0.002622755848331379, "phrase": "strong_soundness_guarantee"}, {"score": 0.0025741370320813968, "phrase": "existing_approximate-computing_benchmarks"}, {"score": 0.002456486927713543, "phrase": "low_annotation_burden"}, {"score": 0.002344201345813952, "phrase": "finite_degrees"}, {"score": 0.0022058510091498666, "phrase": "approximate_hardware_design"}, {"score": 0.002154835714714195, "phrase": "multi-level_architectures"}, {"score": 0.0021049977753042253, "phrase": "simpler_two-level_machines"}], "paper_keywords": ["approximate computing", " type inference"], "paper_abstract": "In approximate computing, programs gain efficiency by allowing occasional errors. Controlling the probabilistic effects of this approximation remains a key challenge. We propose a new approach where programmers use a type system to communicate high-level constraints on the degree of approximation. A combination of type inference, code specialization, and optional dynamic tracking makes the system expressive and convenient. The core type system captures the probability that each operation exhibits an error and bounds the probability that each expression deviates from its correct value. Solver-aided type inference lets the programmer specify the correctness probability on only some variables-program outputs, for example-and automatically fills in other types to meet these specifications. An optional dynamic type helps cope with complex run-time behavior where static approaches are insufficient. Together, these features interact to yield a high degree of programmer control while offering a strong soundness guarantee. We use existing approximate-computing benchmarks to show how our language, DECAF, maintains a low annotation burden. Our constraint-based approach can encode hardware details, such as finite degrees of reliability, so we also use DECAF to examine implications for approximate hardware design. We find that multi-level architectures can offer advantages over simpler two-level machines and that solveraided optimization improves efficiency.", "paper_title": "Probability Type Inference for Flexible Approximate Programming", "paper_id": "WOS:000367256500027"}