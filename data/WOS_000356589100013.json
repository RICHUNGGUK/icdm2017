{"auto_keywords": [{"score": 0.04867268826532295, "phrase": "code_clones"}, {"score": 0.026602242187676962, "phrase": "different_degrees"}, {"score": 0.006668447181436651, "phrase": "input_source_files"}, {"score": 0.00481495049065317, "phrase": "preprocessing_input_source_files"}, {"score": 0.004402973626416765, "phrase": "white_spaces"}, {"score": 0.004130376386308024, "phrase": "different_granularities"}, {"score": 0.004095323392273661, "phrase": "source_code"}, {"score": 0.003858110309630846, "phrase": "code_clone_detection"}, {"score": 0.003776750773624222, "phrase": "six_approaches"}, {"score": 0.003409399407390298, "phrase": "equivalence_class_partitioning"}, {"score": 0.0030515222178491923, "phrase": "equivalence_class"}, {"score": 0.0030127172247606812, "phrase": "token-based_code_clone_detection_tool"}, {"score": 0.0029871209444889716, "phrase": "ccfinder"}, {"score": 0.002617007341172262, "phrase": "latter_category"}, {"score": 0.002561752783323717, "phrase": "identical_files"}, {"score": 0.0023926387830753033, "phrase": "case_study"}, {"score": 0.002123051344001408, "phrase": "proposed_approaches"}], "paper_keywords": ["code clone", " hash function", " source code transformation"], "paper_abstract": "So far, many approaches for detecting code clones have been proposed based on the different degrees of normalizations (e.g. removal of white spaces, tokenization, and regularization of identifiers). Different degrees of normalizations lead to different granularities of source code to be detect as code clones. To investigate how the normalizations impact the code clone detection, this study proposes six approaches for detecting code clones with preprocessing input source files using different degrees of normalizations. More precisely, each normalization is applied to the input source files and then equivalence class partitioning is performed to the files in the preprocessing. After that, code clones are detected from a set of files that are representatives of each equivalence class using a token-based code clone detection tool named CCFinder. The proposed approaches can be categorized into two types, approaches with non-normalization and normalization. The former is the detection of only identical files without any normalization. Meanwhile, the latter category is the detection of identical files with different degrees of normalizations such as removal of all lines containing macros. From the case study, we observed that our proposed approaches detect code clones faster than the approach that uses only CCFinder. We also found the approach with non-normalization is the fastest among the proposed approaches in many cases.", "paper_title": "Proposing and Evaluating Clone Detection Approaches with Preprocessing Input Source Files", "paper_id": "WOS:000356589100013"}