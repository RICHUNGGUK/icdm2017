{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "syntax_definitions"}, {"score": 0.004586531354697466, "phrase": "modern_software_systems"}, {"score": 0.004161553532799662, "phrase": "language_processing_tools"}, {"score": 0.00386876598761639, "phrase": "mainstream_parser_generators"}, {"score": 0.002466139325703204, "phrase": "different_aspects"}, {"score": 0.002264607102799332, "phrase": "language_engineers"}, {"score": 0.0021049977753042253, "phrase": "pure_and_declarative_nature"}], "paper_keywords": ["Design", " Languages"], "paper_abstract": "Syntax definitions are pervasive in modern software systems, and serve as the basis for language processing tools like parsers and compilers. Mainstream parser generators pose restrictions on syntax definitions that follow from their implementation algorithm. They hamper evolution, maintainability, and compositionality of syntax definitions. The pureness and declarativity of syntax definitions is lost. We analyze how these problems arise for different aspects of syntax definitions, discuss their consequences for language engineers, and show how the pure and declarative nature of syntax definitions can be regained.", "paper_title": "Pure and Declarative Syntax Definition: Paradise Lost and Regained", "paper_id": "WOS:000286595800057"}