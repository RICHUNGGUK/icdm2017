{"auto_keywords": [{"score": 0.045321276030904266, "phrase": "muthukrishnan"}, {"score": 0.045090113813601736, "phrase": "rajaraman"}, {"score": 0.044079538984485474, "phrase": "proceedings"}, {"score": 0.043060629477555484, "phrase": "acm"}, {"score": 0.04283935452431592, "phrase": "new_york"}, {"score": 0.00481495049065317, "phrase": "load_balancing_algorithms"}, {"score": 0.0047893552527040195, "phrase": "dynamic_adversarial_systems"}, {"score": 0.0047385702897315436, "phrase": "dynamic_load_balancing_problem"}, {"score": 0.004650982915563737, "phrase": "job_load"}, {"score": 0.004247951281217312, "phrase": "distributed_dynamic_load_balancing"}, {"score": 0.004158290806404304, "phrase": "parallel_algorithms"}, {"score": 0.00402732160638926, "phrase": "clean_characterization"}, {"score": 0.0038590653130931222, "phrase": "cut_condition"}, {"score": 0.003737485125097945, "phrase": "aiello_et_al"}, {"score": 0.003668333531296882, "phrase": "dynamic_and_asynchronous_networks"}, {"score": 0.0034407781868385423, "phrase": "insertion_rate"}, {"score": 0.00335016692413066, "phrase": "cut_size"}, {"score": 0.0032969458013463807, "phrase": "open_question"}, {"score": 0.003084112747780646, "phrase": "local_algorithm"}, {"score": 0.00292375291694002, "phrase": "simpler_proof"}, {"score": 0.002908181499274949, "phrase": "tighter_bounds"}, {"score": 0.0028089634624677957, "phrase": "multicommodity_version"}, {"score": 0.0027865506182608263, "phrase": "load_balancing_model"}, {"score": 0.002613550853729262, "phrase": "new_proof"}, {"score": 0.0025857775575426276, "phrase": "max-flow_min-cut"}, {"score": 0.0025109095718850376, "phrase": "proof_techniques"}, {"score": 0.0024578219177450876, "phrase": "adversarial_systems"}, {"score": 0.0023361832548454207, "phrase": "computer_science"}, {"score": 0.002323733841676435, "phrase": "ieee_computer_society"}, {"score": 0.0023113506171584157, "phrase": "los_alamitos"}, {"score": 0.0022996526797138986, "phrase": "ca"}, {"score": 0.0021735890994119757, "phrase": "single_destination"}, {"score": 0.0021620042653528846, "phrase": "dynamically_changing_networks"}, {"score": 0.002116277794938425, "phrase": "different_model"}, {"score": 0.0021049977753042253, "phrase": "adversarially_changing_networks"}], "paper_keywords": ["adversarial load balancing", " packet routing", " multicommodity flow"], "paper_abstract": "In the dynamic load balancing problem, we seek to keep the job load roughly evenly distributed among the processors of a given network. The arrival and departure of jobs is modeled by an adversary restricted in its power. Muthukrishnan and Rajaraman [An adversarial model for distributed dynamic load balancing, in Proceedings of the 10th ACM Symposium on Parallel Algorithms and Architectures, ACM, New York, 1998] gave a clean characterization of a restriction on the adversary that can be considered the natural analogue of a cut condition. They proved that a simple local balancing algorithm proposed by Aiello et al. [Approximate load balancing on dynamic and asynchronous networks, in Proceedings of the 25th ACM Symposium on Theory of Computing, ACM, New York, 1993] is stable against such an adversary if the insertion rate is restricted to a (1 - epsilon) fraction of the cut size. They left as an open question whether the algorithm is stable at rate 1. In this paper, we resolve this question positively, by proving stability of the local algorithm at rate 1. Our proof techniques are very different from the ones used by Muthukrishnan and Rajaraman and yield a simpler proof and tighter bounds on the difference in loads. In addition, we introduce a multicommodity version of this load balancing model and show how to extend the result to the case of balancing two different kinds of loads at once (obtaining as a corollary a new proof of the 2-commodity Max-Flow Min-Cut Theorem). We also show how to apply the proof techniques to the problem of routing packets in adversarial systems. Awerbuch et al. [Simple routing strategies for adversarial systems, in Proceedings of the 42nd IEEE Symposium on Foundations of Computer Science, IEEE Computer Society, Los Alamitos, CA, 2001] showed that the same load balancing algorithm is stable against an adversary, inserting packets at rate 1 with a single destination in dynamically changing networks. Our techniques give a much simpler proof for a different model of adversarially changing networks.", "paper_title": "Stability of load balancing algorithms in dynamic adversarial systems", "paper_id": "WOS:000254459500017"}