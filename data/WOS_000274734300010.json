{"auto_keywords": [{"score": 0.03876353189850781, "phrase": "drbd_model"}, {"score": 0.00906778523096011, "phrase": "drbd_models"}, {"score": 0.00481495049065317, "phrase": "automated_modeling_of_dynamic_reliability_block_diagrams_using_colored_petri_nets"}, {"score": 0.004764859786310636, "phrase": "computer_system_reliability"}, {"score": 0.004522080178250592, "phrase": "fault_tree_analysis"}, {"score": 0.004475022550508119, "phrase": "reliability_block_diagrams"}, {"score": 0.004314127287770832, "phrase": "static_representations"}, {"score": 0.0042692243768616455, "phrase": "system_reliability_properties"}, {"score": 0.004202741104973709, "phrase": "recent_extension"}, {"score": 0.0038450179181069833, "phrase": "dynamic_reliability_behavior"}, {"score": 0.0038049789989278463, "phrase": "computer-based_systems"}, {"score": 0.003554661425339528, "phrase": "design_errors"}, {"score": 0.0034628156490003775, "phrase": "deadlock_error"}, {"score": 0.0034267429854665035, "phrase": "faulty_state"}, {"score": 0.003251920460276645, "phrase": "feasible_approach"}, {"score": 0.0030378759123133644, "phrase": "programmatic_methods"}, {"score": 0.0028828348726682965, "phrase": "reliability_markup_language"}, {"score": 0.0025555322596460036, "phrase": "colored_petri_net"}, {"score": 0.0024894376091589244, "phrase": "case_study"}, {"score": 0.002362320344521919, "phrase": "system_properties"}, {"score": 0.002253461585851626, "phrase": "existing_petri_net_tool"}, {"score": 0.002127186380459509, "phrase": "potential_solution"}, {"score": 0.0021049977753042253, "phrase": "automated_verification"}], "paper_keywords": ["Automated verification", " colored Petri net (CPN)", " deadlock detection", " extensible markup language (XML)", " formal modeling and analysis", " reliability block diagram (RBD)", " system reliability", " time Petri net"], "paper_abstract": "Computer system reliability is conventionally modeled and analyzed using techniques such as fault tree analysis and reliability block diagrams (RBDs), which provide static representations of system reliability properties. A recent extension to RBDs, called dynamic RBDs (DRBD), defines a framework for modeling the dynamic reliability behavior of computer-based systems. However, analyzing a DRBD model in order to locate and identify design errors, such as a deadlock error or faulty state, is not trivial when done manually. A feasible approach to verifying it is to develop its formal model and then analyze it using programmatic methods. In this paper, we first define a reliability markup language that can be used to formally describe DRBD models. Then, we present an algorithm that automatically converts a DRBD model into a colored Petri net. We use a case study to illustrate the effectiveness of our approach and demonstrate how system properties of a DRBD model can be verified using an existing Petri net tool. Our formal modeling approach is compositional; thus, it provides a potential solution to automated verification of DRBD models.", "paper_title": "Automated Modeling of Dynamic Reliability Block Diagrams Using Colored Petri Nets", "paper_id": "WOS:000274734300010"}