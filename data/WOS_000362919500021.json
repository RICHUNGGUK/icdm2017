{"auto_keywords": [{"score": 0.04795845458902327, "phrase": "differential_evolution"}, {"score": 0.045592770462398936, "phrase": "cpc_program_library"}, {"score": 0.04493752827345705, "phrase": "memetic_global_optimization_algorithm"}, {"score": 0.04421110906060491, "phrase": "openmp_tasking_model"}, {"score": 0.04225160122768915, "phrase": "proposed_implementation"}, {"score": 0.037061790801578426, "phrase": "distributed_program"}, {"score": 0.03685940705157452, "phrase": "test_data"}, {"score": 0.029204627557205105, "phrase": "objective_function"}, {"score": 0.00481495049065317, "phrase": "parallel_memetic_global_optimization_algorithm"}, {"score": 0.00478778190213169, "phrase": "shared_memory_multicore_systems"}, {"score": 0.004724980378009193, "phrase": "considered_algorithm"}, {"score": 0.004645438840222166, "phrase": "population-based_stochastic_algorithms"}, {"score": 0.0046192222897398685, "phrase": "particle_swarm_optimization"}, {"score": 0.00447341965028879, "phrase": "mempsode"}, {"score": 0.004324031677173549, "phrase": "inherent_and_highly_irregular_parallelism"}, {"score": 0.004259241489123484, "phrase": "dynamic_and_multilevel_approach"}, {"score": 0.004163864308936362, "phrase": "local_optimization_procedures"}, {"score": 0.004148176192192369, "phrase": "simple_function_evaluations"}, {"score": 0.004101464142010922, "phrase": "iteration_step"}, {"score": 0.0040783049361415614, "phrase": "memetic_algorithm"}, {"score": 0.003897659323896113, "phrase": "extensive_experimental_evaluation"}, {"score": 0.0038031606864693916, "phrase": "shared-memory_multicore_server"}, {"score": 0.003776663282989998, "phrase": "program"}, {"score": 0.0036346579146537923, "phrase": "queen's_university"}, {"score": 0.0036209569678336156, "phrase": "belfast"}, {"score": 0.0036073064072936626, "phrase": "n._ireland"}, {"score": 0.0035801599857673582, "phrase": "standard_cpc"}, {"score": 0.0033511469200347907, "phrase": "tar.gz_programming_language"}, {"score": 0.0033385105985286154, "phrase": "ansi_c._computer"}, {"score": 0.0032760377953971248, "phrase": "linux_operating_system"}, {"score": 0.0032575241721857343, "phrase": "gnu_compilers"}, {"score": 0.0032026066791743866, "phrase": "openmp_api"}, {"score": 0.0031905286720361145, "phrase": "runtime_system"}, {"score": 0.003136737079014769, "phrase": "internal_storage"}, {"score": 0.0030664187283390783, "phrase": "maximum_population_size"}, {"score": 0.003049086085585051, "phrase": "required_memory"}, {"score": 0.0029304620114698598, "phrase": "real_valued_functions"}, {"score": 0.002913895605074143, "phrase": "indispensable_methodology"}, {"score": 0.0028111220617485985, "phrase": "expensive_function_evaluations"}, {"score": 0.002795228413298423, "phrase": "real-time_response"}, {"score": 0.0027325449069867222, "phrase": "smooth_and_deceitful_landscapes"}, {"score": 0.0025965853546625352, "phrase": "unified_particle_swarm_optimization"}, {"score": 0.0025819015229390663, "phrase": "differential_evolution_algorithms"}, {"score": 0.0025576122940734977, "phrase": "derivative-free_torczon's_multi-directional_search"}, {"score": 0.002543148295176345, "phrase": "gradient-based_bfgs_method"}, {"score": 0.0025287658867813377, "phrase": "produced_hybrid_algorithms"}, {"score": 0.00251922271634259, "phrase": "inherent_parallelism"}, {"score": 0.0023713273141757326, "phrase": "current_version"}, {"score": 0.0022919762167777427, "phrase": "bound_constraints"}, {"score": 0.002279011030331704, "phrase": "optimization_variables"}, {"score": 0.002253299769886694, "phrase": "running_time"}, {"score": 0.0021655683497137234, "phrase": "available_cores"}, {"score": 0.0021573928659460195, "phrase": "extensive_experimental_results"}, {"score": 0.002129020447793464, "phrase": "ideal_values"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel global optimization", " Multicores", " OpenMP", " Particle Swarm Optimization", " Differential Evolution", " Memetic Algorithms", " Local search"], "paper_abstract": "A parallel memetic global optimization algorithm suitable for shared memory multicore systems is proposed and analyzed. The considered algorithm combines two well-known and widely used population-based stochastic algorithms, namely Particle Swarm Optimization and Differential Evolution, with two efficient and parallelizable local search procedures. The sequential version of the algorithm was first introduced as MEMPSODE (MEMetic Particle Swarm Optimization and Differential Evolution) and published in the CPC program library. We exploit the inherent and highly irregular parallelism of the memetic global optimization algorithm by means of a dynamic and multilevel approach based on the OpenMP tasking model. In our case, tasks correspond to local optimization procedures or simple function evaluations. Parallelization occurs at each iteration step of the memetic algorithm without affecting its searching efficiency. The proposed implementation, for the same random seed, reaches the same solution irrespectively of being executed sequentially or in parallel. Extensive experimental evaluation has been performed in order to illustrate the speedup achieved on a shared-memory multicore server. Program summary Program title: p-MEMPSODE Catalogue identifier: AEXJ_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEXJ_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 9950 No. of bytes in distributed program, including test data, etc.: 141503 Distribution format: tar.gz Programming language: ANSI C. Computer: Workstation. Operating system: Developed under the Linux operating system using the GNU compilers v.4.4.3 (or higher). Uses the OpenMP API and runtime system. RAM: The code uses O(n x N) internal storage, n being the dimension of the problem and N the maximum population size. The required memory is dynamically allocated. Word size: 64 Classification: 4.9. Nature of problem: Numerical global optimization of real valued functions is an indispensable methodology for solving a multitude of problems in science and engineering. Many problems exhibit a number of local and/or global minimizers, expensive function evaluations or require real-time response. In addition, discontinuities of the objective function, non-smooth and deceitful landscapes constitute challenging obstacles for most optimization algorithms. Solution method: We implement a memetic global optimization algorithm that combines stochastic, population-based methods with deterministic local search procedures. More specifically, the Unified Particle Swarm Optimization and the Differential Evolution algorithms are harnessed with the derivative-free Torczon's Multi-Directional Search and the gradient-based BFGS method. The produced hybrid algorithms possess inherent parallelism that is exploited efficiently by means of the OpenMP tasking model. Given the same random seed, the proposed implementation reaches the same solution irrespective of being executed sequentially or in parallel. Restrictions: The current version of the software uses only double precision arithmetic. An OpenMP-enabled (version 3.0 or higher) compiler is required. Unusual features: The software requires bound constraints on the optimization variables. Running time: The running time depends on the complexity of the objective function (and its derivatives if used) as well as on the number of available cores. Extensive experimental results demonstrate that the speedup closely approximates ideal values. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "p-MEMPSODE: Parallel and irregular memetic global optimization", "paper_id": "WOS:000362919500021"}