{"auto_keywords": [{"score": 0.04669935944937693, "phrase": "high_probability"}, {"score": 0.014381179603833807, "phrase": "insertion_time"}, {"score": 0.00481495049065317, "phrase": "random-walk_cuckoo_hashing."}, {"score": 0.004254814649568355, "phrase": "random-walk_insertion_method"}, {"score": 0.0041136473765874815, "phrase": "useful_methodology"}, {"score": 0.003910595307634916, "phrase": "cuckoo_hashing"}, {"score": 0.0036966717141736355, "phrase": "multiple_hash_locations"}, {"score": 0.0033405704229694656, "phrase": "previous_work"}, {"score": 0.003070086433952691, "phrase": "breadth-first_search"}, {"score": 0.0021408862709571615, "phrase": "random_blocking_items"}, {"score": 0.0021049977753042253, "phrase": "free_location"}], "paper_keywords": ["hashing", " random walk", " cuckoo"], "paper_abstract": "In this paper, we provide a polylogarithmic bound that holds with high probability on the insertion time for cuckoo hashing under the random-walk insertion method. Cuckoo hashing provides a useful methodology for building practical, high-performance hash tables. The essential idea of cuckoo hashing is to combine the power of schemes that allow multiple hash locations for an item with the power to dynamically change the location of an item among its possible locations. Previous work on the case where the number of choices is larger than two has analyzed breadth-first search, which is both inefficient in practice and currently has only a polynomial upper bound on the insertion time that holds with high probability. On the other hand, it does have expected constant amortized insertion time. Here we significantly advance the state of the art by proving a polylogarithmic bound that holds with high probability on the more efficient random-walk method, where items repeatedly kick out random blocking items until a free location for an item is found.", "paper_title": "AN ANALYSIS OF RANDOM-WALK CUCKOO HASHING", "paper_id": "WOS:000289974100003"}