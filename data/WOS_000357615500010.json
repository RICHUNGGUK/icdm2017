{"auto_keywords": [{"score": 0.0329503666736941, "phrase": "symbolic_model"}, {"score": 0.00481495049065317, "phrase": "timed_concurrent_constraint_programming"}, {"score": 0.004774115617883476, "phrase": "concurrent_constraint_programming"}, {"score": 0.004201381218977942, "phrase": "shared_store"}, {"score": 0.0041657281535389615, "phrase": "partial_information"}, {"score": 0.004112812699639956, "phrase": "ntcc_calculus"}, {"score": 0.003991932110277654, "phrase": "discrete_time-units"}, {"score": 0.0039077616208517026, "phrase": "reactive_systems"}, {"score": 0.003776750773624222, "phrase": "non-deterministic_choices"}, {"score": 0.0031845067058084583, "phrase": "automatic_verification"}, {"score": 0.003157455511069507, "phrase": "ntcc_programs"}, {"score": 0.003025597247856977, "phrase": "internal_transition_relation"}, {"score": 0.002742787059497186, "phrase": "suitable_fragment"}, {"score": 0.0027194778713860715, "phrase": "linear_time"}, {"score": 0.0027078974645805736, "phrase": "temporal_logic"}, {"score": 0.002639440558428147, "phrase": "standard_techniques"}, {"score": 0.002617007341172262, "phrase": "difference_decision_diagrams"}, {"score": 0.002561752783323717, "phrase": "compact_representation"}, {"score": 0.0024547103576350233, "phrase": "fixpoint_characterization"}, {"score": 0.0024234763342790852, "phrase": "timed_constructs"}, {"score": 0.002342110338541984, "phrase": "observable_transition"}, {"score": 0.002187464225869713, "phrase": "operational_semantics"}, {"score": 0.002123051344001408, "phrase": "prototypical_tool"}], "paper_keywords": ["Concurrent constraint programming", " temporal logic", " model checking"], "paper_abstract": "Concurrent Constraint Programming (ccp) is a model for concurrency where agents interact with each other by telling and asking constraints (i. e., formulas in logic) into a shared store of partial information. The ntcc calculus extends ccp with the notion of discrete time-units for the specification of reactive systems. Moreover, ntcc features constructors for non-deterministic choices and asynchronous behavior, thus allowing for (1) synchronization of processes via constraint entailment during a time-unit and (2) synchronization of processes along time-intervals. In this paper we develop the techniques needed for the automatic verification of ntcc programs based on symbolic model checking. We show that the internal transition relation, modeling the behavior of processes during a time-unit (1 above), can be symbolically represented by formulas in a suitable fragment of linear time temporal logic. Moreover, by using standard techniques as difference decision diagrams, we provide a compact representation of these constraints. Then, relying on a fixpoint characterization of the timed constructs, we obtain a symbolic model of the observable transition (2 above). We prove that our construction is correct with respect to the operational semantics. Finally, we introduce a prototypical tool implementing our method.", "paper_title": "A Symbolic Model for Timed Concurrent Constraint Programming", "paper_id": "WOS:000357615500010"}