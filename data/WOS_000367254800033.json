{"auto_keywords": [{"score": 0.03412771178496745, "phrase": "load_balance_algorithm"}, {"score": 0.00481495049065317, "phrase": "modern_scientific_simulations"}, {"score": 0.004701825207431857, "phrase": "parallel_processors"}, {"score": 0.004591345494188032, "phrase": "spatial_domain"}, {"score": 0.0045370785151713396, "phrase": "mesh_cells"}, {"score": 0.004326321719714357, "phrase": "balanced_assignment"}, {"score": 0.004249825947483216, "phrase": "computational_load"}, {"score": 0.004149922666541166, "phrase": "parallel_performance"}, {"score": 0.003910278811774747, "phrase": "simulation_time"}, {"score": 0.003795677450778112, "phrase": "dynamic_load_balance_algorithms"}, {"score": 0.003619235073669304, "phrase": "graph_partitioners"}, {"score": 0.0033101397746161843, "phrase": "typical_spmd_simulations"}, {"score": 0.0030819219279832224, "phrase": "poorly_scaling_algorithm"}, {"score": 0.002801849371896573, "phrase": "main_application_computation"}, {"score": 0.0025020469669826497, "phrase": "load_balance_computation"}, {"score": 0.0023433334920926713, "phrase": "smaller_number"}, {"score": 0.0021049977753042253, "phrase": "barnes-hut_application"}], "paper_keywords": ["load balance", " parallel algorithm", " performance"], "paper_abstract": "Modern scientific simulations divide work between parallel processors by decomposing a spatial domain of mesh cells, particles, or other elements. A balanced assignment of the computational load is critical for parallel performance. If the computation per element changes over the simulation time, simulations can use dynamic load balance algorithms to evenly redistribute work to processes. Graph partitioners are widely used and balance very effectively, but they do not strong scale well. Typical SPMD simulations wait while a load balance algorithm runs on all processors, so a poorly scaling algorithm can itself become a bottleneck. We observe that the load balance algorithm is separate from the main application computation and has its own scaling properties. We propose to decouple the load balance algorithm from the application, and to offload the load balance computation so that it runs concurrently with the application on a smaller number of processors. We demonstrate the costs of decoupling and offloading the load balancing algorithm from a Barnes-Hut application.", "paper_title": "Decoupled Load Balancing", "paper_id": "WOS:000367254800033"}