{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "svm."}, {"score": 0.004686963264680882, "phrase": "simple_and_effective_stochastic_sub-gradient_descent_algorithm"}, {"score": 0.004521566043596533, "phrase": "support_vector_machines"}, {"score": 0.00384633057714983, "phrase": "single_training_example"}, {"score": 0.0037608593980593035, "phrase": "previous_analyses"}, {"score": 0.0037272031155266556, "phrase": "stochastic_gradient_descent_methods"}, {"score": 0.0035473867669654174, "phrase": "previously_devised_svm_solvers"}, {"score": 0.0033011569787033297, "phrase": "regularization_parameter"}, {"score": 0.0032277611129050234, "phrase": "linear_kernel"}, {"score": 0.0031845067058084583, "phrase": "total_run-time"}, {"score": 0.002845809662579165, "phrase": "non-zero_features"}, {"score": 0.0025892330566358503, "phrase": "resulting_algorithm"}, {"score": 0.0025089420019955232, "phrase": "large_datasets"}, {"score": 0.0024421008630165046, "phrase": "non-linear_kernels"}, {"score": 0.0023770362063833903, "phrase": "primal_objective_function"}, {"score": 0.0022419349154472806, "phrase": "training_set_size"}, {"score": 0.00216263228969761, "phrase": "large_text_classification_problems"}, {"score": 0.0021049977753042253, "phrase": "order-of-magnitude_speedup"}], "paper_keywords": ["SVM", " Stochastic gradient descent"], "paper_abstract": "We describe and analyze a simple and effective stochastic sub-gradient descent algorithm for solving the optimization problem cast by Support Vector Machines (SVM). We prove that the number of iterations required to obtain a solution of accuracy epsilon is (O) over tilde (1/epsilon), where each iteration operates on a single training example. In contrast, previous analyses of stochastic gradient descent methods for SVMs require Omega(1/epsilon(2)) iterations. As in previously devised SVM solvers, the number of iterations also scales linearly with 1/lambda, where. is the regularization parameter of SVM. For a linear kernel, the total run-time of our method is (O) over tilde (d/(lambda epsilon)), where d is a bound on the number of non-zero features in each example. Since the run-time does not depend directly on the size of the training set, the resulting algorithm is especially suited for learning from large datasets. Our approach also extends to non-linear kernels while working solely on the primal objective function, though in this case the runtime does depend linearly on the training set size. Our algorithm is particularly well suited for large text classification problems, where we demonstrate an order-of-magnitude speedup over previous SVM learning methods.", "paper_title": "Pegasos: primal estimated sub-gradient solver for SVM", "paper_id": "WOS:000288371400002"}