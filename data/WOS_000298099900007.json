{"auto_keywords": [{"score": 0.03782808165713525, "phrase": "current_state"}, {"score": 0.0351943736185821, "phrase": "logic_programs"}, {"score": 0.033537667883606966, "phrase": "integrity_constraints"}, {"score": 0.03254072263016771, "phrase": "agent's_goals"}, {"score": 0.00481495049065317, "phrase": "destructive_databases"}, {"score": 0.004581505405526037, "phrase": "agent_language"}, {"score": 0.0044968982227349625, "phrase": "agent_functionality"}, {"score": 0.004413846562278824, "phrase": "state_transition_theory"}, {"score": 0.004359328949187473, "phrase": "model-theoretic_semantics"}, {"score": 0.004173743791750695, "phrase": "abductive_logic_programming"}, {"score": 0.0041222144498151685, "phrase": "alp"}, {"score": 0.003971262520692664, "phrase": "simplified_state-free_syntax"}, {"score": 0.0038737214010638745, "phrase": "operational_semantics"}, {"score": 0.003802135020791801, "phrase": "destructive_updates"}, {"score": 0.003378385493203297, "phrase": "alp_combination"}, {"score": 0.003234425353582135, "phrase": "agent's_beliefs"}, {"score": 0.0029097582786754444, "phrase": "intensional_predicates"}, {"score": 0.0026175952455594277, "phrase": "reactive_rules"}, {"score": 0.0024595996811420566, "phrase": "database_and_recent_agent_actions"}, {"score": 0.0021987994275190314, "phrase": "database_states"}, {"score": 0.0021049977753042253, "phrase": "successful_solution"}], "paper_keywords": ["Abductive logic programming", " Agent languages", " Model-theoretic semantics"], "paper_abstract": "In this paper we present an agent language that combines agent functionality with a state transition theory and model-theoretic semantics. The language is based on abductive logic programming (ALP), but employs a simplified state-free syntax, with an operational semantics that uses destructive updates to manipulate a database, which represents the current state of the environment. The language builds upon the ALP combination of logic programs, to represent an agent's beliefs, and integrity constraints, to represent the agent's goals. Logic programs are used to define macro-actions, intensional predicates, and plans to reduce goals to sub-goals including actions. Integrity constraints are used to represent reactive rules, which are triggered by the current state of the database and recent agent actions and external events. The execution of actions and the assimilation of observations generate a sequence of database states. In the case of the successful solution of all goals, this sequence, taken as a whole, determines a model that makes the agent's goals and beliefs all true.", "paper_title": "Abductive logic programming agents with destructive databases", "paper_id": "WOS:000298099900007"}