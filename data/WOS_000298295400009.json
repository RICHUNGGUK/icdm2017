{"auto_keywords": [{"score": 0.0494713765104406, "phrase": "real-time_collector"}, {"score": 0.00481495049065317, "phrase": "performance_and_memory_costs"}, {"score": 0.0047135086583390585, "phrase": "compacting_garbage_collectors"}, {"score": 0.004459605573798577, "phrase": "lengthy_operation"}, {"score": 0.0037446875860947916, "phrase": "direct_references"}, {"score": 0.0034977560416755726, "phrase": "updating_problem"}, {"score": 0.0034386016613475335, "phrase": "immediate_reuse"}, {"score": 0.0033517342967390065, "phrase": "evacuated_objects"}, {"score": 0.0032810180076973806, "phrase": "copy_reserve_overhead"}, {"score": 0.003211788912325178, "phrase": "execution_time_overhead"}, {"score": 0.002924074850256874, "phrase": "real-time_garbage_collection"}, {"score": 0.002754516260621121, "phrase": "first_thorough_study"}, {"score": 0.002639440558428147, "phrase": "optimised_implementation"}, {"score": 0.002617007341172262, "phrase": "different_handle_designs"}, {"score": 0.0025947642929906407, "phrase": "ovm's_minuteman_real-time_collector"}, {"score": 0.0025183881730011597, "phrase": "good_set"}, {"score": 0.0024028742248152425, "phrase": "zero_overhead"}, {"score": 0.002372298201966367, "phrase": "widely_used_brooks-style_compacting_collector"}, {"score": 0.002253826965566618, "phrase": "memory_usage"}, {"score": 0.002178144355363467, "phrase": "-compact_collectors"}], "paper_keywords": ["Measurement", " Performance", " Algorithms"], "paper_abstract": "Compacting garbage collectors must update all references to objects they move. Updating is a lengthy operation but the updates must be transparent to the mutator. The consequence is that no space can be reclaimed until all references have been updated which, in a real-time collector, must be done incrementally. One solution is to replace direct references to objects with handles. Handles offer several advantages to a real-time collector. They eliminate the updating problem. They allow immediate reuse of the space used by evacuated objects. They incur no copy reserve overhead. However, the execution time overhead of handles has led to them being abandoned by most modern systems. We re-examine this decision in the context of real-time garbage collection, for which several systems with handles have appeared recently. We provide the first thorough study of the overheads of handles, based on an optimised implementation of different handle designs within Ovm's Minuteman real-time collector. We find that with a good set of optimisations handles are not very expensive. We obtained zero overhead over the widely used Brooks-style compacting collector (1.6% and 3.1% on two other platforms) and 9% increase in memory usage. Our optimisations are particularly applicable to mark-compact collectors, but may also be useful to other collectors.", "paper_title": "Handles Revisited: Optimising Performance and Memory Costs in a Real-Time Collector", "paper_id": "WOS:000298295400009"}