{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "well_method"}, {"score": 0.004668957916795845, "phrase": "hardware_architecture"}, {"score": 0.004621279527317074, "phrase": "efficient_implementation"}, {"score": 0.004550669123303854, "phrase": "well_equidistributed_long-period_linear"}, {"score": 0.003982135422102916, "phrase": "fpga"}, {"score": 0.0037632749713937637, "phrase": "dedicated_software_implementation"}, {"score": 0.0037057255600764475, "phrase": "proposed_architecture"}, {"score": 0.0035932440062595252, "phrase": "different_devices"}, {"score": 0.0034663083890589235, "phrase": "pseudorandom_number_generators"}, {"score": 0.003209152260950748, "phrase": "well_stream"}, {"score": 0.003160049822855747, "phrase": "arbitrary_number"}, {"score": 0.0031277316566463978, "phrase": "independent_parallel_substreams"}, {"score": 0.002851301751761804, "phrase": "parallel_cores"}, {"score": 0.0027505037762786087, "phrase": "single_design"}, {"score": 0.00263965046277432, "phrase": "standard_software_generator"}, {"score": 0.002559444836360178, "phrase": "statistical_tests"}, {"score": 0.002533253511622532, "phrase": "interleaved_sequences"}, {"score": 0.0024186620196958867, "phrase": "different_substreams"}, {"score": 0.0023816257768353344, "phrase": "parallel_framework"}, {"score": 0.0022856052476424344, "phrase": "experimental_results"}, {"score": 0.002170993336847424, "phrase": "better_characteristics"}, {"score": 0.0021377414429251647, "phrase": "well_algorithm"}], "paper_keywords": ["Fast jump ahead", " field-programmable gate array (FPGA)", " parallel random number generator (PRNG)", " well equidistributed long-period linear (WELL) algorithm"], "paper_abstract": "This paper presents a hardware architecture for efficient implementation of the well equidistributed long-period linear (WELL) algorithm. Our design achieves a throughput of one sample-per-cycle and runs as fast as 423 MHz on a Xilinx XC5VFX130T field-programmable gate array (FPGA) device. This performance is 7.1-fold faster than a dedicated software implementation. The proposed architecture is also implemented on targeting different devices for the comparison of other types of pseudorandom number generators. In addition, we design a software/hardware framework that is capable of dividing the WELL stream into an arbitrary number of independent parallel substreams. With support from software, this framework can obtain speedup roughly proportional to the number of parallel cores. The sequences produced by the single design are verified to be consistent with the standard software generator. In addition, the statistical tests of interleaved sequences are also performed to check for correlations between different substreams of the parallel framework. We apply our framework to two applications. Experimental results verify the correctness of our framework as well as the better characteristics of the WELL algorithm compared with the Mersenne Twister method.", "paper_title": "Software/Hardware Parallel Long-Period Random Number Generation Framework Based on the WELL Method", "paper_id": "WOS:000337159500009"}