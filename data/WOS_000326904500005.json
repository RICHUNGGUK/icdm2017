{"auto_keywords": [{"score": 0.04092471788849643, "phrase": "human_brain"}, {"score": 0.00481495049065317, "phrase": "artificial_neural_network"}, {"score": 0.004758987153057194, "phrase": "consistent_teaching_data"}, {"score": 0.004722038375317162, "phrase": "nonlinear_programming_method"}, {"score": 0.004453874101119545, "phrase": "ship_master"}, {"score": 0.004317109072311102, "phrase": "current_and_wind"}, {"score": 0.004040211152784802, "phrase": "low_speed"}, {"score": 0.0038554737609608255, "phrase": "necessary_action"}, {"score": 0.0037957839728524046, "phrase": "situation_demand"}, {"score": 0.003483573659272443, "phrase": "suitable_artificial_intelligence_technique"}, {"score": 0.003324203391715804, "phrase": "automatic_ship_berthing"}, {"score": 0.0032472646337850042, "phrase": "research_artificial_neural_network"}, {"score": 0.0030865992688177005, "phrase": "virtual_window_concept"}, {"score": 0.0030269369940823902, "phrase": "optimal_steering"}, {"score": 0.002968424524565369, "phrase": "nonlinear_programming_language"}, {"score": 0.002945337629669123, "phrase": "npl"}, {"score": 0.002865929543375884, "phrase": "centralized_controller"}, {"score": 0.0027995677499976406, "phrase": "lavenberg-marquardt"}, {"score": 0.002766963729586353, "phrase": "backpropagation_technique"}, {"score": 0.002745438358145758, "phrase": "command_rudder_angle"}, {"score": 0.0027240799841720957, "phrase": "propeller_revolution_output"}, {"score": 0.002681859084438076, "phrase": "trained_anns"}, {"score": 0.002599365215003002, "phrase": "wind_condition"}, {"score": 0.00253916011199984, "phrase": "separate_anns"}, {"score": 0.002499798127196099, "phrase": "reconstructed_teaching_data"}, {"score": 0.0024803459795996116, "phrase": "gust_wind_disturbances"}, {"score": 0.002422890839801611, "phrase": "abrupt_condition"}, {"score": 0.0024041797208915975, "phrase": "ann"}, {"score": 0.002376027109070317, "phrase": "pd_controller"}, {"score": 0.002311933249234786, "phrase": "command_rudder_angle_output"}, {"score": 0.002171836484200008, "phrase": "non-teaching_data"}, {"score": 0.002154930852763048, "phrase": "different_gust_wind_distributions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Artificial neural network", " PD controller", " Gust wind", " Nonlinear programing"], "paper_abstract": "Ship handling during berthing is considered as one of the most sophisticated tasks that a ship master has to face. The presence of current and wind make it even more complicated to execute, especially when ship approaches to a pier in low speed. To deal with such phenomenon, only experienced human brain decides the necessary action taken depending on situation demand. So automation in berthing is still far beyond imagination. But, if the human brain can be replicated by any suitable artificial intelligence technique to perform the same action that human brain does during berthing, then automatic ship berthing is possible. In this research artificial neural network is used for that purpose. To enhance its learnability, consistent teaching data based on the virtual window concept are created to ensure optimal steering with the help of nonlinear programming language (NPL) method. Then instead of centralized controller, two separate feed forward neural networks are trained using Lavenberg-Marquardt algorithm in backpropagation technique for command rudder angle and propeller revolution output respectively. The trained ANNs are then verified for their workability in no wind condition. On the other hand, separate ANNs are trained with reconstructed teaching data considering gust wind disturbances. To deal with any abrupt condition, ANN followed by PD controller is also introduced in case of command rudder angle output whose effectiveness is well verified not only for teaching data but also in case of non-teaching data and different gust wind distributions. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Automatic ship berthing using artificial neural network trained by consistent teaching data using nonlinear programming method", "paper_id": "WOS:000326904500005"}