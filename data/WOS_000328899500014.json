{"auto_keywords": [{"score": 0.04773093642650064, "phrase": "ann"}, {"score": 0.00481495049065317, "phrase": "approximate_nearest_neighbor_search"}, {"score": 0.004630423009638876, "phrase": "approximate_nearest_neighbor"}, {"score": 0.004477870190590885, "phrase": "visual_descriptor_indexing"}, {"score": 0.004330321475256457, "phrase": "kd_trees"}, {"score": 0.00428222231579898, "phrase": "vp_trees"}, {"score": 0.00409508755819924, "phrase": "hierarchical_binary_space"}, {"score": 0.0039822874870125095, "phrase": "key_effort"}, {"score": 0.00389427992231721, "phrase": "different_partition_functions"}, {"score": 0.0035811651542886746, "phrase": "data_points"}, {"score": 0.0034437574674180365, "phrase": "effective_nn_candidate_location"}, {"score": 0.003348838095597268, "phrase": "partition_functions"}, {"score": 0.003220315882881027, "phrase": "efficient_nn_candidate_location"}, {"score": 0.0031315358193567708, "phrase": "trinary-projection_direction-based_partition_function"}, {"score": 0.002677616534005393, "phrase": "projection_direction"}, {"score": 0.0026330549554033876, "phrase": "widely_adopted_maximum_variance_criterion"}, {"score": 0.00244834685428352, "phrase": "efficient_partition_function_evaluation"}, {"score": 0.0023807981747706376, "phrase": "coordinate-wise_enumeration_algorithm"}, {"score": 0.0023281003994670714, "phrase": "principal_trinary-projection_direction"}, {"score": 0.0022013916728990564, "phrase": "multiple_randomized_trees"}, {"score": 0.002176887956041267, "phrase": "improved_performance"}, {"score": 0.0021049977753042253, "phrase": "large-scale_local_patch_indexing"}], "paper_keywords": ["Approximate nearest neighbor search", " KD trees", " trinary-projection trees"], "paper_abstract": "We address the problem of approximate nearest neighbor (ANN) search for visual descriptor indexing. Most spatial partition trees, such as KD trees, VP trees, and so on, follow the hierarchical binary space partitioning framework. The key effort is to design different partition functions (hyperplane or hypersphere) to divide the points so that 1) the data points can be well grouped to support effective NN candidate location and 2) the partition functions can be quickly evaluated to support efficient NN candidate location. We design a trinary-projection direction-based partition function. The trinary-projection direction is defined as a combination of a few coordinate axes with the weights being 1 or -1. We pursue the projection direction using the widely adopted maximum variance criterion to guarantee good space partitioning and find fewer coordinate axes to guarantee efficient partition function evaluation. We present a coordinate-wise enumeration algorithm to find the principal trinary-projection direction. In addition, we provide an extension using multiple randomized trees for improved performance. We justify our approach on large-scale local patch indexing and similar image search.", "paper_title": "Trinary-Projection Trees for Approximate Nearest Neighbor Search", "paper_id": "WOS:000328899500014"}