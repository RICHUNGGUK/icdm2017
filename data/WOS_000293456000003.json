{"auto_keywords": [{"score": 0.041546457683769446, "phrase": "bct"}, {"score": 0.00481495049065317, "phrase": "dynamic_analysis_for_diagnosing_integration_faults"}, {"score": 0.004718897469501381, "phrase": "incomplete_specifications"}, {"score": 0.004640311812502743, "phrase": "source_code"}, {"score": 0.0045324756541157574, "phrase": "integration_faults"}, {"score": 0.004295269532032448, "phrase": "behavior_capture"}, {"score": 0.004139401327448803, "phrase": "dynamic_analysis"}, {"score": 0.00398916666053909, "phrase": "related_faults"}, {"score": 0.003935892934907777, "phrase": "dynamic_analysis_techniques"}, {"score": 0.003909522412849035, "phrase": "model-based_monitoring"}, {"score": 0.0037930162319613856, "phrase": "structured_set"}, {"score": 0.0037423521744765075, "phrase": "data_values"}, {"score": 0.00353400795316709, "phrase": "case_studies"}, {"score": 0.003360578019762703, "phrase": "scientific_knowledge"}, {"score": 0.003293442130869165, "phrase": "classic_dynamic_analysis"}, {"score": 0.003271361898648331, "phrase": "incremental_finite_state_generation_techniques"}, {"score": 0.003195236629209403, "phrase": "complementary_aspects"}, {"score": 0.0031738126998349775, "phrase": "component_interactions"}, {"score": 0.0031208772639433145, "phrase": "effective_technique"}, {"score": 0.0030895394261534776, "phrase": "false_positives"}, {"score": 0.0029873281676201565, "phrase": "produced_data"}, {"score": 0.0027929100418926725, "phrase": "detected_anomalies"}, {"score": 0.0026023381988430666, "phrase": "dynamic_models"}, {"score": 0.0024993218789131437, "phrase": "test_cases"}, {"score": 0.0024742098091226203, "phrase": "execution_space"}, {"score": 0.002297585503415527, "phrase": "regression_testing_failures"}, {"score": 0.002282166507956957, "phrase": "rare_field_failures"}, {"score": 0.0021844290159501313, "phrase": "false_alarms"}, {"score": 0.0021624739899833868, "phrase": "useful_information"}], "paper_keywords": ["Dynamic Analysis", " diagnosis", " fault localization", " false positive filters", " regression failure analysis", " field failure analysis"], "paper_abstract": "Many software components are provided with incomplete specifications and little access to the source code. Reusing such gray-box components can result in integration faults that can be difficult to diagnose and locate. In this paper, we present Behavior Capture and Test (BCT), a technique that uses dynamic analysis to automatically identify the causes of failures and locate the related faults. BCT augments dynamic analysis techniques with model-based monitoring. In this way, BCT identifies a structured set of interactions and data values that are likely related to failures (failure causes), and indicates the components and the operations that are likely responsible for failures (fault locations). BCT advances scientific knowledge in several ways. It combines classic dynamic analysis with incremental finite state generation techniques to produce dynamic models that capture complementary aspects of component interactions. It uses an effective technique to filter false positives to reduce the effort of the analysis of the produced data. It defines a strategy to extract information about likely causes of failures by automatically ranking and relating the detected anomalies so that developers can focus their attention on the faults. The effectiveness of BCT depends on the quality of the dynamic models extracted from the program. BCT is particularly effective when the test cases sample the execution space well. In this paper, we present a set of case studies that illustrate the adequacy of BCT to analyze both regression testing failures and rare field failures. The results show that BCT automatically filters out most of the false alarms and provides useful information to understand the causes of failures in 69 percent of the case studies.", "paper_title": "Dynamic Analysis for Diagnosing Integration Faults", "paper_id": "WOS:000293456000003"}