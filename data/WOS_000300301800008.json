{"auto_keywords": [{"score": 0.03490875733521557, "phrase": "error_rate"}, {"score": 0.00481495049065317, "phrase": "defective_circuits"}, {"score": 0.004748556604045108, "phrase": "ones_counting"}, {"score": 0.00465067040500426, "phrase": "vlsi_circuit_feature_size"}, {"score": 0.004219774794569897, "phrase": "desired_level"}, {"score": 0.004047500054405469, "phrase": "defective_chips"}, {"score": 0.003936560022538905, "phrase": "erroneous_yet_acceptable_results"}, {"score": 0.0035965032173588753, "phrase": "effective_yield"}, {"score": 0.0033549790559972053, "phrase": "specific_applications"}, {"score": 0.002742196991950893, "phrase": "combinational_logic_circuit"}, {"score": 0.0025578967205807843, "phrase": "erroneous_output"}, {"score": 0.0023859534478427313, "phrase": "output_line"}, {"score": 0.002134508934917511, "phrase": "runtime_error_estimation"}, {"score": 0.0021049977753042253, "phrase": "aging_systems"}], "paper_keywords": ["Reliability", " Theory", " BIST", " binning integrated circuits", " error rate", " ones counting", " yield"], "paper_abstract": "With VLSI circuit feature size scaling down, it is becoming more difficult and expensive to achieve a desired level of yield. Error-tolerance employs defective chips that occasionally produce erroneous yet acceptable results in targeted applications, and has been proposed as one way to increase effective yield. These chips are characterized by criteria set by specific applications. Error rate, an upper-bound on how frequent errors occur at an output, is one such criterion. In this article we focus on the following problem: given a combinational logic circuit that is defective, and hence occasionally produces an erroneous output, how can we determine the error rate of each output line by using ones counting? The results of this work can also be used for runtime error estimation in aging systems and in environments where soft-errors are produced.", "paper_title": "Error Rate Estimation for Defective Circuits via Ones Counting", "paper_id": "WOS:000300301800008"}