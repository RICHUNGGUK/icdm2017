{"auto_keywords": [{"score": 0.040691162217611467, "phrase": "constant_time"}, {"score": 0.023579742147027724, "phrase": "fibonacci_strings"}, {"score": 0.00481495049065317, "phrase": "fibonacci_string_rotations"}, {"score": 0.004406994912939125, "phrase": "combinatorial_properties"}, {"score": 0.004278807087784626, "phrase": "fibonacci_strings_rotations"}, {"score": 0.004033464035028803, "phrase": "simple_formula"}, {"score": 0.0033452741392850523, "phrase": "lexicographically-sorted_list"}, {"score": 0.002323142666222693, "phrase": "burrows-wheeler_transform"}, {"score": 0.0021050037316719594, "phrase": "bwt"}], "paper_keywords": ["block-sorting", " Fibonacci strings", " data compression", " text compression", " BWT transformation"], "paper_abstract": "In this paper we focus on the combinatorial properties of the Fibonacci strings rotations. We first present a simple formula that, in constant time, determines the rank of any rotation (of a given Fibonacci string) in the lexicographically-sorted list of all rotations. We then use this information to deduce, also in constant time, the character that is stored at any one location of any given Fibonacci string. Finally, we study the output of the Burrows-Wheeler Transform (BWT) on Fibonacci strings to prove that when BWT is applied to Fibonacci strings it always produces a sequence of 'b's' followed by a sequence of 'a's'.", "paper_title": "Simple algorithm for sorting the Fibonacci string rotations", "paper_id": "WOS:000235805500019"}