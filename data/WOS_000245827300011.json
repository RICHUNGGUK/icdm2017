{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "linpack_benchmark"}, {"score": 0.0046834372388970405, "phrase": "new_scaling_formula"}, {"score": 0.004619027561771169, "phrase": "unpack_benchmark"}, {"score": 0.002843450389745497, "phrase": "fixed-time_constraint"}, {"score": 0.0028042741141125712, "phrase": "problem_size"}, {"score": 0.0027528751037412128, "phrase": "execution_time"}, {"score": 0.0026651772919894534, "phrase": "processors_changes"}, {"score": 0.002498053212249228, "phrase": "dimensional_analysis"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["performance analysis", " scaling", " self-similarity", " Linpack benchmark", " dimensional analysis", " pi theorem"], "paper_abstract": "Dimensional analysis yields a new scaling formula for the Unpack benchmark. The computational power r(p(0), q(0)) on a set of processors decomposed into a (p(0), q(0)) grid determines the computational power r(p, q) on a set of processors decomposed into a (p, q) grid by the formula r(p, q) = (p/p(0))(alpha)(q/q(0))(beta)r(p(0), q(0)). The two scaling parameters a and P measure interprocessor communication overhead required by the algorithm. A machine that scales perfectly corresponds to a = beta =1; a machine that scales not at all corresponds to alpha = beta = 0. We have determined the two scaling parameters by imposing a fixed-time constraint on the problem size such that the execution time remains constant as the number of processors changes. Results for a collection of machines confirm that the formula suggested by dimensional analysis is correct. Machines with the same values for these parameters are self-similar. They scale the same way even though the details of their specific hardware and software may be quite different. (c) 2007 Elsevier Inc. All rights reserved.", "paper_title": "A note on scaling the Linpack benchmark", "paper_id": "WOS:000245827300011"}