{"auto_keywords": [{"score": 0.04378244379633523, "phrase": "euclidean"}, {"score": 0.006633436905984702, "phrase": "hermite"}, {"score": 0.00481495049065317, "phrase": "lenstra-lenstra-lovasz_lattice_basis_reduction_algorithm"}, {"score": 0.004630910803911567, "phrase": "fundamental_tool"}, {"score": 0.004594951819987416, "phrase": "computational_number_theory"}, {"score": 0.004559270778306828, "phrase": "theoretical_computer_science"}, {"score": 0.0044192837023190445, "phrase": "efficient_algorithmic_version"}, {"score": 0.004384960761826366, "phrase": "hermite's_inequality"}, {"score": 0.004250302819248558, "phrase": "integer_d-dimensional_lattice_basis"}, {"score": 0.004071846628708832, "phrase": "n-dimensional_space"}, {"score": 0.003946766004066276, "phrase": "reduced_basis"}, {"score": 0.0036648265911110164, "phrase": "k-bit_integers"}, {"score": 0.0036221822903900725, "phrase": "worst-case_complexity"}, {"score": 0.0032727116186194584, "phrase": "tiny_dimension"}, {"score": 0.003196960816092101, "phrase": "floating-point_variants"}, {"score": 0.0031597433845085092, "phrase": "long-integer_arithmetic"}, {"score": 0.0031229578623834394, "phrase": "gram-schmidt_orthogonalization"}, {"score": 0.0030745737579268876, "phrase": "floating-point_arithmetic"}, {"score": 0.0029338597685088603, "phrase": "worst_case"}, {"score": 0.0027886573969044042, "phrase": "output_basis"}, {"score": 0.0024134449026937586, "phrase": "polynomial_time"}, {"score": 0.0022320551224679526, "phrase": "fast_integer_arithmetic"}, {"score": 0.0021215125099937663, "phrase": "euclid's_gcd_algorithm"}, {"score": 0.0021049977753042253, "phrase": "lagrange's_two-dimensional_algorithm"}], "paper_keywords": ["lattice reduction", " L(3)", " floating-point arithmetic"], "paper_abstract": "The Lenstra-Lenstra-Lovasz lattice basis reduction algorithm ( called LLL or L(3)) is a fundamental tool in computational number theory and theoretical computer science, which can be viewed as an efficient algorithmic version of Hermite's inequality on Hermite's constant. Given an integer d-dimensional lattice basis with vectors of Euclidean norm less than B in an n-dimensional space, the L(3) algorithm outputs a reduced basis in O(d(3)n log B.M(d log B)) bit operations, where M(k) denotes the time required to multiply k-bit integers. This worst-case complexity is problematic for applications where d or/and log B are often large. As a result, the original L(3) algorithm is almost never used in practice, except in tiny dimension. Instead, one applies floating-point variants where the long-integer arithmetic required by Gram-Schmidt orthogonalization is replaced by floating-point arithmetic. Unfortunately, this is known to be unstable in the worst case: the usual floating-point L(3) algorithm is not even guaranteed to terminate, and the output basis may not be L(3)-reduced at all. In this article, we introduce the L(2) algorithm, a new and natural floating-point variant of the L(3) algorithm which provably outputs L(3)-reduced bases in polynomial time O(d(2)n(d + log B) log B.M(d)). This is the first L(3) algorithm whose running time (without fast integer arithmetic) provably grows only quadratically with respect to log B, like Euclid's gcd algorithm and Lagrange's two-dimensional algorithm.", "paper_title": "AN LLL ALGORITHM WITH QUADRATIC COMPLEXITY", "paper_id": "WOS:000270193400004"}