{"auto_keywords": [{"score": 0.026929595936916597, "phrase": "tmosm"}, {"score": 0.00481495049065317, "phrase": "time-triggered_message-triggered_objects"}, {"score": 0.004737128456393743, "phrase": "linux"}, {"score": 0.004635187610736025, "phrase": "time-triggered_message-triggered_object"}, {"score": 0.004486432283770142, "phrase": "specification_scheme"}, {"score": 0.004225950334493496, "phrase": "conventional_object"}, {"score": 0.003980531478122155, "phrase": "computing_components"}, {"score": 0.003916098498242888, "phrase": "distributed_computing_applications"}, {"score": 0.0037087324991876727, "phrase": "natural_and_syntactically_small_but_semantically_powerful_extension"}, {"score": 0.0034554281349858836, "phrase": "natural_and_yet_precise_forms"}, {"score": 0.003362660648932244, "phrase": "data_and_function_components_of_high-_level_distributed_computing_objects"}, {"score": 0.003326254670954563, "phrase": "tmo"}, {"score": 0.0031329184724341592, "phrase": "efficient_middleware_architecture"}, {"score": 0.002719325177422626, "phrase": "microsoft_windows_platforms"}, {"score": 0.0022595316565074304, "phrase": "refined_tmosm"}, {"score": 0.0021631447601689444, "phrase": "efficient_adaptation"}], "paper_keywords": ["distributed computing", " real-time", " middleware", " TMO", " TMOSM", " Linux", " synchronization"], "paper_abstract": "The Time-triggered Message-triggered Object (TMO) programming and specification scheme came out of an effort to remove the limitations of conventional object structuring techniques in developing real-time (RT) distributed computing components and composing distributed computing applications out of such components and others. It is a natural and syntactically small but semantically powerful extension of the object oriented (OO) design and implementation techniques which allows the system designer to specify in natural and yet precise forms timing requirements imposed on data and function components of high- level distributed computing objects. TMO Support Middleware (TMOSM) was devised to be an efficient middleware architecture that can be easily adapted to many commercial-off-the-shelf (COTS) hardware + kernel operating system platforms to form efficient TMO execution engines. However, up until 2003, its adaptations were done for Microsoft Windows platforms only. As we have been developing and refining an adaptation of TMOSM to the Linux 2.6 operating system platform in recent years, TMOSM has been refined to possess further improved modularity and portability. This paper presents the refined TMOSM as well as the techniques developed for efficient adaptation of TMOSM to the Linux 2.6 platform.", "paper_title": "A middleware model supporting time-triggered message-triggered objects for standard Linux systems", "paper_id": "WOS:000247168600005"}