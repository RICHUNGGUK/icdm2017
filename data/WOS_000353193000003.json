{"auto_keywords": [{"score": 0.031217122597097954, "phrase": "prism."}, {"score": 0.00481495049065317, "phrase": "compact_and_understandable_counterexamples"}, {"score": 0.004723322467153553, "phrase": "violated_system_properties"}, {"score": 0.004589124394375718, "phrase": "essential_task"}, {"score": 0.004501774379030109, "phrase": "model_checking"}, {"score": 0.004208881856146758, "phrase": "probabilistic_systems"}, {"score": 0.003714368305523811, "phrase": "system's_states"}, {"score": 0.0034725269588525534, "phrase": "limited_use"}, {"score": 0.0034063576796640603, "phrase": "manual_debugging"}, {"score": 0.0031845067058084613, "phrase": "guarded_command_language"}, {"score": 0.002977061391551631, "phrase": "popular_model_checker"}, {"score": 0.002730023736069673, "phrase": "smallest_possible_subset"}, {"score": 0.002273605493468005, "phrase": "selected_commands"}, {"score": 0.0021049977753042253, "phrase": "well-understandable_counterexample"}], "paper_keywords": ["Probabilistic automata", " Counterexamples", " Guarded command language", " Mixed integer linear programming"], "paper_abstract": "Providing compact and understandable counterexamples for violated system properties is an essential task in model checking. Existing works on counterexamples for probabilistic systems so far computed either a large set of system runs or a subset of the system's states, both of which are of limited use in manual debugging. Many probabilistic systems are described in a guarded command language like the one used by the popular model checker PRISM. In this paper we describe how a smallest possible subset of the commands can be identified which together make the system erroneous. We additionally show how the selected commands can be further simplified to obtain a well-understandable counterexample.", "paper_title": "HIGH-LEVEL COUNTEREXAMPLES FOR PROBABILISTIC AUTOMATA", "paper_id": "WOS:000353193000003"}