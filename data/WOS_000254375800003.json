{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "lcs"}, {"score": 0.004715702140552199, "phrase": "lcs_problems"}, {"score": 0.00436890075128947, "phrase": "well-studied_longest_common_subsequence"}, {"score": 0.004161553532799662, "phrase": "recent_variant"}, {"score": 0.00401219980351761, "phrase": "clcs"}, {"score": 0.0038286491141253584, "phrase": "computed_lcs"}, {"score": 0.003621588555525458, "phrase": "third_given_string"}, {"score": 0.003378385493203297, "phrase": "efficient_algorithm"}, {"score": 0.003308649946463136, "phrase": "traditional_lcs_problem"}, {"score": 0.003086396772496527, "phrase": "total_number"}, {"score": 0.0030437652050982643, "phrase": "ordered_pairs"}, {"score": 0.0024876840172100567, "phrase": "clcs_problem"}, {"score": 0.002336655334451464, "phrase": "worst_case"}, {"score": 0.0021947755130109696, "phrase": "third_string"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["algorithms", " combinatorial problems", " longest common subsequence"], "paper_abstract": "In this paper, we study the classic and well-studied longest common subsequence (LCS) problem and a recent variant of it, namely the constrained LCS (CLCS) problem. In the CLCS problem, the computed LCS must also be a supersequence of a third given string. In this paper, we first present an efficient algorithm for the traditional LCS problem that runs in O(R log logn + n) time, where R is the total number of ordered pairs of positions at which the two strings match and n is the length of the two given strings. Then, using this algorithm, we devise an algorithm for the CLCS problem having time complexity 0(pR log log n + n) in the worst case, where p is the length of the third string. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "New efficient algorithms for the LCS and constrained LCS problems", "paper_id": "WOS:000254375800003"}