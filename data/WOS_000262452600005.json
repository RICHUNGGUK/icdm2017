{"auto_keywords": [{"score": 0.028565995450194916, "phrase": "final_programs"}, {"score": 0.00481495049065317, "phrase": "constructive_z."}, {"score": 0.004540734419151103, "phrase": "nondeterministic_programs"}, {"score": 0.00439777299939725, "phrase": "formal_specifications"}, {"score": 0.004191690483929023, "phrase": "z-based_formalism"}, {"score": 0.0035150223642728437, "phrase": "constructive_set_theory"}, {"score": 0.003332332086930163, "phrase": "classical_set_theory"}, {"score": 0.003314591878914152, "phrase": "z._we"}, {"score": 0.00304321897427383, "phrase": "formal_program_development_point"}, {"score": 0.002869613770219469, "phrase": "functional_programs"}, {"score": 0.0028391271282216758, "phrase": "z_specifications"}, {"score": 0.002720376476146181, "phrase": "initially_specified_nondeterminism"}, {"score": 0.0024578219177450876, "phrase": "initial_specifications"}, {"score": 0.0022928991183989115, "phrase": "new_formalism"}, {"score": 0.002185235873435714, "phrase": "nondeterministic_specifications"}, {"score": 0.0021049977753042253, "phrase": "initially_specified_modalities"}], "paper_keywords": ["formal specification", " formal program development", " constructive Z", " Martin-Lof's theory of types", " nondeterminism", " modalities of nondeterminism"], "paper_abstract": "The abstraction inherent in most specifications and the need to specify nondeterministic programs are two well-known sources of nondeterminism in formal specifications. In this paper, we present a Z-based formalism by which one can specify bounded, unbounded, erratic, angelic, demonic, loose, strict, singular, and plural nondeterminism. To interpret our specifications, we use a constructive set theory, called CZ set theory, instead of the classical set theory Z. We have chosen CZ since it allows us to investigate the notion of nondeterminism from the formal program development point of view. In this way, we formally construct functional programs from Z specifications and then probe the effects of the initially specified nondeterminism on final programs. Our investigation shows that without specifying nondeterminism explicitly, the effects of the nondeterminism involved in initial specifications will not be preserved in final programs. We prove that using the new formalism, proposed by this paper, for writing nondeterministic specifications leads to programs that preserve the initially specified modalities of nondeterminism.", "paper_title": "Nondeterminism in Constructive Z", "paper_id": "WOS:000262452600005"}