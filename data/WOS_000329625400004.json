{"auto_keywords": [{"score": 0.03466056219981681, "phrase": "base_code"}, {"score": 0.012412826889593843, "phrase": "aspectj"}, {"score": 0.011208786287335277, "phrase": "aspectj_programs"}, {"score": 0.00481495049065317, "phrase": "constraint-weaving_approach"}, {"score": 0.004678384952779725, "phrase": "aspectj._points-to"}, {"score": 0.004602085616330634, "phrase": "static_code_analysis_technique"}, {"score": 0.004416713079266374, "phrase": "allocated_objects"}, {"score": 0.004273782634394231, "phrase": "analysis_algorithms"}, {"score": 0.004186799638538032, "phrase": "procedural_and_object-oriented_languages"}, {"score": 0.004118597878584568, "phrase": "java"}, {"score": 0.003746673633703251, "phrase": "aspect-oriented_language"}, {"score": 0.0036553070575015344, "phrase": "crosscutting_concerns"}, {"score": 0.0035515148917169173, "phrase": "inter-type_declarations"}, {"score": 0.0031004173389196387, "phrase": "conservative_analysis"}, {"score": 0.0028670988845838296, "phrase": "context-sensitive_points-to_analysis_technique"}, {"score": 0.0027741761880779535, "phrase": "weaving_mechanism"}, {"score": 0.002728847267539957, "phrase": "ajpoints"}, {"score": 0.002431570196486513, "phrase": "iterative_manner"}, {"score": 0.0022484715639779153, "phrase": "abc_aspectj_compiler"}, {"score": 0.002193559776999383, "phrase": "twelve_aspectj_benchmark_programs"}, {"score": 0.002166607745253829, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "high_precision"}], "paper_keywords": ["points-to analysis", " context-sensitive analysis", " AspectJ"], "paper_abstract": "Points-to analysis is a static code analysis technique that establishes the relationships between variables of references and allocated objects. A number of points-to analysis algorithms have been proposed for procedural and object-oriented languages like C and Java, while few of them can be used for AspectJ as we know so far. One main reason is that AspectJ is an aspect-oriented language which implements the separation of crosscutting concerns by advices, pointcuts, and inter-type declarations, while a points-to analysis of AspectJ programs may be imprecise because any aspect woven into the base code may change the points-to relations in the program and thus a conservative analysis has to be taken in order to handle the aspects. In this paper, we propose a context-sensitive points-to analysis technique called AJPoints for AspectJ. Similar to the weaving mechanism for AspectJ, AJPoints obtains the constraints and templates on the points-to relations for the base code and the aspects, respectively, but weaves and solves them in an iterative manner in order to cross the boundary between the base code and the aspects. We have implemented AJPoints on abc AspectJ compiler and evaluated it by using twelve AspectJ benchmark programs. The experimental results show that our technique can achieve a high precision about points-to relations in AspectJ programs.", "paper_title": "A constraint-weaving approach to points-to analysis for AspectJ", "paper_id": "WOS:000329625400004"}