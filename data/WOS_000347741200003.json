{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "proxy_object"}, {"score": 0.004603115982404017, "phrase": "target_object"}, {"score": 0.004565609517511076, "phrase": "proxy_objects"}, {"score": 0.004509919457793852, "phrase": "widely_used_solution"}, {"score": 0.00447316895126645, "phrase": "different_scenarios"}, {"score": 0.004418601451254075, "phrase": "remote_method_invocation"}, {"score": 0.004382591802405206, "phrase": "future_objects"}, {"score": 0.004346874334971379, "phrase": "behavioral_reflection"}, {"score": 0.0043114466990006334, "phrase": "object_databases"}, {"score": 0.004276306563103443, "phrase": "inter-language_communications"}, {"score": 0.004206879557938045, "phrase": "access_control"}, {"score": 0.0041725881174377345, "phrase": "lazy_or_parallel_evaluation"}, {"score": 0.003988901168289797, "phrase": "regular_objects"}, {"score": 0.003813269577615793, "phrase": "important_role"}, {"score": 0.0037667216301666196, "phrase": "runtime_infrastructure"}, {"score": 0.0034990853199511982, "phrase": "significant_overhead"}, {"score": 0.003290591812800382, "phrase": "proxy_implementations"}, {"score": 0.0031714880645482496, "phrase": "clear_separation"}, {"score": 0.0027365364488693656, "phrase": "pharo_programming_language"}, {"score": 0.0026920404458807444, "phrase": "low_memory_consuming_proxies"}, {"score": 0.002157433262687853, "phrase": "method_execution"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Object-oriented programming and design", " Message passing control", " Proxy", " Interception", " Smalltalk"], "paper_abstract": "A proxy object is a surrogate or placeholder that controls access to another target object. Proxy objects are a widely used solution for different scenarios such as remote method invocation, future objects, behavioral reflection, object databases, inter-language communications and bindings, access control, lazy or parallel evaluation, security, among others. Most proxy implementations support proxies for regular objects but are unable to create proxies for objects with an important role in the runtime infrastructure such as classes or methods. Proxies can be complex to install, they can have a significant overhead, they can be limited to certain kind of classes, etc. Moreover, proxy implementations are often not stratified and there is no clear separation between proxies (the objects intercepting messages) and handlers (the objects handling interceptions). In this paper, we present Ghost: a uniform and general-purpose proxy implementation for the Pharo programming language. Ghost provides low memory consuming proxies for regular objects as well as for classes and methods. When a proxy takes the place of a class, it intercepts both the messages received by the class and the lookup of methods for messages received by its instances. Similarly, if a proxy takes the place of a method, then the method execution is intercepted too.(C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Ghost: A uniform and general-purpose proxy implementation", "paper_id": "WOS:000347741200003"}