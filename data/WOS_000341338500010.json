{"auto_keywords": [{"score": 0.03559770831126075, "phrase": "design_alternatives"}, {"score": 0.00481495049065317, "phrase": "guilt-based_handling"}, {"score": 0.004681971826924847, "phrase": "palladio_architectural_models"}, {"score": 0.004426882270402403, "phrase": "recurring_solutions"}, {"score": 0.004385733482617193, "phrase": "common_design_problems"}, {"score": 0.004264558080356621, "phrase": "common_performance_problems"}, {"score": 0.003976007772514762, "phrase": "software_properties"}, {"score": 0.0036553070575015344, "phrase": "software_architects"}, {"score": 0.003570889780957037, "phrase": "performance_antipatterns"}, {"score": 0.003504756881063581, "phrase": "software_performance_feedback"}, {"score": 0.00329813918116714, "phrase": "detected_performance_problems"}, {"score": 0.0032522091171602557, "phrase": "feedback_process"}, {"score": 0.0030319482153908037, "phrase": "architectural_model"}, {"score": 0.0029618842673339173, "phrase": "end-user_expectations"}, {"score": 0.0028265625216338875, "phrase": "ranking_methodology"}, {"score": 0.002722758109991685, "phrase": "detected_antipatterns"}, {"score": 0.002684819249720834, "phrase": "\"guilty\"_ones"}, {"score": 0.0025264171945423254, "phrase": "specific_performance_requirements"}, {"score": 0.00237733844863506, "phrase": "desired_performance_improvement"}, {"score": 0.002333258365963461, "phrase": "consistent_part"}, {"score": 0.0022686625017583387, "phrase": "different_application_domains"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software performance antipatterns", " Architectural feedback", " Palladio architectural models"], "paper_abstract": "Antipatterns are conceptually similar to patterns in that they document recurring solutions to common design problems. Software performance antipatterns document common performance problems in the design as well as their solutions. The definition of performance antipatterns concerns software properties that can include static, dynamic, and deployment aspects. To make use of such knowledge, we propose an approach that helps software architects to identify and solve performance antipatterns. Our approach provides software performance feedback to architects, since it suggests the design alternatives that allow overcoming the detected performance problems. The feedback process may be quite complex since architects may have to assess several design options before achieving the architectural model that best fits the end-user expectations. In order to optimise such process we introduce a ranking methodology that identifies, among a set of detected antipatterns, the \"guilty\" ones, i.e. the antipatterns that more likely contribute to the violation of specific performance requirements. The introduction of our ranking process leads the system to converge towards the desired performance improvement by discarding a consistent part of design alternatives. Four case studies in different application domains have been used to assess the validity of the approach. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Guilt-based handling of software performance antipatterns in palladio architectural models", "paper_id": "WOS:000341338500010"}