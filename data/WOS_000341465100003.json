{"auto_keywords": [{"score": 0.049754507386661914, "phrase": "multioutput_stages"}, {"score": 0.041996689288621714, "phrase": "pipeline_parallelism"}, {"score": 0.02932294220356544, "phrase": "multioutput_filter"}, {"score": 0.00481495049065317, "phrase": "different_task_implementations"}, {"score": 0.004749913509007163, "phrase": "non-trivial_parallel_pipeline_applications"}, {"score": 0.004606814806060921, "phrase": "intel"}, {"score": 0.00457553517865013, "phrase": "threading_building_blocks"}, {"score": 0.004483120978156604, "phrase": "promising_tools"}, {"score": 0.004392565073466714, "phrase": "parallel_code"}, {"score": 0.004347972379250724, "phrase": "productive_way"}, {"score": 0.004289215825521407, "phrase": "high-level_constructors"}, {"score": 0.004174064076143015, "phrase": "system_resources"}, {"score": 0.004034444399739595, "phrase": "task_parallelism"}, {"score": 0.003926105480202798, "phrase": "increasingly_popular_parallel_programming_pattern"}, {"score": 0.003820664678548735, "phrase": "digital_signal_processing"}, {"score": 0.00369282653472922, "phrase": "tbb"}, {"score": 0.0036553070575015344, "phrase": "high-level_template"}, {"score": 0.003520971639466546, "phrase": "simple_pipeline_structures"}, {"score": 0.003438058620195309, "phrase": "non-trivial_parallel_pipeline_structures"}, {"score": 0.0032336801561165113, "phrase": "current_tbb_pipeline_template"}, {"score": 0.0030936482163040823, "phrase": "new_multioutput_filter"}, {"score": 0.0030207674474548403, "phrase": "tbb_pipeline_framework"}, {"score": 0.002939568952175845, "phrase": "real_world_streaming_applications"}, {"score": 0.0029196116767956273, "phrase": "different_computational_domains"}, {"score": 0.0027366287564324966, "phrase": "tbb_pipeline_template"}, {"score": 0.002618064695883914, "phrase": "new_analytical_models"}, {"score": 0.002547663224855668, "phrase": "resources_utilization"}, {"score": 0.0025046245057922557, "phrase": "performance_evaluation"}, {"score": 0.00235560370536971, "phrase": "finer_task_parallelism"}, {"score": 0.002292243761395491, "phrase": "tbb_task-stealing_mechanism"}, {"score": 0.0021484955960643167, "phrase": "task_management"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Tasks library", " Parallel pipeline", " Multioutput", " Analytical model"], "paper_abstract": "Task-based libraries, such as Intel's Threading Building Blocks (TBB), are promising tools that help programmers to develop parallel code in a productive way, thanks to high-level constructors which simplify the chore of efficiently exploiting system resources. In this paper we focus on one type of task parallelism, pipeline parallelism, which is becoming an increasingly popular parallel programming pattern for streaming applications in the domain of digital signal processing, graphics, compression and encryption. Specifically, TBB provides a high-level template to express pipeline parallelism, but it is limited to representing simple pipeline structures. We address the issue of non-trivial parallel pipeline structures in which one or more stages in the pipeline have more items leaving than arriving, a problem for which the current TBB pipeline template does not provide support. In this work, we describe a new Multioutput filter that we have incorporated into the TBB pipeline framework to deal with these multioutput stages. Using real world streaming applications from different computational domains (dedup and scenerecog), we also compare the performance of our implementation using the Multioutput filter in the TBB pipeline template to other more complex TBB task-based implementations that only use the standard filters. We also develop new analytical models for each implementation to better understand the resources utilization in each case. Performance evaluation and analysis shows that the implementation based on the Multioutput filter outperforms the other solutions because: it promotes finer task parallelism, which is more suited to the TBB task-stealing mechanism in order to better exploit the resources; and it also reduces the overheads related to memory and task management. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A case study of different task implementations for multioutput stages in non-trivial parallel pipeline applications", "paper_id": "WOS:000341465100003"}