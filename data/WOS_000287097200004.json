{"auto_keywords": [{"score": 0.048912784012203225, "phrase": "cit"}, {"score": 0.04177513292668134, "phrase": "greedy_algorithms"}, {"score": 0.04047238336625163, "phrase": "feature_constraints"}, {"score": 0.00481495049065317, "phrase": "meta-heuristic_search"}, {"score": 0.004775531918452571, "phrase": "constrained_interaction_testing"}, {"score": 0.004736434518535051, "phrase": "combinatorial_interaction_testing"}, {"score": 0.004621043537046209, "phrase": "cost-effective_sampling_technique"}, {"score": 0.0045084510240032535, "phrase": "highly-configurable_systems"}, {"score": 0.004067977399245212, "phrase": "real-world_software"}, {"score": 0.0039362878637371574, "phrase": "cit_samples"}, {"score": 0.0037621210719690594, "phrase": "single_system_configuration"}, {"score": 0.003700709435644458, "phrase": "greedy_techniques"}, {"score": 0.0036402965997795536, "phrase": "meta-heuristic_algorithms"}, {"score": 0.0035515148917169173, "phrase": "larger_samples"}, {"score": 0.00338037259057507, "phrase": "current_meta-heuristic_algorithms"}, {"score": 0.003074991770768925, "phrase": "testing_configurations"}, {"score": 0.0030497740719977835, "phrase": "important_factors"}, {"score": 0.0029027394930867902, "phrase": "simulated_annealing"}, {"score": 0.0027514186391258263, "phrase": "algorithmic_changes"}, {"score": 0.002618730478351454, "phrase": "unconstrained_problems"}, {"score": 0.002431570196486513, "phrase": "run_time"}, {"score": 0.002323826502178581, "phrase": "even_fewer_system_configurations"}, {"score": 0.002276439636865258, "phrase": "new_version"}, {"score": 0.002220846338732873, "phrase": "real-world_problems"}, {"score": 0.002139986159978777, "phrase": "constrained_problems"}, {"score": 0.0021049977753042253, "phrase": "similar_advantages"}], "paper_keywords": ["Constrained combinatorial interaction testing", " Configurable software", " Search based software engineering"], "paper_abstract": "Combinatorial interaction testing (CIT) is a cost-effective sampling technique for discovering interaction faults in highly-configurable systems. Constrained CIT extends the technique to situations where some features cannot coexist in a configuration, and is therefore more applicable to real-world software. Recent work on greedy algorithms to build CIT samples now efficiently supports these feature constraints. But when testing a single system configuration is expensive, greedy techniques perform worse than meta-heuristic algorithms, because greedy algorithms generally need larger samples to exercise the same set of interactions. On the other hand, current meta-heuristic algorithms have long run times when feature constraints are present. Neither class of algorithm is suitable when both constraints and the cost of testing configurations are important factors. Therefore, we reformulate one meta-heuristic search algorithm for constructing CIT samples, simulated annealing, to more efficiently incorporate constraints. We identify a set of algorithmic changes and experiment with our modifications on 35 realistic constrained problems and on a set of unconstrained problems from the literature to isolate the factors that improve performance. Our evaluation determines that the optimizations reduce run time by a factor of 90 and accomplish the same coverage objectives with even fewer system configurations. Furthermore, the new version compares favorably with greedy algorithms on real-world problems, and, though our modifications were aimed at constrained problems, it shows similar advantages when feature constraints are absent.", "paper_title": "Evaluating improvements to a meta-heuristic search for constrained interaction testing", "paper_id": "WOS:000287097200004"}