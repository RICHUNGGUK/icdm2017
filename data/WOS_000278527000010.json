{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "volunteer_computing_systems"}, {"score": 0.004755054742217193, "phrase": "performance_perturbations"}, {"score": 0.004666598697538815, "phrase": "natural_phenomenon"}, {"score": 0.004522796947899013, "phrase": "parallel_applications"}, {"score": 0.004328856052035968, "phrase": "new_challenge"}, {"score": 0.003940706575253453, "phrase": "best_task-resource_matches"}, {"score": 0.0035648266669315943, "phrase": "proactive_reallocation"}, {"score": 0.0034984340449789745, "phrase": "schedule_expansion"}, {"score": 0.0034118234596993836, "phrase": "output_schedules"}, {"score": 0.0032858981413454802, "phrase": "performance_degradation"}, {"score": 0.0029722900280316216, "phrase": "possible_rescheduling"}, {"score": 0.002935248513348432, "phrase": "additional_volunteer_computing_resources"}, {"score": 0.002671722386856879, "phrase": "minimum_relative_allowable_delay_time"}, {"score": 0.00262191949451482, "phrase": "allocated_volunteer_resources"}, {"score": 0.0025892330566358503, "phrase": "allowable_delay_times"}, {"score": 0.002509284173541882, "phrase": "precedence_constraints"}, {"score": 0.0023419588513908783, "phrase": "extensive_set"}, {"score": 0.002255431275670053, "phrase": "simulation_results"}, {"score": 0.0021049977753042253, "phrase": "resulting_schedules"}], "paper_keywords": ["Scheduling", " Volunteer computing", " Robustness", " Resource allocation", " Distributed systems"], "paper_abstract": "Performance perturbations are a natural phenomenon in volunteer computing systems. Scheduling parallel applications with precedence-constraints is emerging as a new challenge in these systems. In this paper, we propose two novel robust task scheduling heuristics, which identify best task-resource matches in terms of makespan and robustness. Our approach for both heuristics is based on a proactive reallocation (or schedule expansion) scheme enabling output schedules to tolerate a certain degree of performance degradation. Schedules are initially generated by focusing on their makespan. These schedules are scrutinized for possible rescheduling using additional volunteer computing resources to increase their robustness. Specifically, their robustness is improved by maximizing either the total allowable delay time or the minimum relative allowable delay time over all allocated volunteer resources. Allowable delay times may occur due to precedence constraints. In this paper, two proposed heuristics are evaluated with an extensive set of simulations. Based on simulation results, our approach significantly contributes to improving the robustness of the resulting schedules.", "paper_title": "Robust task scheduling for volunteer computing systems", "paper_id": "WOS:000278527000010"}