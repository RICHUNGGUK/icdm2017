{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "confused_deputy_vulnerability"}, {"score": 0.0047707093928203, "phrase": "android_applications"}, {"score": 0.0047051051659828275, "phrase": "enormous_number"}, {"score": 0.004555561895858525, "phrase": "android"}, {"score": 0.004096493540086106, "phrase": "booming_amounts"}, {"score": 0.0040215052006051235, "phrase": "poorly_designed_applications"}, {"score": 0.003966162568548304, "phrase": "security_vulnerabilities"}, {"score": 0.0038756055612167942, "phrase": "users'_security"}, {"score": 0.0036496814103475174, "phrase": "recently_reported_application_vulnerability"}, {"score": 0.0035010071030752883, "phrase": "privilege_escalation_vulnerability"}, {"score": 0.0034052594710793664, "phrase": "unauthorized_operations"}, {"score": 0.0032665093519968083, "phrase": "novel_system"}, {"score": 0.0032364494905485677, "phrase": "code-level_static_analysis"}, {"score": 0.003118942369691329, "phrase": "possible_confused_deputy_vulnerabilities"}, {"score": 0.003061793572858598, "phrase": "analysis_challenges"}, {"score": 0.0030196181347744372, "phrase": "android's_component-based_programming_paradigm"}, {"score": 0.0029642838574678526, "phrase": "special_control_flow_graph_construction_techniques"}, {"score": 0.0026775328564629577, "phrase": "paddyfrog"}, {"score": 0.0025448622455819104, "phrase": "china"}, {"score": 0.0023851187337905412, "phrase": "median_execution_time"}, {"score": 0.002174303033371867, "phrase": "applications_testing_scenarios"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["static analysis", " confused deputy attack", " privilege escalation attack", " control flow graph"], "paper_abstract": "An enormous number of applications have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, it is obvious that more vulnerabilities would appear along with the booming amounts of applications. Poorly designed applications may contain security vulnerabilities that can dramatically undermine users' security and privacy. In this paper, we studied a kind of recently reported application vulnerability named confused deputy - a specific type of privilege escalation vulnerability, which can result in unauthorized operations, and so on. We proposed a novel system with code-level static analysis to analyze the applications and automatically detect possible confused deputy vulnerabilities. To tackle analysis challenges imposed by Android's component-based programming paradigm, we employed special control flow graph construction techniques to build call relations among components and function call graph within components. We developed a prototype of this system named PaddyFrog and evaluated with 7190 real world Android applications from two of the most popular markets in China. We found 1240 applications with confused deputy vulnerability and proved to be exploitable. The median execution time of this system on an application is 14.4s, which is fast enough to be used in volumes of applications testing scenarios. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "PaddyFrog: systematically detecting confused deputy vulnerability in Android applications", "paper_id": "WOS:000358692600015"}