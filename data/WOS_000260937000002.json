{"auto_keywords": [{"score": 0.04916809664432024, "phrase": "concurrent_object"}, {"score": 0.00924552024516748, "phrase": "concurrent_programs"}, {"score": 0.00481495049065317, "phrase": "j-like_languages"}, {"score": 0.00433200902751133, "phrase": "programmer's_mind"}, {"score": 0.004181997052907647, "phrase": "j_ava-like_languages"}, {"score": 0.0039729853486821995, "phrase": "object's_behavior"}, {"score": 0.0035513449460436177, "phrase": "state_transition_statements"}, {"score": 0.0032256239062596944, "phrase": "object's_class"}, {"score": 0.002730023736069673, "phrase": "popular_examples"}, {"score": 0.0026184796288543878, "phrase": "effect_system"}, {"score": 0.0023934306706217797, "phrase": "current_state"}, {"score": 0.00220177373403577, "phrase": "latter_guarantee"}, {"score": 0.002125371638869951, "phrase": "accidental_violations"}, {"score": 0.0021049977753042253, "phrase": "intended_coordination_protocol"}], "paper_keywords": [""], "paper_abstract": "The state of a concurrent object, intended as some abstraction over the values of the fields of the object, usually determines its coordination behavior. Therefore, state is always in the programmer's mind, even though implicitly. We suggest a feature for J ava-like languages, which makes the state of a concurrent object explicit and supports the expression of the object's behavior depending on the state it is currently in. Namely, an object will be in one of the states declared in its class. The state determines the presence of fields and methods. State transition statements explicitly change the state of an object, and thus change the availability of fields and methods. When a thread calls a method which is declared in the object's class but absent from its current state, it waits, until the state of the object changes to a state which does contain that method. This directly expresses coordination. We claim that this feature makes it easier to understand and develop concurrent programs, and substantiate our claim through the discussion of some popular examples of concurrent programs written using this feature.We develop a type and effect system, which guarantees that, during execution of a method invoked on a concurrent object. No attempt will be made to access fields not available in the current state of and (2) No method invoked on a receiver (syntactically) different from may cause the invocation of a method on the latter guarantee helps to enforce the former and prevents a family of accidental violations of the intended coordination protocol.", "paper_title": "A type safe state abstraction for coordination in J-like languages", "paper_id": "WOS:000260937000002"}