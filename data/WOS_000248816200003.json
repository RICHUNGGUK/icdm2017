{"auto_keywords": [{"score": 0.028162834940965262, "phrase": "gp"}, {"score": 0.02322623587239605, "phrase": "external_interactions"}, {"score": 0.009531077234795852, "phrase": "source_code"}, {"score": 0.007574584632712596, "phrase": "software_clones"}, {"score": 0.0047313464483758364, "phrase": "initial_investigations"}, {"score": 0.004662781189062896, "phrase": "genetic_programming_technology"}, {"score": 0.0045418465969859064, "phrase": "existing_approaches"}, {"score": 0.004502232973788714, "phrase": "software_life-cycle"}, {"score": 0.004411133688356589, "phrase": "new_direction"}, {"score": 0.004385444037750123, "phrase": "production_techniques-software_cloning"}, {"score": 0.003856483559039742, "phrase": "original_system"}, {"score": 0.0033127168183223876, "phrase": "fundamental_technology"}, {"score": 0.0032456080226031417, "phrase": "software_engineering_environment"}, {"score": 0.0029730145140038334, "phrase": "interesting_approach"}, {"score": 0.002947043609853674, "phrase": "automatic_production"}, {"score": 0.002929855464610305, "phrase": "generation_problem"}, {"score": 0.0028873211377922234, "phrase": "evolutionary-based_genetic_programming"}, {"score": 0.0027959005260730827, "phrase": "crossover_and_mutation"}, {"score": 0.0027312312158843683, "phrase": "specific_requirements"}, {"score": 0.0026293100787580116, "phrase": "flexible_and_powerful_algorithm"}, {"score": 0.0025760099091886165, "phrase": "different_problems"}, {"score": 0.002394299529213776, "phrase": "clone_generation"}, {"score": 0.0021173571273465416, "phrase": "possible_usability"}, {"score": 0.0021049977753042253, "phrase": "gp-based_approach"}], "paper_keywords": ["software cloning", " automatic programming", " genetic programming", " complexity", " testing", " software mutants", " fault tolerance"], "paper_abstract": "This paper discusses some initial investigations into the application of genetic programming technology as a vehicle for re-examining some existing approaches within the software life-cycle. Specifically, it outlines a new direction in production techniques-software cloning from executable specifications or source code. It explores the possibility and advantages of producing a system from its external interactions. To allow this production to be automatic, the system assumes that it can view (and potentially manipulate) these external interactions of the original system; and hence it assumes the existence of either an executable specification or the source code-an object to assist in the generation of the external interactions; i.e. the system is treated as a black-box. Although the generation and application of software clones is relatively unexplored, it is believed that this is a fundamental technology that can have many different applications within a software engineering environment. For example, software clones could be used in: complexity measurement, software testing and software fault tolerance. Clearly, for these clones to be usable, their production needs to be automated. An interesting approach to this automatic production or generation problem is the application of evolutionary-based Genetic Programming (GP). Using the paradigms of best fit, selection, crossover and mutation, a number of clones, satisfying specific requirements, can be automatically generated. In general, GP is a flexible and powerful algorithm suitable for solving a variety of different problems. This paper presents the results of studies that have been conducted in order to answer questions related to feasibility of using GP for clone generation: what features of GP are important? What works and what does not? How can the GP be \"tuned\" for the problem? The results have been used to draw a set of suggestions and conclusions that indicate possible usability of GP-based approach to automatic generation of clones.", "paper_title": "On the possibilities of (pseudo-) software cloning from external interactions", "paper_id": "WOS:000248816200003"}