{"auto_keywords": [{"score": 0.028853878748543525, "phrase": "ilp"}, {"score": 0.00481495049065317, "phrase": "custom_processors"}, {"score": 0.004685855684376706, "phrase": "fast_instruction_synthesis"}, {"score": 0.004462105963334103, "phrase": "automatic_generation"}, {"score": 0.004413846562278824, "phrase": "custom_instruction_processors"}, {"score": 0.004366106816225457, "phrase": "high-level_application_descriptions"}, {"score": 0.004295459433506106, "phrase": "fast_design_space_exploration"}, {"score": 0.004157561334726201, "phrase": "novel_methods"}, {"score": 0.0038737214010638745, "phrase": "high-level_language"}, {"score": 0.0037697665240643066, "phrase": "custom_instruction_candidates"}, {"score": 0.0036091892088392775, "phrase": "maximal_convex_subgraphs"}, {"score": 0.0035701213515857227, "phrase": "application_data_flow_graphs"}, {"score": 0.0034742854447532678, "phrase": "integer_linear_programming"}, {"score": 0.003308195943172624, "phrase": "ten_multimedia"}, {"score": 0.003272375502853897, "phrase": "cryptography_benchmarks"}, {"score": 0.0028096544129939277, "phrase": "longest_enumeration"}, {"score": 0.0025472634689904772, "phrase": "complementary_solution_technique"}, {"score": 0.002412204754253618, "phrase": "multiple_different_merit_functions"}, {"score": 0.002347378595930709, "phrase": "data-flow_subgraphs"}, {"score": 0.0021049977753042253, "phrase": "single-issue_base_processor"}], "paper_keywords": ["Custom processors", " design automation", " design optimization", " graph theory", " mathematical programming", " subgraph enumeration", " system-on-chip (SoC)"], "paper_abstract": "This paper presents Fast Instruction SyntHesis (FISH), a system that supports automatic generation of custom instruction processors from high-level application descriptions to enable fast design space exploration. FISH is based on novel methods for automatically adapting the instruction set to match an application in a high-level language such as C or C++. FISH identifies custom instruction candidates using two approaches: 1) by enumerating maximal convex subgraphs of application data flow graphs and 2) by integer linear programming (ILP). The experiments, involving ten multimedia and cryptography benchmarks, show that our contributed algorithms are the fastest among the state-of-the-art techniques. In most cases, enumeration takes only milliseconds to execute. The longest enumeration run-time observed is less than six seconds. ILP is usually slower than enumeration, but provides us with a complementary solution technique. Both enumeration and ILP allow the use of multiple different merit functions in the evaluation of data-flow subgraphs. The experiments demonstrate that, using only modest additional hardware resources, up to 30-fold performance improvement can be obtained with respect to a single-issue base processor.", "paper_title": "FISH: Fast Instruction SyntHesis for Custom Processors", "paper_id": "WOS:000299560300006"}