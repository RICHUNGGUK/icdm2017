{"auto_keywords": [{"score": 0.030907758140694935, "phrase": "aprils"}, {"score": 0.008713768692145006, "phrase": "iterated_local_search"}, {"score": 0.008636590187812489, "phrase": "dynamic_job_shop_scheduling"}, {"score": 0.006730477791107826, "phrase": "tgp"}, {"score": 0.004523103062368843, "phrase": "sequencing_and_scheduling_decisions"}, {"score": 0.0044430006374681285, "phrase": "specific_characteristics"}, {"score": 0.004383852039913171, "phrase": "manufacturing_system"}, {"score": 0.004287008195370748, "phrase": "universal_dispatching_rule"}, {"score": 0.003902992784453769, "phrase": "scheduling_performance"}, {"score": 0.0038510053729959074, "phrase": "manufacturing_environment"}, {"score": 0.0038167308978417306, "phrase": "evolutionary_computation"}, {"score": 0.0037490909410974166, "phrase": "tree-based_genetic_programming"}, {"score": 0.003666217992454448, "phrase": "gene_expression_programming"}, {"score": 0.003505908076430666, "phrase": "design_task"}, {"score": 0.003474694300991964, "phrase": "automatic_design"}, {"score": 0.0032492519841546682, "phrase": "low_exploitation_ability"}, {"score": 0.003107117564014497, "phrase": "new_approach"}, {"score": 0.0030794433253250476, "phrase": "automatic_programming"}, {"score": 0.002944715025443487, "phrase": "key_idea"}, {"score": 0.0028667159745494933, "phrase": "multiple_local_searches"}, {"score": 0.002778317177178732, "phrase": "best_obtained_programs"}, {"score": 0.0026330576988862734, "phrase": "gep"}, {"score": 0.0023437863565921053, "phrase": "genetic_programming"}, {"score": 0.002221192647477371, "phrase": "good_performance"}], "paper_keywords": ["Dynamic job shop scheduling", " genetic programming", " hyper-heuristic", " scheduling rule"], "paper_abstract": "Dispatching rules have been commonly used in practice for making sequencing and scheduling decisions. Due to specific characteristics of each manufacturing system, there is no universal dispatching rule that can dominate in all situations. Therefore, it is important to design specialized dispatching rules to enhance the scheduling performance for each manufacturing environment. Evolutionary computation approaches such as tree-based genetic programming (TGP) and gene expression programming (GEP) have been proposed to facilitate the design task through automatic design of dispatching rules. However, these methods are still limited by their high computational cost and low exploitation ability. To overcome this problem, we develop a new approach to automatic programming via iterated local search (APRILS) for dynamic job shop scheduling. The key idea of APRILS is to perform multiple local searches started with programs modified from the best obtained programs so far. The experiments show that APRILS outperforms TGP and GEP in most simulation scenarios in terms of effectiveness and efficiency. The analysis also shows that programs generated by APRILS are more compact than those obtained by genetic programming. An investigation of the behavior of APRILS suggests that the good performance of APRILS comes from the balance between exploration and exploitation in its search mechanism.", "paper_title": "Automatic Programming via Iterated Local Search for Dynamic Job Shop Scheduling", "paper_id": "WOS:000346734300001"}