{"auto_keywords": [{"score": 0.03662714370496838, "phrase": "two-dimensional_state_transition_table"}, {"score": 0.03297082524138952, "phrase": "stateful_pre-filter"}, {"score": 0.00481495049065317, "phrase": "high_throughput_performance"}, {"score": 0.004668059458774745, "phrase": "pattern-matching_techniques"}, {"score": 0.004525629293824217, "phrase": "network_security_applications"}, {"score": 0.004456044928556639, "phrase": "intrusion_detection"}, {"score": 0.004410248125081398, "phrase": "virus_protection"}, {"score": 0.004342430078306461, "phrase": "spam_filters"}, {"score": 0.004081385289516914, "phrase": "worst-case_performance_guarantee"}, {"score": 0.0039772848945723435, "phrase": "transmission_technologies"}, {"score": 0.0038959121068990517, "phrase": "ac_algorithm"}, {"score": 0.0037769520261285872, "phrase": "transmission_speeds"}, {"score": 0.0037381083634085424, "phrase": "high-speed_networks"}, {"score": 0.0035866734383189366, "phrase": "huge_amount"}, {"score": 0.0031845067058084583, "phrase": "pattern-matching_architecture"}, {"score": 0.003071274938566466, "phrase": "ac-based_verification_engine"}, {"score": 0.0028273061946184645, "phrase": "previous_query_results"}, {"score": 0.00226322835801988, "phrase": "total_length"}, {"score": 0.0022168460543913787, "phrase": "previous_designs"}, {"score": 0.0021601997088758957, "phrase": "significant_improvement"}, {"score": 0.002126907587540404, "phrase": "throughput_performance"}, {"score": 0.0021049977753042253, "phrase": "memory_usage"}], "paper_keywords": ["Aho-Corasick (AC) algorithm", " Bloom filter", " deep packet inspection", " pattern matching"], "paper_abstract": "Pattern-matching techniques have recently been applied to network security applications such as intrusion detection, virus protection, and spam filters. The widely used Aho-Corasick (AC) algorithm can simultaneously match multiple patterns while providing a worst-case performance guarantee. However, as transmission technologies improve, the AC algorithm cannot keep up with transmission speeds in high-speed networks. Moreover, it may require a huge amount of space to store a two-dimensional state transition table when the total length of patterns is large. In this paper, we present a pattern-matching architecture consisting of a stateful pre-filter and an AC-based verification engine. The stateful pre-filter is optimal in the sense that it is equivalent to utilizing all previous query results. In addition, the filter can be easily realized with bitmaps and simple bitwise-AND and shift operations. The size of the two-dimensional state transition table in our proposed architecture is proportional to the number of patterns, as opposed to the total length of patterns in previous designs. Our proposed architecture achieves a significant improvement in both throughput performance and memory usage.", "paper_title": "A Pattern-Matching Scheme With High Throughput Performance and Low Memory Requirement", "paper_id": "WOS:000323513000007"}