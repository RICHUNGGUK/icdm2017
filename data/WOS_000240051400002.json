{"auto_keywords": [{"score": 0.04265136331468511, "phrase": "procedural_semantics"}, {"score": 0.038769847507469174, "phrase": "intended_interpretations"}, {"score": 0.00481495049065317, "phrase": "logic_programmers"}, {"score": 0.004706206193274572, "phrase": "simpler_way"}, {"score": 0.004428025469002531, "phrase": "logic_programs"}, {"score": 0.004377719094086111, "phrase": "strong_links"}, {"score": 0.004311527998148399, "phrase": "theoretic_semantics"}, {"score": 0.0041662189933067, "phrase": "programmer's_interpretation"}, {"score": 0.003995277448695851, "phrase": "sld"}, {"score": 0.003934795713147731, "phrase": "fixpoint_semantics"}, {"score": 0.0038458526450015976, "phrase": "program_analysis"}, {"score": 0.0038166522763373434, "phrase": "alternative_execution_mechanisms"}, {"score": 0.0036183419672924095, "phrase": "ground_atom"}, {"score": 0.0027812405653371503, "phrase": "three-valued_semantics"}, {"score": 0.002537880772794665, "phrase": "third_truth_value"}, {"score": 0.0023784664152543718, "phrase": "unnatural_precision"}, {"score": 0.002360381056508366, "phrase": "undue_restrictions"}, {"score": 0.0023424328921363585, "phrase": "programming_style"}, {"score": 0.0022981559278396845, "phrase": "theoretical_results"}, {"score": 0.0022547140008848912, "phrase": "programmer-oriented_synopsis"}, {"score": 0.0021702728407945976, "phrase": "declarative_debugging"}, {"score": 0.0021049977753042253, "phrase": "inadmissible_calls"}], "paper_keywords": ["models", " immediate consequence operator", " SLDNF resolution", " negation", " verification", " declarative debugging", " inadmissibility"], "paper_abstract": "This paper describes a simpler way for programmers to reason about the correctness of their code. The study of semantics of logic programs has shown strong links between the model theoretic semantics (truth and falsity of atoms in the programmer's interpretation of a program), procedural semantics (for example, SLD resolution) and fixpoint semantics (which is useful for program analysis and alternative execution mechanisms). Most of this work assumes that intended interpretations are two-valued: a ground atom is true (and should succeed according to the procedural semantics) or false (and should not succeed). In reality, intended interpretations are less precise. Programmers consider that some atoms \"should not occur\" or are \"ill-typed\" or \"inadmissible\". Programmers don't know and don't care whether such atoms succeed. In this paper we propose a three-valued semantics for (essentially) pure Prolog programs with (ground) negation as failure which reflects this. The semantics of Fitting is similar but only associates the third truth value with non-termination. We provide tools to reason about correctness of programs without the need for unnatural precision or undue restrictions on programming style. As well as theoretical results, we provide a programmer-oriented synopsis. This work has come out of work on declarative debugging, where it has been recognised that inadmissible calls are important.", "paper_title": "A three-valued semantics for logic programmers", "paper_id": "WOS:000240051400002"}