{"auto_keywords": [{"score": 0.03874050686675407, "phrase": "synoptech"}, {"score": 0.007628781577779954, "phrase": "structural_synopsis"}, {"score": 0.0071567812255345885, "phrase": "sampling_algorithm"}, {"score": 0.00481495049065317, "phrase": "xml_queries"}, {"score": 0.004653900688892822, "phrase": "increasing_popularity"}, {"score": 0.004608879242346434, "phrase": "xml_database_applications"}, {"score": 0.004498213310668266, "phrase": "efficient_xml_query_optimizers"}, {"score": 0.004284755353695709, "phrase": "xml_query_optimizer"}, {"score": 0.004181839414007266, "phrase": "query_selectivity"}, {"score": 0.004041879818641576, "phrase": "best_possible_query_execution_plan"}, {"score": 0.003831310632470526, "phrase": "novel_selectivity_estimator"}, {"score": 0.003631671435460452, "phrase": "main_idea"}, {"score": 0.003493021648360933, "phrase": "summary_tree"}, {"score": 0.003376037544631762, "phrase": "source_xml_data_tree"}, {"score": 0.0033271045779740683, "phrase": "fingerprint_function"}, {"score": 0.0032471155306148156, "phrase": "similar_structures"}, {"score": 0.003200045185608395, "phrase": "generated_summary_tree"}, {"score": 0.0029602552900111407, "phrase": "proposed_approach"}, {"score": 0.002903161412792026, "phrase": "different_structural_characteristics"}, {"score": 0.002861062731782219, "phrase": "different_types"}, {"score": 0.00259554612218815, "phrase": "selectivity_estimations"}, {"score": 0.002545468362709126, "phrase": "lower_selectivity_estimation_error_rates"}, {"score": 0.002400944221804575, "phrase": "existential_queries"}, {"score": 0.0023546121947302877, "phrase": "perfect_estimations"}, {"score": 0.002286781334850213, "phrase": "error_rate"}, {"score": 0.002231747358665628, "phrase": "regular_twig_queries"}, {"score": 0.0021780349459687622, "phrase": "maximum_error_rate"}], "paper_keywords": ["XML query processing", " Query optimization", " Selectivity estimation", " Twig pattern matching", " Structural synopsis"], "paper_abstract": "With the increasing popularity of XML database applications, the use of efficient XML query optimizers is becoming very essential. The performance of an XML query optimizer depends heavily on the query selectivity estimators it uses to find the best possible query execution plan. In this work, we propose and evaluate a novel selectivity estimator, based on a structural synopsis, called SynopTech. The main idea of SynopTech is the generation of a summary tree by labeling the nodes of the source XML data tree using a fingerprint function and merging subtrees with similar structures. The generated summary tree is then used by SynopTech to estimate the selectivity of given queries. We experimented the proposed approach with four benchmark datasets of different structural characteristics and using different types of queries. Comparing with the Sampling algorithm, one of the state-of-the-art algorithms for selectivity estimations, SynopTech achieved lower selectivity estimation error rates, yet with very low memory budget. For example, for linear and existential queries, SynopTech had perfect estimations whereas the Sampling algorithm had an error rate of up to 70 %. For regular twig queries, SynopTech had a maximum error rate of 4.12 % whereas the Sampling algorithm had more than 55 %.", "paper_title": "Improved selectivity estimator for XML queries based on structural synopsis", "paper_id": "WOS:000356936800015"}