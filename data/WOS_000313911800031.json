{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "polyhedral_parallel_code_generation"}, {"score": 0.004347972379250724, "phrase": "sequential_program"}, {"score": 0.004260134699483774, "phrase": "parallel_execution"}, {"score": 0.0041316803676012155, "phrase": "modern_gpu."}, {"score": 0.003807684498435389, "phrase": "novel_source"}, {"score": 0.0036553070575015344, "phrase": "source_compiler"}, {"score": 0.003581412258960711, "phrase": "ppcg."}, {"score": 0.0032008144731234265, "phrase": "static_control_loop_nest"}, {"score": 0.0031042018721479385, "phrase": "multiple_cuda_kernels"}, {"score": 0.002889928791032578, "phrase": "multilevel_tiling_strategy"}, {"score": 0.0028026735035370206, "phrase": "code_generation_scheme"}, {"score": 0.0026630475331025955, "phrase": "locality_optimization"}, {"score": 0.0026091594819333654, "phrase": "imperfectly_nested_loops"}, {"score": 0.0023079225317714815, "phrase": "modern_gpus"}, {"score": 0.0021049977753042253, "phrase": "entire_polybench_suite"}], "paper_keywords": ["Algorithms", " Performance", " Polyhedral model", " GPU", " CUDA", " code generation", " compilers", " loop transformations", " C-to-CUDA", " Par4All", " PPCG"], "paper_abstract": "This article addresses the compilation of a sequential program for parallel execution on a modern GPU. To this end, we present a novel source-to-source compiler called PPCG. PPCG singles out for its ability to accelerate computations from any static control loop nest, generating multiple CUDA kernels when necessary. We introduce a multilevel tiling strategy and a code generation scheme for the parallelization and locality optimization of imperfectly nested loops, managing memory and exposing concurrency according to the constraints of modern GPUs. We evaluate our algorithms and tool on the entire PolyBench suite.", "paper_title": "Polyhedral Parallel Code Generation for CUDA", "paper_id": "WOS:000313911800031"}