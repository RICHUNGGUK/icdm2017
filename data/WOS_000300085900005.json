{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_checking"}, {"score": 0.0046176782475198085, "phrase": "program_correctness"}, {"score": 0.004405348628112645, "phrase": "program_model"}, {"score": 0.004314127287770832, "phrase": "kripke_structure"}, {"score": 0.003905864553426306, "phrase": "temporal_logic_formula"}, {"score": 0.0035176353680157367, "phrase": "program_models"}, {"score": 0.0034088473318056537, "phrase": "temporal_logic_formulas"}, {"score": 0.003118486096035156, "phrase": "present_paper"}, {"score": 0.0029593432468318745, "phrase": "wide_class"}, {"score": 0.0029284999172756103, "phrase": "simulation_relations"}, {"score": 0.002897977113538355, "phrase": "finite_models"}, {"score": 0.002750056254309311, "phrase": "simulation_checking_game-theoretic_approach"}, {"score": 0.0026233771102489394, "phrase": "first_component"}, {"score": 0.0025824576209656676, "phrase": "formal_language"}, {"score": 0.0024250482323322606, "phrase": "antagonistic_two-player_game"}, {"score": 0.002337684811187166, "phrase": "software_tool"}, {"score": 0.0021049977753042253, "phrase": "labeled_transition_systems"}], "paper_keywords": [""], "paper_abstract": "Model checking is one of the most commonly used methods for checking program correctness. In this method, one verifies a program model given by the Kripke structure (labeled transition system) rather than the program itself. The specification is usually given as a temporal logic formula. In many subtasks of model checking, it is necessary to use relations that are defined on the set of program models and preserve the satisfiability of temporal logic formulas. There exist many relations of this kind, which are called simulation relations. In the present paper, we introduce a tool designed to check a wide class of simulation relations between finite models of programs. This tool is based on the simulation checking game-theoretic approach. The tool consists of two components. The first component is the formal language, which allows one to define various simulation relations in terms of an antagonistic two-player game. The second component is a software tool that, given two labeled transition systems and simulation definition, is able to check whether this simulation is satisfied between these labeled transition systems. DOI: 10.1134/S0361768811040013", "paper_title": "Game-Theoretic Simulation Checking Tool", "paper_id": "WOS:000300085900005"}