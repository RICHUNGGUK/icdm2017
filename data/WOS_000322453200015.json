{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lock-free_composition"}, {"score": 0.004777214679969785, "phrase": "concurrent_data"}, {"score": 0.00462919213721188, "phrase": "lock-free_data_objects"}, {"score": 0.004346704947011699, "phrase": "priority_inversion"}, {"score": 0.003954837422946628, "phrase": "larger_atomic_operations"}, {"score": 0.003787191644093659, "phrase": "challenging_algorithmic_task"}, {"score": 0.0037133478610481994, "phrase": "lock-free_methodology"}, {"score": 0.0036553070575015344, "phrase": "wide_variety"}, {"score": 0.003626626504149897, "phrase": "concurrent_linearizable_objects"}, {"score": 0.003432044343307207, "phrase": "atomic_lock-free_move_operations"}, {"score": 0.0033518704336033874, "phrase": "concurrent_lock-free_containers"}, {"score": 0.003134705849154561, "phrase": "lock-free_way"}, {"score": 0.0030017207229983385, "phrase": "original_container"}, {"score": 0.0029547698888028697, "phrase": "data_object"}, {"score": 0.0026252106881752067, "phrase": "large_set"}, {"score": 0.0025237171554924128, "phrase": "case_studies"}, {"score": 0.0025038930574283174, "phrase": "six_commonly_used_lock-free_objects"}, {"score": 0.0022509878391826867, "phrase": "general_applicability"}, {"score": 0.002121670413111008, "phrase": "data_objects"}], "paper_keywords": ["Lock-free", " data structures", " containers", " composition"], "paper_abstract": "Lock-free data objects offer several advantages over their blocking counterparts, such as being immune to deadlocks, priority inversion, and convoying. They have also been shown to work well in practice. However, composing the operations they provide into larger atomic operations, while still guaranteeing efficiency and lock-freedom, is a challenging algorithmic task. We present a lock-free methodology for composing a wide variety of concurrent linearizable objects together by unifying their linearization points. This makes it possible to relatively easily introduce atomic lock-free move operations to a wide range of concurrent lock-free containers. This move operation allows data to be transferred from one container to another, in a lock-free way, without blocking any of the operations supported by the original container. For a data object to be suitable for composition using our methodology it needs to fulfill a set of requirements. These requirement are, however, generic enough to be fulfilled by a large set of objects. To show this we have performed case studies on six commonly used lock-free objects (a stack, a queue, a skip list, a deque, a doubly linked list and a hash table) to demonstrate the general applicability of the methodology. We also show that the operations originally supported by the data objects keep their performance behavior under our methodology.", "paper_title": "Supporting Lock-Free Composition of Concurrent Data Objects: Moving Data between Containers", "paper_id": "WOS:000322453200015"}