{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "ilu"}, {"score": 0.005476380290888355, "phrase": "tlb"}, {"score": 0.004714023408114857, "phrase": "data_layout"}, {"score": 0.004615202066192795, "phrase": "better_performance"}, {"score": 0.004455061431809975, "phrase": "good_processor_utilization"}, {"score": 0.004392565073466714, "phrase": "sparse_matrix_computations"}, {"score": 0.0038953958723049287, "phrase": "memory_system"}, {"score": 0.0037336520904376687, "phrase": "sparse_matrix_triangular"}, {"score": 0.0036553070575015344, "phrase": "traditional_compressed_sparse_matrix_format"}, {"score": 0.0035283552859817764, "phrase": "minor_adjustments"}, {"score": 0.0034543031591181546, "phrase": "data_structure"}, {"score": 0.0033579708256295847, "phrase": "processor_utilization"}, {"score": 0.003195787852087248, "phrase": "l_and_u_factors"}, {"score": 0.0030847461428168614, "phrase": "u_rows"}, {"score": 0.002853808773854451, "phrase": "simple_streaming_fashion"}, {"score": 0.002793874145713024, "phrase": "triangular_solves"}, {"score": 0.0026967596578196325, "phrase": "petsc_libraries"}, {"score": 0.0026214978443388653, "phrase": "modified_storage_format"}, {"score": 0.0021049977753042253, "phrase": "modified_code"}], "paper_keywords": ["sparse triangular solve", " ILU factorization", " matrix-vector product", " data access pattern", " data layout"], "paper_abstract": "A key to good processor utilization for sparse matrix computations is storing the data in the format that is most conducive to fast access by the memory system. In particular, for sparse matrix triangular solves the traditional compressed sparse matrix format is poor, and minor adjustments to the data structure can increase the processor utilization dramatically. Such adjustments involve storing the L and U factors separately and storing the U rows 'backwards' so that they are accessed in a simple streaming fashion during the triangular solves. Changes to the PETSc libraries to use this modified storage format resulted in over twice the floating-point rate for some matrices. This improvement can be accounted for by a decrease in the cache misses and TLB (transaction lookaside buffer) misses in the modified code.", "paper_title": "Sparse triangular solves for ILU revisited: data layout crucial to better performance", "paper_id": "WOS:000297652200004"}