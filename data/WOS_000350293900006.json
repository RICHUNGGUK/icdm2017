{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multicore_network_processors"}, {"score": 0.04188956702114718, "phrase": "network_processors"}, {"score": 0.004656647251517823, "phrase": "increasingly_important_role"}, {"score": 0.004612376827433774, "phrase": "computational_processes"}, {"score": 0.004334657104697421, "phrase": "distributed_environments"}, {"score": 0.004272969980602508, "phrase": "internet-based_delay-sensitive_applications"}, {"score": 0.004172094622123562, "phrase": "important_but_unsolved_issue"}, {"score": 0.0036669760226536977, "phrase": "runtime_environment_information"}, {"score": 0.0035125292519354724, "phrase": "scheduling_tasks"}, {"score": 0.0034459835582278746, "phrase": "runtime_context"}, {"score": 0.003348513474852869, "phrase": "profiling-based_task_scheduling_approach"}, {"score": 0.003222814590544802, "phrase": "multicore_network_processor"}, {"score": 0.003192170262392716, "phrase": "intel"}, {"score": 0.0031018195951638882, "phrase": "balanced_pipeline_way"}, {"score": 0.0029711052657054463, "phrase": "profiling-based_task_scheduling_framework"}, {"score": 0.0028187792953857957, "phrase": "performance_models"}, {"score": 0.0027259252868643926, "phrase": "pipeline_architecture"}, {"score": 0.002699960312990493, "phrase": "multiple_threads"}, {"score": 0.0025861368747446324, "phrase": "profiling_context"}, {"score": 0.0025614999929672, "phrase": "global_thread_refinement"}, {"score": 0.0024534993283766332, "phrase": "representative_network_applications"}, {"score": 0.0024185182010749273, "phrase": "intel_ixp_network_processor"}, {"score": 0.0022617389804167943, "phrase": "balanced_pipeline_fashion"}, {"score": 0.0022188370388602813, "phrase": "high_throughput"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multicore processor", " task scheduling", " profiling", " pipeline", " computational process", " distributed computing"], "paper_abstract": "Multicore network processors have been playing an increasingly important role in computational processes, which emphasize on scalability and parallelism of the systems, in distributed environments especially in Internet-based delay-sensitive applications. It is an important but unsolved issue, however, to efficiently schedule tasks in network processors with multicore and multithread for improving the system throughput as much as possible. Profiling can gather runtime environment information and guide the compiler to optimize programs through scheduling tasks based on the runtime context. This paper proposes a profiling-based task scheduling approach, targeting on improving the throughput of multicore network processor (Intel IXP) systems in the balanced pipeline way. In this work, we investigate a profiling-based task scheduling framework, a task scheduling algorithm, and a set of performance models. Our task allocation scheme maps tasks onto the pipeline architecture and multiple threads of network processors in parallel, which incorporates the profiling context and global thread refinement. We evaluate our task scheduling algorithm by implementing representative network applications on the Intel IXP network processor. Experimental results demonstrate that our algorithm is able to schedule tasks in a balanced pipeline fashion and achieve the high throughput and data transmission rate. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "A profiling based task scheduling approach for multicore network processors", "paper_id": "WOS:000350293900006"}