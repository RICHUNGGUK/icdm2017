{"auto_keywords": [{"score": 0.02790168101198813, "phrase": "uml"}, {"score": 0.00481495049065317, "phrase": "object-oriented_fortran"}, {"score": 0.00475924837336259, "phrase": "foruml._many_scientists"}, {"score": 0.004676895436217523, "phrase": "computational_science"}, {"score": 0.004622783000449884, "phrase": "engineering_software"}, {"score": 0.004310949776826717, "phrase": "oo_fortran_developers"}, {"score": 0.004162978902905446, "phrase": "high_level_software_design_descriptions"}, {"score": 0.003973523379376352, "phrase": "overall_software_design"}, {"score": 0.0035366216368204182, "phrase": "different_tasks"}, {"score": 0.0034753508746887957, "phrase": "software_development_process"}, {"score": 0.003435092524339692, "phrase": "especially_maintenance"}, {"score": 0.003336468343971626, "phrase": "software_engineering_community"}, {"score": 0.003259604990188875, "phrase": "engineering_techniques"}, {"score": 0.0030750809317435304, "phrase": "reverse_engineering-based_tools"}, {"score": 0.002850682396853918, "phrase": "oo_fortran_applications"}, {"score": 0.0027049694095434905, "phrase": "software_tool"}, {"score": 0.002658068304632523, "phrase": "unified_modeling_language"}, {"score": 0.002551762519273805, "phrase": "fortran_code"}, {"score": 0.002507511169156787, "phrase": "uml_class_diagram"}, {"score": 0.0024640253074497114, "phrase": "developers'_ability"}, {"score": 0.0023380300046435187, "phrase": "software_system"}, {"score": 0.0022974765563692776, "phrase": "extracted_diagrams"}, {"score": 0.0022708315711029423, "phrase": "software_maintenance"}, {"score": 0.002129701089817251, "phrase": "proposed_tool"}], "paper_keywords": [""], "paper_abstract": "Many scientists who implement computational science and engineering software have adopted the object-oriented (OO) Fortran paradigm. One of the challenges faced by OO Fortran developers is the inability to obtain high level software design descriptions of existing applications. Knowledge of the overall software design is not only valuable in the absence of documentation, it can also serve to assist developers with accomplishing different tasks during the software development process, especially maintenance and refactoring. The software engineering community commonly uses reverse engineering techniques to deal with this challenge. A number of reverse engineering-based tools have been proposed, but few of them can be applied to OO Fortran applications. In this paper, we propose a software tool to extract unified modeling language (UML) class diagrams from Fortran code. The UML class diagram facilitates the developers' ability to examine the entities and their relationships in the software system. The extracted diagrams enhance software maintenance and evolution. The experiments carried out to evaluate the proposed tool show its accuracy and a few of the limitations.", "paper_title": "Extracting UML Class Diagrams from Object-Oriented Fortran: ForUML", "paper_id": "WOS:000355855800001"}