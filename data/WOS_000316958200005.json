{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "protection_structures"}, {"score": 0.004753194996637899, "phrase": "multithreaded_systems"}, {"score": 0.004602233424629559, "phrase": "single-address-space_system"}, {"score": 0.004204459295724526, "phrase": "multithreaded_model"}, {"score": 0.00415050117148714, "phrase": "program_execution"}, {"score": 0.0040708542958968605, "phrase": "salient_problem"}, {"score": 0.0036710872046569532, "phrase": "memory_protection"}, {"score": 0.003486123304074186, "phrase": "protection_system_design"}, {"score": 0.003353521531649663, "phrase": "well-known_concepts"}, {"score": 0.0032468685934998335, "phrase": "access_rights"}, {"score": 0.0031845067058084583, "phrase": "resulting_environment"}, {"score": 0.0031233388358844188, "phrase": "effective_separation"}, {"score": 0.00306334226516593, "phrase": "memory_resources"}, {"score": 0.003004494701922268, "phrase": "different_processes"}, {"score": 0.0029089095588612007, "phrase": "explicit_actions"}, {"score": 0.0028715299874549245, "phrase": "information_sharing"}, {"score": 0.0027444334639134217, "phrase": "single_multithreaded_process"}, {"score": 0.0026916956768363158, "phrase": "less-stringent_protection_requirement"}, {"score": 0.002555950807368337, "phrase": "programming_error"}, {"score": 0.002260301305523054, "phrase": "symmetric-key_cryptography"}, {"score": 0.0022168460543913787, "phrase": "access_privileges"}, {"score": 0.0021049977753042253, "phrase": "single_pages"}], "paper_keywords": ["process", " protection", " revocation", " single address space", " symmetric-key cryptography", " thread"], "paper_abstract": "We consider a single-address-space system which implements a form of segmentation with paging within the framework of the multithreaded model of program execution. A salient problem of a system of this type is the definition of the set of mechanisms enforcing memory protection. We present a paradigm for the protection system design that is based on the well-known concepts of protection domains and access rights. The resulting environment guarantees an effective separation of the memory resources of the different processes, whose loosely coupled interactions correspond to explicit actions of information sharing. Within the boundaries of a single multithreaded process, a less-stringent protection requirement is to confine the consequences of a programming error in the thread that originated the error. These results are obtained by taking advantage of techniques of symmetric-key cryptography to represent access privileges in memory at the level of the single pages that form a segment.", "paper_title": "Protection Structures in Multithreaded Systems", "paper_id": "WOS:000316958200005"}