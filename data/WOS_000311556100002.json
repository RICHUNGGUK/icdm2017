{"auto_keywords": [{"score": 0.027332300562133986, "phrase": "test_suites"}, {"score": 0.015119649415531204, "phrase": "test_cases"}, {"score": 0.009618379543555463, "phrase": "jupta"}, {"score": 0.007152368807539886, "phrase": "junit_test_cases"}, {"score": 0.005468564778455931, "phrase": "coverage_information"}, {"score": 0.005324307761563744, "phrase": "fault-detection_effectiveness"}, {"score": 0.004783483480147339, "phrase": "test_case_prioritization"}, {"score": 0.004721162131188487, "phrase": "regression_testing"}, {"score": 0.00465964893087681, "phrase": "execution_order"}, {"score": 0.004223032986655664, "phrase": "dynamic_execution"}, {"score": 0.004154332348800334, "phrase": "code_coverage_information"}, {"score": 0.0040334640350288, "phrase": "dynamic_code_coverage_information"}, {"score": 0.003941882222595145, "phrase": "cost_increases"}, {"score": 0.00389048276567065, "phrase": "prioritization_precision"}, {"score": 0.003631390978147703, "phrase": "java_programs"}, {"score": 0.003584025547693836, "phrase": "junit_framework"}, {"score": 0.003548905904860611, "phrase": "increasingly_popular_class"}, {"score": 0.003468287913322255, "phrase": "junit_test_case_prioritization"}, {"score": 0.003312486229143855, "phrase": "static_call_graphs"}, {"score": 0.0031636612155559267, "phrase": "test_case"}, {"score": 0.0031326477464204768, "phrase": "code_coverage"}, {"score": 0.0028857130140890787, "phrase": "empirical_study"}, {"score": 0.0025892330566358503, "phrase": "fault_detection"}, {"score": 0.0024405312482831646, "phrase": "random_and_untreated_test_orders"}, {"score": 0.0023538840032613535, "phrase": "dynamic_coverage-based_techniques"}, {"score": 0.0023384629381463054, "phrase": "fault-detection_effectiveness_advantages"}, {"score": 0.0021049977753042253, "phrase": "jupta's_variants"}], "paper_keywords": ["Software testing", " regression testing", " test case prioritization", " JUnit", " call graph"], "paper_abstract": "Test case prioritization is used in regression testing to schedule the execution order of test cases so as to expose faults earlier in testing. Over the past few years, many test case prioritization techniques have been proposed in the literature. Most of these techniques require data on dynamic execution in the form of code coverage information for test cases. However, the collection of dynamic code coverage information on test cases has several associated drawbacks including cost increases and reduction in prioritization precision. In this paper, we propose an approach to prioritizing test cases in the absence of coverage information that operates on Java programs tested under the JUnit framework-an increasingly popular class of systems. Our approach, JUnit test case Prioritization Techniques operating in the Absence of coverage information (JUPTA), analyzes the static call graphs of JUnit test cases and the program under test to estimate the ability of each test case to achieve code coverage, and then schedules the order of these test cases based on those estimates. To evaluate the effectiveness of JUPTA, we conducted an empirical study on 19 versions of four Java programs ranging from 2K-80K lines of code, and compared several variants of JUPTA with three control techniques, and several other existing dynamic coverage-based test case prioritization techniques, assessing the abilities of the techniques to increase the rate of fault detection of test suites. Our results show that the test suites constructed by JUPTA are more effective than those in random and untreated test orders in terms of fault-detection effectiveness. Although the test suites constructed by dynamic coverage-based techniques retain fault-detection effectiveness advantages, the fault-detection effectiveness of the test suites constructed by JUPTA is close to that of the test suites constructed by those techniques, and the fault-detection effectiveness of the test suites constructed by some of JUPTA's variants is better than that of the test suites constructed by several of those techniques.", "paper_title": "A Static Approach to Prioritizing JUnit Test Cases", "paper_id": "WOS:000311556100002"}