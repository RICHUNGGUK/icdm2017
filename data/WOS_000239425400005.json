{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "point-free_form"}, {"score": 0.004019797503157808, "phrase": "local_transformation"}, {"score": 0.003419943984098415, "phrase": "point-free_programs"}, {"score": 0.0032302647179383915, "phrase": "local_transformations"}, {"score": 0.0031096747349602344, "phrase": "effective_global_optimisation"}, {"score": 0.002522344964242888, "phrase": "intermediate_stage"}, {"score": 0.0021454671611847507, "phrase": "comparable_efficiency"}, {"score": 0.0021049977753042253, "phrase": "hand-written_code"}], "paper_keywords": [""], "paper_abstract": "Programs written in point-free form express computation purely in terms of functions. Such programs are especially amenable to local transformation. In this paper, we describe a process for optimising the transport of data through point-free programs. This process systematically applies local transformations to. achieve effective global optimisation. We describe the strategies we employ to ensure this process is tractable. This process has been implemented as an intermediate stage of a compiler. The optimiser is shown to be highly effective, producing code of comparable efficiency to hand-written code.", "paper_title": "Data movement optimisation in point-free form", "paper_id": "WOS:000239425400005"}