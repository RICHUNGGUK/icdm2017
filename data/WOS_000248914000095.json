{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "culling_techniques"}, {"score": 0.004603525341738782, "phrase": "central_part"}, {"score": 0.004521566043596533, "phrase": "computer_graphics"}, {"score": 0.004401342842183475, "phrase": "graphics_hardware"}, {"score": 0.004284302478991387, "phrase": "efficient_and_flexible_support"}, {"score": 0.00384633057714983, "phrase": "programmable_culling_unit"}, {"score": 0.0035794251590584563, "phrase": "fragment_program_unit"}, {"score": 0.0033914308417007316, "phrase": "entire_blocks"}, {"score": 0.002936849401568391, "phrase": "pcu"}, {"score": 0.002708399936381754, "phrase": "fragment_programs"}, {"score": 0.0026362590493392785, "phrase": "discard_instruction"}, {"score": 0.002453116398642071, "phrase": "existing_fragment_program_unit"}, {"score": 0.002387758958649797, "phrase": "modest_hardware_overhead"}, {"score": 0.00216263228969761, "phrase": "shader_speedups"}, {"score": 0.0021049977753042253, "phrase": "relevant_scenes"}], "paper_keywords": ["rasterization", " shaders", " hardware", " culling"], "paper_abstract": "Culling techniques have always been a central part of computer graphics, but graphics hardware still lack efficient and flexible support for culling. To improve the situation, we introduce the programmable culling unit, which is as flexible as the fragment program unit and capable of quickly culling entire blocks of fragments. Furthermore, it is very easy for the developer to use the PCU as culling programs can be automatically derived from fragment programs containing a discard instruction. Our PCU can be integrated into an existing fragment program unit with a modest hardware overhead of only about 10%. Using the PCU, we have observed shader speedups between 1.4 and 2.1 for relevant scenes.", "paper_title": "PCU: The programmable culling unit", "paper_id": "WOS:000248914000095"}