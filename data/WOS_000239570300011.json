{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "\"computing_checkpoint"}, {"score": 0.004556901872357751, "phrase": "efficient_coordinated_checkpoint_algorithm"}, {"score": 0.004109600767747015, "phrase": "coordinated_checkpointing"}, {"score": 0.0036301992752948956, "phrase": "checkpointing_process"}, {"score": 0.003296212583539166, "phrase": "new_checkpoint"}, {"score": 0.0031193028729331667, "phrase": "checkpoint_sequence_number"}, {"score": 0.0028127163745564777, "phrase": "unnecessary_checkpoints"}, {"score": 0.0027741761880779535, "phrase": "orphan_messages"}, {"score": 0.0026071599759743833, "phrase": "evaluation_result"}, {"score": 0.0025014259919355453, "phrase": "redundant_computing_checkpoints"}, {"score": 0.0023507916951658455, "phrase": "tentative_checkpoints"}], "paper_keywords": [""], "paper_abstract": "In this paper, the concept of \"computing checkpoint\" is introduced, and then an efficient coordinated checkpoint algorithm is proposed. The algorithm combines the two approaches of reducing the overhead associated with coordinated checkpointing, which one is to minimize the processes which take checkpoints and the other is to make the checkpointing process non-blocking. Through piggybacking the information including which processes have taken new checkpoint in the broadcast committing message, the checkpoint sequence number of every process can be kept consistent in all processes, so that the unnecessary checkpoints and orphan messages can be avoided in the future running. Evaluation result shows that the number of redundant computing checkpoints is less than 1/10 of the number of tentative checkpoints. Analyses and experiments show that the overhead of our algorithm is lower than that of other coordinated checkpoint algorithms.", "paper_title": "An efficient computing-checkpoint based coordinated checkpoint algorithm", "paper_id": "WOS:000239570300011"}