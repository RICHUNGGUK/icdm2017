{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "word-aligned_bitmap_indexes"}, {"score": 0.004473982381245469, "phrase": "cpu_usage"}, {"score": 0.00436575511349828, "phrase": "logical_operations"}, {"score": 0.003958299299658418, "phrase": "run-length_encoding"}, {"score": 0.0033548062793973144, "phrase": "index_size"}, {"score": 0.003116913644889395, "phrase": "row-reordering_heuristics"}, {"score": 0.0028958411976400646, "phrase": "sorting_efficiency"}, {"score": 0.002825681384008326, "phrase": "secondary_contributions"}, {"score": 0.002791239714439304, "phrase": "efficient_algorithms"}, {"score": 0.0026252106881752067, "phrase": "word_length"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Multidimensional databases", " Indexing", " Compression", " Gray codes"], "paper_abstract": "Bitmap indexes must be compressed to reduce input/output costs and minimize CPU usage. To accelerate logical operations (AND, OR, XOR) over bitmaps, we use techniques based on run-length encoding (RILE), such as Word-Aligned Hybrid (WAH) compression. These techniques are sensitive to the order of the rows: a simple lexicographical sort can divide the index size by 9 and make indexes several times faster. We investigate row-reordering heuristics. Simply permuting the columns of the table can increase the sorting efficiency by 40%. Secondary contributions include efficient algorithms to construct and aggregate bitmaps. The effect of word length is also reviewed by constructing 16-bit, 32-bit and 64-bit indexes. Using 64-bit CPUs, we find that 64-bit indexes are slightly faster than 32-bit indexes despite being nearly twice as large. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Sorting improves word-aligned bitmap indexes", "paper_id": "WOS:000273112900002"}