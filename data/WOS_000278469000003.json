{"auto_keywords": [{"score": 0.04805212023869437, "phrase": "abadi"}, {"score": 0.01343633847091592, "phrase": "natural_semantics"}, {"score": 0.00481495049065317, "phrase": "semantic_artifacts"}, {"score": 0.0047689174754929195, "phrase": "object-oriented_programming"}, {"score": 0.004655742198075387, "phrase": "new_abstract_machine"}, {"score": 0.004567129988306349, "phrase": "cardelli's_untyped_non-imperative_calculus"}, {"score": 0.0038415095105632157, "phrase": "cardelli's_monograph"}, {"score": 0.0037322713756404295, "phrase": "actual_implementations"}, {"score": 0.003608732492631878, "phrase": "actual_substitutions"}, {"score": 0.003309452522760298, "phrase": "cardelli's_calculus"}, {"score": 0.0032777653153451265, "phrase": "explicit_substitutions"}, {"score": 0.0032308006242867224, "phrase": "reduction_semantics"}, {"score": 0.0031845067058084583, "phrase": "environment-based_abstract_machine"}, {"score": 0.002219516542316085, "phrase": "negational_normalization"}, {"score": 0.002198242191529979, "phrase": "boolean_formulas"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Functional calculus of objects", " Reduction semantics", " Abstract machine", " Natural semantics", " Syntactic correspondence", " Functional correspondence"], "paper_abstract": "We present a new abstract machine for Abadi and Cardelli's untyped non-imperative calculus of objects. This abstract machine mechanically corresponds to both the reduction semantics (i.e., small-step operational semantics) and the natural semantics (i.e., big-step operational semantics) specified in Abadi and Cardelli's monograph. To move closer to actual implementations, which use environments rather than actual substitutions, we then represent methods as closures and we present three new semantic artifacts for a version of Abadi and Cardelli's calculus with explicit substitutions: a reduction semantics, an environment-based abstract machine, and a natural semantics (i.e., an interpreter) with environments. These three new semantic artifacts mechanically correspond to each other, and the two abstract machines are bisimilar. Their significance lies in the fact that they have not been designed from scratch and then proved correct: instead, they have been inter-derived. To illustrate the inter-derivation and to make this article stand-alone, we also comprehensively treat the example of negational normalization over Boolean formulas, in appendix. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Inter-deriving semantic artifacts for object-oriented programming", "paper_id": "WOS:000278469000003"}