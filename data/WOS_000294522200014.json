{"auto_keywords": [{"score": 0.04344739979281999, "phrase": "rename_register_file"}, {"score": 0.004550469496119256, "phrase": "slave_threads"}, {"score": 0.004064117897000019, "phrase": "quantitative_analysis"}, {"score": 0.0037073529462522403, "phrase": "important_resources"}, {"score": 0.0034057975804778293, "phrase": "master_threads"}, {"score": 0.002530359917257626, "phrase": "last_checkpoint"}, {"score": 0.0024772013657695896, "phrase": "fault_restoration"}, {"score": 0.002275477757478827, "phrase": "ac-rmt"}, {"score": 0.0021654633404434623, "phrase": "lower_overhead"}, {"score": 0.0021049977753042253, "phrase": "register_value_queue_free_recovery"}], "paper_keywords": ["Simultaneous multithreading", " redundant multithreading", " checkpoint", " redundant multithreading with recovery", " register value queue free recovery scheme"], "paper_abstract": "In existing redundant multithreading (RMT) architectures, master threads have to wait for slave threads for comparison at some positions, which may delay the release of rename register file. The quantitative analysis presented in the paper shows that the rename register file is one of the important resources affecting the performance. In order to avoid the waiting of master threads, an asynchronous checkpoint-based redundant multithreading (AC-RMT) architecture is proposed. In such a RMT architecture, two contexts saving rooms are set aside for each thread, one for detecting faults and the other for saving the last checkpoint used for fault restoration, so resources can be released timely. Experiments show that AC-RMT can boost performance more efficiently with lower overhead than that of register value queue free recovery (RVQ_F) scheme.", "paper_title": "AC-RMT: A FAULT-TOLERANCE SMT ARCHITECTURE BASED ON ASYNCHRONOUS CHECKPOINT", "paper_id": "WOS:000294522200014"}