{"auto_keywords": [{"score": 0.032604320386754426, "phrase": "grid_structure"}, {"score": 0.015719716506582538, "phrase": "multicore_accelerators"}, {"score": 0.015566631018521397, "phrase": "explicitly_managed_memories"}, {"score": 0.012123049322481622, "phrase": "ray_tracing"}, {"score": 0.009249933412319437, "phrase": "simd_optimizations"}, {"score": 0.004720606036240263, "phrase": "recent_electronic_devices"}, {"score": 0.00442651096522781, "phrase": "powerful_performance"}, {"score": 0.004382913938427474, "phrase": "acceleration_co-processors"}, {"score": 0.00419195822011581, "phrase": "graphic-rich_applications"}, {"score": 0.004150661689086371, "phrase": "scalable_acceleration_co-processors"}, {"score": 0.00393066798511457, "phrase": "sophisticated_data_management"}, {"score": 0.0038727120021750973, "phrase": "main_memory"}, {"score": 0.003815607281455725, "phrase": "local_memories"}, {"score": 0.003649277504586372, "phrase": "high_quality_rendering_algorithm"}, {"score": 0.0035424245257172234, "phrase": "potentially_many_parallelism"}, {"score": 0.0034386894664467003, "phrase": "explicitly_managed_memory_hierarchies"}, {"score": 0.0033214855341753544, "phrase": "complex_data_structures"}, {"score": 0.0032402142645120958, "phrase": "irregular_memory_accesses"}, {"score": 0.00320826350799124, "phrase": "inefficient_data_management"}, {"score": 0.0028768722873689432, "phrase": "recent_improvements"}, {"score": 0.0027925723953701083, "phrase": "comparable_performance"}, {"score": 0.0027650234530228897, "phrase": "kd-tree_structure"}, {"score": 0.002670719148310961, "phrase": "fastest_acceleration_structures"}, {"score": 0.002579622880371082, "phrase": "parallel_ray_tracer"}, {"score": 0.002504011301105577, "phrase": "multicore_accelerator"}, {"score": 0.0023476849595393872, "phrase": "grid-based_ray_tracer"}, {"score": 0.002301572462091142, "phrase": "macrocell_structure"}, {"score": 0.0022120408738490437, "phrase": "memory_bandwidth"}, {"score": 0.0021049977753042253, "phrase": "bvh-based_ray_tracer"}], "paper_keywords": ["ray tracing", " multicore accelerator", " grid structure", " DMA latency hiding", " explicitly managed memory"], "paper_abstract": "Recent electronic devices are equipped with processors extended with multicore accelerators to take advantage of the powerful performance from acceleration co-processors. Applications on such high-end electronic products require capability to run graphic-rich applications. Scalable acceleration co-processors are frequently designed as multicores with explicitly managed memories. Such multicore architectures require sophisticated data management among the main memory and the local memories to fully exploit their potential performance. Ray tracing is a high quality rendering algorithm in computer graphics and has potentially many parallelism to exploit. On the explicitly managed memory hierarchies, however, ray tracing with complex data structures tends to suffer from irregular memory accesses and inefficient data management. Compared to other acceleration structures for ray tracing, grid structure is simple to manage but commonly regarded to produce too slow algorithms. However, recent improvements on grid structure with SIMD optimizations show comparable performance with kd-tree structure, which is one of the fastest acceleration structures. We introduce a grid structure based parallel ray tracer on a processor with a multicore accelerator. We adopt SIMD optimizations and double buffering to enhance the performance of grid-based ray tracer and propose a macrocell structure over the grid to fully exploit the memory bandwidth. In our experiment, our ray tracing scheme shows comparable performance with BVH-based ray tracer.", "paper_title": "Enhancing Visual Rendering on Multicore Accelerators with Explicitly Managed Memories", "paper_id": "WOS:000308780300006"}