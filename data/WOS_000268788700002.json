{"auto_keywords": [{"score": 0.05007847282349091, "phrase": "information_processing"}, {"score": 0.049270491386787914, "phrase": "efficient_dynamic_ordered_set"}, {"score": 0.04377225473507534, "phrase": "dynamic_ordered_set"}, {"score": 0.02578824633792256, "phrase": "rbt"}, {"score": 0.004402973626416765, "phrase": "important_problem"}, {"score": 0.004310173770196077, "phrase": "information_search"}, {"score": 0.003958049372486465, "phrase": "max-value_retrieval"}, {"score": 0.0039244530915794025, "phrase": "next-larger-value_retrieval"}, {"score": 0.003858110309630846, "phrase": "previous_research_fruits"}, {"score": 0.003776750773624222, "phrase": "advanced_data_structure"}, {"score": 0.0037446875860947916, "phrase": "rich_binary_tree"}, {"score": 0.0035883942463601688, "phrase": "digital-search-tree_property"}, {"score": 0.0033374705499418377, "phrase": "next_larger_value"}, {"score": 0.003309124298009635, "phrase": "k's_ancestors"}, {"score": 0.0030645676308053444, "phrase": "new_data_structure"}, {"score": 0.002850168497994985, "phrase": "binary_mode"}, {"score": 0.002790004829699627, "phrase": "big_potential"}, {"score": 0.0026394405584281443, "phrase": "general-purpose_data_structure"}, {"score": 0.0024863459251358217, "phrase": "priority_queue"}, {"score": 0.002332133125576037, "phrase": "linear-time_algorithm"}, {"score": 0.0022828795331819025, "phrase": "key_number"}], "paper_keywords": ["information processing", " dynamic ordered set", " algorithms and data structures", " rich binary tree"], "paper_abstract": "This paper investigates how to maintain an efficient dynamic ordered set of bit strings, which is an important problem in the field of information search and information processing. Generally, a dynamic ordered set is required to support 5 essential operations including search, insertion, deletion, max-value retrieval and next-larger-value retrieval. Based on previous research fruits, we present an advanced data structure named rich binary tree (RBT), which follows both the binary-search-tree property and the digital-search-tree property. Also, every key K keeps the most significant difference bit (MSDB) between itself and the next larger value among K's ancestors, as well as that between itself and the next smaller one among its ancestors. With the new data structure, we can maintain a dynamic ordered set in O(L) time. Since computers represent objects in binary mode, our method has a big potential in application. In fact, RBT can be viewed as a general-purpose data structure for problems concerning order, such as search, sorting and maintaining a priority queue. For example, when RBT is applied in sorting, we get a linear-time algorithm with regard to the key number and its performance is far better than quick-sort. What is more powerful than quick-sort is that RBT supports constant-time dynamic insertion/deletion.", "paper_title": "New method in information processing for maintaining an efficient dynamic ordered set", "paper_id": "WOS:000268788700002"}