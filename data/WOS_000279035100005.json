{"auto_keywords": [{"score": 0.017431126992066337, "phrase": "oo_programs"}, {"score": 0.00802142782173224, "phrase": "mdd"}, {"score": 0.005614089198762755, "phrase": "automatic_generation"}, {"score": 0.0047650691627251825, "phrase": "popular_paradigm"}, {"score": 0.004715702140552199, "phrase": "target_systems"}, {"score": 0.004176033420846065, "phrase": "development_efficiency"}, {"score": 0.004132743580000062, "phrase": "high_quality"}, {"score": 0.003991646181215783, "phrase": "promising_approach"}, {"score": 0.003922907208353323, "phrase": "machine-assisted_model_transformation"}, {"score": 0.003775803846431323, "phrase": "program_faults"}, {"score": 0.0036595438031512217, "phrase": "key_disciplines"}, {"score": 0.0034615969985956866, "phrase": "comprehensive_framework"}, {"score": 0.003401954670986958, "phrase": "oo_program_engineering"}, {"score": 0.003366662001961897, "phrase": "rigorous_and_formal_fashion"}, {"score": 0.0031955979242589494, "phrase": "ooad"}, {"score": 0.00303319936111073, "phrase": "five_platform_independent_models"}, {"score": 0.002980916123365584, "phrase": "defined_formal_representations"}, {"score": 0.002869034325496957, "phrase": "eight_artifacts"}, {"score": 0.0028293966058473476, "phrase": "case_study"}, {"score": 0.0024876840172100567, "phrase": "traceability_framework"}, {"score": 0.0023694065215394593, "phrase": "ooad_artifacts"}, {"score": 0.0023529740798601015, "phrase": "traceability_links"}, {"score": 0.0023285383529595416, "phrase": "transformation_rules"}, {"score": 0.0022255425106527727, "phrase": "human_involvement_nature"}, {"score": 0.002149418970824546, "phrase": "model_transformation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Traceability", " Object-orientation", " Model-driven", " Transformation"], "paper_abstract": "Context: Object-oriented (OO) development method is a popular paradigm in developing target systems. However, the current practices of OO analysis and design (OOAD) and implementation largely rely on human developers' experience and expertise, making it possible less efficient and more error-prone. Hence, there is room for improving the development efficiency while preserving high quality of programs. Objective: Model-driven development (MDD) is a promising approach to developing programs by machine-assisted model transformation, saving human efforts and reducing the possibility of introducing program faults. Hence, it is appealing to apply key disciplines of MDD in developing OO programs. Method: In this paper, we propose a comprehensive framework for applying MOD on OO program engineering in a rigorous and formal fashion. The framework consists of: (1) a hybrid engineering model of human and machine, (2) meta-models of OOAD artifacts, (3) traceability map with trace links, and (4) transformation rules. Results: We identified five platform independent models and two platform specific models, and defined formal representations for them. We identified 16 traceability links and accordingly 16 transformation rules among the eight artifacts. Through the case study, we showed that our work is feasible and applicable. We assessed our work and concluded that our work is sound, complete, and extendable. Our work established the foundation toward automatic generation of OO programs based on the traceability framework. Conclusion: It is concluded that it is essential to identify the OOAD artifacts, traceability links, and transformation rules for automatic generation of OO programs. It is also important to understand the human involvement nature in MDD and to explicitly treat them in the model transformation. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Traceability-centric model-driven object-oriented engineering", "paper_id": "WOS:000279035100005"}