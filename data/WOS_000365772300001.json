{"auto_keywords": [{"score": 0.05007786227983499, "phrase": "order_relation"}, {"score": 0.04705125463422358, "phrase": "ddm"}, {"score": 0.041684736489847794, "phrase": "update_regions"}, {"score": 0.04133706444070497, "phrase": "subscription_regions"}, {"score": 0.03706271414001888, "phrase": "matching_process"}, {"score": 0.023448050149867204, "phrase": "proposed_algorithm"}, {"score": 0.0047732596509542135, "phrase": "hla_data_distribution_management"}, {"score": 0.0047113960612140335, "phrase": "distribution_simulation"}, {"score": 0.004650330504968421, "phrase": "high-level_architecture"}, {"score": 0.004550300345169981, "phrase": "data_distribution_management"}, {"score": 0.004413846562278824, "phrase": "hla_services"}, {"score": 0.00428146713705618, "phrase": "unnecessary_data"}, {"score": 0.0041170581247889654, "phrase": "sending_federates"}, {"score": 0.004063664475797303, "phrase": "receiving_federates"}, {"score": 0.0038906171474520756, "phrase": "multidimensional_routing_space"}, {"score": 0.0037738708560271354, "phrase": "overlap_information"}, {"score": 0.003399466007862412, "phrase": "existing_algorithms"}, {"score": 0.0032404677650217407, "phrase": "computing_capabilities"}, {"score": 0.00321236577162671, "phrase": "multi-core_processors"}, {"score": 0.0031431690368229443, "phrase": "computational_overhead"}, {"score": 0.003115908199991072, "phrase": "region_matching"}, {"score": 0.0030487828775502563, "phrase": "parallel_algorithm"}, {"score": 0.002918826667294298, "phrase": "new_matching_algorithm"}, {"score": 0.002893505913503472, "phrase": "divide-and-conquer_approach"}, {"score": 0.002818850283787242, "phrase": "multiple_region"}, {"score": 0.0026986685585382347, "phrase": "region_bounds"}, {"score": 0.0025723630851105304, "phrase": "bound_sublists"}, {"score": 0.002473420909291381, "phrase": "good_performance"}, {"score": 0.0023270035715132866, "phrase": "unnecessary_comparisons"}, {"score": 0.002286781334850213, "phrase": "different_sublists"}, {"score": 0.00226693109377084, "phrase": "theoretical_analysis"}, {"score": 0.0021797112385590913, "phrase": "experimental_result"}, {"score": 0.002123433075137768, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "major_existing_ddm_matching_algorithms"}], "paper_keywords": ["High-level architecture", " data distribution management", " matching algorithm"], "paper_abstract": "In distribution simulation based on High-level architecture (HLA), data distribution management (DDM) is one of HLA services for the purpose of filtering the unnecessary data transferring over the network. DDM admits the sending federates and the receiving federates to express their interest using update regions and subscription regions in a multidimensional routing space. There are several matching algorithms to obtain overlap information between the update regions and subscription regions. When the number of regions increase sharply, the matching process is time consuming. However, the existing algorithms is hard to be parallelized to take advantage of the computing capabilities of multi-core processors. To reduce the computational overhead of region matching, we propose a parallel algorithm based on order relation to accelerate the matching process. The new matching algorithm adopts divide-and-conquer approach to divide the regions into multiple region bound sublists, each of which comprises parts of region bounds. To calculate the intersection inside and amongst the region bound sublists, two matching rules are presented. This approach has good performance since it performs region matching on the sublists parallel and does not require unnecessary comparisons within regions in different sublists. Theoretical analysis has been carried out for the proposed algorithm and experimental result shows that the proposed algorithm has better performance than major existing DDM matching algorithms.", "paper_title": "A parallel matching algorithm based on order relation for HLA data distribution management", "paper_id": "WOS:000365772300001"}