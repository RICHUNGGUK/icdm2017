{"auto_keywords": [{"score": 0.03537758002595163, "phrase": "python"}, {"score": 0.011111355517376399, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "multidisciplinary_design_optimization"}, {"score": 0.004361276005140776, "phrase": "multidisciplinary_optimization"}, {"score": 0.0042336638794732255, "phrase": "resulting_implementation"}, {"score": 0.004171259063201874, "phrase": "mdo_methods"}, {"score": 0.004029187256595917, "phrase": "main_advantage"}, {"score": 0.003969784439380027, "phrase": "proposed_framework"}, {"score": 0.0037967593942595233, "phrase": "strong_emphasis"}, {"score": 0.0037593414153801394, "phrase": "object-oriented_classes"}, {"score": 0.0035424245257172234, "phrase": "rapid_development"}, {"score": 0.003472927015404464, "phrase": "new_mdo_methods"}, {"score": 0.003421697038352743, "phrase": "top_layer_interface"}, {"score": 0.0027925723953701083, "phrase": "object-oriented_programming"}, {"score": 0.0023828731731474306, "phrase": "new_algorithms"}, {"score": 0.0022675820982741347, "phrase": "implementation_details"}, {"score": 0.002212040873849046, "phrase": "user_interface"}, {"score": 0.0021793698531006197, "phrase": "corresponding_results"}, {"score": 0.0021049977753042253, "phrase": "correct_solutions"}], "paper_keywords": ["Algorithms", " Experimentation", " Multidisciplinary design optimization", " object-oriented programming"], "paper_abstract": "We present pyMDO, an object-oriented framework that facilitates the usage and development of algorithms for multidisciplinary optimization (MDO). The resulting implementation of the MDO methods is efficient and portable. The main advantage of the proposed framework is that it is flexible, with a strong emphasis on object-oriented classes and operator overloading, and it is therefore useful for the rapid development and evaluation of new MDO methods. The top layer interface is programmed in Python and it allows for the layers below the interface to be programmed in C, C++, Fortran, and other languages. We describe an implementation of pyMDO and demonstrate that we can take advantage of object-oriented programming to obtain intuitive, easy-to-read, and easy-to-develop codes that are at the same time efficient. This allows developers to focus on the new algorithms they are developing and testing, rather than on implementation details. Examples demonstrate the user interface and the corresponding results show that the various MDO methods yield the correct solutions.", "paper_title": "pyMDO: An Object-Oriented Framework for Multidisciplinary Design Optimization", "paper_id": "WOS:000271214000003"}