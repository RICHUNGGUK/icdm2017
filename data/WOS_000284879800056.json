{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "computing_history"}, {"score": 0.0045108906244892165, "phrase": "multi-layer_hardware_and_software_stacks"}, {"score": 0.003831801113154043, "phrase": "networking_world"}, {"score": 0.0036288825833675127, "phrase": "entire_open_source_networking_stacks"}, {"score": 0.002887210021573995, "phrase": "popular_quagga"}, {"score": 0.002675252546913683, "phrase": "low_level_vendor-independent_openflow_interface"}, {"score": 0.0026175952455594277, "phrase": "quagflow"}, {"score": 0.0023990982005125763, "phrase": "nox_controller_application"}, {"score": 0.0022718774783143203, "phrase": "slave_daemons"}, {"score": 0.00217496508306238, "phrase": "virtual_machines"}, {"score": 0.0021049977753042253, "phrase": "quagga_routing_instances"}], "paper_keywords": ["Experimentation", " Design"], "paper_abstract": "Computing history has shown that open, multi-layer hardware and software stacks encourage innovation and bring costs down. Only recently this trend is meeting the networking world with the availability of entire open source networking stacks being closer than ever. Towards this goal, we are working on QuagFlow, a transparent interplay between the popular Quagga open source routing suite and the low level vendor-independent OpenFlow interface. QuagFlow is a distributed system implemented as a NOX controller application and a series of slave daemons running along the virtual machines hosting the Quagga routing instances", "paper_title": "QuagFlow: Partnering Quagga with OpenFlow", "paper_id": "WOS:000284879800056"}