{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multi-string_bwts"}, {"score": 0.007749707015924066, "phrase": "merged_multi-string"}, {"score": 0.004628223381645729, "phrase": "genomic_sequencing"}, {"score": 0.00439041997682389, "phrase": "downstream_analysis"}, {"score": 0.004201571673071299, "phrase": "old_data"}, {"score": 0.004056334733843591, "phrase": "large_quantities"}, {"score": 0.0038818006513785977, "phrase": "hard_drives"}, {"score": 0.003847802030433298, "phrase": "modern_biology_labs"}, {"score": 0.003698442219929622, "phrase": "multi-string_variant"}, {"score": 0.0036499505265403377, "phrase": "burrows-wheeler_transform"}, {"score": 0.00352371416065881, "phrase": "side_benefit"}, {"score": 0.00346223706087128, "phrase": "arbitrary_k-mers"}, {"score": 0.0034168317227203206, "phrase": "raw_data"}, {"score": 0.003298631258267805, "phrase": "arbitrary_reads"}, {"score": 0.002840121513581822, "phrase": "lcs"}, {"score": 0.002646880721119838, "phrase": "total_length"}, {"score": 0.0023501047385525568, "phrase": "bwt"}, {"score": 0.0022787359717772976, "phrase": "higher_compressibility"}, {"score": 0.0022389308000757037, "phrase": "input_multi-string_bwts"}, {"score": 0.0021049977753042253, "phrase": "bioinformatics_applications"}], "paper_keywords": [""], "paper_abstract": "Motivation: The throughput of genomic sequencing has increased to the point that is overrunning the rate of downstream analysis. This, along with the desire to revisit old data, has led to a situation where large quantities of raw, and nearly impenetrable, sequence data are rapidly filling the hard drives of modern biology labs. These datasets can be compressed via a multi-string variant of the Burrows-Wheeler Transform (BWT), which provides the side benefit of searches for arbitrary k-mers within the raw data as well as the ability to reconstitute arbitrary reads as needed. We propose a method for merging such datasets for both increased compression and downstream analysis. Results: We present a novel algorithm that merges multi-string BWTs in O(LCS x N) time where LCS is the length of their longest common substring between any of the inputs, and N is the total length of all inputs combined (number of symbols) using O(N x log(2)(F)) bits where F is the number of multi-string BWTs merged. This merged multi-string BWT is also shown to have a higher compressibility compared with the input multi-string BWTs separately. Additionally, we explore some uses of a merged multi-string BWT for bioinformatics applications.", "paper_title": "Merging of multi-string BWTs with applications", "paper_id": "WOS:000346051000011"}