{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model-based_mutation_testing"}, {"score": 0.004537254814246843, "phrase": "novel_model-based_test_case_generation_approach"}, {"score": 0.00436890075128947, "phrase": "uml_state_machines"}, {"score": 0.004298666679374568, "phrase": "main_contribution"}, {"score": 0.004161553532799662, "phrase": "fully_automated_fault-based_test_case_generation_technique"}, {"score": 0.003964007795174772, "phrase": "industrial_use_cases"}, {"score": 0.00385832528624328, "phrase": "in-depth_evaluation"}, {"score": 0.0038168424095396205, "phrase": "different_fault-based_test_case_generation_strategies"}, {"score": 0.00355782527287734, "phrase": "plain_random_testing"}, {"score": 0.0034629341517018438, "phrase": "test_case_generation_methodology"}, {"score": 0.003407214479510987, "phrase": "wide_range"}, {"score": 0.003370565320453525, "phrase": "uml_constructs"}, {"score": 0.0032629585038738856, "phrase": "formal_semantics"}, {"score": 0.0032278559855285945, "phrase": "back's_action_systems"}, {"score": 0.0031759067385562553, "phrase": "well-known_input-output_conformance_relation"}, {"score": 0.0028968858148006823, "phrase": "test_cases"}, {"score": 0.0025167026017217926, "phrase": "cheap_but_undirected_random_test_case_generation"}, {"score": 0.002410058288617039, "phrase": "extensive_and_critical_discussion"}, {"score": 0.002270745003370529, "phrase": "future_outlook"}, {"score": 0.002234165013865669, "phrase": "general_usefulness"}, {"score": 0.0021863046959469863, "phrase": "mutation-based_test_case_generation"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["test case generation", " model-based testing", " mutation testing", " random testing", " ioco", " action systems", " Unified Modeling Language", " UML"], "paper_abstract": "This article presents the techniques and results of a novel model-based test case generation approach that automatically derives test cases from UML state machines. The main contribution of this article is the fully automated fault-based test case generation technique together with two empirical case studies derived from industrial use cases. Also, an in-depth evaluation of different fault-based test case generation strategies on each of the case studies is given and a comparison with plain random testing is conducted. The test case generation methodology supports a wide range of UML constructs and is grounded on the formal semantics of Back's action systems and the well-known input-output conformance relation. Mutation operators are employed on the level of the specification to insert faults and generate test cases that will reveal the faults inserted. The effectiveness of this approach is shown and it is discussed how to gain a more expressive test suite by combining cheap but undirected random test case generation with the more expensive but directed mutation-based technique. Finally, an extensive and critical discussion of the lessons learnt is given as well as a future outlook on the general usefulness and practicability of mutation-based test case generation. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Killing strategies for model-based mutation testing", "paper_id": "WOS:000368338500002"}