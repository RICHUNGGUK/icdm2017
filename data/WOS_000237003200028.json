{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "matrix_computations"}, {"score": 0.008089984931510995, "phrase": "block_algorithms"}, {"score": 0.004731492618963217, "phrase": "conventional_programming_languages"}, {"score": 0.004204602964512469, "phrase": "hash_tables"}, {"score": 0.00406001734835979, "phrase": "efficient_matrix_computations"}, {"score": 0.0038355531523269217, "phrase": "loop_restructuring"}, {"score": 0.003703611021999795, "phrase": "program_fragments"}, {"score": 0.0036553070575015344, "phrase": "different_architectures"}, {"score": 0.003498782065781398, "phrase": "conventional_algorithms"}, {"score": 0.0032908057622663732, "phrase": "acceptable_levels"}, {"score": 0.0031498398446368025, "phrase": "hardware_systems"}, {"score": 0.0029755458462182565, "phrase": "dense_matrices"}, {"score": 0.002860546817196148, "phrase": "index-based_element-reference"}, {"score": 0.0025638362414466278, "phrase": "unspecified_sizes"}, {"score": 0.0025192983141887285, "phrase": "key_operation"}, {"score": 0.0024007585788965655, "phrase": "direct_and_explicit_expression"}, {"score": 0.0021896891011033105, "phrase": "good_decomposition_parameters"}, {"score": 0.0021049977753042253, "phrase": "specific_target_system"}], "paper_keywords": [""], "paper_abstract": "When matrix computations are expressed in conventional programming languages, matrices are almost exclusively represented by arrays, but arrays are also used to represent many other kinds of entities, such as grids, lists, hash tables, etc. The responsibility for achieving efficient matrix computations is usually seen as resting on compilers, which in turn apply loop restructuring and reordering transformations to adapt programs and program fragments to target different architectures. Unfortunately, compilers are often unable to restructure conventional algorithms for matrix computations into their block or block-recursive counterparts, which are required to obtain acceptable levels of performance on most current (and future) hardware systems. We present a datatype which is dedicated to the representation of dense matrices. In contrast to arrays, for which index-based element-reference is the basic (primitive) operation, the primitive operations of our specialized matrix-type are composition and decomposition of/into submatrices. Decomposition of a matrix into submatrices (of unspecified sizes) is a key operation in the development of block algorithms for matrix computations, and through direct and explicit expression of (ambiguous) decompositions of matrices into submatrices, block algorithms can be expressed explicitly and at the same time the task of finding good decomposition parameters (i.e., block sizes) for each specific target system, is exposed to and made suitable for compilers.", "paper_title": "A matrix-type for performance-portability", "paper_id": "WOS:000237003200028"}