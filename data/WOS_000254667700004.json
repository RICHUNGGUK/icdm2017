{"auto_keywords": [{"score": 0.05007510818779215, "phrase": "performance_models"}, {"score": 0.046582188730808334, "phrase": "uml"}, {"score": 0.0254736774554585, "phrase": "csm"}, {"score": 0.00475924837336259, "phrase": "uml_designs"}, {"score": 0.004704187604192605, "phrase": "performance_analysis"}, {"score": 0.004622783000449884, "phrase": "software_specification"}, {"score": 0.004361428012479218, "phrase": "design_team"}, {"score": 0.0042859292226559535, "phrase": "performance-sensitive_design_decisions"}, {"score": 0.004187284711626886, "phrase": "design_trade-offs"}, {"score": 0.003904713104101532, "phrase": "uml_profile"}, {"score": 0.003726967166630923, "phrase": "necessary_information"}, {"score": 0.003662410853488772, "phrase": "workload_parameters"}, {"score": 0.0035989687070420977, "phrase": "performance_model"}, {"score": 0.0034956560177000656, "phrase": "performance_techniques"}, {"score": 0.0031845067058084583, "phrase": "intermediate_form"}, {"score": 0.003129317057177867, "phrase": "multiple_uml_diagrams"}, {"score": 0.0030572112793962004, "phrase": "behaviour_elements"}, {"score": 0.0030042210975126616, "phrase": "performance_annotations"}, {"score": 0.002952146666681891, "phrase": "important_resource_information"}, {"score": 0.0025967927629150715, "phrase": "queueing_networks"}, {"score": 0.002566685388128598, "phrase": "layered_queues"}, {"score": 0.0025221759076833124, "phrase": "petri_nets"}, {"score": 0.002351705899181029, "phrase": "intermediate_language"}, {"score": 0.002310915790114425, "phrase": "performance_formalisms"}, {"score": 0.0021049977753042253, "phrase": "performance_model-building"}], "paper_keywords": ["unified modeling language", " performance evaluation", " scenarios", " model transformations"], "paper_abstract": "Performance analysis of a software specification in a language such as UML can assist a design team in evaluating performance-sensitive design decisions and in making design trade-offs that involve performance. Annotations to the design based on the UML Profile for Schedulability, Performance and Time provide necessary information such as workload parameters for a performance model, and many different kinds of performance techniques can be applied. The Core Scenario Model (CSM) described here provides a meta-model for an intermediate form which correlates multiple UML diagrams, extracts the behaviour elements with the performance annotations, attaches important resource information that is obtained from the UML, and supports the creation of many different kinds of performance models. Models can be made using queueing networks, layered queues, timed Petri nets, and it is proposed to develop the CSM as an intermediate language for all performance formalisms. This paper defines the CSM and describes how it resolves questions that arise in performance model-building.", "paper_title": "An intermediate metamodel with scenarios and resources for generating performance models from UML designs", "paper_id": "WOS:000254667700004"}