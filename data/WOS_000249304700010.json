{"auto_keywords": [{"score": 0.04820189656526341, "phrase": "multi-processor_systems"}, {"score": 0.00481495049065317, "phrase": "concurrent_lazy_cyclic_reference"}, {"score": 0.004158290806404304, "phrase": "current_computer_architectures"}, {"score": 0.004048860957751714, "phrase": "software_developers"}, {"score": 0.0035908627899097407, "phrase": "additional_computing_power"}, {"score": 0.003449972561293443, "phrase": "concurrent_programs"}, {"score": 0.0030189426536422577, "phrase": "additional_processors"}, {"score": 0.0028619616432896005, "phrase": "memory_management"}, {"score": 0.0027131212233443137, "phrase": "new_architecture"}, {"score": 0.002572001496778222, "phrase": "concurrent_lazy_cyclic_reference_counting"}, {"score": 0.0022806798371116698, "phrase": "preliminary_performance_tests"}, {"score": 0.0021910825909008946, "phrase": "significant_efficiency_improvements"}, {"score": 0.0021049977753042253, "phrase": "sequential_counterpart"}], "paper_keywords": ["memory management", " garbage collection", " reference counting", " concurrent garbage collection"], "paper_abstract": "Multi-processor systems have become the standard in current computer architectures. Software developers have the possibility to take advantage of the additional computing power available to concurrent programs. This paper presents a way to automatically use additional processors, by performing memory management concurrently. A new architecture with little explicit synchronization for concurrent lazy cyclic reference counting is described. This architecture was implemented and preliminary performance tests point at significant efficiency improvements over the sequential counterpart.", "paper_title": "A new architecture for concurrent lazy cyclic reference counting on multi-processor systems", "paper_id": "WOS:000249304700010"}