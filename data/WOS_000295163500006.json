{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "network_protocol_fingerprinting"}, {"score": 0.004600100053651545, "phrase": "protocol_implementation"}, {"score": 0.004354841111644036, "phrase": "network_security"}, {"score": 0.004256533389293113, "phrase": "useful_mechanism"}, {"score": 0.0042178318724732005, "phrase": "network_management"}, {"score": 0.004179480763003705, "phrase": "existing_protocol_fingerprinting_tools"}, {"score": 0.003832031470970347, "phrase": "formal_methodology"}, {"score": 0.0037971749182744334, "phrase": "fingerprinting_experiments"}, {"score": 0.0036776458116294986, "phrase": "broad_spectrum"}, {"score": 0.0036441884295335502, "phrase": "fingerprinting_problems"}, {"score": 0.003611034322786669, "phrase": "design-efficient_algorithms"}, {"score": 0.0035294580355761506, "phrase": "formal_behavioral_model"}, {"score": 0.003465521267039616, "phrase": "protocol_principal"}, {"score": 0.003325852346387272, "phrase": "complete_taxonomy"}, {"score": 0.0032955848190195343, "phrase": "fingerprint_matching"}, {"score": 0.003265591844292821, "phrase": "discovery_problems"}, {"score": 0.0031339552246625463, "phrase": "fingerprinting_experiment"}, {"score": 0.00274472767672686, "phrase": "fingerprint_matching_algorithm"}, {"score": 0.002682669289913153, "phrase": "efficient_pefsm_online_separation_algorithm"}, {"score": 0.0026220103561723066, "phrase": "concurrent_passive_testing"}, {"score": 0.0025981315738078793, "phrase": "passive_experiments"}, {"score": 0.0025627194819793347, "phrase": "fingerprint_discovery_problem"}, {"score": 0.0024706232839499546, "phrase": "protocol_specification"}, {"score": 0.0024147474002390763, "phrase": "nondeterministic_pefsm"}, {"score": 0.0023386327847292805, "phrase": "back-tracing_technique"}, {"score": 0.0023173287402646577, "phrase": "active_and_passive_discovery"}, {"score": 0.0021049977753042253, "phrase": "active_testing"}], "paper_keywords": ["Formal methods", " network level security and protection", " network management", " protocol verification"], "paper_abstract": "Network protocol fingerprinting refers to the process of identifying a protocol implementation by their input and output behaviors. It has been regarded as both a potential threat to network security and also as a useful mechanism for network management. Existing protocol fingerprinting tools share common disadvantages such as being protocol-specific and difficult to automate. This paper proposes a formal methodology for fingerprinting experiments using which we can model a broad spectrum of fingerprinting problems and design-efficient algorithms. We present a formal behavioral model that specifies a protocol principal by its states and transitions, then identify a complete taxonomy of fingerprint matching and discovery problems is identified based on 1) whether the fingerprinting experiment is active or passive and 2) the information available about the specifications and implementations. Algorithms to solve the problems are discussed. In particular, for fingerprint matching algorithm, we propose an efficient PEFSM online separation algorithm for active experiment and concurrent passive testing for passive experiments. For fingerprint discovery problem, there are two cases: if the protocol specification is available as a nondeterministic PEFSM, we apply across verification and back-tracing technique for active and passive discovery, respectively; if no specification is available, we take the machine learning approach and discover the fingerprint by active testing.", "paper_title": "A Formal Methodology for Network Protocol Fingerprinting", "paper_id": "WOS:000295163500006"}