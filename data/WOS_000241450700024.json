{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_transformation"}, {"score": 0.03261638306028882, "phrase": "plugin_mechanism"}, {"score": 0.004664352260912174, "phrase": "key_technology"}, {"score": 0.004081385289516914, "phrase": "in-depth_understanding"}, {"score": 0.003953639783762917, "phrase": "model_transformations"}, {"score": 0.00385431710959668, "phrase": "desirable_features"}, {"score": 0.003805591825381666, "phrase": "transformation_languages"}, {"score": 0.003757480190200645, "phrase": "research_interest"}, {"score": 0.0034812740368914455, "phrase": "real_problems"}, {"score": 0.003437248394635138, "phrase": "rubytl"}, {"score": 0.00337224813954299, "phrase": "hybrid_transformation_language"}, {"score": 0.003287482882222731, "phrase": "ruby_internal_domain_specific_language"}, {"score": 0.003144222265269426, "phrase": "extensible_language"}, {"score": 0.0030457198309616694, "phrase": "new_features"}, {"score": 0.0029502941554043964, "phrase": "core_features"}, {"score": 0.0026475981474045414, "phrase": "possible_features"}, {"score": 0.0024372021710656585, "phrase": "new_language_feature"}, {"score": 0.0021049977753042253, "phrase": "extensible_language_design"}], "paper_keywords": [""], "paper_abstract": "Model transformation is a key technology of model driven software development approaches. Several transformation languages have appeared in the last few years, but more research is still needed for an in-depth understanding of the nature of model transformations and to discover desirable features of transformation languages. Research interest is primarily focused on experimentation with languages by writing transformations for real problems. RubyTL is a hybrid transformation language defined as a Ruby internal domain specific language, and is designed as an extensible language: a plugin mechanism allows new features to be added to core features. In this paper, we describe this plugin mechanism, devised to facilitate the experimentation with possible features of RubyTL. Through an example, we show how to add a new language feature, specifically we will develop a plugin to organize a transformation in several phases. Finally, we discuss the advantages of this extensible language design.", "paper_title": "A plugin-based language to experiment with model transformation", "paper_id": "WOS:000241450700024"}