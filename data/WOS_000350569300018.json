{"auto_keywords": [{"score": 0.032394483004615865, "phrase": "input_data"}, {"score": 0.00481495049065317, "phrase": "enhance_computing_efficiency_of_coarse-grained_reconfigurable_array"}, {"score": 0.00474946741204285, "phrase": "major_bottleneck"}, {"score": 0.004706305193222972, "phrase": "coarse-grained_reconfigurable_arrays"}, {"score": 0.004579147045265106, "phrase": "excessive_configuration"}, {"score": 0.004435112270935294, "phrase": "computing_potential"}, {"score": 0.003660879039645457, "phrase": "configuration_time"}, {"score": 0.003449718244515019, "phrase": "interval_latency"}, {"score": 0.0034027387694902287, "phrase": "configuration_contexts"}, {"score": 0.003356396922662246, "phrase": "proposed_approaches"}, {"score": 0.003325852346387272, "phrase": "input_data_relocation"}, {"score": 0.00325069754015951, "phrase": "line-based_context_switching"}, {"score": 0.0031627430133087616, "phrase": "loop_interval_minimization"}, {"score": 0.0030912681014609858, "phrase": "idr"}, {"score": 0.003021392767766593, "phrase": "first_stage"}, {"score": 0.0028863414975346512, "phrase": "delay_time"}, {"score": 0.0028082176224611542, "phrase": "next_data_flow_graph"}, {"score": 0.002782657297256885, "phrase": "dfg"}, {"score": 0.002719784946429949, "phrase": "lcs"}, {"score": 0.002682669289913153, "phrase": "lcs_mechanism"}, {"score": 0.0026582395558737855, "phrase": "adjacent_independent_dfgs"}, {"score": 0.0025862736445290088, "phrase": "context_switching"}, {"score": 0.0024706424098462606, "phrase": "lim"}, {"score": 0.002327956449278255, "phrase": "coarse-grained_reconfigurable_processor"}, {"score": 0.0021438877099090262, "phrase": "working_frequency"}, {"score": 0.0021050024777066073, "phrase": "avs"}], "paper_keywords": ["REMUS", " coarse-grained reconfigurable array", " configuration approach", " context switching", " parallelization and pipelining"], "paper_abstract": "The major bottleneck of coarse-grained reconfigurable arrays (CGRAs) is the excessive configuration overhead; as a result, computing potential cannot be fully utilized. At run-time, the function of CGRAs can be fully and dynamically reconfigured by changing contexts. Therefore, the frequency of context switching on CGRAs is very high. On the other hand, the configuration time of CGRAs is very long. This paper proposes three configuration approaches to reduce interval latency when switching configuration contexts. These proposed approaches include input data relocation (IDR), line-based context switching (LCS), and loop interval minimization (LIM). IDR relocates input data to the first stage of the pipeline; as a result, the delay time for the input data of the next data flow graph (DFG) is reduced. LCS is a LCS mechanism for adjacent independent DFGs to reduce the interval of context switching, thereby expanding the depth of the pipeline. LIM is used to minimize the interval of loops. Simulations on a coarse-grained reconfigurable processor called reconfigurable multimedia system (REMUS) show that 1080 p@30 fps for H.264 high profile video decoding can be achieved under 200 MHz working frequency. As for AVS and MPEG2 decoding algorithms, much higher performance, i.e., 1080 p@39 fps and 1080 p@41 fps, can be achieved respectively.", "paper_title": "Configuration Approaches to Enhance Computing Efficiency of Coarse-Grained Reconfigurable Array", "paper_id": "WOS:000350569300018"}