{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "last-level_cache_performance"}, {"score": 0.004361428012479218, "phrase": "first-level_cache"}, {"score": 0.004211731831120046, "phrase": "first_time"}, {"score": 0.004114787982556699, "phrase": "last-level_caches"}, {"score": 0.0038820411362656803, "phrase": "algorithm_complexity"}, {"score": 0.00357806560856829, "phrase": "reuse_behavior"}, {"score": 0.003435092524339692, "phrase": "delinquent_loads"}, {"score": 0.002867348342846275, "phrase": "miss_request"}, {"score": 0.002566685388128598, "phrase": "tag_checks"}, {"score": 0.002536926192232391, "phrase": "intermediary_levels"}, {"score": 0.00249293148301837, "phrase": "cache_hierarchy"}, {"score": 0.002324433454350402, "phrase": "miss_rate"}, {"score": 0.002142161017595363, "phrase": "degrading_performance"}], "paper_keywords": [""], "paper_abstract": "While bypassing algorithms have been applied to the first-level cache, we study for the first time their effectiveness for the last-level caches for which miss penalties are significantly higher and where algorithm complexity is not constrained by the speed of the pipeline. Our algorithm monitors the reuse behavior of blocks that are touched by delinquent loads and re-classify them on-the-fly. Blocks classified as bypassed are only installed in the level-1 cache. We leverage the algorithm to early send out a miss request for loads expected to request blocks classified to be bypassed. Such requests are sent to memory directly without tag checks at intermediary levels in the cache hierarchy. Overall, we find that we can robustly reduce the miss rate by 23% and improve IPC with 14% on average for memory bound SPEC2000 applications without degrading performance of the other SPEC2000 applications.", "paper_title": "Enhancing last-level cache performance by block bypassing and early miss determination", "paper_id": "WOS:000241449500005"}