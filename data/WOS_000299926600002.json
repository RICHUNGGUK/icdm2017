{"auto_keywords": [{"score": 0.04562034103087111, "phrase": "performance_analysis"}, {"score": 0.03659429864956849, "phrase": "mate"}, {"score": 0.03526699162337785, "phrase": "performance_models"}, {"score": 0.00481495049065317, "phrase": "transparent_knowledge_specification"}, {"score": 0.00475413908468027, "phrase": "dynamic_tuning_environment"}, {"score": 0.004694092086199672, "phrase": "increasing_use"}, {"score": 0.00459568664065473, "phrase": "continuous_support"}, {"score": 0.004537631845923196, "phrase": "significant_advantages"}, {"score": 0.004499334809770281, "phrase": "parallel_power"}, {"score": 0.004186534737631288, "phrase": "better_behavior"}, {"score": 0.004098725744818192, "phrase": "different_approaches"}, {"score": 0.0036090884921108086, "phrase": "automatic_and_dynamic_tuning"}, {"score": 0.003259702394241964, "phrase": "performance_parameters"}, {"score": 0.0031912706211861324, "phrase": "mathematical_expressions"}, {"score": 0.0031110402375026016, "phrase": "performance_problem"}, {"score": 0.0030071857666598193, "phrase": "tuning_environment"}, {"score": 0.002931569771634119, "phrase": "analysis_steps"}, {"score": 0.002870006736445581, "phrase": "tuning_phase"}, {"score": 0.0026475981474045414, "phrase": "performance_model_specification"}, {"score": 0.002526780881314497, "phrase": "software_code"}, {"score": 0.002281930100792185, "phrase": "implementation_details"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["specification", " automatic development", " performance model", " parallel", " distributed computing", " automatic performance analysis", " dynamic tuning"], "paper_abstract": "The increasing use of parallel/distributed applications demands a continuous support to take significant advantages from parallel power. This includes the evolution of performance analysis and tuning tools which automatically allows for obtaining a better behavior of the applications. Different approaches and tools have been proposed and they are continuously evolving to cover the requirements and expectations of users. One such tool is MATE (Monitoring Analysis and Tuning Environment), which provides automatic and dynamic tuning for parallel/distributed applications. The knowledge used by MATE to analyze and take decisions is based on performance models which include a set of performance parameters and a set of mathematical expressions modeling the solution of the performance problem. These elements are used by the tuning environment to conduct the monitoring and analysis steps, respectively. The tuning phase depends on the results of the performance analysis. This paper presents a methodology to specify performance models. Each performance model specification can be automatically and transparently translated into a piece of software code encapsulating the knowledge to be straightforwardly included in MATE. Applying this methodology, the user does not have to be involved in the implementation details of MATE, which makes the usage of the tool more transparent. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "A methodology for transparent knowledge specification in a dynamic tuning environment", "paper_id": "WOS:000299926600002"}