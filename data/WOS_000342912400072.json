{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "biological_sequence_data"}, {"score": 0.0387236727949532, "phrase": "lazy_evaluation"}, {"score": 0.00481495049065317, "phrase": "biological_sequences"}, {"score": 0.004563880494020726, "phrase": "open-source_library"}, {"score": 0.004260134699483774, "phrase": "language_clojure"}, {"score": 0.004037877545494505, "phrase": "functional_framework"}, {"score": 0.003797978200741566, "phrase": "simple_mechanisms"}, {"score": 0.0036274201504044685, "phrase": "large_datasets"}, {"score": 0.0032836104153151973, "phrase": "biological_sequence_formats"}, {"score": 0.003208999546225013, "phrase": "uniprotxml"}, {"score": 0.003160200215473349, "phrase": "genbank_xml"}, {"score": 0.0031121425124262603, "phrase": "fasta"}, {"score": 0.003064809736127888, "phrase": "fastq."}, {"score": 0.00288255520607591, "phrase": "key_analysis_programs"}, {"score": 0.0028171228266379153, "phrase": "blast"}, {"score": 0.002731971103291716, "phrase": "tmhmm"}, {"score": 0.002690406375639144, "phrase": "interproscan"}, {"score": 0.002472822097373027, "phrase": "clojure's_functional_style"}, {"score": 0.0023079225317714815, "phrase": "bioclojure"}, {"score": 0.0021049977753042253, "phrase": "simple_pipelines"}], "paper_keywords": [""], "paper_abstract": "Motivation: BioClojure is an open-source library for the manipulation of biological sequence data written in the language Clojure. BioClojure aims to provide a functional framework for the processing of biological sequence data that provides simple mechanisms for concurrency and lazy evaluation of large datasets. Results: BioClojure provides parsers and accessors for a range of biological sequence formats, including UniProtXML, Genbank XML, FASTA and FASTQ. In addition, it provides wrappers for key analysis programs, including BLAST, SignalP, TMHMM and InterProScan, and parsers for analyzing their output. All interfaces leverage Clojure's functional style and emphasize laziness and composability, so that BioClojure, and user-defined, functions can be chained into simple pipelines that are thread-safe and seamlessly integrate lazy evaluation.", "paper_title": "Bioclojure: a functional library for the manipulation of biological sequences", "paper_id": "WOS:000342912400072"}