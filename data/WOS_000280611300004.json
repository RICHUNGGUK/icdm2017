{"auto_keywords": [{"score": 0.049604883316905664, "phrase": "memory_hierarchy"}, {"score": 0.03524633097949294, "phrase": "optimized_version"}, {"score": 0.03490781349760261, "phrase": "performance_improvements"}, {"score": 0.00481495049065317, "phrase": "computational_fluid_dynamics_code"}, {"score": 0.004720043307726269, "phrase": "case_study."}, {"score": 0.004673290248999786, "phrase": "current_shift"}, {"score": 0.004611669085594069, "phrase": "computational_power"}, {"score": 0.004520750567829338, "phrase": "multiple_cores"}, {"score": 0.004446349752828045, "phrase": "clock_frequency"}, {"score": 0.004387707794516453, "phrase": "computational_efficiency"}, {"score": 0.004344232223147987, "phrase": "increased_importance"}, {"score": 0.004315487055548749, "phrase": "computational_fluid_dynamics_codes"}, {"score": 0.0041745773539728975, "phrase": "high_throughput"}, {"score": 0.004092240621596351, "phrase": "computational_fluid_dynamics_simulations"}, {"score": 0.004065156038847781, "phrase": "multi-disciplinary_design_optimization"}, {"score": 0.003984968827278219, "phrase": "similar_simulations"}, {"score": 0.003958591403140206, "phrase": "different_input_parameters"}, {"score": 0.0037662262006579023, "phrase": "large_reduction"}, {"score": 0.003728885511755734, "phrase": "design_process"}, {"score": 0.003408990700300338, "phrase": "initial_version"}, {"score": 0.0032217623556814543, "phrase": "large_test_cases"}, {"score": 0.0031476805104529377, "phrase": "cache_memory"}, {"score": 0.0031164532805849432, "phrase": "target_processor"}, {"score": 0.0030855348881460107, "phrase": "detailed_performance_analysis"}, {"score": 0.003014576010931602, "phrase": "global_level"}, {"score": 0.0029648894235196886, "phrase": "data_structures"}, {"score": 0.002595698433525986, "phrase": "translation_lookaside_buffer"}, {"score": 0.0024941578231560055, "phrase": "code_performance"}, {"score": 0.002453027723284009, "phrase": "multi-core_processors"}, {"score": 0.0022648286660146314, "phrase": "blocked_version"}, {"score": 0.0022423402528961144, "phrase": "optimized_code"}, {"score": 0.0021474369836979048, "phrase": "unblocked_version"}, {"score": 0.0021049977753042253, "phrase": "cache_performance"}], "paper_keywords": ["performance evaluation", " cache based architectures", " computational fluid dynamics", " incompressible flow solver", " multi-core performance"], "paper_abstract": "With the current shift of increasing the computational power of a processor by including multiple cores instead of increasing the clock frequency, consideration of computational efficiency is gaining increased importance for computational fluid dynamics codes. This is especially critical for applications that require high throughput. For example, applying computational fluid dynamics simulations to multi-disciplinary design optimization requires a large number of similar simulations with different input parameters. Therefore, a reduction in the runtime of the code can lead to large reduction in the design process. In our case study, a two-dimensional, block-structured computational fluid dynamics code was optimized for performance on machines with hierarchical memory systems. This paper illustrates the techniques applied to transform an initial version of the code to an optimized version that yielded performance improvements of 10% for very small cases to about 50% for large test cases that did not fit into the cache memory of the target processor. A detailed performance analysis of the code starting at the global level down to subroutines and data structures is presented in this paper. The performance improvements can be explained through a reduction of cache misses in all levels of the memory hierarchy. The L1 cache misses were reduced by about 50%, the L2 cache misses by about 80% and the translation lookaside buffer misses by about 90% for the optimized version of the code. The code performance was also evaluated for multi-core processors, where efficiency is especially important when several instances of an application are running simultaneously. In this case, the most optimized version, a blocked version of the optimized code, more effectively maintained efficiency as more cores were activated compared to the unblocked version. This illustrates that optimizing cache performance may be increasingly important as the number of cores per processor continues to rise.", "paper_title": "OPTIMIZATION OF A COMPUTATIONAL FLUID DYNAMICS CODE FOR THE MEMORY HIERARCHY: A CASE STUDY", "paper_id": "WOS:000280611300004"}