{"auto_keywords": [{"score": 0.03700385809508468, "phrase": "workload_distribution_function"}, {"score": 0.00481495049065317, "phrase": "pid_feedback"}, {"score": 0.004761132425263795, "phrase": "load-balanced_parallel_gridless_dsmc._parallel_code"}, {"score": 0.004500891637057374, "phrase": "computational_workload"}, {"score": 0.004376131419366239, "phrase": "hardware_and_software_resources"}, {"score": 0.004254814649568355, "phrase": "load_balancing"}, {"score": 0.004067635935640407, "phrase": "allowable_processors"}, {"score": 0.0038668462001710314, "phrase": "two-component_load-balancing_mechanism"}, {"score": 0.003717528595128948, "phrase": "dynamic_load_maintenance"}, {"score": 0.0036553070575015344, "phrase": "initial_guess"}, {"score": 0.003474799999519295, "phrase": "workload_distribution_inversion"}, {"score": 0.0034359094594153304, "phrase": "efficient_domain_decomposition"}, {"score": 0.0033974527047473044, "phrase": "arbitrary_workloads"}, {"score": 0.003266201217790818, "phrase": "system_resources"}, {"score": 0.0032296377835432533, "phrase": "dynamic_load_balancing"}, {"score": 0.0031577303835881964, "phrase": "process_feedback_control"}, {"score": 0.0029681091946289757, "phrase": "physical_processes"}, {"score": 0.0026222551419772867, "phrase": "one-dimensional_realization"}, {"score": 0.0024786330057813204, "phrase": "load-balancing_technique"}, {"score": 0.0024370965602952496, "phrase": "monte_carlo"}, {"score": 0.0022906498741695094, "phrase": "uniform_workload_distribution"}, {"score": 0.002264982416465872, "phrase": "available_resources"}, {"score": 0.0022020622730208514, "phrase": "usable_system_resources"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Load balancing", " Parallel", " DSMC", " Gridless"], "paper_abstract": "Parallel code presents a non-trivial problem of load balancing computational workload throughout a system of hardware and software resources. The task of load balancing is further complicated when the number of allowable processors changes through time. This paper presents a two-component load-balancing mechanism using optimal initial workload distribution and dynamic load maintenance. The initial guess is provided by inversion of the workload distribution function. Workload distribution inversion enables efficient domain decomposition for arbitrary workloads and easily compensates for changes in system resources. Dynamic load balancing is provided by process feedback control as used, for example, in control mechanisms of physical processes. Proportional, integral, and differential (PID) feedback readily allows controls to compensate for runtime-changes of the workload distribution function. This paper demonstrates a one-dimensional realization of the ideas presented here. We apply this load-balancing technique to our gridless direct simulation Monte Carlo algorithm. We demonstrate that the method does indeed maintain uniform workload distribution across available resources as the workload and usable system resources undergo change through time. Published by Elsevier B.V.", "paper_title": "PID feedback for load-balanced parallel gridless DSMC", "paper_id": "WOS:000284184800016"}