{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "host-based_intrusion_detection"}, {"score": 0.004600596158672458, "phrase": "program's_binary_code"}, {"score": 0.00445332728705756, "phrase": "program's_execution"}, {"score": 0.0035458802311188497, "phrase": "new_data-flow_analysis_algorithm"}, {"score": 0.0033878306639271963, "phrase": "static_data"}, {"score": 0.0033222630615013763, "phrase": "environment-configuration_files"}, {"score": 0.0032792555200980783, "phrase": "command-line_parameters"}, {"score": 0.0032157824854214313, "phrase": "environment_variables"}, {"score": 0.0031535341431377837, "phrase": "acceptable_process_execution"}, {"score": 0.0031127040190005216, "phrase": "environment_dependencies"}, {"score": 0.0030326180561817497, "phrase": "program_model_update"}, {"score": 0.002935393439834135, "phrase": "current_environment"}, {"score": 0.002878556952876824, "phrase": "program_execution"}, {"score": 0.0026969099161088398, "phrase": "specific_calling_contexts"}, {"score": 0.0024939618994290016, "phrase": "system-call_arguments"}, {"score": 0.0024456516553345966, "phrase": "distinct_call_sites"}, {"score": 0.002336527289457915, "phrase": "new_average_reachability_measure"}, {"score": 0.0022615684627308283, "phrase": "call-stack-based_program_models"}], "paper_keywords": ["model-based anomaly detection", " Dyck model", " static binary analysis", " static data-flow analysis"], "paper_abstract": "We perform host-based intrusion detection by constructing a model from a program's binary code and then restricting the program's execution by the model. We improve the effectiveness of such model-based intrusion detection systems by incorporating into the model knowledge of the environment in which the program runs, and by increasing the accuracy of our models with a new data-flow analysis algorithm for context-sensitive recovery of static data. The environment-configuration files, command-line parameters, and environment variables-constrains acceptable process execution. Environment dependencies added to a program model update the model to the current environment at every program execution. Our new static data-flow analysis associates a program's data flows with specific calling contexts that use the data. We use this analysis to differentiate system-call arguments flowing from distinct call sites in the program. Using a new average reachability measure suitable for evaluation of call-stack-based program models, we demonstrate that our techniques improve the precision of several test programs' models from 76% to 100%.", "paper_title": "Environment-sensitive intrusion detection", "paper_id": "WOS:000236107800010"}