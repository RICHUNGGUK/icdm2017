{"auto_keywords": [{"score": 0.03631612053351339, "phrase": "rasp_rule"}, {"score": 0.00481495049065317, "phrase": "answer_set_programming"}, {"score": 0.004642604455537883, "phrase": "declarative_reasoning"}, {"score": 0.004342430078306461, "phrase": "proposed_extension"}, {"score": 0.004316119413538328, "phrase": "rasp"}, {"score": 0.004212453011596424, "phrase": "'resourced_asp"}, {"score": 0.004012500850311087, "phrase": "special_atoms"}, {"score": 0.0036627245728600073, "phrase": "available_amount"}, {"score": 0.0029783256772952073, "phrase": "available_quantities"}, {"score": 0.0029422942175866057, "phrase": "required_resources"}, {"score": 0.0028195727965553367, "phrase": "rasp_programs"}, {"score": 0.002751751956416832, "phrase": "usual_answer"}, {"score": 0.002685558057339722, "phrase": "different_answer"}, {"score": 0.0026209522797963447, "phrase": "different_possible_allocations"}, {"score": 0.0025892330566358503, "phrase": "available_resources"}, {"score": 0.0024511688853030168, "phrase": "standard_asp-solvers"}, {"score": 0.002348883765159185, "phrase": "standard_translation"}, {"score": 0.0022371907579775796, "phrase": "plain_asp-rules"}, {"score": 0.00218334762335187, "phrase": "inference_engine"}, {"score": 0.0021049977753042253, "phrase": "rasp_rules"}], "paper_keywords": ["Answer set programming", " non-monotonic logic programming", " quantitative reasoning", " language extensions"], "paper_abstract": "In this article, we propose an extension of Answer Set Programming (ASP) to support declarative reasoning on consumption and production of resources. We call the proposed extension RASP, standing for 'Resourced ASP'. Resources are modeled by introducing special atoms, called amount-atoms, to which we associate quantities that represent the available amount of a certain resource. The 'firing' of a RASP rule involving amount-atoms can both consume and produce resources. A RASP rule can be fired several times, according to its definition and to the available quantities of required resources. We define the semantics for RASP programs by extending the usual answer set semantics. Different answer sets correspond to different possible allocations of available resources. We then propose an implementation based on standard ASP-solvers. The implementation consists of a standard translation of each RASP rule into a set of plain ASP-rules and of an inference engine that manages the firing of RASP rules.", "paper_title": "Answer Set Programming with Resources", "paper_id": "WOS:000276843800007"}