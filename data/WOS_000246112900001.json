{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pushdown_threads"}, {"score": 0.004416713079266374, "phrase": "thread_algebra"}, {"score": 0.004204054047427536, "phrase": "behavioral_abstraction"}, {"score": 0.003952513974962462, "phrase": "appropriate_program_algebra"}, {"score": 0.003204232566468624, "phrase": "single_stack"}, {"score": 0.0026953359825383646, "phrase": "pushdown_thread_inclusion"}, {"score": 0.0023527296826339225, "phrase": "borderline_crossing"}, {"score": 0.0022670785913397637, "phrase": "equivalence_problem"}, {"score": 0.0021049977753042253, "phrase": "inclusion_problem"}], "paper_keywords": [""], "paper_abstract": "Threads as contained in a thread algebra emerge from the behavioral abstraction from programs in an appropriate program algebra. Threads may make use of services such as stacks, and a thread using a single stack is called a pushdown thread. Equivalence of pushdown threads is shown decidable whereas pushdown thread inclusion is undecidable. This is again an example of a borderline crossing where the equivalence problem is decidable, whereas the inclusion problem is not.", "paper_title": "Decision problems for pushdown threads", "paper_id": "WOS:000246112900001"}