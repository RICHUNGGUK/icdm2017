{"auto_keywords": [{"score": 0.02481784958097196, "phrase": "left-recursive_pegs"}, {"score": 0.00481495049065317, "phrase": "parsing_expression_grammars"}, {"score": 0.004742290714667451, "phrase": "expression_grammars"}, {"score": 0.004485085675709643, "phrase": "deterministic_context-free_languages"}, {"score": 0.004285010985001827, "phrase": "top-down_parser"}, {"score": 0.003991305899593133, "phrase": "efficient_implementations"}, {"score": 0.00395101799538683, "phrase": "peg_libraries"}, {"score": 0.0038520615699124123, "phrase": "frequently_missed_feature"}, {"score": 0.0036245239349157236, "phrase": "context-free_grammars"}, {"score": 0.00351582806482809, "phrase": "left-associative_operations"}, {"score": 0.0034277338119963886, "phrase": "simple_conservative_extension"}, {"score": 0.003291336101694653, "phrase": "useful_meaning"}, {"score": 0.0032251796659158696, "phrase": "indirect_left-recursive_rules"}, {"score": 0.0030500051941781034, "phrase": "left-recursive_idioms"}, {"score": 0.002943502888225748, "phrase": "similar_results"}, {"score": 0.0026863605504566924, "phrase": "left-recursive_peg._pegs"}, {"score": 0.0025663181430010686, "phrase": "low-level_parsing_machine"}, {"score": 0.002390133671838151, "phrase": "parsing_machine"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parsing Expression Grammars", " Parsing", " Left recursion", " Parsing machine", " Pacicrat parsing"], "paper_abstract": "Parsing Expression Grammars (PEGs) are a formalism that can describe all deterministic context-free languages through a set of rules that specify a top-down parser for some language. PEGs are easy to use, and there are efficient implementations of PEG libraries in several programming languages. A frequently missed feature of PEGs is left recursion, which is commonly used in Context-Free Grammars (CFGs) to encode left-associative operations. We present a simple conservative extension to the semantics of PEGs that gives useful meaning to direct and indirect left-recursive rules, and show that our extensions make it easy to express left-recursive idioms from CFGs in PEGs, with similar results. We prove the conservativeness of these extensions, and also prove that they work with any left-recursive PEG. PEGs can also be compiled to programs in a low-level parsing machine. We present an extension to the semantics of the operations of this parsing machine that let it interpret left-recursive PEGs, and prove that this extension is correct with regard to our semantics for left-recursive PEGs. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Left recursion in Parsing Expression Grammars", "paper_id": "WOS:000345180900002"}