{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "learning_consideration"}, {"score": 0.004732785510739708, "phrase": "traditional_scheduling"}, {"score": 0.004678785623021003, "phrase": "job_processing_times"}, {"score": 0.004417848254181138, "phrase": "entire_process"}, {"score": 0.004317576641196539, "phrase": "repeated_processing"}, {"score": 0.004268293864953256, "phrase": "similar_tasks"}, {"score": 0.004219571240696568, "phrase": "workers'_skills"}, {"score": 0.004053362743156545, "phrase": "learning_effects"}, {"score": 0.0039841418890102925, "phrase": "considerable_attention"}, {"score": 0.0036763623220059933, "phrase": "common_objective"}, {"score": 0.003531474887552889, "phrase": "multiple_agents"}, {"score": 0.0034911335714333507, "phrase": "different_objectives"}, {"score": 0.003353521531649663, "phrase": "common_processing_resource"}, {"score": 0.0031845067058084583, "phrase": "single-machine_two-agent_scheduling_problem"}, {"score": 0.00298942278888105, "phrase": "total_tardiness"}, {"score": 0.00290473242917264, "phrase": "first_agent"}, {"score": 0.00283870598459543, "phrase": "tardy_job"}, {"score": 0.002758273619951683, "phrase": "second_agent"}, {"score": 0.002711109302199029, "phrase": "branch-and-bound_algorithm"}, {"score": 0.0026191799769765085, "phrase": "lower_bound"}, {"score": 0.0025158514649823724, "phrase": "optimal_solution"}, {"score": 0.0023346234464901978, "phrase": "near-optimal_solutions"}, {"score": 0.002294686545883412, "phrase": "computational_experiment"}, {"score": 0.0021789194955896124, "phrase": "proposed_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Scheduling", " Single-machine", " Two-agent", " Learning effect"], "paper_abstract": "In traditional scheduling, job processing times are assumed to be known and fixed over the entire process. However, repeated processing of similar tasks improves workers' skills. In fact, scheduling with learning effects has received considerable attention recently. On the other hand, it is assumed that there is a common objective for all the jobs. In many management situations, multiple agents pursuing different objectives compete on the usage of a common processing resource. In this paper, we studied a single-machine two-agent scheduling problem with learning effects where the objective is to minimize the total tardiness of jobs from the first agent given that no tardy job is allowed for the second agent. A branch-and-bound algorithm incorporated several properties and a lower bound is developed to search for the optimal solution. In addition, two heuristic algorithms are also proposed to search for the near-optimal solutions. A computational experiment is conducted to evaluate the performance of the proposed algorithms. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Two-agent scheduling with learning consideration", "paper_id": "WOS:000297397600044"}