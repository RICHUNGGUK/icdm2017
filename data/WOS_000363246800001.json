{"auto_keywords": [{"score": 0.04852232688729349, "phrase": "abstract_testing"}, {"score": 0.042070971187967834, "phrase": "abstract_test_cases"}, {"score": 0.03445800071283227, "phrase": "verification_scenarios"}, {"score": 0.00481495049065317, "phrase": "test_cases"}, {"score": 0.004081385289516914, "phrase": "traditional_test_cases"}, {"score": 0.0034024277222012597, "phrase": "abstract_tests"}, {"score": 0.0031845067058084583, "phrase": "source_code_level"}, {"score": 0.002883439044844259, "phrase": "source_code"}, {"score": 0.0027437235598539904, "phrase": "software_model_checker"}, {"score": 0.0026107601878587816, "phrase": "migration_path"}, {"score": 0.0025678829712650437, "phrase": "traditional_tests"}, {"score": 0.0024232694434408093, "phrase": "smooth_transition"}, {"score": 0.002363806685815014, "phrase": "new_technique"}, {"score": 0.0021579641460002523, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "automotive_systems_domain"}], "paper_keywords": ["Testing", " Verification", " Static analysis", " Bounded model checking", " Automotive software quality", " Safety-critical software"], "paper_abstract": "In this article we propose a technique, called abstract testing, which replaces traditional test cases by abstract test cases. By doing so, fewer test cases are needed, and they are linked more closely to the requirements. Abstract tests can be considered as verification scenarios on the source code level which are derived from the requirements. Checking verification scenarios against the source code is done automatically using a software model checker. We also suggest a migration path from traditional tests to abstract test cases, which provides a smooth transition towards this new technique. Finally, we demonstrate feasibility of abstract testing by a case study from the automotive systems domain.", "paper_title": "Bridging the gap between test cases and requirements by abstract testing", "paper_id": "WOS:000363246800001"}