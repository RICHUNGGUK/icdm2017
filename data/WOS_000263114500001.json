{"auto_keywords": [{"score": 0.02602480238127829, "phrase": "average_computers"}, {"score": 0.00481495049065317, "phrase": "program_functionality"}, {"score": 0.004723322467153553, "phrase": "fitness_values"}, {"score": 0.004407599980762272, "phrase": "markov_chain_convergence_theorems"}, {"score": 0.004357061494162031, "phrase": "general_upper_bounds"}, {"score": 0.003692997523960715, "phrase": "five_computer_models"}, {"score": 0.003419507021707454, "phrase": "nand"}, {"score": 0.003265175268104804, "phrase": "lookup_tables"}, {"score": 0.0031178024467857215, "phrase": "similar_convergence_results"}, {"score": 0.0030232568024943455, "phrase": "linear_computer_programs"}, {"score": 0.0028317319086202217, "phrase": "ad-hoc_rules"}, {"score": 0.0027778853222479916, "phrase": "gp"}, {"score": 0.0027247727563746694, "phrase": "new_heuristics"}, {"score": 0.002631959004685823, "phrase": "long_programs"}, {"score": 0.0024181413029825205, "phrase": "computational_importance"}, {"score": 0.0023357478549318102, "phrase": "reversible_and_quantum_computers"}, {"score": 0.0022911901892022847, "phrase": "genetic_algorithm_population"}, {"score": 0.0021049977753042253, "phrase": "genetic_programming"}], "paper_keywords": ["Search landscapes", " Evolutionary computation", " Genetic algorithms", " Genetic programming"], "paper_abstract": "The distribution of fitness values (landscapes) of programs tends to a limit as the programs get bigger. We use Markov chain convergence theorems to give general upper bounds on the length of programs needed for convergence. How big programs need to be to approach the limit depends on the type of the computer they run on. We give bounds (exponential in N,N log Nand smaller) for five computer models: any, average or amorphous or random, cyclic, bit flip and four functions (AND, NAND, OR and NOR). Programs can be treated as lookup tables which map between their inputs and their outputs. Using this we prove similar convergence results for the distribution of functions implemented by linear computer programs. We show most functions are constants and the remainder are mostly parsimonious. The effect of ad-hoc rules on genetic programming (GP) are described and new heuristics are proposed. We give bounds on how long programs need to be before the distribution of their functionality is close to its limiting distribution, both in general and for average computers. The computational importance of destroying information is discussed with respect to reversible and quantum computers. Mutation randomizes a genetic algorithm population in 1/4 (l + 1)(log (l) + 4) generations. Results for average computers and a model like genetic programming are confirmed experimentally.", "paper_title": "Scaling of program functionality", "paper_id": "WOS:000263114500001"}