{"auto_keywords": [{"score": 0.04900761970662832, "phrase": "demand_systems"}, {"score": 0.04194588365523173, "phrase": "patching_stream"}, {"score": 0.03521373377481804, "phrase": "patching_cost"}, {"score": 0.03189734652770148, "phrase": "new_technique"}, {"score": 0.02428489495146662, "phrase": "original_patching"}, {"score": 0.00481495049065317, "phrase": "efficient_bandwidth_sharing"}, {"score": 0.0046192222897398685, "phrase": "efficient_bandwidth-sharing_technique"}, {"score": 0.004348580182733617, "phrase": "on-going_regular_multicast"}, {"score": 0.004203343568960231, "phrase": "local_buffer"}, {"score": 0.0038683363637006902, "phrase": "patching_data"}, {"score": 0.0036005006349430586, "phrase": "stream_sharing"}, {"score": 0.0035599338383885447, "phrase": "service_delay"}, {"score": 0.003415047118340286, "phrase": "time_distance"}, {"score": 0.0033765627434550432, "phrase": "last_regular_multicast_enlarges"}, {"score": 0.003313380246267812, "phrase": "new_requests_increases"}, {"score": 0.003251376167695528, "phrase": "new_regular_multicast"}, {"score": 0.0028058141911641225, "phrase": "video_requests"}, {"score": 0.0026113524778702602, "phrase": "extra_data"}, {"score": 0.0021614767508781048, "phrase": "proposed_technique"}, {"score": 0.0021049977753042253, "phrase": "double_patching"}], "paper_keywords": ["multimedia communications", " multicast", " latency", " on-demand service", " performance evaluation"], "paper_abstract": "Patching is an efficient bandwidth-sharing technique for video-on-demand systems. In this environment, a client joins an on-going regular multicast to receive and cache the data in a local buffer. The server needs to send only the leading portion of the video in a patching stream. When the client finishes playing back the patching data, it continues the playback using the data already cached in the buffer. Although this strategy enables stream sharing without the service delay, the performance of Patching has limitation: as the time distance to the last regular multicast enlarges, the patching cost for new requests increases and eventually, a new regular multicast must be scheduled to balance the cost. In this paper, we address this problem by proposing a new technique called Double Patching. Our research is based on the observation that a patching stream can be shared by the video requests arriving in the next w(p) time units if it delivers an additional 2.w(p) time units of video data. With these extra data, the patching cost for these requests can be dramatically reduced. In the new technique, a client uses no more than two download channels at any one time. Thus, its implementation cost is the same as that of the original Patching. As for its performance, our study shows that the improvement achieved by the proposed technique is significant. In many cases, Double Patching doubles the performance of the original Patching.", "paper_title": "A double patching technique for efficient bandwidth sharing in video-on-demand systems", "paper_id": "WOS:000243049400006"}