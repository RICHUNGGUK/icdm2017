{"auto_keywords": [{"score": 0.04936538823130262, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "concurrent_linked-list_implementations"}, {"score": 0.004568326972997448, "phrase": "rich_set"}, {"score": 0.00450020161335541, "phrase": "synchronization_primitives"}, {"score": 0.004399905285945236, "phrase": "shared-state_concurrency_abstractions"}, {"score": 0.004174451361776433, "phrase": "software_transactional_memory"}, {"score": 0.003901407184706592, "phrase": "atomic_read-modify-write"}, {"score": 0.0036461569988218267, "phrase": "systematic_comparison"}, {"score": 0.0035648266669315943, "phrase": "different_concurrent_programming_models"}, {"score": 0.0029984960344766705, "phrase": "full_two_orders"}, {"score": 0.002953711377604328, "phrase": "magnitude_difference"}, {"score": 0.0027811441123794427, "phrase": "fastest_implementation"}, {"score": 0.002678433668156678, "phrase": "performance_results"}, {"score": 0.0026384167183586015, "phrase": "new_insights"}, {"score": 0.0025795066118838067, "phrase": "relative_performance"}, {"score": 0.0025219085140220773, "phrase": "programming_models"}, {"score": 0.0021049977753042253, "phrase": "stm-based_implementations"}], "paper_keywords": ["Languages", " Performance"], "paper_abstract": "Haskell has a rich set of synchronization primitives for implementing shared-state concurrency abstractions, ranging from the very high level (Software Transactional Memory) to the very low level (mutable variables with atomic read-modify-write). In this paper we perform a systematic comparison of these different concurrent programming models by using them to implement the same abstraction: a concurrent linked-list. Our results are somewhat surprising: there is a full two orders of magnitude difference in performance between the slowest and the fastest implementation. Our analysis of the performance results gives new insights into the relative performance of the programming models and their implementation. Finally, we suggest the addition of a single primitive which in our experiments improves the performance of one of the STM-based implementations by more than a factor of 7.", "paper_title": "Comparing the Performance of Concurrent Linked-List Implementations in Haskell", "paper_id": "WOS:000209232900004"}