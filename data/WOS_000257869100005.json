{"auto_keywords": [{"score": 0.012522993096132154, "phrase": "shared_data"}, {"score": 0.011784939146997131, "phrase": "off-chip_references"}, {"score": 0.00481495049065317, "phrase": "critical_goals"}, {"score": 0.004766090327062509, "phrase": "code_optimization"}, {"score": 0.004552255360140208, "phrase": "off-chip_memory_accesses"}, {"score": 0.0042819270655224916, "phrase": "performance_and_power_angles"}, {"score": 0.004216880725292, "phrase": "conventional_data_locality_optimization_techniques"}, {"score": 0.004089725258435817, "phrase": "data_access_pattern"}, {"score": 0.0033857878144822906, "phrase": "parallelized_application_code"}, {"score": 0.0032336801561165113, "phrase": "parallel_processors"}, {"score": 0.003010496595090984, "phrase": "on-chip_memory_space"}, {"score": 0.0027041907335656782, "phrase": "short_period"}, {"score": 0.0025826247025542213, "phrase": "polyhedral_tool"}, {"score": 0.002261204313587616, "phrase": "publicly_available_compiler_infrastructure"}, {"score": 0.002126635713519053, "phrase": "data_locality"}, {"score": 0.0021049977753042253, "phrase": "shared_data_elements"}], "paper_keywords": ["MPSoC", " memory management", " compilers", " optimization", " data locality", " interprocessor sharing"], "paper_abstract": "One of the critical goals in code optimization for Multiprocessor-System-on-a-Chip (MPSoC) architectures is to minimize the number of off-chip memory accesses. This is because such accesses can be extremely costly from both performance and power angles. Although conventional data locality optimization techniques can be used for improving data access pattern of each processor independently, such techniques usually do not consider locality for shared data. This paper proposes a strategy that reduces the number of off-chip references due to shared data. It achieves this goal by restructuring a parallelized application code in such a fashion that a given data block is accessed by parallel processors within the same time frame so that its reuse is maximized while it is in the on-chip memory space. This tends to minimize the number of off-chip references, since the accesses to a given data block are clustered within a short period of time during execution. Our approach employs a polyhedral tool that helps us isolate computations that manipulate a given data block. In order to test the effectiveness of our approach, we implemented it by using a publicly available compiler infrastructure and conducted experiments with 12 data-intensive embedded applications. Our results show that optimizing data locality for shared data elements is very useful in practice.", "paper_title": "Compiler-directed code restructuring for improving performance of MPSoCs", "paper_id": "WOS:000257869100005"}