{"auto_keywords": [{"score": 0.03669884834098149, "phrase": "shape_graphs"}, {"score": 0.00481495049065317, "phrase": "pointer_programs"}, {"score": 0.004757643419056999, "phrase": "difficult_problems"}, {"score": 0.004608121749000898, "phrase": "shape_graph_logic"}, {"score": 0.004553265070135597, "phrase": "shape_system"}, {"score": 0.004305740330804528, "phrase": "program_point"}, {"score": 0.004220624516321415, "phrase": "analysis_tool"}, {"score": 0.0038810583785936505, "phrase": "automatic_verification"}, {"score": 0.0038195342195623764, "phrase": "complex_data_structures"}, {"score": 0.0037740295668681014, "phrase": "splay_trees"}, {"score": 0.003714195746979591, "phrase": "avl_trees"}, {"score": 0.003684634192576662, "phrase": "aa_trees"}, {"score": 0.003611751858608048, "phrase": "proposed_shape_graph_logic"}, {"score": 0.003526186748088922, "phrase": "hoare_logic"}, {"score": 0.003255295296893174, "phrase": "mutable_data_structures"}, {"score": 0.0029931603112397084, "phrase": "verification_stage"}, {"score": 0.002957471572421436, "phrase": "proposed_shape_system"}, {"score": 0.002898930717812433, "phrase": "lightweight_shape_declarations"}, {"score": 0.00287583918696114, "phrase": "recursive_structure_type_declarations"}, {"score": 0.0026126405272417783, "phrase": "analysis_stage"}, {"score": 0.0022803854904010347, "phrase": "second_stage"}, {"score": 0.002262209824105154, "phrase": "traditional_hoare_logic_rules"}, {"score": 0.002147540520631409, "phrase": "verification_conditions"}, {"score": 0.0021049977753042253, "phrase": "general_theorem_provers"}], "paper_keywords": ["shape graph logic", " program Verification", " shape analysis", " automated theorem proving", " loop invariant inference"], "paper_abstract": "Analysis and verification of pointer programs are still difficult problems so far. This paper uses a shape graph logic and a shape system to solve these problems in two stages. First, shape graphs at every program point are constructed using an analysis tool. Then, they are used to support the verification of other properties (e.g., orderedness). Our prototype supports automatic verification of programs manipulating complex data structures such as splay trees, treaps, AVL trees and AA trees, etc. The proposed shape graph logic, as an extension to Hoare logic, uses shape graphs directly as assertions. It can be used in the analysis and verification of programs manipulating mutable data structures. The benefit using shape graphs as assertions is that it is convenient for acquiring the relations between pointers in the verification stage. The proposed shape system requires programmers to provide lightweight shape declarations in recursive structure type declarations. It can help rule out programs that construct shapes deviating from what programmers expect (reflected in shape declarations) in the analysis stage. As a benefit, programmers need not provide specifications (e.g., pre-/post-conditions, loop invariants) about pointers. Moreover, we present a method doing verification in the second stage using traditional Hoare logic rules directly by eliminating aliasing with the aid of shape graphs. Thus, verification conditions could be discharged by general theorem provers.", "paper_title": "A Shape Graph Logic and A Shape System", "paper_id": "WOS:000326953200011"}