{"auto_keywords": [{"score": 0.04310075025322694, "phrase": "low_level_heuristics"}, {"score": 0.010455742231697755, "phrase": "proposed_framework"}, {"score": 0.009411951609351933, "phrase": "six_domains"}, {"score": 0.00481495049065317, "phrase": "monte_carlo"}, {"score": 0.004721602309430702, "phrase": "combinatorial_optimization_problems"}, {"score": 0.00459393336391459, "phrase": "heuristic_selection_process"}, {"score": 0.004469700997700534, "phrase": "different_problem_instances"}, {"score": 0.004383016741930174, "phrase": "different_problem_domains"}, {"score": 0.004331811712726697, "phrase": "traditional_hyper-heuristic_framework"}, {"score": 0.004021065055449586, "phrase": "high_level_strategy"}, {"score": 0.0038665369393234713, "phrase": "current_decision_point"}, {"score": 0.003776674472150248, "phrase": "monte_carlo_tree"}, {"score": 0.0037471850931318942, "phrase": "hyper-heuristic_framework"}, {"score": 0.003674461410107989, "phrase": "search_space"}, {"score": 0.003547084456662448, "phrase": "monte_carlo_tree_search"}, {"score": 0.003397362086358944, "phrase": "best_sequence"}, {"score": 0.0032924448113309797, "phrase": "current_state"}, {"score": 0.00310435218261112, "phrase": "memory_mechanism"}, {"score": 0.0029966788947444535, "phrase": "different_population_updating_rules"}, {"score": 0.0028365413717574544, "phrase": "hyper-heuristic_competition"}, {"score": 0.002792375587031108, "phrase": "test_suite"}, {"score": 0.002501835053002899, "phrase": "time_windows"}, {"score": 0.002223927963267319, "phrase": "best_known_results"}, {"score": 0.0021551702945512494, "phrase": "scientific_literature"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Hyper-heuristic", " Monte Carlo tree search", " Timetabling", " Personnel scheduling"], "paper_abstract": "Hyper-heuristics aim to automate the heuristic selection process in order to operate well across different problem instances, or even across different problem domains. A traditional hyper-heuristic framework has two levels, a high level strategy and a set of low level heuristics. The role of the high level strategy is to decide which low level heuristic should be executed at the current decision point. This paper proposes a Monte Carlo tree search hyper-heuristic framework. We model the search space of the low level heuristics as a tree and use Monte Carlo tree search to search through the tree in order to identify the best sequence of low level heuristics to be applied to the current state. To improve the effectiveness of the proposed framework, we couple it with a memory mechanism which contains a population of solutions, utilizing different population updating rules. The generality of the proposed framework is demonstrated using the six domains of the hyper-heuristic competition (CHeSC) test suite (boolean satisfiability (MAX-SAT), one dimensional bin packing, permutation flow shop, personnel scheduling, traveling salesman and vehicle routing with time windows). The results demonstrate that the proposed hyper-heuristic generalizes well over all six domains and obtains competitive, if not better results, when compared to the best known results that have previously been presented in the scientific literature. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Population based Monte Carlo tree search hyper-heuristic for combinatorial optimization problems", "paper_id": "WOS:000355050200015"}