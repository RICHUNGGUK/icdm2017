{"auto_keywords": [{"score": 0.04598733768200655, "phrase": "nested_logic_programs"}, {"score": 0.00481495049065317, "phrase": "answer_set_programming"}, {"score": 0.004229556887896042, "phrase": "ordered_disjunction"}, {"score": 0.0037150687722055727, "phrase": "nested_preference_statements"}, {"score": 0.003398015125667192, "phrase": "logic_programs_with_ordered_disjunction"}, {"score": 0.002984373546099842, "phrase": "simple_way"}, {"score": 0.002774177013833754, "phrase": "lpods"}, {"score": 0.0026423134393535265, "phrase": "lpods_framework"}, {"score": 0.002578745296475411, "phrase": "proper_way"}, {"score": 0.0022830706430588482, "phrase": "translation_procedure"}, {"score": 0.0022101055924375725, "phrase": "nested_ordered_disjunction_program"}, {"score": 0.0021049977753042253, "phrase": "disjunctive_logic_program"}], "paper_keywords": ["Answer Set Programming", " Preference Handling", " Nested Preferences"], "paper_abstract": "In this paper, we define a class of nested logic programs, called Nested Logic Programs with Ordered Disjunction (LPODs(+)), which makes it possible to specify conditional (qualitative) preferences by means of nested preference statements. To this end, we augment the syntax of Logic Programs with Ordered Disjunction (LPODs) to capture more general expressions. We define the LPODs(+) semantics in a simple way and we extend most of the results of LPODs showing how our approach generalizes the LPODs framework in a proper way. We also show how the LPODs(+) semantics can be computed in terms of a translation procedure that maps a nested ordered disjunction program (OD+-program) into a disjunctive logic program.", "paper_title": "Nested Preferences in Answer Set Programming", "paper_id": "WOS:000299978400003"}