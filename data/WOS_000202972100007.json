{"auto_keywords": [{"score": 0.04523169088523293, "phrase": "dsu"}, {"score": 0.03646953315723598, "phrase": "ginseng"}, {"score": 0.00481495049065317, "phrase": "practical_dynamic_software"}, {"score": 0.004764004403553372, "phrase": "c._software"}, {"score": 0.004359794046948005, "phrase": "dynamic_software_updating"}, {"score": 0.004003925104720979, "phrase": "on-line_upgrades"}, {"score": 0.0038780652371817447, "phrase": "redundant_hardware"}, {"score": 0.003100800861459349, "phrase": "dynamic_patch"}, {"score": 0.002950374774004939, "phrase": "simple_runtime_support"}, {"score": 0.002532359001507531, "phrase": "gnu_zebra"}, {"score": 0.0022762383517229957, "phrase": "performance_experiments"}, {"score": 0.0021049977753042253, "phrase": "updating_support"}], "paper_keywords": ["design", " languages", " performance", " dynamic software updating", " type wrapping", " function indirection", " loop extraction"], "paper_abstract": "Software updates typically require stopping and restarting an application, but many systems cannot afford to halt service, or would prefer not to. Dynamic software updating (DSU) addresses this difficulty by permitting programs to be updated while they run. DSU is appealing compared to other approaches for on-line upgrades because it is quite general and requires no redundant hardware. The challenge is in making DSU practical: it should be flexible, and yet safe, efficient, and easy to use. In this paper, we present Ginseng, a DSU implementation for C that aims to meet this challenge. We compile programs specially so that they can be dynamically patched, and generate most of a dynamic patch automatically. Ginseng performs a series of analyses that when combined with some simple runtime support ensure that an update will not violate type-safety while guaranteeing that data is kept up-to-date. We have used Ginseng to construct and dynamically apply patches to three substantial open-source server programs - Very Secure FTP daemon, OpenSSH sshd daemon, and GNU Zebra. In total, we dynamically patched each program with three years' worth of releases. Though the programs changed substantially, the majority of updates were easy to generate. Performance experiments show that all patches could be applied in less than 5 ms, and that the overhead on application throughput due to updating support ranged from 0 to at most 32%.", "paper_title": "Practical dynamic software updating for C", "paper_id": "WOS:000202972100007"}