{"auto_keywords": [{"score": 0.04871093899700793, "phrase": "mapreduce"}, {"score": 0.015569792469079708, "phrase": "commapreduce"}, {"score": 0.009969708051013618, "phrase": "large_scale_datasets"}, {"score": 0.009732971605102739, "phrase": "mappers"}, {"score": 0.006717769805082281, "phrase": "big_data_applications"}, {"score": 0.00481495049065317, "phrase": "lightweight_communication_mechanisms"}, {"score": 0.004722791767189843, "phrase": "parallel_programming_framework"}, {"score": 0.00456571874088313, "phrase": "parallel_applications"}, {"score": 0.00393032656248792, "phrase": "final_results"}, {"score": 0.0038179283509963695, "phrase": "original_data"}, {"score": 0.003637669525737665, "phrase": "unpromising_intermediate_data"}, {"score": 0.0034325187732054093, "phrase": "simple_communication_mechanisms"}, {"score": 0.002883718207958817, "phrase": "efficient_lightweight_communication_mechanisms"}, {"score": 0.0026687841359431127, "phrase": "prepositive"}, {"score": 0.0026430660986106955, "phrase": "postpositive"}, {"score": 0.0025549840900344596, "phrase": "shared_information"}, {"score": 0.002530359917257626, "phrase": "effectively_process"}, {"score": 0.0022202042044679984, "phrase": "existing_characteristics"}, {"score": 0.002177600561610171, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["MapReduce", " Hadoop", " Communication mechanism"], "paper_abstract": "As a parallel programming framework, MapReduce can process scalable and parallel applications with large scale datasets. The executions of Mappers and Reducers are independent of each other. There is no communication among Mappers, neither among Reducers. When the amount of final results is much smaller than the original data, it is a waste of time processing the unpromising intermediate data. We observe that this waste can be significantly reduced by simple communication mechanisms to enhance the performance of MapReduce. In this paper, we propose ComMapReduce, an efficient framework that extends and improves MapReduce for big data applications in the cloud. ComMapReduce can effectively obtain certain shared information with efficient lightweight communication mechanisms. Three basic communication strategies, Lazy, Eager and Hybrid, and two optimization communication strategies, Prepositive and Postpositive, are proposed to obtain the shared information and effectively process big data applications. We also illustrate the implementations of three typical applications with large scale datasets on ComMapReduce. Our extensive experiments demonstrate that ComMapReduce outperforms MapReduce in all metrics without affecting the existing characteristics of MapReduce. Crown Copyright (C) 2013 Published by Elsevier B.V. All rights reserved.", "paper_title": "ComMapReduce: An improvement of MapReduce with lightweight communication mechanisms", "paper_id": "WOS:000329382100015"}