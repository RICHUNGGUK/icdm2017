{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "autofix"}, {"score": 0.0044430006374681285, "phrase": "high-quality_fix_suggestions"}, {"score": 0.004306205029641728, "phrase": "whole_debugging_process"}, {"score": 0.004154995396099332, "phrase": "simple_specification_elements"}, {"score": 0.0037997077863530897, "phrase": "dynamic_analysis_techniques"}, {"score": 0.0037658881407605445, "phrase": "fault_detection"}, {"score": 0.0035532533960012298, "phrase": "autofix_supporting_tool"}, {"score": 0.0034902664176377943, "phrase": "faulty_program"}, {"score": 0.0033227310662785293, "phrase": "validated_fixes"}, {"score": 0.0031210475158175406, "phrase": "extensive_experimental_evaluation"}, {"score": 0.00298450444597311, "phrase": "different_maturity"}, {"score": 0.002574788013427524, "phrase": "competent_programmers"}, {"score": 0.0025178072071268534, "phrase": "used_computational_resources"}, {"score": 0.002451088210833819, "phrase": "average_time"}, {"score": 0.0023861329619604666, "phrase": "commodity_hardware"}, {"score": 0.002251227801482381, "phrase": "automated_program_fixing"}, {"score": 0.0021915573326125428, "phrase": "autofix_approach"}, {"score": 0.0021239335561699106, "phrase": "debugging_burden"}, {"score": 0.0021049977753042253, "phrase": "real-world_scenarios"}], "paper_keywords": ["Automatic program repair", " contracts", " dynamic analysis"], "paper_abstract": "This paper describes AutoFix, an automatic debugging technique that can fix faults in general-purpose software. To provide high-quality fix suggestions and to enable automation of the whole debugging process, AutoFix relies on the presence of simple specification elements in the form of contracts (such as pre- and postconditions). Using contracts enhances the precision of dynamic analysis techniques for fault detection and localization, and for validating fixes. The only required user input to the AutoFix supporting tool is then a faulty program annotated with contracts; the tool produces a collection of validated fixes for the fault ranked according to an estimate of their suitability. In an extensive experimental evaluation, we applied AutoFix to over 200 faults in four code bases of different maturity and quality (of implementation and of contracts). AutoFix successfully fixed 42 percent of the faults, producing, in the majority of cases, corrections of quality comparable to those competent programmers would write; the used computational resources were modest, with an average time per fix below 20 minutes on commodity hardware. These figures compare favorably to the state of the art in automated program fixing, and demonstrate that the AutoFix approach is successfully applicable to reduce the debugging burden in real-world scenarios.", "paper_title": "Automated Fixing of Programs with Contracts", "paper_id": "WOS:000337950500001"}