{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "computer_simulation"}, {"score": 0.0324337131484804, "phrase": "ecg_simulation"}, {"score": 0.015533978881684767, "phrase": "hybrid_environments"}, {"score": 0.009554881027034648, "phrase": "lps"}, {"score": 0.004466519142879166, "phrase": "parallel_computation"}, {"score": 0.004439753960631346, "phrase": "reasonable_scheduling"}, {"score": 0.004360433436562092, "phrase": "ecg"}, {"score": 0.004244040105917499, "phrase": "calculation_speed"}, {"score": 0.004205940624913343, "phrase": "platform_adaptability"}, {"score": 0.004168181737829043, "phrase": "parallel_algorithm"}, {"score": 0.003972429785872538, "phrase": "cpu-gpu_hybrid_environments"}, {"score": 0.003924939723156543, "phrase": "scheduling_algorithms"}, {"score": 0.003785836059995376, "phrase": "pure_self-scheduling"}, {"score": 0.0036958398682001015, "phrase": "gpu_performance"}, {"score": 0.00362974436427641, "phrase": "dynamic_scheduling_overhead"}, {"score": 0.0035648266669315943, "phrase": "load-prediction_scheduling"}, {"score": 0.003459191419478298, "phrase": "aforementioned_problems"}, {"score": 0.003356675879109443, "phrase": "best_performance"}, {"score": 0.003326515807982512, "phrase": "hybrid_environment"}, {"score": 0.0031893014610230985, "phrase": "scheduling_parameters"}, {"score": 0.003104086547947925, "phrase": "scheduling_approach"}, {"score": 0.002993987272124797, "phrase": "ecg_simulation_algorithms"}, {"score": 0.002958159666874001, "phrase": "proposed_method"}, {"score": 0.0027686143852727156, "phrase": "heavy_workloads"}, {"score": 0.0027354763093906547, "phrase": "strong_computational_ability"}, {"score": 0.002719055901632759, "phrase": "light_workloads"}, {"score": 0.002686509402739493, "phrase": "weak_computational_ability"}, {"score": 0.0026463721181523873, "phrase": "dynamic-scheduling_and_static-scheduling_methods"}, {"score": 0.0025371413754846474, "phrase": "sliding_window_mechanism"}, {"score": 0.002367368688024317, "phrase": "experimental_results"}, {"score": 0.002290227534601535, "phrase": "lps_algorithm"}], "paper_keywords": ["Computer simulation of ECG", " Load-Prediction Scheduling", " Sliding Window Mechanism"], "paper_abstract": "This paper proposes an algorithm that allows fully utilize the Central Processing Unit-Graphics Processing Unit (CPU-GPU) hybrid architecture to conduct parallel computation and reasonable scheduling for computer simulation of electrocardiogram (ECG). This algorithm is realized by accelerating calculation speed and increasing platform adaptability of the parallel algorithm. Today, many algorithms have been proposed to dynamically schedule a set of tasks in CPU-GPU hybrid environments. Among these scheduling algorithms, only Pure Self-Scheduling (PSS) algorithm can achieve load balancing in such an extremely heterogeneous environment. However, Pure Self-Scheduling can neither fully exploit the advantages of GPU performance, nor efficiently minimize the dynamic scheduling overhead. In this paper, Load-Prediction Scheduling (LPS) has been introduced to solve the aforementioned problems. Furthermore, to meet the demand for the best performance in a hybrid environment, which is formed by many heterogeneous computers, we propose an approach to adjust scheduling parameters dynamically. In order to validate our parallel algorithm and scheduling approach, we performed ECG simulation to confirm the efficiency and accuracy of ECG simulation algorithms based on the proposed method. At first, LPS predicts the workloads of each step in the simulation. The prediction results help to schedule heavy workloads to components with strong computational ability and light workloads to components with weak computational ability. LPS also synthesizes dynamic-scheduling and static-scheduling methods to minimize the disadvantages of these two scheduling methods. In the meantime, a Sliding Window Mechanism (SWM) adjusts the boundary between dynamic-scheduling and static-scheduling to make LPS perform better in hybrid environments. Experimental results of LPS on the computer simulation of ECG show that the LPS algorithm is more efficient than PSS. The ECG simulation is improved by about 20 times by using our proposed method. The ECG simulation of LPS with SWM is about 21% faster than that without SWM. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Load-prediction scheduling algorithm for computer simulation of electrocardiogram in hybrid environments", "paper_id": "WOS:000350927300014"}