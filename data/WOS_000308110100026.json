{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "interference_graphs"}, {"score": 0.004742290714667451, "phrase": "polyhedral_computations"}, {"score": 0.004647105813224402, "phrase": "high_performance"}, {"score": 0.004600228893803583, "phrase": "modern_architectures"}, {"score": 0.0044624036486300865, "phrase": "effective_use"}, {"score": 0.004395040468458808, "phrase": "memory_hierarchy"}, {"score": 0.004306795240631196, "phrase": "compiler-directed_locality_enhancement_techniques"}, {"score": 0.00409382470158851, "phrase": "higher_locality"}, {"score": 0.003911135156992, "phrase": "data_dependences"}, {"score": 0.0038520615699124123, "phrase": "layout_transformations"}, {"score": 0.0037555742428544096, "phrase": "global_impact"}, {"score": 0.0036988415150699945, "phrase": "program_locality"}, {"score": 0.0032251796659158696, "phrase": "novel_unification"}, {"score": 0.003034558550137019, "phrase": "parameterized_polyhedra"}, {"score": 0.002988685006809336, "phrase": "new_concepts"}, {"score": 0.0029137604783116065, "phrase": "data_locality_optimization_algorithm"}, {"score": 0.002618995204424126, "phrase": "subtle_way"}, {"score": 0.0025533148412439166, "phrase": "incompatible_references"}, {"score": 0.002342048999008582, "phrase": "interference_graph"}, {"score": 0.0023066199295447686, "phrase": "parameterized_cost_functions"}, {"score": 0.0021923400552366756, "phrase": "optimizes_data_locality"}, {"score": 0.0021373366163721518, "phrase": "significant_improvement"}, {"score": 0.0021049977753042253, "phrase": "prior_approaches"}], "paper_keywords": ["Locality optimization", " Scanning constraint", " Spatial and temporal locality", " Conflict resolving", " Eigenvalues and eigenspaces", " Parameterized polyhedra"], "paper_abstract": "In achieving high performance on modern architectures it is critical to make effective use of the memory hierarchy. There are compiler-directed locality enhancement techniques that allow the transformation of program to achieve a higher locality: loop transformations, which are constrained by data dependences and data layout transformations, which have a global impact on the program locality. Due to these drawbacks, there must be a unification of the two techniques to achieve the benefits of both. In this paper, a novel unification of these techniques is presented. Using a model based on parameterized polyhedra and introducing new concepts, we propose a data locality optimization algorithm. In comparison with the other approaches, the technique proposed is capable of solving more conflicts and optimizing more references, a subtle way is proposed to optimize incompatible references to the same array, in the same loop, and also references in a cycle in the interference graph. Using parameterized cost functions, our technique estimates the importance of each sub-graph and optimizes data locality. Our experimental results show a significant improvement over the prior approaches.", "paper_title": "Data locality optimization of interference graphs based on polyhedral computations", "paper_id": "WOS:000308110100026"}