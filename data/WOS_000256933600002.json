{"auto_keywords": [{"score": 0.04835227522307675, "phrase": "sciff"}, {"score": 0.015719716506582538, "phrase": "business_contracts"}, {"score": 0.015436823223834596, "phrase": "abductive_logic_programming"}, {"score": 0.004515252649226697, "phrase": "declarative_language"}, {"score": 0.004081385289516914, "phrase": "predicate_definitions"}, {"score": 0.0038981499110532273, "phrase": "finite_domain_variables"}, {"score": 0.0035887342563437935, "phrase": "deontic_operators"}, {"score": 0.003427540517249369, "phrase": "sound_and_complete_sciff_proof_procedure"}, {"score": 0.003213920601037463, "phrase": "transition_rules"}, {"score": 0.002985988377995789, "phrase": "verification_tool"}, {"score": 0.002825681384008326, "phrase": "sciff_proof_procedure"}, {"score": 0.00257735013358606, "phrase": "static_verification"}, {"score": 0.002530359917257626, "phrase": "contract_properties"}, {"score": 0.0023725232579531273, "phrase": "business_contract_specification"}, {"score": 0.002224510044064184, "phrase": "concrete_scenario"}, {"score": 0.0021441057555396013, "phrase": "sciff_contract_rules"}, {"score": 0.0021049985590406457, "phrase": "ruleml"}], "paper_keywords": ["abductive logic programming", " business contracts", " declarative specifications", " g-SCIFF", " SCIFF", " runtime verification", " static verification"], "paper_abstract": "SCIFF is a declarative language, based on abductive logic programming, that accommodates forward rules, predicate definitions, and constraints over finite domain variables. Its abductive declarative semantics can be related to that of deontic operators; its operational specification is the sound and complete SCIFF proof procedure, defined as a set of transition rules implemented and integrated into a reasoning and verification tool. A variation of the SCIFF proof procedure (g-SCIFF) can be used for static verification of contract properties. The use of SCIFF for business contract specification and verification is demonstrated in a concrete scenario. Encoding of SCIFF contract rules in RuleML accommodates integration of SCIFF with architectures for business contracts.", "paper_title": "Expressing and verifying business contracts with abductive logic programming", "paper_id": "WOS:000256933600002"}