{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "automatic_production"}, {"score": 0.004497129150551236, "phrase": "software_testing"}, {"score": 0.0042579795015449005, "phrase": "computational_intelligence"}, {"score": 0.00417160036938041, "phrase": "special_purpose_software_tools"}, {"score": 0.004031495920060339, "phrase": "human_effort"}, {"score": 0.0038431888954930083, "phrase": "testing_process"}, {"score": 0.003688773272422118, "phrase": "complete_software_testing_framework"}, {"score": 0.003540539868937462, "phrase": "specially_designed_genetic_algorithms"}, {"score": 0.0034686643139273934, "phrase": "automatically_test_data"}, {"score": 0.0032173412933955117, "phrase": "program_analyzer"}, {"score": 0.0031091858573262265, "phrase": "program's_source_code"}, {"score": 0.0030460403366412126, "phrase": "dynamically_program_models"}, {"score": 0.003004655258223784, "phrase": "automatic_testing"}, {"score": 0.002805989498127897, "phrase": "genetic_algorithms"}, {"score": 0.002730240935688002, "phrase": "input_space"}, {"score": 0.002620424858132324, "phrase": "optimum_set"}, {"score": 0.0025848074189353397, "phrase": "test_cases"}, {"score": 0.002497862210672172, "phrase": "testing_coverage_criterion"}, {"score": 0.0021634370496463793, "phrase": "proposed_test_data_generation_system"}], "paper_keywords": ["Genetic algorithms", " test data generation"], "paper_abstract": "Recent research on software testing focuses on integrating techniques, such as computational intelligence, with special purpose software tools so as to minimize human effort, reduce costs and automate the testing process. This work proposes a complete software testing framework that utilizes a series of specially designed genetic algorithms to generate automatically test data with reference to the edge/condition testing coverage criterion. The framework utilizes a program analyzer, which examines the program's source code and builds dynamically program models for automatic testing, and a test data generation system that utilizes genetic algorithms to search the input space and determine a near to optimum set of test cases with respect to the testing coverage criterion. The performance of the framework is evaluated on a pool of programs consisting of both standard and random-generated programs. Finally, the proposed test data generation system is compared against other similar approaches and the results are discussed.", "paper_title": "AUTOMATIC PRODUCTION OF TEST DATA WITH A MULTIPLE BATCH-OPTIMISTIC METHOD", "paper_id": "WOS:000264296100004"}