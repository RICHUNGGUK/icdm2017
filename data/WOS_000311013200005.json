{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "rule-based_domain"}, {"score": 0.004691684576246597, "phrase": "domain-specific_visual_languages"}, {"score": 0.004588531238691602, "phrase": "crucial_role"}, {"score": 0.004554650954322244, "phrase": "model-driven_engineering"}, {"score": 0.004167001961564886, "phrase": "increasing_need"}, {"score": 0.003970930401776528, "phrase": "qos_usage_and_management_constraints"}, {"score": 0.0038263829059336564, "phrase": "essential_characteristics"}, {"score": 0.003784049616066444, "phrase": "non-trivial_system"}, {"score": 0.003474624627033273, "phrase": "skilled_knowledge"}, {"score": 0.003448940584469061, "phrase": "specialized_notations"}, {"score": 0.0033730181385496186, "phrase": "intuitive_nature"}, {"score": 0.0032501644753165555, "phrase": "alternative_approach"}, {"score": 0.0032141856243404618, "phrase": "qos_properties"}, {"score": 0.0031786037839399055, "phrase": "high-level_and_platform-independent_manner"}, {"score": 0.003074197032561992, "phrase": "special_objects"}, {"score": 0.0029621948240346092, "phrase": "graphical_specification"}, {"score": 0.002770745509774383, "phrase": "global_state"}, {"score": 0.002582032847722892, "phrase": "performance_properties"}, {"score": 0.002534539169474629, "phrase": "performance_evaluation_tool"}, {"score": 0.002353120949568249, "phrase": "non-functional_properties"}, {"score": 0.002152440300818582, "phrase": "flexible_and_effective_way"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model-driven engineering", " Domain specific visual languages", " Performance analysis", " Simulation"], "paper_abstract": "Context: Domain-Specific Visual Languages (DSVLs) play a crucial role in Model-Driven Engineering (MDE). Most DSVLs already allow the specification of the structure and behavior of systems. However, there is also an increasing need to model, simulate and reason about their non-functional properties. In particular, QoS usage and management constraints (performance, reliability, etc.) are essential characteristics of any non-trivial system. Objective: Very few DSVLs currently offer support for modeling these kinds of properties. And those which do, tend to require skilled knowledge of specialized notations, which clashes with the intuitive nature of DSVLs. In this paper we present an alternative approach to specify QoS properties in a high-level and platform-independent manner. Method: We propose the use of special objects (observers) that can be added to the graphical specification of a system for describing and monitoring some of its non-functional properties. Results: Observers allow extending the global state of the system with the variables that the designer wants to analyze, being able to capture the performance properties of interest. A performance evaluation tool has also been developed as a proof of concept for the proposal. Conclusion: The results show how non-functional properties can be specified in DSVLs using observers, and how the performance of systems specified in this way can be evaluated in a flexible and effective way. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Model-driven performance analysis of rule-based domain specific visual models", "paper_id": "WOS:000311013200005"}