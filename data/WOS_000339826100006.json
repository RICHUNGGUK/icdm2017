{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "lll"}, {"score": 0.03301144859790479, "phrase": "deeplll"}, {"score": 0.015520095391898912, "phrase": "deep_insertions"}, {"score": 0.013484255472662016, "phrase": "lll_algorithm"}, {"score": 0.010706597580312, "phrase": "running_time"}, {"score": 0.004692227830462433, "phrase": "lattice_reduction_algorithms"}, {"score": 0.004632039024076267, "phrase": "numerous_applications"}, {"score": 0.0045726187330434025, "phrase": "number_theory"}, {"score": 0.004204459295724526, "phrase": "lattice_reduction"}, {"score": 0.004044645056447888, "phrase": "polynomial_time"}, {"score": 0.003941478054422721, "phrase": "reduced_basis"}, {"score": 0.0038908817250961633, "phrase": "provable_output_quality"}, {"score": 0.0033752674784204412, "phrase": "higher_quality"}, {"score": 0.003163985877966426, "phrase": "weaker_variants"}, {"score": 0.002709161672473817, "phrase": "polynomial_running_time"}, {"score": 0.0024586427394152196, "phrase": "provably_polynomial_running_time"}, {"score": 0.0023346234464901978, "phrase": "practical_behavior"}, {"score": 0.0022897425998475362, "phrase": "new_algorithm"}, {"score": 0.002260301305523054, "phrase": "classical_lll"}], "paper_keywords": ["Lattice reduction", " LLL algorithm", " Deep insertion"], "paper_abstract": "Lattice reduction algorithms have numerous applications in number theory, algebra, as well as in cryptanalysis. The most famous algorithm for lattice reduction is the LLL algorithm. In polynomial time it computes a reduced basis with provable output quality. One early improvement of the LLL algorithm was LLL with deep insertions (DeepLLL). The output of this version of LLL has higher quality in practice but the running time seems to explode. Weaker variants of DeepLLL, where the insertions are restricted to blocks, behave nicely in practice concerning the running time. However no proof of polynomial running time is known. In this paper PotLLL, a new variant of DeepLLL with provably polynomial running time, is presented. We compare the practical behavior of the new algorithm to classical LLL, BKZ as well as blockwise variants of DeepLLL regarding both the output quality and running time.", "paper_title": "PotLLL: a polynomial time version of LLL with deep insertions", "paper_id": "WOS:000339826100006"}