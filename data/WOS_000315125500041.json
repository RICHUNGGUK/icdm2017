{"auto_keywords": [{"score": 0.047681179159542036, "phrase": "quantum_circuit"}, {"score": 0.03261638306028882, "phrase": "unitary_matrix"}, {"score": 0.011697335335353833, "phrase": "distributed_program"}, {"score": 0.011612462976006797, "phrase": "test_data"}, {"score": 0.0048219275162952905, "phrase": "quantum"}, {"score": 0.004768104290288521, "phrase": "csd_method"}, {"score": 0.004664352260912174, "phrase": "general_quantum_computation_compiler"}, {"score": 0.004540591176992658, "phrase": "sequential_set"}, {"score": 0.004518442937844318, "phrase": "elementary_quantum_logic_gates"}, {"score": 0.004485422068678908, "phrase": "recursive_cosine-sine_decomposition"}, {"score": 0.004452641437293878, "phrase": "resulting_quantum_circuit_diagram"}, {"score": 0.004377077848734575, "phrase": "package_output"}, {"score": 0.004345103001473071, "phrase": "latex"}, {"score": 0.0042297597141071255, "phrase": "qcompiler_package"}, {"score": 0.004188583059712052, "phrase": "full_details"}, {"score": 0.0041579627441997, "phrase": "derived_quantum_circuits"}, {"score": 0.004067433191741367, "phrase": "qcompiler"}, {"score": 0.004047583252380616, "phrase": "quantum_circuits"}, {"score": 0.004027830092522303, "phrase": "significantly_reduced_number"}, {"score": 0.0039304952498569546, "phrase": "high_degree"}, {"score": 0.0038743087166194933, "phrase": "program"}, {"score": 0.0038448988429199086, "phrase": "qcompiler_catalogue"}, {"score": 0.0037427988766503377, "phrase": "cpc_program_library"}, {"score": 0.003724527573901348, "phrase": "queen's_university"}, {"score": 0.0037063454102858593, "phrase": "belfast"}, {"score": 0.003688251130198149, "phrase": "n._ireland"}, {"score": 0.0036523267193321433, "phrase": "standard_cpc"}, {"score": 0.0033524956061690868, "phrase": "tar.gz_programming_language"}, {"score": 0.0033361711577725383, "phrase": "fortran"}, {"score": 0.0032714270066711835, "phrase": "fortran_compiler"}, {"score": 0.0032316649747640533, "phrase": "linux"}, {"score": 0.0032159645291051, "phrase": "mac"}, {"score": 0.003024909947609294, "phrase": "external_routines"}, {"score": 0.002838319783373086, "phrase": "arbitrary_unitary_matrix"}, {"score": 0.0028037753646260937, "phrase": "csd_algorithm"}, {"score": 0.0027561164046279413, "phrase": "block-diagonal_matrices"}, {"score": 0.002696025823852118, "phrase": "elementary_quantum_gates"}, {"score": 0.0026051383627560556, "phrase": "available_memory"}, {"score": 0.0025860636370864084, "phrase": "user's_computer"}, {"score": 0.002517307133542312, "phrase": "arbitrary_unitary_matrices"}, {"score": 0.0023619540328677652, "phrase": "complex_matrices"}, {"score": 0.002316105585203396, "phrase": "memory_and_cpu_time_requirements"}, {"score": 0.002216167092917946, "phrase": "recursive_csd."}, {"score": 0.0021625170763342957, "phrase": "cpu_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Quantum computation", " Quantum compiler", " Matrix decomposition", " Quantum walk"], "paper_abstract": "In this paper, we present a general quantum computation compiler, which maps any given quantum algorithm to a quantum circuit consisting a sequential set of elementary quantum logic gates based on recursive cosine-sine decomposition. The resulting quantum circuit diagram is provided by directly linking the package output written in LaTeX to Qcircuit.tex <http://www.cquic.org/Qcircuit>. We illustrate the use of the Qcompiler package through various examples with full details of the derived quantum circuits. Besides its accuracy, generality and simplicity, Qcompiler produces quantum circuits with significantly reduced number of gates when the systems under study have a high degree of symmetry. Program summary Program title: Qcompiler Catalogue identifier: AENX_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AENX_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 4321 No. of bytes in distributed program, including test data, etc.: 50943 Distribution format: tar.gz Programming language: Fortran. Computer: Any computer with a Fortran compiler. Operating system: Linux, Mac OS X 10.5 (and later). RAM: Depends on the size of the unitary matrix to be decomposed Classification: 4.15. External routines: Lapack (http://www.netlib.org/lapack/) Nature of problem: Decompose any given unitary operation into a quantum circuit with only elementary quantum logic gates. Solution method: This package decomposes an arbitrary unitary matrix, by applying the CSD algorithm recursively, into a series of block-diagonal matrices, which can then be readily associated with elementary quantum gates to form a quantum circuit. Restrictions: The only limitation is imposed by the available memory on the user's computer. Additional comments: This package is applicable for any arbitrary unitary matrices, both real and complex. If the unitary matrix is real, its corresponding quantum circuit is much simpler, with only half the number of quantum gates in comparison with complex matrices of the same size. Running time: Memory and CPU time requirements depend critically on the size of the unitary matrix to be decomposed. Run-time is dominated by the recursive CSD. Most examples presented in this paper require a few minutes of CPU time on Intel Pentium Dual Core 2 Duo E2200 2.2 GHz. (c) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Qcompiler: Quantum compilation with the CSD method", "paper_id": "WOS:000315125500041"}