{"auto_keywords": [{"score": 0.04765077338073387, "phrase": "quality_of_service"}, {"score": 0.00481495049065317, "phrase": "driven_architecture"}, {"score": 0.004732267182713895, "phrase": "uml"}, {"score": 0.004677847043645765, "phrase": "cim."}, {"score": 0.004415189385015778, "phrase": "software_design"}, {"score": 0.004167218012926657, "phrase": "delivered_product"}, {"score": 0.0037336520904376687, "phrase": "qos_constraint_specifications"}, {"score": 0.0031026497891826726, "phrase": "uml_profile"}, {"score": 0.0030141556259370675, "phrase": "abstract_descriptions"}, {"score": 0.0029794666460666646, "phrase": "component-and-connector_systems"}, {"score": 0.0027316790419944234, "phrase": "dmtf"}, {"score": 0.0025929837295811673, "phrase": "distributed_management_task_force_inc."}, {"score": 0.0022696277881969896, "phrase": "cim_metamodel"}, {"score": 0.0022305310659333864, "phrase": ".net-based_metamodel"}, {"score": 0.0021668575137633317, "phrase": "monitoring_infrastructure"}, {"score": 0.0021049977753042253, "phrase": "windows_management_instrumentation"}], "paper_keywords": ["model driven architecture", " QoS", " monitoring", " instrumentation"], "paper_abstract": "The specification of Quality of Service (QoS) constraints over software design requires measures that ensure such requirements are met by the delivered product. Achieving this goal is non-trivial, as it involves, at least, identifying how QoS constraint specifications should be checked at the runtime. In this paper we present an implementation of a Model Driven Architecture (MDA) based framework for the runtime monitoring of QoS properties. We incorporate the UML2 superstructure and the UML profile for Quality of Service to provide abstract descriptions of component-and-connector systems. We then define transformations that refine the UML2 models to conform with the Distributed Management Taskforce (DMTF) Common Information Model (CIM) (Distributed Management Task Force Inc. 2006), a schema standard for management and instrumentation of hardware and software. Finally, we provide a mapping the CIM metamodel to a .NET-based metamodel for implementation of the monitoring infrastructure utilising various .NET features including the Windows Management Instrumentation (WMI) interface.", "paper_title": "QoS-aware model driven architecture through the UML and CIM", "paper_id": "WOS:000247193400007"}