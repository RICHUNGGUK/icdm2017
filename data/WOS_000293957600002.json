{"auto_keywords": [{"score": 0.047510470298773616, "phrase": "arc_consistency"}, {"score": 0.03397792369294496, "phrase": "time_complexity"}, {"score": 0.026687370638160488, "phrase": "space_complexity"}, {"score": 0.00481495049065317, "phrase": "max_restricted_path_consistency"}, {"score": 0.004716520738331953, "phrase": "local_consistency"}, {"score": 0.004684157900507474, "phrase": "binary_constraints"}, {"score": 0.004620093797504386, "phrase": "higher_order"}, {"score": 0.004494570360108983, "phrase": "strong_pruning"}, {"score": 0.004327500975159818, "phrase": "existing_maxrpc_algorithms"}, {"score": 0.004109600767747015, "phrase": "value_deletions"}, {"score": 0.003889206369317587, "phrase": "maxrpc_algorithms"}, {"score": 0.0037188360359702182, "phrase": "combined_use"}, {"score": 0.0033651019362620866, "phrase": "closely_related_maxrpc_algorithms"}, {"score": 0.0033304797419738182, "phrase": "first_one"}, {"score": 0.0031845067058084583, "phrase": "good_performance"}, {"score": 0.0030135741897058844, "phrase": "second_one"}, {"score": 0.002803031561019101, "phrase": "restricted_version"}, {"score": 0.0026161698049580804, "phrase": "simple_modifications"}, {"score": 0.00227890329511847, "phrase": "experimental_results"}, {"score": 0.0022476609946536345, "phrase": "resulting_methods"}, {"score": 0.002224510044064184, "phrase": "previous_algorithms"}, {"score": 0.0021789194955896102, "phrase": "large_margins"}, {"score": 0.0021416404045850224, "phrase": "viable_alternative"}, {"score": 0.0021049977753042253, "phrase": "problem_classes"}], "paper_keywords": ["Constraint propagation", " Binary constraints", " Local consistency"], "paper_abstract": "Max Restricted Path Consistency (maxRPC) is a local consistency for binary constraints that enforces a higher order of consistency than arc consistency. Despite the strong pruning that can be achieved, maxRPC is rarely used because existing maxRPC algorithms suffer from overheads and redundancies as they can repeatedly perform many constraint checks without triggering any value deletions. In this paper we propose and evaluate techniques that can boost the performance of maxRPC algorithms by eliminating many of these overheads and redundancies. These include the combined use of two data structures to avoid many redundant constraint checks, and the exploitation of residues to quickly verify the existence of supports. Based on these, we propose a number of closely related maxRPC algorithms. The first one, maxRPC3, has optimal O(end (3)) time complexity, displays good performance when used stand-alone, but is expensive to apply during search. The second one, maxRPC3 (rm) , has O(en (2) d (4)) time complexity, but a restricted version with O(end (4)) complexity can be very efficient when used during search. The other algorithms are simple modifications of maxRPC3 (rm) . All algorithms have O(ed) space complexity when used stand-alone. However, maxRPC3 has O(end) space complexity when used during search, while the others retain the O(ed) complexity. Experimental results demonstrate that the resulting methods constantly outperform previous algorithms for maxRPC, often by large margins, and constitute a viable alternative to arc consistency on some problem classes.", "paper_title": "New algorithms for max restricted path consistency", "paper_id": "WOS:000293957600002"}