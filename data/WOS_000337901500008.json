{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "cloud_migration"}, {"score": 0.0047448515702010734, "phrase": "on-demand_use"}, {"score": 0.004496402246090618, "phrase": "cloud_computing"}, {"score": 0.004302791070310513, "phrase": "cloud_environment"}, {"score": 0.004219427915728972, "phrase": "cloud_platform"}, {"score": 0.0041579627441997, "phrase": "high_reliability"}, {"score": 0.004097389262726735, "phrase": "high_quality"}, {"score": 0.003940122359770492, "phrase": "major_concerns"}, {"score": 0.003863758357292741, "phrase": "enterprise_applications"}, {"score": 0.003715425273229361, "phrase": "large_number"}, {"score": 0.0036792371574197826, "phrase": "distributed_components"}, {"score": 0.0034355662264234864, "phrase": "challenging_and_critical_research_problem"}, {"score": 0.0032714270066711835, "phrase": "reliability-based_optimization_framework"}, {"score": 0.0032237268289353983, "phrase": "rocloud"}, {"score": 0.0031457622320220364, "phrase": "application_reliability"}, {"score": 0.00311510526624626, "phrase": "fault_tolerance"}, {"score": 0.0030101325901285537, "phrase": "first_algorithm"}, {"score": 0.002769650208851401, "phrase": "second_algorithm"}, {"score": 0.0027159094186967247, "phrase": "hybrid_applications"}, {"score": 0.002511147699138714, "phrase": "application_structure_information"}, {"score": 0.0024503741901918527, "phrase": "historical_reliability_information"}, {"score": 0.0024264776194357993, "phrase": "component_ranking"}, {"score": 0.0023677483882740317, "phrase": "ranking_result"}, {"score": 0.002344655708000408, "phrase": "optimal_fault-tolerant_strategy"}, {"score": 0.0021891781017389783, "phrase": "experimental_results"}, {"score": 0.002125735077004312, "phrase": "small_number"}, {"score": 0.0021049977753042253, "phrase": "error-prone_components"}], "paper_keywords": ["Cloud migration", " component ranking", " fault tolerance", " software reliability"], "paper_abstract": "The on-demand use, high scalability, and low maintainance cost nature of cloud computing have attracted more and more enterprises to migrate their legacy applications to the cloud environment. Although the cloud platform itself promises high reliability, ensuring high quality of service is still one of the major concerns, since the enterprise applications are usually complicated and consist of a large number of distributed components. Thus, improving the reliability of an application during cloud migration is a challenging and critical research problem. To address this problem, we propose a reliability-based optimization framework, named ROCloud, to improve the application reliability by fault tolerance. ROCloud includes two ranking algorithms. The first algorithm ranks components for the applications that all their components will be migrated to the cloud. The second algorithm ranks components for hybrid applications that only part of their components are migrated to the cloud. Both algorithms employ the application structure information as well as the historical reliability information for component ranking. Based on the ranking result, optimal fault-tolerant strategy will be selected automatically for the most significant components with respect to their predefined constraints. The experimental results show that by refactoring a small number of error-prone components and tolerating faults of the most significant components, the reliability of the application can be greatly improved.", "paper_title": "Reliability-Based Design Optimization for Cloud Migration", "paper_id": "WOS:000337901500008"}