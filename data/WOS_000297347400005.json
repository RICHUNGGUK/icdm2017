{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "cluster_computing_software"}, {"score": 0.039897648477144804, "phrase": "source_code"}, {"score": 0.0047395356621991935, "phrase": "complex_software_systems"}, {"score": 0.004472935829694716, "phrase": "inseparable_interactions"}, {"score": 0.004356741449157895, "phrase": "distinct_features"}, {"score": 0.004177049813981273, "phrase": "tangled_code"}, {"score": 0.00398370478688858, "phrase": "aspect-oriented_programming"}, {"score": 0.0038597866217852353, "phrase": "powerful_method"}, {"score": 0.003720060615588018, "phrase": "cross-cutting_concerns"}, {"score": 0.0036424917384748024, "phrase": "growing_research"}, {"score": 0.0034193226278107346, "phrase": "pioneering_work"}, {"score": 0.0033834833511041146, "phrase": "aop"}, {"score": 0.003209782650616367, "phrase": "distributed_systems"}, {"score": 0.0031594291695784286, "phrase": "refined_aop_paradigm"}, {"score": 0.003028969851366049, "phrase": "time-honored_issues"}, {"score": 0.0029814443878969973, "phrase": "fault-tolerant_computing"}, {"score": 0.0028886123801902517, "phrase": "object_replication"}, {"score": 0.0028432828877281388, "phrase": "cluster_computing_community"}, {"score": 0.002798662730881037, "phrase": "aop_paradigm"}, {"score": 0.0023146962503449186, "phrase": "instrumented_parts"}, {"score": 0.002219040041886641, "phrase": "additional_features"}, {"score": 0.0021273284545701896, "phrase": "code_modularity"}, {"score": 0.0021049977753042253, "phrase": "system_performance"}], "paper_keywords": ["Aspect-Oriented Programming", " Fault tolerance", " Heterogeneity", " Object replication", " Message-passing interface", " Key-value storage"], "paper_abstract": "In complex software systems, modularity and readability tend to be degraded owing to inseparable interactions between concerns that are distinct features in a program. Such interactions result in tangled code that is hard to develop and maintain. Aspect-Oriented Programming (AOP) is a powerful method for modularizing source code and for decoupling cross-cutting concerns. A decade of growing research on AOP has brought the paradigm into many exciting areas. However, pioneering work on AOP has not flourished enough to enrich the design of distributed systems using the refined AOP paradigm. This article investigates three case studies that cover time-honored issues such as fault-tolerant computing, network heterogeneity, and object replication in the cluster computing community using the AOP paradigm. The aspects that we define here are simple, intuitive, and reusable. Our intensive experiences show that (i) AOP can improve the modularity of cluster computing software by separating the source code into base and instrumented parts, and (ii) AOP helps developers to deploy additional features to legacy cluster computing software without harming code modularity and system performance.", "paper_title": "Aspect-oriented development of cluster computing software", "paper_id": "WOS:000297347400005"}