{"auto_keywords": [{"score": 0.049692788583269344, "phrase": "reconfigurable_platforms"}, {"score": 0.00481495049065317, "phrase": "mapping-scheduling_algorithm_for_hardware_acceleration_on_reconfigurable_platforms"}, {"score": 0.004718431349852634, "phrase": "promising_technology"}, {"score": 0.004246729915110547, "phrase": "multimedia_processing"}, {"score": 0.004061584718427419, "phrase": "hardware_acceleration"}, {"score": 0.003900257249255497, "phrase": "data_flow_diagrams"}, {"score": 0.003822003373331997, "phrase": "data_flow_graphs"}, {"score": 0.00374531366198605, "phrase": "control_and_data_flow_graphs"}, {"score": 0.003670157084732341, "phrase": "petri_nets"}, {"score": 0.003439608110599787, "phrase": "pipeline_behavior"}, {"score": 0.0032629585038738856, "phrase": "application_execution_time"}, {"score": 0.0029482691362918423, "phrase": "resource_requirements"}, {"score": 0.0029126002350975634, "phrase": "timing_performance"}, {"score": 0.0028890603352364273, "phrase": "modern_reconfigurable_systems"}, {"score": 0.0028195727965553367, "phrase": "hardware_accelerators"}, {"score": 0.0026423134393535265, "phrase": "novel_task_representation_model"}, {"score": 0.0026103363762901423, "phrase": "temporal_constrained_data_flow_diagram"}, {"score": 0.002466139325703204, "phrase": "mapping-scheduling_algorithm"}, {"score": 0.0023776656246300063, "phrase": "new_tcdfd_model"}, {"score": 0.002311047934798247, "phrase": "dynamic_reconfiguration_overhead"}, {"score": 0.0022738201751000865, "phrase": "communication_requirements"}, {"score": 0.0022281257694320433, "phrase": "experimental_results"}, {"score": 0.0021922308351126746, "phrase": "presented_approach"}, {"score": 0.0021049977753042253, "phrase": "overhead_reduction"}], "paper_keywords": ["Mapping", " task scheduling", " reconfiguration overheads", " reconfigurable systems", " runtime reconfiguration"], "paper_abstract": "Reconfigurable platforms are a promising technology that offers an interesting trade-off between flexibility and performance, which many recent embedded system applications demand, especially in fields such as multimedia processing. These applications typically involvemultiple ad-hoc tasks for hardware acceleration, which are usually represented using formalisms such as Data Flow Diagrams (DFDs), Data Flow Graphs (DFGs), Control and Data Flow Graphs (CDFGs) or Petri Nets. However, none of these models is able to capture at the same time the pipeline behavior between tasks (that therefore can coexist in order to minimize the application execution time), their communication patterns, and their data dependencies. This article proves that the knowledge of all this information can be effectively exploited to reduce the resource requirements and the timing performance of modern reconfigurable systems, where a set of hardware accelerators is used to support the computation. For this purpose, this article proposes a novel task representation model, named Temporal Constrained Data Flow Diagram (TCDFD), which includes all this information. This article also presents a mapping-scheduling algorithm that is able to take advantage of the new TCDFD model. It aims at minimizing the dynamic reconfiguration overhead while meeting the communication requirements among the tasks. Experimental results show that the presented approach achieves up to 75% of resources saving and up to 89% of reconfiguration overhead reduction with respect to other state-of-the-art techniques for reconfigurable platforms.", "paper_title": "A Mapping-Scheduling Algorithm for Hardware Acceleration on Reconfigurable Platforms", "paper_id": "WOS:000338627900004"}