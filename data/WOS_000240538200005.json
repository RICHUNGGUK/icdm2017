{"auto_keywords": [{"score": 0.0391710032323389, "phrase": "processing_resources"}, {"score": 0.010307520166443615, "phrase": "embedded_system"}, {"score": 0.005289865132876284, "phrase": "proposed_techniques"}, {"score": 0.004528646311967683, "phrase": "multiple_applications"}, {"score": 0.004468684611798047, "phrase": "system_functionality"}, {"score": 0.004225357291695418, "phrase": "multiple_tasks"}, {"score": 0.003952828685048176, "phrase": "multi-mode_multi-task"}, {"score": 0.003818107035361389, "phrase": "optimization_problem"}, {"score": 0.003767517649628532, "phrase": "minimal_total_system_cost"}, {"score": 0.0037076911119175455, "phrase": "functional_modules"}, {"score": 0.0036100762867678415, "phrase": "timing_constraints"}, {"score": 0.0035812942842883607, "phrase": "key_success"}, {"score": 0.003413341320961615, "phrase": "potential_parallelism"}, {"score": 0.0033057571048938097, "phrase": "inherently_excessively_large_search_space"}, {"score": 0.003210110095236981, "phrase": "schedulability_analysis"}, {"score": 0.003084112747780646, "phrase": "potential_parallel_execution"}, {"score": 0.002900426826591769, "phrase": "partitioning_problem"}, {"score": 0.0026914710445743693, "phrase": "execution_schedule"}, {"score": 0.0026275488733903426, "phrase": "precise_measurement"}, {"score": 0.00260657976055413, "phrase": "parallel_execution"}, {"score": 0.0025446686046680005, "phrase": "stepwise_refinement"}, {"score": 0.0025176254484917224, "phrase": "single-mode_multi-task_applications"}, {"score": 0.0024122895441506895, "phrase": "integrated_fashion"}, {"score": 0.002323733841676433, "phrase": "multi-mode_multi-task_applications"}, {"score": 0.002256435842862802, "phrase": "feasible_execution_schedule"}, {"score": 0.0021910825909008946, "phrase": "real-life_applications"}, {"score": 0.0021162777949384234, "phrase": "implementation_cost"}], "paper_keywords": ["HW/SW partitioning", " resource allocation/mapping", " multi-mode/multi-task applications"], "paper_abstract": "An embedded system is called a multi-mode embedded system if it performs multiple applications by dynamically reconfiguring the system functionality. Further, the embedded system is called a multi-mode multi-task embedded system if it additionally supports multiple tasks to be executed in a mode. In this paper, we address an important HW/SW partitioning problem, that is, HW/SW partitioning of multi-mode multi-task embedded applications with timing constraints of tasks. The objective of the optimization problem is to find a minimal total system cost of allocation/mapping of processing resources to functional modules in tasks together with a schedule that satisfies the timing constraints. The key success of solving the problem is closely related to the degree of the amount of utilization of the potential parallelism among the executions of modules. However, due to an inherently excessively large search space of the parallelism, and to make the task of schedulability analysis easy, the prior HW/SW partitioning methods have not been able to fully exploit the potential parallel execution of modules. To overcome the limitation, we propose a set of comprehensive HW/SW partitioning techniques which solve the three subproblems of the partitioning problem simultaneously: (1) allocation of processing resources, (2) mapping the processing resources to the modules in tasks, and (3) determining an execution schedule of modules. Specifically, based on a precise measurement on the parallel execution and schedulability of modules, we develop a stepwise refinement partitioning technique for single-mode multi-task applications, which aims to solve the subproblems 1, 2 and 3 effectively in an integrated fashion. The proposed techniques is then extended to solve the HW/SW partitioning problem of multi-mode multi-task applications (i.e., to find a globally optimized allocation/mapping of processing resources with feasible execution schedule of modules). From experiments with a set of real-life applications, it is shown that the proposed techniques are able to reduce the implementation cost by 19.0 and 17.0% for single- and multi-mode multi-task applications over that by the conventional method, respectively.", "paper_title": "A HW/SW partitioner for multi-mode multi-task embedded applications", "paper_id": "WOS:000240538200005"}