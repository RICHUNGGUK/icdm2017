{"auto_keywords": [{"score": 0.04881990207677595, "phrase": "zeno"}, {"score": 0.010444892038453711, "phrase": "timed_automata"}, {"score": 0.007759400115296777, "phrase": "existing_approaches"}, {"score": 0.007677364590816631, "phrase": "non-zenoness_checking"}, {"score": 0.00481495049065317, "phrase": "explicit-state_non-zenoness"}, {"score": 0.004492573860101133, "phrase": "finite_time"}, {"score": 0.004374385639298755, "phrase": "timed_automata_models"}, {"score": 0.004059673618719782, "phrase": "system_verification"}, {"score": 0.0035527409334589317, "phrase": "model_checking"}, {"score": 0.0033861224940737846, "phrase": "additional_clock"}, {"score": 0.0032969458013463807, "phrase": "additional_accepting_states"}, {"score": 0.003244567402785763, "phrase": "zone_graphs"}, {"score": 0.0026486862281576086, "phrase": "ltl_properties"}, {"score": 0.0024842242921857705, "phrase": "new_method"}, {"score": 0.002418742283474052, "phrase": "systematic_evaluation"}, {"score": 0.0023549822490693327, "phrase": "software_toolkit"}, {"score": 0.002317533977770783, "phrase": "multiple_non-zenoness_checking_algorithms"}, {"score": 0.0021049977753042253, "phrase": "different_approaches"}], "paper_keywords": ["Timed automata", " non-Zenoness", " model checking", " verification tool"], "paper_abstract": "Zeno runs, where infinitely many actions occur within finite time, may arise in Timed Automata models. Zeno runs are not feasible in reality and must be pruned during system verification. Thus it is necessary to check whether a run is Zeno or not so as to avoid presenting Zeno runs as counterexamples during model checking. Existing approaches on non-Zenoness checking include either introducing an additional clock in the Timed Automata models or additional accepting states in the zone graphs. In addition, there are approaches proposed for alternative timed modeling languages, which could be generalized to Timed Automata. In this work, we investigate the problem of non-Zenoness checking in the context of model checking LTL properties, not only evaluating and comparing existing approaches but also proposing a new method. To have a systematic evaluation, we develop a software toolkit to support multiple non-Zenoness checking algorithms. The experimental results show the effectiveness of our newly proposed algorithm, and demonstrate the strengths and weaknesses of different approaches.", "paper_title": "A Systematic Study on Explicit-State Non-Zenoness Checking for Timed Automata", "paper_id": "WOS:000347788400002"}