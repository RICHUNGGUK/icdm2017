{"auto_keywords": [{"score": 0.02322730111336099, "phrase": "massive_graphs"}, {"score": 0.01242724214600255, "phrase": "nearly_linear_time_algorithm"}, {"score": 0.008423326316203874, "phrase": "running_time"}, {"score": 0.0063751334188600515, "phrase": "partitioning_algorithm"}, {"score": 0.004739773204474094, "phrase": "nearly_linear_time_graph_partitioning."}, {"score": 0.00462919213721188, "phrase": "local_algorithms"}, {"score": 0.004539005582217305, "phrase": "local_graph_algorithm"}, {"score": 0.004261998281333649, "phrase": "whole_graph"}, {"score": 0.004178935413340453, "phrase": "local_clustering_algorithm"}, {"score": 0.00409748471133883, "phrase": "good_cluster"}, {"score": 0.0036987521452843987, "phrase": "nonempty_local_cluster"}, {"score": 0.0036553070575015344, "phrase": "nearly_linear"}, {"score": 0.0030494153169181334, "phrase": "social_networks"}, {"score": 0.002943147037670826, "phrase": "clustering_algorithm"}, {"score": 0.0028405715222684183, "phrase": "approximate_sparsest_cut"}, {"score": 0.00281826552772148, "phrase": "nearly_optimal_balance"}, {"score": 0.0027200305495826797, "phrase": "number_edges"}, {"score": 0.0025237171554924128, "phrase": "spectral_sparsifiers"}, {"score": 0.00238816839721704, "phrase": "linear_systems"}, {"score": 0.0023507916951658455, "phrase": "diagonally_dominant_matrices"}, {"score": 0.002323142666222693, "phrase": "linear_system_solver"}, {"score": 0.002242127152093798, "phrase": "second-smallest_eigenvalue"}, {"score": 0.0021896891011033105, "phrase": "laplacian_matrix"}], "paper_keywords": ["graph clustering", " graph partitioning", " local algorithms", " sparsest cut", " approximation algorithms"], "paper_abstract": "We study the design of local algorithms for massive graphs. A local graph algorithm is one that finds a solution containing or near a given vertex without looking at the whole graph. We present a local clustering algorithm. Our algorithm finds a good cluster-a subset of vertices whose internal connections are significantly richer than its external connections-near a given vertex. The running time of our algorithm, when it finds a nonempty local cluster, is nearly linear in the size of the cluster it outputs. The running time of our algorithm also depends polylogarithmically on the size of the graph and polynomially on the conductance of the cluster it produces. Our clustering algorithm could be a useful primitive for handling massive graphs, such as social networks and web-graphs. As an application of this clustering algorithm, we present a partitioning algorithm that finds an approximate sparsest cut with nearly optimal balance. Our algorithm takes time nearly linear in the number edges of the graph. Using the partitioning algorithm of this paper, we have designed a nearly linear time algorithm for constructing spectral sparsifiers of graphs, which we in turn use in a nearly linear time algorithm for solving linear systems in symmetric, diagonally dominant matrices. The linear system solver also leads to a nearly linear time algorithm for approximating the second-smallest eigenvalue and corresponding eigenvector of the Laplacian matrix of a graph. These other results are presented in two companion papers.", "paper_title": "A LOCAL CLUSTERING ALGORITHM FOR MASSIVE GRAPHS AND ITS APPLICATION TO NEARLY LINEAR TIME GRAPH PARTITIONING", "paper_id": "WOS:000315579100001"}