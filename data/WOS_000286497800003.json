{"auto_keywords": [{"score": 0.02945516158459412, "phrase": "isbf"}, {"score": 0.015550867017460692, "phrase": "deep_packet_inspection"}, {"score": 0.013080058775269465, "phrase": "high_update_overhead"}, {"score": 0.004814969083864411, "phrase": "bloom"}, {"score": 0.004625983640628956, "phrase": "packet_headers"}, {"score": 0.004526041191525413, "phrase": "predefined_signatures"}, {"score": 0.004476878957065829, "phrase": "link_rates"}, {"score": 0.00444439983637316, "phrase": "traffic_volumes"}, {"score": 0.004269913167716059, "phrase": "high_performance_challenge"}, {"score": 0.004192872425727907, "phrase": "line-speed_packet_processing"}, {"score": 0.0040873354289955605, "phrase": "recent_trie_bitmap_content_analyzer"}, {"score": 0.003912533878506028, "phrase": "shared-node_fast_hash_table"}, {"score": 0.003800156761779008, "phrase": "large_memory_requirements"}, {"score": 0.0037179893149669845, "phrase": "index-split_bloom_filter"}, {"score": 0.003357343256340741, "phrase": "constant_bits"}, {"score": 0.0032253960472377356, "phrase": "on-chip_parallel_counting_bloom_filters"}, {"score": 0.003144134096095217, "phrase": "overall_off-chip_items"}, {"score": 0.0030315735229977958, "phrase": "on-chip_parallel_cbfs"}, {"score": 0.00296597499768551, "phrase": "off-chip_item_candidate"}, {"score": 0.0028597742552122305, "phrase": "lazy_deletion_algorithm"}, {"score": 0.002838993542880416, "phrase": "vacant_insertion_algorithm"}, {"score": 0.0027978827655799495, "phrase": "update_overhead"}, {"score": 0.002737327060030586, "phrase": "on-chip_deletion_bitinap"}, {"score": 0.0026586145364395544, "phrase": "parallel_cbfs"}, {"score": 0.0023229408675543147, "phrase": "memory_requirements"}, {"score": 0.002306052064028865, "phrase": "experimental_results"}, {"score": 0.002256117165288155, "phrase": "tribica"}, {"score": 0.0022397131088479514, "phrase": "sfht"}, {"score": 0.002183230464873613, "phrase": "off-chip_memory_accesses"}, {"score": 0.0021437580456873584, "phrase": "primitive_operations"}], "paper_keywords": ["network security", " packet processing", " deep packet inspection", " hash table", " Bloom filter"], "paper_abstract": "Deep packet inspection (DPI) scans both packet headers and payloads to search for predefined signatures. As link rates and traffic volumes of Internet are constantly growing, DPI is facing the high performance challenge of how to achieve line-speed packet processing with limited embedded memory. The recent trie bitmap content analyzer (TriBiCa) suffers from high update overhead and many false positive memory accesses, while the shared-node fast hash table (SFHT) suffers from high update overhead and large memory requirements. This paper presents an index-split Bloom filter (ISBF) to overcome these issues. Given a set of off-chip items, an index of each item is split apart into several groups of constant bits, and each group of bits uses an array of on-chip parallel counting Bloom filters (CBFs) to represent the overall off-chip items. When an item is queried, several groups of on-chip parallel CBFs constitute an index of an off-chip item candidate for a match. Furthermore, we propose a lazy deletion algorithm and vacant insertion algorithm to reduce the update overhead of ISBF, where an on-chip deletion bitinap is used to update on-chip parallel CBFs, not adjusting other related off-chip items. The ISBF is a time/space-efficient data structure, which not only achieves O(1) average memory accesses of insertion, deletion, and query, but also reduces the memory requirements. Experimental results demonstrate that compared with the TriBiCa and SFHT, the ISBF significantly reduces the off-chip memory accesses and processing time of primitive operations, as well as both the on-chip and off-chip memory sizes.", "paper_title": "An index-split Bloom filter for deep packet inspection", "paper_id": "WOS:000286497800003"}