{"auto_keywords": [{"score": 0.040171231939978944, "phrase": "java"}, {"score": 0.028581051348701616, "phrase": "new_subprotocol"}, {"score": 0.00481495049065317, "phrase": "multiplexing_facilities"}, {"score": 0.004776297980616768, "phrase": "java's_remote_method_invocation"}, {"score": 0.0046621835537196754, "phrase": "new_generation"}, {"score": 0.004624751696958501, "phrase": "distributed_real-time_embedded_systems"}, {"score": 0.004514241562580097, "phrase": "special_restrictions"}, {"score": 0.004164516065972361, "phrase": "comprehensive_redesign"}, {"score": 0.0041144374213500715, "phrase": "current_distribution_infrastructure"}, {"score": 0.0039677715255034595, "phrase": "changing_panorama"}, {"score": 0.003920049436883885, "phrase": "paper_concerns"}, {"score": 0.00363080961099728, "phrase": "different_nodes"}, {"score": 0.003587125711973247, "phrase": "distributed_java_system"}, {"score": 0.003459191419478298, "phrase": "improved_protocol-level_multiplexing_strategy"}, {"score": 0.003308986613384597, "phrase": "remote_invocation"}, {"score": 0.003269162006886173, "phrase": "new_multiplexing_strategy"}, {"score": 0.0031909403420958752, "phrase": "unscheduled_invocations"}, {"score": 0.00266079124891013, "phrase": "connectionless"}, {"score": 0.0026181517251690606, "phrase": "built-in_multiplexing_facilities"}, {"score": 0.0024247382451294255, "phrase": "jrmp"}, {"score": 0.002395530243993313, "phrase": "singleop"}, {"score": 0.0023766340231651827, "phrase": "stream"}, {"score": 0.002347656478169501, "phrase": "multiplex"}, {"score": 0.002300681752315682, "phrase": "consideration_parameters"}, {"score": 0.0022365262201954643, "phrase": "java's_virtual_machine"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Java's Remote Method Invocation (RMI)", " JRMP protocol optimization", " multiplexing facilities", " optimization", " real-time Java"], "paper_abstract": "The proliferation of a new generation of distributed real-time embedded systems (DRE) characterized by special restrictions on its storage capacities, its available computation time, and the messages they can send through the network suggests a comprehensive redesign of the current distribution infrastructure in order to tune its performance. In this changing panorama, the paper concerns one of the protocols, Java's Remote Method Protocol (JRMP), used nowadays to interconnect different nodes of a distributed Java system, and explores the cost of integrating an improved protocol-level multiplexing strategy in the context of an end-to-end remote invocation. The new multiplexing strategy helps middleware manage more efficiently unscheduled invocations that appear at runtime generated from a certain client node, especially in cases where preallocation of resources or dimensioning for the worst-case are techniques not plausible. To this end, the paper examines an alternative based on the definition of a new subprotocol, called ConnectionLess, which offers built-in multiplexing facilities for distributed Java applications. The performance of the new subprotocol is compared against the three already defined by JRMP (namely SingleOp, Stream, and Multiplex), taking into consideration parameters such as memory consumed in the Java's virtual machine and end-to-end response times. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Fine tuning of the multiplexing facilities of Java's Remote Method Invocation", "paper_id": "WOS:000293444100005"}