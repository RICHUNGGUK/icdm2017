{"auto_keywords": [{"score": 0.04963419481547922, "phrase": "finite-domain_constraint_programming"}, {"score": 0.04224900147406726, "phrase": "decision_variables"}, {"score": 0.00481495049065317, "phrase": "lexicographic_ordering_constraints"}, {"score": 0.00466016686289196, "phrase": "great_success"}, {"score": 0.004573953147933065, "phrase": "wide_variety"}, {"score": 0.00453144352814823, "phrase": "combinatorial_problems"}, {"score": 0.003976007772514762, "phrase": "common_modelling_pattern"}, {"score": 0.0035376693476114733, "phrase": "systematic_search"}, {"score": 0.0034559594248079807, "phrase": "effective_method"}, {"score": 0.0032674478600540477, "phrase": "affected_rows"}, {"score": 0.0030891871245908665, "phrase": "incremental_propagation_algorithm"}, {"score": 0.003003726508522467, "phrase": "generalised_arc_consistency"}, {"score": 0.0026474076254702525, "phrase": "primitive_constraints"}, {"score": 0.0026105159490849364, "phrase": "current_finite-domain_constraint_toolkits"}, {"score": 0.0025028892126605124, "phrase": "constraint_propagation"}, {"score": 0.0023551955270737215, "phrase": "strict_lexicographic_ordering"}, {"score": 0.0022580713471027996, "phrase": "unequal_length"}, {"score": 0.002237036807966899, "phrase": "experimental_results"}], "paper_keywords": ["artificial intelligence", " constraints", " constraint programming", " constraint propagation", " lexicographic ordering", " symmetry", " symmetry breaking", " generalized are consistency", " matrix models"], "paper_abstract": "Finite-domain constraint programming has been used with great success to tackle a wide variety of combinatorial problems in industry and academia. To apply finite-domain constraint programming to a problem, it is modelled by a set of constraints on a set of decision variables. A common modelling pattern is the use of matrices of decision variables. The rows and/or columns of these matrices are often symmetric, leading to redundancy in a systematic search for solutions. An effective method of breaking this symmetry is to constrain the assignments of the affected rows and columns to be ordered lexicographically. This paper develops an incremental propagation algorithm, GACLexLeq, that establishes generalised arc consistency on this constraint in O(n) operations, where n is the length of the vectors. Furthermore, this paper shows that decomposing GACLexLeq into primitive constraints available in current finite-domain constraint toolkits reduces the strength or increases the cost of constraint propagation. Also presented are extensions and modifications to the algorithm to handle strict lexicographic ordering, detection of entailment, and vectors of unequal length. Experimental results on a number of domains demonstrate the value of GACLexLeq. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Propagation algorithms for lexicographic ordering constraints", "paper_id": "WOS:000238294600001"}