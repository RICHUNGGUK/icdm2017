{"auto_keywords": [{"score": 0.04313506997911781, "phrase": "workflow_specification"}, {"score": 0.004549734943142138, "phrase": "business_rules"}, {"score": 0.004506968388996092, "phrase": "legal_requirements"}, {"score": 0.0044435677598780796, "phrase": "authorization_policies"}, {"score": 0.004401794742140806, "phrase": "workflow_satisfiability"}, {"score": 0.0041987222897385676, "phrase": "workflow_instance"}, {"score": 0.0038382392088338784, "phrase": "computer_security_community"}, {"score": 0.0034920505103165403, "phrase": "particular_workflow_model"}, {"score": 0.0033308077968426937, "phrase": "different_models"}, {"score": 0.003207173639414978, "phrase": "unreliable_judge"}, {"score": 0.0029454679553901613, "phrase": "smallest_number"}, {"score": 0.0027961342030212353, "phrase": "model_checking"}, {"score": 0.0027178867838199734, "phrase": "propositional_linear-time_temporal_logic"}, {"score": 0.00240328454980006, "phrase": "minimal_user_bases"}, {"score": 0.0022175019341824603, "phrase": "theoretical_contributions"}, {"score": 0.002175913488493802, "phrase": "detailed_experiments"}], "paper_keywords": ["Computer security", " Model checking", " Business processes", " Linear-time temporal logic", " Abstraction"], "paper_abstract": "Many business processes are modeled as workflows, which often need to comply with business rules, legal requirements, and authorization policies. Workflow satisfiability is the problem of determining whether there exists a workflow instance that realizes the workflow specification while simultaneously complying with such constraints. This problem has already been studied by the computer security community, with the development of algorithms and the study of their worst-case complexity. These solutions are often tailored to a particular workflow model and are, therefore, of little or no use in analyzing different models; their worst-case complexities are likely to be an unreliable judge of their feasibility; and they lack support for other forms of analysis such as the determination of the smallest number of users required to satisfy a workflow specification. We propose model checking of an NP-complete fragment LTL(F) of propositional linear-time temporal logic as an alternative solution. We report encodings in LTL(F) that can compute a set of solutions (thus deciding satisfiability), compute minimal user bases and a safe bound on the resiliency of satisfiability under the removal of users. These theoretical contributions are validated through detailed experiments whose results attest to the viability of our proposed approach.", "paper_title": "Authorized workflow schemas: deciding realizability through LTL(F) model checking", "paper_id": "WOS:000209672900003"}