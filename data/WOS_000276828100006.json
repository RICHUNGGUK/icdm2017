{"auto_keywords": [{"score": 0.03851917804553377, "phrase": "self-healing_systems"}, {"score": 0.03332169746093553, "phrase": "acceptable_behavior"}, {"score": 0.00481495049065317, "phrase": "cost-effective_software_reliability_through_self-healing._heterogeneity"}, {"score": 0.004511663118269957, "phrase": "new_software_rehability_issues"}, {"score": 0.0037599278182081056, "phrase": "software_reliability"}, {"score": 0.0036871853429163953, "phrase": "maintenance_costs"}, {"score": 0.0034999880739789257, "phrase": "runtime_failures"}, {"score": 0.0030524448705134283, "phrase": "challenges_nuclei"}, {"score": 0.002859856368059419, "phrase": "functional_failures"}, {"score": 0.0026619761089539595, "phrase": "software_systems"}, {"score": 0.0022912596877648723, "phrase": "faults_nuclei"}], "paper_keywords": ["Self-healing", " autonomic computing", " software rehability"], "paper_abstract": "Heterogeneity, mobility, complexity and new application domains raise new software rehability issues that cannot, be met cost-effectively only with classic software engineering approaches Self-healing systems cart successfully address these problems. thus increasing software reliability while reducing maintenance costs Self-healing systems must be able to automatically identify runtime failures, locate faults. and find it way to bring the system back to an acceptable behavior This paper discusses the challenges nuclei lying the construction of self-healing systems with particular focus on functional failures, and presents a set, of techniques to build software systems that, can automatically heal such failures It introduces techniques to automatically derive assertions to effectively detect, functional failures, locate the faults nuclei lying the failures. and identify sequences of actions alternative to the failing sequence to bung the system back to an acceptable behavior.", "paper_title": "ACHIEVING COST-EFFECTIVE SOFTWARE RELIABILITY THROUGH SELF-HEALING", "paper_id": "WOS:000276828100006"}