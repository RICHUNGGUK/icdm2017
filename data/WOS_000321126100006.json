{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "satisfiability_solvers"}, {"score": 0.00471193241675062, "phrase": "novel_approach"}, {"score": 0.004631099806015235, "phrase": "software_models"}, {"score": 0.004551647527068771, "phrase": "deterministic_finite_state_automata"}, {"score": 0.004102639724186862, "phrase": "observed_executions"}, {"score": 0.003945879572348638, "phrase": "randomly_generated_failures"}, {"score": 0.0037299231609021783, "phrase": "new_greedy_heuristic"}, {"score": 0.00319141242685261, "phrase": "enhanced_edsm_algorithm"}, {"score": 0.0027422968723193057, "phrase": "edsm"}, {"score": 0.0026488343783448273, "phrase": "reduced_identification_problem"}, {"score": 0.002525489173110693, "phrase": "positive_data"}, {"score": 0.002449997042686432, "phrase": "identification_problem"}, {"score": 0.002387083859537412, "phrase": "greedy_heuristic"}, {"score": 0.002315719347244451, "phrase": "voting_scheme"}, {"score": 0.002207851585508636, "phrase": "hard_software_models"}, {"score": 0.0021418339161425994, "phrase": "dfasat"}, {"score": 0.0021049977753042253, "phrase": "stamina_competition"}], "paper_keywords": ["Software model synthesis", " Model inference", " Automaton identification", " Learning", " Satisfiability", " State machines"], "paper_abstract": "We introduce a novel approach for synthesis of software models based on identifying deterministic finite state automata. Our approach consists of three important contributions. First, we argue that in order to model software, one should focus mainly on observed executions (positive data), and use the randomly generated failures (negative data) only for testing consistency. We present a new greedy heuristic for this purpose, and show how to integrate it in the state-of-the-art evidence-driven state-merging (EDSM) algorithm. Second, we apply the enhanced EDSM algorithm to iteratively reduce the size of the problem. Yet during each iteration, the evidence is divided over states and hence the effectiveness of this algorithm is decreased. We propose-when EDSM becomes too weak-to tackle the reduced identification problem using satisfiability solvers. Third, in case the amount of positive data is small, we solve the identification problem several times by randomizing the greedy heuristic and combine the solutions using a voting scheme. The interaction between these contributions appeared crucial to solve hard software models synthesis benchmarks. Our implementation, called DFASAT, won the StaMinA competition.", "paper_title": "Software model synthesis using satisfiability solvers", "paper_id": "WOS:000321126100006"}