{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "initial_value_problems"}, {"score": 0.03628726402378378, "phrase": "state_space"}, {"score": 0.027358348817153058, "phrase": "time_domain"}, {"score": 0.004687645903373103, "phrase": "ordinary_differential_equations"}, {"score": 0.004563691742821759, "phrase": "large_subset"}, {"score": 0.004211069233133584, "phrase": "known_state_space"}, {"score": 0.004154995396099332, "phrase": "ode_system"}, {"score": 0.004027031316965272, "phrase": "subsequent_point"}, {"score": 0.0037997077863530897, "phrase": "computational_demand"}, {"score": 0.0037157201349604222, "phrase": "large_state_space"}, {"score": 0.0036826452656927877, "phrase": "parallel_computers"}, {"score": 0.0034902664176377943, "phrase": "conventional_parallelization_strategies"}, {"score": 0.0032347516831068715, "phrase": "single_time_step"}, {"score": 0.0030794433253250476, "phrase": "computational_problems"}, {"score": 0.003052014818816411, "phrase": "fine_granularity"}, {"score": 0.0028795712616923462, "phrase": "computational_effort"}, {"score": 0.002815864555488112, "phrase": "long_time_span"}, {"score": 0.002778317177178732, "phrase": "initial_value_problem"}, {"score": 0.002716844480081738, "phrase": "hybrid_dynamic_iterations"}, {"score": 0.0026567282965815823, "phrase": "conventional_sequential_ode_solvers"}, {"score": 0.0025518429503461736, "phrase": "empirical_results"}, {"score": 0.0024401411219526774, "phrase": "hybrid_dynamic_iterations_method"}, {"score": 0.0024075916292945715, "phrase": "conventional_ode_solver"}, {"score": 0.0023333173799963795, "phrase": "picard_iterations"}, {"score": 0.0022311596751824416, "phrase": "proposed_method"}, {"score": 0.0022112700457629494, "phrase": "better_convergence_and_speedup_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Time parallelization", " Hybrid dynamic iterations", " ODE solver"], "paper_abstract": "Many scientific problems are posed as Ordinary Differential Equations (ODEs). A large subset of these are initial value problems, which are typically solved numerically. The solution starts by using a known state space of the ODE system to determine the state at a subsequent point in time. This process is repeated several times. When the computational demand is high due to large state space, parallel computers can be used efficiently to reduce the time to solution. Conventional parallelization strategies distribute the state space of the problem amongst cores and distribute the task of computing for a single time step amongst the cores. They are not effective when the computational problems have fine granularity, for example, when the state space is relatively small and the computational effort arises largely from the long time span of the initial value problem. We propose a hybrid dynamic iterations method(1) which combines conventional sequential ODE solvers with dynamic iterations to parallelize the time domain. Empirical results demonstrate a factor of two to four improvement in performance of the hybrid dynamic iterations method over a conventional ODE solver on an 8 core processor. Compared to Picard iterations (also parallelized in the time domain), the proposed method shows better convergence and speedup results when high accuracy is required. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Hybrid dynamic iterations for the solution of initial value problems", "paper_id": "WOS:000295018500008"}