{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "javascript"}, {"score": 0.014673784969387827, "phrase": "jaws"}, {"score": 0.004690952711665194, "phrase": "adaptive_cpu-gpu_work_sharing"}, {"score": 0.004262881313926916, "phrase": "adaptive_work_sharing"}, {"score": 0.004117214741168746, "phrase": "gpu"}, {"score": 0.004046020290832207, "phrase": "data-parallel_workloads"}, {"score": 0.003941746077126688, "phrase": "conventional_heterogeneous_parallel_programming_environments"}, {"score": 0.003613119346373748, "phrase": "single_kernel"}, {"score": 0.0034894451015047875, "phrase": "kernel_execution"}, {"score": 0.0032830808525570903, "phrase": "full_performance_potential"}, {"score": 0.0032263862712733934, "phrase": "heterogeneous_multicores"}, {"score": 0.0030888830649190282, "phrase": "efficient_work"}, {"score": 0.002931569771634119, "phrase": "optimal_work_distribution"}, {"score": 0.002686935113435742, "phrase": "jaws_runtime"}, {"score": 0.002640507929183363, "phrase": "shared_arrays"}, {"score": 0.002594880866651459, "phrase": "multiple_parallel_contexts"}, {"score": 0.0025059724686541263, "phrase": "extra_copy_overhead"}, {"score": 0.002462664392109308, "phrase": "input_and_output_data"}, {"score": 0.002357632753637638, "phrase": "cpu-friendly_and_gpu-friendly_benchmarks"}, {"score": 0.002257070536352418, "phrase": "good_load_balancing_and_efficient_data_communication"}, {"score": 0.0021049977753042253, "phrase": "best_single-device_execution"}], "paper_keywords": ["Web browser", " JavaScript", " data parallelism", " GPU", " work sharing", " scheduler", " multi-core", " heterogeneity"], "paper_abstract": "This paper introduces JAWS, a JavaScript framework for adaptive work sharing between CPU and GPU for data-parallel workloads. Unlike conventional heterogeneous parallel programming environments for JavaScript, which use only one compute device when executing a single kernel, JAWS accelerates kernel execution by exploiting both devices to realize full performance potential of heterogeneous multicores. JAWS employs an efficient work partitioning algorithm that finds an optimal work distribution between the two devices without requiring offline profiling. The JAWS runtime provides shared arrays for multiple parallel contexts, hence eliminating extra copy overhead for input and output data. Our preliminary evaluation with both CPU-friendly and GPU-friendly benchmarks demonstrates that JAWS provides good load balancing and efficient data communication between parallel contexts, to significantly outperform best single-device execution.", "paper_title": "JAWS: A JavaScript Framework for Adaptive CPU-GPU Work Sharing", "paper_id": "WOS:000367254800025"}