{"auto_keywords": [{"score": 0.044340662163821154, "phrase": "rg"}, {"score": 0.02749855341241015, "phrase": "latency_savings"}, {"score": 0.024855551062883518, "phrase": "resource_consumption"}, {"score": 0.00481495049065317, "phrase": "referrer_graph"}, {"score": 0.004590820632326585, "phrase": "web_accesses"}, {"score": 0.0044826811976193485, "phrase": "prediction_algorithm"}, {"score": 0.004429566229017728, "phrase": "pruning_method"}, {"score": 0.004377077848734575, "phrase": "associated_graph"}, {"score": 0.004325208730208653, "phrase": "low-cost_solution"}, {"score": 0.004273951631010383, "phrase": "next_web_users_accesses"}, {"score": 0.0041074234667687875, "phrase": "real_web_system"}, {"score": 0.004074901471704325, "phrase": "prefetching_capabilities"}, {"score": 0.003931697356115479, "phrase": "users_accesses"}, {"score": 0.0038696708318671446, "phrase": "markov_model"}, {"score": 0.0037040785566765954, "phrase": "user_accesses"}, {"score": 0.0036167509502276294, "phrase": "previous_markov_model_based_proposals"}, {"score": 0.0034073030552032304, "phrase": "different_pages"}, {"score": 0.0031467250930224126, "phrase": "simple_data_structure"}, {"score": 0.0030119758165837625, "phrase": "lower_computational_cost"}, {"score": 0.0029292375702719468, "phrase": "pruning_mechanism"}, {"score": 0.0028487656293168795, "phrase": "continuous_growing"}, {"score": 0.002814956065949522, "phrase": "data_structure"}, {"score": 0.0027159094186967247, "phrase": "best_prediction_algorithms"}, {"score": 0.00267301171407926, "phrase": "open_literature"}, {"score": 0.0026412824985309323, "phrase": "rg_algorithm"}, {"score": 0.0026203386550421558, "phrase": "similar_precision_values"}, {"score": 0.002468450551616404, "phrase": "additional_and_notable_resource_consumption_savings"}, {"score": 0.0024101837218440834, "phrase": "original_performance"}, {"score": 0.002279508335630797, "phrase": "de_graph"}, {"score": 0.002190519728921395, "phrase": "baseline_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Web prediction and prefetching", " Prediction algorithm", " Web latency reduction", " Performance evaluation", " Measurement"], "paper_abstract": "This paper presents the Referrer Graph (RG) web prediction algorithm and a pruning method for the associated graph as a low-cost solution to predict next web users accesses. RG is aimed at being used in a real web system with prefetching capabilities without degrading its performance. The algorithm learns from users accesses and builds a Markov model. These kinds of algorithms use the sequence of the user accesses to make predictions. Unlike previous Markov model based proposals, the RG algorithm differentiates dependencies in objects of the same page from objects of different pages by using the object URI and the referrer in each request. Although its design permits us to build a simple data structure that is easier to handle and, consequently, needs lower computational cost in comparison with other algorithms, a pruning mechanism has been devised to avoid the continuous growing of this data structure. Results show that, compared with the best prediction algorithms proposed in the open literature, the RG algorithm achieves similar precision values and page latency savings but requiring much less computational and memory resources. Furthermore, when pruning is applied, additional and notable resource consumption savings can be achieved without degrading original performance. In order to reduce further the resource consumption, a mechanism to prune de graph has been devised, which reduces resource consumption of the baseline system without degrading the latency savings. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Referrer Graph: A cost-effective algorithm and pruning method for predicting web accesses", "paper_id": "WOS:000318466100004"}