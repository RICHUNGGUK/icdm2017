{"auto_keywords": [{"score": 0.03711366874776075, "phrase": "reference_affinity"}, {"score": 0.00481495049065317, "phrase": "data_locality"}, {"score": 0.004697308822154191, "phrase": "petrank"}, {"score": 0.004651058529509526, "phrase": "rawitz"}, {"score": 0.004582528208024817, "phrase": "universal_result-finding_optimal_data_placement"}, {"score": 0.004494546414872088, "phrase": "np"}, {"score": 0.00427578268550103, "phrase": "constant_factor"}, {"score": 0.004069280130346136, "phrase": "recently_published_concept"}, {"score": 0.003667395956878177, "phrase": "theoretical_side"}, {"score": 0.0034901729647741353, "phrase": "program_traces"}, {"score": 0.003421697038352743, "phrase": "novel_reduction"}, {"score": 0.0031297538950335233, "phrase": "hierarchical_locality"}, {"score": 0.0030988889679192965, "phrase": "divide-and-conquer_computations"}, {"score": 0.003023047748772801, "phrase": "n-body_simulation"}, {"score": 0.0029490571526071016, "phrase": "formal_links"}, {"score": 0.0029199689963238726, "phrase": "computation_patterns"}, {"score": 0.002862648127577722, "phrase": "locality_relations"}, {"score": 0.0027787638791664663, "phrase": "practical_side"}, {"score": 0.002710735995572145, "phrase": "efficient_heuristics"}, {"score": 0.002592444377471345, "phrase": "sampling_method"}, {"score": 0.002467038647952607, "phrase": "previously_published_technique"}, {"score": 0.0022452005651385095, "phrase": "generated_and_real_traces"}, {"score": 0.0022120408738490437, "phrase": "theoretical_and_empirical_results"}, {"score": 0.0021793698531006197, "phrase": "effective_data_placement"}, {"score": 0.0021259846592569386, "phrase": "general-purpose_programs"}], "paper_keywords": ["theory", " algorithms", " performance", " hierarchical data placement", " program locality", " reference affinity", " volume distance", " NP-complete", " N-body simulation"], "paper_abstract": "In POPL 2002, Petrank and Rawitz showed a universal result-finding optimal data placement is not only NP-hard but also impossible to approximate within a constant factor if P not equal NP. Here we study a recently published concept called reference affinity, which characterizes a group of data that are always accessed together in computation. On the theoretical side, we give the complexity for finding reference affinity in program traces, using a novel reduction that converts the notion of distance into satisfiability. We also prove that reference affinity automatically captures the hierarchical locality in divide-and-conquer computations including matrix solvers and N-body simulation. The proof establishes formal links between computation patterns in time and locality relations in space. On the practical side, we show that efficient heuristics exist. In particular, we present a sampling method and show that it is more effective than the previously published technique, especially for data that are often but not always accessed together. We show the effect on generated and real traces. These theoretical and empirical results demonstrate that effective data placement is still attainable in general-purpose programs because common (albeit not all) locality patterns can be precisely modeled and efficiently analyzed.", "paper_title": "A hierarchical model of data locality", "paper_id": "WOS:000235615800004"}