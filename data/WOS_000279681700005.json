{"auto_keywords": [{"score": 0.03630916610929368, "phrase": "nbmalloc"}, {"score": 0.007679327368326169, "phrase": "multiprocessor_systems"}, {"score": 0.00481495049065317, "phrase": "lock-free_manner"}, {"score": 0.004669180816745142, "phrase": "multithreaded_applications"}, {"score": 0.004580314008293946, "phrase": "significant_goal"}, {"score": 0.004545240514015278, "phrase": "recent_research"}, {"score": 0.004475893575036647, "phrase": "distributed_computing_literature"}, {"score": 0.0043738432231020885, "phrase": "lock-based_synchronization"}, {"score": 0.004176640648520877, "phrase": "system_services"}, {"score": 0.004050116768809519, "phrase": "full_potential"}, {"score": 0.003957735532719663, "phrase": "natural_research_question"}, {"score": 0.003837817436476726, "phrase": "lock-free_concurrency_control"}, {"score": 0.0036788184374592706, "phrase": "memory_allocation_service"}, {"score": 0.00314189606872729, "phrase": "hoard"}, {"score": 0.003011641380351577, "phrase": "modular_design"}, {"score": 0.002842655426951218, "phrase": "appropriate_lock-free_algorithms"}, {"score": 0.0027458373015999916, "phrase": "lock-free_implementation"}, {"score": 0.0027143009946473937, "phrase": "new_data_structure"}, {"score": 0.002662541169311738, "phrase": "conventional_\"internal\"_set_operations"}, {"score": 0.002121281184742656, "phrase": "good_properties"}, {"score": 0.0021049977753042253, "phrase": "hoard_w.r.t"}], "paper_keywords": ["Memory allocation", " Lock-free synchronization", " Non-blocking synchronization", " Multithreaded applications"], "paper_abstract": "Efficient, scalable memory allocation for multithreaded applications on multiprocessors is a significant goal of recent research. In the distributed computing literature it has been emphasized that lock-based synchronization and concurrency-control may limit the parallelism in multiprocessor systems. Thus, system services that employ such methods can hinder reaching the full potential of these systems. A natural research question is the pertinence and the impact of lock-free concurrency control in key services for multiprocessors, such as in the memory allocation service, which is the theme of this work. We show the design and implementation of NBmalloc, a lock-free memory allocator designed to enhance the parallelism in the system. The architecture of NBmalloc is inspired by Hoard, a well-known concurrent memory allocator, with modular design that preserves scalability and helps avoiding false-sharing and heap-blowup. Within our effort to design appropriate lock-free algorithms for NBmalloc, we propose and show a lock-free implementation of a new data structure, flat-set, supporting conventional \"internal\" set operations as well as \"inter-object\" operations, for moving items between flat-sets. The design of NBmalloc also involved a series of other algorithmic problems, which are discussed in the paper. Further, we present the implementation of NBmalloc and a study of its behaviour in a set of multiprocessor systems. The results show that the good properties of Hoard w.r.t. false-sharing and heap-blowup are preserved.", "paper_title": "NBmalloc: Allocating Memory in a Lock-Free Manner", "paper_id": "WOS:000279681700005"}