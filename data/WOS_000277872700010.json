{"auto_keywords": [{"score": 0.03322896035443117, "phrase": "mpatcga"}, {"score": 0.005760368478861608, "phrase": "experimental_results"}, {"score": 0.005657486951567426, "phrase": "higher_optimization_precision"}, {"score": 0.00481495049065317, "phrase": "double_agents_structure"}, {"score": 0.004694873827535293, "phrase": "multi-population_agent_co-genetic_algorithm"}, {"score": 0.004415523687947897, "phrase": "low_optimization_precision"}, {"score": 0.004320932773749168, "phrase": "simple_genetic_algorithm"}, {"score": 0.004182816319761868, "phrase": "multi-population_parallel_searching_mode"}, {"score": 0.004152725837204292, "phrase": "close_chain-like_agent_structure"}, {"score": 0.004122850924351265, "phrase": "cycle_chain-like_agent_structure"}, {"score": 0.004005476499933792, "phrase": "crossover_strategy"}, {"score": 0.0039623243082901214, "phrase": "parallel_optimization"}, {"score": 0.0038634281440398355, "phrase": "high_optimization_precision"}, {"score": 0.0035426543993952184, "phrase": "imbalanced_workload"}, {"score": 0.0034541965053691307, "phrase": "optimization_precision"}, {"score": 0.003392363211686023, "phrase": "binary_coding"}, {"score": 0.0033557940171476683, "phrase": "popular_benchmark_test_functions"}, {"score": 0.0032484270911235526, "phrase": "popular_agent_genetic_algorithm"}, {"score": 0.0030993584115563146, "phrase": "shorter_optimization_time"}, {"score": 0.0029893477597041493, "phrase": "optimization_performance"}, {"score": 0.0029464414592923196, "phrase": "real_coding"}, {"score": 0.002872827714395808, "phrase": "feature_selection_problems"}, {"score": 0.002852134080296829, "phrase": "optimization_algorithm"}, {"score": 0.0024151333926491878, "phrase": "different_size"}, {"score": 0.0023125643872311994, "phrase": "different_sub-populations"}, {"score": 0.0022063469115990715, "phrase": "different_sub-population"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Genetic algorithm", " Multi-population", " Agent", " Chain-like agent structure", " Global numerical optimization", " Feature selection", " Adaptability", " Size of sub-population"], "paper_abstract": "This paper systematically proposed a multi-population agent co-genetic algorithm with double chain-like agent structure (MPATCGA) to solve the problem of the low optimization precision and long optimization time of simple genetic algorithm in terms of two coding strategy. This algorithm adopted multi-population parallel searching mode, close chain-like agent structure, cycle chain-like agent structure, dynamic neighborhood competition, and improved crossover strategy to realize parallel optimization, and has the characteristics of high optimization precision and short optimization time. Besides, the size of each sub-population is adaptive. The characteristic is very competitive when dealing with imbalanced workload. In order to verify the optimization precision of this algorithm with binary coding, some popular benchmark test functions were used for comparing this algorithm and a popular agent genetic algorithm (MAGA). The experimental results show that MPATCGA has higher optimization precision and shorter optimization time than MAGA. Besides, in order to show the optimization performance of MPATCGA with real coding, the authors used it for feature selection problems as optimization algorithm and compared it with some other well-known GAs. The experimental results show that MPATCGA has higher optimization precision (feature selection precision). In order to show the performance of the adaptability of size of sub-populations, MPATCGA with sub-populations with same size and MPATCGA with sub-populations with different size are compared. The experimental results show that when the workload on different sub-populations becomes not same, the adaptability will adaptively change the size of different sub-population to obtain precision as high as possible. (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "Two coding based adaptive parallel co-genetic algorithm with double agents structure", "paper_id": "WOS:000277872700010"}