{"auto_keywords": [{"score": 0.03860175540477755, "phrase": "afvq"}, {"score": 0.03531065146874377, "phrase": "ack_packets"}, {"score": 0.008622897244109503, "phrase": "acks-first_variable-size_queuing"}, {"score": 0.0077439698042091444, "phrase": "download_throughput"}, {"score": 0.006863311711634839, "phrase": "network_configurations"}, {"score": 0.00481495049065317, "phrase": "performance_interference"}, {"score": 0.00478968045369969, "phrase": "asymmetric_links"}, {"score": 0.00471465954562773, "phrase": "network-enabled_embedded_systems"}, {"score": 0.004604315481634605, "phrase": "great_deal"}, {"score": 0.004508391992630655, "phrase": "network_performance_problems"}, {"score": 0.00433386573276633, "phrase": "asymmetric_link"}, {"score": 0.004166067358313907, "phrase": "tcp_traffic"}, {"score": 0.0038904014540990877, "phrase": "tcp_protocol_modifications"}, {"score": 0.0038699648075244297, "phrase": "end-user_devices"}, {"score": 0.003809294294086141, "phrase": "limited_range"}, {"score": 0.0035384592278704793, "phrase": "analytic_model"}, {"score": 0.0035106041824568618, "phrase": "steady-state_tcp_performance"}, {"score": 0.0030853715963389135, "phrase": "acks-first_scheduling"}, {"score": 0.0030369638679979085, "phrase": "queuing_delay"}, {"score": 0.0029814443878969973, "phrase": "queue_size"}, {"score": 0.0028962370433768267, "phrase": "data_packets"}, {"score": 0.0026689487424251907, "phrase": "output_queue"}, {"score": 0.0026201393555420945, "phrase": "balanced_tcp_throughput_improvements"}, {"score": 0.0025452314655691165, "phrase": "circular_dependencies"}, {"score": 0.0024144659350277954, "phrase": "linux_kernel"}, {"score": 0.0023516185395256505, "phrase": "maximum_download"}, {"score": 0.002339246282204109, "phrase": "upload_bandwidth"}, {"score": 0.0022843698828017536, "phrase": "proposed_mechanism"}, {"score": 0.0022485010715463244, "phrase": "wide_range"}, {"score": 0.0021957487795963666, "phrase": "better_upload"}, {"score": 0.002155574508111728, "phrase": "acq_acks-first_scheduling"}, {"score": 0.002105000283232273, "phrase": "elsevier"}], "paper_keywords": ["Asymmetric link", " TCP", " Performance interference", " Queue scheduling"], "paper_abstract": "In developing network-enabled embedded systems, developers are often forced to spend a great deal of time and effort analyzing and solving network performance problems. In this paper, we address one such problem: TCP performance interference on an asymmetric link. The upload or download throughput abruptly degrades if there is simultaneously upload and download TCP traffic on the link. While the problem has been addressed by many researchers, their solutions are incomplete as they only improve throughput in one direction, require TCP protocol modifications in end-user devices or are effective for a limited range of network configurations. In order to overcome such limitations, we propose ACKs-first variable-size queuing (AFVQ) for a gateway. In doing so, we have derived an analytic model of the steady-state TCP performance with bidirectional traffic to clearly identify the two sources of the problem: the excessive queuing delay of ACK packets and the excessive number of ACK packets in the queue. Our AFVQ mechanism is designed to directly eliminate the two causes. Specifically, we have based AFVQ on two policies. First, ACKs-first scheduling is used to shorten the queuing delay of ACK packets. Second, the queue size for ACK packets is dynamically adjusted depending on the number of data packets queued in the gateway so that the number of ACK packets is reduced when packets are congested in the gateway. By applying the two policies simultaneously at the uplink and downlink output queue in the gateway, AFVQ achieves balanced TCP throughput improvements in both directions. In this way, it breaks circular dependencies between upload and download traffic. We have implemented AFVQ in our ADSL-based residential gateway using the traffic control module of the Linux kernel. Our gateway yields 95.2% and 93.8% of the maximum download and upload bandwidth, respectively. We have also evaluated the proposed mechanism using the ns-2 simulator over a wide range of network configurations and have shown that AFVQ achieves better upload and download throughput than other representative gateway-based mechanisms such as ACQ ACKs-first scheduling and ACK Filtering. (C) 2010 Elsevier By. All rights reserved.", "paper_title": "Preventing TCP performance interference on asymmetric links using ACKs-first variable-size queuing", "paper_id": "WOS:000288926000004"}