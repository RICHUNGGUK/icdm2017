{"auto_keywords": [{"score": 0.044700840243043126, "phrase": "instruction_codes"}, {"score": 0.015719716506582538, "phrase": "processor_instruction_sets"}, {"score": 0.004771196027464407, "phrase": "explicit_concurrency_control"}, {"score": 0.004663533386096864, "phrase": "critical_need"}, {"score": 0.004621148492564008, "phrase": "design_automation"}, {"score": 0.004579147045265106, "phrase": "microarchitectural_modelling"}, {"score": 0.004354841111644036, "phrase": "necessary_automation_support"}, {"score": 0.003974673997871831, "phrase": "formal_methods"}, {"score": 0.003920573616298175, "phrase": "software_tool"}, {"score": 0.0035294580355761506, "phrase": "conditional_partial_order_graph"}, {"score": 0.003356396922662246, "phrase": "efficient_specification"}, {"score": 0.003177235604998673, "phrase": "functional_composition"}, {"score": 0.0030076088903023034, "phrase": "partial_order"}, {"score": 0.0028600623410146796, "phrase": "cpog"}, {"score": 0.0028082176224611542, "phrase": "different_encodings"}, {"score": 0.002769950045729965, "phrase": "boolean_vectors"}, {"score": 0.002682669289913153, "phrase": "final_microcontroller"}, {"score": 0.0026220103561723066, "phrase": "chosen_encodings"}, {"score": 0.0024706232839499546, "phrase": "cpog_model"}, {"score": 0.0024147474002390763, "phrase": "efficient_representation"}, {"score": 0.0023067494372458427, "phrase": "concise_formulation"}, {"score": 0.0022136780933978612, "phrase": "boolean_satisfiability"}, {"score": 0.0021049977753042253, "phrase": "modern_sat_solvers"}], "paper_keywords": [""], "paper_abstract": "There is a critical need for design automation in microarchitectural modelling and synthesis. One of the areas which lacks the necessary automation support is synthesis of instruction codes targeting various design optimality criteria. This paper aims to fill this gap by providing a set of formal methods and a software tool for synthesis of instruction codes given the description of a processor as a set of instructions. The method is based on the conditional partial order graph (CPOG) model, which is a formalism for efficient specification and synthesis of microcontrollers. It describes a system as a functional composition of its behavioural scenarios, or instructions, each of them being a partial order of events. In order to distinguish instructions within a CPOG they are given different encodings represented with Boolean vectors. Size and latency of the final microcontroller significantly depends on the chosen encodings, thus efficient synthesis of instruction codes is essential. The paper shows that the CPOG model is a very convenient formalism for efficient representation of processor instruction sets. It provides a ground for a concise formulation of several encoding problems, which are reducible to the Boolean satisfiability (SAT) problem and can be efficiently solved by modern SAT solvers.", "paper_title": "Encoding of processor instruction sets with explicit concurrency control", "paper_id": "WOS:000298115900002"}