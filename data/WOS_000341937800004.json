{"auto_keywords": [{"score": 0.037854240060554, "phrase": "unison"}, {"score": 0.01456248064531874, "phrase": "ultimate_coalescing"}, {"score": 0.014392064736248957, "phrase": "spill_code_optimization"}, {"score": 0.009354047347424057, "phrase": "llvm"}, {"score": 0.008610203268981459, "phrase": "optimal_code"}, {"score": 0.004814975877254897, "phrase": "ultimate"}, {"score": 0.004618720776729413, "phrase": "novel_combinatorial_model"}, {"score": 0.0045370785151713396, "phrase": "global_register_allocation"}, {"score": 0.004352123742308589, "phrase": "register_packing"}, {"score": 0.004174677062711731, "phrase": "instruction_scheduling"}, {"score": 0.004100851853852081, "phrase": "vliw"}, {"score": 0.003957078581524691, "phrase": "alternative_temporaries"}, {"score": 0.003795677450778112, "phrase": "new_concept"}, {"score": 0.0035341028694769036, "phrase": "code_generator"}, {"score": 0.0034101316738399203, "phrase": "advanced_solving_techniques"}, {"score": 0.003369778677878286, "phrase": "constraint_programming"}, {"score": 0.0033299015941662302, "phrase": "thorough_experiments"}, {"score": 0.003290495336930143, "phrase": "mediabench"}, {"score": 0.0031940396076681242, "phrase": "hexagon"}, {"score": 0.0030819219279832224, "phrase": "embedded_systems"}, {"score": 0.0028865314258560214, "phrase": "faster_code"}, {"score": 0.0027358910467781155, "phrase": "mean_improvement"}, {"score": 0.0024577274522206436, "phrase": "different_optimization_criteria"}, {"score": 0.0021946656099592608, "phrase": "traditional_code_generation_algorithms"}, {"score": 0.0021049977753042253, "phrase": "simple_integrated_model"}], "paper_keywords": ["spill code optimization", " ultimate coalescing", " combinatorial optimization", " register allocation", " instruction scheduling"], "paper_abstract": "This paper presents a novel combinatorial model that integrates global register allocation based on ultimate coalescing, spill code optimization, register packing, and multiple register banks with instruction scheduling (including VLIW). The model exploits alternative temporaries that hold the same value as a new concept for ultimate coalescing and spill code optimization. The paper presents Unison as a code generator based on the model and advanced solving techniques using constraint programming. Thorough experiments using MediaBench and a processor (Hexagon) that are typical for embedded systems demonstrate that Unison: is robust and scalable; generates faster code than LLVM (up to 4 1 % with a mean improvement of 7 %); possibly generates optimal code (for 2 9 % of the experiments); effortlessly supports different optimization criteria (code size on par with LLVM). Unison is significant as it addresses the same aspects as traditional code generation algorithms, yet is based on a simple integrated model and robustly can generate optimal code.", "paper_title": "Combinatorial Spill Code Optimization and Ultimate Coalescing", "paper_id": "WOS:000341937800004"}