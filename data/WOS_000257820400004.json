{"auto_keywords": [{"score": 0.03630594953028295, "phrase": "stopless"}, {"score": 0.00481495049065317, "phrase": "concurrent_real-time_garbage_collectors"}, {"score": 0.0047522719541355065, "phrase": "concurrent"}, {"score": 0.004539005582217309, "phrase": "real-time_systems"}, {"score": 0.004392565073466714, "phrase": "collection_effort"}, {"score": 0.004306968571854912, "phrase": "executing_threads"}, {"score": 0.0042508289538799905, "phrase": "faster_response"}, {"score": 0.004140726362519362, "phrase": "extremely_short_deadlines"}, {"score": 0.00406001734835979, "phrase": "microseconds_level"}, {"score": 0.004007083686875716, "phrase": "concurrent_collectors"}, {"score": 0.003877737556673229, "phrase": "incremental_collectors"}, {"score": 0.003802135020791801, "phrase": "main_problem"}, {"score": 0.003752550907120244, "phrase": "concurrent_real-time_collectors"}, {"score": 0.003607630811220324, "phrase": "first_concurrent_real-time_garbage_collector"}, {"score": 0.0032908057622663732, "phrase": "pizlo_et_al"}, {"score": 0.00308163068747474, "phrase": "concurrent_real-time_garbage_collection"}, {"score": 0.0029238768315330305, "phrase": "reduced_complexity"}, {"score": 0.002866817775018445, "phrase": "first_collector"}, {"score": 0.0025977542995083646, "phrase": "algorithmic_strengths"}, {"score": 0.002530429222375239, "phrase": "clover"}, {"score": 0.002497330756334028, "phrase": "chicken"}, {"score": 0.0022628564592874147, "phrase": "bartok_compiler"}], "paper_keywords": ["algorithms", " design", " performance", " reliability"], "paper_abstract": "Concurrent garbage collection is highly attractive for real-time systems, because offloading the collection effort from the executing threads allows faster response, allowing for extremely short deadlines at the microseconds level. Concurrent collectors also offer much better scalability over incremental collectors. The main problem with concurrent real-time collectors is their complexity. The first concurrent real-time garbage collector that can support fine synchronization, STOPLESS, has recently been presented by Pizlo et al. In this paper, we propose two additional ( and different) algorithms for concurrent real-time garbage collection: CLOVER and CHICKEN. Both collectors obtain reduced complexity over the first collector STOPLESS, but need to trade a benefit for it. We study the algorithmic strengths and weaknesses of CLOVER and CHICKEN and compare them to STOPLESS. Finally, we have implemented all three collectors on the Bartok compiler and runtime for C# and we present measurements to compare their efficiency and responsiveness.", "paper_title": "A study of concurrent real-time garbage collectors", "paper_id": "WOS:000257820400004"}