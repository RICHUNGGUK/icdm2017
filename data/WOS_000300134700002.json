{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "performance_data"}, {"score": 0.004685575787741084, "phrase": "traditional_methods"}, {"score": 0.00460125407969429, "phrase": "performance_analysis"}, {"score": 0.004477595431209663, "phrase": "code_centric_view"}, {"score": 0.004126123386192962, "phrase": "contiguous_code"}, {"score": 0.0036998728605395384, "phrase": "data_centric_techniques"}, {"score": 0.0035677736570659813, "phrase": "hardware_counter_information"}, {"score": 0.0033175095965171674, "phrase": "cycle_count"}, {"score": 0.0029209233709517634, "phrase": "data_centric_performance_numbers"}, {"score": 0.0028422946420821075, "phrase": "hardware_support"}, {"score": 0.0027407299369891502, "phrase": "extended_data_centric_mappings"}, {"score": 0.002502374576203785, "phrase": "data_centric_information"}, {"score": 0.0024572448003065423, "phrase": "high_level_data_structures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Performance analysis", " Data centric", " Variable blame"], "paper_abstract": "Traditional methods of performance analysis offer a code centric view, presenting performance data in terms of blocks of contiguous code (statement, basic block, loop, function). Data centric techniques, combined with hardware counter information, allow various program properties including cache misses and cycle count to be mapped directly to variables. We introduce mechanisms for efficiently collecting data centric performance numbers independent of hardware support. We create extended data centric mappings, which we call variable blame, that relates data centric information to high level data structures. Finally, we show performance data gathered from three parallel programs using our technique. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Data centric techniques for mapping performance data to program variables", "paper_id": "WOS:000300134700002"}