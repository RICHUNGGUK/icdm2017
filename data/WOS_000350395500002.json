{"auto_keywords": [{"score": 0.03326618079296328, "phrase": "di-mmap"}, {"score": 0.00481495049065317, "phrase": "di-mmap-a"}, {"score": 0.0046253989970108985, "phrase": "out-of-core_data-intensive_applications"}, {"score": 0.004243862930012258, "phrase": "large_external_data_sets"}, {"score": 0.004171402455813099, "phrase": "application's_address_space"}, {"score": 0.0041001740903338834, "phrase": "significantly_better_performance"}, {"score": 0.004030157055463817, "phrase": "linux_mmap_system_call"}, {"score": 0.0038052556098065694, "phrase": "high_performance"}, {"score": 0.0037402558657576124, "phrase": "flash_arrays"}, {"score": 0.003431481042678356, "phrase": "benchmark_test_suite"}, {"score": 0.002938317647182056, "phrase": "standard_linux_mmap"}, {"score": 0.0028880836335117297, "phrase": "fully_external_memory_configuration"}, {"score": 0.0028550917692627613, "phrase": "bfs"}, {"score": 0.0027424619603260837, "phrase": "traditional_mmap"}, {"score": 0.002487083025913648, "phrase": "bfs_traversal"}, {"score": 0.0024586427394152196, "phrase": "main_memory"}, {"score": 0.002444544487772349, "phrase": "constrained_scenarios"}, {"score": 0.002321234686549485, "phrase": "fixed_amount"}, {"score": 0.0022424956516376073, "phrase": "larger_problem"}, {"score": 0.0021049977753042253, "phrase": "multiple_data-intensive_applications"}], "paper_keywords": ["Data-intensive", " Memory-map runtime", " Memory architecture", " NVRAM"], "paper_abstract": "We present DI-MMAP, a high-performance runtime that memory-maps large external data sets into an application's address space and shows significantly better performance than the Linux mmap system call. Our implementation is particularly effective when used with high performance locally attached Flash arrays on highly concurrent, latency-tolerant data-intensive HPC applications. We describe the kernel module and show performance results on a benchmark test suite, a new bioinformatics metagenomic classification application, and on a level-asynchronous Breadth-First Search (BFS) graph traversal algorithm. Using DI-MMAP, the metagenomics classification application performs up to 4x better than standard Linux mmap. A fully external memory configuration of BFS executes up to 7.44x faster than traditional mmap. Finally, we demonstrate that DI-MMAP shows scalable out-of-core performance for BFS traversal in main memory constrained scenarios. Such scalable memory constrained performance would allow a system with a fixed amount of memory to solve a larger problem as well as provide memory QoS guarantees for systems running multiple data-intensive applications.", "paper_title": "DI-MMAP-a scalable memory-map runtime for out-of-core data-intensive applications", "paper_id": "WOS:000350395500002"}