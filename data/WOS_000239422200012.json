{"auto_keywords": [{"score": 0.04322873010093233, "phrase": "java"}, {"score": 0.003866268750750096, "phrase": "paige's_entity_groups"}, {"score": 0.0037273513742154237, "phrase": "abstract_view"}, {"score": 0.0036198068824262464, "phrase": "equivalence_classes"}, {"score": 0.0031961879138783012, "phrase": "general_theory"}, {"score": 0.0028220038404484196, "phrase": "non-terminating_programs"}, {"score": 0.002455266773537278, "phrase": "total_correctness"}, {"score": 0.002419542935774618, "phrase": "pointer-based_sequential_programs"}, {"score": 0.0022158306933307685, "phrase": "object-oriented_language"}, {"score": 0.0021049977753042253, "phrase": "state-rich_and_concurrent_systems"}], "paper_keywords": ["semantics", " refinement", " relations", " object models"], "paper_abstract": "We present a theory of pointers and records that provides a representation for objects and sharing in languages like Java and C++. Our approach to pointers is based on Paige's entity groups, which give an abstract view of storage as equivalence classes of variables that share the same memory location. We first define our theory as a restriction of the general theory of relations, and, as a consequence, it does not distinguish between terminating and non-terminating programs. Therefore, we link it with the theory of designs, providing a foundation for reasoning about total correctness of pointer-based sequential programs. Our work is a step towards the semantics of an object-oriented language that also integrates constructs for specifying state-rich and concurrent systems.", "paper_title": "Pointers and records in the Unifying Theories of Programming", "paper_id": "WOS:000239422200012"}