{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multiple_indexes"}, {"score": 0.018365571766898944, "phrase": "index_interpolation"}, {"score": 0.010382455963398301, "phrase": "time-series_subsequence_matching"}, {"score": 0.006943078110559749, "phrase": "optimal_window_sizes"}, {"score": 0.0047797212183363835, "phrase": "efficient_subsequence_matching"}, {"score": 0.004744748477093856, "phrase": "time-series_databases"}, {"score": 0.0044904452331803, "phrase": "query_sequence"}, {"score": 0.004441236717408874, "phrase": "time-series_database"}, {"score": 0.004344424495876066, "phrase": "performance_issue"}, {"score": 0.004187718090913465, "phrase": "performance_degradation"}, {"score": 0.004126623209579942, "phrase": "window_size_effect"}, {"score": 0.0039341294012600085, "phrase": "single_index"}, {"score": 0.0038624981944755813, "phrase": "real_applications"}, {"score": 0.0037505809981715024, "phrase": "fairly_effective_tool"}, {"score": 0.0036418947847496365, "phrase": "subsequence_matching"}, {"score": 0.003086492169113408, "phrase": "physical_database_design"}, {"score": 0.002910080228097109, "phrase": "query_sequences"}, {"score": 0.002846549461929597, "phrase": "target_application"}, {"score": 0.0027946649584841754, "phrase": "window_sizes"}, {"score": 0.002673957615079041, "phrase": "overall_cost"}, {"score": 0.0024660058541899647, "phrase": "entire_subsequence_matchings"}, {"score": 0.002175913488493802, "phrase": "large_volume"}, {"score": 0.0021520139248317333, "phrase": "synthetic_data_set"}], "paper_keywords": [""], "paper_abstract": "Time-series subsequence matching is an operation that searches for such data subsequences whose changing patterns are similar to a query sequence from a time-series database. This paper addresses a performance issue of time-series subsequence matching. First, we quantitatively examine the performance degradation caused by the window size effect, and then show that the performance of subsequence matching with a single index is not satisfactory in real applications. We claim that index interpolation is a fairly effective tool to resolve this problem. Index interpolation performs subsequence matching by selecting the most appropriate one from multiple indexes built on windows of their distinct sizes. For index interpolation, we need to decide the sizes of windows for multiple indexes to be built. In this paper, we solve the problem of selecting optimal window sizes in the perspective of physical database design. For this, given a set of pairs (length, frequency) of query sequences to be performed in a target application and a set of window sizes for building multiple indexes, we devise a formula that estimates the overall cost of all the subsequence matchings. By using this formula, we propose an algorithm that determines the optimal window sizes for maximizing the performance of entire subsequence matchings. We formally prove the optimality as well as the effectiveness of the algorithm. Finally, we perform a series of experiments with a real-life stock data set and a large volume of a synthetic data set to show the superiority of our approach.", "paper_title": "Using multiple indexes for efficient subsequence matching in time-series databases", "paper_id": "WOS:000238093200007"}