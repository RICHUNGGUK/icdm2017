{"auto_keywords": [{"score": 0.048636009815037955, "phrase": "model_processing_programs"}, {"score": 0.028936493811077223, "phrase": "model_transformations"}, {"score": 0.00481495049065317, "phrase": "functional_properties"}, {"score": 0.004347972379250724, "phrase": "essential_component"}, {"score": 0.004303830426772906, "phrase": "reliable_software"}, {"score": 0.004274650638302117, "phrase": "model-based_software_engineering"}, {"score": 0.0040481944502103505, "phrase": "algebraic_graph"}, {"score": 0.004020740863986328, "phrase": "systemssuch_programs"}, {"score": 0.0038467574225322086, "phrase": "important_research_area"}, {"score": 0.0037307208089736835, "phrase": "offline_transformation_analysis"}, {"score": 0.003705412219296983, "phrase": "automated_methods"}, {"score": 0.003520971639466546, "phrase": "language_definitions"}, {"score": 0.0034733518170738517, "phrase": "target_models"}, {"score": 0.0033116807159861766, "phrase": "concrete_source_models"}, {"score": 0.003157510936118389, "phrase": "previous_work"}, {"score": 0.0030310732341527168, "phrase": "individual_components"}, {"score": 0.0029596622424171264, "phrase": "complete_verification_solution"}, {"score": 0.0026995881394357504, "phrase": "declarative_way"}, {"score": 0.0025914395870574787, "phrase": "declarative_transformations"}, {"score": 0.0024372660612788184, "phrase": "verification_framework"}, {"score": 0.00235560370536971, "phrase": "case_study"}, {"score": 0.00232370829395582, "phrase": "formal_verification"}, {"score": 0.0023079225317714815, "phrase": "model_transformation_properties"}, {"score": 0.0021705796895687864, "phrase": "manual_verification"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["model processing", " model transformation", " graph rewriting", " verification", " offline analysis"], "paper_abstract": "Model processing programs are regularly used when working with models or synthetizing the code from them; therefore, their verification has become an essential component of constructing reliable software in model-based software engineering. Models are usually formalized and visualized as graphs; therefore, model processing programs based on algebraic graph rewriting systemssuch programs are called model transformationsare often applied, and their verification has become an important research area. The goal of our research is to support offline transformation analysis by automated methods, where offline means that only the definition of the program itself, the language definitions of its source and target models are used during the analysis. Therefore, the results are independent from concrete source models, and the analysis needs to be performed only once. Based on previous work, this paper provides the synthesis and of a set of individual components and improves them to provide a complete verification solution: (i) a language is introduced to specify the properties to be verified; (ii) a formalism to describe model transformations in a declarative way; and (iii) automated algorithms that can analyse the declarative transformations as well as the properties expressed by the language. Besides its theoretical basis, the implementation of a verification framework is presented, and its operation is illustrated on a case study. Although the formal verification of model transformation properties is algorithmically undecidable in general, our goal is to provide a practically usable, scoped framework that can largely facilitate the manual verification of model transformations. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Formal specification and analysis of functional properties of graph rewriting-based model transformation", "paper_id": "WOS:000321749900004"}