{"auto_keywords": [{"score": 0.04060470870644315, "phrase": "contention_managers"}, {"score": 0.028137284874134028, "phrase": "luts"}, {"score": 0.00481495049065317, "phrase": "dynamic_conflict_avoidance"}, {"score": 0.004779406424192843, "phrase": "software_transaction_memory"}, {"score": 0.004471035765089235, "phrase": "concurrent_execution"}, {"score": 0.004438019162720755, "phrase": "atomic_blocks"}, {"score": 0.004356535752468849, "phrase": "high-contention_workloads"}, {"score": 0.004324361008753555, "phrase": "stm-based_systems"}, {"score": 0.004213601332868765, "phrase": "transaction_conflict_rate_increases"}, {"score": 0.00418247778205288, "phrase": "contention_management_policies"}, {"score": 0.0033480826365657303, "phrase": "transaction_throughput"}, {"score": 0.0030514638431036714, "phrase": "proposed_proactive_techniques"}, {"score": 0.0029402874300114537, "phrase": "doomed_transaction"}, {"score": 0.0028017745468000587, "phrase": "operating_system"}, {"score": 0.002388337333984138, "phrase": "system_throughput"}, {"score": 0.002353120949568249, "phrase": "luts_design"}, {"score": 0.0023184226291364097, "phrase": "dynamic_conflict-avoidance_heuristic"}, {"score": 0.0022757667100089243, "phrase": "experimental_results"}, {"score": 0.0022009497295481678, "phrase": "tinystm"}, {"score": 0.0021846599115561832, "phrase": "swisstm"}, {"score": 0.0021206948586186903, "phrase": "stm_performance"}, {"score": 0.0021049977753042253, "phrase": "high_contention_applications"}], "paper_keywords": ["Multiprocessor systems", " Concurrent programming", " Transactional memory", " Contention management"], "paper_abstract": "Software transaction memory (STM) systems have been used as an approach to improve performance, by allowing the concurrent execution of atomic blocks. However, under high-contention workloads, STM-based systems can considerably degrade performance, as transaction conflict rate increases. Contention management policies have been used as a way to select which transaction to abort when a conflict occurs. In general, contention managers are not capable of avoiding conflicts, as they can only select which transaction to abort and the moment it should restart. Since contention managers act only after a conflict is detected, it becomes harder to effectively increase transaction throughput. More proactive approaches have emerged, aiming at predicting when a transaction is likely to abort, postponing its execution. Nevertheless, most of the proposed proactive techniques are limited, as they do not replace the doomed transaction by another or, when they do, they rely on the operating system for that, having little or no control on which transaction to run. This article proposes LUTS, a lightweight user-level transaction scheduler. Unlike other techniques, LUTS provides the means for selecting another transaction to run in parallel, thus improving system throughput. We discuss LUTS design and propose a dynamic conflict-avoidance heuristic built around its scheduling capabilities. Experimental results, conducted with the STAMP and STMBench7 benchmark suites, running on TinySTM and SwissTM, show how our conflict-avoidance heuristic can effectively improve STM performance on high contention applications.", "paper_title": "Transaction Scheduling Using Dynamic Conflict Avoidance", "paper_id": "WOS:000313061500003"}