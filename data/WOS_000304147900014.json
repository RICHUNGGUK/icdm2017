{"auto_keywords": [{"score": 0.04583834963802334, "phrase": "smc"}, {"score": 0.032247925225733096, "phrase": "failure_detectors"}, {"score": 0.00481495049065317, "phrase": "modular_redesign"}, {"score": 0.0047559432344272, "phrase": "trustedpals"}, {"score": 0.004444037594955185, "phrase": "secure_multiparty_computation"}, {"score": 0.004178198896815672, "phrase": "synchronous_network_setting"}, {"score": 0.0039281997063335735, "phrase": "fault-tolerant_consensus"}, {"score": 0.0033664873319204027, "phrase": "asynchronous_smc."}, {"score": 0.0031068064097811844, "phrase": "general_omission_failure_model"}, {"score": 0.0029027394930867902, "phrase": "novel_definitions"}, {"score": 0.002797121441432477, "phrase": "class_lozenge_p"}, {"score": 0.0027120400060701034, "phrase": "omission_model"}, {"score": 0.002295277579105179, "phrase": "failure_detection"}, {"score": 0.002225426912273257, "phrase": "trustedpals_framework"}, {"score": 0.0021710766932077994, "phrase": "privacy_enhancing_techniques"}, {"score": 0.0021311850321045767, "phrase": "message_padding"}, {"score": 0.0021049977753042253, "phrase": "dummy_traffic"}], "paper_keywords": ["Failure detection", " fault-tolerance", " smart cards", " consensus", " secure multiparty computation", " message padding", " dummy traffic", " general omission model", " security performance", " reliability"], "paper_abstract": "We present a modular redesign of TrustedPals, a smart card-based security framework for solving Secure Multiparty Computation (SMC). Originally, TrustedPals assumed a synchronous network setting and allowed to reduce SMC to the problem of fault-tolerant consensus among smart cards. We explore how to make TrustedPals applicable in environments with less synchrony and show how it can be used to solve asynchronous SMC. Within the redesign we investigate the problem of solving consensus in a general omission failure model augmented with failure detectors. To this end, we give novel definitions of both consensus and the class lozenge P of failure detectors in the omission model, which we call lozenge P(om), and show how to implement lozenge P(om) and have consensus in such a system with very weak synchrony assumptions. The integration of failure detection and consensus into the TrustedPals framework uses tools from privacy enhancing techniques such as message padding and dummy traffic.", "paper_title": "Secure Failure Detection and Consensus in TrustedPals", "paper_id": "WOS:000304147900014"}