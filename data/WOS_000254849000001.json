{"auto_keywords": [{"score": 0.029904348099669978, "phrase": "hybrid_immediate_merge"}, {"score": 0.00481495049065317, "phrase": "contiguous_inverted_lists"}, {"score": 0.004771196027464407, "phrase": "index_maintenance_strategies"}, {"score": 0.004706305193222972, "phrase": "dynamic_text_retrieval_systems"}, {"score": 0.004642292792558686, "phrase": "inverted_files"}, {"score": 0.004237138632255772, "phrase": "individual_update_policies"}, {"score": 0.0040479661688863884, "phrase": "on-disk_posting"}, {"score": 0.0039027036493682887, "phrase": "discontiguous_fashion"}, {"score": 0.003711409222544974, "phrase": "higher_query_performance"}, {"score": 0.003561865840737996, "phrase": "query_time"}, {"score": 0.0035133644847622383, "phrase": "discontiguous_inverted_lists"}, {"score": 0.003465521267039616, "phrase": "higher_update_performance"}, {"score": 0.0033872210664940817, "phrase": "index_maintenance_operations"}, {"score": 0.00325069754015951, "phrase": "retrieval_systems"}, {"score": 0.0032211117623834828, "phrase": "high_query_load"}, {"score": 0.0031627430133087616, "phrase": "on-disk_posting_lists"}, {"score": 0.003063123420705719, "phrase": "contiguous_fashion"}, {"score": 0.0027073229284666294, "phrase": "re-merge_baseline_policy"}, {"score": 0.002539379289856756, "phrase": "substantially_better_update_performance"}, {"score": 0.0023927516438886445, "phrase": "text_collection"}, {"score": 0.0022962183207691188, "phrase": "greater_savings"}, {"score": 0.002163600705898299, "phrase": "total_index_update_overhead"}, {"score": 0.0021049977753042253, "phrase": "re-merge_baseline"}], "paper_keywords": ["text retrieval", " search engines", " index maintenance"], "paper_abstract": "Index maintenance strategies employed by dynamic text retrieval systems based on inverted files can be divided into two categories: merge-based and in-place update strategies. Within each category, individual update policies can be distinguished based on whether they store their on-disk posting lists in a contiguous or in a discontiguous fashion. Contiguous inverted lists, in general, lead to higher query performance, by minimizing the disk seek overhead at query time, while discontiguous inverted lists lead to higher update performance, requiring less effort during index maintenance operations. In this paper, we focus on retrieval systems with high query load, where the on-disk posting lists have to be stored in a contiguous fashion at all times. We discuss a combination of re-merge and in-place index update, called Hybrid Immediate Merge. The method performs strictly better than the re-merge baseline policy used in our experiments, as it leads to the same query performance, but substantially better update performance. The actual time savings achievable depend on the size of the text collection being indexed; a larger collection results in greater savings. In our experiments, variations of Hybrid Immediate Merge were able to reduce the total index update overhead by up to 73% compared to the re-merge baseline.", "paper_title": "Hybrid index maintenance for contiguous inverted lists", "paper_id": "WOS:000254849000001"}