{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_aging_and_software_failure"}, {"score": 0.024503427641857846, "phrase": "software_rejuvenation"}, {"score": 0.004546174820239776, "phrase": "software_faults"}, {"score": 0.004506171772318298, "phrase": "hardware_faults"}, {"score": 0.00436890075128947, "phrase": "\"software_aging"}, {"score": 0.004235793609579307, "phrase": "aging-related_faults"}, {"score": 0.004016938499717623, "phrase": "progressive_performance_degradation"}, {"score": 0.0038602215057106917, "phrase": "operating_system_resources"}, {"score": 0.0037925389501636975, "phrase": "memory_leaking"}, {"score": 0.003759142310009214, "phrase": "unreleased-file_locks"}, {"score": 0.00344087639309216, "phrase": "stochastic_time_series_decomposition_algorithm"}, {"score": 0.0033955105098235345, "phrase": "robust_locally_weighted_regression"}, {"score": 0.0032342101452939977, "phrase": "system_resource"}, {"score": 0.003191560305761507, "phrase": "resource_usage"}, {"score": 0.003135564707433078, "phrase": "aging_trend"}, {"score": 0.0030264946886983833, "phrase": "software_aging_and_software_failure_process"}, {"score": 0.002934166052954463, "phrase": "practical_server_system"}, {"score": 0.0027578496677536373, "phrase": "two-stage_failure_process"}, {"score": 0.002685558057339722, "phrase": "first_time"}, {"score": 0.0026036031415940563, "phrase": "software_aging"}, {"score": 0.002447101794397243, "phrase": "software_rejuvenation_technique"}, {"score": 0.0022496114364599328, "phrase": "key_issue"}, {"score": 0.0021521410307795657, "phrase": "server_system"}, {"score": 0.0021331586055770447, "phrase": "different_rejuvenation_policies"}, {"score": 0.0021049977753042253, "phrase": "software_performance"}], "paper_keywords": ["software faults", " software aging", " software failure", " reliability", " robust locally weighted regression (Loess)"], "paper_abstract": "Many studies reported that system suffered from outages more due to software faults than hardware faults. Recently, the phenomenon of \"software aging\", which was caused by aging-related faults, is observed in many software systems. Software aging, characterized by progressive performance degradation, is mainly caused by exhaustion of the operating system resources, such as memory leaking, unreleased-file locks, data corruption, etc. This paper mainly focuses on the modeling and analysis of software aging and software failure. A stochastic time series decomposition algorithm based on robust locally weighted regression (Loess) is presented to separate the exhaustion of system resource from the resource usage, from which aging trend is estimated. Then the model of software aging and software failure process is constructed. Experiments on a practical server system verify the effectiveness of the algorithm presented in this paper, and the two-stage failure process is also confirmed for the first time in the history of research on software aging. The conclusions drawn from this paper will greatly benefit the application of software rejuvenation technique, that is, it makes it easy to determine when to perform software rejuvenation, which is a key issue in implementation of software rejuvenation. The results for the server system employing different rejuvenation policies show that software performance can be effectively improved. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Modeling and analysis of software aging and software failure", "paper_id": "WOS:000245771700011"}