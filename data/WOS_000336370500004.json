{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "best-possible_obfuscation"}, {"score": 0.009952607487382234, "phrase": "obfuscated_program"}, {"score": 0.004560826038984214, "phrase": "boolean_circuit"}, {"score": 0.004199032198782628, "phrase": "software_protection"}, {"score": 0.004177397618793377, "phrase": "barak"}, {"score": 0.0040708542958968605, "phrase": "theoretical_study"}, {"score": 0.003997891221012094, "phrase": "black-box_obfuscation"}, {"score": 0.003956784357357341, "phrase": "obfuscated_circuit"}, {"score": 0.0037477818075841076, "phrase": "subsequent_research"}, {"score": 0.003680587852807675, "phrase": "positive_results"}, {"score": 0.003577414339646767, "phrase": "black_box_obfuscation"}, {"score": 0.0034951469511975346, "phrase": "new_notion"}, {"score": 0.0033883824438527316, "phrase": "best_possible_obfuscation"}, {"score": 0.003362203104103, "phrase": "relaxed_requirement"}, {"score": 0.0032176163279340206, "phrase": "similar_size"}, {"score": 0.0030475381446620716, "phrase": "black_box"}, {"score": 0.002670884656785558, "phrase": "previously_studied_definitions"}, {"score": 0.0025493457404304446, "phrase": "natural_obfuscation_task"}, {"score": 0.0025035845415603926, "phrase": "best-possible_definition"}, {"score": 0.002445950676329976, "phrase": "black-box_definition"}, {"score": 0.0021826828321952615, "phrase": "random_oracle"}, {"score": 0.002165798731600657, "phrase": "hard-to-obfuscate_circuits"}, {"score": 0.0021049977753042253, "phrase": "standard_model"}], "paper_keywords": ["Obfuscation"], "paper_abstract": "An obfuscator is a compiler that transforms any program (which we will view in this work as a boolean circuit) into an obfuscated program (also a circuit) that has the same input-output functionality as the original program, but is \"unintelligible\". Obfuscation has applications for cryptography and for software protection. Barak et al. (CRYPTO 2001, pp. 1-18, 2001) initiated a theoretical study of obfuscation, which focused on black-box obfuscation, where the obfuscated circuit should leak no information except for its (black-box) input-output functionality. A family of functionalities that cannot be obfuscated was demonstrated. Subsequent research has showed further negative results as well as positive results for obfuscating very specific families of circuits, all with respect to black box obfuscation. This work is a study of a new notion of obfuscation, which we call best-possible obfuscation. Best possible obfuscation makes the relaxed requirement that the obfuscated program leaks as little information as any other program with the same functionality (and of similar size). In particular, this definition allows the program to leak information that cannot be obtained from a black box. Best-possible obfuscation guarantees that any information that is not hidden by the obfuscated program is also not hidden by any other similar-size program computing the same functionality, and thus the obfuscation is (literally) the best possible. In this work we study best-possible obfuscation and its relationship to previously studied definitions. Our main results are: (1) A separation between black-box and best-possible obfuscation. We show a natural obfuscation task that can be achieved under the best-possible definition, but cannot be achieved under the black-box definition. (2) A hardness result for best-possible obfuscation, showing that strong (information-theoretic) best-possible obfuscation implies a collapse in the Polynomial-Time Hierarchy. (3) An impossibility result for efficient best-possible (and black-box) obfuscation in the presence of random oracles. This impossibility result uses a random oracle to construct hard-to-obfuscate circuits, and thus it does not imply impossibility in the standard model.", "paper_title": "On Best-Possible Obfuscation", "paper_id": "WOS:000336370500004"}