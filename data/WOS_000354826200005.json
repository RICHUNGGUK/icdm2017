{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "nsga-iii._software_systems"}, {"score": 0.004610058444728656, "phrase": "continuous_changes"}, {"score": 0.00457013354092966, "phrase": "bad_design_choices"}, {"score": 0.004394688617163029, "phrase": "software_products"}, {"score": 0.003806866174028117, "phrase": "existing_remodularization_work"}, {"score": 0.003459191419478298, "phrase": "existing_studies"}, {"score": 0.0033553473725594003, "phrase": "move_class"}, {"score": 0.00321236577162671, "phrase": "design_semantics"}, {"score": 0.0030487828775502563, "phrase": "development_change_history"}, {"score": 0.002583597507349819, "phrase": "optimal_remodularization_solutions"}, {"score": 0.0024201029474586007, "phrase": "semantics_coherence"}, {"score": 0.002132711053003407, "phrase": "quantitative_and_qualitative_study"}, {"score": 0.0021049977753042253, "phrase": "software_engineers"}], "paper_keywords": ["Algorithms", " Reliability", " Search-based software engineering", " software maintenance", " software quality", " remodularization"], "paper_abstract": "Software systems nowadays are complex and difficult to maintain due to continuous changes and bad design choices. To handle the complexity of systems, software products are, in general, decomposed in terms of packages/modules containing classes that are dependent. However, it is challenging to automatically remodularize systems to improve their maintainability. The majority of existing remodularization work mainly satisfy one objective which is improving the structure of packages by optimizing coupling and cohesion. In addition, most of existing studies are limited to only few operation types such as move class and split packages. Many other objectives, such as the design semantics, reducing the number of changes and maximizing the consistency with development change history, are important to improve the quality of the software by remodularizing it. In this article, we propose a novel many-objective search-based approach using NSGA-III. The process aims at finding the optimal remodularization solutions that improve the structure of packages, minimize the number of changes, preserve semantics coherence, and reuse the history of changes. We evaluate the efficiency of our approach using four different open-source systems and one automotive industry project, provided by our industrial partner, through a quantitative and qualitative study conducted with software engineers.", "paper_title": "Many-Objective Software Remodularization Using NSGA-III", "paper_id": "WOS:000354826200005"}