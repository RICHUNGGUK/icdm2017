{"auto_keywords": [{"score": 0.04346602708671801, "phrase": "exception_handling"}, {"score": 0.01480080218570279, "phrase": "runtime_errors"}, {"score": 0.00481495049065317, "phrase": "object-oriented_languages"}, {"score": 0.0047732596509542135, "phrase": "backward_error_recovery_integrated_support"}, {"score": 0.004630150894006861, "phrase": "software_robustness"}, {"score": 0.004394688617163029, "phrase": "application_execution"}, {"score": 0.004046020290832207, "phrase": "powerful_tool"}, {"score": 0.003993544228876303, "phrase": "system_failure"}, {"score": 0.0036926236934657864, "phrase": "consistent_state"}, {"score": 0.003340768341189764, "phrase": "recovering_task"}, {"score": 0.003170667618004276, "phrase": "common_object-oriented_languages"}, {"score": 0.003115908199991072, "phrase": "previous_consistent_state"}, {"score": 0.0024842242921857705, "phrase": "non-intrusive_code_enrichment_tool"}, {"score": 0.0024627323920374464, "phrase": "java"}, {"score": 0.0023782753249846794, "phrase": "real_application"}, {"score": 0.0022084059770026416, "phrase": "resulting_code"}, {"score": 0.0021797112385590913, "phrase": "reasonable_and_viable_rates"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Recoverability", " Object-oriented", " Error recovery", " Reconstructor", " Software robustness"], "paper_abstract": "One of the requirements of software robustness is controlling and managing runtime errors that might arise at certain points of application execution. In most object-oriented programming languages, this requirement is commonly implemented by means of exception handling. Although exception handling is a powerful tool to avoid system failure arising, there are still many situations where it is not sufficient to restore the system to a consistent state. Exception handling allows the developer to detect and locate errors, but it gives no information or tools to cover the error recovering task. Therefore, we propose an extension of the semantics of common object-oriented languages to restore the previous consistent state of the system in the presence of runtime errors, avoiding some of the tasks that exception-handling mechanisms delegate to developers. Our proposed solution is centered in the concept of \"reconstructor\", a declarative component oriented to automatically return the system to its last stable state. Based on this concept, we develop a non-intrusive code enrichment tool for Java, and we apply it to a real application in order to check the feasibility of the proposal. We evaluated the performance of the resulting code, obtaining reasonable and viable rates and overload. (c) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "Extending object-oriented languages with backward error recovery integrated support", "paper_id": "WOS:000274520300001"}