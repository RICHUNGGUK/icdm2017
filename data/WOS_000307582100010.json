{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "timing_channels"}, {"score": 0.004594137808658537, "phrase": "new_language-based_approach"}, {"score": 0.004182301599359094, "phrase": "well-typed_programs"}, {"score": 0.0038431888954930083, "phrase": "external_timing_channels"}, {"score": 0.0036324746826127997, "phrase": "predictive_mitigation"}, {"score": 0.003095923814666088, "phrase": "underlying_hardware_features"}, {"score": 0.0030097975788892896, "phrase": "instruction_caches"}, {"score": 0.002818013056816282, "phrase": "underlying_hardware"}, {"score": 0.0021450029487459403, "phrase": "simple_programs"}, {"score": 0.0021049977753042253, "phrase": "real-world_significance"}], "paper_keywords": ["Languages", " Security", " Timing channels", " mitigation", " information flow"], "paper_abstract": "We propose a new language-based approach to mitigating timing channels. In this language, well-typed programs provably leak only a bounded amount of information over time through external timing channels. By incorporating mechanisms for predictive mitigation of timing channels, this approach also permits a more expressive programming model. Timing channels arising from interaction with underlying hardware features such as instruction caches are controlled. Assumptions about the underlying hardware are explicitly formalized, supporting the design of hardware that efficiently controls timing channels. One such hardware design is modeled and used to show that timing channels can be controlled in some simple programs of real-world significance.", "paper_title": "Language-Based Control and Mitigation of Timing Channels", "paper_id": "WOS:000307582100010"}