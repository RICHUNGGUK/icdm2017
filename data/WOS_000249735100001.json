{"auto_keywords": [{"score": 0.04191337609468309, "phrase": "chawathe_et_al"}, {"score": 0.03747360849945527, "phrase": "minimum_edit_script"}, {"score": 0.00481495049065317, "phrase": "fine-grained_source_code_change_extraction"}, {"score": 0.004682708592184678, "phrase": "software_evolution_analysis"}, {"score": 0.004575272950516775, "phrase": "particular_changes"}, {"score": 0.004267468074128779, "phrase": "tree_differencing_algorithm"}, {"score": 0.004208427318712072, "phrase": "grained_source_code_change_extraction"}, {"score": 0.004036141321779216, "phrase": "existing_algorithm"}, {"score": 0.003888905257972882, "phrase": "hierarchically_structured_data"}, {"score": 0.003610292749660581, "phrase": "compared_two_abstract_syntax_trees"}, {"score": 0.0033986345279488476, "phrase": "computed_matching"}, {"score": 0.0032593915869553714, "phrase": "fine-_grained_change_types"}, {"score": 0.003140401552000472, "phrase": "source_code_changes"}, {"score": 0.0029152570900178956, "phrase": "manually_classified_changes"}, {"score": 0.0028615323526689582, "phrase": "eight_methods"}, {"score": 0.0027827907725673845, "phrase": "significant_improvements"}, {"score": 0.0027188259793109264, "phrase": "source_code"}, {"score": 0.0025832180231667853, "phrase": "original_change_extraction_approach"}, {"score": 0.0024658019116387845, "phrase": "occurring_changes"}, {"score": 0.0024091057723923857, "phrase": "minimum_conforming_edit_script"}, {"score": 0.0023210846870653757, "phrase": "mean_absolute_percentage_error"}, {"score": 0.0022052711621931144, "phrase": "original_algorithm"}], "paper_keywords": ["source code change extraction", " tree-differencing algorithms", " software repositories", " software evolution analysis"], "paper_abstract": "A key issue in software evolution analysis is the identification of particular changes that occur across several versions of a program. We present change distilling, a tree differencing algorithm for fine- grained source code change extraction. For that, we have improved the existing algorithm by Chawathe et al. for extracting changes in hierarchically structured data [ 8]. Our algorithm extracts changes by finding both a match between the nodes of the compared two abstract syntax trees and a minimum edit script that can transform one tree into the other given the computed matching. As a result, we can identify fine- grained change types between program versions according to our taxonomy of source code changes. We evaluated our change distilling algorithm with a benchmark that we developed, which consists of 1,064 manually classified changes in 219 revisions of eight methods from three different open source projects. We achieved significant improvements in extracting types of source code changes: Our algorithm approximates the minimum edit script 45 percent better than the original change extraction approach by Chawathe et al. We are able to find all occurring changes and almost reach the minimum conforming edit script, that is, we reach a mean absolute percentage error of 34 percent, compared to the 79 percent reached by the original algorithm. The paper describes both our change distilling algorithm and the results of our evaluation.", "paper_title": "Change distilling: Tree differencing for fine-grained source code change extraction", "paper_id": "WOS:000249735100001"}