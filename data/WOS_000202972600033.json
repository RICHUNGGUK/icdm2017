{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "thread_level_parallelism"}, {"score": 0.00459165923324494, "phrase": "multi-core_era"}, {"score": 0.0040969285074699, "phrase": "multi-threaded_programming_model"}, {"score": 0.003355515315708125, "phrase": "transactions'_use"}, {"score": 0.0031393948330209224, "phrase": "programmer's_job"}, {"score": 0.003022186855664124, "phrase": "hardware_support"}, {"score": 0.002881793492919646, "phrase": "efficient_execution"}, {"score": 0.0028274743316389437, "phrase": "unbounded_transactions"}, {"score": 0.0026202187680903063, "phrase": "page-based_transactional_memory"}, {"score": 0.0024281181691350085, "phrase": "transaction_bookkeeping"}, {"score": 0.002359759876402679, "phrase": "virtual_memory_system"}, {"score": 0.0022933216359142736, "phrase": "fast_transaction_conflict_detection"}, {"score": 0.0021049977753042253, "phrase": "transactions'_speculative_data"}], "paper_keywords": ["design", " languages", " performance", " transactions", " transactional memory", " parallel programming", " concurrency", " virtual memory"], "paper_abstract": "Exploiting thread level parallelism is paramount in the multi-core era. Transactions enable programmers to expose such parallelism by greatly simplifying the multi-threaded programming model. Virtualized transactions (unbounded in space and time) are desirable, as they can increase the scope of transactions' use, and thereby further simplify a programmer's job. However, hardware support is essential to support efficient execution of unbounded transactions. In this paper, we introduce Page-based Transactional Memory to support unbounded transactions. We combine transaction bookkeeping with the virtual memory system to support fast transaction conflict detection, commit, abort, and to maintain transactions' speculative data.", "paper_title": "Unbounded page-based transactional memory", "paper_id": "WOS:000202972600033"}