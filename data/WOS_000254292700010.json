{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_schedulers"}, {"score": 0.0047273577269638725, "phrase": "tasks_applications"}, {"score": 0.004698514007994158, "phrase": "multiple_applications"}, {"score": 0.004627168743964783, "phrase": "heterogeneous_platforms"}, {"score": 0.004556901872357751, "phrase": "network_resources"}, {"score": 0.004406031457123015, "phrase": "scheduling_applications"}, {"score": 0.00436575511349828, "phrase": "fair_and_efficient_execution"}, {"score": 0.0043258453436258405, "phrase": "distributed_network"}, {"score": 0.003970439654470374, "phrase": "large_number"}, {"score": 0.003946195919158241, "phrase": "independent_tasks"}, {"score": 0.0038271712887391015, "phrase": "tree's_root"}, {"score": 0.003689053436223376, "phrase": "communication_requirements"}, {"score": 0.0035997452281985465, "phrase": "different_applications"}, {"score": 0.003417054482155433, "phrase": "fair_sharing"}, {"score": 0.0033139366449568565, "phrase": "optimal_asymptotic_rates"}, {"score": 0.00327356326590461, "phrase": "linear_programming_problem"}, {"score": 0.0032336801561165113, "phrase": "necessary_problem_constraints"}, {"score": 0.003145705182811006, "phrase": "periodic_schedule"}, {"score": 0.003116913644889395, "phrase": "linear_program_solution"}, {"score": 0.003088384809415812, "phrase": "single-level_trees"}, {"score": 0.003022825806274343, "phrase": "processing_tasks"}, {"score": 0.0030043508031729277, "phrase": "larger_communication-to-computation_ratios"}, {"score": 0.002931569771634119, "phrase": "multilevel_trees"}, {"score": 0.002886977102894829, "phrase": "global_knowledge"}, {"score": 0.002860546817196148, "phrase": "application_and_platform_parameters"}, {"score": 0.002834357813044087, "phrase": "large-scale_platforms"}, {"score": 0.002791239714439304, "phrase": "centralized_scheduler"}, {"score": 0.0027069560455629917, "phrase": "decentralized_schedulers"}, {"score": 0.0026576091519087065, "phrase": "participating_resource"}, {"score": 0.0025694584194998335, "phrase": "optimal_centralized_solution"}, {"score": 0.0025459275963373496, "phrase": "linear_programming"}, {"score": 0.0023507916951658455, "phrase": "simple_assumptions"}, {"score": 0.002272794656458419, "phrase": "maximum_number"}, {"score": 0.002157302200451323, "phrase": "important_question"}, {"score": 0.0021179540310789446, "phrase": "heterogeneous_applications"}, {"score": 0.0021049977753042253, "phrase": "heterogeneous_grids"}], "paper_keywords": ["parallel computing", " scheduling", " multiple applications", " bag of tasks", " resource sharing", " fairness", " throughput"], "paper_abstract": "Multiple applications that execute concurrently on heterogeneous platforms compete for CPU and network resources. In this paper, we consider the problem of scheduling applications to ensure fair and efficient execution on a distributed network of processors. We limit our study to the case where communication is restricted to a tree embedded in the network, and the applications consist of a large number of independent tasks ( Bags of Tasks) that originate at the tree's root. The tasks of a given application all have the same computation and communication requirements, but these requirements can vary for different applications. The goal of scheduling is to maximize the throughput of each application while ensuring a fair sharing of resources between applications. We can find the optimal asymptotic rates by solving a linear programming problem that expresses all necessary problem constraints, and we show how to construct a periodic schedule from any linear program solution. For single-level trees, the solution is characterized by processing tasks with larger communication-to-computation ratios at children with larger bandwidths. For multilevel trees, this approach requires global knowledge of all application and platform parameters. For large-scale platforms, such global coordination by a centralized scheduler may be unrealistic. Thus, we also investigate decentralized schedulers that use only local information at each participating resource. We assess their performance via simulation and compare to an optimal centralized solution obtained via linear programming. The best of our decentralized heuristics achieves the same performance on about 2/3 of our test cases but is far worse in a few cases. Although our results are based on simple assumptions and do not explore all parameters (such as the maximum number of tasks that can be held on a node), they provide insight into the important question of fairly and optimally scheduling heterogeneous applications on heterogeneous grids.", "paper_title": "Centralized versus distributed schedulers for bag-of-tasks applications", "paper_id": "WOS:000254292700010"}