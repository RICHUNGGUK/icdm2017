{"auto_keywords": [{"score": 0.040650574499495426, "phrase": "misaligned_memory_references"}, {"score": 0.03652829028794297, "phrase": "data_misalignments"}, {"score": 0.0048196072073797185, "phrase": "loop"}, {"score": 0.004739416327250269, "phrase": "data_alignment"}, {"score": 0.004702092660370367, "phrase": "multi-core_simd_processors"}, {"score": 0.0046650615456476155, "phrase": "multimedia_simd_extensions"}, {"score": 0.0045198174374297285, "phrase": "media_processing"}, {"score": 0.004413846562278824, "phrase": "simd_architectures"}, {"score": 0.004327429667024575, "phrase": "major_issues"}, {"score": 0.004209269012699911, "phrase": "memory_alignment"}, {"score": 0.004176102823067887, "phrase": "prior_study"}, {"score": 0.004110549138321181, "phrase": "vectorizing_loops"}, {"score": 0.004062057297453209, "phrase": "memory_references"}, {"score": 0.00395111389294443, "phrase": "extra_operations"}, {"score": 0.0037828412206668206, "phrase": "multi-core_simd_architectures"}, {"score": 0.003753022329975749, "phrase": "coarse-grain_parallelism"}, {"score": 0.003650488388949457, "phrase": "important_problem"}, {"score": 0.003536720212056521, "phrase": "loop_nests"}, {"score": 0.0033860360186761533, "phrase": "loop_transformation_scheme"}, {"score": 0.003306559295382181, "phrase": "outermost_loops"}, {"score": 0.0032289419984035954, "phrase": "innermost_loops"}, {"score": 0.00316565009987584, "phrase": "basic_idea"}, {"score": 0.002947868524740683, "phrase": "dependence_relations"}, {"score": 0.0028334016912935165, "phrase": "mathematical_model"}, {"score": 0.0027341763737751467, "phrase": "effective_heuristic_algorithm"}, {"score": 0.002701877448139625, "phrase": "coarser-grain_parallelism"}, {"score": 0.002607246047604476, "phrase": "outermost_loop"}, {"score": 0.0025259082947443343, "phrase": "inner_loops"}, {"score": 0.0023896108055582615, "phrase": "involved_innermost_loop"}, {"score": 0.0023150468182777813, "phrase": "experimental_results"}, {"score": 0.002217330507366179, "phrase": "cell"}, {"score": 0.0021301766910531137, "phrase": "misaligned_data"}], "paper_keywords": ["Data Alignment", " SIMD Architecture", " Multi-Processors", " Loop Transformation"], "paper_abstract": "Multimedia SIMD extensions are commonly employed today to speed up media processing. When performing vectorization for SIMD architectures, one of the major issues is to handle the problem of memory alignment. Prior study focused on either vectorizing loops with all memory references being properly aligned, or introducing extra operations to deal with the misaligned memory references. On the other hand, multi-core SIMD architectures require coarse-grain parallelism. Therefore, it is an important problem to study how to parallelize and vectorize loop nests with the awareness of data misalignments. This paper presents a loop transformation scheme that maximizes the parallelism of outermost loops, while the misaligned memory references in innermost loops are reduced. The basic idea of our technique is to align each level of loops in the nest, considering the constraint of dependence relations. To reduce the data misalignments, we establish a mathematical model with a concept of offset-collection and propose an effective heuristic algorithm. For coarser-grain parallelism, we propose some rules to analyze the outermost loop. When transformations are applied, the inner loops are involved to maximize the parallelism. To avoid introducing more data misalignments, the involved innermost loop is handled from other levels of loops. Experimental results show that 7 % to 37 % (on average 18.4 %) misaligned memory references can be reduced. The simulations on CELL show that 1.1x speedup can be reached by reducing the misaligned data, while 6.14x speedup can be achieved by enhancing the parallelism for multi-core.", "paper_title": "Loop Transforming for Reducing Data Alignment on Multi-Core SIMD Processors", "paper_id": "WOS:000330126900001"}