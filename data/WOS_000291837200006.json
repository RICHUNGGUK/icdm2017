{"auto_keywords": [{"score": 0.030995514013145146, "phrase": "hystart"}, {"score": 0.021852227240655678, "phrase": "linux"}, {"score": 0.02130238894830582, "phrase": "heavy_packet_losses"}, {"score": 0.010530729082034536, "phrase": "slow_start"}, {"score": 0.009874461448797445, "phrase": "windows"}, {"score": 0.0095240964537179, "phrase": "congestion_window"}, {"score": 0.009281719560782565, "phrase": "end_systems"}, {"score": 0.00730130035320501, "phrase": "tcp"}, {"score": 0.006268489977388992, "phrase": "forward_path"}, {"score": 0.00481495049065317, "phrase": "new_tcp_slow_start"}, {"score": 0.004704016000599167, "phrase": "large_bandwidth-delay_product"}, {"score": 0.004443436195282021, "phrase": "first_reason"}, {"score": 0.004352285992815604, "phrase": "exponential_increase"}, {"score": 0.004296264970612285, "phrase": "standard_slow_start"}, {"score": 0.004229986712918669, "phrase": "extremely_high_loads"}, {"score": 0.004111109853964732, "phrase": "long_period"}, {"score": 0.004026749237490887, "phrase": "long_blackout_period"}, {"score": 0.003893325145898287, "phrase": "second_reason"}, {"score": 0.0038531644281313056, "phrase": "proprietary_protocol_optimizations"}, {"score": 0.0037545589276659504, "phrase": "loss_recovery"}, {"score": 0.0036774877745633784, "phrase": "system_bottleneck"}, {"score": 0.0036489942273552293, "phrase": "data_structures"}, {"score": 0.0035833618054331878, "phrase": "processing_overload"}, {"score": 0.003491636564620199, "phrase": "prolonged_loss_recovery"}, {"score": 0.003464578003997119, "phrase": "proprietary_optimizations"}, {"score": 0.0034110861837481454, "phrase": "large_number"}, {"score": 0.003393439115707876, "phrase": "packet_losses"}, {"score": 0.0033323878473928317, "phrase": "network_bandwidth"}, {"score": 0.003289451206583327, "phrase": "frequent_timeouts"}, {"score": 0.0032724313441556416, "phrase": "loss_synchronization"}, {"score": 0.0031639217570529742, "phrase": "new_slow_start_algorithm"}, {"score": 0.0031393948330209224, "phrase": "hybrid_start"}, {"score": 0.0030749123945149727, "phrase": "\"safe\"_exit_point"}, {"score": 0.0029652292779277782, "phrase": "congestion_avoidance_phase"}, {"score": 0.002942238084470189, "phrase": "heavy_packet_loss"}, {"score": 0.002911859411750042, "phrase": "ack_trains"}, {"score": 0.002896787558938387, "phrase": "rtt_delay_samples"}, {"score": 0.002778979787458387, "phrase": "current_size"}, {"score": 0.0027289529692155123, "phrase": "available_capacity"}, {"score": 0.0026590401268765003, "phrase": "tcp_senders"}, {"score": 0.0026179528443002185, "phrase": "tcp_receivers"}, {"score": 0.002564153280669306, "phrase": "tcp-sack"}, {"score": 0.0025179838503155407, "phrase": "five_different_slow_start_schemes"}, {"score": 0.0024281181691350085, "phrase": "lab_testbeds"}, {"score": 0.0023658941070808736, "phrase": "diverse_network_environments"}, {"score": 0.0023475389756662576, "phrase": "asymmetric_links"}, {"score": 0.0023353812172864506, "phrase": "wireless_networks"}, {"score": 0.0023172622617842996, "phrase": "high_and_low_bdp_networks"}, {"score": 0.0022933216359142736, "phrase": "different_operating_system_receivers"}, {"score": 0.0022287497627555895, "phrase": "start-up_throughput"}, {"score": 0.0021491844713925476, "phrase": "default_slow_start_algorithm"}, {"score": 0.0021380799000590175, "phrase": "cubic"}], "paper_keywords": ["Slow start", " Congestion control", " Linux slow start", " SACK processing", " High-speed TCP protocols"], "paper_abstract": "Standard slow start does not work well under large bandwidth-delay product (BDP) networks. We find two reasons for this problem in three popular existing operating systems: Linux, FreeBSD and Windows XP. The first reason is that heavy packet losses occur because of the exponential increase of the congestion window during standard slow start. Recovering from heavy packet losses puts extremely high loads on end systems, rendering the end systems completely unresponsive for a long period of time, and results in a long blackout period without transmission. This problem commonly occurs with all three operating systems. The second reason is that some proprietary protocol optimizations applied to slow start happen to slow down the loss recovery followed by slow start. Although improving the system bottleneck by optimizing data structures is valuable especially for addressing the processing overload with heavy packet losses, it is not effective for the prolonged loss recovery caused by proprietary optimizations. In addition, a large number of packet losses are not desirable since they waste network bandwidth and lead TCP into frequent timeouts and loss synchronization which results in under-utilization of the network. We propose a new slow start algorithm, called Hybrid Start (HyStart), that finds a \"safe\" exit point for slow start at which it can terminate and safely advance to the congestion avoidance phase without causing heavy packet loss. HyStart uses ACK trains and RTT delay samples to detect whether (1) the forward path is congested or (2) the current size of the congestion window has reached the available capacity of the forward path. HYStart is a plugin to TCP senders and requires no change on TCP receivers. We implement HYStart for TCP-NewReno and TCP-SACK in Linux and compare its performance with five different slow start schemes on the TCP receivers of the three different operating systems on the Internet and also in lab testbeds. Our results indicate that HyStart works consistently well under diverse network environments, including asymmetric links, wireless networks, and high and low BDP networks. Especially with different operating system receivers (Windows XP and FreeBSD), HyStart improves the start-up throughput of TCP significantly by more than 2 to 3 times and is the default slow start algorithm of CUBIC since Linux 2.6.29. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Taming the elephants: New TCP slow start", "paper_id": "WOS:000291837200006"}