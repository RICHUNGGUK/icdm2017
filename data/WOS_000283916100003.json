{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "automatic_exception_handling"}, {"score": 0.004770211811866158, "phrase": "software_reliability"}, {"score": 0.004725886853744007, "phrase": "error_handling"}, {"score": 0.004468415400599571, "phrase": "daily_basis"}, {"score": 0.00428451995524549, "phrase": "current_approach"}, {"score": 0.004185632403886255, "phrase": "fundamental_incompatibilities"}, {"score": 0.004146716743362567, "phrase": "object-oriented_concepts"}, {"score": 0.004069963083642548, "phrase": "major_cause"}, {"score": 0.0036382660173943393, "phrase": "runtime_environment"}, {"score": 0.0035376693476114733, "phrase": "abnormal_situations"}, {"score": 0.003407839062159497, "phrase": "benign_recovery_actions"}, {"score": 0.0031328221096543823, "phrase": "benign_recovery_method"}, {"score": 0.0029618842673339173, "phrase": "clean_transactional_state"}, {"score": 0.0028133741785871867, "phrase": "nesting_level"}, {"score": 0.0025741370320813968, "phrase": "clean_slate"}, {"score": 0.002422249273477746, "phrase": "automatic_exception"}, {"score": 0.002388487669097511, "phrase": "glassfish's_java_messaging_system_implementation"}, {"score": 0.0023223663501882917, "phrase": "hipergate_crm_application"}, {"score": 0.0022686625017583387, "phrase": "increased_robustness"}, {"score": 0.0021649437083408425, "phrase": "extensive_error-handling_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Exception handling model", " Software Transactional Memory", " Recovery blocks", " Fault tolerance", " Object-oriented programming languages"], "paper_abstract": "Software reliability and error handling are concepts that any programmer knows and deals with on a daily basis. Even so, studies suggest that the current approach to exception handling raises fundamental incompatibilities with object-oriented concepts, being a major cause for the lack of quality on error handling code. In this paper, we propose an exception handling model that makes the runtime environment responsible for automatically dealing with abnormal situations. The platform provides a number of benign recovery actions that are able to deal automatically with most common exception types. Whenever an exception is raised, and a benign recovery method can be found, code is re-executed from a clean transactional state. In this approach try blocks not only represent a nesting level where a fault can occur but also a block that can be re-executed transactionally as a clean slate. For validating the approach two case studies were performed. One involved providing automatic exception handling for Glassfish's Java Messaging System implementation and the other for the Hipergate CRM application. Both showed that increased robustness is possible while freeing the programmer from manually writing extensive error-handling code. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "A transactional model for automatic exception handling", "paper_id": "WOS:000283916100003"}