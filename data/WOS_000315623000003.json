{"auto_keywords": [{"score": 0.04173052379689657, "phrase": "bellman's_gap"}, {"score": 0.014909360561767528, "phrase": "dynamic_programming"}, {"score": 0.004814978380180741, "phrase": "bellman"}, {"score": 0.004761262174712026, "phrase": "gap"}, {"score": 0.004510184935928004, "phrase": "sequence_analysis"}, {"score": 0.004174677062711731, "phrase": "non-trivial_dynamic_programming_algorithms"}, {"score": 0.003910278811774747, "phrase": "new_programming_system"}, {"score": 0.003728529119516347, "phrase": "bioinformatics_tools"}, {"score": 0.0036408354779365643, "phrase": "dynamic_programming_technique"}, {"score": 0.0034922880300145283, "phrase": "dynamic_programming_algorithms"}, {"score": 0.0033898953358387075, "phrase": "declarative_style"}, {"score": 0.0033497809969621267, "phrase": "tree_grammars"}, {"score": 0.0033101397746161843, "phrase": "evaluation_algebras"}, {"score": 0.0031003255054939524, "phrase": "explicit_dynamic_programming_recurrences"}, {"score": 0.0029561107046138136, "phrase": "subscript_errors"}, {"score": 0.002801849371896573, "phrase": "declarative_modules"}, {"score": 0.002655616553414394, "phrase": "carefully_hand-crafted_implementations"}, {"score": 0.0025623821393275146, "phrase": "bellman's_gap_system"}, {"score": 0.00248718591918233, "phrase": "gap-l."}, {"score": 0.00213023743193503, "phrase": "implementation_platform"}, {"score": 0.0021049977753042253, "phrase": "'real-world'_bioinformatics_tools"}], "paper_keywords": [""], "paper_abstract": "Motivation: Dynamic programming is ubiquitous in bioinformatics. Developing and implementing non-trivial dynamic programming algorithms is often error prone and tedious. Bellman's GAP is a new programming system, designed to ease the development of bioinformatics tools based on the dynamic programming technique. Results: In Bellman's GAP, dynamic programming algorithms are described in a declarative style by tree grammars, evaluation algebras and products formed thereof. This bypasses the design of explicit dynamic programming recurrences and yields programs that are free of subscript errors, modular and easy to modify. The declarative modules are compiled into C++ code that is competitive to carefully hand-crafted implementations. This article introduces the Bellman's GAP system and its language, GAP-L. It then demonstrates the ease of development and the degree of re-use by creating variants of two common bioinformatics algorithms. Finally, it evaluates Bellman's GAP as an implementation platform of 'real-world' bioinformatics tools.", "paper_title": "Bellman's GAP-a language and compiler for dynamic programming in sequence analysis", "paper_id": "WOS:000315623000003"}