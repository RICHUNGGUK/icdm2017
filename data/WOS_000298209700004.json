{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "type_checking"}, {"score": 0.031461310706329015, "phrase": "derivation_rules"}, {"score": 0.004608539830653038, "phrase": "derivational_approach"}, {"score": 0.004438642216475526, "phrase": "different_representations"}, {"score": 0.0043560464825349275, "phrase": "type_system"}, {"score": 0.004301834610818624, "phrase": "different_ways"}, {"score": 0.00422177384286051, "phrase": "type_assignments"}, {"score": 0.004117329555194574, "phrase": "particular_applications"}, {"score": 0.0033905067962602515, "phrase": "kuan_et_al"}, {"score": 0.0030097975788892896, "phrase": "traditional_set"}, {"score": 0.0027916287357898544, "phrase": "danvy_et_al"}, {"score": 0.00262191949451482, "phrase": "reduction-based_semantics"}, {"score": 0.002525074485615743, "phrase": "traditional_one"}, {"score": 0.0023715311257000438, "phrase": "recursive_descent"}, {"score": 0.0021857667493036786, "phrase": "functional_program_transformations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal semantics", " Functional programming", " Compositional evaluators", " Type checkers", " Continuation-passing style", " Defunctionalization", " Refunctionalization"], "paper_abstract": "We describe a derivational approach to proving the equivalence of different representations of a type system. Different ways of representing type assignments are convenient for particular applications such as reasoning or implementation, but some kind of correspondence between them should be proven. In this paper we address two such semantics for type checking: one, due to Kuan et al., in the form of a term rewriting system and the other in the form of a traditional set of derivation rules. By employing a set of techniques investigated by Danvy et al., we mechanically derive the correspondence between a reduction-based semantics for type checking and a traditional one in the form of derivation rules, implemented as a recursive descent. The correspondence is established through a series of semantics-preserving functional program transformations. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A correspondence between type checking via reduction and type checking via evaluation", "paper_id": "WOS:000298209700004"}