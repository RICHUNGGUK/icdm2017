{"auto_keywords": [{"score": 0.024679401925273993, "phrase": "cool"}, {"score": 0.00481495049065317, "phrase": "multiple_aspect-oriented_extensions"}, {"score": 0.0047732596509542135, "phrase": "domain_specific_aspect-oriented_language_extensions"}, {"score": 0.00457013354092966, "phrase": "crosscutting_concerns"}, {"score": 0.004244375827831527, "phrase": "single_program"}, {"score": 0.004046020290832207, "phrase": "different_weavers"}, {"score": 0.0037903327482565097, "phrase": "difficult_problem"}, {"score": 0.0035974243349266894, "phrase": "new_semantics"}, {"score": 0.0034742854447532678, "phrase": "practical_composition_framework"}, {"score": 0.0034292006659651228, "phrase": "awesome"}, {"score": 0.0033553473725594003, "phrase": "multi-extension_weaver"}, {"score": 0.00326881479036966, "phrase": "aspect_mechanisms"}, {"score": 0.0031845067058084613, "phrase": "component-based_and_aspect-oriented_architecture"}, {"score": 0.0030754582519753474, "phrase": "aspect_weavers"}, {"score": 0.0029443683459283955, "phrase": "default_resolution"}, {"score": 0.002918826667294298, "phrase": "feature_interactions"}, {"score": 0.002722288966917744, "phrase": "composition_behavior"}, {"score": 0.002583597507349819, "phrase": "framework-associated_overhead"}, {"score": 0.0025500402081330394, "phrase": "runtime_performance"}, {"score": 0.0025279105573394727, "phrase": "compiled_aspect_programs"}, {"score": 0.002473420909291381, "phrase": "awesome_framework"}, {"score": 0.002347378595930709, "phrase": "multi-extension_aop_language"}, {"score": 0.002257070536352418, "phrase": "composition_method"}, {"score": 0.0021049977753042253, "phrase": "comparable_reactive_aspect_mechanisms"}], "paper_keywords": ["AOP", " aspect extension", " aspect mechanism", " aspect weaver", " composition", " DSL", " framework", " pluggability"], "paper_abstract": "Domain specific aspect-oriented language extensions offer unique capabilities to deal with a variety of crosscutting concerns. Ideally, one should be able to use several of these extensions together in a single program. Unfortunately, each extension generally implements its own specialized weaver and the different weavers are incompatible. Even if the weavers were compatible, combining them is a difficult problem to solve in general, because each extension defines its own language with new semantics. In this paper we present a practical composition framework, named AWESOME, for constructing a multi-extension weaver by plugging together independently developed aspect mechanisms. The framework has a component-based and aspect-oriented architecture that facilitates the development and integration of aspect weavers. To be scalable, the framework provides a default resolution of feature interactions in the composition. To be general, the framework provides means for customizing the composition behavior. Furthermore, to be practically useful, there is no framework-associated overhead on the runtime performance of compiled aspect programs. To illustrate the AWESOME framework concretely, we demonstrate the construction of a weaver for a multi-extension AOP language that combines COOL and AspectJ. However, the composition method is not exclusive to COOL and AspectJ-it can be applied to combine any comparable reactive aspect mechanisms.", "paper_title": "AWESOME: An aspect co-weaving system for composing multiple aspect-oriented extensions", "paper_id": "WOS:000253410000031"}