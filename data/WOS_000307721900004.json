{"auto_keywords": [{"score": 0.03574891111541318, "phrase": "high_probability"}, {"score": 0.0047323590206695305, "phrase": "distributed_system"}, {"score": 0.00469159356595623, "phrase": "n_processors"}, {"score": 0.004473552224535518, "phrase": "external_source"}, {"score": 0.003928834302530914, "phrase": "user-specified_input"}, {"score": 0.0037786899855446, "phrase": "global_snapshots"}, {"score": 0.0035564156572789473, "phrase": "randomized_and_decentralized_algorithm"}, {"score": 0.003510507340837656, "phrase": "dtc_problem"}, {"score": 0.00308269056870936, "phrase": "improved_algorithm"}, {"score": 0.0026603411931700556, "phrase": "complete_connectivity"}, {"score": 0.0025474814283429213, "phrase": "third_algorithm"}, {"score": 0.0022957232752482196, "phrase": "negligible_failure_probability"}, {"score": 0.002227083991228041, "phrase": "w_triggers"}, {"score": 0.0021511430180912164, "phrase": "constant_degree_tree"}, {"score": 0.0021049977753042253, "phrase": "underlying_communication_graph"}], "paper_keywords": ["Distributed trigger counting", " Randomized algorithm", " Message complexity"], "paper_abstract": "Consider a distributed system with n processors, in which each processor receives some triggers from an external source. The distributed trigger counting (DTC) problem is to raise an alert and report to a user when the number of triggers received by the system reaches w, where w is a user-specified input. The problem has applications in monitoring, global snapshots, synchronizers and other distributed settings. In this paper, we first present a randomized and decentralized algorithm for the DTC problem with message complexity O(nlognlogw); furthermore, with high probability, no processor receives more than O(lognlogw) messages. Building on the ideas of this algorithm, we develop an improved algorithm having message complexity O(nlogw); furthermore, with high probability, no processor receives more than O(log w) messages. However, neither of the two algorithms provide any bound on the messages sent per processors. These algorithm assume complete connectivity between the processors. Next, we present a third algorithm having message complexity O(nlognlogw), wherein no processor exchanges more than O(lognlogw) messages with high probability; however, there is a negligible failure probability in raising the alert on receiving w triggers. This algorithm only requires that a constant degree tree be embeddable in the underlying communication graph.", "paper_title": "Efficient Decentralized Algorithms for the Distributed Trigger Counting Problem", "paper_id": "WOS:000307721900004"}