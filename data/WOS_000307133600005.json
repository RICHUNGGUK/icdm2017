{"auto_keywords": [{"score": 0.04955634432616479, "phrase": "scope"}, {"score": 0.00481495049065317, "phrase": "large-scale_software_engineering"}, {"score": 0.0047103751935235975, "phrase": "core_part"}, {"score": 0.00468458651904683, "phrase": "software_release_management"}, {"score": 0.004658938373208752, "phrase": "often_a_key_factor"}, {"score": 0.004620727987405077, "phrase": "successful_software_products"}, {"score": 0.0045327791642396495, "phrase": "market-driven_case"}, {"score": 0.004232062908751438, "phrase": "case_study"}, {"score": 0.003865328900538373, "phrase": "overscoping_situation"}, {"score": 0.0038441488723606155, "phrase": "semi-structured_interviews"}, {"score": 0.003802135020791801, "phrase": "nine_practitioners"}, {"score": 0.00352057345901636, "phrase": "detailed_picture"}, {"score": 0.0034063576796640603, "phrase": "root_causes"}, {"score": 0.003268767497941097, "phrase": "fast-moving_market-driven_domain"}, {"score": 0.003233021751961707, "phrase": "ever-changing_inflow"}, {"score": 0.0031801323969554976, "phrase": "weak_awareness"}, {"score": 0.0031626949751567754, "phrase": "overall_goals"}, {"score": 0.0031195172782778036, "phrase": "low_development_involvement"}, {"score": 0.003102411189152985, "phrase": "early_phases"}, {"score": 0.0028883594129269913, "phrase": "potentially_serious_and_expensive_consequences"}, {"score": 0.002802292894438601, "phrase": "customer_expectations"}, {"score": 0.002703869368554536, "phrase": "agile_requirements_engineering_practices"}, {"score": 0.002580345329954588, "phrase": "continuous_scope_prioritization"}, {"score": 0.002545097679559711, "phrase": "gradual_requirements"}, {"score": 0.002517245669541011, "phrase": "close_cooperation"}, {"score": 0.0025034338848015187, "phrase": "cross-functional_teams"}, {"score": 0.0024489385825401536, "phrase": "increased_understanding"}, {"score": 0.0024154816080358336, "phrase": "complex_and_continuous_activity"}, {"score": 0.0023178219772486868, "phrase": "possible_impact"}, {"score": 0.0023051018745625053, "phrase": "agile_requirements"}, {"score": 0.0022987679645976333, "phrase": "engineering_practices"}, {"score": 0.0021876814398268775, "phrase": "potential_factors"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Requirements scoping", " Empirical study", " Software release planning", " Case study", " Agile requirements engineering"], "paper_abstract": "Context: Scope management is a core part of software release management and often a key factor in releasing successful software products to the market. In a market-driven case, when only a few requirements are known a priori, the risk of overscoping may increase. Objective: This paper reports on findings from a case study aimed at understanding overscoping in large-scale, market-driven software development projects, and how agile requirements engineering practices may affect this situation. Method: Based on a hypothesis of which factors that may be involved in an overscoping situation, semi-structured interviews were performed with nine practitioners at a large, market-driven software company. The results from the interviews were validated by six (other) practitioners at the case company via a questionnaire. Results: The results provide a detailed picture of overscoping as a phenomenon including a number of causes, root causes and effects, and indicate that overscoping is mainly caused by operating in a fast-moving market-driven domain and how this ever-changing inflow of requirements is managed. Weak awareness of overall goals, in combination with low development involvement in early phases, may contribute to 'biting off more than a project can 'chew'. Furthermore, overscoping may lead to a number of potentially serious and expensive consequences, including quality issues, delays and failure to meet customer expectations. Finally, the study indicates that overscoping occurs also when applying agile requirements engineering practices, though the overload is more manageable and perceived to result in less wasted effort when applying a continuous scope prioritization, in combination with gradual requirements detailing and a close cooperation within cross-functional teams. Conclusion: The results provide an increased understanding of scoping as a complex and continuous activity, including an analysis of the causes, effects, and a discussion on possible impact of agile requirements engineering practices to the issue of overscoping. The results presented in this paper can be used to identify potential factors to address in order to achieve a more realistic project scope. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Are you biting off more than you can chew? A case study on causes and effects of overscoping in large-scale software engineering", "paper_id": "WOS:000307133600005"}