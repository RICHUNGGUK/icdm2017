{"auto_keywords": [{"score": 0.04926778266856684, "phrase": "product_line"}, {"score": 0.015719716506582538, "phrase": "architecture_variability"}, {"score": 0.010644370779527556, "phrase": "domain_architecture"}, {"score": 0.004600389726895716, "phrase": "organizational_structure"}, {"score": 0.004296264970612285, "phrase": "reusable_components"}, {"score": 0.004199406257273994, "phrase": "software_systems"}, {"score": 0.00401216440036853, "phrase": "considerable_improvement"}, {"score": 0.003944112858235306, "phrase": "development_costs"}, {"score": 0.0035796471115594553, "phrase": "individual_component"}, {"score": 0.0033427754823819157, "phrase": "whole_design"}, {"score": 0.0031754329320561317, "phrase": "common_software_architecture"}, {"score": 0.003068537223324389, "phrase": "common_components"}, {"score": 0.0029652292779277782, "phrase": "optional_components"}, {"score": 0.0027374647587075935, "phrase": "key_concepts"}, {"score": 0.0026604207233593973, "phrase": "domain_architectures"}, {"score": 0.002386869729952315, "phrase": "domain_architecture_development"}, {"score": 0.0022672718785099666, "phrase": "metamodeling_concept"}, {"score": 0.0022160547331029757, "phrase": "common_understanding"}, {"score": 0.002153653728048424, "phrase": "domain_architecture_metamodel"}, {"score": 0.0021050040451080685, "phrase": "ras"}], "paper_keywords": [""], "paper_abstract": "Architecture describes the organizational structure of a system including components, interactions, and constraints. Reusable components, units of software systems, have been considered to support a considerable improvement in reducing development costs and time to market because their interfaces and functionality are explicitly defined. Instead of reusing an individual component, however, it is much more advantageous to reuse a whole design or architecture. A domain architecture, sharing a common software architecture across a product line, includes common components shared by all products and optional components exploited by a subset of the products. Variability, one of the key concepts in the development of domain architectures indicates the ability to derive various products from the product line. Clearly, we need to support variability during domain architecture development. In this paper, we suggest a metamodeling concept that enables a common understanding of architecture variability. The domain architecture metamodel reflects the Object Management Group's (OMG (TM)) Reusable Asset Specification (RAS) which addresses the engineering elements of reuse. We describe a domain architecture in which commonality and variability are explicitly considered.", "paper_title": "A metamodel approach to architecture variability in a product line", "paper_id": "WOS:000238575400009"}