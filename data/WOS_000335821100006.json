{"auto_keywords": [{"score": 0.03790132647342112, "phrase": "ids"}, {"score": 0.00481495049065317, "phrase": "scalable_pattern_matching_using_longest_prefix_match_solutions"}, {"score": 0.004757917303420435, "phrase": "central_component"}, {"score": 0.004701556483912018, "phrase": "contemporary_intrusion_detection_systems"}, {"score": 0.004377077848734575, "phrase": "deterministic_finite_automaton"}, {"score": 0.004156691746581458, "phrase": "deterministic_time_guarantees"}, {"score": 0.004123781267600542, "phrase": "modern_idss"}, {"score": 0.0036893794227117194, "phrase": "major_bottleneck"}, {"score": 0.0034073030552032304, "phrase": "novel_method"}, {"score": 0.0032614317990293695, "phrase": "common_dfa_encoding"}, {"score": 0.0028944757265206332, "phrase": "specific_state"}, {"score": 0.002837451022172113, "phrase": "single_prefix"}, {"score": 0.0027704982687041147, "phrase": "current_states"}, {"score": 0.002705121052747945, "phrase": "large_class"}, {"score": 0.0026099289298770023, "phrase": "simple_properties"}, {"score": 0.002478297391121455, "phrase": "well-studied_problem"}, {"score": 0.0024586427394152196, "phrase": "longest_prefix_match"}, {"score": 0.0023532890136269986, "phrase": "ternary_content-addressable_memory"}, {"score": 0.0022977342663599042, "phrase": "commercially_available_ip-lookup_chips"}, {"score": 0.0022961306322031197, "phrase": "tcam"}, {"score": 0.0021049977753042253, "phrase": "low_power_consumption"}], "paper_keywords": ["Aho-Corasick (AC)", " deep packet inspection", " IP lookup", " network intrusion detection system (NIDS)", " pattern matching", " ternary content-addressable memory (TCAM)"], "paper_abstract": "A central component in all contemporary intrusion detection systems (IDSs) is their pattern matching algorithms, which are often based on constructing and traversing a deterministic finite automaton (DFA) that represents the patterns. While this approach ensures deterministic time guarantees, modern IDSs need to deal with hundreds of patterns, thus requiring to store very large DFAs, which usually do not fit in fast memory. This results in a major bottleneck on the throughput of the IDS, as well as its power consumption and cost. We propose a novel method to compress DFAs by observing that the name used by common DFA encoding is meaningless. While regular DFAs store separately each transition between two states, we use this degree of freedom and encode states in such a way that all transitions to a specific state are represented by a single prefix that defines a set of current states. Our technique applies to a large class of automata, which can be categorized by simple properties. Then, the problem of pattern matching is reduced to the well-studied problem of Longest Prefix Match (LPM), which can be solved either in ternary content-addressable memory (TCAM), in commercially available IP-lookup chips, or in software. Specifically, we show that with a TCAM our scheme can reach a throughput of 10 Gb/s with low power consumption.", "paper_title": "CompactDFA: Scalable Pattern Matching Using Longest Prefix Match Solutions", "paper_id": "WOS:000335821100006"}