{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "architectural_model"}, {"score": 0.04318922310981058, "phrase": "concurrent_fault-tolerant_systems"}, {"score": 0.004593787100061613, "phrase": "ca_action_concepts"}, {"score": 0.004442032546224076, "phrase": "coordinated_atomic_action"}, {"score": 0.004383916189488286, "phrase": "ca"}, {"score": 0.0039624406239057944, "phrase": "concurrent_exception"}, {"score": 0.0037549546301384336, "phrase": "general_mechanism"}, {"score": 0.003679969180334367, "phrase": "enclosing_interactions"}, {"score": 0.00363080961099728, "phrase": "system_components"}, {"score": 0.003558294449586273, "phrase": "forward_error_recovery_measures"}, {"score": 0.0033268412940032103, "phrase": "formal_specification"}, {"score": 0.0031738126998349775, "phrase": "built-in_communicating_sequential_processes"}, {"score": 0.0029873281676201565, "phrase": "exception_handling"}, {"score": 0.002927626967420519, "phrase": "user-defined_components"}, {"score": 0.0028498718992429825, "phrase": "safety_properties"}, {"score": 0.002755567647101251, "phrase": "concurrent_exception_handling"}, {"score": 0.0026288177125451577, "phrase": "fdr"}, {"score": 0.0023923066544220277, "phrase": "formal_and_general_architecture_supporting_software_fault_tolerance"}, {"score": 0.0021917966722180132, "phrase": "normal_and_exceptional_behaviors"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Concurrent exception handling", " Coordinated atomic action", " Fault tolerance", " CSP"], "paper_abstract": "Architectures based on Coordinated Atomic action (CA action) concepts have been used to build concurrent fault-tolerant systems. This conceptual model combines concurrent exception handling with action nesting to provide a general mechanism for both enclosing interactions among system components and coordinating forward error recovery measures. This article presents an architectural model to guide the formal specification of concurrent fault-tolerant systems. This architecture provides built-in Communicating Sequential Processes (CSPs) and predefined channels to coordinate exception handling of the user-defined components. Hence some safety properties concerning action scoping and concurrent exception handling can be proved by using the FDR (Failure Divergence Refinement) verification tool. As a result, a formal and general architecture supporting software fault tolerance is ready to be used and proved as users define components with normal and exceptional behaviors. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Formalization of an architectural model for exception handling coordination based on CA action concepts", "paper_id": "WOS:000276717500004"}