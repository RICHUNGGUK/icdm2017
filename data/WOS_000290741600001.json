{"auto_keywords": [{"score": 0.04000242598370857, "phrase": "rob"}, {"score": 0.039299739304905296, "phrase": "register_file"}, {"score": 0.031042246409708846, "phrase": "monitoring_mechanism"}, {"score": 0.00481495049065317, "phrase": "register-file_static_power"}, {"score": 0.004684157900507474, "phrase": "rob._modern_information_technology"}, {"score": 0.0042928648367867835, "phrase": "computational_performance"}, {"score": 0.004157058883925715, "phrase": "current_microprocessors"}, {"score": 0.004081385289516914, "phrase": "data_forwarding"}, {"score": 0.003970439654470374, "phrase": "order_execution"}, {"score": 0.0038447943243941685, "phrase": "reorder_buffer"}, {"score": 0.003459191419478298, "phrase": "serious_static-power_consumption"}, {"score": 0.0034118234596993836, "phrase": "physical_register_file"}, {"score": 0.003349670229755675, "phrase": "large_amount"}, {"score": 0.0033190180867511605, "phrase": "speculative_and_committed_temporary_values"}, {"score": 0.003140888248194296, "phrase": "baseline_architecture"}, {"score": 0.003083655376444887, "phrase": "runtime_approach"}, {"score": 0.003027462227648001, "phrase": "physical_register_file's_static_power"}, {"score": 0.0026011706232569316, "phrase": "dvs_approach"}, {"score": 0.0023079225317714815, "phrase": "simulation_results"}, {"score": 0.002224510044064184, "phrase": "low-cost_dvs_design"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Low-power register file", " Static power", " Dynamic voltage scaling (DVS)", " Reorder buffer"], "paper_abstract": "Modern information technology (IT) applications make microprocessors require not only high performance, but also low power-consumption. To enhance computational performance, many instruction level parallelism techniques have been implemented in current microprocessors, e.g., data forwarding, out-of-order execution, register renaming etc. The reorder buffer (ROB) and the register file are the two most critical components to implement these features. The cooperation of them, however, causes serious static-power consumption on a physical register file which stores a large amount of speculative and committed temporary values. In this paper, we use the Pentium 4-like processor as the baseline architecture and propose a runtime approach to save the physical register file's static power. In this approach, a monitoring mechanism is built in the ROB and the register file to identify the timing of usage for each register. This mechanism can be integrated with a DVS approach on the datapath to power down (or up) the supply voltages to a register when it is idle (or active). Simulation results show that by this monitoring mechanism and a low-cost DVS design, a 128-entry register file can save at least 50% register file power consumption. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Saving register-file static power by monitoring instruction sequence in ROB", "paper_id": "WOS:000290741600001"}