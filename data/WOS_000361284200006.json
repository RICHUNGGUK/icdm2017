{"auto_keywords": [{"score": 0.04809176147872219, "phrase": "existing_techniques"}, {"score": 0.00481495049065317, "phrase": "tightly_bounded_recording"}, {"score": 0.004739056045644449, "phrase": "concurrency_bugs"}, {"score": 0.004664352260912174, "phrase": "prominent_challenge"}, {"score": 0.004447201233380302, "phrase": "grained_execution_information"}, {"score": 0.004353948887538618, "phrase": "high_runtime_overhead"}, {"score": 0.003674738405118697, "phrase": "fine_grained_recording"}, {"score": 0.0035408501923902477, "phrase": "concurrent_bugs"}, {"score": 0.0033937776228549557, "phrase": "recording_flow_dependences"}, {"score": 0.0033402088717816446, "phrase": "necessary_and_sufficient_condition"}, {"score": 0.003270092550315648, "phrase": "concurrent_bug"}, {"score": 0.0032184697893776052, "phrase": "flow_dependences"}, {"score": 0.0031342307827666675, "phrase": "thread_local_orders"}, {"score": 0.002879158342988017, "phrase": "scheduling_constraints"}, {"score": 0.002833689453299307, "phrase": "smt_solver"}, {"score": 0.002744888626958772, "phrase": "replay_schedule"}, {"score": 0.0025348408238837655, "phrase": "original_schedule"}, {"score": 0.0022916428586256723, "phrase": "art_techniques"}, {"score": 0.002255431275670053, "phrase": "logging_memory_accesses"}], "paper_keywords": ["Design", " Performance", " Reliability", " Concurrency", " Replay", " Thread Determinism", " Tight Bound", " Local Recording"], "paper_abstract": "Reproducing concurrency bugs is a prominent challenge. Existing techniques either rely on recording very fine grained execution information and hence have high runtime overhead, or strive to log as little information as possible but provide no guarantee in reproducing a bug. We present Light, a technique that features much lower overhead compared to techniques based on fine grained recording, and that guarantees to reproduce concurrent bugs. We leverage and formally prove that recording flow dependences is the necessary and sufficient condition to reproduce a concurrent bug. The flow dependences, together with the thread local orders that can be automatically inferred (and hence not logged), are encoded as scheduling constraints. An SMT solver is used to derive a replay schedule, which is guaranteed to exist even though it may be different from the original schedule. Our experiments show that Light has only 44% logging overhead, almost one order of magnitude lower than the state of the art techniques relying on logging memory accesses. Its space overhead is only 10% of those techniques. Light can also reproduce all the bugs we have collected whereas existing techniques miss some of them.", "paper_title": "Light: Replay via Tightly Bounded Recording", "paper_id": "WOS:000361284200006"}