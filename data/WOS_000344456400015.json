{"auto_keywords": [{"score": 0.03668992666715297, "phrase": "arm_executables"}, {"score": 0.03014720888291599, "phrase": "dbill"}, {"score": 0.00481495049065317, "phrase": "efficient_and_retargetable_dynamic_binary_instrumentation_framework"}, {"score": 0.004677847043645765, "phrase": "dynamic_binary_instrumentation"}, {"score": 0.00462421123661902, "phrase": "dbi"}, {"score": 0.004518442937844318, "phrase": "core_technology"}, {"score": 0.004314285113050873, "phrase": "application_executables"}, {"score": 0.003933118499284644, "phrase": "guest_binary"}, {"score": 0.0038654774211631564, "phrase": "host_binary"}, {"score": 0.0036482665232275583, "phrase": "cross-isa_dbi_system"}, {"score": 0.0033257460346754687, "phrase": "cross-isa_dbi_systems"}, {"score": 0.0030141556259370675, "phrase": "commonly_available_pcs"}, {"score": 0.0025929848875247247, "phrase": "qemu"}, {"score": 0.002563130569353087, "phrase": "llvm."}, {"score": 0.0025336179740814905, "phrase": "dbill_framework"}, {"score": 0.0025044454602720597, "phrase": "llvm-based_static_instrumentation_tools"}, {"score": 0.002377260665147444, "phrase": "different_target_architectures"}, {"score": 0.0023363141951290526, "phrase": "address_sanitizer"}, {"score": 0.002309408211203032, "phrase": "memory_sanitizer"}, {"score": 0.0022828113789751694, "phrase": "implementation_examples"}, {"score": 0.0021049977753042253, "phrase": "cross-isa_retargetable_dbi_framework"}], "paper_keywords": ["dynamic binary instrumentation framework", " LLVM-based instrumentation", " LLVM enhanced dynamic binary translation and instrumentation", " memory bugs"], "paper_abstract": "Dynamic Binary Instrumentation (DBI) is a core technology for building debugging and profiling tools for application executables. Most state-of-the-art DBI systems have focused on the same instruction set architecture (ISA) where the guest binary and the host binary have the same ISA. It is uncommon to have a cross-ISA DBI system, such as a system that instruments ARM executables to run on x86 machines. We believe cross-ISA DBI systems are increasingly more important, since ARM executables could be more productively analyzed on x86 based machines such as commonly available PCs and servers. In this paper, we present DBILL, a cross-ISA and retargetable dynamic binary instrumentation framework that builds on both QEMU and LLVM. The DBILL framework enables LLVM-based static instrumentation tools to become DBI ready, and deployable to different target architectures. Using address sanitizer and memory sanitizer as implementation examples, we show DBILL is an efficient, versatile and easy to use cross-ISA retargetable DBI framework.", "paper_title": "DBILL: An Efficient and Retargetable Dynamic Binary Instrumentation Framework using LLVM Backend", "paper_id": "WOS:000344456400015"}