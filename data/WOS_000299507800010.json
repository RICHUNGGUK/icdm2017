{"auto_keywords": [{"score": 0.037084226842329544, "phrase": "nar_approach"}, {"score": 0.01384306927154694, "phrase": "existing_node"}, {"score": 0.010865916367408524, "phrase": "added_nodes"}, {"score": 0.009522440831516729, "phrase": "circuit_minimization"}, {"score": 0.00481495049065317, "phrase": "node_addition"}, {"score": 0.004652845998457721, "phrase": "logic_restructuring_technique"}, {"score": 0.004144810537437608, "phrase": "replaced_node"}, {"score": 0.004109454074072009, "phrase": "previous_node-merging_techniques"}, {"score": 0.0037558704408683905, "phrase": "substitute_node"}, {"score": 0.0036762529165489644, "phrase": "node-merging_techniques"}, {"score": 0.0032465423581390625, "phrase": "target_node"}, {"score": 0.003044313656896057, "phrase": "logic_implications"}, {"score": 0.0026538960171433963, "phrase": "sequential_equivalence_checking"}, {"score": 0.002575385171755899, "phrase": "computation_complexity"}, {"score": 0.002553382046204689, "phrase": "sat_solving"}, {"score": 0.0025207284405252914, "phrase": "experimental_results"}, {"score": 0.002283839204519042, "phrase": "sat-based_node-merging_approach"}, {"score": 0.002254625157733371, "phrase": "bsec"}], "paper_keywords": ["Logic implication", " node addition and removal", " node merging", " observability don't care"], "paper_abstract": "This paper presents a logic restructuring technique named node addition and removal (NAR). It works by adding a node into a circuit to replace an existing node and then removing the replaced node. Previous node-merging techniques focus on replacing one node with an existing node in a circuit, but fail to replace a node that has no substitute node. To enhance the node-merging techniques on logic restructuring and optimization, we propose an NAR approach in this paper. We first present two sufficient conditions that state the requirements of added nodes for safely replacing a target node. Then, an NAR approach is proposed to quickly detect the added nodes by performing logic implications based on these conditions. We apply the NAR approach to circuit minimization together with two techniques: redundancy removal and mandatory assignment reuse. We also apply it to satisfiability (SAT)-based bounded sequential equivalence checking (BSEC) to reduce the computation complexity of SAT solving. The experimental results show that our approach can enhance our prior automatic test pattern generation-based node-merging approach. Additionally, our approach has a competitive capability of circuit minimization with 44 times speedup compared to a SAT-based node-merging approach. For BSEC, our approach can work together with other optimization technique to save a total of approximately 39-h verification time for all the benchmarks.", "paper_title": "Logic Restructuring Using Node Addition and Removal", "paper_id": "WOS:000299507800010"}