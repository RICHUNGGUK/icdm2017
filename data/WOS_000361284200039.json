{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "eventually_consistent_data_stores"}, {"score": 0.031098289909574556, "phrase": "quelea"}, {"score": 0.0047051051659828275, "phrase": "online_services"}, {"score": 0.004661868629458321, "phrase": "geo-distributed_data_stores"}, {"score": 0.004534517530868195, "phrase": "partial_failures"}, {"score": 0.004058826900076531, "phrase": "application_developers"}, {"score": 0.003966162568548304, "phrase": "weak_consistency_behaviors"}, {"score": 0.003787108326100196, "phrase": "high-level_replicated_data_types"}, {"score": 0.003683565150278339, "phrase": "complex_application_logic"}, {"score": 0.003484864867147635, "phrase": "data_stores"}, {"score": 0.0033739270918502285, "phrase": "consistency_levels"}, {"score": 0.0033274664434575136, "phrase": "stronger_consistency_guarantees"}, {"score": 0.0032968474833776906, "phrase": "increased_latency_and_throughput_costs"}, {"score": 0.0031918759137610523, "phrase": "right_consistency_level"}, {"score": 0.003118942369691329, "phrase": "subtle_reasoning"}, {"score": 0.0030476702431093687, "phrase": "error-prone_task"}, {"score": 0.00274017282519193, "phrase": "contract_language"}, {"score": 0.0026775328564629577, "phrase": "fine-grained_application-level_consistency_properties"}, {"score": 0.0025212722607043546, "phrase": "appropriate_consistency_protocol"}, {"score": 0.0022149235007885826, "phrase": "coordination-free_transactions"}], "paper_keywords": ["Languages", " Performance", " Eventual Consistency", " Availability", " CRDTs", " Axiomatic Contracts", " Contract Classification", " Distributed Transactions", " SMT solvers", " Decidable Logic", " Quelea", " Cassandra", " Haskell"], "paper_abstract": "User-facing online services utilize geo-distributed data stores to minimize latency and tolerate partial failures, with the intention of providing a fast, always-on experience. However, geo-distribution does not come for free; application developers have to contend with weak consistency behaviors, and the lack of abstractions to composably construct high-level replicated data types, necessitating the need for complex application logic and invariably exposing inconsistencies to the user. Some commercial distributed data stores and several academic proposals provide a lattice of consistency levels, with stronger consistency guarantees incurring increased latency and throughput costs. However, correctly assigning the right consistency level for an operation requires subtle reasoning and is often an error-prone task. In this paper, we present QUELEA, a declarative programming model for eventually consistent data stores (ECDS), equipped with a contract language, capable of specifying fine-grained application-level consistency properties. A contract enforcement system analyses contracts, and automatically generates the appropriate consistency protocol for the method protected by the contract. We describe an implementation of QUELEA on top of an off-the-shelf ECDS that provides support for coordination-free transactions. Several benchmarks including two large web applications, illustrate the effectiveness of our approach.", "paper_title": "Declarative Programming over Eventually Consistent Data Stores", "paper_id": "WOS:000361284200039"}