{"auto_keywords": [{"score": 0.049505168345722585, "phrase": "heterogeneous_api_data"}, {"score": 0.04066301332698914, "phrase": "api_library_source_code"}, {"score": 0.039959787485121356, "phrase": "api_client_programs"}, {"score": 0.03314999892612072, "phrase": "minehead"}, {"score": 0.02965191064180418, "phrase": "effective_specifications"}, {"score": 0.00481495049065317, "phrase": "effective_temporal_specifications"}, {"score": 0.004700193486903964, "phrase": "temporal_specifications"}, {"score": 0.004643839937761046, "phrase": "application_programming_interfaces"}, {"score": 0.004451846834142146, "phrase": "important_basis"}, {"score": 0.003692271726952282, "phrase": "library-based_approaches"}, {"score": 0.0036479584876742085, "phrase": "substantial_computational_resources"}, {"score": 0.0035824802350703376, "phrase": "rather_limited_useful_specifications"}, {"score": 0.003496994062890991, "phrase": "client-based_approaches"}, {"score": 0.0034342161742428635, "phrase": "high_false_positive_rates"}, {"score": 0.0032920678776655783, "phrase": "existing_approaches"}, {"score": 0.0031941384895530426, "phrase": "novel_specification_mining_approach"}, {"score": 0.0027630232270330402, "phrase": "defect_detection"}, {"score": 0.0027298319171606498, "phrase": "low_cost"}, {"score": 0.002600995957987461, "phrase": "client-based_specification_mining"}, {"score": 0.002508365161206412, "phrase": "candidate_specifications"}, {"score": 0.002419025278429845, "phrase": "related_library_source_code"}, {"score": 0.002304824112812496, "phrase": "real_specifications"}, {"score": 0.0021960024679620886, "phrase": "nine_open_source_projects"}, {"score": 0.0021049977753042253, "phrase": "average_precision"}], "paper_keywords": ["specification mining", " specification refinement", " defect detection", " comment analysis"], "paper_abstract": "Temporal specifications for Application Programming Interfaces (APIs) serve as an important basis for many defect detection tools. As these specifications are often not well documented, various approaches have been proposed to automatically mine specifications typically from API library source code or from API client programs. However, the library-based approaches take substantial computational resources and produce rather limited useful specifications, while the client-based approaches suffer from high false positive rates. To address the issues of existing approaches, we propose a novel specification mining approach, called MineHEAD, which exploits heterogeneous API data, including information from API client programs as well as API library source code and comments, to produce effective specifications for defect detection with low cost. In particular, MineHEAD first applies client-based specification mining to produce a collection of candidate specifications, and then exploits the related library source code and comments to identify and refine the real specifications from the candidates. Our evaluation results on nine open source projects show that MineHEAD produces effective specifications with average precision of 97.2%.", "paper_title": "Mining Effective Temporal Specifications from Heterogeneous API Data", "paper_id": "WOS:000297416700013"}