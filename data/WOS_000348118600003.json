{"auto_keywords": [{"score": 0.03403112053370178, "phrase": "systemc"}, {"score": 0.00481495049065317, "phrase": "system_modeling"}, {"score": 0.004656647251517823, "phrase": "increasing_complexity"}, {"score": 0.004612376827433774, "phrase": "digital_systems"}, {"score": 0.004397230847865867, "phrase": "better_abstraction"}, {"score": 0.004054169947971483, "phrase": "powerful_mechanism"}, {"score": 0.003958439439112026, "phrase": "concurrency_model"}, {"score": 0.003828187766572941, "phrase": ".net_introspection"}, {"score": 0.003773680962197766, "phrase": "programming_capabilities"}, {"score": 0.003632080001489739, "phrase": "system-level_modeling_and_parallel_simulation_environment"}, {"score": 0.0033969001271637934, "phrase": "high-level_models"}, {"score": 0.003300813776412652, "phrase": "communication_channels"}, {"score": 0.0029569247903654477, "phrase": "scheduling_algorithms"}, {"score": 0.002873247913129334, "phrase": "transactional_models"}, {"score": 0.00276534038425712, "phrase": "multicore_machine"}, {"score": 0.002537097217899195, "phrase": "simulation_machine"}, {"score": 0.0021049977753042253, "phrase": "individual_transactions"}], "paper_keywords": ["SOC Design", " Parallel simulation", " Transactions", " Multi-core"], "paper_abstract": "With the increasing complexity of digital systems that are becoming more and more parallel, a better abstraction to describe such systems has become a necessity. This paper shows how, by using the powerful mechanism of transactions as a concurrency model, and by taking advantage of .NET introspection and attribute programming capabilities, we were able to develop a system-level modeling and parallel simulation environment. We kept the same concepts as SystemC to describe the architecture of high-level models, such as modules and communication channels. However, unlike SystemC, the behavior is no longer described as processes and events but as transactions. We implemented scheduling algorithms in order to enable simulating transactional models in parallel by taking advantage of a multicore machine. These algorithms take into account the dependency between transactions and the number of cores of the simulation machine. We studied two synchronisation strategies: one using locking and the other using partitioning. An experiment made on a WiFi 802.11 a transmitter achieved a speedup of about 1.9 using two threads. With 8 threads, although the workload of individual transactions was not significant, the speedup could reach 5.7. When the workload is significant the speedup can reach 7.0.", "paper_title": "A Transaction-Based Environment for System Modeling and Parallel Simulation", "paper_id": "WOS:000348118600003"}