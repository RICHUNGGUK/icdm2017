{"auto_keywords": [{"score": 0.03381238233390183, "phrase": "sttram"}, {"score": 0.00481495049065317, "phrase": "write-aware"}, {"score": 0.004566567411073082, "phrase": "massively_parallel_processing_capacity"}, {"score": 0.004447201233380302, "phrase": "large_register_file"}, {"score": 0.004042635935882651, "phrase": "traditional_sram-based_rfs"}, {"score": 0.0034482025128821548, "phrase": "sttram-based_rf_designs"}, {"score": 0.003304965389155549, "phrase": "smaller_silicon_area"}, {"score": 0.003270092550315648, "phrase": "zero_standby_leakage_power"}, {"score": 0.003150900886669123, "phrase": "latency_and_high_write_energy"}, {"score": 0.002988101395789399, "phrase": "write-aware_sttram-based_rf_architecture"}, {"score": 0.0028487656293168795, "phrase": "split_bank_write"}, {"score": 0.0028037753646260937, "phrase": "arbitrator_design"}, {"score": 0.002603012037901889, "phrase": "write_pool"}, {"score": 0.0025348408238837655, "phrase": "repeated_write_accesses"}, {"score": 0.0024037949232582462, "phrase": "sttram-based_rf"}, {"score": 0.0022674379203603224, "phrase": "warrf."}, {"score": 0.002208035721125305, "phrase": "energy_consumption"}, {"score": 0.0021049977753042253, "phrase": "sram-based_rfs"}], "paper_keywords": ["Nonvolatile memory", " STTRAM", " GPGPU", " register file"], "paper_abstract": "The massively parallel processing capacity of GPGPUs requires a large register file (RF), and its size keeps increasing to support more concurrent threads from generation to generation. Using traditional SRAM-based RFs, there are concerns in both area cost and energy consumption, and soon they will become unrealistic. In this work, we analyze the feasibility of using STTRAM-based RF designs, which have benefits in terms of smaller silicon area and zero standby leakage power. However, STTRAM long write latency and high write energy bring new challenges. Therefore, we propose a write-aware STTRAM-based RF architecture (WarRF), which contains two techniques: Split Bank Write modifies the arbitrator design to increase the parallelism of read and write accesses in the same bank; Write Pool reduces the number of repeated write accesses to RFs. Our experiment shows that the performance of STTRAM-based RF is improved by 13% and up to 23% after adopting WarRF. In addition, the energy consumption is reduced by 38% on average compared to SRAM-based RFs.", "paper_title": "A Write-Aware STTRAM-Based Register File Architecture for GPGPU", "paper_id": "WOS:000359224800006"}