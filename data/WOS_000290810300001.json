{"auto_keywords": [{"score": 0.05007674067847601, "phrase": "embedded_systems"}, {"score": 0.04070870072636179, "phrase": "spm"}, {"score": 0.004769958800452922, "phrase": "scratch-pad_memory"}, {"score": 0.004551199992546761, "phrase": "software-managed_on-chip_sram"}, {"score": 0.004241648852523704, "phrase": "ever-widening_performance_gap"}, {"score": 0.004162703509434786, "phrase": "main_memory"}, {"score": 0.003990385737207714, "phrase": "serious_off-chip_memory_access_overheads"}, {"score": 0.003649585593445665, "phrase": "novel_compiler-assisted_technique"}, {"score": 0.003353521531649663, "phrase": "dynamic_spm_management"}, {"score": 0.003260253530184325, "phrase": "isos"}, {"score": 0.0031547206286777468, "phrase": "dma"}, {"score": 0.0030097975788892896, "phrase": "spm_space"}, {"score": 0.002912331664922248, "phrase": "limited_spm_space"}, {"score": 0.0028312983170567948, "phrase": "dma_operations"}, {"score": 0.002744111155024242, "phrase": "impact"}, {"score": 0.002613709503583786, "phrase": "dspstone"}, {"score": 0.00258923382747264, "phrase": "mediabench"}, {"score": 0.002552946390854313, "phrase": "cycle-accurate_vliw_simulator"}, {"score": 0.0025290375256888883, "phrase": "trimaran"}, {"score": 0.002493592357827492, "phrase": "experimental_results"}, {"score": 0.0024356148906608025, "phrase": "run-time_performance_improvement"}, {"score": 0.0023902026696615473, "phrase": "previous_work"}, {"score": 0.0023566987138026285, "phrase": "average_improvements"}, {"score": 0.002248366278757655, "phrase": "spm_sizes"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["compiler", " scratch-pad memory", " embedded system"], "paper_abstract": "Scratch-pad memory (SPM), a small, fast, software-managed on-chip SRAM (Static Random Access Memory) is widely used in embedded systems. With the ever-widening performance gap between processors and main memory, it is very important to reduce the serious off-chip memory access overheads caused by transferring data between SPM and off-chip memory. In this paper, we propose a novel compiler-assisted technique, ISOS (Iteration-access-pattern-based Space Overlapping SPM management), for dynamic SPM management with DMA (Direct Memory Access). In ISOS, we combine both SPM and DMA for performance optimization by exploiting the chance to overlap SPM space so as to further utilize the limited SPM space and reduce the number of DMA operations. We implement our technique based on IMPACT and conduct experiments using a set of benchmarks from DSPstone and Mediabench on the cycle-accurate VLIW simulator of Trimaran. The experimental results show that our technique achieves run-time performance improvement compared with the previous work. The average improvements are 13.15, 19.05, and 25.52% when the SPM sizes are 1KB, 512 bytes, and 256 bytes, respectively. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Compiler-assisted dynamic scratch-pad memory management with space overlapping for embedded systems", "paper_id": "WOS:000290810300001"}