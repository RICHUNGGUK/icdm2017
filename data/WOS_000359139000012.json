{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "fault-based_testing_strategies"}, {"score": 0.015490639427762434, "phrase": "boolean_specifications"}, {"score": 0.01432329822571441, "phrase": "test_cases"}, {"score": 0.012858612081940075, "phrase": "boolean_expressions"}, {"score": 0.010007996278999693, "phrase": "testing_strategy"}, {"score": 0.007939434822325194, "phrase": "general_boolean_expressions"}, {"score": 0.0045599093158915326, "phrase": "great_amount"}, {"score": 0.004089475312474684, "phrase": "previous_studies"}, {"score": 0.0038727120021750973, "phrase": "disjunctive_normal_form"}, {"score": 0.0035249212996297363, "phrase": "general_boolean_specifications"}, {"score": 0.0031609252620168446, "phrase": "fault-seeded_boolean_expressions"}, {"score": 0.0028484940955893134, "phrase": "seeded_faults"}, {"score": 0.002806449337145999, "phrase": "small_number"}, {"score": 0.0025289662786567896, "phrase": "idnf"}, {"score": 0.002467038647952607, "phrase": "high_effectiveness"}, {"score": 0.002290186402614085, "phrase": "mumcut"}, {"score": 0.002234092591045251, "phrase": "best_performance"}, {"score": 0.002147180332779021, "phrase": "in-depth_understanding"}, {"score": 0.0021049977753042253, "phrase": "fault-based_testing"}], "paper_keywords": ["software testing", " Boolean specification", " test case generation", " fault-based testing"], "paper_abstract": "A great amount of fault-based testing strategies have been proposed to generate test cases for detecting certain types of faults in Boolean specifications. However, most of the previous studies on these strategies were focused on the Boolean expressions in the disjunctive normal form (DNF), even the irredundant DNF (IDNF)-little work has been conducted to comprehensively investigate their performance on general Boolean specifications. In this study, we conducted a series of experiments to evaluate and compare 18 fault-based testing strategies using over 4000 randomly generated fault-seeded Boolean expressions. In the experiments, a testing strategy is regarded as effective and efficient if it can detect most of the seeded faults using a small number of test cases. Our experimental results show that if a testing strategy is highly effective and efficient when testing the Boolean expressions in the IDNF, it also shows high effectiveness and efficiency on general Boolean expressions. It is found that one family of fault-based testing strategies, namely MUMCUT, normally deliver the best performance among all the 18 strategies. Our study provides an in-depth understanding and insight of fault-based testing for general Boolean expressions.", "paper_title": "Evaluating and Comparing Fault-Based Testing Strategies for General Boolean Specifications: A Series of Experiments", "paper_id": "WOS:000359139000012"}