{"auto_keywords": [{"score": 0.037562452888349473, "phrase": "gate"}, {"score": 0.00481495049065317, "phrase": "gate_simulations"}, {"score": 0.004482400730101345, "phrase": "processor_hours"}, {"score": 0.0044554426896168675, "phrase": "pet"}, {"score": 0.004395742407834023, "phrase": "realistic_results"}, {"score": 0.004310752197635499, "phrase": "classical_strategy"}, {"score": 0.004145649381700967, "phrase": "individual_events"}, {"score": 0.003986844722309844, "phrase": "positron_emission_tomography"}, {"score": 0.003735522846193052, "phrase": "centralized_coincidence_processing_and_large_communication_overheads"}, {"score": 0.003615845091983304, "phrase": "parallel_computational_model"}, {"score": 0.0034999880739789257, "phrase": "event_generation_and_coincidence_processing"}, {"score": 0.0034322572683276654, "phrase": "simple_and_efficient_way"}, {"score": 0.0033658327434624457, "phrase": "event_generation"}, {"score": 0.003236802914194731, "phrase": "centralized_event"}, {"score": 0.003194898129853895, "phrase": "time_coordinator"}, {"score": 0.002973904674745238, "phrase": "new_set"}, {"score": 0.002935393439834135, "phrase": "factory_classes"}, {"score": 0.0027862576750944277, "phrase": "sequential_or_parallel_mode"}, {"score": 0.0027323009127771525, "phrase": "mann-whitney_test"}, {"score": 0.0025934566395017446, "phrase": "parallel_model"}, {"score": 0.0023213398100616132, "phrase": "computational_performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ireland_ltd."}], "paper_keywords": ["GATE", " Geant4", " Parallel computing", " Monte Carlo simulations"], "paper_abstract": "GATE/Geant4 Monte Carlo simulations are computationally demanding applications, requiring thousands of processor hours to produce realistic results. The classical strategy of distributing the simulation of individual events does not apply efficiently for Positron Emission Tomography (PET) experiments, because it requires a centralized coincidence processing and large communication overheads. We propose a parallel computational model for GATE that handles event generation and coincidence processing in a simple and efficient way by decentralizing event generation and processing but maintaining a centralized event and time coordinator. The model is implemented with the inclusion of a new set of factory classes that can run the same executable in sequential or parallel mode. A Mann-Whitney test shows that the output produced by this parallel model in terms of number of tallies is equivalent (but not equal) to its sequential counterpart. Computational performance evaluation shows that the software is scalable and well balanced. (c) 2013 Elsevier Ireland Ltd. All rights reserved.", "paper_title": "A parallel computational model for GATE simulations", "paper_id": "WOS:000325750100030"}