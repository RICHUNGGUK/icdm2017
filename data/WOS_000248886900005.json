{"auto_keywords": [{"score": 0.050078487022614894, "phrase": "data_distributions"}, {"score": 0.049707293588616405, "phrase": "chapel"}, {"score": 0.004722038375317162, "phrase": "key_characteristic"}, {"score": 0.004685375117376838, "phrase": "today's_high_performance_computing_systems"}, {"score": 0.004506265705673849, "phrase": "efficient_management"}, {"score": 0.0043509032299218955, "phrase": "performance_enhancements"}, {"score": 0.004200874581076468, "phrase": "standard_technique"}, {"score": 0.004071846628708832, "phrase": "traditional_sequential_programming_languages"}, {"score": 0.004040211152784802, "phrase": "explicit_message-passing_libraries"}, {"score": 0.003977672712305348, "phrase": "processor-centric_model"}, {"score": 0.0034700069041302003, "phrase": "new_approach"}, {"score": 0.003443031148055198, "phrase": "locality_awareness"}, {"score": 0.0033502512757488433, "phrase": "high-productivity_languages"}, {"score": 0.0032727116186194584, "phrase": "abstract_specification"}, {"score": 0.0032094634756436595, "phrase": "large-scale_data_collections"}, {"score": 0.0031351720217878917, "phrase": "coarse-grain_parallel_computation"}, {"score": 0.0030506626796257077, "phrase": "high_level"}, {"score": 0.0029224275921964724, "phrase": "new_programming_language"}, {"score": 0.0027886573969044042, "phrase": "high-productivity_paradigm"}, {"score": 0.0027347383772384102, "phrase": "efficient_and_reusable_parallel_code"}, {"score": 0.002681859084438076, "phrase": "object-oriented_framework"}, {"score": 0.0026402908398883832, "phrase": "explicit_specification"}, {"score": 0.00253916011199984, "phrase": "memory_units"}, {"score": 0.0023946630984825207, "phrase": "sequential_and_parallel_iteration"}, {"score": 0.0023209828061385596, "phrase": "specialized_allocation_policies"}, {"score": 0.00228499525153, "phrase": "advanced_applications"}, {"score": 0.0022320551224679526, "phrase": "concise_high-productivity_programming_model"}, {"score": 0.002188874450946842, "phrase": "data_representation"}, {"score": 0.002129818297734379, "phrase": "allocation_policies"}, {"score": 0.0021049977753042253, "phrase": "data_structures"}], "paper_keywords": ["high productivity language", " chapel", " user-defined data distributions", " locality"], "paper_abstract": "A key characteristic of today's high performance computing systems is a physically distributed memory, which makes the efficient management of locality essential for taking advantage of the performance enhancements offered by these architectures. Currently, the standard technique for programming such systems involves the extension of traditional sequential programming languages with explicit message-passing libraries, in a processor-centric model for programming and execution. It is commonly understood that this programming paradigm results in complex, brittle, and error-prone programs, because of the way in which algorithms and communication are inextricably interwoven. This paper describes a new approach to locality awareness, which focuses on data distributions in high-productivity languages. Data distributions provide an abstract specification of the partitioning of large-scale data collections across memory units, supporting coarse-grain parallel computation and locality of access at a high level of abstraction. Our design, which is based on a new programming language called Chapel, is motivated by the need to provide a high-productivity paradigm for the development of efficient and reusable parallel code. We present an object-oriented framework that allows the explicit specification of the mapping of elements in a collection to memory units, the control of the arrangement of elements within such units, the definition of sequential and parallel iteration over collections, and the formulation of specialized allocation policies as required for advanced applications. The result is a concise high-productivity programming model that separates algorithms from data representation and enables reuse of distributions, allocation policies, and data structures.", "paper_title": "An approach to data distributions in Chapel", "paper_id": "WOS:000248886900005"}