{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "run-length_encoded_strings"}, {"score": 0.004081385289516914, "phrase": "longest_common_subsequence_metric"}, {"score": 0.003928572641266562, "phrase": "levenshtein_distance_metric"}, {"score": 0.00385431710959668, "phrase": "weighted_edit_distance_metric"}, {"score": 0.003245900020944865, "phrase": "weighted_edit_distance"}, {"score": 0.002912963877144772, "phrase": "path_problem"}, {"score": 0.002857849698346116, "phrase": "directed_acyclic_graph"}, {"score": 0.002750721367040336, "phrase": "maximum_paths"}, {"score": 0.002468450551616404, "phrase": "affine_gap_penalty_model"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["run-length encoding", " affine gap penalty", " similarity"], "paper_abstract": "The problem of computing the similarity of two run-length encoded strings has been studied for various scoring metrics. Many algorithms have been developed for the longest common subsequence metric and some algorithms for the Levenshtein distance metric and the weighted edit distance metric. In this paper we consider similarity based on the affine gap penalty metric which is a more general and rather complicated scoring metric than the weighted edit distance. To compute the similarity in this model efficiently, we convert the problem into a path problem on a directed acyclic graph and use some properties of maximum paths in this graph. We present an O(nm' + n'm) time algorithm for computing the similarity of two run-length encoded strings in the affine gap penalty model, where it and m are the lengths of given two strings whose run-length encoded lengths are n' and m', respectively. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Computing similarity of run-length encoded strings with affine gap penalty", "paper_id": "WOS:000257466600010"}