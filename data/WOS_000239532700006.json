{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "openmp_programming_interface"}, {"score": 0.00476697427418509, "phrase": "linux-based_smp_clusters"}, {"score": 0.004672444473700524, "phrase": "cluster_computing"}, {"score": 0.004556901872357751, "phrase": "cost-effective_solution"}, {"score": 0.004511485198940203, "phrase": "data-intensive_applications"}, {"score": 0.004184923476541484, "phrase": "mpich"}, {"score": 0.0041432067256981795, "phrase": "pvm"}, {"score": 0.004081430785737055, "phrase": "dsm"}, {"score": 0.0038624981944755813, "phrase": "programming_toolkits"}, {"score": 0.0037480753312398754, "phrase": "common_users"}, {"score": 0.0036921366375716005, "phrase": "parallel_applications"}, {"score": 0.0033231814056233103, "phrase": "teamster"}, {"score": 0.0031765314093444956, "phrase": "scheduling_option_called_profiled_multiprocessor_scheduling"}, {"score": 0.0030823667846259836, "phrase": "openmp_directive"}, {"score": 0.0029611289031152856, "phrase": "user_programs"}, {"score": 0.0029169007179202164, "phrase": "load_balance_mechanism"}, {"score": 0.002858952758523772, "phrase": "pms_algorithm"}, {"score": 0.0025219085140220773, "phrase": "cpu_speed"}, {"score": 0.0024842242921857705, "phrase": "processor_number"}, {"score": 0.00223570488212345, "phrase": "openmp_api"}, {"score": 0.0021369416775353107, "phrase": "performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "test_bed"}], "paper_keywords": ["linux-based SMP", " OpenMP", " software distributed shared memory", " Teamster", " profiled multiprocessor scheduling"], "paper_abstract": "Recently, cluster computing has successfully provided a cost-effective solution for data-intensive applications. In order to make the programming on clusters easy, many programming toolkits such as MPICH, PVM, and DSM have been proposed in past researches. However, these programming toolkits are not easy enough for common users to develop parallel applications. To address this problem, we have successfully implemented the OpenMP programming interface on a software distributed shared memory system called Teamster. On the other hand, we add a scheduling option called Profiled Multiprocessor Scheduling (PMS) into the OpenMP directive. When this option is selected in user programs, a load balance mechanism based on the PMS algorithm will be performed during the execution of the programs. This mechanism can automatically balance the workload among the execution nodes even when the CPU speed and the processor number of each node are not identical. In this paper, we will present the design and implementation of the OpenMP API on Teamster, and discuss the results of performance evaluation in the test bed.", "paper_title": "Design and implementation of the OpenMP programming interface on linux-based SMP clusters", "paper_id": "WOS:000239532700006"}