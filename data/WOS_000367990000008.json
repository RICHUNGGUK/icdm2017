{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "arc"}, {"score": 0.004723322467153553, "phrase": "fast_fpga_implementation"}, {"score": 0.004669180816745142, "phrase": "heap-based_priority_queue"}, {"score": 0.004633429997452688, "phrase": "image_coding"}, {"score": 0.004580314008293946, "phrase": "parallel_index-aware_tree"}, {"score": 0.004527804152066942, "phrase": "embedded_image_processing_systems"}, {"score": 0.004458722048888919, "phrase": "digital_cameras"}, {"score": 0.00442457549952546, "phrase": "tight_limits"}, {"score": 0.004081385289516914, "phrase": "efficient_image_coding"}, {"score": 0.003942544019605881, "phrase": "novel_heap-based_priority_queue_structure"}, {"score": 0.003882356585452982, "phrase": "adaptive_scanning_of_wavelet_data"}, {"score": 0.0037792227071149985, "phrase": "embedded_platform"}, {"score": 0.003750260412839128, "phrase": "aswd"}, {"score": 0.0037072310568610723, "phrase": "context_modeling_block"}, {"score": 0.0036646935906338414, "phrase": "priority_queues"}, {"score": 0.003622642432563435, "phrase": "wavelet-based_image"}, {"score": 0.0035536228914319354, "phrase": "wavelet_coefficients"}, {"score": 0.0035263833746562788, "phrase": "locally_stationary_sequences"}, {"score": 0.0034326732528567826, "phrase": "efficient_use"}, {"score": 0.0034063576796640603, "phrase": "fpga's_on-chip_dual-port_memories"}, {"score": 0.0033030907500120397, "phrase": "index-aware_system"}, {"score": 0.003154012038613403, "phrase": "queue_element"}, {"score": 0.0030232568024943455, "phrase": "aswd_algorithm"}, {"score": 0.0029203055813347874, "phrase": "intelligent_data_concatenation"}, {"score": 0.002897906501262407, "phrase": "queue_elements"}, {"score": 0.002842655426951218, "phrase": "effective_enhanced_memory_access"}, {"score": 0.0028100102841877835, "phrase": "memory_ports"}, {"score": 0.0027564303939865476, "phrase": "different_units"}, {"score": 0.002735284807307981, "phrase": "different_processing_phases"}, {"score": 0.0026421139329830755, "phrase": "memory_access"}, {"score": 0.002571841741339248, "phrase": "architectural_innovations"}, {"score": 0.0024842242921857705, "phrase": "efficient_hardware_implementations"}, {"score": 0.002465161736207254, "phrase": "generic_priority_queue"}, {"score": 0.002446245096967702, "phrase": "classical_sorting_applications"}, {"score": 0.002308910575113746, "phrase": "altera's_stratix_iv_fpga"}, {"score": 0.002282380944889266, "phrase": "ip_accelerator"}, {"score": 0.002256155453630723, "phrase": "nios_ii_processor"}, {"score": 0.0022388390432214415, "phrase": "system_on_chip"}], "paper_keywords": ["Design", " Experimentation", " Performance", " Image compression", " adaptive scanning", " priority queue", " heapsort", " system-on-chip", " embedded system", " FPGA"], "paper_abstract": "The embedded image processing systems like smartphones and digital cameras have tight limits on storage, computation power, network connectivity, and battery usage. These limitations make it important to ensure efficient image coding. In the article, we present a novel heap-based priority queue structure employed by an Adaptive Scanning of Wavelet Data scheme (ASWD) targeting an embedded platform. ASWD is a context modeling block implemented via priority queues in a wavelet-based image coder to reorganize the wavelet coefficients into locally stationary sequences. The architecture we propose exploits efficient use of FPGA's on-chip dual-port memories in an adaptive manner. Innovations of index-aware system linked to each element in the queue makes the location of queue element traceable in the heap as per the requirements of the ASWD algorithm. Moreover, use of 4-port memories along with intelligent data concatenation of queue elements yielded in a cost effective enhanced memory access. The memory ports are adaptively assigned to different units during different processing phases in a manner to optimally take advantage of memory access required by that phase. The architectural innovations can also be exploited in other applications that require efficient hardware implementations of generic priority queue or classical sorting applications which sort into the index. We designed and validated the hardware on an Altera's Stratix IV FPGA as an IP accelerator in a Nios II processor based System on Chip. We show that our architecture at 150MHz can provide 45X speedup compared to an embedded ARM Cortex-A9 processor at 666MHz targeting the throughput of 10MB/s.", "paper_title": "ARC 2014: Towards a Fast FPGA Implementation of a Heap-Based Priority Queue for Image Coding Using a Parallel Index-Aware Tree", "paper_id": "WOS:000367990000008"}