{"auto_keywords": [{"score": 0.004562362497952548, "phrase": "commonly_used_compression_scheme"}, {"score": 0.00429715240295033, "phrase": "lower_and_upper_bounds"}, {"score": 0.003857871979942733, "phrase": "k-mismatch_problem"}, {"score": 0.0038119123317396954, "phrase": "run-length_compressed_inputs"}, {"score": 0.0031845067058084583, "phrase": "inplace_algorithm"}, {"score": 0.002597012212823168, "phrase": "stronger_barrier"}, {"score": 0.002445767214680791, "phrase": "running_time"}, {"score": 0.002262209824105154, "phrase": "two-dimensional_setting"}, {"score": 0.0021821915946356168, "phrase": "space_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Compressed pattern matching", " Run-length encoding", " Sequence comparison"], "paper_abstract": "In this paper, we consider a commonly used compression scheme called run-length encoding. We provide both lower and upper bounds for the problems of comparing two run-length encoded strings. Specifically, we prove the 3sum-hardness for both the wildcard matching problem and the k-mismatch problem with run-length compressed inputs. Given two run-length encoded strings of m and n runs, such a result implies that it is very unlikely to devise an o(mn)-time algorithm for either of them. We then present an inplace algorithm running in O(mn log m) time for their combined problem, i.e. k-mismatch with wildcards. We further demonstrate that if the aim is to report the positions of all the occurrences, there exists a stronger barrier of Omega (mn log m)time, matching the running time of our algorithm. Moreover, our algorithm can be easily generalized to a two-dimensional setting without impairing the time and space complexity. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Hardness of comparing two run-length encoded strings", "paper_id": "WOS:000280930500003"}