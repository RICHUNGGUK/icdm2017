{"auto_keywords": [{"score": 0.026714131394464994, "phrase": "coq"}, {"score": 0.004816408414349058, "phrase": "theorems"}, {"score": 0.004754600386388821, "phrase": "mechanized_proof_assistants"}, {"score": 0.00469500313566324, "phrase": "powerful_verification_tools"}, {"score": 0.0046069985410261746, "phrase": "proof_development"}, {"score": 0.004217537792708984, "phrase": "related_programs"}, {"score": 0.004009894739765119, "phrase": "proof_reuse"}, {"score": 0.0037409118365761894, "phrase": "product_lines"}, {"score": 0.003579179502431823, "phrase": "feature_modules"}, {"score": 0.003467940281748612, "phrase": "proof_fragments"}, {"score": 0.003297080148944292, "phrase": "complete_proof"}, {"score": 0.003095257144856771, "phrase": "product_line"}, {"score": 0.00305639530600272, "phrase": "programming_languages"}, {"score": 0.0029427043216782604, "phrase": "metatheory_proofs"}, {"score": 0.0026935568995690947, "phrase": "coq_proof_assistant"}, {"score": 0.0023887436047824386, "phrase": "language_variant"}, {"score": 0.0022709326810964386, "phrase": "composite_proofs"}, {"score": 0.0021317885325570604, "phrase": "core_calculus"}, {"score": 0.002105055919472218, "phrase": "java"}], "paper_keywords": ["Design", " Theory", " Verification", " Feature-Orientation", " Mechanized Metatheory", " Product Line Verification"], "paper_abstract": "Mechanized proof assistants are powerful verification tools, but proof development can be difficult and time-consuming. When verifying a family of related programs, the effort can be reduced by proof reuse. In this paper, we show how to engineer product lines with theorems and proofs built from feature modules. Each module contains proof fragments which are composed together to build a complete proof of correctness for each product. We consider a product line of programming languages, where each variant includes metatheory proofs verifying the correctness of its semantic definitions. This approach has been realized in the Coq proof assistant, with the proofs of each feature independently certifiable by Coq. These proofs are composed for each language variant, with Coq mechanically verifying that the composite proofs are correct. As validation, we formalize a core calculus for Java in Coq which can be extended with any combination of casts, interfaces, or generics.", "paper_title": "Product Lines of Theorems", "paper_id": "WOS:000298294500036"}