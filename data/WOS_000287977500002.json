{"auto_keywords": [{"score": 0.03315467897128238, "phrase": "smodels"}, {"score": 0.00481495049065317, "phrase": "sat_and_sat_modulo_theories"}, {"score": 0.0046269981365987915, "phrase": "abstract_davis-putnam-logemann-loveland_procedure"}, {"score": 0.003829290275367182, "phrase": "davis-putnam-logemann-loveland_algorithm"}, {"score": 0.003753738096719609, "phrase": "transition_systems"}, {"score": 0.0034317185678527672, "phrase": "similar_framework"}, {"score": 0.003264872488939969, "phrase": "answer_sets"}, {"score": 0.0032004205378150354, "phrase": "logic_programs"}, {"score": 0.0021049977753042253, "phrase": "new_systems"}], "paper_keywords": ["answer set programming", " inference", " learning"], "paper_abstract": "Nieuwenhuis et al. (2006. Solving SAT and SAT modulo theories: From an abstract Davis-Putnam-Logemann-Loveland procedure to DPLL(T). Journal of the ACM 53(6), 937977 showed how to describe enhancements of the Davis-Putnam-Logemann-Loveland algorithm using transition systems, instead of pseudocode. We design a similar framework for several algorithms that generate answer sets for logic programs: SMODELS, SMODELScc, asp-sat with Learning (CMODELS), and a newly designed and implemented algorithm sup. This approach to describe answer set solvers makes it easier to prove their correctness, to compare them, and to design new systems.", "paper_title": "Abstract answer set solvers with backjumping and learning", "paper_id": "WOS:000287977500002"}