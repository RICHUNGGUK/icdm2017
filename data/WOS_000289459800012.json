{"auto_keywords": [{"score": 0.036229190503611196, "phrase": "clp"}, {"score": 0.00481495049065317, "phrase": "email_feature_interactions"}, {"score": 0.004303830426772906, "phrase": "internet_applications"}, {"score": 0.0041316803676012155, "phrase": "undesired_behaviours"}, {"score": 0.003807684498435389, "phrase": "feature_interaction"}, {"score": 0.003509006038574667, "phrase": "constraint_logic_programming"}, {"score": 0.003010496595090984, "phrase": "non-monotonic_system"}, {"score": 0.0027459678326877744, "phrase": "predicate_negation"}, {"score": 0.002556359086441866, "phrase": "email_basic_services"}, {"score": 0.002479150189700726, "phrase": "ten_most_widely_used_email_features"}, {"score": 0.002261204313587616, "phrase": "model_checking"}, {"score": 0.0022154296909169826, "phrase": "fi_resolution"}, {"score": 0.0021049977753042253, "phrase": "priority_and_tail_elimination_strategies"}], "paper_keywords": [""], "paper_abstract": "The introduction and modification of features in Internet applications may result in undesired behaviours, and this effect is known as feature interaction (FI). We advocate that constraint logic programming (CLP) is suitable enough to detect and resolve FIs, within a non-monotonic system modelled in layers, with interfaces defined by predicate negation. We illustrate the specification of Email basic services and the ten most widely used Email features. CLP provides mechanisms to detect FIs through model checking. FI resolution is implemented above following priority and tail elimination strategies.", "paper_title": "Detecting and resolving email feature interactions through constraints", "paper_id": "WOS:000289459800012"}