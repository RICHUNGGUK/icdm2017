{"auto_keywords": [{"score": 0.049440303515783074, "phrase": "rtm"}, {"score": 0.035670276706417994, "phrase": "wave_fields"}, {"score": 0.004782718554230406, "phrase": "gpgpu._reverse_time_migration"}, {"score": 0.004687305496643216, "phrase": "powerful_seismic_imaging_method"}, {"score": 0.004578382275810468, "phrase": "subsalt_regions"}, {"score": 0.004471978831302331, "phrase": "rim_method"}, {"score": 0.004295269532032448, "phrase": "fast_and_computationally_inexpensive_implementation"}, {"score": 0.004223708778943785, "phrase": "nvidia_general_purpose_graphic_processing_unit"}, {"score": 0.004195437338703506, "phrase": "gpgpu"}, {"score": 0.004139401327448803, "phrase": "compute_unified_device_architecture"}, {"score": 0.003975781274672803, "phrase": "random_velocity_boundary"}, {"score": 0.003935892934907777, "phrase": "source_propagation_kernel"}, {"score": 0.0038702962539127867, "phrase": "random_velocity_layer"}, {"score": 0.003767599364361092, "phrase": "bottom_boundaries"}, {"score": 0.0036676174658755683, "phrase": "boundary_regions"}, {"score": 0.003558294449586273, "phrase": "random_layers"}, {"score": 0.0035344448639851827, "phrase": "minimal_coherent_correlation"}, {"score": 0.003498968822873231, "phrase": "reverse_direction"}, {"score": 0.0032606254499607692, "phrase": "gpu"}, {"score": 0.003216804708106142, "phrase": "limited_bandwidth"}, {"score": 0.002888488567436329, "phrase": "insertion_kernels"}, {"score": 0.002755567647101251, "phrase": "gpu's_memory"}, {"score": 0.0027278879752324157, "phrase": "modeling_kernel"}, {"score": 0.0026914126067254444, "phrase": "micikevicius's_tiling_method"}, {"score": 0.0026554236621262515, "phrase": "shared_memory"}, {"score": 0.002628747284714371, "phrase": "bandwidth_usage"}, {"score": 0.002558909812664716, "phrase": "imaging_kernel"}, {"score": 0.002507748938616919, "phrase": "tiling_method"}, {"score": 0.0023603078194781965, "phrase": "receiver_modeling_kernel_occupancy"}, {"score": 0.0023131084326717755, "phrase": "imaging_kernel_occupancy"}, {"score": 0.0022290085428279846, "phrase": "good_level"}, {"score": 0.0021917966722180132, "phrase": "salt_model_test"}, {"score": 0.0021697677572213086, "phrase": "correct_and_effective_implementation"}, {"score": 0.0021479597698614355, "phrase": "cpu_rim_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Reverse time migration", " CUDA", " Random boundary condition", " Shared memory"], "paper_abstract": "Reverse time migration (RTM) is a powerful seismic imaging method for the interpretation of steep-dips and subsalt regions; however, implementation of the RIM method is computationally expensive. In this paper, we present a fast and computationally inexpensive implementation of RTM using a NVIDIA general purpose graphic processing unit (GPGPU) powered with Compute Unified Device Architecture (CUDA). To accomplish this, we introduced a random velocity boundary in the source propagation kernel. By creating a random velocity layer at the left, right, and bottom boundaries, the wave fields that encounter the boundary regions are pseudo-randomized. Reflections off the random layers have minimal coherent correlation in the reverse direction. This process eliminates the need to write the wave fields to a disk, which is important when using a GPU because of the limited bandwidth of the PCI-E that is connected to the CPU and GPU. There are four CPU kernels in the code: shot, receiver, modeling, and imaging. The shot and receiver insertion kernels are simple and are computed using a CPU because the wave fields reside in GPU's memory. The modeling kernel is computed using Micikevicius's tiling method, which uses shared memory to improve bandwidth usage in 2D and 3D finite difference problems. In the imaging kernel, we also use this tiling method. A Tesla C2050 CPU with 4 GB memory and 480 stream processing units was used to test the code. The shot and receiver modeling kernel occupancy achieved 85%, and the imaging kernel occupancy was 100%. This means that the code achieved a good level of optimization. A salt model test verified the correct and effective implementation of the CPU RIM code. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "3D seismic reverse time migration on GPGPU", "paper_id": "WOS:000323401000003"}