{"auto_keywords": [{"score": 0.04702287152380103, "phrase": "cycle_collection_phase"}, {"score": 0.04439952284800597, "phrase": "counting_algorithms"}, {"score": 0.00481495049065317, "phrase": "typed_reference_fields"}, {"score": 0.004757643419056999, "phrase": "reference_counting_strategy"}, {"score": 0.004672953146379813, "phrase": "natural_choice"}, {"score": 0.004617328272121826, "phrase": "real-time_garbage_collection"}, {"score": 0.0041703614123283165, "phrase": "heavy_scanning_overheads"}, {"score": 0.003951453722517865, "phrase": "pause_time"}, {"score": 0.0038810583785936505, "phrase": "garbage_collection"}, {"score": 0.003361069456060196, "phrase": "better_use"}, {"score": 0.0031465436619697385, "phrase": "novel_classification_model"}, {"score": 0.0028586409810976367, "phrase": "scanning_overheads"}, {"score": 0.002741091312632307, "phrase": "cyclic_reference"}, {"score": 0.0026760974046034854, "phrase": "strongly-typed_reference_features"}, {"score": 0.0025202582748972122, "phrase": "jikes_rvm"}, {"score": 0.0023171750718791713, "phrase": "scanned_objects"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Java", " Garbage collection", " Reference counting", " Memory management"], "paper_abstract": "Reference counting strategy is a natural choice for real-time garbage collection, but the cycle collection phase which is required to ensure the correctness for reference counting algorithms can introduce heavy scanning overheads. This degrades the efficiency and inflates the pause time required for garbage collection. In this paper, we present two schemes to improve the efficiency of reference counting algorithms. First, in order to make better use of the semantics of a given program, we introduce a novel classification model to predict the behavior of objects precisely. Second, in order to reduce the scanning overheads, we propose an enhancement for cyclic reference counting algorithms by utilizing strongly-typed reference features of the Java language. We implement our proposed algorithm in Jikes RVM and measure the performance over various Java benchmarks. Our results show that the number of scanned objects can be reduced by an average of 37.9% during cycle collection phase. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Cyclic reference counting by typed reference fields", "paper_id": "WOS:000299067600007"}