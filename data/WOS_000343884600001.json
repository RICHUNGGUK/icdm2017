{"auto_keywords": [{"score": 0.036625523625658414, "phrase": "vetdroid"}, {"score": 0.015606453716004115, "phrase": "android_apps"}, {"score": 0.008713768692145006, "phrase": "undesirable_behaviors"}, {"score": 0.006726939317465512, "phrase": "android"}, {"score": 0.0057707583807024955, "phrase": "permission_use_behaviors"}, {"score": 0.0047277417909824745, "phrase": "android_platform"}, {"score": 0.004642105253191792, "phrase": "sensitive_resources"}, {"score": 0.004608284537368354, "phrase": "untrusted_apps"}, {"score": 0.0044846003363891275, "phrase": "taintdroid"}, {"score": 0.0041445748748895365, "phrase": "recent_years"}, {"score": 0.003981106369547929, "phrase": "important_part"}, {"score": 0.0038946650372062783, "phrase": "accurate_analysis"}, {"score": 0.003810093416457147, "phrase": "traditional_syscall-based_analysis_techniques"}, {"score": 0.0036198068824262464, "phrase": "critical_interactions"}, {"score": 0.003541182515693916, "phrase": "android_system"}, {"score": 0.00336428077531883, "phrase": "sensitive_behaviors"}, {"score": 0.003291188255149539, "phrase": "novel_permission_use_perspective"}, {"score": 0.0032314884215434857, "phrase": "systematic_permission_use_analysis_technique"}, {"score": 0.0030143100083252516, "phrase": "acquired_permission-sensitive_resources"}, {"score": 0.002895291306821514, "phrase": "security_analysts"}, {"score": 0.00284275228258112, "phrase": "internal_sensitive_behaviors"}, {"score": 0.002780958897911242, "phrase": "real-world_android_malware"}, {"score": 0.002690771424958613, "phrase": "fine-grained_malicious_behaviors"}, {"score": 0.002565654875989818, "phrase": "google"}, {"score": 0.002265095354846931, "phrase": "fine-grained_causes"}, {"score": 0.0021049977753042253, "phrase": "subtle_vulnerabilities"}], "paper_keywords": ["Android security", " permission use analysis", " vetting undesirable behaviors", " android behavior representation"], "paper_abstract": "The android platform adopts permissions to protect sensitive resources from untrusted apps. However, after permissions are granted by users at install time, apps could use these permissions (sensitive resources) with no further restrictions. Thus, recent years have witnessed the explosion of undesirable behaviors in Android apps. An important part in the defense is the accurate analysis of Android apps. However, traditional syscall-based analysis techniques are not well-suited for Android, because they could not capture critical interactions between the application and the Android system. This paper presents VetDroid, a dynamic analysis platform for generally analyzing sensitive behaviors in Android apps from a novel permission use perspective. VetDroid proposes a systematic permission use analysis technique to effectively construct permission use behaviors, i.e., how applications use permissions to access (sensitive) system resources, and how these acquired permission-sensitive resources are further utilized by the application. With permission use behaviors, security analysts can easily examine the internal sensitive behaviors of an app. Using real-world Android malware, we show that VetDroid can clearly reconstruct fine-grained malicious behaviors to ease malware analysis. We further apply VetDroid to 1249 top free apps in Google Play. VetDroid can assist in finding more information leaks than TaintDroid, a state-of-the-art technique. In addition, we show how we can use VetDroid to analyze fine-grained causes of information leaks that TaintDroid cannot reveal. Finally, we show that VetDroid can help to identify subtle vulnerabilities in some (top free) applications otherwise hard to detect.", "paper_title": "Permission Use Analysis for Vetting Undesirable Behaviors in Android Apps", "paper_id": "WOS:000343884600001"}