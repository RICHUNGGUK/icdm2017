{"auto_keywords": [{"score": 0.049407782669650464, "phrase": "frame_pointer"}, {"score": 0.010620178643250353, "phrase": "return_addresses"}, {"score": 0.009228154915290488, "phrase": "overwrite_attacks"}, {"score": 0.00836285789788034, "phrase": "saved_frame_pointers"}, {"score": 0.00481495049065317, "phrase": "effective_defence"}, {"score": 0.004518442937844318, "phrase": "buffer_overflow_attack"}, {"score": 0.0042102651938187114, "phrase": "defense_methods"}, {"score": 0.0034299649219748513, "phrase": "hardware_modification_methods"}, {"score": 0.0031732652552570644, "phrase": "memory_stack"}, {"score": 0.0029357204796552653, "phrase": "previous_methods"}, {"score": 0.0023408288327263316, "phrase": "new_reliable_hardware_stack"}, {"score": 0.0021049977753042253, "phrase": "proposed_method"}], "paper_keywords": ["computer security", " buffer overflow attack", " computer architecture"], "paper_abstract": "Currently, a buffer overflow attack is one of the most serious and widely utilized assaults in computer systems. Defense methods against this attack can be classified as three: compiler modification, system software modification, and hardware modification. Among them, most of the cases, hardware modification methods aim at detecting or tolerating alternation of return addresses in the memory stack. However, to the best of our knowledge, the previous methods cannot defend against frame pointer overwrite attacks, where an adversary can control the execution at his/her will by modifying the saved frame pointers in the stack. In this paper, we present a new reliable hardware stack to detect alternation of saved frame pointers as well as return addresses. We show that the proposed method can defend against both frame pointer overwrite attacks and stack smashing attacks.", "paper_title": "Hardware stack design: Towards an effective defence against frame pointer overwrite attacks", "paper_id": "WOS:000241630900019"}