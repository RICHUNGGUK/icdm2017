{"auto_keywords": [{"score": 0.046827692927246055, "phrase": "xss_vulnerabilities"}, {"score": 0.045395892466405637, "phrase": "web_applications"}, {"score": 0.038841658876263396, "phrase": "noncespaces"}, {"score": 0.03823852777286603, "phrase": "web_application"}, {"score": 0.00481495049065317, "phrase": "cross-site_scripting_attacks"}, {"score": 0.004252469672259375, "phrase": "user_input"}, {"score": 0.004007083686875716, "phrase": "web_clients"}, {"score": 0.003158776195052182, "phrase": "random_mapping"}, {"score": 0.0030414140732789186, "phrase": "trusted_content"}, {"score": 0.002944284514509205, "phrase": "untrusted_content"}, {"score": 0.002789226820897593, "phrase": "minimal_changes"}, {"score": 0.002685558057339722, "phrase": "popular_web_application_architecture"}, {"score": 0.002599763359352916, "phrase": "static_content"}, {"score": 0.0025440911575156755, "phrase": "popular_php_template_engine"}, {"score": 0.0024761702541879213, "phrase": "policy_language"}, {"score": 0.0023970487263732737, "phrase": "training_mode"}, {"score": 0.00235843888868088, "phrase": "policy_development"}, {"score": 0.0023079225317714815, "phrase": "extensive_security_testing"}, {"score": 0.002270745003370529, "phrase": "generated_policy"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Security", " Defense", " Cross-site scripting", " Client-side policy enforcement", " Information flow tracking", " Web application", " World wide web"], "paper_abstract": "Cross-site scripting (XSS) vulnerabilities are among the most common and serious web application vulnerabilities. It is challenging to eliminate XSS vulnerabilities because it is difficult for web applications to sanitize all user input appropriately. We present Noncespaces, a technique that enables web clients to distinguish between trusted and untrusted content to prevent exploitation of XSS vulnerabilities. Using Noncespaces, a web application randomizes the the (X)HTML tags and attributes in each document before delivering it to the client. As long as the attacker is unable to guess the random mapping, the client can distinguish between trusted content created by the web application and untrusted content provided by an attacker. To implement Noncespaces with minimal changes to web applications, we leverage a popular web application architecture to automatically apply Noncespaces to static content processed through a popular PHP template engine. We design a policy language for Noncespaces, implement a training mode to assist policy development, and conduct extensive security testing of a generated policy for two large web applications to show the effectiveness of our technique. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Noncespaces: Using randomization to defeat cross-site scripting attacks", "paper_id": "WOS:000304842100016"}