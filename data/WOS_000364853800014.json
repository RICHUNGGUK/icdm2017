{"auto_keywords": [{"score": 0.04860000689752461, "phrase": "pcm"}, {"score": 0.005476990908768182, "phrase": "cached_updates"}, {"score": 0.00481495049065317, "phrase": "optimizing_transaction_logging"}, {"score": 0.004764859786310636, "phrase": "recovery_performance"}, {"score": 0.0047152877145889656, "phrase": "pcm._phase-change_memory"}, {"score": 0.0042692243768616455, "phrase": "byte_addressability"}, {"score": 0.004224786847720058, "phrase": "bit_alterability"}, {"score": 0.0041589926969138585, "phrase": "low_idle_energy_consumption"}, {"score": 0.003946960862020283, "phrase": "database_community"}, {"score": 0.0038450179181069833, "phrase": "transaction_performance"}, {"score": 0.0037261429556468217, "phrase": "existing_work"}, {"score": 0.0032861588691414667, "phrase": "disk-based_databases"}, {"score": 0.003069867656852932, "phrase": "implicit_log"}, {"score": 0.002974886152979993, "phrase": "database_recovery"}, {"score": 0.0028527866590859967, "phrase": "pcmlogging"}, {"score": 0.002823050755743821, "phrase": "simplified_recovery"}, {"score": 0.0027790254309734428, "phrase": "pcm_lifetime"}, {"score": 0.002637160140011997, "phrase": "wear-leveling_algorithm"}, {"score": 0.0025555322596460036, "phrase": "write_traffic"}, {"score": 0.0025156683465194967, "phrase": "pcm_storage_space"}, {"score": 0.002362320344521919, "phrase": "cached_data"}, {"score": 0.0023133055945761235, "phrase": "external_storage"}, {"score": 0.0022653055209664284, "phrase": "classical_write-ahead_logging"}, {"score": 0.0022416823572360017, "phrase": "wal"}, {"score": 0.0021049977753042253, "phrase": "system_throughput"}], "paper_keywords": ["Phase-change memory", " database recovery", " caching", " performance"], "paper_abstract": "Phase-change memory (PCM), as one of the most promising next-generation memory technologies, offers various attractive properties such as non-volatility, byte addressability, bit alterability, and low idle energy consumption. Recently, PCM has drawn much attention from the database community for optimizing query and transaction performance. As a complement to existing work, we present PCMLogging, a novel logging scheme that exploits PCM for both data caching and transaction logging to minimize I/O accesses in disk-based databases. Specifically, PCMLogging caches dirty pages/records in PCM and further maintains an implicit log in the cached updates to support database recovery. By integrating log and cached updates, PCMLogging enables simplified recovery and prolongs PCM lifetime. Furthermore, using PCMLogging, we develop a wear-leveling algorithm, that evenly distributes the write traffic across the PCM storage space, and a cost-based destaging algorithm that adaptively migrates cached data from PCM to external storage. Compared to classical write-ahead logging (WAL), our trace-driven simulation results reveal up to 1 similar to 20X improvement in system throughput.", "paper_title": "PCMLogging: Optimizing Transaction Logging and Recovery Performance with PCM", "paper_id": "WOS:000364853800014"}