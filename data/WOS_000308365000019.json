{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "javascript"}, {"score": 0.01496749931939611, "phrase": "prolog"}, {"score": 0.004172360444377281, "phrase": "client_side"}, {"score": 0.004126623209579942, "phrase": "web_applications"}, {"score": 0.004014452814186653, "phrase": "current_industry_standards"}, {"score": 0.003841263262252044, "phrase": "virtually_every_modern_computing_device"}, {"score": 0.003778253716938922, "phrase": "additional_software_requirements"}, {"score": 0.0032376465741070274, "phrase": "back_end"}, {"score": 0.0031845067058084583, "phrase": "ciao_system"}, {"score": 0.0028360962841331634, "phrase": "compilation_process"}, {"score": 0.002789528662623221, "phrase": "detailed_description"}, {"score": 0.0027437235598539904, "phrase": "run-time_system"}, {"score": 0.0026543514413663893, "phrase": "modular_compilation"}, {"score": 0.0026252106881752067, "phrase": "separate_javascript_code"}, {"score": 0.0024434201175883674, "phrase": "complex_code"}, {"score": 0.0023249757987087033, "phrase": "attributed_variables"}, {"score": 0.0021049977753042253, "phrase": "major_javascript_engines"}], "paper_keywords": ["Prolog", " Ciao", " logic programming system", " implementation of Prolog", " modules", " JavaScript", " web"], "paper_abstract": "We present and evaluate a compiler from Prolog (and extensions) to JavaScript which makes it possible to use (constraint) logic programming to develop the client side of web applications while being compliant with current industry standards. Targeting JavaScript makes (C) LP programs executable in virtually every modern computing device with no additional software requirements from the point of view of the user. In turn, the use of a very high-level language facilitates the development of high-quality, complex software. The compiler is a back end of the Ciao system and supports most of its features, including its module system and its rich language extension mechanism based on packages. We present an overview of the compilation process and a detailed description of the run-time system, including the support for modular compilation into separate JavaScript code. We demonstrate the maturity of the compiler by testing it with complex code such as a CLP(FD) library written in Prolog with attributed variables. Finally, we validate our proposal by measuring the performance of some LP and CLP(FD) benchmarks running on top of major JavaScript engines.", "paper_title": "Lightweight compilation of (C)LP to JavaScript", "paper_id": "WOS:000308365000019"}