{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dependent_pattern_matching"}, {"score": 0.004426882270402403, "phrase": "reduction-preserving_translation"}, {"score": 0.004304574865291508, "phrase": "coquand's_dependent_pattern"}, {"score": 0.0039024014688338964, "phrase": "traditional_type_theory"}, {"score": 0.0035376693476114733, "phrase": "inductive_types"}, {"score": 0.0026722904884984348, "phrase": "structurally_recursive_pattern_matching_programs"}, {"score": 0.0025264171945423254, "phrase": "implementable_compilation_technique"}, {"score": 0.0023551955270737215, "phrase": "functional_programming_languages"}], "paper_keywords": [""], "paper_abstract": "This paper gives a reduction-preserving translation from Coquand's dependent pattern matching [4] into a traditional type theory [11] with universes, inductive types and relations and the axiom K [22]. This translation serves as a proof of termination for structurally recursive pattern matching programs, provides an implementable compilation technique in the style of functional programming languages, and demonstrates the equivalence with a more easily understood type theory.", "paper_title": "Eliminating dependent pattern matching", "paper_id": "WOS:000239518200027"}