{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "irregular_scientific_codes"}, {"score": 0.009524694865678618, "phrase": "dense_inputs"}, {"score": 0.004717723626157272, "phrase": "poor_cache_performance"}, {"score": 0.0042819270655224916, "phrase": "geometric_structures"}, {"score": 0.004216880725292, "phrase": "data_access_patterns"}, {"score": 0.004174064076143015, "phrase": "computation_structures"}, {"score": 0.003986684503518077, "phrase": "graph_structure"}, {"score": 0.003946195919158241, "phrase": "data_accesses"}, {"score": 0.0038862297330905836, "phrase": "hierarchical_clustering"}, {"score": 0.0038467574225322086, "phrase": "quality_partitions"}, {"score": 0.0037307208089736835, "phrase": "multiple_neighbor_nodes"}, {"score": 0.0036181717017041387, "phrase": "high_degree"}, {"score": 0.003403122817578447, "phrase": "multiple_nodes"}, {"score": 0.0030726480920918097, "phrase": "index_arrays"}, {"score": 0.0029951555610569225, "phrase": "corresponding_computations"}, {"score": 0.002964706925144123, "phrase": "z-curve_order"}, {"score": 0.0024918548761791435, "phrase": "locality_optimization_techniques"}, {"score": 0.0024289743270061157, "phrase": "sequential_and_parallelized_codes"}, {"score": 0.0023435920614377306, "phrase": "gpart"}, {"score": 0.0021049977753042253, "phrase": "performance_improvement"}], "paper_keywords": ["compiler optimization", " cache memories", " inspector/executor", " data reordering", " computation reordering"], "paper_abstract": "Irregular scientific codes experience poor cache performance due to their irregular memory access patterns. In this paper, we present two new locality improving techniques for irregular scientific codes. Our techniques exploit geometric structures hidden in data access patterns and computation structures. Our new data reordering (GPART) finds the graph structure within data accesses and applies hierarchical clustering. Quality partitions are constructed quickly by clustering multiple neighbor nodes with priority on nodes with high degree and repeating a few passes. Overhead is kept low by clustering multiple nodes in each pass and considering only edges between partitions. Our new computation reordering (Z-SORT) treats the values of index arrays as coordinates and reorders corresponding computations in Z-curve order. Applied to dense inputs, Z-SORT achieves performance close to data reordering combined with other computation reordering but without the overhead involved in data reordering. Experiments on irregular scientific codes for a variety of meshes show locality optimization techniques are effective for both sequential and parallelized codes, improving performance by 60-87 percent. GPART achieved within 1-2 percent of the performance of more sophisticated partitioning algorithms, but with one third of the overhead. Z-SORT also yields the performance improvement of 64 percent for dense inputs, which is comparable with data reordering combined with computation reordering.", "paper_title": "Exploiting locality for irregular scientific codes", "paper_id": "WOS:000237786100002"}