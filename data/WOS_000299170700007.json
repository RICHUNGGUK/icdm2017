{"auto_keywords": [{"score": 0.04428815049400913, "phrase": "interesting_orders"}, {"score": 0.004700468701207975, "phrase": "important_role"}, {"score": 0.004662913362513954, "phrase": "query_evaluation"}, {"score": 0.0041842092128678105, "phrase": "query_optimizers"}, {"score": 0.003955593400628455, "phrase": "ordered_output"}, {"score": 0.0037847308929559163, "phrase": "globally_optimal_plan"}, {"score": 0.0035067452724203124, "phrase": "optimizer_implementations"}, {"score": 0.0031337465656628132, "phrase": "query-covering_indices"}, {"score": 0.003083793024782014, "phrase": "multiple_alternative_sort_orders"}, {"score": 0.002868646843975439, "phrase": "even_a_simplified_version"}, {"score": 0.0028118729422008364, "phrase": "np"}, {"score": 0.002711714675297321, "phrase": "special_case"}, {"score": 0.002625914195439153, "phrase": "principled_heuristics"}, {"score": 0.0025944417620244924, "phrase": "general_case"}, {"score": 0.002502264043067568, "phrase": "proposed_techniques"}, {"score": 0.002472269923319476, "phrase": "volcano-style_cost-based_optimizer"}, {"score": 0.0024036710362692042, "phrase": "significant_improvements"}, {"score": 0.002384422461262006, "phrase": "estimated_cost"}, {"score": 0.002308953751676031, "phrase": "widely_used_commercial_database_system"}, {"score": 0.0022268964676199292, "phrase": "actual_execution_times"}], "paper_keywords": ["Query optimization", " Sort orders"], "paper_abstract": "Sort orders play an important role in query evaluation. Algorithms that rely on sorting are widely used to implement joins, grouping, duplicate elimination and other set operations. The notion of interesting orders has allowed query optimizers to consider plans that could be locally sub-optimal, but produce ordered output beneficial for other operators, and thus be part of a globally optimal plan. However, the number of interesting orders for most operators is factorial in the number of attributes involved. Optimizer implementations use heuristics to prune the number of interesting orders, but the quality of the heuristics is unclear. Increasingly complex decision support queries and increasing use of query-covering indices, which provide multiple alternative sort orders for relations, motivate us to better address the problem of choosing interesting orders. We show that even a simplified version of the problem is NP-hard and provide a 1/2-benefit approximation algorithm for a special case of the problem. We then present principled heuristics for the general case of choosing interesting orders. We have implemented the proposed techniques in a Volcano-style cost-based optimizer, and our performance study shows significant improvements in estimated cost. We also executed our plans on a widely used commercial database system, and on PostgreSQL, and found that actual execution times for our plans were significantly better than for plans generated by those systems in several cases.", "paper_title": "Which sort orders are interesting?", "paper_id": "WOS:000299170700007"}