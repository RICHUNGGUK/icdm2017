{"auto_keywords": [{"score": 0.03980660064735845, "phrase": "system_fairness"}, {"score": 0.029628979287270645, "phrase": "fps"}, {"score": 0.00481495049065317, "phrase": "shared-memory_multiprocessors"}, {"score": 0.0047113960612140335, "phrase": "shared_memory_resources"}, {"score": 0.0045850648862091085, "phrase": "dominant_cause"}, {"score": 0.004203030435498069, "phrase": "quality_of_service"}, {"score": 0.0038948525410795517, "phrase": "fair-progress_process"}, {"score": 0.0036288825833675127, "phrase": "equally-weighted_applications"}, {"score": 0.003048782877550259, "phrase": "better_parity"}, {"score": 0.0028715299874549245, "phrase": "different_weights"}, {"score": 0.0028404241985421096, "phrase": "evaluation_results"}, {"score": 0.002646267286675984, "phrase": "slight_loss"}, {"score": 0.00251966141432339, "phrase": "performance_information"}, {"score": 0.0024386325347607674, "phrase": "process_scheduling"}, {"score": 0.0022718774783143203, "phrase": "previous_runs"}, {"score": 0.0021396960731214203, "phrase": "training_periods"}, {"score": 0.0021049977753042253, "phrase": "fps._throughput"}], "paper_keywords": ["Cross-run optimization", " memory bandwidth", " process scheduling", " performance fairness"], "paper_abstract": "Competition for shared memory resources on multiprocessors is the dominant cause for slowing down applications and making their performance varies unpredictably. It exacerbates the need for Quality of Service (QoS) on such systems. In this paper, we propose a fair-progress process scheduling (FPS) policy to improve system fairness. The strategy is to force the equally-weighted applications to bear the same amount of slowdown when they run concurrently. When we find an application suffered more slowdown and accumulated less effective work than others, we allocate more CPU time to give it a better parity. This policy can also be applied to threads with different weights. Evaluation results show that FPS can significantly improve system fairness at the expense of a slight loss in throughput. We can also keep the performance information of an application to guide process scheduling when it runs again later on. When FPS uses such performance information from previous runs, fairness can be maintained without the overhead of the training periods required in FPS. Throughput can thus be enhanced.", "paper_title": "FPS: A Fair-Progress Process Scheduling Policy on Shared-Memory Multiprocessors", "paper_id": "WOS:000349769300012"}