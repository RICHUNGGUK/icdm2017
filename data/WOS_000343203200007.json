{"auto_keywords": [{"score": 0.034510927288868586, "phrase": "lm"}, {"score": 0.00481495049065317, "phrase": "linear_logic_programming_language"}, {"score": 0.0047310525657970615, "phrase": "concurrent_programming"}, {"score": 0.004648609688625397, "phrase": "graph_structures"}, {"score": 0.00440976345264104, "phrase": "new_logic_programming_language"}, {"score": 0.004294962474996283, "phrase": "linear_meld"}, {"score": 0.004183137595671171, "phrase": "programming_graph-"}, {"score": 0.004146510711518748, "phrase": "based_algorithms"}, {"score": 0.0040385352882334235, "phrase": "declarative_fashion"}, {"score": 0.0038309141193444015, "phrase": "linear_logic"}, {"score": 0.0036020923276404433, "phrase": "logical_facts"}, {"score": 0.0033277936960179892, "phrase": "classical_and_linear_logic"}, {"score": 0.002693919110230191, "phrase": "graph_data_structure"}, {"score": 0.0025328377393370642, "phrase": "node_level"}, {"score": 0.0024236964502593254, "phrase": "connected_nodes"}, {"score": 0.0021998194157393353, "phrase": "operational_semantics"}], "paper_keywords": ["Language Design", " Semantics", " Linear Logic", " Concurrent Programming", " Graphs"], "paper_abstract": "We have designed a new logic programming language called LM (Linear Meld) for programming graph- based algorithms in a declarative fashion. Our language is based on linear logic, an expressive logical system where logical facts can be consumed. Because LM integrates both classical and linear logic, LM tends to be more expressive than other logic programming languages. LM programs are naturally concurrent because facts are partitioned by nodes of a graph data structure. Computation is performed at the node level while communication happens between connected nodes. In this paper, we present the syntax and operational semantics of our language and illustrate its use through a number of examples.", "paper_title": "A Linear Logic Programming Language for Concurrent Programming over Graph Structures", "paper_id": "WOS:000343203200007"}