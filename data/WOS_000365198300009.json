{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_subtask_dispersion_reduction"}, {"score": 0.004780183091824403, "phrase": "heterogeneous_parallel_queueing_systems"}, {"score": 0.0047113960612140335, "phrase": "split-merge_queueing_systems"}, {"score": 0.004626796109657584, "phrase": "parallel_task_processing_systems"}, {"score": 0.004494570360108983, "phrase": "n_subtasks"}, {"score": 0.004366106816225457, "phrase": "heterogeneous_servers"}, {"score": 0.004318881178805575, "phrase": "original_task"}, {"score": 0.004090274535243564, "phrase": "split-merge_and_fork-join_systems"}, {"score": 0.0038596974575361574, "phrase": "recent_research_effort"}, {"score": 0.0037493114715625784, "phrase": "subtask_dispersion"}, {"score": 0.003668591097652231, "phrase": "task_response_time"}, {"score": 0.0035507457285983268, "phrase": "selected_subtasks"}, {"score": 0.0028455850650967477, "phrase": "key_dynamic_optimisation"}, {"score": 0.0025704954243348276, "phrase": "existing_methods"}, {"score": 0.002542642270762272, "phrase": "optimal_subtask_delays"}, {"score": 0.0025059724686541263, "phrase": "fork-join_systems"}, {"score": 0.0023730978395564116, "phrase": "optimal_delays"}, {"score": 0.0023219374444738723, "phrase": "improved_subtask_dispersion_values"}, {"score": 0.0022884433286785165, "phrase": "existing_techniques"}, {"score": 0.002128067018576581, "phrase": "non-bottleneck_subtasks"}, {"score": 0.0021049977753042253, "phrase": "bottleneck_subtask"}], "paper_keywords": ["dynamic dispersion reduction", " fork-join", " split merge", " queueing networks"], "paper_abstract": "Fork-join and split-merge queueing systems are mathematical abstractions of parallel task processing systems in which entering tasks are split into N subtasks which are served by a set of heterogeneous servers. The original task is considered completed once all the subtasks associated with it have been serviced. Performance of split-merge and fork-join systems are often quantified with respect to two metrics: task response time and subtask dispersion. Recent research effort has been focused on ways to reduce subtask dispersion, or the product of task response time and subtask dispersion, by applying delays to selected subtasks. Such delays may be pre-computed statically, or varied dynamically. Dynamic in our context refers to the ability to vary the delay applied to a subtask according to the state of the system, at any time before the service of that subtask has begun. We assume that subtasks in service cannot be preempted. A key dynamic optimisation that benefits both metrics of interest is to remove delays on any subtask with a sibling that has already completed service. This paper incorporates such a policy into existing methods for computing optimal subtask delays in split-merge and fork-join systems. In the context of two case studies, we show that doing so affects the optimal delays computed, and leads to improved subtask dispersion values when compared with existing techniques. Indeed, in some cases, it turns out to be beneficial to initially postpone the processing of non-bottleneck subtasks until the bottleneck subtask has completed service.", "paper_title": "Dynamic Subtask Dispersion Reduction in Heterogeneous Parallel Queueing Systems", "paper_id": "WOS:000365198300009"}