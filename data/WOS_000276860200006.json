{"auto_keywords": [{"score": 0.02681468715443094, "phrase": "semantic_function"}, {"score": 0.00459165923324494, "phrase": "recent_years"}, {"score": 0.004399525320473839, "phrase": "programming_languages"}, {"score": 0.004357927940322685, "phrase": "program_logics"}, {"score": 0.004136044939878838, "phrase": "fully_satisfactory_approach"}, {"score": 0.0037432199549135826, "phrase": "machine_manipulation"}, {"score": 0.0035864603175592854, "phrase": "usual_informal_syntax"}, {"score": 0.0033875770020590796, "phrase": "pure_lambda-calculus"}, {"score": 0.003051073364818384, "phrase": "alpha-equivalence_class"}, {"score": 0.0027348611289528583, "phrase": "nominal_representation"}, {"score": 0.002632716358833918, "phrase": "human_friendly_external_syntax"}, {"score": 0.0025586128304269616, "phrase": "internal_syntax"}, {"score": 0.0024051153560799335, "phrase": "external_syntax"}, {"score": 0.002326304140277375, "phrase": "usual_care"}, {"score": 0.0021971473452127126, "phrase": "canonical_internal_syntax"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Binding", " Lambda calculus", " Formal proof"], "paper_abstract": "It is well known that formally defining and reasoning about languages with binding (such as logics and lambda-calculii) is problematic. There are many approaches to deal with the problem, with much work over recent years stimulated by the desire to formally reason about programming languages and program logics. The various approaches have their own strengths and drawbacks, but no fully satisfactory approach has appeared. We present an approach based on two levels of syntax: an internal syntax which is convenient for machine manipulation, and an external syntax which is the usual informal syntax used in many articles and textbooks. Throughout the paper we use pure lambda-calculus as an example, but the technique extends to many languages with binding. Our internal syntax is canonical: one representative of every alpha-equivalence class. It is formalized in Isabelle/HOL, and its properties are mechanically proved. It is also proved to be isomorphic with a nominal representation of lambda-calculus in Isabelle/HOL. Our conventional, human friendly external syntax is naturally related to the internal syntax by a semantic function. We do not define notions directly on the external syntax, since that would require the usual care about alpha-renaming, but introduce them indirectly from the canonical internal syntax via the semantic function. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "External and internal syntax of the lambda-calculus", "paper_id": "WOS:000276860200006"}