{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code-injection_attacks"}, {"score": 0.010195525693016405, "phrase": "existing_definitions"}, {"score": 0.004442065104148637, "phrase": "sql"}, {"score": 0.0039624406239057944, "phrase": "existing_mechanisms"}, {"score": 0.0038573081851680656, "phrase": "code-injecting_inputs"}, {"score": 0.0034872225047008648, "phrase": "benign_inputs"}, {"score": 0.003216804708106142, "phrase": "conventional_definitions"}, {"score": 0.0030482430937467013, "phrase": "new_definition"}, {"score": 0.0026823700218343506, "phrase": "application's_output"}, {"score": 0.0023287359930308864, "phrase": "simple_new_definition"}], "paper_keywords": ["Security", " languages", " algorithms"], "paper_abstract": "This paper shows that existing definitions of code-injection attacks (e.g., SQL-injection attacks) are flawed. The flaws make it possible for attackers to circumvent existing mechanisms, by supplying code-injecting inputs that are not recognized as such. The flaws also make it possible for benign inputs to be treated as attacks. After describing these flaws in conventional definitions of code-injection attacks, this paper proposes a new definition, which is based on whether the symbols input to an application get used as (normal-form) values in the application's output. Because values are already fully evaluated, they cannot be considered \"code\" when injected. This simple new definition of code-injection attacks avoids the problems of existing definitions, improves our understanding of how and when such attacks occur, and enables us to evaluate the effectiveness of mechanisms for mitigating such attacks.", "paper_title": "Defining Code-injection Attacks", "paper_id": "WOS:000300548100014"}