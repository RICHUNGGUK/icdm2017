{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "asips"}, {"score": 0.00481495049065317, "phrase": "pipelined_custom_hardware_extension_for_energy-efficient_application-specific_instruction_set_processor_design"}, {"score": 0.004457579615095599, "phrase": "increasingly_popular_platform"}, {"score": 0.004408729661992651, "phrase": "embedded_systems"}, {"score": 0.004218602458288531, "phrase": "short_turn-around_time"}, {"score": 0.003970439654470374, "phrase": "program_execution"}, {"score": 0.003757480190200645, "phrase": "extra_static_energy_consumption"}, {"score": 0.003716273882758735, "phrase": "traditional_datapath_merging_techniques"}, {"score": 0.0036553070575015344, "phrase": "circuit_overhead"}, {"score": 0.0035953368057880593, "phrase": "hardware_modules"}, {"score": 0.003536346954940087, "phrase": "multiple_operations"}, {"score": 0.0034212450542713607, "phrase": "structural_hazard"}, {"score": 0.0033837135367113004, "phrase": "multiple_custom_instructions"}, {"score": 0.0032376465741070274, "phrase": "performance_improvement"}, {"score": 0.0030808211830129304, "phrase": "pipelined_configurable_structure"}, {"score": 0.003030247482854539, "phrase": "hardware_extension"}, {"score": 0.002931569771634119, "phrase": "structural_hazards"}, {"score": 0.0028360962841331634, "phrase": "multiple_subgraphs"}, {"score": 0.002713604305939145, "phrase": "novel_operation-to-hardware_mapping_algorithm"}, {"score": 0.002669042572650594, "phrase": "integer_linear_programming"}, {"score": 0.0025537472239953807, "phrase": "resource-efficient_pipelined_configurable_functional_unit"}, {"score": 0.0023900527169254744, "phrase": "overall_performance_improvement"}, {"score": 0.0023249757987087055, "phrase": "design_trade-offs"}, {"score": 0.0021049977753042253, "phrase": "optimization_objective"}], "paper_keywords": ["Design", " Algorithms", " Application-Specific Instruction set Processor", " configurable functional unit", " resource sharing", " energy efficiency"], "paper_abstract": "Application-Specific Instruction set Processor (ASIP) has become an increasingly popular platform for embedded systems because of its high performance, flexibility, and short turn-around time. The hardware extension in ASIPs can speed-up program execution. However, it also incurs area overhead and extra static energy consumption. Traditional datapath merging techniques reduce the circuit overhead by reusing hardware modules for executing multiple operations. However, they introduce structural hazard for multiple custom instructions in sequence, and hence reduce the performance improvement. In this article, we introduce a pipelined configurable structure for the hardware extension in ASIPs, so that structural hazards can be remedied. With multiple subgraphs of operations selected, we design a novel operation-to-hardware mapping algorithm based on Integer Linear Programming (ILP) to automatically construct a resource-efficient pipelined configurable functional unit. Different resource sharing schemes would affect both the hardware overhead and the overall performance improvement. We analyze the design trade-offs between resource efficiency and performance improvement. At the end, we present our design space exploration results by setting the optimization objective to area, area and delay, and delay respectively.", "paper_title": "Resource Sharing of Pipelined Custom Hardware Extension for Energy-Efficient Application-Specific Instruction Set Processor Design", "paper_id": "WOS:000310163000004"}