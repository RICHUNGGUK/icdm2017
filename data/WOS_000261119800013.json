{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "source_code"}, {"score": 0.04824544662217234, "phrase": "domain-level_concepts"}, {"score": 0.00419997182602686, "phrase": "semantic_cohesion"}, {"score": 0.003454687811707182, "phrase": "research_questions"}, {"score": 0.0033658327434624457, "phrase": "informal_observation"}, {"score": 0.0027501697136375555, "phrase": "greater_degree"}, {"score": 0.0026619761089539595, "phrase": "tighter_dependence"}, {"score": 0.002576603426735759, "phrase": "positive_implications"}, {"score": 0.0023213398100616132, "phrase": "smaller_executable_units"}, {"score": 0.0021049977753042253, "phrase": "domain-level_concept"}], "paper_keywords": ["Program slicing", " Concept assignment", " Software engineering", " Program comprehension"], "paper_abstract": "Programs express domain-level concepts in their source code. It might be expected that such concepts Would have a degree of semantic cohesion. This cohesion ought to manifest itself in the dependence between statements all of which contribute to the computation of the same concept. This paper addresses a set of research questions that capture this informal observation. It presents the results of experiments on 10 programs that explore the relationship between domain-level concepts and dependence in source code. The results show that code associated with concepts has a greater degree of coherence, with tighter dependence. This finding has positive implications for the analysis of concepts as it provides an approach to decompose a program into smaller executable units, each of which captures the behaviour of the program with respect to a domain-level concept. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "An empirical study of the relationship between the concepts expressed in source code and dependence", "paper_id": "WOS:000261119800013"}