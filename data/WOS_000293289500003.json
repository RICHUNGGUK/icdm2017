{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "ceda"}, {"score": 0.013547299649529148, "phrase": "control-flow_errors"}, {"score": 0.011147809183986522, "phrase": "performance_overhead"}, {"score": 0.004759635663291431, "phrase": "control-flow_error_detection"}, {"score": 0.004544629724830453, "phrase": "efficient_software_technique"}, {"score": 0.004191377834552202, "phrase": "online_detection"}, {"score": 0.003887894704361635, "phrase": "compile_time"}, {"score": 0.0037989951856280423, "phrase": "runtime_signatures"}, {"score": 0.0036694287631595995, "phrase": "preassigned_values"}, {"score": 0.003523822585025555, "phrase": "runtime_signatures_results"}, {"score": 0.003463196032143783, "phrase": "huge_reduction"}, {"score": 0.0032122679403131537, "phrase": "complex_programs"}, {"score": 0.0031026497891826726, "phrase": "subtle_control-flow_errors"}, {"score": 0.0030492472433481764, "phrase": "widely_used_c_compiler"}, {"score": 0.0030141628016222754, "phrase": "gcc"}, {"score": 0.00282822695516646, "phrase": "spec_benchmark_programs"}, {"score": 0.0026846436189970446, "phrase": "earlier_techniques"}, {"score": 0.00265373679629359, "phrase": "fault_injection_experiments"}, {"score": 0.002432971714608409, "phrase": "fault_detection_capabilities"}, {"score": 0.0022565201625076876, "phrase": "error_coverage"}, {"score": 0.0021049977753042253, "phrase": "previously_proposed_methods"}], "paper_keywords": ["Control-flow errors", " error detection", " fault tolerance", " software-based detection"], "paper_abstract": "This paper presents an efficient software technique, control-flow error detection through assertions (CEDA), for online detection of control-flow errors. Extra instructions are automatically embedded into the program at compile time to continuously update runtime signatures and to compare them against preassigned values. The novel method of computing runtime signatures results in a huge reduction in the performance overhead, as well as the ability to deal with complex programs and the capability to detect subtle control-flow errors. The widely used C compiler, GCC, has been modified to implement CEDA, and the SPEC benchmark programs were used as the target to compare with earlier techniques. Fault injection experiments were used to demonstrate the effect of control-flow errors on software and to evaluate the fault detection capabilities of CEDA. Based on a new comparison metric, method efficiency, which takes into account both error coverage and performance overhead, CEDA is found to be much better than previously proposed methods.", "paper_title": "CEDA: Control-Flow Error Detection Using Assertions", "paper_id": "WOS:000293289500003"}