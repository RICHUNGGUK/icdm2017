{"auto_keywords": [{"score": 0.04144946983236343, "phrase": "cctr"}, {"score": 0.014677997023849023, "phrase": "memory_races"}, {"score": 0.00481495049065317, "phrase": "memory_race_recording"}, {"score": 0.0047385702897315436, "phrase": "key_technology"}, {"score": 0.004663396040465122, "phrase": "multithreaded_programming"}, {"score": 0.00458940888106061, "phrase": "modem_computers"}, {"score": 0.004540734419151103, "phrase": "efficient_communication_mechanism"}, {"score": 0.004236639288852276, "phrase": "efficient_memory_race_recording_algorithm"}, {"score": 0.004191690483929023, "phrase": "low_log_growth_rate"}, {"score": 0.004147216579100177, "phrase": "rapid_replay_speed"}, {"score": 0.004016594765266821, "phrase": "new_efficient_point-to-point_memory_race_recording_algorithm"}, {"score": 0.003767517649628532, "phrase": "small_hardware_state"}, {"score": 0.003459191419478298, "phrase": "multithreaded_programs"}, {"score": 0.003422462630994095, "phrase": "production_run_speed"}, {"score": 0.003332332086930163, "phrase": "new_relative_indirect_dependency"}, {"score": 0.003261934055562235, "phrase": "memory_race"}, {"score": 0.0029789104204803137, "phrase": "memory_block"}, {"score": 0.0027349450784503273, "phrase": "good_result"}, {"score": 0.002662871928330334, "phrase": "smallest_log_growth_rate"}, {"score": 0.002578880352208335, "phrase": "thousand_memory_instructions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Multiprocessors", " Deterministic replay", " Memory race recording"], "paper_abstract": "Memory race recording is a key technology to replay multithreaded programming deterministically. Modem computers supply efficient communication mechanism and memory races occur frequently. So it is significant to develop an efficient memory race recording algorithm with low log growth rate and rapid replay speed. This paper proposes a new efficient point-to-point memory race recording algorithm, called CCTR, which writes a small race log with small hardware state, operates well as the number of cores per system scales, and can replay multithreaded programs at production run speed. CCTR uses a new relative indirect dependency to present each memory race instead of its precise dependency. In this dependency, CCTR need not store any timestamp for each memory block and detects memory races in chunks. Through simulation on 4-core chip multiprocessor (CMP), a good result is achieved which includes smallest log growth rate (similar to 5 bytes per thousand memory instructions), small hardware state (similar to 504 bytes per core), low runtime overhead (less than 2%), low bandwidth overhead (similar to 7%) and good scalability. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "CCTR: An efficient point-to-point memory race recorder implemented in chunks", "paper_id": "WOS:000307801300006"}