{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "polyhedral_transformations_meet"}, {"score": 0.00478968045369969, "phrase": "simd_code_generation"}, {"score": 0.0046164478775379105, "phrase": "critical_optimization_objectives"}, {"score": 0.004520272777451894, "phrase": "modern_multi-core_machines"}, {"score": 0.004449452743965974, "phrase": "coarse-grain_parallelism"}, {"score": 0.0037793152987497286, "phrase": "current_compiler_optimization_schemes"}, {"score": 0.0036810726176482278, "phrase": "data_locality"}, {"score": 0.003209782650616367, "phrase": "integrated_data_locality"}, {"score": 0.0031761255583359726, "phrase": "multi-core_parallelism"}, {"score": 0.0029814443878969973, "phrase": "vectorizable_codelets"}, {"score": 0.0028734230458881903, "phrase": "effective_simd_code_generation"}, {"score": 0.002711506442590442, "phrase": "modern_high-level_transformation_framework"}, {"score": 0.002613239644974825, "phrase": "good_isa-independent_vectorizable_codelets"}, {"score": 0.0025722202862084186, "phrase": "multi-dimensional_data_reuse"}, {"score": 0.002492098272172066, "phrase": "isa-specific_customized_code"}, {"score": 0.002376559242152662, "phrase": "lower-level_simd-focused_optimizations"}, {"score": 0.0022544399432457164, "phrase": "numerical_kernels"}, {"score": 0.0021273284545701896, "phrase": "significant_performance_improvements"}, {"score": 0.0021049977753042253, "phrase": "existing_compilers"}], "paper_keywords": ["Algorithms", " Performance", " Compiler Optimization", " Loop Transformations", " Affine Scheduling", " Program synthesis", " Autotuning"], "paper_abstract": "Data locality and parallelism are critical optimization objectives for performance on modern multi-core machines. Both coarse-grain parallelism (e.g., multi-core) and fine-grain parallelism (e.g.,vector SIMD) must be effectively exploited, but despite decades of progress at both ends, current compiler optimization schemes that attempt to address data locality and both kinds of parallelism often fail at one of the three objectives. We address this problem by proposing a 3-step framework,which aims for integrated data locality, multi-core parallelism and SIMD execution of programs. We define the concept of vectorizable codelets, with properties tailored to achieve effective SIMD code generation for the codelets. We leverage the power of a modern high-level transformation framework to restructure a program to expose good ISA-independent vectorizable codelets, exploiting multi-dimensional data reuse. Then, we generate ISA-specific customized code for the codelets, using a collection of lower-level SIMD-focused optimizations. We demonstrate our approach on a collection of numerical kernels that we automatically tile, parallelize and vectorize, exhibiting significant performance improvements over existing compilers.", "paper_title": "When Polyhedral Transformations Meet SIMD Code Generation", "paper_id": "WOS:000321865400013"}