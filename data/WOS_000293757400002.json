{"auto_keywords": [{"score": 0.04763743657605741, "phrase": "database_systems"}, {"score": 0.046459681772617716, "phrase": "users'_satisfaction"}, {"score": 0.042126058338207366, "phrase": "database_system"}, {"score": 0.038568237038719436, "phrase": "data_access_requirements"}, {"score": 0.00481495049065317, "phrase": "distributed_databases"}, {"score": 0.004325426296453136, "phrase": "main_objective"}, {"score": 0.004137288854115515, "phrase": "traditional_database_systems"}, {"score": 0.004072851768196397, "phrase": "execution-related_constraints"}, {"score": 0.00396767023935381, "phrase": "user_expectations"}, {"score": 0.0038753222826542564, "phrase": "corrective_actions"}, {"score": 0.0037653554368382814, "phrase": "qoe-oriented_distributed_database_system"}, {"score": 0.0037456980766939836, "phrase": "qoe-ddb"}, {"score": 0.003417783486028524, "phrase": "sql_extensions"}, {"score": 0.003364514629929572, "phrase": "execution-related_requirements"}, {"score": 0.003303412571939192, "phrase": "execution_deadline"}, {"score": 0.0032689949867583633, "phrase": "execution_start"}, {"score": 0.003226475202576416, "phrase": "data_availability"}, {"score": 0.0031761785343712395, "phrase": "disconnected_execution_mode"}, {"score": 0.003126663468186585, "phrase": "user's_command"}, {"score": 0.0030538300202383106, "phrase": "data_services"}, {"score": 0.0030378759123133644, "phrase": "community_modules"}, {"score": 0.0030220049006970317, "phrase": "local_data"}, {"score": 0.002998353248454701, "phrase": "service_level_objectives"}, {"score": 0.0029131986574478046, "phrase": "system's_dependability"}, {"score": 0.002875293362426483, "phrase": "qoe-oriented_scheduling"}, {"score": 0.002860269306587213, "phrase": "dynamic_data_placement_strategies"}, {"score": 0.002750056254309311, "phrase": "wide_range"}, {"score": 0.0027356847952125433, "phrase": "distributed_environments"}, {"score": 0.0027142679199484783, "phrase": "tightly-coupled_homogeneous_environments"}, {"score": 0.002678944072162297, "phrase": "off-the-shelf_computers"}, {"score": 0.002630259620763024, "phrase": "highly_heterogeneous_and_geographically_distributed_systems"}, {"score": 0.0025555322596460036, "phrase": "traditional_performance_indicators"}, {"score": 0.002463502440895071, "phrase": "qoe"}, {"score": 0.0024060573724654553, "phrase": "specialized_key_performance_indicators"}, {"score": 0.002362320344521919, "phrase": "qoe_level"}, {"score": 0.0023072505282428117, "phrase": "experimental_results"}, {"score": 0.002271250758907689, "phrase": "benchmark_data"}, {"score": 0.002218299213266519, "phrase": "proposed_strategies"}, {"score": 0.002177967779626705, "phrase": "realistic_scenarios"}, {"score": 0.002160907646736523, "phrase": "proposed_scheduling_strategies"}], "paper_keywords": ["Distributed database", " Quality of experience", " Query scheduling", " Data placement", " Service level objectives", " Data access requirements", " Performance indicators"], "paper_abstract": "This paper proposes an approach to improve the level of Quality of Experience (QoE) that distributed database systems provide. Quality of Experience is a measure of users' satisfaction when using a certain service or application. Therefore, the main objective of this paper is to provide mechanisms to increase users' satisfaction when accessing distributed database systems. In traditional database systems, users cannot specify execution-related constraints. Then, the database system cannot evaluate if user expectations are satisfied and neither the system can take corrective actions when necessary. In this work, we present the QoE-oriented distributed database system (QoE-DDB). It allow users to specify Data Access Requirements (DARs) and aims to please users by satisfying the DARs they define. We define a set of types of Data Access Requirements and propose some SQL extensions that enable users to specify execution-related requirements. Proposed types of DARs include execution deadline and priority, execution start and finish times, data availability and freshness degrees, and disconnected execution mode. In our QoE-DDB, each user's command is transformed into one or more tasks that are executed by data services. Community modules and local data services negotiate Service Level Objectives (SLOs) for each task, which improves the system's dependability. We propose both QoE-oriented scheduling and dynamic data placement strategies. Proposed architecture and scheduling strategies enable the system to be used in a wide range of distributed environments, from tightly-coupled homogeneous environments (e.g. composed by off-the-shelf computers connected by a LAN) to highly heterogeneous and geographically distributed systems, where data services have some degree of autonomy. Traditional performance indicators (e.g. throughput and response time) are not adequate to measure the QoE a system provides. We also propose some specialized Key Performance Indicators (KPIs) to estimate the QoE level a database system provides. Finally, we present experimental results obtained through the use of benchmark data and queries together with a prototype that implements proposed strategies. In our experiments, we consider realistic scenarios and compare proposed scheduling strategies with their best-effort oriented counterparts. Obtained results prove the importance of our QoE-oriented approach.", "paper_title": "Quality of experience in distributed databases", "paper_id": "WOS:000293757400002"}