{"auto_keywords": [{"score": 0.041078685670043524, "phrase": "additional_assumptions"}, {"score": 0.03363896917055259, "phrase": "combined_assumption"}, {"score": 0.00481495049065317, "phrase": "time-free_and_timer-based_assumptions"}, {"score": 0.004704358677726188, "phrase": "leader-based_protocols"}, {"score": 0.004479120557712926, "phrase": "distributed_computing"}, {"score": 0.004444551533698643, "phrase": "synchronization_or_coordination_problems"}, {"score": 0.004286708921931472, "phrase": "asynchronous_distributed_systems"}, {"score": 0.004155865805609238, "phrase": "fault-prone_purely_asynchronous_systems"}, {"score": 0.003997891221012094, "phrase": "leader_facility"}, {"score": 0.0039465735912396355, "phrase": "asynchronous_distributed_system"}, {"score": 0.003652159147252205, "phrase": "n_processes"}, {"score": 0.003486123304074186, "phrase": "time-free_assumption"}, {"score": 0.003459191419478298, "phrase": "message_pattern"}, {"score": 0.0034324668792521697, "phrase": "synchrony_assumption"}, {"score": 0.0034147649270704463, "phrase": "process_speed"}, {"score": 0.0033971539563683174, "phrase": "message_delay"}, {"score": 0.003267925215811654, "phrase": "hybrid_eventual_leader_protocol"}, {"score": 0.0029013950320185573, "phrase": "f_channels"}, {"score": 0.0025892330566358503, "phrase": "correct_process_p"}, {"score": 0.0025296325165671315, "phrase": "set_q"}, {"score": 0.0025165749129028984, "phrase": "f_processes"}, {"score": 0.002355223022119613, "phrase": "q"}, {"score": 0.0022749744354271816, "phrase": "first_responses"}, {"score": 0.002126907587540404, "phrase": "surprisingly_simple_eventual_leader_protocol"}, {"score": 0.0021049977753042253, "phrase": "fine_grain_hybrid_assumption"}], "paper_keywords": ["asynchronous system", " distributed algorithm", " fault tolerance", " hybrid protocol", " leader election", " process crash", " time-free assumption", " timer-based assumption"], "paper_abstract": "Leader-based protocols rest on a primitive able to provide the processes with the same unique leader. Such protocols are very common in distributed computing to solve synchronization or coordination problems. Unfortunately, providing such a primitive is far from being trivial in asynchronous distributed systems prone to process crashes. (It is even impossible in fault-prone purely asynchronous systems.) To circumvent this difficulty, several protocols have been proposed that build a leader facility on top of an asynchronous distributed system enriched with additional assumptions. The protocols proposed so far consider either additional assumptions based on synchrony or additional assumptions on the pattern of the messages that are exchanged. Considering systems with n processes and up to f process crashes, 1 <= f < n, this paper investigates the combination of a time-free assumption on the message pattern with a synchrony assumption on process speed and message delay. It shows that both types of assumptions can be combined to obtain a hybrid eventual leader protocol benefiting from the best of both worlds. This combined assumption considers a star communication structure involving f + 1 processes. Its noteworthy feature lies in the level of combination of both types of assumption that is \"as fine as possible\" in the sense that each of the f channels of the star has to satisfy a property independently of the property satisfied by each of the f - 1 other channels (the f channels do not have to satisfy the same assumption). More precisely, this combined assumption is the following: There is a correct process p (center of the star) and a set Q of f processes q ( p is not an element of Q) such that, eventually, either 1) each time it broadcasts a query, q receives a response from p among the (n - f) first responses to that query, or 2) the channel from p to q is timely. (The processes in the set Q can crash.) A surprisingly simple eventual leader protocol based on this fine grain hybrid assumption is proposed and proved correct. An improvement is also presented.", "paper_title": "Time-free and timer-based assumptions can be combined to obtain eventual leadership", "paper_id": "WOS:000237786100006"}