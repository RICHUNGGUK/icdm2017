{"auto_keywords": [{"score": 0.049643973872019624, "phrase": "haskell"}, {"score": 0.043731003195907676, "phrase": "information-flow_security"}, {"score": 0.00481495049065317, "phrase": "library_for_light-weight_information-flow_security"}, {"score": 0.004537525607322823, "phrase": "computing_systems"}, {"score": 0.004496280772084575, "phrase": "information-flow_techniques"}, {"score": 0.004237138632255772, "phrase": "special-purpose_languages"}, {"score": 0.0039928721865882, "phrase": "new_language"}, {"score": 0.003611034322786669, "phrase": "arrow_framework"}, {"score": 0.003091262582401731, "phrase": "monadic_library"}, {"score": 0.0028470123663391126, "phrase": "pure_computations"}, {"score": 0.002551022760887132, "phrase": "different_declassification_policies"}, {"score": 0.0024481198073210567, "phrase": "controlled_manner"}, {"score": 0.002163600705898299, "phrase": "well-known_concept"}, {"score": 0.0021049977753042253, "phrase": "light-weight_characteristic"}], "paper_keywords": ["Security", " Languages", " Information-flow", " Declassification", " Library", " Monad"], "paper_abstract": "Protecting confidentiality of data has become increasingly important for computing systems. Information-flow techniques have been developed over the years to achieve that purpose, leading to special-purpose languages that guarantee information-flow security in programs. However, rather than producing a new language from scratch, information-flow security can also be provided as a library. This has been done previously in Haskell using the arrow framework. In this paper, we show that arrows are not necessary to design such libraries and that a less general notion, namely monads, is sufficient to achieve the same goals. We present a monadic library to provide information-flow security for Haskell programs. The library introduces mechanisms to protect confidentiality of data for pure computations, that we then easily, and modularly, extend to include dealing with side-effects. We also present combinators to dynamically enforce different declassification policies when release of information is required in a controlled manner. It is possible to enforce policies related to what, by whom, and when information is released or a combination of them. The well-known concept of monads together with the light-weight characteristic of our approach makes the library suitable to build applications where confidentiality of data is an issue.", "paper_title": "A Library for Light-Weight Information-Flow Security in Haskell", "paper_id": "WOS:000266819700002"}