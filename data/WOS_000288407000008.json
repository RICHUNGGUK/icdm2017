{"auto_keywords": [{"score": 0.046238615936730884, "phrase": "suffix_trees"}, {"score": 0.012421384716028864, "phrase": "main_memory"}, {"score": 0.012275364500898297, "phrase": "suffix_tree"}, {"score": 0.006553751731265797, "phrase": "input_sequences"}, {"score": 0.004701556483912018, "phrase": "fundamental_data_structure"}, {"score": 0.0043945048085683005, "phrase": "real-life_applications"}, {"score": 0.004342430078306461, "phrase": "current_methods"}, {"score": 0.004206548500039536, "phrase": "large_inputs"}, {"score": 0.003947358102140903, "phrase": "first_attempts"}, {"score": 0.0039005612858880115, "phrase": "large_suffix_trees"}, {"score": 0.003808619097554076, "phrase": "massive_random_access"}, {"score": 0.003588100032858716, "phrase": "input_string"}, {"score": 0.0033269488835014583, "phrase": "constantly_growing_pool"}, {"score": 0.0033005860945173136, "phrase": "string_data"}, {"score": 0.0028487656293168795, "phrase": "available_main_memory"}, {"score": 0.002419798694301991, "phrase": "real_dna_sequences"}, {"score": 0.002372103459168231, "phrase": "single_machine"}, {"score": 0.0023346247674094277, "phrase": "ram."}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["String databases", " Suffix trees", " Full-text indexes"], "paper_abstract": "A suffix tree is a fundamental data structure for string searching algorithms. Unfortunately, when it comes to the use of suffix trees in real-life applications, the current methods for constructing suffix trees do not scale for large inputs. As suffix trees are larger than the input sequences and quickly outgrow the main memory, the first attempts at building large suffix trees focused on algorithms which avoid massive random access to the trees being built. However, all the existing practical algorithms perform random access to the input string, thus requiring in essence that the input be small enough to be kept in main memory. The constantly growing pool of string data, especially biological sequences, requires us to build suffix trees for much larger strings. We are the first to present an algorithm which is able to construct suffix trees for input sequences significantly larger than the size of the available main memory. Both the input string and the suffix tree are kept on disk and the algorithm is designed to avoid multiple random I/Os to both of them.(1) As a proof of concept, we show that our method allows to build the suffix tree for 12 GB of real DNA sequences in 26 h on a single machine with 2 GB of RAM. This input is four times the size of the Human Genome, and the construction of suffix trees for inputs of such magnitude was never reported before. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Suffix trees for inputs larger than main memory", "paper_id": "WOS:000288407000008"}