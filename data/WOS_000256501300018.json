{"auto_keywords": [{"score": 0.04825250923342016, "phrase": "high_performance"}, {"score": 0.03163537021432405, "phrase": "driver_code"}, {"score": 0.00481495049065317, "phrase": "device_drivers"}, {"score": 0.004586531354697466, "phrase": "easy_access"}, {"score": 0.004542158659382197, "phrase": "kernel_services"}, {"score": 0.004326624385772596, "phrase": "decreased_reliability"}, {"score": 0.004202223763361474, "phrase": "driver_programmers"}, {"score": 0.004101281992566145, "phrase": "user-mode_development_tools"}, {"score": 0.0040027552011993005, "phrase": "cumbersome_kernel_tools"}, {"score": 0.003925633992809873, "phrase": "kernel_drivers"}, {"score": 0.0038499929374478125, "phrase": "entire_operating_system"}, {"score": 0.003775803846431323, "phrase": "user-mode_drivers"}, {"score": 0.003493021648360933, "phrase": "poor_performance"}, {"score": 0.003459191419478298, "phrase": "new_interfaces"}, {"score": 0.003359647377874098, "phrase": "existing_drivers"}, {"score": 0.0032629585038738856, "phrase": "microdrivers_architecture"}, {"score": 0.0031383410838018953, "phrase": "critical_path_code"}, {"score": 0.0029458777184930896, "phrase": "user-mode_process"}, {"score": 0.0028890603352364273, "phrase": "data-handling_operations"}, {"score": 0.0027922467043592597, "phrase": "full_speed"}, {"score": 0.002751751956416832, "phrase": "management_operations"}, {"score": 0.0026466064623118105, "phrase": "reduced_speed"}, {"score": 0.0024481856932959227, "phrase": "existing_kernel_drivers"}, {"score": 0.0024126686412257407, "phrase": "kernel-level_component"}, {"score": 0.0023776656246300063, "phrase": "user-level_component"}, {"score": 0.0023431692392929353, "phrase": "small_number"}, {"score": 0.002320449502337321, "phrase": "programmer_annotations"}, {"score": 0.0021464286727045623, "phrase": "common-case_performance"}], "paper_keywords": ["management", " reliability", " device drivers", " reliability", " program partitioning"], "paper_abstract": "Device drivers commonly execute in the kernel to achieve high performance and easy access to kernel services. However, this comes at the price of decreased reliability and increased programming difficulty. Driver programmers are unable to use user-mode development tools and must instead use cumbersome kernel tools. Faults in kernel drivers can cause the entire operating system to crash. User-mode drivers have long been seen as a solution to this problem, but suffer from either poor performance or new interfaces that require a rewrite of existing drivers. This paper introduces the Microdrivers architecture that achieves high performance and compatibility by leaving critical path code in the kernel and moving the rest of the driver code to a user-mode process. This allows data-handling operations critical to I/O performance to run at full speed, while management operations such as initialization and configuration run at reduced speed in user-level. To achieve compatibility, we present DriverSlicer, a tool that splits existing kernel drivers into a kernel-level component and a user-level component using a small number of programmer annotations. Experiments show that as much as 65% of driver code can be removed from the kernel without affecting common-case performance, and that only 1-6 percent of the code requires annotations.", "paper_title": "The design and implementation of Microdrivers", "paper_id": "WOS:000256501300018"}