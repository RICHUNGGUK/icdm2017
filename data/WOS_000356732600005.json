{"auto_keywords": [{"score": 0.049613254104042076, "phrase": "hadoop-based_distributed_systems"}, {"score": 0.007848064842072027, "phrase": "distributed_processing"}, {"score": 0.00481495049065317, "phrase": "efficient_data_analysis"}, {"score": 0.004675768396728975, "phrase": "large-scale_relational_data_analysis"}, {"score": 0.004430920292612374, "phrase": "scalable_relational_data_analysis"}, {"score": 0.004345085569121329, "phrase": "column-store_approach"}, {"score": 0.004240116703465252, "phrase": "analytic_queries"}, {"score": 0.0041579627441997, "phrase": "column-oriented_storage"}, {"score": 0.0038448988429199086, "phrase": "existing_studies"}, {"score": 0.0034187896011435245, "phrase": "columnar_structure"}, {"score": 0.0033524956061690868, "phrase": "task_initialization"}, {"score": 0.003319846929167197, "phrase": "hadoop"}, {"score": 0.0032714270066711835, "phrase": "large_overhead"}, {"score": 0.003115105266246263, "phrase": "small_amount"}, {"score": 0.0030397596289795143, "phrase": "second_problem"}, {"score": 0.0028944757265206332, "phrase": "columnar_execution"}, {"score": 0.0027832502848247303, "phrase": "efficient_columnar_query_execution"}, {"score": 0.0027561164046279413, "phrase": "existing_column-store_methods"}, {"score": 0.002548331088496964, "phrase": "novel_column-store_method"}, {"score": 0.002474505516708906, "phrase": "ssfile"}, {"score": 0.0024383967028975616, "phrase": "actual_amount"}, {"score": 0.002344655708000408, "phrase": "representative_columnar_execution_techniques"}, {"score": 0.002321787726770895, "phrase": "efficient_query_processing"}, {"score": 0.002287902310873394, "phrase": "extensive_experiments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Column-store", " Hadoop", " HDFS", " Relational data analysis", " Distributed systems", " Server clusters"], "paper_abstract": "Recently, large-scale relational data analysis has gained much attention. Several Hadoop-based distributed systems have been proposed for scalable relational data analysis. Because the column-store approach is very suitable for analytic queries, many studies on column-oriented storage and query processing for Hadoop-based distributed systems have been conducted. However, two problems have arisen in existing studies, the first of which is that only a small amount of data is processed per task during distributed processing. Each task reads only the necessary data using the columnar structure. Because the task initialization in Hadoop requires a large overhead, it is inefficient that each task processes a small amount of data. The second problem is the lack of support for techniques that optimize columnar execution. Although many such techniques have been proposed for efficient columnar query execution, existing column-store methods for Hadoop-based distributed systems cannot support them efficiently. In this paper, we propose a novel column-store method called SSFile for Hadoop-based distributed systems. SSFile increases the actual amount of data processed per task and supports representative columnar execution techniques for efficient query processing. Through extensive experiments, we show that SSFile significantly improves the performance of distributed processing. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "SSFile: A novel column-store for efficient data analysis in Hadoop-based distributed systems", "paper_id": "WOS:000356732600005"}