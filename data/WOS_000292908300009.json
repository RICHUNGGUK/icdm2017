{"auto_keywords": [{"score": 0.03556918586225092, "phrase": "protector"}, {"score": 0.012174139526603532, "phrase": "transient_failures"}, {"score": 0.004815084558972712, "phrase": "probabilistic"}, {"score": 0.004537875262684779, "phrase": "data_redundancy"}, {"score": 0.0044906540097516545, "phrase": "fundamental_requirement"}, {"score": 0.0042617859335771615, "phrase": "desired_data_availability"}, {"score": 0.004232160987948483, "phrase": "additional_replicas"}, {"score": 0.0038383157378810277, "phrase": "intelligent_system"}, {"score": 0.003798346343693706, "phrase": "significant_replication_costs"}, {"score": 0.0036680857629458816, "phrase": "permanent_and_transient_failures"}, {"score": 0.0035920758080335655, "phrase": "challenging_task"}, {"score": 0.003303412571939195, "phrase": "efficient_replication_policies"}, {"score": 0.003234934827553253, "phrase": "\"remaining_replicas"}, {"score": 0.003048502724695561, "phrase": "detection_accuracy"}, {"score": 0.002954180291607795, "phrase": "failure_patterns"}, {"score": 0.0027071661844502992, "phrase": "replication_level"}, {"score": 0.0025960262223338293, "phrase": "false_positives"}, {"score": 0.0025510720021028107, "phrase": "false_negatives"}, {"score": 0.0025156683465194967, "phrase": "extensive_simulations"}, {"score": 0.0024039564563674673, "phrase": "perfect_\"oracle\"_failure_detector"}, {"score": 0.002362320344521919, "phrase": "time-out-based_detectors"}, {"score": 0.002119764367112061, "phrase": "efficient_long-term_data_maintenance"}], "paper_keywords": ["Failure detector", " P2P storage", " availability", " replication management"], "paper_abstract": "Maintaining a given level of data redundancy is a fundamental requirement of peer-to-peer (P2P) storage systems-to ensure desired data availability, additional replicas must be created when peers fail. Since the majority of failures in P2P networks are transient (i.e., peers return with data intact), an intelligent system can reduce significant replication costs by not replicating data following transient failures. Reliably distinguishing permanent and transient failures, however, is a challenging task, because peers are unresponsive to probes in both cases. In this paper, we propose Protector, an algorithm that enables efficient replication policies by estimating the number of \"remaining replicas\" for each object, including those temporarily unavailable due to transient failures. Protector dramatically improves detection accuracy by exploiting two opportunities. First, it leverages failure patterns to predict the likelihood that a peer (and the data it hosts) has permanently failed given its current downtime. Second, it detects replication level across groups of replicas (or fragments), thereby balancing false positives for some peers against false negatives for others. Extensive simulations based on both synthetic and real traces show that Protector closely approximates the performance of a perfect \"oracle\" failure detector, and significantly outperforms time-out-based detectors using a wide range of parameters. Finally, we design, implement and deploy an efficient P2P storage system called AmazingStore by combining Protector with structured P2P overlays. Our experience proves that Protector enables efficient long-term data maintenance in P2P storage systems.", "paper_title": "Protector: A Probabilistic Failure Detector for Cost-Effective Peer-to-Peer Storage", "paper_id": "WOS:000292908300009"}