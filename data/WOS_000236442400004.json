{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "agent_communication_contexts"}, {"score": 0.04297737930308038, "phrase": "communication_laws"}, {"score": 0.004710620078577185, "phrase": "virtual_environments"}, {"score": 0.004494570360108983, "phrase": "human_society"}, {"score": 0.0041562350127140575, "phrase": "acc"}, {"score": 0.004053362743156545, "phrase": "intended_class"}, {"score": 0.004028054020045027, "phrase": "agent_applications"}, {"score": 0.003831169445079928, "phrase": "communication_aspect"}, {"score": 0.003643873052150612, "phrase": "orthogonal_concern"}, {"score": 0.003401148484767927, "phrase": "separate_development"}, {"score": 0.003057346265622334, "phrase": "necessary_acc_management"}, {"score": 0.0029722900280316216, "phrase": "appropriate_portions"}, {"score": 0.0024547897375637308, "phrase": "acc_code"}, {"score": 0.0023493172499168763, "phrase": "source_code_modification"}, {"score": 0.0022413233627905696, "phrase": "computational_reflection"}, {"score": 0.0021789194955896102, "phrase": "communication_primitives"}, {"score": 0.0021517438495635634, "phrase": "agent_programmers"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multi-agent systems", " communication", " contexts", " software engineering", " computational reflection"], "paper_abstract": "Agent Communication Contexts (ACCs) are virtual environments where agents may live and interact. In this way, as in a human society, interactions may be subject to conventions and laws depending on the context where they occur. For this to be possible, an ACC should embed the communication laws relevant to the intended class of agent applications and enforce them, as interactions among agents take place. Although context is a communication aspect relevant for all the agents of an application, its modelling should be, in principle, an orthogonal concern with respect to the design of the activities of each agent. Consistently with this view, this work advocates the separate development of, respectively, agent behaviour, and the interaction aspects constituting the context. The latter is first abstractly specified as a set of communication laws, then automatically implemented by a tool that generates the necessary ACC management and checking code from the specification. The appropriate portions of this code should be activated whenever an interaction between agents takes place, so as to ensure that (i) the constraints specified by the laws are respected by the interaction, and (ii) the actions some of the laws require are carried out before the interaction actually occurs. Moreover, this work proposes an infrastructure whereby ACC code is triggered at runtime, whenever agents interact with each other. No source code modification or recompilation is required for this. All is seamlessly accomplished by means of computational reflection, which transparently changes the meaning of the communication primitives normally used by agent programmers. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "The transparent implementation of agent communication contexts", "paper_id": "WOS:000236442400004"}