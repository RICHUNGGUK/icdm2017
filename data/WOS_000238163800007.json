{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "braess's_paradox"}, {"score": 0.007328600976562439, "phrase": "noncooperative_game"}, {"score": 0.006595569530095642, "phrase": "nash_equilibrium"}, {"score": 0.004792402101614527, "phrase": "designing_networks"}, {"score": 0.004769958800452922, "phrase": "selfish_users"}, {"score": 0.004692227830462433, "phrase": "directed_network"}, {"score": 0.00461575768501871, "phrase": "latency_function"}, {"score": 0.004456044928556639, "phrase": "noncooperative_agents"}, {"score": 0.004424768776701965, "phrase": "network_traffic"}, {"score": 0.003953068310598579, "phrase": "overall_traffic"}, {"score": 0.003934540154108188, "phrase": "nash_equilibria"}, {"score": 0.0038794730876377057, "phrase": "s-t_flows"}, {"score": 0.0038431888954930083, "phrase": "flow_paths"}, {"score": 0.003825173769489887, "phrase": "equal_latency"}, {"score": 0.003798308691078116, "phrase": "natural_measure"}, {"score": 0.0037188360359702182, "phrase": "selfish_agents"}, {"score": 0.0036927150235721226, "phrase": "common_latency"}, {"score": 0.003598492288058048, "phrase": "counterintuitive_but_well-known_fact"}, {"score": 0.003369322866499541, "phrase": "best_flow"}, {"score": 0.0032145922365231093, "phrase": "best_performance"}, {"score": 0.00316212689729006, "phrase": "optimal_inapproximability_results"}, {"score": 0.003147294194425621, "phrase": "approximation_algorithms"}, {"score": 0.003125175084962886, "phrase": "network_design_problem"}, {"score": 0.003045389344692719, "phrase": "approximation_algorithm"}, {"score": 0.0030097975788892896, "phrase": "approximation_ratio"}, {"score": 0.002932948760756593, "phrase": "network_vertices"}, {"score": 0.0028580564897994175, "phrase": "hardness_result"}, {"score": 0.002765490759189057, "phrase": "tight_inapproximability_results"}, {"score": 0.002752513434446804, "phrase": "additional_structure"}, {"score": 0.002688532127821979, "phrase": "network_latency_functions"}, {"score": 0.0026384167183586015, "phrase": "optimal_approximation_algorithm"}, {"score": 0.0026014425686078993, "phrase": "trivial_algorithm"}, {"score": 0.002564985233317994, "phrase": "candidate_edges"}, {"score": 0.0025409639091476363, "phrase": "entire_network"}, {"score": 0.002487734862214081, "phrase": "braess"}, {"score": 0.0023566987138026285, "phrase": "fundamental_generalization"}, {"score": 0.002248366278757655, "phrase": "large_networks"}, {"score": 0.002196077907454079, "phrase": "textbook_example"}, {"score": 0.0021349310877334378, "phrase": "braess's_original_four-node_network"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["selfish routing", " Braess's Paradox", " network design", " approximation algorithms"], "paper_abstract": "We consider a directed network in which every edge possesses a latency function that specifies the time needed to traverse the edge given its congestion. Selfish, noncooperative agents constitute the network traffic and wish to travel from a source vertex s to a destination t as quickly as possible. Since the route chosen by one network user affects the congestion experienced by others, we model the problem as a noncooperative game. Assuming that each agent controls only a negligible portion of the overall traffic, Nash equilibria in this noncooperative game correspond to s-t flows in which all flow paths have equal latency. A natural measure for the performance of a network used by selfish agents is the common latency experienced by users in a Nash equilibrium. Braess's Paradox is the counterintuitive but well-known fact that removing edges from a network can improve its performance. Braess's Paradox motivates the following network design problem: given a network, which edges should be removed to obtain the best flow at Nash equilibrium? Equivalently, given a network of edges that can be built, which subnetwork will exhibit the best performance when used selfishly? We give optimal inapproximability results and approximation algorithms for this network design problem. For example, we prove that there is no approximation algorithm for this problem with approximation ratio less than n/2, where n is the number of network vertices, unless P = NP. We further show that this hardness result is the best possible, by exhibiting an (n/2) -approximation algorithm. We also prove tight inapproximability results when additional structure, such as linearity, is imposed on the network latency functions. Moreover, we prove that an optimal approximation algorithm for these problems is the trivial algorithm: given a network of candidate edges, build the entire network. As a consequence, we show that Braess's Paradox-even in its worst-possible manifestations-is impossible to detect efficiently. En route to these results, we give a fundamental generalization of Braess's Paradox: the improvement in performance that can be effected by removing edges can be arbitrarily large in large networks. Even though Braess's Paradox has enjoyed 35 years as a textbook example, our result is the first to extend its severity beyond that in Braess's original four-node network. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "On the severity of Braess's Paradox: Designing networks for selfish users is hard", "paper_id": "WOS:000238163800007"}