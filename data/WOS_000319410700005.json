{"auto_keywords": [{"score": 0.03219574390683925, "phrase": "gap_function"}, {"score": 0.015719716506582538, "phrase": "infinite_binary_words"}, {"score": 0.01487917005763497, "phrase": "infinite_words"}, {"score": 0.004748556604045108, "phrase": "polynomial_subword_complexity."}, {"score": 0.004491970050862321, "phrase": "polynomial_subword_complexity"}, {"score": 0.0043087201717781085, "phrase": "toeplitz"}, {"score": 0.003775803846431323, "phrase": "simple_method"}, {"score": 0.0035965032173588753, "phrase": "binary_alphabet"}, {"score": 0.0032629585038738856, "phrase": "infinite_number"}, {"score": 0.0029193609786176632, "phrase": "consecutive_b"}, {"score": 0.0021049977753042253, "phrase": "real_number_beta"}], "paper_keywords": ["Binary words", " subword complexity", " gap function"], "paper_abstract": "Most of the constructions of infinite words having polynomial subword complexity are quite complicated, e. g., sequences of Toeplitz, sequences defined by billiards in the cube, etc. In this paper, we describe a simple method for constructing infinite words w over a binary alphabet {a, b} with polynomial subword complexity p(w). Assuming w contains an infinite number of a's, our method is based on the gap function which gives the distances between consecutive b's. It is known that if the gap function is injective, we can obtain at most quadratic subword complexity, and if the gap function is blockwise injective, we can obtain at most cubic subword complexity. Here, we construct infinite binary words w such that p(w)(n) = Theta(n(beta)) for any real number beta > 1.", "paper_title": "A NOTE ON CONSTRUCTING INFINITE BINARY WORDS WITH POLYNOMIAL SUBWORD COMPLEXITY", "paper_id": "WOS:000319410700005"}