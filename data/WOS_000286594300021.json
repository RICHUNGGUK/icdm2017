{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "programming_language"}, {"score": 0.004742511243894382, "phrase": "programming_environment"}, {"score": 0.004264923517966271, "phrase": "professional_programmer"}, {"score": 0.0040444053843446326, "phrase": "teaching_languages"}, {"score": 0.0038062581748678245, "phrase": "\"professional\"_languages"}, {"score": 0.0036924762294207633, "phrase": "functional_language"}, {"score": 0.003320277992107974, "phrase": "careful_adaptation"}, {"score": 0.0026040262154057607, "phrase": "didactic_approach"}, {"score": 0.0025260919226344305, "phrase": "design_programs"}, {"score": 0.0024319378563138223, "phrase": "design_process"}], "paper_keywords": ["Design", " Languages", " Introductory Programming"], "paper_abstract": "A student learning how to program learns best when the programming language and programming environment cater to her specific needs. These needs are different from the requirements of a professional programmer. Consequently, the design of teaching languages poses challenges different from the design of \"professional\" languages. Using a functional language by itself gives advantages over more popular, professional languages, but fully exploiting these advantages requires careful adaptation to the needs of the students-as-is, these languages do not support the students nearly as well as they could. This paper describes our experience adopting the didactic approach of How to Design Programs, focussing on the design process for our own set of teaching languages. We have observed students as they try to program as part of our introductory course, and used these observations to significantly improve the design of these languages. This paper describes the changes we have made, and the journey we took to get there.", "paper_title": "Experience Report: Growing Programming Languages for Beginning Students", "paper_id": "WOS:000286594300021"}