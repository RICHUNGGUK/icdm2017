{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "flash_memory"}, {"score": 0.012468142640984788, "phrase": "false_positive_rates"}, {"score": 0.004767261858417823, "phrase": "hot_data_identification"}, {"score": 0.004650086856905758, "phrase": "great_interest"}, {"score": 0.004513255056769647, "phrase": "garbage_collection"}, {"score": 0.004209369306023422, "phrase": "bloom_filters"}, {"score": 0.003848413823574867, "phrase": "significant_trade-off"}, {"score": 0.00367967106192446, "phrase": "hash_value_collisions"}, {"score": 0.003643185395780667, "phrase": "memory_utilization"}, {"score": 0.0034834098902271626, "phrase": "better_data_categorization_mechanism"}, {"score": 0.003380791705551809, "phrase": "hashing_technique"}, {"score": 0.0033140589981208693, "phrase": "random_polynomials"}, {"score": 0.0031686717525002935, "phrase": "lower_memory_consumption"}, {"score": 0.0031061129850110994, "phrase": "based_schemes"}, {"score": 0.003014576010931602, "phrase": "new_methodology"}, {"score": 0.002969821115740559, "phrase": "write_requests"}, {"score": 0.0028822890425197582, "phrase": "hot_and_cold_write_requests"}, {"score": 0.0028394925080958205, "phrase": "flash_memory_software_layer"}, {"score": 0.0027420849306344698, "phrase": "ftl"}, {"score": 0.0026612444314342023, "phrase": "space_utilization"}, {"score": 0.0026086775334428617, "phrase": "logical_block_number"}, {"score": 0.0025066304722422463, "phrase": "hash_table"}, {"score": 0.002444883254621769, "phrase": "extremely_low_error_rate"}, {"score": 0.0023609780669713288, "phrase": "hash_function"}, {"score": 0.0023143284925318916, "phrase": "address_space"}, {"score": 0.0022016885701010088, "phrase": "lower_false_identification_rates"}, {"score": 0.002126111716875142, "phrase": "mathematical_analysis"}, {"score": 0.0021049977753042253, "phrase": "trace-driven_simulation"}], "paper_keywords": ["Hot data identification", " Bloom filter", " FTL", " flash memory"], "paper_abstract": "Hot data identification in flash memory is of great interest because it significantly affects the garbage collection and wear-leveling performance. Presently, certain hot and cold data classification schemes based on Bloom filters (BFs) have been proposed. Although BFs are efficient in most cases, there is a significant trade-off between false positive rates, which are the result of hash value collisions and memory utilization. In this paper, we suggest a better data categorization mechanism that is based on a hashing technique called Fingerprinting by Random Polynomials with the aim of reducing false positive rates and achieving lower memory consumption compared to the BF-based schemes. We also introduce a new methodology for classifying write requests by linking the definition of hot and cold write requests to the flash memory software layer, the flash translation layer (FTL) characteristics. Our approach improves space utilization by representing each logical block number (lbn) by one counter in the hash table, and achieves an extremely low error rate by choosing the degree of the hash function based on the address space of the flash memory. In addition, we achieved lower false identification rates. We demonstrate the performance using mathematical analysis and trace-driven simulation.", "paper_title": "Efficient FTL-Aware Data Categorization and Identification Scheme for Flash Memory", "paper_id": "WOS:000359784800003"}