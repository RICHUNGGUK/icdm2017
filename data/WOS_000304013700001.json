{"auto_keywords": [{"score": 0.04714657528813317, "phrase": "types"}, {"score": 0.00481495049065317, "phrase": "dependent_types"}, {"score": 0.004007083686875716, "phrase": "typing_judgement"}, {"score": 0.003961330917648707, "phrase": "system_f"}, {"score": 0.0038271712887391015, "phrase": "relational_statement"}, {"score": 0.0037617986040878342, "phrase": "second-order_predicate_logic"}, {"score": 0.003531474887552889, "phrase": "similar_result"}, {"score": 0.0034911335714333507, "phrase": "pure_type_systems"}, {"score": 0.003391896455861902, "phrase": "pts"}, {"score": 0.003277327351139926, "phrase": "programming_language"}, {"score": 0.002472822097373027, "phrase": "relational_interpretation"}, {"score": 0.002375253757224999, "phrase": "inductive_families"}, {"score": 0.0022041312401435346, "phrase": "parametricity_condition"}, {"score": 0.0021049977753042253, "phrase": "generated_logic"}], "paper_keywords": [""], "paper_abstract": "Reynolds' abstraction theorem (Reynolds, J. C. (1983) Types, abstraction and parametric polymorphism, Inf. Process. 83(1), 513-523) shows how a typing judgement in System F can be translated into a relational statement (in second-order predicate logic) about inhabitants of the type. We obtain a similar result for pure type systems (PTSs): for any PTS used as a programming language, there is a PTS that can be used as a logic for parametricity. Types in the source PTS are translated to relations (expressed as types) in the target. Similarly, values of a given type are translated to proofs that the values satisfy the relational interpretation. We extend the result to inductive families. We also show that the assumption that every term satisfies the parametricity condition generated by its type is consistent with the generated logic.", "paper_title": "Proofs for free Parametricity for dependent types", "paper_id": "WOS:000304013700001"}