{"auto_keywords": [{"score": 0.03597927187198435, "phrase": "analysis_queries"}, {"score": 0.004757227624616643, "phrase": "aggressive_compiler_optimizations"}, {"score": 0.0046159158660556985, "phrase": "program_dependence_graph"}, {"score": 0.004398457709182882, "phrase": "loop_fission"}, {"score": 0.004216566615939546, "phrase": "dependence_cycles"}, {"score": 0.004140928978625366, "phrase": "pdg."}, {"score": 0.0038516336597530614, "phrase": "naive_method"}, {"score": 0.0036479584876742085, "phrase": "full_pdg."}, {"score": 0.0035181731203867456, "phrase": "aggressive_optimizations"}, {"score": 0.003332072426367186, "phrase": "program_size"}, {"score": 0.0030991131563500446, "phrase": "small_scopes"}, {"score": 0.00306189690236109, "phrase": "weaker_but_faster_analyses"}], "paper_keywords": ["Demand-driven analysis", " Dependence analysis", " Program Dependence Graph", " Strongly connected components"], "paper_abstract": "Aggressive compiler optimizations are formulated around the Program Dependence Graph (PDG). Many techniques, including loop fission and parallelization are concerned primarily with dependence cycles in the PDG. The Directed Acyclic Graph of Strongly Connected Components (DAG(SCC)) represents these cycles directly. The naive method to construct the DAG(SCC) first computes the full PDG. This approach limits adoption of aggressive optimizations because the number of analysis queries grows quadratically with program size, making DAG(SCC) construction expensive. Consequently, compilers optimize small scopes with weaker but faster analyses. We observe that many PDG edges do not affect the DAG(SCC) and that ignoring them cannot affect clients of the DAG(SCC). Exploiting this insight, we present an algorithm to omit those analysis queries to compute the DAG(SCC) efficiently. Across 366 hot loops from 20 SPEC2006 benchmarks, this method computes the DAG(SCC) in half of the time using half as many queries.", "paper_title": "Fast Condensation of the Program Dependence Graph", "paper_id": "WOS:000321865400005"}