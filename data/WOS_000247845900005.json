{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "black_hole"}, {"score": 0.0065621017393800935, "phrase": "starting_node"}, {"score": 0.0047517225918491226, "phrase": "synchronous_tree_networks"}, {"score": 0.004566954456805558, "phrase": "highly_harmful_stationary_process"}, {"score": 0.00424659225577246, "phrase": "mobile_agents"}, {"score": 0.0033025823350563087, "phrase": "minimum_number"}, {"score": 0.0028549396580672417, "phrase": "fastest-possible_black_hole_search"}, {"score": 0.0027437235598539904, "phrase": "arbitrary_trees"}, {"score": 0.0025509294021449254, "phrase": "optimal_black_hole_search_algorithms"}, {"score": 0.0022641658133181115, "phrase": "internal_node"}], "paper_keywords": [""], "paper_abstract": "A black hole is a highly harmful stationary process residing in a node of a network and destroying all mobile agents visiting the node, without leaving any trace. We consider the task of locating a black hole in a (partially) synchronous tree network, assuming an upper bound on the time of any edge traversal by an agent. The minimum number of agents capable of identifying a black hole is two. For a given tree and given starting node we are interested in the fastest-possible black hole search by two agents. For arbitrary trees we give a 5/3-approximation algorithm for this problem. We give optimal black hole search algorithms for two 'extreme' classes of trees: the class of lines and the class of trees in which any internal node (including the root which is the starting node) has at least two children.", "paper_title": "Searching for a black hole in synchronous tree networks", "paper_id": "WOS:000247845900005"}