{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_checker"}, {"score": 0.0045122922461952805, "phrase": "state-based_specifications"}, {"score": 0.00387011040370557, "phrase": "downward_and_upward_simulations"}, {"score": 0.0037797419108291227, "phrase": "standard_approach"}, {"score": 0.0036697319652557363, "phrase": "state-based_notations"}, {"score": 0.0033984088755183287, "phrase": "existing_temporal_logic_model_checkers"}, {"score": 0.0032223742018434856, "phrase": "branching_time"}, {"score": 0.00320338467974835, "phrase": "temporal_logic_ctl"}, {"score": 0.0030735451757603555, "phrase": "standard_simulation_conditions"}, {"score": 0.0027469703311742647, "phrase": "reactive_systems"}, {"score": 0.0023277282036119106, "phrase": "state-based_specification_language"}, {"score": 0.0022201273900989416, "phrase": "z_specifications"}, {"score": 0.002142696637011647, "phrase": "sal_ctl_model_checker"}, {"score": 0.0021049977753042253, "phrase": "small_example"}], "paper_keywords": ["state-based specifications", " Z refinement", " downward and upward simulations", " model checking", " CTL"], "paper_abstract": "In this paper, we consider how refinements between state-based specifications (e.g., written in Z) can be checked by use of a model checker. Specifically, we are interested in the verification of downward and upward simulations which are the standard approach to verifying refinements in state-based notations. We show how downward and upward simulations can be checked using existing temporal logic model checkers. In particular, we show how the branching time temporal logic CTL can be used to encode the standard simulation conditions. We do this for both a blocking, or guarded, interpretation of operations (often used when specifying reactive systems) as well as the more common non-blocking interpretation of operations used in many state-based specification languages (for modelling sequential systems). The approach is general enough to use with any state-based specification language, and we illustrate how refinements between Z specifications can be checked using the SAL CTL model checker using a small example.", "paper_title": "Verifying data refinements using a model checker", "paper_id": "WOS:000240071700002"}