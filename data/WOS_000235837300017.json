{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "minimum_space"}, {"score": 0.004773040022691547, "phrase": "practical_applications"}, {"score": 0.004669845451682529, "phrase": "multi-variate_records"}, {"score": 0.004568871736067739, "phrase": "different_attributes"}, {"score": 0.004431149592844886, "phrase": "students'_grades"}, {"score": 0.004278807087784626, "phrase": "student_performance"}, {"score": 0.004186253035932442, "phrase": "\"overall_score"}, {"score": 0.0035761913760242697, "phrase": "student_grade"}, {"score": 0.0033489371483830153, "phrase": "k_students"}, {"score": 0.003305243635051068, "phrase": "best_scores"}, {"score": 0.0031360786664165093, "phrase": "top-k_queries"}, {"score": 0.0030414140732789186, "phrase": "constant_c"}, {"score": 0.002949598537993663, "phrase": "low_worst-case_query_cost"}, {"score": 0.0027863537694678094, "phrase": "novel_concept"}, {"score": 0.0026321198895843173, "phrase": "correct_answers"}, {"score": 0.0021705796895687864, "phrase": "disk_page_capacity"}, {"score": 0.0021516366862117707, "phrase": "similar_results"}, {"score": 0.0021049977753042253, "phrase": "higher_dimensionalities"}], "paper_keywords": [""], "paper_abstract": "Practical applications often need to rank multi-variate records by assigning various priorities to different attributes. Consider a relation that stores students' grades on two courses: database and algorithm. Student performance is evaluated by an \"overall score\" calculated as w(1) (.) g(db) + w(2) . g(alg), where w(1), w(2) are two input \"weights\", and g(db) (g(alg)) is the student grade on database (algorithm). A \"top-k ranked query\" retrieves the k students with the best scores according to specific w(1) and w(2). We focus on top-k queries whose k is bounded by a constant c, and present solutions that guarantee low worst-case query cost by using provably the minimum space. The core of our methods is a novel concept, \"minimum covering subset\", which contains only the necessary data for ensuring correct answers for all queries. Any 2D ranked search, for example, can be processed in O(logB (m/B) + c/B) I/Os using 0(m/B) space, where m is the size of the minimum covering subset, and B the disk page capacity. Similar results are also derived for higher dimensionalities and approximate ranked retrieval.", "paper_title": "Processing ranked queries with the minimum space", "paper_id": "WOS:000235837300017"}