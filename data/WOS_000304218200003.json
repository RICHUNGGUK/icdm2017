{"auto_keywords": [{"score": 0.04931358686155013, "phrase": "high_level_synthesis"}, {"score": 0.008453755945760958, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "integrated_scheduling"}, {"score": 0.004776297980616768, "phrase": "module_selection"}, {"score": 0.004699916946246509, "phrase": "application_specific_processor_design"}, {"score": 0.004550783060775205, "phrase": "industry_de_facto_standard"}, {"score": 0.004496080495247288, "phrase": "application_specific_processors"}, {"score": 0.004147756103284082, "phrase": "efficient_exploration_approach"}, {"score": 0.0039677715255034595, "phrase": "significant_speed"}, {"score": 0.0038885527668812807, "phrase": "novel_exploration_approach"}, {"score": 0.003749908582313067, "phrase": "final_power_dissipation"}, {"score": 0.003675023529026644, "phrase": "minimal_control_step"}, {"score": 0.003487222504700868, "phrase": "proposed_'primacy"}, {"score": 0.0031909403420958752, "phrase": "local_optimal_solutions"}, {"score": 0.0031398318568608505, "phrase": "global_solutions"}, {"score": 0.0029913511336659327, "phrase": "intersect_matrix'_topology"}, {"score": 0.002872979681637667, "phrase": "precedence_violation"}, {"score": 0.0027704444816096484, "phrase": "s-value_method_metric"}, {"score": 0.0026932247685847246, "phrase": "highest_priority_node"}, {"score": 0.002628747284714371, "phrase": "scheduling_optimization_process"}, {"score": 0.002607598760956807, "phrase": "comparative_analysis"}, {"score": 0.002524688179363081, "phrase": "existing_design_space_exploration_method"}, {"score": 0.0024742098091226203, "phrase": "proposed_'quality_cost_factor"}, {"score": 0.002385872451981323, "phrase": "average_improvement"}, {"score": 0.0023287359930308864, "phrase": "final_scheduling_solution"}, {"score": 0.0023099954987126, "phrase": "average_reduction"}, {"score": 0.002272964710550345, "phrase": "exploration_runtime"}, {"score": 0.002182958452794581, "phrase": "current_scheduling_approach"}, {"score": 0.0021566565951738658, "phrase": "dsp_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Integrated exploration", " Application specific processor", " S-value", " Intersect Matrix", " Q-metric"], "paper_abstract": "High level synthesis has now almost become an industry de facto standard for designing Application Specific Processors (ASPs) and Application Specific Integrated Circuits (ASICs). High level synthesis (HLS) designing requires an efficient exploration approach with the ability to determine optimal/near-optimal scheduling solutions and module selection with significant speed and precision. A novel exploration approach using the 'S-value' method that reduces the final power dissipation of the solution using minimal control step is presented in this paper. This approach is based on the proposed 'Primacy Selector (S-value)' metric and 'Intersect Matrix' topology methods that have a tendency to escape local optimal solutions and thereby reach global solutions. Two novel aspects discussed in this paper are: (a) introduction of 'Intersect Matrix' topology with its associated algorithm, which is used to check for precedence violation during scheduling, (b) introduction of S-value method metric, which assists in choosing the highest priority node during each iteration of the scheduling optimization process. Comparative analysis of the proposed approach is done with an existing design space exploration method for qualitative assessment using proposed 'Quality Cost Factor (Q-metric)'. An average improvement of approximately 5.07% in quality of final scheduling solution and average reduction of 59% in exploration runtime has been achieved by the proposed approach compared to a current scheduling approach for the DSP benchmarks. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Rapid exploration of integrated scheduling and module selection in high level synthesis for application specific processor design", "paper_id": "WOS:000304218200003"}