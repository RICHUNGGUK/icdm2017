{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_stream_processing"}, {"score": 0.004633429997452688, "phrase": "profitability_problem"}, {"score": 0.0044873778175404475, "phrase": "general-purpose_distributed_data_stream_processing_applications"}, {"score": 0.004208881856146758, "phrase": "application's_data_flow_graph"}, {"score": 0.0035173498506324476, "phrase": "profitability_question"}, {"score": 0.0033200826267264383, "phrase": "best_throughput"}, {"score": 0.0030938932434437178, "phrase": "workload_dynamics"}, {"score": 0.003054450075234415, "phrase": "resource_availability"}, {"score": 0.0028463059289874637, "phrase": "elastic_auto-parallelization_solution"}, {"score": 0.002635339648135844, "phrase": "high_throughput"}, {"score": 0.0024399717841513354, "phrase": "partitioned_stateful_operators"}, {"score": 0.0024088451312725924, "phrase": "run-time_state_migration"}, {"score": 0.0022882500116799777, "phrase": "application_developers"}, {"score": 0.0021049977753042253, "phrase": "industrial-strength_data_stream_processing_platform"}], "paper_keywords": ["Data stream processing", " parallelization", " elasticity"], "paper_abstract": "This article addresses the profitability problem associated with auto-parallelization of general-purpose distributed data stream processing applications. Auto-parallelization involves locating regions in the application's data flow graph that can be replicated at run-time to apply data partitioning, in order to achieve scale. In order to make auto-parallelization effective in practice, the profitability question needs to be answered: How many parallel channels provide the best throughput? The answer to this question changes depending on the workload dynamics and resource availability at run-time. In this article, we propose an elastic auto-parallelization solution that can dynamically adjust the number of channels used to achieve high throughput without unnecessarily wasting resources. Most importantly, our solution can handle partitioned stateful operators via run-time state migration, which is fully transparent to the application developers. We provide an implementation and evaluation of the system on an industrial-strength data stream processing platform to validate our solution.", "paper_title": "Elastic Scaling for Data Stream Processing", "paper_id": "WOS:000337966400008"}