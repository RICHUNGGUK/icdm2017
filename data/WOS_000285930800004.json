{"auto_keywords": [{"score": 0.04064296861963436, "phrase": "ppv"}, {"score": 0.008207343505663855, "phrase": "node-lists"}, {"score": 0.00481495049065317, "phrase": "mining_frequent_patterns"}, {"score": 0.004779564521350969, "phrase": "vertical_mining_methods"}, {"score": 0.004674952036988355, "phrase": "frequent_patterns"}, {"score": 0.004606479650820579, "phrase": "horizontal_mining_methods"}, {"score": 0.004522291357556591, "phrase": "vertical_methods"}, {"score": 0.004439634831927606, "phrase": "intersection_time"}, {"score": 0.0039016690475620185, "phrase": "novel_vertical_algorithm"}, {"score": 0.003844478919573134, "phrase": "fast_frequent_pattern_discovery"}, {"score": 0.0037463983616303786, "phrase": "data_structure"}, {"score": 0.003623949225126944, "phrase": "coding_prefix-tree"}, {"score": 0.003304339421246321, "phrase": "previous_proposed_vertical_structure"}, {"score": 0.0031727643282003976, "phrase": "common_prefixes"}, {"score": 0.0028928306994090453, "phrase": "intersecting_two_node-lists"}, {"score": 0.0027982016314450717, "phrase": "efficient_strategy"}, {"score": 0.0026277995163948263, "phrase": "ancestor-descendant_relationship"}, {"score": 0.002551231163230566, "phrase": "basic_step"}, {"score": 0.0025324393547676623, "phrase": "intersecting_node-lists"}, {"score": 0.0024586427394152196, "phrase": "pre-post_codes"}, {"score": 0.0023781830071954364, "phrase": "fp-growth"}, {"score": 0.0022168460543913787, "phrase": "experimental_results"}, {"score": 0.0021682027434117095, "phrase": "efficient_algorithm"}, {"score": 0.002128481465238708, "phrase": "eclat"}, {"score": 0.0021049977753042253, "phrase": "declat"}], "paper_keywords": ["data mining", " frequent pattern mining", " data structure", " algorithm"], "paper_abstract": "Vertical mining methods are very effective for mining frequent patterns and usually outperform horizontal mining methods. However, the vertical methods become ineffective since the intersection time starts to be costly when the cardinality of tidset (tid-list or diffset) is very large or there are a very large number of transactions. In this paper, we propose a novel vertical algorithm called PPV for fast frequent pattern discovery. PPV works based on a data structure called Node-lists, which is obtained from a coding prefix-tree called PPC-tree. The efficiency of PPV is achieved with three techniques. First, the Node-list is much more compact compared with previous proposed vertical structure (such as tid-lists or diffsets) since transactions with common prefixes share the same nodes of the PPC-tree. Second, the counting of support is transformed into the intersection of Node-lists and the complexity of intersecting two Node-lists can be reduced to O(m+n) by an efficient strategy, where m and n are the cardinalities of the two Node-lists respectively. Third, the ancestor-descendant relationship of two nodes, which is the basic step of intersecting Node-lists, can be very efficiently verified by Pre-Post codes of nodes. We experimentally compare our algorithm with FP-growth, and two prominent vertical algorithms (Eclat and dEclat) on a number of databases. The experimental results show that PPV is an efficient algorithm that outperforms FP-growth, Eclat, and dEclat.", "paper_title": "A New Fast Vertical Method for Mining Frequent Patterns", "paper_id": "WOS:000285930800004"}