{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multi-core_soc_platforms"}, {"score": 0.004757227624616643, "phrase": "data-flow_models"}, {"score": 0.004671932143798307, "phrase": "renewed_attention"}, {"score": 0.004505881071218599, "phrase": "efficient_mapping"}, {"score": 0.004267757384195032, "phrase": "key_problem"}, {"score": 0.004165987300206134, "phrase": "maximum-throughput_allocation"}, {"score": 0.00406663414150229, "phrase": "synchronous_data-flow_graphs"}, {"score": 0.003922011960904278, "phrase": "multi-core_architecture"}, {"score": 0.0038765307820371486, "phrase": "np"}, {"score": 0.0035181731203867456, "phrase": "global_optimality"}, {"score": 0.003232956879952914, "phrase": "maximum-throughput_mapping"}, {"score": 0.0031367803372203498, "phrase": "sdfg"}, {"score": 0.003099113156350047, "phrase": "multi-core_architectures"}, {"score": 0.002865056798580795, "phrase": "sdf"}, {"score": 0.0025853238923610076, "phrase": "constraint_programming"}, {"score": 0.0024632912250657636, "phrase": "realistic_instances"}, {"score": 0.0023470051993423483, "phrase": "extensive_experiments"}, {"score": 0.002304824112812496, "phrase": "large_number"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Scheduling", " Constraint programming", " Mapping", " Multi-core platforms", " Acceleration of parallel execution"], "paper_abstract": "Data-Flow models are attracting renewed attention because they lend themselves to efficient mapping on. multi-core architectures. The key problem of finding a maximum-throughput allocation and scheduling of Synchronous Data-Flow graphs (SDFGs) onto a multi-core architecture is NP-hard and has been traditionally solved by means of heuristic (incomplete) algorithms with no guarantee of global optimality. In this paper we propose an exact (complete) algorithm for the computation of a maximum-throughput mapping of applications specified as SDFG onto multi-core architectures. This is, to the best of our knowledge, the first complete algorithm for generic SDF graphs, including those with loops and a finite iteration bound. Our approach is based on Constraint Programming, it guarantees optimality and can handle realistic instances in terms of size and complexity. Extensive experiments on a large number of SDFGs demonstrate that our approach is effective and robust. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Maximum-throughput mapping of SDFGs on multi-core SoC platforms", "paper_id": "WOS:000323404700001"}