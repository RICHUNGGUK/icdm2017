{"auto_keywords": [{"score": 0.018589502090159717, "phrase": "subsequence_matching"}, {"score": 0.014757732005709253, "phrase": "post-processing_step"}, {"score": 0.012138063161175563, "phrase": "performance_bottleneck"}, {"score": 0.008298587096132196, "phrase": "entire_subsequence_matching"}, {"score": 0.006721326762555821, "phrase": "time-series_databases"}, {"score": 0.005417359070336888, "phrase": "previous_methods"}, {"score": 0.004296264970612285, "phrase": "effective_method"}, {"score": 0.004081385289516914, "phrase": "disk_access"}, {"score": 0.004058180509184539, "phrase": "cpu_processing_times"}, {"score": 0.003968890769363516, "phrase": "data_set"}, {"score": 0.0039463230440269165, "phrase": "real-world_stock_sequences"}, {"score": 0.003932883240257402, "phrase": "preliminary_experiments"}, {"score": 0.003802716498398173, "phrase": "data_sets"}, {"score": 0.003781090078647812, "phrase": "large_numbers"}, {"score": 0.0037789720824759503, "phrase": "main_performance"}, {"score": 0.0037595861862941738, "phrase": "synthetic_sequences"}, {"score": 0.0035898717643894303, "phrase": "crucial_issue"}, {"score": 0.003559284776569813, "phrase": "previous_approaches"}, {"score": 0.0034395119150793787, "phrase": "simple_yet_highly_effective_method"}, {"score": 0.003333252253488408, "phrase": "candidate_subsequences"}, {"score": 0.0032766780632972363, "phrase": "query_sequence"}, {"score": 0.0032027318619522916, "phrase": "disk_accesses"}, {"score": 0.0031845067058084583, "phrase": "cpu_processing"}, {"score": 0.003025063194178549, "phrase": "false_dismissal"}, {"score": 0.002939948763582007, "phrase": "extensive_experimentation"}, {"score": 0.0028653893877383188, "phrase": "significantly_faster_post-processing_step"}, {"score": 0.002339629270626007, "phrase": "excellent_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["data mining", " time-series databases", " similar sequence matching", " performance"], "paper_abstract": "Subsequence matching is an operation that finds subsequences whose changing patterns are similar to a given query sequence from time-series databases. This paper identifies a performance bottleneck in subsequence matching, and then proposes an effective method that substantially improves the performance of entire subsequence matching by resolving the performance bottleneck. First, we analyze the disk access and CPU processing times required during the index searching and post-processing steps of subsequence matching through preliminary experiments. Based on these results, we show that the post-processing step is a main performance, bottleneck in subsequence matching. Then, we argue that the optimization of the post-processing step is a crucial issue overlooked in previous approaches. In order to resolve the performance bottleneck, we propose a simple yet highly effective method for expediting the post-processing step. By rearranging the order of candidate subsequences to be compared with a query sequence, our method completely eliminates the redundancies of disk accesses and CPU processing that occur in the post-processing step. Our method is fairly efficient, and does not incur any false dismissal. We quantitatively demonstrate the superiority of our method through extensive experimentation. The results show that our method produces a significantly faster post-processing step; When using a data set of real-world stock sequences, our method was 43.36-96.75 times faster than previous methods, and when using data sets of large numbers of synthetic sequences, our method was 12.48-26.95 times faster than previous methods. Also, the results show that our method reduces the weight of the post-processing step over entire subsequence matching from more than 97% to less than 67%. This implies that our method successfully resolves the performance bottleneck in subsequence matching. As a result, our method provides excellent performance in entire subsequence matching. Compared with previous methods, our method is 16.17-32.64 times faster when using a data set of real-world stock sequences and 8.64-14.29 times faster when using data sets of large numbers of synthetic sequences. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Performance bottleneck of subsequence matching in time-series databases: Observation, solution, and performance evaluation", "paper_id": "WOS:000250016200001"}