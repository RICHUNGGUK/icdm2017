{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "temporal_constraints"}, {"score": 0.049352273134126406, "phrase": "xml_schema"}, {"score": 0.004563880494020726, "phrase": "xml_documents"}, {"score": 0.0038271712887391015, "phrase": "sequenced_constraints"}, {"score": 0.0034118234596993836, "phrase": "new_variants"}, {"score": 0.0032585499655442404, "phrase": "so-called_nonsequenced_constraints"}, {"score": 0.0031360786664165093, "phrase": "temporal_documents"}, {"score": 0.0028170314398963704, "phrase": "transaction_time"}, {"score": 0.002472822097373027, "phrase": "temporal_schema"}, {"score": 0.0023435920614377306, "phrase": "temporal_document"}, {"score": 0.0021872912745910127, "phrase": "conventional_xml"}, {"score": 0.0021375377706211686, "phrase": "conventional_tools"}, {"score": 0.0021049977753042253, "phrase": "xmllint"}], "paper_keywords": ["Cardinality constraint", " key constraint", " referential integrity", " temporal data", " XML validation", " XML Schema constraint"], "paper_abstract": "If past versions of XML documents are retained, what of the various integrity constraints defined in XML Schema on those documents? This paper describes how to interpret such constraints as sequenced constraints, applicable at each point in time. We also consider how to add new variants that apply across time, so-called nonsequenced constraints. Our approach supports temporal documents that vary over both valid and transaction time, whose schema can vary over transaction time. We do this by replacing the schema with a (possibly time-varying) temporal schema and replacing the document with a temporal document, both of which are upward compatible with conventional XML and with conventional tools like XMLLINT, which we have extended to support the temporal constraints introduced here.", "paper_title": "Adding Temporal Constraints to XML Schema", "paper_id": "WOS:000305900500002"}