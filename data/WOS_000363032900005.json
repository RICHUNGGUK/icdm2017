{"auto_keywords": [{"score": 0.040415472510721626, "phrase": "api_documentation"}, {"score": 0.00481495049065317, "phrase": "reference_api_documentation"}, {"score": 0.004765173195920904, "phrase": "reference_documentation"}, {"score": 0.004691465925553365, "phrase": "important_source"}, {"score": 0.004594951819987416, "phrase": "api_usage"}, {"score": 0.004317109072311102, "phrase": "irrelevant_text"}, {"score": 0.004184526032558792, "phrase": "non-intuitive_api_element"}, {"score": 0.0035245918797629804, "phrase": "text_fragments"}, {"score": 0.003015143226706584, "phrase": "word_patterns"}, {"score": 0.0028771413440398614, "phrase": "new_fragments"}, {"score": 0.0028325548627901004, "phrase": "similar_knowledge"}, {"score": 0.002803213985198645, "phrase": "unseen_documentation"}, {"score": 0.002674885993329912, "phrase": "krec"}, {"score": 0.0026061419474030633, "phrase": "information_filtering"}, {"score": 0.0025259712348798323, "phrase": "evaluation_study"}, {"score": 0.002499798127196099, "phrase": "randomly-sampled_method_definitions"}, {"score": 0.002473895542219933, "phrase": "ten_open_source_systems"}, {"score": 0.0021605514226546497, "phrase": "ten_independent_assessors"}, {"score": 0.0021381565332182773, "phrase": "indispensable_knowledge_items"}, {"score": 0.0021049977753042253, "phrase": "api_types"}], "paper_keywords": ["Application programming interfaces", " API documentation", " Text classification", " Natural language processing", " Recommendation systems"], "paper_abstract": "Reference documentation is an important source of information on API usage. However, information useful to programmers can be buried in irrelevant text, or attached to a non-intuitive API element, making it difficult to discover. We propose to detect and recommend fragments of API documentation potentially important to a programmer who has already decided to use a certain API element. We categorize text fragments in API documentation based on whether they contain information that is indispensable, valuable, or neither. From the fragments that contain knowledge worthy of recommendation, we extract word patterns, and use these patterns to automatically find new fragments that contain similar knowledge in unseen documentation. We implemented our technique in a tool, Krec, that supports both information filtering and discovery. In an evaluation study with randomly-sampled method definitions from ten open source systems, we found that with a training set derived from about 1000 documentation units, we could issue recommendations with 90 % precision and 69 % recall. In a study involving ten independent assessors, indispensable knowledge items recommended for API types were judged useful 57 % of the time and potentially useful an additional 30 % of the time.", "paper_title": "Recommending reference API documentation", "paper_id": "WOS:000363032900005"}