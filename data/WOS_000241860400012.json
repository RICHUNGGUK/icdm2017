{"auto_keywords": [{"score": 0.04491514595853308, "phrase": "exceptional_situations"}, {"score": 0.009076451728603647, "phrase": "user_goals"}, {"score": 0.00481495049065317, "phrase": "use_cases"}, {"score": 0.004583464412234181, "phrase": "normal_interaction"}, {"score": 0.004429727701202369, "phrase": "dependable_software"}, {"score": 0.004379631619412168, "phrase": "first_step"}, {"score": 0.003908678575537341, "phrase": "incomplete_system_specification"}, {"score": 0.003650687199498576, "phrase": "unreliable_way"}, {"score": 0.0033329032920236994, "phrase": "use_case"}, {"score": 0.003320277992107974, "phrase": "based_requirements"}, {"score": 0.002940487679224863, "phrase": "possible_exceptional_situations"}, {"score": 0.002746225320405654, "phrase": "system-related_exceptional_situations"}, {"score": 0.0025260919226344305, "phrase": "recovery_measures"}, {"score": 0.002350196395175188, "phrase": "handler_use_cases"}, {"score": 0.002305974875400655, "phrase": "requirements_phase"}, {"score": 0.002279841453843241, "phrase": "extended_uml_use_case_diagram"}, {"score": 0.002254003531073337, "phrase": "standard_use_cases"}, {"score": 0.0021049977753042253, "phrase": "exception_table"}], "paper_keywords": [""], "paper_abstract": "During the execution of an application many exceptional situations arise that interrupt the normal interaction of the system with its environment. When developing dependable software, the first step is to foresee these exceptional situations and document how the system should deal with them. Any such exception that is not identified during requirements elicitation might potentially lead to an incomplete system specification during analysis, and ultimately to an implementation that lacks certain functionality, or even behaves in an unreliable way, or in a way that is not expected by the users of the system. This paper outlines an approach that extends use case based requirements elicitation with ideas from the exception handling world. After defining the actors and the goals they pursue when interacting with the system, our approach leads a developer to systematically investigate possible exceptional situations that the system may be exposed to: exceptional situations arising in the environment that change user goals and system-related exceptional situations that threaten to fail user goals. The process requires the developer to specify means that detect such situations, and define the recovery measures, i.e. the exceptional interaction between the actors and the system, necessary to recover from such situations in handler use cases. To conclude the requirements phase, an extended UML use case diagram summarizes the standard use cases, exceptions, handlers and their relationships. In addition, all exceptional situations are carefully documented in an exception table.", "paper_title": "Exception-aware requirements elicitation with use cases", "paper_id": "WOS:000241860400012"}