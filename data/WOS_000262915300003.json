{"auto_keywords": [{"score": 0.04937796800720993, "phrase": "lambda_calculus"}, {"score": 0.04137164392198624, "phrase": "dlal"}, {"score": 0.00481495049065317, "phrase": "polynomial_time_computation"}, {"score": 0.0045726187330434025, "phrase": "polymorphic_type_system"}, {"score": 0.004406994912939125, "phrase": "well-typed_programs"}, {"score": 0.00424734451992536, "phrase": "polynomial_time"}, {"score": 0.003858697684681798, "phrase": "simple_type_language"}, {"score": 0.0036914757355166966, "phrase": "intuitionistic_type_arrow"}, {"score": 0.0034034331737042363, "phrase": "light_affine_logic"}, {"score": 0.0031610716953208184, "phrase": "lal"}, {"score": 0.003069006373093756, "phrase": "good_properties"}, {"score": 0.0028293966058473476, "phrase": "subject_reduction"}, {"score": 0.002726740692380339, "phrase": "well-typed_term"}], "paper_keywords": ["Linear logic", " Light linear logic", " Lambda calculus", " Type system", " Implicit computational complexity", " Polynomial time complexity"], "paper_abstract": "We present a polymorphic type system for lambda calculus ensuring that well-typed programs can be executed in polynomial time: dual light affine logic (DLAL). DLAL has a simple type language with a linear and an intuitionistic type arrow, and one modality. It corresponds to a fragment of light affine logic (LAL). We show that contrarily to LAL, DLAL ensures good properties on lambda-terms (and not only on proof-nets): subject reduction is satisfied and a well-typed term admits a polynomial bound on the length of any of its beta reduction sequences. We also give a translation of LAL into DLAL and deduce from it that all polynomial time functions can be represented in DLAL. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Light types for polynomial time computation in lambda calculus", "paper_id": "WOS:000262915300003"}