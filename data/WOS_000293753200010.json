{"auto_keywords": [{"score": 0.04964635174824772, "phrase": "self-stabilizing_algorithm"}, {"score": 0.004706895428234964, "phrase": "distributed_algorithm"}, {"score": 0.004457309741979921, "phrase": "legitimate_state"}, {"score": 0.004417012437860011, "phrase": "finite_time"}, {"score": 0.00429828390000229, "phrase": "external_agent"}, {"score": 0.003996983218174335, "phrase": "asynchronous_distributed_computer_network"}, {"score": 0.003600351201298387, "phrase": "upper_bound"}, {"score": 0.0032577270508271305, "phrase": "total_number"}, {"score": 0.0031129269142224194, "phrase": "space_complexity"}, {"score": 0.00297454367746853, "phrase": "previously_best-known_self-stabilizing_algorithm"}, {"score": 0.0028037753646260937, "phrase": "distributed_fashion"}, {"score": 0.00266693888510356, "phrase": "component_identifier"}, {"score": 0.002316105585203396, "phrase": "self-stabilizing_depth"}, {"score": 0.0022640009579466924, "phrase": "tree_construction"}, {"score": 0.0021049977753042253, "phrase": "time_complexity"}], "paper_keywords": ["Distributed system", " fault-tolerance", " self-stabilization", " depth-first search tree", " cut-pair", " 3-edge-connected component"], "paper_abstract": "A self-stabilizing algorithm is a distributed algorithm that can start from any initial (legitimate or illegitimate) state and eventually converge to a legitimate state in finite time without being assisted by any external agent. In this paper, we propose a self-stabilizing algorithm for finding the 3-edge-connected components of an asynchronous distributed computer network. The algorithm stabilizes in O(dn Delta) rounds and every processor requires O(n log Delta) bits, where Delta(<= n) is an upper bound on the degree of a node, d(<= n) is the diameter of the network, and n is the total number of nodes in the network. These time and space complexity are at least a factor of n better than those of the previously best-known self-stabilizing algorithm for 3-edge-connectivity. The result of the computation is kept in a distributed fashion by assigning, upon stabilization of the algorithm, a component identifier to each processor which uniquely identifies the 3-edge-connected component to which the processor belongs. Furthermore, the algorithm is designed in such a way that its time complexity is dominated by that of the self-stabilizing depth-first search spanning tree construction in the sense that any improvement made in the latter automatically implies improvement in the time complexity of the algorithm.", "paper_title": "SELF-STABILIZING COMPUTATION OF 3-EDGE-CONNECTED COMPONENTS", "paper_id": "WOS:000293753200010"}