{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service_clouds"}, {"score": 0.004750527930368202, "phrase": "basic_requirement"}, {"score": 0.004686963264680882, "phrase": "secure_computer_system"}, {"score": 0.004461051281091779, "phrase": "software_security_patches"}, {"score": 0.004114527599108734, "phrase": "traditional_security_patch_update_systems"}, {"score": 0.003933736547198066, "phrase": "operating_systems"}, {"score": 0.0038810583785936505, "phrase": "distributed_nature"}, {"score": 0.0037948184359488284, "phrase": "cloud_compound"}, {"score": 0.0037104876694493815, "phrase": "unpatched_machines"}, {"score": 0.0033011569787033297, "phrase": "unpatched_binary_and_non-binary_files"}, {"score": 0.003071965703296204, "phrase": "efficient_information_flow_tracking"}, {"score": 0.0029901699209266435, "phrase": "unpatched_non-binary_files"}, {"score": 0.0028715299874549245, "phrase": "patch_survey"}, {"score": 0.0027575842698911173, "phrase": "security_updates"}, {"score": 0.002708399936381754, "phrase": "binary_code"}, {"score": 0.0026362590493392785, "phrase": "non-binary_files"}, {"score": 0.002543043781904587, "phrase": "novel_algorithm"}, {"score": 0.0021336208506092173, "phrase": "unpatched_code"}, {"score": 0.0021049977753042253, "phrase": "performance_overhead"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Management", " Measurement", " Security", " virtualization", " cloud computing", " infrastructure as a service", " patch management", " application discovery"], "paper_abstract": "A basic requirement of a secure computer system is that it be up to date with regard to software security patches. Unfortunately, Infrastructure as a Service (IaaS) clouds make this difficult. They leverage virtualization, which provides functionality that causes traditional security patch update systems to fail. In addition, the diversity of operating systems and the distributed nature of administration in the cloud compound the problem of identifying unpatched machines. In this work, we propose P2, a hypervisor-based patch audit solution. P2 audits VMs and detects the execution of unpatched binary and non-binary files in an accurate, continuous and OS-agnostic manner. Two key innovations make P2 possible. First, P2 uses efficient information flow tracking to identify the use of unpatched non-binary files in a vulnerable way. We performed a patch survey and discover that 64% of files modified by security updates do not contain binary code, making the audit of non-binary files crucial. Second, P2 implements a novel algorithm that identifies binaries in mid-execution to allow handling of VMs resumed from a checkpoint or migrated into the cloud. We have implemented a prototype of P2 and and our experiments show that it accurately reports the execution of unpatched code while imposing performance overhead of 4%.", "paper_title": "Patch Auditing in Infrastructure as a Service Clouds", "paper_id": "WOS:000294949300014"}