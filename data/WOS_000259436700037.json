{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linux"}, {"score": 0.044759590000551824, "phrase": "configuration_files"}, {"score": 0.0047385702897315436, "phrase": "existing_package"}, {"score": 0.004688321299229397, "phrase": "system_configuration_management"}, {"score": 0.004565007074039171, "phrase": "imperative_model"}, {"score": 0.004492573860101133, "phrase": "system_administration_actions"}, {"score": 0.0036488111139918135, "phrase": "multiple_versions"}, {"score": 0.0035908627899097407, "phrase": "package_side"}, {"score": 0.002947266048104005, "phrase": "purely_functional_system_configuration_model"}, {"score": 0.0028543298631502107, "phrase": "static_parts"}, {"score": 0.0027495914857929584, "phrase": "software_packages"}, {"score": 0.0026914710445743693, "phrase": "system_startup_scripts"}, {"score": 0.0026205405415623525, "phrase": "pure_functions"}, {"score": 0.002418742283474052, "phrase": "purely_function_language"}, {"score": 0.002317533977770783, "phrase": "nixos"}, {"score": 0.002185235873435714, "phrase": "nix_package_manager"}, {"score": 0.0021390191069313945, "phrase": "entire_system_configuration"}, {"score": 0.0021049977753042253, "phrase": "purely_functional_specification"}], "paper_keywords": ["experimentation", " languages", " reliability"], "paper_abstract": "Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as upgrading packages or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to run multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogously to a heap in a purely function language. We have implemented this model in NixOS, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a purely functional specification.", "paper_title": "NixOS: A purely functional Linux distribution", "paper_id": "WOS:000259436700037"}