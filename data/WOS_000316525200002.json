{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "probabilistic_reasoning"}, {"score": 0.004424268136268051, "phrase": "new_paradigm"}, {"score": 0.003829290275367182, "phrase": "probabilistic_reasoning_problems"}, {"score": 0.0036980501827538455, "phrase": "story-telling_metaphor"}, {"score": 0.0034660938095219846, "phrase": "well-understood_steps"}, {"score": 0.0034146585649631692, "phrase": "initial_state"}, {"score": 0.0033639840192975835, "phrase": "final_result"}, {"score": 0.0031061129850110994, "phrase": "equivalent_explanations"}, {"score": 0.00299958349498286, "phrase": "explanatory_value"}, {"score": 0.0028536871476905847, "phrase": "alternative_explanations"}, {"score": 0.0025571463140118805, "phrase": "explanation-producing_programs"}, {"score": 0.0023609780669713288, "phrase": "abstract_syntax"}, {"score": 0.0022573076362326135, "phrase": "textual_notation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Explanation", " Probability", " Story telling", " Explanation transformation", " Language semantics"], "paper_abstract": "We present an explanation-oriented, domain-specific, visual language for explaining probabilistic reasoning. Explanation-oriented programming is a new paradigm that shifts the focus of programming from the computation of results to explanations of how those results were computed. Programs in this language therefore describe explanations of probabilistic reasoning problems. The language relies on a story-telling metaphor of explanation, where the reader is guided through a series of well-understood steps from some initial state to the final result. Programs can also be manipulated according to a set of laws to automatically generate equivalent explanations from one explanation instance. This increases the explanatory value of the language by allowing readers to cheaply derive alternative explanations if they do not understand the first. The language is composed of two parts: a formal textual notation for specifying explanation-producing programs and the more elaborate visual notation for presenting those explanations. We formally define the abstract syntax of explanations and define the semantics of the textual notation in terms of the explanations that are produced. (c) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "A visual language for explaining probabilistic reasoning", "paper_id": "WOS:000316525200002"}