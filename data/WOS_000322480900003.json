{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "marple"}, {"score": 0.036055657115813065, "phrase": "path_segments"}, {"score": 0.0047707093928203, "phrase": "detecting_faults"}, {"score": 0.0047268728636719725, "phrase": "path_segments_using"}, {"score": 0.004492841495994535, "phrase": "property_violation"}, {"score": 0.004431041346291019, "phrase": "program_point"}, {"score": 0.004370087541308677, "phrase": "execution_path"}, {"score": 0.003966162568548304, "phrase": "execution_paths"}, {"score": 0.003929689573550262, "phrase": "code_inspection"}, {"score": 0.0035335154419206634, "phrase": "static_framework"}, {"score": 0.003312121699003206, "phrase": "whole_program_scale"}, {"score": 0.0032665093519968083, "phrase": "important_contribution"}, {"score": 0.0031333949463567554, "phrase": "demand-driven_analysis"}, {"score": 0.0030759821501544224, "phrase": "scalability_challenges"}, {"score": 0.0030336118627011786, "phrase": "traditional_path-sensitive_fault_detection"}, {"score": 0.002909960617042717, "phrase": "specification_language"}, {"score": 0.0028172726995962173, "phrase": "path-based_analyses"}, {"score": 0.0026775328564629577, "phrase": "data-and_control-centric_faults_as_well_as_both_liveness_and_safety_properties"}, {"score": 0.002407290605654707, "phrase": "buffer_overflows"}, {"score": 0.0023851187337905412, "phrase": "integer_violations"}, {"score": 0.002363150587804677, "phrase": "null-pointer_dereferences"}, {"score": 0.0023305762840188145, "phrase": "memory_leaks"}, {"score": 0.0021843879253500894, "phrase": "better_precision"}], "paper_keywords": ["Algorithms", " Reliability", " Security", " Experimentation", " Path segments", " demand-driven", " faults", " specification"], "paper_abstract": "Generally, a fault is a property violation at a program point along some execution path. To obtain the path where a fault occurs, we can either run the program or manually identify the execution paths through code inspection. In both of the cases, only a very limited number of execution paths can be examined for a program. This article presents a static framework, Marple, that automatically detects path segments where a fault occurs at a whole program scale. An important contribution of the work is the design of a demand-driven analysis that effectively addresses scalability challenges faced by traditional path-sensitive fault detection. The techniques are made general via a specification language and an algorithm that automatically generates path-based analyses from specifications. The generality is achieved in handling both data-and control-centric faults as well as both liveness and safety properties, enabling the exploitation of fault interactions for diagnosis and efficiency. Our experimental results demonstrate the effectiveness of our techniques in detecting path segments of buffer overflows, integer violations, null-pointer dereferences, and memory leaks. Because we applied an interprocedural, path-sensitive analysis, our static fault detectors generally report better precision than the tools available for comparison. Our demand-driven analyses are shown scalable to deployed applications such as apache, putty, and ffmpeg.", "paper_title": "Marple: Detecting Faults in Path Segments Using Automatically Generated Analyses", "paper_id": "WOS:000322480900003"}