{"auto_keywords": [{"score": 0.02864039936811681, "phrase": "csp"}, {"score": 0.014490972490330696, "phrase": "ccs"}, {"score": 0.00481495049065317, "phrase": "equivalence_checking"}, {"score": 0.00475254914916922, "phrase": "crucial_role"}, {"score": 0.0047113960612140335, "phrase": "formal_verification"}, {"score": 0.004590052784169268, "phrase": "concurrent_systems"}, {"score": 0.004318881178805575, "phrase": "increasing_complexity"}, {"score": 0.00420760449108585, "phrase": "state_explosion_problem"}, {"score": 0.004099183062034004, "phrase": "efficient_procedure"}, {"score": 0.004028452405970376, "phrase": "heuristic_search"}, {"score": 0.003958937342925219, "phrase": "milner's_strong_and_weak_equivalence"}, {"score": 0.00326881479036966, "phrase": "presented_algorithm"}, {"score": 0.0032263862712733934, "phrase": "system_state_graph"}, {"score": 0.0029443683459283955, "phrase": "heuristic_function"}, {"score": 0.0027943943921568456, "phrase": "different_specification_languages"}, {"score": 0.0027341763737751467, "phrase": "lotos"}, {"score": 0.002640507929183363, "phrase": "language_semantics"}, {"score": 0.0024842242921857705, "phrase": "search_space"}, {"score": 0.002405031516739673, "phrase": "grease"}, {"score": 0.0023990982005125763, "phrase": "greedy_technique"}, {"score": 0.0023270035715132866, "phrase": "system_equivalence"}, {"score": 0.0021892345747666977, "phrase": "achieved_reduction"}, {"score": 0.0021607883988873492, "phrase": "state-space_size"}], "paper_keywords": ["Theory", " Verification", " Formal methods", " heuristic searches", " equivalence checking"], "paper_abstract": "Equivalence checking plays a crucial role in formal verification to ensure the correctness of concurrent systems. However, this method cannot be scaled as easily with the increasing complexity of systems due to the state explosion problem. This article presents an efficient procedure, based on heuristic search, for checking Milner's strong and weak equivalence; to achieve higher efficiency, we actually search for a difference between two processes to be discovered as soon as possible, thus the heuristics aims to find a counterexample, even if not the minimum one, to prove nonequivalence. The presented algorithm builds the system state graph on-the-fly, during the checking, and the heuristics promotes the construction of the more promising subgraph. The heuristic function is syntax based, but the approach can be applied to different specification languages such as CCS, LOTOS, and CSP, provided that the language semantics is based on the concept of transition. The algorithm to explore the search space of the problem is based on a greedy technique; GreASE (Greedy Algorithm for System Equivalence), the tool supporting the approach, is used to evaluate the achieved reduction of both state-space size and time with respect to other verification environments.", "paper_title": "GreASE: A Tool for Efficient \"Nonequivalence\" Checking", "paper_id": "WOS:000336444200004"}