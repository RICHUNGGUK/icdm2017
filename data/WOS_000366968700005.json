{"auto_keywords": [{"score": 0.0490219456339607, "phrase": "parallel_ant_colony_algorithm"}, {"score": 0.048329338700166584, "phrase": "scientific_workflow_scheduling"}, {"score": 0.004815316573636744, "phrase": "gpu"}, {"score": 0.004570491683870396, "phrase": "scientific_workflow_scheduling_problem"}, {"score": 0.0044695432851061525, "phrase": "combinatorial_optimization_problem"}, {"score": 0.004338390136272005, "phrase": "real_application"}, {"score": 0.004242546312843817, "phrase": "scientific_workflow"}, {"score": 0.004087469540575263, "phrase": "task_nodes"}, {"score": 0.00399714680711765, "phrase": "large-scale_workflow"}, {"score": 0.0039380388343479384, "phrase": "huge_computational_overhead"}, {"score": 0.003737934295442975, "phrase": "parallel_algorithm"}, {"score": 0.0035216195857272403, "phrase": "computing_speed"}, {"score": 0.0031257046538823354, "phrase": "gpu_threads"}, {"score": 0.002815864555488112, "phrase": "cuda_c_language"}, {"score": 0.00269263690712392, "phrase": "different_scales"}, {"score": 0.0025366596616434793, "phrase": "sequential_algorithm"}, {"score": 0.002480520548392772, "phrase": "experimental_results"}, {"score": 0.002234491924392104, "phrase": "conventional_sequential_algorithm_implementation"}], "paper_keywords": ["workflow scheduling", " ant colony optimization", " parallel computing", " GPU computing", " CUDA"], "paper_abstract": "Scientific workflow scheduling problem is a combinatorial optimization problem. In the real application, the scientific workflow generally has thousands of task nodes. Scheduling large-scale workflow has huge computational overhead. In this paper, a parallel algorithm for scientific workflow scheduling is proposed so that the computing speed can be improved greatly. Our method used ant colony optimization approaches on the GPU. Thousands of GPU threads can parallel construct solutions. The parallel ant colony algorithm for workflow scheduling was implemented with CUDA C language. Scheduling problem instances with different scales were tested both in our parallel algorithm and CPU sequential algorithm. The experimental results on NVIDIA Tesla M2070 GPU show that our implementation for 1000 task nodes runs in 5 seconds, while a conventional sequential algorithm implementation runs in 104 seconds on Intel Xeon X5650 CPU. Thus, our GPU-based parallel algorithm implementation attains a speed-up factor of 20.7.", "paper_title": "A GPU-based Parallel Ant Colony Algorithm for Scientific Workflow Scheduling", "paper_id": "WOS:000366968700005"}