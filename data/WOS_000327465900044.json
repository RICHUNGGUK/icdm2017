{"auto_keywords": [{"score": 0.004539005582217309, "phrase": "short_flows"}, {"score": 0.004351595642056769, "phrase": "average_flow_completion_time"}, {"score": 0.0037070855410818986, "phrase": "key_conceptual_insight"}, {"score": 0.0036450381529042103, "phrase": "datacenter_transport"}, {"score": 0.003465036432323081, "phrase": "rate_control"}, {"score": 0.003378385493203297, "phrase": "flow_scheduling"}, {"score": 0.00257831812581194, "phrase": "line_rate"}, {"score": 0.002535115422089855, "phrase": "throttle_hack"}, {"score": 0.002471661547432869, "phrase": "high_and_persistent_packet_loss"}, {"score": 0.002389514188569084, "phrase": "theoretical_intuition"}, {"score": 0.0023100907305651872, "phrase": "extensive_simulations"}, {"score": 0.0021049977753042253, "phrase": "near-optimal_performance"}], "paper_keywords": ["Design", " Performance", " Datacenter network", " Packet transport", " Flow scheduling"], "paper_abstract": "In this paper we present pFabric, a minimalistic datacenter transport design that provides near theoretically optimal flow completion times even at the 99th percentile for short flows, while still minimizing average flow completion time for long flows. Moreover, pFabric delivers this performance with a very simple design that is based on a key conceptual insight: datacenter transport should decouple flow scheduling from rate control. For flow scheduling, packets carry a single priority number set independently by each flow; switches have very small buffers and implement a very simple priority-based scheduling/dropping mechanism. Rate control is also correspondingly simpler; flows start at line rate and throttle hack only under high and persistent packet loss. We provide theoretical intuition and show via extensive simulations that the combination of these two simple mechanisms is sufficient to provide near-optimal performance.", "paper_title": "pFabric: Minimal Near-Optimal Datacenter Transport", "paper_id": "WOS:000327465900044"}