{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "general_classes"}, {"score": 0.004000486064911652, "phrase": "type_variables"}, {"score": 0.003927004211021119, "phrase": "disciplined_form"}, {"score": 0.0038691879515317267, "phrase": "mainstream_languages"}, {"score": 0.0038122196479548425, "phrase": "common_programming_patterns"}, {"score": 0.0037700424606538856, "phrase": "highly_generic_way"}, {"score": 0.0036734281414482735, "phrase": "conventional_techniques"}, {"score": 0.0035528259557800683, "phrase": "generic_proxies"}, {"score": 0.0028542615085879975, "phrase": "morphj's_hallmark_feature"}, {"score": 0.002740059168271987, "phrase": "modular_type-checking"}, {"score": 0.0027097117582440687, "phrase": "morphj_class"}, {"score": 0.002562929776267296, "phrase": "type_parameter"}, {"score": 0.0025157865918985704, "phrase": "invalid_code"}, {"score": 0.0024603551979225195, "phrase": "invaluable_feature"}, {"score": 0.0024421501497321027, "phrase": "highly_general_components"}, {"score": 0.002267329954548889, "phrase": "morphj_reimplementation"}, {"score": 0.0021604504765314497, "phrase": "java_reflection"}, {"score": 0.0021444597601392146, "phrase": "bytecode_engineering_library"}, {"score": 0.0021049977753042253, "phrase": "morphj_code"}], "paper_keywords": ["Design", " Languages", " Metaprogramming", " language extensions", " morphing"], "paper_abstract": "We present MorphJ: a language for specifying general classes whose members are produced by iterating over members of other classes. We call this technique \"class morphing\" or just \"morphing.\" Morphing extends the notion of genericity so that not only types of methods and fields, but also the structure of a class can vary according to type variables. This adds a disciplined form of metaprogramming to mainstream languages and allows expressing common programming patterns in a highly generic way that is otherwise not supported by conventional techniques. For instance, morphing lets us write generic proxies (i.e., classes that can be parameterized with another class and export the same public methods as that class); default implementations (e.g., a generic do-nothing type, configurable for any interface); semantic extensions (e.g., specialized behavior for methods that declare a certain annotation); and more. MorphJ's hallmark feature is that, despite its emphasis on generality, it allows modular type-checking: a MorphJ class can be checked independently of its uses. Thus, the possibility of supplying a type parameter that will lead to invalid code is detected early, an invaluable feature for highly general components that will be statically instantiated by other programmers. We demonstrate the benefits of morphing with several examples, including a MorphJ reimplementation of DSTM2, a software transactional memory library which reduces 1,484 lines of Java reflection and bytecode engineering library calls to just 586 lines of MorphJ code.", "paper_title": "Morphing: Structurally Shaping a Class by Reflecting on Others", "paper_id": "WOS:000288153000001"}