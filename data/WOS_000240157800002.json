{"auto_keywords": [{"score": 0.038683991523240216, "phrase": "buffer_library"}, {"score": 0.00481495049065317, "phrase": "generative_programming_technique"}, {"score": 0.004702092660370367, "phrase": "software_clones"}, {"score": 0.004573748810476845, "phrase": "variant_forms"}, {"score": 0.004466519142879166, "phrase": "update_anomalies"}, {"score": 0.0043790755286923794, "phrase": "program_size"}, {"score": 0.00425951071471662, "phrase": "high_maintenance_costs"}, {"score": 0.003966776222128288, "phrase": "case_study"}, {"score": 0.0038890781420303916, "phrase": "java_buffer_library"}, {"score": 0.0036217089991592275, "phrase": "cloned_classes"}, {"score": 0.0035931556794840027, "phrase": "class_methods"}, {"score": 0.003522749900725601, "phrase": "program_situations"}, {"score": 0.0034537189001268113, "phrase": "revealed_difficulties"}, {"score": 0.0033860360186761533, "phrase": "conventional_program_design_techniques"}, {"score": 0.0033328427701162368, "phrase": "possible_solution"}, {"score": 0.0032675209435107273, "phrase": "generative_technique"}, {"score": 0.0032290385400138093, "phrase": "xml"}, {"score": 0.003190817088774159, "phrase": "variant_configuration_language"}, {"score": 0.003140680985599885, "phrase": "similar_classes"}, {"score": 0.003066945490483524, "phrase": "concrete_buffer_classes"}, {"score": 0.0029830992938695007, "phrase": "generic_structures"}, {"score": 0.002913052619634697, "phrase": "analytical_and_empirical_grounds"}, {"score": 0.0028786467218197245, "phrase": "unifying_clones"}, {"score": 0.002855934865505357, "phrase": "conceptual_complexity"}, {"score": 0.002723367507064405, "phrase": "code_size_reduction"}, {"score": 0.002627985415362773, "phrase": "qualitative_and_quantitative_ways"}, {"score": 0.002576442680766742, "phrase": "controlled_experiment"}, {"score": 0.0023150468182777813, "phrase": "application_domain"}, {"score": 0.0022967713922705, "phrase": "programming_language"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["class libraries", " object-oriented methods", " maintainability", " reusability", " generative programming"], "paper_abstract": "Software clones-similar program structures repeated in variant forms-increase the risk of update anomalies, blow up the program size and complexity, possibly contributing to high maintenance costs. Yet, programs are often polluted by clones. In this paper, we present a case study of cloning in the Java Buffer library, JDK 1.5. We found that at least 68% of the code in the Buffer library was contained in cloned classes or class methods. Close analysis of program situations that led to cloning revealed difficulties in eliminating clones with conventional program design techniques. As a possible solution, we applied a generative technique of XVCL (XML-based Variant Configuration Language) to represent similar classes and methods in generic, adaptable form. Concrete buffer classes could be automatically produced from the generic structures. We argue, on analytical and empirical grounds, that unifying clones reduced conceptual complexity and enhanced the changeability of the Buffer library at rates proportional to code size reduction (68%). We evaluated our solution in qualitative and quantitative ways, and conducted a controlled experiment to support this claim. The approach presented in the paper can be used to enhance genericity and changeability of any program, independently of an application domain or programming language. As the solution is not without pitfalls, we discuss trade-offs involved in its project application. (c) Copyright 2006 John Wiley & Sons, Ltd.", "paper_title": "Unifying clones with a generative programming technique: a case study", "paper_id": "WOS:000240157800002"}