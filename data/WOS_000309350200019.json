{"auto_keywords": [{"score": 0.03672683993204362, "phrase": "dotmix"}, {"score": 0.00481495049065317, "phrase": "dynamic-multithreading_platforms"}, {"score": 0.004780183091824403, "phrase": "existing_concurrency_platforms"}, {"score": 0.004745665541429529, "phrase": "dynamic_multithreading"}, {"score": 0.004677372885331908, "phrase": "repeatable_parallel_random-number_generators"}, {"score": 0.004445961412092278, "phrase": "runtime_system"}, {"score": 0.004397875849247165, "phrase": "efficient_deterministic_parallel_random-number_generation"}, {"score": 0.004318881178805575, "phrase": "open-source_mit_cilk_runtime_system"}, {"score": 0.004016782710006123, "phrase": "relative_overhead"}, {"score": 0.003987755857878336, "phrase": "cilk"}, {"score": 0.003916098498242888, "phrase": "original_cilk"}, {"score": 0.0038737214010638745, "phrase": "geometric_mean"}, {"score": 0.003790344159496275, "phrase": "intel"}, {"score": 0.003681923235979914, "phrase": "concurrency_platform"}, {"score": 0.0035507457285983268, "phrase": "library_implementation"}, {"score": 0.003512308265830794, "phrase": "deterministic_parallel_random-number_generator"}, {"score": 0.003314203895848455, "phrase": "statistical_quality"}, {"score": 0.00320770578058916, "phrase": "popular_mersenne_twister"}, {"score": 0.0031272381208680613, "phrase": "nondeterministic_parallel_version"}, {"score": 0.0030933709720820605, "phrase": "efficient_and_high-quality_serial_random-number_generator"}, {"score": 0.0029830992938695007, "phrase": "\"spawn_depth"}, {"score": 0.002897710777957041, "phrase": "naive_fibonacci_calculation"}, {"score": 0.002646267286675984, "phrase": "running_time"}, {"score": 0.0026175952455594277, "phrase": "nondeterministic_mersenne_twister"}, {"score": 0.002542642270762272, "phrase": "random_numbers"}, {"score": 0.0024968877430444304, "phrase": "maximal-independent-set_algorithm"}, {"score": 0.002416589459425828, "phrase": "monte_carlo_discrete-hedging_application"}, {"score": 0.0023990982005125763, "phrase": "quantlib"}, {"score": 0.0021435864990577945, "phrase": "debugging_purposes"}, {"score": 0.0021049977753042253, "phrase": "major_reason"}], "paper_keywords": ["Algorithms", " Performance", " Theory", " Cilk", " determinism", " dynamic multithreading", " nondeterminism", " parallel computing", " pedigree", " random-number generator"], "paper_abstract": "Existing concurrency platforms for dynamic multithreading do not provide repeatable parallel random-number generators. This paper proposes that a mechanism called pedigrees be built into the runtime system to enable efficient deterministic parallel random-number generation. Experiments with the open-source MIT Cilk runtime system show that the overhead for maintaining pedigrees is negligible. Specifically, on a suite of 10 benchmarks, the relative overhead of Cilk with pedigrees to the original Cilk has a geometric mean of less than 1%. We persuaded Intel to modify its commercial C/C++ compiler, which provides the Cilk Plus concurrency platform, to include pedigrees, and we built a library implementation of a deterministic parallel random-number generator called DOTMIX that compresses the pedigree and then \"RC6-mixes\" the result. The statistical quality of DOTMIX is comparable to that of the popular Mersenne twister, but somewhat slower than a nondeterministic parallel version of this efficient and high-quality serial random-number generator. The cost of calling DOTMIX depends on the \"spawn depth\" of the invocation. For a naive Fibonacci calculation with n = 40 that calls DOTMIX in every node of the computation, this \"price of determinism\" is about a factor of 2.3 in running time over the nondeterministic Mersenne twister, but for more realistic applications with less intense use of random numbers - such as a maximal-independent-set algorithm, a practical samplesort program, and a Monte Carlo discrete-hedging application from QuantLib - the observed \"price\" was at most 2 1%, and sometimes much less. Moreover, even if overheads were several times greater, applications using DOTMIX should be amply fast for debugging purposes, which is a major reason for desiring repeatability.", "paper_title": "Deterministic Parallel Random-Number Generation for Dynamic-Multithreading Platforms", "paper_id": "WOS:000309350200019"}