{"auto_keywords": [{"score": 0.049889015005071397, "phrase": "bmc"}, {"score": 0.010706700719546054, "phrase": "assembly_depth"}, {"score": 0.01047667852188773, "phrase": "assembly_size"}, {"score": 0.00979617442229037, "phrase": "lp-bmc_algorithms"}, {"score": 0.00481495049065317, "phrase": "biomolecular_computation"}, {"score": 0.004739056045644449, "phrase": "molecular_scale"}, {"score": 0.004710903595945675, "phrase": "biotechnology_engineering_techniques"}, {"score": 0.004509475965325685, "phrase": "large_numbers"}, {"score": 0.004491595129857349, "phrase": "distinct_molecules"}, {"score": 0.004438492048433009, "phrase": "dp"}, {"score": 0.0042995041275845055, "phrase": "multiple_molecules"}, {"score": 0.004248550348175611, "phrase": "local_parallelism"}, {"score": 0.0041237861708246105, "phrase": "winfree"}, {"score": 0.004034609388280408, "phrase": "innovative_method"}, {"score": 0.0040186038781533946, "phrase": "lp-bmc"}, {"score": 0.0039709657945426816, "phrase": "unmediated_self-assembly"}, {"score": 0.003931697356115479, "phrase": "dna_molecules"}, {"score": 0.003908322201503829, "phrase": "known_domino_tiling_techniques"}, {"score": 0.0038850874988360733, "phrase": "buchi"}, {"score": 0.0037634986167187933, "phrase": "lewis"}, {"score": 0.003682051663643928, "phrase": "dna_self-assembly_techniques"}, {"score": 0.0035952414907368248, "phrase": "improved_techniques"}, {"score": 0.0035526042071029936, "phrase": "potential_power"}, {"score": 0.003538504043652411, "phrase": "lp-bmc."}, {"score": 0.0035104707931300095, "phrase": "refined_step-wise_assembly_method"}, {"score": 0.0034482025128821548, "phrase": "distinct_steps"}, {"score": 0.0034345152879289025, "phrase": "step-wise_assembly"}, {"score": 0.003307157207720997, "phrase": "additional_control"}, {"score": 0.003287482882222731, "phrase": "assembly_process"}, {"score": 0.0031217859267564344, "phrase": "assembly_frame"}, {"score": 0.0031032109441552287, "phrase": "rigid_nanostructure"}, {"score": 0.0030786155813933465, "phrase": "input_dna_strands"}, {"score": 0.0029703194813023017, "phrase": "fundamental_problems"}, {"score": 0.0028601252251285, "phrase": "input_size"}, {"score": 0.0027926389474730927, "phrase": "linear_assembly_size"}, {"score": 0.0027815466400771768, "phrase": "logarithmic_assembly_depth"}, {"score": 0.0027594936602962075, "phrase": "parallel_prefix_computation_problems"}, {"score": 0.002737615043512257, "phrase": "integer_addition"}, {"score": 0.0026997429073195326, "phrase": "constant_number"}, {"score": 0.0026890185862060005, "phrase": "finite_state_automata_simulation"}, {"score": 0.0026203386550421558, "phrase": "lp-bmc_methods"}, {"score": 0.0026099289298770023, "phrase": "perfect_shuffle"}, {"score": 0.002599560451267203, "phrase": "pair-wise_exchange"}, {"score": 0.002584084715180236, "phrase": "linear_size_assembly"}, {"score": 0.0025738186430711105, "phrase": "constant_assembly_depth"}, {"score": 0.002553408379398782, "phrase": "logarithmic_assembly_depth_lp-bmc_algorithms"}, {"score": 0.0025230952890994236, "phrase": "normal_parallel_algorithms"}, {"score": 0.0024981087707313656, "phrase": "shuffle-exchange_networks"}, {"score": 0.0024053905373135733, "phrase": "bounded_degree_boolean_circuit"}, {"score": 0.0023626775529531486, "phrase": "circuit_depth"}, {"score": 0.0023346234464901978, "phrase": "circuit_size"}, {"score": 0.0023114990623840383, "phrase": "somewhat_smaller_volumes"}, {"score": 0.0023023134209985627, "phrase": "previous_dp-bmc_algorithms"}, {"score": 0.0022434880661725493, "phrase": "dp-bmc"}, {"score": 0.0022212643658089, "phrase": "multiple_problems"}, {"score": 0.002212436511938916, "phrase": "distinct_inputs"}, {"score": 0.0021948856857640737, "phrase": "parallel_arithmetic"}, {"score": 0.0021861624375941508, "phrase": "multiple_inputs"}, {"score": 0.0021688195854697094, "phrase": "satisfying_inputs"}, {"score": 0.0021049977753042253, "phrase": "dp-bmc."}], "paper_keywords": [""], "paper_abstract": "Biomolecular Computation (BMC) is computation at the molecular scale, using biotechnology engineering techniques. Most proposed methods for BMC used distributed (molecular) parallelism (DP); where operations are executed in parallel on large numbers of distinct molecules. BMC done exclusively by DP requires that the computation execute sequentially within any given molecule (though done in parallel for multiple molecules). In contrast, local parallelism (LP) allows operations to be executed in parallel on each given molecule. Winfree, et al. [120,124]) proposed an innovative method for LP-BMC, that of computation by unmediated self-assembly of 2D arrays of DNA molecules, applying known domino tiling techniques (see Buchi [21], Berger [16], Robinson [88], and Lewis and Papadimitriou [50]) in combination with the DNA self-assembly techniques of Seeman et al. [105]. We develop improved techniques to more fully exploit the potential power of LP-BMC. we propose a refined step-wise assembly method, which provides control of the assembly in distinct steps. Step-wise assembly may increase the likelihood of success of assembly, decrese the number of tiles required, and provide additional control of the assembly process. The assembly depth is the number of stages of assembly required and the assembly size is the number of tiles required. We also introduce the assembly frame, a rigid nanostructure which binds the input DNA strands in place on its boundaries and constrains the shape of the assembly. Our main results are LP-BMC algorithms for some fundamental problems that form the basis of many parallel computations. For these problems we decrease the assembly size to linear in the input size and and significantly decrease the assembly depth. We give LP-BMC algorithms with linear assembly size and logarithmic assembly depth, for the parallel prefix computation problems, which include integer addition, subtraction, multiplication by a constant number, finite state automata simulation, and fingerprinting (hashing) a string. We also give LP-BMC methods for perfect shuffle and pair-wise exchange using a linear size assembly and constant assembly depth. This provides logarithmic assembly depth LP-BMC algorithms for the large class of normal parallel algorithms [49,112,113] on shuffle-exchange networks, e.g. DFT, bitonic merge, fixed permutation of data, as well as evaluation of a bounded degree Boolean circuit in time bounded by the product of the circuit depth times a logarithm of the circuit size. Our LP-BMC methods may require somewhat smaller volumes than previous DP-BMC algorithms [75,81] for these problems. All our LP-BMC assembly techniques can be combined with DP-BMC parallelism to simultaneously solve multiple problems with distinct inputs (e.g. do parallel arithmetic on multiple inputs, or determine satisfying inputs of a circuit), so they are an enhancement of the power of DP-BMC.", "paper_title": "Local Parallel Biomolecular Computation", "paper_id": "WOS:000317540800008"}