{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data_objects"}, {"score": 0.0047895188927660525, "phrase": "large_distributed_database_systems"}, {"score": 0.004664352260912174, "phrase": "data_object_replication"}, {"score": 0.004639712384096822, "phrase": "distributed_servers"}, {"score": 0.004554488671294504, "phrase": "network_traffic"}, {"score": 0.004330941610682453, "phrase": "data_object"}, {"score": 0.0043080553835735825, "phrase": "server_pairs"}, {"score": 0.004262643556463569, "phrase": "constraint_optimization_problem"}, {"score": 0.004208261607585352, "phrase": "np"}, {"score": 0.004085713541752114, "phrase": "distributed_database_system"}, {"score": 0.004053362743156545, "phrase": "agent-based_model"}, {"score": 0.003803574975736106, "phrase": "communication_cost"}, {"score": 0.0036844926374203888, "phrase": "global_view"}, {"score": 0.0036071754062548464, "phrase": "optimization_process"}, {"score": 0.0035127984203919033, "phrase": "overall_system_performance"}, {"score": 0.0034208822062692158, "phrase": "\"semi-distributed\"_axiomatic_game_theoretical_mechanism"}, {"score": 0.0032441788252223313, "phrase": "distributed_system"}, {"score": 0.0032184697893776052, "phrase": "central_body"}, {"score": 0.0031592690527974285, "phrase": "binary_decision"}, {"score": 0.003027997655358647, "phrase": "cost_model"}, {"score": 0.0029253546782349875, "phrase": "beneficial_data_objects"}, {"score": 0.0027594936602962075, "phrase": "system-wide_performance_enhancement"}, {"score": 0.002694375425481759, "phrase": "seven_well-known_conventional_and_three_game_theoretical_replica_allocation_methods"}, {"score": 0.002561892963059385, "phrase": "bottom-up_procedure"}, {"score": 0.0025348408238837655, "phrase": "min-max_procedure"}, {"score": 0.0025214236698058, "phrase": "benders"}, {"score": 0.002468625079363062, "phrase": "english"}, {"score": 0.0024359196332506424, "phrase": "dutch"}, {"score": 0.002365815362517737, "phrase": "experimental_setup"}, {"score": 0.0023408288327263316, "phrase": "inet_network_topology_generators"}, {"score": 0.002328434471939886, "phrase": "soccer_world_cup"}, {"score": 0.002303927580619094, "phrase": "nasa"}, {"score": 0.002219790619936024, "phrase": "user_access_patterns"}, {"score": 0.0022021815838179247, "phrase": "experimental_results"}, {"score": 0.0021789194955896124, "phrase": "proposed_technique"}, {"score": 0.0021218313648947926, "phrase": "execution_time"}], "paper_keywords": ["Algorithmic mechanism design", " Game theory", " Optimization", " Replication", " Distributed algorithms", " Placements"], "paper_abstract": "Data object replication onto distributed servers can potentially alleviate bottlenecks, reduce network traffic, increase scalability, add robustness, and decrease user perceived access time. The decision of selecting data object and server pairs requires solving a constraint optimization problem that in general is NP-complete. In this paper, we abstract the distributed database system as an agent-based model, wherein agents continuously compete for allocation and reallocation of data objects. Each agent aims to replicate objects onto its server such that the communication cost is minimized. However, these agents do not have a global view of the system. Thereby, the optimization process becomes highly localized. Such localized optimization may severely affect the overall system performance. To cope with such localized optimization, we propose a \"semi-distributed\" axiomatic game theoretical mechanism. The mechanism's control is unique in its decision making process, wherein all the heavy processing is done on the servers of the distributed system and the central body is only required to take a binary decision: (0) not to replicate or (1) to replicate. The cost model used by the agents in the mechanism for the purpose of identifying beneficial data objects is tailored made so that even though the agents take decisions based on their local knowledge domain, the effect is translated into a system-wide performance enhancement. The proposed mechanism is extensively compared against seven well-known conventional and three game theoretical replica allocation methods, namely, branch and bound, greedy, genetic, data-aware replication, tree inspired bottom-up procedure, tree inspired min-max procedure, Benders' decomposition based procedure, game theoretical English auction, game theoretical Dutch auction, and game theoretical selfish replication procedure. The experimental setup incorporates GT-ITM, Inet network topology generators, Soccer World Cup 1998 access logs, and NASA Kennedy Space Center access logs to closely mimic the Web in its infrastructure and user access patterns. The experimental results reveal that the proposed technique despite its non-cooperative nature improves the solution quality and reduces the execution time compared to other techniques.", "paper_title": "Replicating data objects in large distributed database systems: an axiomatic game theoretic mechanism design approach", "paper_id": "WOS:000282423200004"}