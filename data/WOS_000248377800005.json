{"auto_keywords": [{"score": 0.04664571852812289, "phrase": "higher_order_logic"}, {"score": 0.014876872456199723, "phrase": "synthesisable_subset"}, {"score": 0.00481495049065317, "phrase": "cryptographic_hardware"}, {"score": 0.004388035083357706, "phrase": "clocked_synchronous_hardware"}, {"score": 0.0039252049353279556, "phrase": "cryptographic_and_arithmetic_applications"}, {"score": 0.0031113369425402287, "phrase": "four-phase_handshake_circuit"}, {"score": 0.002969987494971534, "phrase": "fully_automatic_proof"}, {"score": 0.0027570267191549774, "phrase": "correctness_theorem"}, {"score": 0.0026811531172346676, "phrase": "compiled_function"}, {"score": 0.0026317312518257803, "phrase": "synthesised_circuits"}, {"score": 0.0024888538930382467, "phrase": "verilog"}, {"score": 0.0023103100997344072, "phrase": "fully-expansive_'lcf_methodology"}, {"score": 0.0021049977753042253, "phrase": "compiler's_theorem"}], "paper_keywords": ["theorem proving", " compiling", " hardware synthesis", " cryptography", " high assurance"], "paper_abstract": "A compiler from a synthesisable subset of higher order logic to clocked synchronous hardware is described. It is being used to create coprocessors for cryptographic and arithmetic applications. The compiler automatically translates a function f defined in higher order logic (typically using recursion) into a device that computes f via a four-phase handshake circuit. Compilation is by fully automatic proof in the HOL4 system, and generates a correctness theorem for each compiled function. Synthesised circuits can be directly translated to Verilog, and then input to design automation tools. A fully-expansive 'LCF methodology' allows users to safely modify and extend the compiler's theorem proving scripts to add optimisations or to enlarge the synthesisable subset of higher order logic.", "paper_title": "Proof producing synthesis of arithmetic and cryptographic hardware", "paper_id": "WOS:000248377800005"}