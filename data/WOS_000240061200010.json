{"auto_keywords": [{"score": 0.04257844278060511, "phrase": "determinacy_inference"}, {"score": 0.00481495049065317, "phrase": "prolog_programs"}, {"score": 0.00471811808206897, "phrase": "program_development"}, {"score": 0.0043793594257092805, "phrase": "prolog_program"}, {"score": 0.0035016702571862165, "phrase": "determinacy_conditions"}, {"score": 0.003036832649117453, "phrase": "serious_deficiencies"}, {"score": 0.0025804616931593897, "phrase": "radically_new_form"}, {"score": 0.002162951519368368, "phrase": "rightmost_goal"}, {"score": 0.0021049977753042253, "phrase": "leftmost_goal"}], "paper_keywords": [""], "paper_abstract": "In program development it is useful to know that a call to a Prolog program will not inadvertently leave a choice-point on the stack. Determinacy inference has been proposed for solving this problem yet the analysis was found to be wanting in that it could not infer determinacy conditions for programs that contained cuts or applied certain tests to select a clause. This paper shows how to remedy these serious deficiencies. It also addresses the problem of identifying those predicates which can be rewritten in a more deterministic fashion. To this end, a radically new form of determinacy inference is introduced, which is founded on ideas in ccp, that is capable of reasoning about the way bindings imposed by a rightmost goal can make a leftmost goal deterministic.", "paper_title": "Detecting determinacy in prolog programs", "paper_id": "WOS:000240061200010"}