{"auto_keywords": [{"score": 0.04304590109574224, "phrase": "serialization_sets"}, {"score": 0.00481495049065317, "phrase": "dynamic_dependence-based"}, {"score": 0.004558748120167778, "phrase": "new_parallel_execution_model"}, {"score": 0.004422325007817267, "phrase": "sequential_program"}, {"score": 0.004161553532799662, "phrase": "computational_operations"}, {"score": 0.004061584718427419, "phrase": "dependent_operations"}, {"score": 0.003988180913997414, "phrase": "runtime_system"}, {"score": 0.0037988336463795963, "phrase": "program_order"}, {"score": 0.003618443379266972, "phrase": "different_sets"}, {"score": 0.0034887749053459584, "phrase": "logical_ordering"}, {"score": 0.0033637374697995616, "phrase": "resulting_parallel_execution"}, {"score": 0.003184564027329188, "phrase": "api"}, {"score": 0.0031079440400330356, "phrase": "prometheus"}, {"score": 0.0029602552900111407, "phrase": "serialization_set_abstraction"}, {"score": 0.0029244418026475832, "phrase": "compile-time_template_instantiation"}, {"score": 0.0028715299874549245, "phrase": "runtime_support_library"}, {"score": 0.002751751956416832, "phrase": "parallel_programs"}, {"score": 0.002481200970201421, "phrase": "parallel_machines"}, {"score": 0.002406799309495983, "phrase": "conventional_parallel_execution_models"}, {"score": 0.0023346234464901978, "phrase": "prometheus_programs"}, {"score": 0.0021049977753042253, "phrase": "comparable_performance"}], "paper_keywords": ["Languages", " Performance", " parallel computing", " runtime system", " serialization sets", " serializer"], "paper_abstract": "This paper proposes a new parallel execution model where programmers augment a sequential program with pieces of code called serializers that dynamically map computational operations into serialization sets of dependent operations. A runtime system executes operations in the same serialization set in program order, and may concurrently execute operations in different sets. Because serialization sets establish a logical ordering on all operations, the resulting parallel execution is predictable and deterministic. We describe the API and design of Prometheus, a C++ library that implements the serialization set abstraction through compile-time template instantiation and a runtime support library. We evaluate a set of parallel programs running on the x86_64 and SPARC-V9 instruction sets and study their performance on multi-core, symmetric multiprocessor, and ccNUMA parallel machines. By contrast with conventional parallel execution models, we find that Prometheus programs are significantly easier to write, test, and debug, and their parallel execution achieves comparable performance.", "paper_title": "Serialization Sets: A Dynamic Dependence-Based Parallel Execution Model", "paper_id": "WOS:000272014600010"}