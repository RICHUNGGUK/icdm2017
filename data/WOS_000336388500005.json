{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "defect_density"}, {"score": 0.010539391314675699, "phrase": "defect_resolution_time"}, {"score": 0.010430828209420677, "phrase": "proprietary_system"}, {"score": 0.010111734487628529, "phrase": "software_development"}, {"score": 0.008625743757456582, "phrase": "real_contribution"}, {"score": 0.005872980486818509, "phrase": "uml_class_diagrams"}, {"score": 0.005832391914578799, "phrase": "sequence_diagrams"}, {"score": 0.004414653335578912, "phrase": "model-driven_development"}, {"score": 0.00435375504298636, "phrase": "big_upfront_modeling"}, {"score": 0.004323620278409076, "phrase": "substantial_investment"}, {"score": 0.004190563478825626, "phrase": "implementation_phase"}, {"score": 0.004132743580000062, "phrase": "increased_productivity"}, {"score": 0.004047500054405469, "phrase": "modeling_activity"}, {"score": 0.00386876598761639, "phrase": "final_software_product"}, {"score": 0.0038286491141253584, "phrase": "present_advancement"}, {"score": 0.003802135020791801, "phrase": "model-based_software_development"}, {"score": 0.0034978813769575233, "phrase": "uml_modeling"}, {"score": 0.00342568771304873, "phrase": "class_and_sequence_diagrams"}, {"score": 0.003107935254560724, "phrase": "post-mortem_analyses"}, {"score": 0.0030226700832113942, "phrase": "software_modules"}, {"score": 0.002869034325496957, "phrase": "resolution_time"}, {"score": 0.0023859534478427313, "phrase": "code_coupling"}, {"score": 0.0021049977753042253, "phrase": "software_maintenance"}], "paper_keywords": ["Defect resolution time", " Defect density", " UML", " Bugs", " Software maintenance", " Effort", " Productivity", " Quality"], "paper_abstract": "Background: The contribution of modeling in software development has been a subject of debates. The proponents of model-driven development argue that a big upfront modeling requires substantial investment, but it will payoff later in the implementation phase in terms of increased productivity and quality. Other software engineers perceive modeling activity as a waste of time and money without any real contribution to the final software product. Considering present advancement of model-based software development in software industry, we are challenged to investigate the real contribution of modeling in software development. Objective: We analyze the impacts of UML modeling, specifically the production of class and sequence diagrams, on the quality of the code, as measured by defect density, and on defect resolution time. Method: Using data of a proprietary system, we conduct post-mortem analyses to test the difference in defect density between software modules that are modeled and not modeled. Similarly, we test the difference in resolution time between defects that are related to modeled and not modeled functionality. Result: We have found that the production of UML class diagrams and sequence diagrams reduces defect density in the code and the time required to fix defects. These results are obtained after controlling for the effects of co-factors such as code coupling and complexity. Conclusion: The results confirm that not only does the production of UML class diagrams and sequence diagrams possibly help improve the quality of software, but also it possibly help increase the productivity in software maintenance.", "paper_title": "The impact of UML modeling on defect density and defect resolution time in a proprietary system", "paper_id": "WOS:000336388500005"}