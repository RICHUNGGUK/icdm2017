{"auto_keywords": [{"score": 0.010482114215254227, "phrase": "lazy_functional_programs"}, {"score": 0.00481495049065317, "phrase": "automatic_amortised_analysis_of_dynamic_memory_allocation"}, {"score": 0.004581505405526037, "phrase": "first_successful_attempt"}, {"score": 0.00402094658848301, "phrase": "automatic_amortisation_approach"}, {"score": 0.003946656914921612, "phrase": "hofmann"}, {"score": 0.003897890677631815, "phrase": "jost"}, {"score": 0.0037318666008429014, "phrase": "eager_evaluation"}, {"score": 0.0034634973175137486, "phrase": "lazy_setting"}, {"score": 0.003336614511719501, "phrase": "unevaluated_expressions"}, {"score": 0.0032953582866530966, "phrase": "type_annotations"}, {"score": 0.003039311963787733, "phrase": "lazy_potential"}, {"score": 0.0029097582786754444, "phrase": "proof_system"}, {"score": 0.002855934865505357, "phrase": "heap_allocations"}, {"score": 0.002803104254950008, "phrase": "minimal_functional_language"}, {"score": 0.0027512482368183596, "phrase": "higher-order_functions"}, {"score": 0.0027172101552870973, "phrase": "recursive_data_types"}, {"score": 0.002633941112839883, "phrase": "formal_cost_model"}, {"score": 0.002585206414738808, "phrase": "launchbury's_natural_semantics"}, {"score": 0.0023546984428119864, "phrase": "cost_model"}, {"score": 0.0021987994275190314, "phrase": "non-trivial_examples"}, {"score": 0.0021049977753042253, "phrase": "prototype_implementation"}], "paper_keywords": ["lazy evaluation", " resource analysis", " amortisation", " type systems"], "paper_abstract": "This paper describes the first successful attempt, of which we are aware, to define an automatic, type-based static analysis of resource bounds for lazy functional programs. Our analysis uses the automatic amortisation approach developed by Hofmann and Jost, which was previously restricted to eager evaluation. In this paper, we extend this work to a lazy setting by capturing the costs of unevaluated expressions in type annotations and by amortising the payment of these costs using a notion of lazy potential. We present our analysis as a proof system for predicting heap allocations of a minimal functional language (including higher-order functions and recursive data types) and define a formal cost model based on Launchbury's natural semantics for lazy evaluation. We prove the soundness of our analysis with respect to the cost model. Our approach is illustrated by a number of representative and non-trivial examples that have been analysed using a prototype implementation of our analysis.", "paper_title": "Automatic Amortised Analysis of Dynamic Memory Allocation for Lazy Functional Programs", "paper_id": "WOS:000311296000017"}