{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "oasis"}, {"score": 0.009469779169989615, "phrase": "mpi"}, {"score": 0.009355407774706719, "phrase": "fenics"}, {"score": 0.006513992659877427, "phrase": "distributed_program"}, {"score": 0.0064666226454810636, "phrase": "test_data"}, {"score": 0.004699093014505301, "phrase": "navier-stokes"}, {"score": 0.004574789731006492, "phrase": "python"}, {"score": 0.004508286991825192, "phrase": "fenics_project"}, {"score": 0.004388996815968557, "phrase": "large-scale_applications"}, {"score": 0.0043358179659518745, "phrase": "massively_parallel_clusters"}, {"score": 0.004200536358175037, "phrase": "linear_algebra_backend_petsc"}, {"score": 0.004099340908974491, "phrase": "highly_flexible_python_modules"}, {"score": 0.004029952287166556, "phrase": "high-level_python_interface"}, {"score": 0.003971408178423107, "phrase": "complete_control"}, {"score": 0.003810093416457147, "phrase": "piecewise_linear_elements"}, {"score": 0.003664270491811728, "phrase": "moser"}, {"score": 0.003584650242992921, "phrase": "computational_speed"}, {"score": 0.0035325522020551, "phrase": "iterative_solvers"}, {"score": 0.0034982400306595362, "phrase": "linear_algebra_backend"}, {"score": 0.003447393500233972, "phrase": "best_performance"}, {"score": 0.00343060885627576, "phrase": "similar_implicit_solver"}, {"score": 0.0034139076843511963, "phrase": "petsc"}, {"score": 0.0033725013794675606, "phrase": "higher_order_accuracy"}, {"score": 0.0033315975831074932, "phrase": "new_solvers"}, {"score": 0.003243948059827026, "phrase": "program"}, {"score": 0.0032196786163178107, "phrase": "oasis_catalogue"}, {"score": 0.0031267359296488118, "phrase": "cpc_program_library"}, {"score": 0.0031115076263594607, "phrase": "queen's_university"}, {"score": 0.0030963534134521987, "phrase": "belfast"}, {"score": 0.003081272473508291, "phrase": "n._ireland"}, {"score": 0.0027674099752459506, "phrase": "tar.gz_programming_language"}, {"score": 0.0026548901225201737, "phrase": "linux"}, {"score": 0.0026291240009281664, "phrase": "windows"}, {"score": 0.0025844947703078627, "phrase": "megabytes"}, {"score": 0.0024492764700396984, "phrase": "external_libraries"}, {"score": 0.002413639699372813, "phrase": "epetra"}, {"score": 0.002355400629887829, "phrase": "incompressible"}, {"score": 0.002344034001541533, "phrase": "newtonian"}, {"score": 0.0022158306933307685, "phrase": "high-level_python_code"}, {"score": 0.002136087390959268, "phrase": "single_processor"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["CFD", " FEniCS", " Python", " Navier-Stokes"], "paper_abstract": "Oasis is a high-level/high-performance finite element Navier-Stokes solver written from scratch in Python using building blocks from the FEniCS project (fenicsproject.org). The solver is unstructured and targets large-scale applications in complex geometries on massively parallel clusters. Oasis utilizes MPI and interfaces, through FEniCS, to the linear algebra backend PETSc. Oasis advocates a high-level, programmable user interface through the creation of highly flexible Python modules for new problems. Through the high-level Python interface the user is placed in complete control of every aspect of the solver. A version of the solver, that is using piecewise linear elements for both velocity and pressure, is shown to reproduce very well the classical, spectral, turbulent channel simulations of Moser et al. (1999). The computational speed is strongly dominated by the iterative solvers provided by the linear algebra backend, which is arguably the best performance any similar implicit solver using PETSc may hope for. Higher order accuracy is also demonstrated and new solvers may be easily added within the same framework. Program summary Program title: Oasis Catalogue identifier: AEUW_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEUW_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU Lesser GPL version 3 or any later version No. of lines in distributed program, including test data, etc.: 3491 No. of bytes in distributed program, including test data, etc.: 266924 Distribution format: tar.gz Programming language: Python/C++. Computer: Any single laptop computer or cluster. Operating system: Any (Linux, OSX, Windows). RAM: a few Megabytes to several hundred Gigabytes Classification: 12. External routines: FEniCS 1.3.0 (www.fenicsproject.org, that in turn depends on a number of external libraries like MPI, PETSc, Epetra, Boost and ParMetis) Nature of problem: Incompressible, Newtonian fluid flow. Solution method: The finite element method. Unusual features: FEniCS automatically generates and compiles low-level C++ code based on high-level Python code. Running time: The example provided takes a couple of minutes on a single processor. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Oasis: A high-level/high-performance open source Navier-Stokes solver", "paper_id": "WOS:000348261300019"}