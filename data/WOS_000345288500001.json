{"auto_keywords": [{"score": 0.03975856785595815, "phrase": "fortran"}, {"score": 0.00481495049065317, "phrase": "best_practice_optimization_methods"}, {"score": 0.004773040022691547, "phrase": "r._r"}, {"score": 0.004588891098290524, "phrase": "powerful_and_flexible_system"}, {"score": 0.004431149592844886, "phrase": "default-install_set"}, {"score": 0.004149792080414689, "phrase": "user-written_scripts"}, {"score": 0.004024651422626329, "phrase": "programming_language"}, {"score": 0.003752550907120244, "phrase": "c._success"}, {"score": 0.003305243635051068, "phrase": "workable_examples"}, {"score": 0.0032764307492734145, "phrase": "early_methods"}, {"score": 0.003068166587650604, "phrase": "open-source_project"}, {"score": 0.002936709606809639, "phrase": "\"best_practice"}, {"score": 0.0027863537694678094, "phrase": "serious_challenge"}, {"score": 0.0026206146061151917, "phrase": "nonlinear_parameter_estimation"}, {"score": 0.0025977542995083624, "phrase": "nlpe"}, {"score": 0.002508284945907166, "phrase": "present_article"}, {"score": 0.0024218895273910943, "phrase": "function_minimization"}, {"score": 0.0024007585788965655, "phrase": "essentially_smooth_functions"}, {"score": 0.0022480304016499605, "phrase": "nlpe."}, {"score": 0.0021049977753042253, "phrase": "r_users"}], "paper_keywords": ["R", " optimization methods", " best practice"], "paper_abstract": "R (R Core Team 2014) provides a powerful and flexible system for statistical computations. It has a default-install set of functionality that can be expanded by the use of several thousand add-in packages as well as user-written scripts. While R is itself a programming language, it has proven relatively easy to incorporate programs in other languages, particularly Fortran and C. Success, however, can lead to its own costs: Users face a confusion of choice when trying to select packages in approaching a problem. A need to maintain workable examples using early methods may mean some tools offered as a default may be dated. In an open-source project like R, how to decide what tools offer \"best practice\" choices, and how to implement such a policy, present a serious challenge. We discuss these issues with reference to the tools in R for nonlinear parameter estimation (NLPE) and optimization, though for the present article 'optimization' will be limited to function minimization of essentially smooth functions with at most bounds constraints on the parameters. We will abbreviate this class of problems as NLPE. We believe that the concepts proposed are transferable to other classes of problems seen by R users.", "paper_title": "On Best Practice Optimization Methods in R", "paper_id": "WOS:000345288500001"}