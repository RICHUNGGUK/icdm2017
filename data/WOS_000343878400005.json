{"auto_keywords": [{"score": 0.04116304647850638, "phrase": "kernel's_execution_environment"}, {"score": 0.03791483171214045, "phrase": "projection_functions"}, {"score": 0.02983036753507056, "phrase": "user_programs"}, {"score": 0.004653667500876187, "phrase": "great_verification_challenge"}, {"score": 0.0045556080393342165, "phrase": "complete_computer_systems"}, {"score": 0.004497762477097628, "phrase": "source_code_level"}, {"score": 0.0043842558719324526, "phrase": "major_step"}, {"score": 0.004219321533320583, "phrase": "functional_correctness"}, {"score": 0.00402610372759447, "phrase": "data_refinement"}, {"score": 0.00397495478332679, "phrase": "coarse-grained_specification"}, {"score": 0.003776750773624222, "phrase": "original_correctness_theorem"}, {"score": 0.003634587156159668, "phrase": "previous_abstraction_relations"}, {"score": 0.003542786326740931, "phrase": "abstract_states"}, {"score": 0.0032950412841674026, "phrase": "virtual_memory"}, {"score": 0.003239304090565123, "phrase": "kernel_data_structures"}, {"score": 0.0031845067058084613, "phrase": "individual_user_programs"}, {"score": 0.003025597247856977, "phrase": "memory_access"}, {"score": 0.002696366237523415, "phrase": "security_properties"}, {"score": 0.0025076619172878945, "phrase": "complete_software_systems"}, {"score": 0.002342110338541984, "phrase": "engineering_perspective"}, {"score": 0.0023123057299992587, "phrase": "general_challenges"}, {"score": 0.0022926465161639633, "phrase": "similar_projects"}, {"score": 0.0021049977753042253, "phrase": "stepwise_refinement"}], "paper_keywords": ["Trustworthy systems", " Refinement proof", " Microkernel correctness", " Isabelle/HOL"], "paper_abstract": "It is a great verification challenge to prove properties of complete computer systems on the source code level. The L4.verified project achieved a major step towards this goal by mechanising a proof of functional correctness of the seL4 kernel. They expressed correctness in terms of data refinement with a coarse-grained specification of the kernel's execution environment. In this paper, we strengthen the original correctness theorem in two ways. First, we convert the previous abstraction relations into projection functions from concrete to abstract states. Second, we revisit the specification of the kernel's execution environment: we introduce the notion of virtual memory based on the kernel data structures, we distinguish individual user programs that run on top of the kernel and we restrict the memory access of each of these programs to its virtual memory. Through our work, properties like the separation of user programs gain meaning. This paves the way for proving security properties like non-interference of user programs. Furthermore, our extension of L4.verified's proof facilitates the verification of properties about complete software systems based on the seL4 kernel. Besides the seL4-specific results, we report on our work from an engineering perspective to exemplify general challenges that similar projects are likely to encounter. Moreover, we point out the advantages of using projection functions in L4.verified's verification approach and for stepwise refinement in general.", "paper_title": "Concerned with the unprivileged: user programs in kernel refinement", "paper_id": "WOS:000343878400005"}