{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "failure_detection_protocols"}, {"score": 0.004710489616113198, "phrase": "detection_protocols"}, {"score": 0.004608284537368354, "phrase": "fundamental_building_block"}, {"score": 0.004508286991825192, "phrase": "fault-tolerant_distributed_systems"}, {"score": 0.004159763048814389, "phrase": "informal_pseudo-codes"}, {"score": 0.0038946650372062783, "phrase": "syntactical_constructs"}, {"score": 0.0037273513742154237, "phrase": "cots_programming_languages"}, {"score": 0.003489714006817602, "phrase": "informal_descriptions"}, {"score": 0.0033890026927890058, "phrase": "ad_hoc_interpretations"}, {"score": 0.002927278301452369, "phrase": "insufficiently_detailed_or_even_faulty_specifications"}, {"score": 0.002720505061804933, "phrase": "formal_syntax"}, {"score": 0.0026035011274172753, "phrase": "c_library"}, {"score": 0.002315452777999619, "phrase": "resulting_specifications"}, {"score": 0.0021049977753042253, "phrase": "standard_form"}], "paper_keywords": [""], "paper_abstract": "Failure detection protocols - a fundamental building block for crafting fault-tolerant distributed systems - are in many cases described by their authors making use of informal pseudo-codes of their conception. Often these pseudo-codes use syntactical constructs that are not available in COTS programming languages such as C or C++. This translates into informal descriptions that call for ad hoc interpretations and implementations. Being informal, these descriptions cannot be tested by their authors, which may translate into insufficiently detailed or even faulty specifications. This study tackles this problem by introducing a formal syntax for those constructs and a C library that implements them - a tool set to express and reason about failure detection protocols. The resulting specifications are longer but non-ambiguous, and eligible for becoming a standard form.", "paper_title": "Design tool to express failure detection protocols", "paper_id": "WOS:000276591800003"}