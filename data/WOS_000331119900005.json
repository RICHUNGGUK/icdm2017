{"auto_keywords": [{"score": 0.04449264151645753, "phrase": "splittable_prngs"}, {"score": 0.00481495049065317, "phrase": "pseudorandom_number_generators"}, {"score": 0.004741167616693272, "phrase": "cryptographic_hashing"}, {"score": 0.00456159659731398, "phrase": "new_splittable_pseudorandom_number_generator"}, {"score": 0.004491690532871305, "phrase": "prng"}, {"score": 0.0043215158337835706, "phrase": "cryptographic_hash_function"}, {"score": 0.004094018760244776, "phrase": "linear_prngs"}, {"score": 0.003562322256892338, "phrase": "purely_functional_programs"}, {"score": 0.0028687545730861665, "phrase": "inherent_flaws"}, {"score": 0.0027813397260607487, "phrase": "formal_arguments"}, {"score": 0.0024385083712241988, "phrase": "formal_statements"}, {"score": 0.0021378442381693847, "phrase": "provided_proofs"}, {"score": 0.0021049977753042253, "phrase": "strong_randomness_guarantees"}], "paper_keywords": ["Algorithms", " Languages", " splittable pseudorandom number generators", " provable security", " Haskell"], "paper_abstract": "We propose a new splittable pseudorandom number generator (PRNG) based on a cryptographic hash function. Splittable PRNGs, in contrast to linear PRNGs, allow the creation of two (seemingly) independent generators from a given random number generator. Splittable PRNGs are very useful for structuring purely functional programs, as they avoid the need for threading around state. We show that the currently known and used splittable PRNGs are either not efficient enough, have inherent flaws, or lack formal arguments about their randomness. In contrast, our proposed generator can be implemented efficiently, and comes with a formal statements and proofs that quantify how 'random' the results are that are generated. The provided proofs give strong randomness guarantees under assumptions commonly made in cryptography.", "paper_title": "Splittable Pseudorandom Number Generators using Cryptographic Hashing", "paper_id": "WOS:000331119900005"}