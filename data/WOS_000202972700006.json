{"auto_keywords": [{"score": 0.0352541708614718, "phrase": "grammar_rules"}, {"score": 0.029210916272337302, "phrase": "grammar_metrics"}, {"score": 0.013323835334191363, "phrase": "valid_programs"}, {"score": 0.00481495049065317, "phrase": "programming_language_grammar_rules"}, {"score": 0.004689650818647484, "phrase": "programming_language"}, {"score": 0.004507760907425495, "phrase": "software_engineering_tools"}, {"score": 0.00440976345264104, "phrase": "programming_languages"}, {"score": 0.004020813632357377, "phrase": "exact_grammar"}, {"score": 0.0038647641000798135, "phrase": "positive_samples"}, {"score": 0.0034319005131102495, "phrase": "incomplete_grammar"}, {"score": 0.003142732162296465, "phrase": "grammar_inference_process"}, {"score": 0.00304737045343781, "phrase": "good_set"}, {"score": 0.0029289895726382653, "phrase": "grammar_rule_selection"}, {"score": 0.00284009509859163, "phrase": "automatic_grammar_inference_tool"}, {"score": 0.002717750004930131, "phrase": "rule_selection"}, {"score": 0.0025892330566358503, "phrase": "grammar_based_software"}, {"score": 0.002499590390751339, "phrase": "based_metrics"}, {"score": 0.0022290883852844057, "phrase": "different_criteria"}, {"score": 0.0021805201234139475, "phrase": "proposed_criteria"}, {"score": 0.0021049977753042253, "phrase": "reasonably_good_grammar_rules"}], "paper_keywords": ["programming language grammar", " programming language dialects", " grammar metrics"], "paper_abstract": "The grammar of a programming language is important as it is used in developing software engineering tools. Sometimes grammars of programming languages are not readily available or they are incomplete; hence they are inferred from a set of valid programs. An exact grammar can not be learned from a set of positive samples (set of valid programs) alone as there exists many grammars which accept the given input programs; we call these grammars complete grammars. Therefore, given an incomplete grammar, there exists many sets of grammar rules which can make it complete. Due to many possible sets of grammar rules, the grammar inference process faces the problem of selecting a good set of grammar rules. We address the problem of grammar rule selection when they are inferred using an automatic grammar inference tool. We study the use of grammar metrics in the rule selection. Grammar metrics are traditionally used for assessing the complexity of grammar based software. The experiments show that the grammar based metrics are not sufficient for this purpose as there exist several rules which have the same metric value. Hence we propose two rule selection criteria. Experiments are done to assess different criteria. Experiments show that proposed criteria, when coupled with grammar metrics, select reasonably good grammar rules.", "paper_title": "Goodness criteria for programming language grammar rules", "paper_id": "WOS:000202972700006"}