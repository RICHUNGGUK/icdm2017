{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "server_placement"}, {"score": 0.049534773865808075, "phrase": "switch-based_clusters"}, {"score": 0.03359231291644607, "phrase": "general_clusters"}, {"score": 0.02818840379510004, "phrase": "link_contention"}, {"score": 0.004444511815446334, "phrase": "cluster_networks"}, {"score": 0.004245717817867575, "phrase": "enormous_and_scalable_total_capacity"}, {"score": 0.00397536514777614, "phrase": "network_contention"}, {"score": 0.0038965391824276594, "phrase": "load-balancing_issues"}, {"score": 0.003841189987243716, "phrase": "server_placement_problem"}, {"score": 0.00373283028885057, "phrase": "weighted_bipartite_matching"}, {"score": 0.0035759747560154044, "phrase": "optimal_solution"}, {"score": 0.0033100034226848443, "phrase": "compute_nodes"}, {"score": 0.0031527521377717215, "phrase": "multiple_same-cost_subclusters"}, {"score": 0.003099048380523229, "phrase": "large_cluster"}, {"score": 0.003028859354852274, "phrase": "irregular_topologies"}, {"score": 0.0029772596754941076, "phrase": "scalable_systems"}, {"score": 0.002951789443791314, "phrase": "incremental_expansion_capability"}, {"score": 0.0028932006069319386, "phrase": "limited_bandwidth"}, {"score": 0.0028766749330297616, "phrase": "network_links"}, {"score": 0.002843905418937706, "phrase": "network_link_contention"}, {"score": 0.0028195727965553367, "phrase": "major_concern"}, {"score": 0.0027715286135219933, "phrase": "entire_network"}, {"score": 0.0027165079504297726, "phrase": "optimal_placement_strategy"}, {"score": 0.0025578967205807843, "phrase": "hierarchical_strategy"}, {"score": 0.002367467366291158, "phrase": "tree-based_heuristic_algorithm"}, {"score": 0.002254892677810906, "phrase": "second_step"}, {"score": 0.0022355883844920976, "phrase": "lbm_algorithm"}, {"score": 0.00214768281620688, "phrase": "lbt"}, {"score": 0.0021292712473618383, "phrase": "significant_improvement"}], "paper_keywords": ["Cluster computing", " Parallel I/O", " I/O server placement", " Load balancing", " Switch-based cluster", " Irregular network", " Load-balancing matching algorithm", " Load-balancing tree-traversing algorithm"], "paper_abstract": "In this paper, we consider how to optimize I/O server placement in order to improve parallel I/O performance in switch-based clusters. The significant advances in cluster networks in recent years have made it practical to connect tens of thousands of hosts via networks that have enormous and scalable total capacity, and in which communications between a host and any other host incur the same cost. The same cost property frees users from consideration of network contention and allows them to concentrate on load-balancing issues. We formulate the server placement problem on a cluster that has the same cost property as a weighted bipartite matching with the goal of balancing the workload on the I/O nodes. To find an optimal solution to this problem, we propose an O(n(3/2) m(log n + log m)) algorithm, called Load Balance Matching (LBM), where n is the number of compute nodes and m is the number of I/O servers. We also investigate server placement for general clusters in which multiple same-cost subclusters are interconnected to form a large cluster. This class of clusters typically adopt irregular topologies that allow the construction of scalable systems with an incremental expansion capability. Also, due to the limited bandwidth on network links between subclusters, network link contention is a major concern when distributing servers over the entire network. We show that finding an optimal placement strategy for general clusters with the goal of minimizing link contention is computationally intractable. To resolve this problem, we propose a hierarchical strategy that places servers in two steps. First, to minimize link contention, we decide which subcluster each server should be assigned to. We propose a tree-based heuristic algorithm, called Load Balance Traversing (LBT), to solve this problem. In the second step, the LBM algorithm decides the location of each server within a subcluster. Our simulation results demonstrate that LBT achieves a significant improvement in parallel I/O performance over four other algorithms, and is near-optimal in some cases. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Optimizing server placement for parallel I/O in switch-based clusters", "paper_id": "WOS:000263437700006"}