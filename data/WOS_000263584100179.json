{"auto_keywords": [{"score": 0.0337564946121533, "phrase": "aspectj"}, {"score": 0.00481495049065317, "phrase": "aspect-oriented_programming"}, {"score": 0.0046118021635786315, "phrase": "emergent_technology"}, {"score": 0.004449045430179066, "phrase": "crosscutting_concerns"}, {"score": 0.004230749292148046, "phrase": "aop_paradigm"}, {"score": 0.004081385289516914, "phrase": "aspect_notion"}, {"score": 0.003965684670332574, "phrase": "basic_unit"}, {"score": 0.003853251284913932, "phrase": "crosscutting_concern_logic"}, {"score": 0.0034097787109430384, "phrase": "functional_components"}, {"score": 0.00278752137116301, "phrase": "wide_and_powerful_approach"}, {"score": 0.0025021765811679446, "phrase": "symbolic_rules"}, {"score": 0.002448704249007665, "phrase": "expert_embedded_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Expert systems", " Aspect-oriented programming", " Aspects conflicts", " Aspect weaving", " AspectJ"], "paper_abstract": "Aspect-oriented programming (AOP) is an emergent technology for the modularization of crosscutting concerns. The most used approach to support the AOP paradigm is based on the aspect notion, as the basic unit that contains the crosscutting concern logic and a method (pointcuts, advice, and joinpoints) that relates it to the functional components. This mechanism, popularized by tools like AspectJ, restricts and limits the handling of conflicts among aspects. In this work, a flexible, wide and powerful approach is presented. This strategy is based on two main mechanisms: definition of associations and symbolic rules. An expert embedded system detects and solves conflicts automatically. The approach presented is implemented in a prototype denominated MEDIATOR. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "Expert in conflicts", "paper_id": "WOS:000263584100179"}