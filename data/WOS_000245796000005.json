{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "top-k_queries"}, {"score": 0.014145550763912981, "phrase": "wide_range"}, {"score": 0.00884143470724357, "phrase": "relational_operators"}, {"score": 0.007732183248582525, "phrase": "existing_algorithms"}, {"score": 0.007454743266842686, "phrase": "access_scenarios"}, {"score": 0.004495324811112985, "phrase": "logical_tasks"}, {"score": 0.004299228562179176, "phrase": "possible_scenarios"}, {"score": 0.004075946554498088, "phrase": "systematic_\"adaptivity"}, {"score": 0.004008568312912331, "phrase": "runtime_specifics"}, {"score": 0.003942299471749811, "phrase": "critical_lacking"}, {"score": 0.0038513524381387364, "phrase": "cost-based_optimization_approach"}, {"score": 0.003712640297460159, "phrase": "cost-based_optimization"}, {"score": 0.003555111690239916, "phrase": "specific_access_costs"}, {"score": 0.003415619374740772, "phrase": "relational_queries"}, {"score": 0.0032925489316383955, "phrase": "ranked_queries"}, {"score": 0.0030902938839530883, "phrase": "first_barrier"}, {"score": 0.0030189426536422577, "phrase": "\"comprehensive\"_space"}, {"score": 0.0029888685853794988, "phrase": "possibly_optimal_algorithms"}, {"score": 0.0029198522863606953, "phrase": "second_barrier"}, {"score": 0.0028907624732186373, "phrase": "conflicting_goal"}, {"score": 0.002777264648691937, "phrase": "efficient_search"}, {"score": 0.0027495914857929584, "phrase": "sql_queries"}, {"score": 0.002572001496778222, "phrase": "\"query_plans"}, {"score": 0.0023268399760599336, "phrase": "comprehensive_and_focused_space"}, {"score": 0.0022730758011263318, "phrase": "efficient_search_schemes"}, {"score": 0.0022279798606617356, "phrase": "optimal_algorithm"}], "paper_keywords": ["algorithms", " performance", " top-k query processing", " middlewares"], "paper_abstract": "This article studies optimizing top-k queries in middlewares. While many assorted algorithms have been proposed, none is generally applicable to a wide range of possible scenarios. Existing algorithms lack both the \"generality\" to support a wide range of access scenarios and the systematic \"adaptivity\" to account for runtime specifics. To fulfill this critical lacking, we aim at taking a cost-based optimization approach: By runtime search over a space of algorithms, cost-based optimization is general across a wide range of access scenarios, yet adaptive to the specific access costs at runtime. While such optimization has been taken for granted for relational queries from early on, it has been clearly lacking for ranked queries. In this article, we thus identify and address the barriers of realizing such a unified framework. As the first barrier, we need to define a \"comprehensive\" space encompassing all possibly optimal algorithms to search over. As the second barrier and a conflicting goal, such a space should also be \"focused\" enough to enable efficient search. For SQL queries that are explicitly composed of relational operators, such a space, by definition, consists of schedules of relational operators (or \"query plans\"). In contrast, top-k queries do not have logical tasks, such as relational operators. We thus define the logical tasks of top-k queries as building blocks to identify a comprehensive and focused space for top-k queries. We then develop efficient search schemes over such space for identifying the optimal algorithm. Our study indicates that our framework not only unifies, but also outperforms existing algorithms specifically designed for their scenarios.", "paper_title": "Optimizing top-k queries for middleware access: A unified cost-based approach", "paper_id": "WOS:000245796000005"}