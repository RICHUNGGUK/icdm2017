{"auto_keywords": [{"score": 0.03746316896806198, "phrase": "transformation_development"}, {"score": 0.00481495049065317, "phrase": "engineering_model_transformations"}, {"score": 0.004733347359490221, "phrase": "model_transformation"}, {"score": 0.004548253531664032, "phrase": "model-driven_engineering"}, {"score": 0.0043953478557600565, "phrase": "increasing_complexity"}, {"score": 0.004296264970612285, "phrase": "modelling_languages"}, {"score": 0.004081385289516914, "phrase": "model_transformations"}, {"score": 0.0036001255166809793, "phrase": "implementation_phase"}, {"score": 0.0033048445033866795, "phrase": "sound_engineering_principles"}, {"score": 0.0030337085953063125, "phrase": "cohesive_support"}, {"score": 0.0026452734009203764, "phrase": "unified_family"}, {"score": 0.0025561788724870974, "phrase": "life_cycle"}, {"score": 0.002373276186210053, "phrase": "mde_approach"}, {"score": 0.002254357921422124, "phrase": "progressive_refinement"}, {"score": 0.0021908807203548345, "phrase": "different_phases"}], "paper_keywords": ["Model-driven engineering", " Model transformation", " Domain-specific languages"], "paper_abstract": "Model transformation is one of the pillars of model-driven engineering (MDE). The increasing complexity of systems and modelling languages has dramatically raised the complexity and size of model transformations as well. Even though many transformation languages and tools have been proposed in the last few years, most of them are directed to the implementation phase of transformation development. In this way, even though transformations should be built using sound engineering principles-just like any other kind of software-there is currently a lack of cohesive support for the other phases of the transformation development, like requirements, analysis, design and testing. In this paper, we propose a unified family of languages to cover the life cycle of transformation development enabling the engineering of transformations. Moreover, following an MDE approach, we provide tools to partially automate the progressive refinement of models between the different phases and the generation of code for several transformation implementation languages.", "paper_title": "Engineering model transformations with transML", "paper_id": "WOS:000321268300010"}