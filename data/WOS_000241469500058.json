{"auto_keywords": [{"score": 0.04907561130245922, "phrase": "openmp"}, {"score": 0.00481495049065317, "phrase": "openmp's_work-sharing_directives"}, {"score": 0.004566567411073082, "phrase": "portable_programming_interface"}, {"score": 0.004470823343432748, "phrase": "shared_memory_parallel_computers"}, {"score": 0.003936910716320182, "phrase": "small_smps"}, {"score": 0.003773449694108617, "phrase": "greater_flexibility"}, {"score": 0.0035786000713014625, "phrase": "steadily_growing_size"}, {"score": 0.003503497128638102, "phrase": "individual_smps"}, {"score": 0.0033937776228549557, "phrase": "recent_advent"}, {"score": 0.003322540556404882, "phrase": "multithreaded_chips"}, {"score": 0.0029253546782349875, "phrase": "expressivity_problems"}, {"score": 0.002833689453299307, "phrase": "current_openmp_specification"}, {"score": 0.0024947959375982614, "phrase": "thread_subteams"}, {"score": 0.0024423826953133844, "phrase": "thread_topologies"}, {"score": 0.002196342933346204, "phrase": "openmp_application_performance"}, {"score": 0.0021049977753042253, "phrase": "large-scale_platforms"}], "paper_keywords": [""], "paper_abstract": "OpenMP provides a portable programming interface for shared memory parallel computers (SMPs). Although this interface has proven successful for small SMPs, it requies greater flexibility in light of the steadily growing size of individual SMPs and the recent advent of multithreaded chips. In this paper, we describe two application development experiences that exposed these expressivity problems in the current OpenMP specification. We then propose mechanisms to overcome these limitations, including thread subteams and thread topologies. Thus, we identify language features that improve OpenMP application performance on emerging and large-scale platforms while preserving ease of programming.", "paper_title": "Toward enhancing OpenMP's work-sharing directives", "paper_id": "WOS:000241469500058"}