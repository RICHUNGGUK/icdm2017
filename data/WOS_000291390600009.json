{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "slice_sampling"}, {"score": 0.028474993745643697, "phrase": "multivariate_slice_sampler"}, {"score": 0.00474946741204285, "phrase": "easily_implemented_method"}, {"score": 0.004663533386096864, "phrase": "markov_chain"}, {"score": 0.004642292792558686, "phrase": "monte_carlo"}, {"score": 0.00429558848734449, "phrase": "repeated_evaluation"}, {"score": 0.0037284065559949064, "phrase": "slice_sampler"}, {"score": 0.0035133644847622383, "phrase": "multivariate_updates"}, {"score": 0.003325852346387272, "phrase": "slow_mixing_samplers"}, {"score": 0.003091262582401731, "phrase": "parallel_implementation"}, {"score": 0.0030076088903023034, "phrase": "recent_advances"}, {"score": 0.0029802289354540507, "phrase": "computer_architectures"}, {"score": 0.0028995712226514746, "phrase": "newest_generation"}, {"score": 0.0028731719610706214, "phrase": "graphics_cards"}, {"score": 0.0026461080202599694, "phrase": "good_mixing_properties"}, {"score": 0.0025627194819793347, "phrase": "computing_time"}, {"score": 0.002234031373581961, "phrase": "mcmc_algorithms"}, {"score": 0.0021049977753042253, "phrase": "real_and_simulated_data"}], "paper_keywords": ["Slice sampling", " Parallel computing", " Markov chain Monte Carlo", " Gaussian processes", " Spatial model", " Adaptive Markov chain Monte Carlo"], "paper_abstract": "Slice sampling provides an easily implemented method for constructing a Markov chain Monte Carlo (MCMC) algorithm. However, slice sampling has two major drawbacks: (i) it requires repeated evaluation of likelihoods for each update, which can make it impractical when evaluations are expensive or as the number of evaluations grows (geometrically) with the dimension of the slice sampler, and (ii) since it can be challenging to construct multivariate updates, the updates are typically univariate, which often results in slow mixing samplers. We propose an approach to multivariate slice sampling that naturally lends itself to a parallel implementation. Our approach takes advantage of recent advances in computer architectures, for instance, the newest generation of graphics cards can execute roughly 30,000 threads simultaneously. We demonstrate that it is possible to construct a multivariate slice sampler that has good mixing properties and is efficient in terms of computing time. The contributions of this article are therefore twofold. We study approaches for constructing a multivariate slice sampler, and we show how parallel computing can be useful for making MCMC algorithms computationally efficient. We study various implementations of our algorithm in the context of real and simulated data.", "paper_title": "Parallel multivariate slice sampling", "paper_id": "WOS:000291390600009"}