{"auto_keywords": [{"score": 0.03040547571693414, "phrase": "candidate_generation"}, {"score": 0.00481495049065317, "phrase": "prefix_filtering"}, {"score": 0.004742290714667451, "phrase": "set_similarity"}, {"score": 0.004328689762198895, "phrase": "specified_threshold"}, {"score": 0.004263336444795021, "phrase": "major_importance"}, {"score": 0.004032002950217453, "phrase": "set_similarity_joins"}, {"score": 0.003793876828939456, "phrase": "large_datasets"}, {"score": 0.0036245239349157236, "phrase": "similarity_notions"}, {"score": 0.0034277338119963886, "phrase": "high_level"}, {"score": 0.003258090521354736, "phrase": "candidate_pairs"}, {"score": 0.00317643367669255, "phrase": "actual_similarity_measure"}, {"score": 0.0030655302236416502, "phrase": "correct_answer"}, {"score": 0.003034558550137019, "phrase": "previous_work"}, {"score": 0.0028263192354046245, "phrase": "major_effort"}, {"score": 0.0027835848648596513, "phrase": "better_pruning_results"}, {"score": 0.0026057256900479026, "phrase": "computational_cost"}, {"score": 0.00248927752933113, "phrase": "indexed_objects"}, {"score": 0.0023659694724243764, "phrase": "verification_phase"}, {"score": 0.002214734873559146, "phrase": "substantial_speed-ups"}, {"score": 0.00217017119491777, "phrase": "known_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Advanced query processing", " Set similarity join"], "paper_abstract": "Identification of all pairs of objects in a dataset whose similarity is not less than a specified threshold is of major importance for management, search, and analysis of data. Set similarity joins are commonly used to implement this operation; they scale to large datasets and are versatile to represent a variety of similarity notions. Most methods proposed so far present two main phases at a high level of abstraction: candidate generation producing a set of candidate pairs and verification applying the actual similarity measure to the candidates and returning the correct answer. Previous work has primarily focused on the reduction of candidates, where candidate generation presented the major effort to obtain better pruning results. Here, we propose an opposite approach. We drastically decrease the computational cost of candidate generation by dynamically reducing the number of indexed objects at the expense of increasing the workload of the verification phase. Our experimental findings show that this trade-off is advantageous: we consistently achieve substantial speed-ups as compared to known algorithms. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Generalizing prefix filtering to improve set similarity joins", "paper_id": "WOS:000283906900005"}