{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "accepting_cycles"}, {"score": 0.004773692073488661, "phrase": "existing_algorithms"}, {"score": 0.004398872331144531, "phrase": "real-world_applications"}, {"score": 0.004213519983188574, "phrase": "hardware_system"}, {"score": 0.0039841418890102925, "phrase": "even_all_counterexamples"}, {"score": 0.0037188360359702182, "phrase": "detecting_all_accepting_cycles"}, {"score": 0.0035162927451540065, "phrase": "ltl._different"}, {"score": 0.0033971539563683174, "phrase": "daac_first_searches"}, {"score": 0.0033391018638565715, "phrase": "strongly_connected_components"}, {"score": 0.0031571782245270958, "phrase": "ascc"}, {"score": 0.003050166508545763, "phrase": "great_many_paths"}, {"score": 0.0027503564589458837, "phrase": "intersection_computation_technique"}, {"score": 0.0027150087516999047, "phrase": "dynamic_path_management_technique"}, {"score": 0.0026570998719084153, "phrase": "minimal_perfect_hash_function"}, {"score": 0.00253400005142168, "phrase": "experimental_comparisons"}, {"score": 0.0025014259919355453, "phrase": "state-of-the-art_algorithms"}, {"score": 0.0024799423362011582, "phrase": "detect_accepting_cycle"}, {"score": 0.002236055625099805, "phrase": "comparative_results"}, {"score": 0.0021049977753042253, "phrase": "practical_performance"}], "paper_keywords": ["Model checking", " detection of all accepting cycles", " state space explosion", " accepting strongly connected component", " breath-first search"], "paper_abstract": "Existing algorithms for I/O Linear Temporal Logic (LTL) model checking usually output a single counterexample for a system which violates the property. However, in real-world applications, such as diagnosis and debugging in software and hardware system designs, people often need to have a set of counterexamples or even all counterexamples. For this purpose, we propose an I/O efficient approach for detecting all accepting cycles, called Detecting All Accepting Cycles (DAAC), where the properties to be verified are in LTL. Different from other algorithms for finding all cycles, DAAC first searches for the accepting strongly connected components (ASCCs), and then finds all accepting cycles of every ASCC, which can avoid searching for a great many paths that are impossible to be extended to accepting cycles. In order to further lower DAAC's I/O complexity and improve its performance, we propose an intersection computation technique and a dynamic path management technique, and exploit a minimal perfect hash function (MPHF). We carry out both complexity and experimental comparisons with the state-of-the-art algorithms including Detect Accepting Cycle (DAC), Maximal Accepting Predecessors (MAP) and Iterative-Deepening Depth-First Search (IDDFS). The comparative results show that our approach is better on the whole in terms of I/O complexity and practical performance, despite the fact that it finds all counterexamples.", "paper_title": "An I/O Efficient Approach for Detecting All Accepting Cycles", "paper_id": "WOS:000359563800001"}