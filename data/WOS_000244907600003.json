{"auto_keywords": [{"score": 0.048297791562778726, "phrase": "conjunctive_query"}, {"score": 0.014205631666374119, "phrase": "conjunctive_queries"}, {"score": 0.013427547516352943, "phrase": "optimal_search-tree"}, {"score": 0.004566123591480369, "phrase": "searching_trees"}, {"score": 0.004531637625717547, "phrase": "partial_solutions"}, {"score": 0.004297388539539564, "phrase": "time-bound_guarantee"}, {"score": 0.003953409087444568, "phrase": "database_d"}, {"score": 0.003908678575537341, "phrase": "conjunctive_query_q"}, {"score": 0.0033329032920236994, "phrase": "numberof_bound_variables"}, {"score": 0.0031246358910995316, "phrase": "maximum_arity"}, {"score": 0.0028851913035322415, "phrase": "naive_search-tree_method"}, {"score": 0.0025941547726803594, "phrase": "equivalent_form"}, {"score": 0.002459810433812049, "phrase": "np-hard_task"}, {"score": 0.0022972306948217548, "phrase": "bounded_size"}, {"score": 0.002203200914130907, "phrase": "constraint-satisfaction_problems"}, {"score": 0.0021782296784218923, "phrase": "well-publicized_correspondence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["conjunctive query", " constraint-satisfaction problem", " treewidth"], "paper_abstract": "The most natural and perhaps most frequently used method for testing membership of an individual tuple in a conjunctive query is based on searching trees of partial solutions, or search-trees. We investigate the question of evaluating conjunctive queries with a time-bound guarantee that is measured as a function of the size of the optimal search-tree. We provide an algorithm that, given a database D, a conjunctive query Q, and a tuple a, tests whether Q(a) holds in D in time bounded by a polynomial in (sn)(logk)(sn)(log log n) and n(r), wheren is the size of the domain of the database, k is the numberof bound variables of the conjunctive query, s is the size of the optimal search-tree, and r is the maximum arity of the relations. In many cases of interest, this bound is significantly smallerthan the nO(k) boundprovided by the naive search-tree method. Moreover, ouralgorithm has the advantage of guaranteeing the bound for any given conjunctive query. In particular, it guarantees the bound for queries that admit an equivalent form that is much easier to evaluate, even when finding such a form is an NP-hard task. Concrete examples include the conjunctive queries that can be non-trivially folded into a conjunctive query of bounded size or bounded treewidth. All our results translate to the context of constraint-satisfaction problems via the well-publicized correspondence between both frameworks. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Conjunctive query evaluation by search-tree revisited", "paper_id": "WOS:000244907600003"}