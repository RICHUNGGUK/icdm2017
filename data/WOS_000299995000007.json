{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_branch_prediction"}, {"score": 0.004714023408114857, "phrase": "indirect_jump"}, {"score": 0.004470823343432748, "phrase": "indirect_jump_instructions"}, {"score": 0.004240116703465252, "phrase": "multiway_branch_statements"}, {"score": 0.004151188559520802, "phrase": "virtual_function_calls"}, {"score": 0.004064117897000019, "phrase": "object-oriented_languages"}, {"score": 0.003813669883040509, "phrase": "significant_impact"}, {"score": 0.0037336520904376687, "phrase": "program_performance"}, {"score": 0.003578600071301459, "phrase": "hardware_predictors"}, {"score": 0.003287482882222731, "phrase": "modern_processors"}, {"score": 0.0032184697893776052, "phrase": "indirect_branch_predictors"}, {"score": 0.0030199761431186434, "phrase": "target_address"}, {"score": 0.0028944757265206332, "phrase": "global_history"}, {"score": 0.002744888626958772, "phrase": "code_generation_technique"}, {"score": 0.0026307897899760383, "phrase": "branch_history_information"}, {"score": 0.0023408288327263316, "phrase": "assembly_language_transformation"}, {"score": 0.002196342933346204, "phrase": "spec_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "simulated_and_real_hardware"}], "paper_keywords": ["Algorithms", " Experimentation", " Branch prediction", " interpreters", " object oriented"], "paper_abstract": "Indirect jump instructions are used to implement multiway branch statements and virtual function calls in object-oriented languages. Branch behavior can have significant impact on program performance, but fortunately hardware predictors can alleviate much of the risk. Modern processors include indirect branch predictors which use part of the target address to update a global history. We present a code generation technique to maximize the branch history information available to the predictor. We implement our optimization as an assembly language transformation, and evaluate it for SPEC benchmarks and interpreters using simulated and real hardware, showing indirect branch misprediction decreases.", "paper_title": "Compiler Techniques to Improve Dynamic Branch Prediction for Indirect Jump and Call Instructions", "paper_id": "WOS:000299995000007"}