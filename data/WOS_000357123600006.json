{"auto_keywords": [{"score": 0.049631680892871025, "phrase": "python"}, {"score": 0.008352743206421485, "phrase": "reticulated_python"}, {"score": 0.00756134777674854, "phrase": "static_and_dynamic_typing"}, {"score": 0.005628517303987919, "phrase": "dynamic_semantics"}, {"score": 0.00481495049065317, "phrase": "design_and_evaluation_of_gradual_typing"}, {"score": 0.004594137808658537, "phrase": "clear_benefits"}, {"score": 0.004466519142879166, "phrase": "dynamic_typing"}, {"score": 0.004362870617347183, "phrase": "rapid_prototyping"}, {"score": 0.00432208488976429, "phrase": "heterogeneous_data_structures"}, {"score": 0.004182301599359094, "phrase": "static_typing"}, {"score": 0.004009175817816061, "phrase": "primary_concerns"}, {"score": 0.0039716833701918365, "phrase": "siek"}, {"score": 0.0039345406220091346, "phrase": "taha"}, {"score": 0.0037188360359702182, "phrase": "fine-grained_manner"}, {"score": 0.0036324746826127997, "phrase": "type_consistency"}, {"score": 0.003581620064675766, "phrase": "static_semantics"}, {"score": 0.003548111729206587, "phrase": "run-time_casts"}, {"score": 0.0033377940531761985, "phrase": "gradually_typed_languages"}, {"score": 0.003125175084962886, "phrase": "gradual-typed_dialects"}, {"score": 0.0029260602766930065, "phrase": "static_and_dynamic_semantics"}, {"score": 0.002885066818322192, "phrase": "type_annotations"}, {"score": 0.0027012086158226456, "phrase": "source-to-source_translator"}, {"score": 0.0025290375256888883, "phrase": "gradual_type_system"}, {"score": 0.002447101794397243, "phrase": "mutable_objects"}, {"score": 0.002291089893848235, "phrase": "herman_et_al"}], "paper_keywords": ["gradual typing", " case study", " python", " proxy"], "paper_abstract": "Combining static and dynamic typing within the same language offers clear benefits to programmers. It provides dynamic typing in situations that require rapid prototyping, heterogeneous data structures, and reflection, while supporting static typing when safety, modularity, and efficiency are primary concerns. Siek and Taha (2006) introduced an approach to combining static and dynamic typing in a fine-grained manner through the notion of type consistency in the static semantics and run-time casts in the dynamic semantics. However, many open questions remain regarding the semantics of gradually typed languages. In this paper we present Reticulated Python, a system for experimenting with gradual-typed dialects of Python. The dialects are syntactically identical to Python 3 but give static and dynamic semantics to the type annotations already present in Python 3. Reticulated Python consists of a typechecker and a source-to-source translator from Reticulated Python to Python 3. Using Reticulated Python, we evaluate a gradual type system and three approaches to the dynamic semantics of mutable objects: the traditional semantics based on Siek and Taha (2007) and Herman et al. (2007) and two new designs. We evaluate these designs in the context of several third-party Python programs.", "paper_title": "Design and Evaluation of Gradual Typing for Python", "paper_id": "WOS:000357123600006"}