{"auto_keywords": [{"score": 0.04653621931999408, "phrase": "data_mining_applications"}, {"score": 0.00481495049065317, "phrase": "mining_evolving_big_data"}, {"score": 0.004730458558634266, "phrase": "new_data"}, {"score": 0.004253618550301311, "phrase": "incremental_processing"}, {"score": 0.004178935413340453, "phrase": "promising_approach"}, {"score": 0.004129873531628877, "phrase": "refreshing_mining_results"}, {"score": 0.0040334640350288, "phrase": "previously_saved_states"}, {"score": 0.00350039705347223, "phrase": "mapreduce"}, {"score": 0.0033190180867511605, "phrase": "big_data"}, {"score": 0.0030735456330558877, "phrase": "incoop"}, {"score": 0.0029489527539649737, "phrase": "key-value_pair_level_incremental_processing_rather_than_task_level"}, {"score": 0.002498961351132696, "phrase": "novel_techniques"}, {"score": 0.0024118292918742967, "phrase": "preserved_fine-grain_computation_states"}, {"score": 0.0023139986108451967, "phrase": "one-step_algorithm"}, {"score": 0.002259883463607508, "phrase": "diverse_computation_characteristics"}, {"score": 0.002233301265743633, "phrase": "experimental_results"}, {"score": 0.002181069180139225, "phrase": "significant_performance_improvements"}, {"score": 0.0021049977753042253, "phrase": "plain_and_iterative_mapreduce"}], "paper_keywords": ["Incremental processing", " MapReduce", " iterative computation", " big data"], "paper_abstract": "As new data and updates are constantly arriving, the results of data mining applications become stale and obsolete over time. Incremental processing is a promising approach to refreshing mining results. It utilizes previously saved states to avoid the expense of re-computation from scratch. In this paper, we propose i(2)MapReduce, a novel incremental processing extension to MapReduce, the most widely used framework for mining big data. Compared with the state-of-the-art work on Incoop, i(2)MapReduce (i) performs key-value pair level incremental processing rather than task level re-computation, (ii) supports not only one-step computation but also more sophisticated iterative computation, which is widely used in data mining applications, and (iii) incorporates a set of novel techniques to reduce I/O overhead for accessing preserved fine-grain computation states. We evaluate i(2)MapReduce using a one-step algorithm and four iterative algorithms with diverse computation characteristics. Experimental results on Amazon EC2 show significant performance improvements of i(2)MapReduce compared to both plain and iterative MapReduce performing re-computation.", "paper_title": "i(2)MapReduce: Incremental MapReduce for Mining Evolving Big Data", "paper_id": "WOS:000355937800013"}