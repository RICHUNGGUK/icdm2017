{"auto_keywords": [{"score": 0.03280109928432293, "phrase": "ipac_system"}, {"score": 0.031618278413001126, "phrase": "debugging_facilities"}, {"score": 0.02522607067724401, "phrase": "mobile_nodes"}, {"score": 0.00481495049065317, "phrase": "domain_specific_language"}, {"score": 0.0046364836476864325, "phrase": "software_developers"}, {"score": 0.004549734943142138, "phrase": "large_number"}, {"score": 0.004422632150619634, "phrase": "computer_science"}, {"score": 0.004120130206000757, "phrase": "research_domains"}, {"score": 0.004043003243656031, "phrase": "domain_specific_languages"}, {"score": 0.003426640459083931, "phrase": "generated_software"}, {"score": 0.0033624514778823763, "phrase": "specific_dsl"}, {"score": 0.003207173639414978, "phrase": "simple_but_efficient_debugger"}, {"score": 0.002890266318361907, "phrase": "autonomous_mobile_nodes"}, {"score": 0.0028093921138602606, "phrase": "code_lines"}, {"score": 0.002769805263310232, "phrase": "initial_application_workflow"}, {"score": 0.0027307746993761035, "phrase": "final_code"}, {"score": 0.002679585860537941, "phrase": "known_programming_language"}, {"score": 0.0025922974876210194, "phrase": "logging_server"}, {"score": 0.002507845411496512, "phrase": "ipac_framework"}, {"score": 0.002391938519840648, "phrase": "middleware_services"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Debugger", " Domain Specific Language", " Software testing"], "paper_abstract": "Nowadays, software developers have created a large number of applications in various research domains of Computer Science. However, not all of them are familiar with the majority of the research domains. Hence, Domain Specific Languages (DSLs) can provide an abstract, concrete description of a domain in terms that can easily be managed by developers. The most important in such cases is the provision of a debugger for debugging the generated software based on a specific DSL In this paper, we propose and present a simple but efficient debugger created for the needs of the IPAC system. The debugger is able to provide debugging facilities to developers that define applications for autonomous mobile nodes. The debugger can map code lines between the initial application workflow and the final code defined in a known programming language. Finally, we propose a logging server responsible to provide debugging facilities for the IPAC framework. The IPAC system is consisted of a number of middleware services for mobile nodes acting in a network. In this system a number of mobile nodes exchanged messages that are visualized for more efficient manipulation. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Debugging applications created by a Domain Specific Language: The IPAC case", "paper_id": "WOS:000301630700013"}