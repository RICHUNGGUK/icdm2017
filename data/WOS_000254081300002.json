{"auto_keywords": [{"score": 0.047105865499285006, "phrase": "intratransaction_parallelism"}, {"score": 0.039607689734690914, "phrase": "dbms"}, {"score": 0.00481495049065317, "phrase": "database_transactions"}, {"score": 0.00475924837336259, "phrase": "thread-level_speculation"}, {"score": 0.0045959609346817535, "phrase": "chip_multiprocessors"}, {"score": 0.004464156619275582, "phrase": "database_systems"}, {"score": 0.004386887374401584, "phrase": "attractive_way"}, {"score": 0.004310949776826717, "phrase": "transaction_performance"}, {"score": 0.003996727479807572, "phrase": "significant_changes"}, {"score": 0.0035366216368204182, "phrase": "high_level"}, {"score": 0.0034551632687788857, "phrase": "transaction_programmers"}, {"score": 0.003221837753001224, "phrase": "speculative_threads"}, {"score": 0.002817639725689939, "phrase": "transaction_programmer"}, {"score": 0.002736694413701639, "phrase": "limited_number"}, {"score": 0.0026119782818898193, "phrase": "low-level_data_structures"}, {"score": 0.00249293148301837, "phrase": "incrementally_parallelizing_transactions"}, {"score": 0.002351705899181029, "phrase": "simulated_four-processor_chip-multiprocessor"}, {"score": 0.0021799789348982516, "phrase": "five_tpc-c_transactions"}, {"score": 0.0021049977753042253, "phrase": "idle_processors"}], "paper_keywords": ["design", " experimentation", " performance", " thread-level speculation", " optimistic concurrency", " chip-multiprocessing", " incremental parallelization"], "paper_abstract": "With the advent of chip multiprocessors, exploiting intratransaction parallelism in database systems is an attractive way of improving transaction performance. However, exploiting intratransaction parallelism is difficult for two reasons: first, significant changes are required to avoid races or conflicts within the DBMS; and second, adding threads to transactions requires a high level of sophistication from transaction programmers. In this article we show how dividing a transaction into speculative threads solves both problems-it minimizes the changes required to the DBMS, and the details of parallelization are hidden from the transaction programmer. Our technique requires a limited number of small, localized changes to a subset of the low-level data structures in the DBMS. Through this method of incrementally parallelizing transactions, we can dramatically improve performance: on a simulated four-processor chip-multiprocessor, we improve the response time by 44-66% for three of the five TPC-C transactions, assuming the availability of idle processors.", "paper_title": "Incrementally parallelizing database transactions with thread-level speculation", "paper_id": "WOS:000254081300002"}