{"auto_keywords": [{"score": 0.041005100479041094, "phrase": "user_distributions"}, {"score": 0.015719716506582538, "phrase": "enterprise_systems"}, {"score": 0.011877229895815534, "phrase": "application_server"}, {"score": 0.0046390482426405324, "phrase": "real-time_management"}, {"score": 0.004553510708976456, "phrase": "customer_services"}, {"score": 0.004486212539464774, "phrase": "huge_resources"}, {"score": 0.004306205029641728, "phrase": "modern_ess"}, {"score": 0.004258372598568333, "phrase": "n-tier_client-server_architecture"}, {"score": 0.0038224221344037236, "phrase": "critical_issue"}, {"score": 0.003779943062894615, "phrase": "system_performance"}, {"score": 0.003737934295442975, "phrase": "stateful_ess"}, {"score": 0.003508521802236789, "phrase": "entire_working_session"}, {"score": 0.003160854709666311, "phrase": "n-tier_architecture"}, {"score": 0.0031257046538823354, "phrase": "web_servers"}, {"score": 0.0030225753906647935, "phrase": "distributed_web_server_architectures"}, {"score": 0.002911961514073769, "phrase": "individual_requests"}, {"score": 0.0027949428646076627, "phrase": "specific_suggestions"}, {"score": 0.0027433143290371293, "phrase": "minimal_number"}, {"score": 0.0026726283357752585, "phrase": "application_reusability_threshold"}, {"score": 0.0026428931714865115, "phrase": "heuristic_version"}, {"score": 0.0024620842899061614, "phrase": "association_rules"}, {"score": 0.0024346858809238766, "phrase": "new_user_behavior"}, {"score": 0.002276566401216226, "phrase": "round-robin_distributions"}, {"score": 0.002234491924392104, "phrase": "real_data"}, {"score": 0.0022013916728990564, "phrase": "mid_size_company"}, {"score": 0.0021207658298095845, "phrase": "better_performance"}], "paper_keywords": ["clustering", " user distribution", " profile", " load balancing", " enterprise systems"], "paper_abstract": "As enterprises worldwide race to improve real-time management to improve productivity, customer services and flexibility, huge resources have been invested into enterprise systems (ESs). All modern ESs adopt an n-tier client-server architecture, which includes several application servers to hold users and applications. As in any other multi-server environment, the load distributions, and user distributions in particular, become a critical issue in tuning system performance. In stateful ESs, a user who logs onto an application server and stays connected to the server for an entire working session, which can last for days, evokes each application. Therefore, admitting a user onto an application server affects not only current but also future performance of that server. Although the n-tier architecture may involve web servers, there is little in the literature in Distributed Web Server Architectures that considers the effects of distributing users instead of individual requests to servers. The algorithm proposed in this paper gives specific suggestions in user distributions and the minimal number of servers required based on the application reusability threshold. A heuristic version of the algorithm is also presented to improve the performance. The paper also discusses how to apply association rules to predict new user behavior when distributing users in the run-time. The distributions recommended by the algorithms are compared against the Round-Robin distributions on a set of real data derived from a mid size company. The result shows that the user distributions suggested have better performance than Round Robin distributions.", "paper_title": "POCA: A user distributions algorithm in enterprise systems with clustering", "paper_id": "WOS:000237295100004"}