{"auto_keywords": [{"score": 0.02913332783498095, "phrase": "page"}, {"score": 0.028285634620564336, "phrase": "new_message_processor"}, {"score": 0.00481495049065317, "phrase": "parallel_graph_computation"}, {"score": 0.004757227624616643, "phrase": "graph_partition_quality"}, {"score": 0.004671932143798307, "phrase": "overall_performance"}, {"score": 0.0046159158660556985, "phrase": "parallel_graph_computation_systems"}, {"score": 0.004451846834142146, "phrase": "graph_partition"}, {"score": 0.004319566932528865, "phrase": "balance_factor"}, {"score": 0.004140924670517666, "phrase": "balanced_graph_partition"}, {"score": 0.004091248980678087, "phrase": "small_edge_cut_ratio"}, {"score": 0.003898411343926653, "phrase": "expensive_network_communication_cost"}, {"score": 0.0037371212381934853, "phrase": "empirical_study"}, {"score": 0.003692273373913171, "phrase": "giraph"}, {"score": 0.0035824802350703376, "phrase": "well_partitioned_graph"}, {"score": 0.0034135407979996673, "phrase": "simple_random_partitions"}, {"score": 0.0031941384895530426, "phrase": "simple_partition_strategies"}, {"score": 0.00306189690236109, "phrase": "increasing_workload"}, {"score": 0.0030251262102203385, "phrase": "local_message_processing"}, {"score": 0.0029707940194245216, "phrase": "high_quality_graph_partition"}, {"score": 0.002779769492357829, "phrase": "novel_partition_aware_graph_computation_engine"}, {"score": 0.002616762777413686, "phrase": "dynamic_concurrency_control_model"}, {"score": 0.0025235718883452585, "phrase": "local_and_remote_messages"}, {"score": 0.002478225374613311, "phrase": "unified_way"}, {"score": 0.0024336917123957387, "phrase": "dynamic_model"}, {"score": 0.0022771244331421586, "phrase": "online_statistics"}, {"score": 0.0022361964497681934, "phrase": "experimental_evaluation"}, {"score": 0.0021306081217770173, "phrase": "graph_partitions"}], "paper_keywords": ["Graph computation", " graph partition", " message processing"], "paper_abstract": "Graph partition quality affects the overall performance of parallel graph computation systems. The quality of a graph partition is measured by the balance factor and edge cut ratio. A balanced graph partition with small edge cut ratio is generally preferred since it reduces the expensive network communication cost. However, according to an empirical study on Giraph, the performance over well partitioned graph might be even two times worse than simple random partitions. This is because these systems only optimize for the simple partition strategies and cannot efficiently handle the increasing workload of local message processing when a high quality graph partition is used. In this paper, we propose a novel partition aware graph computation engine named PAGE, which equips a new message processor and a dynamic concurrency control model. The new message processor concurrently processes local and remote messages in a unified way. The dynamic model adaptively adjusts the concurrency of the processor based on the online statistics. The experimental evaluation demonstrates the superiority of PAGE over the graph partitions with various qualities.", "paper_title": "PAGE: A Partition Aware Engine for Parallel Graph Computation", "paper_id": "WOS:000346982900015"}