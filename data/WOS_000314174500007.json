{"auto_keywords": [{"score": 0.042234660233635535, "phrase": "predictive_performance"}, {"score": 0.00481495049065317, "phrase": "comprehensible_software_fault_prediction_models"}, {"score": 0.0047689174754929195, "phrase": "bayesian_network_classifiers"}, {"score": 0.004723322467153553, "phrase": "software_testing"}, {"score": 0.004655742198075387, "phrase": "crucial_activity"}, {"score": 0.004611224230543916, "phrase": "software_development"}, {"score": 0.004567129988306349, "phrase": "fault_prediction_models"}, {"score": 0.004416079619543104, "phrase": "upfront_identification"}, {"score": 0.0043738432231020885, "phrase": "faulty_software_code"}, {"score": 0.004270003565426343, "phrase": "machine_learning_literature"}, {"score": 0.004208881856146758, "phrase": "especially_the_naive_bayes_classifier"}, {"score": 0.0038600230206554792, "phrase": "alternative_bayesian_algorithms"}, {"score": 0.0037322713756404295, "phrase": "simpler_networks"}, {"score": 0.0031845067058084583, "phrase": "markov_blanket_principle"}, {"score": 0.003154012038613403, "phrase": "feature_selection"}, {"score": 0.0030790429005600898, "phrase": "natural_extension"}, {"score": 0.003049555059533735, "phrase": "bn_theory"}, {"score": 0.002864661074280052, "phrase": "auc"}, {"score": 0.0028235667474151714, "phrase": "recently_introduced_h-measure"}, {"score": 0.002730023736069673, "phrase": "statistical_framework"}, {"score": 0.00270386977099726, "phrase": "demsar"}, {"score": 0.0026268961477241026, "phrase": "simple_and_comprehensible_networks"}, {"score": 0.002527654365712841, "phrase": "bn_classifiers"}, {"score": 0.00247944491239733, "phrase": "naive_bayes_classifier"}, {"score": 0.002219516542316085, "phrase": "development_context"}, {"score": 0.0021049977753042253, "phrase": "model_selection"}], "paper_keywords": ["Software fault prediction", " Bayesian networks", " classification", " comprehensibility"], "paper_abstract": "Software testing is a crucial activity during software development and fault prediction models assist practitioners herein by providing an upfront identification of faulty software code by drawing upon the machine learning literature. While especially the Naive Bayes classifier is often applied in this regard, citing predictive performance and comprehensibility as its major strengths, a number of alternative Bayesian algorithms that boost the possibility of constructing simpler networks with fewer nodes and arcs remain unexplored. This study contributes to the literature by considering 15 different Bayesian Network (BN) classifiers and comparing them to other popular machine learning techniques. Furthermore, the applicability of the Markov blanket principle for feature selection, which is a natural extension to BN theory, is investigated. The results, both in terms of the AUC and the recently introduced H-measure, are rigorously tested using the statistical framework of Demsar. It is concluded that simple and comprehensible networks with less nodes can be constructed using BN classifiers other than the Naive Bayes classifier. Furthermore, it is found that the aspects of comprehensibility and predictive performance need to be balanced out, and also the development context is an item which should be taken into account during model selection.", "paper_title": "Toward Comprehensible Software Fault Prediction Models Using Bayesian Network Classifiers", "paper_id": "WOS:000314174500007"}