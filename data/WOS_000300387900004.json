{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "object-oriented_software_metrics"}, {"score": 0.04867862077830656, "phrase": "software_metrics"}, {"score": 0.029184684896565408, "phrase": "proposed_thresholds"}, {"score": 0.004605258779434384, "phrase": "large_number"}, {"score": 0.0045599093158915326, "phrase": "proposed_metrics"}, {"score": 0.004069280130346136, "phrase": "expected_values"}, {"score": 0.003685604033479918, "phrase": "large_collection"}, {"score": 0.003649277504586372, "phrase": "open-source_programs"}, {"score": 0.003595653860186145, "phrase": "java"}, {"score": 0.0035424245257172234, "phrase": "varying_sizes"}, {"score": 0.0034901729647741353, "phrase": "different_application_domains"}, {"score": 0.0031609257322719503, "phrase": "lcom"}, {"score": 0.003129759482598412, "phrase": "dit"}, {"score": 0.0030081030319492343, "phrase": "public_methods"}, {"score": 0.0029344771385297137, "phrase": "public_fields"}, {"score": 0.0027925723953701083, "phrase": "practical_use"}, {"score": 0.002504011301105577, "phrase": "design_principles"}, {"score": 0.00240662380079115, "phrase": "well-designed_classes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software metric thresholds", " Open-source software", " Object-oriented software"], "paper_abstract": "Despite the importance of software metrics and the large number of proposed metrics, they have not been widely applied in industry yet. One reason might be that, for most metrics, the range of expected values, i.e., reference values are not known. This paper presents results of a study on the structure of a large collection of open-source programs developed in Java, of varying sizes and from different application domains. The aim of this work is the definition of thresholds for a set of object-oriented software metrics, namely: LCOM, DIT, coupling factor, afferent couplings, number of public methods, and number of public fields. We carried out an experiment to evaluate the practical use of the proposed thresholds. The results of this evaluation indicate that the proposed thresholds can support the identification of classes which violate design principles, as well as the identification of well-designed classes. The method used in this study to derive software metrics thresholds can be applied to other software metrics in order to find their reference values. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Identifying thresholds for object-oriented software metrics", "paper_id": "WOS:000300387900004"}