{"auto_keywords": [{"score": 0.049231556988166246, "phrase": "modular_exponentiation"}, {"score": 0.010598841921788619, "phrase": "input_operands"}, {"score": 0.010458603012099674, "phrase": "csa_tree"}, {"score": 0.00481495049065317, "phrase": "efficient_design"}, {"score": 0.004772137871562584, "phrase": "rsa_cryptosystem"}, {"score": 0.004666756595735701, "phrase": "large_modulus"}, {"score": 0.004523103062368843, "phrase": "repeated_modular_multiplications"}, {"score": 0.004383852039913171, "phrase": "public_key_cryptosystems"}, {"score": 0.004344855841195913, "phrase": "secured_data_communications"}, {"score": 0.004173603566828364, "phrase": "montgomery_modular_multiplication_algorithm"}, {"score": 0.004027031316965272, "phrase": "quotient_determination"}, {"score": 0.003955679223407243, "phrase": "carry-save_addition"}, {"score": 0.003920490790314206, "phrase": "csa"}, {"score": 0.0037997077863530897, "phrase": "critical_path_delay"}, {"score": 0.0036498637283470386, "phrase": "inherent_data_dependency"}, {"score": 0.003601235776892337, "phrase": "modular_multiplication"}, {"score": 0.003569176320452192, "phrase": "square_operations"}, {"score": 0.00341309513558946, "phrase": "new_modular_exponentiation_architecture"}, {"score": 0.003163212007747804, "phrase": "mathematical_manipulation"}, {"score": 0.0031210475158175406, "phrase": "developed_architecture"}, {"score": 0.002931569771634119, "phrase": "carry-save_form"}, {"score": 0.002741269087816162, "phrase": "final_step"}, {"score": 0.0026330549554033876, "phrase": "time-consuming_carry_propagation"}, {"score": 0.002364865100579589, "phrase": "hardware_saving"}, {"score": 0.002291905937251069, "phrase": "original_critical_path_delay"}, {"score": 0.0022013916728990564, "phrase": "experimental_results"}, {"score": 0.0021430393104977788, "phrase": "least_hardware_complexity"}, {"score": 0.0021049977753042253, "phrase": "existing_work"}], "paper_keywords": ["carry-save addition (CSA)", " modular exponentiation", " Montgomery modular multiplication", " RSA cryptosystem", " VLSI architecture"], "paper_abstract": "Modular exponentiation with a large modulus, which is usually accomplished by repeated modular multiplications, has been widely used in public key cryptosystems for secured data communications. To speed up the computation, the Montgomery modular multiplication algorithm is used to relax the process of quotient determination, and the carry-save addition (CSA) is employed to reduce the critical path delay. In this paper, based on the inherent data dependency between the modular multiplication and square operations in the H-algorithm of modular exponentiation, we present a new modular exponentiation architecture with a unified modular multiplication/square module and show how to reduce the number of input operands for the CSA tree by mathematical manipulation. The developed architecture has the following advantages. 1) There is no need to convert the carry-save form of an operand into its binary representation at the end of each modular multiplication. In this way, except the final step to get the result of modular exponentiation, the time-consuming carry propagation can then be eliminated. 2) The number of input operands for the CSA tree is reduced in a very efficient way. 3) The hardware saving is achieved with very limited impact on the original critical path delay when designed with two distinct modular multiplication and square components. Experimental results show that our modular exponentiation design obtains the least hardware complexity compared with the existing work and outperforms them in terms of area-time (AT) complexity as well.", "paper_title": "A new modular exponentiation architecture for efficient design of RSA cryptosystem", "paper_id": "WOS:000258765800005"}