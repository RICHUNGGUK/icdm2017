{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "skyline_queries"}, {"score": 0.00475413908468027, "phrase": "scalable_distribution"}, {"score": 0.004576253356889219, "phrase": "intelligent_decisions"}, {"score": 0.004518442937844318, "phrase": "complex_data"}, {"score": 0.00443308765153716, "phrase": "different_and_often_conflicting_criteria"}, {"score": 0.004321772629297024, "phrase": "current_skyline_computation_methods"}, {"score": 0.004213240903095234, "phrase": "centralized_query_processors"}, {"score": 0.0040298010803060495, "phrase": "single_point"}, {"score": 0.0036864465771943933, "phrase": "skyline_query_execution"}, {"score": 0.0036167509502276294, "phrase": "large_number"}, {"score": 0.003503497128638099, "phrase": "content-based_data"}, {"score": 0.003144222265269426, "phrase": "skyline_points"}, {"score": 0.0030071857666598193, "phrase": "recursive_region"}, {"score": 0.0029502941554043964, "phrase": "dynamic_region_encoding"}, {"score": 0.0028578496983461136, "phrase": "partial_order"}, {"score": 0.002821685815956478, "phrase": "query_propagation"}, {"score": 0.002733260122876447, "phrase": "query_execution"}, {"score": 0.002532151331015729, "phrase": "total_number"}, {"score": 0.0025000985765154028, "phrase": "local_query_invocations"}, {"score": 0.0023013968622710847, "phrase": "deployed_system"}, {"score": 0.0022010126160835024, "phrase": "cluster_machines"}, {"score": 0.0021593396036472777, "phrase": "incremental_scalability"}, {"score": 0.0021319959284827896, "phrase": "significant_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "alternative_distribution_mechanisms"}], "paper_keywords": [""], "paper_abstract": "Skyline queries help users make intelligent decisions over complex data, where different and often conflicting criteria are considered. Current skyline computation methods are restricted to centralized query processors, limiting scalability and imposing a single point of failure. In this paper, we address the problem of parallelizing skyline query execution over a large number of machines by leveraging content-based data partitioning. We present a novel distributed skyline query processing algorithm (DSL) that discovers skyline points progressively. We propose two mechanisms, recursive region partitioning and dynamic region encoding, to enforce a partial order on query propagation in order to pipeline query execution. Our analysis shows that DSL is optimal in terms of the total number of local query invocations across all machines. In addition, simulations and measurements of a deployed system show that our system load balances communication and processing costs across cluster machines, providing incremental scalability and significant performance improvement over alternative distribution mechanisms.", "paper_title": "Parallelizing skyline queries for scalable distribution", "paper_id": "WOS:000237081600010"}