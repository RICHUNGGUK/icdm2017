{"auto_keywords": [{"score": 0.0424759207672759, "phrase": "dfr"}, {"score": 0.010741209897649179, "phrase": "bp_algorithm"}, {"score": 0.00481495049065317, "phrase": "design_reuse"}, {"score": 0.0047906825490581775, "phrase": "artificial_neural_networks"}, {"score": 0.004718606673885043, "phrase": "back_propagation_algorithm"}, {"score": 0.004589259240616032, "phrase": "new_high-level_hardware_design_reuse_methodology"}, {"score": 0.004429727701202369, "phrase": "case_study"}, {"score": 0.004396267325338022, "phrase": "back_propagation"}, {"score": 0.0042865396174255966, "phrase": "proposed_design_methodology"}, {"score": 0.004232702713825967, "phrase": "modular_design"}, {"score": 0.004200728051442634, "phrase": "ann."}, {"score": 0.0038255585318608693, "phrase": "general_ann_architecture"}, {"score": 0.0037870559461941297, "phrase": "dwr"}, {"score": 0.00370182720978925, "phrase": "predefined_ann_submodules_components"}, {"score": 0.0035730337943096404, "phrase": "parameterisable_soft_ip-ann_vhdl_code"}, {"score": 0.003431300185872735, "phrase": "ann_parameters"}, {"score": 0.0033967510986397946, "phrase": "different_architectural_possibilities"}, {"score": 0.0032373188881118452, "phrase": "\"off-chip_implementation"}, {"score": 0.0031088607288523927, "phrase": "chip-based_run_time_reconfiguration"}, {"score": 0.0029704098448434485, "phrase": "virtex-ii"}, {"score": 0.0029035318787543215, "phrase": "xor"}, {"score": 0.0027741761880779535, "phrase": "design_reuse_concept"}, {"score": 0.00245669781073535, "phrase": "\"on-chip_static_implementation"}, {"score": 0.002419651388696872, "phrase": "\"on-chip_rtr."}, {"score": 0.0023711216505362394, "phrase": "design_time"}, {"score": 0.002282730513620162, "phrase": "on-chip_static_implementation"}, {"score": 0.002248301564595415, "phrase": "on-chip_rtr_implementation"}, {"score": 0.002225637256299616, "phrase": "second_test_concerns_evaluation"}, {"score": 0.002208788753080851, "phrase": "generated_ip-ann_code"}, {"score": 0.0021865218861454256, "phrase": "openmore_tool"}, {"score": 0.002159003019439062, "phrase": "mean_score"}, {"score": 0.0021049977753042253, "phrase": "ip-ann_code"}], "paper_keywords": ["Reuse", " Design with reuse (DWR)", " Design for reuse (DFR)", " Artificial neural networks", " FPGA", " On-chip implementation", " Off-chip implementation", " Run time reconfiguration", " Design cost", " OpenMore"], "paper_abstract": "The aim of this paper is to propose a new high-level hardware design reuse methodology for automatic generation of artificial neural networks (ANNs) descriptions. A case study of the back propagation (BP) algorithm is proposed. To achieve our goal, the proposed design methodology is based on a modular design of the ANN. The originality of the work is the application of design for reuse (DFR) and the design with reuse (DWR) concepts to ANNs. The DFR is used for the generation of the general ANN architecture, while the DWR is applied for the exploration and exploitation of predefined ANN submodules components that are stocked in a library. The result is a synthesis and parameterisable soft IP-ANN VHDL code ready for placement and routing. With this approach, the user/designer can fix the ANN parameters and choose between different architectural possibilities and performances. The approach has been applied to the three case figures of the BP algorithm. These are the \"off-chip implementation,\" the \"on-chip static implementation\" and the \"on-chip-based run time reconfiguration (RTR).\" To validate our approach, performance evaluation of the three case architectures of the BP algorithm, using the Virtex-II and Virtex-4 FPGA is done through three examples: the XOR problem, a cardiac arrhythmia classifier and a high-dimension ANN circuit. To evaluate the design reuse concept, two tests are done: the first one concerns estimation of the cost of the design. Results show that the application of the DFR is time consuming compared to the design from scratch: 168% for the \"off-chip implementation,\" 256% for the \"on-chip static implementation\" and 260% for the \"on-chip RTR.\" However, after reuse, the design time is reduced to 0.5% for \"off-chip implementation,\" 2.08% for \"on-chip static implementation\" and 2.5% for \"on-chip RTR implementation.\" The second test concerns evaluation of the generated IP-ANN code, using the OpenMore tool. Results show a mean score of 62% which lead us to conclude that the IP-ANN code is good to be reused.", "paper_title": "Application of design reuse to artificial neural networks: case study of the back propagation algorithm", "paper_id": "WOS:000308825000006"}