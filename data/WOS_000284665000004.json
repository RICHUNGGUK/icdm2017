{"auto_keywords": [{"score": 0.04753590220697988, "phrase": "bmc"}, {"score": 0.014527745571995957, "phrase": "software_verification"}, {"score": 0.01037031473756448, "phrase": "compiled_system"}, {"score": 0.00481495049065317, "phrase": "coverage_analysis"}, {"score": 0.0047747348769918, "phrase": "safety-critical_software"}, {"score": 0.00471503739362446, "phrase": "industrial_setting"}, {"score": 0.004174929128880472, "phrase": "compiled_code"}, {"score": 0.004003348169928476, "phrase": "common_behaviors"}, {"score": 0.0038711548651825917, "phrase": "source_code"}, {"score": 0.003790751492305239, "phrase": "uncommon_behaviors"}, {"score": 0.003072807453368781, "phrase": "critical_software"}, {"score": 0.002813307389456184, "phrase": "provided_set"}, {"score": 0.002575665611013556, "phrase": "testing_phase"}, {"score": 0.002500987934534128, "phrase": "manual_generation"}, {"score": 0.0021953959824690316, "phrase": "bounded_model_checker"}, {"score": 0.002177011650568437, "phrase": "c_programs"}, {"score": 0.002158781579678088, "phrase": "cbmc"}, {"score": 0.002122775261369663, "phrase": "automatic_test_generator"}], "paper_keywords": ["Automatic test generation", " Testing", " Bounded model checking"], "paper_abstract": "Testing and Bounded Model Checking (BMC) are two techniques used in Software Verification for bug-hunting. They are expression of two different philosophies: testing is used on the compiled code and it is more suited to find errors in common behaviors, while BMC is used on the source code to find errors in uncommon behaviors of the system. Nowadays, testing is by far the most used technique for software verification in industry: it is easy to use and even when no error is found, it can release a set of tests certifying the (partial) correctness of the compiled system. In the case of safety critical software, in order to increase the confidence of the correctness of the compiled system, it is often required that the provided set of tests covers 100% of the code. This requirement, however, substantially increases the costs associated to the testing phase, since it often involves the manual generation of tests. In this paper we show how BMC can be productively applied to the Software Verification process in industry. In particular, we show how to productively use a Bounded Model Checker for C programs (CBMC) as an automatic test generator for the Coverage Analysis of Safety Critical Software.", "paper_title": "Using Bounded Model Checking for Coverage Analysis of Safety-Critical Software in an Industrial Setting", "paper_id": "WOS:000284665000004"}