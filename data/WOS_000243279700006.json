{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "geometric_applications"}, {"score": 0.00468627326602559, "phrase": "dynamic_connectivity_applications"}, {"score": 0.004623224002010226, "phrase": "computational_geometry"}, {"score": 0.0043793594257092805, "phrase": "dynamic_subgraph_connectivity"}, {"score": 0.004262273304740847, "phrase": "data_structure"}, {"score": 0.004176509019758331, "phrase": "undirected_graph"}, {"score": 0.003141598480804135, "phrase": "general_sparse_graphs"}, {"score": 0.002687702958515561, "phrase": "amortized_update_time"}, {"score": 0.0025113494092413604, "phrase": "query_time"}, {"score": 0.0022074592164608134, "phrase": "matrix_multiplication_exponent"}, {"score": 0.002119339298633587, "phrase": "tilde_hides"}, {"score": 0.0021049977753042253, "phrase": "polylogarithmic_factors"}], "paper_keywords": ["data structures", " dynamic graph algorithms", " connectivity", " computational geometry"], "paper_abstract": "Inspired by dynamic connectivity applications in computational geometry, we consider a problem we call dynamic subgraph connectivity: design a data structure for an undirected graph G = ( V, E) and a subset of vertices S subset of V to support insertions/deletions in S and connectivity queries ( are two vertices connected?) in the subgraph induced by S. We develop the first sublinear, fully dynamic method for this problem for general sparse graphs, using a combination of several simple ideas. Our method requires (O) over tilde(| E|(4 omega)/((3 omega+3))) = O(|E|(0.94)) amortized update time, and (O) over tilde(| E|(1/3)) query time, after (O) over tilde(| E|((5 omega+1)/(3 omega+3))) preprocessing time, where omega is the matrix multiplication exponent and (O) over tilde hides polylogarithmic factors.", "paper_title": "Dynamic subgraph connectivity with geometric applications", "paper_id": "WOS:000243279700006"}