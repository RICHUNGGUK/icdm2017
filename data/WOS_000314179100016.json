{"auto_keywords": [{"score": 0.044141882498322, "phrase": "event-b_method"}, {"score": 0.00481495049065317, "phrase": "formal_methods"}, {"score": 0.00469445816161498, "phrase": "reactive_systems"}, {"score": 0.0038325685550319863, "phrase": "tlc."}, {"score": 0.0034277338119963886, "phrase": "liveness_properties"}, {"score": 0.0033759367489122716, "phrase": "software_behavior"}, {"score": 0.00317643367669255, "phrase": "b_model"}, {"score": 0.002943502888225748, "phrase": "eventuality_properties"}, {"score": 0.0028551716387011637, "phrase": "transformation_rules"}, {"score": 0.0028120022457134267, "phrase": "temporal_b_model"}, {"score": 0.0023780209525032688, "phrase": "model_checker"}, {"score": 0.0023659722905705707, "phrase": "tlc"}, {"score": 0.002342048999008582, "phrase": "finite_state_systems"}, {"score": 0.002271725588755076, "phrase": "infinite-state_systems"}, {"score": 0.002181227522730908, "phrase": "predicate_diagrams"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["Design", " Verification", " Event-B method", " Language TLA(+)", " predicate diagrams", " model-checking", " theorem-proving"], "paper_abstract": "This article deals with the use of two verification approaches: theorem proving and model checking. We focus on the Event-B method by using its associated theorem proving tool (Click_n_Prove), and on the language TLA(+) by using its model checker TLC. By considering the limitation of the Event-B method to invariance properties, we propose to apply the language TLA(+) to verify liveness properties on a software behavior. We extend first the expressivity and the semantics of a B model (called temporal B model) to deal with the specification of fairness and eventuality properties. Second, we give transformation rules from a temporal B model into a TLA(+) module. We present in particular, our prototype system called B2TLA(+), that we have developed to support this transformation; then we can verify these properties thanks to the model checker TLC on finite state systems. For the verification of infinite-state systems, we propose the use of the predicate diagrams. We illustrate our approach on a case study of a parcel sorting system.", "paper_title": "Combining Formal Methods for the Development of Reactive Systems", "paper_id": "WOS:000314179100016"}