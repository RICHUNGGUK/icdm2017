{"auto_keywords": [{"score": 0.031998652250421734, "phrase": "multiple_vm_invocations"}, {"score": 0.004815215771351813, "phrase": "java"}, {"score": 0.004755279364266046, "phrase": "java_performance"}, {"score": 0.004509780213218666, "phrase": "java_application"}, {"score": 0.004440005714775306, "phrase": "virtual_machine"}, {"score": 0.004398657974555281, "phrase": "garbage_collector"}, {"score": 0.0043576936014830875, "phrase": "heap_size"}, {"score": 0.004197599791067716, "phrase": "execution_time"}, {"score": 0.004158500036893521, "phrase": "java_program"}, {"score": 0.003834542277573471, "phrase": "vm"}, {"score": 0.003786910256691685, "phrase": "timer-based_method_sampling"}, {"score": 0.0037282779842373486, "phrase": "garbage_collection"}, {"score": 0.0036363418376496484, "phrase": "wide_variety"}, {"score": 0.0036137129449624727, "phrase": "java_performance_evaluation_methodologies"}, {"score": 0.00338441786634626, "phrase": "average_performance"}, {"score": 0.0032295691829911538, "phrase": "second_best_performance"}, {"score": 0.0030625949549620475, "phrase": "single_vm_invocation"}, {"score": 0.0029870247665469358, "phrase": "single_benchmark_execution"}, {"score": 0.0029042284259394044, "phrase": "benchmark_multiple_times"}, {"score": 0.002850306175044223, "phrase": "prevalent_methodologies"}, {"score": 0.0027626452333204144, "phrase": "incorrect_conclusions"}, {"score": 0.002702887319160534, "phrase": "data_analysis"}, {"score": 0.002579140290642792, "phrase": "existing_java_performance_evaluation_methodologies"}, {"score": 0.0025312385659888178, "phrase": "statistically_rigorous_data_analysis"}, {"score": 0.002415331146563814, "phrase": "steady-state_performance"}, {"score": 0.0023410164207985297, "phrase": "javastats_software"}, {"score": 0.002311933249234786, "phrase": "performance_numbers"}, {"score": 0.0022903576812801432, "phrase": "rigorous_manner"}, {"score": 0.0022407927161620855, "phrase": "java_performance_evaluation"}, {"score": 0.0021049977753042253, "phrase": "managed_runtime_system"}], "paper_keywords": ["experimentation", " measurement", " performance", " Java", " benchmarking", " data analysis", " methodology", " statistics"], "paper_abstract": "Java performance is far from being trivial to benchmark because it is affected by various factors such as the Java application, its input, the virtual machine, the garbage collector, the heap size, etc. In addition, non-determinism at run-time causes the execution time of a Java program to differ from run to run. There are a number of sources of non-determinism such as Just-In-Time (JIT) compilation and optimization in the virtual machine (VM) driven by timer-based method sampling, thread scheduling, garbage collection, and various system effects. There exist a wide variety of Java performance evaluation methodologies used by researchers and benchmarkers. These methodologies differ from each other in a number of ways. Some report average performance over a number of runs of the same experiment; others report the best or second best performance observed; yet others report the worst. Some iterate the benchmark multiple times within a single VM invocation; others consider multiple VM invocations and iterate a single benchmark execution; yet others consider multiple VM invocations and iterate the benchmark multiple times. This paper shows that prevalent methodologies can be misleading, and can even lead to incorrect conclusions. The reason is that the data analysis is not statistically rigorous. In this paper, we present a survey of existing Java performance evaluation methodologies and discuss the importance of statistically rigorous data analysis for dealing with non-determinism. We advocate approaches to quantify startup as well as steady-state performance, and, in addition, we provide the JavaStats software to automatically obtain performance numbers in a rigorous manner. Although this paper focuses on Java performance evaluation, many of the issues addressed in this paper also apply to other programming languages and systems that build on a managed runtime system.", "paper_title": "Statistically rigorous Java performance evaluation", "paper_id": "WOS:000253410000006"}