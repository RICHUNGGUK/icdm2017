{"auto_keywords": [{"score": 0.04692465823812896, "phrase": "volume_scene_graph"}, {"score": 0.00481495049065317, "phrase": "ray-driven"}, {"score": 0.004653900688892822, "phrase": "complex_volume_scene_graphs"}, {"score": 0.004608879242346434, "phrase": "large_point_clouds"}, {"score": 0.004573072565166777, "phrase": "ray"}, {"score": 0.00443308765153716, "phrase": "multiple_point-based_volume_objects"}, {"score": 0.004305639197085793, "phrase": "high_quality_images"}, {"score": 0.004161553532799662, "phrase": "constructive_operations"}, {"score": 0.004101281992566145, "phrase": "naive_approach"}, {"score": 0.003964007795174772, "phrase": "overwhelming_amount"}, {"score": 0.0038499929374478125, "phrase": "point_datasets"}, {"score": 0.0036493838225192883, "phrase": "out-of-core_approach"}, {"score": 0.0035443861412929006, "phrase": "scalable_manner"}, {"score": 0.0030628762739398855, "phrase": "ray-driven_algorithm"}, {"score": 0.003003809128328864, "phrase": "working_set"}, {"score": 0.002875027551180213, "phrase": "control_structures"}, {"score": 0.0028333356794133053, "phrase": "ray_tracing"}, {"score": 0.002711842889248926, "phrase": "access_patterns"}, {"score": 0.002659527314613792, "phrase": "captured_knowledge"}, {"score": 0.0026337482179592422, "phrase": "ray-data_intersection"}, {"score": 0.002436289099444074, "phrase": "working_sets"}, {"score": 0.002389276641014013, "phrase": "different_sizes"}, {"score": 0.0023091721866305426, "phrase": "qualitative_and_quantitative_analysis"}, {"score": 0.0021886732310288128, "phrase": "multiple_large_pbvos"}, {"score": 0.0021049977753042253, "phrase": "desktop_computers"}], "paper_keywords": ["out-of-core", " pctree", " point-based graphics", " ray tracing", " volume scene graph"], "paper_abstract": "Ray tracing a volume scene graph composed of multiple point-based volume objects (PBVO) can produce high quality images with effects such as shadows and constructive operations. A naive approach, however, would demand an overwhelming amount of memory to accommodate all point datasets and their associated control structures such as octrees. This paper describes an out-of-core approach for rendering such a scene graph in a scalable manner. In order to address the difficulty in pre-determining the order of data caching, we introduce a technique based on a dynamic, in-core working set. We present a ray-driven algorithm for predicting the working set automatically. This allows both the data and the control structures required for ray tracing to be dynamically pre-fetched according to access patterns determined based on captured knowledge of ray-data intersection. We have conducted a series of experiments on the scalability of the technique using working sets and datasets of different sizes. With the aid of both qualitative and quantitative analysis, we demonstrate that this approach allows the rendering of multiple large PBVOs in a volume scene graph to be performed on desktop computers.", "paper_title": "Ray-driven dynamic working set rendering - For complex volume scene graphs involving large point clouds", "paper_id": "WOS:000244095300002"}