{"auto_keywords": [{"score": 0.02958201596178897, "phrase": "aspectj"}, {"score": 0.00481495049065317, "phrase": "design_patterns_density"}, {"score": 0.004681525814235883, "phrase": "case_study"}, {"score": 0.004629193512563059, "phrase": "jhotdraw"}, {"score": 0.004577440795549049, "phrase": "aspectj._design_patterns"}, {"score": 0.004475659507646842, "phrase": "common_engineering_problems"}, {"score": 0.0041136473765874815, "phrase": "program_elements"}, {"score": 0.0034359094594153304, "phrase": "\"high_density"}, {"score": 0.0029681091946289757, "phrase": "aspect_languages"}, {"score": 0.00293487292076612, "phrase": "new_means"}, {"score": 0.0028214413724451442, "phrase": "object-oriented_design_patterns"}, {"score": 0.0025208755851561368, "phrase": "jhotdraw_framework"}, {"score": 0.0023827927890399357, "phrase": "pattern_implementation"}, {"score": 0.0021049977753042253, "phrase": "pattern_density"}], "paper_keywords": [""], "paper_abstract": "Design patterns offer solutions to common engineering problems in programs [1]. In particular, they shape the evolution of program elements. However, their implementations tend to vanish in the code: thus it is hard to spot them and to understand their impact. The problem becomes even more difficult with a \"high density of pattern\": then the program becomes easy to evolve in the direction allowed by patterns but hard to change [2]. Aspect languages offer new means to modularize elements. Implementations of object-oriented design patterns with AspectJ have been proposed [3]. We aim at testing the scalability of such solutions in the JHotDraw framework. We first explore the impact of density on pattern implementation. We show how AspectJ helps to reduce this impact. This unveils the principles of aspects and AspectJ to control pattern density.", "paper_title": "Understanding design patterns density with aspects - A case study in JHotDraw using AspectJ", "paper_id": "WOS:000241358100016"}