{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mathematical_programming"}, {"score": 0.0046775681044804816, "phrase": "turing"}, {"score": 0.0041051328120736575, "phrase": "general-purpose_declarative_language"}, {"score": 0.0038179283509963695, "phrase": "new_constructive_proof"}, {"score": 0.003070996252787868, "phrase": "hardest_input"}, {"score": 0.0027741761880779535, "phrase": "minsky_register_machine"}, {"score": 0.0023990982005125763, "phrase": "software_verification"}, {"score": 0.0021049977753042253, "phrase": "turing_complete_languages"}], "paper_keywords": ["Static analysis", " Abstract interpretation", " Code verification"], "paper_abstract": "Mathematical programming is Turing complete, and can be used as a general-purpose declarative language. We present a new constructive proof of this fact, and showcase its usefulness by discussing an application to finding the hardest input of any given program running on a Minsky Register Machine. We also discuss an application of mathematical programming to software verification obtained by relaxing one of the properties of Turing complete languages.", "paper_title": "Mathematical programming: Turing completeness and applications to software analysis", "paper_id": "WOS:000337042900006"}