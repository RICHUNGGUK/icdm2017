{"auto_keywords": [{"score": 0.03712654330339069, "phrase": "concurrent_programs"}, {"score": 0.00481495049065317, "phrase": "deja_fu"}, {"score": 0.004645057834614705, "phrase": "concurrency_testing_library"}, {"score": 0.0045351782516032625, "phrase": "haskell"}, {"score": 0.0044277810648955624, "phrase": "systematic_concurrency_testing"}, {"score": 0.003975200317233532, "phrase": "potentially_nondeterministic_concurrent_programs"}, {"score": 0.003881100496537176, "phrase": "sct"}, {"score": 0.003789137457228946, "phrase": "potentially_unrepeatable_results"}, {"score": 0.0035687137873965684, "phrase": "unit_testing"}, {"score": 0.0031654684543975077, "phrase": "haskell_programmers"}, {"score": 0.0028758391869611374, "phrase": "haskell's_concurrency_abstraction"}, {"score": 0.0021049977753042253, "phrase": "pre-existing_packages"}], "paper_keywords": ["Concurrency", " functional programming", " Haskell", " non-determinism", " systematic concurrency testing"], "paper_abstract": "Systematic concurrency testing (SCT) is an approach to testing potentially nondeterministic concurrent programs. SCT avoids potentially unrepeatable results that may arise from unit testing concurrent programs. It seems to have received little attention from Haskell programmers. This paper introduces a generalisation of Haskell's concurrency abstraction in the form of typeclasses, and a library for testing concurrent programs. A number of examples are provided, some of which come from pre-existing packages.", "paper_title": "Deja Fu: A Concurrency Testing Library for Haskell", "paper_id": "WOS:000370549100014"}