{"auto_keywords": [{"score": 0.03121217513999791, "phrase": "flx"}, {"score": 0.011032890105372676, "phrase": "interacting_features"}, {"score": 0.004781357546476652, "phrase": "software_development"}, {"score": 0.0045846424310611745, "phrase": "laborious_and_error"}, {"score": 0.00436530211426514, "phrase": "different_features"}, {"score": 0.004259582098193949, "phrase": "prograrnming_language"}, {"score": 0.0036767202303156854, "phrase": "programming_language"}, {"score": 0.003587616378156851, "phrase": "execution_flows"}, {"score": 0.0035625556447293804, "phrase": "program_entanglement"}, {"score": 0.0034278075289561213, "phrase": "software_design"}, {"score": 0.003286596407873823, "phrase": "exception_handling"}, {"score": 0.0032522091171602557, "phrase": "feature_language_extensions"}, {"score": 0.003162252895465901, "phrase": "programming_language_constructs"}, {"score": 0.0030532878377173885, "phrase": "separate_and_reusable_program_modules"}, {"score": 0.0029172107428045964, "phrase": "non-procedural_program_units"}, {"score": 0.0028765701985514294, "phrase": "program_units"}, {"score": 0.0028564621282167685, "phrase": "reusable_features"}, {"score": 0.0028068030356445894, "phrase": "executable_feature_packages"}, {"score": 0.0026166287606163145, "phrase": "automatic_procedure"}, {"score": 0.0025801648787263662, "phrase": "interaction_condition"}, {"score": 0.002473786357109046, "phrase": "feature_package"}, {"score": 0.002447882520797866, "phrase": "feature_code"}, {"score": 0.002405309378904663, "phrase": "feature_packages"}, {"score": 0.0023387234705715154, "phrase": "different_combinations"}, {"score": 0.0022660100755784057, "phrase": "different_user_needs"}, {"score": 0.002242277042923036, "phrase": "flx_to_java_compiler"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["feature interaction", " program entanglement", " programming language", " feature interaction resolution", " reusable programs", " exception handling", " inheritance"], "paper_abstract": "One of the most difficult tasks in software development is that the programmer must implement a feature going through a laborious and error prone process of modifying the programs of other features. The programs of the different features entangle in the same reusable program units of the prograrnming language, making them also difficult to be verified, maintained and reused. We show that if (C1) the features interact, (C2) they are executed by the same process and (C3) they are implemented in a programming language that requires the programmer to specify execution flows, program entanglement is inevitable and the problem cannot be solved by software design alone. Applications with interacting features are common including those that require exception handling. The feature language extensions (FLX) is a set of programming language constructs designed to enable the programmer to develop interacting features as separate and reusable program modules even though the features interact. The programmer uses FLX to specify non-procedural program units, organize the program units into reusable features and integrate features into executable feature packages. He develops a feature based on a model instead of the code of other features. FLX supports an automatic procedure to detect the interaction condition among features; the programmer then resolve the interaction in a feature package without changing feature code. FLX features and feature packages are reusable; the programmer may package different combinations of them and resolve their interactions differently to meet different user needs. An FLX to Java compiler has been implemented; our experience of using it has been very positive. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Program entanglement, feature interaction and the feature language extensions", "paper_id": "WOS:000242558500008"}