{"auto_keywords": [{"score": 0.038826374424210316, "phrase": "namenode"}, {"score": 0.014855609102179448, "phrase": "hadoop"}, {"score": 0.0138228445822397, "phrase": "hdfs"}, {"score": 0.011363561593278265, "phrase": "file_system"}, {"score": 0.004815133171242322, "phrase": "distributed"}, {"score": 0.004765229460903831, "phrase": "cooperative"}, {"score": 0.0046429592670444945, "phrase": "highly-available_hadoop_distributed_file_system"}, {"score": 0.004317109072311102, "phrase": "emerging_and_effective_framework"}, {"score": 0.004272456401437226, "phrase": "big_data"}, {"score": 0.004184526032558792, "phrase": "hadoop_distributed_file_system"}, {"score": 0.0040771431404398855, "phrase": "huge_amount"}, {"score": 0.003993216345115755, "phrase": "high_performance"}, {"score": 0.003771185758226876, "phrase": "single_master_node"}, {"score": 0.003598705020845104, "phrase": "entire_namespace"}, {"score": 0.0028325548627901004, "phrase": "spof_problem"}, {"score": 0.0027886573969044042, "phrase": "manual_failover"}, {"score": 0.0026888503045081505, "phrase": "standby"}, {"score": 0.002579140290642792, "phrase": "efficiency_bottleneck_problem"}, {"score": 0.002461044825190643, "phrase": "ordinary_executions"}, {"score": 0.0023361440016375972, "phrase": "commodity_hardware"}, {"score": 0.0022407927161620855, "phrase": "highly_reliable_sophisticated_storage"}, {"score": 0.0021381565332182773, "phrase": "new_hdfs_architecture"}], "paper_keywords": ["Hadoop", " HDFS", " high-availability", " distributed NameNodes", " automatic failover", " load balancing"], "paper_abstract": "Recently, Hadoop has attracted much attention from engineers and researchers as an emerging and effective framework for Big Data. HDFS (Hadoop Distributed File System) can manage a huge amount of data with high performance and reliability using only commodity hardware. However, HDFS requires a single master node, called a NameNode, to manage the entire namespace (or all the i-nodes) of a file system. This causes the SPOF (Single Point Of Failure) problem because the file system becomes inaccessible when the NameNode fails. This also causes a bottleneck of efficiency since all the access requests to the file system have to contact the NameNode. Hadoop 2.0 resolves the SPOF problem by introducing manual failover based on two NameNodes, Active and Standby. However, it still has the efficiency bottleneck problem since all the access requests have to contact the Active in ordinary executions. It may also lose the advantage of using commodity hardware since the two NameNodes have to share a highly reliable sophisticated storage. In this paper, we propose a new HDFS architecture to resolve all the problems mentioned above.", "paper_title": "A Distributed and Cooperative NameNode Cluster for a Highly-Available Hadoop Distributed File System", "paper_id": "WOS:000356589800011"}