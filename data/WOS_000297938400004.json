{"auto_keywords": [{"score": 0.025597409128017147, "phrase": "fault_localization_techniques"}, {"score": 0.00481495049065317, "phrase": "fault_localization"}, {"score": 0.004709434052130218, "phrase": "problem._software_fault_localization_techniques"}, {"score": 0.004519543557571175, "phrase": "descending_order"}, {"score": 0.004032551494961167, "phrase": "assigned_suspiciousness"}, {"score": 0.0036785473375981533, "phrase": "total_number"}, {"score": 0.0034526191487098093, "phrase": "greater_the_variability"}, {"score": 0.0031895588542135245, "phrase": "expected_effectiveness"}, {"score": 0.0031593653672862924, "phrase": "fault_localization_technique"}, {"score": 0.003060763239325022, "phrase": "case_study"}, {"score": 0.002863572466594507, "phrase": "multiple_components"}, {"score": 0.002359759876402679, "phrase": "new_metric"}, {"score": 0.0022216880365475418, "phrase": "additional_slicing-based_approach"}], "paper_keywords": ["Program debugging", " fault localization", " critical ties", " suspiciousness", " tie-breaking"], "paper_abstract": "Software fault localization techniques typically rank program components, such as statements or predicates, in descending order of their suspiciousness (likelihood of being faulty). During debugging, programmers may examine these components, starting from the top of the ranking, in order to locate faults. However, the assigned suspiciousness to each component may not always be unique, and thus some of them may be tied for the same position in the ranking. In such a scenario, the total number of components that a programmer needs to examine in order to find the faults may vary considerably. The greater the variability, the harder it is for a programmer to decide which component to examine first, and the harder it is to accurately compute the expected effectiveness of a fault localization technique. In this paper, we first conduct a case study, based on three fault localization techniques across four sets of programs, which reveals that the phenomenon of assigning the same suspiciousness to multiple components is not limited to any technique or program in particular. Thus, to reduce variability and alleviate this problem, four tie-breaking strategies are discussed and evaluated empirically in our second case study. Results indicate that the strategies can not only reduce the number of ties in the rankings, but also maintain the effectiveness of the fault localization techniques. We also propose a new metric for evaluating fault localization techniques called CScore, which takes the notion of ties into account. Finally, an additional slicing-based approach to breaking ties is discussed briefly, which aims to provide further insights into tie-breaking and stimulate further research in the area.", "paper_title": "TIES WITHIN FAULT LOCALIZATION RANKINGS: EXPOSING AND ADDRESSING THE PROBLEM", "paper_id": "WOS:000297938400004"}