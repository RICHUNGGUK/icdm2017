{"auto_keywords": [{"score": 0.04787512667071583, "phrase": "test_cases"}, {"score": 0.015719716506582538, "phrase": "uml_models"}, {"score": 0.009125203744032702, "phrase": "test_intentions"}, {"score": 0.0045348429403481464, "phrase": "uml_system_model"}, {"score": 0.004419819325202464, "phrase": "uml_authors"}, {"score": 0.004363401436068803, "phrase": "uml_semantics"}, {"score": 0.004252707756312684, "phrase": "non-ambiguous_models"}, {"score": 0.00409188863874203, "phrase": "different_views"}, {"score": 0.0039035351575463103, "phrase": "state_space"}, {"score": 0.00385368199735867, "phrase": "modeled_system"}, {"score": 0.00361379100123983, "phrase": "uml"}, {"score": 0.003537155405923517, "phrase": "fondue_approach"}, {"score": 0.003432604816716035, "phrase": "clear_transformation_semantics"}, {"score": 0.003316884515934182, "phrase": "transformation_rules"}, {"score": 0.0029416448256236057, "phrase": "formal_specification_language"}, {"score": 0.0027583557819362034, "phrase": "co-opn_models"}, {"score": 0.0026882700311968025, "phrase": "interesting_executions"}, {"score": 0.0025424508991051483, "phrase": "possible_traces"}, {"score": 0.0024566655761509276, "phrase": "model's_semantics"}, {"score": 0.0021599099979586946, "phrase": "produced_test_cases"}, {"score": 0.0021322775033565805, "phrase": "equivalence_classes"}, {"score": 0.0021049977753042253, "phrase": "model_operation's_inputs"}], "paper_keywords": [""], "paper_abstract": "In this paper we will explain our approach for generating test cases for a UML system model. Despite the fact that UML authors claim that UML semantics are precise enough to define non-ambiguous models, we find that the overlap of the different views makes it difficult to explore and make deductions on the state space of the modeled system in order to generate test cases. Our approach is thus based on a subset of UML (inspired from the Fondue approach) for which we have defined clear transformation semantics. We provide these semantics by delineating transformation rules using the MDA (Model Driven Architecture) architecture. We transform UML models into CO-OPN (Concurrent Object Oriented Petri Nets) ones, CO-OPN being a formal specification language defined in our Laboratory. We have also defined a language for expressing test intentions for CO-OPN models. This language allows selecting interesting executions (tests cases) of a model by providing constraints over all possible traces of that model. By exploring the model's semantics with the tools we have built for our CO-OPN language we are able to generate test cases based on those test intentions. We are also able to partially eliminate redundancy in the produced test cases by finding equivalence classes in the model operation's inputs.", "paper_title": "Formal test generation from UML models", "paper_id": "WOS:000240040000007"}