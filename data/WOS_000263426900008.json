{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "workload-dependent_anticipation_intervals"}, {"score": 0.0045726187330434025, "phrase": "viable_choice"}, {"score": 0.004533427352547707, "phrase": "block-device_schedulers"}, {"score": 0.004494570360108983, "phrase": "open-source_os-kernels"}, {"score": 0.004342430078306461, "phrase": "traditional_disk-scheduling_policies"}, {"score": 0.004035946043145475, "phrase": "new_request"}, {"score": 0.0039841418890102925, "phrase": "nearby_sector"}, {"score": 0.003310447652300423, "phrase": "unsuccessful_anticipations"}, {"score": 0.0032538723984338615, "phrase": "workload-dependent_anticipation_scheduling"}, {"score": 0.0031166151196841308, "phrase": "anticipation_period"}, {"score": 0.00307657476125683, "phrase": "on-line_fashion"}, {"score": 0.002934098412396701, "phrase": "evolving_spatio-temporal_characteristics"}, {"score": 0.002810292047426252, "phrase": "underlying_computing_system"}, {"score": 0.0027503564589458837, "phrase": "spatio-temporal_features"}, {"score": 0.002668582249630492, "phrase": "system-wide_process_classification_scheme"}, {"score": 0.0025449518236394103, "phrase": "resulting_classification"}, {"score": 0.0025122373359090454, "phrase": "disk_scheduler"}, {"score": 0.0024799423362011582, "phrase": "informed_decisions"}, {"score": 0.002437525632451029, "phrase": "anticipation_interval"}, {"score": 0.0023855210798264205, "phrase": "per-process_basis"}, {"score": 0.0022848092812445533, "phrase": "current_linux_kernel"}, {"score": 0.002226430168622392, "phrase": "wide_range"}, {"score": 0.0022073031056287903, "phrase": "diverse_workloads"}], "paper_keywords": ["Scheduling of block-devices", " Anticipatory scheduling", " Kernel structures"], "paper_abstract": "Anticipatory scheduling (AS) of I/O requests has become a viable choice for block-device schedulers in open-source OS-kernels as prior work has established its superiority over traditional disk-scheduling policies. An AS-scheduler selectively stalls the block-device right after servicing a request in hope that a new request for a nearby sector will be soon posted. Clearly, this decision may introduce delays if the anticipated I/O does not arrive on time. In this paper, we build on the success of the AS and propose an approach that minimizes the overhead of unsuccessful anticipations. Our suggested approach termed workload-dependent anticipation scheduling (WAS), determines the length of every anticipation period in an on-line fashion in order to reduce penalties by taking into account the evolving spatio-temporal characteristics of running processes as well as properties of the underlying computing system. We harvest the spatio-temporal features of individual processes and employ a system-wide process classification scheme that is re-calibrated on the fly. The resulting classification enables the disk scheduler to make informed decisions and vary the anticipation interval accordingly, on a per-process basis. We have implemented and incorporated WAS into the current Linux kernel. Through experimentation with a wide range of diverse workloads, we demonstrate WAS benefits and establish reduction of penalties over other AS-scheduler implementations. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Adaptive disk scheduling with workload-dependent anticipation intervals", "paper_id": "WOS:000263426900008"}