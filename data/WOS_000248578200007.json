{"auto_keywords": [{"score": 0.028663974434608976, "phrase": "paradyn_instrumentation_daemon"}, {"score": 0.00481495049065317, "phrase": "key_technique"}, {"score": 0.004754447398742591, "phrase": "high_performance"}, {"score": 0.004481954307639453, "phrase": "function's_behavior"}, {"score": 0.0036914757355166966, "phrase": "new_method"}, {"score": 0.0031979796189858206, "phrase": "call-path_information"}, {"score": 0.003091767402370757, "phrase": "localizing_bottlenecks"}, {"score": 0.0030657684627749364, "phrase": "frequently_called_functions"}, {"score": 0.002939007076062123, "phrase": "ipath"}, {"score": 0.002600194073758015, "phrase": "callpath-specific_bottlenecks"}, {"score": 0.0025137856138000014, "phrase": "running_time"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["profiling", " performance analysis", " dynamic instrumentation"], "paper_abstract": "Profiling is a key technique for achieving high performance. Call-path profiling is a refinement of this technique that classifies a function's behavior based on the path taken to reach the function. This information is particularly useful when optimizing programs that use libraries, such as those for communication (MPI or PVM), linear algebra (ScaLAPACK), or threading. We present a new method for call-path profiling called incremental call-path profiling. We profile only a subset of the functions in the program, allowing the use of more complex metrics while lowering the overhead. This combination of call-path information and complex metrics is particularly useful for localizing bottlenecks in frequently called functions. We also describe the implementation and application of iPath, an incremental callpath profiler. iPath was used to profile two real-world applications: the MILC su3_rmd QCD distributed simulation and the Paradyn instrumentation daemon. In both applications we found and removed callpath-specific bottlenecks. Our modifications to su3_rmd reduced the running time of the program from 3001 to 1652 s, a 45% decrease. Our modifications to the Paradyn instrumentation daemon greatly increased its efficiency. The time required to instrument our benchmark program was reduced from 296 to 6.4 s, a 98% decrease. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Incremental call-path profiling", "paper_id": "WOS:000248578200007"}