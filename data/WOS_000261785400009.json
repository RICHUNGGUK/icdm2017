{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service_composition"}, {"score": 0.004671932143798307, "phrase": "automated_service_composition"}, {"score": 0.004533142516832776, "phrase": "existing_services_promises"}, {"score": 0.004478782833067256, "phrase": "fast_and_efficient_development"}, {"score": 0.004345706062641742, "phrase": "cooperative_service"}, {"score": 0.004091248980678087, "phrase": "\"why\"_part"}, {"score": 0.0037597491055035895, "phrase": "available_opportunities"}, {"score": 0.003692271726952282, "phrase": "\"service_communities"}, {"score": 0.003626000977962191, "phrase": "service_providers"}, {"score": 0.0035824802350703376, "phrase": "similar_interests"}, {"score": 0.0030251262102203385, "phrase": "existing_services"}, {"score": 0.0028650312174624635, "phrase": "service_framework"}, {"score": 0.002796616969627065, "phrase": "\"roman\"_model"}, {"score": 0.0026970382454914437, "phrase": "service_requirements"}, {"score": 0.002616762777413686, "phrase": "sequence_form"}, {"score": 0.002478225374613311, "phrase": "activity_processing_costs"}, {"score": 0.0024336917123957387, "phrase": "delegation_computation"}, {"score": 0.0023470051993423483, "phrase": "bounded_storage"}, {"score": 0.0022909325048608054, "phrase": "finite_storage"}, {"score": 0.0021960024679620886, "phrase": "efficient_processing"}, {"score": 0.002169607777109061, "phrase": "service_requests"}, {"score": 0.002143529653780496, "phrase": "service_communities"}, {"score": 0.0021049977753042253, "phrase": "polynomial_time_delegation_techniques"}], "paper_keywords": ["Finite state automata", " Service modeling", " Automated service composition"], "paper_abstract": "The paradigm of automated service composition through the integration of existing services promises a fast and efficient development of new services in cooperative service (e.g., business) environments. Although the \"why\" part of this paradigm is well understood, many key pieces are missing to utilize the available opportunities. Recently \"service communities\" where service providers with similar interests can register their services are proposed toward realizing this goal. In these communities, requests for services posed by users can be processed by delegating them to existing services, and orchestrating their executions. We use a service framework similar to the \"Roman\" model departing from it particularly assuming service requirements are specified in a sequence form. We also extend the framework to integrate activity processing costs into the delegation computation and to have services with bounded storage as opposed to finite storage. We investigate the problem of efficient processing of service requests in service communities and develop polynomial time delegation techniques guaranteeing optimality. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Minimum-cost delegation in service composition", "paper_id": "WOS:000261785400009"}