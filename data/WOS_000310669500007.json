{"auto_keywords": [{"score": 0.04386559840043185, "phrase": "remote_devices"}, {"score": 0.037568868881358096, "phrase": "complete_application_graphs"}, {"score": 0.00481495049065317, "phrase": "distributed_abstract_class_graphs"}, {"score": 0.004468037801239238, "phrase": "mobile_and_pervasive_computing_environments"}, {"score": 0.004435105455143822, "phrase": "adaptive"}, {"score": 0.00436890075128947, "phrase": "software_adaptation_mechanism"}, {"score": 0.004146015717402716, "phrase": "context_specific_optimizations"}, {"score": 0.004053994613859937, "phrase": "adaptive_offloading"}, {"score": 0.004023775199194536, "phrase": "pervasive_environments"}, {"score": 0.003949204622915113, "phrase": "computational_efficiency"}, {"score": 0.003919763262805793, "phrase": "adaptation_algorithms"}, {"score": 0.003412887952564431, "phrase": "constrained_mobile_environments"}, {"score": 0.0032629585038738856, "phrase": "application_representation"}, {"score": 0.0030617295196636173, "phrase": "abstraction_elements"}, {"score": 0.002665511985052972, "phrase": "existing_application_graph"}, {"score": 0.0025868090345615197, "phrase": "representation_approach"}, {"score": 0.00252930673503721, "phrase": "heavy_open-source_applications"}, {"score": 0.0024916819803100635, "phrase": "heterogeneous_collaboration"}, {"score": 0.002454615536099159, "phrase": "new_approach"}, {"score": 0.002436289099444074, "phrase": "graph_update_network_cost"}, {"score": 0.002152874480615438, "phrase": "considered_applications"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Adaptive offloading", " Object mobility", " Application partitioning", " Self-adaptive software systems", " Class graph"], "paper_abstract": "Self-adaptation of software has been used as a mechanism to address complexity and constraint in mobile and pervasive computing environments. Adaptive offloading is a software adaptation mechanism in which an application dynamically distributes portions of itself to remote devices to achieve context specific optimizations. The feasibility of using adaptive offloading in pervasive environments is determined by the computational efficiency of adaptation algorithms and the efficacy of their decisions. However, existing state-of-the-art approaches incur overheads from storing, updating and partitioning complete application graphs on each device, which limits their utility and scalability in resource constrained mobile environments. Hence, this paper presents a novel distributed approach to application representation in which each device maintains a graph consisting only of components in its memory space, while maintaining abstraction elements for components in remote devices. This approach removes the need to store and update complete application graphs on each device and reduces the cost of partitioning an application during adaptation. In addition, an extension to an existing application graph partitioning heuristic is proposed to utilize this representation approach. An evaluation involving computationally heavy open-source applications adapting in a heterogeneous collaboration showed that the new approach reduced graph update network cost by 100%, collaboration-wide memory cost by between 37% and 50%, power usage by between 63% and 93%, and adaptation time by between 19.47% and 98%, while improving efficacy of adaptation by 12% and 34% for two of the considered applications. (c) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Adaptive application offloading using distributed abstract class graphs in mobile environments", "paper_id": "WOS:000310669500007"}