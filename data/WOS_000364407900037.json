{"auto_keywords": [{"score": 0.049233068058238634, "phrase": "proximity_relations"}, {"score": 0.00481495049065317, "phrase": "abstraction_capability"}, {"score": 0.0047722145315845016, "phrase": "logic-based_framework"}, {"score": 0.004618720776729413, "phrase": "knowledge_discovery_technique"}, {"score": 0.004577718478319983, "phrase": "proximity-based_logic_programming_paradigm"}, {"score": 0.004510184935928004, "phrase": "background_knowledge"}, {"score": 0.004417301047282113, "phrase": "semi-automatic_way"}, {"score": 0.004339203636449911, "phrase": "efficient_and_desirable_abstraction_process"}, {"score": 0.004212084623472799, "phrase": "first-order_language"}, {"score": 0.004137600338433322, "phrase": "generalized_relationship"}, {"score": 0.0035236026196355783, "phrase": "proximity_relation"}, {"score": 0.0034715658596258018, "phrase": "hierarchical_sets"}, {"score": 0.0034202949436614723, "phrase": "abstraction_level"}, {"score": 0.0032709661258673206, "phrase": "user_help"}, {"score": 0.0031561961485589633, "phrase": "generalization_process"}, {"score": 0.002793518637161653, "phrase": "first_time"}, {"score": 0.0027522340188241446, "phrase": "analogous_features"}, {"score": 0.0026714812866037584, "phrase": "fuzzy_logic_programming_framework"}, {"score": 0.002532035301903554, "phrase": "software_tool"}, {"score": 0.0024577274522206436, "phrase": "prolog_system"}, {"score": 0.002357337046408753, "phrase": "recommended_abstract_descriptors"}, {"score": 0.0023363948709565737, "phrase": "wordnet"}, {"score": 0.0022881443200668886, "phrase": "original_generalization_mechanism"}, {"score": 0.002214370556271579, "phrase": "convenient_abstraction"}, {"score": 0.002181626277903721, "phrase": "overall_method"}, {"score": 0.0021049977753042253, "phrase": "term_ontologies"}], "paper_keywords": ["Fuzzy logic programming", " attributed-oriented induction", " proximity relations", " discovery of generalized knowledge", " WordNet"], "paper_abstract": "This paper aims to incorporate a knowledge discovery technique into the Proximity-based Logic Programming paradigm in order to generate background knowledge (conceptual hierarchies) in a semi-automatic way which may lead to an efficient and desirable abstraction process among the symbols (representing concepts) from a first-order language and to the discovery of generalized relationship among them i.e. a logic-based framework with the capability of abstraction. This method makes use of the concept of.-block characterizing the notion of equivalence when working with proximity relations. When the universe of discourse is composed of concepts which are related by proximity, the sets of.-blocks extracted from that proximity relation can be seen as hierarchical sets of concepts grouped by abstraction level. Then, each group (forming a.-block) can be labeled, with user help, by means of a more general descriptor in order to simulate a generalization process based on proximity. Thanks to this process, the system can learn concepts that were unknown initially and reply to queries that it was not able to answer. The novelty of this work is that it is the first time a method, with analogous features to the one aforementioned, is implemented inside a fuzzy logic programming framework. Certainly, in order to check the feasibility of the method, we have developed a software tool which have been integrated into the Bousi similar to Prolog system. Finally, this work presents a method to get a set of recommended abstract descriptors by using WordNet. This allows to improve the original generalization mechanism, helping the user in the task of selecting a convenient abstraction. Also, the overall method can be seen as a technique that facilitates the tuning of term ontologies.", "paper_title": "Incorporation of abstraction capability in a logic-based framework by using proximity relations", "paper_id": "WOS:000364407900037"}