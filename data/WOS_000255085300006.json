{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "buffer_overflow"}, {"score": 0.03316377535189864, "phrase": "static_and_dynamic_information"}, {"score": 0.026693106017769648, "phrase": "fitness_function"}, {"score": 0.0047588556219929756, "phrase": "automatic_test_input_data_generation"}, {"score": 0.004621447740470602, "phrase": "serious_problems"}, {"score": 0.0045143706249204905, "phrase": "software_systems"}, {"score": 0.0044356867986444426, "phrase": "critical_systems"}, {"score": 0.004282391936827106, "phrase": "nuclear_or_aerospace_software_applications"}, {"score": 0.0041102032028337366, "phrase": "severe_threats"}, {"score": 0.004014923642015515, "phrase": "severe_economic_losses"}, {"score": 0.0038309141193444015, "phrase": "security_applications"}, {"score": 0.0036553070575015344, "phrase": "administrator_privileges"}, {"score": 0.0035915423738916256, "phrase": "system_attacks"}, {"score": 0.0035288860880035985, "phrase": "unauthorized_data"}, {"score": 0.0032697235411641695, "phrase": "genetic_algorithms"}, {"score": 0.0032315723330399375, "phrase": "linear_programming"}, {"score": 0.0031938648476635225, "phrase": "evolutionary_testing"}, {"score": 0.0030833537429977797, "phrase": "buffer_overflows"}, {"score": 0.0030295361111006866, "phrase": "newly_proposed_test_input_generation_process"}, {"score": 0.002941913249957503, "phrase": "human_intervention"}, {"score": 0.0028568174308720167, "phrase": "genetic_algorithm_weights"}, {"score": 0.002646880721119838, "phrase": "genetic_search"}, {"score": 0.0022854384756395116, "phrase": "open-source_programs"}, {"score": 0.0022323643840655646, "phrase": "new_process"}, {"score": 0.0021805201234139475, "phrase": "previously_published_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["buffer overflow detection", " test data generation", " evolutionary testing"], "paper_abstract": "Buffer overflows cause serious problems in various categories of software systems. In critical systems, such as health-care, nuclear or aerospace software applications, a buffer overflow may cause severe threats to humans or severe economic losses. If they occur in network or security applications, they can be exploited to gain administrator privileges, perform system attacks, access unauthorized data, or misuse the system. This paper proposes a combination of genetic algorithms, linear programming, evolutionary testing, and static and dynamic information to detect buffer overflows. The newly proposed test input generation process avoids the need for human intervention to define and tune genetic algorithm weights and therefore it becomes completely automated. The process that guides the genetic search towards the detection of buffer overflow relies on a fitness function that takes into account static and dynamic information. Reported results of our case studies, consisting of two sets of open-source programs show that the new process and fitness function outperform previously published approaches. (C) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "Detecting buffer overflow via automatic test input data generation", "paper_id": "WOS:000255085300006"}