{"auto_keywords": [{"score": 0.04257133096705247, "phrase": "scheme"}, {"score": 0.00481495049065317, "phrase": "multi-agent_systems"}, {"score": 0.004647911247507267, "phrase": "well_established_programming_concept"}, {"score": 0.004361644989356558, "phrase": "current_program_state"}, {"score": 0.003950846696972114, "phrase": "concurrent_models"}, {"score": 0.0038407203087210775, "phrase": "process_calculi"}, {"score": 0.0037868092509097404, "phrase": "hewitt_actor_model"}, {"score": 0.0036648561832622628, "phrase": "python"}, {"score": 0.003603989174919527, "phrase": "dynamic_programming_languages"}, {"score": 0.0035317518924442982, "phrase": "ruby"}, {"score": 0.003523516485899683, "phrase": "java"}, {"score": 0.003374850332230546, "phrase": "javascript"}, {"score": 0.0030847461428168614, "phrase": "automaton_programming"}, {"score": 0.0030414140732789186, "phrase": "cooperative_threads"}, {"score": 0.002998688867384969, "phrase": "compilation_techniques"}, {"score": 0.002833689453299307, "phrase": "web_application_programming"}, {"score": 0.0025125151618810523, "phrase": "agent_behaviors"}, {"score": 0.0024597305738431226, "phrase": "behavioral_components"}, {"score": 0.0023742031943872464, "phrase": "code_readability"}, {"score": 0.002259426425685765, "phrase": "proposed_approach"}, {"score": 0.002211947103318718, "phrase": "modular_interaction_protocol_implementation"}, {"score": 0.0021350169717509714, "phrase": "main_difficulties"}, {"score": 0.0021049977753042253, "phrase": "conversational_agents_engineering"}], "paper_keywords": ["continuations", " conversational multi-agent systems", " agent oriented software engineering", " behavioral component", " continuation-based automatons"], "paper_abstract": "Continuations are a well established programming concept, allowing to explicitly capture and resume the current program state. They are present in several functional programming languages (such as Scheme), in concurrent models (such as process calculi or Hewitt actor model), and more recently in dynamic programming languages (such as Ruby, Smalltalk, Python, and even Javascript or Java). They have been applied to automaton programming, cooperative threads, compilation techniques, and have lastly raised interest in web application programming. This paper shows how this concept happens to be especially useful and elegant to program agent behaviors (or behavioral components), while increasing code readability and ease of writing. The proposed approach especially facilitates modular interaction protocol implementation, one of the main difficulties in conversational agents engineering.", "paper_title": "Continuations and behavior components engineering in multi-agent systems", "paper_id": "WOS:000242123300013"}