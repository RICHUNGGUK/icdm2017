{"auto_keywords": [{"score": 0.03363896917055259, "phrase": "formal_specifications"}, {"score": 0.013846106712417981, "phrase": "container_classes"}, {"score": 0.00481495049065317, "phrase": "java_container_classes"}, {"score": 0.004769444094319619, "phrase": "modern_programs"}, {"score": 0.004724365740062236, "phrase": "extensive_use"}, {"score": 0.0046797114400479135, "phrase": "reusable_software_libraries"}, {"score": 0.004296264970612285, "phrase": "large_java_applications"}, {"score": 0.004038943596016986, "phrase": "extensive_code_reuse"}, {"score": 0.004000741805312148, "phrase": "java_programs"}, {"score": 0.0038698476651328898, "phrase": "reusable_interfaces"}, {"score": 0.003815064377019477, "phrase": "clear_and_unambiguous_documentation"}, {"score": 0.003672853180413952, "phrase": "english"}, {"score": 0.0032149396890830575, "phrase": "associated_code"}, {"score": 0.0026078523451442256, "phrase": "java"}, {"score": 0.0025343769150179764, "phrase": "dynamically_generated_tests"}, {"score": 0.0024281181691350085, "phrase": "algebraic_axioms"}, {"score": 0.0022933216359142736, "phrase": "formal_perspective"}, {"score": 0.0021049977753042253, "phrase": "initial_formal_documentation"}], "paper_keywords": ["program documentation", " algebraic specifications", " specification inference"], "paper_abstract": "Modern programs make extensive use of reusable software libraries. For example, we found that 17 percent to 30 percent of the classes in a number of large Java applications use the container classes from the java. util package. Given this extensive code reuse in Java programs, it is important for the reusable interfaces to have clear and unambiguous documentation. Unfortunately, most documentation is expressed in English and, therefore, does not always satisfy these requirements. Worse yet, there is no way of checking that the documentation is consistent with the associated code. Formal specifications present an alternative that does not suffer from these problems; however, formal specifications are notoriously hard to write. To alleviate this difficulty, we have implemented a tool that automatically derives documentation in the form of formal specifications. Our tool probes Java classes by invoking them on dynamically generated tests and captures the information observed during their execution as algebraic axioms. Although the tool is not complete or correct from a formal perspective, we demonstrate that it discovers many useful axioms when applied to container classes. These axioms then form an initial formal documentation of the class they describe.", "paper_title": "Discovering documentation for Java container classes", "paper_id": "WOS:000247542200003"}