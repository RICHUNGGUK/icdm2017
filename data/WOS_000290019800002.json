{"auto_keywords": [{"score": 0.04811914031577567, "phrase": "trace_scheduling"}, {"score": 0.03230092770108838, "phrase": "compensation_code"}, {"score": 0.00481495049065317, "phrase": "mathematical_foundation_of_trace_scheduling"}, {"score": 0.004704495156558224, "phrase": "joseph_a._fisher"}, {"score": 0.00428733103049275, "phrase": "microcode_compaction"}, {"score": 0.004169519409162853, "phrase": "main_technique"}, {"score": 0.00413096972023037, "phrase": "machine-level_compile-time_parallelism_exploitation"}, {"score": 0.0037296734272812444, "phrase": "intel"}, {"score": 0.0036951533096012423, "phrase": "fujitsu"}, {"score": 0.0036610111260484083, "phrase": "hp"}, {"score": 0.003446353878654566, "phrase": "existing_literature"}, {"score": 0.003336031521101184, "phrase": "ad_hoc_way_compensation_code"}, {"score": 0.0032593915869553714, "phrase": "trace_compaction"}, {"score": 0.003199345207727474, "phrase": "total_absence"}, {"score": 0.0028482561434303886, "phrase": "mathematical_theory"}, {"score": 0.0027188259793109264, "phrase": "clear_algorithm"}, {"score": 0.002488851299416018, "phrase": "resulting_program"}, {"score": 0.002420339995088838, "phrase": "original_program"}, {"score": 0.0023646866829474798, "phrase": "upper_bound"}, {"score": 0.0021049977753042253, "phrase": "trace_scheduling_algorithm"}], "paper_keywords": ["Algorithm", " Theory", " Trace scheduling", " trace replacement", " compensation code"], "paper_abstract": "Since its introduction by Joseph A. Fisher in 1979, trace scheduling has influenced much of the work on compile-time ILP (Instruction Level Parallelism) transformations. Initially developed for use in microcode compaction, it quickly became the main technique for machine-level compile-time parallelism exploitation. Although it has been used since the 1980s in many state-of-the-art compilers (e. g., Intel, Fujitsu, HP), a rigorous theory of trace scheduling is still lacking in the existing literature. This is reflected in the ad hoc way compensation code is inserted after a trace compaction, in the total absence of any attempts to measure the size of that compensation code, and so on. The aim of this article is to create a mathematical theory of the foundation of trace scheduling. We give a clear algorithm showing how to insert compensation code after a trace is replaced with its schedule, and then prove that the resulting program is indeed equivalent to the original program. We derive an upper bound on the size of that compensation code, and show that this bound can be actually attained. We also give a very simple proof that the trace scheduling algorithm always terminates.", "paper_title": "Mathematical Foundation of Trace Scheduling", "paper_id": "WOS:000290019800002"}