{"auto_keywords": [{"score": 0.0472887981125377, "phrase": "interactive_applications"}, {"score": 0.04081578574791827, "phrase": "design_patterns"}, {"score": 0.00481495049065317, "phrase": "behavioral_programming"}, {"score": 0.004657185361669812, "phrase": "java_script"}, {"score": 0.004595529592539951, "phrase": "blockly"}, {"score": 0.004474645041899596, "phrase": "cross-cutting_scenarios"}, {"score": 0.004356926418550194, "phrase": "visual_programming"}, {"score": 0.004299228562179176, "phrase": "google_blockly"}, {"score": 0.00421410521089045, "phrase": "single-threaded_implementation"}, {"score": 0.004076223371959098, "phrase": "bp"}, {"score": 0.003995281605572295, "phrase": "javascript"}, {"score": 0.003813017794036879, "phrase": "reactive_systems"}, {"score": 0.003737485125097945, "phrase": "client-side_web_applications"}, {"score": 0.003543273649210823, "phrase": "independent_cross-cutting_scenarios"}, {"score": 0.003427032390942116, "phrase": "run_time"}, {"score": 0.003314591878914152, "phrase": "bp_principles"}, {"score": 0.0031845067058084613, "phrase": "common_software_engineering_issues"}, {"score": 0.0030799988391729464, "phrase": "graphical_representation"}, {"score": 0.0029394074636168435, "phrase": "inter-object_scenarios"}, {"score": 0.0028052155436760528, "phrase": "bp_infrastructure"}, {"score": 0.0027131212233443137, "phrase": "limited_run-time_resources"}, {"score": 0.0026593184154220123, "phrase": "single-threaded_environment"}, {"score": 0.002470987929071079, "phrase": "bp_capabilities"}, {"score": 0.002295964130868963, "phrase": "evolving_directions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Web application", " Smartphone", " Visual programmming", " Coroutines", " HTML5"], "paper_abstract": "We combine visual programming using Google Blockly with a single-threaded implementation of behavioral programming (BP) in JavaScript, and propose design patterns for developing reactive systems such as client-side Web applications and smartphone customization applications as collections of independent cross-cutting scenarios that are interwoven at run time. We show that BP principles can be instrumental in addressing common software engineering issues such as separation of graphical representation from logic and the handling of inter-object scenarios. We also show that a BP infrastructure can be implemented with limited run-time resources in a single-threaded environment using coroutines. In addition to expanding the availability of BP capabilities, we hope that this work will contribute to the evolving directions of technologies and design patterns in developing interactive applications. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A use-case for behavioral programming: An architecture in Java Script and Blockly for interactive applications with cross-cutting scenarios", "paper_id": "WOS:000347741000008"}