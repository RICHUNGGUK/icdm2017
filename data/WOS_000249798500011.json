{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "concurrent_initiations"}, {"score": 0.014230228839986876, "phrase": "wide_area"}, {"score": 0.014129323549701497, "phrase": "distributed_systems"}, {"score": 0.011009552772500819, "phrase": "mobile_agent"}, {"score": 0.004645057834614705, "phrase": "based_checkpointing"}, {"score": 0.004578783486828809, "phrase": "rollback_recovery_algorithms"}, {"score": 0.004449045430179066, "phrase": "tightly_coupled_systems"}, {"score": 0.004140490129683107, "phrase": "large_overhead"}, {"score": 0.003937273640906994, "phrase": "network_traffic"}, {"score": 0.0038810583785936505, "phrase": "mobile_agents"}, {"score": 0.003798231095121328, "phrase": "attractive_option"}, {"score": 0.0037171648669537287, "phrase": "checkpointing_schemes"}, {"score": 0.0035858673522839407, "phrase": "network_topology"}, {"score": 0.002931569771634119, "phrase": "multiple_processes"}, {"score": 0.002747676657869163, "phrase": "consistent_global_state"}, {"score": 0.002708428152881937, "phrase": "cgs"}, {"score": 0.0024664004864629724, "phrase": "worst_case"}, {"score": 0.002362105010110277, "phrase": "n_processes"}, {"score": 0.00232832698253493, "phrase": "checkpointing_algorithm"}], "paper_keywords": ["distributed system", " fault tolerance", " logical checkpoint", " rollback recovery", " mobile agent"], "paper_abstract": "Traditional message passing based checkpointing and rollback recovery algorithms perform well for tightly coupled systems. In wide area distributed systems these algorithms may suffer from large overhead due to message passing delay and network traffic. Mobile agents offer an attractive option for designing checkpointing schemes for wide area distributed systems. Network topology is assumed to be arbitrary. Processes are mobile agent enabled. When a process wants to take a checkpoint, it just creates one mobile agent. Concurrent initiations by multiple processes are allowed. Synchronization and creation of a consistent global state (CGS) for checkpointing is managed by the mobile agent(s). In the worst case, for k concurrent initiations among n processes, checkpointing algorithm requires a total of O(kn) hops by all the mobile agents. A mobile agent carries O(n/k) (on the average) size data.", "paper_title": "Mobile agent based checkpointing with concurrent initiations", "paper_id": "WOS:000249798500011"}