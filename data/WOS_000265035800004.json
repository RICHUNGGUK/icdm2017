{"auto_keywords": [{"score": 0.04602443508693047, "phrase": "target_position"}, {"score": 0.02589212431379397, "phrase": "mrbug"}, {"score": 0.025156938270821955, "phrase": "quadratic_upper_bounds"}, {"score": 0.00481495049065317, "phrase": "multi_robot_path"}, {"score": 0.004756291294211097, "phrase": "quadratic_competitive_complexity_class"}, {"score": 0.004652491358793277, "phrase": "mobile_robots"}, {"score": 0.00447349478832826, "phrase": "next_step"}, {"score": 0.004429827366484249, "phrase": "first_problem"}, {"score": 0.004259360749748044, "phrase": "second_problem"}, {"score": 0.00400599149289152, "phrase": "motion_time"}, {"score": 0.003928127779320143, "phrase": "uniform_velocity"}, {"score": 0.0038612347035351696, "phrase": "path_length"}, {"score": 0.0037308338425858837, "phrase": "on-line_algorithm"}, {"score": 0.003569602535086072, "phrase": "optimal_off-line_solutions"}, {"score": 0.003474509885120876, "phrase": "actual_path"}, {"score": 0.0033819418638350073, "phrase": "shortest_path"}, {"score": 0.0033243188834747575, "phrase": "generalized_competitiveness"}, {"score": 0.0031650178891041133, "phrase": "motion_planning_task"}, {"score": 0.003058057344559862, "phrase": "lower_bounds"}, {"score": 0.0029043360988303206, "phrase": "competitive_complexity_class"}, {"score": 0.002826915576472664, "phrase": "aforementioned_common_on-line_motion_planning_problems"}, {"score": 0.0027179630907534884, "phrase": "on-line_motion_planning_algorithm"}, {"score": 0.002626070787915654, "phrase": "lower_bound"}, {"score": 0.0024756930893478995, "phrase": "multi-robot_search_area_multiplication"}, {"score": 0.002409671236035625, "phrase": "multi-robot_bug"}, {"score": 0.0023919721084125142, "phrase": "lumelsky_famous_bug_algorithm"}, {"score": 0.0022494340426104076, "phrase": "unknown_environment"}, {"score": 0.002200222092935878, "phrase": "quadratic_competitive_class"}, {"score": 0.00218943282838671, "phrase": "mrsam"}, {"score": 0.0021626900696249144, "phrase": "quadratic_competitive_performance"}, {"score": 0.002141530736641132, "phrase": "optimal_competitiveness"}, {"score": 0.002125796914392537, "phrase": "algorithms'_performance"}, {"score": 0.0021049977753042253, "phrase": "office-like_environments"}], "paper_keywords": ["Multi-robot", " Motion planning", " Competitive complexity class", " Optimal algorithm", " Lower bound", " On-line"], "paper_abstract": "We explore two motion planning problems where a group of mobile robots has to reach a target located in an a priori unknown environment while on-line planning the next step. In the first problem the target position is unknown and should be found by the robots, while in the second problem the target position is known and only a path to it should be found. We focus on optimizing the cost of the task in terms of motion time, which, under the assumption of uniform velocity of all the robots, correlates to the path length passed by the robot which reaches the target. The performance of an on-line algorithm is usually expressed in terms of Competitiveness, the constant ratio between the on-line and the optimal off-line solutions. Specifically, the ratio between the lengths of the actual path made by the robot which reached the target to the shortest path to the target. We use generalized competitiveness, i.e., the ratio is not necessarily constant, but could be any function. Classification of a motion planning task in the sense of performance is done by finding an upper and a lower bounds on the competitiveness of all algorithms solving that task. If the two bounds belong to the same functional class this is the Competitive Complexity Class of the task. We find the two bounds for the aforementioned common on-line motion planning problems, and classify them into competitive classes. It is shown that in general any on-line motion planning algorithm that tries to solve these problems must have at least a quadratic competitive performance. This is a lower bound of the problems. This paper describes two new on-line navigation algorithm which solve the problems under discussion. The first is called MRSAM, short for Multi-Robot Search Area Multiplication, and the second is called MRBUG, short for Multi-Robot BUG which extends Lumelsky famous BUG algorithm. Both algorithms have quadratic upper bounds, which prove that the problems they solve have quadratic upper bounds. Thus it is shown that navigation in an unknown environment by a group of robots belongs to a quadratic competitive class. MRSAM and MRBUG have a quadratic competitive performance and thus have optimal competitiveness. The algorithms' performance is simulated in office-like environments.", "paper_title": "Classifying the multi robot path finding problem into a quadratic competitive complexity class", "paper_id": "WOS:000265035800004"}