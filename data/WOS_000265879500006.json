{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "input-output_device_management_components"}, {"score": 0.0047292449487169345, "phrase": "self-stabilizing_operating_systems"}, {"score": 0.0042459818200777846, "phrase": "ata_standard_protocol"}, {"score": 0.0041703614123283165, "phrase": "storage_devices"}, {"score": 0.0038810583785936505, "phrase": "operating_system"}, {"score": 0.0025660347613972573, "phrase": "consistency_checks"}, {"score": 0.00249767641333441, "phrase": "device_driver"}, {"score": 0.0024311346712789553, "phrase": "pc_hard-disk"}, {"score": 0.0023451553255837317, "phrase": "first_solution"}, {"score": 0.002143247921132179, "phrase": "practical_self-stabilizing_systems"}, {"score": 0.0021049977753042253, "phrase": "robust_and_dependable_systems"}], "paper_keywords": [""], "paper_abstract": "This work presents approaches for designing the input-output device management components of self-stabilizing operating systems. As an example, we demonstrate the nonstability of the ATA standard protocol for storage devices. We state the requirements that an operating system and I/O devices should satisfy in order to become self-stabilizing. Then we suggest two solutions to satisfy these requirements. The first uses leases to guarantee progress from the I/O device side. The second assumes stabilization of the I/O device, and uses snapshots to perform consistency checks. A device driver for a PC hard-disk, using the first solution, was implemented. By supplying an infrastructure for practical self-stabilizing systems, robust and dependable systems can be achieved.", "paper_title": "Self-Stabilizing Device Drivers", "paper_id": "WOS:000265879500006"}