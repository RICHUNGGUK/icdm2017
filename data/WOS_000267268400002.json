{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "multi-threaded_programs"}, {"score": 0.004294724955301414, "phrase": "new_features"}, {"score": 0.004119762981892093, "phrase": "dynamic_updates"}, {"score": 0.0038304902197108643, "phrase": "timely_fashion"}, {"score": 0.0037516215763875225, "phrase": "correct_behavior"}, {"score": 0.0034519997658752598, "phrase": "single-threaded_programs"}, {"score": 0.0032599633778910516, "phrase": "myriad_thread_interactions"}, {"score": 0.0031928040608991543, "phrase": "possible_program_states"}, {"score": 0.002512850690695835, "phrase": "static_analysis"}, {"score": 0.0024868131939261716, "phrase": "run-time_support"}, {"score": 0.0022642601698943687, "phrase": "thirteen_realistic_updates"}, {"score": 0.0021493248730171132, "phrase": "dynamic_update"}], "paper_keywords": ["Languages", " Performance", " Reliability", " dynamic software updating", " update safety", " update timeliness", " multi-threading"], "paper_abstract": "Many dynamic updating systems have been developed that enable a program to be patched while it runs, to fix bugs or add new features. This paper explores techniques for supporting dynamic updates to multi-threaded programs, focusing on the problem of applying an update in a timely fashion while still producing correct behavior. Past work has shown that this tension of safety versus timeliness can be balanced for single-threaded programs. For multi-threaded programs, the task is more difficult because myriad thread interactions complicate understanding the possible program states to which a patch could be applied. Our approach allows the programmer to specify a few program points ( e. g., one per thread) at which a patch may be applied, which simplifies reasoning about safety. To improve timeliness, a combination of static analysis and run-time support automatically expands these few points to many more that produce behavior equivalent to the originals. Experiments with thirteen realistic updates to three multi-threaded servers show that we can safely perform a dynamic update within milliseconds when more straightforward alternatives would delay some updates indefinitely.", "paper_title": "Safe and Timely Dynamic Updates for Multi-threaded Programs", "paper_id": "WOS:000267268400002"}