{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "previous_algorithm"}, {"score": 0.00481495049065317, "phrase": "tree_automata"}, {"score": 0.0033579708256295847, "phrase": "deterministic_tree_automata"}, {"score": 0.0030199761431186434, "phrase": "minimal_equivalent_deterministic_tree_automaton"}, {"score": 0.0028944757265206332, "phrase": "backward_bisimulation"}, {"score": 0.002687235334499192, "phrase": "smaller_automata"}, {"score": 0.0022916428586256723, "phrase": "typical_task"}, {"score": 0.0022434880661725493, "phrase": "natural_language_processing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Tree automaton", " Bisimulation", " Minimization", " Partition refinement", " Tree language"], "paper_abstract": "We improve on an existing [P.A. Abdulla, J. Hogberg, L. Kaati, Bisimulation minimization of tree automata, International journal of Foundations of Computer Science 18(4) (2007) 699-713] bisimulation minimization algorithm for finite-state tree automata by introducing backward and forward bisimulation and developing minimization algorithms for them. Minimization via forward bisimulation is also effective on deterministic tree automata, faster than the previous algorithm, and yields the minimal equivalent deterministic tree automaton. Minimization via backward bisimulation generalizes the previous algorithm and can yield smaller automata but is just as fast. We demonstrate implementations of these algorithms on a typical task in natural language processing. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Backward and forward bisimulation minimization of tree automata", "paper_id": "WOS:000269304000012"}