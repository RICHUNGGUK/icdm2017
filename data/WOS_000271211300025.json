{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "rapid_feedback"}, {"score": 0.030729056860857175, "phrase": "syntax_errors"}, {"score": 0.0046390482426405324, "phrase": "scannerless_generalized-lr_parsing"}, {"score": 0.004486212539464774, "phrase": "programmer_productivity"}, {"score": 0.004195418010131832, "phrase": "heavy_burden"}, {"score": 0.004118026552723285, "phrase": "new_languages"}, {"score": 0.004072275820209647, "phrase": "adequate_ide_support"}, {"score": 0.004042056914551798, "phrase": "code_generation_techniques"}, {"score": 0.0039088121438737924, "phrase": "ide_plugins"}, {"score": 0.0038798015183611275, "phrase": "key_components"}, {"score": 0.0037658881407605445, "phrase": "language's_grammar"}, {"score": 0.003696390664266446, "phrase": "embedded_languages"}, {"score": 0.0036689507925299885, "phrase": "language_extensions"}, {"score": 0.0034954725617970294, "phrase": "conventional_parsing_algorithms"}, {"score": 0.0034566143156030426, "phrase": "generalized-lr_parsing"}, {"score": 0.003418186564522323, "phrase": "full_set"}, {"score": 0.003392804886610623, "phrase": "context-free_grammars"}, {"score": 0.0032444113660668743, "phrase": "language_embeddings"}, {"score": 0.0031845067058084613, "phrase": "separate_grammar_modules"}, {"score": 0.0030909442697163356, "phrase": "interactive_environment"}, {"score": 0.0030225753906647935, "phrase": "novel_error_recovery_mechanism"}, {"score": 0.0028581775908203683, "phrase": "interactive_editing"}, {"score": 0.002836942411239067, "phrase": "error_recovery"}, {"score": 0.002613487968156893, "phrase": "semantic_analysis"}, {"score": 0.0024897902536499005, "phrase": "island_grammars"}, {"score": 0.0024529174827030787, "phrase": "permissive_grammars"}, {"score": 0.0024346858809238766, "phrase": "error_recovery_productions"}, {"score": 0.00241658945942583, "phrase": "normal_sdf_grammars"}, {"score": 0.002363101338529545, "phrase": "added_complexity"}, {"score": 0.0022261705957258506, "phrase": "recovery_quality"}, {"score": 0.0021526564019119466, "phrase": "composed_languages"}, {"score": 0.0021208829901839922, "phrase": "java"}, {"score": 0.0021049980887993046, "phrase": "stratego"}], "paper_keywords": ["Languages"], "paper_abstract": "Integrated development environments (IDEs) increase programmer productivity, providing rapid, interactive feedback based on the syntax and semantics of a language. A heavy burden lies on developers of new languages to provide adequate IDE support. Code generation techniques provide a viable, efficient approach to semi-automatically produce IDE plugins. Key components for the realization of plugins are the language's grammar and parser. For embedded languages and language extensions, constituent IDE plugin modules and their grammars can be combined. Unlike conventional parsing algorithms, scannerless generalized-LR parsing supports the full set of context-free grammars, which is closed under composition, and hence can parse language embeddings and extensions composed from separate grammar modules. To apply this algorithm in an interactive environment, this paper introduces a novel error recovery mechanism, which allows it to be used with files with syntax errors-common in interactive editing. Error recovery is vital for providing rapid feedback in case of syntax errors, as most IDE services depend on the parser-from syntax highlighting to semantic analysis and cross-referencing. We base our approach on the principles of island grammars, and derive permissive grammars with error recovery productions from normal SDF grammars. To cope with the added complexity of these grammars, we adapt the parser to support backtracking. We evaluate the recovery quality and performance of our approach using a set of composed languages, based on Java and Stratego.", "paper_title": "Providing Rapid Feedback in Generated Modular Language Environments Adding Error Recovery to Scannerless Generalized-LR Parsing", "paper_id": "WOS:000271211300025"}