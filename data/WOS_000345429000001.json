{"auto_keywords": [{"score": 0.03494422442607807, "phrase": "intermediate_results"}, {"score": 0.023939582108228916, "phrase": "apache_pig"}, {"score": 0.00481495049065317, "phrase": "nesting_strategies"}, {"score": 0.004748740786945996, "phrase": "nimble_mapreduce_dataflows"}, {"score": 0.0047051051659828275, "phrase": "large_rdf_data"}, {"score": 0.004619027561771169, "phrase": "semi-structured_data"}, {"score": 0.004513631630494221, "phrase": "relational_processing_frameworks"}, {"score": 0.004472146692254812, "phrase": "\"thin\"_relations"}, {"score": 0.004172874316207784, "phrase": "multi-valued_attributes"}, {"score": 0.004077616905584829, "phrase": "redundant_subtuples"}, {"score": 0.00398452530840582, "phrase": "single-valued_attributes"}, {"score": 0.0038935506745975835, "phrase": "redundant_content"}, {"score": 0.0038222630466021494, "phrase": "real-world_multi-valued_relationships"}, {"score": 0.0037006243674469657, "phrase": "twitter_followers"}, {"score": 0.0036665842836420223, "phrase": "popular_celebrities"}, {"score": 0.0035335154419206634, "phrase": "related_proteins"}, {"score": 0.0034528025626422154, "phrase": "mapreduce-based_platforms"}, {"score": 0.0034052594710793664, "phrase": "apache_hive"}, {"score": 0.003281643474564305, "phrase": "avoidable_costs"}, {"score": 0.0031045562469735307, "phrase": "join-intensive_workloads"}, {"score": 0.0030617935728586006, "phrase": "longer_workflows"}, {"score": 0.00274017282519193, "phrase": "nested_data_model"}, {"score": 0.002702415623060517, "phrase": "intermediate_data"}, {"score": 0.0026651772919894534, "phrase": "nesting-aware_dataflow_operators"}, {"score": 0.0026163210719740847, "phrase": "lazy_and_partial_unnesting_strategies"}, {"score": 0.0025212722607043546, "phrase": "network_footprint"}, {"score": 0.0023851187337905412, "phrase": "workflow's_execution"}, {"score": 0.0023522423291484212, "phrase": "complete_unnesting"}, {"score": 0.0022878396720586044, "phrase": "proposed_strategies"}, {"score": 0.002225196379204285, "phrase": "experimental_evaluation"}, {"score": 0.002204697943520258, "phrase": "real-world_and_synthetic_benchmark_datasets"}, {"score": 0.002154272413276506, "phrase": "relational-style_mapreduce_systems"}, {"score": 0.002105001850722569, "phrase": "hive"}], "paper_keywords": ["Hadoop", " MapReduce", " Multi-Valued Properties", " RDF Graph Pattern Queries", " Semantic Web", " SPARQL", " Unnesting Strategies"], "paper_abstract": "Graph and semi-structured data are usually modeled in relational processing frameworks as \"thin\" relations (node, edge, node) and processing such data involves a lot of join operations. Intermediate results of joins with multi-valued attributes or relationships, contain redundant subtuples due to repetition of single-valued attributes. The amount of redundant content is high for real-world multi-valued relationships in social network (millions of Twitter followers of popular celebrities) or biological (multiple references to related proteins) datasets. In MapReduce-based platforms such as Apache Hive and Pig, redundancy in intermediate results contributes avoidable costs to the overall I/O, sorting, and network transfer overhead of join-intensive workloads due to longer workflows. Consequently, providing techniques for dealing with such redundancy will enable more nimble execution of such workflows. This paper argues for the use of a nested data model for representing intermediate data concisely using nesting-aware dataflow operators that allow for lazy and partial unnesting strategies. This approach reduces the overall I/O and network footprint of a workflow by concisely representing intermediate results during most of a workflow's execution, until complete unnesting is absolutely necessary. The proposed strategies are integrated into Apache Pig and experimental evaluation over real-world and synthetic benchmark datasets confirms their superiority over relational-style MapReduce systems such as Apache Pig and Hive.", "paper_title": "Nesting Strategies for Enabling Nimble MapReduce Dataflows for Large RDF Data", "paper_id": "WOS:000345429000001"}