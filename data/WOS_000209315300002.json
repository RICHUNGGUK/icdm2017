{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "different_types"}, {"score": 0.015442919463805209, "phrase": "hybrid_main_memory_architectures"}, {"score": 0.013538537228576243, "phrase": "file_data-block_placement"}, {"score": 0.009997509267624442, "phrase": "total_cost"}, {"score": 0.009926315588719857, "phrase": "file_accesses"}, {"score": 0.00753596916856026, "phrase": "gfdp_algorithm"}, {"score": 0.0046118021635786315, "phrase": "non-volatile_memories"}, {"score": 0.004276610897002087, "phrase": "high_speed"}, {"score": 0.00423075589385221, "phrase": "dram"}, {"score": 0.0042004472903194616, "phrase": "low_stand-by_power_consumption"}, {"score": 0.004110836506925443, "phrase": "fdp"}, {"score": 0.003951453722517865, "phrase": "important_problems"}, {"score": 0.0038256426589560774, "phrase": "file_operations"}, {"score": 0.0037845987749316632, "phrase": "hybrid_main_memory_architecture"}, {"score": 0.003677280504320636, "phrase": "modern_operating_systems"}, {"score": 0.003598786417573615, "phrase": "disk-backed_file_data-blocks"}, {"score": 0.0034967186553667715, "phrase": "virtual_memory"}, {"score": 0.0034467717443162015, "phrase": "hybrid_main_memory"}, {"score": 0.003313053707792957, "phrase": "page_cache"}, {"score": 0.0032893028281789287, "phrase": "operating_system"}, {"score": 0.002942138511829811, "phrase": "dynamic_programming_algorithm"}, {"score": 0.002910545717767559, "phrase": "fdp_algorithm"}, {"score": 0.0028279422436488116, "phrase": "simple_programs"}, {"score": 0.0027775064989253575, "phrase": "ilp_model"}, {"score": 0.002747676657869163, "phrase": "file_data-block_placement_problem"}, {"score": 0.0026986685585382347, "phrase": "multiple_regions"}, {"score": 0.00267931029131157, "phrase": "data_dependencies"}, {"score": 0.0026505322540093783, "phrase": "efficient_heuristic"}, {"score": 0.0024842242921857705, "phrase": "near-optimal_solutions"}, {"score": 0.0024399036842105205, "phrase": "global_file_data-block_placement"}, {"score": 0.002262209824105154, "phrase": "greedy_strategy"}, {"score": 0.0022379017425216917, "phrase": "ilp._experimental_results"}], "paper_keywords": ["Hybrid main memory", " Page cache", " File data-block placement"], "paper_abstract": "Hybrid main memory architectures employing both DRAM and non-volatile memories (NVMs) are becoming increasingly attractive due to the opportunities for exploring benefits of various memory technologies, for example, high speed writes on DRAM and low stand-by power consumption on NVMs. File data-block placement (FDP) on different types of page cache is one of the important problems that directly impact the performance and cost of file operations on a hybrid main memory architecture. Page cache is widely used in modern operating systems to expedite file I/O by mapping disk-backed file data-blocks in main memory to process space in virtual memory. In a hybrid main memory, different types of memory with different read/write costs can be allocated as page cache by operating system. In this paper, we study the problem of file data-block placement on different types of page cache to minimize the total cost of file accesses in a program. We propose a dynamic programming algorithm, the FDP Algorithm, to solve the problem optimally for simple programs. We develop an ILP model for the file data-block placement problem for programs composed of multiple regions with data dependencies. An efficient heuristic, the global file data-block placement (GFDP) Algorithm, is proposed to obtain near-optimal solutions for the problem of global file data-block placement on hybrid main memory. Experiments on a set of benchmarks show the effectiveness of the GFDP algorithm compared with a greedy strategy and the ILP. Experimental results show that the GFDP algorithm reduces the total cost of file accesses by 51.3 % on average compared with the the greedy strategy.", "paper_title": "Effective file data-block placement for different types of page cache on hybrid main memory architectures", "paper_id": "WOS:000209315300002"}