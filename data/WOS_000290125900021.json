{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "high_scalability"}, {"score": 0.04195061461553759, "phrase": "parallel_btree"}, {"score": 0.03457312189491828, "phrase": "compound_treatment"}, {"score": 0.028029998031594207, "phrase": "access_paths"}, {"score": 0.004717125879761534, "phrase": "chained_declustering_parallel_systems"}, {"score": 0.004550669123303854, "phrase": "key_features"}, {"score": 0.004504193207111593, "phrase": "parallel_database_systems"}, {"score": 0.004256895619944631, "phrase": "parallel_index_structures"}, {"score": 0.00421340730888561, "phrase": "shared-nothing_parallel_infrastructure"}, {"score": 0.004106612344123407, "phrase": "data_migration"}, {"score": 0.004064653055162238, "phrase": "range-partitioned_placement"}, {"score": 0.003782655283668953, "phrase": "declustered_replicas"}, {"score": 0.00374399358035391, "phrase": "high_availability"}, {"score": 0.0035565113234273926, "phrase": "independent_treatment"}, {"score": 0.0035021127041237887, "phrase": "primary_and_backup_data"}, {"score": 0.003413284742632989, "phrase": "long_failover_times"}, {"score": 0.00332670230152448, "phrase": "novel_method"}, {"score": 0.0032423089921154503, "phrase": "chained_declustered_replicas"}, {"score": 0.0030327408069772293, "phrase": "proposed_method"}, {"score": 0.002986329509791943, "phrase": "single_fat-btree"}, {"score": 0.002546315584783112, "phrase": "dynamic_load_balancing"}, {"score": 0.0025202582748972122, "phrase": "physical_data_migration"}, {"score": 0.002357249810661667, "phrase": "memory_space_utilization"}, {"score": 0.0023211517663846346, "phrase": "index_processing"}, {"score": 0.0022973933270056743, "phrase": "good_scalability"}], "paper_keywords": ["parallel Btree", " scalability", " availability", " chained declustering"], "paper_abstract": "Scalability and availability are the key features of parallel database systems. To realize scalability, many dynamic load-balancing methods with data placement and parallel index structures on shared-nothing parallel infrastructure have been proposed. Data migration with range-partitioned placement using a parallel Btree is one solution. The combination of range partitioning and chained declustered replicas provides high availability (HA) while preserving scalability. However, independent treatment of the primary and backup data in each node requires long failover times. We propose a novel method for the compound treatment of chained declustered replicas using a parallel Btree, termed the Fat-Btree. In the proposed method, a single Fat-Btree provides access paths to both the primary and backup data of all processor elements (PEs), which greatly reduces failover time. Moreover, these access paths overlap between two neighboring PEs, which enables dynamic load balancing without physical data migration by dynamically redirecting the access paths. In addition, this compound treatment improves memory space utilization to enable index processing with good scalability. Experiments using PostgreSQL on a 160-node PC cluster demonstrate the effectiveness of the high scalability and availability of our proposed method.", "paper_title": "A Compound Parallel Btree for High Scalability and Availability on Chained Declustering Parallel Systems", "paper_id": "WOS:000290125900021"}