{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "problem-sensitive_conceptual_modelling_language"}, {"score": 0.047617154407647785, "phrase": "software_engineering"}, {"score": 0.046429977017780094, "phrase": "conceptual_modelling_language"}, {"score": 0.0038309141193444015, "phrase": "problem_domain"}, {"score": 0.003539252646181146, "phrase": "implementation_concepts"}, {"score": 0.0033572130837348623, "phrase": "appropriate_generic_conceptualisation_theoretical_aspects"}, {"score": 0.0032410683344688625, "phrase": "conceptual_elements"}, {"score": 0.0028151944356239952, "phrase": "formal_definition"}, {"score": 0.002623669616798891, "phrase": "natural_language"}, {"score": 0.0022192891418394514, "phrase": "knowledge_engineering_and_software_engineering"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["conceptual model", " conceptual modelling language", " problem sensitivity", " software engineering"], "paper_abstract": "A conceptual modelling language should provide constructors that can be used to represent the conceptualisation of a problem considering the problem domain. However, software engineering has traditionally focused on implementation concepts. This paper considers the appropriate generic conceptualisation theoretical aspects to identify the conceptual elements for which constructors have to be provided in a problem-sensitive conceptual modelling language. These elements match the formal definition of any conceptualisation and are derived from natural language. By looking at these elements, we have defined a conceptual modelling language that has been successfully applied in knowledge engineering and software engineering. (C) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Definition of a problem-sensitive conceptual modelling language: foundations and application to software engineering", "paper_id": "WOS:000238031900007"}