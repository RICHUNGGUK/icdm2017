{"auto_keywords": [{"score": 0.04707681335767127, "phrase": "bfs_tree"}, {"score": 0.00481495049065317, "phrase": "distributed_bfs"}, {"score": 0.0047804843375940835, "phrase": "ad_hoc_networks"}, {"score": 0.004746263721902201, "phrase": "non-spontaneous_wake-ups"}, {"score": 0.00446506039438222, "phrase": "spontaneously_awaken_node"}, {"score": 0.00443308765153716, "phrase": "ad_hoc_network"}, {"score": 0.004354149483556514, "phrase": "synchronous_rounds"}, {"score": 0.0042459818200777846, "phrase": "point-to-point_bi-directional_links"}, {"score": 0.0035601676907962626, "phrase": "deterministic_distributed_solution"}, {"score": 0.003161674440750158, "phrase": "point-to-point_messages"}, {"score": 0.0028792911886505526, "phrase": "diameter_d"}, {"score": 0.0026600905156986317, "phrase": "threshold_value"}, {"score": 0.0026410082462069596, "phrase": "node_degrees"}, {"score": 0.002387758958649797, "phrase": "first_bfs-finding_deterministic_distributed_algorithm"}, {"score": 0.002245975340642921, "phrase": "message_complexity"}, {"score": 0.0022138542785562444, "phrase": "suitable_functions"}], "paper_keywords": ["BFS tree", " ad hoc network", " distributed algorithm", " message complexity"], "paper_abstract": "We study time and message complexity of the problem of building a BFS tree by a spontaneously awaken node in ad hoc network. Computation is in synchronous rounds, and messages are sent via point-to-point bi-directional links. Network topology is modeled by a graph. Each node knows only its own id and the id's of its neighbors in the network and no pre-processing is allowed; therefore the solutions to the problem of spanning a BFS tree in this setting must be distributed. We deliver a deterministic distributed solution that trades time for messages, mainly, with time complexity O(D . min (D, n/f (n)) . log D . log n) and with the number of point-to-point messages sent O (n . (min (D, n = f (n)) + f (n)) . log D . log n), for any n-node network with diameter D and for any monotonically non-decreasing sub-linear integer function f. Function f in the above formulas come from the threshold value on node degrees used by our algorithms, in the sense that nodes with degree at most f (n) are treated differently that the other nodes. This yields the first BFS-finding deterministic distributed algorithm in ad hoc networks working in time o (n) and with o(n(2)) message complexity, for some suitable functions f (n) = o (n/log(2) n), provided D = o (n/log(4) n).", "paper_title": "On the complexity of distributed BFS in ad hoc networks with non-spontaneous wake-ups", "paper_id": "WOS:000327036900008"}