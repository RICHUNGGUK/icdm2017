{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "large-scale_distributed_data_storage"}, {"score": 0.04286666008487536, "phrase": "client-centric_consistency"}, {"score": 0.03908291158054249, "phrase": "system_implementations"}, {"score": 0.002914288956035066, "phrase": "i.e._eventual_consistency"}, {"score": 0.002726740692380339, "phrase": "database_concurrency_control"}, {"score": 0.0021842976754894846, "phrase": "formal_definitions"}, {"score": 0.0021049977753042253, "phrase": "simple_consistency_verification"}], "paper_keywords": ["Consistency", " Replication", " Availability", " Distributed data management"], "paper_abstract": "Customized consistency is necessary in systems with large-scale distributed data storage, which have to make a tradeoff between consistency and performance. Client-centric consistency is intuitive for applications to specify their consistency requirements, but the properties of system implementations that satisfy client-centric consistency are not clear. So constraints on implementation and costs in performance are not known. In this paper, we formally define the four client-centric consistencies and their basis, i.e. eventual consistency, borrowing the framework from the theory of database concurrency control. Based on their definitions, we prove relations among these consistencies. Such relations imply how the implementation of one consistency can be made upon another. Besides, with these formal definitions, we can make simple consistency verification on system implementations. (c) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Client-centric consistency formalization and verification for system with large-scale distributed data storage", "paper_id": "WOS:000281508700012"}