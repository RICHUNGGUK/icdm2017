{"auto_keywords": [{"score": 0.04981678864806054, "phrase": "iterative_optimization"}, {"score": 0.03908938550066033, "phrase": "iodc"}, {"score": 0.01029853925002853, "phrase": "compiler_optimizations"}, {"score": 0.009671692487130816, "phrase": "large_number"}, {"score": 0.00938540067047196, "phrase": "optimum_combination"}, {"score": 0.008253813028173969, "phrase": "data_center"}, {"score": 0.004749323365717064, "phrase": "simple_but_powerful_approach"}, {"score": 0.004697463242638162, "phrase": "best_possible_combination"}, {"score": 0.00429057323623293, "phrase": "best_combination"}, {"score": 0.0041743471385355824, "phrase": "exploration_process"}, {"score": 0.004151480905065379, "phrase": "significant_overhead"}, {"score": 0.004061256614370055, "phrase": "performance_benefits"}, {"score": 0.00392956895931878, "phrase": "significant_performance_potential"}, {"score": 0.0038547243958914484, "phrase": "production_compilers"}, {"score": 0.0035594871529132195, "phrase": "preceding_hurdles"}, {"score": 0.0035012758747074496, "phrase": "basic_idea"}, {"score": 0.003462996357395106, "phrase": "different_combinations"}, {"score": 0.0031626949751567754, "phrase": "end_user"}, {"score": 0.0029852586450968537, "phrase": "real-life_data_center_operation"}, {"score": 0.002841092355583839, "phrase": "compatible_co-runners"}, {"score": 0.0026964426951260416, "phrase": "co-running_applications"}, {"score": 0.0026377570446517004, "phrase": "compute-intensive_throughput_server_applications"}, {"score": 0.002469234247793194, "phrase": "unique_datasets"}, {"score": 0.0024221363241985075, "phrase": "total_storage"}, {"score": 0.0023824806252532352, "phrase": "cpu_time"}, {"score": 0.0023499294490179788, "phrase": "average_performance_improvement"}, {"score": 0.0022987679645976333, "phrase": "five_mapreduce_applications"}, {"score": 0.0022425385043433397, "phrase": "nine_server_applications"}, {"score": 0.0021049977753042253, "phrase": "worst_possible_co-runner_schedule"}], "paper_keywords": ["Design", " Performance", " Iterative optimization", " compiler", " MapReduce", " server", " data center", " co-run"], "paper_abstract": "Iterative optimization is a simple but powerful approach that searches the best possible combination of compiler optimizations for a given workload. However, iterative optimization is plagued by several practical issues that prevent it from being widely used in practice: a large number of runs are required to find the best combination, the optimum combination is dataset dependent, and the exploration process incurs significant overhead that needs to be compensated for by performance benefits. Therefore, although iterative optimization has been shown to have a significant performance potential, it seldom is used in production compilers. In this article, we propose iterative optimization for the data center (IODC): we show that the data center offers a context in which all of the preceding hurdles can be overcome. The basic idea is to spawn different combinations across workers and recollect performance statistics at the master, which then evolves to the optimum combination of compiler optimizations. IODC carefully manages costs and benefits, and it is transparent to the end user. To bring IODC to practice, we evaluate it in the presence of co-runners to better reflect real-life data center operation with multiple applications co-running per server. We enhance IODC with the capability to find compatible co-runners along with a mechanism to dynamically adjust the level of aggressiveness to improve its robustness in the presence of co-running applications. We evaluate IODC using both Map Reduce and compute-intensive throughput server applications. To reflect the large number of users interacting with the system, we gather a very large collection of datasets (up to hundreds of millions of unique datasets per program), for a total storage of 16.4TB and 850 days of CPU time. We report an average performance improvement of 1.48x and up to 2.08x for five MapReduce applications, and 1.12x and up to 1.39x for nine server applications. Furthermore, our experiments demonstrate that IODC is effective in the presence of co-runners, improving performance by greater than 13% compared to the worst possible co-runner schedule.", "paper_title": "Practical Iterative Optimization for the Data Center", "paper_id": "WOS:000357952000007"}