{"auto_keywords": [{"score": 0.027507999683207576, "phrase": "plotkin"}, {"score": 0.005186150492004718, "phrase": "hoare-style"}, {"score": 0.003974349782102708, "phrase": "unstructured_program_flow"}, {"score": 0.003916098498242888, "phrase": "higher-order_control_operators"}, {"score": 0.0036105923401756126, "phrase": "hoare-style_logic"}, {"score": 0.003428665921276366, "phrase": "higher-order_control"}, {"score": 0.0032800186243040663, "phrase": "dynamic_state"}, {"score": 0.003091767402370757, "phrase": "dependent_type_theory"}, {"score": 0.0030464123943266673, "phrase": "first_class_callcc"}, {"score": 0.0030017207229983385, "phrase": "abort_operators"}, {"score": 0.002495268931035983, "phrase": "jaskelioff"}, {"score": 0.002404706573379854, "phrase": "annotation_burden"}, {"score": 0.002317423416027688, "phrase": "symbolic_evaluation"}, {"score": 0.0021049977753042253, "phrase": "characteristic_examples"}], "paper_keywords": ["Languages", " Verification", " Continuations", " Hoare Logic", " Dependent Types", " callcc"], "paper_abstract": "Continuations are programming abstractions that allow for manipulating the \"future\" of a computation. Amongst their many applications, they enable implementing unstructured program flow through higher-order control operators such as callcc. In this paper we develop a Hoare-style logic for the verification of programs with higher-order control, in the presence of dynamic state. This is done by designing a dependent type theory with first class callcc and abort operators, where pre- and postconditions of programs are tracked through types. Our operators are algebraic in the sense of Plotkin and Power, and Jaskelioff, to reduce the annotation burden and enable verification by symbolic evaluation. We illustrate working with the logic by verifying a number of characteristic examples.", "paper_title": "Hoare-Style Reasoning with (Algebraic) Continuations", "paper_id": "WOS:000327696700035"}