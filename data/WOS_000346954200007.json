{"auto_keywords": [{"score": 0.04973325992892519, "phrase": "potts_model"}, {"score": 0.04523529013281945, "phrase": "configuration_space"}, {"score": 0.00481495049065317, "phrase": "transfer_matrices"}, {"score": 0.004745665541429529, "phrase": "computational_cost"}, {"score": 0.004722791767189843, "phrase": "transfer_matrix_methods"}, {"score": 0.004413846562278824, "phrase": "combinatorial_set"}, {"score": 0.004392565073466714, "phrase": "lattice_configurations"}, {"score": 0.004185289462328125, "phrase": "transfer_matrix"}, {"score": 0.004016782710006123, "phrase": "catalan_numbers"}, {"score": 0.0038179283509963695, "phrase": "smaller_configuration_space"}, {"score": 0.003699774538648597, "phrase": "spin_states"}, {"score": 0.003559344146998712, "phrase": "parallel_algorithm"}, {"score": 0.003525074461418428, "phrase": "sub-catalan_configuration_space"}, {"score": 0.0033667304423940893, "phrase": "original_set"}, {"score": 0.003350480663660326, "phrase": "catalan_configurations"}, {"score": 0.0033101973869829695, "phrase": "family_trees"}, {"score": 0.0031845067058084583, "phrase": "root_node"}, {"score": 0.0030635739245290406, "phrase": "catalan_approach"}, {"score": 0.0030121159909273897, "phrase": "resulting_matrix"}, {"score": 0.0029758887706986038, "phrase": "compressed_form"}, {"score": 0.002890706051070829, "phrase": "numerical_evaluation"}, {"score": 0.002754103864198219, "phrase": "experimental_results"}, {"score": 0.0027408028422840815, "phrase": "different_sizes"}, {"score": 0.0027275658823322775, "phrase": "strip_lattices"}, {"score": 0.0026494920596479366, "phrase": "cpm"}, {"score": 0.0026049517737353365, "phrase": "dense_transfer_matrices"}, {"score": 0.002573608944176127, "phrase": "parallel_performance"}, {"score": 0.002548805729308025, "phrase": "strong-scaling_speedups"}, {"score": 0.0024519545383399773, "phrase": "best_balance"}, {"score": 0.0024107449502335583, "phrase": "multi-core_machine"}, {"score": 0.002347378595930709, "phrase": "cluster_scenario"}, {"score": 0.002236394113351282, "phrase": "parallel_capabilities"}, {"score": 0.0022041312401435346, "phrase": "large-scale_execution"}, {"score": 0.0021881743793875767, "phrase": "parallel_family_trees_strategy"}, {"score": 0.002135812692862058, "phrase": "wider_strip_lattices"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Potts model", " Deletion-contraction", " Parallel computing", " Transfer matrix", " Strip lattices"], "paper_abstract": "The computational cost of transfer matrix methods for the Potts model is related to the question in how many ways can two layers of a lattice be connected? Answering the question leads to the generation of a combinatorial set of lattice configurations. This set defines the configuration space of the problem, and the smaller it is, the faster the transfer matrix can be computed. The configuration space of generic (q, v) transfer matrix methods for strips is in the order of the Catalan numbers, which grows asymptotically as O(4(m)) where m is the width of the strip. Other transfer matrix methods with a smaller configuration space indeed exist but they make assumptions on the temperature, number of spin states, or restrict the structure of the lattice. In this paper we propose a parallel algorithm that uses a sub-Catalan configuration space of 0(39 to build the generic (q, v) transfer matrix in a compressed form. The improvement is achieved by grouping the original set of Catalan configurations into a forest of family trees, in such a way that the solution to the problem is now computed by solving the root node of each family. As a result, the algorithm becomes exponentially faster than the Catalan approach while still highly parallel. The resulting matrix is stored in a compressed form using 0(3(m) x 4(m)) of space, making numerical evaluation and decompression to be faster than evaluating the matrix in its O(4(m) x 4(m)) uncompressed form. Experimental results for different sizes of strip lattices show that the parallel family trees (AFT) strategy indeed runs exponentially faster than the Catalan Parallel Method (CPM), especially when dealing with dense transfer matrices. In terms of parallel performance, we report strong-scaling speedups of up to 5.7 x when running on an 8-core shared memory machine and 28 x for a 32-core cluster. The best balance of speedup and efficiency for the multi-core machine was achieved when using p = 4 processors, while for the cluster scenario it was in the range p is an element of [8, 10]. Because of the parallel capabilities of the algorithm, a large-scale execution of the parallel family trees strategy in a supercomputer could contribute to the study of wider strip lattices. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Parallel family trees for transfer matrices in the Potts model", "paper_id": "WOS:000346954200007"}