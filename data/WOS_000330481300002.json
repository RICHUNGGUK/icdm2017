{"auto_keywords": [{"score": 0.040988944830941225, "phrase": "existing_methods"}, {"score": 0.00481495049065317, "phrase": "xml_keyword_queries"}, {"score": 0.0047283116134926645, "phrase": "idlist_index"}, {"score": 0.004685575787741084, "phrase": "keyword_search"}, {"score": 0.0046432244185370605, "phrase": "xml_data"}, {"score": 0.004518442937844318, "phrase": "research_efforts"}, {"score": 0.004357245559948974, "phrase": "fundamental_research_problems"}, {"score": 0.004015182362035361, "phrase": "key_factor"}, {"score": 0.0037506567448470163, "phrase": "common-ancestor-repetition_problem"}, {"score": 0.003600351201298387, "phrase": "novel_form"}, {"score": 0.0035677736570659813, "phrase": "inverted_list"}, {"score": 0.003503497128638099, "phrase": "idlist"}, {"score": 0.003378385493203297, "phrase": "ordered_nodes"}, {"score": 0.0031990183472675377, "phrase": "keyword_query_results"}, {"score": 0.003141364320497748, "phrase": "smallest_lowest_common_ancestor"}, {"score": 0.0031129269142224194, "phrase": "exclusive_lowest_common_ancestor_semantics"}, {"score": 0.0030429511467945525, "phrase": "ordered_set_intersection_problem"}, {"score": 0.002855251306715901, "phrase": "information_retrieval"}, {"score": 0.0028293966058473476, "phrase": "database_systems"}, {"score": 0.0027407299369891502, "phrase": "set_intersection"}, {"score": 0.0027159094186967247, "phrase": "different_directions"}, {"score": 0.0026427848602443293, "phrase": "additional_indexes"}, {"score": 0.002525248554951453, "phrase": "hash_search"}, {"score": 0.0024460897937643032, "phrase": "common_nodes"}, {"score": 0.0024129269611844794, "phrase": "involved_idlists"}, {"score": 0.0023479408542211875, "phrase": "extensive_set"}], "paper_keywords": ["XML", " Keyword Query Processing", " LCA", " SLCA", " ELCA"], "paper_abstract": "Keyword search over XML data has attracted a lot of research efforts in the last decade, where one of the fundamental research problems is how to efficiently answer a given keyword query w.r.t. a certain query semantics. We found that the key factor resulting in the inefficiency for existing methods is that they all heavily suffer from the common-ancestor-repetition problem. In this paper, we propose a novel form of inverted list, namely the IDList; the IDList for keyword consists of ordered nodes that directly or indirectly contain . We then show that finding keyword query results based on the smallest lowest common ancestor and exclusive lowest common ancestor semantics can be reduced to ordered set intersection problem, which has been heavily optimized due to its application in areas such as information retrieval and database systems. We propose several algorithms that exploit set intersection in different directions and with or without using additional indexes. We further propose several algorithms that are based on hash search to simplify the operation of finding common nodes from all involved IDLists. We have conducted an extensive set of experiments using many state-of-the-art algorithms and several large-scale datasets. The results demonstrate that our proposed methods outperform existing methods by up to two orders of magnitude in many cases.", "paper_title": "Efficient query processing for XML keyword queries based on the IDList index", "paper_id": "WOS:000330481300002"}