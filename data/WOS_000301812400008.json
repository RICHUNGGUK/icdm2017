{"auto_keywords": [{"score": 0.03251200191281709, "phrase": "connectivity_rules"}, {"score": 0.01506698415140429, "phrase": "interface_control_documents"}, {"score": 0.014440957656744063, "phrase": "subsystem_interfaces"}, {"score": 0.00481495049065317, "phrase": "collaborative_product_development"}, {"score": 0.004703671193348433, "phrase": "collaborative_product_development_projects"}, {"score": 0.004506265705673849, "phrase": "computer_aided_methodology"}, {"score": 0.004283576270012874, "phrase": "subsystem_ports"}, {"score": 0.004071846628708832, "phrase": "interface_definitions"}, {"score": 0.004040211152784802, "phrase": "different_design_teams"}, {"score": 0.0034700069041302003, "phrase": "port_mating"}, {"score": 0.0034162643819889054, "phrase": "logical_information"}, {"score": 0.003196960816092101, "phrase": "individual_port"}, {"score": 0.0029224275921964724, "phrase": "software_architecture"}, {"score": 0.0028771413440398614, "phrase": "port_information"}, {"score": 0.0026506222660465104, "phrase": "proposed_architecture"}, {"score": 0.002357535807803925, "phrase": "subsystem_descriptions"}, {"score": 0.0023300677028248776, "phrase": "shared_repository"}, {"score": 0.002188874450946842, "phrase": "port_requirements"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Ontology", " Interface design", " Interface control", " Collaborative product development", " Interface compatibility", " Rule based system"], "paper_abstract": "Interfaces between subsystems in collaborative product development projects are presently defined by interface control documents. This paper presents a computer aided methodology for defining and controlling subsystem interfaces. Interfaces are considered as interconnections between subsystem ports. Ports are specified by using an ontology that ensures consistency of interface definitions among different design teams. Every port that is based on the ontology is eventually defined by a set of attributes that are derived from its form and function. Interfaces between ports are formed when ports are mated. The essence of port mating is described by logical information that is expressed in two forms. First, a set of requirements are defined for an individual port to ensure that it functions properly. Second, connectivity rules are expressed between ports to guarantee that they integrate correctly. A software architecture that operates on port information and controls the status of subsystem interfaces during collaboration is described. A piece of software is implemented based on the proposed architecture and its functionality is demonstrated by two examples. The examples show how the software can be used to replace interface control documents and support collaboration. The software allows designers to load subsystem descriptions from a shared repository and connect them together by defining connectivity rules. The software reports errors to designers when port requirements or connectivity rules are violated. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Ontology based interface design and control methodology for collaborative product development", "paper_id": "WOS:000301812400008"}