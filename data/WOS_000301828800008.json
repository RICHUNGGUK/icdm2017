{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "business_spaces"}, {"score": 0.004733901576706854, "phrase": "interactive_system"}, {"score": 0.004654210559456924, "phrase": "functional_core"}, {"score": 0.004575854901681043, "phrase": "user_interface"}, {"score": 0.004398094237005956, "phrase": "software_architectures"}, {"score": 0.004299621153829837, "phrase": "conceptual_elements"}, {"score": 0.0037109446302945903, "phrase": "communication-specific_code"}, {"score": 0.003526476304712492, "phrase": "previous_work"}, {"score": 0.003078028357912228, "phrase": "minimal_coupling"}, {"score": 0.0030433302702291116, "phrase": "technology-agnostic_business"}, {"score": 0.002941558420246247, "phrase": "symphony_objects"}, {"score": 0.002763709443278514, "phrase": "applicative_logic"}, {"score": 0.0027170943110836425, "phrase": "technical_objects"}, {"score": 0.0025819015229390663, "phrase": "original_software_framework"}, {"score": 0.0025383454939674204, "phrase": "sonata"}, {"score": 0.0023713273141757326, "phrase": "symphony_architecture_instances"}, {"score": 0.0021778895748464024, "phrase": "business_and_interaction_spaces"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Framework", " Information systems", " Software architecture", " HCI", " aspects"], "paper_abstract": "Every interactive system features a functional core and a user interface. Over the years, several types of software architectures for connecting these conceptual elements have been proposed, all of which fail to conciliate two essential qualities: enabling both business and interaction objects reuse, and limiting the amount of communication-specific code in reusable objects. We have described in previous work the Symphony Architecture, which bridges the gap between the interaction and business spaces, while requiring no code overhead in either business or interaction objects. Resulting development features minimal coupling between technology-agnostic business and interaction constructs, called Symphony Objects, and improves their reusability by clearly isolating them from the applicative logic and from technical objects. In this paper, we present an original software framework, called Sonata, which capitalizes on the conventions used for building and organizing Symphony Architecture instances, for minimizing the amount of configuration required for setting up connections between the business and interaction spaces. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Sonata: Flexible connections between interaction and business spaces", "paper_id": "WOS:000301828800008"}