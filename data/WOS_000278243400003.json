{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "abstract_interpretation"}, {"score": 0.004570759604335229, "phrase": "java_bytecode_verification"}, {"score": 0.004511663118269957, "phrase": "java_interface_types"}, {"score": 0.00445332728705756, "phrase": "multiple_inheritance"}, {"score": 0.0042550030421781605, "phrase": "standard_bytecode_verifier"}, {"score": 0.003935267970727093, "phrase": "class_hierarchy"}, {"score": 0.0037599278182081056, "phrase": "type_checks"}, {"score": 0.003615845091983304, "phrase": "run_time"}, {"score": 0.0034999880739789257, "phrase": "verification_methodology"}, {"score": 0.0033658327434624457, "phrase": "run-time_checks"}, {"score": 0.002878556952876824, "phrase": "interface_types"}, {"score": 0.0026274936167233515, "phrase": "additional_simpler_verifiers"}, {"score": 0.0025102759256260703, "phrase": "single_interface_type"}, {"score": 0.0023826870912207303, "phrase": "systematic_way"}, {"score": 0.002336527289457915, "phrase": "abstract_interpretation_techniques"}, {"score": 0.0021049977753042253, "phrase": "large_set"}], "paper_keywords": ["Bytecode verification", " Abstract interpretation"], "paper_abstract": "Java interface types support multiple inheritance. Because of this, the standard bytecode verifier ignores them, since it is not able to model the class hierarchy as a lattice. Thus, type checks on interfaces are performed at run time. We propose a verification methodology that removes the need for run-time checks. The methodology consists of: (1) an augmented verifier that is very similar to the standard one, but is also able to check for interface types in most cases; (2) for all other cases, a set of additional simpler verifiers, each one specialized for a single interface type. We obtain these verifiers in a systematic way by using abstract interpretation techniques. Finally, we describe an implementation of the methodology and evaluate it on a large set of benchmarks. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Using abstract interpretation to add type checking for interfaces in Java bytecode verification", "paper_id": "WOS:000278243400003"}