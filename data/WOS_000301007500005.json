{"auto_keywords": [{"score": 0.03505401256188379, "phrase": "internal_view"}, {"score": 0.00481495049065317, "phrase": "behavioural_types"}, {"score": 0.004632597963417253, "phrase": "process_algebra"}, {"score": 0.0043215158337835706, "phrase": "concurrent_objects"}, {"score": 0.004125773078637226, "phrase": "higher-order_labelled_transition_system"}, {"score": 0.0040002088320302935, "phrase": "possible_life_cycles"}, {"score": 0.0039085400187964196, "phrase": "concurrent_object"}, {"score": 0.003674192201248236, "phrase": "state_transitions"}, {"score": 0.0035899674590142653, "phrase": "dynamic_change"}, {"score": 0.003534889186471058, "phrase": "object_interfaces"}, {"score": 0.0029361086955646625, "phrase": "message_reception"}, {"score": 0.0024957862318504753, "phrase": "silent_actions"}, {"score": 0.0022744242010653997, "phrase": "completeness_results"}, {"score": 0.0022394839933089074, "phrase": "image-finite_types"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": [""], "paper_abstract": "We propose a process algebra, the Algebra of Behavioural Types, as a language for typing concurrent objects. A type is a higher-order labelled transition system that characterises all possible life cycles of a concurrent object. States represent interfaces of objects; state transitions model the dynamic change of object interfaces. Moreover, a type provides an internal view of the objects that inhabits it: a synchronous one, since transitions correspond to message reception. To capture this internal view of objects we define a notion of bisimulation, strong on labels and weak on silent actions. We study several algebraic laws that characterise this equivalence, and obtain completeness results for image-finite types. (C) 2012 Published by Elsevier Inc.", "paper_title": "An Algebra of Behavioural Types", "paper_id": "WOS:000301007500005"}