{"auto_keywords": [{"score": 0.03148350716025271, "phrase": "periodic_tasks"}, {"score": 0.013118875449480108, "phrase": "real-time_inter-task_communication_channel"}, {"score": 0.00481495049065317, "phrase": "real-time_inter-task_communication_channels"}, {"score": 0.004583403452794034, "phrase": "hardware_and_software_tasks"}, {"score": 0.004530552828603269, "phrase": "complete_system_design"}, {"score": 0.0044653418703126365, "phrase": "key_problem"}, {"score": 0.004426664694837159, "phrase": "hardware-software_codesign"}, {"score": 0.004401065382641793, "phrase": "real-time_embedded_systems"}, {"score": 0.004337710093279712, "phrase": "time-bounded_communication_channel"}, {"score": 0.004189337956225294, "phrase": "timely_delivery"}, {"score": 0.003581797255879607, "phrase": "inter-task_communication_interface"}, {"score": 0.0032546105164772995, "phrase": "real-time_inter-task_communications"}, {"score": 0.00320770578058916, "phrase": "periodic_and_aperiodic_properties"}, {"score": 0.003170667618004276, "phrase": "unified_inter-task_communication_interface"}, {"score": 0.0031523087131407205, "phrase": "coarse-grained_real-time_processing"}, {"score": 0.0030888830649190282, "phrase": "task_unit"}, {"score": 0.0030709962527878656, "phrase": "fine-grained_real-time_processing"}, {"score": 0.0030092017034068666, "phrase": "message_frame_unit"}, {"score": 0.002847652028818724, "phrase": "aperiodic_tasks"}, {"score": 0.0027741761880779535, "phrase": "fast_response"}, {"score": 0.0027501068128017924, "phrase": "periodic_task"}, {"score": 0.0027341763737751467, "phrase": "message_deadlines"}, {"score": 0.00269475174341129, "phrase": "novel_scheduling_policy"}, {"score": 0.0026481898553135973, "phrase": "combined_task"}, {"score": 0.0026328482281238927, "phrase": "message_scheduling_scheme"}, {"score": 0.0026024303981224827, "phrase": "scheduling_policy"}, {"score": 0.002579847272930948, "phrase": "first_objective"}, {"score": 0.002542642270762272, "phrase": "timing_constraints"}, {"score": 0.0024987020562103448, "phrase": "periodic_messages"}, {"score": 0.0024130810599110398, "phrase": "response_time"}, {"score": 0.0023990982005125763, "phrase": "aperiodic_messages"}, {"score": 0.002343970440509428, "phrase": "proposed_technique"}, {"score": 0.002303455608777205, "phrase": "commercial_soc_platform"}, {"score": 0.002283460959126296, "phrase": "experimental_evaluation"}, {"score": 0.002257070536352418, "phrase": "efficient_performance"}, {"score": 0.002224510044064184, "phrase": "minimal_deadline"}, {"score": 0.0021607883988873492, "phrase": "fast_average_response_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hardware-software codesign", " Communication channel", " Inter-task communication"], "paper_abstract": "Codesign in system on chip (SoC) systems is a joint development of hardware and software tasks to obtain a complete system design. Especially, a key problem in the hardware-software codesign for real-time embedded systems is related to the time-bounded communication channel that guarantees the deadlines of tasks, as well as the timely delivery of messages exchanged between tasks. This paper presents a technique to integrate a real-time inter-task communication channel into hardware-software codesign. The real-time inter-task communication channel presented in this paper is addressed from two perspectives: a unified inter-task communication interface and a combined task and message scheduling scheme. From the perspective of an inter-task communication interface, we consider three possible inter-task communication associations, software-to-software, software-to-hardware, and hardware-to-hardware task communication associations. Tasks and messages exploited in real-time inter-task communications are allowed to have periodic and aperiodic properties. In the unified inter-task communication interface, coarse-grained real-time processing is allowed at a level of task unit and fine-grained real-time processing is allowed at a piece of message frame unit. Consequently, periodic tasks and messages need to be timely processed and delivered to meet their deadlines, and aperiodic tasks and messages need to be quickly processed for fast response without missing periodic task and message deadlines. We present a novel scheduling policy from the perspective of the combined task and message scheduling scheme. In the scheduling policy, the first objective is to meet the timing constraints of periodic tasks as well as periodic messages simultaneously for given application-specific real-time requirements. The second objective is to improve the response time of aperiodic messages. We evaluated the performance of the proposed technique after implementing it on a commercial SoC platform. The experimental evaluation showed it yielded efficient performance in terms of the minimal deadline miss ratio of periodic tasks and messages, and a fast average response time for aperiodic messages. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Integrating real-time inter-task communication channels into hardware-software codesign", "paper_id": "WOS:000280393800003"}