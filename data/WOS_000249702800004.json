{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_process_quiescence"}, {"score": 0.00476323161560059, "phrase": "termination_detection"}, {"score": 0.004611369021812453, "phrase": "time-_efficient_and_message-_efficient_detection"}, {"score": 0.00441635700580562, "phrase": "global_invariant"}, {"score": 0.004321952227344232, "phrase": "process_production"}, {"score": 0.003985487777785535, "phrase": "execution_interleaving_order"}, {"score": 0.0036553070575015344, "phrase": "launch-_in-_transit_hazards"}, {"score": 0.0034817084307034955, "phrase": "runtime_conditions"}, {"score": 0.0034442607586033657, "phrase": "remote_execution"}, {"score": 0.003334309053314909, "phrase": "tiered_algorithm"}, {"score": 0.0032278559855285945, "phrase": "comparable_capabilities"}, {"score": 0.0031417405653244457, "phrase": "chandrasekaran"}, {"score": 0.003107936179352974, "phrase": "venkatesan"}, {"score": 0.0030250265730625545, "phrase": "lai"}, {"score": 0.0029924679986935714, "phrase": "tseng"}, {"score": 0.0029442945911974253, "phrase": "dong"}, {"score": 0.002850326873790035, "phrase": "credit"}, {"score": 0.002685558057339722, "phrase": "e_epochs"}, {"score": 0.002656650588033728, "phrase": "idle_processing"}, {"score": 0.002530359917257626, "phrase": "message_count_complexity"}, {"score": 0.0024495111090152857, "phrase": "message_bit_complexity"}, {"score": 0.002410058288617039, "phrase": "detection_latency"}, {"score": 0.0022830706430588482, "phrase": "synchronization_performance"}, {"score": 0.002234165013865669, "phrase": "message_overhead"}, {"score": 0.0022101055924375725, "phrase": "detection_operations"}, {"score": 0.0021745003291048356, "phrase": "storage_requirements"}, {"score": 0.0021049977753042253, "phrase": "numerous_task_creation"}], "paper_keywords": ["synchronization", " multitasking", " distributed architectures", " distributed programming", " parallel processing"], "paper_abstract": "The Tiered Algorithm is presented for time- efficient and message- efficient detection of process termination. It employs a global invariant of equality between process production and consumption at each level of process nesting to detect termination, regardless of execution interleaving order and network transit time. Correctness is validated for arbitrary process launching hierarchies, including launch- in- transit hazards, where processes are created dynamically based on runtime conditions for remote execution. The performance of the Tiered Algorithm is compared to three existing schemes with comparable capabilities, namely, the Chandrasekaran and Venkatesan ( CV), Lai, Tseng, and Dong ( LTD), and Credit termination detection algorithms. For synchronization of T tasks terminating in E epochs of idle processing, the Tiered Algorithm is shown to incur O(E) message count complexity and O(T lg T) message bit complexity while incurring detection latency corresponding to only integer addition and comparison. The synchronization performance in terms of message overhead, detection operations, and storage requirements are evaluated and compared across numerous task creation and termination hierarchies.", "paper_title": "Tiered algorithm for distributed process quiescence and termination detection", "paper_id": "WOS:000249702800004"}