{"auto_keywords": [{"score": 0.049139223492443776, "phrase": "program_logic"}, {"score": 0.00481495049065317, "phrase": "security_type_system"}, {"score": 0.004658426838467567, "phrase": "type_systems"}, {"score": 0.004597244847332915, "phrase": "program_logics"}, {"score": 0.004218602458288531, "phrase": "formal_software_analyses"}, {"score": 0.0039748192550806815, "phrase": "flow-sensitive_type_system"}, {"score": 0.003794954883650141, "phrase": "simple_while-language"}, {"score": 0.0036714667610391535, "phrase": "specialised_rules"}, {"score": 0.003413705707789296, "phrase": "non-interference_proofs"}, {"score": 0.0033465923623290034, "phrase": "corresponding_derivations"}, {"score": 0.0032807941194429235, "phrase": "state-of-the-art_security_type_system"}, {"score": 0.003091036449708673, "phrase": "type_system"}, {"score": 0.0029706504420983896, "phrase": "proof_procedure"}, {"score": 0.0027256122357680393, "phrase": "uniform_proof_certificates"}, {"score": 0.002671990515821213, "phrase": "proof-carrying_code_framework"}, {"score": 0.00250073564820402, "phrase": "approximative_and_precise_reasoning"}, {"score": 0.00240328454980006, "phrase": "delimited_information_release"}, {"score": 0.002147265537489893, "phrase": "realistic_programming_languages"}, {"score": 0.0021051140664200304, "phrase": "java"}], "paper_keywords": ["language-based security", " information-flow analysis", " dynamic logic", " security type system", " formal verification"], "paper_abstract": "Type systems and program logics are often thought to be at opposing ends of the spectrum of formal software analyses. In this paper we show that a flow-sensitive type system ensuring non-interference in a simple while-language can be expressed through specialised rules of a program logic. In our framework, the structure of non-interference proofs resembles the corresponding derivations in a state-of-the-art security type system, meaning that the algorithmic version of the type system can be used as a proof procedure for the logic. We argue that this is important for obtaining uniform proof certificates in a proof-carrying code framework. We discuss in which cases the interleaving of approximative and precise reasoning allows us to deal with delimited information release. Finally, we present ideas on how our results can be extended to encompass features of realistic programming languages such as Java. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Integration of a security type system into a program logic", "paper_id": "WOS:000258242700007"}