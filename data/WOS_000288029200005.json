{"auto_keywords": [{"score": 0.05007801846194693, "phrase": "programming_languages"}, {"score": 0.042668478756684815, "phrase": "denotational_semantics"}, {"score": 0.04191337609468307, "phrase": "vdm"}, {"score": 0.003747020072136732, "phrase": "original_scott-strachey_style"}, {"score": 0.003644001325962353, "phrase": "extensive_use"}, {"score": 0.003446353878654566, "phrase": "fixed_operational_interpretation"}, {"score": 0.0032898346872897383, "phrase": "main_features"}, {"score": 0.003140401552000472, "phrase": "scott-strachey_style"}, {"score": 0.0029152570900178956, "phrase": "vdm_specification_language"}, {"score": 0.0021445492649196955, "phrase": "published_vdm_semantic_descriptions"}, {"score": 0.0021049977753042253, "phrase": "major_programming_languages"}], "paper_keywords": ["Programming language semantics", " Denotational semantics", " VDM", " Combinators", " Monads"], "paper_abstract": "The Vienna Development Method (VDM) was developed in the early 1970s as a variant of denotational semantics. VDM descriptions of programming languages differ from the original Scott-Strachey style by making extensive use of combinators which have a fixed operational interpretation. After recalling the main features of denotational semantics and the Scott-Strachey style, we examine the combinators of the VDM specification language, and relate them to monads, which were introduced more than 15 years later. We also suggest that use of further monadic combinators in VDM could be beneficial. Finally, we provide an overview of published VDM semantic descriptions of major programming languages.", "paper_title": "VDM semantics of programming languages: combinators and monads", "paper_id": "WOS:000288029200005"}