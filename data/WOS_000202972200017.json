{"auto_keywords": [{"score": 0.02722326781856391, "phrase": "adl"}, {"score": 0.00481495049065317, "phrase": "architecture_description"}, {"score": 0.004733625412289433, "phrase": "embedded_systems"}, {"score": 0.0046141941030386525, "phrase": "extremely_short_time"}, {"score": 0.004347057700479576, "phrase": "retargetable_compilers"}, {"score": 0.004273601449537163, "phrase": "architecture_description_languages"}, {"score": 0.004060566667226606, "phrase": "single_concise_architecture_specification"}, {"score": 0.0038253590626087237, "phrase": "instruction_set_simulators"}, {"score": 0.003423969509052361, "phrase": "compiler_generation"}, {"score": 0.0031440159350875057, "phrase": "optimized_tree_pattern"}, {"score": 0.0030908254851076005, "phrase": "instruction_selector"}, {"score": 0.0027662954811372154, "phrase": "hand-crafted_back_end"}, {"score": 0.0026282000779095987, "phrase": "smaller_and_faster_code"}, {"score": 0.0021049977753042253, "phrase": "single_specification"}], "paper_keywords": ["algorithms", " languages", " compiler generation", " architecture description language", " code generation"], "paper_abstract": "Embedded systems have an extremely short time to market and therefore require easily retargetable compilers. Architecture description languages (ADLs) provide a single concise architecture specification for the generation of hardware, instruction set simulators and compilers. In this article, we present an ADL for compiler generation. From a specification, we can derive an optimized tree pattern matching instruction selector, a register allocator and an instruction scheduler. Compared to a hand-crafted back end, the generated compiler produces smaller and faster code. The ADL is rich enough that other tools, such as assemblers, linkers, simulators and documentation, can all be obtained from a single specification.", "paper_title": "Effective compiler generation by architecture description", "paper_id": "WOS:000202972200017"}