{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "incremental_evaluation"}, {"score": 0.004757227624616643, "phrase": "tabled_logic_programs"}, {"score": 0.004533142516832776, "phrase": "efficient_incremental_maintenance"}, {"score": 0.004478782833067256, "phrase": "memo_tables"}, {"score": 0.004398457709182882, "phrase": "tabled_logic_programming_system"}, {"score": 0.00406663414150229, "phrase": "primitive_changes"}, {"score": 0.0038516336597530614, "phrase": "old_version"}, {"score": 0.003714629047818465, "phrase": "new_version"}, {"score": 0.003539479990299223, "phrase": "independent_algorithms"}, {"score": 0.003213489259323921, "phrase": "local_algorithm"}, {"score": 0.00306189690236109, "phrase": "key_idea"}, {"score": 0.0024336917123957387, "phrase": "attribute_grammars"}, {"score": 0.002404447017429959, "phrase": "functional_programs"}, {"score": 0.002222717552124615, "phrase": "specialized_cases"}, {"score": 0.0021049977753042253, "phrase": "data-flow_analysis"}], "paper_keywords": [""], "paper_abstract": "This paper considers the problem of efficient incremental maintenance of memo tables in a tabled logic programming system. Most existing techniques for this problem consider insertion and deletion of facts as primitive changes, and treat update as deletion of the old version followed by insertion of the new version. They handle insertion and deletion using independent algorithms, consequently performing many redundant computations when processing updates. In this paper, we present a local algorithm for handling updates to facts. The key idea is to interleave the propagation of deletion and insertion operations generated by the updates through a dynamic (and potentially cyclic) dependency graph. The dependency graph used in our algorithm is more general than that used in algorithms previously proposed for incremental evaluation of attribute grammars and functional programs. Nevertheless, our algorithm's complexity matches that of the most efficient algorithms built for these specialized cases. We demonstrate the effectiveness of our algorithm using data-flow analysis and parsing examples.", "paper_title": "A local algorithm for incremental evaluation of tabled logic programs", "paper_id": "WOS:000240061200005"}