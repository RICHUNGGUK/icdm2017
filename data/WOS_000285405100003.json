{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "recursive_relational_specifications"}, {"score": 0.00462919213721188, "phrase": "computational_structure"}, {"score": 0.004577440795549049, "phrase": "formal_systems"}, {"score": 0.0045262653692203815, "phrase": "recent_research"}, {"score": 0.004475659507646842, "phrase": "proof_theory"}, {"score": 0.00413684709497912, "phrase": "atomic_judgments"}, {"score": 0.004090577229368418, "phrase": "recursive_definitions"}, {"score": 0.00397714507836836, "phrase": "binding_constructs"}, {"score": 0.003932654396285872, "phrase": "generic_judgments"}, {"score": 0.0035339597999254064, "phrase": "dynamic_aspects"}, {"score": 0.003266201217790818, "phrase": "new_relation"}, {"score": 0.002984867789900281, "phrase": "nominal_abstraction"}, {"score": 0.00293487292076612, "phrase": "rich_logic"}, {"score": 0.002853396755102163, "phrase": "generic_quantification"}, {"score": 0.0024926348205500715, "phrase": "elegant_treatments"}, {"score": 0.002464709648714996, "phrase": "binding_contexts"}, {"score": 0.0022522565004588113, "phrase": "arbitrarily_cascading_substitutions"}, {"score": 0.0021773853011112882, "phrase": "reducibility_arguments"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Generic judgments", " Higher-order abstract syntax", " lambda-Tree syntax", " Proof search", " Reasoning about operational semantics"], "paper_abstract": "Recursive relational specifications are commonly used to describe the computational structure of formal systems. Recent research in proof theory has identified two features that facilitate direct, logic-based reasoning about such descriptions: the interpretation of atomic judgments through recursive definitions and an encoding of binding constructs via generic judgments. However, logics encompassing these two features do not currently allow for the definition of relations that embody dynamic aspects related to binding, a capability needed in many reasoning tasks. We propose a new relation between terms called nominal abstraction as a means for overcoming this deficiency. We incorporate nominal abstraction into a rich logic also including definitions, generic quantification, induction, and co-induction that we then prove to be consistent. We present examples to show that this logic can provide elegant treatments of binding contexts that appear in many proofs, such as those establishing properties of typing calculi and of arbitrarily cascading substitutions that play a role in reducibility arguments. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Nominal abstraction", "paper_id": "WOS:000285405100003"}