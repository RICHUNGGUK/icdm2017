{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fine-grained_reuse"}, {"score": 0.004306205029641728, "phrase": "object-oriented_languages"}, {"score": 0.004087469540575263, "phrase": "coarse_granularity"}, {"score": 0.0036826452656927877, "phrase": "optimal_class_hierarchy"}, {"score": 0.003601235776892337, "phrase": "software_reuse"}, {"score": 0.0035479614996805383, "phrase": "existing_schemes"}, {"score": 0.0034695189961509625, "phrase": "single_inheritance"}, {"score": 0.003418186564522323, "phrase": "multiple_inheritance"}, {"score": 0.0032444113660668743, "phrase": "numerous_problems"}, {"score": 0.0027535633837592597, "phrase": "formal_model"}, {"score": 0.002285075675790214, "phrase": "experimental_validation"}, {"score": 0.002136651746284283, "phrase": "nontrivial_application"}, {"score": 0.0021049977753042253, "phrase": "composable_units"}], "paper_keywords": ["languages", " languages", " inheritance", " mixins", " multiple inheritance", " traits", " reuse", " smalltalk"], "paper_abstract": "Inheritance is well-known and accepted as a mechanism for reuse in object-oriented languages. Unfortunately, due to the coarse granularity of inheritance, it may be difficult to decompose an application into an optimal class hierarchy that maximizes software reuse. Existing schemes based on single inheritance, multiple inheritance, or mixins, all pose numerous problems for reuse. To overcome these problems we propose traits, pure units of reuse consisting only of methods. We develop a formal model of traits that establishes how traits can be composed, either to form other traits, or to form classes. We also outline an experimental validation in which we apply traits to refactor a nontrivial application into composable units.", "paper_title": "Traits: A mechanism for fine-grained reuse", "paper_id": "WOS:000236006300004"}