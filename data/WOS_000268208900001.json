{"auto_keywords": [{"score": 0.04005102552278713, "phrase": "performance_degradation"}, {"score": 0.035544412132803634, "phrase": "atlas"}, {"score": 0.00481495049065317, "phrase": "multi-threaded_memory-intensive_linear_algebra_software"}, {"score": 0.004596295252559861, "phrase": "minimal_performance_overhead"}, {"score": 0.004549063619065006, "phrase": "high_performance_computing"}, {"score": 0.004364919932563366, "phrase": "numerous_benefits"}, {"score": 0.003936389070602614, "phrase": "automatically-tuned_software_systems"}, {"score": 0.003855849747095327, "phrase": "peak_performance"}, {"score": 0.0037769520261285872, "phrase": "constrained_memory_situations"}, {"score": 0.0036996627006622975, "phrase": "multi-threaded_applications"}, {"score": 0.0034951469511975346, "phrase": "comparison_purposes"}, {"score": 0.0033190180867511605, "phrase": "quintessential_example"}, {"score": 0.003267925215811654, "phrase": "autotuning_software_system"}, {"score": 0.0031845067058084583, "phrase": "blas_library_routines"}, {"score": 0.003151736708029235, "phrase": "paravirtualized_systems"}, {"score": 0.0029928611380840757, "phrase": "xen_paravirtualization"}, {"score": 0.0029620573986902416, "phrase": "native_execution_performance"}, {"score": 0.0028127163745564777, "phrase": "single_and_multi-threaded_scenarios"}, {"score": 0.002643386043540555, "phrase": "memory_sharing"}, {"score": 0.0026161698049580804, "phrase": "os_instances"}, {"score": 0.0025892330566358503, "phrase": "native_speeds"}, {"score": 0.0025230952890994236, "phrase": "new_benefits"}, {"score": 0.0024971144603069006, "phrase": "memory-intensive_applications"}, {"score": 0.0023834640793589414, "phrase": "guest_os"}, {"score": 0.0023346234464901978, "phrase": "system_performance"}, {"score": 0.002126907587540404, "phrase": "virtual_clusters"}, {"score": 0.0021049977753042253, "phrase": "computational_clouds"}], "paper_keywords": ["Virtual machine monitors", " Paravirtualization", " AutoTuning", " BLAS", " High performance", " Linear algebra", " Cloud computing"], "paper_abstract": "Previous studies have revealed that paravirtualization imposes minimal performance overhead on High Performance Computing (HPC) workloads, while exposing numerous benefits for this field. In this study, we are investigating the impact of paravirtualization on the performance of automatically-tuned software systems. We compare peak performance, performance degradation in constrained memory situations, performance degradation in multi-threaded applications, and inter-VM shared memory performance. For comparison purposes, we examine the proficiency of ATLAS, a quintessential example of an autotuning software system, in tuning the BLAS library routines for paravirtualized systems. Our results show that the combination of ATLAS and Xen paravirtualization delivers native execution performance and nearly identical memory hierarchy performance profiles in both single and multi-threaded scenarios. Furthermore, we show that it is possible to achieve memory sharing among OS instances at native speeds. These results expose new benefits to memory-intensive applications arising from the ability to slim down the guest OS without influencing the system performance. In addition, our findings support a novel and very attractive deployment scenario for computational science and engineering codes on virtual clusters and computational clouds.", "paper_title": "Paravirtualization effect on single- and multi-threaded memory-intensive linear algebra software", "paper_id": "WOS:000268208900001"}