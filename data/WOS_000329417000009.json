{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "complete_hardware_synthesis"}, {"score": 0.00475382761232911, "phrase": "lara_aspects"}, {"score": 0.0045556080393342165, "phrase": "embedded_systems"}, {"score": 0.004497762477097628, "phrase": "notoriously_complex_process"}, {"score": 0.004328576620172571, "phrase": "wide_range"}, {"score": 0.004130376386308024, "phrase": "large_and_complex_design_space"}, {"score": 0.0039077616208517026, "phrase": "different_tools"}, {"score": 0.0037446875860947916, "phrase": "tool-specific_transformations"}, {"score": 0.0034386016613475335, "phrase": "aspect-oriented_technology"}, {"score": 0.0033232673019931206, "phrase": "hardware_compilation_strategies"}, {"score": 0.0030515222178491923, "phrase": "code_transformations"}, {"score": 0.003025597247856977, "phrase": "compiler_optimizations"}, {"score": 0.0028992294924613327, "phrase": "application_kernels"}, {"score": 0.0028139168128067343, "phrase": "integrated_framework"}, {"score": 0.0027662954811372154, "phrase": "transparent_and_unified_view"}, {"score": 0.0025291601927956765, "phrase": "application-specific_hardware_architectures"}, {"score": 0.0024547103576350233, "phrase": "high-level_source-code_transformation"}, {"score": 0.0023123057299992587, "phrase": "custom_hardware"}, {"score": 0.002187464225869713, "phrase": "productivity_benefits"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design-Space Exploration (DSE)", " Automatic hardware synthesis", " Hardware/software partitioning", " Program transformations", " Aspect-oriented programming", " FPGAs"], "paper_abstract": "The synthesis and mapping of applications to configurable embedded systems is a notoriously complex process. Design-flows typically include tools that have a wide range of parameters which interact in very unpredictable ways, thus creating a large and complex design space. When exploring this space, designers must manage the interfaces between different tools and apply, often manually, a sequence of tool-specific transformations making design exploration extremely cumbersome and error-prone. This paper describes the use of techniques inspired by aspect-oriented technology and scripting languages for defining and exploring hardware compilation strategies. In particular, our approach allows developers to control all stages of a hardware/software compilation and synthesis toolchain: from code transformations and compiler optimizations to placement and routing for tuning the performance of application kernels. Our approach takes advantage of an integrated framework which provides a transparent and unified view over toolchains, their data output and the control of their execution. We illustrate the use of our approach when designing application-specific hardware architectures generated by a toolchain composed of high-level source-code transformation and synthesis tools. The results show the impact of various strategies when targeting custom hardware and expose the complexities in devising these strategies, hence highlighting the productivity benefits of this approach. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Controlling a complete hardware synthesis toolchain with LARA aspects", "paper_id": "WOS:000329417000009"}