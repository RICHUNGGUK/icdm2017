{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "artificial_neural_networks_verification"}, {"score": 0.004563427013973105, "phrase": "artificial_neural_networks"}, {"score": 0.004324985524216987, "phrase": "safety-related_applications"}, {"score": 0.0038431888954930083, "phrase": "possible_misbehaviors"}, {"score": 0.0037615180375561805, "phrase": "traditional_analytical_or_probabilistic_techniques"}, {"score": 0.002695768552609587, "phrase": "corresponding_boolean_combinations"}, {"score": 0.0026384167183586015, "phrase": "linear_arithmetic_constraints"}, {"score": 0.0025003054002226965, "phrase": "main_verification_algorithm"}, {"score": 0.0023694065215394593, "phrase": "never."}, {"score": 0.0022696277881969896, "phrase": "empirical_results"}, {"score": 0.0021049977753042253, "phrase": "realistic_case_studies"}], "paper_keywords": ["Formal methods for adaptive systems", " Abstraction techniques", " Algorithms and tools for verification"], "paper_abstract": "The adoption of Artificial Neural Networks (ANNs) in safety-related applications is often avoided because it is difficult to rule out possible misbehaviors with traditional analytical or probabilistic techniques. In this paper we present NEVER, our tool for checking safety of ANNs. NEVER encodes the problem of verifying safety of ANNs into the problem of satisfying corresponding Boolean combinations of linear arithmetic constraints. We describe the main verification algorithm and the structure of NEVER. We present also empirical results confirming the effectiveness of NEVER on realistic case studies.", "paper_title": "NEVER: a tool for artificial neural networks verification", "paper_id": "WOS:000300019900010"}