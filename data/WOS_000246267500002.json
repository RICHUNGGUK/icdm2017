{"auto_keywords": [{"score": 0.04227539537967155, "phrase": "simplifying_model"}, {"score": 0.015719716506582538, "phrase": "software_reliability_testing"}, {"score": 0.013606756916570652, "phrase": "modeling_framework"}, {"score": 0.013023631040716941, "phrase": "generalized_model"}, {"score": 0.009748283721921719, "phrase": "software_testing_process"}, {"score": 0.008694887401174424, "phrase": "delivered_software_reliability"}, {"score": 0.004566308708871429, "phrase": "quantitative_reliability_goal"}, {"score": 0.004407690586271672, "phrase": "quantitative_reliability_assessment"}, {"score": 0.004106725110985659, "phrase": "software_reliability_testing_process"}, {"score": 0.003877329308854808, "phrase": "software_testing_action_selection_process"}, {"score": 0.003826231150275071, "phrase": "defect_removal_mechanism"}, {"score": 0.0036932254391253134, "phrase": "continuous-time_domain"}, {"score": 0.003135564707433078, "phrase": "simulation_examples"}, {"score": 0.003013129637451091, "phrase": "essential_features"}, {"score": 0.002934166052954463, "phrase": "short_initial_testing_stage"}, {"score": 0.0026736945502820303, "phrase": "software_testing"}, {"score": 0.002490833392316362, "phrase": "rigorous_examinations"}, {"score": 0.002425524064992056, "phrase": "software_reliability_modeling"}, {"score": 0.002382936364692606, "phrase": "independence_assumption"}, {"score": 0.002351485871160907, "phrase": "exponentiality_assumption"}, {"score": 0.0023101951336207955, "phrase": "nhpp_assumption"}, {"score": 0.0021906130276146325, "phrase": "good_starting_point"}], "paper_keywords": ["software testing", " software reliability", " Markov usage model based testing", " software testing stability"], "paper_abstract": "Software reliability testing refers to various software testing activities that are driven to achieve a quantitative reliability goal given a priori or lead to a quantitative reliability assessment for the software under test. In this paper we develop a modeling framework for the software reliability testing process, comprising a simplifying model and a generalized model. In both models the software testing action selection process and the defect removal mechanism are explicitly described. Both the discrete-time domain and the continuous-time domain are involved. The generalized model is more accurate or realistic than the simplifying model since the former avoids the assumption that defects are equally detectable and the assumption that defects are removed upon being detected. However simulation examples show that the simplifying model really captures some of essential features of the software testing process after a short initial testing stage. The modeling framework is practically realistic, mathematically rigorous, and quantitatively precise. It demonstrates that the relationship between software testing and delivered software reliability, which was poor understood, can well be formulated and quantified. Rigorous examinations show that several common assumptions adopted in software reliability modeling, including the independence assumption, the exponentiality assumption, and the NHPP assumption, are theoretically false in general. This paper sets a good starting point to further formalize and quantify the software testing process and its relation to delivered software reliability.", "paper_title": "A mathematical modeling framework for software reliability testing", "paper_id": "WOS:000246267500002"}