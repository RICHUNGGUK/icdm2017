{"auto_keywords": [{"score": 0.03199948514071014, "phrase": "search_node"}, {"score": 0.024256000469832225, "phrase": "unary_weights"}, {"score": 0.00481495049065317, "phrase": "intelligent_variable_orderings"}, {"score": 0.004747141873785, "phrase": "dac-based_solvers"}, {"score": 0.004713594814274419, "phrase": "wcsp._weighted_constraint_satisfaction_problems"}, {"score": 0.004614362802631256, "phrase": "well-known_framework"}, {"score": 0.0045817497454044565, "phrase": "combinatorial_optimization_problems"}, {"score": 0.004222795179790998, "phrase": "systematic_search"}, {"score": 0.004104621766670225, "phrase": "unfeasible_values"}, {"score": 0.003650984439966844, "phrase": "current_implementations"}, {"score": 0.0036123093557208492, "phrase": "lexicographic_order"}, {"score": 0.00346164863873186, "phrase": "heuristic_orders"}, {"score": 0.003212906206685004, "phrase": "whole_solving_process"}, {"score": 0.0030032443093632125, "phrase": "current_subproblem_information"}, {"score": 0.002837305633114947, "phrase": "different_orders"}, {"score": 0.0027577972695911825, "phrase": "local_consistency"}, {"score": 0.0025686157786539423, "phrase": "max-sat"}, {"score": 0.0025504236968958366, "phrase": "max-csp"}, {"score": 0.002341895788806396, "phrase": "inverse_degree"}, {"score": 0.0021580408652391767, "phrase": "good_heuristics"}, {"score": 0.0021049977753042253, "phrase": "random_order"}], "paper_keywords": ["weighted CSPs", " local consistency"], "paper_abstract": "Weighted constraint satisfaction problems (WCSPs) is a well-known framework for combinatorial optimization problems with several domains of application. In the last few years, several local consistencies for WCSPs have been proposed. Their main use is to embed them into a systematic search, in order to detect and prune unfeasible values as well as to anticipate the detection of deadends. Some of these consistencies rely on an order among variables but nothing is known about which orders are best. Therefore, current implementations use the lexicographic order by default. In this paper we analyze the effect of heuristic orders at three levels of increasing overhead: i) compute the order prior to search and keep it fixed during the whole solving process (we call this a static order), ii) compute the order at every search node using current subproblem information (we call this a dynamic order) and iii) compute a sequence of different orders at every search node and sequentially enforce the local consistency for each one (we call this dynamic re-ordering). We performed experiments in three different problems: Max-SAT, Max-CSP and warehouse location problems. We did not find an alternative better than the rest for all the instances. However, we found that inverse degree (static order), sum of unary weights (dynamic order) and re-ordering with the sum of unary weights are good heuristics which are always better than a random order.", "paper_title": "Intelligent variable orderings and re-orderings in DAC-based solvers for WCSP", "paper_id": "WOS:000237397100004"}