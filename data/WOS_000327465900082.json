{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_regular_expression_matching"}, {"score": 0.0045726187330434025, "phrase": "regular_expression_matching"}, {"score": 0.004342430078306461, "phrase": "today's_network_devices"}, {"score": 0.004231699728933577, "phrase": "deep_inspection_function"}, {"score": 0.003865826699096508, "phrase": "algorithmic_scalability"}, {"score": 0.003577414339646767, "phrase": "performance_bottleneck"}, {"score": 0.003486123304074186, "phrase": "practical_network_processing"}, {"score": 0.00306334226516593, "phrase": "regular_expression_patterns"}, {"score": 0.002985130390111069, "phrase": "simple_segments"}, {"score": 0.0028715299874549245, "phrase": "state_explosion"}, {"score": 0.002555950807368337, "phrase": "compact_data_structure"}, {"score": 0.0024586427394152196, "phrase": "fast_matching"}, {"score": 0.0023958326775913165, "phrase": "preliminary_experiments"}, {"score": 0.0021049977753042253, "phrase": "real-world_pattern"}], "paper_keywords": ["Regular expression matching", " deep inspection", " DFA"], "paper_abstract": "Regular expression matching is popular in today's network devices with deep inspection function, but due to lack of algorithmic scalability, it is still the performance bottleneck in practical network processing. To address this problem, our method first partition regular expression patterns into simple segments to avoid state explosion, and then compile these segments into a compact data structure to achieve fast matching. Preliminary experiments illustrate that our matching engine scales linearly with the size of the real-world pattern set, and outperforms state-of-the-art solutions.", "paper_title": "Towards Fast Regular Expression Matching in Practice", "paper_id": "WOS:000327465900082"}