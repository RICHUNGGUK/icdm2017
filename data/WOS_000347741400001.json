{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_architecture"}, {"score": 0.0052359718813221896, "phrase": "shepherd"}, {"score": 0.004773476989344654, "phrase": "minimal_cost"}, {"score": 0.00469159356595623, "phrase": "reliability_constraints"}, {"score": 0.004551647527068771, "phrase": "deployment_phase"}, {"score": 0.004435006247087171, "phrase": "frequent_changes"}, {"score": 0.004377806391261418, "phrase": "software_requirements"}, {"score": 0.0037299231609021783, "phrase": "optimization_model"}, {"score": 0.003665874747419775, "phrase": "\"best\"_actions"}, {"score": 0.003450213580299164, "phrase": "new_requirements"}, {"score": 0.003361702510958392, "phrase": "structural_and_behavioral_aspects"}, {"score": 0.002802373595203129, "phrase": "uml_case_tool"}, {"score": 0.002766171878646582, "phrase": "model_builder"}, {"score": 0.0027304365438083874, "phrase": "model_solver"}, {"score": 0.0026259694526633037, "phrase": "smartphone_mobile_application_example"}, {"score": 0.002525489173110693, "phrase": "architectural_decisions"}, {"score": 0.0025036862991477437, "phrase": "sensitivity_analysis"}, {"score": 0.0024713335323674223, "phrase": "achieved_results"}, {"score": 0.0022464835515931592, "phrase": "execution_environment"}, {"score": 0.0021604924928015283, "phrase": "human_judgment-based_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software evolution", " Software cost", " Software reliability", " Software performance", " Optimization model"], "paper_abstract": "Managing a software architecture after the deployment phase is a very complex task due to frequent changes in the software requirements and environment. The software architecture must evolve in order to tackle such changes. The goal of this paper is to provide support for the decisions that software architects make after deployment. This approach is based on an optimization model whose solution suggests the \"best\" actions to be taken according to a given change scenario (i.e., a set of new requirements that induce changes in the structural and behavioral aspects of the software architecture). The model aims to minimize the costs while keeping the reliability and the performance of the software architecture within certain thresholds. The approach has been implemented as a framework named SHEPhERd, which is composed of a UML case tool, a model builder and a model solver. We show how SHEPhERd works on a smartphone mobile application example, and we highlight its potential to drive architectural decisions through sensitivity analysis. The achieved results are compared with those obtained by two groups of (human) maintainers composed of experts and non-experts with respect to the system and the execution environment, and we show that SHEPhERd outperforms the human judgment-based approaches. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Managing the evolution of a software architecture at minimal cost under performance and reliability constraints", "paper_id": "WOS:000347741400001"}