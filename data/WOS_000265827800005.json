{"auto_keywords": [{"score": 0.03548517282140461, "phrase": "pipeline_modes"}, {"score": 0.029578773889651095, "phrase": "compiler_time"}, {"score": 0.00481495049065317, "phrase": "low_power"}, {"score": 0.00471003041684707, "phrase": "increasingly_important_role"}, {"score": 0.004658426838467567, "phrase": "embedded_systems"}, {"score": 0.004218602458288531, "phrase": "dynamic_voltage_scaling"}, {"score": 0.004058951880810154, "phrase": "prevalent_low-power_technique"}, {"score": 0.003970451458548526, "phrase": "dvs"}, {"score": 0.0038624981944755813, "phrase": "power_saving"}, {"score": 0.00373682045166829, "phrase": "lower_bound"}, {"score": 0.003328184259386487, "phrase": "low-voltage_level"}, {"score": 0.0032376465741070274, "phrase": "previous_work"}, {"score": 0.0032021793699326916, "phrase": "dps"}, {"score": 0.003132236287543072, "phrase": "hardware_support"}, {"score": 0.00282048824450047, "phrase": "dps_optimization_technique"}, {"score": 0.0027437235598539904, "phrase": "power_dissipation"}, {"score": 0.0026986685585382347, "phrase": "useful_information"}, {"score": 0.0025678829712650437, "phrase": "analytical_model"}, {"score": 0.002470547930651519, "phrase": "dps_mechanism"}, {"score": 0.002337848196418384, "phrase": "switching_timing"}, {"score": 0.0022492129111567824, "phrase": "significant_run-time_overhead"}, {"score": 0.0021049977753042253, "phrase": "energy_consumption"}], "paper_keywords": ["DVS", " DPS", " Pipeline mode", " Loop region", " IPC"], "paper_abstract": "Low power has played an increasingly important role for embedded systems. To save power, lowering voltage and frequency is very straightforward and effective; therefore, dynamic voltage scaling (DVS) has become a prevalent low-power technique. However, DVS makes no effect on power saving when the voltage reaches a lower bound. Fortunately, a technique called dynamic pipeline scaling (DPS) can overcome this limitation by switching pipeline modes at low-voltage level. Approaches proposed in previous work on DPS were based on hardware support. From viewpoint of compiler, little has been addressed on this issue. This paper presents a DPS optimization technique at compiler time to reduce power dissipation. The useful information of an application is exploited to devise an analytical model to assess the cost of enabling DPS mechanism. As a consequence, we can determine the switching timing between pipeline modes at compiler time without causing significant run-time overhead. The experimental result shows that our approach is effective in reducing energy consumption.", "paper_title": "Profile-based dynamic pipeline scaling", "paper_id": "WOS:000265827800005"}