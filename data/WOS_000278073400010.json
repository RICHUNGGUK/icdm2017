{"auto_keywords": [{"score": 0.038521130357784865, "phrase": "program_behavior"}, {"score": 0.00481495049065317, "phrase": "program_behavior_discovery"}, {"score": 0.004657185361669812, "phrase": "graph_grammar_approach"}, {"score": 0.004565007074039171, "phrase": "program_behaviors"}, {"score": 0.004415395176043526, "phrase": "program_comprehension"}, {"score": 0.004130660282810338, "phrase": "text_mining_algorithms"}, {"score": 0.004048860957751714, "phrase": "behavior_patterns"}, {"score": 0.003995226376780718, "phrase": "formal_models"}, {"score": 0.003942299471749811, "phrase": "program_execution"}, {"score": 0.003737485125097945, "phrase": "hierarchical_composition"}, {"score": 0.003614895644619489, "phrase": "different_abstraction_levels"}, {"score": 0.0035669891404642015, "phrase": "textual_descriptions"}, {"score": 0.0032272929113113203, "phrase": "semi-automatic_graph_grammar_approach"}, {"score": 0.0029988599391845517, "phrase": "hierarchical_structure"}, {"score": 0.0029198522863606953, "phrase": "recurring_substructures"}, {"score": 0.002861961643289598, "phrase": "bottom-up_fashion"}, {"score": 0.0027680095380207756, "phrase": "behavior_discovery"}, {"score": 0.0027312956497456374, "phrase": "verification_problem"}, {"score": 0.0026771333996253783, "phrase": "graph_grammar_induction"}, {"score": 0.002520990102833368, "phrase": "mining_qualified_patterns"}, {"score": 0.0023268399760599336, "phrase": "induced_grammar"}, {"score": 0.002265497060260791, "phrase": "behavioral_structure"}, {"score": 0.002220551141101661, "phrase": "new_program"}], "paper_keywords": ["Visual language", " graph grammar induction", " program comprehension", " reengineering"], "paper_abstract": "Discovering program behaviors and functionalities can ease program comprehension and verification. Existing program analysis approaches have used text mining algorithms to infer behavior patterns or formal models from program execution. When one tries to identify the hierarchical composition of a program behavior at different abstraction levels, textual descriptions are not informative and expressive enough. To address this, we present a semi-automatic graph grammar approach to retrieving the hierarchical structure of the program behavior. The hierarchical structure is built on recurring substructures in a bottom-up fashion. We formulate the behavior discovery and verification problem as a graph grammar induction and parsing problem, i.e., automatically iteratively mining qualified patterns and then constructing graph rewriting rules. Furthermore, using the induced grammar to parse the behavioral structure of a new program could verify if the program has the same behavioral properties specified by the grammar.", "paper_title": "Program Behavior Discovery and Verification: A Graph Grammar Approach", "paper_id": "WOS:000278073400010"}