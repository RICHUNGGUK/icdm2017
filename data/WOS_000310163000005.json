{"auto_keywords": [{"score": 0.03529624542703246, "phrase": "custom_instructions"}, {"score": 0.004278807087784626, "phrase": "important_design_choice"}, {"score": 0.004238576355081601, "phrase": "embedded_systems"}, {"score": 0.004120130206000757, "phrase": "high_flexibility"}, {"score": 0.004043003243656031, "phrase": "base_processor_core"}, {"score": 0.0040049806975968145, "phrase": "high_performance"}, {"score": 0.003967314311312148, "phrase": "energy_efficiency"}, {"score": 0.0038930368103015467, "phrase": "dedicated_hardware_extensions"}, {"score": 0.0036958398682001015, "phrase": "computation_acceleration"}, {"score": 0.003541923233726252, "phrase": "chip_data_storage_elements"}, {"score": 0.0034920505103165403, "phrase": "register_file"}, {"score": 0.003459191419478298, "phrase": "data_cache"}, {"score": 0.0033943947596098583, "phrase": "potential_performance_bottleneck"}, {"score": 0.003030247482854539, "phrase": "additional_inputs"}, {"score": 0.002717886783819971, "phrase": "linear_scan_register_allocation_algorithm"}, {"score": 0.00266693888510356, "phrase": "base_instructions"}, {"score": 0.002616943519478975, "phrase": "existing_custom_registers"}, {"score": 0.002555761854502478, "phrase": "register_spills"}, {"score": 0.0024842242921857705, "phrase": "data_traffic"}, {"score": 0.002449208093757498, "phrase": "base_processor"}, {"score": 0.0023470862747075228, "phrase": "energy-efficient_on-chip_communications"}, {"score": 0.002281376328251423, "phrase": "custom_hardware_extensions"}, {"score": 0.0022175019341824603, "phrase": "significant_performance_gain"}, {"score": 0.0021049977753042253, "phrase": "asip_design"}], "paper_keywords": ["Design", " Performance", " Application-specific instruction set processor", " custom registers", " register spills", " memory traffic reduction"], "paper_abstract": "Application-Specific Instruction set Processor (ASIP) has become an important design choice for embedded systems. It can achieve both high flexibility offered by the base processor core and high performance and energy efficiency offered by the dedicated hardware extensions. Although a lot of efforts have been devoted to computation acceleration, for example, automatic custom instruction identification and synthesis, limited on-chip data storage elements including the register file and data cache have become a potential performance bottleneck. For custom instructions that have more inputs and/or outputs than the generic register file I/O ports, custom registers are added in ASIPs to satisfy the need of additional inputs and outputs, and traditionally they are used only by custom instructions. In this article, we propose a hardware/software cooperative approach with a linear scan register allocation algorithm, which allows base instructions to utilize the existing custom registers in ASIPs for eliminating register spills of the program. The data traffic between the base processor and off-chip memory can be replaced with energy-efficient on-chip communications between the processor core and custom hardware extensions. Our experimental results demonstrate that a significant performance gain can be achieved, orthogonal to improvements by other techniques in ASIP design.", "paper_title": "A Hardware/Software Cooperative Custom Register Binding Approach for Register Spill Elimination in Application-Specific Instruction Set Processors", "paper_id": "WOS:000310163000005"}