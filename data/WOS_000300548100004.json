{"auto_keywords": [{"score": 0.048970045726729895, "phrase": "frp"}, {"score": 0.00481495049065317, "phrase": "bounded_space"}, {"score": 0.0047588556219929756, "phrase": "functional_reactive_programming"}, {"score": 0.004594443767709888, "phrase": "elegant_and_successful_approach"}, {"score": 0.0045143706249204905, "phrase": "reactive_systems"}, {"score": 0.00440976345264104, "phrase": "high_levels"}, {"score": 0.004134372859330047, "phrase": "programming_model"}, {"score": 0.0035496495489801667, "phrase": "space_leaks"}, {"score": 0.0035082436540296406, "phrase": "discrete-time_functional_reactive_programs"}, {"score": 0.0034068225125064586, "phrase": "functional_reactive_programming_language"}, {"score": 0.0032505921489759224, "phrase": "dataflow_graph"}, {"score": 0.003212663446866794, "phrase": "reactive_program"}, {"score": 0.0030653094605910727, "phrase": "higher-order_functions"}, {"score": 0.0030295361111006866, "phrase": "higher-type_streams"}, {"score": 0.0028234703730349894, "phrase": "novel_linear_type_theory"}, {"score": 0.0027741761880779535, "phrase": "controls_allocation"}, {"score": 0.002693919110230191, "phrase": "recursive_definitions"}, {"score": 0.002540285736232122, "phrase": "denotational_semantics"}, {"score": 0.0024667783849055634, "phrase": "recent_work"}, {"score": 0.0024379730432321656, "phrase": "metric_spaces"}, {"score": 0.0023674192513753996, "phrase": "higher-order_causal_functions"}, {"score": 0.002339771435910601, "phrase": "length-space_models"}, {"score": 0.0023124457559811087, "phrase": "space-bounded_computation"}, {"score": 0.002272053079580848, "phrase": "resulting_category"}, {"score": 0.0021049977753042253, "phrase": "bunched_implications"}], "paper_keywords": ["languages", " design", " theory", " functional reactive programming", " dataflow", " space-bounded computation", " linear logic", " bunched implications"], "paper_abstract": "Functional reactive programming (FRP) is an elegant and successful approach to programming reactive systems declaratively. The high levels of abstraction and expressivity that make FRP attractive as a programming model do, however, often lead to programs whose resource usage is excessive and hard to predict. In this paper, we address the problem of space leaks in discrete-time functional reactive programs. We present a functional reactive programming language that statically bounds the size of the dataflow graph a reactive program creates, while still permitting use of higher-order functions and higher-type streams such as streams of streams. We achieve this with a novel linear type theory that both controls allocation and ensures that all recursive definitions are well-founded. We also give a denotational semantics for our language by combining recent work on metric spaces for the interpretation of higher-order causal functions with length-space models of space-bounded computation. The resulting category is doubly closed and hence forms a model of the logic of bunched implications.", "paper_title": "Higher-Order Functional Reactive Programming in Bounded Space", "paper_id": "WOS:000300548100004"}