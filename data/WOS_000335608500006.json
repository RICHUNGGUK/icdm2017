{"auto_keywords": [{"score": 0.034860801016357995, "phrase": "functional_usability_features"}, {"score": 0.032458520951061186, "phrase": "usability_model"}, {"score": 0.014932799594791721, "phrase": "conceptual_model"}, {"score": 0.00481495049065317, "phrase": "holistic_mdd_method"}, {"score": 0.004396790930873782, "phrase": "model_compiler"}, {"score": 0.0043213410601860985, "phrase": "software_systems"}, {"score": 0.004247180402119585, "phrase": "automatic_transformations"}, {"score": 0.004120435930514554, "phrase": "mdd_methods"}, {"score": 0.0038115535592184438, "phrase": "manual_implementations"}, {"score": 0.0037623642073222547, "phrase": "last_steps"}, {"score": 0.0037138072936226, "phrase": "software_development_process"}, {"score": 0.003665874747419775, "phrase": "usability_features"}, {"score": 0.003261295948815592, "phrase": "first_steps"}, {"score": 0.0032191849045822415, "phrase": "development_process"}, {"score": 0.003177615880037735, "phrase": "closer_mdd_methods"}, {"score": 0.0031365819432206004, "phrase": "holistic_perspective"}, {"score": 0.003003579442221871, "phrase": "conceptual_primitives"}, {"score": 0.0029264925857346497, "phrase": "sufficiently_abstract_way"}, {"score": 0.0028145455182562807, "phrase": "different_holistic_mdd_methods"}, {"score": 0.0025036862991477437, "phrase": "mdd_method"}, {"score": 0.0023974563359295043, "phrase": "model-to-model_and_model-to-code_transformations"}, {"score": 0.0022562464662197867, "phrase": "existing_mdd_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model-driven development", " Usability", " Conceptual model"], "paper_abstract": "Holistic methods for Model-Driven Development (MDD) aim to model all the system features in a conceptual model. This conceptual model is the input for a model compiler that can generate software systems by means of automatic transformations. However, in general, MDD methods focus on modelling the structure and functionality of systems, relegating the interaction and usability features to manual implementations at the last steps of the software development process. Some usability features are strongly related to the functionality of the system and their inclusion is not so easy. In order to facilitate the inclusion of functional usability features from the first steps of the development process and bring closer MDD methods to the holistic perspective, we propose a Usability Model. The Usability Model gathers conceptual primitives that represent functional usability features in a sufficiently abstract way so that the model can be used with different holistic MDD methods. This paper defines all the primitives that can be used to represent functional usability features. Moreover, we have defined a process to include the Usability Model in any MDD method without affecting its existing conceptual model. The proposal is based on model-to-model and model-to-code transformations. As proof of concept, we have applied our proposal to an existing MDD method called the OO-method and we have measured its efficiency. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A proposal for modelling usability in a holistic MDD method", "paper_id": "WOS:000335608500006"}