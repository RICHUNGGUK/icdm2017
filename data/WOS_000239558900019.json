{"auto_keywords": [{"score": 0.043015938347115645, "phrase": "session_types"}, {"score": 0.015719716506582538, "phrase": "object-oriented_languages"}, {"score": 0.010752328293983822, "phrase": "moose"}, {"score": 0.004387225575447685, "phrase": "local_computations"}, {"score": 0.003582629607918843, "phrase": "corba"}, {"score": 0.0028460640294160383, "phrase": "object-oriented_programming_style"}, {"score": 0.0024815011359381692, "phrase": "operational_semantics"}, {"score": 0.002454432810862053, "phrase": "type_system"}, {"score": 0.002388043660169452, "phrase": "type_inference_system"}, {"score": 0.0023362245884046176, "phrase": "subject_reduction"}, {"score": 0.002273025527678093, "phrase": "progress_property"}, {"score": 0.002163535133532765, "phrase": "well-typed_programs"}, {"score": 0.0021049977753042253, "phrase": "communication_points"}], "paper_keywords": [""], "paper_abstract": "A session takes place between two parties; after establishing a connection, each party interleaves local computations with communications (sending or receiving) with the other. Session types characterise such sessions in terms of the types of values communicated and the shape of protocols, and have been developed for the pi-calculus, CORBA interfaces, and functional languages. We study the incorporation of session types into object-oriented languages through MOOSE, a multi-threaded language with session types, thread spawning, iterative and higher-order sessions. Our design aims to consistently integrate the object-oriented programming style and sessions, and to be able to treat various case studies from the literature. We describe the design of MOOSE, its syntax, operational semantics and type system, and develop a type inference system. After proving subject reduction, we establish the progress property: once a communication has been established, well-typed programs will never starve at communication points.", "paper_title": "Session types for object-oriented languages", "paper_id": "WOS:000239558900019"}