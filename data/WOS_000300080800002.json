{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "random_testing"}, {"score": 0.0047292449487169345, "phrase": "haskell_programs"}, {"score": 0.004645059904681136, "phrase": "quickcheck"}, {"score": 0.0043619799095455415, "phrase": "haskell_programmer"}, {"score": 0.0038810583785936505, "phrase": "haskell_functions"}, {"score": 0.003611751858608048, "phrase": "random_input"}, {"score": 0.00333097896868937, "phrase": "custom_test_data_generators"}, {"score": 0.0031277316566463978, "phrase": "case_studies"}, {"score": 0.003044455555031339, "phrase": "whic_hthe_tool"}, {"score": 0.0025660347613972573, "phrase": "functional_programs"}, {"score": 0.002387758958649797, "phrase": "fine_grain"}, {"score": 0.0022218413146898887, "phrase": "separately_tested_components"}, {"score": 0.00216263228969761, "phrase": "random_testing_suffuces"}, {"score": 0.0021049977753042253, "phrase": "good_coverage"}], "paper_keywords": [""], "paper_abstract": "QuickCheck is a tool which aids the Haskell programmer in formulating and testing properties of programs. Properties are discribed as Haskell functions, and can be automatically tested on random input, but it is also possible to define custom test data generators. We present a number of case studies, in whic hthe tool was successfully used, and also point out some pitfalls to avoid. Random testing is especially suitable for functional programs because properties can be stated at a fine grain. When a function is built from separately tested components, then random testing suffuces to obtain good coverage of the definition under test.", "paper_title": "QuickCheck: a lightweight tool for random testing of Haskell programs", "paper_id": "WOS:000300080800002"}