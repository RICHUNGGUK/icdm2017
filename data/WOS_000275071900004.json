{"auto_keywords": [{"score": 0.0309632740533183, "phrase": "vertical_bar_p_vertical_bar"}, {"score": 0.015719716506582538, "phrase": "variable_length"}, {"score": 0.004690305164360866, "phrase": "simple_and_faster_solution"}, {"score": 0.004421471944783611, "phrase": "alphabet_sigma"}, {"score": 0.004378182273895574, "phrase": "pattern_p"}, {"score": 0.004021155959932886, "phrase": "sigma"}, {"score": 0.00376488621224566, "phrase": "text_t"}, {"score": 0.0031845067058084583, "phrase": "p_matches"}, {"score": 0.0031740669025323606, "phrase": "t._kucherov"}, {"score": 0.0031532895341013297, "phrase": "rusinowitch"}, {"score": 0.0027200305495826797, "phrase": "new_algorithm"}, {"score": 0.0026933542552712033, "phrase": "aho-corasick_automaton"}, {"score": 0.0026321198895843173, "phrase": "dynamic_marked_ancestor_problem"}, {"score": 0.0023384629381463054, "phrase": "total_number"}, {"score": 0.002225972846167256, "phrase": "distinct_keywords"}, {"score": 0.002146926767291475, "phrase": "previous_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Algorithms", " String matching", " Variable length don't cares"], "paper_abstract": "We present a simple and faster solution to the problem of matching a set of patterns with variable length don't cares. Given an alphabet Sigma, a pattern p is a word p(1)@p(2) ... @p(m), where pi is a string over E called a keyword and @ is not an element of Sigma is a symbol called a variable length don't care (VLDC) symbol. Pattern p matches a text t if t = u(0)p(1) u(1) ... u(m-1) p(m)u(m) for some u(0) ... u(m) is an element of Sigma*. The problem addressed in this paper is: given a set of patterns P and a text t, determine whether one of the patterns of P matches t. Kucherov and Rusinowitch (1997) [9] presented an algorithm that solves the problem in time 0 ((vertical bar t vertical bar + vertical bar P vertical bar) log vertical bar P vertical bar), where vertical bar P vertical bar is the total length of keywords in every pattern of P. We give a new algorithm based on Aho-Corasick automaton. It uses the solutions of Dynamic Marked Ancestor Problem of Chan et al. (2007) [5]. The algorithm takes O((vertical bar t vertical bar + parallel to P parallel to)log kappa/log log kappa) time, where parallel to P parallel to is the total number of keywords in every pattern of P, and kappa is the number of distinct keywords in P. The algorithm is faster and simpler than the previous approach. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "A faster algorithm for matching a set of patterns with variable length don't cares", "paper_id": "WOS:000275071900004"}