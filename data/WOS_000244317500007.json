{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "agile_philosophy"}, {"score": 0.004768649568826951, "phrase": "formal_specification_settings"}, {"score": 0.004722791767189843, "phrase": "software_development"}, {"score": 0.004543708337879809, "phrase": "knowledge_acquisition"}, {"score": 0.004456717971917794, "phrase": "human_beings"}, {"score": 0.004350308086118336, "phrase": "intended_behavior"}, {"score": 0.004287680323820891, "phrase": "desired_systems"}, {"score": 0.004125027493339274, "phrase": "considerable_amounts"}, {"score": 0.0035507457285983268, "phrase": "accumulated_knowledge"}, {"score": 0.0034159525504642656, "phrase": "agile_development_methodologies"}, {"score": 0.003056169480391946, "phrase": "formal_techniques"}, {"score": 0.0030267296900520217, "phrase": "better_reliability"}, {"score": 0.002954361295811154, "phrase": "existing_approaches"}, {"score": 0.002925899335792914, "phrase": "agile_formal_methods"}, {"score": 0.002828418443899226, "phrase": "recommended_practices"}, {"score": 0.002801166393333128, "phrase": "agile_development"}, {"score": 0.0027474453262607834, "phrase": "particular_contribution"}, {"score": 0.0027078298877475965, "phrase": "employed_formalisms"}, {"score": 0.0025181367444581993, "phrase": "evolutionary_development"}, {"score": 0.002469830206270585, "phrase": "two-fold_objective"}, {"score": 0.002252701813819903, "phrase": "frequent_and_numerous_changes"}, {"score": 0.002135812692862058, "phrase": "creative_development_tasks"}, {"score": 0.0021049977753042253, "phrase": "interactive_procedure"}], "paper_keywords": ["formal specification", " agile software development", " analysis-revision cycle"], "paper_abstract": "Software development can be seen as a process of knowledge acquisition, in which human beings progressively learn about the intended behavior of the desired systems. Thereby, development is subject to considerable amounts of uncertainty and variability, that make it impossible to proceed in a purely incremental fashion - at some points, the need always arises to reconsider part of the accumulated knowledge. With this problem in mind, agile development methodologies have been gaining popularity in recent years as a means to enhance productivity, and there have been attempts to supplement them with formal techniques for better reliability. However, the existing approaches to agile formal methods have practically limited themselves to adopting recommended practices of agile development, with no particular contribution from the employed formalisms. Compared to that, this paper advocates the use of formalisms intended for evolutionary development, with a two-fold objective: first, to exploit the knowledge acquired up to any given stage as a means to cope with frequent and numerous changes; and, second, to introduce support for the creative development tasks through an interactive procedure that helps taking steps forward.", "paper_title": "Bringing the agile philosophy to formal specification settings", "paper_id": "WOS:000244317500007"}