{"auto_keywords": [{"score": 0.0496463517482477, "phrase": "sequence_insertion"}, {"score": 0.03290544586986293, "phrase": "pre-large_concepts"}, {"score": 0.015719716506582538, "phrase": "discovered_sequential_patterns"}, {"score": 0.015439904543519832, "phrase": "dynamic_databases"}, {"score": 0.010295048933969079, "phrase": "fusp_tree"}, {"score": 0.004664352260912174, "phrase": "useful_information"}, {"score": 0.0045804107341714, "phrase": "large_databases"}, {"score": 0.004497973025639345, "phrase": "critical_issue"}, {"score": 0.004417012437860011, "phrase": "sequential_patterns"}, {"score": 0.004201774694043468, "phrase": "user_behaviors"}, {"score": 0.004126123386192962, "phrase": "basket_analysis"}, {"score": 0.004088807948906792, "phrase": "biological_data"}, {"score": 0.004051828608343507, "phrase": "web_click_streams"}, {"score": 0.004015182362035361, "phrase": "conventional_approaches"}, {"score": 0.003907212558276185, "phrase": "updated_database"}, {"score": 0.003871869188502677, "phrase": "batch_mode"}, {"score": 0.0034403745992576808, "phrase": "original_database"}, {"score": 0.0032429499567088113, "phrase": "small_sequence"}, {"score": 0.0030291453183733897, "phrase": "dynamic_data_mining"}, {"score": 0.00297454367746853, "phrase": "fup_concepts"}, {"score": 0.002816556934231128, "phrase": "fusp-tree_structure"}, {"score": 0.0026188490199688013, "phrase": "later_maintenance"}, {"score": 0.0025833500717948343, "phrase": "pre-large_sequences"}, {"score": 0.00245724480030654, "phrase": "small_and_vice_versa"}, {"score": 0.002391067964886602, "phrase": "inserted_sequences"}, {"score": 0.002203016940021265, "phrase": "proposed_incremental_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Sequential pattern mining", " Sequence insertion", " Pre-large concept", " Dynamic databases", " FUSP-tree structure"], "paper_abstract": "Mining useful information or knowledge from large databases has become a critical issue in recent years. Sequential patterns can be applied in many domains to analyze the customer or user behaviors, such as basket analysis, biological data or web click streams. Conventional approaches may re-mine the updated database in batch mode while sequences are changed. The fast updated sequential pattern (FUSP)-tree was proposed to update the discovered sequential patterns whether for sequence insertion or deletion. The original database is required to be rescanned if it is necessary to maintain the small sequence that was not kept in the FUSP tree. Pre-large concepts were proposed to maintain the dynamic data mining that outperforms the FUP concepts. In this paper, we adopted the pre-large concepts to the FUSP-tree structure for sequence insertion. A FUSP tree is built in advance to keep the large 1-sequences for later maintenance. The pre-large sequences are also kept to reduce the movement from large to small and vice versa. When the number of inserted sequences is smaller than the safety bound of the pre-large concepts, better results can be obtained by the proposed incremental algorithm for sequence insertion in dynamic databases. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Maintaining the discovered sequential patterns for sequence insertion in dynamic databases", "paper_id": "WOS:000341553200011"}