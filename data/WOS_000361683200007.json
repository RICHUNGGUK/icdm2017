{"auto_keywords": [{"score": 0.04955111375780366, "phrase": "dataflow_programs"}, {"score": 0.00481495049065317, "phrase": "hw_implementations"}, {"score": 0.004606023493393774, "phrase": "new_methodology"}, {"score": 0.004555217356295278, "phrase": "pipeline_synthesis"}, {"score": 0.004406121974246201, "phrase": "high-level_system_design"}, {"score": 0.004054299982508618, "phrase": "dependencies_relations"}, {"score": 0.0038998328617557013, "phrase": "pipeline_architecture_optimization"}, {"score": 0.003814212645832246, "phrase": "pipeline-stage_time"}, {"score": 0.003751228706861377, "phrase": "minimal_number"}, {"score": 0.00370981613076245, "phrase": "pipeline_stages"}, {"score": 0.0033570147767493746, "phrase": "total_pipeline_register_size"}, {"score": 0.0033015555065209865, "phrase": "obtained_\"optimal\"_pipeline_schedule"}, {"score": 0.003175676186323053, "phrase": "dataflow_program"}, {"score": 0.0030715948036518603, "phrase": "efficient_hardware_implementations"}, {"score": 0.0027333769432036905, "phrase": "first_algorithm"}, {"score": 0.0027031706928674092, "phrase": "global_optimum_solutions"}, {"score": 0.0026732973536990373, "phrase": "middle_size_designs"}, {"score": 0.002614534850703364, "phrase": "second_one"}, {"score": 0.002585638506308606, "phrase": "close-to-optimal_solutions"}, {"score": 0.00251478366610296, "phrase": "experimental_results"}, {"score": 0.002486987042061596, "phrase": "fpga_designs"}, {"score": 0.0024323098907299027, "phrase": "total_pipeline_register_size_gain"}, {"score": 0.002275369652100353, "phrase": "new_algorithms"}, {"score": 0.0022377394845878268, "phrase": "known_downward"}, {"score": 0.0022129983153880467, "phrase": "upward_direction_dataflow_graph_traversal_algorithms"}], "paper_keywords": ["Branch and bound algorithm", " data flow", " hardware design", " heuristic algorithm", " high-level synthesis", " optimization", " pipeline"], "paper_abstract": "This paper introduces a new methodology for pipeline synthesis with applications to data flow high-level system design. The pipeline synthesis is applied to dataflow programs whose operators are translated into graphs and dependencies relations that are then processed for the pipeline architecture optimization. For each pipeline-stage time, a minimal number of pipeline stages are first determined and then an optimal assignment of operators to stages is generated with the objective of minimizing the total pipeline register size. The obtained \"optimal\" pipeline schedule is automatically transformed back into a dataflow program that can be synthesized to efficient hardware implementations. Two new pipeline scheduling: \"least cost search branch and bound\" and a heuristic technique have been developed. The first algorithm yields global optimum solutions for middle size designs, whereas the second one generates close-to-optimal solutions for large designs. Experimental results on FPGA designs show that the total pipeline register size gain in a range up to 4.68x can be achieved. The new algorithms overcome the known downward and upward direction dataflow graph traversal algorithms concerning the amount of pipeline register size by up to 100% on average.", "paper_title": "Synthesis and Optimization of Pipelines for HW Implementations of Dataflow Programs", "paper_id": "WOS:000361683200007"}