{"auto_keywords": [{"score": 0.04051211375775462, "phrase": "partition_search"}, {"score": 0.00481495049065317, "phrase": "non-binary_constraint_satisfaction"}, {"score": 0.004589124394375718, "phrase": "unrestricted_constraint_satisfaction_use_reduction_search"}, {"score": 0.004050116768809519, "phrase": "backtrack_search_tree"}, {"score": 0.0036788184374592706, "phrase": "efficient_join_mechanism"}, {"score": 0.0034063576796640603, "phrase": "analytical_prediction"}, {"score": 0.00334144503360907, "phrase": "quantitative_performance"}, {"score": 0.0029203055813347874, "phrase": "experimental_comparison"}, {"score": 0.002864628676257225, "phrase": "reduction_search_algorithms"}, {"score": 0.0025034338848015187, "phrase": "available_reduction_search_algorithms"}, {"score": 0.0022302306304023602, "phrase": "bloom_filtering"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["constraint satisfaction", " non-binary constraints", " hash join", " multijoin", " decision diagram", " BDD", " consistency", " forward checking", " semijoin reduction", " dual search", " partition search", " random problems"], "paper_abstract": "Previous algorithms for unrestricted constraint satisfaction use reduction search, which inferentially removes values from domains in order to prune the backtrack search tree. This paper introduces partition search, which uses an efficient join mechanism instead of removing values from domains. Analytical prediction of quantitative performance of partition search appears to be intractable and evaluation therefore has to be by experimental comparison with reduction search algorithms that represent the state of the art. Instead of working only with available reduction search algorithms, this paper introduces enhancements such as semijoin reduction preprocessing using Bloom filtering. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Partition search for non-binary constraint satisfaction", "paper_id": "WOS:000248490400001"}