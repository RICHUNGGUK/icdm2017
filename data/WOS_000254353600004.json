{"auto_keywords": [{"score": 0.035931416370721475, "phrase": "natural_language_information"}, {"score": 0.00481495049065317, "phrase": "source_code"}, {"score": 0.0047152877145889656, "phrase": "useful_verb-direct_object_pairs"}, {"score": 0.004522080178250592, "phrase": "large_time"}, {"score": 0.004405348628112645, "phrase": "software_maintenance"}, {"score": 0.0042692243768616455, "phrase": "software_engineers"}, {"score": 0.004224786847720058, "phrase": "software_tools"}, {"score": 0.0038249462699142733, "phrase": "program_information"}, {"score": 0.003785115566529808, "phrase": "automated_support"}, {"score": 0.0036489343475053187, "phrase": "considerable_room"}, {"score": 0.003554661425339528, "phrase": "existing_software_tools"}, {"score": 0.0034992667091713813, "phrase": "authors'_previous_work"}, {"score": 0.003118486096035156, "phrase": "source_code_analysis"}, {"score": 0.0029131986574478072, "phrase": "object-oriented_code"}, {"score": 0.002678944072162297, "phrase": "extraction_analysis"}, {"score": 0.002476424729269258, "phrase": "precise_natural_language_clues"}, {"score": 0.002374735066990346, "phrase": "verb-direct_object"}, {"score": 0.002289180040240783, "phrase": "extraction_process"}, {"score": 0.0022299587520401747, "phrase": "extraction_rules"}, {"score": 0.0021951623041245897, "phrase": "empirical_evaluation"}, {"score": 0.002127186380459509, "phrase": "automatic_verb-do_pair_extractor"}, {"score": 0.0021051140664200304, "phrase": "java"}], "paper_keywords": [""], "paper_abstract": "The large time and effort devoted to software maintenance can be reduced by providing software engineers with software tools that automate tedious, error-prone tasks. However, despite the prevalence of tools such as IDEs, which automatically provide program information and automated support to the developer, there is considerable room for improvement in the existing software tools. The authors' previous work has demonstrated that using natural language information embedded in a program can significantly improve the effectiveness of various software maintenance tools. In particular, precise verb information from source code analysis is useful in improving tools for comprehension, maintenance and evolution of object-oriented code, by aiding in the discovery of scattered, action-oriented concerns. However, the precision of the extraction analysis can greatly affect the utility of the natural language information. The approach to automatically extracting precise natural language clues from source code in the form of verb-direct object (DO) pairs is described. The extraction process, the set of extraction rules and an empirical evaluation of the effectiveness of the automatic verb-DO pair extractor for Java source code are described.", "paper_title": "Analysing source code: looking for useful verb-direct object pairs in all the right places", "paper_id": "WOS:000254353600004"}