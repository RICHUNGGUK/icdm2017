{"auto_keywords": [{"score": 0.027777288723191747, "phrase": "mapreduce"}, {"score": 0.00481495049065317, "phrase": "based_location_selection_algorithm"}, {"score": 0.0046797114400479135, "phrase": "capacity_constraints"}, {"score": 0.004522406417999492, "phrase": "facility_objects"}, {"score": 0.0043953478557600565, "phrase": "client_objects"}, {"score": 0.00401216440036853, "phrase": "service_capacity"}, {"score": 0.003746779951069909, "phrase": "new_facility"}, {"score": 0.0035390378585554547, "phrase": "served_clients"}, {"score": 0.0031037644581516973, "phrase": "existing_algorithm"}, {"score": 0.003051073364818384, "phrase": "exponential_complexity"}, {"score": 0.0028653893877383188, "phrase": "large_data_sets"}, {"score": 0.002690975370565776, "phrase": "parallel_computing"}, {"score": 0.0025416235470290286, "phrase": "arc-based_method"}, {"score": 0.0024842242921857705, "phrase": "search_space"}, {"score": 0.0024560114164181765, "phrase": "disjoint_partitions"}, {"score": 0.002414290278501595, "phrase": "load_balancing"}, {"score": 0.0023463203637929466, "phrase": "dynamic_strategy"}, {"score": 0.0022287497627555895, "phrase": "estimated_load_difference"}, {"score": 0.0021291870676682406, "phrase": "extensive_experiments"}], "paper_keywords": ["Location selection", " Capacity constraints", " MapReduce"], "paper_abstract": "Given a set of facility objects and a set of client objects, where each client is served by her nearest facility and each facility is constrained by a service capacity, we study how to find all the locations on which if a new facility with a given capacity is established, the number of served clients is maximized (in other words, the utility of the facilities is maximized). This problem is intrinsically difficult. An existing algorithm with an exponential complexity is not scalable and cannot handle this problem on large data sets. Therefore, we propose to solve the problem through parallel computing, in particular using MapReduce. We propose an arc-based method to divide the search space into disjoint partitions. For load balancing, we propose a dynamic strategy to assign partitions to reducers so that the estimated load difference is within a threshold. We conduct extensive experiments using both real and synthetic data sets of large sizes. The results demonstrate the efficiency and scalability of the algorithm.", "paper_title": "MapReduce based location selection algorithm for utility maximization with capacity constraints", "paper_id": "WOS:000351513300005"}