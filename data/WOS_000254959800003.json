{"auto_keywords": [{"score": 0.0428614620458835, "phrase": "vliw_instructions"}, {"score": 0.025101750546645506, "phrase": "single_processor"}, {"score": 0.00481495049065317, "phrase": "trace-based_multi-threaded_architecture"}, {"score": 0.004151188559520802, "phrase": "multiple_streams"}, {"score": 0.003503497128638099, "phrase": "executed_instructions"}, {"score": 0.003334309053314909, "phrase": "subsequent_smt_execution"}, {"score": 0.003287551341742496, "phrase": "smt"}, {"score": 0.0030847461428168614, "phrase": "horizontal_and_vertical_waste"}, {"score": 0.0028740705307540317, "phrase": "dtsvliw._preliminary_experiments"}, {"score": 0.00281371157349156, "phrase": "extended_model"}, {"score": 0.002735194789581153, "phrase": "pe_utilization"}, {"score": 0.0022434880661725493, "phrase": "single_scalar_process"}, {"score": 0.0021049977753042253, "phrase": "main_memory"}], "paper_keywords": ["simultaneous multi-threading", " dynamic instruction scheduling", " wide issue architectures", " VLIW"], "paper_abstract": "Simulation results are presented using the hardware-implemented, trace-based dynamic instruction scheduler of our single process DTSVLIW architecture to schedule instructions from several processes into multiple streams of VLIW instructions for execution by a wide-issue, simultaneous multi-threading (SMT) execution engine. The scheduling process involves single instruction execution of each process, dynamically scheduling executed instructions into blocks of VLIW instructions cached for subsequent SMT execution: SMT provides a mechanism to reduce the impact of horizontal and vertical waste, and variable memory latencies, seen in the DTSVLIW. Preliminary experiments explore this extended model. Results achieve PE utilization of up to 87% on a 4-thread, 1-scalar, 8 PE design, with speed-ups of up to 6.3 that of a single processor. Noticeably it only needs a single scalar process to be scheduled at any time, with main memory fetches being 1-4% that of a single processor.", "paper_title": "Dynamic instruction scheduling in a trace-based multi-threaded architecture", "paper_id": "WOS:000254959800003"}