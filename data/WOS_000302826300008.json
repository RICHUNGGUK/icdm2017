{"auto_keywords": [{"score": 0.03829676863146927, "phrase": "satisfactory_streaming_quality"}, {"score": 0.00481495049065317, "phrase": "partial_participation"}, {"score": 0.004778258911940497, "phrase": "dynamic_window"}, {"score": 0.004477407179841716, "phrase": "streaming_systems"}, {"score": 0.004409404470207072, "phrase": "great_challenge"}, {"score": 0.004375789703278455, "phrase": "internet_service_providers"}, {"score": 0.0042928648367867835, "phrase": "huge_amount"}, {"score": 0.004147523799581407, "phrase": "different_users"}, {"score": 0.004007083686875716, "phrase": "different_window_sizes"}, {"score": 0.003961330917648707, "phrase": "different_resolution_demands"}, {"score": 0.003697538418750941, "phrase": "bandwidth_consumption"}, {"score": 0.003585986761045987, "phrase": "adaptive_streaming"}, {"score": 0.003545024951402821, "phrase": "peer's_streaming_rate"}, {"score": 0.0032710562699144814, "phrase": "small-window_users"}, {"score": 0.0031845067058084613, "phrase": "large-window_users"}, {"score": 0.0031240868074933078, "phrase": "general_design_goals"}, {"score": 0.0029951555610569225, "phrase": "optimization_problem"}, {"score": 0.0029270797740550973, "phrase": "simple_and_efficient_systems"}, {"score": 0.00290473242917264, "phrase": "dynamic_window_resizing"}, {"score": 0.002599177223533834, "phrase": "partial_forwarding_scheme"}, {"score": 0.002325689073229477, "phrase": "good_performance"}, {"score": 0.0023079225317714815, "phrase": "appropriate_parameter_settings"}, {"score": 0.0021539955106204354, "phrase": "specific_scenarios"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Peer-to-peer streaming", " Adaptive streaming", " User cooperation", " Dynamic window resizing"], "paper_abstract": "Widely deployed peer-to-peer (P2P) live streaming systems have become a great challenge for Internet Service Providers as they consume a huge amount of bandwidth. Inspired by the fact that different users in a P2P live streaming system may watch the same channel with different window sizes which have different resolution demands, we consider the design of a P2P live-video streaming system. The design utilizes this fact to reduce the bandwidth consumption but still achieve satisfactory streaming quality. We advocate adaptive streaming: a peer's streaming rate is commensurate with its window size. In order to maintain satisfactory streaming quality even in the case when users dynamically change their window sizes, small-window users contribute part of their bandwidth to help large-window users. We propose the general design goals, and then model and formulate the design as an optimization problem. In order to design simple and efficient systems for dynamic window resizing, we study two schemes which represent two different design philosophies: a well-balanced and more distributed method and a supernode-based method. Specifically, a scheme called partial forwarding scheme (PFS) and another scheme called partial participation scheme (PPS). Our packet-level simulation results show that both PFS and PPS are easy to implement, and achieve good performance with appropriate parameter settings. Further, we also discuss their advantages and disadvantages, and demonstrate which scheme should be used in specific scenarios. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Partial forwarding vs. partial participation for dynamic window resizing in P2P streaming", "paper_id": "WOS:000302826300008"}