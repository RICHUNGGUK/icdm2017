{"auto_keywords": [{"score": 0.046211774964878174, "phrase": "feature_model"}, {"score": 0.013310068086943943, "phrase": "reference_model"}, {"score": 0.009733405462606978, "phrase": "stakeholders'_preferences"}, {"score": 0.009598720596854026, "phrase": "non-functional_properties"}, {"score": 0.00481495049065317, "phrase": "automated_feature_model_configuration"}, {"score": 0.004764648644792333, "phrase": "non-functional_requirements"}, {"score": 0.004681971826924847, "phrase": "software_product_line"}, {"score": 0.0046007229963284345, "phrase": "software_systems"}, {"score": 0.004536735647938243, "phrase": "common_features"}, {"score": 0.0044736342427651185, "phrase": "significant_variabilities"}, {"score": 0.004380616732302083, "phrase": "variability_modeling_artifact"}, {"score": 0.0042895249439546725, "phrase": "software_products"}, {"score": 0.004215057618794356, "phrase": "variability_relationships"}, {"score": 0.0040133278382101885, "phrase": "domain_engineering_lifecycle"}, {"score": 0.003971367134498762, "phrase": "concrete_product"}, {"score": 0.003848088904418221, "phrase": "variation_points"}, {"score": 0.00355009076716969, "phrase": "feature_model_configuration_problem"}, {"score": 0.0034519236629123903, "phrase": "suitable_features"}, {"score": 0.003151184191185831, "phrase": "proposed_framework"}, {"score": 0.0031291625125786293, "phrase": "analytical_hierarchy_process"}, {"score": 0.003107299566577583, "phrase": "ahp"}, {"score": 0.0030747771905143273, "phrase": "fuzzy_cognitive_maps"}, {"score": 0.0030002172602367682, "phrase": "non-functional_properties_weights"}, {"score": 0.0028866770996648057, "phrase": "hierarchical_task_network"}, {"score": 0.002796975007007085, "phrase": "optimal_feature_model_configuration"}, {"score": 0.002691105581191125, "phrase": "feature_model_configuration"}, {"score": 0.002662932198158107, "phrase": "positive_or_negative_impacts"}, {"score": 0.002562123444678208, "phrase": "nonfunctional_interdependencies"}, {"score": 0.0024824815904738685, "phrase": "earlier_work"}, {"score": 0.002371783323468861, "phrase": "nonfunctional_properties"}, {"score": 0.0023387234705715154, "phrase": "novel_tooling_architecture"}, {"score": 0.002306123367679187, "phrase": "visualization_and_interaction_techniques"}, {"score": 0.002281971169774711, "phrase": "functional_and_non-functional_aspects"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software product lines", " Feature model configuration", " Stakeholders' preferences", " Non-functional interdependencies"], "paper_abstract": "Context: A software product line is a family of software systems that share some common features but also have significant variabilities. A feature model is a variability modeling artifact, which represents differences among software products with respect to the variability relationships among their features. Having a feature model along with a reference model developed in the domain engineering lifecycle, a concrete product of the family is derived by binding the variation points in the feature model (called configuration process) and by instantiating the reference model. Objective: In this work we address the feature model configuration problem and propose a framework to automatically select suitable features that satisfy both the functional and non-functional preferences and constraints of stakeholders. Additionally, interdependencies between various non-functional properties are taken into account in the framework. Method: The proposed framework combines Analytical Hierarchy Process (AHP) and Fuzzy Cognitive Maps (FCM) to compute the non-functional properties weights based on stakeholders' preferences and interdependencies between non-functional properties. Afterwards, Hierarchical Task Network (HTN) planning is applied to find the optimal feature model configuration. Result: Our approach improves state-of-art of feature model configuration by considering positive or negative impacts of the features on non-functional properties, the stakeholders' preferences, and nonfunctional interdependencies. The approach presented in this paper extends earlier work presented in [1] from several distinct perspectives including mechanisms handling interdependencies between nonfunctional properties, proposing a novel tooling architecture, and offering visualization and interaction techniques for representing functional and non-functional aspects of feature models. Conclusion: our experiments show the scalability of our configuration approach when considering both functional and non-functional requirements of stakeholders. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Toward automated feature model configuration with optimizing non-functional requirements", "paper_id": "WOS:000337783000007"}