{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "tree-processing_programs"}, {"score": 0.004297795905522757, "phrase": "new_method"}, {"score": 0.003997891221012094, "phrase": "tree-processing_functional_program"}, {"score": 0.0036427316134070007, "phrase": "verification_problem"}, {"score": 0.0035681790580031998, "phrase": "multiple_verification_problems"}, {"score": 0.0034951469511975346, "phrase": "higher-order_multi-tree_transducers"}, {"score": 0.0032510690712452147, "phrase": "higher-order_recursion_schemes"}, {"score": 0.0030239842475439814, "phrase": "previous_methods"}, {"score": 0.002841971477743441, "phrase": "arbitrary_higher-order_functional_programs"}, {"score": 0.0025361866386341796, "phrase": "intermediate_data_structures"}, {"score": 0.0021049977753042253, "phrase": "prototype_verifier"}], "paper_keywords": [""], "paper_abstract": "We propose a new method to verify that a higher-order, tree-processing functional program conforms to an input/output specification. Our method reduces the verification problem to multiple verification problems for higher-order multi-tree transducers, which are then transformed into higher-order recursion schemes and model-checked. Unlike previous methods, our new method can deal with arbitrary higher-order functional programs manipulating algebraic data structures, as long as certain invariants on intermediate data structures are provided by a programmer. We have proved the soundness of the method and implemented a prototype verifier.", "paper_title": "Verification of tree-processing programs via higher-order mode checking", "paper_id": "WOS:000352509400004"}