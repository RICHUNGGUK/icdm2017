{"auto_keywords": [{"score": 0.049517389162701646, "phrase": "requirements_engineering"}, {"score": 0.00481495049065317, "phrase": "operational_requirements_elaboration"}, {"score": 0.004620093797504386, "phrase": "high-level_stakeholder_goals"}, {"score": 0.004485735417293941, "phrase": "operational_system_requirements"}, {"score": 0.004406994912939125, "phrase": "key_difficulty"}, {"score": 0.004178935413340453, "phrase": "intuitive_narrative-style_scenarios"}, {"score": 0.004129873531628877, "phrase": "desirable_and_undesirable_system_behaviour"}, {"score": 0.00405735420159564, "phrase": "goal_refinement_methods"}, {"score": 0.003735349093835257, "phrase": "temporal_logic"}, {"score": 0.0036697319652557363, "phrase": "actual_software_engineering_practice"}, {"score": 0.003562912424153324, "phrase": "formal_requirements"}, {"score": 0.0035210572541244664, "phrase": "scenario-based_descriptions"}, {"score": 0.003459191419478298, "phrase": "tedious_and_error-prone_process"}, {"score": 0.0033584796908285894, "phrase": "automated_tool_support"}, {"score": 0.0032414759269196493, "phrase": "inductive_logic_programming_method"}, {"score": 0.0031845067058084583, "phrase": "operational_requirements"}, {"score": 0.003091767402370757, "phrase": "example_scenarios"}, {"score": 0.0030374213037172803, "phrase": "initial_but_incomplete_requirements_specification"}, {"score": 0.0027796495180095657, "phrase": "event-based_logic_programming_formalism"}, {"score": 0.0027146742941153443, "phrase": "non-monotonic_reasoning_system"}, {"score": 0.0023834640793589435, "phrase": "desirable_scenarios"}, {"score": 0.0023277282036119106, "phrase": "undesirable_ones"}, {"score": 0.002286781334850213, "phrase": "learning_task"}, {"score": 0.002246553137021003, "phrase": "novel_application"}, {"score": 0.0022201273900989416, "phrase": "logic_programming"}, {"score": 0.0021049977753042253, "phrase": "non-monotonic_learning"}], "paper_keywords": ["Inductive logic programming", " Abductive reasoning", " Goal-oriented requirements engineering", " Scenario-based specification", " Linear temporal logic", " Event Calculus"], "paper_abstract": "Requirements Engineering involves the elicitation of high-level stakeholder goals and their refinement into operational system requirements. A key difficulty is that stakeholders typically convey their goals indirectly through intuitive narrative-style scenarios of desirable and undesirable system behaviour, whereas goal refinement methods usually require goals to be expressed declaratively using, for instance, a temporal logic. In actual software engineering practice, the extraction of formal requirements from scenario-based descriptions is a tedious and error-prone process that would benefit from automated tool support. This paper presents an Inductive Logic Programming method for inferring operational requirements from a set of example scenarios and an initial but incomplete requirements specification. The approach is based on translating the specification and the scenarios into an event-based logic programming formalism and using a non-monotonic reasoning system, called eXtended Hybrid Abductive Inductive Learning, to automatically infer a set of event pre-conditions and trigger-conditions that cover all desirable scenarios and reject all undesirable ones. This learning task is a novel application of logic programming to requirements engineering that also demonstrates the utility of non-monotonic learning capturing pre-conditions and trigger-conditions. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Using abduction and induction for operational requirements elaboration", "paper_id": "WOS:000270263800003"}