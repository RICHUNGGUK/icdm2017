{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_units"}, {"score": 0.004595356579614969, "phrase": "modern_embedded_processors"}, {"score": 0.00453144352814823, "phrase": "different_functions"}, {"score": 0.0039024014688338964, "phrase": "different_instructions"}, {"score": 0.0034559594248079807, "phrase": "major_heating_contribution"}, {"score": 0.003407839062159497, "phrase": "special_structure"}, {"score": 0.0033603864623013733, "phrase": "active_functional_unit"}, {"score": 0.0032219438233946312, "phrase": "severe_damage"}, {"score": 0.002948066398723126, "phrase": "heavy-loading_fus"}, {"score": 0.0029206231857112305, "phrase": "light-loading_fus"}, {"score": 0.002684819249720834, "phrase": "thermal_model"}, {"score": 0.0026474076254702525, "phrase": "exchangeable_fus"}, {"score": 0.002598333022293788, "phrase": "temperature_impact"}, {"score": 0.0025028892126605124, "phrase": "loading_shifting"}, {"score": 0.00237733844863506, "phrase": "limited_performance_loss"}, {"score": 0.0023551955270737215, "phrase": "hardware_cost"}, {"score": 0.0022161977759646693, "phrase": "small_cost"}, {"score": 0.002195552442011313, "phrase": "performance_degradation"}, {"score": 0.0021750990136123367, "phrase": "code_expansion"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["thermal-aware", " functional units", " code transformation", " cost model", " transformation type"], "paper_abstract": "Various functional units (FUs) have been designed in modern embedded processors to perform different functions when running an application. Traditionally, compilers did not take this characteristic into account to reduce the temperature of a processor during execution. For many applications, the occurrences of different instructions are not the same after they are compiled. As a consequence, the temperature of the processor is very high, arising from the major heating contribution of the special structure of the active functional unit, and thus, the system will suffer severe damage. Consequently, to remedy this hurdle, this paper provides a solution by shifting the loading from heavy-loading FUs to light-loading FUs. Our approach first identifies all the FUs that can exchange the loading among themselves and then presents a thermal model for these exchangeable FUs to estimate the temperature impact on shifting loading. Finally, the loading shifting has been performed by transforming code under the consideration of limited performance loss without hardware cost. The result shows that our approach can reduce the temperature to a small cost of performance degradation and code expansion. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Thermal-aware code transformation across functional units", "paper_id": "WOS:000350142600005"}