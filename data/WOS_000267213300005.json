{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "maximal_exact_matches"}, {"score": 0.0047689174754929195, "phrase": "large_sequence_datasets"}, {"score": 0.004723322467153553, "phrase": "sparse_suffix_arrays"}, {"score": 0.004416079619543104, "phrase": "existing_algorithms"}, {"score": 0.0043738432231020885, "phrase": "sequence_analysis"}, {"score": 0.004069631519385246, "phrase": "high-throughput_sequencing"}, {"score": 0.003934970057482768, "phrase": "sequence_data"}, {"score": 0.003696550794743764, "phrase": "genome_assembly"}, {"score": 0.0035914198812657897, "phrase": "anchor_points"}, {"score": 0.0035570425396761122, "phrase": "genome-genome_comparisons"}, {"score": 0.0034392837410790293, "phrase": "new_algorithm"}, {"score": 0.003293570937654716, "phrase": "sparse_suffix_array"}, {"score": 0.003123808471618783, "phrase": "k-th_position"}, {"score": 0.0029914213495838998, "phrase": "full_text_index"}, {"score": 0.002850875630787708, "phrase": "sparse_sa"}, {"score": 0.002730023736069673, "phrase": "sparse_index"}, {"score": 0.0025892330566358503, "phrase": "full_text_index_algorithm"}, {"score": 0.0024914105981393127, "phrase": "indexed_suffixes"}, {"score": 0.00242047093248845, "phrase": "minimum_length"}, {"score": 0.0023857628672924697, "phrase": "mem."}, {"score": 0.002340250894008014, "phrase": "partial_matches"}, {"score": 0.0023178219772486868, "phrase": "additional_text_scanning"}, {"score": 0.0022956075241520064, "phrase": "indexed_positions"}, {"score": 0.002219516542316085, "phrase": "extra_computation"}, {"score": 0.0021876814398268775, "phrase": "reduced_memory_usage"}, {"score": 0.0021049977753042253, "phrase": "significantly_longer_sequences"}], "paper_keywords": [""], "paper_abstract": "Motivation: High-throughput sequencing technologies place ever increasing demands on existing algorithms for sequence analysis. Algorithms for computing maximal exact matches (MEMs) between sequences appear in two contexts where high-throughput sequencing will vastly increase the volume of sequence data: (i) seeding alignments of high-throughput reads for genome assembly and (ii) designating anchor points for genome-genome comparisons. Results: We introduce a new algorithm for finding MEMs. The algorithm leverages a sparse suffix array (SA), a text index that stores every K-th position of the text. In contrast to a full text index that stores every position of the text, a sparse SA occupies much less memory. Even though we use a sparse index, the output of our algorithm is the same as a full text index algorithm as long as the space between the indexed suffixes is not greater than a minimum length of a MEM. By relying on partial matches and additional text scanning between indexed positions, the algorithm trades memory for extra computation. The reduced memory usage makes it possible to determine MEMs between significantly longer sequences.", "paper_title": "A practical algorithm for finding maximal exact matches in large sequence datasets using sparse suffix arrays", "paper_id": "WOS:000267213300005"}