{"auto_keywords": [{"score": 0.04760688643890386, "phrase": "type_system"}, {"score": 0.014455254376273548, "phrase": "safe_resource_deallocation"}, {"score": 0.012219592826017341, "phrase": "memory_cells"}, {"score": 0.00481495049065317, "phrase": "shared-memory_concurrency"}, {"score": 0.004330941610682453, "phrase": "shared-memory_concurrent_programs"}, {"score": 0.004151188559520802, "phrase": "previous_type_system"}, {"score": 0.004021267064832957, "phrase": "fractional_ownerships"}, {"score": 0.0022434880661725493, "phrase": "type_inference_algorithm"}, {"score": 0.0021049977753042253, "phrase": "prototype_implementation"}], "paper_keywords": ["Theory", " Verification", " fork/join parallelism", " fractional ownerships", " memory leak", " race freedom", " safe resource deallocation", " shared-memory concurrency", " SMT solver", " type inference", " type systems"], "paper_abstract": "We propose a type system to guarantee safe resource deallocation for shared-memory concurrent programs by extending the previous type system based on fractional ownerships. Here, safe resource deallocation means that memory cells, locks, or threads are not left allocated when a program terminates. Our framework supports (1) fork/join parallelism, (2) synchronization with locks, and (3) dynamically allocated memory cells and locks. The type system is proved to be sound. We also provide a type inference algorithm for the type system and a prototype implementation of the algorithm.", "paper_title": "Type-Based Safe Resource Deallocation for Shared-Memory Concurrency", "paper_id": "WOS:000311296200001"}