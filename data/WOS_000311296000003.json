{"auto_keywords": [{"score": 0.03556417972834716, "phrase": "tycon_library"}, {"score": 0.00481495049065317, "phrase": "monad_transformers"}, {"score": 0.00452043800760441, "phrase": "constructor_classes"}, {"score": 0.004392565073466714, "phrase": "monad_class"}, {"score": 0.004317576641196539, "phrase": "polymorphic_operations"}, {"score": 0.004243862930012258, "phrase": "polymorphic_axioms"}, {"score": 0.004030157055463817, "phrase": "first-class_type_constructors"}, {"score": 0.0039841418890102925, "phrase": "first-class_polymorphism"}, {"score": 0.003916098498242888, "phrase": "type_quantification"}, {"score": 0.0037402558657576124, "phrase": "domain-theoretic_model"}, {"score": 0.0036763623220059933, "phrase": "type_system"}, {"score": 0.003613556291453534, "phrase": "universal_domain"}, {"score": 0.0033152062780180073, "phrase": "isabelle_theorem_prover"}, {"score": 0.0032028587883593702, "phrase": "holcf_library"}, {"score": 0.003166259444961177, "phrase": "domain_theory"}, {"score": 0.0025892330566358503, "phrase": "error_transformer"}, {"score": 0.0025449518236394103, "phrase": "writer_transformer"}, {"score": 0.002487083025913648, "phrase": "resumption_transformer"}, {"score": 0.002416589459425828, "phrase": "writer_transformers"}, {"score": 0.0023346234464901978, "phrase": "monad_laws"}, {"score": 0.002255431275670053, "phrase": "datatype_invariants"}, {"score": 0.0021539955106204354, "phrase": "valid_monads"}, {"score": 0.0021049977753042253, "phrase": "abstract_datatypes"}], "paper_keywords": ["denotational semantics", " monads", " polymorphism", " theorem proving", " type classes"], "paper_abstract": "We present techniques for reasoning about constructor classes that (like the monad class) fix polymorphic operations and assert polymorphic axioms. We do not require a logic with first-class type constructors, first-class polymorphism, or type quantification; instead, we rely on a domain-theoretic model of the type system in a universal domain to provide these features. These ideas are implemented in the Tycon library for the Isabelle theorem prover, which builds on the HOLCF library of domain theory. The Tycon library provides various axiomatic type constructor classes, including functors and monads. It also provides automation for instantiating those classes, and for defining further subclasses. We use the Tycon library to formalize three Haskell monad transformers: the error transformer, the writer transformer, and the resumption transformer. The error and writer transformers do not universally preserve the monad laws; however, we establish datatype invariants for each, showing that they are valid monads when viewed as abstract datatypes.", "paper_title": "Formal Verification of Monad Transformers (Abstract)", "paper_id": "WOS:000311296000003"}