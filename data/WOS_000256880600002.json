{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_patterns"}, {"score": 0.004525629293824217, "phrase": "software_components"}, {"score": 0.004253618550301311, "phrase": "tinyos_sensor_network_operating_system"}, {"score": 0.003757480190200645, "phrase": "traditional_software_design_patterns"}, {"score": 0.0033190180867511605, "phrase": "sensor_networks"}, {"score": 0.0031193028729331667, "phrase": "tinyos's_focus"}, {"score": 0.0029928611380840757, "phrase": "static_allocation"}, {"score": 0.0028715299874549245, "phrase": "whole-program_composition"}, {"score": 0.0025892330566358503, "phrase": "nesc"}], "paper_keywords": ["languages", " design", " design patterns", " embedded systems", " nesC", " TinyOS"], "paper_abstract": "We present design patterns used by software components in the TinyOS sensor network operating system. They differ significantly from traditional software design patterns because of the constraints of sensor networks and to TinyOS's focus on static allocation and whole-program composition. We describe how nesC has evolved to support these design patterns by including a few simple language primitives and optimizations.", "paper_title": "Software design patterns for TinyOS", "paper_id": "WOS:000256880600002"}