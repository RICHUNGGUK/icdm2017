{"auto_keywords": [{"score": 0.02906764346670551, "phrase": "ontological_approach"}, {"score": 0.010612387000973441, "phrase": "software_systems"}, {"score": 0.008306223235312002, "phrase": "software_developers"}, {"score": 0.004562027986828209, "phrase": "required_software"}, {"score": 0.0045160988337296605, "phrase": "existing_software_systems"}, {"score": 0.004485735417293941, "phrase": "software_adaptation_decisions"}, {"score": 0.0042500322609733574, "phrase": "users'_requirements"}, {"score": 0.003700833742881285, "phrase": "effort_estimation"}, {"score": 0.0036388906120614012, "phrase": "function_points"}, {"score": 0.0035539019235553897, "phrase": "selecting_systems"}, {"score": 0.0033898129842622536, "phrase": "software_functionality"}, {"score": 0.0033669963955215427, "phrase": "users'_point"}, {"score": 0.0032883370175509053, "phrase": "ontological_concepts"}, {"score": 0.0032115093493071366, "phrase": "system_behaviors"}, {"score": 0.0030220695120265974, "phrase": "exploratory_experiment"}, {"score": 0.0029614320534324104, "phrase": "software_engineering_students"}, {"score": 0.002694112801983161, "phrase": "short_training"}, {"score": 0.0026134084008199933, "phrase": "expert_software_developers"}, {"score": 0.0025095411819626152, "phrase": "function_point_concepts"}, {"score": 0.0024591621759745648, "phrase": "statistically_significant_differences"}, {"score": 0.002199582070223336, "phrase": "function_point-based_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software comparison", " Variability management", " Ontologies", " Requirements engineering", " Development effort estimation", " Function point analysis"], "paper_abstract": "Organizations can reduce the costs and enhance the quality of required software by adapting existing software systems. Software adaptation decisions often involve comparing alternatives on two criteria: (1) how well a system meets users' requirements and (2) the effort required for adapting the system. These criteria reflect two points of view of users and of developers. Common to both views is the notion of functionality, which software developers have traditionally used for effort estimation utilizing concepts such as function points. However, users involved in selecting systems are not necessarily familiar with such concepts. We propose an approach for comparing software functionality from users' point of view. The approach employs ontological concepts to define functionality in terms of system behaviors. To evaluate whether or not the approach is also usable by software developers, we conducted an exploratory experiment. In the experiment, software engineering students ranked descriptions of software systems on the amount of changes needed to adapt the systems to given requirements. The results demonstrated that the ontological approach was usable after a short training and provided results comparable to ranking done by expert software developers. We also compared the ontological approach to a method which employed function point concepts. The results showed no statistically significant differences in performance, but there seemed to be an advantage to the ontological approach for cases that were difficult to analyze. Moreover, it took less time to apply the ontological approach than the function point-based approach, and the difference was statistically significant. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Comparing functionality of software systems: An ontological approach", "paper_id": "WOS:000326254900018"}