{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "meta-case_workbenches"}, {"score": 0.00471228691115201, "phrase": "visual_language_generators"}, {"score": 0.004023120753104693, "phrase": "visual_language_generation_systems"}, {"score": 0.003965727702999601, "phrase": "uml"}, {"score": 0.0034343965063429447, "phrase": "single_visual_languages"}, {"score": 0.0032657663494863516, "phrase": "meg"}, {"score": 0.0030609320300175953, "phrase": "abstract_syntax"}, {"score": 0.002995554770117301, "phrase": "visual_language"}, {"score": 0.002910545717767559, "phrase": "uml_class_diagrams"}, {"score": 0.002727967804120323, "phrase": "grammar_specification"}, {"score": 0.0025021765811679446, "phrase": "target_workbench"}, {"score": 0.0024136908511423875, "phrase": "process_model"}, {"score": 0.0023116191163488824, "phrase": "suitable_activity_diagram"}, {"score": 0.0022298571016688335, "phrase": "supplied_specification"}, {"score": 0.002166530105679438, "phrase": "customized_workbench"}, {"score": 0.0021049977753042253, "phrase": "required_environments"}], "paper_keywords": ["meta-CASE tools", " metamodeling techniques", " visual languages", " visual programming environment generators"], "paper_abstract": "In this paper, we propose an approach for the construction of meta-CASE workbenches, which suitably integrates the technology of visual language generation systems, UML metamodeling, and interoperability techniques based on the GXL (Graph eXchange Language) format. The proposed system consists of two major components. Environments for single visual languages are generated by using the Modeling Language Environment Generator (MEG), which follows a metamodel/grammar-approach. The abstract syntax of a visual language is defined by UML class diagrams, which serve as a base for the grammar specification of the language. The Workbench Generator (WoG) allows designers to specify the target workbench by means of a process model given in terms of a suitable activity diagram. Starting from the supplied specification WoG generates the customized workbench by integrating the required environments.", "paper_title": "Constructing meta-CASE workbenches by exploiting visual language generators", "paper_id": "WOS:000236848300002"}