{"auto_keywords": [{"score": 0.03843856552198327, "phrase": "search_space"}, {"score": 0.00481495049065317, "phrase": "search_with_a_best-first-search_strategy._backtrack-style_exhaustive_search_algorithms"}, {"score": 0.004752635007730443, "phrase": "np"}, {"score": 0.004266501496765747, "phrase": "\"fortunate\"_branching_decisions"}, {"score": 0.00398916666053909, "phrase": "\"unfortunate\"_decisions"}, {"score": 0.00344062888674746, "phrase": "frequent_restarting"}, {"score": 0.0023923066544220277, "phrase": "backtrack_search_algorithm"}, {"score": 0.0021770860717929192, "phrase": "hard_solvable_problem_instances"}, {"score": 0.0021335427588412077, "phrase": "new_approach"}, {"score": 0.0021049977753042253, "phrase": "significantly_higher_speed-up"}], "paper_keywords": ["best-first search", " backtrack", " branch-and-bound", " constraint satisfaction problem", " frequent restarting"], "paper_abstract": "Backtrack-style exhaustive search algorithms for NP-hard problems tend to have large variance in their runtime. This is because \"fortunate\" branching decisions can lead to finding a solution quickly, whereas \"unfortunate\" decisions in another run can lead the algorithm to a region of the search space with no solutions. In the literature, frequent restarting has been suggested as a means to overcome this problem. In this paper, we propose a more sophisticated approach: a best-first-search heuristic to quickly move between parts of the search space, always concentrating on the most promising region. We describe how this idea can be efficiently incorporated into a backtrack search algorithm, without sacrificing optimality. Moreover, we demonstrate empirically that, for hard solvable problem instances, the new approach provides significantly higher speed-up than frequent restarting.", "paper_title": "ACCELERATING BACKTRACK SEARCH WITH A BEST-FIRST-SEARCH STRATEGY", "paper_id": "WOS:000348144200015"}