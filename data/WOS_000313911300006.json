{"auto_keywords": [{"score": 0.04247114644429954, "phrase": "functional_enumeration"}, {"score": 0.00481495049065317, "phrase": "algebraic_types"}, {"score": 0.004525088883501587, "phrase": "bijective_function"}, {"score": 0.004272969980602508, "phrase": "\"functional_enumerations"}, {"score": 0.004212157020917929, "phrase": "efficiently_computable_such_bijections"}, {"score": 0.003529364798514874, "phrase": "generic_enumeration"}, {"score": 0.003087017178815267, "phrase": "haskell_library"}, {"score": 0.0029569247903654477, "phrase": "source_code"}, {"score": 0.002873247913129334, "phrase": "efficient_\"random_access"}, {"score": 0.00283229915062791, "phrase": "enumerated_values"}, {"score": 0.002791932344920906, "phrase": "primary_application"}, {"score": 0.00276534038425712, "phrase": "property-based_testing"}, {"score": 0.002648768009464535, "phrase": "random_sampling"}, {"score": 0.002549269480908849, "phrase": "exhaustive_enumeration"}, {"score": 0.002372649454733251, "phrase": "best_option"}, {"score": 0.002327648608736437, "phrase": "test_cases"}, {"score": 0.00230546852838578, "phrase": "large_groups"}, {"score": 0.0022834993174767016, "phrase": "mutually_recursive_syntax_tree_types"}, {"score": 0.0022401855403251653, "phrase": "case_study"}, {"score": 0.0021354538918029286, "phrase": "template_haskell_library"}], "paper_keywords": ["Enumeration", " Property-based testing", " Memoisation"], "paper_abstract": "In mathematics, an enumeration of a set S is a bijective function from (an initial segment of) the natural numbers to S. We define \"functional enumerations\" as efficiently computable such bijections. This paper describes a theory of functional enumeration and provides an algebra of enumerations closed under sums, products, guarded recursion and bijections. We partition each enumerated set into numbered, finite subsets. We provide a generic enumeration such that the number of each part corresponds to the size of its values (measured in the number of constructors). We implement our ideas in a Haskell library called testing-feat, and make the source code freely available. Feat provides efficient \"random access\" to enumerated values. The primary application is property-based testing, where it is used to define both random sampling (for example QuickCheck generators) and exhaustive enumeration (in the style of SmallCheck). We claim that functional enumeration is the best option for automatically generating test cases from large groups of mutually recursive syntax tree types. As a case study we use Feat to test the pretty-printer of the Template Haskell library (uncovering several bugs).", "paper_title": "Feat: Functional Enumeration of Algebraic Types", "paper_id": "WOS:000313911300006"}