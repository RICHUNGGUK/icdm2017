{"auto_keywords": [{"score": 0.04725332734585432, "phrase": "java"}, {"score": 0.020498343291171218, "phrase": "null"}, {"score": 0.00481495049065317, "phrase": "null_dereference_verification"}, {"score": 0.0047761092701293474, "phrase": "over-approximated_weakest_pre-conditions_analysis"}, {"score": 0.0041112665381266315, "phrase": "abstract_lattice"}, {"score": 0.003760527969356061, "phrase": "initial_state"}, {"score": 0.0035965032173588753, "phrase": "simplified_domain"}, {"score": 0.0035100601949451028, "phrase": "integer_arithmetic"}, {"score": 0.003439608110599787, "phrase": "unbounded_access_paths"}, {"score": 0.003398015125667192, "phrase": "recursive_data_structures"}, {"score": 0.0031845067058084583, "phrase": "strong_updates"}, {"score": 0.003120568497402472, "phrase": "limited_notion"}, {"score": 0.0030953529970646626, "phrase": "path_sensitivity"}, {"score": 0.002877361619893651, "phrase": "true_conjuncts"}, {"score": 0.002547535564922075, "phrase": "ten_real_java_programs"}, {"score": 0.002456148932305311, "phrase": "design_features"}, {"score": 0.0021049977753042253, "phrase": "desktop_development_environments"}], "paper_keywords": ["Algorithms", " Experimentation", " Verification"], "paper_abstract": "Null dereferences are a bane of programming in languages such as Java. In this paper we propose a sound, demand-driven, inter-procedurally context-sensitive dataflow analysis technique to verify a given dereference as safe or potentially unsafe. Our analysis uses an abstract lattice of formulas to find a pre-condition at the entry of the program such that a null-dereference can occur only if the initial state of the program satisfies this pre-condition. We use a simplified domain of formulas, abstracting out integer arithmetic, as well as unbounded access paths due to recursive data structures. For the sake of precision we model aliasing relationships explicitly in our abstract lattice, enable strong updates, and use a limited notion of path sensitivity. For the sake of scalability we prune formulas continually as they get propagated, reducing to true conjuncts that are less likely to be useful in validating or invalidating the formula. We have implemented our approach, and present an evaluation of it on a set of ten real Java programs. Our results show that the set of design features we have incorporated enable the analysis to (a) explore long, inter-procedural paths to verify each dereference, with (b) reasonable accuracy, and (c) very quick response time per dereference, making it suitable for use in desktop development environments.", "paper_title": "Null Dereference Verification via Over-approximated Weakest Pre-conditions Analysis", "paper_id": "WOS:000298294500060"}