{"auto_keywords": [{"score": 0.02322730111336097, "phrase": "lazy_verification"}, {"score": 0.018883107205717033, "phrase": "public_keys"}, {"score": 0.013429884246886565, "phrase": "bgpsec"}, {"score": 0.010557013365943578, "phrase": "trapdoor_permutations"}, {"score": 0.004764542405129454, "phrase": "sequential_aggregate_signature_schemes"}, {"score": 0.004568108391981922, "phrase": "lower_total_cost"}, {"score": 0.004496542293425754, "phrase": "individual_signatures"}, {"score": 0.004437757268029164, "phrase": "sequential_aggregate_signature_scheme"}, {"score": 0.004311109608629196, "phrase": "prior_such_proposals"}, {"score": 0.003519864834185558, "phrase": "load_permits"}, {"score": 0.003492155652400838, "phrase": "necessary_public_keys"}, {"score": 0.0030772505522663612, "phrase": "technical_analysis"}, {"score": 0.002997203022420553, "phrase": "random_oracle_model"}, {"score": 0.0027766151973320735, "phrase": "target_application"}, {"score": 0.0027258422018680453, "phrase": "secure_bgp"}, {"score": 0.002661920843320953, "phrase": "global_internet_routing_system"}, {"score": 0.0026270572353632297, "phrase": "particular_need"}, {"score": 0.0023085990127201784, "phrase": "nonaggregate_rsa"}, {"score": 0.002219040041886641, "phrase": "faster_verification"}, {"score": 0.002207363758847308, "phrase": "nonaggregate_ecdsa"}, {"score": 0.0021899645048091138, "phrase": "ecdsa"}, {"score": 0.002178440554808121, "phrase": "shorter_signatures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Aggregate signatures", " RSA", " Lazy verification", " BGP"], "paper_abstract": "Sequential aggregate signature schemes allow n signers, in order, to sign a message each, at a lower total cost than the cost of n individual signatures. We present a sequential aggregate signature scheme based on trapdoor permutations (e.g., RSA). Unlike prior such proposals, our scheme does not require a signer to retrieve the keys of other signers and verify the aggregate-so-far before adding its own signature. Indeed, we do not even require a signer to know the public keys of other signers! Moreover, for applications that require signers to verify the aggregate anyway, our schemes support lazy verification: a signer can add its own signature to an unverified aggregate and forward it along immediately, postponing verification until load permits or the necessary public keys are obtained. This is especially important for applications where signers must access a large, secure, and current cache of public keys in order to verify messages. The price we pay is that our signature grows slightly with the number of signers. We report a technical analysis of our scheme (which is provably secure in the random oracle model), a detailed implementation-level specification, and implementation results based on RSA and OpenSSL. To evaluate the performance of our scheme, we focus on the target application of BGPsec (formerly known as Secure BGP), a protocol designed for securing the global Internet routing system. There is a particular need for lazy verification with BGPsec, since it is run on routers that must process signatures extremely quickly, while being able to access tens of thousands of public keys. We compare our scheme to the algorithms currently proposed for use in BGPsec, and find that our signatures are considerably shorter than nonaggregate RSA (with the same sign and verify times) and have an order of magnitude faster verification than nonaggregate ECDSA, although ECDSA has shorter signatures when the number of signers is small. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Sequential aggregate signatures with lazy verification from trapdoor permutations", "paper_id": "WOS:000345658400020"}