{"auto_keywords": [{"score": 0.05007843022623743, "phrase": "nested_data_parallelism"}, {"score": 0.0426592730356598, "phrase": "ndp"}, {"score": 0.004764859786310636, "phrase": "data_parallelism"}, {"score": 0.0046176782475198085, "phrase": "effective_technique"}, {"score": 0.004569630374630379, "phrase": "high-level_programming"}, {"score": 0.004451676867747938, "phrase": "parallel_applications"}, {"score": 0.004246947739596565, "phrase": "irregular_parallel_computations"}, {"score": 0.004202741729567157, "phrase": "blelloch"}, {"score": 0.003988487841970088, "phrase": "language_mechanism"}, {"score": 0.003926359151817743, "phrase": "irregular_parallel_applications"}, {"score": 0.0038651944848734133, "phrase": "declarative_data-parallel_style"}, {"score": 0.0036873373225096624, "phrase": "compiler_transformation"}, {"score": 0.003610929883213109, "phrase": "ndp_computation"}, {"score": 0.003355717283753749, "phrase": "wide-vector_simd_architecture"}, {"score": 0.0031513240597392843, "phrase": "today's_multicore_machines"}, {"score": 0.003069867656852932, "phrase": "new_technique"}, {"score": 0.0027936239349923464, "phrase": "multicore_architectures"}, {"score": 0.0025288869172313674, "phrase": "control_structures"}, {"score": 0.002450602177683068, "phrase": "formal_semantics"}, {"score": 0.0023499703712897293, "phrase": "core_language"}, {"score": 0.0023133055945761235, "phrase": "rewriting_system"}, {"score": 0.002183684303511462, "phrase": "parallel_ml_implementation"}, {"score": 0.002127186380459509, "phrase": "experimental_results"}], "paper_keywords": ["multicore", " NESL", " nested data parallelism", " compilers"], "paper_abstract": "Data parallelism has proven to be an effective technique for high-level programming of a certain class of parallel applications, but it is not well suited to irregular parallel computations. Blelloch and others proposed nested data parallelism (NDP) as a language mechanism for programming irregular parallel applications in a declarative data-parallel style. The key to this approach is a compiler transformation that flattens the NDP computation and data structures into a form that can be executed efficiently on a wide-vector SIMD architecture. Unfortunately, this technique is ill suited to execution on today's multicore machines. We present a new technique, called data-only flattening, for the compilation of NDP, which is suitable for multicore architectures. Data-only flattening transforms nested data structures in order to expose programs to various optimizations while leaving control structures intact. We present a formal semantics of data-only flattening in a core language with a rewriting system. We demonstrate the effectiveness of this technique in the Parallel ML implementation and we report encouraging experimental results across various benchmark applications.", "paper_title": "Data-Only Flattening for Nested Data Parallelism", "paper_id": "WOS:000324158900008"}