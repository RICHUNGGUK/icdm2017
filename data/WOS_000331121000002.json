{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "javascript"}, {"score": 0.01111163950864875, "phrase": "tejas"}, {"score": 0.00862977583486721, "phrase": "javascript_programs"}, {"score": 0.004326624385772596, "phrase": "type-based_analyses"}, {"score": 0.004243289764306128, "phrase": "simplest_such_analyses"}, {"score": 0.004121275290411653, "phrase": "language's_subtle_idioms"}, {"score": 0.003983334573043943, "phrase": "general-purpose_type_correctness"}, {"score": 0.0038499929374478125, "phrase": "library_usage-we"}, {"score": 0.003757480190200645, "phrase": "single_type_system"}, {"score": 0.0035616743422949766, "phrase": "varied_uses"}, {"score": 0.003294875957676514, "phrase": "type_systems"}, {"score": 0.003003809128328864, "phrase": "easy_modeling"}, {"score": 0.0027651847105654363, "phrase": "type_system"}, {"score": 0.0026337482179592422, "phrase": "base_tejas_type_system"}, {"score": 0.0025829353063908256, "phrase": "traditional_type-checking"}, {"score": 0.0024963543716522087, "phrase": "complex_types"}, {"score": 0.0024126686412257407, "phrase": "user_ergonomics"}, {"score": 0.0023546121947302877, "phrase": "tejas's_modular_structure"}], "paper_keywords": ["JavaScript", " type systems"], "paper_abstract": "JavaScript programs vary widely in functionality, complexity, and use, and analyses of these programs must accommodate such variations. Type-based analyses are typically the simplest such analyses, but due to the language's subtle idioms and many application-specific needs-such as ensuring general-purpose type correctness, security properties, or proper library usage-we have found that a single type system does not suffice for all purposes. However, these varied uses still share many reusable common elements. In this paper we present TeJaS, a framework for building type systems for JavaScript. TeJaS has been engineered modularly to encourage experimentation. Its initial type environment is reified, to admit easy modeling of the various execution contexts of JavaScript programs, and its type language and typing rules are extensible, to enable variations of the type system to be constructed easily. The paper presents the base TeJaS type system, which performs traditional type-checking for JavaScript. Because JavaScript demands complex types, we explain several design decisions to improve user ergonomics. We then describe TeJaS's modular structure, and illustrate it by reconstructing the essence of a very different type system for JavaScript. Systems built from TeJaS have been applied to several real-world, third-party JavaScript programs.", "paper_title": "TeJaS: Retrofitting Type Systems for JavaScript", "paper_id": "WOS:000331121000002"}