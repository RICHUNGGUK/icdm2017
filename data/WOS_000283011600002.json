{"auto_keywords": [{"score": 0.04061843818468746, "phrase": "maintenance_effort"}, {"score": 0.00481495049065317, "phrase": "function_level"}, {"score": 0.004777569299319633, "phrase": "new_adaptive_k-nearest_neighbor_algorithm"}, {"score": 0.004612896435506914, "phrase": "vital_target"}, {"score": 0.004577076689777069, "phrase": "software_engineering"}, {"score": 0.004506265705673849, "phrase": "requirements_force_software_developers"}, {"score": 0.004283576270012874, "phrase": "internal_complexity"}, {"score": 0.003946766004066276, "phrase": "high_quality"}, {"score": 0.0035940277928341265, "phrase": "quality_factors"}, {"score": 0.002911039832825817, "phrase": "new_adaptive_k-nearest_neighbor"}, {"score": 0.0027886573969044042, "phrase": "different_attribute_weights"}, {"score": 0.002702887319160534, "phrase": "software_developers"}, {"score": 0.002579140290642792, "phrase": "ill-structured_software_entities"}, {"score": 0.0024418934977061876, "phrase": "proposed_technique"}, {"score": 0.0024134449026937586, "phrase": "single_linkage"}, {"score": 0.002357535807803925, "phrase": "complete_linkage"}, {"score": 0.0023300680497611147, "phrase": "clink"}, {"score": 0.0023029188952824685, "phrase": "weighted_pair-group"}, {"score": 0.0022760856906838814, "phrase": "arithmetic_averages"}, {"score": 0.002206045784326466, "phrase": "competitive_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Software refactoring", " Clustering", " Cohesion", " Code restructuring", " Function level cohesion", " Software quality"], "paper_abstract": "Improving the quality of software is a vital target of software engineering. Constantly evolving requirements force software developers to enhance, modify, or adapt software. Thus, increasing internal complexity, maintenance effort, and ultimately cost. In trying to balance between the needs to change software, maintain high quality, and keep the maintenance effort and cost low, refactoring comes up as a solution. Refactoring aims to improve a number of quality factors, among which is understandability. Enhancing understandability of ill-structured software decreases the maintenance effort and cost. To improve understandability, designers need to maximize cohesion and minimize coupling, which becomes more difficult to achieve as software evolves and internal complexity increases. In this paper, we propose a new Adaptive K-Nearest Neighbor (A-KNN) algorithm to perform clustering with different attribute weights. The technique is used to assist software developers in refactoring at the function/method level. This is achieved by identifying ill-structured software entities and providing suggestions to improve cohesion of such entities. We also compare the proposed technique with three function-level clustering techniques Single Linkage algorithm (SLINK), Complete Linkage algorithm (CLINK) and Weighted Pair-Group Method using Arithmetic averages (WPGMA). A-KNN showed competitive performance with the other three algorithms and required less computational complexity. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Software refactoring at the function level using new Adaptive K-Nearest Neighbor algorithm", "paper_id": "WOS:000283011600002"}