{"auto_keywords": [{"score": 0.03466421489584735, "phrase": "optimal_solutions"}, {"score": 0.03442030305452378, "phrase": "technology_mapping"}, {"score": 0.00481495049065317, "phrase": "logic_synthesis"}, {"score": 0.004780030485538593, "phrase": "lut-based_fpgas"}, {"score": 0.004380143676997257, "phrase": "notable_exceptions"}, {"score": 0.004208169035079665, "phrase": "current_logic-synthesis"}, {"score": 0.004177631185971939, "phrase": "technology-mapping_algorithms"}, {"score": 0.004147443453338553, "phrase": "fpga"}, {"score": 0.0040873354289955605, "phrase": "near-optimal_solutions"}, {"score": 0.0039268117782861696, "phrase": "different_fpga"}, {"score": 0.0036775717816768133, "phrase": "logic-optimization_and_technology-mapping_problems"}, {"score": 0.003652357893701661, "phrase": "np"}, {"score": 0.0035589270056254605, "phrase": "area_optimization"}, {"score": 0.0033696019683761274, "phrase": "novel_method"}, {"score": 0.0033329590158056935, "phrase": "arbitrarily_large_circuits"}, {"score": 0.003156707844469837, "phrase": "logic"}, {"score": 0.0030761074505030184, "phrase": "logic_synthesis_examples"}, {"score": 0.0030537595549694134, "phrase": "known_upper_bounds"}, {"score": 0.0029230308228548807, "phrase": "leading_fpga_technology-mapping_algorithms"}, {"score": 0.002808104467715375, "phrase": "entire_logic-synthesis_flow"}, {"score": 0.002678078466226442, "phrase": "leku_circuits"}, {"score": 0.0026105697442146357, "phrase": "logic_synthesis_flow"}, {"score": 0.0025447584328314754, "phrase": "leko_circuits"}, {"score": 0.002444668348634501, "phrase": "best_industrial_and_academic_fpga_synthesis"}, {"score": 0.0022234280592615756, "phrase": "leku_examples"}, {"score": 0.0021049977753042253, "phrase": "fpga_synthesis"}], "paper_keywords": ["circuit optimization", " circuit synthesis", " design automation", " field-programmable gate arrays (FPGAs)", " optimization methods"], "paper_abstract": "Field-programmable gate-array (FPGA) logic synthesis and technology mapping have been studied extensively over the past 15 years. However, progress within the last few years has slowed considerably (with some notable exceptions). It seems natural to then question whether the current logic-synthesis and technology-mapping algorithms for FPGA designs are producing near-optimal solutions. Although there are many empirical, studies that compare different FPGA synthesis/mapping algorithms, little is known about how far these algorithms are from the optimal (recall that both logic-optimization and technology-mapping problems are NP-hard, if we consider area optimization in addition to delay/depth optimization). In this paper, we present a novel method for constructing arbitrarily large circuits that have known optimal solutions after technology mapping. Using these circuits and their derivatives (called Logic synthesis Examples with Known Optimal (LEKO) and Logic synthesis Examples with Known Upper bounds (LEKU), respectively), we show that although leading FPGA technology-mapping algorithms can produce close to optimal solutions, the results from the entire logic-synthesis flow (logic optimization + mapping) are far from optimal. The LEKU circuits were constructed to show where the logic synthesis flow can be improved, while the LEKO circuits specifically deal with the performance of the technology mapping. The best industrial and academic FPGA synthesis flows are around 70 times larger in terms of area on average and, in some cases, as much as 500 times larger on LEKU examples. These results clearly indicate that there is much room for further research and improvement in FPGA synthesis.", "paper_title": "Optimality study of logic synthesis for LUT-based FPGAs", "paper_id": "WOS:000243953000004"}