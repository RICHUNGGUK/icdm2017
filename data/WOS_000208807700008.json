{"auto_keywords": [{"score": 0.03518757411622657, "phrase": "optimization_algorithms"}, {"score": 0.00481495049065317, "phrase": "computational_science_workflows"}, {"score": 0.0046683172874085015, "phrase": "scientific_processes"}, {"score": 0.004546174820239776, "phrase": "modern_computational_science"}, {"score": 0.0044272138900038095, "phrase": "remote_instruments"}, {"score": 0.004311352359122141, "phrase": "distributed_computers"}, {"score": 0.004198510172614725, "phrase": "software_pipelines"}, {"score": 0.004143196873246147, "phrase": "multiple_complex_simulations"}, {"score": 0.0040886093072615, "phrase": "distributed_platforms"}, {"score": 0.003877329308854808, "phrase": "computational_science_experiments"}, {"score": 0.0037260386566859197, "phrase": "different_scenarios"}, {"score": 0.003502305158321511, "phrase": "particular_outcome"}, {"score": 0.0033955105098235345, "phrase": "existing_workflow_tools"}, {"score": 0.0032199307816384577, "phrase": "simulation_pipelines"}, {"score": 0.003080548510001051, "phrase": "stand-alone_computation"}, {"score": 0.0030399188412691914, "phrase": "external_optimization_tool"}, {"score": 0.002807118943000936, "phrase": "computational_science_simulations"}, {"score": 0.0025241429061867633, "phrase": "generic_actors"}, {"score": 0.002490833392316362, "phrase": "existing_workflow_system"}, {"score": 0.0024692211633493546, "phrase": "kepler"}, {"score": 0.002361923085067681, "phrase": "flexible_ways"}, {"score": 0.002219916677664081, "phrase": "existing_bio-engineering_design_problem"}, {"score": 0.002161695357601592, "phrase": "distributed_clusters"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design optimization", " Grid computing", " Cardiac models", " Workflows"], "paper_abstract": "Workflows support the automation of scientific processes, providing mechanisms that underpin modern computational science. They facilitate access to remote instruments, databases and parallel and distributed computers. Importantly, they allow software pipelines that perform multiple complex simulations (leveraging distributed platforms), with one simulation driving another. Such an environment is ideal for computational science experiments that require the evaluation of a range of different scenarios \"in silico\" in an attempt to find ones that optimize a particular outcome. However, in general, existing workflow tools do not incorporate optimization algorithms, and thus whilst users can specify simulation pipelines, they need to invoke the workflow as a stand-alone computation within an external optimization tool. Moreover, many existing workflow engines do not leverage parallel and distributed computers, making them unsuitable for executing computational science simulations. To solve this problem, we have developed a methodology for integrating optimization algorithms directly into workflows. We implement a range of generic actors for an existing workflow system called Kepler, and discuss how they can be combined in flexible ways to support various different design strategies. We illustrate the system by applying it to an existing bio-engineering design problem running on a Grid of distributed clusters. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Embedding optimization in computational science workflows", "paper_id": "WOS:000208807700008"}