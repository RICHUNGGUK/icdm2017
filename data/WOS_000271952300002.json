{"auto_keywords": [{"score": 0.04286666008487536, "phrase": "resource_sharing"}, {"score": 0.012502641315154875, "phrase": "die_area"}, {"score": 0.00481495049065317, "phrase": "design-space_exploration_of_resource-sharing_solutions_for_custom_instruction_set_extensions"}, {"score": 0.004767826806287385, "phrase": "customized_processor_performance"}, {"score": 0.004674952036988355, "phrase": "additional_custom_instructions"}, {"score": 0.004385367803204002, "phrase": "modern_systems"}, {"score": 0.004195418010131832, "phrase": "energy_efficiency"}, {"score": 0.0037834649508375544, "phrase": "energy_consumption"}, {"score": 0.003728000957725218, "phrase": "customized_processor"}, {"score": 0.003584025547693836, "phrase": "custom_instructions"}, {"score": 0.0033617891884360606, "phrase": "graph_representations"}, {"score": 0.0032639039638211347, "phrase": "similar_subgraph"}, {"score": 0.0031845067058084583, "phrase": "multiple_subgraphs"}, {"score": 0.0030017207229983385, "phrase": "extension_instructions"}, {"score": 0.0028016507334576216, "phrase": "appropriate_level"}, {"score": 0.0027334673433027086, "phrase": "significantly_simpler_design"}, {"score": 0.002706659627293686, "phrase": "modest_increases"}, {"score": 0.002680114113899346, "phrase": "average_latency"}, {"score": 0.002551231163230566, "phrase": "parametric_method"}, {"score": 0.002428530921948425, "phrase": "instruction_latency"}, {"score": 0.002404706573379854, "phrase": "implementation_complexity"}, {"score": 0.0023346234464901978, "phrase": "design-space_exploration"}, {"score": 0.0023117182131967523, "phrase": "fast_area-delay_models"}, {"score": 0.0022443393901702053, "phrase": "ise."}, {"score": 0.0022113879114507577, "phrase": "experimental_evidence"}, {"score": 0.002157538586313944, "phrase": "broad_range"}, {"score": 0.0021363670305843403, "phrase": "design_points"}, {"score": 0.0021049977753042253, "phrase": "advantageous_tradeoffs"}], "paper_keywords": ["Application-specific instruction set processor (ASIP)", " data-flow synthesis", " design-space exploration", " hardware-software codesign"], "paper_abstract": "Customized processor performance generally increases as additional custom instructions are added. However, performance is not the only metric that modern systems must take into account; die area and energy efficiency are equally important. Resource sharing during synthesis of instruction set extensions (ISEs) can significantly reduce the die area and energy consumption of a customized processor. This may increase the number of custom instructions that can be synthesized with a given area budget. Resource sharing involves combining the graph representations of two or more ISEs which contain a similar subgraph. This coupling of multiple subgraphs, if performed naively, can increase the latency of the extension instructions considerably, and yet, as we show in this paper, an appropriate level of resource sharing provides a significantly simpler design with modest increases in average latency for ISEs. Our main contributions are the introduction of a parametric method for exploring the tradeoffs that can be achieved between instruction latency and implementation complexity, and the coupling of design-space exploration with fast area-delay models for the operators comprising each ISE. We present experimental evidence that our heuristic exposes a broad range of design points, allowing advantageous tradeoffs between die area and latency to be found and exploited.", "paper_title": "Design-Space Exploration of Resource-Sharing Solutions for Custom Instruction Set Extensions", "paper_id": "WOS:000271952300002"}