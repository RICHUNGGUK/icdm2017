{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "embedded_systems"}, {"score": 0.015580713050369914, "phrase": "kernel-based_software"}, {"score": 0.015442919463805209, "phrase": "hardware_fault_simulation"}, {"score": 0.012754441927080133, "phrase": "embedded_system"}, {"score": 0.009249685835973784, "phrase": "case_study"}, {"score": 0.004562362497952548, "phrase": "fault-injection-based_technique"}, {"score": 0.004461051281091779, "phrase": "test_cases"}, {"score": 0.004401342842183475, "phrase": "specific_and_predetermined_types"}, {"score": 0.0042650992966174065, "phrase": "mutation_testing"}, {"score": 0.004114527599108729, "phrase": "traditional_mutation_testing"}, {"score": 0.0038290829316346654, "phrase": "system_failure"}, {"score": 0.0037948184359488284, "phrase": "hardware_damage"}, {"score": 0.00374399358035391, "phrase": "challenging_task"}, {"score": 0.003611751858608048, "phrase": "underlying_layers"}, {"score": 0.003499864176875713, "phrase": "corresponding_hardware"}, {"score": 0.003361069456060196, "phrase": "mutation_operators"}, {"score": 0.0031702173541386888, "phrase": "software_developers"}, {"score": 0.003071965703296204, "phrase": "mutation_technique"}, {"score": 0.0030171910207671205, "phrase": "entire_system"}, {"score": 0.0028844769395018595, "phrase": "hardware_devices"}, {"score": 0.0027825094419000637, "phrase": "programmable_logic_controller"}, {"score": 0.0027452053065200152, "phrase": "digital_reactor_protection_system"}, {"score": 0.002708399936381754, "phrase": "nuclear_power_plant"}, {"score": 0.002612640527241776, "phrase": "proposed_mutation_operators"}, {"score": 0.002366361492754389, "phrase": "subject_software"}, {"score": 0.0021920373388760314, "phrase": "integration_testing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Mutation operators", " Embedded systems", " Fault injection", " Integration testing"], "paper_abstract": "Context: Mutation testing is a fault-injection-based technique to help testers generate test cases for detecting specific and predetermined types of faults. Objective: Before mutation testing can be effectively applied to embedded systems, traditional mutation testing needs to be modified. To inject a fault into an embedded system without causing any system failure or hardware damage is a challenging task as it requires some knowledge of the underlying layers such as the kernel and the corresponding hardware. Method: We propose a set of mutation operators for embedded systems using kernel-based software and hardware fault simulation. These operators are designed for software developers so that they can use the mutation technique to test the entire system after the software is integrated with the kernel and hardware devices. Results: A case study on a programmable logic controller for a digital reactor protection system in a nuclear power plant is conducted. Our results suggest that the proposed mutation operators are useful for fault-injection and this is evidenced by the fact that faults not injected by us were discovered in the subject software as a result of the case study. Conclusion: We conclude that our mutation operators are useful for integration testing of an embedded system. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Mutant generation for embedded systems using kernel-based software and hardware fault simulation", "paper_id": "WOS:000293421200010"}