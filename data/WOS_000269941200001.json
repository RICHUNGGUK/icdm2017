{"auto_keywords": [{"score": 0.015719716506582538, "phrase": "integrated_development_environment"}, {"score": 0.015479200759850795, "phrase": "relative_debugging"}, {"score": 0.004488734023485018, "phrase": "internal_state"}, {"score": 0.003693533648584145, "phrase": "command_line_user_interface"}, {"score": 0.0036080776793146843, "phrase": "relative_debugger"}, {"score": 0.0035245918797629804, "phrase": "traditional_debugging_tools"}, {"score": 0.002745438358145758, "phrase": "significant_advantages"}, {"score": 0.002681859084438076, "phrase": "command_line_form"}, {"score": 0.0024418934977061876, "phrase": "different_products"}, {"score": 0.002385326947545194, "phrase": "microsoft's_visual_studio"}, {"score": 0.0023119339377186505, "phrase": "netbeans"}, {"score": 0.002258389248458127, "phrase": "ibm"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["debugging", " integrated development environments", " software tools"], "paper_abstract": "Relative Debugging allows a user to compare the internal state of two programs as they run, making it possible to test whether two programs perform the same function given the same input. When implemented with a command line user interface, a relative debugger looks like traditional debugging tools with the addition of commands that describe which structures should be equivalent in the two programs. In this paper, we discuss relative debugging within an integrated development environment, and show that there are significant advantages over a command line form. We describe a pluggable, modular, architecture that works with a variety of different products, including Microsoft's Visual Studio, SUN's NetBeans, and IBM's Eclipse. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Relative debugging in an integrated development environment", "paper_id": "WOS:000269941200001"}