{"auto_keywords": [{"score": 0.041413254749618024, "phrase": "vgt"}, {"score": 0.008679444818800501, "phrase": "high-level_tests"}, {"score": 0.008343493206991083, "phrase": "test_automation"}, {"score": 0.00481495049065317, "phrase": "today's_software_development_industry"}, {"score": 0.004483450050677258, "phrase": "lower_level"}, {"score": 0.004465714498712808, "phrase": "system_abstraction"}, {"score": 0.004378078970574258, "phrase": "high-level_test_automation_techniques"}, {"score": 0.004334911545833016, "phrase": "replay"}, {"score": 0.004149922666541166, "phrase": "system_implementation_dependencies"}, {"score": 0.004117144043277467, "phrase": "visual_gui_testing"}, {"score": 0.004068458936001928, "phrase": "emerging_technique"}, {"score": 0.004052358316137446, "phrase": "industrial_practice"}, {"score": 0.004036321155030771, "phrase": "perceived_higher_flexibility"}, {"score": 0.003848735652938058, "phrase": "bitmap_layer"}, {"score": 0.0038259065515854167, "phrase": "system's_front_end"}, {"score": 0.003795677450778112, "phrase": "image_recognition"}, {"score": 0.0037806522451671897, "phrase": "test_scripts"}, {"score": 0.0037656862920713045, "phrase": "vgt_tools"}, {"score": 0.003743347953882079, "phrase": "end_user_behavior"}, {"score": 0.003728529119516347, "phrase": "almost_any_gui-based_system"}, {"score": 0.003677121952927709, "phrase": "operating_system"}, {"score": 0.0034715658596258018, "phrase": "empirically-based_knowledge"}, {"score": 0.0034169038374999585, "phrase": "industrial_applicability"}, {"score": 0.003213072775478587, "phrase": "swedish"}, {"score": 0.0031876679071727162, "phrase": "safety-critical_software"}, {"score": 0.0031499390636841778, "phrase": "manual_system_test_cases"}, {"score": 0.003118838635447237, "phrase": "vgt."}, {"score": 0.002991524908432975, "phrase": "transitioned_test_cases"}, {"score": 0.0029561107046138136, "phrase": "tested_systems"}, {"score": 0.0029327337678718133, "phrase": "applicable_test_cases"}, {"score": 0.0027358910467781155, "phrase": "cpl_types"}, {"score": 0.002650349217351483, "phrase": "industrial_software_development_practice"}, {"score": 0.0025421108712476367, "phrase": "identified_cpls"}, {"score": 0.002472412920623605, "phrase": "vgt_transition"}, {"score": 0.002433444782735987, "phrase": "vgt_suites'_defect_finding_ability"}, {"score": 0.0024094014497317183, "phrase": "identified_defects"}, {"score": 0.0023526599432262037, "phrase": "extensive_experience"}, {"score": 0.0023340439265238403, "phrase": "manual_test_suites"}, {"score": 0.00232017842114349, "phrase": "main_conclusion"}, {"score": 0.002168664249034287, "phrase": "industrial_practitioners"}, {"score": 0.002155779067056877, "phrase": "presented_cpls"}, {"score": 0.002142970278347126, "phrase": "decision_support"}, {"score": 0.0021049977753042253, "phrase": "potentially_other_automated_testing_techniques"}], "paper_keywords": ["Visual GUI Testing", " Industrial case study", " Challenges", " Problems and Limitations", " System and acceptance test automation", " Development cost"], "paper_abstract": "In today's software development industry, high-level tests such as Graphical User Interface (GUI) based system and acceptance tests are mostly performed with manual practices that are often costly, tedious and error prone. Test automation has been proposed to solve these problems but most automation techniques approach testing from a lower level of system abstraction. Their suitability for high-level tests has therefore been questioned. High-level test automation techniques such as Record and Replay exist, but studies suggest that these techniques suffer from limitations, e.g. sensitivity to GUI layout or code changes, system implementation dependencies, etc. Visual GUI Testing (VGT) is an emerging technique in industrial practice with perceived higher flexibility and robustness to certain GUI changes than previous high-level (GUI) test automation techniques. The core of VGT is image recognition which is applied to analyze and interact with the bitmap layer of a system's front end. By coupling image recognition with test scripts, VGT tools can emulate end user behavior on almost any GUI-based system, regardless of implementation language, operating system or platform. However, VGT is not without its own challenges, problems and limitations (CPLs) but, like for many other automated test techniques, there is a lack of empirically-based knowledge of these CPLs and how they impact industrial applicability. Crucially, there is also a lack of information on the cost of applying this type of test automation in industry. This manuscript reports an empirical, multi-unit case study performed at two Swedish companies that develop safety-critical software. It studies their transition from manual system test cases into tests automated with VGT. In total, four different test suites that together include more than 300 high-level system test cases were automated for two multi-million lines of code systems. The results show that the transitioned test cases could find defects in the tested systems and that all applicable test cases could be automated. However, during these transition projects a number of hurdles had to be addressed; a total of 58 different CPLs were identified and then categorized into 26 types. We present these CPL types and an analysis of the implications for the transition to and use of VGT in industrial software development practice. In addition, four high-level solutions are presented that were identified during the study, which would address about half of the identified CPLs. Furthermore, collected metrics on cost and return on investment of the VGT transition are reported together with information about the VGT suites' defect finding ability. Nine of the identified defects are reported, 5 of which were unknown to testers with extensive experience from using the manual test suites. The main conclusion from this study is that even though there are many challenges related to the transition and usage of VGT, the technique is still valuable, flexible and considered cost-effective by the industrial practitioners. The presented CPLs also provide decision support in the use and advancement of VGT and potentially other automated testing techniques similar to VGT, e.g. Record and Replay.", "paper_title": "Visual GUI testing in practice: challenges, problemsand limitations", "paper_id": "WOS:000354480800004"}