{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "preference_queries"}, {"score": 0.004732785510739708, "phrase": "standard_database_systems"}, {"score": 0.0045726187330434025, "phrase": "\"right''_piece"}, {"score": 0.004379977556546879, "phrase": "wide_range"}, {"score": 0.004305203085016233, "phrase": "available_alternatives"}, {"score": 0.004159446063902181, "phrase": "easy_task"}, {"score": 0.003531474887552889, "phrase": "recent_issues"}, {"score": 0.0034118234596993836, "phrase": "database_query"}, {"score": 0.003212074324593725, "phrase": "user_preferences"}, {"score": 0.002566997205079849, "phrase": "qualitative_preference_queries"}, {"score": 0.0024586427394152196, "phrase": "well-known_skyline_queries"}, {"score": 0.002236055625099805, "phrase": "sorting_machinery"}, {"score": 0.002197801146305747, "phrase": "standard_database_engines"}, {"score": 0.0021601997088758957, "phrase": "speed-up_evaluation"}, {"score": 0.0021049977753042253, "phrase": "centralized_and_distributed_scenarios"}], "paper_keywords": [""], "paper_abstract": "Locating the \"right'' piece of information among a wide range of available alternatives is not an easy task, as everyone has experienced at least once during his/her lifetime. In this paper we look at some recent issues arising when a database query is extended so as to include user preferences, which ultimately determine whether one alternative is reputed by the user better than another one. In particular, we focus on the case of qualitative preference queries, that strictly include well-known skyline queries, and describe how one can take advantage of the sorting machinery of standard database engines to speed-up evaluation both in centralized and distributed scenarios.", "paper_title": "Processing preference queries in standard database systems", "paper_id": "WOS:000241754200001"}