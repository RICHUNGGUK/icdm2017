{"auto_keywords": [{"score": 0.04397138298217461, "phrase": "reachability_problem"}, {"score": 0.03788205987705418, "phrase": "ita"}, {"score": 0.015719700919695684, "phrase": "interrupt_timed_automata"}, {"score": 0.013139026335915937, "phrase": "ita."}, {"score": 0.004348580182733617, "phrase": "timed_multi-task_systems"}, {"score": 0.004267287100135339, "phrase": "single_processor_environment"}, {"score": 0.004140354220982935, "phrase": "hybrid_automata"}, {"score": 0.0039124037252916055, "phrase": "untimed_language"}, {"score": 0.0037674258625824113, "phrase": "finite_automaton"}, {"score": 0.0037249853525936428, "phrase": "generalized_class_graph"}, {"score": 0.0035599399264775737, "phrase": "nexptime"}, {"score": 0.003519832700140953, "phrase": "ptime"}, {"score": 0.003363830908814182, "phrase": "first_result"}, {"score": 0.003083849594367653, "phrase": "language-equivalent_automaton"}, {"score": 0.002913895605074143, "phrase": "class_graph"}, {"score": 0.002859345731792013, "phrase": "next_step"}, {"score": 0.0027846824619356583, "phrase": "real_time_properties"}, {"score": 0.002701741898821595, "phrase": "scl"}, {"score": 0.0026411384812121503, "phrase": "timed_linear_time_logic"}, {"score": 0.0025335509856200433, "phrase": "model_checking_procedures"}, {"score": 0.002495521662819317, "phrase": "timed_branching_time_logic"}, {"score": 0.0024395426929046415, "phrase": "expressive_power"}, {"score": 0.002340147988348115, "phrase": "corresponding_families"}, {"score": 0.0023225152126545067, "phrase": "accepted_languages"}, {"score": 0.0022194677375148063, "phrase": "controlled_real-time_automata"}, {"score": 0.0021614767508781048, "phrase": "timed_automata"}, {"score": 0.0021049980887989047, "phrase": "crta"}], "paper_keywords": ["Hybrid automata", " Timed automata", " Multi-task systems", " Interrupts", " Decidability of reachability", " Model checking", " Real-time properties"], "paper_abstract": "We introduce the class of Interrupt Timed Automata (ITA), a subclass of hybrid automata well suited to the description of timed multi-task systems with interruptions in a single processor environment. While the reachability problem is undecidable for hybrid automata we show that it is decidable for ITA. More precisely we prove that the untimed language of an ITA is regular, by building a finite automaton as a generalized class graph. We then establish that the reachability problem for ITA is in NEXPTIME and in PTIME when the number of clocks is fixed. To prove the first result, we define a subclass ITA(-) of ITA, and show that (1) any ITA can be reduced to a language-equivalent automaton in ITA(-) and (2) the reachability problem in this subclass is in NEXPTIME (without any class graph). In the next step, we investigate the verification of real time properties over ITA. We prove that model checking SCL, a fragment of a timed linear time logic, is undecidable. On the other hand, we give model checking procedures for two fragments of timed branching time logic. We also compare the expressive power of classical timed automata and ITA and prove that the corresponding families of accepted languages are incomparable. The result also holds for languages accepted by controlled real-time automata (CRTA), that extend timed automata. We finally combine ITA with CRTA, in a model which encompasses both classes and show that the reachability problem is still decidable. Additionally we show that the languages of ITA are neither closed under complementation nor under intersection.", "paper_title": "Interrupt Timed Automata: verification and expressiveness", "paper_id": "WOS:000300289300003"}