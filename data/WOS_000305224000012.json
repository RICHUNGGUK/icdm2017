{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "continuous_queries"}, {"score": 0.00481495049065317, "phrase": "computation_sharing"}, {"score": 0.0047563776685277314, "phrase": "parallel_processing"}, {"score": 0.004698514007994158, "phrase": "location-dependent_query_processing"}, {"score": 0.004031699976413366, "phrase": "computational_bottleneck"}, {"score": 0.0037231102027070724, "phrase": "efficient_and_scalable_system"}, {"score": 0.0035668128900149814, "phrase": "parallel_processing_capability"}, {"score": 0.003417054482155433, "phrase": "naive_cpu-based_solution"}, {"score": 0.003375429082739004, "phrase": "continuous_range-monitoring_queries"}, {"score": 0.003097865379563127, "phrase": "mobile_communication_devices"}, {"score": 0.003022825806274343, "phrase": "location-based_services"}, {"score": 0.002825681384008326, "phrase": "location-based_queries"}, {"score": 0.0027403605798830984, "phrase": "view_oriented_approach"}, {"score": 0.002690406375639144, "phrase": "location_database"}, {"score": 0.0026252106881752067, "phrase": "computation_costs"}, {"score": 0.0023652572260178637, "phrase": "parallel_processing_power"}, {"score": 0.0023223018769738136, "phrase": "gpu"}, {"score": 0.0021705796895687864, "phrase": "mobile_objects"}, {"score": 0.0021049977753042253, "phrase": "acceptable_level"}], "paper_keywords": ["Location-dependent query processing", " Mobile database systems", " Continuous query", " Location-based services", " Graphical processing unit", " GPU"], "paper_abstract": "A variety of research exists for the processing of continuous queries in large, mobile environments. Each method tries, in its own way, to address the computational bottleneck of constantly processing so many queries. In this paper, we introduce an efficient and scalable system for monitoring continuous queries by leveraging the parallel processing capability of the Graphics Processing Unit. We examine a naive CPU-based solution for continuous range-monitoring queries, and we then extend this system using the GPU. Additionally, with mobile communication devices becoming commodity, location-based services will become ubiquitous. To cope with the very high intensity of location-based queries, we propose a view oriented approach of the location database, thereby reducing computation costs by exploiting computation sharing amongst queries requiring the same view. Our studies show that by exploiting the parallel processing power of the GPU, we are able to significantly scale the number of mobile objects, while maintaining an acceptable level of performance.", "paper_title": "Leveraging computation sharing and parallel processing in location-dependent query processing", "paper_id": "WOS:000305224000012"}