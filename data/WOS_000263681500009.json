{"auto_keywords": [{"score": 0.03775114821059378, "phrase": "snf"}, {"score": 0.012909605007668974, "phrase": "optimal_reduction_schedule"}, {"score": 0.009612097082622286, "phrase": "optimal_schedule"}, {"score": 0.009167214484914908, "phrase": "computation_time"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_environments"}, {"score": 0.004681971826924847, "phrase": "cost-effective_alternative"}, {"score": 0.0046558180142346264, "phrase": "massively_parallel_supercomputers"}, {"score": 0.004340909525179319, "phrase": "high_computing_power"}, {"score": 0.004304574865291508, "phrase": "limited_budget"}, {"score": 0.0041973778634435376, "phrase": "different_types"}, {"score": 0.004081385289516914, "phrase": "efficient_collective_communication_protocols"}, {"score": 0.003837317088477703, "phrase": "simple_technique"}, {"score": 0.0036792981951416105, "phrase": "efficient_reduction_protocols"}, {"score": 0.0036587247965487366, "phrase": "heterogeneous_clusters"}, {"score": 0.0034884152484429207, "phrase": "snf_schedule_length"}, {"score": 0.0034206054835732797, "phrase": "optimal_schedule_length"}, {"score": 0.003234016105312037, "phrase": "optimal_reduction_time"}, {"score": 0.0031094742030008346, "phrase": "communication_speed"}, {"score": 0.003040466163186493, "phrase": "communication_speed_ratio"}, {"score": 0.0029646555801624563, "phrase": "dynamic_programming_technique"}, {"score": 0.0028907297673652836, "phrase": "monotone_property"}, {"score": 0.0028664985822266344, "phrase": "objective_function"}, {"score": 0.002740645418695024, "phrase": "approximation_algorithm"}, {"score": 0.0026798007307313105, "phrase": "all-reduction_algorithm"}, {"score": 0.0026498854775140854, "phrase": "reduction_answer"}, {"score": 0.0026056359564738413, "phrase": "approximation_ratio"}, {"score": 0.002470316776362351, "phrase": "built-in_mpi_reduce"}, {"score": 0.002449600993613241, "phrase": "test_cluster"}, {"score": 0.0023028883978637536, "phrase": "naive_dynamic_programming_implementation"}, {"score": 0.0022580713471027996, "phrase": "theoretical_results"}, {"score": 0.0022391314340650544, "phrase": "branch-and-bound_search"}, {"score": 0.0021893963445354507, "phrase": "search_time"}], "paper_keywords": ["Heterogeneous workstation cluster", " Scheduling optimization", " Reduction protocol", " Slowest-node-first heuristic", " Dynamic programming", " Branch-and-bound search"], "paper_abstract": "Network of workstation (NOW) is a cost-effective alternative to massively parallel supercomputers. As commercially available off-the-shelf processors become cheaper and faster, it is now possible to build a cluster that provides high computing power within a limited budget. However, a cluster may consist of different types of processors and this heterogeneity complicates the design of efficient collective communication protocols. For example, it is a very hard combinatorial problem to find an optimal reduction schedule for such heterogeneous clusters. Nevertheless, we show that a simple technique called slowest-node-first (SNF) is very effective in designing efficient reduction protocols for heterogeneous clusters. First, we show that SNF is actually a 2-approximation algorithm, which means that an SNF schedule length is always within twice of the optimal schedule length, no matter what kind of cluster is given. In addition, we show that SNF does give the optimal reduction time when the cluster consists of two types of processors, when the ratio of communication speed between them is at least two. When the communication speed ratio is less than two, we develop a dynamic programming technique to find the optimal schedule. Our dynamic programming utilizes the monotone property of the objective function, and can significantly reduce the amount of computation time. Finally, combined with an approximation algorithm for broadcast 2004, we propose an all-reduction algorithm which sends the reduction answer to all processors, with approximation ratio 3.5. We conduct three groups of experiments. First, we show that SNF performs better than the built-in MPI_Reduce in a test cluster. Second, we observe a factor of 93 times saving in computation time to find the optimal schedule, when compared with a naive dynamic programming implementation. Thirdly, we apply the theoretical results to a branch-and-bound search and show that they can reduce the search time of the optimal reduction schedule by a factor of 500, when the cluster has three kinds of processors.", "paper_title": "An Approximation Algorithm and Dynamic Programming for Reduction in Heterogeneous Environments", "paper_id": "WOS:000263681500009"}