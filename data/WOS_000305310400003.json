{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_hardware_verification"}, {"score": 0.004518442937844318, "phrase": "embedded_system's_hardware_components"}, {"score": 0.004173244935967375, "phrase": "testing_hardware_components"}, {"score": 0.0038339398365449507, "phrase": "simulation-based_functional_verification"}, {"score": 0.0036942726653704213, "phrase": "hardware_design"}, {"score": 0.0036553070575015344, "phrase": "software-based_simulators"}, {"score": 0.003503497128638102, "phrase": "increasing_complexity"}, {"score": 0.003466536738232506, "phrase": "embedded_systems"}, {"score": 0.003036040409062437, "phrase": "aspect-oriented_domain-specific_modelling_language"}, {"score": 0.0028037753646260937, "phrase": "model-based_software_engineering_process"}, {"score": 0.00267301171407926, "phrase": "well_modularised_models"}, {"score": 0.0026307897899760383, "phrase": "e_code"}, {"score": 0.0025348408238837655, "phrase": "engineers_ability"}, {"score": 0.0022674379203603224, "phrase": "modelling_language"}, {"score": 0.002208035721125305, "phrase": "representative_testbench"}, {"score": 0.0021731423856364003, "phrase": "automotive_semiconductor_industry"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model-based software engineering", " Aspect-oriented programming", " Theme/UML", " Code generation", " MARIE", " DSML", " Hardware verification"], "paper_abstract": "The cost of correcting errors in the design of an embedded system's hardware components can be higher than for its software components, making it important to test as early as possible. Testing hardware components before they are implemented involves verifying the design through either formal or more commonly, simulation-based functional verification. Performing functional verification of a hardware design requires software-based simulators and verification testbenches. However, the increasing complexity of embedded systems is contributing to testbenches that are progressively more difficult to understand, maintain, extend and reuse across projects. This paper presents an aspect-oriented domain-specific modelling language for the e hardware verification language that can be used as part of a model-based software engineering process. The modelling language is designed to produce well modularised models from which e code can be generated, thereby improving engineers ability to develop testbenches that can be more easily maintained, adapted and reused. We demonstrate the suitability of the modelling language through its application to a representative testbench from the automotive semiconductor industry. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "An aspect-oriented, model-driven approach to functional hardware verification", "paper_id": "WOS:000305310400003"}