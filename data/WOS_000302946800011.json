{"auto_keywords": [{"score": 0.028772319105514487, "phrase": "update_jobs"}, {"score": 0.01481467276282199, "phrase": "traditional_data_warehouses"}, {"score": 0.012770641097583293, "phrase": "new_data"}, {"score": 0.011386378617039755, "phrase": "data_staleness"}, {"score": 0.00481495049065317, "phrase": "streaming_data_warehouses"}, {"score": 0.00473320761888448, "phrase": "update_scheduling"}, {"score": 0.004672808182229058, "phrase": "data_warehouses"}, {"score": 0.004496174406337201, "phrase": "data_stream_systems"}, {"score": 0.00440093312826378, "phrase": "external_sources"}, {"score": 0.00418046991987597, "phrase": "wide_range"}, {"score": 0.004144810537437608, "phrase": "interarrival_times"}, {"score": 0.003971006689166329, "phrase": "streaming_warehouses"}, {"score": 0.0038044630943383497, "phrase": "streaming_warehouse_update_problem"}, {"score": 0.0037558704408683905, "phrase": "scheduling_problem"}, {"score": 0.0032050528424273994, "phrase": "earlier_time"}, {"score": 0.0030183163057929687, "phrase": "scheduling_framework"}, {"score": 0.0029165216647792924, "phrase": "stream_warehouse"}, {"score": 0.0026767629720554397, "phrase": "different_interarrival_times"}, {"score": 0.0026538960171433985, "phrase": "data_volumes"}, {"score": 0.0026312238938540787, "phrase": "different_sources"}, {"score": 0.002553382046204689, "phrase": "novel_feature"}, {"score": 0.00249919111154604, "phrase": "scheduling_decisions"}, {"score": 0.00218789980093445, "phrase": "update_scheduling_algorithms"}, {"score": 0.0021692000054033956, "phrase": "extensive_simulation_experiments"}], "paper_keywords": ["Data warehouse maintenance", " online scheduling"], "paper_abstract": "We discuss update scheduling in streaming data warehouses, which combine the features of traditional data warehouses and data stream systems. In our setting, external sources push append-only data streams into the warehouse with a wide range of interarrival times. While traditional data warehouses are typically refreshed during downtimes, streaming warehouses are updated as new data arrive. We model the streaming warehouse update problem as a scheduling problem, where jobs correspond to processes that load new data into tables, and whose objective is to minimize data staleness over time (at time t, if a table has been updated with information up to some earlier time r, its staleness is t minus r). We then propose a scheduling framework that handles the complications encountered by a stream warehouse: view hierarchies and priorities, data consistency, inability to preempt updates, heterogeneity of update jobs caused by different interarrival times and data volumes among different sources, and transient overload. A novel feature of our framework is that scheduling decisions do not depend on properties of update jobs (such as deadlines), but rather on the effect of update jobs on data staleness. Finally, we present a suite of update scheduling algorithms and extensive simulation experiments to map out factors which affect their performance.", "paper_title": "Scalable Scheduling of Updates in Streaming Data Warehouses", "paper_id": "WOS:000302946800011"}