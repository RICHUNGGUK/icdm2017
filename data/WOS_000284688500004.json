{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "semantic_web"}, {"score": 0.048140506081445586, "phrase": "software_processes"}, {"score": 0.04071688784076888, "phrase": "software_team_members"}, {"score": 0.03580221822540465, "phrase": "process_models"}, {"score": 0.004662705558154439, "phrase": "controlled_flexibility"}, {"score": 0.004536029676655286, "phrase": "corresponding_models"}, {"score": 0.004494570360108983, "phrase": "dynamic_entities"}, {"score": 0.004273196830970426, "phrase": "enacting_process"}, {"score": 0.004214729542986473, "phrase": "software_development_organisation"}, {"score": 0.003916098498242888, "phrase": "everyday_practice"}, {"score": 0.003809628721278519, "phrase": "total_flexibility"}, {"score": 0.0036385493850693983, "phrase": "previously_defined_controlled_flexibility"}, {"score": 0.0033651019362620866, "phrase": "related_instances"}, {"score": 0.0033037970113095577, "phrase": "process_engineers"}, {"score": 0.0031991799574455555, "phrase": "process_model"}, {"score": 0.0031553611552558986, "phrase": "domain-specific_language"}, {"score": 0.0030414140732789186, "phrase": "core_process"}, {"score": 0.003027462227648001, "phrase": "modelling_language"}, {"score": 0.002999749669403939, "phrase": "additional_controlled_flexibility_information"}, {"score": 0.002530359917257626, "phrase": "associated_ontology-based_technologies"}, {"score": 0.0023834640793589414, "phrase": "ontology-based_format"}, {"score": 0.0023400004981080818, "phrase": "controlled_flexibility-related_concepts"}, {"score": 0.002255431275670053, "phrase": "formal_semantics"}, {"score": 0.002163930783583212, "phrase": "concrete_mappings"}, {"score": 0.0021342613107011624, "phrase": "ontology_concepts"}, {"score": 0.0021049977753042253, "phrase": "unified_modelling_language_class-based_dsl_metamodel"}], "paper_keywords": [""], "paper_abstract": "Software processes and corresponding models are dynamic entities that must evolve to cope with changes occurred in the enacting process, the software development organisation, the market and the methodologies used to produce software. However, in the everyday practice, software team members do not want total flexibility. They rather prefer to learn about and follow previously defined controlled flexibility, that is, advices on which, where, how and by whom process models and related instances can change/adapt. Process engineers can express these advices within a process model with a domain-specific language (DSL), which complements the core process modelling language with additional controlled flexibility information. Then, software team members can browse and learn on this information in process models and instances, and be guided when performing changes. In this study, the authors propose the use of the semantic web and associated ontology-based technologies to develop and evolve their controlled flexibility DSL for software processes. They use an ontology-based format to define the controlled flexibility-related concepts, descriptions and axioms that specify the formal semantics of their DSL. In addition, the authors provide concrete mappings between these ontology concepts and a unified modelling language class-based DSL metamodel and describe how it supports changes made in the ontology.", "paper_title": "Using the semantic web to define a language for modelling controlled flexibility in software processes", "paper_id": "WOS:000284688500004"}