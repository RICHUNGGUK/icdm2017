{"auto_keywords": [{"score": 0.03816603490603945, "phrase": "maximum_bottleneck_weight"}, {"score": 0.010690574406026854, "phrase": "ordered_pairs"}, {"score": 0.00481495049065317, "phrase": "vertex_weighted_graphs"}, {"score": 0.004586531354697466, "phrase": "directed_graph"}, {"score": 0.004446823283475876, "phrase": "weight_function"}, {"score": 0.004330450801016359, "phrase": "bottleneck_weight"}, {"score": 0.004124920849728372, "phrase": "smallest_weight"}, {"score": 0.0034714553759044664, "phrase": "all-pairs_bottleneck_paths"}, {"score": 0.0030942116765996426, "phrase": "time_algorithm"}, {"score": 0.003066945490483524, "phrase": "apbp."}, {"score": 0.0029471818883482688, "phrase": "fast_matrix_multiplication"}, {"score": 0.0028572658971252616, "phrase": "shortest_paths"}, {"score": 0.002114343255371806, "phrase": "apbsp"}], "paper_keywords": ["Bottleneck paths", " Shortest paths", " Directed weighted graphs"], "paper_abstract": "Let G=(V,E,w) be a directed graph, where w:V -> a\"e is a weight function defined on its vertices. The bottleneck weight, or the capacity, of a path is the smallest weight of a vertex on the path. For two vertices u,v the capacity from u to v, denoted by c(u,v), is the maximum bottleneck weight of a path from u to v. In the All-Pairs Bottleneck Paths (APBP) problem the task is to find the capacities for all ordered pairs of vertices. Our main result is an O(n (2.575)) time algorithm for APBP. The exponent is derived from the exponent of fast matrix multiplication. A variant of our algorithm computes shortest paths of maximum bottleneck weight. Let d(u,v) denote the (unweighted) distance from u to v, and let sc(u,v) denote the maximum bottleneck weight of a path from u to v having length d(u,v). The All-Pairs Bottleneck Shortest Paths (APBSP) problem is to compute sc(u,v) for all ordered pairs of vertices. We present an algorithm for APBSP whose running time is O(n (2.86)).", "paper_title": "All-Pairs Bottleneck Paths in Vertex Weighted Graphs", "paper_id": "WOS:000287319100009"}