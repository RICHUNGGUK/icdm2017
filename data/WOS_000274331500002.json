{"auto_keywords": [{"score": 0.03492953842189588, "phrase": "competitive_ratio"}, {"score": 0.02784741832524083, "phrase": "hausdorff_distance"}, {"score": 0.00481495049065317, "phrase": "line_simplification"}, {"score": 0.004642292792558686, "phrase": "well-known_line-simplification_problem"}, {"score": 0.004160435626849478, "phrase": "polygonal_path"}, {"score": 0.003660879039645457, "phrase": "streaming_setting"}, {"score": 0.003545625043276134, "phrase": "limited_amount"}, {"score": 0.0032358709481309913, "phrase": "resource_augmentation"}, {"score": 0.0029396242707327986, "phrase": "optimal_simplification"}, {"score": 0.0029128614098881253, "phrase": "k_points"}, {"score": 0.0023818288346547692, "phrase": "general_paths"}, {"score": 0.002234031373581961, "phrase": "first_case"}, {"score": 0.0021438877099090262, "phrase": "latter_two_cases"}], "paper_keywords": ["Line simplification", " Streaming algorithms"], "paper_abstract": "We study the following variant of the well-known line-simplification problem: we are getting a (possibly infinite) sequence of points p (0),p (1),p (2),aEuro broken vertical bar in the plane defining a polygonal path, and as we receive the points, we wish to maintain a simplification of the path seen so far. We study this problem in a streaming setting, where we only have a limited amount of storage, so that we cannot store all the points. We analyze the competitive ratio of our algorithms, allowing resource augmentation: we let our algorithm maintain a simplification with 2k (internal) points and compare the error of our simplification to the error of the optimal simplification with k points. We obtain the algorithms with O(1) competitive ratio for three cases: convex paths, where the error is measured using the Hausdorff distance (or Fr,chet distance), xy-monotone paths, where the error is measured using the Hausdorff distance (or Fr,chet distance), and general paths, where the error is measured using the Fr,chet distance. In the first case the algorithm needs O(k) additional storage, and in the latter two cases the algorithm needs O(k (2)) additional storage.", "paper_title": "Streaming Algorithms for Line Simplification", "paper_id": "WOS:000274331500002"}