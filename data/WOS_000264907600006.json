{"auto_keywords": [{"score": 0.04826300170743257, "phrase": "fp"}, {"score": 0.00481495049065317, "phrase": "fast_updated_frequent_pattern_trees"}, {"score": 0.004521803560561489, "phrase": "efficient_data_structure"}, {"score": 0.004478308876320956, "phrase": "association-rule_mining"}, {"score": 0.004392565073466714, "phrase": "candidate_itemsets"}, {"score": 0.004165105357908494, "phrase": "tree_structure"}, {"score": 0.003855034057431947, "phrase": "batch_way"}, {"score": 0.0037267132967205136, "phrase": "efficient_incremental_mining_algorithm"}, {"score": 0.0036730297909962142, "phrase": "newly_inserted_transactions"}, {"score": 0.0035852640843794252, "phrase": "record_insertion"}, {"score": 0.0035507457285983268, "phrase": "record_deletion"}, {"score": 0.0032232653428491435, "phrase": "fp-tree_construction_algorithm"}, {"score": 0.002883718207958817, "phrase": "fufp-tree_maintenance_algorithm"}, {"score": 0.0027209713296448296, "phrase": "execution_time"}, {"score": 0.002592369213499121, "phrase": "experimental_results"}, {"score": 0.002530359917257626, "phrase": "proposed_fufp-tree_maintenance_algorithm"}, {"score": 0.0024224481033945943, "phrase": "batch_fp-tree_construction_algorithm"}, {"score": 0.0023417010799384524, "phrase": "nearly_the_same_tree_structure"}, {"score": 0.0023079225317714815, "phrase": "fp-tree_algorithm"}, {"score": 0.002274630121183437, "phrase": "proposed_approach"}, {"score": 0.0022202042044679984, "phrase": "good_trade-off"}, {"score": 0.0021670777282518424, "phrase": "tree_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "The Frequent-Pattern-tree (FP tree) is an efficient data structure for association-rule mining without generation of candidate itemsets. It was used to represent a database into a tree structure which stored only frequent items. It, however, needed to process all transactions in a batch way. In the past, Hong et al. thus proposed an efficient incremental mining algorithm for handling newly inserted transactions. In addition to record insertion, record deletion from databases is also commonly seen in real-applications. In this paper, we thus attempt to modify the FP-tree construction algorithm for efficiently handling deletion of records. A fast updated FP-tree (FUFP-tree) structure is used, which makes the tree update process become easier. An FUFP-tree maintenance algorithm for the deletion of records is also proposed for reducing the execution time in reconstructing the tree when records are deleted. Experimental results also show that the proposed FUFP-tree maintenance algorithm for deletion of records runs faster than the batch FP-tree construction algorithm for handling deleted records and generates nearly the same tree structure as the FP-tree algorithm. The proposed approach can thus achieve a good trade-off between execution time and tree complexity. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Maintenance of fast updated frequent pattern trees for record deletion", "paper_id": "WOS:000264907600006"}