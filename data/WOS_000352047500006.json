{"auto_keywords": [{"score": 0.03414863439628197, "phrase": "esa"}, {"score": 0.00481495049065317, "phrase": "stateful_aspects"}, {"score": 0.004620093797504386, "phrase": "program_execution"}, {"score": 0.00450231514359539, "phrase": "modular_implementations"}, {"score": 0.004410248125081398, "phrase": "error_detection"}, {"score": 0.004320055598195391, "phrase": "event_handling"}, {"score": 0.003997891221012094, "phrase": "particular_concern"}, {"score": 0.0035681790580031998, "phrase": "aspect_definitions"}, {"score": 0.003531474887552889, "phrase": "contortive_ways"}, {"score": 0.0034771228725942846, "phrase": "new_specialized_stateful_aspect_languages"}, {"score": 0.0030554300179552415, "phrase": "pattern_language"}, {"score": 0.0030239846974783363, "phrase": "turing-complete"}, {"score": 0.0029164434911787187, "phrase": "composable_first-class_values"}, {"score": 0.0028273061946184645, "phrase": "core_semantic_elements"}, {"score": 0.0026026666736474404, "phrase": "typed_functional_language"}, {"score": 0.0024842242921857705, "phrase": "concrete_and_practical_implementation"}, {"score": 0.0024333323950436465, "phrase": "javascript"}, {"score": 0.0022283519468680475, "phrase": "diverse_scenarios"}, {"score": 0.0021714122348552747, "phrase": "existing_stateful_aspect_languages"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Aspect-oriented programming", " Stateful aspects", " ESA", " Typed racket", " JavaScript"], "paper_abstract": "Stateful aspects can react to the trace of a program execution; they can support modular implementations of several crosscutting concerns like error detection, security, event handling, and debugging. However, most proposed stateful aspect languages have specifically been tailored to address a particular concern. Indeed, most of these languages differ in their pattern languages and semantics. As a consequence, developers need to tweak aspect definitions in contortive ways or create new specialized stateful aspect languages altogether if their specific needs are not supported. In this paper, we describe ESA, an expressive stateful aspect language, in which the pattern language is Turing-complete and patterns themselves are reusable, composable first-class values. In addition, the core semantic elements of every aspect in ESA are open to customization. We describe ESA in a typed functional language. We use this description to develop a concrete and practical implementation of ESA for JavaScript. With this implementation, we illustrate the expressiveness of ESA in action with examples of diverse scenarios and expressing semantics of existing stateful aspect languages. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "An expressive stateful aspect language", "paper_id": "WOS:000352047500006"}