{"auto_keywords": [{"score": 0.049763552914073306, "phrase": "hierarchical_set_decision_diagrams"}, {"score": 0.00481495049065317, "phrase": "efficient_model_checkers"}, {"score": 0.004704844560325455, "phrase": "shared_decision_diagram_representations"}, {"score": 0.004597244847332915, "phrase": "efficient_solutions"}, {"score": 0.004536862734384202, "phrase": "large_systems"}, {"score": 0.004477270137801732, "phrase": "decision_diagram_manipulation"}, {"score": 0.004389339243427964, "phrase": "construction_procedure"}, {"score": 0.004317378385832431, "phrase": "intractable_intermediate_structures"}, {"score": 0.004163172790791119, "phrase": "so-called_saturation_method"}, {"score": 0.00404109360612109, "phrase": "peak_effect"}, {"score": 0.003845500924733243, "phrase": "deep_knowledge"}, {"score": 0.003807529003314843, "phrase": "decision_diagram_data_structures"}, {"score": 0.0037203741725514126, "phrase": "decision_diagrams"}, {"score": 0.003516898780234098, "phrase": "data_structure"}, {"score": 0.003482160257566501, "phrase": "elegant_and_very_efficient_way"}, {"score": 0.003413705707789296, "phrase": "decision_diagram_technology"}, {"score": 0.0033025823350563087, "phrase": "inductive_homomorphisms"}, {"score": 0.003216285378512588, "phrase": "symbolic_transition_relation"}, {"score": 0.0030808211830129304, "phrase": "sdd_library"}, {"score": 0.0030003014343035965, "phrase": "transition_relation"}, {"score": 0.0029608318458226755, "phrase": "saturation_effect"}, {"score": 0.0028644081075973877, "phrase": "sdd_model-checker"}, {"score": 0.0028360962841331634, "phrase": "compositional_formalism"}, {"score": 0.0028173769301594745, "phrase": "instantiable_petri"}, {"score": 0.0027619746286792193, "phrase": "ipn"}, {"score": 0.002707620139970122, "phrase": "abstract_contract"}, {"score": 0.0026455755027979533, "phrase": "elementary_type"}, {"score": 0.0026194209399161184, "phrase": "composite_type"}, {"score": 0.0025424945305785374, "phrase": "elementary_or_composite_type"}, {"score": 0.0024678216843278806, "phrase": "classic_label_synchronization_semantics"}, {"score": 0.0024112587007106535, "phrase": "particular_recursive"}, {"score": 0.00234043119560776, "phrase": "symmetric_systems"}, {"score": 0.0023249757987087055, "phrase": "logarithmic_complexity"}, {"score": 0.002154392046210367, "phrase": "sdd._experimentations"}, {"score": 0.0021049977753042253, "phrase": "well_known_examples"}], "paper_keywords": ["Hierarchical Decision Diagrams", " Model Checking", " Saturation"], "paper_abstract": "Shared decision diagram representations of a state-space provide efficient solutions for model-checking of large systems. However, decision diagram manipulation is tricky, as the construction procedure is liable to produce intractable intermediate structures (a.k.a peak effect). The definition of the so-called saturation method has empirically been shown to mostly avoid this peak effect, and allows verification of much larger systems. However, applying this algorithm currently requires deep knowledge of the decision diagram data structures. Hierarchical Set Decision Diagrams (SDD) are decision diagrams in which arcs of the structure are labeled with sets, themselves stored as SDD. This data structure offers an elegant and very efficient way of encoding structured specifications using decision diagram technology. It also offers, through the concept of inductive homomorphisms, flexibility to a user defining a symbolic transition relation. We show in this paper how, with very limited user input, the SDD library is able to optimize evaluation of a transition relation to produce a saturation effect at runtime. We build as an example an SDD model-checker for a compositional formalism: Instantiable Petri Nets (IPN). IPN define a type as an abstract contract. Labeled P/T nets are used as an elementary type. A composite type is defined to hierarchically contain instances (of elementary or composite type). To compose behaviors, IPN use classic label synchronization semantics from process calculi. With a particular recursive folding SDD are able to offer solutions for symmetric systems in logarithmic complexity with respect to other DD. Even in less regular cases, the use of hierarchy in the specification is shown to be well supported by SDD. Experimentations and performances are reported on some well known examples.", "paper_title": "Building Efficient Model Checkers using Hierarchical Set Decision Diagrams and Automatic Saturation", "paper_id": "WOS:000271472900007"}