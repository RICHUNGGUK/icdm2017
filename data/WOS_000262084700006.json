{"auto_keywords": [{"score": 0.008376438730021333, "phrase": "lloyd's_algorithm"}, {"score": 0.006567859688084132, "phrase": "starting_solution"}, {"score": 0.00481495049065317, "phrase": "efficient_implementation"}, {"score": 0.004771115666493521, "phrase": "k-means_clustering_algorithm"}, {"score": 0.004599712603988837, "phrase": "random_swapping"}, {"score": 0.004556818772080857, "phrase": "average_silhouette_coefficient"}, {"score": 0.0045301165808920045, "phrase": "local_minima"}, {"score": 0.004367333454187657, "phrase": "novel_feature"}, {"score": 0.004134015084535274, "phrase": "small_weighted_set"}, {"score": 0.00405903443476192, "phrase": "original_point"}, {"score": 0.0039854083031404764, "phrase": "considered_problem"}, {"score": 0.0039250703697261595, "phrase": "coreset_construction"}, {"score": 0.0036814304184738774, "phrase": "previous_solution"}, {"score": 0.0034634178245567795, "phrase": "algorithm_kmhybrid"}, {"score": 0.003379859206640552, "phrase": "image_compression_application"}, {"score": 0.0033490453422160677, "phrase": "artificially_created_instances"}, {"score": 0.003160289566495475, "phrase": "input_instances"}, {"score": 0.002991262005863753, "phrase": "kmhybrid"}, {"score": 0.002244543215797895, "phrase": "different_sizes"}, {"score": 0.0021571068309076845, "phrase": "approximate_average_silhouette_coefficient"}], "paper_keywords": ["Computational geometry", " clustering algorithms", " approximation algorithms", " algorithm engineering"], "paper_abstract": "In this paper we develop an efficient implementation for a k-means clustering algorithm. The algorithm is based on a combination of Lloyd's algorithm with random swapping of centers to avoid local minima. This approach was proposed by Mount (30). The novel feature of our algorithms is the use of coresets to speed up the algorithm. A coreset is a small weighted set of points that approximates the original point set with respect to the considered problem. We use a coreset construction described in (12). Our algorithm first computes a solution on a very small coreset. Then in each iteration the previous solution is used as a starting solution on a refined, i.e. larger, coreset. To evaluate the performance of our algorithm we compare it with algorithm KMHybrid (30) on typical 3D data sets for an image compression application and on artificially created instances. Our data sets consist of 300; 000 to 4.9 million points. Our algorithm outperforms KMHybrid on most of these input instances. Additionally, the quality of the solutions computed by our algorithm deviates significantly less than that of KMHybrid. We conclude that the use of coresets has two effects. First, it can speed up algorithms significantly. Secondly, in variants of Lloyd's algorithm, it reduces the dependency on the starting solution and thus makes the algorithm more stable. Finally, we propose the use of coresets as a heuristic to approximate the average silhouette coefficient of clusterings. The average silhouette coefficient is a measure for the quality of a clustering that is independent of the number of clusters k. Hence, it can be used to compare the quality of clusterings for different sizes of k. To show the applicability of our approach we computed clusterings and approximate average silhouette coefficient for k = 1,...,100 for our input instances and discuss the performance of our algorithm in detail.", "paper_title": "A FAST k-MEANS IMPLEMENTATION USING CORESETS", "paper_id": "WOS:000262084700006"}