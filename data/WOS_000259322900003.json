{"auto_keywords": [{"score": 0.04547624598453918, "phrase": "np"}, {"score": 0.027351157836235436, "phrase": "greedy_algorithm"}, {"score": 0.02702982594434296, "phrase": "modified_yehuda-fogel_algorithm"}, {"score": 0.00481495049065317, "phrase": "sequence_partition_algorithms"}, {"score": 0.0047379542803396915, "phrase": "time_complexities"}, {"score": 0.004699916946246509, "phrase": "solution_optimalities"}, {"score": 0.004550783060775205, "phrase": "np-hard_problem"}, {"score": 0.00363080961099728, "phrase": "monotone_subsequences"}, {"score": 0.003473178781851477, "phrase": "worst_case"}, {"score": 0.003403801095792972, "phrase": "new_algorithm"}, {"score": 0.003308986613384597, "phrase": "yehuda-fogel_algorithm"}, {"score": 0.0030646951765987414, "phrase": "comparative_experimental_study"}, {"score": 0.003003452468800793, "phrase": "known_approximation_algorithm"}, {"score": 0.0029792984108210525, "phrase": "approximation_ratio"}, {"score": 0.0027041233221381756, "phrase": "yehuda-fogel"}, {"score": 0.0024642355970277497, "phrase": "approximation_algorithm"}, {"score": 0.0024247382451294255, "phrase": "theoretical_worst-case_error_bounds"}, {"score": 0.0023099954987126, "phrase": "constant_time"}, {"score": 0.002282166507956957, "phrase": "optimal_solution"}, {"score": 0.002227508035618043, "phrase": "practical_use"}, {"score": 0.0021566565951738658, "phrase": "good_choices"}, {"score": 0.0021306709646058295, "phrase": "running_time"}, {"score": 0.0021049977753042253, "phrase": "major_concern"}], "paper_keywords": ["monotone subsequence", " permutation algorithm", " NP-complete", " approximation", " complexity"], "paper_abstract": "Tradeoffs between time complexities and solution optimalities are important when selecting algorithms for an NP-hard problem in different applications. Also, the distinction between theoretical upper bound and actual Solution optimality for realistic instances of an NP-hard problem is a factor in selecting algorithms in practice. We consider the problem of partitioning a sequence of n, distinct numbers into minimum number of monotone (increasing or decreasing) subsequences. This problem is NP-hard and the number of monotone subsequences can reach [root 2n + 1/4 - 1/2] in the worst case. We introduce a new algorithm, the modified version of the Yehuda-Fogel algorithm, that computes a solution of no more than [root 2n + 1/4 - 1/2] monotone subsequences in O(n(1.5)) time. Then we perform a comparative experimental study on three algorithms, a known approximation algorithm of approximation ratio 1.71 and time complexity O(n(3)), a known greedy algorithm of time complexity O(n(1.5) log n), and our new modified Yehuda-Fogel algorithm. Our results show that, the solutions computed by the greedy algorithm and the modified Yehuda-Fogel algorithm are close to that computed by the approximation algorithm even though the theoretical worst-case error bounds of these two algorithms are not proved to be within a constant time of the optimal solution. Our study indicates that for practical use the greedy algorithm and the modified Yehuda-Fogel algorithm can be good choices if the running time is a major concern.", "paper_title": "Design and performance evaluation of sequence partition algorithms", "paper_id": "WOS:000259322900003"}