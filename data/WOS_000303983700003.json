{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java"}, {"score": 0.004745056850725867, "phrase": "cyclic_executives"}, {"score": 0.004608284537368354, "phrase": "chip-multiprocessors_offer"}, {"score": 0.0044104497301196794, "phrase": "low_cost"}, {"score": 0.004099340908974491, "phrase": "real-time_systems"}, {"score": 0.0036198068824262464, "phrase": "optimal_schedules"}, {"score": 0.003541182515693916, "phrase": "computationally_hard_problem"}, {"score": 0.0031497178007011666, "phrase": "static_schedule"}, {"score": 0.00284275228258112, "phrase": "table_driven_multiprocessor_scheduler"}, {"score": 0.002720505061804933, "phrase": "shared_resources"}, {"score": 0.002622647280008795, "phrase": "access_constraints"}, {"score": 0.002565626044684815, "phrase": "schedule_generation"}, {"score": 0.002473325513637559, "phrase": "proposed_cyclic_executive"}, {"score": 0.002265095354846931, "phrase": "safety-critical_java"}, {"score": 0.0022158306933307685, "phrase": "java_processor"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["real-time systems", " Java", " cyclic executive"], "paper_abstract": "Chip-multiprocessors offer increased processing power at a low cost. However, in order to use them for real-time systems, tasks have to be scheduled efficiently and predictably. It is well known that finding optimal schedules is a computationally hard problem. In this paper we present a solution that uses model checking to find a static schedule, if one exists at all, which gives an implementation of a table driven multiprocessor scheduler. Mutual exclusion to access shared resources is guaranteed by including access constraints in the schedule generation. To evaluate the proposed cyclic executive for multiprocessors, we have implemented it in the context of safety-critical Java on a Java processor. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Safety-critical Java with cyclic executives on chip-multiprocessors", "paper_id": "WOS:000303983700003"}