{"auto_keywords": [{"score": 0.0495290999002817, "phrase": "mip"}, {"score": 0.00481495049065317, "phrase": "exact_mixed-integer_programming"}, {"score": 0.004597457370802855, "phrase": "set-covering_model"}, {"score": 0.004440780432053927, "phrase": "small_set"}, {"score": 0.004389745162172933, "phrase": "first-choice_branching_variables"}, {"score": 0.004289419884432487, "phrase": "preliminary_\"sampling\"_phase"}, {"score": 0.004071957673937727, "phrase": "relevant_low-cost_fractional_solutions"}, {"score": 0.003910441483033426, "phrase": "linear_programming"}, {"score": 0.003523822585025555, "phrase": "small_subset"}, {"score": 0.003306559295382181, "phrase": "artificial_intelligence_jargon"}, {"score": 0.003120657021758196, "phrase": "collected_fractional_solutions"}, {"score": 0.003066945490483524, "phrase": "backdoor_variables"}, {"score": 0.0029794666460666646, "phrase": "priority_branching_list"}, {"score": 0.002911278281894321, "phrase": "black-box_mip_solver"}, {"score": 0.0025044454602720597, "phrase": "large_set"}, {"score": 0.0021049977753042253, "phrase": "ibm_ilog_cplex"}], "paper_keywords": ["mixed-integer programming", " branch and bound", " computational analysis"], "paper_abstract": "We present an exact mixed-integer programming (MIP) solution scheme where a set-covering model is used to find a small set of first-choice branching variables. In a preliminary \"sampling\" phase, our method quickly collects a number of relevant low-cost fractional solutions that qualify as obstacles for the linear programming (LP) relaxation bound improvement. Then a set covering model is solved to detect a small subset of variables (a \"backdoor,\" in the artificial intelligence jargon) that \"cover the fractionality\" of the collected fractional solutions. These backdoor variables are put in a priority branching list, and a black-box MIP solver is eventually run-in its default mode-by taking this list into account, thus avoiding any other interference with its highly optimized internal mechanisms. Computational results on a large set of instances from the literature are presented, showing that some speedup can be achieved even with respect to a state-of-the-art solver such as IBM ILOG CPLEX 12.2.", "paper_title": "Backdoor Branching", "paper_id": "WOS:000325742000008"}