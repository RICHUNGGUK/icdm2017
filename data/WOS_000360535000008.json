{"auto_keywords": [{"score": 0.03310942563843795, "phrase": "sapper"}, {"score": 0.00481495049065317, "phrase": "hardware-level_security_policy_enforcement"}, {"score": 0.004681971826924847, "phrase": "important_security_concerns"}, {"score": 0.00453144352814823, "phrase": "controlling_information_flow"}, {"score": 0.004205226397573506, "phrase": "information_flow"}, {"score": 0.004146716743362567, "phrase": "implicit_assumption"}, {"score": 0.003848088904418221, "phrase": "hardware's_instruction"}, {"score": 0.003587616378156851, "phrase": "modern_hardware_designs"}, {"score": 0.0035542408902458677, "phrase": "complete_verification"}, {"score": 0.00329813918116714, "phrase": "implementation_bugs"}, {"score": 0.0032370412139943808, "phrase": "surprising_frequency"}, {"score": 0.003003726508522467, "phrase": "security-critical_hardware_components"}, {"score": 0.0028664985822266344, "phrase": "static_analysis"}, {"score": 0.002787181295054319, "phrase": "dynamic_checks"}, {"score": 0.0027483472371835865, "phrase": "resulting_hardware"}, {"score": 0.002598333022293788, "phrase": "sapper's_design"}, {"score": 0.0025741370320813968, "phrase": "formal_semantics"}, {"score": 0.0025264171945423254, "phrase": "proof_sketch"}, {"score": 0.002300734266971646, "phrase": "non-trivial_secure_embedded_processor"}, {"score": 0.002185301851004467, "phrase": "resulting_hardware's_area"}, {"score": 0.0021049977753042253, "phrase": "alternative_designs"}], "paper_keywords": ["Hardware Description Language", " Non-interference"], "paper_abstract": "Privacy and integrity are important security concerns. These concerns are addressed by controlling information flow, i.e., restricting how information can flow through a system. Most proposed systems that restrict information flow make the implicit assumption that the hardware used by the system is fully \"correct\" and that the hardware's instruction set accurately describes its behavior in all circumstances. The truth is more complicated: modern hardware designs defy complete verification; many aspects of the timing and ordering of events are left totally unspecified; and implementation bugs present themselves with surprising frequency. In this work we describe Sapper, a novel hardware description language for designing security-critical hardware components. Sapper seeks to address these problems by using static analysis at compile-time to automatically insert dynamic checks in the resulting hardware that provably enforce a given information flow policy at execution time. We present Sapper's design and formal semantics along with a proof sketch of its security. In addition, we have implemented a compiler for Sapper and used it to create a non-trivial secure embedded processor with many modern microarchitectural features. We empirically evaluate the resulting hardware's area and energy overhead and compare them with alternative designs.", "paper_title": "Sapper: A Language for Hardware-Level Security Policy Enforcement", "paper_id": "WOS:000360535000008"}