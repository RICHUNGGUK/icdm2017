{"auto_keywords": [{"score": 0.048901199639170195, "phrase": "nielsen"}, {"score": 0.00481495049065317, "phrase": "logical_foundation"}, {"score": 0.004543046350523362, "phrase": "sound_type_system"}, {"score": 0.004449688143230257, "phrase": "environment_classifiers"}, {"score": 0.004376378707877484, "phrase": "special_identifiers"}, {"score": 0.0042864307215634756, "phrase": "variable_declarations"}, {"score": 0.003847546889061499, "phrase": "curry-howard_isomorphism"}, {"score": 0.003630073540438812, "phrase": "multi-modal_logic"}, {"score": 0.0035554096354423756, "phrase": "transition_variables"}, {"score": 0.003340475943517995, "phrase": "possible_worlds"}, {"score": 0.002828556054338357, "phrase": "multi-stage_calculus"}, {"score": 0.002805121439110729, "phrase": "time-ordered_normalization"}, {"score": 0.002690820958068933, "phrase": "big-step_evaluation_semantics"}, {"score": 0.002657445352746803, "phrase": "ml-like_language"}, {"score": 0.002316476356455291, "phrase": "erasure_evaluation"}, {"score": 0.0022220423638260015, "phrase": "proof_system"}, {"score": 0.0021853532419450887, "phrase": "classical_axiom"}, {"score": 0.0021049977753042253, "phrase": "kripke_semantics"}], "paper_keywords": ["Curry-Howard correspondence", " Environment classifiers", " Modal logic", " Multi-stage calculus"], "paper_abstract": "Taha and Nielsen have developed a multi-stage calculus lambda(alpha) with a sound type system using the notion of environment classifiers. They are special identifiers, with which code fragments and variable declarations are annotated, and their scoping mechanism is used to ensure statically that certain code fragments are closed and safely runnable. In this paper, we investigate the Curry-Howard isomorphism for environment classifiers by developing a typed lambda-calculus lambda((sic)). It corresponds to multi-modal logic that allows quantification by transition variables-a counterpart of classifiers-which range over (possibly empty) sequences of labeled transitions between possible worlds. This interpretation will reduce the \"run\" construct-which has a special typing rule in lambda(alpha)-and embedding of closed code into other code fragments of different stages-which would be only realized by the cross-stage persistence operator in lambda(alpha)-to merely a special case of classifier application. lambda((sic)) enjoys not only basic properties including subject reduction, confluence, and strong normalization but also an important property as a multi-stage calculus: time-ordered normalization of full reduction. Then, we develop a big-step evaluation semantics for an ML-like language based on lambda((sic)) with its type system and prove that the evaluation of a well-typed lambda((sic)) program is properly staged. We also identify a fragment of the language, where erasure evaluation is possible. Finally, we show that the proof system augmented with a classical axiom is sound and complete with respect to a Kripke semantics of the logic.", "paper_title": "A LOGICAL FOUNDATION FOR ENVIRONMENT CLASSIFIERS", "paper_id": "WOS:000287816900008"}