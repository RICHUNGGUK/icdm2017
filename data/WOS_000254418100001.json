{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "-mode_ad"}, {"score": 0.004728624975677976, "phrase": "functional_framework"}, {"score": 0.0046159158660556985, "phrase": "ultimate_backpropagator"}, {"score": 0.004042166795461166, "phrase": "first-class_function"}, {"score": 0.003969640975997097, "phrase": "augmented_lambda_calculus"}, {"score": 0.0038284549148537373, "phrase": "functional-programming_language"}, {"score": 0.003626000977962191, "phrase": "new_operator"}, {"score": 0.0034342161742428635, "phrase": "augmented_language"}, {"score": 0.0030069062905274976, "phrase": "nested_lambda_expressions"}, {"score": 0.00291743479583421, "phrase": "free-variable_references"}, {"score": 0.0027630232270330402, "phrase": "self_application"}, {"score": 0.0027133856739937133, "phrase": "ad_machinery"}, {"score": 0.002680789041160613, "phrase": "ad_transformations"}, {"score": 0.0025542617599268323, "phrase": "reverse_phase"}, {"score": 0.002508365161206412, "phrase": "reverse-mode_ad_transformation"}, {"score": 0.0023755529073496394, "phrase": "original_untransformed_function"}, {"score": 0.0023470051993423483, "phrase": "first-class_unrestricted_ad_operators"}, {"score": 0.0022361964497681934, "phrase": "numeric_programmer"}, {"score": 0.002169607777109063, "phrase": "significant_practical_implications"}, {"score": 0.0021049977753042253, "phrase": "numeric_software"}], "paper_keywords": ["experimentation", " languages", " performance", " closures", " derivatives", " forward-mode AD", " higher-order AD", " higher-order functional languages", " Jacobian", " program transformation", " reflection"], "paper_abstract": "We show that reverse-mode AD (Automatic Differentiation)-a generalized gradient-calculation operator-can be incorporated as a first-class function in an augmented lambda calculus, and therefore into a functional-programming language. Closure is achieved, in that the new operator can be applied to any expression in the augmented language, yielding an expression in that language. This requires the resolution of two major technical issues: (a) how to transform nested lambda expressions, including those with free-variable references, and (b) how to support self application of the AD machinery. AD transformations preserve certain complexity properties, among them that the reverse phase of the reverse-mode AD transformation of a function have the same temporal complexity as the original untransformed function. First-class unrestricted AD operators increase the expressive power available to the numeric programmer, and may have significant practical implications for the construction of numeric software that is robust, modular, concise, correct, and efficient.", "paper_title": "Reverse-mode AD in a functional framework: Lambda the ultimate backpropagator", "paper_id": "WOS:000254418100001"}