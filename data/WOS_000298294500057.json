{"auto_keywords": [{"score": 0.0496578611773389, "phrase": "parametric_polymorphism"}, {"score": 0.047004135453779405, "phrase": "overloaded_functions"}, {"score": 0.009620561273254214, "phrase": "exclusion_relation"}, {"score": 0.00481495049065317, "phrase": "modular_multiple_dispatch"}, {"score": 0.0046477357199085035, "phrase": "previous_work"}, {"score": 0.004446823283475876, "phrase": "type_safety"}, {"score": 0.004407690586271672, "phrase": "symmetric_multiple_dispatch"}, {"score": 0.0043496334756644535, "phrase": "object-oriented_language"}, {"score": 0.004052616113326177, "phrase": "entire_type_hierarchy"}, {"score": 0.003502305158321511, "phrase": "multiple-inheritance_language"}, {"score": 0.002832081745025006, "phrase": "\"nominal_exclusions"}, {"score": 0.002733539375462443, "phrase": "different_instances"}, {"score": 0.002697474061842142, "phrase": "polymorphic_type"}, {"score": 0.0025465957200502404, "phrase": "declared_and_implicit_ones"}, {"score": 0.0022297712188622293, "phrase": "subtyping_relationships"}, {"score": 0.0022101055924375725, "phrase": "universal_and_existential_types"}, {"score": 0.0021049977753042253, "phrase": "open-source_fortress_compiler"}], "paper_keywords": ["Languages", " object-oriented programming", " multiple dispatch", " symmetric dispatch", " multiple inheritance", " overloading", " modularity", " methods", " multimethods", " static types", " run-time types", " ilks", " components", " separate compilation", " Fortress", " meet rule"], "paper_abstract": "In previous work, we presented rules for defining overloaded functions that ensure type safety under symmetric multiple dispatch in an object-oriented language with multiple inheritance, and we showed how to check these rules without requiring the entire type hierarchy to be known, thus supporting modularity and extensibility. In this work, we extend these rules to a language that supports parametric polymorphism on both classes and functions. In a multiple-inheritance language in which any type may be extended by types in other modules, some overloaded functions that might seem valid are correctly rejected by our rules. We explain how these functions can be permitted in a language that additionally supports an exclusion relation among types, allowing programmers to declare \"nominal exclusions\" and also implicitly imposing exclusion among different instances of each polymorphic type. We give rules for computing the exclusion relation, deriving many type exclusions from declared and implicit ones. We also show how to check our rules for ensuring the safety of overloaded functions. In particular, we reduce the problem of handling parametric polymorphism to one of determining subtyping relationships among universal and existential types. Our system has been implemented as part of the open-source Fortress compiler.", "paper_title": "Type Checking Modular Multiple Dispatch with Parametric Polymorphism and Multiple Inheritance", "paper_id": "WOS:000298294500057"}