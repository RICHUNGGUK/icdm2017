{"auto_keywords": [{"score": 0.028280350209602168, "phrase": "bof_vulnerabilities"}, {"score": 0.00481495049065317, "phrase": "buffer_overflow_vulnerabilities."}, {"score": 0.004737579882204798, "phrase": "numerous_vulnerabilities"}, {"score": 0.004586531354697466, "phrase": "successful_exploitations"}, {"score": 0.00445830200258645, "phrase": "severe_consequences"}, {"score": 0.004333642054036135, "phrase": "application_state_corruptions"}, {"score": 0.004229556887896042, "phrase": "effective_quality_assurance_methods"}, {"score": 0.003996271202811961, "phrase": "popular_assurance_method"}, {"score": 0.003884479830773329, "phrase": "effective_testing"}, {"score": 0.003822003373331997, "phrase": "effective_test_suite"}, {"score": 0.00374531366198605, "phrase": "test_cases"}, {"score": 0.003670157084732341, "phrase": "specific_faults"}, {"score": 0.0035965032173588753, "phrase": "different_testing_approaches"}, {"score": 0.0033433365160336842, "phrase": "test_suites"}, {"score": 0.0031845067058084583, "phrase": "mutation-based_assessment"}, {"score": 0.0029244418026475832, "phrase": "mutation-based_adequate_testing"}, {"score": 0.002865710140187219, "phrase": "worst_vulnerabilities"}, {"score": 0.002685558057339722, "phrase": "adequate_test_suites"}, {"score": 0.0026316112429083235, "phrase": "prototype_tool"}, {"score": 0.002537216271965659, "phrase": "mutation_analysis"}, {"score": 0.0025167026017217926, "phrase": "input_test_cases"}, {"score": 0.002311047934798247, "phrase": "proposed_operators"}, {"score": 0.0021745003291048356, "phrase": "selective_mutation_operators"}, {"score": 0.0021221627745801478, "phrase": "mutation-based_testing"}, {"score": 0.002104999186027529, "phrase": "bof"}], "paper_keywords": ["Buffer overflow", " mutation-based testing", " test adequacy", " vulnerability testing"], "paper_abstract": "Over the last few years, numerous vulnerabilities have been reported in software, and successful exploitations of these vulnerabilities have resulted in severe consequences such as denial of services and application state corruptions. Researches have shown that effective quality assurance methods can prevent such consequences when applied during software (or applications) development processes. Software security testing is a popular assurance method in this direction. However, effective testing involves obtaining an effective test suite (or collection of test cases) that can reveal specific faults. Over the last few years, different testing approaches have been applied for revealing vulnerabilities in software. However, only few works have assessed the effectiveness of test suites for revealing vulnerabilities. We believe that bringing the idea of mutation-based assessment of test adequacy for vulnerabilities can help in detecting and removing vulnerabilities proactively. In this work, we apply mutation-based adequate testing for one of the worst vulnerabilities namely buffer overflow (BOF). We propose 16 mutation operators to force the generation of adequate test suites for BOF vulnerabilities. A prototype tool is developed to automatically generate mutants and perform mutation analysis with input test cases. The effectiveness of the operators is evaluated by using several benchmark programs having BOF vulnerabilities, and the results indicate that the proposed operators are effective for testing BOF vulnerabilities. Moreover, we present an analysis to find selective mutation operators for reducing the cost of mutation-based testing of BOF vulnerabilities.", "paper_title": "ASSESSING TEST SUITES FOR BUFFER OVERFLOW VULNERABILITIES", "paper_id": "WOS:000278422900006"}