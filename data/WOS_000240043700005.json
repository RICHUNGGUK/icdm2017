{"auto_keywords": [{"score": 0.049558064870310475, "phrase": "distinct_keys"}, {"score": 0.02968310056481977, "phrase": "general_sorting"}, {"score": 0.00481495049065317, "phrase": "limited_number"}, {"score": 0.00471071771178029, "phrase": "sorting_such_data_sets"}, {"score": 0.004508942069742167, "phrase": "identical_keys"}, {"score": 0.004041359131062721, "phrase": "efficient_algorithm"}, {"score": 0.0039322149318145845, "phrase": "external_memory"}, {"score": 0.0034102660898135155, "phrase": "internal_memory"}, {"score": 0.00319324425647735, "phrase": "transfer_block_size"}, {"score": 0.0025786066704445304, "phrase": "bundle_sorting"}, {"score": 0.002536534348967786, "phrase": "improved_running_time"}, {"score": 0.0022980978400845144, "phrase": "important_feature"}, {"score": 0.002260591903283384, "phrase": "new_algorithm"}, {"score": 0.0021049977753042253, "phrase": "additional_disk_space"}], "paper_keywords": ["sorting", " external memory", " bundle sorting", " algorithms"], "paper_abstract": "Many data sets to be sorted consist of a limited number of distinct keys. Sorting such data sets can be thought of as bundling together identical keys and having the bundles placed in order; we therefore denote this as bundle sorting. We describe an efficient algorithm for bundle sorting in external memory, which requires at most c(N/B) log(M/B) k disk accesses, where N is the number of keys, M is the size of internal memory, k is the number of distinct keys, B is the transfer block size, and 2<c<4. For moderately sized k, this bound circumvents the Theta((N/B) log(M/B)(N/B)) I/O lower bound known for general sorting. We show that our algorithm is optimal by proving a matching lower bound for bundle sorting. The improved running time of bundle sorting over general sorting can be significant in practice, as demonstrated by experimentation. An important feature of the new algorithm is that it is executed \"in-place,\" requiring no additional disk space.", "paper_title": "Efficient bundle sorting", "paper_id": "WOS:000240043700005"}