{"auto_keywords": [{"score": 0.040592362494735586, "phrase": "software_adaptation"}, {"score": 0.00481495049065317, "phrase": "behavioral_mismatching_components"}, {"score": 0.004747429622531595, "phrase": "component-based_software_engineering"}, {"score": 0.004550469496119256, "phrase": "existing_software_components"}, {"score": 0.0034299649219748513, "phrase": "component_interfaces"}, {"score": 0.003310813458610484, "phrase": "promising_solution"}, {"score": 0.0031732652552570644, "phrase": "real_market"}, {"score": 0.0030847461428168614, "phrase": "software_reuse"}, {"score": 0.0027546167254869493, "phrase": "abstract_notation"}, {"score": 0.0026967596578196325, "phrase": "synchronous_vectors"}, {"score": 0.002658863179011018, "phrase": "transition_systems"}, {"score": 0.002603012037901889, "phrase": "adaptation_rules"}, {"score": 0.0024947959375982614, "phrase": "dedicated_algorithms"}, {"score": 0.0024251568696803177, "phrase": "adaptor_protocols"}, {"score": 0.0021049977753042253, "phrase": "user-friendly_graphical_interface"}], "paper_keywords": ["software components", " interfaces", " mismatch", " composition", " software adaptation", " adaptation contracts", " vectors", " transition systems", " synchronous products", " Petri nets", " tools"], "paper_abstract": "Component-Based Software Engineering focuses on the reuse of existing software components. In practice, most components cannot be integrated directly into an application-to-be because they are incompatible. Software Adaptation aims at generating, as automatically as possible, adaptors to compensate for a mismatch between component interfaces and is therefore a promising solution for the development of a real market of components promoting software reuse. In this paper, we present our approach for software adaptation, which relies on an abstract notation based on synchronous vectors and transition systems for governing adaptation rules. Our proposal is supported by dedicated algorithms that automatically generate adaptor protocols. These algorithms have been implemented in a tool, called Adaptor, which can be used through a user-friendly graphical interface.", "paper_title": "Model-based adaptation of behavioral mismatching components", "paper_id": "WOS:000257936500009"}