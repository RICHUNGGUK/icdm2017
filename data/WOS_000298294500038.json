{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "substructural_types"}, {"score": 0.004529093447865156, "phrase": "structured_error"}, {"score": 0.004426308135681733, "phrase": "high-level_languages"}, {"score": 0.004163427731140163, "phrase": "linear_types"}, {"score": 0.004007083686875716, "phrase": "control_effects"}, {"score": 0.0034118234596993836, "phrase": "substructural_usage_guarantees"}, {"score": 0.0031360786664165093, "phrase": "type-and-effect_system"}, {"score": 0.0025892330566358503, "phrase": "abstract_control_effects"}, {"score": 0.002361632539339945, "phrase": "particular_control_effects"}, {"score": 0.002272794656458419, "phrase": "delimited_continuations"}, {"score": 0.002137537770621167, "phrase": "soundness_criteria"}, {"score": 0.0021049977753042253, "phrase": "specific_control_effects"}], "paper_keywords": ["Languages"], "paper_abstract": "Exceptions are invaluable for structured error handling in high-level languages, but they are at odds with linear types. More generally, control effects may delete or duplicate portions of the stack, which, if we are not careful, can invalidate all substructural usage guarantees for values on the stack. We have developed a type-and-effect system that tracks control effects and ensures that values on the stack are never wrongly duplicated or dropped. We present the system first with abstract control effects and prove its soundness. We then give examples of three instantiations with particular control effects, including exceptions and delimited continuations, and show that they meet the soundness criteria for specific control effects.", "paper_title": "A Theory of Substructural Types and Control", "paper_id": "WOS:000298294500038"}