{"auto_keywords": [{"score": 0.04705719134290522, "phrase": "space-filling_curves"}, {"score": 0.00481495049065317, "phrase": "parallel_space-filling_curve_generation"}, {"score": 0.004719473826242326, "phrase": "parallel_sorting_algorithms"}, {"score": 0.004672444473700524, "phrase": "multiple_sorting_algorithms"}, {"score": 0.004184921610672245, "phrase": "performance_models"}, {"score": 0.004040688646993609, "phrase": "measured_performance"}, {"score": 0.003901407184706592, "phrase": "still_larger_numbers"}, {"score": 0.0038048583022763796, "phrase": "large_numbers"}, {"score": 0.003673675864705682, "phrase": "adaptive_mesh_refined_codes"}, {"score": 0.0036007478932719417, "phrase": "individual_components"}, {"score": 0.00354700018079049, "phrase": "adaptive_solver"}, {"score": 0.003459191419478298, "phrase": "dynamic_load_balancer"}, {"score": 0.003407549468745519, "phrase": "adaptive_mesh"}, {"score": 0.0033905067962602515, "phrase": "refined_codes"}, {"score": 0.003240895431893266, "phrase": "load_imbalance"}, {"score": 0.0031448288291084, "phrase": "load-balancing_phase"}, {"score": 0.003097865379563127, "phrase": "load_balancing"}, {"score": 0.0029909851863915283, "phrase": "load_balancer"}, {"score": 0.0028877818105020434, "phrase": "dynamic_load_balancing"}, {"score": 0.0027329336840886346, "phrase": "hilbert"}, {"score": 0.002678433668156676, "phrase": "good_partitions"}, {"score": 0.0025219085140220773, "phrase": "serial_generation"}, {"score": 0.0021802872319258977, "phrase": "integer_sorting"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["space-filling curves", " parallel", " dynamic load balancing", " sorting", " adaptive mesh refinement"], "paper_abstract": "In this paper we consider the scalability of parallel space-filling curve generation as implemented through parallel sorting algorithms. Multiple sorting algorithms are studied and results show that space-filling curves can be generated quickly in parallel on thousands of processors. In addition, performance models are presented that are consistent with measured performance and offer insight into performance on still larger numbers of processors. At large numbers of processors, the scalability of adaptive mesh refined codes depends on the individual components of the adaptive solver. One such component is the dynamic load balancer. In adaptive mesh refined codes, the mesh is constantly changing resulting in load imbalance among the processors requiring a load-balancing phase. The load balancing may occur often, requiring the load balancer to perform quickly. One common method for dynamic load balancing is to use space-filling curves. Space-filling curves, in particular the Hilbert curve, generate good partitions quickly in serial. However, at tens and hundreds of thousands of processors serial generation of space-filling curves will hinder scalability. In order to avoid this issue we have developed a method that generates space-filling curves quickly in parallel by reducing the generation to integer sorting. Copyright (c) 2007 John Wiley & Sons, Ltd.", "paper_title": "Parallel space-filling curve generation through sorting", "paper_id": "WOS:000247700800002"}