{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mils_systems"}, {"score": 0.004772367030970874, "phrase": "safety-critical_systems"}, {"score": 0.004425215632459868, "phrase": "critical_data"}, {"score": 0.004386063799793622, "phrase": "hostile_environments"}, {"score": 0.004251728624599691, "phrase": "unauthorized_subjects"}, {"score": 0.003804550737731054, "phrase": "safety-critical_systems_design"}, {"score": 0.0035590664550919854, "phrase": "security_functions"}, {"score": 0.003527550673371394, "phrase": "potential_error"}, {"score": 0.003314591878914152, "phrase": "secure_systems"}, {"score": 0.0031703706626348507, "phrase": "system_complexity"}, {"score": 0.002992195343569767, "phrase": "whole_development"}, {"score": 0.0029394074636168435, "phrase": "high-level_specification"}, {"score": 0.002824005136794786, "phrase": "final_implementation"}, {"score": 0.002761856557698856, "phrase": "application_functions"}, {"score": 0.0027252240573281163, "phrase": "security_mechanisms"}, {"score": 0.002641621667026613, "phrase": "complete_development_approach"}, {"score": 0.002537880772794665, "phrase": "mils_architectures"}, {"score": 0.0024600113832396187, "phrase": "complete_framework"}, {"score": 0.002427372728532664, "phrase": "secure_applications"}, {"score": 0.0023951660734372877, "phrase": "mils_guidelines"}, {"score": 0.002352886041381761, "phrase": "security_concerns"}, {"score": 0.002321665383971456, "phrase": "modeling_language"}, {"score": 0.002290858045013009, "phrase": "security_requirements"}, {"score": 0.0022404162042797262, "phrase": "system_code_generation_techniques"}, {"score": 0.00221068461235127, "phrase": "mils-compliant_operating_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["MILS", " AADL", " POK", " code generation", " Ocarina"], "paper_abstract": "Safety-critical systems are used in many domains (military, avionics, aerospace, etc.) and handle critical data in hostile environments. To prevent data access by unauthorized subjects, they must protect and isolate information so that only allowed entities can read or write information. However, because of their increased number of functionalities, safety-critical systems design becomes more complex; this increases difficulties in the design and the verification of security functions and potential error in their implementation. The multiple independent levels of security (MILS) approach introduces rules and guidelines for the design of secure systems. It isolates data according to their security levels, reducing system complexity to ease development. However, there is no approach addressing the whole development of MILS systems from high-level specification (application components with their security levels) to the final implementation (code that executes application functions and provide security mechanisms). This paper presents a complete development approach for the design, verification and implementation of MILS architectures. It aims at providing a complete framework to build secure applications based on MILS guidelines. We describe security concerns using a modeling language, verify security requirements and automatically implement the system code generation techniques and a MILS-compliant operating system that provides security functions. Copyright (C) 2012 John Wiley & Sons, Ltd.", "paper_title": "Design, implementation and verification of MILS systems", "paper_id": "WOS:000304819600003"}