{"auto_keywords": [{"score": 0.04848464366549708, "phrase": "class_invariants"}, {"score": 0.00481495049065317, "phrase": "design_patterns"}, {"score": 0.004233492114255375, "phrase": "visitor_pattern"}, {"score": 0.00414830454375092, "phrase": "decorator_pattern"}, {"score": 0.0024440836179156593, "phrase": "quantitative_results"}, {"score": 0.0022992346264367374, "phrase": "additional_faults"}, {"score": 0.0022074592164608134, "phrase": "case_study"}], "paper_keywords": ["class invariants", " validation", " design patterns", " Object Constraint Language"], "paper_abstract": "In this paper, techniques are presented that exploit two design patterns, the Visitor pattern and the Decorator pattern, to validate invariants about the data attributes in a C++ class automatically. To investigate the pragmatics involved in using the two patterns, a study of an existing, well-tested application, keystone, a parser and front-end for the C++ language, is presented. Results from the study indicate that these two patterns provide flexibility in terms of the frequency and level of granularity of validation of the class invariants, which are expressed in the Object Constraint Language (OCL). The quantitative results measure the impact of these approaches and the additional faults uncovered through validation of the case study. Copyright (C) 2005 John Wiley & Sons, Ltd.", "paper_title": "Exploiting design patterns to automate validation of class invariants", "paper_id": "WOS:000238382900002"}