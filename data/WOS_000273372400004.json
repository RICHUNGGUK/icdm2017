{"auto_keywords": [{"score": 0.049071348258906654, "phrase": "unit_tests"}, {"score": 0.022906160929595052, "phrase": "mutation_score_indicator"}, {"score": 0.010612387000973441, "phrase": "test-first_programming"}, {"score": 0.010537830340121374, "phrase": "branch_coverage"}, {"score": 0.0044535760439663235, "phrase": "software_development_practices"}, {"score": 0.004237803085579238, "phrase": "fault_detection"}, {"score": 0.004207840198934805, "phrase": "code_coverage_measures"}, {"score": 0.004061160863655662, "phrase": "unit_test_suites"}, {"score": 0.004018158280364063, "phrase": "mutation_testing"}, {"score": 0.0037295765964056255, "phrase": "test-last_programming_practices"}, {"score": 0.0035487559182107112, "phrase": "student_subjects"}, {"score": 0.003486316700608598, "phrase": "test-first_and_test-last_groups"}, {"score": 0.003400736815046841, "phrase": "pre-existing_differences"}, {"score": 0.003258871417680268, "phrase": "multivariate_analysis"}, {"score": 0.0030788521585190833, "phrase": "statistically_significant_difference"}, {"score": 0.0030354183220734064, "phrase": "test-last_practices"}, {"score": 0.0030032443093632125, "phrase": "combined_dependent_variables"}, {"score": 0.002728557856380231, "phrase": "pre-test_results"}, {"score": 0.002699627613420169, "phrase": "subjects'_experience"}, {"score": 0.0025961429982767257, "phrase": "assigned_programming_technique"}, {"score": 0.0024877583128884457, "phrase": "preliminary_results"}, {"score": 0.00240089402509933, "phrase": "test-first_practice"}, {"score": 0.0023754296478100865, "phrase": "specific_context"}, {"score": 0.0022762383517229957, "phrase": "first-ever_experimental_evaluation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Empirical study", " Test-First programming", " Test-driven development", " Unit tests"], "paper_abstract": "Background: Test-First programming is regarded as one of the software development practices that can make unit tests to be more rigorous, thorough and effective in fault detection. Code coverage measures can be useful as indicators of the thoroughness of unit test suites, while mutation testing turned out to be effective at finding faults. Objective: This paper presents an experiment in which Test-First vs. Test-Last programming practices are examined with regard to branch coverage and mutation score indicator of unit tests. Method: Student subjects were randomly assigned to Test-First and Test-Last groups. In order to further reduce pre-existing differences among subjects, and to get a more sensitive measure of our experimental effect, multivariate analysis of covariance was performed. Results: Multivariate tests results indicate that there is no statistically significant difference between Test-First and Test-Last practices on the combined dependent variables, i.e. branch coverage and mutation score indicator, (F(2,9) = .52, p > .05), even if we control for the pre-test results, the subjects' experience, and when the subjects who showed deviations from the assigned programming technique are excluded from the analysis. Conclusion: According to the preliminary results presented in this paper. the benefits of the Test-First practice in this specific context can be considered minor. Limitation: It is probably the first-ever experimental evaluation of the impact of Test-First programming on mutation score indicator of unit tests and further experimentation is needed to establish evidence. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "The impact of Test-First programming on branch coverage and mutation score indicator of unit tests: An experiment", "paper_id": "WOS:000273372400004"}