{"auto_keywords": [{"score": 0.03564752791514837, "phrase": "change_propagation"}, {"score": 0.008359374706400403, "phrase": "association-rule_mining"}, {"score": 0.00481495049065317, "phrase": "applying_association_mining_to_change"}, {"score": 0.0047370749839861165, "phrase": "software_system"}, {"score": 0.004535481695403089, "phrase": "new_features"}, {"score": 0.004486432283770142, "phrase": "repair_defects"}, {"score": 0.004437910956996051, "phrase": "software_components"}, {"score": 0.0036886073959526396, "phrase": "accurate_detection"}, {"score": 0.0035507457285983268, "phrase": "software_maintenance"}, {"score": 0.0034180189629740426, "phrase": "accurate_prediction"}, {"score": 0.003115943429856241, "phrase": "linux"}, {"score": 0.003032228032253871, "phrase": "apache_http_server"}, {"score": 0.002966900048034132, "phrase": "association_rules"}, {"score": 0.002918826667294298, "phrase": "data-mining_techniques"}, {"score": 0.0028715299874549245, "phrase": "change-propagation_rules"}, {"score": 0.0028249975318149468, "phrase": "product_version_history"}, {"score": 0.0026898636962522505, "phrase": "different_training_data_sets"}, {"score": 0.0026607205525625995, "phrase": "different_test_data_sets"}, {"score": 0.002386062690026682, "phrase": "challenging_issue"}, {"score": 0.0022718774783143203, "phrase": "software_systems"}, {"score": 0.0022472527731744974, "phrase": "concept_drift"}, {"score": 0.002186849855560281, "phrase": "change-propagation_prediction"}, {"score": 0.002151388538895855, "phrase": "special_approaches"}, {"score": 0.0021049977753042253, "phrase": "currently-used_techniques"}], "paper_keywords": ["Maintenance", " change propagation", " association-rule mining", " concept drift", " Linux", " FreeBSD", " Apache HTTP Server"], "paper_abstract": "A software system evolves as changes are made to accommodate new features and repair defects. Software components are frequently interdependent, so changes made to one component can result in changes having to be made to other components to ensure that the system remains consistent; this is called change propagation. Accurate detection of change propagation is essential for software maintenance, which can be aided by accurate prediction of change propagation. In this paper, we study change propagation in three leading open-sources of software products: Linux, FreeBSD, and Apache HTTP Server. We use association rules-based data-mining techniques to detect change-propagation rules from the product version history. These rules are evaluated with respect to different training data sets and different test data sets. We discuss the applicability of using association-rule mining for change propagation, and several related issues. We find that a challenging issue in association-rule mining, concept drift, exists in software systems. Concept drift complicates the task of change-propagation prediction and requires special approaches, different from currently-used techniques for predicting change propagation.", "paper_title": "APPLYING ASSOCIATION MINING TO CHANGE PROPAGATION", "paper_id": "WOS:000264215600003"}