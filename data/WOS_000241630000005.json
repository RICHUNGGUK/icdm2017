{"auto_keywords": [{"score": 0.04355159126538614, "phrase": "program_calculation"}, {"score": 0.041562269310917936, "phrase": "program_transformation"}, {"score": 0.00481495049065317, "phrase": "calculation_form"}, {"score": 0.0046238380150870435, "phrase": "program_optimization"}, {"score": 0.004404445045826858, "phrase": "new_fascination"}, {"score": 0.003900257249255497, "phrase": "arbitrary_programs"}, {"score": 0.003806541299696042, "phrase": "calculational_approach"}, {"score": 0.003685067218455088, "phrase": "program_structures"}, {"score": 0.0035386420095120706, "phrase": "suitable_calculational_forms"}, {"score": 0.003236596168242036, "phrase": "generic_algebraic_laws"}, {"score": 0.0031845067058084583, "phrase": "program_manipulation"}, {"score": 0.002936331371903168, "phrase": "basic_idea"}, {"score": 0.0026423134393535265, "phrase": "optimization_technique"}, {"score": 0.002578745296475411, "phrase": "loop_fusion"}, {"score": 0.0025167026017217926, "phrase": "parallelization_transformation"}, {"score": 0.0023776656246300063, "phrase": "calculational_form"}, {"score": 0.002246292543825748, "phrase": "calculational_forms"}, {"score": 0.0021922308351126746, "phrase": "higher_modularity"}, {"score": 0.0021049977753042253, "phrase": "efficient_implementation"}], "paper_keywords": ["program transformation", " program calculation", " program optimization", " meta programming", " functional programming"], "paper_abstract": "The world of program optimization and transformation takes on a new fascination when viewed through the lens of program calculation. Unlike the traditional fold/unfold approach to program transformation on arbitrary programs, the calculational approach imposes restrictions on program structures, resulting in some suitable calculational forms such as homomorphisms and mutumorphisms that enjoy a collection of generic algebraic laws for program manipulation. In this tutorial, we will explain the basic idea of program calculation, demonstrate that many program optimizations and transformations, such as the optimization technique known as loop fusion and the parallelization transformation, can be concisely reformalized in calculational form, and show that program transformation in calculational forms is of higher modularity and more suitable for efficient implementation.", "paper_title": "Program optimizations and transformations in calculation form", "paper_id": "WOS:000241630000005"}