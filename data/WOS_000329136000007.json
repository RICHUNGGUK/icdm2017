{"auto_keywords": [{"score": 0.04769632635828977, "phrase": "embedded_programs"}, {"score": 0.00481495049065317, "phrase": "regression_test_selection_technique"}, {"score": 0.004766090327062509, "phrase": "embedded_software"}, {"score": 0.004622450915803531, "phrase": "regression_test_selection"}, {"score": 0.004460309246062286, "phrase": "data-and_control-dependency_analyses"}, {"score": 0.0042819270655224916, "phrase": "existing_techniques"}, {"score": 0.004152818376630929, "phrase": "additional_execution_dependencies"}, {"score": 0.0040481944502103505, "phrase": "code_elements"}, {"score": 0.0038467574225322086, "phrase": "task_deadlines"}, {"score": 0.003807684498435389, "phrase": "task_precedences"}, {"score": 0.0037498152007206815, "phrase": "intertask_communications"}, {"score": 0.003581412258960711, "phrase": "model-based_regression_test_selection_technique"}, {"score": 0.003403122817578447, "phrase": "graph_model"}, {"score": 0.0033004240095380623, "phrase": "proposed_graph_model"}, {"score": 0.0031042018721479385, "phrase": "task_precedence_order"}, {"score": 0.0030414140732789186, "phrase": "intertask_communication"}, {"score": 0.002949598537993663, "phrase": "interrupt_handlers"}, {"score": 0.0028459677232555176, "phrase": "regression-test_selection"}, {"score": 0.002676692093594358, "phrase": "constructed_graph_model"}, {"score": 0.002556359086441866, "phrase": "prototype_tool"}, {"score": 0.0025174594088331853, "phrase": "experimental_results"}, {"score": 0.002466510117718297, "phrase": "tool_show"}, {"score": 0.0022961534630650347, "phrase": "traditional_approach"}, {"score": 0.0021595094738887767, "phrase": "fault-revealing_test_cases"}, {"score": 0.0021049977753042253, "phrase": "existing_regression_test_selection_technique"}], "paper_keywords": ["Performance", " Verification", " Reliability", " Embedded programs", " intertask communication", " regression test selection", " software maintenance", " slicing", " task execution dependencies"], "paper_abstract": "The current approaches for regression test selection of embedded programs are usually based on data-and control-dependency analyses, often augmented with human reasoning. Existing techniques do not take into account additional execution dependencies which may exist among code elements in such programs due to features such as tasks, task deadlines, task precedences, and intertask communications. In this context, we propose a model-based regression test selection technique for such programs. Our technique first constructs a graph model of the program; the proposed graph model has been designed to capture several characteristics of embedded programs, such as task precedence order, priority, intertask communication, timers, exceptions and interrupt handlers, which we consider important for regression-test selection. Our regression test selection technique selects test cases based on an analysis of the constructed graph model. We have implemented our technique to realize a prototype tool. The experimental results obtained using this tool show that, on average, our approach selects about 28.33% more regression test cases than those selected by a traditional approach. We observed that, on average, 36.36% of the fault-revealing test cases were overlooked by the existing regression test selection technique.", "paper_title": "A Regression Test Selection Technique for Embedded Software", "paper_id": "WOS:000329136000007"}