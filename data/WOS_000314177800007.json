{"auto_keywords": [{"score": 0.046491955921886964, "phrase": "communicating_components"}, {"score": 0.00481495049065317, "phrase": "distributed_multiperiodic_systems"}, {"score": 0.004756233569671719, "phrase": "consistent_data"}, {"score": 0.00467905143301368, "phrase": "distributed_real-time_architecture"}, {"score": 0.0037667216301666196, "phrase": "intermediate_components"}, {"score": 0.00357146811369898, "phrase": "different_timing_characteristics"}, {"score": 0.00335867620389808, "phrase": "independent_times"}, {"score": 0.003250403288147613, "phrase": "consistent_values"}, {"score": 0.0027931892160452513, "phrase": "temporal_data-matching_property"}, {"score": 0.0027365364488693656, "phrase": "strict_sense"}, {"score": 0.0026920404458807444, "phrase": "relaxed_way"}, {"score": 0.0026700637696697414, "phrase": "approximately_consistent_values"}, {"score": 0.0025628355581338563, "phrase": "system_architecture"}, {"score": 0.0024903420152789135, "phrase": "data-matching_inconsistencies"}, {"score": 0.0024298350266697905, "phrase": "multiperiodic_systems"}, {"score": 0.0023418133729330303, "phrase": "common_period"}, {"score": 0.002148604369150115, "phrase": "consistent_data_sets"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["distributed system", " component-based architecture", " real-time", " data consistency"], "paper_abstract": "The distributed real-time architecture of an embedded system is often described as a set of communicating components. Such a system is dataflow (for its description) and time triggered (for its execution). The architecture forms a graph of communicating components, where more than one path can link two components. Because the characteristics of the network and the behavior of intermediate components may vary or are only partially known, these paths often have different timing characteristics, and the flows of information that transit on these paths reach their destination at independent times. However, an application that seeks consistent values will require these flows to be temporally matched so that a component uses inputs that all (directly or indirectly) depend on the same computation step of another component. In this paper, we define this temporal data-matching property, both in a strict sense and in a relaxed way allowing approximately consistent values. Then, we show how to analyze a system architecture to detect situations that result in data-matching inconsistencies. In the context of multiperiodic systems, where components do not necessarily share a common period, we also describe an approach to manage data matching that uses queues to delay too fast paths and timestamps to recognize consistent data sets. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Analysis of distributed multiperiodic systems to achieve consistent data matching", "paper_id": "WOS:000314177800007"}