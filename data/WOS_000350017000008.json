{"auto_keywords": [{"score": 0.04066031201468573, "phrase": "tls"}, {"score": 0.00481495049065317, "phrase": "periodic_simulation_models"}, {"score": 0.0047472380621488616, "phrase": "scheduling_algorithm"}, {"score": 0.004658426838467567, "phrase": "real-time_simulations"}, {"score": 0.0044435677598780796, "phrase": "traditional_online_real-time_scheduling_algorithms"}, {"score": 0.00438105507792004, "phrase": "earliest_deadline_first"}, {"score": 0.004258644418211771, "phrase": "high_overhead"}, {"score": 0.004178935413340453, "phrase": "large_number"}, {"score": 0.0040049806975968145, "phrase": "new_algorithm"}, {"score": 0.0039114753002009485, "phrase": "load_balancing"}, {"score": 0.0037486121194392564, "phrase": "real-time_execution"}, {"score": 0.003626626504149897, "phrase": "time-stepped_simulation"}, {"score": 0.0035755653799043, "phrase": "load_balancing_schedule_table"}, {"score": 0.0033465923623290034, "phrase": "changed_model"}, {"score": 0.003207173639414978, "phrase": "execution_periods"}, {"score": 0.003030247482854539, "phrase": "time_step"}, {"score": 0.0029594318330247614, "phrase": "slack_time"}, {"score": 0.002822712709335093, "phrase": "real-time_reliability"}, {"score": 0.0027050595279115015, "phrase": "multi-core_environment"}, {"score": 0.0025922974876210194, "phrase": "long_execution_times"}, {"score": 0.0025678829712650437, "phrase": "experimental_results"}, {"score": 0.0024960069794216977, "phrase": "classical_edf_approach"}, {"score": 0.002460825108719896, "phrase": "highest_performance_improvement"}, {"score": 0.002336004938424957, "phrase": "processor_resources"}, {"score": 0.0021656385587456952, "phrase": "typical_tank_combat_simulation_scenario"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Real-time system", " Scheduling", " Time-stepped simulation", " Jitter"], "paper_abstract": "A scheduling algorithm is crucial for real-time simulations because it guarantees that each model meets its deadline. Traditional online real-time scheduling algorithms such as Earliest Deadline First (EDF) introduce a high overhead when scheduling a large number of models. In this paper, a new algorithm called time-stepped load balancing (TLS) is proposed to address the real-time execution of a model set in a time-stepped simulation. A load balancing schedule table is generated before a simulation and rebalanced at runtime to dynamically schedule the changed model set. This table is organized by the execution periods of the models and balanced according to the load of each time step. Moreover, the slack time is distributed evenly among the steps to improve the real-time reliability. An extension to the algorithm for a multi-core environment is further studied to address those models with long execution times. Experimental results show that our scheduling algorithm outperforms the classical EDF approach. The highest performance improvement of TLS over EDF reaches 3-4% in terms of saving processor resources, and the jitter is about 4 times less when 90 entities are employed in a typical tank combat simulation scenario. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Real-time load balancing scheduling algorithm for periodic simulation models", "paper_id": "WOS:000350017000008"}