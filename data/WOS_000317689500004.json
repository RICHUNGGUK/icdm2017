{"auto_keywords": [{"score": 0.049474472243262034, "phrase": "multithreaded_programs"}, {"score": 0.00481495049065317, "phrase": "graphs_for_mining-based_defect_localization"}, {"score": 0.004634799977448855, "phrase": "modern_multicore_architecture_design"}, {"score": 0.004294381488413906, "phrase": "software_developers"}, {"score": 0.004213240903095234, "phrase": "new_challenges"}, {"score": 0.004133627071344356, "phrase": "bug_patterns"}, {"score": 0.003928572641266562, "phrase": "non-deterministic_behavior"}, {"score": 0.0038789122930433305, "phrase": "multi-threaded_program_executions"}, {"score": 0.003757480190200645, "phrase": "new_defect-localization_techniques"}, {"score": 0.003525861581971337, "phrase": "defect_localization"}, {"score": 0.0034812740368914455, "phrase": "sequential_programs"}, {"score": 0.003287482882222731, "phrase": "specific_multithreading_bugs"}, {"score": 0.0030457198309616694, "phrase": "general_technique"}, {"score": 0.0028397103530211415, "phrase": "data_mining-based_defect-localization_techniques"}, {"score": 0.002664513608074113, "phrase": "call_graphs"}, {"score": 0.002548331088496964, "phrase": "new_graph_representations"}, {"score": 0.0025160740422447837, "phrase": "multithreaded_program_executions"}, {"score": 0.002215081186105616, "phrase": "good_results"}], "paper_keywords": ["Software-defect localization", " Multithreaded programs", " Call graphs", " Applied data mining", " Graph mining"], "paper_abstract": "Trends in modern multicore architecture design requires software developers to develop and debug multithreaded programs. Consequently, software developers must face new challenges because of bug patterns occurring at runtime and due to the non-deterministic behavior of multi-threaded program executions. This calls for new defect-localization techniques. There has been much work in the field of defect localization for sequential programs on the one side and on the localization of specific multithreading bugs on the other side, but we are not aware of any general technique for multithreaded programs. This paper proposes such an approach. It generalizes data mining-based defect-localization techniques for sequential programs. The techniques work by analyzing call graphs. More specifically, we propose new graph representations of multithreaded program executions as well as two mining-based localization approaches based on these representations. Our evaluation shows that our technique yields good results and is able to find defects that other approaches cannot localize.", "paper_title": "Graphs for Mining-Based Defect Localization in Multithreaded Programs", "paper_id": "WOS:000317689500004"}