{"auto_keywords": [{"score": 0.04485893372439868, "phrase": "network_processors"}, {"score": 0.01048543469485651, "phrase": "runtime_management"}, {"score": 0.00481495049065317, "phrase": "multithreaded_network_processors"}, {"score": 0.0047283116134926645, "phrase": "cpu_sharing"}, {"score": 0.004699778175535453, "phrase": "real-time_scheduling"}, {"score": 0.004573483858954342, "phrase": "runtime_environment"}, {"score": 0.004464061452094005, "phrase": "hardware_support"}, {"score": 0.004317848984770719, "phrase": "stringent_performance_requirements"}, {"score": 0.00418907090251818, "phrase": "packet_processing_tasks"}, {"score": 0.004138637076221288, "phrase": "complex_trade-offs"}, {"score": 0.003942877273973905, "phrase": "code_store"}, {"score": 0.0038953958723049287, "phrase": "application_requirements"}, {"score": 0.003813669883040509, "phrase": "heterogeneous_threads"}, {"score": 0.0037336520904376687, "phrase": "different_tasks"}, {"score": 0.003546218640291191, "phrase": "pipelined_fashion"}, {"score": 0.0034717929086014636, "phrase": "different_micro-engines"}, {"score": 0.0033175095965171674, "phrase": "different_runtime_performance_demands"}, {"score": 0.0031318565271653723, "phrase": "round-robin_fashion"}, {"score": 0.0031035049228517715, "phrase": "os_assistance"}, {"score": 0.0027995277077618604, "phrase": "os_solution"}, {"score": 0.002707685828465434, "phrase": "compiler_approach"}, {"score": 0.00266693888510356, "phrase": "complete_compiler_solution"}, {"score": 0.0026347821012634586, "phrase": "explicit_context_switch"}, {"score": 0.0025716240685409535, "phrase": "network_processor"}, {"score": 0.002270880088524628, "phrase": "heterogeneous_thread_programming"}, {"score": 0.002209711182025705, "phrase": "multicore_processors"}, {"score": 0.0021567204376536503, "phrase": "runtime_constraints"}, {"score": 0.002117811223107415, "phrase": "minimal_runtime_degradation"}, {"score": 0.0021049977753042253, "phrase": "small_code_growth"}], "paper_keywords": ["Design", " Performance", " CPU scheduling", " real-time scheduling", " compiler optimizations", " network processors"], "paper_abstract": "Traditionally, runtime management involving CPU sharing, real-time scheduling, etc., is provided by the runtime environment (typically an operating system) using hardware support such as timers and interrupts. However, due to stringent performance requirements on network processors, neither OS nor hardware mechanisms are typically feasible/available. Mapping packet processing tasks on network processors involves complex trade-offs to maximize parallelism and pipelining. Due to an increase in the size of the code store and complexity of application requirements, network processors are being programmed with heterogeneous threads that may execute code belonging to different tasks on a given micro-engine. Also, most network applications are streaming applications that are typically processed in a pipelined fashion. Thus, the tasks on different micro-engines are pipelined in such a way as to maximize the throughput. Tasks themselves could have different runtime performance demands. In this article, we focus on network processors on which hardware can only schedule threads in a round-robin fashion and no OS assistance is provided. We show that it is very difficult and inefficient for the programmer to meet the constraints of runtime management by coding them statically. Due to the infeasibility of hardware or OS solution (even in the near future), we undertake a compiler approach. We propose a complete compiler solution to automatically insert explicit context switch (ctx) instructions provided on the network processor such that the execution of threads is better manipulated at runtime to meet their constraints. Two approaches are presented that can control programs' runtime behavior with different applicability and overheads. We show that it is feasible and also opens new application domains that would need heterogeneous thread programming. Such approaches would in general become important for multicore processors. Finally, our experiments show that the runtime constraints are enforced nearly ideally with minimal runtime degradation and small code growth.", "paper_title": "Compiler-Supported Thread Management for Multithreaded Network Processors", "paper_id": "WOS:000297636300006"}