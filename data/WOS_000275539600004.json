{"auto_keywords": [{"score": 0.04940587850605655, "phrase": "sql_injection_attacks"}, {"score": 0.020779862418476184, "phrase": "web_applications"}, {"score": 0.014378807322229166, "phrase": "candid"}, {"score": 0.0046364836476864325, "phrase": "top-most_threats"}, {"score": 0.004360412703519539, "phrase": "specially_crafted_user_inputs"}, {"score": 0.004238576355081601, "phrase": "low-level_string_operations"}, {"score": 0.004178966050986358, "phrase": "sql"}, {"score": 0.003948613642680196, "phrase": "powerful_scheme"}, {"score": 0.0036958398682001015, "phrase": "characteristic_diagnostic_feature"}, {"score": 0.0035587046945919788, "phrase": "intended_structure"}, {"score": 0.003426640459083931, "phrase": "sql_injection"}, {"score": 0.0033308077968426937, "phrase": "programmer-intended_query_structure"}, {"score": 0.0030881143614111552, "phrase": "actual_query"}, {"score": 0.0030017207229983385, "phrase": "simple_and_novel_mechanism"}, {"score": 0.002917736974519881, "phrase": "mining_programmer_intended_queries"}, {"score": 0.0028360962841331634, "phrase": "benign_candidate_inputs"}, {"score": 0.00266693888510356, "phrase": "intended_queries"}, {"score": 0.0026169435194789772, "phrase": "symbolic_query"}, {"score": 0.0025678829712650437, "phrase": "program_run"}, {"score": 0.002380689754118213, "phrase": "java"}, {"score": 0.0022175019341824603, "phrase": "java_virtual_machine"}, {"score": 0.0021049977753042253, "phrase": "extensive_experimental_results"}], "paper_keywords": ["Languages", " Experimentation", " SQL injection attacks", " retrofitting code", " symbolic evaluation", " dynamic monitoring"], "paper_abstract": "SQL injection attacks are one of the top-most threats for applications written for the Web. These attacks are launched through specially crafted user inputs, on Web applications that use low-level string operations to construct SQL queries. In this work, we exhibit a novel and powerful scheme for automatically transforming Web applications to render them safe against all SQL injection attacks. A characteristic diagnostic feature of SQL injection attacks is that they change the intended structure of queries issued. Our technique for detecting SQL injection is to dynamically mine the programmer-intended query structure on any input, and detect attacks by comparing it against the structure of the actual query issued. We propose a simple and novel mechanism, called CANDID, for mining programmer intended queries by dynamically evaluating runs over benign candidate inputs. This mechanism is theoretically well founded and is based on inferring intended queries by considering the symbolic query computed on a program run. Our approach has been implemented in a tool called CANDID that retrofits Web applications written in Java to defend them against SQL injection attacks. We have also implemented CANDID by modifying a Java Virtual Machine, which safeguards applications without requiring retrofitting. We report extensive experimental results that show that our approach performs remarkably well in practice.", "paper_title": "CANDID: Dynamic Candidate Evaluations for Automatic Prevention of SQL Injection Attacks", "paper_id": "WOS:000275539600004"}