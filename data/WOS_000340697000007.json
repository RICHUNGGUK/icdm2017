{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gui_programming_concerns"}, {"score": 0.0044991925146184025, "phrase": "typical_graphical_user_interface"}, {"score": 0.00444410956423592, "phrase": "gui"}, {"score": 0.00438955582974973, "phrase": "programming_concerns"}, {"score": 0.004001593118269276, "phrase": "simple_intuition"}, {"score": 0.0038561471948364723, "phrase": "systematic_empirical_analysis"}, {"score": 0.0036030386046805598, "phrase": "existing_application_programming_interface"}, {"score": 0.0035588942620686536, "phrase": "api"}, {"score": 0.0034506596895901003, "phrase": "industrial_projects"}, {"score": 0.003204232566468624, "phrase": "software_maintenance"}, {"score": 0.002779894844207706, "phrase": "additional_proof"}, {"score": 0.0026953359825383624, "phrase": "proposed_classification"}, {"score": 0.0025972447844047515, "phrase": "inheritance_hierarchy"}, {"score": 0.0025495426598675583, "phrase": "selected_gui_api"}, {"score": 0.002518227743688769, "phrase": "concern-oriented_interfaces"}, {"score": 0.002426566352219336, "phrase": "supporting_tool"}, {"score": 0.002367315484467406, "phrase": "developed_api"}, {"score": 0.002239225269052105, "phrase": "refactored_api"}, {"score": 0.0022117133940361025, "phrase": "positive_effects"}, {"score": 0.0021845387990972543, "phrase": "api_usability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Graphical user interfaces (GUI)", " GUI programming", " GUI application programming interface (API)", " GUI concerns", " Separation of concerns"], "paper_abstract": "The focus of this paper is on identification of typical graphical user interface (GUI) programming concerns. As opposed to some other proposals available in the literature that indicate GUI programming concerns by simple intuition, we have conducted a systematic empirical analysis to derive our proposal. It included an analysis of an existing application programming interface (API), its use in industrial projects, and an analysis of the requirements and issues reported during software maintenance. In addition, we have evaluated more than 50 GUI frameworks and APIs and proved usefulness and generality of our classification of concerns. As an additional proof of applicability of the proposed classification, we have refactored the inheritance hierarchy of the selected GUI API using concern-oriented interfaces. We have implemented a supporting tool that complements the developed API and supports its concern-oriented use. The evaluation of the refactored API showed positive effects on API usability. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Empirical analysis of GUI programming concerns", "paper_id": "WOS:000340697000007"}