{"auto_keywords": [{"score": 0.04729021491286542, "phrase": "code_size"}, {"score": 0.031240177333863486, "phrase": "tm"}, {"score": 0.00481495049065317, "phrase": "function_similarity"}, {"score": 0.0047370749839861165, "phrase": "size_reduction"}, {"score": 0.004660453113061494, "phrase": "cost-sensitive_or_memory"}, {"score": 0.004272164161788242, "phrase": "compact_code_generation"}, {"score": 0.004180234323211199, "phrase": "major_focus"}, {"score": 0.004068087482412997, "phrase": "compiler_community"}, {"score": 0.003668591097652231, "phrase": "code_duplication"}, {"score": 0.003589602322126282, "phrase": "similar_functions"}, {"score": 0.0035507457285983268, "phrase": "targeted_insertion"}, {"score": 0.0034366728236876047, "phrase": "small_differences"}, {"score": 0.003290237137651949, "phrase": "platform-independent_technique"}, {"score": 0.003236941658990869, "phrase": "llvm_compiler_framework"}, {"score": 0.0029830992938695007, "phrase": "qualcomm_krait"}, {"score": 0.002887210021573995, "phrase": "qualcomm_hexagon"}, {"score": 0.0027342011951477763, "phrase": "spec"}, {"score": 0.0025059724686541263, "phrase": "overall_code_size_reduction"}, {"score": 0.002386062690026682, "phrase": "individual_programs"}, {"score": 0.0023219374444738723, "phrase": "additional_control_flow"}, {"score": 0.0022595316565074304, "phrase": "better_i-cache_performance"}, {"score": 0.002128067018576581, "phrase": "suitable_candidates"}, {"score": 0.0021049977753042253, "phrase": "subsequent_merging"}], "paper_keywords": ["Design", " experimentation", " measurement", " performance", " Function similarity", " function merging", " code size"], "paper_abstract": "For cost-sensitive or memory constrained embedded systems, code size is at least as important as performance. Consequently, compact code generation has become a major focus of attention within the compiler community. In this paper we develop a pragmatic, yet effective code size reduction technique, which exploits structural similarity of functions. It avoids code duplication through merging of similar functions and targeted insertion of control flow to resolve small differences. We have implemented our purely software based and platform-independent technique in the LLVM compiler framework and evaluated it against the SPEC CPU2006 benchmarks and three target platforms: INTEL X86, ARM based QUALCOMM KRAIT (TM), and QUALCOMM HEXAGON (TM) DSP. We demonstrate that code size for SPEC CPU2006 can be reduced by more than 550KB on X86. This corresponds to an overall code size reduction of 4%, and up to 11.5% for individual programs. Overhead introduced by additional control flow is compensated for by better I-cache performance of the compacted programs. We also show that identifying suitable candidates and subsequent merging of functions can be implemented efficiently.", "paper_title": "Exploiting Function Similarity for Code Size Reduction", "paper_id": "WOS:000341937800011"}