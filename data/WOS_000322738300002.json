{"auto_keywords": [{"score": 0.049613254104042076, "phrase": "shared-memory_parallel_architectures"}, {"score": 0.04518073439008111, "phrase": "cilk_plus"}, {"score": 0.00481495049065317, "phrase": "parallel_programming_models"}, {"score": 0.004585212379675535, "phrase": "new_programming_frameworks"}, {"score": 0.004366392972907347, "phrase": "tbb"}, {"score": 0.003998380230709541, "phrase": "commercial_and_scientific_areas"}, {"score": 0.0038827100184187805, "phrase": "comparative_study"}, {"score": 0.0036079110889031874, "phrase": "task_deployment"}, {"score": 0.003572766402294553, "phrase": "scheduling_techniques"}, {"score": 0.003520687960750365, "phrase": "programming_language_abstractions"}, {"score": 0.0028662606272282926, "phrase": "regular_memory_access"}, {"score": 0.002838319783373086, "phrase": "irregular_computation"}, {"score": 0.002511147699138714, "phrase": "sequential_code"}, {"score": 0.002414616656410503, "phrase": "small_footprint"}, {"score": 0.002356173823922118, "phrase": "small_problems"}, {"score": 0.0022434880661725493, "phrase": "heterogeneous_architectures"}, {"score": 0.0021049977753042253, "phrase": "vectorization_support"}], "paper_keywords": ["Parallel Programming", " Vector Instructions", " Multithreading", " Performance Analysis", " Efficiency Analysis", " Power Consumption"], "paper_abstract": "Nowadays, shared-memory parallel architectures have evolved and new programming frameworks have appeared that exploit these architectures: OpenMP, TBB, Cilk Plus, ArBB and OpenCL. This article focuses on the most extended of these frameworks in commercial and scientific areas. This paper shows a comparative study of these frameworks and an evaluation. The study covers several capacities, such as task deployment, scheduling techniques, or programming language abstractions. The evaluation measures three dimensions: code development complexity, performance and efficiency, measure as speedup per watt. For this evaluation, several parallel benchmarks have been implemented with each framework. These benchmarks are created to cover certain scenarios, like regular memory access or irregular computation. The conclusions show some highlights, like the fact that some frameworks (OpenMP, Cilk Plus) are better for transforming quickly a sequential code, others (TBB) have a small footprint which is ideal for small problems, and others (OpenCL) are suited for heterogeneous architectures but they require a very complex development process. The conclusions also show that the vectorization support is more critical than multitasking to achieve efficiency for those problems where this approach fits.", "paper_title": "A Comparative Study and Evaluation of Parallel Programming Models for Shared-Memory Parallel Architectures", "paper_id": "WOS:000322738300002"}