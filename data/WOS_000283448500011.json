{"auto_keywords": [{"score": 0.036317287873185625, "phrase": "spanc"}, {"score": 0.03371277776280164, "phrase": "network_coding"}, {"score": 0.02852703894338762, "phrase": "polynomial_time"}, {"score": 0.00481495049065317, "phrase": "peer-to-peer_live_streaming"}, {"score": 0.0045200127552893704, "phrase": "unstructured_mesh"}, {"score": 0.00447937340641839, "phrase": "packet_scheduling"}, {"score": 0.00441909542037375, "phrase": "important_factor"}, {"score": 0.0043793594257092805, "phrase": "overall_playback_delay"}, {"score": 0.004204904449336037, "phrase": "scheduling_algorithm"}, {"score": 0.00414830454375092, "phrase": "scheduling_delay"}, {"score": 0.004074016501033133, "phrase": "low_delay"}, {"score": 0.003755782496223915, "phrase": "significant_change"}, {"score": 0.0037219886365287085, "phrase": "network_states"}, {"score": 0.0035898158129721003, "phrase": "bandwidth_change"}, {"score": 0.003415681637907093, "phrase": "substream_pushing"}, {"score": 0.003309278541665552, "phrase": "video_packets"}, {"score": 0.003148709618042979, "phrase": "heterogeneous_contents"}, {"score": 0.002942196368747418, "phrase": "substream_assignment"}, {"score": 0.0027993885490232677, "phrase": "minimum_delay"}, {"score": 0.0027616550517346066, "phrase": "sa_problem"}, {"score": 0.0026157259734105, "phrase": "max-weighted_bipartite_matching_problem"}, {"score": 0.0025456716198597627, "phrase": "fast_recovery"}, {"score": 0.002455168454109375, "phrase": "network_coded_packets"}, {"score": 0.002389403849342894, "phrase": "minimum_recovery_delay"}, {"score": 0.0023571835517819124, "phrase": "frnc_problem"}, {"score": 0.0022631003204259224, "phrase": "dynamic_programming"}, {"score": 0.0022427071130840647, "phrase": "simulation_results"}, {"score": 0.0021925226977381244, "phrase": "substantially_lower_delay"}, {"score": 0.0021049977753042253, "phrase": "recent_approaches"}], "paper_keywords": ["Network coding", " optimization", " peer-to-peer (P2P) streaming", " scheduling", " substream pushing"], "paper_abstract": "In peer-to-peer (P2P) live streaming using unstructured mesh, packet scheduling is an important factor in overall playback delay. In this paper, we propose a scheduling algorithm to minimize scheduling delay. To achieve low delay, our scheduling is predominantly push in nature, and the schedule needs to be changed only upon significant change in network states (due to, for examples, bandwidth change or parent churns). Our scheme, termed SPANC (Substream Pushing and Network Coding), pushes video packets in substreams and recovers packet loss using network coding. Given heterogeneous contents, delays, and bandwidths of parents of a peer, we formulate the substream assignment (SA) problem to assign substreams to parents with minimum delay. The SA problem can be optimally solved in polynomial time by transforming it to a max-weighted bipartite matching problem. We then formulate the fast recovery with network coding (FRNC) problem, which is to assign network coded packets to each parent to achieve minimum recovery delay. The FRNC problem can also be solved exactly in polynomial time with dynamic programming. Simulation results show that SPANC achieves substantially lower delay with little cost in bandwidth, as compared with recent approaches based on pull, network coding and hybrid pull-push.", "paper_title": "SPANC: Optimizing Scheduling Delay for Peer-to-Peer Live Streaming", "paper_id": "WOS:000283448500011"}