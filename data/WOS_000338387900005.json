{"auto_keywords": [{"score": 0.015719716506582538, "phrase": "software_evolution"}, {"score": 0.008725942155508284, "phrase": "source_code_elements"}, {"score": 0.008659706810033923, "phrase": "architectural_abstractions"}, {"score": 0.008496290932156838, "phrase": "software_architects"}, {"score": 0.004598933498016774, "phrase": "semi-automated_architectural_abstraction"}, {"score": 0.004494570360108983, "phrase": "software_life-cycle"}, {"score": 0.004276468590041119, "phrase": "software_system"}, {"score": 0.004195418010131832, "phrase": "software_systems"}, {"score": 0.00411589720697736, "phrase": "architectural_knowledge_evaporation"}, {"score": 0.004022451267521423, "phrase": "tool_support"}, {"score": 0.003976523732243618, "phrase": "semi-automatic_abstraction"}, {"score": 0.003901135641717704, "phrase": "connector_views"}, {"score": 0.0038713805573219297, "phrase": "implemented_systems"}, {"score": 0.0038125469099459905, "phrase": "abstracted_architecture_models"}, {"score": 0.0036274201504044685, "phrase": "architecture_abstraction_concepts"}, {"score": 0.003545024951402821, "phrase": "domain-specific_language"}, {"score": 0.003424916005912503, "phrase": "architectural_abstraction_specifications"}, {"score": 0.0031845067058084613, "phrase": "non-architectural_changes"}, {"score": 0.0031481164109237636, "phrase": "underlying_source_code"}, {"score": 0.0031002400518251936, "phrase": "software_architect"}, {"score": 0.0030530895634491343, "phrase": "architectural_abstraction"}, {"score": 0.0030182133040809285, "phrase": "dsl"}, {"score": 0.002949598537993663, "phrase": "architectural_component_views"}, {"score": 0.0029158847555394714, "phrase": "source_code"}, {"score": 0.0028936226331006563, "phrase": "model-driven_development"}, {"score": 0.002806256131739047, "phrase": "architectural_design_constraints"}, {"score": 0.0027007380550259077, "phrase": "automatic_generation"}, {"score": 0.002680114113899346, "phrase": "traceability_links"}, {"score": 0.0026191799769765063, "phrase": "mod_techniques"}, {"score": 0.002416589459425828, "phrase": "different_versions"}, {"score": 0.0023889533502525527, "phrase": "generated_architectural_component_view"}, {"score": 0.002255431275670053, "phrase": "different_consecutive_versions"}, {"score": 0.0022382002476510573, "phrase": "five_open_source_systems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Architectural abstraction", " Architectural component and connector views", " Software evolution", " UML", " Model transformation"], "paper_abstract": "In this paper we present an approach for supporting the semi-automated architectural abstraction of architectural models throughout the software life-cycle. It addresses the problem that the design and implementation of a software system often drift apart as software systems evolve, leading to architectural knowledge evaporation. Our approach provides concepts and tool support for the semi-automatic abstraction of architecture component and connector views from implemented systems and keeping the abstracted architecture models up-to-date during software evolution. In particular, we propose architecture abstraction concepts that are supported through a domain-specific language (DSL). Our main focus is on providing architectural abstraction specifications in the DSL that only need to be changed, if the architecture changes, but can tolerate non-architectural changes in the underlying source code. Once the software architect has defined an architectural abstraction in the DSL, we can automatically generate architectural component views from the source code using model-driven development (MDD) techniques and check whether architectural design constraints are fulfilled by these models. Our approach supports the automatic generation of traceability links between source code elements and architectural abstractions using MOD techniques to enable software architects to easily link between components and the source code elements that realize them. It enables software architects to compare different versions of the generated architectural component view with each other. We evaluate our research results by studying the evolution of architectural abstractions in different consecutive versions of five open source systems and by analyzing the performance of our approach in these cases. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Semi-automated architectural abstraction specifications for supporting software evolution", "paper_id": "WOS:000338387900005"}