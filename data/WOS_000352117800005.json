{"auto_keywords": [{"score": 0.010612387000973441, "phrase": "multiple_patterns"}, {"score": 0.009340912137180989, "phrase": "stable_search_throughput"}, {"score": 0.007613344695107973, "phrase": "search_throughput"}, {"score": 0.004550669123303854, "phrase": "advanced_vector_extensions"}, {"score": 0.0045041947685554645, "phrase": "avx"}, {"score": 0.004367581653370531, "phrase": "bit-parallel_algorithm"}, {"score": 0.004300830853119242, "phrase": "fast_string_search"}, {"score": 0.004023120753104693, "phrase": "string_search"}, {"score": 0.003941319912895672, "phrase": "control_flow"}, {"score": 0.0039010428828989826, "phrase": "data_structures"}, {"score": 0.003724810609448597, "phrase": "latest_vector_instruction"}, {"score": 0.0036490529923833884, "phrase": "efficient_parallel_search"}, {"score": 0.003574830654211291, "phrase": "different_lengths"}, {"score": 0.0035021127041237887, "phrase": "avx_instructions"}, {"score": 0.003343841875107018, "phrase": "openmp_directives"}, {"score": 0.003292685392413911, "phrase": "data-parallel_search"}, {"score": 0.0030017207229983385, "phrase": "previous_bit-parallel_approach"}, {"score": 0.002940626369102927, "phrase": "data_structure"}, {"score": 0.0027223626424366207, "phrase": "arbitrary_data"}, {"score": 0.0026806884201358515, "phrase": "pattern_size"}, {"score": 0.002494466951433885, "phrase": "experimental_results"}, {"score": 0.002309242406875572, "phrase": "aho-corasick"}, {"score": 0.0022973933270056743, "phrase": "based_methods"}, {"score": 0.002193447487477984, "phrase": "large_genome_texts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["String search", " Bit-parallel algorithm", " Acceleration", " AVX"], "paper_abstract": "In this paper, we present an Advanced Vector Extensions (AVX) accelerated method for a bit-parallel algorithm that realizes fast string search for maximizing stable search throughput. An advantage of our method is that it accelerates string search by regularizing both control flow and data structures. This regularization facilitates the exploitation of the latest vector instruction set to achieve efficient parallel search of multiple patterns of different lengths. We use AVX instructions to increase search throughput per CPU core and employ OpenMP directives to realize data-parallel search of strings. As a result, we found that our data structure doubled search throughput as compared with a previous bit-parallel approach that used a data structure for patterns of the same length. We also found that our method achieved stable search throughput for arbitrary data if the pattern size is large, but small enough to fit into a word. Some experimental results are provided to understand the advantage and disadvantage of our method with a comparison to Aho-Corasick based methods. We believe that our method is useful for large genome texts with many partial matches. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A bit-parallel algorithm for searching multiple patterns with various lengths", "paper_id": "WOS:000352117800005"}