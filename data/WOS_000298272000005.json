{"auto_keywords": [{"score": 0.026682285549513286, "phrase": "sp"}, {"score": 0.017591655760835174, "phrase": "sat"}, {"score": 0.005655068388775685, "phrase": "eda"}, {"score": 0.005369861326153973, "phrase": "vlsi"}, {"score": 0.00481495049065317, "phrase": "irregular_eda_applications"}, {"score": 0.004722038375317162, "phrase": "graphic_processing_units"}, {"score": 0.004577076689777069, "phrase": "new_vehicle"}, {"score": 0.004300310127339099, "phrase": "cpu_for_electronic_design_automation"}, {"score": 0.004168240841388958, "phrase": "design_turn-around_time"}, {"score": 0.004087756756529841, "phrase": "eda_algorithms"}, {"score": 0.003977672712305348, "phrase": "irregular_data_structures"}, {"score": 0.003931402465972151, "phrase": "sparse_matrix"}, {"score": 0.0038404642251010797, "phrase": "major_challenges"}, {"score": 0.0038106195546165574, "phrase": "efficient_cpu_implementations"}, {"score": 0.0037427397721616473, "phrase": "bfs"}, {"score": 0.003693533648584145, "phrase": "high-performance_gpu_implementations"}, {"score": 0.0036221822903900725, "phrase": "important_irregular_eda_computing_patterns"}, {"score": 0.003552204377093386, "phrase": "graph_algorithms"}, {"score": 0.0035245918797629804, "phrase": "message-passing_algorithms"}, {"score": 0.0034700069041302003, "phrase": "sparse_matrix_domain"}, {"score": 0.0034029588672379926, "phrase": "core_problem"}, {"score": 0.003234615195382533, "phrase": "wide_range"}, {"score": 0.0032094634756436595, "phrase": "eda_problem_instances"}, {"score": 0.0031474338010045386, "phrase": "prior_work"}, {"score": 0.0030269369940823902, "phrase": "cpu_baseline_implementation"}, {"score": 0.0029916929549256297, "phrase": "gpu_based_smvp_procedure"}, {"score": 0.0027995677499976406, "phrase": "graph_algorithm_domain"}, {"score": 0.002745438358145758, "phrase": "smvp_based_formulation"}, {"score": 0.0026923527275481804, "phrase": "breadth-first_search"}, {"score": 0.002579140290642792, "phrase": "efficient_solutions"}, {"score": 0.0023029188952824685, "phrase": "strong_potential"}, {"score": 0.0022407927161620855, "phrase": "cpu-friendly_algorithms"}, {"score": 0.002197443382039439, "phrase": "computing_structures"}, {"score": 0.0021803388613879896, "phrase": "sequential_algorithms"}, {"score": 0.002163367190715979, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["GPU", " CUDA", " Sparse matrix", " EDA", " Data parallel", " Static timing analysis", " Sparse matrix vector product", " Conjugate gradient", " Breadth first search", " Survey propagation", " RTL simulation", " CMB", " Message-passing"], "paper_abstract": "Recently graphic processing units (CPUs) are rising as a new vehicle for high-performance, general purpose computing. It is attractive to unleash the power of CPU for Electronic Design Automation (EDA) computations to cut the design turn-around time of VLSI systems. EDA algorithms, however, generally depend on irregular data structures such as sparse matrix and graphs, which pose major challenges for efficient CPU implementations. In this paper, we propose high-performance GPU implementations for a set of important irregular EDA computing patterns including sparse matrix, graph algorithms and message-passing algorithms. In the sparse matrix domain, we solve a core problem, sparse-matrix vector product (SMVP). On a wide range of EDA problem instances, our SMVP implementation outperforms all prior work and achieves a speedup up to 50 x over the CPU baseline implementation. The GPU based SMVP procedure is applied to successfully accelerate two core EDA computing engines, timing analysis and linear system solution. In the graph algorithm domain, we developed a SMVP based formulation to efficiently solve the breadth-first search (BFS) problem on CPUs. We also developed efficient solutions for two message-passing algorithms, survey propagation (SP) based SAT solution and a register-transfer level (RTL) simulation. Our results prove that CPUs have a strong potential to accelerate EDA computing through designing CPU-friendly algorithms and/or re-organizing computing structures of sequential algorithms. Crown Copyright (C) 2011 Published by Elsevier B.V. All rights reserved.", "paper_title": "Towards accelerating irregular EDA applications with GPUs", "paper_id": "WOS:000298272000005"}