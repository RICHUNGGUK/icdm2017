{"auto_keywords": [{"score": 0.044015563490115886, "phrase": "gpu"}, {"score": 0.012763188800232904, "phrase": "heterogeneous_version"}, {"score": 0.007369178866962069, "phrase": "gpu."}, {"score": 0.005279403734879684, "phrase": "performance_gain"}, {"score": 0.00481495049065317, "phrase": "reduction_computations"}, {"score": 0.004786821283037044, "phrase": "heterogeneous_systems"}, {"score": 0.00454090611248773, "phrase": "increasingly_heterogeneous_computing_platforms"}, {"score": 0.004358368398332723, "phrase": "notebook_computer"}, {"score": 0.004134372859330047, "phrase": "maximum_computational_power"}, {"score": 0.0039218440805789965, "phrase": "high-level_api"}, {"score": 0.0038761135052054765, "phrase": "critical_challenge"}, {"score": 0.0037311260623089436, "phrase": "simple_way"}, {"score": 0.0036660436272785476, "phrase": "full_potential"}, {"score": 0.003644601816390735, "phrase": "today's_heterogeneous_machines"}, {"score": 0.0035600768845860937, "phrase": "runtime_framework"}, {"score": 0.0034268702387746106, "phrase": "generalized_reductions"}, {"score": 0.0033572130837348623, "phrase": "multi-core_cpu"}, {"score": 0.0033083236588614174, "phrase": "simple_c_functions"}, {"score": 0.0032889671598112023, "phrase": "added_annotations"}, {"score": 0.0032315723330399375, "phrase": "middleware_api_code"}, {"score": 0.0031565959573536194, "phrase": "cuda_code"}, {"score": 0.0030833537429977797, "phrase": "runtime_system"}, {"score": 0.0030653094605910727, "phrase": "efficient_schemes"}, {"score": 0.003002979517391432, "phrase": "cpu_cores"}, {"score": 0.0028820851891355904, "phrase": "clustering_and_principal_component_analysis"}, {"score": 0.0028069426877159664, "phrase": "heterogeneous_architecture"}, {"score": 0.0027660443371695024, "phrase": "significantly_higher_performance"}, {"score": 0.0026860285433876183, "phrase": "cpu."}, {"score": 0.002608308441459177, "phrase": "eight_cpu_cores"}, {"score": 0.0025254115243261875, "phrase": "one-thread_cpu."}, {"score": 0.0024451427672857458, "phrase": "gpu-only_executions"}, {"score": 0.002353554841514325, "phrase": "principal_component_analysis"}, {"score": 0.0022787359717772976, "phrase": "one-thread_cpu_version"}, {"score": 0.0021998194157393353, "phrase": "gpu-only_versions"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": [""], "paper_abstract": "A trend that has materialized, and has given rise to much attention, is of the increasingly heterogeneous computing platforms. Presently, it has become very common for a desktop or a notebook computer to come equipped with both a multi-core CPU and a graphics processing unit (GPU). Capitalizing on the maximum computational power of such architectures (i.e., by simultaneously exploiting both the multi-core CPU and the GPU), starting from a high-level API, is a critical challenge. We believe that it would be highly desirable to support a simple way for programmers to realize the full potential of today's heterogeneous machines. This paper describes a compiler and runtime framework that can map a class of applications, namely those characterized by generalized reductions, to a system with a multi-core CPU and GPU. Starting with simple C functions with added annotations, we automatically generate the middleware API code for the multi-core, as well as CUDA code to exploit the GPU simultaneously. The runtime system provides efficient schemes for dynamically partitioning the work between CPU cores and the GPU. Our experimental results from two applications, for example, k-means clustering and principal component analysis, show that, through effectively harnessing the heterogeneous architecture, we can achieve significantly higher performance compared with using only the GPU or the multi-core CPU. In k-means clustering, the heterogeneous version with eight CPU cores and a GPU achieved a speedup of about 32.09x relative to one-thread CPU. When compared with the faster of CPU-only and GPU-only executions, we were able to achieve a performance gain of about 60%. In principal component analysis, the heterogeneous version attained a speedup of 10.4x relative to the one-thread CPU version. When compared with the faster of CPU-only and GPU-only versions, the heterogeneous version achieved a performance gain of about 63.8%. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Compiler and runtime support for enabling reduction computations on heterogeneous systems", "paper_id": "WOS:000300977700003"}