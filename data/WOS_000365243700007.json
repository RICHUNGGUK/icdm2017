{"auto_keywords": [{"score": 0.049483572884790016, "phrase": "parallel_loops"}, {"score": 0.03751951230806167, "phrase": "hardware_faults"}, {"score": 0.03223693658520472, "phrase": "proposed_scheme"}, {"score": 0.030517142565875927, "phrase": "loop_iterations"}, {"score": 0.00481495049065317, "phrase": "tolerant_scheduling"}, {"score": 0.004695900553353526, "phrase": "shared_memory_systems"}, {"score": 0.004551199992546761, "phrase": "significant_speedup"}, {"score": 0.004410938507689426, "phrase": "loop_level_parallelism"}, {"score": 0.004248294537944227, "phrase": "increased_reliability_problems"}, {"score": 0.004066076430818046, "phrase": "device_size"}, {"score": 0.0038673406001234535, "phrase": "loop_dominated_applications"}, {"score": 0.003369322866499541, "phrase": "fault_tolerant_work-stealing_scheme"}, {"score": 0.0031448288291084, "phrase": "lightweight_buffer-commit_mechanism"}, {"score": 0.002756832447586547, "phrase": "large_failing_chunks"}, {"score": 0.0026384167183586015, "phrase": "load_balancing"}, {"score": 0.0025730425700096365, "phrase": "worker_thread"}, {"score": 0.0023419588513908783, "phrase": "multi-socket_multicore_system"}, {"score": 0.002255431275670053, "phrase": "loop_dominated_benchmarks"}, {"score": 0.002172093645267283, "phrase": "minimum_overhead"}, {"score": 0.0021315842986705485, "phrase": "fault_tolerance"}, {"score": 0.0021049977753042253, "phrase": "optimal_load_balancing"}], "paper_keywords": ["fault tolerance", " loop scheduling", " work-stealing", " multicore and multiprocessor", " self-scheduling"], "paper_abstract": "While multicore/multiprocessor systems achieve significant speedup for many applications by exploiting loop level parallelism, they also suffer from increased reliability problems as a result of ever scaling device size. This paper addresses the reliability of loop dominated applications, aiming to execute parallel loops efficiently in the presence of various types of hardware faults. In this paper, we present a fault tolerant work-stealing scheme which makes parallel loop execution resilient to hardware faults. A lightweight buffer-commit mechanism is applied in the proposed scheme to ensure the correctness of the re-execution of loop iterations. In addition, we split large failing chunks of loop iterations at runtime to improve load balancing, and a worker thread is discarded when faults occur frequently on it. We evaluated our techniques on a multi-socket multicore system, using a set of loop dominated benchmarks. The proposed scheme achieves the minimum overhead of supporting fault tolerance and optimal load balancing.", "paper_title": "Fault Tolerant Scheduling for Parallel Loops on Shared Memory Systems", "paper_id": "WOS:000365243700007"}