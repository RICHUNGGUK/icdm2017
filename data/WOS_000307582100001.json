{"auto_keywords": [{"score": 0.02427206716522197, "phrase": "gpu"}, {"score": 0.007726586105462084, "phrase": "cuda"}, {"score": 0.0055041295755123825, "phrase": "opencl"}, {"score": 0.00481495049065317, "phrase": "high-level_language"}, {"score": 0.00465964893087681, "phrase": "language_support"}, {"score": 0.004223032986655664, "phrase": "standard_interface"}, {"score": 0.004167982855788402, "phrase": "general-purpose_programming"}, {"score": 0.003802135020791801, "phrase": "numerous_low-level_details"}, {"score": 0.003584025547693836, "phrase": "programming_gpus"}, {"score": 0.003378385493203297, "phrase": "powerful_devices"}, {"score": 0.0032054891061528896, "phrase": "higher-level_programming_model"}, {"score": 0.0030173425300162354, "phrase": "lime"}, {"score": 0.00270221723573854, "phrase": "heterogeneous_systems"}, {"score": 0.0026148807877309417, "phrase": "optimizing_compiler"}, {"score": 0.0025638362414466278, "phrase": "high_quality_gpu_code"}, {"score": 0.0025137856138000036, "phrase": "key_insight"}, {"score": 0.0024485643104830814, "phrase": "language_type_system"}, {"score": 0.002416589459425828, "phrase": "isolation_and_immutability_invariants"}, {"score": 0.0022480304016499605, "phrase": "heroic_compiler_analysis"}, {"score": 0.0021896891011033105, "phrase": "gpu_speedups"}, {"score": 0.0021049977753042253, "phrase": "native_opencl_code"}], "paper_keywords": ["Design", " Languages", " Performance", " GPU", " OpenCL", " Java", " Lime", " Streaming", " Map", " Reduce"], "paper_abstract": "Languages such as OpenCL and CUDA offer a standard interface for general-purpose programming of GPUs. However, with these languages, programmers must explicitly manage numerous low-level details involving communication and synchronization. This burden makes programming GPUs difficult and error-prone, rendering these powerful devices inaccessible to most programmers. We desire a higher-level programming model that makes GPUs more accessible while also effectively exploiting their computational power. This paper presents features of Lime, a new Java-compatible language targeting heterogeneous systems, that allow an optimizing compiler to generate high quality GPU code. The key insight is that the language type system enforces isolation and immutability invariants that allow the compiler to optimize for a GPU without heroic compiler analysis. Our compiler attains GPU speedups between 75% and 140% of the performance of native OpenCL code.", "paper_title": "Compiling a High-Level Language for GPUs (via Language Support for Architectures and Compilers)", "paper_id": "WOS:000307582100001"}