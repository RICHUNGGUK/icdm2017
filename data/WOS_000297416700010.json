{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "temporal_properties"}, {"score": 0.04243745322817866, "phrase": "grid_workflows"}, {"score": 0.004743164872278112, "phrase": "reduced_overhead"}, {"score": 0.004672444473700524, "phrase": "grid_scientific_workflows"}, {"score": 0.004568326972997448, "phrase": "quick_development"}, {"score": 0.00450020161335541, "phrase": "grid_techniques"}, {"score": 0.00443308765153716, "phrase": "growing_complexity"}, {"score": 0.004366970206156021, "phrase": "grid_applications"}, {"score": 0.00396050388346298, "phrase": "potential_pitfalls"}, {"score": 0.003591733916159209, "phrase": "initial_design_phase"}, {"score": 0.003511613254403125, "phrase": "state_pi_calculus"}, {"score": 0.0031845067058084613, "phrase": "flexible_abstraction"}, {"score": 0.0030901063954739375, "phrase": "historical_grid_system_events"}, {"score": 0.002931569771634119, "phrase": "temporal_verification"}, {"score": 0.0027811441123794427, "phrase": "relaxed_region_analysis"}, {"score": 0.0027395980629576493, "phrase": "rra"}, {"score": 0.0025989960809479104, "phrase": "large_scale_grid_workflows"}, {"score": 0.002560162916190598, "phrase": "sequentially_composed_regions"}, {"score": 0.0024842242921857705, "phrase": "parallel_workflow_branches"}, {"score": 0.0024287485834314027, "phrase": "corresponding_verification_strategies"}, {"score": 0.0023390219342052623, "phrase": "modular_verification_principles"}, {"score": 0.0023040642263522505, "phrase": "performance_evaluation_results"}, {"score": 0.00223570488212345, "phrase": "rra_approach"}, {"score": 0.0021693692831601745, "phrase": "cpu_time"}, {"score": 0.0021369416775353107, "phrase": "memory_usage"}, {"score": 0.0021049977753042253, "phrase": "formal_verification"}], "paper_keywords": ["grid computing", " workflow management", " formal verification", " state Pi calculus"], "paper_abstract": "With quick development of grid techniques and growing complexity of grid applications, it is becoming critical for reasoning temporal properties of grid workflows to probe potential pitfalls and errors, in order to ensure reliability and trustworthiness at the initial design phase. A state Pi calculus is proposed and implemented in this work, which not only enables flexible abstraction and management of historical grid system events, but also facilitates modeling and temporal verification of grid workflows. Furthermore, a relaxed region analysis (RRA) approach is proposed to decompose large scale grid workflows into sequentially composed regions with relaxation of parallel workflow branches, and corresponding verification strategies are also decomposed following modular verification principles. Performance evaluation results show that the RRA approach can dramatically reduce CPU time and memory usage of formal verification", "paper_title": "Formal Verification of Temporal Properties for Reduced Overhead in Grid Scientific Workflows", "paper_id": "WOS:000297416700010"}