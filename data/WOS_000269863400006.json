{"auto_keywords": [{"score": 0.03219771999225611, "phrase": "standard_method"}, {"score": 0.012296909584276821, "phrase": "revised_method"}, {"score": 0.009190488276968974, "phrase": "dense_problems"}, {"score": 0.004466519142879166, "phrase": "coarse-grained_computation"}, {"score": 0.00396050388346298, "phrase": "standard_form"}, {"score": 0.003701401653850141, "phrase": "virtually_all_serious_implementations"}, {"score": 0.003382017342396959, "phrase": "sparse_lps"}, {"score": 0.0025219085140220773, "phrase": "important_applications"}, {"score": 0.002465593351432208, "phrase": "wavelet_decomposition"}, {"score": 0.0024287485834314027, "phrase": "digital_filter_design"}, {"score": 0.002392453087295391, "phrase": "text_categorization"}, {"score": 0.0023390219342052623, "phrase": "image_processing"}], "paper_keywords": ["Linear programming", " Standard simplex method", " Dense matrices", " Distributed computing", " Parallel optimization"], "paper_abstract": "We present a simple, scaleable, distributed simplex implementation for large linear programs. It is designed for coarse-grained computation, particularly, readily available networks of workstations. Scalability is achieved by using the standard form of the simplex rather than the revised method. Virtually all serious implementations are based on the revised method because it is much faster for sparse LPs, which are most common. However, there are advantages to the standard method as well. First, the standard method is effective for dense problems. Although dense problems are uncommon in general, they occur frequently in some important applications such as wavelet decomposition, digital filter design, text categorization, and image processing. Second, the standard method can be easily and effectively extended to a coarse grained, distributed algorithm. Such an implementation is presented here. The effectiveness of the approach is supported by experiment and analysis.", "paper_title": "A distributed, scaleable simplex method", "paper_id": "WOS:000269863400006"}