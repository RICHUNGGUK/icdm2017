{"auto_keywords": [{"score": 0.02672590261963155, "phrase": "design_quality"}, {"score": 0.00481495049065317, "phrase": "extract_class_refactorings"}, {"score": 0.004771435352180973, "phrase": "object-oriented_systems"}, {"score": 0.0046221918332842995, "phrase": "essential_practice"}, {"score": 0.004518442937844318, "phrase": "evolutionary_and_agile_software_development"}, {"score": 0.004337502738649814, "phrase": "modern_ides"}, {"score": 0.004240116703465252, "phrase": "low-level_refactorings"}, {"score": 0.0041827333568982055, "phrase": "notable_exception"}, {"score": 0.004088807948906792, "phrase": "supported_refactorings"}, {"score": 0.0040334640350288, "phrase": "\"extract_class\"_refactoring"}, {"score": 0.0036167509502276294, "phrase": "eclipse_plugin"}, {"score": 0.003535489842686145, "phrase": "exactly_this_need"}, {"score": 0.0033630629374009607, "phrase": "extract_class_opportunities"}, {"score": 0.0032725712584012953, "phrase": "identified_opportunities"}, {"score": 0.003056819704624705, "phrase": "system_design"}, {"score": 0.002816556934231128, "phrase": "first_step"}, {"score": 0.002765776659294382, "phrase": "agglomerative_clustering_algorithm"}, {"score": 0.0027159094186967247, "phrase": "cohesive_sets"}, {"score": 0.0026913130726432645, "phrase": "class_members"}, {"score": 0.0026548344763838213, "phrase": "system_classes"}, {"score": 0.0026188490199688013, "phrase": "second_step"}, {"score": 0.002305589818994465, "phrase": "new_classes"}, {"score": 0.0022434880661725493, "phrase": "coherent_concepts"}, {"score": 0.0021632743048552536, "phrase": "underlying_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Refactoring", " Software reengineering", " Object-oriented programming", " Clustering"], "paper_abstract": "Refactoring is recognized as an essential practice in the context of evolutionary and agile software development. Recognizing the importance of the practice, modern IDEs provide some support for low-level refactorings. A notable exception in the list of supported refactorings is the \"Extract Class\" refactoring. which is conceived to simplify large, complex, unwieldy and less cohesive classes. In this work, we describe a method and a tool, implemented as an Eclipse plugin, designed to fulfill exactly this need. Our method involves three steps: (a) recognition of Extract Class opportunities. (b) ranking of the identified opportunities in terms of the improvement each one is anticipated to bring about to the system design, and (c) fully automated application of the refactoring chosen by the developer. The first step relies on an agglomerative clustering algorithm, which identifies cohesive sets of class members within the system classes. The second step relies on the Entity Placement metric as a measure of design quality. Through a set of experiments we have shown that the tool is able to identify and extract new classes that developers recognize as \"coherent concepts\" and improve the design quality of the underlying system. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Identification and application of Extract Class refactorings in object-oriented systems", "paper_id": "WOS:000307793600005"}