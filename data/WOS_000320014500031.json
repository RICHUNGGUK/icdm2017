{"auto_keywords": [{"score": 0.04683590293207774, "phrase": "embedded_systems"}, {"score": 0.045290403341537194, "phrase": "application_programs"}, {"score": 0.00481495049065317, "phrase": "dual-core_processor"}, {"score": 0.004616859702338596, "phrase": "multi-core_processors"}, {"score": 0.003985305257857655, "phrase": "optimal_cache_memory_configuration"}, {"score": 0.0035625556447293804, "phrase": "best_options"}, {"score": 0.0033919477901198716, "phrase": "multi-core_cache_configuration_simulation"}, {"score": 0.0031182092708983184, "phrase": "single-core_cache_configuration_simulation"}, {"score": 0.002473786357109046, "phrase": "new_multi-core_cache_configuration_simulation_algorithm"}, {"score": 0.0023387234705715154, "phrase": "new_theorems"}, {"score": 0.002306123367679187, "phrase": "experimental_results"}, {"score": 0.002226592967032469, "phrase": "exact_simulation_results"}, {"score": 0.0021049977753042253, "phrase": "conventional_approach"}], "paper_keywords": ["cache simulation", " optimaize cache memory", " multicore cache"], "paper_abstract": "Recently, multi-core processors are used in embedded systems very often. Since application programs is much limited running on embedded systems, there must exists an optimal cache memory configuration in terms of power and area. Simulating application programs on various cache configurations is one of the best options to determine the optimal one. Multi-core cache configuration simulation, however, is much more complicated and takes much more time than single-core cache configuration simulation. In this paper, we propose a very fast dual-core L1 cache configuration simulation algorithm. We first propose a new data structure where just a single data structure represents two or more multi-core cache configurations with different cache associativities. After that, we propose a new multi-core cache configuration simulation algorithm using our new data structure associated with new theorems. Experimental results demonstrate that our algorithm obtains exact simulation results but runs 20 times faster than a conventional approach.", "paper_title": "A High-Speed Trace-Driven Cache Configuration Simulator for Dual-Core Processor L1 Caches", "paper_id": "WOS:000320014500031"}