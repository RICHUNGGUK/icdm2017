{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "qu-prolog"}, {"score": 0.004691273968935458, "phrase": "tutorial_paper"}, {"score": 0.004570759604335229, "phrase": "key_features"}, {"score": 0.004482400730101345, "phrase": "multi-threaded_qu-prolog_language"}, {"score": 0.004395742407834023, "phrase": "multi-threaded_communicating_agent_applications"}, {"score": 0.004118751115632515, "phrase": "shared_dynamic_database"}, {"score": 0.003960972732123083, "phrase": "linda_tuple_store"}, {"score": 0.003859146369720225, "phrase": "different_agents"}, {"score": 0.0037599278182081056, "phrase": "different_hosts"}, {"score": 0.0031741489723036255, "phrase": "content_test_subscriptions"}, {"score": 0.003012919635505122, "phrase": "auction_house_application"}, {"score": 0.002878556952876824, "phrase": "multiple_auctioneers"}, {"score": 0.0027681550491613603, "phrase": "simultaneous_auctions"}, {"score": 0.002679386232765167, "phrase": "essential_use"}, {"score": 0.0025934566395017424, "phrase": "inter-thread_communication"}, {"score": 0.0024939618994290016, "phrase": "bidding_behaviour"}, {"score": 0.0023982749733789882, "phrase": "finite_state_automaton"}, {"score": 0.002174821185797172, "phrase": "prolog"}, {"score": 0.002132637840285576, "phrase": "basic_concepts"}, {"score": 0.0021049977753042253, "phrase": "multi-agent_systems"}], "paper_keywords": [""], "paper_abstract": "In this tutorial paper we summarise the key features of the multi-threaded Qu-Prolog language for implementing multi-threaded communicating agent applications. Internal threads of an agent communicate using the shared dynamic database used as a generalisation of Linda tuple store. Threads in different agents, perhaps on different hosts, communicate using either a thread-to-thread store and forward communication system, or by a publish and subscribe mechanism in which messages are routed to their destinations based on content test subscriptions. We illustrate the features using an auction house application. This is fully distributed with multiple auctioneers and bidders which participate in simultaneous auctions. The application makes essential use of the three forms of inter-thread communication of Qu-Prolog. The agent bidding behaviour is specified graphically as a finite state automaton and its implementation is essentially the execution of its state transition function. The paper assumes familiarity with Prolog and the basic concepts of multi-agent systems.", "paper_title": "Multi-threaded communicating agents in Qu-Prolog", "paper_id": "WOS:000237506800011"}