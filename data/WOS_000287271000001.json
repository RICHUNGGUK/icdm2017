{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "line_construction"}, {"score": 0.04483792442020801, "phrase": "suffix_tree"}, {"score": 0.04012257279946613, "phrase": "input_string"}, {"score": 0.004730158389701481, "phrase": "parameterized_suffix_trees"}, {"score": 0.004646852519870358, "phrase": "large_alphabets"}, {"score": 0.004176813329075736, "phrase": "parameterized_string"}, {"score": 0.0034963129868796033, "phrase": "source_code_management_systems"}, {"score": 0.0032852337992126564, "phrase": "source_code_repository"}, {"score": 0.003032405563826263, "phrase": "new_codes"}, {"score": 0.002952516738708181, "phrase": "repository_day"}, {"score": 0.0027741761880779535, "phrase": "on-line_algorithm"}, {"score": 0.0026771333996253783, "phrase": "parameterized_suffix_tree"}, {"score": 0.0022806798371116698, "phrase": "first_randomized_linear_time_algorithm"}, {"score": 0.002220551141101661, "phrase": "on-line_construction_problem"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Algorithm", " Data structures", " Design of algorithms", " Randomized algorithms"], "paper_abstract": "We consider on-line construction of the suffix tree for a parameterized string, where we always have the suffix tree of the input string read so far. This situation often arises from source code management systems where, for example, a source code repository is gradually increasing in its size as users commit new codes into the repository day by day. We present an on-line algorithm which constructs a parameterized suffix tree in randomized O(n) time, where n is the length of the input string. Our algorithm is the first randomized linear time algorithm for the on-line construction problem. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "On-line construction of parameterized suffix trees for large alphabets", "paper_id": "WOS:000287271000001"}