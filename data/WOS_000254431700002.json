{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "minimum_spanning_trees"}, {"score": 0.004686688155058031, "phrase": "distributed_algorithm"}, {"score": 0.004440277230269978, "phrase": "arbitrary_network"}, {"score": 0.002613870237087035, "phrase": "significant_time_gap"}, {"score": 0.0025857324180891526, "phrase": "exact_and_approximate_mst_computation"}, {"score": 0.0024761702541879213, "phrase": "running_time"}, {"score": 0.0023712394008737958, "phrase": "time-optimal_distributed_algorithm"}, {"score": 0.0023204533029056616, "phrase": "mst."}, {"score": 0.0021627595586364724, "phrase": "approximate_mst"}, {"score": 0.0021394674440767124, "phrase": "wireless_networks"}, {"score": 0.0021049977753042253, "phrase": "random_weighted_networks"}], "paper_keywords": ["minimum spanning tree", " distributed approximation algorithm", " randomized algorithm"], "paper_abstract": "We present a distributed algorithm that constructs an O(log n)-approximate minimum spanning tree (MST) in any arbitrary network. This algorithm runs in time (O) over tilde (D(G)+L(G, w)) where L(G, w) is a parameter called the local shortest path diameter and D(G) is the (unweighted) diameter of the graph. Our algorithm is existentially optimal (up to polylogarithmic factors), i.e., there exist graphs which need Omega(D(G) + L(G, w)) time to compute an H-approximation to the MST for any H is an element of [1, Theta(log n)]. Our result also shows that there can be a significant time gap between exact and approximate MST computation: there exists graphs in which the running time of our approximation algorithm is exponentially faster than the time-optimal distributed algorithm that computes the MST. Finally, we show that our algorithm can be used to find an approximate MST in wireless networks and in random weighted networks in almost optimal (O) over tilde (D(G)) time.", "paper_title": "A fast distributed approximation algorithm for minimum spanning trees", "paper_id": "WOS:000254431700002"}