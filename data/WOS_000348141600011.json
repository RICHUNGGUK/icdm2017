{"auto_keywords": [{"score": 0.034091639098935325, "phrase": "communication_cost"}, {"score": 0.00481495049065317, "phrase": "ilp_based_multithreaded_code_generation_for_simulink_model"}, {"score": 0.004716520738331953, "phrase": "increasing_complexity"}, {"score": 0.004652016085325825, "phrase": "embedded_applications"}, {"score": 0.0041666157975446564, "phrase": "great_challenge"}, {"score": 0.003835972725191194, "phrase": "embedded_systems"}, {"score": 0.0037834649508375544, "phrase": "automatic_multithreaded_code_generation_methods"}, {"score": 0.003680587852807675, "phrase": "performance_optimization_techniques"}, {"score": 0.0035804980565263024, "phrase": "effective_solution"}, {"score": 0.003296212583539166, "phrase": "processor_utilization"}, {"score": 0.0031845067058084583, "phrase": "multithreaded_code_generation"}, {"score": 0.003140888248194296, "phrase": "simulink_models"}, {"score": 0.00307657476125683, "phrase": "system_performance"}, {"score": 0.002931569771634119, "phrase": "three-layered_multithreaded_software"}, {"score": 0.0028914057633212045, "phrase": "integer_linear_programming"}, {"score": 0.0028127163745564777, "phrase": "based_design-time_mapping"}, {"score": 0.0026986685585382347, "phrase": "optimal_performance"}, {"score": 0.002643386043540555, "phrase": "hierarchical_software"}, {"score": 0.0025892330566358503, "phrase": "thread_layer"}, {"score": 0.0025537472239953807, "phrase": "processor_usage"}, {"score": 0.0024842242921857705, "phrase": "mapping_and_scheduling_policies"}, {"score": 0.0023999697562763433, "phrase": "integer_linear_programming_formulations"}, {"score": 0.002224510044064184, "phrase": "experimental_results"}, {"score": 0.0021342613107011624, "phrase": "proposed_techniques"}, {"score": 0.0021049977753042253, "phrase": "performance_improvements"}], "paper_keywords": ["code generation", " ILP", " task mapping", " scheduling", " Simulink"], "paper_abstract": "The increasing complexity of embedded applications and the prevalence of multiprocessor system-on-chip (MPSoC) introduce a great challenge for designers on how to achieve performance and programmability simultaneously in embedded systems. Automatic multithreaded code generation methods taking account of performance optimization techniques can be an effective solution. In this paper, we consider the issue of increasing processor utilization and reducing communication cost during multithreaded code generation from Simulink models to improve system performance. We propose a combination of three-layered multithreaded software with Integer Linear Programming (ILP) based design-time mapping and scheduling policies to get optimal performance. The hierarchical software with a thread layer increases processor usage, while the mapping and scheduling policies formulate a group of integer linear programming formulations to minimize communication cost as well as to maximize performance. Experimental results demonstrate the advantages of the proposed techniques on performance improvements.", "paper_title": "ILP Based Multithreaded Code Generation for Simulink Model", "paper_id": "WOS:000348141600011"}