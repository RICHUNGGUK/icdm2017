{"auto_keywords": [{"score": 0.04640484818396662, "phrase": "laporta's_algorithm"}, {"score": 0.015719716506582538, "phrase": "linear_dependencies"}, {"score": 0.013543702765129288, "phrase": "linear_equations"}, {"score": 0.011033438405380916, "phrase": "distributed_program"}, {"score": 0.010936807802338041, "phrase": "test_data"}, {"score": 0.004661176995136095, "phrase": "monte_carlo"}, {"score": 0.004565876339189493, "phrase": "large_number"}, {"score": 0.004539005582217309, "phrase": "scalar_integrals"}, {"score": 0.004498994325265174, "phrase": "small_set"}, {"score": 0.00447251540886613, "phrase": "master_integrals"}, {"score": 0.004420022113586985, "phrase": "common_practice"}, {"score": 0.004394005938106429, "phrase": "multi-loop_calculations"}, {"score": 0.004316868627944404, "phrase": "major_bottleneck"}, {"score": 0.004266194308906261, "phrase": "running_time"}, {"score": 0.0042410797042450816, "phrase": "memory_consumption"}, {"score": 0.0041666157975446564, "phrase": "large_set"}, {"score": 0.003986103192038901, "phrase": "simple_algorithm"}, {"score": 0.003939296259436904, "phrase": "linearly_dependent_equations"}, {"score": 0.003858697684681798, "phrase": "time_and_space_requirements"}, {"score": 0.0038246602895705643, "phrase": "subsequent_run"}, {"score": 0.0037585339327521833, "phrase": "program"}, {"score": 0.0037023957069759503, "phrase": "ibp_chooser"}, {"score": 0.003680587852807675, "phrase": "equations_catalogue_identifier"}, {"score": 0.003562912424153324, "phrase": "cpc_program_library"}, {"score": 0.003541923233726252, "phrase": "queen's_university"}, {"score": 0.0035210575159460465, "phrase": "belfast"}, {"score": 0.003500313767208306, "phrase": "n._ireland"}, {"score": 0.003459191419478298, "phrase": "gnu_general_public_license"}, {"score": 0.0031193028729331667, "phrase": "tar.gz_programming_language"}, {"score": 0.0031009373164994267, "phrase": "haskell"}, {"score": 0.0030195184114140063, "phrase": "haskell_platform"}, {"score": 0.0029577898907158133, "phrase": "windows"}, {"score": 0.002755104031926742, "phrase": "multivariate_polynomial_coefficients"}, {"score": 0.002706659627293686, "phrase": "integration-by-parts_identities"}, {"score": 0.0026827581369353844, "phrase": "laporta"}, {"score": 0.0025892330566358503, "phrase": "finite_field"}, {"score": 0.0025212306068464452, "phrase": "required_equations"}, {"score": 0.002273292707863821, "phrase": "kinematic_invariants"}, {"score": 0.0022201273900989416, "phrase": "individual_problem"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Feynman diagram reduction", " Laporta algorithm", " Redundancy", " Dependent systems of linear equations", " Monte Carlo", " Homomorphic images"], "paper_abstract": "The reduction of a large number of scalar integrals to a small set of master integrals via Laporta's algorithm is common practice in multi-loop calculations. It is also a major bottleneck in terms of running time and memory consumption. It involves solving a large set of linear equations where many of the equations are linearly dependent. We propose a simple algorithm that eliminates all linearly dependent equations from a given system, reducing the time and space requirements of a subsequent run of Laporta's algorithm. Program summary Program title: ICE the IBP Chooser of Equations Catalogue identifier: AESF_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AESF_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 3137 No. of bytes in distributed program, including test data, etc.: 366461 Distribution format: tar.gz Programming language: Haskell. Computer: any system that hosts the Haskell Platform. Operating system: GNU/Linux, Windows, OS/X. Classification: 4.4, 4.8, 5, 11.1. Nature of problem: find linear dependencies in a system of linear equations with multivariate polynomial coefficients. To be used on Integration-By-Parts identities before running Laporta's Algorithm. Solution method: map the system to a finite field and solve there, keeping track of the required equations. Restrictions: typically less than the restrictions imposed by the requirement of being able to process the output with Laporta's Algorithm. Unusual features: complexity increases only very mildly with the number of kinematic invariants. Running time: depends on the individual problem. Fractions of a second to a few minutes have been observed in tests. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Finding linear dependencies in. integration-by-parts equations: A Monte Carlo approach", "paper_id": "WOS:000334085600015"}