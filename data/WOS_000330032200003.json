{"auto_keywords": [{"score": 0.044666503789324775, "phrase": "routing_cost"}, {"score": 0.006660689725624649, "phrase": "swap_edge"}, {"score": 0.006299017124390983, "phrase": "best_swap_edge"}, {"score": 0.00481495049065317, "phrase": "best_swap_edges_minimizing"}, {"score": 0.0047420688386378435, "phrase": "spanning_tree"}, {"score": 0.004518442937844318, "phrase": "positive_real_weights"}, {"score": 0.004416210202299748, "phrase": "source_nodes"}, {"score": 0.004327271696245578, "phrase": "spanning_tree_t"}, {"score": 0.004061002557150101, "phrase": "g."}, {"score": 0.0040298010803060495, "phrase": "edge_e"}, {"score": 0.003978866233891427, "phrase": "transient_failure"}, {"score": 0.003287482882222731, "phrase": "natural_extension"}, {"score": 0.0032624698808386694, "phrase": "all-best_swap_edges_problem"}, {"score": 0.00297670878371527, "phrase": "relevant_cases"}, {"score": 0.0027788910305171443, "phrase": "linear_space_algorithm"}, {"score": 0.00268837647967599, "phrase": "accurate_analysis"}, {"score": 0.0026611219151602534, "phrase": "obtained_swap_tree"}, {"score": 0.0025810006125483835, "phrase": "input_tree"}, {"score": 0.002465307812921804, "phrase": "minimum_routing-cost"}, {"score": 0.002391074639626159, "phrase": "apx"}, {"score": 0.0023547886749476937, "phrase": "addition_nodes"}, {"score": 0.0023249757987087055, "phrase": "suitable_distance"}, {"score": 0.0022955395008397183, "phrase": "tree_centroid"}, {"score": 0.0021319959284827896, "phrase": "constant-ratio_approximation"}], "paper_keywords": ["Graph algorithms", " Minimum routing-cost spanning tree", " Transient edge failures", " All-best swap edges problems"], "paper_abstract": "Given an n-node, undirected and 2-edge-connected graph G=(V,E) with positive real weights on its m edges, given a set of k source nodes SaS dagger V, and given a spanning tree T of G, the routing cost from S of T is the sum of the distances in T from every source saS to all the other nodes of G. If an edge e of T undergoes a transient failure, and one needs to promptly reestablish the connectivity, then to reduce set-up and rerouting costs it makes sense to temporarily replace e by means of a swap edge, i.e., an edge in G reconnecting the two subtrees of T induced by the removal of e. Then, a best swap edge for e is a swap edge which minimizes the routing cost from S of the tree obtained after the swapping. As a natural extension, the all-best swap edges problem is that of finding a best swap edge for every edge of T, and this has been recently solved in O(mn) time and linear space. In this paper, we focus our attention on the relevant cases in which k=O(1) and k=n, which model realistic communication paradigms. For these cases, we improve the above result by presenting an time and linear space algorithm. Moreover, for the case k=n, we also provide an accurate analysis showing that the obtained swap tree is effective in terms of routing cost. Indeed, if the input tree T has a routing cost from V which is a constant-factor away from that of a minimum routing-cost spanning tree (whose computation is a problem known to be in APX), and if in addition nodes in T enjoys a suitable distance stretching property from a tree centroid (which can be constructively induced, as we show), then the tree obtained after the swapping has a routing cost from V which is still a constant-ratio approximation of that of a new (i.e., in the graph deprived of the failed edge) minimum routing-cost spanning tree.", "paper_title": "Finding Best Swap Edges Minimizing the Routing Cost of a Spanning Tree", "paper_id": "WOS:000330032200003"}