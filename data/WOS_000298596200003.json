{"auto_keywords": [{"score": 0.0500781888463454, "phrase": "systematic_methodology"}, {"score": 0.04939323296666451, "phrase": "gcc"}, {"score": 0.015607877272098261, "phrase": "gcc_retargeting"}, {"score": 0.01206568936400115, "phrase": "code_generation"}, {"score": 0.008894591535891467, "phrase": "assistance_tool"}, {"score": 0.004711843410316589, "phrase": "gnu_compiler_collection"}, {"score": 0.004644329185633612, "phrase": "popular_compiler"}, {"score": 0.004577777897335174, "phrase": "open_source"}, {"score": 0.004528488165249491, "phrase": "high-quality_code"}, {"score": 0.004320932773749168, "phrase": "considerable_interest"}, {"score": 0.0041677440361312604, "phrase": "source_programming_language"}, {"score": 0.004049096735491828, "phrase": "corresponding_intermediate_representation"}, {"score": 0.0039623243082901214, "phrase": "machine_description"}, {"score": 0.0038634281440398355, "phrase": "mapping_relationships"}, {"score": 0.003794297119656863, "phrase": "corresponding_target_assembly_instructions"}, {"score": 0.0035554741718298085, "phrase": "target_md_file"}, {"score": 0.00333163309034114, "phrase": "considerable_time"}, {"score": 0.003283830127906969, "phrase": "gcc_intermediate_representation"}, {"score": 0.0030548786410637516, "phrase": "gcc."}, {"score": 0.0030328769643087066, "phrase": "entire_process"}, {"score": 0.0029893477597041493, "phrase": "seven_levels"}, {"score": 0.0029146651796243704, "phrase": "supported_source_programming_language"}, {"score": 0.00283158908387463, "phrase": "web-based_assistance_tool"}, {"score": 0.0026151058979100596, "phrase": "necessary_procedures"}, {"score": 0.0025405463228033486, "phrase": "corresponding_gcc_files"}, {"score": 0.0023977287074829798, "phrase": "proposed_methodology"}, {"score": 0.002158988943184126, "phrase": "taiwan"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["GCC", " compiler", " RTL", " machine description"], "paper_abstract": "GCC (GNU Compiler Collection) is a popular compiler because it is open source, generates high-quality code, and is portable. The emergence of various embedded systems has led to considerable interest in the portability of GCC. For GCC, a source programming language is parsed and internally transferred to the corresponding intermediate representation, RTL (Register Transfer Language). A machine description (MD)file, which describes the mapping relationships between RTL and the corresponding target assembly instructions, is provided at the stage of code generation. Therefore, GCC retargeting requires the construction of a target MD file. However, it is difficult for developers to understand and construct the MD because this requires considerable time spent studying the GCC intermediate representation and the strategy of code generation. In this paper, we propose a systematic methodology to help developers in retargeting GCC. The entire process is divided into seven levels according to the features of the supported source programming language. Based on this systematic methodology, a Web-based assistance tool is also developed to guide developers through the retargeting. The assistance tool operates like a wizard to provide developers with the necessary procedures at each level and then generates the corresponding GCC files. Finally, we demonstrate the utility and practicality of the assistance tool based on the proposed methodology by applying it to the retargeting of GCC to a 32-bit embedded processorthe helper function unit of the UniCore VisoMT processor, as developed by the System-on-Chips (SoC) Research Center of National Chung Cheng University, Taiwan. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "An assistance tool employing a systematic methodology for GCC retargeting", "paper_id": "WOS:000298596200003"}