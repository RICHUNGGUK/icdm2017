{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "malicious_javascript_code"}, {"score": 0.008209822873542643, "phrase": "malicious_web_pages"}, {"score": 0.0058254986257330965, "phrase": "jssandbox"}, {"score": 0.004769182299692333, "phrase": "internal_function_hooking"}, {"score": 0.004612376827433774, "phrase": "web_browsers"}, {"score": 0.004568525347438891, "phrase": "javascript_code"}, {"score": 0.004482063543727601, "phrase": "dynamic_actions"}, {"score": 0.004132411680987228, "phrase": "personal_information"}, {"score": 0.003996458454723708, "phrase": "malware_program_downloads"}, {"score": 0.003939565240409143, "phrase": "client's_system"}, {"score": 0.0036147562669032957, "phrase": "general_users"}, {"score": 0.0035632774896594524, "phrase": "infected_pages"}, {"score": 0.0034459835582278746, "phrase": "novel_framework"}, {"score": 0.003222814590544802, "phrase": "internal_function"}, {"score": 0.0029147869733574844, "phrase": "debug_information"}, {"score": 0.002859533151305368, "phrase": "parameter_values"}, {"score": 0.0027919324834253297, "phrase": "ifh"}, {"score": 0.0026999765206432024, "phrase": "api"}, {"score": 0.0025614999929672, "phrase": "debugger_engine"}, {"score": 0.002327648608736437, "phrase": "obfuscated_string"}, {"score": 0.0021976915360493628, "phrase": "exploit_codes"}, {"score": 0.002145703330831668, "phrase": "proposed_framework"}, {"score": 0.0021049977753042253, "phrase": "specific_features"}], "paper_keywords": ["Malicious JavaScript code", " Sandboxing"], "paper_abstract": "Recently, many malicious users have attacked web browsers using JavaScript code that can execute dynamic actions within the browsers. By forcing the browser to execute malicious JavaScript code, the attackers can steal personal information stored in the system, allow malware program downloads in the client's system, and so on. In order to reduce damage, malicious web pages must be located prior to general users accessing the infected pages. In this paper, a novel framework (JsSandbox) that can monitor and analyze the behavior of malicious JavaScript code using internal function hooking (IFH) is proposed. IFH is defined as the hooking of all functions in the modules using the debug information and extracting the parameter values. The use of IFH enables the monitoring of functions that API hooking cannot. JsSandbox was implemented based on a debugger engine, and some features were applied to detect and analyze malicious JavaScript code: detection of obfuscation, deobfuscation of the obfuscated string, detection of URLs related to redirection, and detection of exploit codes. Then, the proposed framework was analyzed for specific features, and the results demonstrate that JsSandbox can be applied to the analysis of the behavior of malicious web pages.", "paper_title": "JsSandbox: A Framework for Analyzing the Behavior of Malicious JavaScript Code using Internal Function Hooking", "paper_id": "WOS:000306129700019"}