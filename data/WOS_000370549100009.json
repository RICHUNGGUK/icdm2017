{"auto_keywords": [{"score": 0.042786126849983945, "phrase": "mrm"}, {"score": 0.0151125522981566, "phrase": "two-level_types"}, {"score": 0.00481495049065317, "phrase": "modular_reifiable_matching_a"}, {"score": 0.004513255056769647, "phrase": "modular_reifiable_matching"}, {"score": 0.004024863549087511, "phrase": "modular_definition"}, {"score": 0.0031372369299648203, "phrase": "matching_definitions"}, {"score": 0.0028966970007550824, "phrase": "extensible_pattern_matching_definitions"}, {"score": 0.002797329638474873, "phrase": "particular_matches"}, {"score": 0.0026086775334428617, "phrase": "extensible_generic_traversals"}, {"score": 0.002544422946205545, "phrase": "subtyping_relation"}, {"score": 0.002279959393298192, "phrase": "haskell"}, {"score": 0.0022016885701010088, "phrase": "haskell_library"}], "paper_keywords": ["Modular Datatypes", " Subtyping"], "paper_abstract": "This paper presents Modular Reifiable Matching (MRM): a new approach to two level types using a fixpoint of list-of-functors representation. MRM allows the modular definition of datatypes and functions by pattern matching, using a style similar to the widely popular Datatypes 'a la Carte (DTC) approach. However, unlike DTC, MRM uses a fixpoint of list-of-functors approach to two-level types. This approach has advantages that help with various aspects of extensibility, modularity and reuse. Firstly, modular pattern matching definitions are collected using a list of matches that is fully reifiable. This allows for extensible pattern matching definitions to be easily reused/inherited, and particular matches to be overridden. Such flexibility is used, among other things, to implement extensible generic traversals. Secondly, the subtyping relation between lists of functors is quite simple, does not require backtracking, and is easy to model in languages like Haskell. MRM is implemented as a Haskell library, and its use and applicability are illustrated through various examples in the paper.", "paper_title": "Modular Reifiable Matching A List-of-Functors Approach to Two-Level Types", "paper_id": "WOS:000370549100009"}