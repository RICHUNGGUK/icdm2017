{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data-flow_integrity"}, {"score": 0.004707188147442449, "phrase": "windows_vista"}, {"score": 0.004550029253278477, "phrase": "windows_vista_operating_system"}, {"score": 0.004398094237005956, "phrase": "interesting_model"}, {"score": 0.004299621153829837, "phrase": "multi-level_integrity"}, {"score": 0.003882970272082245, "phrase": "information-flow_attack"}, {"score": 0.0033511469200347907, "phrase": "trusted_code"}, {"score": 0.003026127736667187, "phrase": "type_system"}, {"score": 0.002795430970886318, "phrase": "windows"}, {"score": 0.0027017308406240563, "phrase": "typechecking_guarantees"}, {"score": 0.0024395426929046415, "phrase": "untrusted_values"}, {"score": 0.002305014991156598, "phrase": "untrusted_code"}, {"score": 0.0021049977753042253, "phrase": "windows_vista's_runtime_access_checks"}], "paper_keywords": ["Security", " Verification", " Languages", " Theory", " dynamic access control", " data-flow integrity", " hybrid type system", " explicit substitution"], "paper_abstract": "The Windows Vista operating system implements an interesting model of multi-level integrity. We observe that in this model, trusted code must participate in any information-flow attack. Thus, it is possible to eliminate such attacks by statically restricting trusted code. We formalize this model by designing a type system that can efficiently enforce data-flow integrity on Windows Vista. Typechecking guarantees that objects whose contents are statically trusted never contain untrusted values, regardless of what untrusted code runs in the environment. Some of Windows Vista's runtime access checks are necessary for soundness; others are redundant and can be optimized away.", "paper_title": "A Type System for Data-Flow Integrity on Windows Vista", "paper_id": "WOS:000264681500003"}