{"auto_keywords": [{"score": 0.049306105869104874, "phrase": "process_coloring"}, {"score": 0.00764295469412358, "phrase": "provenance_information"}, {"score": 0.00481495049065317, "phrase": "worm_break-in"}, {"score": 0.004511373893354558, "phrase": "self-propagating_worm_attacks"}, {"score": 0.004278807087784626, "phrase": "timely_alerts"}, {"score": 0.004209679094023478, "phrase": "worm_investigation"}, {"score": 0.004108066884382925, "phrase": "break-in_point"}, {"score": 0.0028006988338192375, "phrase": "remotely_accessible_server_process"}, {"score": 0.002699769374493867, "phrase": "spawned_child_processes"}, {"score": 0.0026452734009203764, "phrase": "process_actions"}, {"score": 0.002388817995161952, "phrase": "virtualization-based_implementation"}, {"score": 0.002321563536990284, "phrase": "real-time_monitoring"}, {"score": 0.0021659920594094407, "phrase": "real-world_worms"}, {"score": 0.0021222476760114914, "phrase": "processing_coloring"}, {"score": 0.0021049977753042253, "phrase": "non-provenance-preserving_tools"}], "paper_keywords": ["networked server", " internet worm", " process coloring", " system monitoring", " computer forensics"], "paper_abstract": "To detect and investigate self-propagating worm attacks against networked servers, the following capabilities are desirable: 1) raising timely alerts to trigger a worm investigation, 2) determining the break-in point of a worm, i.e., the vulnerable service from which the worm infiltrates the victim, and 3) identifying all contaminations inflicted by the worm during its residence in the victim. In this paper, we argue that the worm break-in provenance information has not been exploited in achieving these capabilities and thus propose process coloring, a new approach that preserves worm break-in provenance information and propagates it along operating-system-level information flows. More specifically, process coloring assigns a \"color,\" a unique systemwide identifier, to each remotely accessible server process. The color will be either inherited by spawned child processes or diffused transitively through process actions. Process coloring achieves three new capabilities: color-based worm warning generation, break-in point identification, and log file partitioning. The virtualization-based implementation enables more tamper-resistant log collection, storage, and real-time monitoring. Beyond the overhead introduced by virtualization, process coloring only incurs very small additional system overhead. Experiments with real-world worms demonstrate the advantages of processing coloring over non-provenance-preserving tools.", "paper_title": "Tracing worm break-in and contaminations via process coloring: A provenance-preserving approach", "paper_id": "WOS:000256088100003"}