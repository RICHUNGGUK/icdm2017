{"auto_keywords": [{"score": 0.03980713684810354, "phrase": "data_flow_graph"}, {"score": 0.00481495049065317, "phrase": "large_parallel_interactive_applications"}, {"score": 0.004660453113061494, "phrase": "parallel_interactive_applications"}, {"score": 0.0045850648862091085, "phrase": "scientific_visualization"}, {"score": 0.0045108906244892165, "phrase": "virtual_reality"}, {"score": 0.004462105963334103, "phrase": "computational_steering"}, {"score": 0.004413881320537777, "phrase": "interactivity"}, {"score": 0.003980531478122155, "phrase": "strong_performance_constraints"}, {"score": 0.003728966994353039, "phrase": "common_approach"}, {"score": 0.003589602322126282, "phrase": "data_streams"}, {"score": 0.0034742854447532678, "phrase": "incoming_data_streams"}, {"score": 0.0034180189629740426, "phrase": "new_data_streams"}, {"score": 0.00295078850927459, "phrase": "composite_design_pattern"}, {"score": 0.0027641218567092665, "phrase": "component_hierarchy"}, {"score": 0.0024386325347607674, "phrase": "flowvr_middleware"}, {"score": 0.0023602032679095977, "phrase": "parametric_composite_components"}, {"score": 0.0023346234464901978, "phrase": "commonly_called_skeletons"}, {"score": 0.002151388538895855, "phrase": "application_modularity"}, {"score": 0.0021049977753042253, "phrase": "different_case_studies"}], "paper_keywords": ["Interactive applications", " Parallelism", " Components", " Composite design pattern"], "paper_abstract": "This paper focuses on parallel interactive applications ranging from scientific visualization, to virtual reality or computational steering. Interactivity makes them particular on three main aspects: they are endlessly iterative, use advanced I/O devices, and must perform under strong performance constraints (latency, refresh rate). A data flow graph is a common approach to describe such applications. Edges represent data streams while vertices are nodes processing incoming data streams and producing new data streams. When applications become large, this approach shows its limits in terms of maintainability and portability. In this paper, we propose to use the composite design pattern to extend this model for supporting hierarchies of components. The component hierarchy is traversed to instantiate the application and extract the data flow graph required for the execution. This approach has been implemented for the FlowVR middleware. It enables to define parametric composite components, commonly called skeletons, that can be reused in various applications. This approach proved to significantly leverage application modularity as presented in different case studies.", "paper_title": "A hierarchical component model for large parallel interactive applications", "paper_id": "WOS:000303463200007"}