{"auto_keywords": [{"score": 0.0492663932388163, "phrase": "removal_cost"}, {"score": 0.00481495049065317, "phrase": "online_unweighted"}, {"score": 0.0045543011700929096, "phrase": "online_unweighted_knapsack_problem"}, {"score": 0.004216434794603139, "phrase": "vertical_bar"}, {"score": 0.0036448787596988423, "phrase": "ith_item"}, {"score": 0.0028669153591624696, "phrase": "total_size"}, {"score": 0.0028302635493019867, "phrase": "current_knapsack"}, {"score": 0.0026767629720554397, "phrase": "cancellation_charge"}, {"score": 0.0024252458095689847, "phrase": "last_knapsack"}, {"score": 0.0023942269247089277, "phrase": "total_removal_cost"}, {"score": 0.0021049977753042253, "phrase": "optimal_online_algorithms"}], "paper_keywords": ["Knapsack problem", " Online algorithms", " Competitive ratio"], "paper_abstract": "In this paper, we study the online unweighted knapsack problem with removal cost. The input is a sequence of items u (1),u (2),aEuro broken vertical bar,u (n) , each of which has a size and a value, where the value of each item is assumed to be equal to the size. Given the ith item u (i) , we either put u (i) into the knapsack or reject it with no cost. When u (i) is put into the knapsack, some items in the knapsack are removed with removal cost if the sum of the size of u (i) and the total size in the current knapsack exceeds the capacity of the knapsack. Here the removal cost means a cancellation charge or disposal fee. Our goal is to maximize the profit, i.e., the sum of the values of items in the last knapsack minus the total removal cost occurred. In this paper, we consider two kinds of removal cost: unit and proportional cost. For both models, we provide their competitive ratios. Namely, we construct optimal online algorithms and prove that they are best possible.", "paper_title": "Online Unweighted Knapsack Problem with Removal Cost", "paper_id": "WOS:000339341900005"}