{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "anomaly-based_bug_prediction"}, {"score": 0.004594582559945568, "phrase": "software_debugging"}, {"score": 0.0045556080393342165, "phrase": "software_defects"}, {"score": 0.0043842558719324526, "phrase": "serious_challenge"}, {"score": 0.004347057700479576, "phrase": "system_reliability"}, {"score": 0.0042373381286051354, "phrase": "program_failure"}, {"score": 0.003858110309630846, "phrase": "novel_automated_approach"}, {"score": 0.003760685138103153, "phrase": "software_failures"}, {"score": 0.003634587156159668, "phrase": "first_step"}, {"score": 0.0036037265181631324, "phrase": "bug_prediction"}, {"score": 0.003527712410706358, "phrase": "existing_work"}, {"score": 0.0034977560416755726, "phrase": "anomaly-based_bug_detection"}, {"score": 0.003423969509052361, "phrase": "program_execution"}, {"score": 0.0032950412841674026, "phrase": "root_cause"}, {"score": 0.0032531496610470377, "phrase": "software_failure"}, {"score": 0.003211788912325178, "phrase": "second_step"}, {"score": 0.0031845067058084583, "phrase": "bug_isolation"}, {"score": 0.003130633384437765, "phrase": "false-positive_bug_predictions"}, {"score": 0.0030645676308053444, "phrase": "dynamic_forward_slices"}, {"score": 0.003038532168038562, "phrase": "bug_predictions"}, {"score": 0.0029871209444889716, "phrase": "observed_program_failure"}, {"score": 0.0029491324941225356, "phrase": "last_step"}, {"score": 0.002924074850256874, "phrase": "bug_validation"}, {"score": 0.0028623555849897632, "phrase": "isolated_anomalies"}, {"score": 0.0026734504926268442, "phrase": "whole_bug_prediction"}, {"score": 0.0026282000779095987, "phrase": "validation_process"}, {"score": 0.0025291601927956765, "phrase": "efficient_architectural_support"}, {"score": 0.0024234763342790852, "phrase": "real_bug"}, {"score": 0.002253826965566618, "phrase": "state-of-art_debugging_techniques"}, {"score": 0.002187464225869713, "phrase": "defect_locations"}], "paper_keywords": ["Languages", " Reliability", " Performance", " Automated debugging", " Architectural support"], "paper_abstract": "Software defects, commonly known as bugs, present a serious challenge for system reliability and dependability. Once a program failure is observed, the debugging activities to locate the defects are typically nontrivial and time consuming. In this paper, we propose a novel automated approach to pin-point the root-causes of software failures. Our proposed approach consists of three steps. The first step is bug prediction, which leverages the existing work on anomaly-based bug detection as exceptional behavior during program execution has been shown to frequently point to the root cause of a software failure. The second step is bug isolation, which eliminates false-positive bug predictions by checking whether the dynamic forward slices of bug predictions lead to the observed program failure. The last step is bug validation, in which the isolated anomalies are validated by dynamically nullifying their effects and observing if the program still fails. The whole bug prediction, isolation and validation process is fully automated and can be implemented with efficient architectural support. Our experiments with 6 programs and 7 bugs, including a real bug in the gcc 2.95.2 compiler, show that our approach is highly effective at isolating only the relevant anomalies. Compared to state-of-art debugging techniques, our proposed approach pinpoints the defect locations more accurately and presents the user with a much smaller code set to analyze.", "paper_title": "Anomaly-Based Bug Prediction, Isolation, and Validation: An Automated Approach for Software Debugging", "paper_id": "WOS:000266820200006"}