{"auto_keywords": [{"score": 0.041963568229680684, "phrase": "samba-bus_architecture"}, {"score": 0.00481495049065317, "phrase": "samba-bus"}, {"score": 0.004342430078306461, "phrase": "high_performance_communication_architecture"}, {"score": 0.003945117054416623, "phrase": "multiple_compatible_bus_transactions"}, {"score": 0.0036105923401756126, "phrase": "experimental_results"}, {"score": 0.003428665921276366, "phrase": "traditional_bus_architecture"}, {"score": 0.0029576827451501956, "phrase": "average_communication_latency"}, {"score": 0.00266693888510356, "phrase": "arbitration_latency"}, {"score": 0.0026084451971464867, "phrase": "bus_transactions"}, {"score": 0.0024586427394152196, "phrase": "bus_access_grant"}, {"score": 0.0022834017104377525, "phrase": "soc_designs"}, {"score": 0.0022498783454674254, "phrase": "large_numbers"}, {"score": 0.0021842976754894846, "phrase": "long_communication_delay"}, {"score": 0.0021049977753042253, "phrase": "bus_arbiter"}], "paper_keywords": ["bus communication architecture", " on-chip communication", " simultaneous multiple accesses"], "paper_abstract": "A high performance communication architecture, SAMBA-bus, is proposed in this paper. In SAMBA-bus architecture, multiple compatible bus transactions can be performed simultaneously with only a single bus access grant from the bus arbiter. Experimental results show that, compared with a traditional bus architecture, the SAMBA-bus architecture can have up to 3.5 times improvement in the effective bandwidth, and up to 15 times reduction in the average communication latency. In addition, the performance of SAMBA-bus architecture is affected only slightly by arbitration latency, because bus transactions can be performed without waiting for the bus access grant from the arbiter. This feature is desirable in SoC designs with large numbers of modules and long communication delay between modules and the bus arbiter.", "paper_title": "SAMBA-Bus: A high performance bus architecture for system-on-chips", "paper_id": "WOS:000244803900008"}