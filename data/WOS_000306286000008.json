{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "non-interference"}, {"score": 0.004754447398742591, "phrase": "information-flow_property"}, {"score": 0.0046161999598320486, "phrase": "abstract_non-interference"}, {"score": 0.004225014908310818, "phrase": "ani"}, {"score": 0.003949280009382125, "phrase": "present_work"}, {"score": 0.0036450381529042133, "phrase": "observed_property"}, {"score": 0.0033218213825698417, "phrase": "external_user"}, {"score": 0.003014422649429416, "phrase": "initial_type"}, {"score": 0.0029020077365708966, "phrase": "illicit_flows"}, {"score": 0.0026782279715171866, "phrase": "abstract_domains"}, {"score": 0.002633355582628613, "phrase": "class_hierarchies"}, {"score": 0.0025137856138000014, "phrase": "smallest_class"}, {"score": 0.0023996317685956213, "phrase": "non-trivial_subset"}, {"score": 0.0023795705819627117, "phrase": "java"}, {"score": 0.0023003498123420237, "phrase": "soundness_proof"}, {"score": 0.0021049977753042253, "phrase": "illicit_ows"}], "paper_keywords": ["Information Flow", " Non-Interference", " Language-based Security", " Abstract Interpretation", " Object-Oriented Programming Languages"], "paper_abstract": "The Information-Flow property of Non-Interference was recently relaxed into Abstract Non-Interference (ANI), a weakened version where attackers can only observe properties of data, rather than their exact value. ANI was originally defined on integers, where a property models the set of numbers satisfying it. The present work proposes an Object-Oriented, Java-based formulation of an instance of ANI where data take the form of objects, and the observed property comes to be their type. The execution of a program is taken to be the invocation of some method by an external user: a class is secure if, for all its (non-private) methods, the type of their low-security data after the execution does not depend on the initial type of its high-security data (i.e., there are no illicit flows). The relation to ANI theory (in its abstract version) can be seen in the representation of abstract domains in terms of class hierarchies: an upper closure operator map an object into the smallest class it is an instance of. An analyzer for a non-trivial subset of Java is illustrated. A sketch of a soundness proof is provided: a program is never misclassified as secure, i.e., it is rejected whenever the absence of illicit ows cannot be guaranteed.", "paper_title": "Class-level Non-Interference", "paper_id": "WOS:000306286000008"}