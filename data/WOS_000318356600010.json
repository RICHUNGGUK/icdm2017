{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "numerical_kernels"}, {"score": 0.004542780650208743, "phrase": "energy-efficient_processors"}, {"score": 0.004490212943845175, "phrase": "vectorized_computational_units"}, {"score": 0.004438250823243621, "phrase": "in-order_thread_processing"}, {"score": 0.0042859292226559535, "phrase": "sustained_performance"}, {"score": 0.004043541331944951, "phrase": "partial_differential_equations"}, {"score": 0.003837089839193524, "phrase": "memory_access"}, {"score": 0.003792657064634775, "phrase": "sophisticated_optimization_techniques"}, {"score": 0.0036411541601163986, "phrase": "cpu."}, {"score": 0.003557283483525861, "phrase": "new_method"}, {"score": 0.003415137969569376, "phrase": "high-level_assembly_synthesis"}, {"score": 0.003166087014589233, "phrase": "python"}, {"score": 0.00278497898719426, "phrase": "high-level_design"}, {"score": 0.002507511169156787, "phrase": "cpu's_instruction_set"}, {"score": 0.0022974765563692776, "phrase": "cached_memory_scenarios"}, {"score": 0.002244494905883452, "phrase": "mechanically_scheduled_variants"}, {"score": 0.0021049977753042253, "phrase": "previously_published_results"}], "paper_keywords": ["high-performance computing", " performance optimization", " code generation", " SIMD", " Blue Gene/P"], "paper_abstract": "Several emerging petascale architectures use energy-efficient processors with vectorized computational units and in-order thread processing. On these architectures the sustained performance of streaming numerical kernels, ubiquitous in the solution of partial differential equations, represents a challenge despite the regularity of memory access. Sophisticated optimization techniques are required to fully utilize the CPU. We propose a new method for constructing streaming numerical kernels using a high-level assembly synthesis and optimization framework. We describe an implementation of this method in Python targeting the IBM (R) Blue Gene (R)/P supercomputer's PowerPC (R) 450 core. This paper details the high-level design, construction, simulation, verification, and analysis of these kernels utilizing a subset of the CPU's instruction set. We demonstrate the effectiveness of our approach by implementing several three-dimensional stencil kernels over a variety of cached memory scenarios and analyzing the mechanically scheduled variants, including a 27-point stencil achieving a 1.7x speedup over the best previously published results.", "paper_title": "Optimizing the performance of streaming numerical kernels on the IBM Blue Gene/P PowerPC 450 processor", "paper_id": "WOS:000318356600010"}