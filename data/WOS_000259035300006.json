{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "register_allocation"}, {"score": 0.04631011650344564, "phrase": "successive_iterations"}, {"score": 0.03527945741328778, "phrase": "vector_lifetimes"}, {"score": 0.004736820055728928, "phrase": "multidimensional_loops"}, {"score": 0.004382591802405206, "phrase": "n-dimensional_loop"}, {"score": 0.004293840838533456, "phrase": "single_loop_software_pipelining"}, {"score": 0.004189698902282913, "phrase": "loop_variable"}, {"score": 0.004054745478848129, "phrase": "repetitive_pattern"}, {"score": 0.0040052617265655035, "phrase": "effective_register_allocation_method"}, {"score": 0.003782174375003052, "phrase": "vector_lifetime"}, {"score": 0.003751331782523201, "phrase": "rau's_terminology"}, {"score": 0.0037207475087050173, "phrase": "rau"}, {"score": 0.003513443975425428, "phrase": "software_pipelined_schedule"}, {"score": 0.00347054319869429, "phrase": "multidimensional_loop"}, {"score": 0.002970260970134645, "phrase": "simple_solution"}, {"score": 0.0028510114763213596, "phrase": "multidimensional_vector_lifetimes"}, {"score": 0.0027817658627604653, "phrase": "space-time_cylinder"}, {"score": 0.002626645763725465, "phrase": "bin-packing_process"}, {"score": 0.002480154140902474, "phrase": "register_requirement"}, {"score": 0.002303720729387236, "phrase": "special_case"}, {"score": 0.002220257443705344, "phrase": "orc_compiler"}, {"score": 0.002148604369150115, "phrase": "experimental_results"}], "paper_keywords": ["algorithms", " languages", " software pipelining", " register allocation"], "paper_abstract": "This article investigates register allocation for software pipelined multidimensional loops where the execution of successive iterations from an n-dimensional loop is overlapped. For single loop software pipelining, the lifetimes of a loop variable in successive iterations of the loop form a repetitive pattern. An effective register allocation method is to represent the pattern as a vector of lifetimes ( or a vector lifetime using Rau's terminology [Rau 1992]) and map it to rotating registers. Unfortunately, the software pipelined schedule of a multidimensional loop is considerably more complex and so are the vector lifetimes in it. In this article, we develop a way to normalize and represent the vector lifetimes, which captures their complexity, while exposing their regularity that enables a simple solution. The problem is formulated as bin-packing of the multidimensional vector lifetimes on the surface of a space-time cylinder. A metric, called distance, is calculated either conservatively or aggressively to guide the bin-packing process, so that there is no overlapping between any two vector lifetimes, and the register requirement is minimized. This approach subsumes the classical register allocation for software pipelined single loops as a special case. The method has been implemented in the ORC compiler and produced code for the IA-64 architecture. Experimental results show the effectiveness. Several strategies for register allocation are compared and analyzed.", "paper_title": "Register allocation for software pipelined multidimensional loops", "paper_id": "WOS:000259035300006"}