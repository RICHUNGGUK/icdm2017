{"auto_keywords": [{"score": 0.050077635110117764, "phrase": "fault_tolerance"}, {"score": 0.04969377538275669, "phrase": "discrete_controller_synthesis"}, {"score": 0.048935282081903876, "phrase": "dcs"}, {"score": 0.03818919923220396, "phrase": "fault_hypothesis"}, {"score": 0.03745242199002737, "phrase": "fault_tolerance_requirements"}, {"score": 0.031409365993229396, "phrase": "fault_tolerant_systems"}, {"score": 0.027372413375538394, "phrase": "different_kinds"}, {"score": 0.004624751696958501, "phrase": "formal_approach"}, {"score": 0.004232232993872917, "phrase": "construction_formal_properties"}, {"score": 0.0038263136898042285, "phrase": "fault_intolerant_program"}, {"score": 0.003749908582313067, "phrase": "synchronous_parallel_composition"}, {"score": 0.003719773848735395, "phrase": "finite_labeled_transition_systems"}, {"score": 0.0034452601929727752, "phrase": "automatically_a_program"}, {"score": 0.0033492947290751996, "phrase": "initial_fault"}, {"score": 0.002907992115184249, "phrase": "key_properties"}, {"score": 0.002872979681637667, "phrase": "obtained_system"}, {"score": 0.0028155572612699976, "phrase": "fault_tolerance_level"}, {"score": 0.002759279370360986, "phrase": "quantitative_constraints"}, {"score": 0.00266079124891013, "phrase": "numerous_examples"}, {"score": 0.002628747284714371, "phrase": "case_studies"}, {"score": 0.002484233168016808, "phrase": "byzantine"}, {"score": 0.0024345529783611703, "phrase": "hardware_components"}, {"score": 0.002227508035618043, "phrase": "optimality_criterion"}, {"score": 0.0021306709646058295, "phrase": "embedded_systems"}, {"score": 0.0021049977753042253, "phrase": "power_consumption"}], "paper_keywords": ["Fault tolerant systems", " Discrete controller synthesis", " Automatic fault tolerance"], "paper_abstract": "Discrete controller synthesis (DCS) is a formal approach, based on the same state-space exploration algorithms as model-checking. Its interest lies in the ability to obtain automatically systems satisfying by construction formal properties specified a priori. In this paper, our aim is to demonstrate the feasibility of this approach for fault tolerance. We start with a fault intolerant program, modeled as the synchronous parallel composition of finite labeled transition systems; we specify formally a fault hypothesis; we state some fault tolerance requirements; and we use DCS to obtain automatically a program, having the same behavior as the initial fault intolerant one in the absence of faults, and satisfying the fault tolerance requirements under the fault hypothesis. Our original contribution resides in the demonstration that DCS can be elegantly used to design fault tolerant systems, with guarantees on key properties of the obtained system, such as the fault tolerance level, the satisfaction of quantitative constraints, and so on. We show with numerous examples taken from case studies that our method can address different kinds of failures (crash, value, or Byzantine) affecting different kinds of hardware components (processors, communication links, actuators, or sensors). Besides, we show that our method also offers an optimality criterion very useful to synthesize fault tolerant systems compliant to the constraints of embedded systems, like power consumption.", "paper_title": "Automating the addition of fault tolerance with discrete controller synthesis", "paper_id": "WOS:000271199900003"}