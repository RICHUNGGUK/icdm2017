{"auto_keywords": [{"score": 0.03672998173300791, "phrase": "balanced_trees"}, {"score": 0.00481495049065317, "phrase": "balanced_trees_inhabiting_functional_parallel_programming"}, {"score": 0.004624751696958501, "phrase": "important_technique"}, {"score": 0.004578382275810468, "phrase": "parallel_programming"}, {"score": 0.0044870272550540415, "phrase": "algebraic_data_structures"}, {"score": 0.004397487039229447, "phrase": "divide-and-conquer_parallelism"}, {"score": 0.004266501496765747, "phrase": "usual_pointer-based_implementation"}, {"score": 0.003935892934907777, "phrase": "list-iterating_divide-and-conquer_parallel_programs"}, {"score": 0.00376127170364341, "phrase": "similar_problem"}, {"score": 0.0036491673002304326, "phrase": "ill-balanced_and_list-like_shapes"}, {"score": 0.003417565253539315, "phrase": "balanced-tree_structures"}, {"score": 0.003366233863411861, "phrase": "recursive_functions"}, {"score": 0.0027929100418926725, "phrase": "parallel_algorithms"}, {"score": 0.0026823700218343506, "phrase": "efficient_parallel_programs"}, {"score": 0.0025892330566358503, "phrase": "equational_reasoning"}, {"score": 0.0025503112711036994, "phrase": "reynolds'_relational_parametricity"}, {"score": 0.0024247382451294255, "phrase": "binary_trees"}, {"score": 0.0022592313766072658, "phrase": "developed_parallel_programs"}, {"score": 0.0021049977753042253, "phrase": "known_algorithms"}], "paper_keywords": ["Theory", " Algorithms", " Balanced Tree", " Divide-and-conquer Parallelism", " Equational Reasoning", " Parametric Polymorphism"], "paper_abstract": "Divide-and-conquer is an important technique in parallel programming. However, algebraic data structures do not fit divide-and-conquer parallelism. For example, the usual pointer-based implementation of lists cannot efficiently be divided at their middle, which prevents us from developing list-iterating divide-and-conquer parallel programs. Tree-iterating programs possibly face a similar problem, because trees might be ill-balanced and list-like shapes. This paper examines parallel programming based on balanced trees: we consider balanced-tree structures and develop recursive functions on them. By virtue of their balancing nature, either bottom-up or top-down recursive functions exploit divide-and-conquer parallelism. Our main contribution is to demonstrate the promise of this approach. We propose a way of systematically developing balanced trees from parallel algorithms, and then, we show that efficient parallel programs on them can be developed by equational reasoning powered by Reynolds' relational parametricity. We consider functions that operate either lists or binary trees, and show that our methods can uniformly deal with both cases. The developed parallel programs are purely functional, correct by construction, and sometimes even simpler than known algorithms.", "paper_title": "Balanced Trees Inhabiting Functional Parallel Programming", "paper_id": "WOS:000297632700012"}