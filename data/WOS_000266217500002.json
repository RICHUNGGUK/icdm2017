{"auto_keywords": [{"score": 0.04968898347890439, "phrase": "distributed_objects"}, {"score": 0.02322730111336099, "phrase": "unanticipated_dynamic_evolution"}, {"score": 0.004736820055728928, "phrase": "large_information_systems"}, {"score": 0.004546970518808189, "phrase": "different_needs"}, {"score": 0.003924121879214595, "phrase": "server_application"}, {"score": 0.0036903962975894634, "phrase": "experimental_framework"}, {"score": 0.003250403288147613, "phrase": "different_functionalities"}, {"score": 0.003223883109446599, "phrase": "different_applications"}, {"score": 0.003145609726536791, "phrase": "new_client_programs"}, {"score": 0.003107186371289819, "phrase": "behavioral_extensions"}, {"score": 0.0029581155916843663, "phrase": "legacy_applications"}, {"score": 0.0028862761537904206, "phrase": "non-extended_versions"}, {"score": 0.0026700637696697414, "phrase": "host_programming_language"}, {"score": 0.002626645763725465, "phrase": "virtual_machine"}, {"score": 0.002541910967437926, "phrase": "transparent_programming_model"}, {"score": 0.0022849489361157793, "phrase": "java"}, {"score": 0.002220257443705344, "phrase": "related_work"}, {"score": 0.0021049977753042253, "phrase": "industrial_strength_unanticipated_evolution"}], "paper_keywords": ["Dynamic evolution", " Distributed objects", " Unanticipated evolution", " Delegation", " Wrapper pattern"], "paper_abstract": "Large information systems are typically distributed and cater to several client programs, with different needs. Traditional approaches to software development and deployment cannot handle situations where (i) the needs of one client application evolve over time, diverging from the needs of others, and (ii) when the server application cannot be shutdown for maintenance. In this paper, we propose an experimental framework for the unanticipated dynamic evolution of distributed objects that enables us to: (i) extend the behavior of distributed objects during run-time, requiring no shutdown, and (ii) offer different functionalities to different applications simultaneously. In our approach, new client programs can invoke behavioral extensions to server objects that are visible only to them, while legacy applications may continue to use the non-extended versions of the server. Our approach has the advantage of: (i) requiring no changes to the host programming language or to the virtual machine, and (ii) providing a transparent programming model to the developer. In this paper, we describe the problem of unanticipated dynamic evolution of distributed objects, the principles underlying our approach, and our prototype implementations for Java and C#. We conclude by discussing related work, and the extent to which our approach can be used to support industrial strength unanticipated evolution. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "A delegation-based approach for the unanticipated dynamic evolution of distributed objects", "paper_id": "WOS:000266217500002"}