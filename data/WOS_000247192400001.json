{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "two-way_tree"}, {"score": 0.004195418010131832, "phrase": "cryptographic_protocol_verification"}, {"score": 0.003970439654470374, "phrase": "group_key_agreement_schemes"}, {"score": 0.0038624981944755813, "phrase": "diffie-hellman-like_functions"}, {"score": 0.0037231102027070724, "phrase": "emptiness_question"}, {"score": 0.0033651019362620866, "phrase": "independent_interest"}, {"score": 0.003126481516783286, "phrase": "general_push_clauses"}, {"score": 0.002329258721870127, "phrase": "general_case"}, {"score": 0.002183938718432764, "phrase": "provided_push_clauses"}, {"score": 0.0021049977753042253, "phrase": "intersection_clauses"}], "paper_keywords": ["associative-commutative", " tree automata", " two-way tree automata", " alternating tree automata", " branching vector addition systems with states", " resolution", " cryptographic protocols"], "paper_abstract": "We explore the notion of alternating two-way tree automata modulo the theory of finitely many associative-commutative (AC) symbols. This was prompted by questions arising in cryptographic protocol verification, in particular in modeling group key agreement schemes based on Diffie-Hellman-like functions, where the emptiness question for intersections of such automata is fundamental. This also has independent interest. We show that the use of general push clauses, or of alternation, leads to undecidability, already in the case of one AC symbol, with only functions of arity zero. On the other hand, emptiness is decidable in the general case of several function symbols, including several AC symbols, provided push clauses are unconditional and intersection clauses are final. This class of automata is also shown to be closed under intersection. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Alternating two-way AC-tree automata", "paper_id": "WOS:000247192400001"}