{"auto_keywords": [{"score": 0.046481645015043, "phrase": "bulk-load_data"}, {"score": 0.00481495049065317, "phrase": "dynamic_metric_access_methods"}, {"score": 0.004594951819987416, "phrase": "new_technique"}, {"score": 0.004384960761826366, "phrase": "multi-way_dynamic_metric_access_methods"}, {"score": 0.004119762981892093, "phrase": "representative_elements"}, {"score": 0.003931402465972151, "phrase": "hierarchical_data_structures"}, {"score": 0.0038404642251010797, "phrase": "proposed_algorithms"}, {"score": 0.0035245918797629804, "phrase": "valid_and_height-balanced_tree"}, {"score": 0.003389704997952315, "phrase": "proposed_algorithm"}, {"score": 0.0033372020049592726, "phrase": "existing_ones"}, {"score": 0.0031107911390188055, "phrase": "slim-tree_metric_access_method"}, {"score": 0.002968424524565369, "phrase": "worst_case"}, {"score": 0.0028325548627901004, "phrase": "adequate_counteractions"}, {"score": 0.002766963729586353, "phrase": "elegant_way"}, {"score": 0.002702887319160534, "phrase": "second_algorithm"}, {"score": 0.002385326947545194, "phrase": "sequential_insertion_method"}, {"score": 0.00234834406550549, "phrase": "construction_time"}, {"score": 0.002206045784326466, "phrase": "search_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Information storage and retrieval", " Data structures", " Searching and sorting"], "paper_abstract": "This paper presents a new technique and two algorithms to bulk-load data into multi-way dynamic metric access methods, based on the covering radius of representative elements employed to organize data in hierarchical data structures. The proposed algorithms are sample-based, and they always build a valid and height-balanced tree. We compare the proposed algorithm with existing ones, showing the behavior to bulk-load data into the Slim-tree metric access method. After having identified the worst case of our first algorithm, we describe adequate counteractions in an elegant way creating the second algorithm. Experiments performed to evaluate their performance show that our bulk-loading methods build trees faster than the sequential insertion method regarding construction time, and that it also significantly improves search performance. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Efficient bulk-loading on dynamic metric access methods", "paper_id": "WOS:000277851000004"}