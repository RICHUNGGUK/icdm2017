{"auto_keywords": [{"score": 0.05007851542092211, "phrase": "model_inconsistencies"}, {"score": 0.026822469433683126, "phrase": "agg."}, {"score": 0.004753194996637899, "phrase": "transformation_dependency_analysis"}, {"score": 0.004692227830462433, "phrase": "model_inconsistency_management"}, {"score": 0.004602233424629559, "phrase": "crucial_aspect"}, {"score": 0.004543193737836748, "phrase": "model-driven_software_engineering"}, {"score": 0.0043144799365586375, "phrase": "automated_support"}, {"score": 0.003791621842185417, "phrase": "new_inconsistencies"}, {"score": 0.003531474887552889, "phrase": "inconsistency_detection"}, {"score": 0.003441352119167824, "phrase": "graph_transformation_rules"}, {"score": 0.003267925215811654, "phrase": "critical_pair_analysis"}, {"score": 0.0032051601987130207, "phrase": "potential_dependencies"}, {"score": 0.0026060359255636444, "phrase": "critical_pair_analysis_algorithm"}, {"score": 0.0025394700487126414, "phrase": "state-of-the-art_graph_transformation_tool"}, {"score": 0.002380381895973937, "phrase": "resolution_rules"}, {"score": 0.002202547013259953, "phrase": "proposed_approach"}, {"score": 0.0021742244283295986, "phrase": "contemporary_modelling_tools"}, {"score": 0.002132420504803564, "phrase": "inconsistency_management"}], "paper_keywords": [""], "paper_abstract": "Model inconsistency management is a crucial aspect of model-driven software engineering. It is therefore important to provide automated support for this activity. The problem is, however, that the resolution of inconsistencies may give rise to new inconsistencies. To address this problem, we propose to express inconsistency detection and resolutions as graph transformation rules, and to apply the theory of critical pair analysis to analyse potential dependencies between the detection and resolution of model inconsistencies. As a proof-of-concept, we report on an experiment that we have carried out along these lines using the critical pair analysis algorithm implemented in the state-of-the-art graph transformation tool AGG. The results show that both anticipated and unexpected dependencies between inconsistency detection and resolution rules are found by AGG. We discuss how the integration of the proposed approach into contemporary modelling tools may improve inconsistency management in various ways.", "paper_title": "Detecting and resolving model inconsistencies using transformation dependency analysis", "paper_id": "WOS:000241450700015"}