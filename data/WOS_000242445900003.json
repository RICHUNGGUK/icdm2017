{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "combinatorial_problem_instances"}, {"score": 0.038661520814563984, "phrase": "corresponding_algorithms"}, {"score": 0.0043619799095455415, "phrase": "evolutionary_computation"}, {"score": 0.0031277316566463978, "phrase": "combinatorial_optimisation"}, {"score": 0.003071965703296204, "phrase": "binary_constraint_satisfaction"}, {"score": 0.0030171910207671205, "phrase": "boolean_satisfiability"}, {"score": 0.002910545717767559, "phrase": "travelling_salesman_problem"}, {"score": 0.00249767641333441, "phrase": "popular_benchmarks"}, {"score": 0.0023451553255837317, "phrase": "evolved_instances"}, {"score": 0.0021049977753042253, "phrase": "structural_properties"}], "paper_keywords": ["binary constraint satisfaction", " travelling salesman", " Boolean satisfiability", " 3-SAT", " difficult combinatorial problems", " problem hardness", " evolving problems"], "paper_abstract": "This paper demonstrates how evolutionary computation can be used to acquire difficult to solve combinatorial problem instances. As a result of this technique, the corresponding algorithms used to solve these instances are stress-tested. The technique is applied in three important domains of combinatorial optimisation, binary constraint satisfaction, Boolean satisfiability, and the travelling salesman problem. The problem instances acquired through this technique are more difficult than the ones found in popular benchmarks. In this paper, these evolved instances are analysed with the aim to explain their difficulty in terms of structural properties, thereby exposing the weaknesses of corresponding algorithms.", "paper_title": "Evolving combinatorial problem instances that are difficult to solve", "paper_id": "WOS:000242445900003"}