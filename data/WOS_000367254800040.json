{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_concurrent_internal_binary_search_tree"}, {"score": 0.0047559432344272, "phrase": "edge-based_locking"}, {"score": 0.004611554879923759, "phrase": "new_lock-based_algorithm"}, {"score": 0.004444037594955185, "phrase": "binary_search_tree"}, {"score": 0.004362564831572539, "phrase": "asynchronous_shared_memory_system"}, {"score": 0.004026359831748917, "phrase": "desirable_characteristics"}, {"score": 0.003808845109556467, "phrase": "search_operation"}, {"score": 0.0035369291417564606, "phrase": "insert_operation"}, {"score": 0.003284361433827464, "phrase": "delete_operation"}, {"score": 0.0029207251108325006, "phrase": "internal_representation"}, {"score": 0.002867098884583832, "phrase": "search_tree"}, {"score": 0.0025027144548626975, "phrase": "contention_window"}, {"score": 0.002456744238900652, "phrase": "write_operation"}, {"score": 0.0023967582707115354, "phrase": "system_throughput"}, {"score": 0.002239225269052105, "phrase": "concurrent_binary_search_tree"}, {"score": 0.0022117133940361025, "phrase": "medium-sized_and_larger_trees"}, {"score": 0.0021049977753042253, "phrase": "next_best_algorithm"}], "paper_keywords": ["Concurrent Data Structure", " Binary Search Tree", " Internal Representation", " Lock-Based Algorithm", " Edge-Based Locking"], "paper_abstract": "We present a new lock-based algorithm for concurrent manipulation of a binary search tree in an asynchronous shared memory system that supports search, insert and delete operations. Some of the desirable characteristics of our algorithm are: (i) a search operation uses only read and write instructions, (ii) an insert operation does not acquire any locks, and (iii) a delete operation only needs to lock up to four edges in the absence of contention. Our algorithm is based on an internal representation of a search tree and it operates at edge-level (locks edges) rather than at node-level (locks nodes); this minimizes the contention window of a write operation and improves the system throughput. Our experiments indicate that our lock-based algorithm outperforms existing algorithms for a concurrent binary search tree for medium-sized and larger trees, achieving up to 59% higher throughput than the next best algorithm.", "paper_title": "CASTLE: Fast Concurrent Internal Binary Search Tree using Edge-Based Locking", "paper_id": "WOS:000367254800040"}