{"auto_keywords": [{"score": 0.028750577574613766, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "ambient_abstract_state_machines"}, {"score": 0.004556901872357751, "phrase": "flexible_abstract_ambient_concept"}, {"score": 0.004346704947011699, "phrase": "current_programming_practice"}, {"score": 0.003802135020791801, "phrase": "distributed_computing"}, {"score": 0.003742711659195878, "phrase": "heterogeneous_components"}, {"score": 0.003432044343307207, "phrase": "rigorous_high-level_system_design_practice"}, {"score": 0.0032223742018434856, "phrase": "abstract_state_machines"}, {"score": 0.0029781530607129653, "phrase": "common_static_and_dynamic_disciplines"}, {"score": 0.0028630535573013686, "phrase": "concurrent_behavior"}, {"score": 0.002752390133272192, "phrase": "multiple_threads"}, {"score": 0.0024842242921857705, "phrase": "object-oriented_programming"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Ambient concept", " Abstract State Machines", " Naming disciplines", " Memory sharing disciplines", " Object-oriented design patterns", " Mobile agents"], "paper_abstract": "We define a flexible abstract ambient concept which turned out to support current programming practice, in fact can be instantiated to apparently any environment paradigm in use in frameworks for distributed computing with heterogeneous components. For the sake of generality and to also support rigorous high-level system design practice we give the definition in terms of Abstract State Machines. We show the definition to uniformly capture the common static and dynamic disciplines for isolating states or concurrent behavior (e.g. handling of multiple threads for Java) as well as for sharing memory, patterns of object-oriented programming (e.g. for delegation, incremental refinement, encapsulation, views) and agent mobility. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Ambient Abstract State Machines with applications", "paper_id": "WOS:000301620100014"}