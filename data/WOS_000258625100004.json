{"auto_keywords": [{"score": 0.04155291847059331, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "domajin-specific_language_debuggers"}, {"score": 0.004776853267973129, "phrase": "domain-specific_languages"}, {"score": 0.004664352260912174, "phrase": "software_developer"}, {"score": 0.0043080553835735825, "phrase": "specific_problem_domain"}, {"score": 0.004273951631010383, "phrase": "tool_support"}, {"score": 0.004074901471704325, "phrase": "standard_general-purpose_languages"}, {"score": 0.003645568551003452, "phrase": "dsl"}, {"score": 0.0035455471410184404, "phrase": "proper_abstraction_level_limits"}, {"score": 0.003517458289610994, "phrase": "end-user's_ability"}, {"score": 0.0034073030552032304, "phrase": "dsl_program"}, {"score": 0.0033269488835014583, "phrase": "grammar-driven_technique"}, {"score": 0.0032744315183287024, "phrase": "debugging_tool_generation_framework"}, {"score": 0.003248483521309273, "phrase": "existing_dsl_grammars"}, {"score": 0.0032099453192629976, "phrase": "dsl_grammars"}, {"score": 0.0030602966787192745, "phrase": "supporting_infrastructure"}, {"score": 0.0030119758165837625, "phrase": "integrated_development_environment"}, {"score": 0.003008142607365988, "phrase": "dsl."}, {"score": 0.002837451022172113, "phrase": "coordinated_approach"}, {"score": 0.0028037753646260937, "phrase": "essential_software_tools"}, {"score": 0.002737615043512257, "phrase": "different_types"}, {"score": 0.00252812242767189, "phrase": "accidental_complexities"}, {"score": 0.0024488738006005133, "phrase": "language_environment"}, {"score": 0.0023253461255420436, "phrase": "long-term_goal"}, {"score": 0.002279508335630797, "phrase": "development_tools"}, {"score": 0.002208035721125305, "phrase": "proper_level"}, {"score": 0.002147333949483224, "phrase": "specific_gpl._copyright"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["debugging", " DSL", " GPL", " grammars", " program environments-integrated environments"], "paper_abstract": "Domain-specific languages (DSLs) assist a software developer (or end-user) in writing a program using idioms that are similar to the abstractions round in a specific problem domain. Tool support for DSIs is lacking when compared with the capabilities provided for standard general-purpose languages (GPLs), such as Java and C++. For example, support for debugging a program written in a DSL is often non-existent. The lack of a debugger at the proper abstraction level limits an end-user's ability to discover and locate faults in a DSL program. This paper describes a grammar-driven technique to build a debugging tool generation framework from existing DSL grammars. The DSL grammars are used to generate the hooks needed to interface with a supporting infrastructure constructed for an integrated development environment that assists in debugging a program written in a DSL. The contribution represents a coordinated approach to bring essential software tools (e.g. debuggers) to different types of DSLs (e.g. imperative, declarative, and hybrid). This approach hides from the end-users the accidental complexities associated with expanding the focus of a language environment to include debuggers. The research described in this paper addresses a long-term goal of empowering end-users with development tools for particular DSL problem domains at the proper level of abstraction without depending on a specific GPL. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "Grammar-driven generation of domajin-specific language debuggers", "paper_id": "WOS:000258625100004"}