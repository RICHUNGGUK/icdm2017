{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "optimal_sequences"}, {"score": 0.004473982381245469, "phrase": "efficient_programs"}, {"score": 0.004312622975366676, "phrase": "optimal_sequence"}, {"score": 0.0035887342563437935, "phrase": "efficient_algorithms"}, {"score": 0.0035233696341819437, "phrase": "naive_enumerate-and-choose-style_ones"}, {"score": 0.0033037970113095577, "phrase": "short-cut_fusion"}, {"score": 0.0031553611552558986, "phrase": "program_transformation"}, {"score": 0.0030695103543472908, "phrase": "intermediate_data_structures"}, {"score": 0.002825681384008326, "phrase": "auxiliary_transformations"}, {"score": 0.0023507916951658455, "phrase": "proposed_transformations"}, {"score": 0.002183938718432764, "phrase": "desirable_sequences"}, {"score": 0.0021049977753042253, "phrase": "naive_enumerate-and-choose-style_programs"}], "paper_keywords": ["Functional Programming", " Dynamic Programming", " Program Transformation", " Shortcut Fusion"], "paper_abstract": "We propose a method of developing efficient programs for finding the optimal sequence, such as the maximum valued one among those that are acceptable. We introduce a method of deriving efficient algorithms from naive enumerate-and-choose-style ones. Our method is based on short-cut fusion, which is a program transformation for eliminating intermediate data structures passed between functions, and a set of auxiliary transformations. As an implementation of our method, we introduce a library for finding optimal sequences. The library consists of proposed transformations, together with functions useful to describe desirable sequences, so that naive enumerate-and-choose-style programs will be automatically improved.", "paper_title": "A Short Cut to Optimal Sequences", "paper_id": "WOS:000287554100003"}