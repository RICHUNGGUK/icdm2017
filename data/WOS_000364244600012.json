{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "error_detection_strategies"}, {"score": 0.004707188147442449, "phrase": "cloud-based_deployment_processes"}, {"score": 0.004567230180529598, "phrase": "cloud_environments"}, {"score": 0.004315879542755464, "phrase": "complex_process_execution"}, {"score": 0.004267287100135339, "phrase": "cloud-based_processes"}, {"score": 0.004156012879026324, "phrase": "complex_interactions"}, {"score": 0.004124754315882517, "phrase": "cloud_infrastructure"}, {"score": 0.00409372989087314, "phrase": "application_software"}, {"score": 0.0038392331564122387, "phrase": "release_decisions"}, {"score": 0.003810348067898898, "phrase": "continuous_deployment"}, {"score": 0.0037532257703888315, "phrase": "system_upgrades"}, {"score": 0.003614124997453808, "phrase": "typically_well-tested_deployed_software_systems"}, {"score": 0.0033385105985286154, "phrase": "time-consuming_troubleshooting"}, {"score": 0.0027017308406240563, "phrase": "continuous_deployment_process"}, {"score": 0.002671263324230699, "phrase": "rolling_upgrade_process"}, {"score": 0.0026212437316947197, "phrase": "existing_process"}, {"score": 0.002543148295176345, "phrase": "model_errors"}, {"score": 0.002495521662819317, "phrase": "process_execution"}, {"score": 0.0024487847651989128, "phrase": "process-aware_discrete-event_simulator"}, {"score": 0.0023848164282879885, "phrase": "simulation_results"}, {"score": 0.0023137485947956732, "phrase": "production_environment"}, {"score": 0.0022194677375148063, "phrase": "error-handling_strategies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Process modeling", " Simulation", " Deployment process"], "paper_abstract": "The processes for deploying systems in cloud environments can be the basis for studying strategies for detecting and correcting errors committed during complex process execution. These cloud-based processes encompass diverse activities, and entail complex interactions between cloud infrastructure, application software, tools, and humans. Many of these processes, such as those for making release decisions during continuous deployment and troubleshooting in system upgrades, are highly error-prone. Unlike the typically well-tested deployed software systems, these deployment processes are usually neither well understood nor well tested. Errors that occur during such processes may require time-consuming troubleshooting, undoing and redoing steps, and problem fixing. Consequently, these processes should ideally be guided by strategies for detecting errors that consider trade-offs between efficiency and reliability. This paper presents a framework for systematically exploring such trade-offs. To evaluate the framework and illustrate our approach, we use two representative cloud deployment processes: a continuous deployment process and a rolling upgrade process. We augment an existing process modeling language to represent these processes and model errors that may occur during process execution. We use a process-aware discrete-event simulator to evaluate strategies and empirically validate simulation results by comparing them to experiences in a production environment. Our evaluation demonstrates that our approach supports the study of how error-handling strategies affect how much time is taken for task-completion and error-fixing. (c) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Using simulation to evaluate error detection strategies: A case study of cloud-based deployment processes", "paper_id": "WOS:000364244600012"}