{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "secure_information_flow"}, {"score": 0.013625101793006808, "phrase": "security_levels"}, {"score": 0.009275453343244222, "phrase": "abstract_domain"}, {"score": 0.0047049532961375, "phrase": "input-output_security_annotations"}, {"score": 0.004492406361795448, "phrase": "abstract_interpretation"}, {"score": 0.004314285113050873, "phrase": "dynamic_structures"}, {"score": 0.004264697351852424, "phrase": "input_and_output_channels"}, {"score": 0.004071957673937727, "phrase": "concrete_operational_semantics"}, {"score": 0.003910441483033426, "phrase": "security_level"}, {"score": 0.0035442655396704724, "phrase": "collecting_semantics"}, {"score": 0.0033644530302903513, "phrase": "concrete_states"}, {"score": 0.0031569846310720135, "phrase": "abstract_domains"}, {"score": 0.003066945490483524, "phrase": "concrete_ones"}, {"score": 0.0029281780903782284, "phrase": "actual_values"}, {"score": 0.0025780134737796085, "phrase": "abstract_operational_semantics"}, {"score": 0.002447101794397243, "phrase": "efficient_implementation"}, {"score": 0.002363532907211947, "phrase": "fixpoint_iteration"}, {"score": 0.0022828113789751694, "phrase": "java_bytecode_verification"}, {"score": 0.0021921063460682293, "phrase": "larger_set"}, {"score": 0.0021049977753042253, "phrase": "typing_approaches"}], "paper_keywords": [""], "paper_abstract": "We present a method based on abstract interpretation to check secure information flow in programs with dynamic structures where input and output channels are associated with security levels. In the concrete operational semantics each value is annotated with a security level dynamically taking into account both the explicit and the implicit information flows. We define a collecting semantics associating to each program point the set of concrete states of the machine when the point is reached. The abstract domains are obtained from the concrete ones by keeping the security levels and forgetting the actual values. An element of the abstract domain of states is a table whose rows correspond to the instructions of the program. An abstract operational semantics is defined on the abstract domain, and an efficient implementation is shown, operating a fixpoint iteration similar to that of the Java bytecode verification. The approach allows certifying a larger set of programs with respect to the typing approaches to check secure information flow.", "paper_title": "Abstract interpretation to check secure information flow in programs with input-output security annotations", "paper_id": "WOS:000236940300006"}