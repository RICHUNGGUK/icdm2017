{"auto_keywords": [{"score": 0.012485791489111997, "phrase": "application_behavior"}, {"score": 0.004755353864362941, "phrase": "main_goal"}, {"score": 0.004619134710069517, "phrase": "considered_problem"}, {"score": 0.004486800020569973, "phrase": "available_resources"}, {"score": 0.004358240019060018, "phrase": "application_performance"}, {"score": 0.004304271837157217, "phrase": "crucial_issue"}, {"score": 0.004010785080336424, "phrase": "high-performance_computation"}, {"score": 0.003737234606207431, "phrase": "performance_problems"}, {"score": 0.003585089792133518, "phrase": "source_code"}, {"score": 0.0035113478590679133, "phrase": "current_approaches"}, {"score": 0.003354393040689453, "phrase": "high_degree"}, {"score": 0.003151572886432253, "phrase": "optimization_process"}, {"score": 0.0030739103951333696, "phrase": "dynamic_tuning_approach"}, {"score": 0.00288800021194675, "phrase": "user_intervention"}, {"score": 0.0025070703395635133, "phrase": "introduced_modifications"}, {"score": 0.0024554476124885806, "phrase": "changing_conditions"}, {"score": 0.002306855521822739, "phrase": "dynamic_tuning"}, {"score": 0.00224061675049049, "phrase": "practical_experiments"}, {"score": 0.0022128173128189627, "phrase": "mate"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["automatic performance analysis", " dynamic instrumentation", " dynamic tuning", " parallel/distributed application"], "paper_abstract": "The main goal of parallel/distributed applications is to solve the considered problem as fast as possible using the available resources. In this context, the application performance becomes a crucial issue. Developers of these applications must optimize them if they are to fulfill the promise of high-performance computation. To improve performance, developers search for bottlenecks by analyzing application behavior, try to identify performance problems, determine their causes and overcome them by changing the source code of the application. Current approaches require developers to do these tasks manually and imply a high degree of expertise. Therefore, another approach is needed to help developers during the optimization process. This paper presents the dynamic tuning approach that addresses these issues. In this approach, many tasks are automated and the user intervention and required experience may be significantly reduced. An application is monitored, its performance bottlenecks are detected and it is modified automatically during execution, without recompiling or re-running it. The introduced modifications adapt the application behavior to changing conditions. We present an environment called MATE (Monitoring, Analysis and Tuning Environment) that has been developed to provide dynamic tuning of parallel/distributed applications. We also show practical experiments conducted with MATE to prove its effectiveness and profitability. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "MATE: Monitoring, analysis and tuning environment for parallel/distributed applications", "paper_id": "WOS:000248578200006"}