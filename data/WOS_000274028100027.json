{"auto_keywords": [{"score": 0.0492663932388163, "phrase": "session_types"}, {"score": 0.010522443134901069, "phrase": "distributed_object-oriented_programming"}, {"score": 0.008988226178481704, "phrase": "session_type"}, {"score": 0.00481495049065317, "phrase": "modular_session_types"}, {"score": 0.0046928556063004214, "phrase": "communication_protocols"}, {"score": 0.004515467468684217, "phrase": "protocol_implementations"}, {"score": 0.004419819325202464, "phrase": "static_type-checking"}, {"score": 0.004344755264641137, "phrase": "previous_work"}, {"score": 0.004270960586542813, "phrase": "distributed_object-oriented_languages"}, {"score": 0.0040223714916651845, "phrase": "class_definition"}, {"score": 0.003937126962709418, "phrase": "possible_sequences"}, {"score": 0.0039035351575463103, "phrase": "method_calls"}, {"score": 0.003582928547553209, "phrase": "separately-callable_methods"}, {"score": 0.003477029725200912, "phrase": "session-typed_communication_channels"}, {"score": 0.0032465423581390625, "phrase": "elegant_unification"}, {"score": 0.003218823621926739, "phrase": "communication_channels"}, {"score": 0.0030573959252626695, "phrase": "non-uniform_objects"}, {"score": 0.002929056388593134, "phrase": "available_methods"}, {"score": 0.002854645802851, "phrase": "operational_semantics"}, {"score": 0.0028181504086563967, "phrase": "sound_type_system"}, {"score": 0.0027702126237754625, "phrase": "correct_and_complete_type_checking_algorithm"}, {"score": 0.0027347937102326285, "phrase": "small_distributed_class-based_object-oriented_language"}, {"score": 0.002477837342313456, "phrase": "type-theoretic_specifications"}, {"score": 0.0023839754995935184, "phrase": "expected_features"}, {"score": 0.002264321283759897, "phrase": "object-oriented_programming"}, {"score": 0.0022067604433257814, "phrase": "local_state"}, {"score": 0.002150659690967412, "phrase": "prototype_implementation"}, {"score": 0.002105036538297184, "phrase": "java"}], "paper_keywords": ["Languages", " Theory", " Verification", " Session types", " object-oriented calculus", " non-uniform method availability", " typestates"], "paper_abstract": "Session types allow communication protocols to be specified type-theoretically so that protocol implementations can be verified by static type-checking. We extend previous work on session types for distributed object-oriented languages in three ways. (1) We attach a session type to a class definition, to specify the possible sequences of method calls. (2) We allow a session type (protocol) implementation to be modularized, i.e. partitioned into separately-callable methods. (3) We treat session-typed communication channels as objects, integrating their session types with the session types of classes. The result is an elegant unification of communication channels and their session types, distributed object-oriented programming, and a form of typestates supporting non-uniform objects, i.e. objects that dynamically change the set of available methods. We define syntax, operational semantics, a sound type system, and a correct and complete type checking algorithm for a small distributed class-based object-oriented language. Static typing guarantees that both sequences of messages on channels, and sequences of method calls on objects, conform to type-theoretic specifications, thus ensuring type-safety. The language includes expected features of session types, such as delegation, and expected features of object-oriented programming, such as encapsulation of local state. We also describe a prototype implementation as an extension of Java.", "paper_title": "Modular Session Types for Distributed Object-Oriented Programming", "paper_id": "WOS:000274028100027"}