{"auto_keywords": [{"score": 0.0474894292969371, "phrase": "vector_clocks"}, {"score": 0.00481495049065317, "phrase": "lock_trace_reduction_for_multithreaded_programs"}, {"score": 0.004399349717218995, "phrase": "casual_relations"}, {"score": 0.004338661611644755, "phrase": "synchronization_events"}, {"score": 0.004249188865832993, "phrase": "concurrent_threads"}, {"score": 0.004161553532799662, "phrase": "trace_logs"}, {"score": 0.003964007795174772, "phrase": "vector-based_comparison"}, {"score": 0.002723186210025975, "phrase": "log_traces"}, {"score": 0.002557903193666366, "phrase": "loft."}, {"score": 0.0024533019565858073, "phrase": "well-studied_parsec_benchmarking_suite"}, {"score": 0.002419393934835993, "phrase": "five_large-scale_real-world_applications"}, {"score": 0.002241107031496342, "phrase": "loft"}, {"score": 0.002164432930854161, "phrase": "synchronization_operations"}, {"score": 0.0021049977753042253, "phrase": "existing_approach"}], "paper_keywords": ["Redundant operation optimization", " threads", " synchronization"], "paper_abstract": "Many happened-before-based detectors for debugging multithreaded programs implement vector clocks to incrementally track the casual relations among synchronization events produced by concurrent threads and generate trace logs. They update the vector clocks via vector-based comparison and content assignment in every case. We observe that many such tracking comparison and assignment operations are removable in part or in whole, which if identified and used properly, have the potential to reduce the log traces thus produced. This paper presents our analysis to identify such removable tracking operations and shows how they could be used to reduce log traces. We implement our analysis result as a technique entitled LOFT. We evaluate LOFT on the well-studied PARSEC benchmarking suite and five large-scale real-world applications. The main experimental result shows that on average, LOFT identifies 63.9 percent of all synchronization operations incurred by the existing approach as removable and does not compromise the efficiency of the latter.", "paper_title": "Lock Trace Reduction for Multithreaded Programs", "paper_id": "WOS:000326501400010"}