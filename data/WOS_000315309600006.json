{"auto_keywords": [{"score": 0.04685104062438761, "phrase": "hash_function"}, {"score": 0.009517296285655293, "phrase": "expected_number"}, {"score": 0.00842213301583355, "phrase": "table_locations"}, {"score": 0.007257340911902028, "phrase": "probe_sequence"}, {"score": 0.006725259972882887, "phrase": "unique_permutation_hash_function"}, {"score": 0.00481495049065317, "phrase": "new_hash_function"}, {"score": 0.004286931271697226, "phrase": "table_entries"}, {"score": 0.004105850229681625, "phrase": "size_n"}, {"score": 0.004024863549087511, "phrase": "n_table_entries"}, {"score": 0.00397175830521626, "phrase": "previous_insertions"}, {"score": 0.003716520760680603, "phrase": "simple_uniform"}, {"score": 0.0035831752332801674, "phrase": "table_location"}, {"score": 0.0035358770665604657, "phrase": "first_trial"}, {"score": 0.002887083738036996, "phrase": "optimal_cost"}, {"score": 0.0026745503978347143, "phrase": "empty_table_location"}, {"score": 0.002595698433525986, "phrase": "uniformly_chosen_key"}, {"score": 0.002535975801308953, "phrase": "expected_time"}, {"score": 0.0023886223145816376, "phrase": "empty_location"}, {"score": 0.0022799458141165587, "phrase": "constant_load_factors"}, {"score": 0.0022274718912558343, "phrase": "load_factor_alpha"}, {"score": 0.002168975681697056, "phrase": "inserted_items"}, {"score": 0.0021474369836979048, "phrase": "table_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": [""], "paper_abstract": "We propose a new hash function, the unique permutation hash function, and a performance analysis of its hash computation. We denote the cost of a hash function h by C-h(k, N), which stands for the expected number of table entries that are checked when inserting the (k + 1)st key into a hash table of size N, where k out of N table entries are filled by previous insertions. A hash function maps a key to a permutation of the table locations. A hash function, h, is simple uniform if items are equally likely to be hashed to any table location (in the first trial). A hash function, h, is random or strong uniform if the probability of any permutation to be a probe sequence, when using h, is 1/N!, where N is the size of the table. We show that the unique permutation hash function is not only a simple uniform hash function but also a random hash function, i.e., strong uniform, and therefore has the optimal cost. Namely, each probe sequence is equally likely to be chosen when the keys are uniformly chosen. Our hash function ensures that each empty table location has the same probability to be assigned by a uniformly chosen key. We also show that the expected time for computing the unique permutation hash function is O(1) and the expected number of table locations that are checked before an empty location is found during insertion (or search) is also O(1) for constant load factors alpha < 1, where the load factor alpha is the ratio between the number of inserted items and the table size. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Unique permutation hashing", "paper_id": "WOS:000315309600006"}