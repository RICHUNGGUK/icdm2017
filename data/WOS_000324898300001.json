{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "communication_protocol"}, {"score": 0.004299910946753963, "phrase": "standardization_organizations"}, {"score": 0.003993958025223994, "phrase": "technical_english"}, {"score": 0.003896871009090446, "phrase": "manual_translation"}, {"score": 0.0037834649508375544, "phrase": "protocol_implementation"}, {"score": 0.003728000957725218, "phrase": "human_translation"}, {"score": 0.0035141291835319682, "phrase": "natural_language"}, {"score": 0.0031377955308198634, "phrase": "protocol_specification"}, {"score": 0.0030017207229983385, "phrase": "xml-based_protocol_specification_language"}, {"score": 0.0028857130140890787, "phrase": "high-level_specification"}, {"score": 0.0027878797103973313, "phrase": "finite_state_machine"}, {"score": 0.002538687900036229, "phrase": "suitable_technical_language"}, {"score": 0.0023811153883132536, "phrase": "multi-layer_meta-protocol_framework"}, {"score": 0.002323142666222693, "phrase": "on-the-fly_protocol_discovery"}, {"score": 0.002255431275670053, "phrase": "protocol_specifications"}, {"score": 0.0022005118194652704, "phrase": "automatic_protocol_implementation"}, {"score": 0.0021682027434117095, "phrase": "programming_language"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Protocol", " Security", " XML"], "paper_abstract": "A communication protocol is a set of rules shared by two or more communicating parties on the sequence of operations and the format of messages to be exchanged. Standardization organizations define protocols in the form of recommendations (e.g., RFC) written in technical English, which requires a manual translation of the specification into the protocol implementation. This human translation is error-prone due in part to the ambiguities of natural language and in part due to the complexity of some protocols. To mitigate these problems, we divided the expression of a protocol specification into two parts. First, we designed an XML-based protocol specification language (XPSL) that allows for the high-level specification of a protocol expressed as a Finite State Machine (FSM) using Component-Based Software Engineering (CBSE) principles. Then, the components required by the protocol are specified in any suitable technical language (formal or informal). In addition, we developed the multi-layer Meta-Protocol framework, which allows for on-the-fly protocol discovery and negotiation, distribution of protocol specifications and components, and automatic protocol implementation in any programming language. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "The Meta-Protocol framework", "paper_id": "WOS:000324898300001"}