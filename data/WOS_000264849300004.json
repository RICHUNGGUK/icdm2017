{"auto_keywords": [{"score": 0.04696676146561401, "phrase": "model_checking_tools"}, {"score": 0.02562883796208543, "phrase": "tctl"}, {"score": 0.00481495049065317, "phrase": "case_maps"}, {"score": 0.0047547526023100665, "phrase": "property_specification_language"}, {"score": 0.004675652357253327, "phrase": "significant_body"}, {"score": 0.004540365779658683, "phrase": "formal_verification"}, {"score": 0.0044275118637330975, "phrase": "hardware_systems"}, {"score": 0.004105435059094976, "phrase": "technical_problem"}, {"score": 0.004071121244999291, "phrase": "state_space_explosion"}, {"score": 0.003986581218661184, "phrase": "main_reasons"}, {"score": 0.003936698872193083, "phrase": "limited_acceptance"}, {"score": 0.0038066979615349822, "phrase": "required_specification_notation"}, {"score": 0.003665552439863732, "phrase": "temporal_logic_formalisms"}, {"score": 0.003604506544515223, "phrase": "property_specification_patterns"}, {"score": 0.0033280910751441522, "phrase": "formal_specifications"}, {"score": 0.003245270848972794, "phrase": "automatic_model_checking"}, {"score": 0.0031248767378106663, "phrase": "abstract_high_level_pattern-based_approach"}, {"score": 0.0030089355635315005, "phrase": "use_case_maps"}, {"score": 0.002885135695263876, "phrase": "commonly_used_properties"}, {"score": 0.0024284936573317505, "phrase": "ctl"}, {"score": 0.0023879771786116228, "phrase": "architectural_tctl"}, {"score": 0.0022326306658609365, "phrase": "temporal_logics"}, {"score": 0.0022139352210982398, "phrase": "architectural_scopes"}, {"score": 0.002131720106846481, "phrase": "requirement_specifications"}, {"score": 0.0021049977753042253, "phrase": "ip_header_compression_feature"}], "paper_keywords": ["Formal verification", " Temporal logic", " Property specification", " Use Case Maps", " Temporal and architectural scope"], "paper_abstract": "Although a significant body of research in the area of formal verification and model checking tools of software and hardware systems exists, the acceptance of these tools by industry and end-users is rather limited. Beside the technical problem of state space explosion, one of the main reasons for this limited acceptance is the unfamiliarity of users with the required specification notation. Requirements have to be typically expressed as temporal logic formalisms and notations. Property specification patterns were successfully introduced to bridge this gap between users and model checking tools. They also enable non-experts to write formal specifications that can be used for automatic model checking. In this paper, we propose an abstract high level pattern-based approach to the description of property specifications based on Use Case Maps (UCM). We present a set of commonly used properties with their specifications that are described in terms of occurrence, ordering and temporal scopes of actions. Furthermore, our approach also supports the description of properties with respect to their architectural scope. We provide a mapping of our UCM property specification patterns in terms of CTL, TCTL and Architectural TCTL (ArTCTL), an extension to TCTL, introduced in this research that provides temporal logics with architectural scopes. We illustrate the use of our pattern system for requirement specifications of an IP Header compression feature.", "paper_title": "Use Case Maps as a property specification language", "paper_id": "WOS:000264849300004"}