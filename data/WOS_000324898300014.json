{"auto_keywords": [{"score": 0.04163970350821716, "phrase": "mlcontext"}, {"score": 0.03601630827276134, "phrase": "context_models"}, {"score": 0.00481495049065317, "phrase": "context_modeling"}, {"score": 0.004769958800452922, "phrase": "context-aware_systems"}, {"score": 0.004362870617347183, "phrase": "main_difficulties"}, {"score": 0.004261617028111862, "phrase": "-aware_systems"}, {"score": 0.004104456271230213, "phrase": "needed_context_information"}, {"score": 0.003897742942358768, "phrase": "domain-specific_language"}, {"score": 0.0037188360359702182, "phrase": "context_information"}, {"score": 0.003581620064675766, "phrase": "model-driven_development"}, {"score": 0.0034494494982242187, "phrase": "software_artifacts"}, {"score": 0.003369322866499541, "phrase": "mlcontext_abstract_syntax"}, {"score": 0.003229741076887148, "phrase": "model-to_text_transformations"}, {"score": 0.003125175084962886, "phrase": "desired_software_artifacts"}, {"score": 0.003081400693055518, "phrase": "concrete_syntax"}, {"score": 0.002995677265350124, "phrase": "emftext_tool"}, {"score": 0.0028986672783671147, "phrase": "model_injector"}, {"score": 0.002778529097886437, "phrase": "high-level_abstraction"}, {"score": 0.0025770807002632877, "phrase": "domain_analysis"}, {"score": 0.002470237978694949, "phrase": "design_choices"}, {"score": 0.002248366278757655, "phrase": "generative_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Model Driven Development", " Context modeling", " Context aware"], "paper_abstract": "Context-awareness refers to systems that can both sense and react based on their environment. One of the main difficulties that developers of context-aware systems must tackle is how to manage the needed context information. In this paper we present MLContext, a textual Domain-Specific Language (DSL) which is specially tailored for modeling context information. It has been implemented by applying Model-Driven Development (MDD) techniques to automatically generate software artifacts from context models. The MLContext abstract syntax has been defined as a metamodel, and model-to text transformations have been written to generate the desired software artifacts. The concrete syntax has been defined with the EMFText tool, which generates an editor and model injector. MLContext has been designed to provide a high-level abstraction, to be easy to learn, and to promote reuse of context models. A domain analysis has been applied to elicit the requirements and design choices to be taken into account in creating the DSL As a proof of concept of the proposal, the generative approach has been applied to two different middleware platforms for context management. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "A domain-specific language for context modeling in context-aware systems", "paper_id": "WOS:000324898300014"}