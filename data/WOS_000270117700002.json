{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "code_optimization_techniques"}, {"score": 0.004749106104067268, "phrase": "program_synthesis"}, {"score": 0.004684157900507474, "phrase": "wireless_sensor_network_applications"}, {"score": 0.0039431758381711125, "phrase": "stringent_constraints"}, {"score": 0.003889206369317587, "phrase": "node_resources"}, {"score": 0.0031626225189867354, "phrase": "existing_task_view"}, {"score": 0.00307657476125683, "phrase": "wsn_application"}, {"score": 0.0028321862184182913, "phrase": "new_component_view"}, {"score": 0.0026071599759743833, "phrase": "visualization_mechanism"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Wireless sensor network", " Adaptive software design", " Resource constraint", " Code optimization technique"], "paper_abstract": "Wireless sensor network (WSN) applications sense events in situ and compute results in-network. Their software components should run on platforms with stringent constraints on node resources. To meet these constraints, developers often design their programs by trial-and-error. Such manual process is time-consuming and error-prone. Based on an existing task view that treats a WSN application as tasks and models resources as constraints, we propose a new component view that associates components with code optimization techniques and constraints. We provide a visualization mechanism to help developers select code optimization techniques. We also develop algorithms to synthesize components running on nodes, fulfilling the constraints, and thus optimizing their quality. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Resource prioritization of code optimization techniques for program synthesis of wireless sensor network applications", "paper_id": "WOS:000270117700002"}