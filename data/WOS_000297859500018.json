{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "automotive_cyber-physical_systems"}, {"score": 0.04315568411098275, "phrase": "physical_environment"}, {"score": 0.03715242155599719, "phrase": "mobdac"}, {"score": 0.004610155003342534, "phrase": "cps"}, {"score": 0.0037318666008429014, "phrase": "main_contributions"}, {"score": 0.0034634973175137486, "phrase": "whole_development_workflow"}, {"score": 0.0034206776096452015, "phrase": "automotive_cps_software"}, {"score": 0.0032953582866530966, "phrase": "code_generation"}, {"score": 0.003254610516477302, "phrase": "automatic_tools"}, {"score": 0.003135356056324338, "phrase": "development_efficiency"}, {"score": 0.0030204580407008214, "phrase": "nonfunctional_requirements"}, {"score": 0.0028917056916949744, "phrase": "implementation_model_level"}, {"score": 0.002855934865505357, "phrase": "source_code_level"}, {"score": 0.002700348931172875, "phrase": "non-functional_requirements"}, {"score": 0.0025373711401047772, "phrase": "uncertain_physical_environment_events"}, {"score": 0.0024904187737391807, "phrase": "internal_actions"}, {"score": 0.0024595996811420566, "phrase": "automotive_cps"}, {"score": 0.0023990982005125763, "phrase": "model_modifier"}, {"score": 0.002212535878761148, "phrase": "development_workflow"}, {"score": 0.0021049977753042253, "phrase": "power_window_development"}], "paper_keywords": ["Automotive cyber-physical systems", " non-functional requirements", " physical environment", " model-based methods", " model transformation", " code generation"], "paper_abstract": "The development of automotive cyber-physical systems (CPS) software needs to consider not only functional requirements, but also non-functional requirements and the interaction with physical environment. In this paper, a model-based software development method for automotive CPS (MoBDAC) is presented. The main contributions of this paper are threefold. First, MoBDAC covers the whole development workflow of automotive CPS software from modeling and simulation to code generation. Automatic tools are used to improve the development efficiency. Second, MoBDAC extracts nonfunctional requirements and deals with them in the implementation model level and source code level, which helps to correctly manage and meet non-functional requirements. Third, MoBDAC defines three kinds of relations between uncertain physical environment events and software internal actions in automotive CPS, and uses Model Modifier to integrate the interaction with physical environment. Moreover, we illustrate the development workflow of MoBDAC by an example of a power window development.", "paper_title": "A Model-Based Software Development Method for Automotive Cyber-Physical Systems", "paper_id": "WOS:000297859500018"}