{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data_visualization"}, {"score": 0.004716520738331953, "phrase": "information_visualization_construction_tools"}, {"score": 0.004123781267600542, "phrase": "simple_but_inflexible_visualization_templates"}, {"score": 0.0038758293658651237, "phrase": "low-level_graphical_primitives"}, {"score": 0.002670884656785558, "phrase": "haskell-embedded_dsl"}, {"score": 0.00226322835801988, "phrase": "additional_expressiveness"}, {"score": 0.0021714122348552747, "phrase": "common_functional_programming_idioms"}, {"score": 0.0021049977753042253, "phrase": "haskell_type_class_hierarchy"}], "paper_keywords": ["Embedded DSL", " Information Visualization", " Visualization Transformations"], "paper_abstract": "Information visualization construction tools generally tend to fall in one of two disparate categories. Either they offer simple but inflexible visualization templates, or else they offer low-level graphical primitives which need to be assembled manually. Those that do offer flexible, domain-specific abstractions rarely focus on incrementally building and transforming visualizations, which could reduce limitations on the style of workflows supported. We present a Haskell-embedded DSL for data visualization that is designed to provide such abstractions and transformations. This DSL achieves additional expressiveness and flexibility through common functional programming idioms and the Haskell type class hierarchy.", "paper_title": "A Transformational Approach to Data Visualization", "paper_id": "WOS:000357124200008"}