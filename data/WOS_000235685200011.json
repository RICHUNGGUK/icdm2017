{"auto_keywords": [{"score": 0.05007833083353502, "phrase": "gridsolve"}, {"score": 0.03246000945515046, "phrase": "condor"}, {"score": 0.03160214435857137, "phrase": "lfc"}, {"score": 0.004598933498016774, "phrase": "seamless_bridge"}, {"score": 0.004352411290383643, "phrase": "computational_scientists"}, {"score": 0.0042928648367867835, "phrase": "rich_supply"}, {"score": 0.004176194589991187, "phrase": "emerging_grid_architecture"}, {"score": 0.0034751259234824913, "phrase": "diverse_set"}, {"score": 0.00338060449446278, "phrase": "desktop_computers"}, {"score": 0.0033037970113095577, "phrase": "massively_parallel_computers"}, {"score": 0.00327356326590461, "phrase": "grid_middleware"}, {"score": 0.003041420861174518, "phrase": "lapack"}, {"score": 0.002931569771634119, "phrase": "batch_queues"}, {"score": 0.002878140062594849, "phrase": "user_requests"}, {"score": 0.0028127163745564777, "phrase": "different_ways"}, {"score": 0.0026373136897864763, "phrase": "different_requirements"}, {"score": 0.0025071862539276283, "phrase": "different_layers"}, {"score": 0.0023725232579531273, "phrase": "resource_allocation"}, {"score": 0.0023400004981080818, "phrase": "essential_part"}, {"score": 0.002276283303864666, "phrase": "transparent_grid_computing"}, {"score": 0.0021739117830106365, "phrase": "scheduling_mechanisms"}, {"score": 0.002124461969404541, "phrase": "possible_interactions"}, {"score": 0.0021049977753042253, "phrase": "external_systems"}], "paper_keywords": ["grid computing", " scheduling", " remote procedure call"], "paper_abstract": "The purpose of GridSolve is to create the middleware necessary to provide a seamless bridge between the simple, standard programming interfaces and desktop systems that dominate the work of computational scientists and the rich supply of services supported by the emerging Grid architecture, so that the users of the former can easily access and reap the benefits (shared processing, storage, software, data resources, etc.) of using the latter. In addition to supporting a diverse set of hardware, such as desktop computers, clusters, and massively parallel computers, Grid middleware may need to interact with the software managing those systems, such as Condor, LAPACK for Clusters (LFC), and batch queues. Furthermore, user requests may be characterized in different ways (parameter sweep, task graph, etc.), each with different requirements. This diversity has led us to implement scheduling in different layers of GridSolve with the understanding that a strategy for scheduling and resource allocation is an essential part of realizing the vision of transparent Grid computing. In this paper we discuss some of these scheduling mechanisms and some of the possible interactions with external systems such as LFC and Condor.", "paper_title": "Recent developments in gridsolve", "paper_id": "WOS:000235685200011"}