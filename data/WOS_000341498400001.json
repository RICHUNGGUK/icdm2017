{"auto_keywords": [{"score": 0.050077890676404925, "phrase": "distributed_scratchpad_memory_multicore_architecture"}, {"score": 0.0496744192343505, "phrase": "multicore_processors"}, {"score": 0.03221539545857422, "phrase": "proposed_design_flow"}, {"score": 0.030787368085973914, "phrase": "jpeg"}, {"score": 0.004714023408114857, "phrase": "sufficient_computing_power"}, {"score": 0.004634799977448855, "phrase": "complex_streaming_applications"}, {"score": 0.004556901872357751, "phrase": "high-definition_video_processing"}, {"score": 0.004461359547152617, "phrase": "power_consumption"}, {"score": 0.004404994123834589, "phrase": "distributed_scratchpad_memory_architecture"}, {"score": 0.004276216827737399, "phrase": "cache_memory_architecture"}, {"score": 0.004186534737631288, "phrase": "distributed_design"}, {"score": 0.004151188559520802, "phrase": "new_challenges"}, {"score": 0.003978866233891427, "phrase": "available_capabilities"}, {"score": 0.003928572641266562, "phrase": "maximal_throughput"}, {"score": 0.0038461532860146535, "phrase": "combined_complexity"}, {"score": 0.003813669883040509, "phrase": "inter-processor_communication"}, {"score": 0.0037336520904376687, "phrase": "workload_balancing"}, {"score": 0.003593812067062062, "phrase": "efficient_design_flow"}, {"score": 0.003548368289666935, "phrase": "multimedia_applications"}, {"score": 0.0033865859510157238, "phrase": "streaming_components"}, {"score": 0.003259702394241964, "phrase": "application-specific_characteristics"}, {"score": 0.0031912706211861324, "phrase": "efficient_task_partitions"}, {"score": 0.0027159094186967247, "phrase": "demonstration_purposes"}, {"score": 0.0026363807171515255, "phrase": "target_platform"}, {"score": 0.0026140878612307536, "phrase": "simulation_results"}, {"score": 0.0023111922860677672, "phrase": "object_detection_application"}, {"score": 0.002281930100792185, "phrase": "real-time_object_detection"}], "paper_keywords": ["Parallel programming", " Streaming application", " Multicore architecture", " Distributed scratchpad memory architecture"], "paper_abstract": "Multicore processors can provide sufficient computing power and flexibility for complex streaming applications, such as high-definition video processing. For less hardware complexity and power consumption, the distributed scratchpad memory architecture is considered, instead of the cache memory architecture. However, the distributed design poses new challenges to programming. It is difficult to exploit all available capabilities and achieve maximal throughput, due to the combined complexity of inter-processor communication, synchronization, and workload balancing. In this study, we developed an efficient design flow for parallelizing multimedia applications on a distributed scratchpad memory multicore architecture. An application is first partitioned into streaming components and then mapped onto multicore processors. Various hardware-dependent factors and application-specific characteristics are involved in generating efficient task partitions and allocating resources appropriately. To test and verify the proposed design flow, three popular multimedia applications were implemented: a full-HD motion JPEG decoder, an object detector, and a full-HD H.264/AVC decoder. For demonstration purposes, SONY PlayStation3 was selected as the target platform. Simulation results show that, on PS3, the full-HD motion JPEG decoder with the proposed design flow can decode about 108.9 frames per second (fps) in the 1080p format. The object detection application can perform real-time object detection at 2.84 fps at resolution, 11.75 fps at resolution, and 62.52 fps at resolution. The full-HD H.264/AVC decoder applications can achieve nearly 50 fps.", "paper_title": "Parallelizing Complex Streaming Applications on Distributed Scratchpad Memory Multicore Architecture", "paper_id": "WOS:000341498400001"}