{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "concurrent_pointer_programs"}, {"score": 0.004647442352794694, "phrase": "incorrect_use"}, {"score": 0.004178935413340453, "phrase": "software_errors"}, {"score": 0.003939296259436904, "phrase": "similar_characteristic"}, {"score": 0.0036697319652557363, "phrase": "concurrent_pointer"}, {"score": 0.003260690513595527, "phrase": "highly_non-trivial_task"}, {"score": 0.0030374213037172803, "phrase": "automated_verification_technique"}, {"score": 0.002966438503447793, "phrase": "concurrent_programs"}, {"score": 0.0028630535573013686, "phrase": "linked_lists"}, {"score": 0.0027961342030212353, "phrase": "key_issues"}, {"score": 0.0025436978068459565, "phrase": "fairness_constraints"}], "paper_keywords": [""], "paper_abstract": "The incorrect use of pointers is one of the most common source of software errors. Concurrency has a similar characteristic. Proving the correctness of concurrent pointer manipulating programs, let alone algorithmically, is a highly non-trivial task. This paper proposes an automated verification technique for concurrent programs that manipulate linked lists. Key issues of our approach are: automata (with fairness constraints), heap abstractions that are tailored to the program and property to be checked, first-order temporal logic, and a tableau-based model-checking algorithm.", "paper_title": "Safety and liveness in concurrent pointer programs", "paper_id": "WOS:000240360000014"}