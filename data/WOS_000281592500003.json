{"auto_keywords": [{"score": 0.04233118513634553, "phrase": "data_strings"}, {"score": 0.030436745232147993, "phrase": "data_string"}, {"score": 0.028687568333574782, "phrase": "node_splitting"}, {"score": 0.00481495049065317, "phrase": "dynamic_m-way_prefix_tree"}, {"score": 0.004455575231721042, "phrase": "fast_and_efficiently_handling_prefix_matching"}, {"score": 0.004293267161763508, "phrase": "computer_realm"}, {"score": 0.004264395507931215, "phrase": "related_area"}, {"score": 0.004122911675081472, "phrase": "alphabet_e"}, {"score": 0.003999578057088828, "phrase": "different_lengths"}, {"score": 0.0036022217019257598, "phrase": "ip_packet"}, {"score": 0.003518086415996508, "phrase": "longest_matching_prefix"}, {"score": 0.0032772504899699416, "phrase": "differentiated_service"}, {"score": 0.0028246207858247732, "phrase": "higher_level"}, {"score": 0.002721562843196732, "phrase": "special_procedure"}, {"score": 0.0026045914281028473, "phrase": "proposed_data_structure"}, {"score": 0.002442594378453517, "phrase": "memory_usages"}, {"score": 0.0023694065215394593, "phrase": "prefix_matching"}, {"score": 0.002306189434657134, "phrase": "experimental_results"}, {"score": 0.0022906498741695094, "phrase": "simulated_ip_prefixes"}, {"score": 0.0022370795358896784, "phrase": "average_search_time"}, {"score": 0.0021921581733031514, "phrase": "large_number"}, {"score": 0.002148136905808445, "phrase": "data_elements"}, {"score": 0.0021192805640815795, "phrase": "internal_node"}, {"score": 0.0021049977753042253, "phrase": "factor_m"}], "paper_keywords": ["String matching", " Prefix matching", " Multi indexing", " DMP-tree", " IP Lookup"], "paper_abstract": "We propose DMP-tree, a dynamic M-way prefix tree, data structure for the string matching problem in general and prefix matching in particular. DMP-tree has been initially devised for fast and efficiently handling prefix matching which constitutes the building block of some applications in the computer realm and related area. It is assumed there are strings of an alphabet E which are ordered. The data strings can have different lengths and some of them can be prefixes of others. Two well known applications of prefix matching are layers 3 and 4 switching in TCP/IP protocols. In layer 3 switching, routers forward an IP packet by checking its destination address and finding the longest matching prefix from a database. In layer 4 switching, the source and destination addresses are used to classify packets for differentiated service and Quality of Services (QoS). DMP-tree is a superset of B-tree. When none of the data strings are a prefix of each other, DMP-tree is the same as B-tree. In DMP-tree, no data string can be in a higher level than another data string which is its prefix. This requires a special procedure for node splitting. Indeed, node splitting differentiates DMP-tree from B-tree. The proposed data structure is simple, well defined, easy to implement in hardware or software and efficient in terms of memory usages and search time compared to other data structures proposed for prefix matching. We have implemented DMP-tree and the experimental results for simulated IP prefixes from the (0,1) character set show an average search time of Log(M)(N) for a large number of N, number of data elements, when the internal node branching factor M is big enough (>= 5). (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "DMP-tree: A dynamic M-way prefix tree data structure for strings matching", "paper_id": "WOS:000281592500003"}