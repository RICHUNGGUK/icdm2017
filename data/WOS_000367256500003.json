{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "enumerable_sets"}, {"score": 0.0042819270655224916, "phrase": "large_space"}, {"score": 0.004238452771031322, "phrase": "structured_values"}, {"score": 0.0038271712887391015, "phrase": "fine-grained_control"}, {"score": 0.003120099687922751, "phrase": "exhaustive_testing"}, {"score": 0.002964706925144123, "phrase": "efficient_enumeration"}, {"score": 0.00290473242917264, "phrase": "direct_access"}, {"score": 0.002875200380397413, "phrase": "encoded_structures"}, {"score": 0.0028170314398963704, "phrase": "well-known_and_new_pairing_functions"}, {"score": 0.0023079225317714815, "phrase": "domain-specific_language"}, {"score": 0.0022844505652209555, "phrase": "scala"}, {"score": 0.0022382002476510573, "phrase": "better_performance"}, {"score": 0.0022154296909169826, "phrase": "shorter_specifications"}, {"score": 0.0021049977753042253, "phrase": "existing_approaches"}], "paper_keywords": ["Algorithms", " Languages", " Verification", " Dependent enumeration", " data generation", " invariant", " pairing function", " algebra", " exhaustive testing", " random testing", " lazy evaluation", " program inversion", " DSL", " SciFe"], "paper_abstract": "We present an efficient, modular, and feature-rich framework for automated generation and validation of complex structures, suitable for tasks that explore a large space of structured values. Our framework is capable of exhaustive, incremental, parallel, and memoized enumeration from not only finite but also infinite domains, while providing fine-grained control over the process. Furthermore, the framework efficiently supports the inverse of enumeration (checking whether a structure can be generated and fast-forwarding to this structure to continue the enumeration) and lazy enumeration (achieving exhaustive testing without generating all structures). The foundation of efficient enumeration lies in both direct access to encoded structures, achieved with well-known and new pairing functions, and dependent enumeration, which embeds constraints into the enumeration to avoid backtracking. Our framework defines an algebra of enumerators, with combinators for their composition that preserve exhaustiveness and efficiency. We have implemented our framework as a domain-specific language in Scala. Our experiments demonstrate better performance and shorter specifications by up to a few orders of magnitude compared to existing approaches.", "paper_title": "Programming with Enumerable Sets of Structures", "paper_id": "WOS:000367256500003"}