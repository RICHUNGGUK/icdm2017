{"auto_keywords": [{"score": 0.033532889287775446, "phrase": "adjoint_code"}, {"score": 0.00481495049065317, "phrase": "intraprocedural_flow"}, {"score": 0.0047527118741586055, "phrase": "adjoint_computations"}, {"score": 0.004721893473387288, "phrase": "numerical_simulations"}, {"score": 0.004585653726916024, "phrase": "modern_science"}, {"score": 0.004482400730101345, "phrase": "mathematical_models"}, {"score": 0.00445332728705756, "phrase": "real-world_applications"}, {"score": 0.004227398267369744, "phrase": "respective_systems"}, {"score": 0.00419997182602686, "phrase": "derivative_models"}, {"score": 0.004159164042431584, "phrase": "computer_programs"}, {"score": 0.004052263422466088, "phrase": "pure_simulation"}, {"score": 0.004012885020428863, "phrase": "highly_desirable_optimization"}, {"score": 0.003973887756331297, "phrase": "numerical_models"}, {"score": 0.0039097293657870584, "phrase": "potentially_very_large_number"}, {"score": 0.0037233796053514918, "phrase": "source_transformation_technique"}, {"score": 0.0036871853429163953, "phrase": "automatic_differentiation"}, {"score": 0.0036276389022283427, "phrase": "control_flow"}, {"score": 0.0035343512834706417, "phrase": "adjoint_derivative_models"}, {"score": 0.003443454339200118, "phrase": "control_flow_reversal"}, {"score": 0.0034210964819485893, "phrase": "structured_programs"}, {"score": 0.003376813851525222, "phrase": "significant_weakness"}, {"score": 0.0032685906228558706, "phrase": "control-flow_analysis"}, {"score": 0.0031535341431377837, "phrase": "numerical_programs"}, {"score": 0.003133052778244851, "phrase": "semantic_source_transformation"}, {"score": 0.0030924870122337905, "phrase": "short_introduction"}, {"score": 0.002973904674745238, "phrase": "proposed_approach"}, {"score": 0.0029449743792479433, "phrase": "simple_example"}, {"score": 0.0028973794653974327, "phrase": "novel_preaccumulation_algorithm"}, {"score": 0.002878556952876824, "phrase": "local_jacobian_matrices"}, {"score": 0.002832032388853002, "phrase": "basic_blocks"}, {"score": 0.002804478352027886, "phrase": "main_part"}, {"score": 0.0027323009127771525, "phrase": "structured_control_flow_graphs"}, {"score": 0.002679386232765167, "phrase": "algorithmic_steps"}, {"score": 0.0026619761089539595, "phrase": "simple_branches"}, {"score": 0.0026019244311765964, "phrase": "detailed_algorithm"}, {"score": 0.002559859451119449, "phrase": "arbitrary_combinations"}, {"score": 0.0024858445890050614, "phrase": "structural_information"}, {"score": 0.0024616504443079512, "phrase": "general_control_flow_graph"}, {"score": 0.0023826870912207303, "phrase": "inefficient_adjoint_code"}, {"score": 0.002298743062291417, "phrase": "considerable_efficiency_gains"}, {"score": 0.0022468671200629024, "phrase": "reasonably_simple_modification"}, {"score": 0.0022249936992104822, "phrase": "reversal_algorithms"}, {"score": 0.002210529584311044, "phrase": "specially_designated_control_flow_subgraphs"}, {"score": 0.0021747784376752776, "phrase": "sensitivity_computation"}, {"score": 0.002153605290802688, "phrase": "oceanographic_application"}, {"score": 0.0021049977753042253, "phrase": "modified_approach"}], "paper_keywords": ["control flow reversal", " adjoint computation", " efficient loop reversal"], "paper_abstract": "Numerical simulations of physical, chemical, and economical processes play an increasingly important role in modern science and engineering. The implementation of mathematical models of real-world applications on a computer facilitates both the speed and the depth of our understanding of the behavior of the respective systems. Derivative models of the computer programs are required to make the transition from pure simulation to the highly desirable optimization of the numerical models with respect to a potentially very large number of input parameters. Such models can be generated automatically from the given numerical program by a source transformation technique known as automatic differentiation. Reversal of the control flow is especially important for the generation of adjoint derivative models. We describe an approach to the control flow reversal of structured programs motivated by the significant weakness of approaches that do not exploit the result of control-flow analysis. Our approach is used to automatically generate adjoint code for numerical programs by semantic source transformation. After a short introduction to applications and the implementation tool set, we motivate the proposed approach with a simple example. We present a novel preaccumulation algorithm for local Jacobian matrices at the level of basic blocks. The main part of the paper covers the reversal of structured control flow graphs. First we show the algorithmic steps for simple branches and loops. We give a detailed algorithm for the reversal of arbitrary combinations of loops and branches based only on the structural information in a general control flow graph. Dependencies between computations and their enclosing control flow constructs can lead to inefficient adjoint code. We formulate a set of conditions that allows for considerable efficiency gains in the adjoint code while permitting a reasonably simple modification of the reversal algorithms for specially designated control flow subgraphs. We present a sensitivity computation of an oceanographic application that illustrates the benefits of this modified approach. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Efficient reversal of the intraprocedural flow of control in adjoint computations", "paper_id": "WOS:000240480700006"}