{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "noc"}, {"score": 0.004793496614501576, "phrase": "based_mpsoc._many_streaming_applications"}, {"score": 0.004750873844061641, "phrase": "coarse_grain_task_farm"}, {"score": 0.004502943680955863, "phrase": "parallel_threads"}, {"score": 0.004462892860919036, "phrase": "performance_requirements"}, {"score": 0.004229927464182562, "phrase": "multi_processor_system"}, {"score": 0.003991196463806465, "phrase": "hierarchical_interconnection_networks"}, {"score": 0.003920476803132283, "phrase": "central_interconnect"}, {"score": 0.0036498637283470386, "phrase": "memory_access_latency"}, {"score": 0.0034437574674180365, "phrase": "principal_cause"}, {"score": 0.00341309513558946, "phrase": "out-of-order_arrival"}, {"score": 0.0031773926428131233, "phrase": "data_items"}, {"score": 0.0031350397225314262, "phrase": "output_side"}, {"score": 0.002741269087816162, "phrase": "random_access"}, {"score": 0.0026806139086152365, "phrase": "fifo_order"}, {"score": 0.0022013916728990564, "phrase": "simulation_platform"}, {"score": 0.002162316557411786, "phrase": "soclib_library"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Kahn process network", " Stream processing", " Hardware/software co-design"], "paper_abstract": "Many streaming applications feature coarse grain task farm or pipeline parallelism and can be modeled as a set of parallel threads. Performance requirements can often only be met by mapping the application onto a Multi Processor System-on-Chip (MPSoC). To avoid contention, hierarchical interconnection networks, where the central interconnect is a network-on-chip, are employed. In such a clustered MPSoC, the memory access latency varies strongly depending on the location of data, and is the principal cause of out-of-order arrival of data items. We present an algorithm which re-establishes the order of data items on the output side. If their earliness or lateness exceeds a limit previously fixed by experimentation, they are dropped, otherwise stored in a buffer. Write operations to this buffer are random access, whereas read operations are in FIFO order. Our algorithm guarantees that no data is removed from the buffer before it has been read, and, for a given throughput, minimum buffer size. The algorithm was implemented within the output co-processors for three application case studies and validated on a simulation platform based on the SoCLib library. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Space optimal solution for data reordering in streaming applications on NoC based MPSoC", "paper_id": "WOS:000323405100010"}