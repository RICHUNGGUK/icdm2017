{"auto_keywords": [{"score": 0.032781082682547945, "phrase": "csr"}, {"score": 0.02965816252175563, "phrase": "hdc"}, {"score": 0.010829588656138292, "phrase": "gpu"}, {"score": 0.01038081124398133, "phrase": "dla"}, {"score": 0.00481495049065317, "phrase": "quasi-diagonal_matrix-vector_multiplication"}, {"score": 0.004780926543714981, "phrase": "gpu._sparse"}, {"score": 0.004614362802631256, "phrase": "singular_importance"}, {"score": 0.0045817497454044565, "phrase": "sparse_linear_algebra"}, {"score": 0.004501217435918426, "phrase": "important_issue"}, {"score": 0.004469400468609653, "phrase": "scientific_computing"}, {"score": 0.004437807397753662, "phrase": "engineering_practice"}, {"score": 0.004104621766670225, "phrase": "special_type"}, {"score": 0.004075599697578255, "phrase": "spmv"}, {"score": 0.0038506359988314787, "phrase": "sparse_quasi-diagonal_matrix"}, {"score": 0.0035867530188337933, "phrase": "data_structures"}, {"score": 0.003536179562674877, "phrase": "sqdmv"}, {"score": 0.003449379912099073, "phrase": "compute_unified_device_architecture"}, {"score": 0.0033647036658823798, "phrase": "fine-grained_parallel_architecture"}, {"score": 0.003329051037399227, "phrase": "graphics_processing_unit"}, {"score": 0.003258871417680268, "phrase": "new_diagonal_storage_format"}, {"score": 0.0031901665168365357, "phrase": "diagonal_format"}, {"score": 0.0031229055434606003, "phrase": "compressed_sparse_row_format"}, {"score": 0.0029190995437264377, "phrase": "irregular_matrices"}, {"score": 0.002837305633114947, "phrase": "non-zero_elements"}, {"score": 0.0027577972695911825, "phrase": "storage_bandwidth"}, {"score": 0.0026900523406547827, "phrase": "different_discrete_degrees"}, {"score": 0.0026710032893246154, "phrase": "sparse_matrix"}, {"score": 0.002605384872894451, "phrase": "higher_compression_ratio"}, {"score": 0.0025233755103976317, "phrase": "computational_complexity"}, {"score": 0.002317055705600351, "phrase": "discrete_points"}, {"score": 0.0022924784914292026, "phrase": "main_diagonal"}, {"score": 0.002228203424338522, "phrase": "different_parts"}, {"score": 0.0021811799507898792, "phrase": "unified_kernel"}, {"score": 0.0021503823972534096, "phrase": "better_compression_ratio"}, {"score": 0.0021275693314553143, "phrase": "higher_speedup_ratio"}, {"score": 0.002105015800300845, "phrase": "gpu."}], "paper_keywords": ["Graphics processing unit (GPU)", " sparse matrix", " sparse matrix-vector multiplication (SpMV)", " compute unified device architecture (CUDA)", " quasi-diagonal matrix"], "paper_abstract": "Sparse matrix-vector multiplication (SpMV) is of singular importance in sparse linear algebra, which is an important issue in scientific computing and engineering practice. Much effort has been put into accelerating SpMV, and a few parallel solutions have been proposed. This paper focuses on a special type of SpMV, namely sparse quasi-diagonal matrix-vector multiplication (SQDMV). The sparse quasi-diagonal matrix is the key to solving many differential equations, and very little research has been done in this field. This paper discusses data structures and algorithms for SQDMV that are efficiently implemented on the compute unified device architecture (CUDA) platform for the fine-grained parallel architecture of the graphics processing unit (GPU). A new diagonal storage format, a hybrid of the diagonal format (DLA) and the compressed sparse row format (CSR) (HDC) will be presented, which overcomes the inefficiency of DLA in storing irregular matrices and the imbalances of CSR in storing non-zero elements. Furthermore, HDC can adjust the storage bandwidth of the diagonal to adapt to different discrete degrees of sparse matrix, so as to get a higher compression ratio than DLA and CSR, and reduce the computational complexity. Our implementation in a GPU shows that the performance of HDC is better than that of other formats, especially for matrices with some discrete points outside the main diagonal. In addition, we combine the different parts of HDC to make a unified kernel to get a better compression ratio and a higher speedup ratio in the GPU.", "paper_title": "Optimization of quasi-diagonal matrix-vector multiplication on GPU", "paper_id": "WOS:000336222700003"}