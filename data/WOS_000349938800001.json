{"auto_keywords": [{"score": 0.02322730111336097, "phrase": "simulation_tool"}, {"score": 0.008343519502587852, "phrase": "solution_space"}, {"score": 0.004761132425263795, "phrase": "application_domain_knowledge"}, {"score": 0.004681525814235883, "phrase": "simulation_model_creation"}, {"score": 0.00462919213721188, "phrase": "model-driven_architecture"}, {"score": 0.004475659507646842, "phrase": "contemporary_strategy"}, {"score": 0.004425616928975799, "phrase": "software_development"}, {"score": 0.0036966717141736355, "phrase": "hardware_and_software_elements"}, {"score": 0.003474799999519295, "phrase": "domain_space"}, {"score": 0.003266201217790818, "phrase": "mda_strategy"}, {"score": 0.00319348234663792, "phrase": "key_application_challenges"}, {"score": 0.003140004304719746, "phrase": "simulation_models"}, {"score": 0.003087419032091453, "phrase": "system_design_and_operating_decisions"}, {"score": 0.00293487292076612, "phrase": "single_transformation_model"}, {"score": 0.002607527117561699, "phrase": "iterative_development"}, {"score": 0.0025638362414466278, "phrase": "domain_semantics"}, {"score": 0.0024926348205500715, "phrase": "domain_stakeholders"}, {"score": 0.002464709648714996, "phrase": "engineering_tools"}, {"score": 0.002264982416465872, "phrase": "simulation_solver"}, {"score": 0.0021049977753042253, "phrase": "problem_domain"}], "paper_keywords": ["model-driven architecture", " discrete-event simulation (arena)", " domain-specific languages", " SysML (profiles and model libraries)", " model transformation"], "paper_abstract": "Model-driven architecture (MDA) is a contemporary strategy for software development using three distinct kinds of models: (1) models expressing the problem to be solved in the semantics of its domain; (2) models of the solution space in terms of hardware and software elements; and (3) models that map from the domain space to the solution space. We explore an adaptation of the MDA strategy to meet some key application challenges in creating simulation models to support system design and operating decisions. For a given simulation tool, our approach requires a single transformation model that is applicable for any domain for which the simulation tool is appropriate. For a given application domain, our approach allows an iterative development of the domain semantics. Our approach empowers the domain stakeholders with engineering tools for defining the problem to be solved and formally integrating that definition with the simulation solver. Finally, our approach captures knowledge about how to translate from the problem domain to the simulation tool so that knowledge can be taught, reused, and refined.", "paper_title": "Capturing simulation tool and application domain knowledge for automating simulation model creation", "paper_id": "WOS:000349938800001"}