{"auto_keywords": [{"score": 0.04682648206734893, "phrase": "defect_predictors"}, {"score": 0.00481495049065317, "phrase": "case_study"}, {"score": 0.004775335634705251, "phrase": "software_defect_prediction"}, {"score": 0.0046970764288494764, "phrase": "software_testing_efforts"}, {"score": 0.0045820747375409435, "phrase": "defect-prone_sections"}, {"score": 0.004081385289516914, "phrase": "manual_code_reviews"}, {"score": 0.0039813976794342, "phrase": "defect_prediction_model"}, {"score": 0.0039323225960857956, "phrase": "real-life_setting"}, {"score": 0.003835972725191194, "phrase": "software_metrics"}, {"score": 0.0036653985479652854, "phrase": "new_projects"}, {"score": 0.0032780806856932423, "phrase": "testing_effort"}, {"score": 0.0031977096047057898, "phrase": "learning-based_defect_prediction_model"}, {"score": 0.002621590601574503, "phrase": "testing_strategy"}, {"score": 0.0025785359740308337, "phrase": "pilot_project"}, {"score": 0.0025361866386341796, "phrase": "new_process"}, {"score": 0.002363806685815014, "phrase": "code_defects"}, {"score": 0.0023346234464901978, "phrase": "inspection_efforts"}, {"score": 0.0022679195103377124, "phrase": "postrelease_defects"}, {"score": 0.0021669202726173928, "phrase": "complementary_tools"}, {"score": 0.0021401625519713577, "phrase": "new_process_implementation"}, {"score": 0.0021049977753042253, "phrase": "testing_activities"}], "paper_keywords": [""], "paper_abstract": "Software defect prediction aims to reduce software testing efforts by guiding testers through the defect-prone sections of software systems. Defect predictors are widely used in organizations to predict defects in order to save time and effort as an alternative to other techniques such as manual code reviews. The usage of a defect prediction model hi a real-life setting is difficult because it requires software metrics and defect data from past projects to predict the defect-proneness of new projects. It is, on the other hand, very practical because it is easy to apply, can detect defects using less time, and reduces the testing effort. We have built a learning-based defect prediction model for a telecommunications company in the space or one year. In this study, we have briefly explained our model, presented its payoff, and described how we have implemented the model in the company. Furthermore, we compared the performance of our model with that of another testing strategy applied in a pilot project that implemented a new process called team software process (TSP). Our results show that defect predictors can predict 87 percent of code defects, decrease inspection efforts by 72 percent, and hence reduce postrelease defects by 44 percent. Furthermore, they can be used as complementary tools for a new process implementation whose effects on testing activities are limited.", "paper_title": "AI-Based Software Defect Predictors: Applications and Benefits in a Case Study", "paper_id": "WOS:000292176400005"}