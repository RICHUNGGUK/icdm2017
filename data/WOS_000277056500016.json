{"auto_keywords": [{"score": 0.04885877600670675, "phrase": "soft_errors"}, {"score": 0.007940289277969154, "phrase": "code_transformations"}, {"score": 0.006630485504210108, "phrase": "soft_error_vulnerability"}, {"score": 0.005218511842733346, "phrase": "program_vulnerability"}, {"score": 0.00481495049065317, "phrase": "cache_vulnerability_equations"}, {"score": 0.004726970265271088, "phrase": "embedded_processor_caches"}, {"score": 0.004657739551687038, "phrase": "continuous_technology_scaling"}, {"score": 0.004406994912939125, "phrase": "cosmic_radiation_strikes"}, {"score": 0.0040783736687590635, "phrase": "design_abstraction"}, {"score": 0.004048378919038729, "phrase": "e._g."}, {"score": 0.003989046949801574, "phrase": "gate_design"}, {"score": 0.003959706549088536, "phrase": "circuit_design"}, {"score": 0.0031032109441552287, "phrase": "read-write_pattern"}, {"score": 0.0029796206196589115, "phrase": "program_variables"}, {"score": 0.0027982016314450717, "phrase": "cache_data"}, {"score": 0.0025324393547676623, "phrase": "efficient_techniques"}, {"score": 0.0023869914500743083, "phrase": "efficient_static_analysis_method"}, {"score": 0.0022665781920241245, "phrase": "performance-vulnerability_trade-offs"}, {"score": 0.002192389791199368, "phrase": "simulation_based_estimation"}, {"score": 0.002176235362654451, "phrase": "static_analysis_techniques"}, {"score": 0.0021363670305843403, "phrase": "vulnerability_calculations"}, {"score": 0.0021049977753042253, "phrase": "simple_schemes"}], "paper_keywords": ["Design", " Measurement", " Reliability", " Theory", " cache vulnerability", " static analysis", " soft errors", " code transformation", " compiler technique", " embedded processors"], "paper_abstract": "Continuous technology scaling has brought us to a point, where transistors have become extremely susceptible to cosmic radiation strikes, or soft errors. Inside the processor, caches are most vulnerable to soft errors, and techniques at various levels of design abstraction, e. g., fabrication, gate design, circuit design, and microarchitecture-level, have been developed to protect data in caches. However, no work has been done to investigate the effect of code transformations on the vulnerability of data in caches. Data is vulnerable to soft errors in the cache only if it will be read by the processor, and not if it will be overwritten. Since code transformations can change the read-write pattern of program variables, they significantly effect the soft error vulnerability of program variables in the cache. We observe that often opportunity exists to significantly reduce the soft error vulnerability of cache data by trading-off a little performance. However, even if one wanted to exploit this trade-off, it is difficult, since there are no efficient techniques to estimate vulnerability of data in caches. To this end, this paper develops efficient static analysis method to estimate program vulnerability in caches, which enables the compiler to exploit the performance-vulnerability trade-offs in applications. Finally, as compared to simulation based estimation, static analysis techniques provide the insights into vulnerability calculations that provide some simple schemes to reduce program vulnerability.", "paper_title": "Cache Vulnerability Equations for Protecting Data in Embedded Processor Caches from Soft Errors", "paper_id": "WOS:000277056500016"}