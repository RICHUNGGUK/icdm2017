{"auto_keywords": [{"score": 0.029085960559848103, "phrase": "scala"}, {"score": 0.00481495049065317, "phrase": "higher_kind"}, {"score": 0.004448705308279165, "phrase": "first-order_parametric_polymorphism"}, {"score": 0.004294962474996283, "phrase": "mainstream_object-oriented_programming_languages"}, {"score": 0.003968112038249246, "phrase": "first-_order_variant"}, {"score": 0.003212663446866794, "phrase": "resulting_type_constructor"}, {"score": 0.0029161225023394363, "phrase": "code_duplication"}, {"score": 0.002646880721119838, "phrase": "type_constructors"}, {"score": 0.002600661525224505, "phrase": "type_parameters"}, {"score": 0.002555247330102505, "phrase": "abstract_type_members"}, {"score": 0.0023192471808039746, "phrase": "resulting_type_constructor_polymorphism"}, {"score": 0.0021049977753042253, "phrase": "existing_object-oriented_constructs"}], "paper_keywords": ["Design", " Experimentation", " Languages", " type constructor polymorphism", " higher-kinded types", " higher-order genericity", " Scala"], "paper_abstract": "With Java 5 and C(#) 2.0, first-order parametric polymorphism was introduced in mainstream object-oriented programming languages under the name of generics. Although the first- order variant of generics is very useful, it also imposes some restrictions: it is possible to abstract over a type, but the resulting type constructor cannot be abstracted over. This can lead to code duplication. We removed this restriction in Scala, by allowing type constructors as type parameters and abstract type members. This paper presents the design and implementation of the resulting type constructor polymorphism. Furthermore, we study how this feature interacts with existing object-oriented constructs, and show how it makes the language more expressive.", "paper_title": "Generics of a Higher Kind", "paper_id": "WOS:000262035900025"}