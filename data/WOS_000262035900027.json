{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object-oriented_languages"}, {"score": 0.004672953146379813, "phrase": "modern_object-oriented_language"}, {"score": 0.004481132747216135, "phrase": "concurrent_and_distributed_systems"}, {"score": 0.004322967486451877, "phrase": "dependent_types"}, {"score": 0.004271490815763164, "phrase": "significant_opportunities"}, {"score": 0.004195418010131832, "phrase": "design_errors"}, {"score": 0.004096082254543022, "phrase": "design_decisions"}, {"score": 0.004023120753104693, "phrase": "costly_run-time_checks"}, {"score": 0.0038810583785936505, "phrase": "array_bounds"}, {"score": 0.003633464433320317, "phrase": "generated_code"}, {"score": 0.0034426417353349567, "phrase": "constrained_types"}, {"score": 0.003109031770476385, "phrase": "interface_c"}, {"score": 0.003053598205821532, "phrase": "constraint_c"}, {"score": 0.0029991500396912923, "phrase": "immutable_state"}, {"score": 0.0027246967293115343, "phrase": "class_definitions"}, {"score": 0.0026760974046034854, "phrase": "class_invariants"}, {"score": 0.00247529638625566, "phrase": "dynamic_casting"}, {"score": 0.0023311233166534214, "phrase": "underlying_constraint_system"}, {"score": 0.0022486729928886885, "phrase": "simple_equality-based_constraint_system"}, {"score": 0.0021304214257321, "phrase": "new_constraint_systems"}, {"score": 0.0021049977753042253, "phrase": "compiler_plugins"}], "paper_keywords": ["Languages"], "paper_abstract": "X10 is a modern object-oriented language designed for productivity and performance in concurrent and distributed systems. In this setting, dependent types offer significant opportunities for detecting design errors statically, documenting design decisions, eliminating costly run-time checks (e. g., for array bounds, null values), and improving the quality of generated code. We present the design and implementation of constrained types, a natural, simple, clean, and expressive extension to object-oriented programming: A type C{c} names a class or interface C and a constraint c on the immutable state of C and in-scope final variables. Constraints may also be associated with class definitions (representing class invariants) and with method and constructor definitions (representing preconditions). Dynamic casting is permitted. The system is parametric on the underlying constraint system: the compiler supports a simple equality-based constraint system but, in addition, supports extension with new constraint systems using compiler plugins.", "paper_title": "Constrained Types for Object-Oriented Languages", "paper_id": "WOS:000262035900027"}