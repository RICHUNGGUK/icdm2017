{"auto_keywords": [{"score": 0.04508451323215887, "phrase": "interconnected_objects"}, {"score": 0.00481495049065317, "phrase": "model_typing"}, {"score": 0.004732215871738028, "phrase": "object-oriented_languages"}, {"score": 0.004492406361795448, "phrase": "model-driven_development"}, {"score": 0.004095567486538121, "phrase": "new_languages"}, {"score": 0.0038654774211631564, "phrase": "model-based_paradigm"}, {"score": 0.003777088546146369, "phrase": "model_transformation"}, {"score": 0.0037121208432871118, "phrase": "general_programming"}, {"score": 0.003306559295382181, "phrase": "object-oriented_systems"}, {"score": 0.0031753062090452864, "phrase": "model_types"}, {"score": 0.0030847461428168614, "phrase": "clear_notion"}, {"score": 0.002911278281894321, "phrase": "brittle_and_overly_restrictive_reuse_characteristics"}, {"score": 0.0027795345823932406, "phrase": "simple_extension"}, {"score": 0.0027475383418803724, "phrase": "object-oriented_typing"}, {"score": 0.00265373679629359, "phrase": "model-oriented_context"}, {"score": 0.0025929837295811673, "phrase": "simple_strategy"}, {"score": 0.002391067964886602, "phrase": "existing_type_system"}, {"score": 0.0022434880661725493, "phrase": "simple_example"}, {"score": 0.0021794454466797382, "phrase": "extended_approach"}, {"score": 0.0021049977753042253, "phrase": "type_safety"}], "paper_keywords": ["MDA", " MOF", " metamodelling", " type systems", " typing", " model transformation"], "paper_abstract": "Where object-oriented languages deal with objects as described by classes, model-driven development uses models, as graphs of interconnected objects, described by metamodels. A number of new languages have been and continue to be developed for this model-based paradigm, both for model transformation and for general programming using models. Many of these use single-object approaches to typing, derived from solutions found in object-oriented systems, while others use metamodels as model types, but without a clear notion of polymorphism. Both of these approaches lead to brittle and overly restrictive reuse characteristics. In this paper we propose a simple extension to object-oriented typing to better cater for a model-oriented context, including a simple strategy for typing models as a collection of interconnected objects. We suggest extensions to existing type system formalisms to support these concepts and their manipulation. Using a simple example we show how this extended approach permits more flexible reuse, while preserving type safety.", "paper_title": "On model typing", "paper_id": "WOS:000254668000005"}