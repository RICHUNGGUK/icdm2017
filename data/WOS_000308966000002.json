{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "behavior-based_software_birthmark"}, {"score": 0.00399881984083004, "phrase": "software_piracy"}, {"score": 0.003747020072136732, "phrase": "dynamic_system_call_dependence_graphs"}, {"score": 0.0032593915869553714, "phrase": "existing_obfuscation_techniques"}, {"score": 0.003054009753601139, "phrase": "no-ops_system_call_insertion_attack"}, {"score": 0.0027570267191549774, "phrase": "replacement_attacks"}, {"score": 0.002607362103727335, "phrase": "equivalent_system"}, {"score": 0.002488851299416018, "phrase": "high_frequency_dependencies"}, {"score": 0.002331909406363425, "phrase": "victim's_original_system_call_dependence_graph"}, {"score": 0.0021848422732893926, "phrase": "proposed_replacement_attacks"}, {"score": 0.0021049977753042253, "phrase": "original_birthmark"}], "paper_keywords": ["Software birthmark", " Replacement attack", " System call", " Dependency graph"], "paper_abstract": "Software birthmarks utilize certain specific program characteristics to validate the origin of software, so it can be applied to detect software piracy. One state-of-the-art technology on software birthmark adopts dynamic system call dependence graphs as the unique signature of a program, which cannot be cluttered by existing obfuscation techniques and is also immune to the no-ops system call insertion attack. In this paper, we analyze its weaknesses and construct replacement attacks with the help of semantics equivalent system calls to unlock the high frequency dependencies between the system calls in the victim's original system call dependence graph. Our results show that the proposed replacement attacks can destroy the original birthmark successfully.", "paper_title": "Replacement attacks: automatically evading behavior-based software birthmark", "paper_id": "WOS:000308966000002"}