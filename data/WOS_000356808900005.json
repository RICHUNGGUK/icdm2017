{"auto_keywords": [{"score": 0.04524520771446888, "phrase": "input_points"}, {"score": 0.01546173113959967, "phrase": "gpu."}, {"score": 0.0046046429665581555, "phrase": "convex_hulls"}, {"score": 0.004553510708976456, "phrase": "point_sets"}, {"score": 0.004477870190590885, "phrase": "preprocessing_procedure"}, {"score": 0.004258372598568333, "phrase": "non-extreme_points"}, {"score": 0.00409508755819924, "phrase": "computational_efficiency"}, {"score": 0.003960101604693806, "phrase": "quite_straightforward_preprocessing_approach"}, {"score": 0.003501991125315889, "phrase": "basic_ideas"}, {"score": 0.003293142761521425, "phrase": "extreme_points"}, {"score": 0.0031845067058084583, "phrase": "original_set"}, {"score": 0.0029612292670237505, "phrase": "convex_polyhedron"}, {"score": 0.0028795712616923462, "phrase": "found_extreme_points"}, {"score": 0.002831658243608909, "phrase": "finally_those_interior_points"}, {"score": 0.0027690086059100495, "phrase": "formed_convex_polyhedron"}, {"score": 0.002707741309851526, "phrase": "experimental_results"}, {"score": 0.002603758927691463, "phrase": "proposed_preprocessing_algorithm"}, {"score": 0.0023807981747706376, "phrase": "best_cases"}, {"score": 0.0023021895404322767, "phrase": "proposed_approach"}], "paper_keywords": ["computational geometry", " computer aided engineering", " multicore processing", " parallel algorithms", " parallel programming"], "paper_abstract": "In the calculating of convex hulls for point sets, a preprocessing procedure that is to filter the input points by discarding non-extreme points is commonly used to improve the computational efficiency. We previously proposed a quite straightforward preprocessing approach for accelerating 2D convex hull computation on the GPU. In this paper, we extend that algorithm to being used in 3D cases. The basic ideas behind these two preprocessing algorithms are similar: first, several groups of extreme points are found according to the original set of input points and several rotated versions of the input set; then, a convex polyhedron is created using the found extreme points; and finally those interior points locating inside the formed convex polyhedron are discarded. Experimental results show that: when employing the proposed preprocessing algorithm, it achieves the speedups of about 4x on average and 5x to 6x in the best cases over the cases where the proposed approach is not used. In addition, more than 95 percent of the input points can be discarded in most experimental tests.", "paper_title": "CudaPre3D: An Alternative Preprocessing Algorithm for Accelerating 3D Convex Hull Computation on the GPU", "paper_id": "WOS:000356808900005"}