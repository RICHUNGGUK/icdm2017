{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "abstract_syntax_tree_level"}, {"score": 0.04790995341030915, "phrase": "new_approach"}, {"score": 0.004491678520807451, "phrase": "precise_intraprocedural_control-flow"}, {"score": 0.0038189638340666936, "phrase": "circular_attributes"}, {"score": 0.003760385494931853, "phrase": "collection_attributes"}, {"score": 0.0036178264212372497, "phrase": "concise_executable_specifications"}, {"score": 0.002891032998395276, "phrase": "assignment_analyses"}, {"score": 0.0028468044830005142, "phrase": "java"}, {"score": 0.0024574537875026634, "phrase": "java_programs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Declarative", " Dataflow", " Analysis", " Control-flow", " Java", " Compiler", " Attribute grammars"], "paper_abstract": "We have developed a new approach for implementing precise intraprocedural control-flow and dataflow analyses at the abstract syntax tree level. Our approach is declarative, making use of reference attribute grammars augmented with circular attributes and collection attributes. This results in concise executable specifications of the analyses, allowing extensions both to the language and with further source code analyses. To evaluate the new approach, we have implemented control flow, dataflow and dead assignment analyses for Java, by extending the JastAdd Extensible Java Compiler. We have compared our results to several well-known analysis frameworks and tools, using a set of Java programs as benchmarks. These results show that our approach performs well concerning both efficiency and preciseness. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Extensible intraprocedural flow analysis at the abstract syntax tree level", "paper_id": "WOS:000323086300004"}