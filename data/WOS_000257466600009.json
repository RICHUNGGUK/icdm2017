{"auto_keywords": [{"score": 0.043069853910456715, "phrase": "lcs_problem"}, {"score": 0.029798932888724827, "phrase": "original_lcs_problem"}, {"score": 0.00481495049065317, "phrase": "computing_variants"}, {"score": 0.004767826806287385, "phrase": "longest_common_subsequence_problem"}, {"score": 0.004721162131188487, "phrase": "longest_common_subsequence"}, {"score": 0.004553914287137776, "phrase": "well-studied_problems"}, {"score": 0.004421554060664439, "phrase": "lcs"}, {"score": 0.004378182273895574, "phrase": "frequent_task"}, {"score": 0.0043495571869907376, "phrase": "dna_sequence_analysis"}, {"score": 0.004236908273106904, "phrase": "molecular_biology"}, {"score": 0.004140726362519362, "phrase": "new_variants"}, {"score": 0.004086744751579196, "phrase": "present_efficient_algorithms"}, {"score": 0.003928969293303814, "phrase": "gap_constraints"}, {"score": 0.00389048276567065, "phrase": "lcs_problems"}, {"score": 0.003814632693659797, "phrase": "fixed_gap"}, {"score": 0.0037402558657576124, "phrase": "naive_algorithm"}, {"score": 0.0035958088793442817, "phrase": "total_number"}, {"score": 0.0035722806911457545, "phrase": "ordered_pairs"}, {"score": 0.0034342984674830533, "phrase": "fixed_gap_constraint"}, {"score": 0.0033673122420551952, "phrase": "running_time"}, {"score": 0.0032160319265621285, "phrase": "novel_techniques"}, {"score": 0.0027289810731258865, "phrase": "elastic_and_rigid_gaps"}, {"score": 0.0025977542995083624, "phrase": "traditional_dynamic_programming_solution"}, {"score": 0.0024007585788965655, "phrase": "rigid_fixed_gap_lcs"}, {"score": 0.0022406537579986842, "phrase": "equal_length"}, {"score": 0.002146926767291475, "phrase": "different_length"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["algorithm", " longest common subsequence", " strings"], "paper_abstract": "The longest common subsequence (LCS) problem is one of the classical and well-studied problems in computer science. The computation of the LCS is a frequent task in DNA sequence analysis, and has applications to genetics and molecular biology. In this paper we introduce new variants of LCS problem and present efficient algorithms to solve them. In particular we introduce the notion of gap constraints in the LCS problems. For the LCS problem with fixed gap, we first present a naive algorithm runs in O(n(2) + R(K + 1)(2)) time, where R is the total number of ordered pairs of positions at which the two strings match and K is the fixed gap constraint. We then improve the running time to O(n(2) + RK + R log log n) using some novel techniques. Furthermore, we present an algorithm that is independent of K and runs in O(n(2) + R log log n) time. Using these techniques, we also present a new O(n(2)) algorithm to solve the original LCS problem. Additionally, we modify our algorithms to handle elastic and rigid gaps. We also apply the notion of rigidness to the original LCS problem and modify the traditional dynamic programming solution to handle the rigidness presenting a O(n(2)) algorithm to solve the problem. Finally, we also improve the solution to Rigid Fixed Gap LCS to O(n(2)). Notably, in all of the above cases, we assume that the two given strings are of equal length i.e. n. But our results can be easily extended to handle two strings of different length. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Algorithms for computing variants of the longest common subsequence problem", "paper_id": "WOS:000257466600009"}