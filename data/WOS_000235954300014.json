{"auto_keywords": [{"score": 0.03869507098334237, "phrase": "data_warehouse"}, {"score": 0.00481495049065317, "phrase": "data_warehouse_designs"}, {"score": 0.004525629293824217, "phrase": "just-in-time_data"}, {"score": 0.004342430078306461, "phrase": "transactional_and_analytical_databases"}, {"score": 0.004039423410198574, "phrase": "maximum_efficiency"}, {"score": 0.003916098498242888, "phrase": "business_models"}, {"score": 0.0037965243835456214, "phrase": "transactional_data"}, {"score": 0.0036052633308076933, "phrase": "real_time"}, {"score": 0.0034951469511975346, "phrase": "intermittent_periods"}, {"score": 0.0033883824438527316, "phrase": "traditional_static_loadings"}, {"score": 0.0032176163279340206, "phrase": "entire_warehouse"}, {"score": 0.0026161698049580804, "phrase": "data_warehouse_synchronization"}, {"score": 0.00226322835801988, "phrase": "parameter_sets"}, {"score": 0.0021049977753042253, "phrase": "particular_business_model"}], "paper_keywords": [""], "paper_abstract": "With many enterprises now integrating just-in-time data, updating between transactional and analytical databases has become critical. To achieve maximum efficiency, some business models require feeding transactional data to a data warehouse in real time or at intermittent periods shorter than traditional static loadings. Most data warehouse designs treat the entire warehouse as a single, homogeneous entity. However, as a data warehouse evolves, IT administrators must track the environment changes to adjust data warehouse synchronization. To address this problem, the authors present a framework that uses parameter sets to define the most suitable update option for a particular business model.", "paper_title": "Synchronization options for data warehouse designs", "paper_id": "WOS:000235954300014"}