{"auto_keywords": [{"score": 0.03867712206987224, "phrase": "pupil_system"}, {"score": 0.00481495049065317, "phrase": "systematic_approach"}, {"score": 0.004778088905211055, "phrase": "software_integration"}, {"score": 0.0047415081747150065, "phrase": "multi-scale_simulations"}, {"score": 0.004651271219032404, "phrase": "relatively_straightforward_way"}, {"score": 0.004597951649247307, "phrase": "existing_software_packages"}, {"score": 0.004545240514015278, "phrase": "full_multi-scale_simulation_package"}, {"score": 0.004340343873304156, "phrase": "run-time_intervention"}, {"score": 0.003988293689448734, "phrase": "small_wrapper_interfaces"}, {"score": 0.0038973170902076707, "phrase": "application_package"}, {"score": 0.0037792227071149985, "phrase": "calculation_units"}, {"score": 0.0035810720634458933, "phrase": "software_driver"}, {"score": 0.0035263833746562788, "phrase": "well-defined_protocols"}, {"score": 0.0034326732528567826, "phrase": "different_calculation_units"}, {"score": 0.0033543281764294927, "phrase": "corba_communication_protocol"}, {"score": 0.003265175268104804, "phrase": "running_processes"}, {"score": 0.00322769360059123, "phrase": "simulation_directives"}, {"score": 0.0031298260299218684, "phrase": "xml_file"}, {"score": 0.0030583717270715556, "phrase": "pupil_manager"}, {"score": 0.003000070450638434, "phrase": "initial_version"}, {"score": 0.0028647868128903065, "phrase": "java"}, {"score": 0.0028317319086202217, "phrase": "fast_prototyping_language"}, {"score": 0.002788454815865172, "phrase": "implementation_ease"}, {"score": 0.0027564303939865476, "phrase": "operational_correctness"}, {"score": 0.0027247727563746694, "phrase": "toy_physical_systems"}, {"score": 0.002631959004685823, "phrase": "former_category"}, {"score": 0.0025619562094446884, "phrase": "dl-poly"}, {"score": 0.002542307785004178, "phrase": "siesta"}, {"score": 0.002465161736207254, "phrase": "latter_category"}, {"score": 0.0023538120430501392, "phrase": "md_calculation"}, {"score": 0.0023357478549318102, "phrase": "pattern_recognition"}, {"score": 0.00230003335593664, "phrase": "qm-forces_region"}, {"score": 0.002273605493468005, "phrase": "external_qm_force_calculation"}, {"score": 0.002221689979375652, "phrase": "pupil"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["multi-scale simulations", " QM/MM software", " software engineering", " Java"], "paper_abstract": "We present a relatively straightforward way to integrate existing software packages into a full multi-scale simulation package in which each application runs in its own address space and there is no run-time intervention by the researcher. The PUPIL (Program for User Package Interfacing and Linking) architectural concept is to provide a simulation Supervisor, implemented as a Manager and various Workers which involve small wrapper interfaces written and installed within each application package and various communication services. The different, autonomous packages (\"Calculation Units\") are plugged into the PUPIL system which one then operates as a software driver for them. Well-defined protocols are provided for communication between the different Calculation Units and the PUPIL system. The CORBA communication protocol is used to exchange information between running processes. All simulation directives from the user are stored in an XML file that is interpreted by the PUPIL Manager and Workers. An initial version has been designed using the Object Oriented (00) paradigm and implemented in Java as a fast prototyping language. Tests of implementation ease and of operational correctness (on toy physical systems) have been carried out. In the former category, we document how interfaces to both DL-POLY and SIESTA were done relatively straightforwardly. In the latter category, the most demanding test was the joining of three different packages to do a MD calculation with pattern recognition to identify the QM-forces region and an external QM force calculation. The results show that PUPIL provides ease of operation and maintenance with little overhead. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "PUPIL: A systematic approach to software integration in multi-scale simulations", "paper_id": "WOS:000248640100001"}