{"auto_keywords": [{"score": 0.02992570236183039, "phrase": "independently_developed_components"}, {"score": 0.025993233812318824, "phrase": "scl"}, {"score": 0.00481495049065317, "phrase": "simple_and_unified_component-oriented_language"}, {"score": 0.004669903025645609, "phrase": "cop"}, {"score": 0.004568871736067739, "phrase": "key_research_track"}, {"score": 0.004529093447865156, "phrase": "software_engineering"}, {"score": 0.004431149592844886, "phrase": "component-oriented_languages"}, {"score": 0.004278807087784626, "phrase": "new_or_adapted_abstractions"}, {"score": 0.004167982855788402, "phrase": "new_paradigm"}, {"score": 0.00407781620412982, "phrase": "proposed_features"}, {"score": 0.003818807671883534, "phrase": "closer_analysis"}, {"score": 0.0036553070575015344, "phrase": "new_possibilities"}, {"score": 0.0036234547264876586, "phrase": "cop."}, {"score": 0.003453140302583322, "phrase": "simple_language"}, {"score": 0.0032336801561165113, "phrase": "main_features"}, {"score": 0.0031636612155559267, "phrase": "component_class"}, {"score": 0.0028480459059007468, "phrase": "unanticipated_connection"}, {"score": 0.0027620516806198354, "phrase": "key_issues"}, {"score": 0.002737960968372391, "phrase": "cop._most_approaches"}, {"score": 0.0027140798043053986, "phrase": "language_primitives"}, {"score": 0.0025863988422430797, "phrase": "shared_interfaces"}, {"score": 0.0023902621773166963, "phrase": "uniform_component_connection_mechanism"}, {"score": 0.002359046870732839, "phrase": "special_components"}, {"score": 0.002287783663138828, "phrase": "component_properties"}, {"score": 0.002228412982799273, "phrase": "component_state_changes"}, {"score": 0.0021801135036476136, "phrase": "specific_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["component-oriented language", " component connection", " connector", " component property"], "paper_abstract": "Component-oriented programming (COP) is actually a key research track in software engineering. A variety of component-oriented languages (COLs) have been proposed with new or adapted abstractions and mechanisms to support this new paradigm. However, the proposed features vary quite widely from one proposal to another. There is a need for a closer analysis and synthesis of these features to really discover the new possibilities of COP. In this article we present SCL, our proposition of simple language dedicated to COP. Through the presentation Of SCL, we discuss and compare the main features of COLs such as component class, component, interface, port, service or connector. But these features are not enough to build a COL. Indeed, unanticipated connection of independently developed components is one of the key issues of COP. Most approaches use language primitives or connectors and shared interfaces to connect components. But shared interfaces are in contradiction with the philosophy of independently developed components. The approach Of SCL is to provide a uniform component connection mechanism based on special components called connectors. SCL also integrates component properties which enable connections based on component state changes with no requirements of specific code in components. (c) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "Foundations of a simple and unified component-oriented language", "paper_id": "WOS:000253114000006"}