{"auto_keywords": [{"score": 0.04520035896788701, "phrase": "implementation_fsms"}, {"score": 0.030311084376533765, "phrase": "desired_fault_coverage"}, {"score": 0.00481495049065317, "phrase": "classical_problem"}, {"score": 0.004766090327062509, "phrase": "complete_test_generation"}, {"score": 0.004717723626157272, "phrase": "deterministic_finite-state_machines"}, {"score": 0.004506048850130758, "phrase": "first_generalization"}, {"score": 0.00411064950774695, "phrase": "fsm._previous_work"}, {"score": 0.003711724940991015, "phrase": "fsm."}, {"score": 0.003581412258960711, "phrase": "test_designer"}, {"score": 0.0035269696779744266, "phrase": "traditional_methods"}, {"score": 0.0034733518170738517, "phrase": "test_explosion"}, {"score": 0.003438058620195309, "phrase": "large_specification_machines"}, {"score": 0.003250238918180901, "phrase": "fault_coverage"}, {"score": 0.0031360786664165093, "phrase": "second_generalization"}, {"score": 0.0029798924689472014, "phrase": "user-defined_test_suite"}, {"score": 0.0027741761880779535, "phrase": "generalized_test_derivation_problem"}, {"score": 0.002718045523483502, "phrase": "sufficient_conditions"}, {"score": 0.002690406375639144, "phrase": "test_suite_completeness"}, {"score": 0.0026359661683151006, "phrase": "existing_ones"}, {"score": 0.002441422510910065, "phrase": "user-defined_test_suites"}, {"score": 0.00235560370536971, "phrase": "test_generation"}, {"score": 0.0022961534630650347, "phrase": "experimental_results"}, {"score": 0.0022382002476510573, "phrase": "proposed_algorithm"}, {"score": 0.0021049977753042253, "phrase": "test_suites"}], "paper_keywords": ["software testing", " finite-state machines", " test generation"], "paper_abstract": "In this paper, we consider a classical problem of complete test generation for deterministic finite-state machines (FSMs) in a more general setting. The first generalization is that the number of states in implementation FSMs can even be smaller than that of the specification FSM. Previous work deals only with the case when the implementation FSMs are allowed to have the same number of states as the specification FSM. This generalization provides more options to the test designer: when traditional methods trigger a test explosion for large specification machines, tests with a lower, but yet guaranteed, fault coverage can still be generated. The second generalization is that tests can be generated starting with a user-defined test suite, by incrementally extending it until the desired fault coverage is achieved. Solving the generalized test derivation problem, we formulate sufficient conditions for test suite completeness weaker than the existing ones and use them to elaborate an algorithm that can be used both for extending user-defined test suites to achieve the desired fault coverage and for test generation. We present the experimental results that indicate that the proposed algorithm allows obtaining a trade-off between the length and fault coverage of test suites.", "paper_title": "Fault Coverage-Driven Incremental Test Generation", "paper_id": "WOS:000283666800014"}