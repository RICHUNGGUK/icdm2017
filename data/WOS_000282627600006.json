{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "subprogram_contracts"}, {"score": 0.004751216062917875, "phrase": "safety_checking"}, {"score": 0.004595529592539951, "phrase": "logic_formulas"}, {"score": 0.004415395176043526, "phrase": "expected_behavior"}, {"score": 0.004130660282810338, "phrase": "significant_amount"}, {"score": 0.003942299471749811, "phrase": "uninteresting_contracts"}, {"score": 0.00378767277402891, "phrase": "run-time_errors"}, {"score": 0.003543273649210823, "phrase": "large_size"}, {"score": 0.0030799988391729464, "phrase": "boolean_combinations"}, {"score": 0.0030391594477173485, "phrase": "linear_equalities"}, {"score": 0.0029394074636168435, "phrase": "different_kinds"}, {"score": 0.002900426826591769, "phrase": "static_analyses"}, {"score": 0.0026593184154220123, "phrase": "important_originality"}, {"score": 0.002438203996977464, "phrase": "practical_applicability"}, {"score": 0.0021910825909008946, "phrase": "c_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Specification languages", " Functional behavior", " Contracts", " Inference", " Abstract interpretation", " Weakest precondition", " Quantifier elimination"], "paper_abstract": "Contracts expressed by logic formulas allow one to formally specify expected behavior of programs. But writing such specifications manually takes a significant amount of work, in particular for uninteresting contracts which only aim at avoiding run-time errors during the execution. Thus, for programs of large size, it is desirable to at least partially infer such contracts. We propose a method to infer contracts expressed as boolean combinations of linear equalities and inequalities by combining different kinds of static analyses: abstract interpretation, weakest precondition computation and quantifier elimination. An important originality of our approach is to proceed modularly, considering subprograms independently. The practical applicability of our approach is demonstrated on experiments performed on a library and two benchmarks of vulnerabilities of C code. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Modular inference of subprogram contracts for safety checking", "paper_id": "WOS:000282627600006"}