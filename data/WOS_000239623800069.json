{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "program_errors"}, {"score": 0.010460556442829476, "phrase": "light-weighted_specifications"}, {"score": 0.004225950334493496, "phrase": "software_system"}, {"score": 0.004135010810625326, "phrase": "good_example"}, {"score": 0.0037357362372975327, "phrase": "specified_properties"}, {"score": 0.0035507457285983268, "phrase": "detailed_erroneous_run"}, {"score": 0.0030048355421601705, "phrase": "object_store_models"}, {"score": 0.00269475174341129, "phrase": "object_relations"}, {"score": 0.0026366753045215558, "phrase": "program_execution"}, {"score": 0.0025242409510332527, "phrase": "user-provided_properties"}], "paper_keywords": [""], "paper_abstract": "During the last decade many computer-aided debugging tools have been developed to assist users to detect program errors in a software system. A good example are model checking tools that provide counterexamples in case a given program violates the specified properties. However, even with a detailed erroneous run, it remains difficult for users to understand the error well and to isolate its root cause quickly and cheaply. This paper presents object store models for diagnosing program errors with light-weighted specifications. The models we use can keep track on object relations arising during program execution, detect counterexamples that violate user-provided properties, and highlight statements responsible for the violation. We have used the approach to help students to locate and correct the program errors in their course works.", "paper_title": "Diagnosing program errors with light-weighted specifications", "paper_id": "WOS:000239623800069"}