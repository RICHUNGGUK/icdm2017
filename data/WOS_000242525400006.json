{"auto_keywords": [{"score": 0.041612822961875004, "phrase": "specialised_type_systems"}, {"score": 0.004814951920928826, "phrase": "featherweight"}, {"score": 0.004233119608341877, "phrase": "ad_hoc_syntactic_restrictions"}, {"score": 0.0038846843242954935, "phrase": "syntactic_restrictions"}, {"score": 0.003378385493203297, "phrase": "extensive_changes"}, {"score": 0.003306559295382181, "phrase": "programming_languages"}, {"score": 0.002937879003671346, "phrase": "featherweight_generic_java"}, {"score": 0.0028142286985235977, "phrase": "essential_change"}, {"score": 0.002724909017963099, "phrase": "underlying_language"}, {"score": 0.00266693888510356, "phrase": "type_system"}, {"score": 0.0025003054002226965, "phrase": "polymorphic_type_parameters"}, {"score": 0.0023694065215394593, "phrase": "ownership_parameters"}, {"score": 0.0021507795710951384, "phrase": "ownership_type_systems"}, {"score": 0.0021049977753042253, "phrase": "general-purpose_programming_languages"}], "paper_keywords": [""], "paper_abstract": "Existing approaches to object encapsulation either rely on ad hoc syntactic restrictions or require the use of specialised type systems. Syntactic restrictions are difficult to scale and to prove correct, while specialised type systems require extensive changes to programming languages. We demonstrate that confinement can be enforced cheaply in Featherweight Generic Java, with no essential change to the underlying language or type system. This result demonstrates that polymorphic type parameters can simultaneously act as ownership parameters and should facilitate the adoption of confinement and ownership type systems in general-purpose programming languages.", "paper_title": "Featherweight generic confinement", "paper_id": "WOS:000242525400006"}