{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gapped_palindromes."}, {"score": 0.004558977045730675, "phrase": "maximal_approximate_gapped_palindromes"}, {"score": 0.0042579795015449005, "phrase": "string_s"}, {"score": 0.003516417950483685, "phrase": "form_uvw"}, {"score": 0.0028446460307503343, "phrase": "length_q."}, {"score": 0.002805989498127897, "phrase": "best_previous_work"}, {"score": 0.002447101794397243, "phrase": "incremental_string_comparison_technique"}, {"score": 0.002332626862738603, "phrase": "core_technique"}, {"score": 0.0021049977753042253, "phrase": "multiple_symbols"}], "paper_keywords": ["Palindrome", " incremental string comparison", " string matching"], "paper_abstract": "We study the problem of finding all maximal approximate gapped palindromes in a string. More specifically, given a string S of length n, a parameter q >= 0 and a threshold k > 0, the problem is to identify all substrings in S of the form uvw such that (1) the Levenshtein distance between u(r) and w is at most k, where u(r) is the reverse of u and (2) v is a string of length q. The best previous work requires O(k(2)n) time. In this paper, we propose an O(kn)-time algorithm for this problem by utilizing an incremental string comparison technique. It turns out that the core technique actually solves a more general incremental string comparison problem that allows the insertion, deletion, and substitution of multiple symbols.", "paper_title": "FINDING ALL APPROXIMATE GAPPED PALINDROMES", "paper_id": "WOS:000286806000005"}