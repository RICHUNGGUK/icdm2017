{"auto_keywords": [{"score": 0.03820138899487556, "phrase": "mnn_programming"}, {"score": 0.032507228275705485, "phrase": "mnn"}, {"score": 0.012750473497048758, "phrase": "programmed_formulas"}, {"score": 0.00481495049065317, "phrase": "squat_wall_strengths"}, {"score": 0.004723322467153553, "phrase": "associated_codes"}, {"score": 0.0046632033374901715, "phrase": "pruned_modular_neural_network"}, {"score": 0.0044873778175404475, "phrase": "four-layer_modular_neural_network"}, {"score": 0.0037262941538784094, "phrase": "modular_polynomials"}, {"score": 0.0035627492415494216, "phrase": "training_results"}, {"score": 0.003494866798828308, "phrase": "meaningful_way"}, {"score": 0.0034282732966589478, "phrase": "significant_advantages"}, {"score": 0.0033845816848753073, "phrase": "famous_neural_networks"}, {"score": 0.0032777653153451265, "phrase": "particle_swarm_optimization"}, {"score": 0.0032359856233193504, "phrase": "mnn_parameter_learning"}, {"score": 0.002958021635132416, "phrase": "programmed_formula_concision"}, {"score": 0.0026523079380037706, "phrase": "existing_analytical_methods"}, {"score": 0.002585081657512565, "phrase": "case_studies"}, {"score": 0.002535779689260244, "phrase": "squat_wall_strength_analyses"}, {"score": 0.002378114613631841, "phrase": "programmed_formula"}, {"score": 0.0023327506323251074, "phrase": "good_prediction_accuracy"}, {"score": 0.0022302306304023602, "phrase": "studied_methods"}, {"score": 0.0021322065604537617, "phrase": "input_parameter_impacts"}, {"score": 0.0021049977753042253, "phrase": "significant_modular_functions"}], "paper_keywords": ["Squat wall strengths", " Modular neural networks", " Soft-computing programming", " Soft-computing tuning", " Particle swarm optimization", " Pruning techniques"], "paper_abstract": "This study designed a four-layer modular neural network (MNN) to predict and program squat wall strength values. Results generated by the proposed MNN include predictions and programmed formulas that are similar in form to modular polynomials, which permit MNN programming to interpret training results in a meaningful way that offers significant advantages over famous neural networks. This study employed particle swarm optimization for MNN parameter learning and structure learning in order to prune MNN to avoid overfitting and increase programmed formula concision. To extend the uses of MNN programming, this paper further employed MNN tuning to refine existing analytical methods and codes. Case studies focused on squat wall strength analyses. Study results demonstrated that MNN programming uniquely uses a programmed formula to deliver good prediction accuracy. MNN tuning further improved the studied methods. Programmed formulas also provided insights into input parameter impacts and significant modular functions.", "paper_title": "Programming squat wall strengths and tuning associated codes with pruned modular neural network", "paper_id": "WOS:000324794200019"}