{"auto_keywords": [{"score": 0.04616293897139308, "phrase": "remaining_executions"}, {"score": 0.035399176283572455, "phrase": "contention-free_slots"}, {"score": 0.02246846748295755, "phrase": "existing_algorithms"}, {"score": 0.00481495049065317, "phrase": "real-time_multiprocessor_scheduling"}, {"score": 0.004000396172153709, "phrase": "important_property"}, {"score": 0.003901407184706592, "phrase": "contention-free_slot"}, {"score": 0.0031450959266482504, "phrase": "cf"}, {"score": 0.003051601113971322, "phrase": "job_executions"}, {"score": 0.002976019715894587, "phrase": "contention-free_ones"}, {"score": 0.0026120705848349055, "phrase": "original_algorithm"}, {"score": 0.002496722870659199, "phrase": "improved_schedulability_tests"}, {"score": 0.0021476967767071233, "phrase": "cf_policy"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Contention-free slot", " contention-free policy", " multiprocessor scheduling", " schedulability analysis", " real-time embedded systems"], "paper_abstract": "A time slot is defined as contention-free if the number of jobs with remaining executions in the slot is no larger than the number of processors, or contending, otherwise. Then an important property holds that in any contention-free slot, all jobs with remaining executions are guaranteed to be scheduled as long as the scheduler is work-conserving. This article aims at improving schedulability by utilizing the contention-free slots. To achieve this, this article presents a policy (called CF policy) that moves some job executions from contending slots to contention-free ones. This policy can be employed by any work-conserving, preemptive scheduling algorithm, and we show that any algorithm extended with this policy dominates the original algorithm in terms of schedulability. We also present improved schedulability tests for algorithms that employ this policy, based on the observation that interference from jobs is reduced when their executions are postponed to contention-free slots. Simulation results demonstrate that the CF policy, incorporated into existing algorithms, significantly improves schedulability of those existing algorithms.", "paper_title": "Contention-Free Executions for Real-Time Multiprocessor Scheduling", "paper_id": "WOS:000330905800014"}