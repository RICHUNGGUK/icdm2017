{"auto_keywords": [{"score": 0.03251942252482323, "phrase": "romeo"}, {"score": 0.00481495049065317, "phrase": "system_for_more_flexible_binding-safe_programming"}, {"score": 0.0041469500929423595, "phrase": "simple_binding_syntax"}, {"score": 0.0034317185678527672, "phrase": "name_problems"}, {"score": 0.0026217213613095322, "phrase": "rich_specification_language"}, {"score": 0.0024693979425773993, "phrase": "attribute_grammars"}, {"score": 0.002349228457383314, "phrase": "complex-binding_support"}, {"score": 0.0023028105026714533, "phrase": "david_herman's"}, {"score": 0.0021474369836979048, "phrase": "full-fledged_binding-safe_language"}, {"score": 0.0021049977753042253, "phrase": "pure_freshml."}], "paper_keywords": ["languages", " binding", " alpha-equivalence", " macros"], "paper_abstract": "Current languages for safely manipulating values with names only support term languages with simple binding syntax. As a result, no tools exist to safely manipulate code written in those languages for which name problems are the most challenging. We address this problem with Romeo, a language that respects alpha-equivalence on its values, and which has access to a rich specification language for binding, inspired by attribute grammars. Our work has the complex-binding support of David Herman's lambda(m), but is a full-fledged binding-safe language like Pure FreshML.", "paper_title": "Romeo: a System For More Flexible Binding-Safe Programming", "paper_id": "WOS:000349143000006"}