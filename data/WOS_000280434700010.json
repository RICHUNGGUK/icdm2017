{"auto_keywords": [{"score": 0.02606293105417704, "phrase": "delta"}, {"score": 0.00481495049065317, "phrase": "-independent_self-stabilizing_asynchronous_phase_synchronization"}, {"score": 0.004463958296056236, "phrase": "self-stabilizing_phase_synchronizer"}, {"score": 0.004035282762331904, "phrase": "next_one"}, {"score": 0.00355665081072721, "phrase": "system_parameter"}, {"score": 0.003317970131738248, "phrase": "dynamic_systems"}, {"score": 0.0027976491158911514, "phrase": "local_information"}, {"score": 0.0027451110240633144, "phrase": "global_information"}, {"score": 0.0026935568995690947, "phrase": "memory_usage"}, {"score": 0.00264296841319955, "phrase": "proposed_algorithm"}, {"score": 0.0024038923350585962, "phrase": "maximum_degree"}], "paper_keywords": ["general connected graph", " fault tolerance", " phase synchronization", " self-stabilization", " spanning tree"], "paper_abstract": "In this paper, we design a self-stabilizing phase synchronizer for distributed systems. The synchronizer enables a node to transfer from one phase to the next one, subject to the condition that at most two consecutive phases appear among all nodes. It does not rely on any system parameter like the number of nodes, and thus fits for dynamic systems where nodes can freely join or leave. Each node just maintains a few variables that are related to its neighborhood; all operations are decided based on local information rather than global information. The memory usage of the proposed algorithm is low; each node has only O(Delta K) states, where Delta is the maximum degree of nodes and K > 1 is the number of phases. To the best of our knowledge, there are no other such size-independent self-stabilizing algorithms for systems of general graph topologies.", "paper_title": "Size-Independent Self-Stabilizing Asynchronous Phase Synchronization in General Graphs", "paper_id": "WOS:000280434700010"}