{"auto_keywords": [{"score": 0.03405532196821086, "phrase": "xir"}, {"score": 0.00481495049065317, "phrase": "compiler-runtime_separation"}, {"score": 0.004766388573192505, "phrase": "xir."}, {"score": 0.004742290714667451, "phrase": "intense_research"}, {"score": 0.00469445816161498, "phrase": "virtual_machines"}, {"score": 0.004553822674247401, "phrase": "flexible_software_architectures"}, {"score": 0.004485085675709643, "phrase": "quick_evaluation"}, {"score": 0.0044398358177815305, "phrase": "new_design_and_implementation_techniques"}, {"score": 0.004263336444795021, "phrase": "runtime_system"}, {"score": 0.004198965651975536, "phrase": "principal_factor"}, {"score": 0.00395101799538683, "phrase": "rapid_pursuit"}, {"score": 0.003911135156992, "phrase": "new_optimizations"}, {"score": 0.0036801209922064817, "phrase": "significant_dependencies"}, {"score": 0.0035337158050484474, "phrase": "runtime_system_components"}, {"score": 0.003462704420080129, "phrase": "object_model"}, {"score": 0.0034277338119963886, "phrase": "memory_management_system"}, {"score": 0.0032746712603464235, "phrase": "carefully_designed_strict_compiler-runtime_interface"}, {"score": 0.0031284221314354065, "phrase": "compiler_backend_lowering_object_operations"}, {"score": 0.0030500051941781034, "phrase": "hard-wired_runtime-specific_logic"}, {"score": 0.002769483748975581, "phrase": "runtime-system_details"}, {"score": 0.002592523232809191, "phrase": "compiler-runtime_interface"}, {"score": 0.0025533148412439166, "phrase": "xir_language"}, {"score": 0.0023183698048498797, "phrase": "significant_reduction"}, {"score": 0.002294929467537814, "phrase": "backend_complexity"}, {"score": 0.0021923400552366756, "phrase": "compiler-runtime_interface_complexity"}, {"score": 0.002148226022654619, "phrase": "comparable_quality_code"}, {"score": 0.0021049977753042253, "phrase": "compilation_time"}], "paper_keywords": ["Design", " Experimentation", " Languages", " Performance", " Compilers", " JIT", " Java", " virtual machines", " lowering", " software architecture", " object model", " virtual machine interface", " intermediate representations", " register allocation", " runtime system"], "paper_abstract": "Intense research on virtual machines has highlighted the need for flexible software architectures that allow quick evaluation of new design and implementation techniques. The interface between the compiler and runtime system is a principal factor in the flexibility of both components and is critical to enabling rapid pursuit of new optimizations and features. Although many virtual machines have demonstrated modularity for many components, significant dependencies often remain between the compiler and the runtime system components such as the object model and memory management system. This paper addresses this challenge with a carefully designed strict compiler-runtime interface and the XIR language. Instead of the compiler backend lowering object operations to machine operations using hard-wired runtime-specific logic, XIR allows the runtime system to implement this logic, simultaneously simplifying and separating the backend from runtime-system details. In this paper we describe the design and implementation of this compiler-runtime interface and the XIR language in the C1X dynamic compiler, a port of the HotSpot (TM) Client compiler. Our results show a significant reduction in backend complexity with XIR and an overall reduction in the compiler-runtime interface complexity while still generating comparable quality code with only minor impact on compilation time.", "paper_title": "Improving Compiler-Runtime Separation with XIR", "paper_id": "WOS:000280548400004"}