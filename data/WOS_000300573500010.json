{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lightweight_data_indexing"}, {"score": 0.004728780808284175, "phrase": "external_memory"}, {"score": 0.004499647408293102, "phrase": "burrows-wheeler_transform"}, {"score": 0.004243064277617193, "phrase": "innovative_feature"}, {"score": 0.0038070472635126276, "phrase": "working_space"}, {"score": 0.0037219886365287085, "phrase": "previous_approaches"}, {"score": 0.0032061793819537633, "phrase": "full_advantage"}, {"score": 0.0031773149810690494, "phrase": "modern_disk_features"}, {"score": 0.003134503353065008, "phrase": "sequential_disk_accesses"}, {"score": 0.0030783143919343972, "phrase": "random_accesses"}, {"score": 0.0029959082125682918, "phrase": "scan-based_algorithm"}, {"score": 0.002592163447843447, "phrase": "available_working_space"}, {"score": 0.0024774888010414206, "phrase": "lower_bounds"}, {"score": 0.0023571835517819124, "phrase": "sequential_scans"}, {"score": 0.0023044434462692483, "phrase": "classic_product"}, {"score": 0.0021826210858934933, "phrase": "disk_data"}], "paper_keywords": ["Burrows-Wheeler transform", " Compressed indexes", " Data compression", " Space-efficient algorithms", " External memory scan-based algorithms"], "paper_abstract": "In this paper we describe algorithms for computing the Burrows-Wheeler Transform (bwt) and for building (compressed) indexes in external memory. The innovative feature of our algorithms is that they are lightweight in the sense that, for an input of size n, they use only n bits of working space on disk while all previous approaches use I similar to(nlog n) bits. This is achieved by building the bwt directly without passing through the construction of the Suffix Array/Tree data structure. Moreover, our algorithms access disk data only via sequential scans, thus they take full advantage of modern disk features that make sequential disk accesses much faster than random accesses. We also present a scan-based algorithm for inverting the bwt that uses I similar to(n) bits of working space, and a lightweight internal-memory algorithm for computing the bwt which is the fastest in the literature when the available working space is o(n) bits. Finally, we prove lower bounds on the complexity of computing and inverting the bwt via sequential scans in terms of the classic product: internal-memory space x number of passes over the disk data, showing that our algorithms are within an O(log n) factor of the optimal.", "paper_title": "Lightweight Data Indexing and Compression in External Memory", "paper_id": "WOS:000300573500010"}