{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "socket_buffer_overflow"}, {"score": 0.03815547406258526, "phrase": "undesirable_state"}, {"score": 0.029420333683948755, "phrase": "socket_buffer_problem"}, {"score": 0.004598933498016774, "phrase": "self-prevention_mechanism"}, {"score": 0.004426308135681733, "phrase": "socket_buffer"}, {"score": 0.0043258453436258405, "phrase": "networking_system"}, {"score": 0.0029722900280316216, "phrase": "clear_example"}, {"score": 0.0025694584194998335, "phrase": "regression_analysis"}, {"score": 0.0022041312401435346, "phrase": "linux_kernel"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["kernel networking", " socket buffer overflow", " autonomic computing", " proactive resource management"], "paper_abstract": "This paper proposes a self-prevention mechanism that architecturally prevents the socket buffer in the networking system from overflowing. By \"self-prevention\", we mean that the kernel takes certain actions in advance before the kernel gets into an undesirable state, such as thrashing. The shortage of any resource in the kernel may bring the kernel to an undesirable state, and socket buffer overflow is a clear example. First, we explain the reason why socket buffer problem occurs and analyze the impact of each cause through regression analysis. Then, we show how our self-prevention mechanism can minimize the socket buffer problem through simulation, followed by implementation in the Linux kernel. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Self-prevention of socket buffer overflow", "paper_id": "WOS:000246260800005"}