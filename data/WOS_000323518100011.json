{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "higher-order_functions"}, {"score": 0.008911006084859794, "phrase": "assertion-based_contracts"}, {"score": 0.004719816332271661, "phrase": "important_role"}, {"score": 0.004626553103375699, "phrase": "robust_software"}, {"score": 0.004553265070135597, "phrase": "programming_languages"}, {"score": 0.004120694410890683, "phrase": "entire_object-oriented_community"}, {"score": 0.0034981163169818803, "phrase": "functional_languages_community"}, {"score": 0.0034702685641070283, "phrase": "type_systems"}, {"score": 0.0034152340901585374, "phrase": "interesting_predicates"}, {"score": 0.003268333444704392, "phrase": "higher-order_function_contracts"}, {"score": 0.003229374325577207, "phrase": "theoretically_well-founded_and_practically_viable_manner"}, {"score": 0.0031028232755683674, "phrase": "typed_lambda_calculus"}, {"score": 0.002898930717812433, "phrase": "drscheme"}, {"score": 0.0028529310661977577, "phrase": "basic_properties"}, {"score": 0.002623111480310373, "phrase": "drscheme's_code_base"}, {"score": 0.002530359917257626, "phrase": "assertion_system"}, {"score": 0.00240213106042981, "phrase": "strong_practical_potential"}, {"score": 0.002382987346529592, "phrase": "existing_type_systems"}, {"score": 0.0021909411820497707, "phrase": "large_base"}, {"score": 0.0021049977753042253, "phrase": "practical_future_type_system_research"}], "paper_keywords": ["Design", " Languages", " Reliability", " Contracts", " Higher-order Functions", " Behavioral Specifications", " Predicate Typing", " Software Reliability"], "paper_abstract": "Assertions play an important role in the construction of robust software. Their use in programming languages dates back to the 1970s. Eiffel, an object-oriented programming language, wholeheartedly adopted assertions and developed the \"Design by Contract\" philosophy. Indeed, the entire object-oriented community recognizes the value of assertion-based contracts on methods. In contrast, languages with higher-order functions do not support assertion-based contracts. Because predicates on functions are, in general, undecidable, specifying such predicates appears to be meaningless. Instead, the functional languages community developed type systems that statically approximate interesting predicates. In this paper, we show how to support higher-order function contracts in a theoretically well-founded and practically viable manner. Specifically, we introduce lambda(CON), a typed lambda calculus with assertions for higher-order functions. The calculus models the assertion monitoring system that we employ in DrScheme. We establish basic properties of the model (type soundness, etc.) and illustrate the usefulness of contract checking with examples from DrScheme's code base. We believe that the development of an assertion system for higher-order functions serves two purposes. On one hand, the system has strong practical potential because existing type systems simply cannot express many assertions that programmers would like to state. On the other hand, an inspection of a large base of invariants may provide inspiration for the direction of practical future type system research.", "paper_title": "Contracts for Higher-Order Functions", "paper_id": "WOS:000323518100011"}