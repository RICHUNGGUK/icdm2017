{"auto_keywords": [{"score": 0.03461617249114157, "phrase": "next_generation"}, {"score": 0.00481495049065317, "phrase": "simulated_annealing"}, {"score": 0.004744437370338926, "phrase": "multiprocessor_scheduling"}, {"score": 0.004674952036988355, "phrase": "communication_delays"}, {"score": 0.004539005582217309, "phrase": "differential_evolution"}, {"score": 0.00424734451992536, "phrase": "novel_permutation-based_search_technique"}, {"score": 0.004093453936415085, "phrase": "parallel_program"}, {"score": 0.003858697684681798, "phrase": "scheduling_list"}, {"score": 0.003802135020791801, "phrase": "differential_variation"}, {"score": 0.0037188360359702182, "phrase": "swap_operator"}, {"score": 0.0036373553416391823, "phrase": "de_algorithm"}, {"score": 0.003557653536102669, "phrase": "high_quality_solutions"}, {"score": 0.003479692058963528, "phrase": "short_time"}, {"score": 0.0034034331737042363, "phrase": "standard_differential_evolution_algorithm"}, {"score": 0.0032081215771180664, "phrase": "greedy_strategy"}, {"score": 0.002726740692380339, "phrase": "differential_evolution_algorithm"}, {"score": 0.0026867260506696455, "phrase": "simulated_annealing_algorithm"}, {"score": 0.0024586427394152196, "phrase": "stochastic_topological_sorting_algorithm"}, {"score": 0.002422616325204054, "phrase": "sts"}, {"score": 0.0023346234464901978, "phrase": "initial_scheduling_list"}, {"score": 0.0022168460543913787, "phrase": "hybrid_differential_evolution"}, {"score": 0.0021842976754894846, "phrase": "better_solutions"}], "paper_keywords": [""], "paper_abstract": "Employing a differential evolution (DE) algorithm, we present a novel permutation-based search technique in list scheduling for parallel program. By encoding a vector as a scheduling list and differential variation as s swap operator, the DE algorithm can generate high quality solutions in a short time. In standard differential evolution algorithm, while constructing the next generation, a greedy strategy is used which maybe lead to convergence to a local optimum. In order to avoid the above problem, we combine differential evolution algorithm with simulated annealing algorithm which relaxes the criterion selecting the next generation. We also use stochastic topological sorting algorithm (STS) to generate an initial scheduling list. The results demonstrate that the hybrid differential evolution generates better solutions even optimal solutions in most cases and simultaneously meet scalability.", "paper_title": "A permutation-based differential evolution algorithm incorporating simulated annealing for multiprocessor scheduling with communication delays", "paper_id": "WOS:000238389200066"}