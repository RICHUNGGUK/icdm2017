{"auto_keywords": [{"score": 0.027084146457518735, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "multiple_divisible_load_applications"}, {"score": 0.004639712384096822, "phrase": "divisible_load_applications"}, {"score": 0.004195418010131832, "phrase": "independent_pieces"}, {"score": 0.004064117897000019, "phrase": "good_approximation"}, {"score": 0.0038953958723049287, "phrase": "natural_master-worker_implementation"}, {"score": 0.0036553070575015344, "phrase": "critical_issue"}, {"score": 0.0036167509502276294, "phrase": "divisible_load_scheduling"}, {"score": 0.003503497128638102, "phrase": "previous_work"}, {"score": 0.0033579708256295847, "phrase": "simultaneous_scheduling"}, {"score": 0.003322540556404882, "phrase": "multiple_such_applications"}, {"score": 0.003270092550315648, "phrase": "distributed_computing_platform"}, {"score": 0.0031676593724896075, "phrase": "increasingly_relevant_scenario"}, {"score": 0.0028944757265206332, "phrase": "fundamental_network_properties"}, {"score": 0.002863921785266393, "phrase": "grid_platforms"}, {"score": 0.0027889366191837504, "phrase": "steady-state_multi-application_scheduling_problem"}, {"score": 0.002575526825728026, "phrase": "scheduling_problem"}, {"score": 0.002378408229095287, "phrase": "extensive_simulation_experiments"}, {"score": 0.0021274723597955567, "phrase": "achieved_performance"}, {"score": 0.0021049977753042253, "phrase": "heuristic_complexity"}], "paper_keywords": ["parallel computing", " scheduling", " divisible load", " multiple applications", " resource sharing"], "paper_abstract": "Divisible load applications consist of an amount of data and associated computation that can be divided arbitrarily into any number of independent pieces. This model is a good approximation of many real-world scientific applications, lends itself to a natural master-worker implementation, and has thus received a lot of attention. The critical issue of divisible load scheduling has been studied extensively in previous work. However, only a few authors have explored the simultaneous scheduling of multiple such applications on a distributed computing platform. We focus on this increasingly relevant scenario and make the following contributions. We use a novel and more realistic platform model that captures some of the fundamental network properties of grid platforms. We formulate the steady-state multi-application scheduling problem as a linear program that expresses a notion of fairness between applications. This scheduling problem is NP-complete and we propose several heuristics that we evaluate and compare via extensive simulation experiments. Our main finding is that some of our heuristics can achieve performance close to the optimal and we quantify the trade-offs between achieved performance and heuristic complexity.", "paper_title": "Steady-state scheduling of multiple divisible load applications on wide-area distributed computing platforms", "paper_id": "WOS:000239512200005"}