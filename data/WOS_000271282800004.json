{"auto_keywords": [{"score": 0.04102155612877039, "phrase": "longest_path_contractibility_problem"}, {"score": 0.013866737995443069, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "connected_parts"}, {"score": 0.0038210283935447473, "phrase": "largest_integer_l"}, {"score": 0.0037336520904376687, "phrase": "input_graph"}, {"score": 0.003523822585025555, "phrase": "l_vertices"}, {"score": 0.0034036089823450385, "phrase": "computational_complexity"}, {"score": 0.00273167822885383, "phrase": "exact_algorithm"}, {"score": 0.0022434880661725493, "phrase": "pg-free_graphs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Graph partition", " Edge contraction", " Path", " Exact algorithm"], "paper_abstract": "The 2-DISJOINT CONNECTED SUBGRAPHS problem asks if a given graph has two vertex-disjoint connected subgraphs containing prespecified sets of vertices. We show that this problem is NP-complete even if one of the sets has cardinality 2. The LONGEST PATH CONTRACTIBILITY problem asks for the largest integer l for which an input graph can be contracted to the path P(l) on l vertices. We show that the computational complexity of the LONGEST PATH CONTRACTIBILITY problem restricted to P(l)-free graphs jumps from being polynomially solvable to being NP-hard at l = 6, while this jump occurs at l = 5 for the 2-DISJOINT CONNECTED SUBGRAPHS problem. We also present an exact algorithm that solves the 2-DISJOINT CONNECTED SUBGRAPHS problem faster than O*(2(n)) for any n-vertex P(l)-free graph. For l = 6, its running time is O*(1.5790(n)). We modify this algorithm to solve the LONGEST PATH CONTRACTIBILITY problem for PG-free graphs in O*(1.5790(n)) time. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Partitioning graphs into connected parts", "paper_id": "WOS:000271282800004"}