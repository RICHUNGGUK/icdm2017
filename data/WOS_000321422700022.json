{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "embedded_software"}, {"score": 0.03905383994125658, "phrase": "basic_blocks"}, {"score": 0.02792535671061131, "phrase": "execution_time"}, {"score": 0.02742525859163111, "phrase": "hardened_code"}, {"score": 0.004555028829645471, "phrase": "new_technique"}, {"score": 0.00438955582974973, "phrase": "control-flow_checking"}, {"score": 0.004101579688745222, "phrase": "proposed_technique"}, {"score": 0.003558830226733501, "phrase": "important_variables"}, {"score": 0.0033047037762521984, "phrase": "program's_flowgraph_vertices"}, {"score": 0.003145417398038261, "phrase": "important_basic_blocks"}, {"score": 0.0029937855454238507, "phrase": "proposed_method"}, {"score": 0.002831894638104635, "phrase": "detection_latency"}, {"score": 0.002779894844207706, "phrase": "performance_overheads"}, {"score": 0.002728847267539957, "phrase": "experimental_evaluations"}, {"score": 0.0025027144548626975, "phrase": "relationship_signatures"}, {"score": 0.002471973283582411, "phrase": "control_flow_checking"}, {"score": 0.0023967582707115354, "phrase": "memory_overhead"}, {"score": 0.0021049977753042253, "phrase": "original_code"}], "paper_keywords": [""], "paper_abstract": "In this paper, we propose a new technique to improve the efficiency of control-flow checking for detecting soft-errors in embedded software. The novelties of the proposed technique are as follows: (1) the frequency of used variables and the frequency of the execution of basic blocks are used as two parameters for selecting important variables and basic blocks, (2) kernel blocks (i.e., a subset of the program's flowgraph vertices) are used for the selection of important basic blocks, and (3) using the proposed method, developers can make a trade-off between the detection latency and the performance overheads. The experimental evaluations using several benchmarks showed that the execution time in the hardened code is less than the relationship signatures for control flow checking (RSCFC) method, while the memory overhead and code size remains nearly the same. The execution time of the hardened code also remains nearly the same as the original code. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "An efficient control-flow checking technique for the detection of soft-errors in embedded software", "paper_id": "WOS:000321422700022"}