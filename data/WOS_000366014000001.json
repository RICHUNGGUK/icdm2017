{"auto_keywords": [{"score": 0.03057034786717778, "phrase": "gpu"}, {"score": 0.029577630401875436, "phrase": "gpu_implementation"}, {"score": 0.00481495049065317, "phrase": "efficient_density_combination"}, {"score": 0.0045262653692203815, "phrase": "matlab_package_deco"}, {"score": 0.003999578057088828, "phrase": "constructive_bayesian_approach"}, {"score": 0.003888659470009222, "phrase": "predictive_densities"}, {"score": 0.003823584649521733, "phrase": "different_models"}, {"score": 0.0036759314172445934, "phrase": "combination_weights"}, {"score": 0.0034359094594153304, "phrase": "core_algorithm"}, {"score": 0.0032296377835432533, "phrase": "monte_carlo"}, {"score": 0.003140004304719746, "phrase": "time-varying_combination_weights"}, {"score": 0.0029681091946289757, "phrase": "standard_cpu_computing"}, {"score": 0.002918394200972564, "phrase": "graphical_process_unit"}, {"score": 0.002853396755102163, "phrase": "parallel_computing"}, {"score": 0.002727700630869639, "phrase": "matlab_parallel_computing_toolbox"}, {"score": 0.0024370965602952496, "phrase": "execution_time"}, {"score": 0.0023694065215394593, "phrase": "standard_cpu_matlab_implementation"}, {"score": 0.0023296961971785357, "phrase": "multicore_cpu."}, {"score": 0.0022020622730208514, "phrase": "computational_gain"}, {"score": 0.0021651504858015364, "phrase": "gpu_version"}, {"score": 0.0021288561076024844, "phrase": "simulation_experiments"}, {"score": 0.0021049977753042253, "phrase": "empirical_applications"}], "paper_keywords": ["density forecast combination", " sequential Monte Carlo", " parallel computing", " GPU", " MATLAB"], "paper_abstract": "This paper presents the MATLAB package DeCo (density combination) which is based on the paper by Billio, Casarin, Ravazzolo, and van Dijk (2013) where a constructive Bayesian approach is presented for combining predictive densities originating from different models or other sources of information. The combination weights are time-varying and may depend on past predictive forecasting performances and other learning mechanisms. The core algorithm is the function DeCo which applies banks of parallel sequential Monte Carlo algorithms to filter the time-varying combination weights. The DeCo procedure has been implemented both for standard CPU computing and for graphical process unit (GPU) parallel computing. For the GPU implementation we use the MATLAB parallel computing toolbox and show how to use general purpose GPU computing almost effortlessly. This GPU implementation provides a speed-up of the execution time of up to seventy times on a standard CPU MATLAB implementation on a multicore CPU. We show the use of the package and the computational gain of the GPU version through some simulation experiments and empirical applications.", "paper_title": "Parallel Sequential Monte Carlo for Efficient Density Combination: The DeCo MATLAB Toolbox", "paper_id": "WOS:000366014000001"}