{"auto_keywords": [{"score": 0.04963419481547922, "phrase": "rebeca_models"}, {"score": 0.00481495049065317, "phrase": "efficient_reduction"}, {"score": 0.00466016686289196, "phrase": "program_analysis_technique"}, {"score": 0.00436530211426514, "phrase": "state_space_explosion"}, {"score": 0.004324723240308028, "phrase": "model_checking"}, {"score": 0.004205226397573506, "phrase": "static_slicing_technique"}, {"score": 0.003920674807745575, "phrase": "actor-based_slicing_techniques"}, {"score": 0.0038661089070527424, "phrase": "rebeca_control_flow_graph"}, {"score": 0.0038301525703886585, "phrase": "rcfg"}, {"score": 0.0037592362369401546, "phrase": "rebeca_dependence_graph"}, {"score": 0.003537670399820934, "phrase": "rdg"}, {"score": 0.003313592421224647, "phrase": "static_slicing"}, {"score": 0.0032674478600540477, "phrase": "large_slices"}, {"score": 0.0030461580449080553, "phrase": "simple_novel_ideas"}, {"score": 0.002839812512030847, "phrase": "original_model"}, {"score": 0.0027483472371835865, "phrase": "bounded_slicing"}, {"score": 0.0026598200370569433, "phrase": "nondeterministic_assignments"}, {"score": 0.00263505298504827, "phrase": "rebeca"}, {"score": 0.002562123444678208, "phrase": "static_slicing_algorithm"}, {"score": 0.002538263784314365, "phrase": "deadlock_detection"}, {"score": 0.00246800641971897, "phrase": "particular_property"}, {"score": 0.002226592967032469, "phrase": "similar_techniques"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Slicing", " Actor-based languages", " Rebeca", " Model checking", " Verification", " Reduction"], "paper_abstract": "Slicing is a program analysis technique which can be used for reducing the size of the model and avoid state space explosion in model checking. In this work a static slicing technique is proposed for reducing Rebeca models with respect to a property. For applying the actor-based slicing techniques, the Rebeca control flow graph (RCFG) and the Rebeca dependence graph (RDG) are introduced. We propose two different approaches for constructing the RDG, where each approach can be more effective under certain conditions. As the static slicing usually produces large slices, two other slicing-based reduction techniques, step-wise slicing and bounded slicing, are proposed as simple novel ideas. Step-wise slicing first generates slices that overapproximate the behavior of the original model and then refines it, and bounded slicing is based on the semantics of nondeterministic assignments in Rebeca. We also propose a static slicing algorithm for deadlock detection (in absence of any particular property). The efficiency of these techniques is checked by applying them to several case studies which are included in this paper. Similar techniques can be applied on the other actor-based languages. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Actor-based slicing techniques for efficient reduction of Rebeca models", "paper_id": "WOS:000280917600002"}