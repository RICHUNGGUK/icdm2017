{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "binary_code_authorship"}, {"score": 0.004744437370338926, "phrase": "critical_aspect"}, {"score": 0.004709567162738894, "phrase": "malware_forensics"}, {"score": 0.004674952036988355, "phrase": "authorship_analysis"}, {"score": 0.004623503587186056, "phrase": "successful_outcome"}, {"score": 0.004489046493029801, "phrase": "reverse_engineer's_skills"}, {"score": 0.00424734451992536, "phrase": "reverse_engineers"}, {"score": 0.004108589735101849, "phrase": "reliable_and_automated_tools"}, {"score": 0.0040186038781533946, "phrase": "malware_authorship_attribution"}, {"score": 0.003959706549088536, "phrase": "recent_work"}, {"score": 0.003930581102447622, "phrase": "machine_learning"}, {"score": 0.003830312347175889, "phrase": "syntax-based_features"}, {"score": 0.0037602557461171478, "phrase": "flow_graphs"}, {"score": 0.0037188360359702182, "phrase": "experimental_results"}, {"score": 0.0034034331737042363, "phrase": "author's_programming_styles"}, {"score": 0.002925077525258983, "phrase": "authors'_programming_styles"}, {"score": 0.002860938351029155, "phrase": "random_but_unique_function_names"}, {"score": 0.0027673496368158545, "phrase": "overall_accuracy"}, {"score": 0.0026375303198093764, "phrase": "layered_onion_approach"}, {"score": 0.002618104519194264, "phrase": "binary_authorship_attribution"}, {"score": 0.0022498783454674254, "phrase": "meaningful_connection"}, {"score": 0.0022250584824198218, "phrase": "authors'_styles"}, {"score": 0.0021363670305843403, "phrase": "elsevier_ltd"}, {"score": 0.0021049977753042253, "phrase": "dfrws."}], "paper_keywords": ["Authorship attribution", " Reverse engineering", " Binary program analysis", " Malware forensics", " Digital forensics"], "paper_abstract": "A critical aspect of malware forensics is authorship analysis. The successful outcome of such analysis is usually determined by the reverse engineer's skills and by the volume and complexity of the code under analysis. To assist reverse engineers in such a tedious and error-prone task, it is desirable to develop reliable and automated tools for supporting the practice of malware authorship attribution. In a recent work, machine learning was used to rank and select syntax-based features such as n-grams and flow graphs. The experimental results showed that the top ranked features were unique for each author, which was regarded as an evidence that those features capture the author's programming styles. In this paper, however, we show that the uniqueness of features does not necessarily correspond to authorship. Specifically, our analysis demonstrates that many \"unique\" features selected using this method are clearly unrelated to the authors' programming styles, for example, unique IDs or random but unique function names generated by the compiler; furthermore, the overall accuracy is generally unsatisfactory. Motivated by this discovery, we propose a layered Onion Approach for Binary Authorship Attribution called OBA2. The novelty of our approach lies in the three complementary layers: preprocessing, syntax-based attribution, and semantic-based attribution. Experiments show that our method produces results that not only are more accurate but have a meaningful connection to the authors' styles. (C) 2014 The Author. Published by Elsevier Ltd on behalf of DFRWS.", "paper_title": "OBA2: An Onion approach to Binary code Authorship Attribution", "paper_id": "WOS:000335438900012"}