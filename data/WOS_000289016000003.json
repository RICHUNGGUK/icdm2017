{"auto_keywords": [{"score": 0.014582521831227645, "phrase": "css"}, {"score": 0.012882508221938092, "phrase": "basic_operations"}, {"score": 0.00481495049065317, "phrase": "uml_class_diagrams"}, {"score": 0.004502943680955863, "phrase": "conceptual_schemas"}, {"score": 0.004287008195370748, "phrase": "system_behavior"}, {"score": 0.003868257410961701, "phrase": "static_aspects"}, {"score": 0.0037157201349604222, "phrase": "typical_life-cycle"}, {"score": 0.003459191419478298, "phrase": "generated_operations"}, {"score": 0.0033376244286643176, "phrase": "consistent_state"}, {"score": 0.0029981901803123982, "phrase": "cs"}, {"score": 0.002729029534060092, "phrase": "extended_version"}, {"score": 0.002644865209801606, "phrase": "necessary_operations"}, {"score": 0.002271476019266231, "phrase": "model-to-model_transformations"}, {"score": 0.002162316557411786, "phrase": "model_driven_development_approaches"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Behavior schema", " Action", " Operation", " Class diagram", " UML", " Model-to-model transformation"], "paper_abstract": "One of the more tedious and complex tasks during the specification of conceptual schemas (CSs) is modeling the operations that define the system behavior. This paper aims to simplify this task by providing a method that automatically generates a set of basic operations that complement the static aspects of the CS and suffice to perform all typical life-cycle create/update/delete changes on the population of the elements of the CS. Our method guarantees that the generated operations are executable, i.e. their executions produce a consistent state wrt the most typical structural constraints that can be defined in CSs (e.g. multiplicity constraints). In particular, our method takes as input a CS expressed as a Unified Modeling Language (UML) class diagram (optionally defined using a profile to enrich the specification of associations) and generates an extended version of the CS that includes all necessary operations to start operating the system. If desired, these basic operations can be later used as building blocks for creating more complex ones. We show the formalization and implementation of our method by means of model-to-model transformations. Our approach is particularly relevant in the context of Model Driven Development approaches. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Generating operation specifications from UML class diagrams: A model transformation approach", "paper_id": "WOS:000289016000003"}