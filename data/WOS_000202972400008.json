{"auto_keywords": [{"score": 0.03587033659747513, "phrase": "recursive_modules"}, {"score": 0.03058823849625593, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "ml_module_system"}, {"score": 0.004665483918844599, "phrase": "large-scale_programs"}, {"score": 0.004086835812980312, "phrase": "ml"}, {"score": 0.0036246643358397272, "phrase": "conceptually_separate_components"}, {"score": 0.00355665081072721, "phrase": "single_module"}, {"score": 0.003467940281748612, "phrase": "modular_programming"}, {"score": 0.003338992028053874, "phrase": "natural_way"}, {"score": 0.0032148229832850215, "phrase": "existing_proposals"}, {"score": 0.0027278178983579085, "phrase": "opaque_signatures"}, {"score": 0.002576988153314685, "phrase": "type_abstraction"}, {"score": 0.002299830460180699, "phrase": "call-by-value_semantics"}, {"score": 0.0021726139494880653, "phrase": "expression_problem"}], "paper_keywords": ["type systems", " type inference", " recursive modules", " applicative functors", " the expression problem"], "paper_abstract": "The ML module system is useful for building large-scale programs. The programmer can factor programs into nested and parameterized modules, and can control abstraction with signatures. Yet ML prohibits recursion between modules. As a result of this constraint, the programmer may have to consolidate conceptually separate components into a single module, intruding on modular programming. Introducing recursive modules is a natural way out of this predicament. Existing proposals, however, vary in expressiveness and verbosity. In this paper, we propose a type system for recursive modules, which can infer their signatures. Opaque signatures can also be given explicitly, to provide type abstraction either inside or outside the recursion. The type system is decidable, and is sound for a call-by-value semantics. We also present a solution to the expression problem, in support of our design choices.", "paper_title": "Recursive modules for programming", "paper_id": "WOS:000202972400008"}