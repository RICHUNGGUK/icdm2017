{"auto_keywords": [{"score": 0.0473181943391754, "phrase": "lossy_networks"}, {"score": 0.00475413908468027, "phrase": "progressive_compression_techniques"}, {"score": 0.004615202066192795, "phrase": "fast_and_efficient_streaming"}, {"score": 0.004404994123834589, "phrase": "primary_reason"}, {"score": 0.004349337717774093, "phrase": "packet_loss"}, {"score": 0.004294381488413906, "phrase": "unreliable_networks"}, {"score": 0.00416882434439484, "phrase": "connectivity_inconsistency"}, {"score": 0.004098725744818192, "phrase": "decompressed_meshes"}, {"score": 0.004046923261950549, "phrase": "prior_researches"}, {"score": 0.0038953958723049287, "phrase": "transmission_loss"}, {"score": 0.00378145978325955, "phrase": "additional_costs"}, {"score": 0.0037336520904376687, "phrase": "redundant_transmission_data"}, {"score": 0.0037021153060910164, "phrase": "bandwidth_overloads"}, {"score": 0.0036553070575015344, "phrase": "result_distortions"}, {"score": 0.0034738975998176323, "phrase": "receiver's_point"}, {"score": 0.0033865859510157238, "phrase": "novel_receiver-based_loss_tolerance_scheme"}, {"score": 0.003287482882222731, "phrase": "lost_data"}, {"score": 0.0030586736004285216, "phrase": "model_compression_procedure"}, {"score": 0.0030199761431186434, "phrase": "server_side"}, {"score": 0.0029565620771207003, "phrase": "prediction_method"}, {"score": 0.0028944757265206332, "phrase": "structural_and_geometric_data"}, {"score": 0.002785978280998868, "phrase": "data_retransmission"}, {"score": 0.0027390682208834013, "phrase": "unnecessary_protection_bits"}, {"score": 0.0026815368507715, "phrase": "refinement_data"}, {"score": 0.002658863179011018, "phrase": "reliable_and_unreliable_networks"}, {"score": 0.0025810006125483835, "phrase": "transmission_delay"}, {"score": 0.002505412457777352, "phrase": "satisfactory_decompression_result"}, {"score": 0.0024736973328071026, "phrase": "experimental_results"}, {"score": 0.0024320326084093465, "phrase": "decompression_procedure"}, {"score": 0.0023210293050850276, "phrase": "efficient_and_practical_solution"}, {"score": 0.0022434880661725493, "phrase": "proposed_prediction_technique"}, {"score": 0.0021870332034407817, "phrase": "original_mesh"}, {"score": 0.002168531704054597, "phrase": "low_distortions"}, {"score": 0.0021229583685841405, "phrase": "mean_time"}, {"score": 0.0021049977753042253, "phrase": "error_propagations"}], "paper_keywords": ["Progressive compression", " 3D streaming", " Loss tolerance"], "paper_abstract": "While progressive compression techniques were proposed long time ago, fast and efficient streaming of detailed 3D models over lossy networks still remains a challenge. A primary reason is that packet loss occurring in unreliable networks is highly unpredictable, leading to connectivity inconsistency and distortions of decompressed meshes. Although prior researches have proposed various methods to handle errors caused by transmission loss, they are always accompanied by additional costs such as redundant transmission data, bandwidth overloads, and result distortions. In this paper, we address this problem from a receiver's point of view and propose a novel receiver-based loss tolerance scheme which is capable of recovering the lost data when streaming 3D progressive meshes over lossy networks. Specifically, we use some constraints during the model compression procedure on the server side, and suggest a prediction method to handle loss of structural and geometric data on the client/receiver side. Our algorithm works without any data retransmission or introducing any unnecessary protection bits. We stream mesh refinement data on reliable and unreliable networks separately so as to reduce the transmission delay as well as to obtain a satisfactory decompression result. The experimental results indicate that the decompression procedure can be accomplished quickly, suggesting that it is an efficient and practical solution. It is also shown that the proposed prediction technique achieves a very good approximation of the original mesh with low distortions, and in the mean time, error propagations are also well controlled.", "paper_title": "Receiver-based loss tolerance method for 3D progressive streaming", "paper_id": "WOS:000286472300015"}