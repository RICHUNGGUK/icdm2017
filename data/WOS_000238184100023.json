{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "self-managing_web_servers"}, {"score": 0.03496401466222773, "phrase": "qos_requirements"}, {"score": 0.034628111317106566, "phrase": "different_classes"}, {"score": 0.004581162468419365, "phrase": "web_server_architecture"}, {"score": 0.0044685410845412745, "phrase": "performance_isolation"}, {"score": 0.004424268136268051, "phrase": "service_differentiation"}, {"score": 0.004358676214574977, "phrase": "qos_guarantees"}, {"score": 0.004251500979153001, "phrase": "qos_extensions"}, {"score": 0.004126349202545883, "phrase": "external_administrators"}, {"score": 0.0040449598280454645, "phrase": "right_parameter_values"}, {"score": 0.003848413823574867, "phrase": "varying_workloads"}, {"score": 0.0038102613924627647, "phrase": "bursty_traffic"}, {"score": 0.0035183010916001664, "phrase": "observation-based_approach"}, {"score": 0.0031686717525002935, "phrase": "system_state"}, {"score": 0.003014576010931602, "phrase": "primarily_the_accept_queue"}, {"score": 0.00286795254228461, "phrase": "system-wide_qos_goals"}, {"score": 0.002769568481822277, "phrase": "apache_web_server"}, {"score": 0.0027284410545226306, "phrase": "linux_operating_system"}, {"score": 0.0026086775334428617, "phrase": "different_resources"}, {"score": 0.0025191653363555193, "phrase": "workload_characteristics"}, {"score": 0.002337537183727731, "phrase": "resource_parameters"}, {"score": 0.0023028105026714533, "phrase": "accept_queue"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["web server", " self-managing", " dynamic resource allocation"], "paper_abstract": "As more business applications have become web enabled, the web server architecture has evolved to provide performance isolation, service differentiation, and QoS guarantees. Various server mechanisms that provide QoS extensions, however, rely on external administrators to set the right parameter values for their desirable performance. Due to the complexity of handling varying workloads and bursty traffic, configuring such parameters optimally becomes a challenge. In this paper, we describe an observation-based approach for self-managing web servers that can adapt to changing workloads while maintaining the QoS requirements of different classes. In this approach, the system state is monitored continuously and parameter values of various system resources-primarily the accept queue and the CPU-are adjusted to maintain the system-wide QoS goals. We implement our techniques using the Apache web server and the Linux operating system. We first demonstrate the need to manage different resources in the system depending on the workload characteristics. We then experimentally demonstrate that our observation-based system monitors such as workload changes and adjusts the resource parameters of the accept queue and CPU schedulers in order to maintain the QoS requirements of the different classes. (C) 2005 Elsevier B.V. All rights reserved.", "paper_title": "An observation-based approach towards self-managing web servers", "paper_id": "WOS:000238184100023"}