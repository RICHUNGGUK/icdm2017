{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "wait-free_synchronization"}, {"score": 0.015108223696862958, "phrase": "distributed_applications"}, {"score": 0.004234884779773412, "phrase": "effective_concurrent_programming_technique"}, {"score": 0.004134137523409649, "phrase": "concurrent_programming_community"}, {"score": 0.003635790924434452, "phrase": "practical_application"}, {"score": 0.002974281028713475, "phrase": "resulting_code"}, {"score": 0.002722634472231842, "phrase": "performance_analysis"}, {"score": 0.0026577673946415583, "phrase": "wait-free_synchronization_server"}, {"score": 0.0025326211341475903, "phrase": "traditional_locking_techniques"}, {"score": 0.002472269923319476, "phrase": "practical_demonstration"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["concurrency", " non-blocking algorithms"], "paper_abstract": "Wait-free synchronization has been recognized in the literature as an effective concurrent programming technique. The concurrent programming community, however, has been slow to adopt this technique. This paper addresses the practical application of wait-free synchronization in the design of distributed applications. In this paper, we present an implementation of a server that uses wait-free synchronization. The resulting code is more easily seen to be fault tolerant. The performance analysis of the wait-free synchronization server outperformed a server that uses traditional locking techniques. This practical demonstration of the benefits of wait-free synchronization should help foster its adoption in the development of distributed applications. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Using wait-free synchronization in the design of distributed applications", "paper_id": "WOS:000234408800007"}