{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "finite-state_automata"}, {"score": 0.02200429403563868, "phrase": "state_elimination"}, {"score": 0.021499624891755505, "phrase": "shorter_regular_expressions"}, {"score": 0.007228574430800966, "phrase": "vertical_chopping"}, {"score": 0.007060340407655976, "phrase": "bridge_states"}, {"score": 0.006950350009880133, "phrase": "horizontal_chopping"}, {"score": 0.004178935413340453, "phrase": "intuitive_method"}, {"score": 0.004081385289516914, "phrase": "regular_expressions"}, {"score": 0.003923815926819606, "phrase": "resulting_regular_expressions"}, {"score": 0.003459191419478298, "phrase": "shorter_expressions"}, {"score": 0.0030494153169181334, "phrase": "structural_properties"}, {"score": 0.002688050388891007, "phrase": "non-bridge_states"}, {"score": 0.0021554120436656334, "phrase": "almost_all_proofs"}, {"score": 0.0021049977753042253, "phrase": "preliminary_version"}], "paper_keywords": [""], "paper_abstract": "We consider the use of state elimination to construct shorter regular expressions from finite-state automata. Although state elimination is an intuitive method for computing regular expressions from finite-state automata, the resulting regular expressions are often very long and complicated. We examine the minimization of finite-state automata to obtain shorter expressions first. Then, we introduce vertical chopping based on bridge states and horizontal chopping based on the structural properties of given finite-state automata. We prove that we should not eliminate bridge states until we eliminate all non-bridge states to obtain shorter regular expressions. In addition, we suggest heuristics for state elimination that lead to shorter regular expressions based on vertical chopping and horizontal chopping. Note that we have omitted almost all proofs in this preliminary version.", "paper_title": "Shorter regular expressions from finite-state automata", "paper_id": "WOS:000236480300012"}