{"auto_keywords": [{"score": 0.03304002729122005, "phrase": "partition_class"}, {"score": 0.018975927570751363, "phrase": "search_tree"}, {"score": 0.0177841086107505, "phrase": "partition_classes"}, {"score": 0.00481495049065317, "phrase": "complex_training_images"}, {"score": 0.004775531918452571, "phrase": "search_tree_partitioning"}, {"score": 0.004697655699119423, "phrase": "complex_training_image"}, {"score": 0.004659467062263589, "phrase": "ti"}, {"score": 0.004583205112737672, "phrase": "single_normal_equation_simulation"}, {"score": 0.004489952932659799, "phrase": "poor_simulated_realizations"}, {"score": 0.004362564831572539, "phrase": "location_specific_patterns"}, {"score": 0.004238775572746022, "phrase": "single_search_tree"}, {"score": 0.004152502093643003, "phrase": "relative_locations"}, {"score": 0.00405127920820053, "phrase": "critical_features"}, {"score": 0.004001593118269276, "phrase": "complex_tis"}, {"score": 0.0038403151693333017, "phrase": "large_ti"}, {"score": 0.003625347557965931, "phrase": "corresponding_search_tree"}, {"score": 0.0035224030823976186, "phrase": "snesim_algorithm"}, {"score": 0.0033664873319204027, "phrase": "spatial_filters"}, {"score": 0.00327086925741257, "phrase": "resulting_filter_scores"}, {"score": 0.0029027394930867902, "phrase": "simulation_path"}, {"score": 0.002762774046280398, "phrase": "appropriate_search_tree"}, {"score": 0.0025865679621853667, "phrase": "partitioning_approach"}, {"score": 0.002523420125608051, "phrase": "ti._tis"}, {"score": 0.002333421318779658, "phrase": "snesim."}, {"score": 0.0022484715639779153, "phrase": "simulation_speed"}, {"score": 0.002193559776999383, "phrase": "smaller_trees"}, {"score": 0.002157697367447098, "phrase": "single_large_one"}, {"score": 0.0021049977753042253, "phrase": "sgems_software"}], "paper_keywords": ["Training image", " Analog", " Clustering", " Spatial filters"], "paper_abstract": "Using a complex training image (TI) for the single normal equation simulation (SNESIM) algorithm results in poor simulated realizations since that image contains trends and location specific patterns. By pooling all the TI patterns in a single search tree and not recording the relative locations of those patterns, some critical features of these complex TIs are lost. The search tree partitioning approach subdivides a large TI into imbricated, homogeneous, smaller images, called partition classes. Each of these partition classes has a corresponding search tree that can be utilized by the SNESIM algorithm. These partition classes are obtained by processing the TIs with spatial filters that are pattern sensitive. The resulting filter scores are then clustered into partition classes. All patterns within a partition class are recorded by a search tree: there is one tree per partition class. At each pixel along the simulation path, the partition class is retrieved first and used to select the appropriate search tree. That search tree contains the patterns relevant to that partition class. In practice, the partitioning approach adds flexibility in choosing a TI. TIs that were easier to obtain but traditionally too complex for simulation can now be considered as input to SNESIM. In many cases, it also significantly increases the simulation speed by searching a vector of smaller trees instead of a single large one. A plugin for the SGeMS software is provided. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "Considering complex training images with search tree partitioning", "paper_id": "WOS:000266544700009"}