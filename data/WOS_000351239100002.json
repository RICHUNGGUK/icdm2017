{"auto_keywords": [{"score": 0.04862271607252209, "phrase": "total_tardiness"}, {"score": 0.00481495049065317, "phrase": "single-machine_scheduling"}, {"score": 0.0034538466642399976, "phrase": "single-machine_scheduling_problem"}, {"score": 0.0029589086332593674, "phrase": "maximum_tardiness"}, {"score": 0.0027386335451725762, "phrase": "upper_bound"}, {"score": 0.0026347074232350503, "phrase": "branch-and-bound_algorithm"}, {"score": 0.0025347150832077175, "phrase": "optimal_solution"}, {"score": 0.002476546030310661, "phrase": "genetic_algorithm"}, {"score": 0.002401053532270901, "phrase": "local_search"}, {"score": 0.002345944657572499, "phrase": "near-optimal_solutions"}, {"score": 0.002205079358459154, "phrase": "computational_experiments"}, {"score": 0.0021378442381693847, "phrase": "solution_quality"}, {"score": 0.0021049977753042253, "phrase": "execution_speed"}], "paper_keywords": ["Scheduling", " total tardiness", " agent", " single machine", " learning effect"], "paper_abstract": "Scheduling with learning effects or scheduling with two competing agents has been widely studied in recent years. However, they are seldom discussed at the same time. In this article, we consider a single-machine scheduling problem with learning effects where the objective is to minimize the total tardiness of jobs from one agent, given that the maximum tardiness of jobs from the other agent cannot exceed an upper bound. We provide a branch-and-bound algorithm to search for the optimal solution and a genetic algorithm equipped with a local search to obtain near-optimal solutions. In addition, we conduct some computational experiments to investigate the solution quality and execution speed of both algorithms.", "paper_title": "Algorithms for single-machine scheduling to minimize the total tardiness with learning effects and two competing agents", "paper_id": "WOS:000351239100002"}