{"auto_keywords": [{"score": 0.04708600080273322, "phrase": "type-scoped_advice"}, {"score": 0.00931412340256704, "phrase": "aspectfun"}, {"score": 0.00481495049065317, "phrase": "polymorphically_typed_functional_languages"}, {"score": 0.0047310525657970615, "phrase": "aspect-oriented_paradigm"}, {"score": 0.004648609688625397, "phrase": "polymorphically_typed_functional_language"}, {"score": 0.0041586840496756474, "phrase": "possibly_polymorphic_type_constraints"}, {"score": 0.003968112038249246, "phrase": "aspect_orientation"}, {"score": 0.0039218440805789965, "phrase": "functional_programming"}, {"score": 0.0038761135052054765, "phrase": "quick_behavioral_adaption"}, {"score": 0.0037862398004482253, "phrase": "clear_separation"}, {"score": 0.003698442219929622, "phrase": "expressive_type-directed_programming"}, {"score": 0.0036126731589251906, "phrase": "proper_static_weaving"}, {"score": 0.0035288860880035985, "phrase": "polymorphic_languages"}, {"score": 0.0034673190692473903, "phrase": "type-erasure_semantics"}, {"score": 0.0032315723330399375, "phrase": "type-directed_static_weaving_strategy"}, {"score": 0.0030653094605910727, "phrase": "static_type_inference"}, {"score": 0.0030295361111006866, "phrase": "static_weaving"}, {"score": 0.002924694271730544, "phrase": "aspect-oriented_polymorphically"}, {"score": 0.0026313840069327713, "phrase": "compile-time_weaving"}, {"score": 0.002272053079580848, "phrase": "static_weaving_strategy"}, {"score": 0.002206290313627494, "phrase": "operational_semantics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Aspect-oriented programming", " Type-scoped advice", " Static weaving", " Polymorphically typed functional language"], "paper_abstract": "Incorporating aspect-oriented paradigm to a polymorphically typed functional language enables the declaration of type-scoped advice, in which the effect of an aspect can be harnessed by introducing possibly polymorphic type constraints to the aspect. The amalgamation of aspect orientation and functional programming enables quick behavioral adaption of functions, clear separation of concerns and expressive type-directed programming. However, proper static weaving of aspects in polymorphic languages with a type-erasure semantics remains a challenge. In this paper, we describe a type-directed static weaving strategy, as well as its implementation, that supports static type inference and static weaving of programs written in an aspect-oriented polymorphically typed functional language, AspectFun. We show examples of type-scoped advice, identify the challenges faced with compile-time weaving in the presence of type-scoped advice, and demonstrate how various advanced aspect features can be handled by our techniques. Finally, we prove the correctness of the static weaving strategy with respect to the operational semantics of AspectFun. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Type-directed weaving of aspects for polymorphically typed functional languages", "paper_id": "WOS:000281129600007"}