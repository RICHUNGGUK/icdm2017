{"auto_keywords": [{"score": 0.023729930242283016, "phrase": "sparse"}, {"score": 0.00481495049065317, "phrase": "coding_ecocs"}, {"score": 0.004712988631183401, "phrase": "standard_way"}, {"score": 0.004632968695963776, "phrase": "multi-class_categorization_problems"}, {"score": 0.004515467468684217, "phrase": "binary_classifiers"}, {"score": 0.00445783412174435, "phrase": "pairwise_voting_procedure"}, {"score": 0.004363401436068803, "phrase": "classical_approach"}, {"score": 0.004252707756312684, "phrase": "error-correcting_output_codes"}, {"score": 0.004109454074072009, "phrase": "ecoc_framework"}, {"score": 0.004056981775766071, "phrase": "one-versus-one_coding"}, {"score": 0.0038868464660354626, "phrase": "coding_designs"}, {"score": 0.003837205620832367, "phrase": "binary_problems"}, {"score": 0.0037398106866046972, "phrase": "one-versus-one_strategy"}, {"score": 0.0034033029171804106, "phrase": "smaller_overlapping"}, {"score": 0.0033026956021014204, "phrase": "high_percentage"}, {"score": 0.003177687211289478, "phrase": "coding_matrix"}, {"score": 0.0031102878400698143, "phrase": "high_sparseness_degree"}, {"score": 0.003044313656896057, "phrase": "meta-class_membership_information"}, {"score": 0.002904040426340639, "phrase": "training_data"}, {"score": 0.0027940789980683, "phrase": "problem-dependent_way"}, {"score": 0.0026425357050743003, "phrase": "new_coded_information"}, {"score": 0.0025207284405252914, "phrase": "new_re-coding_strategy"}, {"score": 0.0024356742694508662, "phrase": "binary_code"}, {"score": 0.002178529882942255, "phrase": "different_state-of-the-art_ecoc_configurations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Multi-class classification", " Error-Correcting Output Codes", " Coding", " Decoding"], "paper_abstract": "A standard way to deal with multi-class categorization problems is by the combination of binary classifiers in a pairwise voting procedure. Recently, this classical approach has been formalized in the Error-Correcting Output Codes (ECOC) framework. In the ECOC framework, the one-versus-one coding demonstrates to achieve higher performance than the rest of coding designs. The binary problems that we train in the one-versus-one strategy are significantly smaller than in the rest of designs, and usually easier to be learnt, taking into account the smaller overlapping between classes. However, a high percentage of the positions coded by zero of the coding matrix, which implies a high sparseness degree, does not codify meta-class membership information. In this paper, we show that using the training data we can redefine without re-training, in a problem-dependent way, the one-versus-one coding matrix so that the new coded information helps the system to increase its generalization capability. Moreover, the new re-coding strategy is generalized to be applied over any binary code. The results over several UCI Machine Learning repository data sets and two real multi-class problems show that performance improvements can be obtained re-coding the classical one-versus-one and Sparse random designs compared to different state-of-the-art ECOC configurations. (C) 2009 Published by Elsevier B.V.", "paper_title": "Re-coding ECOCs without re-training", "paper_id": "WOS:000276700500004"}