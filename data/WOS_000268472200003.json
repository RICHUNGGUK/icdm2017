{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "linda"}, {"score": 0.004746558955503364, "phrase": "tuple_spaces"}, {"score": 0.0045471315699087385, "phrase": "communicating_agents"}, {"score": 0.004324985524216987, "phrase": "inter-agent_communication_primitives"}, {"score": 0.004202931484732134, "phrase": "programming_language"}, {"score": 0.00398325070540449, "phrase": "natural_and_simple_way"}, {"score": 0.003775008774288817, "phrase": "interactive_behavior"}, {"score": 0.0037480753312398754, "phrase": "software_components"}, {"score": 0.0036684182697540382, "phrase": "process_algebra"}, {"score": 0.003552084379143929, "phrase": "process_compatibility"}, {"score": 0.0035015674744573377, "phrase": "safe_composition"}, {"score": 0.003318423751430509, "phrase": "global_store"}, {"score": 0.0032246835734680377, "phrase": "relevant_information"}, {"score": 0.003190215563286321, "phrase": "current_execution"}, {"score": 0.003100085797251317, "phrase": "linda-based_computation"}, {"score": 0.0030450484042676023, "phrase": "store's_evolution"}, {"score": 0.002896071795090179, "phrase": "computation_step"}, {"score": 0.0027941308786390033, "phrase": "successful_computation"}, {"score": 0.002619571161767134, "phrase": "similar_proposals"}, {"score": 0.0025730425700096365, "phrase": "dynamic_compatibility"}, {"score": 0.0023864566654035924, "phrase": "suitable_store"}, {"score": 0.0022777800735119405, "phrase": "open_running_system"}, {"score": 0.0022133711375320266, "phrase": "complex_systems"}, {"score": 0.0021049977753042253, "phrase": "distributed_tuple_spaces"}], "paper_keywords": ["Coordination languages", " Components", " Software architecture", " Compatibility", " Interaction", " Process algebras"], "paper_abstract": "Nowadays, tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. Some models, as Linda, were presented as a set of inter-agent communication primitives which can virtually be added to any programming language. These models have the advantage of capturing both communication and synchronization in a natural and simple way. In this paper, we analyze the use of Linda to specify the interactive behavior of software components. We first introduce a process algebra for Linda and we define a notion of process compatibility that ensures the safe composition of components. This definition of compatibility takes into account the state of a global store (tuple space), which gives relevant information about the current execution of the system. Indeed, a Linda-based computation is characterized by the store's evolution, so that the set of tuples included into the store governs each computation step. In particular, we prove that compatibility implies successful computation (i.e. without deadlock). We also argue that Linda features some advantages with respect to similar proposals in the context of dynamic compatibility checking. In this context, the success of the composition of a pair of agents in presence of a suitable store can be useful to condition the acceptance of a given component into an open running system. In order to extend our approach to complex systems, where constructing a system involves more than two components, we propose the use of distributed tuple spaces as the glue to join components. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "Software composition with Linda", "paper_id": "WOS:000268472200003"}