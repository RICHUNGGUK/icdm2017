{"auto_keywords": [{"score": 0.04745358435978177, "phrase": "mpi"}, {"score": 0.004608539830653038, "phrase": "parallel_programming"}, {"score": 0.004410938507689426, "phrase": "hybrid_parallel_programming"}, {"score": 0.004143196873246147, "phrase": "internode_communication"}, {"score": 0.004015458740397976, "phrase": "shared-memory_programming_model"}, {"score": 0.003819187440994939, "phrase": "dominant_approach"}, {"score": 0.003771631577951067, "phrase": "scalable_parallel_programming"}, {"score": 0.0036097844103129043, "phrase": "great_deal"}, {"score": 0.0035204268675160257, "phrase": "performance_potential"}, {"score": 0.0031448288291084, "phrase": "mpi-integrated_shared-memory_programming_model"}, {"score": 0.0029909851863915283, "phrase": "small_extension"}, {"score": 0.002935248513348432, "phrase": "one-sided_communication_interface"}, {"score": 0.0025409639091476363, "phrase": "atomic_operations"}, {"score": 0.002493592357827492, "phrase": "memory_consistency"}, {"score": 0.002371531125700046, "phrase": "new_interface"}, {"score": 0.0022133711375320244, "phrase": "average_performance_improvement"}, {"score": 0.0021450029487459403, "phrase": "communication_component"}, {"score": 0.0021049977753042253, "phrase": "five-point_stencil_solver"}], "paper_keywords": ["MPI-3.0", " Shared memory", " Hybrid parallel programming"], "paper_abstract": "Hybrid parallel programming with the message passing interface (MPI) for internode communication in conjunction with a shared-memory programming model to manage intranode parallelism has become a dominant approach to scalable parallel programming. While this model provides a great deal of flexibility and performance potential, it saddles programmers with the complexity of utilizing two parallel programming systems in the same application. We introduce an MPI-integrated shared-memory programming model that is incorporated into MPI through a small extension to the one-sided communication interface. We discuss the integration of this interface with the MPI 3.0 one-sided semantics and describe solutions for providing portable and efficient data sharing, atomic operations, and memory consistency. We describe an implementation of the new interface in the MPICH2 and Open MPI implementations and demonstrate an average performance improvement of 40 % to the communication component of a five-point stencil solver.", "paper_title": "MPI + MPI: a new hybrid approach to parallel programming with MPI plus shared memory", "paper_id": "WOS:000326885100002"}