{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "loop_dead_variables"}, {"score": 0.003954837422946628, "phrase": "successive_execution"}, {"score": 0.003728000957725218, "phrase": "different_value"}, {"score": 0.003479692058963528, "phrase": "last_value"}, {"score": 0.0032160319265621285, "phrase": "optimized_program"}, {"score": 0.0030017207229983385, "phrase": "dead_variable"}], "paper_keywords": ["compiler design", " loop optimization", " loop invariant computations"], "paper_abstract": "Loop dead variables are the variables, which are defined in a loop, but not used in that loop. On successive execution of loop, these get different value, however all values (except last value) are not used. Hence in optimized program, the definition of a loop dead variable can be moved outside the loop (after the loop), rather than computing every time, inside the loop. In our discussion, we have assumed only simple loop. Every loop has one entry and one exit point.", "paper_title": "An improved algorithm for loop dead optimization", "paper_id": "WOS:000239402700002"}