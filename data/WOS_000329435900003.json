{"auto_keywords": [{"score": 0.04949103528566114, "phrase": "large-scale_linear_programs"}, {"score": 0.04891341035655383, "phrase": "ifm"}, {"score": 0.0451501498769307, "phrase": "infrequency_constraints"}, {"score": 0.04136902813275077, "phrase": "ifmi"}, {"score": 0.039735095690270325, "phrase": "minimal_infrequent_itemsets"}, {"score": 0.03843856552198327, "phrase": "pspace"}, {"score": 0.02770519633448724, "phrase": "linear_program"}, {"score": 0.00481495049065317, "phrase": "inverse_frequent_itemset_mining"}, {"score": 0.004721162131188487, "phrase": "frequent_set_mining"}, {"score": 0.004606479650820579, "phrase": "transaction_database_d"}, {"score": 0.0045726187330434025, "phrase": "support_constraints"}, {"score": 0.00447251540886613, "phrase": "frequent_ones"}, {"score": 0.004406994912939125, "phrase": "new_formulation"}, {"score": 0.003993958025223994, "phrase": "specified_unique_threshold"}, {"score": 0.003858697684681798, "phrase": "original_ifm"}, {"score": 0.0037371883813356755, "phrase": "so-called_negative_generator_border"}, {"score": 0.0036733470451885465, "phrase": "complexity_increase"}, {"score": 0.0035928733234018226, "phrase": "nexp"}, {"score": 0.003479692058963528, "phrase": "negative_generator_border"}, {"score": 0.0034118234596993836, "phrase": "original_input_size"}, {"score": 0.0033452741392850523, "phrase": "specific_problem"}, {"score": 0.003296212583539166, "phrase": "upper_bound"}, {"score": 0.003247868216333148, "phrase": "hypergraph_interpretation"}, {"score": 0.003200230621987751, "phrase": "minimal_transversals"}, {"score": 0.003161065111494053, "phrase": "constant_k"}, {"score": 0.0031146967095233586, "phrase": "k-bounded_definition"}, {"score": 0.002899965889623787, "phrase": "-its_complexity"}, {"score": 0.0028574177450490677, "phrase": "ifm."}, {"score": 0.002843372121209168, "phrase": "bounded_problem"}, {"score": 0.0028085616610192456, "phrase": "integer_linear_program"}, {"score": 0.0027878797103973313, "phrase": "large_number"}, {"score": 0.0026538282523433684, "phrase": "integer_constraints"}, {"score": 0.0026342827320931937, "phrase": "decision_problem"}, {"score": 0.002570212171787441, "phrase": "np."}, {"score": 0.0025137856138000014, "phrase": "column_generation_technique"}, {"score": 0.0024586427394152196, "phrase": "simplex_method"}, {"score": 0.002398787007123186, "phrase": "huge_number"}, {"score": 0.002317423416027688, "phrase": "auxiliary_integer_linear_program"}, {"score": 0.0022787094661798142, "phrase": "np"}, {"score": 0.002227802698543023, "phrase": "greedy_heuristic"}, {"score": 0.0022005118194652704, "phrase": "resulting_overall_column_generation_solution_algorithm"}, {"score": 0.0021522261505574035, "phrase": "intensive_experimentation"}, {"score": 0.0021049977753042253, "phrase": "real-life_scenarios"}], "paper_keywords": ["Algorithms", " Experimentation", " Theory", " Frequent itemset mining", " inverse problem", " minimal hypergraph transversals", " column generation simplex"], "paper_abstract": "Inverse frequent set mining (IFM) is the problem of computing a transaction database D satisfying given support constraints for some itemsets, which are typically the frequent ones. This article proposes a new formulation of IFM, called IFMI (IFM with infrequency constraints), where the itemsets that are not listed as frequent are constrained to be infrequent; that is, they must have a support less than or equal to a specified unique threshold. An instance of IFMI can be seen as an instance of the original IFM by making explicit the infrequency constraints for the minimal infrequent itemsets, corresponding to the so-called negative generator border defined in the literature. The complexity increase from PSPACE (complexity of IFM) to NEXP (complexity of IFMI) is caused by the cardinality of the negative generator border, which can be exponential in the original input size. Therefore, the article introduces a specific problem parameter. that computes an upper bound to this cardinality using a hypergraph interpretation for which minimal infrequent itemsets correspond to minimal transversals. By fixing a constant k, the article formulates a k-bounded definition of the problem, called k-IFMI, that collects all instances for which the value of the parameter. is less than or equal to k-its complexity is in PSPACE as for IFM. The bounded problem is encoded as an integer linear program with a large number of variables (actually exponential w.r.t. the number of constraints), which is thereafter approximated by relaxing integer constraints-the decision problem of solving the linear program is proven to be in NP. In order to solve the linear program, a column generation technique is used that is a variation of the simplex method designed to solve large-scale linear programs, in particular with a huge number of variables. The method at each step requires the solution of an auxiliary integer linear program, which is proven to be NP hard in this case and for which a greedy heuristic is presented. The resulting overall column generation solution algorithm enjoys very good scaling as evidenced by the intensive experimentation, thereby paving the way for its application in real-life scenarios.", "paper_title": "Solving Inverse Frequent Itemset Mining with Infrequency Constraints via Large-Scale Linear Programs", "paper_id": "WOS:000329435900003"}