{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lambda_terms"}, {"score": 0.00378767277402891, "phrase": "recursive_expression"}, {"score": 0.0031422859551159506, "phrase": "complex_recurrences"}, {"score": 0.0029988599391845517, "phrase": "classical_analytic_methods"}, {"score": 0.002900426826591769, "phrase": "de_bruijn_indices"}, {"score": 0.0026771333996253783, "phrase": "untyped_lambda_terms"}, {"score": 0.002295964130868963, "phrase": "free_variables"}, {"score": 0.0021910825909008946, "phrase": "normal_forms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Combinatorics", " Lambda calculus", " Functional programming", " Randomization", " Catalan numbers"], "paper_abstract": "Despite lambda-calculus is now three quarters of a century old, no formula counting lambda-terms has been proposed yet, and the combinatorics of lambda-calculus is considered a hard problem. The difficulty lies in the fact that the recursive expression of the numbers of terms of size n with at most m free variables contains the number of terms of size n - 1 with at most m + 1 variables. This leads to complex recurrences that cannot be handled by classical analytic methods. Here based on de Bruijn indices (another presentation of lambda-calculus) we propose several results on counting untyped lambda terms, i.e., on telling how many terms belong to such or such class, according to the size of the terms and/or to the number of free variables. We extend the results to normal forms. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "On counting untyped lambda terms", "paper_id": "WOS:000316584300005"}