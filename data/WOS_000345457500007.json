{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "type_and_effect_systems"}, {"score": 0.004688321299229397, "phrase": "type_systems"}, {"score": 0.004444921827311577, "phrase": "general_semantic_properties"}, {"score": 0.00421410521089045, "phrase": "programs_execution"}, {"score": 0.0038900709793274484, "phrase": "static_analyses"}, {"score": 0.003687960013746783, "phrase": "computational_side_effects"}, {"score": 0.0036229421570951807, "phrase": "resource_usage"}, {"score": 0.0034963129868796033, "phrase": "concurrent_languages"}, {"score": 0.0032852337992126564, "phrase": "abstract_interpretation_techniques"}, {"score": 0.0031422859551159506, "phrase": "effect_systems"}, {"score": 0.0030868583963299698, "phrase": "abstract_semantics"}, {"score": 0.002952516738708181, "phrase": "cousot's_methodology"}, {"score": 0.0028492532869274743, "phrase": "abstract_domain"}, {"score": 0.002405853977978678, "phrase": "different_analyses"}], "paper_keywords": [""], "paper_abstract": "Type and effect systems significantly extend type systems and allow one to express general semantic properties and to statically reason about programs execution. They have been widely exploited to specify static analyses, for example to track computational side effects, resource usage and communication in concurrent languages. In this paper we adopt abstract interpretation techniques to express type and effect systems as abstract semantics. We extend the Cousot's methodology by introducing an abstract domain which (i) is able to express types with annotations, (ii) is reusable in different analyses with few modifications and (iii) is easily implementable. To test our approach we reconstruct two analyses for which the type and effect systems approach were successful.", "paper_title": "An Abstract Interpretation Framework for Type and Effect Systems", "paper_id": "WOS:000345457500007"}