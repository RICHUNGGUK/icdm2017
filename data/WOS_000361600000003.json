{"auto_keywords": [{"score": 0.049460287006492736, "phrase": "multithreaded_programs"}, {"score": 0.04127223017199095, "phrase": "dynamic_symbolic_execution"}, {"score": 0.00890494568833879, "phrase": "test_runs"}, {"score": 0.00481495049065317, "phrase": "based_automated_testing"}, {"score": 0.004600596158672458, "phrase": "environment_input_data"}, {"score": 0.004511663118269957, "phrase": "nondeterministic_interleavings"}, {"score": 0.00445332728705756, "phrase": "concurrent_events"}, {"score": 0.003986844722309844, "phrase": "input_data"}, {"score": 0.003735522846193052, "phrase": "new_approach"}, {"score": 0.003454687811707182, "phrase": "petri_nets"}, {"score": 0.003194898129853895, "phrase": "experimental_comparison"}, {"score": 0.0031127040190005216, "phrase": "existing_algorithms"}, {"score": 0.0030326180561817497, "phrase": "partial_order_reductions"}, {"score": 0.002935393439834135, "phrase": "new_algorithm"}, {"score": 0.002859856368059419, "phrase": "reachable_control_states"}, {"score": 0.0027501697136375555, "phrase": "significantly_smaller_number"}, {"score": 0.002477753633057247, "phrase": "even_exponential_allowing_programs"}, {"score": 0.0024456516553345966, "phrase": "long_test_executions"}, {"score": 0.002413964586947992, "phrase": "hard-to-solve_constraints"}, {"score": 0.0021049977753042253, "phrase": "different_interleavings"}], "paper_keywords": ["Dynamic symbolic execution", " Unfoldings", " Automated testing", " Partial order reduction"], "paper_abstract": "In multithreaded programs both environment input data and the nondeterministic interleavings of concurrent events can affect the behavior of the program. One approach to systematically explore the nondeterminism caused by input data is dynamic symbolic execution. For testing multithreaded programs we present a new approach that combines dynamic symbolic execution with unfoldings, a method originally developed for Petri nets but also applied to many other models of concurrency. We provide an experimental comparison of our new approach with existing algorithms combining dynamic symbolic execution and partial order reductions and show that the new algorithm can explore the reachable control states of each thread with a significantly smaller number of test runs. In some cases the reduction to the number of test runs can be even exponential allowing programs with long test executions or hard-to-solve constraints generated by symbolic execution to be tested more efficiently. In addition we show that our algorithm generates a structure describing different interleavings from which deadlocks can be detected efficiently as well.", "paper_title": "Unfolding based automated testing of multithreaded programs", "paper_id": "WOS:000361600000003"}