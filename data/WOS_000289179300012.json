{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "medical_software"}, {"score": 0.004683540676363745, "phrase": "software_development"}, {"score": 0.004628320711601916, "phrase": "appropriate_coupling"}, {"score": 0.00459186790405058, "phrase": "separated_code_elements"}, {"score": 0.004484215355348556, "phrase": "initially_expected_high-level_software_functionalities"}, {"score": 0.004276390289178831, "phrase": "dynamic_composition"}, {"score": 0.0037978390554858766, "phrase": "build-level_dependencies"}, {"score": 0.0037234376132464463, "phrase": "entire_re-compilation"}, {"score": 0.0035648266669315943, "phrase": "new_functionalities"}, {"score": 0.0034264854489231148, "phrase": "new_design_pattern"}, {"score": 0.003128270147867462, "phrase": "proposed_pattern"}, {"score": 0.0030791137853734152, "phrase": "first-class_entities"}, {"score": 0.002913052619634697, "phrase": "significant_contribution"}, {"score": 0.0028334016912935165, "phrase": "role_and_component_concepts"}, {"score": 0.0027559226203857316, "phrase": "functional_aspects"}, {"score": 0.0027233675070644026, "phrase": "target_software_program"}, {"score": 0.0026594033724490172, "phrase": "functional_units"}, {"score": 0.0025866699249916508, "phrase": "physical_distribution"}, {"score": 0.002566255769251419, "phrase": "code_elements"}, {"score": 0.002546002312015341, "phrase": "limited_build-level_dependencies"}, {"score": 0.002418185868191525, "phrase": "software_program"}, {"score": 0.0023896108055582615, "phrase": "generic_main_program"}, {"score": 0.0023520340492933383, "phrase": "description_file"}, {"score": 0.002324238863944163, "phrase": "software_functionalities"}, {"score": 0.0022967713922705, "phrase": "related_code_elements"}, {"score": 0.0021901023885734, "phrase": "regardless_the_specificity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Design pattern", " Dynamic composition", " Collaboration", " Role", " Component", " Medical software"], "paper_abstract": "One of the challenges in software development regards the appropriate coupling of separated code elements in order to correctly build initially expected high-level software functionalities. In this context, we address issues related to the dynamic composition of such code elements (i.e. how they are dynamically plugged together) as well as their collaboration (i.e. how they work together). We also consider the limitation of build-level dependencies, to avoid the entire re-compilation and re-deployment of a software when modifying it or integrating new functionalities. To solve these issues, we propose a new design pattern coupling role and component concepts and illustrate its relevance for medical software. Compared to most related works focusing on few role concepts while ignoring others, the proposed pattern integrates many role concepts as first-class entities, including in particular a refinement of the notion of collaboration. Another significant contribution of our proposal concerns the coupling of role and component concepts. Roles are related to the functional aspects of a target software program (composition and collaboration of functional units). Components correspond to the physical distribution of code elements with limited build-level dependencies. As illustrated in this paper, such a coupling enables to instantiate a software program using a generic main program together with a description file focusing on software functionalities only. Related code elements are transparently retrieved and composed at run-time before appropriately collaborating, regardless the specificity of their distribution over components. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "A design pattern coupling role and component concepts: Application to medical software", "paper_id": "WOS:000289179300012"}