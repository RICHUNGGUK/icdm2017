{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_and_memory-efficient_algorithm"}, {"score": 0.00407161650109722, "phrase": "important_applications"}, {"score": 0.003975200317233532, "phrase": "data_compression"}, {"score": 0.003789137457228946, "phrase": "string_matching"}, {"score": 0.0034016119212097826, "phrase": "previous_specialized_approaches"}, {"score": 0.0032036590920314725, "phrase": "degenerate_inputs"}, {"score": 0.0030904433394138963, "phrase": "input_size"}, {"score": 0.0023451553255837317, "phrase": "stable_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["suffix arrays", " Burrows-Wheeler transform"], "paper_abstract": "We propose a fast and memory-efficient algorithm for lexicographically sorting the suffixes of a string, a problem that has important applications in data compression as well as string matching. Our algorithm eliminates much of the overhead of previous specialized approaches while maintaining their robustness for degenerate inputs. For input size n, our algorithm operates in only two integer arrays of size n, and has worst-case time complexity O(n log n). We demonstrate experimentally that our algorithm has stable performance compared with other approaches. (c) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Faster suffix sorting", "paper_id": "WOS:000251280800007"}