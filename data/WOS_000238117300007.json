{"auto_keywords": [{"score": 0.04305155173647726, "phrase": "range"}, {"score": 0.025772935332109604, "phrase": "range_constraint"}, {"score": 0.00481495049065317, "phrase": "simple_declarative_language"}, {"score": 0.0046394362688524475, "phrase": "wide_range"}, {"score": 0.0034793681036226023, "phrase": "roots"}, {"score": 0.003199345207727474, "phrase": "particular_values"}, {"score": 0.0030257422786589723, "phrase": "specification_language"}, {"score": 0.0028350413546400703, "phrase": "range_and_roots_constraints"}, {"score": 0.002331909406363425, "phrase": "efficient_algorithm"}, {"score": 0.0021049977753042253, "phrase": "global_counting"}], "paper_keywords": [""], "paper_abstract": "We recently proposed a simple declarative language for specifying a wide range of counting and occurrence constraints. The language uses just two global primitives: the RANGE constraint, which computes the range of values used by a set of variables, and the ROOTS constraint, which computes the variables mapping onto particular values. In order for this specification language to be executable, propagation algorithms for the RANGE and ROOTS constraints should be developed. In this paper, we focus on the study of the RANGE constraint. We propose an efficient algorithm for propagating the RANGE constraint. We also show that decomposing global counting and occurrence constraints using RANGE is effective and efficient in practice.", "paper_title": "The Range constraint: Algorithms and implementation", "paper_id": "WOS:000238117300007"}