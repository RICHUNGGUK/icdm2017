{"auto_keywords": [{"score": 0.02817226709589537, "phrase": "memory_footprint"}, {"score": 0.025054186372177253, "phrase": "camel"}, {"score": 0.00481495049065317, "phrase": "continuous_progress"}, {"score": 0.003959863717046575, "phrase": "exascale_machine"}, {"score": 0.0038556354709511818, "phrase": "fault_tolerance"}, {"score": 0.003804550737731054, "phrase": "major_challenge"}, {"score": 0.0035908627899097407, "phrase": "unprecedented_number"}, {"score": 0.0034963129868796033, "phrase": "extreme_scale"}, {"score": 0.003434662174045939, "phrase": "small_mean-time"}, {"score": 0.003299880298525127, "phrase": "today's_machines"}, {"score": 0.003073154478201771, "phrase": "message-logging_techniques"}, {"score": 0.002824005136794786, "phrase": "recovery_time"}, {"score": 0.0027741761880779535, "phrase": "substantial_amount"}, {"score": 0.002689076130099546, "phrase": "message_logging"}, {"score": 0.00260657976055413, "phrase": "unsustainable_levels"}, {"score": 0.0024930878032164757, "phrase": "memory_pressure"}, {"score": 0.002470987929071079, "phrase": "message-logging_protocols"}, {"score": 0.00241658945942583, "phrase": "necessary_messages"}, {"score": 0.0023951660734372877, "phrase": "collective-communication_operations"}, {"score": 0.0022806798371116698, "phrase": "low_memory_overhead"}, {"score": 0.0022604585778195152, "phrase": "multicast_and_reduction_operations"}, {"score": 0.002142832962924139, "phrase": "molecular_dynamics_benchmark"}], "paper_keywords": ["Fault tolerance", " Resilience", " Message logging", " Collective-communication operations"], "paper_abstract": "The continuous progress in the performance of supercomputers has made possible the understanding of many fundamental problems in science. Simulation, the third scientific pillar, constantly demands more powerful machines to use algorithms that would otherwise be unviable. That will inevitably lead to the deployment of an exascale machine during the next decade. However, fault tolerance is a major challenge that has to be overcome to make such a machine usable. With an unprecedented number of parts, machines at extreme scale will have a small mean-time-between-failures. The popular checkpoint/restart mechanism used in today's machines may not be effective at that scale. One promising way to revamp checkpoint/restart is to use message-logging techniques. By storing messages during execution and replaying them in case of a failure, message logging is able to shorten recovery time and save a substantial amount of energy. The downside of message logging is that memory footprint may grow to unsustainable levels. This paper presents a technique that decreases the memory pressure in message-logging protocols by only storing the necessary messages in collective-communication operations. We introduce Camel, a protocol that has a low memory overhead for multicast and reduction operations. Our results show that Camel can reduce memory footprint in a molecular dynamics benchmark for more than 95 % on 16,384 cores.", "paper_title": "CAMEL: collective-aware message logging", "paper_id": "WOS:000357345600009"}