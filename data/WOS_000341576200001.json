{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "vertex"}, {"score": 0.011068025779582548, "phrase": "g."}, {"score": 0.008118924943362924, "phrase": "ca"}, {"score": 0.005994826066744485, "phrase": "proceedings"}, {"score": 0.004721529233535422, "phrase": "old_techniques."}, {"score": 0.004322967486451877, "phrase": "graph_h"}, {"score": 0.004036289523702633, "phrase": "low_congestion"}, {"score": 0.003731774879299358, "phrase": "\"simple\"_graph"}, {"score": 0.003611751858608048, "phrase": "convex_combination"}, {"score": 0.0035882128312414046, "phrase": "simple_graphs"}, {"score": 0.003450154514800989, "phrase": "computer_science"}, {"score": 0.0034276650497743603, "phrase": "ieee_computer_society"}, {"score": 0.003405321679000047, "phrase": "los_alamitos"}, {"score": 0.003320225414607342, "phrase": "leighton"}, {"score": 0.003291857389159755, "phrase": "acm"}, {"score": 0.0032746804232527253, "phrase": "moitra"}, {"score": 0.0031277316566463978, "phrase": "new_york"}, {"score": 0.003007337114346301, "phrase": "efficient_algorithms"}, {"score": 0.0027984877593293786, "phrase": "k_vertical_bar"}, {"score": 0.0025285202557857323, "phrase": "planar_graph"}, {"score": 0.002471248834609488, "phrase": "planar_graphs"}, {"score": 0.0024152714799789547, "phrase": "constant_factor"}, {"score": 0.002352844633115289, "phrase": "new_algorithm"}, {"score": 0.002167949230651206, "phrase": "minor-closed_families"}, {"score": 0.002118827457244586, "phrase": "improved_approximation_guarantees"}], "paper_keywords": ["approximation algorithms", " vertex sparsifier", " 0-extensions", " planar graphs", " graph minors", " flow sparsifier", " multicommodity flow", " metric decomposition"], "paper_abstract": "Given a capacitated graph G - (V, E) and a set of terminals K subset of V, how should we produce a graph H only on the terminals K so that every (multicommodity) flow between the terminals in C could be supported in H with low congestion, and vice versa? (Such a graph H is called a flow sparsifier for G.) What if we want H to be a \"simple\" graph? What if we allow H to be a convex combination of simple graphs? Improving on results of Moitra [Proceedings of the 50th IEEE Symposium on Foundations of Computer Science, IEEE Computer Society, Los Alamitos, CA, 2009, pp. 3-12] and Leighton and Moitra [Proceedings of the 42nd ACM Symposium on Theory of Computing, ACM, New York, 2010, pp. 47-56], we give efficient algorithms for constructing (a) a flow sparsifier H that maintains congestion up to a factor of O(log k/log log k), where k = vertical bar K vertical bar; (b) a convex combination of trees over the terminals K that maintains congestion up to a factor of O(log k); (c) for a planar graph G, a convex combination of planar graphs that maintains congestion up to a constant factor. This requires us to give a new algorithm for the 0-extension problem, the first one in which the preimages of each terminal are connected in G. Moreover, this result extends to minor-closed families of graphs. Our bounds immediately imply improved approximation guarantees for several terminal-based cut and ordering problems.", "paper_title": "VERTEX SPARSIFIERS: NEW RESULTS FROM OLD TECHNIQUES", "paper_id": "WOS:000341576200001"}