{"auto_keywords": [{"score": 0.0492906961612157, "phrase": "multi-task_environment"}, {"score": 0.0403859758180314, "phrase": "mrsu"}, {"score": 0.0048150405939747735, "phrase": "spm"}, {"score": 0.004304271837157217, "phrase": "contemporary_embedded_processor"}, {"score": 0.004233347974930148, "phrase": "physically_addressed_spm"}, {"score": 0.004180919839686364, "phrase": "virtual_space"}, {"score": 0.004077995480957875, "phrase": "integrated_memory_management_unit"}, {"score": 0.00396110232316167, "phrase": "mass-count_disparity"}, {"score": 0.0038796562792487, "phrase": "hardware_memory_reference_sampling_unit"}, {"score": 0.003768426876815755, "phrase": "memory_reference_stream"}, {"score": 0.003690927840780375, "phrase": "captured_address"}, {"score": 0.003585089792133518, "phrase": "memory_addresses"}, {"score": 0.00352597432462803, "phrase": "frequently_referenced_memory_block"}, {"score": 0.003482276061796395, "phrase": "hardware_interruption"}, {"score": 0.003354393040689453, "phrase": "identified_frequently_accessed_memory_block"}, {"score": 0.003285380677401785, "phrase": "spm_space"}, {"score": 0.0031647054743284947, "phrase": "page_table"}, {"score": 0.0031125001790084936, "phrase": "follow-up_memory_accesses"}, {"score": 0.002805121439110729, "phrase": "spm_management"}, {"score": 0.0027020387992490367, "phrase": "real-time_operating_system"}, {"score": 0.002559775585192185, "phrase": "memory_accesses"}, {"score": 0.002496659907186784, "phrase": "static_analysis"}, {"score": 0.0023750478314945303, "phrase": "tiny_rtos"}, {"score": 0.00235536166148219, "phrase": "preemptive_scheduling"}, {"score": 0.002335838283092986, "phrase": "experimental_results"}, {"score": 0.002259346051668556, "phrase": "energy_consumption"}, {"score": 0.002158233639156015, "phrase": "cache-only_reference_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Scratchpad memory", " Multi-task system", " Virtual memory", " Embedded processor"], "paper_abstract": "In this paper, we present a dynamic and adaptive scratchpad memory (SPM) management strategy targeting a multi-task environment. It can be applied to a contemporary embedded processor that maps the physically addressed SPM into a virtual space with the help of an integrated memory management unit (MMU). Based on mass-count disparity, we introduce a hardware memory reference sampling unit (MRSU) that samples the memory reference stream with very low probability. The captured address is considered as one of the memory addresses contained in a frequently referenced memory block. A hardware interruption is generated by the MRSU, and the identified frequently accessed memory block is placed into the SPM space by software. The software also modifies the page table so that the follow-up memory accesses to the memory block will be redirected to the SPM. With no dependence on compiler and profiling information, our proposed strategy is specifically adequate for SPM management in a multi-task environment. In such an environment, a real-time operating system (RTOS) is usually hosted, and the behavior of the memory accesses cannot be predicted by static analysis or profiling. We evaluate our SPM allocation strategy by running several tasks on a tiny RTOS with preemptive scheduling. Experimental results show that our approach can achieve 10% reduction in energy consumption on average, with 1% performance degradation at runtime compared with a cache-only reference system. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic and adaptive SPM management for a multi-task environment", "paper_id": "WOS:000287889900001"}