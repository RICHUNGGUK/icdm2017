{"auto_keywords": [{"score": 0.044728827124546816, "phrase": "jvm"}, {"score": 0.004744437370338926, "phrase": "dynamic_analysis_tools"}, {"score": 0.004185108816866677, "phrase": "performing_instrumentation"}, {"score": 0.003945117054416623, "phrase": "existing_frameworks"}, {"score": 0.00388729255686046, "phrase": "limited_coverage"}, {"score": 0.003830312347175889, "phrase": "poor_isolation"}, {"score": 0.0037463983616303786, "phrase": "previous_work"}, {"score": 0.0036373553416391823, "phrase": "apparently_innocuous_instrumentation"}, {"score": 0.003428665921276366, "phrase": "observed_application"}, {"score": 0.003304339421246321, "phrase": "shadowvm"}, {"score": 0.0031845067058084613, "phrase": "instrumentation-based_dynamic_analyses"}, {"score": 0.0026084451971464845, "phrase": "separate_process"}, {"score": 0.0024768883044869023, "phrase": "first_system"}, {"score": 0.002422552850701705, "phrase": "genuinely_full_bytecode_coverage"}, {"score": 0.002369406874318667, "phrase": "jvm."}, {"score": 0.0023003498123420237, "phrase": "working_implementation"}, {"score": 0.0022168460543913787, "phrase": "case_study"}], "paper_keywords": ["Dynamic analysis", " JVM", " instrumentation"], "paper_abstract": "Dynamic analysis tools are often implemented using instrumentation, particularly on managed runtimes including the Java Virtual Machine (JVM). Performing instrumentation robustly is especially complex on such runtimes: existing frameworks offer limited coverage and poor isolation, while previous work has shown that apparently innocuous instrumentation can cause deadlocks or crashes in the observed application. This paper describes ShadowVM, a system for instrumentation-based dynamic analyses on the JVM which combines a number of techniques to greatly improve both isolation and coverage. These centre on the offload of analysis to a separate process; we believe our design is the first system to enable genuinely full bytecode coverage on the JVM. We describe a working implementation, and use a case study to demonstrate its improved coverage and to evaluate its runtime overhead.", "paper_title": "ShadowVM: Robust and Comprehensive Dynamic Program Analysis for the Java Platform", "paper_id": "WOS:000338625500013"}