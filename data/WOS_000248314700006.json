{"auto_keywords": [{"score": 0.03311990226198299, "phrase": "parallel_disks"}, {"score": 0.00481495049065317, "phrase": "parallel-disk-based_systems"}, {"score": 0.0046781613377273774, "phrase": "major_contributor"}, {"score": 0.004648292940755605, "phrase": "overall_power_consumption"}, {"score": 0.004618614357974438, "phrase": "high-end_parallel_systems"}, {"score": 0.004416079619543104, "phrase": "idle_periods"}, {"score": 0.004155283263388382, "phrase": "common_drawback"}, {"score": 0.004076157223660074, "phrase": "reactive_manner"}, {"score": 0.003998531873723384, "phrase": "disk_power"}, {"score": 0.0038973170902076707, "phrase": "idle_and_active_periods"}, {"score": 0.0038476708316022823, "phrase": "future_ones"}, {"score": 0.0036906305674695985, "phrase": "significant_performance_penalties"}, {"score": 0.0036203204049740575, "phrase": "idle_and_active_times"}, {"score": 0.0034725269588525534, "phrase": "compiler-driven_approach"}, {"score": 0.0034392837410790293, "phrase": "disk_power_consumption"}, {"score": 0.0034172979799535386, "phrase": "array-based_scientific_applications"}, {"score": 0.00334144503360907, "phrase": "proposed_approach"}, {"score": 0.0033200826267264383, "phrase": "disk_layout_information"}, {"score": 0.003215295260684715, "phrase": "disk_access_pattern"}, {"score": 0.002967526288858809, "phrase": "proactive_disk_power_management"}, {"score": 0.0028100102841877835, "phrase": "compiler-predicted_future_idle"}, {"score": 0.0026952068955816266, "phrase": "application_code"}, {"score": 0.0026438102161263567, "phrase": "idle_disk_periods"}, {"score": 0.002601727192945944, "phrase": "better_exploitation"}, {"score": 0.002585081657512565, "phrase": "available_power-saving_capabilities"}, {"score": 0.002527654365712841, "phrase": "optimizing_compiler"}, {"score": 0.002463579791780472, "phrase": "benchmark_codes"}, {"score": 0.002416589459425828, "phrase": "disk_power_simulator"}, {"score": 0.002370493290982407, "phrase": "compiler-driven_disk_power_management"}, {"score": 0.0023252743521788876, "phrase": "experimental_results"}, {"score": 0.0021528432044086044, "phrase": "optimal_savings"}, {"score": 0.0021049977753042253, "phrase": "integer_linear_programming"}], "paper_keywords": ["disk subsystem", " I/O traces", " optimizing compilers", " power-aware computing", " parallel I/O"], "paper_abstract": "Disk subsystem is known to be a major contributor to overall power consumption of high-end parallel systems. Past research proposed several architectural-level techniques to reduce disk power by taking advantage of idle periods experienced by disks. Although such techniques have been known to be effective in certain cases, they share a common drawback: They operate in a reactive manner, i.e., they control disk power by observing past disk activity (for example, idle and active periods) and estimating future ones. Consequently, they can miss opportunities for saving power and incur significant performance penalties due to inaccuracies in predicting idle and active times. Motivated by this observation, this paper proposes and evaluates a compiler-driven approach to reducing disk power consumption of array-based scientific applications executing on parallel architectures. The proposed approach exposes disk layout information to the compiler, allowing it to derive the disk access pattern, i.e., the order in which parallel disks are accessed. This paper demonstrates two uses of this information. First, we can implement proactive disk power management, i.e., we can select the most appropriate power-saving strategy and disk-preactivation strategy based on the compiler-predicted future idle and active periods of parallel disks. Second, we can restructure the application code to increase the length of idle disk periods, which leads to better exploitation of available power-saving capabilities. We implemented both these approaches within an optimizing compiler and tested their effectiveness using a set of benchmark codes from the Spec 2000 suite and a disk power simulator. Our results show that the compiler-driven disk power management is very promising. The experimental results also reveal that, although proactive disk power management is very effective, code restructuring for disk power achieves additional energy savings across all the benchmarks tested, and these savings are very close to optimal savings that can be obtained through an Integer Linear Programming (ILP)-based scheme.", "paper_title": "Compiler-directed energy optimization for parallel-disk-based systems", "paper_id": "WOS:000248314700006"}