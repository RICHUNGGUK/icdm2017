{"auto_keywords": [{"score": 0.03519805967499628, "phrase": "max"}, {"score": 0.022579447167715903, "phrase": "dst"}, {"score": 0.0064295165292828005, "phrase": "routing_tables"}, {"score": 0.0057322289512107055, "phrase": "lu_et_al"}, {"score": 0.00481495049065317, "phrase": "segment_tree_data_structure"}, {"score": 0.00476334344613564, "phrase": "dynamic_table_lookup_problems"}, {"score": 0.00471228691115201, "phrase": "proposed_dynamic_segment_tree"}, {"score": 0.004578783486828809, "phrase": "distinct_end_points"}, {"score": 0.00443308765153716, "phrase": "new_range_end_point_scheme"}, {"score": 0.004385555408850022, "phrase": "new_end_point_scheme"}, {"score": 0.004307459965946991, "phrase": "traditional_end_point_scheme"}, {"score": 0.0042004472903194616, "phrase": "balanced_binary_search_tree"}, {"score": 0.0038256426589560774, "phrase": "efficient_range"}, {"score": 0.003798231095121328, "phrase": "data_structure"}, {"score": 0.00374399358035391, "phrase": "priority_queue"}, {"score": 0.0037038224217016817, "phrase": "interval_tree"}, {"score": 0.003637822529522622, "phrase": "proposed_data_structures"}, {"score": 0.003598786417573615, "phrase": "time_complexities"}, {"score": 0.0034467717443162015, "phrase": "n_arbitrary_ranges"}, {"score": 0.0031164983132321417, "phrase": "maximum_number"}, {"score": 0.003028067500715357, "phrase": "practical_routing_tables"}, {"score": 0.00284837132359445, "phrase": "memory_requirement"}, {"score": 0.0027675275077806744, "phrase": "experimental_results"}, {"score": 0.002747676657869163, "phrase": "real_internet_protocol_version"}, {"score": 0.0025021765811679446, "phrase": "multiway_range_tree"}, {"score": 0.00245753647863636, "phrase": "warkhede_et_al"}, {"score": 0.0022785613865764923, "phrase": "update_speed"}, {"score": 0.002262209824105154, "phrase": "memory_consumption"}, {"score": 0.002197966048531954, "phrase": "pbob"}, {"score": 0.002135542806459067, "phrase": "pibt"}, {"score": 0.0021049977753042253, "phrase": "search_speed"}], "paper_keywords": ["segment tree", " elementary intervals", " B-trees", " dynamic routing tables"], "paper_abstract": "In this paper, we develop a segment tree data structure for solving dynamic table lookup problems. The proposed dynamic segment tree (DST) uses all of the distinct end points of ranges as the keys based on a new range end point scheme. The new end point scheme generates fewer end points than the traditional end point scheme. DST is implemented as a balanced binary search tree augmented with a range set in each node. The performance of accessing and updating the ranges stored in each node is improved by an efficient range set data structure that combines the priority queue and the interval tree. Based on the proposed data structures, the time complexities of search, insertion, and deletion in a set of N arbitrary ranges are O(logN), O(log N x log Max), and O(Alfax x log N x log Max), respectively, where Max is the maximum number of ranges covering any address. In practical routing tables, Max is a small constant (six for the routing tables we tested). The memory requirement for DST is O(N log N). The experimental results using real Internet Protocol version 4 (IPv4) routing tables show that both the DST and prefix binary tree on binary tree (PBOB) by Lu et al. (2004) perform much better than the multiway range tree (MRT) by Warkhede et al. (2004) and prefix in B-tree (PIBT) by Lu et al. (2005) in terms of update speed and memory consumption, but DST performs much better than PBOB and a little slower than MRT and PIBT in terms of search speed.", "paper_title": "Dynamic segment trees for ranges and prefixes", "paper_id": "WOS:000246477600005"}