{"auto_keywords": [{"score": 0.05007326307775766, "phrase": "oblivious_hashing"}, {"score": 0.04931727328027492, "phrase": "java"}, {"score": 0.004662913362513954, "phrase": "java_programs"}, {"score": 0.00437302709192313, "phrase": "unknown_environments"}, {"score": 0.004234884779773412, "phrase": "java_code"}, {"score": 0.004167451906343558, "phrase": "malicious_modification"}, {"score": 0.004068302313449334, "phrase": "important_issue"}, {"score": 0.003876996400581697, "phrase": "tamper-proofing_software_technology"}, {"score": 0.0037244390953401533, "phrase": "stack-machine_based_languages"}, {"score": 0.003301733505307784, "phrase": "new_dynamic_stack-tracing_approach"}, {"score": 0.0029034358982402346, "phrase": "program_running"}, {"score": 0.002512342528545883, "phrase": "-proof_program"}, {"score": 0.0024524733595572084, "phrase": "protective_codes"}, {"score": 0.002374855916752648, "phrase": "basic_blocks"}, {"score": 0.0023182554418193927, "phrase": "bytecode_level"}, {"score": 0.0022268964676199292, "phrase": "new_approach"}, {"score": 0.0021049977753042253, "phrase": "alternative_hashing_functions"}], "paper_keywords": ["tamper-proofing", " Oblivious Hashing", " basis paths", " Java"], "paper_abstract": "Java programs are often downloaded (distributed) to unknown environments, so protect Java code from malicious modification is an important issue. This paper presents a tamper-proofing software technology on basis paths for stack-machine based languages, such as Java, by improving Oblivious Hashing. Our approach is based on a new dynamic stack-tracing approach which inserts hash instructions to monitor the top of the stack to check whether the program running has been tampered with or not. A user can choose one or more methods in a class to tamper-proof program. The protective codes are added to basic blocks at the bytecode level. We developed a new approach to protect constants and variables by alternative hashing functions. The overhead is proportional to the number of Load and Push instructions to be protected.", "paper_title": "Tamper-proofing basis path by using Oblivious Hashing on Java", "paper_id": "WOS:000253407900001"}