{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "exponential_search_trees"}, {"score": 0.004627944735913613, "phrase": "novel_technique"}, {"score": 0.004550029253278477, "phrase": "static_polynomial_space_search_structures"}, {"score": 0.004423061344624088, "phrase": "fully-dynamic_linear_space_data_structures"}, {"score": 0.004275347843870176, "phrase": "optimal_bound"}, {"score": 0.004039995317682942, "phrase": "dynamic_set_x"}, {"score": 0.00399449659126893, "phrase": "n_integer_keys"}, {"score": 0.003949508242904001, "phrase": "linear_space"}, {"score": 0.003817548980308163, "phrase": "integer_y"}, {"score": 0.0037320255482878365, "phrase": "maximum_key"}, {"score": 0.0033893426032054366, "phrase": "standard_text_book_problem"}, {"score": 0.003313380246267812, "phrase": "ordered_set"}, {"score": 0.0032575241721857343, "phrase": "best_previous_deterministic_linear_space"}, {"score": 0.0031308214465615453, "phrase": "fredman"}, {"score": 0.003095527316015852, "phrase": "willard"}, {"score": 0.0029920129598858545, "phrase": "deterministic_search"}, {"score": 0.0029083942467546305, "phrase": "polynomial_space"}, {"score": 0.0027017308406240563, "phrase": "word_length_w"}, {"score": 0.0026411384812121503, "phrase": "maximal_key_u"}, {"score": 0.0021049977753042253, "phrase": "optimal_results"}], "paper_keywords": ["algorithms", " theory", " search trees", " ordered lists"], "paper_abstract": "We introduce exponential search trees as a novel technique for converting static polynomial space search structures for ordered sets into fully-dynamic linear space data structures. This leads to an optimal bound of O(root log n/log log n) for searching and updating a dynamic set X of n integer keys in linear space. Searching X for an integer y means finding the maximum key in \" which is smaller than or equal to y. This problem is equivalent to the standard text book problem of maintaining an ordered set. The best previous deterministic linear space bound was O(log n/ log log H) due to Fredman and Willard from STOC 1990. No better deterministic search bound was known using polynomial space. We also get the following worst-case linear space trade-offs between the number n, the word length W, and the maximal key U < 2(W): O(min{log log n + log n/ log W, log log n . log log U/ log log log U}) These trade-offs are, however, not likely to be optimal. Our results are generalized to finger searching and string searching, providing optimal results for both in terms of n.", "paper_title": "Dynamic ordered sets with exponential search trees", "paper_id": "WOS:000247980500003"}