{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service-oriented_architecture"}, {"score": 0.004612662942073808, "phrase": "wrapper_code_generators"}, {"score": 0.00441883624011048, "phrase": "effective_wrapper_program_construction_facility"}, {"score": 0.0039055990919333082, "phrase": "web_service"}, {"score": 0.003526735797659508, "phrase": "wrapper_library_component"}, {"score": 0.0034148795808317555, "phrase": "wrapper_generator_system"}, {"score": 0.003306559295382181, "phrase": "inductive_learning_algorithms"}, {"score": 0.0032536902910768957, "phrase": "information_flow"}, {"score": 0.0032189132350239013, "phrase": "data_extraction_patterns"}, {"score": 0.0031504667809625344, "phrase": "sample_pages"}, {"score": 0.0031167895790050405, "phrase": "sample_specifications"}, {"score": 0.002985631781749091, "phrase": "declarative_rule-based_script_language"}, {"score": 0.0028446460307503343, "phrase": "clean_separation"}, {"score": 0.0027991418754844347, "phrase": "information_extraction_semantics"}, {"score": 0.0027543636132088332, "phrase": "information_flow_control"}, {"score": 0.002724909017963099, "phrase": "execution_logic"}, {"score": 0.002695768552609587, "phrase": "wrapper_programs"}, {"score": 0.0026242699269026204, "phrase": "design_principles"}, {"score": 0.0025409639091476363, "phrase": "xwrapcomposer_toolkit"}, {"score": 0.0024339783012484032, "phrase": "wsdl-enabled_wrapper_programs"}, {"score": 0.0023189818169615135, "phrase": "multipage_data_extraction"}, {"score": 0.0022574539115388054, "phrase": "bioinformatics_applications"}, {"score": 0.002162379426839795, "phrase": "xwrapcomposer"}], "paper_keywords": ["code generator", " data extraction", " service oriented architecture", " Web services"], "paper_abstract": "We present a service-oriented architecture and a set of techniques for developing wrapper code generators, including the methodology of designing an effective wrapper program construction facility and a concrete implementation, called XWRAPComposer Our wrapper generation framework has two unique design goals. First, we explicitly separate tasks of building wrappers that are specific to a Web service from the tasks that are repetitive for any service, thus the code can be generated as a wrapper library component and reused automatically by the wrapper generator system. Second, we use inductive learning algorithms that derive information flow and data extraction patterns by reasoning about sample pages or sample specifications. More importantly, we design a declarative rule-based script language for multi page information extraction, encouraging a clean separation of the information extraction semantics from the information flow control and execution logic of wrapper programs. We implement these design principles with the development of the XWRAPComposer toolkit, which can semi-automatically generate WSDL-enabled wrapper programs. We illustrate the problems and challenges of multipage data extraction in the context of bioinformatics applications and evaluate the design and development of XWRAPComposer through our experiences of integrating various BLAST services.", "paper_title": "XWRAPComposer: A multi-page data extraction service", "paper_id": "WOS:000240951700003"}