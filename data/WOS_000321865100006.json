{"auto_keywords": [{"score": 0.029650897032680288, "phrase": "lucas"}, {"score": 0.00481495049065317, "phrase": "unified_cluster_assignment"}, {"score": 0.0047006879240764935, "phrase": "clustered_vliw_architectures"}, {"score": 0.004611224230543916, "phrase": "wide-issue_architectures"}, {"score": 0.004480196733208298, "phrase": "wide-issue_processors"}, {"score": 0.00429057323623293, "phrase": "clustered_designs"}, {"score": 0.0038600230206554792, "phrase": "state-of-the-art_code_generation"}, {"score": 0.003696550794743764, "phrase": "instruction_scheduling"}, {"score": 0.003643607569483598, "phrase": "single_unified_pass"}, {"score": 0.0035399770257915466, "phrase": "generated_code"}, {"score": 0.0033900126423990823, "phrase": "inter-cluster_communication_latency"}, {"score": 0.0030790429005600898, "phrase": "low_inter-cluster_latencies"}, {"score": 0.0028923335491735564, "phrase": "high_latencies"}, {"score": 0.0025767987652419054, "phrase": "inter-cluster_latency"}, {"score": 0.0023857603808363527, "phrase": "hybrid_scheme"}, {"score": 0.0023515464194592195, "phrase": "fine-grain_switching"}, {"score": 0.002125371638869951, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "inter-cluster_latency_values"}], "paper_keywords": ["Algorithms", " Experimentation", " Performance", " Cluster Assignment", " Instruction Scheduling", " Clustered VLIW"], "paper_abstract": "Clustered VLIW architectures are statically scheduled wide-issue architectures that combine the advantages of wide-issue processors along with the power and frequency scalability of clustered designs. Being statically scheduled, they require that the decision of mapping instructions to clusters be done by the compiler. State-of-the-art code generation for such architectures combines cluster-assignment and instruction scheduling in a single unified pass. The performance of the generated code, however, is very susceptible to the inter-cluster communication latency. This is due to the nature of the two clustering heuristics used. One is aggressive and works well for low inter-cluster latencies, while the other is more conservative and works well only for high latencies. In this paper we propose LUCAS, a novel unified cluster-assignment and instruction-scheduling algorithm that adapts to the inter-cluster latency better than the existing state-of-the-art schemes. LUCAS is a hybrid scheme that performs fine-grain switching between the two state-of-the-art clustering heuristics, leading to better scheduling than either of them. It generates better performing code for a wide range of inter-cluster latency values.", "paper_title": "LUCAS: Latency-adaptive Unified Cluster Assignment and instruction Scheduling", "paper_id": "WOS:000321865100006"}