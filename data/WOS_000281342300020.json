{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "controlled_flexibility"}, {"score": 0.04974351188371698, "phrase": "software_processes"}, {"score": 0.007881499948177623, "phrase": "process_engineer"}, {"score": 0.007451623247654637, "phrase": "process_models"}, {"score": 0.004714448392640623, "phrase": "corresponding_models"}, {"score": 0.004681413843223496, "phrase": "dynamic_entities"}, {"score": 0.004551563730037998, "phrase": "skillful_knowledge_workers"}, {"score": 0.0044408896450445125, "phrase": "software_development_team"}, {"score": 0.004378854464130883, "phrase": "process_flexibility"}, {"score": 0.004153810449519519, "phrase": "process_modelling_languages"}, {"score": 0.0039264465913491356, "phrase": "everyday_practice"}, {"score": 0.0038444185258456245, "phrase": "total_flexibility"}, {"score": 0.003410822685334396, "phrase": "software_process"}, {"score": 0.0033395304916220086, "phrase": "preferred_vehicle"}, {"score": 0.0030366573271799406, "phrase": "enhanced_pml"}, {"score": 0.0029731625157696845, "phrase": "sound_core_set"}, {"score": 0.002890557197908352, "phrase": "knowledge_domain"}, {"score": 0.0027034263575471352, "phrase": "concept_maps"}, {"score": 0.0025194861926779223, "phrase": "proposed_cmaps"}, {"score": 0.002415170557932468, "phrase": "modelling_constructs"}, {"score": 0.0023563212280243682, "phrase": "process_engineers"}, {"score": 0.0022747238867190417, "phrase": "process_model"}, {"score": 0.002157583854640276, "phrase": "related_instances"}, {"score": 0.002142426911242168, "phrase": "software_team_members"}, {"score": 0.0021049977753042253, "phrase": "controlled_flexibility_information"}], "paper_keywords": ["software processes", " modelling", " flexibility", " control"], "paper_abstract": "Software processes and corresponding models are dynamic entities that are often changed and evolved by skillful knowledge workers such as the members of a software development team. Consequently, process flexibility has been identified as one of the most important features that should be supported by both Process Modelling Languages (PMLs) and software tools that manage the processes. However, in the everyday practice, most software team members do not want total flexibility. They rather prefer to have controlled flexibility, i.e., to learn and follow advices previously modelled by a process engineer on which and how they can change the elements that compose a software process. Since process models constitute a preferred vehicle for sharing and communicating knowledge on software processes, the process engineer needs a PML that can express this controlled flexibility, along with other process perspectives. To achieve this enhanced PML, we first need a sound core set of concepts and relationships that defines the knowledge domain associated with the modelling of controlled flexibility. In this paper we capture and represent this domain by using Concept Maps (Cmaps). These include diagrams and descriptions that elicit the relationships between the concepts involved. The proposed Cmaps can then be used as input to extend a PML with modelling constructs to express controlled flexibility within software processes. Process engineers can use these constructs to define, in a process model, advices on changes that can be made to the model itself or to related instances. Software team members can then consult this controlled flexibility information within the process models and perform changes accordingly.", "paper_title": "Concept Maps for the Modelling of Controlled Flexibility in Software Processes", "paper_id": "WOS:000281342300020"}