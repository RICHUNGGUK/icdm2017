{"auto_keywords": [{"score": 0.035285873941248234, "phrase": "modeling_languages"}, {"score": 0.00481495049065317, "phrase": "model-driven_engineering"}, {"score": 0.004653485665080485, "phrase": "relevant_aspects"}, {"score": 0.004480394224548146, "phrase": "final_application"}, {"score": 0.004330099613414957, "phrase": "domain-specific_modeling_languages"}, {"score": 0.004059772950454586, "phrase": "increasing_complexity"}, {"score": 0.00393844255111604, "phrase": "abstraction_techniques"}, {"score": 0.003879138659123195, "phrase": "simpler_versions"}, {"score": 0.0036093704705869485, "phrase": "dsml"}, {"score": 0.003320277992107974, "phrase": "abstraction_mechanisms"}, {"score": 0.0031484483754909026, "phrase": "generic_programming"}, {"score": 0.0031246358910995316, "phrase": "domain-specific_meta-modeling"}, {"score": 0.0030775481952376987, "phrase": "generic_abstraction_operations"}, {"score": 0.0028525124381208705, "phrase": "similarity_criteria"}, {"score": 0.002830931833230673, "phrase": "model_elements"}, {"score": 0.0026843584448921565, "phrase": "particular_languages"}, {"score": 0.002643888053328987, "phrase": "annotation_models"}, {"score": 0.0025260919226344305, "phrase": "reusable_abstractions"}, {"score": 0.002497470177389344, "phrase": "proposed_techniques"}, {"score": 0.0024504843466435487, "phrase": "working_implementation"}, {"score": 0.0024227171881502636, "phrase": "metadepth_multi-level_meta-modeling_tool"}, {"score": 0.002305974875400655, "phrase": "reusable_and_adaptable_abstractions"}, {"score": 0.0022711961447468114, "phrase": "similar_abstractions"}, {"score": 0.0021782296784218923, "phrase": "new_or_existing_modeling_languages"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Model-driven engineering", " Domain-specific modeling languages", " Abstraction", " Genericity", " Domain-specific meta-modeling", " METADEPTH"], "paper_abstract": "Model-driven engineering proposes the use of models to describe the relevant aspects of the system to be built and synthesize the final application from them. Models are normally described using Domain-Specific Modeling Languages (DSMLs), which provide primitives and constructs of the domain. Still, the increasing complexity of systems has raised the need for abstraction techniques able to produce simpler versions of the models while retaining some properties of interest. The problem is that developing such abstractions for each DSML from scratch is time and resource consuming. In this paper, our goal is reducing the effort to provide modeling languages with abstraction mechanisms. For this purpose, we have devised some techniques, based on generic programming and domain-specific meta-modeling, to define generic abstraction operations that can be reused over families of modeling languages sharing certain characteristics. Abstractions can make use of clustering algorithms as similarity criteria for model elements. These algorithms can be made generic as well, and customized for particular languages by means of annotation models. As a result, we have developed a catalog of reusable abstractions using the proposed techniques, together with a working implementation in the METADEPTH multi-level meta-modeling tool. Our techniques and prototypes demonstrate that it is feasible to build reusable and adaptable abstractions, so that similar abstractions need not be developed from scratch, and their integration in new or existing modeling languages is less costly. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Reusable abstractions for modeling languages", "paper_id": "WOS:000326991300007"}