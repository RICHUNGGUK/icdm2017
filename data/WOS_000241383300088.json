{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gpu_tetrahedral_grid_rendering"}, {"score": 0.004635187610736025, "phrase": "graphics_hardware"}, {"score": 0.004462105963334103, "phrase": "tetrahedral_grids"}, {"score": 0.004413846562278824, "phrase": "interactive_rates"}, {"score": 0.004366106816225457, "phrase": "commodity_pcs"}, {"score": 0.004068087482412997, "phrase": "direct_volume_rendering_method"}, {"score": 0.003916098498242888, "phrase": "current_and_upcoming_graphics_hardware_architectures"}, {"score": 0.0037087324991876727, "phrase": "different_rendering_options"}, {"score": 0.0034180189629740426, "phrase": "tetrahedral_elements"}, {"score": 0.003362660648932247, "phrase": "view_rays"}, {"score": 0.003308195943172624, "phrase": "local_barycentric_coordinates"}, {"score": 0.003201890266327127, "phrase": "minimum_gpu_memory"}, {"score": 0.003167217223469026, "phrase": "texture_access"}, {"score": 0.0030157628075954588, "phrase": "feed-forward_pipeline"}, {"score": 0.0027943943921568456, "phrase": "rendered_elements"}, {"score": 0.00251966141432339, "phrase": "gpij."}, {"score": 0.002347378595930709, "phrase": "per-pixel_iso-surfaces"}, {"score": 0.0022967713922705, "phrase": "tetrahedral_cell_projection"}, {"score": 0.00217496508306238, "phrase": "intermediate_grid_representation"}], "paper_keywords": ["direct volume rendering", " unstructured grids", " programmable graphics hardware"], "paper_abstract": "Recent advances in algorithms and graphics hardware have opened the possibility to render tetrahedral grids at interactive rates on commodity PCs. This paper extends on this work in that it presents a direct volume rendering method for such grids which supports both current and upcoming graphics hardware architectures, large and deformable grids, as well as different rendering options. At the core of our method is the idea to perform the sampling of tetrahedral elements along the view rays entirely in local barycentric coordinates. Then, sampling requires minimum GPU memory and texture access operations, and it maps efficiently onto a feed-forward pipeline of multiple stages performing computation and geometry construction. We propose to spawn rendered elements from one single vertex. This makes the method amenable to upcoming Direct3D 10 graphics hardware which allows to create geometry on the GPIJ. By only modifying the algorithm slightly it can be used to render per-pixel iso-surfaces and to perform tetrahedral cell projection. As our method neither requires any pre-processing nor an intermediate grid representation it can efficiently deal with dynamic and large 3D meshes.", "paper_title": "A generic and scalable pipeline for GPU tetrahedral grid rendering", "paper_id": "WOS:000241383300088"}