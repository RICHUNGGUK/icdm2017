{"auto_keywords": [{"score": 0.044294032470466274, "phrase": "data_translation_step"}, {"score": 0.00481495049065317, "phrase": "automatic_parallel_code_generation"}, {"score": 0.004769444094319619, "phrase": "nufft_data_translation"}, {"score": 0.004058180509184539, "phrase": "automatic_parallel_code_generation_tool"}, {"score": 0.003962899903266524, "phrase": "emerging_multicores"}, {"score": 0.003906804492585634, "phrase": "key_components"}, {"score": 0.0034690732089830045, "phrase": "equally_sized_geometric_tiling"}, {"score": 0.0033875770020590796, "phrase": "data_locality"}, {"score": 0.0032302647179383915, "phrase": "dynamic_task_allocation"}, {"score": 0.003036595866130994, "phrase": "mutual_exclusion"}, {"score": 0.003007846011394511, "phrase": "data_updates"}, {"score": 0.002895535087931938, "phrase": "code_generator"}, {"score": 0.002854505078275351, "phrase": "code_optimizer"}, {"score": 0.0028140548269469934, "phrase": "data_translation"}, {"score": 0.0027218799769229596, "phrase": "commercial_multicore_machine"}, {"score": 0.002632716358833918, "phrase": "different_sample_distributions"}, {"score": 0.0026077803487003, "phrase": "large_data_set_sizes"}, {"score": 0.002522344964242888, "phrase": "parallelization_strategies"}, {"score": 0.0024984517279573906, "phrase": "good_scalability"}, {"score": 0.002359759876402679, "phrase": "data_space_increase"}, {"score": 0.0022933216359142736, "phrase": "target-driven_parallelization"}], "paper_keywords": ["Nonuniform FFT", " data translation", " convolution", " automatic parallelization", " code generation"], "paper_abstract": "The nonuniform FFT (NuFFT) is widely used in many applications. Focusing on the most time-consuming part of the NuFFT computation, the data translation step, in this paper, we develop an automatic parallel code generation tool for data translation targeting emerging multicores. The key components of this tool are two scalable parallelization strategies, namely, the source-driven parallelization and the target-driven parallelization. Both these strategies employ equally sized geometric tiling and binning to improve data locality while trying to balance workloads across the cores through dynamic task allocation. They differ in the partitioning and scheduling schemes used to guarantee mutual exclusion in data updates. This tool also consists of a code generator and a code optimizer for the data translation. We evaluated our tool on a commercial multicore machine for both 2D and 3D inputs under different sample distributions with large data set sizes. The results indicate that both parallelization strategies have good scalability as the number of cores and the number of dimensions of data space increase. In particular, the target-driven parallelization outperforms the other when samples are nonuniformly distributed. The experiments also show that our code optimizations can bring about 32%-43% performance improvement to the data translation step of NuFFT.", "paper_title": "AUTOMATIC PARALLEL CODE GENERATION FOR NUFFT DATA TRANSLATION ON MULTICORES", "paper_id": "WOS:000305249100005"}