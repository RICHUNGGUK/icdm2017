{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "basic_pattern"}, {"score": 0.0045122922461952805, "phrase": "first_author"}, {"score": 0.00420368356873615, "phrase": "fine-grained_modelling"}, {"score": 0.004154332348800334, "phrase": "non-strict_pattern_matching"}, {"score": 0.0038930368103015467, "phrase": "single_monad"}, {"score": 0.0036481158025940016, "phrase": "axiomatic_approach"}, {"score": 0.0029489527539649737, "phrase": "core_pmc_rules"}, {"score": 0.0028630535573013686, "phrase": "useful_tool"}, {"score": 0.0027796495180095657, "phrase": "design_space"}, {"score": 0.0027307746993761035, "phrase": "matching_calculi"}, {"score": 0.002651213849567608, "phrase": "maybe_monads"}, {"score": 0.0025892330566358503, "phrase": "standard_haskell_semantics"}, {"score": 0.0023694065215394593, "phrase": "denotational_semantics"}, {"score": 0.0023277282036119106, "phrase": "\"matching_failure"}, {"score": 0.0023003498123420237, "phrase": "exceptions\"_approach"}, {"score": 0.002273292707863821, "phrase": "erwig"}, {"score": 0.002246553137021003, "phrase": "peyton_jones"}, {"score": 0.0022070310530794097, "phrase": "list-like_monads"}, {"score": 0.0021682027434117095, "phrase": "interesting_extensions"}, {"score": 0.0021049977753042253, "phrase": "functional-logic_programming"}], "paper_keywords": [""], "paper_abstract": "The pattern matching calculi introduced by the first author are a refinement of the A-calculus that integrates mechanisms appropriate for fine-grained modelling of non-strict pattern matching. While related work in the literature only uses a single monad, typically Maybe, for matchings, we present an axiomatic approach to semantics of these pattern matching calculi using two monads, one for expressions and one for matchings. Although these two monads only need to be relatively lightly coupled, this semantics implies soundness of all core PMC rules, and is a useful tool for exploration of the design space for pattern matching calculi. Using lifting and Maybe monads, we obtain standard Haskell semantics, and by adding another level of Maybe to both, we obtain a denotational semantics of the \"matching failure as exceptions\" approach of Erwig and Peyton Jones. Using list-like monads opens up interesting extensions in the direction of functional-logic programming.", "paper_title": "Bimonadic semantics for basic pattern matching calculi", "paper_id": "WOS:000239422700016"}