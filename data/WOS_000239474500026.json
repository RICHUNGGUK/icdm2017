{"auto_keywords": [{"score": 0.05007564759062611, "phrase": "memory_faults"}, {"score": 0.004592016716046632, "phrase": "reliable_computation"}, {"score": 0.003983016985197904, "phrase": "optimal_time"}, {"score": 0.0038764861784138117, "phrase": "largest_possible_number"}, {"score": 0.0035494788628319903, "phrase": "time_sorting_algorithm"}, {"score": 0.0032279990773657215, "phrase": "special_case"}, {"score": 0.0031845067058084583, "phrase": "integer_sorting"}, {"score": 0.003036832649117453, "phrase": "linear_expected_running_time"}, {"score": 0.0028376361457661415, "phrase": "randomized_searching_algorithm"}, {"score": 0.0025630077791393125, "phrase": "expected_time"}, {"score": 0.002494361792853831, "phrase": "almost_optimal_deterministic_searching_algorithm"}, {"score": 0.0023148964315569866, "phrase": "small_positive_constant_c"}, {"score": 0.0021049977753042253, "phrase": "previous_bounds"}], "paper_keywords": [""], "paper_abstract": "We investigate the problem of reliable computation in the presence of faults that may arbitrarily corrupt memory locations. In this framework, we consider the problems of sorting and searching in optimal time while tolerating the largest possible number of memory faults. In particular, we design an O(n log n) time sorting algorithm that can optimally tolerate up to O(root n log n) memory faults. In the special case of integer sorting, we present an algorithm with linear expected running time that can tolerate O(root n) faults. We also present a randomized searching algorithm that can optimally tolerate up to O(root n log n) memory faults in O(log n) expected time, and an almost optimal deterministic searching algorithm that can tolerate O((log n)(1-epsilon)) faults, for any small positive constant c, in O(log n) worst-case time. All these results improve over previous bounds.", "paper_title": "Optimal resilient sorting and searching in the presence of memory faults", "paper_id": "WOS:000239474500026"}