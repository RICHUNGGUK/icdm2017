{"auto_keywords": [{"score": 0.0157200582469127, "phrase": "sql"}, {"score": 0.01551903368508464, "phrase": "internal_query_trees"}, {"score": 0.011630560478844585, "phrase": "query_tree"}, {"score": 0.011540879464134762, "phrase": "n-dimensional_feature_vector"}, {"score": 0.00868526683161568, "phrase": "experimental_results"}, {"score": 0.004715908063787721, "phrase": "sql_injection_attacks"}, {"score": 0.00460690715991423, "phrase": "database-driven_web_sites"}, {"score": 0.004488734023485018, "phrase": "sqlia_detection"}, {"score": 0.004430784015995566, "phrase": "structured_query_language"}, {"score": 0.0043509032299218955, "phrase": "application_level"}, {"score": 0.004195418010131832, "phrase": "already_stored_procedure"}, {"score": 0.004141238989360548, "phrase": "database_system"}, {"score": 0.003993216345115755, "phrase": "database_level"}, {"score": 0.00396218934254591, "phrase": "svm_classification"}, {"score": 0.003911010373894104, "phrase": "key_issue"}, {"score": 0.0038907236419588255, "phrase": "sqlia_detection_framework"}, {"score": 0.0038304902197108643, "phrase": "internal_query_tree"}, {"score": 0.0038007227625944653, "phrase": "database_log"}, {"score": 0.003771185758226876, "phrase": "svm_classification_algorithm"}, {"score": 0.0037224647319912293, "phrase": "good_performance"}, {"score": 0.003693533648584145, "phrase": "sqlias"}, {"score": 0.0035893566219063772, "phrase": "novel_method"}, {"score": 0.0034881076466982226, "phrase": "multi-dimensional_sequence"}, {"score": 0.0034609916645637288, "phrase": "intermediate_representation"}, {"score": 0.0032599633778910516, "phrase": "query_tree_structure"}, {"score": 0.0031679764228666144, "phrase": "syntactic_features"}, {"score": 0.0031188970263124546, "phrase": "semantic_features"}, {"score": 0.0030946423142739813, "phrase": "feature_vector"}, {"score": 0.003015143226706584, "phrase": "string_feature_values"}, {"score": 0.0029994894380575604, "phrase": "numeric_feature_values"}, {"score": 0.0029761605501582343, "phrase": "multiple_statistical_models"}, {"score": 0.002884640164372298, "phrase": "multiple_characteristic"}, {"score": 0.0028622019660721363, "phrase": "string_value"}, {"score": 0.0027814073943644344, "phrase": "practical_environments"}, {"score": 0.0027454383581457555, "phrase": "squa_detection_system"}, {"score": 0.002702887319160532, "phrase": "popular_open_source_database_system"}, {"score": 0.0026129394124798215, "phrase": "postgresql"}, {"score": 0.0024868131939261716, "phrase": "malicious_queries"}, {"score": 0.002448260697722081, "phrase": "sqlia"}, {"score": 0.0024040357029838774, "phrase": "normal_queries"}, {"score": 0.0023361440016375972, "phrase": "additional_experiments"}, {"score": 0.002305919776918934, "phrase": "syntax-focused_feature_extraction"}, {"score": 0.0022642601698943687, "phrase": "feature_transformation"}, {"score": 0.0021381565332182773, "phrase": "previous_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Intrusion detection", " SQL injection attack", " Database", " Data mining", " SVM"], "paper_abstract": "Detecting SQL injection attacks (SQLIAs) is becoming increasingly important in database-driven web sites. Until now, most of the studies on SQLIA detection have focused on the structured query language (SQL) structure at the application level. Unfortunately, this approach inevitably fails to detect those attacks that use already stored procedure and data within the database system. In this paper, we propose a framework to detect SQLIAs at database level by using SVM classification and various kernel functions. The key issue of SQLIA detection framework is how to represent the internal query tree collected from database log suitable for SVM classification algorithm in order to acquire good performance in detecting SQLIAs. To solve the issue, we first propose a novel method to convert the query tree into an n-dimensional feature vector by using a multi-dimensional sequence as an intermediate representation. The reason that it is difficult to directly convert the query tree into an n-dimensional feature vector is the complexity and variability of the query tree structure. Second, we propose a method to extract the syntactic features, as well as the semantic features when generating feature vector. Third, we propose a method to transform string feature values into numeric feature values, combining multiple statistical models. The combined model maps one string value to one numeric value by containing the multiple characteristic of each string value. In order to demonstrate the feasibility of our proposals in practical environments, we implement the SQUA detection system based on PostgreSQL, a popular open source database system, and we perform experiments. The experimental results using the internal query trees of PostgreSQL validate that our proposal is effective in detecting SQLIAs, with at least 99.6% of the probability that the probability for malicious queries to be correctly predicted as SQLIA is greater than the probability for normal queries to be incorrectly predicted as SQUA. Finally, we perform additional experiments to compare our proposal with syntax-focused feature extraction and single statistical model based on feature transformation. The experimental results show that our proposal significantly increases the probability of correctly detecting SQLIAs for various SQL statements, when compared to the previous methods. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Data-mining based SQL injection attack detection using internal query trees", "paper_id": "WOS:000336191800035"}