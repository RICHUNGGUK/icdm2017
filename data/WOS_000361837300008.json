{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "video_decoding_and_image_processing"}, {"score": 0.00455202992136173, "phrase": "strong_resource_constraints"}, {"score": 0.004101088357088207, "phrase": "static_priorities"}, {"score": 0.0037544644262310525, "phrase": "oft-cited_solutions"}, {"score": 0.003022465992278672, "phrase": "adequate_adjustment"}, {"score": 0.002974281028713475, "phrase": "task_priorities"}, {"score": 0.002857143106182505, "phrase": "insertion-based_policy"}, {"score": 0.0023940274498526213, "phrase": "required_memory_footprint"}, {"score": 0.0023369711258107244, "phrase": "classic_list-scheduling_heuristics"}, {"score": 0.0021049977753042253, "phrase": "dynamic_scheduling"}], "paper_keywords": ["Task graphs", " Scheduling", " Memory", " System on chip", " Video decoding"], "paper_abstract": "Video decoding and image processing in embedded systems are subject to strong resource constraints, particularly in terms of memory. List-scheduling heuristics with static priorities (HEFT, SDC, etc.) being the oft-cited solutions due to both their good performance and their low complexity, we propose a method aimed at introducing the notion of memory into them. Moreover, we show that through adequate adjustment of task priorities and judicious resort to insertion-based policy, speedups up to 20 % can be achieved. We also show that our technique allows to prevent deadlock and to substantially reduce the required memory footprint compared to classic list-scheduling heuristics. Lastly, we propose a methodology to assess the appropriateness of dynamic scheduling in this context.", "paper_title": "List Scheduling in Embedded Systems Under Memory Constraints", "paper_id": "WOS:000361837300008"}