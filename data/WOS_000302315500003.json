{"auto_keywords": [{"score": 0.0490692031182167, "phrase": "pso"}, {"score": 0.03303408343848383, "phrase": "gpso"}, {"score": 0.013488695518555971, "phrase": "large_number"}, {"score": 0.00481495049065317, "phrase": "parallel_particle_swarm_optimization"}, {"score": 0.004763895422211728, "phrase": "gpu._particle_swarm_optimization"}, {"score": 0.004613940521007727, "phrase": "population-based_stochastic_and_derivative-free_method"}, {"score": 0.004236639288852276, "phrase": "high-dimensional_or_complicated_problems"}, {"score": 0.0038900709793274484, "phrase": "high_computational_costs"}, {"score": 0.003422592914888694, "phrase": "gpu"}, {"score": 0.003314591878914152, "phrase": "gpu-accelerated_pso"}, {"score": 0.0031760175583084274, "phrase": "thread_pool_model"}, {"score": 0.0030758904011907533, "phrase": "gpu._numerical_results"}, {"score": 0.003010893527930816, "phrase": "gpu_architecture"}, {"score": 0.0029630461161780203, "phrase": "pso_framework"}, {"score": 0.002900426826591769, "phrase": "computational_timing"}, {"score": 0.0028543298631502107, "phrase": "high_parallel_efficiency"}, {"score": 0.0028089634624677957, "phrase": "better_optimal_solutions"}, {"score": 0.002256435842862802, "phrase": "single-and_quad-core_mode"}, {"score": 0.0021735890994119757, "phrase": "promising_method"}, {"score": 0.0021390191069313945, "phrase": "high-dimensional_and_difficult_optimization_problems"}, {"score": 0.0021049977753042253, "phrase": "low-cost_and_many-core_gpu_system"}], "paper_keywords": ["particle swarm optimization", " parallel computing", " graphic process unit"], "paper_abstract": "Particle swarm optimization (PSO) is a population-based stochastic and derivative-free method that has been used to solve various optimization problems due to its simplicity and efficiency. While solving high-dimensional or complicated problems, PSO requires a large number of particles to explore the problem domains and consequently introduces high computational costs. In this paper, we focus on the acceleration of PSO for solving box-constrained, load-balanced optimization problems by parallelization on a graphics processing unit (GPU). We propose a GPU-accelerated PSO (GPSO) algorithm by using a thread pool model and implement GPSO on a GPU. Numerical results show that the GPU architecture fits the PSO framework well by reducing computational timing, achieving high parallel efficiency and finding better optimal solutions by using a large number of particles. For example, while solving the 100-dimensional test problems with 65,536 (16 x 2(12)) particles, GPSO has achieved up to 280X and 83X speedups on a NVIDIA Tesla C1060 1.30 GHz GPU relative to an Intel Xeon-X5450 3.00 GHz central processing unit running in single-and quad-core mode, respectively. GPSO provides a promising method for tackling high-dimensional and difficult optimization problems using a low-cost and many-core GPU system.", "paper_title": "Accelerating parallel particle swarm optimization via GPU", "paper_id": "WOS:000302315500003"}