{"auto_keywords": [{"score": 0.048445090360224895, "phrase": "web_applications"}, {"score": 0.011937862934533404, "phrase": "security_logic"}, {"score": 0.011219561627373836, "phrase": "rolecast"}, {"score": 0.008713768692145006, "phrase": "missing_security_checks"}, {"score": 0.00455480107532344, "phrase": "php"}, {"score": 0.004523275033066936, "phrase": "jsp"}, {"score": 0.004414653335578912, "phrase": "authorization_checks"}, {"score": 0.00435375504298636, "phrase": "existing_techniques"}, {"score": 0.004249188865832993, "phrase": "system_code"}, {"score": 0.004161553532799662, "phrase": "security_checks"}, {"score": 0.0038419751490849133, "phrase": "eachweb_application"}, {"score": 0.003815369123984481, "phrase": "different_variables"}, {"score": 0.0037366473207825234, "phrase": "user's_permissions"}, {"score": 0.003584025547693836, "phrase": "user's_role"}, {"score": 0.003285725064532174, "phrase": "security-sensitive_events"}, {"score": 0.0030226700832113942, "phrase": "consistent_software_engineering_pattern"}, {"score": 0.0029602552900111407, "phrase": "distinct_user_role_functionality"}, {"score": 0.0029092257197427195, "phrase": "distinct_methods"}, {"score": 0.0028392545452904762, "phrase": "novel_algorithm"}, {"score": 0.002704306866425829, "phrase": "file_contexts"}, {"score": 0.0025225467103906314, "phrase": "common_functionality"}, {"score": 0.0024704333220467393, "phrase": "security-critical_variables"}, {"score": 0.0024447807655923926, "phrase": "role-specific_variable_consistency_analysis"}, {"score": 0.002241087008892355, "phrase": "role-specific_security_logic"}, {"score": 0.0021049977753042253, "phrase": "distinctive_software_engineering_features"}], "paper_keywords": ["Algorithm", " Languages", " Security", " Security", " static analysis", " interprocedural analysis", " security checks", " access control", " user roles", " PHP", " JSP"], "paper_abstract": "Web applications written in languages such as PHP and JSP are notoriously vulnerable to accidentally omitted authorization checks and other security bugs. Existing techniques that find missing security checks in library and system code assume that (1) security checks can be recognized syntactically and (2) the same pattern of checks applies universally to all programs. These assumptions do not hold for Web applications. EachWeb application uses different variables and logic to check the user's permissions. Even within the application, security logic varies based on the user's role, e. g., regular users versus administrators. This paper describes ROLECAST, the first system capable of statically identifying security logic that mediates security-sensitive events (such as database writes) in Web applications, rather than taking a specification of this logic as input. We observe a consistent software engineering pattern-the code that implements distinct user role functionality and its security logic resides in distinct methods and files-and develop a novel algorithm for discovering this pattern in Web applications. Our algorithm partitions the set of file contexts (a coarsening of calling contexts) on which security-sensitive events are control dependent into roles. Roles are based on common functionality and security logic. ROLECAST identifies security-critical variables and applies role-specific variable consistency analysis to find missing security checks. ROLECAST discovered 13 previously unreported, remotely exploitable vulnerabilities in 11 substantial PHP and JSP applications, with only 3 false positives. This paper demonstrates that (1) accurate inference of application-and role-specific security logic improves the security of Web applications without specifications, and (2) static analysis can discover security logic automatically by exploiting distinctive software engineering features.", "paper_title": "RoleCast: Finding Missing Security Checks When You Do Not Know What Checks Are", "paper_id": "WOS:000298294500062"}