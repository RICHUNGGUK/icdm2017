{"auto_keywords": [{"score": 0.03581216971673247, "phrase": "cache_contention"}, {"score": 0.015719716506582538, "phrase": "shared_last-level_cache"}, {"score": 0.012976465248743544, "phrase": "sllc"}, {"score": 0.008209810333055982, "phrase": "proposed_thread_scheduling_scheme"}, {"score": 0.004552981066668676, "phrase": "effective_way"}, {"score": 0.004475266375001531, "phrase": "memory_bottleneck"}, {"score": 0.0044369056710423065, "phrase": "modern_throughput_processors"}, {"score": 0.004305203085016233, "phrase": "commonly_used_scheduling_policy"}, {"score": 0.004159446063902181, "phrase": "maximum_possible_thread-level_parallelism"}, {"score": 0.0040708542958968605, "phrase": "greedy_policy"}, {"score": 0.0040186038781533946, "phrase": "serious_cache_contention"}, {"score": 0.0038825121288253435, "phrase": "system_performance"}, {"score": 0.0037834649508375544, "phrase": "critical_performance_factor"}, {"score": 0.0037348894128879082, "phrase": "thread_scheduling"}, {"score": 0.003686935223424015, "phrase": "throughput_processor"}, {"score": 0.0036395944934310524, "phrase": "careful_trade-off"}, {"score": 0.003592859432554987, "phrase": "thread-level_parallelism"}, {"score": 0.003426556090707852, "phrase": "performance_impact"}, {"score": 0.003324743991757282, "phrase": "throughput_processors"}, {"score": 0.00307657476125683, "phrase": "aggregate_working-set-size-constrained_thread_scheduling_problem"}, {"score": 0.0029467742734417255, "phrase": "concurrent_threads"}, {"score": 0.002859759795028455, "phrase": "np"}, {"score": 0.0026342827320931937, "phrase": "overall_system_performance"}, {"score": 0.0025780912201045555, "phrase": "simulation_results"}, {"score": 0.002555950807368337, "phrase": "nvidia's_fermi_architecture"}, {"score": 0.002437525632451029, "phrase": "widely_used_thread_clustering_scheme"}, {"score": 0.002375253757224999, "phrase": "state-of-the-art_technique"}, {"score": 0.002255431275670053, "phrase": "execution_time"}, {"score": 0.0021789194955896124, "phrase": "execution_time_improvement"}, {"score": 0.0021049977753042253, "phrase": "exhaustive_searching_scheme"}], "paper_keywords": ["Algorithms", " Performance", " Throughput processors", " thread-level parallelism", " cache contention", " shared last-level cache", " thread scheduling"], "paper_abstract": "Deploying the Shared Last-Level Cache (SLLC) is an effective way to alleviate the memory bottleneck in modern throughput processors, such as GPGPUs. A commonly used scheduling policy of throughput processors is to render the maximum possible thread-level parallelism. However, this greedy policy usually causes serious cache contention on the SLLC and significantly degrades the system performance. It is therefore a critical performance factor that the thread scheduling of a throughput processor performs a careful trade-off between the thread-level parallelism and cache contention. This article characterizes and analyzes the performance impact of cache contention in the SLLC of throughput processors. Based on the analyses and findings of cache contention and its performance pitfalls, this article formally formulates the aggregate working-set-size-constrained thread scheduling problem that constrains the aggregate working-set size on concurrent threads. With a proof to be NP-hard, this article has integrated a series of algorithms to minimize the cache contention and enhance the overall system performance on GPGPUs. The simulation results on NVIDIA's Fermi architecture have shown that the proposed thread scheduling scheme achieves up to 61.6% execution time enhancement over a widely used thread clustering scheme. When compared to the state-of-the-art technique that exploits the data reuse of applications, the improvement on execution time can reach 47.4%. Notably, the execution time improvement of the proposed thread scheduling scheme is only 2.6% from an exhaustive searching scheme.", "paper_title": "Reducing Contention in Shared Last-Level Cache for Throughput Processors", "paper_id": "WOS:000345523400012"}