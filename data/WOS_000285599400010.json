{"auto_keywords": [{"score": 0.048529954401590095, "phrase": "floating-point_programs"}, {"score": 0.00481495049065317, "phrase": "floating-point_implementation"}, {"score": 0.0047559432344272, "phrase": "elementary_function_using_gappa"}, {"score": 0.004602085616330634, "phrase": "numerical_properties"}, {"score": 0.004564401713056939, "phrase": "final_and_intermediate_values"}, {"score": 0.0041696157492057, "phrase": "ideal_value"}, {"score": 0.004001593118269276, "phrase": "time-consuming_proof"}, {"score": 0.0037776319581225046, "phrase": "smallest_change"}, {"score": 0.0033251716926666437, "phrase": "proof_assistant"}, {"score": 0.0029509483926257645, "phrase": "interval_arithmetic"}, {"score": 0.0028553159147435424, "phrase": "actual_code"}, {"score": 0.002728847267539957, "phrase": "complex_mathematical_properties"}, {"score": 0.002629539710839523, "phrase": "formal_proof"}, {"score": 0.0025027144548626975, "phrase": "lower_level_proof_assistant"}, {"score": 0.0024017007954518065, "phrase": "specific_knowledge"}, {"score": 0.0023819914954155905, "phrase": "automatic_theorem_proving"}, {"score": 0.002295277579105177, "phrase": "wide_community"}, {"score": 0.002239225269052105, "phrase": "practical_use"}, {"score": 0.0021845387990972543, "phrase": "widely_used_class"}, {"score": 0.0021311850321045767, "phrase": "elementary_functions"}, {"score": 0.0021049977753042253, "phrase": "mathematical_library"}], "paper_keywords": ["Correctness proofs", " error analysis", " elementary function approximation"], "paper_abstract": "High confidence in floating-point programs requires proving numerical properties of final and intermediate values. One may need to guarantee that a value stays within some range, or that the error relative to some ideal value is well bounded. This certification may require a time-consuming proof for each line of code, and it is usually broken by the smallest change to the code, e. g., for maintenance or optimization purpose. Certifying floating-point programs by hand is, therefore, very tedious and error-prone. The Gappa proof assistant is designed to make this task both easier and more secure, due to the following novel features: It automates the evaluation and propagation of rounding errors using interval arithmetic. Its input format is very close to the actual code to validate. It can be used incrementally to prove complex mathematical properties pertaining to the code. It generates a formal proof of the results, which can be checked independently by a lower level proof assistant like Coq. Yet it does not require any specific knowledge about automatic theorem proving, and thus, is accessible to a wide community. This paper demonstrates the practical use of this tool for a widely used class of floating-point programs: implementations of elementary functions in a mathematical library.", "paper_title": "Certifying the Floating-Point Implementation of an Elementary Function Using Gappa", "paper_id": "WOS:000285599400010"}