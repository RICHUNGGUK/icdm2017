{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "monotonicity_constraints"}, {"score": 0.004217537792708984, "phrase": "integer_domain"}, {"score": 0.00408654006336477, "phrase": "nontrivial_extension"}, {"score": 0.004009894739765119, "phrase": "well-known_size-change_termination_method"}, {"score": 0.0037646280104933357, "phrase": "pspace"}, {"score": 0.0036018503805251424, "phrase": "well-defined_and_significant_subset"}, {"score": 0.0034899106882807806, "phrase": "mcnp"}, {"score": 0.0033604205359233264, "phrase": "np"}, {"score": 0.0031544754107802413, "phrase": "sat-based_solution"}, {"score": 0.0029427043216782604, "phrase": "special_type"}, {"score": 0.002905752244360772, "phrase": "ranking_function"}, {"score": 0.002815383690003621, "phrase": "bounded_differences"}, {"score": 0.0027451110240633144, "phrase": "integer_values"}, {"score": 0.002576988153314685, "phrase": "back_end"}, {"score": 0.0025285834281312705, "phrase": "termination_analysis"}, {"score": 0.0024968185204913935, "phrase": "java_bytecode"}, {"score": 0.002434477906829832, "phrase": "front_end"}, {"score": 0.0022002633747977593, "phrase": "costa._preliminary"}, {"score": 0.0021049977753042253, "phrase": "good_trade-off"}], "paper_keywords": ["termination analysis", " monotonicity constraints", " SAT encoding"], "paper_abstract": "We describe an algorithm for proving termination of programs abstracted to systems of monotonicity constraints in the integer domain. Monotonicity constraints are a nontrivial extension of the well-known size-change termination method. While deciding termination for systems of monotonicity constraints is PSPACE complete, we focus on a well-defined and significant subset, which we call MCNP (for \"monotonicity constraints in NP\"), designed to be amenable to a SAT-based solution. Our technique is based on the search for a special type of ranking function defined in terms of bounded differences between multisets of integer values. We describe the application of our approach as the back end for the termination analysis of Java Bytecode. At the front end, systems of monotonicity constraints are obtained by abstracting information, using two different termination analyzers: AProVE and COSTA. Preliminary results reveal that our approach provides a good trade-off between precision and cost of analysis.", "paper_title": "SAT-based termination analysis using monotonicity constraints over the integers", "paper_id": "WOS:000292701100006"}