{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "finite_state_automata"}, {"score": 0.0046797114400479135, "phrase": "efficient_and_scalable_packet_filter"}, {"score": 0.004000741805312148, "phrase": "encapsulation_rules"}, {"score": 0.002923214590192792, "phrase": "increased_size"}, {"score": 0.002861302930564756, "phrase": "filtering_code"}, {"score": 0.0028006988338192375, "phrase": "simple_domain-specific_optimizations"}, {"score": 0.0025892330566358503, "phrase": "complex_filters"}, {"score": 0.0023766673143502384, "phrase": "packet_filters"}, {"score": 0.0022770057597574734, "phrase": "optimal_number"}, {"score": 0.0021049977753042253, "phrase": "multiple_filters_composition"}], "paper_keywords": ["Finite state automata", " packet filters", " pFSA"], "paper_abstract": "Designing an efficient and scalable packet filter for modern computer networks becomes more challenging each day: Faster link speeds, the steady increase in the number of encapsulation rules (e.g., tunneling), and the necessity to precisely isolate a given subset of traffic cause filtering expressions to become more complex than in the past. Most current packet filtering mechanisms cannot deal with those requirements because their optimization algorithms either cannot scale with the increased size of the filtering code or exploit simple domain-specific optimizations that cannot guarantee to operate properly in case of complex filters. This paper presents pFSA, a new model that transforms packet filters into finite state automata and guarantees the optimal number of checks on the packet, also in case of multiple filters composition, hence enabling efficiency and scalability without sacrificing filtering computation time.", "paper_title": "Modeling Complex Packet Filters With Finite State Automata", "paper_id": "WOS:000350342300004"}