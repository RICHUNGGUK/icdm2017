{"auto_keywords": [{"score": 0.027474775058558328, "phrase": "fast_method"}, {"score": 0.004815067757996678, "phrase": "galerkin"}, {"score": 0.00477935341074215, "phrase": "efficient_matrix_assembly"}, {"score": 0.004720606036240263, "phrase": "peridynamic_model"}, {"score": 0.004697308822154191, "phrase": "peridynamic_theory"}, {"score": 0.004662577395989494, "phrase": "appropriate_description"}, {"score": 0.00459387949974091, "phrase": "continuous_body"}, {"score": 0.004448471107649881, "phrase": "classical_theory"}, {"score": 0.00442651096522781, "phrase": "solid_mechanics"}, {"score": 0.004339744430169516, "phrase": "peridynamic_models"}, {"score": 0.00427578268550103, "phrase": "resulting_numerical_methods"}, {"score": 0.004254671386496732, "phrase": "dense_or_full_stiffness_matrices"}, {"score": 0.004202346122867104, "phrase": "direct_solvers"}, {"score": 0.0039404109584328965, "phrase": "spatial_nodes"}, {"score": 0.003901582803370821, "phrase": "significant_computational_and_memory_challenge"}, {"score": 0.0038061717157784523, "phrase": "multiple_space_dimensions"}, {"score": 0.003685604033479918, "phrase": "material_delta"}, {"score": 0.0035954555250614197, "phrase": "computational_cost"}, {"score": 0.003577691211998842, "phrase": "memory_requirement"}, {"score": 0.003472927015404464, "phrase": "corresponding_error_estimate"}, {"score": 0.003455765987713262, "phrase": "one-order_suboptimal"}, {"score": 0.0032887360307856635, "phrase": "horizon_delta"}, {"score": 0.0032643852908042044, "phrase": "physical_property"}, {"score": 0.003192406091820197, "phrase": "computational_mesh_size"}, {"score": 0.0031531035267164803, "phrase": "fast_galerkin_method"}, {"score": 0.003075939571703269, "phrase": "stiffness_matrix"}, {"score": 0.003053159610975692, "phrase": "new_method"}, {"score": 0.003030547842475078, "phrase": "computational_work"}, {"score": 0.0029784342137867776, "phrase": "traditional_methods"}, {"score": 0.002855562367132386, "phrase": "lossy_compression"}, {"score": 0.002834409847642238, "phrase": "significant_computational_and_memory_reduction"}, {"score": 0.0027718851757430546, "phrase": "numerical_experiments"}, {"score": 0.002737745536992088, "phrase": "one-dimensional_peridynamic_model"}, {"score": 0.002467038647952607, "phrase": "gaussian_elimination"}, {"score": 0.002454835845644037, "phrase": "conjugate_gradient_method"}, {"score": 0.0021956447302511214, "phrase": "cpu_time"}, {"score": 0.0021525121164448777, "phrase": "significantly_reduced_memory_requirement"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dense matrices", " Fast methods", " Peridynamics"], "paper_abstract": "Peridynamic theory provides an appropriate description of the deformation of a continuous body involving discontinuities or other singularities, which cannot be described properly by classical theory of solid mechanics. However, the operators in the peridynamic models are nonlocal, so the resulting numerical methods generate dense or full stiffness matrices. Gaussian types of direct solvers were traditionally used to solve these problems, which requires O(N-3) of operations and O(N-2) of memory where N is the number of spatial nodes. This imposes significant computational and memory challenge for a peridynamic model, especially for problems in multiple space dimensions. A simplified model, which assumes that the horizon of the material delta = O(N-1), was proposed to reduce the computational cost and memory requirement to O(N). However, the drawback is that the corresponding error estimate becomes one-order suboptimal. Furthermore, the assumption of delta = O(N-1) does not seem to be physically reasonable since the horizon delta represents a physical property of the material that should not depend on computational mesh size. We develop a fast Galerkin method for the (non-simplified) peridynamic model by exploiting the structure of the stiffness matrix. The new method reduces the computational work from O(N-3) required by the traditional methods to O(Nlog(2)N) and the memory requirement from O(N-2) to O(N) without using any lossy compression. The significant computational and memory reduction of the fast method is better reflected in numerical experiments. When solving a one-dimensional peridynamic model with 2(14) = 16; 384 unknowns, the traditional method consumed CPU time of 6 days and 11 h while the fast method used only 3.3 s. In addition, on the same computer (with 128 GB memory), the traditional method with a Gaussian elimination or conjugate gradient method ran out of memory when solving the problem with 2(16) = 131; 072 unknowns. In contrast, the fast method was able to solve the problem with 2(28) = 268; 435; 456 unknowns using 3 days and 11 h of CPU time. This shows the benefit of the significantly reduced memory requirement of the fast method. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "A fast Galerkin method with efficient matrix assembly and storage for a peridynamic model", "paper_id": "WOS:000308726600003"}