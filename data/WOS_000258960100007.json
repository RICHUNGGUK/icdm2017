{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "solo_programming"}, {"score": 0.015390405415585397, "phrase": "pair_programming"}, {"score": 0.007995232560234794, "phrase": "spf"}, {"score": 0.004672808182229058, "phrase": "software_development"}, {"score": 0.004476963405985556, "phrase": "relatively_unclear_benefit"}, {"score": 0.0037398106866046972, "phrase": "new_process_model"}, {"score": 0.0034621581245372138, "phrase": "pair_and_solo_programming_processes"}, {"score": 0.003288567185099276, "phrase": "proposed_model"}, {"score": 0.0032604908177429493, "phrase": "software_process_fusion"}, {"score": 0.003137074867443131, "phrase": "recipient_process"}, {"score": 0.003044313656896057, "phrase": "transfer_conditions"}, {"score": 0.0028669153591624696, "phrase": "minimal_costs"}, {"score": 0.0027114323601885666, "phrase": "software_fusion_ratio"}, {"score": 0.0025424508991051483, "phrase": "spf_model"}, {"score": 0.0023839754995935184, "phrase": "solution_patterns"}], "paper_keywords": [""], "paper_abstract": "The role of pair programming in software development is controversial. This is due partly to the relatively unclear benefit of pair programming over solo programming. There have been arguments either way and there have been studies to show that one is more cost-effective than the others. Rather than investigating into pair vs. solo programming here, we present a new process model combining both together. This paper argues and shows, with two case studies, that the fusing of pair and solo programming processes may actually be better than adopting either alone. In the proposed model called Software Process Fusion (SPF), a donor and a recipient process can be defined and if some transfer conditions are met, one process can be converted into another to achieve tasks with minimal costs. The transfer conditions we de. ne is related to a Software Fusion Ratio (SFR). SFR can be used to evaluate the effectiveness of an SPF model. In our case studies, we observed that, with SPF, programmers would design solution patterns of their own in pairs and then use these patterns to build sub-modules in solos. We conclude that SPF can be a more effective approach to increase productivity of less experienced programmers.", "paper_title": "Software process fusion by combining pair and solo programming", "paper_id": "WOS:000258960100007"}