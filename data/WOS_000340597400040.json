{"auto_keywords": [{"score": 0.024069758958285906, "phrase": "android_applications"}, {"score": 0.00481495049065317, "phrase": "android_application_permissions"}, {"score": 0.004667149874736771, "phrase": "papilio"}, {"score": 0.004317109072311102, "phrase": "real-world_android_applications"}, {"score": 0.00396218934254591, "phrase": "directed_acyclic_nature"}, {"score": 0.003900853871728297, "phrase": "android_application_permission_data"}, {"score": 0.003781005930058317, "phrase": "new_explicit_layout_technique"}, {"score": 0.00331125524068286, "phrase": "requested_permissions"}, {"score": 0.0031107911390188055, "phrase": "partially_ordered_relations"}, {"score": 0.0030387767523076528, "phrase": "papilio_layout"}, {"score": 0.002499798127196099, "phrase": "partial_order"}, {"score": 0.002206045784326466, "phrase": "case_study"}, {"score": 0.0021381565332182773, "phrase": "new_security_findings"}, {"score": 0.0021049977753042253, "phrase": "permission_usage"}], "paper_keywords": [""], "paper_abstract": "We introduce Papilio, a new visualization technique for visualizing permissions of real-world Android applications. We explore the development of layouts that exploit the directed acyclic nature of Android application permission data to develop a new explicit layout technique that incorporates aspects of set membership, node-link diagrams and matrix layouts. By grouping applications based on sets of requested permissions, a structure can be formed with partially ordered relations. The Papilio layout shows sets of applications centrally, the relations among applications on one side and application permissions, as the reason behind the existence of the partial order, on the other side. Using Papilio to explore a set of Android applications as a case study has led to new security findings regarding permission usage by Android applications.", "paper_title": "Papilio: Visualizing Android Application Permissions", "paper_id": "WOS:000340597400040"}