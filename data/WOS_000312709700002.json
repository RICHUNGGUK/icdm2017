{"auto_keywords": [{"score": 0.049347793578485864, "phrase": "visual_contracts"}, {"score": 0.00481495049065317, "phrase": "model_transformations"}, {"score": 0.004692980391580608, "phrase": "model-driven_engineering"}, {"score": 0.004481132747216135, "phrase": "different_phases"}, {"score": 0.004412654209742722, "phrase": "software_development"}, {"score": 0.004191829338769843, "phrase": "different_languages"}, {"score": 0.004002513373645485, "phrase": "final_application"}, {"score": 0.0033957904376127187, "phrase": "scarce_support"}, {"score": 0.003343841875107018, "phrase": "correctness_requirements"}, {"score": 0.00325901518290063, "phrase": "implementation-independent_way"}, {"score": 0.003143849342926373, "phrase": "actual_transformation_language"}, {"score": 0.002940626369102927, "phrase": "declarative_language"}, {"score": 0.0027223626424366207, "phrase": "transformation_language"}, {"score": 0.0025726416100664853, "phrase": "qvt"}, {"score": 0.00250732953434891, "phrase": "transformation_results"}, {"score": 0.0022856052476424344, "phrase": "graphical_modeling_environment"}], "paper_keywords": ["Model-Driven Engineering", " Model transformation", " Contract-based specification", " Verification", " QVT-relations"], "paper_abstract": "Model-Driven Engineering promotes the use of models to conduct the different phases of the software development. In this way, models are transformed between different languages and notations until code is generated for the final application. Hence, the construction of correct Model-to-Model (M2M) transformations becomes a crucial aspect in this approach. Even though many languages and tools have been proposed to build and execute M2M transformations, there is scarce support to specify correctness requirements for such transformations in an implementation-independent way, i.e., irrespective of the actual transformation language used. In this paper we fill this gap by proposing a declarative language for the specification of visual contracts, enabling the verification of transformations defined with any transformation language. The verification is performed by compiling the contracts into QVT to detect disconformities of transformation results with respect to the contracts. As a proof of concept, we also report on a graphical modeling environment for the specification of contracts, and on its use for the verification of transformations in several case studies.", "paper_title": "Automated verification of model transformations based on visual contracts", "paper_id": "WOS:000312709700002"}