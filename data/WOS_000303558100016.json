{"auto_keywords": [{"score": 0.0385828742088574, "phrase": "generated_code"}, {"score": 0.015244515639195355, "phrase": "code_generator"}, {"score": 0.013072746933636697, "phrase": "code_generators"}, {"score": 0.00481495049065317, "phrase": "automatically_generated_code"}, {"score": 0.004777744121315302, "phrase": "big-step_models"}, {"score": 0.004171065188039856, "phrase": "system_property"}, {"score": 0.004075053556360943, "phrase": "code_customization"}, {"score": 0.003950453462399077, "phrase": "big-step_executable_modelling_languages"}, {"score": 0.003800026771283179, "phrase": "customization_language"}, {"score": 0.0037125240439927114, "phrase": "customization_scenarios"}, {"score": 0.003612971658533784, "phrase": "specific_big-step_execution_semantics"}, {"score": 0.0035024506353894644, "phrase": "runtime_monitors"}, {"score": 0.0033559647822437298, "phrase": "code_extension"}, {"score": 0.003093054709625219, "phrase": "reachability_relation"}, {"score": 0.002963640433319524, "phrase": "big_step"}, {"score": 0.002861782260525497, "phrase": "aspect_code"}, {"score": 0.0026892447164623247, "phrase": "generated-code_level"}, {"score": 0.0026069066266394118, "phrase": "code_analysis"}], "paper_keywords": ["Design", " Languages", " AspectJ", " Semantics", " Statecharts", " MDE", " AOP"], "paper_abstract": "The output of a code generator is assumed to be correct and not usually intended to be read or modified; yet programmers are often interested in this, e.g., to monitor a system property. Here, we consider code customization for a family of code generators associated with big-step executable modelling languages (e.g., statecharts). We introduce a customization language that allows us to express customization scenarios for the generated code independently of a specific big-step execution semantics. These customization scenarios are all different forms of runtime monitors, which lend themselves to a principled, uniform implementation for observation and code extension. A monitor is given in terms of the enabledness and execution of the transitions of a model and a reachability relation between two states of the execution of the model during a big step. For each monitor, we generate the aspect code that is incorporated into the output of a code generator to implement the monitor at the generated-code level. Thus, we provide means for code analysis through using the vocabulary of a model, rather than the detail of the generated code. Our technique not only requires the code generators to reveal only limited information about their code generation mechanisms, but also keeps the structure of the generated code intact. We demonstrate how various useful properties of a model, or a language, can be checked using our monitors.", "paper_title": "Monitoring Aspects for the Customization of Automatically Generated Code for Big-Step Models", "paper_id": "WOS:000303558100016"}