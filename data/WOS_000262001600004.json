{"auto_keywords": [{"score": 0.044354059535372664, "phrase": "shadow_regions"}, {"score": 0.008831565599480435, "phrase": "overlapped_htas"}, {"score": 0.00481495049065317, "phrase": "productive_stencil_codes"}, {"score": 0.004775726266706856, "phrase": "overlapped_tiling"}, {"score": 0.004736820055728928, "phrase": "stencil_computations"}, {"score": 0.004436716583179764, "phrase": "stencil_codes"}, {"score": 0.0044005599565517875, "phrase": "data_locality"}, {"score": 0.004293840838533456, "phrase": "tiled_stencil_codes"}, {"score": 0.0036602993802452863, "phrase": "computational_kernel"}, {"score": 0.0034847851398628546, "phrase": "programmers'_productivity"}, {"score": 0.003145609726536791, "phrase": "hierarchically_tiled_array"}, {"score": 0.0030944828434567966, "phrase": "data_type"}, {"score": 0.003056682765974825, "phrase": "hta"}, {"score": 0.002933973181012572, "phrase": "high_degree"}, {"score": 0.0026159017392986595, "phrase": "parallel_and_sequential_codes"}, {"score": 0.0023514343164101332, "phrase": "communication_statements"}, {"score": 0.0023322317017275803, "phrase": "non-trivial_codes"}, {"score": 0.0022111720236287547, "phrase": "different_implementation_options"}, {"score": 0.0021662983565317283, "phrase": "previous_approaches"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["productivity", " shadow regions", " tiles", " overlapped tiling", " stencil computations"], "paper_abstract": "Stencil computations constitute the kernel of many scientific applications. Tiling is often used to improve the performance of stencil codes for data locality and parallelism. However, tiled stencil codes typically require shadow regions, whose management becomes a burden to programmers. In fact, it is often the case that the code required to manage these regions, and in particular their updates, is much longer than the computational kernel of the stencil. As a result, shadow regions usually impact programmers' productivity negatively. In this paper, we describe overlapped tiling, a construct that supports shadow regions in a convenient, flexible and efficient manner in the context of the hierarchically tiled array (HTA) data type. The HTA is a class designed to express algorithms with a high degree of parallelism and/or locality as naturally as possible in terms of tiles. We discuss the syntax and implementation of overlapped HTAs as well as our experience in rewriting parallel and sequential codes using them. The results have been satisfactory in terms of both productivity and performance. For example, overlapped HTAs reduced the number of communication statements in non-trivial codes by 78% on average while speeding them up. We also examine different implementation options and compare overlapped HTAs with previous approaches. Copyright (c) 2008 John Wiley & Sons, Ltd.", "paper_title": "Writing productive stencil codes with overlapped tiling", "paper_id": "WOS:000262001600004"}