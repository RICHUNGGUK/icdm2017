{"auto_keywords": [{"score": 0.04613130232163521, "phrase": "controlled_experiments"}, {"score": 0.014286887256627186, "phrase": "software_engineering"}, {"score": 0.00481495049065317, "phrase": "domain_specific_language"}, {"score": 0.004763565662615503, "phrase": "formalizing_software_engineering_experiments"}, {"score": 0.004301834610818624, "phrase": "important_insights"}, {"score": 0.00409895142748329, "phrase": "computational_support"}, {"score": 0.003926626018798576, "phrase": "deeper_investigation"}, {"score": 0.0037213333316218522, "phrase": "empirical_study"}, {"score": 0.0036422425344358037, "phrase": "domain-specific_language"}, {"score": 0.0033243718810317254, "phrase": "model-driven_approach"}, {"score": 0.0032189132350239013, "phrase": "executable_workfows"}, {"score": 0.003167441161387607, "phrase": "experiment_participants"}, {"score": 0.0030834712590249863, "phrase": "statistical_design"}, {"score": 0.0027841357057119317, "phrase": "investigated_dsl"}, {"score": 0.0027395968397212053, "phrase": "different_controlled_experiments"}, {"score": 0.0023694065215394593, "phrase": "evaluated_dsl."}, {"score": 0.0023189818169615135, "phrase": "improved_version"}, {"score": 0.0021049977753042253, "phrase": "proposed_improvements"}], "paper_keywords": ["Controlled experiment", " domain-specific language", " empirical evaluation"], "paper_abstract": "The research about the formalization and conduction of controlled experiments in software engineering has reported important insights and guidelines for their organization. However, the computational support to formalize and execute controlled experiments still requires deeper investigation. In this context, this paper presents an empirical study that evaluates a domain-specific language (DSL) proposed to formalize controlled experiments in software engineering. The language is part of a model-driven approach that allows the generation of executable workfows for the experiment participants, according to the statistical design of the experiment. Our study involves the modeling of 16 software engineering experiments to analyze the completeness and expressiveness of the investigated DSL when specifying different controlled experiments. The results highlight several limitations of the DSL that affect the formalization and execution of experiments. These outcomes were used to extend and improve the evaluated DSL. Finally, the improved version of the language was used to model the same experiments in order to illustrate the benefits of the proposed improvements.", "paper_title": "Assessing and Evolving a Domain Specific Language for Formalizing Software Engineering Experiments: An Empirical Study", "paper_id": "WOS:000351877500006"}