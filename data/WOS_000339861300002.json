{"auto_keywords": [{"score": 0.04735086985834179, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "verified_compilation"}, {"score": 0.004594443767709888, "phrase": "high-level_managed_languages"}, {"score": 0.004358368398332723, "phrase": "shared-memory_synchronization"}, {"score": 0.004307569753106432, "phrase": "automatic_memory_management"}, {"score": 0.0040622852274783275, "phrase": "total_store_order_relaxed_memory_model"}, {"score": 0.0038761135052054765, "phrase": "high-level_actions"}, {"score": 0.003742084495435749, "phrase": "nonatomic_actions"}, {"score": 0.003698442219929622, "phrase": "compiler-injected_snippets"}, {"score": 0.0031938648476635225, "phrase": "order_executions"}, {"score": 0.0030653094605910727, "phrase": "naive_proof"}, {"score": 0.002924694271730544, "phrase": "possible_thread_interleavings"}, {"score": 0.0027741761880779535, "phrase": "refinement-based_proof_methodology"}, {"score": 0.002646880721119838, "phrase": "different_abstraction_levels"}, {"score": 0.002555247330102505, "phrase": "relaxed_memory_semantics"}, {"score": 0.0025106241866273897, "phrase": "underlying_processor"}, {"score": 0.0024379730432321656, "phrase": "compiler_writer"}, {"score": 0.002326068563512387, "phrase": "low-level_concurrent_code"}, {"score": 0.002272053079580848, "phrase": "managed_services"}, {"score": 0.0021049977753042253, "phrase": "concurrent_garbage_collector"}], "paper_keywords": ["Languages", " Reliability", " Security", " Verification", " Verified compilation", " managed languages", " concurrency", " garbage collection", " compiler transformations and optimizations", " refinement", " atomicity", " mechanized proof assistant (Coq)"], "paper_abstract": "We consider the verified compilation of high-level managed languages like Java or c# whose intermediate representations provide support for shared-memory synchronization and automatic memory management. Our development is framed in the context of the Total Store Order relaxed memory model. Ensuring complier correctness is challenging because high-level actions are translated into sequences of nonatomic actions with compiler-injected snippets of racy code; the behavior of this code depends not only on the actions of other threads but also on out-of-order executions performed by the processor. A naive proof of correctness would require reasoning over all possible thread interleavings. In this article, we propose a refinement-based proof methodology that precisely relates concurrent code expressed at different abstraction levels, cognizant throughout of the relaxed memory semantics of the underlying processor. Our technique allows the compiler writer to reason compositionally about the atomicity of low-level concurrent code used to implement managed services. We illustrate our approach with examples taken from the verification of a concurrent garbage collector.", "paper_title": "Atomicity Refinement for Verified Compilation", "paper_id": "WOS:000339861300002"}