{"auto_keywords": [{"score": 0.03244040384336323, "phrase": "surveillance_number"}, {"score": 0.013972542500758802, "phrase": "web_surfer"}, {"score": 0.00481495049065317, "phrase": "impatient_web_surfers"}, {"score": 0.004736929514776812, "phrase": "basic_mechanism"}, {"score": 0.004714869813251479, "phrase": "faster_data_access"}, {"score": 0.004649302313891199, "phrase": "important_issue"}, {"score": 0.004542033920016376, "phrase": "network's_resources"}, {"score": 0.004156411748278609, "phrase": "unpredictable_way"}, {"score": 0.004098578483988551, "phrase": "web_pages"}, {"score": 0.003948244742054799, "phrase": "minimum_amount"}, {"score": 0.003689628075766217, "phrase": "two-player_game"}, {"score": 0.0035294124702649927, "phrase": "first_player"}, {"score": 0.0034640450599342488, "phrase": "marked_vertex"}, {"score": 0.0032674478600540477, "phrase": "new_vertex"}, {"score": 0.0031328221096543823, "phrase": "unmarked_vertex"}, {"score": 0.0030178044717552605, "phrase": "minimum_k"}, {"score": 0.002853124436286832, "phrase": "connected_variant"}, {"score": 0.002722758109991685, "phrase": "already_marked_vertex"}, {"score": 0.002691105581191125, "phrase": "computational_complexity"}, {"score": 0.002544207840990836, "phrase": "chordal_graph"}, {"score": 0.0023063585709539145, "phrase": "np"}, {"score": 0.0022846422360671215, "phrase": "split_graphs"}, {"score": 0.002242277042923036, "phrase": "polynomial_time_algorithms_computing_surveillance_numbers"}, {"score": 0.002149799391146313, "phrase": "combinatorial_characterization"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Prefetching", " Cops and robber games", " PSPACE-complete", " Interval graphs"], "paper_abstract": "Prefetching is a basic mechanism for faster data access and efficient computing. An important issue in prefetching is the trade-off between the amount of network's resources wasted by the prefetching and the gain of time. For instance, in the Web, browsers may download documents in advance while a Web surfer is surfing. Since the Web surfer follows the hyperlinks in an unpredictable way, the choice of the Web pages to be prefetched must be computed online. The question is then to determine the minimum amount of resources used by prefetching that ensures that all documents accessed by the Web surfer have previously been loaded in the cache. We model this problem as a two-player game similar to Cops and Robber Games in graphs. Let k >= 1 be any integer. The first player, a fugitive, starts on a marked vertex of a (di)graph G. The second player, an observer, marks at most k vertices, then the fugitive moves along one edge/arc of G to a new vertex, then the observer marks at most k vertices, etc. The fugitive wins if it enters an unmarked vertex, and the observer wins otherwise. The surveillance number of a (di)graph is the minimum k such that the observer marking at most k vertices at each step can win against any strategy of the fugitive. We also consider the connected variant of this game, i.e., when a vertex can be marked only if it is adjacent to an already marked vertex. We study the computational complexity of the game. All our results hold for both variants, connected or unrestricted. We show that deciding whether the surveillance number of a chordal graph is at most 2 is NP-hard. We also prove that deciding if the surveillance number of a DAG is at most 4 is PSPACE-complete. Moreover, we show that the problem of computing the surveillance number is NP-hard in split graphs. On the other hand, we provide polynomial time algorithms computing surveillance numbers of trees and interval graphs. Moreover, in the case of trees, we establish a combinatorial characterization of the surveillance number. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "To satisfy impatient Web surfers is hard", "paper_id": "WOS:000334006400001"}