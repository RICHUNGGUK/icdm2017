{"auto_keywords": [{"score": 0.03031433520750066, "phrase": "vpa"}, {"score": 0.01535433262655408, "phrase": "system_design"}, {"score": 0.00818754802314214, "phrase": "emulated_system"}, {"score": 0.00481495049065317, "phrase": "emulated_android_systems"}, {"score": 0.004743933823295797, "phrase": "common_approach"}, {"score": 0.004632469280786256, "phrase": "system-wide_optimization"}, {"score": 0.004577718478319983, "phrase": "computational_resources"}, {"score": 0.004470141828110505, "phrase": "energy_state"}, {"score": 0.004430452655732319, "phrase": "hardware_component"}, {"score": 0.004275173711009189, "phrase": "accurate_energy_and_performance_prediction"}, {"score": 0.004040324509631854, "phrase": "software_construct"}, {"score": 0.004004436217742343, "phrase": "realistic_operating_environment"}, {"score": 0.0039688654342552015, "phrase": "proper_workload"}, {"score": 0.003910278811774747, "phrase": "conventional_approaches"}, {"score": 0.0038297020126219082, "phrase": "satisfying_data"}, {"score": 0.0037619540348087493, "phrase": "cycle-accurate_simulation_environment"}, {"score": 0.0036625643243684827, "phrase": "android_smartphone"}, {"score": 0.003576416581189713, "phrase": "long_time"}, {"score": 0.0035236026196355783, "phrase": "slow_simulation"}, {"score": 0.003320006029757563, "phrase": "existing_software-based_profilers"}, {"score": 0.0031939996970411027, "phrase": "performance_analysis"}, {"score": 0.0031750418391373035, "phrase": "complicated_software"}, {"score": 0.0030819219279832224, "phrase": "dalvik_vm"}, {"score": 0.003054520564249659, "phrase": "android_system"}, {"score": 0.003009390313137981, "phrase": "aforementioned_problems"}, {"score": 0.0028185852354729026, "phrase": "existing_emulator"}, {"score": 0.002801849371896573, "phrase": "virtual_machine_monitor"}, {"score": 0.0026477194580630963, "phrase": "timing_models"}, {"score": 0.0026319954633536764, "phrase": "power_models"}, {"score": 0.0024431289979171505, "phrase": "different_levels"}, {"score": 0.002385595105638277, "phrase": "profile_data"}, {"score": 0.0023503248644593908, "phrase": "emulation_speed"}, {"score": 0.002308686629036015, "phrase": "existing_software-based_profiles"}, {"score": 0.0022610379771517966, "phrase": "probe_effect"}, {"score": 0.0022209780222461587, "phrase": "vpa_framework"}, {"score": 0.002155779067056877, "phrase": "useful_information"}, {"score": 0.0021049977753042253, "phrase": "android_smartphones"}], "paper_keywords": ["Performance", " Design", " Measurement", " Android system emulation", " full system emulation", " timing estimation", " power model", " performance tracing", " performance profiling"], "paper_abstract": "Simulation is a common approach for assisting system design and optimization. For system-wide optimization, energy and computational resources are often the two most critical issues. Monitoring the energy state of each hardware component and measuring the time spent in each state is needed for accurate energy and performance prediction. For software optimization, it is important to profile the energy and the time consumed by each software construct in a realistic operating environment with a proper workload. However, the conventional approaches of simulation often fail to produce satisfying data. First, building a cycle-accurate simulation environment for a complex system, such as an Android smartphone, is difficult and can take a long time. Second, a slow simulation can significantly alter the behavior of multithreaded, I/O-intensive applications and can affect the accuracy of profiles. Third, existing software-based profilers generally do not work on simulators, which makes it difficult for performance analysis of complicated software, for example, Java applications executed by the Dalvik VM in an Android system. To address these aforementioned problems, we proposed and prototyped a framework, called virtual performance analyzer (VPA). VPA takes advantage of an existing emulator or virtual machine monitor to reduce the complexity of building a simulator. VPA allows the user to selectively and incrementally integrate timing models and power models into the emulator with our carefully designed performance/power monitors, tracing facility, and profiling tools to evaluate and analyze the emulated system. The emulated system can perform at different levels of speed to help verify if the profile data are impacted by the emulation speed. Finally, VPA supports existing software-based profiles and enables non-intrusive tracing/profiling by minimizing the probe effect. Our experimental results show that the VPA framework allows users to quickly establish a performance/power evaluation environment and gather useful information to support system design and software optimization for Android smartphones.", "paper_title": "Performance and Power Profiling for Emulated Android Systems", "paper_id": "WOS:000333554400001"}