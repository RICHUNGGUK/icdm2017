{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "service-oriented_systems"}, {"score": 0.026929595936916597, "phrase": "transaction_management"}, {"score": 0.004635187610736025, "phrase": "service-oriented_computing"}, {"score": 0.004462105963334103, "phrase": "mainstream_development_paradigm"}, {"score": 0.004225950334493496, "phrase": "remote_independent_functionalities"}, {"score": 0.004112582094962078, "phrase": "soc's_success"}, {"score": 0.004024072318264299, "phrase": "potential_advantage"}, {"score": 0.0036288825833675127, "phrase": "information_system"}, {"score": 0.003531474887552889, "phrase": "solid_systems"}, {"score": 0.0033810134162565843, "phrase": "reliable_web_service_compositions"}, {"score": 0.0032546105164772995, "phrase": "composition_languages"}, {"score": 0.0030989899982042236, "phrase": "coordination_protocols"}, {"score": 0.003032228032253871, "phrase": "ws-atomictransaction"}, {"score": 0.002999386721353559, "phrase": "ws-businessactivity"}, {"score": 0.002855934865505357, "phrase": "web_services"}, {"score": 0.0028096544129939277, "phrase": "separate_languages"}, {"score": 0.0025611773887867255, "phrase": "major_requirements"}, {"score": 0.0024519545383399773, "phrase": "relevant_standards"}, {"score": 0.0023602032679095955, "phrase": "semiautomatic_approach"}, {"score": 0.0023219374444738723, "phrase": "bpel_specifications"}, {"score": 0.0022967713922705, "phrase": "web_service_coordination_protocols"}, {"score": 0.0021987994275190314, "phrase": "service_composition_processes"}, {"score": 0.0021049977753042253, "phrase": "current_technologies"}], "paper_keywords": ["Web services", " transaction management", " business process execution language"], "paper_abstract": "Service-Oriented Computing (SOC) is becoming the mainstream development paradigm of applications over the Internet, taking advantage of remote independent functionalities. The cornerstone of SOC's success lies in the potential advantage of composing services on the fly. When the control over the communication and the elements of the information system is low, developing solid systems is challenging. In particular, developing reliable web service compositions usually requires the integration of both composition languages, such as the Business Process Execution Language (BPEL), and of coordination protocols, such as WS-AtomicTransaction and WS-BusinessActivity. Unfortunately, the composition and coordination of web services currently have separate languages and specifications. The goal of this paper is twofold. First, we identify the major requirements of transaction management in Service-oriented systems and survey the relevant standards. Second, we propose a semiautomatic approach to integrate BPEL specifications and web service coordination protocols, that is, implementing transaction management within service composition processes, and thus overcoming the limitations of current technologies.", "paper_title": "Transaction Management in Service-Oriented Systems: Requirements and a Proposal", "paper_id": "WOS:000300880100008"}