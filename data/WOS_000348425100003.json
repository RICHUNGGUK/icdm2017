{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "modular_projects"}, {"score": 0.00443308765153716, "phrase": "so-called_'modular'_projects"}, {"score": 0.004195418010131832, "phrase": "np-hard_problem"}, {"score": 0.004007083686875716, "phrase": "existing_branch"}, {"score": 0.0037921662574137535, "phrase": "dynamic-programming_algorithms"}, {"score": 0.0036218682585355895, "phrase": "small_to_medium-size_instances"}, {"score": 0.0031845067058084583, "phrase": "large_instances"}, {"score": 0.0027741761880779535, "phrase": "low_network_density"}, {"score": 0.0026986685585382347, "phrase": "proposed_heuristic"}, {"score": 0.0026252106881752067, "phrase": "existing_results"}, {"score": 0.0025071862539276283, "phrase": "sequential_testing"}], "paper_keywords": ["Scheduling", " Greedy heuristics", " Modular projects"], "paper_abstract": "This article describes a heuristic for scheduling so-called 'modular' projects. Exact solutions to this NP-hard problem can be obtained with existing branch-and-bound and dynamic-programming algorithms, but only for small to medium-size instances. The proposed heuristic, by contrast, can be used even for large instances, or when instances are particularly difficult because of their characteristics, such as a low network density. The proposed heuristic draws from existing results in the literature on sequential testing, which will be briefly reviewed. The performance of the heuristic is assessed over a dataset of 360 instances.", "paper_title": "A fast greedy heuristic for scheduling modular projects", "paper_id": "WOS:000348425100003"}