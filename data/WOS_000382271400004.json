{"auto_keywords": [{"score": 0.03843856552198327, "phrase": "dytaint"}, {"score": 0.004741845603430361, "phrase": "information_flow"}, {"score": 0.004669845451682529, "phrase": "dynamic_taint_analysis"}, {"score": 0.004581373625744533, "phrase": "wide_range"}, {"score": 0.004392565073466714, "phrase": "substantial_runtime_overhead"}, {"score": 0.0042928648367867835, "phrase": "potential_threats"}, {"score": 0.004179392391349015, "phrase": "interested_analyst"}, {"score": 0.004068907083697369, "phrase": "source_code"}, {"score": 0.0034512514926836667, "phrase": "lower_runtime_overhead"}, {"score": 0.003308862957060602, "phrase": "special_hardware_assistance"}, {"score": 0.003221316290858497, "phrase": "untainted_states"}, {"score": 0.002960922610176301, "phrase": "software_vulnerabilities"}, {"score": 0.0029270797740550973, "phrase": "new_chaining_hash_table"}, {"score": 0.0028496055358577512, "phrase": "taint_information"}, {"score": 0.002806256131739047, "phrase": "accessing_time"}, {"score": 0.0026494723416072316, "phrase": "irrelevant_api"}, {"score": 0.002599177223533834, "phrase": "function_recognition_method"}, {"score": 0.002579326836642461, "phrase": "basic_block_handling"}, {"score": 0.0025110337774260773, "phrase": "runtime_performance"}, {"score": 0.0024633601573822114, "phrase": "testing_results"}, {"score": 0.0021539955106204354, "phrase": "potential_ones"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Dynamic binary taint analysis", " Software security", " Controlled-taint", " Chaining Hash Table", " Irrelevant API filtration"], "paper_abstract": "By analyzing information flow at runtime, dynamic taint analysis can precisely detect a wide range of vulnerabilities of software. However, it suffers from substantial runtime overhead and is incapable of discovering potential threats. Yet, realistically, the interested analyst doesn't have access to the source code of the malware. Therefore, the task of software flaw tracking becomes rather complicated. In order to cope with these issues, this paper proposes Dytaint, a novel lightweight 3-state dynamic taint analysis framework, for diagnosing more software vulnerabilities with lower runtime overhead. The framework works for the x86 binary executables and requires no special hardware assistance. Besides the tainted and the untainted states that are discussed by many popularly used taint analysis tools, the third state, controlled-taint state, is proposed to detect more types of software vulnerabilities. The new Chaining Hash Table which reduces the space for storing taint information without increasing the accessing time is also incorporated in the framework. Furthermore, two mechanisms, namely, the irrelevant API filtering based on the function recognition method and basic block handling, are introduced to optimize the runtime performance of our framework. The testing results by running SPEC CINT2006 benchmarks and various popular software have demonstrated that Dytaint is efficient which incurs only 3.1 times overhead to the native on average and practical which is able to discover not only all the real threats but also most of the potential ones. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Dytaint: The implementation of a novel lightweight 3-state dynamic taint analysis framework for x86 binary programs", "paper_id": "WOS:000382271400004"}