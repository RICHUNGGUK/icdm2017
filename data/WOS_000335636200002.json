{"auto_keywords": [{"score": 0.04962396550254858, "phrase": "java"}, {"score": 0.015719074116237117, "phrase": "richer_annotation_model"}, {"score": 0.004418287966422041, "phrase": "arbitrary_meta-data"}, {"score": 0.00409310463335204, "phrase": "programming_languages"}, {"score": 0.00305762327908599, "phrase": "code_block"}, {"score": 0.002942811795757911, "phrase": "dynamically_evaluated_members"}, {"score": 0.0027129118211250336, "phrase": "expression_level"}, {"score": 0.002611010097359509, "phrase": "runtime-evaluated_expressions"}, {"score": 0.002537097217899195, "phrase": "java_annotation_model"}, {"score": 0.0024301229420875155, "phrase": "block_and_expression_annotations"}, {"score": 0.002305468528385778, "phrase": "dynamically_evaluated_values"}, {"score": 0.0022401855403251653, "phrase": "extended_reflection_api"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Java", " Meta-data", " Annotations", " Reflection"], "paper_abstract": "The ability to annotate code and, in general, the capability to attach arbitrary meta-data to portions of a program are features that have become more and more common in programming languages. Annotations in Java make it possible to attach custom, structured meta-data to declarations of classes, fields and methods. However, the mechanism has some limits: annotations can only decorate declarations and their instantiation can only be resolved statically. With this work, we propose an extension to Java (named @Java) with a richer annotation model, supporting code block and expression annotations, as well as dynamically evaluated members. In other words, in our model, the granularity of annotations extends to the statement and expression level and annotations may hold the result of runtime-evaluated expressions. Our extension to the Java annotation model is twofold: (i) we introduced block and expression annotations and (ii) we allow every annotation to hold dynamically evaluated values. Our implementation also provides an extended reflection API to support inspection and retrieval of our enhanced annotations. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "@Java: Bringing a richer annotation model to Java", "paper_id": "WOS:000335636200002"}