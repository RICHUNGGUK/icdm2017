{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "memory_allocation"}, {"score": 0.004685029735798928, "phrase": "socs"}, {"score": 0.0046340196745259694, "phrase": "linear_programming"}, {"score": 0.004222299135545249, "phrase": "available_components"}, {"score": 0.003826007045267751, "phrase": "structured_method"}, {"score": 0.0037226570791514184, "phrase": "mapping_applications"}, {"score": 0.0036419834462626125, "phrase": "chosen_configuration"}, {"score": 0.0032107911131811057, "phrase": "task_scheduling"}, {"score": 0.0031584367879334114, "phrase": "packing_problem"}, {"score": 0.0031069334778456633, "phrase": "needed_memory_area"}, {"score": 0.002925149105307855, "phrase": "automated_performance_analysis"}, {"score": 0.0028305047329728254, "phrase": "high_abstraction_level"}, {"score": 0.0026213749921120623, "phrase": "large_quantity"}, {"score": 0.002592784882557155, "phrase": "possible_systems"}, {"score": 0.0021049977753042253, "phrase": "linear_program"}], "paper_keywords": [""], "paper_abstract": "Applications for system on chips become more and more complex. Also the number of available components (DSPs, ASICs, Memories, etc.) rises continuously. These facts necessitate a structured method for selecting components, mapping applications and evaluating the chosen configuration and mapping. In this work we present a methodology for the last named. We will consider optimization of memory allocation and task scheduling as a packing problem and minimize needed memory area. The results can be used as one element of an automated performance analysis for a given system on a high abstraction level. This analysis is essential for establishing a framework that iterates over a large quantity of possible systems. Considering a part of the H.264 codec as an example we will illustrate the results. Furthermore we will show that results can be retrieved fast compared to other NP-hard problems due to intelligent formulation of conditions within the linear program.", "paper_title": "An optimization methodology for memory allocation and task scheduling in SoCs via linear programming", "paper_id": "WOS:000239423500011"}