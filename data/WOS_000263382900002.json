{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed-memory_architectures"}, {"score": 0.0047135086583390585, "phrase": "machine-generated_relational_databases"}, {"score": 0.004402973626416765, "phrase": "useful_information"}, {"score": 0.004328576620172575, "phrase": "manual_means"}, {"score": 0.004219321533320583, "phrase": "focus_machine"}, {"score": 0.004201381218977942, "phrase": "learning_techniques"}, {"score": 0.0041657281535389615, "phrase": "inductive_logic_programming"}, {"score": 0.004008981656795115, "phrase": "human-comprehensible_models"}, {"score": 0.00397495478332679, "phrase": "complex_relational_data"}, {"score": 0.003841699919521703, "phrase": "ilp_techniques"}, {"score": 0.0036191240628152205, "phrase": "discrete_optimisation"}, {"score": 0.0033804443117334535, "phrase": "super-linear_function"}, {"score": 0.00317095235382607, "phrase": "theoretical_bounds"}, {"score": 0.003130633384437765, "phrase": "worst-case_complexity"}, {"score": 0.0030515222178491923, "phrase": "practical_gains"}, {"score": 0.002961741486178455, "phrase": "multiple_processors"}, {"score": 0.002742787059497186, "phrase": "parallel_algorithms"}, {"score": 0.0026734504926268442, "phrase": "standard_benchmarks"}, {"score": 0.0026394405584281443, "phrase": "principal_findings"}, {"score": 0.0022634699331607615, "phrase": "single_one"}, {"score": 0.0022251433045184454, "phrase": "best_results"}], "paper_keywords": ["ILP", " Parallelism", " Efficiency"], "paper_abstract": "The growth of machine-generated relational databases, both in the sciences and in industry, is rapidly outpacing our ability to extract useful information from them by manual means. This has brought into focus machine learning techniques like Inductive Logic Programming (ILP) that are able to extract human-comprehensible models for complex relational data. The price to pay is that ILP techniques are not efficient: they can be seen as performing a form of discrete optimisation, which is known to be computationally hard; and the complexity is usually some super-linear function of the number of examples. While little can be done to alter the theoretical bounds on the worst-case complexity of ILP systems, some practical gains may follow from the use of multiple processors. In this paper we survey the state-of-the-art on parallel ILP. We implement several parallel algorithms and study their performance using some standard benchmarks. The principal findings of interest are these: (1) of the techniques investigated, one that simply constructs models in parallel on each processor using a subset of data and then combines the models into a single one, yields the best results; and (2) sequential (approximate) ILP algorithms based on randomized searches have lower execution times than (exact) parallel algorithms, without sacrificing the quality of the solutions found.", "paper_title": "Parallel ILP for distributed-memory architectures", "paper_id": "WOS:000263382900002"}