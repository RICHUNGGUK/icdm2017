{"auto_keywords": [{"score": 0.033584823761096574, "phrase": "timing_flows"}, {"score": 0.00481495049065317, "phrase": "gate-level_properties"}, {"score": 0.004783105609960904, "phrase": "identify_hardware_timing_channels"}, {"score": 0.004751470337792407, "phrase": "modern_embedded_computing_systems"}, {"score": 0.004704407458864224, "phrase": "medical_devices"}, {"score": 0.003998223112665124, "phrase": "significant_challenge"}, {"score": 0.0037913267098534887, "phrase": "timing_channels"}, {"score": 0.003704196857903231, "phrase": "recent_research"}, {"score": 0.00367967106192446, "phrase": "hardware_security"}, {"score": 0.0036553070575015344, "phrase": "information_flow_tracking_techniques"}, {"score": 0.0036070601923916196, "phrase": "hardware_or_gate_level_show_promise"}, {"score": 0.003477628306017313, "phrase": "formal_statements"}, {"score": 0.0034431390653713173, "phrase": "claim_nor_mechanisms"}, {"score": 0.0032324864013225166, "phrase": "gate-level_information_flow_tracking"}, {"score": 0.002955050521440921, "phrase": "different_type"}, {"score": 0.002701361707441567, "phrase": "previous_work"}, {"score": 0.0026834578825190407, "phrase": "hardware_information_flow_tracking"}, {"score": 0.0024125742420201, "phrase": "mips-based_processor"}, {"score": 0.002133196554995389, "phrase": "timing_and_functional_flows"}], "paper_keywords": ["Hardware security", " information flow tracking", " testing", " timing channels"], "paper_abstract": "Modern embedded computing systems such as medical devices, airplanes, and automobiles continue to dominate some of the most critical aspects of our lives. In such systems, the movement of information throughout a device must be tightly controlled to prevent violations of privacy or integrity. Unfortunately, bounding the flow of information can often present a significant challenge, as information can flow through channels that are difficult to detect, such as timing channels. As has been demonstrated by recent research in hardware security, information flow tracking techniques deployed at the hardware or gate level show promise at identifying these \"timing flows\" but provide no formal statements about this claim NOR mechanisms for separating out timing information from other types of flows. In this paper, we first prove that gate-level information flow tracking can in fact detect timing flows. In addition, we work to identify these timing flows separately from other flows by presenting a framework for identifying a different type of flow that we call functional flows. By using this framework to either confirm or rule out the existence of such flows, we leverage the previous work in hardware information flow tracking to effectively isolate timing flows. To show the effectiveness of this model, we demonstrate its usage on three practical examples: a shared bus ((IC)-C-2), a cache in a MIPS-based processor, and an RSA encryption core, all of which were written in Verilog/VHDL and then simulated in a variety of scenarios. In each scenario, we demonstrate how our framework can be used to identify timing and functional flows and also analyze our model's overhead.", "paper_title": "Leveraging Gate-Level Properties to Identify Hardware Timing Channels", "paper_id": "WOS:000344528500002"}