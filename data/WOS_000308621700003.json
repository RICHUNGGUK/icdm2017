{"auto_keywords": [{"score": 0.05007838762916156, "phrase": "dynamic_binary_translation"}, {"score": 0.0491410816092368, "phrase": "dbt"}, {"score": 0.031072271413261562, "phrase": "software_cache"}, {"score": 0.004628101576367193, "phrase": "important_technique"}, {"score": 0.004470539706227421, "phrase": "legacy_binaries"}, {"score": 0.004339744430169516, "phrase": "new_architecture"}, {"score": 0.004254671386496732, "phrase": "poor_profile_information"}, {"score": 0.004029187256595917, "phrase": "dbt_system"}, {"score": 0.00395017798595193, "phrase": "substantial_overhead"}, {"score": 0.0037407704200033607, "phrase": "static-integrated_optimization_framework"}, {"score": 0.0036133077234252633, "phrase": "runtime_performance"}, {"score": 0.003577691744033585, "phrase": "dbt."}, {"score": 0.0035424245257172234, "phrase": "static_and_dynamic_approaches"}, {"score": 0.0031297538950335233, "phrase": "source_image"}, {"score": 0.003023047748772801, "phrase": "information_and_target_code"}, {"score": 0.002834409847642238, "phrase": "future_runs"}, {"score": 0.0027787638791664663, "phrase": "static_phase"}, {"score": 0.002737745536992088, "phrase": "saved_code"}, {"score": 0.002579622880371082, "phrase": "previous_run"}, {"score": 0.0024916260764216752, "phrase": "code_layout"}, {"score": 0.0024306105794630246, "phrase": "experimental_results"}, {"score": 0.0023828731731474306, "phrase": "proposed_framework"}, {"score": 0.0023476849595393872, "phrase": "run_time"}, {"score": 0.0022563636435096457, "phrase": "original_versions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Dynamic binary translation", " Static analysis", " Profile-directed optimization", " Software code cache", " Code layout"], "paper_abstract": "Dynamic binary translation (DBT) is an important technique in virtualization, and in migrating legacy binaries to platforms based on a new architecture. However, poor profile information limits the process of optimization at runtime, so the DBT system may suffer from substantial overhead. In this paper, we design and implement a static-integrated optimization framework (SINOF) to improve the runtime performance for DBT. Combining static and dynamic approaches can greatly reduce the overhead of optimizing, profiling and translating for any program that runs repeatedly. Under this framework, once the source image has been executed, the profile information and target code will be saved in a software cache, and will be available for future runs. In the static phase, the saved code is analyzed and optimized based on the information collected in the previous run. Especially, we reorganize the code layout of the software cache. Experimental results show that the proposed framework can reduce run time by more than 30% on average compared to the original versions of DBT that the framework is based on. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "SINOF: A dynamic-static combined framework for dynamic binary translation", "paper_id": "WOS:000308621700003"}