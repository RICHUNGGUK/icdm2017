{"auto_keywords": [{"score": 0.04130850338691796, "phrase": "test_cases"}, {"score": 0.005820253025664389, "phrase": "unusable_test_cases"}, {"score": 0.005244534772740654, "phrase": "large_number"}, {"score": 0.00481495049065317, "phrase": "sequence-based_gui_test_suites"}, {"score": 0.004704699244406775, "phrase": "graphical_user_interfaces"}, {"score": 0.004596960835906736, "phrase": "large_part"}, {"score": 0.004388796812234033, "phrase": "rapid_prototyping"}, {"score": 0.004304856672196293, "phrase": "effective_regression_testing_techniques"}, {"score": 0.004190019394361629, "phrase": "gui_regression_testing"}, {"score": 0.004109865377936045, "phrase": "traditional_software"}, {"score": 0.0038934666267504596, "phrase": "original_gui's_suite"}, {"score": 0.0037749456215035856, "phrase": "modified_gui."}, {"score": 0.003745881316228299, "phrase": "gui_test_case_generation"}, {"score": 0.0035076666315744525, "phrase": "suite's_event_coverage"}, {"score": 0.003123527559542239, "phrase": "new_gui_regression_testing_technique"}, {"score": 0.003051887221639784, "phrase": "usable_and_unusable_test_cases"}, {"score": 0.00297037471252423, "phrase": "gui_modification"}, {"score": 0.0027813397260607487, "phrase": "modified_gui"}, {"score": 0.002644920521740564, "phrase": "regression_testing_technique"}, {"score": 0.002554406040896888, "phrase": "empirical_study"}, {"score": 0.0021049977753042253, "phrase": "\"dominator\"_events"}], "paper_keywords": ["Verification", " Reliability", " Graphical user interfaces", " regression testing", " test maintenance", " repairing test cases", " test case management"], "paper_abstract": "Although graphical user interfaces (GUIs) constitute a large part of the software being developed today and are typically created using rapid prototyping, there are no effective regression testing techniques for GUIs. The needs of GUI regression testing differ from those of traditional software. When the structure of a GUI is modified, test cases from the original GUI's suite are either reusable or unusable on the modified GUI. Because GUI test case generation is expensive, our goal is to make the unusable test cases usable, thereby helping to retain the suite's event coverage. The idea of reusing these unusable (obsolete) test cases has not been explored before. This article shows that a large number of test cases become unusable for GUIs. It presents a new GUI regression testing technique that first automatically determines the usable and unusable test cases from a test suite after a GUI modification, then determines the unusable test cases that can be repaired so that they can execute on the modified GUI, and finally uses repairing transformations to repair the test cases. This regression testing technique along with four repairing transformations has been implemented. An empirical study for four open-source applications demonstrates that (1) this approach is effective in that many of the test cases can be repaired, and is practical in terms of its time performance, (2) certain types of test cases are more prone to becoming unusable, and (3) certain types of \"dominator\" events, when modified, make a large number of test cases unusable.", "paper_title": "Automatically Repairing Event Sequence-Based GUI Test Suites for Regression Testing", "paper_id": "WOS:000262454800001"}