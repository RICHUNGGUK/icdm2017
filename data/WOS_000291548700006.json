{"auto_keywords": [{"score": 0.045606436272232535, "phrase": "unisim_cycle-level_simulations"}, {"score": 0.04054987344772189, "phrase": "proposed_framework"}, {"score": 0.00481495049065317, "phrase": "unisim-based_cycle-level_microarchitectural_simulations"}, {"score": 0.0046986841646790315, "phrase": "unisim"}, {"score": 0.004323886831151445, "phrase": "large-scale_multiprocessor_systems"}, {"score": 0.004037694641919865, "phrase": "systematic_framework"}, {"score": 0.003770373393393271, "phrase": "fine-grained_parallelism"}, {"score": 0.003715425273229361, "phrase": "simulated_cycles"}, {"score": 0.0036792371574197826, "phrase": "posix_threads"}, {"score": 0.0036256123915754303, "phrase": "multithreaded_simulation_engine"}, {"score": 0.003520687960750365, "phrase": "single-threaded_unisim_systemc_engine"}, {"score": 0.0034187896011435245, "phrase": "inherent_parallelism"}, {"score": 0.003368948014436939, "phrase": "adaptive_technique"}, {"score": 0.003303617297414837, "phrase": "overall_computation_workload"}, {"score": 0.0028944757265206332, "phrase": "multithreaded_executions"}, {"score": 0.002769650208851401, "phrase": "systemc_objects"}, {"score": 0.0027026375053777543, "phrase": "graph-partitioning-based_technique"}, {"score": 0.002511147699138714, "phrase": "nonautomated_and_fully_automated_adaptive_multithreaded_simulations"}, {"score": 0.002414616656410503, "phrase": "notable_acceleration"}, {"score": 0.0021049977753042253, "phrase": "many-core_systems"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Measurement", " Performance", " Simulation", " parallelization", " parallelization of SystemC engine", " cycle-level microarchitectural simulation", " multi-/many-core systems", " UNISIM"], "paper_abstract": "UNISIM has been shown to ease the development of simulators for multi-/many-core systems. However, UNISIM cycle-level simulations of large-scale multiprocessor systems could be very time consuming. In this article, we propose a systematic framework for accelerating UNISIM cycle-level simulations on multicore platforms. The proposed framework relies on exploiting the fine-grained parallelism within the simulated cycles using POSIX threads. A multithreaded simulation engine has been devised from the single-threaded UNISIM SystemC engine to facilitate the exploitation of inherent parallelism. An adaptive technique that manages the overall computation workload by adjusting the number of threads employed at any given time is proposed. In addition, we have introduced a technique to balance the workloads of multithreaded executions. This load balancing involves the distributions of SystemC objects among threads. A graph-partitioning-based technique has been introduced to automate such distributions. Finally, two strategies are proposed for realizing nonautomated and fully automated adaptive multithreaded simulations, respectively. Our investigations show that notable acceleration can be achieved by deploying the proposed framework. In particular, we show that simulations on an 8-core multicore platform can provide for close to 6X speedups when simulating many-core systems with large number of cores.", "paper_title": "Accelerating UNISIM-Based Cycle-Level Microarchitectural Simulations on Multicore Platforms", "paper_id": "WOS:000291548700006"}