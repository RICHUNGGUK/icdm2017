{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "recursive_types"}, {"score": 0.00456020621016909, "phrase": "operational_domain_theory"}, {"score": 0.004225950334493496, "phrase": "contextual_equivalence"}, {"score": 0.004090274535243564, "phrase": "principal_approach"}, {"score": 0.0038737214010638745, "phrase": "classical_domain_theory"}, {"score": 0.0034366728236876016, "phrase": "usual_inverse_limits_constructions"}, {"score": 0.0030157628075954588, "phrase": "operational_semantics"}, {"score": 0.002887210021573995, "phrase": "type_expressions"}, {"score": 0.0027341763737751467, "phrase": "'syntactic'_categories"}, {"score": 0.0026175952455594277, "phrase": "algebraic_compactness"}, {"score": 0.002347378595930709, "phrase": "operational_version"}, {"score": 0.0022718774783143203, "phrase": "minimal_invariance_property"}, {"score": 0.0021049977753042253, "phrase": "purely_operational_proof"}], "paper_keywords": [""], "paper_abstract": "We develop an operational domain theory for treating recursive types with respect to contextual equivalence. The principal approach we take deviates from classical domain theory in that we do not produce the recursive types using the usual inverse limits constructions - we get them for free by working directly with the operational semantics. By extending type expressions to functors between some 'syntactic' categories, we establish algebraic compactness. To do this, we rely on an operational version of the minimal invariance property, for which we give a purely operational proof.", "paper_title": "An operational domain-theoretic treatment of recursive types", "paper_id": "WOS:000348597100001"}