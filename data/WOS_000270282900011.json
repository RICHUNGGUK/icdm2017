{"auto_keywords": [{"score": 0.04603595581241765, "phrase": "ldpc_decoders"}, {"score": 0.013661156848203813, "phrase": "tanner_graph"}, {"score": 0.00481495049065317, "phrase": "stream-based_computing_approach"}, {"score": 0.004518442937844318, "phrase": "powerful_error_correcting_codes"}, {"score": 0.004452641437293878, "phrase": "recent_communication_standards"}, {"score": 0.004323886831151445, "phrase": "belief_propagation_algorithms"}, {"score": 0.004037694641919865, "phrase": "hardware-based_dedicated_solutions"}, {"score": 0.003959447096055027, "phrase": "exponential_increase"}, {"score": 0.003901754272977278, "phrase": "computational_power"}, {"score": 0.003863758357292741, "phrase": "commodity_graphics_processing_units"}, {"score": 0.003770373393393271, "phrase": "new_opportunities"}, {"score": 0.0036792371574197826, "phrase": "general_purpose_processing"}, {"score": 0.0034524248924699985, "phrase": "flexible_and_programmable_ldpc_decoders"}, {"score": 0.0034020946201397057, "phrase": "new_stream-based_approach"}, {"score": 0.003303617297414837, "phrase": "compact_data_structures"}, {"score": 0.00311510526624626, "phrase": "stream-based_computing"}, {"score": 0.003054681986032532, "phrase": "irregular_memory_access_patterns"}, {"score": 0.0029807934480637855, "phrase": "recursive_flow_control_constraints"}, {"score": 0.002689430273401131, "phrase": "caravela_platform"}, {"score": 0.0026501935378083663, "phrase": "generic_interface_tool"}, {"score": 0.002598764579760562, "phrase": "kernels'_execution"}, {"score": 0.002548331088496964, "phrase": "gpu_manufacturer"}, {"score": 0.002523481637809674, "phrase": "operating_system"}, {"score": 0.0024264776194357993, "phrase": "obtained_results"}, {"score": 0.002333193766510394, "phrase": "general_purpose_processors"}, {"score": 0.002125735077004312, "phrase": "processing_time"}], "paper_keywords": ["data-parallel computing", " graphics processing unit (GPU)", " Caravela", " low-density parity-check (LDPC) code", " error correcting code"], "paper_abstract": "Low-Density Parity-Check (LDPC) codes are powerful error correcting codes adopted by recent communication standards. LDPC decoders are based on belief propagation algorithms, which make use of a Tanner graph and very intensive message-passing computation, and usually require hardware-based dedicated solutions. With the exponential increase of the computational power of commodity graphics processing units (GPUs), new opportunities have arisen to develop general purpose processing on GPUs. This paper proposes the use of GPUs for implementing flexible and programmable LDPC decoders. A new stream-based approach is proposed, based on compact data structures to represent the Tanner graph. It is shown that such a challenging application for stream-based computing, because of irregular memory access patterns, memory bandwidth and recursive flow control constraints, can be efficiently implemented on GPUs. The proposal was experimentally evaluated by programming LDPC decoders on GPUs using the Caravela platform, a generic interface tool for managing the kernels' execution regardless of the GPU manufacturer and operating system. Moreover, to relatively assess the obtained results, we have also implemented LDPC decoders on general purpose processors with Streaming Single Instruction Multiple Data (SIMD) Extensions. Experimental results show that the solution proposed here efficiently decodes several code words simultaneously, reducing the processing time by one order of magnitude.", "paper_title": "Parallel LDPC Decoding on GPUs Using a Stream-Based Computing Approach", "paper_id": "WOS:000270282900011"}