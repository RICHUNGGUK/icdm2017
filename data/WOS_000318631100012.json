{"auto_keywords": [{"score": 0.036032070736439915, "phrase": "abp"}, {"score": 0.027069927767498263, "phrase": "dataflow_analysis"}, {"score": 0.00481495049065317, "phrase": "faster_program_adaptation"}, {"score": 0.004781777766309739, "phrase": "reward_attribution_inference"}, {"score": 0.004716113134313215, "phrase": "adaptation-based_programming"}, {"score": 0.004571630734130793, "phrase": "variable_parts"}, {"score": 0.004540126719762935, "phrase": "function_calls"}, {"score": 0.0045088388224419, "phrase": "parameter_values"}, {"score": 0.004325568312096711, "phrase": "different_values"}, {"score": 0.00425141240073214, "phrase": "reward_statements"}, {"score": 0.0038857317730249114, "phrase": "high_score"}, {"score": 0.0037148167062767096, "phrase": "machine_learning_component"}, {"score": 0.003576060405460302, "phrase": "automatic_choices"}, {"score": 0.0035268943257252224, "phrase": "variable_program_parts"}, {"score": 0.0034424690391411093, "phrase": "optimal_strategy"}, {"score": 0.003360057874429478, "phrase": "semi-automatic_program_generation"}, {"score": 0.003234509549830177, "phrase": "standard_machine-learning_techniques"}, {"score": 0.003190024306903021, "phrase": "design_space"}, {"score": 0.003102875178186416, "phrase": "optimal_instance"}, {"score": 0.0030708096989903945, "phrase": "program_template"}, {"score": 0.002976581914095474, "phrase": "non-machine-learning_experts"}, {"score": 0.0029052913631676435, "phrase": "self-optimizing_programs"}, {"score": 0.002739165532192527, "phrase": "detrimental_effect"}, {"score": 0.002701474449898187, "phrase": "optimal_solution"}, {"score": 0.0026735459686033627, "phrase": "program-generation_problem"}, {"score": 0.002520637941597506, "phrase": "influence_tracks"}, {"score": 0.0024096216848276094, "phrase": "augmented_machine-learning_technique"}, {"score": 0.002164180792169302, "phrase": "adaptive_program"}, {"score": 0.002119640369431708, "phrase": "program_maintenance"}], "paper_keywords": ["Languages", " Partial Programming", " Program Adaptation", " Reinforcement Learning"], "paper_abstract": "In the adaptation-based programming (ABP) paradigm, programs may contain variable parts (function calls, parameter values, etc.) that can be take a number of different values. Programs also contain reward statements with which a programmer can provide feedback about how well a program is performing with respect to achieving its goals (for example, achieving a high score on some scale). By repeatedly running the program, a machine learning component will, guided by the rewards, gradually adjust the automatic choices made in the variable program parts so that they converge toward an optimal strategy. ABP is a method for semi-automatic program generation in which the choices and rewards offered by programmers allow standard machine-learning techniques to explore a design space defined by the programmer to find an optimal instance of a program template. ABP effectively provides a DSL that allows non-machine-learning experts to exploit machine learning to generate self-optimizing programs. Unfortunately, in many cases the placement and structuring of choices and rewards can have a detrimental effect on how an optimal solution to a program-generation problem can be found. To address this problem, we have developed a dataflow analysis that computes influence tracks of choices and rewards. This information can be exploited by an augmented machine-learning technique to ignore misleading rewards and to generally attribute rewards better to the choices that have actually influenced them. Moreover, this technique allows us to detect errors in the adaptive program that might arise out of program maintenance. Our evaluation shows that the dataflow analysis can lead to improvements in performance.", "paper_title": "Faster Program Adaptation Through Reward Attribution Inference", "paper_id": "WOS:000318631100012"}