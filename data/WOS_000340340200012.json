{"auto_keywords": [{"score": 0.043984116010037974, "phrase": "simulation_parameters"}, {"score": 0.00481495049065317, "phrase": "physical_parameters"}, {"score": 0.004731742784143153, "phrase": "python"}, {"score": 0.00450933377534525, "phrase": "python_programming_language"}, {"score": 0.004450568197899267, "phrase": "automated_algorithmic_optimization"}, {"score": 0.0044118153390803405, "phrase": "physical_and_numerical_parameters"}, {"score": 0.004354315061804687, "phrase": "python-based_environment"}, {"score": 0.004024651422626329, "phrase": "new_diagnostics"}, {"score": 0.003937573222812911, "phrase": "internal_data"}, {"score": 0.0038355531523269217, "phrase": "iterative_optimization_approach"}, {"score": 0.003752550907120244, "phrase": "programmable_interactive_feedback_loop_style_simulation_model"}, {"score": 0.003607630811220324, "phrase": "programmable_function"}, {"score": 0.0035141291835319682, "phrase": "previous_one"}, {"score": 0.003247868216333148, "phrase": "space_charge_effects"}, {"score": 0.003219553875143356, "phrase": "bipolar_flow"}, {"score": 0.0031498398446368025, "phrase": "analytical_solution"}, {"score": 0.0029886047149545025, "phrase": "upstream_ion_current"}, {"score": 0.0028108690791085536, "phrase": "feedback_scheme"}, {"score": 0.0027140798043053986, "phrase": "modeling_approach"}, {"score": 0.00266693888510356, "phrase": "ion_mass"}, {"score": 0.0026091594819333654, "phrase": "simulation_time"}, {"score": 0.0025638362414466278, "phrase": "ultimate_result"}, {"score": 0.0023487324083283205, "phrase": "algorithmic_results"}, {"score": 0.0022579036318895753, "phrase": "physical_or_numerical_parameter_tuning"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Particle-in-cell", " Plasma", " Python", " Simulation", " Bipolar"], "paper_abstract": "A particle-in-cell (PIC) simulation tool, OOPD1, is wrapped in the Python programming language, enabling automated algorithmic optimization of physical and numerical parameters. The Python-based environment exposes internal variables, enabling modification of simulation parameters, as well as run-time generation of new diagnostics based on calculations with internal data. For problems requiring an iterative optimization approach, this enables a programmable interactive feedback loop style simulation model, where the input to one simulation is a programmable function of the output of the previous one. This approach is applied to field-emission of electrons in a diode, in order to explore space charge effects in bipolar flow. We find an analytical solution for maximizing the space-charge limited current through a diode with an upstream ion current, and confirm the result with simulations, demonstrating the efficacy of the feedback scheme. We also demonstrate and analyze a modeling approach for scaling the ion mass, which can shorten simulation time without changing the ultimate result. The methods presented can be generalized to handle other applications where it is desirable to evolve simulation parameters based on algorithmic results from the simulation, including models in which physical or numerical parameter tuning is used to converge or optimize a system in one or more variables. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Optimizing physical parameters in 1-D particle-in-cell simulations with Python", "paper_id": "WOS:000340340200012"}