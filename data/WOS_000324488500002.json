{"auto_keywords": [{"score": 0.04268813213127871, "phrase": "type_legalization"}, {"score": 0.00481495049065317, "phrase": "sparse_simd_instruction_set"}, {"score": 0.004748556604045108, "phrase": "simd_vector_units"}, {"score": 0.004491970050862321, "phrase": "vectorizing_compilers"}, {"score": 0.004338661611644755, "phrase": "multiple_conflicting_techniques"}, {"score": 0.004249188865832993, "phrase": "arbitrary_vector_types"}, {"score": 0.004190563478825626, "phrase": "register-sized_data_types"}, {"score": 0.0038822311096089307, "phrase": "predefined_rules"}, {"score": 0.00342568771304873, "phrase": "simd_instruction_sets"}, {"score": 0.003086396772496527, "phrase": "new_technique"}, {"score": 0.002742196991950893, "phrase": "multiple_techniques"}, {"score": 0.002505054869094183, "phrase": "available_instruction"}, {"score": 0.0022567398334877847, "phrase": "program-dependent_hybrid_type_legalization"}, {"score": 0.002164432930854161, "phrase": "vector_programs"}, {"score": 0.0021049977753042253, "phrase": "existing_legalization_method"}], "paper_keywords": ["Design", " Algorithms", " Performance", " Compiler", " SIMD", " vector"], "paper_abstract": "SIMD vector units implement only a subset of the operations used by vectorizing compilers, and there are multiple conflicting techniques to legalize arbitrary vector types into register-sized data types. Traditionally, type legalization is performed using a set of predefined rules, regardless of the operations used in the program. This method is not suitable to sparse SIMD instruction sets and often prevents the vectorization of programs. In this work we introduce a new technique for type legalization, namely vector element promotion, as well as a hybrid method for combining multiple techniques of type legalization. Our hybrid type legalization method makes decisions based on the knowledge of the available instruction set as well as the operations used in the program. Our experimental results demonstrate that program-dependent hybrid type legalization improves the execution time of vector programs, outperforms the existing legalization method, and allows the vectorization of workloads which were not vectorized before.", "paper_title": "Hybrid Type Legalization for a Sparse SIMD Instruction Set", "paper_id": "WOS:000324488500002"}