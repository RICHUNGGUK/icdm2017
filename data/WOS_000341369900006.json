{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "formal_method"}, {"score": 0.00422177384286051, "phrase": "software_systems"}, {"score": 0.004066076430818046, "phrase": "joint_specification"}, {"score": 0.003990385737207714, "phrase": "functionality_and_confidentiality_attributes"}, {"score": 0.0037363527852791573, "phrase": "circus"}, {"score": 0.003369322866499541, "phrase": "system's_behaviour"}, {"score": 0.002613709503583786, "phrase": "insecure_functionality"}, {"score": 0.0023789822182914877, "phrase": "system_design's_functionality_and_confidentiality_attributes"}, {"score": 0.0021049977753042253, "phrase": "refinement_steps"}], "paper_keywords": ["Information flow security", " Confidentiality properties", " Circus", " Unifying theories of programming", " Miracles", " Confidentiality-preserving refinement"], "paper_abstract": "This paper proposes a formal method, based on Circus, for developing software systems that respect a joint specification of functionality and confidentiality attributes. We extend the semantics of Circus to capture the information that users can infer about a system's behaviour, enabling confidentiality and functionality attributes of a system to be specified together. We represent inconsistencies between functionality and confidentiality properties as miracles, rendering insecure functionality infeasible. We present techniques for verifying that a system design's functionality and confidentiality attributes are mutually consistent, and for ensuring that consistency is maintained by refinement steps.", "paper_title": "On integrating confidentiality and functionality in a formal method", "paper_id": "WOS:000341369900006"}