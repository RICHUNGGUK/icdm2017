{"auto_keywords": [{"score": 0.037591611266913565, "phrase": "traceability_link"}, {"score": 0.033579580662129224, "phrase": "run-time_verification"}, {"score": 0.00481495049065317, "phrase": "evolving_systems"}, {"score": 0.004780030485538593, "phrase": "security-critical_systems"}, {"score": 0.004460609967916904, "phrase": "current_software_systems"}, {"score": 0.004348363291608004, "phrase": "implementation_levels"}, {"score": 0.004254393078576148, "phrase": "comprehensive_approach"}, {"score": 0.004223521213460728, "phrase": "model-based_security_assurance"}, {"score": 0.004057670872363875, "phrase": "design_models"}, {"score": 0.004028220740657591, "phrase": "high-level_security_requirements"}, {"score": 0.003912533878506028, "phrase": "specification_level"}, {"score": 0.0036775717816768133, "phrase": "system's_run-time_behaviour"}, {"score": 0.003533083861130305, "phrase": "design_model"}, {"score": 0.0034566710593930306, "phrase": "actual_system"}, {"score": 0.003144134096095214, "phrase": "extra_effort"}, {"score": 0.0027674397462322435, "phrase": "aspect-oriented_security"}, {"score": 0.0026105697442146357, "phrase": "traceability_mapping"}, {"score": 0.0025727581823022268, "phrase": "refactoring_operations"}, {"score": 0.002435766348668389, "phrase": "java-based_implementation"}, {"score": 0.0024268966855267153, "phrase": "jessie"}, {"score": 0.0024004805502253427, "phrase": "internet_security_protocol"}, {"score": 0.0023917533133156455, "phrase": "ssl"}, {"score": 0.0023485057246680854, "phrase": "security_weakness"}, {"score": 0.0021912115487610286, "phrase": "official_implementation"}, {"score": 0.002167355210897559, "phrase": "java_secure_sockets_extension"}, {"score": 0.0021065646112050176, "phrase": "sun"}], "paper_keywords": ["run-time verification", " monitoring", " IT security", " cryptographic protocols", " formal verification", " security analysis", " software evolution", " requirements traceability"], "paper_abstract": "Security-critical systems are challenging to design and implement correctly and securely. A lot of vulnerabilities have been found in current software systems both at the specification and the implementation levels. This paper presents a comprehensive approach for model-based security assurance. Initially, it allows one to formally verify the design models against high-level security requirements such as secrecy and authentication on the specification level, and helps to ensure that their implementation adheres to these properties, if they express a system's run-time behaviour. As such, it provides a traceability link from the design model to its implementation by which the actual system can then be verified against the model while it executes. This part of our approach relies on a technique also known as run-time verification. The extra effort for it is small as most of the computation is automated; however, additional resources at run-time may be required. If during run-time verification a security weakness is uncovered, it can be removed using aspect-oriented security hardening transformations. Therefore, this approach also supports the evolution of software since the traceability mapping is updated when refactoring operations are regressively performed using our tool-supported refactoring technique. The proposed method has been applied to the Java-based implementation Jessie of the Internet security protocol SSL, in which a security weakness was detected and fixed using our approach. We also explain how the traceability link can be transformed to the official implementation of the Java secure sockets extension that was recently made open source by Sun.", "paper_title": "Run-Time Security Traceability for Evolving Systems", "paper_id": "WOS:000285625100006"}