{"auto_keywords": [{"score": 0.03630594953028295, "phrase": "sole"}, {"score": 0.0077404865372580995, "phrase": "continuous_queries"}, {"score": 0.0059677088865808655, "phrase": "stored_objects"}, {"score": 0.004767826806287385, "phrase": "spatio-temporal_data_streams"}, {"score": 0.004561386908745206, "phrase": "line_execution"}, {"score": 0.004385367803204002, "phrase": "on-line_evaluation"}, {"score": 0.004342430078306461, "phrase": "concurrent_continuous_spatio-temporal_queries"}, {"score": 0.004236908273106904, "phrase": "incoming_spatio-temporal_data_streams"}, {"score": 0.004033464035028803, "phrase": "outstanding_continuous_queries"}, {"score": 0.003974349782102708, "phrase": "sole_algorithm"}, {"score": 0.003916098498242888, "phrase": "scarce_memory_resource"}, {"score": 0.0033950634506367235, "phrase": "scalable_algorithm"}, {"score": 0.0031532895341013297, "phrase": "spatio-temporal_join"}, {"score": 0.0030464123943266673, "phrase": "spatio-temporal_objects"}, {"score": 0.0029722900280316216, "phrase": "spatio-temporal_queries"}, {"score": 0.0028715299874549245, "phrase": "high_arrival_rates"}, {"score": 0.0027469703311742647, "phrase": "load-shedding_approach"}, {"score": 0.002538687900036229, "phrase": "pipelined_query_operator"}, {"score": 0.002464709648714996, "phrase": "traditional_query_operators"}, {"score": 0.002428530921948425, "phrase": "query_execution_plan"}, {"score": 0.0023811153883132536, "phrase": "wide_variety"}, {"score": 0.0023346234464901978, "phrase": "performance_experiments"}, {"score": 0.0022890371899188466, "phrase": "real_implementation"}, {"score": 0.0022005118194652704, "phrase": "data_stream_management_system"}, {"score": 0.0021049977753042253, "phrase": "highly_dynamic_environments"}], "paper_keywords": [""], "paper_abstract": "This paper presents the scalable on-line execution (SOLE) algorithm for continuous and on-line evaluation of concurrent continuous spatio-temporal queries over data streams. Incoming spatio-temporal data streams are processed in-memory against a set of outstanding continuous queries. The SOLE algorithm utilizes the scarce memory resource efficiently by keeping track of only the significant objects. In-memory stored objects are expired (i.e., dropped) from memory once they become insignificant. SOLE is a scalable algorithm where all the continuous outstanding queries share the same buffer pool. In addition, SOLE is presented as a spatio-temporal join between two input streams, a stream of spatio-temporal objects and a stream of spatio-temporal queries. To cope with intervals of high arrival rates of objects and/or queries, SOLE utilizes a load-shedding approach where some of the stored objects are dropped from memory. SOLE is implemented as a pipelined query operator that can be combined with traditional query operators in a query execution plan to support a wide variety of continuous queries. Performance experiments based on a real implementation of SOLE inside a prototype of a data stream management system show the scalability and efficiency of SOLE in highly dynamic environments.", "paper_title": "SOLE: scalable on-line execution of continuous queries on spatio-temporal data streams", "paper_id": "WOS:000257396700001"}