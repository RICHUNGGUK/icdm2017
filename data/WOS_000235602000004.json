{"auto_keywords": [{"score": 0.049692788583269344, "phrase": "trace_processors"}, {"score": 0.008852343058140238, "phrase": "trace_cache"}, {"score": 0.008133187065764233, "phrase": "next-trace_mispeculation"}, {"score": 0.00672689769122157, "phrase": "multiple_thread_contexts"}, {"score": 0.00481495049065317, "phrase": "trace_processors_performance"}, {"score": 0.004718431349852634, "phrase": "promising_next-generation_microarchitecture"}, {"score": 0.004661446705304497, "phrase": "implicit_thread-level_parallelism"}, {"score": 0.004567990533989851, "phrase": "conventional_applications"}, {"score": 0.004512814529823301, "phrase": "aggressive_control_and_data_speculation_techniques"}, {"score": 0.004061584718427419, "phrase": "next-trace_mispeculations"}, {"score": 0.003932003833923186, "phrase": "dispatch_engine"}, {"score": 0.003806578082697178, "phrase": "pe"}, {"score": 0.0037301606780397456, "phrase": "trace_construction"}, {"score": 0.0035819501337406596, "phrase": "dispatch_engine_stall"}, {"score": 0.0035386420095120706, "phrase": "speculative_execution_results"}, {"score": 0.003495855671790616, "phrase": "mispeculated_trace"}, {"score": 0.003384262486955773, "phrase": "squashed_traces"}, {"score": 0.002984373546099842, "phrase": "combined_microarchitecture-simultaneous_multithreading_trace_processors"}, {"score": 0.0025892330566358503, "phrase": "wrong-path_speculations"}, {"score": 0.002526938673434697, "phrase": "pe_execution_efficiency"}, {"score": 0.0024963543716522087, "phrase": "simulation_results"}, {"score": 0.0022371907579775796, "phrase": "even_higher_performance_improvement"}, {"score": 0.0021569129153653777, "phrase": "smt_trace_processors"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["trace processors", " multithreading", " trace"], "paper_abstract": "Trace Processors is a promising next-generation microarchitecture that exploits implicit thread-level parallelism (TLP) in conventional applications by employing aggressive control and data speculation techniques. Although high performance can be achieved by trace processors, but in fact, processing element (PE) resources are still underutilized due to frequent trace cache misses and next-trace mispeculations. When trace cache miss occurs, trace dispatch engine must stall and supply nothing to idle PE until the completion of trace construction. When next-trace mispeculation occurs, in addition to trace dispatch engine stall, all speculative execution results after the mispeculated trace must be discarded. All the operations on those squashed traces are useless. When trace processors scales up with more PEs, this problem will become more severe. Addressing to this problem, we propose augmenting multiple thread contexts into trace processors. A combined microarchitecture-Simultaneous Multithreading trace processors (SMT trace processors) is proposed in this paper. By dispatching trace from other threads, the penalties of trace cache miss and next-trace mispeculation can be tolerated. Introducing multiple thread contexts reduce the percentage of wrong-path speculations for each thread and improve PE execution efficiency significantly. Simulation results show that integrating two thread contexts can improve 8-PE trace processors performance 27.7%. When augmenting four and eight thread contexts, the corresponding improvements are 28.7 and 15.4%. And we believe that even higher performance improvement can be expected when we integrate more PEs into SMT trace processors. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Simultaneous multithreading trace processors: Improving trace processors performance", "paper_id": "WOS:000235602000004"}