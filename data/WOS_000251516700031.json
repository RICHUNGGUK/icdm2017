{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "object-oriented_languages"}, {"score": 0.0077681039312346815, "phrase": "basic_ideas"}, {"score": 0.004284755353695709, "phrase": "automata_theory"}, {"score": 0.004121275290411653, "phrase": "synchronization_constraints"}, {"score": 0.004041879818641576, "phrase": "parallel_object-oriented_languages"}, {"score": 0.003493021648360933, "phrase": "parc_parallel_programming_language"}, {"score": 0.003200056372726887, "phrase": "parc"}, {"score": 0.0030778231027679434, "phrase": "object-oriented_language"}, {"score": 0.0029031614127920232, "phrase": "basic_features"}, {"score": 0.0025578967205807843, "phrase": "object-oriented_environment"}, {"score": 0.0024126686412257407, "phrase": "synchronization_expressions"}], "paper_keywords": ["process systems", " P-expressions", " EP-expressions", " SC-expressions", " parallel object-oriented languages"], "paper_abstract": "In this paper, SC-expressions are developed, based on automata theory, for specifying synchronization constraints in parallel object-oriented languages. The predecessor of SC-expressions, the synchronization expressions, was introduced in the ParC parallel programming language in the early nineties [19]. However, ParC is not an object-oriented language and also a number of basic features of synchronization expressions are inadequate for object-oriented languages. SC-expressions are developed for object-oriented environment. They are different from synchronization expressions in basic ideas and assumptions. Here we describe the basic ideas of SC-expressions and their applications in object-oriented languages. We also study the problem of inheritance of the SC-expressions.", "paper_title": "SC-expressions in object-oriented languages", "paper_id": "WOS:000251516700031"}