{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "suffix_array_construction_algorithms"}, {"score": 0.004518504024099801, "phrase": "myers"}, {"score": 0.004437115547184535, "phrase": "suffix_arrays"}, {"score": 0.004317848984770719, "phrase": "space-saving_alternative"}, {"score": 0.004051828608343507, "phrase": "first_algorithms"}, {"score": 0.003978866233891427, "phrase": "suffix_array_construction"}, {"score": 0.0034092396400930446, "phrase": "bewildering_abundance"}, {"score": 0.0033175095965171674, "phrase": "survey_paper"}, {"score": 0.0031990183472675377, "phrase": "simple_high-level_descriptions"}, {"score": 0.0026913130726432645, "phrase": "implementation_details"}, {"score": 0.0026427848602443267, "phrase": "new_hybrid_algorithms"}, {"score": 0.0024129269611844794, "phrase": "algorithms'_worst-case_time_complexity"}, {"score": 0.0021830553825770097, "phrase": "recent_experimental_test_runs"}], "paper_keywords": ["algorithms", " design", " performance", " suffix array", " suffix tree", " suffix sorting", " Burrows-Wheeler transform"], "paper_abstract": "In 1990, Manber and Myers proposed suffix arrays as a space-saving alternative to suffix trees and described the first algorithms for suffix array construction and use. Since that time, and especially in the last few years, suffix array construction algorithms have proliferated in bewildering abundance. This survey paper attempts to provide simple high-level descriptions of these numerous algorithms that highlight both their distinctive features and their commonalities, while avoiding as much as possible the complexities of implementation details. New hybrid algorithms are also described. We provide comparisons of the algorithms' worst-case time complexity and use of additional space, together with results of recent experimental test runs on many of their implementations.", "paper_title": "A taxonomy of suffix array construction algorithms", "paper_id": "WOS:000248687800001"}