{"auto_keywords": [{"score": 0.045034786586334266, "phrase": "modern_proof_assistants"}, {"score": 0.00481495049065317, "phrase": "recent_successes"}, {"score": 0.004778258911940497, "phrase": "large-scale_proof_development"}, {"score": 0.004669845451682529, "phrase": "arcane_art"}, {"score": 0.0041316803676012155, "phrase": "large_amount"}, {"score": 0.0041001740903338834, "phrase": "minute_detail"}, {"score": 0.003946195919158241, "phrase": "proof_checking_process"}, {"score": 0.0038271712887391015, "phrase": "domain-specific_knowledge"}, {"score": 0.003334309053314909, "phrase": "second_shortcoming"}, {"score": 0.003208999546225013, "phrase": "static_knowledge"}, {"score": 0.0030297830963114483, "phrase": "type-safe_manipulation"}, {"score": 0.002972290912581833, "phrase": "beluga"}, {"score": 0.002949598537993663, "phrase": "delphin"}, {"score": 0.0029270797740550973, "phrase": "veriml"}, {"score": 0.0028278480051602355, "phrase": "second_issue"}, {"score": 0.002784828661426853, "phrase": "rich_types"}, {"score": 0.002711109302199029, "phrase": "architectural_issues"}, {"score": 0.002599177223533834, "phrase": "existing_work"}, {"score": 0.002472822097373027, "phrase": "static_proof_scripts"}, {"score": 0.002370704665003412, "phrase": "user-extensible_proof_checking"}, {"score": 0.0022640963589007457, "phrase": "new_point"}, {"score": 0.0022382002476510573, "phrase": "design_space"}, {"score": 0.0022211005680689666, "phrase": "future_proof_assistants"}, {"score": 0.002129356014992349, "phrase": "light-weight_staging_construct"}, {"score": 0.0021049977753042253, "phrase": "rich_type_information"}], "paper_keywords": ["Languages", " Verification"], "paper_abstract": "Despite recent successes, large-scale proof development within proof assistants remains an arcane art that is extremely time-consuming. We argue that this can be attributed to two profound shortcomings in the architecture of modern proof assistants. The first is that proofs need to include a large amount of minute detail; this is due to the rigidity of the proof checking process, which cannot be extended with domain-specific knowledge. In order to avoid these details, we rely on developing and using tactics, specialized procedures that produce proofs. Unfortunately, tactics are both hard to write and hard to use, revealing the second shortcoming of modern proof assistants. This is because there is no static knowledge about their expected use and behavior. As has recently been demonstrated, languages that allow type-safe manipulation of proofs, like Beluga, Delphin and VeriML, can be used to partly mitigate this second issue, by assigning rich types to tactics. Still, the architectural issues remain. In this paper, we build on this existing work, and demonstrate two novel ideas: an extensible conversion rule and support for static proof scripts. Together, these ideas enable us to support both user-extensible proof checking, and sophisticated static checking of tactics, leading to a new point in the design space of future proof assistants. Both ideas are based on the interplay between a light-weight staging construct and the rich type information available.", "paper_title": "Static and User-Extensible Proof Checking", "paper_id": "WOS:000300548100021"}