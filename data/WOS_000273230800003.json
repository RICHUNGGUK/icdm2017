{"auto_keywords": [{"score": 0.04959617767696155, "phrase": "jastadd"}, {"score": 0.046793532854124374, "phrase": "modelica"}, {"score": 0.00481495049065317, "phrase": "modelica_compiler"}, {"score": 0.004530794611704416, "phrase": "key_parts"}, {"score": 0.004306795240631196, "phrase": "equation-based_modeling"}, {"score": 0.004220314322073171, "phrase": "complex_physical_systems"}, {"score": 0.003991305899593133, "phrase": "emerging_tools"}, {"score": 0.00395101799538683, "phrase": "physical_models"}, {"score": 0.003606178185661875, "phrase": "modern_attribute_grammar_mechanisms"}, {"score": 0.003551694229680741, "phrase": "reference_attributes"}, {"score": 0.00351582806482809, "phrase": "nonterminal_attributes"}, {"score": 0.0032746712603464235, "phrase": "type_analyses"}, {"score": 0.0031926001871260524, "phrase": "declarative_design_strategies"}, {"score": 0.00309681702203087, "phrase": "java_compiler"}, {"score": 0.002988685006809336, "phrase": "modelica's_advanced_features"}, {"score": 0.0029137604783116065, "phrase": "structural_subtyping"}, {"score": 0.0028263192354046245, "phrase": "new_general_design_strategies"}, {"score": 0.0027554538693034163, "phrase": "target_asts"}, {"score": 0.002727606388863445, "phrase": "source_asts"}, {"score": 0.0025663181430010686, "phrase": "generics-like_feature"}, {"score": 0.0023780209525032688, "phrase": "modelica_compilation"}, {"score": 0.002214734873559146, "phrase": "execution_speed"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Compiler construction", " JastAdd", " Modelica", " Reference attributed grammars"], "paper_abstract": "We have implemented a compiler for key parts of Modelica, an object-oriented language supporting equation-based modeling and simulation of complex physical systems. The compiler is extensible, to support experiments with emerging tools for physical models. To achieve extensibility, the implementation is done declaratively in JastAdd, a metacompilation system supporting modern attribute grammar mechanisms such as reference attributes and nonterminal attributes. This paper reports on experiences from this implementation. For name and type analyses, we illustrate how declarative design strategies, originally developed for a Java compiler, could be reused to support Modelica's advanced features of multiple inheritance and structural subtyping. Furthermore, we present new general design strategies for declarative generation of target ASTs from source ASTs. We illustrate how these strategies are used to resolve a generics-like feature of Modelica called modifications, and to support flattening, a fundamental part of Modelica compilation. To validate that the approach is practical, we have compared the execution speed of our compiler to two existing Modelica compilers. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Implementation of a Modelica compiler using JastAdd attribute grammars", "paper_id": "WOS:000273230800003"}