{"auto_keywords": [{"score": 0.03639675173558696, "phrase": "translation_strategy"}, {"score": 0.01572057309700996, "phrase": "java"}, {"score": 0.004530301483540928, "phrase": "csp"}, {"score": 0.004349791059765796, "phrase": "state-rich_reactive_systems"}, {"score": 0.0040648241451154525, "phrase": "jcircus"}, {"score": 0.0038764861784138117, "phrase": "circus_programs"}, {"score": 0.003362060602812933, "phrase": "jcsp_library"}, {"score": 0.0032279990773657215, "phrase": "csp_constructs"}, {"score": 0.0031845069426845235, "phrase": "circus"}, {"score": 0.003057503388220776, "phrase": "simple_graphical_interface"}, {"score": 0.002955533639862811, "phrase": "simple_example"}, {"score": 0.0027429789393362703, "phrase": "resulting_program"}, {"score": 0.0026514708899935333, "phrase": "class_generalchannel"}, {"score": 0.0021049977753042253, "phrase": "multi-synchronisation_protocol"}], "paper_keywords": [""], "paper_abstract": "Circus is a combination of Z and CSP that supports the development of state-rich reactive systems based on refinement. In this paper we present JCircus, a tool that automatically translates Circus programs into Java, for the purpose of animation and simulation. It is based on a translation strategy that uses the JCSP library to implement some of the CSP constructs of Circus. The tool generates a simple graphical interface; we present a simple example to demonstrate the translation strategy, and the execution of the resulting program. We discuss the class GeneralChannel, which we designed to support the implementation of multi-synchronisation. We also discuss our improvements to the translation strategy, some limitations of the tool, and our approach to prove the correctness of the multi-synchronisation protocol.", "paper_title": "Automatic Translation from Circus to Java", "paper_id": "WOS:000240312100009"}