{"auto_keywords": [{"score": 0.04885808247410527, "phrase": "frequent_itemset_queries"}, {"score": 0.04825951763801121, "phrase": "apriori"}, {"score": 0.03603626520671976, "phrase": "common_counting"}, {"score": 0.00481495049065317, "phrase": "candidate_hash_trees"}, {"score": 0.004753194996637899, "phrase": "concurrent_processing"}, {"score": 0.0045726187330434025, "phrase": "frequent_itemset_mining"}, {"score": 0.003791621842185417, "phrase": "processing_batches"}, {"score": 0.0036710872046569532, "phrase": "apriori_algorithm"}, {"score": 0.0036006068766833103, "phrase": "best_solution"}, {"score": 0.003310447652300423, "phrase": "concurrent_execution"}, {"score": 0.0027622407190589326, "phrase": "new_method"}, {"score": 0.0025725382476862305, "phrase": "concurrently_processed_queries"}, {"score": 0.0025230952890994236, "phrase": "memory_data_structures"}, {"score": 0.0023958326775913165, "phrase": "common_candidate"}, {"score": 0.0022897425998475362, "phrase": "execution_time"}, {"score": 0.002202547013259953, "phrase": "smaller_memory_consumption"}, {"score": 0.0021742244283295986, "phrase": "common_candidate_tree"}, {"score": 0.0021049977753042253, "phrase": "larger_batches"}], "paper_keywords": ["data mining", " frequent itemset mining", " data mining queries"], "paper_abstract": "Frequent itemset mining is often regarded as advanced querying where a user specifies the source dataset and pattern constraints using a given constraint model. In this paper we address the problem of processing batches of frequent itemset queries using the Apriori algorithm. The best solution of this problem proposed so far is Common Counting, which consists in concurrent execution of the queries using Apriori with the integration of scans of the parts of the database shared among the queries. In this paper we propose a new method - Common Candidate Tree, offering a more tight integration of the concurrently processed queries by sharing memory data structures, i.e., candidate hash trees. The experiments show that Common Candidate nee outperforms Common Counting in terms of execution time. Moreover, thanks to smaller memory consumption, Common Candidate Tree can be applied to larger batches of queries.", "paper_title": "Integration of candidate hash trees in concurrent processing of frequent itemset queries using Apriori", "paper_id": "WOS:000268920700004"}