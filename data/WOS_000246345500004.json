{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_checking"}, {"score": 0.031074267786484585, "phrase": "thread_interleavings"}, {"score": 0.00471465954562773, "phrase": "dynamic_information"}, {"score": 0.0046164478775379105, "phrase": "multithreaded_programs"}, {"score": 0.004544127927346964, "phrase": "severe_bugs"}, {"score": 0.004449452743965974, "phrase": "unexpected_behaviors"}, {"score": 0.004402854153653114, "phrase": "different_thread_interleavings"}, {"score": 0.003623352647973122, "phrase": "current_interleaving"}, {"score": 0.003383475802364289, "phrase": "model_checking_search"}, {"score": 0.0031594291695784286, "phrase": "rarely_executed_paths"}, {"score": 0.0029657683623403085, "phrase": "large_number"}, {"score": 0.0029038817737006405, "phrase": "realistic_multithreaded_programs"}, {"score": 0.0028734230458881903, "phrase": "state_space_explosion"}, {"score": 0.002697245874076643, "phrase": "hybrid_scheme"}, {"score": 0.0023640560785711923, "phrase": "realistic_programs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["datarace", " data race detection", " model checking", " lockset", " multithreading"], "paper_abstract": "Dataraces in multithreaded programs often indicate severe bugs and can cause unexpected behaviors when different thread interleavings are executed. Because dataraces are a cause for concern, many works have dealt with the problem of detecting them. Works based on dynamic techniques either report errors only for dataraces that occur in the current interleaving, which limits their usefulness, or produce many spurious dataraces. Works based on model checking search exhaustively for dataraces and thus can reveal even those that occur in rarely executed paths. However, the applicability of model checking is limited because the large number of thread interleavings in realistic multithreaded programs causes state space explosion. In this work, we combine the two techniques in a hybrid scheme which overcomes these difficulties and enjoys the advantages of both worlds. Our hybrid technique succeeds in providing thread interleavings that prove the existence of dataraces in realistic programs. The programs we experimented with cannot be checked using either an ordinary industrial strength model checker or bounded model checking. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Scaling model checking of dataraces using dynamic information", "paper_id": "WOS:000246345500004"}