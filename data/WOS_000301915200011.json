{"auto_keywords": [{"score": 0.049643973872019624, "phrase": "analogy-based_effort_estimation"}, {"score": 0.00481495049065317, "phrase": "essential_assumptions"}, {"score": 0.004600100053651545, "phrase": "software_effort_estimators"}, {"score": 0.004276016541197123, "phrase": "general_principles"}, {"score": 0.004237138632255772, "phrase": "effort_estimation"}, {"score": 0.004103817210338686, "phrase": "effort_estimators"}, {"score": 0.003974673997871831, "phrase": "essential_assumption"}, {"score": 0.003849579089885659, "phrase": "immediate_neighbors"}, {"score": 0.0037626342268042997, "phrase": "stable_conclusions"}, {"score": 0.003561865840737996, "phrase": "binary_tree"}, {"score": 0.00349734405943853, "phrase": "effort_data"}, {"score": 0.003371773890338284, "phrase": "smaller_subtrees"}, {"score": 0.003191796292574747, "phrase": "desharnais"}, {"score": 0.003162747248018608, "phrase": "albrecht"}, {"score": 0.003133956157172915, "phrase": "isbsg"}, {"score": 0.003063123420705719, "phrase": "turkish_companies"}, {"score": 0.0028470123663391104, "phrase": "cluster_supertrees"}, {"score": 0.0027197343489967296, "phrase": "cluster_trees"}, {"score": 0.0026949679939994226, "phrase": "lower_variance"}, {"score": 0.0026582395558737855, "phrase": "effort_estimates"}, {"score": 0.0026220103561723066, "phrase": "significantly_lower_error"}, {"score": 0.00257447621032301, "phrase": "mre"}, {"score": 0.0024706232839499546, "phrase": "wilcoxon_test"}, {"score": 0.002403724423251419, "phrase": "nearest_neighbor_methods"}, {"score": 0.0023386327847292805, "phrase": "fixed_size"}, {"score": 0.002193509835371438, "phrase": "dynamic_selection"}, {"score": 0.0021735249249471614, "phrase": "nearest_neighbors"}, {"score": 0.0021049977753042253, "phrase": "small_variance"}], "paper_keywords": ["Software cost estimation", " analogy", " k-NN"], "paper_abstract": "Background: There are too many design options for software effort estimators. How can we best explore them all? Aim: We seek aspects on general principles of effort estimation that can guide the design of effort estimators. Method: We identified the essential assumption of analogy-based effort estimation, i.e., the immediate neighbors of a project offer stable conclusions about that project. We test that assumption by generating a binary tree of clusters of effort data and comparing the variance of supertrees versus smaller subtrees. Results: For 10 data sets (from Coc81, Nasa93, Desharnais, Albrecht, ISBSG, and data from Turkish companies), we found: 1) The estimation variance of cluster subtrees is usually larger than that of cluster supertrees; 2) if analogy is restricted to the cluster trees with lower variance, then effort estimates have a significantly lower error (measured using MRE, AR, and Pred(25) with a Wilcoxon test, 95 percent confidence, compared to nearest neighbor methods that use neighborhoods of a fixed size). Conclusion: Estimation by analogy can be significantly improved by a dynamic selection of nearest neighbors, using only the project data from regions with small variance.", "paper_title": "Exploiting the Essential Assumptions of Analogy-Based Effort Estimation", "paper_id": "WOS:000301915200011"}