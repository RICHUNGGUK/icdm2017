{"auto_keywords": [{"score": 0.04902896582647278, "phrase": "distributed"}, {"score": 0.00481495049065317, "phrase": "active_objects"}, {"score": 0.004761850836420121, "phrase": "shared_futures"}, {"score": 0.004657393640152439, "phrase": "concurrent_object-oriented_systems"}, {"score": 0.0038998328617557013, "phrase": "method_call_result_values"}, {"score": 0.003814212645832246, "phrase": "third_party_objects"}, {"score": 0.003451517638449501, "phrase": "distributed_environment"}, {"score": 0.003158088307044493, "phrase": "program_semantics"}, {"score": 0.002970914475538276, "phrase": "asynchronously_communicating_objects"}, {"score": 0.002921815042028607, "phrase": "return_values"}, {"score": 0.0028895324165046166, "phrase": "method_calls"}, {"score": 0.0027486060614330043, "phrase": "invariant_specifications"}, {"score": 0.0027031706928674092, "phrase": "locally_visible_communication_history"}, {"score": 0.00262910358108176, "phrase": "compositional_reasoning"}, {"score": 0.0023525345110929326, "phrase": "kernel_object-oriented_language"}, {"score": 0.002275369652100353, "phrase": "abs_modeling_language"}, {"score": 0.0022129983153880467, "phrase": "compositional_proof_system"}, {"score": 0.0021049977753042253, "phrase": "dynamic_logic"}], "paper_keywords": ["Distributed systems", " Object orientation", " Concurrent objects", " Asynchronous communication", " Shared futures", " Operational semantics", " Communication history", " Compositional reasoning", " Dynamic logic"], "paper_abstract": "Distributed and concurrent object-oriented systems are difficult to analyze due to the complexity of their concurrency, communication, and synchronization mechanisms. The future mechanism extends the traditional method call communication model by facilitating sharing of references to futures. By assigning method call result values to futures, third party objects may pick up these values. This may reduce the time spent waiting for replies in a distributed environment. However, futures add a level of complexity to program analysis, as the program semantics becomes more involved. This paper presents a model for asynchronously communicating objects, where return values from method calls are handled by futures. The model facilitates invariant specifications over the locally visible communication history of each object. Compositional reasoning is supported and proved sound, as each object may be specified and verified independently of its environment. A kernel object-oriented language with futures inspired by the ABS modeling language is considered. A compositional proof system for this language is presented, formulated within dynamic logic.", "paper_title": "Compositional reasoning about active objects with shared futures", "paper_id": "WOS:000353826900005"}