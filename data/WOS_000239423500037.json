{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "-service_attacks"}, {"score": 0.004773692073488661, "phrase": "shared_cmp_caches"}, {"score": 0.004398872331144531, "phrase": "service-centric_provider"}, {"score": 0.004342430078306461, "phrase": "chip_multi-processors"}, {"score": 0.004231699728933577, "phrase": "mainstream_architecture"}, {"score": 0.004195418010131832, "phrase": "server_class_processors"}, {"score": 0.004088421020408183, "phrase": "on-chip_resources"}, {"score": 0.003967021436047945, "phrase": "qos_guarantees"}, {"score": 0.0038825121288253435, "phrase": "shared_resources"}, {"score": 0.003546722347907148, "phrase": "on-chip_shared_caches"}, {"score": 0.0034562118159899772, "phrase": "malicious_threads"}, {"score": 0.0034118234596993836, "phrase": "\"hungry\"_threads"}, {"score": 0.0032820385246266773, "phrase": "dos_opportunities"}, {"score": 0.0032398798149196432, "phrase": "important_characteristic"}, {"score": 0.00307657476125683, "phrase": "malicious_and_\"healthy\"_threads"}, {"score": 0.00295950473406239, "phrase": "statistical_model"}, {"score": 0.0029214769181390653, "phrase": "shared_cache"}, {"score": 0.0028468767420392945, "phrase": "run-time_information"}, {"score": 0.0027503564589458837, "phrase": "shared_threads"}, {"score": 0.002469269628821745, "phrase": "negligible_damage"}, {"score": 0.0024061887405214186, "phrase": "underlying_replacement_policy"}, {"score": 0.0023145690608400425, "phrase": "proposed_attack-resistant_replacement_algorithm"}, {"score": 0.002255431275670053, "phrase": "high-level_policies"}, {"score": 0.002132420504803564, "phrase": "cache_real_estate"}, {"score": 0.0021049977753042253, "phrase": "custom_space-allocation_policies"}], "paper_keywords": [""], "paper_abstract": "Denial-of-Service (DoS) attacks try to exhaust some shared resources (e.g. process tables, functional units) of a service-centric provider. As Chip Multi-Processors (CMPs) are becoming mainstream architecture for server class processors, the need to manage on-chip resources in a way that can provide QoS guarantees becomes a necessity. Shared resources in CMPs typically include L2. cache memory. In this paper, we explore the problem of managing the on-chip shared caches in a CMP workstation where malicious threads or just cache \"hungry\" threads try to hog the cache giving rise to DoS opportunities. An important characteristic of our method is that there is no need to distinguish between malicious and \"healthy\" threads. The proposed methodology is based on a statistical model of a shared cache that can be fed with run-time information and accurately describe the behavior of the shared threads. Using this information, we are able to understand which thread (malicious or not) can be \"compressed\" into less space with negligible damage and to drive accordingly the underlying replacement policy of the cache. Our results show that the proposed attack-resistant replacement algorithm can be used to enforce high-level policies such as policies that try to maximize the \"usefulness\" of the cache real estate or assign custom space-allocation policies based on external QoS needs.", "paper_title": "Preventing denial-of-service attacks in shared CMP caches", "paper_id": "WOS:000239423500037"}