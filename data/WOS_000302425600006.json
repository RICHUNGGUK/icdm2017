{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "demand_string"}, {"score": 0.0047385702897315436, "phrase": "unbounded_alphabets"}, {"score": 0.004613940521007727, "phrase": "string_sorting"}, {"score": 0.004327981760540394, "phrase": "subsequent_queries"}, {"score": 0.004236639288852276, "phrase": "k_lexicographically_smallest_strings"}, {"score": 0.003995226376780718, "phrase": "on-demand_variant"}, {"score": 0.003910879154656061, "phrase": "search_engine_queries"}, {"score": 0.0038079353103469865, "phrase": "best_k-ranked_pages"}, {"score": 0.003687960013746783, "phrase": "data_structure"}, {"score": 0.002900426826591769, "phrase": "total_length"}, {"score": 0.002537880772794665, "phrase": "full_heap"}, {"score": 0.0022806798371116698, "phrase": "full_operations"}, {"score": 0.0022444104439449737, "phrase": "balanced_indexing_trees"}, {"score": 0.002196944917134202, "phrase": "heap_operations"}, {"score": 0.0021735890994119757, "phrase": "optimal_times"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["String matching", " Data structures"], "paper_abstract": "On-demand string sorting is the problem of preprocessing a set of strings to allow subsequent queries for finding the k lexicographically smallest strings (and afterward the next k etc.) This on-demand variant strongly resembles the search engine queries which give you the best k-ranked pages recurringly. We present a data structure that supports this in O(n) preprocessing time, where n is the number of strings, and answer queries in O(log n) time. There is also a cost of O(N) time amortized over all operations, where N is the total length of the strings. Our data structure is a heap of strings, which supports heapify and delete-mins. As it turns out, implementing a full heap with all operations is not that simple. For the sake of completeness, we propose a heap with full operations based on balanced indexing trees that supports the heap operations in optimal times. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "On demand string sorting over unbounded alphabets", "paper_id": "WOS:000302425600006"}