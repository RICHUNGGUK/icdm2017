{"auto_keywords": [{"score": 0.04855659570735454, "phrase": "haskell"}, {"score": 0.0477062720850637, "phrase": "ifc"}, {"score": 0.015364801978424377, "phrase": "information-flow_control"}, {"score": 0.010950335651741187, "phrase": "ifc_checks"}, {"score": 0.008988400609524447, "phrase": "hlio"}, {"score": 0.004815089919891166, "phrase": "static"}, {"score": 0.004492841495994535, "phrase": "well-established_approach"}, {"score": 0.004431041346291019, "phrase": "untrusted_code"}, {"score": 0.004370087541308677, "phrase": "sensitive_data"}, {"score": 0.004172874316207784, "phrase": "type_systems"}, {"score": 0.004134508282135594, "phrase": "static_analyses"}, {"score": 0.004077616905584829, "phrase": "dynamic_execution_monitors"}, {"score": 0.0040215052006051235, "phrase": "lio_haskell_library"}, {"score": 0.003947884118204803, "phrase": "operating_systems_research"}, {"score": 0.0038756055612167942, "phrase": "purely_dynamic_monitor"}, {"score": 0.003822263046602146, "phrase": "sensitivity_level"}, {"score": 0.003683565150278339, "phrase": "data_sensitivity_levels"}, {"score": 0.0031625006830124512, "phrase": "static_guarantees"}, {"score": 0.0030759821501544224, "phrase": "runtime_checks"}, {"score": 0.0025683581446365165, "phrase": "novel_technique"}, {"score": 0.00249805321224923, "phrase": "singleton_types"}, {"score": 0.0024750474634399797, "phrase": "constraint_polymorphism"}, {"score": 0.0023305762840188145, "phrase": "ifc_examples"}, {"score": 0.0021049977753042253, "phrase": "programmer-controlled_hybrid_type_checking"}], "paper_keywords": ["Information-flow control", " hybrid typing", " gradual typing", " dynamic typing", " data kinds", " constraint kinds", " singleton types"], "paper_abstract": "Information-Flow Control (IFC) is a well-established approach for allowing untrusted code to manipulate sensitive data without disclosing it. IFC is typically enforced via type systems and static analyses or via dynamic execution monitors. The LIO Haskell library, originating in operating systems research, implements a purely dynamic monitor of the sensitivity level of a computation, particularly suitable when data sensitivity levels are only known at runtime. In this paper, we show how to give programmers the flexibility of deferring IFC checks to runtime (as in LIO), while also providing static guarantees-and the absence of runtime checks-for parts of their programs that can be statically verified (unlike LIO). We present the design and implementation of our approach, HLIO (Hybrid LIO), as an embedding in Haskell that uses a novel technique for deferring IFC checks based on singleton types and constraint polymorphism. We formalize HLIO, prove non-interference, and show how interesting IFC examples can be programmed. Although our motivation is IFC, our technique for deferring constraints goes well beyond and offers a methodology for programmer-controlled hybrid type checking in Haskell.", "paper_title": "HLIO: Mixing Static and Dynamic Typing for Information-Flow Control in Haskell", "paper_id": "WOS:000367255800026"}