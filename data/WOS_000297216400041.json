{"auto_keywords": [{"score": 0.0436812150145203, "phrase": "lr"}, {"score": 0.00481495049065317, "phrase": "triangle_meshes"}, {"score": 0.004269630481719451, "phrase": "manifold_triangle"}, {"score": 0.003511613254403125, "phrase": "input_mesh"}, {"score": 0.0034332736827447654, "phrase": "constant-time_adjacency_queries"}, {"score": 0.0032817813775647756, "phrase": "time_complexity"}, {"score": 0.0030901063954739375, "phrase": "nearly-hamiltonian_cycle"}, {"score": 0.0028446460307503343, "phrase": "fixed_connectivity"}, {"score": 0.0026384167183586015, "phrase": "data_structure"}, {"score": 0.0021369416775353107, "phrase": "traversal_time"}, {"score": 0.0021049977753042253, "phrase": "competing_representations"}], "paper_keywords": ["triangle meshes", " mesh connectivity", " Hamiltonian cycle"], "paper_abstract": "We propose LR (Laced Ring)-a simple data structure for representing the connectivity of manifold triangle meshes. LR provides the option to store on average either 1.08 references per triangle or 26.2 bits per triangle. Its construction, from an input mesh that supports constant-time adjacency queries, has linear space and time complexity, and involves ordering most vertices along a nearly-Hamiltonian cycle. LR is best suited for applications that process meshes with fixed connectivity, as any changes to the connectivity require the data structure to be rebuilt. We provide an implementation of the set of standard random-access, constant-time operators for traversing a mesh, and show that LR often saves both space and traversal time over competing representations.", "paper_title": "LR: Compact Connectivity Representation for Triangle Meshes", "paper_id": "WOS:000297216400041"}