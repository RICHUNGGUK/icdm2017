{"auto_keywords": [{"score": 0.03302410636663472, "phrase": "plc_programs"}, {"score": 0.00481495049065317, "phrase": "industrial-sized_plc_programs"}, {"score": 0.0045052562941109734, "phrase": "industrial_control_systems"}, {"score": 0.004399525320473839, "phrase": "plc_software"}, {"score": 0.004275904315753662, "phrase": "challenging_task"}, {"score": 0.0042354707960660706, "phrase": "formal_verification"}, {"score": 0.004155742403177802, "phrase": "recommended_practice"}, {"score": 0.004038943596016986, "phrase": "safety-critical_software"}, {"score": 0.0037432199549135826, "phrase": "formal_models"}, {"score": 0.00370780481244907, "phrase": "real_applications"}, {"score": 0.0035525230119401153, "phrase": "general_methodology"}, {"score": 0.0035022161192936234, "phrase": "automated_model_checking"}, {"score": 0.0034690732089830045, "phrase": "complex_properties"}, {"score": 0.003419943984098415, "phrase": "temporal_logics"}, {"score": 0.0032923282476715315, "phrase": "ctl"}, {"score": 0.003007846011394511, "phrase": "intermediate_model"}, {"score": 0.0028409576481842457, "phrase": "structured_text"}, {"score": 0.0027218905098462644, "phrase": "sfc"}, {"score": 0.002632716358833918, "phrase": "different_modeling_languages"}, {"score": 0.0026077803487003, "phrase": "verification_tools"}, {"score": 0.0024866254431816057, "phrase": "im"}, {"score": 0.0023936956017015696, "phrase": "st_and_sfc_languages"}, {"score": 0.002359759876402679, "phrase": "nuxmv_model_checker"}, {"score": 0.0021971473452127126, "phrase": "st_language"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["Automata", " IEC 61131", " model checking", " modeling", " nuXmv", " programmable logic controller (PLC)", " verification"], "paper_abstract": "Programmable logic controllers (PLCs) are embedded computers widely used in industrial control systems. Ensuring that a PLC software complies with its specification is a challenging task. Formal verification has become a recommended practice to ensure the correctness of safety-critical software, but is still underused in industry due to the complexity of building and managing formal models of real applications. In this paper, we propose a general methodology to perform automated model checking of complex properties expressed in temporal logics [e.g., computation tree logic (CTL) and linear temporal logic (LTL)] on PLC programs. This methodology is based on an intermediate model (IM) meant to transform PLC programs written in various standard languages [structured text (ST), sequential function chart (SFC), etc.] to different modeling languages of verification tools. We present the syntax and semantics of the IM, and the transformation rules of the ST and SFC languages to the nuXmv model checker passing through the IM. Finally, two real cases studies of the European Organization for Nuclear Research (CERN) PLC programs, written mainly in the ST language, are presented to illustrate and validate the proposed approach.", "paper_title": "Applying Model Checking to Industrial-Sized PLC Programs", "paper_id": "WOS:000366141100015"}