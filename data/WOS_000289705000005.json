{"auto_keywords": [{"score": 0.03456689260452274, "phrase": "split_verification"}, {"score": 0.028818583867887944, "phrase": "operation_properties"}, {"score": 0.00481495049065317, "phrase": "security_properties"}, {"score": 0.004779085953614184, "phrase": "internet_protocol"}, {"score": 0.004586531354697466, "phrase": "novel_method"}, {"score": 0.00453537012358554, "phrase": "user-space_internet_protocol_stacks"}, {"score": 0.0043363441738461335, "phrase": "proposed_method"}, {"score": 0.004271953920234395, "phrase": "protocol_stacks"}, {"score": 0.004146015717402716, "phrase": "formal_state-transformer_representation"}, {"score": 0.00403885675788806, "phrase": "protocol_stack"}, {"score": 0.0038041680562514064, "phrase": "compositional_manner"}, {"score": 0.003719705944877787, "phrase": "kripke_model"}, {"score": 0.003609989117581185, "phrase": "stack_operations"}, {"score": 0.003543059748318891, "phrase": "novel_approach"}, {"score": 0.0033121909731471787, "phrase": "protocol_stack_specification"}, {"score": 0.003073216350080926, "phrase": "primitive_operations"}, {"score": 0.0029713625496165944, "phrase": "temporal_properties"}, {"score": 0.002949189427671915, "phrase": "operation_sequencing"}, {"score": 0.002788066194685293, "phrase": "stack_operations_model"}, {"score": 0.0027466028572379455, "phrase": "abstract_z_specifications"}, {"score": 0.0026956374041441126, "phrase": "computational_tree_logic"}, {"score": 0.002625866440129899, "phrase": "promotion_conditions"}, {"score": 0.0024916819803100635, "phrase": "correct_refinements"}, {"score": 0.0023554947277883535, "phrase": "scalability_issues"}, {"score": 0.0023291617361832157, "phrase": "state-space_explosion"}, {"score": 0.002311769781106355, "phrase": "model-checking_and_long_unwieldy_proofs"}, {"score": 0.002193600680263771, "phrase": "proof_maintenance"}, {"score": 0.002177218756653181, "phrase": "localized_changes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Protocol stack", " Internet protocol", " Formal verification", " Software security", " Model-checking", " Theorem-proving", " Split verification", " Stack operations model", " State transformer", " Z notation", " Computational tree logic"], "paper_abstract": "We propose a novel method to construct user-space internet protocol stacks whose security properties can be formally explored and verified. The proposed method allows construction of protocol stacks using a C++ subset. We define a formal state-transformer representation of protocol stacks in which the protocol stack is specified in terms of three primary operations, which are constructed from sub-operations, in a compositional manner. We also define a Kripke model that captures the sequencing and attributes of stack operations. We propose a novel approach, called split verification, which combines theorem-proving and model-checking to establish properties for a protocol stack specification. In split verification, properties to be established for the stack are expressed as a combination of properties for primitive operations to be established via theorem-proving as well as temporal properties on operation sequencing, called promotion conditions, to be established via model-checking on the stack operations model. We use abstract Z specifications to represent operation properties and computational tree logic (CTL) formulae to represent promotion conditions. Operation properties are established by checking whether the operation(s) under consideration are correct refinements of the abstract Z specification(s). Our conclusion is that split verification: (a) avoids scalability issues caused by state-space explosion in model-checking and long unwieldy proofs in theorem-proving, and, (b) lowers cost of proof maintenance for localized changes in the stack. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Verifying security properties of internet protocol stacks: The split verification approach", "paper_id": "WOS:000289705000005"}