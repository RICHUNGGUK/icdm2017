{"auto_keywords": [{"score": 0.047232975924705364, "phrase": "sdds"}, {"score": 0.00481495049065317, "phrase": "spatial_data"}, {"score": 0.004773040022691547, "phrase": "distributed_repositories"}, {"score": 0.004568871736067739, "phrase": "scalable_distributed_data_structure"}, {"score": 0.0042415434489566995, "phrase": "knn_queries"}, {"score": 0.004204602964512469, "phrase": "large_spatial_datasets"}, {"score": 0.0041136473765874815, "phrase": "interconnected_servers"}, {"score": 0.00397217701571219, "phrase": "processing_load"}, {"score": 0.003920384090110374, "phrase": "available_resources"}, {"score": 0.003671338229632309, "phrase": "well-known_rtree_structure"}, {"score": 0.0035918768194006735, "phrase": "distributed_balanced_binary_tree"}, {"score": 0.003498782065781398, "phrase": "potentially_any_number"}, {"score": 0.003468287913322255, "phrase": "storage_servers"}, {"score": 0.003393206299636482, "phrase": "overloaded_ones"}, {"score": 0.0032621183241997777, "phrase": "client_node"}, {"score": 0.002823207272381655, "phrase": "specific_messages"}, {"score": 0.002737960968372391, "phrase": "outdated_images"}, {"score": 0.002541469965286169, "phrase": "rotation_algorithms"}, {"score": 0.002475532161577715, "phrase": "query_algorithms"}, {"score": 0.0024113009621042677, "phrase": "flexible_allocation_protocol"}, {"score": 0.0023384629381463054, "phrase": "temporary_shortage"}, {"score": 0.0023180581939456686, "phrase": "storage_resources"}, {"score": 0.002297831085501592, "phrase": "data_storage_balancing"}, {"score": 0.0022579036318895753, "phrase": "additional_aspects"}, {"score": 0.0022382002476510573, "phrase": "sd-rtree"}, {"score": 0.0021801135036476136, "phrase": "distributed_quadtree"}, {"score": 0.0021049977753042253, "phrase": "overall_utility"}], "paper_keywords": ["Spatial indexing", " Distributed structure"], "paper_abstract": "We propose a scalable distributed data structure (SDDS) called SD-Rtree. We intend our structure for point, window and kNN queries over large spatial datasets distributed on clusters of interconnected servers. The structure balances the storage and processing load over the available resources, and aims at minimizing the size of the cluster. SD-Rtree generalizes the well-known Rtree structure. It uses a distributed balanced binary tree that scales with insertions to potentially any number of storage servers through splits of the overloaded ones. A user/application manipulates the structure from a client node. The client addresses the tree through its image that can be possibly outdated due to later split. This may generate addressing errors, solved by the forwarding among the servers. Specific messages towards the clients incrementally correct the outdated images. We present the building of an SD-Rtree through insertions, focusing on the split and rotation algorithms. We follow with the query algorithms. We describe then a flexible allocation protocol which allows to cope with a temporary shortage of storage resources through data storage balancing. Experiments show additional aspects of SD-Rtree and compare its behavior with a distributed quadtree. The results justify our various design choices and the overall utility of the structure.", "paper_title": "Large-scale indexing of spatial data in distributed repositories: the SD-Rtree", "paper_id": "WOS:000268548800005"}