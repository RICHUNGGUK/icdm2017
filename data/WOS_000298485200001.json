{"auto_keywords": [{"score": 0.048191025582423316, "phrase": "routing_algorithm"}, {"score": 0.04158809801348612, "phrase": "proposed_routing_algorithms"}, {"score": 0.00481495049065317, "phrase": "intermittent_networks"}, {"score": 0.004779876533667754, "phrase": "storage_domains"}, {"score": 0.0044104497301196794, "phrase": "end_path"}, {"score": 0.004283280680222718, "phrase": "data_transfer"}, {"score": 0.004236539316738291, "phrase": "intermittent_links"}, {"score": 0.004084372444216856, "phrase": "sensor_networks"}, {"score": 0.004054598617367474, "phrase": "mobile_ad_hoc_networks"}, {"score": 0.004010342699414496, "phrase": "tolerant_networks"}, {"score": 0.003923269062268688, "phrase": "priori_routing"}, {"score": 0.0038380787059463075, "phrase": "link_state_changes"}, {"score": 0.003633079011725194, "phrase": "planned_duty_cycling"}, {"score": 0.0035934073774126856, "phrase": "scheduled_connectivity"}, {"score": 0.0035541673947328163, "phrase": "basic_idea"}, {"score": 0.00336428077531883, "phrase": "account_link_state_changes"}, {"score": 0.003315374849824563, "phrase": "quickest_route"}, {"score": 0.003291188255149539, "phrase": "source_and_destination_nodes"}, {"score": 0.0032079118323314424, "phrase": "time-varying_storage_domains"}, {"score": 0.0030587884803931964, "phrase": "single_storage_unit"}, {"score": 0.0030143100083252516, "phrase": "aggregated_storage_capacity"}, {"score": 0.0028741605025505435, "phrase": "limited_resource"}, {"score": 0.002780958897911242, "phrase": "storage_domain"}, {"score": 0.0027505663559338825, "phrase": "extensive_simulation"}, {"score": 0.002720505061804933, "phrase": "delay_performance"}, {"score": 0.002690771424958613, "phrase": "proposed_algorithms"}, {"score": 0.002632272952905934, "phrase": "flooding-based_algorithms"}, {"score": 0.002575042977852052, "phrase": "multiple_copies"}, {"score": 0.002401875938287542, "phrase": "network_topology"}, {"score": 0.0023756164484983874, "phrase": "balanced_load"}, {"score": 0.0023582694348219233, "phrase": "higher_network_utilization"}, {"score": 0.0021996478802839316, "phrase": "storage_requirement"}, {"score": 0.0021597049163247476, "phrase": "quickest_sd_algorithm"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["sensor networks", " disruption/delay tolerant network (DTN)", " routing algorithm", " quickest delivery algorithm", " storage domain algorithm"], "paper_abstract": "In this paper, we present a routing algorithm for a class of networks where a contemporaneous end-to-end path may not exist at the time of data transfer due to intermittent links. Several examples of such networks exist in the context of sensor networks, mobile ad hoc networks and delay tolerant networks. The proposed routing algorithms follow a priori routing similar to source routing. Link state changes are assumed to be known ahead of time, for instance, due to planned duty cycling resulting in scheduled connectivity. The basic idea behind the proposed routing algorithms is to modify the breadth first search (BFS) algorithm to take into account link state changes and find the quickest route between source and destination nodes. We introduce the idea of time-varying storage domains where all nodes connected for a length of time act as a single storage unit by sharing the aggregated storage capacity of the nodes. This will help situations where storage is a limited resource. We evaluate the routing algorithm with and without storage domain in an extensive simulation. The delay performance of the proposed algorithms is conceptually the same as flooding-based algorithms but without the penalty of multiple copies. More significantly, we show that the Quickest Storage Domain (Quickest SD) algorithm distributes the storage demand across many nodes in the network topology, enabling balanced load and higher network utilization. In fact, we show that for the same level of performance, we can actually cut the storage requirement in half using the Quickest SD algorithm. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Routing in intermittent networks using storage domains", "paper_id": "WOS:000298485200001"}