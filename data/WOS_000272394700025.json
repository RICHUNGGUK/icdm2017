{"auto_keywords": [{"score": 0.049270547314558835, "phrase": "succinct_representation"}, {"score": 0.00481495049065317, "phrase": "rank_and_select_functions"}, {"score": 0.004536244367689415, "phrase": "space-efficient_method"}, {"score": 0.0043842558719324526, "phrase": "discrete_objects"}, {"score": 0.003760685138103153, "phrase": "ith_object"}, {"score": 0.003697100573612401, "phrase": "succinctly_represented_data_structures"}, {"score": 0.0029617414861784525, "phrase": "constant_time"}, {"score": 0.0029116257477000617, "phrase": "non-compressed_bit_strings"}, {"score": 0.002332133125576037, "phrase": "theoretical_algorithm"}, {"score": 0.002215663255682209, "phrase": "practical_algorithm"}], "paper_keywords": ["succinct representation", " rank function", " select function"], "paper_abstract": "Succinct representation is a space-efficient method to represent n discrete objects using space close to the information-theoretic lower bound. In order to directly access the ith object of succinctly represented data structures in constant time, two fundamental functions, rank and select, are commonly used. In this paper we propose two implementations supporting rank and select in constant time for non-compressed bit strings. One uses O(n log log n/ root log n) bits of extra space and the other uses n + O(n log log n/log n) bits of extra space in the worst case. The former is rather a theoretical algorithm and the latter is a practical algorithm which works faster and uses less space in practice.", "paper_title": "Fast Computation of Rank and Select Functions for Succinct Representation", "paper_id": "WOS:000272394700025"}