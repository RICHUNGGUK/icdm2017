{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "guarded_recursion"}, {"score": 0.02295976215181012, "phrase": "clock_synchronisation"}, {"score": 0.004539005582217309, "phrase": "recursive_type_equations"}, {"score": 0.004459334186889869, "phrase": "type_variable"}, {"score": 0.0037133478610481994, "phrase": "coinductive_data"}, {"score": 0.0033984088755183287, "phrase": "time_streams"}, {"score": 0.0033584796908285894, "phrase": "clock_quantifiers"}, {"score": 0.003299460925313939, "phrase": "limited_and_controlled_elimination"}, {"score": 0.003091767402370757, "phrase": "dependent_types"}, {"score": 0.0030554300179552415, "phrase": "mogelberg"}, {"score": 0.002966438503447793, "phrase": "denotational_semantics"}, {"score": 0.002846175473457555, "phrase": "previous_versions"}, {"score": 0.002763261749602258, "phrase": "different_clocks"}, {"score": 0.0027307746993761035, "phrase": "separate_time_streams"}, {"score": 0.0024405312482831646, "phrase": "new_model"}, {"score": 0.002273292707863821, "phrase": "type_theory"}, {"score": 0.002233301265743633, "phrase": "freshness_restrictions"}, {"score": 0.0022070310530794097, "phrase": "typing_rules"}, {"score": 0.002142696637011647, "phrase": "necessary_step"}, {"score": 0.0021049977753042253, "phrase": "rewrite_semantics"}], "paper_keywords": ["Guarded recursion", " coinductive types", " type theory", " categorical semantics"], "paper_abstract": "Guarded recursion is an approach to solving recursive type equations where the type variable appears guarded by a modality to be thought of as a delay for one time step. Atkey and McBride proposed a calculus in which guarded recursion can be used when programming with coinductive data, allowing productivity to be captured in types. The calculus uses clocks representing time streams and clock quantifiers which allow limited and controlled elimination of modalities. The calculus has since been extended to dependent types by Mogelberg. Both works give denotational semantics but no rewrite semantics. In previous versions of this calculus, different clocks represented separate time streams and clock synchronisation was prohibited. In this paper we show that allowing clock synchronisation is safe by constructing a new model of guarded recursion and clocks. This result will greatly simplify the type theory by removing freshness restrictions from typing rules, and is a necessary step towards defining rewrite semantics, and ultimately implementing the calculus.", "paper_title": "A Model of Guarded Recursion With Clock Synchronisation", "paper_id": "WOS:000372714600007"}