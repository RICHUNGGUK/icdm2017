{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "suitable_system_scale"}, {"score": 0.04933401710855325, "phrase": "program_performance"}, {"score": 0.004690694501758065, "phrase": "software_dsm_systems"}, {"score": 0.004522080178250592, "phrase": "memory_systems"}, {"score": 0.004405348628112645, "phrase": "easy_user_interface"}, {"score": 0.004359500411441827, "phrase": "parallel_user_applications"}, {"score": 0.004314127287770832, "phrase": "distributed_systems"}, {"score": 0.0040942189695983185, "phrase": "dsm_systems"}, {"score": 0.003926359151817743, "phrase": "available_processors"}, {"score": 0.0038651944848734133, "phrase": "computer_network"}, {"score": 0.0038049789989278463, "phrase": "user_programs"}, {"score": 0.0035176353680157367, "phrase": "better_program_performance"}, {"score": 0.0034267429854665035, "phrase": "paralleling_programs"}, {"score": 0.0032012284065895537, "phrase": "program_execution"}, {"score": 0.0031348622158167195, "phrase": "performance_gain"}, {"score": 0.003102195256794215, "phrase": "program_parallel"}, {"score": 0.0029131986574478046, "phrase": "execution_processors"}, {"score": 0.0028527866590859967, "phrase": "performance_degradation"}, {"score": 0.002823050755743821, "phrase": "resource_waste"}, {"score": 0.0025555322596460036, "phrase": "dsm_applications"}, {"score": 0.0025156683465194967, "phrase": "run-time_information"}, {"score": 0.002476424729269258, "phrase": "experimental_results"}, {"score": 0.0024250482323322606, "phrase": "proposed_mechanism"}, {"score": 0.002362320344521919, "phrase": "processor_number"}, {"score": 0.002289180040240783, "phrase": "best_performance"}, {"score": 0.002183684303511462, "phrase": "test_applications"}, {"score": 0.0021496083700137305, "phrase": "system_scale"}, {"score": 0.0021049977753042253, "phrase": "predicted_result"}], "paper_keywords": ["distributed shared memory", " system scale", " program performance", " performance prediction"], "paper_abstract": "Recently, software distributed shared memory systems have successfully provided an easy user interface to parallel user applications on distributed systems. In order to prompt program performance, most of DSM systems usually were greedy to utilize all of available processors in a computer network to execute user programs. However, using more processors to execute programs cannot necessarily guarantee to obtain better program performance. The overhead of paralleling programs is increased by the addition in the number of processors used for program execution. If the performance gain from program parallel cannot compensate for the overhead, increasing the number of execution processors will result in performance degradation and resource waste. In this paper, we proposed a mechanism to dynamically find a suitable system scale to optimize performance for DSM applications according to run-time information. The experimental results show that the proposed mechanism can precisely predict the processor number that will result in the best performance and then effectively optimize the performance of the test applications by adapting system scale according to the predicted result.", "paper_title": "Finding a suitable system scale to optimize program performance on software DSM systems", "paper_id": "WOS:000240903400002"}