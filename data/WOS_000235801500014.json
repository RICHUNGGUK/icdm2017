{"auto_keywords": [{"score": 0.05007773449624722, "phrase": "complex_graphs"}, {"score": 0.025325674119790517, "phrase": "datalog"}, {"score": 0.004551199992546761, "phrase": "powerful_language"}, {"score": 0.004182301599359094, "phrase": "efficient_implementations"}, {"score": 0.003953068310598579, "phrase": "complexity_guarantees"}, {"score": 0.0037363522297378777, "phrase": "edge_labels"}, {"score": 0.003369322866499541, "phrase": "complex_interrelated_objects"}, {"score": 0.003306559295382181, "phrase": "object-oriented_systems"}, {"score": 0.003245058092433511, "phrase": "xml"}, {"score": 0.0030097975788892896, "phrase": "extended_regular_path_expressions"}, {"score": 0.002613709503583786, "phrase": "previous_query_languages"}, {"score": 0.0023346234464901978, "phrase": "limited_extensions"}, {"score": 0.0022064376000055764, "phrase": "previous_method"}, {"score": 0.0021450029487459403, "phrase": "specialized_algorithms"}, {"score": 0.0021049977753042253, "phrase": "complexity_formulas"}], "paper_keywords": [""], "paper_abstract": "This paper presents a powerful language for querying complex graphs and a method for generating efficient implementations that can answer queries with complexity guarantees. The graphs may have edge labels that may have parameters, and easily and naturally capture complex interrelated objects in object-oriented systems and XML data. The language is built on extended regular path expressions with variables and scoping, and can express queries more easily and clearly than previous query languages. The method for implementation first transforms queries into Datalog with limited extensions. It then extends a previous method to generate specialized algorithms and complexity formulas from Datalog with these extensions.", "paper_title": "Querying complex graphs", "paper_id": "WOS:000235801500014"}