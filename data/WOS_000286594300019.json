{"auto_keywords": [{"score": 0.04954756810706401, "phrase": "bidirectional_transformations"}, {"score": 0.00481495049065317, "phrase": "graph_transformations"}, {"score": 0.004682414867878963, "phrase": "novel_mechanism"}, {"score": 0.0036621225944272256, "phrase": "formal_definition"}, {"score": 0.003601235776892337, "phrase": "well-behaved_bidirectional_semantics"}, {"score": 0.0035612065202797164, "phrase": "uncal"}, {"score": 0.0033864888703414903, "phrase": "known_unql_graph_query_language"}, {"score": 0.0031315358193567708, "phrase": "structural_recursionongraphs"}, {"score": 0.0030282147475402736, "phrase": "existing_forward_evaluation"}, {"score": 0.0029945352738604742, "phrase": "structural_recursion"}, {"score": 0.002895721231882758, "phrase": "sufficient_trace_information"}, {"score": 0.0028635111041882956, "phrase": "later_backward_evaluation"}, {"score": 0.002784540221128404, "phrase": "trace_information"}, {"score": 0.0027535633837592597, "phrase": "backward_evaluation"}, {"score": 0.002722930209707764, "phrase": "reflectin-place_updates"}, {"score": 0.002531933388815139, "phrase": "universal_resolving_algorithm"}, {"score": 0.0025037596405075866, "phrase": "inverse_computation"}, {"score": 0.0023941575109692336, "phrase": "difficult_problem"}, {"score": 0.0021049977753042253, "phrase": "nontrivial_applications"}], "paper_keywords": ["Design", " Languages", " bidirectional transformation", " view updating", " graph query and transformation", " structural recursion"], "paper_abstract": "Bidirectional transformations provide a novel mechanism for synchronizing and maintaining the consistency of information between input and output. Despite many promising results on bidirectional transformations, these have been limited to the context of relational or XML(tree-like) databases. We challenge the problem of bidirectional transformations within the context of graphs, by proposing a formal definition of a well-behaved bidirectional semantics for UnCAL, i.e., a graph algebra for the known UnQL graph query language. The key to our successful formalizationis full utilization of both there cursive and bulk semantics of structural recursionongraphs. We carefully refine the existing forward evaluation of structural recursion so that it can produce sufficient trace information for later backward evaluation. We use the trace information for backward evaluation to reflectin-place updates and deletions on the view to the source, and adopt the universal resolving algorithm for inverse computation and then arrowing technique to tackle the difficult problem with insertion. We prove our bidirectional evaluation is well-behaved. Our current implementation is available online and confirms the usefulness of our approach with nontrivial applications.", "paper_title": "Bidirectionalizing Graph Transformations", "paper_id": "WOS:000286594300019"}