{"auto_keywords": [{"score": 0.050077152391246965, "phrase": "combinatorial_interaction_testing"}, {"score": 0.03822824368505863, "phrase": "greedy"}, {"score": 0.004555650675989931, "phrase": "cit"}, {"score": 0.004219321533320583, "phrase": "configuration_space"}, {"score": 0.0041835168653521, "phrase": "software_systems"}, {"score": 0.004148014765950199, "phrase": "simulated_annealing"}, {"score": 0.004060566667226606, "phrase": "greedy_algorithms"}, {"score": 0.003941215575554871, "phrase": "cit_test_suites"}, {"score": 0.0037928847801943404, "phrase": "widely-held_belief"}, {"score": 0.0037608455943316213, "phrase": "sa"}, {"score": 0.003512702405367876, "phrase": "higher_strength_coverage"}, {"score": 0.003409399407390298, "phrase": "seven_real-world_subjects"}, {"score": 0.0033660587983313536, "phrase": "well-studied_two-way"}, {"score": 0.003309124298009635, "phrase": "rarely-studied_six-way_interaction_strengths"}, {"score": 0.0031845067058084583, "phrase": "current_orthodoxy"}, {"score": 0.003157455511069507, "phrase": "real-world_constraints"}, {"score": 0.0030908254851076005, "phrase": "higher_strengths"}, {"score": 0.0027194778713860715, "phrase": "greedy_algorithm"}, {"score": 0.0025183881730011597, "phrase": "constraint_handling"}, {"score": 0.0024234763342790852, "phrase": "genetic_algorithm"}, {"score": 0.0024028742248152425, "phrase": "constrained_cit_test_suite_generation"}, {"score": 0.00235213013487844, "phrase": "first_time_strengths"}, {"score": 0.0021970842124338515, "phrase": "ga"}, {"score": 0.0021504218042734677, "phrase": "pairwise_testing"}, {"score": 0.0021049977753042253, "phrase": "small_number"}], "paper_keywords": ["Combinatorial interaction testing", " prioritisation", " empirical studies", " software testing"], "paper_abstract": "Combinatorial interaction testing (CIT) is important because it tests the interactions between the many features and parameters that make up the configuration space of software systems. Simulated Annealing (SA) and Greedy Algorithms have been widely used to find CIT test suites. From the literature, there is a widely-held belief that SA is slower, but produces more effective tests suites than Greedy and that SA cannot scale to higher strength coverage. We evaluated both algorithms on seven real-world subjects for the well-studied two-way up to the rarely-studied six-way interaction strengths. Our findings present evidence to challenge this current orthodoxy: real-world constraints allow SA to achieve higher strengths. Furthermore, there was no evidence that Greedy was less effective (in terms of time to fault revelation) compared to SA; the results for the greedy algorithm are actually slightly superior. However, the results are critically dependent on the approach adopted to constraint handling. Moreover, we have also evaluated a genetic algorithm for constrained CIT test suite generation. This is the first time strengths higher than 3 and constraint handling have been used to evaluate GA. Our results show that GA is competitive only for pairwise testing for subjects with a small number of constraints.", "paper_title": "Practical Combinatorial Interaction Testing: Empirical Findings on Efficiency and Early Fault Detection", "paper_id": "WOS:000361700500004"}