{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "race_freedom"}, {"score": 0.009639428848926332, "phrase": "race_detection"}, {"score": 0.0047310525657970615, "phrase": "linear_programming"}, {"score": 0.004527619017250708, "phrase": "new_static_analysis"}, {"score": 0.0038647641000798135, "phrase": "conventional_static_analyses"}, {"score": 0.0036020923276404433, "phrase": "explicit_computation"}, {"score": 0.003212663446866794, "phrase": "synchronization_idioms"}, {"score": 0.002623669616798891, "phrase": "modern_linear_programming"}, {"score": 0.002488604965680912, "phrase": "large_linear_programming_instances"}, {"score": 0.002339771435910601, "phrase": "formal_properties"}, {"score": 0.0021049977753042253, "phrase": "real_world_c_programs"}], "paper_keywords": ["algorithms", " languages", " theory", " verification", " fractional capabilities", " linear programming"], "paper_abstract": "We present a new static analysis for race freedom and race detection. The analysis checks race freedom by reducing the problem to ( rational) linear programming. Unlike conventional static analyses for race freedom or race detection, our analysis avoids explicit computation of locksets and lock linearity/must-aliasness. Our analysis can handle a variety of synchronization idioms that more conventional approaches often have difficulties with, such as thread joining, semaphores, and signals. We achieve efficiency by utilizing modern linear programming solvers that can quickly solve large linear programming instances. This paper reports on the formal properties of the analysis and the experience with applying an implementation to real world C programs.", "paper_title": "Checking race freedom via linear programming", "paper_id": "WOS:000257820400001"}