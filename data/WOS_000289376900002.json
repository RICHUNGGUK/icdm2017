{"auto_keywords": [{"score": 0.02994846263118798, "phrase": "l_lambda"}, {"score": 0.015719716506582538, "phrase": "hardware_description"}, {"score": 0.01445708122637245, "phrase": "conventional_hardware_description_languages"}, {"score": 0.014105114659637112, "phrase": "functional_hardware_description_languages"}, {"score": 0.013163931693706265, "phrase": "source_programs"}, {"score": 0.012654219549180968, "phrase": "hardware_circuits"}, {"score": 0.0044685410845412745, "phrase": "formal_semantics"}, {"score": 0.003906357144047631, "phrase": "wire_connections"}, {"score": 0.0038102613924627647, "phrase": "lowest_level"}, {"score": 0.0037350832473790007, "phrase": "high-level_descriptions"}, {"score": 0.003347259612209552, "phrase": "intermediate_functional_language"}, {"score": 0.0032164136388931805, "phrase": "hardware_description_languages"}, {"score": 0.003121636289442593, "phrase": "higher-order_functions"}, {"score": 0.003029643234751066, "phrase": "linear_type_system"}, {"score": 0.002955050521440921, "phrase": "linear_use"}, {"score": 0.0028966970007550824, "phrase": "function_type"}, {"score": 0.002797329638474873, "phrase": "structural_descriptions"}, {"score": 0.0025827837420330816, "phrase": "realizable_hardware_circuits"}, {"score": 0.0025191653363555193, "phrase": "realizable_hardware_circuit"}, {"score": 0.002481747081849503, "phrase": "corresponding_expression"}, {"score": 0.002337537183727731, "phrase": "practical_intermediate_language"}, {"score": 0.0022573076362326135, "phrase": "simple_hardware_description_language"}, {"score": 0.0021049977753042253, "phrase": "fast_fourier_transform_circuit_and_a_bitonic_sorting_network"}], "paper_keywords": [""], "paper_abstract": "In efforts to overcome the complexity of the syntax and the lack of formal semantics of conventional hardware description languages, a number of functional hardware description languages have been developed. Like conventional hardware description languages, however, functional hardware description languages eventually convert all source programs into netlists, which describe wire connections in hardware circuits at the lowest level and conceal all high-level descriptions written into source programs. We develop a calculus, called l. (linear lambda), which may serve as an intermediate functional language just above netlists in the hierarchy of hardware description languages. In order to support higher-order functions, l lambda uses a linear type system, which enforces the linear use of variables of function type. The translation of l lambda into structural descriptions of hardware circuits is sound and complete in the sense that it maps expressions only to realizable hardware circuits, and that every realizable hardware circuit has a corresponding expression in l lambda. To illustrate the use of l lambda as a practical intermediate language for hardware description, we design a simple hardware description language that extends l lambda with polymorphism, and use it to implement a fast Fourier transform circuit and a bitonic sorting network.", "paper_title": "A calculus for hardware description", "paper_id": "WOS:000289376900002"}