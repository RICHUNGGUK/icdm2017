{"auto_keywords": [{"score": 0.035366979368155665, "phrase": "query_time"}, {"score": 0.00481495049065317, "phrase": "axis-parallel_rectangles"}, {"score": 0.00443308765153716, "phrase": "fully_dynamic_data_structure"}, {"score": 0.004123781267600542, "phrase": "intersection_graph"}, {"score": 0.004039423410198574, "phrase": "n_axis-parallel_rectangles"}, {"score": 0.003916098498242888, "phrase": "amortized_update_time"}, {"score": 0.002841971477743441, "phrase": "update_time"}, {"score": 0.0026161698049580804, "phrase": "previous_method"}, {"score": 0.002194011800331242, "phrase": "fast_matrix_multiplication_results"}, {"score": 0.0021049977753042253, "phrase": "wider_range"}], "paper_keywords": [""], "paper_abstract": "In this paper we give a fully dynamic data structure to maintain the connectivity of the intersection graph of n axis-parallel rectangles. The amortized update time (insertion and deletion of rectangles) is O(n(10/11) polylogn) and the query time (deciding whether two given rectangles are connected) is O(1). It slightly improves the update time (O(n(0.94))) of the previous method while drastically reducing the query time (near O(n(1/3))). Our method does not use fast matrix multiplication results and supports a wider range of queries.", "paper_title": "Dynamic connectivity for axis-parallel rectangles", "paper_id": "WOS:000241478200003"}