{"auto_keywords": [{"score": 0.043486500689352524, "phrase": "gcrm_code"}, {"score": 0.041480729810386266, "phrase": "api"}, {"score": 0.004814984815589803, "phrase": "io"}, {"score": 0.004773404795430319, "phrase": "parallel_global_cloud_resolving_model"}, {"score": 0.004597457370802855, "phrase": "target_resolutions"}, {"score": 0.004227879333383761, "phrase": "serious_bottleneck"}, {"score": 0.004095567486538121, "phrase": "efficient_post-execution_data_analysis"}, {"score": 0.003755307753574745, "phrase": "community_standard_formats"}, {"score": 0.0036272258853286433, "phrase": "efficient_analysis"}, {"score": 0.003453193151234472, "phrase": "output_data_layout"}, {"score": 0.0033839745649214548, "phrase": "consistent_way"}, {"score": 0.0032215751881194328, "phrase": "convenient_format"}, {"score": 0.003202987495080647, "phrase": "subsequent_analyses"}, {"score": 0.0031116404200520614, "phrase": "flexible_api_interface"}, {"score": 0.003022890602492506, "phrase": "output_stream"}, {"score": 0.00273167822885383, "phrase": "model_developers"}, {"score": 0.0027080590887226517, "phrase": "new_data_fields"}, {"score": 0.0026384167183586015, "phrase": "new_physics"}, {"score": 0.0025044454602720597, "phrase": "output_frequency"}, {"score": 0.002418923027024191, "phrase": "individual_calculations"}, {"score": 0.002349884235026956, "phrase": "netcdf_data_model"}, {"score": 0.002309408211203032, "phrase": "grid_description"}, {"score": 0.0022565201625076876, "phrase": "io_aggregation_strategies"}, {"score": 0.0022176487309947266, "phrase": "high_bandwidth"}, {"score": 0.002129527338875116, "phrase": "initial_performance_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["High performance IO", " Parallel IO libraries", " Data formatting", " Geodesic grid", " Global Cloud Resolving Model", " Grid Specifications"], "paper_abstract": "Execution of a Global Cloud Resolving Model (GCRM) at target resolutions of 2-4 km will generate, at a minimum, 10s of Gigabytes of data per variable per snapshot. Writing this data to disk, without creating a serious bottleneck in the execution of the GCRM code, while also supporting efficient post-execution data analysis is a significant challenge. This paper discusses an Input/Output (IO) application programmer interface (API) for the GCRM that efficiently moves data from the model to disk while maintaining support for community standard formats, avoiding the creation of very large numbers of files, and supporting efficient analysis. Several aspects of the API will be discussed in detail. First, we discuss the output data layout which linearizes the data in a consistent way that is independent of the number of processors used to run the simulation and provides a convenient format for subsequent analyses of the data. Second, we discuss the flexible API interface that enables modelers to easily add variables to the output stream by specifying where in the GCRM code these variables are located and to flexibly configure the choice of outputs and distribution of data across files. The flexibility of the API is designed to allow model developers to add new data fields to the output as the model develops and new physics is added. It also provides a mechanism for allowing users of the GCRM code to adjust the output frequency and the number of fields written depending on the needs of individual calculations. Third, we describe the mapping to the NetCDF data model with an emphasis on the grid description. Fourth, we describe our messaging algorithms and IO aggregation strategies that are used to achieve high bandwidth while simultaneously writing concurrently from many processors to shared files. We conclude with initial performance results. Published by Elsevier Ltd.", "paper_title": "Efficient data IO for a Parallel Global Cloud Resolving Model", "paper_id": "WOS:000298270300030"}