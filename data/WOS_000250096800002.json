{"auto_keywords": [{"score": 0.04380655797740591, "phrase": "linear_forwarders"}, {"score": 0.006880558385621038, "phrase": "input_capability"}, {"score": 0.004817215825996006, "phrase": "linear"}, {"score": 0.0046993598473345395, "phrase": "linear_forwarder"}, {"score": 0.004289966839994858, "phrase": "different_channel"}, {"score": 0.004086350434865782, "phrase": "distributed_implementation"}, {"score": 0.004036968488559984, "phrase": "milner's_asynchronous_pi_calculus"}, {"score": 0.0037075456471849892, "phrase": "received_name"}, {"score": 0.003531474887552889, "phrase": "subsequent_input"}, {"score": 0.00342568771304873, "phrase": "dynamic_creation"}, {"score": 0.003384262486955773, "phrase": "large_input_processes"}, {"score": 0.0033230588808076267, "phrase": "wrong_place"}, {"score": 0.0032431667821391044, "phrase": "comparatively_large_code_migrations"}, {"score": 0.0031459887611258765, "phrase": "consensus_problems"}, {"score": 0.003051713660488494, "phrase": "small_atom"}, {"score": 0.0028195727965553367, "phrase": "full_input_capability"}, {"score": 0.0026209522797963447, "phrase": "distributed_machine"}, {"score": 0.0024511688853030168, "phrase": "pi_calculus"}, {"score": 0.002278440725193305, "phrase": "simple_encoding"}, {"score": 0.0022508572821818124, "phrase": "distributed_choice"}, {"score": 0.0022101055924375725, "phrase": "\"clean\"_behaviour"}], "paper_keywords": ["pi-calculus", " distributed implementation", " input capability", " linear forwarders"], "paper_abstract": "A linear forwarder is a process that receives one message on a channel and sends it on a different channel. We use linear forwarders to provide a distributed implementation of Milner's asynchronous pi calculus. Such a distributed implementation is known to be difficult due to input capability, where a received name is used as the subject of a subsequent input. This allows the dynamic creation of large input processes in the wrong place, thus requiring comparatively large code migrations in order to avoid consensus problems. Linear forwarders constitute a small atom of input capability that is easy to move. We show that the full input capability can be simply encoded using linear forwarders. We also design a distributed machine, demonstrating the ease with which we can implement the pi calculus using linear forwarders. We also show that linear forwarders allow for a simple encoding of distributed choice and have \"clean\" behaviour in the presence of failures. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Linear forwarders", "paper_id": "WOS:000250096800002"}