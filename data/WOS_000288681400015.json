{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asynchronous_pipelines"}, {"score": 0.040797714218440494, "phrase": "proposed_approach"}, {"score": 0.011200897060008444, "phrase": "asynchronous_control"}, {"score": 0.004580769304731227, "phrase": "modeling_rules"}, {"score": 0.004483909657713567, "phrase": "synthesis_method"}, {"score": 0.004175533280178052, "phrase": "circuit_area"}, {"score": 0.004000741805312148, "phrase": "asynchronous_control_network"}, {"score": 0.0038060092376105414, "phrase": "conventional_syntax-directed_translation_approach"}, {"score": 0.0036207206487324506, "phrase": "data-driven_design_style"}, {"score": 0.003544088803300751, "phrase": "coarse-grain_approach"}, {"score": 0.0032302647179383915, "phrase": "communication_channels"}, {"score": 0.002881793492919646, "phrase": "conventional_synchronous_design_flows"}, {"score": 0.0027610089418453614, "phrase": "verilog_and_system_verilog_specifications"}, {"score": 0.002683304054823427, "phrase": "register-transfer_level_models"}, {"score": 0.002570817338292482, "phrase": "logic_synthesis"}, {"score": 0.0025343769150179764, "phrase": "existing_computer-aided_design_tools"}, {"score": 0.0023936956017015696, "phrase": "interpolated_finite-impulse-response_filter_bank"}, {"score": 0.0023263143581670706, "phrase": "reed-solomon"}, {"score": 0.0022608057001451414, "phrase": "design_examples"}], "paper_keywords": ["Asynchronous", " low power"], "paper_abstract": "We propose a set of modeling rules and a synthesis method for the design of asynchronous pipelines. To keep the circuit area and power dissipation of the asynchronous control network small, the proposed approach avoids the conventional syntax-directed translation approach. Instead, it employs a data-driven design style and a coarse-grain approach to the synthesis of asynchronous control, restricting asynchronous control to the implementation of communication channels commonly found in asynchronous pipelines and operations involving these channels. The proposed approach integrates well into conventional synchronous design flows because they are based on Verilog and System Verilog specifications, and generate register-transfer level models suitable for functional simulation and logic synthesis using existing computer-aided design tools. Using a 32-bit microprocessor, an interpolated finite-impulse-response filter bank, and a Reed-Solomon error detector as design examples, we show that the proposed approach is competitive with other comparable reported methods.", "paper_title": "Modeling and Synthesis of Asynchronous Pipelines", "paper_id": "WOS:000288681400015"}