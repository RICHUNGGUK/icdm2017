{"auto_keywords": [{"score": 0.04968898347890439, "phrase": "massive_data"}, {"score": 0.0061212206984143855, "phrase": "jcs"}, {"score": 0.004868980408108419, "phrase": "pi-join"}, {"score": 0.00481495049065317, "phrase": "join_queries"}, {"score": 0.00467905143301368, "phrase": "disk_capacity"}, {"score": 0.004640929126263433, "phrase": "disk_transfer_rate"}, {"score": 0.0040713749949601915, "phrase": "database_systems"}, {"score": 0.003892126266260425, "phrase": "query_processing"}, {"score": 0.0037360045780015804, "phrase": "disk-based_join_operation"}, {"score": 0.0036903962975894634, "phrase": "common_but_time-consuming_database_operation"}, {"score": 0.0034847851398628546, "phrase": "execution_time"}, {"score": 0.00342816445816304, "phrase": "current_join_algorithms"}, {"score": 0.00335867620389808, "phrase": "moderate_or_small_data_volume"}, {"score": 0.002994701080666466, "phrase": "pi-join_a_novel_disk-based_join_algorithm"}, {"score": 0.002626645763725465, "phrase": "cache-conscious_construction_algorithm"}, {"score": 0.002541910967437926, "phrase": "column-oriented_model"}, {"score": 0.002500571634075998, "phrase": "positional_index_pair_table"}, {"score": 0.002449839292715327, "phrase": "join_results"}, {"score": 0.0024099937116733227, "phrase": "obtained_jpipt"}, {"score": 0.002370798544423318, "phrase": "ros"}, {"score": 0.0023131855385489764, "phrase": "one-pass_sequential_selective_scan"}, {"score": 0.0022385401780982204, "phrase": "correctness_proof"}, {"score": 0.002220257443705344, "phrase": "cost_analysis"}, {"score": 0.002131054594847684, "phrase": "significant_advantage"}, {"score": 0.0021049977753042253, "phrase": "existing_join_algorithms"}], "paper_keywords": ["Massive data", " PI-join", " JPIPT construction stage", " Result output stage"], "paper_abstract": "The ratio of disk capacity to disk transfer rate typically increases by 10x per decade. As a result, disk is becoming slower from the view of applications because of the much larger data volume that they need to store and process. In database systems, the less the data volume that is involved in query processing, the better the performance that is achieved. Disk-based join operation is a common but time-consuming database operation, especially in an environment of massive data in which I/O cost dominates the execution time. However, current join algorithms are only suitable for moderate or small data volume. They will incur high I/O cost when performing on massive data because of multi-pass I/O operations on the joined tables and the insensitivity to join selectivity. This paper proposes PI-Join a novel disk-based join algorithm that can efficiently process join queries involving massive data. PI-Join consists of two stages: JPIPT construction stage (JCS) and result output stage (ROS). JCS performs a cache-conscious construction algorithm on join attributes which are kept in column-oriented model to obtain join positional index pair table (JPIPT) of join results faster. The obtained JPIPT is used in ROS to retrieve results in a one-pass sequential selective scan on each table. We provide the correctness proof and cost analysis of PI-Join. Our experimental results indicate that PI-Join has a significant advantage over the existing join algorithms.", "paper_title": "PI-Join: Efficiently processing join queries on massive data", "paper_id": "WOS:000307331500003"}