{"auto_keywords": [{"score": 0.03743737212191201, "phrase": "file's_defect_count"}, {"score": 0.0064576884266411725, "phrase": "distinct_authors"}, {"score": 0.00481495049065317, "phrase": "file's_history"}, {"score": 0.004613516457919661, "phrase": "source_programs"}, {"score": 0.0045864123400333155, "phrase": "context"}, {"score": 0.004515967518891287, "phrase": "particular_characteristics"}, {"score": 0.004205395707787349, "phrase": "testing_effort"}, {"score": 0.003765525342866404, "phrase": "empirical_approach"}, {"score": 0.003725470458263889, "phrase": "statistical_procedures"}, {"score": 0.0036990033106718183, "phrase": "visual_representations"}, {"score": 0.003481465013724763, "phrase": "nine_open_source"}, {"score": 0.0034691370037490373, "phrase": "java"}, {"score": 0.003432160899769594, "phrase": "different_versions"}, {"score": 0.00332375606483146, "phrase": "file's_defects"}, {"score": 0.003265012781840765, "phrase": "current_releases"}, {"score": 0.0032073043728420843, "phrase": "analysed_releases"}, {"score": 0.003128216758835217, "phrase": "oldest_files"}, {"score": 0.003051073364818384, "phrase": "late_changes"}, {"score": 0.0028207566216121856, "phrase": "file's_age"}, {"score": 0.0028006988338192375, "phrase": "good_indicators"}, {"score": 0.002664221051021009, "phrase": "software's_history"}, {"score": 0.002635850034826311, "phrase": "good_indicator"}, {"score": 0.0024984517279573906, "phrase": "equal_manner"}, {"score": 0.0024281181691350085, "phrase": "significant_strong_correlations"}, {"score": 0.0024108455980729284, "phrase": "nearly_all_projects_da"}, {"score": 0.0022527488455744674, "phrase": "statistical_analyses"}, {"score": 0.0021050011192089513, "phrase": "elsevier"}], "paper_keywords": ["Empirical study", " Software testing", " Software history/evolution"], "paper_abstract": "Context The knowledge about particular characteristics of software that are indicators for defects is very valuable for testers because it helps them to focus the testing effort and to allocate their limited resources appropriately. Objective In this paper, we explore the relationship between several historical characteristics of files and their defect count. Method For this purpose, we propose an empirical approach that uses statistical procedures and visual representations of the data in order to determine indicators for a file's defect count We apply this approach to nine open source Java projects across different versions. Results Only 4 of 9 programs show moderate correlations between a file's defects in previous and in current releases in more than half of the analysed releases In contrast to our expectations, the oldest files represent the most fault-prone files. Additionally, late changes correlate with a file's defect count only partly The number of changes, the number of distinct authors performing changes to a file as well as the file's age are good indicators for a file's defect count in all projects. Conclusion: Our results show that a software's history is a good indicator for 1st quality We did not find one indicator that persists across all projects in an equal manner Nevertheless, there are several indicators that show significant strong correlations in nearly all projects DA (number of distinct authors) and FC (frequency of change). In practice, for each software, statistical analyses have to be performed in order to evaluate the best indicator(s) for a file's defect count (C) 2009 Elsevier B V All rights reserved", "paper_title": "Exploring the relationship of a file's history and its fault-proneness: An empirical method and its application to open source programs", "paper_id": "WOS:000277107200007"}