{"auto_keywords": [{"score": 0.04467255936790569, "phrase": "memory_locations"}, {"score": 0.00481495049065317, "phrase": "static_race_detection"}, {"score": 0.0047273577269638725, "phrase": "race_detection_algorithms"}, {"score": 0.004641351004344458, "phrase": "multi-threaded_programs"}, {"score": 0.004515252649226697, "phrase": "common_lock-based_synchronization_idiom"}, {"score": 0.0038981499110532307, "phrase": "race_freedom"}, {"score": 0.003126481516783286, "phrase": "general_property"}, {"score": 0.002183938718432764, "phrase": "experimental_results"}, {"score": 0.0021441057555396013, "phrase": "sound_race_detection"}, {"score": 0.0021049977753042253, "phrase": "java_programs"}], "paper_keywords": ["experimentation", " reliability", " verification", " static race detection", " Java", " synchronization", " concurrency", " multi-threading"], "paper_abstract": "Race detection algorithms for multi-threaded programs using the common lock-based synchronization idiom must correlate locks with the memory locations they guard. The heart of a proof of race freedom is showing that if two locks are distinct, then the memory locations they guard are also distinct. This is an example of a general property we call conditional must not aliasing: Under the assumption that two objects are not aliased, prove that two other objects are not aliased. This paper introduces and gives an algorithm for conditional must not alias analysis and discusses experimental results for sound race detection of Java programs.", "paper_title": "Conditional must not aliasing for static race detection", "paper_id": "WOS:000253407700035"}