{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "twelf_metalogical_framework"}, {"score": 0.031388704174305886, "phrase": "safety_policy"}, {"score": 0.0046797114400479135, "phrase": "foundational_certified_code_systems"}, {"score": 0.004420472010542188, "phrase": "untrusted_programs"}, {"score": 0.004058180509184539, "phrase": "safety_policies"}, {"score": 0.0037789720824759503, "phrase": "actual_machine_architectures"}, {"score": 0.0035189057079817285, "phrase": "systems'_flexibility"}, {"score": 0.0027218799769229596, "phrase": "trusted_runtime_library"}, {"score": 0.0024281181691350085, "phrase": "formalized_operational_semantics"}, {"score": 0.0021049977753042253, "phrase": "fully_expressive_typed_assembly_language"}], "paper_keywords": ["languages", " verification", " foundational certified code", " metalogic", " logic programming"], "paper_abstract": "Foundational certified code systems seek to prove untrusted programs to be safe relative to safety policies given in terms of actual machine architectures, thereby improving the systems' flexibility and extensibility. Using the Twelf metalogical framework, we have constructed a safety policy for the IA-32 architecture with a trusted runtime library. The safety policy is based on a formalized operational semantics. We have also developed a complete, foundational proof that a fully expressive typed assembly language satisfies that safety policy.", "paper_title": "Foundational certified code in the Twelf metalogical framework", "paper_id": "WOS:000257429400002"}