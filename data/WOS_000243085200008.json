{"auto_keywords": [{"score": 0.03235740424067532, "phrase": "parallelized_version"}, {"score": 0.004688321299229397, "phrase": "continuing_rapid_increase"}, {"score": 0.003942299471749811, "phrase": "fast_software_tool"}, {"score": 0.003614895644619489, "phrase": "worst-case_scenario_search"}, {"score": 0.0033368295512438187, "phrase": "ppp"}, {"score": 0.003163326114997034, "phrase": "phylogenetic_tree"}, {"score": 0.0025042115651986332, "phrase": "sequential_version"}, {"score": 0.0023268399760599336, "phrase": "cpu_numbers"}, {"score": 0.002250415129116109, "phrase": "outstanding_scalability"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["16S rRNA targeted probes", " genetic affinity", " parallel algorithm"], "paper_abstract": "With the continuing rapid increase in the number of available 16S ribosomal RNA (rRNA) sequences, it is a significant computational challenge to efficiently design 16S rRNA targeted probes. In our previous work, we designed a fast software tool called ProkProbePicker (PPP) that takes 0(log N) time for a worst-case scenario search. Despite this improvement, it can still take many hours for PPP to extract probes for all the clusters in a phylogenetic tree. Herein, a parallelized version of PPP is described. When run on 80 processors, this version of PPP took only 67 min to extract probes, while some 87 h were needed by the sequential version of PPP. The speedup increased linearly with the increase of CPU numbers, which revealed the outstanding scalability of the parallelized version of PPP. (C) 2006 Elsevier Inc. All rights reserved.", "paper_title": "A parallel computing algorithm for 16S rRNA probe design", "paper_id": "WOS:000243085200008"}