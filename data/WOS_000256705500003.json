{"auto_keywords": [{"score": 0.02811644268570193, "phrase": "resource_manager"}, {"score": 0.025508670811257253, "phrase": "case_study"}, {"score": 0.00481495049065317, "phrase": "mpsoc_platforms"}, {"score": 0.004783105609960904, "phrase": "modern_day_applications"}, {"score": 0.004720043307726269, "phrase": "multi-processor_systems"}, {"score": 0.004596390584582711, "phrase": "power_efficiency"}, {"score": 0.0044759626695474106, "phrase": "single_system"}, {"score": 0.004358676214574977, "phrase": "multi-processor_platform"}, {"score": 0.004315487055548749, "phrase": "multidimensional_problem"}, {"score": 0.004272724011826495, "phrase": "possible_set"}, {"score": 0.0041195049121633956, "phrase": "different_usc-case"}, {"score": 0.003816593863814444, "phrase": "resource_utilization"}, {"score": 0.003778755692995768, "phrase": "possible_use-cases"}, {"score": 0.003264872488939969, "phrase": "novel_observations"}, {"score": 0.0032004205378150354, "phrase": "important_role"}, {"score": 0.0031792196429621888, "phrase": "system_behavior"}, {"score": 0.002955050521440921, "phrase": "arbitration_mechanisms"}, {"score": 0.002925728709297618, "phrase": "necessary_features"}, {"score": 0.002848947756758754, "phrase": "scalability_problems"}, {"score": 0.0028113140998735366, "phrase": "unreasonable_estimates"}, {"score": 0.0027193846595965593, "phrase": "undesirable_performance"}, {"score": 0.0025528981558942372, "phrase": "basic_functionalities"}, {"score": 0.0024941578231560055, "phrase": "high-level_simulation_model"}, {"score": 0.0024287998837955213, "phrase": "rm"}, {"score": 0.002310482790486003, "phrase": "jpeg_decoder"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["composability", " predictability", " MPSoC", " arbitration", " non-preemptive", " heterogeneous", " resource manager"], "paper_abstract": "Modern day applications require use of multi-processor systems for reasons of performance, scalability and power efficiency. As more and more applications are integrated in a single system, mapping and analyzing them oil a multi-processor platform becomes a multidimensional problem. Each possible set of applications that can be concurrently active leads to a different usc-case (also referred to as scenario) that the system has to be verified and tested for. Analyzing the feasibility and resource utilization of all possible use-cases becomes very demanding and often infeasible. Therefore, in this paper, we highlight this issue of being able to analyze applications in isolation while still being able to reason about their overall behavior - also called composability. We make a number of novel observations about how arbitration plays an important role in system behavior. We compare two commonly used arbitration mechanisms, and highlight the properties that are important for such analysis. We conclude that none of these arbitration mechanisms provide the necessary features for analysis. They either suffer from scalability problems, or provide unreasonable estimates about performance, leading to waste of resources and/or undesirable performance. We further propose to use a Resource Manager (RM) to ensure applications meet their performance requirements. The basic functionalities of such a component are introduced. A high-level simulation model is developed to study the performance of RM, and a case study is performed for a system running an H.263 and a JPEG decoder. The case study illustrates at what granularity of control a resource manager can effectively regulate the progress of applications such that they meet their performance requirements. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Analyzing composability of applications on MPSoC platforms", "paper_id": "WOS:000256705500003"}