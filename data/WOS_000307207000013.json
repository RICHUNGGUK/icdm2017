{"auto_keywords": [{"score": 0.04787636758356028, "phrase": "code_segments"}, {"score": 0.010340075174548725, "phrase": "software_partitioning"}, {"score": 0.009318290873932565, "phrase": "execution_locations"}, {"score": 0.00481495049065317, "phrase": "multiple_instantiation"}, {"score": 0.0043367547691560175, "phrase": "general-purpose_processors"}, {"score": 0.004291617358806677, "phrase": "specialist_hardware_components"}, {"score": 0.004115697805448384, "phrase": "communication_characteristics"}, {"score": 0.0038854765143440965, "phrase": "high_speed_tend"}, {"score": 0.003480993634130542, "phrase": "overall_program_run_time"}, {"score": 0.0034088473318056537, "phrase": "size_constraints"}, {"score": 0.003251920460276645, "phrase": "additional_speedup"}, {"score": 0.0028378798711397235, "phrase": "execution_frequency"}, {"score": 0.002678944072162297, "phrase": "multiply_instantiated_code_segments"}, {"score": 0.002637160140011997, "phrase": "frequency_information"}, {"score": 0.0025824576209656676, "phrase": "sequence_information"}, {"score": 0.0024634797027967203, "phrase": "software_partition"}, {"score": 0.002337684811187166, "phrase": "software-partitioning_problem"}, {"score": 0.002301211274459965, "phrase": "robust_optimization_problem"}, {"score": 0.0022772115643656153, "phrase": "decision-dependent_uncertainty"}, {"score": 0.002183684303511462, "phrase": "mixed-integer_linear_program"}, {"score": 0.0021049977753042253, "phrase": "promising_numerical_results"}], "paper_keywords": ["robust optimization", " software partitioning", " decision-dependent uncertainty", " multiple instance partitioning"], "paper_abstract": "The purpose of software partitioning is to assign code segments of a given computer program to a range of I execution locations such as general-purpose processors or specialist hardware components. These execution locations differ in speed, communication characteristics, and size. In particular, hardware components offering high speed tend to accommodate only few code segments. The goal of software partitioning is to find an assignment of code segments to execution locations that minimizes the overall program run time and respects the size constraints. In this paper we demonstrate that an additional speedup is obtained if we allow code segments to be instantiated on more than one location. We further show that the program run time not only depends on the execution frequency of the code segments but also on their execution order if there are multiply instantiated code segments. Unlike frequency information, however, sequence information is not available at the time when the software partition is selected. This motivates us to formulate the software-partitioning problem as a robust optimization problem with decision-dependent uncertainty. We transform this problem to a mixed-integer linear program of moderate size and report on promising numerical results.", "paper_title": "Robust Software Partitioning with Multiple Instantiation", "paper_id": "WOS:000307207000013"}