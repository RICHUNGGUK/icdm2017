{"auto_keywords": [{"score": 0.03524369468825586, "phrase": "main_memory"}, {"score": 0.010253687668679982, "phrase": "lbs"}, {"score": 0.0069123829443672085, "phrase": "disk_storage"}, {"score": 0.006067148366440234, "phrase": "migration_policies"}, {"score": 0.00481495049065317, "phrase": "moving-objects_databases"}, {"score": 0.004687159050154687, "phrase": "location-based_services"}, {"score": 0.004493130934067195, "phrase": "widespread_use"}, {"score": 0.004458722048888919, "phrase": "mobile_devices"}, {"score": 0.004208898327189986, "phrase": "rfid"}, {"score": 0.0041287394089001405, "phrase": "core_technology"}, {"score": 0.004050116768809519, "phrase": "moving-objects_database"}, {"score": 0.0039274105882136775, "phrase": "moving_objects"}, {"score": 0.0035536228914319354, "phrase": "large_numbers"}, {"score": 0.0033158265075584796, "phrase": "real-time_processing"}, {"score": 0.003000070450638437, "phrase": "large_volumes"}, {"score": 0.002853620962601042, "phrase": "unified_index_scheme"}, {"score": 0.002571841741339248, "phrase": "memory_space"}, {"score": 0.0025521085778978042, "phrase": "migration_policy"}, {"score": 0.00230003335593664, "phrase": "bulk_operations"}, {"score": 0.002282380944889266, "phrase": "dynamic_clustering"}, {"score": 0.002256155453630723, "phrase": "unified_index"}, {"score": 0.0021049977753042253, "phrase": "experimental_evaluation"}], "paper_keywords": [""], "paper_abstract": "Recently, the need for Location-Based Services (LBS) has increased due to the development and widespread use of mobile devices (e.g., PDAs, cellular phones, laptop computers, GPS, and RFID etc). The core technology of LBS is a moving-objects database that stores and manages the positions of moving objects. To search for information quickly, the database needs to contain an index that supports both real-time position tracking and management of large numbers of updates. As a result, the index requires a structure operating in the main memory for real-time processing and requires a technique to migrate part of the index from the main memory to disk storage (or from disk storage to the main memory) to manage large volumes of data. To satisfy these requirements, this paper suggests a unified index scheme unifying the main memory and the disk as well as migration policies for migrating part of the index from the memory to the disk during a restriction in memory space. Migration policy determines a group of nodes, called the migration subtree, and migrates the group as a unit to reduce disk I/O. This method takes advantage of bulk operations and dynamic clustering. The unified index is created by applying various migration policies. This paper measures and compares the performance of the migration policies using experimental evaluation.", "paper_title": "A unified index for moving-objects databases", "paper_id": "WOS:000237646100017"}