{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "raw_data_files"}, {"score": 0.015568136519774903, "phrase": "data_collections"}, {"score": 0.013857698242575708, "phrase": "database_systems"}, {"score": 0.004614815588012902, "phrase": "increasing_bottlenecks"}, {"score": 0.004322967486451877, "phrase": "desired_queries"}, {"score": 0.0039969114480547865, "phrase": "increased_data-to-query_time"}, {"score": 0.0036832960694422765, "phrase": "daily_basis"}, {"score": 0.003635444740897197, "phrase": "data_deluge"}, {"score": 0.003231722251475338, "phrase": "new_paradigm"}, {"score": 0.003179303164775306, "phrase": "nodb"}, {"score": 0.0031175178621644464, "phrase": "data_loading"}, {"score": 0.003066945490483524, "phrase": "whole_feature_set"}, {"score": 0.0030369955065974222, "phrase": "modern_database_system"}, {"score": 0.0028353540399641336, "phrase": "query_engine"}, {"score": 0.0027440826979105533, "phrase": "nodb_philosophy"}, {"score": 0.002717277008333612, "phrase": "modern_database_management_systems"}, {"score": 0.0026470650216161577, "phrase": "fundamental_limitations"}, {"score": 0.0026041043995937404, "phrase": "strong_opportunities"}, {"score": 0.002545125352770175, "phrase": "performance_bottlenecks"}, {"score": 0.0025120232221781825, "phrase": "situ_processing"}, {"score": 0.0023222375006409675, "phrase": "adaptive_indexing_mechanism"}, {"score": 0.0022995431219125536, "phrase": "positional_information"}, {"score": 0.0022770700208637807, "phrase": "efficient_access"}, {"score": 0.002225481283887324, "phrase": "flexible_caching_structure"}, {"score": 0.002189347748410919, "phrase": "nodb_systems"}, {"score": 0.0021327478049969423, "phrase": "modern_dbms"}, {"score": 0.0021049977753042253, "phrase": "unprecedented_positive_effect"}], "paper_keywords": [""], "paper_abstract": "As data collections become larger and larger, users are faced with increasing bottlenecks in their data analysis. More data means more time to prepare and to load the data into the database before executing the desired queries. Many applications already avoid using database systems, for example, scientific data analysis and social networks, due to the complexity and the increased data-to-query time, that is, the time between getting the data and retrieving its first useful results. For many applications data collections keep growing fast, even on a daily basis, and this data deluge will only increase in the future, where it is expected to have much more data than what we can move or store, let alone analyze. We here present the design and roadmap of a new paradigm in database systems, called NoDB, which do not require data loading while still maintaining the whole feature set of a modern database system. In particular, we show how to make raw data files a first-class citizen, fully integrated with the query engine. Through our design and lessons learned by implementing the NoDB philosophy over a modern Database Management Systems (DBMS), we discuss the fundamental limitations as well as the strong opportunities that such a research path brings. We identify performance bottlenecks specific for in situ processing, namely the repeated parsing and tokenizing overhead and the expensive data type conversion. To address these problems, we introduce an adaptive indexing mechanism that maintains positional information to provide efficient access to raw data files, together with a flexible caching structure. We conclude that NoDB systems are feasible to design and implement over modern DBMS, bringing an unprecedented positive effect in usability and performance.", "paper_title": "NoDB: Efficient Query Execution on Raw Data Files", "paper_id": "WOS:000365237800031"}