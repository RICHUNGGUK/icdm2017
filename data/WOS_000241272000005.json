{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "similarity_search"}, {"score": 0.04351475728041089, "phrase": "k-nn_queries"}, {"score": 0.03164512769284701, "phrase": "karhunen-loeve_transformation"}, {"score": 0.030468642146266864, "phrase": "main_memory"}, {"score": 0.00477190623242136, "phrase": "popular_paradigm"}, {"score": 0.004743423032820112, "phrase": "advanced_database_applications"}, {"score": 0.004686963264680882, "phrase": "based_image_retrieval"}, {"score": 0.0046590047808072734, "phrase": "cbir"}, {"score": 0.004535124351828787, "phrase": "feature_vectors"}, {"score": 0.004271490815763164, "phrase": "disk_resident_index"}, {"score": 0.00408383113155665, "phrase": "high-dimensional_feature_vectors"}, {"score": 0.003999089046152065, "phrase": "high_degree"}, {"score": 0.003939633463129123, "phrase": "minimum_bounding_rectangles"}, {"score": 0.003677280504320636, "phrase": "disk_positioning_time"}, {"score": 0.0036553070575015344, "phrase": "random_disk_accesses"}, {"score": 0.0034841647157189985, "phrase": "alternative_solution"}, {"score": 0.0034529760173586583, "phrase": "high-dimensional_data"}, {"score": 0.0033812801309408514, "phrase": "main_memory_sizes"}, {"score": 0.0033510093127915768, "phrase": "annual_improvement"}, {"score": 0.00333097896868937, "phrase": "disk_transfer_rates"}, {"score": 0.0032132782979796895, "phrase": "main_memory_resident_index"}, {"score": 0.003081190713096043, "phrase": "op-tree_parameters"}, {"score": 0.0030262520433471333, "phrase": "sequential_scan_method"}, {"score": 0.002919287408226361, "phrase": "dynamically_allocated_nodes"}, {"score": 0.002833035775182696, "phrase": "linked_list"}, {"score": 0.0027992509096654754, "phrase": "contiguous_area"}, {"score": 0.0027002880298916104, "phrase": "single_file"}, {"score": 0.002644179117033107, "phrase": "single_transfer"}, {"score": 0.00262048982464897, "phrase": "original_op-tree"}, {"score": 0.0025202582748972122, "phrase": "new_points"}, {"score": 0.00242385118139873, "phrase": "space_efficiency"}, {"score": 0.002269008698686152, "phrase": "processing_time"}, {"score": 0.0022419349154472806, "phrase": "persistent_op-trees"}, {"score": 0.0021821915946356168, "phrase": "proposed_method"}], "paper_keywords": ["multimedia databases", " feature vectors", " similarity search", " nearest neighbor queries", " high dimensional indexing", " persistent index"], "paper_abstract": "Similarity search is a popular paradigm in advanced database applications. In content based image retrieval (CBIR) for example, images are transformed into feature vectors, which are then used for similarity search via k-nearest-neighbor (k-NN) queries in the feature vector space. Clustering by building a disk resident index is one method to speed up the processing of k-NN queries. In the case of high-dimensional feature vectors the dimensionality curse results in a high degree of overlap among the minimum bounding rectangles of the index, which results in most pages of the index being accessed. This is especially detrimental to performance, since disk positioning time for random disk accesses is slow and improving only at a rate of 8% annually. We propose an alternative solution to indexing high-dimensional data, which takes advantage of increasing main memory sizes and the 40% annual improvement in disk transfer rates, More specifically we make the Ordered-Partition-OP-tree, which is a main memory resident index, persistent by writing it onto disk. We investigate the optimization of OP-tree parameters and compare its performance with the sequential scan method with and without Karhunen-Loeve transformation. We use serialization to compact the dynamically allocated nodes of the OP-tree in main memory, which form a linked list, into a contiguous area. The index can then be saved on disk as a single file and loaded into main memory by a single transfer. The original OP-tree is static, so we propose several methods to support the insertion of new points dynamically. We compare these methods from the viewpoints of time and space efficiency. We also study the effect of incrementally building the index with and without applying the Karhunen-Loeve transformation. We compare the processing time of k-NN queries on persistent OP-trees and SR-trees to demonstrate the viability of the proposed method. We use one synthetic and three real world datasets in our experiments.", "paper_title": "Persistent semi-dynamic ordered partition index", "paper_id": "WOS:000241272000005"}