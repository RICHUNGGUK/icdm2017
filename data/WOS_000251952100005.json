{"auto_keywords": [{"score": 0.0369267499271085, "phrase": "operating_system"}, {"score": 0.00481495049065317, "phrase": "programming_model_abstractions"}, {"score": 0.0047787596516662, "phrase": "reconfigurable_computing"}, {"score": 0.004550029253278477, "phrase": "application_threads"}, {"score": 0.004481868017991508, "phrase": "hybrid_computer_processing_unit"}, {"score": 0.004332334320148913, "phrase": "fpga"}, {"score": 0.004140354220982935, "phrase": "computational_models"}, {"score": 0.004109212945115815, "phrase": "high_level_languages"}, {"score": 0.004047628461126961, "phrase": "programming_language_extensions"}, {"score": 0.003853757393357659, "phrase": "new_high-level_programming_models"}, {"score": 0.0036830211726031946, "phrase": "hthreads_system"}, {"score": 0.0035599338383885447, "phrase": "reconfigurable_computing_community"}, {"score": 0.003480161521018509, "phrase": "middleware_layer_abstractions"}, {"score": 0.0033511469200347907, "phrase": "platform_components"}, {"score": 0.0032760377953971248, "phrase": "unified_multiprocessor_architecture_platform"}, {"score": 0.0031190082119319272, "phrase": "single_posix_threads"}, {"score": 0.0027846824619356583, "phrase": "seamless_framework"}, {"score": 0.002722234804904997, "phrase": "hardware_thread_interface"}, {"score": 0.002562451837774567, "phrase": "hwti"}, {"score": 0.002514464610980629, "phrase": "standard_thread_communication_and_synchronization_operations"}, {"score": 0.002458061764297101, "phrase": "key_operating_system_primitives"}, {"score": 0.0023225152126545067, "phrase": "uniform_access"}, {"score": 0.0021614767508781048, "phrase": "potential_bottleneck"}, {"score": 0.002129020447793464, "phrase": "system_service_requests"}, {"score": 0.0021049977753042253, "phrase": "central_cpu."}], "paper_keywords": ["field-programmable gate arrays (FPGAs)", " operating systems", " programming models", " reconfigurable computing"], "paper_abstract": "This paper introduces hthreads, a unifying programming model for specifying application threads running within a hybrid computer processing unit (CPU)/field-programmable gate-array (FPGA) system. Presently accepted hybrid CPU/FPGA computational models-and access to these computational models via high level languages-focus on programming language extensions to increase accessibility and portability. However, this paper argues that new high-level programming models built on common software abstractions better address these goals. The hthreads system, in general, is unique within the reconfigurable computing community as it includes operating system and middleware layer abstractions that extend across the CPU/FPGA boundary. This enables all platform components to be abstracted into a unified multiprocessor architecture platform. Application programmers can then express their computations using threads specified from a single POSIX threads (pthreads) multithreaded application program and can then compile the threads to either run on the CPU or synthesize them to run within an FPGA. To enable this seamless framework, we have created the hardware thread interface (HWTI) component to provide an abstract, platform-independent compilation target for hardware-resident computations. The HWTI enables the use of standard thread communication and synchronization operations across the software/hardware boundary. Key operating system primitives have been mapped into hardware to provide threads running in both hardware and software uniform access to a set of sub-microsecond, minimal-jitter services. Migrating the operating system into hardware removes the potential bottleneck of routing all system service requests through a central CPU.", "paper_title": "Achieving programming model abstractions for reconfigurable computing", "paper_id": "WOS:000251952100005"}