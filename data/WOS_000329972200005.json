{"auto_keywords": [{"score": 0.039699919391175904, "phrase": "pacman"}, {"score": 0.009832816644549852, "phrase": "collaborative_caching"}, {"score": 0.005963263256679056, "phrase": "optimal_policy"}, {"score": 0.00481495049065317, "phrase": "increasing_number"}, {"score": 0.0047026237903774895, "phrase": "cache_management"}, {"score": 0.004355267258397068, "phrase": "software_hints"}, {"score": 0.004278807087784626, "phrase": "hardware_caching"}, {"score": 0.004228577663320847, "phrase": "recent_studies"}, {"score": 0.003939296259436904, "phrase": "optimal_cache_replacement"}, {"score": 0.0038930368103015467, "phrase": "lru-like_cache"}, {"score": 0.0036052633308076933, "phrase": "loop-based_code"}, {"score": 0.0033984088755183287, "phrase": "optimal_caching_policy"}, {"score": 0.0030554300179552415, "phrase": "different_parts"}, {"score": 0.0030195184114140063, "phrase": "compile_time"}, {"score": 0.002966438503447793, "phrase": "run_time"}, {"score": 0.002914288956035066, "phrase": "loop_boundary"}, {"score": 0.0024405312482831646, "phrase": "single_bit"}, {"score": 0.0023694065215394593, "phrase": "store_instructions"}, {"score": 0.0023003498123420237, "phrase": "current_hardware"}, {"score": 0.002273292707863821, "phrase": "partial_support"}, {"score": 0.002130056082139311, "phrase": "simulated_results"}, {"score": 0.0021049977753042253, "phrase": "related_caching_policies"}], "paper_keywords": ["cache replacement policy", " collaborative caching", " optimal caching", " priority cache hint"], "paper_abstract": "As caches become larger and shared by an increasing number of cores, cache management is becoming more important. This paper explores collaborative caching, which uses software hints to influence hardware caching. Recent studies have shown that such collaboration between software and hardware can theoretically achieve optimal cache replacement on LRU-like cache. This paper presents Pacman, a practical solution for collaborative caching in loop-based code. Pacman uses profiling to analyze patterns in an optimal caching policy in order to determine which data to cache and at what time. It then splits each loop into different parts at compile time. At run time, the loop boundary is adjusted to selectively store data that would be stored in an optimal policy. In this way, Pacman emulates the optimal policy wherever it can. Pacman requires a single bit at the load and store instructions. Some of the current hardware has partial support. This paper presents results using both simulated and real systems, and compares simulated results to related caching policies.", "paper_title": "Pacman: Program-Assisted Cache Management", "paper_id": "WOS:000329972200005"}