{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dual_memory_banks"}, {"score": 0.004612662942073808, "phrase": "extra_memory_bandwidth"}, {"score": 0.004514714250357749, "phrase": "dsp_applications"}, {"score": 0.004371660146981191, "phrase": "simultaneous_access"}, {"score": 0.003167441161387607, "phrase": "dsp_software_developers"}, {"score": 0.0029064676523923886, "phrase": "novel_source-level_approach"}, {"score": 0.0025822818714499795, "phrase": "soft_graph_coloring"}, {"score": 0.0025273383208209922, "phrase": "highly_adaptive_heuristics"}, {"score": 0.002447101794397243, "phrase": "genetic_programming"}], "paper_keywords": ["Algorithms", " Performance", " Compilers", " Dual Memory Banks", " Digital Signal Processors", " Genetic Programming", " Graph Coloring", " Integer Linear Programming", " Source-Level Transformations"], "paper_abstract": "Dual memory banks provide extra memory bandwidth to DSP applications and enable simultaneous access to two operands if the data is partitioned appropriately. Fully automated and compiler integrated approaches to data partitioning and memory bank assignment have, however, found little acceptance by DSP software developers. In this article we present a novel source-level approach that is more programmer friendly. Our scheme is based on soft graph coloring and highly adaptive heuristics generated by genetic programming. We have evaluated our scheme on an Analog Devices TigerSHARC TS-101 DSP and achieved speedups of up to 57% on 13 UTDSP benchmarks.", "paper_title": "Adaptive Source-Level Data Assignment to Dual Memory Banks", "paper_id": "WOS:000307050900010"}