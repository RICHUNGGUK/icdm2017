{"auto_keywords": [{"score": 0.03169170094276943, "phrase": "neutralizer"}, {"score": 0.006890635872403625, "phrase": "false_negatives"}, {"score": 0.00481495049065317, "phrase": "distributed_storage_maintenance_cost"}, {"score": 0.004736820055728928, "phrase": "high_data_availability"}, {"score": 0.004640929126263433, "phrase": "efficient_manner"}, {"score": 0.0045284072672385975, "phrase": "observed_node_failure"}, {"score": 0.004258843584164121, "phrase": "desired_level"}, {"score": 0.004121672175779706, "phrase": "network_dynamics"}, {"score": 0.004038183610525504, "phrase": "permanent_and_transient_failures"}, {"score": 0.0039402177950179345, "phrase": "timeout-based_detectors"}, {"score": 0.003828912548622257, "phrase": "transient_failures"}, {"score": 0.003797690272118125, "phrase": "permanent_failures"}, {"score": 0.0036903962975894634, "phrase": "timeout_values"}, {"score": 0.0035861227263414537, "phrase": "better_tradeoff"}, {"score": 0.003556873173040169, "phrase": "detection_latency"}, {"score": 0.003400198866111204, "phrase": "fundamental_tradeoff"}, {"score": 0.003250403288147613, "phrase": "different_timeout_values"}, {"score": 0.003223883109446599, "phrase": "maintenance_cost"}, {"score": 0.0030317376771013703, "phrase": "self-configurable_failure_detector"}, {"score": 0.0029100272315053253, "phrase": "false_positives"}, {"score": 0.002759058732719621, "phrase": "desired_replication_level"}, {"score": 0.0027030963394733916, "phrase": "least_amount"}, {"score": 0.002637433799290365, "phrase": "extensive_simulations"}, {"score": 0.0026159017392986595, "phrase": "real_trace_data"}, {"score": 0.002583931950389087, "phrase": "widely_deployed_peer-to-peer_system"}, {"score": 0.0025211567863488962, "phrase": "planetlab_and_microsoft_pcs"}, {"score": 0.002480154140902474, "phrase": "significant_reduction"}, {"score": 0.002459902948098627, "phrase": "aggregate_bandwidth_usage"}, {"score": 0.0023418133729330303, "phrase": "low_average_node_availability"}, {"score": 0.00219311232069446, "phrase": "perfect_'oracle'_detector"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["distributed storage", " data recovery", " failure detection", " permanent failure", " peer-to-peer networks", " churn"], "paper_abstract": "To achieve high data availability or reliability in an efficient manner, distributed storage systems must detect whether an observed node failure is permanent or transient, and if necessary, generate replicas to restore the desired level of replication. Given the unpredictability of network dynamics, however, distinguishing permanent and transient failures is extremely difficult. Though timeout-based detectors can be used to avoid mistaking transient failures as permanent failures, it is unknown how the timeout values should be selected to achieve a better tradeoff between detection latency and accuracy. In this paper, we address this fundamental tradeoff from several perspectives. First, we explore the impact of different timeout values on maintenance cost by examining the probability of their false positives and false negatives. Second, we propose a self-configurable failure detector called the Neutralizer based on the idea of counteracting false positives with false negatives. The Neutralizer could enable the system to maintain a desired replication level on average with the least amount of bandwidth. We conduct extensive simulations using real trace data from a widely deployed peer-to-peer system and synthetic traces based on PlanetLab and Microsoft PCs, showing a significant reduction in aggregate bandwidth usage after applying the Neutralizer (especially in an environment with a low average node availability). Overall, we demonstrate that the Neutralizer closely approximates the performance of a perfect 'oracle' detector in many cases. Copyright (c) 2008 John Wiley & Sons, Ltd.", "paper_title": "The Neutralizer: a self-configurable failure detector for minimizing distributed storage maintenance cost", "paper_id": "WOS:000262541000004"}