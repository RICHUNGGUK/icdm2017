{"auto_keywords": [{"score": 0.04653010119798531, "phrase": "complex_structures"}, {"score": 0.015719716506582538, "phrase": "reusable_components"}, {"score": 0.013500476405387384, "phrase": "structural_complexity"}, {"score": 0.0043738432231020885, "phrase": "source_code_comprehension"}, {"score": 0.004208881856146758, "phrase": "source_code_quality"}, {"score": 0.004050116768809519, "phrase": "software_systems"}, {"score": 0.0038600230206554792, "phrase": "cyclic_dependencies"}, {"score": 0.0035060903664150115, "phrase": "semi-automated_process"}, {"score": 0.0034063576796640603, "phrase": "software_engineers"}, {"score": 0.002977061391551631, "phrase": "iterative_analysis"}, {"score": 0.0025521085778978042, "phrase": "candidate_components'_sizes"}, {"score": 0.0022956075241520064, "phrase": "proposed_approach"}, {"score": 0.0022302306304023602, "phrase": "reusable_component_extraction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software Engineering", " Component Extraction", " Cyclic Dependencies", " Software Reuse"], "paper_abstract": "Source code comprehension depends on the source code quality and structural complexity. Software systems usually have complex structures with cyclic dependencies that make their comprehension very demanding. We present a semi-automated process that guides software engineers to untangle complex structures in order to extract reusable components. The process consists of iterative analysis in order to identify and transform the classes responsible for the structural complexity and effectively reducing candidate components' sizes. We evaluate our approach on two systems and demonstrate how the proposed approach assists the reusable component extraction. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Extracting reusable components: A semi-automated approach for complex structures", "paper_id": "WOS:000348891200003"}