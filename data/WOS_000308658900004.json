{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data_trees"}, {"score": 0.010538147853164504, "phrase": "integer_linear_programming"}, {"score": 0.010282334609845347, "phrase": "xml_documents"}, {"score": 0.010210380522101976, "phrase": "data_values"}, {"score": 0.008778496248175916, "phrase": "two-variable_logic"}, {"score": 0.006647196479786832, "phrase": "reasoning_tasks"}, {"score": 0.00469740813902244, "phrase": "standard_abstraction"}, {"score": 0.004455061431809975, "phrase": "usual_labels"}, {"score": 0.004346266306175988, "phrase": "infinite_alphabet"}, {"score": 0.004180622964109706, "phrase": "decidable_formalisms"}, {"score": 0.0037073529462522403, "phrase": "reasonable_complexity_formalisms"}, {"score": 0.0036553070575015344, "phrase": "better_techniques"}, {"score": 0.0033698643928647726, "phrase": "tree_automata"}, {"score": 0.003334309053314909, "phrase": "set_constraints"}, {"score": 0.003310813458610484, "phrase": "linear_constraints"}, {"score": 0.0030847461428168614, "phrase": "np_upper"}, {"score": 0.0028842551358494823, "phrase": "key_encoding_technique"}, {"score": 0.002677744558540711, "phrase": "even_a_concise_encoding"}, {"score": 0.0025846562485378247, "phrase": "np_bound"}, {"score": 0.002468450551616404, "phrase": "single_set_constraint"}, {"score": 0.0024427147895342075, "phrase": "np"}, {"score": 0.0022835460368487233, "phrase": "data_dependencies"}, {"score": 0.002211947103318718, "phrase": "final_contribution"}, {"score": 0.002180848602315088, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "smt_solver"}], "paper_keywords": ["Algorithms", " Theory", " XML", " tree languages", " data values", " Presburger arithmetic", " reasoning", " integer linear programming"], "paper_abstract": "Data trees provide a standard abstraction of XML documents with data values: they are trees whose nodes, in addition to the usual labels, can carry labels from an infinite alphabet (data). Therefore, one is interested in decidable formalisms for reasoning about data trees. While some are known-such as the two-variable logic-they tend to be of very high complexity, and most decidability proofs are highly nontrivial. We are therefore interested in reasonable complexity formalisms as well as better techniques for proving decidability. Here we show that many decidable formalisms for data trees are subsumed-fully or partially-by the power of tree automata together with set constraints and linear constraints on cardinalities of various sets of data values. All these constraints can be translated into instances of integer linear programming, giving us an NP upper bound on the complexity of the reasoning tasks. We prove that this bound, as well as the key encoding technique, remain very robust, and allow the addition of features such as counting of paths and patterns, and even a concise encoding of constraints, without increasing the complexity. The NP bound is tight, as we also show that the satisfiability of a single set constraint is already NP-hard. We then relate our results to several reasoning tasks over XML documents, such as satisfiability of schemas and data dependencies and satisfiability of the two-variable logic. As a final contribution, we describe experimental results based on the implementation of some reasoning tasks using the SMT solver Z3.", "paper_title": "Efficient Reasoning about Data Trees via Integer Linear Programming", "paper_id": "WOS:000308658900004"}