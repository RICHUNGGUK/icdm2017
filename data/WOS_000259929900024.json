{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "direct_superclasses"}, {"score": 0.01547309332086106, "phrase": "java"}, {"score": 0.011078442713886895, "phrase": "non-deterministic_algorithm"}, {"score": 0.00458869631642791, "phrase": "earlier_article"}, {"score": 0.004101088357088207, "phrase": "java-like_languages"}, {"score": 0.0030962064913500164, "phrase": "deterministic_algorithm"}, {"score": 0.0029504765287722465, "phrase": "new_algorithm"}, {"score": 0.0024133533748653033, "phrase": "proposed_algorithm"}, {"score": 0.002374855916752648, "phrase": "error_recovery"}, {"score": 0.002156402793481102, "phrase": "possibly_reports"}], "paper_keywords": [""], "paper_abstract": "In an earlier article [5] we analyzed the problem of determining direct superclasses in Java and Java-like languages. We gave a specification of the problem showing that it closely reflects the requirements of [2]. We presented a non-deterministic algorithm and proved its correctness and completeness. This paper presents a deterministic algorithm which elaborates direct superclasses. The new algorithm is better for it presents all details of implementation and its cost seems lower than the cost of the non-deterministic algorithm. Another advantage of the proposed algorithm is error recovery. Should the algorithm report an error it continues its job and possibly reports more errors in one pass.", "paper_title": "A Deterministic Algorithm for Identifying Direct Superclasses in Java", "paper_id": "WOS:000259929900024"}