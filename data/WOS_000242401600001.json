{"auto_keywords": [{"score": 0.04520304506799653, "phrase": "new_program"}, {"score": 0.00481495049065317, "phrase": "legacy_information_systems"}, {"score": 0.004656557209439822, "phrase": "legacy_components"}, {"score": 0.004548778268252678, "phrase": "newly_developed_ones"}, {"score": 0.0044883089984593455, "phrase": "mixed_architectures"}, {"score": 0.0044286400018187354, "phrase": "severe_heterogeneity_problems"}, {"score": 0.004282900153232246, "phrase": "legacy_database_application"}, {"score": 0.004225950334493496, "phrase": "integrity_mismatch"}, {"score": 0.004169754607580288, "phrase": "database_model"}, {"score": 0.00412809672402551, "phrase": "program_data_view"}, {"score": 0.0039655692352351625, "phrase": "oo_model"}, {"score": 0.0037713445867641393, "phrase": "integrity_issues"}, {"score": 0.003647156095687574, "phrase": "data_server_responsibility"}, {"score": 0.0035865983700531278, "phrase": "data_integrity_management"}, {"score": 0.0034917831997090328, "phrase": "mismatched_subsystems"}, {"score": 0.003399466007862412, "phrase": "client_program"}, {"score": 0.0032985137109323827, "phrase": "legacy_data"}, {"score": 0.003243726030199957, "phrase": "integrity_constraints"}, {"score": 0.0030233510365494406, "phrase": "disciplined_way"}, {"score": 0.0029830992938695007, "phrase": "case_tool"}, {"score": 0.0029237213120317227, "phrase": "corresponding_code"}, {"score": 0.0028944757265206332, "phrase": "key_concept"}, {"score": 0.0028559348655053545, "phrase": "implicit_construct"}, {"score": 0.0026352026958982367, "phrase": "legacy_application_code"}, {"score": 0.0026088355715432523, "phrase": "implicit_constructs"}, {"score": 0.0025740882809779913, "phrase": "reverse_engineering_techniques"}, {"score": 0.002522830979240594, "phrase": "validation_code"}, {"score": 0.0023830645437709604, "phrase": "cobol_files"}, {"score": 0.0023434465472518943, "phrase": "external_programs"}, {"score": 0.002191438157029621, "phrase": "transformational_approach"}, {"score": 0.0021622381640810442, "phrase": "formal_way"}, {"score": 0.002133426416881756, "phrase": "wrapper_schema"}, {"score": 0.0021049977753042253, "phrase": "inter-schema_mappings"}], "paper_keywords": ["design", " management", " reliability", " schema transformation", " data reverse-engineering", " CASE tool", " wrapper", " legacy database", " data consistency", " evolution"], "paper_abstract": "System evolution most often implies the integration of legacy components, such as databases, with newly developed ones, leading to mixed architectures that suffer from severe heterogeneity problems. For instance, incorporating a new program in a legacy database application can create an integrity mismatch, since the database model and the program data view can be quite different ( e. g. standard file model versus OO model). In addition, neither the legacy DBMS ( too weak to address integrity issues correctly) nor the new program ( that relies on data server responsibility) correctly cope with data integrity management. The component that can reconciliate these mismatched subsystems is the R/W wrapper, which allows any client program to read, but also to update the legacy data, while controlling the integrity constraints that are ignored by the legacy DBMS. This article describes a generic, technology-independent, R/W wrapper architecture, a methodology for specifying them in a disciplined way, and a CASE tool for generating most of the corresponding code. The key concept is that of implicit construct, which is a structure or a constraint that has not been declared in the database, but which is controlled by the legacy application code. The implicit constructs are elicited through reverse engineering techniques, and then translated into validation code in the wrapper. For instance, a wrapper can be generated for a collection of COBOL files in order to allow external programs to access them through a relational, object-oriented or XML interface, while offering referential integrity control. The methodology is based on a transformational approach that provides a formal way to build the wrapper schema and to specify inter-schema mappings.", "paper_title": "Wrapper-based evolution of legacy information systems", "paper_id": "WOS:000242401600001"}