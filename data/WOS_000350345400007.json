{"auto_keywords": [{"score": 0.03319420753179508, "phrase": "\"bad\"_interfaces"}, {"score": 0.011795974678847545, "phrase": "bad_interfaces"}, {"score": 0.008243246870836374, "phrase": "etps'_source_code"}, {"score": 0.004814993754434527, "phrase": "api"}, {"score": 0.004575977644865379, "phrase": "software_systems"}, {"score": 0.003958529104387973, "phrase": "discouraged_and_unsupported_interfaces"}, {"score": 0.003761900996118551, "phrase": "eclipse_interface_usage"}, {"score": 0.003732526540522333, "phrase": "eclipse_third-party_plug-ins"}, {"score": 0.0034782306784111525, "phrase": "empirical_analysis"}, {"score": 0.002892839985941722, "phrase": "eclipse"}, {"score": 0.0027060907634889734, "phrase": "diverse_set"}, {"score": 0.002462867872567125, "phrase": "etp_developers"}, {"score": 0.0023403590999340304, "phrase": "etp"}, {"score": 0.0023038997972591193, "phrase": "new_eclipse_sdk_release"}, {"score": 0.0022152149658434916, "phrase": "problematic_\"bad\"_interfaces"}, {"score": 0.0021049977753042253, "phrase": "equivalent_sdk_good_interfaces"}], "paper_keywords": ["Eclipse", " API usage", " Software evolution"], "paper_abstract": "Today, when constructing software systems, many developers build their systems on top of frameworks. Eclipse is such a framework that has been in existence for over a decade. Like many other evolving software systems, the Eclipse platform has both stable and supported interfaces (\"good\") and unstable, discouraged and unsupported interfaces (\"bad\"). In this study, we investigate Eclipse interface usage by Eclipse third-party plug-ins (ETPs) based on whether they use bad interfaces or not. The investigations, based on empirical analysis present the following observations. First, we discovered that 44 % of the 512 analyzed Eclipse third-party plug-ins depend on \"bad\" interfaces and that developers continue to use \"bad\" interfaces. Second, we have observed that plug-ins that use or extend at least one \"bad\" interface are comparatively larger and use more functionality from Eclipse than those that use only \"good\" interfaces. Third, the findings show that the ETPs use a diverse set of \"bad\" interfaces. Fourth, we observed that the reason why the bad interfaces are being eliminated from the ETPs' source code is, because (ETP developers believe) these non-APIs will cause incompatibilities when a version of the ETP is ported to new Eclipse SDK release. Finally, we observed that when developers eliminate problematic \"bad\" interfaces, they either re-implement the same functionality in their own API, find equivalent SDK good interfaces, or completely delete the entities in the ETPs' source code that use the functionality from the \"bad\" interfaces.", "paper_title": "Eclipse API usage: the good and the bad", "paper_id": "WOS:000350345400007"}