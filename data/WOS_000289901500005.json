{"auto_keywords": [{"score": 0.0494096760831155, "phrase": "stream_x-machines"}, {"score": 0.00481495049065317, "phrase": "timed_systems"}, {"score": 0.0045726187330434025, "phrase": "real_systems"}, {"score": 0.004342430078306461, "phrase": "extended_finite_state_machine"}, {"score": 0.004281678802569817, "phrase": "shared_memory"}, {"score": 0.0038794730876377057, "phrase": "machines_formalism"}, {"score": 0.0037363522297378777, "phrase": "temporal_requirements"}, {"score": 0.0029260602766930065, "phrase": "available_actions"}, {"score": 0.0027916287357898544, "phrase": "functional_behavior"}, {"score": 0.0026014425686078993, "phrase": "possible_timeouts"}, {"score": 0.002493592357827492, "phrase": "formal_testing_methodology"}, {"score": 0.002291089893848235, "phrase": "test_derivation_algorithm"}, {"score": 0.0022168460543913787, "phrase": "derived_test_suite"}, {"score": 0.0021049977753042253, "phrase": "test_suite"}], "paper_keywords": ["Formal testing", " Timed systems", " Stream X-machines"], "paper_abstract": "Stream X-machines have been used to specify real systems where complex data structures. They are a variety of extended finite state machine where a shared memory is used to represent communications between the components of systems. In this paper we introduce an extension of the Stream X-machines formalism in order to specify systems that present temporal requirements. We add time in two different ways. First, we consider that (output) actions take time to be performed. Second, our formalism allows to specify timeouts. Timeouts represent the time a system can wait for the environment to react without changing its internal state. Since timeous affect the set of available actions of the system, a relation focusing on the functional behavior of systems, that is, the actions that they can perform, must explicitly take into account the possible timeouts. In this paper we also propose a formal testing methodology allowing to systematically test a system with respect to a specification. Finally, we introduce a test derivation algorithm. Given a specification, the derived test suite is sound and complete, that is, a system under test successfully passes the test suite if and only if this system conforms to the specification.", "paper_title": "Testing timed systems modeled by Stream X-machines", "paper_id": "WOS:000289901500005"}