{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "expander_graphs"}, {"score": 0.004710489616113198, "phrase": "vertex_connectivity"}, {"score": 0.0044104497301196794, "phrase": "smallest_number"}, {"score": 0.003952082333580496, "phrase": "fastest_known_algorithm"}, {"score": 0.003700170452390401, "phrase": "n_vertices"}, {"score": 0.0028220038404484196, "phrase": "undirected_graph"}, {"score": 0.002622647280008795, "phrase": "kappa_n._expander_graphs"}, {"score": 0.002437339565360659, "phrase": "connectivity_computation"}, {"score": 0.0023843376332011936, "phrase": "known_set_r"}, {"score": 0.0022158306933307685, "phrase": "unknown_set_s"}, {"score": 0.0021835829960683666, "phrase": "kappa_vertices"}], "paper_keywords": ["algorithms", " design", " performance", " theory", " expander graphs", " graphs", " vertex connectivity"], "paper_abstract": "The (vertex) connectivity K of a graph is the smallest number of vertices whose deletion separates the graph or makes it trivial. We present the fastest known algorithm for finding kappa. For a digraph with n vertices, m edges and connectivity kappa the time bound is O((n + min{kappa(5/2), kappa n(3/4)})m). This improves the previous best bound of O((n + min{kappa(3), kappa n})m). For an undirected graph both of these bounds hold with m replaced by kappa n. Expander graphs are useful for solving the following subproblem that arises in connectivity computation: A known set R of vertices contains two large but unknown subsets that are separated by some unknown set S of kappa vertices; we must find two vertices of R that are separated by S.", "paper_title": "Using expander graphs to find vertex connectivity", "paper_id": "WOS:000242844700005"}