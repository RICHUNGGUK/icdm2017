{"auto_keywords": [{"score": 0.04586846484671967, "phrase": "saraswat"}, {"score": 0.00481495049065317, "phrase": "timed_concurrent_constraint_programs"}, {"score": 0.004737579882204798, "phrase": "timed_concurrent_constraint_language"}, {"score": 0.004537254814246843, "phrase": "concurrent_logic_language"}, {"score": 0.004440277230269978, "phrase": "simple_but_powerful_concurrent_constraint_paradigm"}, {"score": 0.00355782527287734, "phrase": "general_framework"}, {"score": 0.0034629341517018438, "phrase": "tccp_programs"}, {"score": 0.0032806521851034766, "phrase": "new_compact"}, {"score": 0.003245359940011418, "phrase": "bottom-up_semantics"}, {"score": 0.003057910095857785, "phrase": "verification_purposes"}, {"score": 0.0029763124376934787, "phrase": "reactive_systems"}, {"score": 0.002881255933884771, "phrase": "abstract_semantics"}, {"score": 0.0027741761880779535, "phrase": "debugging_algorithms"}, {"score": 0.0027295084882654917, "phrase": "abstract_interpretation"}, {"score": 0.0026710653215026685, "phrase": "tccp_program"}, {"score": 0.0026280534600940137, "phrase": "behavior_specification"}, {"score": 0.0021049977753042253, "phrase": "specific_abstract_domain"}], "paper_keywords": ["concurrent constraint paradigm", " denotational semantics", " abstract diagnosis", " abstract interpretation"], "paper_abstract": "The timed concurrent constraint language (tccp in short) is a concurrent logic language based on the simple but powerful concurrent constraint paradigm of Saraswat. In this paradigm, the notion of store-as-value is replaced by the notion of store-as-constraint, which introduces some differences w.r.t. other approaches to concurrency. In this paper, we provide a general framework for the debugging of tccp programs. To this end, we first present a new compact, bottom-up semantics for the language that is well suited for debugging and verification purposes in the context of reactive systems. We also provide an abstract semantics that allows us to effectively implement debugging algorithms based on abstract interpretation. Given a tccp program and a behavior specification, our debugging approach automatically detects whether the program satisfies the specification. This differs from other semi-automatic approaches to debugging and avoids the need to provide symptoms in advance. We show the efficacy of our approach by introducing two illustrative examples. We choose a specific abstract domain and show how we can detect that a program is erroneous.", "paper_title": "Abstract diagnosis for timed concurrent constraint programs", "paper_id": "WOS:000292701100005"}