{"auto_keywords": [{"score": 0.04287234461110808, "phrase": "original_program"}, {"score": 0.015481431716171832, "phrase": "program_schemas"}, {"score": 0.011398154645789292, "phrase": "korel"}, {"score": 0.009927310153918798, "phrase": "dynamic_slice"}, {"score": 0.008097399753577369, "phrase": "linear_schema"}, {"score": 0.00481495049065317, "phrase": "computational_complexity"}, {"score": 0.004777917315737992, "phrase": "dynamic_slicing_problems"}, {"score": 0.004474366340935036, "phrase": "zero_or_more_statements"}, {"score": 0.004388796812234033, "phrase": "program_slicing"}, {"score": 0.004031238480458909, "phrase": "slicing_algorithms"}, {"score": 0.003954109842050071, "phrase": "structural_properties"}, {"score": 0.0038485929962942776, "phrase": "control_dependence"}, {"score": 0.0038189638340666936, "phrase": "data_dependence"}, {"score": 0.0035076666315744525, "phrase": "dynamic_slicing_criterion"}, {"score": 0.0034538466642399976, "phrase": "laski"}, {"score": 0.0034008496666026585, "phrase": "program_behaviour"}, {"score": 0.0032718761046588835, "phrase": "particular_path"}, {"score": 0.0030637124954859657, "phrase": "laski's_definition"}, {"score": 0.002981885091155911, "phrase": "linear_schemas"}, {"score": 0.0026551731045904854, "phrase": "smaller_slices"}, {"score": 0.00257424957319189, "phrase": "complexity_bounds"}, {"score": 0.002373339527491525, "phrase": "non-trivial_dynamic_slice"}, {"score": 0.0023188652648490874, "phrase": "latter_problem"}, {"score": 0.0023014551989133207, "phrase": "np"}, {"score": 0.002171202123281881, "phrase": "minimal_dynamic_slices"}, {"score": 0.0021049977753042253, "phrase": "original_path"}], "paper_keywords": [""], "paper_abstract": "Given a program, a quotient can be obtained from it by deleting zero or more statements. The field of program slicing is concerned with computing a quotient of a program that preserves part of the behaviour of the original program. All program slicing algorithms take account of the structural properties of a program, such as control dependence and data dependence, rather than the semantics of its functions and predicates, and thus work, in effect, with program schemas. The dynamic slicing criterion of Korel and Laski requires only that program behaviour is preserved in cases where the original program follows a particular path, and that the slice/quotient follows this path. In this paper we formalise Korel and Laski's definition of a dynamic slice as applied to linear schemas, and also formulate a less restrictive definition in which the path through the original program need not be preserved by the slice. The less restrictive definition has the benefit of leading to smaller slices. For both definitions, we compute complexity bounds for the problems of establishing whether a given slice of a linear schema is a dynamic slice and whether a linear schema has a non-trivial dynamic slice, and prove that the latter problem is NP-hard in both cases. We also give an example to prove that minimal dynamic slices (whether or not they preserve the original path) need not be unique.", "paper_title": "On the computational complexity of dynamic slicing problems for program schemas", "paper_id": "WOS:000297409300007"}