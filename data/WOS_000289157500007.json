{"auto_keywords": [{"score": 0.0500785012217586, "phrase": "evolutionary_computing_modeling_language"}, {"score": 0.0365107998636054, "phrase": "evolutionary_computing"}, {"score": 0.03348597994453861, "phrase": "ecml"}, {"score": 0.00470325458481566, "phrase": "domain_knowledge"}, {"score": 0.004594137808658537, "phrase": "effective_evolutionary_algorithms"}, {"score": 0.00440403952059725, "phrase": "meta-heuristics_community"}, {"score": 0.004123781267600542, "phrase": "domain_experts"}, {"score": 0.004066076430818046, "phrase": "domain-specific_problems"}, {"score": 0.003897742942358768, "phrase": "available_domain_knowledge"}, {"score": 0.003789395499639015, "phrase": "programming_libraries"}, {"score": 0.003615443704375908, "phrase": "unifying_framework"}, {"score": 0.0035648266669315943, "phrase": "specialized_eas"}, {"score": 0.003531474887552889, "phrase": "different_problem_domains"}, {"score": 0.003066945490483524, "phrase": "unified_modeling_language"}, {"score": 0.002967634471075658, "phrase": "basic_uml_elements"}, {"score": 0.0029260602766930065, "phrase": "new_extensions"}, {"score": 0.0028312983170567948, "phrase": "evolutionary_computation_domain"}, {"score": 0.0027395968397212053, "phrase": "meta_evolutionary_algorithms"}, {"score": 0.0025409639091476363, "phrase": "ecml._meas"}, {"score": 0.0024356148906608025, "phrase": "particular_problem_domain"}, {"score": 0.0023346234464901978, "phrase": "ecml."}, {"score": 0.002301896758256575, "phrase": "problem-specific_domain_knowledge"}, {"score": 0.0022696764515464487, "phrase": "ea"}, {"score": 0.002196077907454079, "phrase": "unified_framework"}, {"score": 0.0021755038991725147, "phrase": "evolutionary_computation"}], "paper_keywords": ["Evolutionary algorithms", " high-level languages", " high-level modeling", " UML"], "paper_abstract": "The importance of domain knowledge in the design of effective evolutionary algorithms (EAs) is widely acknowledged in the meta-heuristics community. In the last few decades, a plethora of EAs has been manually designed by domain experts for solving domain-specific problems. Specialization has been achieved mainly by embedding available domain knowledge into the algorithms. Although programming libraries have been made available to construct EAs, a unifying framework for designing specialized EAs across different problem domains and branches of evolutionary computing does not exist yet. In this paper, we address this issue by introducing an evolutionary computing modeling language (ECML) which is based on the unified modeling language (UML). ECML incorporates basic UML elements and introduces new extensions that are specially needed for the evolutionary computation domain. Subsequently, the concept of meta evolutionary algorithms (MEAs) is introduced as a family of EAs that is capable of interpreting ECML. MEAs are solvers that are not restricted to a particular problem domain or branch of evolutionary computing through the use of ECML. By separating problem-specific domain knowledge from the EA implementation, we show that a unified framework for evolutionary computation can be attained. We demonstrate our approach by applying it to a number of examples.", "paper_title": "Toward an Evolutionary Computing Modeling Language", "paper_id": "WOS:000289157500007"}