{"auto_keywords": [{"score": 0.048469491584319076, "phrase": "test_suites"}, {"score": 0.016418291153860686, "phrase": "coverage_criteria"}, {"score": 0.007696641664415551, "phrase": "non-adequate_test_suites"}, {"score": 0.00481495049065317, "phrase": "coverage-based_comparisons"}, {"score": 0.0047468516620285525, "phrase": "fundamental_question"}, {"score": 0.004719881293102484, "phrase": "software_testing_research"}, {"score": 0.004548253531664032, "phrase": "test-generation_techniques"}, {"score": 0.004357927940322685, "phrase": "coverage_criterion"}, {"score": 0.004294735519998291, "phrase": "branch_coverage"}, {"score": 0.004284037022875158, "phrase": "test_requirements"}, {"score": 0.004069766428492073, "phrase": "feasible_requirements"}, {"score": 0.003989351600022163, "phrase": "previous_rigorous_evaluations"}, {"score": 0.0038114397487574838, "phrase": "c-adequate_suites"}, {"score": 0.003746779951069909, "phrase": "c'-adequate_suites"}, {"score": 0.0036622637391432143, "phrase": "adequate_suites"}, {"score": 0.0035491469311213, "phrase": "first_extensive_study"}, {"score": 0.0034889212590758865, "phrase": "common_case"}, {"score": 0.0031754329320561317, "phrase": "coverage_values"}, {"score": 0.0027452904886195993, "phrase": "large_set"}, {"score": 0.0027296612757740707, "phrase": "plausible_criteria"}, {"score": 0.002706383680762465, "phrase": "basic_criteria"}, {"score": 0.0026302120935562568, "phrase": "stronger_criteria"}, {"score": 0.0026077803487003, "phrase": "recent_studies"}, {"score": 0.002563487683381462, "phrase": "program_paths"}, {"score": 0.002548890846638283, "phrase": "equivalence_classes"}, {"score": 0.0025343769150179764, "phrase": "covered_statements"}, {"score": 0.0025127604406208668, "phrase": "predicate_states"}, {"score": 0.00244205203772985, "phrase": "java"}, {"score": 0.00224151735457093, "phrase": "intraprocedural_acyclic_path_coverage"}, {"score": 0.0021049977753042253, "phrase": "research_use"}], "paper_keywords": ["Experimentation", " Coverage criteria", " non-adequate test suites"], "paper_abstract": "A fundamental question in software testing research is how to compare test suites, often as a means for comparing test-generation techniques that produce those test suites. Researchers frequently compare test suites by measuring their coverage. A coverage criterion C provides a set of test requirements and measures how many requirements a given suite satisfies. A suite that satisfies 100% of the feasible requirements is called C-adequate. Previous rigorous evaluations of coverage criteria mostly focused on such adequate test suites: given two criteria C and C', are C-adequate suites on average more effective than C'-adequate suites? However, in many realistic cases, producing adequate suites is impractical or even impossible. This article presents the first extensive study that evaluates coverage criteria for the common case of non-adequate test suites: given two criteria C and C', which one is better to use to compare test suites? Namely, if suites T-1, T-2,...,T-n have coverage values c(1), c(2),...,c(n) for C and c'(1), c'(2),...,c'(n) for C', is it better to compare suites based on c(1), c(2),...,c(n) or based on c'(1), c'(2),...,c'(n)? We evaluate a large set of plausible criteria, including basic criteria such as statement and branch coverage, as well as stronger criteria used in recent studies, including criteria based on program paths, equivalence classes of covered statements, and predicate states. The criteria are evaluated on a set of Java and C programs with both manually written and automatically generated test suites. The evaluation uses three correlation measures. Based on these experiments, two criteria perform best: branch coverage and an intraprocedural acyclic path coverage. We provide guidelines for testing researchers aiming to evaluate test suites using coverage criteria as well as for other researchers evaluating coverage criteria for research use.", "paper_title": "Guidelines for Coverage-Based Comparisons of Non-Adequate Test Suites", "paper_id": "WOS:000361066700002"}