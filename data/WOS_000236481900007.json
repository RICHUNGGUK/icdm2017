{"auto_keywords": [{"score": 0.03282728184868489, "phrase": "muller"}, {"score": 0.010013094980914024, "phrase": "benson"}, {"score": 0.004449045430179066, "phrase": "influence_function"}, {"score": 0.004052148727852149, "phrase": "correct_evaluation"}, {"score": 0.0039942998891989955, "phrase": "go_positions"}, {"score": 0.003637822529522622, "phrase": "exact_method"}, {"score": 0.0035601676907962626, "phrase": "first_exact_algorithm"}, {"score": 0.0032893028281789287, "phrase": "unconditional_safety"}, {"score": 0.002995554770117301, "phrase": "static_rules"}, {"score": 0.00278752137116301, "phrase": "search-based_methods"}, {"score": 0.0025568135952982345, "phrase": "new_method"}, {"score": 0.0024842242921857705, "phrase": "weakly_dependent_regions"}, {"score": 0.0024136908511423875, "phrase": "typical_final_position"}, {"score": 0.0021049977753042253, "phrase": "proven_points"}], "paper_keywords": [""], "paper_abstract": "Most Go-playing programs use a combination of search and heuristics based on an influence function to determine whether territories are safe. However, to assure the correct evaluation of Go positions, the safety of stones and territories must be proved by an exact method. The first exact algorithm, due to Benson [1], determines the unconditional safety of stones and completely surrounded territories. Muller [3] develops static rules for detecting safety by alternating play, and introduces search-based methods. This paper describes new, stronger search-based techniques including region-merging and a new method for efficiently solving weakly dependent regions. In a typical final position, more than half the points on the board can be proved safe by our current solver. This almost doubles the number of proven points compared to the 26.4% reported in [3].", "paper_title": "An improved safety solver for computer Go", "paper_id": "WOS:000236481900007"}