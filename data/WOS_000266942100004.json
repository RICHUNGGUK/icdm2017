{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "copy_semantics"}, {"score": 0.004695900553353526, "phrase": "object-oriented_languages"}, {"score": 0.004522796947899013, "phrase": "formal_account._mainstream_object-oriented_languages"}, {"score": 0.004248294537944227, "phrase": "complete_powerful_features"}, {"score": 0.003940706575253453, "phrase": "multiple_inheritance"}, {"score": 0.0038431888954930083, "phrase": "dynamic_overloading"}, {"score": 0.003306559295382181, "phrase": "core_object-oriented_imperative_language"}, {"score": 0.0029909851863915283, "phrase": "formal_framework"}, {"score": 0.0027395968397212053, "phrase": "static_type_system"}, {"score": 0.002447101794397243, "phrase": "meta-language_lambda_object"}, {"score": 0.0022413233627905696, "phrase": "semantic_issues"}, {"score": 0.002158505888557746, "phrase": "type_safety"}], "paper_keywords": ["Object-oriented languages", " dynamic overloading", " multi-methods", " copy semantics", " typed lambda calculus", " type systems"], "paper_abstract": "Mainstream object-oriented languages often fail to provide complete powerful features altogether, such as, multiple inheritance, dynamic overloading and copy semantics of inheritance. In this paper we present a core object-oriented imperative language that integrates all these features in a formal framework. We de. ne a static type system and a translation of the language into the meta-language lambda_object, in order to account for semantic issues and prove type safety of our proposal.", "paper_title": "DYNAMIC OVERLOADING WITH COPY SEMANTICS IN OBJECT-ORIENTED LANGUAGES: A FORMAL ACCOUNT", "paper_id": "WOS:000266942100004"}