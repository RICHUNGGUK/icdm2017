{"auto_keywords": [{"score": 0.03876984750746916, "phrase": "bsgp_programs"}, {"score": 0.004815316573636744, "phrase": "gpu"}, {"score": 0.004595529592539951, "phrase": "new_programming_language"}, {"score": 0.0045346863560033175, "phrase": "general_purpose_computation"}, {"score": 0.004444921827311577, "phrase": "gpu._a_bsgp_program"}, {"score": 0.004242291530697285, "phrase": "sequential_c_program"}, {"score": 0.004021954624114115, "phrase": "bare_minimum"}, {"score": 0.003968675046544738, "phrase": "extra_information"}, {"score": 0.0038900709793274484, "phrase": "parallel_processing"}, {"score": 0.0030799988391729464, "phrase": "well-designed_bsgp_compiler"}, {"score": 0.0030391598999124207, "phrase": "bsgp"}, {"score": 0.002881130228859848, "phrase": "optimally_allocated_temporary_streams"}, {"score": 0.0027495914857929584, "phrase": "similar_or_better_performance"}, {"score": 0.0027131212233443137, "phrase": "well-optimized_cuda_programs"}, {"score": 0.002641621667026613, "phrase": "source_code_complexity"}, {"score": 0.002470987929071079, "phrase": "bsgp's_code_efficiency"}, {"score": 0.002295964130868963, "phrase": "gpu_applications"}, {"score": 0.0021049977753042253, "phrase": "existing_gpu_programming_languages"}], "paper_keywords": ["programable graphics hardware", " stream processing", " bulk synchronous parallel programming", " thread manipulation"], "paper_abstract": "We present BSGP. a new programming language for general purpose computation on the GPU. A BSGP program looks much the same as a sequential C program. Programmers only need to supply a bare Minimum of extra information to describe parallel processing on GPUs. As a result, BSGP programs are easy to read, write. and maintain. Moreover, the ease of programming does not come at the cost of performance. A well-designed BSGP compiler converts BSGP programs to kernels and combines them using optimally allocated temporary streams. In our benchmark, BSGP programs achieve similar or better performance than well-optimized CUDA programs. while the source code complexity and programming time are significantly reduced. To test BSGP's code efficiency and ease of programming, we implemented a variety of GPU applications, including a highly sophisticated X3D parser that would be extremely difficult to develop with existing GPU programming languages.", "paper_title": "BSGP: Bulk-synchronous GPU programming", "paper_id": "WOS:000258262000008"}