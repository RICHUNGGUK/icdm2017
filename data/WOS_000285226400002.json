{"auto_keywords": [{"score": 0.03413008367759665, "phrase": "ynot"}, {"score": 0.00481495049065317, "phrase": "imperative_programs"}, {"score": 0.004065156038847781, "phrase": "low-level_imperative_features"}, {"score": 0.003500812175550438, "phrase": "coq_proof_assistant"}, {"score": 0.0033306180744375616, "phrase": "web-based_course_gradebook_application"}, {"score": 0.0026480044868438875, "phrase": "ynot's_underlying_hoare_logic"}, {"score": 0.002420611343093316, "phrase": "protocol_behavior"}, {"score": 0.0023727863021828547, "phrase": "expressive_abstractions"}, {"score": 0.0023028105026714533, "phrase": "modular_verification"}, {"score": 0.002234893735225432, "phrase": "high_level_specifications"}, {"score": 0.0021907299375981356, "phrase": "privacy_guarantees"}, {"score": 0.0021474369836979048, "phrase": "low_level_properties"}, {"score": 0.0021049977753042253, "phrase": "data_structure_pointer_invariants"}], "paper_keywords": ["Program verification", " Separation logic", " Dependent types", " Traces", " Imperative programming", " Ynot"], "paper_abstract": "In this paper we demonstrate how to prove the correctness of systems implemented using low-level imperative features like pointers, files, and socket I/O with respect to high level I/O protocol descriptions by using the Coq proof assistant. We present a web-based course gradebook application developed with Ynot, a Coq library for verified imperative programming. We add a dialog-based I/O system to Ynot, and we extend Ynot's underlying Hoare logic with event traces to reason about I/O and protocol behavior. Expressive abstractions allow the modular verification of both high level specifications like privacy guarantees and low level properties like data structure pointer invariants. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Trace-based verification of imperative programs with I/O", "paper_id": "WOS:000285226400002"}