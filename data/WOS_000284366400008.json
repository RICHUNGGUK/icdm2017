{"auto_keywords": [{"score": 0.004620093797504386, "phrase": "transactional_memory_programming_paradigm"}, {"score": 0.004253618550301311, "phrase": "coordination_methodology"}, {"score": 0.003916098498242888, "phrase": "actual_and_future_multicore"}, {"score": 0.003757480190200645, "phrase": "many-core_architectures"}, {"score": 0.003531474887552889, "phrase": "transactional_memory_support"}, {"score": 0.0033190180867511605, "phrase": "complete_software"}, {"score": 0.0031845067058084583, "phrase": "hardware_stack"}, {"score": 0.0029928611380840757, "phrase": "programming_language"}, {"score": 0.0028715299874549245, "phrase": "hardware_support"}, {"score": 0.0023834640793589414, "phrase": "application_environments"}, {"score": 0.0022399174232611853, "phrase": "velox_project"}], "paper_keywords": [""], "paper_abstract": "The transactional memory programming paradigm could become the coordination methodology of choice for actual and future multicore and many-core architectures. The transactional memory support spans a complete software and hardware stack, including programming language and hardware support, runtime and libraries, compilers, and application environments. The VELOX project has developed such a comprehensive transactional memory stack.", "paper_title": "THE VELOX TRANSACTIONAL MEMORY STACK", "paper_id": "WOS:000284366400008"}