{"auto_keywords": [{"score": 0.036739841171984686, "phrase": "fault_tree"}, {"score": 0.015485771730291146, "phrase": "safety-critical_software"}, {"score": 0.01363082903722394, "phrase": "fault_trees"}, {"score": 0.00481495049065317, "phrase": "software_fault_trees"}, {"score": 0.004688894532233354, "phrase": "reactor_protection_systems"}, {"score": 0.004600870784042767, "phrase": "nuclear_power_plants"}, {"score": 0.004514491994233911, "phrase": "software_trust"}, {"score": 0.004248782702870078, "phrase": "government_authorities"}, {"score": 0.004200724305692705, "phrase": "automated_generation"}, {"score": 0.004090682761004765, "phrase": "increased_use"}, {"score": 0.004059772950454586, "phrase": "formal_specifications"}, {"score": 0.0040290957541568775, "phrase": "industrial_use"}, {"score": 0.003908678575537341, "phrase": "safety_demonstrations"}, {"score": 0.003748937184382714, "phrase": "root_node"}, {"score": 0.0035685175471526823, "phrase": "automated_fault_tree"}, {"score": 0.0035415392642831616, "phrase": "verification_purposes"}, {"score": 0.003448705829033573, "phrase": "abstract_and_partial_behavioral_model"}, {"score": 0.0033967510986397946, "phrase": "credible_causes"}, {"score": 0.002985484575498061, "phrase": "safety-focused_software_development_process"}, {"score": 0.00286336417751658, "phrase": "potentially_critical_errors"}, {"score": 0.0027151161550531206, "phrase": "state_explosion_problem"}, {"score": 0.0025941547726803594, "phrase": "semantically_equivalent_logic_formula"}, {"score": 0.0025165151708122957, "phrase": "formal_verification"}, {"score": 0.002368120987066921, "phrase": "fta's_applicability"}, {"score": 0.0023412849215629986, "phrase": "verification_tool"}, {"score": 0.002314752262613559, "phrase": "prototype_model"}, {"score": 0.002288519595829552, "phrase": "nuclear_power_reactor_protection_system"}, {"score": 0.002178245085780825, "phrase": "korea"}, {"score": 0.0021617392821644005, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Safety analysis", " Software fault tree", " Software verification", " Combinational equivalence checking"], "paper_abstract": "When developing safety-critical software such as reactor protection systems (RPS) in nuclear power plants, a demonstration of software trust (e.g., safety) is not only absolutely essential but also usually mandated by government authorities. While automated generation of fault trees has become possible with increased use of formal specifications, industrial use of fault trees has been limited primarily to safety demonstrations that the system is free from behavior captured in the root node. In this paper, we propose to extend the use of automated fault tree for verification purposes. As a fault tree represents an abstract and partial behavioral model of software on credible causes leading to a hazard, it must still satisfy various properties (e.g., fairness, correctness). Verification of a fault tree is useful when developing safety-critical software because (1) it strengthens a safety-focused software development process; (2) it provides an opportunity to detect potentially critical errors early; and (3) it is less likely to experience a state explosion problem. This paper demonstrates how to convert a fault tree into a semantically equivalent logic formula so that they can be subject to formal verification using tools like Verification Interacting with Synthesis (VIS). We evaluated the feasibility of FTA's applicability as a verification tool on a prototype model of a nuclear power reactor protection system (RPS) software to be deployed in plants under construction in Korea. Crown Copyright (C) 2011 Published by Elsevier B.V. All rights reserved.", "paper_title": "A safety-focused verification using software fault trees", "paper_id": "WOS:000306888400011"}