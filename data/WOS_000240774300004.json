{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "object_references"}, {"score": 0.004766090327062509, "phrase": "rmi-based_java_software"}, {"score": 0.004646088032529303, "phrase": "numerous_advantages"}, {"score": 0.00457553517865013, "phrase": "software_performance"}, {"score": 0.0042819270655224916, "phrase": "distributed_java_programs"}, {"score": 0.004110657450247293, "phrase": "rmi"}, {"score": 0.003636692152882991, "phrase": "reference_variable"}, {"score": 0.003581412258960711, "phrase": "reference_object_field"}, {"score": 0.0034911335714333507, "phrase": "fundamental_role"}, {"score": 0.0033173234105492895, "phrase": "first_theoretical_definition"}, {"score": 0.0032008144731234265, "phrase": "rmi-based_java_applications"}, {"score": 0.003010496595090984, "phrase": "context-insensitive_points"}, {"score": 0.0027459678326877744, "phrase": "computing_call_graph_information"}, {"score": 0.002690406375639144, "phrase": "data_dependencies"}, {"score": 0.0026494723416072316, "phrase": "remote_memory_locations"}, {"score": 0.0025046245057922557, "phrase": "object_serialization"}, {"score": 0.002479150189700726, "phrase": "remote_calls"}, {"score": 0.0023435920614377306, "phrase": "static_analysis"}, {"score": 0.0023197517832705297, "phrase": "rmi_programs"}, {"score": 0.002272794656458419, "phrase": "starting_point"}, {"score": 0.002249672943553135, "phrase": "future_work"}, {"score": 0.0021049977753042253, "phrase": "rmi-based_software"}], "paper_keywords": ["RMI", " object-oriented software", " distributed software", " program analysis", " points-to analysis", " reference analysis", " class analysis", " call graph construction", " side-effect analysis"], "paper_abstract": "Distributed applications provide numerous advantages related to software performance, reliability, interoperability, and extensibility. This paper focuses on distributed Java programs built with the help of the Remote Method Invocation (RMI) mechanism. We consider points-to analysis for such applications. Points-to analysis determines the objects pointed to by a reference variable or a reference object field. Such information plays a fundamental role as a prerequisite for many other static analyses. We present the first theoretical definition of points-to analysis for RMI-based Java applications, and we present an algorithm for implementing a flow- and context-insensitive points-to analysis for such applications. We also discuss the use of points-to information for computing call graph information, for understanding data dependencies due to remote memory locations, and for identifying opportunities for improving the performance of object serialization at remote calls. The work described in this paper solves one key problem for static analysis of RMI programs and provides a starting point for future work on improving the understanding, testing, verification, and performance of RMI-based software.", "paper_title": "Static analysis of object references in RMI-based Java software", "paper_id": "WOS:000240774300004"}