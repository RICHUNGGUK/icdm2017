{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "critical_elements_detection"}, {"score": 0.004588158931776543, "phrase": "integer_programming_framework"}, {"score": 0.004091248980678087, "phrase": "joint_budgetary_constraint"}, {"score": 0.0038284549148537373, "phrase": "general_functions"}, {"score": 0.003714629047818465, "phrase": "remaining_connected_components"}, {"score": 0.0036700484729006136, "phrase": "node_degrees"}, {"score": 0.0034342161742428635, "phrase": "special_cases"}, {"score": 0.003312009953245191, "phrase": "mild_conditions"}, {"score": 0.0030251262102203385, "phrase": "total_number"}, {"score": 0.0029887957779347394, "phrase": "connected_node_pairs"}, {"score": 0.002899861600151726, "phrase": "largest_connected_component_size"}, {"score": 0.0027630232270330402, "phrase": "connected_components"}, {"score": 0.0026970382454914437, "phrase": "computational_complexity_issues"}, {"score": 0.0026646374739979694, "phrase": "derive_linear_mixed_integer_programming"}, {"score": 0.0025388705701873075, "phrase": "additional_modeling_enhancements"}, {"score": 0.0024336917123957387, "phrase": "mip_solvers"}, {"score": 0.002361236012575149, "phrase": "extensive_computational_experiments"}, {"score": 0.0022771244331421586, "phrase": "network_instances"}, {"score": 0.002209319719984651, "phrase": "interesting_insights"}, {"score": 0.0021049977753042253, "phrase": "proposed_framework"}], "paper_keywords": ["Critical node detection", " Critical edge detection", " Network interdiction", " Mixed integer programming"], "paper_abstract": "This study presents an integer programming framework for minimizing the connectivity and cohesiveness properties of a given graph by removing nodes and edges subject to a joint budgetary constraint. The connectivity and cohesiveness metrics are assumed to be general functions of sizes of the remaining connected components and node degrees, respectively. We demonstrate that our approach encompasses, as special cases (possibly, under some mild conditions), several other models existing in the literature, including minimization of the total number of connected node pairs, minimization of the largest connected component size, and maximization of the number of connected components. We discuss computational complexity issues, derive linear mixed integer programming (MIP) formulations, and describe additional modeling enhancements aimed at improving the performance of MIP solvers. We also conduct extensive computational experiments with real-life and randomly generated network instances under various settings that reveal interesting insights and demonstrate advantages and limitations of the proposed framework.", "paper_title": "An integer programming framework for critical elements detection in graphs", "paper_id": "WOS:000337042900013"}