{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "behavioural_mismatch"}, {"score": 0.04806645810598005, "phrase": "software_adaptation"}, {"score": 0.004712726613162057, "phrase": "software_composition"}, {"score": 0.004466519142879166, "phrase": "crucial_issue"}, {"score": 0.004187917910692495, "phrase": "real_market"}, {"score": 0.004011867299107537, "phrase": "software_reuse"}, {"score": 0.003926626018798576, "phrase": "recent_work"}, {"score": 0.002969628818856786, "phrase": "previous_work"}, {"score": 0.002695768552609587, "phrase": "significant_advance"}, {"score": 0.0023694065215394593, "phrase": "synchronous_vectors"}, {"score": 0.0023189818169615135, "phrase": "regular_expressions"}, {"score": 0.0022453451864218477, "phrase": "adaptation_rules"}, {"score": 0.0021049977753042253, "phrase": "dedicated_algorithms"}], "paper_keywords": [""], "paper_abstract": "Software Adaptation is a crucial issue for the development of a real market of components promoting software reuse. Recent work in this field has addressed several problems related to interface and behavioural mismatch. In this paper, we present our proposal for software adaptation, which builds on previous work overcoming some of its limitations, and makes a significant advance to solve pending issues. Our approach is based on the use of synchronous vectors and regular expressions for governing adaptation rules, and is supported by dedicated algorithms and tools.", "paper_title": "Synchronizing behavioural mismatch in software composition", "paper_id": "WOS:000239478000007"}