{"auto_keywords": [{"score": 0.038037926583008974, "phrase": "bloom_filter"}, {"score": 0.010605513207627142, "phrase": "false_positives"}, {"score": 0.009877001208804923, "phrase": "bloom_filters"}, {"score": 0.00481495049065317, "phrase": "extended_bloom_filter_approach"}, {"score": 0.004600596158672458, "phrase": "important_requirement"}, {"score": 0.00445332728705756, "phrase": "basic_prerequisite"}, {"score": 0.004118751115632515, "phrase": "set_b"}, {"score": 0.004065474891313382, "phrase": "vice_versa"}, {"score": 0.0036871853429163953, "phrase": "networking_applications"}, {"score": 0.0026274936167233515, "phrase": "trie-based_mechanism"}, {"score": 0.0023062508214156123, "phrase": "added_communication_overhead"}, {"score": 0.00214659338413584, "phrase": "plain_bloom_filter"}], "paper_keywords": ["Set reconciliation", " Opportunistic networks", " Bloom filter"], "paper_abstract": "Synchronization between two sets is an important requirement for many distributed applications. A basic prerequisite is to find out which elements of set A are not in set B and vice versa. A very space efficient data structure for such membership queries that has been used a lot in networking applications is the Bloom filter. Unfortunately, the Bloom filter owes its high efficiency to the fact that there is a chance of false positives when querying the filter. This precludes the adoption of Bloom filters in applications that cannot tolerate such errors. In this paper we present an approach that augments Bloom filters with a trie-based mechanism that deterministically and efficiently finds the false positives after using the Bloom filter to synchronize two sets. We show that the added communication overhead for our approach is negligible compared to the overhead of a plain Bloom filter. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient false positive free set synchronization using an extended bloom filter approach", "paper_id": "WOS:000320838600012"}