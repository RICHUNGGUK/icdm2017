{"auto_keywords": [{"score": 0.04394516098812627, "phrase": "test_minimization"}, {"score": 0.043626296647104795, "phrase": "product_lines"}, {"score": 0.032904114260541316, "phrase": "fitness_function"}, {"score": 0.00481495049065317, "phrase": "cost-effective_test_suite_minimization"}, {"score": 0.004724571550328985, "phrase": "search_techniques"}, {"score": 0.004688894532233354, "phrase": "cost-effective_testing"}, {"score": 0.004583464412234181, "phrase": "product_line"}, {"score": 0.004480394224548146, "phrase": "relevant_test_cases"}, {"score": 0.004429727701202369, "phrase": "entire_test_suite"}, {"score": 0.004396267325338022, "phrase": "test_selection"}, {"score": 0.004363058588000252, "phrase": "minimization_techniques"}, {"score": 0.004075198669927074, "phrase": "redundant_test_cases"}, {"score": 0.0040444053843446326, "phrase": "test_suites"}, {"score": 0.003953409087444568, "phrase": "total_number"}, {"score": 0.003923532450854754, "phrase": "test_cases"}, {"score": 0.0036645642553325215, "phrase": "minimized_test_suite"}, {"score": 0.0036368625017975343, "phrase": "low_test_coverage"}, {"score": 0.0035820833812158035, "phrase": "revealing_capability"}, {"score": 0.0035550029054401016, "phrase": "low_priority_test_cases"}, {"score": 0.0034618177773967015, "phrase": "allowed_testing_budget"}, {"score": 0.0033329032920236994, "phrase": "original_test_suite"}, {"score": 0.0031966173935538992, "phrase": "minimization_problem"}, {"score": 0.0031604223680801774, "phrase": "search_problem"}, {"score": 0.002907184330345933, "phrase": "extensive_empirical_evaluation"}, {"score": 0.002788257824525862, "phrase": "seven_multi-objective_search_algorithms"}, {"score": 0.0026741832921475667, "phrase": "industrial_case_study"}, {"score": 0.002613935123129054, "phrase": "random-weighted_genetic_algorithm"}, {"score": 0.0025260919226344305, "phrase": "rwga"}, {"score": 0.0022908148377574168, "phrase": "test"}, {"score": 0.0022625835448873495, "phrase": "search_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Product line", " Search algorithm", " Test suite minimization"], "paper_abstract": "Cost-effective testing of a product in a product line requires obtaining a set of relevant test cases from the entire test suite via test selection and minimization techniques. In this paper, we particularly focus on test minimization for product lines, which identifies and eliminates redundant test cases from test suites in order to reduce the total number of test cases to execute, thereby improving the efficiency of testing. However, such minimization may result in the minimized test suite with low test coverage, low fault revealing capability, low priority test cases, and require more time than the allowed testing budget (e.g., time) as compared to the original test suite. To deal with the above issues, we formulated the minimization problem as a search problem and defined a fitness function considering various optimization objectives based on the above issues. To assess the performance of our fitness function, we conducted an extensive empirical evaluation by investigating the fitness function with three weight-based Genetic Algorithms (GAs) and seven multi-objective search algorithms using an industrial case study and 500 artificial problems inspired from the industrial case study. The results show that Random-Weighted Genetic Algorithm (RWGA) significantly outperforms the other algorithms since RWGA can balance all the objectives together by dynamically updating weights during each generation. Based on the results of our empirical evaluation, we also implemented a tool called TEst Minimization using Search Algorithms (TEMSA) to support test minimization using various search algorithms in the context of product lines. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Cost-effective test suite minimization in product lines using search techniques", "paper_id": "WOS:000351971500025"}