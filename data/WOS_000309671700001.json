{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "speculative_threads"}, {"score": 0.00830776279466448, "phrase": "thread-level_parallelism"}, {"score": 0.0072854631080087814, "phrase": "tls_execution"}, {"score": 0.004757643419056999, "phrase": "sequential_execution"}, {"score": 0.004682288586254123, "phrase": "multicore_processors"}, {"score": 0.004271490815763164, "phrase": "thread-level_speculation"}, {"score": 0.0041703614123283165, "phrase": "potentially_dependent_threads"}, {"score": 0.0038348235692738783, "phrase": "multicore_systems"}, {"score": 0.0038043055953253047, "phrase": "existing_approaches"}, {"score": 0.003669941438286456, "phrase": "sequential_program_regions"}, {"score": 0.0036262147882160744, "phrase": "tls."}, {"score": 0.0034289106230496816, "phrase": "suboptimal_decisions"}, {"score": 0.0032164910932827168, "phrase": "tls_performance"}, {"score": 0.0030414140732789186, "phrase": "runtime_thread"}, {"score": 0.0028643622911111942, "phrase": "proposed_system"}, {"score": 0.0027964537059186893, "phrase": "hardware-based_performance_counters"}, {"score": 0.0026975894491357176, "phrase": "novel_methodology"}, {"score": 0.002623111480310373, "phrase": "thread_dispatching_policies"}, {"score": 0.0024604876113911173, "phrase": "runtime_evaluation"}, {"score": 0.0022712795176156536, "phrase": "dynamic_dispatching_system"}, {"score": 0.002244178699939059, "phrase": "state-of-the-art_compiler-based_thread_management_techniques"}, {"score": 0.0021049977753042253, "phrase": "four-core_cmp-based_system"}], "paper_keywords": ["Experimentation", " Performance", " Dynamic optimization", " thread-level speculation", " multicore"], "paper_abstract": "Efficiently utilizing multicore processors to improve their performance potentials demands extracting thread-level parallelism from the applications. Various novel and sophisticated execution models have been proposed to extract thread-level parallelism from sequential programs. One such execution model, Thread-Level Speculation (TLS), allows potentially dependent threads to execute speculatively in parallel. However, TLS execution is inherently unpredictable, and consequently incorrect speculation could degrade performance for the multicore systems. Existing approaches have focused on using the compilers to select sequential program regions to apply TLS. Our research shows that even the state-of-the-art compiler makes suboptimal decisions, due to the unpredictability of TLS execution. Thus, we propose to dynamically optimize TLS performance. This article describes the design, implementation, and evaluation of a runtime thread dispatching mechanism that adjusts the behaviors of speculative threads based on their efficiency. In the proposed system, speculative threads are monitored by hardware-based performance counters and their performance impact is evaluated with a novel methodology that takes into account various unique TLS characteristics. Thread dispatching policies are devised to adjust the behaviors of speculative threads accordingly. With the help of the runtime evaluation, where and how to create speculative threads is better determined. Evaluated with all the SPEC CPU2000 benchmark programs written in C, the dynamic dispatching system outperforms the state-of-the-art compiler-based thread management techniques by 9.4% on average. Comparing to sequential execution, we achieve 1.37X performance improvement on a four-core CMP-based system.", "paper_title": "Dynamically Dispatching Speculative Threads to Improve Sequential Execution", "paper_id": "WOS:000309671700001"}