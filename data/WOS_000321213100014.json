{"auto_keywords": [{"score": 0.0490494776391455, "phrase": "alias_analysis"}, {"score": 0.00481495049065317, "phrase": "alias_speculation"}, {"score": 0.004762893197005439, "phrase": "atomic_region_support"}, {"score": 0.004635187610736025, "phrase": "critical_component"}, {"score": 0.0045108906244892165, "phrase": "promising_approach"}, {"score": 0.004046020290832207, "phrase": "alias_relationships"}, {"score": 0.0036091892088392775, "phrase": "runtime_checks"}, {"score": 0.00349324530379071, "phrase": "general_alias_speculation_scheme"}, {"score": 0.0034366728236876016, "phrase": "upcoming_hardware_support"}, {"score": 0.003290237137651949, "phrase": "isa_extensions"}, {"score": 0.0030157628075954588, "phrase": "aggressive_optimizations"}, {"score": 0.002918826667294298, "phrase": "recovery_code"}, {"score": 0.0028249975318149468, "phrase": "memory_conflict_detection_hardware"}, {"score": 0.0027341763737751467, "phrase": "runtime_checking"}, {"score": 0.0025611773887867255, "phrase": "novel_alias_speculation_approach"}, {"score": 0.0025334249463305875, "phrase": "loop_invariant_code_motion"}, {"score": 0.0024653491388223546, "phrase": "global_value_numbering"}, {"score": 0.002386062690026682, "phrase": "partial_redundancy_elimination"}, {"score": 0.0021987994275190314, "phrase": "program_execution_time"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Alias Analysis", " Atomic Region", " Transactional Memory", " Compiler Optimization"], "paper_abstract": "Alias analysis is a critical component in many compiler optimizations. A promising approach to reduce the complexity of alias analysis is to use speculation. The approach consists of performing optimizations assuming the alias relationships that are true most of the time, and repairing the code when such relationships are found not to hold through runtime checks. This paper proposes a general alias speculation scheme that leverages upcoming hardware support for transactions with the help of some ISA extensions. The ability of transactions to checkpoint and roll back frees the compiler to pursue aggressive optimizations without having to worry about recovery code. Also, exposing the memory conflict detection hardware in transactions to software allows runtime checking of aliases with little or no overhead. We test the potential of the novel alias speculation approach with Loop Invariant Code Motion (LICM), Global Value Numbering (GVN), and Partial Redundancy Elimination (PRE) optimization passes. On average, they are shown to reduce program execution time by 9% in SPEC FP2006 applications and 3% in SPEC INT2006 applications over the alias analysis of a state-of-the-art compiler.", "paper_title": "DeAliaser: Alias Speculation Using Atomic Region Support", "paper_id": "WOS:000321213100014"}