{"auto_keywords": [{"score": 0.04735878359197003, "phrase": "tribal_ownership"}, {"score": 0.04586846484671965, "phrase": "tribe"}, {"score": 0.00481495049065317, "phrase": "ownership_unifies"}, {"score": 0.00421297029755273, "phrase": "nested_classes"}, {"score": 0.004143196873246147, "phrase": "object_families"}, {"score": 0.003940706575253453, "phrase": "program's_runtime_object_ownership_structure"}, {"score": 0.0037795163893761027, "phrase": "lexical_nesting_structure"}, {"score": 0.0033622909109253616, "phrase": "descriptive_ownership_system"}, {"score": 0.0031712256091350316, "phrase": "heap_partitions"}, {"score": 0.002966084234963723, "phrase": "programming_disciplines"}, {"score": 0.0027510752634224726, "phrase": "different_prescriptive_ownership_policies"}, {"score": 0.0025730425700096365, "phrase": "descriptive_tribal_ownership_mechanism"}, {"score": 0.0024883835349005863, "phrase": "novel_owners-as-local-dominators_policy"}, {"score": 0.0022133711375320244, "phrase": "resulting_system"}, {"score": 0.0021766418372878835, "phrase": "strikingly_few_annotations"}, {"score": 0.0021049977753042253, "phrase": "well-understood_encapsulation_techniques"}], "paper_keywords": ["Languages", " Theory", " Ownership types", " virtual classes", " nested classes", " family polymorphism"], "paper_abstract": "Tribal Ownership unifies class nesting and object ownership. Tribal Ownership is based on Tribe, a language with nested classes and object families. In Tribal Ownership, a program's runtime object ownership structure is characterised by the lexical nesting structure of its classes. We build on a variant of Tribe to present a descriptive ownership system, using object nesting to describe heap partitions, but without imposing any restrictions on programming disciplines. We then demonstrate how a range of different prescriptive ownership policies can be supported on top of the descriptive Tribal Ownership mechanism; including a novel owners-as-local-dominators policy. We formalise our type system and prove soundness and several ownership invariants. The resulting system requires strikingly few annotations, and uses well-understood encapsulation techniques to create ownership systems that should be intuitive for programmers.", "paper_title": "Tribal Ownership", "paper_id": "WOS:000286595800038"}