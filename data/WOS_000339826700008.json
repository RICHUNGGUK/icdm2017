{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "mesh-connected_processor_arrays"}, {"score": 0.004753194996637899, "phrase": "effective_fault_tolerance_techniques"}, {"score": 0.004513957235071457, "phrase": "multiprocessor_systems"}, {"score": 0.004342430078306461, "phrase": "fault_tolerance"}, {"score": 0.004204459295724526, "phrase": "high_speed"}, {"score": 0.00409723267214392, "phrase": "real-time_constraints"}, {"score": 0.003486123304074186, "phrase": "previously_reported_work"}, {"score": 0.003441352119167824, "phrase": "parallel_reconfiguration"}, {"score": 0.0031233388358844188, "phrase": "processor_arrays"}, {"score": 0.00306334226516593, "phrase": "first_algorithm"}, {"score": 0.003004494701922268, "phrase": "host_array"}, {"score": 0.0029089095588612007, "phrase": "multithreading_manner"}, {"score": 0.0027982016314450717, "phrase": "parallel_algorithm"}, {"score": 0.002709161672473817, "phrase": "safe_rerouting_distance"}, {"score": 0.0026570998719084153, "phrase": "second_algorithm"}, {"score": 0.0025725382476862305, "phrase": "divide-and-conquer_approach"}, {"score": 0.0024906610581090223, "phrase": "leftmost_segments"}, {"score": 0.002260301305523054, "phrase": "conventional_algorithm"}, {"score": 0.0022312377180023282, "phrase": "simulation_results"}, {"score": 0.0021883400011393564, "phrase": "large_number"}, {"score": 0.0021049977753042253, "phrase": "proposed_algorithms"}], "paper_keywords": ["Processor array", " Reconfiguration", " Fault tolerance", " Parallel algorithm"], "paper_abstract": "Effective fault tolerance techniques are essential for improving the reliability of multiprocessor systems. At the same time, fault tolerance must be achieved at high speed to meet the real-time constraints of embedded systems. While parallelism has often been exploited to increase performance, to the best of our knowledge, there has been no previously reported work on parallel reconfiguration of mesh-connected processor arrays with faults. This paper presents two parallel algorithms to accelerate reconfiguration of the processor arrays. The first algorithm reconfigures a host array in parallel in a multithreading manner. The threads in the parallel algorithm execute independently within a safe rerouting distance. The second algorithm is based on a divide-and-conquer approach to first generate the leftmost segments in parallel and then merge the segments in parallel. When compared to the conventional algorithm, simulation results from a large number of instances confirm that the proposed algorithms significantly accelerate the reconfiguration without loss of harvest.", "paper_title": "Parallel reconfiguration algorithms for mesh-connected processor arrays", "paper_id": "WOS:000339826700008"}