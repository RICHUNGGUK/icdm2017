{"auto_keywords": [{"score": 0.033800610032964785, "phrase": "proposed_protocols"}, {"score": 0.009229447251648716, "phrase": "communication_complexity"}, {"score": 0.0075065583596258005, "phrase": "equality_testing"}, {"score": 0.007457438488979919, "phrase": "interval_testing"}, {"score": 0.00481495049065317, "phrase": "batch_logical_protocols"}, {"score": 0.004783358523770212, "phrase": "efficient_multi-party_computation"}, {"score": 0.00458297991625839, "phrase": "personal_or_classified_information"}, {"score": 0.004478567563654688, "phrase": "promising_tool"}, {"score": 0.004390958289481035, "phrase": "secure_multi-party_computation"}, {"score": 0.004290901837174206, "phrase": "multiple_parties"}, {"score": 0.004179328666330398, "phrase": "secret_s"}, {"score": 0.003912874578852994, "phrase": "biggest_problems"}, {"score": 0.0038876373384773913, "phrase": "mpc"}, {"score": 0.0038110933504990683, "phrase": "vast_amount"}, {"score": 0.0034183895670057717, "phrase": "multiple_protocols"}, {"score": 0.00327500240690856, "phrase": "\"batch_logical_or"}, {"score": 0.0032321012594688854, "phrase": "batch_logical_and."}, {"score": 0.00313761080323105, "phrase": "\"batch_logical_or-and"}, {"score": 0.00309650383642243, "phrase": "batch_logical_and-or"}, {"score": 0.003045874333486276, "phrase": "arbitrary_formula"}, {"score": 0.003015893651662638, "phrase": "boolean_protocols"}, {"score": 0.00289888453546698, "phrase": "logical_or"}, {"score": 0.0027318042427022953, "phrase": "bit_length"}, {"score": 0.0025828350676150354, "phrase": "interval_testing_invocations"}, {"score": 0.002441969502075509, "phrase": "secret_shared_database"}, {"score": 0.0022045353683203626, "phrase": "corresponding_existing_protocols"}, {"score": 0.0021049977753042253, "phrase": "logical_formulae"}], "paper_keywords": ["multi-party computation", " secret sharing", " batch logical protocol", " secret shared database"], "paper_abstract": "It is becoming more and more important to make use of personal or classified information while keeping it confidential. A promising tool for meeting this challenge is secure multi-party computation (MPC). It enables multiple parties, each given a snippet of a secret s, to compute a function f(s) by communicating with each other without revealing s. However, one of the biggest problems with MPC is that it requires a vast amount of communication. Much research has gone into making each protocol (equality testing, interval testing, etc.) more efficient. In this work, we make a set of multiple protocols more efficient by transforming them into their equivalent batch processing form and propose two protocols: \"Batch Logical OR\" and \"Batch Logical AND.\" Using proposed protocols recursively, we also propose \"Batch Logical OR-AND\" and \"Batch Logical AND-OR,\" and show arbitrary formula consisting of Boolean protocols, OR gates, and AND gates can be batched. Existing logical OR and logical AND protocols consisting of t equality testing invocations have a communication complexity of O(lt), where l is the bit length of the secrets. Our batched versions of these protocols reduce it to O(l+t). For t interval testing invocations, they reduce both communication and round complexity. Thus they can make the queries on a secret shared database more efficient. For example, the use of the proposed protocols reduces the communication complexity for a query consisting of equality testing and interval testing by approximately 70% compared to the use of the corresponding existing protocols. The concept of the proposed protocols is versatile and can be applied to logical formulae consisting of protocols other than equality testing and interval testing, thereby making them more efficient as well.", "paper_title": "Batch Logical Protocols for Efficient Multi-Party Computation", "paper_id": "WOS:000310397900009"}