{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "aspect"}, {"score": 0.00481495049065317, "phrase": "semantic-based_interactions"}, {"score": 0.004773040022691547, "phrase": "aspect-oriented_scenarios"}, {"score": 0.004690305164360866, "phrase": "dependent_or_conflicting_aspects"}, {"score": 0.00462919213721188, "phrase": "well-known_problem"}, {"score": 0.004588891098290524, "phrase": "aspect-oriented_development"}, {"score": 0.004316396683332752, "phrase": "unexpected_or_incorrect_results"}, {"score": 0.004095692768056685, "phrase": "aspect_interaction_detection_methods"}, {"score": 0.00398959232769596, "phrase": "purely_syntactic_comparisons"}, {"score": 0.003903269701018361, "phrase": "heavyweight_formal_methods"}, {"score": 0.003818807671883534, "phrase": "new_approach"}, {"score": 0.0037198532511087566, "phrase": "lightweight_semantic_annotations"}, {"score": 0.0035761913760242697, "phrase": "domain-specific_markers"}, {"score": 0.003529543381704363, "phrase": "separate_influence_model"}, {"score": 0.0034835017385881385, "phrase": "semantic_markers"}, {"score": 0.003453140302583322, "phrase": "different_domains"}, {"score": 0.003378385493203297, "phrase": "automated_analysis"}, {"score": 0.0032621183241997777, "phrase": "semantic_aspect_conflicts"}, {"score": 0.00308163068747474, "phrase": "early_aspects"}, {"score": 0.0029110999689379497, "phrase": "aspect_interactions"}, {"score": 0.0028480459059007468, "phrase": "software_lifecycle"}, {"score": 0.0025977542995083624, "phrase": "challenge_problem"}, {"score": 0.0024007585788965655, "phrase": "syntactic_techniques"}, {"score": 0.002218668420806254, "phrase": "different_aspect-oriented_scenario_notations"}, {"score": 0.002156476151011378, "phrase": "mata"}], "paper_keywords": ["Aspects", " Goal-oriented Requirement Language", " Interaction detection", " Semantic interactions", " MATA", " Sequence diagrams", " UML", " User Requirements Notation", " Aspect-oriented Use Case Maps"], "paper_abstract": "Interactions between dependent or conflicting aspects are a well-known problem with aspect-oriented development (as well as related paradigms). These interactions are potentially dangerous and can lead to unexpected or incorrect results when aspects are composed. To date, the majority of aspect interaction detection methods either have been based on purely syntactic comparisons or have relied on heavyweight formal methods. We present a new approach that is based instead on lightweight semantic annotations of aspects. Each aspect is annotated with domain-specific markers and a separate influence model describes how semantic markers from different domains influence each other. Automated analysis can then be used both to highlight semantic aspect conflicts and to trade-off aspects. We apply this technique to early aspects, namely, aspect scenarios, because it is desirable to detect aspect interactions as early in the software lifecycle as possible. We evaluate the technique using two case studies-one from industry and one posed as a challenge problem by the community-and show that the technique detects interactions that cannot be discovered using syntactic techniques. In addition, we show that the technique can apply to many languages through the use of different aspect-oriented scenario notations in the case studies, namely, MATA sequence diagrams and Aspect-oriented Use Case Maps.", "paper_title": "Modeling and detecting semantic-based interactions in aspect-oriented scenarios", "paper_id": "WOS:000278121400004"}