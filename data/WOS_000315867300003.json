{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "infinite_state_systems"}, {"score": 0.0046176782475198085, "phrase": "automated_verification"}, {"score": 0.004569630374630379, "phrase": "temporal_properties"}, {"score": 0.004314127287770832, "phrase": "constraint_logic_programs"}, {"score": 0.004269244678461136, "phrase": "clp"}, {"score": 0.0040094142308666975, "phrase": "first_phase"}, {"score": 0.003946960862020283, "phrase": "clp_specification"}, {"score": 0.0038854765143440965, "phrase": "infinite_state_system"}, {"score": 0.0037456980766939836, "phrase": "initial_state"}, {"score": 0.003629882559085245, "phrase": "temporal_property"}, {"score": 0.0034267429854665035, "phrase": "second_phase"}, {"score": 0.003373334961160647, "phrase": "specialized_program"}, {"score": 0.0032689949867583633, "phrase": "bottom-up_strategy"}, {"score": 0.003085989256759819, "phrase": "generalization_strategy"}, {"score": 0.0029905104479072482, "phrase": "program_specialization_phase"}, {"score": 0.0027645030021576926, "phrase": "program_analysis"}, {"score": 0.0027356847952125433, "phrase": "program_transformation"}, {"score": 0.002637160140011997, "phrase": "new_strategies"}, {"score": 0.0024634797027967203, "phrase": "generalization_strategies"}], "paper_keywords": ["computational tree logic", " constraint logic programs", " generalization strategies", " infinite state systems", " program specialization", " program verification"], "paper_abstract": "We present a method for the automated verification of temporal properties of infinite state systems. Our verification method is based on the specialization of constraint logic programs (CLP) and works in two phases: (1) in the first phase, a CLP specification of an infinite state system is specialized with respect to the initial state of the system and the temporal property to be verified, and (2) in the second phase, the specialized program is evaluated by using a bottom-up strategy. The effectiveness of the method strongly depends on the generalization strategy which is applied during the program specialization phase. We consider several generalization strategies obtained by combining techniques already known in the field of program analysis and program transformation, and we also introduce some new strategies. Then, through many verification experiments, we evaluate the effectiveness of the generalization strategies we have considered. Finally, we compare the implementation of our specialization-based verification method to other constraint-based model checking tools. The experimental results show that our method is competitive with the methods used by those other tools.", "paper_title": "Generalization strategies for the verification of infinite state systems", "paper_id": "WOS:000315867300003"}