{"auto_keywords": [{"score": 0.049648703742940906, "phrase": "higher-order_logic"}, {"score": 0.015719716506582538, "phrase": "overloaded_definitions"}, {"score": 0.01380877912065348, "phrase": "holco"}, {"score": 0.013145546854647439, "phrase": "isabelle"}, {"score": 0.011752698278557188, "phrase": "dependency_pair_method"}, {"score": 0.011037505055521528, "phrase": "dependency_graph"}, {"score": 0.003755782496223915, "phrase": "even_semi-decidable"}, {"score": 0.0037052054802048707, "phrase": "undecidability_proof"}, {"score": 0.003671865026158296, "phrase": "strong_ties"}, {"score": 0.003557509959237602, "phrase": "arts_and_giesl"}, {"score": 0.003400277492941669, "phrase": "trs."}, {"score": 0.0029689311901364797, "phrase": "simple_form"}, {"score": 0.002812080493032303, "phrase": "hirokawa"}, {"score": 0.0027867543504147023, "phrase": "middeldorp"}, {"score": 0.002724428781940696, "phrase": "strongly_connected_components"}, {"score": 0.0022836785412390544, "phrase": "conservative_overloading"}, {"score": 0.0021727640931660038, "phrase": "conservativity_check"}, {"score": 0.0021531831652035482, "phrase": "external_tools"}, {"score": 0.0021241414408077895, "phrase": "tyrolean_termination_tool"}], "paper_keywords": [""], "paper_abstract": "Overloading in the context of higher-order logic has been used for some time now. We define what we mean by Higher-Order Logic with Conservative Overloading (HOLCO). HOLCO captures how overloading is actually applied by the users of Isabelle. We show that checking whether definitions obey the rules of HOLCO is not even semi-decidable. The undecidability proof reveals strong ties between our problem and the dependency pair method by Arts and Giesl for proving termination of TRSs via the notion overloading TRS. The dependency graph of overloading TRSs can be computed exactly. We exploit this by providing an algorithm that checks the conservativity of definitions based on the dependency pair method and a simple form of linear polynomial interpretation,- the algorithm also uses the strategy of Hirokawa and Middeldorp of recursively calculating the strongly connected components of the dependency graph. The algorithm is powerful enough to deal with all overloaded definitions that the author has encountered so far in practice. An implementation of this algorithm is available as part of a package that adds conservative overloading to Isabelle. This package also allows to delegate the conservativity check to external tools like the Tyrolean Termination Tool or the Automated Program Verification Environment.", "paper_title": "Checking conservativity of overloaded definitions in higher-order logic", "paper_id": "WOS:000240072100016"}