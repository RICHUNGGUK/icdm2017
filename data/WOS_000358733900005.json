{"auto_keywords": [{"score": 0.03202078941389311, "phrase": "whole_transaction"}, {"score": 0.00481495049065317, "phrase": "transactions_for_digital_ecosystems"}, {"score": 0.0047113960612140335, "phrase": "digital_ecosystem"}, {"score": 0.0045108906244892165, "phrase": "multiple_online_services"}, {"score": 0.004318881178805575, "phrase": "single_point"}, {"score": 0.004016782710006123, "phrase": "weak_coupling"}, {"score": 0.003987755561492638, "phrase": "services_places"}, {"score": 0.003973320429450603, "phrase": "additional_demands"}, {"score": 0.0038737214010638745, "phrase": "recovery_management"}, {"score": 0.0038457240885563146, "phrase": "long-running_transactions"}, {"score": 0.0038179283509963695, "phrase": "traditional_soc_related_formalisms"}, {"score": 0.0037222099716098783, "phrase": "shields'_vector_languages"}, {"score": 0.0036553070575015344, "phrase": "synchronisation_constraint"}, {"score": 0.003512308265830794, "phrase": "formal_semantics"}, {"score": 0.0034118234596993836, "phrase": "common_ordering_constraints"}, {"score": 0.0033748847621075536, "phrase": "underlying_interactions"}, {"score": 0.0032664431277275928, "phrase": "so-called_transaction_languages"}, {"score": 0.0031960852616842207, "phrase": "participant_service"}, {"score": 0.0027143926774929957, "phrase": "individual_sequences"}, {"score": 0.0026752553342629663, "phrase": "mazurkiewicz"}, {"score": 0.0025518930446603335, "phrase": "participating_subcomponents"}, {"score": 0.002347378595930709, "phrase": "concurrent_forward_actions"}, {"score": 0.002206801982145622, "phrase": "outline_connections"}, {"score": 0.002190825828942124, "phrase": "transaction_languages"}, {"score": 0.0021049977753042253, "phrase": "forward_recovery"}], "paper_keywords": ["services", " online resources", " coordination", " choreography", " true concurrency", " transactions", " compensation semantics", " transaction languages", " equivalent execution histories", " forward recovery"], "paper_abstract": "The concept of a digital ecosystem (DE) has been used to explore scenarios in which multiple online services and resources can be accessed by users without there being a single point of control, which can be used to effectively serialise their interactions. We argue in this paper that this weak coupling between services places additional demands on the modelling of compensation and recovery management in long-running transactions over traditional SOC related formalisms. We describe an adaptation of Shields' vector languages, in that the synchronisation constraint is removed (no shared actions), as a formal semantics for a transaction in terms of the common ordering constraints on the underlying interactions between its participants. The notation afforded by the so-called transaction languages captures the invocations on each participant service (online resource), and at each point during execution, across the whole transaction. Concurrency is modelled explicitly through a notion of independence, which is lifted onto tuples of sequences (one for each participant of the transaction) rather than individual sequences, as in Mazurkiewicz trace languages or events, as in the event structures model. Participating subcomponents execute concurrently and failure of one or more causes the recovery of the whole transaction. Compensations are triggered immediately upon failure and concurrent forward actions are compensated concurrently. We highlight the benefits of our true-concurrent approach in the context of DEs and outline connections of transaction languages to other partial order models. Further, we discuss how our approach supports forward recovery in that recovering the whole transaction is avoided wherever possible.", "paper_title": "True Concurrency in Long-running Transactions for Digital Ecosystems", "paper_id": "WOS:000358733900005"}