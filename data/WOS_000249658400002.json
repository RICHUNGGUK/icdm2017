{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "model_checking"}, {"score": 0.004645057834614705, "phrase": "property_testing"}, {"score": 0.00414545383888272, "phrase": "main_obstacle"}, {"score": 0.003975200317233532, "phrase": "intractably_large_size"}, {"score": 0.0039043835848369215, "phrase": "program's_transition_system"}, {"score": 0.0037664981403399064, "phrase": "randomized_method"}, {"score": 0.0036553070575015344, "phrase": "fixed_property"}, {"score": 0.0035901685646972585, "phrase": "individual_inputs"}, {"score": 0.0034633412134999425, "phrase": "small_random_part"}, {"score": 0.0031654684543975077, "phrase": "new_notion"}, {"score": 0.0031277316566463978, "phrase": "probabilistic_abstraction"}, {"score": 0.002790867657645595, "phrase": "transition_systems"}, {"score": 0.002741091312632307, "phrase": "large_graphs"}, {"score": 0.002708399936381754, "phrase": "small_transition_systems"}, {"score": 0.0026600905156986317, "phrase": "small_random_subgraphs"}, {"score": 0.002581477142020187, "phrase": "original_transition_system"}, {"score": 0.0023451553255837317, "phrase": "\"_incorrect_programs"}, {"score": 0.0021049977753042253, "phrase": "correct_programs"}], "paper_keywords": [""], "paper_abstract": "The goal of model checking is to verify the correctness of a given program, on all its inputs. The main obstacle, in many cases, is the intractably large size of the program's transition system. Property testing is a randomized method to verify whether some fixed property holds on individual inputs, by looking at a small random part of that input. We join the strengths of both approaches by introducing a new notion of probabilistic abstraction, and by extending the framework of model checking to include the use of these abstractions. Our abstractions map transition systems associated with large graphs to small transition systems associated with small random subgraphs. This reduces the original transition system to a family of small, even constant-size, transition systems. We prove that with high probability, \"sufficiently\" incorrect programs will be rejected (epsilon-robustness). We also prove that under a certain condition (exactness), correct programs will never be rejected (soundness).", "paper_title": "Probabilistic abstraction for model checking: An approach based on property testing", "paper_id": "WOS:000249658400002"}