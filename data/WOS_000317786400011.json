{"auto_keywords": [{"score": 0.035683930470130534, "phrase": "frs"}, {"score": 0.00481495049065317, "phrase": "grid_computing"}, {"score": 0.004753670676591174, "phrase": "efficient_binary_artificial_bee_colony_optimization"}, {"score": 0.004076157223660074, "phrase": "binary_integer_job_scheduling_problems"}, {"score": 0.0038476708316022823, "phrase": "efficient_binary_artificial_bee_colony_extension"}, {"score": 0.003798654583736764, "phrase": "babc"}, {"score": 0.0037024804835018373, "phrase": "flexible_ranking_strategy"}, {"score": 0.0032359856233193504, "phrase": "new_solutions"}, {"score": 0.003194736764837261, "phrase": "diversified_search"}, {"score": 0.003154012038613403, "phrase": "early_generations"}, {"score": 0.003015508235745547, "phrase": "latter_generations"}, {"score": 0.0027920359090544107, "phrase": "first_a_fixed_number"}, {"score": 0.0025034338848015187, "phrase": "best_solutions"}, {"score": 0.0024243586247372087, "phrase": "new_generation"}, {"score": 0.0023934306706217797, "phrase": "simulation_results"}, {"score": 0.00236289633510808, "phrase": "benchmark_job_scheduling_problems"}, {"score": 0.0021597662797996843, "phrase": "genetic_algorithms"}, {"score": 0.0021322065604537617, "phrase": "simulated_annealing"}, {"score": 0.0021049977753042253, "phrase": "particle_swarm_optimization"}], "paper_keywords": ["Artificial bee colony (ABC)", " Binary artificial bee colony (BABC)", " Efficient binary artificial bee colony (EBABC)", " Flexible ranking strategy (FRS)", " Job scheduling", " Grid computing"], "paper_abstract": "The artificial bee colony has the advantage of employing fewer control parameters compared with other population-based optimization algorithms. In this paper a binary artificial bee colony (BABC) algorithm is developed for binary integer job scheduling problems in grid computing. We further propose an efficient binary artificial bee colony extension of BABC that incorporates a flexible ranking strategy (FRS) to improve the balance between exploration and exploitation. The FRS is introduced to generate and use new solutions for diversified search in early generations and to speed up convergence in latter generations. Two variants are introduced to minimize the makepsan. In the first a fixed number of best solutions is employed with the FRS while in the second the number of the best solutions is reduced with each new generation. Simulation results for benchmark job scheduling problems show that the performance of our proposed methods is better than those alternatives such as genetic algorithms, simulated annealing and particle swarm optimization.", "paper_title": "Optimal job scheduling in grid computing using efficient binary artificial bee colony optimization", "paper_id": "WOS:000317786400011"}