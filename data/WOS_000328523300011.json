{"auto_keywords": [{"score": 0.049465088868450476, "phrase": "erlang"}, {"score": 0.00481495049065317, "phrase": "black-box_testing"}, {"score": 0.004692227830462433, "phrase": "test_specification_language"}, {"score": 0.004427366754240748, "phrase": "common_practice"}, {"score": 0.0043705604923728195, "phrase": "software_development"}, {"score": 0.004231699728933577, "phrase": "integration_interfaces"}, {"score": 0.00415050117148714, "phrase": "key_activity"}, {"score": 0.004044645056447888, "phrase": "whole_range"}, {"score": 0.003992729692096799, "phrase": "technical_challenges"}, {"score": 0.003486123304074186, "phrase": "different_implementations"}, {"score": 0.0034191818674096453, "phrase": "software_component_integration"}, {"score": 0.0032468685934998335, "phrase": "black-box_testing_approach"}, {"score": 0.0031032123292370427, "phrase": "quickcheck"}, {"score": 0.0028715299874549245, "phrase": "expected_behavior"}, {"score": 0.002709161672473817, "phrase": "real-world_multimedia_content_management_system"}, {"score": 0.0025230952890994236, "phrase": "different_technologies"}, {"score": 0.0024907986017105896, "phrase": "java"}, {"score": 0.002304606411453748, "phrase": "integration_api_implementations"}], "paper_keywords": ["Black-box testing", " Functional testing", " Test automation"], "paper_abstract": "Integration of reused, well-designed components and subsystems is a common practice in software development. Hence, testing integration interfaces is a key activity, and a whole range of technical challenges arise from the complexity and versatility of such components. In this paper, we present a methodology to fully test different implementations of a software component integration API. More precisely, we propose a black-box testing approach, based on the use of QuickCheck and inspired by the TTCN-3 test architecture, to specify and test the expected behavior of a component. We have used a real-world multimedia content management system as case study. This system offers the same integration API for different technologies: Java, Erlang and HTTP/XML. Using our method, we have tested all integration API implementations using the same test specification, increasing the confidence in its interoperability and reusability. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "A language-independent approach to black-box testing using Erlang as test specification language", "paper_id": "WOS:000328523300011"}