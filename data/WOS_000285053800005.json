{"auto_keywords": [{"score": 0.029725760425679804, "phrase": "svm"}, {"score": 0.00481495049065317, "phrase": "condensed_vector_machines"}, {"score": 0.004771435352180973, "phrase": "learning_fast_machine"}, {"score": 0.0047283116134926645, "phrase": "large_data"}, {"score": 0.0045804107341714, "phrase": "main_challenges"}, {"score": 0.004539005582217305, "phrase": "kernel-based_methods"}, {"score": 0.004497973025639345, "phrase": "support_vector_machines"}, {"score": 0.004377077848734575, "phrase": "quadratic_demand"}, {"score": 0.004278807087784626, "phrase": "kernel_matrices"}, {"score": 0.004144908086646161, "phrase": "million-size_data"}, {"score": 0.0041074234667687875, "phrase": "sophisticated_decomposition_algorithms"}, {"score": 0.0038368442918503072, "phrase": "final_support_vectors"}, {"score": 0.0036497740708342093, "phrase": "decomposition_method"}, {"score": 0.003584025547693836, "phrase": "large-scale_applications"}, {"score": 0.0033937776228549557, "phrase": "computer's_capacity"}, {"score": 0.003287482882222731, "phrase": "large_number"}, {"score": 0.003170060683860338, "phrase": "testing_phase"}, {"score": 0.0029209233709517634, "phrase": "vector_combination_scheme"}, {"score": 0.0028682668647074397, "phrase": "svm_solution"}, {"score": 0.0028293966058473476, "phrase": "incremental_working_set_selection"}, {"score": 0.002753224894944965, "phrase": "main_objective"}, {"score": 0.0026548344763838213, "phrase": "minimal_number"}, {"score": 0.0026307897899760383, "phrase": "final_svs"}, {"score": 0.0025833500717948343, "phrase": "minimum_resource_demand"}, {"score": 0.002559951153813876, "phrase": "faster_training_time"}, {"score": 0.002502374576203785, "phrase": "learning_machines"}, {"score": 0.002391067964886602, "phrase": "small_number"}, {"score": 0.002316105585203396, "phrase": "experimental_results"}, {"score": 0.0022951216874671516, "phrase": "large_benchmark_datasets"}, {"score": 0.0022537212268979507, "phrase": "proposed_condensed_svms"}, {"score": 0.002153450937601075, "phrase": "generalization_ability"}, {"score": 0.0021049977753042253, "phrase": "normal_svms"}], "paper_keywords": ["Decomposition algorithm", " Kernel method", " optimization", " reduced set method", " support vector machine"], "paper_abstract": "Scalability is one of the main challenges for kernel-based methods and support vector machines (SVMs). The quadratic demand in memory for storing kernel matrices makes it impossible for training on million-size data. Sophisticated decomposition algorithms have been proposed to efficiently train SVMs using only important examples, which ideally are the final support vectors (SVs). However, the ability of the decomposition method is limited to large-scale applications where the number of SVs is still too large for a computer's capacity. From another perspective, the large number of SVs slows down SVMs in the testing phase, making it impractical for many applications. In this paper, we introduce the integration of a vector combination scheme to simplify the SVM solution into an incremental working set selection for SVM training. The main objective of the integration is to maintain a minimal number of final SVs, bringing a minimum resource demand and faster training time. Consequently, the learning machines are more compact and run faster thanks to the small number of vectors included in their solution. Experimental results on large benchmark datasets shows that the proposed condensed SVMs achieve both training and testing efficiency while maintaining a generalization ability equivalent to that of normal SVMs.", "paper_title": "Condensed Vector Machines: Learning Fast Machine for Large Data", "paper_id": "WOS:000285053800005"}