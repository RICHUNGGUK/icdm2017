{"auto_keywords": [{"score": 0.050077436344029704, "phrase": "coconut"}, {"score": 0.04549657143943838, "phrase": "haskell"}, {"score": 0.04487544093668104, "phrase": "dsl"}, {"score": 0.004482063543727601, "phrase": "extensible_domain-specific_language"}, {"score": 0.004252602474733162, "phrase": "interactive_prototyping"}, {"score": 0.004212157020917929, "phrase": "unit_testing"}, {"score": 0.004073590964805314, "phrase": "efficient_implementations"}, {"score": 0.004034841146538891, "phrase": "common_patterns"}, {"score": 0.003996458454723708, "phrase": "unscheduled_c"}, {"score": 0.003958439439112026, "phrase": "scheduled_assembly_language_output"}, {"score": 0.003809932244103758, "phrase": "even_nonexpert_users"}, {"score": 0.0037556843869894566, "phrase": "efficient_function_implementations"}, {"score": 0.003702206069379459, "phrase": "special_hardware_features"}, {"score": 0.0036494864560524735, "phrase": "production-quality_library"}, {"score": 0.0035462807506718578, "phrase": "compute_engines"}, {"score": 0.0033969001271637934, "phrase": "-scheduled_vector_functions"}, {"score": 0.003300813776412652, "phrase": "commercially_distributed_functions"}, {"score": 0.0031018195951638882, "phrase": "line_assembly"}, {"score": 0.002928765962664163, "phrase": "coconut_functions"}, {"score": 0.002791932344920906, "phrase": "hard-to-approximate_functions"}, {"score": 0.002752139271586703, "phrase": "register-level_simd_lookups"}, {"score": 0.002549269480908849, "phrase": "polynomial_descriptions"}, {"score": 0.002372709504897832, "phrase": "maple"}, {"score": 0.00230546852838578, "phrase": "minimax_polynomial_generation"}, {"score": 0.0022188370388602813, "phrase": "mathematical_properties"}, {"score": 0.002166349705365602, "phrase": "efficient_calculational_patterns"}, {"score": 0.0021354538918029286, "phrase": "spu_isa."}], "paper_keywords": ["Special function approximations", " parallel and vector implementations", " code generation", " specialized application languages", " SIMD processors", " applicative (functional) programming"], "paper_abstract": "Coconut, a tool for developing high-assurance, high-performance kernels for scientific computing, contains an extensible domain-specific language (DSL) embedded in Haskell. The DSL supports interactive prototyping and unit testing, simplifying the process of designing efficient implementations of common patterns. Unscheduled C and scheduled assembly language output are supported. Using the patterns, even nonexpert users can write efficient function implementations, leveraging special hardware features. A production-quality library of elementary functions for the Cell BE SPU compute engines has been developed. Coconut-generated and -scheduled vector functions were more than four times faster than commercially distributed functions written in C with intrinsics (a nicer syntax for in-line assembly), wrapped in loops and scheduled by spuxIc. All Coconut functions were faster, but the difference was larger for hard-to-approximate functions for which register-level SIMD lookups made a bigger difference. Other helpful features in the language include facilities for translating interval and polynomial descriptions between GHCi, a Haskell interpreter used to prototype in the DSL, and Maple, used for exploration and minimax polynomial generation. This makes it easier to match mathematical properties of the functions with efficient calculational patterns in the SPU ISA. By using single, literate source files, the resulting functions are remarkably readable.", "paper_title": "An Optimized Cell BE Special Function Library Generated by Coconut", "paper_id": "WOS:000267941900009"}