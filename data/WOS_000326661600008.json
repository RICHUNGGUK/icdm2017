{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "resource_utilization"}, {"score": 0.0047563776685277314, "phrase": "simultaneous_multi-threading_processors"}, {"score": 0.004698514007994158, "phrase": "simultaneous_multi-threading"}, {"score": 0.004339108074589304, "phrase": "key_datapath_components"}, {"score": 0.00428629884026304, "phrase": "multiple_independent_threads"}, {"score": 0.003982617095636925, "phrase": "shared_resources"}, {"score": 0.0038624981944755813, "phrase": "unfair_thread_processing"}, {"score": 0.0037231102027070724, "phrase": "severely_degraded_overall_performance"}, {"score": 0.0036107898615445797, "phrase": "idling_threads"}, {"score": 0.0035233696341819437, "phrase": "critical_resources"}, {"score": 0.003334309053314909, "phrase": "desired_system_performance"}, {"score": 0.002913650880082273, "phrase": "shared_issue_queue"}, {"score": 0.0028084079003212947, "phrase": "system_performance"}, {"score": 0.0027069560455629917, "phrase": "significant_margin"}, {"score": 0.0026091594819333654, "phrase": "benchmark_mixes"}, {"score": 0.0025615908073796027, "phrase": "even_more_noteworthy_feature"}, {"score": 0.002453934333239467, "phrase": "ensuing_hardware_overhead"}, {"score": 0.002210903392596343, "phrase": "smt_pipeline"}, {"score": 0.002183938718432764, "phrase": "potentially_additive_benefits"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Superscalar", " Simultaneous multi-threading", " Instruction recalling", " Resource utilization"], "paper_abstract": "Simultaneous Multi-Threading (SMT) has been a very popular design in improving resource utilization by sharing key datapath components among multiple independent threads. However, allowing any of the threads to overwhelm these shared resources not only leads to unfair thread processing but may also result in severely degraded overall performance. How to prevent idling threads from clogging the critical resources in the pipeline becomes a must in sustaining desired system performance. In this paper, we show that, if one can manage to recall instructions of idling threads from the shared Issue Queue (IQ), the system performance is easily enhanced by a significant margin, with up to 20% for some benchmark mixes. An even more noteworthy feature about this technique is that the ensuing hardware overhead is very insignificant and it can also be coupled with other advanced techniques employed in other stages of the SMT pipeline for potentially additive benefits. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Recalling instructions from idling threads to maximize resource utilization for simultaneous multi-threading processors", "paper_id": "WOS:000326661600008"}