{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "practical_and_collaborative_auto-tuning"}, {"score": 0.004776484866276242, "phrase": "empirical_auto-tuning_and_machine_learning_techniques"}, {"score": 0.0046256566852302256, "phrase": "execution_time"}, {"score": 0.00458869631642791, "phrase": "power_consumption"}, {"score": 0.00455202992136173, "phrase": "code_size"}, {"score": 0.004251912075877877, "phrase": "widespread_production_use"}, {"score": 0.004167451906343558, "phrase": "native_support"}, {"score": 0.004084662575167727, "phrase": "ever_changing_and_complex_software"}, {"score": 0.004003511299646736, "phrase": "large_and_multi-dimensional_optimization_spaces"}, {"score": 0.003845994935767022, "phrase": "unified_mechanisms"}, {"score": 0.0037544644262310525, "phrase": "optimization_knowledge"}, {"score": 0.0037244390953401533, "phrase": "research_material"}, {"score": 0.0036504182609411852, "phrase": "possible_collaborative_approach"}, {"score": 0.0035635256137029592, "phrase": "collective_mind_knowledge_management_system"}, {"score": 0.0034926916198124484, "phrase": "previous_ctuning_framework"}, {"score": 0.0034508665218929745, "phrase": "modular_infrastructure"}, {"score": 0.0033150213498435617, "phrase": "whole_auto-tuning_setups"}, {"score": 0.00321019328631004, "phrase": "hardware_dependencies"}, {"score": 0.003022465992278672, "phrase": "available_research_material"}, {"score": 0.0029504765287722465, "phrase": "data_sets"}, {"score": 0.0029268619875960715, "phrase": "search_strategies"}, {"score": 0.0029034358982402346, "phrase": "machine_learning_models"}, {"score": 0.0028229071631385634, "phrase": "shared_components"}, {"score": 0.0027778947555117243, "phrase": "extensible_meta-description"}, {"score": 0.0026900059414552823, "phrase": "existing_auto-tuning_and_benchmarking_techniques"}, {"score": 0.00254282157860369, "phrase": "complex_behavior"}, {"score": 0.002512342528545883, "phrase": "existing_computer_systems"}, {"score": 0.0024822279007111255, "phrase": "behavior_anomalies"}, {"score": 0.0024623517958288228, "phrase": "model_mispredictions"}, {"score": 0.002432834929068545, "phrase": "interdisciplinary_community"}, {"score": 0.0024036710362692042, "phrase": "reproducible_way"}, {"score": 0.002182573128803447, "phrase": "collaborative_and_reproducible_research"}, {"score": 0.0021049977753042253, "phrase": "experimental_results"}], "paper_keywords": ["High performance computing", " systematic auto-tuning", " systematic benchmarking", " big data driven optimization", " modeling of computer behavior", " performance prediction", " collaborative knowledge management", " public repository of knowledge", " NoSQL repository", " code and data sharing", " specification sharing", " collaborative experimentation", " machine learning", " data mining", " multi-objective optimization", " model driven optimization", " agile development", " plugin-based tuning", " performance regression buildbot", " open access publication model", " reproducible research"], "paper_abstract": "Empirical auto-tuning and machine learning techniques have been showing high potential to improve execution time, power consumption, code size, reliability and other important metrics of various applications for more than two decades. However, they are still far from widespread production use due to lack of native support for auto-tuning in an ever changing and complex software and hardware stack, large and multi-dimensional optimization spaces, excessively long exploration times, and lack of unified mechanisms for preserving and sharing of optimization knowledge and research material. We present a possible collaborative approach to solve above problems using Collective Mind knowledge management system. In contrast with previous cTuning framework, this modular infrastructure allows to preserve and share through the Internet the whole auto-tuning setups with all related artifacts and their software and hardware dependencies besides just performance data. It also allows to gradually structure, systematize and describe all available research material including tools, benchmarks, data sets, search strategies and machine learning models. Researchers can take advantage of shared components and data with extensible meta-description to quickly and collaboratively validate and improve existing auto-tuning and benchmarking techniques or prototype new ones. The community can now gradually learn and improve complex behavior of all existing computer systems while exposing behavior anomalies or model mispredictions to an interdisciplinary community in a reproducible way for further analysis. We present several practical, collaborative and model-driven auto-tuning scenarios. We also decided to release all material at c-mind.org/repo to set up an example for a collaborative and reproducible research as well as our new publication model in computer engineering where experimental results are continuously shared and validated by the community.", "paper_title": "Collective mind: Towards practical and collaborative auto-tuning", "paper_id": "WOS:000340647100006"}