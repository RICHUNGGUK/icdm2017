{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_programs"}, {"score": 0.004586531354697466, "phrase": "meets_first-order"}, {"score": 0.004243289764306128, "phrase": "higher-order_functional_programs"}, {"score": 0.003964007795174772, "phrase": "program_transformations"}, {"score": 0.0038499929374478125, "phrase": "defunctionalised_versions"}, {"score": 0.003527181559366122, "phrase": "existing_tools"}, {"score": 0.00342568771304873, "phrase": "complexity_analysis"}, {"score": 0.003359647377874098, "phrase": "first-order_term_rewrite_systems"}, {"score": 0.0031079352545607267, "phrase": "complexity_preservation"}, {"score": 0.0029602552900111433, "phrase": "employed_transformations"}, {"score": 0.0027651847105654363, "phrase": "obtained_term_rewrite_system"}, {"score": 0.0025829353063908256, "phrase": "initial_program"}, {"score": 0.002436289099444074, "phrase": "suitable_strategies"}, {"score": 0.002297949552105756, "phrase": "studied_transformations"}, {"score": 0.002231747358665628, "phrase": "ample_experimental_data"}], "paper_keywords": ["Defunctionalisation", " term rewriting", " termination and resource analysis"], "paper_abstract": "We show how the complexity of higher-order functional programs can be analysed automatically by applying program transformations to a defunctionalised versions of them, and feeding the result to existing tools for the complexity analysis of first-order term rewrite systems. This is done while carefully analysing complexity preservation and reflection of the employed transformations such that the complexity of the obtained term rewrite system reflects on the complexity of the initial program. Further, we describe suitable strategies for the application of the studied transformations and provide ample experimental data for assessing the viability of our method.", "paper_title": "Analysing the Complexity of Functional Programs: Higher-Order Meets First-Order", "paper_id": "WOS:000367255800014"}