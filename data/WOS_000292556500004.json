{"auto_keywords": [{"score": 0.044021069003900376, "phrase": "programming_rules"}, {"score": 0.033340417945684854, "phrase": "false_positives"}, {"score": 0.029245254202259995, "phrase": "neglected_conditions"}, {"score": 0.00481495049065317, "phrase": "defect_detection"}, {"score": 0.004698514007994158, "phrase": "software_quality"}, {"score": 0.004641351004344458, "phrase": "static_or_dynamic_defect-detection_tools"}, {"score": 0.003982617095636925, "phrase": "previous_work"}, {"score": 0.0038154673253945003, "phrase": "frequent_patterns"}, {"score": 0.003769006950727621, "phrase": "program_source_code"}, {"score": 0.0036329805216306576, "phrase": "static_or_dynamic_defect-detection_techniques"}, {"score": 0.003501846136829077, "phrase": "source_code"}, {"score": 0.0033548062793973144, "phrase": "existing_approaches"}, {"score": 0.0030789331635764122, "phrase": "mining_approaches"}, {"score": 0.002985988377995789, "phrase": "novel_approach"}, {"score": 0.002931569771634119, "phrase": "alattin"}, {"score": 0.002860546817196148, "phrase": "new_mining_algorithms"}, {"score": 0.0021309898622781124, "phrase": "false_negatives"}, {"score": 0.0021049977753042253, "phrase": "detected_violations"}], "paper_keywords": ["Alternative patterns", " Static defect detection", " Mining software engineering data", " Code search engine"], "paper_abstract": "To improve software quality, static or dynamic defect-detection tools accept programming rules as input and detect their violations in software as defects. As these programming rules are often not well documented in practice, previous work developed various approaches that mine programming rules as frequent patterns from program source code. Then these approaches use static or dynamic defect-detection techniques to detect pattern violations in source code under analysis. However, these existing approaches often produce many false positives due to various factors. To reduce false positives produced by these mining approaches, we develop a novel approach, called Alattin, that includes new mining algorithms and a technique for detecting neglected conditions based on our mining algorithm. Our new mining algorithms mine patterns in four pattern formats: conjunctive, disjunctive, exclusive-disjunctive, and combinations of these patterns. We show the benefits and limitations of these four pattern formats with respect to false positives and false negatives among detected violations by applying those patterns to the problem of detecting neglected conditions.", "paper_title": "Alattin: mining alternative patterns for defect detection", "paper_id": "WOS:000292556500004"}