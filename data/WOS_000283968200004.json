{"auto_keywords": [{"score": 0.046238615936730884, "phrase": "prediction_models"}, {"score": 0.03661306378153703, "phrase": "existing_models"}, {"score": 0.00481495049065317, "phrase": "software_quality_prediction"}, {"score": 0.004664352260912174, "phrase": "software_systems"}, {"score": 0.004074901471704325, "phrase": "new_software_development_environments"}, {"score": 0.004026598712747509, "phrase": "new_circumstances"}, {"score": 0.003947358102140903, "phrase": "main_objective"}, {"score": 0.003823791479971016, "phrase": "model_generalizability_problem"}, {"score": 0.0037485269508155516, "phrase": "new_approach"}, {"score": 0.0037040785566765954, "phrase": "traditional_ways"}, {"score": 0.0036167509502276294, "phrase": "historical_data"}, {"score": 0.003588100032858716, "phrase": "machine_learning_techniques"}, {"score": 0.0034482025128821548, "phrase": "decision_trees"}, {"score": 0.0033937776228549557, "phrase": "module_fault-proneness"}, {"score": 0.0033269488835014583, "phrase": "genetic_algorithm"}, {"score": 0.0031217859267564344, "phrase": "\"composite\"_model"}, {"score": 0.0030239842475439814, "phrase": "software_development"}, {"score": 0.0030000149283621255, "phrase": "experimental_evaluation"}, {"score": 0.002814956065949522, "phrase": "derived_prediction_models"}, {"score": 0.002726740692380339, "phrase": "particular_state"}, {"score": 0.002694375425481759, "phrase": "software_organization"}, {"score": 0.0026307897899760383, "phrase": "modified_ones"}, {"score": 0.0025382066972107777, "phrase": "software_data_nature"}, {"score": 0.002468450551616404, "phrase": "model_selection"}, {"score": 0.0024488738006005133, "phrase": "data_combination"}, {"score": 0.0023532890136269986, "phrase": "existing_software_models"}, {"score": 0.0022524395393089544, "phrase": "model_generalizability"}, {"score": 0.0021645053655350703, "phrase": "crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software quality prediction", " Fault-proneness", " Decision trees", " Genetic algorithm"], "paper_abstract": "Context: How can quality of software systems be predicted before deployment? In attempting to answer this question, prediction models are advocated in several studies. The performance of such models drops dramatically, with very low accuracy, when they are used in new software development environments or in new circumstances. Objective: The main objective of this work is to circumvent the model generalizability problem. We propose a new approach that substitutes traditional ways of building prediction models which use historical data and machine learning techniques. Method: In this paper, existing models are decision trees built to predict module fault-proneness within the NASA Critical Mission Software. A genetic algorithm is developed to combine and adapt expertise extracted from existing models in order to derive a \"composite\" model that performs accurately in a given context of software development. Experimental evaluation of the approach is carried out in three different software development circumstances. Results: The results show that derived prediction models work more accurately not only for a particular state of a software organization but also for evolving and modified ones. Conclusion: Our approach is considered suitable for software data nature and at the same time superior to model selection and data combination approaches. It is then concluded that learning from existing software models (i.e., software expertise) has two immediate advantages; circumventing model generalizability and alleviating the lack of data in software-engineering. Crown Copyright (C) 2010 Published by Elsevier B.V. All rights reserved.", "paper_title": "A novel composite model approach to improve software quality prediction", "paper_id": "WOS:000283968200004"}