{"auto_keywords": [{"score": 0.030583894174739484, "phrase": "nondeterministic_choices"}, {"score": 0.00481495049065317, "phrase": "probabilistic_distributed_systems"}, {"score": 0.004769182299692333, "phrase": "formal_methods"}, {"score": 0.004460703838987562, "phrase": "software_systems"}, {"score": 0.004397230847865867, "phrase": "formal_specification"}, {"score": 0.00409310463335204, "phrase": "observed_behaviour"}, {"score": 0.003902085339580381, "phrase": "important_feature"}, {"score": 0.00386496062825374, "phrase": "formal_testing"}, {"score": 0.0033969001271637934, "phrase": "formal_testing_framework"}, {"score": 0.0032382660477699695, "phrase": "physically_distributed_interfaces"}, {"score": 0.0032074366230426727, "phrase": "called_ports"}, {"score": 0.00311669276800628, "phrase": "different_possibilities"}, {"score": 0.0030140547908298404, "phrase": "previous_work"}, {"score": 0.002859533151305368, "phrase": "different_actions"}, {"score": 0.002778604641920052, "phrase": "first_type"}, {"score": 0.002549269480908849, "phrase": "single_global_scheduler"}, {"score": 0.002512926336312949, "phrase": "second_type"}, {"score": 0.0021049977753042253, "phrase": "different_implementation_relations"}], "paper_keywords": ["Distributed systems", " Formal testing", " Probabilistic systems", " Schedulers"], "paper_abstract": "Formal methods are one of the most important approaches to increasing the confidence in the correctness of software systems. A formal specification can be used as an oracle in testing since one can determine whether an observed behaviour is allowed by the specification. This is an important feature of formal testing: behaviours of the system observed in testing are compared with the specification and ideally this comparison is automated. In this paper we study a formal testing framework to deal with systems that interact with their environment at physically distributed interfaces, called ports, and where choices between different possibilities are probabilistically quantified. Building on previous work, we introduce two families of schedulers to resolve nondeterministic choices among different actions of the system. The first type of schedulers, which we call global schedulers, resolves nondeterministic choices by representing the environment as a single global scheduler. The second type, which we call localised schedulers, models the environment as a set of schedulers with there being one scheduler for each port. We formally define the application of schedulers to systems and provide and study different implementation relations in this setting.", "paper_title": "Using schedulers to test probabilistic distributed systems", "paper_id": "WOS:000305830700017"}