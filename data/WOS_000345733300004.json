{"auto_keywords": [{"score": 0.039835166167657726, "phrase": "performance_portability"}, {"score": 0.03836998339683977, "phrase": "memory_access_patterns"}, {"score": 0.0330108166223237, "phrase": "domain_libraries"}, {"score": 0.00481495049065317, "phrase": "manycore_performance_portability"}, {"score": 0.004761850836420121, "phrase": "polymorphic_memory_access_patterns"}, {"score": 0.004683292152590589, "phrase": "manycore_revolution"}, {"score": 0.004530023871441992, "phrase": "thread_counts"}, {"score": 0.004285594361623147, "phrase": "continually_evolving_manycore_architectures"}, {"score": 0.004122351497440992, "phrase": "increasingly_finer_levels"}, {"score": 0.0038354405231002323, "phrase": "major_obstacle"}, {"score": 0.003730465168354817, "phrase": "diverse_and_conflicting_set"}, {"score": 0.0035684266744407485, "phrase": "contemporary_portable_programming_models"}, {"score": 0.0030376623293574905, "phrase": "diverse_manycore_architectures"}, {"score": 0.0029380909574836587, "phrase": "fine-grain_data_parallelism_and_memory_access_patterns"}, {"score": 0.0028260302580927856, "phrase": "kokkos'_abstractions"}, {"score": 0.002748655558322957, "phrase": "api"}, {"score": 0.0027031706928674092, "phrase": "present_performance_results"}, {"score": 0.0026732973536990373, "phrase": "unit-test_kernels"}, {"score": 0.0025713100093065645, "phrase": "incremental_strategy"}, {"score": 0.002500847203968917, "phrase": "kokkos"}, {"score": 0.0024594969044952108, "phrase": "kokkos_library"}, {"score": 0.002418829014435841, "phrase": "active_research"}, {"score": 0.0023265270905455334, "phrase": "new_generations"}, {"score": 0.00230080652063411, "phrase": "manycore_architectures"}, {"score": 0.0022253345930383257, "phrase": "growing_list"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parallel computing", " Thread parallelism", " Manycore", " GPU", " Performance portability", " Multidimensional array", " Mini-application"], "paper_abstract": "The manycore revolution can be characterized by increasing thread counts, decreasing memory per thread, and diversity of continually evolving manycore architectures. High performance computing (HPC) applications and libraries must exploit increasingly finer levels of parallelism within their codes to sustain scalability on these devices. A major obstacle to performance portability is the diverse and conflicting set of constraints on memory access patterns across devices. Contemporary portable programming models address manycore parallelism (e.g., OpenMP, OpenACC, OpenCL) but fail to address memory access patterns. The Kokkos C++ library enables applications and domain libraries to achieve performance portability on diverse manycore architectures by unifying abstractions for both fine-grain data parallelism and memory access patterns. In this paper we describe Kokkos' abstractions, summarize its application programmer interface (API), present performance results for unit-test kernels and mini-applications, and outline an incremental strategy for migrating legacy C++ codes to Kokkos. The Kokkos library is under active research and development to incorporate capabilities from new generations of manycore architectures, and to address a growing list of applications and domain libraries. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Kokkos: Enabling manycore performance portability through polymorphic memory access patterns", "paper_id": "WOS:000345733300004"}