{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "point_interfaces"}, {"score": 0.046040545801964705, "phrase": "base_code"}, {"score": 0.013617219291826828, "phrase": "independent_evolution"}, {"score": 0.004772818068176176, "phrase": "safe_and_flexible_decoupling"}, {"score": 0.004669085371587273, "phrase": "current_aspect-oriented_systems"}, {"score": 0.004257360656055417, "phrase": "important_software_engineering_properties"}, {"score": 0.004201571673071299, "phrase": "modular_reasoning"}, {"score": 0.0039333604469462356, "phrase": "novel_abstraction"}, {"score": 0.0038989120088094185, "phrase": "join_point_interface"}, {"score": 0.003780692127133743, "phrase": "aids_modular_reasoning"}, {"score": 0.003586278948128509, "phrase": "modular_type-checking_algorithm"}, {"score": 0.0034319005131102495, "phrase": "implicit_announcement"}, {"score": 0.003342471131048328, "phrase": "explicit_announcement"}, {"score": 0.0031845067058084583, "phrase": "polymorphic_dispatch"}, {"score": 0.0031565959573536194, "phrase": "join_points"}, {"score": 0.002967931416941965, "phrase": "flexible_join_point"}, {"score": 0.0028652153774536967, "phrase": "earlier_proposal"}, {"score": 0.00284009509859163, "phrase": "generic_advice"}, {"score": 0.002753891109273246, "phrase": "controlled_global_quantification"}, {"score": 0.002693919110230191, "phrase": "language_feature"}, {"score": 0.002555247330102505, "phrase": "language_design"}, {"score": 0.002434396049547248, "phrase": "typical_aspect-oriented_programming_idioms"}, {"score": 0.002339771435910601, "phrase": "open-source_extension"}, {"score": 0.002298902547676131, "phrase": "case_study"}, {"score": 0.0022787359717772976, "phrase": "existing_aspect-oriented_programs"}, {"score": 0.0021518875024104244, "phrase": "generic_interfaces"}, {"score": 0.0021049977753042253, "phrase": "global_quantification"}], "paper_keywords": ["Design", " Languages", " Aspect-oriented programming", " modularity", " typing", " interfaces", " implicit announcement", " explicit announcement", " join point polymorphism", " advice dispatch"], "paper_abstract": "In current aspect-oriented systems, aspects usually carry, through their pointcuts, explicit references to the base code. Those references are fragile and hinder important software engineering properties such as modular reasoning and independent evolution of aspects and base code. In this work, we introduce a novel abstraction called Join Point Interface, which, by design, aids modular reasoning and independent evolution by decoupling aspects from base code and by providing a modular type-checking algorithm. Join point interfaces can be used both with implicit announcement through pointcuts, and with explicit announcement, using closure join points. Join point interfaces further offer polymorphic dispatch on join points, with an advice-dispatch semantics akin to multimethods. To support flexible join point matching, we incorporate into our language an earlier proposal for generic advice, and introduce a mechanism for controlled global quantification. We motivate each language feature in detail, showing that it is necessary to obtain a language design that is both type safe and flexible enough to support typical aspect-oriented programming idioms. We have implemented join point interfaces as an open-source extension to AspectJ. A case study on existing aspect-oriented programs supports our design, and in particular shows the necessity of both generic interfaces and some mechanism for global quantification.", "paper_title": "Join Point Interfaces for Safe and Flexible Decoupling of Aspects", "paper_id": "WOS:000331615400007"}