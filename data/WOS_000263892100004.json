{"auto_keywords": [{"score": 0.04962483589994815, "phrase": "reused_framework"}, {"score": 0.046133126951992495, "phrase": "lower_defect_density"}, {"score": 0.015090245427865178, "phrase": "software_reuse"}, {"score": 0.014577052449016683, "phrase": "reused_software"}, {"score": 0.009312869816143755, "phrase": "systematic_reuse"}, {"score": 0.00481495049065317, "phrase": "defect_profiles"}, {"score": 0.004391013899148212, "phrase": "newly_built_software"}, {"score": 0.0040042529959108605, "phrase": "fixed_defects"}, {"score": 0.003916098498242888, "phrase": "high-quality_software"}, {"score": 0.003829877278269543, "phrase": "industrial_case_study"}, {"score": 0.0037935066882208235, "phrase": "large_norwegian_oil_and_gas_company"}, {"score": 0.0037455472631617442, "phrase": "reused_java_class_framework"}, {"score": 0.0036052633308076933, "phrase": "trouble_reports"}, {"score": 0.003448204564259915, "phrase": "odc"}, {"score": 0.0033829958125964877, "phrase": "qualitative_root_cause_analysis"}, {"score": 0.003361540746277092, "phrase": "rca"}, {"score": 0.0031743876179636476, "phrase": "slightly_higher_defect_density"}, {"score": 0.0030847461428168614, "phrase": "defect_densities"}, {"score": 0.002866962651131435, "phrase": "odc_and_rca_analyses"}, {"score": 0.0027419768837926885, "phrase": "solid_testing"}, {"score": 0.002707275301442925, "phrase": "lower_defect_densities"}, {"score": 0.0026815368507715, "phrase": "functional-type_defects"}, {"score": 0.002556459595882617, "phrase": "different_\"nature"}, {"score": 0.0024140251288559188, "phrase": "business_logic"}, {"score": 0.0023309080951251335, "phrase": "causal_relationship"}, {"score": 0.002166230024967046, "phrase": "improved_overall_cause-effect_model"}], "paper_keywords": ["Software reuse", " Software defect", " Empirical study"], "paper_abstract": "The benefits of software reuse have been studied for many years. Several previous studies have observed that reused software has a lower defect density than newly built software. However, few studies have investigated empirically the reasons for this phenomenon. To date, we have only the common sense observation that as software is reused over time, the fixed defects will accumulate and will result in high-quality software. This paper reports on an industrial case study in a large Norwegian Oil and Gas company, involving a reused Java class framework and two applications that use that framework. We analyzed all trouble reports from the use of the framework and the applications according to the Orthogonal Defect Classification (ODC), followed by a qualitative Root Cause Analysis (RCA). The results reveal that the framework has a much lower defect density in total than one application and a slightly higher defect density than the other. In addition, the defect densities of the most severe defects of the reused framework are similar to those of the applications that are reusing it. The results of the ODC and RCA analyses reveal that systematic reuse (i.e. clearly defined and stable requirements, better design, hesitance to change, and solid testing) lead to lower defect densities of the functional-type defects in the reused framework than in applications that are reusing it. However, the different \"nature\" of the framework and the applications (e.g. interaction with other software, number and complexity of business logic, and functionality of the software) may confound the causal relationship between systematic reuse and the lower defect density of the reused software. Using the results of the study as a basis, we present an improved overall cause-effect model between systematic reuse and lower defect density that will facilitate further studies and implementations of software reuse.", "paper_title": "A case study comparing defect profiles of a reused framework and of applications reusing it", "paper_id": "WOS:000263892100004"}