{"auto_keywords": [{"score": 0.03293601710642665, "phrase": "memory_usage"}, {"score": 0.00481495049065317, "phrase": "dynamic_memory_allocation"}, {"score": 0.0044524122425287005, "phrase": "upper_bounds"}, {"score": 0.004375613460102577, "phrase": "memory_storage"}, {"score": 0.004153041453795458, "phrase": "first_case"}, {"score": 0.003976203286249396, "phrase": "general_allocator"}, {"score": 0.0038401488612789963, "phrase": "memory_blocks"}, {"score": 0.0037087324991876727, "phrase": "available_heap_space"}, {"score": 0.003581797255879607, "phrase": "second_case"}, {"score": 0.0033699898113395328, "phrase": "address-ordered_first-fit_allocation_policy"}, {"score": 0.003170667618004276, "phrase": "upper_bound"}, {"score": 0.002931569771634119, "phrase": "systematic_approach"}, {"score": 0.002686935113435742, "phrase": "largest_fragmentation"}, {"score": 0.0025279105573394727, "phrase": "embedded_systems"}, {"score": 0.0022768346311104735, "phrase": "swapping_facility"}, {"score": 0.0021049977753042253, "phrase": "computing_systems"}], "paper_keywords": ["Dynamic memory allocation", " memory storage", " storage allocation/deallocation policies", " first-fit allocator", " garbage collection"], "paper_abstract": "In this paper, we study the upper bounds of memory storage for two different allocators. In the first case, we consider a general allocator that can allocate memory blocks anywhere in the available heap space. In the second case, a more economical allocator constrained by the address-ordered first-fit allocation policy is considered. We derive the upper bound of memory usage for all allocators and present a systematic approach to search for allocation/deallocation patterns that might lead to the largest fragmentation. These results are beneficial in embedded systems where memory usage must be reduced and predictable because of lack of swapping facility. They are also useful in other types of computing systems.", "paper_title": "Upper Bounds for Dynamic Memory Allocation", "paper_id": "WOS:000274794100004"}