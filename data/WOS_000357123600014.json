{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "type_predicates"}, {"score": 0.010503986243840626, "phrase": "object-oriented_software"}, {"score": 0.008911448812091738, "phrase": "object_orientation"}, {"score": 0.004456044928556639, "phrase": "behavioral_variants"}, {"score": 0.004342430078306461, "phrase": "traditional_procedural_design"}, {"score": 0.004297795905522757, "phrase": "explicit_type-based_conditionals"}, {"score": 0.004081385289516914, "phrase": "introductory_material"}, {"score": 0.003916098498242888, "phrase": "object-oriented_reengineering_patterns"}, {"score": 0.0030554300179552415, "phrase": "active_research_program"}, {"score": 0.0030083825666563898, "phrase": "type_systems"}, {"score": 0.0029467742734417255, "phrase": "complex_flow-sensitive_typing_approaches"}, {"score": 0.002684740763324991, "phrase": "empirical_evidence"}, {"score": 0.0024586427394152196, "phrase": "large_base"}, {"score": 0.002408265305704217, "phrase": "smalltalk_code"}, {"score": 0.002251542790734307, "phrase": "explicit_type_dispatch"}, {"score": 0.0022053994402287925, "phrase": "flow-sensitive_typing_approaches"}, {"score": 0.0021490449563443025, "phrase": "type_system"}, {"score": 0.0021049977753042253, "phrase": "dynamic_object-oriented_language"}], "paper_keywords": ["Language", " Design", " Flow-sensitive typing", " Object-oriented languages", " Type predicates"], "paper_abstract": "Object-orientation relies on polymorphism to express behavioral variants. As opposed to traditional procedural design, explicit type-based conditionals should be avoided. This message is conveyed in introductory material on object orientation, as well as in object-oriented reengineering patterns. Is this principle followed in practice? In other words, are type predicates actually used in object-oriented software, and if so, to which extent? Answering these questions will assist practitioners and researchers with providing information about the state of the practice, and informing the active research program of retrofitting type systems, clarifying whether complex flow-sensitive typing approaches are necessary. Other areas, such as refactoring and teaching object orientation, can also benefit from empirical evidence on the matter. We report on a study of the use of type predicates in a large base of over 4 million lines of Smalltalk code. Our study shows that type predicates are in fact widely used to do explicit type dispatch, suggesting that flow-sensitive typing approaches are necessary for a type system retrofitted for a dynamic object-oriented language.", "paper_title": "On the Use of Type Predicates in Object-Oriented Software: The Case of Smalltalk", "paper_id": "WOS:000357123600014"}