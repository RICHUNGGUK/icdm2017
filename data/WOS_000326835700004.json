{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "stack-based_buffer_overflow_vulnerabilities"}, {"score": 0.036250667273753374, "phrase": "safestack"}, {"score": 0.0046073860169839305, "phrase": "significant_threat"}, {"score": 0.00443308765153716, "phrase": "today's_computer_systems"}, {"score": 0.004149429072483132, "phrase": "adequate_protection"}, {"score": 0.004103942174451674, "phrase": "buffer_overflow_attacks"}, {"score": 0.004014452814186653, "phrase": "existing_solutions"}, {"score": 0.003948613642680196, "phrase": "vulnerable_program"}, {"score": 0.0038838500580958744, "phrase": "buffer_overflow"}, {"score": 0.0035755653799043, "phrase": "serious_problem"}, {"score": 0.003536346954940087, "phrase": "service-oriented_platforms"}, {"score": 0.0030808211830129304, "phrase": "memory_accesses"}, {"score": 0.0030135741897058844, "phrase": "vulnerable_buffer"}, {"score": 0.0029805015010906013, "phrase": "protected_memory_regions"}, {"score": 0.0028993944292191433, "phrase": "fundamental_and_effective_protection"}, {"score": 0.0027741761880779535, "phrase": "normal_system_execution"}, {"score": 0.0026543514413663893, "phrase": "linux_system"}, {"score": 0.0025963890234079333, "phrase": "extensive_experiments"}, {"score": 0.002286781334850213, "phrase": "runtime_patches"}, {"score": 0.002224510044064184, "phrase": "attack's_recurrence"}, {"score": 0.0021401625519713577, "phrase": "acceptable_overhead"}, {"score": 0.0021049977753042253, "phrase": "patched_applications"}], "paper_keywords": ["Software reliability", " buffer overflow vulnerability diagnosis", " attack prevention"], "paper_abstract": "Buffer overflow attacks still pose a significant threat to the security and availability of today's computer systems. Although there are a number of solutions proposed to provide adequate protection against buffer overflow attacks, most of existing solutions terminate the vulnerable program when the buffer overflow occurs, effectively rendering the program unavailable. The impact on availability is a serious problem on service-oriented platforms. This paper presents SafeStack, a system that can automatically diagnose and patch stack-based buffer overflow vulnerabilities. The key technique of our solution is to virtualize memory accesses and move the vulnerable buffer into protected memory regions, which provides a fundamental and effective protection against recurrence of the same attack without stopping normal system execution. We developed a prototype on a Linux system, and conducted extensive experiments to evaluate the effectiveness and performance of the system using a range of applications. Our experimental results showed that SafeStack can quickly generate runtime patches to successfully handle the attack's recurrence. Furthermore, SafeStack only incurs acceptable overhead for the patched applications.", "paper_title": "SafeStack: Automatically Patching Stack-Based Buffer Overflow Vulnerabilities", "paper_id": "WOS:000326835700004"}