{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "conformant_planning"}, {"score": 0.010051321827376256, "phrase": "initial_state"}, {"score": 0.008625990261755378, "phrase": "classical_planning"}, {"score": 0.005693005160779487, "phrase": "original_theory"}, {"score": 0.004605917942709477, "phrase": "classical_ai_planning"}, {"score": 0.004436116555817464, "phrase": "non-deterministic_effects"}, {"score": 0.004375928080972614, "phrase": "classical_plan"}, {"score": 0.004243460284890507, "phrase": "deterministic_actions"}, {"score": 0.004200197763119297, "phrase": "conformant_plan"}, {"score": 0.0040040425282442125, "phrase": "action_effects"}, {"score": 0.003540539868937462, "phrase": "giunchiglia"}, {"score": 0.003456827226847432, "phrase": "generate-and-test_strategy"}, {"score": 0.0032952735750239924, "phrase": "sat_solver"}, {"score": 0.003152006152091526, "phrase": "candidate_conformant_plan"}, {"score": 0.003056475095474338, "phrase": "sat_call"}, {"score": 0.002805989498127897, "phrase": "different_use"}, {"score": 0.002777341265639153, "phrase": "sat_engine"}, {"score": 0.0027584046728703297, "phrase": "conformant_plans"}, {"score": 0.002693134880651768, "phrase": "single_sat_call"}, {"score": 0.0026656357767832267, "phrase": "transformed_theory"}, {"score": 0.002549672862868133, "phrase": "action_variables"}, {"score": 0.0022007808283071133, "phrase": "resulting_compile-project-sat_planner"}, {"score": 0.002170854875902186, "phrase": "state-of-the-art_optimal_conformant_planners"}], "paper_keywords": [""], "paper_abstract": "Conformant planning is a variation of classical AI planning where the initial state is partially known and actions can have non-deterministic effects. While a classical plan must achieve the goal from a given initial state using deterministic actions, a conformant plan must achieve the goal in the presence of uncertainty in the initial state and action effects. Conformant planning is computationally harder than classical planning, and unlike classical planning, cannot be reduced polynomially to SAT (unless P = NP). Current SAT approaches to conformant planning, such as those considered by Giunchiglia and colleagues, thus follow a generate-and-test strategy: the models of the theory are generated one by one using a SAT solver (assuming a given planning horizon), and from each such model, a candidate conformant plan is extracted and tested for validity using another SAT call. This works well when the theory has few candidate plans and models, but otherwise is too inefficient. In this paper we propose a different use of a SAT engine where conformant plans are computed by means of a single SAT call over a transformed theory. This transformed theory is obtained by projecting the original theory over the action variables. This operation, while intractable, can be done efficiently provided that the original theory is compiled into d-DNNF (Darwiche 2001), a form akin to OBDDs (Bryant 1992). The experiments that are reported show that the resulting COMPILE-PROJECT-SAT planner is competitive with state-of-the-art optimal conformant planners and improves upon a planner recently reported at ICAPS-05.", "paper_title": "Mapping conformant planning into SAT through compilation and projection", "paper_id": "WOS:000242119100033"}