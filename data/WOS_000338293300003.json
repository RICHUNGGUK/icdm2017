{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "logic_programs"}, {"score": 0.0026475981474045414, "phrase": "previously_introduced_restrictions"}, {"score": 0.0025810006125483835, "phrase": "delay_primitives"}, {"score": 0.0024842242921857705, "phrase": "key_observation"}], "paper_keywords": ["floundering", " delays", " coroutining", " program analysis", " abstract interpretation", " program transformation", " declarative debugging"], "paper_abstract": "We show how logic programs with \"delays\" can be transformed to programs without delays in a way that preserves information concerning floundering (also known as deadlock). This allows a declarative (model-theoretic), bottom-up or goal-independent approach to be used for analysis and debugging of properties related to floundering. We rely on some previously introduced restrictions on delay primitives and a key observation which allows properties such as groundness to be analysed by approximating the (ground) success set.", "paper_title": "Transforming floundering into success", "paper_id": "WOS:000338293300003"}