{"auto_keywords": [{"score": 0.04969404048579106, "phrase": "spurious_results"}, {"score": 0.011629094373599085, "phrase": "structural_consistency"}, {"score": 0.008713768692145006, "phrase": "xml_keyword_search"}, {"score": 0.006064982729227269, "phrase": "schema_level"}, {"score": 0.00552909077845623, "phrase": "existing_methods"}, {"score": 0.004699731844202867, "phrase": "user-friendly_way"}, {"score": 0.004661938724774664, "phrase": "xml_data"}, {"score": 0.004550364809125859, "phrase": "high_precision"}, {"score": 0.00420862159094166, "phrase": "lca"}, {"score": 0.004163531770714004, "phrase": "slca"}, {"score": 0.004141168931204831, "phrase": "mlca."}, {"score": 0.004031137018534522, "phrase": "fundamental_cause"}, {"score": 0.003861111257449031, "phrase": "global_examination"}, {"score": 0.003648747692496864, "phrase": "novel_keyword_search_method"}, {"score": 0.003570944138646427, "phrase": "new_concept"}, {"score": 0.003374485885600879, "phrase": "ancestor-descendant_relationship"}, {"score": 0.0032936225456909676, "phrase": "naive_solution"}, {"score": 0.0030295940341691203, "phrase": "existing_lca-based_ones"}, {"score": 0.0029890310448474266, "phrase": "structural_consistency_checking"}, {"score": 0.0029173773821308843, "phrase": "query_results"}, {"score": 0.0028168907800682134, "phrase": "challenging_problem"}, {"score": 0.0027941961109477997, "phrase": "schema-level_query_results"}, {"score": 0.0027419484454788722, "phrase": "instance-level_query_results"}, {"score": 0.0027198559127718943, "phrase": "serious_false_dismissal"}, {"score": 0.0026834288199353066, "phrase": "comprehensive_and_practical_solution"}, {"score": 0.0025631777675416516, "phrase": "false_dismissal"}, {"score": 0.002522032190962841, "phrase": "relevance-feedback-based_solution"}, {"score": 0.0024748609903955656, "phrase": "low_recall"}, {"score": 0.0024155032549995686, "phrase": "user's_intention"}, {"score": 0.0023385630742192667, "phrase": "full-fledged_object-relational_dbms_odysseus"}, {"score": 0.0023197131534778417, "phrase": "kaist._experimental"}, {"score": 0.0023010148215491908, "phrase": "real_and_synthetic_data_sets"}, {"score": 0.002156741753559494, "phrase": "comparable_recall"}, {"score": 0.0021049977753042253, "phrase": "query_performance"}], "paper_keywords": ["XML", " Keyword search", " Spurious results", " Structural consistency", " Structural summary", " Odysseus DBMS"], "paper_abstract": "XML keyword search is a user-friendly way to query XML data using only keywords. In XML keyword search, to achieve high precision without sacrificing recall, it is important to remove spurious results not intended by the user. Efforts to eliminate spurious results have enjoyed some success using the concepts of LCA or its variants, SLCA and MLCA. However, existing methods still could find many spurious results. The fundamental cause for the occurrence of spurious results is that the existing methods try to eliminate spurious results locally without global examination of all the query results and, accordingly, some spurious results are not consistently eliminated. In this paper, we propose a novel keyword search method that removes spurious results consistently by exploiting the new concept of structural consistency. We define structural consistency as a property that is preserved if there is no query result having an ancestor-descendant relationship at the schema level with any other query results. A naive solution to obtain structural consistency would be to compute all the LCAs (or variants) and then to remove spurious results according to structural consistency. Obviously, this approach would always be slower than existing LCA-based ones. To speed up structural consistency checking, we must be able to examine the query results at the schema level without generating all the LCAs. However, this is a challenging problem since the schema-level query results do not homomorphically map to the instance-level query results, causing serious false dismissal. We present a comprehensive and practical solution to this problem and formally prove that this solution preserves structural consistency at the schema level without incurring false dismissal. We also propose a relevance-feedback-based solution for the problem where our method has low recall, which occurs when it is not the user's intention to find more specific results. This solution has been prototyped in a full-fledged object-relational DBMS Odysseus developed at KAIST. Experimental results using real and synthetic data sets show that, compared with the state-of-the-art methods, our solution significantly (1) improves precision while providing comparable recall for most queries and (2) enhances the query performance by removing spurious results early.", "paper_title": "Structural consistency: enabling XML keyword search to eliminate spurious results consistently", "paper_id": "WOS:000280599600003"}