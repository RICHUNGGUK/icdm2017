{"auto_keywords": [{"score": 0.0399501531664237, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "considerable_effort"}, {"score": 0.004613175917207636, "phrase": "automated_test_data_generation_tools"}, {"score": 0.004382127278148236, "phrase": "test_case"}, {"score": 0.004326188427877999, "phrase": "unexpected_results"}, {"score": 0.004289291421348352, "phrase": "manual_effort"}, {"score": 0.004127094600862448, "phrase": "inputs_testers"}, {"score": 0.003522027550662857, "phrase": "search-based_techniques"}, {"score": 0.003477029725200912, "phrase": "evolution_strategies"}, {"score": 0.003447349911141396, "phrase": "subset_selection"}, {"score": 0.0033454448643854525, "phrase": "input_domain"}, {"score": 0.0029925402963843282, "phrase": "finding_capability"}, {"score": 0.002904040426340639, "phrase": "mutation_analysis"}, {"score": 0.0027114323601885666, "phrase": "resulting_subdomains"}, {"score": 0.002665305036900055, "phrase": "random_testing"}, {"score": 0.002477837342313456, "phrase": "optimised_subdomains"}, {"score": 0.0024148618915672353, "phrase": "starting_point"}, {"score": 0.0023942269247089277, "phrase": "program_analysis"}, {"score": 0.002373767863833987, "phrase": "regression_testing"}, {"score": 0.002283839204519042, "phrase": "human_test_engineer"}, {"score": 0.0021599099979586946, "phrase": "test_and_design_further_highly_efficient_test_suites"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Search based testing", " Input distributions", " Evolution strategy"], "paper_abstract": "Considerable effort is required to test software thoroughly. Even with automated test data generation tools, it is still necessary to evaluate the output of each test case and identify unexpected results. Manual effort can be reduced by restricting the range of inputs testers need to consider to regions that are more likely to reveal faults, thus reducing the number of test cases overall, and therefore reducing the effort needed to create oracles. This article describes and evaluates search-based techniques, using evolution strategies and subset selection, for identifying regions of the input domain (known as subdomains) such that test cases sampled at random from within these regions can be used efficiently to find faults. The fault finding capability of each subdomain is evaluated using mutation analysis, a technique that is based on faults programmers are likely to make. The resulting subdomains kill more mutants than random testing (up to six times as many in one case) with the same number or fewer test cases. Optimised subdomains can be used as a starting point for program analysis and regression testing. They can easily be comprehended by a human test engineer, so may be used to provide information about the software under test and design further highly efficient test suites. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Subdomain-based test data generation", "paper_id": "WOS:000351971500022"}