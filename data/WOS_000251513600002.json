{"auto_keywords": [{"score": 0.04943159058562835, "phrase": "asynchronous_web_server"}, {"score": 0.04774494627841505, "phrase": "web_server"}, {"score": 0.04512022970606561, "phrase": "asynchronous_mechanisms"}, {"score": 0.040988944830941225, "phrase": "proactor_pattern"}, {"score": 0.029075000270154094, "phrase": "performance_model"}, {"score": 0.00481495049065317, "phrase": "performance_analysis"}, {"score": 0.004539005582217309, "phrase": "synchronous_or_asynchronous_mechanisms"}, {"score": 0.004457309741979921, "phrase": "underlying_operating_system"}, {"score": 0.004357245559948974, "phrase": "synchronous_mechanisms"}, {"score": 0.003716724243777879, "phrase": "operating_system"}, {"score": 0.003584025547693833, "phrase": "high_performance_web_server"}, {"score": 0.003535489842686145, "phrase": "performance_expectations"}, {"score": 0.0031271133933467575, "phrase": "design-time_performance_analysis"}, {"score": 0.0030429511467945525, "phrase": "life_cycle"}, {"score": 0.002988101395789399, "phrase": "informed_configuration"}, {"score": 0.0029076695661972114, "phrase": "model-based_approach"}, {"score": 0.0024797165063413233, "phrase": "srn"}, {"score": 0.0024129269611844794, "phrase": "model_decomposition_strategy"}, {"score": 0.0022847009758393405, "phrase": "practical_web_servers"}, {"score": 0.0021436720821474973, "phrase": "key_provisioning"}, {"score": 0.002124247104243502, "phrase": "configuration_decisions"}], "paper_keywords": ["Proactor pattern", " middleware", " performance", " stochastic reward nets", " web server"], "paper_abstract": "Concurrency can be implemented in a Web server using synchronous or asynchronous mechanisms provided by the underlying operating system. Compared to the synchronous mechanisms, asynchronous mechanisms are attractive because they provide the benefit of concurrency while alleviating much of them overhead and complexity of multi-threading. The Proactor pattern in middleware, which encapsulates the asynchronous mechanisms provided by the operating system, can be used to implement a high performance Web server. The performance expectations imposed on a Web server make it necessary to analyze its performance prior to deployment. While the performance of a server can be measured after implementation, design-time performance analysis, conducted early in the life cycle, can enable informed configuration and provisioning choices. A model-based approach can be used for such design-time performance analysis. In this paper we present a performance model of the architecture of an asynchronous Web server which uses the Proactor pattern. We discuss the implementation of the performance model using the Stochastic Reward Net (SRN) modeling paradigm. A model decomposition strategy along with its SRN implementation to facilitate the application of the model to practical Web servers is then described. We demonstrate the use of the model to guide key provisioning and configuration decisions with several examples.", "paper_title": "An analytical approach to performance analysis of an asynchronous web server", "paper_id": "WOS:000251513600002"}