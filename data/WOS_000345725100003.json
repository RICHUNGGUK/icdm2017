{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linguistic_abstraction"}, {"score": 0.0034437574674180365, "phrase": "systematic_application"}, {"score": 0.0029447150254434842, "phrase": "higher-level_meta_languages"}, {"score": 0.0026330667130432506, "phrase": "sdf"}, {"score": 0.002574788205067473, "phrase": "stratego"}, {"score": 0.0025178072071268534, "phrase": "spoofax"}, {"score": 0.0024346858809238766, "phrase": "webdsl"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Linguistic abstraction", " Programming languages", " Domain-specific languages", " Software understanding"], "paper_abstract": "In this essay, I argue that linguistic abstraction should be used systematically as a tool to capture our emerging understanding of domains of computation. Moreover, to enable that systematic application, we need to capture our understanding of the domain of linguistic abstraction itself in higher-level meta languages. The argument is illustrated with examples from the SDF, Stratego, Spoofax, and WebDSL projects in which I explore these ideas. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Understanding software through linguistic abstraction", "paper_id": "WOS:000345725100003"}