{"auto_keywords": [{"score": 0.04660802533264657, "phrase": "oracle_functions"}, {"score": 0.00481495049065317, "phrase": "testing_model_transformations"}, {"score": 0.004579780586951551, "phrase": "appropriate_input_test_models"}, {"score": 0.004312622975366676, "phrase": "input_models"}, {"score": 0.004184921610672245, "phrase": "source_meta-model"}, {"score": 0.004122490120202936, "phrase": "transformation_implementation_code"}, {"score": 0.00396050388346298, "phrase": "query_or_graph_languages"}, {"score": 0.003459191419478298, "phrase": "generated_input_models"}, {"score": 0.003240895431893263, "phrase": "formal_specification_language"}, {"score": 0.0031925019616678217, "phrase": "declarative_formulation"}, {"score": 0.0031606404966938568, "phrase": "transformation_properties"}, {"score": 0.0029169007179202164, "phrase": "partial_oracle_functions"}, {"score": 0.002873331232538783, "phrase": "transformation_testing"}, {"score": 0.0027054473441439422, "phrase": "automated_generation"}, {"score": 0.002678433668156678, "phrase": "input_test_models"}, {"score": 0.0026517454396274673, "phrase": "sat"}, {"score": 0.0025989960809479104, "phrase": "testing_process"}, {"score": 0.0025219085140220773, "phrase": "generated_models"}, {"score": 0.002447101794397243, "phrase": "transformation_requirements"}], "paper_keywords": ["Model transformation", " Model transformation specification", " Model transformation testing", " Model finding", " Test oracle"], "paper_abstract": "Testing model transformations poses several challenges, among them the automatic generation of appropriate input test models and the specification of oracle functions. Most approaches for the generation of input models ensure a certain coverage of the source meta-model or the transformation implementation code, whereas oracle functions are frequently defined using query or graph languages. However, these two tasks are usually performed independently regardless of their common purpose, and sometimes, there is a gap between the properties exhibited by the generated input models and those considered by the transformations. Recently, we proposed a formal specification language for the declarative formulation of transformation properties (by means of invariants, pre-, and postconditions) from which we generated partial oracle functions used for transformation testing. Here, we extend the usage of our specification language for the automated generation of input test models by SAT solving. The testing process becomes more intentional because the generated models ensure a certain coverage of the transformation requirements. Moreover, we use the same specification to consistently derive both the input test models and the oracle functions. A set of experiments is presented, aimed at measuring the efficacy of our technique.", "paper_title": "Specification-driven model transformation testing", "paper_id": "WOS:000354094400006"}