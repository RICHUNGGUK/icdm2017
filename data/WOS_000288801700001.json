{"auto_keywords": [{"score": 0.03721265554141775, "phrase": "multiple_memory_banks"}, {"score": 0.03170047508375886, "phrase": "dynamic_memory_analysis"}, {"score": 0.00481495049065317, "phrase": "static_and_dynamic_array_detection"}, {"score": 0.004645057834614705, "phrase": "multiple_memory_ports"}, {"score": 0.004546000131069232, "phrase": "high-level_synthesis"}, {"score": 0.004481132747216135, "phrase": "binary_synthesis"}, {"score": 0.0042920078348374375, "phrase": "compiled_applications"}, {"score": 0.0041703614123283165, "phrase": "source_code"}, {"score": 0.003690527690610707, "phrase": "multiple_internal_and_external_memory_banks"}, {"score": 0.002889672003089062, "phrase": "improved_static_memory_analysis"}, {"score": 0.0024311346712789553, "phrase": "synthesized_code"}, {"score": 0.00232832698253493, "phrase": "proposed_technique"}], "paper_keywords": ["Realtime-systems", " High-level synthesis"], "paper_abstract": "In High-Level Synthesis, Binary Synthesis is a method for synthesizing compiled applications for which the source code is not available. One of the advantages of FPGAs over processors is the availability of multiple internal and external memory banks. Binary synthesis tools use multiple memory banks if they are able to recover data-structures from the binary. In this work we improve the recovery of data-structures by introducing dynamic memory analysis and combining it with improved static memory analysis. We show that many applications can only be synthesized using dynamic memory analysis. We present two FPGA based architectures for implementing the bound-checking and recovery for the synthesized code. Our experiments show that the proposed technique accelerates the execution of applications which use multiple memory banks concurrently. We demonstrate that many binary applications indeed benefit from this technique.", "paper_title": "Combining static and dynamic array detection for binary synthesis with multiple memory ports", "paper_id": "WOS:000288801700001"}