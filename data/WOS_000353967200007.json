{"auto_keywords": [{"score": 0.04898689815940368, "phrase": "randomized_encodings"}, {"score": 0.03417062918656798, "phrase": "online_rate"}, {"score": 0.011385702416340395, "phrase": "online_part"}, {"score": 0.00481495049065317, "phrase": "encoding_functions"}, {"score": 0.004792779140352901, "phrase": "constant_online_rate"}, {"score": 0.004715976515113203, "phrase": "circuit_keys."}, {"score": 0.0046083786662148955, "phrase": "\"complex\"_function"}, {"score": 0.004555499634179394, "phrase": "\"simpler\"_randomized_mapping"}, {"score": 0.004231089088705995, "phrase": "low_online_complexity"}, {"score": 0.004124971788093851, "phrase": "randomized_encoding"}, {"score": 0.003920623646381383, "phrase": "input_x."}, {"score": 0.003734979290204709, "phrase": "online_complexity"}, {"score": 0.003541689414992537, "phrase": "f._yao's_garbled_circuit_construction"}, {"score": 0.0034052594710793664, "phrase": "encryption_keys"}, {"score": 0.003335165365023837, "phrase": "vertical_bar"}, {"score": 0.003274067697478726, "phrase": "security_parameter"}, {"score": 0.0031333949463567554, "phrase": "security_parameter_kappa"}, {"score": 0.0029642838574678526, "phrase": "polynomial-time_computable_function"}, {"score": 0.0028107659139347103, "phrase": "nearly_linear_online_computation"}, {"score": 0.002714943351733626, "phrase": "n-bit_string"}, {"score": 0.0026961733945715643, "phrase": "single_encryption_key"}, {"score": 0.002562424775862458, "phrase": "rsa_assumption"}, {"score": 0.0024865237976623286, "phrase": "arithmetic_formulas"}, {"score": 0.0024352948008307795, "phrase": "arithmetic_operations"}, {"score": 0.0023576901647772213, "phrase": "efficiency_improvements"}, {"score": 0.0022458849724980904, "phrase": "secure_multiparty_computation"}, {"score": 0.0022303506319305394, "phrase": "noninteractive_verifiable_computation"}, {"score": 0.0022149235007885826, "phrase": "preprocessing_model"}, {"score": 0.0021843879253500894, "phrase": "first_time"}, {"score": 0.002169278022843738, "phrase": "optimal_online_communication_complexity"}, {"score": 0.0021443262599352996, "phrase": "noninteractive_zero-knowledge_proofs"}, {"score": 0.002119660890894334, "phrase": "online_communication"}, {"score": 0.0021049977753042253, "phrase": "prover's_online_computation"}], "paper_keywords": ["garbled circuits", " randomized encodings", " cryptography", " secure multiparty computation", " verifiable computation"], "paper_abstract": "Randomized encodings of functions can be used to replace a \"complex\" function f(x) by a \"simpler\" randomized mapping (f) over cap (x; r) whose output distribution on an input x encodes the value of f(x) and hides any other information about x. One desirable feature of randomized encodings is low online complexity. That is, the goal is to obtain a randomized encoding (f) over cap of f in which most of the output can be precomputed and published before seeing the input x. When the input x is available, it remains to publish only a short string (x) over cap, where the online complexity of computing (x) over cap is independent of (and is typically much smaller than) the complexity of computing f. Yao's garbled circuit construction gives rise to such randomized encodings in which the online part (x) over cap consists of n encryption keys of length kappa each, where n = vertical bar x vertical bar and kappa is a security parameter. Thus, the online rate vertical bar(x) over cap vertical bar/vertical bar x vertical bar of this encoding is proportional to the security parameter kappa. In this paper, we show that the online rate can be dramatically improved. Specifically, we show how to encode any polynomial-time computable function f : {0, 1}(n) -> {0, 1}(m(n)) with online rate of 1 + o(1) and with nearly linear online computation. More concretely, the online part (x) over cap consists of an n-bit string and a single encryption key. These constructions can be based on the decisional DiffieHellman (DDH) assumption, the learning with errors (LWE) assumption, or the RSA assumption. We also present a variant of this result which applies to arithmetic formulas, where the encoding only makes use of arithmetic operations, as well as several negative results which complement our positive results. Our positive results can lead to efficiency improvements in most contexts where randomized encodings of functions are used. We demonstrate this by presenting several concrete applications. These include protocols for secure multiparty computation and for noninteractive verifiable computation in the preprocessing model which achieve, for the first time, an optimal online communication complexity, as well as noninteractive zero-knowledge proofs which simultaneously minimize the online communication and the prover's online computation.", "paper_title": "ENCODING FUNCTIONS WITH CONSTANT ONLINE RATE, OR HOW TO COMPRESS GARBLED CIRCUIT KEYS", "paper_id": "WOS:000353967200007"}