{"auto_keywords": [{"score": 0.03484552829108914, "phrase": "test_data"}, {"score": 0.024671313533455367, "phrase": "gast"}, {"score": 0.00481495049065317, "phrase": "computer_systems"}, {"score": 0.004457309741979921, "phrase": "high_quality_software"}, {"score": 0.00334780964309978, "phrase": "automatical_specification"}, {"score": 0.0033326252993345685, "phrase": "based_test_tool"}, {"score": 0.0032429499567088113, "phrase": "associated_tests"}, {"score": 0.003170060683860338, "phrase": "fully_automatically_verdict"}, {"score": 0.0031129269142224194, "phrase": "formal_specification"}, {"score": 0.0026427848602443293, "phrase": "current_specification"}, {"score": 0.0026069623057065664, "phrase": "automatic_testing"}, {"score": 0.0024572448003065423, "phrase": "functional_programming_language"}, {"score": 0.0023802126605244438, "phrase": "model_properties"}, {"score": 0.002326669201839705, "phrase": "automatic_test_system"}, {"score": 0.0022951216874671516, "phrase": "logical_properties"}, {"score": 0.0022743274702883456, "phrase": "function_arguments"}, {"score": 0.0022231606165229235, "phrase": "single_function_call"}, {"score": 0.0021049977753042253, "phrase": "internal_state"}], "paper_keywords": [""], "paper_abstract": "Although computer systems penetrate all facets of society, the software running those systems may contain many errors. Producing high quality software appears to be difficult and very expensive. Even determining the quality of software is not easy. Testing is by far the most used way to estimate the quality of software. Testing itself is not easy and time consuming. In order to reduce the costs and increase the quality and speed of testing, testing should be automated itself. An automatical specification based test tool generates test data, executes the associated tests, and makes a fully automatically verdict based on a formal specification. Advantages of this approach are that one specifies properties instead of instances of these properties, test data are derived automatically instead of manually, the tests performed are always up to date with the current specification, and automatic testing is fast and accurate. We will show that functions in a functional programming language can be used very well to model properties. One branch of the automatic test system GAST handles logical properties relating function arguments and results of a single function call. The other branch of GAST handles specifications of systems with an internal state.", "paper_title": "Fully automatic testing with functions as specifications", "paper_id": "WOS:000241443300002"}