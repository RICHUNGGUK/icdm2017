{"auto_keywords": [{"score": 0.032289029853923026, "phrase": "sdpara"}, {"score": 0.00481495049065317, "phrase": "semidefinite_programming_problem"}, {"score": 0.004774530554776604, "phrase": "sparse_schur_complement_matrix"}, {"score": 0.0047145329604366395, "phrase": "semidefinite_programming"}, {"score": 0.004500891637057374, "phrase": "mathematical_optimization"}, {"score": 0.004463275985286523, "phrase": "sdp"}, {"score": 0.004406994912939125, "phrase": "effective_computation_framework"}, {"score": 0.004189523950071494, "phrase": "large-scale_sdp"}, {"score": 0.004050514095922329, "phrase": "single_processor"}, {"score": 0.003965975628742746, "phrase": "computation_time"}, {"score": 0.003932654396285872, "phrase": "available_memory"}, {"score": 0.003850566273995209, "phrase": "programming_algorithm"}, {"score": 0.0037701851296383405, "phrase": "yamashita_et_al"}, {"score": 0.0035240305920962766, "phrase": "general_sdps"}, {"score": 0.003421437601439154, "phrase": "parallel_implementation"}, {"score": 0.003335873298309004, "phrase": "sparse_sdps"}, {"score": 0.0032524418285459324, "phrase": "polynomial_optimization_problems"}, {"score": 0.0031845067058084583, "phrase": "sensor_network_localization"}, {"score": 0.0029890721584351684, "phrase": "sparse_schur_complement_matrices"}, {"score": 0.002770303757304004, "phrase": "scm"}, {"score": 0.0027123819773059127, "phrase": "new_parallel_implementation"}, {"score": 0.0026782279715171866, "phrase": "formula-cost-based_distribution"}, {"score": 0.002600194073758015, "phrase": "dense_cholesky_factorization"}, {"score": 0.002450864311898833, "phrase": "sparse_scms"}, {"score": 0.0024097920845706795, "phrase": "parallel_computing_systems"}, {"score": 0.0023003498123420237, "phrase": "new_sdpara"}, {"score": 0.002280990744438186, "phrase": "considerable_scalability"}, {"score": 0.002195866991284673, "phrase": "extremely_large-scale_sdps"}], "paper_keywords": ["Algorithms", " Performance", " Semidefinite programming"], "paper_abstract": "A SemiDefinite Programming (SDP) problem is one of the most central problems in mathematical optimization. SDP provides an effective computation framework for many research fields. Some applications, however, require solving a large-scale SDP whose size exceeds the capacity of a single processor both in terms of computation time and available memory. SDPARA (SemiDefinite Programming Algorithm paRAllel package) [Yamashita et al. 2003b] was designed to solve such large-scale SDPs. Its parallel performance is outstanding for general SDPs in most cases. However, the parallel implementation is less successful for some sparse SDPs obtained from applications such as Polynomial Optimization Problems (POPs) or Sensor Network Localization (SNL) problems, since this version of SDPARA cannot directly handle sparse Schur Complement Matrices (SCMs). In this article we improve SDPARA by focusing on the sparsity of the SCM and we propose a new parallel implementation using the formula-cost-based distribution along with a replacement of the dense Cholesky factorization. We verify numerically that these features are key to solving SDPs with sparse SCMs more quickly on parallel computing systems. The performance is further enhanced by multithreading and the new SDPARA attains considerable scalability in general. It also finds solutions for extremely large-scale SDPs arising from POPs which cannot be obtained by other solvers.", "paper_title": "Algorithm 925: Parallel Solver for Semidefinite Programming Problem having Sparse Schur Complement Matrix", "paper_id": "WOS:000312211500006"}