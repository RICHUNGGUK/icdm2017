{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_space_exploration"}, {"score": 0.04889532068804289, "phrase": "gnss_receivers"}, {"score": 0.0462368381299012, "phrase": "floating_point_arithmetic"}, {"score": 0.04514008383848609, "phrase": "trigonometric_functions"}, {"score": 0.004485200522202792, "phrase": "signal_processing_domain"}, {"score": 0.004266067096140677, "phrase": "state-of-the-art_digital_signal_processors"}, {"score": 0.004040688646993605, "phrase": "mobile_applications"}, {"score": 0.0038112201846057445, "phrase": "required_processing_cycles"}, {"score": 0.0037480753312398754, "phrase": "dedicated_hardware_implementation"}, {"score": 0.003265365666305185, "phrase": "high_level_programming_language_leading"}, {"score": 0.0031579997262619758, "phrase": "reduced_performance"}, {"score": 0.00300351371036355, "phrase": "attached_floating_point_co-processor"}, {"score": 0.00290473242917264, "phrase": "energy_costs"}, {"score": 0.0026941587813581252, "phrase": "asip's_software_libraries"}, {"score": 0.0026494723416072316, "phrase": "seamless_integration"}, {"score": 0.0026164433143193015, "phrase": "co-processor_instructions"}, {"score": 0.002530359917257626, "phrase": "application_development"}, {"score": 0.002509284173541882, "phrase": "power_consumption"}, {"score": 0.0024883835349005863, "phrase": "required_silicon_area"}, {"score": 0.00241658945942583, "phrase": "application_specific_subset"}, {"score": 0.0023964590500856887, "phrase": "supported_co-processor_functions"}, {"score": 0.002346861891137455, "phrase": "co-processor's_datapath_bit_width"}, {"score": 0.0022696277881969896, "phrase": "area_and_power_figures"}, {"score": 0.0022041312401435346, "phrase": "detailed_analysis"}, {"score": 0.0021766418372878835, "phrase": "presented_architecture"}, {"score": 0.0021049977753042253, "phrase": "promising_configurations"}], "paper_keywords": ["ASIP", " Application specific co-processor", " Global Positioning System receiver", " CORDIC", " Floating point"], "paper_abstract": "The development of algorithms from the communication and the signal processing domain often requires floating point arithmetic as well as support for trigonometric functions. While state-of-the-art digital signal processors offer hardware support for this kind of functions, embedded processors for mobile applications emulate floating point arithmetic and trigonometric functions in software. This emulation increases the number of required processing cycles compared to a dedicated hardware implementation. During development and implementation of ASIPs another problem with the emulation of these instructions arises. As the emulation has to be very flexible (e. g. variable operand bit width) emulation is carried out generally in a high level programming language leading to increased flexibility at the cost of reduced performance. This paper presents the design space exploration for an ASIP with an attached floating point co-processor in terms of performance and area and energy costs. To integrate the co-processor instructions, the ASIP's architecture description is modified and software development tools (e. g. assembler, linker and compiler) are adapted. Additionally, the ASIP's software libraries allow for a seamless integration of the co-processor instructions and enable ease of use for the application development. Power consumption and required silicon area can be decreased by choosing an application specific subset of supported co-processor functions and reduction of the co-processor's datapath bit width. The presented ASIP/co-processor architecture is functionally verified and area and power figures are derived for various configurations. A detailed analysis of the presented architecture used as a platform for GNSS receivers reveals promising configurations.", "paper_title": "Design Space Exploration for an ASIP/Co-Processor Architecture used in GNSS Receivers", "paper_id": "WOS:000273164400005"}