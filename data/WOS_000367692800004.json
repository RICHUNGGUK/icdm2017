{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "bottom-up_evaluation"}, {"score": 0.049285156489238265, "phrase": "function_symbols"}, {"score": 0.014664207048847001, "phrase": "logic_programs"}, {"score": 0.014567400162254157, "phrase": "complex_terms"}, {"score": 0.013320545524975682, "phrase": "general_case"}, {"score": 0.004610058444728656, "phrase": "increasing_interest"}, {"score": 0.004282900153232246, "phrase": "ground_instantiation"}, {"score": 0.00412809672402551, "phrase": "evaluation_procedure"}, {"score": 0.003952316497572257, "phrase": "program_termination_problem"}, {"score": 0.00368397861425962, "phrase": "current_conditions"}, {"score": 0.0036107002958650344, "phrase": "even_simple_programs"}, {"score": 0.003503497128638099, "phrase": "new_decidable_criteria"}, {"score": 0.003331828027460222, "phrase": "program_structure"}, {"score": 0.0031579462920888132, "phrase": "extended_version"}, {"score": 0.003126365132352301, "phrase": "argument_graph"}, {"score": 0.00306414423737093, "phrase": "resulting_criterion"}, {"score": 0.002953261517737546, "phrase": "decidable_criteria"}, {"score": 0.0026977641744883826, "phrase": "so-called_safety_function"}, {"score": 0.0024396547357855777, "phrase": "proposed_criteria"}, {"score": 0.002375087848055933, "phrase": "safety_criterion"}, {"score": 0.0023199918653986342, "phrase": "relevant_classes"}, {"score": 0.0022890828779208016, "phrase": "bound_queries"}, {"score": 0.002133426416881756, "phrase": "k-safe_class"}], "paper_keywords": ["Logic programming with function symbols", " bottom-up execution", " program termination", " stable models"], "paper_abstract": "Recently, there has been an increasing interest in the bottom-up evaluation of the semantics of logic programs with complex terms. The presence of function symbols in the program may render the ground instantiation infinite, and finiteness of models and termination of the evaluation procedure, in the general case, are not guaranteed anymore. Since the program termination problem is undecidable in the general case, several decidable criteria (called program termination criteria) have been recently proposed. However, current conditions are not able to identify even simple programs, whose bottom-up execution always terminates. The paper introduces new decidable criteria for checking termination of logic programs with function symbols under bottom-up evaluation, by deeply analyzing the program structure. First, we analyze the propagation of complex terms among arguments by means of the extended version of the argument graph called propagation graph. The resulting criterion, called G-acyclicity, generalizes most of the decidable criteria proposed so far. Next, we study how rules may activate each other and define a more powerful criterion, called safety. This criterion uses the so-called safety function able to analyze how rules may activate each other and how the presence of some arguments in a rule limits its activation. We also study the application of the proposed criteria to bound queries and show that the safety criterion is well-suited to identify relevant classes of programs and bound queries. Finally, we propose a hierarchy of classes of terminating programs, called k-safety, where the k-safe class strictly includes the (k-1)-safe class.", "paper_title": "Checking termination of bottom-up evaluation of logic programs with function symbols", "paper_id": "WOS:000367692800004"}