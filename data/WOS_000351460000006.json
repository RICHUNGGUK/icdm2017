{"auto_keywords": [{"score": 0.033961708538626435, "phrase": "mi"}, {"score": 0.03300046323192103, "phrase": "rose"}, {"score": 0.01571919876322481, "phrase": "view_histories"}, {"score": 0.004767826806287385, "phrase": "edit_recommendations"}, {"score": 0.004721162131188487, "phrase": "recommendation_systems"}, {"score": 0.004606479650820579, "phrase": "developer_productivity"}, {"score": 0.004385367803204002, "phrase": "association_rules"}, {"score": 0.004342430078306461, "phrase": "software_revision_histories"}, {"score": 0.004236908273106904, "phrase": "coarse-grained_rules"}, {"score": 0.0041136473765874815, "phrase": "low_accuracy"}, {"score": 0.0036733470451885465, "phrase": "finer-grained_association_rules"}, {"score": 0.0033288399506044763, "phrase": "additional_context"}, {"score": 0.003296212583539166, "phrase": "fine-grained_association_rules"}, {"score": 0.002914288956035066, "phrase": "comparative_simulation"}, {"score": 0.0028154895878702633, "phrase": "interaction_histories"}, {"score": 0.0025892330566358503, "phrase": "significantly_higher_recommendation_accuracy"}], "paper_keywords": ["Programming environments/construction tools", " interactive environments", " software maintenance", " data mining", " association rules", " programmer interaction histories"], "paper_abstract": "Recommendation systems are intended to increase developer productivity by recommending files to edit. These systems mine association rules in software revision histories. However, mining coarse-grained rules using only edit histories produces recommendations with low accuracy, and can only produce recommendations after a developer edits a file. In this work, we explore the use of finer-grained association rules, based on the insight that view histories help characterize the contexts of files to edit. To leverage this additional context and fine-grained association rules, we have developed MI, a recommendation system extending ROSE, an existing edit-based recommendation system. We then conducted a comparative simulation of ROSE and MI using the interaction histories stored in the Eclipse Bugzilla system. The simulation demonstrates that MI predicts the files to edit with significantly higher recommendation accuracy than ROSE (about 63 over 35 percent), and makes recommendations earlier, often before developers begin editing. Our results clearly demonstrate the value of considering both views and edits in systems to recommend files to edit, and results in more accurate, earlier, and more flexible recommendations.", "paper_title": "The Impact of View Histories on Edit Recommendations", "paper_id": "WOS:000351460000006"}