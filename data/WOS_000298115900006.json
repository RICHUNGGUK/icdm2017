{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "psl_safety_properties"}, {"score": 0.049584128839210984, "phrase": "safety_properties"}, {"score": 0.004691465925553365, "phrase": "important_class"}, {"score": 0.004523865550323285, "phrase": "industrial_use"}, {"score": 0.004477083974172596, "phrase": "model_checking"}, {"score": 0.0040771431404398855, "phrase": "efficient_approach"}, {"score": 0.004034962424068988, "phrase": "model_check_safety_properties"}, {"score": 0.003771185758226876, "phrase": "industrial_property_specification_language"}, {"score": 0.003580032420161922, "phrase": "sound_but_incomplete_bug-hunting_tool"}, {"score": 0.00331125524068286, "phrase": "exactly_the_finite_counterexamples"}, {"score": 0.0032430426853131346, "phrase": "informative_bad_prefixes"}, {"score": 0.0031928040608991543, "phrase": "psl_formulae"}, {"score": 0.0031107911390188055, "phrase": "presented_technique"}, {"score": 0.0030308784612749647, "phrase": "temporal_testers"}, {"score": 0.0029839180083069132, "phrase": "pnueli"}, {"score": 0.0028178463431115562, "phrase": "proposed_approach"}, {"score": 0.0027454383581457555, "phrase": "finite_counterexamples"}, {"score": 0.002674885993329912, "phrase": "new_approach"}, {"score": 0.0026061419474030633, "phrase": "larger_syntactic_subset"}, {"score": 0.0025524176761139413, "phrase": "earlier_translations"}, {"score": 0.0025259712348798323, "phrase": "psl_safety_subsets"}, {"score": 0.0024103044278902916, "phrase": "open_source"}, {"score": 0.0023361440016375972, "phrase": "experimental_results"}, {"score": 0.0022524959504997303, "phrase": "quite_competitive_model_checking_approach"}, {"score": 0.0021049977753042253, "phrase": "psl_model_checking"}], "paper_keywords": [""], "paper_abstract": "Safety properties are an important class of properties, as in the industrial use of model checking, a large majority of the properties to be checked are safety properties. This work presents an efficient approach to model check safety properties expressed in PSL (IEEE Std 1850 Property Specification Language), an industrial property specification language. The approach can also be used as a sound but incomplete bug-hunting tool for general (non-safety) PSL properties, and it will detect exactly the finite counterexamples that are the informative bad prefixes for the PSL formulae in question. The presented technique is inspired by the temporal testers approach of Pnueli and co-authors, but unlike theirs, the proposed approach is aimed at finding finite counterexamples to properties. The new approach presented here handles a larger syntactic subset of PSL safety properties than earlier translations for PSL safety subsets and has been implemented on top of the open source NuSMV 2 model checker. The experimental results show the approach to be a quite competitive model checking approach when compared to a state-of-the-art implementation of PSL model checking.", "paper_title": "Efficient model checking of PSL safety properties", "paper_id": "WOS:000298115900006"}