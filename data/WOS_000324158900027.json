{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_parallel_systems"}, {"score": 0.004491313367627919, "phrase": "novel_approach"}, {"score": 0.004262881313926916, "phrase": "heterogeneous_systems"}, {"score": 0.004010960493946656, "phrase": "insieme_compiler"}, {"score": 0.003941746077126688, "phrase": "runtime_infrastructure"}, {"score": 0.003644714340300824, "phrase": "single-device_opencl_program"}, {"score": 0.0035507457285983268, "phrase": "multi-device_opencl_program"}, {"score": 0.003340768341189764, "phrase": "dynamic_task"}, {"score": 0.0031984060035955292, "phrase": "offline-generated_prediction_model"}, {"score": 0.0030092017034068666, "phrase": "prediction_model"}, {"score": 0.002855934865505357, "phrase": "learning_approach"}, {"score": 0.0027822459052173113, "phrase": "static_program_features"}, {"score": 0.0023782753249846794, "phrase": "performance_improvements"}, {"score": 0.0021797112385590935, "phrase": "single_cpu"}], "paper_keywords": ["Languages", " Algorithms", " Performance", " heterogeneous computing", " compilers", " GPU", " task partitioning", " code analysis", " machine learning", " runtime system"], "paper_abstract": "In this paper we propose a novel approach which automatizes task partitioning in heterogeneous systems. Our framework is based on the Insieme Compiler and Runtime infrastructure [1]. The compiler translates a single-device OpenCL program into a multi-device OpenCL program. The runtime system then performs dynamic task partitioning based on an offline-generated prediction model. In order to derive the prediction model, we use a machine learning approach that incorporates static program features as well as dynamic, input sensitive features. Our approach has been evaluated over a suite of 23 programs and achieves performance improvements compared to an execution of the benchmarks on a single CPU and a single GPU only.", "paper_title": "Automatic Problem Size Sensitive Task Partitioning on Heterogeneous Parallel Systems", "paper_id": "WOS:000324158900027"}