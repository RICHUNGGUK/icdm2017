{"auto_keywords": [{"score": 0.043429710921929404, "phrase": "uml"}, {"score": 0.004815115672290861, "phrase": "integrated"}, {"score": 0.0046073860169839305, "phrase": "uml_models"}, {"score": 0.004218602458288531, "phrase": "software_architecture"}, {"score": 0.003992385826251404, "phrase": "intermediate_representation"}, {"score": 0.003841263262252044, "phrase": "intermediate_representation_model_dependency_graph"}, {"score": 0.0037368243408988145, "phrase": "mdg"}, {"score": 0.003536346954940087, "phrase": "class_and_state-machine_diagrams"}, {"score": 0.0032198357970567595, "phrase": "constructed_mdg"}, {"score": 0.0031495640320537252, "phrase": "model_elements"}, {"score": 0.002931569771634119, "phrase": "specific_scenario"}, {"score": 0.0028360962841331634, "phrase": "uml_diagram"}, {"score": 0.0027437235598539904, "phrase": "relevant_information"}, {"score": 0.002713604305939145, "phrase": "different_diagrams"}, {"score": 0.0025820967615278073, "phrase": "integrated_model"}, {"score": 0.0025257081555100556, "phrase": "implicit_interdependencies"}, {"score": 0.0024842242921857705, "phrase": "different_model_elements"}, {"score": 0.0023900527169254744, "phrase": "state-based_dynamic_slice"}, {"score": 0.002337848196418384, "phrase": "state_information"}, {"score": 0.0022741894748181243, "phrase": "computed_dynamic_slices"}, {"score": 0.0022122603123901114, "phrase": "traditional_slicing"}, {"score": 0.002175913488493802, "phrase": "case_study"}], "paper_keywords": [""], "paper_abstract": "The authors propose a technique for constructing dynamic slices of unified modelling language (UML) models using the state information. Given a software architecture specified using UML, the authors first construct an intermediate representation. The authors have named this intermediate representation model dependency graph (MDG). MDG combines information extracted from various sequence diagrams along with those from class and state-machine diagrams. The authors have named our proposed algorithm state-based dynamic slicing of UML models (SDSUM). Our SDSUM algorithm traverses the constructed MDG to identify the model elements that are either directly or indirectly involved during the execution of a specific scenario. Instead of processing each UML diagram independently and iteratively cross linking relevant information across different diagrams, our algorithm's novelty lies in constructing and analysing an integrated model for determining the implicit interdependencies among the different model elements distributed across various UML diagrams for computing a state-based dynamic slice. Consideration of state information of objects makes the computed dynamic slices more precise compared to traditional slicing. A case study has been presented to illustrate our approach.", "paper_title": "Integrated state-based dynamic slicing technique for UML models", "paper_id": "WOS:000275584300005"}