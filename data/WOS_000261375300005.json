{"auto_keywords": [{"score": 0.03338209850776178, "phrase": "sequential_compare_points"}, {"score": 0.012563013953014698, "phrase": "compare_points"}, {"score": 0.011316586153892423, "phrase": "design_descriptions"}, {"score": 0.008802285261801181, "phrase": "symbolic_expressions"}, {"score": 0.00481495049065317, "phrase": "system_level"}, {"score": 0.004764542405129454, "phrase": "rtl_descriptions"}, {"score": 0.00471465954562773, "phrase": "sequential_equivalence_checking"}, {"score": 0.004665296491645837, "phrase": "system_level_descriptions"}, {"score": 0.00398370478688858, "phrase": "equivalence_checking_problem"}, {"score": 0.0037594599958631404, "phrase": "equivalence_checking_techniques"}, {"score": 0.003720060615588018, "phrase": "nominal_or_functional_mapping"}, {"score": 0.0034013521529056715, "phrase": "system_level_languages_or_hardware_description_languages"}, {"score": 0.0030772505522663612, "phrase": "sequential_behavior"}, {"score": 0.0027547408718334603, "phrase": "design_behavior"}, {"score": 0.002613239644974825, "phrase": "sat_solver"}, {"score": 0.0023516185395256505, "phrase": "non-trivial_case_study"}, {"score": 0.0022904032758108775, "phrase": "equivalence_check"}, {"score": 0.0022544399432457164, "phrase": "system_c_description"}, {"score": 0.0021957487795963666, "phrase": "viterbi_decoder"}, {"score": 0.0021049977753042253, "phrase": "drm_soc."}], "paper_keywords": ["Sequential equivalence checking", " C vs RTL", " SAT solvers", " Static analysis of hardware"], "paper_abstract": "Sequential equivalence checking between system level descriptions of designs and their Register Transfer Level (RTL) implementations is a very challenging and important problem in the context of Systems on a Chip (SoCs). We propose a technique to alleviate the complexity of the equivalence checking problem, by efficiently decomposing it using compare points. Traditionally, equivalence checking techniques use nominal or functional mapping of latches as compare points. Since we operate at a level where design descriptions are in System Level Languages or Hardware Description Languages, we leverage the information available to us at this level in deducing sequential compare points. Sequential compare points encapsulate the sequential behavior of designs and are obtained by statically analyzing the design descriptions. We decompose the design using sequential compare points and represent the design behavior at these compare points by symbolic expressions. We use a SAT solver to check the equivalence of the symbolic expressions. In order to demonstrate our technique, we present results on a non-trivial case study. We show an equivalence check between a System C description and two different Verilog RTL implementations of a Viterbi decoder, that is a component of the DRM SoC.", "paper_title": "Sequential equivalence checking between system level and RTL descriptions", "paper_id": "WOS:000261375300005"}