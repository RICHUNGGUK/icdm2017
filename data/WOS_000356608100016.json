{"auto_keywords": [{"score": 0.049850756629456816, "phrase": "protein_structures"}, {"score": 0.03811473082024519, "phrase": "maximum_length"}, {"score": 0.015208384801321242, "phrase": "lga"}, {"score": 0.00481495049065317, "phrase": "longest_common_segments"}, {"score": 0.004612376827433774, "phrase": "popular_method"}, {"score": 0.004418287966422041, "phrase": "longest_common_contiguous_segments"}, {"score": 0.0035125292519354724, "phrase": "squared_deviation"}, {"score": 0.003072285184441679, "phrase": "r._we"}, {"score": 0.002316532084420729, "phrase": "second_requirement"}, {"score": 0.0022780397288287243, "phrase": "time_complexity"}, {"score": 0.0022294857939412073, "phrase": "consecutive_points"}], "paper_keywords": ["Local/Global Alignment (LGA)", " RMSD", " longest common structure", " PTAS"], "paper_abstract": "The Local/Global Alignment (Zemla, 2003), or LGA, is a popular method for the comparison of protein structures. One of the two components of LGA requires us to compute the longest common contiguous segments between two protein structures. That is, given two structures A = (a(1,)..., a(n)) and B = (b(1,)..., b(n)) where a(k), b(k) is an element of R-3, we are to find, among all the segments f = (a(i,)..., a(j)) and g = (b(i,)..., b(j)) that fulfill a certain criterion regarding their similarity, those of the maximum length. We consider the following criteria: (1) the root mean squared deviation (RMSD) between f and g is to be within a given t is an element of R; (2) f and g can be superposed such that for each k, i <= k <= j, \\\\a(k) - b(k)\\\\ <= t for a given t is an element of R. We give an algorithm of O(n log n + nl) time complexity when the first requirement applies, where l is the maximum length of the segments fulfilling the criterion. We show an FPTAS which, for any epsilon is an element of R, finds a segment of length at least l, but of RMSD up to (1 + epsilon)t, in O(n log n + n/epsilon) time. We propose an FPTAS which for any given epsilon is an element of R, finds all the segments f and g of the maximum length which can be superposed such that for each k, i <= k <= j, \\\\a(k) - b(k)\\\\ <= (1 + epsilon)t, thus fulfilling the second requirement approximately. The algorithm has a time complexity of O(n log(2) n/epsilon(5)) when consecutive points in A are separated by the same distance (which is the case with protein structures). These worst-case runtime complexities are verified using C++ implementations of the algorithms, which we have made available at http://alcs.sourceforge.net/.", "paper_title": "Finding All Longest Common Segments in Protein Structures Efficiently", "paper_id": "WOS:000356608100016"}