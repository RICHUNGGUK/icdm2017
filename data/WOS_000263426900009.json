{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "behavioral_semantics"}, {"score": 0.04954033184026155, "phrase": "uml_diagrams"}, {"score": 0.04900761970662832, "phrase": "graph_transformations"}, {"score": 0.030974107676394053, "phrase": "graph_grammar"}, {"score": 0.004324031677173549, "phrase": "software_systems"}, {"score": 0.004203343568960231, "phrase": "intuitive_notations"}, {"score": 0.0038392331564122387, "phrase": "formal_semantics"}, {"score": 0.0035065523764817143, "phrase": "formal_approach"}, {"score": 0.0033893426032054366, "phrase": "statechart_diagrams"}, {"score": 0.0033511469200347907, "phrase": "graph_transformation_techniques"}, {"score": 0.0031665087019813244, "phrase": "composite_states"}, {"score": 0.0028271058251633815, "phrase": "state_machine"}, {"score": 0.0025383451160985488, "phrase": "non-conflict_state_transitions"}, {"score": 0.0023579143175099324, "phrase": "design_model"}, {"score": 0.0023313149689465386, "phrase": "system_requirements"}, {"score": 0.002215274527909304, "phrase": "case_study"}, {"score": 0.0021778895748464024, "phrase": "toll-gate_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Graph transformation", " Graph grammars", " Visual programming", " Visual languages", " UML", " Behavioral semantics", " Object-oriented systems"], "paper_abstract": "The Unified Modeling Language (UML) has been widely accepted as a standard for modeling software systems from various perspectives. The intuitive notations of UML diagrams greatly improve the communication among developers. However, the lack of a formal semantics makes it difficult to automate analysis and verification. This paper offers a graphical yet formal approach to specifying the behavioral semantics of statechart diagrams using graph transformation techniques. It supports many advanced features of statecharts, such as composite states, firing priority, history, junction, and choice. In our approach, a graph grammar is derived automatically from a state machine to summarize the hierarchy of states. Based on the graph grammar. the execution of a set of non-conflict state transitions is interpreted by a sequence of graph transformations. This facilitates verifying a design model against system requirements. To demonstrate our approach, we present a case study on a toll-gate system. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Specifying behavioral semantics of UML diagrams through graph transformations", "paper_id": "WOS:000263426900009"}