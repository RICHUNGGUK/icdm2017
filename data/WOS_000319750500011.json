{"auto_keywords": [{"score": 0.03585903151738124, "phrase": "class_imbalance_learning_methods"}, {"score": 0.03540385416658878, "phrase": "software_defect_prediction"}, {"score": 0.031282405263250296, "phrase": "adaboost"}, {"score": 0.00481495049065317, "phrase": "class_imbalance_learning"}, {"score": 0.004772818068176176, "phrase": "software_defect"}, {"score": 0.004669085371587273, "phrase": "software_testing"}, {"score": 0.0045877173513910055, "phrase": "testing_costs"}, {"score": 0.004527619017250708, "phrase": "wide_range"}, {"score": 0.004487989502479992, "phrase": "machine_learning_methods"}, {"score": 0.004332894955218135, "phrase": "software_modules"}, {"score": 0.004238682850598745, "phrase": "imbalanced_nature"}, {"score": 0.004092168350316413, "phrase": "learning_difficulty"}, {"score": 0.004020813632357377, "phrase": "class_imbalance"}, {"score": 0.0039333604469462356, "phrase": "classification_problems"}, {"score": 0.0038989120088094185, "phrase": "imbalanced_distributions"}, {"score": 0.003780692127133743, "phrase": "defect_prediction"}, {"score": 0.0032697235411641695, "phrase": "better_solutions"}, {"score": 0.003212663446866794, "phrase": "different_types"}, {"score": 0.003101503914610488, "phrase": "threshold_moving"}, {"score": 0.0030608148631528767, "phrase": "ensemble_algorithms"}, {"score": 0.0029292257553895987, "phrase": "nc"}, {"score": 0.002890557197908352, "phrase": "best_overall_performance"}, {"score": 0.0027782522896291437, "phrase": "g-mean"}, {"score": 0.0024451427672857458, "phrase": "dynamic_version"}, {"score": 0.0021049977753042253, "phrase": "original_adaboost"}], "paper_keywords": ["Class imbalance learning", " ensemble learning", " negative correlation learning", " software defect prediction"], "paper_abstract": "To facilitate software testing, and save testing costs, a wide range of machine learning methods have been studied to predict defects in software modules. Unfortunately, the imbalanced nature of this type of data increases the learning difficulty of such a task. Class imbalance learning specializes in tackling classification problems with imbalanced distributions, which could be helpful for defect prediction, but has not been investigated in depth so far. In this paper, we study the issue of if and how class imbalance learning methods can benefit software defect prediction with the aim of finding better solutions. We investigate different types of class imbalance learning methods, including resampling techniques, threshold moving, and ensemble algorithms. Among those methods we studied, AdaBoost.NC shows the best overall performance in terms of the measures including balance, G-mean, and Area Under the Curve (AUC). To further improve the performance of the algorithm, and facilitate its use in software defect prediction, we propose a dynamic version of AdaBoost. NC, which adjusts its parameter automatically during training. Without the need to pre-define any parameters, it is shown to be more effective and efficient than the original AdaBoost. NC.", "paper_title": "Using Class Imbalance Learning for Software Defect Prediction", "paper_id": "WOS:000319750500011"}