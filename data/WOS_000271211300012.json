{"auto_keywords": [{"score": 0.034081736245498206, "phrase": "blink"}, {"score": 0.014447792026664852, "phrase": "java"}, {"score": 0.010863143427148296, "phrase": "single-environment_debuggers"}, {"score": 0.01067093513569589, "phrase": "debugger_composition"}, {"score": 0.00481495049065317, "phrase": "large-scale_systems"}, {"score": 0.004686963264680882, "phrase": "legacy_code_and_leverage_languages"}, {"score": 0.0041703614123283165, "phrase": "operating_system"}, {"score": 0.0040777192615062815, "phrase": "significant_debugging_challenges"}, {"score": 0.0037778009042360758, "phrase": "different_environments"}, {"score": 0.0037104876694493815, "phrase": "traditional_multilingual_debuggers"}, {"score": 0.003660788124282824, "phrase": "single_execution_environment"}, {"score": 0.003563370084662192, "phrase": "novel_composition_approach"}, {"score": 0.0035156341294017685, "phrase": "portable_mixed-environment_debuggers"}, {"score": 0.003437486158494063, "phrase": "intermediate_agent"}, {"score": 0.0033914308417007316, "phrase": "language_transitions"}, {"score": 0.003071965703296204, "phrase": "jeannie"}, {"score": 0.0028458096625791625, "phrase": "modest_amounts"}, {"score": 0.002820319063320601, "phrase": "new_code"}, {"score": 0.002708399936381754, "phrase": "multiple_java_virtual_machines"}, {"score": 0.0026841368358805407, "phrase": "c_compilers"}, {"score": 0.0026600905156986317, "phrase": "operating_systems"}, {"score": 0.0023241387549221408, "phrase": "language-interface_errors"}], "paper_keywords": ["Languages", " Design", " Reliability", " Foreign Function Interface", " JNI", " Composition"], "paper_abstract": "Programmers build large-scale systems with multiple languages to reuse legacy code and leverage languages best suited to their problems. For instance, the same program may use Java for ease-of-programming and C to interface with the operating system. These programs pose significant debugging challenges, because programmers need to understand and control code across languages, which may execute in different environments. Unfortunately, traditional multilingual debuggers require a single execution environment. This paper presents a novel composition approach to building portable mixed-environment debuggers, in which an intermediate agent interposes on language transitions, controlling and reusing single-environment debuggers. We implement debugger composition in Blink, a debugger for Java, C, and the Jeannie programming language. We show that Blink is (1) relatively simple: it requires modest amounts of new code; (2) portable: it supports multiple Java Virtual Machines, C compilers, operating systems, and component debuggers; and (3) powerful: composition eases debugging, while supporting new mixed-language expression evaluation and Java Native Interface (JNI) bug diagnostics. In real-world case studies, we show that language-interface errors require single-environment debuggers to restart execution multiple times, whereas Blink directly diagnoses them with one execution. We also describe extensions for other mixed-environments to show debugger composition will generalize.", "paper_title": "Debug All Your Code: Portable Mixed-Environment Debugging", "paper_id": "WOS:000271211300012"}