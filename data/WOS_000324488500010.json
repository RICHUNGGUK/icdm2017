{"auto_keywords": [{"score": 0.04923607408107278, "phrase": "model_checking"}, {"score": 0.00481495049065317, "phrase": "stream_graphs"}, {"score": 0.004176813329075736, "phrase": "synchronous_dataflow"}, {"score": 0.004103249189827535, "phrase": "sdf"}, {"score": 0.003959863717046575, "phrase": "heterogeneous_execution_architectures"}, {"score": 0.0035908627899097407, "phrase": "optimal_solution"}, {"score": 0.0032272929113113203, "phrase": "algorithm_runtime"}, {"score": 0.0031422859551159506, "phrase": "equivalent_ilp_formulations"}, {"score": 0.002824005136794786, "phrase": "task_parallelism"}, {"score": 0.0027741761880779535, "phrase": "data_parallelism"}, {"score": 0.0027010719929751, "phrase": "state_sharing"}, {"score": 0.0023845255359681143, "phrase": "current_state-of-the-art_heuristic_techniques"}, {"score": 0.0021049977753042253, "phrase": "heuristic_techniques"}], "paper_keywords": ["Languages", " Performance", " Streaming", " dataflow", " parallelization", " compiler"], "paper_abstract": "In this article we use model checking to statically distribute and schedule Synchronous DataFlow (SDF) graphs on heterogeneous execution architectures. We show that model checking is capable of providing an optimal solution and it arrives at these solutions faster (in terms of algorithm runtime) than equivalent ILP formulations. Furthermore, we also show how different types of optimizations such as task parallelism, data parallelism, and state sharing can be included within our framework. Finally, comparison of our approach with the current state-of-the-art heuristic techniques show the pitfalls of these techniques and gives a glimpse of how these heuristic techniques can be improved.", "paper_title": "Orchestrating Stream Graphs Using Model Checking", "paper_id": "WOS:000324488500010"}