{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "graph_minor_approach"}, {"score": 0.004597244847332915, "phrase": "coarse-grained_reconfigurable_arrays"}, {"score": 0.004447766706144458, "phrase": "high_performance"}, {"score": 0.004389339243427964, "phrase": "improved_flexibility"}, {"score": 0.004274766964161756, "phrase": "power_efficiency"}, {"score": 0.004163172790791119, "phrase": "compute-intensive_loop_kernels"}, {"score": 0.004054479957160662, "phrase": "perfect_candidates"}, {"score": 0.0037699306119313154, "phrase": "modified_modulo_scheduling_algorithms"}, {"score": 0.003368816076401138, "phrase": "cgra_mapping_problem"}, {"score": 0.0033025823350563087, "phrase": "graph_minor_containment_problem"}, {"score": 0.003153041030690117, "phrase": "dataflow_graph"}, {"score": 0.003091036449708673, "phrase": "loop_kernel"}, {"score": 0.0029706504420983896, "phrase": "modulo_routing_resource_graph"}, {"score": 0.002912222095383313, "phrase": "cgra_resources"}, {"score": 0.0027803070408286158, "phrase": "exact_graph"}, {"score": 0.0026543514413663893, "phrase": "unique_properties"}, {"score": 0.0025678829712650437, "phrase": "routing_resource_graph"}, {"score": 0.0024842242921857705, "phrase": "search_space"}, {"score": 0.0024192592458651204, "phrase": "additional_heuristic_strategies"}, {"score": 0.00234043119560776, "phrase": "compilation_time"}, {"score": 0.0022049428043454966, "phrase": "mapping_solutions"}, {"score": 0.002175913488493802, "phrase": "experimental_evaluation"}], "paper_keywords": ["Algorithms", " Performance", " Coarse-grained reconfigurable arrays (CGRAs)", " graph minor", " compilation"], "paper_abstract": "Coarse-Grained Reconfigurable Arrays (CGRAs) exhibit high performance, improved flexibility, low cost, and power efficiency for various application domains. Compute-intensive loop kernels, which are perfect candidates to be executed on CGRAs, are usually mapped through modified modulo scheduling algorithms. These algorithms should be capable of performing both placement and routing. We formalize the CGRA mapping problem as a graph minor containment problem. We essentially test whether the dataflow graph representing the loop kernel is a minor of the modulo routing resource graph representing the CGRA resources and their interconnects. We design an exact graph minor testing approach that exploits the unique properties of both the dataflow graph and the routing resource graph to significantly prune the search space. We introduce additional heuristic strategies that drastically improve the compilation time while still generating optimal or near-optimal mapping solutions. Experimental evaluation confirms the efficiency of our approach.", "paper_title": "Graph Minor Approach for Application Mapping on CGRAs", "paper_id": "WOS:000342393800006"}