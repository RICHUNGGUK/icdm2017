{"auto_keywords": [{"score": 0.04527099105579865, "phrase": "system_state_model"}, {"score": 0.00481495049065317, "phrase": "system_state_models"}, {"score": 0.00376409764683147, "phrase": "test_case_design"}, {"score": 0.003698442219929622, "phrase": "test_coverage_analysis"}, {"score": 0.0032697235411641695, "phrase": "practical_systems"}, {"score": 0.0027417911324611917, "phrase": "state_models"}, {"score": 0.002693919110230191, "phrase": "individual_classes"}, {"score": 0.0025778546800417808, "phrase": "novel_method"}, {"score": 0.0024667783849055634, "phrase": "state_model"}, {"score": 0.0023192471808039746, "phrase": "different_sequences"}, {"score": 0.0021613897794439227, "phrase": "state_changes"}, {"score": 0.0021049977753042253, "phrase": "individual_objects"}], "paper_keywords": ["system state model", " UML", " test coverage analysis", " state coverage", " transition coverage", " automatic test case generation"], "paper_abstract": "Many modern systems are state-based. For such systems, a system state model is important not only for understanding the behavior of the system, but also for test case design, test coverage analysis, maintenance, etc. However, developers rarely construct the system state model for practical systems because it is usually too complex and cumbersome to construct. On the other hand, developers normally construct the state models of individual classes. We propose a novel method to automatically synthesize the state model of a system by analyzing the different sequences of scenarios and determining whether these lead to any state changes of the individual objects.", "paper_title": "Synthesis of system state models", "paper_id": "WOS:000253410300003"}