{"auto_keywords": [{"score": 0.048329338700166605, "phrase": "xml"}, {"score": 0.00481495049065317, "phrase": "imperative_xml_programs"}, {"score": 0.00470862827326028, "phrase": "widespread_adoption"}, {"score": 0.004502943680955863, "phrase": "programming_languages"}, {"score": 0.004306205029641728, "phrase": "first_class_construct"}, {"score": 0.0038798015183611275, "phrase": "imperative_xml_processing_programs"}, {"score": 0.0036553070575015344, "phrase": "program_analysis"}, {"score": 0.0035216195857272403, "phrase": "flow-sensitive_type_system"}, {"score": 0.003392804886610623, "phrase": "redundant_computations"}, {"score": 0.0033426036530090205, "phrase": "redundant_traversals"}, {"score": 0.0031726587374218277, "phrase": "imperative_loops"}, {"score": 0.003102488033561956, "phrase": "xml_values"}, {"score": 0.0029667545082292376, "phrase": "xml_data"}, {"score": 0.002901124599876666, "phrase": "uniform_framework"}, {"score": 0.0025178072071268534, "phrase": "xml_nodes"}, {"score": 0.002389696110283506, "phrase": "xpath_expression"}, {"score": 0.0023368018449680295, "phrase": "previously_computed_result"}, {"score": 0.002268088741853586, "phrase": "performance_improvements"}, {"score": 0.002234491924392104, "phrase": "selected_xmark_benchmark_queries"}, {"score": 0.0022013916728990564, "phrase": "xlinq_sample_queries"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Program analysis", " XML", " Imperative programming"], "paper_abstract": "The widespread adoption of XML has led to programming languages that support XML as a first class construct. In this paper, we present a method for analyzing and optimizing imperative XML processing programs. In particular, we present a program analysis, based on a flow-sensitive type system, for detecting both redundant computations and redundant traversals in such programs. The analysis handles imperative loops that traverse XML values explicitly and declarative queries over XML data in a uniform framework. We describe two optimizations that take advantage of our analysis: one merges queries that traverse the same set of XML nodes, and the other replaces an XPath expression by a previously computed result. We demonstrate performance improvements for selected XMark benchmark queries and XLinq sample queries. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Analysis of imperative XML programs", "paper_id": "WOS:000268515400004"}