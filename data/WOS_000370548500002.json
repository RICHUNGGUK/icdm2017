{"auto_keywords": [{"score": 0.049505168345722585, "phrase": "mobile_systems"}, {"score": 0.00481495049065317, "phrase": "physical_memory_fragmentation"}, {"score": 0.004588158931776543, "phrase": "hardware-accelerated_features"}, {"score": 0.004242085112539693, "phrase": "mobile_devices"}, {"score": 0.00406663414150229, "phrase": "contiguous_memory_allocation"}, {"score": 0.003969640975997097, "phrase": "physical_memory"}, {"score": 0.0037597491055035895, "phrase": "frequent_spawn"}, {"score": 0.0035609154384221567, "phrase": "proactive_anti-fragmentation_scheme"}, {"score": 0.0034135407979996673, "phrase": "memory_allocation"}, {"score": 0.003312009953245191, "phrase": "highly_fragmented_memory"}, {"score": 0.003232956879952914, "phrase": "high_cpu_usage"}, {"score": 0.0031941384895530426, "phrase": "power_consumption"}, {"score": 0.003080449000295983, "phrase": "proactive_anti-fragmentation_approach"}, {"score": 0.0028477727736832283, "phrase": "fixed-size_contiguous_regions"}, {"score": 0.0026970382454914437, "phrase": "free_memory"}, {"score": 0.002616762777413686, "phrase": "contiguous_regions"}, {"score": 0.0025542617599268323, "phrase": "subsequent_contiguous_memory_allocations"}, {"score": 0.002448446849997207, "phrase": "additional_overhead"}, {"score": 0.0023328599525181707, "phrase": "android_kernel"}, {"score": 0.0022771244331421586, "phrase": "proposed_scheme"}, {"score": 0.002143529653780496, "phrase": "associated_cpu_usage"}, {"score": 0.0021049977753042253, "phrase": "energy_consumption"}], "paper_keywords": ["Memory fragmentation", " Mobile systems"], "paper_abstract": "Since the adoption of hardware-accelerated features (e.g., hardware codec) improves the performance and quality of mobile devices, it revives the need for contiguous memory allocation. However, physical memory in mobile systems is highly fragmented due to the frequent spawn and exit of processes and the lack of proactive anti-fragmentation scheme. As a result, the memory allocation for large and contiguous I/O buffers suffers from highly fragmented memory, thereby incurring high CPU usage and power consumption. This paper presents a proactive anti-fragmentation approach that groups pages with the same lifetime, and stores them contiguously in fixed-size contiguous regions. When a process is killed to secure free memory, a set of contiguous regions are freed and subsequent contiguous memory allocations can be easily satisfied without incurring additional overhead. Our prototype implementation on a Nexus 10 tablet with the Android kernel shows that the proposed scheme greatly alleviates fragmentation, thereby reducing the I/O buffer allocation time, associated CPU usage, and energy consumption.", "paper_title": "Controlling Physical Memory Fragmentation in Mobile Systems", "paper_id": "WOS:000370548500002"}