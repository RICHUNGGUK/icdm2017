{"auto_keywords": [{"score": 0.049618672169140725, "phrase": "functional_dependency"}, {"score": 0.0059546396795461904, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "scalable_exploration"}, {"score": 0.004587835274176236, "phrase": "boolean_function"}, {"score": 0.00450000390667755, "phrase": "function_h"}, {"score": 0.004392565073466714, "phrase": "base_functions"}, {"score": 0.0039685202936462815, "phrase": "important_role"}, {"score": 0.0038924989779389424, "phrase": "electronic_design_automation"}, {"score": 0.0036201167891046046, "phrase": "binary_decision_diagrams"}, {"score": 0.0034159525504642656, "phrase": "large_designs"}, {"score": 0.00328625950643742, "phrase": "multiple-output_functional_dependencies"}, {"score": 0.003070996252787868, "phrase": "modern_sat_solver"}, {"score": 0.002925899335792914, "phrase": "incremental_sat"}, {"score": 0.002855934865505357, "phrase": "dependency_function_h"}, {"score": 0.0027341763737751467, "phrase": "craig_interpolation"}, {"score": 0.002530359917257626, "phrase": "large_set"}, {"score": 0.0025059724686541263, "phrase": "candidate_base_functions"}, {"score": 0.0024107449502335583, "phrase": "large-scale_logic_synthesis"}, {"score": 0.0023530698447434308, "phrase": "experimental_results"}, {"score": 0.002252701813819903, "phrase": "prior_work"}, {"score": 0.0021670777282518424, "phrase": "largest_iscas"}, {"score": 0.0021461840368981475, "phrase": "itc_benchmark_circuits"}], "paper_keywords": ["Automatic synthesis", " design aids", " logic design", " optimization"], "paper_abstract": "Functional dependency is concerned with rewriting a Boolean function f as a function h over a set of base functions {g(1),...,g(n)}, i. e., f h(g(1),...,g(n)). It plays an important role in many aspects of electronic design automation (EDA). Prior approaches to the exploration of functional dependency are based on binary decision diagrams (BDDs), which may not be easily scalable to large designs. This paper formulates both single-output and multiple-output functional dependencies as satisfiability (SAT) solving and exploits extensively the capability of a modern SAT solver. Thereby, functional dependency can be detected effectively through incremental SAT solving, and the dependency function h, if it exists, is obtained through Craig interpolation. The proposed method enables 1) scalable detection of functional dependency, 2) fast enumeration of dependency function under a large set of candidate base functions, and 3) potential application to large-scale logic synthesis and formal verification. Experimental results show that the proposed method is far superior to prior work and scales well in dealing with the largest ISCAS and ITC benchmark circuits with up to 200K gates.", "paper_title": "To SAT or Not to SAT: Scalable Exploration of Functional Dependency", "paper_id": "WOS:000274794100003"}