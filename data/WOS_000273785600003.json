{"auto_keywords": [{"score": 0.03851065497794083, "phrase": "competitive_ratio"}, {"score": 0.008998349595900505, "phrase": "contention_manager"}, {"score": 0.005925325447936894, "phrase": "greedy"}, {"score": 0.00481495049065317, "phrase": "non-clairvoyant_scheduling_problem"}, {"score": 0.0047178930715062704, "phrase": "management_guarantees"}, {"score": 0.004438250823243621, "phrase": "major_challenge"}, {"score": 0.0041751141941485555, "phrase": "non-clairvoyant_job_scheduling"}, {"score": 0.003950453462399077, "phrase": "resource_accesses"}, {"score": 0.0037161295884407626, "phrase": "non-clairvoyant_contention_manager"}, {"score": 0.003630551710200058, "phrase": "last_completion_time"}, {"score": 0.003505852877805438, "phrase": "optimal_contention_manager"}, {"score": 0.003435092524339692, "phrase": "exclusive_accesses"}, {"score": 0.0033170847930578473, "phrase": "simple_proof"}, {"score": 0.003048315312818542, "phrase": "greedy_contention_manager"}, {"score": 0.003021781956684419, "phrase": "guerraoui_et_al"}, {"score": 0.0029349892964423197, "phrase": "distributed_computing"}, {"score": 0.00280126189041041, "phrase": "significant_improvement"}, {"score": 0.0025967927629150715, "phrase": "deterministic_contention_manager"}, {"score": 0.0025148328760856505, "phrase": "randomized_contention_managers"}, {"score": 0.002435453488008121, "phrase": "simple_adaptation"}, {"score": 0.002224942603922241, "phrase": "deterministic_algorithm"}, {"score": 0.002154693685426657, "phrase": "unit_length_jobs"}, {"score": 0.0021049977753042253, "phrase": "lower_and_upper_bounds"}], "paper_keywords": ["Scheduling", " Transactions", " Software transactional memory", " Concurrency control", " Contention management"], "paper_abstract": "The transactional approach to contention management guarantees consistency by making sure that whenever two transactions have a conflict on a resource, only one of them proceeds. A major challenge in implementing this approach lies in guaranteeing progress, since transactions are often restarted. Inspired by the paradigm of non-clairvoyant job scheduling, we analyze the performance of a contention manager by comparison with an optimal, clairvoyant contention manager that knows the list of resource accesses that will be performed by each transaction, as well as its release time and duration. The realistic, non-clairvoyant contention manager is evaluated by the competitive ratio between the last completion time (makespan) it provides and the makespan provided by an optimal contention manager. Assuming that the amount of exclusive accesses to the resources is non-negligible, we present a simple proof that every work conserving contention manager guaranteeing the pending commit property achieves an O(s) competitive ratio, where s is the number of resources. This bound holds for the Greedy contention manager studied by Guerraoui et al. (Proceedings of the 24th Annual ACM Symposium on Principles of Distributed Computing (PODC), pp. 258-264, 2005) and is a significant improvement over the O(s (2)) bound they prove for the competitive ratio of Greedy. We show that this bound is tight for any deterministic contention manager, and under certain assumptions about the transactions, also for randomized contention managers. When transactions may fail, we show that a simple adaptation of Greedy has a competitive ratio of at most O(ks), assuming that a transaction may fail at most k times. If a transaction can modify its resource requirements when re-invoked, then any deterministic algorithm has a competitive ratio Omega(ks). For the case of unit length jobs, we give (almost) matching lower and upper bounds.", "paper_title": "Transactional Contention Management as a Non-Clairvoyant Scheduling Problem", "paper_id": "WOS:000273785600003"}