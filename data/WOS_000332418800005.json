{"auto_keywords": [{"score": 0.023054625606134378, "phrase": "maude"}, {"score": 0.00481495049065317, "phrase": "term_t"}, {"score": 0.004649474569983707, "phrase": "substitution_instances"}, {"score": 0.004392565073466714, "phrase": "least_general_generalizer"}, {"score": 0.004167982855788402, "phrase": "known_untyped_generalization_algorithm"}, {"score": 0.0038692638652494697, "phrase": "subtype_polymorphism"}, {"score": 0.0037198532511087566, "phrase": "modulo_equational_theories"}, {"score": 0.003671338229632309, "phrase": "function_symbols"}, {"score": 0.0035880632687650582, "phrase": "elan"}, {"score": 0.003423042581201533, "phrase": "empty_set"}, {"score": 0.003157682860450118, "phrase": "obj"}, {"score": 0.0030017207229983385, "phrase": "single_lgg"}, {"score": 0.0028731024405707277, "phrase": "equational_axioms"}, {"score": 0.002530359917257626, "phrase": "inference_systems"}, {"score": 0.0024007585788965655, "phrase": "new_applications"}, {"score": 0.0023798115577749225, "phrase": "partial_evaluation"}, {"score": 0.002359046870732839, "phrase": "program_synthesis"}, {"score": 0.002297831085501592, "phrase": "typed_equational_reasoning_systems"}, {"score": 0.0022777800735119405, "phrase": "typed_rule-based_languages"}, {"score": 0.0021896891011033105, "phrase": "cafe-obj"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": [""], "paper_abstract": "Generalization, also called anti-unification, is the dual of unification. Given terms t and t', a generalizer is a term t '' of which t and t' are substitution instances. The dual of a most general unifier (mgu) is that of least general generalizer (lgg). In this work, we extend the known untyped generalization algorithm to, first, an order-sorted typed setting with sorts, subsorts, and subtype polymorphism; second, we extend it to work modulo equational theories, where function symbols can obey any combination of associativity, commutativity, and identity axioms (including the empty set of such axioms); and third, to the combination of both, which results in a modular, order-sorted equational generalization algorithm. Unlike the untyped case, there is in general no single lgg in our framework, due to order-sortedness or to the equational axioms. Instead, there is a finite, minimal and complete set of lggs, so that any other generalizer has at least one of them as an instance. Our generalization algorithms are expressed by means of inference systems for which we give proofs of correctness. This opens up new applications to partial evaluation, program synthesis, and theorem proving for typed equational reasoning systems and typed rule-based languages such as ASF+SDF, Elan, OBJ, Cafe-OBJ, and Maude. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A modular order-sorted equational generalization algorithm", "paper_id": "WOS:000332418800005"}