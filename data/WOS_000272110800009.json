{"auto_keywords": [{"score": 0.04240525763043866, "phrase": "asynchronous_circuits"}, {"score": 0.041491270435167586, "phrase": "buffer_insertion_technique"}, {"score": 0.00481495049065317, "phrase": "novel_static_performance_analysis_method"}, {"score": 0.004707188147442449, "phrase": "important_topic"}, {"score": 0.0046192222897398685, "phrase": "high_performance"}, {"score": 0.004584495834677719, "phrase": "low_noise"}, {"score": 0.0045158206186680224, "phrase": "parameters_variations"}, {"score": 0.004381527499253281, "phrase": "relatively_challenging_processes"}, {"score": 0.004283423748543866, "phrase": "concurrent_events"}, {"score": 0.0040783049361415614, "phrase": "driven_synthesis"}, {"score": 0.003897659323896113, "phrase": "proposed_framework"}, {"score": 0.003853757393357659, "phrase": "high-level_description"}, {"score": 0.0037532257703888315, "phrase": "verilog_format"}, {"score": 0.0036969566358089644, "phrase": "special_macros"}, {"score": 0.003627800727103479, "phrase": "corresponding_specification"}, {"score": 0.0035599338383885447, "phrase": "smaller_circuits"}, {"score": 0.003440945901489461, "phrase": "predefined_circuit_templates"}, {"score": 0.00340217066797559, "phrase": "proposed_flow"}, {"score": 0.003313380246267812, "phrase": "new_performance_metric"}, {"score": 0.003263683763829895, "phrase": "efficient_methodology"}, {"score": 0.003239114833599948, "phrase": "static_estimation"}, {"score": 0.003214730261140886, "phrase": "average_performance"}, {"score": 0.0031308163228919773, "phrase": "template_level"}, {"score": 0.0030955250132409964, "phrase": "selected_performance_model"}, {"score": 0.0030375870949696016, "phrase": "petri-net"}, {"score": 0.0030033417337933625, "phrase": "probabilistic_choice_places"}, {"score": 0.002958281631770322, "phrase": "conditional_behavior"}, {"score": 0.0028164399450837465, "phrase": "proposed_static_analyzing"}, {"score": 0.002671263324230699, "phrase": "quantum_genetic_algorithm"}, {"score": 0.0026113524778702624, "phrase": "decomposition_step"}, {"score": 0.0025819015229390663, "phrase": "synthesis_flow"}, {"score": 0.0024487847651989128, "phrase": "inserted_buffers"}, {"score": 0.0024120247307686084, "phrase": "asynchronous_circuit"}, {"score": 0.0022110892229209407, "phrase": "real_systems"}], "paper_keywords": ["Asynchronous circuits", " Synthesis", " Performance", " Static timing analysis", " System modeling", " Probabilistic timed Petri-Net"], "paper_abstract": "Asynchronous logic is an important topic due to its interesting features of high performance, low noise and robustness to parameters variations. However, its performance evaluation and optimization are relatively challenging processes due to the dependencies between concurrent events. This paper introduces a framework mainly in the context of performance driven synthesis of asynchronous circuits including systems with choice using buffer insertion technique. In the proposed framework, a high-level description of the system is received in Verilog format powered by some special macros, and then the corresponding specification will be decomposed into smaller circuits which is possible to be directly mapped into predefined circuit templates. The proposed flow has the advantage of exploiting a new performance metric and presents an efficient methodology for static estimation of average performance of asynchronous circuits with choices at the template level. The selected performance model is a probabilistic timed Petri-Net that includes probabilistic choice places to capture the conditional behavior of the system. Since there are no any data handling during the proposed static analyzing leads to very fast performance estimation with enough precise results. The buffer insertion technique is properly encoded in a quantum genetic algorithm and then is exploited after decomposition step during the synthesis flow. This algorithm addresses the problem of identifying the number and location of inserted buffers needed in an asynchronous circuit with choice to satisfy a given average case performance constraint, thereby implicitly minimizes the area for a given average case performance. Experimental results on a set of real systems indicate that our proposed technique can achieve a 34% performance enhancement in average by forcing a 19% area penalty. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "High performance asynchronous design flow using a novel static performance analysis method", "paper_id": "WOS:000272110800009"}