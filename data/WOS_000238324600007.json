{"auto_keywords": [{"score": 0.04647828341403007, "phrase": "ram"}, {"score": 0.007716734702599499, "phrase": "input_matrices"}, {"score": 0.00481495049065317, "phrase": "matrices_i"}, {"score": 0.00478614222015456, "phrase": "matrix_multiplication"}, {"score": 0.004534466843671182, "phrase": "computational_resources"}, {"score": 0.004489327204473076, "phrase": "computation_time"}, {"score": 0.004471396853525207, "phrase": "random_access_memory"}, {"score": 0.004194018672840293, "phrase": "matrix_multiplication_problem"}, {"score": 0.004078118548408664, "phrase": "x_p"}, {"score": 0.003965408526084543, "phrase": "independent_trials"}, {"score": 0.003786938871408326, "phrase": "appropriate_probability_distribution_p"}, {"score": 0.0036601905163357786, "phrase": "sampled_columns"}, {"score": 0.003573274528922736, "phrase": "c_x"}, {"score": 0.0035589898078590564, "phrase": "matrix_r"}, {"score": 0.0035376693476114733, "phrase": "corresponding_rows"}, {"score": 0.0034055643459033084, "phrase": "crucial_features"}, {"score": 0.003291538372218494, "phrase": "good_approximation"}, {"score": 0.0032197927904286713, "phrase": "ab_-_cr"}, {"score": 0.0031057380738267987, "phrase": "parallel_to.parallel"}, {"score": 0.0030747771905143273, "phrase": "frobenius_norm"}, {"score": 0.0028209028426183433, "phrase": "external_memory"}, {"score": 0.0027100527874262446, "phrase": "second_matrix_multiplication_algorithm"}, {"score": 0.0024812375502053967, "phrase": "massive_data_sets"}, {"score": 0.002446655776554268, "phrase": "scarce_computational_resources"}, {"score": 0.002393281860183304, "phrase": "additional_space"}, {"score": 0.002178009250126491, "phrase": "multiple_agents"}, {"score": 0.0021262144760355326, "phrase": "sparse_representation"}, {"score": 0.0021049977753042253, "phrase": "nonzero_entries"}], "paper_keywords": ["randomized algorithms", " Monte Carlo methods", " massive data sets", " streaming models", " matrix multiplication"], "paper_abstract": "Motivated by applications in which the data may be formulated as a matrix, we consider algorithms for several common linear algebra problems. These algorithms make more efficient use of computational resources, such as the computation time, random access memory ( RAM), and the number of passes over the data, than do previously known algorithms for these problems. In this paper, we devise two algorithms for the matrix multiplication problem. Suppose A and B ( which are m x n and n x p, respectively) are the two input matrices. In our main algorithm, we perform c independent trials, where in each trial we randomly sample an element of {1, 2,..., n} with an appropriate probability distribution P on {1, 2,..., n}. We form an m x c matrix C consisting of the sampled columns of A, each scaled appropriately, and we form a c x n matrix R using the corresponding rows of B, again scaled appropriately. The choice of P and the column and row scaling are crucial features of the algorithm. When these are chosen judiciously, we show that CR is a good approximation to AB. More precisely, we show that parallel to AB - CR parallel to(F) = O(parallel to A parallel to(F)parallel to B parallel to(F) /root c), where parallel to.parallel to F denotes the Frobenius norm, i. e., parallel to A parallel to(2)(F) = Sigma(i, j) A(ij)(2). This algorithm can be implemented without storing the matrices A and B in RAM, provided it can make two passes over the matrices stored in external memory and use O(c( m+ n+ p)) additional RAM to construct C and R. We then present a second matrix multiplication algorithm which is similar in spirit to our main algorithm. In addition, we present a model (the pass-efficient model) in which the efficiency of these and other approximate matrix algorithms may be studied and which we argue is well suited to many applications involving massive data sets. In this model, the scarce computational resources are the number of passes over the data and the additional space and time required by the algorithm. The input matrices may be presented in any order of the entries ( and not just row or column order), as is the case in many applications where, e. g., the data has been written in by multiple agents. In addition, the input matrices may be presented in a sparse representation, where only the nonzero entries are written.", "paper_title": "Fast Monte Carlo algorithms for matrices I: Approximating matrix multiplication", "paper_id": "WOS:000238324600007"}