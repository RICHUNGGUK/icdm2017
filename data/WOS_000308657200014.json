{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "execution_mining"}, {"score": 0.004744437370338926, "phrase": "operating_systems"}, {"score": 0.004674952036988355, "phrase": "large_pieces"}, {"score": 0.004606479650820579, "phrase": "complex_software"}, {"score": 0.003802135020791801, "phrase": "static_representation"}, {"score": 0.0036373553416391823, "phrase": "limited_insight"}, {"score": 0.003584025547693836, "phrase": "execution_dynamics"}, {"score": 0.0029796206196589115, "phrase": "tralfamadore"}, {"score": 0.002850385670169814, "phrase": "complete_traces"}, {"score": 0.0028085616610192456, "phrase": "machine_execution"}, {"score": 0.0023694065215394593, "phrase": "new_dynamic_analyses"}, {"score": 0.0021363670305843403, "phrase": "novel_unified_source"}, {"score": 0.0021049977753042253, "phrase": "execution_browser"}], "paper_keywords": ["Design", " Experimentation", " Measurement", " Performance", " Binary Analysis", " Offline Analysis", " Virtual Machine", " Semantic Gap"], "paper_abstract": "Operating systems represent large pieces of complex software that are carefully tested and broadly deployed. Despite this, developers frequently have little more than their source code to understand how they behave. This static representation of a system results in limited insight into execution dynamics, such as what code is important, how data flows through a system, or how threads interact with one another. We describe Tralfamadore, a system that preserves complete traces of machine execution as an artifact that can be queried and analyzed with a library of simple, reusable operators, making it easy to develop and run new dynamic analyses. We demonstrate the benefits of this approach with several example applications, including a novel unified source and execution browser.", "paper_title": "Execution Mining", "paper_id": "WOS:000308657200014"}