{"auto_keywords": [{"score": 0.04576637822440423, "phrase": "developed_software"}, {"score": 0.00481495049065317, "phrase": "bch_codes"}, {"score": 0.004764859786310636, "phrase": "error_correction_software"}, {"score": 0.0046176782475198085, "phrase": "general_purpose_processors"}, {"score": 0.004451676867747938, "phrase": "galois_field_arithmetic"}, {"score": 0.0042692243768616455, "phrase": "table_lookup_method"}, {"score": 0.004072851768196397, "phrase": "maximum_parallelization"}, {"score": 0.0040094142308666975, "phrase": "cache_size_limitation"}, {"score": 0.003905864553426306, "phrase": "high_throughput_implementation"}, {"score": 0.0037261429556468217, "phrase": "lookup_tables"}, {"score": 0.0036873373225096624, "phrase": "encoding_and_decoding_processes"}, {"score": 0.003629882559085245, "phrase": "large_parallel_factor"}, {"score": 0.0034628156490003775, "phrase": "naive_word_length"}, {"score": 0.0034088473318056537, "phrase": "general_purpose"}, {"score": 0.003234934827553253, "phrase": "developed_mask_elimination_method"}, {"score": 0.0031348622158167195, "phrase": "algorithm_complexity"}, {"score": 0.0029284999172756103, "phrase": "simple_error_detection_scheme"}, {"score": 0.0027213882346615406, "phrase": "galois_field_multiplications"}, {"score": 0.002678944072162297, "phrase": "parallel_factor"}, {"score": 0.002651015392318126, "phrase": "chien_search"}, {"score": 0.0025555322596460036, "phrase": "error_locator"}, {"score": 0.002476424729269258, "phrase": "symmetric_exponents"}, {"score": 0.002450602177683068, "phrase": "positive_and_negative_signs"}, {"score": 0.002412371116984224, "phrase": "experimental_results"}, {"score": 0.002301211274459965, "phrase": "sufficient_throughput"}, {"score": 0.0022772115643656153, "phrase": "real-time_error_correction"}, {"score": 0.002253472659061783, "phrase": "nand"}, {"score": 0.002206700502606511, "phrase": "embedded_systems"}, {"score": 0.002127186380459509, "phrase": "file_systems"}, {"score": 0.0021049977753042253, "phrase": "general_purpose_computers"}], "paper_keywords": ["BCH codes", " CRC", " software", " implementation"], "paper_abstract": "Error correction software for Bose-Chaudhuri-Hochquenghem (BCH) codes is optimized for general purpose processors that do not equip hardware for Galois field arithmetic. The developed software applies parallelization with a table lookup method to reduce the number of iterations, and maximum parallelization under a cache size limitation is sought for a high throughput implementation. Since this method minimizes the number of lookup tables for encoding and decoding processes, a large parallel factor can be chosen for a given cache size. The naive word length of a general purpose CPU is used as a whole by employing the developed mask elimination method. The tradeoff of the algorithm complexity and the regularity is examined for several syndrome generation methods, which leads to a simple error detection scheme that reuses the encoder and a simplified syndrome generation method requiring only a small number of Galois field multiplications. The parallel factor for Chien search is increased much by transforming the error locator polynomial so that it contains symmetric exponents of positive and negative signs. The experimental results demonstrate that the developed software cannot only provide sufficient throughput for real-time error correction of NAND flash memory in embedded systems but also enhance the reliability of file systems in general purpose computers.", "paper_title": "Efficient Software-Based Encoding and Decoding of BCH Codes", "paper_id": "WOS:000266273200002"}