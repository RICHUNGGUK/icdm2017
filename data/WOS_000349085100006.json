{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.012610870997407604, "phrase": "gpu_implementation"}, {"score": 0.010297310232137277, "phrase": "subset-sum_problem"}, {"score": 0.008483584852312279, "phrase": "generation_stage"}, {"score": 0.005438684630877207, "phrase": "experimental_results"}, {"score": 0.0047323590206695305, "phrase": "parallel_two-list_algorithm"}, {"score": 0.004120435930514554, "phrase": "graphics_processing_unit"}, {"score": 0.00403221710768334, "phrase": "compute_unified_device_architecture"}, {"score": 0.003795086335272422, "phrase": "pruning_stage"}, {"score": 0.0037299231609021783, "phrase": "search_stage"}, {"score": 0.003480230347985338, "phrase": "gpu._ways"}, {"score": 0.0034353020860809404, "phrase": "better_performance"}, {"score": 0.003205268841726024, "phrase": "cpu-gpu"}, {"score": 0.0030166226457616616, "phrase": "typical_recursive_divide-and-conquer_strategy"}, {"score": 0.002888692115811987, "phrase": "current_gpus"}, {"score": 0.0027781870000242004, "phrase": "new_vector-based_iterative_implementation_mechanism"}, {"score": 0.0027068691342344545, "phrase": "explicit_recursion"}, {"score": 0.0023664730217196252, "phrase": "cpu_implementation"}, {"score": 0.0023257824499250653, "phrase": "high_speedup"}, {"score": 0.0023056996845692355, "phrase": "different_gpu_cards"}, {"score": 0.002227083991228041, "phrase": "improved_algorithm"}, {"score": 0.0021982976170703884, "phrase": "significant_performance_benefits"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["CUDA", " GPU implementation", " knapsack problem", " parallel two-list algorithm", " subset-sum problem"], "paper_abstract": "The subset-sum problem is a well-known non-deterministic polynomial-time complete (NP-complete) decision problem. This paper proposes a novel and efficient implementation of a parallel two-list algorithm for solving the problem on a graphics processing unit (GPU) using Compute Unified Device Architecture (CUDA). The algorithm is composed of a generation stage, a pruning stage, and a search stage. It is not easy to effectively implement the three stages of the algorithm on a GPU. Ways to achieve better performance, reasonable task distribution between CPU and GPU, effective GPU memory management, and CPU-GPU communication cost minimization are discussed. The generation stage of the algorithm adopts a typical recursive divide-and-conquer strategy. Because recursion cannot be well supported by current GPUs with compute capability less than 3.5, a new vector-based iterative implementation mechanism is designed to replace the explicit recursion. Furthermore, to optimize the performance of the GPU implementation, this paper improves the three stages of the algorithm. The experimental results show that the GPU implementation has much better performance than the CPU implementation and can achieve high speedup on different GPU cards. The experimental results also illustrate that the improved algorithm can bring significant performance benefits for the GPU implementation. Copyright (C) 2014 John Wiley & Sons, Ltd.", "paper_title": "GPU implementation of a parallel two-list algorithm for the subset-sum problem", "paper_id": "WOS:000349085100006"}