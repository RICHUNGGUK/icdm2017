{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "directed_graphs"}, {"score": 0.004750178261675602, "phrase": "standard_sensor_network_applications"}, {"score": 0.004665162327051461, "phrase": "raw_data"}, {"score": 0.004499647408293102, "phrase": "sink_node"}, {"score": 0.004339979174946844, "phrase": "special_intermediate_storage_nodes"}, {"score": 0.003929391999210588, "phrase": "k_storage_nodes"}, {"score": 0.0035898158129721003, "phrase": "minimum_k-storage_problem"}, {"score": 0.003400274964240732, "phrase": "directed_acyclic_graphs"}, {"score": 0.003235305151177897, "phrase": "constant_approximation_ratio"}, {"score": 0.002915701586760994, "phrase": "sensor_networks"}, {"score": 0.0028120802837806234, "phrase": "polynomial_time"}, {"score": 0.0027491902732542013, "phrase": "dynamic_programming_algorithm"}, {"score": 0.002466303439899648, "phrase": "path_length"}, {"score": 0.0023148964315569866, "phrase": "previous_algorithm"}, {"score": 0.0022224972632835416, "phrase": "maximum_out-degree"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Wireless sensor networks", " Storage placement", " Optimal algorithms", " Dynamic programming"], "paper_abstract": "In standard sensor network applications, sensors generate raw data that have to be sent to a sink node. In order to save energy, special intermediate storage nodes can be exploited in order to compress data before forwarding them to the sink. We consider the problem of locating k storage nodes in order to minimize the energy consumed for converging data to the sink. This is known as the minimum k-storage problem. We show that in directed graphs (and in particular in Directed Acyclic Graphs) the problem does not admit an algorithm with a constant approximation ratio, unless P = NP. If the topology is restricted to trees where the arcs are directed towards the sink (typical scenario in sensor networks), the problem is solvable in polynomial time. We give a dynamic programming algorithm that requires O (min{kn(2), k(2)P}) time, where n and P are the number of nodes and the path length of the tree [7], respectively. We improve over a previous algorithm which requires O (kn(2)(max{k, d})(d-1)) time, where d is the maximum out-degree of the tree [8]. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "The minimum k-storage problem on directed graphs", "paper_id": "WOS:000358972800009"}