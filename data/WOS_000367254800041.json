{"auto_keywords": [{"score": 0.03312386540905821, "phrase": "sbpa"}, {"score": 0.00481495049065317, "phrase": "unsynchronized_thread_communication"}, {"score": 0.004518442937844318, "phrase": "section_based_program_analysis"}, {"score": 0.0037336520904376687, "phrase": "disjoint_sections"}, {"score": 0.003559675269411366, "phrase": "non-communicating_loads"}, {"score": 0.0033402088717816416, "phrase": "program_compilation"}, {"score": 0.002988101395789399, "phrase": "deterministic_execution_runtime_environment"}, {"score": 0.0027594936602962075, "phrase": "dynamic_memory_access_instrumentations"}, {"score": 0.002468450551616404, "phrase": "threadsanitizer"}, {"score": 0.0021049977753042253, "phrase": "geometric_mean_basis"}], "paper_keywords": ["Program Analysis", " Race Detection", " Deterministic Execution", " Software Transactional Memory"], "paper_abstract": "We propose Section Based Program Analysis (SBPA), a novel way to decompose programs into disjoint sections to identify non-communicating loads and stores during program compilation. We implemented SBPA for a deterministic execution runtime environment and reduced 63% of dynamic memory access instrumentations. We also integrated SBPA with ThreadSanitizer, and achieved a speed-up of 2.74 on a geometric mean basis.", "paper_title": "Section Based Program Analysis to Reduce Overhead of Detecting Unsynchronized Thread Communication", "paper_id": "WOS:000367254800041"}