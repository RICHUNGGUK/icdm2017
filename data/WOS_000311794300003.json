{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multi-synchronous_collaboration."}, {"score": 0.00465067040500426, "phrase": "collaboration_users"}, {"score": 0.004586531354697466, "phrase": "shared_data"}, {"score": 0.004399349717218995, "phrase": "modified_versions"}, {"score": 0.004132743580000062, "phrase": "central_authority"}, {"score": 0.0038822311096089307, "phrase": "usage_restriction_mechanism"}, {"score": 0.003217896008931311, "phrase": "multi-synchronous_collaboration_model"}, {"score": 0.003107935254560724, "phrase": "usage_restrictions"}, {"score": 0.0028392545452904762, "phrase": "modified_data"}, {"score": 0.002742196991950893, "phrase": "merging_algorithm"}, {"score": 0.0024704333220467393, "phrase": "log_auditing_protocol"}, {"score": 0.002241087008892355, "phrase": "user_trust_levels"}, {"score": 0.0021049977753042253, "phrase": "peersim_simulator"}], "paper_keywords": ["Multi-synchronous collaboration", " contract model", " usage control", " push-pull-clone model", " trust", " log auditing"], "paper_abstract": "In multi-synchronous collaboration users replicate shared data, modify it and redistribute modified versions of this data without the need of a central authority. However, in this model, no usage restriction mechanism was proposed to control what users can do with the data after it has been released to them. In this paper, we extend the multi-synchronous collaboration model with contracts that express usage restrictions and that are checked a posteriori by users when they receive the modified data. We propose a merging algorithm that deals not only with changes on data but also with contracts. A log auditing protocol is used to detect users who do not respect contracts and to adjust user trust levels. Our contract-based model was implemented and evaluated by using PeerSim simulator.", "paper_title": "A CONTRACT-EXTENDED PUSH-PULL-CLONE MODEL FOR MULTI-SYNCHRONOUS COLLABORATION", "paper_id": "WOS:000311794300003"}