{"auto_keywords": [{"score": 0.034378871215094774, "phrase": "refactored_classes"}, {"score": 0.0046781613377273774, "phrase": "internal_characteristics"}, {"score": 0.004458722048888919, "phrase": "positive_influence"}, {"score": 0.004416079619543104, "phrase": "long-term_quality"}, {"score": 0.004181997052907647, "phrase": "lower_future_change"}, {"score": 0.004155283263388382, "phrase": "fault_propensity"}, {"score": 0.0039729853486821995, "phrase": "future_faults"}, {"score": 0.0038353580177342118, "phrase": "future_fault_propensity"}, {"score": 0.003631945391344252, "phrase": "refactoring_process"}, {"score": 0.003608732492631878, "phrase": "future_maintenance_benefits"}, {"score": 0.0034725269588525534, "phrase": "lower_propensity"}, {"score": 0.0031641444460976673, "phrase": "bespoke_tool"}, {"score": 0.003093893243443715, "phrase": "fifteen_types"}, {"score": 0.0027741761880779535, "phrase": "fault_activity"}, {"score": 0.002610090005760493, "phrase": "remaining_classes"}, {"score": 0.0024556852466581527, "phrase": "lower_change-proneness"}, {"score": 0.00220177373403577, "phrase": "concrete_evidence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Refactoring", " Change-proneness", " Fault analysis", " Evolution"], "paper_abstract": "Refactoring is a process for improving the internal characteristics and design of software while preserving its external behaviour. Refactoring has been suggested as a positive influence on the long-term quality and maintainability of software and, as a result, we might expect benefits of a lower future change or fault propensity by refactoring software. Conversely, many studies show a correlation between change and future faults; so application of a refactoring may in itself increase future fault propensity, negating any benefit of the refactoring. In this paper, we determine whether the refactoring process reaps future maintenance benefits and, as a consequence, results in software with a lower propensity for both faults and change. We studied a large, commercial software system over a twelve-month period and identified a set of refactored classes during the middle four months of the study; a bespoke tool was used to detect occurrences of fifteen types of refactoring. We then examined the fault- and change-proneness of the same set of refactored classes in the four months prior to, during, and after the period of refactoring to determine if change or fault activity was reduced either during or after the period of refactoring studied. We also compared these trends with remaining classes in the system that had not been refactored over the same periods. Results revealed that refactored classes experienced a lower change-proneness in the period after refactoring and were significantly less fault-prone during and after the period of refactoring, even when accounting for the effects of change. The study therefore presents concrete evidence of the benefits of refactoring in these two senses. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "The effect of refactoring on change and fault-proneness in commercial C# software", "paper_id": "WOS:000352047500003"}