{"auto_keywords": [{"score": 0.04904563266719088, "phrase": "test_plan_coverage"}, {"score": 0.04846450994120703, "phrase": "software_reliability"}, {"score": 0.00481495049065317, "phrase": "automated_testing"}, {"score": 0.004523865550323285, "phrase": "increasingly_important_role"}, {"score": 0.004495738533629062, "phrase": "complex_systems"}, {"score": 0.004440005714775306, "phrase": "high-tech_applications"}, {"score": 0.004398657974555281, "phrase": "important_fields"}, {"score": 0.004317109072311102, "phrase": "financial_management"}, {"score": 0.004263581204982932, "phrase": "biomedical_applications"}, {"score": 0.00410693065248228, "phrase": "efficient_operation"}, {"score": 0.003931402465972151, "phrase": "software_structure"}, {"score": 0.003834476721674575, "phrase": "growing_importance"}, {"score": 0.003798746478986171, "phrase": "industrial_point"}, {"score": 0.003739931635717522, "phrase": "basic_problem"}, {"score": 0.0032195006850887363, "phrase": "software_problems"}, {"score": 0.0031302806539556145, "phrase": "quality_assurance_tools"}, {"score": 0.0031010917912277845, "phrase": "configuration_management"}, {"score": 0.0030817834479425535, "phrase": "testing_procedures"}, {"score": 0.0028861422653675283, "phrase": "new_approach"}, {"score": 0.002859223385284036, "phrase": "automated_software_testing"}, {"score": 0.0025872113569311555, "phrase": "accelerated_automated_tests"}, {"score": 0.0025471063852938783, "phrase": "software_regression"}, {"score": 0.0025312385659888178, "phrase": "memory_overflow"}, {"score": 0.0023927929565329873, "phrase": "testing_time"}, {"score": 0.0023264294945973623, "phrase": "test_sequences"}, {"score": 0.0023047189563870593, "phrase": "actual_operating_conditions"}, {"score": 0.002283210560032092, "phrase": "stress_level"}, {"score": 0.0021991611806433634, "phrase": "software_life"}, {"score": 0.0021448505687807796, "phrase": "proposed_technique"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software automated testing", " Software reliability", " Quality in use", " Mean time to overflow"], "paper_abstract": "Software plays an increasingly important role in complex systems, especially for high-tech applications involved in important fields, such as transportation, financial management, communication, biomedical applications and so on. For these systems, performances such as efficient operation, fault tolerance, safety and security have to be guaranteed by the software structure, whose quality in use is assuming a growing importance from the industrial point of view. The basic problem is that the complexity of the task which software has to perform has often grown more quickly than hardware. In addition, unlike hardware, software cannot break or wear out, but can fail during its life cycle (dynamic defects) [1]. Software problems, essentially, have to be solved with quality assurance tools such as configuration management, testing procedures, quality data reporting systems and so on [2]. In this context, the paper proposes a new approach concerning the automated software testing as an aid to maximize the test plan coverage within the time available and also to increase software reliability and quality in use [3]. In this paper a method which combines accelerated automated tests for the study of software regression and memory overflow will be shown, in order to guarantee software with both a high quality level and a decrease of the testing time. The software will be tested by using test sequences reproducing the actual operating conditions and accelerated stress level. Moreover the research wishes to define some parameters of the software life and to show the generality of the proposed technique. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Software automated testing: A solution to maximize the test plan coverage and to increase software reliability and quality in use", "paper_id": "WOS:000285947000007"}