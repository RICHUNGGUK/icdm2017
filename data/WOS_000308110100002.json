{"auto_keywords": [{"score": 0.02985638999130369, "phrase": "mc-cubing"}, {"score": 0.011965321767357229, "phrase": "multi-core_architectures"}, {"score": 0.00481495049065317, "phrase": "modern_cpus"}, {"score": 0.004671803485255806, "phrase": "column-store_databases"}, {"score": 0.0046018264570209765, "phrase": "general-purpose_computing"}, {"score": 0.004567230180529598, "phrase": "graphics_processing_units"}, {"score": 0.00443141503046841, "phrase": "radical_changes"}, {"score": 0.004299621153829837, "phrase": "online_analytical_processing"}, {"score": 0.004267294709810579, "phrase": "olap"}, {"score": 0.00421923944095905, "phrase": "data_warehousing_fields"}, {"score": 0.004187507332394002, "phrase": "cube_computation"}, {"score": 0.004140354220982935, "phrase": "core_and_time-consuming_problem"}, {"score": 0.003853757393357659, "phrase": "prevalent_multi-core_architectures"}, {"score": 0.0037249853525936428, "phrase": "new_parallel_cube_algorithm"}, {"score": 0.0035734052458933547, "phrase": "cache-conscious_bottom-up_computation"}, {"score": 0.003415047118340286, "phrase": "integrated_bottom-up_and_breadth-first_partitioning_order"}, {"score": 0.003226899588787952, "phrase": "breadth-first_data_scanning"}, {"score": 0.0031308163228919773, "phrase": "cache_locality"}, {"score": 0.0031072969629605744, "phrase": "cache"}, {"score": 0.0030375852871252934, "phrase": "dimension_scope"}, {"score": 0.0030033417337933625, "phrase": "translation_lookaside_buffer"}, {"score": 0.0029807274562819552, "phrase": "tlb"}, {"score": 0.002837811982066224, "phrase": "multi-core_architecture-based_cube_algorithm"}, {"score": 0.0027325449069867222, "phrase": "multiple_threads"}, {"score": 0.0027119634978446895, "phrase": "parallel_execution"}, {"score": 0.002543148295176345, "phrase": "associated_algorithms"}, {"score": 0.0025049752758014602, "phrase": "single_instruction"}, {"score": 0.002486103638234488, "phrase": "multiple_data"}, {"score": 0.002467380617042168, "phrase": "simd"}, {"score": 0.00243033541656411, "phrase": "thread-level_parallelism"}, {"score": 0.0022278779300543548, "phrase": "experimental_results"}, {"score": 0.0021944267528581094, "phrase": "mc-cubing_algorithm"}, {"score": 0.002120982962764009, "phrase": "buc"}, {"score": 0.0021049977753042253, "phrase": "real_datasets"}], "paper_keywords": ["OLAP", " Real-time data warehousing", " Cube computation", " Cache conscious", " Multi-core CPUs", " GPUs"], "paper_abstract": "With the popularity of column-store databases, modern multi-core CPUs, and general-purpose computing on graphics processing units (GPGPUs), there will be radical changes in how processing is done in the online analytical processing (OLAP) and data warehousing fields. Cube computation is a core and time-consuming problem which has been researched extensively. However, most of the algorithms have been proposed without considering the prevalent multi-core architectures and column storage. This paper presents a new parallel cube algorithm that takes advantage of multi-core architectures. We first propose a cache-conscious bottom-up computation (BUC) algorithm called CC-BUC that adopts an integrated bottom-up and breadth-first partitioning order. Each dimension is separately stored and processed. In processing each dimension, breadth-first data scanning and results outputting reduce memory I/O and enhance cache locality. Cache misses are limited in a dimension scope, and translation lookaside buffer (TLB) misses are reduced. Based on CC-BUC, we give a multi-core architecture-based cube algorithm called MC-Cubing. Multiple partitions are processed simultaneously and multiple threads undergo parallel execution inside each partition. MC-Cubing is consistent with multi-core architectures and high parallelism. The layout and associated algorithms take advantage of single instruction, multiple data (SIMD) instructions and thread-level parallelism (TLP). We implement and demonstrate the effectiveness of MC-Cubing on two multi-core architectures: multi-core CPUs and GPUs. Experimental results show that the MC-Cubing algorithm can speed up nearly six times faster than BUC in real datasets.", "paper_title": "Parallel cube computation on modern CPUs and GPUs", "paper_id": "WOS:000308110100002"}