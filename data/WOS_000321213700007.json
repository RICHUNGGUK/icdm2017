{"auto_keywords": [{"score": 0.03345953020235003, "phrase": "clighttso"}, {"score": 0.030546926475782166, "phrase": "compcerttso"}, {"score": 0.00481495049065317, "phrase": "relaxed-memory_concurrency"}, {"score": 0.0045820747375409435, "phrase": "semantic_design"}, {"score": 0.00443308765153716, "phrase": "c-like_programming_language"}, {"score": 0.004384504920139083, "phrase": "concurrent_shared-memory_computation"}, {"score": 0.003757480190200645, "phrase": "compiler_optimization"}, {"score": 0.003716273882758735, "phrase": "concurrent_code"}, {"score": 0.0035953368057880593, "phrase": "high-performance_concurrent_algorithms"}, {"score": 0.003459191419478298, "phrase": "reasonably_simple_programming_model"}, {"score": 0.003309877074892399, "phrase": "verified_compilation"}, {"score": 0.0030638704739988595, "phrase": "compcert's_clight"}, {"score": 0.002931569771634119, "phrase": "high-performance_code"}, {"score": 0.002683815995041141, "phrase": "compcert"}, {"score": 0.0025964307623933987, "phrase": "coq"}, {"score": 0.0024569466759289055, "phrase": "clighttso_source_program"}, {"score": 0.00241658945942583, "phrase": "permitted_observable_behavior"}, {"score": 0.0023768935613577985, "phrase": "generated_assembly_code"}, {"score": 0.002175913488493802, "phrase": "source_semantics"}, {"score": 0.0021049977753042253, "phrase": "verified_fence-elimination_optimizations"}], "paper_keywords": ["Reliability", " Theory", " Verification", " Relaxed memory models", " semantics", " verified compilation"], "paper_abstract": "In this article, we consider the semantic design and verified compilation of a C-like programming language for concurrent shared-memory computation on x86 multiprocessors. The design of such a language is made surprisingly subtle by several factors: the relaxed-memory behavior of the hardware, the effects of compiler optimization on concurrent code, the need to support high-performance concurrent algorithms, and the desire for a reasonably simple programming model. In turn, this complexity makes verified compilation both essential and challenging. We describe ClightTSO, a concurrent extension of CompCert's Clight in which the TSO-based memory model of x86 multiprocessors is exposed for high-performance code, and CompCertTSO, a formally verified compiler from ClightTSO to x86 assembly language, building on CompCert. CompCertTSO is verified in Coq: for any well-behaved and successfully compiled ClightTSO source program, any permitted observable behavior of the generated assembly code (if it does not run out of memory) is also possible in the source semantics. We also describe some verified fence-elimination optimizations, integrated into CompCertTSO.", "paper_title": "CompCertTSO: A Verified Compiler for Relaxed-Memory Concurrency", "paper_id": "WOS:000321213700007"}