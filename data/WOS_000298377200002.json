{"auto_keywords": [{"score": 0.04401425964885099, "phrase": "mop"}, {"score": 0.03964036776127305, "phrase": "op_tree"}, {"score": 0.01038543958711623, "phrase": "frequent_patterns"}, {"score": 0.005372818618389134, "phrase": "apriori_algorithm"}, {"score": 0.005303225881690003, "phrase": "fp-growth_algorithm"}, {"score": 0.00481495049065317, "phrase": "mining_frequent_pattern"}, {"score": 0.0047732596509542135, "phrase": "subtree_traversing"}, {"score": 0.00457013354092966, "phrase": "important_task"}, {"score": 0.004530552828603269, "phrase": "knowledge_discovery"}, {"score": 0.004491313367627919, "phrase": "data_mining"}, {"score": 0.004318881178805575, "phrase": "efficient_algorithm"}, {"score": 0.004244375827831527, "phrase": "fast_frequent_pattern_discovery"}, {"score": 0.004153041453795458, "phrase": "new_kind"}, {"score": 0.0041170581247889654, "phrase": "data_structure"}, {"score": 0.004028452405970376, "phrase": "pattern_tree"}, {"score": 0.003958937342925219, "phrase": "particular_properties"}, {"score": 0.0038234714417849495, "phrase": "mining_frequent_patterns"}, {"score": 0.003724911315685105, "phrase": "special_frequent_pattern_tree"}, {"score": 0.0034894451015047875, "phrase": "corresponding_items"}, {"score": 0.00321236577162671, "phrase": "large_database"}, {"score": 0.003170667618004276, "phrase": "repetitive_database_scans"}, {"score": 0.0029443683459283955, "phrase": "costly_generation"}, {"score": 0.002906138793910919, "phrase": "large_number"}, {"score": 0.002831158147480665, "phrase": "candidate_k-patterns"}, {"score": 0.002686935113435742, "phrase": "specific_subtrees"}, {"score": 0.002583597507349819, "phrase": "search_space"}, {"score": 0.0023270035715132866, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "support_threshold"}], "paper_keywords": ["Data Mining", " Frequent Patterns", " Ordered Pattern Trees"], "paper_abstract": "Mining frequent patterns in database has emerged as an important task in knowledge discovery and data mining. In this paper, we present an efficient algorithm called Mop for fast frequent pattern discovery. Mop utilizes a new kind of data structure called OP_tree (ordered pattern tree) and some particular properties of frequent patterns to facilitate the process of mining frequent patterns. An OP tree is a special frequent pattern tree, where the children of any node are sorted according to the supports of corresponding items. Efficiency of Mop is achieved with three techniques: (1) it adopts OP tree to store a large database to avoid repetitive database scans, (2) it finds all frequent 2-patterns in the construction of OP tree to avoid the costly generation of a large number of candidate 2-patterns, (3) the supports of candidate k-patterns (k>2) can be obtained by traversing a few of specific subtrees of the OP tree, which greatly reduces the search space and avoid multi-scans of a database. We experimentally compare our algorithm with the Apriori algorithm and the FP-growth algorithm on one real database and one synthetical database. The experimental results show that Mop is about an order of magnitude faster than the Apriori algorithm. Mop also outperforms the FP-growth algorithm, especially when support threshold is very low and databases are quite large.", "paper_title": "Mop: An Efficient Algorithm for Mining Frequent Pattern with Subtree Traversing", "paper_id": "WOS:000298377200002"}