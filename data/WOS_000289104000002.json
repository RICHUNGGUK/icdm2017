{"auto_keywords": [{"score": 0.04900969000530811, "phrase": "declarative_goals"}, {"score": 0.00481497194457054, "phrase": "bdi"}, {"score": 0.004737879690862494, "phrase": "failure_handling"}, {"score": 0.004587402291248795, "phrase": "important_technology"}, {"score": 0.00447045328907701, "phrase": "contemporary_methods"}, {"score": 0.004356472679444647, "phrase": "complex_software"}, {"score": 0.004204459295724526, "phrase": "agent_paradigm"}, {"score": 0.00409723267214392, "phrase": "major_approaches"}, {"score": 0.0040708542958968605, "phrase": "intelligent_agent_systems"}, {"score": 0.003954229201647876, "phrase": "typical_bdi_agent-oriented_programming_languages"}, {"score": 0.003916098498242888, "phrase": "user-provided_\"plan_libraries"}, {"score": 0.003441352119167824, "phrase": "complex_applications"}, {"score": 0.0032468685934998335, "phrase": "run-time_context-dependent_plan_selection"}, {"score": 0.0030832123624449028, "phrase": "typical_bdi-style_agent-oriented_programming_language"}, {"score": 0.0028072645684856313, "phrase": "procedural_and_declarative_aspects"}, {"score": 0.002717937009041744, "phrase": "important_properties"}, {"score": 0.0025642311494861797, "phrase": "lookahead_deliberation"}, {"score": 0.0023880948210628933, "phrase": "goal_achievability"}, {"score": 0.002357391911165024, "phrase": "undesired_situations"}, {"score": 0.002319566486828135, "phrase": "failure_handling_mechanism"}, {"score": 0.002195432040517604, "phrase": "adequate_level"}], "paper_keywords": ["BDI agent-oriented programming", " Goal reasoning", " HTN planning"], "paper_abstract": "Agents are an important technology that have the potential to take over contemporary methods for analysing, designing, and implementing complex software. The Belief-Desire-Intention (BDI) agent paradigm has proven to be one of the major approaches to intelligent agent systems, both in academia and in industry. Typical BDI agent-oriented programming languages rely on user-provided \"plan libraries\" to achieve goals, and online context sensitive subgoal selection and expansion. These allow for the development of systems that are extremely flexible and responsive to the environment, and as a result, well suited for complex applications with (soft) real-time reasoning and control requirements. Nonetheless, complex decision making that goes beyond, but is compatible with, run-time context-dependent plan selection is one of the most natural and important next steps within this technology. In this paper we develop a typical BDI-style agent-oriented programming language that enhances usual BDI programming style with three distinguished features: declarative goals, look-ahead planning, and failure handling. First, an account that mixes both procedural and declarative aspects of goals is necessary in order to reason about important properties of goals and to decouple plans from what these plans are meant to achieve. Second, lookahead deliberation about the effects of one choice of expansion over another is clearly desirable or even mandatory in many circumstances so as to guarantee goal achievability and to avoid undesired situations. Finally, a failure handling mechanism, suitably integrated with both declarative goals and planning, is required in order to model an adequate level of commitment to goals, as well as to be consistent with most real BDI implemented systems.", "paper_title": "A BDI agent programming language with failure handling, declarative goals, and planning", "paper_id": "WOS:000289104000002"}