{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "reconfigurable_hardware"}, {"score": 0.03518757411622655, "phrase": "regular_expressions"}, {"score": 0.0046477357199085035, "phrase": "regular_expression_pattern"}, {"score": 0.0044863018460183784, "phrase": "non-deterministic_finite_automata_direction"}, {"score": 0.004235793609579307, "phrase": "previous_works"}, {"score": 0.0040886093072615, "phrase": "optimization_techniques"}, {"score": 0.0039815737219022675, "phrase": "area_cost"}, {"score": 0.0035178323426661626, "phrase": "proposed_approach"}, {"score": 0.003456132182564149, "phrase": "network_intrusion_detection_systems"}, {"score": 0.0032919615578986816, "phrase": "hazardous_packet_payload_contents"}, {"score": 0.0032342101452939977, "phrase": "high-speed_packet_processing"}, {"score": 0.003191560305761507, "phrase": "challenging_case_study"}, {"score": 0.003163439005885435, "phrase": "pattern_matching"}, {"score": 0.0028826733506942554, "phrase": "regular_expressions_increases"}, {"score": 0.0028195727965553367, "phrase": "step-by-step_optimization"}, {"score": 0.0027094427948305515, "phrase": "synthesis_tool"}, {"score": 0.0026036031415940563, "phrase": "hardware_engines"}, {"score": 0.0022999859758286423, "phrase": "matching_non-meta_character"}, {"score": 0.0021906130276146325, "phrase": "previous_field_programmable_gate_array_approaches"}, {"score": 0.0021426288417854987, "phrase": "generated_designs"}, {"score": 0.002123730137917387, "phrase": "comparable_area_requirements"}, {"score": 0.0021049977753042253, "phrase": "current_application-specific_integrated_circuit_solutions"}], "paper_keywords": ["regular expression", " pattern matching", " reconfigurable hardware", " network security"], "paper_abstract": "In this paper we describe a regular expression pattern matching approach for reconfigurable hardware. Following a Non-deterministic Finite Automata direction, we introduce three new basic building blocks to support constraint repetitions syntaxes more efficiently than previous works. In addition, a number of optimization techniques are employed to reduce the area cost of the designs and maximize performance. Our design methodology is supported by a tool that automatically generates the circuitry for the given regular expressions and outputs Hardware Description Language representations ready for logic synthesis. The proposed approach is evaluated on network Intrusion Detection Systems (IDS). Recent IDS use regular expressions to represent hazardous packet payload contents. They require high-speed packet processing providing a challenging case study for pattern matching using regular expressions. We use a number of IDS rulesets to show that our approach scales well as the number of regular expressions increases, and present a step-by-step optimization to survey the benefits of our techniques. The synthesis tool described in this study is used to generate hardware engines to match 300 to 1,500 IDS regular expressions using only 10-45 K logic cells and achieving throughput of 1.6-2.2 and 2.4-3.2 Gbps on Virtex2 and Virtex4 devices, respectively. Concerning the throughput per area required per matching non-Meta character, our hardware engines are 10-20 x more efficient than previous Field Programmable Gate Array approaches. Furthermore, the generated designs have comparable area requirements to current application-specific integrated circuit solutions.", "paper_title": "Regular expression matching in reconfigurable hardware", "paper_id": "WOS:000253880500007"}