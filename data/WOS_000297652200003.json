{"auto_keywords": [{"score": 0.025451360000654975, "phrase": "intrepid"}, {"score": 0.00481495049065317, "phrase": "large_supercomputers"}, {"score": 0.004764220976404241, "phrase": "large_parallel_machines"}, {"score": 0.004494570360108983, "phrase": "good_load_balance"}, {"score": 0.004330941610682453, "phrase": "parallel_applications"}, {"score": 0.004195418010131832, "phrase": "centralized_load_balancing_algorithms"}, {"score": 0.004129248271757936, "phrase": "scalability_problems"}, {"score": 0.003978866233891427, "phrase": "relatively_small_amount"}, {"score": 0.00385431710959668, "phrase": "load_balancing_algorithms"}, {"score": 0.003597625122515975, "phrase": "good_solutions"}, {"score": 0.0034299649219748513, "phrase": "automatic_dynamic_hierarchical_load_balancing_method"}, {"score": 0.003304965389155549, "phrase": "centralized_schemes"}, {"score": 0.0032014433546265694, "phrase": "traditional_distributed_schemes"}, {"score": 0.0030684249587688826, "phrase": "multiple_levels"}, {"score": 0.003036040409062437, "phrase": "load_balancing_domains"}, {"score": 0.0029253546782349875, "phrase": "hierarchical_method"}, {"score": 0.0028487656293168795, "phrase": "measurement-based_load_balancing_framework"}, {"score": 0.0027159094186967247, "phrase": "scalability_challenges"}, {"score": 0.002687235334499192, "phrase": "load_balancing"}, {"score": 0.002603012037901889, "phrase": "performance_data"}, {"score": 0.002561892963059385, "phrase": "hierarchical_load_balancing_method"}, {"score": 0.0025080762353076216, "phrase": "ranger"}, {"score": 0.002316105585203396, "phrase": "argonne_national_laboratory"}, {"score": 0.0022674379203603224, "phrase": "synthetic_benchmark"}, {"score": 0.002196342933346204, "phrase": "successful_deployment"}, {"score": 0.0021274723597955567, "phrase": "scientific_application"}, {"score": 0.0021049987157886673, "phrase": "namd"}], "paper_keywords": ["hierarchical algorithms", " load balancing", " parallel applications", " performance study", " scalability"], "paper_abstract": "Large parallel machines with hundreds of thousands of processors are becoming more prevalent. Ensuring good load balance is critical for scaling certain classes of parallel applications on even thousands of processors. Centralized load balancing algorithms suffer from scalability problems, especially on machines with a relatively small amount of memory. Fully distributed load balancing algorithms, on the other hand, tend to take longer to arrive at good solutions. In this paper, we present an automatic dynamic hierarchical load balancing method that overcomes the scalability challenges of centralized schemes and longer running times of traditional distributed schemes. Our solution overcomes these issues by creating multiple levels of load balancing domains which form a tree. This hierarchical method is demonstrated within a measurement-based load balancing framework in CHARM++. We discuss techniques to deal with scalability challenges of load balancing at very large scale. We present performance data of the hierarchical load balancing method on up to 16,384 cores of Ranger (at the Texas Advanced Computing Center) and 65,536 cores of Intrepid (the Blue Gene/P at Argonne National Laboratory) for a synthetic benchmark. We also demonstrate the successful deployment of the method in a scientific application, NAMD, with results on Intrepid.", "paper_title": "Periodic hierarchical load balancing for large supercomputers", "paper_id": "WOS:000297652200003"}