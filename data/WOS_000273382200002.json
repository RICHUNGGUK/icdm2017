{"auto_keywords": [{"score": 0.048929739366992464, "phrase": "design_patterns"}, {"score": 0.00481495049065317, "phrase": "modeling_design_patterns_for_semi-automatic_reuse"}, {"score": 0.004756805752518494, "phrase": "system_design"}, {"score": 0.004642604455537883, "phrase": "reusable_solutions"}, {"score": 0.004586531354697466, "phrase": "recurring_design_problems"}, {"score": 0.004449280529563265, "phrase": "important_tool"}, {"score": 0.00436890075128947, "phrase": "software_quality"}, {"score": 0.004263972370406983, "phrase": "correct_usage"}, {"score": 0.0041112665381266315, "phrase": "large_extent"}, {"score": 0.003822003373331997, "phrase": "suggested_solutions"}, {"score": 0.00342568771304873, "phrase": "design_pattern_solutions"}, {"score": 0.0033029038236817372, "phrase": "object-oriented_fashion"}, {"score": 0.0029965060407413898, "phrase": "particular_design_pattern"}, {"score": 0.0028367868542874763, "phrase": "different_aspects"}, {"score": 0.002636956926079255, "phrase": "software_design"}, {"score": 0.0025578967205807843, "phrase": "commonly_used_design_patterns"}, {"score": 0.002511600086227215, "phrase": "case_study"}, {"score": 0.002466139325703204, "phrase": "automatic_application"}, {"score": 0.0022923586577645143, "phrase": "design_exams"}, {"score": 0.0022101055924375725, "phrase": "suggested_approach"}, {"score": 0.0021569129153653777, "phrase": "main_design_problems"}, {"score": 0.0021049977753042253, "phrase": "selected_design_patterns"}], "paper_keywords": ["Conceptual Modeling", " Design Improvement", " Design Patterns", " Domain Engineering", " Model Retrieval", " Object-Process Methodology (OPM)", " Pattern Recognition", " Unified Modeling Language (UML)"], "paper_abstract": "Design patterns provide reusable solutions for recurring design problems. They constitute an important tool for improving software quality. However, correct usage of design patterns depends to a large extent on the designer. Design patterns often include models that describe the suggested solutions, while other aspects of the patterns are neglected or described informally only in text. Furthermore, design pattern solutions are usually described in an object-oriented fashion that is too close to the implementation, masking the essence of and motivation behind a particular design pattern. We suggest an approach to modeling the different aspects of design patterns and semi-automatically utilizing these models to improve software design. Evaluating our approach on commonly used design patterns and a case study of an automatic application for composing, taking, checking, and grading analysis and design exams, we found that the suggested approach successfully locates the main design problems modeled by the selected design patterns.", "paper_title": "Modeling Design Patterns for Semi-Automatic Reuse in System Design", "paper_id": "WOS:000273382200002"}