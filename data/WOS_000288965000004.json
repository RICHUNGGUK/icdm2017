{"auto_keywords": [{"score": 0.0428537214018149, "phrase": "non-functional_properties"}, {"score": 0.013477729074302834, "phrase": "ballad"}, {"score": 0.006498004419587965, "phrase": "service_oriented_architecture"}, {"score": 0.005978214714081285, "phrase": "business_process"}, {"score": 0.00481495049065317, "phrase": "early_aspects"}, {"score": 0.004772818068176176, "phrase": "end-to-end_model_driven_development"}, {"score": 0.00431388720289049, "phrase": "reusable_services"}, {"score": 0.004267563397625943, "phrase": "service-oriented_applications"}, {"score": 0.0038647641000798135, "phrase": "model-driven_development_framework"}, {"score": 0.0034168317227203206, "phrase": "new_per-process_strategy"}, {"score": 0.002729744174693491, "phrase": "multiple_services"}, {"score": 0.0026121403051734744, "phrase": "feature_modeling"}, {"score": 0.0025106241866273897, "phrase": "mutual_exclusion_constraints"}, {"score": 0.0021049977753042253, "phrase": "design_details"}], "paper_keywords": ["Aspect Oriented Software Development", " Business Process Modeling", " Feature Modeling", " Model-Driven Development", " Non-Functional Properties", " Service Oriented Architecture"], "paper_abstract": "In Service Oriented Architecture (SOA), each application is designed with a set of reusable services and a business process. To retain the reusability of services, non-functional properties of applications must be separated from their functional properties. This paper investigates a model-driven development framework that separates non-functional properties from functional properties and manages them. This framework proposes two components: (1) a programming language, called BALLAD, for a new per-process strategy to specify non-functional properties for business processes, and (2) a graphical modeling method, called FM-SNFPs, to define a series of constraints among non-functional properties. BALLAD leverages aspects in aspect oriented programming/modeling. Each aspect is used to specify a set of non-functional properties that crosscut multiple services in a business process. FM-SNFPs leverage the notion of feature modeling to define constraints among non-functional properties like dependency and mutual exclusion constraints. BALLAD and FM-SNFPs free application developers from manually specifying, maintaining and validating non-functional properties and constraints for services one by one, reducing the burdens/costs in development and maintenance of service-oriented applications. This paper describes the design details of BALLAD and FM-SNFPs, and demonstrates how they are used in developing service-oriented applications. BALLAD significantly reduces the costs to implement and maintain non-functional properties in service-oriented applications.", "paper_title": "Leveraging Early Aspects in End-to-End Model Driven Development for Non-Functional Properties in Service Oriented Architecture", "paper_id": "WOS:000288965000004"}