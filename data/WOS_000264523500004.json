{"auto_keywords": [{"score": 0.04920822493417558, "phrase": "complex_software_systems"}, {"score": 0.011494911268195242, "phrase": "software_system"}, {"score": 0.011164320895001354, "phrase": "principal_agent"}, {"score": 0.00481495049065317, "phrase": "contextual_resource_negotiation-based_task_allocation"}, {"score": 0.004624337472244542, "phrase": "software_agents"}, {"score": 0.004296809240805996, "phrase": "software_agent"}, {"score": 0.0037231102027070724, "phrase": "novel_task_allocation_model"}, {"score": 0.003668768542734106, "phrase": "contextual_resource_negotiation"}, {"score": 0.003615217162972726, "phrase": "presented_task_allocation_model"}, {"score": 0.0033712944392793195, "phrase": "high_contextual_enrichment_factor"}, {"score": 0.003334309053314909, "phrase": "required_resources"}, {"score": 0.0031786562062819327, "phrase": "assigned_task"}, {"score": 0.0031207372860045427, "phrase": "multiple_tasks"}, {"score": 0.002857041057269513, "phrase": "contextual_resources"}, {"score": 0.002763988044737562, "phrase": "novel_load"}, {"score": 0.00275383721396097, "phrase": "balancing_method"}, {"score": 0.0027036380093304747, "phrase": "overlarge_number"}, {"score": 0.002521064923851732, "phrase": "new_tasks"}, {"score": 0.00241214634516517, "phrase": "task_allocation"}, {"score": 0.0023335495163073544, "phrase": "contextual_resource_distribution"}, {"score": 0.002191993482098238, "phrase": "presented_model"}, {"score": 0.0021520139248317333, "phrase": "allocated_agents"}, {"score": 0.002128376306688074, "phrase": "previous_methods"}, {"score": 0.0021049977753042253, "phrase": "self-owned_resource_distribution"}], "paper_keywords": ["Complex software systems", " multiagents", " contextual resource", " negotiation", " task allocation", " load balancing"], "paper_abstract": "In the complex software systems, software agents always need to negotiate with other agents within their physical and social contexts when they execute tasks. Obviously, the capacity of a software agent to execute tasks is determined by not only itself but also its contextual agents; thus, the number of tasks allocated on an agent should be directly proportional to its self-owned resources as well as its contextual agents' resources. This paper presents a novel task allocation model based on the contextual resource negotiation. In the presented task allocation model, while a task comes to the software system, it is first assigned to a principal agent that has high contextual enrichment factor for the required resources; then, the principal agent will negotiate with its contextual agents to execute the assigned task. However, while multiple tasks come to the software system, it is necessary to make load balancing to avoid overconvergence of tasks at certain agents that are rich of contextual resources. Thus, this paper also presents a novel load balancing method: if there are overlarge number of tasks queued for a certain agent, the capacities of both the agent itself and its contextual agents to accept new tasks will be reduced. Therefore, in this paper, the task allocation and load balancing are implemented according to the contextual resource distribution of agents, which can be well suited for the characteristics of complex software systems; and the presented model can reduce more communication costs between allocated agents than the previous methods based on self-owned resource distribution of agents.", "paper_title": "Contextual Resource Negotiation-Based Task Allocation and Load Balancing in Complex Software Systems", "paper_id": "WOS:000264523500004"}