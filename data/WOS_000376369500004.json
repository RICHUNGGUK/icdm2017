{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "desired_design"}, {"score": 0.0046593017130868, "phrase": "software_quality"}, {"score": 0.003897742942358768, "phrase": "appropriate_set"}, {"score": 0.003807242767474929, "phrase": "challenging_task"}, {"score": 0.003666776809252461, "phrase": "novel_automated_approach"}, {"score": 0.0032602525602322832, "phrase": "improved_version"}, {"score": 0.0032145922365231093, "phrase": "current_program_design"}, {"score": 0.002885066818322192, "phrase": "sequence_alignment_algorithm"}, {"score": 0.002323663295811215, "phrase": "input_refactorings"}, {"score": 0.002196077907454079, "phrase": "intense_inter-refactoring_conflict"}], "paper_keywords": ["Refactoring", " Refactoring Scheduling", " Design Similarity"], "paper_abstract": "Refactoring is performed to improve software quality while leaving the behaviour of the system unchanged. In practice there are many opportunities for refactoring, however, due to conflicts and dependencies between refactorings, only certain orders of refactorings are applicable. Selecting and ordering an appropriate set of refactorings is a challenging task for a developer. We propose a novel automated approach to scheduling refactorings according to their conflicts and dependencies as well as their contribution to design quality expressed by a desired design. The desired design is an improved version of the current program design, and is produced by the developer. Our approach is capable of detecting conflicts and dependencies between refactorings, and uses a sequence alignment algorithm to identify the degree of similarity between two program designs expressed as sequence of characters, thereby measuring the contribution of a refactoring to achieving the desired design. We evaluated our approach on several sample programs and one non-trivial open source application. Our results demonstrate the ability of the approach to order the input refactorings so as to achieve the desired design even in the presence of intense inter-refactoring conflict and dependency, and when applied to a medium-sized, real-world application.", "paper_title": "Resolving Conflict and Dependency in Refactoring to a Desired Design", "paper_id": "WOS:000376369500004"}