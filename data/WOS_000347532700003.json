{"auto_keywords": [{"score": 0.04756494355891956, "phrase": "inter-process_communication"}, {"score": 0.00481495049065317, "phrase": "event-driven_asynchronous_method"}, {"score": 0.004701015188740582, "phrase": "d-bus_message_system"}, {"score": 0.0044277810648955624, "phrase": "event-driven_desktop_software"}, {"score": 0.00407161650109722, "phrase": "calculation-oriented_distributed_computing"}, {"score": 0.003927848423072668, "phrase": "existing_ipc_solutions"}, {"score": 0.003857871979942733, "phrase": "poor_fit"}, {"score": 0.0037216229812089686, "phrase": "event-driven_programming"}, {"score": 0.003526186748088922, "phrase": "d-bus_system"}, {"score": 0.0034220655476652683, "phrase": "practical_usage"}, {"score": 0.0032036590920314725, "phrase": "efficient_handling"}, {"score": 0.0031654684543975077, "phrase": "asynchronous_d-bus_method_calls"}, {"score": 0.0030171910207671205, "phrase": "hypertext_transfer_protocol_requests"}, {"score": 0.002945669860541221, "phrase": "asynchronous_javascript"}, {"score": 0.0029106327674973485, "phrase": "xml"}, {"score": 0.002893140560765452, "phrase": "web_applications"}, {"score": 0.002644179117033107, "phrase": "asynchronous_operations"}, {"score": 0.002612640527241776, "phrase": "event-driven_software"}, {"score": 0.00255068452076921, "phrase": "d-bus"}, {"score": 0.002387758958649797, "phrase": "event-driven_applications"}, {"score": 0.0023592715993204796, "phrase": "traditional_remote_procedure_call_systems"}, {"score": 0.0022085455097790537, "phrase": "electrical_power"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["asynchronous method call", " battery runtime", " D-Bus", " event-driven", " inter-process communication", " remote procedure call"], "paper_abstract": "The use of inter-process communication can yield many benefits for event-driven desktop software. However, inter-process communication (IPC) research has traditionally been focused on calculation-oriented distributed computing. This article shows that existing IPC solutions are a poor fit for the constraints imposed by event-driven programming. Our novel solution is built on top of the D-Bus system, which enjoys increased practical usage, but is still scantily researched. We focus on efficient handling of asynchronous D-Bus method calls, in a fashion similar to how Hypertext Transfer Protocol requests are treated in Asynchronous JavaScript and XML Web applications. This is supplemented with two design patterns that simplify processing of results for many kinds of asynchronous operations in event-driven software, besides just D-Bus calls. Our approach is shown to be more appropriate for event-driven applications than traditional remote procedure call systems in aspects as diverse as interactivity, threading complexity and electrical power usage. Copyright (C) 2013 John Wiley & Sons, Ltd.", "paper_title": "Event-driven asynchronous method calls with the D-Bus message system", "paper_id": "WOS:000347532700003"}