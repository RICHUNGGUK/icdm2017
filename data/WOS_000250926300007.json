{"auto_keywords": [{"score": 0.031830833723438666, "phrase": "pst"}, {"score": 0.00481495049065317, "phrase": "dynamic_ip_router_tables"}, {"score": 0.004106225442735525, "phrase": "updatable_ip_router_tables"}, {"score": 0.0037774893672602506, "phrase": "one-dimensional_dynamic_ip_lookup_problem"}, {"score": 0.003448705829033573, "phrase": "previous_solution"}, {"score": 0.0029629009627331355, "phrase": "n_elements"}, {"score": 0.0027671619871474764, "phrase": "single_rotation"}, {"score": 0.0026640466056415298, "phrase": "proposed_structures"}, {"score": 0.0025453546203590364, "phrase": "larger_class"}, {"score": 0.0025069746344846397, "phrase": "rebalancing_schemes"}, {"score": 0.0022711961447468114, "phrase": "ip_lookup_problem"}, {"score": 0.002169968849836984, "phrase": "attractive_implementations"}, {"score": 0.002137236968970666, "phrase": "priority_search_queues"}], "paper_keywords": ["IP router table", " min-augmented range tree", " priority search pennant", " priority search tree"], "paper_abstract": "We show that two data structures, min-augmented range tree and priority search pennant, efficiently support all the required operations for updatable IP router tables and argue that both structures are better suited for the one-dimensional dynamic IP lookup problem than the priority search tree (PST) used in a previous solution. It is possible to maintain both structures in time O(1) after a rotation, while PST with n elements may require Omega(log n) steps for a single rotation. Therefore, the proposed structures can be balanced using a larger class of rebalancing schemes compared to PST. Both structures axe also of interest independently of the IP lookup problem and may be used as attractive implementations of priority search queues in other contexts as well.", "paper_title": "Update-efficient data structures for dynamic IP router tables", "paper_id": "WOS:000250926300007"}