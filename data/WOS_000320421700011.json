{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "mytype"}, {"score": 0.004284302478991387, "phrase": "type-safe_reuse"}, {"score": 0.003987126862293129, "phrase": "mutually_recursive_definitions"}, {"score": 0.003361069456060196, "phrase": "current_type_systems"}, {"score": 0.0033011569787033297, "phrase": "type_safety"}, {"score": 0.0022218413146898887, "phrase": "small_calculus"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Binary methods", " Dynamic dispatch", " Exact types", " MyType", " Subtyping"], "paper_abstract": "The notion of MyType has been proposed to promote type-safe reuse of binary methods and recently extended to mutually recursive definitions. It is well known, however, that MyType does not match with subtyping well. In current type systems, type safety is guaranteed at the expense of subtyping, and hence dynamic dispatch. In this article, we propose two mechanisms, namely, nonheritable methods and exact statements to remedy the mismatch between MyType and subtyping. We rigorously prove their safety by modeling them in a small calculus. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Matching MyType to subtyping", "paper_id": "WOS:000320421700011"}