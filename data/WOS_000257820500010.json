{"auto_keywords": [{"score": 0.03395416915055736, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "automatic_distribution"}, {"score": 0.004753670676591174, "phrase": "higher-order_synchronous_dataflow_programs"}, {"score": 0.004545240514015278, "phrase": "distributed_systems"}, {"score": 0.0044873778175404475, "phrase": "synchronous_dataflow_programming_languages"}, {"score": 0.004050116768809519, "phrase": "existing_synchronous_dataflow_programming_language"}, {"score": 0.0038476708316022823, "phrase": "distributed_architecture"}, {"score": 0.003494866798828308, "phrase": "distributed_semantics"}, {"score": 0.0034063576796640603, "phrase": "distributed_execution"}, {"score": 0.003362944428837724, "phrase": "synchronous_programs"}, {"score": 0.003034916887102753, "phrase": "non-annotated_values"}, {"score": 0.002958021635132416, "phrase": "type_inference"}, {"score": 0.0028463059289874637, "phrase": "compilation_time"}, {"score": 0.0026184796288543856, "phrase": "type-directed_projection_operation"}, {"score": 0.0025034338848015187, "phrase": "centralized_typed_program"}, {"score": 0.0024556852466581527, "phrase": "local_program"}, {"score": 0.00236289633510808, "phrase": "computing_resource"}, {"score": 0.002244596395352896, "phrase": "automatic_distribution_mechanism"}, {"score": 0.0021049977753042253, "phrase": "existing_synchronous_data-flow_programming_language"}], "paper_keywords": ["languages", " synchronous programming", " distribution", " type systems", " functional programming"], "paper_abstract": "We address the design of distributed systems with synchronous dataflow programming languages. As modular design entails handling both architectural and functional modularity, our first contribution is to extend an existing synchronous dataflow programming language with primitives allowing the description of a distributed architecture and the localization of some expressions onto some processors. We also present a distributed semantics to formalize the distributed execution of synchronous programs. Our second contribution is to provide a type system, in order to infer the localization of non-annotated values by means of type inference and to ensure, at compilation time, the consistency of the distribution. Our third contribution is to provide a type-directed projection operation to obtain automatically, from a centralized typed program, the local program to be executed by each computing resource. The type system as well as the automatic distribution mechanism has been fully implemented in the compiler of an existing synchronous data-flow programming language.", "paper_title": "A type system for the automatic distribution of higher-order synchronous dataflow programs", "paper_id": "WOS:000257820500010"}