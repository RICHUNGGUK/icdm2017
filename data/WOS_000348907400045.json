{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "memory_accesses_through_symbolic_analyses"}, {"score": 0.0047395356621991935, "phrase": "c_programming_language"}, {"score": 0.004640808212832262, "phrase": "out-of-bounds_memory_accesses"}, {"score": 0.004449452743965974, "phrase": "c_programs"}, {"score": 0.004047141845635495, "phrase": "binary_code"}, {"score": 0.0040047396607954325, "phrase": "runtime_checks"}, {"score": 0.0031761255583359726, "phrase": "live_range_splitting_strategies"}, {"score": 0.002711506442590442, "phrase": "static_algorithms"}, {"score": 0.0026689487424251907, "phrase": "memory_accesses"}, {"score": 0.0025452314655691165, "phrase": "addresssanitizer"}, {"score": 0.002492098272172066, "phrase": "spec_cint"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_analysis"}], "paper_keywords": ["Languages", " Security", " Experimentation", " Security", " static analysis", " buffer overflow"], "paper_abstract": "The C programming language does not prevent out-of-bounds memory accesses. There exist several techniques to secure C programs; however, these methods tend to slow down these programs substantially, because they populate the binary code with runtime checks. To deal with this problem, we have designed and tested two static analyses - symbolic region and range analysis - which we combine to remove the majority of these guards. In addition to the analyses themselves, we bring two other contributions. First, we describe live range splitting strategies that improve the efficiency and the precision of our analyses. Secondly, we show how to deal with integer overflows, a phenomenon that can compromise the correctness of static algorithms that validate memory accesses. We validate our claims by incorporating our findings into AddressSanitizer. We generate SPEC CINT 2006 code that is 17% faster and 9% more energy efficient than the code produced originally by this tool. Furthermore, our approach is 50% more effective than Pentagons, a state-of-the-art analysis to sanitize memory accesses.", "paper_title": "Validation of Memory Accesses Through Symbolic Analyses", "paper_id": "WOS:000348907400045"}