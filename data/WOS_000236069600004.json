{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "embedded_memories"}, {"score": 0.04629981968402634, "phrase": "redundant_rows"}, {"score": 0.004675930527604869, "phrase": "novel_redundant_mechanism"}, {"score": 0.004257360656055417, "phrase": "memory_array"}, {"score": 0.0041586840496756474, "phrase": "conventional_approaches"}, {"score": 0.0038989120088094185, "phrase": "row_blocks"}, {"score": 0.0038534477978822133, "phrase": "column_blocks"}, {"score": 0.0032889671598112023, "phrase": "proposed_redundant_mechanism"}, {"score": 0.003101503914610488, "phrase": "redundancy_allocation_problem"}, {"score": 0.003066559232325923, "phrase": "np"}, {"score": 0.00270978310478061, "phrase": "elrm_algorithm"}, {"score": 0.002540285736232122, "phrase": "memory_cells"}, {"score": 0.0024667783849055634, "phrase": "simulation_results"}, {"score": 0.0024236964502593254, "phrase": "hardware_overhead"}, {"score": 0.002206290313627494, "phrase": "efficient_usage"}, {"score": 0.0021677478798910565, "phrase": "redundant_elements"}, {"score": 0.002129877319760485, "phrase": "manufacturing_yield"}, {"score": 0.0021049977753042253, "phrase": "repair_rate"}], "paper_keywords": ["embedded memory", " redundancy analysis", " reliability", " repair rate", " yield"], "paper_abstract": "A novel redundant mechanism is proposed for embedded memories in this paper. Redundant rows and columns are added into the memory array as in the conventional approaches. However, the redundant rows and columns are divided into row blocks and column blocks, respectively. The reconfiguration is performed at the row (column) block level instead of the conventional row (column) level. Based on the proposed redundant mechanism, we first show that the complexity of the redundancy allocation problem is NP-complete. Thereafter, an extended local repair-most (ELRM) algorithm suitable for built-in implementation is proposed. The complexity of the ELRM algorithm is O(N), where N denotes the number of memory cells. According to the simulation results, the hardware overhead for implementing this algorithm is below 0.17% for a 1024 x 2048-b SRAM. Due to the efficient usage of the redundant elements, the manufacturing yield, repair rate, and reliability can be improved significantly.", "paper_title": "Efficient built-in redundancy analysis for embedded memories with 2-D redundancy", "paper_id": "WOS:000236069600004"}