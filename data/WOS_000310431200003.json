{"auto_keywords": [{"score": 0.032211652311027864, "phrase": "bce"}, {"score": 0.007740485711952379, "phrase": "circuit-level_simplifications"}, {"score": 0.005373665221775873, "phrase": "cnf"}, {"score": 0.004787309936374976, "phrase": "cnf._boolean"}, {"score": 0.004746185232794986, "phrase": "sat"}, {"score": 0.004651458073288542, "phrase": "core_technology"}, {"score": 0.004545544875014869, "phrase": "formal_verification"}, {"score": 0.004391159805197013, "phrase": "sat-based_approach"}, {"score": 0.00415732498274046, "phrase": "arbitrary_boolean_formulas"}, {"score": 0.004133443893051179, "phrase": "conjunctive_normal_form"}, {"score": 0.0040743371651540345, "phrase": "structural_properties"}, {"score": 0.004039277955304532, "phrase": "original_problem"}, {"score": 0.00397005944607522, "phrase": "cnf."}, {"score": 0.0038796001080826778, "phrase": "cnf-level_preprocessing_and_sat_solver_techniques"}, {"score": 0.003802135020791801, "phrase": "related_techniques"}, {"score": 0.0037048469772068254, "phrase": "boolean"}, {"score": 0.003609942041018041, "phrase": "intricate_cnf_encodings"}, {"score": 0.003589193972443107, "phrase": "circuit-level_sat_instance_representations"}, {"score": 0.0034671773098114192, "phrase": "highly_efficient_cnf-level_clause"}, {"score": 0.003388138265382678, "phrase": "strong_support"}, {"score": 0.003291860057203047, "phrase": "input_format"}, {"score": 0.0032729341532134514, "phrase": "sat_solvers"}, {"score": 0.00317991916931357, "phrase": "cnf-level_simplification_techniques"}, {"score": 0.0031434552452869156, "phrase": "satelite-style_variable_elimination"}, {"score": 0.0030629282276491403, "phrase": "clause_elimination"}, {"score": 0.0028996174247972305, "phrase": "cnf_formulas"}, {"score": 0.0028663584600000023, "phrase": "standard_cnf_encoding"}, {"score": 0.002825319183890361, "phrase": "explicit_knowledge"}, {"score": 0.002800977405203334, "phrase": "underlying_circuit_structure"}, {"score": 0.0023969131085585602, "phrase": "orthogonal_techniques"}, {"score": 0.0023557715482776694, "phrase": "practical_effects"}, {"score": 0.002255973756526505, "phrase": "running_times"}, {"score": 0.0022429900751970797, "phrase": "state-of-the-art_sat_solvers"}, {"score": 0.0021666388559669035, "phrase": "original_witnesses"}, {"score": 0.0021541682088058677, "phrase": "satisfiable_cnf_formulas"}, {"score": 0.0021049977753042253, "phrase": "ve."}], "paper_keywords": ["Boolean satisfiability", " Preprocessing", " Problem structure", " Blocked clauses", " Variable elimination", " Boolean circuits"], "paper_abstract": "Boolean satisfiability (SAT) and its extensions have become a core technology in many application domains, such as planning and formal verification, and continue finding various new application domains today. The SAT-based approach divides into three steps: encoding, preprocessing, and search. It is often argued that by encoding arbitrary Boolean formulas in conjunctive normal form (CNF), structural properties of the original problem are not reflected in the CNF. This should result in the fact that CNF-level preprocessing and SAT solver techniques have an inherent disadvantage compared to related techniques applicable on the level of more structural SAT instance representations such as Boolean circuits. Motivated by this, various simplification techniques and intricate CNF encodings for circuit-level SAT instance representations have been proposed. On the other hand, based on the highly efficient CNF-level clause learning SAT solvers, there is also strong support for the claim that CNF is sufficient as an input format for SAT solvers. In this work we study the effect of CNF-level simplification techniques, focusing on SatElite-style variable elimination (VE) and what we call blocked clause elimination (BCE). We show that BCE is surprisingly effective both in theory and in practice on CNF formulas resulting from a standard CNF encoding for circuits: without explicit knowledge of the underlying circuit structure, it achieves the same level of simplification as a combination of circuit-level simplifications and previously suggested polarity-based CNF encodings. We also show that VE can achieve many of the same effects as BCE, but not all. On the other hand, it turns out that VE and BCE are indeed partially orthogonal techniques. We also study the practical effects of combining BCE and VE for reducing the size of formulas and on the running times of state-of-the-art SAT solvers. Furthermore, we address the problem of how to construct original witnesses to satisfiable CNF formulas when applying a combination of BCE and VE.", "paper_title": "Simulating Circuit-Level Simplifications on CNF", "paper_id": "WOS:000310431200003"}