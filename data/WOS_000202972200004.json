{"auto_keywords": [{"score": 0.04081949039983462, "phrase": "seamless_migration"}, {"score": 0.038801596718325504, "phrase": "serialized_data"}, {"score": 0.027527624047246183, "phrase": "destination_machine"}, {"score": 0.00481495049065317, "phrase": "seamless_migrations"}, {"score": 0.004786920391043703, "phrase": "mobile_applications"}, {"score": 0.0047590526875526335, "phrase": "application_migration"}, {"score": 0.0047175535881504626, "phrase": "key_enabling_technology_component"}, {"score": 0.004635632812446176, "phrase": "rich_semantics"}, {"score": 0.004608641771480322, "phrase": "location_awareness"}, {"score": 0.0045286036546553585, "phrase": "information_processing"}, {"score": 0.004334510750635859, "phrase": "key_properties"}, {"score": 0.004309265406782465, "phrase": "mobile_computing"}, {"score": 0.004112503056745914, "phrase": "large_overheads"}, {"score": 0.003856483559039742, "phrase": "application_state"}, {"score": 0.0037673755914695546, "phrase": "program's_execution"}, {"score": 0.00356387956365613, "phrase": "previous_approach"}, {"score": 0.0034815088791360443, "phrase": "dead_state"}, {"score": 0.003430993453999572, "phrase": "large_migration_overheads"}, {"score": 0.0033127168183223876, "phrase": "unacceptable_downtime"}, {"score": 0.0032266841850427798, "phrase": "static_compiler_analysis"}, {"score": 0.003198504446727102, "phrase": "assisted_framework"}, {"score": 0.00316131270466841, "phrase": "migration_overhead"}, {"score": 0.0030702085848191953, "phrase": "program's_performance"}, {"score": 0.0028370919298236724, "phrase": "safe_state"}, {"score": 0.0027877340899738314, "phrase": "immediate_migration"}, {"score": 0.0027152983329730173, "phrase": "frequent_pre-serialization"}, {"score": 0.0026837101137439207, "phrase": "migration_interrupt"}, {"score": 0.0024944216175108126, "phrase": "almost_no_interruption"}, {"score": 0.0024653965987479053, "phrase": "non-serialized_data"}, {"score": 0.002338897481852333, "phrase": "maximal_number"}, {"score": 0.002258183361711707, "phrase": "multimedia_applications"}, {"score": 0.002231901054023083, "phrase": "migration_latency"}, {"score": 0.002186639315960482, "phrase": "small_downtime"}, {"score": 0.0021049977753042253, "phrase": "efficient_methodology"}], "paper_keywords": ["algorithms", " performance", " measurement", " design", " experimentation", " seamless migration", " compiler", " mobile computing"], "paper_abstract": "Application migration is a key enabling technology component of mobile computing that allows rich semantics involving location awareness, trust and timeliness of information processing by moving the application where the data is. Seamlessness is one of the key properties of mobile computing and downtime must be eliminated/minimized during the migration to achieve seamlessness. But migration involves large overheads, dominant of which are the overheads due to serialization and deserialization [1]. To achieve seamless migration, an application state could be pre-serialized during the program's execution, and upon migration, the serialized data could be transmitted and deserialized to get the execution started. Previous approach to this problem [1] removed dead state but still suffered from large migration overheads due to serialization on-demand that could lead to an unacceptable downtime. In this work, we develop a static compiler analysis plus runtime assisted framework to decrease the migration overhead to almost zero while minimizing the degradation in the program's performance. We achieve such a goal by deciding which data to be pre-serialized through analysis, and pre-serializing the state in the program. A safe state is kept that would allow immediate migration upon the arrival of an interrupt while minimizing frequent pre-serialization. When the migration interrupt comes in, the serialized data can be transmitted directly to the destination machine. This allows an application to resume its execution at the destination machine with almost no interruption (only a small amount of non-serialized data needs to be serialized during migration). The optimization serializes the data in such a way that a maximal number of functions can execute without interruption after migration. Our experiments with multimedia applications show that the migration latency is significantly reduced leading to a small downtime. Thus, the contribution of the paper is to provide an efficient methodology to perform seamless migration while limiting the overhead.", "paper_title": "Minimizing downtime in seamless migrations of mobile applications", "paper_id": "WOS:000202972200004"}