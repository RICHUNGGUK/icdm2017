{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "automatic_design_of_application-specific_reconfigurable_processor_extensions"}, {"score": 0.004753194996637899, "phrase": "upak_synthesis_kernel"}, {"score": 0.0045726187330434025, "phrase": "new_tool"}, {"score": 0.004513957235071457, "phrase": "automatic_design"}, {"score": 0.004456044928556639, "phrase": "application-specific_reconfigurable_processor_extensions"}, {"score": 0.0043144799365586375, "phrase": "abstract_unified_patterns"}, {"score": 0.0042591158963728665, "phrase": "synthesis_kernel"}, {"score": 0.003967021436047945, "phrase": "complete_design_flow"}, {"score": 0.0038908817250961633, "phrase": "new_instructions"}, {"score": 0.003816197777388722, "phrase": "specific_instructions"}, {"score": 0.0037188360359702182, "phrase": "considered_application"}, {"score": 0.003647442345566347, "phrase": "newly_created_reconfigurable_architecture"}, {"score": 0.003577414339646767, "phrase": "identified_extensions"}, {"score": 0.003331915219811852, "phrase": "reconfigurable_unit"}, {"score": 0.003267925215811654, "phrase": "merged_patterns"}, {"score": 0.0031845067058084583, "phrase": "specially_developed_algorithms"}, {"score": 0.0031435968684569112, "phrase": "subgraph_isomorphism"}, {"score": 0.0030435998319355883, "phrase": "graph_matching_constraints"}, {"score": 0.002927780883930371, "phrase": "separate_algorithms"}, {"score": 0.00281635677605879, "phrase": "computational_patterns"}, {"score": 0.0027444334639134217, "phrase": "application_mapping"}, {"score": 0.0024586427394152196, "phrase": "experimental_results"}, {"score": 0.0023958326775913165, "phrase": "presented_method"}, {"score": 0.0023650305205893353, "phrase": "high_coverage"}, {"score": 0.0023346234464901978, "phrase": "application_graphs"}, {"score": 0.002304606411453748, "phrase": "small_number"}, {"score": 0.0022312377180023282, "phrase": "high_application_execution_speedup"}, {"score": 0.0021883400011393564, "phrase": "sequential_and_parallel_application_execution"}, {"score": 0.0021049977753042253, "phrase": "selected_patterns"}], "paper_keywords": ["Design", " Experimentation", " Reconfigurable architectures", " resource assignment", " scheduling", " system-level synthesis", " constraint programming"], "paper_abstract": "This article presents a new tool for automatic design of application-specific reconfigurable processor extensions based on UPaK (Abstract Unified Patterns Based Synthesis Kernel for Hardware and Software Systems). We introduce a complete design flow that identifies new instructions, selects specific instructions and schedules a considered application on the newly created reconfigurable architecture. The identified extensions are implemented as specialized sequential or parallel instructions. These instructions are executed on a reconfigurable unit implementing all merged patterns. Our method uses specially developed algorithms for subgraph isomorphism that are implemented as graph matching constraints. These constraints together with separate algorithms are able to efficiently identify computational patterns and carry out application mapping and scheduling. Our methods can handle both time-constrained and resource-constrained scheduling. Experimental results show that the presented method provides high coverage of application graphs with small number of patterns and ensures high application execution speedup both for sequential and parallel application execution with reconfigurable processor extensions implementing selected patterns.", "paper_title": "Automatic Design of Application-Specific Reconfigurable Processor Extensions with UPaK Synthesis Kernel", "paper_id": "WOS:000273323600001"}