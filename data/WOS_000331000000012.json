{"auto_keywords": [{"score": 0.02246846748295755, "phrase": "maude"}, {"score": 0.00481495049065317, "phrase": "domain-specific_discrete_event_modelling"}, {"score": 0.004631637679516574, "phrase": "graph_transformation"}, {"score": 0.004381749459671914, "phrase": "domain-specific_visual_languages"}, {"score": 0.004054299982508618, "phrase": "explicit_handling"}, {"score": 0.0038354405231002323, "phrase": "real_system"}, {"score": 0.003751228706861377, "phrase": "useful_simulation_metrics"}, {"score": 0.0036485497734171294, "phrase": "utilization_times"}, {"score": 0.003608266640131664, "phrase": "average_delays"}, {"score": 0.003509487090932835, "phrase": "vast_knowledge"}, {"score": 0.0033945024593626675, "phrase": "discrete_event_simulation_community"}, {"score": 0.0033015555065209865, "phrase": "novel_way"}, {"score": 0.0032470094613727433, "phrase": "explicit_time"}, {"score": 0.0031933617014256676, "phrase": "transformation_rules"}, {"score": 0.0030208364972341096, "phrase": "discrete_simulation_world_view"}, {"score": 0.0026584843838039166, "phrase": "efficient_techniques"}, {"score": 0.00262910358108176, "phrase": "discrete_event_simulation"}, {"score": 0.00251478366610296, "phrase": "future_event_set"}, {"score": 0.0021167332851144273, "phrase": "rewriting_logic_system"}], "paper_keywords": ["Graph transformation", " Discrete event simulation", " Domain-specific modelling"], "paper_abstract": "Graph transformation is being increasingly used to express the semantics of domain-specific visual languages since its graphical nature makes rules intuitive. However, many application domains require an explicit handling of time to accurately represent the behaviour of a real system and to obtain useful simulation metrics to measure throughputs, utilization times and average delays. Inspired by the vast knowledge and experience accumulated by the discrete event simulation community, we propose a novel way of adding explicit time to graph transformation rules. In particular, we take the event scheduling discrete simulation world view and provide rules with the ability to schedule the occurrence of other rules in the future. Hence, our work combines standard, efficient techniques for discrete event simulation (based on the handling of a future event set) and the intuitive, visual nature of graph transformation. Moreover, we show how our formalism can be used to give semantics to other timed approaches and provide an implementation on top of the rewriting logic system Maude.", "paper_title": "Domain-specific discrete event modelling and simulation using graph transformation", "paper_id": "WOS:000331000000012"}