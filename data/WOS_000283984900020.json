{"auto_keywords": [{"score": 0.0445088301638381, "phrase": "atomic_components"}, {"score": 0.03895000187878607, "phrase": "bip"}, {"score": 0.00481495049065317, "phrase": "source-to-source_architecture_transformation"}, {"score": 0.004435363840720883, "phrase": "component_framework"}, {"score": 0.0041490029730869345, "phrase": "composition_operators"}, {"score": 0.00374399358035391, "phrase": "component-based_program"}, {"score": 0.0036303546926971966, "phrase": "functionally_equivalent_program"}, {"score": 0.0034841647157189985, "phrase": "successive_application"}, {"score": 0.0028659990472580154, "phrase": "exhaustive_application"}, {"score": 0.0027789349951704177, "phrase": "bip_component"}, {"score": 0.0026945086500597304, "phrase": "equivalent_monolithic_component"}, {"score": 0.00248167018931442, "phrase": "component-based_description"}, {"score": 0.0024186620196958867, "phrase": "incremental_construction"}, {"score": 0.002309242063033298, "phrase": "efficient_monolithic_code"}, {"score": 0.0022161333611134806, "phrase": "design_methodology"}], "paper_keywords": [""], "paper_abstract": "Behavior, Interaction, Priorities (BIP) is a component framework for constructing systems from a set of atomic components by using two kinds of composition operators: interactions and priorities. In this paper, we present a method that transforms the interactions of a component-based program in BIP and generates a functionally equivalent program. The method is based on the successive application of three types of source-to-source transformations: flattening of components, flattening of connectors, and composition of atomic components. We show that the system of the transformations is confluent and terminates. By exhaustive application of the transformations, any BIP component can be transformed into an equivalent monolithic component. From this component, efficient standalone C++ code can be generated. The method combines advantages of component-based description such as clarity, incremental construction, and reasoning with the possibility to generate efficient monolithic code. It has been integrated in the design methodology for BIP and it has been successfully applied to two non trivial examples described in this paper.", "paper_title": "Source-to-Source Architecture Transformation for Performance Optimization in BIP", "paper_id": "WOS:000283984900020"}