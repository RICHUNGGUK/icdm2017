{"auto_keywords": [{"score": 0.02980736214951161, "phrase": "multithreading_environment"}, {"score": 0.02896921689056607, "phrase": "multicores_environment"}, {"score": 0.00481495049065317, "phrase": "symmetric_algorithms"}, {"score": 0.004779876533667754, "phrase": "parallelism_paradigm"}, {"score": 0.0047277417909824745, "phrase": "symmetric_ciphers"}, {"score": 0.004475436844227947, "phrase": "data_confidentiality"}, {"score": 0.004394350285140955, "phrase": "sensitive_data"}, {"score": 0.004362326712297089, "phrase": "unauthorized_access"}, {"score": 0.004252063063815893, "phrase": "computer_security_systems"}, {"score": 0.004175006647851034, "phrase": "research_efforts"}, {"score": 0.0039665679106594106, "phrase": "data_encryption_standard"}, {"score": 0.003937649447496154, "phrase": "advanced_encryption_standard"}, {"score": 0.0038380787059463075, "phrase": "current_implementations"}, {"score": 0.003754731210715724, "phrase": "huge_consumption"}, {"score": 0.0037273513742154237, "phrase": "computing_resources"}, {"score": 0.0036731870109004993, "phrase": "cpu_time"}, {"score": 0.0035671997165370403, "phrase": "low_throughput"}, {"score": 0.0035025108234594668, "phrase": "parallel_computing"}, {"score": 0.003438990973529508, "phrase": "data-intensive_problems"}, {"score": 0.003303259489028193, "phrase": "performance_analysis"}, {"score": 0.0031961879138783012, "phrase": "parallel-file-oriented_approaches"}, {"score": 0.0031497178007011666, "phrase": "parallel-segment-oriented_approaches"}, {"score": 0.002948798472453167, "phrase": "java_executor_framework"}, {"score": 0.002927278301452369, "phrase": "java_fork-join_framework"}, {"score": 0.002528300562452668, "phrase": "experiments'_results"}, {"score": 0.002455266773537278, "phrase": "sequential_execution"}, {"score": 0.002437339565360659, "phrase": "studied_algorithms"}, {"score": 0.0023582694348219233, "phrase": "encryption_time"}, {"score": 0.00234104879370883, "phrase": "decryption_time"}, {"score": 0.002323953608863511, "phrase": "memory_consumption"}, {"score": 0.002306982970571251, "phrase": "different_settings"}, {"score": 0.002290135975651888, "phrase": "variable_number"}, {"score": 0.0022568093356079414, "phrase": "variable_size"}, {"score": 0.002136087390959268, "phrase": "performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "parallel_paradigm"}], "paper_keywords": ["AES", " 3DES", " Blowfish", " Java Parallel Frameworks", " Parallelism"], "paper_abstract": "The symmetric ciphers are often used to provide confidentiality through encryption and achieve other cryptographic primitives. Ensuring the data confidentiality is needed to protect sensitive data from unauthorized access as well as demanding to build computer security systems and applications. The research efforts have been proposed several symmetric encryption algorithms; the most well-known are such as Data Encryption Standard, Advanced Encryption Standard, Blowfish. However, the current implementations of these algorithms suffer from huge consumption of computing resources (such as CPU time, memory, etc.) and low throughput. Thus, using parallel computing to solve computationally and data-intensive problems is very useful solution. In this paper, we present a performance analysis for the three symmetric encryption algorithms using four different strategies, two for parallel-file-oriented approaches and two for parallel-segment-oriented approaches that do not require any code changing inside them and by using two Java frameworks, which are, Java Executor Framework and Java Fork-Join Framework. These strategies are parallel-file-oriented under multithreading environment, parallel-file-oriented under multicores environment, parallel-segment-oriented under multithreading environment and parallel-segment-oriented under multicores environment. The comparison between experiments' results is conducted to compare those strategies and sequential execution of studied algorithms and compare those strategies themselves in terms of encryption time, decryption time and memory consumption at different settings including variable number of files and variable size of file. The aim of this paper is to show the amount of performance improvement achieved by applying parallel paradigm.", "paper_title": "Performance Analysis of Symmetric Algorithms using Parallelism Paradigm", "paper_id": "WOS:000373692800004"}