{"auto_keywords": [{"score": 0.035439003348600596, "phrase": "la-solving_methods"}, {"score": 0.015719716506582538, "phrase": "imperative_programs"}, {"score": 0.012495461503632043, "phrase": "horn"}, {"score": 0.012085597077329407, "phrase": "set_pc"}, {"score": 0.01200528157180065, "phrase": "constrained_horn_clauses"}, {"score": 0.00475070135279933, "phrase": "horn_clauses"}, {"score": 0.0044870272550540415, "phrase": "automated_transformation"}, {"score": 0.004397487039229447, "phrase": "program_prog"}, {"score": 0.00432423070113186, "phrase": "partial_correctness_specification"}, {"score": 0.004002596930301241, "phrase": "set_spec"}, {"score": 0.003975781274672803, "phrase": "possibly_recursive_horn_clauses"}, {"score": 0.0037549546301384336, "phrase": "verification_method"}, {"score": 0.003227643104496149, "phrase": "linear_arithmetic_interpretations"}, {"score": 0.002811770047652563, "phrase": "nonlinear_clauses"}, {"score": 0.002541741549046619, "phrase": "linear_clauses"}, {"score": 0.002199189123395672, "phrase": "automatic_way"}, {"score": 0.002155204688099519, "phrase": "experimental_results"}, {"score": 0.0021192223086507946, "phrase": "preliminary_implementation"}], "paper_keywords": ["Program verification", " Partial correctness specifications", " Horn clauses", " Constraint Logic Programming", " Program transformation"], "paper_abstract": "We present a method for verifying the correctness of imperative programs which is based on the automated transformation of their specifications. Given a program prog, we consider a partial correctness specification of the form {phi} prog {psi}, where the assertions phi and psi are predicates defined by a set Spec of possibly recursive Horn clauses with linear arithmetic (LA) constraints in their premise (also called constrained Horn clauses). The verification method consists in constructing a set PC of constrained Horn clauses whose satisfiability implies that {phi} prog {psi} is valid. We highlight some limitations of state-of-the-art constrained Horn clause solving methods, here called LA-solving methods, which prove the satisfiability of the clauses by looking for linear arithmetic interpretations of the predicates. In particular, we prove that there exist some specifications that cannot be proved valid by any of those LA-solving methods. These specifications require the proof of satisfiability of a set PC of constrained Horn clauses that contain nonlinear clauses (that is, clauses with more than one atom in their premise). Then, we present a transformation, called linearization, that converts PC into a set of linear clauses (that is, clauses with at most one atom in their premise). We show that several specifications that could not be proved valid by LA-solving methods, can be proved valid after linearization. We also present a strategy for performing linearization in an automatic way and we report on some experimental results obtained by using a preliminary implementation of our method.", "paper_title": "Proving correctness of imperative programs by linearizing constrained Horn clauses", "paper_id": "WOS:000367692200016"}