{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nested_parallelization"}, {"score": 0.0047292449487169345, "phrase": "openmp._openmp"}, {"score": 0.004481132747216135, "phrase": "de_facto_standard"}, {"score": 0.004401342842183475, "phrase": "shared_memory"}, {"score": 0.0043619799095455415, "phrase": "parallel_programming"}, {"score": 0.00428442534644254, "phrase": "fortran"}, {"score": 0.003916098498242888, "phrase": "first_openmp_specification"}, {"score": 0.003611751858608048, "phrase": "first_commercially_available_compilers"}, {"score": 0.0035156341294017685, "phrase": "optional_part"}, {"score": 0.0030171910207671205, "phrase": "content-based_image_retrieval"}, {"score": 0.0027825094419000637, "phrase": "critical_points"}, {"score": 0.0027328817607818207, "phrase": "multi-block_cfd_datasets"}, {"score": 0.0025661497249840227, "phrase": "navier-stokes"}, {"score": 0.002143247921132179, "phrase": "nested_parallelization_support"}, {"score": 0.002105001850722569, "phrase": "openmp."}], "paper_keywords": ["OpenMP", " nested parallelization", " ccNUMA", " shared memory parallelization"], "paper_abstract": "OpenMP is widely accepted as a de facto standard for shared memory parallel programming in Fortran, C and C++. Nested parallelization has been included in the first OpenMP specification, but it took a few years until the first commercially available compilers supported this optional part of the specification. We employed nested parallelization using OpenMP in three production codes: a C++ code for content-based image retrieval, a C++ code for the computation of critical points in multi-block CFD datasets, and a multi-block Navier-Stokes solver written in Fortran90. In this paper we discuss the opportunities as well as the deficiencies of the nested parallelization support in OpenMP.", "paper_title": "Nested parallelization with OpenMP", "paper_id": "WOS:000249405600003"}