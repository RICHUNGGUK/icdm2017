{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multiversion_video_streams"}, {"score": 0.0047732596509542135, "phrase": "traditional_video_servers"}, {"score": 0.004690952711665194, "phrase": "heterogeneous_client_populations"}, {"score": 0.0045108906244892165, "phrase": "different_bit_rates"}, {"score": 0.004375613460102577, "phrase": "multilayer_scalable_coding_techniques"}, {"score": 0.004262881313926916, "phrase": "individual_clients"}, {"score": 0.003856898743576605, "phrase": "stream_version"}, {"score": 0.003660614912817745, "phrase": "multilayer_scalable_stream"}, {"score": 0.003459191419478298, "phrase": "optimal_rate"}, {"score": 0.0034291991359158827, "phrase": "encoding_granularity"}, {"score": 0.003340768341189764, "phrase": "scalable_video_stream"}, {"score": 0.0032830808525570903, "phrase": "system-defined_utility_function"}, {"score": 0.0031984060035955292, "phrase": "proposed_algorithm"}, {"score": 0.0031023662967184216, "phrase": "optimal_rates"}, {"score": 0.0030754582519753474, "phrase": "multiversion_streams"}, {"score": 0.002893505913503472, "phrase": "arbitrary_utility_functions"}, {"score": 0.002675252546913683, "phrase": "scalable_video_streams"}, {"score": 0.002640507929183363, "phrase": "client_utilities"}, {"score": 0.002462664392109308, "phrase": "utility_functions"}, {"score": 0.0024201029474586007, "phrase": "streaming_systems"}, {"score": 0.0023782753249846794, "phrase": "effective_rate"}, {"score": 0.0022967713922705, "phrase": "client_bandwidth"}, {"score": 0.002266931093770838, "phrase": "stream_rate"}, {"score": 0.002160788801119063, "phrase": "psnr."}, {"score": 0.0021049977753042253, "phrase": "heuristic_algorithm"}], "paper_keywords": ["multimedia communication", " scalable coding", " video quality optimization", " video streaming"], "paper_abstract": "Traditional video servers partially cope with heterogeneous client populations by maintaining a few versions of the same stream with different bit rates. More recent video servers leverage multilayer scalable coding techniques to customize the quality for individual clients. In both cases, heuristic, error-prone, techniques are currently used by administrators to determine either the rate of each stream version, or the granularity and rate of each layer in a multilayer scalable stream. In this paper, we propose an algorithm to determine the optimal rate and encoding granularity of each layer in a scalable video stream that maximizes a system-defined utility function for a given client distribution. The proposed algorithm can be used to compute the optimal rates of multiversion streams as well. Our algorithm is general in the sense that it can employ arbitrary utility functions for clients. We implement our algorithm and verify its optimality, and we show how various structuring of scalable video streams affect the client utilities. To demonstrate the generality of our algorithm, we consider three utility functions in our experiments. These utility functions model various aspects of streaming systems, including the effective rate received by clients, the mismatch between client bandwidth and received stream rate, and the client-perceived quality in terms of PSNR. We compare our algorithm against a heuristic algorithm that has been used before in the literature, and we show that our algorithm outperforms it in all cases.", "paper_title": "Optimal coding of multilayer and multiversion video streams", "paper_id": "WOS:000251952200012"}