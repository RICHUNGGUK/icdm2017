{"auto_keywords": [{"score": 0.049178471674397164, "phrase": "dependence_graphs"}, {"score": 0.00481495049065317, "phrase": "kinetic_dependence_graphs"}, {"score": 0.004769444094319619, "phrase": "task_graphs"}, {"score": 0.004635477242873163, "phrase": "runtime_systems"}, {"score": 0.00452670409375785, "phrase": "parallel_execution"}, {"score": 0.004462663711734448, "phrase": "problem_domains"}, {"score": 0.004399525320473839, "phrase": "dense_linear_algebra"}, {"score": 0.004357927940322685, "phrase": "signal_processing"}, {"score": 0.004155742403177802, "phrase": "static_analysis"}, {"score": 0.004058180509184539, "phrase": "emerging_problem_domains"}, {"score": 0.004000741805312148, "phrase": "graph_analytics"}, {"score": 0.0037432199549135826, "phrase": "complex_functions"}, {"score": 0.00370780481244907, "phrase": "runtime_values"}, {"score": 0.0034526191487098093, "phrase": "novel_approach"}, {"score": 0.0032456625605347417, "phrase": "data_structure"}, {"score": 0.003199687131875466, "phrase": "kinetic_dependence_graph"}, {"score": 0.0030656196752517836, "phrase": "dependence_graph"}, {"score": 0.003022186855664124, "phrase": "update_rules"}, {"score": 0.002868116925014397, "phrase": "dependence_structure"}, {"score": 0.0027218799769229596, "phrase": "simple_programming_model"}, {"score": 0.0025954008219792337, "phrase": "high_level"}, {"score": 0.002486589906779091, "phrase": "galois_system"}, {"score": 0.002405117146495066, "phrase": "kdg"}, {"score": 0.0021049977753042253, "phrase": "out-performing_third-party_implementations"}], "paper_keywords": ["ordered algorithms", " kinetic dependence graph", " stable-source and unstable-source algorithms"], "paper_abstract": "Task graphs or dependence graphs are used in runtime systems to schedule tasks for parallel execution. In problem domains such as dense linear algebra and signal processing, dependence graphs can be generated from a program by static analysis. However, in emerging problem domains such as graph analytics, the set of tasks and dependences between tasks in a program are complex functions of runtime values and cannot be determined statically. In this paper, we introduce a novel approach for exploiting parallelism in such programs. This approach is based on a data structure called the kinetic dependence graph (KDG), which consists of a dependence graph together with update rules that incrementally update the graph to reflect changes in the dependence structure whenever a task is completed. We have implemented a simple programming model that allows programmers to write these applications at a high level of abstraction, and a runtime within the Galois system [15] that builds the KDG automatically and executes the program in parallel. On a suite of programs that are difficult to parallelize otherwise, we have obtained speedups of up to 33 on 40 cores, out-performing third-party implementations in many cases.", "paper_title": "Kinetic Dependence Graphs", "paper_id": "WOS:000370874900032"}