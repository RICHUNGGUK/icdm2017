{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "haskell"}, {"score": 0.0072907404614660255, "phrase": "hoare"}, {"score": 0.004518442937844318, "phrase": "programming_languages"}, {"score": 0.004400329132129292, "phrase": "dependent_type_systems"}, {"score": 0.004353948887538618, "phrase": "proof_assistants"}, {"score": 0.004217708394188058, "phrase": "important_invariants"}, {"score": 0.004000010693331517, "phrase": "type-based_program_verification"}, {"score": 0.003916098498242888, "phrase": "promising_compromise"}, {"score": 0.0038748022659578865, "phrase": "plain_old_types"}, {"score": 0.0034299649219748513, "phrase": "industry-quality_implementation"}, {"score": 0.003270092550315648, "phrase": "large_scale_programs"}, {"score": 0.0031176485976102688, "phrase": "complete_compiler"}, {"score": 0.0030847461428168614, "phrase": "system_f"}, {"score": 0.002988101395789399, "phrase": "ghc_type_checker"}, {"score": 0.0026447893350441502, "phrase": "reasonably_few_annotations"}, {"score": 0.002561892963059385, "phrase": "actual_code"}, {"score": 0.002365815362517737, "phrase": "extra_code_comparable"}, {"score": 0.00229164285862567, "phrase": "typical_typed_intermediate_languages"}, {"score": 0.002208035721125305, "phrase": "static_checking"}, {"score": 0.0021049977753042253, "phrase": "remaining_hurdles"}], "paper_keywords": ["languages", " verification", " compilation", " typed assembly language", " de Bruijn", " higher-order abstract syntax"], "paper_abstract": "There has been a lot of interest of late for programming languages that incorporate features from dependent type systems and proof assistants, in order to capture important invariants of the program in the types. This allows type-based program verification and is a promising compromise between plain old types and full blown Hoare logic proofs. The introduction of GADTs in GHC (and more recently type families) made such dependent typing available in an industry-quality implementation, making it possible to consider its use in large scale programs. We have undertaken the construction of a complete compiler for System F, whose main property is that the GHC type checker verifies mechanically that each phase of the compiler properly preserves types. Our particular focus is on \"types rather than proofs\": reasonably few annotations that do not overwhelm the actual code. We believe it should be possible to write such a type-preserving compiler with an amount of extra code comparable to what is necessary for typical typed intermediate languages, but with the advantage of static checking. We will show in this paper the remaining hurdles to reach this goal.", "paper_title": "A type-preserving compiler in Haskell", "paper_id": "WOS:000259436700009"}