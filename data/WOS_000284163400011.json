{"auto_keywords": [{"score": 0.046176417880494224, "phrase": "firewall_packet_matching"}, {"score": 0.03140525411399661, "phrase": "perimeter_rules_model"}, {"score": 0.004666043394407466, "phrase": "network_perimeter"}, {"score": 0.004340724551091173, "phrase": "point_location_problem"}, {"score": 0.004232946822003551, "phrase": "five_fields"}, {"score": 0.004076256554327002, "phrase": "firewall_rule"}, {"score": 0.0040000913037139115, "phrase": "first_matching_rule"}, {"score": 0.003925343598987006, "phrase": "computational_geometry"}, {"score": 0.003779996603264111, "phrase": "classical_algorithm"}, {"score": 0.0037093463810112656, "phrase": "firewall_domain"}, {"score": 0.003651477256755136, "phrase": "resulting_algorithm"}, {"score": 0.0036285822640427525, "phrase": "geometric_efficient_matching"}, {"score": 0.003549570370358334, "phrase": "gem_algorithm"}, {"score": 0.0035162351426730972, "phrase": "logarithmic_matching_time_performance"}, {"score": 0.003461368259695762, "phrase": "algorithm's_theoretical_worst-case_space_complexity"}, {"score": 0.0033018343529712876, "phrase": "perceived_high_space_complexity"}, {"score": 0.0032811244238035455, "phrase": "gem-like_algorithms"}, {"score": 0.0032197682621899703, "phrase": "earlier_works"}, {"score": 0.0030713353414700295, "phrase": "excellent_choice"}, {"score": 0.003013890317967077, "phrase": "real_firewall_rule-bases"}, {"score": 0.0028211393326371035, "phrase": "extensive_simulation"}, {"score": 0.002542782716137888, "phrase": "additional_space_improving_heuristics"}, {"score": 0.002471740959383183, "phrase": "space_requirement"}, {"score": 0.002335542599406245, "phrase": "linux_iptables_open-source_firewall"}, {"score": 0.002291827910789624, "phrase": "real_traffic_loads"}, {"score": 0.0021998931213841567, "phrase": "standard_pc"}, {"score": 0.0021049977753042253, "phrase": "efficient_and_practical_algorithm"}], "paper_keywords": ["Network communication", " network-level security and protection"], "paper_abstract": "Since firewalls need to filter all the traffic crossing the network perimeter, they should be able to sustain a very high throughput, or risk becoming a bottleneck. Firewall packet matching can be viewed as a point location problem: Each packet (point) has five fields (dimensions), which need to be checked against every firewall rule in order to find the first matching rule. Thus, algorithms from computational geometry can be applied. In this paper, we consider a classical algorithm that we adapted to the firewall domain. We call the resulting algorithm \"Geometric Efficient Matching\" (GEM). The GEM algorithm enjoys a logarithmic matching time performance. However, the algorithm's theoretical worst-case space complexity is O(n(4)) for a rule-base with n rules. Because of this perceived high space complexity, GEM-like algorithms were rejected as impractical by earlier works. Contrary to this conclusion, this paper shows that GEM is actually an excellent choice. Based on statistics from real firewall rule-bases, we created a Perimeter rules model that generates random, but nonuniform, rule-bases. We evaluated GEM via extensive simulation using the Perimeter rules model. Our simulations show that on such rule-bases, GEM uses near-linear space, and only needs approximately 13 MB of space for rule-bases of 5,000 rules. Moreover, with use of additional space improving heuristics, we have been able to reduce the space requirement to 2-3 MB for 5,000 rules. But most importantly, we integrated GEM into the code of the Linux iptables open-source firewall, and tested it on real traffic loads. Our GEM-iptables implementation managed to filter over 30,000 packets-per-second on a standard PC, even with 10,000 rules. Therefore, we believe that GEM is an efficient and practical algorithm for firewall packet matching.", "paper_title": "The Geometric Efficient Matching Algorithm for Firewalls", "paper_id": "WOS:000284163400011"}