{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrent_programs"}, {"score": 0.027195486671260944, "phrase": "rich_test"}, {"score": 0.011811993536272535, "phrase": "reachability_testing"}, {"score": 0.010847614637561998, "phrase": "new_method"}, {"score": 0.004384960761826366, "phrase": "synchronization_sequences"}, {"score": 0.004024485331377682, "phrase": "static_models"}, {"score": 0.0037516215763875225, "phrase": "general_execution_model"}, {"score": 0.0030625949549620475, "phrase": "partially_ordered_synchronization_sequence"}, {"score": 0.002599365215003002, "phrase": "prototype_reachability_testing_tool"}, {"score": 0.0024803459795996116, "phrase": "empirical_results"}, {"score": 0.002311933249234786, "phrase": "partial_order_reduction-based_tool"}, {"score": 0.0022760856906838814, "phrase": "verisoft"}], "paper_keywords": ["software testing", " reachability testing", " concurrent programming"], "paper_abstract": "One approach to testing concurrent programs, called reachability testing, generates synchronization sequences automatically and on-the-fly, without constructing any static models. In this paper, we present a general execution model for concurrent programs that allows reachability testing to be applied to several commonly used synchronization constructs. We also present a new method for performing reachability testing. This new method guarantees that every partially ordered synchronization sequence will be exercised exactly once without having to save any sequences that have already been exercised. We describe a prototype reachability testing tool called Rich Test and report some empirical results, including a comparison between Rich Test and a partial order reduction-based tool called VeriSoft. Rich Test performed significantly better for the programs in our study.", "paper_title": "Reachability testing of concurrent programs", "paper_id": "WOS:000238479000003"}