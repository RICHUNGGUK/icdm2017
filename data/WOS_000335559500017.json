{"auto_keywords": [{"score": 0.050077496691967684, "phrase": "energy_consumption"}, {"score": 0.04135205133273675, "phrase": "sds"}, {"score": 0.012338858699513221, "phrase": "conflicting_transactions"}, {"score": 0.004781915513030716, "phrase": "hardware_transactional_memory_systems"}, {"score": 0.004684157900507474, "phrase": "new_paradigms"}, {"score": 0.004636027593561925, "phrase": "multithreaded_programming"}, {"score": 0.004604214511792668, "phrase": "transactional_memory"}, {"score": 0.0045727834327200885, "phrase": "tm"}, {"score": 0.0044483793824152944, "phrase": "promising_alternative"}, {"score": 0.004417848254181138, "phrase": "deadlock-prone_lock-based_synchronization"}, {"score": 0.004327500975159818, "phrase": "future_many-core_cmp_architectures"}, {"score": 0.004253618550301311, "phrase": "hardware_support"}, {"score": 0.00422442601022796, "phrase": "tm."}, {"score": 0.004152288616186981, "phrase": "power_dissipation"}, {"score": 0.004109600767747015, "phrase": "first_class_consideration"}, {"score": 0.004081385289516914, "phrase": "multicore_processor_designs"}, {"score": 0.003970439654470374, "phrase": "selective_dynamic_serialization"}, {"score": 0.003889206369317587, "phrase": "new_technique"}, {"score": 0.003822778117250714, "phrase": "degrading_performance"}, {"score": 0.003731673223879279, "phrase": "wasted_work"}, {"score": 0.00369329349984294, "phrase": "aborted_transactions"}, {"score": 0.003555902292752528, "phrase": "hardware_transactional_memory"}, {"score": 0.0035314832903638863, "phrase": "htm"}, {"score": 0.003471135453226184, "phrase": "eager_conflict_management_policy"}, {"score": 0.0030872017736888113, "phrase": "executing_transaction"}, {"score": 0.002982557900944478, "phrase": "stalling_transactions"}, {"score": 0.002793380001054064, "phrase": "best_trade-off"}, {"score": 0.0027551040319267446, "phrase": "energy_savings"}, {"score": 0.002736162634990377, "phrase": "network_traffic"}, {"score": 0.00271735110571002, "phrase": "sds_implementations"}, {"score": 0.0026161698049580804, "phrase": "serialization_mode"}, {"score": 0.002553775923781413, "phrase": "gems"}, {"score": 0.0024756677425317474, "phrase": "logtm-se_eager-eager_htm_system"}, {"score": 0.002416589459425828, "phrase": "stamp_suite"}, {"score": 0.002255431275670053, "phrase": "high_contention_scenarios"}, {"score": 0.002224510044064184, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "network_traffic_level"}], "paper_keywords": ["Many-core CMPs", " Hardware transactional memory", " Transactions", " Run-time serialization", " Energy consumption", " Execution time"], "paper_abstract": "In the search for new paradigms to simplify multithreaded programming, Transactional Memory (TM) is currently being advocated as a promising alternative to deadlock-prone lock-based synchronization. In this way, future many-core CMP architectures may need to provide hardware support for TM. On the other hand, power dissipation constitutes a first class consideration in multicore processor designs. In this work, we propose Selective Dynamic Serialization (SDS) as a new technique to improve energy consumption without degrading performance in applications with conflicting transactions by avoiding wasted work due to aborted transactions. Our proposal, which is implemented on top of a hardware transactional memory (HTM) system with an eager conflict management policy, detects and serializes conflicting transactions dynamically (at run-time). In its simplest form, in case of conflict, one transaction is allowed to continue whilst the rest are completely stalled. Once the executing transaction has finished, it wakes up several of the stalling transactions. More elaborated implementations of SDS try to delay this behavior until serialization of transactions is profitable, achieving the best trade-off between performance, energy savings and network traffic. SDS implementations differ from each other in the condition that triggers the serialization mode. We have evaluated several SDS schemes using GEMS, a full-system simulator implementing the LogTM-SE Eager-Eager HTM system, and several benchmarks from the STAMP suite. Results for a 16-core CMP show that SDS obtains reductions of 6 % on average in energy consumption (more than 20 % in high contention scenarios) in a wide range of benchmarks without affecting, on average, execution time. At the same time, network traffic level is also reduced by 22 %.", "paper_title": "Selective dynamic serialization for reducing energy consumption in hardware transactional memory systems", "paper_id": "WOS:000335559500017"}