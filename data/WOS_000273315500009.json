{"auto_keywords": [{"score": 0.025249409963675837, "phrase": "petri"}, {"score": 0.00481495049065317, "phrase": "mobile_petri"}, {"score": 0.004597244847332915, "phrase": "place-transition_petri"}, {"score": 0.004274766964161756, "phrase": "input_token"}, {"score": 0.003896717568943166, "phrase": "mobile_petri_nets"}, {"score": 0.0037450707321601963, "phrase": "dynamic_nets"}, {"score": 0.0035755653799043, "phrase": "new_nets"}, {"score": 0.0032591491777773035, "phrase": "petri_nets"}, {"score": 0.003153041030690117, "phrase": "simple_hierarchy"}, {"score": 0.0030706395717772436, "phrase": "increasing_degrees"}, {"score": 0.0027619548979328154, "phrase": "former_class"}, {"score": 0.0025849489224175548, "phrase": "fournet"}, {"score": 0.0025509294021449254, "phrase": "gonthier"}, {"score": 0.0023096222276192194, "phrase": "main_difference"}], "paper_keywords": [""], "paper_abstract": "We add mobility to Place-Transition Petri nets: tokens are names for places, and an input token of a transition can be used in its postset to specify a destination. Mobile Petri nets are then further extended to dynamic nets by adding the possibility of creating new nets during the firing of a transition. In this way, starting from Petri nets, we define a simple hierarchy of nets with increasing degrees of dynamicity. For each class in this hierarchy, we provide its encoding in the former class. Our work was largely inspired by the join-calculus of Fournet and Gonthier, which turns out to be a (well-motivated) particular case of dynamic Petri nets. The main difference is that, in the preset of a transition, we allow both non-linear patterns (name unification) and (locally) free names for input places (that is, we remove the locality constraint, and preserve reflexion).", "paper_title": "Mobile Petri nets", "paper_id": "WOS:000273315500009"}