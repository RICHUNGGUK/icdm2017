{"auto_keywords": [{"score": 0.04455074562181148, "phrase": "javacop"}, {"score": 0.008714007791877204, "phrase": "java"}, {"score": 0.007364936362518544, "phrase": "pluggable_type_systems"}, {"score": 0.005872258923817903, "phrase": "type_systems"}, {"score": 0.00475924837336259, "phrase": "pluggable_types"}, {"score": 0.004622783000449884, "phrase": "multiple_type_systems"}, {"score": 0.003904713104101532, "phrase": "simple_declarative_language"}, {"score": 0.003837089839193524, "phrase": "program_constraints"}, {"score": 0.003726967166630923, "phrase": "program's_abstract_syntax_tree"}, {"score": 0.003415137969569376, "phrase": "javacop_framework"}, {"score": 0.003336468343971626, "phrase": "dataflow_analysis_api"}, {"score": 0.0031660031870090434, "phrase": "flow-sensitive_information"}, {"score": 0.003039445153076014, "phrase": "novel_test_framework"}, {"score": 0.0024784363584530976, "phrase": "strong_invariants"}, {"score": 0.0023654615987859402, "phrase": "general-purpose_checkers"}, {"score": 0.0022974765563692776, "phrase": "type_system"}, {"score": 0.0022708315711029423, "phrase": "nonnull_references"}, {"score": 0.002231441081806766, "phrase": "domain-specific_ones"}, {"score": 0.0021049977753042253, "phrase": "library's_usage_rules"}], "paper_keywords": ["Design", " Languages", " Reliability", " JAVACOP", " pluggable type systems"], "paper_abstract": "Pluggable types enable users to enforce multiple type systems in one programming language. We have developed a suite of tools, called the JAVACOP framework, that allows developers to create pluggable type systems for Java. JAVACOP provides a simple declarative language in which program constraints are defined over a program's abstract syntax tree. The JAVACOP compiler automatically enforces these constraints on programs during compilation. The JAVACOP framework also includes a dataflow analysis API in order to support type systems which depend on flow-sensitive information. Finally, JAVACOP includes a novel test framework which helps users gain confidence in the correctness of their pluggable type systems. We demonstrate the framework by discussing a number of pluggable type systems which have been implemented in JAVACOP in order to detect errors and enforce strong invariants in programs. These type systems range from general-purpose checkers, such as a type system for nonnull references, to domain-specific ones, such as a checker for conformance to a library's usage rules.", "paper_title": "JAVACOP: Declarative Pluggable Types for Java", "paper_id": "WOS:000274376200001"}