{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_requirements"}, {"score": 0.01241972354336547, "phrase": "log_data"}, {"score": 0.004579780586951551, "phrase": "artificial_intelligence_theories"}, {"score": 0.004117329555194574, "phrase": "goal_models"}, {"score": 0.0038431888954930083, "phrase": "monitoring_component"}, {"score": 0.003701401653850141, "phrase": "truth_values"}, {"score": 0.003542557455905503, "phrase": "system_action_executions"}, {"score": 0.0033905067962602515, "phrase": "different_levels"}, {"score": 0.003265365666305185, "phrase": "diagnostic_feedback"}, {"score": 0.00320453237792, "phrase": "diagnostic_component"}, {"score": 0.0029722900280316216, "phrase": "problematic_components"}, {"score": 0.0028986672783671147, "phrase": "diagnostic_reasoning"}, {"score": 0.0028091907694771613, "phrase": "diagnostic_problem"}, {"score": 0.002756832447586547, "phrase": "propositional_satisfiability"}, {"score": 0.0025892330566358503, "phrase": "existing_sat_solvers"}, {"score": 0.002509284173541882, "phrase": "sound_and_complete_diagnoses"}, {"score": 0.0024625017739528096, "phrase": "observed_aberrant_system_behaviors"}], "paper_keywords": ["Requirement monitoring", " Diagnostics"], "paper_abstract": "We propose a framework adapted from Artificial Intelligence theories of action and diagnosis for monitoring and diagnosing failures of software requirements. Software requirements are specified using goal models where they are associated with preconditions and postconditions. The monitoring component generates log data that contains the truth values of specified pre/post-conditions, as well as system action executions. Such data can be generated at different levels of granularity, depending on diagnostic feedback. The diagnostic component diagnoses the denial of requirements using the log data, and identifies problematic components. To support diagnostic reasoning, we transform the diagnostic problem into a propositional satisfiability (SAT) problem that can be solved by existing SAT solvers. The framework returns sound and complete diagnoses accounting for observed aberrant system behaviors. Our solution is illustrated with two medium-sized publicly available case studies: a Web-based email client and an ATM simulation. Our experimental results demonstrate the scalability of our approach.", "paper_title": "Monitoring and diagnosing software requirements", "paper_id": "WOS:000263418600002"}