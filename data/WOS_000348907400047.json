{"auto_keywords": [{"score": 0.03590031820327418, "phrase": "summary_edges"}, {"score": 0.00481495049065317, "phrase": "efficient_subcubic_alias_analysis"}, {"score": 0.004747429622531595, "phrase": "c._inclusion-based_alias_analysis"}, {"score": 0.004486640769041646, "phrase": "context-free_language"}, {"score": 0.0042102651938187114, "phrase": "traditional_cubic_cfl-reachability_algorithm"}, {"score": 0.0038953958723049287, "phrase": "highly_scalable_and_efficient_cfl-reachability-based_alias_analysis"}, {"score": 0.0038407203087210775, "phrase": "c._the"}, {"score": 0.003603989174919527, "phrase": "reachability_information"}, {"score": 0.0034543031591181546, "phrase": "large_portion"}, {"score": 0.003310813458610484, "phrase": "traditional_cfl-reachability_algorithm"}, {"score": 0.0029150253706493852, "phrase": "subcubic_cfl-reachability_algorithm"}, {"score": 0.0026967596578196325, "phrase": "extensive_experiments"}, {"score": 0.002658863179011018, "phrase": "widely-used_c_programs"}, {"score": 0.002603012037901889, "phrase": "pointer_analysis_literature"}, {"score": 0.0022276618873985445, "phrase": "recent_linux_kernel"}], "paper_keywords": ["Algorithms", " Languages", " Experimentation", " Alias analysis", " CFL-reachability"], "paper_abstract": "Inclusion-based alias analysis for C can be formulated as a context-free language (CFL) reachability problem. It is well known that the traditional cubic CFL-reachability algorithm does not scale well in practice. We present a highly scalable and efficient CFL-reachability-based alias analysis for C. The key novelty of our algorithm is to propagate reachability information along only original graph edges and bypass a large portion of summary edges, while the traditional CFL-reachability algorithm propagates along all summary edges. We also utilize the Four Russians' Trick - a key enabling technique in the subcubic CFL-reachability algorithm - in our alias analysis. We have implemented our subcubic alias analysis and conducted extensive experiments on widely-used C programs from the pointer analysis literature. The results demonstrate that our alias analysis scales extremely well in practice. In particular, it can analyze the recent Linux kernel (which consists of 10M SLOC) in about 30 seconds.", "paper_title": "Efficient Subcubic Alias Analysis for C", "paper_id": "WOS:000348907400047"}