{"auto_keywords": [{"score": 0.048171623437091415, "phrase": "sensor_nodes"}, {"score": 0.038501360101105234, "phrase": "hermes"}, {"score": 0.00481495049065317, "phrase": "software_component_shifts"}, {"score": 0.004766388573192505, "phrase": "incremental_reprogramming"}, {"score": 0.004718314112245913, "phrase": "wireless_sensor_networks"}, {"score": 0.004670722261414736, "phrase": "wireless_reprogramming"}, {"score": 0.004553822674247401, "phrase": "essential_requirement"}, {"score": 0.004507882471601552, "phrase": "long-lived_networks"}, {"score": 0.003911135156992, "phrase": "reprogramming_time"}, {"score": 0.0036988415150699945, "phrase": "multihop_incremental_reprogramming_system"}, {"score": 0.0034803228231621687, "phrase": "old_and_new_software"}, {"score": 0.0033588449972778004, "phrase": "new_software"}, {"score": 0.003308085469148074, "phrase": "received_delta"}, {"score": 0.003258090521354736, "phrase": "old_software"}, {"score": 0.0030038988468808845, "phrase": "global_variable_shifts"}, {"score": 0.002943502888225748, "phrase": "software_modifications"}, {"score": 0.0028551716387011637, "phrase": "binary_images"}, {"score": 0.0028120022457134267, "phrase": "byte_level"}, {"score": 0.002713788077665689, "phrase": "small_delta"}, {"score": 0.0026057256900479026, "phrase": "wireless_network"}, {"score": 0.0025275050635202878, "phrase": "wide_range"}, {"score": 0.002501955525421155, "phrase": "software_change_scenarios"}, {"score": 0.0023183787796106805, "phrase": "deluge"}, {"score": 0.0022373589421134633, "phrase": "tinyos"}, {"score": 0.002148226022654619, "phrase": "existing_incremental_reprogramming_system"}, {"score": 0.002126506091243942, "phrase": "jeong"}, {"score": 0.0021050087471063583, "phrase": "culler"}], "paper_keywords": ["Sensor networks", " incremental reprogramming", " deluge"], "paper_abstract": "Wireless reprogramming of sensor nodes is an essential requirement for long-lived networks because software functionality needs to be changed over time. The amount of information that needs to be wirelessly transmitted during reprogramming should be minimized to reduce reprogramming time and energy. In this paper, we present a multihop incremental reprogramming system called Hermes that transfers over the network the delta between the old and new software and lets the sensor nodes rebuild the new software using the received delta and the old software. It reduces the delta by using techniques to mitigate the effects of function and global variable shifts caused by the software modifications. Then it compares the binary images at the byte level with a method to create a small delta that needs to be sent over the wireless network to all the nodes. For the wide range of software change scenarios that we experimented with, we find that Hermes transfers up to 201 times less information than Deluge, the standard reprogramming system for TinyOS, and 64 times less than an existing incremental reprogramming system by Jeong and Culler.", "paper_title": "Mitigating the Effects of Software Component Shifts for Incremental Reprogramming of Wireless Sensor Networks", "paper_id": "WOS:000307824600007"}