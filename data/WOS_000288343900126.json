{"auto_keywords": [{"score": 0.012964588472196184, "phrase": "clips"}, {"score": 0.010362519124934626, "phrase": "inference_process"}, {"score": 0.00481495049065317, "phrase": "clips-based_course_timetabling_expert_system"}, {"score": 0.004734175871914184, "phrase": "complex_task"}, {"score": 0.004576650486542461, "phrase": "expert_systems"}, {"score": 0.004550908278609338, "phrase": "constraint_programming"}, {"score": 0.0044998554636609955, "phrase": "novel_artificial_intelligence_approach"}, {"score": 0.0044619403653966645, "phrase": "course_timetabling_system"}, {"score": 0.004193445699579727, "phrase": "hard_and_soft_constraints"}, {"score": 0.004065294241465876, "phrase": "feasible_timetable"}, {"score": 0.003985781820570781, "phrase": "inference_engine"}, {"score": 0.003863951933933301, "phrase": "rule-based_language"}, {"score": 0.0038098079315016355, "phrase": "repeated_matching"}, {"score": 0.003590535800280948, "phrase": "timetabling_system"}, {"score": 0.003570320280680356, "phrase": "emerging_cluster_systems"}, {"score": 0.003470931285852744, "phrase": "assignment_conflicts"}, {"score": 0.003403004190606271, "phrase": "inherent_serialization"}, {"score": 0.0030827361553687053, "phrase": "nested_if-then-else_structure"}, {"score": 0.002971590435656585, "phrase": "multiple_rule_clusters"}, {"score": 0.002938202365941281, "phrase": "rule_cluster"}, {"score": 0.0028969927933916676, "phrase": "slave_process"}, {"score": 0.0028563595473206555, "phrase": "feasible_solutions"}, {"score": 0.0028322528979854923, "phrase": "slave_processes"}, {"score": 0.002753353123026193, "phrase": "current_course"}, {"score": 0.0027301134307516103, "phrase": "rule_priorities"}, {"score": 0.002699431192257011, "phrase": "improper_division"}, {"score": 0.002646562471215991, "phrase": "false_conclusion"}, {"score": 0.0026316476955518175, "phrase": "runtime_errors"}, {"score": 0.0025874044888422056, "phrase": "correct_timetable"}, {"score": 0.0025367242449899395, "phrase": "improper_rule_division"}, {"score": 0.00239054815963484, "phrase": "novel_programming_model"}, {"score": 0.002323924542900662, "phrase": "clips._experimental_results"}, {"score": 0.0022977967191969515, "phrase": "proposed_parallel_timetabling_system"}, {"score": 0.002246417055582878, "phrase": "cluster_system"}, {"score": 0.0022274466028861925, "phrase": "proposed_method"}, {"score": 0.002202401083667089, "phrase": "clips-based_expert_systems"}, {"score": 0.002183801521729492, "phrase": "similar_inference_behavior"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Course timetabling", " Parallel computing", " CLIPS", " Expert system", " Cluster system"], "paper_abstract": "Course timetabling is a complex task that cannot be achieved using only a few general principles. This work integrates expert systems and constraint programming to generate a novel artificial intelligence approach for a course timetabling system. This approach can be easily reformulated and customized to sup-port requirement changes. Furthermore, the difference between hard and soft constraints can be also addressed easily. However, achieving a feasible timetable is very time consuming because the inference engine is CLIPS-based. Notably, CLIPS is a rule-based language that relies on the repeated matching of facts with rules to generate conclusions. To overcome the problem, this work parallelizes the execution of the timetabling system in emerging cluster systems. However, scheduling courses in parallel without solving assignment conflicts is difficult. To conquer the inherent serialization of the inference of course timetabling, courses are scheduled one by one and the schedule for one course is parallelized. This work utilizes the inference process for scheduling one course that behaves similar to the nested if-then-else structure. The rules for the inference process of scheduling one course are partitioned into multiple rule clusters, where each rule cluster is inferred by a slave process. After receiving all feasible solutions generated by slave processes, the master decides which solution to adopt for a current course according to rule priorities. However, improper division of rules can result in a false conclusion or runtime errors. To ensure that a correct timetable is obtained, two possible problems caused by improper rule division are identified. Three partitioning guidelines are then used to cope with these problems. For implementation, this work applied a novel programming model that transmits facts in C and infers rules in CLIPS. Experimental results demonstrate that the proposed parallel timetabling system achieves superlinear speedup when running in a cluster system. The proposed method also helps parallelize CLIPS-based expert systems that have similar inference behavior to that in the course timetabling system. (C) 2010 Elsevier Ltd. All rights reserved.", "paper_title": "Parallelizing a CLIPS-based course timetabling expert system", "paper_id": "WOS:000288343900126"}