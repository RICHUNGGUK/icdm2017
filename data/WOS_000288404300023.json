{"auto_keywords": [{"score": 0.04246642175671393, "phrase": "cuda"}, {"score": 0.01254088314626994, "phrase": "opencl"}, {"score": 0.005375226594739516, "phrase": "nvidia"}, {"score": 0.00481495049065317, "phrase": "cuda_programs"}, {"score": 0.004795728122605992, "phrase": "opencl."}, {"score": 0.004767436922587309, "phrase": "distributed_program"}, {"score": 0.004738911576242396, "phrase": "test_data"}, {"score": 0.004691347868983969, "phrase": "scientific_computation"}, {"score": 0.004561767198482434, "phrase": "cuda_programming_model"}, {"score": 0.004498319537200536, "phrase": "nvidia."}, {"score": 0.00448035309972907, "phrase": "industry_standardisation_effort"}, {"score": 0.0044357497507964815, "phrase": "opencl_specification"}, {"score": 0.004418032438267459, "phrase": "gpu_programming"}, {"score": 0.004313198413334513, "phrase": "proprietary_tool-chains"}, {"score": 0.004261713953677648, "phrase": "source-to-source_translation_tool"}, {"score": 0.004168909928983964, "phrase": "existing_cuda_code"}, {"score": 0.0041356643103022716, "phrase": "opencl_model"}, {"score": 0.0040133278382101885, "phrase": "alternative_hardware"}, {"score": 0.003965408526084543, "phrase": "equivalent_opencl"}, {"score": 0.003925911398659081, "phrase": "fixed_hardware"}, {"score": 0.0038558014950159547, "phrase": "real-world_cuda_application"}, {"score": 0.0037121858919097754, "phrase": "swan"}, {"score": 0.0037118609337573167, "phrase": "contemporary_compilers"}, {"score": 0.003689628075766217, "phrase": "ported_application"}, {"score": 0.003652867763000936, "phrase": "platform_independence"}, {"score": 0.0036020155823708925, "phrase": "amd_cpus"}, {"score": 0.003530590847420638, "phrase": "viable_platform"}, {"score": 0.003509439914611552, "phrase": "portable_gpu_applications"}, {"score": 0.0034536526997511834, "phrase": "best_performance"}, {"score": 0.0034264117299755005, "phrase": "program"}, {"score": 0.0034055643459033084, "phrase": "swan_catalogue"}, {"score": 0.0033246746120331135, "phrase": "cpc_program_library"}, {"score": 0.0033113804051214365, "phrase": "queen's_university"}, {"score": 0.0032981392629332267, "phrase": "belfast"}, {"score": 0.003284950730415089, "phrase": "n._ireland"}, {"score": 0.0032587313135900523, "phrase": "gnu_public_license"}, {"score": 0.002965855256196711, "phrase": "linux"}, {"score": 0.0029186788114954135, "phrase": "external"}, {"score": 0.002883785805985795, "phrase": "opencl_nature"}, {"score": 0.002787181295054319, "phrase": "proprietary_cuda_programming_toolkit"}, {"score": 0.0027704715703793653, "phrase": "alternative_programming_model"}, {"score": 0.0027483472371835865, "phrase": "industry_standard"}, {"score": 0.0027209394334823263, "phrase": "similar_capabilities"}, {"score": 0.002677652801837553, "phrase": "non-nvidia_hardware"}, {"score": 0.0026509556187594547, "phrase": "amd"}, {"score": 0.00263505298504827, "phrase": "ibm_cell_processors"}, {"score": 0.002536568028038976, "phrase": "swan_tool"}, {"score": 0.002471307589526188, "phrase": "cuda_kernel_source_code"}, {"score": 0.002456486927713543, "phrase": "opencl_equivalent"}, {"score": 0.0024271110662485306, "phrase": "c_source_code"}, {"score": 0.002417397195857689, "phrase": "entry_point_functions"}, {"score": 0.002402899060902048, "phrase": "kernel_invocation"}, {"score": 0.002388487669097511, "phrase": "host_program"}, {"score": 0.0023741625039447123, "phrase": "concise_host-side_api"}, {"score": 0.002285405970646037, "phrase": "cuda_compiler"}, {"score": 0.002271697639237782, "phrase": "host-side_program"}, {"score": 0.0022580713471027996, "phrase": "converted_program"}, {"score": 0.0021911534699496737, "phrase": "compile_time"}, {"score": 0.0021347607855562102, "phrase": "nominal_crown_copyright"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["GPU", " CUDA", " OpenCL"], "paper_abstract": "The use of modern, high-performance graphical processing units (GPUs) for acceleration of scientific computation has been widely reported. The majority of this work has used the CUDA programming model supported exclusively by CPUs manufactured by NVIDIA. An industry standardisation effort has recently produced the OpenCL specification for GPU programming. This offers the benefits of hardware-independence and reduced dependence on proprietary tool-chains. Here we describe a source-to-source translation tool, \"Swan\" for facilitating the conversion of an existing CUDA code to use the OpenCL model, as a means to aid programmers experienced with CUDA in evaluating OpenCL and alternative hardware. While the performance of equivalent OpenCL and CUDA code on fixed hardware should be comparable, we find that a real-world CUDA application ported to OpenCL exhibits an overall 50% increase in runtime, a reduction in performance attributable to the immaturity of contemporary compilers. The ported application is shown to have platform independence, running on both NVIDIA and AMD CPUs without modification. We conclude that OpenCL is a viable platform for developing portable GPU applications but that the more mature CUDA tools continue to provide best performance. Program summary Program title: Swan Catalogue identifier: AEIN_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEIH_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU Public License version 2 No. of lines in distributed program, including test data, etc.: 17 736 No. of bytes in distributed program, including test data, etc.: 131 177 Distribution format: tar.gz Programming language: C Computer: PC Operating system: Linux RAM: 256 Mbytes Classification: 6.5 External routines: NVIDIA CUDA, OpenCL Nature of problem: Graphical Processing Units (GPUs) from NVIDIA are preferentially programed with the proprietary CUDA programming toolkit. An alternative programming model promoted as an industry standard. OpenCL, provides similar capabilities to CUDA and is also supported on non-NVIDIA hardware (including multicore x86 CPUs, AMD CPUs and IBM Cell processors). The adaptation of a program from CUDA to OpenCL is relatively straightforward but laborious. The Swan tool facilitates this conversion. Solution method: Swan performs a translation of CUDA kernel source code into an OpenCL equivalent. It also generates the C source code for entry point functions, simplifying kernel invocation from the host program. A concise host-side API abstracts the CUDA and OpenCL APIs. A program adapted to use Swan has no dependency on the CUDA compiler for the host-side program. The converted program may be built for either CUDA or OpenCL, with the selection made at compile time. Restrictions: No support for CUDA C++ features Running time: Nominal Crown Copyright (C) 2011 Published by Elsevier B.V. All rights reserved.", "paper_title": "Swan: A tool for porting CUDA programs to OpenCL", "paper_id": "WOS:000288404300023"}