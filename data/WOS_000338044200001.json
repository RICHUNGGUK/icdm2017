{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "clp"}, {"score": 0.03521832480161275, "phrase": "qualification_values"}, {"score": 0.03479022361992437, "phrase": "proximity_relations"}, {"score": 0.004578030096508602, "phrase": "logic_programming"}, {"score": 0.004298134888203576, "phrase": "multiple_extensions"}, {"score": 0.004217537792708984, "phrase": "classical_logic_programming_paradigm"}, {"score": 0.0038365827067658176, "phrase": "clp."}, {"score": 0.0036246643358397272, "phrase": "proximity-based_qualified_constraint_logic_programming"}, {"score": 0.003467940281748612, "phrase": "quite_expressive_extension"}, {"score": 0.0032148229832850215, "phrase": "uncertainty_values"}, {"score": 0.003174464741377186, "phrase": "similarity_relations"}, {"score": 0.002980124909321296, "phrase": "transformation_technique"}, {"score": 0.0029241700853970013, "phrase": "sqclp_programs"}, {"score": 0.002851189848197057, "phrase": "semantically_equivalent_clp_programs"}, {"score": 0.0027451110240633144, "phrase": "practical_prolog-based_implementation"}, {"score": 0.0026935568995690947, "phrase": "particularly_useful_instances"}, {"score": 0.00264296841319955, "phrase": "sqclp_scheme"}, {"score": 0.0024968185204913935, "phrase": "simple_-_and_working_-_examples"}, {"score": 0.002186395051086251, "phrase": "key_role"}, {"score": 0.0021589195238286233, "phrase": "intended_use"}, {"score": 0.0021049977753042253, "phrase": "flexible_information_retrieval_applications"}], "paper_keywords": ["constraint logic programming", " program transformation", " qualification domains and values", " similarity and proximity relations", " flexible information retrieval"], "paper_abstract": "Uncertainty in logic programming has been widely investigated in the last decades, leading to multiple extensions of the classical logic programming paradigm. However, few of these are designed as extensions of the well-established and powerful Constraint Logic Programming (CLP) scheme for CLP. In a previous work we have proposed the proximity-based qualified constraint logic programming (SQCLP) scheme as a quite expressive extension of CLP with support for qualification values and proximity relations as generalizations of uncertainty values and similarity relations, respectively. In this paper we provide a transformation technique for transforming SQCLP programs and goals into semantically equivalent CLP programs and goals, and a practical Prolog-based implementation of some particularly useful instances of the SQCLP scheme. We also illustrate, by showing some simple - and working - examples, how the prototype can be effectively used as a tool for solving problems where qualification values and proximity relations play a key role. Intended use of SQCLP includes flexible information retrieval applications.", "paper_title": "A Transformation-based implementation for CLP with qualification and proximity", "paper_id": "WOS:000338044200001"}