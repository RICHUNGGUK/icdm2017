{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_virtual_reality_system"}, {"score": 0.004312622975366676, "phrase": "multiple_rendering_back-ends"}, {"score": 0.004195418010131832, "phrase": "common_application_layer"}, {"score": 0.004119049028319832, "phrase": "distributed_systems"}, {"score": 0.004007083686875716, "phrase": "primary_goal"}, {"score": 0.0038271712887391015, "phrase": "practical_and_nonintrusive_way"}, {"score": 0.0037231102027070724, "phrase": "potentially_very_different_renderers"}, {"score": 0.0036553070575015344, "phrase": "heterogeneous_computing_environments"}, {"score": 0.0031553611552558986, "phrase": "cluster_environment"}, {"score": 0.0029586543333524904, "phrase": "mediator_layer"}, {"score": 0.0025537472239953807, "phrase": "back-end's_scene"}, {"score": 0.0024389277933858054, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "example_application"}], "paper_keywords": ["Distributed/network graphics", " Virtual reality"], "paper_abstract": "We present an approach to integrate multiple rendering back-ends under a common application layer for distributed systems. The primary goal was to find a practical and nonintrusive way to use potentially very different renderers in heterogeneous computing environments without impairing their strengths and without burdening the back-ends or the application with details of the cluster environment. Our approach is based on a mediator layer that handles multithreading, clustering, and the synchronization between the application's and the back-end's scene. We analyze the proposed approach with an implementation for a state-of-the-art distributed VR/AR system. In particular, we present two case studies and an example application.", "paper_title": "Extending a distributed virtual reality system with exchangeable rendering back-ends", "paper_id": "WOS:000325115400006"}