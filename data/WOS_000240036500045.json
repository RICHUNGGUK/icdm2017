{"auto_keywords": [{"score": 0.030009606943995397, "phrase": "computational_time"}, {"score": 0.00481495049065317, "phrase": "iterative_modular_division"}, {"score": 0.0045726187330434025, "phrase": "fpga._public_key_cryptography"}, {"score": 0.004383406949799696, "phrase": "digital_signature"}, {"score": 0.004301834610818624, "phrase": "key_agreements"}, {"score": 0.004182301599359094, "phrase": "elliptic_curve_cryptography"}, {"score": 0.004123781267600542, "phrase": "attractive_solution"}, {"score": 0.004028054020045027, "phrase": "elliptic_curve"}, {"score": 0.0039716833701918365, "phrase": "costly_modular_division"}, {"score": 0.003598492288058048, "phrase": "precomputation_phase"}, {"score": 0.00348202932445197, "phrase": "whole_computation"}, {"score": 0.0033851984021896287, "phrase": "efficient_modular_division_implementations"}, {"score": 0.003229741076887151, "phrase": "affine_coordinates"}, {"score": 0.0031995142224983094, "phrase": "high-speed_processors"}, {"score": 0.002967634471075658, "phrase": "area_tradeoffs"}, {"score": 0.002939853413763817, "phrase": "fpga._first"}, {"score": 0.0028715299874549245, "phrase": "novel_algorithm"}, {"score": 0.0027395968397212053, "phrase": "area_increase"}, {"score": 0.0026384167183586015, "phrase": "single-instruction_multiple-data_feature"}, {"score": 0.0023127544795063263, "phrase": "first_report"}, {"score": 0.002280333649167796, "phrase": "iterative_digit-serial_modular_division_algorithm"}, {"score": 0.0022168460543913787, "phrase": "time_tradeoff_analysis"}, {"score": 0.0021857667493036786, "phrase": "iterative_algorithm"}, {"score": 0.0021551222226685648, "phrase": "best_result"}, {"score": 0.0021050106284165567, "phrase": "fpga."}], "paper_keywords": [""], "paper_abstract": "Public key cryptography is a concept used by many useful functionalities such as digital signature, encryption, key agreements, For those needs, elliptic curve cryptography is an attractive solution. Cryptosystems based on elliptic curve need a costly modular division. Depending on the choice of coordinates, this operation is requested at each step of algorithms, during a precomputation phase or at the end of the whole computation. As a result, efficient modular division implementations are useful for both area constrained designs working in affine coordinates and high-speed processors. For that purpose, this work highlights the most efficient iterative modular, division algorithm and explores different time and area tradeoffs on FPGA. First, thanks to a novel algorithm, the computational time is divided by two with an area increase of one half. Second, using the Single-Instruction Multiple-Data feature of the selected algorithm, the area is divided by two with a doubling of the computational time. To the best of our knowledge, it is the first report about an iterative digit-serial modular division algorithm, the first area and time tradeoff analysis of an iterative algorithm and the best result among the very few implementations on FPGA.", "paper_title": "Iterative modular division over GF(2(m)): Novel algorithm and implementations on FPGA", "paper_id": "WOS:000240036500045"}