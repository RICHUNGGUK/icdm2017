{"auto_keywords": [{"score": 0.03459313900284793, "phrase": "stream-computing_applications"}, {"score": 0.03311990226198299, "phrase": "key_properties"}, {"score": 0.00481495049065317, "phrase": "synthetic_task_graphs"}, {"score": 0.004723322467153553, "phrase": "stream_computing_systems"}, {"score": 0.004574449773348889, "phrase": "emerging_computational_model"}, {"score": 0.0044873778175404475, "phrase": "complex_operations"}, {"score": 0.0043181530164057135, "phrase": "high-volume_data"}, {"score": 0.004155283263388382, "phrase": "mature_publicly_available_applications"}, {"score": 0.0035173498506324476, "phrase": "synthetic_generation"}, {"score": 0.0034725269588525534, "phrase": "large-scale_workloads"}, {"score": 0.0029203055813347874, "phrase": "known_random_graph_generation_concepts"}, {"score": 0.0028830690329478465, "phrase": "stream_computing_specific_features"}, {"score": 0.0027920359090544107, "phrase": "realistic_input_stream_graphs"}, {"score": 0.002601727192945944, "phrase": "potential_applications"}, {"score": 0.002568542343945288, "phrase": "user_input"}, {"score": 0.0023934306706217797, "phrase": "second_\"application-agnostic\"_framework"}, {"score": 0.002273605493468005, "phrase": "general_stream-computing_systems"}, {"score": 0.0021876814398268775, "phrase": "domain-specific_fine-tuning"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Stream computing systems", " Workload characterization", " Computational task graphs", " Synthetic stream-computing graphs"], "paper_abstract": "Stream-computing is an emerging computational model for performing complex operations on and across multi-source, high-volume data flows. The pool of mature publicly available applications employing this model is fairly small, and therefore the availability of workloads for various types of applications is scarce. Thus, there is a need for synthetic generation of large-scale workloads to drive simulations and estimate the performance of stream-computing applications at scale. We identify the key properties shared by most task graphs of stream-computing applications and use them to extend known random graph generation concepts with stream computing specific features, providing researchers with realistic input stream graphs. Our graph generation techniques serve the purpose of covering a disparity of potential applications and user input. Our first \"domain-specific\" framework exhibits high user-controlled configurability while the second \"application-agnostic\" framework focuses solely on emulating the key properties of general stream-computing systems, at the loss of domain-specific fine-tuning. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Generating synthetic task graphs for simulating stream computing systems", "paper_id": "WOS:000323404700003"}