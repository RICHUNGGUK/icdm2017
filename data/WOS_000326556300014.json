{"auto_keywords": [{"score": 0.03094467427330496, "phrase": "salespoint"}, {"score": 0.01572057309700996, "phrase": "java"}, {"score": 0.015519502907660923, "phrase": "object-oriented_software_development"}, {"score": 0.00470697922443172, "phrase": "systematic_object-oriented_software_development"}, {"score": 0.004498213310668266, "phrase": "complex_skills"}, {"score": 0.004440277230269978, "phrase": "technical_skills"}, {"score": 0.004107935669507044, "phrase": "large_and_complex_software_system"}, {"score": 0.003951175193382119, "phrase": "development_experiences"}, {"score": 0.0038876302202924644, "phrase": "team-oriented_project_courses"}, {"score": 0.003643470150731877, "phrase": "limited_time"}, {"score": 0.0035043714971173252, "phrase": "small_numbers"}, {"score": 0.0034479873922329323, "phrase": "important_further_requirement"}, {"score": 0.0034035317633176352, "phrase": "different_projects"}, {"score": 0.0033163269450817716, "phrase": "different_tasks"}, {"score": 0.003294875957676514, "phrase": "different_teams"}, {"score": 0.003097865379563127, "phrase": "application_framework"}, {"score": 0.0030678504924907166, "phrase": "everyday_application_domain"}, {"score": 0.0028379381771661116, "phrase": "business_applications"}, {"score": 0.002747289666018982, "phrase": "dresden"}, {"score": 0.0027295174255765682, "phrase": "munich"}, {"score": 0.0026423134393535243, "phrase": "educational_background"}, {"score": 0.002260932310934101, "phrase": "technical_overview"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Programming education", " Object-oriented framework", " Business applications", " Large-class project courses"], "paper_abstract": "Teaching systematic object-oriented software development to undergraduate students is difficult: Students need to develop a lot of complex skills. These include technical skills in object-oriented software development, but also social skills for example, how to collaborate with other developers as part of a team working towards a large and complex software system. To acquire these skills, students need hands-on development experiences for example, through team-oriented project courses. Designing such project courses is a challenge in itself: They must be both sufficiently challenging and achievable within the limited time available. In our special situation (large numbers of students supervised by small numbers of staff) an important further requirement is scalability: Different projects should be easily comparable while allowing for different tasks for different teams to reduce the risk of plagiarism. The solution that in our experience satisfies all these requirements is to use an application framework for an everyday application domain for example, the business domain. Since 1997, we have been using SALESPOINT, a Java-based framework for creating business applications, that has been jointly developed and maintained in Dresden and Munich. In this paper, we briefly recollect the educational background and aims of the courses and present in some detail SALESPoINT (and its most recent revision, SALESPOINT2010): central notions like catalogs and stocks, the functionality it offers to users (application control, data management, and much more), a technical overview of its architecture, an example application built with SALESPOINT, and some lessons learned so far. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "SALESPOINT: A Java framework for teaching object-oriented software development", "paper_id": "WOS:000326556300014"}