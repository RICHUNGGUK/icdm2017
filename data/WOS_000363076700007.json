{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "security_requirements"}, {"score": 0.004768649568826951, "phrase": "socio-technical_systems"}, {"score": 0.004722791767189843, "phrase": "modem_software_systems"}, {"score": 0.004587835274176236, "phrase": "larger_socio-technical_systems"}, {"score": 0.004392565073466714, "phrase": "outsourcing_tasks"}, {"score": 0.003855034057431947, "phrase": "confidential_information"}, {"score": 0.0036908381347418805, "phrase": "private_data"}, {"score": 0.0036201167891046046, "phrase": "untrusted_third_parties"}, {"score": 0.0034491650585057754, "phrase": "secure_software_system"}, {"score": 0.0033667304423940893, "phrase": "thorough_analysis"}, {"score": 0.00320770578058916, "phrase": "social_and_organisational_ones"}, {"score": 0.003070996252787868, "phrase": "sts_approach"}, {"score": 0.002940115224919851, "phrase": "sts"}, {"score": 0.002828418443899226, "phrase": "sts-ml_requirements"}, {"score": 0.002630299922281955, "phrase": "socio-technical_system"}, {"score": 0.002592369213499121, "phrase": "requirements_models"}, {"score": 0.002530359917257626, "phrase": "formal_semantics"}, {"score": 0.00249386680748172, "phrase": "automated_reasoning"}, {"score": 0.0024578987081792405, "phrase": "possible_conflicts"}, {"score": 0.0023417010799384524, "phrase": "actors'_business_policies"}, {"score": 0.002263639474937039, "phrase": "case_study"}, {"score": 0.0021881743793875767, "phrase": "promising_scalability_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Security requirements", " Automated reasoning", " Requirements models"], "paper_abstract": "Modem software systems operate within the context of larger socio-technical systems, wherein they interact by exchanging data and outsourcing tasks-with other technical components, humans, and organisations. When interacting, these components (actors) operate autonomously; as such, they may disclose confidential information without being authorised, wreck the integrity of private data, rely on untrusted third parties, etc. Thus, the design of a secure software system shall begin with a thorough analysis of its socio-technical context, thereby considering not only technical attacks, but also social and organisational ones. In this paper, we propose the STS approach for modelling and reasoning about security requirements. In STS, security requirements are specified, via the STS-ml requirements modelling language, as contracts that constrain the interactions among the actors in the socio-technical system. The requirements models of STS-ml have a formal semantics which enables automated reasoning for detecting possible conflicts among security requirements as well as conflicts between security requirements and actors' business policies. We apply STS to a case study about e-Government, and report on promising scalability results of our implementation. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Modelling and reasoning about security requirements in socio-technical systems", "paper_id": "WOS:000363076700007"}