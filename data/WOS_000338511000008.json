{"auto_keywords": [{"score": 0.04145933533719878, "phrase": "repeated_aborts"}, {"score": 0.00481495049065317, "phrase": "dynamic_backoff"}, {"score": 0.004762550320451225, "phrase": "transactional_memory_systems"}, {"score": 0.004685012337701536, "phrase": "memory_access_conflicts"}, {"score": 0.004608730887154718, "phrase": "crucial_part"}, {"score": 0.004484332781147261, "phrase": "transactional_memory"}, {"score": 0.004245476558619167, "phrase": "threads_increases"}, {"score": 0.004199247711875386, "phrase": "long_latency_transactions"}, {"score": 0.004063547375196532, "phrase": "efficient_contention_management"}, {"score": 0.003910740988145338, "phrase": "wasteful_rollback_operations"}, {"score": 0.0037226570791514184, "phrase": "dynamic_backoff_control_algorithm"}, {"score": 0.003661987063211563, "phrase": "complexity-effective_and_distributed_contention_management"}, {"score": 0.003622088701900472, "phrase": "hardware_transactional_memory"}, {"score": 0.0034102660898135155, "phrase": "restarting_intervals"}, {"score": 0.003373101013123386, "phrase": "aborted_transactions"}, {"score": 0.002989991779830814, "phrase": "stamp_benchmark_suite"}, {"score": 0.0029091587159002503, "phrase": "\"problem\"_transactions"}, {"score": 0.0027539714188091866, "phrase": "attendant_high_contention_rate"}, {"score": 0.002709045632654716, "phrase": "proposed_algorithm"}, {"score": 0.002550481822137976, "phrase": "initial_exponent_value"}, {"score": 0.002508867228980776, "phrase": "traditional_backoff_approach"}, {"score": 0.0024276590297034064, "phrase": "proposed_scheme"}, {"score": 0.00236199235951202, "phrase": "wasted_cycles"}, {"score": 0.0022482261385133617, "phrase": "baseline_tm_system"}, {"score": 0.002163535133532765, "phrase": "logtm-se"}, {"score": 0.0021049977753042253, "phrase": "average_performance_improvement"}], "paper_keywords": ["Transactional memory", " contention management", " high contention", " exponential backoff"], "paper_abstract": "Reducing memory access conflicts is a crucial part of the design of Transactional Memory (TM) systems since the number of running threads increases and long latency transactions gradually appear: without an efficient contention management, there will be repeated aborts and wasteful rollback operations. In this paper, we present a dynamic backoff control algorithm developed for complexity-effective and distributed contention management in Hardware Transactional Memory (HTM) systems. Our approach aims at controlling the restarting intervals of aborted transactions, and can be easily applied to the various TM systems. To this end, we have profiled the applications of the STAMP benchmark suite and have identified those \"problem\" transactions which repeatedly cause aborts in the applications with the attendant high contention rate. The proposed algorithm alleviates the impact of these repeated aborts by dynamically adjusting the initial exponent value of the traditional backoff approach. In addition, the proposed scheme decreases the number of wasted cycles down to 82% on average compared to the baseline TM system. Our design has been integrated in LogTM-SE where we observed an average performance improvement of 18%.", "paper_title": "Complexity-Effective Contention Management with Dynamic Backoff for Transactional Memory Systems", "paper_id": "WOS:000338511000008"}