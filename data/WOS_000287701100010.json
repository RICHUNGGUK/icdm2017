{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "neighbourhood_matching"}, {"score": 0.004413846562278824, "phrase": "attractive_texture_synthesis_framework"}, {"score": 0.004173743791750695, "phrase": "non-homogeneous_texture_exemplars"}, {"score": 0.003996027647611435, "phrase": "intuitive_creative_control"}, {"score": 0.003849711329589429, "phrase": "synthesis_process"}, {"score": 0.003399466007862412, "phrase": "commonly_used_neighbourhood_matching_acceleration_techniques"}, {"score": 0.003234425353582135, "phrase": "specific_context"}, {"score": 0.0030204580407008214, "phrase": "ordinary_unconstrained_texture_synthesis"}, {"score": 0.0028917056916949744, "phrase": "standard_approaches"}, {"score": 0.002700348931172875, "phrase": "numbers_framework"}, {"score": 0.002633941112839883, "phrase": "visually_inferior_results"}, {"score": 0.002429407997390703, "phrase": "texture"}, {"score": 0.0022542611024997474, "phrase": "efficient_fft-based_search"}, {"score": 0.0021851480717840484, "phrase": "good_results"}, {"score": 0.0021580985506699105, "phrase": "reasonable_running_times"}, {"score": 0.0021049977753042253, "phrase": "minimal_memory_overhead"}], "paper_keywords": ["texture-by-numbers", " texture synthesis", " energy minimization", " example-based rendering", " texture optimization", " image analogies"], "paper_abstract": "Texture-by-Numbers is an attractive texture synthesis framework, because it is able to cope with non-homogeneous texture exemplars, and provides the user with intuitive creative control over the outcome of the synthesis process. Like many other exemplar-based texture synthesis methods, its basic underlying mechanism is neighbourhood matching. In this paper we review a number of commonly used neighbourhood matching acceleration techniques, compare and analyse their performance in the specific context of Texture-by-Numbers (as opposed to ordinary unconstrained texture synthesis). Our study indicates that the standard approaches are not optimally suited for the Texture-by-Numbers framework, often producing visually inferior results compared to searching for the exact L2nearest neighbour. We then show that performing Texture-by-Number using the Texture Optimization framework in conjunction with an efficient FFT-based search is able to produce good results in reasonable running times and with a minimal memory overhead.", "paper_title": "On Neighbourhood Matching for Texture-by-Numbers", "paper_id": "WOS:000287701100010"}