{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_product_lines"}, {"score": 0.008502232541861091, "phrase": "formal_framework"}, {"score": 0.007042581222795155, "phrase": "process_algebras"}, {"score": 0.004747544039399003, "phrase": "software_product_line"}, {"score": 0.004681076799813777, "phrase": "software_systems"}, {"score": 0.0046025376320049955, "phrase": "common_set"}, {"score": 0.004474543261728526, "phrase": "prescribed_way"}, {"score": 0.004313434109653615, "phrase": "feature_models"}, {"score": 0.0040998527410276995, "phrase": "feature_level"}, {"score": 0.004019667124208171, "phrase": "automatic_analysis"}, {"score": 0.00399704519135802, "phrase": "entire_software_product_lines"}, {"score": 0.0037037769661437563, "phrase": "formal_semantics"}, {"score": 0.00368292623004839, "phrase": "existing_frameworks"}, {"score": 0.0035602550900791278, "phrase": "new_problems"}, {"score": 0.003490586026139388, "phrase": "algebraic_language"}, {"score": 0.003461145312315784, "phrase": "spla"}, {"score": 0.003135422638024283, "phrase": "operational_semantics"}, {"score": 0.0031001995131925896, "phrase": "denotational_semantics"}, {"score": 0.0029465141526991297, "phrase": "propositional_logic"}, {"score": 0.002816294613779422, "phrase": "foda_diagrams"}, {"score": 0.0025367242449899395, "phrase": "spl._conclusion"}, {"score": 0.0024940728986998463, "phrase": "general_formal_framework"}, {"score": 0.0021776365628787065, "phrase": "well-known_paradigm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal methods", " Software product lines", " Feature models"], "paper_abstract": "Context: A Software Product Line is a set of software systems that are built from a common set of features. These systems are developed in a prescribed way and they can be adapted to fit the needs of customers. Feature models specify the properties of the systems that are meaningful to customers. A semantics that models the feature level has the potential to support the automatic analysis of entire software product lines. Objective: The objective of this paper is to define a formal framework for Software Product Lines. This framework needs to be general enough to provide a formal semantics for existing frameworks like FODA (Feature Oriented Domain Analysis), but also to be easily adaptable to new problems. Method: We define an algebraic language, called SPLA, to describe Software Product Lines. We provide the semantics for the algebra in three different ways. The approach followed to give the semantics is inspired by the semantics of process algebras. First we define an operational semantics, next a denotational semantics, and finally an axiomatic semantics. We also have defined a representation of the algebra into propositional logic. Results: We prove that the three semantics are equivalent. We also show how FODA diagrams can be automatically translated into SPLA. Furthermore, we have developed our tool, called AT, that implements the formal framework presented in this paper. This tool uses a SAT-solver to check the satisfiability of an SPL. Conclusion: This paper defines a general formal framework for software product lines. We have defined three different semantics that are equivalent; this means that depending on the context we can choose the most convenient approach: operational, denotational or axiomatic. The framework is flexible enough because it is closely related to process algebras. Process algebras are a well-known paradigm for which many extensions have been defined. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A formal framework for software product lines", "paper_id": "WOS:000325387500005"}