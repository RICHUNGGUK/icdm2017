{"auto_keywords": [{"score": 0.03475909446366891, "phrase": "component_selection_process"}, {"score": 0.01392923837027446, "phrase": "system_requirements"}, {"score": 0.011763370282504793, "phrase": "cbs."}, {"score": 0.010155665280132597, "phrase": "component_selection_problem"}, {"score": 0.009226388174311106, "phrase": "related_goals"}, {"score": 0.00481495049065317, "phrase": "component_selection"}, {"score": 0.004573537724320323, "phrase": "engineering_software"}, {"score": 0.004428812979024961, "phrase": "existing_software_tools"}, {"score": 0.004386291308906104, "phrase": "new_problems"}, {"score": 0.004302463542835521, "phrase": "suitable_components"}, {"score": 0.004206678601411097, "phrase": "cbs_success"}, {"score": 0.004139563711762907, "phrase": "cbs_selection_techniques"}, {"score": 0.0040866404150657005, "phrase": "ideal_assumption"}, {"score": 0.003795150272525989, "phrase": "general_purposes"}, {"score": 0.003220596121589591, "phrase": "system_goals"}, {"score": 0.0031691634837160572, "phrase": "existing_component_selection_methodologies"}, {"score": 0.0031286075376993103, "phrase": "single_solution"}, {"score": 0.003010017873923648, "phrase": "cbs_developer"}, {"score": 0.002886598310196588, "phrase": "signed_graph"}, {"score": 0.002840484388249037, "phrase": "cbs-to-be_needs"}, {"score": 0.0026461551175041608, "phrase": "matching_index"}, {"score": 0.0025132071574192672, "phrase": "candidate_components"}, {"score": 0.0024890465189002352, "phrase": "cbs"}, {"score": 0.0024650878485505032, "phrase": "multiple_solutions"}, {"score": 0.002356353539621074, "phrase": "stakeholder_needs"}, {"score": 0.002223554333914499, "phrase": "meeting_scheduling_system"}, {"score": 0.0021532112718752293, "phrase": "cms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Component based software system", " Software component selection", " Signed graph clustering", " Matching index", " Signed graph", " Requirements engineering", " Usage dependency", " Non-functional dependency", " Threat dependency"], "paper_abstract": "In recent years, Component Based System (CBS) development has found widespread application, particularly in the domain of engineering software where it is often necessary to adapt and integrate existing software tools to handle new problems. The ability to identify suitable components that match system requirements is fundamental to CBS success. To date, CBS selection techniques often make an ideal assumption that there is one-to-one mapping between requirements and components. In reality, components are usually designed for general purposes and provide a range of features that can be adapted to meet the needs of a CBS. This implies that a component can potentially match more than one functionality of a CBS. On the other hand, system requirements are usually not independent of each other and a component selection process needs to consider the dependencies between system goals. Furthermore, the existing component selection methodologies usually provide a single solution for the component selection problem, thus limiting the options available to a CBS developer. In this paper, we present a component selection process that uses a signed graph to model interdependencies of CBS-to-be needs and groups related goals into clusters, based on the usage, non-functional and threat dependencies. Subsequently, the matching index of each cluster of related goals is used as a criterion to identify a portfolio of candidate components for a CBS, providing multiple solutions for the component selection problem whenever possible. The component selection process helps a developer to elicit stakeholder needs, analyze their interdependencies and select components for a CBS. We also present application of our approach to a Meeting Scheduling System (MSS) and a Construction Management System (CMS). (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "A graph based requirements clustering approach for component selection", "paper_id": "WOS:000310767100001"}