{"auto_keywords": [{"score": 0.042911185020077874, "phrase": "host_language"}, {"score": 0.040484668400291725, "phrase": "type_system"}, {"score": 0.014905861130634395, "phrase": "chr"}, {"score": 0.004814954066330633, "phrase": "chr."}, {"score": 0.004687305496643216, "phrase": "generic_type_system"}, {"score": 0.004442032546224076, "phrase": "rewriting_rule_language"}, {"score": 0.00418134346679498, "phrase": "high-level_extension"}, {"score": 0.0039360014536153004, "phrase": "java"}, {"score": 0.003417565253539315, "phrase": "chr_w.r.t"}, {"score": 0.0030688220103201836, "phrase": "constraint_logic_programming_language"}, {"score": 0.002830757050018908, "phrase": "previous_work"}, {"score": 0.002628747284714371, "phrase": "resulting_type_system_w.r.t"}, {"score": 0.0023287359930308864, "phrase": "constraint_logic_languages"}, {"score": 0.002251637552201872, "phrase": "experimental_results"}, {"score": 0.0021770860717929192, "phrase": "twelve_chr_solvers"}, {"score": 0.0021049977753042253, "phrase": "tclp"}], "paper_keywords": [""], "paper_abstract": "We propose a generic type system for the Constraint Handling Rules (CHR), a rewriting rule language for implementing constraint solvers. CHR being a high-level extension of a host language, such as Pro-log or Java, this type system is parameterized by the type system of the host language. We show the consistency of the type system for CHR w.r.t. its operational semantics. We also study the case when the host language is a constraint logic programming language, typed with the. prescriptive type system we developed in previous work. In particular, we show the consistency of the resulting type system w.r.t. the extended execution model CLP+CHR. This system is implemented through an extension of our type checker TCLP for constraint logic languages. We report on experimental results about the type-checking of twelve CHR solvers and programs, including TCLP itself.", "paper_title": "A type system for CHR", "paper_id": "WOS:000238569200008"}