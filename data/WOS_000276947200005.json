{"auto_keywords": [{"score": 0.049428038438509174, "phrase": "read-eval-print_loop"}, {"score": 0.007478519532084875, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "systematic_unit_testing"}, {"score": 0.0043947942344037105, "phrase": "lisp_programmers"}, {"score": 0.004354841111644036, "phrase": "new_or_modified_pieces"}, {"score": 0.004085115444878828, "phrase": "systematic_and_comprehensive_unit_testing_efforts"}, {"score": 0.003956558420993431, "phrase": "quick_and_dirty_one_shot_validations"}, {"score": 0.003867206750827, "phrase": "lasting_value"}, {"score": 0.0028995712226514746, "phrase": "test_repositories"}, {"score": 0.0025627194819793347, "phrase": "test_repository"}, {"score": 0.0024706232839499546, "phrase": "concrete_contribution"}, {"score": 0.002360132221690264, "phrase": "library_interface_documentation"}, {"score": 0.0021834945657804193, "phrase": "lisp_programmer"}, {"score": 0.0021243539405631866, "phrase": "casual_testing"}, {"score": 0.0021049977753042253, "phrase": "systematic_testing"}], "paper_keywords": ["Interactive unit testing", " program examples", " Emacs", " Scheme programming"], "paper_abstract": "Lisp programmers constantly carry out experiments in a read-eval-print loop. The experimental activities convince the Lisp programmers that new or modified pieces of programs work as expected. But the experiments typically do not represent systematic and comprehensive unit testing efforts. Rather, the experiments are quick and dirty one shot validations which do not add lasting value to the software, which is being developed. In this paper we propose a tool that is able to collect, organize, and re-validate test cases, which are entered as expressions in a read-eval-print loop. The process of collecting the expressions and their results imposes only little extra work on the programmer. The use of the tool provides for creation of test repositories, and it is intended to catalyze a much more systematic approach to unit testing in a read-eval-print loop. In the paper we also discuss how to use a test repository for other purposes than testing. As a concrete contribution we show how to use test cases as examples in library interface documentation. It is hypothesized-but not yet validated-that the tool will motivate the Lisp programmer to take the transition from casual testing to systematic testing.", "paper_title": "Systematic Unit Testing in a Read-eval-print Loop", "paper_id": "WOS:000276947200005"}