{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "lock-free_composition"}, {"score": 0.0047310525657970615, "phrase": "concurrent_data_objects"}, {"score": 0.004648609688625397, "phrase": "lock-free_data_objects"}, {"score": 0.0035705347414368726, "phrase": "common_disadvantage"}, {"score": 0.003212663446866794, "phrase": "larger_atomic_operations"}, {"score": 0.002967931416941965, "phrase": "lock-free_methodology"}, {"score": 0.002890557197908352, "phrase": "highly_concurrent_linearizable_objects"}, {"score": 0.002555247330102505, "phrase": "atomic_lock-free_move_operations"}, {"score": 0.0024236964502593254, "phrase": "concurrent_objects"}, {"score": 0.002381365139274329, "phrase": "experimental_evaluation"}, {"score": 0.0021805201234139475, "phrase": "data_objects"}], "paper_keywords": ["Algorithms", " Experimentation", " data structures", " lock-free", " composition"], "paper_abstract": "Lock-free data objects offer several advantages over their blocking counterparts, such as being immune to deadlocks and convoying and, more importantly, being highly concurrent. But they share a common disadvantage in that the operations they provide are difficult to compose into larger atomic operations while still guaranteeing lock-freedom. We present a lock-free methodology for composing highly concurrent linearizable objects together by unifying their linearization points. This makes it possible to relatively easily introduce atomic lock-free move operations to a wide range of concurrent objects. Experimental evaluation has shown that the operations originally supported by the data objects keep their performance behavior under our methodology.", "paper_title": "Supporting Lock-Free Composition of Concurrent Data Objects", "paper_id": "WOS:000280548100037"}