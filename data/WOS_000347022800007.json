{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "use_cases"}, {"score": 0.01386688044479867, "phrase": "proposed_method"}, {"score": 0.010164851250068838, "phrase": "main_scenario"}, {"score": 0.006070895026582227, "phrase": "hazop"}, {"score": 0.0047185649878632475, "phrase": "popular_method"}, {"score": 0.004677847043645765, "phrase": "functional_requirements"}, {"score": 0.004326771493322954, "phrase": "requirements_specification"}, {"score": 0.004167218012926657, "phrase": "previous_research"}, {"score": 0.004143196873246147, "phrase": "manual_identification"}, {"score": 0.003832092687255493, "phrase": "automatic_method"}, {"score": 0.003575151757072538, "phrase": "nlp_tools"}, {"score": 0.003523822585025555, "phrase": "activity_type"}, {"score": 0.003503497128638102, "phrase": "information_object"}, {"score": 0.0033547343924455486, "phrase": "information_objects"}, {"score": 0.0032122679403131537, "phrase": "empirical_knowledge"}, {"score": 0.0030404363386284756, "phrase": "possible_events"}, {"score": 0.0029794666460666646, "phrase": "nlg_pattern"}, {"score": 0.0028944757265206332, "phrase": "event_type"}, {"score": 0.002877769867854964, "phrase": "natural_language"}, {"score": 0.0026846436189970446, "phrase": "turing_test"}, {"score": 0.0026460656993236354, "phrase": "linguistic_quality"}, {"score": 0.0026307897899760383, "phrase": "generated_descriptions"}, {"score": 0.0025409639091476363, "phrase": "manual_approaches"}, {"score": 0.0024400265512135397, "phrase": "ad_hoc_approach"}, {"score": 0.0023027301589859496, "phrase": "generated_event_descriptions"}, {"score": 0.0021605907787994446, "phrase": "contemporary_tools"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Requirements engineering", " Use cases", " Functional requirements", " Natural language processing"], "paper_abstract": "Context: Use cases are a popular method of expressing functional requirements. One contains a main scenario and a set of extensions, each consisting of an event and an alternative sequence of activities. Events omitted in requirements specification can lead to rework. Unfortunately, as it follows from the previous research, manual identification of events is rather ineffective (less than 1/3 of events are identified) and it is slow. Objective: The goal of this paper is to propose an automatic method of identification of events in use cases and evaluate its quality. Method: Each step of a main scenario is analyzed by a sequence of NLP tools to identify its performer, activity type and information object. It has been observed that performer, activity type and some attributes of information objects determine types of events that can occur when that activity is performed. That empirical knowledge is represented as a set of axioms and two inference rules have been proposed which allow to identify types of possible events. For each event type an NLG pattern is proposed which allows to generate description of the event type in natural language. The proposed method was compared with two manual approaches to identification of events: ad hoc and HAZOP-based. Also a kind of Turing test was performed to evaluate linguistic quality of generated descriptions. Results: Accuracy of the proposed method is about 80% (for manual approaches it is less than 1/3) and its speed is about 11 steps/minute (ad hoc approach is 4 times slower, and HAZOP-based approach is 20 times slower). Understandability of the generated event descriptions was not worse than understandability of the descriptions written by humans. Conclusions: The proposed method could be used to enhance contemporary tools for managing use cases. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Automated events identification in use cases", "paper_id": "WOS:000347022800007"}