{"auto_keywords": [{"score": 0.047394121869807716, "phrase": "software_systems"}, {"score": 0.041652837252711225, "phrase": "artificial_environment"}, {"score": 0.00481495049065317, "phrase": "-guarantee_verification"}, {"score": 0.0047689174754929195, "phrase": "software_components"}, {"score": 0.004655742198075387, "phrase": "key_problem"}, {"score": 0.004611224230543916, "phrase": "compositional_model"}, {"score": 0.004480196733208298, "phrase": "typical_model_checkers"}, {"score": 0.004069631519385246, "phrase": "typical_solution"}, {"score": 0.0038047474331318974, "phrase": "runnable_program"}, {"score": 0.0035399770257915466, "phrase": "universal_environment"}, {"score": 0.0034725269588525534, "phrase": "possible_sequences"}, {"score": 0.0033575566897536906, "phrase": "component's_methods"}, {"score": 0.0033094525227603012, "phrase": "practical_purposes"}, {"score": 0.0030790429005600898, "phrase": "particular_software_system"}, {"score": 0.0029343925814926787, "phrase": "assume-guarantee_reasoning"}, {"score": 0.0028100102841877835, "phrase": "-guarantee-based_veri"}, {"score": 0.002385892145665664, "phrase": "java"}, {"score": 0.0023515464194592195, "phrase": "model_checker"}, {"score": 0.0021876814398268775, "phrase": "non-trivial_software_system"}, {"score": 0.0021049977753042253, "phrase": "similar_goals"}], "paper_keywords": [""], "paper_abstract": "A key problem in compositional model checking of software systems is that typical model checkers accept only closed systems (runnable programs) and therefore a component cannot be model-checked directly. A typical solution is to create an artificial environment for the component such that its composition forms a runnable program that can be model-checked. Although it is possible to create a universal environment that performs all possible sequences and interleavings of calls of the component's methods, for practical purposes it is sufficient to capture in this way just the use of the component in a particular software system-this idea is expressed by the paradigm of assume-guarantee reasoning. The authors present an approach to assume-guarantee-based veri. cation of software systems in the context of the SOFA 2 component framework. They provide an overview of the approach to the construction of an artificial environment for the veri. cation of SOFA 2 components implemented in Java with the Java PathFinder model checker. They also show the benefits of their approach on results of experiments with a non-trivial software system and discuss its advantages over other approaches with similar goals.", "paper_title": "Assume-guarantee verification of software components in SOFA 2 framework", "paper_id": "WOS:000279258600004"}