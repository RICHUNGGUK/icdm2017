{"auto_keywords": [{"score": 0.04590884875550199, "phrase": "bt_model"}, {"score": 0.015719716506582538, "phrase": "dynamic_programming_algorithms"}, {"score": 0.004716520738331953, "phrase": "formal_model"}, {"score": 0.004601045179623499, "phrase": "prioritized_branching_programs"}, {"score": 0.004360412703519539, "phrase": "alekhnovich_et_al"}, {"score": 0.004253618550301311, "phrase": "computational_complexity"}, {"score": 0.0039323225960857956, "phrase": "priority_algorithms_model"}, {"score": 0.0038999619473034557, "phrase": "borodin"}, {"score": 0.0038678266106983955, "phrase": "nielson"}, {"score": 0.0038359741509297837, "phrase": "rackoff"}, {"score": 0.003757480190200645, "phrase": "distinguishing_features"}, {"score": 0.0036052633308076933, "phrase": "large_classes"}, {"score": 0.0030554300179552415, "phrase": "dynamic_programming"}, {"score": 0.002847858807513713, "phrase": "natural_restrictions"}, {"score": 0.002515272856011004, "phrase": "classical_shortest_paths_problem"}, {"score": 0.002393353846080347, "phrase": "bipartite_matching"}, {"score": 0.0021940118003312397, "phrase": "network_flow_algorithms"}, {"score": 0.0021669202726173928, "phrase": "simple_linear_programming"}, {"score": 0.0021049977753042253, "phrase": "natural_dynamic_programming_approaches"}], "paper_keywords": ["Dynamic programming", " Algorithmic paradigms", " Priority algorithms"], "paper_abstract": "We define a formal model of dynamic programming algorithms which we call Prioritized Branching Programs (pBP). Our model is a generalization of the BT model of Alekhnovich et al. (IEEE Conference on Computational Complexity, pp. 308-322, 2005), which is in turn a generalization of the priority algorithms model of Borodin, Nielson and Rackoff. One of the distinguishing features of these models is that they not only capture large classes of algorithms generally considered to be greedy, backtracking or dynamic programming algorithms, but they also allow characterizations of their limitations. Hence they give meaning to the statement that a given problem can or cannot be solved by dynamic programming. After defining the model, we prove three main results: (i) that certain types of natural restrictions of our seemingly more powerful model can be simulated by the BT model; (ii) that in general our model is stronger than the BT model-a fact which is witnessed by the classical shortest paths problem; (iii) that our model has very real limitations, namely that bipartite matching cannot be efficiently computed in it, hence suggesting that there are problems that can be solved efficiently by network flow algorithms and by simple linear programming that cannot be solved by natural dynamic programming approaches.", "paper_title": "A Stronger Model of Dynamic Programming Algorithms", "paper_id": "WOS:000290267000011"}