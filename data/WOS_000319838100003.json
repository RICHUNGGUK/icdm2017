{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "monotonic_abstraction_for_programs"}, {"score": 0.0047310525657970615, "phrase": "multiply-linked_structures."}, {"score": 0.004487989502479992, "phrase": "monotonic_abstraction"}, {"score": 0.00440976345264104, "phrase": "backward_reachability_analysis"}, {"score": 0.004257360656055417, "phrase": "performing_shape_analysis"}, {"score": 0.003698442219929622, "phrase": "edge-labeled_graph"}, {"score": 0.0035082436540296406, "phrase": "low_level_behaviour"}, {"score": 0.003298631258267805, "phrase": "c_programming_language"}, {"score": 0.002646880721119838, "phrase": "null_pointer_dereference"}, {"score": 0.002600661525224505, "phrase": "shape_invariants"}, {"score": 0.0021049977753042253, "phrase": "doubly-linked_lists"}], "paper_keywords": ["Program verification", " shape analysis", " monotonic abstraction", " dynamic multiply-linked data structures"], "paper_abstract": "We investigate the use of monotonic abstraction and backward reachability analysis as means of performing shape analysis on programs with multiply pointed structures. By encoding the heap as a vertex- and edge-labeled graph, we can model the low level behaviour exhibited by programs written in the C programming language. Using the notion of signatures, which are predicates that define sets of heaps, we can check properties such as absence of null pointer dereference and shape invariants. We report on the results from running a prototype based on the method on several programs such as insertion into and merging of doubly-linked lists.", "paper_title": "MONOTONIC ABSTRACTION FOR PROGRAMS WITH MULTIPLY-LINKED STRUCTURES", "paper_id": "WOS:000319838100003"}