{"auto_keywords": [{"score": 0.04978573858550203, "phrase": "fair_scheduling"}, {"score": 0.04135307080235011, "phrase": "cpu_rates"}, {"score": 0.00481495049065317, "phrase": "new_algorithm"}, {"score": 0.004016674413640846, "phrase": "main_idea"}, {"score": 0.0037195507046380036, "phrase": "user's_weight"}, {"score": 0.0035848128208966403, "phrase": "user's_contribution"}, {"score": 0.0030738153524707094, "phrase": "available_computational_capacity"}, {"score": 0.003045575673942459, "phrase": "fair_manner"}, {"score": 0.00269286089128731, "phrase": "sfto_policy"}, {"score": 0.00263546540607024, "phrase": "adjusted_fair_completion_time"}, {"score": 0.0026032174806986256, "phrase": "max-_min_fair_share"}, {"score": 0.0024857542101349808, "phrase": "fair_task_order"}, {"score": 0.0024029886206651573, "phrase": "max-_min_fair_sharing_policy"}, {"score": 0.0023517568875393345, "phrase": "traditional_scheduling_schemes"}, {"score": 0.002322998660337857, "phrase": "edf"}, {"score": 0.0023016220921275457, "phrase": "fcfs"}, {"score": 0.002224966726830651, "phrase": "real_experiments"}, {"score": 0.0021376596688185605, "phrase": "scheduling_schemes"}, {"score": 0.0021049977753042253, "phrase": "existing_grid_computing_architectures"}], "paper_keywords": ["grid computing", " fair grid scheduling"], "paper_abstract": "In this paper, we propose a new algorithm for fair scheduling, and we compare it to other scheduling schemes such as the Earliest Deadline First ( EDF) and the First Come First Served ( FCFS) schemes. Our algorithm uses a max- min fair sharing approach for providing fair access to users. When there is no shortage of resources, the algorithm assigns to each task enough computational power for it to finish within its deadline. When there is congestion, the main idea is to fairly reduce the CPU rates assigned to the tasks so that the share of resources that each user gets is proportional to the user's weight. The weight of a user may be defined as the user's contribution to the infrastructure or the price he is willing to pay for services or any other socioeconomic consideration. In our algorithms, all tasks whose requirements are lower than their fair share CPU rate are served at their demanded CPU rates. However, the CPU rates of tasks whose requirements are larger than their fair share CPU rate are reduced to fit the total available computational capacity in a fair manner. Three different versions of fair scheduling are adopted in this paper: the Simple Fair Task Order ( SFTO), which schedules the tasks according to their respective fair completion times, the Adjusted Fair Task Order ( AFTO), which refines the SFTO policy by ordering the tasks using the adjusted fair completion time, and the Max- Min Fair Share ( MMFS) scheduling policy, which simultaneously addresses the problem of finding a fair task order and assigning a processor to each task based on a max- min fair sharing policy. Experimental results and comparisons with traditional scheduling schemes such as the EDF and the FCFS are presented using three different error criteria. Validation of the simulations using real experiments of tasks generated from 3D imagerendering processes is also provided. The three proposed scheduling schemes can be integrated into existing Grid computing architectures.", "paper_title": "Fair scheduling algorithms in grids", "paper_id": "WOS:000249702800012"}