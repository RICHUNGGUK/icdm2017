{"auto_keywords": [{"score": 0.04375046794702629, "phrase": "cit"}, {"score": 0.00481495049065317, "phrase": "interaction_test_suites"}, {"score": 0.004766683200410046, "phrase": "highly-configurable_systems"}, {"score": 0.004442032546224076, "phrase": "combinatorial_interaction_testing"}, {"score": 0.004288059466938456, "phrase": "systematic_testing"}, {"score": 0.004245051445971095, "phrase": "software_system_configurations"}, {"score": 0.004139401327448807, "phrase": "highly-configurable_software_systems"}, {"score": 0.0038379074449947067, "phrase": "specific_configuration_parameters"}, {"score": 0.003558294449586273, "phrase": "recent_work"}, {"score": 0.003522579870903474, "phrase": "automated_constraint_solving_methods"}, {"score": 0.0034348484776384643, "phrase": "search-based_cit_construction_methods"}, {"score": 0.0033156708990372047, "phrase": "promising_results"}, {"score": 0.0031684791285366315, "phrase": "nontrivial_overhead"}, {"score": 0.0029374939071038146, "phrase": "greedy_cit_sample_generation_algorithms"}, {"score": 0.0028498718992429825, "phrase": "modern_boolean_satisfiability"}, {"score": 0.0027370835853738626, "phrase": "search_space"}, {"score": 0.0026959452932289797, "phrase": "cit_problem"}, {"score": 0.002628747284714371, "phrase": "comparative_evaluation"}, {"score": 0.0025892330566358503, "phrase": "cost_effectiveness"}, {"score": 0.0021049977753042253, "phrase": "widely_used_unconstrained_cit_methods"}], "paper_keywords": ["combinatorial interaction testing", " constraints", " covering arrays", " propositional logic", " satisfiability (SAT) checking"], "paper_abstract": "Researchers have explored the application of combinatorial interaction testing (CIT) methods to construct samples to drive systematic testing of software system configurations. Applying CIT to highly-configurable software systems is complicated by the fact that, in many such systems, there are constraints between specific configuration parameters that render certain combinations invalid. Many CIT algorithms lack a mechanism to avoid these. In recent work, automated constraint solving methods have been combined with search-based CIT construction methods to address the constraint problem with promising results. However, these techniques can incur a nontrivial overhead. In this paper, we build upon our previous work to develop a family of greedy CIT sample generation algorithms that exploit calculations made by modern Boolean satisfiability (SAT) solvers to prune the search space of the CIT problem. We perform a comparative evaluation of the cost effectiveness of these algorithms on four real-world highly-configurable software systems and on a population of synthetic examples that share the characteristics of those systems. In combination, our techniques reduce the cost of CIT in the presence of constraints to 30 percent of the cost of widely used unconstrained CIT methods without sacrificing the quality of the solutions.", "paper_title": "Constructing interaction test suites for highly-configurable systems in the presence of constraints: A greedy approach", "paper_id": "WOS:000259456600005"}