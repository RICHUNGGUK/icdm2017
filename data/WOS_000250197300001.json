{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "full_functionality"}, {"score": 0.004677372885331908, "phrase": "new_data_structures"}, {"score": 0.004576763709613412, "phrase": "compressed_suffix_trees"}, {"score": 0.004350308086118336, "phrase": "text_size"}, {"score": 0.0036026484429137998, "phrase": "alphabet_a."}, {"score": 0.0034995881411519925, "phrase": "remarkable_improvement"}, {"score": 0.0034491650585057754, "phrase": "current_suffix_trees"}, {"score": 0.0031386091093713706, "phrase": "suffix_trees"}, {"score": 0.0029615198132465236, "phrase": "linear-size_data_structure"}, {"score": 0.0027741761880779535, "phrase": "suffix_links"}, {"score": 0.00269475174341129, "phrase": "lowest_common_ancestors"}, {"score": 0.0026366753045215558, "phrase": "data_structure"}, {"score": 0.0025059724686541263, "phrase": "first_one"}, {"score": 0.0024519545383399773, "phrase": "linear_size"}, {"score": 0.0022472527731744974, "phrase": "suffix_tree"}, {"score": 0.0021049977753042253, "phrase": "slight_slowdown"}], "paper_keywords": [""], "paper_abstract": "We introduce new data structures for, compressed suffix trees whose size are linear in the text size. The size is measured in bits; thus they occupy only O(n log vertical bar A vertical bar) bits for a text of length n on an alphabet A. This is a remarkable improvement on current suffix trees which require O(n log n), bits. Though some components of suffix trees have been compressed, there is no linear-size data structure for suffix trees with full functionality such as computing suffix links, string-depths and lowest common ancestors. The data structure proposed in this paper is the first one that has linear size and supports all operations efficiently. Any algorithm running on a suffix tree can also be executed on our compressed suffix trees with a slight slowdown of a factor of polylog(n).", "paper_title": "Compressed suffix trees with full functionality", "paper_id": "WOS:000250197300001"}