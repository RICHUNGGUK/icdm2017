{"auto_keywords": [{"score": 0.037202070020875694, "phrase": "asn"}, {"score": 0.014354506572276202, "phrase": "real_deadlocks"}, {"score": 0.013359851962292994, "phrase": "real_deadlock"}, {"score": 0.00481495049065317, "phrase": "large-scale_multithreaded_programs"}, {"score": 0.004654826737377134, "phrase": "existing_deadlock_warning_detection_techniques"}, {"score": 0.003911367220315185, "phrase": "active_randomized_testing_schedulers"}, {"score": 0.0037267132967205136, "phrase": "pervious_experiments"}, {"score": 0.0033182152378613767, "phrase": "high_probabilities"}, {"score": 0.00317681090697906, "phrase": "confirmation_run"}, {"score": 0.002655894070657161, "phrase": "position_sets"}, {"score": 0.002319127685733821, "phrase": "real-world_multithreaded_programs"}, {"score": 0.0021881743793875767, "phrase": "benchmark_suite"}, {"score": 0.0021254913611527455, "phrase": "significantly_higher_probabilities"}, {"score": 0.0021049977753042253, "phrase": "existing_schedulers"}], "paper_keywords": ["Debugging", " deadlock triggering", " randomized testing", " large-scale multithreaded programs"], "paper_abstract": "Many large-scale multithreaded programs incur deadlock bugs. Existing deadlock warning detection techniques only report warning scenarios, which may or may not be real deadlocks. Each warning should be further verified on whether it may manifest into a real deadlock. For this purpose, a number of active randomized testing schedulers have been developed to trigger them, and yet pervious experiments show that their deadlock confirmation probability can be low. This paper presents ASN, a novel barrier-based randomized scheduler that triggers real deadlocks with high probabilities. We exploit the insights that in a confirmation run, the threads involved in a real deadlock should properly acquire one or more sets of locks prior to deadlocking. ASN automatically identifies three interesting sets of such positions. It guides the threads participating in a given warning to stay at these position sets in turn. When all the threads are staying at the last position set, ASN checks whether any deadlock that matches with the given warning has been triggered. We have evaluated ASN on 15 deadlock bugs in a suite of real-world multithreaded programs. The results show that ASN either confirms more deadlocks from the benchmark suite or triggers the same deadlocks with significantly higher probabilities than existing schedulers.", "paper_title": "ASN: A Dynamic Barrier-Based Approach to Confirmation of Deadlocks from Warnings for Large-Scale Multithreaded Programs", "paper_id": "WOS:000348206700002"}