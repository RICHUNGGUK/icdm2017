{"auto_keywords": [{"score": 0.04929460594219637, "phrase": "square_root_unit"}, {"score": 0.04738540666055716, "phrase": "square_root"}, {"score": 0.03363896917055258, "phrase": "digit-recurrence_algorithm"}, {"score": 0.00481495049065317, "phrase": "power_efficient_division"}, {"score": 0.00443308765153716, "phrase": "frequent_operations"}, {"score": 0.004047781270412204, "phrase": "overall_performance"}, {"score": 0.0035461185748399435, "phrase": "newton-raphson"}, {"score": 0.0034306925765832633, "phrase": "previous_work"}, {"score": 0.0032916702592724217, "phrase": "square_root_units"}, {"score": 0.0031064226956732497, "phrase": "best_tradeoff_delay-area-power"}, {"score": 0.0028127163745564777, "phrase": "single_unit"}, {"score": 0.0024637379406427856, "phrase": "proposed_unit"}, {"score": 0.0023834640793589435, "phrase": "similar_solutions"}, {"score": 0.0021049977753042253, "phrase": "multiplicative_newton-raphson_algorithm"}], "paper_keywords": ["Floating point", " division", " square root", " digit-recurrence"], "paper_abstract": "Although division and square root are not frequent operations, most processors implement them in hardware to not compromise the overall performance. Two classes of algorithms implement division or square root: digit-recurrence and multiplicative (e.g., Newton-Raphson) algorithms. Previous work shows that division and square root units based on the digit-recurrence algorithm offer the best tradeoff delay-area-power. Moreover, the two operations can be combined in a single unit. Here, we present a radix-16 combined division and square root unit obtained by overlapping two radix-4 stages. The proposed unit is compared to similar solutions based on the digit-recurrence algorithm and it is compared to a unit based on the multiplicative Newton-Raphson algorithm.", "paper_title": "Power Efficient Division and Square Root Unit", "paper_id": "WOS:000305706700002"}