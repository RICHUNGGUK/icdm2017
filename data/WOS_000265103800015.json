{"auto_keywords": [{"score": 0.04724995567574427, "phrase": "software-managed_cache"}, {"score": 0.015719716506582538, "phrase": "cell_broadband_engine_architecture"}, {"score": 0.012383809682227161, "phrase": "local_storage"}, {"score": 0.01040914621037633, "phrase": "main_memory"}, {"score": 0.010252937225989227, "phrase": "cache_section"}, {"score": 0.009363244378767989, "phrase": "ecells_cache"}, {"score": 0.009176165132741972, "phrase": "cache_buffer"}, {"score": 0.004706371093110664, "phrase": "substantial_computational_power"}, {"score": 0.004623608221548592, "phrase": "traditional_programming"}, {"score": 0.00433967854548723, "phrase": "current_software-managed_cache_technologies"}, {"score": 0.004231029153290218, "phrase": "full_implementation"}, {"score": 0.00409382470158851, "phrase": "vector_computational_unit"}, {"score": 0.004011603024990615, "phrase": "external_managing_code"}, {"score": 0.0039310261964323545, "phrase": "computing_code_explosion"}, {"score": 0.0038814864204867855, "phrase": "computing_burden"}, {"score": 0.0038228589277720633, "phrase": "external_code"}, {"score": 0.003803513126017516, "phrase": "precious_room"}, {"score": 0.003524760627825428, "phrase": "memory_access"}, {"score": 0.0034715024835657348, "phrase": "efficient_software-managed_cache"}, {"score": 0.0033333689389109817, "phrase": "cache_implementation"}, {"score": 0.003308085469148074, "phrase": "cache_code_size"}, {"score": 0.0032498315583945163, "phrase": "code_segment"}, {"score": 0.003073322256363375, "phrase": "cache_sections"}, {"score": 0.003026864499652483, "phrase": "cache_bind"}, {"score": 0.0029660081705452862, "phrase": "simd_technology"}, {"score": 0.0029211678696972015, "phrase": "coarse-grain_managing_method"}, {"score": 0.0028697077879305064, "phrase": "software_cache"}, {"score": 0.0028263198663287846, "phrase": "spu"}, {"score": 0.0027554538693034163, "phrase": "cache_managing_code"}, {"score": 0.002713788077665689, "phrase": "local_address_remapping_technology"}, {"score": 0.0026592094867526803, "phrase": "openmp_directive"}, {"score": 0.002482969051244798, "phrase": "spe"}, {"score": 0.002408418252301989, "phrase": "computing_source_code"}, {"score": 0.0023301793939902015, "phrase": "experimental_results"}, {"score": 0.0022891064230132502, "phrase": "cell_processor"}, {"score": 0.002226017732566121, "phrase": "cbe_sdk_software-managed_cache"}, {"score": 0.002121105697100881, "phrase": "port_applications"}, {"score": 0.0021049977753042253, "phrase": "cbe_architecture"}], "paper_keywords": [""], "paper_abstract": "While the CBEA (Cell Broadband Engine Architecture) offers substantial computational power, its explicit multilevel memory hierarchy poses significant challenges to traditional programming, especially in performance and programmability. Software-managed cache is a technique that attempts to address such issues. But there still remain some limitations in current software-managed cache technologies. First, a complex managing logic of the full implementation of the software-managed cache which is not suitable for SPU designed as a vector computational unit influences computation significantly. Second, the external managing code of the software-managed cache causes the amount of computing code explosion. Besides increasing the computing burden of the accelerator, the external code occupies precious room of local storage which is shared by computing code and data. Finally, its inconvenient user interface presents significant obstacles for it to be widely applied. Based on the locality of memory access, this paper proposes an efficient software-managed cache named ECellS cache. In the paper, several customized library interfaces were designed respectively to simplify the cache implementation and reduce cache code size. On the other hand, the code segment of the application which accesses data residing in main memory frequently is defined as a cache section. Several of these types of cache sections could be combined into a cache bind and be managed in parallel by using SIMD technology. By this type of coarse-grain managing method and additional simplifying the construction of software cache, ECellS cache reduces both the burden of SPU to manage the cache buffer and the size of the cache managing code. Finally, based on local address remapping technology, a more convenient programming interface which is similar to OpenMP directive is presented to facilitate programming. By this technology, requesting for data residing in the main memory will be automatically mapped to cache buffer in local storage of SPE, and there needs to be no extra modifying for the computing source code inside the cache section except for inserting the directive outside of it. Experimental results of this paper based on the Cell processor demonstrate that our proposed software-managed cache improves performance by 15-35% over the CBE SDK software-managed cache in most test cases. With ECellS cache it could be more convenient for the user to develop and port applications based on CBE architecture.", "paper_title": "An Efficient Software-Managed Cache Based on Cell Broadband Engine Architecture", "paper_id": "WOS:000265103800015"}