{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pcm-based_embedded_systems"}, {"score": 0.046534781659711734, "phrase": "embedded_systems"}, {"score": 0.004686320600790233, "phrase": "pcm"}, {"score": 0.004561019117546361, "phrase": "promising_candidate"}, {"score": 0.004300951511110487, "phrase": "zero_leakage_power"}, {"score": 0.00418595288276353, "phrase": "high_density"}, {"score": 0.004019171295196278, "phrase": "limited_number"}, {"score": 0.003983016985197904, "phrase": "write_operations"}, {"score": 0.003688497722149817, "phrase": "extremely_unbalanced_way"}, {"score": 0.0035898158129721003, "phrase": "pcm_lifetime"}, {"score": 0.0034467039994594065, "phrase": "space-based_wear_leveling_technique"}, {"score": 0.0033242742850902295, "phrase": "program-specific_features"}, {"score": 0.0032794890195334513, "phrase": "basic_idea"}, {"score": 0.003220709449062307, "phrase": "frequently_written_variables"}, {"score": 0.003191714656606822, "phrase": "specific-sized_arrays"}, {"score": 0.0030922667860233603, "phrase": "allocated_array"}, {"score": 0.002955533639862811, "phrase": "write_traffic"}, {"score": 0.0028764048059439205, "phrase": "whole_pcm_chip"}, {"score": 0.002699889709390707, "phrase": "optimal_and_near-optimal_space_allocation"}, {"score": 0.0026157259734105, "phrase": "balanced_write_distribution"}, {"score": 0.0025804616931593897, "phrase": "experimental_results"}, {"score": 0.00237861522566195, "phrase": "theoretical_maximum"}, {"score": 0.0023044434462692483, "phrase": "baseline_scheme"}, {"score": 0.0022836785412390544, "phrase": "wear-leveling_mechanism"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Phase change memory", " Wear-leveling", " Endurance", " Non-volatile memory", " Embedded systems"], "paper_abstract": "Phase change memory (PCM) has emerged as a promising candidate to replace DRAM in embedded systems, due to its appealing properties, such as zero leakage power, scalability, shock-resistivity and high density. However, it can only sustain a limited number of write operations. On the other hand, as a program in embedded systems usually distributes write traffic in an extremely unbalanced way, which could further decrease PCM lifetime. In this paper, we propose a space-based wear leveling technique in software compiler level by exploiting the program-specific features. The basic idea is to extend frequently written variables into specific-sized arrays, and evenly distribute writes on allocated array. In such way, we can effectively distribute the write traffic of the program across the whole PCM chip. A space allocation and reuse (SAR) strategy and a polynomial-time algorithm are proposed to produce optimal and near-optimal space allocation, respectively, for achieving a balanced write distribution. The experimental results show our technique can greatly extend the lifetime of PCM-based embedded systems compared with the previous work, and achieve approximately 94% the theoretical maximum of lifetime. Compared with a baseline scheme without Wear-leveling mechanism, our technique introduces no more than 0.8% extra writes and 0.7% running overhead. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A space allocation and reuse strategy for PCM-based embedded systems", "paper_id": "WOS:000343626900004"}