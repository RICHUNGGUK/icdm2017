{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "browser"}, {"score": 0.004363846362238565, "phrase": "valid_alternative"}, {"score": 0.004278807087784626, "phrase": "web_development"}, {"score": 0.003954837422946628, "phrase": "accessible_applications"}, {"score": 0.003584025547693836, "phrase": "java_script-coded_engine"}, {"score": 0.003479692058963528, "phrase": "significant_performance_improvements"}, {"score": 0.003378385493203297, "phrase": "model_view"}, {"score": 0.0030614565460256897, "phrase": "significant_drawbacks"}, {"score": 0.0030017207229983385, "phrase": "bst's_dependence"}, {"score": 0.002943147037670826, "phrase": "java_script"}, {"score": 0.0027741761880779535, "phrase": "delivered_pages'_content"}, {"score": 0.0026148807877309417, "phrase": "web_visibility"}], "paper_keywords": [""], "paper_abstract": "Browser-side templating (BST) is a valid alternative for Web development, even when it comes to building accessible applications. BST processes templates in the browser using a Java Script-coded engine, providing significant performance improvements and making model view separation a reality. However, it also has significant drawbacks. BST's dependence on Java Script affects its accessibility and hides the delivered pages' content from search engines, hampering Web visibility. The authors confront this dilemma and propose a technique that lets BST be accessible and semantically crawlable, while preserving its advantages.", "paper_title": "Is the Browser the Side for Templating?", "paper_id": "WOS:000298762600009"}