{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "static_analysis"}, {"score": 0.013963943833935155, "phrase": "sparql"}, {"score": 0.004760394308239882, "phrase": "optimization_of_semantic_web_queries"}, {"score": 0.004626680470601208, "phrase": "fundamental_task"}, {"score": 0.004574247691703376, "phrase": "query_optimization"}, {"score": 0.0041517954514423625, "phrase": "standard_language"}, {"score": 0.004081385289516914, "phrase": "semantic_web_data"}, {"score": 0.00401216440036853, "phrase": "particular_interest"}, {"score": 0.003899385109646589, "phrase": "optionality_feature"}, {"score": 0.003855166066455197, "phrase": "sparql."}, {"score": 0.003746779951069909, "phrase": "semantic_web_data_management"}, {"score": 0.003683213029483699, "phrase": "data_sources"}, {"score": 0.003459191419478298, "phrase": "partial_answers"}, {"score": 0.003193606324727067, "phrase": "also_the_one"}, {"score": 0.003068537223324389, "phrase": "classical_query_languages"}, {"score": 0.0030164423559955896, "phrase": "relational_conjunctive_queries"}, {"score": 0.002881793492919646, "phrase": "well-designed_sparql_queries"}, {"score": 0.0026302120935562568, "phrase": "good_properties"}, {"score": 0.0026003455833291124, "phrase": "query_evaluation"}, {"score": 0.0025127604406208668, "phrase": "tree_representation"}, {"score": 0.0024842242921857705, "phrase": "sparql_queries"}, {"score": 0.0023329572140896237, "phrase": "well-designed_sparql_graph_patterns"}, {"score": 0.0021413855297794946, "phrase": "pattern_trees"}, {"score": 0.0021049977753042253, "phrase": "simple_normal_form"}], "paper_keywords": ["Theory", " Optimization", " query containment", " RDF", " Semantic Web", " SPARQL"], "paper_abstract": "Static analysis is a fundamental task in query optimization. In this article we study static analysis and optimization techniques for SPARQL, which is the standard language for querying Semantic Web data. Of particular interest for us is the optionality feature in SPARQL. It is crucial in Semantic Web data management, where data sources are inherently incomplete and the user is usually interested in partial answers to queries. This feature is one of the most complicated constructors in SPARQL and also the one that makes this language depart from classical query languages such as relational conjunctive queries. We focus on the class of well-designed SPARQL queries, which has been proposed in the literature as a fragment of the language with good properties regarding query evaluation. We first propose a tree representation for SPARQL queries, called pattern trees, which captures the class of well-designed SPARQL graph patterns. Among other results, we propose several rules that can be used to transform pattern trees into a simple normal form, and study equivalence and containment. We also study the evaluation and enumeration problems for this class of queries.", "paper_title": "Static Analysis and Optimization of Semantic Web Queries", "paper_id": "WOS:000329123100006"}