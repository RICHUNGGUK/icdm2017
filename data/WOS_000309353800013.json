{"auto_keywords": [{"score": 0.04931971121682219, "phrase": "jacobi_method"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_platforms"}, {"score": 0.004638602678192715, "phrase": "cell_be."}, {"score": 0.004444921827311577, "phrase": "heterogeneous_computing"}, {"score": 0.00439777299939725, "phrase": "parallel_computing"}, {"score": 0.0042820680211904235, "phrase": "cell_broadband_engine"}, {"score": 0.004147216579100177, "phrase": "graphics_processing_units"}, {"score": 0.003869373085652601, "phrase": "high_performance_computing"}, {"score": 0.0037474693720823643, "phrase": "software_development_kit"}, {"score": 0.0034963129868796033, "phrase": "complex_and_low-level_architectural_details"}, {"score": 0.003261934055562238, "phrase": "stencil_computations"}, {"score": 0.0031930184711888867, "phrase": "cell_sdk"}, {"score": 0.0030924149740227743, "phrase": "cuda"}, {"score": 0.0029789104204803137, "phrase": "laplace's_differential_equation"}, {"score": 0.002900426826591772, "phrase": "programming_techniques"}, {"score": 0.0028391271282216758, "phrase": "maximum_performance"}, {"score": 0.002794001681064862, "phrase": "cell_be"}, {"score": 0.0027498009724368174, "phrase": "gpu"}, {"score": 0.002662871928330334, "phrase": "experimental_results"}, {"score": 0.002470987929071079, "phrase": "speed-up_factor"}, {"score": 0.002405853977978678, "phrase": "gpu_optimizations"}, {"score": 0.00232995025271599, "phrase": "execution_times"}, {"score": 0.0021735890994119757, "phrase": "great_scalability"}, {"score": 0.0021276181317652163, "phrase": "newer_gpu_generations"}], "paper_keywords": ["Hardware accelerators", " GPGPU", " CELL", " Stencil computations"], "paper_abstract": "We are witnessing the consolidation of the heterogeneous computing in parallel computing with architectures such as Cell Broadband Engine (Cell BE) or Graphics Processing Units (GPUs) which are present in a myriad of developments for high performance computing. These platforms provide a Software Development Kit (SDK) to maximize performance at the expense of dealing with complex and low-level architectural details which makes the software development a daunting task. This paper explores stencil computations in several heterogeneous programming models like Cell SDK, CellSs, ALF and CUDA to optimize the Jacobi method for solving Laplace's differential equation. We describe the programming techniques to extract the maximum performance on the Cell BE and the GPU, and compare their computing paradigms. Experimental results are shown on two Nvidia Teslas and one IBM BladeCenter QS20 blade which incorporates two 3.2 GHz Cell BEs v 5.1. The speed-up factor for our set of GPU optimizations reaches 3-4x, and the execution times defeat those of the Cell BE by an order of magnitude, also showing great scalability when moving towards newer GPU generations and/or more demanding problem sizes.", "paper_title": "Stencil computations on heterogeneous platforms for the Jacobi method: GPUs versus Cell BE", "paper_id": "WOS:000309353800013"}