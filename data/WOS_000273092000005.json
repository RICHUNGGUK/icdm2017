{"auto_keywords": [{"score": 0.047886244803711495, "phrase": "critical_paths"}, {"score": 0.01204992801485761, "phrase": "trifecta"}, {"score": 0.00481495049065317, "phrase": "exploit_common"}, {"score": 0.004774115617883476, "phrase": "data-dependent_subcritical_paths"}, {"score": 0.004733625412289433, "phrase": "pipelined_processor_cores"}, {"score": 0.004459605573798577, "phrase": "single_clock_cycle"}, {"score": 0.0039077616208517026, "phrase": "uncommon_case"}, {"score": 0.0038090874465452214, "phrase": "common_case"}, {"score": 0.003542786326740931, "phrase": "subcritical_path_operations"}, {"score": 0.0034977560416755726, "phrase": "single_cycle"}, {"score": 0.003409399407390298, "phrase": "critical_path"}, {"score": 0.0032810180076973806, "phrase": "single-and_two-cycle_operations"}, {"score": 0.0031845067058084583, "phrase": "process_variation"}, {"score": 0.003117307618682836, "phrase": "existing_mechanisms"}, {"score": 0.002801935384649699, "phrase": "critical_pipeline_stages"}, {"score": 0.002639440558428147, "phrase": "single_issue"}, {"score": 0.0026058621464926826, "phrase": "order_processor"}, {"score": 0.002583713580625699, "phrase": "namely_instruction_issue"}, {"score": 0.002475755804232436, "phrase": "rare_two-cycle_operations"}, {"score": 0.002433843373780471, "phrase": "small_decrease"}, {"score": 0.00235213013487844, "phrase": "floating-point_benchmarks"}, {"score": 0.0022346638243276717, "phrase": "increased_delay_slack"}], "paper_keywords": ["Architecture", " speculative", " variation"], "paper_abstract": "Pipelined processor cores are conventionally designed to accommodate the critical paths in the critical pipeline stage(s) in a single clock cycle, to ensure correctness. Such conservative design is wasteful in many cases since critical paths are rarely exercised. Thus, configuring the pipeline to operate correctly for rarely used critical paths targets the uncommon case instead of optimizing for the common case. In this study, we describe Trifecta-an architectural technique that completes common-case, subcritical path operations in a single cycle but uses two cycles when the critical path is exercised. This increases slack for both single-and two-cycle operations and offers a unique advantage under process variation. In contrast with existing mechanisms that trade power or performance for yield, Trifecta improves the yield while preserving performance and power. We applied this technique to the critical pipeline stages of a superscalar out-of-order (OoO) and a single issue in-order processor, namely instruction issue and execute, respectively. Our experiments show that the rare two-cycle operations result in a small decrease (5% for integer and 2% for floating-point benchmarks of SPEC2000) in instructions per cycle. However, the increased delay slack causes an improvement in yield-adjusted-throughput by 20% (12.7%) for an in-order (InO) processor configuration.", "paper_title": "Trifecta: A Nonspeculative Scheme to Exploit Common, Data-Dependent Subcritical Paths", "paper_id": "WOS:000273092000005"}