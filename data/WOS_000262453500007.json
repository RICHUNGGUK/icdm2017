{"auto_keywords": [{"score": 0.04026893024653011, "phrase": "sdfs_semantics"}, {"score": 0.00481495049065317, "phrase": "static_data_flow_structures"}, {"score": 0.004716520738331953, "phrase": "token-based_model"}, {"score": 0.004652016085325825, "phrase": "asynchronous_data_path"}, {"score": 0.004588389551682397, "phrase": "called_static_data_flow_structures"}, {"score": 0.0037060428445111694, "phrase": "simple_benchmark_example"}, {"score": 0.003435426082776884, "phrase": "spread_token_and_counterflow_models"}, {"score": 0.0030135741897058844, "phrase": "high-level_sdfs_token_game_semantics"}, {"score": 0.0028914057633212045, "phrase": "underlying_petri_nets"}, {"score": 0.0026071599759743833, "phrase": "sdfs_models"}, {"score": 0.0024501740852758505, "phrase": "software_tool"}, {"score": 0.0022710523337245337, "phrase": "consistent_framework"}, {"score": 0.0021049977753042253, "phrase": "existing_model_checking_tools"}], "paper_keywords": [""], "paper_abstract": "A token-based model for asynchronous data path, called static data flow structures (SDFS), is formally defined. Three token game semantics are introduced for this model, namely atomic token, spread token and counterflow. The SDFS semantics are analysed using a simple benchmark example; their advantages and drawbacks are highlighted. A combination of spread token and counterflow models, which employs the advantages of both, is presented. A technique is described for mapping the high-level SDFS token game semantics into the low level of underlying Petri nets (PNs). The PNs are employed as a back-end for verification of SDFS models. For analysis and comparison of SDFS semantics a software tool has been developed, which integrates all SDFS semantics into a consistent framework, implements their conversion into PNs and provides an interface to existing model checking tools.", "paper_title": "Analysis of Static Data Flow Structures", "paper_id": "WOS:000262453500007"}