{"auto_keywords": [{"score": 0.04239913611090826, "phrase": "code_size"}, {"score": 0.036510820863746796, "phrase": "queue_machines"}, {"score": 0.00481495049065317, "phrase": "reduced_bit-width_queue_processors"}, {"score": 0.0045726187330434025, "phrase": "small_memory_footprint_code"}, {"score": 0.004508661664944657, "phrase": "popular_architectural_modification"}, {"score": 0.00444559516711374, "phrase": "code_density"}, {"score": 0.004383406949799696, "phrase": "embedded_processors"}, {"score": 0.004281678802569817, "phrase": "reduced_bit-width_instruction_set"}, {"score": 0.003897742942358768, "phrase": "reduced_instructions"}, {"score": 0.003789395499639015, "phrase": "slight_performance_degradation"}, {"score": 0.003229741076887151, "phrase": "highly_parallel_computation_model"}, {"score": 0.0031695693589575916, "phrase": "stack_model"}, {"score": 0.003081400693055518, "phrase": "novel_alternative"}, {"score": 0.0029816229984366374, "phrase": "queue-based_reduced_instruction"}, {"score": 0.002912331664922248, "phrase": "high_parallelism_characteristics"}, {"score": 0.002818013056816282, "phrase": "efficient_code_generation_algorithm"}, {"score": 0.002626034130205569, "phrase": "reduced_instruction"}, {"score": 0.0025409639091476363, "phrase": "extra_code"}, {"score": 0.0021049977753042253, "phrase": "fully_optimized_risc_code"}], "paper_keywords": ["Code generation", " Compiler", " Reduced bit-width instruction set", " Queue processor"], "paper_abstract": "Embedded systems are characterized by the requirement of demanding small memory footprint code. A popular architectural modification to improve code density in RISC embedded processors is to use a reduced bit-width instruction set. This approach reduces the length of the instructions to improve code size. However, having less addressable registers by the reduced instructions, these architectures suffer a slight performance degradation as more reduced instructions are required to execute a given task. On the other hand, 0-operand computers such as stack and queue machines implicitly access their source and destination operands making instructions naturally short. Queue machines offer a highly parallel computation model, unlike the stack model. This paper proposes a novel alternative for reducing code size by using a queue-based reduced instruction set while retaining the high parallelism characteristics in programs. We introduce an efficient code generation algorithm to generate programs for our reduced instruction set. Our algorithm successfully constrains the code to the reduced instruction set with the addition of only 4% extra code, in average. We show that our proposed technique is able to generate about 16% more compact code than MIPS16, 26% over ARM/Thumb, and 50% over MIPS32 code. Furthermore, we show that our compiler is able to extract about the same parallelism than fully optimized RISC code.", "paper_title": "Compiling for Reduced Bit-Width Queue Processors", "paper_id": "WOS:000275890400005"}