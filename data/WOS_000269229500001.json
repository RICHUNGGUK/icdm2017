{"auto_keywords": [{"score": 0.0324337131484804, "phrase": "eri"}, {"score": 0.00481495049065317, "phrase": "emerging_processor_architectures"}, {"score": 0.004755054742217193, "phrase": "electron_repulsion_integrals"}, {"score": 0.004579780586951551, "phrase": "common_bottleneck"}, {"score": 0.004522796947899013, "phrase": "ab_initio_computational_chemistry"}, {"score": 0.004274981117736524, "phrase": "eris_results"}, {"score": 0.004066076430818046, "phrase": "reconfigurable_computing_and_heterogeneous_processor_architectures"}, {"score": 0.003916098498242888, "phrase": "deliberate_ordering"}, {"score": 0.0038673406001234535, "phrase": "eri_tasks"}, {"score": 0.0036782824183282823, "phrase": "net_speedup"}, {"score": 0.0031056437850836326, "phrase": "five_use_cases"}, {"score": 0.0030097975788892896, "phrase": "i.e._simd_processing"}, {"score": 0.0029722900280316216, "phrase": "reconfigurable_computing"}, {"score": 0.002935248513348432, "phrase": "limited_address_spaces"}, {"score": 0.0028986672783671147, "phrase": "instruction_cache_exploitation"}, {"score": 0.0028446460307503343, "phrase": "data_cache_exploitation"}, {"score": 0.0028091907694771613, "phrase": "specific_consideration"}, {"score": 0.0027395968397212053, "phrase": "existing_cache-based_processors"}, {"score": 0.0023127544795063263, "phrase": "software_autotuners"}, {"score": 0.002255431275670053, "phrase": "efficient_ab_initio_computational_chemistry_codes"}, {"score": 0.0021857667493036786, "phrase": "computer_architectures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hartree-Fock Self-Consistent Field", " Electron repulsion integrals", " Single-instruction-multiple-data processing"], "paper_abstract": "Electron Repulsion Integrals (ERIS) are a common bottleneck in ab initio computational chemistry. It is known that sorted/reordered execution of ERIS results in efficient SIMD/vector processing. This paper shows that reconfigurable computing and heterogeneous processor architectures can also benefit from a deliberate ordering of ERI tasks. However, realizing these benefits as net speedup requires a very rapid sorting mechanism. This paper presents two such mechanisms. Included in this study are analytical, simulation-based. and experimental benchmarking approaches to consider five use cases for ERI sorting, i.e. SIMD processing, reconfigurable computing, limited address spaces, instruction cache exploitation, and data cache exploitation. Specific consideration is given to existing cache-based processors, FPGAs, and the Cell Broadband Engine processor. It is proposed that the analyses conducted in this work should be built upon to aid the development of software autotuners which will produce efficient ab initio computational chemistry codes for a variety of computer architectures. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "ERI sorting for emerging processor architectures", "paper_id": "WOS:000269229500001"}