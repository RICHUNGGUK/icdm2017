{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "minimal_causal_sequences"}, {"score": 0.004714023408114857, "phrase": "software_bugs"}, {"score": 0.004518442937844318, "phrase": "software-defined_networking_control_software"}, {"score": 0.003813669883040509, "phrase": "control_software_troubleshooting"}, {"score": 0.003466536738232506, "phrase": "minimal_sequence"}, {"score": 0.002603012037901889, "phrase": "five_open_source_sdn_control_platforms"}, {"score": 0.0025755272091176357, "phrase": "floodlight"}, {"score": 0.002521426297282335, "phrase": "nox"}, {"score": 0.002468451286595775, "phrase": "pdx"}, {"score": 0.002416589459425828, "phrase": "pyretic"}, {"score": 0.0023658157147640147, "phrase": "onos"}, {"score": 0.0021049977753042253, "phrase": "troubleshooting_process"}], "paper_keywords": ["Test case minimization", " Troubleshooting", " SDN control software"], "paper_abstract": "Software bugs are inevitable in software-defined networking control software, and troubleshooting is a tedious, time-consuming task. In this paper we discuss how to improve control software troubleshooting by presenting a technique for automatically identifying a minimal sequence of inputs responsible for triggering a given bug, without making assumptions about the language or instrumentation of the software under test. We apply our technique to five open source SDN control platforms Floodlight, NOX, PDX, Pyretic, ONOS and illustrate how the minimal causal sequences our system found aided the troubleshooting process.", "paper_title": "Troubleshooting Blackbox SON Control Software with Minimal Causal Sequences", "paper_id": "WOS:000350564600073"}