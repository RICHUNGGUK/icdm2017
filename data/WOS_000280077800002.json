{"auto_keywords": [{"score": 0.03416588362048393, "phrase": "test_cases"}, {"score": 0.00481495049065317, "phrase": "uml_activity_diagrams"}, {"score": 0.004753670676591174, "phrase": "unified_modeling_language"}, {"score": 0.0044873778175404475, "phrase": "system_level_specification_language"}, {"score": 0.004430248457624686, "phrase": "embedded_system_design"}, {"score": 0.00429057323623293, "phrase": "increasing_complexity"}, {"score": 0.004235938758522453, "phrase": "embedded_systems"}, {"score": 0.004050116768809519, "phrase": "uml_specifications"}, {"score": 0.0038973170902076707, "phrase": "uml_activity_diagram"}, {"score": 0.003750260412839128, "phrase": "overall_system_behavior"}, {"score": 0.0035627492415494216, "phrase": "automated_test_case_generation"}, {"score": 0.003450329424861292, "phrase": "uml_activity_diagram_validation"}, {"score": 0.002977061391551628, "phrase": "coverage-driven_mapping_rules"}, {"score": 0.0028830690329478465, "phrase": "activity_diagram"}, {"score": 0.0028463059289874637, "phrase": "formal_models"}, {"score": 0.0026865721000905235, "phrase": "automatic_property_generation"}, {"score": 0.002635339648135844, "phrase": "error_models"}, {"score": 0.0024874156497091994, "phrase": "based_test_case_generation_techniques"}, {"score": 0.0024399717841513354, "phrase": "efficient_test_case_generation"}, {"score": 0.0023029886389559122, "phrase": "validation_effort"}, {"score": 0.0022302306304023602, "phrase": "test_case_generation_time"}, {"score": 0.0021049977753042253, "phrase": "functional_coverage_goal"}], "paper_keywords": ["UML activity diagram", " Testing", " Model checking", " Property decomposition"], "paper_abstract": "Unified Modeling Language (UML) is widely used as a system level specification language in embedded system design. Due to the increasing complexity of embedded systems, the analysis and validation of UML specifications is becoming a challenge. UML activity diagram is promising to modeling the overall system behavior. However, lack of techniques for automated test case generation is one major bottleneck in the UML activity diagram validation. This article presents a methodology for automatically generating test cases based on various model checking techniques. It makes three primary contributions: First, we propose coverage-driven mapping rules that can automatically translate activity diagram to formal models. Next, we present a procedure for automatic property generation according to error models. Finally, we apply various model checking based test case generation techniques to enable efficient test case generation. Our experimental results demonstrate that our approach can reduce the validation effort drastically by reducing both test case generation time and required number of test cases to achieve a functional coverage goal.", "paper_title": "Efficient test case generation for validation of UML activity diagrams", "paper_id": "WOS:000280077800002"}