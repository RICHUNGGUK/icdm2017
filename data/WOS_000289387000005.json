{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "generic_programming"}, {"score": 0.0046164478775379105, "phrase": "effective_methodology"}, {"score": 0.004544127927346964, "phrase": "reusable_software_libraries"}, {"score": 0.0039006600544599537, "phrase": "language_g."}, {"score": 0.0033480035183418642, "phrase": "modular_type_checking"}, {"score": 0.003312901888725435, "phrase": "separate_compilation"}, {"score": 0.0031428202743657057, "phrase": "modular_software_development"}, {"score": 0.003028969851366049, "phrase": "independently_developed_components"}, {"score": 0.0024789887640568093, "phrase": "g._shares"}, {"score": 0.0024017638230939514, "phrase": "concept_extension"}, {"score": 0.002219040041886641, "phrase": "important_differences"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Programming language design", " Generic programming", " Generics", " Polymorphism", " Concepts", " Associated types", " Software reuse", " Type classes", " Modules", " Signatures", " Functors", " Virtual types"], "paper_abstract": "Generic programming is an effective methodology for developing reusable software libraries. Many programming languages provide generics and have features for describing interfaces, but none completely support the idioms used in generic programming. To address this need we developed the language g. The central feature of g, is the concept, a mechanism for organizing constraints on generics that is inspired by the needs of modern C++ libraries. g provides modular type checking and separate compilation (even of generics). These characteristics support modular software development, especially the smooth integration of independently developed components. In this article we present the rationale for the design of g. and demonstrate the expressiveness of g, with two case studies: porting the Standard Template Library and the Boost Graph Library from C++ to g,. The design of g. shares much in common with the concept extension proposed for the next C++ Standard (the authors participated in its design) but there are important differences described in this article. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "A language for generic programming in the large", "paper_id": "WOS:000289387000005"}