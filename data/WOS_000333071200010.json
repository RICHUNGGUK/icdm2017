{"auto_keywords": [{"score": 0.049541388574697955, "phrase": "many-accelerator_architecture"}, {"score": 0.0314183198901541, "phrase": "ams"}, {"score": 0.00481495049065317, "phrase": "reinventing_memory_system_design"}, {"score": 0.004551781491498328, "phrase": "general-purpose_cores"}, {"score": 0.004500891637057374, "phrase": "accelerator-like_function_units"}, {"score": 0.004327196832280818, "phrase": "great_alternative"}, {"score": 0.004278807087784626, "phrase": "homogeneous_chip_multiprocessors"}, {"score": 0.004044822781630218, "phrase": "emerging_many-accelerator_processor"}, {"score": 0.003888659470009222, "phrase": "general_purpose_processors"}, {"score": 0.0036144035798673967, "phrase": "highly-concurrent_memory_streams"}, {"score": 0.0035141291835319682, "phrase": "bandwidth_demand"}, {"score": 0.00345530020388352, "phrase": "disordered_memory_streams"}, {"score": 0.0033974527047473044, "phrase": "diverse_accelerators"}, {"score": 0.0033405704229694656, "phrase": "mutual-interference_behavior"}, {"score": 0.003175556211659149, "phrase": "orthodox_main_memory_interface"}, {"score": 0.003104849179057156, "phrase": "inflexible_data_fetching_mode"}, {"score": 0.003035711716881469, "phrase": "traditional_dram_memory"}, {"score": 0.002853396755102163, "phrase": "characterized_memory_streams"}, {"score": 0.0028214413724451442, "phrase": "different_fus"}, {"score": 0.0026971491199975083, "phrase": "different_data"}, {"score": 0.0025928815987676535, "phrase": "memory_access"}, {"score": 0.002506715532901322, "phrase": "memory_devices"}, {"score": 0.0024786330057813204, "phrase": "sub-rank_binding"}, {"score": 0.0023428586429492713, "phrase": "sub-rank_conflict"}, {"score": 0.0023035922232490106, "phrase": "read_burst"}, {"score": 0.0022145052062614514, "phrase": "trace-based_simulation"}, {"score": 0.0021773853011112882, "phrase": "conspicuous_performance_boost"}, {"score": 0.0021050031045672, "phrase": "ams."}], "paper_keywords": ["many-accelerator", " chip multiprocessor", " memory", " general purpose processor"], "paper_abstract": "The many-accelerator architecture, mostly composed of general-purpose cores and accelerator-like function units (FUs), becomes a great alternative to homogeneous chip multiprocessors (CMPs) for its superior power-efficiency. However, the emerging many-accelerator processor shows a much more complicated memory accessing pattern than general purpose processors (GPPs) because the abundant on-chip FUs tend to generate highly-concurrent memory streams with distinct locality and bandwidth demand. The disordered memory streams issued by diverse accelerators exhibit a mutual-interference behavior and cannot be efficiently handled by the orthodox main memory interface that provides an inflexible data fetching mode. Unlike the traditional DRAM memory, our proposed Aggregation Memory System (AMS) can function adaptively to the characterized memory streams from different FUs, because it provides the FUs with different data fetching sizes and protects their locality in memory access by intelligently interleaving their data to memory devices through sub-rank binding. Moreover, AMS can batch the requests without sub-rank conflict into a read burst with our optimized memory scheduling policy. Experimental results from trace-based simulation show both conspicuous performance boost and energy saving brought by AMS.", "paper_title": "Reinventing Memory System Design for Many-Accelerator Architecture", "paper_id": "WOS:000333071200010"}