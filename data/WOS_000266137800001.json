{"auto_keywords": [{"score": 0.0423522784228447, "phrase": "adopt"}, {"score": 0.009515337300483978, "phrase": "valued_nogoods"}, {"score": 0.00481495049065317, "phrase": "asynchronous_distributed_optimization"}, {"score": 0.0047820521205253035, "phrase": "asynchronous_backtracking"}, {"score": 0.0046846932351254636, "phrase": "asynchronous_algorithm"}, {"score": 0.004636756166068091, "phrase": "distributed_constraint_optimization_problems"}, {"score": 0.004542341892683877, "phrase": "proposed_technique"}, {"score": 0.004465127850483041, "phrase": "abt"}, {"score": 0.0041548413176193235, "phrase": "important_speed-up"}, {"score": 0.004014728271095809, "phrase": "cost_messages"}, {"score": 0.003852791434660505, "phrase": "relevant_agent"}, {"score": 0.0037872535287644103, "phrase": "valued_nogood"}, {"score": 0.0037228262889889402, "phrase": "dago"}, {"score": 0.00369736218441293, "phrase": "verfaille"}, {"score": 0.003634458561248524, "phrase": "classic_nogood"}, {"score": 0.0035603802089559716, "phrase": "conflicting_assignments"}, {"score": 0.0033933295645859015, "phrase": "culprit_constraints"}, {"score": 0.0032230064799028423, "phrase": "asynchronous_overlay"}, {"score": 0.0031572878619497624, "phrase": "dpop."}, {"score": 0.003061206247127742, "phrase": "longest_causal_chain"}, {"score": 0.002907504959509132, "phrase": "remote_agents"}, {"score": 0.002877700749616268, "phrase": "large_latency"}, {"score": 0.002761499542632865, "phrase": "initial_distribution"}, {"score": 0.002649978056195926, "phrase": "preprocessing_step"}, {"score": 0.0024740024667381185, "phrase": "best_dfs_tree"}, {"score": 0.002440231768165477, "phrase": "current_ordering"}, {"score": 0.0021711323811863963, "phrase": "higher_priority_agents"}, {"score": 0.0021049977753042253, "phrase": "magnitude_improvement"}], "paper_keywords": ["DCOPs", " Distributed CSPs", " Semi-cooperative agents", " Distributed problem solving", " ADOPT"], "paper_abstract": "This article presents an asynchronous algorithm for solving distributed constraint optimization problems (DCOPs). The proposed technique unifies asynchronous backtracking (ABT) and asynchronous distributed optimization (ADOPT) where valued nogoods enable more flexible reasoning and more opportunities for communication, leading to an important speed-up. While feedback can be sent in ADOPT by COST messages only to one predefined predecessor, our extension allows for sending such information to any relevant agent. The concept of valued nogood is an extension by Dago and Verfaille of the concept of classic nogood that associates the list of conflicting assignments with a cost and, optionally, with a set of references to culprit constraints. DCOPs have been shown to have very elegant distributed solutions, such as ADOPT, distributed asynchronous overlay (DisAO), or DPOP. These algorithms are typically tuned to minimize the longest causal chain of messages as a measure of how the algorithms will scale for systems with remote agents (with large latency in communication). ADOPT has the property of maintaining the initial distribution of the problem. To be efficient, ADOPT needs a preprocessing step consisting of computing a Depth-First Search (DFS) tree on the constraint graph. Valued nogoods allow for automatically detecting and exploiting the best DFS tree compatible with the current ordering. To exploit such DFS trees it is now sufficient to ensure that they exist. Also, the inference rules available for valued nogoods help to exploit schemes of communication where more feedback is sent to higher priority agents. Together they result in an order of magnitude improvement.", "paper_title": "ADOPT-ing: unifying asynchronous distributed optimization with asynchronous backtracking", "paper_id": "WOS:000266137800001"}