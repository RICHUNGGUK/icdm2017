{"auto_keywords": [{"score": 0.040956844534207316, "phrase": "efficient_implementation"}, {"score": 0.00481495049065317, "phrase": "modern_sat_solvers"}, {"score": 0.004659192888931046, "phrase": "state-of-the-art_complete_sat_solvers"}, {"score": 0.004545686585809905, "phrase": "dpll"}, {"score": 0.004434910775034831, "phrase": "published_descriptions"}, {"score": 0.004380540407926982, "phrase": "modern_algorithms"}, {"score": 0.004344662696228875, "phrase": "related_data_structures"}, {"score": 0.0037621210719690594, "phrase": "correctness_argument"}, {"score": 0.0030623570435946977, "phrase": "sat_solver"}, {"score": 0.002999955539996569, "phrase": "simple_design"}, {"score": 0.002831894638104635, "phrase": "requisite_series"}, {"score": 0.0027741761880779535, "phrase": "heuristic_parts"}, {"score": 0.002618730478351454, "phrase": "solver_correctness"}, {"score": 0.0024017007954518065, "phrase": "correctness_conditions"}, {"score": 0.0023624435546097658, "phrase": "hoare_logic_style"}, {"score": 0.002333421318779658, "phrase": "correctness_proofs"}, {"score": 0.002285839246740627, "phrase": "isabelle_theorem"}, {"score": 0.0022117133940361025, "phrase": "extended_version"}], "paper_keywords": ["SAT solving", " DPLL", " Software verification", " Algorithms", " Data structures"], "paper_abstract": "Most, if not all, state-of-the-art complete SAT solvers are complex variations of the DPLL procedure described in the early 1960's. Published descriptions of these modern algorithms and related data structures are given either as high-level state transition systems or, informally, as (pseudo) programming language code. The former, although often accompanied with (informal) correctness proofs, are usually very abstract and do not specify many details crucial for efficient implementation. The latter usually do not involve any correctness argument and the given code is often hard to understand and modify. This paper aims to bridge this gap by presenting SAT solving algorithms that are formally proved correct and also contain information required for efficient implementation. We use a tutorial, top-down, approach and develop a SAT solver, starting from a simple design that is subsequently extended, step-by-step, with a requisite series of features. The heuristic parts of the solver are abstracted away, since they usually do not affect solver correctness (although they are very important for efficiency). All algorithms are given in pseudo-code and are accompanied with correctness conditions, given in Hoare logic style. The correctness proofs are formalized within the Isabelle theorem proving system and are available in the extended version of this paper. The given pseudo-code served as a basis for our SAT solver argo-sat.", "paper_title": "Formalization and Implementation of Modern SAT Solvers", "paper_id": "WOS:000266090200004"}