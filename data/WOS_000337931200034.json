{"auto_keywords": [{"score": 0.04511040498923801, "phrase": "gpu"}, {"score": 0.04130684214052045, "phrase": "cloud_resources"}, {"score": 0.03441348963883447, "phrase": "local_and_remote_resources"}, {"score": 0.03203379034838617, "phrase": "remote_resources"}, {"score": 0.004674952036988355, "phrase": "widespread_adoption"}, {"score": 0.004647442352794694, "phrase": "traditional_heterogeneous_systems"}, {"score": 0.004579371037534175, "phrase": "computing_power"}, {"score": 0.004459334186889869, "phrase": "optimisation_issues"}, {"score": 0.00438105507792004, "phrase": "task_streams"}, {"score": 0.004278807087784626, "phrase": "heterogeneous_systems"}, {"score": 0.004216112320418982, "phrase": "heterogeneous_improvement"}, {"score": 0.004178935413340453, "phrase": "traditional_systems"}, {"score": 0.004154332348800334, "phrase": "cloud_computing"}, {"score": 0.004093453936415085, "phrase": "heterogeneity_support"}, {"score": 0.004045391554481355, "phrase": "cpu_instances"}, {"score": 0.003997891221012094, "phrase": "conventional_cpu-based_cloud_resources"}, {"score": 0.003881556746152146, "phrase": "real_impact"}, {"score": 0.0038133810870635844, "phrase": "computationally-intensive_applications"}, {"score": 0.0036914757355166966, "phrase": "pattern-based_parallel_applications"}, {"score": 0.0035210572541244664, "phrase": "algorithmic_skeletons"}, {"score": 0.003479692058963528, "phrase": "peculiar_parallel_behaviour"}, {"score": 0.0034489862797891847, "phrase": "implementation_details"}, {"score": 0.0033984088755183287, "phrase": "systematic_methodology"}, {"score": 0.0033288399506044763, "phrase": "integrated_programming_framework"}, {"score": 0.0031845067058084613, "phrase": "structured_parallel_applications"}, {"score": 0.003165739628969694, "phrase": "heterogeneous_cloud_resources"}, {"score": 0.0031285355811105915, "phrase": "performance_values"}, {"score": 0.003091767402370757, "phrase": "local_resources"}, {"score": 0.002897109710213723, "phrase": "performance_models"}, {"score": 0.0026277995163948263, "phrase": "optimal_proportion"}, {"score": 0.002573965014439041, "phrase": "different_remote_nodes"}, {"score": 0.0025587867729949037, "phrase": "big_data_computations"}, {"score": 0.0025286975935774245, "phrase": "different_experiments"}, {"score": 0.002498961351132696, "phrase": "proof-of-concept_implementation"}, {"score": 0.0024622810950164415, "phrase": "small_departmental_clusters"}, {"score": 0.0024189730566375215, "phrase": "public_cloud_infrastructure"}, {"score": 0.0023694065215394593, "phrase": "amazon_elastic_compute_cloud"}, {"score": 0.002253208464566164, "phrase": "remote_cloud_resources"}, {"score": 0.0022399174232611853, "phrase": "predictable_performances"}, {"score": 0.0022135695577201594, "phrase": "intensive_applications"}, {"score": 0.002142696637011647, "phrase": "optimal_performances"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel patterns", " Algorithmic skeletons", " Structured parallelism", " Heterogeneous architectures", " GPU", " Performance models", " Cluster computing", " Cloud computing"], "paper_abstract": "The widespread adoption of traditional heterogeneous systems has substantially improved the computing power available and, in the meantime, raised optimisation issues related to the processing of task streams across both CPU and GPU cores in heterogeneous systems. Similar to the heterogeneous improvement gained in traditional systems, cloud computing has started to add heterogeneity support, typically through CPU instances, to the conventional CPU-based cloud resources. This optimisation of cloud resources will arguably have a real impact when running on-demand computationally-intensive applications. In this work, we investigate the scaling of pattern-based parallel applications from physical, \"local\" mixed CPU/GPU-clusters to a public cloud CPU/GPU infrastructure. Specifically, such parallel patterns are deployed via algorithmic skeletons to exploit a peculiar parallel behaviour while hiding implementation details. We propose a systematic methodology to exploit approximated analytical performance/cost models, and an integrated programming framework that is suitable for targeting both local and remote resources to support the offloading of computations from structured parallel applications to heterogeneous cloud resources, such that performance values not available on local resources may be actually achieved with the remote resources. The amount of remote resources necessary to achieve a given performance target is calculated through the performance models in order to allow any user to hire the amount of cloud resources needed to achieve a given target performance value. Thus, it is therefore expected that such models can be used to devise the optimal proportion of computations to be allocated on different remote nodes for Big Data computations. We present different experiments run with a proof-of-concept implementation based on FastFlow on small departmental clusters as well as on a public cloud infrastructure with CPU and GPU using the Amazon Elastic Compute Cloud. In particular, we show how CPU-only and mixed CPU/GPU computations can be offloaded to remote cloud resources with predictable performances and how data intensive applications can be mapped to a mix of local and remote resources to guarantee optimal performances. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Parallel patterns for heterogeneous CPU/GPU architectures: Structured parallelism from cluster to cloud", "paper_id": "WOS:000337931200034"}