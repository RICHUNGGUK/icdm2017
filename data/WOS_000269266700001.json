{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "distribution_capabilities"}, {"score": 0.04708721257693532, "phrase": "j-orchestra"}, {"score": 0.004671156704912419, "phrase": "centralized_java_programs"}, {"score": 0.004548848077202625, "phrase": "bytecode_level"}, {"score": 0.0044634416051962545, "phrase": "centralized_java_program"}, {"score": 0.004346547997061901, "phrase": "single_java_virtual_machine"}, {"score": 0.004232702713825967, "phrase": "distributed_one"}, {"score": 0.0041374874583908535, "phrase": "multiple_jvms"}, {"score": 0.0040290957541568775, "phrase": "distribution_concerns"}, {"score": 0.003983512316698646, "phrase": "core_functionality"}, {"score": 0.0038644521996539466, "phrase": "semiautomatic_transformation_process"}, {"score": 0.00373474182086791, "phrase": "program_elements"}, {"score": 0.0036924762294207633, "phrase": "class_granularity"}, {"score": 0.0036093693971289754, "phrase": "network_locations"}, {"score": 0.0035415392642831616, "phrase": "user's_input"}, {"score": 0.0034226302212225206, "phrase": "compiler-level_techniques"}, {"score": 0.0033455819122283183, "phrase": "jvm"}, {"score": 0.0032826873794020253, "phrase": "jre"}, {"score": 0.0031966173935538992, "phrase": "bytecode_engineering_and_code_generation"}, {"score": 0.0031246358910995316, "phrase": "method_calls"}, {"score": 0.0031010029460927864, "phrase": "remote_method_calls"}, {"score": 0.0030311679447397725, "phrase": "proxy_references"}, {"score": 0.0029518360373990246, "phrase": "java"}, {"score": 0.0026945722090537397, "phrase": "efficient_distributed_execution"}, {"score": 0.002643888053328987, "phrase": "main_technical_issues"}, {"score": 0.002564763827975352, "phrase": "program_transformation"}, {"score": 0.0025165151708122957, "phrase": "unmodifiable_code"}, {"score": 0.0024691719264774165, "phrase": "jre_classes"}, {"score": 0.002279841453843241, "phrase": "case_study"}, {"score": 0.0021948455916770233, "phrase": "client_server_environment"}, {"score": 0.0021617392821644005, "phrase": "architectural_characteristics"}, {"score": 0.0021453734588569823, "phrase": "centralized_programs"}, {"score": 0.0021049977753042253, "phrase": "automated_distribution"}], "paper_keywords": ["Experimentation", " Languages", " Separation of concerns", " distributed computing", " Java", " middleware", " RMI", " bytecode engineering"], "paper_abstract": "J-Orchestra is a system that enhances centralized Java programs with distribution capabilities. Operating at the bytecode level, J-Orchestra transforms a centralized Java program (i.e., running on a single Java Virtual Machine (JVM)) into a distributed one (i.e., running across multiple JVMs). This transformation effectively separates distribution concerns from the core functionality of a program. J-Orchestra follows a semiautomatic transformation process. Through a GUI, the user selects program elements (at class granularity) and assigns them to network locations. Based on the user's input, the J-Orchestra backend automatically partitions the program through compiler-level techniques, without changes to the JVM or to the Java Runtime Environment (JRE) classes. By means of bytecode engineering and code generation, J-Orchestra substitutes method calls with remote method calls, direct object references with proxy references, etc. It also translates Java language features (e.g., static methods and fields, inheritance, inner classes, new object construction, etc.) for efficient distributed execution. We detail the main technical issues that J-Orchestra addresses, including its mechanism for program transformation in the presence of unmodifiable code (e.g., in JRE classes) and the translation of concurrency and synchronization constructs to work correctly over the network. We further discuss a case study of transforming a large, commercial, third-party application for efficient execution in a client server environment and outline the architectural characteristics of centralized programs that are amenable to automated distribution with J-Orchestra.", "paper_title": "J-Orchestra: Enhancing Java Programs with Distribution Capabilities", "paper_id": "WOS:000269266700001"}