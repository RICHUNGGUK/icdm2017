{"auto_keywords": [{"score": 0.04160367592541749, "phrase": "data_refinement"}, {"score": 0.010612387000973441, "phrase": "true_concurrency"}, {"score": 0.010489463055902419, "phrase": "discrete_and_real-time_systems"}, {"score": 0.004621447740470602, "phrase": "modern_systems"}, {"score": 0.004567596860086148, "phrase": "sophisticated_concurrent_behaviour"}, {"score": 0.004307569753106432, "phrase": "fine-grained_atomicity"}, {"score": 0.0041586840496756474, "phrase": "truly_concurrent_behaviour"}, {"score": 0.00408617426304956, "phrase": "multiple_events"}, {"score": 0.0038989120088094185, "phrase": "correctness_criterion"}, {"score": 0.003742084495435749, "phrase": "concrete_implementation"}, {"score": 0.0036553070575015344, "phrase": "interleaved_models"}, {"score": 0.003175175896313016, "phrase": "component's_evolution"}, {"score": 0.002600661525224505, "phrase": "sound_interval-based_forward_simulation_rule"}, {"score": 0.0025254115243261875, "phrase": "data_refinement_proofs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Refinement", " Interval-based reasoning", " True concurrency", " Discrete time systems", " Real-time systems"], "paper_abstract": "The majority of modern systems exhibit sophisticated concurrent behaviour, where several system components observe and modify the state with fine-grained atomicity. Many systems also exhibit truly concurrent behaviour, where multiple events may occur simultaneously. Data refinement, a correctness criterion to compare an abstract and a concrete implementation, normally admits interleaved models of execution only. In this paper, we present a method of data refinement using a framework that allows one to view a component's evolution over an interval of time, simplifying reasoning about true concurrency. By modifying the type of an interval, our theory may be specialised to cover data refinement of both discrete and real-time systems. We develop a sound interval-based forward simulation rule that enables decomposition of data refinement proofs, and apply this rule to verify data refinement for two examples: a simple concurrent program and a more in-depth real-time controller. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Interval-based data refinement: A uniform approach to true concurrency in discrete and real-time systems", "paper_id": "WOS:000368556700002"}