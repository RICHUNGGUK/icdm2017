{"auto_keywords": [{"score": 0.03696951645531608, "phrase": "psl"}, {"score": 0.00481495049065317, "phrase": "optimized_temporal_monitors"}, {"score": 0.00475070135279933, "phrase": "systemc._systemc"}, {"score": 0.004655924035639928, "phrase": "modeling_language"}, {"score": 0.0043533862892678864, "phrase": "increasing_complexity"}, {"score": 0.004209539728590977, "phrase": "research_efforts"}, {"score": 0.004043158538239064, "phrase": "systemc_models"}, {"score": 0.00398916666053909, "phrase": "assertion-based_verification"}, {"score": 0.0036553070575015344, "phrase": "design_intent"}, {"score": 0.0035823043879169153, "phrase": "formal_language"}, {"score": 0.0034638476252104706, "phrase": "sva."}, {"score": 0.0031738126998349775, "phrase": "formal_verification_techniques"}, {"score": 0.00300749708357049, "phrase": "automated_generation"}, {"score": 0.0029672941061574375, "phrase": "runtime_monitors"}, {"score": 0.002927626967420519, "phrase": "temporal_properties"}, {"score": 0.002524688179363081, "phrase": "monitor_generation"}, {"score": 0.0024909230668523825, "phrase": "state_minimization"}, {"score": 0.0024576084154573396, "phrase": "alphabet_representation"}, {"score": 0.0024247382451294255, "phrase": "alphabet_minimization"}, {"score": 0.0023762535034673017, "phrase": "monitor_encoding"}, {"score": 0.0023131084326717755, "phrase": "extensive_experimentation"}, {"score": 0.0021624739899833868, "phrase": "best_performance"}, {"score": 0.0021049977753042253, "phrase": "runtime_overhead"}], "paper_keywords": ["SystemC", " Assertion checkers", " Monitors", " Testing"], "paper_abstract": "SystemC is a modeling language built as an extension of C++. Its growing popularity and the increasing complexity of designs have motivated research efforts aimed at the verification of SystemC models using assertion-based verification (ABV), where the designer asserts properties that capture the design intent in a formal language such as PSL or SVA. The model then can be verified against the properties using runtime or formal verification techniques. In this paper we focus on automated generation of runtime monitors from temporal properties. Our focus is on minimizing runtime overhead, rather than monitor size or monitor-generation time. We identify four issues in monitor generation: state minimization, alphabet representation, alphabet minimization, and monitor encoding. We conduct extensive experimentation and identify a combination of settings that offers the best performance in terms of runtime overhead.", "paper_title": "Optimized temporal monitors for SystemC", "paper_id": "WOS:000312325300002"}