{"auto_keywords": [{"score": 0.024701264010756754, "phrase": "turkey"}, {"score": 0.00481495049065317, "phrase": "candidate_software_classes"}, {"score": 0.0045879792359519375, "phrase": "software_product"}, {"score": 0.004539005582217309, "phrase": "development_costs"}, {"score": 0.004187917910692495, "phrase": "error_correction"}, {"score": 0.00409895142748329, "phrase": "mainly_enhancements"}, {"score": 0.003990385737207714, "phrase": "m._m."}, {"score": 0.0038226070564362697, "phrase": "program_evolution"}, {"score": 0.003741371936431574, "phrase": "software_change"}, {"score": 0.003701401653850141, "phrase": "academic_press_professional"}, {"score": 0.003167441161387607, "phrase": "software_complexity"}, {"score": 0.003100085797251317, "phrase": "internal_software_quality"}, {"score": 0.0027991418754844347, "phrase": "code_complexity"}, {"score": 0.002724909017963099, "phrase": "machine_learning_based_model"}, {"score": 0.0025822818714499795, "phrase": "weighted_naive_bayes"}, {"score": 0.0024209250169088575, "phrase": "metric_data"}, {"score": 0.0023440589015485077, "phrase": "largest_gsm_operator"}, {"score": 0.0021049977753042253, "phrase": "manual_inspection_effort"}], "paper_keywords": ["Refactoring", " Software metrics", " Naive Bayes", " Refactor prediction"], "paper_abstract": "in the lifetime of a software product, development costs are only the tip of the iceberg. Nearly 90% of the cost is maintenance due to error correction, adaptation and mainly enhancements. As Lehman and Belady [Lehman, M. M., & Belady, L. A. (1985). Program evolution: Processes of software change. Academic Press Professional.] state that software will become increasingly unstructured as it is changed. One way to overcome this problem is refactoring. Refactoring is an approach which reduces the software complexity by incrementally improving internal software quality. Our motivation in this research is to detect the classes that need to be rafactored by analyzing the code complexity. We propose a machine learning based model to predict classes to be refactored. We use Weighted Naive Bayes with InfoGain heuristic as the learner and we conducted experiments with metric data that we collected from the largest GSM operator in Turkey. Our results showed that we can predict 82% of the classes that need refactoring with 13% of manual inspection effort on the average. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "An expert system for determining candidate software classes for refactoring", "paper_id": "WOS:000266086600049"}