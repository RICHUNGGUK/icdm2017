{"auto_keywords": [{"score": 0.04973919369807266, "phrase": "primary-backup_approach"}, {"score": 0.03874834581291972, "phrase": "dependent_tasks"}, {"score": 0.013365936081592854, "phrase": "backup_copy"}, {"score": 0.008466201177747271, "phrase": "minimum_completion_time"}, {"score": 0.00481495049065317, "phrase": "fault-tolerant_scheduling_strategies"}, {"score": 0.004696407360309416, "phrase": "low_replication_costs"}, {"score": 0.004663074596384574, "phrase": "fault-tolerant_scheduling"}, {"score": 0.004613516457919661, "phrase": "imperative_step"}, {"score": 0.004580769304731227, "phrase": "large-scale_computational_grid_systems"}, {"score": 0.004265760046406154, "phrase": "common_methodology"}, {"score": 0.004220406575749275, "phrase": "fault_tolerance"}, {"score": 0.004131135118662576, "phrase": "primary_copy"}, {"score": 0.004015025120733852, "phrase": "independent_tasks"}, {"score": 0.003752126270661821, "phrase": "different_processors"}, {"score": 0.003544088803300751, "phrase": "backup_copies"}, {"score": 0.003018595266561849, "phrase": "crucial_role"}, {"score": 0.002480680078868508, "phrase": "schedule_backups"}, {"score": 0.0024630345285372958, "phrase": "independent_jobs"}, {"score": 0.002445514186654732, "phrase": "dependent_jobs"}, {"score": 0.0024108455980729284, "phrase": "algorithm_mrc-ect"}, {"score": 0.002359759876402679, "phrase": "optimal_backup_schedule"}, {"score": 0.002326304140277375, "phrase": "replication_cost"}, {"score": 0.0023015232625177755, "phrase": "independent_task"}, {"score": 0.0022770057597574734, "phrase": "mct-lrc"}, {"score": 0.002220806891955454, "phrase": "dependent_task"}, {"score": 0.0021582723621960693, "phrase": "extensive_simulation_experiments"}, {"score": 0.0021049977753042253, "phrase": "proposed_algorithms"}], "paper_keywords": ["Grid computing", " directed acyclic graphs", " independent tasks", " primary-backup", " fault-tolerance"], "paper_abstract": "Fault-tolerant scheduling is an imperative step for large-scale computational Grid systems, as often geographically distributed nodes cooperate to execute a task. By and large, primary-backup approach is a common methodology used for fault tolerance wherein each task has a primary copy and a backup copy on two different processors. For independent tasks, the backup copy can overload with other backup copies on the same processor, as long as their corresponding primary copies are scheduled on different processors. However, for dependent tasks, precedence constraint among tasks must be considered when scheduling backup copies and overloading backups. In this paper, we first identify two cases that may happen when scheduling dependent tasks with primary-backup approach. For one of the cases, we derive two important constraints that must be satisfied. Further, we show that these two constraints play a crucial role in limiting the schedulability and overloading efficiency of backups of dependent tasks. We then propose two strategies to improve schedulability and overloading efficiency, respectively. We propose two algorithms, called the Minimum Replication Cost with Early Completion Time (MRC-ECT) algorithm and the Minimum Completion Time with Less Replication Cost (MCT-LRC) algorithm, to schedule backups of independent jobs and dependent jobs, respectively. Algorithm MRC-ECT is shown to guarantee an optimal backup schedule in terms of replication cost for an independent task, while MCT-LRC can schedule a backup of a dependent task with minimum completion time and less replication cost. We conduct extensive simulation experiments to quantify the performance of the proposed algorithms and strategies.", "paper_title": "On the Design of Fault-Tolerant Scheduling Strategies Using Primary-Backup Approach for Computational Grids with Low Replication Costs", "paper_id": "WOS:000262561900008"}