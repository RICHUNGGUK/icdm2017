{"auto_keywords": [{"score": 0.0277504128817395, "phrase": "asymmetry-aware_hypervisor"}, {"score": 0.00481495049065317, "phrase": "asymmetric_multicore_processors"}, {"score": 0.004786269889554942, "phrase": "amp"}, {"score": 0.004659001320463439, "phrase": "isa"}, {"score": 0.004535124351828787, "phrase": "power_consumption"}, {"score": 0.004375061788023814, "phrase": "conventional_symmetric_multicore_processors"}, {"score": 0.004271490815763164, "phrase": "future_multicore_systems"}, {"score": 0.004208002469225673, "phrase": "different_types"}, {"score": 0.004133055661437163, "phrase": "core_specialization"}, {"score": 0.004108369978176129, "phrase": "instruction_streams"}, {"score": 0.003939633463129123, "phrase": "architectural_resources"}, {"score": 0.003916098498242888, "phrase": "system_efficiency"}, {"score": 0.0038119123317396954, "phrase": "effective_matching"}, {"score": 0.003732791585248997, "phrase": "thread_scheduler"}, {"score": 0.003633464433320317, "phrase": "asymmetry-aware_schedulers"}, {"score": 0.0035687137873965684, "phrase": "well_studied_topic"}, {"score": 0.003371159698962328, "phrase": "proper_functioning"}, {"score": 0.0033510093127915768, "phrase": "asymmetry-aware_guest_operating_systems"}, {"score": 0.0032716011062067286, "phrase": "virtual_environments"}, {"score": 0.0031845067058084583, "phrase": "asymmetric_cores"}, {"score": 0.0031465436619697385, "phrase": "multiple_guests"}, {"score": 0.003118367740261359, "phrase": "fair_fashion"}, {"score": 0.0030171910207671205, "phrase": "first_time"}, {"score": 0.0029991500396912923, "phrase": "simple_changes"}, {"score": 0.0029722900280316216, "phrase": "hypervisor_scheduler"}, {"score": 0.002816092821027267, "phrase": "asymmetry-aware_mechanisms"}, {"score": 0.00274932545791351, "phrase": "open_source"}, {"score": 0.002708399936381754, "phrase": "real_multicore_system"}, {"score": 0.0026600905156986317, "phrase": "cpu_frequency"}, {"score": 0.00255068452076921, "phrase": "asymmetry_support"}, {"score": 0.0025127084501976745, "phrase": "low_overheads"}, {"score": 0.0024901940672239784, "phrase": "resulting_performance_improvements"}, {"score": 0.0023311233166534214, "phrase": "fast_cores"}, {"score": 0.0022895278869126848, "phrase": "slow_cores"}, {"score": 0.0022352169832099153, "phrase": "virtual_cores"}, {"score": 0.0022218413146898887, "phrase": "physical_cores"}, {"score": 0.0022085455097790537, "phrase": "asymmetry-aware_guests"}, {"score": 0.0021821915946356168, "phrase": "guest's_expectations"}, {"score": 0.0021561514733516676, "phrase": "asymmetry_awareness"}, {"score": 0.002143247921132179, "phrase": "fairer_sharing"}, {"score": 0.0021304214257321, "phrase": "computing_resources"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Management", " Measurement", " multicore processors", " asymmetric", " heterogeneous", " scheduling algorithms", " hypervisor", " virtual machine monitor"], "paper_abstract": "Asymmetric multicore processors (AMP) consist of cores exposing the same instruction-set architecture (ISA) but varying in size, frequency, power consumption and performance. AMPs were shown to be more power efficient than conventional symmetric multicore processors, and it is therefore likely that future multicore systems will include cores of different types. AMPs derive their efficiency from core specialization: instruction streams can be assigned to run on the cores best suited to their demands for architectural resources. System efficiency is improved as a result. To perform effective matching of threads to cores, the thread scheduler must be asymmetry-aware; and while asymmetry-aware schedulers for operating systems are a well studied topic, asymmetry-awareness in hypervisors has not been addressed. A hypervisor must be asymmetry-aware to enable proper functioning of asymmetry-aware guest operating systems; otherwise they will be ineffective in virtual environments. Furthermore, a hypervisor must ensure that asymmetric cores are shared among multiple guests in a fair fashion or in accordance with their priorities. This work for the first time implements simple changes to the hypervisor scheduler, required to make it asymmetry-aware, and evaluates the benefits and overheads of these asymmetry-aware mechanisms. Our evaluation was performed using an open source hypervisor Xen on a real multicore system where asymmetry was emulated via CPU frequency scaling. We compared the asymmetry-aware hypervisor to default Xen. Our results indicate that asymmetry support can be implemented with low overheads, and resulting performance improvements can be significant, reaching up to 36% in our experiments. Most performance improvements are derived from the fact that an asymmetry-aware hypervisor ensures that the fast cores do not go idle before slow cores and from the fact that it maps virtual cores to physical cores for asymmetry-aware guests according to the guest's expectations. Other benefits from asymmetry awareness are fairer sharing of computing resources among VMs and more stable execution times.", "paper_title": "AASH: An Asymmetry-Aware Scheduler for Hypervisors", "paper_id": "WOS:000280548400008"}