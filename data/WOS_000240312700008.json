{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "common_motifs"}, {"score": 0.010412738369111288, "phrase": "finite_automata"}, {"score": 0.005937721557798119, "phrase": "finite_automaton"}, {"score": 0.004252602474733162, "phrase": "finite_set"}, {"score": 0.0035462807506718578, "phrase": "factor_automaton"}, {"score": 0.0033969001271637964, "phrase": "common_factors"}, {"score": 0.002942811795757911, "phrase": "above-mentioned_automata"}, {"score": 0.002791932344920906, "phrase": "new_factor_alphabet"}, {"score": 0.002537097217899195, "phrase": "non_overlapping_factors"}, {"score": 0.0024185182010749273, "phrase": "latter_automata"}, {"score": 0.0022944576894161485, "phrase": "factor_alphabet"}, {"score": 0.0021049977753042253, "phrase": "common_subsequences"}], "paper_keywords": [""], "paper_abstract": "We present an algorithm that uses finite automata to find the common motifs with gaps occurring in all strings belonging to a finite set S = {S-1, S-2,..., S-r}. In order to find these common motifs we must first identify the factors that exist in each string. Therefore the algorithm begins by constructing a factor automaton for each string Si. To find the common factors of all the strings, the algorithm needs to gather all the factors from the strings together in one data structure and this is achieved by computing an automaton that accepts the union of the above-mentioned automata. Using this automaton we are able to create a new factor alphabet. Based on this factor alphabet a finite automaton is created for each string Si that accepts sequences of all non overlapping factors residing in each string. The intersection of the latter automata produces the finite automaton which accepts all the common subsequences with gaps over the factor alphabet that are present in all the strings of the set S = {S-1, S-2,..., S-r}. These common subsequences are the common motifs of the strings.", "paper_title": "Finding common motifs with gaps using finite automata", "paper_id": "WOS:000240312700008"}