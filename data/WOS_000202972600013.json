{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "edge_architectures"}, {"score": 0.004757643419056999, "phrase": "growing_on-chip_wire_delays"}, {"score": 0.004508048086020253, "phrase": "chip_communication"}, {"score": 0.004271490815763164, "phrase": "communication-exposed_microarchitectures"}, {"score": 0.0041703614123283165, "phrase": "compiler_forms"}, {"score": 0.003951453722517865, "phrase": "distributed_execution_substrate"}, {"score": 0.0038119123317396954, "phrase": "compiler_scheduling_algorithm"}, {"score": 0.003633464433320317, "phrase": "previously_fixed_locations"}, {"score": 0.003321008590273796, "phrase": "different_spatial_topologies"}, {"score": 0.0032229262928681304, "phrase": "basic_algorithm"}, {"score": 0.0028586409810976367, "phrase": "global_critical_path_estimates"}, {"score": 0.002644179117033107, "phrase": "simulated_annealing"}, {"score": 0.002597012212823168, "phrase": "possible_performance_improvements"}, {"score": 0.0025202582748972122, "phrase": "augmented_heuristics"}, {"score": 0.00240213106042981, "phrase": "spatial_path_scheduling_algorithm"}, {"score": 0.002262209824105154, "phrase": "best_prior_algorithm"}, {"score": 0.0021304214257321, "phrase": "annealed_performance"}], "paper_keywords": ["algorithm", " performance", " instruction scheduling", " simulated annealing", " EDGE architecture"], "paper_abstract": "Growing on-chip wire delays are motivating architectural features that expose on-chip communication to the compiler. EDGE architectures are one example of communication-exposed microarchitectures in which the compiler forms dataflow graphs that specify how the microarchitecture maps instructions onto a distributed execution substrate. This paper describes a compiler scheduling algorithm called spatial path scheduling that factors in previously fixed locations - called anchor points - for each placement. This algorithm extends easily to different spatial topologies. We augment this basic algorithm with three heuristics: (1) local and global ALU and network link contention modeling, (2) global critical path estimates, and (3) dependence chain path reservation. We use simulated annealing to explore possible performance improvements and to motivate the augmented heuristics and their weighting functions. We show that the spatial path scheduling algorithm augmented with these three heuristics achieves a 21% average performance improvement over the best prior algorithm and comes within an average of 5% of the annealed performance for our benchmarks.", "paper_title": "A spatial path scheduling algorithm for EDGE architectures", "paper_id": "WOS:000202972600013"}