{"auto_keywords": [{"score": 0.0367698002611785, "phrase": "security_mechanisms"}, {"score": 0.03394009994668228, "phrase": "security_introduction"}, {"score": 0.00481495049065317, "phrase": "skeletal_systems"}, {"score": 0.0047709540557306284, "phrase": "limited_performance_penalty"}, {"score": 0.0047057084749407485, "phrase": "muskel_experience"}, {"score": 0.004662705558154439, "phrase": "algorithmic_skeletons"}, {"score": 0.004473982381245469, "phrase": "workstation_clusters"}, {"score": 0.004392565073466714, "phrase": "workstation_networks"}, {"score": 0.004352411290383643, "phrase": "computational_grids"}, {"score": 0.004273196830970426, "phrase": "non-dedicated_clusters"}, {"score": 0.0038624981944755813, "phrase": "data_confidentiality"}, {"score": 0.0036721416244816455, "phrase": "expensive_activity"}, {"score": 0.003349670229755675, "phrase": "security_related_activities"}, {"score": 0.0033190180867511605, "phrase": "run_time"}, {"score": 0.0031121406603482112, "phrase": "skeleton_technology"}, {"score": 0.0030135741897058844, "phrase": "efficiency_code"}, {"score": 0.002931569771634119, "phrase": "typical_skeleton"}, {"score": 0.0029181203386806683, "phrase": "based_parallel_programming_environment"}, {"score": 0.002851790448644913, "phrase": "performance_cost"}, {"score": 0.002748775748298028, "phrase": "art_tools"}, {"score": 0.0025420267431501367, "phrase": "java_based_skeletal_system"}, {"score": 0.0021739117830106365, "phrase": "computational_grains"}, {"score": 0.0021342613107011624, "phrase": "secure_and_insecure_skeletal_computations"}], "paper_keywords": ["skeletons", " parallelism", " security", " scalability"], "paper_abstract": "Algorithmic skeletons have been exploited to implement several parallel programming environments, targeting workstation clusters as well as workstation networks and computational grids. When targeting non-dedicated clusters, workstation networks and grids, security has to be taken adequately into account in order to guarantee both code and data confidentiality and integrity. However, introducing security is usually an expensive activity, both in terms of the effort required to managed security mechanisms and in terms of the time spent performing security related activities at run time. We discuss the cost of security introduction as well as how some features typical of skeleton technology can be exploited to improve the efficiency code and data securing in a typical skeleton based parallel programming environment and we evaluate the performance cost of security mechanisms implemented exploiting state of the art tools. In particular, we take into account the cost of security introduction in muskel, a Java based skeletal system exploiting macro data now implementation technology. We consider the adoption of mechanisms that allow securing all the Communications involving remote, unreliable nodes and we evaluate the cost of such mechanisms. Also, we consider the implications on the computational grains needed to scale secure and insecure skeletal computations. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Securing skeletal systems with limited performance penalty: The muskel experience", "paper_id": "WOS:000259128800005"}