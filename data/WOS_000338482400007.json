{"auto_keywords": [{"score": 0.03755139933968753, "phrase": "dynamically_typed_code"}, {"score": 0.011241758900861066, "phrase": "statically_typed_code"}, {"score": 0.009276077289050506, "phrase": "type_information"}, {"score": 0.00481495049065317, "phrase": "ide_features"}, {"score": 0.004677372885331908, "phrase": "typed_languages"}, {"score": 0.004543708337879809, "phrase": "dynamically_typed_programming_languages"}, {"score": 0.004392565073466714, "phrase": "specific_scenarios"}, {"score": 0.004350308086118336, "phrase": "dynamic_adaptability"}, {"score": 0.004287680323820891, "phrase": "important_issue"}, {"score": 0.004165105357908494, "phrase": "existing_statically_typed_languages"}, {"score": 0.0038924989779389424, "phrase": "programming_languages"}, {"score": 0.0036201167891046046, "phrase": "static_type_inference"}, {"score": 0.0034995881411519925, "phrase": "common_features"}, {"score": 0.0032546105164772995, "phrase": "corresponding_ides"}, {"score": 0.0030121159909273897, "phrase": "static_typing"}, {"score": 0.002883718207958817, "phrase": "hybrid_language"}, {"score": 0.002579847272930948, "phrase": "appealing_services"}, {"score": 0.002542642270762272, "phrase": "existing_approaches"}, {"score": 0.0024578987081792405, "phrase": "compile-time_type_error_detection"}, {"score": 0.002263639474937039, "phrase": "significant_runtime_performance_optimizations"}, {"score": 0.0021987994275190314, "phrase": "programmer's_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "similar_approaches"}], "paper_keywords": ["Hybrid dynamic and static typing", " IDE support", " Type inference", " Code completion", " Separation of concerns", " Plug-in", " Visual Studio"], "paper_abstract": "The flexibility offered by dynamically typed programming languages has been appropriately used to develop specific scenarios where dynamic adaptability is an important issue. This has made some existing statically typed languages gradually incorporate more dynamic features to their implementations. As a result, there are some programming languages considered hybrid dynamically and statically typed. However, these languages do not perform static type inference on a dynamically typed code, lacking those common features provided when a statically typed code is used. This lack is also present in the corresponding IDEs that, when a dynamically typed code is used, do not provide the services offered for static typing. We have customized an IDE for a hybrid language that statically infers type information of dynamically typed code. By using this type information, we show how the IDE can provide a set of appealing services that the existing approaches do not support, such as compile-time type error detection, code completion, transition from dynamically to statically typed code (and vice versa), and significant runtime performance optimizations. We have evaluated the programmer's performance improvement obtained with our IDE, and compared it with similar approaches. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Static type information to improve the IDE features of hybrid dynamically and statically typed languages", "paper_id": "WOS:000338482400007"}