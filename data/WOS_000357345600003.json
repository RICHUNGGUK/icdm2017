{"auto_keywords": [{"score": 0.030242772158219407, "phrase": "image_updating"}, {"score": 0.00481495049065317, "phrase": "mri_reconstruction"}, {"score": 0.004772137871562584, "phrase": "three-dimensional_dual-dictionary_learning"}, {"score": 0.004729728001998159, "phrase": "cuda."}, {"score": 0.004687645903373103, "phrase": "undersampled_k-space_data"}, {"score": 0.00458412183693466, "phrase": "effective_way"}, {"score": 0.004523103062368843, "phrase": "data_acquisition"}, {"score": 0.004482873744893272, "phrase": "magnetic_resonance_imaging"}, {"score": 0.004306205029641728, "phrase": "compressed_sensing"}, {"score": 0.0040996651541091575, "phrase": "undersampled_data_reconstruction"}, {"score": 0.004027031316965272, "phrase": "dictionary_learning_method"}, {"score": 0.003973398317120165, "phrase": "good_results"}, {"score": 0.003920476803132283, "phrase": "reconstruction_quality"}, {"score": 0.0038510053729959074, "phrase": "cs_reconstruction_algorithms"}, {"score": 0.003732368382223596, "phrase": "dictionary_training"}, {"score": 0.0036991458715587163, "phrase": "sparse_coding_step"}, {"score": 0.0036498637283470386, "phrase": "computation_overhead"}, {"score": 0.003569176320452192, "phrase": "three-dimensional_reconstruction"}, {"score": 0.003505908076430666, "phrase": "large_number"}, {"score": 0.0034437574674180365, "phrase": "data_size"}, {"score": 0.003220315882881027, "phrase": "three-dimensional_dual-dictionary_learning_scheme"}, {"score": 0.0031350397225314262, "phrase": "three-dimensional_dictionaries"}, {"score": 0.0030932495918679285, "phrase": "dictionary_atoms"}, {"score": 0.0030656984915295275, "phrase": "image_blocks"}, {"score": 0.0030248298759040695, "phrase": "spatial_correlation"}, {"score": 0.0029978863469038914, "phrase": "mr_slices"}, {"score": 0.002971182100871581, "phrase": "dual-dictionary_learning_method"}, {"score": 0.0029447150254434842, "phrase": "low-resolution_dictionary"}, {"score": 0.002918483026678636, "phrase": "high-resolution_dictionary"}, {"score": 0.0028032928749970026, "phrase": "compute_unified_device_architecture"}, {"score": 0.00269263690712392, "phrase": "parallel_algorithms"}, {"score": 0.0026686444508167875, "phrase": "graphics_processing_unit"}, {"score": 0.002645066738693661, "phrase": "gpu"}, {"score": 0.002574788013427524, "phrase": "dictionary_learning_algorithm"}, {"score": 0.0024953686545818587, "phrase": "parallel_cpu_codes"}, {"score": 0.002354302193867031, "phrase": "cuda_codes"}, {"score": 0.0023333173799963795, "phrase": "algorithmic_optimization"}, {"score": 0.0023125191783901367, "phrase": "experimental_results"}, {"score": 0.0022013916728990564, "phrase": "cpu-only_codes"}, {"score": 0.0021049977753042253, "phrase": "openmp_codes"}], "paper_keywords": ["Dual-dictionary learning", " Compressed sensing", " Three-dimensional MRI reconstruction", " CUDA", " GPU"], "paper_abstract": "Using undersampled k-space data for reconstruction is an effective way to accelerate data acquisition of magnetic resonance imaging (MRI). With the development of compressed sensing (CS) theory, many solutions have been proposed for undersampled data reconstruction. Moreover, dictionary learning method has shown good results in improving reconstruction quality. However, CS reconstruction algorithms are time consuming, especially at dictionary training and sparse coding step. The computation overhead is even higher for three-dimensional reconstruction. With a large number of slices, data size can be massive and more time consuming. In this paper, we use three-dimensional dual-dictionary learning scheme for the reconstruction procedure. Three-dimensional dictionaries train the dictionary atoms in image blocks and utilize spatial correlation among MR slices. Dual-dictionary learning method cooperates low-resolution dictionary and high-resolution dictionary for sparse coding and image updating, respectively. Compute unified device architecture (CUDA) is utilized to design the parallel algorithms on graphics processing unit (GPU). We mainly optimize dictionary learning algorithm and image updating. We also develop parallel CPU codes using OpenMP (Open Multi-Processing) and another version of CUDA codes with algorithmic optimization. Experimental results show that more than 324 times of speedup is achieved compared with CPU-only codes with 24 MRI slices and more than 40 times of acceleration compared with OpenMP codes.", "paper_title": "Accelerating MRI reconstruction via three-dimensional dual-dictionary learning using CUDA", "paper_id": "WOS:000357345600003"}