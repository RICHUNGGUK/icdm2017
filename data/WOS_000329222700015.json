{"auto_keywords": [{"score": 0.0432428177101078, "phrase": "lds"}, {"score": 0.00481495049065317, "phrase": "lds_and_applications"}, {"score": 0.004583579470330216, "phrase": "layout_description_script"}, {"score": 0.004387225575447685, "phrase": "domain_specific_language"}, {"score": 0.004292212137716459, "phrase": "layout_templates"}, {"score": 0.004176321608449849, "phrase": "layout-aware_circuit_synthesis"}, {"score": 0.003953806321226277, "phrase": "manual_coding"}, {"score": 0.003910740988145338, "phrase": "automatic_code_generation"}, {"score": 0.003784328428527216, "phrase": "previous_approaches"}, {"score": 0.0037226570791514184, "phrase": "layout_description"}, {"score": 0.003682100144121148, "phrase": "code_samples"}, {"score": 0.003466780226380516, "phrase": "similar_constraints"}, {"score": 0.0033363396054797044, "phrase": "lds_compiler"}, {"score": 0.00319324425647735, "phrase": "complex_constraints"}, {"score": 0.0030562674358159945, "phrase": "constraint_programming"}, {"score": 0.0029412271277166873, "phrase": "topological_representations"}, {"score": 0.002650279521276126, "phrase": "lds_template"}, {"score": 0.0025786066704445304, "phrase": "capture_tool"}, {"score": 0.0023749823753904204, "phrase": "expert-drawn_layout"}, {"score": 0.0023107372754933887, "phrase": "data_structure"}, {"score": 0.002260591903283384, "phrase": "guided_user_interface"}, {"score": 0.0021049977753042253, "phrase": "electronic_design_automation"}], "paper_keywords": ["Layout-aware circuit synthesis", " Layout description script", " Layout template", " Constraints in analog layout", " Hybrid template language"], "paper_abstract": "This paper presents the layout description script (LDS), which is a domain specific language intended to code layout templates to be used for layout-aware circuit synthesis. LDS supports both sequential and constraint programming and is suitable for both manual coding and automatic code generation. LDS is compared with previous approaches related to layout description. Code samples are given for alignment, abutment, symmetry, and similar constraints. Also, implementation of the LDS compiler is discussed and a methodology for handling complex constraints is presented. Due to its support for constraint programming, it is possible to constrain topological representations and even combine them. It is also possible to combine and constrain placement and routing in an LDS template. Finally, a capture tool has been implemented. This tool is designed to extract a template from an expert-drawn layout. Capture converts a data structure extracted through a guided user interface into a template. This tool highlights the compatibility of LDS with electronic design automation.", "paper_title": "Template coding with LDS and applications of LDS in EDA", "paper_id": "WOS:000329222700015"}