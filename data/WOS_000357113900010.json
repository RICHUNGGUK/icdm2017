{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "partial_covers"}, {"score": 0.003485304124598714, "phrase": "exact_concatenations"}, {"score": 0.0032571885279065126, "phrase": "new_notion"}, {"score": 0.0032085525502105836, "phrase": "-partial_cover"}, {"score": 0.003021141590548526, "phrase": "relaxed_variant"}, {"score": 0.002678433668156676, "phrase": "data_structure"}, {"score": 0.0023390219342052623, "phrase": "shortest_-partial_covers"}, {"score": 0.0021530945641993152, "phrase": "-time_algorithm"}, {"score": 0.0021049977753042253, "phrase": "shortest_-partial_cover"}], "paper_keywords": ["Cover of a word", " Quasiperiodicity", " Suffix tree"], "paper_abstract": "A factor of a word is a cover of if every position in lies within some occurrence of in . A word covered by thus generalizes the idea of a repetition, that is, a word composed of exact concatenations of . In this article we introduce a new notion of -partial cover, which can be viewed as a relaxed variant of cover, that is, a factor covering at least positions in . We develop a data structure of size (where ) that can be constructed in time which we apply to compute all shortest -partial covers for a given . We also employ it for an -time algorithm computing a shortest -partial cover for each alpha = 1,2,...,n.", "paper_title": "Fast Algorithm for Partial Covers in Words", "paper_id": "WOS:000357113900010"}