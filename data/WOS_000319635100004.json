{"auto_keywords": [{"score": 0.048199190574404506, "phrase": "materialized_views"}, {"score": 0.00481495049065317, "phrase": "optimizing_xml_queries"}, {"score": 0.004238929161010395, "phrase": "traditional_xml_query_evaluation_models"}, {"score": 0.004102248600058478, "phrase": "xml_query_optimization_problem"}, {"score": 0.003969957613513855, "phrase": "inverted_lists_evaluation_model"}, {"score": 0.0037725685596495355, "phrase": "large_persistent_xml_data"}, {"score": 0.0036508702548731383, "phrase": "novel_approach"}, {"score": 0.00350742771604554, "phrase": "exactly_the_sublists"}, {"score": 0.0034692911858848893, "phrase": "inverted_lists"}, {"score": 0.0032371745435372168, "phrase": "view_materializations"}, {"score": 0.0031903162513050804, "phrase": "compressed_bitmaps"}, {"score": 0.0030986183831544487, "phrase": "materialization_space"}, {"score": 0.0030205408413942272, "phrase": "view_materialization_processing"}, {"score": 0.0029985954225814895, "phrase": "bitwise_operations"}, {"score": 0.00293370839211022, "phrase": "traditional_approach"}, {"score": 0.00289123004877327, "phrase": "compensating_expression"}, {"score": 0.002747328139245956, "phrase": "query_answer"}, {"score": 0.002717433692385074, "phrase": "holistic_stack-based_algorithms"}, {"score": 0.0026105697442146357, "phrase": "recent_outstanding_structural_summary_and_b-tree_based_approaches"}, {"score": 0.002453602802736223, "phrase": "structural_index_approach"}, {"score": 0.0024268966855267153, "phrase": "combinatorial_explosion_problems"}, {"score": 0.0023657047082774286, "phrase": "views_approach"}, {"score": 0.002272641094287882, "phrase": "significant_performance_savings"}, {"score": 0.0022234280592615756, "phrase": "negligible_optimization_time"}, {"score": 0.0021912115487610286, "phrase": "large_number"}, {"score": 0.0021515951441422082, "phrase": "view_pool"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["XML", " XPath query evaluation", " Optimization of tree-pattern queries using views", " Bitmap materialized views"], "paper_abstract": "Optimizing queries using materialized views has not been addressed adequately in the context of XML due to the many limitations associated with the definition and usability of materialized views in traditional XML query evaluation models. In this paper, we address the XML query optimization problem using materialized views in the framework of the inverted lists evaluation model which has been established as the most prominent one for evaluating queries on large persistent XML data. Under this framework, we propose a novel approach which instead of materializing the answer of a view materializes exactly the sublists of the inverted lists that are necessary for computing the answer of the view. A further originality of our approach is that the view materializations are stored as compressed bitmaps. This technique not only minimizes the materialization space but also reduces CPU and I/O costs by translating view materialization processing into bitwise operations. Our approach departs from the traditional approach which identifies a compensating expression that rewrites the query using the materialized views. Instead, it computes the query answer by executing holistic stack-based algorithms on the view materializations. We experimentally compared our approach with recent outstanding structural summary and B-tree based approaches. In order to make the comparison more competitive we also proposed an extension of a structural index approach to resolve combinatorial explosion problems. Our experimental results show that our compressed bitmapped materialized views approach is the most efficient, robust, and stable one for optimizing XML queries. It obtains significant performance savings at a very small space overhead and has negligible optimization time even for a large number of materialized views in the view pool. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Optimizing XML queries: Bitmapped materialized views vs. indexes", "paper_id": "WOS:000319635100004"}