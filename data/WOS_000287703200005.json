{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model_checking"}, {"score": 0.004360412703519539, "phrase": "new_approach"}, {"score": 0.004081385289516914, "phrase": "abstract_state"}, {"score": 0.0038838500580958744, "phrase": "maximum_weight_heuristic_method"}, {"score": 0.0036352070472201086, "phrase": "shortest_counter-example"}, {"score": 0.0034024277222012597, "phrase": "imperative_programs"}, {"score": 0.0029805015010906013, "phrase": "verification_system"}, {"score": 0.002789528662623221, "phrase": "counterexample-guided_abstraction_refinement_method"}, {"score": 0.00240328454980006, "phrase": "abstract_state_space"}, {"score": 0.0021049977753042253, "phrase": "decision_procedure"}], "paper_keywords": ["program", " model checking", " predicate abstraction", " weight heuristic"], "paper_abstract": "The paper presents a new approach to computing the abstract state and a maximum weight heuristic method for finding the shortest counter-example in verification of imperative programs. The strategy is incorporated in a verification system based on the counterexample-guided abstraction refinement method. The proposed method slashes both the size of the abstract state space and the number of invokes of a decision procedure. A number of benchmarks are employed to evaluate the effectiveness of the approach.", "paper_title": "Competent predicate abstraction in model checking", "paper_id": "WOS:000287703200005"}