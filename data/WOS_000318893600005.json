{"auto_keywords": [{"score": 0.047293169449964985, "phrase": "avf"}, {"score": 0.04517143205408082, "phrase": "interthread_resource_contention"}, {"score": 0.04096028921106744, "phrase": "program's_avf"}, {"score": 0.00481495049065317, "phrase": "architectural_vulnerability"}, {"score": 0.004757643419056999, "phrase": "multithreaded_processors"}, {"score": 0.004701015188740582, "phrase": "resource_contention"}, {"score": 0.004589763483242731, "phrase": "architectural_vulnerability_factor"}, {"score": 0.0044277810648955624, "phrase": "processor's_vulnerability"}, {"score": 0.004375061788023814, "phrase": "soft_errors"}, {"score": 0.004195418010131832, "phrase": "multithreaded_processor"}, {"score": 0.00414545383888272, "phrase": "e._g."}, {"score": 0.003975200317233532, "phrase": "nonuniform_impact"}, {"score": 0.0037216229812089686, "phrase": "different_programs"}, {"score": 0.0032814236411444022, "phrase": "scalable_two-level_predictive_mechanism"}, {"score": 0.0030904433394138963, "phrase": "easily_measured_metrics"}, {"score": 0.0029991500396912923, "phrase": "first-level_model"}, {"score": 0.002893140560765452, "phrase": "contention-free_environment"}, {"score": 0.0028586409810976367, "phrase": "important_performance_metrics"}, {"score": 0.0028076592725295646, "phrase": "processor_configuration"}, {"score": 0.002741091312632307, "phrase": "second-level_model"}, {"score": 0.002628362641980801, "phrase": "processor_structures'_occupancies"}, {"score": 0.00255068452076921, "phrase": "proposed_scheme"}, {"score": 0.002445767214680791, "phrase": "unseen_program's_soft_error_vulnerability"}, {"score": 0.002262209824105154, "phrase": "arbitrarily_configured_multithreaded_processor"}, {"score": 0.0021821915946356168, "phrase": "proposed_model"}, {"score": 0.0021049977753042253, "phrase": "soft_error_resilient_thread-to-core_scheduling"}], "paper_keywords": ["Hardware reliability", " modeling and prediction", " modeling of computer architecture"], "paper_abstract": "Architectural vulnerability factor (AVF) characterizes a processor's vulnerability to soft errors. Interthread resource contention and sharing on a multithreaded processor (e. g., SMT, CMP) shows nonuniform impact on a program's AVF when it is co-scheduled with different programs. However, measuring the AVF is extremely expensive in terms of hardware and computation. This paper proposes a scalable two-level predictive mechanism capable of predicting a program's AVF on a SMT/CMP architecture from easily measured metrics. Essentially, the first-level model correlates the AVF in a contention-free environment with important performance metrics and the processor configuration, while the second-level model captures the interthread resource contention and sharing via processor structures' occupancies. By utilizing the proposed scheme, we can accurately estimate any unseen program's soft error vulnerability under resource contention and sharing with any other program(s), on an arbitrarily configured multithreaded processor. In practice, the proposed model can be used to find soft error resilient thread-to-core scheduling for multithreaded processors.", "paper_title": "Predicting Architectural Vulnerability on Multithreaded Processors under Resource Contention and Sharing", "paper_id": "WOS:000318893600005"}