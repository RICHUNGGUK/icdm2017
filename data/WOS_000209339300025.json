{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "disciplined_approximate_programming"}, {"score": 0.01380802578889639, "phrase": "approximate_computation"}, {"score": 0.011081673586481624, "phrase": "approximate_operations"}, {"score": 0.008844296950102574, "phrase": "low_voltage"}, {"score": 0.004397487039229447, "phrase": "lower_energy_cost"}, {"score": 0.004118587636081584, "phrase": "precise_computation"}, {"score": 0.003916098498242888, "phrase": "approximate_storage"}, {"score": 0.00376127170364341, "phrase": "dynamic_correctness_checks"}, {"score": 0.003594369823549604, "phrase": "efficient_mapping"}, {"score": 0.0034348484776384643, "phrase": "isa_extension"}, {"score": 0.0032658649336454923, "phrase": "hardware_freedom"}, {"score": 0.0030585155248142575, "phrase": "truffle"}, {"score": 0.002922705896608178, "phrase": "isa_extensions"}, {"score": 0.002821247621250663, "phrase": "dual-voltage_operation"}, {"score": 0.002764856305713066, "phrase": "high_voltage"}, {"score": 0.0027370835853738626, "phrase": "precise_operations"}, {"score": 0.002628747284714371, "phrase": "key_aspect"}, {"score": 0.002524688179363081, "phrase": "instruction_stream"}, {"score": 0.0023762535034673017, "phrase": "power_savings_potential"}, {"score": 0.0022478501955483007, "phrase": "truffle_configurations"}, {"score": 0.002202894673025544, "phrase": "resulting_quality"}, {"score": 0.0021807544600219216, "phrase": "service_degradation"}, {"score": 0.0021049977753042253, "phrase": "energy_savings"}], "paper_keywords": ["Design", " Performance", " Architecture", " disciplined approximate computation", " power-aware computing", " energy"], "paper_abstract": "Disciplined approximate programming lets programmers declare which parts of a program can be computed approximately and consequently at a lower energy cost. The compiler proves statically that all approximate computation is properly isolated from precise computation. The hardware is then free to selectively apply approximate storage and approximate computation with no need to perform dynamic correctness checks. In this paper, we propose an efficient mapping of disciplined approximate programming onto hardware. We describe an ISA extension that provides approximate operations and storage, which give the hardware freedom to save energy at the cost of accuracy. We then propose Truffle, a microarchitecture design that efficiently supports the ISA extensions. The basis of our design is dual-voltage operation, with a high voltage for precise operations and a low voltage for approximate operations. The key aspect of the microarchitecture is its dependence on the instruction stream to determine when to use the low voltage. We evaluate the power savings potential of in-order and out-of-order Truffle configurations and explore the resulting quality of service degradation. We evaluate several applications and demonstrate energy savings up to 43%.", "paper_title": "Architecture Support for Disciplined Approximate Programming", "paper_id": "WOS:000209339300025"}