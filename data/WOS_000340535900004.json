{"auto_keywords": [{"score": 0.031138623793524195, "phrase": "breaking_method"}, {"score": 0.00481495049065317, "phrase": "lazy_clause_generation"}, {"score": 0.004701556483912018, "phrase": "powerful_approach"}, {"score": 0.004518442937844318, "phrase": "constraint_programming"}, {"score": 0.004206548500039536, "phrase": "domain_restrictions"}, {"score": 0.003978866233891427, "phrase": "new_clausal_propagators"}, {"score": 0.003916098498242888, "phrase": "symmetry_breaking_approaches"}, {"score": 0.003823791479971016, "phrase": "powerful_methods"}, {"score": 0.003559675269411366, "phrase": "symmetric_parts"}, {"score": 0.00347574024760684, "phrase": "search_space"}, {"score": 0.0031342307827666675, "phrase": "symmetry_breaking_during_search_and"}, {"score": 0.002964415652865295, "phrase": "new_symmetry"}, {"score": 0.0023532890136269986, "phrase": "previous_symmetry"}, {"score": 0.0021049977753042253, "phrase": "almost_symmetries"}], "paper_keywords": ["Symmetry breaking", " Almost symmetry", " Lazy clause generation"], "paper_abstract": "Lazy Clause Generation is a powerful approach for reducing search in Constraint Programming. This is achieved by recording sets of domain restrictions that previously led to failure as new clausal propagators. Symmetry breaking approaches are also powerful methods for reducing search by avoiding the exploration of symmetric parts of the search space. In this paper, we show how we can successfully combine Symmetry Breaking During Search and Lazy Clause Generation to create a new symmetry breaking method which we call SBDS-1UIP. We show that the more precise nogoods generated by a lazy clause solver allow our combined approach to exploit symmetries that cannot be exploited by any previous symmetry breaking method. We also show that SBDS-1UIP can easily be modified to exploit almost symmetries very effectively.", "paper_title": "Symmetries, almost symmetries, and lazy clause generation", "paper_id": "WOS:000340535900004"}