{"auto_keywords": [{"score": 0.03507081157176181, "phrase": "fault_model"}, {"score": 0.029199899308483056, "phrase": "false_positives"}, {"score": 0.00481495049065317, "phrase": "automated_unit_testing_of_agent_systems"}, {"score": 0.004783232571029632, "phrase": "software_testing"}, {"score": 0.004551883842967241, "phrase": "entire_development_cost"}, {"score": 0.0045218909699308385, "phrase": "test_input_selection"}, {"score": 0.004492094831481931, "phrase": "intelligent_agents"}, {"score": 0.003845500924733243, "phrase": "significantly_increasing_cost"}, {"score": 0.0037699306119313154, "phrase": "automatic_generation"}, {"score": 0.0036836332308340923, "phrase": "oracle_problem"}, {"score": 0.0034250209479036392, "phrase": "model-based_oracle_generation_method"}, {"score": 0.003379983027734299, "phrase": "belief-desire-intention_agents"}, {"score": 0.0032483801419536675, "phrase": "core_units"}, {"score": 0.003030247482854539, "phrase": "agent_design_models"}, {"score": 0.002951045605925464, "phrase": "oracle_generation"}, {"score": 0.0027803070408286158, "phrase": "genuine_faults"}, {"score": 0.0022641658133181115, "phrase": "productive_conceptualization"}, {"score": 0.0022049428043454966, "phrase": "agent_unit_testing"}, {"score": 0.0021330830123432614, "phrase": "substantial_number"}, {"score": 0.0021049977753042253, "phrase": "relatively_small_overhead"}], "paper_keywords": ["Test oracles", " unit testing", " BDI agents"], "paper_abstract": "Software testing remains the most widely used approach to verification in industry today, consuming between 30-50 percent of the entire development cost. Test input selection for intelligent agents presents a problem due to the very fact that the agents are intended to operate robustly under conditions which developers did not consider and would therefore be unlikely to test. Using methods to automatically generate and execute tests is one way to provide coverage of many conditions without significantly increasing cost. However, one problem using automatic generation and execution of tests is the oracle problem: How can we automatically decide if observed program behavior is correct with respect to its specification? In this paper, we present a model-based oracle generation method for unit testing belief-desire-intention agents. We develop a fault model based on the features of the core units to capture the types of faults that may be encountered and define how to automatically generate a partial, passive oracle from the agent design models. We evaluate both the fault model and the oracle generation by testing 14 agent systems. Over 400 issues were raised, and these were analyzed to ascertain whether they represented genuine faults or were false positives. We found that over 70 percent of issues raised were indicative of problems in either the design or the code. Of the 19 checks performed by our oracle, faults were found by all but 5 of these checks. We also found that 8 out the 11 fault types identified in our fault model exhibited at least one fault. The evaluation indicates that the fault model is a productive conceptualization of the problems to be expected in agent unit testing and that the oracle is able to find a substantial number of such faults with relatively small overhead in terms of false positives.", "paper_title": "Model-Based Test Oracle Generation for Automated Unit Testing of Agent Systems", "paper_id": "WOS:000323643000005"}