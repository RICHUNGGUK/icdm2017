{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_orbits"}, {"score": 0.004774937143916685, "phrase": "finite_domains"}, {"score": 0.0047155367844327, "phrase": "computer_science"}, {"score": 0.004374267836149339, "phrase": "finite_domain"}, {"score": 0.004230595706156783, "phrase": "low_level"}, {"score": 0.004125934074896249, "phrase": "coq_logical_orbit_framework"}, {"score": 0.003940706575253453, "phrase": "software_systems"}, {"score": 0.00389164348807591, "phrase": "complex_data_structures"}, {"score": 0.0037324526526073404, "phrase": "coq_library"}, {"score": 0.003701401653850141, "phrase": "orbit_concepts"}, {"score": 0.0034476484413811987, "phrase": "geometric_modelling"}, {"score": 0.003404703106153948, "phrase": "combinatorial_hypermaps"}, {"score": 0.003334309053314909, "phrase": "surface_subdivisions"}, {"score": 0.003292770855568091, "phrase": "computational_geometry_problems"}, {"score": 0.0032246835734680377, "phrase": "convex_hulls"}, {"score": 0.003197843245296877, "phrase": "delaunay_diagrams"}, {"score": 0.0028805474861014722, "phrase": "floyd's_cycle-detection_algorithm"}, {"score": 0.0025838249689625775, "phrase": "orbits_-_addition"}, {"score": 0.0024065032567542107, "phrase": "important_case"}, {"score": 0.0023764959294052964, "phrase": "involved_function"}, {"score": 0.002346861891137455, "phrase": "partial_injection"}, {"score": 0.0022601535748259785, "phrase": "connectivity_relationship"}, {"score": 0.0021766418372878835, "phrase": "connected_components"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal specification", " Functional orbits", " Program correctness", " Linked representation", " Algebraic data type", " Memory shape analysis", " Computer-aided proof", " Coq system"], "paper_abstract": "In computer science, functional orbits - i.e., tracks left by the iterations of a function - in a finite domain naturally appear at a high or a low level. This paper introduces a Coq logical orbit framework, the purpose of which is to help rigorously developing software systems with some complex data structures from specification to implementation. The result is a Coq library of orbit concepts formalized as definitions, lemmas and theorems. Most of them are inspired by our previous work in geometric modelling, where combinatorial hypermaps were used to describe surface subdivisions appearing in computational geometry problems, e.g., building convex hulls or Delaunay diagrams. Now, this domain remains a reference for us, but our results are drastically extended and usable in other computer science areas. The proof of Floyd's cycle-detection algorithm, known as \"the tortoise and the hare\", confirms that point. The library contains operations to observe, traverse and update orbits - addition, deletion, mutation, transposition - with proofs of their behavior. It focuses on the important case where the involved function is a partial injection. In this case, it defines a connectivity relationship and evaluates the variation of the number of connected components during updates. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Formal study of functional orbits in finite domains", "paper_id": "WOS:000348951300003"}