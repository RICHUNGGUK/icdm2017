{"auto_keywords": [{"score": 0.04042094527442366, "phrase": "single_gpu"}, {"score": 0.00481495049065317, "phrase": "multi-gpu_systems"}, {"score": 0.004579005794486596, "phrase": "breadth_first_search"}, {"score": 0.004528156929805637, "phrase": "large_graphs"}, {"score": 0.004211069233133584, "phrase": "load_unbalance"}, {"score": 0.004118026552723285, "phrase": "un-coalesced_memory_accesses"}, {"score": 0.004027031316965272, "phrase": "pretty_low_performances"}, {"score": 0.003916098498242888, "phrase": "significant_improvement"}, {"score": 0.003724034990158436, "phrase": "multiple_gpus"}, {"score": 0.003601235776892337, "phrase": "suitable_combination"}, {"score": 0.003348838095597268, "phrase": "novel_technique"}, {"score": 0.003311604528903634, "phrase": "mapping_threads"}, {"score": 0.003202361402737197, "phrase": "perfect_load_balance"}, {"score": 0.0031140747752837826, "phrase": "binary_search_operations"}, {"score": 0.0030282147475402736, "phrase": "communication_overhead"}, {"score": 0.0029447150254434842, "phrase": "pruning_operation"}, {"score": 0.0027382040767844093, "phrase": "bfs_level"}, {"score": 0.002251227801482381, "phrase": "distributed_bfs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["GPU", " CUDA", " BFS", " Distributed algorithm", " Large graphs", " Graph 500 benchmark"], "paper_abstract": "Simple algorithms for the execution of a Breadth First Search on large graphs lead, running on clusters of GPUs, to a situation of load unbalance among threads and un-coalesced memory accesses, resulting in pretty low performances. To obtain a significant improvement on a single GPU and to scale by using multiple GPUs, we resort to a suitable combination of operations to rearrange data before processing them. We propose a novel technique for mapping threads to data that achieves a perfect load balance by leveraging prefix-sum and binary search operations. To reduce the communication overhead, we perform a pruning operation on the set of edges that needs to be exchanged at each BFS level. The result is an algorithm that exploits at its best the parallelism available on a single GPU and minimizes communication among GPUs. We show that a cluster of GPUs can efficiently perform a distributed BFS on graphs with billions of nodes. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Efficient breadth first search on multi-GPU systems", "paper_id": "WOS:000322101500006"}