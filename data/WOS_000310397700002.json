{"auto_keywords": [{"score": 0.04492412220414855, "phrase": "last-level_caches"}, {"score": 0.010202515117916457, "phrase": "concurrent_applications"}, {"score": 0.00481495049065317, "phrase": "cache-aware_virtual_machine_scheduling"}, {"score": 0.004771435352180973, "phrase": "multi-core_architecture"}, {"score": 0.004706895428234964, "phrase": "practical_limits"}, {"score": 0.004664352260912174, "phrase": "increasing_processor_frequencies"}, {"score": 0.004539005582217305, "phrase": "multi-core_designs"}, {"score": 0.004437115547184535, "phrase": "multi-core_implementations"}, {"score": 0.004337502738649814, "phrase": "physical_package_share"}, {"score": 0.004240116703465252, "phrase": "inter-core_communication"}, {"score": 0.004088807948906792, "phrase": "operating_systems"}, {"score": 0.0040334640350288, "phrase": "cache-aware_schedulers"}, {"score": 0.003960831041259951, "phrase": "virtualization_software"}, {"score": 0.003871869188502677, "phrase": "foundation_technology"}, {"score": 0.0038368442918503072, "phrase": "cloud_computing"}, {"score": 0.0034092396400930446, "phrase": "cache-aware_virtual_machine_scheduler"}, {"score": 0.003287482882222731, "phrase": "proposed_scheduler"}, {"score": 0.0030707512751243214, "phrase": "virtual_machines"}, {"score": 0.002947611960613497, "phrase": "space-partitioning_algorithm"}, {"score": 0.0028682668647074397, "phrase": "virtual_cpus"}, {"score": 0.0027035833504191233, "phrase": "time-partitioning_algorithm"}, {"score": 0.002525248554951453, "phrase": "theoretical_analysis"}, {"score": 0.002391067964886602, "phrase": "default_credit_scheduler"}, {"score": 0.002369407050708557, "phrase": "xen"}, {"score": 0.0022951216874671516, "phrase": "recent_xen_hypervisor"}, {"score": 0.0022743274702883456, "phrase": "para-virtualized_linux-based_operating_systems"}, {"score": 0.0021632743048552536, "phrase": "concurrent_virtual_machines"}, {"score": 0.0021049977753042253, "phrase": "credit_scheduler"}], "paper_keywords": ["virtualization", " cache-aware scheduling strategy", " multi-core processor"], "paper_abstract": "Facing practical limits to increasing processor frequencies, manufacturers have resorted to multi-core designs in their commercial products. In multi-core implementations, cores in a physical package share the last-level caches to improve inter-core communication. To efficiently exploit this facility, operating systems must employ cache-aware schedulers. Unfortunately, virtualization software, which is a foundation technology of cloud computing, is not yet cache-aware or does not fully exploit the locality of the last-level caches. In this paper, we propose a cache-aware virtual machine scheduler for multi-core architectures. The proposed scheduler exploits the locality of the last-level caches to improve the performance of concurrent applications running on virtual machines. For this purpose, we provide a space-partitioning algorithm that migrates and clusters communicating virtual CPUs (VCPUs) in the same cache domain. Second, we provide a time-partitioning algorithm that co-schedules or schedules in sequence clustered VCPUs. Finally, we present a theoretical analysis that proves our scheduling algorithm is more efficient in supporting concurrent applications than the default credit scheduler in Xen. We implemented our virtual machine scheduler in the recent Xen hypervisor with para-virtualized Linux-based operating systems. We show that our approach can improve performance of concurrent virtual machines by up to 19% compared to the credit scheduler.", "paper_title": "Cache-Aware Virtual Machine Scheduling on Multi-Core Architecture", "paper_id": "WOS:000310397700002"}