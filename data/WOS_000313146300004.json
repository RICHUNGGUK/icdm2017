{"auto_keywords": [{"score": 0.03130260918869616, "phrase": "splitting_process"}, {"score": 0.026989064799052012, "phrase": "thrust_library"}, {"score": 0.00481495049065317, "phrase": "manycore_gpus"}, {"score": 0.004594951819987416, "phrase": "contemporary_gpus"}, {"score": 0.004384960761826366, "phrase": "element_comparisons"}, {"score": 0.004200874581076468, "phrase": "input_sequences"}, {"score": 0.004055998173160551, "phrase": "lower_bounds"}, {"score": 0.003993216345115755, "phrase": "proposed_algorithms"}, {"score": 0.003870541730075597, "phrase": "necessary_comparisons"}, {"score": 0.003781005930058317, "phrase": "parallely_structured_algorithm"}, {"score": 0.0037224647319912293, "phrase": "merging_problem"}, {"score": 0.0034700069041302003, "phrase": "arbitrary_i"}, {"score": 0.002911039832825817, "phrase": "predetermined_level"}, {"score": 0.0027886573969044042, "phrase": "asymptotic_optimality"}, {"score": 0.002702887319160534, "phrase": "symmetrically_sized_inputs"}, {"score": 0.002206045784326466, "phrase": "mergesort_implementation"}, {"score": 0.0021381565332182773, "phrase": "cederman's_gpu"}, {"score": 0.002105010001444309, "phrase": "quicksort"}], "paper_keywords": ["parallel algorithms", " GPGPU", " complexity", " merging", " sorting"], "paper_abstract": "We propose a family of algorithms for efficiently merging on contemporary GPUs, so that each algorithm requires O(m log(n/m + 1)) element comparisons, where m and n are the sizes of the input sequences with m <= n. According to the lower bounds for merging all proposed algorithms are asymptotically optimal regarding the number of necessary comparisons. First we introduce a parallely structured algorithm that splits a merging problem of size 2(l) into 2(i) subproblems of size 2(l-i), for some arbitrary i with (0 <= i <= l). This algorithm represents a merger for i = 1 but it is rather inefficient in this case. The efficiency is boosted by moving to a two stage approach where the splitting process stops at some predetermined level and transfers control to several parallely operating block-mergers. We formally prove the asymptotic optimality of the splitting process and show that for symmetrically sized inputs our approach delivers up to 4 times faster runtimes than the thrust: :merge function that is part of the Thrust library. For assessing the value of our merging technique in the context of sorting we construct and evaluate a MergeSort on top of it. In the context of our benchmarking the resulting MergeSort clearly outperforms the MergeSort implementation provided by the Thrust library as well as Cederman's GPU optimized variant of QuickSort.", "paper_title": "Asymptotically Optimal Merging on ManyCore GPUs", "paper_id": "WOS:000313146300004"}