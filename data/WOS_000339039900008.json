{"auto_keywords": [{"score": 0.04926639323881632, "phrase": "minimum_common_string_partition_problem"}, {"score": 0.00481495049065317, "phrase": "minimum_common_string_partition"}, {"score": 0.004419819325202464, "phrase": "smallest_partition"}, {"score": 0.004005176784823524, "phrase": "edit_distance"}, {"score": 0.003971006689166329, "phrase": "block_operations"}, {"score": 0.0039035351575463103, "phrase": "reversal_distance"}, {"score": 0.003661278053602425, "phrase": "np"}, {"score": 0.003582928547553209, "phrase": "best_approximation_algorithm"}, {"score": 0.003522027550662857, "phrase": "approximation_factor"}, {"score": 0.003288567185099276, "phrase": "utmost_practical_importance"}, {"score": 0.0031102878400698143, "phrase": "low_approximation_factor"}, {"score": 0.0029797347088361056, "phrase": "simple_greedy_algorithm"}, {"score": 0.0028916124463906983, "phrase": "non-overlapping_longest_common_substrings"}, {"score": 0.0027114323601885666, "phrase": "approximation_point"}, {"score": 0.002586457551025025, "phrase": "bad_worst_case_approximation_factor"}, {"score": 0.002477837342313456, "phrase": "complicated_recursive_construction"}, {"score": 0.0024252458095689847, "phrase": "greedy_algorithm"}, {"score": 0.0023839754995935184, "phrase": "small_approximation_factors"}, {"score": 0.0022936610196951962, "phrase": "greedy_runs"}, {"score": 0.002274059352027922, "phrase": "quadratic_time"}, {"score": 0.0022257833099336858, "phrase": "novel_method"}, {"score": 0.002178529882942255, "phrase": "linear_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Strings", " Approximation algorithm", " Pattern matching"], "paper_abstract": "In the minimum common string partition problem one is given two strings S and T with the same character statistics and one seeks for the smallest partition of S into substrings so that T can also be partitioned into the same substring multiset. The problem is fundamental in several variants of edit distance with block operations, e.g. signed reversal distance with duplicates and edit distance with moves. The minimum common string partition problem is known to be NP-complete and the best approximation algorithm known has an approximation factor of O (log n log* n). Since the minimum common string partition problem is of utmost practical importance one seeks a heuristic that will (1) usually have a low approximation factor and (2) will run fast. A simple greedy algorithm is known, which iteratively choose non-overlapping longest common substrings of the input strings. This algorithm has been well-studied from an approximation point of view and it has been shown to have a bad worst case approximation factor. However, all the bad approximation factors presented so far stem from complicated recursive construction. In practice the greedy algorithm seems to have small approximation factors. However, the best current implementation of greedy runs in quadratic time. We propose a novel method to implement greedy in linear time. (C) 2014 Published by Elsevier B.V.", "paper_title": "Quick greedy computation for minimum common string partition", "paper_id": "WOS:000339039900008"}