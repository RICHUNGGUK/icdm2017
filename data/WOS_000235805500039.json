{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fuzzy_transformation_system"}, {"score": 0.004732785510739708, "phrase": "multi-adjoint_logic_programming"}, {"score": 0.004379977556546879, "phrase": "logic_programming"}, {"score": 0.004231699728933577, "phrase": "previous_approaches"}, {"score": 0.0035620354052144656, "phrase": "fuzzy_logic_programs"}, {"score": 0.003353521531649663, "phrase": "transformation_rules"}, {"score": 0.003267925215811654, "phrase": "definition_introduction"}, {"score": 0.0030239842475439814, "phrase": "strong_correctness_properties"}, {"score": 0.0029722900280316216, "phrase": "i.e._the_semantics"}, {"score": 0.0029214769181390653, "phrase": "computed_substitutions"}, {"score": 0.0028715299874549245, "phrase": "truth_degrees"}, {"score": 0.0025014259919355453, "phrase": "transformed_programs"}, {"score": 0.0022749744354271834, "phrase": "first_approach"}, {"score": 0.0021601997088758957, "phrase": "complete_transformation_system"}, {"score": 0.0021049977753042253, "phrase": "fuzzy_logic"}], "paper_keywords": [""], "paper_abstract": "Multi-adjoint logic programming represents a very recent, extremely flexible attempt for introducing fuzzy logic into logic programming. Inspired by previous approaches largely used in other (crisp) declarative paradigms, in this paper we propose the development of a fold/unfold based transformation system for optimizing such kind of fuzzy logic programs. We prove that our set of transformation rules composed by definition introduction, folding, unfolding and facting, enjoys strong correctness properties (i.e. the semantics of computed substitutions and truth degrees is preserved) and it is able to significantly improve the execution of goals against transformed programs. To the best of our knowledge, this is the first approach to the construction of a complete transformation system in a fuzzy logic setting.", "paper_title": "Building a fuzzy transformation system", "paper_id": "WOS:000235805500039"}