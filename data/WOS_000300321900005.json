{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "trivium"}, {"score": 0.007355061386577003, "phrase": "injecting_time"}, {"score": 0.006352355322833947, "phrase": "fault_injection"}, {"score": 0.004722791767189843, "phrase": "hardware-oriented_stream_cipher"}, {"score": 0.004543708337879809, "phrase": "low_cost"}, {"score": 0.004246428036409373, "phrase": "fault_attack"}, {"score": 0.0038364365168131586, "phrase": "random_time"}, {"score": 0.0036553070575015344, "phrase": "fault_positions"}, {"score": 0.00346589179059467, "phrase": "random_area"}, {"score": 0.0034325187732054093, "phrase": "eight_neighboring_bits"}, {"score": 0.0033667304423940893, "phrase": "extremely_weak_assumptions"}, {"score": 0.003334309053314909, "phrase": "effective_attack"}, {"score": 0.00320770578058916, "phrase": "hojsik"}, {"score": 0.003176811096023302, "phrase": "rudolf"}, {"score": 0.0030267296900520217, "phrase": "checking_method"}, {"score": 0.0029400959763737364, "phrase": "original_key-stream_segment"}, {"score": 0.002883718207958817, "phrase": "key-stream_segment"}, {"score": 0.00249386680748172, "phrase": "small_number"}, {"score": 0.002469830206270585, "phrase": "repeated_fault_injections"}, {"score": 0.0023417010799384524, "phrase": "uniform_distribution"}], "paper_keywords": ["Trivium", " Stream cipher", " Side-channel attack", " Fault analysis"], "paper_abstract": "As a hardware-oriented stream cipher, Trivium is on the edge of low cost and compactness. In this paper we discuss how brittle Trivium is under fault attack. Our fault model is based on the following two assumptions: (1) We can make fault injection on the state at a random time and (2) after each fault injection, the fault positions are from random one of three registers, and from a random area within eight neighboring bits. Our fault model has extremely weak assumptions for effective attack, and much weaker than that of Hojsik and Rudolf, in their fault attack on Trivium. We present a checking method such that, by observing original key-stream segment and fault injected key-stream segment, the injecting time and fault positions can be determined. Then, for several distributions of the injecting time, our random simulations always show that the attacker can break Trivium by a small number of repeated fault injections. For example, suppose that the injecting time has an uniform distribution over {0, 1, ... , 32}, then averagely no more than 16 repeated fault injection procedures will break Trivium, by averagely observing no more than 195 x 17 key-stream bits.", "paper_title": "Fault analysis of Trivium", "paper_id": "WOS:000300321900005"}