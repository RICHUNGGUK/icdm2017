{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "timed_behavioural_modelling"}, {"score": 0.004776853267973129, "phrase": "affine_scheduling"}, {"score": 0.004739056045644449, "phrase": "embedded_software_architectures"}, {"score": 0.004682920381968281, "phrase": "aadl"}, {"score": 0.004645860180714466, "phrase": "polychrony"}, {"score": 0.004609094651134046, "phrase": "high-level_modelling_languages"}, {"score": 0.004500543423643355, "phrase": "simulink"}, {"score": 0.004464954556953706, "phrase": "uml"}, {"score": 0.004429570836082403, "phrase": "sysml"}, {"score": 0.004394508073398709, "phrase": "marte"}, {"score": 0.004290969772225093, "phrase": "increasing_adoption"}, {"score": 0.004206548500039536, "phrase": "embedded_systems"}, {"score": 0.0041074234667687875, "phrase": "system-level_analysis"}, {"score": 0.00396308097989371, "phrase": "architecture_exploration"}, {"score": 0.0037784540167266497, "phrase": "architecture_exploration_techniques"}, {"score": 0.0037336520904376687, "phrase": "mathematical_foundations"}, {"score": 0.0037040785566765954, "phrase": "formal_methods"}, {"score": 0.0036311617742547167, "phrase": "semantics_ambiguities"}, {"score": 0.003559675269411366, "phrase": "safety-critical_systems"}, {"score": 0.00347574024760684, "phrase": "integration_validation"}, {"score": 0.0033668870709083884, "phrase": "formal_framework"}, {"score": 0.0033402088717816416, "phrase": "virtual_prototyping"}, {"score": 0.0032099453192629976, "phrase": "application_code"}, {"score": 0.0031718628581265266, "phrase": "modelling_tools"}, {"score": 0.0030239842475439814, "phrase": "third-party_middleware"}, {"score": 0.0028944757265206332, "phrase": "expected_behaviour"}, {"score": 0.0028601252251285025, "phrase": "final_application_software"}, {"score": 0.0028037753646260937, "phrase": "resulting_system"}, {"score": 0.0027594936602962075, "phrase": "specified_performance_requirements"}, {"score": 0.002726740692380339, "phrase": "actual_hardware"}, {"score": 0.002558495760339272, "phrase": "case-study_validation"}, {"score": 0.002488183412451029, "phrase": "synchronous_paradigm"}, {"score": 0.0024586427394152196, "phrase": "polychronous_model"}, {"score": 0.0023532890136269986, "phrase": "longer-term_aim"}, {"score": 0.002279508335630797, "phrase": "aadl_standard"}, {"score": 0.0022524395393089544, "phrase": "architecture-centric_framework"}, {"score": 0.002225691463551672, "phrase": "synchronous_modelling"}, {"score": 0.0021731423856364003, "phrase": "embedded_software"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Embedded systems", " Software architectures", " Formal methods", " Model-based design"], "paper_abstract": "High-level modelling languages and standards, such as Simulink, UML, SysML, MARTE and AADL (Architecture Analysis & Design Language), meet increasing adoption in the design of embedded systems in order to carry out system-level analysis, verification and validation (V&V) and architecture exploration, as early as possible. These analysis. V&V, architecture exploration techniques rely on mathematical foundations and formal methods in order to avoid semantics ambiguities in the design of safety-critical systems. In order to support integration validation, it is necessary to define a formal framework of virtual prototyping to integrate, verify, exercise and analyse the application code generated by modelling tools as early as possible and virtually integrate it with simulators of third-party middleware and hardware. Such a virtual prototyping platform makes it possible to validate the expected behaviour of the final application software and check that the resulting system indeed meets the specified performance requirements before the actual hardware even actually exists. In this paper, we present the definition, development and case-study validation of such a comprehensive framework, based on the synchronous paradigm and the polychronous model of computation and communication of its supportive open-source toolset: Polychrony. A longer-term aim of our work is to equip the AADL standard with an architecture-centric framework allowing for synchronous modelling, verification and synthesis of embedded software. (C) 2014 Published by Elsevier B.V.", "paper_title": "Timed behavioural modelling and affine scheduling of embedded software architectures in the AADL using Polychrony", "paper_id": "WOS:000360591600004"}