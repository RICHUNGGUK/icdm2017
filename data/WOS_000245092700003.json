{"auto_keywords": [{"score": 0.048912784012203225, "phrase": "dependent_types"}, {"score": 0.010612387000973441, "phrase": "practical_programming"}, {"score": 0.004204054047427536, "phrase": "type_system"}, {"score": 0.004101678630893243, "phrase": "ml"}, {"score": 0.003952513974962462, "phrase": "restricted_form"}, {"score": 0.0037159680715717056, "phrase": "type_index_terms"}, {"score": 0.0031260524791486347, "phrase": "run-time_programs"}, {"score": 0.002867098884583832, "phrase": "language_schema"}, {"score": 0.0025338369486914364, "phrase": "significantly_more_precise_type_information"}, {"score": 0.0024416087858984644, "phrase": "program_error_detection"}, {"score": 0.0022670785913397637, "phrase": "primary_contribution"}], "paper_keywords": [""], "paper_abstract": "We present an approach to enriching the type system of ML with a restricted form of dependent types, where type index terms are required to be drawn from a given type index language L that is completely separate from run-time programs, leading to the DML(L) language schema. This enrichment allows for specification and inference of significantly more precise type information, facilitating program error detection and compiler optimization. The primary contribution of the paper lies in our language design, which can effectively support the use of dependent types in practical programming. In particular, this design makes it both natural and straightforward to accommodate dependent types in the presence of effects such as references and exceptions.", "paper_title": "Dependent ML - An approach to practical programming with dependent types", "paper_id": "WOS:000245092700003"}