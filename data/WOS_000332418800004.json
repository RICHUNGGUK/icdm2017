{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "logic_programs"}, {"score": 0.014828130951591412, "phrase": "partial_evaluation"}, {"score": 0.004351595642056769, "phrase": "automatic_methods"}, {"score": 0.0038343546245999285, "phrase": "sufficient_conditions"}, {"score": 0.0035240305920962766, "phrase": "computation_rule"}, {"score": 0.0031577303835881964, "phrase": "size-change_graphs"}, {"score": 0.0030017207229983385, "phrase": "fast_binding-time_analysis"}, {"score": 0.0028293966058473476, "phrase": "termination_analysis"}, {"score": 0.002556625752785268, "phrase": "previous_approaches"}, {"score": 0.0024926348205500715, "phrase": "new_binding-time_analysis"}, {"score": 0.0022145052062614514, "phrase": "even_large_examples"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Partial evaluation", " Termination analysis", " Logic programming"], "paper_abstract": "One of the most important challenges in partial evaluation is the design of automatic methods for ensuring the termination of the process. In this work, we introduce sufficient conditions for the strong (i.e., independent of a computation rule) termination and quasi-termination of logic programs which rely on the construction of size-change graphs. We then present a fast binding-time analysis that takes the output of the termination analysis and annotates logic programs so that partial evaluation terminates. In contrast to previous approaches, the new binding-time analysis is conceptually simpler and considerably faster, scaling to medium-sized or even large examples. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Fast offline partial evaluation of logic programs", "paper_id": "WOS:000332418800004"}