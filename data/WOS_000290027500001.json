{"auto_keywords": [{"score": 0.03212455356795278, "phrase": "parallel_downloading_system"}, {"score": 0.015304096249512938, "phrase": "data_grid"}, {"score": 0.011543808959853892, "phrase": "data_transfer"}, {"score": 0.00481495049065317, "phrase": "parallel_access"}, {"score": 0.004728780808284175, "phrase": "data_grid_environment"}, {"score": 0.0045200127552893704, "phrase": "data-intensive_applications"}, {"score": 0.004439097815805505, "phrase": "high_energy_physics"}, {"score": 0.004281568920264999, "phrase": "computational_genomics"}, {"score": 0.004167086373747367, "phrase": "large_input"}, {"score": 0.004019171295196278, "phrase": "input_data"}, {"score": 0.003738847528809348, "phrase": "traditional_computing_jobs"}, {"score": 0.0036553070575015344, "phrase": "queuing_theory"}, {"score": 0.0034780071331554003, "phrase": "job_scheduling_performance"}, {"score": 0.003148709618042979, "phrase": "job_scheduling"}, {"score": 0.00298238929037041, "phrase": "data_fragments"}, {"score": 0.002955533639862811, "phrase": "parallel_downloading"}, {"score": 0.0029289191071848403, "phrase": "replicated_data_fragments"}, {"score": 0.0028505007899807446, "phrase": "scheduling_performance"}, {"score": 0.002724428781940696, "phrase": "non-parallel_downloading_system"}, {"score": 0.0025000115574335693, "phrase": "data_present"}, {"score": 0.002400241288973103, "phrase": "proposed_parallel_download_approach"}, {"score": 0.0022631003204259224, "phrase": "geometric_mean"}, {"score": 0.0022427071130840647, "phrase": "job_turnaround_time"}, {"score": 0.0021241414408077895, "phrase": "relatively_low_network_bandwidth"}, {"score": 0.0021049977753042253, "phrase": "relatively_high_computing_power"}], "paper_keywords": ["Data Grid", " Data Replication", " Parallel download", " Job scheduling"], "paper_abstract": "Data Grid has evolved to be the solution for data-intensive applications, such as High Energy Physics (HEP), astrophysics, and computational genomics. These applications usually have large input of data to be analyzed and these input data are widely replicated across Data Grid to improve the performance. The job scheduling performance on traditional computing jobs can be studied using queuing theory. However, with the addition of data transfer, the job scheduling performance is too complex to be modeled. In this research, we study the impact of data transfer on the performance of job scheduling in the Data Grid environment. We have proposed a parallel downloading system that supports replicating data fragments and parallel downloading of replicated data fragments, to improve the job scheduling performance. The performance of the parallel downloading system is compared with non-parallel downloading system, using three scheduling heuristics: Shortest Turnaround Time (STT), Least Relative Load (LRL) and Data Present (DP). Our simulation results show that the proposed parallel download approach greatly improves the Data Grid performance for all three scheduling algorithms, in terms of the geometric mean of job turnaround time. The advantage of parallel downloading system is most evident when the Data Grid has relatively low network bandwidth and relatively high computing power.", "paper_title": "Improving job scheduling performance with parallel access to replicas in Data Grid environment", "paper_id": "WOS:000290027500001"}