{"auto_keywords": [{"score": 0.04888938273281976, "phrase": "splay_trees"}, {"score": 0.00481495049065317, "phrase": "unloved_child"}, {"score": 0.004578616481036476, "phrase": "classic_examples"}, {"score": 0.004540365779658683, "phrase": "self-adjusting_binary_search_trees"}, {"score": 0.004408976280483648, "phrase": "data_structures"}, {"score": 0.004140269444939755, "phrase": "mach"}, {"score": 0.003696460568091852, "phrase": "amortized_complexity"}, {"score": 0.0033561632967173856, "phrase": "access_sequence"}, {"score": 0.003245270848972794, "phrase": "access_pattern"}, {"score": 0.0025974077149412, "phrase": "empirical_data"}, {"score": 0.0025221012517852907, "phrase": "practical_performance"}, {"score": 0.0024489727828322693, "phrase": "access_patterns"}, {"score": 0.0023779596230982234, "phrase": "good_reason"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["semi-splaying", " splay trees", " self-adjusting", " binary trees", " experimental results"], "paper_abstract": "Splay trees are widely considered as the classic examples of self-adjusting binary search trees and are part of most courses on data structures and algorithms. Already in the first seminal paper on splay trees (J. Assoc. Comput. Mach. 1985, 32(3):652-686) alternative operations were introduced, among which is semi-splaying. On the one hand, the analysis of semi-splaying gives a smaller constant for the amortized complexity, but on the other hand the authors write: Whether any version of semi-splaying is an improvement over splaying depends on the access sequence. Semi-splaying may be better when the access pattern is stable, but splaying adapts much faster to changes in usage. Maybe this sentence was the reason that nobody seriously ran tests to compare the performance of semi-splaying and splaying. Semi-splaying is conceptually simpler than splaying, has the same asymptotic amortized complexity and, as will be clear from empirical data presented in this paper, the practical performance is better for a very broad variety of access patterns. Therefore, its efficiency is a good reason to use semi-splaying for applications instead of its more prominent brother. Moreover, its simplicity also makes it very attractive for teaching purposes. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "Rehabilitation of an unloved child: semi-splaying", "paper_id": "WOS:000262035700002"}