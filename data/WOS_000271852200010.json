{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "bloom_filter"}, {"score": 0.008379901140465577, "phrase": "dynamic_sets"}, {"score": 0.007668173376171296, "phrase": "dynamic_bloom_filter"}, {"score": 0.006642409999890136, "phrase": "false_positive_probability"}, {"score": 0.005929046133358617, "phrase": "static_sets"}, {"score": 0.004537401559396022, "phrase": "approximate_membership_queries"}, {"score": 0.004212759658511567, "phrase": "static_set"}, {"score": 0.004069280130346136, "phrase": "sufficiently_low_level"}, {"score": 0.003989487818395848, "phrase": "mainstream_applications"}, {"score": 0.003815607281455725, "phrase": "dynamic_data_sets"}, {"score": 0.0036133077234252633, "phrase": "existing_variants"}, {"score": 0.0032887360307856635, "phrase": "dynamic_bloom_filters"}, {"score": 0.003114283314285167, "phrase": "necessary_item_insertion"}, {"score": 0.00308357048262018, "phrase": "membership_query"}, {"score": 0.0030531596109756895, "phrase": "item_deletion"}, {"score": 0.0030081030319492343, "phrase": "filter_union_algorithms"}, {"score": 0.002862648127577722, "phrase": "low_level"}, {"score": 0.0027787638791664663, "phrase": "set_cardinality_increases"}, {"score": 0.002737745536992088, "phrase": "comprehensive_mathematical_analysis"}, {"score": 0.0022901862321082407, "phrase": "infrequent_reconstruction"}, {"score": 0.0021902063413831545, "phrase": "set_cardinality"}, {"score": 0.0021365562685368767, "phrase": "analysis_results"}, {"score": 0.0021049977753042253, "phrase": "stand-alone_applications"}], "paper_keywords": ["Bloom filters", " dynamic Bloom filters", " information representation"], "paper_abstract": "A Bloom filter is an effective, space-efficient data structure for concisely representing a set, and supporting approximate membership queries. Traditionally, the Bloom filter and its variants just focus on how to represent a static set and decrease the false positive probability to a sufficiently low level. By investigating mainstream applications based on the Bloom filter, we reveal that dynamic data sets are more common and important than static sets. However, existing variants of the Bloom filter cannot support dynamic data sets well. To address this issue, we propose dynamic Bloom filters to represent dynamic sets, as well as static sets and design necessary item insertion, membership query, item deletion, and filter union algorithms. The dynamic Bloom filter can control the false positive probability at a low level by expanding its capacity as the set cardinality increases. Through comprehensive mathematical analysis, we show that the dynamic Bloom filter uses less expected memory than the Bloom filter when representing dynamic sets with an upper bound on set cardinality, and also that the dynamic Bloom filter is more stable than the Bloom filter due to infrequent reconstruction when addressing dynamic sets without an upper bound on set cardinality. Moreover, the analysis results hold in stand-alone applications, as well as distributed applications.", "paper_title": "The Dynamic Bloom Filters", "paper_id": "WOS:000271852200010"}