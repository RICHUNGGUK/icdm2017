{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dependency-aware_task-based_parallel_programming_models"}, {"score": 0.004637478829869904, "phrase": "efficient_application_software"}, {"score": 0.004594137808658537, "phrase": "multicore-based_computer_architectures"}, {"score": 0.004281678802569817, "phrase": "hardware_performance"}, {"score": 0.004182301599359094, "phrase": "run-time_system"}, {"score": 0.004123781267600542, "phrase": "schedules_tasks"}, {"score": 0.003701401653850141, "phrase": "load_balancing"}, {"score": 0.0034657012607680203, "phrase": "resource_contention"}, {"score": 0.0033377940531761985, "phrase": "scheduling_tasks"}, {"score": 0.0029816229984366374, "phrase": "software_level"}, {"score": 0.0028986672783671147, "phrase": "user_annotations"}, {"score": 0.0028580564897994175, "phrase": "task_resource_consumption"}, {"score": 0.0028047899594686003, "phrase": "runtime_system"}, {"score": 0.0027139447110929586, "phrase": "scheduling_constraints"}, {"score": 0.002688532127821979, "phrase": "experimental_results"}, {"score": 0.0026633568650501873, "phrase": "different_hardware"}, {"score": 0.002626034130205569, "phrase": "performance_gains"}, {"score": 0.0025892330566358503, "phrase": "model_examples"}, {"score": 0.002564985233317994, "phrase": "real_applications"}, {"score": 0.0023902026696615473, "phrase": "resource_sensitivity"}, {"score": 0.0023456351719724957, "phrase": "performance_improvements"}, {"score": 0.002280333649167796, "phrase": "resource-aware_scheduling"}, {"score": 0.002196077907454079, "phrase": "parallel_execution_traces"}, {"score": 0.0021049977753042253, "phrase": "application_code"}], "paper_keywords": ["Algorithms", " Performance", " Dependency aware", " dynamic scheduling", " resource contention", " task parallel"], "paper_abstract": "Dependency-aware task-based parallel programming models have proven to be successful for developing efficient application software for multicore-based computer architectures. The programming model is amenable to programmers, thereby supporting productivity, whereas hardware performance is achieved through a run-time system that dynamically schedules tasks onto cores in such a way that all dependencies are respected. However, even if the scheduling is completely successful with respect to load balancing, the scaling with the number of cores may be suboptimal due to resource contention. Here we consider the problem of scheduling tasks not only with respect to their interdependencies but also with respect to their usage of resources, such as memory and bandwidth. At the software level, this is achieved by user annotations of the task resource consumption. In the runtime system, the annotations are translated into scheduling constraints. Experimental results for different hardware, demonstrating performance gains both for model examples and real applications, are presented. Furthermore, we provide a set of tools to detect resource sensitivity and predict the performance improvements that can be achieved by resource-aware scheduling. These tools are solely based on parallel execution traces and require no instrumentation or modification of the application code.", "paper_title": "Resource-Aware Task Scheduling", "paper_id": "WOS:000349302200005"}