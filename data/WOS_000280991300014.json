{"auto_keywords": [{"score": 0.03524916520447615, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "flexible_and_highly_efficient_hardware-assisted_volume_renderer"}, {"score": 0.004224418476742716, "phrase": "simple_geometric_primitives"}, {"score": 0.004138010495069077, "phrase": "full_advantage"}, {"score": 0.004081385289516914, "phrase": "graphics_hardware"}, {"score": 0.003997891221012094, "phrase": "vertex_and_geometry_shaders"}, {"score": 0.003835972725191194, "phrase": "tetrahedral_projection"}, {"score": 0.003731673223879279, "phrase": "volume_ray"}, {"score": 0.0035804980565263024, "phrase": "fragment_shader"}, {"score": 0.003483120583663528, "phrase": "volume_rendering"}, {"score": 0.00327356326590461, "phrase": "single_pass"}, {"score": 0.003097865379563127, "phrase": "cuda-based_visibility"}, {"score": 0.0026071599759743833, "phrase": "data-parallel_solution"}, {"score": 0.0025014259919355453, "phrase": "gpu_memory_size"}, {"score": 0.0023999697562763433, "phrase": "auxiliary_volume_information"}, {"score": 0.0022092084106039834, "phrase": "rendering_process"}, {"score": 0.002163930783583212, "phrase": "time-varying_data"}, {"score": 0.0021049977753042253, "phrase": "extra_burden"}], "paper_keywords": [""], "paper_abstract": "We present a flexible and highly efficient hardware-assisted volume renderer grounded on the original Projected Tetrahedra (PT) algorithm. Unlike recent similar approaches, our method is exclusively based on the rasterization of simple geometric primitives and takes full advantage of graphics hardware. Both vertex and geometry shaders are used to compute the tetrahedral projection, while the volume ray integral is evaluated in a fragment shader; hence, volume rendering is performed entirely on the GPU within a single pass through the pipeline. We apply a CUDA-based visibility ordering achieving rendering and sorting performance of over 6 M Tet/s for unstructured datasets. Furthermore, as each tetrahedron is processed independently, we employ a data-parallel solution which is neither bound by GPU memory size nor does it rely on auxiliary volume information. In addition, iso-surfaces can be readily extracted during the rendering process, and time-varying data are handled without extra burden.", "paper_title": "Hardware-Assisted Projected Tetrahedra", "paper_id": "WOS:000280991300014"}