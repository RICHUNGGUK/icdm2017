{"auto_keywords": [{"score": 0.029536753506435857, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "backward_slicing_techniques"}, {"score": 0.004586531354697466, "phrase": "program_slicing"}, {"score": 0.004422325007817267, "phrase": "important_approach"}, {"score": 0.004212453011596424, "phrase": "program_comprehension"}, {"score": 0.0041112665381266315, "phrase": "impact_analysis"}, {"score": 0.0029244418026475832, "phrase": "comparative_study"}, {"score": 0.0022101055924375725, "phrase": "slicing_techniques"}, {"score": 0.0021049977753042253, "phrase": "different_situations"}], "paper_keywords": ["Program slicing", " Static execution before", " Improved slicing"], "paper_abstract": "Program slicing is an important approach for debugging, program comprehension, impact analysis, etc. There are various program slicing techniques ranging from the lightweight to the more accurate but heavyweight. Comparative analyses are important for selecting the most appropriate technique. This paper presents a comparative study of four backward program slicing techniques for Java. The results show the scalability and precision of these techniques. We develop guidelines that indicate which slicing techniques are appropriate for different situations, based on the results.", "paper_title": "Comparison of Backward Slicing Techniques for Java", "paper_id": "WOS:000356588700005"}