{"auto_keywords": [{"score": 0.026493741442555032, "phrase": "lvtppp"}, {"score": 0.00481495049065317, "phrase": "multicore_shared_caches"}, {"score": 0.0047689174754929195, "phrase": "partition_enforcement_policy"}, {"score": 0.004655742198075387, "phrase": "cache_partition"}, {"score": 0.004394910907549057, "phrase": "cache_quota"}, {"score": 0.004229158339021651, "phrase": "online_protection"}, {"score": 0.004089239912167375, "phrase": "cpu_core_id"}, {"score": 0.0038973170902076707, "phrase": "replacement_stack"}, {"score": 0.003750260412839128, "phrase": "basic_idea"}, {"score": 0.003093893243443715, "phrase": "live-time_protected_counter"}, {"score": 0.0029203055813347874, "phrase": "lines'_live_time"}, {"score": 0.002864628676257225, "phrase": "dead_blocks"}, {"score": 0.0027830917623582903, "phrase": "access_event_sequence"}, {"score": 0.002703869368554536, "phrase": "pseudopartition_approach-lvtppp"}, {"score": 0.0026523079380037706, "phrase": "two-cascade_victim_selection_mechanism"}, {"score": 0.0025521085778978042, "phrase": "lru_replacement_policy"}, {"score": 0.0025155150482635688, "phrase": "lvtp_counter"}, {"score": 0.0024556852466581527, "phrase": "flexible_handling"}, {"score": 0.002432152706473349, "phrase": "allocation_deviation"}, {"score": 0.0023857603808363527, "phrase": "parameter_lambda"}, {"score": 0.002340250894008014, "phrase": "generation_time"}, {"score": 0.0022626835039082746, "phrase": "significant_improvement"}, {"score": 0.002145946107974956, "phrase": "ucp"}, {"score": 0.0021049977753042253, "phrase": "evaluation_results"}], "paper_keywords": ["Cache memories", " cache partition", " dead block", " shared last-level-cache (LLC)"], "paper_abstract": "Partition enforcement policy is essential in the cache partition, and its main function is to protect the lines and retain the cache quota of each core. This paper focuses online protection based on its generation time rather than the CPU core ID that it belongs to or the position of the replacement stack, where it is located. The basic idea is that when a line is live, it must be protected and retained in the cache; when the line is \"dead,\" it needs to be evicted as early as possible. Therefore, the live-time protected counter (LvtP, four bits) is augmented to trace the lines' live time. Moreover, dead blocks are predicted according to the access event sequence. This paper presents a pseudopartition approach-LvtPPP and proposes a two-cascade victim selection mechanism to alleviate dead blocks based on the LRU replacement policy and the LvtP counter. LvtPPP also supports flexible handling of allocation deviation by introducing a parameter lambda to adjust the generation time of the line. There is significant improvement of the performance and fairness in LvtPPP over PIPP and UCP according to the evaluation results based on Simics.", "paper_title": "LvtPPP: Live-Time Protected Pseudopartitioning of Multicore Shared Caches", "paper_id": "WOS:000321153600014"}