{"auto_keywords": [{"score": 0.027186879107050047, "phrase": "empty_catch_blocks"}, {"score": 0.00481495049065317, "phrase": "java_programs"}, {"score": 0.004568041790417785, "phrase": "poor_quality"}, {"score": 0.0043836350374505005, "phrase": "least_understood"}, {"score": 0.004168285865436448, "phrase": "actual_exception"}, {"score": 0.004111404998055623, "phrase": "real_software_systems"}, {"score": 0.004055297172067811, "phrase": "developers'_perceptions"}, {"score": 0.003954406098510762, "phrase": "exploratory_study"}, {"score": 0.003599897970840043, "phrase": "error_handling"}, {"score": 0.003446531359286579, "phrase": "specific_tests"}, {"score": 0.003422918068400385, "phrase": "exception_handling_code"}, {"score": 0.003247159310893374, "phrase": "design_phase"}, {"score": 0.0029088053471312495, "phrase": "repository_analysis"}, {"score": 0.0028756480610216493, "phrase": "statistical_significance"}, {"score": 0.002740453681842333, "phrase": "overly_general_catch_blocks"}, {"score": 0.002721664743644582, "phrase": "well-known_bad_smell"}, {"score": 0.002666065263088122, "phrase": "catch_blocks"}, {"score": 0.002382644052174649, "phrase": "bug_fixes"}, {"score": 0.0022498322564291546, "phrase": "proposed_classification"}, {"score": 0.0021887323130794683, "phrase": "test_suites"}, {"score": 0.002168735848715569, "phrase": "code_inspections"}, {"score": 0.002134179690164151, "phrase": "static_analysis_tools"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Exception handling", " Bugs", " Repository mining"], "paper_abstract": "Most mainstream programming languages provide constructs to throw and to handle exceptions. However, several studies argue that exception handling code is usually of poor quality and that it is commonly neglected by developers. Moreover, it is said to be the least understood, documented, and tested part of the implementation of a system. Nevertheless, there are very few studies that analyze the actual exception handling bugs that occur in real software systems or that attempt to understand developers' perceptions of these bugs. In this work we present an exploratory study on exception handling bugs that employs two complementary approaches: a survey of 154 developers and an analysis of 220 exception handling bugs from the repositories of Eclipse and Tomcat. Only 27% of the respondents claimed that policies and standards for the implementation of error handling are part of the culture of their organizations. Moreover, in 70% of the organizations there are no specific tests for the exception handling code. Also, 61% of the respondents stated that no to little importance is given to the documentation of exception handling in the design phase of the projects with which they are involved. In addition, about 40% of the respondents consider the quality of exception handling code to be either good or very good and only 14% of the respondents consider it to be bad or very bad. Furthermore, the repository analysis has shown (with statistical significance) that exception handling bugs are ignored by developers less often than other bugs. We have also observed that while overly general catch blocks are a well-known bad smell related to exceptions, bugs stemming from these catch blocks are rare, even though many overly general catch blocks occur in the code. Furthermore, while developers often mention empty catch blocks as causes of bugs they have fixed in the past, we found very few bug reports caused by them. On top of that, empty catch blocks are frequently used as part of bug fixes, including fixes for exception handling bugs. Based on our findings, we propose a classification of exception handling bugs and their causes. The proposed classification can be used to assist in the design and implementation of test suites, to guide code inspections, or as a basis for static analysis tools. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "An exploratory study on exception handling bugs in Java programs", "paper_id": "WOS:000357439100006"}