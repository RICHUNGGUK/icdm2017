{"auto_keywords": [{"score": 0.04908569685437738, "phrase": "gpu"}, {"score": 0.00481495049065317, "phrase": "strongly_connected_components"}, {"score": 0.004675652357253327, "phrase": "graphics_processing_unit"}, {"score": 0.003903789851015775, "phrase": "wide_applications"}, {"score": 0.0038711548651825917, "phrase": "model_checking"}, {"score": 0.003838791650587681, "phrase": "electronic_design_automation"}, {"score": 0.0038066979615349822, "phrase": "social_network_analysis"}, {"score": 0.003650195070580192, "phrase": "great_potential"}, {"score": 0.0035444736871640147, "phrase": "graph_algorithms"}, {"score": 0.0035148319209810128, "phrase": "recent_work"}, {"score": 0.003427380591229386, "phrase": "gpu_scc_decomposition"}, {"score": 0.00330025288273863, "phrase": "insufficient_consideration"}, {"score": 0.00325893016361821, "phrase": "distinguishing_cpu_programming_model"}, {"score": 0.0031912018800904314, "phrase": "poor_performance"}, {"score": 0.0031645050772280033, "phrase": "irregular_and_sparse_graphs"}, {"score": 0.0030857431184193765, "phrase": "new_gpu_scc_decomposition_algorithm"}, {"score": 0.0030343239259424497, "phrase": "full_utilization"}, {"score": 0.002860992017190221, "phrase": "subgraph_numbering_scheme"}, {"score": 0.002789763110395331, "phrase": "safe_and_efficient_management"}, {"score": 0.002780203145149835, "phrase": "tarjan"}, {"score": 0.0027548146060608902, "phrase": "subgraph_ids"}, {"score": 0.0026637384761565605, "phrase": "efficient_source_selection"}, {"score": 0.002586513876943306, "phrase": "multi-source_partition_procedure"}, {"score": 0.002532724486603177, "phrase": "recursion_depth"}, {"score": 0.0024904974828343033, "phrase": "vertex_labeling_approach"}, {"score": 0.0024284701569889113, "phrase": "gpu_memory_access"}, {"score": 0.0023980368333253147, "phrase": "evaluation_results"}, {"score": 0.002358050109031317, "phrase": "proposed_approach"}, {"score": 0.002158780936704905, "phrase": "previous_cpu_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["SCC decomposition", " GPU", " Power efficiency", " Parallel algorithms"], "paper_abstract": "The GPU (Graphics Processing Unit) has recently become one of the most power efficient processors in embedded and many other environments, and has been integrated into more and more SoCs (System on Chip). Thus modern GPUs play a very important role in power aware computing. Strongly Connected Component (SCC) decomposition is a fundamental graph algorithm which has wide applications in model checking, electronic design automation, social network analysis and other fields. GPUs have been shown to have great potential in accelerating many types of computations including graph algorithms. Recent work have demonstrated the plausibility of GPU SCC decomposition, but the implementation is inefficient due to insufficient consideration of the distinguishing CPU programming model, which leads to poor performance on irregular and sparse graphs. This paper presents a new GPU SCC decomposition algorithm that focuses on full utilization of the contemporary embedded and desktop CPU architecture. In particular, a subgraph numbering scheme is proposed to facilitate the safe and efficient management of the subgraph IDs and to serve as the basis of efficient source selection. Furthermore, we adopt a multi-source partition procedure that greatly reduces the recursion depth and use a vertex labeling approach that can highly optimize the GPU memory access. The evaluation results show that the proposed approach achieves up to 41 x speedup over Tarjan's algorithm, one of the most efficient sequential SCC decomposition algorithms, and up to 3.8 x speedup over the previous CPU algorithms. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Efficient decomposition of strongly connected components on GPUs", "paper_id": "WOS:000330683600001"}