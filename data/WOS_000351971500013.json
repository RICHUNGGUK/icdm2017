{"auto_keywords": [{"score": 0.03184427762810231, "phrase": "software_deployment"}, {"score": 0.00481495049065317, "phrase": "distributed_software_systems"}, {"score": 0.004625983640628956, "phrase": "software_systems"}, {"score": 0.004575740812937594, "phrase": "complex_post-production_process"}, {"score": 0.003955523458325766, "phrase": "different_stakeholders"}, {"score": 0.0033451289921748407, "phrase": "uninterrupted_process"}, {"score": 0.0029768089698126547, "phrase": "increasing_level"}, {"score": 0.0028702214190712036, "phrase": "up-to-date_terminology"}, {"score": 0.002747328139245956, "phrase": "analytical_framework"}, {"score": 0.002678078466226442, "phrase": "automatic_deployment"}, {"score": 0.002526261001496249, "phrase": "existing_solutions"}, {"score": 0.002339953069296797, "phrase": "primary_concerns"}, {"score": 0.002272641094287882, "phrase": "dynamic_reactions"}, {"score": 0.002256117165288155, "phrase": "unforeseeable_events"}, {"score": 0.0022234280592615756, "phrase": "abstraction_level"}, {"score": 0.0021912115487610286, "phrase": "design_time"}, {"score": 0.0021515951441422082, "phrase": "deployment_complexity"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software management and maintenance", " Software deployment", " Component-based distributed systems"], "paper_abstract": "Deployment of software systems is a complex post-production process that consists in making software available for use and then keeping it operational. It must deal with constraints concerning both the system and the target machine(s), in particular their distribution, heterogeneity and dynamics, and satisfy requirements from different stakeholders. In the context of mobility and openness, deployment must react to the instability of the network of machines (failures, connections, disconnections, variations in the quality of the resources, etc.). Thus, deployment should be an uninterrupted process which also works when software is running and requires adaptiveness in order to continually satisfy the constraints and the requirements. Originally managed \"by hand\", software deployment demands an increasing level of automation and autonomy. This article first provides up-to-date terminology and definitions related to software deployment. Then, it proposes an analytical framework and reviews recent research works on automatic deployment with reference to this framework, and synthesizes the results. The review shows that existing solutions are incomplete, and possibly inefficient or unusable, when distribution, heterogeneity, scalability, dynamics and openness are primary concerns. In particular, they barely support dynamic reactions to unforeseeable events. Additionally, abstraction level and expressiveness at design time are rather limited regarding deployment complexity. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Automatic deployment of distributed software systems: Definitions and state of the art", "paper_id": "WOS:000351971500013"}