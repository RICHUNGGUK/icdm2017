{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fast_wait-free_data_structures"}, {"score": 0.004627944735913613, "phrase": "progress_guarantee"}, {"score": 0.004550029253278477, "phrase": "overall_program_progress"}, {"score": 0.004423061344624088, "phrase": "stronger_progress_guarantee"}, {"score": 0.003927203683176278, "phrase": "wait-free_algorithms"}, {"score": 0.0033511469200347907, "phrase": "efficient_wait-free_algorithms"}, {"score": 0.0032026066791743866, "phrase": "efficient_lock-free_version"}, {"score": 0.0030433302702291116, "phrase": "wait-free_version"}, {"score": 0.0025819015229390663, "phrase": "recent_construction"}, {"score": 0.0025383451160985488, "phrase": "wait-free_queue"}, {"score": 0.0024814079299143536, "phrase": "wait-free_implementation"}, {"score": 0.0023579143175099324, "phrase": "lock-free_implementation"}, {"score": 0.0022661190184053628, "phrase": "fast-path-slow-path_methodology"}, {"score": 0.0021049977753042253, "phrase": "wait-free_linked-list"}], "paper_keywords": ["Algorithms", " Performance", " Concurrent data structures", " non-blocking synchronization", " wait-free queues", " lock-free algorithms"], "paper_abstract": "Lock-freedom is a progress guarantee that ensures overall program progress. Wait-freedom is a stronger progress guarantee that ensures the progress of each thread in the program. While many practical lock-free algorithms exist, wait-free algorithms are typically inefficient and hardly used in practice. In this paper, we propose a methodology called fast-path-slow-path for creating efficient wait-free algorithms. The idea is to execute the efficient lock-free version most of the time and revert to the wait-free version only when things go wrong. The generality and effectiveness of this methodology is demonstrated by two examples. In this paper, we apply this idea to a recent construction of a wait-free queue, bringing the wait-free implementation to perform in practice as efficient as the lock-free implementation. In another work, the fast-path-slow-path methodology has been used for (dramatically) improving the performance of a wait-free linked-list.", "paper_title": "A Methodology for Creating Fast Wait-Free Data Structures", "paper_id": "WOS:000309350200014"}