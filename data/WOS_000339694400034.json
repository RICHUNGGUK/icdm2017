{"auto_keywords": [{"score": 0.04727338981813956, "phrase": "query_optimization_phase"}, {"score": 0.00481495049065317, "phrase": "evolutionary_multi-agent_systems"}, {"score": 0.004643839937761046, "phrase": "evolutionary_multi-agent_system"}, {"score": 0.004478782833067256, "phrase": "relational_database_management_systems"}, {"score": 0.004319566932528865, "phrase": "non-distributed_environment"}, {"score": 0.004140924670517666, "phrase": "known_problem"}, {"score": 0.00406663414150229, "phrase": "join_ordering"}, {"score": 0.003945754887845885, "phrase": "direct_impact"}, {"score": 0.0037597491055035895, "phrase": "proposed_optimizer"}, {"score": 0.0036479584876742085, "phrase": "optimization_core"}, {"score": 0.0035181731203867456, "phrase": "experimental_section"}, {"score": 0.0033929894721242367, "phrase": "factorial_design"}, {"score": 0.003352256019007896, "phrase": "fixed_effects"}, {"score": 0.0030991131563500446, "phrase": "variance_design"}, {"score": 0.0030434561939032597, "phrase": "evaluation_methodology"}, {"score": 0.0029707940194245216, "phrase": "synthetic_benchmarks"}, {"score": 0.002680789041160613, "phrase": "exhaustive_method"}, {"score": 0.0026326249204932733, "phrase": "general_comparison"}, {"score": 0.002600995957987461, "phrase": "different_database_systems"}, {"score": 0.0025542617599268323, "phrase": "apache_derby"}, {"score": 0.00252357226402049, "phrase": "hsqldb"}, {"score": 0.002404447017429959, "phrase": "proposed_evolutionary_multi-agent_system"}, {"score": 0.0022909325048608054, "phrase": "lower_cost_plans"}, {"score": 0.0022633993976138387, "phrase": "faster_execution_times"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Join ordering problem", " Query optimization", " Multi-agent system", " Evolutionary algorithm", " Heuristics"], "paper_abstract": "This work presents an evolutionary multi-agent system applied to the query optimization phase of Relational Database Management Systems (RDBMS) in a non-distributed environment. The query optimization phase deals with a known problem called query join ordering, which has a direct impact on the performance of such systems. The proposed optimizer was programmed in the optimization core of the H2 Database Engine. The experimental section was designed according to a factorial design of fixed effects and the analysis based on the Permutations Test for an Analysis of Variance Design. The evaluation methodology is based on synthetic benchmarks and the tests are divided into three different experiments: calibration of the algorithm, validation with an exhaustive method and a general comparison with different database systems, namely Apache Derby, HSQLDB and PostgreSQL. The results show that the proposed evolutionary multi-agent system was able to generate solutions associated with lower cost plans and faster execution times in the majority of the cases. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Query join ordering optimization with evolutionary multi-agent systems", "paper_id": "WOS:000339694400034"}