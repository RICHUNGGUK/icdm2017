{"auto_keywords": [{"score": 0.029420333683948755, "phrase": "sh_algorithm"}, {"score": 0.015719716506582538, "phrase": "closest_pair"}, {"score": 0.010663426827182467, "phrase": "overall_complexity"}, {"score": 0.01051087380399872, "phrase": "computing_distance"}, {"score": 0.004478309541684229, "phrase": "shamos"}, {"score": 0.004413846562278824, "phrase": "hoey"}, {"score": 0.004195418010131832, "phrase": "divide-and-conquer_algorithm"}, {"score": 0.004135051370123972, "phrase": "sh"}, {"score": 0.0035507457285983268, "phrase": "euclidean_distances"}, {"score": 0.0025059991410649562, "phrase": "zhou"}, {"score": 0.002469833699345086, "phrase": "xiong"}, {"score": 0.002434232936349266, "phrase": "zhu"}, {"score": 0.0021049977753042253, "phrase": "computing_distances"}], "paper_keywords": ["Shamos and Hoey algorithin", " divide and conquer", " closest pair of points", " complexity"], "paper_abstract": "As early as in 1975, Shamos and Hoey first gave an O(n lg n)-time divide-and-conquer algorithm (SH algorithm in short) for the problem of finding the closest pair of points. In one process of combination, the Euclidean distances between 3n pairs of points need to be computed, so the overall complexity of computing distance is then 3n lg n. Since the computation of distance is more costly compared with other basic operation, how to improve SH algorithm from the aspect of complexity of computing distance is considered. In 1998, Zhou, Xiong and Zhu improved SH algorithm by reducing this complexity to 2n lg n. In this paper, we make further improvement. The overall complexity of computing distances is reduced to (3n lg n)/2, which is only half that of SH algorithm.", "paper_title": "An improved algorithm for finding the closest pair of points", "paper_id": "WOS:000235342400003"}