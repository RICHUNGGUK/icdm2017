{"auto_keywords": [{"score": 0.04185068786475143, "phrase": "nonzero_entries"}, {"score": 0.015719716506582538, "phrase": "general_sparse_matrix-matrix_multiplication"}, {"score": 0.004566805735863274, "phrase": "fundamental_building_block"}, {"score": 0.004529776351030488, "phrase": "numerous_applications"}, {"score": 0.0044747919503484055, "phrase": "algebraic_multigrid_method"}, {"score": 0.004384623928442369, "phrase": "breadth_first_search"}, {"score": 0.00434906528856802, "phrase": "shortest_path_problem"}, {"score": 0.004226856126282259, "phrase": "efficient_parallel_spgemm_implementation"}, {"score": 0.004158563941891469, "phrase": "extra_irregularity"}, {"score": 0.003944112858235306, "phrase": "resulting_sparse_matrix"}, {"score": 0.003740679163860117, "phrase": "sparse_matrix"}, {"score": 0.003695237613399466, "phrase": "execution_time"}, {"score": 0.0035332741328861776, "phrase": "sparse_data"}, {"score": 0.003490343299449249, "phrase": "input_matrices"}, {"score": 0.0032967724149749853, "phrase": "emerging_cpu-gpu_heterogeneous_processors"}, {"score": 0.0031650944584992726, "phrase": "memory_pre-allocation"}, {"score": 0.003126623133221065, "phrase": "resulting_matrix"}, {"score": 0.0030635374056374016, "phrase": "hybrid_method"}, {"score": 0.0030139837612215728, "phrase": "large_amount"}, {"score": 0.0029895074299598275, "phrase": "global_memory_space"}, {"score": 0.00278930116312699, "phrase": "gpu_merge_path_algorithm"}, {"score": 0.002699769374493867, "phrase": "fastest_gpu_merge_approach"}, {"score": 0.00260246764210499, "phrase": "necessary_arithmetic_operations"}, {"score": 0.002379092507901856, "phrase": "gpu_spgemm_methods"}, {"score": 0.0023405839743112482, "phrase": "excellent_absolute_performance"}, {"score": 0.002321563536990284, "phrase": "relative_speedups"}, {"score": 0.002265422518417868, "phrase": "diverse_sparsity_structures"}, {"score": 0.0022196745041124888, "phrase": "heterogeneous_processors"}, {"score": 0.0021837406983565098, "phrase": "higher_throughput"}, {"score": 0.0021571717917276724, "phrase": "re-allocatable_shared_virtual_memory"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Sparse matrix", " Sparse matrix-matrix multiplication", " Linear algebra", " GPU", " Heterogeneous processor", " Merging", " Parallel algorithm"], "paper_abstract": "General sparse matrix-matrix multiplication (SpGEMM) is a fundamental building block for numerous applications such as algebraic multigrid method (AMG), breadth first search and shortest path problem. Compared to other sparse BIAS routines, an efficient parallel SpGEMM implementation has to handle extra irregularity from three aspects: (1) the number of nonzero entries in the resulting sparse matrix is unknown in advance, (2) very expensive parallel insert operations at random positions in the resulting sparse matrix dominate the execution time, and (3) load balancing must account for sparse data in both input matrices. In this work we propose a framework for SpGEMM on GPUs and emerging CPU-GPU heterogeneous processors. This framework particularly focuses on the above three problems. Memory pre-allocation for the resulting matrix is organized by a hybrid method that saves a large amount of global memory space and efficiently utilizes the very limited on-chip scratchpad memory. Parallel insert operations of the nonzero entries are implemented through the GPU merge path algorithm that is experimentally found to be the fastest GPU merge approach. Load balancing builds on the number of necessary arithmetic operations on the nonzero entries and is guaranteed in all stages. Compared with the state-of-the-art CPU and GPU SpGEMM methods, our approach delivers excellent absolute performance and relative speedups on various benchmarks multiplying matrices with diverse sparsity structures. Furthermore, on heterogeneous processors, our SpGEMM approach achieves higher throughput by using re-allocatable shared virtual memory. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "A framework for general sparse matrix-matrix multiplication on GPUs and heterogeneous processors", "paper_id": "WOS:000362620200004"}