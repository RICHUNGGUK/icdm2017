{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "automata-based_abstractions"}, {"score": 0.047748521831607424, "phrase": "client-side_mining"}, {"score": 0.004646496622257368, "phrase": "novel_approach"}, {"score": 0.004515967518891287, "phrase": "temporal_api_specifications"}, {"score": 0.004420472010542188, "phrase": "static_analysis"}, {"score": 0.004205395707787349, "phrase": "interprocedural_analysis"}, {"score": 0.004116440453049531, "phrase": "combined_domain"}, {"score": 0.003944112858235306, "phrase": "event_sequences"}, {"score": 0.00388828234270598, "phrase": "individual_objects"}, {"score": 0.003725470458263889, "phrase": "new_family"}, {"score": 0.0035949949979695063, "phrase": "unbounded_event_sequences"}, {"score": 0.0034690732089830045, "phrase": "distinct_usage_patterns"}, {"score": 0.003395640013786862, "phrase": "similar_usage_patterns"}, {"score": 0.003161870571621079, "phrase": "abstract_traces"}, {"score": 0.0030949200330108156, "phrase": "automata_clusters"}, {"score": 0.002986461855862617, "phrase": "spurious_behaviors"}, {"score": 0.0029024303666003153, "phrase": "experimental_results_mining_specifications"}, {"score": 0.0028006988338192375, "phrase": "java_clients"}, {"score": 0.0026452734009203764, "phrase": "effective_static_analysis"}, {"score": 0.002570817338292482, "phrase": "fairly_precise_treatment"}, {"score": 0.0024984517279573906, "phrase": "abstract_event_sequences"}, {"score": 0.0021049977753042253, "phrase": "dynamic_approaches"}], "paper_keywords": ["specification mining", " static analysis", " typestate"], "paper_abstract": "We present a novel approach to client-side mining of temporal API specifications based on static analysis. Specifically, we present an interprocedural analysis over a combined domain that abstracts both aliasing and event sequences for individual objects. The analysis uses a new family of automata-based abstractions to represent unbounded event sequences, designed to disambiguate distinct usage patterns and merge similar usage patterns. Additionally, our approach includes an algorithm that summarizes abstract traces based on automata clusters and effectively rules out spurious behaviors. We show experimental results mining specifications from a number of Java clients and APIs. The results indicate that effective static analysis for client-side mining requires fairly precise treatment of aliasing and abstract event sequences. Based on the results, we conclude that static client-side specification mining shows promise as a complement or alternative to dynamic approaches.", "paper_title": "Static specification mining using automata-based abstractions", "paper_id": "WOS:000259456600006"}