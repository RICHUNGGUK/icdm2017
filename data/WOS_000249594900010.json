{"auto_keywords": [{"score": 0.03777926916696685, "phrase": "hash_tables"}, {"score": 0.00481495049065317, "phrase": "efficient_algorithms"}, {"score": 0.0046392209103157936, "phrase": "important_variant"}, {"score": 0.0045820747375409435, "phrase": "burrows-wheeler_transform"}, {"score": 0.0041666157975446564, "phrase": "currently_known_inverse_st_algorithms"}, {"score": 0.004081385289516914, "phrase": "complete_k-order_contexts"}, {"score": 0.0038838500580958744, "phrase": "inverse_bwt."}, {"score": 0.0033743949483348626, "phrase": "n_characters"}, {"score": 0.0033327768024847397, "phrase": "context_order"}, {"score": 0.0031064226956732497, "phrase": "k-order_contexts"}, {"score": 0.0029559346879594254, "phrase": "\"doubling_technique"}, {"score": 0.002883439044844259, "phrase": "time_complexity"}, {"score": 0.0026876313688501755, "phrase": "st"}, {"score": 0.0025257081555100556, "phrase": "precalculated_auxiliary_mapping_vectors"}, {"score": 0.0024535580495414783, "phrase": "unifying_algorithms"}, {"score": 0.0023638133727818056, "phrase": "bwt"}, {"score": 0.0021401625519713577, "phrase": "unifying_algorithm_framework"}, {"score": 0.0021049977753042253, "phrase": "present_work"}], "paper_keywords": ["Burrows-Wheeler transform", " inverse sort transform", " limit-order contexts", " algorithm design", " data compression"], "paper_abstract": "As an important variant of the Burrows-Wheeler Transform (BWT), the Sort Transform (ST) can speed up the transformation by sorting only a portion of the matrix. However, because the currently known inverse ST algorithms need to retrieve the complete k-order contexts and use hash tables, they are less efficient than the inverse BWT. In this paper, we propose three fast and memory-efficient inverse ST algorithms. The first algorithm uses two auxiliary vectors to replace the hash tables. The algorithm achieves O(kN) time and space complexities for a text of N characters under the context order k. The second uses two additional compact \"alternate vectors\" to further eliminate the need to restore all of the k-order contexts and achieve O(N) space complexity. Moreover, the third uses a \"doubling technique\" to further reduce the time complexity to O(N log2 k). The hallmark of these three algorithms is that they can invert the ST in a manner similar to inverting BWT in that they all make use of precalculated auxiliary mapping vectors and require no hash tables. These unifying algorithms can also better explain the connection between the BWT and the ST: Not only can their forward components be performed by the same algorithm framework, but their respective inverse components can also be efficiently conducted by the unifying algorithm framework proposed in the present work.", "paper_title": "Efficient algorithms for the inverse sort transform", "paper_id": "WOS:000249594900010"}