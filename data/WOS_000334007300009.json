{"auto_keywords": [{"score": 0.041140195621472926, "phrase": "order-preserving_matching"}, {"score": 0.01177014114692993, "phrase": "order_relations"}, {"score": 0.008123443919183824, "phrase": "time_algorithm"}, {"score": 0.00481495049065317, "phrase": "new_string"}, {"score": 0.004553128404612054, "phrase": "numeric_strings"}, {"score": 0.0037551444630619015, "phrase": "stock_price_analysis"}, {"score": 0.0037087324991876727, "phrase": "musical_melody"}, {"score": 0.003135356056324338, "phrase": "numeric_string"}, {"score": 0.003039311963787733, "phrase": "prefix_representation"}, {"score": 0.0029830992938695007, "phrase": "nearest_neighbor_representation"}, {"score": 0.002803104254950008, "phrase": "efficient_algorithms"}, {"score": 0.00265038878247831, "phrase": "single_and_multiple_pattern_cases"}, {"score": 0.002585206414738808, "phrase": "single_pattern_case"}, {"score": 0.0022825131641434964, "phrase": "multiple_pattern_case"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["String matching", " Numeric string", " Order relation", " Multiple pattern matching", " KMP algorithm", " Aho-Corasick algorithm"], "paper_abstract": "We introduce a new string matching problem called order-preserving matching on numeric strings, where a pattern matches a text if the text contains a substring of values whose relative orders coincide with those of the pattern. Order-preserving matching is applicable to many scenarios such as stock price analysis and musical melody matching in which the order relations should be matched instead of the strings themselves. Solving order-preserving matching is closely related to the representation of order relations of a numeric string. We define the prefix representation and the nearest neighbor representation of the pattern, both of which lead to efficient algorithms for order-preserving matching. We present efficient algorithms for single and multiple pattern cases. For the single pattern case, we give an O(n logm) time algorithm and optimize it further to obtain O(n+m logm) time. For the multiple pattern case, we give an O(n logm) time algorithm. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Order-preserving matching", "paper_id": "WOS:000334007300009"}