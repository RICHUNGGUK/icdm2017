{"auto_keywords": [{"score": 0.048745558625529144, "phrase": "improved_vp-tree"}, {"score": 0.00481495049065317, "phrase": "fast_nearest_neighbor"}, {"score": 0.004455061431809975, "phrase": "important_issue"}, {"score": 0.004361644989356558, "phrase": "pattern_recognition"}, {"score": 0.004300453431933622, "phrase": "image_processing"}, {"score": 0.004092937456065441, "phrase": "previous_methods"}, {"score": 0.004007083686875716, "phrase": "high_computational_complexity"}, {"score": 0.003923023699005215, "phrase": "nearest_neighbor"}, {"score": 0.0038407203087210775, "phrase": "practical_applications"}, {"score": 0.003681238363808568, "phrase": "novel_fast_nearest_neighbor_searching_method"}, {"score": 0.003195787852087248, "phrase": "searching_speed"}, {"score": 0.0029775511937434797, "phrase": "pruning_conditions"}, {"score": 0.002833689453299307, "phrase": "searching_efficiency"}, {"score": 0.0027741761880779535, "phrase": "thorough_redundancy_elimination_method"}, {"score": 0.00273532992807855, "phrase": "cpu"}, {"score": 0.002603012037901889, "phrase": "satisfactory_independent-of-the-patch-size_computational_complexity"}, {"score": 0.002408052242408488, "phrase": "better_balance"}, {"score": 0.0023742031943872464, "phrase": "computational_efficiency"}, {"score": 0.0023408288327263294, "phrase": "memory_requirements"}, {"score": 0.0022434880661725493, "phrase": "searching_accuracy"}, {"score": 0.002180848602315088, "phrase": "great_potential"}, {"score": 0.0021501863832966966, "phrase": "practical_real-time_applications"}], "paper_keywords": ["Nearest neighbor searching", " VP-tree", " Completely eliminating redundancy", " Tree pruning"], "paper_abstract": "Nearest neighbor searching is an important issue in both pattern recognition and image processing. However, most of the previous methods suffer from high computational complexity, restricting nearest neighbor searching from practical applications. This paper proposes a novel fast nearest neighbor searching method by combining improved VP-tree and PatchMatch method. PCA (Principal Component Analysis) method is employed to optimize the VP-tree so as to improve the searching speed. We also design an approach to controlling the pruning conditions of VP-tree which further improves the searching efficiency. A thorough redundancy elimination method on CPU is also developed, with a satisfactory independent-of-the-patch-size computational complexity. Various experiments show that our new method achieves a better balance between computational efficiency and memory requirements, while also improves the searching accuracy somehow, with great potential for practical real-time applications. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Fast nearest neighbor searching based on improved VP-tree", "paper_id": "WOS:000355090100002"}