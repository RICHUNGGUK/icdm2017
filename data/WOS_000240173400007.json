{"auto_keywords": [{"score": 0.043233070917384375, "phrase": "evolutionary_function_approximation"}, {"score": 0.03415678408143449, "phrase": "evolutionary_computation"}, {"score": 0.010979650978817807, "phrase": "neural_network_function_approximators"}, {"score": 0.010035002683568245, "phrase": "td_methods"}, {"score": 0.00481495049065317, "phrase": "reinforcement_learning"}, {"score": 0.004777214679969785, "phrase": "temporal_difference_methods"}, {"score": 0.004592905436175987, "phrase": "reinforcement_learning_problems"}, {"score": 0.00443308765153716, "phrase": "function_approximator"}, {"score": 0.004363846362238565, "phrase": "value_function"}, {"score": 0.004278807087784626, "phrase": "function_approximators"}, {"score": 0.0042119653427658025, "phrase": "crucial_representational_decisions"}, {"score": 0.004001828274595483, "phrase": "function_approximator_representations"}, {"score": 0.003954837422946628, "phrase": "efficient_individual_learning"}, {"score": 0.0037133478610481994, "phrase": "fully_implemented_instantiation"}, {"score": 0.00364094622328479, "phrase": "neat"}, {"score": 0.003378385493203297, "phrase": "effective_representations"}, {"score": 0.0031719830393831115, "phrase": "on-line_performance"}, {"score": 0.003097865379563127, "phrase": "selection_mechanisms"}, {"score": 0.0030254743224136273, "phrase": "individual_actions"}, {"score": 0.0028293966058473476, "phrase": "extended_empirical_studies"}, {"score": 0.002426137929553722, "phrase": "autonomic_computing"}, {"score": 0.002224510044064184, "phrase": "evolutionary_methods"}, {"score": 0.0021724831184390192, "phrase": "additional_tests"}, {"score": 0.0021049977753042253, "phrase": "neural_network_function_approximation"}], "paper_keywords": ["reinforcement learning", " temporal difference methods", " evolutionary computation", " neuroevolution", " on-line learning"], "paper_abstract": "Temporal difference methods are theoretically grounded and empirically effective methods for addressing reinforcement learning problems. In most real-world reinforcement learning tasks, TD methods require a function approximator to represent the value function. However, using function approximators requires manually making crucial representational decisions. This paper investigates evolutionary function approximation, a novel approach to automatically selecting function approximator representations that enable efficient individual learning. This method evolves individuals that are better able to learn. We present a fully implemented instantiation of evolutionary function approximation which combines NEAT, a neuroevolutionary optimization technique, with Q-learning, a popular TD method. The resulting NEAT+Q algorithm automatically discovers effective representations for neural network function approximators. This paper also presents on-line evolutionary computation, which improves the on-line performance of evolutionary computation by borrowing selection mechanisms used in TD methods to choose individual actions and using them in evolutionary computation to select policies for evaluation. We evaluate these contributions with extended empirical studies in two domains: 1) the mountain car task, a standard reinforcement learning benchmark on which neural network function approximators have previously performed poorly and 2) server job scheduling, a large probabilistic domain drawn from the field of autonomic computing. The results demonstrate that evolutionary function approximation can significantly improve the performance of TD methods and on-line evolutionary computation can significantly improve evolutionary methods. This paper also presents additional tests that offer insight into what factors can make neural network function approximation difficult in practice.", "paper_title": "Evolutionary function approximation for reinforcement learning", "paper_id": "WOS:000240173400007"}