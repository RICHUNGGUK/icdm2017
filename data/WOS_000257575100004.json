{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "babylon"}, {"score": 0.005494445745190772, "phrase": "dynamic_proxies"}, {"score": 0.0045709675813472884, "phrase": "mobile_java_applications"}, {"score": 0.00402514392911723, "phrase": "distributed_and_mobile_java_applications"}, {"score": 0.0038654774211631564, "phrase": "object_migration"}, {"score": 0.0038210283935447473, "phrase": "asynchronous_method_invocation"}, {"score": 0.003755307753574745, "phrase": "remote_class_loading"}, {"score": 0.0036482665232275583, "phrase": "easy-to-use_interface"}, {"score": 0.003523822585025555, "phrase": "java_applications"}, {"score": 0.0033839745649214548, "phrase": "remote_objects"}, {"score": 0.0031937337757356526, "phrase": "access_restrictions"}, {"score": 0.003156984631072011, "phrase": "separate_namespaces"}, {"score": 0.003066945490483524, "phrase": "babylon_centers"}, {"score": 0.0028446460307503343, "phrase": "proxy_objects"}, {"score": 0.0026846436189970446, "phrase": "key_role"}, {"score": 0.002548331088496964, "phrase": "potential_cluster_computing_benefits"}, {"score": 0.002447101794397243, "phrase": "experimental_results"}, {"score": 0.002377260665147444, "phrase": "sequential_java_applications"}, {"score": 0.0023363141951290526, "phrase": "significant_performance_benefits"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["synchronous and asynchronous remote method invocation", " distributed middleware", " dynamic proxies", " object migration", " remote class loading"], "paper_abstract": "Babylon is a collection of tools and services that provide a 100% Java-compatible environment for developing, running and managing parallel, distributed and mobile Java applications. It incorporates features such as object migration, asynchronous method invocation, and remote class loading, while providing an easy-to-use interface. Additionally, Babylon enables Java applications to seamlessly create and interact with remote objects, while protecting those objects from other applications by implementing access restrictions and separate namespaces. The implementation of Babylon centers around dynamic proxies, a feature first available in Java 1.3, that allow proxy objects to be created at runtime. Dynamic proxies play a key role in achieving the goals of Babylon. The potential cluster computing benefits of the system are demonstrated with experimental results, which show that sequential Java applications can achieve significant performance benefits from using Babylon to parallelize their work across a cluster of workstations. Copyright (c) 2008 John Wiley & Sons, Ltd.", "paper_title": "Babylon: middleware for distributed, parallel, and mobile Java applications", "paper_id": "WOS:000257575100004"}