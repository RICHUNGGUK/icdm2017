{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "gpu_computing"}, {"score": 0.0044079880067019765, "phrase": "application_developers"}, {"score": 0.004009894739765119, "phrase": "iterative_optimization"}, {"score": 0.0038365781437074017, "phrase": "local_performance_maximum"}, {"score": 0.00355665081072721, "phrase": "program_optimization_carving"}, {"score": 0.0033814348757887232, "phrase": "complete_optimization_space"}, {"score": 0.00305639530600272, "phrase": "global_maximum"}, {"score": 0.002999012736727594, "phrase": "remaining_configurations"}, {"score": 0.0027976491158911514, "phrase": "best_performance"}, {"score": 0.002449915958738505, "phrase": "near-best_configuration"}, {"score": 0.002228263890334039, "phrase": "random_sampling"}, {"score": 0.002186395051086251, "phrase": "search_space"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["GPU computing", " Parallel computing", " Optimization space exploration"], "paper_abstract": "Contemporary many-core processors such as the GeForce 8800 GTX enable application developers to utilize various levels of parallelism to enhance the performance of their applications. However, iterative optimization for such a system may lead to a local performance maximum, due to the complexity of the system. We propose program optimization carving, a technique that begins with a complete optimization space and prunes it down to a set of configurations that is likely to contain the global maximum. The remaining configurations can then be evaluated to determine the one with the best performance. The technique can reduce the number of configurations to be evaluated by as much as 98% and is successful at finding a near-best configuration. For some applications, we show that this approach is significantly superior to random sampling of the search space. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Program optimization carving for GPU computing", "paper_id": "WOS:000259881400010"}