{"auto_keywords": [{"score": 0.04905481275957967, "phrase": "supersonic_ejector_flow"}, {"score": 0.03759091858514837, "phrase": "best_performance"}, {"score": 0.00481495049065317, "phrase": "code_migration"}, {"score": 0.004571730124085991, "phrase": "gpu"}, {"score": 0.004532054617746424, "phrase": "openmp"}, {"score": 0.004454399853989242, "phrase": "leo"}, {"score": 0.004396790930873782, "phrase": "openacc_directives"}, {"score": 0.004340081802944066, "phrase": "serial_source_code"}, {"score": 0.004138309011478741, "phrase": "openmp_and_openacc_directives"}, {"score": 0.003997458586709491, "phrase": "development_costs"}, {"score": 0.00374610869916551, "phrase": "fortran_source_code"}, {"score": 0.003665874747419775, "phrase": "well-proven_strategies"}, {"score": 0.0034204548167213545, "phrase": "programming_standard"}, {"score": 0.0033909518548844047, "phrase": "scientific_multicore_software"}, {"score": 0.0033039560332995136, "phrase": "graphics_accelerators"}, {"score": 0.0032331613500559764, "phrase": "programming_low_level_kernels"}, {"score": 0.0030560920414081645, "phrase": "parallel_regions"}, {"score": 0.003029722317983915, "phrase": "tasks_creation"}, {"score": 0.002990592465417758, "phrase": "boundary_conditions"}, {"score": 0.002888692115811987, "phrase": "loop_time"}, {"score": 0.0028267701593809877, "phrase": "offload_mode"}, {"score": 0.0027542093966576114, "phrase": "openacc"}, {"score": 0.0026603411931700556, "phrase": "data_regions"}, {"score": 0.0022857899334246946, "phrase": "acceleration_factor"}, {"score": 0.002179313258573377, "phrase": "serial_version"}, {"score": 0.0021325650133686516, "phrase": "xeon_cpu"}, {"score": 0.0021049977753042253, "phrase": "xeon_phi"}], "paper_keywords": [""], "paper_abstract": "A serial source code for simulating a supersonic ejector flow is accelerated using parallelization based on OpenMP and OpenACC directives. The purpose is to reduce the development costs and to simplify the maintenance of the application due to the complexity of the FORTRAN source code. This research follows well-proven strategies in order to obtain the best performance in both OpenMP and OpenACC. OpenMP has become the programming standard for scientific multicore software and OpenACC is one true alternative for graphics accelerators without the need of programming low level kernels. The strategies using OpenMP are oriented towards reducing the creation of parallel regions, tasks creation to handle boundary conditions, and a nested control of the loop time for the programming in offload mode specifically for the Xeon Phi. In OpenACC, the strategy focuses on maintaining the data regions among the executions of the kernels. Experiments for performance and validation are conducted here on a 12-core Xeon CPU, Xeon Phi 5110p, and Tesla C2070, obtaining the best performance from the latter. The Tesla C2070 presented an acceleration factor of 9.86X, 1.6X, and 4.5X compared against the serial version on CPU, 12-core Xeon CPU, and Xeon Phi, respectively.", "paper_title": "Performance of a Code Migration for the Simulation of Supersonic Ejector Flow to SMP, MIC, and GPU Using OpenMP, OpenMP plus LEO, and OpenACC Directives", "paper_id": "WOS:000358886700001"}