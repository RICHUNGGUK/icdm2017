{"auto_keywords": [{"score": 0.049509300669177574, "phrase": "aspect-oriented_adl"}, {"score": 0.03799635259867219, "phrase": "detailed_design_phase"}, {"score": 0.03641635546164472, "phrase": "crosscutting_concerns"}, {"score": 0.00481495049065317, "phrase": "detailed_design_models"}, {"score": 0.004719816332271661, "phrase": "mdd._software_architects"}, {"score": 0.004481132747216135, "phrase": "ao-adl."}, {"score": 0.004357627943575288, "phrase": "model-driven_development_technologies"}, {"score": 0.004237512575106522, "phrase": "system_design_phase"}, {"score": 0.004153739859461064, "phrase": "detailed_designs"}, {"score": 0.003975200317233532, "phrase": "architectural_level"}, {"score": 0.0038655854071187115, "phrase": "model-to-model_transformation_rules"}, {"score": 0.0034289106230496816, "phrase": "base_functionality"}, {"score": 0.0032423089921154503, "phrase": "parameterizable_architectures"}, {"score": 0.0031654684543975077, "phrase": "architectural_templates"}, {"score": 0.0030171910207671205, "phrase": "separate_architectural_templates"}, {"score": 0.00288736193515505, "phrase": "core_functionality"}, {"score": 0.0027964537059186893, "phrase": "ao-adl_language"}, {"score": 0.0027631038845413393, "phrase": "transformation_rules"}, {"score": 0.002741091312632307, "phrase": "ao-adl"}, {"score": 0.0026547761341670505, "phrase": "ao-adl_tool_suite"}, {"score": 0.0025405019456703325, "phrase": "aspect-oriented_software_architectures"}, {"score": 0.0024703502756471514, "phrase": "starting_point"}, {"score": 0.0022987068521717765, "phrase": "detailed_design"}, {"score": 0.0022085455097790537, "phrase": "non-crosscutting_functionalities"}, {"score": 0.0021561514733516676, "phrase": "architecture_level"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Aspect-oriented software development", " Software architectures", " AO-ADL", " Theme/UML", " UML 2.0", " Model-driven development", " ATL"], "paper_abstract": "Software architects can separate crosscutting concerns more appropriately by using an aspect-oriented ADL, concretely AO-ADL. This paper illustrates how aspect-orientation and model-driven development technologies can be used to enhance the system design phase; by automatically deriving detailed designs that take into account the \"aspects\" identified at the architectural level. Specifically, we have defined model-to-model transformation rules to automatically generate either aspect-oriented or object-oriented UML 2.0 models, closing the gap between ADLs and the notations used at the detailed design phase. By using AO-ADL it is possible to specify separately crosscutting concerns and base functionality. Another advantage of using AO-ADL is that it allows the specification of parameterizable architectures, promoting the definition of architectural templates. AO-ADL, then, enforces the specification of crosscutting concerns as separate architectural templates, which can be later instantiated and integrated with the core functionality of the system being developed. The AO-ADL language and the transformation rules from AO-ADL to UML 2.0 are available throughout the AO-ADL Tool Suite, which can be used to progressively refine and elaborate aspect-oriented software architectures. These refined architectures are the starting point of the detailed design phase. This means that our approach provides support to automatically generate a skeleton of the detailed design that preserves the information about the crosscutting and the non-crosscutting functionalities identified and modelled at the architecture level. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Deriving detailed design models from an aspect-oriented ADL using MDD", "paper_id": "WOS:000301468600006"}