{"auto_keywords": [{"score": 0.035342740054220924, "phrase": "xml_document"}, {"score": 0.008535778938065054, "phrase": "'tree_tuple"}, {"score": 0.008190043456777596, "phrase": "'closest_node"}, {"score": 0.005433181601643638, "phrase": "xml_documents"}, {"score": 0.004814998400961735, "phrase": "xml"}, {"score": 0.004671803485255806, "phrase": "growing_use"}, {"score": 0.0046192222897398685, "phrase": "extensible_markup_language"}, {"score": 0.004532892812505505, "phrase": "database_technology"}, {"score": 0.00443141503046841, "phrase": "permanent_storage"}, {"score": 0.004348580182733617, "phrase": "topic_functional_dependencies"}, {"score": 0.0042351951710402425, "phrase": "increased_importance"}, {"score": 0.004156012879026324, "phrase": "database_design"}, {"score": 0.0039869632444468036, "phrase": "xfd."}, {"score": 0.003480161521018509, "phrase": "document_type_definition"}, {"score": 0.0033893426032054366, "phrase": "missing_information"}, {"score": 0.003313380246267812, "phrase": "first_contribution"}, {"score": 0.0030375852871252934, "phrase": "common_definition"}, {"score": 0.0029807267909921628, "phrase": "complete_xml_documents"}, {"score": 0.0029471223246724204, "phrase": "second_contribution"}, {"score": 0.002837811982066224, "phrase": "'closest_node'_xfd."}, {"score": 0.0027741761880779535, "phrase": "complete_flat_relation"}, {"score": 0.0026915366885986586, "phrase": "arbitrary_sequence"}, {"score": 0.002671263324230699, "phrase": "nest_operations"}, {"score": 0.0025049752758014602, "phrase": "corresponding_functional_dependency"}, {"score": 0.0022363199197710385, "phrase": "'closest_node'_xfds"}, {"score": 0.0021614767508781048, "phrase": "complete_relation"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_nesting"}], "paper_keywords": [""], "paper_abstract": "With the growing use of the eXtensible Markup Language (XML) in database technology as a format for the permanent storage of data, the topic functional dependencies in XML (XFDs) has assumed increased importance because of its central role in database design. Recently, two different approaches have been proposed for defining an XFD. The first uses the concept of a 'tree tuple', whereas the second uses the concept of a 'closest node'. In general, the two approaches are not comparable, but are comparable when a Document Type Definition is present and there is no missing information in the XML document. The first contribution of this article shows that when the two XFD definitions are comparable, the definitions are equivalent, and so there is essentially a common definition of an XFD in complete XML documents. The second contribution is to provide justification for the definition of a 'closest node' XFD. We show that if a complete flat relation is mapped to an XML document by an arbitrary sequence of nest operations, the XML document satisfies a 'closest node' XFD if and only if the relation satisfies the corresponding functional dependency. The class of XML documents generated in this fashion is a subset of the class of XML documents for which the two definitions of XFDs coincide. Hence 'tree tuple' and 'closest node' XFDs both capture the semantics of FDs when a complete relation is mapped to an XML document via arbitrary nesting.", "paper_title": "On the equivalence between FDs in XML and FDs in relations", "paper_id": "WOS:000247632800004"}