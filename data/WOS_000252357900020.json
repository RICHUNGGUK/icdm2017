{"auto_keywords": [{"score": 0.03371704893045815, "phrase": "new_spt."}, {"score": 0.029880515873070942, "phrase": "significant_edges"}, {"score": 0.00481495049065317, "phrase": "dynamic_shortest_path_tree_update"}, {"score": 0.004376273644295806, "phrase": "interior_network"}, {"score": 0.004334657104697421, "phrase": "link_state_protocols"}, {"score": 0.004212157020917929, "phrase": "new_state_values"}, {"score": 0.004034841146538891, "phrase": "total_rebuilding"}, {"score": 0.003977602925117001, "phrase": "spt"}, {"score": 0.003920780681351006, "phrase": "static_way"}, {"score": 0.00386496062825374, "phrase": "large_computer_network"}, {"score": 0.0037377733149169573, "phrase": "unnecessary_modifications"}, {"score": 0.0036845490951857617, "phrase": "routing_table_instability"}, {"score": 0.003580355398511932, "phrase": "new_update_algorithm"}, {"score": 0.003300813776412652, "phrase": "unmodified_nodes"}, {"score": 0.0032382660477699695, "phrase": "old_spt"}, {"score": 0.003161740194257218, "phrase": "proposed_algorithm"}, {"score": 0.003087017178815267, "phrase": "dynamic_update_approach"}, {"score": 0.0029853535424953595, "phrase": "significant_edge"}, {"score": 0.002887028262617443, "phrase": "built_edge_list"}, {"score": 0.002845883666777154, "phrase": "average_number"}, {"score": 0.00276534038425712, "phrase": "probability_analysis"}, {"score": 0.0027129118211250336, "phrase": "arbitrary_tree_structure"}, {"score": 0.0025614999929672, "phrase": "dspt_algorithm_neglect"}, {"score": 0.0023388183537341213, "phrase": "experimental_results"}, {"score": 0.002305468528385778, "phrase": "dspt"}, {"score": 0.0021560018573288666, "phrase": "spt_updating_problem"}, {"score": 0.0021049977753042253, "phrase": "negative_weight_edges"}], "paper_keywords": ["dynamic update", " network routing", " open shortest path first (OSPF)", " shortest path tree (SPT)"], "paper_abstract": "Shortest path tree (SPT) construction is essential in high performance routing in an interior network using link state protocols. When some links have new state values, SPTs may be rebuilt, but the total rebuilding of the SPT in a static way for a large computer network is not only computationally expensive, unnecessary modifications can cause routing table instability. This paper presents a new update algorithm, dynamic shortest path tree (DSPT) that is computationally economical and that maintains the unmodified nodes mostly from an old SPT to a new SPT. The proposed algorithm reduces redundancy using a dynamic update approach where! an edge becomes the significant edge when it is extracted from a built edge list Q. The average number of significant edges are identified through probability analysis based on an arbitrary tree structure. An update derived from significant edges is more efficient because the DSPT algorithm neglect most other redundant edges that do not participate in the construction of a new SPT. Our complexity analysis and experimental results show that DSPT is faster than other known methods. It can also be extended to solve the SPT updating problem in a graph with negative weight edges.", "paper_title": "An efficient algorithm for dynamic shortest path tree update in network routing", "paper_id": "WOS:000252357900020"}