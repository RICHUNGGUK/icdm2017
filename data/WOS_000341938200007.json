{"auto_keywords": [{"score": 0.045957038821882804, "phrase": "data_clumps"}, {"score": 0.04394022655103679, "phrase": "middle_man"}, {"score": 0.03427618353105875, "phrase": "message_chains"}, {"score": 0.031901763874956926, "phrase": "eclipse"}, {"score": 0.03129795868731304, "phrase": "argouml"}, {"score": 0.00481495049065317, "phrase": "code_smells"}, {"score": 0.004758987153057194, "phrase": "significant_but_small_effect"}, {"score": 0.004523865550323285, "phrase": "fowler_et_al"}, {"score": 0.004471270242168067, "phrase": "least-studied_smells"}, {"score": 0.004055998173160551, "phrase": "five_smells"}, {"score": 0.003916098498242888, "phrase": "apache_commons"}, {"score": 0.0038554737609608255, "phrase": "fault_data"}, {"score": 0.003781005930058317, "phrase": "fault_repositories"}, {"score": 0.0036791522245326514, "phrase": "negative_binomial_regression_models"}, {"score": 0.0035108659422301985, "phrase": "mcfadden_effect_size"}, {"score": 0.0034029588672379926, "phrase": "switch_statements"}, {"score": 0.0031229578623834394, "phrase": "larger_files"}, {"score": 0.0031107911390188055, "phrase": "reduced_faults"}, {"score": 0.003038786698636021, "phrase": "apache"}, {"score": 0.0028436364707396613, "phrase": "speculative_generality"}, {"score": 0.002766963729586353, "phrase": "file_size"}, {"score": 0.002366763442497185, "phrase": "fault-prone_code"}, {"score": 0.002163367190715979, "phrase": "different_effects"}, {"score": 0.002146527342660575, "phrase": "different_systems"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_refactoring"}], "paper_keywords": ["Experimentation", " Languages", " Design", " Software code smells", " defects"], "paper_abstract": "We investigate the relationship between faults and five of Fowler et al.'s least-studied smells in code: Data Clumps, Switch Statements, Speculative Generality, Message Chains, and Middle Man. We developed a tool to detect these five smells in three open-source systems: Eclipse, ArgoUML, and Apache Commons. We collected fault data from the change and fault repositories of each system. We built Negative Binomial regression models to analyse the relationships between smells and faults and report the McFadden effect size of those relationships. Our results suggest that Switch Statements had no effect on faults in any of the three systems; Message Chains increased faults in two systems; Message Chains which occurred in larger files reduced faults; Data Clumps reduced faults in Apache and Eclipse but increased faults in ArgoUML; Middle Man reduced faults only in ArgoUML, and Speculative Generality reduced faults only in Eclipse. File size alone affects faults in some systems but not in all systems. Where smells did significantly affect faults, the size of that effect was small (always under 10 percent). Our findings suggest that some smells do indicate fault-prone code in some circumstances but that the effect that these smells have on faults is small. Our findings also show that smells have different effects on different systems. We conclude that arbitrary refactoring is unlikely to significantly reduce fault-proneness and in some cases may increase fault-proneness.", "paper_title": "Some Code Smells Have a Significant but Small Effect on Faults", "paper_id": "WOS:000341938200007"}