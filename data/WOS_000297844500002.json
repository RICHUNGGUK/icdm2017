{"auto_keywords": [{"score": 0.040642263753439135, "phrase": "apex"}, {"score": 0.004776297980616768, "phrase": "software_model"}, {"score": 0.004624751696958501, "phrase": "formal_verification_research"}, {"score": 0.0045876189888390895, "phrase": "programming_languages"}, {"score": 0.0045324756541157574, "phrase": "c._one_general_technique"}, {"score": 0.004388631450145507, "phrase": "reduced_model"}, {"score": 0.004249332848326785, "phrase": "existing_and_efficient_tools"}, {"score": 0.004181345331004838, "phrase": "spin."}, {"score": 0.00398380712846857, "phrase": "avionics_software"}, {"score": 0.0036898803847106023, "phrase": "avionics_industry"}, {"score": 0.003558294449586273, "phrase": "promela_models"}, {"score": 0.003515479934694842, "phrase": "c_source_code"}, {"score": 0.003417565253539315, "phrase": "extracted_model"}, {"score": 0.0033223686422055834, "phrase": "reusable_apex-specific_environment"}, {"score": 0.003229815147800001, "phrase": "execution_engine"}, {"score": 0.0030523478413779686, "phrase": "apex_services"}, {"score": 0.002861402531078998, "phrase": "apex_scheduling"}, {"score": 0.0026500668745484957, "phrase": "irrelevant_steps"}, {"score": 0.002534906456854208, "phrase": "deterministic_scheduler"}, {"score": 0.0023762535034673017, "phrase": "realistic_applications"}, {"score": 0.0022914054720704546, "phrase": "novel_testing_method"}, {"score": 0.0022095803687183107, "phrase": "testing_method"}, {"score": 0.002196380735901578, "phrase": "spin"}, {"score": 0.002165388556451298, "phrase": "official_apex_test_cases"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["model extraction", " software model checking", " avionics software", " APEX", " real time"], "paper_abstract": "Software model checking consists in applying the most powerful results in formal verification research to programming languages such as C. One general technique to implement this approach is producing a reduced model of the software in order to employ existing and efficient tools, such as SPIN. This paper focusses on the application of this approach to the avionics software constructed on top of the Application Executive Software (APEX) Interface, which is widely employed by manufacturers in the avionics industry. It presents a method to automatically extract PROMELA models from the C source code. In order to close the extracted model during verification, we built a reusable APEX-specific environment. This APEX environment models the execution engine (i.e. an APEX compliant real-time operating system) that implements APEX services. In particular, it explains how to deal with aspects such as real-time and APEX scheduling. Time is modelled in such a way that the we save time and memory by avoiding the analysis of irrelevant steps. This model of time and the construction of a deterministic scheduler guarantees the scalability of our approach. The paper also presents a tool that can verify realistic applications, and that has been used as a novel testing method to ensure the correctness of our APEX environment. This testing method uses SPIN to execute official APEX test cases. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Verification support for ARINC-653-based avionics software", "paper_id": "WOS:000297844500002"}