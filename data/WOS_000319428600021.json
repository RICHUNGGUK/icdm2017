{"auto_keywords": [{"score": 0.046496988738219475, "phrase": "sbml"}, {"score": 0.0068775614273466805, "phrase": "numerical_integrator"}, {"score": 0.00481495049065317, "phrase": "fully_functional_sbml_simulator"}, {"score": 0.004179480763003705, "phrase": "language-neutral_library"}, {"score": 0.0040111533608228195, "phrase": "ode_models"}, {"score": 0.003849579089885659, "phrase": "simple_portable_implementation"}, {"score": 0.0036275736378775757, "phrase": "computational_platform"}, {"score": 0.0035945701438887282, "phrase": "systems_biology"}, {"score": 0.0031917943932454314, "phrase": "sbml_test_suite"}, {"score": 0.0031339552246625463, "phrase": "sbml_events"}, {"score": 0.002953097497434808, "phrase": "libsbmlsim"}, {"score": 0.0028863414975346512, "phrase": "c_programming_language"}, {"score": 0.0027954035431845344, "phrase": "third-party_library"}, {"score": 0.0026704265616705023, "phrase": "sbml_documents"}, {"score": 0.0024481198073210567, "phrase": "straightforward_implementation"}, {"score": 0.002349357968054713, "phrase": "platform-independent_library"}, {"score": 0.002275341015086484, "phrase": "windows"}, {"score": 0.0022340440141967125, "phrase": "linux"}, {"score": 0.0021636305856739422, "phrase": "java"}, {"score": 0.002124382093453114, "phrase": "python"}, {"score": 0.0021050008318311713, "phrase": "ruby"}], "paper_keywords": [""], "paper_abstract": "Motivation: The Systems Biology Markup Language (SBML) is currently supported by >230 software tools, among which 160 support numerical integration of ordinary differential equation (ODE) models. Although SBML is a widely accepted standard within this field, there is still no language-neutral library that supports all features of SBML for simulating ODE models. Therefore, a demand exists for a simple portable implementation of a numerical integrator that supports SBML to enhance the development of a computational platform for systems biology. Results: We implemented a library called libSBMLSim, which supports all the features of SBML and confirmed that the library passes all tests in the SBML test suite including those for SBML Events, AlgebraicRules, 'fast' attribute on Reactions and Delay. LibSBMLSim is implemented in the C programming language and does not depend on any third-party library except libSBML, which is a library to handle SBML documents. For the numerical integrator, both explicit and implicit methods are written from scratch to support all the functionality of SBML features in a straightforward implementation. We succeeded in implementing libSBMLSim as a platform-independent library that can run on most common operating systems (Windows, MacOSX and Linux) and also provides several language bindings (Java, C#, Python and Ruby).", "paper_title": "LibSBMLSim: a reference implementation of fully functional SBML simulator", "paper_id": "WOS:000319428600021"}