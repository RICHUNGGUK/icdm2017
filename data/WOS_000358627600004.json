{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "local_minimum_variance"}, {"score": 0.004736045157669388, "phrase": "large_scale"}, {"score": 0.0046970764288494764, "phrase": "distributed_systems"}, {"score": 0.00428892403807229, "phrase": "fault_tolerance"}, {"score": 0.004115267130977749, "phrase": "replicated_resources"}, {"score": 0.0038518661517315533, "phrase": "local_k-placements"}, {"score": 0.0035461111918923117, "phrase": "k_replicas"}, {"score": 0.002931569771634119, "phrase": "local_k-placement_problem"}, {"score": 0.0028127163745564777, "phrase": "preferably_homogeneous_distribution"}, {"score": 0.0024637379406427856, "phrase": "k-placement_problem"}, {"score": 0.0023834640793589414, "phrase": "standard_deviation"}, {"score": 0.0022122603123901114, "phrase": "local_minimum"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-stabilizing algorithms", " Backup placement", " Replication"], "paper_abstract": "Large scale distributed systems require replication of resources to amplify availability and to provide fault tolerance. The placement of replicated resources significantly impacts performance. This paper considers local k-placements: Each node of a network has to place k replicas of a resource among its direct neighbors. The load of a node in a given local k-placement is the number of replicas it stores. The local k-placement problem is to achieve a preferably homogeneous distribution of the loads. We present a novel self-stabilizing, distributed, asynchronous, scalable algorithm for the k-placement problem such that the standard deviation of the distribution of the loads assumes a local minimum. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Self-stabilizing local k-placement of replicas with local minimum variance", "paper_id": "WOS:000358627600004"}