{"auto_keywords": [{"score": 0.049312845289349906, "phrase": "gap_constraints"}, {"score": 0.015719716506582538, "phrase": "general_gaps"}, {"score": 0.014889158811441164, "phrase": "sequential_pattern_mining"}, {"score": 0.007374892744422054, "phrase": "pattern_p"}, {"score": 0.004662036750452837, "phrase": "essential_problems"}, {"score": 0.004632039024076267, "phrase": "computer_science"}, {"score": 0.004587402291248795, "phrase": "music_information_retrieval"}, {"score": 0.004342430078306461, "phrase": "matching_position"}, {"score": 0.004300572109650207, "phrase": "last_pattern"}, {"score": 0.004163925706345031, "phrase": "matching_positions"}, {"score": 0.003941478054422721, "phrase": "essential_tasks"}, {"score": 0.003853359519337239, "phrase": "strict_pattern"}, {"score": 0.0038409323908446297, "phrase": "matching_algorithms"}, {"score": 0.003779393063001438, "phrase": "pattern_mining_tasks"}, {"score": 0.003742941972172613, "phrase": "strict_pattern_matching"}, {"score": 0.003531474887552889, "phrase": "frequent_patterns"}, {"score": 0.0032259472087775138, "phrase": "length_constraints"}, {"score": 0.00306334226516593, "phrase": "sap_instance"}, {"score": 0.003004494701922268, "phrase": "exponential_amount"}, {"score": 0.0029754949467239887, "phrase": "exact_pattern"}, {"score": 0.0029467742734417255, "phrase": "general_gaps_instances"}, {"score": 0.002880829737447174, "phrase": "effective_online_algorithm"}, {"score": 0.0028530204083889606, "phrase": "seta"}, {"score": 0.0027622407190589326, "phrase": "subnettree_structure"}, {"score": 0.002735572813553256, "phrase": "nettree"}, {"score": 0.002555950807368337, "phrase": "space_and_time_complexities"}, {"score": 0.002319566486828135, "phrase": "maxlen"}, {"score": 0.00222403027114726, "phrase": "maximal_length_constraint"}, {"score": 0.002202547013259953, "phrase": "maximal_gap_length"}, {"score": 0.0021672007484097575, "phrase": "approximate_threshold"}, {"score": 0.0021532212370650255, "phrase": "extensive_experimental_results"}, {"score": 0.0021049977753042253, "phrase": "seta."}], "paper_keywords": ["Approximate pattern matching", " Hamming distance", " General gap", " Online algorithm"], "paper_abstract": "Pattern matching with gap constraints is one of the essential problems in computer science such as music information retrieval and sequential pattern mining. One of the cases is called loose matching, which only considers the matching position of the last pattern substring in the sequence. One more challenging problem is considering the matching positions of each character in the sequence, called strict pattern matching which is one of the essential tasks of sequential pattern mining with gap constraints. Some strict pattern matching algorithms were designed to handle pattern mining tasks, since strict pattern matching can be used to compute the frequency of some patterns occurring in the given sequence and then the frequent patterns can be derived. In this article, we address a more general strict approximate pattern matching with Hamming distance, named SAP (Strict Approximate Pattern matching with general gaps and length constraints), which means that the gap constraints can be negative. We show that a SAP instance can be transformed into an exponential amount of the exact pattern matching with general gaps instances. Hence, we propose an effective online algorithm, named SETA (SubnETtree for sAp), based on the subnettree structure (a Nettree is an extension of a tree with multi-parents and multi-roots) and show the completeness of the algorithm. The space and time complexities of the algorithm are O(m x Maxlen x W x d) and O(Maxlen x W x m (2) x n x d), respectively, where m, Maxlen, W, and d are the length of pattern P, the maximal length constraint, the maximal gap length of pattern P and the approximate threshold. Extensive experimental results validate the correctness and effectiveness of SETA.", "paper_title": "Strict approximate pattern matching with general gaps", "paper_id": "WOS:000351110600012"}