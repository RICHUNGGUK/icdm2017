{"auto_keywords": [{"score": 0.03755359252962418, "phrase": "distributed_os"}, {"score": 0.00481495049065317, "phrase": "task_migration_mechanism"}, {"score": 0.0047409388179452255, "phrase": "many-core_operating_systems"}, {"score": 0.004620093797504386, "phrase": "task_execution"}, {"score": 0.00450231514359539, "phrase": "future_hardware_platforms"}, {"score": 0.004253618550301311, "phrase": "large_amount"}, {"score": 0.004145143433523008, "phrase": "intelligent_power_manager"}, {"score": 0.004081385289516914, "phrase": "high_chip"}, {"score": 0.004039423410198574, "phrase": "core_density"}, {"score": 0.003997891221012094, "phrase": "increased_thermal_awareness"}, {"score": 0.003936389070602614, "phrase": "thermal_hotspots"}, {"score": 0.003757480190200645, "phrase": "lightweight_task_migration_mechanism"}, {"score": 0.0036996627006622975, "phrase": "distributed_operating_systems"}, {"score": 0.0036427316134070007, "phrase": "many-core_platforms"}, {"score": 0.003353521531649663, "phrase": "os_kernels"}, {"score": 0.0030872017736888113, "phrase": "task_migration"}, {"score": 0.002977419551510206, "phrase": "running_tasks"}, {"score": 0.0026986685585382347, "phrase": "migrating_tasks"}, {"score": 0.0025892330566358503, "phrase": "bus-based_platform"}, {"score": 0.002358917661465133, "phrase": "task_migration_overhead"}, {"score": 0.002310578855290687, "phrase": "emerging_bottlenecks"}, {"score": 0.00226322835801988, "phrase": "presented_task_migration_mechanism"}, {"score": 0.0021049977753042253, "phrase": "distributed_many-core_operating_systems"}], "paper_keywords": ["Task migration", " Distributed operating systems", " Many-core systems", " Network-on-chip", " Shared memory systems"], "paper_abstract": "Spatial locality of task execution is becoming important in future hardware platforms since the number of cores is steadily increasing. The large amount of cores requires an intelligent power manager and the high chip and core density requires increased thermal awareness to avoid thermal hotspots on the chip. This paper presents a lightweight task migration mechanism explicitly for distributed operating systems running on many-core platforms. As the distributed OS runs one scheduler on each core, the tasks are migrated between OS kernels within the same shared memory platform. The benefits, such as performance and energy efficiency, of task migration are achieved by re-locating running tasks on the most appropriate cores and keeping the overhead of executing such a migration sufficiently low. We investigate the overhead of migrating tasks on a distributed OS running both on a bus-based platform and a many-core NoC-with these means of measures, we can predict the task migration overhead and pinpoint the emerging bottlenecks. With the presented task migration mechanism, we intend to improve the dynamism of power and performance characteristics in distributed many-core operating systems.", "paper_title": "A task migration mechanism for distributed many-core operating systems", "paper_id": "WOS:000337800400007"}