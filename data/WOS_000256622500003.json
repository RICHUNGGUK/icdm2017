{"auto_keywords": [{"score": 0.03084505914787528, "phrase": "hermes_file_system"}, {"score": 0.01061268470151231, "phrase": "hermes"}, {"score": 0.004762665113390216, "phrase": "file_system_design"}, {"score": 0.0046938292389998824, "phrase": "embedded_systems"}, {"score": 0.00464285389666, "phrase": "pvr"}, {"score": 0.004592427776766215, "phrase": "-top_box"}, {"score": 0.004526041191525413, "phrase": "unique_demand"}, {"score": 0.004412155302768363, "phrase": "particularly_file_system"}, {"score": 0.004223521213460728, "phrase": "tight_constraints"}, {"score": 0.004192872425727907, "phrase": "consumer_electronics_platform"}, {"score": 0.003941141575848601, "phrase": "state-of-art_file_system"}, {"score": 0.003704467870496114, "phrase": "logical_level_abstraction"}, {"score": 0.0035719191251314918, "phrase": "novel_features"}, {"score": 0.0034315678891900184, "phrase": "block_index_augmentation_scheme"}, {"score": 0.0033329590158056935, "phrase": "disk_fragmentation"}, {"score": 0.003201967054773186, "phrase": "name_space_data"}, {"score": 0.0029985954225814895, "phrase": "semantic_units"}, {"score": 0.0028702214190712036, "phrase": "state-of-the-art_file_system_technologies"}, {"score": 0.0027978827655799495, "phrase": "extensive_physical_experiment"}, {"score": 0.002707541142254756, "phrase": "original_issues"}, {"score": 0.002453602802736223, "phrase": "harmonious_effort"}, {"score": 0.00241805924231814, "phrase": "aggressive_free_block_allocation_algorithm"}, {"score": 0.002289285767792039, "phrase": "performance_experiments"}, {"score": 0.002264364091368269, "phrase": "hermes_file_system_prototype"}, {"score": 0.0022315557620621205, "phrase": "file_system_constraints"}, {"score": 0.002215329893200788, "phrase": "high_volume"}, {"score": 0.0021992217442375157, "phrase": "high_bandwidth_multimedia_application"}, {"score": 0.002167355210897559, "phrase": "superior_performance"}, {"score": 0.0021437580456873584, "phrase": "file_system"}, {"score": 0.002128185258542745, "phrase": "linux"}, {"score": 0.0021049978798025797, "phrase": "xfs"}], "paper_keywords": ["multimedia", " A/V workload", " file system", " disk scheduling", " embedded system"], "paper_abstract": "Embedded systems such as PVR, set-top box, HDTV put unique demand on I/O subsystem design. Underlying software, particularly file system, needs to be elaborately designed so that it can meet tight constraints of consumer electronics platform: performance, price, reliability, and etc. In this work, we develop state-of-art file system elaborately tailored for A/V workload. There are two design objectives in our file system: performance and support for logical level abstraction. For performance, we develop a number of novel features: extent based allocation, single level file structure with block index augmentation scheme, aggressive free block allocation to minimize disk fragmentation, elaborate file system meta data layout, separation of name space data and file data and etc. HERMES enables the user to view file as a collection of semantic units (frame or audio samples). HERMES file system encompasses most of state-of-the-art file system technologies published in preceding works. Via extensive physical experiment, we verify that HERMES file system successfully addresses the original issues: good scalability, predictable I/O latency (minimizing variability in I/O latency), efficient disk head movement and etc. This is the result of harmonious effort of large I/O size, aggressive free block allocation algorithm, data block placement strategy, file organization, layout of HERMES file system and etc. The result of performance experiments indicate that HERMES file system prototype successfully meets the file system constraints for high volume and high bandwidth multimedia application. HERMES file system exhibits superior performance to EXT2 file system (Linux) and XFS file system (SGI).", "paper_title": "HERMES: embedded file system design for A/V application", "paper_id": "WOS:000256622500003"}