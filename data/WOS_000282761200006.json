{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "data-structure-neutral_component_for_mesh_query"}, {"score": 0.0045357787854931894, "phrase": "new_simulation_code"}, {"score": 0.004402295697276237, "phrase": "mesh_data_manipulation"}, {"score": 0.004358676214574977, "phrase": "adaptive_refinement"}, {"score": 0.004315487055548749, "phrase": "design_optimization"}, {"score": 0.004105850229681625, "phrase": "obvious_target"}, {"score": 0.004065156038847781, "phrase": "code_reuse"}, {"score": 0.003829290275367182, "phrase": "specific_data_structures"}, {"score": 0.003661382948704217, "phrase": "software_component"}, {"score": 0.0034317185678527672, "phrase": "low-level_mesh_query"}, {"score": 0.0033140589981208693, "phrase": "solution_algorithms"}, {"score": 0.003264872488939969, "phrase": "component's_data_model"}, {"score": 0.0032164136388931805, "phrase": "data_abstraction"}, {"score": 0.0027557911038816256, "phrase": "general_purpose"}, {"score": 0.0026612444314342023, "phrase": "practical_platform"}, {"score": 0.0026217213613095322, "phrase": "high-level_mesh_operations"}, {"score": 0.00256993314099902, "phrase": "underlying_mesh_data_structures"}, {"score": 0.0025066304722422463, "phrase": "data_model"}, {"score": 0.0023143284925318916, "phrase": "multiple_implementations"}, {"score": 0.0022799458141165587, "phrase": "interface_functionality"}, {"score": 0.0022016885701010088, "phrase": "mesh_data"}, {"score": 0.0021049977753042253, "phrase": "underlying_mesh_data"}], "paper_keywords": ["Design", " Performance", " Data structure independence", " mesh-based simulations", " mesh modification", " software components"], "paper_abstract": "Much of the effort required to create a new simulation code goes into developing infrastructure for mesh data manipulation, adaptive refinement, design optimization, and so forth. This infrastructure is an obvious target for code reuse, except that implementations of these functionalities are typically tied to specific data structures. In this article, we describe a software component-an abstract data model and programming interface-designed to provide low-level mesh query and manipulation support for meshing and solution algorithms. The component's data model provides a data abstraction, completely hiding all details of how mesh data is stored, while its interface defines how applications can interact with that data. Because the component has been carefully designed to be general purpose and efficient, it provides a practical platform for implementing high-level mesh operations independently of the underlying mesh data structures. After describing the data model and interface, we provide several usage examples, each of which has been used successfully with multiple implementations of the interface functionality. The overhead due to accessing mesh data through the interface rather than directly accessing the underlying mesh data is shown to be acceptably small.", "paper_title": "An Interoperable, Data-Structure-Neutral Component for Mesh Query and Manipulation", "paper_id": "WOS:000282761200006"}