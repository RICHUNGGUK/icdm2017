{"auto_keywords": [{"score": 0.02838132555174035, "phrase": "boolean"}, {"score": 0.00481495049065317, "phrase": "automatic_decoder_synthesis"}, {"score": 0.004542780650208743, "phrase": "output_sequence"}, {"score": 0.004438250823243621, "phrase": "sequential_encoder"}, {"score": 0.0042859292226559535, "phrase": "corresponding_input_sequence"}, {"score": 0.003904713104101532, "phrase": "signal_processing"}, {"score": 0.0037487368769596814, "phrase": "encoder_specification"}, {"score": 0.003705323407433896, "phrase": "decoder_design"}, {"score": 0.003336468343971626, "phrase": "encoder_correctness"}, {"score": 0.0032786537599187125, "phrase": "recent_advances"}, {"score": 0.0032406665327678616, "phrase": "promising_progress"}, {"score": 0.003129317057177867, "phrase": "complete_method"}, {"score": 0.0029694040368299624, "phrase": "finite_state_transition_system"}, {"score": 0.002884111441153185, "phrase": "completely_automatic_decoder_synthesis"}, {"score": 0.0027687904688616983, "phrase": "complete_and_practical_approach"}, {"score": 0.002720785798036066, "phrase": "decoder_synthesis"}, {"score": 0.0026119782818898193, "phrase": "craig_interpolation"}, {"score": 0.002507511169156787, "phrase": "decoder-existent_cases"}, {"score": 0.0023792975669318615, "phrase": "decoder-nonexistent_cases"}, {"score": 0.0022576249214220187, "phrase": "prior_methods"}, {"score": 0.002205560249972527, "phrase": "case_studies"}, {"score": 0.0021049977753042253, "phrase": "linear_error-correcting_codes"}], "paper_keywords": ["Craig interpolation", " decoder", " encoder", " satisfiability solving", " synthesis"], "paper_abstract": "Upon receiving the output sequence streaming from a sequential encoder, a decoder reconstructs the corresponding input sequence that streamed to the encoder. Such an encoding and decoding scheme is commonly encountered in communication, cryptography, signal processing, and other applications. Given an encoder specification, decoder design can be error-prone and time consuming. Its automation may help designers improve productivity and justify encoder correctness. Though recent advances showed promising progress, there is still no complete method that decides whether a decoder exists for a finite state transition system. The quest for completely automatic decoder synthesis remains. This paper presents a complete and practical approach to automating decoder synthesis via incremental Boolean satisfiability solving and Craig interpolation. Experiments show that, for decoder-existent cases, our method synthesizes decoders effectively; for decoder-nonexistent cases, our method concludes the nonexistence instantly while prior methods may fail. Case studies are also conducted in synthesizing decoders for linear error-correcting codes.", "paper_title": "Automatic Decoder Synthesis: Methods and Case Studies", "paper_id": "WOS:000307974800002"}