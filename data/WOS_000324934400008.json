{"auto_keywords": [{"score": 0.0390076250683378, "phrase": "sspl"}, {"score": 0.010468888495893074, "phrase": "big_data"}, {"score": 0.00481495049065317, "phrase": "efficient_skyline"}, {"score": 0.004706306940907275, "phrase": "skyline"}, {"score": 0.004642292792558686, "phrase": "important_operation"}, {"score": 0.004475798524102238, "phrase": "interesting_points"}, {"score": 0.004414907432703781, "phrase": "potentially_huge_data_space"}, {"score": 0.004025732030409105, "phrase": "candidate_positional_index"}, {"score": 0.003956558420993431, "phrase": "existing_algorithms"}, {"score": 0.0037284065559949064, "phrase": "novel_skyline_algorithm"}, {"score": 0.003611034322786669, "phrase": "sorted_positional_index_lists"}, {"score": 0.003561865840737996, "phrase": "low_space_overhead"}, {"score": 0.003433987036569199, "phrase": "sorted_positional_index_list"}, {"score": 0.0029666322924554274, "phrase": "scan_depth"}, {"score": 0.0028995712226514746, "phrase": "positional_index_lists"}, {"score": 0.0027954035431845344, "phrase": "round-robin_fashion"}, {"score": 0.002610043728801011, "phrase": "skyline_result"}, {"score": 0.00243694486220507, "phrase": "involved_lists"}, {"score": 0.0023386327847292805, "phrase": "obtained_candidate_positional_indexes"}, {"score": 0.0023067494372458427, "phrase": "skyline_results"}, {"score": 0.002275299774554847, "phrase": "selective_and_sequential_scan"}, {"score": 0.0022136780933978612, "phrase": "experimental_results"}, {"score": 0.002193509835371438, "phrase": "synthetic_and_real_data_sets"}, {"score": 0.0021340985236583034, "phrase": "significant_advantage"}, {"score": 0.0021049977753042253, "phrase": "existing_skyline_algorithms"}], "paper_keywords": ["Big data", " skyline", " pruning", " SSPL"], "paper_abstract": "Skyline is an important operation in many applications to return a set of interesting points from a potentially huge data space. Given a table, the operation finds all tuples that are not dominated by any other tuples. It is found that the existing algorithms cannot process skyline on big data efficiently. This paper presents a novel skyline algorithm SSPL on big data. SSPL utilizes sorted positional index lists which require low space overhead to reduce I/O cost significantly. The sorted positional index list L-j is constructed for each attribute A(j) and is arranged in ascending order of A(j). SSPL consists of two phases. In phase 1, SSPL computes scan depth of the involved sorted positional index lists. During retrieving the lists in a round-robin fashion, SSPL performs pruning on any candidate positional index to discard the candidate whose corresponding tuple is not skyline result. Phase 1 ends when there is a candidate positional index seen in all of the involved lists. In phase 2, SSPL exploits the obtained candidate positional indexes to get skyline results by a selective and sequential scan on the table. The experimental results on synthetic and real data sets show that SSPL has a significant advantage over the existing skyline algorithms.", "paper_title": "Efficient Skyline Computation on Big Data", "paper_id": "WOS:000324934400008"}