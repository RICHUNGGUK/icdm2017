{"auto_keywords": [{"score": 0.0368031497065842, "phrase": "web_services"}, {"score": 0.0093968048622332, "phrase": "web_services_style"}, {"score": 0.00481495049065317, "phrase": "web_services_software_architectures"}, {"score": 0.004694700982410345, "phrase": "recognized_obstacle"}, {"score": 0.004655285779819366, "phrase": "successful_software_reuse"}, {"score": 0.004596779715291598, "phrase": "architectural_mismatch"}, {"score": 0.004333283735537634, "phrase": "differing_and_incompatible_assumptions"}, {"score": 0.0041194351307673556, "phrase": "mismatch_detection"}, {"score": 0.003982741546775355, "phrase": "existing_literature"}, {"score": 0.003850566273995209, "phrase": "generic_rules"}, {"score": 0.0036144035798673967, "phrase": "main_trends"}, {"score": 0.003568932067237836, "phrase": "current_engineering"}, {"score": 0.003027178161479457, "phrase": "larger_system"}, {"score": 0.00284137141260141, "phrase": "corresponding_rules"}, {"score": 0.002770273247998903, "phrase": "architectural_mismatches"}, {"score": 0.0027469703311742647, "phrase": "design_time"}, {"score": 0.0025892330566358503, "phrase": "soa_development"}, {"score": 0.002461241017147324, "phrase": "potential_mismatches"}, {"score": 0.002233301265743633, "phrase": "acme_studio"}, {"score": 0.00214995338990007, "phrase": "small_case_study"}], "paper_keywords": ["software architecture", " architectural style", " architectural mismatch", " acme", " web services"], "paper_abstract": "Architectural mismatches are a recognized obstacle to successful software reuse. An architectural mismatch occurs when two or more software components are connected to form a system and those components make differing and incompatible assumptions about their interactions or the environment in which they exist. Mismatch detection and avoidance has been previously discussed in existing literature. These typically take the form of generic rules and guidelines. Service Oriented Architectures (SOA) are becoming one of the main trends in the current engineering of software. Using web services, as defined by W3C Web Services Architecture Working Group, supports the engineering of SOA by providing rules and restrictions that apply to the definition of web services and how they can interact with other components to form a larger system. We see this as an opportunity to de. ne a web services style with corresponding rules to avoid the introduction of architectural mismatches at design time. In this paper we describe the development of an environment which supports SOA development by enabling their description, as well as facilitating the detection of potential mismatches between web services. Here we de. ne a web services style in the architectural description language ACME & Armani, and present the environment that we developed in ACME Studio using our web services style definition. This is accompanied by a small case study illustrating the use of our environment.", "paper_title": "Mismatch avoidance in web services software architectures", "paper_id": "WOS:000257026500006"}