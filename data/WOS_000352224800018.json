{"auto_keywords": [{"score": 0.04862539438503134, "phrase": "embedded_systems"}, {"score": 0.00481495049065317, "phrase": "linked_dynamic_data_structures"}, {"score": 0.004611554879923759, "phrase": "software_applications"}, {"score": 0.004555028829645471, "phrase": "dynamic_memory"}, {"score": 0.004362564831572539, "phrase": "system's_heap"}, {"score": 0.00405127920820053, "phrase": "complex_memory_organizations"}, {"score": 0.003952513974962462, "phrase": "dynamic_memory_management"}, {"score": 0.0037621210719690594, "phrase": "data_objects"}, {"score": 0.0037159680715717056, "phrase": "physical_memory_modules"}, {"score": 0.003558830226733501, "phrase": "hardware-controlled_cache_memories"}, {"score": 0.0033873366086549735, "phrase": "linked_data_structures"}, {"score": 0.003204232566468624, "phrase": "dynamic_data"}, {"score": 0.003145417398038261, "phrase": "multilevel_memory_subsystem"}, {"score": 0.0029937855454238507, "phrase": "available_memories"}, {"score": 0.0027457584014804574, "phrase": "cache_memories"}, {"score": 0.0026953359825383646, "phrase": "resulting_data_placement"}, {"score": 0.0026458370516131255, "phrase": "exclusive_memory_model"}, {"score": 0.002565345470805401, "phrase": "existing_techniques"}, {"score": 0.002518227743688769, "phrase": "static_data"}, {"score": 0.0023819914954155905, "phrase": "energy_consumption"}, {"score": 0.0023527296826339225, "phrase": "execution_time"}, {"score": 0.0022117133940361025, "phrase": "automated_way"}, {"score": 0.0021049977753042253, "phrase": "multiple_configuration_knobs"}], "paper_keywords": ["Design", " Management", " Performance", " Reliability", " Design", " memory management", " embedded", " memory organization", " efficiency"], "paper_abstract": "Software applications use dynamic memory (allocated and deallocated in the system's heap) to handle dynamism in their working conditions. Embedded systems tend to include complex memory organizations but most techniques for dynamic memory management do not deal with the placement of data objects in physical memory modules. Additionally, the performance of hardware-controlled cache memories may be severely hindered when used with linked data structures. We therefore present a methodology to map dynamic data on the multilevel memory subsystem of embedded systems, taking advantage of any available memories (e.g., on-chip SRAMs) and avoiding interference with the cache memories. The resulting data placement uses an exclusive memory model and is compatible with existing techniques for managing static data. Our methodology helps the designer achieve reductions in energy consumption and execution time that can be obtained by an expert in an automated way while keeping control over the process through multiple configuration knobs.", "paper_title": "Placement of Linked Dynamic Data Structures over Heterogeneous Memories in Embedded Systems", "paper_id": "WOS:000352224800018"}