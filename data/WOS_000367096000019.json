{"auto_keywords": [{"score": 0.04978681999804711, "phrase": "hybrid_execution"}, {"score": 0.04325124255431723, "phrase": "process_vms"}, {"score": 0.00481495049065317, "phrase": "hardware_extension"}, {"score": 0.004741845603430361, "phrase": "process_virtual_machine"}, {"score": 0.004712994409041768, "phrase": "vm"}, {"score": 0.004669845451682529, "phrase": "typical_software"}, {"score": 0.004598933498016774, "phrase": "operating_systems"}, {"score": 0.004501453956464956, "phrase": "platform-independent_programming_environment"}, {"score": 0.004406031457123015, "phrase": "underlying_hardware"}, {"score": 0.00437913966678655, "phrase": "operating_system"}, {"score": 0.00399483173553482, "phrase": "direct_execution"}, {"score": 0.003970439654470374, "phrase": "host_machine_codes"}, {"score": 0.003910106508089187, "phrase": "bytecode_execution"}, {"score": 0.0038271712887391015, "phrase": "compiled_programming_language_execution"}, {"score": 0.0035233696341819437, "phrase": "additional_methodology"}, {"score": 0.0033961782274326948, "phrase": "process_vms_interpretation"}, {"score": 0.0033548062793973144, "phrase": "register-based_model"}, {"score": 0.0033241072942139568, "phrase": "new_technique"}, {"score": 0.003293688299319582, "phrase": "additional_decoder"}, {"score": 0.0032040860021574193, "phrase": "\"hybrid_execution"}, {"score": 0.003165046673308291, "phrase": "simple_instruction"}, {"score": 0.003088384809415812, "phrase": "native_processor"}, {"score": 0.0030601162942933665, "phrase": "complex_instruction"}, {"score": 0.0030043508031729277, "phrase": "\"extra_optimized_bytecode_software_handler"}, {"score": 0.002799810685137358, "phrase": "physical_registers"}, {"score": 0.0027403605798830984, "phrase": "virtual_registers"}, {"score": 0.0026441364840700484, "phrase": "mode"}, {"score": 0.0025537472239953807, "phrase": "switching_mode_overheads"}, {"score": 0.002538131851615233, "phrase": "native_mode"}, {"score": 0.0025226117209113737, "phrase": "bytecode_mode"}, {"score": 0.002499508839669243, "phrase": "experimental_results"}, {"score": 0.002461472107682778, "phrase": "execution_speed"}, {"score": 0.0024389277933858054, "phrase": "arithmetic_instructions"}, {"score": 0.002409188797323273, "phrase": "conditional_instructions"}, {"score": 0.002286781334850213, "phrase": "approximate_size"}, {"score": 0.00226583335721762, "phrase": "proposed_hardware_extension"}, {"score": 0.0021772489804440646, "phrase": "additional_power"}, {"score": 0.0021506938783242215, "phrase": "stated_results"}, {"score": 0.002124461969404541, "phrase": "logic_synthesis"}], "paper_keywords": ["register-base VM acceleration", " dalvik VM acceleration", " HW/SW co-designed VM", " dynamic languages"], "paper_abstract": "The Process Virtual Machine (VM) is typical software that runs applications inside operating systems. Its purpose is to provide a platform-independent programming environment that abstracts away details of the underlying hardware, operating system and allows bytecodes (portable code) to be executed in the same way on any other platforms. The Process VMs are implemented using an interpreter to interpret bytecode instead of direct execution of host machine codes. Thus, the bytecode execution is slower than those of the compiled programming language execution. Several techniques including our previous paper, the \"Fetch/Decode Hardware Extension\", have been proposed to speed up the interpretation of Process VMs. In this paper, we propose an additional methodology, the \"Hardware Extension with Hybrid Execution\" to further enhance the performance of Process VMs interpretation and focus on Register-based model. This new technique provides an additional decoder which can classify bytecodes into either simple or complex instructions. With \"Hybrid Execution\", the simple instruction will be directly executed on hardware of native processor. The complex instruction will be emulated by the \"extra optimized bytecode software handler\" of native processor. In order to eliminate the overheads of retrieving and storing operand on memory, we utilize the physical registers instead of (low address) virtual registers. Moreover, the combination of 3 techniques: Delay scheduling, Mode predictor HW and Branch/goto controller can eliminate all of the switching mode overheads between native mode and bytecode mode. The experimental results show the improvements of execution speed on the Arithmetic instructions, loop & conditional instructions and method invocation & return instructions can be achieved up to 16.9x, 16.1x and 3.1x respectively. The approximate size of the proposed hardware extension is 0.04mm(2) (or equivalent to 14.81 k gates) and consumes an additional power of only 0.24mW. The stated results are obtained from logic synthesis using the TSMC 90 nm technology @ 200 MHz.", "paper_title": "Register-Based Process Virtual Machine Acceleration Using Hardware Extension with Hybrid Execution", "paper_id": "WOS:000367096000019"}