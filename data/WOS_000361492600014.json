{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_transformation_verification"}, {"score": 0.00595018863195341, "phrase": "target_model"}, {"score": 0.004786920391043703, "phrase": "similarity_and_graph_comparison_algorithm"}, {"score": 0.0047313464483758364, "phrase": "software_development"}, {"score": 0.00453599936013727, "phrase": "property_information"}, {"score": 0.00447601516255334, "phrase": "independently-designed_model"}, {"score": 0.004424034641288626, "phrase": "development_environment"}, {"score": 0.004392606979549849, "phrase": "graph_comparison_algorithm"}, {"score": 0.004309265406782465, "phrase": "desired_development_environment"}, {"score": 0.0042344044308802445, "phrase": "reusable_unit"}, {"score": 0.004197460986909444, "phrase": "software_model"}, {"score": 0.004088545435134949, "phrase": "traditional_research_methods"}, {"score": 0.003867768665068189, "phrase": "formal_representation"}, {"score": 0.0038005481380011677, "phrase": "abstract_syntax_tree"}, {"score": 0.0036803189470937235, "phrase": "uml_design_model"}, {"score": 0.0036588697886897757, "phrase": "additional_steps"}, {"score": 0.00356387956365613, "phrase": "software_problem"}, {"score": 0.0030433912290976457, "phrase": "verification_meta_information_and_transformation_similarity"}, {"score": 0.0028788884457126643, "phrase": "source_model"}, {"score": 0.0028454025430602542, "phrase": "verification_meta_model"}, {"score": 0.00282880552067024, "phrase": "uml_model"}, {"score": 0.002812307441013208, "phrase": "rdbms"}, {"score": 0.002723253153997129, "phrase": "model-based_architecture"}, {"score": 0.00261397020353106, "phrase": "converted_software_model"}, {"score": 0.0025164138447059023, "phrase": "transformation_profiles"}, {"score": 0.002487133563066256, "phrase": "system_structure_models"}, {"score": 0.0024653965987479053, "phrase": "test-based_meta-model"}, {"score": 0.002325247976657323, "phrase": "existing_methods"}, {"score": 0.0022914708977177047, "phrase": "graph_comparison"}, {"score": 0.0021802485562376047, "phrase": "new_verification_method"}, {"score": 0.002136032060238817, "phrase": "additional_structural_attributes"}, {"score": 0.0021049977753042253, "phrase": "transformation_profile"}], "paper_keywords": ["MDA", " Model transformation verification", " Graph comparison algorithm"], "paper_abstract": "Regarding the software development, MDA (Model Driven Architecture) of OMG can be regarded as the concept of making an independently-designed model according to the development environment and language and reusing it according to the desired development environment and language by expanding the reusable unit into the software model when developing software. The problem with these traditional research methods, but the first model, design model for checking the information with the model by defining a formal representation in the form of an abstract syntax tree, as you've shown how to perform validation of UML design model. Additional steps need to define more complex due to a software problem that is not the way to the model suitable for model transformation verification. In this paper, as defined in the verification based meta model for input and target model. And we also suggest how to perform model transformation verification using property matching based transformation similarity and graph comparison algorithm. This paper proposes model transformation verification using verification meta information and transformation similarity by property matching. In addition, in order to support verification of the target model generated from the source model, we define verification meta model for UML model, RDBMS model and RT-UML model. Recent researches from model-based architecture did partial tests focusing on phrase-correctness about the re-use in the perspective of converted software model. To overcome such limitations, this study suggests the ways to define transformation profiles using property information of system structure models as the test-based meta-model and transformation rules, improve graph comparison algorithm, and even supports the correctness of meanings. There were problems in existing methods of model transformation verification such as graph comparison or the one considering only syntax-correctness through pattern-matching. To remedy such problems, this study suggests a new verification method by defining the meta-model which has additional structural attributes and property information and the transformation profile, and using graph comparison algorithm which checks whether the information acquired from transformation is correct.", "paper_title": "Model transformation verification using similarity and graph comparison algorithm", "paper_id": "WOS:000361492600014"}