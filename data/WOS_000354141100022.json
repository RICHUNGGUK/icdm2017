{"auto_keywords": [{"score": 0.04960605069862425, "phrase": "computational_dynamics"}, {"score": 0.04310301642868538, "phrase": "runge-kutta"}, {"score": 0.03387430875594775, "phrase": "distributed_program"}, {"score": 0.033634003009478615, "phrase": "test_data"}, {"score": 0.030660592326805094, "phrase": "gpu"}, {"score": 0.02867716773740715, "phrase": "parallelization_methods"}, {"score": 0.00481495049065317, "phrase": "ordinary_differential_equations"}, {"score": 0.004687212342284681, "phrase": "numerical_simulations"}, {"score": 0.004345085569121329, "phrase": "different_schemes"}, {"score": 0.004313326109637545, "phrase": "numerical_integration"}, {"score": 0.00429228165125874, "phrase": "ordinary_differential_systems"}, {"score": 0.004178351419209898, "phrase": "adapted_methods"}, {"score": 0.0041579627441997, "phrase": "low_memory_storage"}, {"score": 0.004077394032903726, "phrase": "good_results"}, {"score": 0.004057495982111461, "phrase": "low_precision_studies"}, {"score": 0.004017989546119125, "phrase": "taylor_series_method"}, {"score": 0.003988611346253368, "phrase": "powerful_technique"}, {"score": 0.003969144836240849, "phrase": "high_precision"}, {"score": 0.0038448988429199086, "phrase": "fast_chaos_indicator"}, {"score": 0.003826137856343621, "phrase": "fli"}, {"score": 0.0037888687452790953, "phrase": "phase_shift_indicator"}, {"score": 0.003770373393393271, "phrase": "small_neuron_networks"}, {"score": 0.0037519679864796906, "phrase": "central_pattern_generators"}, {"score": 0.0036256123915754303, "phrase": "numerical_ode_methods"}, {"score": 0.003581520463987734, "phrase": "high_computational_time_reduction"}, {"score": 0.003564033661012765, "phrase": "real-time_simulations"}, {"score": 0.003496893998782998, "phrase": "program"}, {"score": 0.0034693659976716197, "phrase": "ocl-tides"}, {"score": 0.0034524248924699985, "phrase": "ocl-rk_catalogue"}, {"score": 0.0033607117763948873, "phrase": "cpc_program_library"}, {"score": 0.0033442994551945503, "phrase": "queen's_university"}, {"score": 0.003327967512310067, "phrase": "belfast"}, {"score": 0.0033117140765604207, "phrase": "n._ireland"}, {"score": 0.003279445150771808, "phrase": "standard_cpc"}, {"score": 0.0028314411538390015, "phrase": "linux"}, {"score": 0.002803978526834355, "phrase": "windows"}, {"score": 0.002689430273401131, "phrase": "opencl._ram"}, {"score": 0.002663208600887875, "phrase": "supplementary_material"}, {"score": 0.0026243534128245886, "phrase": "fast_lyapunov_indicator"}, {"score": 0.0024624103660827695, "phrase": "ode_problems"}, {"score": 0.0024503741901918527, "phrase": "generic_opencl_environment"}, {"score": 0.002432429878431855, "phrase": "large_scale_independent_sets"}, {"score": 0.002344655708000408, "phrase": "taylor_series"}, {"score": 0.002321787726770895, "phrase": "large_sets"}, {"score": 0.0023104373174118458, "phrase": "independent_sets"}, {"score": 0.002299142268368128, "phrase": "initial_conditions"}, {"score": 0.0021945557437000624, "phrase": "opencl."}, {"score": 0.002157223877108711, "phrase": "sample_tests"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel computing", " Runge-Kutta method", " Taylor series method", " GPU", " OpenCL", " Computational dynamics"], "paper_abstract": "In many physical problems the use of numerical simulations presents the only path to obtain insight into the behavior and evolution of the system of interest. GPU, CPU and MIC technologies are frequently employed for simulations on computational dynamics and we present results comparing different schemes for the numerical integration of ordinary differential systems (ODEs) in these architectures. The use of adapted methods with low memory storage (Low storage Runge-Kutta methods) gives good results for low precision studies, whereas the Taylor series method provides a powerful technique for high precision. We show how the computation of several dynamics indicators, such as a fast chaos indicator (FLI) or a phase shift indicator in small neuron networks (Central Pattern Generators), can be efficiently computed on these architectures by means of the numerical ODE methods executed through OpenCL. This high computational time reduction allows real-time simulations or generating video media. Program summary Program title: OCL-TIDES, OCL-RK Catalogue identifier: AEVW_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEVW_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 1836 No. of bytes in distributed program, including test data, etc.: 10,617 Distribution format: tar.gz Programming language: C and OpenCL. Computer: Any computer with a CPU or a GPU or a Xeon Phi. Operating system: Linux, MacOS, Windows. Has the code been vectorized or parallelized?: Yes, using the parallelization methods from OpenCL. RAM: Problem dependent Supplementary material: A video with a Fast Lyapunov indicator simulation is available (see Appendix A). Classification: 4.3, 6.5. External routines: OpenCL version 1.2 Nature of problem: Solution of ODE problems in generic OpenCL environment oriented to large scale independent sets of initial conditions. Solution method: OpenCL parallel integrator based in Runge-Kutta or Taylor Series Method suitable for large sets of independent sets of initial conditions. Both are able to run either on CPU or in a GPU, using the parallelization methods from OpenCL. Running time: Problem dependent, sample tests take less than a minute to run. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "OpenCL parallel integration of ordinary differential equations: Applications in computational dynamics", "paper_id": "WOS:000354141100022"}