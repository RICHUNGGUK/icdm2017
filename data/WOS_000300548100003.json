{"auto_keywords": [{"score": 0.049483572884790016, "phrase": "javascript"}, {"score": 0.008713731228435096, "phrase": "program_logic"}, {"score": 0.004522796947899013, "phrase": "client-side_web_programming"}, {"score": 0.004117329555194574, "phrase": "buggy_programs"}, {"score": 0.003990385737207714, "phrase": "adequate_static-analysis_tools"}, {"score": 0.0038673406001234535, "phrase": "logical_reasoning"}, {"score": 0.0036097844103129043, "phrase": "program_behaviour"}, {"score": 0.00347657813672945, "phrase": "module_boundaries"}, {"score": 0.003327349929456035, "phrase": "security_contracts"}, {"score": 0.003125175084962886, "phrase": "broad_subset"}, {"score": 0.002953711377604328, "phrase": "prototype_inheritance"}, {"score": 0.0028091907694771613, "phrase": "separation_logic"}, {"score": 0.002756832447586547, "phrase": "tractable_reasoning"}, {"score": 0.002722468694023035, "phrase": "javascript_code"}, {"score": 0.002655017467085696, "phrase": "easy_programs"}, {"score": 0.0025569530630374995, "phrase": "hard_programs"}, {"score": 0.002447101794397243, "phrase": "strong_soundness_result"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_javascript_code"}], "paper_keywords": ["Reliability", " Theory", " Verification", " JavaScript", " Separation Logic", " Web"], "paper_abstract": "JavaScript has become the most widely used language for client-side web programming. The dynamic nature of JavaScript makes understanding its code notoriously difficult, leading to buggy programs and a lack of adequate static-analysis tools. We believe that logical reasoning has much to offer JavaScript: a simple description of program behaviour, a clear understanding of module boundaries, and the ability to verify security contracts. We introduce a program logic for reasoning about a broad subset of JavaScript, including challenging features such as prototype inheritance and with. We adapt ideas from separation logic to provide tractable reasoning about JavaScript code: reasoning about easy programs is easy; reasoning about hard programs is possible. We prove a strong soundness result. All libraries written in our subset and proved correct with respect to their specifications will be well-behaved, even when called by arbitrary JavaScript code.", "paper_title": "Towards a Program Logic for JavaScript", "paper_id": "WOS:000300548100003"}