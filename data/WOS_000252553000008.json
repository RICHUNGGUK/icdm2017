{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "scientific_workflows"}, {"score": 0.009194397341409012, "phrase": "performance_overheads"}, {"score": 0.009122992191960212, "phrase": "grid_computing"}, {"score": 0.004777392826700429, "phrase": "grid_environments"}, {"score": 0.004648222388468414, "phrase": "great_interest"}, {"score": 0.00459393336391459, "phrase": "grid_community"}, {"score": 0.004504850679320975, "phrase": "workflow_model"}, {"score": 0.004469700997700534, "phrase": "attractive_paradigm"}, {"score": 0.0044002186469797476, "phrase": "wide-area_grid_infrastructures"}, {"score": 0.0043148760739240575, "phrase": "grid_workflow_execution"}, {"score": 0.00423118169200579, "phrase": "pure_best_effort"}, {"score": 0.004084584884062157, "phrase": "grid_processors"}, {"score": 0.004036852178449883, "phrase": "appropriate_optimization"}, {"score": 0.004005339423663657, "phrase": "local_matchmaking_heuristics"}, {"score": 0.003943047070755799, "phrase": "overall_execution_time"}, {"score": 0.003806395038279074, "phrase": "effective_results"}, {"score": 0.003732526540522333, "phrase": "dynamic_and_unpredictable_grid_environments"}, {"score": 0.003674461410107989, "phrase": "severe_performance_losses"}, {"score": 0.003561017335579207, "phrase": "completion_time"}, {"score": 0.0035056109035307716, "phrase": "efficient_use"}, {"score": 0.0034782306784111494, "phrase": "high-performance_resources"}, {"score": 0.003357633232360232, "phrase": "new_systematic_approach"}, {"score": 0.003279559293934528, "phrase": "middleware_developers"}, {"score": 0.0032158817866929563, "phrase": "performance_losses"}, {"score": 0.003128798520531889, "phrase": "dynamic_grid_environments"}, {"score": 0.0030680392468327147, "phrase": "ideal_model"}, {"score": 0.0030321497870310077, "phrase": "lowest_execution_time"}, {"score": 0.0028701222153940283, "phrase": "real_measured_grid_execution_time"}, {"score": 0.0026431267487109543, "phrase": "individual_activities"}, {"score": 0.002622465142275264, "phrase": "larger_workflow_regions"}, {"score": 0.0025917743904900576, "phrase": "well-known_parallel_processing_metrics"}, {"score": 0.0024436119167523156, "phrase": "distributed_online_tool"}, {"score": 0.0023680783509308525, "phrase": "real_time"}, {"score": 0.002340357706078868, "phrase": "event_correlation_techniques"}, {"score": 0.0022948742034852917, "phrase": "quality-of-service_parameters"}, {"score": 0.0022414566728770767, "phrase": "workflow_execution"}, {"score": 0.0022239279632673206, "phrase": "traditional_best_effort_practices"}, {"score": 0.0021551702945512494, "phrase": "online_performance_analysis"}, {"score": 0.0021049977753042253, "phrase": "austrian_grid_environment"}], "paper_keywords": ["distributed systems", " distributed applications", " distributed/Internet-based software engineering tools and techniques", " performance measurements", " monitors", " performance evaluation", " performance attributes"], "paper_abstract": "Scientific workflows are a topic of great interest in the Grid community that sees in the workflow model an attractive paradigm for programming distributed wide-area Grid infrastructures. Traditionally, the Grid workflow execution is approached as a pure best effort scheduling problem that maps the activities onto the Grid processors based on appropriate optimization or local matchmaking heuristics such that the overall execution time is minimized. Even though such heuristics often deliver effective results, the execution in dynamic and unpredictable Grid environments is prone to severe performance losses that must be understood for minimizing the completion time or for the efficient use of high-performance resources. In this paper, we propose a new systematic approach to help the scientists and middleware developers understand the most severe sources of performance losses that occur when executing scientific workflows in dynamic Grid environments. We introduce an ideal model for the lowest execution time that can be achieved by a workflow and explain the difference to the real measured Grid execution time based on a hierarchy of performance overheads for Grid computing. We describe how to systematically measure and compute the overheads from individual activities to larger workflow regions and adjust well-known parallel processing metrics to the scope of Grid computing, including speedup and efficiency. We present a distributed online tool for computing and analyzing the performance overheads in real time based on event correlation techniques and introduce several performance contracts as quality-of-service parameters to be enforced during the workflow execution beyond traditional best effort practices. We illustrate our method through postmortem and online performance analysis of two real-world workflow applications executed in the Austrian Grid environment.", "paper_title": "Overhead analysis of scientific workflows in grid environments", "paper_id": "WOS:000252553000008"}