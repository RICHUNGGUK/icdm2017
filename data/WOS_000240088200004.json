{"auto_keywords": [{"score": 0.03385610294050872, "phrase": "instance_space"}, {"score": 0.011774412479775058, "phrase": "learning_algorithm"}, {"score": 0.00806796266754588, "phrase": "decision_tree"}, {"score": 0.00481495049065317, "phrase": "local_drift_detection"}, {"score": 0.0046683172874085015, "phrase": "machine_learning"}, {"score": 0.004446823283475876, "phrase": "stationary_probability_distribution"}, {"score": 0.0038602215057106917, "phrase": "probability_distribution"}, {"score": 0.0037260386566859197, "phrase": "drift_detection_method"}, {"score": 0.0036445446531633368, "phrase": "online_error-rate"}, {"score": 0.00354909279546064, "phrase": "significant_deviations"}, {"score": 0.003053402354907241, "phrase": "decision_models"}, {"score": 0.003013129637451091, "phrase": "different_functions"}, {"score": 0.002908306074124806, "phrase": "decision_trees"}, {"score": 0.0028826733506942554, "phrase": "rule_learners"}, {"score": 0.0026384167183586015, "phrase": "fast_model_adaptation"}, {"score": 0.002425524064992056, "phrase": "linear_model"}, {"score": 0.0023101951336207955, "phrase": "experimental_results"}, {"score": 0.002279702500235741, "phrase": "controlled_experiments"}, {"score": 0.0022595974985992664, "phrase": "artificial_data"}, {"score": 0.0022297712188622293, "phrase": "real-world_problem"}, {"score": 0.002200337772403983, "phrase": "good_performance"}, {"score": 0.0021331586055770447, "phrase": "decision_model"}, {"score": 0.0021049977753042253, "phrase": "new_concept"}], "paper_keywords": [""], "paper_abstract": "Most of the work in Machine Learning assume that examples are generated at random according to some stationary probability distribution. In this work we study the problem of learning when the distribution that generates the examples changes over time. We present a method for detection of changes in the probability distribution of examples. The idea behind the drift detection method is to monitor the online error-rate of a learning algorithm looking for significant deviations. The method can be used as a wrapper over any learning algorithm. In most problems, a change affects only some regions of the instance space, not the instance space as a whole. In decision models that fit different functions to regions of the instance space, like Decision Trees and Rule Learners, the method can be used to monitor the error in regions of the instance space, with advantages of fast model adaptation. In this work we present experiments using the method as a wrapper over a decision tree and a linear model, and in each internal-node of a decision tree. The experimental results obtained in controlled experiments using artificial data and a real-world problem show a good performance detecting drift and in adapting the decision model to the new concept.", "paper_title": "Learning with local drift detection", "paper_id": "WOS:000240088200004"}