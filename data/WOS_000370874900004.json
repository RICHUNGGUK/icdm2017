{"auto_keywords": [{"score": 0.043039693183724616, "phrase": "tbtso"}, {"score": 0.004814957642010738, "phrase": "tso"}, {"score": 0.004766090327062509, "phrase": "fence-free_asymmetric_synchronization"}, {"score": 0.004622450915803531, "phrase": "temporally_bounded_total_store"}, {"score": 0.004437613070853689, "phrase": "nonblocking_fence-free_solutions"}, {"score": 0.004195418010131832, "phrase": "memory_reclamation"}, {"score": 0.004152818376630929, "phrase": "biased_locking"}, {"score": 0.0040481944502103505, "phrase": "tso_memory_model"}, {"score": 0.003788296551609616, "phrase": "store_buffer"}, {"score": 0.0036553070575015344, "phrase": "devising_fence-free_algorithms"}, {"score": 0.003509006038574667, "phrase": "performance-critical_fast_path"}, {"score": 0.00342054627009158, "phrase": "infrequently_executed_slow_path"}, {"score": 0.0032336801561165113, "phrase": "fence-free_version"}, {"score": 0.0031845067058084613, "phrase": "hazard_pointers_memory_reclamation_scheme"}, {"score": 0.0029196116767956273, "phrase": "unmanaged_environments"}, {"score": 0.0028170314398963704, "phrase": "safe_points"}, {"score": 0.002788388542538351, "phrase": "similar_mechanisms"}, {"score": 0.0026091594819333654, "phrase": "modest_modifications"}, {"score": 0.0025826247025542213, "phrase": "existing_tso_architectures"}, {"score": 0.002479150189700726, "phrase": "proprietary_implementation_details"}, {"score": 0.002453934333239467, "phrase": "commercial_hardware"}, {"score": 0.00235560370536971, "phrase": "starting_point"}, {"score": 0.002261204313587616, "phrase": "hardware_tbtso_implementation"}, {"score": 0.0021817065300196634, "phrase": "os_support"}, {"score": 0.002126635713519053, "phrase": "tbtso_algorithms"}], "paper_keywords": ["TSO", " bounded TSO", " hazard pointers", " biased locks", " memory fences"], "paper_abstract": "This paper introduces a temporally bounded total store ordering (TBTSO) memory model, and shows that it enables nonblocking fence-free solutions to asymmetric synchronization problems, such as those arising in memory reclamation and biased locking. TBTSO strengthens the TSO memory model by bounding the time it takes a store to drain from the store buffer into memory. This bound enables devising fence-free algorithms for asymmetric problems, which require a performance-critical fast path to synchronize with an infrequently executed slow path. We demonstrate this by constructing (1) a fence-free version of the hazard pointers memory reclamation scheme, and (2) a fence-free biased lock algorithm which is compatible with unmanaged environments as it does not rely on safe points or similar mechanisms. We further argue that TBTSO can be implemented in hardware with modest modifications to existing TSO architectures. However, our design makes assumptions about proprietary implementation details of commercial hardware; it thus best serves as a starting point for a discussion on the feasibility of hardware TBTSO implementation. We also show how minimal OS support enables the adaptation of TBTSO algorithms to x86 systems.", "paper_title": "Temporally Bounding TSO for Fence-Free Asymmetric Synchronization", "paper_id": "WOS:000370874900004"}