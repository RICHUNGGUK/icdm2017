{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "feature_models"}, {"score": 0.004759635663291431, "phrase": "software_product_lines"}, {"score": 0.004518442937844318, "phrase": "bootstrapping_existing_software_products"}, {"score": 0.004314285113050873, "phrase": "existing_spl"}, {"score": 0.004215677131963292, "phrase": "additional_software_product"}, {"score": 0.004167218012926657, "phrase": "program_refactorings"}, {"score": 0.0037121208432871118, "phrase": "traditional_definition"}, {"score": 0.0032122679403131537, "phrase": "fm_refactorings"}, {"score": 0.0029967610945411593, "phrase": "refactoring_catalogs"}, {"score": 0.0026691455928407022, "phrase": "special_fm_refactorings"}, {"score": 0.0021049977753042253, "phrase": "theorem_prover"}], "paper_keywords": ["feature models", " refactoring", " algebraic laws", " software product lines"], "paper_abstract": "Software Product Lines (SPL) may be adopted by either bootstrapping existing software products into a SPL, or extending an existing SPL to encompass an additional software product. Program refactorings are usually applied for carrying out those tasks. The notion of SPL refactoring is an extension of the traditional definition of refactoring; it involves not only program refactorings, but also Feature Model ( FM) refactorings, in order to improve configurability. However, FM refactorings are hard to define, due to the incompleteness of the refactoring catalogs developed as of today. In this paper, we propose a complete, sound catalog of algebraic laws, making up special FM refactorings that preserve configurability. This catalog is also defined as minimal, as one law cannot be derived from another one in the same catalog. In addition, a theory for FMs is presented, in the context of a theorem prover.", "paper_title": "Algebraic Laws for Feature Models", "paper_id": "WOS:000264754900011"}