{"auto_keywords": [{"score": 0.03515444910968952, "phrase": "batched_factorizations"}, {"score": 0.00481495049065317, "phrase": "batched_linear_solvers"}, {"score": 0.004773476989344654, "phrase": "accelerated_hardware_platforms"}, {"score": 0.003945879572348638, "phrase": "floating-point_operation"}, {"score": 0.00374610869916551, "phrase": "main_one-sided_factorizations"}, {"score": 0.0034953361767153285, "phrase": "small_dense_matrices"}, {"score": 0.0031502008922533894, "phrase": "batched_blas_routines"}, {"score": 0.0031230216871739776, "phrase": "gpu-contained_execution"}, {"score": 0.0029776681204750285, "phrase": "lapack"}, {"score": 0.0029392020223716966, "phrase": "hybrid_magma_algorithms"}, {"score": 0.002913837945508097, "phrase": "large-matrix_factorizations"}, {"score": 0.002814545518256278, "phrase": "straightforward_approach"}, {"score": 0.002754208576828914, "phrase": "gpu's_symmetric_multiprocessors"}, {"score": 0.002718627370925435, "phrase": "single_problem"}, {"score": 0.002558549084795168, "phrase": "tracing_tools"}, {"score": 0.0024183363693242943, "phrase": "better_energy_efficiency"}, {"score": 0.0023460526501572474, "phrase": "mkl"}, {"score": 0.0022857899334246946, "phrase": "intel_sandy_bridge"}, {"score": 0.002227083991228041, "phrase": "batched_lu_factorization"}, {"score": 0.002188784900536406, "phrase": "nvidia's_cublas_library"}], "paper_keywords": ["batched factorization", " numerical linear algebra", " hardware accelerators", " numerical software libraries", " one-sided factorization algorithms"], "paper_abstract": "As hardware evolves, an increasingly effective approach to develop energy efficient, high-performance solvers, is to design them to work on many small and independent problems. Indeed, many applications already need this functionality, especially for GPUs, which are known to be currently about four to five times more energy efficient than multicore CPUs for every floating-point operation. In this paper, we describe the development of the main one-sided factorizations: LU, QR, and Cholesky; that are needed for a set of small dense matrices to work in parallel. We refer to such algorithms as batched factorizations. Our approach is based on representing the algorithms as a sequence of batched BLAS routines for GPU-contained execution. Note that this is similar in functionality to the LAPACK and the hybrid MAGMA algorithms for large-matrix factorizations. But it is different from a straightforward approach, whereby each of GPU's symmetric multiprocessors factorizes a single problem at a time. We illustrate how our performance analysis together with the profiling and tracing tools guided the development of batched factorizations to achieve up to 2-fold speedup and 3-fold better energy efficiency compared to our highly optimized batched CPU implementations based on the MKL library on a two-sockets, Intel Sandy Bridge server. Compared to a batched LU factorization featured in the NVIDIA's CUBLAS library for GPUs, we achieves up to 2.5-fold speedup on the K40 GPU.", "paper_title": "Towards Batched Linear Solvers on Accelerated Hardware Platforms", "paper_id": "WOS:000367254800030"}