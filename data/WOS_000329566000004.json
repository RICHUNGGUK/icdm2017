{"auto_keywords": [{"score": 0.0365546744612873, "phrase": "girard"}, {"score": 0.01072817259131551, "phrase": "ludics"}, {"score": 0.00481495049065317, "phrase": "paths._ludics"}, {"score": 0.004667149874736771, "phrase": "primitive_notion"}, {"score": 0.004566384853664753, "phrase": "primary_logical_concepts"}, {"score": 0.003968375473736599, "phrase": "logical_formulas"}, {"score": 0.003798746478986171, "phrase": "particular_properties"}, {"score": 0.0033950003609696227, "phrase": "\"_useful\"_designs"}, {"score": 0.0027886573969044042, "phrase": "minimal_denotation"}, {"score": 0.002652693384545025, "phrase": "constructive_way"}, {"score": 0.0024457118327295456, "phrase": "alternative_definition"}, {"score": 0.0022268288922192704, "phrase": "game_semantics"}, {"score": 0.0021991611806433634, "phrase": "easier_handling"}], "paper_keywords": ["Ludics", " Linear Logic", " Incarnation", " Normalization", " Game Semantics"], "paper_abstract": "Ludics is a reconstruction of logic with interaction as a primitive notion, in the sense that the primary logical concepts are no more formulas and proofs but cut-elimination interpreted as an interaction between objects called designs. When the interaction between two designs goes well, such two designs are said to be orthogonal. A behaviour is a set of designs closed under bi-orthogonality. Logical formulas are then denoted by behaviours. Finally proofs are interpreted as designs satisfying particular properties. In that way, designs are more general than proofs and we may notice in particular that they are not typed objects. Incarnation is introduced by Girard in Ludics as a characterization of \" useful\" designs in a behaviour. The incarnation of a design is defined as its subdesign that is the smallest one in the behaviour ordered by inclusion. It is useful in particular because being \" incarnated\" is one of the conditions for a design to denote a proof of a formula. The computation of incarnation is important also as it gives a minimal denotation for a formula, and more generally for a behaviour. We give here a constructive way to capture the incarnation of the behaviour of a set of designs, without computing the behaviour itself. The method we follow uses an alternative definition of designs: rather than defining them as sets of chronicles, we consider them as sets of paths, a concept very close to that of play in game semantics that allows an easier handling of the interaction: the unfolding of interaction is a path common to two interacting designs.", "paper_title": "INCARNATION IN LUDICS AND MAXIMAL CLIQUES OF PATHS", "paper_id": "WOS:000329566000004"}