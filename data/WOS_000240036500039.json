{"auto_keywords": [{"score": 0.040984823331088625, "phrase": "lms"}, {"score": 0.004724365740062236, "phrase": "fpga._adaptive_filters"}, {"score": 0.0047079130159984025, "phrase": "nlms"}, {"score": 0.004462663711734448, "phrase": "digital_signal_processing"}, {"score": 0.0043786774510943625, "phrase": "digital_communications"}, {"score": 0.004296264970612285, "phrase": "digital_video_broadcasting"}, {"score": 0.00398177607914381, "phrase": "floating-point-like_implementation"}, {"score": 0.003725470458263889, "phrase": "fpga_hardware"}, {"score": 0.0035525230119401153, "phrase": "optimized_cores"}, {"score": 0.00332375606483146, "phrase": "logarithmic_arithmetic"}, {"score": 0.002937153116494391, "phrase": "efficient_use"}, {"score": 0.0027741761880779535, "phrase": "resulting_cores"}, {"score": 0.0023152577218214804, "phrase": "adaptive_filters"}, {"score": 0.0021454671611847507, "phrase": "sampling_rate"}], "paper_keywords": [""], "paper_abstract": "Adaptive filters are used in many applications of digital signal processing. Digital communications and digital video broadcasting are just two examples. This paper deals with floating-point-like implementation of LMS and NLMS algorithms using FPGA hardware. We present an optimized cores for both algorithms, built using logarithmic arithmetic which provides very low cost multiplication and division. The designs are crafted to make efficient use of the pipelined logarithmic addition/subtraction units. The resulting cores can be clocked at more than 80 MHz on the one million gate Xilinx XC2V10004 FPGA performing 295 MFLOPS.They can be used to implement adaptive filters of orders 20 to 1022 with a sampling rate exceeding 70 kHz.", "paper_title": "Efficient floating-point implementation of high-order (N)LMS adaptive filters in FPGA", "paper_id": "WOS:000240036500039"}