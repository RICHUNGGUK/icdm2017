{"auto_keywords": [{"score": 0.04826168693518015, "phrase": "disjoint_path_pair"}, {"score": 0.03960583664970253, "phrase": "np"}, {"score": 0.030914073480278928, "phrase": "min-min_problem"}, {"score": 0.026045389384398668, "phrase": "cole"}, {"score": 0.025437686309752027, "phrase": "shared_path_protection"}, {"score": 0.004749106104067268, "phrase": "shortest_path"}, {"score": 0.0047003115977448905, "phrase": "disjoint_counterpart"}, {"score": 0.004588389551682397, "phrase": "important_component"}, {"score": 0.004556901872357751, "phrase": "survivable_networks"}, {"score": 0.004138010495069077, "phrase": "shorter_path"}, {"score": 0.004039423410198574, "phrase": "active_path"}, {"score": 0.0037060428445111694, "phrase": "single_link_cost"}, {"score": 0.003592859432554987, "phrase": "dual_link_cost"}, {"score": 0.0033075957452554368, "phrase": "optimal_solution"}, {"score": 0.0031845067058084613, "phrase": "open_question"}, {"score": 0.003151736708029235, "phrase": "computational_complexity"}, {"score": 0.0031193028729331667, "phrase": "restricted_version"}, {"score": 0.0030872017736888113, "phrase": "min-sum_problem"}, {"score": 0.0030554300179552415, "phrase": "undirected_network"}, {"score": 0.0030344301563232944, "phrase": "ordered_dual_cost_links"}, {"score": 0.0029928611380840757, "phrase": "msod"}, {"score": 0.0028616432465945097, "phrase": "novel_concept"}, {"score": 0.00276462370914216, "phrase": "so-called_trap_problem"}, {"score": 0.00271735110571002, "phrase": "divide-and-conquer_strategy"}, {"score": 0.0026616868981501006, "phrase": "effective_heuristic"}, {"score": 0.0026161698049580804, "phrase": "conflicting_link_exclusion"}, {"score": 0.002492810341589618, "phrase": "running_time"}, {"score": 0.002424942315592064, "phrase": "msod_problem"}, {"score": 0.0023670716500937667, "phrase": "comprehensive_performance_evaluation"}, {"score": 0.0022322004700942267, "phrase": "connection_requests"}, {"score": 0.0021342613107011624, "phrase": "active_path_length"}, {"score": 0.0021195791482462004, "phrase": "bandwidth_efficiency"}, {"score": 0.0021049977753042253, "phrase": "recovery_time"}], "paper_keywords": ["bandwidth sharing", " dynamic provisioning", " graph theory", " optimization", " protection", " survivability"], "paper_abstract": "Finding a disjoint path pair is an important component in survivable networks. Since the traffic is carried on the active (working) path most of the time, it is useful to find a disjoint path pair such that the length of the shorter path (to be used as the active path) is minimized. In this paper, we first address such a Min-Min problem. We prove that this problem is NP-complete in either single link cost (e.g., dedicated backup bandwidth) or dual link cost (e.g., shared backup bandwidth) networks. In addition, it is NP-hard to obtain a K-approximation to the optimal solution for any K > 1. Our proof is extended to another open question regarding the computational complexity of a restricted version of the Min-Sum problem in an undirected network with ordered dual cost links (called the MSOD problem). To solve the Min-Min problem efficiently, we introduce a novel concept called conflicting link set which provides insights into the so-called trap problem, and develop a divide-and-conquer strategy. The result is an effective heuristic for the Min-Min problem called COnflicting Link Exclusion (COLE), which can outperform other approaches in terms of both the optimality and running time. We also apply COLE to the MSOD problem to efficiently provide shared path protection and conduct comprehensive performance evaluation as well as comparison of various schemes for shared path protection. We show that COLE not only processes connection requests much faster than existing integer linear programming (ILP)-based approaches but also achieves a good balance among the active path length, bandwidth efficiency and recovery time.", "paper_title": "On the complexity of and algorithms for finding the shortest path with a disjoint counterpart", "paper_id": "WOS:000235479700012"}