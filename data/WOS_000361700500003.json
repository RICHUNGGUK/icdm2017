{"auto_keywords": [{"score": 0.033689163983067205, "phrase": "proposed_approach"}, {"score": 0.009449193064143598, "phrase": "difficult_semantic_analysis"}, {"score": 0.00919274256443888, "phrase": "source_code"}, {"score": 0.008998058907697762, "phrase": "software_entity"}, {"score": 0.00481495049065317, "phrase": "renaming_opportunities"}, {"score": 0.00477079124890959, "phrase": "conducted_rename_refactorings"}, {"score": 0.0047125386314695455, "phrase": "software_refactoring"}, {"score": 0.003319528548591761, "phrase": "conducted_renamings"}, {"score": 0.003278937848591921, "phrase": "rename_refactoring"}, {"score": 0.003218977531454772, "phrase": "tool_support"}, {"score": 0.003150403848652526, "phrase": "closely_related_software_entities"}, {"score": 0.0030643732403331414, "phrase": "renamed_entity"}, {"score": 0.0028200832328369816, "phrase": "similar_and_closely_related_software_entities"}, {"score": 0.0026681117410294708, "phrase": "complex_natural_language_understanding"}, {"score": 0.0025555820461269, "phrase": "subjective_factors"}, {"score": 0.0024934179092125277, "phrase": "software_engineers"}, {"score": 0.0022525395705281083, "phrase": "new_names"}, {"score": 0.0021909737736168122, "phrase": "evaluation_results"}, {"score": 0.0021574990404104213, "phrase": "substantial_percentage"}, {"score": 0.0021049977753042253, "phrase": "rename_refactorings"}], "paper_keywords": ["Software refactoring", " rename", " code smells", " refactoring opportunity", " identification"], "paper_abstract": "To facilitate software refactoring, a number of approaches and tools have been proposed to suggest where refactorings should be conducted. However, identification of such refactoring opportunities is usually difficult because it often involves difficult semantic analysis and it is often influenced by many factors besides source code. For example, whether a software entity should be renamed depends on the meaning of its original name (natural language understanding), the semantics of the entity (source code semantics), experience and preference of developers, and culture of companies. As a result, it is difficult to identify renaming opportunities. To this end, in this paper we propose an approach to identify renaming opportunities by expanding conducted renamings. Once a rename refactoring is conducted manually or with tool support, the proposed approach recommends to rename closely related software entities whose names are similar to that of the renamed entity. The rationale is that if an engineer makes a mistake in naming a software entity it is likely for her to make the same mistake in naming similar and closely related software entities. The main advantage of the proposed approach is that it does not involve difficult semantic analysis of source code or complex natural language understanding. Another advantage of this approach is that it is less influenced by subjective factors, e.g., experience and preference of software engineers. The proposed approach has been evaluated on four open-source applications. Our evaluation results show that the proposed approach is accurate in recommending entities to be renamed (average precision 82 percent) and in recommending new names for such entities (average precision 93 percent). Evaluation results also suggest that a substantial percentage (varying from 20 to 23 percent) of rename refactorings are expansible.", "paper_title": "Identifying Renaming Opportunities by Expanding Conducted Rename Refactorings", "paper_id": "WOS:000361700500003"}