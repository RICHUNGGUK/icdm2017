{"auto_keywords": [{"score": 0.03492548536900396, "phrase": "diknn"}, {"score": 0.014383877989624122, "phrase": "mobile_sensor_networks"}, {"score": 0.01256792815093435, "phrase": "sensor_nodes"}, {"score": 0.00481495049065317, "phrase": "optimal_itinerary-based_knn_query_processing"}, {"score": 0.004554082077300675, "phrase": "significant_interest"}, {"score": 0.004347473906950474, "phrase": "knn_queries"}, {"score": 0.004307286039184164, "phrase": "vehicle_navigation"}, {"score": 0.0042806998378295425, "phrase": "wildlife_social_discovery"}, {"score": 0.004023662440623241, "phrase": "indexing_support"}, {"score": 0.003913067698038614, "phrase": "in-network_data_structure"}, {"score": 0.0037586442197443375, "phrase": "index_structures"}, {"score": 0.0037008805337615113, "phrase": "network_dynamics"}, {"score": 0.003666647736663085, "phrase": "sensor_node_mobility"}, {"score": 0.003610292749660581, "phrase": "long_query_response_time"}, {"score": 0.0035879931522580745, "phrase": "low_battery_efficiency"}, {"score": 0.003446353878654566, "phrase": "maintenance-free_itinerary-based_approach"}, {"score": 0.003393373193137233, "phrase": "itinerary_knn"}, {"score": 0.0032796556275748842, "phrase": "search_area"}, {"score": 0.0032593915869553714, "phrase": "multiple_cone-shape_areas"}, {"score": 0.0032192371383026543, "phrase": "query_point"}, {"score": 0.0031599281621383776, "phrase": "query_dissemination_and_response_collection_itinerary"}, {"score": 0.0031113369425402287, "phrase": "cone-shape_areas"}, {"score": 0.003035135667860725, "phrase": "diknn_scheme"}, {"score": 0.002906233629441141, "phrase": "network_interference"}, {"score": 0.002879329998649317, "phrase": "response_time"}, {"score": 0.0028087949095629955, "phrase": "search_radius"}, {"score": 0.0027146141712666673, "phrase": "spatial_irregularity"}, {"score": 0.0024429654627197393, "phrase": "extensive_simulations"}, {"score": 0.002420339995088838, "phrase": "simulation_results"}, {"score": 0.002383094469215288, "phrase": "substantially_better_performance"}, {"score": 0.0023537101705489957, "phrase": "previous_work"}, {"score": 0.0023246873451701995, "phrase": "k_increases"}, {"score": 0.0022960215670802774, "phrase": "sensor_node_mobility_increases"}, {"score": 0.002260684786333025, "phrase": "second_runner"}, {"score": 0.002198440442866291, "phrase": "energy_consumption"}, {"score": 0.0021512129013162846, "phrase": "query_response_time"}, {"score": 0.0021049977753042253, "phrase": "query_result_accuracy"}], "paper_keywords": ["Indexing methods", " query processing", " distributed databases", " sensor networks", " mobile environments", " wireless communication"], "paper_abstract": "The K-Nearest Neighbors (KNN) query has been of significant interest in many studies and has become one of the most important spatial queries in mobile sensor networks. Applications of KNN queries may include vehicle navigation, wildlife social discovery, and squad/platoon searching on the battlefields. Current approaches to KNN search in mobile sensor networks require a certain kind of indexing support. This index could be either a centralized spatial index or an in-network data structure that is distributed over the sensor nodes. Creation and maintenance of these index structures, to reflect the network dynamics due to sensor node mobility, may result in long query response time and low battery efficiency, thus limiting their practical use. In this paper, we propose a maintenance-free itinerary-based approach called Density-aware Itinerary KNN query processing (DIKNN). The DIKNN divides the search area into multiple cone-shape areas centered at the query point. It then performs a query dissemination and response collection itinerary in each of the cone-shape areas in parallel. The design of the DIKNN scheme takes into account several challenging issues such as the trade-off between degree of parallelism and network interference on query response time, and the dynamic adjustment of the search radius (in terms of number of hops) according to spatial irregularity or mobility of sensor nodes. To optimize the performance of DIKNN, a detailed analytical model is derived that automatically determines the most suitable degree of parallelism under various network conditions. This model is validated by extensive simulations. The simulation results show that DIKNN yields substantially better performance and scalability over previous work, both as k increases and as the sensor node mobility increases. It outperforms the second runner with up to a 50 percent saving in energy consumption and up to a 40 percent reduction in query response time, while rendering the same level of query result accuracy.", "paper_title": "Toward the Optimal Itinerary-Based KNN Query Processing in Mobile Sensor Networks", "paper_id": "WOS:000260057800007"}