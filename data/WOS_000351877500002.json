{"auto_keywords": [{"score": 0.04740622885398932, "phrase": "architectural_patterns"}, {"score": 0.04637570254730582, "phrase": "architectural_synthesis"}, {"score": 0.007978409866814687, "phrase": "proposed_approach"}, {"score": 0.00481495049065317, "phrase": "pattern-based_software_architectural_synthesis"}, {"score": 0.0047057084749407485, "phrase": "successful_experience"}, {"score": 0.004652016085325825, "phrase": "software_architecture_design"}, {"score": 0.004494570360108983, "phrase": "reusable_architectural_knowledge"}, {"score": 0.004195418010131832, "phrase": "resulting_architecture"}, {"score": 0.004030157055463817, "phrase": "initial_architectural_patterns"}, {"score": 0.0037834649508375544, "phrase": "challenging_task"}, {"score": 0.003697538418750941, "phrase": "novice_architects"}, {"score": 0.0034118234596993836, "phrase": "cooperative_coevolution_approach"}, {"score": 0.0030239842475439814, "phrase": "existing_architectural_synthesis_activity"}, {"score": 0.002758273619951683, "phrase": "extended_architectural_synthesis"}, {"score": 0.002711109302199029, "phrase": "cooperative_coevolution_model"}, {"score": 0.0026191799769765085, "phrase": "resulting_architectural_solutions"}, {"score": 0.0025158514649823724, "phrase": "pattern_constraints"}, {"score": 0.0023889533502525527, "phrase": "case_study"}, {"score": 0.0023079225317714815, "phrase": "cinema_booking_system"}, {"score": 0.0021789194955896102, "phrase": "architectural_solutions"}, {"score": 0.0021049977753042253, "phrase": "expert_design"}], "paper_keywords": ["Automated architectural synthesis", " architectural patterns", " cooperative coevolution"], "paper_abstract": "To reuse successful experience in software architecture design, architects use architectural patterns as reusable architectural knowledge for architectural synthesis. However, it has been observed that the resulting architecture does not always conform to the initial architectural patterns employed. Architectural synthesis using architectural patterns is also recognized as a challenging task, especially for novice architects due to lack of experience. In this paper, we propose a cooperative coevolution approach to automate architectural synthesis using architectural patterns. We first analyze several common architectural patterns and the constraints when using them. We then extend existing architectural synthesis activity with patterns based on the results of this analysis. Finally, we map the extended architectural synthesis to a cooperative coevolution model, which can optimize the resulting architectural solutions and avoid the violations to the pattern constraints automatically. We evaluate the proposed approach through a case study: architecture design of a cinema booking system. The results show that the proposed approach can generate architectural solutions which are closer to the expert design.", "paper_title": "A Cooperative Coevolution Approach to Automate Pattern-based Software Architectural Synthesis", "paper_id": "WOS:000351877500002"}