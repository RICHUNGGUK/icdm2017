{"auto_keywords": [{"score": 0.01559489663503807, "phrase": "response_time_prediction"}, {"score": 0.007959513606799567, "phrase": "potential_benefit"}, {"score": 0.00481495049065317, "phrase": "linear_algebra_kernel_composition"}, {"score": 0.0047379542803396915, "phrase": "numerical_linear_algebra_libraries"}, {"score": 0.004550783060775205, "phrase": "complex_computations"}, {"score": 0.004370973501074594, "phrase": "large_number"}, {"score": 0.0043358695338488445, "phrase": "functionally_equivalent_kernel_compositions"}, {"score": 0.00421520166010848, "phrase": "better_response_times"}, {"score": 0.004147756103284082, "phrase": "particular_data"}, {"score": 0.0040485975929323, "phrase": "particular_computer_architecture"}, {"score": 0.004016072233242585, "phrase": "previous_research"}, {"score": 0.0038417798012011155, "phrase": "kernel_compositions"}, {"score": 0.003417565253539315, "phrase": "candidate_combination"}, {"score": 0.003229815147800001, "phrase": "accurate_such_models"}, {"score": 0.003077092305006702, "phrase": "feature_space"}, {"score": 0.003040050100579337, "phrase": "salient_properties"}, {"score": 0.00301560261110296, "phrase": "kernel_combinations"}, {"score": 0.0029792984108210525, "phrase": "response_time"}, {"score": 0.0029553380263320195, "phrase": "supervised_machine_learning"}, {"score": 0.002884603537502399, "phrase": "standard_set"}, {"score": 0.0027929100418926725, "phrase": "effective_algorithm"}, {"score": 0.0025761937402886954, "phrase": "simplest_kernel_composition"}, {"score": 0.002504374718975704, "phrase": "fastest_kernel_compositions"}, {"score": 0.002300681752315682, "phrase": "interactive_computational_tool"}, {"score": 0.0021917966722180132, "phrase": "limiting_factor"}, {"score": 0.002165388556451298, "phrase": "kernel_composition_enumeration_overhead"}], "paper_keywords": ["numerical linear algebra", " kernel compositions", " performance prediction", " machine learning"], "paper_abstract": "Numerical linear algebra libraries provide many kernels that can be composed to perform complex computations. For a given computation, there is typically a large number of functionally equivalent kernel compositions. Some of these compositions achieve better response times than others for particular data and when executed on a particular computer architecture. Previous research provides methods to enumerate (a subset of) these kernel compositions. In this work, we study the problem of determining the composition that yields the lowest response time. Our approach is based on a response time prediction for each candidate combination. While this prediction could in principle be obtained using analytical and/or empirical performance models, developing accurate such models is known to be challenging. Instead, we define a feature space that captures salient properties of kernel combinations and predict response time using supervised machine learning. We experiment with a standard set of machine learning algorithms and identify an effective algorithm for our kernel composition selection problem. Using this algorithm, our approach widely outperforms the strategy that would consist in always using the simplest kernel composition and is often close to the fastest kernel compositions among those evaluated. We quantify the potential benefit of our approach if it were to be implemented as part of an interactive computational tool. We find that although the potential benefit is substantial, a limiting factor is the kernel composition enumeration overhead. Copyright (c) 2014 John Wiley & Sons, Ltd.", "paper_title": "Selecting linear algebra kernel composition using response time prediction", "paper_id": "WOS:000363501100004"}