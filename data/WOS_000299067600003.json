{"auto_keywords": [{"score": 0.041133586303589764, "phrase": "cop"}, {"score": 0.00481495049065317, "phrase": "component-based_design"}, {"score": 0.004555217356295278, "phrase": "component-based_software_development"}, {"score": 0.004309434349688514, "phrase": "implementation_stage"}, {"score": 0.004122351497440992, "phrase": "main_causes"}, {"score": 0.00396530196547293, "phrase": "component-oriented_programming"}, {"score": 0.003751228706861377, "phrase": "proposed_component_models"}, {"score": 0.0036892809673917592, "phrase": "unified_modeling_language"}, {"score": 0.003588291565092195, "phrase": "corba_component_model"}, {"score": 0.0033015555065209865, "phrase": "design_time"}, {"score": 0.003158088307044493, "phrase": "object-oriented_languages"}, {"score": 0.003020837396178602, "phrase": "cop."}, {"score": 0.002905629026254221, "phrase": "five_important_requirements"}, {"score": 0.002473203873496859, "phrase": "existing_work"}, {"score": 0.0024054226746197706, "phrase": "extended_version"}, {"score": 0.0023656467839555458, "phrase": "scl_component_language"}, {"score": 0.002250231798410532, "phrase": "scl"}, {"score": 0.0022129983153880467, "phrase": "concrete_experiment"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Components", " Programming language", " Unplanned connection", " Encapsulation", " Uniformity"], "paper_abstract": "Since years, multiple researches studied component-based software development. Nevertheless, most component-based software systems do not use components at implementation stage. We believe that one of the main causes is a lack of support for component-oriented programming (COP). Indeed, most of the proposed component models such as Unified Modeling Language (UML), Corba Component Model (CCM), Enterprise Java Beans (EJB) are only available at design time. The fact that implementation relies on object-oriented languages which prevent developers from fully switching to COP. In this paper, we identify five important requirements (decoupling, adaptability, unplanned connections, encapsulation and uniformity) for COP based on an analysis of the state of the art and the limitations of existing work. We propose an extended version of the SCL component language that fulfills these requirements. A prototype of SCL and a concrete experiment validate this proposal. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "A language to bridge the gap between component-based design and implementation", "paper_id": "WOS:000299067600003"}