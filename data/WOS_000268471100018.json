{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "hardware"}, {"score": 0.004736045157669388, "phrase": "software_information_flow_analyses"}, {"score": 0.004658426838467567, "phrase": "security-critical_communications_devices"}, {"score": 0.00443308765153716, "phrase": "highest_possible_standards"}, {"score": 0.004047781270412204, "phrase": "potential_information_flow"}, {"score": 0.003948613642680196, "phrase": "device's_electronic_circuitry"}, {"score": 0.003757480190200645, "phrase": "device's_operating_modes"}, {"score": 0.0035755653799043, "phrase": "security_functionality"}, {"score": 0.0034306925765832633, "phrase": "embedded_software"}, {"score": 0.0032109670662222416, "phrase": "new_strategies"}, {"score": 0.0029805015010906013, "phrase": "embedded_program_code"}, {"score": 0.002931569771634119, "phrase": "hardware_analyses"}, {"score": 0.002789528662623221, "phrase": "standard_compiler_principles"}, {"score": 0.0027211030647461324, "phrase": "high-integrity_security_evaluations"}, {"score": 0.0025892330566358503, "phrase": "information_flow"}, {"score": 0.0024637379406427856, "phrase": "embedded_systems"}, {"score": 0.002286781334850213, "phrase": "embedded_program_execution_paths"}, {"score": 0.0022306602656266545, "phrase": "hardware_pins"}, {"score": 0.0021049977753042253, "phrase": "significant_software_states"}], "paper_keywords": ["Security", " Verification"], "paper_abstract": "Security-critical communications devices must be evaluated to the highest possible standards before they can be deployed. This process includes tracing potential information flow through the device's electronic circuitry, for each of the device's operating modes. Increasingly, however, security functionality is being entrusted to embedded software running on microprocessors within such devices, so new strategies are needed for integrating information flow analyses of embedded program code with hardware analyses. Here we show how standard compiler principles can augment high-integrity security evaluations to allow seamless tracing of information flow through both the hardware and software of embedded systems. This is done by unifying input/output statements in embedded program execution paths with the hardware pins they access, and by associating significant software states with corresponding", "paper_title": "Integrating Hardware and Software Information Flow Analyses", "paper_id": "WOS:000268471100018"}