{"auto_keywords": [{"score": 0.04107868567004354, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "built-in_keyword_search_capabilities"}, {"score": 0.004760017604908536, "phrase": "rdbms._a"}, {"score": 0.0046253989970108985, "phrase": "keyword_search"}, {"score": 0.0045726187330434025, "phrase": "relational_databases"}, {"score": 0.004443276312972159, "phrase": "minimum_steiner_trees"}, {"score": 0.004392565073466714, "phrase": "database_graphs"}, {"score": 0.004317576641196539, "phrase": "relational_data"}, {"score": 0.004030157055463817, "phrase": "minimum_steiner_tree_problem"}, {"score": 0.0036553070575015344, "phrase": "underlying_relational_database_management_system"}, {"score": 0.003393419606791542, "phrase": "rdbms."}, {"score": 0.003166259444961177, "phrase": "new_concept"}, {"score": 0.003130077012135034, "phrase": "compact_steiner_tree"}, {"score": 0.0029214769181390653, "phrase": "steiner_tree_problem"}, {"score": 0.0028715299874549245, "phrase": "top-k_keyword_queries"}, {"score": 0.0027741761880779535, "phrase": "novel_structure-aware_index"}, {"score": 0.0026955672787561742, "phrase": "effective_ranking_mechanism"}, {"score": 0.0026342827320931937, "phrase": "top-k_highest_ranked_cstrees"}, {"score": 0.002487083025913648, "phrase": "standard_relational_rdbms"}, {"score": 0.002402731767209114, "phrase": "query-processing_capability"}, {"score": 0.002362759902466588, "phrase": "mysql"}, {"score": 0.0022774339166642655, "phrase": "sql."}, {"score": 0.0022424956516376073, "phrase": "built-in_keyword-search_capabilities"}, {"score": 0.0021416404045850224, "phrase": "significant_improvement"}, {"score": 0.0021049977753042253, "phrase": "search_efficiency"}], "paper_keywords": ["Keyword search", " Relational databases", " Steiner Tree", " Compact Steiner tree", " Approximate algorithms", " Structure-aware index", " Progressive search"], "paper_abstract": "A common approach to performing keyword search over relational databases is to find the minimum Steiner trees in database graphs transformed from relational data. These methods, however, are rather expensive as the minimum Steiner tree problem is known to be NP-hard. Further, these methods are independent of the underlying relational database management system (RDBMS), thus cannot benefit from the capabilities of the RDBMS. As an alternative, in this paper we propose a new concept called Compact Steiner Tree (CSTree), which can be used to approximate the Steiner tree problem for answering top-k keyword queries efficiently. We propose a novel structure-aware index, together with an effective ranking mechanism for fast, progressive and accurate retrieval of top-k highest ranked CSTrees. The proposed techniques can be implemented using a standard relational RDBMS to benefit from its indexing and query-processing capability. We have implemented our techniques in MYSQL, which can provide built-in keyword-search capabilities using SQL. The experimental results show a significant improvement in both search efficiency and result quality comparing to existing state-of-the-art approaches.", "paper_title": "Providing built-in keyword search capabilities in RDBMS", "paper_id": "WOS:000286432000001"}