{"auto_keywords": [{"score": 0.03488739830592305, "phrase": "core_traceability_paths"}, {"score": 0.00481495049065317, "phrase": "traceability_management"}, {"score": 0.004541712637353326, "phrase": "software_artifact"}, {"score": 0.004374267836149339, "phrase": "software_artifacts"}, {"score": 0.004319830179921363, "phrase": "explicit_way"}, {"score": 0.004283934374355858, "phrase": "traceability"}, {"score": 0.0035648266669315943, "phrase": "possible_traces"}, {"score": 0.003404703106153948, "phrase": "activities_stakeholders"}, {"score": 0.0032517484445814334, "phrase": "essential_traceability_links"}, {"score": 0.003028727936200845, "phrase": "software_product_lines"}, {"score": 0.002953711377604328, "phrase": "software_process_management"}, {"score": 0.0028926147550022607, "phrase": "running_software_product_line_example"}, {"score": 0.0027167830773160203, "phrase": "structural_models"}, {"score": 0.002660574167091781, "phrase": "product_level"}, {"score": 0.0025838249689625775, "phrase": "software_product_derivation"}, {"score": 0.002551612225562499, "phrase": "feasibility_study"}, {"score": 0.002530359917257626, "phrase": "release_planning"}, {"score": 0.002477998427152547, "phrase": "industrial_setting"}, {"score": 0.0023079225317714815, "phrase": "development_processes"}, {"score": 0.0021315842986705485, "phrase": "process_traceability"}, {"score": 0.0021049977753042253, "phrase": "pragmatic_yet_efficient_way"}], "paper_keywords": ["Traceability paths", " Software product line", " Traceability issues", " Software process management"], "paper_abstract": "Traceability is the ability to describe and follow the life of a software artifact and a means for modeling the relations between software artifacts in an explicit way. Traceability has been successfully applied in many software engineering communities and has recently been adopted to document the transition among requirements, architecture and implementation. We present an approach to customize traceability to the situation at hand. Instead of automating tracing, or representing all possible traces, we scope the traces to be maintained to the activities stakeholders must carry out. We define core traceability paths, consisting of essential traceability links required to support the activities. We illustrate the approach through two examples: product derivation in software product lines, and release planning in software process management. By using a running software product line example, we explain why the core traceability paths identified are needed when navigating from feature to structural models and from family to product level and backward between models used in software product derivation. A feasibility study in release planning carried out in an industrial setting further illustrates the use of core traceability paths during production and measures the increase in performance of the development processes supported by our approach. These examples show that our approach can be successfully used to support both product and process traceability in a pragmatic yet efficient way. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "A scoped approach to traceability management", "paper_id": "WOS:000262230900014"}