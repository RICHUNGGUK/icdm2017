{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "real-time_calculus"}, {"score": 0.004677372885331908, "phrase": "heterogeneous_collection"}, {"score": 0.004632388761885302, "phrase": "processing_elements"}, {"score": 0.004587835274176236, "phrase": "memory_modules"}, {"score": 0.004521803560561489, "phrase": "communication_subsystems"}, {"score": 0.004329331617724, "phrase": "different_interfaces"}, {"score": 0.004205570965859848, "phrase": "different_vendors"}, {"score": 0.004125027493339274, "phrase": "compositional_techniques"}, {"score": 0.003911367220315185, "phrase": "prior_work"}, {"score": 0.003855034057431947, "phrase": "real-time_calculus_framework"}, {"score": 0.0034826993555190765, "phrase": "uniprocessor_processing_elements"}, {"score": 0.003399466007862412, "phrase": "serious_impediment"}, {"score": 0.0033182152378613767, "phrase": "multicore_technologies"}, {"score": 0.00320770578058916, "phrase": "two-step_approach"}, {"score": 0.0030121159909273897, "phrase": "globally-scheduled_multiprocessor_systems"}, {"score": 0.002925899335792914, "phrase": "job_response-time_bounds"}, {"score": 0.0026687841359431127, "phrase": "resulting_residual_processor_supply"}, {"score": 0.0026175952455594277, "phrase": "job_completion_events"}, {"score": 0.0024342079318127423, "phrase": "response-time_bounds"}, {"score": 0.002319127685733821, "phrase": "closed-form_expressions"}, {"score": 0.002230984431056064, "phrase": "large_family"}, {"score": 0.0022094759531152072, "phrase": "fixed-job-priority_schedulers"}, {"score": 0.002135812692862058, "phrase": "developed_analysis_framework"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["Multiprocessor scheduling", " Streaming task model", " Response-time analysis", " Real-time calculus"], "paper_abstract": "Many embedded platforms consist of a heterogeneous collection of processing elements, memory modules, and communication subsystems. These components often implement different scheduling/arbitration policies, have different interfaces, and are supplied by different vendors. Hence, compositional techniques for modeling and analyzing such platforms are of interest. In prior work, the real-time calculus framework has proven to be very effective in this regard. However, real-time calculus has heretofore been limited to systems with uniprocessor processing elements, which is a serious impediment given the advent of multicore technologies. In this paper, a two-step approach is proposed that allows the power of real-time calculus to be applied in globally-scheduled multiprocessor systems: first, assuming that job response-time bounds are given, determine whether these bounds are met; second, using these bounds, determine the resulting residual processor supply and streams of job completion events using formalisms from real-time calculus. For this methodology to be applied in settings where response-time bounds are not specified, such bounds must be determined. Closed-form expressions for calculating such response-time bounds are presented for a large family of fixed-job-priority schedulers. We have also applied the developed analysis framework in a case study.", "paper_title": "Multiprocessor extensions to real-time calculus", "paper_id": "WOS:000295793000003"}