{"auto_keywords": [{"score": 0.024837074198054344, "phrase": "pba_model"}, {"score": 0.013716422713538321, "phrase": "static_analysis"}, {"score": 0.010298047683139059, "phrase": "kpn_ports"}, {"score": 0.009426951220193694, "phrase": "intermediate_ports"}, {"score": 0.00481495049065317, "phrase": "actor_model"}, {"score": 0.004772367030970874, "phrase": "kahn_process_network_model"}, {"score": 0.004565007074039171, "phrase": "transitional_actor_model"}, {"score": 0.004524624065803229, "phrase": "legacy_code"}, {"score": 0.004347256848088215, "phrase": "proposed_actor_model"}, {"score": 0.004308791766002289, "phrase": "dynamic_behavior"}, {"score": 0.004139850082354509, "phrase": "deadlock_detection"}, {"score": 0.004103212598803194, "phrase": "buffer_memory_size_computation"}, {"score": 0.004048860957751714, "phrase": "kahn_process_network"}, {"score": 0.003942299471749811, "phrase": "decidable_dataflow"}, {"score": 0.003804550737731054, "phrase": "proposed_model"}, {"score": 0.0035590664550919854, "phrase": "existing_actor"}, {"score": 0.003543273649210823, "phrase": "based_models"}, {"score": 0.0033740965314231325, "phrase": "pba"}, {"score": 0.0031703706626348507, "phrase": "port_group"}, {"score": 0.0029789104204803137, "phrase": "proposed_port_based_actor_model"}, {"score": 0.0029394074636168435, "phrase": "generalized_actor_model"}, {"score": 0.002900426826591769, "phrase": "constant_rate_dataflow"}, {"score": 0.002537880772794665, "phrase": "pba_graph"}, {"score": 0.002515384834484012, "phrase": "dcdf_graphs"}, {"score": 0.002438203996977464, "phrase": "dcdf"}, {"score": 0.0023739321566540682, "phrase": "formal_definitions"}, {"score": 0.0022705467477443417, "phrase": "efficient_code_generation_methods"}, {"score": 0.0021813467128927347, "phrase": "proposed_model_works"}], "paper_keywords": ["Computer languages", " Data flow computing", " Parallel programming", " Scheduling algorithm", " Memory management"], "paper_abstract": "This paper proposes a transitional actor model from legacy code to decidable dataflow. In addition, the proposed actor model provides dynamic behavior and top down design with static analysis such as deadlock detection and buffer memory size computation by combining Kahn process network (KPN) model and decidable dataflow (DCDF) model. In the proposed model, each port can have its own model of computation, which is different from the existing actor based models, so that it is called port based actor (PBA) model. Each port has either Kahn process network model or decidable dataflow model. A port group for KPN ports is introduced to specify KPN ports that are internally related. The proposed port based actor model is a generalized actor model extended from constant rate dataflow with intermediate ports (CRDF-IP) in which through the intermediate ports, an actor can consume and produce samples arbitrary times per execution. The decomposition of a PBA graph into DCDF graphs allows to apply static analysis, scheduling, and code generation methods developed for DCDF model. This paper explains formal definitions and static analysis for PBA model. Moreover, scheduling and efficient code generation methods are also explained. To validate that the proposed model works, PBA model has been implemented and an H. 263 video encoder algorithm is specified and synthesized in PBA model.", "paper_title": "Port Based Actor Model with Kahn Process Network Model and Decidable Dataflow Model", "paper_id": "WOS:000314776600006"}