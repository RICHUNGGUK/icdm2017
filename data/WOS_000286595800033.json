{"auto_keywords": [{"score": 0.04614766352910894, "phrase": "aop"}, {"score": 0.00481495049065317, "phrase": "modular_compilation"}, {"score": 0.004724365740062236, "phrase": "crosscutting_concerns_by_contextual_predicate_dispatch"}, {"score": 0.0045052562941109734, "phrase": "aspect-oriented_programming"}, {"score": 0.004215397034321004, "phrase": "controversial_issue"}, {"score": 0.003906804492585634, "phrase": "object-oriented_programming"}, {"score": 0.0036207206487324506, "phrase": "simple_language"}, {"score": 0.0035525230119401153, "phrase": "aop_mechanisms"}, {"score": 0.0033875770020590796, "phrase": "traditional_oop_mechanisms"}, {"score": 0.00210499840229298, "phrase": "oop."}], "paper_keywords": ["Languages", " Aspect Oriented Programming", " Java", " AspectJ"], "paper_abstract": "The modularity of aspect-oriented programming (AOP) has been a controversial issue. To investigate this issue compared with object-oriented programming (OOP), we propose a simple language providing AOP mechanisms, which are enhanced traditional OOP mechanisms. We also present its formal system and then show that programs in this language can be only mostly modularly (i.e. separately) typechecked and compiled. We mention a source of this unmodularity and discuss whether or not it is appropriate to claim that AOP breaks modularity compared with OOP.", "paper_title": "Mostly Modular Compilation of Crosscutting Concerns by Contextual Predicate Dispatch", "paper_id": "WOS:000286595800033"}