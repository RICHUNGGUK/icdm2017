{"auto_keywords": [{"score": 0.04472882712454684, "phrase": "matching_m"}, {"score": 0.041469740173514034, "phrase": "popular_matching"}, {"score": 0.00481495049065317, "phrase": "unpopularity_matchings"}, {"score": 0.004475659507646842, "phrase": "optimal_way"}, {"score": 0.003823584649521733, "phrase": "abraham_et_al"}, {"score": 0.00378080526397273, "phrase": "j._comput"}, {"score": 0.0036347979916389467, "phrase": "reasonable_substitute"}, {"score": 0.0035141291835319682, "phrase": "unpopularity-unpopularity_factor"}, {"score": 0.00345530020388352, "phrase": "unpopularity_margin"}, {"score": 0.003312486229143855, "phrase": "minimum_value"}, {"score": 0.003035711716881469, "phrase": "matchings_m"}, {"score": 0.0021168934012668755, "phrase": "low_unpopularity"}, {"score": 0.0021049977753042253, "phrase": "random_instances"}], "paper_keywords": ["Matching with preferences", " Popularity", " Approximation algorithms"], "paper_abstract": "We investigate the following problem: given a set of jobs and a set of people with preferences over the jobs, what is the optimal way of matching people to jobs? Here we consider the notion of popularity. A matching M is popular if there is no matching M' such that more people prefer M' to M than the other way around. Determining whether a given instance admits a popular matching and, if so, finding one, was studied by Abraham et al. (SIAM J. Comput. 37(4):1030-1045, 2007). If there is no popular matching, a reasonable substitute is a matching whose unpopularity is bounded. We consider two measures of unpopularity-unpopularity factor denoted by u(M) and unpopularity margin denoted by g(M). McCutchen recently showed that computing a matching M with the minimum value of u(M) or g(M) is NP-hard, and that if G does not admit a popular matching, then we have u(M) >= 2 for all matchings M in G. Here we show that a matching M that achieves u(M) = 2 can be computed in O(m root n) time (where m is the number of edges in G and n is the number of nodes) provided a certain graph H admits a matching that matches all people. We also describe a sequence of graphs: H = H(2), H(3), ... , H(k) such that if H(k) admits a matching that matches all people, then we can compute in O(km root n) time a matching M such that u(M) <= k - 1 and g(M) <= n(1 - 2/k). Simulation results suggest that our algorithm finds a matching with low unpopularity in random instances.", "paper_title": "Bounded Unpopularity Matchings", "paper_id": "WOS:000293962400010"}