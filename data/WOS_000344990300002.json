{"auto_keywords": [{"score": 0.027584153582855035, "phrase": "tlb"}, {"score": 0.00481495049065317, "phrase": "practical_data_classification_framework"}, {"score": 0.004109212945115815, "phrase": "application-specific_characteristics"}, {"score": 0.004039995317682942, "phrase": "data_access_behavior"}, {"score": 0.003689982350051231, "phrase": "high-performance_parallel_systems"}, {"score": 0.0035666632046674153, "phrase": "data_accesses"}, {"score": 0.003526476304712492, "phrase": "different_categories"}, {"score": 0.0033511469200347907, "phrase": "novel_compiler-based_approach"}, {"score": 0.0032575241721857343, "phrase": "data_classification"}, {"score": 0.0030433302702291116, "phrase": "wide_range"}, {"score": 0.003009022147559257, "phrase": "parallel_applications"}, {"score": 0.0029083942467546305, "phrase": "efficient_solutions"}, {"score": 0.002859345731792013, "phrase": "data_access_latency"}, {"score": 0.0027794243746094905, "phrase": "today's_many-core_architectures"}, {"score": 0.0027170943110836425, "phrase": "proposed_data_classification_scheme"}, {"score": 0.0025673005153462707, "phrase": "coherence_directory"}, {"score": 0.0024257447861185813, "phrase": "efficient_cache_coherence_design"}, {"score": 0.002318127769195112, "phrase": "compiler-assisted_mechanism"}], "paper_keywords": ["Practically private", " data classification", " pipelined parallel", " multi-threaded parallel", " OpenMP", " compilers", " cache coherence"], "paper_abstract": "State-of-the-art chip multiprocessor (CMP) proposals emphasize general optimizations designed to deliver computing power for many types of applications. Potentially, significant performance improvements that leverage application-specific characteristics such as data access behavior are missed by this approach. In this paper, we demonstrate how scalable and high-performance parallel systems can be built by classifying data accesses into different categories and treating them differently. We develop a novel compiler-based approach to speculatively detect a data classification termed practically private, which we demonstrate is ubiquitous in a wide range of parallel applications. Leveraging this classification provides efficient solutions to mitigate data access latency and coherence overhead in today's many-core architectures. While the proposed data classification scheme can be applied to many micro-architectural constructs including the TLB, coherence directory, and interconnect, we demonstrate its potential through an efficient cache coherence design. Specifically, we show that the compiler-assisted mechanism reduces an average of 46% coherence traffic and achieves up to 12%, 8%, and 5% performance improvement over shared, private, and state-of-the-art NUCA-based caching, respectively, depending on scenarios.", "paper_title": "A Practical Data Classification Framework for Scalable and High Performance Chip-Multiprocessors", "paper_id": "WOS:000344990300002"}