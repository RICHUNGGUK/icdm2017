{"auto_keywords": [{"score": 0.03859150608353858, "phrase": "traditional_tools"}, {"score": 0.02803768669773675, "phrase": "index_data_size"}, {"score": 0.004678384952779725, "phrase": "network_packet_tracing"}, {"score": 0.004471530397729526, "phrase": "network_software_debugging"}, {"score": 0.004416713079266374, "phrase": "performance_analysis"}, {"score": 0.004380540407926982, "phrase": "forensic_investigation"}, {"score": 0.004186799638538032, "phrase": "packet_traces"}, {"score": 0.003920128102807887, "phrase": "huge_amounts"}, {"score": 0.003352658916650986, "phrase": "large_traces"}, {"score": 0.0032979090806670493, "phrase": "fast_packet_lookup"}, {"score": 0.003244050414264445, "phrase": "original_trace"}, {"score": 0.003204232566468624, "phrase": "wavelet_tree_structure"}, {"score": 0.0030123335878664064, "phrase": "system_calls"}, {"score": 0.0029753513692467315, "phrase": "file_processing"}, {"score": 0.0028670988845838296, "phrase": "ssd._pcapwt"}, {"score": 0.002843581231499026, "phrase": "remarkable_performance_enhancements"}, {"score": 0.002618730478351454, "phrase": "packet_extraction_time"}, {"score": 0.002575934917174136, "phrase": "large_and_complex_traces"}, {"score": 0.002431570196486513, "phrase": "original_traces"}, {"score": 0.002391825892939338, "phrase": "packet_extraction_performance"}, {"score": 0.002276439636865258, "phrase": "small_amount"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Network traces", " Packet indexing", " Packet extraction", " Wavelet tree", " Multi-thread file I/O"], "paper_abstract": "Network packet tracing has been used for many different purposes during the last few decades, such as network software debugging, networking performance analysis, forensic investigation, and so on. Meanwhile, the size of packet traces becomes larger, as the speed of network rapidly increases. Thus, to handle huge amounts of traces, we need not only more hardware resources, but also efficient software tools. However, traditional tools are inefficient at dealing with such big packet traces. In this paper, we propose pcapWT, an efficient packet extraction tool for large traces. PcapWT provides fast packet lookup by indexing an original trace using a wavelet tree structure. In addition, pcapWT supports multi-threading for avoiding synchronous I/O and blocking system calls used for file processing, and is particularly efficient on machines with SSD. PcapWT shows remarkable performance enhancements in comparison with traditional tools such as tcpdump and most recent tools such as pcapIndex in terms of index data size and packet extraction time. Our benchmark using large and complex traces shows that pcapWT reduces the index data size down below 1% of the volume of the original traces. Moreover, packet extraction performance is 20% better than with pcapIndex. Furthermore, when a small amount of packets are retrieved, pcapWT is hundreds of times faster than tcpdump. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "PcapWT: An efficient packet extraction tool for large volume network traces", "paper_id": "WOS:000353070900007"}