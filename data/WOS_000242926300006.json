{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "uml_communication_diagrams"}, {"score": 0.035050648308006416, "phrase": "conditional_predicates"}, {"score": 0.03398665802358191, "phrase": "communication_diagram"}, {"score": 0.0044237033788643715, "phrase": "cluster_level_test_cases"}, {"score": 0.0038953958723049287, "phrase": "tree_representation"}, {"score": 0.003813669883040509, "phrase": "communication_diagrams"}, {"score": 0.0035408501923902477, "phrase": "post-order_traversal"}, {"score": 0.0034299649219748513, "phrase": "constructed_tree"}, {"score": 0.002863921785266393, "phrase": "function_minimization_technique"}, {"score": 0.002744888626958772, "phrase": "test_data"}, {"score": 0.002658863179011018, "phrase": "generated_test_cases"}, {"score": 0.002603012037901889, "phrase": "message_paths_coverage"}, {"score": 0.0024947959375982614, "phrase": "boundary_coverage"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["UML based testing", " cluster level testing", " automatic test case generation", " communication diagram"], "paper_abstract": "We present a method to generate cluster level test cases based on UML communication diagrams. In our approach, we first construct a tree representation of communication diagrams. We then carry out a post-order traversal of the constructed tree for selecting conditional predicates from the communication diagram. We transform the conditional predicates on the communication diagram and apply function minimization technique to generate the test data. The generated test cases achieve message paths coverage as well as boundary coverage. We have implemented our technique and tested it on several example problems. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Automatic test case generation from UML communication diagrams", "paper_id": "WOS:000242926300006"}