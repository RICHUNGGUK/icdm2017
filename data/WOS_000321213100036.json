{"auto_keywords": [{"score": 0.026109057847115688, "phrase": "kvm"}, {"score": 0.00481495049065317, "phrase": "embedded_power_architecture"}, {"score": 0.0044495843279816075, "phrase": "embedded_systems"}, {"score": 0.004247696749118451, "phrase": "virtual_machines"}, {"score": 0.004036141321779216, "phrase": "popek-and-goldberg_virtualization_requirements"}, {"score": 0.00399881984083004, "phrase": "traditional_trap-and-emulate_style_virtualization"}, {"score": 0.003712362078915926, "phrase": "large_amount"}, {"score": 0.003678023470672862, "phrase": "kernel_activity"}, {"score": 0.0035603115570447467, "phrase": "recent_additions"}, {"score": 0.0035110198699787013, "phrase": "linux_kernel"}, {"score": 0.0034303736977646135, "phrase": "side_paravirtual_extensions"}, {"score": 0.0033986345279488476, "phrase": "power_architecture_platforms"}, {"score": 0.0030398432591176357, "phrase": "possible_virtualization_optimizations"}, {"score": 0.002942495422585405, "phrase": "host-side_optimizations"}, {"score": 0.00290173234777844, "phrase": "comparable_performance"}, {"score": 0.0028615323526689582, "phrase": "aforementioned_paravirtual_extensions"}, {"score": 0.0028087949095629955, "phrase": "unmodified_guest"}, {"score": 0.002731500545019039, "phrase": "adaptive_in-place_binary_translation"}, {"score": 0.0026811531172346676, "phrase": "paravirtual_approach"}, {"score": 0.0024091057723923857, "phrase": "unmodified_linux_guest"}, {"score": 0.0023103100997344072, "phrase": "previous_similar_binary_translation_based_approaches"}, {"score": 0.0021445492649196955, "phrase": "unique_set"}, {"score": 0.0021049977753042253, "phrase": "optimization_opportunities"}], "paper_keywords": ["Performance", " Design", " Virtualization", " Virtual Machine Monitor", " Dynamic Binary Translation", " Power Architecture Platforms", " Architecture Design", " Code Patching", " TLB", " In-place Binary Translation", " Read/write Tracing", " Adaptive Page Resizing", " Adaptive Data Mirroring"], "paper_abstract": "Power Architecture (R) processors are popular and widespread on embedded systems, and such platforms are increasingly being used to run virtual machines [11, 22]. While the Power Architecture meets the Popek-and-Goldberg virtualization requirements for traditional trap-and-emulate style virtualization, the performance overhead of virtualization remains high. For example, workloads exhibiting a large amount of kernel activity typically show 3-5x slowdowns over bare-metal. Recent additions to the Linux kernel contain guest and host side paravirtual extensions for Power Architecture platforms. While these extensions improve performance significantly, they are guest-specific, guest-intrusive, and cover only a subset of all possible virtualization optimizations. We present a set of host-side optimizations that achieve comparable performance to the aforementioned paravirtual extensions, on an unmodified guest. Our optimizations are based on adaptive in-place binary translation. Unlike the paravirtual approach, our solution is guest neutral. We implement our ideas in a prototype based on Qemu/KVM. After our modifications, KVM can boot an unmodified Linux guest around 2.5x faster. We contrast our optimization approach with previous similar binary translation based approaches for the x86 architecture [4]; in our experience, each architecture presents a unique set of challenges and optimization opportunities.", "paper_title": "Efficient Virtualization on Embedded Power Architecture (R) Platforms", "paper_id": "WOS:000321213100036"}