{"auto_keywords": [{"score": 0.039607689734690914, "phrase": "sigma"}, {"score": 0.008714377161083444, "phrase": "nlog_vertical_bar"}, {"score": 0.00481495049065317, "phrase": "large_alphabet"}, {"score": 0.004211731831120046, "phrase": "data_structure"}, {"score": 0.003996727479807572, "phrase": "alphabet_sigma"}, {"score": 0.003435092524339692, "phrase": "length_n."}, {"score": 0.003336468343971626, "phrase": "extended_rank"}, {"score": 0.0023932146259838033, "phrase": "dawg"}, {"score": 0.0023380300046435187, "phrase": "main_structure"}, {"score": 0.0022841153001549193, "phrase": "sigma_vertical_bar"}, {"score": 0.002129701089817251, "phrase": "basic_operations"}, {"score": 0.0021049977753042253, "phrase": "dawc"}], "paper_keywords": [""], "paper_abstract": "In this paper, we first consider some properties of strings who have the same suffix array. Next, we design a data structure to support rank and select operations on an alphabet Sigma using nlog vertical bar Z vertical bar + o(nlog vertical bar Sigma vertical bar) bits in O(log vertical bar Sigma vertical bar) time for a text of length n. It also supports an extended rank, namely rank <=, such that rank <=/alpha(T, i) returns the number of letters which are smaller than alpha in string T, plus the number of as up to position i. Also, it runs in O(log vertical bar Sigma vertical bar) time. By this structure, we implement the DAWG succinctly. The main structure only takes nlog vertical bar Sigma vertical bar + o(nlog vertical bar Sigma vertical bar) bits and supports basic operations of DAWC efficiently.", "paper_title": "Succinct text indexes on large alphabet", "paper_id": "WOS:000238091800050"}