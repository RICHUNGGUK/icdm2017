{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "atomic_blocks"}, {"score": 0.01045316022062727, "phrase": "projection_temporal_logic"}, {"score": 0.00894016934253059, "phrase": "concurrent_programming"}, {"score": 0.008673450222687033, "phrase": "temporal_logic"}, {"score": 0.007453713133863274, "phrase": "ptl"}, {"score": 0.004114641015648682, "phrase": "promising_approach"}, {"score": 0.003871653343842317, "phrase": "successful_model"}, {"score": 0.0038325685550319863, "phrase": "logic_programming"}, {"score": 0.003793876828939456, "phrase": "concurrency_verification"}, {"score": 0.0036988415150699945, "phrase": "existing_temporal_programming_models"}, {"score": 0.0034277338119963886, "phrase": "temporal_programming_model"}, {"score": 0.0031125795874844438, "phrase": "novel_construct"}, {"score": 0.0030655302236416502, "phrase": "atomic_execution"}, {"score": 0.003034558550137019, "phrase": "code_blocks"}, {"score": 0.0027835848648596513, "phrase": "internal_states"}, {"score": 0.002618995204424126, "phrase": "framing_mechanism"}, {"score": 0.0025146979283050923, "phrase": "new_model"}, {"score": 0.002414544068560716, "phrase": "executive_language"}, {"score": 0.0023066199295447686, "phrase": "loose_interleaving_semantics"}, {"score": 0.0021591707887653865, "phrase": "alpha_ptl"}], "paper_keywords": ["atomic blocks", " semantics", " temporal logic programming", " verification", " framing"], "paper_abstract": "Atomic blocks, a high-level language construct that allows programmers to explicitly specify the atomicity of operations without worrying about the implementations, are a promising approach that simplifies concurrent programming. On the other hand, temporal logic is a successful model in logic programming and concurrency verification, but none of existing temporal programming models supports concurrent programming with atomic blocks yet. In this paper, we propose a temporal programming model (alpha PTL) which extends the projection temporal logic (PTL) to support concurrent programming with atomic blocks. The novel construct that formulates atomic execution of code blocks, which we call atomic interval formulas, is always interpreted over two consecutive states, with the internal states of the block being abstracted away. We show that the framing mechanism in projection temporal logic also works in the new model, which consequently supports our development of an executive language. The language supports concurrency by introducing a loose interleaving semantics which tracks only the mutual exclusion between atomic blocks. We demonstrate the usage of alpha PTL by modeling and verifying both the fine-grained and coarse-grained concurrency.", "paper_title": "A temporal programming model with atomic blocks based on projection temporal logic", "paper_id": "WOS:000345385900005"}