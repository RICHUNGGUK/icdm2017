{"auto_keywords": [{"score": 0.0410255192792675, "phrase": "global_memory"}, {"score": 0.04074307587675251, "phrase": "local_memory"}, {"score": 0.010424972572108495, "phrase": "parallel_codes"}, {"score": 0.01027740207458159, "phrase": "different_processor_architectures"}, {"score": 0.010222597708307449, "phrase": "challenging_task"}, {"score": 0.009988436327971223, "phrase": "efit"}, {"score": 0.00988215886815436, "phrase": "viscoelastic_media"}, {"score": 0.009829441208841628, "phrase": "modern_parallel_computing_devices"}, {"score": 0.009501969797603975, "phrase": "open_computing_language"}, {"score": 0.009400820142600382, "phrase": "open-source_toolkit"}, {"score": 0.009185410233328722, "phrase": "amd"}, {"score": 0.009152588449068475, "phrase": "nvidia_gpus"}, {"score": 0.00908749734355055, "phrase": "classical_multi-core_cpus"}, {"score": 0.008831688275915328, "phrase": "additional_field_variables"}, {"score": 0.008800218135800841, "phrase": "opencl_performance"}, {"score": 0.00861371791662835, "phrase": "access_latency"}, {"score": 0.008267143658672699, "phrase": "eight_different_computing_devices"}, {"score": 0.008223742954024265, "phrase": "kepler"}, {"score": 0.008149866705522252, "phrase": "fastest_and_most_efficient_high_performance_computing_technology"}, {"score": 0.0074400707445081565, "phrase": "distributed_program"}, {"score": 0.007400283350876642, "phrase": "test_data"}, {"score": 0.006938995911830966, "phrase": "opencl_drivers"}, {"score": 0.00481495049065317, "phrase": "opencl_implementation"}, {"score": 0.004789133761786579, "phrase": "elastodynamic_finite_integration_technique"}, {"score": 0.004060942057827019, "phrase": "kelvin_voigt_mechanical_model"}, {"score": 0.0036400366574762086, "phrase": "full_implementation"}, {"score": 0.0035823993308540573, "phrase": "program"}, {"score": 0.0034866120599811525, "phrase": "cpc_program_library"}, {"score": 0.003474121383603877, "phrase": "queen's_university"}, {"score": 0.0034616754708470194, "phrase": "belfast"}, {"score": 0.0034492736487851576, "phrase": "n._ireland"}, {"score": 0.003424603020089842, "phrase": "standard_cpc"}, {"score": 0.0032161006480087525, "phrase": "tar.gz_programming_language"}, {"score": 0.0032046325171991704, "phrase": "python"}, {"score": 0.003170328757208178, "phrase": "gpu"}, {"score": 0.0031588975573976644, "phrase": "multicore"}, {"score": 0.002987895070276835, "phrase": "external_routines"}, {"score": 0.002977188499483909, "phrase": "numpy"}, {"score": 0.0024877966703088805, "phrase": "kelvin-voigt_mechanical_model"}, {"score": 0.0022215809808497486, "phrase": "propagation_simulation"}, {"score": 0.0021625055803260796, "phrase": "wave_propagation_simulations"}, {"score": 0.002143164202933733, "phrase": "typical_current_computer"}, {"score": 0.00212781546154382, "phrase": "multicore_cpus"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["EFIT", " Kelvin-Voigt", " GPUs", " PyOpenCL", " OpenCL"], "paper_abstract": "Development of parallel codes that are both scalable and portable for different processor architectures is a challenging task. To overcome this limitation we investigate the acceleration of the Elastodynamic Finite Integration Technique (EFIT) to model 2-D wave propagation in viscoelastic media by using modern parallel computing devices (PCDs), such as multi-core CPUs (central processing units) and GPUs (graphics processing units). For that purpose we choose the industry open standard Open Computing Language (OpenCL) and an open-source toolkit called PyOpenCL. The implementation is platform independent and can be used on AMD or NVIDIA GPUs as well as classical multi-core CPUs. The code is based on the Kelvin Voigt mechanical model which has the gain of not requiring additional field variables. OpenCL performance can be in principle, improved once one can eliminate global memory access latency by using local memory. Our main contribution is the implementation of local memory and an analysis of performance of the local versus the global memory using eight different computing devices (including Kepler, one of the fastest and most efficient high performance computing technology) with various operating systems. The full implementation of the code is included. Program summary Program title: EFIT2D-PyOpenCL Catalogue identifier: AETF_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AETF_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 38079 No. of bytes in distributed program, including test data, etc.: 2949059 Distribution format: tar.gz Programming language: Python. Computer: Computers having GPU or Multicore CPU with OpenCL drivers. Operating system: Multi-platform. Has the code been vectorized or parallelized?: Yes. RAM: 2 Gb Classification: 6.5. External routines: Numpy, scipy, matplotlib, glumpy, pyopencl Nature of problem: Development of parallel codes that are both scalable and portable for different processor architectures is a challenging task. To overcome this limitation we investigate the acceleration of the Elastodynamic Finite Integration Technique (EFIT) to model 2-D wave propagation in viscoelastic media by using modern parallel computing devices (PCDs), such as multi-core CPUs (central processing units) and GPUs (graphics processing units). Solution method: We choose the industry open standard Open Computing Language (OpenCL) and an open-source toolkit called PyOpenCL. The implementation is platform independent and can be used on AMD or NVIDIA GPUs as well as classical multi-core CPUs. The code is based on the Kelvin-Voigt mechanical model which has the gain of not requiring additional field variables. OpenCL performance can be in principle, improved once one can eliminate global memory access latency by using local memory. Our main contribution is the implementation of local memory and an analysis of performance of the local versus the global memory using eight different computing devices (including Kepler, one of the fastest and most efficient high performance computing technology) with various operating systems. Restrictions: Wave propagation simulation only in 2D Scenarios, OpenCL drivers needed. Running time: This code can process wave propagation simulations within a few minutes in a typical current computer with GPUs or multicore CPUs. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Optimized OpenCL implementation of the Elastodynamic Finite Integration Technique for viscoelastic media", "paper_id": "WOS:000340340200030"}