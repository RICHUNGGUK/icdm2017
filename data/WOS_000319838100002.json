{"auto_keywords": [{"score": 0.03455018268948868, "phrase": "non-deterministic_systems"}, {"score": 0.00481495049065317, "phrase": "test_sequence"}, {"score": 0.0047273577269638725, "phrase": "maximal_coverage"}, {"score": 0.004641351004344458, "phrase": "reactive_system"}, {"score": 0.00436575511349828, "phrase": "repeated_game"}, {"score": 0.00410645614623058, "phrase": "system_state_space"}, {"score": 0.003958299299658418, "phrase": "coverage_criterion"}, {"score": 0.0035887342563437935, "phrase": "coverage_goals"}, {"score": 0.0033139366449568565, "phrase": "maximal_coverage_problem"}, {"score": 0.003233786458344169, "phrase": "pspace"}, {"score": 0.003118184390601243, "phrase": "np"}, {"score": 0.0030414140732789186, "phrase": "deterministic_systems"}, {"score": 0.0029677378488677983, "phrase": "special_case"}, {"score": 0.002878140062594849, "phrase": "re-initializing_\"reset\"_action"}, {"score": 0.0027741761880779535, "phrase": "new_test_input"}, {"score": 0.002723607240517261, "phrase": "re-initialized_system"}, {"score": 0.002499508839669243, "phrase": "reset_games"}, {"score": 0.002469032978674379, "phrase": "randomized_testing_strategies"}, {"score": 0.002409188797323273, "phrase": "exponentially_large_memory_requirement"}, {"score": 0.0023798115577749225, "phrase": "deterministic_testing_strategies"}, {"score": 0.0022938068444116827, "phrase": "memory_requirement"}, {"score": 0.00226583335721762, "phrase": "deterministic_strategies"}, {"score": 0.0021309898622781124, "phrase": "pushdown_systems"}, {"score": 0.0021049977753042253, "phrase": "timed_systems"}], "paper_keywords": ["Coverage problem", " computational complexity", " graph games", " timed and pushdown systems"], "paper_abstract": "We study the problem of generating a test sequence that achieves maximal coverage for a reactive system under test. We formulate the problem as a repeated game between the tester and the system, where the system state space is partitioned according to some coverage criterion and the objective of the tester is to maximize the set of partitions (or coverage goals) visited during the game. We show the complexity of the maximal coverage problem for non-deterministic systems is PSPACE-complete, but is NP-complete for deterministic systems. For the special case of non-deterministic systems with a re-initializing \"reset\" action, which represent running a new test input on a re-initialized system, we show that the complexity is coNP-complete. Our proof technique for reset games uses randomized testing strategies that circumvent the exponentially large memory requirement of deterministic testing strategies. We also discuss the memory requirement for deterministic strategies and extensions of our results to other models, such as pushdown systems and timed systems.", "paper_title": "THE COMPLEXITY OF COVERAGE", "paper_id": "WOS:000319838100002"}