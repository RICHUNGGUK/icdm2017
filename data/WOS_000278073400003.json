{"auto_keywords": [{"score": 0.03686325203206044, "phrase": "alloy"}, {"score": 0.00481495049065317, "phrase": "software_product_lines"}, {"score": 0.004758457292840376, "phrase": "recent_advances"}, {"score": 0.0047026237903774895, "phrase": "mechanical_techniques"}, {"score": 0.004647442352794694, "phrase": "systematic_testing"}, {"score": 0.004459334186889869, "phrase": "subtle_bugs"}, {"score": 0.0038930368103015467, "phrase": "novel_specification-based_approach"}, {"score": 0.0036914757355166966, "phrase": "software_product_line"}, {"score": 0.003541923233726252, "phrase": "first-order_logic_formulas"}, {"score": 0.0034185505275141077, "phrase": "sat-based_analysis"}, {"score": 0.003338690782620756, "phrase": "test_inputs"}, {"score": 0.0032223742018434856, "phrase": "product_line"}, {"score": 0.0030195184114140063, "phrase": "automatic_technique"}, {"score": 0.0027796495180095657, "phrase": "incremental_refinement"}, {"score": 0.0027469703311742647, "phrase": "test_suites"}, {"score": 0.0026827569390113822, "phrase": "different_data_structure_product_lines"}, {"score": 0.002620040660435039, "phrase": "incremental_approach"}, {"score": 0.0025286975935774245, "phrase": "magnitude_speedup"}, {"score": 0.002498961351132696, "phrase": "conventional_techniques"}, {"score": 0.0023834640793589435, "phrase": "dedicated_integer_constraint"}, {"score": 0.0023415390666563177, "phrase": "feature_properties"}, {"score": 0.0023003498123420237, "phrase": "integer_constraints"}, {"score": 0.0021049977753042253, "phrase": "alloy_formulas"}], "paper_keywords": ["Software/program verification", " testing and debugging", " software engineering."], "paper_abstract": "Recent advances in mechanical techniques for systematic testing have increased our ability to automatically find subtle bugs, and hence, to deploy more dependable software. This paper builds on one such systematic technique, scope-bounded testing, to develop a novel specification-based approach for efficiently generating tests for products in a software product line. Given properties of features as first-order logic formulas in Alloy, our approach uses SAT-based analysis to automatically generate test inputs for each product in a product line. To ensure soundness of generation, we introduce an automatic technique for mapping a formula that specifies a feature into a transformation that defines incremental refinement of test suites. Our experimental results using different data structure product lines show that an incremental approach can provide an order of magnitude speedup over conventional techniques. We also present a further optimization using dedicated integer constraint solvers for feature properties that introduce integer constraints, and show how to use a combination of solvers in tandem for solving Alloy formulas.", "paper_title": "Incremental Test Generation for Software Product Lines", "paper_id": "WOS:000278073400003"}