{"auto_keywords": [{"score": 0.004783607451937166, "phrase": "data_structure_problems"}, {"score": 0.004752467467173928, "phrase": "computational_geometry"}, {"score": 0.004675510532510098, "phrase": "matousek"}, {"score": 0.004481132747216135, "phrase": "partition_tree_method"}, {"score": 0.00445195298244008, "phrase": "d-dimensional_simplex_range"}, {"score": 0.003945001936004421, "phrase": "fixed_epsilon"}, {"score": 0.003518508991483203, "phrase": "new_method"}, {"score": 0.003295763459241421, "phrase": "high_probability"}, {"score": 0.0029975152932436144, "phrase": "almost_all_layers"}, {"score": 0.0029392523663327253, "phrase": "children's_cells"}, {"score": 0.0026731799329374768, "phrase": "query_bounds"}, {"score": 0.0026212045623658932, "phrase": "previous_methods"}, {"score": 0.002587115505155995, "phrase": "similar_improvement"}, {"score": 0.0025534686449215772, "phrase": "shallow_version"}, {"score": 0.0025368092524479615, "phrase": "partition_trees"}, {"score": 0.0023682987863242427, "phrase": "halfspace_range_emptiness"}, {"score": 0.002352844633115289, "phrase": "even_dimensions"}, {"score": 0.002314647987893668, "phrase": "numerous_consequences"}, {"score": 0.002247446386787241, "phrase": "low_crossing_number"}, {"score": 0.0022109570100232352, "phrase": "line_segments"}, {"score": 0.0021049977753042253, "phrase": "extreme_points"}], "paper_keywords": ["Simplex range searching", " Halfspace range searching", " Geometric data structures"], "paper_abstract": "We revisit one of the most fundamental classes of data structure problems in computational geometry: range searching. Matousek (Discrete Comput. Geom. 10:157-182, 1993) gave a partition tree method for d-dimensional simplex range searching achieving O(n) space and O(n(1-1/d)) query time. Although this method is generally believed to be optimal, it is complicated and requires O(n(1+epsilon)) preprocessing time for any fixed epsilon > 0. An earlier method by Matousek (Discrete Comput. Geom. 8:315-334, 1992) requires O(n log n) preprocessing time but O(n(1-1/d) log(O(1)) n) query time. We give a new method that achieves simultaneously O(n log n) preprocessing time, O(n) space, and O(n(1-1/d)) query time with high probability. Our method has several advantages: It is conceptually simpler than Matousek's O(n(1-1/d))-time method. Our partition trees satisfy many ideal properties (e. g., constant degree, optimal crossing number at almost all layers, and disjointness of the children's cells at each node). It leads to more efficient multilevel partition trees, which are needed in many data structuring applications (each level adds at most one logarithmic factor to the space and query bounds, better than in all previous methods). A similar improvement applies to a shallow version of partition trees, yielding O(n log n) time, O(n) space, and O(n(1-1/left perpendiculard/2right perpendicular)) query time for halfspace range emptiness in even dimensions d >= 4. Numerous consequences follow (e. g., improved results for computing spanning trees with low crossing number, ray shooting among line segments, intersection searching, exact nearest neighbor search, linear programming queries, finding extreme points, ...).", "paper_title": "Optimal Partition Trees", "paper_id": "WOS:000304114600002"}