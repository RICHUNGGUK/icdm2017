{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "circular_nonterminal_attributes"}, {"score": 0.004460309246062286, "phrase": "practical_declarative"}, {"score": 0.0043258453436258405, "phrase": "programming_language_compilers"}, {"score": 0.003976523732243618, "phrase": "nonterminal_attributes"}, {"score": 0.0038271712887391015, "phrase": "higher-order_attributes"}, {"score": 0.0037402558657576124, "phrase": "circular_attributes"}, {"score": 0.0036553070575015344, "phrase": "context-dependent_declarative_rewrites"}, {"score": 0.0035722806911457545, "phrase": "abstract_syntax_tree"}, {"score": 0.00346449481422526, "phrase": "previous_work"}, {"score": 0.002731971103291716, "phrase": "generalized_evaluation_algorithm"}, {"score": 0.002272794656458419, "phrase": "rag_rewrites"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Attribute grammars", " Reference attributes", " Higher-order", " Rewriting"], "paper_abstract": "Reference attribute grammars (RAGs) provide a practical declarative means to implement programming language compilers and other tools. RAGs have previously been extended to support nonterminal attributes (also known as higher-order attributes), circular attributes, and context-dependent declarative rewrites of the abstract syntax tree. In this previous work, interdependencies between these extensions are not considered. In this article, we investigate how these extensions can interact, and still be well defined. We introduce a generalized evaluation algorithm that can handle grammars where circular attributes and rewrites are interdependent. To this end, we introduce circular nonterminal attributes, and show how RAG rewrites are equivalent to such attributes. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Declarative rewriting through circular nonterminal attributes", "paper_id": "WOS:000366778300002"}