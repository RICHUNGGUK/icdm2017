{"auto_keywords": [{"score": 0.03355526432097249, "phrase": "model_elements"}, {"score": 0.00481495049065317, "phrase": "object-oriented_program_model"}, {"score": 0.004692980391580608, "phrase": "novel_test_coverage_analysis_technique"}, {"score": 0.004367581653370531, "phrase": "single_coherent_model"}, {"score": 0.004256895619944631, "phrase": "object-oriented_system_dependence_graph"}, {"score": 0.0040438338011467845, "phrase": "unified_test_coverage_analysis_framework"}, {"score": 0.003941319912895672, "phrase": "cosdg"}, {"score": 0.0038810583785936505, "phrase": "procedural_and_oo_features"}, {"score": 0.0036490529923833884, "phrase": "different_program_features"}, {"score": 0.0035021127041237887, "phrase": "test_suite"}, {"score": 0.0033957904376127187, "phrase": "executed_program_features"}, {"score": 0.0033096502887394233, "phrase": "subsequent_coverage_evaluation"}, {"score": 0.0032256881625734777, "phrase": "test_executions"}, {"score": 0.0031116963435584982, "phrase": "executed_features"}, {"score": 0.0023816257768353344, "phrase": "kanz."}, {"score": 0.002357249810661667, "phrase": "experimental_results"}, {"score": 0.0021821915946356168, "phrase": "oo_coverage_measures"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Coverage analysis", " software testing", " object-oriented program", " program model"], "paper_abstract": "We propose a novel test coverage analysis technique for object-oriented (OO) programs. An important novelty of our technique is the use of a single coherent model, Call-based Object-Oriented System Dependence Graph (COSDG), which helps in presenting a unified test coverage analysis framework for OO programs. COSDG represents both procedural and OO features. Our technique not only uses the model to identify the different program features that are to be exercised by a test suite, but also captures the executed program features in the model for subsequent coverage evaluation and reporting. During test executions, the model elements corresponding to the executed features are marked. This helps in determining coverage on-the-fly, without the need to store the execution traces in a file. We describe the computation of various coverage measures, both procedural and OO, from the model elements. We have implemented our model-based technique in a prototype tool, named KANZ. The experimental results obtained by using the tool demonstrate the efficacy and efficiency of our technique in determining OO coverage measures. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Test coverage analysis based on an object-oriented program model", "paper_id": "WOS:000296138800001"}