{"auto_keywords": [{"score": 0.040691162217611467, "phrase": "amal"}, {"score": 0.02745516705327421, "phrase": "snuca"}, {"score": 0.00481495049065317, "phrase": "scalable_working_set_size_estimation"}, {"score": 0.0047026237903774895, "phrase": "chip_multiprocessors"}, {"score": 0.004539005582217309, "phrase": "working_set_size"}, {"score": 0.004329630571352367, "phrase": "partition_cache"}, {"score": 0.004295681900150244, "phrase": "virtual_machines"}, {"score": 0.0042452552248398445, "phrase": "leakage_power"}, {"score": 0.004178935413340453, "phrase": "over-allocated_cache"}, {"score": 0.003908396188878932, "phrase": "average_memory_access_latency"}, {"score": 0.0033651019362620866, "phrase": "uniprocessor_platform"}, {"score": 0.00327356326590461, "phrase": "chip_multiprocessor"}, {"score": 0.0031970796597571367, "phrase": "large_dispersed_cache"}, {"score": 0.002656445226355143, "phrase": "-off_the_over-allocated_cache_ways"}, {"score": 0.0026357342659711672, "phrase": "static"}, {"score": 0.0026148807877309417, "phrase": "dynamic_nonuniform"}, {"score": 0.0026045914281028473, "phrase": "cache_architectures"}, {"score": 0.0025638362414466278, "phrase": "dnuca"}, {"score": 0.0025237171554924128, "phrase": "tiled_cmp."}, {"score": 0.0024842242921857705, "phrase": "adaptable_way"}, {"score": 0.002474447780553576, "phrase": "snuca_and_dnuca_caches"}, {"score": 0.002105055454574724, "phrase": "cmr"}], "paper_keywords": ["Chip multiprocessors (CMPs)", " working set size (WSS) estimation", " variable cache associativity"], "paper_abstract": "It is essential to accurately estimate the working set size (WSS) of an application for various optimizations such as to partition cache among virtual machines or reduce leakage power dissipated in an over-allocated cache by switching it OFF. However, the state-of-the-art heuristics such as average memory access latency (AMAL) or cache miss ratio (CMR) are poorly correlated to the WSS of an application due to 1) over-sized caches and 2) their dispersed nature. Past studies focus on estimating WSS of an application executing on a uniprocessor platform. Estimating the same for a chip multiprocessor (CMP) with a large dispersed cache is challenging due to the presence of concurrently executing threads/processes. Hence, we propose a scalable, highly accurate method to estimate WSS of an application. We call this method \"tagged WSS (TWSS)\" estimation method. We demonstrate the use of TWSS to switch-OFF the over-allocated cache ways in Static and Dynamic NonUniform Cache Architectures (SNUCA, DNUCA) on a tiled CMP. In our implementation of adaptable way SNUCA and DNUCA caches, decision of altering associativity is taken by each L2 controller. Hence, this approach scales better with the number of cores present on a CMP. It gives overall (geometric mean) 26% and 19% higher energy-delay product savings compared to AMAL and CMR heuristics on SNUCA, respectively.", "paper_title": "Toward a Scalable Working Set Size Estimation Method and Its Application for Chip Multiprocessors", "paper_id": "WOS:000337905200019"}