{"auto_keywords": [{"score": 0.04738125862733534, "phrase": "smv"}, {"score": 0.015719706115306438, "phrase": "dense_substructures"}, {"score": 0.004785682967399109, "phrase": "fast_sparse_matrix_vector_multiplication"}, {"score": 0.0045717473871437425, "phrase": "sparse_matrix_vector_multiplication"}, {"score": 0.004134015084535274, "phrase": "partial_differential_equation_models"}, {"score": 0.00405903443476192, "phrase": "indistinguishable_vertices"}, {"score": 0.0039250703697261595, "phrase": "graph_representation"}, {"score": 0.003889305263348945, "phrase": "sparse_matrix"}, {"score": 0.003715291088032481, "phrase": "effectively_dense_blocks"}, {"score": 0.003516684084316783, "phrase": "suitable_data_structure"}, {"score": 0.003379859206640552, "phrase": "load_operations"}, {"score": 0.0033083952949044173, "phrase": "original_sparsity_structure"}, {"score": 0.0030746180465357374, "phrase": "smv_kernel"}, {"score": 0.0030372887922081706, "phrase": "effectively_dense_substructures"}, {"score": 0.0029549417860846284, "phrase": "intel_nehalem"}, {"score": 0.0029369469007332963, "phrase": "amd_shanghai_processors"}, {"score": 0.0028836151926021234, "phrase": "larger_matrices"}, {"score": 0.002754472887620181, "phrase": "traditional_compressed_sparse_row_scheme"}, {"score": 0.0027293449981640105, "phrase": "blocked_compressed_form"}, {"score": 0.0025991404592599437, "phrase": "amd_processor"}, {"score": 0.0024675803902400916, "phrase": "blocked_compressed_scheme"}, {"score": 0.0024450632826282875, "phrase": "average_performance"}, {"score": 0.002400642131244713, "phrase": "additional_results"}, {"score": 0.002371476222721094, "phrase": "best_performing_scheme"}, {"score": 0.0022721515777319044, "phrase": "effective_density_measure"}, {"score": 0.002230864807344675, "phrase": "method_selection"}, {"score": 0.002157106830907686, "phrase": "auto-tuned_optimized_smv_kernel"}, {"score": 0.002130893364230495, "phrase": "sparse_matrix_properties"}, {"score": 0.0021179060760390597, "phrase": "hardware_attributes"}, {"score": 0.0021049977753042253, "phrase": "high_performance"}], "paper_keywords": ["compressed storage formats", " envelope ordering", " performance", " sparse matrix vector multiplication", " supernodes"], "paper_abstract": "The execution time of many scientific computing applications is dominated by the time spent in performing sparse matrix vector multiplication (SMV; y <- A . x). We consider improving the performance of SMV on multicores by exploiting the dense substructures that are inherently present in many sparse matrices derived from partial differential equation models. First, we identify indistinguishable vertices, i.e., vertices with the same adjacency structure, in a graph representation of the sparse matrix (A) and group them into a supernode. Next, we identify effectively dense blocks within the matrix by grouping rows and columns in each supernode. Finally, by using a suitable data structure for this representation of the matrix, we reduce the number of load operations during SMV while exactly preserving the original sparsity structure of A. In addition, we use ordering techniques to enhance locality in accesses to the vector, x, to yield an SMV kernel that exploits the effectively dense substructures in the matrix. We evaluate our scheme on Intel Nehalem and AMD Shanghai processors. We observe that for larger matrices on the Intel Nehalem processor, our method improves performance on average by 37.35% compared with the traditional compressed sparse row scheme (a blocked compressed form improves performance on average by 30.27%). Benefits of our new format are similar for the AMD processor. More importantly, if we pick for each matrix the best among our method and the blocked compressed scheme, the average performance improvements increase to 40.85%. Additional results indicate that the best performing scheme varies depending on the matrix and the system. We therefore propose an effective density measure that could be used for method selection, thus adding to the variety of options for an auto-tuned optimized SMV kernel that can exploit sparse matrix properties and hardware attributes for high performance.", "paper_title": "Exploiting dense substructures for fast sparse matrix vector multiplication", "paper_id": "WOS:000293573900008"}