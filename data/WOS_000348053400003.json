{"auto_keywords": [{"score": 0.04522885915367596, "phrase": "instruction_instances"}, {"score": 0.01502604185655509, "phrase": "software_countermeasures"}, {"score": 0.00481495049065317, "phrase": "power_analysis_countermeasures"}, {"score": 0.004530794611704416, "phrase": "cryptographic_algorithms"}, {"score": 0.004485085675709643, "phrase": "power-based_side-channel_attacks"}, {"score": 0.0040525061916685924, "phrase": "dynamic_analysis"}, {"score": 0.003971111060168551, "phrase": "information_theoretic_metric"}, {"score": 0.0037555742428544096, "phrase": "input_program"}, {"score": 0.0036801209922064817, "phrase": "static_analysis"}, {"score": 0.0036245239349157236, "phrase": "information_leakage"}, {"score": 0.0032746712603464235, "phrase": "software_countermeasure"}, {"score": 0.0032251796659158696, "phrase": "random_precharging"}, {"score": 0.0031927077444368905, "phrase": "boolean"}, {"score": 0.0031284221314354095, "phrase": "software_protection"}, {"score": 0.00309681702203087, "phrase": "significant_overhead"}, {"score": 0.003034558550137019, "phrase": "cryptosystem_runtime"}, {"score": 0.0030038988468808845, "phrase": "memory_usage"}, {"score": 0.0029137604783116065, "phrase": "minimum_number"}, {"score": 0.0028263192354046245, "phrase": "desired_level"}, {"score": 0.0026727691326636116, "phrase": "aes"}, {"score": 0.0026457367614424756, "phrase": "clefia"}, {"score": 0.0023301793939902015, "phrase": "security_experts"}, {"score": 0.002248755794042486, "phrase": "main_cryptosystem_developers"}, {"score": 0.002203509076886664, "phrase": "significant_productivity_gains"}, {"score": 0.002181227522730908, "phrase": "cryptosystem_developers"}, {"score": 0.0021049977753042253, "phrase": "side-channel_attacks"}], "paper_keywords": ["Side-channel attacks", " power analysis attacks", " software countermeasures", " compiler"], "paper_abstract": "We introduce a compiler that automatically inserts software countermeasures to protect cryptographic algorithms against power-based side-channel attacks. The compiler first estimates which instruction instances leak the most information through side-channels. This information is obtained either by dynamic analysis, evaluating an information theoretic metric over the power traces acquired during the execution of the input program, or by static analysis. As information leakage implies a loss of security, the compiler then identifies (groups of) instruction instances to protect with a software countermeasure such as random precharging or Boolean masking. As software protection incurs significant overhead in terms of cryptosystem runtime and memory usage, the compiler protects the minimum number of instruction instances to achieve a desired level of security. The compiler is evaluated on two block ciphers, AES and Clefia; our experiments demonstrate that the compiler can automatically identify and protect the most important instruction instances. To date, these software countermeasures have been inserted manually by security experts, who are not necessarily the main cryptosystem developers. Our compiler offers significant productivity gains for cryptosystem developers who wish to protect their implementations from side-channel attacks.", "paper_title": "Automatic Application of Power Analysis Countermeasures", "paper_id": "WOS:000348053400003"}