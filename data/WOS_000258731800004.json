{"auto_keywords": [{"score": 0.04428057037866872, "phrase": "dynamic_analysis"}, {"score": 0.00481495049065317, "phrase": "dynamic_software_analysis"}, {"score": 0.004749106104067268, "phrase": "grammar_inference_principles"}, {"score": 0.0047057084749407485, "phrase": "grammar_inference"}, {"score": 0.004620093797504386, "phrase": "machine_learning_techniques"}, {"score": 0.004044064541716598, "phrase": "software_engineering"}, {"score": 0.0038447943243941685, "phrase": "software_systems"}, {"score": 0.0036218682585355895, "phrase": "broadly_similar_aims"}, {"score": 0.0034118234596993836, "phrase": "unknown_system"}, {"score": 0.0032886455096627324, "phrase": "general_rules"}, {"score": 0.0032585499655442404, "phrase": "program_behaviour"}, {"score": 0.002999749669403939, "phrase": "necessary_program_executions"}, {"score": 0.00290473242917264, "phrase": "incomplete_input_samples"}, {"score": 0.0028127163745564777, "phrase": "grammar_inference_community"}, {"score": 0.0026494723416072316, "phrase": "increasingly_sophisticated_solutions"}, {"score": 0.0024956789310376635, "phrase": "sparse_information"}, {"score": 0.002461472107682778, "phrase": "underlying_system"}, {"score": 0.002265833357217618, "phrase": "similar_effect"}, {"score": 0.0022450768409733807, "phrase": "dynamic_analysis_problems"}, {"score": 0.002194011800331242, "phrase": "small_experiments"}, {"score": 0.0021739117830106365, "phrase": "random_state_machines"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["reverse engineering", " dynamic analysis", " grammar inference"], "paper_abstract": "Grammar inference is it family of machine learning techniques that aim to infer grammars from a sample of sentences in some (unknown.) language. Dynamic analysis is a family of techniques in the domain of software engineering that attempts to infer rules that govern the behaviour of software systems from it sample of executions. Despite their disparate domains, both fields have broadly similar aims, they try to infer rules that govern the behaviour of some unknown system from a sample of observations. Deriving general rules about program behaviour from dynamic analysis is difficult because it is virtually impossible to identity and supply it complete sample of necessary program executions. The problems that arise with incomplete input samples have been extensively investigated in the grammar inference community. This has resulted in a number of advances that have produced increasingly sophisticated solutions that are more successful at accurately inferring grammars from (potentially) sparse information about the underlying system. This paper investigates the similarities and shows how many of these advances call he applied with similar effect to dynamic analysis problems by a series of small experiments on random state machines. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "Improving dynamic software analysis by applying grammar inference principles", "paper_id": "WOS:000258731800004"}