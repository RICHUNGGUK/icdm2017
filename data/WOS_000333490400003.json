{"auto_keywords": [{"score": 0.04965786117733892, "phrase": "spectrum-based_fault_localization"}, {"score": 0.04336705121455173, "phrase": "statement_level"}, {"score": 0.00481495049065317, "phrase": "fault_localization_efficiency"}, {"score": 0.0046477357199085035, "phrase": "automatic_fault_localization"}, {"score": 0.004526129302830441, "phrase": "program_execution"}, {"score": 0.004407690586271672, "phrase": "required_inputs"}, {"score": 0.003964007795174772, "phrase": "potential_faulty_statements"}, {"score": 0.003877329308854808, "phrase": "considerable_overhead"}, {"score": 0.003826231150275071, "phrase": "fault_localization_process"}, {"score": 0.0035178323426661626, "phrase": "new_approach"}, {"score": 0.0034714553759044664, "phrase": "dynamic_code_coverage"}, {"score": 0.003440922450013624, "phrase": "dcc"}, {"score": 0.003335948601271999, "phrase": "instrumentation_overhead"}, {"score": 0.0032057142600527, "phrase": "coarser_instrumentation"}, {"score": 0.0030942116765996426, "phrase": "large_components"}, {"score": 0.002934166052954463, "phrase": "instrumentation_detail"}, {"score": 0.002908306074124806, "phrase": "faulty_components"}, {"score": 0.002685558057339722, "phrase": "empirical_evaluation"}, {"score": 0.0026036031415940563, "phrase": "six_real-world_software_projects"}, {"score": 0.002512990657100351, "phrase": "dynamic_code_coverage_approach"}, {"score": 0.002479827946513971, "phrase": "execution_overhead"}, {"score": 0.0022696277881969896, "phrase": "execution_time_reductions"}, {"score": 0.002200337772403983, "phrase": "report_size_reductions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dynamic coverage", " Software diagnosis", " Spectrum-based fault localization"], "paper_abstract": "Spectrum-based fault localization is amongst the most effective techniques for automatic fault localization. However, abstractions of program execution traces, one of the required inputs for this technique, require instrumentation of the software under test at a statement level of granularity in order to compute a list of potential faulty statements. This introduces a considerable overhead in the fault localization process, which can even become prohibitive in, e.g., resource constrained environments. To counter this problem, we propose a new approach, coined dynamic code coverage (DCC), aimed at reducing this instrumentation overhead. This technique, by means of using coarser instrumentation, starts by analyzing coverage traces for large components of the system under test. It then progressively increases the instrumentation detail for faulty components, until the statement level of detail is reached. To assess the validity of our proposed approach, an empirical evaluation was performed, injecting faults in six real-world software projects. The empirical evaluation demonstrates that the dynamic code coverage approach reduces the execution overhead that exists in spectrum-based fault localization, and even presents,a more concise potential fault ranking to the user. We have observed execution time reductions of 27% on average and diagnostic report size reductions of 77% on average. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A dynamic code coverage approach to maximize fault localization efficiency", "paper_id": "WOS:000333490400003"}