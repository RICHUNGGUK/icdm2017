{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "graph_grammars"}, {"score": 0.004123781267600542, "phrase": "dynamic_data_structures"}, {"score": 0.00307657476125683, "phrase": "finite_abstractions"}, {"score": 0.0029722900280316216, "phrase": "pointer-manipulating_programs"}, {"score": 0.0027741761880779535, "phrase": "model_checking"}, {"score": 0.002680114113899346, "phrase": "experimental_results"}, {"score": 0.0025449518236394103, "phrase": "lindstrom's_variant"}, {"score": 0.002416589459425828, "phrase": "deutsch-schorr-waite_tree_traversal_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hyperedge replacement grammars", " Java bytecode", " Dynamic data structures", " Verification"], "paper_abstract": "This paper argues that graph grammars naturally model dynamic data structures such as lists, trees and combinations thereof. These grammars can be exploited to obtain finite abstractions of pointer-manipulating programs, thus enabling model checking. Experimental results for verifying Lindstrom's variant of the Deutsch-Schorr-Waite tree traversal algorithm illustrate this. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Verifying pointer programs using graph grammars", "paper_id": "WOS:000345725100026"}