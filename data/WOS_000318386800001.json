{"auto_keywords": [{"score": 0.030703754440566028, "phrase": "first_strategy"}, {"score": 0.027382103872904396, "phrase": "monetary_costs"}, {"score": 0.00481495049065317, "phrase": "large_programs"}, {"score": 0.0046593017130868, "phrase": "large_program"}, {"score": 0.004551199992546761, "phrase": "promising_approach"}, {"score": 0.00432208488976429, "phrase": "multiple_sequences"}, {"score": 0.004162703509434786, "phrase": "multiple_virtual_machines"}, {"score": 0.004123832137446977, "phrase": "vms"}, {"score": 0.003861288537079326, "phrase": "directed_acyclic_graph"}, {"score": 0.003649585593445665, "phrase": "precedence_constraints"}, {"score": 0.003581620064675766, "phrase": "cloud_users"}, {"score": 0.0034171734618737436, "phrase": "pricing_models"}, {"score": 0.003369322866499541, "phrase": "cloud_providers"}, {"score": 0.0033377940531761985, "phrase": "early_task_scheduling_algorithms"}, {"score": 0.003154701855951328, "phrase": "monetary_cost"}, {"score": 0.002995677265350124, "phrase": "cost-efficient_task-scheduling_algorithm"}, {"score": 0.0027395968397212053, "phrase": "pareto_dominance"}, {"score": 0.0027012086158226456, "phrase": "second_strategy"}, {"score": 0.002552946390854313, "phrase": "non-critical_tasks"}, {"score": 0.002493592357827492, "phrase": "extensive_numerical_experiments"}, {"score": 0.002470237978694949, "phrase": "large_dags"}, {"score": 0.0023789822182914877, "phrase": "real_applications"}, {"score": 0.0023456351719724957, "phrase": "simulation_results"}, {"score": 0.0021857667493036786, "phrase": "best_known_task-scheduling_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Cloud computing", " Cost-efficient scheduling", " Parallel task scheduling", " Directed acyclic graph"], "paper_abstract": "Executing a large program using clouds is a promising approach, as this class of programs may be decomposed into multiple sequences of tasks that can be executed on multiple virtual machines (VMS) in a cloud. Such sequences of tasks can be represented as a directed acyclic graph (DAG), where nodes are tasks and edges are precedence constraints between tasks. Cloud users pay for what their programs actually use according to the pricing models of the cloud providers. Early task scheduling algorithms are focused on minimizing make-span, without mechanisms to reduce the monetary cost incurred in the setting of clouds. We present a cost-efficient task-scheduling algorithm using two heuristic strategies. The first strategy dynamically maps tasks to the most cost-efficient VMs based on the concept of Pareto dominance. The second strategy, a complement to the first strategy, reduces the monetary costs of non-critical tasks. We carry out extensive numerical experiments on large DAGs generated at random as well as on real applications. The simulation results show that our algorithm can substantially reduce monetary costs while producing make-span as good as the best known task-scheduling algorithm can provide. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Cost-efficient task scheduling for executing large programs in the cloud", "paper_id": "WOS:000318386800001"}