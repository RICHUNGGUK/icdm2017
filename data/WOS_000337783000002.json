{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "runtime_type_errors"}, {"score": 0.04961049691122095, "phrase": "component-based_java_programs"}, {"score": 0.013986395475240136, "phrase": "class_loading"}, {"score": 0.004606479650820579, "phrase": "class_loaders"}, {"score": 0.004033464035028803, "phrase": "jvm._traditional_static_analysis_approaches"}, {"score": 0.003802135020791801, "phrase": "semi-static_detection_work"}, {"score": 0.003496868378204657, "phrase": "previous_work"}, {"score": 0.00307657476125683, "phrase": "typical_points"}, {"score": 0.0029722900280316216, "phrase": "behavior_information"}, {"score": 0.002943147037670826, "phrase": "java_class_loaders"}, {"score": 0.0028715299874549245, "phrase": "defining_class_loader"}, {"score": 0.0028293966058473476, "phrase": "allocation_sites"}, {"score": 0.002706659627293686, "phrase": "runtime_types"}, {"score": 0.0026538282523433684, "phrase": "reference_variable"}, {"score": 0.0025014259919355474, "phrase": "runtime_type_error"}, {"score": 0.0023003498123420237, "phrase": "runtime_errors"}, {"score": 0.0022665781920241245, "phrase": "traditional_static_checking_methods"}, {"score": 0.0021896891011033105, "phrase": "false_negative_test"}, {"score": 0.0021682027434117095, "phrase": "scalability_test"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Runtime error detection", " Class loading", " Component-based"], "paper_abstract": "Context: The employment of class loaders in component-based Java programs may introduce runtime type errors, which may happen at any statement related to class loading, and may be wrapped into various types of exceptions raised by JVM. Traditional static analysis approaches are inefficient to detect them. Objective: Our previous work proposed a semi-static detection work based on points-to analysis to detect such runtime type errors. In this paper, we extend previous work by referencing the information obtained from class loading to detect runtime type errors in component-based Java programs, without the need to running them. Method: Our approach extends the typical points-to analysis by gathering the behavior information of Java class loaders and figuring out the defining class loader of the allocation sites. By doing that, we obtain the runtime types of objects a reference variable may point to, and make use of such information to facilitate runtime type error detecting. Results: Results on four case studies show that our approach is feasible, can effectively detect runtime errors missed by traditional static checking methods, and performs acceptably in both false negative test and scalability test. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "A class loading sensitive approach to detection of runtime type errors in component-based Java programs", "paper_id": "WOS:000337783000002"}