{"auto_keywords": [{"score": 0.03869997999395127, "phrase": "unbounded_concurrency_model"}, {"score": 0.015719714774698138, "phrase": "unbounded_concurrency"}, {"score": 0.011375896834026393, "phrase": "n-process_model"}, {"score": 0.009723475735212865, "phrase": "wait-free_implementation"}, {"score": 0.004449452743965974, "phrase": "wait-free_implementable"}, {"score": 0.0042212686864468805, "phrase": "stack_object"}, {"score": 0.0031428202743657057, "phrase": "stack_objects"}, {"score": 0.002997203022420553, "phrase": "stronger_notion"}, {"score": 0.0023640560785711923, "phrase": "n-process_implementations"}, {"score": 0.0021049977753042253, "phrase": "queue_impossibility_proof"}], "paper_keywords": ["common2", " wait-free", " stacks", " unbounded", " concurrency", " immediate snapshot"], "paper_abstract": "This paper extends Common2, the family of objects that implement and are wait-free implementable from 2 consensus objects, in two ways: First, the stack object is shown to be in the family, refuting a conjecture to the contrary [6]. Second, Common2 is investigated in the unbounded concurrency model, whereas until now it was considered only in an n-process model. We show that the fetch-and-add, test-and-set, and stack objects are in Common2 even with respect to this stronger notion of wait-free implementation. Our constructions rely on a wait-free implementation of immediate snapshots in the unbounded concurrency model, which was previously not known to be possible. The introduction of unbounded concurrency to the study of Common2 opens several directions of research: are there objects that have n-process implementations but are not unbounded concurrency implementable? We conjecture that swap is such an object. Additionally, the hope is that a queue impossibility proof, which eludes us in the n-process model, will be easier to establish in the unbounded concurrency model.", "paper_title": "Common2 extended to stacks and unbounded concurrency", "paper_id": "WOS:000250870100001"}