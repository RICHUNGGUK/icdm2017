{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "pre-assigned_tasks"}, {"score": 0.0046364836476864325, "phrase": "tree-shaped_workflows"}, {"score": 0.0044435677598780796, "phrase": "heterogeneous_architecture"}, {"score": 0.004299064805926241, "phrase": "different_memory"}, {"score": 0.004198722289738563, "phrase": "multicore_node"}, {"score": 0.004120130206000757, "phrase": "dedicated_accelerator"}, {"score": 0.0035925056609681194, "phrase": "corresponding_memory"}, {"score": 0.0035085965086415474, "phrase": "used_memory"}, {"score": 0.00297346171320082, "phrase": "efficient_traversal"}, {"score": 0.002917736974519881, "phrase": "maximum_amount"}, {"score": 0.002782938683493689, "phrase": "whole_tree"}, {"score": 0.0026293540353514075, "phrase": "two-memory_scheduling_problem"}, {"score": 0.002580061425699194, "phrase": "inapproximability_results"}, {"score": 0.0024146842687658467, "phrase": "general_traversals"}, {"score": 0.0023249757987087055, "phrase": "comprehensive_set"}, {"score": 0.0023030731312573246, "phrase": "tree_graphs"}, {"score": 0.0022706045233150795, "phrase": "random_trees"}, {"score": 0.0022280223816618736, "phrase": "assembly_trees"}, {"score": 0.0021656385587456952, "phrase": "sparse_matrix_factorizations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Scheduling", " Memory-aware", " Sparse matrix factorization", " Multifrontal method", " Tree traversal", " Bi-objective optimization"], "paper_abstract": "We study the complexity of traversing tree-shaped workflows whose tasks require large I/O files. We target a heterogeneous architecture with two resource types, each with a different memory, such as a multicore node equipped with a dedicated accelerator (FPGA or GPU). The tasks in the workflow are colored according to their type and can be processed if all their input and output files can be stored in the corresponding memory. The amount of used memory of each type at a given execution step strongly depends upon the ordering in which the tasks are executed, and upon when communications between both memories are scheduled. The objective is to determine an efficient traversal that minimizes the maximum amount of memory of each type needed to traverse the whole tree. In this paper, we establish the complexity of this two-memory scheduling problem, and provide inapproximability results. In addition, we design several heuristics, based on both post-order and general traversals, and we evaluate them on a comprehensive set of tree graphs, including random trees as well as assembly trees arising in the context of sparse matrix factorizations. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Memory-aware tree traversals with pre-assigned tasks", "paper_id": "WOS:000346552500005"}