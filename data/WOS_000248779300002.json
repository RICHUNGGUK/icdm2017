{"auto_keywords": [{"score": 0.04448467538406442, "phrase": "rewrite_rules"}, {"score": 0.00481495049065317, "phrase": "cyclic_higher-order_term_graphs"}, {"score": 0.004187049198138107, "phrase": "elaborated_abstractions"}, {"score": 0.004104269996872886, "phrase": "structured_results"}, {"score": 0.00405538690701843, "phrase": "first_class_objects"}, {"score": 0.003959353513286997, "phrase": "evaluation_mechanism"}, {"score": 0.0033745298175222056, "phrase": "simple_terms"}, {"score": 0.0032814236411444022, "phrase": "recursion_constraints"}, {"score": 0.0032164910932827168, "phrase": "standard_p-calculus_matching_constraints"}, {"score": 0.0031402604946939743, "phrase": "term-graph_representation"}, {"score": 0.0031028232755683674, "phrase": "equational_style"}, {"score": 0.002957471572421436, "phrase": "explicit_application"}, {"score": 0.002910545717767559, "phrase": "first-class_entities"}, {"score": 0.002730150696072947, "phrase": "regular_infinite_entities"}, {"score": 0.0026336242881032645, "phrase": "suitable_linearity_conditions"}, {"score": 0.0021049977753042253, "phrase": "letrec-like_construct"}], "paper_keywords": [""], "paper_abstract": "The Rewriting Calculus (p-calculus, for short) was introduced at the end of the 1990s and fully integrates term-rewriting and lambda-calculus. The rewrite rules, acting as elaborated abstractions, their application and the structured results obtained are first class objects of the calculus. The evaluation mechanism, which is a generalisation of beta-reduction, relies strongly on term matching in various theories. In this paper we propose an extension of the p-calculus, called p(g)-calculus, that handles structures with cycles and sharing rather than simple terms. This is obtained by using recursion constraints in addition to the standard p-calculus matching constraints, which leads to a term-graph representation in an equational style. Like in the p-calculus, the transformations are performed by explicit application of rewrite rules as first-class entities. The possibility of expressing sharing and cycles allows one to represent and compute over regular infinite entities. We show that the p(g)-calculus, under suitable linearity conditions, is confluent. The proof of this result is quite elaborate, due to the non-termination of the system and the fact that p(g)-calculus-terms are considered modulo an equational theory. We also show that the pg-calculus is expressive enough to simulate first-order (equational) left-linear term-graph rewriting and lambda-calculus with explicit recursion (modelled using a letrec-like construct).", "paper_title": "A rewriting calculus for cyclic higher-order term graphs", "paper_id": "WOS:000248779300002"}