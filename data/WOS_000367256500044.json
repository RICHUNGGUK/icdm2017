{"auto_keywords": [{"score": 0.044776654657324805, "phrase": "constraint_solver"}, {"score": 0.038246058185547986, "phrase": "mutable_objects"}, {"score": 0.037959032075944976, "phrase": "object_identity"}, {"score": 0.00481495049065317, "phrase": "object-constraint_programming_languages"}, {"score": 0.004777569299319633, "phrase": "object-constraint_programming_systems"}, {"score": 0.0044192837023190445, "phrase": "object-constraint_systems"}, {"score": 0.004024485331377682, "phrase": "complex_interactions"}, {"score": 0.00396218934254591, "phrase": "imperative_code"}, {"score": 0.0035660913513115267, "phrase": "polymorphic_message"}, {"score": 0.003443031148055198, "phrase": "core_object-oriented_features"}, {"score": 0.0033633514001658086, "phrase": "constraint_part"}, {"score": 0.0032220148724914867, "phrase": "large_set"}, {"score": 0.003196960816092101, "phrase": "interesting_problem_solutions"}, {"score": 0.0031107911390188055, "phrase": "design_principles"}, {"score": 0.00300339527261653, "phrase": "object-constraint_languages"}, {"score": 0.002968424524565369, "phrase": "difficult_corner_cases"}, {"score": 0.0029453365339797933, "phrase": "surprising_solutions"}, {"score": 0.0028996963188373144, "phrase": "key_features"}, {"score": 0.002559072326933071, "phrase": "babelsberg_object-constraint_language_framework"}, {"score": 0.002499798127196099, "phrase": "resulting_language"}, {"score": 0.002470676601347937, "phrase": "formal_semantics"}, {"score": 0.0024418934977061876, "phrase": "core_subset"}, {"score": 0.0023209828061385596, "phrase": "executable_version"}, {"score": 0.0022672107906933714, "phrase": "test_programs"}, {"score": 0.0021803388613879896, "phrase": "existing_implementations"}, {"score": 0.002163367512885108, "phrase": "babelsberg"}, {"score": 0.0021465570706773814, "phrase": "javascript"}, {"score": 0.0021298306677280604, "phrase": "ruby"}, {"score": 0.0021049980887993046, "phrase": "smalltalk"}], "paper_keywords": ["Constraints", " Object-Constraint Programming", " Constraint Imperative Programming", " Executable Semantics Test Suites"], "paper_abstract": "Object-constraint programming systems integrate declarative constraint solving with imperative, object-oriented languages, seamlessly providing the power of both paradigms. However, experience with object-constraint systems has shown that giving too much power to the constraint solver opens up the potential for solutions that are surprising and unintended as well as for complex interactions between constraints and imperative code. On the other hand, systems that overly limit the power of the solver, for example by disallowing constraints involving mutable objects, object identity, or polymorphic message sends, run the risk of excluding the core object-oriented features of the language from the constraint part, and consequently not being able to express declaratively a large set of interesting problem solutions. In this paper we present design principles that tame the power of the constraint solver in object-constraint languages to avoid difficult corner cases and surprising solutions while retaining the key features of the approach, including constraints over mutable objects, constraints involving object identity, and constraints on the results of message sends. We present our solution concretely in the context of the Babelsberg object-constraint language framework, providing both an informal description of the resulting language and a formal semantics for a core subset of it. We validate the utility of this semantics with an executable version that allows us to run test programs and to verify that they provide the same results as existing implementations of Babelsberg in JavaScript, Ruby, and Smalltalk.", "paper_title": "Checks and Balances Constraint Solving without Surprises in Object-Constraint Programming Languages", "paper_id": "WOS:000367256500044"}