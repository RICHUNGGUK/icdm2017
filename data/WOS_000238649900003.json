{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multiprocessor_routers"}, {"score": 0.0047292449487169345, "phrase": "flow-level_characteristics"}, {"score": 0.004441059405327222, "phrase": "load_imbalance"}, {"score": 0.004401342842183475, "phrase": "hash-based_load-splitting_schemes"}, {"score": 0.004114527599108734, "phrase": "typical_internet_traffic"}, {"score": 0.004059438255358923, "phrase": "hashing_scheme"}, {"score": 0.0038636556112977226, "phrase": "long_run"}, {"score": 0.0037608593980593035, "phrase": "novel_load-balancing_packet_scheduler"}, {"score": 0.0035794251590584563, "phrase": "nonuniform_flow_reference_pattern"}, {"score": 0.003141830113006653, "phrase": "network_processors"}, {"score": 0.003071965703296204, "phrase": "important_metric"}, {"score": 0.002963390095037466, "phrase": "scheduling_efficiency"}, {"score": 0.002936849401568391, "phrase": "load-balancing_mechanisms"}, {"score": 0.002910545717767559, "phrase": "parallel_forwarding_systems"}, {"score": 0.002845809662579165, "phrase": "relatively_few_large_flows"}, {"score": 0.00277001889871322, "phrase": "load_balancer_results"}, {"score": 0.0026841368358805433, "phrase": "individual_processors"}, {"score": 0.0026009105281485888, "phrase": "simulation_results"}, {"score": 0.0024864612830452254, "phrase": "cache_performance"}, {"score": 0.002292965705677312, "phrase": "latter_results"}, {"score": 0.002272415777234064, "phrase": "finer_flow"}, {"score": 0.0021049977753042253, "phrase": "table_lookup_performance"}], "paper_keywords": ["workload modeling", " parallel forwarding", " hashing", " load balancing"], "paper_abstract": "By investigating flow-level characteristics of Internet traffic, the authors are able to trace the root of load imbalance in hash-based load-splitting schemes. They model flow popularity distributions as Zipf-like and prove that for typical Internet traffic, a hashing scheme cannot balance workload statistically, not even in the long run. They then develop a novel load-balancing packet scheduler for parallel forwarding systems. The scheduler capitalizes on the nonuniform flow reference pattern and especially the presence of a few high-rate flows in Internet traffic. The authors show that detecting and scheduling these flows can be very effective in balancing workloads among network processors. They introduce an important metric, adaptation disruption, to measure the scheduling efficiency of load-balancing mechanisms in parallel forwarding systems. Because there are relatively few large flows, reassigning them in the load balancer results in little disruption to the states of individual processors. The ideas are validated by simulation results. Finally, the authors discuss the effects on cache performance when classifying flows using two different flow definitions: the destination IP address and the five-tuple. The latter results in finer flow granularity but worse route cache hit rate, which can lead to the degradation of routing table lookup performance.", "paper_title": "An adaptive load balancer for multiprocessor routers", "paper_id": "WOS:000238649900003"}