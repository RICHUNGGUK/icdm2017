{"auto_keywords": [{"score": 0.04560873528240426, "phrase": "build_system"}, {"score": 0.012286072888579764, "phrase": "fine-grained_file_dependencies"}, {"score": 0.00481495049065317, "phrase": "dynamic_dependencies"}, {"score": 0.004772367030970874, "phrase": "build_systems"}, {"score": 0.004626255242038005, "phrase": "smallest_software_projects"}, {"score": 0.004544770921520536, "phrase": "right_build_tools"}, {"score": 0.004484596684703308, "phrase": "right_files"}, {"score": 0.004425215632459868, "phrase": "right_order"}, {"score": 0.004139850082354509, "phrase": "latest_source_files"}, {"score": 0.003907403442285109, "phrase": "contemporary_build_systems"}, {"score": 0.0038728151007982378, "phrase": "limited_efficiency"}, {"score": 0.003005539334280134, "phrase": "traditional_notion"}, {"score": 0.0029789104204803137, "phrase": "time_stamps"}, {"score": 0.002861961643289598, "phrase": "file's_content"}, {"score": 0.0026771333996253783, "phrase": "build_summary"}, {"score": 0.0025950024597986366, "phrase": "provably_sound_and_optimal_incremental_rebuilding"}, {"score": 0.00241658945942583, "phrase": "dependency_graph"}, {"score": 0.0023845255359681143, "phrase": "dynamic_analysis"}, {"score": 0.0023010815714140467, "phrase": "java_api"}, {"score": 0.0021620042653528846, "phrase": "larger_ant_build_script"}, {"score": 0.0021049977753042253, "phrase": "respective_build_times"}], "paper_keywords": ["pluto", " build system", " builder API", " incremental building", " dynamic dependencies", " cyclic dependencies"], "paper_abstract": "Build systems are used in all but the smallest software projects to invoke the right build tools on the right files in the right order. A build system must be sound (after a build, generated files consistently reflect the latest source files) and efficient (recheck and rebuild as few build units as possible). Contemporary build systems provide limited efficiency because they lack support for expressing fine-grained file dependencies. We present a build system called pluto that supports the definition of reusable, parameterized, interconnected builders. When run, a builder notifies the build system about dynamically required and produced files as well as about other builders whose results are needed. To support fine-grained file dependencies, we generalize the traditional notion of time stamps to allow builders to declare their actual requirements on a file's content. pluto collects the requirements and products of a builder with their stamps in a build summary. This enables pluto to provides provably sound and optimal incremental rebuilding. To support dynamic dependencies, our rebuild algorithm interleaves dependency analysis and builder execution and enforces invariants on the dependency graph through a dynamic analysis. We have developed pluto as a Java API and used it to implement more than 25 builders. We describe our experience with migrating a larger Ant build script to pluto and compare the respective build times.", "paper_title": "A Sound and Optimal Incremental Build System with Dynamic Dependencies", "paper_id": "WOS:000367256500006"}