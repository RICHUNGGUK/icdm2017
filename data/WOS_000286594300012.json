{"auto_keywords": [{"score": 0.049914939781933676, "phrase": "untyped_languages"}, {"score": 0.046534781659711734, "phrase": "scheme"}, {"score": 0.041797735051142475, "phrase": "variable_occurrences"}, {"score": 0.004644146045859622, "phrase": "wide_variety"}, {"score": 0.004602395776895036, "phrase": "formal_and_informal_methods"}, {"score": 0.004419110500390627, "phrase": "erlang"}, {"score": 0.004204904449336037, "phrase": "type_behavior"}, {"score": 0.004055652445791872, "phrase": "common_reasoning_methods"}, {"score": 0.003557509959237602, "phrase": "existing_scheme_code"}, {"score": 0.0033393377529146893, "phrase": "practical_experience"}, {"score": 0.003294350220187021, "phrase": "serious_shortcomings"}, {"score": 0.0031062822219953524, "phrase": "ad-hoc_rules"}, {"score": 0.002915701586760994, "phrase": "data_structures"}, {"score": 0.0028248293967214947, "phrase": "sophisticated_reasoning"}, {"score": 0.0027616550517346066, "phrase": "predicate_tests"}, {"score": 0.0026634937939104177, "phrase": "existing_code"}, {"score": 0.002568812627436125, "phrase": "occurrence_typing"}, {"score": 0.002488724764295623, "phrase": "new_formulation"}, {"score": 0.002466303439899648, "phrase": "propositional_logic_formulas"}, {"score": 0.0023044434462692483, "phrase": "simple_proof_system"}, {"score": 0.0021434588322608653, "phrase": "revised_occurrence_type_system"}], "paper_keywords": ["Languages systems", " Untyped languages", " Logic"], "paper_abstract": "Programmers reason about their programs using a wide variety of formal and informal methods. Programmers in untyped languages such as Scheme or Erlang are able to use any such method to reason about the type behavior of their programs. Our type system for Scheme accommodates common reasoning methods by assigning variable occurrences a subtype of their declared type based on the predicates prior to the occurrence, a discipline dubbed occurrence typing. It thus enables programmers to enrich existing Scheme code with types, while requiring few changes to the code itself. Three years of practical experience has revealed serious shortcomings of our type system. In particular, it relied on a system of ad-hoc rules to relate combinations of predicates, it could not reason about subcomponents of data structures, and it could not follow sophisticated reasoning about the relationship among predicate tests, all of which are used in existing code. In this paper, we reformulate occurrence typing to eliminate these shortcomings. The new formulation derives propositional logic formulas that hold when an expression evaluates to true or false, respectively. A simple proof system is then used to determine types of variable occurrences from these propositions. Our implementation of this revised occurrence type system thus copes with many more untyped programming idioms than the original system.", "paper_title": "Logical Types for Untyped Languages", "paper_id": "WOS:000286594300012"}