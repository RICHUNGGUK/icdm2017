{"auto_keywords": [{"score": 0.024709281461002784, "phrase": "partial_order_reduction"}, {"score": 0.00481495049065317, "phrase": "efficient_ltl_algorithm"}, {"score": 0.004669845451682529, "phrase": "model-check_traces"}, {"score": 0.004483120978156604, "phrase": "code_instrumentation"}, {"score": 0.0044150318724093226, "phrase": "distributed_system's_finite_execution"}, {"score": 0.0043258453436258405, "phrase": "finite_trace"}, {"score": 0.004260134699483774, "phrase": "partially_ordered_set"}, {"score": 0.004048272670065171, "phrase": "ltl"}, {"score": 0.0037882988045482777, "phrase": "diekert"}, {"score": 0.0037498163157912694, "phrase": "gastin"}, {"score": 0.0036740168936985314, "phrase": "distributed_control_systems_executions"}, {"score": 0.003509006038574667, "phrase": "efficient_symbolic_algorithm"}, {"score": 0.003351381374975648, "phrase": "standard_method"}, {"score": 0.0033004382466483456, "phrase": "vardi"}, {"score": 0.0032668831670121076, "phrase": "wolper"}, {"score": 0.0031845067058084613, "phrase": "ltl_formula"}, {"score": 0.002731971103291716, "phrase": "common_sequence"}, {"score": 0.002705293671420482, "phrase": "np"}, {"score": 0.0026091594819333654, "phrase": "concurrent_processes"}, {"score": 0.0025433263646920364, "phrase": "possible_configurations"}, {"score": 0.0021049977753042253, "phrase": "standard_exploration_method"}], "paper_keywords": ["testing of asynchronous distributed systems", " monitor", " global properties", " model checking of traces"], "paper_abstract": "It is well known that through code instrumentation, a distributed system's finite execution can generate a finite trace as a partially ordered set of events. We motivate the need to use LTL model-checking on sequences and not on traces as defined by Diekert and Gastin, to validate distributed control systems executions, abstracted by such traces, and present an efficient symbolic algorithm to do the job. It uses the standard method proposed by Vardi and Wolper, which from the LTL formula, builds a monitor that accepts all the bad sequences. We show that, given a monitor and a trace, the problem to check that both the monitor and the trace have a common sequence is NP-complete in the number of concurrent processes. Our method explores the possible configurations symbolically, since it handles sets of configurations. Moreover, it uses techniques similar to the partial order reduction, to avoid exploring as many execution interleavings as possible. It works very well in practice, compared to the standard exploration method, with or without partial order reduction (which, in practice, does not work well here).", "paper_title": "Monitoring distributed controllers: When an efficient LTL algorithm on sequences is needed to model-check traces", "paper_id": "WOS:000240312100037"}