{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "overlapped_lifetimes"}, {"score": 0.005893379946664254, "phrase": "hardware_and_software_techniques"}, {"score": 0.004726970265271088, "phrase": "complementary_software-_and_hardware-based_approaches"}, {"score": 0.0045726187330434025, "phrase": "modulo_scheduled_loops"}, {"score": 0.004539005582217309, "phrase": "modulo_scheduling"}, {"score": 0.004439634831927606, "phrase": "loop_body"}, {"score": 0.004374593906165761, "phrase": "m-stage_software_pipeline"}, {"score": 0.004231699728933577, "phrase": "software_pipeline"}, {"score": 0.004185108816866677, "phrase": "initiation_interval"}, {"score": 0.0040186038781533946, "phrase": "new_loop_iterations"}, {"score": 0.003945117054416623, "phrase": "overlapped_lifetime"}, {"score": 0.0037188360359702182, "phrase": "current_iteration"}, {"score": 0.0036778708850237814, "phrase": "new_value"}, {"score": 0.003597284507308585, "phrase": "previous_loop"}, {"score": 0.0035184576341236317, "phrase": "old_value"}, {"score": 0.0034925663938977715, "phrase": "hardware_and_software_solutions"}, {"score": 0.003316567137142017, "phrase": "commercial_products"}, {"score": 0.003243871564587106, "phrase": "register_files"}, {"score": 0.0029686314779877525, "phrase": "embedded_systems"}, {"score": 0.002903540062437197, "phrase": "silicon_area"}, {"score": 0.0028821607224183135, "phrase": "power_consumption"}, {"score": 0.002850385670169814, "phrase": "code_size"}, {"score": 0.0027469703311742647, "phrase": "current_solutions"}, {"score": 0.0026375303198093764, "phrase": "hardware_element"}, {"score": 0.0025892330566358503, "phrase": "register_assignment_latency"}, {"score": 0.0024586427394152196, "phrase": "software_element"}, {"score": 0.002422552850701705, "phrase": "dependence_analysis"}, {"score": 0.0023958326775913165, "phrase": "constrained_modulo_scheduling_algorithm"}, {"score": 0.0021682027434117095, "phrase": "embedded_application_code"}, {"score": 0.0021522261505574035, "phrase": "present_results"}, {"score": 0.002120624523437494, "phrase": "modulo_schedule_quality"}, {"score": 0.0021049977753042253, "phrase": "application_performance"}], "paper_keywords": ["Algorithms", " Performance", " Languages", " instruction level parallelism", " software pipelining", " modulo scheduling", " register allocation"], "paper_abstract": "This paper describes complementary software- and hardware-based approaches for handling overlapping register lifetimes that occur in modulo scheduled loops. Modulo scheduling takes the N-instructions in a loop body and constructs an M-stage software pipeline. The length of each stage in the software pipeline is the Initiation Interval (II), which is the rate at which new loop iterations are started. An overlapped lifetime has a live range longer than the II, and as a consequence, the current iteration writes a new value to a register before a previous loop iteration has finished using the old value. Hardware and software solutions for dealing with overlapped lifetimes have been proposed by researchers and also implemented in commercial products. These solutions include rotating register files, register queues, modulo variable expansion, and post-scheduling live range splitting. Each of these approaches has drawbacks for embedded systems such as an increase in silicon area, power consumption, and code size. Our approach, which is an improvement to the current solutions, prevents overlapped lifetimes through a combination of hardware and software techniques. The hardware element of our approach implements a register assignment latency that allows multiple in-flight writes to be pending to the same register. The software element of our approach uses dependence analysis and a constrained modulo scheduling algorithm to prevent overlapped lifetimes. We describe how to use these hardware and software techniques during modulo scheduling. Finally, we present the effect of using our approach to compile embedded application code and present results in terms of modulo schedule quality and application performance.", "paper_title": "Modulo Scheduling without Overlapped Lifetimes", "paper_id": "WOS:000268471100002"}