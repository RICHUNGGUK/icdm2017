{"auto_keywords": [{"score": 0.03215695170565396, "phrase": "requirements_specification"}, {"score": 0.015719716506582538, "phrase": "distributed_software_requirements_specifications"}, {"score": 0.015524325218016118, "phrase": "prioritized_merging"}, {"score": 0.009717504197520247, "phrase": "overall_perspective"}, {"score": 0.004674952036988355, "phrase": "desirable_framework"}, {"score": 0.004577440795549049, "phrase": "software_requirements_specifications"}, {"score": 0.004519908617935935, "phrase": "challenging_problem"}, {"score": 0.004351595642056769, "phrase": "relative_priority"}, {"score": 0.004189523950071494, "phrase": "necessary_trade-off_decisions"}, {"score": 0.003999578057088828, "phrase": "viewpoints-based_approaches"}, {"score": 0.0038996120252338556, "phrase": "different_levels"}, {"score": 0.0036914757355166966, "phrase": "local_levels"}, {"score": 0.003465036432323081, "phrase": "inconsistency_handling_process"}, {"score": 0.003421437601439154, "phrase": "main_contribution"}, {"score": 0.0033078284621762817, "phrase": "prioritized_merging-based_framework"}, {"score": 0.0031577303835881964, "phrase": "distributed_inconsistent_requirements_collections"}, {"score": 0.003117986133774198, "phrase": "local_prioritization"}, {"score": 0.0028293966058473476, "phrase": "global_prioritization"}, {"score": 0.0027819985260847577, "phrase": "merging-based_construction"}, {"score": 0.0027469703311742647, "phrase": "priority_vector-based_construction"}, {"score": 0.002600194073758015, "phrase": "globally_prioritized_requirements_specification"}, {"score": 0.0022906498741695094, "phrase": "ordering_relation"}, {"score": 0.0021773853011112882, "phrase": "negotiation-based_techniques"}, {"score": 0.0021049977753042253, "phrase": "acceptable_common_proposal"}], "paper_keywords": ["Inconsistency", " Requirements Engineering", " Prioritized Merging", " Local Prioritization"], "paper_abstract": "Developing a desirable framework for handling inconsistencies in software requirements specifications is a challenging problem. It has been widely recognized that the relative priority of requirements can help developers to make some necessary trade-off decisions for resolving conflicts. However, for most distributed development such as viewpoints-based approaches, different stakeholders may assign different levels of priority to the same shared requirements statement from their own perspectives. The disagreement in the local levels of priority assigned to the same shared requirements statement often puts developers into a dilemma during the inconsistency handling process. The main contribution of this paper is to present a prioritized merging-based framework for handling inconsistency in distributed software requirements specifications. Given a set of distributed inconsistent requirements collections with the local prioritization, we first construct a requirements specification with a prioritization from an overall perspective. We provide two approaches to constructing a requirements specification with the global prioritization, including a merging-based construction and a priority vector-based construction. Following this, we derive proposals for handling inconsistencies from the globally prioritized requirements specification in terms of prioritized merging. Moreover, from the overall perspective, these proposals may be viewed as the most appropriate to modifying the given inconsistent requirements specification in the sense of the ordering relation over all the consistent subsets of the requirements specification. Finally, we consider applying negotiation-based techniques to viewpoints so as to identify an acceptable common proposal from these proposals.", "paper_title": "Handling Inconsistency In Distributed Software Requirements Specifications Based On Prioritized Merging", "paper_id": "WOS:000266583700012"}