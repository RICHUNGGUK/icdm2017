{"auto_keywords": [{"score": 0.004746263721902201, "phrase": "system_f_with"}, {"score": 0.0042920078348374375, "phrase": "second_order"}, {"score": 0.003385336776758738, "phrase": "usual_categorical_approach"}, {"score": 0.0032423089921154503, "phrase": "initial_algebras"}, {"score": 0.0031959843979467704, "phrase": "final_coalgebras"}, {"score": 0.0028689475587958917, "phrase": "hagino's_categorical_lambda_calculus"}, {"score": 0.0027675275077806744, "phrase": "parametric_polymorphism"}, {"score": 0.0022138542785562444, "phrase": "usual_data_types"}, {"score": 0.0021821915946356168, "phrase": "lazy_codata_types"}, {"score": 0.0021049977753042253, "phrase": "infinite_trees"}], "paper_keywords": ["Coiteration", " corecursion", " iteration", " primitive recursion", " system F", " monotone inductive type", " monotone coinductive type", " monotonicity witness", " saturated sets", " algebras", " coalgebras", " dialgebras"], "paper_abstract": "This paper presents two extensions of the second order polymorphic lambda calculus, system F, with monotone (co) inductive types supporting (co) iteration, primitive (co) recursion and inversion principles as primitives. One extension is inspired by the usual categorical approach to programming by means of initial algebras and final coalgebras; whereas the other models dialgebras, and can be seen as an extension of Hagino's categorical lambda calculus within the framework of parametric polymorphism. The systems are presented in Curry-style, and are proven to be terminating and type-preserving. Moreover their expressiveness is shown by means of several programming examples, going from usual data types to lazy codata types such as streams or infinite trees.", "paper_title": "TWO EXTENSIONS OF SYSTEM F WITH (CO)ITERATION AND PRIMITIVE (CO)RECURSION PRINCIPLES", "paper_id": "WOS:000271470900003"}