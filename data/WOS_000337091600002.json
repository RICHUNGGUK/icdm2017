{"auto_keywords": [{"score": 0.030424249019695215, "phrase": "srn"}, {"score": 0.00481495049065317, "phrase": "efficient_reliability_analysis_of_concurrent_software_applications_considering_software_architecture"}, {"score": 0.004753194996637899, "phrase": "architecture-based_reliability_analysis"}, {"score": 0.004427366754240748, "phrase": "valuable_guidance"}, {"score": 0.0043705604923728195, "phrase": "software_architects"}, {"score": 0.0043144799365586375, "phrase": "early_design_phases"}, {"score": 0.0042591158963728665, "phrase": "concurrent_component_execution"}, {"score": 0.00415050117148714, "phrase": "modern_software_applications"}, {"score": 0.0040186038781533946, "phrase": "reliability_analysis"}, {"score": 0.0038409323908446297, "phrase": "software_architecture"}, {"score": 0.003623949225126944, "phrase": "state-space_explosion"}, {"score": 0.0033752674784204412, "phrase": "practical_software_applications"}, {"score": 0.0032051601987130207, "phrase": "model_specification"}, {"score": 0.00306334226516593, "phrase": "state-space_explosion_problem"}, {"score": 0.0028346293790895024, "phrase": "modelling_paradigm"}, {"score": 0.002709161672473817, "phrase": "concurrent_software_architecture"}, {"score": 0.0026570998719084153, "phrase": "higher_level"}, {"score": 0.0025725382476862305, "phrase": "computational_challenge"}, {"score": 0.00247460024299964, "phrase": "original_state_space"}, {"score": 0.002319566486828135, "phrase": "reliability_estimate"}, {"score": 0.0021742244283295986, "phrase": "original_model"}, {"score": 0.002132420504803564, "phrase": "design_guidance"}, {"score": 0.0021049977753042253, "phrase": "sensitivity_analysis"}], "paper_keywords": ["Software reliability", " concurrent software", " software architecture", " state space explosion"], "paper_abstract": "Architecture-based reliability analysis of software applications is gaining prominence as it can provide valuable guidance to software architects during early design phases. Concurrent component execution is common among modern software applications, and hence, reliability analysis considering concurrency within the context of software architecture is essential. Our preliminary analysis approach considering concurrency suffers from state-space explosion; due to which it cannot be applied to practical software applications. This paper proposes solutions to the model specification and solution challenges arising from the state-space explosion problem. The specification challenge is alleviated using the Stochastic Reward Net (SRN) modelling paradigm which can intuitively and concisely represent concurrent software architecture at a higher level of abstraction. The computational challenge is alleviated by aggregating the original state space. Our illustrations show that aggregation introduces only a small inaccuracy into the reliability estimate, and hence, preserves the utility of the original model to produce design guidance via sensitivity analysis.", "paper_title": "Efficient Reliability Analysis of Concurrent Software Applications Considering Software Architecture", "paper_id": "WOS:000337091600002"}