{"auto_keywords": [{"score": 0.04487809744279383, "phrase": "resource_sharing"}, {"score": 0.010580470661528138, "phrase": "real_multithreaded_network_applications"}, {"score": 0.00481495049065317, "phrase": "strand_binding_of_parallel_network_applications"}, {"score": 0.00478163886605204, "phrase": "massive_multi-threaded_systems"}, {"score": 0.00466684417181804, "phrase": "hardware_resource_sharing"}, {"score": 0.004507641276492167, "phrase": "smt"}, {"score": 0.0044608829094248985, "phrase": "scheduling_process"}, {"score": 0.004323620278409076, "phrase": "single_level"}, {"score": 0.004205143879089321, "phrase": "pure-cmp_processors"}, {"score": 0.004147123642915346, "phrase": "operating_system"}, {"score": 0.003802135020791801, "phrase": "hardware_contexts"}, {"score": 0.003621588555525458, "phrase": "strand_binding"}, {"score": 0.0035965032173588753, "phrase": "tsb."}, {"score": 0.003485744667868367, "phrase": "tsb_impact"}, {"score": 0.003378385493203297, "phrase": "shared_resources"}, {"score": 0.0032516342542969387, "phrase": "different_tsbs"}, {"score": 0.002980916123365584, "phrase": "future_multithreaded_architectures"}, {"score": 0.0028000270988465486, "phrase": "resource-sharing_aware_tsb_algorithm"}, {"score": 0.002657677633954843, "phrase": "software-pipelined_applications"}, {"score": 0.0026209522797963447, "phrase": "multithreaded_network_applications"}, {"score": 0.002479043701859468, "phrase": "software_pipelined_applications"}, {"score": 0.0023776656246300063, "phrase": "hardware_knowledge"}, {"score": 0.0023043558058824572, "phrase": "extensive_profiling"}, {"score": 0.0021049977753042253, "phrase": "current_state-of-the-art_dynamic_schedulers"}], "paper_keywords": ["Algorithms", " Measurement", " Performance", " Process Scheduling", " Simultaneous Multithreading", " CMT", " UltraSPARC T2"], "paper_abstract": "In processors with several levels of hardware resource sharing, like CMPs in which each core is an SMT, the scheduling process becomes more complex than in processors with a single level of resource sharing, such as pure-SMT or pure-CMP processors. Once the operating system selects the set of applications to simultaneously schedule on the processor (workload), each application/thread must be assigned to one of the hardware contexts (strands). We call this last scheduling step the Thread to Strand Binding or TSB. In this paper, we show that the TSB impact on the performance of processors with several levels of shared resources is high. We measure a variation of up to 59% between different TSBs of real multithreaded network applications running on the UltraSPARC T2 processor which has three levels of resource sharing. In our view, this problem is going to be more acute in future multithreaded architectures comprising more cores, more contexts per core, and more levels of resource sharing. We propose a resource-sharing aware TSB algorithm (TSBSched) that significantly facilitates the problem of thread to strand binding for software-pipelined applications, representative of multithreaded network applications. Our systematic approach encapsulates both, the characteristics of multithreaded processors under the study and the structure of the software pipelined applications. Once calibrated for a given processor architecture, our proposal does not require hardware knowledge on the side of the programmer, nor extensive profiling of the application. We validate our algorithm on the UltraSPARC T2 processor running a set of real multithreaded network applications on which we report improvements of up to 46% compared to the current state-of-the-art dynamic schedulers.", "paper_title": "Thread to Strand Binding of Parallel Network Applications in Massive Multi-Threaded Systems", "paper_id": "WOS:000280548100018"}