{"auto_keywords": [{"score": 0.03335900221237016, "phrase": "finger_trees"}, {"score": 0.00481495049065317, "phrase": "program-ing_finger_trees"}, {"score": 0.004692269299812678, "phrase": "finger"}, {"score": 0.004494578707137452, "phrase": "paterson"}, {"score": 0.004305203085016233, "phrase": "general_purpose_persistent_data_structure"}, {"score": 0.0038825121288253435, "phrase": "ordered_sequences"}, {"score": 0.003816197777388722, "phrase": "interval_trees"}, {"score": 0.0036553070575015344, "phrase": "single_implementation"}, {"score": 0.003501175642882274, "phrase": "type_systems"}, {"score": 0.0034118234596993836, "phrase": "current_functional_languages"}, {"score": 0.003267925215811654, "phrase": "coherent_parameterization"}, {"score": 0.0028468767420392945, "phrase": "certified_implementation"}, {"score": 0.0026570998719084153, "phrase": "program_extension"}, {"score": 0.0026116610153271943, "phrase": "coq."}, {"score": 0.002236055625099805, "phrase": "certified_structures"}, {"score": 0.0021049977753042253, "phrase": "elegant_way"}], "paper_keywords": ["algorithms", " languages", " verification", " Coq", " dependent types", " finger trees", " certification"], "paper_abstract": "Finger Trees (Hinze and Paterson 2006) are a general purpose persistent data structure with good performance. Their genericity permits developing a wealth of structures like ordered sequences or interval trees on top of a single implementation. However, the type systems used by current functional languages do not guarantee the coherent parameterization and specialization of Finger Trees, let alone the correctness of their implementation. We present a certified implementation of Finger Trees solving these problems using the PROGRAM extension of COQ. We not only implement the structure but also prove its invariants along the way, which permit building certified structures on top of Finger Trees in an elegant way.", "paper_title": "PROGRAM-ing Finger Trees in COQ", "paper_id": "WOS:000253409900003"}