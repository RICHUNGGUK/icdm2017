{"auto_keywords": [{"score": 0.0475596004207704, "phrase": "web_services"}, {"score": 0.03784144720028532, "phrase": "service_flows"}, {"score": 0.00481495049065317, "phrase": "truly_declarative_service_flow_language"}, {"score": 0.004686688155058031, "phrase": "process_support"}, {"score": 0.004161553532799662, "phrase": "software_solutions"}, {"score": 0.004028800933775625, "phrase": "bpel"}, {"score": 0.0038168424095396205, "phrase": "formal_methods"}, {"score": 0.0037554497046697432, "phrase": "petri_nets"}, {"score": 0.0035005841368145525, "phrase": "specification_languages"}, {"score": 0.003352388337911934, "phrase": "classical_workflow_management_systems"}, {"score": 0.0030250067691601967, "phrase": "autonomous_nature"}, {"score": 0.0028502479839354637, "phrase": "declarative_service_flow_language"}, {"score": 0.002436289099444074, "phrase": "semantical_basis"}, {"score": 0.0021745003291048356, "phrase": "appealing_graphical_representation"}, {"score": 0.0021049977753042253, "phrase": "temporal_logic"}], "paper_keywords": ["service flows", " web services", " workflow management", " flexibility", " temporal logic"], "paper_abstract": "The need for process support in the context of web services has triggered the development of many languages, systems, and standards. Industry has been developing software solutions and proposing standards such as BPEL, while researchers have been advocating the use of formal methods such as Petri nets and pi-calculus. The languages developed for service flows, i.e., process specification languages for web services, have adopted many concepts from classical workflow management systems. As a result, these languages are rather procedural and this does not fit well with the autonomous nature of services. Therefore, we propose DecSerFlow as a Declarative Service Flow Language. DecSerFlow can be used to specify, enact, and monitor service flows. The language is extendible (i.e., constructs can be added without changing the engine or semantical basis) and can be used to enforce or to check the conformance of service flows. Although the language has an appealing graphical representation, it is grounded in temporal logic.", "paper_title": "DecSerFlow: Towards a truly declarative service flow language", "paper_id": "WOS:000241442400001"}