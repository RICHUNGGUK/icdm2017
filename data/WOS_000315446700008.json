{"auto_keywords": [{"score": 0.014503576227910323, "phrase": "maximal_cliques"}, {"score": 0.012195214725924644, "phrase": "delta"}, {"score": 0.00481495049065317, "phrase": "sparse_graphs"}, {"score": 0.0043560464825349275, "phrase": "sparse_graph"}, {"score": 0.004301834610818624, "phrase": "polynomial_delay"}, {"score": 0.0036553070575015344, "phrase": "maximum_degree"}, {"score": 0.0029169007179202164, "phrase": "truly_polynomial_delay_algorithm"}, {"score": 0.002447101794397243, "phrase": "smallest_integer"}, {"score": 0.0023566987138026285, "phrase": "thousand_currency_signh"}, {"score": 0.0021857667493036786, "phrase": "real-world_network_data"}, {"score": 0.0021049977753042253, "phrase": "small_value"}], "paper_keywords": ["Maximal clique", " Polynomial delay", " Sparse graph", " H-Partition", " H-Value"], "paper_abstract": "In this paper, we consider the problem of generating all maximal cliques in a sparse graph in polynomial delay. Given a graph G=(V,E) with n vertices and m edges, the latest and fastest polynomial delay algorithm for sparse graphs enumerates all maximal cliques in O(Delta (4)) time delay, where Delta is the maximum degree of vertices. However, it requires an O(na <...m) preprocessing time. We improve it in two aspects. First, our algorithm does not need preprocessing. Therefore, our algorithm is a truly polynomial delay algorithm. Second, our algorithm enumerates all maximal cliques in O(Delta a <...H (3)) time delay, where H is the so called H-value of a graph or equivalently it is the smallest integer satisfying |{vaVa pound delta(v)a parts per thousand yenH}|a parts per thousand currency signH given delta(v) as the degree of a vertex. In real-world network data, H usually is a small value and much smaller than Delta.", "paper_title": "Fast Maximal Cliques Enumeration in Sparse Graphs", "paper_id": "WOS:000315446700008"}