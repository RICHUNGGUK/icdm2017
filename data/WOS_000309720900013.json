{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "extended_pie_technique"}, {"score": 0.004758987153057194, "phrase": "software_testability_analysis"}, {"score": 0.004703671193348433, "phrase": "rapid_development"}, {"score": 0.004523865550323285, "phrase": "hardware_system"}, {"score": 0.0044192837023190445, "phrase": "software_engineers"}, {"score": 0.004300310127339099, "phrase": "ultra-high_reliability"}, {"score": 0.004168240841388958, "phrase": "testing_stage"}, {"score": 0.004135859558144883, "phrase": "software_development_life_cycle"}, {"score": 0.003993216345115755, "phrase": "growing_complexity"}, {"score": 0.00373701482510911, "phrase": "important_topic"}, {"score": 0.0036363418376496484, "phrase": "new_testing_methods"}, {"score": 0.003552204377093386, "phrase": "software_testability"}, {"score": 0.0033502512757488433, "phrase": "dynamic_technique"}, {"score": 0.00331125524068286, "phrase": "program_testability"}, {"score": 0.0031229578623834394, "phrase": "previous_research_studies"}, {"score": 0.0030745737579268876, "phrase": "pie_analysis"}, {"score": 0.0030387767523076528, "phrase": "software_testing"}, {"score": 0.0029224275921964724, "phrase": "computational_overhead"}, {"score": 0.002854761308379149, "phrase": "software_components"}, {"score": 0.002756180088265064, "phrase": "extended_pie"}, {"score": 0.002671406231520296, "phrase": "conventional_pie_analysis"}, {"score": 0.002619748321217153, "phrase": "group_testability"}, {"score": 0.0023391880766516285, "phrase": "target_statements"}, {"score": 0.0022760856906838814, "phrase": "siemens_suite"}, {"score": 0.0022407927161620855, "phrase": "cost-effectiveness_analysis"}, {"score": 0.002171836484200008, "phrase": "analysed_statements"}, {"score": 0.0021049977753042253, "phrase": "calculated_values"}], "paper_keywords": ["software testability", " infection analysis", " propagation analysis", " information loss", " software testing"], "paper_abstract": "The rapid development of technology provides high performance and reliability for the hardware system; based on this, software engineers can focus their developed software on more convenience and ultra-high reliability. To reach this goal, the testing stage of software development life cycle usually takes more time and effort due to the growing complexity of the software. How to build software that can be tested efficiently has become an important topic in addition to enhancing and developing new testing methods. Thus, research on software testability has been conducted and various methods have been developed. In the past, a dynamic technique for estimating program testability was proposed and called propagation, infection and execution (PIE) analysis. Previous research studies have shown that PIE analysis can complement software testing. However, this method requires a lot of computational overhead in estimating the testability of software components. In this article, we propose an extended PIE (EPIE) method to accelerate the conventional PIE analysis, based on generating group testability as a substitute for statement testability. Our proposed method can be systematically separated into three steps: breaking a program into blocks, dividing the blocks into groups and marking target statements. Experiments and evaluations with the Siemens suite, together with cost-effectiveness analysis, clearly show that the number of analysed statements can be effectively decreased, and the calculated values of testability are still acceptable.", "paper_title": "Comparative performance evaluation of applying extended PIE technique to accelerate software testability analysis", "paper_id": "WOS:000309720900013"}