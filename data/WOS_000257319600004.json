{"auto_keywords": [{"score": 0.030291445236854384, "phrase": "graph_transformations"}, {"score": 0.00481495049065317, "phrase": "model_transformation_rules"}, {"score": 0.0047292449487169345, "phrase": "model-driven_software_development"}, {"score": 0.004276610897002087, "phrase": "domain-specific_modelling_languages"}, {"score": 0.004185377431624781, "phrase": "domain-specific_modelling_language's_syntax"}, {"score": 0.0038950367927745267, "phrase": "special_form"}, {"score": 0.0038671299350540554, "phrase": "language_engineering"}, {"score": 0.0037710151976096985, "phrase": "unified_modelling_language"}, {"score": 0.003521961918342562, "phrase": "sufficient_support"}, {"score": 0.0032893028281789287, "phrase": "abstract_syntax"}, {"score": 0.003253994336864267, "phrase": "language's_static_semantics"}, {"score": 0.0031730701021262155, "phrase": "object_constraint_language"}, {"score": 0.003038983069081333, "phrase": "mof_compliant_language's_dynamic_semantics"}, {"score": 0.0028076592725295646, "phrase": "dynamic_aspects"}, {"score": 0.00278752137116301, "phrase": "modelling_languages"}, {"score": 0.002584576723303367, "phrase": "rather_unusual_and_sophisticated_association_concept"}, {"score": 0.002387758958649797, "phrase": "precise_specification"}, {"score": 0.0023367260405565814, "phrase": "association_concepts"}], "paper_keywords": [""], "paper_abstract": "Model-driven software development, today's state-of-the-art approach to the design of software, can be applied in various domains and thus demands a variety of domain-specific modelling languages. The specification of a domain-specific modelling language's syntax and semantics can in turn be specified based on models, which represent the approach of metamodelling as a special form of language engineering. The latest version of the unified modelling language 2 (UML 2) and its subset the meta object facility 2 (MOF 2) provide sufficient support for metamodelling, a modelling language's abstract syntax. Furthermore, based on the description of the abstract syntax, a language's static semantics can simply be specified by the object constraint language (OCL) as UML/MOF's natural constraint language, whereas the description of an MOF compliant language's dynamic semantics is still not covered. The authors try to close this gap by integrating MOF/OCL with graph transformations for the specification of dynamic aspects of modelling languages and tools. The formalisation of such an integration is non-trivial because of the fact that UML/MOF 2 offer a rather unusual and sophisticated association concept (graph model). Although there are many approaches, which formalise graph transformations in general and first approaches that offer a precise specification of the semantics of the association concepts of UML/MOF 2, there is still a lack in bringing both together. Here, the authors close this gap by formalising graph transformations that work on a UML/MOF 2 compatible graph model.", "paper_title": "Formalising model transformation rules for UML/MOF 2", "paper_id": "WOS:000257319600004"}