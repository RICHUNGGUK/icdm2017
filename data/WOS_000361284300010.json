{"auto_keywords": [{"score": 0.05007689684343519, "phrase": "domain-aware_binary_fuzzing"}, {"score": 0.04098003525514745, "phrase": "android"}, {"score": 0.039626448526133604, "phrase": "vm"}, {"score": 0.004767261858417823, "phrase": "aid_android_virtual_machine_testing"}, {"score": 0.0046269981365987915, "phrase": "new_application_virtual_machine"}, {"score": 0.004402295697276237, "phrase": "complex_piece"}, {"score": 0.004272724011826495, "phrase": "bug-prone_process"}, {"score": 0.004126349202545883, "phrase": "widely-used_android_operating_system"}, {"score": 0.004024863549087511, "phrase": "dalvik_vm"}, {"score": 0.0039651694106206245, "phrase": "newly-developed_art_vm"}, {"score": 0.003829290275367182, "phrase": "new_iterations"}, {"score": 0.0035183010916001664, "phrase": "potentially_security-threatening_bugs"}, {"score": 0.0034146585649631692, "phrase": "final_product"}, {"score": 0.0032004205378150354, "phrase": "dexfuzz"}, {"score": 0.0030600032877646263, "phrase": "multiple_modes"}, {"score": 0.0026745503978347143, "phrase": "time_compiled_code"}, {"score": 0.0025191653363555214, "phrase": "in-development_version"}, {"score": 0.002457110101089137, "phrase": "android_open_source_project"}, {"score": 0.00239657981537094, "phrase": "dexfuzz's_ability"}, {"score": 0.0023259039577313294, "phrase": "experimental_version"}, {"score": 0.0022573076362326135, "phrase": "previous_version"}], "paper_keywords": ["testing", " compiler testing", " virtual machine testing", " fuzzing", " Android", " DEX", " ART", " random testing"], "paper_abstract": "The development of a new application virtual machine (VM), like the creation of any complex piece of software, is a bug-prone process. In version 5.0, the widely-used Android operating system has changed from the Dalvik VM to the newly-developed ART VM to execute Android applications. As new iterations of this VM are released, how can the developers aim to reduce the number of potentially security-threatening bugs that make it into the final product? In this paper we combine domain-aware binary fuzzing and differential testing to produce DEXFUZZ, a tool that exploits the presence of multiple modes of execution within a VM to test for defects. These modes of execution include the interpreter and a runtime that executes ahead-of-time compiled code. We find and present a number of bugs in the in-development version of ART in the Android Open Source Project. We also assess DEXFUZZ's ability to highlight defects in the experimental version of ART released in the previous version of Android, 4.4, finding 189 crashing programs and 15 divergent programs that indicate defects after only 5,000 attempts.", "paper_title": "Application of Domain-aware Binary Fuzzing to Aid Android Virtual Machine Testing", "paper_id": "WOS:000361284300010"}