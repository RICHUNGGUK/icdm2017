{"auto_keywords": [{"score": 0.03384716834305881, "phrase": "effective_input_metamodel"}, {"score": 0.010612387000973441, "phrase": "model_transformations"}, {"score": 0.010435075531295093, "phrase": "input_metamodel"}, {"score": 0.007508782084888017, "phrase": "effective_subset"}, {"score": 0.006531092422256635, "phrase": "target_input_metamodel"}, {"score": 0.004576253356889219, "phrase": "similar_concepts"}, {"score": 0.004404994123834589, "phrase": "refactor_java_models"}, {"score": 0.004294381488413906, "phrase": "uml_class_diagrams"}, {"score": 0.003578600071301459, "phrase": "principal_steps"}, {"score": 0.00337224813954299, "phrase": "used_concepts"}, {"score": 0.0030847461428168614, "phrase": "true_input_domain"}, {"score": 0.0026363807171515255, "phrase": "subtype_property"}, {"score": 0.0023708445073819277, "phrase": "well_known_refactoring_transformations"}, {"score": 0.002215081186105616, "phrase": "in-house_domain-specific_modeling_language"}, {"score": 0.002131998680184259, "phrase": "mof"}, {"score": 0.0021050054034582916, "phrase": "uml"}], "paper_keywords": ["Adaptation", " Aspect weaving", " Genericity", " Metamodel pruning", " Model typing", " Model transformation", " Refactoring"], "paper_abstract": "Model transformations written for an input metamodel may often apply to other metamodels that share similar concepts. For example, a transformation written to refactor Java models can be applicable to refactoring UML class diagrams as both languages share concepts such as classes, methods, attributes, and inheritance. Deriving motivation from this example, we present an approach to make model transformations reusable such that they function correctly across several similar metamodels. Our approach relies on these principal steps: (1) We analyze a transformation to obtain an effective subset of used concepts. We prune the input metamodel of the transformation to obtain an effective input metamodel containing the effective subset. The effective input metamodel represents the true input domain of transformation. (2) We adapt a target input metamodel by weaving it with aspects such as properties derived from the effective input metamodel. This adaptation makes the target metamodel a subtype of the effective input metamodel. The subtype property ensures that the transformation can process models conforming to the target input metamodel without any change in the transformation itself. We validate our approach by adapting well known refactoring transformations (Encapsulate Field, Move Method, and Pull Up Method) written for an in-house domain-specific modeling language (DSML) to three different industry standard metamodels (Java, MOF, and UML).", "paper_title": "Reusable model transformations", "paper_id": "WOS:000299508500009"}