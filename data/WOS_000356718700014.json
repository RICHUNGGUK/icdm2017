{"auto_keywords": [{"score": 0.012262487115775619, "phrase": "overall_performance"}, {"score": 0.011798718820745513, "phrase": "peripheral_memory"}, {"score": 0.00481495049065317, "phrase": "fighting_memory_bandwidth"}, {"score": 0.004764220976404241, "phrase": "memory_bottleneck"}, {"score": 0.004680851157467745, "phrase": "major_cause"}, {"score": 0.004582722012454012, "phrase": "computer_systems"}, {"score": 0.004470823343432748, "phrase": "major_concern"}, {"score": 0.004377077848734575, "phrase": "limiting_factor"}, {"score": 0.004195418010131832, "phrase": "growing_number"}, {"score": 0.004021267064832957, "phrase": "memory_bus"}, {"score": 0.003936910716320182, "phrase": "additional_traffic"}, {"score": 0.0033698643928647726, "phrase": "cpu_memory"}, {"score": 0.003095686498058292, "phrase": "cpu."}, {"score": 0.0029565620771207003, "phrase": "current_systems"}, {"score": 0.00290473242917264, "phrase": "numerous_applications"}, {"score": 0.0028740705307540343, "phrase": "exclusive_data"}, {"score": 0.002853808773854451, "phrase": "major_part"}, {"score": 0.002833689453299307, "phrase": "memory_bandwidth"}, {"score": 0.002764379205581817, "phrase": "cpu_processing_performance"}, {"score": 0.002603012037901889, "phrase": "non-coherent_split-traffic"}, {"score": 0.0025036399134110822, "phrase": "non-coherent_split_traffic_configuration"}, {"score": 0.002316105585203396, "phrase": "power_model"}, {"score": 0.002219790619936024, "phrase": "server_system"}, {"score": 0.0021501863832966966, "phrase": "overall_system_power_consumption"}, {"score": 0.0021049977753042253, "phrase": "system_power_budget"}], "paper_keywords": ["Memory management", " main memory", " input/output devices", " interconnection architectures"], "paper_abstract": "Memory bottleneck has always been a major cause for limiting the performance of computer systems. While in the past latency was the major concern, today, lack of bandwidth becomes a limiting factor as well, as a result of exploiting more parallelism with the growing number of cores per die, which intensifies the pressure on the memory bus. In such an environment, any additional traffic to memory, such as the I/O traffic may lead to degradation of the overall performance of the system. This work introduces the concept of Peripheral Memory, a software controlled memory that resides in the I/O domain and can be used for offloading I/O traffic from CPU memory. The Peripheral Memory handles 'I/O exclusive data', data originated and terminated at I/O domain, and which does not need any processing by the CPU. The paper analyses the impact of I/O traffic on the overall performance of the current systems and demonstrates that in numerous applications, I/O exclusive data occupies major part of memory bandwidth, as a result, degrading CPU processing performance and increasing power. The paper considers four different implementations of the Peripheral Memory: pageable, pinned, non-coherent split-traffic and copy-on-access. Our full-system simulator indicates that non-coherent split traffic configuration is the most efficient implementation, which can provide up to four times speedup in the I/O processing rate for typical I/O intensive applications. In addition, based on Power model and measurements tools, the paper demonstrates that the Peripheral Memory in a server system can lead to reduction of tens of Watts in the overall system power consumption or 10-20 percent of the system power budget.", "paper_title": "Peripheral Memory: A Technique for Fighting Memory Bandwidth Bottleneck", "paper_id": "WOS:000356718700014"}