{"auto_keywords": [{"score": 0.035426311373821136, "phrase": "local_clocks"}, {"score": 0.015719716506582538, "phrase": "implementation_relations"}, {"score": 0.012091188852973566, "phrase": "corresponding_implementation_relations"}, {"score": 0.004758188582347737, "phrase": "distributed_test_architecture"}, {"score": 0.004396426822203258, "phrase": "distributed_approach"}, {"score": 0.004293336465549723, "phrase": "separate_tester"}, {"score": 0.003966776222128288, "phrase": "relative_order"}, {"score": 0.0038890781420303916, "phrase": "different_ports"}, {"score": 0.003812896124654341, "phrase": "new_notions"}, {"score": 0.003522749900725601, "phrase": "local_clock"}, {"score": 0.0032546105164772995, "phrase": "implementation_relation"}, {"score": 0.002627985415362773, "phrase": "local_tester"}, {"score": 0.002576442680766742, "phrase": "corresponding_port"}, {"score": 0.0022428042503686053, "phrase": "new_implementation_relations"}, {"score": 0.0021901023885734, "phrase": "distributed_testing"}, {"score": 0.0021049977753042253, "phrase": "distributed_nature"}], "paper_keywords": ["Model based testing", " Distributed systems", " Timed systems"], "paper_abstract": "In order to test systems that have physically distributed interfaces, called ports, we might use a distributed approach in which there is a separate tester at each port. If the testers do not synchronise during testing then we cannot always determine the relative order of events observed at different ports and this leads to new notions of correctness that have been described using corresponding implementation relations. We study the situation in which each tester has a local clock and timestamps its observations. If we know nothing about how the local clocks relate then this does not affect the implementation relation while if the local clocks agree exactly then we can reconstruct the sequence of observations made. In practice, however, we are likely to be between these extremes: the local clocks will not agree exactly but we have some information regarding how they can differ. We start by assuming that a local tester interacts synchronously with the corresponding port of the system under test and then extend this to the case where communications can be asynchronous, considering both the first-in-first-out (FIFO) case and the non-FIFO case. The new implementation relations are stronger than implementation relations for distributed testing that do not use timestamps but still reflect the distributed nature of observations. This paper explores these alternatives and derives corresponding implementation relations.", "paper_title": "Timed implementation relations for the distributed test architecture", "paper_id": "WOS:000336453000003"}