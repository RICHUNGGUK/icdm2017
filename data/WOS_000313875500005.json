{"auto_keywords": [{"score": 0.03949131510361901, "phrase": "data_herding"}, {"score": 0.00481495049065317, "phrase": "error-tolerant_gpu_applications"}, {"score": 0.004772593750252861, "phrase": "control_and_memory_divergence"}, {"score": 0.004466519142879166, "phrase": "significant_performance_bottlenecks"}, {"score": 0.0044272138900038095, "phrase": "gpu_applications"}, {"score": 0.0041986698758281074, "phrase": "gpu"}, {"score": 0.004161553532799662, "phrase": "exhibit_error_tolerance"}, {"score": 0.004016938499717623, "phrase": "branch_herding"}, {"score": 0.0039815737219022675, "phrase": "control_divergence"}, {"score": 0.0037260386566859197, "phrase": "memory_divergence"}, {"score": 0.0033212215487678854, "phrase": "static_analysis"}, {"score": 0.0032919615578986816, "phrase": "compiler_framework"}, {"score": 0.0032199307816384577, "phrase": "control_and_data_errors"}, {"score": 0.003149471116658739, "phrase": "profiling_framework"}, {"score": 0.0030399188412691914, "phrase": "acceptable_output_quality"}, {"score": 0.002999823428906084, "phrase": "hardware_optimizations"}, {"score": 0.0029471818883482688, "phrase": "performance_benefits"}, {"score": 0.002908306074124806, "phrase": "error_tolerance"}, {"score": 0.0027578496677536373, "phrase": "nvidia_geforce_gtx"}, {"score": 0.0025692477422626678, "phrase": "nvidia_cuda_sdk"}, {"score": 0.002219916677664081, "phrase": "observed_output_quality_degradation"}, {"score": 0.0021049977753042253, "phrase": "visual_computing_applications"}], "paper_keywords": ["Error tolerance", " energy efficiency"], "paper_abstract": "Control and memory divergence between threads within the same execution bundle, or warp, have been shown to cause significant performance bottlenecks for GPU applications. In this paper, we exploit the observation that many GPU applications exhibit error tolerance to propose branch and data herding. Branch herding eliminates control divergence by forcing all threads in a warp to take the same control path. Data herding eliminates memory divergence by forcing each thread in a warp to load from the same memory block. To safely and efficiently support branch and data herding, we propose a static analysis and compiler framework to prevent exceptions when control and data errors are introduced, a profiling framework that aims to maximize performance while maintaining acceptable output quality, and hardware optimizations to improve the performance benefits of exploiting error tolerance through branch and data herding. Our software implementation of branch herding on NVIDIA GeForce GTX 480 improves performance by up to 34% (13%, on average) for a suite of NVIDIA CUDA SDK and Parboil benchmarks. Our hardware implementation of branch herding improves performance by up to 55% (30%, on average). Data herding improves performance by up to 32% (25%, on average). Observed output quality degradation is minimal for several applications that exhibit error tolerance, especially for visual computing applications.", "paper_title": "Branch and Data Herding: Reducing Control and Memory Divergence for Error-Tolerant GPU Applications", "paper_id": "WOS:000313875500005"}