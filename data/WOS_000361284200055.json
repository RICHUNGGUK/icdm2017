{"auto_keywords": [{"score": 0.04565922187614431, "phrase": "dsp"}, {"score": 0.038504767758124316, "phrase": "symbiosis"}, {"score": 0.00481495049065317, "phrase": "differential_schedule_projections"}, {"score": 0.004514714250357749, "phrase": "novel_differential_schedule_projections"}, {"score": 0.004301834610818624, "phrase": "small_set"}, {"score": 0.004255902303152008, "phrase": "memory_operations"}, {"score": 0.003470358620464986, "phrase": "symbolic_constraint"}, {"score": 0.0031335830806256777, "phrase": "ordering_and_data-flow_differences"}, {"score": 0.0030017207229983385, "phrase": "buggy_real-world_software"}, {"score": 0.002890887778279196, "phrase": "practical_time"}, {"score": 0.0027543636132088332, "phrase": "small_fraction"}, {"score": 0.002724909017963099, "phrase": "event_orders"}, {"score": 0.0023694065215394593, "phrase": "full_failure-inducing_schedules"}, {"score": 0.0021049977753042253, "phrase": "valid_fix"}], "paper_keywords": ["Algorithms", " Design", " Reliability", " Concurrency", " Debugging", " Symbolic Execution", " Constraint Solving", " Differential Schedule Projection"], "paper_abstract": "We present Symbiosis: a concurrency debugging technique based on novel differential schedule projections (DSPs). A DSP shows the small set of memory operations and data-flows responsible for a failure, as well as a reordering of those elements that avoids the failure. To build a DSP, Symbiosis first generates a full, failing, multithreaded schedule via thread path profiling and symbolic constraint solving. Symbiosis selectively reorders events in the failing schedule to produce a non-failing, alternate schedule. A DSP reports the ordering and data-flow differences between the failing and non-failing schedules. Our evaluation on buggy real-world software and benchmarks shows that, in practical time, Symbiosis generates DSPs that both isolate the small fraction of event orders and data-flows responsible for the failure, and show which event reorderings prevent failing. In our experiments, DSPs contain 81% fewer events and 96% fewer data-flows than the full failure-inducing schedules. Moreover, by allowing developers to focus on only a few events, DSPs reduce the amount of time required to find a valid fix.", "paper_title": "Concurrency Debugging with Differential Schedule Projections", "paper_id": "WOS:000361284200055"}