{"auto_keywords": [{"score": 0.03806837886274612, "phrase": "back_pressure"}, {"score": 0.03378647339261804, "phrase": "back_pressure_arcs"}, {"score": 0.015719716506582538, "phrase": "latency_insensitive_systems"}, {"score": 0.010234788943277819, "phrase": "lis"}, {"score": 0.004714749768410393, "phrase": "modern_system_on_chip"}, {"score": 0.004616624583337195, "phrase": "multi-cycle_delays"}, {"score": 0.004547782274166457, "phrase": "synchronously_clocked_ip_blocks"}, {"score": 0.0044934449515131, "phrase": "latency_insensitive_protocols"}, {"score": 0.004373537527118041, "phrase": "additional_logic_blocks"}, {"score": 0.004269630481719451, "phrase": "handshaking_interconnects"}, {"score": 0.004244040105917499, "phrase": "relay_stations"}, {"score": 0.004180730376667435, "phrase": "latency_penalties"}, {"score": 0.004081385289516914, "phrase": "effective_soc_designs"}, {"score": 0.0040569185796103845, "phrase": "interconnected_ip_blocks"}, {"score": 0.00400842252537852, "phrase": "periodic_behaviors"}, {"score": 0.003889693671417058, "phrase": "handshake_interconnects"}, {"score": 0.003831649503355232, "phrase": "periodic_schedule"}, {"score": 0.0037631343866066855, "phrase": "lis_designs"}, {"score": 0.003469613024006653, "phrase": "stall_signals"}, {"score": 0.003438441702164516, "phrase": "backward_direction"}, {"score": 0.003267003547703286, "phrase": "lis_design_optimization_algorithm"}, {"score": 0.0030947594580569854, "phrase": "partial_back_pressure_graph"}, {"score": 0.003076189012372961, "phrase": "pbpg"}, {"score": 0.002776961266279729, "phrase": "minimum_set"}, {"score": 0.0027437235598539904, "phrase": "mbpa"}, {"score": 0.0026384253581942805, "phrase": "mca"}, {"score": 0.0026068329296254087, "phrase": "directed_graphs"}, {"score": 0.0025447921872619435, "phrase": "polynomial_time_algorithm"}, {"score": 0.0025143263276317935, "phrase": "minimum_cost_lis_implementation"}, {"score": 0.0024842242921857705, "phrase": "synchronous_model"}, {"score": 0.002461883922643093, "phrase": "original_system"}, {"score": 0.0023960581528720934, "phrase": "localized_mixed_integer_linear_programming"}, {"score": 0.0023179843199613174, "phrase": "resulting_lis."}, {"score": 0.0022764737473071296, "phrase": "existing_milp-based_throughput_optimization_techniques"}, {"score": 0.0021049977753042253, "phrase": "first_effort"}], "paper_keywords": ["Latency insensitive system", " back pressure", " throughput", " optimization", " buffer sizes"], "paper_abstract": "In modern System on Chip (SoC) designs, the multi-cycle delays on long interconnects between synchronously clocked IP blocks are accommodated by latency insensitive protocols (LIP) through extra valid/stall handshakes between components and additional logic blocks called relay stations. The use of handshaking interconnects and relay stations leads to area and latency penalties, that must be minimized for cost effective SoC designs. Interconnected IP blocks with certain graph topology have periodic behaviors that can be exploited to remove the need for handshake interconnects. Unfortunately, the periodic schedule may not exist for any LIS designs consist of two or more strongly connected components. Some of these systems are not bounded without back pressure. In the past, back pressure between SCCs has always been implemented as stall signals in the backward direction, and they are required to prevent overflow. In this paper, we propose an LIS design optimization algorithm which computes a minimum set of back pressure arcs required between SCCs. We model an LIS by a partial back pressure graph (PBPG) and show that the boundedness of a PBPG can be verified by checking the reachability in its strongly connected component graph (SCCG). Based on this, we formulate the problem of finding a minimum set of back pressure arcs (MBPA) and show that this problem can be reduced to the Minimum Cost Arborescence (MCA) problem for directed graphs. This allows us to obtain a polynomial time algorithm for synthesizing a minimum cost LIS implementation starting from a synchronous model of the original system. After adding back pressure arcs, we develop a localized Mixed Integer Linear Programming (LMILP) approach to optimize the throughput of the resulting LIS. This approach scales better than existing MILP-based throughput optimization techniques. In addition, we also provide an implementation of the LIS which refines its PBPG model. To the best of our knowledge, this is the first effort that considers the optimization of back pressure and throughput together in the design of latency insensitive systems.", "paper_title": "Optimization of Latency Insensitive Systems Through Back Pressure Minimization", "paper_id": "WOS:000348053400013"}