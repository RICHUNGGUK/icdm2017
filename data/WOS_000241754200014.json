{"auto_keywords": [{"score": 0.04740622885398932, "phrase": "query_modification"}, {"score": 0.00481495049065317, "phrase": "query_tail_absorption"}, {"score": 0.004732785510739708, "phrase": "widely_recognized_method"}, {"score": 0.004598933498016774, "phrase": "virtual_views"}, {"score": 0.004268293864953256, "phrase": "view_invocation"}, {"score": 0.0038936755823756226, "phrase": "complex_sbql_views"}, {"score": 0.003592859432554987, "phrase": "private_server_resources"}, {"score": 0.0033922781038328844, "phrase": "client_side"}, {"score": 0.003221316290858497, "phrase": "complex_algorithm"}, {"score": 0.0028880836335117297, "phrase": "reverse_technique"}, {"score": 0.0027424619603260837, "phrase": "client_query"}, {"score": 0.0026191799769765085, "phrase": "view_definition"}, {"score": 0.0021416404045850224, "phrase": "architectural_peculiarities"}, {"score": 0.0021049977753042253, "phrase": "new_method"}], "paper_keywords": [""], "paper_abstract": "A widely recognized method to optimize queries invoking virtual views is query modification. The method is based on macro-substitution, where a view invocation is textually unfolded within a query and then optimized together with the query. For complex SBQL views this method is not always applicable because a view can depend on some private server resources (thus it cannot be sent to the client side) or a view is defined by a complex algorithm (thus the view cannot be unfolded within a query). For such cases we propose a reverse technique which assumes absorption of a part of the client query (a query tail) by a view definition and then, optimization of the definition. The technique has the same potential as query modification, but it is less constrained. In the paper we illustrate both techniques on examples and present some architectural peculiarities of the new method.", "paper_title": "Optimization of queries invoking views by query tail absorption", "paper_id": "WOS:000241754200014"}