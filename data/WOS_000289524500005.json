{"auto_keywords": [{"score": 0.049613254104042076, "phrase": "task_models"}, {"score": 0.028198276166246455, "phrase": "use_case"}, {"score": 0.0046986841646790315, "phrase": "case_models"}, {"score": 0.004630270043271386, "phrase": "specification_medium"}, {"score": 0.004540591176992658, "phrase": "functional_requirements"}, {"score": 0.004240116703465252, "phrase": "current_practice"}, {"score": 0.003998380230709541, "phrase": "different_teams"}, {"score": 0.003661275004971829, "phrase": "inconsistent_functional_and_ui_design_specifications"}, {"score": 0.003520687960750365, "phrase": "maintenance_overhead"}, {"score": 0.0033524956061690868, "phrase": "formal_semantic_framework"}, {"score": 0.003303617297414837, "phrase": "integrated_development"}, {"score": 0.003192312493850036, "phrase": "semantic_mapping"}, {"score": 0.0030696773722514105, "phrase": "particular_use_case"}, {"score": 0.0030397596289795143, "phrase": "task_model_notation"}, {"score": 0.002995427206425849, "phrase": "common_semantic_domain"}, {"score": 0.002937318465594425, "phrase": "partially_ordered_sets"}, {"score": 0.0028944757265206332, "phrase": "two-step_mapping_results"}, {"score": 0.002689430273401131, "phrase": "intermediate_semantic_domains"}, {"score": 0.0025608471909800076, "phrase": "intrinsic_characteristics"}, {"score": 0.0024624103660827695, "phrase": "concrete_example"}, {"score": 0.0021784745589727246, "phrase": "common_semantic_model"}, {"score": 0.0021049977753042253, "phrase": "refinement_relations"}], "paper_keywords": ["Use case models", " Task models", " Partially ordered sets", " Semantics", " Formal framework"], "paper_abstract": "Use case models are the specification medium of choice for functional requirements, while task models are employed to capture User Interface (UI) requirements and design information. In current practice, both entities are treated independently and are often developed by different teams, which have their own philosophies and lifecycles. This lack of integration is problematic and often results in inconsistent functional and UI design specifications causing duplication of effort while increasing the maintenance overhead. To address these shortcomings, we propose a formal semantic framework for the integrated development of use case and task models. The semantic mapping is defined in a two step manner from a particular use case or task model notation to the common semantic domain of sets of partially ordered sets. This two-step mapping results in a semantic framework that can be more easily reused and extended. The intermediate semantic domains have been carefully chosen by taking into consideration the intrinsic characteristics of use case and task models. As a concrete example, we provide a semantics for our own DSRG use case formalism and an extended version of ConcurTaskTrees, one of the most popular task model notations. Furthermore, we use the common semantic model to formally define a set of refinement relations for use case and task models.", "paper_title": "Partial order semantics for use case and task models", "paper_id": "WOS:000289524500005"}