{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "parallel_applications"}, {"score": 0.004329124434198367, "phrase": "parallel_algorithm"}, {"score": 0.004258843584164121, "phrase": "parameter_tuning"}, {"score": 0.003956379470617348, "phrase": "performance_variability"}, {"score": 0.0037055370870874484, "phrase": "optimization_algorithm"}, {"score": 0.002921975748248106, "phrase": "pstswm"}, {"score": 0.00287447533746088, "phrase": "hpl"}, {"score": 0.0028277411285509524, "phrase": "pop."}, {"score": 0.0027365364488693656, "phrase": "nelder-mead_algorithm"}, {"score": 0.002626645763725465, "phrase": "better_configurations"}, {"score": 0.0024599911995634573, "phrase": "pop"}, {"score": 0.0022477377970612847, "phrase": "production_sized_run"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallel application tuning", " Parallel Rank Ordering algorithm", " Nelder-Mead simplex algorithm", " Active Harmony"], "paper_abstract": "In this paper, we present and evaluate a parallel algorithm for parameter tuning of parallel applications. We discuss the impact of performance variability on the accuracy and efficiency of the optimization algorithm and propose a strategy to minimize the impact of this variability. We evaluate our algorithm within the Active Harmony system, an automated online/offline tuning framework. We study its performance on three benchmark codes: PSTSWM, HPL and POP. Compared to the Nelder-Mead algorithm, our algorithm finds better configurations up to seven times faster. For POP, we were able to improve the performance of a production sized run by 59%. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Tuning parallel applications in parallel", "paper_id": "WOS:000270704500004"}