{"auto_keywords": [{"score": 0.034324015034345845, "phrase": "disk_accesses"}, {"score": 0.017326310486707103, "phrase": "application_performance"}, {"score": 0.00988358621755276, "phrase": "navigational_applications"}, {"score": 0.009439919016561422, "phrase": "navigational_application"}, {"score": 0.009120167180143166, "phrase": "object_cache"}, {"score": 0.007800134451773629, "phrase": "experimental_result"}, {"score": 0.007764324500833001, "phrase": "han_et_al"}, {"score": 0.006224451307720615, "phrase": "materialized_views"}, {"score": 0.005971519175058677, "phrase": "type-level_access_pattern_views"}, {"score": 0.00481495049065317, "phrase": "iterative_and_recursive_patterns"}, {"score": 0.0047817315951081555, "phrase": "recent_applications"}, {"score": 0.004748740786945996, "phrase": "xml_applications"}, {"score": 0.0047268728636719725, "phrase": "geographical_information_systems"}, {"score": 0.004640398886726948, "phrase": "highly_efficient_data_management"}, {"score": 0.0045765783794477505, "phrase": "object-relational_dbms"}, {"score": 0.004420823917028035, "phrase": "composite_objects"}, {"score": 0.004309968592440261, "phrase": "ordbms."}, {"score": 0.003947884118204803, "phrase": "costly_operation"}, {"score": 0.0034528025626422154, "phrase": "improvement_ratio"}, {"score": 0.003389557201018519, "phrase": "reduction_ratio"}, {"score": 0.0030759821501544224, "phrase": "prefetch_method"}, {"score": 0.002863242701923229, "phrase": "recursive_patterns"}, {"score": 0.0027913353347879507, "phrase": "type-level_path_access_logs"}, {"score": 0.0024865237976623286, "phrase": "implementation_technique"}, {"score": 0.002457931956176661, "phrase": "prefetch_request"}, {"score": 0.0023037734979454746, "phrase": "proposed_technique"}, {"score": 0.002282552868344392, "phrase": "overall_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Navigational application", " Prefetch method", " Type-level path access log", " Type-level access pattern view"], "paper_abstract": "Since recent applications such as XML applications, Geographical Information Systems (GIS), and CAD/CAM systems require highly efficient data management, they are built on Object-Relational DBMS (ORDBMS). The applications are called navigational applications, and they navigate the composite objects connected via the reference and the collection attributes in the ORDBMS. When a navigational application accesses an object, it first checks whether the object is stored in the object cache. If not, the object must be fetched from the database in the server, which is a costly operation. Prefetching identifies the objects that are most likely to be accessed in the near future by the navigational applications and stores them in the object cache in advance. Since prefetching reduces the number of object fetches, it is crucial for improving the application performance. However, the experimental result by Han et al. [16] showed that the improvement ratio of application performance is much lower than the reduction ratio of the number of object fetches. In this paper, we claim that the number of disk accesses in the server also considerably affects the application performance, and we propose a technique for minimizing disk accesses to improve the performance of the prefetch method by Han et al. [16] and hence the navigational application. The contributions of this paper are summarized as follows. (1) For the iterative and the recursive patterns, we propose methods for creating materialized views based on the type-level path access logs proposed in [15]. We refer to the materialized views as the type-level access pattern views. (2) We then present the algorithms for minimizing the number of disk accesses using the type-level access pattern views when prefetching the objects from the database in the server. (3) We present an implementation technique that, given a prefetch request from the client, quickly finds the most efficient type-level access pattern view. (4) We perform a series of experiments using a variety of databases to show that the proposed technique significantly improves the overall performance of the navigational application. Experimental result shows that we reduce the number of disk accesses by up to 33.0 times and improve the performance by up to 21.4 times: (C) 2010 Published by Elsevier Inc.", "paper_title": "Type-level access pattern view: Enhancing prefetching performance using the iterative and recursive patterns", "paper_id": "WOS:000281979600002"}