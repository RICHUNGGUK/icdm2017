{"auto_keywords": [{"score": 0.037788297483525975, "phrase": "dynamic_co-evolution"}, {"score": 0.030555332154533217, "phrase": "dynamic_co-evolving_systems"}, {"score": 0.029725760425679804, "phrase": "intrinsic_requirements"}, {"score": 0.00481495049065317, "phrase": "dynamic_systems"}, {"score": 0.004664352260912174, "phrase": "constant_revision"}, {"score": 0.004598933498016774, "phrase": "commercial_goals"}, {"score": 0.004470823343432748, "phrase": "new_technology"}, {"score": 0.004377077848734575, "phrase": "term_co-evolution"}, {"score": 0.004136548839735555, "phrase": "potentially_different_rates"}, {"score": 0.003992950134435965, "phrase": "wide-informatics_systems"}, {"score": 0.003629557750546267, "phrase": "long-lived_systems"}, {"score": 0.0033937776228549557, "phrase": "unexpected_events"}, {"score": 0.003229870860371533, "phrase": "business_process_models"}, {"score": 0.003207108833360533, "phrase": "sensor_nets"}, {"score": 0.0031845067058084583, "phrase": "grid_applications"}, {"score": 0.0031397776924946526, "phrase": "peer-to-peer_routing_systems"}, {"score": 0.0030414140732789186, "phrase": "pervasive_computing_applications"}, {"score": 0.00290473242917264, "phrase": "intrinsic_nature"}, {"score": 0.0024947959375982614, "phrase": "architecture_description_language"}, {"score": 0.002433754579432554, "phrase": "conventional_programming_language"}, {"score": 0.0021731423856364003, "phrase": "system's_specification"}, {"score": 0.0021501863832966966, "phrase": "executing_software"}, {"score": 0.002127472359795555, "phrase": "reflective_evolutionary_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "single_computational_domain"}], "paper_keywords": ["software evolution", " run-time evolution", " adaptive software", " incremental design", " co-evolution", " reflection"], "paper_abstract": "Businesses and their supporting software evolve to accommodate the constant revision and re-negotiation of commercial goals, and to intercept the potential of new technology. We have adopted the term co-evolution to describe the concept of the business and the software evolving sympathetically, but at potentially different rates. More generally, we extend co-evolution to accommodate wide-informatics systems, that are assembled from parts that co-evolve with each other and their environment, and whose behavior is potentially emergent. Typically these are long-lived systems in which dynamic co-evolution, whereby a system evolves as part of its own execution in reaction to both expected and unexpected events, is the only feasible option for change. Examples of such systems include continuously running business process models, sensor nets, grid applications, self-adapting/ tuning systems, peer-to-peer routing systems, control systems, autonomic systems, and pervasive computing applications. The contribution of this paper comprises: a study of the intrinsic nature of dynamic co-evolving systems; the derivation of a set of intrinsic requirements; a description of a model and a set of technologies, new and extant, to meet these intrinsic requirements; and illustrations of how these technologies may be implemented within an architecture description language (ArchWare ADL) and a conventional programming language ( Java). The model and technologies address three topics: structuring for dynamic co-evolution, incremental design, and adapting dynamic co-evolving systems. The combination yields a framework that can describe the system's specification, the executing software and the reflective evolutionary mechanisms within a single computational domain in which all three may evolve in tandem.", "paper_title": "A framework for supporting dynamic systems co-evolution", "paper_id": "WOS:000249586100001"}