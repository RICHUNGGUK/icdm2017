{"auto_keywords": [{"score": 0.048923016754706936, "phrase": "prolog"}, {"score": 0.008567271978534203, "phrase": "web_application"}, {"score": 0.006270769497285471, "phrase": "html"}, {"score": 0.004814952159286159, "phrase": "swi-prolog"}, {"score": 0.004630270043271386, "phrase": "excellent_tool"}, {"score": 0.004452641437293878, "phrase": "formal_languages"}, {"score": 0.004366387782457736, "phrase": "natural_language"}, {"score": 0.00428179779071721, "phrase": "automatic_memory_management"}, {"score": 0.0041174821422410544, "phrase": "robust_web_services"}, {"score": 0.003715425273229361, "phrase": "proprietary_protocol"}, {"score": 0.0034355662264234864, "phrase": "standard_http_protocol"}, {"score": 0.0033361232750221863, "phrase": "external_web_servers"}, {"score": 0.003054681986032532, "phrase": "transfer_protocol"}, {"score": 0.002880333728285514, "phrase": "key_web_document_types"}, {"score": 0.0027832524939854757, "phrase": "rdf."}, {"score": 0.0027159094186967247, "phrase": "design_decisions"}, {"score": 0.0025860636370864084, "phrase": "web_documents"}, {"score": 0.002414616656410503, "phrase": "large_documents"}, {"score": 0.0023677483882740317, "phrase": "described_libraries"}, {"score": 0.002333193766510394, "phrase": "wide_range"}, {"score": 0.0023104373174118458, "phrase": "web_applications"}, {"score": 0.0022216045996270974, "phrase": "semantic_web_rdf_processing"}, {"score": 0.002157223877108711, "phrase": "prolog_for_web-"}, {"score": 0.002146676231930343, "phrase": "related_tasks"}], "paper_keywords": ["Prolog", " HTTP", " HTML", " XML", " RDF", " DOM", " Semantic Web"], "paper_abstract": "Prolog is an excellent tool for representing and manipulating data written in formal languages as well as natural language. Its safe semantics and automatic memory management make it a prime candidate for programming robust Web services. Although Prolog is commonly seen as a component in a Web application that is either embedded or communicates using a proprietary protocol, we propose an architecture where Prolog communicates to other components in a Web application using the standard HTTP protocol. By avoiding embedding in external Web servers, development and deployment become much easier. To support this architecture, in addition to the transfer protocol, we must also support parsing, representing and generating the key Web document types such as HTML, XML and RDF. This article motivates the design decisions in the libraries and extensions to Prolog for handling Web documents and protocols. The design has been guided by the requirement to handle large documents efficiently. The described libraries support a wide range of Web applications ranging from HTML and XML documents to Semantic Web RDF processing. The benefits of using Prolog for Web-related tasks are illustrated using three case studies.", "paper_title": "SWI-Prolog and the Web", "paper_id": "WOS:000256109500006"}