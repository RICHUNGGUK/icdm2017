{"auto_keywords": [{"score": 0.04738802715775448, "phrase": "association_aspects"}, {"score": 0.010948445659352506, "phrase": "aspect_instances"}, {"score": 0.005801760397236101, "phrase": "new_pointcut"}, {"score": 0.00481495049065317, "phrase": "aspect_instantiation_mechanism"}, {"score": 0.004415189385015778, "phrase": "linguistic_mechanism"}, {"score": 0.004339293854115301, "phrase": "aspectj_language"}, {"score": 0.004071957673937727, "phrase": "per-object_aspects"}, {"score": 0.003910441483033426, "phrase": "aspect_instance"}, {"score": 0.0034832884999421374, "phrase": "execution_context"}, {"score": 0.003268516165008941, "phrase": "crosscutting_concerns"}, {"score": 0.0032122679403131537, "phrase": "stateful_behavior"}, {"score": 0.003138768436081888, "phrase": "particular_group"}, {"score": 0.002877769867854964, "phrase": "previous_implicit_mechanisms"}, {"score": 0.00270023138867066, "phrase": "aspectj_compiler"}, {"score": 0.0025929837295811673, "phrase": "data_structures"}, {"score": 0.0023363141951290526, "phrase": "functionally_equivalent_aspects"}, {"score": 0.002309408211203032, "phrase": "pure_aspectj"}, {"score": 0.0021049977753042253, "phrase": "integrated_development_environment"}], "paper_keywords": [""], "paper_abstract": "This paper describes the design and implementation of association aspects, which are a linguistic mechanism for the AspectJ language that concisely associates aspect instances to object groups by extending the per-object aspects in AspectJ. This mechanism allows an aspect instance to be associated to a group of objects, and by providing a new pointcut primitive to specify aspect instances as execution context of advice. With association aspects, we can straightforwardly implement crosscutting concerns that have stateful behavior related to a particular group of objects. The new pointcut primitive can more flexibly specify aspect instances when compared against previous implicit mechanisms. We implemented a compiler for association aspects by modifying the AspectJ compiler, which reduces the size of data structures for keeping associations. Our benchmark tests confirm that the overheads of association aspects are reasonably small when compared against functionally equivalent aspects in pure AspectJ that manually manage associations. The expressiveness of association aspects is demonstrated through development of an integrated development environment with and without association aspects.", "paper_title": "Design and implementation of an aspect instantiation mechanism", "paper_id": "WOS:000236493800008"}