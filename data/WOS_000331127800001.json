{"auto_keywords": [{"score": 0.04955461236891121, "phrase": "external_memory"}, {"score": 0.04530662946498311, "phrase": "suffix_array"}, {"score": 0.03703204112725599, "phrase": "em-sa-ds"}, {"score": 0.00481495049065317, "phrase": "suffix_array_construction"}, {"score": 0.00471003041684707, "phrase": "d-critical_substrings"}, {"score": 0.0045820747375409435, "phrase": "new_suffix_array_construction_algorithm"}, {"score": 0.004265354774450696, "phrase": "input_string"}, {"score": 0.004058951880810154, "phrase": "tens_of_giga_characters"}, {"score": 0.003992385826251404, "phrase": "constant_or_integer_alphabet"}, {"score": 0.0036958398682001015, "phrase": "original_internal_memory_sa-ds_algorithm"}, {"score": 0.0036352070472201086, "phrase": "fixed-size_d-critical_substrings"}, {"score": 0.0035755653799043, "phrase": "new_external-memory_algorithm"}, {"score": 0.003459191419478298, "phrase": "novel_cache_data_structures"}, {"score": 0.003328184259386487, "phrase": "sequential_scanning_manner"}, {"score": 0.0032916702592724217, "phrase": "good_data_spatial_locality"}, {"score": 0.003132236287543072, "phrase": "disk_sequentially"}, {"score": 0.0030638704739988595, "phrase": "assumed_external-memory_model"}, {"score": 0.003030247482854539, "phrase": "ram_capacity_omega"}, {"score": 0.0026838147966444783, "phrase": "n-bit_words"}, {"score": 0.002470547930651519, "phrase": "general_cache-based_solution"}, {"score": 0.002363806685815014, "phrase": "external-memory_solutions"}, {"score": 0.0022492129111567824, "phrase": "longest-common-prefix_array"}, {"score": 0.002200077887697072, "phrase": "modern_personal_computer"}, {"score": 0.002163930783583212, "phrase": "typical_memory_configuration"}, {"score": 0.0021049977753042253, "phrase": "single_disk"}], "paper_keywords": ["Suffix array", " sorting algorithm", " external memory", " Algorithms", " Performance"], "paper_abstract": "We present a new suffix array construction algorithm that aims to build, in external memory, the suffix array for an input string of length n measured in the magnitude of tens of Giga characters over a constant or integer alphabet. The core of this algorithm is adapted from the framework of the original internal memory SA-DS algorithm that samples fixed-size d-critical substrings. This new external-memory algorithm, called EM-SA-DS, uses novel cache data structures to construct a suffix array in a sequential scanning manner with good data spatial locality: data is read from or written to disk sequentially. On the assumed external-memory model with RAM capacity Omega ((nB)(0.5)), disk capacity O(n), and size of each I/O block B, all measured in log n-bit words, the I/O complexity of EM-SA-DS is O(n/B). This work provides a general cache-based solution that could be further exploited to develop external-memory solutions for other suffix-array-related problems, for example, computing the longest-common-prefix array, using a modern personal computer with a typical memory configuration of 4GB RAM and a single disk.", "paper_title": "Suffix Array Construction in External Memory Using D-Critical Substrings", "paper_id": "WOS:000331127800001"}