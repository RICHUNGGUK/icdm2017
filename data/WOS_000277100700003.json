{"auto_keywords": [{"score": 0.04824341868882559, "phrase": "security_protocol"}, {"score": 0.01284689339229628, "phrase": "implicit_assumptions"}, {"score": 0.011499302642529722, "phrase": "runtime_verification"}, {"score": 0.007477536877510323, "phrase": "protocol_participants"}, {"score": 0.00481495049065317, "phrase": "cryptographic_protocols"}, {"score": 0.004734987730139094, "phrase": "significant_amount"}, {"score": 0.00465634671242413, "phrase": "static_verification"}, {"score": 0.004477870190590885, "phrase": "actual_implementation"}, {"score": 0.004270280878399314, "phrase": "cryptographic_checks"}, {"score": 0.003724034990158436, "phrase": "formal_verification"}, {"score": 0.003611313078276589, "phrase": "code_assurance_technique"}, {"score": 0.0035216195857272403, "phrase": "open_problem"}, {"score": 0.0033301694494391643, "phrase": "\"reference_behaviour"}, {"score": 0.0029612292670237505, "phrase": "overall_protocol"}, {"score": 0.0029201156789547974, "phrase": "overall_assurance_process"}, {"score": 0.0028080083092240824, "phrase": "uml"}, {"score": 0.002776763584415067, "phrase": "security_properties"}, {"score": 0.0026552425134383963, "phrase": "design_model"}, {"score": 0.002625700271311702, "phrase": "linear-time_temporal_logic"}, {"score": 0.0024897902536499005, "phrase": "one's_confidence"}, {"score": 0.002475898613632249, "phrase": "statically_verified_properties"}, {"score": 0.0023675132064088803, "phrase": "actual_running_system"}, {"score": 0.0022957569067259625, "phrase": "open_source_implementation"}, {"score": 0.0022893422054387214, "phrase": "jessie_of_the_de-facto"}, {"score": 0.002282945386810049, "phrase": "internet_security_protocol_standard"}, {"score": 0.002176887956041267, "phrase": "jsse"}, {"score": 0.0021526564019119466, "phrase": "open_source"}, {"score": 0.0021406417439887907, "phrase": "sun_microsystems"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd"}], "paper_keywords": ["Security protocols", " SSL", " Java", " Temporal logic", " Static verification", " Runtime verification", " Security automata"], "paper_abstract": "There has been a significant amount of work devoted to the static verification of security protocol designs Virtually all of these results, when applied to an actual implementation of a security protocol, rely on certain implicit assumptions on the implementation (for example, that the cryptographic checks that according to the design have to be performed by the protocol participants are carried out correctly) So far there seems to be no approach that would enforce these implicit assumptions for a given implementation of a security protocol (in particular regarding legacy implementations which have not been developed with formal verification in mind) In this paper, we use a code assurance technique called \"runtime verification\" to solve this open problem Runtime verification determines whether or not the behaviour observed during the execution of a system matches a given formal specification of a \"reference behaviour\". By applying runtime verification to an implementation of any of the participants of a security protocol, we can make sure during the execution of that implementation that the implicit assumptions that had to be made to ensure the security of the overall protocol will be fulfilled The overall assurance process then proceeds in two steps First, a design model of the security protocol in UML is verified against security properties such as secrecy of data Second, the implicit assumptions on the protocol participants are derived from the design model, formalised in linear-time temporal logic, and the validity of these formulae at runtime is monitored using runtime verification The aim is to increase one's confidence that statically verified properties are satisfied not only by a model of the system, but also by the actual running system Itself We demonstrate the approach at the hand of the open source implementation Jessie of the de-facto Internet security protocol standard SSL We also briefly explain how to transfer the results to the SSL-implementation within the Java Secure Sockets Extension (JSSE) recently made open source by Sun Microsystems. (C) 2009 Elsevier Ltd All rights reserved", "paper_title": "Runtime verification of cryptographic protocols", "paper_id": "WOS:000277100700003"}