{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "energy_efficiency"}, {"score": 0.014721571939312091, "phrase": "data_locality"}, {"score": 0.012909045566752146, "phrase": "bfs"}, {"score": 0.010330106744401223, "phrase": "bfs_algorithm"}, {"score": 0.004766090327062509, "phrase": "breadth_first_search"}, {"score": 0.004717723626157272, "phrase": "fine-grain_execution_models"}, {"score": 0.004622450915803531, "phrase": "upcoming_exa-scale_era"}, {"score": 0.004460309246062286, "phrase": "parallel_programs"}, {"score": 0.0042819270655224916, "phrase": "program_performance"}, {"score": 0.004089725258435817, "phrase": "hard_topic"}, {"score": 0.0040481944502103505, "phrase": "graph_algorithms"}, {"score": 0.0038467574225322086, "phrase": "irregular_data_access_patterns"}, {"score": 0.0034911335714333507, "phrase": "codelet_fine-grain_dataflow-inspired_execution_model"}, {"score": 0.0033173234105492895, "phrase": "openmp-like_execution_models"}, {"score": 0.0032336801561165113, "phrase": "coarse-grain_parallelism"}, {"score": 0.002889928791032578, "phrase": "loop_locality"}, {"score": 0.002676692093594358, "phrase": "traditional_coarse-grain_execution_models"}, {"score": 0.002530359917257626, "phrase": "simulation_platform"}, {"score": 0.0024918698997990524, "phrase": "intel"}, {"score": 0.0022041312401435346, "phrase": "dynamic_energy"}, {"score": 0.0021817065300196634, "phrase": "memory_accesses"}, {"score": 0.002137537770621167, "phrase": "bfs_implementation"}, {"score": 0.0021049977753042253, "phrase": "openmp_loop_scheduling"}], "paper_keywords": ["breadth first search", " locality", " fine grain", " execution model"], "paper_abstract": "In the upcoming exa-scale era, the exploitation of data locality in parallel programs is very important because it benefits both program performance and energy efficiency. However, this is a hard topic for graph algorithms such as the Breadth First Search (BFS) due to the irregular data access patterns. This study analyzes the exploitation of data locality in the BFS and its impact on the energy efficiency with the Codelet fine-grain dataflow-inspired execution model. The Codelet Model more efficiently exploits data locality than the OpenMP-like execution models which traditionally focus on coarse-grain parallelism inside loops. A BFS algorithm is then given to exploit the locality between two loop iterations that belong to two different loops (inter-loop locality). This kind of locality can be exploited by the Codelet Model but not by traditional coarse-grain execution models like OpenMP. Tests were performed on fsim which is a simulation platform developed by Intel for the Ubiquitous High Performance Computing (UHPC) project to design future exa-scale architectures. The results show that this BFS algorithm saves up to 7% of the dynamic energy for memory accesses compared to a BFS implementation based on OpenMP loop scheduling.", "paper_title": "Exploitation of Locality for Energy Efficiency for Breadth First Search in Fine-Grain Execution Models", "paper_id": "WOS:000209529500010"}