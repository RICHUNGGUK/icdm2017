{"auto_keywords": [{"score": 0.03508447228376561, "phrase": "new_framework"}, {"score": 0.00481495049065317, "phrase": "dependable_systems"}, {"score": 0.004771196027464407, "phrase": "coordinated_atomic_actions"}, {"score": 0.004496280772084575, "phrase": "dependable_distributed_applications"}, {"score": 0.004335000368745273, "phrase": "coherent_set"}, {"score": 0.0042178318724732005, "phrase": "tolerant_distributed_system_design"}, {"score": 0.004160435626849478, "phrase": "structured_transactions"}, {"score": 0.003867206750827, "phrase": "efficient_java_implementation_framework"}, {"score": 0.0037626342268042997, "phrase": "dependable_multiparty_interactions"}, {"score": 0.003611034322786669, "phrase": "softer_exception"}, {"score": 0.0035133644847622383, "phrase": "caa_semantics"}, {"score": 0.003465521267039616, "phrase": "caa_design"}, {"score": 0.003371773890338284, "phrase": "drip_framework"}, {"score": 0.0032955848190195343, "phrase": "caa-drip"}, {"score": 0.0030491497463386924, "phrase": "design_and_implementation_levels"}, {"score": 0.0029396242707327986, "phrase": "implementation_phase"}, {"score": 0.0028600623410146796, "phrase": "final_system_size"}, {"score": 0.00273220495230652, "phrase": "caa"}, {"score": 0.002634031703695684, "phrase": "implementation_frameworks"}, {"score": 0.002610043728801011, "phrase": "great_detail"}, {"score": 0.0025627194819793347, "phrase": "systematic_comparison"}, {"score": 0.002493333098814506, "phrase": "caas_behaviour"}, {"score": 0.002425824414948978, "phrase": "statecharts"}, {"score": 0.0021438877099090262, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "e-health_domain"}], "paper_keywords": ["Exception handling", " Fault tolerance", " Dependable distributed systems"], "paper_abstract": "This paper(1) presents ways of implementing dependable distributed applications designed using the Coordinated Atomic Action (CAA) paradigm. CAAs provide a coherent set of concepts adapted to fault tolerant distributed system design that includes structured transactions, distribution, cooperation, competition, and forward and backward error recovery mechanisms triggered by exceptions. DRIP (Dependable Remote Interacting Processes) is an efficient Java implementation framework which provides support for implementing Dependable Multiparty Interactions (DMI). As DMIs have a softer exception handling semantics compared with the CAA semantics. a CAA design can be implemented using the DRIP framework. A new framework called CAA-DRIP allows programmers to exclusively implement the semantics of CAAs using the same terminology and concepts at the design and implementation levels. The new framework not only simplifies the implementation phase, but also reduces the final system size as it requires less number of instances for creating a CAA at runtime. The paper analyses both implementation frameworks in great detail, drawing a systematic comparison of the two. The CAAs behaviour is described in terms of Statecharts to better understand the differences between the two frameworks. Based on the results of the comparison, we use one of the frameworks to implement a case study belonging to the e-health domain. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Frameworks for designing and implementing dependable systems using Coordinated Atomic Actions: A comparative study", "paper_id": "WOS:000263426900003"}