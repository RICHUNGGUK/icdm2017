{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "santa_claus"}, {"score": 0.0047267100475487595, "phrase": "process-oriented_solution"}, {"score": 0.00466877910546307, "phrase": "commercial_development"}, {"score": 0.004640079189342692, "phrase": "multicore_processors"}, {"score": 0.004555028829645471, "phrase": "multithreaded_programs"}, {"score": 0.004471530397729526, "phrase": "new_hardware_architectures"}, {"score": 0.004362564831572539, "phrase": "concurrent_programming"}, {"score": 0.004204054047427536, "phrase": "traditional_approaches"}, {"score": 0.004139712771605295, "phrase": "advanced_topic"}, {"score": 0.003916098498242888, "phrase": "high_levels"}, {"score": 0.003832423454781517, "phrase": "process-oriented_design"}, {"score": 0.0037854112749311844, "phrase": "hoare's_algebra"}, {"score": 0.003750529559133893, "phrase": "sequential_processes"}, {"score": 0.0035478628449322866, "phrase": "novice_programmers"}, {"score": 0.003244050414264445, "phrase": "formal_reasoning"}, {"score": 0.0031357200369281344, "phrase": "conventional_programming_languages"}, {"score": 0.0031068064097811844, "phrase": "csp_libraries"}, {"score": 0.0028848643090508205, "phrase": "specialist_knowledge"}, {"score": 0.0028582571226324293, "phrase": "csp_formalism"}, {"score": 0.0028231611341151368, "phrase": "supporting_mathematics"}, {"score": 0.002678734566245688, "phrase": "santa_claus_problem"}, {"score": 0.0025972447844047515, "phrase": "concurrency_mechanisms"}, {"score": 0.002518227743688769, "phrase": "example_control_system"}, {"score": 0.002494993595618653, "phrase": "external_signals"}, {"score": 0.0024643470263733674, "phrase": "internal_state"}, {"score": 0.002426566352219338, "phrase": "external_world"}, {"score": 0.0023023818355050237, "phrase": "formal_verification"}, {"score": 0.0022740957662393223, "phrase": "fdr_model_checker"}, {"score": 0.002164376714559963, "phrase": "produced_control_signals"}, {"score": 0.0021510385886131557, "phrase": "crucial_ordering_constraints"}, {"score": 0.0021049977753042253, "phrase": "key_liveness_properties"}], "paper_keywords": ["Design", " Languages", " Reliability", " Verification", " Process orientation", " concurrency", " deadlock", " event ordering", " liveness", " verification", " novice programmer", " occam-pi", " CSP"], "paper_abstract": "With the commercial development of multicore processors, the challenges of writing multithreaded programs to take advantage of these new hardware architectures are becoming more and more pertinent. Concurrent programming is necessary to achieve the performance that the hardware offers. Traditional approaches present concurrency as an advanced topic: they have proven difficult to use, reason about with confidence, and scale up to high levels of concurrency. This article reviews process-oriented design, based on Hoare's algebra of Communicating Sequential Processes (CSP), and proposes that this approach to concurrency leads to solutions that are manageable by novice programmers; that is, they are easy to design and maintain, that they are scalable for complexity, obviously correct, and relatively easy to verify using formal reasoning and/or model checkers. These solutions can be developed in conventional programming languages (through CSP libraries) or specialized ones (such as occam-pi) in a manner that directly reflects their formal expression. Systems can be developed without needing specialist knowledge of the CSP formalism, since the supporting mathematics is burnt into the tools and languages supporting it. We illustrate these concepts with the Santa Claus problem, which has been used as a challenge for concurrency mechanisms since 1994. We consider this problem as an example control system, producing external signals reporting changes of internal state (that model the external world). We claim our occam-pi solution is correct-by-design, but follow this up with formal verification (using the FDR model checker for CSP) that the system is free from deadlock and livelock, that the produced control signals obey crucial ordering constraints, and that the system has key liveness properties.", "paper_title": "Santa Claus: Formal Analysis of a Process-Oriented Solution", "paper_id": "WOS:000277057700005"}