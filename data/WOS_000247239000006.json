{"auto_keywords": [{"score": 0.050078217242635024, "phrase": "ground_models"}, {"score": 0.045517553922793004, "phrase": "hoare"}, {"score": 0.004606023493393774, "phrase": "computer-based_systems"}, {"score": 0.004430629452265786, "phrase": "verified_software_challenge"}, {"score": 0.0039873732868290985, "phrase": "misra"}, {"score": 0.0036892809673917592, "phrase": "grand_challenge_project"}, {"score": 0.003509487090932835, "phrase": "practical_impact"}, {"score": 0.0033945024593626675, "phrase": "rigorous_definitions"}, {"score": 0.003283272764794988, "phrase": "code_development"}, {"score": 0.003211145390854807, "phrase": "experimental_validation"}, {"score": 0.003175676186323053, "phrase": "mathematical_verification"}, {"score": 0.002987463078971627, "phrase": "required_application-content"}, {"score": 0.002810373366887749, "phrase": "successive_refinements"}, {"score": 0.002779318608820933, "phrase": "relevant_properties"}, {"score": 0.0027031706928674092, "phrase": "traceable_and_checkable_way"}, {"score": 0.002542890176213921, "phrase": "abstract_state_machines"}, {"score": 0.0025148342034995324, "phrase": "asm"}, {"score": 0.002418829014435841, "phrase": "reliable_system_development"}, {"score": 0.00230080652063411, "phrase": "informal_requirements"}, {"score": 0.002275369652100353, "phrase": "executable_code"}, {"score": 0.0022377394845878268, "phrase": "application-centric_experimentally_validatable_system"}, {"score": 0.002140400526572388, "phrase": "abstract_models"}, {"score": 0.0021049977753042253, "phrase": "-time-verifiable_code"}], "paper_keywords": ["system analysis", " validation and certification", " Abstract State Machine", " ASM ground model (golden model)", " ASM refinement", " verified software challenge"], "paper_abstract": "We explain why for the verified software challenge proposed in Hoare (J ACM 50(1): 63-69, 2003), Hoare and Misra (Verified software: theories, tools, experiments. Vision of a Grand Challenge project. In: [Meyer05]) to gain practical impact, one needs to include rigorous definitions and analysis, prior to code development and comprising both experimental validation and mathematical verification, of ground models, i.e., blueprints that describe the required application-content of programs. This implies the need to link via successive refinements the relevant properties of such high-level models in a traceable and checkable way to code a compiler can verify. We outline the Abstract State Machines (ASM) method, a discipline for reliable system development which allows one to bridge the gap between informal requirements and executable code by combining application-centric experimentally validatable system modelling with mathematically verifiable stepwise detailing of abstract models to compile-time-verifiable code.", "paper_title": "Construction and analysis of ground models and their refinements as a foundation for validating computer-based systems", "paper_id": "WOS:000247239000006"}