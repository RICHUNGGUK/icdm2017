{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "critical_applications"}, {"score": 0.004774937143916685, "phrase": "untrusted_environments"}, {"score": 0.004735254735115024, "phrase": "modern_computer_systems"}, {"score": 0.004598933498016774, "phrase": "software_components"}, {"score": 0.004392565073466714, "phrase": "extensive_testing"}, {"score": 0.004248294537944227, "phrase": "software_sources"}, {"score": 0.004143196873246147, "phrase": "execution_environment"}, {"score": 0.0040916230716372265, "phrase": "trusted_programs"}, {"score": 0.0038431888954930083, "phrase": "privilege_escalation_vulnerability"}, {"score": 0.003795335309109018, "phrase": "operating_system"}, {"score": 0.0036248955128033084, "phrase": "malicious_or_faulty_device_driver"}, {"score": 0.003404703106153948, "phrase": "application_integrity"}, {"score": 0.003334309053314909, "phrase": "prior_work"}, {"score": 0.0027857990883821504, "phrase": "trusted_virtual_machine_monitor"}, {"score": 0.002682917193736698, "phrase": "potentially_repair_damage"}, {"score": 0.002530359917257626, "phrase": "efficient_coding"}, {"score": 0.0022507188208913394, "phrase": "resilient_execution_environment"}, {"score": 0.0021766418372878835, "phrase": "corrupted_os_kernel"}, {"score": 0.0021405207258001118, "phrase": "reasonable_amount"}, {"score": 0.0021049977753042253, "phrase": "performance_overhead"}], "paper_keywords": ["Operating systems", " security", " virtual machine monitors"], "paper_abstract": "Modern computer systems are built on a foundation of software components from a variety of vendors. While critical applications may undergo extensive testing and evaluation procedures, the heterogeneity of software sources threatens the integrity of the execution environment for these trusted programs. For instance, if an attacker can combine an application exploit with a privilege escalation vulnerability, the operating system (OS) can become corrupted. Alternatively, a malicious or faulty device driver running with kernel privileges could threaten the application. While the importance of ensuring application integrity has been studied in prior work, proposed solutions immediately terminate the application once corruption is detected. Although, this approach is sufficient for some cases, it is undesirable for many critical applications. In order to overcome this shortcoming, we have explored techniques for leveraging a trusted virtual machine monitor (VMM) to observe the application and potentially repair damage that occurs. In this paper, we describe our system design, which leverages efficient coding and authentication schemes, and we present the details of our prototype implementation to quantify the overhead of our approach. Our work shows that it is feasible to build a resilient execution environment, even in the presence of a corrupted OS kernel, with a reasonable amount of storage and performance overhead.", "paper_title": "Resilient Authenticated Execution of Critical Applications in Untrusted Environments", "paper_id": "WOS:000304147900013"}