{"auto_keywords": [{"score": 0.03458422678165135, "phrase": "ismbgt"}, {"score": 0.012969573010851524, "phrase": "smbgt"}, {"score": 0.007265008193694554, "phrase": "brute-force_search"}, {"score": 0.00481495049065317, "phrase": "-based_subsequence_matching"}, {"score": 0.004547656324173302, "phrase": "subsequence_matching_framework"}, {"score": 0.004394424341776717, "phrase": "target_sequences"}, {"score": 0.00434449804021954, "phrase": "variable_matching_tolerance"}, {"score": 0.004230188765513944, "phrase": "target_sequence"}, {"score": 0.004150377643719188, "phrase": "maximum_matching_range"}, {"score": 0.004041155193307942, "phrase": "dynamic_programming_method"}, {"score": 0.0038752755502006442, "phrase": "short_query_sequence_q"}, {"score": 0.003831224748279043, "phrase": "large_database"}, {"score": 0.00377326532920359, "phrase": "quadratic_time"}, {"score": 0.00364603066037512, "phrase": "q._smbgt"}, {"score": 0.0035772012773052065, "phrase": "music_retrieval"}, {"score": 0.0035096666710980108, "phrase": "query-by-humming_applications"}, {"score": 0.003130325700934738, "phrase": "reference_sequences"}, {"score": 0.003024705160129876, "phrase": "database_sequence"}, {"score": 0.0029115112555515277, "phrase": "query_vector"}, {"score": 0.002718301574682098, "phrase": "database_vectors"}, {"score": 0.002687366778212309, "phrase": "key_novelties"}, {"score": 0.002470987929071079, "phrase": "smbgt."}, {"score": 0.0024335561337016174, "phrase": "extensive_experimental_evaluation"}, {"score": 0.002360381056508366, "phrase": "large_music_database"}, {"score": 0.0021049977753042253, "phrase": "retrieval_accuracy"}], "paper_keywords": ["Subsequence matching", " Query-By-Humming", " Indexing", " Embeddings"], "paper_abstract": "We present a subsequence matching framework that allows for gaps in both query and target sequences, employs variable matching tolerance efficiently tuned for each query and target sequence, and constrains the maximum matching range. Using this framework, a dynamic programming method is proposed, called SMBGT, that, given a short query sequence Q and a large database, identifies in quadratic time the subsequence of the database that best matches Q. SMBGT is highly applicable to music retrieval. However, in Query-By-Humming applications, runtime is critical. Hence, we propose a novel embedding-based approach, called ISMBGT, for speeding up search under SMBGT. Using a set of reference sequences, ISMBGT maps both Q and each position of each database sequence into vectors. The database vectors closest to the query vector are identified, and SMBGT is then applied between Q and the subsequences that correspond to those database vectors. The key novelties of ISMBGT are that it does not require training, it is query sensitive, and it exploits the flexibility of SMBGT. We present an extensive experimental evaluation using synthetic and hummed queries on a large music database. Our findings show that ISMBGT can achieve speedups of up to an order of magnitude against brute-force search and over an order of magnitude against cDTW, while maintaining a retrieval accuracy very close to that of brute-force search.", "paper_title": "Embedding-based subsequence matching with gaps-range-tolerances: a Query-By-Humming application", "paper_id": "WOS:000358255800003"}