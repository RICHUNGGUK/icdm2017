{"auto_keywords": [{"score": 0.03425300613244172, "phrase": "sql"}, {"score": 0.008659960628750825, "phrase": "continuous_queries"}, {"score": 0.00481495049065317, "phrase": "relational_languages_and_data_models"}, {"score": 0.004581505405526037, "phrase": "relational_data_model"}, {"score": 0.004553128404612054, "phrase": "query_languages"}, {"score": 0.0045108906244892165, "phrase": "rigorous_analyses"}, {"score": 0.004122179528285764, "phrase": "stream-oriented_extensions"}, {"score": 0.004083923108969583, "phrase": "relational_model"}, {"score": 0.004058615475230867, "phrase": "continuous_query_language"}, {"score": 0.003971262520692664, "phrase": "resulting_expressive_power_problems"}, {"score": 0.0038978806337961565, "phrase": "data_streams"}, {"score": 0.003743487506598038, "phrase": "expressive_power"}, {"score": 0.003662892058072211, "phrase": "query_operators"}, {"score": 0.003617616153730564, "phrase": "nonblocking_queries"}, {"score": 0.0035951877427580006, "phrase": "monotonic_functions"}, {"score": 0.0034206776096452015, "phrase": "query_language"}, {"score": 0.0033159224502739247, "phrase": "traditional_database_queries"}, {"score": 0.0032244391998734697, "phrase": "nb"}, {"score": 0.0031845067058084583, "phrase": "unordered_sets"}, {"score": 0.0030110748510795175, "phrase": "order-a_sine-qua-non"}, {"score": 0.0029462012558267863, "phrase": "new_limitations"}, {"score": 0.0028917056916949744, "phrase": "well-known_problems"}, {"score": 0.0028470613150369823, "phrase": "sequence_queries"}, {"score": 0.0028293966058473476, "phrase": "data_mining"}, {"score": 0.0027512482368183596, "phrase": "user-defined_aggregates"}, {"score": 0.0026257554931689076, "phrase": "simple_syntactic_rules"}, {"score": 0.0026013505538490223, "phrase": "nonblocking_aggregates"}, {"score": 0.0024904448157331547, "phrase": "turing"}, {"score": 0.0024216102875733027, "phrase": "monotonic_udas"}, {"score": 0.0024065789359533772, "phrase": "union_operators"}, {"score": 0.0023767948946074547, "phrase": "monotonic_set_functions"}, {"score": 0.002347378595930709, "phrase": "turing_machine"}, {"score": 0.0022056569832731208, "phrase": "proposed_approach"}, {"score": 0.00219196314559129, "phrase": "data_stream_models"}, {"score": 0.002151388538895855, "phrase": "append-only_relations"}, {"score": 0.0021247560305587155, "phrase": "data_mining_queries"}], "paper_keywords": ["Design", " Theory", " Data streams", " queries", " expressivity"], "paper_abstract": "Most data stream management systems are based on extensions of the relational data model and query languages, but rigorous analyses of the problems and limitations of this approach, and how to overcome them, are still wanting. In this article, we elucidate the interaction between stream-oriented extensions of the relational model and continuous query language constructs, and show that the resulting expressive power problems are even more serious for data streams than for databases. In particular, we study the loss of expressive power caused by the loss of blocking query operators, and characterize nonblocking queries as monotonic functions on the database. Thus we introduce the notion of NB-completeness to assure that a query language is as suitable for continuous queries as it is for traditional database queries. We show that neither RA nor SQL are NB-complete on unordered sets of tuples, and the problem is even more serious when the datamodel is extended to support order-a sine-qua-non in data stream applications. The new limitations of SQL, compounded with well-known problems in applications such as sequence queries and data mining, motivate our proposal of extending the language with user-defined aggregates (UDAs). These can be natively coded in SQL, according to simple syntactic rules that set nonblocking aggregates apart from blocking ones. We first prove that SQL with UDAs is Turing complete. We then prove that SQL with monotonic UDAs and union operators can express all monotonic set functions computable by a Turing machine (NB-completeness) and finally extend this result to queries on sequences ordered by their timestamps. The proposed approach supports data stream models that are more sophisticated than append-only relations, along with data mining queries, and other complex applications.", "paper_title": "Relational Languages and Data Models for Continuous Queries on Sequences and Data Streams", "paper_id": "WOS:000291244300001"}