{"auto_keywords": [{"score": 0.03287402698883015, "phrase": "morton_layout"}, {"score": 0.02160581797191711, "phrase": "column-major_order"}, {"score": 0.00481495764194839, "phrase": "morton"}, {"score": 0.00471465954562773, "phrase": "large_two-dimensional_arrays"}, {"score": 0.004520272777451894, "phrase": "row-major_order"}, {"score": 0.004379737380744606, "phrase": "row-major_array"}, {"score": 0.004155113657645735, "phrase": "poor_spatial_locality"}, {"score": 0.004089991141220082, "phrase": "large_arrays"}, {"score": 0.004047141845635495, "phrase": "performance_loss"}, {"score": 0.0037793152987497286, "phrase": "morton_storage_layout"}, {"score": 0.0037005154613244363, "phrase": "substantial_spatial_locality"}, {"score": 0.0034738037330064885, "phrase": "small_suite"}, {"score": 0.003437387719239532, "phrase": "dense_kernels"}, {"score": 0.003383475802364289, "phrase": "two-dimensional_arrays"}, {"score": 0.0032609360162842767, "phrase": "extensive_study"}, {"score": 0.0031761255583359726, "phrase": "poor_array_layout"}, {"score": 0.0030449789178940787, "phrase": "attractive_compromise"}, {"score": 0.0029038817737006405, "phrase": "better_performance"}, {"score": 0.002654911400878851, "phrase": "better_choice"}, {"score": 0.0026270572353632297, "phrase": "canonical_layout"}, {"score": 0.0024789887640568093, "phrase": "basic_morton_scheme"}, {"score": 0.0023891283748647416, "phrase": "correct_alignment"}, {"score": 0.0023516185395256505, "phrase": "base_address"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["compilers", " memory organization", " tiling", " space-filling curves", " Morton order", " spatial locality"], "paper_abstract": "Two-dimensional arrays are generally arranged in memory in row-major order or column-major order. Traversing a row-major array in column-major order, or vice versa, leads to poor spatial locality. With large arrays the performance loss can be a factor of 10 or more. This paper explores the Morton storage layout, which has substantial spatial locality whether traversed in row-major or column-major order. Using a small suite of dense kernels working on two-dimensional arrays, we have carried out an extensive study of the impact of poor array layout and of whether Morton layout can offer an attractive compromise. We show that Morton layout can lead to better performance than the worse of the two canonical layouts; however, the performance of Morton layout compared to the better choice of canonical layout is often disappointing. We further study one simple improvement of the basic Morton scheme: we show that choosing the correct alignment for the base address of an array in Morton layout can sometimes significantly improve the competitiveness of this layout. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Is Morton layout competitive for large two-dimensional arrays yet?", "paper_id": "WOS:000240214200009"}