{"auto_keywords": [{"score": 0.04881318091486501, "phrase": "high_utility_itemsets"}, {"score": 0.01939982943116813, "phrase": "candidate_itemsets"}, {"score": 0.007773986749657142, "phrase": "long_transactions"}, {"score": 0.007207138350591304, "phrase": "up-growth"}, {"score": 0.00481495049065317, "phrase": "mining_high_utility_itemsets"}, {"score": 0.004625255533545965, "phrase": "transactional_database"}, {"score": 0.004462892860919036, "phrase": "high_utility"}, {"score": 0.004306205029641728, "phrase": "relevant_algorithms"}, {"score": 0.004045068727683462, "phrase": "large_number"}, {"score": 0.0038338299812503, "phrase": "mining_performance"}, {"score": 0.0037658881407605445, "phrase": "execution_time"}, {"score": 0.003732368382223596, "phrase": "space_requirement"}, {"score": 0.0034902664176377943, "phrase": "long_high_utility_itemsets"}, {"score": 0.003052014818816411, "phrase": "effective_strategies"}, {"score": 0.0028795712616923462, "phrase": "tree-based_data_structure"}, {"score": 0.0023437863565921053, "phrase": "real_and_synthetic_data_sets"}, {"score": 0.002271476019266231, "phrase": "proposed_algorithms"}], "paper_keywords": ["Candidate pruning", " frequent itemset", " high utility itemset", " utility mining", " data mining"], "paper_abstract": "Mining high utility itemsets from a transactional database refers to the discovery of itemsets with high utility like profits. Although a number of relevant algorithms have been proposed in recent years, they incur the problem of producing a large number of candidate itemsets for high utility itemsets. Such a large number of candidate itemsets degrades the mining performance in terms of execution time and space requirement. The situation may become worse when the database contains lots of long transactions or long high utility itemsets. In this paper, we propose two algorithms, namely utility pattern growth (UP-Growth) and UP-Growth(+), for mining high utility itemsets with a set of effective strategies for pruning candidate itemsets. The information of high utility itemsets is maintained in a tree-based data structure named utility pattern tree (UP-Tree) such that candidate itemsets can be generated efficiently with only two scans of database. The performance of UP-Growth and UP-Growth(+) is compared with the state-of-the-art algorithms on many types of both real and synthetic data sets. Experimental results show that the proposed algorithms, especially UP-Growth(+), not only reduce the number of candidates effectively but also outperform other algorithms substantially in terms of runtime, especially when databases contain lots of long transactions.", "paper_title": "Efficient Algorithms for Mining High Utility Itemsets from Transactional Databases", "paper_id": "WOS:000321261000008"}