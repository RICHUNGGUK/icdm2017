{"auto_keywords": [{"score": 0.04468830753491191, "phrase": "operand_matrices"}, {"score": 0.00481495049065317, "phrase": "high-performance_matrix_multiplication_algorithms"}, {"score": 0.004597244847332915, "phrase": "hierarchical_memories"}, {"score": 0.004360412703519539, "phrase": "optimal_strategy"}, {"score": 0.004218602458288531, "phrase": "matrix_multiplication"}, {"score": 0.0039748192550806815, "phrase": "earlier_related_model"}, {"score": 0.003010250522930773, "phrase": "hierarchical_memory"}, {"score": 0.0029706504420983896, "phrase": "l_memory_levels"}, {"score": 0.0025340874787959195, "phrase": "matrix_input_operands"}, {"score": 0.0022492129111567824, "phrase": "matrix_operand_shapes"}, {"score": 0.0021903801614787423, "phrase": "space_limitations"}, {"score": 0.0021049977753042253, "phrase": "performance_results"}], "paper_keywords": [""], "paper_abstract": "We describe a model of hierarchical memories and we use it to determine an optimal strategy for blocking operand matrices of matrix multiplication. The model is an extension of an earlier related model by three of the authors. As before the model predicts the form of current, state-of-the-art L1 kernels. Additionally, it shows that current L1 kernels can continue to produce their high performance on operand matrices that are as large as the L2 cache. For a hierarchical memory with L memory levels (main memory and L-1 caches), our model reduces the number of potential matrix multiply algorithms front 6L to four. We use the shape of the matrix input operands to select one of our four algorithms. Previously four was 2 L and the model was independent of the matrix operand shapes. Because of space limitations, we do not include performance results.", "paper_title": "A family of high-performance matrix multiplication algorithms", "paper_id": "WOS:000237003200030"}