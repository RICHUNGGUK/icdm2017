{"auto_keywords": [{"score": 0.043400370094307784, "phrase": "java"}, {"score": 0.015719074116237117, "phrase": "generic_java"}, {"score": 0.013207694381497034, "phrase": "generic_types"}, {"score": 0.011588021162718959, "phrase": "safe_instantiation"}, {"score": 0.004567596860086148, "phrase": "\"safe_instantiation_principle"}, {"score": 0.00376409764683147, "phrase": "gj_and_nextgen_formulations"}, {"score": 0.0032697235411641695, "phrase": "safe_instantiation_principle"}, {"score": 0.002790511479398411, "phrase": "hygienic_formulation"}, {"score": 0.002555247330102505, "phrase": "type_soundness"}, {"score": 0.0023192471808039746, "phrase": "insidious_bugs"}, {"score": 0.002258745901862197, "phrase": "clearly_defined_point"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Generic Java", " mixins", " type-checking", " generics", " type systems"], "paper_abstract": "This paper introduces the \"Safe Instantiation Principle\", a new design criterion for evaluating extensions of Java that support generic types. The paper initially focuses on the GJ and NextGen formulations of Generic Java and the implications of safe instantiation for both approaches. Then it applies the safe instantiation principle to the problem of adding mixins to Java as generic types. Finally, it shows that the hygienic formulation of mixins is the only way to maintain safe instantiation and type soundness in Java with mixins and to prevent the introduction of insidious bugs with no clearly defined point of blame. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Safe instantiation in Generic Java", "paper_id": "WOS:000233946500003"}