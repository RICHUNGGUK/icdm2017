{"auto_keywords": [{"score": 0.043007234959413346, "phrase": "churned_objects"}, {"score": 0.00481495049065317, "phrase": "lightweight_dynamic_analysis"}, {"score": 0.004714023408114857, "phrase": "object_churn"}, {"score": 0.004542441734438654, "phrase": "component-based_applications"}, {"score": 0.004330941610682453, "phrase": "short-lived_objects"}, {"score": 0.004217708394188058, "phrase": "trading_performance"}, {"score": 0.0038953958723049287, "phrase": "good_candidates"}, {"score": 0.00385431710959668, "phrase": "stack_allocation"}, {"score": 0.0031342307827666675, "phrase": "lightweight_dynamic_analyses"}, {"score": 0.002818692837561076, "phrase": "inline_portions"}, {"score": 0.0027741761880779535, "phrase": "call_graph"}, {"score": 0.0025214217930287003, "phrase": "lightweight_dynamic_churn_optimizer"}, {"score": 0.002391067964886602, "phrase": "jit_compiler"}, {"score": 0.002279508335630797, "phrase": "large_application_frameworks"}, {"score": 0.002243659748320153, "phrase": "eclipse"}, {"score": 0.0021616352649774825, "phrase": "jolt"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_escape_analysis"}], "paper_keywords": ["Algorithms", " Performance", " Churn", " allocation optimization", " Java", " virtual machine", " selective optimization", " escape analysis", " inlining"], "paper_abstract": "It has been observed that component-based applications exhibit object churn, the excessive creation of short-lived objects, often caused by trading performance for modularity. Because churned objects are short-lived, they appear to be good candidates for stack allocation. Unfortunately, most churned objects escape their allocating function, making escape analysis ineffective. We reduce object churn with three contributions. First, we formalize two measures of churn, capture and control (15). Second, we develop lightweight dynamic analyses for measuring both capture and control. Third, we develop an algorithm that uses capture and control to inline portions of the call graph to make churned objects non-escaping, enabling churn optimization via escape analysis. JOLT is a lightweight dynamic churn optimizer that uses our algorithms. We embedded JOLT in the JIT compiler of the IBM J9 commercial JVM, and evaluated JOLT on large application frameworks, including Eclipse and JBoss. We found that JOLT eliminates over 4 times as many allocations as a state-of-the-art escape analysis alone.", "paper_title": "JOLT: Lightweight Dynamic Analysis and Removal of Object Churn", "paper_id": "WOS:000262035900008"}