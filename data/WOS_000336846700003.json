{"auto_keywords": [{"score": 0.004658426838467567, "phrase": "general-purpose_technique"}, {"score": 0.004506968388996092, "phrase": "recursive_programs"}, {"score": 0.0038624981944755813, "phrase": "different_recursion_operators"}, {"score": 0.003778253716938922, "phrase": "different_correctness_conditions"}, {"score": 0.0032021226849872054, "phrase": "uniform_manner"}, {"score": 0.0028993944292191433, "phrase": "new_conditions"}, {"score": 0.0021049977753042253, "phrase": "agda_system"}], "paper_keywords": [""], "paper_abstract": "The worker/wrapper transformation is a general-purpose technique for refactoring recursive programs to improve their performance. The two previous approaches to formalising the technique were based upon different recursion operators and different correctness conditions. In this paper we show how these two approaches can be generalised in a uniform manner by combining their correctness conditions, extend the theory with new conditions that are both necessary and sufficient to ensure the correctness of the worker/wrapper technique, and explore the benefits that result. All the proofs have been mechanically verified using the Agda system.", "paper_title": "Work it, wrap it, fix it, fold it", "paper_id": "WOS:000336846700003"}