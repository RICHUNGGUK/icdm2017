{"auto_keywords": [{"score": 0.04192102071091636, "phrase": "dts"}, {"score": 0.00481495049065317, "phrase": "dependency_tree_semantics"}, {"score": 0.004351595642056769, "phrase": "underspecified_logic"}, {"score": 0.00413684709497912, "phrase": "quantifier_scope_ambiguities"}, {"score": 0.003802135020791801, "phrase": "direct_interface"}, {"score": 0.0036144035798673967, "phrase": "dependency_grammar"}, {"score": 0.0034359094594153304, "phrase": "easy_management"}, {"score": 0.0033218213825698417, "phrase": "partial_disambiguations"}, {"score": 0.002951444412262927, "phrase": "quantifier_readings"}, {"score": 0.0023701601799997482, "phrase": "dot"}, {"score": 0.0021773853011112882, "phrase": "model-theoretic_interpretation"}], "paper_keywords": [""], "paper_abstract": "This paper presents Dependency Tree Semantics (DTS), an underspecified logic for representing quantifier scope ambiguities. DTS features a direct interface with a Dependency grammar, an easy management of partial disambiguations and the ability to represent branching quantifier readings. This paper focuses on the syntax of DTS, while does Dot take into account the model-theoretic interpretation of its well-formed structures(1).", "paper_title": "Dependency tree semantics", "paper_id": "WOS:000241647800062"}