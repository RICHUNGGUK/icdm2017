{"auto_keywords": [{"score": 0.04066149814668174, "phrase": "agile_release_scheduling"}, {"score": 0.00481495049065317, "phrase": "agile_environments"}, {"score": 0.004494570360108983, "phrase": "deliverable_features"}, {"score": 0.004377077848734575, "phrase": "consecutive_product_deliveries"}, {"score": 0.004217708394188058, "phrase": "agile_software_development"}, {"score": 0.004151188559520802, "phrase": "major_approach"}, {"score": 0.0041074234667687875, "phrase": "software_engineering"}, {"score": 0.004000010693331517, "phrase": "well-established_conceptual_definition"}, {"score": 0.003559675269411366, "phrase": "conceptual_model"}, {"score": 0.003522124318486352, "phrase": "agile_scheduling"}, {"score": 0.0028944757265206332, "phrase": "seven_real_life"}, {"score": 0.0027889366191837504, "phrase": "developed_algorithm"}, {"score": 0.0027303606813078255, "phrase": "resource_overload"}, {"score": 0.0027015344365793016, "phrase": "resource_underload"}, {"score": 0.0026168641536413978, "phrase": "delivery_slippage"}, {"score": 0.002416589459425828, "phrase": "optimized_semi-automatic_release_schedule_generations"}, {"score": 0.002208035721125305, "phrase": "best_schedule"}, {"score": 0.0021731423856364003, "phrase": "specific_project_context"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Agile software development", " Release planning", " Planning metamodel"], "paper_abstract": "Context: Release scheduling deals with the selection and assignment of deliverable features to a sequence of consecutive product deliveries while several constraints are fulfilled. Although agile software development represents a major approach to software engineering, there is no well-established conceptual definition and sound methodological support of agile release scheduling. Objective: To propose a solution, we present, (1) a conceptual model for agile scheduling, and (2) a novel multiple knapsack-based optimization model with (3) a branch-and-bound optimization algorithm for agile release scheduling. Method: To evaluate our model simulations were carried out seven real life and several generated data sets. Results: The developed algorithm strives to prevent resource overload and resource underload, and mitigates risks of delivery slippage. Conclusion: The results of the experiment suggest that this approach can provide optimized semi-automatic release schedule generations and more informed and established decisions utilizing what-if-analysis on the fly to tailor the best schedule for the specific project context. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Conceptual scheduling model and optimized release scheduling for agile environments", "paper_id": "WOS:000290460900002"}