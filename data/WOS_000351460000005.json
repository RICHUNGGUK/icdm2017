{"auto_keywords": [{"score": 0.03252717387669716, "phrase": "test_target"}, {"score": 0.00481495049065317, "phrase": "instance_generator"}, {"score": 0.0046987973264610685, "phrase": "object_oriented_code_coverage"}, {"score": 0.004660702714929615, "phrase": "search-based_approaches"}, {"score": 0.0044747919503484055, "phrase": "software_test-data_generation"}, {"score": 0.004384623928442369, "phrase": "object-oriented_programming"}, {"score": 0.004192585279475894, "phrase": "oop"}, {"score": 0.004025258572860201, "phrase": "direct_access"}, {"score": 0.0039280803011236395, "phrase": "source_code"}, {"score": 0.0037866774001097596, "phrase": "new_automated_search-based_software_test-data_generation_approach"}, {"score": 0.003504595508262064, "phrase": "test-data_generation_problem"}, {"score": 0.0034761488481944657, "phrase": "unit-class_testing"}, {"score": 0.003433909720151841, "phrase": "relevant_sequences"}, {"score": 0.0034060348526709634, "phrase": "method_calls"}, {"score": 0.00335095982979018, "phrase": "static_analysis"}, {"score": 0.0027666443986705453, "phrase": "external_factory_methods"}, {"score": 0.002699769374493867, "phrase": "seeding_strategy"}, {"score": 0.00266693888510356, "phrase": "diversification_strategy"}, {"score": 0.002539550974361945, "phrase": "search_heuristic"}, {"score": 0.0024984517279573906, "phrase": "test_targets"}, {"score": 0.002379092507901856, "phrase": "jtexpert"}, {"score": 0.0023026973099101876, "phrase": "different_open-source_libraries"}, {"score": 0.002265422518417868, "phrase": "better_results"}, {"score": 0.0022287497627555895, "phrase": "search_time"}, {"score": 0.00221063611719246, "phrase": "code_coverage"}, {"score": 0.0021396386320044172, "phrase": "evosuite"}, {"score": 0.0021049977753042253, "phrase": "traditional_techniques"}], "paper_keywords": ["Automatic test data generation", " search based software testing", " unit class testing", " seeding strategy", " diversification strategy", " Java testing"], "paper_abstract": "Search-based approaches have been extensively applied to solve the problem of software test-data generation. Yet, test-data generation for object-oriented programming (OOP) is challenging due to the features of OOP, e.g., abstraction, encapsulation, and visibility that prevent direct access to some parts of the source code. To address this problem we present a new automated search-based software test-data generation approach that achieves high code coverage for unit-class testing. We first describe how we structure the test-data generation problem for unit-class testing to generate relevant sequences of method calls. Through a static analysis, we consider only methods or constructors changing the state of the class-under-test or that may reach a test target. Then we introduce a generator of instances of classes that is based on a family of means-of-instantiation including subclasses and external factory methods. It also uses a seeding strategy and a diversification strategy to increase the likelihood to reach a test target. Using a search heuristic to reach all test targets at the same time, we implement our approach in a tool, JTExpert, that we evaluate on more than a hundred Java classes from different open-source libraries. JTExpert gives better results in terms of search time and code coverage than the state of the art, EvoSuite, which uses traditional techniques.", "paper_title": "Instance Generator and Problem Representation to Improve Object Oriented Code Coverage", "paper_id": "WOS:000351460000005"}