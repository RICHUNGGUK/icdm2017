{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "stuck_address_bits"}, {"score": 0.004732785510739708, "phrase": "strings_s"}, {"score": 0.003634371940842838, "phrase": "recent_work"}, {"score": 0.0034512514926836667, "phrase": "approximate_pattern_matching_problems"}, {"score": 0.0032398798149196432, "phrase": "location_component"}, {"score": 0.002726740692380339, "phrase": "string_matching"}, {"score": 0.0026342827320931937, "phrase": "bit_errors"}, {"score": 0.0023346234464901978, "phrase": "consistent_or_transient_manner"}, {"score": 0.002255431275670053, "phrase": "corresponding_approximate_pattern_matching_problems"}, {"score": 0.0022041312401435346, "phrase": "efficient_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Pattern matching", " String rearrangement metrics", " Approximate string matching", " Address errors"], "paper_abstract": "A strings S is an element of Sigma(m) can be viewed as a set of pairs {(s(i), i) vertical bar s(i) is an element of S, i is an element of {0, ... , m - 1}}. We follow the recent work on pattern matching with address errors and consider approximate pattern matching problems arising from the setting where errors are introduced to the location component (i), rather than the more traditional setting, where errors are introduced to the content itself (s(i)). Specifically, we continue the work on string matching in the presence of address bit errors. In this paper, we consider the case where bits of i may be stuck, either in a consistent or transient manner. We formally define the corresponding approximate pattern matching problems, and provide efficient algorithms for their resolution. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Approximate string matching with stuck address bits", "paper_id": "WOS:000292077200011"}