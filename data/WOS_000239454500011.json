{"auto_keywords": [{"score": 0.03121217513999794, "phrase": "ibbs"}, {"score": 0.00481495049065317, "phrase": "d-dimensional_points"}, {"score": 0.003715579364728729, "phrase": "centralized_setting"}, {"score": 0.00363827007495061, "phrase": "bbs"}, {"score": 0.0035625556447293804, "phrase": "desirable_features"}, {"score": 0.003275093899046286, "phrase": "large_main-memory_consumption"}, {"score": 0.0030747771905143273, "phrase": "improved_skyline_computation_algorithm"}, {"score": 0.003010757286626405, "phrase": "best-first_nearest_neighbor_search"}, {"score": 0.0025264171945423254, "phrase": "final_skyline"}, {"score": 0.002388487669097511, "phrase": "non-qualifying_entries"}, {"score": 0.0023551955270737215, "phrase": "extensive_experimental_evaluations"}, {"score": 0.0021049977753042253, "phrase": "low_dimensions"}], "paper_keywords": [""], "paper_abstract": "Given a set of d-dimensional points, skyline query returns the points that are not dominated by any other point on all dimensions. Currently, BBS (branch-and-bound skyline) is the most efficient skyline processing method over static data in a centralized setting. Although BBS has some desirable features (e.g., I/O optimal and flexibility), it requires large main-memory consumption. In this paper, we present an improved skyline computation algorithm based on best-first nearest neighbor search, called IBBS, which captures the optimal I/O and less memory space (i.e., IBBS visits and stores only those entries that contribute to the final skyline). Its core enables several effective pruning strategies to discard non-qualifying entries. Extensive experimental evaluations show that IBBS outperforms BBS in both scalability and efficiency for most cases, especially in low dimensions.", "paper_title": "An I/O optimal and scalable skyline query algorithm", "paper_id": "WOS:000239454500011"}