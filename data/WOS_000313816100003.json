{"auto_keywords": [{"score": 0.0435790868041128, "phrase": "dbms"}, {"score": 0.012461774785538613, "phrase": "ha"}, {"score": 0.01020619954755596, "phrase": "unprotected_dbms."}, {"score": 0.00481495049065317, "phrase": "database_systems"}, {"score": 0.004027031316965272, "phrase": "reasonable_performance_overhead"}, {"score": 0.003703282519292336, "phrase": "virtualization_layer"}, {"score": 0.0036214184763804034, "phrase": "asynchronous_virtual_machine_state_replication"}, {"score": 0.003561205990687285, "phrase": "transparent_ha_and_failover_capabilities"}, {"score": 0.0034437582356947626, "phrase": "remus"}, {"score": 0.003405472159599442, "phrase": "similar_systems"}, {"score": 0.003293142761521425, "phrase": "database_workloads"}, {"score": 0.0032383707002544755, "phrase": "performance_overhead"}, {"score": 0.002800158709933889, "phrase": "experimental_evaluation"}, {"score": 0.0027382040767844093, "phrase": "industry_standard_benchmarks"}, {"score": 0.002618366076489732, "phrase": "fast_failover"}, {"score": 0.0025178072071268534, "phrase": "low_performance_overhead"}, {"score": 0.0023941575109692336, "phrase": "practical_means"}, {"score": 0.0021049977753042253, "phrase": "new_discussion"}], "paper_keywords": ["High availability", " Fault tolerance", " Virtualization", " Checkpointing", " Performance modeling"], "paper_abstract": "In this paper, we present a technique for building a high-availability (HA) database management system (DBMS). The proposed technique can be applied to any DBMS with little or no customization, and with reasonable performance overhead. Our approach is based on Remus, a commodity HA solution implemented in the virtualization layer, that uses asynchronous virtual machine state replication to provide transparent HA and failover capabilities. We show that while Remus and similar systems can protect a DBMS, database workloads incur a performance overhead of up to 32 % as compared to an unprotected DBMS. We identify the sources of this overhead and develop optimizations that mitigate the problems. We present an experimental evaluation using two popular database systems and industry standard benchmarks showing that for certain workloads, our optimized approach provides fast failover (3 s of downtime) with low performance overhead when compared to an unprotected DBMS. Our approach provides a practical means for existing, deployed database systems to be made more reliable with a minimum of risk, cost, and effort. Furthermore, this paper invites new discussion about whether the complexity of HA is best implemented within the DBMS, or as a service by the infrastructure below it.", "paper_title": "RemusDB: transparent high availability for database systems", "paper_id": "WOS:000313816100003"}