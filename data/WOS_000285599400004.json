{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "invariant_integers"}, {"score": 0.004595356579614969, "phrase": "two-word_integer"}, {"score": 0.00453144352814823, "phrase": "single-word_integer"}, {"score": 0.004264558080356621, "phrase": "efficient_division_instructions"}, {"score": 0.004224911726496726, "phrase": "current_processors"}, {"score": 0.0040133278382101885, "phrase": "precomputed_single-word_approximation"}, {"score": 0.0037768417338850274, "phrase": "adjustment_steps"}, {"score": 0.003672427620845944, "phrase": "unsigned_multiplication_instructions"}, {"score": 0.003604421041893448, "phrase": "full_word_multiplication"}, {"score": 0.003472149546470424, "phrase": "two-word_product"}, {"score": 0.0027612315954598085, "phrase": "earlier_methods"}, {"score": 0.0027100527874262446, "phrase": "new_method"}, {"score": 0.002684819249720834, "phrase": "cheaper_multiplication_operations"}, {"score": 0.002562123444678208, "phrase": "additional_savings"}, {"score": 0.002538263784314365, "phrase": "simpler_adjustment_conditions"}, {"score": 0.0023996890513009743, "phrase": "gmp_library"}, {"score": 0.002289993730291136, "phrase": "large_integer"}, {"score": 0.0022580713471027996, "phrase": "single_word"}, {"score": 0.002226592967032469, "phrase": "new_algorithm"}, {"score": 0.0021347607855562102, "phrase": "amd_and_intel_processors"}], "paper_keywords": ["Computer arithmetic", " multiple precision arithmetic", " efficiency"], "paper_abstract": "This paper considers the problem of dividing a two-word integer by a single-word integer, together with a few extensions and applications. Due to lack of efficient division instructions in current processors, the division is performed as a multiplication using a precomputed single-word approximation of the reciprocal of the divisor, followed by a couple of adjustment steps. There are three common types of unsigned multiplication instructions: we define full word multiplication (umul), which produces the two-word product of two single-word integers; low multiplication (umullo), which produces only the least significant word of the product; and high multiplication (umulhi), which produces only the most significant word. We describe an algorithm that produces a quotient and remainder using one umul and one umullo. This is an improvement over earlier methods, since the new method uses cheaper multiplication operations. It turns out that we also get some additional savings from simpler adjustment conditions. The algorithm has been implemented in version 4.3 of the GMP library. When applied to the problem of dividing a large integer by a single word, the new algorithm gives a speedup of roughly 30 percent, benchmarked on AMD and Intel processors in the x86_64 family.", "paper_title": "Improved Division by Invariant Integers", "paper_id": "WOS:000285599400004"}