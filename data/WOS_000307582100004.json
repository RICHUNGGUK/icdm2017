{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "generic_programming"}, {"score": 0.04678864793717076, "phrase": "type_classes"}, {"score": 0.038769847507469174, "phrase": "implicit_instantiation"}, {"score": 0.004730407079824938, "phrase": "gp"}, {"score": 0.004646852519870358, "phrase": "increasingly_important_trend"}, {"score": 0.004605748839642513, "phrase": "programming_languages"}, {"score": 0.004565007074039171, "phrase": "well-known_gp_mechanisms"}, {"score": 0.003959863717046575, "phrase": "scala_implicits"}, {"score": 0.003907403442285109, "phrase": "gp_language_mechanism"}, {"score": 0.0036390887584943723, "phrase": "special_type"}, {"score": 0.003032405563826263, "phrase": "key_ideas"}, {"score": 0.002952516738708181, "phrase": "minimal_and_general_core_calculus"}, {"score": 0.0027252240573281163, "phrase": "source_languages"}, {"score": 0.002537880772794665, "phrase": "partial_resolution_and_higher-order_rules"}, {"score": 0.0023113506171584157, "phrase": "implicit_calculus"}, {"score": 0.0022806798371116698, "phrase": "formal_model"}, {"score": 0.0021910825909008946, "phrase": "language_designers"}, {"score": 0.002123831297790248, "phrase": "similar_mechanisms"}], "paper_keywords": ["Languages", " Implicit parameters", " type classes", " C plus plus concepts", " generic programming", " Haskell", " Scala"], "paper_abstract": "Generic programming (GP) is an increasingly important trend in programming languages. Well-known GP mechanisms, such as type classes and the C++0x concepts proposal, usually combine two features: 1) a special type of interfaces; and 2) implicit instantiation of implementations of those interfaces. Scala implicits are a GP language mechanism, inspired by type classes, that break with the tradition of coupling implicit instantiation with a special type of interface. Instead, implicits provide only implicit instantiation, which is generalized to work for any types. This turns out to be quite powerful and useful to address many limitations that show up in other GP mechanisms. This paper synthesizes the key ideas of implicits formally in a minimal and general core calculus called the implicit calculus (lambda(double right arrow)), and it shows how to build source languages supporting implicit instantiation on top of it. A novelty of the calculus is its support for partial resolution and higher-order rules (a feature that has been proposed before, but was never formalized or implemented). Ultimately, the implicit calculus provides a formal model of implicits, which can be used by language designers to study and inform implementations of similar mechanisms in their own languages.", "paper_title": "The Implicit Calculus A New Foundation for Generic Programming", "paper_id": "WOS:000307582100004"}