{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "automatic_testing_environment"}, {"score": 0.027023636898483413, "phrase": "atemes"}, {"score": 0.004783232571029632, "phrase": "multi-core_embedded_software-atemes._software_testing"}, {"score": 0.004506968388996092, "phrase": "quality_control"}, {"score": 0.004462494148878735, "phrase": "embedded_software_testing"}, {"score": 0.00443308765153716, "phrase": "even_more_challenges"}, {"score": 0.004403874076980828, "phrase": "major_issues"}, {"score": 0.004260656420599919, "phrase": "repetitive_tedious_actions"}, {"score": 0.0041357305373417455, "phrase": "resource_restraints"}, {"score": 0.0041084684278314305, "phrase": "embedded_system_platform"}, {"score": 0.004067910470129423, "phrase": "temporal_and_memory_capacity"}, {"score": 0.003922580121023413, "phrase": "multi-core_cpu_computing_capacity"}, {"score": 0.0037824221315407355, "phrase": "sufficient_coverage_test"}, {"score": 0.003757480190200645, "phrase": "embedded_software"}, {"score": 0.0036593403276183245, "phrase": "data_synchronization"}, {"score": 0.003587415196933649, "phrase": "race_conditions"}, {"score": 0.0035285548582081627, "phrase": "multi-core_embedded_system"}, {"score": 0.0034024277222012597, "phrase": "customer_satisfaction"}, {"score": 0.0032591491777773035, "phrase": "multi-core_embedded_software"}, {"score": 0.0031739835218110015, "phrase": "automatic_mechanism"}, {"score": 0.003030247482854539, "phrase": "testing_programs"}, {"score": 0.003010250522930773, "phrase": "test_case"}, {"score": 0.0029903851294825023, "phrase": "test_driver"}, {"score": 0.002883439044844259, "phrase": "test_input_data"}, {"score": 0.0027803070408286158, "phrase": "testing_results"}, {"score": 0.0027346529452880585, "phrase": "test_engineer's_burden"}, {"score": 0.0026281103468378856, "phrase": "automatic_testing_functions"}, {"score": 0.0026107601878587816, "phrase": "unit_testing"}, {"score": 0.0025935242726503964, "phrase": "coverage_testing"}, {"score": 0.00257640185288362, "phrase": "multi-core_performance_monitoring"}, {"score": 0.0025173564697303836, "phrase": "automatic_multi-round_cross-testing_benchmark_testing"}, {"score": 0.002451527111936163, "phrase": "parallel_programs"}, {"score": 0.0024353398669404334, "phrase": "intel_tbb_library"}, {"score": 0.0024112587007106535, "phrase": "optimized_parallel_parameters"}, {"score": 0.002387415084371473, "phrase": "pipeline_tokens"}, {"score": 0.002197649447160344, "phrase": "test_engineer"}, {"score": 0.002147265537489893, "phrase": "testing_task"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Automatic testing", " Embedded software testing", " Coverage testing", " Unit testing", " Cross-testing", " Testing tool", " Test case generation", " Object testing", " Multi-core embedded software testing", " Parallelism degree testing", " TBB testing"], "paper_abstract": "Software testing during the development process of embedded software is not only complex, but also the heart of quality control. Multi-core embedded software testing faces even more challenges. Major issues include: (1) how demanding efforts and repetitive tedious actions can be reduced; (2) how resource restraints of embedded system platform such as temporal and memory capacity can be tackled; (3) how embedded software parallelism degree can be controlled to empower multi-core CPU computing capacity; (4) how analysis is exercised to ensure sufficient coverage test of embedded software; (5) how to do data synchronization to address issues such as race conditions in the interrupt driven multi-core embedded system; (6) high level reliability testing to ensure customer satisfaction. To address these issues, this study develops an automatic testing environment for multi-core embedded software (ATEMES). Based on the automatic mechanism, the system can parse source code, instrument source code, generate testing programs for test case and test driver, support generating primitive, structure and object types of test input data, multi-round cross-testing, and visualize testing results. To both reduce test engineer's burden and enhance his efficiency when embedded software testing is in process, this system developed automatic testing functions including unit testing, coverage testing, multi-core performance monitoring. Moreover, ATEMES can perform automatic multi-round cross-testing benchmark testing on multi-core embedded platform for parallel programs adopting Intel TBB library to recommend optimized parallel parameters such as pipeline tokens. Using ATEMES on the ARM11 multi-core platform to conduct testing experiments, the results show that our constructed testing environment is effective, and can reduce burdens of test engineer, and can enhance efficiency of testing task. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Automatic testing environment for multi-core embedded software-ATEMES", "paper_id": "WOS:000297892900005"}