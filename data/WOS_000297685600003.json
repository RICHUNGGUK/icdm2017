{"auto_keywords": [{"score": 0.05007625800188236, "phrase": "bottom-up_shape_analysis"}, {"score": 0.04961100248897734, "phrase": "lisf."}, {"score": 0.038497361372110565, "phrase": "inference_rules"}, {"score": 0.028409001559368784, "phrase": "spine"}, {"score": 0.004585212379675535, "phrase": "new_shape_analysis_algorithm"}, {"score": 0.004518442937844318, "phrase": "key_distinguishing_aspect"}, {"score": 0.004077394032903726, "phrase": "inference_system"}, {"score": 0.004037694641919865, "phrase": "computing_hoare_triples"}, {"score": 0.0037519679864796906, "phrase": "hoare_triples"}, {"score": 0.003192312493850036, "phrase": "iterated_separating_conjunct"}, {"score": 0.003161389989178827, "phrase": "reynolds"}, {"score": 0.0030696773722514105, "phrase": "program_states"}, {"score": 0.003024909947609294, "phrase": "key_ingredient"}, {"score": 0.002951739421935396, "phrase": "strong_bi-abduction_operation"}, {"score": 0.002838319783373086, "phrase": "sound_strong_bi-abduction"}, {"score": 0.002548331088496964, "phrase": "standard_shape_analysis_benchmark_programs"}, {"score": 0.0024383967028975616, "phrase": "expressive_summaries"}, {"score": 0.002391067964886602, "phrase": "complete_functional_specifications"}, {"score": 0.0021049977753042253, "phrase": "verification-formal_methods"}], "paper_keywords": ["Algorithms", " Theory", " Verification", " Compositional analysis", " hoare logic", " separation logic"], "paper_abstract": "In this article, we present a new shape analysis algorithm. The key distinguishing aspect of our algorithm is that it is completely compositional, bottom-up and noniterative. We present our algorithm as an inference system for computing Hoare triples summarizing heap manipulating programs. Our inference rules are compositional: Hoare triples for a compound statement are computed from the Hoare triples of its component statements. These inference rules are used as the basis for bottom-up shape analysis of programs. Specifically, we present a Logic of Iterated Separation Formulae (LISF), which uses the iterated separating conjunct of Reynolds [2002] to represent program states. A key ingredient of our inference rules is a strong bi-abduction operation between two logical formulas. We describe sound strong bi-abduction and satisfiability procedures for LISF. We have built a tool called SPINE that implements these inference rules and have evaluated it on standard shape analysis benchmark programs. Our experiments show that SPINE can generate expressive summaries, which are complete functional specifications in many cases. Categories and Subject Descriptors: D. 2.1 [Software Engineering]: Requirements/Specifications; D. 2.4 [Software Engineering]: Software/Program Verification-Formal methods; programming by contract", "paper_title": "Bottom-Up Shape Analysis using LISF", "paper_id": "WOS:000297685600003"}