{"auto_keywords": [{"score": 0.043726272486193665, "phrase": "dce"}, {"score": 0.015719673210079107, "phrase": "dual-core_execution"}, {"score": 0.015356878721521238, "phrase": "transient-fault_recovery"}, {"score": 0.013472552536323429, "phrase": "complexity-effective_approach"}, {"score": 0.009170849355231953, "phrase": "transient-fault_tolerance"}, {"score": 0.007964060635135814, "phrase": "optimized_dce"}, {"score": 0.004528301408585875, "phrase": "execution_paradigm"}, {"score": 0.0044435677598780796, "phrase": "chip_multiprocessors"}, {"score": 0.0043194180167921165, "phrase": "single-threaded_applications"}, {"score": 0.004043003243656031, "phrase": "highly_scalable_instruction_window"}, {"score": 0.003986103192038901, "phrase": "significant_latency-hiding_capabilities"}, {"score": 0.003766369160795001, "phrase": "power_efficiency"}, {"score": 0.003475582268210954, "phrase": "front_processor"}, {"score": 0.003378385493203297, "phrase": "back_processor"}, {"score": 0.0032376465741070274, "phrase": "centralized_structures"}, {"score": 0.003015950477134494, "phrase": "computational_redundancy"}, {"score": 0.0028766278519176355, "phrase": "main_contributions"}, {"score": 0.002717886783819971, "phrase": "full_redundancy_coverage"}, {"score": 0.002580061425699194, "phrase": "dce-based_execution_paradigms"}, {"score": 0.002460825108719896, "phrase": "proposed_simple_techniques"}, {"score": 0.002358220053411644, "phrase": "significant_performance_enhancement"}, {"score": 0.0022706045233150795, "phrase": "original_dce"}, {"score": 0.0022175019341824603, "phrase": "similar_speedups"}, {"score": 0.002145233716114994, "phrase": "single-core_processors"}, {"score": 0.0021049977753042253, "phrase": "energy_overhead"}], "paper_keywords": ["multiple data stream architectures", " fault tolerance", " low-power design"], "paper_abstract": "Dual-core execution (DCE) is an execution paradigm proposed to utilize chip multiprocessors to improve the performance of single-threaded applications. Previous research has shown that DCE provides a complexity-effective approach to building a highly scalable instruction window and achieves significant latency-hiding capabilities. In this paper, we propose to optimize DCE for power efficiency and/or transient-fault recovery. In DCE, a program is first processed (speculatively) in the front processor and then reexecuted by the back processor. Such reexecution is the key to eliminating the centralized structures that are normally associated with very large instruction windows. In this paper, we exploit the computational redundancy in DCE to improve its reliability and its power efficiency. The main contributions include: 1) DCE-based redundancy checking for transient-fault tolerance and a complexity-effective approach to achieving full redundancy coverage and 2) novel techniques to improve the power/energy efficiency of DCE-based execution paradigms. Our experimental results demonstrate that, with the proposed simple techniques, the optimized DCE can effectively achieve transient-fault tolerance or significant performance enhancement in a power/energy-efficient way. Compared to the original DCE, the optimized DCE has similar speedups (34 percent on average) over single-core processors while reducing the energy overhead from 93 percent to 31 percent.", "paper_title": "Optimizing dual-core execution for power efficiency and transient-fault recovery", "paper_id": "WOS:000247541500006"}