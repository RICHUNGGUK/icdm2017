{"auto_keywords": [{"score": 0.0475341023543958, "phrase": "computer_science"}, {"score": 0.044776654657324805, "phrase": "programming_languages"}, {"score": 0.00481495049065317, "phrase": "semantic_and_logical_treatment"}, {"score": 0.004630910803911567, "phrase": "recursive_definitions"}, {"score": 0.004384960761826366, "phrase": "requirements_specification"}, {"score": 0.004217286731331736, "phrase": "related_formalisms"}, {"score": 0.004055998173160551, "phrase": "recursively_defined_functions"}, {"score": 0.003900853871728297, "phrase": "key_issues"}, {"score": 0.0038106195546165574, "phrase": "semantic_theory"}, {"score": 0.002968424524565369, "phrase": "recursive_function_declarations"}, {"score": 0.0028996963188373144, "phrase": "different_branches"}, {"score": 0.002206045784326466, "phrase": "different_possibilities"}, {"score": 0.0021049977753042253, "phrase": "simple_running_example"}], "paper_keywords": [""], "paper_abstract": "The semantic and logical treatment of recursion and of recursive definitions in computer science, in particular in requirements specification, in programming languages and related formalisms such as lambda-calculus or recursively defined functions is one of the key issues of the semantic theory of programming and programming languages. As it has been recognised already in the early days of the theory of programming there are several options to formalise and give a theory of the semantics of recursive function declarations. In different branches of computer science, logics, and mathematics various techniques for dealing with the semantics of recursion have been developed and established. We outline, compare, and shortly discuss advantages and disadvantages of these different possibilities, illustrate them by a simple running example, and relate these approaches.", "paper_title": "From chaos to undefinedness", "paper_id": "WOS:000239518200025"}