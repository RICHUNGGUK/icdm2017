{"auto_keywords": [{"score": 0.03193213759246904, "phrase": "londex_constraints"}, {"score": 0.00481495049065317, "phrase": "mutual_exclusion"}, {"score": 0.004716113134313215, "phrase": "powerful_mechanism"}, {"score": 0.004683618147754759, "phrase": "search_space_pruning"}, {"score": 0.004571630734130793, "phrase": "serious_limitation"}, {"score": 0.004340553321613485, "phrase": "different_time_steps"}, {"score": 0.004207527897084009, "phrase": "new_class"}, {"score": 0.004178522455099832, "phrase": "mutual_exclusions"}, {"score": 0.004008624230034271, "phrase": "proposed_long-distance_mutual_exclusion"}, {"score": 0.003740615400423586, "phrase": "multiple_steps"}, {"score": 0.0035391223341472502, "phrase": "general_and_effective_tool"}, {"score": 0.0035025644647418983, "phrase": "efficient_planners"}, {"score": 0.0033951334049808733, "phrase": "first_level"}, {"score": 0.0033023994098455457, "phrase": "individual_domain_transition_graphs"}, {"score": 0.003124437382827821, "phrase": "multiple_dtgs"}, {"score": 0.002997269132281551, "phrase": "stronger_pruning_power"}, {"score": 0.0029458177077921043, "phrase": "large_amount"}, {"score": 0.002875261849352716, "phrase": "memory_problem"}, {"score": 0.0028161281608563267, "phrase": "virtual_realization_mechanism"}, {"score": 0.0026185499482623, "phrase": "huge_amount"}, {"score": 0.002564682311144514, "phrase": "pruning_power"}, {"score": 0.002520637941597506, "phrase": "evaluation_purposes"}, {"score": 0.002271773887265199, "phrase": "former_exploits"}, {"score": 0.0022639147412879487, "phrase": "causal_dependencies"}, {"score": 0.0021943920257952174, "phrase": "significant_advantages"}, {"score": 0.002149231173009159, "phrase": "planning_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Planning", " Mutual exclusion", " Constraint propagation", " Satisfiability"], "paper_abstract": "Mutual exclusion (mutex) is a powerful mechanism for search space pruning in planning. However, a serious limitation of mutex is that it cannot specify constraints relating actions and facts across different time steps. In this paper, we propose a new class of mutual exclusions that significantly generalizes mutex and can be efficiently computed. The proposed long-distance mutual exclusion (londex) can capture constraints over actions and facts not only at the same time step but also across multiple steps. As a generalization, londex is much stronger than mutex, and provides a general and effective tool for developing efficient planners. We propose two levels of londex. The first level, londex(1), is derived from individual domain transition graphs (DTGs), and the second level. londex(m), is derived from multiple DTGs by taking into account the interactions among them. Londex constraints provide stronger pruning power but also require a large amount of memory. To address the memory problem, we further develop a virtual realization mechanism in which only a small proportion of londex constraints are dynamically generated as needed during the search. This scheme can save a huge amount of memory without sacrificing the pruning power of londex. For evaluation purposes, we incorporate londex into SATPlan04 and SATPlan06, two efficient SAT-based planners. Our experimental results show that londex(m) can significantly improve over londex, since the former exploits causal dependencies among DTGs. Our experimental results for various planning domains also show significant advantages of using londex constraints for reducing planning time. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Long-distance mutual exclusion for planning", "paper_id": "WOS:000262732500008"}