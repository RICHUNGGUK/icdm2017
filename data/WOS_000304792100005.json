{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "extensible_processors"}, {"score": 0.02052305260499277, "phrase": "custom_instructions"}, {"score": 0.004442032546224076, "phrase": "base_instruction"}, {"score": 0.0043533862892678864, "phrase": "general-purpose_processor"}, {"score": 0.004077272409331917, "phrase": "special_hardware_units"}, {"score": 0.0038964032225585117, "phrase": "power_consumption"}, {"score": 0.003799397093447221, "phrase": "key_issue"}, {"score": 0.003576286811853861, "phrase": "high-level_application_code"}, {"score": 0.003417565253539315, "phrase": "new_efficient_algorithm"}, {"score": 0.003366233863411861, "phrase": "automatic_generation"}, {"score": 0.0033156708990372047, "phrase": "candidate_instructions"}, {"score": 0.0031684791285366315, "phrase": "feasible_connected_and_disjoint_patterns"}, {"score": 0.0030431198971423937, "phrase": "previously_proposed_well-known_algorithm"}, {"score": 0.0028355237433457313, "phrase": "topological_property"}, {"score": 0.0028070431733705735, "phrase": "data_flow_graph"}, {"score": 0.002778851041455218, "phrase": "dfg"}, {"score": 0.0026420518944303716, "phrase": "previously_proposed_algorithm"}, {"score": 0.002563219920877287, "phrase": "proposed_algorithm"}, {"score": 0.0024493494346360415, "phrase": "extended_algorithm"}, {"score": 0.002388283252319309, "phrase": "search_space"}, {"score": 0.0022937210378944457, "phrase": "experimental_results"}, {"score": 0.002202894673025544, "phrase": "magnitude_speedup"}, {"score": 0.0021697677572213086, "phrase": "well-know_algorithm"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Extensible processors", " ASIPs", " DFG", " Custom instruction", " Custom instruction generation algorithm"], "paper_abstract": "In recent years, the use of extensible processors has been increased. Extensible processors extend the base instruction set of a general-purpose processor with a set of custom instructions. Custom instructions that can be implemented in special hardware units make it possible to improve performance and decrease power consumption in extensible processors. The key issue involved is to generate and select automatically the custom instructions from a high-level application code. In this paper, we propose a new efficient algorithm for the automatic generation of all candidate instructions (or patterns). Our pattern generation algorithm identify all feasible connected and disjoint patterns under different constraints. Compared to a previously proposed well-known algorithm, our algorithm solves the problem more efficiently by taking advantage of the topological property of data flow graph (DFG) as well as overcoming the drawbacks of the previously proposed algorithm. An extension of the proposed algorithm is also presented in this paper. The extended algorithm further radically reduce the search space by considering the input resolving nodes. Experimental results show that our algorithms can achieve orders of magnitude speedup over the well-know algorithm. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Exact custom instruction enumeration for extensible processors", "paper_id": "WOS:000304792100005"}