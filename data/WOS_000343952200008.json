{"auto_keywords": [{"score": 0.04887979152719356, "phrase": "vertex_separation_problem"}, {"score": 0.04804050199975018, "phrase": "vsp"}, {"score": 0.029007224408923678, "phrase": "best_previous_method"}, {"score": 0.00481495049065317, "phrase": "intensification_and_diversification_strategies"}, {"score": 0.004780183801822596, "phrase": "vns."}, {"score": 0.004543708337879809, "phrase": "np-hard_problem"}, {"score": 0.004462105963334103, "phrase": "vlsi_design"}, {"score": 0.00442987501427177, "phrase": "graph_drawing"}, {"score": 0.004397875849247165, "phrase": "computer_language_compiler_design"}, {"score": 0.004272164161788242, "phrase": "optimization_problems"}, {"score": 0.004135010810625326, "phrase": "best_separator"}, {"score": 0.004031375102068085, "phrase": "generic_graph"}, {"score": 0.003916098498242888, "phrase": "different_heuristic_methods"}, {"score": 0.003831801113154043, "phrase": "variable_neighborhood_search_scheme"}, {"score": 0.0036288825833675127, "phrase": "constructive_algorithm"}, {"score": 0.0034366728236876047, "phrase": "efficient_algorithmic_strategies"}, {"score": 0.0032783186166708985, "phrase": "objective_function"}, {"score": 0.0032310733124059567, "phrase": "search_process"}, {"score": 0.0030821633718368206, "phrase": "reduced_variable_neighborhood_search"}, {"score": 0.0027943943921568456, "phrase": "extensive_experimental_comparison"}, {"score": 0.002460876181416983, "phrase": "computing_time"}, {"score": 0.0023990982005125763, "phrase": "non-parametric_statistical_tests"}, {"score": 0.0022801457330447524, "phrase": "vnd"}, {"score": 0.0022472527731744974, "phrase": "statistically_significant_differences"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Combinatorial optimization", " Intensification", " Diversification", " Variable Neighborhood Search", " Layout problems", " Vertex separation problem"], "paper_abstract": "The Vertex Separation problem (VSP) is an NP-hard problem with practical applications in VLSI design, graph drawing and computer language compiler design. VSP belongs to a family of optimization problems in which the objective is to find the best separator of vertices or edges in a generic graph. In this paper, we propose different heuristic methods and embed them into a Variable Neighborhood Search scheme to solve this problem. More precisely, we propose (i) a constructive algorithm, (ii) four shake procedures, (iii) two neighborhood structures, (iv) efficient algorithmic strategies to explore them, (v) an extended version of the objective function to facilitate the search process and finally, (vi) we embed these strategies in a Reduced Variable Neighborhood Search (RVNS), a Variable Neighborhood Descent (VND) and a General Variable Neighborhood Search (GVNS). Additionally, we provide an extensive experimental comparison among them and with the best previous method of the literature. We consider three different benchmarks, totalizing 162 representative instances. The experimentation reveals that our best procedure (GVNS) improves the state of the art in both quality and computing time. This fact is confirmed by non-parametric statistical tests. In addition, when considering only the largest instances, the other two proposed variants (RVNS and VND) also obtain statistically significant differences with respect to the best previous method identified in the state of the art. (C) 2013 Elsevier Ltd. All rights reserved.", "paper_title": "Combining intensification and diversification strategies in VNS. An application to the Vertex Separation problem", "paper_id": "WOS:000343952200008"}