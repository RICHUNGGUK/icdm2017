{"auto_keywords": [{"score": 0.040241282148229925, "phrase": "proposed_approach"}, {"score": 0.03654516494859162, "phrase": "new_classes"}, {"score": 0.035714486002063964, "phrase": "original_class"}, {"score": 0.029149091612037988, "phrase": "new_approach"}, {"score": 0.00481495049065317, "phrase": "class_refactoring"}, {"score": 0.00459165923324494, "phrase": "software_evolution"}, {"score": 0.004548253531664032, "phrase": "internal_structure"}, {"score": 0.004441517985511521, "phrase": "continuous_modifications"}, {"score": 0.0043786774510943625, "phrase": "continuous_changes"}, {"score": 0.004296264970612285, "phrase": "source_code"}, {"score": 0.004116440453049531, "phrase": "class_cohesion"}, {"score": 0.00388828234270598, "phrase": "extract_class_refactoring"}, {"score": 0.003603549914861701, "phrase": "strongly_related_methods"}, {"score": 0.0035525230119401153, "phrase": "identified_method_chains"}, {"score": 0.003436242862104006, "phrase": "higher_cohesion"}, {"score": 0.003307988966112615, "phrase": "overall_coupling"}, {"score": 0.003007846011394511, "phrase": "artificial_scenario"}, {"score": 0.0027218799769229596, "phrase": "previous_work"}, {"score": 0.0026077803487003, "phrase": "real_blobs"}, {"score": 0.00258307991054107, "phrase": "existing_open_source_systems"}, {"score": 0.0024630345285372958, "phrase": "proposed_refactoring_solutions"}, {"score": 0.00241658945942583, "phrase": "software_engineers"}, {"score": 0.002359759876402679, "phrase": "proposed_refactorings"}, {"score": 0.0022933216359142736, "phrase": "original_developers"}, {"score": 0.0021971473452127126, "phrase": "previously_proposed_approach"}, {"score": 0.0021352776064254195, "phrase": "proposed_solutions"}, {"score": 0.0021049977753042253, "phrase": "guiding_refactorings"}], "paper_keywords": ["Extract class refactoring", " Cohesion", " Coupling", " Graph clustering algorithms"], "paper_abstract": "During software evolution the internal structure of the system undergoes continuous modifications. These continuous changes push away the source code from its original design, often reducing its quality, including class cohesion. In this paper we propose a method for automating the Extract Class refactoring. The proposed approach analyzes (structural and semantic) relationships between the methods in a class to identify chains of strongly related methods. The identified method chains are used to define new classes with higher cohesion than the original class, while preserving the overall coupling between the new classes and the classes interacting with the original class. The proposed approach has been first assessed in an artificial scenario in order to calibrate the parameters of the approach. The data was also used to compare the new approach with previous work. Then it has been empirically evaluated on real Blobs from existing open source systems in order to assess how good and useful the proposed refactoring solutions are considered by software engineers and how well the proposed refactorings approximate refactorings done by the original developers. We found that the new approach outperforms a previously proposed approach and that developers find the proposed solutions useful in guiding refactorings.", "paper_title": "Automating extract class refactoring: an improved method and its evaluation", "paper_id": "WOS:000343910700003"}