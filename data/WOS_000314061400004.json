{"auto_keywords": [{"score": 0.004661446705304497, "phrase": "maximum_cover_problem"}, {"score": 0.004263972370406983, "phrase": "ground_set"}, {"score": 0.004094639048362357, "phrase": "positive_integer_w"}, {"score": 0.0035965032173588753, "phrase": "maximum_number"}, {"score": 0.003289534854212415, "phrase": "fundamental_combinatorial_optimization_problem"}, {"score": 0.0031845067058084583, "phrase": "resource_allocation"}, {"score": 0.003057910095857785, "phrase": "simplest_apx-hard_variant"}, {"score": 0.002578745296475411, "phrase": "previously_best_known_approximation_guarantee"}, {"score": 0.002320449502337321, "phrase": "large_packing"}, {"score": 0.0022830706430588482, "phrase": "disjoint_sets"}, {"score": 0.0021049977753042253, "phrase": "simple_local_improvements"}], "paper_keywords": ["Maximum cover", " Set packing", " Approximation algorithms", " Local search"], "paper_abstract": "In the maximum cover problem, we are given a collection of sets over a ground set of elements and a positive integer w, and we are asked to compute a collection of at most w sets whose union contains the maximum number of elements from the ground set. This is a fundamental combinatorial optimization problem with applications to resource allocation. We study the simplest APX-hard variant of the problem where all sets are of size at most 3 and we present a 6/5-approximation algorithm, improving the previously best known approximation guarantee. Our algorithm is based on the idea of first computing a large packing of disjoint sets of size 3 and then augmenting it by performing simple local improvements.", "paper_title": "A 6/5-approximation algorithm for the maximum 3-cover problem", "paper_id": "WOS:000314061400004"}