{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "edit_distance"}, {"score": 0.004764859786310636, "phrase": "run-length_encoded_strings"}, {"score": 0.004475022550508119, "phrase": "text_compression"}, {"score": 0.004382364826200616, "phrase": "similarity_computation"}, {"score": 0.0041589926969138585, "phrase": "run-length_encoding"}, {"score": 0.004051595625804513, "phrase": "earliest_studied_compression_schemes"}, {"score": 0.0037456980766939836, "phrase": "in-del_distance"}, {"score": 0.0036680857629458816, "phrase": "longest_common_subsequence"}, {"score": 0.003303412571939192, "phrase": "input_strings"}, {"score": 0.003251920460276645, "phrase": "worst-case_time_complexity"}, {"score": 0.003069867656852932, "phrase": "uncompressed_string_lengths"}, {"score": 0.0029284999172756103, "phrase": "foundational_gap"}, {"score": 0.0027645030021576926, "phrase": "compressed_string_lengths"}, {"score": 0.0026096659285441384, "phrase": "n_runs"}, {"score": 0.00256895975568914, "phrase": "thousand_currency_signn"}, {"score": 0.002301211274459965, "phrase": "first_fully_compressed_solution"}], "paper_keywords": ["Compressed pattern matching", " Edit distance", " Run length"], "paper_abstract": "A recent trend in stringology explores the possibility of utilizing text compression to speed up similarity computation between strings. In this line of investigation, run-length encoding is one of the earliest studied compression schemes. Despite its simple coding nature, the only positive result before this work is the computation of the in-del distance (dual of longest common subsequence), which requires O(mnlogmn) time, where m and n denote the number of runs of the input strings. The worst-case time complexity of computing the edit distance between two run-length encoded strings still depends on the uncompressed string lengths. In this paper, we break the foundational gap by providing its first \"fully compressed\" algorithm whose running time depends solely on the compressed string lengths. Specifically, given two strings, compressed into m and n runs, ma parts per thousand currency signn, we present an O(mn (2))-time algorithm for computing the edit distance of the strings. Our approach also yields the first fully compressed solution to approximate matching of a pattern of m runs in a text of n runs in O(mn (2)) time.", "paper_title": "A Fully Compressed Algorithm for Computing the Edit Distance of Run-Length Encoded Strings", "paper_id": "WOS:000313649000005"}