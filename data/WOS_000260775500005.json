{"auto_keywords": [{"score": 0.040108824253493075, "phrase": "available_refactorings"}, {"score": 0.03217160122346607, "phrase": "total_effect"}, {"score": 0.03126516334455744, "phrase": "conflicting_refactorings"}, {"score": 0.026135950474801942, "phrase": "scheduling_model"}, {"score": 0.00481495049065317, "phrase": "software_refactorings"}, {"score": 0.004675565200598801, "phrase": "internal_structure"}, {"score": 0.004641351004344458, "phrase": "object-oriented_software"}, {"score": 0.004590496414177077, "phrase": "software_quality"}, {"score": 0.004360412703519539, "phrase": "predefined_refactoring_rules"}, {"score": 0.00373682045166829, "phrase": "greatest_effect"}, {"score": 0.003249574947858394, "phrase": "application_order"}, {"score": 0.002996992362027833, "phrase": "refactoring_activity"}, {"score": 0.0028153046221865386, "phrase": "refactoring_activities"}, {"score": 0.0026446021865907197, "phrase": "conflict-aware_scheduling_approach"}, {"score": 0.0025490525773769063, "phrase": "conflict_matrix"}, {"score": 0.0024842242921857705, "phrase": "individual_refactoring"}, {"score": 0.0024299678474208023, "phrase": "multi-objective_optimisation_model"}, {"score": 0.00238565827614317, "phrase": "heuristic_algorithm"}, {"score": 0.0022994427535192514, "phrase": "proposed_scheduling_approach"}, {"score": 0.0022825763382627443, "phrase": "non-trivial_projects"}, {"score": 0.002200077887697072, "phrase": "scheduling_approach"}, {"score": 0.002175913488493802, "phrase": "greater_effect"}, {"score": 0.0021049977753042253, "phrase": "explicit_scheduling"}], "paper_keywords": [""], "paper_abstract": "Software refactoring is to restructure the internal structure of object-oriented software to improve software quality, especially maintainability, extensibility and reusability while preserving its external behaviours. According to predefined refactoring rules, we may find many places in the software where refactorings can be applied. Applying each refactoring, we may achieve some effect (quality improvement). If we can apply all of the available refactorings, we can achieve the greatest effect. However, the conflicts among refactorings usually make it impossible. The application of a refactoring may change or delete elements necessary for other refactorings, and thus disables these refactorings. As a result, the application order (schedule) of the available refactorings determines which refactorings will be applied, and thus determines the total effect achieved by the refactoring activity. Consequently, conflicting refactorings had better be scheduled rationally so as to promote the total effect of refactoring activities. However, how to schedule conflicting refactorings is rarely discussed. In this paper, a conflict-aware scheduling approach is proposed. It schedules refactorings according to the conflict matrix of refactorings and effects of each individual refactoring. The scheduling model is a multi-objective optimisation model. We propose a heuristic algorithm to solve the scheduling model. We also evaluate the proposed scheduling approach in non-trivial projects. Evaluation results suggest that refactoring activities with the scheduling approach lead to greater effect (quality improvement) than refactoring activities without explicit scheduling.", "paper_title": "Conflict-aware schedule of software refactorings", "paper_id": "WOS:000260775500005"}