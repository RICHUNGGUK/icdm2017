{"auto_keywords": [{"score": 0.04906009284763669, "phrase": "msp"}, {"score": 0.008677723555934996, "phrase": "imperative_features"}, {"score": 0.00541110489920364, "phrase": "type_system"}, {"score": 0.00481495049065317, "phrase": "java_multi-stage"}, {"score": 0.004794277113555669, "phrase": "programming_using_weak_separability"}, {"score": 0.004753194996637899, "phrase": "multi-stage_programming"}, {"score": 0.004632039024076267, "phrase": "disciplined_approach"}, {"score": 0.004592340708764929, "phrase": "run-time_code_generation"}, {"score": 0.004513957235071457, "phrase": "purely_functional_setting"}, {"score": 0.004106063237069123, "phrase": "performance_penalties"}, {"score": 0.0038326698261576023, "phrase": "mainstream_languages"}, {"score": 0.0037834649508375544, "phrase": "central_difficulty"}, {"score": 0.003751011827704279, "phrase": "scope_extrusion"}, {"score": 0.0037028514035425037, "phrase": "free_variables"}, {"score": 0.003471135453226184, "phrase": "new_approach"}, {"score": 0.0033391018638565715, "phrase": "\"sweet_spot"}, {"score": 0.0032820385246266773, "phrase": "design_space"}, {"score": 0.0030239842475439814, "phrase": "key_insight"}, {"score": 0.0027741761880779535, "phrase": "i.e._the_computational_effects"}, {"score": 0.00241658945942583, "phrase": "lightweight_java"}, {"score": 0.002274976129161307, "phrase": "mint"}, {"score": 0.0021049977753042253, "phrase": "java_programs"}], "paper_keywords": ["Languages", " Multi-staged languages", " Multi-stage programming", " Type systems", " Java"], "paper_abstract": "Multi-stage programming (MSP) provides a disciplined approach to run-time code generation. In the purely functional setting, it has been shown how MSP can be used to reduce the overhead of abstractions, allowing clean, maintainable code without paying performance penalties. Unfortunately, MSP is difficult to combine with imperative features, which are prevalent in mainstream languages. The central difficulty is scope extrusion, wherein free variables can inadvertently be moved outside the scopes of their binders. This paper proposes a new approach to combining MSP with imperative features that occupies a \"sweet spot\" in the design space in terms of how well useful MSP applications can be expressed and how easy it is for programmers to understand. The key insight is that escapes (or \"anti-quotes\") must be weakly separable from the rest of the code, i.e. the computational effects occurring inside an escape that are visible outside the escape are guaranteed to not contain code. To demonstrate the feasibility of this approach, we formalize a type system based on Lightweight Java which we prove sound, and we also provide an implementation, called Mint, to validate both the expressivity of the type system and the effect of staging on the performance of Java programs.", "paper_title": "Mint: Java Multi-stage Programming Using Weak Separability", "paper_id": "WOS:000279357500034"}