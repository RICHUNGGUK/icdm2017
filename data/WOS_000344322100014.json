{"auto_keywords": [{"score": 0.0496729815270419, "phrase": "authentication_protocols"}, {"score": 0.04887120582438803, "phrase": "compromised_principals"}, {"score": 0.00481495049065317, "phrase": "secure_implementation"}, {"score": 0.0046141941030386525, "phrase": "executable_code"}, {"score": 0.004516962628112147, "phrase": "high-level_model"}, {"score": 0.004459605573798577, "phrase": "security_protocols"}, {"score": 0.004201381218977942, "phrase": "security_type_systems"}, {"score": 0.0040779081518317415, "phrase": "type_systems"}, {"score": 0.0039077616208517026, "phrase": "well-typed_protocol"}, {"score": 0.003542786326740931, "phrase": "type-based_analysis"}, {"score": 0.0033232673019931206, "phrase": "well-typed_code"}, {"score": 0.003239304090565123, "phrase": "attacker's_capabilities"}, {"score": 0.003130633384437765, "phrase": "possible_type_annotations"}, {"score": 0.003104038398386081, "phrase": "adversary_models"}, {"score": 0.003038532168038562, "phrase": "profound_knowledge"}, {"score": 0.0029617414861784525, "phrase": "underlying_type_system"}, {"score": 0.0023926387830753033, "phrase": "dolev-yao_attackers"}, {"score": 0.0022442249871042026, "phrase": "effective_type_annotations"}, {"score": 0.0022251433045184454, "phrase": "so-called_attacker_interfaces"}, {"score": 0.0021688641066186817, "phrase": "general_adversary"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["authentication protocols", " compromised principals", " security type systems", " verified implementation"], "paper_abstract": "Analyzing the executable code, instead of the high-level model, of security protocols has received attention in recent years. To this end, a number of security type systems have already been proposed. These type systems are sound but incomplete. That is, a well-typed protocol is certainly secure, whereas no judgment can be made about the protocol whose type-annotated code is ill typed. In fact, the type-based analysis of a protocol would have no result unless we are able to find a well-typed code that represents both the protocol and the attacker's capabilities. As there is a very large space of possible type annotations and adversary models, this requires a profound knowledge of the rationale behind the underlying type system as well as the components of the protocol being analyzed. The problem is aggravated when the protocol runs in environments containing compromised principals. These issues have rendered the use of such type systems somewhat impractical. This paper is an attempt to resolve the problem for authentication protocols in environments containing Dolev-Yao attackers. We concretize our ideas in F5, a security type checker, and suggest effective type annotations and so-called attacker interfaces representing the capabilities of a general adversary. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Typing secure implementation of authentication protocols in environments with compromised principals", "paper_id": "WOS:000344322100014"}