{"auto_keywords": [{"score": 0.02987150694193987, "phrase": "initial_f-and-m-algebras"}, {"score": 0.02322730111336099, "phrase": "inductive_datatypes"}, {"score": 0.010095915962839371, "phrase": "initial_algebra_semantics"}, {"score": 0.004656557209439822, "phrase": "simple_categorical_principle"}, {"score": 0.004625506452304716, "phrase": "initial_algebras"}, {"score": 0.004533585346030341, "phrase": "inductive_datatype"}, {"score": 0.004458375125223899, "phrase": "initial_f-algebra"}, {"score": 0.004413846562278824, "phrase": "appropriate_functor_f."}, {"score": 0.004384407114103125, "phrase": "initial_algebra_principle"}, {"score": 0.004326113419290302, "phrase": "straightforward_derivation"}, {"score": 0.004297256607382827, "phrase": "definitional_principles"}, {"score": 0.004268591456106124, "phrase": "proof_principles"}, {"score": 0.004100555318595827, "phrase": "whole_methodology"}, {"score": 0.004073196909500369, "phrase": "structured_functional_programming"}, {"score": 0.0038478705530517296, "phrase": "pure_inductive_datatypes"}, {"score": 0.0037839928025418896, "phrase": "computational_effects"}, {"score": 0.0034223147241452547, "phrase": "lazily_constructed_infinite_values"}, {"score": 0.003365477675675987, "phrase": "pure_data"}, {"score": 0.0032985137109323827, "phrase": "non-terminating_computation"}, {"score": 0.003243726030199957, "phrase": "initial_algebra_techniques"}, {"score": 0.003222065787177288, "phrase": "effectful_datatypes"}, {"score": 0.00317917686846757, "phrase": "unsound_conclusions"}, {"score": 0.003013237619840709, "phrase": "pure_and_effectful_concerns"}, {"score": 0.002743355746391485, "phrase": "pure_part"}, {"score": 0.0026887369417065957, "phrase": "monad_m"}, {"score": 0.0026618355977665745, "phrase": "interleaved_effects"}, {"score": 0.0025568881277209725, "phrase": "initial_f-algebras"}, {"score": 0.0024892263318773704, "phrase": "standard_definitional_and_proof_principles"}, {"score": 0.0023990983195758524, "phrase": "filinski"}, {"score": 0.0023830645437709604, "phrase": "stovring"}, {"score": 0.0022661710658109916, "phrase": "arbitrary_categories"}, {"score": 0.0022510237833271, "phrase": "atkey"}, {"score": 0.002235977963629368, "phrase": "ghani"}, {"score": 0.0022210348012964083, "phrase": "jacobs"}, {"score": 0.002198799754952824, "phrase": "johann"}, {"score": 0.0021049977753042253, "phrase": "general_concept"}], "paper_keywords": [""], "paper_abstract": "The study of programming with and reasoning about inductive datatypes such as lists and trees has benefited from the simple categorical principle of initial algebras. In initial algebra semantics, each inductive datatype is represented by an initial f-algebra for an appropriate functor f. The initial algebra principle then supports the straightforward derivation of definitional principles and proof principles for these datatypes. This technique has been expanded to a whole methodology of structured functional programming, often called origami programming. In this article we show how to extend initial algebra semantics from pure inductive datatypes to inductive datatypes interleaved with computational effects. Inductive datatypes interleaved with effects arise naturally in many computational settings. For example, incrementally reading characters from a file generates a list of characters interleaved with input/output actions, and lazily constructed infinite values can be represented by pure data interleaved with the possibility of non-terminating computation. Straightforward application of initial algebra techniques to effectful datatypes leads either to unsound conclusions if we ignore the possibility of effects, or to unnecessarily complicated reasoning because the pure and effectful concerns must be considered simultaneously. We show how pure and effectful concerns can be separated using the abstraction of initial f-and-m-algebras, where the functor f describes the pure part of a datatype and the monad m describes the interleaved effects. Because initial f-and-m-algebras are the analogue for the effectful setting of initial f-algebras, they support the extension of the standard definitional and proof principles to the effectful setting. Initial f-and-m-algebras are originally due to Filinski and Stovring, who studied them in the category Cpo. They were subsequently generalised to arbitrary categories by Atkey, Ghani, Jacobs, and Johann in a FoSSaCS 2012 paper. In this article we aim to introduce the general concept of initial f-and-m-algebras to a general functional programming audience.", "paper_title": "Interleaving data and effects", "paper_id": "WOS:000368240300010"}