{"auto_keywords": [{"score": 0.04666794416407739, "phrase": "edit_distance"}, {"score": 0.00481495049065317, "phrase": "tree_edit_distance"}, {"score": 0.004744437370338926, "phrase": "string_edit_distance"}, {"score": 0.004093453936415085, "phrase": "input_tree"}, {"score": 0.003830312347175889, "phrase": "euler_string"}, {"score": 0.003584025547693836, "phrase": "input_trees"}, {"score": 0.0034034331737042363, "phrase": "small_subtrees"}, {"score": 0.0027878797103973313, "phrase": "transformed_strings"}, {"score": 0.00266693888510356, "phrase": "maximum_size"}, {"score": 0.002551231163230566, "phrase": "unit_cost"}, {"score": 0.0021363670305843403, "phrase": "tree_mapping"}, {"score": 0.0021049977753042253, "phrase": "string_alignment"}], "paper_keywords": ["Tree edit distance", " String matching", " Approximation algorithms", " Embedding", " Euler string"], "paper_abstract": "We present an algorithm to approximate edit distance between two ordered and rooted trees of bounded degree. In this algorithm, each input tree is transformed into a string by computing the Euler string, where labels of some edges in the input trees are modified so that structures of small subtrees are reflected to the labels. We show that the edit distance between trees is at least 1/6 and at most O(n(3/4)) of the edit distance between the transformed strings, where n is the maximum size of two input trees and we assume unit cost edit operations for both trees and strings. The algorithm works in O(n(2)) time since computation of edit distance and reconstruction of tree mapping from string alignment takes O(n(2)) time though transformation itself can be done in O(n) time.", "paper_title": "Approximating Tree Edit Distance through String Edit Distance", "paper_id": "WOS:000274140400007"}