{"auto_keywords": [{"score": 0.03690949231872686, "phrase": "dlcbf"}, {"score": 0.006610283970402507, "phrase": "smp_system"}, {"score": 0.00481495049065317, "phrase": "multicore_systems"}, {"score": 0.004742730438544081, "phrase": "snoopy-based_protocol"}, {"score": 0.004671588539217021, "phrase": "widely_used_cache_coherence_mechanism"}, {"score": 0.004532486091157755, "phrase": "smp"}, {"score": 0.0043753813457279404, "phrase": "broadcast-based_protocol"}, {"score": 0.004309725894724034, "phrase": "data_sharing_information"}, {"score": 0.004036369952624852, "phrase": "novel_architecture"}, {"score": 0.003995876175614403, "phrase": "double-layer_counting_bloom_filter"}, {"score": 0.0038573081851680656, "phrase": "unnecessary_data_lookups"}, {"score": 0.003799397093447221, "phrase": "local_cache"}, {"score": 0.00376127170364341, "phrase": "redundant_data_transactions"}, {"score": 0.003704797078215222, "phrase": "shared_interconnection"}, {"score": 0.003558294449586273, "phrase": "extra_filtering_layer"}, {"score": 0.0034348484776384643, "phrase": "data_locality"}, {"score": 0.0033492947290751996, "phrase": "two-layer_hierarchy"}, {"score": 0.0032989853590079153, "phrase": "storage_size"}, {"score": 0.003058515297281172, "phrase": "classic_bloom_filter"}, {"score": 0.0028355237433457313, "phrase": "segmented_shared_bus"}, {"score": 0.002709589081384597, "phrase": "previous_work"}, {"score": 0.0024993218789131437, "phrase": "key_design_parameters"}, {"score": 0.0023405257495466352, "phrase": "multilayer_design"}, {"score": 0.0022478501955483024, "phrase": "layer_filters"}, {"score": 0.002214048743052355, "phrase": "filtering_rates"}, {"score": 0.002137137933768807, "phrase": "extra_filter_layer"}, {"score": 0.0021049977753042253, "phrase": "slight_benefit"}], "paper_keywords": ["Cache memory", " multicore processing", " simulation", " system analysis and design"], "paper_abstract": "The snoopy-based protocol is a widely used cache coherence mechanism for a symmetric multiprocessor (SMP) system. However, this broadcast-based protocol blindly disseminates data sharing information across the system, and introduces many unnecessary data operations. This paper proposes a novel architecture of double-layer counting Bloom filter (DLCBF) to reduce the unnecessary data lookups on the local cache and redundant data transactions on the shared interconnection of an SMP system. By adding an extra filtering layer, the DLCBF effectively exploits the data locality of applications. The two-layer hierarchy reduces the storage size of DLCBF by 18.75%, and achieves 81.99% and 31.36% better filtering rates when compared with a classic Bloom filter (BF) and original counting BF, respectively. When applied on the segmented shared bus of an SMP system, the DLCBF outperforms the previous work by 58% for In-filters and 1.86x for Out-filters. This paper also comprehensively explores the key design parameters of DLCBF, including the sizes of top-layer, bottom-layer, and multilayer design. The results show that enlarging the layer filters enhance the filtering rates of DLCBF, while adding an extra filter layer only provides slight benefit.", "paper_title": "A High-Performance Double-Layer Counting Bloom Filter for Multicore Systems", "paper_id": "WOS:000364209000011"}