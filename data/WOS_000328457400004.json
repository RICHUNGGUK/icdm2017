{"auto_keywords": [{"score": 0.02935818169070154, "phrase": "jit_compiled_code"}, {"score": 0.00481495049065317, "phrase": "new_code-reuse_attack"}, {"score": 0.004338898899247236, "phrase": "predictable_generated_jit_compiled_code"}, {"score": 0.003986844722309844, "phrase": "data_execution_prevention"}, {"score": 0.003935267970727093, "phrase": "address_space_layout_randomisation"}, {"score": 0.0037844916274672544, "phrase": "modern_operation_system"}, {"score": 0.003639471039860495, "phrase": "insurmountable_barrier"}, {"score": 0.0034322572683276654, "phrase": "traditional_code_injection_attacks"}, {"score": 0.003236802914194731, "phrase": "jitsafe"}, {"score": 0.0030524448705134283, "phrase": "existing_jit-based_virtual_machines"}, {"score": 0.002644678812707061, "phrase": "authors_framework"}, {"score": 0.0025934566395017424, "phrase": "time_window"}, {"score": 0.0024939618994290016, "phrase": "executable_pages"}, {"score": 0.0024297565926197505, "phrase": "immediate_value"}, {"score": 0.0021049977753042253, "phrase": "low_performance_overhead"}], "paper_keywords": ["invasive software", " operating systems (computers)", " JITSafe", " just-in-time spraying attacks", " code-reuse attack", " data execution prevention", " address space layout randomisation", " operation system", " code injection attacks", " JIT-based VMs", " JIT compiled code time window", " performance overhead"], "paper_abstract": "A new code-reuse attack, named Just-in-time (JIT) spraying attack, leverages the predictable generated JIT compiled code to launch an attack. It can circumvent the defenses such as data execution prevention and address space layout randomisation built-in in the modern operation system, which were thought the insurmountable barrier so that the attackers cannot construct the traditional code injection attacks. In this study, the authors describe JITSafe, a framework that can be applied to existing JIT-based virtual machines (VMs), in the purpose of preventing the attacker from reusing the JIT compiled code to construct the attack. The authors framework narrows the time window of the JIT compiled code in the executable pages, eliminates the immediate value and obfuscates the JIT compiled code. They demonstrate the effectiveness of JITSafe that it can successfully prevent existing JIT spraying attacks with low performance overhead.", "paper_title": "JITSafe: a framework against Just-in-time spraying attacks", "paper_id": "WOS:000328457400004"}