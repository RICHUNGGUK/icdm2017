{"auto_keywords": [{"score": 0.03778081409023868, "phrase": "mapp"}, {"score": 0.007740488462981612, "phrase": "multi-agent_path_planning"}, {"score": 0.006916888636263104, "phrase": "mobile_units"}, {"score": 0.004774393182616134, "phrase": "challenging_problem"}, {"score": 0.004747544039399003, "phrase": "numerous_real-life_applications"}, {"score": 0.004694295735569168, "phrase": "centralized_search"}, {"score": 0.0046025376320049955, "phrase": "combined_state_space"}, {"score": 0.004387061665897055, "phrase": "state_space_size"}, {"score": 0.004277083020756253, "phrase": "traditional_decentralized_approaches"}, {"score": 0.004229106944675097, "phrase": "far"}, {"score": 0.004205293552420966, "phrase": "whca"}, {"score": 0.004065294241465876, "phrase": "problem_decomposition"}, {"score": 0.003896805547540686, "phrase": "running_time"}, {"score": 0.003863951933933301, "phrase": "solution_quality"}, {"score": 0.0037458319094677353, "phrase": "reasonable_time"}, {"score": 0.0034513868338791193, "phrase": "basic_version"}, {"score": 0.0033934090791564856, "phrase": "low-polynomial_worst-case_upper_bounds"}, {"score": 0.0033269940500921832, "phrase": "memory_requirements"}, {"score": 0.0032252355445755608, "phrase": "algorithmic_versions"}, {"score": 0.0031800130459391195, "phrase": "general_case"}, {"score": 0.003144290575504966, "phrase": "formal_guarantees"}, {"score": 0.0030223831060276728, "phrase": "algorithm's_completeness"}, {"score": 0.0029884260527423315, "phrase": "clearly_defined_subclasses"}, {"score": 0.002921648860224299, "phrase": "realistic_game_grid_maps"}, {"score": 0.0026690928516336153, "phrase": "first_stage"}, {"score": 0.0026540514432710277, "phrase": "plan_computation"}, {"score": 0.0026242217741112256, "phrase": "mapp's_computation"}, {"score": 0.002196183733078717, "phrase": "mapp's_solutions"}, {"score": 0.0021531499016013704, "phrase": "far's_solutions"}], "paper_keywords": [""], "paper_abstract": "Multi-agent path planning is a challenging problem with numerous real-life applications. Running a centralized search such as A* in the combined state space of all units is complete and cost-optimal, but scales poorly, as the state space size is exponential in the number of mobile units. Traditional decentralized approaches, such as FAR and WHCA*, are faster and more scalable, being based on problem decomposition. However, such methods are incomplete and provide no guarantees with respect to the running time or the solution quality. They are not necessarily able to tell in a reasonable time whether they would succeed in finding a solution to a given instance. We introduce MAPP, a tractable algorithm for multi-agent path planning on undirected graphs. We present a basic version and several extensions. They have low-polynomial worst-case upper bounds for the running time, the memory requirements, and the length of solutions. Even though all algorithmic versions are incomplete in the general case, each provides formal guarantees on problems it can solve. For each version, we discuss the algorithm's completeness with respect to clearly defined subclasses of instances. Experiments were run on realistic game grid maps. MAPP solved 99.86% of all mobile units, which is 18-22% better than the percentage of FAR and WHCA*. MAPP marked 98.82% of all units as provably solvable during the first stage of plan computation. Parts of MAPP's computation can be re-used across instances on the same map. Speed-wise, MAPP is competitive or significantly faster than WHCA*, depending on whether MAPP performs all computations from scratch. When data that MAPP can re-use are preprocessed offline and readily available, MAPP is slower than the very fast FAR algorithm by a factor of 2.18 on average. MAPP's solutions are on average 20% longer than FAR's solutions and 7-31% longer than WHCA*'s solutions.", "paper_title": "MAPP: a Scalable Multi-Agent Path Planning Algorithm with Tractability and Completeness Guarantees", "paper_id": "WOS:000295926700002"}