{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "frequent_itemsets"}, {"score": 0.007589360923746045, "phrase": "ttf"}, {"score": 0.0047893552527040195, "phrase": "interim-support_trees"}, {"score": 0.004751216062917875, "phrase": "association_rules"}, {"score": 0.00472595801454134, "phrase": "relational_databases"}, {"score": 0.004688321299229397, "phrase": "significant_computational_task"}, {"score": 0.004601658429231648, "phrase": "fundamental_ingredient"}, {"score": 0.004362738436361684, "phrase": "threshold_value"}, {"score": 0.00421410521089045, "phrase": "frequent_sets"}, {"score": 0.004180527681076442, "phrase": "tree_structure"}, {"score": 0.004147216579100177, "phrase": "partial_supports"}, {"score": 0.0038590653130931222, "phrase": "novel_tree_pruning_technique"}, {"score": 0.0035244144308073174, "phrase": "space-efficient_manner"}, {"score": 0.0034963129868796033, "phrase": "second_algorithm"}, {"score": 0.003314591878914152, "phrase": "second_tree_structure"}, {"score": 0.0032793933580835574, "phrase": "total_support_tree"}, {"score": 0.003210110095236981, "phrase": "main_innovation"}, {"score": 0.003159106878239524, "phrase": "multiple_pointers"}, {"score": 0.003108911488613549, "phrase": "rapid_access"}, {"score": 0.002955145580455969, "phrase": "experimental_comparison"}, {"score": 0.002900426826591769, "phrase": "considerable_speedup"}, {"score": 0.0028543298631502107, "phrase": "earlier_approaches"}, {"score": 0.002794001681064862, "phrase": "data_mining_and_knowledge_discovery"}, {"score": 0.002742259346997265, "phrase": "pkdd"}, {"score": 0.0027131218290678367, "phrase": "freiburg"}, {"score": 0.002662871928330334, "phrase": "artificial_intelligence"}, {"score": 0.002613587031312404, "phrase": "springer"}, {"score": 0.0025996444322918043, "phrase": "berlin"}, {"score": 0.0025857883348296066, "phrase": "heidelberg"}, {"score": 0.0025582986414902182, "phrase": "journal_of_knowledge-based"}, {"score": 0.0024382183349471375, "phrase": "ptf"}, {"score": 0.002386649864137357, "phrase": "large_number"}, {"score": 0.0021620042653528846, "phrase": "file_database"}, {"score": 0.0021447424347133663, "phrase": "high_variance"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["association rules", " frequent itemsets", " data mining", " set-enumeration trees"], "paper_abstract": "Mining association rules in relational databases is a significant computational task with lots of applications. A fundamental ingredient of this task is the discovery of sets of attributes (itemsets) whose frequency in the data exceeds some threshold value. In this paper we describe two algorithms for completing the calculation of frequent sets using a tree structure for storing partial supports, called interim-support (IS) tree. The first of our algorithms (T-Tree-First (TTF)) uses a novel tree pruning technique, based on the notion of (fixed-prefix) potential inclusion, which is specially designed for trees that are implemented using only two pointers per node. This allows to implement the IS tree in a space-efficient manner. The second algorithm (P-Tree-First (PTF)) explores the idea of storing the frequent itemsets in a second tree structure, called the total support tree (T-tree); the main innovation lies in the use of multiple pointers per node, which provides rapid access to the nodes of the T-tree and makes it possible to design a new, usually faster, method for updating them. Experimental comparison shows that these techniques result in considerable speedup for both algorithms compared with earlier approaches that also use IS trees (Principles of Data Mining and Knowledge Discovery, Proceedings of the 5th European Conference, PKDD, 2001, Freiburg, September 2001 (Lecture Notes in Artificial Intelligence, vol. 2168). Springer: Berlin, Heidelberg, 54-66, Journal of Knowledge-Based Syst. 2000, 13:141-149). Further comparison between the two new algorithms, shows that the PTF is generally faster on instances with a large number of frequent itemsets, provided that they are relatively short, whereas TTF is more appropriate whenever there exist few or quite long frequent itemsets, in addition. TTF behaves well on instances in which the densities of the items of file database have a high variance. Copyright (C) 2008 John Wiley & Sons. Ltd.", "paper_title": "Improved methods for extracting frequent itemsets from interim-support trees", "paper_id": "WOS:000264940900001"}