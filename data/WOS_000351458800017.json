{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pubsub"}, {"score": 0.027721312119410917, "phrase": "siena"}, {"score": 0.0070117227925568055, "phrase": "event_processing"}, {"score": 0.004014452814186653, "phrase": "run_time_performance"}, {"score": 0.0033743949483348626, "phrase": "fastest_version"}, {"score": 0.0030808211830129304, "phrase": "speedup_range"}, {"score": 0.002931569771634119, "phrase": "siena's_memory_requirements"}, {"score": 0.0028127163745564777, "phrase": "pubsub."}, {"score": 0.0026986685585382347, "phrase": "pubsub's_data_structures"}, {"score": 0.0025892330566358503, "phrase": "be-tree"}, {"score": 0.0025361866386341796, "phrase": "data_structure_initialization"}, {"score": 0.002473959963690124, "phrase": "comparable_amount"}, {"score": 0.0024232694434408093, "phrase": "data_sets"}, {"score": 0.0021049977753042253, "phrase": "matching_algorithms"}], "paper_keywords": ["Content based publish/subscribe", " Boolean expressions", " efficient subscription matching"], "paper_abstract": "PUBSUB is a versatile, efficient, and scalable content-based publish/subscribe system. This paper describes the architecture of PUBSUB together with some of its current capabilities. A version of PUBSUB optimized for event processing was benchmarked against the publish/subscribe systems BE-Tree and Siena, which also are optimized for event processing. Although the run time performance of both BE-Tree and PUBSUB is orders of magnitude better than that of Siena, BE-Tree is able to handle only a restricted class of predicates while PUBSUB can handle most predicate types handled by Siena. On our tests, the speedup of the fastest version of PUBSUB relative to Siena ranged from a low of 18 to a high of 1,703 and averaged 185. The speedup range relative to BE-Tree was up to 9.81 and averaged 2.37. Siena's memory requirements are about a fourth of those of BE-Tree and PUBSUB. The memory required by the most memory efficient of PUBSUB's data structures was between 4 and 16 percent less that required by BE-Tree. With respect to data structure initialization, the three systems took a comparable amount of time on some data sets while on some PUBSUB could be initialized in 1/7th time required to initialize Siena and 1/14th that to initialize BE-Tree. PUBSUB achieves its high performance from the use of very efficient data structures and event matching algorithms.", "paper_title": "PUBSUB: An Efficient Publish/Subscribe System", "paper_id": "WOS:000351458800017"}