{"auto_keywords": [{"score": 0.03404205465110336, "phrase": "quotient_cube"}, {"score": 0.01178957820552458, "phrase": "median"}, {"score": 0.00481495049065317, "phrase": "distributive_and_non-distributive_aggregate_functions"}, {"score": 0.004640929126263433, "phrase": "important_concept"}, {"score": 0.004584332741997531, "phrase": "olap"}, {"score": 0.004546970518808189, "phrase": "online_analytical_processing"}, {"score": 0.004258843584164121, "phrase": "complete_data_cube"}, {"score": 0.004189698902282913, "phrase": "huge_storage_requirement"}, {"score": 0.0041555469216463855, "phrase": "recently_proposed_quotient_cube"}, {"score": 0.004054745478848129, "phrase": "partitioning_method"}, {"score": 0.003956379470617348, "phrase": "equivalence_partitions"}, {"score": 0.003828912548622257, "phrase": "distributive_aggregate_functions"}, {"score": 0.003785280729334011, "phrase": "sum"}, {"score": 0.0036304470230058413, "phrase": "holistic_aggregate_functions"}, {"score": 0.003414153126809511, "phrase": "equivalence_class"}, {"score": 0.003277140908834426, "phrase": "data_sources"}, {"score": 0.0030944828434567966, "phrase": "cube_cells"}, {"score": 0.002933973181012572, "phrase": "incremental_algorithms"}, {"score": 0.002827740707723551, "phrase": "sum_and_median_aggregate_functions"}, {"score": 0.0027817658627604653, "phrase": "aggregate_function_sum"}, {"score": 0.0026810296502682916, "phrase": "galois_lattice"}, {"score": 0.0026482660253173075, "phrase": "cpu-efficient_algorithms"}, {"score": 0.0025628355581338563, "phrase": "aggregate_function"}, {"score": 0.0024903420152789135, "phrase": "pseudo_class"}, {"score": 0.0023418133729330303, "phrase": "novel_sliding_window_technique"}, {"score": 0.0023131855385489764, "phrase": "efficient_algorithm"}, {"score": 0.002256973121326987, "phrase": "median_quotient_cube"}, {"score": 0.002220257443705344, "phrase": "reasonably_small_storage_space"}, {"score": 0.002157433262687853, "phrase": "proposed_algorithms"}, {"score": 0.0021049977753042253, "phrase": "large_databases"}], "paper_keywords": ["quotient cube", " incremental maintenance", " OLAP"], "paper_abstract": "Data cube pre-computation is an important concept for supporting OLAP (Online Analytical Processing) and has been studied extensively. It is often not feasible to compute a complete data cube due to the huge storage requirement. Recently proposed quotient cube addressed this issue through a partitioning method that groups cube cells into equivalence partitions. Such an approach not only is useful for distributive aggregate functions such as SUM but also can be applied to the maintenance of holistic aggregate functions like MEDIAN which will require the storage of a set of tuples for each equivalence class. Unfortunately, as changes are made to the data sources, maintaining the quotient cube is non-trivial since the partitioning of the cube cells must also be updated. In this paper, the authors design incremental algorithms to update a quotient cube efficiently for both SUM and MEDIAN aggregate functions. For the aggregate function SUM, concepts are borrowed from the principle of Galois Lattice to develop CPU-efficient algorithms to update a quotient cube. For the aggregate function MEDIAN, the concept of a pseudo class is introduced to further reduce the size of the quotient cube. Coupled with a novel sliding window technique, an efficient algorithm is developed for maintaining a MEDIAN quotient cube that takes up reasonably small storage space. Performance study shows that the proposed algorithms are efficient and scalable over large databases.", "paper_title": "Efficient incremental maintenance for distributive and non-distributive aggregate functions", "paper_id": "WOS:000235342400006"}