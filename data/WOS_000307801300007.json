{"auto_keywords": [{"score": 0.038087442194002515, "phrase": "smpu"}, {"score": 0.00481495049065317, "phrase": "regular_expression_string_matching"}, {"score": 0.004733347359490221, "phrase": "expressive_power"}, {"score": 0.0046797114400479135, "phrase": "regular_expressions"}, {"score": 0.004522406417999492, "phrase": "network_intrusion_detection_systems"}, {"score": 0.0043703658695579085, "phrase": "spam_filtering_applications"}, {"score": 0.004247560712327667, "phrase": "cpu_based_systems"}, {"score": 0.004199406257273994, "phrase": "pattern_matching"}, {"score": 0.003725470458263889, "phrase": "regular_expression_string"}, {"score": 0.0035390378585554547, "phrase": "special_purpose_processor"}, {"score": 0.0034789831290103967, "phrase": "parallel_and_pipelined_architecture"}, {"score": 0.0033619033669956317, "phrase": "regular_expression_semantics"}, {"score": 0.003193606324727067, "phrase": "fast_branches"}, {"score": 0.0030164423559955896, "phrase": "clock_cycle"}, {"score": 0.002881793492919646, "phrase": "art_solutions"}, {"score": 0.0026452734009203764, "phrase": "regular_expression"}, {"score": 0.002570817338292482, "phrase": "verilog_description"}, {"score": 0.0024281181691350085, "phrase": "traditional_cpu_implementations"}, {"score": 0.0021784009230363627, "phrase": "regular_expressions_increases"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Regular expression", " String matching", " Special purpose processor", " Fast branch"], "paper_abstract": "The expressive power of regular expressions has been often adopted in network intrusion detection systems, virus scanners, and spam filtering applications. However in the CPU based systems, pattern matching is one of the most computation intensive parts. In this paper, we present the design, implementation and evaluation of a regular expression string matching processing unit (SMPU). This special purpose processor is a parallel and pipelined architecture which can deal with the regular expression semantics. Two hardware stacks are implemented in SMPU to support fast branches when the non-matching occurs. Our implementation processes four characters per clock cycle (maximum performance of state of the art solutions) and occupies only O(n) memory (where n is the length of the regular expression) via synthesizing the verilog description and analyzing area/time constraints, SMPU can achieve 200-400 times speedup over traditional CPU implementations and up to 7.9 Gbps in processing throughput. Besides it outperforms the counterparts greatly as the complexity of regular expressions increases. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "A pipelined processor architecture for regular expression string matching", "paper_id": "WOS:000307801300007"}