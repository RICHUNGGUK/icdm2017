{"auto_keywords": [{"score": 0.04010385021116404, "phrase": "skyline_operator"}, {"score": 0.03676344510664557, "phrase": "data_parallelism"}, {"score": 0.00481495049065317, "phrase": "parallelizing_data_processing"}, {"score": 0.004753433756140211, "phrase": "shifter_lists"}, {"score": 0.004500596283281564, "phrase": "heat_dissipation"}, {"score": 0.004443077867798955, "phrase": "modern_hardware"}, {"score": 0.004099807729119934, "phrase": "leverage_parallelism"}, {"score": 0.004060432002446197, "phrase": "wide_range"}, {"score": 0.0040343909885467485, "phrase": "hardware_platforms"}, {"score": 0.0036513878928387047, "phrase": "pareto-optimal_points"}, {"score": 0.003616303279958699, "phrase": "multidimensional_dataset"}, {"score": 0.0035931003474699583, "phrase": "existing_approaches"}, {"score": 0.003379939505148494, "phrase": "high_overhead"}, {"score": 0.003347454359929038, "phrase": "intermediate_results"}, {"score": 0.0032728607237892038, "phrase": "global_view"}, {"score": 0.0031896375499832694, "phrase": "input_data"}, {"score": 0.0030294669203999565, "phrase": "field-programmable_gate_array"}, {"score": 0.0030101119199759554, "phrase": "fpga"}, {"score": 0.002942921364801519, "phrase": "available_hardware_parallelism"}, {"score": 0.0028680638354014183, "phrase": "skyline_computation"}, {"score": 0.0027861163438498374, "phrase": "processing_elements"}, {"score": 0.0027065039341671103, "phrase": "rather_small_fpga"}, {"score": 0.0026207039474589, "phrase": "state-of-the-art_data_parallel_implementation"}, {"score": 0.002521317643120762, "phrase": "proposed_approach"}, {"score": 0.0024413739512778136, "phrase": "wider_range"}, {"score": 0.00242569125010088, "phrase": "data_processing_problems"}, {"score": 0.002356353539621074, "phrase": "highly_parallel_data_structure"}, {"score": 0.0023336832083729973, "phrase": "shifter_list"}, {"score": 0.0022669833853866225, "phrase": "fpga."}, {"score": 0.002252404639706065, "phrase": "resulting_template"}, {"score": 0.0021809687586808522, "phrase": "computationally_intensive_operators"}, {"score": 0.0021599821402426013, "phrase": "frequent_items"}, {"score": 0.0021050476181740945, "phrase": "k-means"}], "paper_keywords": ["Algorithms", " Design", " Performance", " FPGA", " database", " shifter list", " pipeline", " parallelism", " skyline query", " frequent items", " n-closest pairs", " K-means"], "paper_abstract": "Parallelism is currently seen as a mechanism to minimize the impact of the power and heat dissipation problems encountered in modern hardware. Data parallelism-based on partitioning the data-and pipeline parallelism-based on partitioning the computation-are the two main approaches to leverage parallelism on a wide range of hardware platforms. Unfortunately, not all data processing problems are susceptible to either of those strategies. An example is the skyline operator [Borzsonyi et al. 2001], which computes the set of Pareto-optimal points within a multidimensional dataset. Existing approaches to parallelize the skyline operator are based on data parallelism. As a result, they suffer from a high overhead when merging intermediate results because of the lack of a global view of the problem inherent to partitioning the input data. In this article, we show how to combine pipeline with data parallelism on a Field-Programmable Gate Array (FPGA) for a more efficient utilization of the available hardware parallelism. As we show in our experiments, skyline computation using our proposed technique scales linearly with the number of processing elements, and the performance we achieve on a rather small FPGA is comparable to that of a 64-core high-end server running a state-of-the-art data parallel implementation of skyline [Park et al. 2009]. The proposed approach to parallelize the skyline operator can be generalized to a wider range of data processing problems. We demonstrate this through a novel, highly parallel data structure, a shifter list, that can be efficiently implemented on an FPGA. The resulting template is easy to parametrize to implement a variety of computationally intensive operators such as frequent items, n-closest pairs, or K-means.", "paper_title": "Parallelizing Data Processing on FPGAs with Shifter Lists", "paper_id": "WOS:000354051700002"}