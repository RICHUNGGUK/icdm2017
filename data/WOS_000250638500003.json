{"auto_keywords": [{"score": 0.048912784012203246, "phrase": "java"}, {"score": 0.046653177222754416, "phrase": "calling_relationships"}, {"score": 0.03323496375926183, "phrase": "library_callbacks"}, {"score": 0.02775469316408694, "phrase": "new_algorithm"}, {"score": 0.00481495049065317, "phrase": "accurate_application_call_graph"}, {"score": 0.0047559432344272, "phrase": "library_call_abstraction"}, {"score": 0.004640079189342692, "phrase": "call_graphs"}, {"score": 0.004101579688745222, "phrase": "library_methods"}, {"score": 0.003952513974962462, "phrase": "program_understanding"}, {"score": 0.0033047037762521984, "phrase": "new_data_reachability_algorithm"}, {"score": 0.0029027394930867902, "phrase": "whole-program_call_graph"}, {"score": 0.0026622351303038885, "phrase": "empirical_studies"}, {"score": 0.002565345470805401, "phrase": "significant_reduction"}, {"score": 0.002487296495786493, "phrase": "spurious_callback_edges"}, {"score": 0.0023382335380460304, "phrase": "library_abstraction"}, {"score": 0.002225426912273257, "phrase": "amortized_slicing"}, {"score": 0.002198084195030656, "phrase": "dataflow_testing"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["call graph", " library callback", " Java analysis"], "paper_abstract": "Call graphs are widely used to represent calling relationships among methods. However, there is not much interest in calling relationships among library methods in many software engineering applications, such as program understanding and testing, especially when the library is very big and the calling relationships are not trivial. This paper explores approaches for generating more accurate application call graphs for Java. A new data reachability algorithm is proposed and fine tuned to resolve library callbacks accurately. Compared with an algorithm that resolves library callbacks by traversing the whole-program call graph, the fine-tuned data reachability algorithm results in fewer spurious callback edges. In empirical studies, the new algorithm shows a significant reduction in the number of spurious callback edges. On the basis of the new algorithm, a library abstraction can be calculated automatically and applied in amortized slicing and dataflow testing. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "Automatic construction of accurate application call graph with library call abstraction for Java", "paper_id": "WOS:000250638500003"}