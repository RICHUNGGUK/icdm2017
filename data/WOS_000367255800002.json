{"auto_keywords": [{"score": 0.04427043267830492, "phrase": "scala"}, {"score": 0.00481495049065317, "phrase": "c_compiler"}, {"score": 0.004466519142879166, "phrase": "sql_query_processor"}, {"score": 0.004395185177346749, "phrase": "existing_database_systems"}, {"score": 0.004055176557424983, "phrase": "high-level_functional_programming"}, {"score": 0.003926626018798576, "phrase": "systems-level_programming"}, {"score": 0.003802135020791801, "phrase": "performance_matters"}, {"score": 0.003741371936431574, "phrase": "key_enabler"}, {"score": 0.003603327452846714, "phrase": "generative_programming"}, {"score": 0.0034890505116128606, "phrase": "query_engine"}, {"score": 0.0033965836912510385, "phrase": "relational_algebra_operations"}, {"score": 0.002969628818856786, "phrase": "query_compiler"}, {"score": 0.0027841357057119317, "phrase": "old_and_widely_known_result"}, {"score": 0.002695768552609587, "phrase": "futamura_projections"}, {"score": 0.0023440589015485077, "phrase": "lms_programming_patterns"}, {"score": 0.002306543826130521, "phrase": "mixed-stage_data_structures"}, {"score": 0.002233301265743633, "phrase": "static_schema"}, {"score": 0.002209406458446019, "phrase": "dynamic_field_components"}, {"score": 0.0021392418081444798, "phrase": "low-level_c_code"}, {"score": 0.0021049977753042253, "phrase": "specialized_data_structures"}], "paper_keywords": ["SQL", " Query Compilation", " Staging", " Generative Programming", " Futamura Projections"], "paper_abstract": "We present the design and implementation of a SQL query processor that outperforms existing database systems and is written in just about 500 lines of Scala code - a convincing case study that high-level functional programming can handily beat C for systems-level programming where the last drop of performance matters. The key enabler is a shift in perspective towards generative programming. The core of the query engine is an interpreter for relational algebra operations, written in Scala. Using the open-source LMS Framework (Lightweight Modular Staging), we turn this interpreter into a query compiler with very low effort. To do so, we capitalize on an old and widely known result from partial evaluation known as Futamura projections, which state that a program that can specialize an interpreter to any given input program is equivalent to a compiler. In this pearl, we discuss LMS programming patterns such as mixed-stage data structures (e.g. data records with static schema and dynamic field components) and techniques to generate low-level C code, including specialized data structures and data loading primitives.", "paper_title": "Functional Pearl: A SQL to C Compiler in 500 Lines of Code", "paper_id": "WOS:000367255800002"}