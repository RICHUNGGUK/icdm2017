{"auto_keywords": [{"score": 0.04469045542220276, "phrase": "fine_solver"}, {"score": 0.04132712815039597, "phrase": "coarse_solver"}, {"score": 0.004814961217670101, "phrase": "parareal"}, {"score": 0.004769958800452922, "phrase": "iterative_algorithm"}, {"score": 0.004666598697538815, "phrase": "temporal_decomposition"}, {"score": 0.004622986791421418, "phrase": "time-dependent_system"}, {"score": 0.004565468027464384, "phrase": "partial_differential_equations"}, {"score": 0.004452558960552103, "phrase": "shorter_wall-clock_time"}, {"score": 0.0043560464825349275, "phrase": "increased_compute_cycles"}, {"score": 0.004195418010131832, "phrase": "acceptable_accuracy"}, {"score": 0.004156191156783823, "phrase": "approximate_coarse_solver"}, {"score": 0.004117329555194574, "phrase": "critical_task"}, {"score": 0.004078829832634839, "phrase": "successful_implementation"}, {"score": 0.0038552459083505985, "phrase": "small_number"}, {"score": 0.003759835076089236, "phrase": "time_slices"}, {"score": 0.0037246656582642272, "phrase": "full_time_interval"}, {"score": 0.003531474887552889, "phrase": "coarse_solvers"}, {"score": 0.00347657813672945, "phrase": "sufficiently_rapid_convergence"}, {"score": 0.0034440491386068545, "phrase": "slow_coarse_solvers"}, {"score": 0.0033905067962602515, "phrase": "significant_gains"}, {"score": 0.0031845067058084583, "phrase": "conflicting_demands"}, {"score": 0.002953711377604328, "phrase": "previous_iteration"}, {"score": 0.0028715299874549245, "phrase": "needed_data"}, {"score": 0.0028003960243011975, "phrase": "event-based_approach"}, {"score": 0.0027741761880779535, "phrase": "speed_requirements"}, {"score": 0.0026704152627407495, "phrase": "k"}, {"score": 0.0025892330566358503, "phrase": "converged_solution"}, {"score": 0.0025014259919355453, "phrase": "efficient_parareal_implementation"}, {"score": 0.0024241817763927163, "phrase": "substantial_coarse_solver_development"}, {"score": 0.002305510336172047, "phrase": "data_dependencies"}, {"score": 0.002291089893848235, "phrase": "satisfied_and_computational_resources"}, {"score": 0.0022413233627905696, "phrase": "improved_computational_efficiency"}, {"score": 0.0022273034991008326, "phrase": "previous_approaches"}, {"score": 0.002158505888557746, "phrase": "particular_processor"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parareal", " Parallelization", " Framework", " Simulation"], "paper_abstract": "Parareal is an iterative algorithm that, in effect, achieves temporal decomposition for a time-dependent system of differential or partial differential equations. A solution is obtained in a shorter wall-clock time, but at the expense of increased compute cycles. The algorithm combines a fine solver that solves the system to acceptable accuracy with an approximate coarse solver. The critical task for the successful implementation of parareal on any system is the development of a coarse solver that leads to convergence in a small number of iterations compared to the number of time slices in the full time interval, and is, at the same time, much faster than the fine solver. Very fast coarse solvers may not lead to sufficiently rapid convergence, and slow coarse solvers may not lead to significant gains even if the number of iterations to convergence is satisfactory. We find that the difficulty of meeting these conflicting demands can be substantially eased by using a data-driven, event-based implementation of parareal. As a result, tasks for one iteration do not wait for the previous iteration to complete, but are started when the needed data are available. For given convergence properties, the event-based approach relaxes the speed requirements on the coarse solver by a factor of similar to K, where K is the number of iterations required for a converged solution. This may, for many problems, lead to an efficient parareal implementation that would otherwise not be possible or would require substantial coarse solver development. In addition, the framework used for this implementation executes a task when the data dependencies are satisfied and computational resources are available. This leads to improved computational efficiency over previous approaches that pipeline or schedule groups of tasks to a particular processor or group of processors. Published by Elsevier Inc.", "paper_title": "Event-based parareal: A data-flow based implementation of parareal", "paper_id": "WOS:000305915400020"}