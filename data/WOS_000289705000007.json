{"auto_keywords": [{"score": 0.03970543330650032, "phrase": "software_architecture"}, {"score": 0.03473720012957105, "phrase": "ccc_metrics"}, {"score": 0.02936532160355125, "phrase": "mozilla_firefox"}, {"score": 0.00481495049065317, "phrase": "cohesion_metrics"}, {"score": 0.004787309936374976, "phrase": "early_indicators"}, {"score": 0.0047325016751114165, "phrase": "software_security_failures"}, {"score": 0.004416523252575371, "phrase": "security_failure"}, {"score": 0.0042542311446793725, "phrase": "security_failures"}, {"score": 0.004217630522974106, "phrase": "operational_stage"}, {"score": 0.00415732498274046, "phrase": "security_concerns"}, {"score": 0.004027658449157296, "phrase": "software_development_life_cycle"}, {"score": 0.003879641633535263, "phrase": "ccc"}, {"score": 0.0038573081851680656, "phrase": "related_structural_metrics"}, {"score": 0.0038351438570038195, "phrase": "important_indicators"}, {"score": 0.003609942041018041, "phrase": "software_system"}, {"score": 0.003497288366595832, "phrase": "software_faults"}, {"score": 0.0034274307414457477, "phrase": "systematic_guidelines"}, {"score": 0.002800977405203334, "phrase": "large_empirical_study"}, {"score": 0.0027848658492780503, "phrase": "fifty-two_releases"}, {"score": 0.002690118949960196, "phrase": "vulnerability_predictors"}, {"score": 0.0025392983369523143, "phrase": "naive-bayes_-_and"}, {"score": 0.0024458183524365233, "phrase": "vulnerability-prone_files"}, {"score": 0.0024107856296917813, "phrase": "tolerable_false_positive_rates"}, {"score": 0.0022755900116918923, "phrase": "future_releases"}, {"score": 0.002255973756526505, "phrase": "experimental_results"}, {"score": 0.0022365262201954643, "phrase": "structural_information"}, {"score": 0.002217245958060308, "phrase": "non-security_realm"}, {"score": 0.0021417691855960715, "phrase": "vulnerability_prediction"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Vulnerability prediction", " Software metrics", " Complexity", " Coupling", " Cohesion"], "paper_abstract": "Software security failures are common and the problem is growing. A vulnerability is a weakness in the software that, when exploited, causes a security failure. It is difficult to detect vulnerabilities until they manifest themselves as security failures in the operational stage of software, because security concerns are often not addressed or known sufficiently early during the software development life cycle. Numerous studies have shown that complexity, coupling, and cohesion (CCC) related structural metrics are important indicators of the quality of software architecture, and software architecture is one of the most important and early design decisions that influences the final quality of the software system. Although these metrics have been successfully employed to indicate software faults in general, there are no systematic guidelines on how to use these metrics to predict vulnerabilities in software. If CCC metrics can be used to indicate vulnerabilities, these metrics could aid in the conception of more secured architecture, leading to more secured design and code and eventually better software. In this paper, we present a framework to automatically predict vulnerabilities based on CCC metrics. To empirically validate the framework and prediction accuracy, we conduct a large empirical study on fifty-two releases of Mozilla Firefox developed over a period of four years. To build vulnerability predictors, we consider four alternative data mining and statistical techniques - C4.5 Decision Tree, Random Forests, Logistic Regression, and Naive-Bayes - and compare their prediction performances. We are able to correctly predict majority of the vulnerability-prone files in Mozilla Firefox, with tolerable false positive rates. Moreover, the predictors built from the past releases can reliably predict the likelihood of having vulnerabilities in the future releases. The experimental results indicate that structural information from the non-security realm such as complexity, coupling, and cohesion are useful in vulnerability prediction. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Using complexity, coupling, and cohesion metrics as early indicators of vulnerabilities", "paper_id": "WOS:000289705000007"}