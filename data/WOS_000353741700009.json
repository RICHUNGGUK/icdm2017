{"auto_keywords": [{"score": 0.02886397924099987, "phrase": "rcdfa"}, {"score": 0.00481495049065317, "phrase": "efficient_regular_expression_matching"}, {"score": 0.00471503739362446, "phrase": "efficient_techniques"}, {"score": 0.0045213598841171935, "phrase": "networked_systems"}, {"score": 0.004408976280483648, "phrase": "intrusion_detection_systems"}, {"score": 0.0043721365634105565, "phrase": "application_identification"}, {"score": 0.004335603324413586, "phrase": "classification_services"}, {"score": 0.004281372589330329, "phrase": "traffic_management"}, {"score": 0.004174929128880472, "phrase": "regular_expression"}, {"score": 0.004122699822340296, "phrase": "support_engine"}, {"score": 0.0040882422992520925, "phrase": "deterministic_finite_automaton"}, {"score": 0.004003348169928476, "phrase": "previous_research_studies"}, {"score": 0.003936698872193083, "phrase": "space_requirements"}, {"score": 0.0038549394272661356, "phrase": "original_dfa_formalism"}, {"score": 0.003485437176235259, "phrase": "original_dfa_memory_consumption"}, {"score": 0.003245270848972794, "phrase": "original_dfa."}, {"score": 0.0031248767378106663, "phrase": "memory_layouts"}, {"score": 0.0030343239259424497, "phrase": "underlying_architecture"}, {"score": 0.0028609920171902186, "phrase": "new_and_improved_finite_automaton_model"}, {"score": 0.0028251537271620996, "phrase": "ranged_compressed_dfa"}, {"score": 0.0026525671788921205, "phrase": "matching_speed"}, {"score": 0.002543392353000551, "phrase": "compressed_automaton"}, {"score": 0.0025221012517852885, "phrase": "memory_and_performance_penalties"}, {"score": 0.0024904974828343033, "phrase": "experimental_evaluation"}, {"score": 0.0023779596230982234, "phrase": "additional_memory_lookups"}, {"score": 0.0023481578019624843, "phrase": "proposed_advanced_layouts"}, {"score": 0.0023284972218506157, "phrase": "memory_compression"}, {"score": 0.0022514836269627186, "phrase": "advanced_layouts"}, {"score": 0.002158780936704905, "phrase": "processing_speed"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["DFA optimization", " Deep Packet Inspection", " Performance evaluation", " Computer network"], "paper_abstract": "Efficient techniques for pattern matching are essential in a number of networked systems and services, such as intrusion detection systems, application identification and classification services, and traffic management. Most pattern matching applications describe patterns using regular expression and the support engine is Deterministic Finite Automaton (FA). Previous research studies address either performance or space requirements issues. From the original DFA formalism we design and evaluate optimizations to its representation and operation to meet Deep Packet Inspection (DPI) systems' requirements for commodity platforms, such as (i) decreasing the original DFA memory consumption (high compression ratio) and (ii) performing pattern matching as fast as the original DFA. Our approach spans from designing the DFA to developing memory layouts to get the most of the underlying architecture. The contributions of this work are threefold: (i) a new and improved finite automaton model, called Ranged Compressed DFA (RCDFA), (ii) three RCDFA optimizations for achieving more compression and matching speed, and (iii) three advanced layouts for implementing the compressed automaton without memory and performance penalties. The experimental evaluation shows that RCDFA compresses DFA up to 99% without imposing additional memory lookups. The proposed advanced layouts reach memory compression of around 97%. RCDFA together with the advanced layouts outperforms the standard DFA by up to 32 times in terms of processing speed. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Design and optimizations for efficient regular expression matching in DPI systems", "paper_id": "WOS:000353741700009"}