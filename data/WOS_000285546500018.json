{"auto_keywords": [{"score": 0.041237202830074586, "phrase": "global_synchronization"}, {"score": 0.041025976343579976, "phrase": "local_synchronization"}, {"score": 0.034789171521739305, "phrase": "directed_cycle"}, {"score": 0.02841775003608198, "phrase": "undirected_cycle"}, {"score": 0.00481495049065317, "phrase": "delays_caused"}, {"score": 0.0047893552527040195, "phrase": "local_synchronization._synchronization"}, {"score": 0.00472595801454134, "phrase": "parallel_computing"}, {"score": 0.004613940521007727, "phrase": "receiving_processor"}, {"score": 0.004103264435618687, "phrase": "openmp"}, {"score": 0.004038076978795421, "phrase": "collective_communication_operations"}, {"score": 0.003995245974519381, "phrase": "mpi."}, {"score": 0.0036100762867678415, "phrase": "varying_amounts"}, {"score": 0.00332345018550604, "phrase": "synchronization_dependencies"}, {"score": 0.0032706520949775065, "phrase": "task_times"}, {"score": 0.0028391271282216758, "phrase": "similar_results"}, {"score": 0.0027349450784503273, "phrase": "combinatorial_properties"}, {"score": 0.0027131212233443137, "phrase": "synchronization_problem"}, {"score": 0.0026986685585382347, "phrase": "geometrically_distributed_tasks"}, {"score": 0.002662871928330334, "phrase": "nondeterministic_synchronization"}, {"score": 0.0024842242921857705, "phrase": "expected_number"}, {"score": 0.0024512651776530023, "phrase": "random_synchronization"}, {"score": 0.002393034183276193, "phrase": "deterministic_synchronization"}, {"score": 0.002323733841676435, "phrase": "analytic_results"}, {"score": 0.002196944917134202, "phrase": "random-neighbor_synchronization_models"}, {"score": 0.0021276181317652163, "phrase": "steady_state"}, {"score": 0.0021049977753042253, "phrase": "synchronization_graphs"}], "paper_keywords": ["parallel synchronization", " stochastic delay", " performance bounds", " combinatorics"], "paper_abstract": "Synchronization is often necessary in parallel computing, but it can create delays whenever the receiving processor is idle, waiting for the information to arrive. This is especially true for barrier, or global, synchronization, in which every processor must synchronize with every other processor. Nonetheless, barriers are the only form of synchronization explicitly supplied in OpenMP, and they occur whenever collective communication operations are used in MPI. Many applications do not actually require global synchronization; local synchronization, in which a processor synchronizes only with those processors from or to which information or resources are needed, is often adequate. However, when tasks take varying amounts of time, the behavior of a system under local synchronization is more difficult to analyze since processors do not start tasks at the same time. We show that when the synchronization dependencies form a directed cycle and the task times are geometrically distributed with p = 0.5, then as the number of processors tends to infinity the processors are working 2-root 2 approximate to 0.59% of the time. Under global synchronization, however, the time to complete each task is unbounded, increasing logarithmically with the number of processors. Similar results apply for p not equal 0.5. We also present some of the combinatorial properties of the synchronization problem with geometrically distributed tasks on an undirected cycle. Nondeterministic synchronization is also examined, where processors decide randomly at the beginning of each task which neighbors(s) to synchronize with. We show that the expected number of task dependencies for random synchronization on an undirected cycle is the same as for deterministic synchronization on a directed cycle. Simulations are included to extend the analytic results. They show that more heavy-tailed distributions can actually create fewer delays than less heavy-tailed ones if the number of processors is small for some random-neighbor synchronization models. The results also show the rate of convergence to the steady state for various task distributions and synchronization graphs.", "paper_title": "ANALYSIS OF DELAYS CAUSED BY LOCAL SYNCHRONIZATION", "paper_id": "WOS:000285546500018"}