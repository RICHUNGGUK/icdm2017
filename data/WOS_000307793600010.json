{"auto_keywords": [{"score": 0.0460198084022342, "phrase": "software_systems"}, {"score": 0.039999584826192904, "phrase": "development_periods"}, {"score": 0.03949131510361903, "phrase": "knowledge_preservation"}, {"score": 0.00481495049065317, "phrase": "software_projects"}, {"score": 0.004627244470096107, "phrase": "project_knowledge"}, {"score": 0.004586531354697466, "phrase": "developer_communication"}, {"score": 0.004546174820239776, "phrase": "design_documents"}, {"score": 0.004446823283475876, "phrase": "successful_evolution"}, {"score": 0.004124920849728372, "phrase": "limited_resources"}, {"score": 0.003628460216207393, "phrase": "core_subsystems"}, {"score": 0.0034714553759044664, "phrase": "prime_candidates"}, {"score": 0.0032774280543222843, "phrase": "development_period"}, {"score": 0.003013129637451091, "phrase": "time_dependence"}, {"score": 0.002986575805559931, "phrase": "code_changes"}, {"score": 0.0028446460307503343, "phrase": "software_project_knowledge_preservation"}, {"score": 0.0027578496677536373, "phrase": "case_study"}, {"score": 0.0025578967205807843, "phrase": "large_core_subsystems"}, {"score": 0.0023307492812556204, "phrase": "development_period_knowledge"}, {"score": 0.0022297712188622293, "phrase": "substantial_changes"}, {"score": 0.002161695357601592, "phrase": "substantial_effort"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Software maintenance", " Documentation", " Knowledge preservation", " Empirical analysis", " Mining software repositories"], "paper_abstract": "Up-to-date preservation of project knowledge like developer communication and design documents is essential for the successful evolution of software systems. Ideally, all knowledge should be preserved, but since projects only have limited resources, and software systems continuously grow in scope and complexity, one needs to prioritize the subsystems and development periods for which knowledge preservation is more urgent. For example, core subsystems on which the majority of other subsystems build are obviously prime candidates for preservation, yet if these subsystems change continuously, picking a development period to start knowledge preservation and to maintain knowledge for over time become very hard. This paper exploits the time dependence between code changes to automatically determine for which subsystems and development periods of a software project knowledge preservation would be most valuable. A case study on two large open source projects (PostgreSQL and FreeBSD) shows that the most valuable subsystems to preserve knowledge for are large core subsystems. However, the majority of these subsystems (1) are continuously foundational, i.e., ideally for each development period knowledge should be preserved, and (2) experience substantial changes, i.e., preserving knowledge requires substantial effort. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Preserving knowledge in software projects", "paper_id": "WOS:000307793600010"}