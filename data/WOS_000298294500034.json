{"auto_keywords": [{"score": 0.04375545095111104, "phrase": "anumita"}, {"score": 0.012719068503061405, "phrase": "coarse-grain_speculation"}, {"score": 0.00481495049065317, "phrase": "coarse-grain_speculative_parallelism"}, {"score": 0.0046993598473345395, "phrase": "coarse_granularities"}, {"score": 0.00443308765153716, "phrase": "promising_programming_model"}, {"score": 0.004326624385772596, "phrase": "modern_architectures"}, {"score": 0.004061584718427419, "phrase": "programming_constructs"}, {"score": 0.0040027552011993005, "phrase": "supporting_run-time_system"}, {"score": 0.003831310632470526, "phrase": "program_performance"}, {"score": 0.00342568771304873, "phrase": "surrogate_code_blocks"}, {"score": 0.003376037544631762, "phrase": "arbitrary_granularity"}, {"score": 0.003215659239270654, "phrase": "single_winner"}, {"score": 0.0031690434364310435, "phrase": "program_state"}, {"score": 0.003107935254560724, "phrase": "expressive_semantics"}, {"score": 0.0030778231027679464, "phrase": "winner_selection"}, {"score": 0.0029458777184930896, "phrase": "user-defined_notions"}, {"score": 0.0026209522797963447, "phrase": "input_data"}, {"score": 0.0025331002386232014, "phrase": "user-level_runtime"}, {"score": 0.0024244850043263666, "phrase": "fortran"}, {"score": 0.0023776656246300063, "phrase": "openmp_extension"}, {"score": 0.0021049977753042253, "phrase": "static_algorithm_choices"}], "paper_keywords": ["Algorithms", " Design", " Languages", " Measurement and Performance", " Speculative Parallelism", " Coarse-grain Speculation", " Concurrent Programming and Runtime Systems"], "paper_abstract": "Speculative execution at coarse granularities (e.g., code-blocks, methods, algorithms) offers a promising programming model for exploiting parallelism on modern architectures. In this paper we present Anumita, a framework that includes programming constructs and a supporting run-time system to enable the use of coarse-grain speculation to improve program performance, without burdening the programmer with the complexity of creating, managing and retiring speculations. Speculations may be composed by specifying surrogate code blocks at any arbitrary granularity, which are then executed concurrently, with a single winner ultimately modifying program state. Anumita provides expressive semantics for winner selection that go beyond time to solution to include user-defined notions of quality of solution. Anumita can be used to improve the performance of hard to parallelize algorithms whose performance is highly dependent on input data. Anumita is implemented as a user-level runtime with programming interfaces to C, C++, Fortran and as an OpenMP extension. Performance results from several applications show the efficacy of using coarse-grain speculation to achieve (a) robustness when surrogates fail and (b) significant speedup over static algorithm choices.", "paper_title": "Exploiting Coarse-Grain Speculative Parallelism", "paper_id": "WOS:000298294500034"}