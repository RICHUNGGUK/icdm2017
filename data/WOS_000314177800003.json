{"auto_keywords": [{"score": 0.049407782669650464, "phrase": "noninterference"}, {"score": 0.00481495049065317, "phrase": "component-based_distributed_systems"}, {"score": 0.004647911247507267, "phrase": "strong_security_policy"}, {"score": 0.0035533891890176823, "phrase": "high-level_model"}, {"score": 0.003503497128638099, "phrase": "component_information_flow"}, {"score": 0.003264316172836322, "phrase": "secure_system_development"}, {"score": 0.0030414140732789186, "phrase": "functional_part"}, {"score": 0.002853808773854451, "phrase": "high-level_configuration"}, {"score": 0.0026214978443388653, "phrase": "security_leak"}, {"score": 0.002530359917257626, "phrase": "system_security_code"}, {"score": 0.002211947103318718, "phrase": "classical_web_service_use_case"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["component-based systems", " noninterference", " JIF"], "paper_abstract": "Noninterference is a strong security policy that enforces confidentiality and integrity. Many solutions are proposed in the state of the art for verifying this policy in programs, but few tools are proposed to implement it. In this paper, we define a high-level model called Component Information Flow, and we develop the tools that simplify distributed secure system development and deployment. The developer focuses on developing the functional part of his or her system and defines his or her system security properties by using a high-level configuration. When this configuration is validated, that is, no security leak is detected, the system security code is generated. To validate and demonstrate the effectiveness of our approach, we apply the Component Information Flow tools to a classical Web service use case. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Information flow control of component-based distributed systems", "paper_id": "WOS:000314177800003"}