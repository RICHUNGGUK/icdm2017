{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "maximal_contiguous_subsequences"}, {"score": 0.004515967518891287, "phrase": "sequence_a"}, {"score": 0.004452078350485375, "phrase": "real_numbers"}, {"score": 0.004145882022189891, "phrase": "non-overlapping_contiguous_subsequences"}, {"score": 0.003916098498242888, "phrase": "maximal_subsequence_m"}, {"score": 0.0036990033106718183, "phrase": "proper_subsequence"}, {"score": 0.003569451476205552, "phrase": "greater_sum"}, {"score": 0.002923214590192792, "phrase": "linear_time"}, {"score": 0.0027610089418453614, "phrase": "p_processors"}, {"score": 0.002342972434255588, "phrase": "constant_number"}, {"score": 0.002309754152767196, "phrase": "communication_rounds"}, {"score": 0.0021049977753042253, "phrase": "linear_speed-up"}], "paper_keywords": [""], "paper_abstract": "Given a sequence A of real numbers, we wish to find a list of all non-overlapping contiguous subsequences of A that are maximal. A maximal subsequence M of A has the property that no proper subsequence of M has a greater sum of values. Furthermore, M may not be contained properly within any subsequence of A with this property. This problem can be solved sequentially in linear time. We present a BSP/CGM algorithm that uses p processors and takes O(vertical bar A vertical bar/p) time and O(vertical bar A vertical bar/p) space per processor. The algorithm uses a constant number of communication rounds of size at most O(vertical bar A vertical bar/p). Thus the algorithm achieves linear speed-up and is highly scalable.", "paper_title": "A BSP/CGM algorithm for finding all maximal contiguous subsequences of a sequence of numbers", "paper_id": "WOS:000241469500075"}