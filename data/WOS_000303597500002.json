{"auto_keywords": [{"score": 0.04869899604560651, "phrase": "poet"}, {"score": 0.00481495049065317, "phrase": "parameterized_source-to-source_program_transformations"}, {"score": 0.0044104497301196794, "phrase": "advanced_program_transformations"}, {"score": 0.004283280680222718, "phrase": "arbitrary_programming_languages"}, {"score": 0.0041294419262414995, "phrase": "ad_hoc_translators"}, {"score": 0.0037823114064881357, "phrase": "large_number"}, {"score": 0.0037273513742154237, "phrase": "compiler_optimizations"}, {"score": 0.003646399625591736, "phrase": "loop_interchange"}, {"score": 0.003438990973529508, "phrase": "strength_reduction"}, {"score": 0.0033890026927890058, "phrase": "scalar_replacement"}, {"score": 0.0033397385936467204, "phrase": "sse_vectorization"}, {"score": 0.0031039212233596415, "phrase": "code_generation"}, {"score": 0.002863652837038965, "phrase": "finite-state-machine-based_behavior_modeling_language"}, {"score": 0.0026419338604879404, "phrase": "implementation_decisions"}, {"score": 0.002584494385587982, "phrase": "poet_language"}, {"score": 0.0023324855762635616, "phrase": "programmable_compiler_optimization"}, {"score": 0.002298544073884724, "phrase": "high_performance_computing"}, {"score": 0.002248553559414903, "phrase": "ad_hoc_code_generation"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["transformation language", " compiler optimization", " source-to-source translators"], "paper_abstract": "We present POET, a scripting language designed for applying advanced program transformations to code in arbitrary programming languages as well as building ad hoc translators between these languages. We have used POET to support a large number of compiler optimizations, including loop interchange, parallelization, blocking, fusion/fission, strength reduction, scalar replacement, SSE vectorization, among others, and to fully support the code generation of several domain-specific languages, including automatic tester/timer generation, and automatically translating a finite-state-machine-based behavior modeling language into C++/ Java code. This paper presents key design and implementation decisions of the POET language and show how to use various language features to significantly reduce the difficulty of supporting programmable compiler optimization for high performance computing and supporting ad hoc code generation for various domain-specific languages. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "POET: a scripting language for applying parameterized source-to-source program transformations", "paper_id": "WOS:000303597500002"}