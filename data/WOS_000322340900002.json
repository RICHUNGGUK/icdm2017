{"auto_keywords": [{"score": 0.038529986680897355, "phrase": "automatic_program_repair"}, {"score": 0.00481495049065317, "phrase": "automatic_software_repair"}, {"score": 0.0045726187330434025, "phrase": "existing_software_systems"}, {"score": 0.004310501708408856, "phrase": "dominant_cost"}, {"score": 0.00424734451992536, "phrase": "software_maintenance"}, {"score": 0.0040334640350288, "phrase": "life_cycle_cost"}, {"score": 0.00388729255686046, "phrase": "recent_research"}, {"score": 0.003802135020791801, "phrase": "significant_progress"}, {"score": 0.0035054881943660096, "phrase": "evolutionary_computation"}, {"score": 0.0034034331737042363, "phrase": "run-time_monitoring"}, {"score": 0.0033288399506044763, "phrase": "sound_synthesis"}, {"score": 0.0029576827451501956, "phrase": "current_work"}, {"score": 0.002914288956035066, "phrase": "evolutionary_computation_approaches"}, {"score": 0.0027469703311742647, "phrase": "genetic_programming"}, {"score": 0.0026084451971464867, "phrase": "particular_bug"}, {"score": 0.0025324393547676623, "phrase": "algorithmic_improvements"}, {"score": 0.002495268931035983, "phrase": "recent_experimental_results"}, {"score": 0.0023869914500743083, "phrase": "related_work"}, {"score": 0.0023346234464901978, "phrase": "rapidly_growing_subfield"}, {"score": 0.0022005118194652704, "phrase": "important_open_research_challenges"}, {"score": 0.0021049977753042253, "phrase": "future_research"}], "paper_keywords": ["Automatic program repair", " Software engineering", " Evolutionary computation"], "paper_abstract": "The abundance of defects in existing software systems is unsustainable. Addressing them is a dominant cost of software maintenance, which in turn dominates the life cycle cost of a system. Recent research has made significant progress on the problem of automatic program repair, using techniques such as evolutionary computation, instrumentation and run-time monitoring, and sound synthesis with respect to a specification. This article serves three purposes. First, we review current work on evolutionary computation approaches, focusing on GenProg, which uses genetic programming to evolve a patch to a particular bug. We summarize algorithmic improvements and recent experimental results. Second, we review related work in the rapidly growing subfield of automatic program repair. Finally, we outline important open research challenges that we believe should guide future research in the area.", "paper_title": "Current challenges in automatic software repair", "paper_id": "WOS:000322340900002"}