{"auto_keywords": [{"score": 0.03664873483375934, "phrase": "grid"}, {"score": 0.00481495049065317, "phrase": "security-assured_grid_job_scheduling"}, {"score": 0.004728874038094706, "phrase": "large_number"}, {"score": 0.004694873827535293, "phrase": "user_jobs"}, {"score": 0.004661116930794176, "phrase": "parallel_execution"}, {"score": 0.004610934029355486, "phrase": "open-resource_grid_system"}, {"score": 0.004495922204117959, "phrase": "system_failures"}, {"score": 0.004415523687947897, "phrase": "infected_hardware"}, {"score": 0.004383766516923386, "phrase": "software_vulnerability"}, {"score": 0.004320932773749168, "phrase": "security_policy"}, {"score": 0.004152725837204292, "phrase": "grid_job_scheduling"}, {"score": 0.0039055075176836263, "phrase": "security_assurance"}, {"score": 0.003849502288990788, "phrase": "six_risk-resilient_scheduling_algorithms"}, {"score": 0.003808024029417427, "phrase": "secure_grid_job_execution"}, {"score": 0.0037806195039533355, "phrase": "different_risky_conditions"}, {"score": 0.003712964709503484, "phrase": "simulated_grid_performances"}, {"score": 0.0036729522133392175, "phrase": "new_grid_job"}, {"score": 0.0036072171658966348, "phrase": "nas_and_psa_workloads"}, {"score": 0.0035683401689358993, "phrase": "relative_performance"}, {"score": 0.003504470784139224, "phrase": "total_job_makespan"}, {"score": 0.0032250366795039715, "phrase": "known_scheduling"}, {"score": 0.0031558679589831287, "phrase": "new_space-time_genetic_algorithm"}, {"score": 0.0031331419276289306, "phrase": "stga"}, {"score": 0.0030881781330491104, "phrase": "faster_searching"}, {"score": 0.0030659380503460613, "phrase": "protected_chromosome_formation"}, {"score": 0.0029785631356166594, "phrase": "wide-area_grid_environment"}, {"score": 0.0028936710552719806, "phrase": "global_job_scheduler"}, {"score": 0.002852134080296829, "phrase": "job_delays"}, {"score": 0.002721201438773336, "phrase": "unreliable_resources"}, {"score": 0.0026628098176168682, "phrase": "delay-tolerant_min-min_and_stga_job_scheduling"}, {"score": 0.0025682543875086934, "phrase": "risky_or_preemptive_or_replicated_algorithms"}, {"score": 0.00251313643823856, "phrase": "replicated_job_scheduling"}, {"score": 0.002441477009112022, "phrase": "delayed_job_execution"}, {"score": 0.0023977287074829798, "phrase": "delay_factor"}, {"score": 0.002337791830793841, "phrase": "total_makespan"}, {"score": 0.0023125643872311994, "phrase": "kiviat_graph"}, {"score": 0.0022466111771668406, "phrase": "grid_computing_services"}, {"score": 0.002222365485177405, "phrase": "risk-resilient_job_scheduling_schemes"}, {"score": 0.002127965733093433, "phrase": "scheduling_delays"}, {"score": 0.0021049977753042253, "phrase": "risky_grid_computing_environment"}], "paper_keywords": ["grid computing", " job scheduling heuristics", " genetic algorithm", " replication scheduling", " risk resilience", " NAS and PSA benchmarks", " performance metrics", " distributed supercomputing"], "paper_abstract": "In scheduling a large number of user jobs for parallel execution on an open-resource Grid system, the jobs are subject to system failures or delays caused by infected hardware, software vulnerability, and distrusted security policy. This paper models the risk and insecure conditions in Grid job scheduling. Three risk-resilient strategies, preemptive, replication, and delay-tolerant, are developed to provide security assurance. We propose six risk-resilient scheduling algorithms to assure secure Grid job execution under different risky conditions. We report the simulated Grid performances of these new Grid job scheduling algorithms under the NAS and PSA workloads. The relative performance is measured by the total job makespan, Grid resource utilization, job failure rate, slowdown ratio, replication overhead, etc. In addition to extending from known scheduling heuristics, we developed a new space-time genetic algorithm (STGA) based on faster searching and protected chromosome formation. Our simulation results suggest that, in a wide-area Grid environment, it is more resilient for the global job scheduler to tolerate some job delays instead of resorting to preemption or replication or taking a risk on unreliable resources allocated. We find that delay-tolerant Min-Min and STGA job scheduling have 13-23 percent higher performance than using risky or preemptive or replicated algorithms. The resource overheads for replicated job scheduling are kept at a low 15 percent. The delayed job execution is optimized with a delay factor, which is 20 percent of the total makespan. A Kiviat graph is proposed for demonstrating the quality of Grid computing services. These risk-resilient job scheduling schemes can upgrade Grid performance significantly at only a moderate increase in extra resources or scheduling delays in a risky Grid computing environment.", "paper_title": "Risk-resilient heuristics and genetic algorithms for security-assured grid job scheduling", "paper_id": "WOS:000236929800005"}