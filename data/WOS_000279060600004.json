{"auto_keywords": [{"score": 0.03880550409822825, "phrase": "graph_streams"}, {"score": 0.015719716506582538, "phrase": "continuous_subgraph_pattern_search"}, {"score": 0.007687865228241302, "phrase": "probability_threshold"}, {"score": 0.004674952036988355, "phrase": "graph_databases"}, {"score": 0.004459334186889869, "phrase": "chemical_compounds"}, {"score": 0.004394005938106429, "phrase": "network_traffic_data"}, {"score": 0.004316868627944404, "phrase": "users'_visiting_logs"}, {"score": 0.004228577663320847, "phrase": "existing_works"}, {"score": 0.0041666157975446564, "phrase": "static_graph_databases"}, {"score": 0.003939296259436904, "phrase": "new_problem"}, {"score": 0.003858697684681798, "phrase": "multiple_target_graphs"}, {"score": 0.0037909219941547373, "phrase": "stream_style"}, {"score": 0.0036373553416391823, "phrase": "proposed_problem"}, {"score": 0.0036052633308076933, "phrase": "continuous_join"}, {"score": 0.003584025547693836, "phrase": "query_patterns"}, {"score": 0.003469426649835834, "phrase": "subgraph_isomorphism"}, {"score": 0.0033984088755183287, "phrase": "subgraph_isomorphism_checking"}, {"score": 0.003348570667660301, "phrase": "real-time_monitoring"}, {"score": 0.0032223742018434856, "phrase": "subgraph_isomorphism_verification"}, {"score": 0.0031845067058084583, "phrase": "exact_query-stream_subgraph_isomorphic_pairs"}, {"score": 0.0030826428662461083, "phrase": "probable_pairs"}, {"score": 0.0030464123943266673, "phrase": "actual_answer_pairs"}, {"score": 0.002984027623988469, "phrase": "lightweight_yet_effective_feature_structure"}, {"score": 0.002966438503447793, "phrase": "node-neighbor_tree"}, {"score": 0.002931569771634119, "phrase": "false_candidate_query-stream"}, {"score": 0.0028800314406625996, "phrase": "computational_cost"}, {"score": 0.0028377736739466437, "phrase": "novel_idea"}, {"score": 0.0028044130672242695, "phrase": "feature_structures"}, {"score": 0.0027796495180095657, "phrase": "numerical_vector_space"}, {"score": 0.0027146742941153443, "phrase": "projected_space"}, {"score": 0.002651213849567608, "phrase": "dominant_relationships"}, {"score": 0.00259690091805822, "phrase": "subgraph_search"}, {"score": 0.0024768883044869023, "phrase": "novel_problem"}, {"score": 0.0024333239726872604, "phrase": "subgraph_patterns"}, {"score": 0.0023905240285582658, "phrase": "high_probability"}, {"score": 0.002233301265743633, "phrase": "proposed_solutions"}, {"score": 0.002181069180139225, "phrase": "new_pruning_technique"}, {"score": 0.0021174899403023965, "phrase": "extensive_experiments"}], "paper_keywords": ["Subgraph search", " node-neighbor tree", " graph streams", " uncertain graph streams"], "paper_abstract": "Search over graph databases has attracted much attention recently due to its usefulness in many fields, such as the analysis of chemical compounds, intrusion detection in network traffic data, and pattern matching over users' visiting logs. However, most of the existing works focus on search over static graph databases, while in many real applications, graphs are changing over time. In this paper, we investigate a new problem on continuous subgraph pattern search under the situation where multiple target graphs are constantly changing in a stream style, namely, the subgraph pattern search over graph streams. Obviously, the proposed problem is a continuous join between query patterns and graph streams where the join predicate is the existence of subgraph isomorphism. Due to the NP-completeness of subgraph isomorphism checking, to achieve the real-time monitoring of the existence of certain subgraph patterns, we would like to avoid using subgraph isomorphism verification to find the exact query-stream subgraph isomorphic pairs but to offer an approximate answer that could report all probable pairs without missing any actual answer pairs. Therefore, we propose a lightweight yet effective feature structure called Node-Neighbor Tree to filter out false candidate query-stream pairs. To reduce the computational cost, we propose a novel idea, projecting the feature structures into a numerical vector space and conducting dominant relationship checking in the projected space. We design two methods to efficiently verify dominant relationships, and thus, answer the subgraph search over graph streams efficiently. In addition to answering queries over certain graph streams, we propose a novel problem, detecting the appearance of subgraph patterns over uncertain graph streams with high probability (i.e., larger than the probability threshold specified by users). To address this problem, we not only extend the proposed solutions for certain graphs streams, but also propose a new pruning technique by utilizing the probability threshold. We substantiate our methods with extensive experiments on both certain and uncertain graph streams.", "paper_title": "Continuous Subgraph Pattern Search over Certain and Uncertain Graph Streams", "paper_id": "WOS:000279060600004"}