{"auto_keywords": [{"score": 0.040905102236525534, "phrase": "asynchronous_communications"}, {"score": 0.00481495049065317, "phrase": "distributed_computation"}, {"score": 0.004307569753106432, "phrase": "well-defined_semantics"}, {"score": 0.0039449104968131655, "phrase": "imperative_object_calculus"}, {"score": 0.0033277936960179892, "phrase": "also_confluence_properties"}, {"score": 0.0032697235411641695, "phrase": "asp_calculus"}, {"score": 0.0032315723330399375, "phrase": "asps_main_characteristics"}, {"score": 0.002646880721119838, "phrase": "distributed_components"}, {"score": 0.002193367454830741, "phrase": "distributed_object"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Object calculus", " Concurrency", " Distribution", " Parallelism", " Object-oriented languages", " Components", " Determinism", " Futures"], "paper_abstract": "Deterministic behavior for parallel and distributed computation is rather difficult to ensure. To reach that goal, many formal calculi, languages, and techniques with well-defined semantics have been proposed in the past. But none of them focused on an imperative object calculus with asynchronous communications and futures. in this article, an object calculus, Asynchronous Sequential Processes (ASP), is defined, with its semantics. We prove also confluence properties for the ASP calculus. ASPs main characteristics are asynchronous communications with futures, and sequential execution within each process. This paper provides a very general and dynamic property ensuring confluence. Further, more specific and static properties are derived. Additionally, we present a formalization of distributed components based on ASP, and show how such components are used to statically ensure determinacy. This paper can also be seen as a formalization of the concept of futures in a distributed object setting. (C) 2009 Elsevier Inc. All rights reserved", "paper_title": "Asynchronous sequential processes", "paper_id": "WOS:000264590400001"}