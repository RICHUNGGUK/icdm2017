{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "application-database_boundaries"}, {"score": 0.04324503678534102, "phrase": "information_flow"}, {"score": 0.039860121328897394, "phrase": "component_boundaries"}, {"score": 0.02847189932916077, "phrase": "information-flow_control"}, {"score": 0.004757087682427765, "phrase": "root_cause"}, {"score": 0.004718897469501381, "phrase": "confidentiality_and_integrity_attacks"}, {"score": 0.004624751696958501, "phrase": "insecure_information_flow"}, {"score": 0.0045324756541157574, "phrase": "modern_systems"}, {"score": 0.004477992162329249, "phrase": "major_challenge"}, {"score": 0.004424160689087029, "phrase": "end-to-end_information_flow"}, {"score": 0.004283739213556286, "phrase": "single_component"}, {"score": 0.00419823857480455, "phrase": "entire_system"}, {"score": 0.0034452601929727752, "phrase": "end-to-end_security"}, {"score": 0.003335804608791029, "phrase": "uniform_tracking"}, {"score": 0.0032428780373184207, "phrase": "underlying_database"}, {"score": 0.003216804708106142, "phrase": "key_enabler"}, {"score": 0.0031780859997873803, "phrase": "uniform_treatment"}, {"score": 0.003152531962718477, "phrase": "recent_work"}, {"score": 0.0031271827534050493, "phrase": "cheney_et_al"}, {"score": 0.0030646951765987414, "phrase": "database_manipulation"}, {"score": 0.0030278017562213265, "phrase": "embedded_language-integrated_query_language"}, {"score": 0.0029913854056577483, "phrase": "microsoft"}, {"score": 0.0029672945476915237, "phrase": "linq"}, {"score": 0.0028498718992429825, "phrase": "embedded_query_languages"}, {"score": 0.002748159131396737, "phrase": "information-flow_enforcement"}, {"score": 0.0024345529783611703, "phrase": "formal_results"}, {"score": 0.0023762535034673017, "phrase": "security_type_system"}, {"score": 0.002319346861878611, "phrase": "algebraic_data_types"}, {"score": 0.002300681752315682, "phrase": "pattern_matching"}, {"score": 0.002227508035618043, "phrase": "practical_side"}, {"score": 0.0021306709646058295, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "realistic_movie_rental_database"}], "paper_keywords": ["end-to-end security", " information flow", " static analysis", " language-integrated queries"], "paper_abstract": "The root cause for confidentiality and integrity attacks against computing systems is insecure information flow. The complexity of modern systems poses a major challenge to secure end-to-end information flow, ensuring that the insecurity of a single component does not render the entire system insecure. While information flow in a variety of languages and settings has been thoroughly studied in isolation, the problem of tracking information across component boundaries has been largely out of reach of the work so far. This is unsatisfactory because tracking information across component boundaries is necessary for end-to-end security. This paper proposes a framework for uniform tracking of information flow through both the application and the underlying database. Key enabler of the uniform treatment is recent work by Cheney et al., which studies database manipulation via an embedded language-integrated query language (with Microsoft's LINQ on the backend). Because both the host language and the embedded query languages are functional F#-like languages, we are able to leverage information-flow enforcement for functional languages to obtain information-flow control for databases \"for free\", synergize it with information-flow control for applications and thus guarantee security across application-database boundaries. We develop the formal results in the form of a security type system that includes a treatment of algebraic data types and pattern matching, and establish its soundness. On the practical side, we implement the framework and demonstrate its usefulness in a case study with a realistic movie rental database.", "paper_title": "SeLINQ: Tracking Information across Application-Database Boundaries", "paper_id": "WOS:000349143000004"}