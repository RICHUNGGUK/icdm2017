{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "automatic_shader_bounding"}, {"score": 0.004757643419056999, "phrase": "programmable_shading"}, {"score": 0.004701015188740582, "phrase": "artistic_control"}, {"score": 0.004481132747216135, "phrase": "black_box_nature"}, {"score": 0.004348936976349555, "phrase": "rendering_optimizations"}, {"score": 0.0037664981403399064, "phrase": "bounding_shader"}, {"score": 0.003611751858608048, "phrase": "original_shader"}, {"score": 0.0035051129798529, "phrase": "interval_analysis"}, {"score": 0.0034220655476652683, "phrase": "optimized_interval_arithmetic_code"}, {"score": 0.0032814236411444022, "phrase": "key_insight"}, {"score": 0.002945669860541221, "phrase": "data_flow_analysis"}, {"score": 0.0028245516301681713, "phrase": "domain-specific_optimizations"}, {"score": 0.0027575842698911173, "phrase": "generated_code"}, {"score": 0.00255068452076921, "phrase": "wider_use"}, {"score": 0.0023311233166534214, "phrase": "shader_instructions"}, {"score": 0.0022486729928886885, "phrase": "common_use_case"}, {"score": 0.0021049977753042253, "phrase": "importance_sampling"}], "paper_keywords": [""], "paper_abstract": "Programmable shading provides artistic control over materials and geometry, but the black box nature of shaders makes some rendering optimizations difficult to apply. In many cases, it is desirable to compute bounds of shaders in order to speed up rendering. A bounding shader can be automatically derived from the original shader by a compiler using interval analysis, but creating optimized interval arithmetic code is non-trivial. A key insight in this paper is that shaders contain metadata that can be automatically extracted by the compiler using data flow analysis. We present a number of domain-specific optimizations that make the generated code faster, while computing the same bounds as before. This enables a wider use and opens up possibilities for more efficient rendering. Our results show that on average 42-44% of the shader instructions can be eliminated for a common use case: single-sided bounding shaders used in lightcuts and importance sampling.", "paper_title": "An Optimizing Compiler for Automatic Shader Bounding", "paper_id": "WOS:000281286100002"}