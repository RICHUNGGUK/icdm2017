{"auto_keywords": [{"score": 0.034824712532310655, "phrase": "host_language"}, {"score": 0.00481495049065317, "phrase": "dataflow_languages"}, {"score": 0.0047823219739028325, "phrase": "natural_support"}, {"score": 0.004669845451682529, "phrase": "dynamic_applications"}, {"score": 0.004333208536635007, "phrase": "dataflow_constraints"}, {"score": 0.004260134699483774, "phrase": "procedural_languages"}, {"score": 0.0041598882840506385, "phrase": "syntactic_extensions"}, {"score": 0.004103662938882996, "phrase": "ad_hoc_data_types"}, {"score": 0.004048194450210347, "phrase": "imperative_program"}, {"score": 0.004007083686875716, "phrase": "dataflow_solver"}, {"score": 0.003899476621346112, "phrase": "novel_approach"}, {"score": 0.0037947482487057076, "phrase": "undue_burden"}, {"score": 0.0036553070575015344, "phrase": "ordinary_statements"}, {"score": 0.0036181717017041387, "phrase": "imperative_host_language"}, {"score": 0.003520971639466546, "phrase": "special_memory_locations"}, {"score": 0.003414728597255129, "phrase": "previous_approaches"}, {"score": 0.003391556348707911, "phrase": "reactive_objects"}, {"score": 0.003334309053314909, "phrase": "legal_type"}, {"score": 0.0032668821950788502, "phrase": "primitive_data_types"}, {"score": 0.0027180455234834993, "phrase": "elementary_operations"}, {"score": 0.0026002844796442818, "phrase": "formal_semantics"}, {"score": 0.002565084553019013, "phrase": "concrete_embodiment"}, {"score": 0.002453934333239467, "phrase": "conventional_platforms"}, {"score": 0.0024372660612788184, "phrase": "off-the-shelf_compilers"}, {"score": 0.00240426758768164, "phrase": "common_coding_idioms"}, {"score": 0.0023879358679564527, "phrase": "relevant_applications"}, {"score": 0.0023717148226629105, "phrase": "reactive_scenarios"}, {"score": 0.0023475891378276735, "phrase": "incremental_computation"}, {"score": 0.002331641523873951, "phrase": "observer_design_pattern"}, {"score": 0.0023079225317714815, "phrase": "data_structure_repair"}, {"score": 0.002222994077182071, "phrase": "problem-specific_change_propagation_algorithms"}, {"score": 0.002177991273791155, "phrase": "language-centric_approaches"}, {"score": 0.002155831935645973, "phrase": "self-adjusting_computation"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["Algorithms", " design", " experimentation", " languages", " Reactive programming", " dataflow programming", " imperative programming", " constraint solving", " incremental computation", " observer design pattern", " data structure repair"], "paper_abstract": "Dataflow languages provide natural support for specifying constraints between objects in dynamic applications, where programs need to react efficiently to changes of their environment. Researchers have long investigated how to take advantage of dataflow constraints by embedding them into procedural languages. Previous mixed imperative/dataflow systems, however, require syntactic extensions or libraries of ad hoc data types for binding the imperative program to the dataflow solver. In this paper we propose a novel approach that smoothly combines the two paradigms without placing undue burden on the programmer. In our framework, programmers can define ordinary statements of the imperative host language that enforce constraints between objects stored in special memory locations designated as \"reactive\". Differently from previous approaches, reactive objects can be of any legal type in the host language, including primitive data types, pointers, arrays, and structures. Statements defining constraints are automatically re-executed every time their input memory locations change, letting a program behave like a spreadsheet where the values of some variables depend upon the values of other variables. The constraint solving mechanism is handled transparently by altering the semantics of elementary operations of the host language for reading and modifying objects. We provide a formal semantics and describe a concrete embodiment of our technique into C/C++, showing how to implement it efficiently in conventional platforms using off-the-shelf compilers. We discuss common coding idioms and relevant applications to reactive scenarios, including incremental computation, observer design pattern, and data structure repair. The performance of our implementation is compared to ad hoc problem-specific change propagation algorithms, as well as to language-centric approaches such as self-adjusting computation and subject/observer communication mechanisms, showing that the proposed approach is efficient in practice.", "paper_title": "Reactive Imperative Programming with Dataflow Constraints", "paper_id": "WOS:000298294500026"}