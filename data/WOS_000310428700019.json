{"auto_keywords": [{"score": 0.042289534117489945, "phrase": "realized_variance_options"}, {"score": 0.015720898586956425, "phrase": "gpu"}, {"score": 0.014695705288596754, "phrase": "computational_methods"}, {"score": 0.012801549067858025, "phrase": "cuda_subroutines"}, {"score": 0.0078477289958397, "phrase": "barrier_options"}, {"score": 0.004554082077300675, "phrase": "option_pricing_problems"}, {"score": 0.004374473000977313, "phrase": "\"general_purpose\"_methods"}, {"score": 0.0042806998378295425, "phrase": "monte_carlo"}, {"score": 0.0041759790955637225, "phrase": "gpu_implementation"}, {"score": 0.003852939975815287, "phrase": "graphics_processing_units"}, {"score": 0.003644001325962353, "phrase": "extensive_use"}, {"score": 0.0035658307992470243, "phrase": "financial_markets"}, {"score": 0.0034356922031028533, "phrase": "financial_institutions"}, {"score": 0.0033515736929172644, "phrase": "art_hardware"}, {"score": 0.0032796556275748842, "phrase": "decision_process"}, {"score": 0.0029152820331653445, "phrase": "gpu."}, {"score": 0.0028704174214048937, "phrase": "reference_cpu"}, {"score": 0.0028087949095629955, "phrase": "speed_up_factors"}, {"score": 0.0027570267191549774, "phrase": "outstanding_performance"}, {"score": 0.0026811531172346676, "phrase": "mathematical_properties"}, {"score": 0.002656327554326748, "phrase": "pricing_formulae"}, {"score": 0.002615460042926181, "phrase": "ad_hoc_software_implementation"}, {"score": 0.0025121156016001886, "phrase": "single_precision"}, {"score": 0.0024811443887080543, "phrase": "cpu_and_gpu_execution_times"}, {"score": 0.0023683568569815606, "phrase": "corresponding_speed"}, {"score": 0.002157897198476163, "phrase": "mathematical_finance"}], "paper_keywords": ["Option pricing", " Black Scholes model", " Heston model", " Numerical quadrature", " Graphics processing unit", " Parallel computing"], "paper_abstract": "This paper shows two examples of how the analysis of option pricing problems can lead to computational methods efficiently implemented in parallel. These computational methods outperform \"general purpose\" methods (i.e., for example, Monte Carlo, finite differences methods). The GPU implementation of two numerical algorithms to price two specific derivatives (continuous barrier options and realized variance options) is presented. These algorithms are implemented in CUDA subroutines ready to run on Graphics Processing Units (GPUs) and their performance is studied. The realization of these subroutines is motivated by the extensive use of the derivatives considered in the financial markets to hedge or to take risk and by the interest of financial institutions in the use of state of the art hardware and software to speed up the decision process. The performance of these algorithms is measured using the (CPU/GPU) speed up factor, that is using the ratio between the (wall clock) times required to execute the code on a CPU and on a GPU. The choice of the reference CPU and GPU used to evaluate the speed up factors presented is stated. The outstanding performance of the algorithms developed is due to the mathematical properties of the pricing formulae used and to the ad hoc software implementation. In the case of realized variance options when the computation is done in single precision the comparisons between CPU and GPU execution times gives speed up factors of the order of a few hundreds. For barrier options, the corresponding speed up factors are of about fifteen, twenty. The CUDA subroutines to price barrier options and realized variance options can be downloaded from the website http://www.econ.univpm.it/recchioni/finance/w13. A more general reference to the work in mathematical finance of some of the authors and of their coauthors is the website http://www.econ.univpm.it/recchioni/finance/.", "paper_title": "Parallel option pricing on GPU: barrier options and realized variance options", "paper_id": "WOS:000310428700019"}