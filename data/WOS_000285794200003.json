{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "consistent_programmer_hypothesis"}, {"score": 0.04069634062156296, "phrase": "programming_style"}, {"score": 0.030280774098736515, "phrase": "source_code"}, {"score": 0.004761850836420121, "phrase": "software_developers"}, {"score": 0.004709333998298903, "phrase": "individual_styles"}, {"score": 0.0036485497734171294, "phrase": "different_test_strategies"}, {"score": 0.003490056936165004, "phrase": "programming_styles"}, {"score": 0.003283272764794988, "phrase": "adequate_tests"}, {"score": 0.0031405975280029913, "phrase": "programmer_a"}, {"score": 0.0030208364972341096, "phrase": "programmer_b."}, {"score": 0.002763919794139171, "phrase": "practical_application"}, {"score": 0.0027333769432036905, "phrase": "software_testing"}, {"score": 0.002643753276264565, "phrase": "specific_rogue_programmers"}, {"score": 0.002614534850703364, "phrase": "malicious_code"}, {"score": 0.002418829014435841, "phrase": "particular_facets"}, {"score": 0.002262756631083292, "phrase": "testing_strategies"}, {"score": 0.0021885300925245516, "phrase": "specific_programmers"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["author identification", " source code metrics", " plagiarism detection", " software testing", " static analysis", " testability", " metrics"], "paper_abstract": "Software developers have individual styles of programming. This paper empirically examines the validity of the consistent programmer hypothesis: that a facet or set of facets exist that can be used to recognize the author of a given program based on programming style. The paper further postulates that the programming style means that different test strategies work better for some programmers (or programming styles) than for others. For example, all-edges adequate tests may detect faults for programs written by Programmer A better than for those written by Programmer B. This has several useful applications: to help detect plagiarism/copyright violation of source code, to help improve the practical application of software testing, and to help pursue specific rogue programmers of malicious code and source code viruses. This paper investigates this concept by experimentally examining whether particular facets of the program can be used to identify programmers and whether testing strategies can be reasonably associated with specific programmers. Copyright (c) 2009 John Wiley & Sons, Ltd.", "paper_title": "Recognizing authors: an examination of the consistent programmer hypothesis", "paper_id": "WOS:000285794200003"}