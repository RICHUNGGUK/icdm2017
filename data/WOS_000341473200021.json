{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "periodic_schedules"}, {"score": 0.04361087412272256, "phrase": "precedence_relations"}, {"score": 0.04327595355954381, "phrase": "resource_constraints"}, {"score": 0.03566028947551064, "phrase": "period_w"}, {"score": 0.004776484866276242, "phrase": "cyclic_scheduling_problems"}, {"score": 0.004662913362513954, "phrase": "cyclic_scheduling"}, {"score": 0.00444377150105556, "phrase": "manufacturing_systems"}, {"score": 0.004390607370861926, "phrase": "computer_science"}, {"score": 0.004234884779773412, "phrase": "finite_set"}, {"score": 0.003908246778916674, "phrase": "execution_schedules"}, {"score": 0.0038614646772981848, "phrase": "i.e._the_execution"}, {"score": 0.003739421738326676, "phrase": "fixed_global_period"}, {"score": 0.003694652993546994, "phrase": "present_paper"}, {"score": 0.0036504182609411852, "phrase": "new_method"}, {"score": 0.0035778632599436024, "phrase": "cumulative_resource_constraints"}, {"score": 0.0034508665218929745, "phrase": "main_idea"}, {"score": 0.0033150213498435617, "phrase": "cyclic_scheduling_problem"}, {"score": 0.0031337465656628132, "phrase": "minimum_time_lag"}, {"score": 0.002891793055307152, "phrase": "unwound_problem"}, {"score": 0.0027667539384678814, "phrase": "periodic_schedule"}, {"score": 0.0024623517958288228, "phrase": "cyclic_precedence_relations"}, {"score": 0.002308953751676031, "phrase": "real-life_problem"}, {"score": 0.002244876254113051, "phrase": "inner_loops"}, {"score": 0.0022179605282337395, "phrase": "embedded_vliw_processor"}, {"score": 0.0021738146596180404, "phrase": "graham_list"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Cyclic scheduling", " Throughput maximization", " Resource constrained project scheduling", " problem", " Software pipelining"], "paper_abstract": "Cyclic scheduling has been widely studied because of the importance of applications in manufacturing systems and in computer science. For this class of problems, a finite set of tasks with precedence relations and resource constraints must be executed repetitively while maximizing the throughput. Many applications also require that execution schedules be periodic i.e. the execution of each task is repeated with a fixed global period w. The present paper develops a new method to build periodic schedules with cumulative resource constraints, periodic release dates and deadlines. The main idea is to fix the period w, to unwind the cyclic scheduling problem for some number of iterations, and to add precedence relations so that the minimum time lag between two successive executions of any task equals w. Then, using any usual (not cyclic) scheduling algorithm to compute task starting times for the unwound problem, we prove that either the method converges to a periodic schedule of period w or it fails to compute a schedule. A non-polynomial upper bound on the number of iterations to unwind in order to guarantee that cyclic precedence relations and resource constraints are fulfilled is also provided. This method is successfully applied to a real-life problem, namely the software pipelining of inner loops on an embedded VLIW processor core by using a Graham list scheduling algorithm. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Converging to periodic schedules for cyclic scheduling problems with resources and deadlines", "paper_id": "WOS:000341473200021"}