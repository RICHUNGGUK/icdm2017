{"auto_keywords": [{"score": 0.04969089536874817, "phrase": "domain-specific_mashup_platforms"}, {"score": 0.013165211822945756, "phrase": "expressive_power"}, {"score": 0.00481495049065317, "phrase": "conceptual_development_of_custom"}, {"score": 0.0046987973264610685, "phrase": "common_claim"}, {"score": 0.004660702714929615, "phrase": "mashup_platforms"}, {"score": 0.0044747919503484055, "phrase": "practice_end-users"}, {"score": 0.004313793774439379, "phrase": "highly_technical_or_inexistent_user_bases"}, {"score": 0.004158563941891469, "phrase": "key_shortcoming"}, {"score": 0.004124831019063503, "phrase": "current_platforms"}, {"score": 0.0038332390893263844, "phrase": "domain-specific_mashup_approach"}, {"score": 0.0036207206487324506, "phrase": "end-user_development"}, {"score": 0.0030262967460085366, "phrase": "target_domain"}, {"score": 0.00260246764210499, "phrase": "mashup_tool_development_kit"}, {"score": 0.0024882810071079797, "phrase": "mashup_platform"}, {"score": 0.0024580159789774516, "phrase": "custom_mashup"}, {"score": 0.002438043578514396, "phrase": "component_description_languages"}, {"score": 0.0024182330686905256, "phrase": "design-time_and_runtime_environments"}, {"score": 0.0022287497627555895, "phrase": "dedicated_development_methodology"}], "paper_keywords": ["Design", " Languages", " Mashups", " domain-specific mashups", " mashup tools/platforms", " conceptual development", " metadesign", " mashup platforms as a service"], "paper_abstract": "Despite the common claim by mashup platforms that they enable end-users to develop their own software, in practice end-users still don't develop their own mashups, as the highly technical or inexistent user bases of today's mashup platforms testify. The key shortcoming of current platforms is their general-purpose nature, that privileges expressive power over intuitiveness. In our prior work, we have demonstrated that a domain-specific mashup approach, which privileges intuitiveness over expressive power, has much more potential to enable end-user development (EUD). The problem is that developing mashup platforms-domain-specific or not-is complex and time consuming. In addition, domain-specific mashup platforms by their very nature target only a small user basis, that is, the experts of the target domain, which makes their development not sustainable if it is not adequately supported and automated. With this article, we aim to make the development of custom, domain-specific mashup platforms cost-effective. We describe a mashup tool development kit (MDK) that is able to automatically generate a mashup platform (comprising custom mashup and component description languages and design-time and runtime environments) from a conceptual design and to provision it as a service. We equip the kit with a dedicated development methodology and demonstrate the applicability and viability of the approach with the help of two case studies.", "paper_title": "Conceptual Development of Custom, Domain-Specific Mashup Platforms", "paper_id": "WOS:000339623400002"}