{"auto_keywords": [{"score": 0.036780205565435625, "phrase": "error_handling"}, {"score": 0.010392601872679565, "phrase": "pervasive_computing"}, {"score": 0.00945802809936551, "phrase": "software_components"}, {"score": 0.006281719772443853, "phrase": "error-handling_declarations"}, {"score": 0.00481495049065317, "phrase": "domain-specific_approach"}, {"score": 0.004764542405129454, "phrase": "architecturing_error_handling"}, {"score": 0.004640808212832262, "phrase": "challenging_nature"}, {"score": 0.004449452743965974, "phrase": "growing_number"}, {"score": 0.00433386573276633, "phrase": "networked_devices"}, {"score": 0.004089991141220082, "phrase": "uniquely_large_spectrum"}, {"score": 0.0038597866217852353, "phrase": "distributed_platforms"}, {"score": 0.0036810726176482278, "phrase": "daunting_task"}, {"score": 0.003312901888725435, "phrase": "code_level"}, {"score": 0.0032609360162842767, "phrase": "try-catch_construct"}, {"score": 0.0031428202743657057, "phrase": "software_architecture_level"}, {"score": 0.003061072337623773, "phrase": "novel_approach"}, {"score": 0.0029814443878969973, "phrase": "architecture_description_language"}, {"score": 0.002640947693258573, "phrase": "domain-specific_architectural_pattern"}, {"score": 0.0023516185395256505, "phrase": "functional_components"}, {"score": 0.0021049977753042253, "phrase": "customized_programming_frameworks"}], "paper_keywords": ["Design", " Languages", " Domain-Specific Languages", " Architecture Description Languages", " Exception", " Pervasive Computing"], "paper_abstract": "The challenging nature of error handling constantly escalates as a growing number of environments consists of networked devices and software components. In these environments, errors cover a uniquely large spectrum of situations related to each layer ranging from hardware to distributed platforms, to software components. Handling errors becomes a daunting task for programmers, whose outcome is unpredictable. Scaling up error handling requires to raise the level of abstraction beyond the code level and the try-catch construct, approaching error handling at the software architecture level. We propose a novel approach that relies on an Architecture Description Language (ADL), which is extended with error-handling declarations. To further raise the level of abstraction, our approach revolves around a domain-specific architectural pattern commonly used in pervasive computing. Error handling is decomposed into components dedicated to platform-wide, error-recovery strategies. At the application level, descriptions of functional components include declarations dedicated to error handling. We have implemented a compiler for an ADL extended with error-handling declarations. It produces customized programming frameworks that drive and support the programming of error handling. Our approach has been validated with a variety of applications for building automation.", "paper_title": "A Domain-Specific Approach to Architecturing Error Handling in Pervasive Computing", "paper_id": "WOS:000286595800004"}