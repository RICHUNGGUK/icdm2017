{"auto_keywords": [{"score": 0.04588063875596668, "phrase": "gmres"}, {"score": 0.0423244061485501, "phrase": "program"}, {"score": 0.03989322586472932, "phrase": "distributed_program"}, {"score": 0.039689036599936466, "phrase": "test_data"}, {"score": 0.0353210205297976, "phrase": "good_scaling_behavior"}, {"score": 0.027837213759102888, "phrase": "picpanther"}, {"score": 0.00481495049065317, "phrase": "relativistic_moment"}, {"score": 0.004764004403553372, "phrase": "cell_method"}, {"score": 0.004671992609009551, "phrase": "electromagnetic_relativistic_moment"}, {"score": 0.004598027492787762, "phrase": "cartesian_geometry"}, {"score": 0.0045817497454044565, "phrase": "noguchi_et_al"}, {"score": 0.004517210371632577, "phrase": "particular_care"}, {"score": 0.004359794046948005, "phrase": "field_solver"}, {"score": 0.0043289723873340255, "phrase": "newton-krylov_iteration"}, {"score": 0.004305998601462116, "phrase": "particle_pusher"}, {"score": 0.004290750226330348, "phrase": "drifting_maxwellian_problem_setups"}, {"score": 0.0041780882724537, "phrase": "code's_numerical_and_computational_performance"}, {"score": 0.004119211418949265, "phrase": "supermuc_system"}, {"score": 0.004068372389535805, "phrase": "large-scale_production_runs"}, {"score": 0.004018158280364063, "phrase": "picpanther_catalogue"}, {"score": 0.003933508945770709, "phrase": "cpc_program_library"}, {"score": 0.0039195744361570075, "phrase": "queen's_university"}, {"score": 0.0039056896765238165, "phrase": "belfast"}, {"score": 0.0038918527536981897, "phrase": "n._ireland"}, {"score": 0.003864326375679274, "phrase": "standard_cpc"}, {"score": 0.0036315956015261905, "phrase": "tar.gz_programming_language"}, {"score": 0.003505011822362085, "phrase": "linux"}, {"score": 0.0033975096029650875, "phrase": "interface"}, {"score": 0.003364704166115746, "phrase": "supermuc"}, {"score": 0.0033054920459613018, "phrase": "simulation_size"}, {"score": 0.0032415581513315925, "phrase": "particle_classification"}, {"score": 0.003218616329055897, "phrase": "external_routines"}, {"score": 0.002966137448567168, "phrase": "kinetic_simulations"}, {"score": 0.0029556196971140584, "phrase": "collisionless_plasma"}, {"score": 0.0029242890314817777, "phrase": "smallest_scales"}, {"score": 0.0028474035592052052, "phrase": "courant-friedrichs-lewy_condition"}, {"score": 0.00282222565980164, "phrase": "explicit_algorithms"}, {"score": 0.0028122167718577134, "phrase": "large_amounts"}, {"score": 0.002802243280204775, "phrase": "computational_power"}, {"score": 0.0027577972695911825, "phrase": "implicit_algorithms"}, {"score": 0.00261001810800373, "phrase": "relativistic_moment_implicit_particle-in-cell_method"}, {"score": 0.002559501330352064, "phrase": "gmres_algorithm"}, {"score": 0.0025368627027981634, "phrase": "sparse_matrices"}, {"score": 0.0025055037815033725, "phrase": "implicit_equation"}, {"score": 0.0024745315355872407, "phrase": "robust_newton-krylov_scheme"}, {"score": 0.0024482880604224377, "phrase": "simple_domain_decomposition"}, {"score": 0.0024309468400078864, "phrase": "good_scalability"}, {"score": 0.002396631129497313, "phrase": "euclidean_geometries"}, {"score": 0.002333586381274878, "phrase": "advanced_numerical_techniques"}, {"score": 0.0023170588091582373, "phrase": "newton-krylov"}, {"score": 0.0022965565568688396, "phrase": "relativistic_versions"}, {"score": 0.002260112998123604, "phrase": "pic_code"}, {"score": 0.002135146725817984, "phrase": "problem_size"}, {"score": 0.0021275693314553143, "phrase": "cpu_count"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Particle in cell", " Implicit moment", " Relativistic implicit moment", " Particle mesh", " Newton-Krylov", " GMRES"], "paper_abstract": "A three-dimensional, parallelized implementation of the electromagnetic relativistic moment implicit particle-in-cell method in Cartesian geometry (Noguchi et al., 2007) is presented. Particular care was taken to keep the C++11 codebase simple, concise, and approachable. GMRES is used as a field solver and during the Newton-Krylov iteration of the particle pusher. Drifting Maxwellian problem setups are available while more complex simulations can be implemented easily. Several test runs are described and the code's numerical and computational performance is examined. Weak scaling on the SuperMUC system is discussed and found suitable for large-scale production runs. Program summary Program title: PICPANTHER Catalogue identifier: AEVA_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEVA_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 359567 No. of bytes in distributed program, including test data, etc.: 105206138 Distribution format: tar.gz Programming language: C++11. Computer: Program should work on any system with a modern C++11 Compiler (e.g. g++ in GCC 4.7 and later) and MPI, HDF5 implementations. Operating system: Linux / Unix. Has the code been vectorized or parallelized?: Parallelized using the Message Passing Interface, successfully tested on SuperMUC with good scaling behavior. RAM: Variable, depending on simulation size, approximate to 2 kiB per cell, 56 B per particle Classification: 19.3. External routines: Eigen3 (header files, http://eigen.tuxfamily.org, tested with versions 3.2.1, 3.2.2), MPI2 (e.g. OpenMPI, http://open-mpi.org, tested with version 1.8.1), HDF5 1.8 (http://hdfgroup.org/HDF5, tested with version 1.8.13) Nature of problem: Kinetic simulations of collisionless plasma mostly need to resolve the smallest scales in a plasma, limiting the problem domains that can be tackled. The Courant-Friedrichs-Lewy condition poses further problems. Explicit algorithms require large amounts of computational power to cope with these restrictions. Implementations of implicit algorithms, on the other hand, are very complex. Very few implicit codes are openly available and approachable. Fully relativistic, three-dimensional electromagnetic implicit PiC codes in particular are rare in general. Solution method: PICPANTHER implements the relativistic moment implicit particle-in-cell method. The implicit electric field equation is solved using the GMRES algorithm with operators represented as sparse matrices. For each particle, the implicit equation of motion is solved via a robust Newton-Krylov scheme. Parallelization is achieved using simple domain decomposition, resulting in good scalability. Restrictions: PICPANTHER only allows for Euclidean geometries. Currently, only periodic boundary conditions are provided. Unusual features: PICPANTHER makes use of advanced numerical techniques (GMRES, Newton-Krylov) to implicitly solve relativistic versions of the movement and field equations of a PiC code. It was designed to be simple and concise, using advanced C++11 language features. Moreover, it is parallelized and exhibits good scaling behavior. Running time: Minutes to days, depending on problem size and CPU count. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "PICPANTHER: A simple, concise implementation of the relativistic moment implicit particle-in-cell method", "paper_id": "WOS:000348261300021"}