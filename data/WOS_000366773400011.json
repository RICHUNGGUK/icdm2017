{"auto_keywords": [{"score": 0.049561472167574526, "phrase": "sequence_arguments"}, {"score": 0.011134348751070942, "phrase": "right_arrow"}, {"score": 0.00481495049065317, "phrase": "function_evaluation"}, {"score": 0.0047113960612140335, "phrase": "specialized_data_structures"}, {"score": 0.004437910956996051, "phrase": "computational_results"}, {"score": 0.004135010810625326, "phrase": "non-decreasing_order"}, {"score": 0.004024072318264299, "phrase": "greatest_dependence"}, {"score": 0.0038527044625533574, "phrase": "symmetric_functions"}, {"score": 0.0037493114715625784, "phrase": "partial_derivatives"}, {"score": 0.003648683020392928, "phrase": "corresponding_component_value_increases"}, {"score": 0.0034742854447532678, "phrase": "exact_values"}, {"score": 0.0033262524445013303, "phrase": "tight_enough_net"}, {"score": 0.002934764205541183, "phrase": "close_approximation"}, {"score": 0.0027491084541806823, "phrase": "more-numerous_partial-derivative_values"}, {"score": 0.002675252546913683, "phrase": "new_data_structure"}, {"score": 0.0025472634689904772, "phrase": "array_implementation"}, {"score": 0.0024653491388223546, "phrase": "grid_values"}, {"score": 0.00230932021677234, "phrase": "single_index_lookup"}, {"score": 0.00217496508306238, "phrase": "natural_application"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data structures", " Memoization", " Sequences", " Metrics", " Topology", " Machine learning", " Cloud computing"], "paper_abstract": "This paper proposes strategies for maintaining a database of computational results of functions f on sequence arguments X, where X is sorted in non-decreasing order and f() has greatest dependence on the first few terms of X. This scenario applies also to symmetric functions f, where the partial derivatives approach zero as the corresponding component value increases. The goal is to pre-compute exact values f((x) over right arrow) on a tight enough net of sequence arguments, so that given any other sequence X, a neighboring sequence (u) over right arrow in the net giving a close approximation can be efficiently found. Our scheme avoids pre-computing the more-numerous partial-derivative values. It employs a new data structure that combines ideas of a trie and an array implementation of a heap, representing grid values compactly in the array, yet still allowing access by a single index lookup rather than pointer jumping. We demonstrate good size/approximation performance in a natural application. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Approximation of function evaluation over sequence arguments via specialized data structures", "paper_id": "WOS:000366773400011"}