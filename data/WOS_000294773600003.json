{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unit_tests"}, {"score": 0.039150156501511525, "phrase": "legacy_systems"}, {"score": 0.004769444094319619, "phrase": "legacy_software_systems"}, {"score": 0.004724365740062236, "phrase": "test-driven_development"}, {"score": 0.00467973576986645, "phrase": "tdd"}, {"score": 0.00459165923324494, "phrase": "software_development_practice"}, {"score": 0.004441517985511521, "phrase": "implementation_code"}, {"score": 0.004399525320473839, "phrase": "recent_studies"}, {"score": 0.004155742403177802, "phrase": "pre-release_defects"}, {"score": 0.003962899903266524, "phrase": "new_development"}, {"score": 0.0038332390893263844, "phrase": "tdd-like_practices"}, {"score": 0.0037969755088553326, "phrase": "already-implemented_code"}, {"score": 0.0035189125111685805, "phrase": "tdm"}, {"score": 0.003355515315708125, "phrase": "tdm_approach"}, {"score": 0.003307988966112615, "phrase": "software_development"}, {"score": 0.0032766780632972363, "phrase": "testing_managers"}, {"score": 0.0032149396890830575, "phrase": "limited_resources"}, {"score": 0.003036595866130994, "phrase": "development_history"}, {"score": 0.002937153116494391, "phrase": "prioritized_list"}, {"score": 0.002657890175649468, "phrase": "legacy_system"}, {"score": 0.002326304140277375, "phrase": "function_size"}, {"score": 0.002304263635960015, "phrase": "modification_frequency"}, {"score": 0.0022824314760583834, "phrase": "bug_fixing_frequency"}, {"score": 0.0022076314894741394, "phrase": "unit_test_writing_efforts"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["unit testing", " testing legacy systems", " test driven maintenance", " software quality"], "paper_abstract": "Test-driven development (TDD) is a software development practice that prescribes writing unit tests before writing implementation code. Recent studies have shown that TDD practices can significantly reduce the number of pre-release defects. However, most TDD research thus far has focused on new development. We investigate the adaptation of TDD-like practices for already-implemented code, in particular legacy systems. We call such an adaptation 'Test-driven maintenance' (TDM). In this paper, we present a TDM approach that assists software development and testing managers to use the limited resources they have for testing legacy systems efficiently. The approach leverages the development history of a project to generate a prioritized list of functions that managers should focus their unit test writing resources on. The list is updated dynamically as the development of the legacy system progresses. We evaluate our approach on two large software systems: a large commercial system and the Eclipse Open Source Software system. For both systems, our findings suggest that heuristics based on the function size, modification frequency and bug fixing frequency should be used to prioritize the unit test writing efforts for legacy systems. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Prioritizing the creation of unit tests in legacy software systems", "paper_id": "WOS:000294773600003"}