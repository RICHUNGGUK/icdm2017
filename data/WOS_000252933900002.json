{"auto_keywords": [{"score": 0.034605019542757486, "phrase": "register_machine"}, {"score": 0.029540288343682004, "phrase": "vm"}, {"score": 0.004815591037658522, "phrase": "stack"}, {"score": 0.004735254735115024, "phrase": "virtual_machines"}, {"score": 0.004522796947899013, "phrase": "architecture-neutral_format"}, {"score": 0.004319830179921363, "phrase": "long-running_question"}, {"score": 0.004230647887289703, "phrase": "vms"}, {"score": 0.004160531596936783, "phrase": "stack_architecture"}, {"score": 0.00390792986752692, "phrase": "existing_work"}, {"score": 0.003859273279966873, "phrase": "virtual_stack"}, {"score": 0.0038271712887391015, "phrase": "virtual_register_architectures"}, {"score": 0.003376369479008885, "phrase": "executed_vm_instructions"}, {"score": 0.0033204052817782464, "phrase": "bytecode_size"}, {"score": 0.0031712256091350316, "phrase": "corresponding_stack"}, {"score": 0.003066945490483524, "phrase": "fully_functional_virtual-register_implementation"}, {"score": 0.0030288951017166787, "phrase": "java"}, {"score": 0.0029169358750531942, "phrase": "intel"}, {"score": 0.0028685338290027527, "phrase": "powerpc"}, {"score": 0.0028462203928322698, "phrase": "alpha"}, {"score": 0.0025409639091476363, "phrase": "experimental_results"}, {"score": 0.0024883835349005863, "phrase": "additional_optimizations"}, {"score": 0.0024573577356299765, "phrase": "register_allocation"}, {"score": 0.00241658945942583, "phrase": "redundant_heap_loads"}, {"score": 0.002337066031028783, "phrase": "switch_dispatch"}, {"score": 0.0023079225317714815, "phrase": "average_speedup"}, {"score": 0.0022601535748259785, "phrase": "corresponding_stack_machine"}, {"score": 0.0021049977753042253, "phrase": "equivalent_stack-based_vm."}], "paper_keywords": ["performance", " language", " interpreter", " virtual machine", " register architecture", " stack architecture"], "paper_abstract": "Virtual machines (VMs) enable the distribution of programs in an architecture-neutral format, which can easily be interpreted or compiled. A long-running question in the design of VMs is whether a stack architecture or register architecture can be implemented more efficiently with an interpreter. We extend existing work on comparing virtual stack and virtual register architectures in three ways. First, our translation from stack to register code and optimization are much more sophisticated. The result is that we eliminate an average of more than 46% of executed VM instructions, with the bytecode size of the register machine being only 26% larger than that of the corresponding stack one. Second, we present a fully functional virtual-register implementation of the Java virtual machine (JVM), which supports Intel, AMD64, PowerPC and Alpha processors. This register VM supports inline-threaded, direct-threaded, token-threaded, and switch dispatch. Third, we present experimental results on a range of additional optimizations such as register allocation and elimination of redundant heap loads. On the AMD64 architecture the register machine using switch dispatch achieves an average speedup of 1.48 over the corresponding stack machine. Even using the more efficient inline-threaded dispatch, the register VM achieves a speedup of 1.15 over the equivalent stack-based VM.", "paper_title": "Virtual machine showdown: Stack versus registers", "paper_id": "WOS:000252933900002"}