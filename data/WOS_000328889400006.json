{"auto_keywords": [{"score": 0.04564939500308455, "phrase": "bloom"}, {"score": 0.034844374530298934, "phrase": "bloom_filters"}, {"score": 0.00481495049065317, "phrase": "space_lower_bound_for_dynamic_approximate_membership_data_structures._an_approximate_membership_data_structure"}, {"score": 0.0046352930395962685, "phrase": "membership_queries"}, {"score": 0.004540126719762935, "phrase": "small_false_positive_error_rate"}, {"score": 0.004477765573115626, "phrase": "false_negative_errors"}, {"score": 0.004266141613620429, "phrase": "numerous_applications"}, {"score": 0.004207527897084009, "phrase": "distributed_systems"}, {"score": 0.004178522455099832, "phrase": "database_systems"}, {"score": 0.003994780550602818, "phrase": "bloom_filter"}, {"score": 0.0038190873308414333, "phrase": "set_s"}, {"score": 0.0035884582625234297, "phrase": "constant_factor"}, {"score": 0.003336875060853387, "phrase": "important_open_problem"}, {"score": 0.002997269132281551, "phrase": "iterative_insertions"}, {"score": 0.0028161281608563267, "phrase": "static_data_structures"}, {"score": 0.0027773810175217273, "phrase": "entire_set"}, {"score": 0.002538164420139397, "phrase": "space_requirements"}, {"score": 0.0025119200240696824, "phrase": "dynamic_approximate_membership_data_structure"}, {"score": 0.002392980687386204, "phrase": "false_positive_error_rate"}, {"score": 0.002179234170770192, "phrase": "information-theoretic_lower"}, {"score": 0.0021269997368140066, "phrase": "dynamic_data_structures"}, {"score": 0.0021049977753042253, "phrase": "constant_error_rate"}], "paper_keywords": ["Bloom filters", " dynamic data structures", " lower bounds"], "paper_abstract": "An approximate membership data structure is a randomized data structure representing a set which supports membership queries. It allows for a small false positive error rate but has no false negative errors. Such data structures were first introduced by Bloom in the 1970s and have since had numerous applications, mainly in distributed systems, database systems, and networks. The algorithm of Bloom (known as a Bloom filter) is quite effective: it can store an approximation of a set S of size n by using only approximate to 1.44n log(2)(1/epsilon) bits while having false positive error epsilon. This is within a constant factor of the information-theoretic lower bound of n log(2)(1/epsilon) for storing such sets. Closing this gap is an important open problem, as Bloom filters are widely used in situations where storage is at a premium. Bloom filters have another property: they are dynamic. That is, they support the iterative insertions of up to n elements. In fact, if one removes this requirement, there exist static data structures that receive the entire set at once and can almost achieve the information-theoretic lower bound; they require only (1 + o(1))n log(2)(1/epsilon) bits. Our main result is a new lower bound for the space requirements of any dynamic approximate membership data structure. We show that for any constant epsilon > 0, any such data structure that achieves false positive error rate of epsilon must use at least C(e) . n log(2)(1/epsilon) memory bits, where C(epsilon) > 1 depends only on e. This shows that the information-theoretic lower bound cannot be achieved by dynamic data structures for any constant error rate.", "paper_title": "A SPACE LOWER BOUND FOR DYNAMIC APPROXIMATE MEMBERSHIP DATA STRUCTURES", "paper_id": "WOS:000328889400006"}