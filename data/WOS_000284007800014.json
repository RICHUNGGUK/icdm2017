{"auto_keywords": [{"score": 0.04480024954324635, "phrase": "shortest_path"}, {"score": 0.028651243774159185, "phrase": "unnecessary_node_visits"}, {"score": 0.0048153101397556825, "phrase": "border"}, {"score": 0.0046859752697029355, "phrase": "shortest_path_computations"}, {"score": 0.004490212943845175, "phrase": "location-based_services"}, {"score": 0.004455522544774728, "phrase": "lbs"}, {"score": 0.0038148090091532933, "phrase": "neighboring_nodes"}, {"score": 0.003770633265791941, "phrase": "heuristic_function"}, {"score": 0.003726967166630926, "phrase": "minimum_cost_node"}, {"score": 0.0035989687070420977, "phrase": "pruning_method"}, {"score": 0.003408512155673968, "phrase": "unnecessary_exploration"}, {"score": 0.0033690254452595865, "phrase": "search_space"}, {"score": 0.003304224820203298, "phrase": "shortest_paths"}, {"score": 0.00326594229173048, "phrase": "node_pairs"}, {"score": 0.003093054709625219, "phrase": "shortest_path_container"}, {"score": 0.0026272523687965615, "phrase": "poor_performance"}, {"score": 0.0025766822940260963, "phrase": "unnecessary_nodes"}, {"score": 0.002536926192232391, "phrase": "container_increases"}, {"score": 0.0024025371556472557, "phrase": "new_border_line-based_pruning_scheme"}, {"score": 0.00227525089435209, "phrase": "extensive_experiments"}, {"score": 0.002188472974132732, "phrase": "optimal_number"}, {"score": 0.0021715177915174375, "phrase": "border_lines"}], "paper_keywords": ["Dijkstra's algorithm", " path-finding", " shortest path container", " pruning method", " minimum bounding rectangle", " convex hull", " border-line"], "paper_abstract": "With the progress of IT and mobile positioning technologies, various types of location-based services (LBS) have been proposed and implemented. Finding a shortest path between two nodes is one of the most fundamental tasks in many LBS related applications. So far, there have been many research efforts on the shortest path finding problem. For instance, A* algorithm estimates neighboring nodes using a heuristic function and selects minimum cost node as the closest one to the destination. Pruning method, which is known to outperform the A* algorithm, improves its routing performance by avoiding unnecessary exploration in the search space. For pruning, shortest paths for all node pairs in a map need to be pre-computed, from which a shortest path container is generated for each edge. The container for an edge consists of all the destination nodes whose shortest path passes through the edge and possibly some unnecessary nodes. These containers are used during routing to prune unnecessary node visits. However, this method shows poor performance as the number of unnecessary nodes included in the container increases. In this paper, we focus on this problem and propose a new border line-based pruning scheme for path routing which can reduce the number of unnecessary node visits significantly. Through extensive experiments on randomly-generated, various complexity of maps, we empirically find out optimal number of border lines for clipping containers and compare its performance with other methods.", "paper_title": "A Border Line-Based Pruning Scheme for Shortest Path Computations", "paper_id": "WOS:000284007800014"}