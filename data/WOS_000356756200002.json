{"auto_keywords": [{"score": 0.03010239334018282, "phrase": "scalar_core"}, {"score": 0.02488457535589399, "phrase": "compiler_optimization"}, {"score": 0.00481495049065317, "phrase": "data-level_parallelism"}, {"score": 0.0045324756541157574, "phrase": "multimedia_applications"}, {"score": 0.004368037394395782, "phrase": "energy_consumption"}, {"score": 0.004266524955540484, "phrase": "simd"}, {"score": 0.004237925318473508, "phrase": "single-instruction_multiple-data"}, {"score": 0.004056769841308405, "phrase": "available_options"}, {"score": 0.003922685601503529, "phrase": "innovative_architecture"}, {"score": 0.0037930162319613856, "phrase": "data_shuffle"}, {"score": 0.003767599364361092, "phrase": "memory-indexed_accesses"}, {"score": 0.0037297918570822876, "phrase": "data_path"}, {"score": 0.003498968822873231, "phrase": "extra_delays"}, {"score": 0.0034755154823256588, "phrase": "unnecessary_stalls"}, {"score": 0.0033045378860812403, "phrase": "memory_access_instructions"}, {"score": 0.003271361898648331, "phrase": "proposed_vp"}, {"score": 0.0032060168979347243, "phrase": "vhdl"}, {"score": 0.0031526304474505822, "phrase": "fpga"}, {"score": 0.0027929100418926725, "phrase": "distributed_data_shuffle_engines"}, {"score": 0.0027370835853738626, "phrase": "spectacular_impact"}, {"score": 0.002709589081384597, "phrase": "execution_time"}, {"score": 0.0025761937402886954, "phrase": "large_amounts"}, {"score": 0.0024493494346360415, "phrase": "shuffle_engines"}, {"score": 0.0022440691950725614, "phrase": "achieved_speed-ups"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallelism", " Vector processor", " Performance", " Speedup", " Benchmarking"], "paper_abstract": "Taking advantage of DLP (Data-Level Parallelism) is indispensable in most data streaming and multimedia applications. Several architectures have been proposed to improve both the performance and energy consumption for such applications. Superscalar and VLIW (Very Long Instruction Word) processors along with SIMD (Single-Instruction Multiple-Data) and vector processor (VP) accelerators, are among the available options for designers to accomplish their desired requirements. We present an innovative architecture for a VP which separates the path for performing data shuffle and memory-indexed accesses from the data path for executing other vector instructions that access the memory. This separation speeds up the most common memory access operations by avoiding extra delays and unnecessary stalls. In our lane-based VP design, each vector lane uses its own private memory to avoid any stalls during memory access instructions. The proposed VP, which is developed in VHDL and prototyped on an FPGA, serves as a coprocessor for one or more scalar cores. Benchmarking shows that our VP can achieve very high performance. For example, it achieves a larger than 1500-fold speedup in the color space converting benchmark compared to running the code on a scalar core. The inclusion of distributed data shuffle engines across vector lanes has a spectacular impact on the execution time, primarily for applications like FFT (Fast-Fourier Transform) that require large amounts of data shuffling. Compared to running the benchmark on a VP without the shuffle engines, the speedup is 5.92 and 7.33 for the 64-point FFT without and with compiler optimization, respectively. Compared to runs on the scalar core, the achieved speed-ups for this benchmark are 52.07 and 110.45 without and with compiler optimization, respectively. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Modular vector processor architecture targeting at data-level parallelism", "paper_id": "WOS:000356756200002"}