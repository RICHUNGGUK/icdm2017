{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "purely_functional_web-application_language"}, {"score": 0.004481132747216135, "phrase": "dynamic_web_applications"}, {"score": 0.004367581653370531, "phrase": "productivity_benefits"}, {"score": 0.004322967486451877, "phrase": "automatic_storage_management"}, {"score": 0.004235095881928715, "phrase": "verbose_type_annotations"}, {"score": 0.0037632749713937637, "phrase": "similar_language"}, {"score": 0.0035201528214608914, "phrase": "human_development_effort"}, {"score": 0.003143849342926373, "phrase": "web_applications"}, {"score": 0.0030957429853133147, "phrase": "high-level_language"}, {"score": 0.0030327408069772293, "phrase": "native_code"}, {"score": 0.002955782731675529, "phrase": "handwritten_c_code"}, {"score": 0.002910545717767559, "phrase": "source_language"}, {"score": 0.0026126405272417783, "phrase": "coordinated_suite"}, {"score": 0.002585906251354904, "phrase": "relatively_straightforward_program_analyses"}, {"score": 0.002468938912850425, "phrase": "almost-idiomatic_c_code"}, {"score": 0.0024186620196958867, "phrase": "garbage_collection"}, {"score": 0.0023331227492950422, "phrase": "intermediate_values"}, {"score": 0.002250601866422547, "phrase": "production_use"}, {"score": 0.0022275639370573264, "phrase": "commercial_web_sites"}, {"score": 0.0021049977753042253, "phrase": "mainstream_tools"}], "paper_keywords": ["Web programming languages", " pure functional programming", " whole-program optimization"], "paper_abstract": "High-level scripting languages have become tremendously popular for development of dynamic Web applications. Many programmers appreciate the productivity benefits of automatic storage management, freedom from verbose type annotations, and so on. While it is often possible to improve performance substantially by rewriting an application in C or a similar language, very few programmers bother to do so, because of the consequences for human development effort. This paper describes a compiler that makes it possible to have most of the best of both worlds, coding Web applications in a high-level language but compiling to native code with performance comparable to handwritten C code. The source language is Ur/Web, a domain-specific, purely functional, statically typed language for the Web. Through a coordinated suite of relatively straightforward program analyses and algebraic optimizations, we transform Ur/Web programs into almost-idiomatic C code, with no garbage collection, little unnecessary memory allocation for intermediate values, etc. Our compiler is in production use for commercial Web sites supporting thousands of users, and microbenchmarks demonstrate very competitive performance versus mainstream tools.", "paper_title": "An Optimizing Compiler for a Purely Functional Web-Application Language", "paper_id": "WOS:000367255800003"}