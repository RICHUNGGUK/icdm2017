{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "exception_flow"}, {"score": 0.04965786117733892, "phrase": "software_architectures"}, {"score": 0.04780597585803098, "phrase": "exception_handling"}, {"score": 0.029760251058202986, "phrase": "aereal"}, {"score": 0.004407690586271672, "phrase": "software_systems"}, {"score": 0.004161553532799662, "phrase": "exception_handling-related_issues"}, {"score": 0.004070573090297285, "phrase": "software_development"}, {"score": 0.003999217176949845, "phrase": "overall_dependability"}, {"score": 0.003533428121425737, "phrase": "catastrophic_failures"}, {"score": 0.003306559295382181, "phrase": "architectural_elements"}, {"score": 0.0032629585038738856, "phrase": "critical_systems"}, {"score": 0.0032342101452939977, "phrase": "rollback-based_mechanisms"}, {"score": 0.003066945490483524, "phrase": "mechanical_devices"}, {"score": 0.002999823428906084, "phrase": "important_means"}, {"score": 0.002908306074124806, "phrase": "forward-based_manner"}, {"score": 0.0026501241093379786, "phrase": "architectural_components"}, {"score": 0.002615156460073562, "phrase": "different_architectural_styles"}, {"score": 0.002592100731070259, "phrase": "different_policies"}, {"score": 0.0022696277881969896, "phrase": "financial_application"}, {"score": 0.0022396694076443446, "phrase": "control_system"}, {"score": 0.002219916677664081, "phrase": "case_studies"}, {"score": 0.0021809311689473493, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["exception handling", " software architecture", " architecture description languages", " verification", " alloy"], "paper_abstract": "In recent years, various approaches combining software architectures and exception handling have been proposed for increasing the dependability of software systems. This conforms with the idea supported by some authors that addressing exception handling-related issues since early phases of software development may improve the overall dependability of a system. By systematically designing the mechanism responsible for rendering a system reliable, developers increase the probability of the system being able to avoid catastrophic failures at runtime. This paper addresses the problem of describing how exceptions flow amongst architectural elements. In critical systems where rollback-based mechanisms might not be available, such as systems that interact with mechanical devices, exception handling is an important means for recovering from errors in a forward-based manner. We present a framework, named Aereal, that supports the description and analysis of exceptions that flow between architectural components. Since different architectural styles have different policies for exception flow, Aereal makes it possible to specify rules on how exceptions flow in a given style and to check for violations of these rules. We use a financial application and a control system as case studies to validate the proposed approach. (C) 2006 Published by Elsevier Inc.", "paper_title": "Specification of exception flow in software architectures", "paper_id": "WOS:000241173200005"}