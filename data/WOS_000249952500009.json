{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "buffer"}, {"score": 0.004696608876994947, "phrase": "memory_space_optimization"}, {"score": 0.0046269981365987915, "phrase": "today's_embedded_systems"}, {"score": 0.004446349752828045, "phrase": "major_factor"}, {"score": 0.004126349202545883, "phrase": "embedded_multimedia_applications"}, {"score": 0.0040854526743211396, "phrase": "temporary_multi-dimensional_arrays"}, {"score": 0.003945467978172845, "phrase": "intermediate_results"}, {"score": 0.003906357144047631, "phrase": "multimedia_processing"}, {"score": 0.0037350832473790007, "phrase": "new_technique"}, {"score": 0.003281186608301359, "phrase": "temporary_arrays"}, {"score": 0.003152915289414825, "phrase": "live_data"}, {"score": 0.003014576010931602, "phrase": "lower_size"}, {"score": 0.0028253682745674608, "phrase": "buffer_allocation_step"}, {"score": 0.0027284410545226306, "phrase": "register_allocation_step"}, {"score": 0.0026612444314342023, "phrase": "data_reuse"}, {"score": 0.002634830238219976, "phrase": "internal_loops"}, {"score": 0.0025317627242523104, "phrase": "multimedia_applications"}, {"score": 0.002457110101089137, "phrase": "loop_nests"}, {"score": 0.0023727863021828547, "phrase": "unix_environment"}, {"score": 0.0023259039577313294, "phrase": "stepnp_simulator"}, {"score": 0.0021798257311714665, "phrase": "significant_reduction"}, {"score": 0.0021568248335195606, "phrase": "tlb"}, {"score": 0.002126111716875142, "phrase": "data_cache"}], "paper_keywords": ["data locality", " program transformation", " memory optimization", " memory hierarchy"], "paper_abstract": "In today's embedded systems, memory hierarchy is rapidly becoming a major factor in terms of power, performance and area. This is especially true for embedded multimedia applications using temporary multi-dimensional arrays that are typically used to store intermediate results during multimedia processing. In this paper, we propose a new technique that optimizes the use of the cache and the registers. It consists in combining buffer and register allocation to reduce the size of the temporary arrays. Firstly we use the concept of live data to replace each array by a buffer of lower size. Then we replace references to these buffers by registers. The buffer allocation step keeps only useful data in memory and the register allocation step allows taking advantage of data reuse in internal loops. Codes considered in this paper are multimedia applications structured as a sequence of loop nests. The experiments are made on Unix environment and on the StepNP simulator (MPSoC platform of STMicroelctronics). They show that our technique yields significant reduction of the number of data cache and TLB misses.", "paper_title": "Buffer and register allocation for memory space optimization", "paper_id": "WOS:000249952500009"}