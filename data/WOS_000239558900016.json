{"auto_keywords": [{"score": 0.032286022262453515, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "interactive_applications"}, {"score": 0.00470325458481566, "phrase": "application_domains"}, {"score": 0.004551199992546761, "phrase": "primary_task"}, {"score": 0.004466519142879166, "phrase": "external_actions"}, {"score": 0.004301834610818624, "phrase": "explicit_programming_language_support"}, {"score": 0.004009175817816061, "phrase": "novel_control"}, {"score": 0.003916098498242888, "phrase": "interactive_logic"}, {"score": 0.003598492288058048, "phrase": "interactive_programming"}, {"score": 0.00351491577968631, "phrase": "event-driven_style"}, {"score": 0.0034657012607680203, "phrase": "state_design_pattern"}, {"score": 0.003369322866499541, "phrase": "multiple_handlers"}, {"score": 0.003125175084962886, "phrase": "responderj"}, {"score": 0.0028986672783671147, "phrase": "additional_abilities"}, {"score": 0.002778529097886437, "phrase": "existing_features"}, {"score": 0.00257708070026329, "phrase": "polyglot_compiler"}, {"score": 0.0025053520095236694, "phrase": "responderj's_utility"}, {"score": 0.0022168460543913787, "phrase": "control_logic"}, {"score": 0.002196077907454079, "phrase": "jdom"}, {"score": 0.0021049977753042253, "phrase": "xml_files"}], "paper_keywords": [""], "paper_abstract": "A variety of application domains are interactive in nature: a primary task involves responding to external actions. In this paper, we introduce explicit programming language support for interactive programming, via the concept of a responder. Responders include a novel control construct that allows the interactive logic of an application to be naturally and modularly expressed. In contrast, the standard approaches to interactive programming, based on the event-driven style or the state design pattern, fragment this logic across multiple handlers or classes, with the control flow among fragments expressed only indirectly. We describe ResponderJ, an extension to Java supporting responders. A responder is simply a class with additional abilities, and these abilities interact naturally with the existing features of classes, including inheritance. We have implemented ResponderJ as an extension to the Polyglot compiler for Java. We illustrate ResponderJ's utility in practice through two case studies: the implementation of a GUI supporting drag-and-drop functionality, and a re-implementation of the control logic of JDOM, a Java library for parsing and manipulating XML files.", "paper_title": "Responders: Language support for interactive applications", "paper_id": "WOS:000239558900016"}