{"auto_keywords": [{"score": 0.03030521684841829, "phrase": "modec"}, {"score": 0.010324665318936764, "phrase": "behavioural_and_creational_motifs"}, {"score": 0.00481495049065317, "phrase": "behavioural_and_creational_design_motifs"}, {"score": 0.0046875099587735825, "phrase": "design_patterns"}, {"score": 0.004637478829869904, "phrase": "design_motifs"}, {"score": 0.004539005582217309, "phrase": "object-oriented_design_problems"}, {"score": 0.004395185177346749, "phrase": "well-structured_designs"}, {"score": 0.004233119608341877, "phrase": "software_maintenance"}, {"score": 0.0038431888954930083, "phrase": "program_comprehension"}, {"score": 0.0032016639006812826, "phrase": "low_precision"}, {"score": 0.0026384167183586015, "phrase": "scenario_diagrams"}, {"score": 0.0025546627686955656, "phrase": "dynamic_analysis"}, {"score": 0.0025273383208209922, "phrase": "constraint_programming"}, {"score": 0.002447101794397243, "phrase": "concept_implementation"}, {"score": 0.0023950275815082297, "phrase": "different_scenarios"}, {"score": 0.0023694065215394593, "phrase": "five_other_java_programs"}, {"score": 0.0023065477756757206, "phrase": "visitor"}, {"score": 0.002209406458446019, "phrase": "better_precision"}, {"score": 0.002174041708084857, "phrase": "state-of-the_art_static_approaches"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["reverse engineering", " design pattern", " identification", " scenario diagrams", " constraint programming", " dynamic analysis"], "paper_abstract": "Design patterns offer design motifs, solutions to object-oriented design problems Design motif. lead to well-structured designs and thus are believed to ease software maintenance However, after use, they are often 'lost' and are consequently of little help during program comprehension and other maintenance activities Therefore, several works proposed design pattern identification approaches to recover occurrences of the motifs These approaches mainly used the structure and organization of classes as input Consequently, they have a low precision when considering behavioural and creational motifs, winch pertain to the assignment of responsibilities and the collaborations among objects at runtime We propose MoDeC, an approach to describe behavioural and creational motifs as collaborations among objects in the form of scenario diagrams We identify these motifs using dynamic analysis and constraint programming Using a proof of-concept implementation of MoDeC and different scenarios for five other Java programs and Builder, Command, and Visitor, we show that MoDeC has a better precision than the state-of-the art static approaches Copyright (C) 2009 John Wiley & Sons, Ltd", "paper_title": "Identification of behavioural and creational design motifs through dynamic analysis", "paper_id": "WOS:000285852400002"}