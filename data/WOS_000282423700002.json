{"auto_keywords": [{"score": 0.04392505276603734, "phrase": "burst_trie"}, {"score": 0.015719716506582538, "phrase": "main_memory"}, {"score": 0.0047472380621488616, "phrase": "fundamental_problem"}, {"score": 0.0047026237903774895, "phrase": "computer_science"}, {"score": 0.004592905436175987, "phrase": "string_data_structures"}, {"score": 0.0044435677598780796, "phrase": "paramount_importance"}, {"score": 0.004339867166576126, "phrase": "in-memory_databases"}, {"score": 0.004299064805926241, "phrase": "text-based_search_engines"}, {"score": 0.004139639802595566, "phrase": "leading_choice"}, {"score": 0.003626626504149897, "phrase": "poor_use"}, {"score": 0.0035925056609681194, "phrase": "cpu_cache"}, {"score": 0.003525220627709056, "phrase": "previous_research"}, {"score": 0.003426640459083931, "phrase": "linked_lists"}, {"score": 0.0033943947596098583, "phrase": "dynamic_arrays"}, {"score": 0.0033465923623290034, "phrase": "cache-conscious_array_burst_trie"}, {"score": 0.003207173639414978, "phrase": "high_instruction_costs"}, {"score": 0.002822712709335093, "phrase": "practical_solution"}, {"score": 0.0027178867838199734, "phrase": "hash_table"}, {"score": 0.0025316905609748135, "phrase": "thorough_experimental_analysis"}, {"score": 0.00247249708860822, "phrase": "large_set"}, {"score": 0.0024146842687658467, "phrase": "alternative_computing_architectures"}, {"score": 0.0021656385587456952, "phrase": "trie-based_data_structure"}, {"score": 0.0021049977753042253, "phrase": "variable-length_strings"}], "paper_keywords": ["Cache-conscious hash table", " Burst trie", " Strings", " In-memory data structures", " Judy trie", " Space-efficient", " Dynamic array", " Scalable"], "paper_abstract": "Storing and retrieving strings in main memory is a fundamental problem in computer science. The efficiency of string data structures used for this task is of paramount importance for applications such as in-memory databases, text-based search engines and dictionaries. The burst trie is a leading choice for such tasks, as it can provide fast sorted access to strings. The burst trie, however, uses linked lists as substructures which can result in poor use of CPU cache and main memory. Previous research addressed this issue by replacing linked lists with dynamic arrays forming a cache-conscious array burst trie. Though faster, this variant can incur high instruction costs which can hinder its efficiency. Thus, engineering a fast, compact, and scalable trie for strings remains an open problem. In this paper, we introduce a novel and practical solution that carefully combines a trie with a hash table, creating a variant of burst trie called HAT-trie. We provide a thorough experimental analysis which demonstrates that for large set of strings and on alternative computing architectures, the HAT-trie-and two novel variants engineered to achieve further space-efficiency-is currently the leading in-memory trie-based data structure offering rapid, compact, and scalable storage and retrieval of variable-length strings.", "paper_title": "Engineering scalable, cache and space efficient tries for strings", "paper_id": "WOS:000282423700002"}