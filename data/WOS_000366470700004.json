{"auto_keywords": [{"score": 0.04872267695171359, "phrase": "concurrent_data_structures"}, {"score": 0.009951496171487325, "phrase": "new_method"}, {"score": 0.009133296173653601, "phrase": "quasi_linearizability"}, {"score": 0.00481495072903252, "phrase": "round-up"}, {"score": 0.004746263721902201, "phrase": "runtime_verification_of_quasi_linearizability"}, {"score": 0.004449045430179066, "phrase": "runtime_checking"}, {"score": 0.004354149483556514, "phrase": "relaxed_consistency_property"}, {"score": 0.004052148727852149, "phrase": "standard_notion"}, {"score": 0.0038256426589560774, "phrase": "parallel_computations"}, {"score": 0.0035858673522839407, "phrase": "runtime_performance"}, {"score": 0.0034343965063429447, "phrase": "quantitative_aspects"}, {"score": 0.003361069456060196, "phrase": "correctness_condition"}, {"score": 0.0032893028281789287, "phrase": "low-level_code"}, {"score": 0.0032190636347671675, "phrase": "concurrent_data_structure_implementation"}, {"score": 0.003150319576043518, "phrase": "difficult_task"}, {"score": 0.003038983069081333, "phrase": "first_fully_automated_method"}, {"score": 0.0026315183701883437, "phrase": "real_violations"}, {"score": 0.0024842242921857705, "phrase": "software_tool"}, {"score": 0.0024136908511423875, "phrase": "llvm_compiler"}, {"score": 0.002362105010110277, "phrase": "systematic_concurrency_testing_tool"}, {"score": 0.00232832698253493, "phrase": "inspect"}, {"score": 0.0021509807762081145, "phrase": "quasi_linearizability_violations"}, {"score": 0.0021049977753042253, "phrase": "source_code"}], "paper_keywords": ["Runtime verification", " linearizability", " serializability", " atomicity", " relaxed consistency", " systematic concurrency testing", " partial order reduction"], "paper_abstract": "We propose a new method for runtime checking of a relaxed consistency property called quasi linearizability for concurrent data structures. Quasi linearizability generalizes the standard notion of linearizability by introducing nondeterminism into the parallel computations quantitatively and then exploiting such nondeterminism to improve the runtime performance. However, ensuring the quantitative aspects of this correctness condition in the low-level code of the concurrent data structure implementation is a difficult task. Our runtime verification method is the first fully automated method for checking quasi linearizability in the C/C++ code of concurrent data structures. It guarantees that all the reported quasi linearizability violations manifested by the concurrent executions are real violations. We have implemented our method in a software tool based on the LLVM compiler and a systematic concurrency testing tool called Inspect. Our experimental evaluation shows that the new method is effective in detecting quasi linearizability violations in the source code implementations of concurrent data structures.", "paper_title": "Round-Up: Runtime Verification of Quasi Linearizability for Concurrent Data Structures", "paper_id": "WOS:000366470700004"}