{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "interaction_mechanisms"}, {"score": 0.012002552856869913, "phrase": "design_language"}, {"score": 0.004123781267600542, "phrase": "web_services_technology"}, {"score": 0.004066083380970254, "phrase": "corba"}, {"score": 0.002995677265350124, "phrase": "implementation_decisions"}, {"score": 0.002564985233317994, "phrase": "design_process"}, {"score": 0.0024818877663889813, "phrase": "first_three_criteria"}, {"score": 0.002447101794397243, "phrase": "qualitative_manner"}, {"score": 0.0023902026696615473, "phrase": "fourth_criteria"}, {"score": 0.0023456351719724957, "phrase": "coloured_petri_nets"}, {"score": 0.0022378223262416305, "phrase": "uml"}], "paper_keywords": ["design language", " design concept", " communication patterns", " middleware"], "paper_abstract": "This paper presents criteria for the adequacy of languages to represent interaction mechanisms. It then uses these criteria to analyse the adequacy of UML. We focus on the interaction mechanisms provided by Web Services technology and by CORBA for request/response, callback, polling and (multicast) message passing. We argue that the criteria for adequacy of a design language are that the language should: (1) be expressive enough to represent the mechanisms; (2) be easy to use when expressing them; (3) be platform independent in the sense that it does not force implementation decisions for a mechanism; and (4) behave corresponding to the mechanisms that it represents. We show that these criteria follow logically from the use of a design language in the design process. For UML we evaluate the first three criteria in a qualitative manner. To evaluate the fourth criteria, we present Coloured Petri Nets that capture the behaviour of both the mechanisms precisely and the UML constructs that represent them. Subsequently, we check the correspondence of their behaviour.", "paper_title": "The adequacy of languages for representing interaction mechanisms", "paper_id": "WOS:000248825200004"}