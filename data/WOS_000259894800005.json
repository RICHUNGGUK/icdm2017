{"auto_keywords": [{"score": 0.027286797735952908, "phrase": "cam"}, {"score": 0.00481495049065317, "phrase": "cam_aspect-oriented_architectures"}, {"score": 0.004762202897268383, "phrase": "model-driven_development"}, {"score": 0.00471003041684707, "phrase": "aspect-oriented_software_development"}, {"score": 0.004312622975366672, "phrase": "base_functionality"}, {"score": 0.004081385289516914, "phrase": "software_lifecycle"}, {"score": 0.0039269071382230444, "phrase": "crosscutting_concerns"}, {"score": 0.00379914165379475, "phrase": "architectural_level"}, {"score": 0.0036553070575015344, "phrase": "architecture_design"}, {"score": 0.003516898780234098, "phrase": "detailed_design"}, {"score": 0.0034024277222012597, "phrase": "software_architects"}, {"score": 0.00327356326590461, "phrase": "specific_ao_architecture_notations"}, {"score": 0.002851790448644913, "phrase": "non-ao_ones"}, {"score": 0.002713604305939145, "phrase": "model-driven_development_approach"}, {"score": 0.0026543514413663893, "phrase": "component-based_architecture_model"}, {"score": 0.0026107601878587816, "phrase": "ao_architecture_model"}, {"score": 0.0022741894748181243, "phrase": "ao_architectures"}, {"score": 0.0021049977753042253, "phrase": "tool_support"}], "paper_keywords": ["Aspect-orientation", " Software architectures", " Model-Driven Development", " Component-based systems"], "paper_abstract": "Aspect-Oriented Software Development promotes the separation of those concerns that cut across several components and/or are tangled with the base functionality of a component, through all phases of the software lifecycle. The benefit of identifying these crosscutting concerns (aspects) at the architectural level in particular is to improve the architecture design and its subsequent evolution, before moving onto detailed design and implementation. However, software architects are not usually experts on using specific AO architecture notations. Therefore, the aim of this paper is to provide support to define and specify aspect-oriented (AO) architectures using non-AO ones as the source. We will use the Model-Driven Development approach to transform a component-based architecture model into an AO architecture model. The CAM (component and aspect model) model and the DAOP-ADL language are the proposals used for modelling and specifying AO architectures. We will show how we automated part of the process and the tool support. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Generating CAM aspect-oriented architectures using Model-Driven Development", "paper_id": "WOS:000259894800005"}