{"auto_keywords": [{"score": 0.03808005742176965, "phrase": "cloned_code"}, {"score": 0.013769246904036345, "phrase": "jsync"}, {"score": 0.010315360163058215, "phrase": "tree_editing_scripts"}, {"score": 0.00481495049065317, "phrase": "evolving_software"}, {"score": 0.00475924837336259, "phrase": "recent_research_results"}, {"score": 0.004622783000449884, "phrase": "code_clone_management"}, {"score": 0.003950453462399077, "phrase": "clone_relation"}, {"score": 0.003904713104101532, "phrase": "code_fragments"}, {"score": 0.003859500298805362, "phrase": "software_systems"}, {"score": 0.0037487368769596814, "phrase": "consistent_changes"}, {"score": 0.0035366216368204182, "phrase": "source_code"}, {"score": 0.003375574760845742, "phrase": "abstract_syntax_trees"}, {"score": 0.0033170847930578473, "phrase": "code_similarity"}, {"score": 0.0032596049901888724, "phrase": "structural_characteristic_vectors"}, {"score": 0.0031845067058084583, "phrase": "code_changes"}, {"score": 0.003093054709625219, "phrase": "key_techniques"}, {"score": 0.002850682396853918, "phrase": "code_clones"}, {"score": 0.0025816953009851072, "phrase": "relevant_clone_synchronization"}, {"score": 0.0023654615987859402, "phrase": "clone_detection"}, {"score": 0.0022708315711029423, "phrase": "correct_detection"}, {"score": 0.0021927323694667694, "phrase": "inconsistent_changes"}, {"score": 0.002129701089817251, "phrase": "correct_recommendations"}, {"score": 0.0021049977753042253, "phrase": "change_propagation"}], "paper_keywords": ["Clone management", " clone consistency analysis", " clone synchronization", " clone merging"], "paper_abstract": "Recent research results suggest a need for code clone management. In this paper, we introduce JSync, a novel clone management tool. JSync provides two main functions to support developers in being aware of the clone relation among code fragments as software systems evolve and in making consistent changes as they create or modify cloned code. JSync represents source code and clones as (sub) trees in Abstract Syntax Trees, measures code similarity based on structural characteristic vectors, and describes code changes as tree editing scripts. The key techniques of JSync include the algorithms to compute tree editing scripts, to detect and update code clones and their groups, to analyze the changes of cloned code to validate their consistency, and to recommend relevant clone synchronization and merging. Our empirical study on several real-world systems shows that JSync is efficient and accurate in clone detection and updating, and provides the correct detection of the defects resulting from inconsistent changes to clones and the correct recommendations for change propagation across cloned code.", "paper_title": "Clone Management for Evolving Software", "paper_id": "WOS:000308999100002"}