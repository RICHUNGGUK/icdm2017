{"auto_keywords": [{"score": 0.0415956281243621, "phrase": "iots_m"}, {"score": 0.00481495049065317, "phrase": "asynchronous_channels"}, {"score": 0.0046364836476864325, "phrase": "input-output_transition_system"}, {"score": 0.003930000775297499, "phrase": "sequence_sigma"}, {"score": 0.003643807817480753, "phrase": "different_sequence"}, {"score": 0.0032529910932231924, "phrase": "fifo_channels"}, {"score": 0.0031920445513574907, "phrase": "implementation_relations"}, {"score": 0.0030446120560494155, "phrase": "implementation_relation"}, {"score": 0.003001721169639501, "phrase": "iots"}, {"score": 0.002822712709335093, "phrase": "correct_implementation"}, {"score": 0.0027050595279115015, "phrase": "appropriate_implementation_relation"}, {"score": 0.0026169435194789772, "phrase": "test_run"}, {"score": 0.002507845411496512, "phrase": "test_generation"}, {"score": 0.00240328454980006, "phrase": "iots_n"}, {"score": 0.002281376328251423, "phrase": "test_case"}, {"score": 0.0021049977753042253, "phrase": "finite_automaton_p"}], "paper_keywords": ["implementation relations", " software testing", " asynchronous communications", " first in first out channels"], "paper_abstract": "This paper concerns testing from an input-output transition system (IOTS) model of a system under test that interacts with its environment through asynchronous first in first out (FIFO) channels. It explores methods for analysing an IOTS without modelling the channels. If IOTS M produces sequence sigma, then, since communications are asynchronous, output can be delayed and so a different sequence might be observed. Thus, M defines a language Tr(M) of sequences that can be observed when interacting with M through FIFO channels. We define implementation relations and equivalences in terms of Tr(M): an implementation relation says how IOTS N must relate to IOTS M in order for N to be a correct implementation of M. It is important to use an appropriate implementation relation since otherwise the verdict from a test run might be incorrect and also because it influences test generation. It transpires that it is undecidable whether IOTS N conforms to IOTS M and so also whether there is a test case that can distinguish between two IOTSs. We also investigate the situation in which we have a finite automaton P and either wish to know whether Tr(M) boolean AND L(P) is empty or whether Tr(M) boolean AND Tr(P) is empty and prove that these are undecidable. In addition, we give conditions under which conformance and intersection are decidable.", "paper_title": "Implementation Relations for Testing Through Asynchronous Channels", "paper_id": "WOS:000326655700004"}