{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "surface_contours"}, {"score": 0.0047709540557306284, "phrase": "accurate_topology"}, {"score": 0.004536029676655286, "phrase": "visible_contours"}, {"score": 0.004332471656145115, "phrase": "surprisingly_difficult_problem"}, {"score": 0.004273196830970426, "phrase": "previous_methods"}, {"score": 0.004195418010131832, "phrase": "topological_errors"}, {"score": 0.0035722806911457545, "phrase": "original_smooth_surface"}, {"score": 0.00338060449446278, "phrase": "exact_visibility"}, {"score": 0.0032585499655442404, "phrase": "contour_consistency"}, {"score": 0.0031699005399973496, "phrase": "topological_equivalence"}, {"score": 0.0030414140732789186, "phrase": "surface_tessellation"}, {"score": 0.0026494723416072316, "phrase": "iterative_mesh_generation_procedure"}, {"score": 0.002329258721870127, "phrase": "smooth_input_surface_representation"}, {"score": 0.002286781334850213, "phrase": "catmull-clark_subdivision_surfaces"}, {"score": 0.002214297250267208, "phrase": "computing_contours"}, {"score": 0.002124461969404541, "phrase": "contour_artifacts"}], "paper_keywords": ["Algorithms", " Non-photorealistic rendering", " line drawing", " silhouettes", " visibility", " geometry processing"], "paper_abstract": "This article introduces a method for accurately computing the visible contours of a smooth 3D surface for stylization. This is a surprisingly difficult problem, and previous methods are prone to topological errors, such as gaps in the outline. Our approach is to generate, for each viewpoint, a new triangle mesh with contours that are topologically equivalent and geometrically close to those of the original smooth surface. The contours of the mesh can then be rendered with exact visibility. The core of the approach is Contour Consistency, a way to prove topological equivalence between the contours of two surfaces. Producing a surface tessellation that satisfies this property is itself challenging; to this end, we introduce a type of triangle that ensures consistency at the contour. We then introduce an iterative mesh generation procedure, based on these ideas. This procedure does not fully guarantee consistency, but errors are not noticeable in our experiments. Our algorithm can operate on any smooth input surface representation; we use Catmull-Clark subdivision surfaces in our implementation. We demonstrate results computing contours of complex 3D objects, on which our method eliminates the contour artifacts of other methods.", "paper_title": "Computing Smooth Surface Contours with Accurate Topology", "paper_id": "WOS:000335009900007"}