{"auto_keywords": [{"score": 0.041023109667051603, "phrase": "computational_time"}, {"score": 0.013908730290203956, "phrase": "high-order_accurate_solutions"}, {"score": 0.00995120029310177, "phrase": "cfd_solver"}, {"score": 0.00481495049065317, "phrase": "correction_procedure"}, {"score": 0.004734448316824488, "phrase": "unit_computing"}, {"score": 0.004707913053935566, "phrase": "computational_fluid_dynamics"}, {"score": 0.004681546328487475, "phrase": "cfd"}, {"score": 0.004603244077348199, "phrase": "useful_tool"}, {"score": 0.004564593196155079, "phrase": "fluid_flow_problems"}, {"score": 0.004488257921051031, "phrase": "problem_size"}, {"score": 0.004207230913063179, "phrase": "required_computational_resources"}, {"score": 0.004010841760769459, "phrase": "memory_requirements"}, {"score": 0.003988345858759183, "phrase": "calculation_time"}, {"score": 0.003965975628742746, "phrase": "accurate_flow_field_prediction"}, {"score": 0.003888659470009222, "phrase": "vast_amounts"}, {"score": 0.0038668462001710314, "phrase": "computational_power"}, {"score": 0.003791455200028588, "phrase": "even_over_dozens"}, {"score": 0.003749033935324126, "phrase": "central_processing_units"}, {"score": 0.0033594249301033604, "phrase": "cfd_problems"}, {"score": 0.0033218213825698417, "phrase": "current_cfd_solvers"}, {"score": 0.003303177222901723, "phrase": "graphical_processing_units"}, {"score": 0.00319348234663792, "phrase": "problems_orders"}, {"score": 0.003131178497790961, "phrase": "identical_accuracy"}, {"score": 0.0030787405733989615, "phrase": "presented_work"}, {"score": 0.003018783482113575, "phrase": "gpu"}, {"score": 0.002959765109527493, "phrase": "complex_problems"}, {"score": 0.0027977092483619896, "phrase": "high-order_spacial_capabilities"}, {"score": 0.002750840531160097, "phrase": "fluid_structures"}, {"score": 0.0027123819773059127, "phrase": "lower-order_methods"}, {"score": 0.0026222551419772867, "phrase": "gpu_architecture"}, {"score": 0.00257831812581194, "phrase": "high-order_correction_procedure"}, {"score": 0.002506715532901322, "phrase": "unified_device_architecture"}, {"score": 0.0024716714823226115, "phrase": "nvidia"}, {"score": 0.0023694065215394593, "phrase": "developed_solver"}, {"score": 0.002323142666222693, "phrase": "exact_solutions"}, {"score": 0.002264982416465872, "phrase": "single_core"}, {"score": 0.0021712592944899997, "phrase": "maximum_speed-up"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["CPR", " High-order methods", " Navier-Stokes equations", " GPU computing", " CUDA"], "paper_abstract": "Computational fluid dynamics (CFD) has long been a useful tool to model fluid flow problems across many engineering disciplines, and while problem size, complexity, and difficulty continue to expand, the demands for robustness and accuracy grow. Furthermore, generating high-order accurate solutions has escalated the required computational resources, and as problems continue to increase in complexity, so will computational needs such as memory requirements and calculation time for accurate flow field prediction. To improve upon computational time, vast amounts of computational power and resources are employed, but even over dozens to hundreds of central processing units (CPUs), the required computational time to compute solutions can be weeks, months, or longer, which is particularly true when generating high-order accurate solutions over large computational domains. One response to lower the computational time for CFD problems is to implement current CFD solvers on graphical processing units (GPUs). GPUs have illustrated the ability to solve problems orders of magnitude faster than their CPU counterparts with identical accuracy. The goal of the presented work is to combine a CFD solver and GPU computing with the intent to solve complex problems at a high-order of accuracy while lowering the computational time required to generate the solution. The CFD solver should have high-order spacial capabilities to evaluate small fluctuations and fluid structures not generally captured by lower-order methods (2nd and 1st order) and be efficient for the GPU architecture. This research combines the high-order Correction Procedure via Reconstruction (CPR) method for explicit time-stepping with compute unified device architecture (CUDA) from NVIDIA to reach these goals. In addition, the study demonstrates accuracy of the developed solver by comparing results with other solvers and exact solutions. Finally, to illustrate speed-ups, a single core Intel Xeon X5650 at 2.67 GHz is compared against a Tesla C2070 and a K20x, where a maximum speed-up of nearly 70x is demonstrated. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "The efficient implementation of correction procedure via reconstruction with graphics processing unit computing", "paper_id": "WOS:000340851500021"}