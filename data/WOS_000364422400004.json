{"auto_keywords": [{"score": 0.049084030038618824, "phrase": "environment-intensive_program"}, {"score": 0.04590268631137087, "phrase": "hidden_paths"}, {"score": 0.00481495049065317, "phrase": "concolic_testing"}, {"score": 0.004185632403886255, "phrase": "broad_spectrum"}, {"score": 0.004127394241838696, "phrase": "different_concolic_testing_systems"}, {"score": 0.0035625556447293804, "phrase": "complete_working_model"}, {"score": 0.003206916619690171, "phrase": "data_input_interface"}, {"score": 0.003010757286626405, "phrase": "fine-grained_taint_analysis"}, {"score": 0.0027100527874262446, "phrase": "new_set"}, {"score": 0.002439308179084911, "phrase": "extensive_experiments"}, {"score": 0.0023551955270737215, "phrase": "complex_and_environmentally_intensive_programs"}, {"score": 0.0021649437083408425, "phrase": "diif"}, {"score": 0.0021049977753042253, "phrase": "hidden_path"}], "paper_keywords": ["concolic testing", " symbolic execution", " taint analysis", " environment-intensive"], "paper_abstract": "Dynamic analysis is frail and insufficient to find hidden paths in environment-intensive program. By analyzing a broad spectrum of different concolic testing systems, we conclude that a number of them cannot handle programs that interact with the environment or require a complete working model. This paper addresses this problem by automatically identifying and modifying outputs of the data input interface function(DIIF). The approach is based on fine-grained taint analysis for detecting and updating the data that interacts with the environment to generate a new set of inputs to execute hidden paths. Moreover, we developed a prototype and conducted extensive experiments using a set of complex and environmentally intensive programs. Finally, the result demonstrates that our approach could identify the DIIF precisely and discover hidden path obviously.", "paper_title": "Scaling Concolic Testing for the Environment-Intensive Program", "paper_id": "WOS:000364422400004"}