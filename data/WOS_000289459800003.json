{"auto_keywords": [{"score": 0.04817552345370084, "phrase": "uml"}, {"score": 0.00481495049065317, "phrase": "unified_modelling_language_tools"}, {"score": 0.004766388573192505, "phrase": "software_modelling_standards"}, {"score": 0.004670722261414736, "phrase": "unified_modelling_language"}, {"score": 0.004553822674247401, "phrase": "complex_visual_languages"}, {"score": 0.00441738161338662, "phrase": "software_systems"}, {"score": 0.00437281181878921, "phrase": "software_tools"}, {"score": 0.004177724522109952, "phrase": "model_constructs"}, {"score": 0.0039310261964323545, "phrase": "standards_specifications"}, {"score": 0.0038131738052230254, "phrase": "software_modelling_tools"}, {"score": 0.003291336101694653, "phrase": "compliance_testing_framework"}, {"score": 0.0030500051941781034, "phrase": "non-compliance_issues"}, {"score": 0.0030038988468808845, "phrase": "java-uml_lightweight_enumerator"}, {"score": 0.002840708910768261, "phrase": "powerful_technology"}, {"score": 0.0027835848648596513, "phrase": "compliance_test_suite"}, {"score": 0.0027554538693034163, "phrase": "modelling_tools"}, {"score": 0.002727606388863445, "phrase": "jule"}, {"score": 0.0027000395818027366, "phrase": "test_cases"}, {"score": 0.0026057256900479026, "phrase": "combinatorial_explosion"}, {"score": 0.0023659694724243764, "phrase": "argouml"}, {"score": 0.0021049977753042253, "phrase": "poseidon_for_uml"}], "paper_keywords": [""], "paper_abstract": "Software modelling standards such as the unified modelling language (UML) provide complex visual languages for producing the artefacts of software systems. Software tools support the production of these artefacts by providing model constructs and their usage rules. Owing to the size and complexity of these standards specifications, establishing the compliance of software modelling tools to the standards can be difficult. As a result, many software tools that advertise standards compliance may fail to live up to their claims. This study presents a compliance testing framework to determine the conditions of compliance of tools and to diagnose the causes of non-compliance issues. The Java-UML lightweight enumerator (JULE) tool realises this framework by providing a powerful technology to create a compliance test suite for modelling tools. JULE generates test cases only up to non-isomorphism to avoid combinatorial explosion. An experiment with respect to the UML 1.4 is presented in this study. The authors test ArgoUML for its compliance with the UML 1.4 specification. The authors also report some findings on four UML 2.x tools, including Eclipse Galileo UML2, Enterprise Architect 7.5, Poseidon for UML 8.0 and MagicDraw 16.6.", "paper_title": "Standards compliance testing for unified modelling language tools", "paper_id": "WOS:000289459800003"}