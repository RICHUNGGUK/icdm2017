{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "polymorphic_type_system"}, {"score": 0.004081385289516914, "phrase": "coercive_subtyping"}, {"score": 0.003459191419478298, "phrase": "dependent_type_theories"}, {"score": 0.0030017207229983385, "phrase": "functional_programming_languages"}, {"score": 0.0027961342030212353, "phrase": "traditional_type_system"}, {"score": 0.002426137929553724, "phrase": "argument_coercions"}, {"score": 0.0023139986108451967, "phrase": "function_coercions"}, {"score": 0.0021049977753042253, "phrase": "corresponding_type_inference_algorithm"}], "paper_keywords": [""], "paper_abstract": "We incorporate the idea of coercive subtyping, a theory of abbreviation for dependent type theories, into the polymorphic type system in functional programming languages. The traditional type system with let-polymorphism is extended with argument coercions and function coercions, and a corresponding type inference algorithm is presented and proved to be sound and complete.", "paper_title": "Coercions in a polymorphic type system", "paper_id": "WOS:000258434500004"}