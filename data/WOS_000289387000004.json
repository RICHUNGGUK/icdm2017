{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "reflective_program_generators"}, {"score": 0.004535124351828787, "phrase": "type_system"}, {"score": 0.004375061788023814, "phrase": "generative_mechanism"}, {"score": 0.00407161650109722, "phrase": "generic_types"}, {"score": 0.003789137457228946, "phrase": "controlled_form"}, {"score": 0.0030171910207671205, "phrase": "code_generation_features"}, {"score": 0.0026126405272417783, "phrase": "static_type_checks"}, {"score": 0.00255068452076921, "phrase": "generator_code"}, {"score": 0.002373472641477602, "phrase": "generalized_notion"}, {"score": 0.0023171750718791713, "phrase": "type_safety"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Type safety", " Generic programming", " Reflection", " Model-based generation"], "paper_abstract": "We describe a type system for a generative mechanism that generalizes the concept of generic types by combining it with a controlled form of reflection. This mechanism makes many code generation tasks possible for which generic types alone would be insufficient. The power of code generation features are carefully balanced with their safety, which enables us to perform static type checks on generator code. This leads to a generalized notion of type safety for generators. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "A type system for reflective program generators", "paper_id": "WOS:000289387000004"}