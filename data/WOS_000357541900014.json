{"auto_keywords": [{"score": 0.04917503970392541, "phrase": "grunwald"}, {"score": 0.00481495049065317, "phrase": "efficient_computation"}, {"score": 0.004518442937844318, "phrase": "adaptive_time_step_memory"}, {"score": 0.00443308765153716, "phrase": "numerical_solutions"}, {"score": 0.004377077848734575, "phrase": "fractional_differential_equations"}, {"score": 0.0041074234667687875, "phrase": "non-local_derivatives"}, {"score": 0.0040042529959108605, "phrase": "previous_time_points"}, {"score": 0.003903663808332582, "phrase": "current_iteration"}, {"score": 0.0036167509502276294, "phrase": "system_history"}, {"score": 0.003459191419478298, "phrase": "high_degrees"}, {"score": 0.003245900020944865, "phrase": "adaptive_time_step_memory_method"}, {"score": 0.0031044458412608084, "phrase": "grunwald-letnikov_fractional_diffusion_derivative"}, {"score": 0.002912963877144772, "phrase": "smaller_errors"}, {"score": 0.0028761045789798103, "phrase": "numerical_simulations"}, {"score": 0.0028397103530211415, "phrase": "sampled_points"}, {"score": 0.002785978280998868, "phrase": "system's_history"}, {"score": 0.002750721367040336, "phrase": "progressively_longer_intervals"}, {"score": 0.0026140878612307536, "phrase": "neighboring_time_points"}, {"score": 0.002548331088496964, "phrase": "progressively_fewer_points"}, {"score": 0.0024527767211457046, "phrase": "temporally_'weighted'_history"}, {"score": 0.0023309080951251335, "phrase": "entire_past"}, {"score": 0.0021049977753042253, "phrase": "computational_efficiency"}], "paper_keywords": ["Fractional calculus", " Subdiffusion", " Neuroscience", " Neural signaling", " Calcium"], "paper_abstract": "Computing numerical solutions to fractional differential equations can be computationally intensive due to the effect of non-local derivatives in which all previous time points contribute to the current iteration. In general, numerical approaches that depend on truncating part of the system history while efficient, can suffer from high degrees of error and inaccuracy. Here we present an adaptive time step memory method for smooth functions applied to the Grunwald-Letnikov fractional diffusion derivative. This method is computationally efficient and results in smaller errors during numerical simulations. Sampled points along the system's history at progressively longer intervals are assumed to reflect the values of neighboring time points. By including progressively fewer points backward in time, a temporally 'weighted' history is computed that includes contributions from the entire past of the system, maintaining accuracy, but with fewer points actually calculated, greatly improving computational efficiency. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Efficient computation of the Grunwald-Letnikov fractional diffusion derivative using adaptive time step memory", "paper_id": "WOS:000357541900014"}