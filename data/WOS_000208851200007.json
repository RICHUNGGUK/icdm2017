{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "trivium"}, {"score": 0.01476164436773058, "phrase": "keystream_generator"}, {"score": 0.007502225619849441, "phrase": "state_update_function"}, {"score": 0.004397000006837371, "phrase": "binary_additive_synchronous_stream_cipher"}, {"score": 0.004126123386192962, "phrase": "final_portfolio"}, {"score": 0.003907212558276185, "phrase": "estream_project"}, {"score": 0.0036663981146086103, "phrase": "bit-based_shift_registers"}, {"score": 0.0034092396400930446, "phrase": "alternate_representation"}, {"score": 0.003287482882222731, "phrase": "word-based_shift_registers"}, {"score": 0.003170060683860338, "phrase": "word_size"}, {"score": 0.0028422946420821075, "phrase": "internal_state_values"}, {"score": 0.0025951294037626174, "phrase": "state_space"}, {"score": 0.0021049977753042253, "phrase": "initialization_process"}], "paper_keywords": ["Trivium", " Stream ciphers", " Binary sequences", " Keystream generators", " Initialization"], "paper_abstract": "Trivium is a keystream generator for a binary additive synchronous stream cipher. It was selected in the final portfolio for the Profile 2 category of the eSTREAM project. The keystream generator is constructed using bit-based shift registers. In this paper we present an alternate representation of Trivium using word-based shift registers, with a word size of three bits. This representation is useful for determining cycles of internal state values. Under this representation it is clear that the state space can be partitioned into subspaces and that over some of these subspaces the state update function is effectively linear. The role of the initialization process is critical in ensuring the states used for generating keystream are updated nonlinearly at some point, as the state update function alone does not provide this.", "paper_title": "State cycles, initialization and the Trivium stream cipher", "paper_id": "WOS:000208851200007"}