{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "parallel_index_generator"}, {"score": 0.03483220185213116, "phrase": "index_generation_functions"}, {"score": 0.004686963264680882, "phrase": "index_generation_function"}, {"score": 0.004562362497952548, "phrase": "multi-valued_logic_function"}, {"score": 0.0034841647157189985, "phrase": "dedicated_hardware"}, {"score": 0.002910545717767559, "phrase": "novel_and_efficient_algorithm"}, {"score": 0.0026362590493392785, "phrase": "parallel_index_generators"}, {"score": 0.0025892330566358503, "phrase": "experimental_results"}, {"score": 0.0025202582748972122, "phrase": "proposed_method"}, {"score": 0.0023033100935570755, "phrase": "index_generator"}, {"score": 0.0022019274077124795, "phrase": "parallelized_implementation"}, {"score": 0.0021049977753042253, "phrase": "new_architecture"}], "paper_keywords": ["logic synthesis", " index generation function"], "paper_abstract": "The index generation function is a multi-valued logic function which checks if the given input vector is a registered or not, and returns its index value if the vector is registered. If the latency of the operation is critical, dedicated hardware is used for implementing the index generation functions. This paper proposes a method implementing the index generation functions using parallel index generator. A novel and efficient algorithm called 'conflict free partitioning' is proposed to synthesize parallel index generators. Experimental results show the proposed method outperforms other existing methods. Also, A novel architecture of index generator which is suitable for parallelized implementation is introduced. A new architecture has advantages in the sense of both area and delay.", "paper_title": "Synthesis Algorithm for Parallel Index Generator", "paper_id": "WOS:000351567100023"}