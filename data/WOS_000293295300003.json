{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "software_maintenance"}, {"score": 0.029697624328862835, "phrase": "repair_plans"}, {"score": 0.004694873827535293, "phrase": "lengthy_and_expensive_phase"}, {"score": 0.004644329185633612, "phrase": "life_cycle"}, {"score": 0.004594326191526569, "phrase": "software_system"}, {"score": 0.004447509888681154, "phrase": "change_propagation_problem"}, {"score": 0.004383766516923386, "phrase": "primary_change"}, {"score": 0.0042436501739199495, "phrase": "new_or_changed_requirement"}, {"score": 0.003849502288990788, "phrase": "desired_consistency_rules"}, {"score": 0.003808024029417427, "phrase": "design_model"}, {"score": 0.0036995846915724977, "phrase": "ocl"}, {"score": 0.003504470784139224, "phrase": "key_inputs"}, {"score": 0.0034417406427881075, "phrase": "underlying_change_propagation_mechanism"}, {"score": 0.0032134045046357876, "phrase": "event-triggered_plans"}, {"score": 0.0031444844772458504, "phrase": "bdi_agent_platforms"}, {"score": 0.003077038060542514, "phrase": "cascading_nature"}, {"score": 0.0030548779592763824, "phrase": "change_propagation"}, {"score": 0.00283158908387463, "phrase": "new_method"}, {"score": 0.0027808699346360656, "phrase": "ocl_consistency_constraints"}, {"score": 0.0024770482478966896, "phrase": "alternative_repair_plans"}, {"score": 0.002337791830793841, "phrase": "account_cascades"}, {"score": 0.0021049977753042253, "phrase": "violated_constraint"}], "paper_keywords": ["Agent-oriented software engineering", " Software maintenance and evolution", " Change propagation"], "paper_abstract": "Software maintenance and evolution is a lengthy and expensive phase in the life cycle of a software system. In this paper we focus on the change propagation problem: given a primary change that is made in order to meet a new or changed requirement, what additional, secondary, changes are needed? We propose a novel, agent-oriented, approach that works by repairing violations of desired consistency rules in a design model. Such consistency constraints are specified using the Object Constraint Language (OCL) and the Unified Modelling Language (UML) metamodel, which form the key inputs to our change propagation framework. The underlying change propagation mechanism of our framework is based on the well-known Belief-Desire-Intention (BDI) agent architecture. Our approach represents change options for repairing inconsistencies using event-triggered plans, as is done in BDI agent platforms. This naturally reflects the cascading nature of change propagation, where each change (primary or secondary) can require further changes to be made. We also propose a new method for generating repair plans from OCL consistency constraints. Furthermore, a given inconsistency will typically have a number of repair plans that could be used to restore consistency, and we propose a mechanism for semi-automatically selecting between alternative repair plans. This mechanism, which is based on a notion of cost, takes into account cascades (where fixing the violation of a constraint breaks another constraint), and synergies between constraints (where fixing the violation of a constraint also fixes another violated constraint). Finally, we report on an evaluation of the approach, covering effectiveness, efficiency and scalability.", "paper_title": "An agent-oriented approach to change propagation in software maintenance", "paper_id": "WOS:000293295300003"}