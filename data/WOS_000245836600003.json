{"auto_keywords": [{"score": 0.03734802881411346, "phrase": "recursive_processes"}, {"score": 0.00481495049065317, "phrase": "dpi._dpi"}, {"score": 0.00470862827326028, "phrase": "distributed_version"}, {"score": 0.004242546312843817, "phrase": "migration_construct"}, {"score": 0.0038224221344037236, "phrase": "recursion_operator"}, {"score": 0.003418186564522323, "phrase": "potentially_infinite_types"}, {"score": 0.0032686865485199806, "phrase": "capability-based_typing_system"}, {"score": 0.0030565692640988585, "phrase": "inductive_types"}, {"score": 0.0024256208351516027, "phrase": "standard_ones"}, {"score": 0.0023021895404322767, "phrase": "co-inductive_types"}, {"score": 0.002217880187104576, "phrase": "significant_migration_overhead"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["DPI-calculus", " recursion", " implementation using replication", " recursive and co-inductive types"], "paper_abstract": "DPI is a distributed version of the PI-CALCULUS, in which processes are explicitly located, and a migration construct may be used for moving between locations. We argue that adding a recursion operator to the language increases significantly its descriptive power. But typing recursive processes requires the use of potentially infinite types. We show that the capability-based typing system of DPI can be extended to co-inductive types so that recursive processes can be successfully supported. We also show that, as in the PI-CALCULUS, recursion can be implemented via iteration. This translation improves on the standard ones by being compositional but still requires co-inductive types and comes with a significant migration overhead in our distributed setting. 2007 Elsevier B.V. All rights reserved.", "paper_title": "Adding recursion to DPI", "paper_id": "WOS:000245836600003"}