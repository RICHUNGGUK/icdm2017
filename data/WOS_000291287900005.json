{"auto_keywords": [{"score": 0.03829477508328845, "phrase": "resource_events"}, {"score": 0.03408522284914619, "phrase": "reachable_processes"}, {"score": 0.03020942633336309, "phrase": "proposed_algorithm"}, {"score": 0.0045959609346817535, "phrase": "current_mpsocs"}, {"score": 0.004490212943845175, "phrase": "future_mpsocs"}, {"score": 0.004106810349956121, "phrase": "application_deadlock"}, {"score": 0.004012271808564447, "phrase": "severe_problem"}, {"score": 0.003935147683802319, "phrase": "application_deadlock_problem"}, {"score": 0.003904713104101532, "phrase": "current_and_future_mpsocs"}, {"score": 0.0038148090091532933, "phrase": "parallel_multi-unit_resource_deadlock_detection_algorithm"}, {"score": 0.003329994649432498, "phrase": "entire_graph"}, {"score": 0.0030572112793962004, "phrase": "node_hopping_mechanism"}, {"score": 0.003033546013625887, "phrase": "bit-wise_computations"}, {"score": 0.002742017872865778, "phrase": "sink_nodes"}, {"score": 0.0025468074858862964, "phrase": "worst_case_run-time"}, {"score": 0.0024592402228499105, "phrase": "single_scheme"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Deadlock detection", " Deadlock detection in hardware", " Multi-unit resource systems", " Chip multiprocessor", " Graph traversing", " Reachability computation", " Parallel algorithm", " Digital logic design", " RTOS", " Real-time embedded systems"], "paper_abstract": "Current MPSoCs typically consist of less than a dozen processing units. Future MPSoCs are likely to integrate many more. With this trend, dozens of applications can be running on an MPSoC concurrently and application deadlock on MPSoCs will become a severe problem. To address the application deadlock problem in current and future MPSoCs, this article proposes a parallel multi-unit resource deadlock detection algorithm, incorporating four contributions: (1) a classification of resource events that enables each category of events to be handled efficiently, (2) a parallel node hopping mechanism that explores the entire graph exponentially in parallel to obtain information about reachable processes of every resource, (3) an innovative hardware implementation of the node hopping mechanism using bit-wise computations, and (4) proofs of correctness and run-time complexity of the proposed algorithm. Based on information about reachable processes as well as sink nodes in the graph, the proposed algorithm detects deadlock in O(1) run-time. Compared with the worst case run-time of any previous algorithm, which employs a single scheme to handle all resource events, ours is considerably reduced to O(log(2)(min(m, n))) when implemented in hardware, where m and n are the number of processes and resources, respectively. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "A parallel multi-unit resource deadlock detection algorithm with O(log(2)(min(m, n))) overall run-time complexity", "paper_id": "WOS:000291287900005"}