{"auto_keywords": [{"score": 0.036399516033805784, "phrase": "accordion"}, {"score": 0.006758355524502466, "phrase": "updated_data"}, {"score": 0.00481495049065317, "phrase": "power-proportional_distributed_data-placement_method"}, {"score": 0.004678681971460014, "phrase": "efficient_big_data_processing"}, {"score": 0.00458997570994803, "phrase": "-proportional_designs"}, {"score": 0.0045317702763072445, "phrase": "current_data_placement_methods"}, {"score": 0.004431673309295777, "phrase": "careful_consideration"}, {"score": 0.004170940184489072, "phrase": "higher_gear"}, {"score": 0.004091820963641547, "phrase": "updated_datasets"}, {"score": 0.004014196517907476, "phrase": "lower_gear"}, {"score": 0.0036826452656927877, "phrase": "large_amount"}, {"score": 0.0036592001010420667, "phrase": "data_reallocation"}, {"score": 0.0036127549845584, "phrase": "system_performance"}, {"score": 0.0034880375790382586, "phrase": "data_placement_method"}, {"score": 0.0034109154088832376, "phrase": "data_replication"}, {"score": 0.003367611042980526, "phrase": "data_layout"}, {"score": 0.003251328737784481, "phrase": "current_methods"}, {"score": 0.0028429935010577975, "phrase": "higher_gears"}, {"score": 0.0027360168758119277, "phrase": "multigear_systems"}, {"score": 0.00266693888510356, "phrase": "active_nodes"}, {"score": 0.0025583777916403437, "phrase": "higher_scalability"}, {"score": 0.0025420718926332615, "phrase": "existing_methods"}, {"score": 0.0024542249391904256, "phrase": "strict_constraint"}, {"score": 0.002324381111188894, "phrase": "practical_environments"}, {"score": 0.0023095631438900728, "phrase": "extensive_empirical_experiments"}, {"score": 0.0022948394240866555, "phrase": "actual_machines"}, {"score": 0.0022729292542096077, "phrase": "accordion_prototype"}, {"score": 0.002244040022860764, "phrase": "hadoop_distributed_file_system"}, {"score": 0.0021049977753042253, "phrase": "existing_method"}], "paper_keywords": ["energy-aware", " power-proportionality", " data-placement", " HDFS"], "paper_abstract": "Power-aware distributed file systems for efficient Big Data processing are increasingly moving towards power-proportional designs. However, current data placement methods for such systems have not given careful consideration to the effect of gear-shifting during operations. If the system wants to shift to a higher gear, it must reallocate the updated datasets that were modified in a lower gear when a subset of the nodes was inactive, but without disrupting the servicing of requests from clients. Inefficient gear-shifting that requires a large amount of data reallocation greatly degrades the system performance. To address this challenge, this paper proposes a data placement method known as Accordion, which uses data replication to arrange the data layout comprehensively and provide efficient gear-shifting. Compared with current methods, Accordion reduces the amount of data transferred, which significantly shortens the period required to reallocate the updated data during gear-shifting then able to improve the performance of the systems. The effect of this reduction is larger with higher gears, so Accordion is suitable for smooth gear-shifting in multigear systems. Moreover, the times when the active nodes serve the requests are well distributed, so Accordion is capable of higher scalability than existing methods based on the I/O throughput performance. Accordion does not require any strict constraint on the number of nodes in the system therefore our proposed method is expected to work well in practical environments. Extensive empirical experiments using actual machines with an Accordion prototype based on the Hadoop Distributed File System demonstrated that our proposed method significantly reduced the period required to transfer updated data, i.e., by 66% compared with an existing method.", "paper_title": "Accordion: An Efficient Gear-Shifting for a Power-Proportional Distributed Data-Placement Method", "paper_id": "WOS:000356590300003"}