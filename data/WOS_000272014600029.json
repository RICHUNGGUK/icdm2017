{"auto_keywords": [{"score": 0.05007772029816952, "phrase": "practical_mpi_programs"}, {"score": 0.03227078104988101, "phrase": "isp"}, {"score": 0.004600389726895716, "phrase": "formal_verification"}, {"score": 0.004548253531664032, "phrase": "mpi_programs"}, {"score": 0.004445739135694758, "phrase": "fixed_test_harness"}, {"score": 0.0043953478557600565, "phrase": "safety_properties"}, {"score": 0.0043208252177835815, "phrase": "verification_models"}, {"score": 0.0038551626276406175, "phrase": "verification_scheduler"}, {"score": 0.003746779951069909, "phrase": "total_feasible_number"}, {"score": 0.0033619033669956317, "phrase": "partial_order_reduction_approach"}, {"score": 0.0032860401904845522, "phrase": "equivalent_interleavings"}, {"score": 0.003193606324727067, "phrase": "verification_tool"}, {"score": 0.003157364507398563, "phrase": "isp."}, {"score": 0.00308610073274614, "phrase": "algorithmic_and_engineering_innovations"}, {"score": 0.0029483516334882862, "phrase": "openmp_parallelization"}, {"score": 0.0024560114164181765, "phrase": "data_re-distribution"}, {"score": 0.002153653728048424, "phrase": "error_traces"}, {"score": 0.0021049977753042253, "phrase": "assertion_violations"}], "paper_keywords": ["Verification", " MPI", " Message Passing Interface", " distributed programming", " model checking", " dynamic partial order reduction"], "paper_abstract": "This paper considers the problem of formal verification of MPI programs operating under a fixed test harness for safety properties without building verification models. In our approach, we directly model-check the MPI/C source code, executing its interleavings with the help of a verification scheduler. Unfortunately, the total feasible number of interleavings is exponential, and impractical to examine even for our modest goals. Our earlier publications formalized and implemented a partial order reduction approach that avoided exploring equivalent interleavings, and presented a verification tool called ISP. This paper presents algorithmic and engineering innovations to ISP, including the use of OpenMP parallelization, that now enables it to handle practical MPI programs, including: (i) ParMETIS - a widely used hypergraph partitioner, and (ii) MADRE - a Memory Aware Data Re-distribution Engine, both developed outside our group. Over these benchmarks, ISP has automatically verified up to 14K lines of MPI/C code, producing error traces of deadlocks and assertion violations within seconds.", "paper_title": "Formal Verification of Practical MPI Programs", "paper_id": "WOS:000272014600029"}