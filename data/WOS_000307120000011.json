{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pert"}, {"score": 0.0046018264570209765, "phrase": "java_object_persistence"}, {"score": 0.00447341965028879, "phrase": "widely_used_technique"}, {"score": 0.004227209809791869, "phrase": "lengthy_computations"}, {"score": 0.0039050245929822354, "phrase": "subsequent_program_executions"}, {"score": 0.0037959868107895053, "phrase": "conventional_persistence_techniques"}, {"score": 0.0036691380448651443, "phrase": "application_contexts"}, {"score": 0.0036073064072936626, "phrase": "persistence_operations"}, {"score": 0.003026127736667187, "phrase": "static_program_analysis"}, {"score": 0.002958281631770322, "phrase": "actual_usage"}, {"score": 0.0029083942467546305, "phrase": "persisted_object"}, {"score": 0.0027170943110836425, "phrase": "pert_runtime"}, {"score": 0.002671263324230699, "phrase": "statically_computed_information"}, {"score": 0.0026113524778702624, "phrase": "tailoring_decisions"}, {"score": 0.002552781867125423, "phrase": "redundant_and_unused_object_states"}, {"score": 0.0024120247307686084, "phrase": "pert-based_optimization"}, {"score": 0.0023445770108033288, "phrase": "conventional_persistence_operations"}, {"score": 0.0022405528759521856, "phrase": "persisted_data"}, {"score": 0.0021049977753042253, "phrase": "application-aware_tailoring"}], "paper_keywords": ["Object persistence", " program analysis", " performance optimization"], "paper_abstract": "Persistence is a widely used technique which allows the objects that represent the results of lengthy computations to outlive the process that creates it in order to considerably speed up subsequent program executions. We observe that conventional persistence techniques usually do not consider the application contexts of the persistence operations, where not all of the object states need to be persisted. Leveraging this observation, we have designed and implemented a framework called Pert, which first performs static program analysis to estimate the actual usage of the persisted object, given the context of its usage in the program. The Pert runtime uses the statically computed information to efficiently make tailoring decisions to prune the redundant and unused object states during the persistence operations. Our evaluation result shows that the Pert-based optimization can speed up the conventional persistence operations by 1 to 45 times. The amount of persisted data is also dramatically reduced, as the result of the application-aware tailoring.", "paper_title": "Pert: The Application-Aware Tailoring of Java Object Persistence", "paper_id": "WOS:000307120000011"}