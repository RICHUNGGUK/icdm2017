{"auto_keywords": [{"score": 0.05007827403782799, "phrase": "read-only_memory"}, {"score": 0.04900136041045404, "phrase": "munro"}, {"score": 0.03949906731411171, "phrase": "storage_cells"}, {"score": 0.026268126080187585, "phrase": "approximate_median"}, {"score": 0.004676055770074893, "phrase": "paterson"}, {"score": 0.004511663118269957, "phrase": "median-finding_problem"}, {"score": 0.004410068751933955, "phrase": "read-only_memory_model"}, {"score": 0.004324802749898957, "phrase": "munro_and_paterson's_deterministic_algorithm"}, {"score": 0.004186325123152709, "phrase": "logarithmic_space"}, {"score": 0.0040796520489958495, "phrase": "raman"}, {"score": 0.003465957803362915, "phrase": "first_study"}, {"score": 0.0032899551003641152, "phrase": "faster_selection_algorithms"}, {"score": 0.0029449743792479433, "phrase": "universe_size"}, {"score": 0.0022838006190016263, "phrase": "binary_trees"}, {"score": 0.0022177498761722773, "phrase": "textbook_algorithm"}, {"score": 0.0021961592899628615, "phrase": "'majority'_problem"}, {"score": 0.00214659338413584, "phrase": "independent_interest"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Selection", " Read-only memory", " Integers", " Centroid of a tree", " Majority finding"], "paper_abstract": "Starting with Munro and Paterson (1980) [13], the selection or median-finding problem has been extensively studied in the read-only memory model and in streaming models. Munro and Paterson's deterministic algorithm and its subsequent refinements require at least polylogarithmic or logarithmic space, whereas the algorithms by Munro and Raman (1996) [14] and Raman and Ramnath (1999) [15] can be made to use just 0(1) storage cells but take 0 (n(1+epsilon)) time for an arbitrarily small constant epsilon > 0. In this paper, we initiate the first study on this problem when the input is a sequence of integers. We show that faster selection algorithms in read-only memory are possible if the input is a sequence of integers. For example, one of our algorithms uses O(1) storage cells and takes O(n lg U)(1) time where U is the universe size. Another algorithm uses O(1) storage cells and takes O(n lg n lg lg U) time. A combination of the two yields an algorithm that uses O(1) words of space and takes O (n lg(1+epsilon) n) time, a bound independent of U. We also describe an O(n)-time algorithm for finding an approximate median using O(lg(epsilon) U) storage cells. All our algorithms are simple and deterministic. Interestingly, one of our algorithms is inspired by 'centroids' of binary trees and finds an approximate median by repeatedly invoking a textbook algorithm for the 'majority' problem. This technique could be of independent interest. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Finding median in read-only memory on integer input", "paper_id": "WOS:000355038600004"}