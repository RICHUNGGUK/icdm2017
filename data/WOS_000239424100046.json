{"auto_keywords": [{"score": 0.05007817464644753, "phrase": "thread_algebra"}, {"score": 0.046314105691988974, "phrase": "pga"}, {"score": 0.004518442937844318, "phrase": "program_algebra"}, {"score": 0.004317848984770719, "phrase": "algebraic_approach"}, {"score": 0.004126123386192962, "phrase": "sequential_programming"}, {"score": 0.003907404214070892, "phrase": "ta"}, {"score": 0.0033175095965171674, "phrase": "simple_language"}, {"score": 0.0031129269142224194, "phrase": "ta_model"}, {"score": 0.0021830553825770097, "phrase": "current_work"}, {"score": 0.0021049977753042253, "phrase": "security_hazard_risk_assessment"}], "paper_keywords": ["PGA", " Program Algebra", " Thread Algebra"], "paper_abstract": "We provide an introduction to Program Algebra (PGA, an algebraic approach to the modeling of sequential programming) and to Thread Algebra (TA). PGA is used as a basis for several low- and higher-level programming languages. As an example we consider a simple language with goto's. Threads in TA model the execution of programs. Threads may be composed with services which model (part of) the execution environment, such as a stack. Finally, we discuss briefly the expressiveness of PGA and allude to current work on multithreading and security hazard risk assessment.", "paper_title": "An introduction to program and thread algebra", "paper_id": "WOS:000239424100046"}