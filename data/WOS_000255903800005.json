{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "k-nn_queries"}, {"score": 0.01240246170948362, "phrase": "main_memory"}, {"score": 0.004784331242964228, "phrase": "high_dimensional_datasets"}, {"score": 0.00475390577915698, "phrase": "similarity_search"}, {"score": 0.00470862827326028, "phrase": "k-nearest_neighbor-k-nn_queries"}, {"score": 0.004560780566066473, "phrase": "content-based_image_retrieval"}, {"score": 0.0044742996274375404, "phrase": "feature_vectors"}, {"score": 0.004403480614319231, "phrase": "dimensionality_sets"}, {"score": 0.004333777641701335, "phrase": "k-nn_search"}, {"score": 0.004306205029641728, "phrase": "disk-resident_indices"}, {"score": 0.004265173275117678, "phrase": "r-tree_family"}, {"score": 0.004157648639294148, "phrase": "index_pages"}, {"score": 0.004131191955939713, "phrase": "high_dimensions"}, {"score": 0.00396326346313272, "phrase": "double_filtering_effect"}, {"score": 0.003875674688691641, "phrase": "clustering_algorithm"}, {"score": 0.003826492478418294, "phrase": "largest_cluster"}, {"score": 0.0037062400890170064, "phrase": "query_point"}, {"score": 0.003465827053421054, "phrase": "ordered-partition-op-tree_main_memory_resident_index"}, {"score": 0.0031895978980118127, "phrase": "contiguous_memory_locations"}, {"score": 0.002925954017425345, "phrase": "single_sequential_access"}, {"score": 0.002907312188714594, "phrase": "disk_benefits"}, {"score": 0.0028887887866517496, "phrase": "higher_data_transfer_rates"}, {"score": 0.0028703830632744133, "phrase": "modern_disk_drives"}, {"score": 0.0027535633837592597, "phrase": "karhunen-loeve_transformation-klt"}, {"score": 0.0025830324526904427, "phrase": "sequential_scans"}, {"score": 0.002485813299166853, "phrase": "shortcut_method"}, {"score": 0.0024620842899061614, "phrase": "euclidean_distances"}, {"score": 0.0024153020042064237, "phrase": "omni-sequential_scan"}, {"score": 0.002346786090713685, "phrase": "clustered_and_persistent_version"}, {"score": 0.0023021895404322767, "phrase": "clustered_version"}, {"score": 0.0022584385508256587, "phrase": "va-file_method"}, {"score": 0.0022084431489676993, "phrase": "elapsed_time"}, {"score": 0.002125292598116514, "phrase": "op-tree_index"}], "paper_keywords": ["content based retrieval", " feature vectors", " nearest neighbor queries", " multidimensional indexing", " feature vectors", " SR-trees", " vector approximation file", " ordered partition index", " principal component analysis", " singular value decomposition", " Karhunen-Loeve transform"], "paper_abstract": "Similarity search implemented via k-nearest neighbor-k-NN queries on multidimensional indices is an extremely useful paradigm for content-based image retrieval. As the dimensionality of feature vectors increases the curse of dimensionality sets in, i.e., the performance of k-NN search of disk-resident indices in the R-tree family degrades rapidly due to the overlap in index pages in high dimensions. This problem is dealt with in this study by utilizing the double filtering effect of clustering and indexing. The clustering algorithm ensures that the largest cluster fits into main memory and that only clusters closest to a query point need to be searched and hence loaded into main memory. We organize the data in each cluster according to the ordered-partition-OP-tree main memory resident index, which is not prone to the curse of dimensionality and highly efficient for processing k-NN queries. We serialize an OP-tree by writing its dynamically allocated nodes into contiguous memory locations, optimize its parameters, and make it persistent by writing it to disk. The time to read and write clusters constituting an OP-tree with a single sequential access to disk benefits from higher data transfer rates of modern disk drives. The performance of the index is further improved by applying the Karhunen-Loeve transformation-KLT to the dataset, since this results in a more efficient computation of distances for k-NN queries. We compare OP-trees and sequential scans with and without a KL-transformation and with and without using a shortcut method in calculating Euclidean distances. A comparison against the OMNI-sequential scan is also reported. We finally compare a clustered and persistent version of the OP-tree against a clustered version of the SR-tree and the VA-file method. CPU time is measured and elapsed time is estimated in this study. It is observed that the OP-tree index outperforms the other two methods and that the improvement increases with the number of dimensions.", "paper_title": "Persistent clustered main memory index for accelerating k-NN queries on high dimensional datasets", "paper_id": "WOS:000255903800005"}