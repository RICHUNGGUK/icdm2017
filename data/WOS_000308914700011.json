{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "web_application_programs"}, {"score": 0.00477513738640734, "phrase": "cross_site"}, {"score": 0.004580933283492972, "phrase": "web_applications"}, {"score": 0.004524220016675624, "phrase": "user_inputs"}, {"score": 0.00446820572467064, "phrase": "web_pages"}, {"score": 0.004394592555435104, "phrase": "state-of-the-art_defensive_coding_methods"}, {"score": 0.004198323646273642, "phrase": "security_auditors"}, {"score": 0.004163587877500036, "phrase": "xss_flaws"}, {"score": 0.003585089792133518, "phrase": "xss_problem"}, {"score": 0.003424850089214916, "phrase": "code-auditing_approach"}, {"score": 0.003368367923339972, "phrase": "defence_model"}, {"score": 0.0033266163944946185, "phrase": "program_source_code"}, {"score": 0.0032044314332538154, "phrase": "recovered_model"}, {"score": 0.003177892611195514, "phrase": "xss_attacks"}, {"score": 0.0030867203659106727, "phrase": "possible_implementation_patterns"}, {"score": 0.0030611534228319717, "phrase": "defensive_coding_methods"}, {"score": 0.002936451109357539, "phrase": "potentially_vulnerable_html_output"}, {"score": 0.00284034646798833, "phrase": "control_flow_graph"}, {"score": 0.002646412155387084, "phrase": "xss_defence_artefacts"}, {"score": 0.002581165831422692, "phrase": "proposed_method"}, {"score": 0.002517524071220657, "phrase": "seven_java-based_web_applications"}, {"score": 0.002375057732691345, "phrase": "xss"}, {"score": 0.002316476356455291, "phrase": "test_subjects"}, {"score": 0.0022877332844249065, "phrase": "extracted_artefacts"}, {"score": 0.0021944684609599245, "phrase": "false-positive_cases"}, {"score": 0.002158233639156017, "phrase": "vulnerability_detection_method"}, {"score": 0.0021049977753042253, "phrase": "vulnerable_code_sections"}], "paper_keywords": [""], "paper_abstract": "Cross site scripting (XSS) vulnerability is mainly caused by the failure of web applications in sanitising user inputs embedded in web pages. Even though state-of-the-art defensive coding methods and vulnerability detection methods are often used by developers and security auditors, XSS flaws still remain in many applications because of (i) the difficulty of adopting these methods, (ii) the inadequate implementation of these methods, and/or (iii) the lack of understanding of XSS problem. To address this issue, this study proposes a code-auditing approach that recovers the defence model implemented in program source code and suggests guidelines for checking the adequacy of recovered model against XSS attacks. On the basis of the possible implementation patterns of defensive coding methods, our approach extracts all such defences implemented for securing each potentially vulnerable HTML output. It then introduces a variant of control flow graph, called tainted-information flow graph, as a model to audit the adequacy of XSS defence artefacts. The authors evaluated the proposed method based on the experiments on seven Java-based web applications. In the auditing experiments, our approach was effective in recovering all the XSS defence features implemented in the test subjects. The extracted artefacts were also shown to be useful for filtering the false-positive cases reported by a vulnerability detection method and helpful in fixing the vulnerable code sections.", "paper_title": "Auditing the XSS defence features implemented in web application programs", "paper_id": "WOS:000308914700011"}