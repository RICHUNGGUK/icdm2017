{"auto_keywords": [{"score": 0.043367051214551706, "phrase": "host_processor"}, {"score": 0.013707470059314194, "phrase": "result_blocks"}, {"score": 0.00481495049065317, "phrase": "floating-point_matrix_multiplication"}, {"score": 0.004628320711601916, "phrase": "field-programmable_gate_array"}, {"score": 0.0045919395246387575, "phrase": "fpga"}, {"score": 0.0045198174374297285, "phrase": "double-precision_floating-point_matrix_multiplication"}, {"score": 0.0043790755286923794, "phrase": "resource_utilisation"}, {"score": 0.004344577216137524, "phrase": "maximising_clock_frequency"}, {"score": 0.00425951071471662, "phrase": "block_matrix_multiplication_algorithm"}, {"score": 0.003664963414801933, "phrase": "full-duplex_communication_links"}, {"score": 0.0032546105164772995, "phrase": "arithmetic_operations"}, {"score": 0.003115908199991072, "phrase": "efficient_use"}, {"score": 0.0030913302090179967, "phrase": "embedded_fpga_resources"}, {"score": 0.0029949359231919307, "phrase": "large_number"}, {"score": 0.002971309306027602, "phrase": "processing_elements"}, {"score": 0.0029015807639878742, "phrase": "pe"}, {"score": 0.0027233675070644026, "phrase": "small_area_size"}, {"score": 0.002701877448139625, "phrase": "high_clock_frequency"}, {"score": 0.0023150531952263994, "phrase": "mkl"}, {"score": 0.0022967715632654854, "phrase": "acml"}, {"score": 0.00226091329975203, "phrase": "atlas"}], "paper_keywords": [""], "paper_abstract": "This study treats architecture and implementation of a field-programmable gate array (FPGA) accelerator for double-precision floating-point matrix multiplication. The architecture is oriented towards minimising resource utilisation and maximising clock frequency. It employs the block matrix multiplication algorithm which returns the result blocks to the host processor as soon as they are computed. This avoids output buffering and simplifies placement and routing on the chip. The authors show that such architecture is especially well suited for full-duplex communication links between the accelerator and the host processor. The architecture requires the result blocks to be accumulated by the host processor; however, the authors show that typically more than 99% of all arithmetic operations are performed by the accelerator. The implementation focuses on efficient use of embedded FPGA resources, in order to allow for a large number of processing elements (PEs). Each PE uses eight Virtex-6 DSP blocks. Both adders and multipliers are deeply pipelined and use several FPGA-specific techniques to achieve small area size and high clock frequency. Finally, the authors quantify the performance of accelerator implemented in Xilinx Virtex-6 FPGA, with 252 PEs running at 403 MHz (achieving 203.1 Giga FLOPS (GFLOPS)), by comparing it to double-precision matrix multiplication function from MKL, ACML, GotoBLAS and ATLAS libraries executing on Intel Core2Quad and AMD Phenom X4 microprocessors running at 2.8 GHz. The accelerator performs 4.5 times faster than the fastest processor/library pair.", "paper_title": "FPGA accelerator for floating-point matrix multiplication", "paper_id": "WOS:000309511700007"}