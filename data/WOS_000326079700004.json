{"auto_keywords": [{"score": 0.03555054577107995, "phrase": "service_composition_patterns"}, {"score": 0.01031600142916946, "phrase": "service-oriented_application"}, {"score": 0.006217366039523783, "phrase": "execution_logs"}, {"score": 0.00481495049065317, "phrase": "mining_service_composition_patterns"}, {"score": 0.00459165923324494, "phrase": "multiple_web_services"}, {"score": 0.00452670409375785, "phrase": "complex_functionality"}, {"score": 0.0043786774510943625, "phrase": "individual_web_service"}, {"score": 0.0037789720824759503, "phrase": "service_composition_pattern"}, {"score": 0.003569451476205552, "phrase": "extensive_uses"}, {"score": 0.003485605409687907, "phrase": "large_number"}, {"score": 0.00332375606483146, "phrase": "best_practices"}, {"score": 0.0032456625605347417, "phrase": "reliable_service-oriented_applications"}, {"score": 0.0027218799769229596, "phrase": "associated_services"}, {"score": 0.002696101728474703, "phrase": "apriori_algorithm"}, {"score": 0.002522344964242888, "phrase": "service_invocation_events"}, {"score": 0.0024281181691350085, "phrase": "structurally_and_functionally_similar_patterns"}, {"score": 0.0023485549678832628, "phrase": "higher_level"}, {"score": 0.0022824314760583834, "phrase": "actual_services"}, {"score": 0.0022500695985527668, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["component", " Web service", " composition", " pattern mining", " log"], "paper_abstract": "A service-oriented application is composed of multiple Web services to fulfill complex functionality that cannot be provided by individual Web service. The combination of services is not random. In many cases, a set of services are repetitively used together in various applications. We treat such a set of services as a service composition pattern. The quality of the patterns is desirable because of the extensive uses and testing in the large number of applications. Therefore, the service composition patterns record the best practices in designing and developing reliable service-oriented applications. The execution log tracks the execution of services in a service-oriented application. To document the service composition patterns, we propose an approach that automatically identifies service composition patterns from various applications using execution logs. We locate a set of associated services using Apriori algorithm and recover the control flows among the services by analyzing the order of service invocation events in the execution logs. We also identify structurally and functionally similar patterns to represent such patterns in a higher level of abstraction regardless of the actual services. A case study shows that our approach can effectively detect service composition patterns. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "An approach for mining service composition patterns from execution logs", "paper_id": "WOS:000326079700004"}