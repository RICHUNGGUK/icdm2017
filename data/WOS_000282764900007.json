{"auto_keywords": [{"score": 0.03403573309395332, "phrase": "recurring_violations"}, {"score": 0.00481495049065317, "phrase": "voltage_emergencies"}, {"score": 0.004768649568826951, "phrase": "software-guided_code_transformations"}, {"score": 0.004654826737377134, "phrase": "circuit_reliability"}, {"score": 0.004610058444728656, "phrase": "modern_high-performance_processors"}, {"score": 0.004456717971917794, "phrase": "feature_sizes"}, {"score": 0.004413846562278824, "phrase": "diminishing_supply_voltages"}, {"score": 0.004267004541988167, "phrase": "microprocessor_supply_voltage_fluctuations"}, {"score": 0.004125027493339274, "phrase": "natural_variation"}, {"score": 0.004085333687668526, "phrase": "processor_activity"}, {"score": 0.0038737214010638745, "phrase": "voltage_fluctuations"}, {"score": 0.003799509133780117, "phrase": "timing_violations"}, {"score": 0.00376293585033711, "phrase": "even_transistor_lifetime_issues"}, {"score": 0.0036026484429137998, "phrase": "hardware-software_collaborative_approach"}, {"score": 0.0034826993555190765, "phrase": "checkpoint-recovery_mechanism"}, {"score": 0.0033830587647810132, "phrase": "maximum_tolerance_settings"}, {"score": 0.0033182152378613767, "phrase": "runtime_software_layer"}, {"score": 0.003270396852243212, "phrase": "program's_instruction_stream"}, {"score": 0.003131023880006021, "phrase": "runtime_layer"}, {"score": 0.003056169480391946, "phrase": "proposed_code-rescheduling_algorithm"}, {"score": 0.002940095976373734, "phrase": "minimal_overhead"}, {"score": 0.002869793011316547, "phrase": "overall_performance"}, {"score": 0.002801166393333128, "phrase": "radical_departure"}, {"score": 0.002760778494680823, "phrase": "ongoing_industry-standard_approach"}, {"score": 0.002630299922281955, "phrase": "worst-case_voltage_flux"}, {"score": 0.0024578987081792405, "phrase": "future_technology_generations"}, {"score": 0.0024342079318127423, "phrase": "existing_conservative_approaches"}, {"score": 0.0023990982005125763, "phrase": "severe_implications"}, {"score": 0.0023303871145705954, "phrase": "efficient_microprocessors"}, {"score": 0.0022967713922705, "phrase": "proposed_technique"}, {"score": 0.002263639474937039, "phrase": "traditional_reliability_problem"}, {"score": 0.002230984431056064, "phrase": "runtime_performance_optimization_problem"}, {"score": 0.002135812692862058, "phrase": "typical_case_operation"}, {"score": 0.0021049977753042253, "phrase": "intelligent_algorithms"}], "paper_keywords": ["Performance", " Reliability", " Voltage noise", " dI/dt", " inductive noise", " voltage emergencies"], "paper_abstract": "In recent years, circuit reliability in modern high-performance processors has become increasingly important. Shrinking feature sizes and diminishing supply voltages have made circuits more sensitive to microprocessor supply voltage fluctuations. These fluctuations result from the natural variation of processor activity as workloads execute, but when left unattended, these voltage fluctuations can lead to timing violations or even transistor lifetime issues. In this article, we present a hardware-software collaborative approach to mitigate voltage fluctuations. A checkpoint-recovery mechanism rectifies errors when voltage violates maximum tolerance settings, while a runtime software layer reschedules the program's instruction stream to prevent recurring violations at the same program location. The runtime layer, combined with the proposed code-rescheduling algorithm, removes 60% of all violations with minimal overhead, thereby significantly improving overall performance. Our solution is a radical departure from the ongoing industry-standard approach to circumvent the issue altogether by optimizing for the worst-case voltage flux, which compromises power and performance efficiency severely, especially looking ahead to future technology generations. Existing conservative approaches will have severe implications on the ability to deliver efficient microprocessors. The proposed technique reassembles a traditional reliability problem as a runtime performance optimization problem, thus allowing us to design processors for typical case operation by building intelligent algorithms that can prevent recurring violations.", "paper_title": "Eliminating Voltage Emergencies via Software-Guided Code Transformations", "paper_id": "WOS:000282764900007"}