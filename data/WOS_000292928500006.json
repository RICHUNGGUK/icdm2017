{"auto_keywords": [{"score": 0.03743399683518872, "phrase": "query_interactions"}, {"score": 0.00939123334880673, "phrase": "qshuffler"}, {"score": 0.008491378024707301, "phrase": "database_system"}, {"score": 0.007623763217158248, "phrase": "database_performance"}, {"score": 0.007115266128946232, "phrase": "current_database_systems"}, {"score": 0.00481495049065317, "phrase": "report-generation_workloads"}, {"score": 0.004752873752686246, "phrase": "typical_workload"}, {"score": 0.00457138247462329, "phrase": "multiple_queries"}, {"score": 0.004531997388646422, "phrase": "different_types"}, {"score": 0.004377806391261418, "phrase": "different_queries"}, {"score": 0.0043213410601860985, "phrase": "query_mix"}, {"score": 0.004247180402119585, "phrase": "significant_impact"}, {"score": 0.004049709080817396, "phrase": "query_mixes"}, {"score": 0.0037299231609021783, "phrase": "new_approach"}, {"score": 0.0036817833826578395, "phrase": "planning_experiments"}, {"score": 0.0036500346000495317, "phrase": "statistical_modeling"}, {"score": 0.003480230347985338, "phrase": "prior_assumptions"}, {"score": 0.0034353020860809404, "phrase": "internal_workings"}, {"score": 0.002990592465417758, "phrase": "novel_interaction-aware_query_scheduler"}, {"score": 0.0027304365438083874, "phrase": "first_algorithm"}, {"score": 0.0026146109167103655, "phrase": "large_batches"}, {"score": 0.0025808284847319528, "phrase": "second_algorithm"}, {"score": 0.0024820711838337713, "phrase": "scheduling_decisions"}, {"score": 0.0023767561522363367, "phrase": "experimental_evaluation"}, {"score": 0.002335889180060105, "phrase": "tpc-h_workloads"}], "paper_keywords": ["Business intelligence", " Report generation", " Query interactions", " Scheduling", " Experiment-driven performance modeling", " Workload management"], "paper_abstract": "The typical workload in a database system consists of a mix of multiple queries of different types that run concurrently. Interactions among the different queries in a query mix can have a significant impact on database performance. Hence, optimizing database performance requires reasoning about query mixes rather than considering queries individually. Current database systems lack the ability to do such reasoning. We propose a new approach based on planning experiments and statistical modeling to capture the impact of query interactions. Our approach requires no prior assumptions about the internal workings of the database system or the nature and cause of query interactions, making it portable across systems. To demonstrate the potential of modeling and exploiting query interactions, we have developed a novel interaction-aware query scheduler for report-generation workloads. Our scheduler, called QShuffler, uses two query scheduling algorithms that leverage models of query interactions. The first algorithm is optimized for workloads where queries are submitted in large batches. The second algorithm targets workloads where queries arrive continuously, and scheduling decisions have to be made online. We report an experimental evaluation of QShuffler using TPC-H workloads running on IBM DB2. The evaluation shows that QShuffler, by modeling and exploiting query interactions, can consistently outperform (up to 4x) query schedulers in current database systems.", "paper_title": "Interaction-aware scheduling of report-generation workloads", "paper_id": "WOS:000292928500006"}