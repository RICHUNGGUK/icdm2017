{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pointer_structures"}, {"score": 0.004615202066192795, "phrase": "compositional_definition"}, {"score": 0.004270178957872099, "phrase": "pointer_structure"}, {"score": 0.003978866233891427, "phrase": "pointer_property"}, {"score": 0.003760137090849196, "phrase": "parameterised_binary_combinator"}, {"score": 0.003629557750546267, "phrase": "important_properties"}, {"score": 0.003287482882222731, "phrase": "compositional_manner"}, {"score": 0.0028740705307540343, "phrase": "'unifying_theories_of_programming'"}, {"score": 0.002677744558540711, "phrase": "disjointness_combinators"}, {"score": 0.002603012037901889, "phrase": "separating_conjunction"}, {"score": 0.0025664295665392203, "phrase": "separation_logic"}, {"score": 0.0025125151618810523, "phrase": "case_study"}, {"score": 0.0022276618873985445, "phrase": "hoare_logic"}, {"score": 0.0021049977753042253, "phrase": "object-oriented_program"}], "paper_keywords": [""], "paper_abstract": "This paper studies the compositional definition and behaviour of properties that arise in pointer structures. A pointer structure is represented as a (pointer) graph. A pointer property is a set of pointer structures. A parameterised binary combinator is defined that enables important properties (like acyclicity, canonicity and reachability) to be defined in a compositional manner. The technique of parameterising a combinator derives from the definition of parallel-by-merge in 'Unifying Theories of Programming'. It is applied here to the study of disjointness combinators that extend the separating conjunction of Separation Logic. A case study is provided to demonstrate how these ideas are used, in the form of rules of Hoare logic, to verify the correctness of an Object-Oriented program.", "paper_title": "Compositional reasoning for pointer structures", "paper_id": "WOS:000239422700010"}