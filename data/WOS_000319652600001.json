{"auto_keywords": [{"score": 0.04971245563968758, "phrase": "software_projects"}, {"score": 0.03810695834896041, "phrase": "temporal_aspect"}, {"score": 0.00481495049065317, "phrase": "bayesian_networks_models"}, {"score": 0.004651271219032404, "phrase": "crucial_component"}, {"score": 0.004615656893404919, "phrase": "successful_software_development"}, {"score": 0.004390689303780405, "phrase": "different_kinds"}, {"score": 0.00427410962921379, "phrase": "successful_techniques"}, {"score": 0.0034326732528567826, "phrase": "bayesian_belief_networks"}, {"score": 0.0033543281764294927, "phrase": "better_estimations"}, {"score": 0.0032526334220034326, "phrase": "previous_shortcomings"}, {"score": 0.003034916887102753, "phrase": "estimation_variables"}, {"score": 0.0028317319086202217, "phrase": "semi-automatically_building_bbns"}, {"score": 0.0027992118597278087, "phrase": "machine_learning_techniques"}, {"score": 0.002662541169311738, "phrase": "one-shot_bbns"}, {"score": 0.0026218430041123164, "phrase": "second_one"}, {"score": 0.002522791642460087, "phrase": "project_development"}, {"score": 0.002465161736207254, "phrase": "real_data"}, {"score": 0.00236289633510808, "phrase": "multi-class_classification"}, {"score": 0.00230003335593664, "phrase": "semantically_correct_model"}, {"score": 0.0022474806085983536, "phrase": "future_projects"}, {"score": 0.002145942273032774, "phrase": "well-balanced_approach"}, {"score": 0.002121281184742656, "phrase": "good_predictions"}, {"score": 0.0021049977753042253, "phrase": "strong_explanatory_power"}], "paper_keywords": ["Software estimation", " Bayesian Belief Networks"], "paper_abstract": "Software projects estimations are a crucial component of successful software development. There have been many approaches that deal with this problem by using different kinds of techniques. Most of the successful techniques rely on one shot prediction of some variables, as cost, quality or risk, taking into account some metrics. However, these techniques usually are not able to deal with uncertainty on the data, the relationships among metrics or the temporal aspect of projects. During the last decade, some researchers have proposed the use of Bayesian Belief Networks (BBNs) to perform better estimations, by explicitly taking into account the previous shortcomings. But, these approaches were based on manually defining those BBNs and handling only one of the estimation variables (cost, quality or risk). In this paper, we present an approach for semi-automatically building BBNs by using machine learning techniques. We describe two algorithms to generate such BBNs. The first one generates one-shot BBNs, while the second one generates BBNs that take into account the temporal aspect of project development. We performed experiments on real data coming from two software companies, obtaining a 63% of accuracy on multi-class classification. Our main interest was to find a semantically correct model that can be trained with future projects to increase its accuracy. In this sense, we introduce a well-balanced approach to make good predictions with strong explanatory power.", "paper_title": "Multi-step Generation of Bayesian Networks Models for Software Projects Estimations", "paper_id": "WOS:000319652600001"}