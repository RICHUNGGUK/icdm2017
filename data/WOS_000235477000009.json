{"auto_keywords": [{"score": 0.04494043342425538, "phrase": "gus"}, {"score": 0.015567524163626605, "phrase": "mutual_exclusion_resource_constraints"}, {"score": 0.00481495049065317, "phrase": "real-time_activities"}, {"score": 0.00462919213721188, "phrase": "uni-processor_real-time_scheduling_algorithm"}, {"score": 0.004236908273106904, "phrase": "previously_open_real-time_scheduling"}, {"score": 0.004073359218158693, "phrase": "time_constraints"}, {"score": 0.0038397509389856625, "phrase": "time_constraint_specification"}, {"score": 0.00376488621224566, "phrase": "activity's_utility"}, {"score": 0.003601715012418258, "phrase": "activity's_completion_time"}, {"score": 0.0034118234596993836, "phrase": "scheduling_objective"}, {"score": 0.0033452741392850523, "phrase": "total_utility"}, {"score": 0.0031076681340233246, "phrase": "np"}, {"score": 0.0029576827451501956, "phrase": "polynomial-time_cost"}, {"score": 0.0028574164693918433, "phrase": "scheduling_event"}, {"score": 0.002706659627293686, "phrase": "ready_queue"}, {"score": 0.002538687900036229, "phrase": "actual_implementation"}, {"score": 0.0025014259919355453, "phrase": "real-time_posix_operating_system"}, {"score": 0.002428530921948425, "phrase": "implementation_measurements"}, {"score": 0.0022665781920241245, "phrase": "existing_algorithms"}, {"score": 0.0021049977753042253, "phrase": "gus."}], "paper_keywords": ["real-time scheduling", " time/ utility functions", " utility accrual scheduling", " resource dependency", " mutual exclusion", " overload management", " resource management"], "paper_abstract": "This paper presents a uni-processor real-time scheduling algorithm called the Generic Utility Scheduling algorithm ( which we will refer to simply as GUS). GUS solves a previously open real-time scheduling problem-scheduling application activities that have time constraints specified using arbitrarily shaped time/utility functions and have mutual exclusion resource constraints. A time/utility function is a time constraint specification that describes an activity's utility to the system as a function of that activity's completion time. Given such time and resource constraints, we consider the scheduling objective of maximizing the total utility that is accrued by the completion of all activities. Since this problem is NP-hard, GUS heuristically computes schedules with a polynomial-time cost of O(n(3)) at each scheduling event, where n is the number of activities in the ready queue. We evaluate the performance of GUS through simulation and by an actual implementation on a real-time POSIX operating system. Our simulation studies and implementation measurements reveal that GUS performs close to, if not better than, the existing algorithms for the cases that they apply. Furthermore, we analytically establish several properties of GUS.", "paper_title": "A utility accrual scheduling algorithm for real-time activities with mutual exclusion resource constraints", "paper_id": "WOS:000235477000009"}