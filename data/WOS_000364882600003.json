{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "hoare"}, {"score": 0.0151970106765252, "phrase": "dijkstra"}, {"score": 0.0074452745278258715, "phrase": "double_right_arrow"}, {"score": 0.004733347359490221, "phrase": "monadic_computation"}, {"score": 0.0043953478557600565, "phrase": "weakest_precondition_computations"}, {"score": 0.004104722208522451, "phrase": "program_verification"}, {"score": 0.003989351600022163, "phrase": "theorem_prover"}, {"score": 0.003746779951069909, "phrase": "categorical_setting"}, {"score": 0.0036207206487324506, "phrase": "recently_developed_view"}, {"score": 0.0035796471115594553, "phrase": "program_semantics"}, {"score": 0.0034004869983267085, "phrase": "state_transformers"}, {"score": 0.0033427754823819157, "phrase": "predicate_transformers"}, {"score": 0.0032302647179383915, "phrase": "different_computational_monads"}, {"score": 0.0031037644581516973, "phrase": "dijkstra_monad"}, {"score": 0.002898291237210567, "phrase": "abstract_definitions"}, {"score": 0.0028167336373711494, "phrase": "hoare_monad"}, {"score": 0.0027374647587075935, "phrase": "computational_monad"}, {"score": 0.002570817338292482, "phrase": "kleisli_category"}, {"score": 0.002527150892127982, "phrase": "underlying_monad"}, {"score": 0.002248049972289863, "phrase": "state"}], "paper_keywords": ["Monad", " Program semantics", " Hoare logic", " Weakest precondition"], "paper_abstract": "The Dijkstra and Hoare monads have been introduced recently for capturing weakest precondition computations and computations with pre- and post-conditions, within the context of program verification, supported by a theorem prover. Here we give a more general description of such monads in a categorical setting. We first elaborate the recently developed view on program semantics in terms of a triangle of computations, state transformers, and predicate transformers. Instantiating this triangle for different computational monads T shows how to define the Dijkstra monad associated with T-1 via the logic involved. Subsequently we give abstract definitions of the Dijkstra and Hoare monad, parametrised by a computational monad. These definitions presuppose a suitable (categorical) predicate logic, defined on the Kleisli category of the underlying monad. When all this structure exists, we show that there are maps of monads (Hoare) double right arrow (State) double right arrow (Dijkstra), all parametrised by a monad T. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Dijkstra and Hoare monads in monadic computation", "paper_id": "WOS:000364882600003"}