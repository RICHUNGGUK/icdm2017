{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "kato"}, {"score": 0.004554488671294504, "phrase": "answer-set_programs"}, {"score": 0.004342430078306461, "phrase": "growing_need"}, {"score": 0.004273951631010383, "phrase": "educational_institutions"}, {"score": 0.004140203942496321, "phrase": "different_purposes"}, {"score": 0.004010624853427534, "phrase": "important_field"}, {"score": 0.0037634608487353153, "phrase": "source-code_plagiarism"}, {"score": 0.003109390330476147, "phrase": "answer-set_programming"}, {"score": 0.002826181226538412, "phrase": "dlv_programs"}, {"score": 0.00252812242767189, "phrase": "basic_features"}, {"score": 0.0022614266476954467, "phrase": "plagiarism_detection"}, {"score": 0.0021387992835532367, "phrase": "logic_programming"}], "paper_keywords": ["answer-set programming", " program analysis", " plagiarism detection"], "paper_abstract": "Plagiarism detection is a growing need among educational institutions and solutions for different purposes exist. An important field in this direction is detecting cases of source-code plagiarism. In this paper, we present the tool Kato for supporting the detection of this kind of plagiarism in the area of answer-set programming (ASP). Currently, the tool is implemented for DLV programs but it is designed to handle other logic-programming dialects as well. We review the basic features of Kato, introduce its theoretical underpinnings, and discuss an application of Kato for plagiarism detection in the context of courses on logic programming at the Vienna University of Technology.", "paper_title": "The system Kato: Detecting cases of plagiarism for answer-set programs", "paper_id": "WOS:000280508200026"}