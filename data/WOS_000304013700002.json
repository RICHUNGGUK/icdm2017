{"auto_keywords": [{"score": 0.04828158744400139, "phrase": "pure_type_systems"}, {"score": 0.00481495049065317, "phrase": "pure_type_system_conversion"}, {"score": 0.004260134699483774, "phrase": "external_notion"}, {"score": 0.0038862297330905836, "phrase": "typed_judgment"}, {"score": 0.003683407561208816, "phrase": "typing_system"}, {"score": 0.0035722806911457545, "phrase": "long_time"}, {"score": 0.003160200215473349, "phrase": "first_step"}, {"score": 0.0029723408875898696, "phrase": "adams"}, {"score": 0.00290473242917264, "phrase": "particular_class"}, {"score": 0.0028170448553664273, "phrase": "pts"}, {"score": 0.00254983442025512, "phrase": "semi-full_ptss"}, {"score": 0.0023079225317714815, "phrase": "positive_answer"}, {"score": 0.002255431275670053, "phrase": "general_question"}, {"score": 0.0021049977753042253, "phrase": "pure_type_system"}], "paper_keywords": [""], "paper_abstract": "Pure Type Systems are usually described in two different ways, one that uses an external notion of computation like beta-reduction, and one that relies on a typed judgment of equality, directly in the typing system. For a long time, the question was open to know whether both presentations described the same theory. A first step towards this equivalence has been made by Adams for a particular class of Pure Type Systems (PTS) called functional. Then, his result has been relaxed to all semi-full PTSs in previous work. In this paper, we finally give a positive answer to the general question, and prove that equivalence holds for any Pure Type System.", "paper_title": "Pure Type System conversion is always typable", "paper_id": "WOS:000304013700002"}