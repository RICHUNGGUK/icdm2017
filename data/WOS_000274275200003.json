{"auto_keywords": [{"score": 0.036694651372665234, "phrase": "program_faults"}, {"score": 0.01366725437057062, "phrase": "suspicious_code"}, {"score": 0.00481495049065317, "phrase": "code_coverage-based_heuristics"}, {"score": 0.004486432283770142, "phrase": "increased_demand"}, {"score": 0.004462105963334103, "phrase": "automated_techniques"}, {"score": 0.004389912080394437, "phrase": "fault_localization_process"}, {"score": 0.004318881178805575, "phrase": "code_coverage-based_method"}, {"score": 0.004112582094962078, "phrase": "program_bugs"}, {"score": 0.0037087324991876727, "phrase": "faulty_code"}, {"score": 0.003193186694571698, "phrase": "first_failed_test_case"}, {"score": 0.0030239842475439814, "phrase": "second_failed_test_case"}, {"score": 0.002887210021573995, "phrase": "third_failed_test_case"}, {"score": 0.002741632276146748, "phrase": "successful_test_cases"}, {"score": 0.0025403348084746835, "phrase": "subsequent_prioritization"}, {"score": 0.0024519545383399773, "phrase": "six_sets"}, {"score": 0.002425383819826375, "phrase": "siemens"}, {"score": 0.0021396960731214203, "phrase": "fault_localization"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Fault localization", " Program debugging", " Code coverage", " Heuristics", " Suspiciousness of code", " Successful tests", " Failed tests"], "paper_abstract": "Locating faults in a program can be very time-consuming and arduous, and therefore, there is an increased demand for automated techniques that can assist in the fault localization process. In this paper a code coverage-based method with a family of heuristics is proposed in order to prioritize suspicious code according to its likelihood of containing program bugs. Highly suspicious code (i.e., code that is more likely to contain a bug) should be examined before code that is relatively less suspicious; and in this manner programmers can identify and repair faulty code more efficiently and effectively. We also address two important issues: first, how can each additional failed test case aid in locating program faults; and second, how can each additional successful test case help in locating program faults. We propose that with respect to a piece of code, the contribution of the first failed test case that executes it in computing its likelihood of containing a bug is larger than or equal to that of the second failed test case that executes it, which in turn is larger than or equal to that of the third failed test case that executes it, and so on. This principle is also applied to the contribution provided by successful test cases that execute the piece of code. A tool, chi Debug, was implemented to automate the computation of the suspiciousness of the code and the subsequent prioritization of suspicious code for locating program faults. To validate our method case studies were performed on six sets of programs: Siemens suite, Unix suite, space, grep, gzip, and make. Data collected from the studies are supportive of the above claim and also suggest Heuristics III(a), (b) and (c) of our method can effectively reduce the effort spent on fault localization. (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "A family of code coverage-based heuristics for effective fault localization", "paper_id": "WOS:000274275200003"}