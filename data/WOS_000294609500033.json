{"auto_keywords": [{"score": 0.04857498973208302, "phrase": "recon"}, {"score": 0.008864762527210097, "phrase": "inter-thread_communication"}, {"score": 0.008771343812531347, "phrase": "root_cause"}, {"score": 0.00481495049065317, "phrase": "concurrency_errors"}, {"score": 0.004780926543714981, "phrase": "reconstructed_execution_fragments"}, {"score": 0.004549366134876482, "phrase": "concurrency_debugging"}, {"score": 0.004313643010028869, "phrase": "short_fragments"}, {"score": 0.00428314621261913, "phrase": "buggy_execution_schedules"}, {"score": 0.003836993936866082, "phrase": "understanding_bugs"}, {"score": 0.003796355951305572, "phrase": "key_idea"}, {"score": 0.0035487559182107112, "phrase": "recon_leverages_reconstructions"}, {"score": 0.003511159930253876, "phrase": "multiple_application_executions"}, {"score": 0.003329051037399227, "phrase": "recon's_approach"}, {"score": 0.003100800861459349, "phrase": "programming_model"}, {"score": 0.002992595374066178, "phrase": "single-and_multiple-variable_concurrency_bugs"}, {"score": 0.0027972697690729453, "phrase": "graph_collection"}, {"score": 0.002748016244165687, "phrase": "selective_monitoring"}, {"score": 0.0027188802510720775, "phrase": "metadata_information"}, {"score": 0.002605384872894451, "phrase": "recon's_graph_collection"}, {"score": 0.0023838876943453515, "phrase": "buggy_applications"}, {"score": 0.002268161377269513, "phrase": "bugs'_causes"}, {"score": 0.0022124176057373365, "phrase": "accurate_order"}, {"score": 0.0021734395455430167, "phrase": "case_study"}, {"score": 0.0021275693314553143, "phrase": "previously_unresolved_bug"}, {"score": 0.0021049977753042253, "phrase": "recon's_effectiveness"}], "paper_keywords": ["Algorithms", " Reliability", " concurrency", " statistical debugging", " multithreading"], "paper_abstract": "In this paper we propose Recon, a new general approach to concurrency debugging. Recon goes beyond just detecting bugs, it also presents to the programmer short fragments of buggy execution schedules that illustrate how and why bugs happened. These fragments, called reconstructions, are inferred from inter-thread communication surrounding the root cause of a bug and significantly simplify the process of understanding bugs. The key idea in Recon is to monitor executions and build graphs that encode inter-thread communication with enough context information to build reconstructions. Recon leverages reconstructions built from multiple application executions and uses machine learning to identify which ones illustrate the root cause of a bug. Recon's approach is general because it does not rely on heuristics specific to any type of bug, application, or programming model. Therefore, it is able to deal with single-and multiple-variable concurrency bugs regardless of their type (e. g., atomicity violation, ordering, etc). To make graph collection efficient, Recon employs selective monitoring and allows metadata information to be imprecise without compromising accuracy. With these optimizations, Recon's graph collection imposes overheads typically between 5x and 20x for both C/C++ and Java programs, with overheads as low as 13% in our experiments. We evaluate Recon with buggy applications, and show it produces reconstructions that include all code points involved in bugs' causes, and presents them in an accurate order. We include a case study of understanding and fixing a previously unresolved bug to showcase Recon's effectiveness.", "paper_title": "Isolating and Understanding Concurrency Errors Using Reconstructed Execution Fragments", "paper_id": "WOS:000294609500033"}