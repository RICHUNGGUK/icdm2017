{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "formal_method"}, {"score": 0.004539005582217305, "phrase": "model-driven_software_process"}, {"score": 0.004236908273106904, "phrase": "integrated_tools"}, {"score": 0.0035141291835319682, "phrase": "automatic_generation"}, {"score": 0.003445591238183763, "phrase": "software_artifacts"}, {"score": 0.0030614565460256897, "phrase": "development_steps"}, {"score": 0.0029722900280316216, "phrase": "model-driven_process"}, {"score": 0.0023928819778638055, "phrase": "metamodel-based_language"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["formal methods", " abstract state machines", " model-driven engineering"], "paper_abstract": "This paper presents a model-driven software process suitable to develop a set of integrated tools around a formal method. This process exploits concepts and technologies of the Model-driven Engineering (MDE) approach, such as metamodelling and automatic generation of software artifacts from models. We describe the requirements to fulfill and the development steps of this model-driven process. As a proof-of-concept, we apply it to the Finite State Machines and we report our experience in engineering a metamodel-based language and a toolset for the Abstract State Machine formal method. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "A model-driven process for engineering a toolset for a formal method", "paper_id": "WOS:000287106000004"}