{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "input_domain_reduction"}, {"score": 0.04076936422859308, "phrase": "potential_inputs"}, {"score": 0.029171317115594703, "phrase": "search_space_reduction"}, {"score": 0.004764859786310636, "phrase": "irrelevant_variable_removal"}, {"score": 0.004545793387330536, "phrase": "hybrid_search-based"}, {"score": 0.004522080178250592, "phrase": "structural_test_data_generation"}, {"score": 0.004314127287770832, "phrase": "testing_goals"}, {"score": 0.0042692243768616455, "phrase": "fitness_functions"}, {"score": 0.004202741104973709, "phrase": "test_input_generation"}, {"score": 0.004072851768196397, "phrase": "chosen_search-based_optimization_algorithm"}, {"score": 0.0035920758080335655, "phrase": "fitness_function"}, {"score": 0.0035361001070845677, "phrase": "search_space"}, {"score": 0.0031678720736808574, "phrase": "key_determining_factor"}, {"score": 0.003069867656852932, "phrase": "search-based_approach"}, {"score": 0.002974886152979993, "phrase": "large_volume"}, {"score": 0.0029131986574478046, "phrase": "search-based_software_testing"}, {"score": 0.0027790254309734428, "phrase": "performance_impact"}, {"score": 0.0026649432435828842, "phrase": "static_dependence_analysis"}, {"score": 0.0026233771102489394, "phrase": "program_slicing"}, {"score": 0.0023254633298356894, "phrase": "industrial_production_code"}, {"score": 0.0021609076467365247, "phrase": "significant_effect"}], "paper_keywords": ["Search-based software testing", " evolutionary testing", " automated test data generation", " input domain reduction"], "paper_abstract": "Search-Based Test Data Generation reformulates testing goals as fitness functions so that test input generation can be automated by some chosen search-based optimization algorithm. The optimization algorithm searches the space of potential inputs, seeking those that are \"fit for purpose,\" guided by the fitness function. The search space of potential inputs can be very large, even for very small systems under test. Its size is, of course, a key determining factor affecting the performance of any search-based approach. However, despite the large volume of work on Search-Based Software Testing, the literature contains little that concerns the performance impact of search space reduction. This paper proposes a static dependence analysis derived from program slicing that can be used to support search space reduction. The paper presents both a theoretical and empirical analysis of the application of this approach to open source and industrial production code. The results provide evidence to support the claim that input domain reduction has a significant effect on the performance of local, global, and hybrid search, while a purely random search is unaffected.", "paper_title": "Input Domain Reduction through Irrelevant Variable Removal and Its Effect on Local, Global, and Hybrid Search-Based Structural Test Data Generation", "paper_id": "WOS:000301915200013"}