{"auto_keywords": [{"score": 0.0340699507525149, "phrase": "hpc"}, {"score": 0.00481495049065317, "phrase": "accurate_and_context-sensitive_timing"}, {"score": 0.00465964893087681, "phrase": "key_computational_kernels"}, {"score": 0.004086744751579196, "phrase": "extensive_tuning"}, {"score": 0.003928969293303814, "phrase": "particular_platform"}, {"score": 0.003378385493203297, "phrase": "reliable_and_context-sensitive_timers"}, {"score": 0.0030414140732789186, "phrase": "upc_software"}, {"score": 0.0027560092576928595, "phrase": "reported_performance"}, {"score": 0.00268452026617243, "phrase": "actual_upc_applications"}, {"score": 0.002497319603143104, "phrase": "timer_design"}, {"score": 0.0022480304016499605, "phrase": "upc_kernel_routines"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["timers", " timing", " benchmarking", " cache flushing", " kernel optimization", " ATLAS"], "paper_abstract": "Key computational kernels must run near their peak efficiency for most high-performance computing (HPC) applications. Getting this level of efficiency has always required extensive tuning of the kernel on a particular platform of interest. The success or failure of an optimization is usually measured by invoking a timer. Understanding how to build reliable and context-sensitive timers is one of the most neglected areas in HPC, and this results in a host of UPC software that looks good when reported in the papers, but delivers only a fraction of the reported performance when used by actual UPC applications. In this paper, we motivate the importance of timer design and then discuss the techniques and methodologies we have developed in order to accurately time UPC kernel routines for our well-known empirical tuning framework, ATLAS. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "Achieving accurate and context-sensitive timing for code optimization", "paper_id": "WOS:000261811000003"}