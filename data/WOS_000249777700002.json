{"auto_keywords": [{"score": 0.04952525101149597, "phrase": "strong_computability"}, {"score": 0.0455567754671588, "phrase": "recursive_structure_analysis"}, {"score": 0.015719716506582538, "phrase": "dependency_pair_method"}, {"score": 0.015361973151232501, "phrase": "simply-typed_term"}, {"score": 0.01118527927177408, "phrase": "recursive_structure"}, {"score": 0.004090901264701185, "phrase": "computational_models"}, {"score": 0.004043541331944951, "phrase": "functional_programs"}, {"score": 0.003973523379376352, "phrase": "primary_advantage"}, {"score": 0.003792657064634775, "phrase": "higher-order_variables"}, {"score": 0.0035366216368204182, "phrase": "key_idea"}, {"score": 0.003129317057177867, "phrase": "typed_lambda-calculus"}, {"score": 0.003039445153076014, "phrase": "stronger_condition"}, {"score": 0.002658068304632523, "phrase": "type_structure"}, {"score": 0.002536926192232391, "phrase": "subterm_relation"}], "paper_keywords": ["termination", " simply-typed term rewriting system", " plain function- passing", " dependency pair", " strong computability"], "paper_abstract": "We enhance the dependency pair method in order to prove termination using recursive structure analysis in simply-typed term rewriting systems, which is one of the computational models of functional programs. The primary advantage of our method is that one can exclude higher-order variables which are difficult to analyze theoretically, from recursive structure analysis. The key idea of our method is to analyze recursive structure from the viewpoint of strong computability. This property was introduced for proving termination in typed lambda-calculus, and is a stronger condition than the property of termination. The difficulty in incorporating this concept into recursive structure analysis is that because it is defined inductively over type structure, it is not closed under the subterm relation. This breaks the correspondence between strong computability and recursive structure. In order to guarantee the correspondence, we propose plain function-passing as a restriction, which is satisfied by many non-artificial functional programs.", "paper_title": "Enhancing dependency pair method using strong computability in simply-typed term rewriting", "paper_id": "WOS:000249777700002"}