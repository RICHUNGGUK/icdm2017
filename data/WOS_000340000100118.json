{"auto_keywords": [{"score": 0.02595963619108868, "phrase": "ray"}, {"score": 0.00481495049065317, "phrase": "dynamic_ray_stream_traversal"}, {"score": 0.004693167092003573, "phrase": "new_generation"}, {"score": 0.004574449773348889, "phrase": "larger_caches"}, {"score": 0.004401955895933783, "phrase": "external_memory_bandwidth_capabilities"}, {"score": 0.004076157223660074, "phrase": "wide_vector_units"}, {"score": 0.003998531873723384, "phrase": "low_instruction_level_divergence"}, {"score": 0.0036788184374592706, "phrase": "ray_tracing"}, {"score": 0.0035173498506324476, "phrase": "traditional_depth-first_ray_traversal"}, {"score": 0.0033845816848753073, "phrase": "available_cache_hierarchy"}, {"score": 0.003298856341173034, "phrase": "high_simd_efficiency"}, {"score": 0.003215295260684715, "phrase": "memory_bus_traffic_low"}, {"score": 0.003113804826864362, "phrase": "efficient_algorithm"}, {"score": 0.003054450075234415, "phrase": "large_packets"}, {"score": 0.002958021635132416, "phrase": "bounding_volume_hierarchy"}, {"score": 0.0028463059289874637, "phrase": "coherent_rays"}, {"score": 0.0027212777001495176, "phrase": "previous_large_packet_traversal_methods"}, {"score": 0.0026184796288543878, "phrase": "individual_traversal_order"}, {"score": 0.0024714996534331668, "phrase": "efficient_ray_tracing"}, {"score": 0.00236289633510808, "phrase": "mature_research_field"}, {"score": 0.0023327506323251074, "phrase": "computer_graphics"}, {"score": 0.0022159566043745724, "phrase": "traversal_performance"}], "paper_keywords": ["ray tracing", " traversal", " coherency", " shading"], "paper_abstract": "While each new generation of processors gets larger caches and more compute power, external memory bandwidth capabilities increase at a much lower pace. Additionally, processors are equipped with wide vector units that require low instruction level divergence to be efficiently utilized. In order to exploit these trends for ray tracing, we present an alternative to traditional depth-first ray traversal that takes advantage of the available cache hierarchy, and provides high SIMD efficiency, while keeping memory bus traffic low. Our main contribution is an efficient algorithm for traversing large packets of rays against a bounding volume hierarchy in a way that groups coherent rays during traversal. In contrast to previous large packet traversal methods, our algorithm allows for individual traversal order for each ray, which is essential for efficient ray tracing. Ray tracing algorithms is a mature research field in computer graphics, and despite this, our new technique increases traversal performance by 36-53%, and is applicable to most ray tracers.", "paper_title": "Dynamic Ray Stream Traversal", "paper_id": "WOS:000340000100118"}