{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "slew-constrained_minimum_cost_buffering"}, {"score": 0.004626680470601208, "phrase": "sharp_slew_rate"}, {"score": 0.0044967055264893184, "phrase": "circuit_design"}, {"score": 0.0043703658695579085, "phrase": "huge_demand"}, {"score": 0.0043208252177835815, "phrase": "buffering_resources"}, {"score": 0.004199406257273994, "phrase": "ultrafast_buffering_techniques"}, {"score": 0.004128192012388041, "phrase": "large_volume"}, {"score": 0.003989351600022163, "phrase": "buffering_cost"}, {"score": 0.003683213029483699, "phrase": "highly_efficient_algorithm"}, {"score": 0.0036207206487324506, "phrase": "dynamic_programming"}, {"score": 0.0034395119150793787, "phrase": "discrete_buffer_locations"}, {"score": 0.0033427754823819157, "phrase": "new_algorithm"}, {"score": 0.0032860401904845522, "phrase": "maximum_matching_technique"}, {"score": 0.0031754329320561317, "phrase": "difficult_cases"}, {"score": 0.0030337085953063125, "phrase": "buffer_input_slew"}, {"score": 0.0029483516334882862, "phrase": "adaptive_buffer_selection_approach"}, {"score": 0.0028006988338192375, "phrase": "continuous_buffer_locations"}, {"score": 0.0027374647587075935, "phrase": "buffer_blockage_avoidance"}, {"score": 0.002585539416877115, "phrase": "practical_use"}, {"score": 0.002527150892127982, "phrase": "industrial_netlists"}, {"score": 0.0022672718785099666, "phrase": "commonly_used_van_ginneken_style"}, {"score": 0.002216054733102974, "phrase": "new_algorithms"}, {"score": 0.0021659920594094407, "phrase": "previous_works"}, {"score": 0.0021049977753042253, "phrase": "slew_buffering_problem"}], "paper_keywords": ["Index Terms-Buffer insertion", " input slew", " interconnect", " NP-complete", " slew constraint."], "paper_abstract": "As a prevalent constraint, sharp slew rate is often required in circuit design, which causes a huge demand for buffering resources. This problem requires ultrafast buffering techniques to handle large volume of nets while also minimizing buffering cost. This problem is intensively studied in this paper. First, a highly efficient algorithm based on dynamic programming is proposed to optimally solve slew buffering with discrete buffer locations. Second, a new algorithm using the maximum matching technique is developed to handle the difficult cases in which no assumption is made on buffer input slew. Third, an adaptive buffer selection approach is proposed to efficiently handle slew buffering with continuous buffer locations. Fourth, buffer blockage avoidance is handled, which makes the algorithms ready for practical use. Experiments on industrial netlists demonstrate that our algorithms are very effective and highly efficient: we achieve about 90 x speedup and save up to 20 % buffer area over the commonly used van Ginneken style buffering. The new algorithms also significantly outperform previous works that indirectly address the slew buffering problem.", "paper_title": "Fast algorithms for slew-constrained minimum cost buffering", "paper_id": "WOS:000250415500009"}