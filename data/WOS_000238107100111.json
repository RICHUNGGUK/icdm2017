{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "transparent_load_balancing"}, {"score": 0.004563427013973105, "phrase": "data-list_management_library"}, {"score": 0.004371660146981191, "phrase": "parallel_programming"}, {"score": 0.003306559295382181, "phrase": "searching_trees"}, {"score": 0.003100085797251317, "phrase": "processing_data"}, {"score": 0.002969628818856786, "phrase": "new_data"}, {"score": 0.0028142286985235977, "phrase": "load_balancing"}, {"score": 0.002473560912156024, "phrase": "processing_nodes"}, {"score": 0.0023950275815082297, "phrase": "poor_performance"}, {"score": 0.0022941723937662927, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "linux_pc_cluster"}], "paper_keywords": [""], "paper_abstract": "We present a data-list management library that both simplifies parallel programming and balances the workload transparently to the programmer. We present its use with an application that dynamically generates data, such as those based on searching trees. Under these applications, processing data can unpredictably generate new data to process. Without load balancing, these applications are most likely to imbalance the workload across processing nodes resulting in poor performance. We present experimental results on the performance of our library using a Linux PC cluster.", "paper_title": "Simple, list-based parallel programming with transparent load balancing", "paper_id": "WOS:000238107100111"}