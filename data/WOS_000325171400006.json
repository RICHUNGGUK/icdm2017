{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "classifier_configuration"}, {"score": 0.04966229511350132, "phrase": "classifier_combination"}, {"score": 0.04924934083174295, "phrase": "bug_localization"}, {"score": 0.04664352394990268, "phrase": "bug_report"}, {"score": 0.043984116010037995, "phrase": "current_research"}, {"score": 0.004431149592844886, "phrase": "manual_bug_localization"}, {"score": 0.0042415434489566995, "phrase": "source_code_entities"}, {"score": 0.004167982855788402, "phrase": "bug_localization_classifiers"}, {"score": 0.004095692768056685, "phrase": "information_retrieval_models"}, {"score": 0.003305243635051068, "phrase": "parameter_values"}, {"score": 0.003247868216333148, "phrase": "best_performance"}, {"score": 0.0030414140732789186, "phrase": "large_space"}, {"score": 0.0030148941188459987, "phrase": "classifier_configurations"}, {"score": 0.0027985846558073457, "phrase": "multiple_classifier_configurations"}, {"score": 0.00266693888510356, "phrase": "detailed_case_study"}, {"score": 0.0024218895273910943, "phrase": "significant_impact"}, {"score": 0.0023180581939456686, "phrase": "multiple_classifiers"}, {"score": 0.0021801135036476136, "phrase": "intelligently_defined_subspaces"}, {"score": 0.0021049977753042253, "phrase": "even_the_best_individual_classifiers"}], "paper_keywords": ["Software maintenance", " bug localization", " information retrieval", " VSM", " LSI", " LDA", " classifier combination"], "paper_abstract": "Bug localization is the task of determining which source code entities are relevant to a bug report. Manual bug localization is labor intensive since developers must consider thousands of source code entities. Current research builds bug localization classifiers, based on information retrieval models, to locate entities that are textually similar to the bug report. Current research, however, does not consider the effect of classifier configuration, i.e., all the parameter values that specify the behavior of a classifier. As such, the effect of each parameter or which parameter values lead to the best performance is unknown. In this paper, we empirically investigate the effectiveness of a large space of classifier configurations, 3,172 in total. Further, we introduce a framework for combining the results of multiple classifier configurations since classifier combination has shown promise in other domains. Through a detailed case study on over 8,000 bug reports from three large-scale projects, we make two main contributions. First, we show that the parameters of a classifier have a significant impact on its performance. Second, we show that combining multiple classifiers-whether those classifiers are hand-picked or randomly chosen relative to intelligently defined subspaces of classifiers-improves the performance of even the best individual classifiers.", "paper_title": "The Impact of Classifier Configuration and Classifier Combination on Bug Localization", "paper_id": "WOS:000325171400006"}