{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "component-based_dds_application_development"}, {"score": 0.004352876088312741, "phrase": "component-based_software_techniques"}, {"score": 0.004270003565426343, "phrase": "commonly_used_component_middleware_platforms"}, {"score": 0.0038047474331318974, "phrase": "omg_data_distribution_service"}, {"score": 0.0036788184374592706, "phrase": "wide_range"}, {"score": 0.003643607569483598, "phrase": "qos_settings"}, {"score": 0.0033575566897536906, "phrase": "significant_source-level_configuration"}, {"score": 0.003049555059533735, "phrase": "boilerplate_\"glue\"_code"}, {"score": 0.0030058503645435455, "phrase": "run-time_configuration"}, {"score": 0.0026268961477241026, "phrase": "component-based_middleware_technologies"}, {"score": 0.0023972750359328235, "phrase": "inherent_and_accidental_complexities"}, {"score": 0.0022302306304023602, "phrase": "component-based_dre_systems"}, {"score": 0.002198242191529977, "phrase": "dds's_powerful_qos_capabilities"}, {"score": 0.002166711569953301, "phrase": "dds_qos_policy_settings"}, {"score": 0.0021049977753042253, "phrase": "dds_applications"}], "paper_keywords": ["Software", " Components", " Deployment", " Optimizations", " component-based real-time systems", " predictable deployment"], "paper_abstract": "Enterprise distributed real-time and embedded (DRE) systems are increasingly being developed with the use of component-based software techniques. Unfortunately, commonly used component middleware platforms provide limited support for event-based publish/subscribe (pub/sub) mechanisms that meet both quality-of-service (QoS) and configurability requirements of DRE systems. On the other hand, although pub/sub technologies, such as OMG Data Distribution Service (DDS), support a wide range of QoS settings, the level of abstraction they provide make it hard to configure them due to the significant source-level configuration that must be hard-coded at compile time or tailored at run-time using proprietary, ad hoc configuration logic. Moreover, developers of applications using native pub/sub technologies must write large amounts of boilerplate \"glue\" code to support run-time configuration of QoS properties, which is tedious and error-prone. This paper describes a novel, generative approach that combines the strengths of QoS-enabled pub/sub middleware with component-based middleware technologies. In particular, this paper describes the design and implementation of DDS4CIAO which addresses a number of inherent and accidental complexities in the DDS4CCM standard. DDS4CIAO simplifies the development, deployment, and configuration of component-based DRE systems that leverage DDS's powerful QoS capabilities by provisioning DDS QoS policy settings and simplifying the development of DDS applications.", "paper_title": "Infrastructure for Component-Based DDS Application Development", "paper_id": "WOS:000303558100008"}