{"auto_keywords": [{"score": 0.03720109862972001, "phrase": "sort_orders"}, {"score": 0.004597754207658615, "phrase": "multiple_sort_orders"}, {"score": 0.004451546786101008, "phrase": "multiple_indices"}, {"score": 0.004309968592440261, "phrase": "multiple_reports"}, {"score": 0.004153647187175639, "phrase": "complex_query"}, {"score": 0.004096493540086106, "phrase": "multiple_instances"}, {"score": 0.00398452530840582, "phrase": "batch_processing"}, {"score": 0.0037006243674469657, "phrase": "multiple_sortings"}, {"score": 0.003484864867147635, "phrase": "sort-sharing_techniques"}, {"score": 0.0032968474833776906, "phrase": "particular_order"}, {"score": 0.003118942369691329, "phrase": "powerful_evaluation_technique"}, {"score": 0.0029642838574678526, "phrase": "seemingly_non-related_sort_orders"}, {"score": 0.00288317238346065, "phrase": "specific_set"}, {"score": 0.0027913353347879507, "phrase": "best_combination"}, {"score": 0.0026899455459275575, "phrase": "total_processing_cost"}, {"score": 0.0025802660239538353, "phrase": "traditional_query_optimizer_extensible"}, {"score": 0.0024865237976623286, "phrase": "truly_cheapest_execution_plan"}, {"score": 0.0022772782536385717, "phrase": "prototype_implementation"}, {"score": 0.002174303033371867, "phrase": "synthetic_data"}, {"score": 0.0021344259291927914, "phrase": "significant_performance_improvement"}, {"score": 0.0021049977753042253, "phrase": "traditional_evaluation_scheme"}], "paper_keywords": ["Query processing", " Sort operation", " Sort sharing", " Cooperative sorting"], "paper_abstract": "Many database applications require sorting a table (or relation) over multiple sort orders. Some examples include creation of multiple indices on a relation, generation of multiple reports from a table, evaluation of a complex query that involves multiple instances of a relation, and batch processing of a set of queries. In this paper, we study how to optimize multiple sortings of a table. We investigate the correlation between sort orders and exploit sort-sharing techniques of reusing the (partial) work done to sort a table on a particular order for another order. Specifically, we introduce a novel and powerful evaluation technique, called cooperative sorting, that enables sort sharing between seemingly non-related sort orders. Subsequently, given a specific set of sort orders, we determine the best combination of various sort-sharing techniques so as to minimize the total processing cost. We also develop techniques to make a traditional query optimizer extensible so that it will not miss the truly cheapest execution plan with the sort-sharing (post-) optimization turned on. We demonstrate the efficiency of our ideas with a prototype implementation in PostgreSQL and evaluate the performance using both TPC-DS benchmark and synthetic data. Our experimental results show significant performance improvement over the traditional evaluation scheme.", "paper_title": "Sort-sharing-aware query processing", "paper_id": "WOS:000304145500006"}