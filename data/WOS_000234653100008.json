{"auto_keywords": [{"score": 0.03350736788271393, "phrase": "transform-space_view"}, {"score": 0.019771167374789848, "phrase": "original-space_indexes"}, {"score": 0.007740489563401459, "phrase": "transform_space"}, {"score": 0.007122531763672333, "phrase": "original-space_index"}, {"score": 0.006915241614009034, "phrase": "original_space"}, {"score": 0.004599621236228673, "phrase": "spatial_joins"}, {"score": 0.004118925784964089, "phrase": "join_algorithms"}, {"score": 0.004009482573367826, "phrase": "-space_indexes"}, {"score": 0.003338305188748132, "phrase": "novel_mechanism"}, {"score": 0.0031974079543917403, "phrase": "new_notion"}, {"score": 0.003137644498660331, "phrase": "transform-space_view_join_algorithm"}, {"score": 0.003087305801054765, "phrase": "virtual_transform-space_index"}, {"score": 0.002941069587970774, "phrase": "existing_original-space_index"}, {"score": 0.0029173773821308843, "phrase": "transform-space_index"}, {"score": 0.0028783125147910983, "phrase": "negligible_time"}, {"score": 0.0028017406689915124, "phrase": "original_space_index"}, {"score": 0.0024882479452981595, "phrase": "existing_ones"}, {"score": 0.0022701845076460244, "phrase": "disk_accesses"}, {"score": 0.002174270259589384, "phrase": "lower-bound_algorithm"}, {"score": 0.0021393542556570706, "phrase": "proposed_transform-space_view"}], "paper_keywords": ["transform-space view", " adaptive row major order", " spatial join", " corner transformation", " databases"], "paper_abstract": "Spatial joins find all pairs of objects that satisfy a given spatial relationship. In spatial joins using indexes, original-space indexes such as the R-tree are widely used. An original-space index is the one that indexes objects as represented in the original space. Since original-space indexes deal with extents of objects, it is relatively complex to optimize join algorithms using these indexes. On the other hand, transform-space indexes, which transform objects in the original space into points in the transform space and index them, deal only with points but no extents. Thus, optimization of join algorithms using these indexes can be relatively simple. However, the disadvantage of these join algorithms is that they cannot be applied to original-space indexes such as the R-tree; In this paper, we present a novel mechanism for achieving the best of these two types of algorithms. Specifically, we propose the new notion of the transform-space view and present the transform-space view join algorithm. The transform-space view is a virtual transform-space index based on an original-space index. It allows us to \"interpret\" or \"view\" an existing original-space index as a transform-space index with no space and negligible time overhead and without actually modifying the structure of the original space index or changing object representation. The transform-space view join algorithm joins two original-space indexes in the transform space through the notion of the transform-space view. Through analysis and experiments, we verify the excellence of the transform-space view join algorithm. The transform-space view join algorithm always outperforms existing ones for all the data sets tested in terms of all three measures used: the one-pass buffer size (the minimum buffer size required for guaranteeing one disk access per page), the number of disk accesses for a given buffer size, and the wall clock time. Thus, it constitutes a lower-bound algorithm. We believe that the proposed transform-space view can be applied to developing various new spatial query processing algorithms in the transform space.", "paper_title": "Transform-space view: Performing spatial join in the transform space using original-space indexes", "paper_id": "WOS:000234653100008"}