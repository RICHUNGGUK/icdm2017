{"auto_keywords": [{"score": 0.0437544826472625, "phrase": "fcfs"}, {"score": 0.0320762653337174, "phrase": "real_time"}, {"score": 0.00481495049065317, "phrase": "task_scheduling_for_multiprocessor_systems"}, {"score": 0.004777392826700429, "phrase": "autonomous_performance-optimizing_control"}, {"score": 0.0044002186469797476, "phrase": "unique_characteristic"}, {"score": 0.004214638437051267, "phrase": "first-come-first-serve"}, {"score": 0.004021065055449586, "phrase": "job-bypass_limit"}, {"score": 0.0039122637074546895, "phrase": "starvation_problem"}, {"score": 0.0038665369393234713, "phrase": "nbnp_platform"}, {"score": 0.003674461410107989, "phrase": "mandatory_blocking"}, {"score": 0.0035750047462243836, "phrase": "bypass_limit"}, {"score": 0.003424107910734022, "phrase": "next_immediate_turn"}, {"score": 0.003357633232360232, "phrase": "scheduling_process"}, {"score": 0.0033314049082500794, "phrase": "flexibility_benefit"}, {"score": 0.0031658283119347396, "phrase": "normally_used_fcfs"}, {"score": 0.0029849487711701515, "phrase": "ljf"}, {"score": 0.002926973459215349, "phrase": "different_situations"}, {"score": 0.002892729377519916, "phrase": "main_focus"}, {"score": 0.002792375587031108, "phrase": "automatic_control_process"}, {"score": 0.0027597018725736165, "phrase": "automatic_adjustment"}, {"score": 0.00268493828558848, "phrase": "observed_performance"}, {"score": 0.002612194827110595, "phrase": "well-known_feedback-control_process"}, {"score": 0.002531463482341473, "phrase": "unbiased_approach"}, {"score": 0.002331189621118592, "phrase": "control_process"}, {"score": 0.002197891020396052, "phrase": "performance_results"}, {"score": 0.0021467260992026295, "phrase": "significant_improvement"}, {"score": 0.0021215910859085146, "phrase": "plain_ljf"}, {"score": 0.002104998402292511, "phrase": "fcfs."}], "paper_keywords": ["scheduling", " resource sharing", " multiprocessor system", " supercomputing", " autonomous control"], "paper_abstract": "In all non-blocking non-preemptive (NBNP) scheduling techniques for a multicomputer system for processor allocation, Largest-Job-First (LJF) technique proves to possess a unique characteristic in utilizing as many processors as possible compared to others such as First-Come-First-Serve (FCFS) and Smallest-Job-First (SJF). However, a job-bypass limit that is preset to preclude the starvation problem in an NBNP platform may lead to problems in all techniques. The scheduling becomes \"mandatory blocking\" whenever a job reaches this bypass limit and thus has to be scheduled for allocation in the next immediate turn. This deprives the scheduling process the flexibility benefit in its non- blocking nature. Such an adverse effect is especially pronounced in LJF compared to the normally used FCFS one. Thus, how to find a balance in real time between employing the LJF and the FCFS in different situations is the main focus of this paper. We first propose an automatic control process which allows automatic adjustment on the algorithm based on the observed performance. This process, unlike the well-known feedback-control process, adjusts the algorithm based on an unbiased approach in order to disengage the dependence of performance on the input. We then propose two different scheduling techniques that simply employ this control process to self-adjust the weights in between using the two different techniques in real time. Performance results observed from our simulation runs show a significant improvement over the plain LJF and FCFS.", "paper_title": "Task Scheduling for Multiprocessor Systems with Autonomous Performance-Optimizing Control", "paper_id": "WOS:000276057900002"}