{"auto_keywords": [{"score": 0.029575659282087514, "phrase": "mathematical_definitions"}, {"score": 0.024586093495145695, "phrase": "formal_verification"}, {"score": 0.00481495049065317, "phrase": "formal_analysis"}, {"score": 0.004512835984526125, "phrase": "iec"}, {"score": 0.00441635700580562, "phrase": "standard_architecture"}, {"score": 0.004321952227344232, "phrase": "function_blocks"}, {"score": 0.004229556887896042, "phrase": "distributed_control"}, {"score": 0.0041840994704406866, "phrase": "measurement_applications"}, {"score": 0.004007083686875716, "phrase": "formal_semantics"}, {"score": 0.003964007795174772, "phrase": "different_interpretations"}, {"score": 0.0037150687722055727, "phrase": "execution_behavior"}, {"score": 0.0036159990127332315, "phrase": "different_platforms"}, {"score": 0.00355782527287734, "phrase": "different_behavior"}, {"score": 0.002944284514509205, "phrase": "execution_model"}, {"score": 0.002685558057339722, "phrase": "application's_behavior"}, {"score": 0.002613870237087035, "phrase": "execution_semantics"}, {"score": 0.0024231382864800173, "phrase": "runtime_environment"}, {"score": 0.0023841092222805253, "phrase": "software_tool"}, {"score": 0.002345707314211983, "phrase": "formal_models"}, {"score": 0.002198173002125907, "phrase": "execution_errors"}, {"score": 0.0021049977753042253, "phrase": "factory_floor"}], "paper_keywords": ["Manufacturing automation software", " modeling", " software verification and validation"], "paper_abstract": "IEC 61499 is a standard architecture, based on function blocks, for developing distributed control and measurement applications. However, the standard has no formal semantics and different interpretations of the standard have emerged. As a consequence, the execution behavior of applications running on different platforms may exhibit different behavior, thus making it harder to transfer applications between the platforms. This paper shows how three different execution semantics, buffered sequential execution model (BSEM), nonpreempted multithreaded (NPMTR), and cyclic buffered execution model (CBEM) can be mathematically defined. The mathematical definitions can be used to analyze an application's behavior when executed using those execution semantics. The mathematical definitions have been used as a basis for implementation of a runtime environment and a software tool that generates formal models suitable for formal verification. Formal verification can be used to help discover execution errors before the application is executed on the factory floor.", "paper_title": "On Formal Analysis of IEC 61499 Applications, Part B: Execution Semantics", "paper_id": "WOS:000277343800004"}