{"auto_keywords": [{"score": 0.04771533004845802, "phrase": "garbage_collection"}, {"score": 0.00481495049065317, "phrase": "hard_real-time_garbage_collection"}, {"score": 0.004388450908826472, "phrase": "large_systems"}, {"score": 0.0040334640350288, "phrase": "real-time_systems"}, {"score": 0.0038996120252338556, "phrase": "unpredictable_temporal_behavior"}, {"score": 0.0038343546245999285, "phrase": "current_implementations"}, {"score": 0.003738502710504415, "phrase": "garbage_collector"}, {"score": 0.0034944094552943, "phrase": "real-time_garbage_collector"}, {"score": 0.0032938942910948096, "phrase": "normal_real-time_thread"}, {"score": 0.0032115093493071366, "phrase": "deadline_monotonic_assigned_priority"}, {"score": 0.0030787405733989615, "phrase": "upper_bound"}, {"score": 0.0030017207229983385, "phrase": "collector_period"}, {"score": 0.0029020077365708966, "phrase": "application_threads"}, {"score": 0.00257831812581194, "phrase": "restricted_execution_model"}, {"score": 0.002471661547432869, "phrase": "root_scanning"}, {"score": 0.0023694065215394593, "phrase": "static_data"}, {"score": 0.0021228663458966813, "phrase": "java_processor"}, {"score": 0.0021049977753042253, "phrase": "jop."}], "paper_keywords": ["Real-time systems", " Garbage collection", " Real-time Java"], "paper_abstract": "Automatic memory management or garbage collection greatly simplifies development of large systems. However, garbage collection is usually not used in real-time systems due to the unpredictable temporal behavior of current implementations of a garbage collector. In this paper we propose a real-time garbage collector that can be scheduled like a normal real-time thread with a deadline monotonic assigned priority. We provide an upper bound for the collector period so that the application threads will never run out of memory. Furthermore, we show that the restricted execution model of the Safety Critical Java standard simplifies root scanning and reduces copying of static data. Our proposal has been implemented and evaluated in the context of the Java processor JOP.", "paper_title": "Scheduling of hard real-time garbage collection", "paper_id": "WOS:000281112800002"}