{"auto_keywords": [{"score": 0.049613254104042076, "phrase": "scientific_workflows"}, {"score": 0.032461751717849395, "phrase": "shimming_problem"}, {"score": 0.004675768396728975, "phrase": "web_services"}, {"score": 0.004496402246090618, "phrase": "so-called_shimming_problem"}, {"score": 0.004240116703465252, "phrase": "special_kind"}, {"score": 0.004057495982111461, "phrase": "appropriate_data_transformations"}, {"score": 0.003998380230709541, "phrase": "data_type_inconsistencies"}, {"score": 0.003920891569777894, "phrase": "existing_shimming_techniques"}, {"score": 0.0038827100184187805, "phrase": "limited_automation"}, {"score": 0.0037336520904376687, "phrase": "ontological_mappings"}, {"score": 0.0036792371574197826, "phrase": "data_transformations"}, {"score": 0.003572766402294553, "phrase": "shimming_code"}, {"score": 0.003385480888810982, "phrase": "workflow_design"}, {"score": 0.0033361232750221863, "phrase": "user's_attention"}, {"score": 0.003303617297414837, "phrase": "functional_components"}, {"score": 0.003024909947609294, "phrase": "runtime_coercion_problem"}, {"score": 0.002951739421935396, "phrase": "type_systems"}, {"score": 0.0028662606272282926, "phrase": "scientific_workflow_model"}, {"score": 0.002783250284824728, "phrase": "well-typed_workflows"}, {"score": 0.002548331088496964, "phrase": "\"invisible_shims"}, {"score": 0.002498873893632724, "phrase": "runtime_coercions"}, {"score": 0.002379379676378223, "phrase": "well-typed_workflow"}, {"score": 0.002232519579957707, "phrase": "type_system"}], "paper_keywords": ["Shim", " shimming problem", " web service mediation", " scientific workflows"], "paper_abstract": "When composing Web services into scientific workflows, users often face the so-called shimming problem when connecting two related but incompatible components. The problem is addressed by inserting a special kind of adaptors, called shims, that perform appropriate data transformations to resolve data type inconsistencies. However, existing shimming techniques provide limited automation and burden users with having to define ontological mappings, generate data transformations, and even manually write shimming code. In addition, these approaches insert many visible shims that clutter workflow design and distract user's attention from functional components of the workflow. To address these issues, we 1) reduce the shimming problem to a runtime coercion problem in the theory of type systems, 2) propose a scientific workflow model and define the notion of well-typed workflows, 3) develop an algorithm to typecheck workflows, 4) design a function that inserts \"invisible shims\", or runtime coercions into workflows, thereby solving the shimming problem for any well-typed workflow, 5) implement our automated shimming technique, including all the proposed algorithms, lambda calculus, type system, and translation functions in our VIEW system and present two case studies to validate our approach.", "paper_title": "Typetheoretic Approach to the Shimming Problem in Scientific Workflows", "paper_id": "WOS:000362791500012"}