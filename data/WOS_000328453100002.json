{"auto_keywords": [{"score": 0.04547326679310703, "phrase": "late_propagation"}, {"score": 0.01788423066215014, "phrase": "clone_pair"}, {"score": 0.00601067892634371, "phrase": "clone_evolution"}, {"score": 0.00481495049065317, "phrase": "empirical_study"}, {"score": 0.004761313844340557, "phrase": "late_propagation_clone"}, {"score": 0.004591067932677917, "phrase": "software_system"}, {"score": 0.004451755800490286, "phrase": "clone_evolution_history"}, {"score": 0.004319696668508205, "phrase": "specific_types"}, {"score": 0.004058572713799062, "phrase": "code_segments"}, {"score": 0.003990894139793398, "phrase": "later_commit"}, {"score": 0.003968585341590009, "phrase": "existing_work"}, {"score": 0.0039024014688338964, "phrase": "clone_evolution_pattern"}, {"score": 0.00379452936798156, "phrase": "high_number"}, {"score": 0.003587616378156851, "phrase": "simon_harris"}, {"score": 0.0035675551620068906, "phrase": "victoria"}, {"score": 0.003547622378939909, "phrase": "australia"}, {"score": 0.0034495044604576385, "phrase": "queen's_university"}, {"score": 0.0034302117130859456, "phrase": "kingston"}, {"score": 0.0033919636445980473, "phrase": "canada"}, {"score": 0.003319032936838667, "phrase": "fault_proneness"}, {"score": 0.0033166917181573397, "phrase": "eight_types"}, {"score": 0.003126968800190193, "phrase": "software_systems"}, {"score": 0.00305757369653273, "phrase": "late_propagations"}, {"score": 0.0028826300971889923, "phrase": "diverging_changes"}, {"score": 0.0026948844239238334, "phrase": "diverging_modification"}, {"score": 0.002664801237762847, "phrase": "reconciling_change"}, {"score": 0.0025406397429561397, "phrase": "former_case"}, {"score": 0.002477260798809435, "phrase": "latter_case"}, {"score": 0.0021649437083408425, "phrase": "delay_period"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["clone genealogies", " late propagation", " fault proneness"], "paper_abstract": "Two similar code segments, or clones, form a clone pair within a software system. The changes to the clones over time create a clone evolution history. In this work, we study late propagation, a specific pattern of clone evolution. In late propagation, one clone in a clone pair is modified, causing the clone pair to diverge. The code segments are then reconciled in a later commit. Existing work has established late propagation as a clone evolution pattern and suggested that the pattern is related to a high number of faults. In this study, we examine the characteristics of late propagation in three long-lived software systems using the Simian ( Simon Harris, Victoria, Australia, http://www.harukizaemon.com/simian), CCFinder, and NiCad (Software Technology Laboratory, Queen's University, Kingston, ON, Canada) clone detection tools. We define eight types of late propagation and compare them to other forms of clone evolution. Our results not only verify that late propagation is more harmful to software systems but also establish that some specific types of late propagations are more harmful than others. Specifically, two types are most risky: (1) when a clone experiences diverging changes and then a reconciling change without any modification to the other clone in a clone pair; and (2) when two clones undergo a diverging modification followed by a reconciling change that modifies both the clones in a clone pair. We also observe that the reconciliation in the former case is more prone to faults than in the latter case. We determine that the size of the clones experiencing late propagation has an effect on the fault proneness of specific types of late propagation genealogies. Lastly, we cannot report a correlation between the delay of the propagation of changes and its faults, as the fault proneness of each delay period is system dependent. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "An empirical study of faults in late propagation clone genealogies", "paper_id": "WOS:000328453100002"}