{"auto_keywords": [{"score": 0.036659728884727856, "phrase": "abstracted_relations"}, {"score": 0.015719716506582538, "phrase": "interprocedural_shape_analysis"}, {"score": 0.012924584439704467, "phrase": "memory_configurations"}, {"score": 0.00457696724030363, "phrase": "imperative_programs"}, {"score": 0.004530794611704416, "phrase": "recursive_procedure_calls"}, {"score": 0.004485085675709643, "phrase": "heap-allocated_storage"}, {"score": 0.00441738161338662, "phrase": "destructive_updating"}, {"score": 0.00437281181878921, "phrase": "pointer-valued_fields"}, {"score": 0.0040525061916685924, "phrase": "new_method"}, {"score": 0.003871653343842317, "phrase": "abstract_interpretation"}, {"score": 0.0036245239349157236, "phrase": "compositional_approach"}, {"score": 0.0033759367489122716, "phrase": "shape_transformation"}, {"score": 0.00317643367669255, "phrase": "relational_composition"}, {"score": 0.0030811340338342454, "phrase": "meet_operation"}, {"score": 0.002884317729022721, "phrase": "new_algorithm"}, {"score": 0.0028551716387011637, "phrase": "context-sensitive_interprocedural_shape_analysis"}, {"score": 0.0027835848648596513, "phrase": "procedure_summaries"}, {"score": 0.002672750634553146, "phrase": "meet-based_composition_operation"}, {"score": 0.0025793874956029795, "phrase": "summary_transformer"}, {"score": 0.00248927752933113, "phrase": "call_site"}, {"score": 0.002237357942660354, "phrase": "recursive_programs"}, {"score": 0.0021049977753042253, "phrase": "binary_trees"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Verification", " Abstract interpretation", " context-sensitive analysis", " interprocedural dataflow analysis", " destructive updating", " pointer analysis", " shape analysis", " static analysis", " 3-valued logic"], "paper_abstract": "This article addresses the verification of properties of imperative programs with recursive procedure calls, heap-allocated storage, and destructive updating of pointer-valued fields, that is, interprocedural shape analysis. The article makes three contributions. -It introduces a new method for abstracting relations over memory configurations for use in abstract interpretation. -It shows how this method furnishes the elements needed for a compositional approach to shape analysis. In particular, abstracted relations are used to represent the shape transformation performed by a sequence of operations, and an overapproximation to relational composition can be performed using the meet operation of the domain of abstracted relations. -It applies these ideas in a new algorithm for context-sensitive interprocedural shape analysis. The algorithm creates procedure summaries using abstracted relations over memory configurations, and the meet-based composition operation provides a way to apply the summary transformer for a procedure P at each call site from which P is called. The algorithm has been applied successfully to establish properties of both (i) recursive programs that manipulate lists and (ii) recursive programs that manipulate binary trees.", "paper_title": "A Relational Approach to Interprocedural Shape Analysis", "paper_id": "WOS:000274376200002"}