{"auto_keywords": [{"score": 0.03537665307038805, "phrase": "memvisor"}, {"score": 0.015579956801677888, "phrase": "binary_translation"}, {"score": 0.015441420168723307, "phrase": "cloud_environments"}, {"score": 0.008738485287978262, "phrase": "backup_space"}, {"score": 0.00481495049065317, "phrase": "multi-granularity_memory_mirroring"}, {"score": 0.004602395776895036, "phrase": "dram_memory"}, {"score": 0.004499647408293102, "phrase": "memory_errors"}, {"score": 0.00441909542037375, "phrase": "current_memory_availability_strategies"}, {"score": 0.004339979174946844, "phrase": "memory_backup"}, {"score": 0.004300951511110487, "phrase": "error_recovery"}, {"score": 0.004204904449336037, "phrase": "mirror_memory"}, {"score": 0.004167086373747367, "phrase": "costly_peripheral_equipments"}, {"score": 0.004129607015893271, "phrase": "existing_software_approaches"}, {"score": 0.003965061486705487, "phrase": "high_overhead"}, {"score": 0.003929391999210588, "phrase": "practical_usage"}, {"score": 0.0037557833338522934, "phrase": "lxc"}, {"score": 0.0036224139706218916, "phrase": "application-level_virtualization"}, {"score": 0.00357362651129581, "phrase": "multiple_isolated_systems"}, {"score": 0.003525493807130663, "phrase": "single_host"}, {"score": 0.00338493754743055, "phrase": "novel_system"}, {"score": 0.003309278541665552, "phrase": "high_availability_memory"}, {"score": 0.003220709449062307, "phrase": "software_approach"}, {"score": 0.0031917146566068245, "phrase": "flexible_multi-granularity_memory"}, {"score": 0.003023129616910419, "phrase": "memory_areas"}, {"score": 0.0029289191071848403, "phrase": "process_level"}, {"score": 0.002889444701599236, "phrase": "whole_user_mode_applications"}, {"score": 0.002627587221594597, "phrase": "instruction_level"}, {"score": 0.002592163447843447, "phrase": "memory_failures"}, {"score": 0.002433048706565187, "phrase": "traditional_software_approaches"}, {"score": 0.002400241288973103, "phrase": "instruction_level_synchronization"}, {"score": 0.0023465400668244386, "phrase": "data_loss"}, {"score": 0.0023044434462692483, "phrase": "backup_overhead"}, {"score": 0.0021049977753042253, "phrase": "worst_case"}], "paper_keywords": ["Application level memory mirroring", " multi-granularity high availability", " virtualization"], "paper_abstract": "As the size of DRAM memory grows in clusters, memory errors are common. Current memory availability strategies mostly focus on memory backup and error recovery. Hardware solutions like mirror memory needs costly peripheral equipments while existing software approaches reduce the expense but are limited by the high overhead in practical usage. Moreover, in cloud environments, containers such as LXC now can be used as process and application-level virtualization to run multiple isolated systems on a single host. In this paper, we present a novel system called Memvisor to provide high availability memory mirroring. It is a software approach achieving flexible multi-granularity memory mirroring based on virtualization and binary translation. We can flexibly set memory areas to be mirrored or not from process level to the whole user mode applications. Then, all memory write instructions are duplicated. Data written to memory are synchronized to backup space in the instruction level. If memory failures happen, Memvisor will recover the data from the backup space. Compared with traditional software approaches, the instruction level synchronization lowers the probability of data loss and reduces the backup overhead. The results show that Memvisor outperforms the state-of-the-art software approaches even in the worst case.", "paper_title": "Multi-Granularity Memory Mirroring via Binary Translation in Cloud Environments", "paper_id": "WOS:000209724300005"}