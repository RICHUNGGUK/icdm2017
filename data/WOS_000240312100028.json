{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "enforcer_-_efficient"}, {"score": 0.004630423009638876, "phrase": "thread_schedule"}, {"score": 0.004553510708976456, "phrase": "well-known_problem"}, {"score": 0.004027031316965272, "phrase": "network_availability"}, {"score": 0.0036214184763804034, "phrase": "host_system"}, {"score": 0.0034437574674180365, "phrase": "test_suite"}, {"score": 0.002800158709933889, "phrase": "relevant_outcomes"}, {"score": 0.0027077425189030195, "phrase": "enforcer"}, {"score": 0.002618366076489732, "phrase": "unit_tests"}, {"score": 0.0025892330566358503, "phrase": "coverage_information"}, {"score": 0.0025461386232786356, "phrase": "fault_injection"}, {"score": 0.00244834685428352, "phrase": "unit_test_infrastructure"}, {"score": 0.0022893422054387235, "phrase": "previous_approaches"}, {"score": 0.0021049977753042253, "phrase": "extra_test_code"}], "paper_keywords": [""], "paper_abstract": "Non-determinism of the thread schedule is a well-known problem in concurrent programming. However, other sources of non-determinism exist which cannot be controlled by an application, such as network availability. Testing a program with its communication resources being unavailable is difficult, as it requires a change on the host system, which has to be coordinated with the test suite. Essentially, each interaction of the application with the environment can result in a failure. Only some of these failures can be tested. Our work identifies such potential failures and develops a strategy for testing all relevant outcomes of such actions. Our tool, Enforcer, combines the structure of unit tests, coverage information, and fault injection. By taking advantage of a unit test infrastructure, performance can be improved by orders of magnitude compared to previous approaches. Our tool has been tested on several real-world programs, where it found faults without requiring extra test code.", "paper_title": "Enforcer - Efficient failure injection", "paper_id": "WOS:000240312100028"}