{"auto_keywords": [{"score": 0.035537103511539554, "phrase": "token_list"}, {"score": 0.010763374395571174, "phrase": "ots"}, {"score": 0.008424745223341336, "phrase": "mtls"}, {"score": 0.008400286028964764, "phrase": "lsh"}, {"score": 0.005625799525869781, "phrase": "index_table"}, {"score": 0.00481495049065317, "phrase": "multi-dimensional_massive_database"}, {"score": 0.004707188147442449, "phrase": "massive_database_search"}, {"score": 0.004667399058297227, "phrase": "sensitive_hashing"}, {"score": 0.004550029253278477, "phrase": "nearest_neighbors"}, {"score": 0.004511562580804093, "phrase": "query_point"}, {"score": 0.004486509847039545, "phrase": "lsh-based_searching_scheme"}, {"score": 0.00447341965028879, "phrase": "high-dimensional_space"}, {"score": 0.0044612395473902595, "phrase": "tls"}, {"score": 0.004423061344624088, "phrase": "high-dimensional_data"}, {"score": 0.004385663349966071, "phrase": "data_similarity"}, {"score": 0.004203343568960231, "phrase": "similar_data"}, {"score": 0.00412086349411889, "phrase": "memory_resources"}, {"score": 0.004097595199141165, "phrase": "search_delays"}, {"score": 0.003927203683176278, "phrase": "token_list_based_information_search_scheme"}, {"score": 0.0038392331564122387, "phrase": "lsh._tls"}, {"score": 0.003806752687389645, "phrase": "token_list_table"}, {"score": 0.003721470218011247, "phrase": "clusters_data_records"}, {"score": 0.0035767810270163312, "phrase": "small_number"}, {"score": 0.00353648053045938, "phrase": "relevant_data_records"}, {"score": 0.0034867406208212146, "phrase": "entire_database"}, {"score": 0.0033989591226986447, "phrase": "searching_time"}, {"score": 0.003313380246267812, "phrase": "optimized_token_list"}, {"score": 0.0033040050484645835, "phrase": "based_search_schemes"}, {"score": 0.003248306503864644, "phrase": "index-tree_and_hash_table_structures"}, {"score": 0.002916650173868229, "phrase": "hash_table_structure"}, {"score": 0.0028919522313933525, "phrase": "hash_id"}, {"score": 0.0027094017157764027, "phrase": "single-token_based_method"}, {"score": 0.002656158309155626, "phrase": "results_refinement"}, {"score": 0.00263366036297493, "phrase": "required_similarity"}, {"score": 0.0025819015229390663, "phrase": "multi-token_list_search_scheme"}, {"score": 0.0025239898026543964, "phrase": "database_proximity_search"}, {"score": 0.002405193760683982, "phrase": "massive_customer_data_integration_database"}, {"score": 0.0023848164282879885, "phrase": "comparison_experimental_results"}, {"score": 0.00228548445095552, "phrase": "search_efficiency"}, {"score": 0.0021472168069854056, "phrase": "two-token_adjacent_token_list"}], "paper_keywords": ["Similarity data search", " Proximity search", " Locality sensitive hash", " Database"], "paper_abstract": "Finding proximity information is crucial for massive database search. Locality Sensitive Hashing (LSH) is a method for finding nearest neighbors of a query point in a high-dimensional space. It classifies high-dimensional data according to data similarity. However, the \"curse of dimensionality\" makes LSH insufficiently effective in finding similar data and insufficiently efficient in terms of memory resources and search delays. The contribution of this work is threefold. First, we study a Token List based information Search scheme (TLS) as an alternative to LSH. TLS builds a token list table containing all the unique tokens from the database, and clusters data records having the same token together in one group. Querying is conducted in a small number of groups of relevant data records instead of searching the entire database. Second, in order to decrease the searching time of the token list, we further propose the Optimized Token list based Search schemes (OTS) based on index-tree and hash table structures. An index-tree structure orders the tokens in the token list and constructs an index table based on the tokens. Searching the token list starts from the entry of the token list supplied by the index table. A hash table structure assigns a hash ID to each token. A query token can be directly located in the token list according to its hash ID. Third, since a single-token based method leads to high overhead in the results refinement given a required similarity, we further investigate how a Multi-Token List Search scheme (MTLS) improves the performance of database proximity search. We conducted experiments on the LSH-based searching scheme, TLS, OTS, and MTLS using a massive customer data integration database. The comparison experimental results show that TLS is more efficient than an LSH-based searching scheme, and OTS improves the search efficiency of TLS. Further, MTLS per forms better than TLS when the number of tokens is appropriately chosen, and a two-token adjacent token list achieves the shortest query delay in our testing dataset.", "paper_title": "Token list based information search in a multi-dimensional massive database", "paper_id": "WOS:000336277700010"}