{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "web_services"}, {"score": 0.04357203863023538, "phrase": "web_service_repository"}, {"score": 0.00477513738640734, "phrase": "efficient_planners"}, {"score": 0.004735651915966323, "phrase": "large-scale_service_repository"}, {"score": 0.004638354165775803, "phrase": "independent_software_components"}, {"score": 0.004561950666122737, "phrase": "service_providers"}, {"score": 0.004431246962597134, "phrase": "service_requesters"}, {"score": 0.0042157995925335544, "phrase": "single_service"}, {"score": 0.004112020122418323, "phrase": "service_request"}, {"score": 0.00399415558125301, "phrase": "efficient_method"}, {"score": 0.003895810929926511, "phrase": "connected_services"}, {"score": 0.003831591603702392, "phrase": "important_research_issue"}, {"score": 0.0036756196381448015, "phrase": "search_time_reduction"}, {"score": 0.003615016816532732, "phrase": "composite_service"}, {"score": 0.0035113478590679133, "phrase": "long_time"}, {"score": 0.0033824008297657494, "phrase": "service_repository"}, {"score": 0.0032581736321024373, "phrase": "user's_waiting_patience"}, {"score": 0.003177892611195514, "phrase": "efficient_approach"}, {"score": 0.003151572886432253, "phrase": "automatic_composition"}, {"score": 0.0029857126375093753, "phrase": "wsc"}, {"score": 0.002900037689072025, "phrase": "wsc_planning_problem"}, {"score": 0.0027020387992490367, "phrase": "planning_domain"}, {"score": 0.0026796513587872975, "phrase": "pddl"}, {"score": 0.0024554476124885806, "phrase": "response_time"}, {"score": 0.0023849523850778807, "phrase": "wsc_problems"}, {"score": 0.0023261372216194383, "phrase": "prototype_system"}, {"score": 0.0022972745526212658, "phrase": "extensive_experiments"}, {"score": 0.0022782315534795516, "phrase": "large-scale_web_service_repositories"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Web service", " Service composition", " Automated planning", " Deterministic planner", " PDDL"], "paper_abstract": "Web services as independent software components are published by service providers over the Internet and invoked by service requesters for their desired functionalities. In many cases, however, there is no single service in a Web service repository satisfying a service request. So how to design an efficient method for composing a chain of connected services has become an important research issue. Recently, much research has been done into the search time reduction when finding a composite service. However, most methods take a long time for traversing all of the Web services in a service repository, thus it makes their response time significantly overrun a user's waiting patience. This paper develops an efficient approach for automatic composition of Web services using the state-of-the-art Artificial Intelligence (AI) planners, where a Web service composition (WSC) problem is regarded as a WSC planning problem. Unlike most traditional WSC methods that traverse a Web service repository many times, our approach converts a Web service repository into a planning domain in PDDL just once, which will only be regenerated when the Web service repository changes. This treatment substantially reduces the response time and improves the scalability of solving WSC problems. We have implemented a prototype system and conducted extensive experiments on large-scale Web service repositories. The experimental results demonstrate that our proposed approach outperforms the state-of-the-art. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic composition of Web services using efficient planners in large-scale service repository", "paper_id": "WOS:000336116900009"}