{"auto_keywords": [{"score": 0.04000882785455032, "phrase": "uclid"}, {"score": 0.015262146623348821, "phrase": "decision_procedures"}, {"score": 0.009640710244083191, "phrase": "bit-level_machine"}, {"score": 0.00481495049065317, "phrase": "bit-level_pipelined_machines"}, {"score": 0.004490842671590769, "phrase": "bit-level_pipelined_machine_models"}, {"score": 0.0043804319008535555, "phrase": "deductive_reasoning"}, {"score": 0.004272724011826495, "phrase": "theorem-proving_systems"}, {"score": 0.0040854526743211396, "phrase": "bit-level_designs"}, {"score": 0.003984968827278219, "phrase": "extensive_expert_user_support"}, {"score": 0.003643185395780667, "phrase": "term-level_pipelined_machine_models"}, {"score": 0.0035358770665604657, "phrase": "numerous_abstractions"}, {"score": 0.0034146585649631692, "phrase": "instruction_set"}, {"score": 0.0027834145465170292, "phrase": "term-level_abstraction"}, {"score": 0.002701361707441567, "phrase": "instruction_set_architecture"}, {"score": 0.002595698433525986, "phrase": "uclid."}, {"score": 0.0021049977753042253, "phrase": "prohibitively_more_effort"}], "paper_keywords": ["verification", " pipelined machines", " refinement", " bit-level", " automated reasoning", " ACL2"], "paper_abstract": "We describe an approach to verifying bit-level pipelined machine models using a combination of deductive reasoning and decision procedures. While theorem-proving systems such as ACL2 have been used to verify bit-level designs, they typically require extensive expert user support. Decision procedures such as those implemented in UCLID can be used to automatically and efficiently verify term-level pipelined machine models, but these models use numerous abstractions, implement a subset of the instruction set, and are far from executable. We show that by integrating UCLID with the ACL2 theorem-proving system, we can use ACL2 to reduce the proof that an executable, bit-level machine refines its instruction set architecture to a proof that a term-level abstraction of the bit-level machine refines the instruction set architecture, which is then handled automatically by UCLID. We demonstrate the efficiency of our approach by applying it to verify a complex, seven-stage, bit-level interface pipelined machine model that implements 593 instructions and has features such as branch prediction, exceptions, and predicated instruction execution. Such a proof is not possible using UCLID and would require prohibitively more effort using just ACL2.", "paper_title": "A framework for verifying bit-level pipelined machines based on automated deduction and decision procedures", "paper_id": "WOS:000243607600006"}