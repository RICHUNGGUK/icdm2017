{"auto_keywords": [{"score": 0.046487871371234384, "phrase": "processor_technology"}, {"score": 0.041336067548595166, "phrase": "modern_processor"}, {"score": 0.030686134099939134, "phrase": "overall_speedup"}, {"score": 0.004815112813718618, "phrase": "cache"}, {"score": 0.004691684576246597, "phrase": "modern_and_emerging_processors"}, {"score": 0.004537804310268603, "phrase": "current_state"}, {"score": 0.004198010835867604, "phrase": "maximum_achievable_performance"}, {"score": 0.0041515831652973794, "phrase": "modern_architectures"}, {"score": 0.003985680946956402, "phrase": "frequent_pattern_mining_algorithms"}, {"score": 0.003897989308486044, "phrase": "detailed_performance_study"}, {"score": 0.0038263829059336564, "phrase": "best_frequent_pattern"}, {"score": 0.0037560869590718966, "phrase": "highly_efficient_memory_managers"}, {"score": 0.0036059320136308808, "phrase": "primary_performance_bottlenecks"}, {"score": 0.003579280847524597, "phrase": "poor_data_locality"}, {"score": 0.0035528259557800683, "phrase": "low_instruction_level_parallelism"}, {"score": 0.003448940584469061, "phrase": "cache-conscious_prefix_tree"}, {"score": 0.003360527337581911, "phrase": "resulting_tree"}, {"score": 0.003335683866508191, "phrase": "spatial_locality"}, {"score": 0.003120171161064748, "phrase": "data_structure"}, {"score": 0.0030628094110419697, "phrase": "path_tiling"}, {"score": 0.0029621948240346092, "phrase": "temporal_locality"}, {"score": 0.0028121943702224326, "phrase": "art_implementations"}, {"score": 0.00265987582861194, "phrase": "non-naive_thread-based_decomposition"}, {"score": 0.002630414143385786, "phrase": "simultaneously_multi-threaded_processors"}, {"score": 0.002572463625403536, "phrase": "key_aspect"}, {"score": 0.002388337333984138, "phrase": "fine_granularity"}, {"score": 0.002335707508067455, "phrase": "additional_speedup"}, {"score": 0.0022173607419126817, "phrase": "proposed_optimizations"}, {"score": 0.0021927897271015657, "phrase": "performance_improvements"}, {"score": 0.0021049977753042253, "phrase": "emerging_processors"}], "paper_keywords": ["cache-conscious data mining", " frequent pattern mining", " frequent itemset mining", " association rule mining", " architecture-conscious algorithms"], "paper_abstract": "Algorithms are typically designed to exploit the current state of the art in processor technology. However, as processor technology evolves, said algorithms are often unable to derive the maximum achievable performance on these modern architectures. In this paper, we examine the performance of frequent pattern mining algorithms on a modern processor. A detailed performance study reveals that even the best frequent pattern mining implementations, with highly efficient memory managers, still grossly under-utilize a modern processor. The primary performance bottlenecks are poor data locality and low instruction level parallelism (ILP). We propose a cache-conscious prefix tree to address this problem. The resulting tree improves spatial locality and also enhances the benefits from hardware cache line prefetching. Furthermore, the design of this data structure allows the use of path tiling, a novel tiling strategy, to improve temporal locality. The result is an overall speedup of up to 3.2 when compared with state of the art implementations. We then show how these algorithms can be improved further by realizing a non-naive thread-based decomposition that targets simultaneously multi-threaded processors (SMT). A key aspect of this decomposition is to ensure cache re-use between threads that are co-scheduled at a fine granularity. This optimization affords an additional speedup of 50%, resulting in an overall speedup of up to 4.8. The proposed optimizations also provide performance improvements on SMPs, and will most likely be beneficial on emerging processors.", "paper_title": "Cache-conscious frequent pattern mining on modern and emerging processors", "paper_id": "WOS:000241580900005"}