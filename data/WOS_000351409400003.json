{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "memory_tree"}, {"score": 0.027984454611878814, "phrase": "proposed_approach"}, {"score": 0.01379629827634224, "phrase": "memory_entries"}, {"score": 0.010121008168456633, "phrase": "new_individual"}, {"score": 0.004689650818647484, "phrase": "later_environments"}, {"score": 0.004628223381645729, "phrase": "effective_and_widely_employed_approach"}, {"score": 0.004468304427278713, "phrase": "existing_explicit_memories"}, {"score": 0.004429191773525288, "phrase": "dynamic_optimization"}, {"score": 0.00416478405812793, "phrase": "linear_list"}, {"score": 0.0041102032028337366, "phrase": "naive_structure"}, {"score": 0.003985602342418578, "phrase": "heavy_computational_overhead"}, {"score": 0.00395069818358908, "phrase": "small_memory_capacity"}, {"score": 0.003682207422331339, "phrase": "binary_space_partition_tree"}, {"score": 0.003372019835750424, "phrase": "search_space"}, {"score": 0.003170520716404193, "phrase": "neighbor_shift_strategy"}, {"score": 0.0029161225023394363, "phrase": "last_change"}, {"score": 0.0028151944356239952, "phrase": "neighboring_memory_individual"}, {"score": 0.002670296619878048, "phrase": "memory_individual"}, {"score": 0.002499590390751339, "phrase": "real_space"}, {"score": 0.002381365139274329, "phrase": "basic_particle_swarm_optimizer"}, {"score": 0.0021236300589450143, "phrase": "memory_structure"}, {"score": 0.0021049977753042253, "phrase": "memory_approaches"}], "paper_keywords": ["Dynamic optimization problem", " Population-based algorithms", " Memory", " Memory structure", " Binary space partition tree"], "paper_abstract": "Memorizing the past information for later environments is an effective and widely employed approach to optimize dynamic problems. Although the existing explicit memories for dynamic optimization differ widely in the literature, all of them organize memory entries in a linear list. This naive structure leads to problems, such as heavy computational overhead and small memory capacity, and thus restricts the performance of the memories. In this paper, the binary space partition tree is adopted to organize the memory entries, and then a memory tree is constructed. The memory tree partitions the search space into regions. In order to make use of the memory tree, a neighbor shift strategy is proposed. When a new individual is generated in a region that has never been visited since the last change, the new individual is shifted to the neighboring memory individual of that region, if it is less fit than the memory individual. The proposed approach can be easily combined with many population-based algorithms for dynamic optimization in the real space. As examples, the proposed approach was combined with a basic particle swarm optimizer and two state-of-the-art dynamic optimizers. The experimental results showed that it significantly enhanced the performance of the three optimizers on various test problems. The proposed approach demonstrates the importance of memory structure in memory approaches.", "paper_title": "Dynamic optimization facilitated by the memory tree", "paper_id": "WOS:000351409400003"}