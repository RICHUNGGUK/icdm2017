{"auto_keywords": [{"score": 0.038603865420321744, "phrase": "defuse"}, {"score": 0.00481495049065317, "phrase": "software_bugs"}, {"score": 0.004646852519870358, "phrase": "semantic_bugs"}, {"score": 0.004544770921520536, "phrase": "system_reliability"}, {"score": 0.003977505904363489, "phrase": "concurrent_programs"}, {"score": 0.003942299471749811, "phrase": "effective_approaches"}, {"score": 0.0038728151007982378, "phrase": "common_bugs"}, {"score": 0.0037043953071235185, "phrase": "invariant-based_bug_detection_tool"}, {"score": 0.003527550673371394, "phrase": "previously_under-studied_order_violation_bugs"}, {"score": 0.0032272929113113203, "phrase": "programmers'_data_flow_intentions"}, {"score": 0.0031422859551159506, "phrase": "definition-use_invariants"}, {"score": 0.0027010719929751, "phrase": "false_positives"}, {"score": 0.0026771333996253783, "phrase": "rank_error_reports"}, {"score": 0.00260657976055413, "phrase": "sixteen_real-world_applications"}, {"score": 0.00258347644721642, "phrase": "twenty_real-world_concurrency"}, {"score": 0.0021716540012278744, "phrase": "ranking_algorithms"}, {"score": 0.0021049977753042253, "phrase": "insufficient_training"}], "paper_keywords": ["Reliability", " Concurrency Bug", " Sequential Bug", " Atomicity Violation", " Order Violation"], "paper_abstract": "Software bugs, such as concurrency, memory and semantic bugs, can significantly affect system reliability. Although much effort has been made to address this problem, there are still many bugs that cannot be detected, especially concurrency bugs due to the complexity of concurrent programs. Effective approaches for detecting these common bugs are therefore highly desired. This paper presents an invariant-based bug detection tool, DefUse, which can detect not only concurrency bugs ( including the previously under-studied order violation bugs), but also memory and semantic bugs. Based on the observation that many bugs appear as violations to programmers' data flow intentions, we introduce three different types of definition-use invariants that commonly exist in both sequential and concurrent programs. We also design an algorithm to automatically extract such invariants from programs, which are then used to detect bugs. Moreover, DefUse uses various techniques to prune false positives and rank error reports. We evaluated DefUse using sixteen real-world applications with twenty real-world concurrency and sequential bugs. Our results show that DefUse can effectively detect 19 of these bugs, including 2 new bugs that were never reported before, with only a few false positives. Our training sensitivity results show that, with the benefit of the pruning and ranking algorithms, DefUse is accurate even with insufficient training.", "paper_title": "Do I Use the Wrong Definition? DefUse: Definition-Use Invariants for Detecting Concurrency and Sequential Bugs", "paper_id": "WOS:000286595800011"}