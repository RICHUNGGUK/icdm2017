{"auto_keywords": [{"score": 0.03978021035630368, "phrase": "actual_code"}, {"score": 0.032217955051976256, "phrase": "concurrent_code"}, {"score": 0.00481495049065317, "phrase": "concurrent_temporal_behaviors"}, {"score": 0.0032129675521135616, "phrase": "genuine_error"}, {"score": 0.002992195343569767, "phrase": "particular_behavior"}, {"score": 0.002952516738708181, "phrase": "actual_program"}, {"score": 0.0027989800906333784, "phrase": "prescribed_initial_state"}, {"score": 0.0027131212233443137, "phrase": "similar_problem"}, {"score": 0.0026182085765020548, "phrase": "suspicious_scenario"}, {"score": 0.0025042115651986332, "phrase": "intricate_scheduling"}, {"score": 0.0023010815714140467, "phrase": "selected_execution_sequences"}, {"score": 0.0021910825909008946, "phrase": "original_code"}, {"score": 0.0021049977753042253, "phrase": "original_program"}], "paper_keywords": [""], "paper_abstract": "The outcome of verifying software is often a 'counterexample', i.e., a listing of the actions and states of a behavior not satisfying the specification. The verification is usually done using a model of the software (often also using some abstraction to reduce its complexity) rather than the actual code. In order to understand the reason for the failure manifested by such a counterexample, it is sometimes necessary to test such an execution using the actual code. In this way we also find out whether we have a genuine error or a \"false negative\". Due to nondeterminism in concurrent code, enforcing a particular behavior of an actual program is not guaranteed even when one starts the execution with the prescribed initial state. Testers axe faced with a similar problem when they have to demonstrate that a suspicious scenario can actually be executed. Such a scenario may involve some intricate scheduling and thus be illusive to demonstrate. We describe here a transformation that allows us to repeat a selected execution sequences of concurrent code. Since the transformation implies changes to the original code, we strive to minimize its effect on the original program.", "paper_title": "Enforcing concurrent temporal behaviors", "paper_id": "WOS:000239874300003"}