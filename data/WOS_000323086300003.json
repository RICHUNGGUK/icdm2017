{"auto_keywords": [{"score": 0.026831747073449014, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "traversal_programs"}, {"score": 0.004760765880314089, "phrase": "structured_data"}, {"score": 0.004707188147442449, "phrase": "traversal_strategies"}, {"score": 0.004423061344624088, "phrase": "scrap_your_boilerplate'"}, {"score": 0.004324031677173549, "phrase": "exceptionally_versatile_and_uniform_means"}, {"score": 0.00399449659126893, "phrase": "functional_programming"}, {"score": 0.003882970272082245, "phrase": "oo_programming"}, {"score": 0.003817548980308163, "phrase": "xml_documents"}, {"score": 0.0037745459666402915, "phrase": "xml_programming"}, {"score": 0.0036691380448651443, "phrase": "resulting_traversal_programs"}, {"score": 0.0035869274480340727, "phrase": "programming_errors"}, {"score": 0.003370190834214415, "phrase": "conservative_type_errors"}, {"score": 0.0032575241721857343, "phrase": "divergent_traversals"}, {"score": 0.0032208091960514128, "phrase": "prematurely_terminated_traversals"}, {"score": 0.0031308163228919773, "phrase": "dead_code"}, {"score": 0.003009022147559257, "phrase": "possible_programming_errors"}, {"score": 0.0029249294679606656, "phrase": "static_typing"}, {"score": 0.0028919522313933525, "phrase": "static_analysis"}, {"score": 0.0026113524778702624, "phrase": "strategy_libraries"}, {"score": 0.0024120247307686084, "phrase": "sufficient_explanations"}, {"score": 0.0022661190184053628, "phrase": "overall_ideas"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Traversal strategies", " Traversal programming", " Term rewriting", " Stratego", " Strafunski", " Generic programming", " Scrap your boilerplate", " Type systems", " Static program analysis", " Functional programming", " XSLT", " Haskell"], "paper_abstract": "Traversal strategies a la Stratego (also a la Strafunski and 'Scrap Your Boilerplate') provide an exceptionally versatile and uniform means of querying and transforming deeply nested and heterogeneously structured data including terms in functional programming and rewriting, objects in OO programming, and XML documents in XML programming. However, the resulting traversal programs are prone to programming errors. We are specifically concerned with errors that go beyond conservative type errors; examples we examine include divergent traversals, prematurely terminated traversals, and traversals with dead code. Based on an inventory of possible programming errors we explore options of static typing and static analysis so that some categories of errors can be avoided. This exploration generates suggestions for improvements to strategy libraries as well as their underlying programming languages. Haskell is used for illustrations and specifications with sufficient explanations to make the presentation comprehensible to the non-specialist. The overall ideas are language-agnostic and they are summarized accordingly. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Programming errors in traversal programs over structured data", "paper_id": "WOS:000323086300003"}