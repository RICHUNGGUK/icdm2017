{"auto_keywords": [{"score": 0.033255588523354467, "phrase": "second_approach"}, {"score": 0.004339867166576126, "phrase": "mesh_size"}, {"score": 0.004278807087784626, "phrase": "transient_engine_simulation"}, {"score": 0.0036610702290043387, "phrase": "load_balance"}, {"score": 0.0035755653799043, "phrase": "first_approach"}, {"score": 0.003410479630045025, "phrase": "vertical_columns"}, {"score": 0.0033308077968426937, "phrase": "piston_motion"}, {"score": 0.0032994731951330398, "phrase": "metis"}, {"score": 0.0031920445513574907, "phrase": "unstructured_graphs"}, {"score": 0.002931569771634119, "phrase": "vertical_direction"}, {"score": 0.0028495431343111897, "phrase": "boundary_cells"}, {"score": 0.0027961342030212353, "phrase": "third_approach"}, {"score": 0.0026045914281028473, "phrase": "first_two_approaches"}, {"score": 0.0025678829712650437, "phrase": "overall_results"}, {"score": 0.0025316905609748135, "phrase": "good_parallel_performance"}, {"score": 0.002437645786158106, "phrase": "first_partitioning_strategy"}, {"score": 0.0021656385587456952, "phrase": "larger_grids"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": [""], "paper_abstract": "Parallel KIVA-4 is described and simulated in four different engine geometries. The Message Passing-Interface (MPI) library was used to parallelize KIVA-4. Changes in the mesh size during a transient engine simulation present challenges to domain decomposition. In this study, three partitioning strategies were developed in light of the fact that cells can become deactivated and activated during a simulation which will affect the load balance between processors. The first approach partitions the domain vertically. Cells are partitioned in vertical columns to the direction of piston motion using METIS, a software package for partitioning unstructured graphs. The second approach partitions three regions - bowl, squish, and ports - sequentially in the vertical direction using hMETIS with constraints on boundary cells. In the third approach, the mesh is periodically repartitioned during the simulation using a combination of the first two approaches. The overall results show that good parallel performance can be obtained with four processors. The first partitioning strategy performs well compared to the other two more complex approaches for the grids tested in this study. On the other hand, the second approach shows some promise for larger grids with more than four processors. Published by Elsevier Ltd.", "paper_title": "Partitioning strategies for parallel KIVA-4 engine simulations", "paper_id": "WOS:000272404900011"}