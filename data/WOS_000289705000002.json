{"auto_keywords": [{"score": 0.04968898347890437, "phrase": "open_networks"}, {"score": 0.03879455665026031, "phrase": "local_policies"}, {"score": 0.00481495049065317, "phrase": "service_orchestration"}, {"score": 0.004736820055728928, "phrase": "service_oriented_computing"}, {"score": 0.004603115982404017, "phrase": "fully_compositional_service_infrastructure"}, {"score": 0.004565609517511076, "phrase": "cornpositionality"}, {"score": 0.0045284072672385975, "phrase": "security_issues"}, {"score": 0.0043114466990006334, "phrase": "global_security_properties"}, {"score": 0.004241451614311598, "phrase": "large-scale_network"}, {"score": 0.0040052617265655035, "phrase": "recent_proposal"}, {"score": 0.003956379470617348, "phrase": "single_service"}, {"score": 0.003513443975425428, "phrase": "simple_automaton-like_structure"}, {"score": 0.003456359260921982, "phrase": "full_compositionality"}, {"score": 0.003414153126809511, "phrase": "scope_nesting"}, {"score": 0.003304097742490624, "phrase": "corresponding_execution_monitor"}, {"score": 0.0031199418866663543, "phrase": "possible_program_execution"}, {"score": 0.0030193416820392554, "phrase": "history_expressions"}, {"score": 0.0029100272315053253, "phrase": "effect_system"}, {"score": 0.0028046593475268174, "phrase": "valid_history_expression"}, {"score": 0.0027253441561528495, "phrase": "policy_exceptions"}, {"score": 0.0026482660253173075, "phrase": "composition_plans"}, {"score": 0.0022849068677290836, "phrase": "bottom-up_fashion"}, {"score": 0.0021049977753042253, "phrase": "well_known_case_study"}], "paper_keywords": ["Secure service orchestration", " History-based security"], "paper_abstract": "Service Oriented Computing is a paradigm for creating a fully compositional service infrastructure. Cornpositionality makes security issues difficult to establish. As a matter of fact, defining global security properties on distribute, large-scale network seems to have little or even no sense at all. In a recent proposal, every single service specify its ad hoc security policies that are applied to (parts of) programs or services. These are called local policies and are amenable for developers. They are specified using a simple automaton-like structure, they offer full compositionality (through scope nesting) and a direct enforcing through a corresponding execution monitor. Compliance w.r.t. local policies is statically verified against a superset of the possible program execution traces, namely a history expression. History expressions for services are obtained through a type and effect system and then model checked for validity. A valid history expression only contains traces that never rise policy exceptions. Such history expressions drive the synthesis of composition plans, i.e. safe service orchestration. In this paper this approach is extended to work also on open networks, i.e. networks that are only partially specified. This allows one to compose services in a bottom-up fashion, while guaranteeing their correctness by construction. The potential, practical impact of our proposal is shown by applying it to a well known case study. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Secure service orchestration in open networks", "paper_id": "WOS:000289705000002"}