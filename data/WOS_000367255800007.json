{"auto_keywords": [{"score": 0.03788952838179798, "phrase": "bidirectional_transformations"}, {"score": 0.00481495049065317, "phrase": "bidirectional_transformation"}, {"score": 0.004570491683870396, "phrase": "source_and_view_data_objects"}, {"score": 0.0036553070575015344, "phrase": "maintenance_effort"}, {"score": 0.0034954725617970294, "phrase": "specialized_languages"}, {"score": 0.003392804886610623, "phrase": "resulting_programs"}, {"score": 0.003293142761521425, "phrase": "construction-giving_rise"}, {"score": 0.0031726587374218277, "phrase": "bidirectional_programming"}, {"score": 0.0028795712616923462, "phrase": "higher-order_bidirectional_programming"}, {"score": 0.00269263690712392, "phrase": "unidirectional_programs"}, {"score": 0.002652768049567487, "phrase": "standard_functional_languages"}, {"score": 0.0023719332915829268, "phrase": "conventional_unidirectional_languages"}, {"score": 0.0022013916728990564, "phrase": "namely_the_lens_framework"}, {"score": 0.0021687806803474367, "phrase": "voigtlander's_semantic_bidirectionalization"}, {"score": 0.0021049977753042253, "phrase": "new_programming_style"}], "paper_keywords": ["Bidirectional Programming", " Lens", " Bidirectionalization", " Free Theorem", " Functional Programming", " Haskell", " Languages"], "paper_abstract": "A bidirectional transformation is a pair of mappings between source and view data objects, one in each direction. When the view is modified, the source is updated accordingly with respect to some laws. One way to reduce the development and maintenance effort of bidirectional transformations is to have specialized languages in which the resulting programs are bidirectional by construction-giving rise to the paradigm of bidirectional programming. In this paper, we develop a framework for applicative-style and higher-order bidirectional programming, in which we can write bidirectional transformations as unidirectional programs in standard functional languages, opening up access to the bundle of language features previously only available to conventional unidirectional languages. Our framework essentially bridges two very different approaches of bidirectional programming, namely the lens framework and Voigtlander's semantic bidirectionalization, creating a new programming style that is able to bag benefits from both.", "paper_title": "Applicative Bidirectional Programming with Lenses", "paper_id": "WOS:000367255800007"}