{"auto_keywords": [{"score": 0.027538353490744297, "phrase": "topological_change"}, {"score": 0.02487786445641532, "phrase": "small_number"}, {"score": 0.00481495049065317, "phrase": "performance_engineering"}, {"score": 0.004771672073078768, "phrase": "ospf_software"}, {"score": 0.004644146045859622, "phrase": "open_shortest_path"}, {"score": 0.0045200127552893704, "phrase": "protocol_software"}, {"score": 0.004055652445791872, "phrase": "reusable_framework"}, {"score": 0.0037898820206470085, "phrase": "reproducible_experiments"}, {"score": 0.003738847528809348, "phrase": "controlled_environment"}, {"score": 0.0037052054802048707, "phrase": "different_network_topologies"}, {"score": 0.003638823482920949, "phrase": "performance_bottlenecks"}, {"score": 0.003557509959237602, "phrase": "relative_performance"}, {"score": 0.0034467039994594065, "phrase": "route_computation_code"}, {"score": 0.003415681637907093, "phrase": "data_structures"}, {"score": 0.003220709449062307, "phrase": "algorithm-level_optimisation"}, {"score": 0.0029959082125682918, "phrase": "substantial_gains"}, {"score": 0.0029025435402480326, "phrase": "ispf"}, {"score": 0.0027616550517346066, "phrase": "code_optimisation"}, {"score": 0.002712131567923321, "phrase": "efficient_data_structures"}, {"score": 0.002675571068567923, "phrase": "dijkstra's_spf_algorithm"}, {"score": 0.002522738549524317, "phrase": "affected_subtree"}, {"score": 0.0022836785412390544, "phrase": "ospf_area"}, {"score": 0.00222249726328354, "phrase": "route_updates"}, {"score": 0.0021925226977381244, "phrase": "routing_table"}, {"score": 0.0021049977753042253, "phrase": "ispf."}], "paper_keywords": [""], "paper_abstract": "The performance of the Open Shortest Path first (OSPF) routing protocol software is presented, which includes measuring its performance, analysing the results, proposing solutions for improvement and evaluating their effect. First, a reusable framework for evaluating the performance of routing software is proposed, which allows to perform reproducible experiments in a controlled environment with different network topologies. Then, performance bottlenecks are identified and the relative performance of several low-level optimisations suggested to improve the route computation code and data structures is discussed. In addition, the design and implementation of an algorithm-level optimisation is presented, using the Incremental Shortest Path First (ISPF) algorithm, and its performance benefits are then presented. Substantial gains in performance are achieved by using ISPF, more than what is possible by employing techniques for code optimisation and by using efficient data structures to implement Dijkstra's SPF algorithm. Finally, the effect of topological change on the size of the affected subtree is investigated, and it is found that most of the time a topological change affects a small number of nodes in an OSPF area, causing a small number of route updates in the routing table and consequently, a smaller execution time for ISPF.", "paper_title": "Framework for performance engineering of OSPF software", "paper_id": "WOS:000243816300002"}