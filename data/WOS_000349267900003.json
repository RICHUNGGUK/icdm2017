{"auto_keywords": [{"score": 0.048740720657320234, "phrase": "pilot_jobs"}, {"score": 0.00481495049065317, "phrase": "multi-level_scheduling"}, {"score": 0.004718431349852634, "phrase": "gridway"}, {"score": 0.004642604455537883, "phrase": "current_systems"}, {"score": 0.004161553532799662, "phrase": "existing_approaches"}, {"score": 0.004061584718427419, "phrase": "different_general-purpose_pilot_system"}, {"score": 0.003947973513495612, "phrase": "individual_users"}, {"score": 0.0035819501337406596, "phrase": "legacy_applications"}, {"score": 0.0034676182423067307, "phrase": "gridway_meta-scheduler"}, {"score": 0.0034118234596993836, "phrase": "powerful_features"}, {"score": 0.0033163269450817716, "phrase": "standard_interfaces"}, {"score": 0.003289534854212415, "phrase": "fair-share_policies"}, {"score": 0.003158776195052182, "phrase": "diverse_infrastructures"}, {"score": 0.0030828215204304473, "phrase": "simple_network_overlays"}, {"score": 0.00303319936111073, "phrase": "waiting_times"}, {"score": 0.0030086877092638945, "phrase": "remote_queues"}, {"score": 0.0029244418026475832, "phrase": "task_production"}, {"score": 0.0028541057064952876, "phrase": "characterisation_problem"}, {"score": 0.002831037222426215, "phrase": "current_infrastructures"}, {"score": 0.002751751956416832, "phrase": "customised_monitoring"}, {"score": 0.0026103363762901423, "phrase": "new_framework"}, {"score": 0.002578745296475411, "phrase": "innovative_scheduling_algorithms"}, {"score": 0.002537216271965659, "phrase": "computational_needs"}, {"score": 0.002506507889886399, "phrase": "wide_range"}, {"score": 0.0022190974300886467, "phrase": "framework_result"}, {"score": 0.0022011501095573747, "phrase": "significant_performance_improvements"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Grid scheduling", " Pilot jobs", " Resource characterisation", " Resource management", " Application compatibility"], "paper_abstract": "Current systems based on pilot jobs are not exploiting all the scheduling advantages that the technique offers, or they lack compatibility or adaptability. To overcome the limitations or drawbacks in existing approaches, this study presents a different general-purpose pilot system, GWpilot. This system provides individual users or institutions with a more easy-to-use, easy-to-install, scalable, extendable, flexible and adjustable framework to efficiently run legacy applications. The framework is based on the GridWay meta-scheduler and incorporates the powerful features of this system, such as standard interfaces, fair-share policies, ranking, migration, accounting and compatibility with diverse infrastructures. GWpilot goes beyond establishing simple network overlays to overcome the waiting times in remote queues or to improve the reliability in task production. It properly tackles the characterisation problem in current infrastructures, allowing users to arbitrarily incorporate customised monitoring of resources and their running applications into the system. This functionality allows the new framework to implement innovative scheduling algorithms that accomplish the computational needs of a wide range of calculations faster and more efficiently. The system can also be easily stacked under other software layers, such as self-schedulers. The advanced techniques included by default in the framework result in significant performance improvements even when very short tasks are scheduled. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "GWpilot: Enabling multi-level scheduling in distributed infrastructures with GridWay and pilot jobs", "paper_id": "WOS:000349267900003"}