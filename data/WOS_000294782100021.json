{"auto_keywords": [{"score": 0.041212910961789084, "phrase": "blastp"}, {"score": 0.00481495049065317, "phrase": "cuda-blastp"}, {"score": 0.004654642380553263, "phrase": "cuda-enabled_graphics_hardware"}, {"score": 0.004561019117546361, "phrase": "protein_sequence_database"}, {"score": 0.0044692705329574, "phrase": "often_repeated_task"}, {"score": 0.004409127897028587, "phrase": "computational_biology"}, {"score": 0.004204904449336037, "phrase": "large_protein_databases"}, {"score": 0.004092470058277086, "phrase": "genbank"}, {"score": 0.004010102190292041, "phrase": "popular_tools"}, {"score": 0.0038764861784138117, "phrase": "long_runtimes"}, {"score": 0.0038242899532391914, "phrase": "sequential_architectures"}, {"score": 0.0036968421974412522, "phrase": "continuing_rapid_growth"}, {"score": 0.0036470559917231218, "phrase": "sequence_databases"}, {"score": 0.003525493807130663, "phrase": "high_demand"}, {"score": 0.0029355502535757696, "phrase": "efficient_computational_platform"}, {"score": 0.0028569549040495163, "phrase": "blastp_algorithm"}, {"score": 0.002724428781940696, "phrase": "gpu's_capabilities"}, {"score": 0.0025630077791393125, "phrase": "compressed_deterministic_finite_state_automaton"}, {"score": 0.002427549902743566, "phrase": "hybrid_parallelization_scheme"}, {"score": 0.0022682274656069643, "phrase": "nvidia_geforce_gtx"}, {"score": 0.002237808094461551, "phrase": "gpu"}, {"score": 0.002105037273888947, "phrase": "cuda"}], "paper_keywords": ["BLAST", " dynamic programming", " sequence alignment", " graphics hardware", " GPGPU", " CUDA"], "paper_abstract": "Scanning protein sequence database is an often repeated task in computational biology and bioinformatics. However, scanning large protein databases, such as GenBank, with popular tools such as BLASTP requires long runtimes on sequential architectures. Due to the continuing rapid growth of sequence databases, there is a high demand to accelerate this task. In this paper, we demonstrate how GPUs, powered by the Compute Unified Device Architecture (CUDA), can be used as an efficient computational platform to accelerate the BLASTP algorithm. In order to exploit the GPU's capabilities for accelerating BLASTP, we have used a compressed deterministic finite state automaton for hit detection as well as a hybrid parallelization scheme. Our implementation achieves speedups up to 10.0 on an NVIDIA GeForce GTX 295 GPU compared to the sequential NCBI BLASTP 2.2.22. CUDA-BLASTP source code which is available at https://sites.google.com/site/liuweiguohome/software.", "paper_title": "CUDA-BLASTP: Accelerating BLASTP on CUDA-Enabled Graphics Hardware", "paper_id": "WOS:000294782100021"}