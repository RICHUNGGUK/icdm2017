{"auto_keywords": [{"score": 0.05007841602719238, "phrase": "short_cut_fusion"}, {"score": 0.039926547111439496, "phrase": "ghani"}, {"score": 0.039651995980642944, "phrase": "uustalu"}, {"score": 0.03924340299395615, "phrase": "vene"}, {"score": 0.032433638212680985, "phrase": "augment_combinators"}, {"score": 0.004746558955503364, "phrase": "commonplace_programming_devices"}, {"score": 0.004403054828362479, "phrase": "impure_features"}, {"score": 0.004324985524216987, "phrase": "error_handling"}, {"score": 0.004187917910692495, "phrase": "monadic_programming_paradigm"}, {"score": 0.004084307764140389, "phrase": "monadic_computations"}, {"score": 0.004011867299107537, "phrase": "lasing_generalisations"}, {"score": 0.003940706575253453, "phrase": "monadic_structures"}, {"score": 0.003829455440282146, "phrase": "monadic_program_components"}, {"score": 0.0036553070575015344, "phrase": "inductive_type"}, {"score": 0.003616252896285766, "phrase": "associated_build_combinator"}, {"score": 0.0035776145006375173, "phrase": "associated_short_cut_fusion_law"}, {"score": 0.003451766520526601, "phrase": "parameterised_monad"}, {"score": 0.003342280102112269, "phrase": "inductive_types"}, {"score": 0.003259522768246318, "phrase": "standard_augment_combinators"}, {"score": 0.0032131531888987307, "phrase": "algebraic_data_types"}, {"score": 0.0031561148083611647, "phrase": "fixed_points"}, {"score": 0.0031223774204093713, "phrase": "parameterised_monads"}, {"score": 0.0030124946762144717, "phrase": "fusion_rules"}, {"score": 0.002927371124061966, "phrase": "functional_programming_perspective"}, {"score": 0.002875391177926809, "phrase": "categorical_one"}, {"score": 0.002804161833785297, "phrase": "category-theoretic_ideas"}, {"score": 0.002676514445417281, "phrase": "wider_audience"}, {"score": 0.0026573974912563014, "phrase": "functional_programmers"}, {"score": 0.002591554263245753, "phrase": "nontrivial_application_programs"}, {"score": 0.0024036292057373803, "phrase": "additional_generic_fusion_laws"}, {"score": 0.0022696277881969896, "phrase": "deep_theoretical_insights"}, {"score": 0.0021049977753042253, "phrase": "best_generally_applicable_fusion_rules"}], "paper_keywords": [""], "paper_abstract": "Monads are commonplace programming devices that are used to uniformly structure computations; in particular, they are often used to mimic the effects of impure features such as state, error handling, and I/O. This paper further develops the monadic programming paradigm by investigating the extent to which monadic computations can be optimised by lasing generalisations of short cut fusion to eliminate monadic structures whose sole purpose is to \"glue together\" monadic program components. Ghani, Uustalu, and Vene have recently shown that every inductive type has an associated build combinator and an associated short cut fusion law. They have also used the notion of a parameterised monad to describe those monads that give rise to inductive types, and have shown that the standard augment combinators and cata/augment fusion rules for algebraic data types can be generalised to fixed points of all parameterised monads. We revisit these augment combinators and generalised short cut fusion rules for such types but consider them from a functional programming perspective, rather than a categorical one. In addition to making the category-theoretic ideas of Ghani, Uustalu, and Vene more easily accessible to a wider audience of functional programmers, we demonstrate their practical applicability by developing nontrivial application programs and performing modest benchmarking on them. We also show how the cata/augment rules can serve as the basis for deriving additional generic fusion laws, thus opening the way for an algebra of fusion. Finally, we offer deep theoretical insights, arguing that the augment combinators are monadic in nature, and thus that the cata/build and cata/augment rules are arguably the best generally applicable fusion rules obtainable.", "paper_title": "Monadic augment and generalised short cut fusion", "paper_id": "WOS:000251555200003"}