{"auto_keywords": [{"score": 0.042021602109550533, "phrase": "bytecode_verifier"}, {"score": 0.00481495049065317, "phrase": "java_virtual_machine"}, {"score": 0.004530023871441992, "phrase": "java_bytecode_programs"}, {"score": 0.004309434349688514, "phrase": "efficient_data-flow_analysis"}, {"score": 0.0042148594491580324, "phrase": "type-level_abstract_interpretation"}, {"score": 0.0039433581938239926, "phrase": "significant_problem"}, {"score": 0.003814212645832246, "phrase": "sun_java_compiler"}, {"score": 0.003628352506247126, "phrase": "legal_java_programs"}, {"score": 0.002971078462003895, "phrase": "java"}, {"score": 0.002779318608820933, "phrase": "memory_space"}, {"score": 0.0025287979714720423, "phrase": "space_efficiency"}, {"score": 0.002486987042061596, "phrase": "previous_versions"}, {"score": 0.0023788319661581696, "phrase": "abstract_interpretation_framework"}, {"score": 0.00230080652063411, "phrase": "enhanced_version"}, {"score": 0.0022253345930383257, "phrase": "defined_abstract_interpretation_framework"}, {"score": 0.0021049977753042253, "phrase": "bytecode_programs"}], "paper_keywords": ["Java bytecode", " abstract interpretation", " bytecode verifier"], "paper_abstract": "The Java virtual machine embodies a verifier that performs a set of checks on Java bytecode programs before their execution. The verifier carries out an efficient data-flow analysis applied to a type-level abstract interpretation of the code. The implementations of the bytecode verifier presented a significant problem with programs compiled with the Sun Java compiler (until version 1.4.1): there were legal Java programs which were correctly compiled into a bytecode that was rejected by the verifier. The problem was fixed by removing, in version 1.4.2 and following, some interesting features in the compilation of the try-finally Java construct. Because removing such features has a cost in terms of memory space, in this paper we propose to enhance the bytecode verifier to accept such programs, maintaining the space efficiency of the previous versions of the compiler. We define an abstract interpretation framework in which we model the enhanced version of the verifier. The defined abstract interpretation framework can be considered a good basis for other static analyses of bytecode programs.", "paper_title": "An Abstract Interpretation Approach for Enhancing the Java Bytecode Verifier", "paper_id": "WOS:000279185400006"}