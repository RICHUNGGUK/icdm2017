{"auto_keywords": [{"score": 0.03869898982926289, "phrase": "flash_memory"}, {"score": 0.00481495049065317, "phrase": "flash-based_database_systems"}, {"score": 0.004617187934074393, "phrase": "data_storage_medium"}, {"score": 0.004578616481036476, "phrase": "embedded_systems"}, {"score": 0.004540365779658683, "phrase": "tablet_computers"}, {"score": 0.00444612502361583, "phrase": "fast_access"}, {"score": 0.004390517953424082, "phrase": "low_power_consumption"}, {"score": 0.00422781730455246, "phrase": "intractable_characteristics"}, {"score": 0.004003348169928476, "phrase": "limited_number"}, {"score": 0.003887438245620965, "phrase": "hardware_limitations"}, {"score": 0.0038549394272661356, "phrase": "magnetic_disk-based_systems"}, {"score": 0.003759057920801288, "phrase": "full_use"}, {"score": 0.0035001037990786727, "phrase": "frequent_changes"}, {"score": 0.0031645050772280033, "phrase": "flash-aware_index_design"}, {"score": 0.0031117775337824853, "phrase": "buffer_and_storage_mechanisms"}, {"score": 0.00284899583294417, "phrase": "related_studies"}, {"score": 0.0025541050375256992, "phrase": "novel_index_solution"}, {"score": 0.002367983991444061, "phrase": "first_concept"}, {"score": 0.0022800613046444563, "phrase": "node_splits"}, {"score": 0.0021953959824690316, "phrase": "node_modifications"}, {"score": 0.0021049977753042253, "phrase": "buffer_space_utilization"}], "paper_keywords": ["B+-Tree", " Splitting policy", " Replacement algorithm", " Index manager", " Flash memory"], "paper_abstract": "Flash memory is rapidly being deployed as a data storage medium for embedded systems and tablet computers due to its shock resistance, fast access, and low power consumption, etc. However, it has some intractable characteristics, such as erase-before-write, asymmetric read/write/erase speed, and a limited number of write/erase cycles. Due to these hardware limitations, magnetic disk-based systems and applications can hardly make full use of the advantages of flash memory when adopting it directly for storage. For example, the frequent changes of B-tree can degrade the performance and negatively influence the lifespan of flash memory. Most state-of-the-art studies on flash-aware index design focused mainly on buffer and storage mechanisms whereby they can obtain efficient I/Os to flash memory. In this paper, we identify the problems inherent in the related studies, and then introduce the concepts of lazy-split, modify-two-node, and semi-clean, which make possible the construction of a novel index solution, the Lazy-Split B+-tree (LSB+-tree). In detail, by their introduction, the first concept of LSB+-tree can efficiently reduce the number of node splits, the second can reduce the number of node modifications, and the last can make a further improvement on buffer space utilization and flash writes reduction.", "paper_title": "Lazy-split B+-tree: a novel B+-tree index scheme for flash-based database systems", "paper_id": "WOS:000340099100007"}