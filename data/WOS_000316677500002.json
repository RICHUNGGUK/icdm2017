{"auto_keywords": [{"score": 0.02819806867961193, "phrase": "cynthesis"}, {"score": 0.00481495049065317, "phrase": "multithreaded_programs"}, {"score": 0.004677372885331908, "phrase": "synchronization_primitives"}, {"score": 0.004318881178805575, "phrase": "os-provided_resource_manager"}, {"score": 0.0041051328120736575, "phrase": "automatic_construction"}, {"score": 0.004046020290832207, "phrase": "code-aware_resource_managers"}, {"score": 0.003681923235979914, "phrase": "resource_usage"}, {"score": 0.0033748847621075536, "phrase": "deadlock_freedom"}, {"score": 0.0032310733124059567, "phrase": "efficient_way"}, {"score": 0.002918826667294298, "phrase": "compact_code_description"}, {"score": 0.002579847272930948, "phrase": "multithreaded_program"}, {"score": 0.0024519545383399773, "phrase": "c_code"}, {"score": 0.0023990982005125763, "phrase": "code-aware_resource_manager"}, {"score": 0.0022472527731744974, "phrase": "compact_resource_managers"}, {"score": 0.002135812692862058, "phrase": "embedded_benchmarks"}], "paper_keywords": ["Scheduling", " Deadlock avoidance", " Code analysis"], "paper_abstract": "Multithreaded programs coordinate their interaction through synchronization primitives like mutexes and semaphores, which are managed by an OS-provided resource manager. We propose algorithms for the automatic construction of code-aware resource managers for multithreaded embedded applications. Such managers use knowledge about the structure and resource usage (mutex and semaphore usage) of the threads to guarantee deadlock freedom and progress while managing resources in an efficient way. Our algorithms compute managers as winning strategies in certain infinite games, and produce a compact code description of these strategies. We have implemented the algorithms in the tool Cynthesis. Given a multithreaded program in C, the tool produces C code implementing a code-aware resource manager. We show in experiments that Cynthesis produces compact resource managers within a few minutes on a set of embedded benchmarks with up to 6 threads.", "paper_title": "Code aware resource management", "paper_id": "WOS:000316677500002"}