{"auto_keywords": [{"score": 0.03708680829562347, "phrase": "lpnf_table"}, {"score": 0.0290901523179392, "phrase": "suffix_array"}, {"score": 0.00481495049065317, "phrase": "longest_previous_non-overlapping_factors"}, {"score": 0.004715702140552199, "phrase": "longest_previous_non-overlapping_factor_table"}, {"score": 0.004338661611644755, "phrase": "maximal_length"}, {"score": 0.0040757181942937875, "phrase": "preceding_part"}, {"score": 0.0038286491141253584, "phrase": "slight_variant"}, {"score": 0.003749654338704576, "phrase": "lpf_table"}, {"score": 0.0035965032173588753, "phrase": "text_compression"}, {"score": 0.003449585750738867, "phrase": "essential_element"}, {"score": 0.0033317342432676385, "phrase": "efficient_algorithms"}, {"score": 0.003086396772496527, "phrase": "ziv-lempel_factorisation"}, {"score": 0.0028000270988465486, "phrase": "linear_time"}, {"score": 0.0025578967205807843, "phrase": "integer_alphabet"}, {"score": 0.0024533019565858073, "phrase": "non-immediate_extension"}, {"score": 0.0024026156525362684, "phrase": "lpf_computation"}, {"score": 0.0021947755130109696, "phrase": "input_string"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Design of algorithms", " Longest previous factor", " Suffix array", " Ziv-Lempel factorisation", " Text compression", " Detection of repetitions"], "paper_abstract": "The Longest Previous non-overlapping Factor table (LPnF) stores for each position of a string the maximal length of factors occurring both there and in the preceding part of the string. The notion is a slight variant of the LPF table described before and used for text compression. The LPnF table is an essential element for the design of efficient algorithms on strings as it is related to a certain type of Ziv-Lempel factorisation used for this purpose. We show how to compute the LPnF table in linear time from the suffix array of the string when it is drawn from an integer alphabet. The algorithm is a non-immediate extension of the LPF computation and it does not require any other sophisticated data structure than the suffix array of the input string. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Computing Longest Previous non-overlapping Factors", "paper_id": "WOS:000287430100007"}