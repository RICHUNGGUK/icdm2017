{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pure_pointer_programs"}, {"score": 0.03227078104988101, "phrase": "input_graph"}, {"score": 0.004548253531664032, "phrase": "structured_input"}, {"score": 0.004041686156098498, "phrase": "pointer_arithmetic"}, {"score": 0.0039280803011236395, "phrase": "useful_abstraction"}, {"score": 0.003695237613399466, "phrase": "formal_class_purple"}, {"score": 0.0035913348026306306, "phrase": "locally_ordered_graphs"}, {"score": 0.003562186600028245, "phrase": "existing_classes"}, {"score": 0.0035332741328861776, "phrase": "pointer_algorithms"}, {"score": 0.0034625214834462185, "phrase": "automata"}, {"score": 0.0033646448121751574, "phrase": "deterministic_transitive_closure"}, {"score": 0.0032567057896906314, "phrase": "simple_programs"}, {"score": 0.003126623133221065, "phrase": "natural_representation"}, {"score": 0.0030139837612215728, "phrase": "constant_number"}, {"score": 0.0029895074299598275, "phrase": "pure_pointers"}, {"score": 0.0027441711627551064, "phrase": "unspecified_order"}, {"score": 0.0026560841114619147, "phrase": "abstract_data_type"}, {"score": 0.002613103872300205, "phrase": "binary_digits"}, {"score": 0.002570817338292482, "phrase": "logarithmic-size_worktapes"}, {"score": 0.0024182330686905256, "phrase": "totally_ordered_dtc-logic"}, {"score": 0.002274684393868218, "phrase": "\"the_number"}, {"score": 0.0021571862476802853, "phrase": "logspace"}, {"score": 0.0021049977753042253, "phrase": "purple."}], "paper_keywords": ["Algorithms", " Theory", " Pointer program", " iteration in unspecified order", " logarithmic space", " pebble automation", " deterministic transitive closure logic"], "paper_abstract": "Many LOGSPACE algorithms are naturally described as programs that operate on a structured input (e. g., a graph), that store in memory only a constant number of pointers (e. g., to graph nodes) and that do not use pointer arithmetic. Such \"pure pointer algorithms\" thus are a useful abstraction for studying the nature of LOGSPACE-computation. In this article, we introduce a formal class PURPLE of pure pointer programs and study them on locally ordered graphs. Existing classes of pointer algorithms, such as Jumping Automata on Graphs (JAGs) or Deterministic Transitive Closure (DTC) logic, often exclude simple programs. PURPLE subsumes these classes and allows for a natural representation of many graph algorithms that access the input graph using a constant number of pure pointers. It does so by providing a primitive for iterating an algorithm over all nodes of the input graph in an unspecified order. Since pointers are given as an abstract data type rather than as binary digits we expect that logarithmic-size worktapes cannot be encoded using pointers as is done, for example, in totally ordered DTC-logic. We show that this is indeed the case by proving that the property \"the number of nodes is a power of two,\" which is in LOGSPACE, is not representable in PURPLE.", "paper_title": "Pure Pointer Programs with Iteration", "paper_id": "WOS:000280546300006"}