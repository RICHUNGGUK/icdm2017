{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "intended_semantics"}, {"score": 0.03423057083405171, "phrase": "programmers'_intended_semantics"}, {"score": 0.029295667226764133, "phrase": "iopt"}, {"score": 0.004783607451937166, "phrase": "modern_object-oriented_languages"}, {"score": 0.004569819304126685, "phrase": "automatic_optimizers"}, {"score": 0.004466519142879166, "phrase": "overspecified_semantics"}, {"score": 0.004239051185676412, "phrase": "better_job"}, {"score": 0.0038683940969566856, "phrase": "programs'_overspecified_semantics"}, {"score": 0.0035765007029494307, "phrase": "large_program"}, {"score": 0.003210652026669616, "phrase": "additional_optimizations"}, {"score": 0.0030369955065974222, "phrase": "case_studies"}, {"score": 0.002391670093694849, "phrase": "programs'_performance"}, {"score": 0.0021965273180061854, "phrase": "programmers'_specification_burden"}, {"score": 0.0021049977753042253, "phrase": "significant_performance_speedups"}], "paper_keywords": ["Performance", " Optimization", " Intended Semantics"], "paper_abstract": "Modern object-oriented languages have complex features that cause programmers to overspecify their programs. This overspecification hinders automatic optimizers, since they must preserve the overspecified semantics. If an optimizer knew which semantics the programmer intended, it could do a better job. Making a programmer clarify his intentions by placing assumptions into the program is rarely practical. This is because the programmer does not know which parts of the programs' overspecified semantics hinder the optimizer. Therefore, the programmer has to guess which assumption to add. Since the programmer can add many different assumptions to a large program, he will need to place many such assumptions before he guesses right and helps the optimizer. We present IOpt, a practical optimizer that uses a specification of the programmers' intended semantics to enable additional optimizations. That way, our optimizer can significantly improve the performance of a program. We present case studies in which we use IOpt to speed up two programs by a factor of 2. To make specifying the intended semantics practical, IOpt communicates with the programmer. IOpt identifies which assumptions the programmer should place, and where he should place them. IOpt ranks each assumption by (i) the likelyhood that the assumption conforms to the programmers' intended semantics and (ii) how much the assumption will help IOpt improve the programs' performance. IOpt proposes ranked assumptions to the programmer, who just picks those that conform to his intended semantics. With this approach, IOpt keeps the programmers' specification burden low. In our case studies, programmers had to add just a few assumptions to realize significant performance speedups.", "paper_title": "Optimizing Programs with Intended Semantics", "paper_id": "WOS:000271211300023"}