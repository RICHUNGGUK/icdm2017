{"auto_keywords": [{"score": 0.040823976932736254, "phrase": "pins"}, {"score": 0.013227957601787136, "phrase": "program_synthesis"}, {"score": 0.00481495049065317, "phrase": "inductive_synthesis_for_program_inversion"}, {"score": 0.004647013794908825, "phrase": "semi-automated_inversion"}, {"score": 0.003979854888950705, "phrase": "novel_synthesis_technique"}, {"score": 0.003916098498242888, "phrase": "inductive_synthesis"}, {"score": 0.003742941972172613, "phrase": "program_p"}, {"score": 0.0035658739518719907, "phrase": "template_instantiations"}, {"score": 0.003430249143748777, "phrase": "symbolic_execution"}, {"score": 0.0033752674784204412, "phrase": "smt_solver"}, {"score": 0.0033211641484589775, "phrase": "refinement_process"}, {"score": 0.0032051601987130207, "phrase": "key_idea"}, {"score": 0.0031435968684569112, "phrase": "small_path-bound_hypothesis"}, {"score": 0.0024906610581090223, "phrase": "prior_techniques"}, {"score": 0.002357391911165024, "phrase": "semi-automated_technique"}, {"score": 0.0022168460543913787, "phrase": "pin_s"}, {"score": 0.0021462652605453163, "phrase": "proof-of-concept_implementation"}, {"score": 0.0021049977753042253, "phrase": "pin_s_approach"}], "paper_keywords": ["Languages", " Algorithms", " Theory", " PINS", " Program Inversion", " Inductive Synthesis", " Symbolic execution", " Testing-inspired Synthesis"], "paper_abstract": "In this paper, we investigate the problem of semi-automated inversion of imperative programs, which has the potential to make it much easier and less error prone to write programs that naturally pair as inverses, such as insert/delete operations, compressors/decompressors, and so on. Viewing inversion as a subproblem of program synthesis, we propose a novel synthesis technique called Path-based Inductive Synthesis (PINS) and apply it to inversion. PINS starts from a program P and a template T for its inverse. PINS then iteratively refines the space of template instantiations by exploring paths in the composition of P and T with symbolic execution. PINS uses an SMT solver to intelligently guide the refinement process, based on the paths explored so far. The key idea motivating this approach is the small path-bound hypothesis: that the behavior of a program can be summarized with a small, carefully chosen set of its program paths. We evaluated PINS by using it to invert 14 programs such as compressors (e. g., Lempel-Ziv-Welch), encoders (e. g., UUEncode), and arithmetic operations (e. g., vector rotation). Most of these examples are difficult or impossible to invert using prior techniques, but PINS was able to invert all of them. We also found that a semi-automated technique we developed to mine a template from the program to be inverted worked well. In our experiments, PIN S takes between one second to thirty minutes to synthesize inverses. We believe this proof-of-concept implementation demonstrates the viability of the PIN S approach to program synthesis.", "paper_title": "Path-based Inductive Synthesis for Program Inversion", "paper_id": "WOS:000294609500043"}