{"auto_keywords": [{"score": 0.045441888394549206, "phrase": "gao"}, {"score": 0.00995928165175493, "phrase": "williamson"}, {"score": 0.00481495049065317, "phrase": "instrumented_code"}, {"score": 0.0047707093928203, "phrase": "dynamic_runtime_monitoring"}, {"score": 0.0047268728636719725, "phrase": "security_and_privacy_concerns"}, {"score": 0.004661868629458321, "phrase": "major_factor"}, {"score": 0.004601523288419838, "phrase": "lichtenstein"}, {"score": 0.0045765783794477505, "phrase": "whole_scale_adoption"}, {"score": 0.004534517530868195, "phrase": "web-based_technology"}, {"score": 0.004390312150344245, "phrase": "financial_transactions"}, {"score": 0.004309968592440261, "phrase": "owolabi"}, {"score": 0.0040215052006051235, "phrase": "end_users"}, {"score": 0.00398452530840582, "phrase": "content_generators"}, {"score": 0.003839962121679795, "phrase": "complimentary_technology"}, {"score": 0.003683565150278339, "phrase": "web_security"}, {"score": 0.0035498822293046884, "phrase": "multi-layer_framework"}, {"score": 0.003517223847512266, "phrase": "web_client_security"}, {"score": 0.003468796799802612, "phrase": "mobile_code_instrumentation"}, {"score": 0.003358368814209542, "phrase": "exploitable_security_vulnerabilities"}, {"score": 0.003312121699003206, "phrase": "runtime_policies"}, {"score": 0.0029780219173522115, "phrase": "scalable_operation"}, {"score": 0.002950608985750058, "phrase": "transparent_deployment"}, {"score": 0.002896535621940078, "phrase": "secure_equivalents"}, {"score": 0.0028698706191651155, "phrase": "vulnerable_javascript_objects"}, {"score": 0.0027913353347879507, "phrase": "superior_runtime_performance"}, {"score": 0.0027275289970185015, "phrase": "extensive_investigation"}, {"score": 0.002652878591019016, "phrase": "instrumentation_technique"}, {"score": 0.0026163210719740847, "phrase": "potential_solution"}, {"score": 0.0025683581446365165, "phrase": "rising_number"}, {"score": 0.0025447065763362984, "phrase": "security_exploits"}, {"score": 0.002418453525649304, "phrase": "performance_data"}, {"score": 0.002363150587804677, "phrase": "active_websites"}, {"score": 0.0022563011263787847, "phrase": "user_experience"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Web browsing security", " Secure browsing", " CSRF", " CSS", " Security system"], "paper_abstract": "Security and privacy concerns remain a major factor that hinders the whole scale adoption of web-based technology in sensitive situations, such as financial transactions (Gao and Owolabi, 2008; Lichtenstein and Williamson, 2006). These concerns impact both end users and content generators. To tackle this problem requires a complimentary technology to the already developed and deployed infrastructure for web security. Hence, we have developed a multi-layer framework for web client security based on mobile code instrumentation. This architecture seeks to isolate exploitable security vulnerabilities and enforce runtime policies against malicious code constructs. Our instrumentation process uniquely integrates both static and dynamic engines and is driven by flexible (XML based) rewrite rules for a scalable operation and transparent deployment. Based on secure equivalents for vulnerable JavaScript objects and methods, our mechanism offers superior runtime performance compared to other approaches. Extensive investigation using four case studies shows that the instrumentation technique provides a potential solution to curb the rising number of security exploits that exist on the web today. In addition, performance data gathered from evaluations on active websites demonstrate that the mechanism has very little impact in terms of user experience; thus making it plausible for adoption by end-users. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Securing web-clients with instrumented code and dynamic runtime monitoring", "paper_id": "WOS:000318330100016"}