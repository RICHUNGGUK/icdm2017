{"auto_keywords": [{"score": 0.04287435955272613, "phrase": "smart_objects"}, {"score": 0.00481495049065317, "phrase": "distributed_smart_object_systems"}, {"score": 0.004740009255053372, "phrase": "smart_object_system"}, {"score": 0.0046176782475198085, "phrase": "computationally_augmented_everyday_objects"}, {"score": 0.004405348628112645, "phrase": "software_framework"}, {"score": 0.0043367547691560175, "phrase": "smart_object_systems"}, {"score": 0.0042692243768616455, "phrase": "declarative_programming_approach"}, {"score": 0.004180809918117248, "phrase": "written_documents"}, {"score": 0.003926359151817743, "phrase": "proposed_framework"}, {"score": 0.0038854765143440965, "phrase": "applications'_requirements"}, {"score": 0.0038450179181069833, "phrase": "smart_objects'_services"}, {"score": 0.0037653554368382814, "phrase": "structured_documents"}, {"score": 0.0037066895459425824, "phrase": "runtime_infrastructure"}, {"score": 0.0036489343475053187, "phrase": "spontaneous_federation"}, {"score": 0.0035361001070845677, "phrase": "structural_type"}, {"score": 0.0031513240597392843, "phrase": "generic_way"}, {"score": 0.003118486096035156, "phrase": "prior_knowledge"}, {"score": 0.0026096659285441384, "phrase": "application_development"}, {"score": 0.0024894376091589244, "phrase": "programming_abstraction"}, {"score": 0.002253461585851626, "phrase": "implemented_prototype"}, {"score": 0.0021383680500215267, "phrase": "real_life_scenario"}], "paper_keywords": ["Smart object", " Middleware", " Pervasive Systems"], "paper_abstract": "A smart object system encompasses the synergy between computationally augmented everyday objects and external applications. This paper presents a software framework for building smart object systems following a declarative programming approach centered around custom written documents that glue the smart objects together. More specifically, in the proposed framework, applications' requirements and smart objects' services are objectified through structured documents. A runtime infrastructure provides the spontaneous federation between smart objects and applications through structural type matching of these documents. There are three primary advantages of our approach: firstly, it allows developers to write applications in a generic way without prior knowledge of the smart objects that could be used by the applications. Secondly, smart object management (locating, accessing, etc.) issues are completely handled by the infrastructure; thus application development becomes rapid and simple. Finally, the programming abstraction used in the framework allows extension of functionalities of smart objects and applications very easily. We describe an implemented prototype of our framework and show examples of its use in a real life scenario to illustrate its feasibility.", "paper_title": "Design and implementation of a framework for building distributed smart object systems", "paper_id": "WOS:000281896900002"}