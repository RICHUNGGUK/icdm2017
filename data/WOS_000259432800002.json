{"auto_keywords": [{"score": 0.04869381354805877, "phrase": "automatic_differentiation"}, {"score": 0.044574751613094134, "phrase": "scalar_assignments"}, {"score": 0.04316091762075172, "phrase": "local_gradients"}, {"score": 0.03612036008402273, "phrase": "combinatorial_optimization_problem"}, {"score": 0.00481495049065317, "phrase": "single-expression-use_graphs"}, {"score": 0.004636594774238505, "phrase": "fortran_programs"}, {"score": 0.00461718861997617, "phrase": "adifor"}, {"score": 0.004559451202070545, "phrase": "preaccumulation_technique"}, {"score": 0.004483585361583022, "phrase": "tangent-linear_codes"}, {"score": 0.004390517953424082, "phrase": "standard_forward_mode"}, {"score": 0.004353831792593701, "phrase": "reverse_mode_automatic_differentiation"}, {"score": 0.004210114198411514, "phrase": "efficient_code"}, {"score": 0.003936698872193083, "phrase": "reverse_mode"}, {"score": 0.0038549394272661356, "phrase": "optimal_choice"}, {"score": 0.003759057920801288, "phrase": "statement-level_gradients"}, {"score": 0.0035148319209810128, "phrase": "efficient_algorithm"}, {"score": 0.0033844715014920233, "phrase": "corresponding_software"}, {"score": 0.0030470980812086247, "phrase": "scalar_multivariate_functions"}, {"score": 0.0029837589912490026, "phrase": "elimination_methods"}, {"score": 0.0029463874016490976, "phrase": "linearized_computational_graph"}, {"score": 0.002813307389456184, "phrase": "arithmetic_operations"}, {"score": 0.002766415324343602, "phrase": "elimination_algorithm"}, {"score": 0.0027099996984716697, "phrase": "np"}, {"score": 0.0025974077149412, "phrase": "polynomial_algorithm"}, {"score": 0.0025541050375256992, "phrase": "relevant_subclass"}, {"score": 0.0025221012517852885, "phrase": "problem's_instances"}, {"score": 0.0024904974828343033, "phrase": "proposed_method"}, {"score": 0.0023879771786116228, "phrase": "bipartite_graphs"}, {"score": 0.002367983991444061, "phrase": "polynomial_time"}, {"score": 0.002338306897057454, "phrase": "simplified_version"}, {"score": 0.002309000874224222, "phrase": "graph_algorithm"}, {"score": 0.0022609695885550058, "phrase": "research_prototype"}, {"score": 0.0022326306658609365, "phrase": "differentiation-enabled_nagware_fortran_compiler"}, {"score": 0.0021227752613696606, "phrase": "automatic_generation"}, {"score": 0.0021049977753042253, "phrase": "efficient_tangent-linear_code"}], "paper_keywords": ["algorithms", " vertex elimination", " single-expression-use graph"], "paper_abstract": "The source transformation tool for automatic differentiation of Fortran programs ADIFOR uses a preaccumulation technique to speed up tangent-linear codes significantly compared to the standard forward mode. Reverse mode automatic differentiation is applied to all scalar assignments to generate efficient code for the computation of local gradients. It has been well known for some time that reverse mode is not necessarily the optimal choice for the computation of these statement-level gradients as it does not minimize the number of operations required. This article presents an efficient algorithm for the solution of this combinatorial optimization problem. The corresponding software is freely available for downloading on our website. Developers of software for automatic differentiation are invited to integrate the algorithm into their tools. Gradients of scalar multivariate functions can be computed by elimination methods on the linearized computational graph. The combinatorial optimization problem that aims to minimize the number of arithmetic operations performed by the elimination algorithm is known to be NP-complete. In this article we present a polynomial algorithm for solving a relevant subclass of this problem's instances. The proposed method relies on the ability to compute vertex covers in bipartite graphs in polynomial time. A simplified version of this graph algorithm is used in a research prototype of the differentiation-enabled NAGWare Fortran compiler for the preaccumulation of local gradients of scalar assignments in the context of automatic generation of efficient tangent-linear code for numerical programs.", "paper_title": "Optimal vertex elimination in single-expression-use graphs", "paper_id": "WOS:000259432800002"}