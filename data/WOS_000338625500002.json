{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "extensible_languages"}, {"score": 0.00475070135279933, "phrase": "extensible_programming_languages"}, {"score": 0.004655924035639928, "phrase": "sugarj"}, {"score": 0.004593789829820027, "phrase": "racket"}, {"score": 0.004237925318473508, "phrase": "base_language"}, {"score": 0.004043158538239064, "phrase": "language_extensions"}, {"score": 0.003679969180334367, "phrase": "single_base_language"}, {"score": 0.003417565253539315, "phrase": "language_extensibility"}, {"score": 0.0033268412940032103, "phrase": "non-extensible_language"}, {"score": 0.003260377175139591, "phrase": "extensible_language"}, {"score": 0.003216804708106142, "phrase": "library-based_extensible_syntax"}, {"score": 0.0030688220103201836, "phrase": "extensible_editor_support"}, {"score": 0.0029672941061574375, "phrase": "language_extensible"}, {"score": 0.002811770047652563, "phrase": "base_language's_grammar"}, {"score": 0.0027187231747900814, "phrase": "import_statements"}, {"score": 0.002524688179363081, "phrase": "base-language_programs"}, {"score": 0.0023131723125858505, "phrase": "java"}, {"score": 0.0022821801003397165, "phrase": "haskell"}, {"score": 0.002251659679835852, "phrase": "prolog"}, {"score": 0.0022215314605798482, "phrase": "javascript"}, {"score": 0.0021770860717929192, "phrase": "system_f-omega"}, {"score": 0.0021049977753042253, "phrase": "existing_module-system_features"}], "paper_keywords": ["Macros", " syntactic extensibility", " compiler framework", " module system", " SugarJ"], "paper_abstract": "Extensible programming languages such as SugarJ or Racket enable programmers to introduce customary language features as extensions of the base language. Traditionally, systems that support language extensions are either (i) agnostic to the base language or (ii) only support a single base language. In this paper, we present a framework for language extensibility that turns a non-extensible language into an extensible language featuring library-based extensible syntax, extensible static analyses, and extensible editor support. To make a language extensible, our framework only requires knowledge of the base language's grammar, the syntax for import statements (which activate extensions), and how to compile base-language programs. We have evaluated the generality of our framework by instantiating it for Java, Haskell, Prolog, JavaScript, and System F-omega, and by studying existing module-system features and their support in our framework.", "paper_title": "A Framework for Extensible Languages", "paper_id": "WOS:000338625500002"}