{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "dynamic_global_security-aware_synthesis"}, {"score": 0.004338076511024884, "phrase": "systemc_language"}, {"score": 0.004201033616196156, "phrase": "systemc_security_models"}, {"score": 0.0037544644262310525, "phrase": "systemc_behavioural_descriptions"}, {"score": 0.0034926916198124484, "phrase": "security_modules"}, {"score": 0.00319732428387928, "phrase": "global_security-aware_scheduling_algorithm"}, {"score": 0.0029268619875960715, "phrase": "varying_security_level"}, {"score": 0.0027008385562908425, "phrase": "annotated_nets"}, {"score": 0.0023369711258107244, "phrase": "synthesised_circuits"}, {"score": 0.002299689297293321, "phrase": "asynchronous_secure_power-balanced_and_fault-protected_components"}], "paper_keywords": [""], "paper_abstract": "A dynamic global security-aware synthesis flow using the SystemC language is presented. SystemC security models are first specified at the system or behavioural level using a library of SystemC behavioural descriptions which provide for the reuse and extension of security modules. At the core of the system is incorporated a global security-aware scheduling algorithm which allows for scheduling to a mixture of components of varying security level. The output from the scheduler is translated into annotated nets which are subsequently passed to allocation, optimisation and mapping tools for mapping into circuits. The synthesised circuits incorporate asynchronous secure power-balanced and fault-protected components. Results show that the approach offers robust implementations and efficient security/area trade-offs leading to significant improvements in turnover.", "paper_title": "Dynamic global security-aware synthesis using SystemC", "paper_id": "WOS:000248317000017"}