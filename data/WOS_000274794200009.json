{"auto_keywords": [{"score": 0.03313351347353083, "phrase": "sss"}, {"score": 0.015719470599240837, "phrase": "arbitrary_networks"}, {"score": 0.015242069424960179, "phrase": "different_sources"}, {"score": 0.010722121552074115, "phrase": "dynamic_case"}, {"score": 0.004758987153057194, "phrase": "multisource_divisible_loads"}, {"score": 0.004703671193348433, "phrase": "challenging_task"}, {"score": 0.004436545340717729, "phrase": "total_computational_time"}, {"score": 0.004250302819248558, "phrase": "generalized_divisible_load_scheduling_problem"}, {"score": 0.004168240841388958, "phrase": "multiple_sources"}, {"score": 0.0036363418376496484, "phrase": "processing_node"}, {"score": 0.0035245918797629804, "phrase": "processing_nodes"}, {"score": 0.003298357357267836, "phrase": "static_case"}, {"score": 0.0031597433845085092, "phrase": "static_scheduling_strategy"}, {"score": 0.0030986716686217768, "phrase": "dynamic_scheduling_strategy"}, {"score": 0.002956858061485755, "phrase": "iterative_fashion"}, {"score": 0.0028436364707396613, "phrase": "novel_graph_partitioning"}, {"score": 0.0028215906290056346, "phrase": "gp"}, {"score": 0.0026299995767138304, "phrase": "network_resources"}, {"score": 0.002480369425886377, "phrase": "dss"}, {"score": 0.0024610448251906453, "phrase": "queuing_theory"}, {"score": 0.00243237365704391, "phrase": "upper_bounds"}, {"score": 0.0024040357029838774, "phrase": "load's_average_waiting_time"}, {"score": 0.0022146826124408757, "phrase": "dss."}, {"score": 0.0021803388613879896, "phrase": "interesting_\"load_insensitive\"_property"}, {"score": 0.0021215125099937663, "phrase": "theoretical_upper_bound"}, {"score": 0.0021049977753042253, "phrase": "average_queue_length"}], "paper_keywords": ["Divisible loads", " multisource", " communication delay", " processing time", " arbitrary network"], "paper_abstract": "Scheduling multisource divisible loads is a challenging task as different sources should cooperate and share their computing power with others to balance their loads and minimize total computational time. In this study, we attempt to address a generalized divisible load scheduling problem for handling loads from multiple sources on arbitrary networks. This problem is all the more challenging as 1) the topology is arbitrary, 2) in such networks, it is difficult to decide from which source and which route a processing node should receive loads, and 3) processing nodes must be allocated to different sources when they become available. We study two distinct cases of interest, static case and dynamic case, and propose two novel strategies, referred to as Static Scheduling Strategy (SSS) and Dynamic Scheduling Strategy (DSS), respectively. Both strategies work in an iterative fashion. In each iteration, they will use a novel Graph Partitioning (GP) scheme to partition the network such that each source in the network gains a portion of network resources and then these sources cooperate to process their loads. We analyze the performance of DSS using queuing theory and derive upper bounds on a load's average waiting time and a source's average queue length. We use simulation to verify the usefulness and effectiveness of SSS and DSS. Our findings reveal an interesting \"load insensitive\" property of SSS and also verify the theoretical upper bound of average queue length at each source in the dynamic case.", "paper_title": "Scheduling Multisource Divisible Loads on Arbitrary Networks", "paper_id": "WOS:000274794200009"}