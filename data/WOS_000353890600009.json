{"auto_keywords": [{"score": 0.03409824254329682, "phrase": "heterogeneous_environment"}, {"score": 0.00481495049065317, "phrase": "graph_partitioning"}, {"score": 0.0047386923107107645, "phrase": "increasing_availability"}, {"score": 0.004701015188740582, "phrase": "graph_data"}, {"score": 0.004663636232080366, "phrase": "widely_adopted_cloud_computing_paradigm"}, {"score": 0.004535124351828787, "phrase": "efficient_pre-processing_technique"}, {"score": 0.004463278123628969, "phrase": "computing_workload"}, {"score": 0.004375061788023814, "phrase": "large_scale"}, {"score": 0.004340263267055143, "phrase": "input_data"}, {"score": 0.004203803478570494, "phrase": "entire_graph"}, {"score": 0.00407161650109722, "phrase": "recent_tentative_works"}, {"score": 0.003729065012001506, "phrase": "existing_works"}, {"score": 0.003321008590273796, "phrase": "homogeneous_algorithms"}, {"score": 0.0032814236411444022, "phrase": "significant_performance_degradation"}, {"score": 0.0031028232755683674, "phrase": "adaptive_streaming_graph"}, {"score": 0.002945669860541221, "phrase": "heterogeneous_computing_environment"}, {"score": 0.002852931066197755, "phrase": "computing_ability"}, {"score": 0.002752075650871066, "phrase": "communication_ability"}, {"score": 0.0025405019456703325, "phrase": "new_graph"}, {"score": 0.0025202582748972122, "phrase": "objective_function"}, {"score": 0.0024604876113911173, "phrase": "total_execution_time"}, {"score": 0.0024311346712789553, "phrase": "graph-processing_job"}, {"score": 0.002373472641477602, "phrase": "simple_yet_effective_streaming_algorithms"}, {"score": 0.002244178699939059, "phrase": "extensive_experiments"}, {"score": 0.002199725773957207, "phrase": "moderate_sized_computing_cluster"}, {"score": 0.0021821915946356168, "phrase": "real-world_web_and_social_network_graphs"}, {"score": 0.002121913011761504, "phrase": "proposed_approach"}, {"score": 0.0021049977753042253, "phrase": "significant_improvement"}], "paper_keywords": ["Graph partitioning", " streaming algorithms", " heterogeneous environment", " BSP Model"], "paper_abstract": "With the increasing availability of graph data and widely adopted cloud computing paradigm, graph partitioning has become an efficient pre-processing technique to balance the computing workload and cope with the large scale of input data. Since the cost of partitioning the entire graph is strictly prohibitive, there are some recent tentative works towards streaming graph partitioning which run faster, are easily parallelized, and can be incrementally updated. Most of the existing works on streaming partitioning assume that worker nodes within a cluster are homogeneous in nature. Unfortunately, this assumption does not always hold. Experiments show that these homogeneous algorithms suffer a significant performance degradation when running at heterogeneous environment. In this paper, we propose a novel adaptive streaming graph partitioning approach to cope with heterogeneous environment. We first formally model the heterogeneous computing environment with the consideration of the unbalance of computing ability (e.g., the CPU frequency) and communication ability (e.g., the network bandwidth) for each node. Based on this model, we propose a new graph partitioning objective function that aims to minimize the total execution time of the graph-processing job. We then explore some simple yet effective streaming algorithms for this objective function that can achieve balanced and efficient partitioning result. Extensive experiments are conducted on a moderate sized computing cluster with real-world web and social network graphs. The results demonstrate that the proposed approach achieves significant improvement compared with the state-of-the-art solutions.", "paper_title": "Heterogeneous Environment Aware Streaming Graph Partitioning", "paper_id": "WOS:000353890600009"}