{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "euler_diagrams"}, {"score": 0.004550669123303854, "phrase": "effective_tools"}, {"score": 0.004481132747216135, "phrase": "set_intersections"}, {"score": 0.004367581653370531, "phrase": "large_number"}, {"score": 0.004322967486451877, "phrase": "application_areas"}, {"score": 0.004256895619944631, "phrase": "statistical_data_analysis"}, {"score": 0.00421340730888561, "phrase": "software_engineering"}, {"score": 0.004106612344123407, "phrase": "automated_generation"}, {"score": 0.0039010428828989826, "phrase": "abstract_description"}, {"score": 0.0038413947966606118, "phrase": "required_euler_diagram"}, {"score": 0.003574830654211291, "phrase": "generated_diagrams"}, {"score": 0.0034308688638878286, "phrase": "quite_irregular_shapes"}, {"score": 0.0030017207229983385, "phrase": "single_piercing_curves"}, {"score": 0.002971016979295967, "phrase": "double_piercing_curves"}, {"score": 0.002494466951433885, "phrase": "arbitrary_polygons"}, {"score": 0.0023694065215394593, "phrase": "abstract_level"}, {"score": 0.0022738775158524793, "phrase": "java_implementation"}, {"score": 0.0022161333611134806, "phrase": "inductively_pierced_abstract_description"}, {"score": 0.0021709933368474223, "phrase": "euler_diagram"}, {"score": 0.0021049977753042253, "phrase": "polynomial_time"}], "paper_keywords": ["Automated diagram drawing", " Euler diagrams", " diagrammatic reasoning", " information visualization"], "paper_abstract": "Euler diagrams are effective tools for visualizing set intersections. They have a large number of application areas ranging from statistical data analysis to software engineering. However, the automated generation of Euler diagrams has never been easy: given an abstract description of a required Euler diagram, it is computationally expensive to generate the diagram. Moreover, the generated diagrams represent sets by polygons, sometimes with quite irregular shapes that make the diagrams less comprehensible. In this paper, we address these two issues by developing the theory of piercings, where we define single piercing curves and double piercing curves. We prove that if a diagram can be built inductively by successively adding piercing curves under certain constraints, then it can be drawn with circles, which are more esthetically pleasing than arbitrary polygons. The theory of piercings is developed at the abstract level. In addition, we present a Java implementation that, given an inductively pierced abstract description, generates an Euler diagram consisting only of circles within polynomial time.", "paper_title": "Drawing Euler Diagrams with Circles: The Theory of Piercings", "paper_id": "WOS:000290167100013"}