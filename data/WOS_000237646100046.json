{"auto_keywords": [{"score": 0.04370189162868952, "phrase": "domain_architecture"}, {"score": 0.015719716506582538, "phrase": "domain_architectures"}, {"score": 0.013028309047446328, "phrase": "product_line"}, {"score": 0.00471811808206897, "phrase": "variability_analysis"}, {"score": 0.004654642380553263, "phrase": "software_product_line_engineering"}, {"score": 0.004439097815805505, "phrase": "future_reuse"}, {"score": 0.004349791059765796, "phrase": "seamless_reuse"}, {"score": 0.004262273304740847, "phrase": "application_development_process"}, {"score": 0.0040648241451154525, "phrase": "common_software_architecture"}, {"score": 0.0038764861784138117, "phrase": "core_set"}, {"score": 0.0036968421974412522, "phrase": "development_process"}, {"score": 0.0033167679667625667, "phrase": "technically_excellent_domain_architectures"}, {"score": 0.003036832649117453, "phrase": "key_concept"}, {"score": 0.002724428781940696, "phrase": "product_family"}, {"score": 0.002688721198777693, "phrase": "variability"}, {"score": 0.0026335379469691997, "phrase": "different_levels"}, {"score": 0.0024607296642187846, "phrase": "higher_architectural_levels"}, {"score": 0.0023465400668244386, "phrase": "code_level"}, {"score": 0.0021049977753042253, "phrase": "core_assets"}], "paper_keywords": [""], "paper_abstract": "Software product line engineering is a method that prepares for future reuse and supports seamless reuse in the application development process. A domain architecture, sharing a common software architecture across a product line, brings a core set of knowledge and assets to the development process. Domain architectures reduce the complexity and cost of developing and maintaining code. However, technically excellent domain architectures do fail, often because they are not effectively developed. The key concept in the development of domain architecture is variability, the ability to derive various products from the product family. Variability occurs at different levels. It is important to consider variability at the higher architectural levels, and not only at the code level. In this paper, we suggest a method of producing architectures that will be core assets in the product line. We describe a domain architecture where commonality and variability are explicitly considered.", "paper_title": "An approach to developing domain architectures based on variability analysis", "paper_id": "WOS:000237646100046"}