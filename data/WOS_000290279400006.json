{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "domain-specific_concerns"}, {"score": 0.004766388573192505, "phrase": "component-based_systems"}, {"score": 0.0043506951029334984, "phrase": "domain-specific_requirements"}, {"score": 0.004285010985001827, "phrase": "general_trend"}, {"score": 0.004114641015648682, "phrase": "ad-hoc_models"}, {"score": 0.003871653343842317, "phrase": "dedicated_runtime_platforms"}, {"score": 0.003736567662016446, "phrase": "targeted_domain"}, {"score": 0.0032746712603464235, "phrase": "compositional_construction"}, {"score": 0.0029137604783116065, "phrase": "component-oriented_applications"}, {"score": 0.002884317729022721, "phrase": "extra-functional_requirements"}, {"score": 0.002713788077665689, "phrase": "application_architecture"}, {"score": 0.002592523232809191, "phrase": "open_and_extensible_component-based_containers"}, {"score": 0.0025146979283050923, "phrase": "functional_and_extra-functional_concerns"}, {"score": 0.002426842369975213, "phrase": "full_machinery"}, {"score": 0.0023659694724243764, "phrase": "aspect-oriented_programming_paradigm"}, {"score": 0.002214734873559146, "phrase": "real-time_and_embedded_applications"}, {"score": 0.0021049977753042253, "phrase": "distributed_context-aware_middleware"}], "paper_keywords": ["component-based frameworks", " domain-specific software engineering", " aspect-oriented software architectures"], "paper_abstract": "Software components are used in various application domains, and many component models and frameworks have been proposed to fulfill domain-specific requirements. The general trend followed by these approaches is to provide ad-hoc models and tools for capturing these requirements and for implementing their support within dedicated runtime platforms, limited to features of the targeted domain. The challenge is then to propose more flexible solutions, where components reuse is domain agnostic. In this article, we present a framework supporting compositional construction and development of applications that must meet various extra-functional/domain-specific requirements. The key points of our contribution are: i) We target development of component-oriented applications where extra-functional requirements are expressed as annotations on the units of composition in the application architecture. ii) These annotations are implemented as open and extensible component-based containers, achieving full separation of functional and extra-functional concerns. iii) Finally, the full machinery is implemented using the Aspect-Oriented Programming paradigm. We validate our approach with two case studies: the first is related to real-time and embedded applications, while the second refers to the domain of distributed context-aware middleware.", "paper_title": "An Aspect-Oriented Framework for Weaving Domain-Specific Concerns into Component-Based Systems", "paper_id": "WOS:000290279400006"}