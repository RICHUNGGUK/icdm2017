{"auto_keywords": [{"score": 0.04083167311579895, "phrase": "runtime_concept_idiom"}, {"score": 0.00481495049065317, "phrase": "runtime_concepts"}, {"score": 0.004725385523804256, "phrase": "key_benefit"}, {"score": 0.004666598697538815, "phrase": "generic_programming"}, {"score": 0.004466519142879166, "phrase": "clean_separation"}, {"score": 0.004328856052035968, "phrase": "generic_algorithms"}, {"score": 0.004143196873246147, "phrase": "wide_variety"}, {"score": 0.0037480753312398754, "phrase": "unmodified_concrete_types"}, {"score": 0.0036324746826127997, "phrase": "runtime_polymorphic_manner"}, {"score": 0.003028727936200845, "phrase": "algorithm_library"}, {"score": 0.0029169007179202164, "phrase": "concept_information"}, {"score": 0.0028091907694771613, "phrase": "algorithm_implementations"}, {"score": 0.0025892330566358503, "phrase": "experimental_language_extension"}, {"score": 0.0024014759148123736, "phrase": "runtime-polymorphic_analogs"}, {"score": 0.002255431275670053, "phrase": "different_compile-time"}, {"score": 0.0021857667493036786, "phrase": "algorithm_selection_choices"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Generic programming", " Runtime polymorphism", " C plus", " Standard template library"], "paper_abstract": "A key benefit of generic programming is its support for producing modules with clean separation. In particular, generic algorithms are written to work with a wide variety of types without requiring modifications to them. The Runtime concept idiom extends this support by allowing unmodified concrete types to behave in a runtime polymorphic manner. In this paper, we describe one implementation of the runtime concept idiom, in the domain of the C++ standard template library (STL). We complement the runtime concept idiom with an algorithm library that considers both type and concept information to maximize performance when selecting algorithm implementations. We present two implementations, one in ISO C++ and one using an experimental language extension. We use our implementations to describe and measure the performance of runtime-polymorphic analogs of several STL algorithms. The tests demonstrate the effects of different compile-time vs. run-time algorithm selection choices. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic algorithm selection for runtime concepts", "paper_id": "WOS:000280045900003"}