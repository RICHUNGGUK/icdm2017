{"auto_keywords": [{"score": 0.04312295433366767, "phrase": "dlp"}, {"score": 0.0231048550932184, "phrase": "disjunctive_logic_programming"}, {"score": 0.01061237167920707, "phrase": "look-ahead_heuristics"}, {"score": 0.007653370275989976, "phrase": "sat"}, {"score": 0.004562629470601531, "phrase": "convenient_programming_paradigm"}, {"score": 0.004465426224845726, "phrase": "simple_and_highly_declarative_way"}, {"score": 0.00431184897255855, "phrase": "even_problems"}, {"score": 0.004288693093290508, "phrase": "high_complexity"}, {"score": 0.0041411688542696565, "phrase": "efficient_systems"}, {"score": 0.003945211926502484, "phrase": "davis-putnam_procedure"}, {"score": 0.0039029359603474437, "phrase": "propositional_satisfiability"}, {"score": 0.0038094576913405443, "phrase": "suitable_model_checker"}, {"score": 0.0035136783150077175, "phrase": "dlp_system"}, {"score": 0.0034294909626243065, "phrase": "fair_deal"}, {"score": 0.0031123740073705952, "phrase": "dlp."}, {"score": 0.002941069587970774, "phrase": "unit_propagation"}, {"score": 0.0028244964420118587, "phrase": "heuristic_value"}, {"score": 0.0028017406689915124, "phrase": "literal_q"}, {"score": 0.0022701845076460244, "phrase": "optimization_techniques"}, {"score": 0.0022518845063179763, "phrase": "large_number"}, {"score": 0.002227713257210598, "phrase": "well-known_benchmark_problems"}, {"score": 0.0021451344906273815, "phrase": "proposed_techniques"}, {"score": 0.0021049977753042253, "phrase": "dlv_system"}], "paper_keywords": ["artificial intelligence", " logic programming", " nonmonotonic reasoning", " answer set programming", " heuristics", " stable models", " efficient evaluation"], "paper_abstract": "Disjunctive logic programming (DLP), also called answer set programming (ASP), is a convenient programming paradigm which allows for solving problems in a simple and highly declarative way. The language of DLP is very expressive and able to represent even problems of high complexity (every problem in the complexity class Sigma(P)(2) = NPNP. During the last decade, efficient systems supporting DLP have become available. Virtually all of these systems internally rely on variants of the Davis-Putnam procedure (for deciding propositional satisfiability [SAT]), combined with a suitable model checker. The heuristic for the selection of the branching literal (i.e., the criterion determining the literal to be assumed true at a given stage of the computation) dramatically affects the performance of a DLP system. While heuristics for SAT have received a fair deal of research, only little work on heuristics for DLP has been done so far. In this paper, we design, implement, optimize, and experiment with a number of heuristics for DLP. We focus on different look-ahead heuristics, also called \"dynamic heuristics\" (the DLP equivalent of unit propagation [UP] heuristics for SAT). These are branching rules where the heuristic value of a literal Q depends on the result of taking Q true and computing its consequences. We motivate and formally define a number of look-ahead heuristics for DLP programs. Furthermore, since look-ahead heuristics are computationally expensive, we design two techniques for optimizing the burden of their computation. We implement all the proposed heuristics and optimization techniques in DLV-the state-of-the-art implementation of disjunctive logic programming, and we carry out experiments, thoroughly comparing the heuristics and optimization techniques on a large number of instances of well-known benchmark problems. The results of these experiments are very interesting, showing that the proposed techniques significantly improve the performance of the DLV system.", "paper_title": "On look-ahead heuristics in disjunctive logic programming", "paper_id": "WOS:000254176500006"}