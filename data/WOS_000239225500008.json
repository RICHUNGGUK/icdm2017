{"auto_keywords": [{"score": 0.03229351625628141, "phrase": "critical"}, {"score": 0.00481495049065317, "phrase": "buffered_crossbar_fabrics"}, {"score": 0.004764648644792333, "phrase": "buffer-less_crossbar_scheduling_algorithms"}, {"score": 0.004649302313891199, "phrase": "higher_port_numbers"}, {"score": 0.004616859702338596, "phrase": "data_rates"}, {"score": 0.004200319352919505, "phrase": "ibc_switching_architecture"}, {"score": 0.004141877689172017, "phrase": "virtual_output"}, {"score": 0.003999292102785413, "phrase": "distributed_scheduling_algorithms"}, {"score": 0.0038887521594153608, "phrase": "current_and_expected_increases"}, {"score": 0.003861596041315646, "phrase": "internet_throughput_rates"}, {"score": 0.00379452936798156, "phrase": "architectural_similarity"}, {"score": 0.0036767202303156854, "phrase": "ibc_switches"}, {"score": 0.0033564619316337634, "phrase": "scheduling_schemes"}, {"score": 0.0031733603553977877, "phrase": "internal_buffers_importance"}, {"score": 0.00314015410819199, "phrase": "arbitration_process"}, {"score": 0.0030855783418239366, "phrase": "weighted_scheduling_algorithm"}, {"score": 0.0030319482153908037, "phrase": "buffer_first"}, {"score": 0.0030214978825697353, "phrase": "ibc"}, {"score": 0.002958423758207526, "phrase": "full_advantage"}, {"score": 0.0029274600162609654, "phrase": "internal_buffer_elements"}, {"score": 0.0028564621282167685, "phrase": "internal_buffer_information"}, {"score": 0.002767696345005216, "phrase": "scheduling_scheme"}, {"score": 0.002625824756118839, "phrase": "current_arrival_first-priority_removal"}, {"score": 0.0025531499687505483, "phrase": "priority_levels"}, {"score": 0.002439308179084911, "phrase": "internal_buffer_element"}, {"score": 0.0022501603684044903, "phrase": "reconfigurable_logic"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["buffered crossbar fabric", " matched scheduling", " priority"], "paper_abstract": "As buffer-less crossbar scheduling algorithms reach their practical limitations due to higher port numbers and data rates, internally buffered crossbar (IBC) switches have gained a lot of interest recently due to their great potential in solving the complexity and scalability issues faced by their buffer-less predecessors. The IBC switching architecture combined with the virtual output queueing (VOQ) architecture was shown, through distributed scheduling algorithms, to be able to sustain the current and expected increases in Internet throughput rates. Due to the architectural similarity between the input queued (IQ) and IBC switches, all the algorithms proposed for the latter were just a simple mapping of earlier algorithms proposed for the former. In this paper, we propose a set of scheduling schemes that are purely advocated for the VOQ/IBC switch architecture. We first address the issue of the internal buffers importance in the arbitration process. We propose a weighted scheduling algorithm, named Critical internal Buffer First (CBF), which takes full advantage of the internal buffer elements and makes its decision exclusively on the internal buffer information. Second, in order to simplify the scheduling scheme and make it practical, we propose a class of scheduling algorithms, named Current Arrival First-Priority Removal (CAF-PRMV) that use priority levels instead of weights. We argue that the interaction, through the internal buffer element, between the input and output schedulers is very important in designing such practical and highly scalable schemes for the IBC switching architecture. Our hardware implementation, in reconfigurable logic, shows that our CAF-PRMV class of algorithms can sustain a 10 Gbps line speed for a 32 x 32 VOQ/IBC switch. (c) 2005 Elsevier B.V. All rights reserved.", "paper_title": "High-performance switching based on buffered crossbar fabrics", "paper_id": "WOS:000239225500008"}