{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cache-hierarchy_contention-aware_scheduling"}, {"score": 0.0047026237903774895, "phrase": "chip_multiprocessor"}, {"score": 0.004592905436175987, "phrase": "recent_research"}, {"score": 0.004450568197899267, "phrase": "main_memory_bandwidth_contention"}, {"score": 0.00438105507792004, "phrase": "commercial_cmps"}, {"score": 0.004346704947011699, "phrase": "multilevel_cache_hierarchies"}, {"score": 0.004195418010131832, "phrase": "microprocessor_design"}, {"score": 0.0041625173012740544, "phrase": "contention_points"}, {"score": 0.004081385289516914, "phrase": "whole_memory_hierarchy"}, {"score": 0.003908396188878932, "phrase": "future_technologies"}, {"score": 0.003787191644093659, "phrase": "hardware_threads"}, {"score": 0.003626626504149897, "phrase": "microprocessor_generation"}, {"score": 0.003472845095323694, "phrase": "different_contention_points"}, {"score": 0.003405109584265324, "phrase": "memory_subsystem"}, {"score": 0.0032223742018434856, "phrase": "higher_levels"}, {"score": 0.0031845067058084583, "phrase": "memory_hierarchy"}, {"score": 0.0030614565460256897, "phrase": "memory_contention"}, {"score": 0.00290855128461017, "phrase": "first_strategy"}, {"score": 0.002851790448644913, "phrase": "available_bandwidth"}, {"score": 0.002785133616425661, "phrase": "cache_hierarchy"}, {"score": 0.0026045914281028473, "phrase": "contention_effects"}, {"score": 0.002573965014439041, "phrase": "second_strategy"}, {"score": 0.002533687835358909, "phrase": "performance_degradation"}, {"score": 0.002474447780553576, "phrase": "contention-aware_scheduling"}, {"score": 0.0023694065215394593, "phrase": "commercial_single-threaded_quad-core_processor"}, {"score": 0.0023415390666563177, "phrase": "relatively_small_two-level_cache_hierarchy"}, {"score": 0.0022509878391826867, "phrase": "performance_improvement"}, {"score": 0.0021896891011033105, "phrase": "linux_scheduler"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_memory_contention-aware_scheduler"}], "paper_keywords": ["Contention-aware scheduling", " contention points", " shared caches", " cache hierarchy", " memory contention"], "paper_abstract": "To improve chip multiprocessor (CMP) performance, recent research has focused on scheduling strategies to mitigate main memory bandwidth contention. Nowadays, commercial CMPs implement multilevel cache hierarchies that are shared by several multithreaded cores. In this microprocessor design, contention points may appear along the whole memory hierarchy. Moreover, this problem is expected to aggravate in future technologies, since the number of cores and hardware threads, and consequently the size of the shared caches increase with each microprocessor generation. This paper characterizes the impact on performance of the different contention points that appear along the memory subsystem. The analysis shows that some benchmarks are more sensitive to contention in higher levels of the memory hierarchy (e.g., shared L2) than to main memory contention. In this paper, we propose two generic scheduling strategies for CMPs. The first strategy takes into account the available bandwidth at each level of the cache hierarchy. The strategy selects the processes to be coscheduled and allocates them to cores to minimize contention effects. The second strategy also considers the performance degradation each process suffers due to contention-aware scheduling. Both proposals have been implemented and evaluated in a commercial single-threaded quad-core processor with a relatively small two-level cache hierarchy. The proposals reach, on average, a performance improvement by 5.38 and 6.64 percent when compared with the Linux scheduler, while this improvement is by 3.61 percent for an state-of-the-art memory contention-aware scheduler under the evaluated mixes.", "paper_title": "Cache-Hierarchy Contention-Aware Scheduling in CMPs", "paper_id": "WOS:000334672200006"}