{"auto_keywords": [{"score": 0.0402368601405761, "phrase": "test_cases"}, {"score": 0.015719716506582538, "phrase": "symbolic_message_sequence_charts"}, {"score": 0.010231666495727387, "phrase": "process_classes"}, {"score": 0.004783232571029632, "phrase": "message_sequence_charts"}, {"score": 0.004689321062844586, "phrase": "widely_used_visual_formalism"}, {"score": 0.004658426838467567, "phrase": "scenario-based_specifications"}, {"score": 0.00461246494886034, "phrase": "reactive_systems"}, {"score": 0.004521905749482324, "phrase": "msc"}, {"score": 0.004477270137801732, "phrase": "interaction_snippet"}, {"score": 0.004447766706144458, "phrase": "concrete_objects"}, {"score": 0.004331675965350876, "phrase": "voluminous_specifications"}, {"score": 0.004122077038067119, "phrase": "important_role"}, {"score": 0.004081385289516914, "phrase": "model-based_testing"}, {"score": 0.0038838500580958744, "phrase": "test_generation_criteria"}, {"score": 0.0035519826240477444, "phrase": "system_models"}, {"score": 0.0032916702592724217, "phrase": "scenario-based_notation"}, {"score": 0.0029412916164128925, "phrase": "smsc_lifeline"}, {"score": 0.0028360962841331634, "phrase": "substantially_more_modeling_power"}, {"score": 0.002771115819151223, "phrase": "abstract_execution_semantics"}, {"score": 0.002671990515821213, "phrase": "msc-based_system_models"}, {"score": 0.0025090323307618632, "phrase": "smsc-based_testing_methodology"}, {"score": 0.0024192592458651204, "phrase": "new_object_configurations"}, {"score": 0.00240328454980006, "phrase": "minimal_rework"}, {"score": 0.00234043119560776, "phrase": "msc_lifelines"}, {"score": 0.0022641658133181115, "phrase": "existing_standards"}, {"score": 0.0022417856334225644, "phrase": "uml"}, {"score": 0.002118993962770973, "phrase": "weather-update_controller_case-study"}, {"score": 0.0021049998130124137, "phrase": "nasa."}], "paper_keywords": ["Design", " Languages", " Verification", " Message sequence charts", " unified modeling language (UML)", " symbolic execution", " test generation"], "paper_abstract": "Message sequence charts (MSCs) are a widely used visual formalism for scenario-based specifications of distributed reactive systems. In its conventional usage, an MSC captures an interaction snippet between concrete objects in the system. This leads to voluminous specifications when the system contains several objects that are behaviorally similar. MSCs also play an important role in the model-based testing of reactive systems, where they may be used for specifying (partial) system behaviors, describing test generation criteria, or representing test cases. However, since the number of processes in a MSC specification are fixed, model-based testing of systems consisting of process classes may involve a significant amount of rework: for example, reconstructing system models, or regenerating test cases for systems differing only in the number of processes of various types. In this article we propose a scenario-based notation, called symbolic message sequence charts (SMSCs), for modeling, simulation, and testing of process classes. SMSCs are a lightweight syntactic and semantic extension of MSCs where, unlike MSCs, a SMSC lifeline can denote some/all objects from a collection. Our extensions give us substantially more modeling power. Moreover, we present an abstract execution semantics for (structured collections of) SMSCs. This allows us to validate MSC-based system models capturing interactions between large, or even unbounded, number of objects. Finally, we describe a SMSC-based testing methodology for process classes, which allows generation of test cases for new object configurations with minimal rework. Since our SMSC extensions are only concerned with MSC lifelines, we believe that they can be integrated into existing standards such as UML 2.0. We illustrate our SMSC-based framework for modeling, simulation, and testing of process classes using a weather-update controller case-study from NASA.", "paper_title": "Symbolic Message Sequence Charts", "paper_id": "WOS:000301976000006"}