{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "program_structures"}, {"score": 0.0046432244185370605, "phrase": "register_automaton_learning"}, {"score": 0.004417012437860011, "phrase": "infinite-state_systems"}, {"score": 0.00429828390000229, "phrase": "precursor_techniques"}, {"score": 0.0041827333568982055, "phrase": "total_span"}, {"score": 0.0040334640350288, "phrase": "large_share"}, {"score": 0.00385431710959668, "phrase": "increasingly_popular_application"}, {"score": 0.0038194503801108324, "phrase": "grammatical_inference_techniques"}, {"score": 0.0037336520904376687, "phrase": "software_engineering"}, {"score": 0.0036167509502276294, "phrase": "key_problem"}, {"score": 0.003424771860049617, "phrase": "data_values"}, {"score": 0.003378385493203297, "phrase": "infinite_domains"}, {"score": 0.0032135959043774085, "phrase": "first_case_studies"}, {"score": 0.0030429511467945525, "phrase": "different_steps"}, {"score": 0.002934237411711622, "phrase": "model_level"}, {"score": 0.0028813415821988156, "phrase": "mealy_machines"}, {"score": 0.0027407299369891502, "phrase": "automated_alphabet_abstraction_refinement_techniques"}, {"score": 0.0027035833504191233, "phrase": "two-dimensional_extension"}, {"score": 0.00266693888510356, "phrase": "partition-refinement_based_approach"}, {"score": 0.0025716240685409513, "phrase": "optimal_alphabet_abstractions"}, {"score": 0.002536763634539386, "phrase": "register_mealy_machines"}, {"score": 0.002423931101340771, "phrase": "data-independent_data_processing"}, {"score": 0.0023372808856170386, "phrase": "interface_programs"}, {"score": 0.0021731423856364003, "phrase": "active_automata"}, {"score": 0.0021049977753042253, "phrase": "high_practical_importance"}], "paper_keywords": ["Active automata learning", " Alphabet abstraction refinement", " Register automata", " Formal methods", " Software engineering"], "paper_abstract": "This paper reviews the development of Register Automaton learning, an enhancement of active automata learning to deal with infinite-state systems. We will revisit the precursor techniques and influences, which in total span over more than a decade. A large share of this development was guided and motivated by the increasingly popular application of grammatical inference techniques in the field of software engineering. We specifically focus on a key problem to achieve practicality in this field: the adequate treatment of data values ranging over infinite domains, a major source of undecidability. Starting with the first case studies, in which data was completely abstracted away, we revisit different steps towards dealing with data explicitly at a model level: we discuss Mealy machines as a model for systems with (data) output, automated alphabet abstraction refinement techniques as a two-dimensional extension of the partition-refinement based approach of active automata learning to also inferring optimal alphabet abstractions, and Register Mealy Machines, which can be regarded as programs restricted to data-independent data processing as it is typical for protocols or interface programs. We are convinced that this development will significantly contribute to paving the road for active automata learning to become a technology of high practical importance.", "paper_title": "Learning register automata: from languages to program structures", "paper_id": "WOS:000338201200004"}