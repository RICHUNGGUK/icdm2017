{"auto_keywords": [{"score": 0.03774414736521044, "phrase": "target_theory"}, {"score": 0.019876744244944955, "phrase": "csp"}, {"score": 0.00900668300517708, "phrase": "source_theory"}, {"score": 0.007015343185636229, "phrase": "main_varieties"}, {"score": 0.006419567397221452, "phrase": "healthiness_conditions"}, {"score": 0.0062156753001228185, "phrase": "ccs"}, {"score": 0.004776184975010888, "phrase": "ccs._theories"}, {"score": 0.004237479460445805, "phrase": "refinement_relation"}, {"score": 0.004062937864702115, "phrase": "csp_model"}, {"score": 0.004050114021139427, "phrase": "ccs."}, {"score": 0.003946314168776204, "phrase": "unifying_treatment"}, {"score": 0.0038766918567981552, "phrase": "familiar_varieties"}, {"score": 0.0037229762994204995, "phrase": "function_l"}, {"score": 0.003616075523715027, "phrase": "exactly_the_set"}, {"score": 0.0035695510974917866, "phrase": "ordering_relation"}, {"score": 0.003517923702546034, "phrase": "link_l"}, {"score": 0.003444661671146042, "phrase": "normal_transition_rules"}, {"score": 0.0034279721355412285, "phrase": "structured_operational_semantics"}, {"score": 0.0033674636857972135, "phrase": "weak_simulation"}, {"score": 0.0033457255272560426, "phrase": "trace_refinement"}, {"score": 0.002836280059426759, "phrase": "fixed-point_equivalences"}, {"score": 0.002671263324230699, "phrase": "separately_defined_retractions"}, {"score": 0.0026283317826677685, "phrase": "important_properties"}, {"score": 0.0026029038954511617, "phrase": "transition_systems"}, {"score": 0.002561068179724396, "phrase": "main_standard_versions"}, {"score": 0.002528083037522219, "phrase": "universal_transition_system"}, {"score": 0.0024673738215365104, "phrase": "unfinished_business"}, {"score": 0.0024554076215176036, "phrase": "original_esprit_basic_research_action_concur"}, {"score": 0.0023732525576507083, "phrase": "acp"}, {"score": 0.0023464777223913946, "phrase": "good_tool"}, {"score": 0.002217070648961955, "phrase": "due_course"}, {"score": 0.002202742267484358, "phrase": "rigorous_foundation"}, {"score": 0.0021920566498679537, "phrase": "comprehensive_programming_toolset"}, {"score": 0.002174362104389082, "phrase": "reliable_assistance"}, {"score": 0.0021568100826746253, "phrase": "program_design"}, {"score": 0.002122129047554937, "phrase": "working_draft"}, {"score": 0.0021049977753042253, "phrase": "later_sections"}], "paper_keywords": [""], "paper_abstract": "Theories of concurrency can be distinguished by the set of processes that they model, and by their choice of pre-ordering relation used to compare processes and to prove their correctness. For example, theories based on CCS are often pre-ordered by simulation (or more commonly bisimulation), of which the main varieties are strong or weak or barbed. Theories based on CSP choose as their pre-order a refinement relation, defined as inclusion over sets of observations. The main varieties of observation are just traces, or failures and/or divergences. The processes of the CSP model are restricted to those that satisfy certain naturally arising 'healthiness conditions'. This paper gives a unifying treatment of simulation and refinement, and illustrates it by the familiar varieties of CCS and CSP that are mentioned above. We consider the variations two at a time. A link between two theories is a function L, which maps the processes of its source theory onto those of its target theory. The image of L defines exactly the set of processes of the target theory. The ordering relation of the target theory is obtained by applying the link L to one or both operands before applying the source theory ordering. We will use the normal transition rules of a structured operational semantics to define a series of linking functions: W for weak simulation, T for trace refinement, R for refusals, D for divergences. We then show that each function is a retraction, in the sense that it is idempotent and decreasing and (in most cases) monotonic in its source ordering. Finally, we show that certain compositions of these functions are also retractions. The definition of a retraction ensures that (1) the processes of the target theory are a subset of those of the source theory; (2) all ordering theorems of the source theory are preserved in the target theory; (3) the healthiness conditions of the target theory are expressed as fixed-point equivalences of the form p = Lp; (4) model-checking the target theory can be optimised, by applying L to only one of the two operands of the ordering. Finally, we show how the separately defined retractions can be composed in a way that preserves these important properties. In other words, the transition systems of several alternative versions of CCS, as well as the main standard versions of CSP, are retracts of the universal transition system that underlies CCS. The research reported here is a step towards completion of the unfinished business of the original ESPRIT Basic Research Action CONCUR [BRA 3009, 1989-92], which aimed to assimilate the theories and notations of CSP, ACP and CCS. A retraction is a good tool for this purpose, because it precisely codifies the similarities between the theories, and enables them to be used in combination, while preserving their essential and beneficial differences. Such unified families of theories may in due course serve as a rigorous foundation for a comprehensive programming toolset, one that provides reliable assistance at all stages of program design, development, testing and evolution. In this working draft, some of the later sections are incomplete.", "paper_title": "CSP is a retract of CCS", "paper_id": "WOS:000239422200003"}