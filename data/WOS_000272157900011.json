{"auto_keywords": [{"score": 0.034137646507053664, "phrase": "parallel_memory_module"}, {"score": 0.00481495049065317, "phrase": "real-time_parallel_storage"}, {"score": 0.004671156704912419, "phrase": "hierarchical_organization"}, {"score": 0.004635881163634672, "phrase": "associative_memories"}, {"score": 0.004600870784042767, "phrase": "walsh_function_encoding"}, {"score": 0.004514538272435089, "phrase": "walsh"}, {"score": 0.004248782702870078, "phrase": "walsh_function"}, {"score": 0.004232702713825967, "phrase": "based_associative_memory"}, {"score": 0.004013843843250455, "phrase": "purely_a_software_algorithmic_technique"}, {"score": 0.003908678575537341, "phrase": "parallel_hardware"}, {"score": 0.0037774893672602506, "phrase": "single_pattern_space"}, {"score": 0.003748937184382714, "phrase": "computer_memory"}, {"score": 0.0036784938661226104, "phrase": "walsh_encoding"}, {"score": 0.0035685175471526823, "phrase": "distributed_associative_memory"}, {"score": 0.0035147642199945387, "phrase": "high_speed_pattern_recognition"}, {"score": 0.0034096661914349577, "phrase": "single_memory_version"}, {"score": 0.003320277992107974, "phrase": "single_memory_concept"}, {"score": 0.0031724417545242315, "phrase": "tree-shaped_hierarchy"}, {"score": 0.0031365196064043494, "phrase": "parallel_modules"}, {"score": 0.002985484575498061, "phrase": "practical_large_scale_data_applications"}, {"score": 0.002929344511491418, "phrase": "speech_recognition"}, {"score": 0.002896167001212006, "phrase": "memory_hierarchy"}, {"score": 0.0027671619871474764, "phrase": "training_data"}, {"score": 0.0027151161550531206, "phrase": "proposed_architecture"}, {"score": 0.0026843584448921543, "phrase": "clustered_data_subsets"}, {"score": 0.0025941547726803594, "phrase": "module_allocation"}, {"score": 0.0025453546203590364, "phrase": "genetic_algorithm"}, {"score": 0.0025069746344846397, "phrase": "minimal_implementation"}, {"score": 0.0024785689583828796, "phrase": "memory_structure"}, {"score": 0.0023235629819760018, "phrase": "similar_data"}, {"score": 0.002254003531073337, "phrase": "large_scale_real_world_data"}, {"score": 0.0021049977753042253, "phrase": "template_matching"}], "paper_keywords": ["Parallel storage and recognition", " Walsh function", " Parallel memory", " Hierarchical associative memory", " Optimal memory allocation"], "paper_abstract": "A new hierarchical Walsh memory which can store and quickly recognize any number of patterns is proposed. A Walsh function based associative memory was found to be capable of storing and recognizing patterns in parallel via purely a software algorithmic technique (namely, without resorting to parallel hardware) while the memory itself only takes a single pattern space of computer memory, due to the Walsh encoding of each pattern. This type of distributed associative memory lends itself to high speed pattern recognition and has been reported earlier in a single memory version. In this paper, the single memory concept has first been extended to a parallel memory module and then to a tree-shaped hierarchy of these parallel modules that are capable of storing and recognizing any number of patterns for practical large scale data applications exemplified by image and speech recognition. The memory hierarchy was built by successively applying k-means clustering to the training data set. In the proposed architecture, the clustered data subsets are stored respectively into a parallel memory module where the module allocation is optimized using the genetic algorithm to realize a minimal implementation of the memory structure. The system can recognize all the training patterns with 100% accuracy and further, can also generalize on similar data. In order to demonstrate its efficacy with large scale real world data, we stored and recognized over 500 faces while at same time, achieving much reduced recognition time and storage space than template matching.", "paper_title": "A new paradigm for real-time parallel storage and recognition of patterns based on a hierarchical organization of associative memories utilizing Walsh function encoding", "paper_id": "WOS:000272157900011"}