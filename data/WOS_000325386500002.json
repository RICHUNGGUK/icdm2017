{"auto_keywords": [{"score": 0.04900470777854888, "phrase": "long_strings"}, {"score": 0.01550939450999636, "phrase": "frequent_factors"}, {"score": 0.00481495049065317, "phrase": "positioning_strategy"}, {"score": 0.0046432244185370605, "phrase": "important_problem"}, {"score": 0.004518442937844318, "phrase": "biosequence_mining"}, {"score": 0.004457309741979921, "phrase": "classical_approaches"}, {"score": 0.004397000006837371, "phrase": "algorithms_process"}, {"score": 0.004357245559948974, "phrase": "vast_database"}, {"score": 0.004317848984770719, "phrase": "small_strings"}, {"score": 0.004126123386192962, "phrase": "small_database"}, {"score": 0.0040334640350288, "phrase": "main_difference"}, {"score": 0.003960831041259951, "phrase": "high_number"}, {"score": 0.0036998728605395384, "phrase": "new_algorithm"}, {"score": 0.003535489842686145, "phrase": "apriori-like_solution"}, {"score": 0.003378385493203297, "phrase": "non-frequent_pattern"}, {"score": 0.0032725712584012953, "phrase": "sanspos_algorithm"}, {"score": 0.0031990183472675377, "phrase": "candidate_generation"}, {"score": 0.003170060683860338, "phrase": "test_approach"}, {"score": 0.003141364320497748, "phrase": "multiple_length_patterns"}, {"score": 0.00297454367746853, "phrase": "new_data_structure"}, {"score": 0.002855251306715901, "phrase": "positioning_matrix"}, {"score": 0.0027910516355928983, "phrase": "new_positioning_strategy"}, {"score": 0.0027407299369891502, "phrase": "positioning_matrices"}, {"score": 0.0026790983342162887, "phrase": "advanced_prune_heuristics"}, {"score": 0.0026069623057065664, "phrase": "minimal_computational_cost"}, {"score": 0.0025137856138000014, "phrase": "short_tandem_repeats"}, {"score": 0.0024797072773840704, "phrase": "different_interestingness_measures"}, {"score": 0.0023479408542211875, "phrase": "different_sections"}, {"score": 0.002316105585203396, "phrase": "input_strings"}, {"score": 0.0022537212268979507, "phrase": "resulting_running_time"}, {"score": 0.0021632743048552536, "phrase": "natural_language_and_biological_sequence_contexts"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["String mining", " Frequent factors", " Short tandem repeats", " Trie data structures"], "paper_abstract": "Discovering frequent factors from long strings is an important problem in many applications, such as biosequence mining. In classical approaches, the algorithms process a vast database of small strings. However, in this paper we analyze a small database of long strings. The main difference resides in the high number of patterns to analyze. To tackle the problem, we have developed a new algorithm for discovering frequent factors in long strings. We present an Apriori-like solution which exploits the fact that any super-pattern of a non-frequent pattern cannot be frequent. The SANSPOS algorithm does a multiple-pass, candidate generation and test approach. Multiple length patterns can be generated in a pass. This algorithm uses a new data structure to arrange nodes in a trie. A Positioning Matrix is defined as a new positioning strategy. By using Positioning Matrices, we can apply advanced prune heuristics in a trio with a minimal computational cost. The Positioning Matrices let us process strings including Short Tandem Repeats and calculate different interestingness measures efficiently. Furthermore, in our algorithm we apply parallelism to transverse different sections of the input strings concurrently, speeding up the resulting running time. The algorithm has been successfully used in natural language and biological sequence contexts. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "String analysis by sliding positioning strategy", "paper_id": "WOS:000325386500002"}