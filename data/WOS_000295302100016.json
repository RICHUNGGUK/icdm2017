{"auto_keywords": [{"score": 0.04900136041045406, "phrase": "tree_packing_problem"}, {"score": 0.04088601008100005, "phrase": "packing_number"}, {"score": 0.00481495049065317, "phrase": "lp-based_heuristic_algorithm"}, {"score": 0.004367228576339114, "phrase": "directed_graph"}, {"score": 0.0035458802311188497, "phrase": "total_consumption"}, {"score": 0.0035114053248663335, "phrase": "packed_in-trees"}, {"score": 0.003226275635740122, "phrase": "two-phase_heuristic_algorithm"}, {"score": 0.0031535341431377837, "phrase": "first_phase"}, {"score": 0.002935560711594682, "phrase": "ip"}, {"score": 0.002850551552945005, "phrase": "proposed_algorithm"}, {"score": 0.0028228178454284825, "phrase": "column_generation_method"}, {"score": 0.0027412207934201013, "phrase": "promising_candidate"}, {"score": 0.002679386232765167, "phrase": "second_phase"}, {"score": 0.002543224008253855, "phrase": "second-phase_problem"}, {"score": 0.0025102759256260703, "phrase": "feasible_solutions"}, {"score": 0.0024858445890050614, "phrase": "lp_relaxation_problem"}, {"score": 0.0024297565926197505, "phrase": "greedy_algorithm"}, {"score": 0.002351813899450668, "phrase": "solution_quality"}, {"score": 0.0022838006190016263, "phrase": "computational_experiments"}, {"score": 0.0022468671200629024, "phrase": "related_papers"}, {"score": 0.0022249936992104822, "phrase": "randomly_generated_graphs"}, {"score": 0.002160640052461594, "phrase": "better_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Wireless ad hoc network", " Sensor network", " LP relaxation", " Column generation", " Relaxation heuristics"], "paper_abstract": "In this paper, we deal with the node capacitated in-tree packing problem. The input consists of a directed graph, a root node, a node capacity function and edge consumption functions for heads and tails. The problem is to find a subset of rooted spanning in-trees and their packing numbers, where the packing number of an in-tree is the number of times it is packed, so as to maximize the sum of packing numbers under the constraint that the total consumption of the packed in-trees at each node does not exceed the capacity of the node. This problem is known to be NP-hard. We propose a two-phase heuristic algorithm for this problem. In the first phase, it generates candidate spanning in-trees to be packed. The node capacitated in-tree packing problem can be formulated as an IP (integer programming) problem, and the proposed algorithm employs the column generation method for the LP (linear programming) relaxation problem of the IP to generate promising candidate in-trees. In the second phase, the algorithm computes the packing number of each in-tree. Our algorithm solves this second-phase problem by first modifying feasible solutions of the LP relaxation problem and then improving them with a greedy algorithm. We analyze upper and lower bounds on the solution quality of such LP-based algorithms for this problem. We conducted computational experiments on graphs used in related papers and on randomly generated graphs. The results indicate that our algorithm has a better performance than other existing methods. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "An LP-based heuristic algorithm for the node capacitated in-tree packing problem", "paper_id": "WOS:000295302100016"}