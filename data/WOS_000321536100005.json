{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "distributed_computation"}, {"score": 0.0043793594257092805, "phrase": "aspect-oriented_programming"}, {"score": 0.004204904449336037, "phrase": "security_and_trust_issues"}, {"score": 0.0040373708328770306, "phrase": "logical_design"}, {"score": 0.0036224139706218916, "phrase": "main_challenge"}, {"score": 0.003294350220187021, "phrase": "security_policies"}, {"score": 0.0031629800646754474, "phrase": "particular_predictive_access_control_policies"}, {"score": 0.002915701586760994, "phrase": "future_behavior"}, {"score": 0.002687702958515561, "phrase": "novel_feature"}, {"score": 0.0023465400668244386, "phrase": "secondary_use"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Coordination languages", " Security policies", " Aspect-oriented programming", " Program analysis", " Tuple spaces"], "paper_abstract": "We show how to use aspect-oriented programming to separate security and trust issues from the logical design of mobile, distributed systems. The main challenge is how to enforce various types of security policies, in particular predictive access control policies - policies based on the future behavior of a program. A novel feature of our approach is that we can define policies concerning secondary use of data. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Predictive access control for distributed computation", "paper_id": "WOS:000321536100005"}