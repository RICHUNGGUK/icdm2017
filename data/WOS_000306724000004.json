{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "session_types"}, {"score": 0.004542780650208743, "phrase": "linear_pi_calculus"}, {"score": 0.0042610532651691305, "phrase": "qualified_communication_channels"}, {"score": 0.004114787982556699, "phrase": "exactly_one_thread"}, {"score": 0.003859500298805362, "phrase": "unbounded_number"}, {"score": 0.003375574760845742, "phrase": "scope_restriction"}, {"score": 0.0030042210975126616, "phrase": "precise_control"}, {"score": 0.002917931350071647, "phrase": "conventional_linear_type_system"}, {"score": 0.0028341130433482565, "phrase": "uniform_treatment"}, {"score": 0.0027687904688616983, "phrase": "shared_channels"}, {"score": 0.0027049694095434905, "phrase": "surprisingly_simply_theory"}, {"score": 0.002536926192232391, "phrase": "traditional_systems"}, {"score": 0.002310915790114425, "phrase": "recursive_types"}, {"score": 0.0022576249214220187, "phrase": "finally_choice"}, {"score": 0.0021799789348982516, "phrase": "algorithmic_type_checking_system"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": [""], "paper_abstract": "We present a reconstruction of session types in a linear pi calculus where types are qualified as linear or unrestricted. Linearly qualified communication channels are guaranteed to occur in exactly one thread, possibly multiple times; unrestricted (or shared) channels may appear in an unbounded number of threads. In our language each channel is characterized by two distinct variables, one used for reading, the other for writing: scope restriction binds together two variables, thus establishing the correspondence between the two ends of the same channel. This mechanism allows a precise control of resources via a conventional linear type system. Furthermore, the uniform treatment of linear and shared channels leads to a surprisingly simply theory which, in addition, extends typability when compared to traditional systems for session types. We build the language gradually, starting from simple input/output, then adding recursive types, replication and finally choice. We also present an algorithmic type checking system. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Fundamentals of session types", "paper_id": "WOS:000306724000004"}