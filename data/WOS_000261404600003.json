{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "deterministic_incremental_dependency_parsing"}, {"score": 0.031025108789457186, "phrase": "non-projective_list-based_algorithm"}, {"score": 0.029585393486621675, "phrase": "projective_algorithms"}, {"score": 0.028688551821597418, "phrase": "pseudo-projective_parsing"}, {"score": 0.004612147352416241, "phrase": "single_derivation"}, {"score": 0.00452043800760441, "phrase": "natural_language_parsing"}, {"score": 0.0044688500725247726, "phrase": "massive_ambiguity"}, {"score": 0.004417848254181138, "phrase": "natural_language_grammars"}, {"score": 0.004256060942428626, "phrase": "treebank-induced_classifiers"}, {"score": 0.004171402455813099, "phrase": "highly_accurate_disambiguating_parsers"}, {"score": 0.004111960807556655, "phrase": "dependency-based_syntactic_representations"}, {"score": 0.003995596388213658, "phrase": "general_framework"}, {"score": 0.0038713805573219297, "phrase": "transition_systems"}, {"score": 0.003634371940842838, "phrase": "former_family"}, {"score": 0.0035722806911457545, "phrase": "projective_dependency_structures"}, {"score": 0.003471135453226184, "phrase": "arc-standard_variant"}, {"score": 0.003431481042678356, "phrase": "latter_family"}, {"score": 0.003382547312072468, "phrase": "projective_and_a_non-projective_variant"}, {"score": 0.003175370009931047, "phrase": "experimental_evaluation"}, {"score": 0.0031121406603482112, "phrase": "svm_classifiers"}, {"score": 0.00307657476125683, "phrase": "next_parsing_action"}, {"score": 0.003032686676675628, "phrase": "thirteen_languages"}, {"score": 0.0029637603945517313, "phrase": "competitive_accuracy"}, {"score": 0.0028468767420392945, "phrase": "non-negligible_proportion"}, {"score": 0.0028305586112921583, "phrase": "non-projective_constructions"}, {"score": 0.0027662135080370014, "phrase": "comparable_results"}, {"score": 0.002680114113899346, "phrase": "linear_time_complexity"}, {"score": 0.0026570998719084153, "phrase": "stack-based_algorithms"}, {"score": 0.0025230952890994236, "phrase": "projective_list-based_algorithm"}, {"score": 0.0021539955106204354, "phrase": "first_comprehensive_analysis"}, {"score": 0.0021049977753042253, "phrase": "unified_framework"}], "paper_keywords": [""], "paper_abstract": "Parsing algorithms that process the input from left to right and construct a single derivation have often been considered inadequate for natural language parsing because of the massive ambiguity typically found in natural language grammars. Nevertheless, it has been shown that such algorithms, combined with treebank-induced classifiers, can be used to build highly accurate disambiguating parsers, in particular for dependency-based syntactic representations. In this article, we first present a general framework for describing and analyzing algorithms for deterministic incremental dependency parsing, formalized as transition systems. We then describe and analyze two families of such algorithms: stack-based and list-based algorithms. In the former family, which is restricted to projective dependency structures, we describe an arc-eager and an arc-standard variant; in the latter family, we present a projective and a non-projective variant. For each of the four algorithms, we give proofs of correctness and complexity. In addition, we perform an experimental evaluation of all algorithms in combination with SVM classifiers for predicting the next parsing action, using data from thirteen languages. We show that all four algorithms give competitive accuracy, although the non-projective list-based algorithm generally outperforms the projective algorithms for languages with a non-negligible proportion of non-projective constructions. However, the projective algorithms often produce comparable results when combined with the technique known as pseudo-projective parsing. The linear time complexity of the stack-based algorithms gives them an advantage with respect to efficiency both in learning and in parsing, but the projective list-based algorithm turns out to be equally efficient in practice. Moreover, when the projective algorithms are used to implement pseudo-projective parsing, they sometimes become less efficient in parsing (but not in learning) than the non-projective list-based algorithm. Although most of the algorithms have been partially described in the literature before, this is the first comprehensive analysis and evaluation of the algorithms within a unified framework.", "paper_title": "Algorithms for Deterministic Incremental Dependency Parsing", "paper_id": "WOS:000261404600003"}