{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "impact"}, {"score": 0.0047631192993526465, "phrase": "refactoring_of_smells"}, {"score": 0.004728874038094706, "phrase": "pipe-like_web_mashups"}, {"score": 0.004577777897335174, "phrase": "visual_mashup_creation"}, {"score": 0.004320932773749168, "phrase": "web_sources"}, {"score": 0.0036729522133392175, "phrase": "software_engineering_techniques"}, {"score": 0.0036333693364337953, "phrase": "end_users"}, {"score": 0.0033557940171476683, "phrase": "web_mashups"}, {"score": 0.003331516668076595, "phrase": "pipes"}, {"score": 0.0033076455392068095, "phrase": "popular_yahoo"}, {"score": 0.0032250366795039715, "phrase": "empirical_study"}, {"score": 0.003011033940247791, "phrase": "significant_majority"}, {"score": 0.0027708353425467927, "phrase": "mashup_programs"}, {"score": 0.0027113815712365924, "phrase": "broken_data_sources"}, {"score": 0.0026918477311176376, "phrase": "dated_components"}, {"score": 0.0026151058979100596, "phrase": "community_development_patterns"}, {"score": 0.0024326641072463157, "phrase": "proposed_refactorings"}, {"score": 0.0023804491500749106, "phrase": "smelly_mashups"}, {"score": 0.0022629214153694504, "phrase": "end-users_programming_mashups"}], "paper_keywords": ["End-user software engineering", " end-user programming", " web mashups", " refactoring", " code smells", " empirical studies"], "paper_abstract": "With the emergence of tools to support visual mashup creation, tens of thousands of users have started to access, manipulate, and compose data from web sources. We have observed, however, that mashups created by these users tend to suffer from deficiencies that propagate as mashups are reused, which happens frequently. To address these deficiencies, we would like to bring some of the benefits of software engineering techniques to the end users creating these programs. In this work, we focus on identifying code smells indicative of the deficiencies we observed in web mashups programmed in the popular Yahoo! Pipes environment. Through an empirical study, we explore the impact of those smells on the preferences of 61 users, and observe that a significant majority of users prefer mashups without smells. We then introduce refactorings targeting those smells. These refactorings reduce the complexity of the mashup programs, increase their abstraction, update broken data sources and dated components, and standardize their structures to fit the community development patterns. Our assessment of a sample of over 8,000 mashups shows that smells are present in 81 percent of them and that the proposed refactorings can reduce the number of smelly mashups to 16 percent, illustrating the potential of refactoring to support the thousands of end-users programming mashups. Further, we explore how the smells and refactorings can apply to other end-user programming domains to show the generalizability of our approach.", "paper_title": "Identification, Impact, and Refactoring of Smells in Pipe-Like Web Mashups", "paper_id": "WOS:000327607000003"}