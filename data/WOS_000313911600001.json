{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "refactoring_methods"}, {"score": 0.015420339390084655, "phrase": "aspect-oriented_programming"}, {"score": 0.004542158659382197, "phrase": "software_quality"}, {"score": 0.004284755353695709, "phrase": "existing_code"}, {"score": 0.003459191419478298, "phrase": "aspect-oriented_systems"}, {"score": 0.0031383410838018953, "phrase": "aspect-oriented_software_designer"}, {"score": 0.0028471655497661528, "phrase": "software_system"}, {"score": 0.002297949552105756, "phrase": "software_quality_attributes"}, {"score": 0.0022536005664642294, "phrase": "six_open-source_aspect-oriented_software_systems"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["aspect-oriented programming", " refactoring", " refactoring taxonomy", " refactoring classification", " software metrics"], "paper_abstract": "Refactoring improves software quality by improving the design of existing code through changing its internal structure while preserving its behavior. Improving one quality attribute may impair other quality attributes. A number of refactoring methods were proposed specifically for aspect-oriented systems. However, there are no guidelines to help aspect-oriented software designer decide which refactoring methods to apply to optimize a software system with regard to certain design goals. In this paper, we propose a taxonomy/classification of refactoring methods for aspect-oriented programming based on their measurable effect on software quality attributes using six open-source aspect-oriented software systems. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Empirical taxonomy of refactoring methods for aspect-oriented programming", "paper_id": "WOS:000313911600001"}