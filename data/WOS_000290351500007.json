{"auto_keywords": [{"score": 0.032289029853923026, "phrase": "np"}, {"score": 0.00481495049065317, "phrase": "smaller_indexes"}, {"score": 0.004734448316824488, "phrase": "column-oriented_indexes"}, {"score": 0.004539005582217309, "phrase": "bitmap_indexes"}, {"score": 0.004388450908826472, "phrase": "run-length_encoding"}, {"score": 0.0038668462001710314, "phrase": "realistic_data_sets"}, {"score": 0.0036450381529042103, "phrase": "right_order"}, {"score": 0.003104849179057156, "phrase": "best_column_order"}, {"score": 0.0026895647154863405, "phrase": "table_columns"}, {"score": 0.0025137856138000036, "phrase": "increasing_cardinality"}, {"score": 0.0023694065215394593, "phrase": "hilbert_space-filling_curves"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Data warehousing", " Indexing", " Compression", " Gray codes"], "paper_abstract": "Column-oriented indexes such as projection or bitmap indexes are compressed by run-length encoding to reduce storage and increase speed. Sorting the tables improves compression. On realistic data sets, permuting the columns in the right order before sorting can reduce the number of runs by a factor of two or more. Unfortunately, determining the best column order is NP-hard. For many cases, we prove that the number of runs in table columns is minimized if we sort columns by increasing cardinality. Experimentally, sorting based on Hilbert space-filling curves is poor at minimizing the number of runs. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Reordering columns for smaller indexes", "paper_id": "WOS:000290351500007"}