{"auto_keywords": [{"score": 0.048749297367557266, "phrase": "multimedia_applications"}, {"score": 0.00481495049065317, "phrase": "reconfigurable_parallel_multimedia_applications"}, {"score": 0.004594145316058688, "phrase": "system"}, {"score": 0.003990385737207714, "phrase": "user_event_handling"}, {"score": 0.0034984345652694982, "phrase": "hinch"}, {"score": 0.002953711377604328, "phrase": "dataflow_style"}, {"score": 0.002447101794397243, "phrase": "generic_component_interface"}, {"score": 0.0022696277881969896, "phrase": "space-cake_soc_architecture_simulator"}], "paper_keywords": [""], "paper_abstract": "Programming multimedia applications for System-on-Chip (SoC) architectures is difficult because streaming communication, user event handling, reconfiguration, and parallelism have to be dealt with. We present Hinch, a runtime system for multimedia applications, that efficiently exploits parallelism by running the application in a dataflow style. The application has to be implemented as components that communicate using streams. Reconfigurability is supported by a generic component interface. Measurements have been performed on a Space-Cake SoC architecture simulator. Hinch can easily be ported to other shared-memory architectures.", "paper_title": "Supporting reconfigurable parallel multimedia applications", "paper_id": "WOS:000241469500069"}