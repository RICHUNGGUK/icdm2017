{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "operational_semantics"}, {"score": 0.004645057834614705, "phrase": "support_system"}, {"score": 0.0035346515636097533, "phrase": "vast_majority"}, {"score": 0.003313053707792957, "phrase": "full_axiomatic_description"}, {"score": 0.0032190636347671675, "phrase": "sos_description"}, {"score": 0.003105305189036267, "phrase": "detailed_proofs"}, {"score": 0.002952745241052452, "phrase": "suitable_support_systems"}, {"score": 0.002362105010110277, "phrase": "main_contribution"}, {"score": 0.0022785613865764923, "phrase": "trivial_example"}, {"score": 0.0021509807762081145, "phrase": "interactive_proof_system"}], "paper_keywords": ["Structural operational semantics", " Proofs about programs", " Tool support"], "paper_abstract": "Reasoning about programs using \"axioms\" is well established; in this paper we argue that reasoning about a program directly in terms of Structural Operational Semantic (SOS) language descriptions is a viable addition and that this is anyway necessary for the vast majority of languages where there is nothing like a full axiomatic description. Using an SOS description is likely to require detailed proofs whose acceptability to users will depend on suitable support systems. The paper presents a very simple example to illustrate how we can reason about (in fact, develop) a program to prove that it satisfies a specification. The main contribution is to use this trivial example to point out issues in designing an interactive proof system for constructing such proofs.", "paper_title": "Reasoning about programs via operational semantics: requirements for a support system", "paper_id": "WOS:000260538800005"}