{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "controlled_natural_language"}, {"score": 0.004695183699894267, "phrase": "software_internals"}, {"score": 0.004331501320993783, "phrase": "resulting_documentation"}, {"score": 0.0040978781692373005, "phrase": "multi-developer_setting"}, {"score": 0.004016072233242585, "phrase": "traditional_programming_environments"}, {"score": 0.0036491673002304326, "phrase": "software_structure"}, {"score": 0.003576286811853861, "phrase": "overall_quality"}, {"score": 0.003522579870903474, "phrase": "software_product"}, {"score": 0.0032989853590079153, "phrase": "query_engine"}, {"score": 0.0032494292163722065, "phrase": "viable_technique"}, {"score": 0.0030895394261534776, "phrase": "source_code"}, {"score": 0.0030431651737755643, "phrase": "ace"}, {"score": 0.002821247621250663, "phrase": "positive_results"}, {"score": 0.0027370835853738626, "phrase": "general_feasibility"}, {"score": 0.0026155094974689595, "phrase": "case_study"}, {"score": 0.002563219920877287, "phrase": "automatic_documentation_verification"}, {"score": 0.0024993218789131437, "phrase": "severe_flaws"}, {"score": 0.0024247382451294255, "phrase": "non-trivial_piece"}, {"score": 0.0023405257495466352, "phrase": "user_experiment"}, {"score": 0.0021697677572213086, "phrase": "software_documentation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Controlled natural language", " Metamodelling", " Moose", " Pharo"], "paper_abstract": "Writing documentation about software internals is rarely considered a rewarding activity. It is highly time-consuming and the resulting documentation is fragile when the software is continuously evolving in a multi-developer setting. Unfortunately, traditional programming environments poorly support the writing and maintenance of documentation. Consequences are severe as the lack of documentation on software structure negatively impacts the overall quality of the software product. We show that using a controlled natural language with a reasoner and a query engine is a viable technique for verifying the consistency and accuracy of documentation and source code. Using ACE, a state-of-the-art controlled natural language, we present positive results on the comprehensibility and the general feasibility of creating and verifying documentation. As a case study, we used automatic documentation verification to identify and fix severe flaws in the architecture of a non-trivial piece of software. Moreover, a user experiment shows that our language is faster and easier to learn and understand than other formal languages for software documentation. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Verifiable source code documentation in controlled natural language", "paper_id": "WOS:000345180800009"}