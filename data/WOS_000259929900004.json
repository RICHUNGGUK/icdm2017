{"auto_keywords": [{"score": 0.0493653882313026, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "higher_order"}, {"score": 0.004366970206156021, "phrase": "higher_order_functionalities"}, {"score": 0.0033315236647127734, "phrase": "high_order"}, {"score": 0.0032571885279065126, "phrase": "oriented_programming"}, {"score": 0.0026986685585382347, "phrase": "expressive_power"}, {"score": 0.0025409639091476363, "phrase": "new_syntax"}, {"score": 0.002465593351432208, "phrase": "formal_and_actual_parameters"}, {"score": 0.0022696277881969896, "phrase": "preprocessing_time"}, {"score": 0.0021693692831601745, "phrase": "extended_language"}, {"score": 0.0021049977753042253, "phrase": "ordinary_java"}], "paper_keywords": ["Higher order progamming", " object oriented programming", " preprocessing"], "paper_abstract": "The paper investigates the use of preprocessing in adding higher order functionalities to Java. that is in passing methods to other methods. The approach is based on a mechanism which offers a restricted. disciplined. form of abstraction that is suitable to the integration of high order and object oriented programming. We show how this integration can be exploited in programming through the development of an example. Then, we discuss how the expressive power of the language is improved. A new syntax is introduced for formal and actual parameters, hence the paper defines a translation that, at preprocessing time. maps programs of the extended language into programs of ordinary Java.", "paper_title": "Methods as Parameters: A Preprocessing Approach to Higher Order in Java", "paper_id": "WOS:000259929900004"}