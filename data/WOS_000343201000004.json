{"auto_keywords": [{"score": 0.0337104322325555, "phrase": "hbase"}, {"score": 0.015584725626661867, "phrase": "mapreduce"}, {"score": 0.008160773406764717, "phrase": "jdbc_driver"}, {"score": 0.00481495049065317, "phrase": "sql_to_nosql_translation"}, {"score": 0.004710854091689325, "phrase": "data_exploration"}, {"score": 0.004373398434399966, "phrase": "important_information"}, {"score": 0.004278807087784626, "phrase": "scalable_solution"}, {"score": 0.004204602964512469, "phrase": "large-scale_data"}, {"score": 0.004149792080414689, "phrase": "critical_issue"}, {"score": 0.00406001734835979, "phrase": "emerging_nosql_database"}, {"score": 0.00398959232769596, "phrase": "inherent_scalability"}, {"score": 0.003954837422946628, "phrase": "fault_tolerance"}, {"score": 0.00392041293738237, "phrase": "hadoop"}, {"score": 0.0037855348847339655, "phrase": "massive_data"}, {"score": 0.0035919163432110335, "phrase": "sql"}, {"score": 0.0035605741849764187, "phrase": "sql-like_queries_translator"}, {"score": 0.0035141291835319682, "phrase": "hadoop_distributed_file_system"}, {"score": 0.0032195538751433527, "phrase": "flexible_datastore"}, {"score": 0.003068166587650604, "phrase": "scale-out_storage_system"}, {"score": 0.0029755458462182565, "phrase": "changeable_data"}, {"score": 0.002936709606809639, "phrase": "transparent_way"}, {"score": 0.0028731024405707277, "phrase": "hbase_interface"}, {"score": 0.002725994306480105, "phrase": "sql_client_application"}, {"score": 0.00270221723573854, "phrase": "database_connection"}, {"score": 0.0026321198895843173, "phrase": "learning_curve"}, {"score": 0.002530359917257626, "phrase": "jackhare_framework"}, {"score": 0.002508284945907166, "phrase": "sql_query_compiler"}, {"score": 0.002453934333239467, "phrase": "systematical_method"}, {"score": 0.0024325244760735566, "phrase": "mapreduce_framework"}, {"score": 0.0023902621773166963, "phrase": "unstructured_data"}, {"score": 0.002287783663138828, "phrase": "sql_client"}, {"score": 0.0021896891011033105, "phrase": "underlying_datastore"}, {"score": 0.0021516366862117707, "phrase": "ansi-sql_queries"}, {"score": 0.0021328586481696157, "phrase": "experimental_results"}], "paper_keywords": ["Cloud computing", " Unstructured data processing", " MapReduce", " NoSQL database", " HBase", " JDBC", " Compiler"], "paper_abstract": "As data exploration has increased rapidly in recent years, the datastore and data processing are getting more and more attention in extracting important information. To find a scalable solution to process the large-scale data is a critical issue in either the relational database system or the emerging NoSQL database. With the inherent scalability and fault tolerance of Hadoop, MapReduce is attractive to process the massive data in parallel. Most of previous researches focus on developing the SQL or SQL-like queries translator with the Hadoop distributed file system. However, it could be difficult to update data frequently in such file system. Therefore, we need a flexible datastore as HBase not only to place the data over a scale-out storage system, but also to manipulate the changeable data in a transparent way. However, the HBase interface is not friendly enough for most users. A GUI composed of SQL client application and database connection to HBase will ease the learning curve. In this paper, we propose the JackHare framework with SQL query compiler, JDBC driver and a systematical method using MapReduce framework for processing the unstructured data in HBase. After importing the JDBC driver to a SQL client GUI, we can exploit the HBase as the underlying datastore to execute the ANSI-SQL queries. Experimental results show that our approaches can perform well with efficiency and scalability.", "paper_title": "JackHare: a framework for SQL to NoSQL translation using MapReduce", "paper_id": "WOS:000343201000004"}