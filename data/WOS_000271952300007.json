{"auto_keywords": [{"score": 0.044756524567110365, "phrase": "resp"}, {"score": 0.00481495049065317, "phrase": "nonintrusive_transaction-level_reflective_mpsoc_simulation_platform_for_design_space_exploration"}, {"score": 0.004707479285061122, "phrase": "reflective_simulation_platform"}, {"score": 0.004320497631163035, "phrase": "python"}, {"score": 0.004074016501033133, "phrase": "systemc_components"}, {"score": 0.0040373708328770306, "phrase": "source-code_modifications"}, {"score": 0.003983016985197904, "phrase": "full_observability"}, {"score": 0.0038764861784138117, "phrase": "fine-grained_simulation_control"}, {"score": 0.003671865026158296, "phrase": "complete_design_space_exploration"}, {"score": 0.003557509959237602, "phrase": "real-time_applications"}, {"score": 0.003525493807130663, "phrase": "high-level_hardware_models"}, {"score": 0.0034467039994594065, "phrase": "transparent_emulation"}, {"score": 0.003415681637907093, "phrase": "posix-compliant_real-time_operating_systems"}, {"score": 0.0030783143919343972, "phrase": "single-_and_multithreaded_benchmarks"}, {"score": 0.003023129616910419, "phrase": "posix_threads"}, {"score": 0.002955533639862811, "phrase": "openmp_programming_styles"}, {"score": 0.002603918128553617, "phrase": "concurrent_and_reconfigurable_applications"}, {"score": 0.0025000115574335693, "phrase": "average_error"}, {"score": 0.002466303439899648, "phrase": "resp's_rtos_emulation"}, {"score": 0.002400242360929132, "phrase": "rtos"}, {"score": 0.0023571835517819124, "phrase": "instruction_set_simulator"}, {"score": 0.0021727640931660038, "phrase": "scripted_language"}, {"score": 0.0021531831652035482, "phrase": "simulation_management"}, {"score": 0.0021049977753042253, "phrase": "experimental_setup_effort"}], "paper_keywords": ["Design exploration", " multiprocessor", " Python", " SystemC", " system-level design", " system-on-a-chip"], "paper_abstract": "This paper presents Reflective Simulation Platform (ReSP), a transaction-level multiprocessor simulation platform based on the integration of SystemC and Python. ReSP exploits the concept of reflection, enabling the integration of SystemC components without source-code modifications and providing full observability of their internal state. ReSP offers fine-grained simulation control and supports the evaluation of different hardware/software configurations of a given application, enabling complete design space exploration. ReSP allows the evaluation of real-time applications on high-level hardware models since it provides the transparent emulation of POSIX-compliant Real-Time Operating Systems (RTOS) primitives. A number of experiments have been performed to validate ReSP and its capabilities, using a set of single- and multithreaded benchmarks, with both POSIX Threads (PThreads) and OpenMP programming styles. These experiments confirm that reflection introduces negligible (<1%) overhead when comparing ReSP to plain SystemC simulation. The results also show that ReSP can be successfully used to analyze and explore concurrent and reconfigurable applications even at very early development stages. In fact, the average error introduced by ReSP's RTOS emulation is below 6.6 +/- 5% w.r.t. the same RTOS running on an instruction set simulator, while simulation speed increases by a factor of ten. Owing to the integration with a scripted language, simulation management is simplified, and experimental setup effort is considerably reduced.", "paper_title": "ReSP: A Nonintrusive Transaction-Level Reflective MPSoC Simulation Platform for Design Space Exploration", "paper_id": "WOS:000271952300007"}