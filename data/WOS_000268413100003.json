{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "new_pointcuts"}, {"score": 0.0047306078475683865, "phrase": "aspect-oriented_programming"}, {"score": 0.004546174820239776, "phrase": "systematic_hardening"}, {"score": 0.004506171772318298, "phrase": "security_concerns"}, {"score": 0.0042734067085669885, "phrase": "program's_control-flow_graph"}, {"score": 0.004161553532799662, "phrase": "first_one"}, {"score": 0.003946519058822334, "phrase": "closest_ancestor"}, {"score": 0.0036932254391253134, "phrase": "second_one"}, {"score": 0.0036124465071873998, "phrase": "closest_guaranteed_descendant"}, {"score": 0.00353342812142574, "phrase": "closest_child"}, {"score": 0.002986575805559931, "phrase": "program's_call_graph"}, {"score": 0.0028826733506942554, "phrase": "function_signatures"}, {"score": 0.002447101794397243, "phrase": "existing_ones"}, {"score": 0.002289821830549781, "phrase": "proposed_pointcuts"}, {"score": 0.002161695357601592, "phrase": "explanatory_case_studies"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Software security", " Security hardening", " Aspect-oriented programming", " Security/software engineering", " Control-flow graph", " Dominators"], "paper_abstract": "In this paper, we present new pointcuts and primitives to Aspect-Oriented Programming (AOP) languages that are needed for systematic hardening of security concerns. The two proposed pointcuts allow to identify particular join points in a program's control-flow graph (CFG). The first one is the GAFlow, Closest Guaranteed Ancestor, which returns the closest ancestor join point to the pointcuts of interest that is on all their runtime paths. The second one is the GDFlow, Closest Guaranteed Descendant, which returns the closest child join point that can be reached by all paths starting from the pointcut of interest. The two proposed primitives are called ExportParameter and ImportParameter and are used to pass parameters between two pointcuts. They allow to analyze a program's call graph in order to determine how to change function signatures for passing the parameters associated with a given security hardening. We find these pointcuts and primitives to be necessary because they are needed to perform many security hardening practices and, to the best of our knowledge, none of the existing ones can provide their functionalities. Moreover, we show the viability and correctness of the proposed pointcuts and primitives by elaborating and implementing their algorithms and presenting the result of explanatory case studies. (C) 2009 Elsevier Ltd. All rights reserved.", "paper_title": "New aspect-oriented constructs for security hardening concerns", "paper_id": "WOS:000268413100003"}