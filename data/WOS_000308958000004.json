{"auto_keywords": [{"score": 0.03857891362648781, "phrase": "malicious_adversaries"}, {"score": 0.00481495049065317, "phrase": "oblivious_transfer"}, {"score": 0.004707188147442449, "phrase": "secure_two-party_computation"}, {"score": 0.004348580182733617, "phrase": "security_properties"}, {"score": 0.0038392331564122387, "phrase": "efficient_construction"}, {"score": 0.0037959868107895053, "phrase": "two-party_computation"}, {"score": 0.002958281631770322, "phrase": "yao's_protocol"}, {"score": 0.002763709443278514, "phrase": "specific_assumptions"}, {"score": 0.002425745869560213, "phrase": "pinkas"}], "paper_keywords": ["Secure two-party computation", " Malicious adversaries", " Cut-and-choose", " Concrete efficiency"], "paper_abstract": "Protocols for secure two-party computation enable a pair of parties to compute a function of their inputs while preserving security properties such as privacy, correctness and independence of inputs. Recently, a number of protocols have been proposed for the efficient construction of two-party computation secure in the presence of malicious adversaries (where security is proven under the standard simulation-based ideal/real model paradigm for defining security). In this paper, we present a protocol for this task that follows the methodology of using cut-and-choose to boost Yao's protocol to be secure in the presence of malicious adversaries. Relying on specific assumptions (DDH), we construct a protocol that is significantly more efficient and far simpler than the protocol of Lindell and Pinkas (Eurocrypt 2007) that follows the same methodology. We provide an exact, concrete analysis of the efficiency of our scheme and demonstrate that (at least for not very small circuits) our protocol is more efficient than any other known today.", "paper_title": "Secure Two-Party Computation via Cut-and-Choose Oblivious Transfer", "paper_id": "WOS:000308958000004"}