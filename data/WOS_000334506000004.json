{"auto_keywords": [{"score": 0.03661722479312766, "phrase": "mpi"}, {"score": 0.029457302209751717, "phrase": "message-passing_programming"}, {"score": 0.00481495049065317, "phrase": "embedded_multicore_signal-processing"}, {"score": 0.0046987973264610685, "phrase": "multicore_platforms"}, {"score": 0.004604136423327813, "phrase": "signal_processing"}, {"score": 0.004548253531664032, "phrase": "software_development"}, {"score": 0.004366808573435364, "phrase": "parallel_programming"}, {"score": 0.004278807087784626, "phrase": "sequential_programming"}, {"score": 0.004244102948402086, "phrase": "average_programmers"}, {"score": 0.003944112858235306, "phrase": "multicore_signal-processing_platform"}, {"score": 0.003680212979775528, "phrase": "standard_message-passing_programming"}, {"score": 0.00332375606483146, "phrase": "portable_applications"}, {"score": 0.003217124533918232, "phrase": "technical_challenges"}, {"score": 0.0031522185379771056, "phrase": "embedded_multicore_platforms"}, {"score": 0.0028121429464519733, "phrase": "existing_mpi_programs"}, {"score": 0.002688781336915723, "phrase": "light-weight_mpi-like_message-passing_library"}, {"score": 0.0025918745925152423, "phrase": "top_two_layers"}, {"score": 0.0024984517279573906, "phrase": "bottom_layer"}, {"score": 0.0024781515864648242, "phrase": "platform-specific_optimizations"}, {"score": 0.0023027357087312176, "phrase": "ibm"}, {"score": 0.002265422518417868, "phrase": "itri"}, {"score": 0.0021748483128942687, "phrase": "viable_solution"}, {"score": 0.0021571717917276724, "phrase": "multicore_signal_processing_applications"}, {"score": 0.0021049977753042253, "phrase": "platform_vendors"}], "paper_keywords": ["Embedded systems", " Signal processing", " Multicore", " Performance optimization", " Message-passing", " Software portability"], "paper_abstract": "Recently, embedded multicore platforms have become popular for signal processing, but software development for such platforms is still very slow. First, parallel programming is more challenging than sequential programming to average programmers. To make the problem worse, software is not portable among the platforms, since each multicore signal-processing platform offers its own programming interface/language. We believe this problem can be relieved by adding the support of a standard message-passing programming to embedded multicore platforms. In particular, we would like to leverage MPI, the most successful message-passing system, which practically enables the development of portable applications to run on many parallel machines. There are technical challenges to support MPI on embedded multicore platforms: the size of the library, architecture issues, and performance issues. This paper identifies and addresses these issues. To enable the reuse of existing MPI programs and make message-passing programming portable and efficient, we designed a light-weight MPI-like message-passing library with a three-layer modular design, where the top two layers are mostly platform-independent, and the bottom layer enables platform-specific optimizations. This approach has allowed us to effectively support message-passing on several popular embedded multicore signal-processing platforms, including the IBM CELL and the ITRI PAC Duo. Our results show that message-passing programming is a viable solution for multicore signal processing applications and may be considered by platform vendors.", "paper_title": "Message-Passing Programming for Embedded Multicore Signal-Processing Platforms", "paper_id": "WOS:000334506000004"}