{"auto_keywords": [{"score": 0.045589504389445125, "phrase": "recursion_scheme"}, {"score": 0.00481495049065317, "phrase": "generic_programs"}, {"score": 0.004621984064678252, "phrase": "polytypic_or_generic_program"}, {"score": 0.004509919457793852, "phrase": "concrete_recursive_type"}, {"score": 0.004054745478848129, "phrase": "instantiation_type"}, {"score": 0.003736004578001584, "phrase": "generic_program"}, {"score": 0.003277140908834426, "phrase": "traditional_methods"}, {"score": 0.0029460197288680864, "phrase": "program_type"}, {"score": 0.0027141975147496264, "phrase": "type-based_termination"}, {"score": 0.002459902948098627, "phrase": "sized_polytypic_programming"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Functional programming", " Polytypic programming", " Recursion", " Sized type", " Type-indexed type"], "paper_abstract": "Instances of a polytypic or generic program for a concrete recursive type often exhibit a recursion scheme that is derived from the recursion scheme of the instantiation type. In practice, the programs obtained from a generic program are usually terminating, but the proof of termination cannot be carried out with traditional methods as term orderings alone. since termination often crucially relies on the program type. In this article, it is demonstrated that type-based termination using sized types handles such programs very well. A framework for sized polytypic programming is developed which ensures (type-based) termination of all instances. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Type-based termination of generic programs", "paper_id": "WOS:000266671700004"}