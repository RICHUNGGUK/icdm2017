{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "answer_sets"}, {"score": 0.008640669843316549, "phrase": "nested_logic_programs"}, {"score": 0.008493797135231667, "phrase": "lifschitz"}, {"score": 0.007964653439796682, "phrase": "completion_semantics"}, {"score": 0.004773692073488661, "phrase": "logic_programs"}, {"score": 0.004342430078306461, "phrase": "important_problems"}, {"score": 0.004286708921931472, "phrase": "set_logic_programming"}, {"score": 0.0041773955493423715, "phrase": "gelfond"}, {"score": 0.004141575435071002, "phrase": "lifschitz's_original_definition"}, {"score": 0.0040186038781533946, "phrase": "easy_task"}, {"score": 0.0039841418890102925, "phrase": "alternative_characterizations"}, {"score": 0.0038825121288253435, "phrase": "erdem"}, {"score": 0.0038162987467003054, "phrase": "lee"}, {"score": 0.0033971539563683174, "phrase": "local_notion"}, {"score": 0.003310447652300423, "phrase": "different_answer_sets"}, {"score": 0.002738523189244011, "phrase": "new_algorithms"}, {"score": 0.0026916956768363158, "phrase": "computing_answer_sets"}, {"score": 0.00253400005142168, "phrase": "sufficient_and_necessary_condition"}, {"score": 0.002469269628821745, "phrase": "set_semantics"}, {"score": 0.002375253757224999, "phrase": "basic_theorem"}, {"score": 0.002255431275670053, "phrase": "extended_notion"}, {"score": 0.002236055625099805, "phrase": "loop_formulas"}, {"score": 0.0021883400011393564, "phrase": "tightness_and_loop_formulas"}, {"score": 0.0021049977753042253, "phrase": "lin's_work"}], "paper_keywords": ["nested logic programming", " characterization of answer sets", " completion semantics", " tightness", " loop formulas"], "paper_abstract": "Checking if a program has an answer set, and if so, compute its answer sets are just some of the important problems in answer set logic programming. Solving these problems using Gelfond and Lifschitz's original definition of answer sets is not an easy task. Alternative characterizations of answer sets for nested logic programs by Erdem and Lifschitz, Lee and Lifschitz, and You et al. are based on the completion semantics and various notions of tightness. However, the notion of tightness is a local notion in the sense that for different answer sets there are, in general, different level mappings capturing their tightness. This makes it hard to be used in the design of algorithms for computing answer sets. This paper proposes a characterization of answer sets based on sets of generating rules. From this characterization new algorithms are derived for computing answer sets and for performing some other reasoning tasks. As an application of the characterization a sufficient and necessary condition for the equivalence between answer set semantics and completion semantics has been proven, and a basic theorem is shown on computing answer sets for nested logic programs based on an extended notion of loop formulas. These results on tightness and loop formulas are more general than that in You and Lin's work.", "paper_title": "A characterization of answer sets for logic programs", "paper_id": "WOS:000245639600005"}