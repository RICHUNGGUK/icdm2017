{"auto_keywords": [{"score": 0.004616859702338596, "phrase": "frequent_task"}, {"score": 0.004069963083642548, "phrase": "modular_exponentiation"}, {"score": 0.0036382660173943393, "phrase": "repeated_squaring"}, {"score": 0.0031182092708983184, "phrase": "standard_binary_numeration_system"}, {"score": 0.0026722904884984348, "phrase": "standard_system"}, {"score": 0.0024912073108138613, "phrase": "fibonacci_numbers"}, {"score": 0.0023551955270737215, "phrase": "new_line"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["design of algorithms", " modular exponentiation", " Fibonacci number system", " cryptography"], "paper_abstract": "Modular exponentiation is a frequent task, in particular for many cryptographic applications. To accelerate modular exponentiation for very large integers one may use repeated squaring. which is based on representing the exponent in the standard binary numeration system. We show here that for certain applications, replacing the standard system by one based on Fibonacci numbers may yield a new line of time/space tradeoffs. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Should one always use repeated squaring for modular exponentiation?", "paper_id": "WOS:000256704600002"}