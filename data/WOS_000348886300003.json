{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "mixed_transactional_workloads"}, {"score": 0.0047555023078686386, "phrase": "transaction_schedulers"}, {"score": 0.004610058444728656, "phrase": "transaction_reexecutions"}, {"score": 0.0044968982227349625, "phrase": "software_transactional_memory"}, {"score": 0.004332322079100859, "phrase": "conflicting_transactions"}, {"score": 0.004122179528285764, "phrase": "current_scheduling_solutions"}, {"score": 0.003946650265907885, "phrase": "coarse_measures"}, {"score": 0.0037087324991876727, "phrase": "long_transactions"}, {"score": 0.003528730431045574, "phrase": "optimistic_and_adaptive_transaction_scheduler"}, {"score": 0.0032953582866530966, "phrase": "stm_runtime"}, {"score": 0.003077372515276563, "phrase": "transactions'_throughput"}, {"score": 0.0029830992938695007, "phrase": "low-overhead_scheduling_policy"}, {"score": 0.0027684263985790526, "phrase": "fine-grained_scheduling_policy"}, {"score": 0.00265038878247831, "phrase": "novel_concept"}, {"score": 0.002585206414738808, "phrase": "experimental_results"}, {"score": 0.002474961375646351, "phrase": "stamp_benchmark_suite"}, {"score": 0.002414082940963702, "phrase": "provit_scheduler"}, {"score": 0.002384206251320424, "phrase": "comparable_performance"}, {"score": 0.0021851480717840484, "phrase": "long-running_transactions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software Transactional Memory", " Transaction conflict", " Transaction scheduling"], "paper_abstract": "Transaction schedulers reduce the number of transaction reexecutions in applications using Software Transactional Memory (STM) by preventing conflicting transactions to run in parallel. Unfortunately, current scheduling solutions are too conservative, rely on coarse measures to serialize transactions, and are specially inadequate for workloads with long transactions. In this paper we introduce an optimistic and adaptive transaction scheduler that takes advantage of the information already collected by the STM runtime to increase parallelism between transactions and, thus, improve transactions' throughput. Our new ProVIT scheduler implements a low-overhead scheduling policy for short transactions that reduces con-currency as contention increases and a fine-grained scheduling policy for long transactions based on the novel concept of Very Important Transaction. Experimental results conducted with the STMBench7 benchmark and the STAMP benchmark suite showed that the ProVIT scheduler has comparable performance to other current scheduling solutions for short transactions, but is up to 65% faster for long-running transactions. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Adaptive transaction scheduling for mixed transactional workloads", "paper_id": "WOS:000348886300003"}