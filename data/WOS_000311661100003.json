{"auto_keywords": [{"score": 0.02924329276913196, "phrase": "mpi"}, {"score": 0.011202342478489747, "phrase": "alias"}, {"score": 0.00481495049065317, "phrase": "petascale_quantum_monte_carlo_applications"}, {"score": 0.004682708592184678, "phrase": "diffusion_monte_carlo"}, {"score": 0.004617949594931096, "phrase": "highly_accurate_quantum_monte_carlo_method"}, {"score": 0.004388035083357706, "phrase": "frequent_load_balancing"}, {"score": 0.004347473906950474, "phrase": "population_redistribution_steps"}, {"score": 0.004247696749118451, "phrase": "parallel_machines"}, {"score": 0.00411182818527434, "phrase": "significant_factor"}, {"score": 0.0038708810091769856, "phrase": "processing_elements"}, {"score": 0.003764469758319617, "phrase": "new_dynamic_load_balancing_algorithm"}, {"score": 0.0035603115570447467, "phrase": "important_feature"}, {"score": 0.0035110198699787013, "phrase": "new_algorithm"}, {"score": 0.0031697368057340895, "phrase": "maximum_size"}, {"score": 0.0029699874949715367, "phrase": "network_contention"}, {"score": 0.002874870266177579, "phrase": "low_messaging_requirement"}, {"score": 0.0028125142591261467, "phrase": "ornl"}, {"score": 0.002795762692061496, "phrase": "simple_renumbering"}, {"score": 0.0025952620596908773, "phrase": "mpi_allgather_performance"}, {"score": 0.0025712297362596574, "phrase": "empirical_results"}, {"score": 0.0025355968118803956, "phrase": "petaflop_cray_xt_jaguar_supercomputer"}, {"score": 0.002397923568994474, "phrase": "load_balancing_algorithm"}, {"score": 0.002331909406363425, "phrase": "existing_codes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Quantum Monte Carlo", " Parallel computing", " Load balancing"], "paper_abstract": "Diffusion Monte Carlo is a highly accurate Quantum Monte Carlo method for electronic structure calculations of materials, but it requires frequent load balancing or population redistribution steps to maintain efficiency on parallel machines. This step can be a significant factor affecting performance, and will become more important as the number of processing elements increases. We propose a new dynamic load balancing algorithm, the Alias Method, and evaluate it theoretically and empirically. An important feature of the new algorithm is that the load can be perfectly balanced with each process receiving at most one message. It is also optimal in the maximum size of messages received by any process. We also optimize its implementation to reduce network contention, a process facilitated by the low messaging requirement of the algorithm: a simple renumbering of the MPI ranks based on proximity and a space filling curve significantly improves the MPI Allgather performance. Empirical results on the petaflop Cray XT Jaguar supercomputer at ORNL show up to 30% improvement in performance on 120,000 cores. The load balancing algorithm may be straightforwardly implemented in existing codes. The algorithm may also be employed by any method with many near identical computational tasks that require load balancing. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic load balancing for petascale quantum Monte Carlo applications: The Alias method", "paper_id": "WOS:000311661100003"}