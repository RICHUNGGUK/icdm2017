{"auto_keywords": [{"score": 0.04336705121455173, "phrase": "tm"}, {"score": 0.004681226806682058, "phrase": "major_architectural_innovations"}, {"score": 0.00461575768501871, "phrase": "compute_node"}, {"score": 0.004487541157100498, "phrase": "ibm_blue_gene"}, {"score": 0.004375973224472869, "phrase": "simd"}, {"score": 0.004182301599359094, "phrase": "transactional_memory"}, {"score": 0.003125175084962886, "phrase": "new_features"}, {"score": 0.003095923814666088, "phrase": "early_concept_phase"}, {"score": 0.003066945490483524, "phrase": "design_implementation"}, {"score": 0.002967634471075658, "phrase": "extensive_use"}, {"score": 0.0029260602766930065, "phrase": "architectural_simulator"}, {"score": 0.0028047899594686003, "phrase": "single_as_well_as_multiple_nodes"}, {"score": 0.002752513434446804, "phrase": "hardware_description_language"}, {"score": 0.0027139447110929586, "phrase": "chip_implementation"}, {"score": 0.0025770807002632877, "phrase": "twinstar"}, {"score": 0.0021349310877334378, "phrase": "design_targets"}, {"score": 0.0021049977753042253, "phrase": "aggressive_project_schedule"}], "paper_keywords": [""], "paper_abstract": "Major architectural innovations in the compute node have been introduced in the IBM Blue Gene (R)/Q, including programmable Level 1 (L1) cache data prefetching units to hide memory access latency, hardware support for transactional memory (TM) and speculative execution (SE), an enhanced five-dimensional integrated torus network, and a high-performance quad floating-point SIMD (single-instruction, multiple-data) unit. In this paper, we present the tools and methodology that we used to model, co-design, and validate these new features from early concept phase through design implementation. Early in the design cycle, we made extensive use of an architectural simulator, BGQSim, capable of executing unmodified binary Blue Gene/Q code for single as well as multiple nodes. As the hardware description language for the chip implementation became available, we complemented BGQSim with a cycle-accurate and cycle-reproducible, large-scale field-programmable gate array-based platform, Twinstar, to validate the implementation against performance targets and functional specifications. Through specific examples, we show the effectiveness of these tools in co-developing the hardware and software of Blue Gene/Q, allowing us to meet the design targets at an aggressive project schedule.", "paper_title": "Modeling, validation, and co-design of IBM Blue Gene/Q: Tools and examples", "paper_id": "WOS:000323321900007"}