{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "application-tailorable_operating_system_product_lines"}, {"score": 0.004657185361669812, "phrase": "deeply_embedded_devices"}, {"score": 0.004474645041899596, "phrase": "broad_variety"}, {"score": 0.00421410521089045, "phrase": "strict_resource_constraints"}, {"score": 0.004075946554498088, "phrase": "proprietary_systems"}, {"score": 0.003813017794036879, "phrase": "operating_system_product_line"}, {"score": 0.0037624955853577786, "phrase": "deeply_embedded_systems"}, {"score": 0.003404244237372396, "phrase": "selectable_and_configurable_features"}, {"score": 0.0031422859551159506, "phrase": "non-functional_properties"}, {"score": 0.00255488432062653, "phrase": "operating_system_component_code"}, {"score": 0.0025042115651986332, "phrase": "presented_approach"}, {"score": 0.002438203996977464, "phrase": "feature_modeling"}, {"score": 0.0022806798371116698, "phrase": "aspect-oriented_programming"}, {"score": 0.0021620042653528846, "phrase": "fine-grained_encapsulation"}, {"score": 0.0021049977753042253, "phrase": "even_non-functional_properties"}], "paper_keywords": [""], "paper_abstract": "System software for deeply embedded devices has to cope with a broad variety of requirements and platforms, but especially with strict resource constraints. To compete against proprietary systems (and thereby to facilitate reuse), an operating system product line for deeply embedded systems has to be highly configurable and tailorable. It is therefore crucial that all selectable and configurable features can be encapsulated into fine-grained, exchangeable and reusable implementation components. However, the encapsulation of non-functional properties is often limited, due to their cross-cutting character. Fundamental system policies, like synchronization or activation points for the scheduler, have typically to be reflected in many points of the operating system component code. The presented approach is based on feature modeling, C++ class composition and overcomes the above mentioned problems by means of aspect-oriented programming (AOP). It facilitates a fine-grained encapsulation and configuration of even non-functional properties in system software.", "paper_title": "The design of application-tailorable operating system product lines", "paper_id": "WOS:000238187400006"}