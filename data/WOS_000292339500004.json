{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "language_constructs"}, {"score": 0.04970903037225392, "phrase": "software_metrics"}, {"score": 0.004560438999891081, "phrase": "program_comprehension"}, {"score": 0.00445550467119693, "phrase": "research_field"}, {"score": 0.004336115760817672, "phrase": "different_points"}, {"score": 0.004252793268613575, "phrase": "human_program_understanding"}, {"score": 0.004219912413995784, "phrase": "mental_models"}, {"score": 0.004187284711626886, "phrase": "automated_program_understanding"}, {"score": 0.004027876348834879, "phrase": "algorithm_recognition"}, {"score": 0.003756021561809324, "phrase": "automatic_ar"}, {"score": 0.003726967166630923, "phrase": "java_source_code"}, {"score": 0.003627028894710926, "phrase": "static_analysis"}, {"score": 0.0035989687070420977, "phrase": "program_code"}, {"score": 0.0033559647822437298, "phrase": "target_program"}, {"score": 0.003304224820203298, "phrase": "first_phase"}, {"score": 0.0032031180198375283, "phrase": "different_implementations"}, {"score": 0.0031660031870090434, "phrase": "supported_algorithms"}, {"score": 0.0030810605918297584, "phrase": "knowledge_base"}, {"score": 0.003021781956684419, "phrase": "learning_data"}, {"score": 0.002963640433319524, "phrase": "second_phase"}, {"score": 0.002940697344380201, "phrase": "previously_unseen_algorithms"}, {"score": 0.0021799789348982516, "phrase": "pc_method"}, {"score": 0.0021049977753042253, "phrase": "automatic_assessment_tools"}], "paper_keywords": ["algorithm recognition", " program comprehension", " program understanding", " static program analysis", " roles of variables"], "paper_abstract": "Program comprehension (PC) is a research field that has been extensively studied from different points of view, including human program understanding and mental models, automated program understanding, etc. In this paper, we discuss algorithm recognition (AR) as a subfield of PC and explain their relationship. We present a method for automatic AR from Java source code. The method is based on static analysis of program code including various statistics of language constructs, software metrics, as well as analysis of roles of variables in the target program. In the first phase of the method, a number of different implementations of the supported algorithms are analyzed and stored in the knowledge base of the system as learning data, and in the second phase, previously unseen algorithms are recognized using this information. We have developed a prototype and successfully applied the method for recognition of sorting algorithms. This process is explained in the paper along with the experiment we have conducted to evaluate the performance of the method. Although the method, at its current state, is still sensitive to changes made to target algorithms, the encouraging results of the experiment demonstrate that it can be further developed to be used as a PC method in various applications, as an example, in automatic assessment tools to check the algorithms used by students, the functionality that is currently missing from these tools.", "paper_title": "Recognizing Algorithms Using Language Constructs, Software Metrics and Roles of Variables: An Experiment with Sorting Algorithms", "paper_id": "WOS:000292339500004"}