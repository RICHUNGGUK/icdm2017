{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pddl"}, {"score": 0.010282328534719401, "phrase": "object-oriented_model"}, {"score": 0.007032677671388332, "phrase": "translation_process"}, {"score": 0.004342430078306461, "phrase": "planning_systems"}, {"score": 0.004273951631010383, "phrase": "real_world_applications"}, {"score": 0.004042635935882651, "phrase": "constant_evolution"}, {"score": 0.003823791479971016, "phrase": "real_domains"}, {"score": 0.0036456298076415652, "phrase": "declarative_language"}, {"score": 0.0033402088717816446, "phrase": "non-planning_community"}, {"score": 0.0030847461428168614, "phrase": "domain_specification"}, {"score": 0.0027159192546580575, "phrase": "uml"}, {"score": 0.00267301171407926, "phrase": "planning_approaches"}, {"score": 0.002488183412451029, "phrase": "pddl_domains"}, {"score": 0.002372103459168231, "phrase": "powerful_tool"}, {"score": 0.0022977342663599042, "phrase": "gipo"}, {"score": 0.0021731423856364003, "phrase": "planning_system"}, {"score": 0.0021049977753042253, "phrase": "object-oriented_models"}], "paper_keywords": [""], "paper_abstract": "There are many efforts towards a combination of planning systems and real world applications. Although the PDDL is in constant evolution, which improves its capability to describe real domains, it is still a declarative language that is not so simple to be used by the non-planning community. This paper describes a translation process that reads a domain specification in PDDL and transforms it into an object-oriented model, more specifically into a version of UML for planning approaches. This translation process can let a designer read PDDL domains and verify it with some powerful tool like itSIMPLE or GIPO, or it can allow a planning system that only reads object-oriented models to run in domains described in PDDL originally.", "paper_title": "Reading PDDL, writing an object-oriented model", "paper_id": "WOS:000242128100057"}