{"auto_keywords": [{"score": 0.03951537737195524, "phrase": "stream-clustering_algorithms"}, {"score": 0.00481495049065317, "phrase": "disk-resident_datasets"}, {"score": 0.004780633011300165, "phrase": "multi-core_cpus"}, {"score": 0.004679134285953932, "phrase": "massive_datasets"}, {"score": 0.00462919213721188, "phrase": "crucial_part"}, {"score": 0.004514714250357749, "phrase": "available_clustering_algorithms"}, {"score": 0.00441883624011048, "phrase": "big_data"}, {"score": 0.00398325070540449, "phrase": "big_datasets"}, {"score": 0.0038431888954930083, "phrase": "limited_memory_sizes"}, {"score": 0.0036815763368083197, "phrase": "parallel_implementation"}, {"score": 0.0036422425344358037, "phrase": "modern_multi-core_processors"}, {"score": 0.0035776145006375173, "phrase": "decent_quality"}, {"score": 0.003247868216333148, "phrase": "clustering_algorithm"}, {"score": 0.003213153188898728, "phrase": "maximum_capabilities"}, {"score": 0.0031788080316930687, "phrase": "regular_multi-core_pc"}, {"score": 0.0030450484042676023, "phrase": "acceptable_quality"}, {"score": 0.0028548578165712643, "phrase": "separate_thread"}, {"score": 0.002724909017963099, "phrase": "final_stage"}, {"score": 0.0026008598632891837, "phrase": "hardware_limitations"}, {"score": 0.0025182951088683863, "phrase": "proposed_method"}, {"score": 0.002181851408180827, "phrase": "extra_available_cores"}, {"score": 0.0021430808503936963, "phrase": "effective_and_fast_solution"}, {"score": 0.0021201492891323587, "phrase": "large_datasets"}, {"score": 0.0021049977753042253, "phrase": "multi-core_and_multi-processor_systems"}], "paper_keywords": ["Clustering", " k-means", " Parallel algorithms", " Data mining", " Big data"], "paper_abstract": "Nowadays, clustering of massive datasets is a crucial part of many data-analytic tasks. Most of the available clustering algorithms have two shortcomings when used on big data: (1) a large group of clustering algorithms, e.g. -means, has to keep the data in memory and iterate over the data many times which is very costly for big datasets, (2) clustering algorithms that run on limited memory sizes, especially the family of stream-clustering algorithms, do not have a parallel implementation to utilize modern multi-core processors and also they lack decent quality of results. In this paper, we propose an algorithm that combines parallel clustering with single-pass, stream-clustering algorithms. The aim is to make a clustering algorithm that utilizes maximum capabilities of a regular multi-core PC to cluster the dataset as fast as possible while resulting in acceptable quality of clusters. Our idea is to split the data into chunks and cluster each chunk in a separate thread. Then, the clusters extracted from chunks are aggregated at the final stage using re-clustering. Parameters of the algorithm can be adjusted according to hardware limitations. Experimental results on a 12-core computer show that the proposed method is much faster than its batch-processing equivalents (e.g. -means++) and stream-based algorithms. Also, the quality of solution is often equal to -means++, while it significantly dominates stream-clustering algorithms. Our solution also scales well with extra available cores and hence provides an effective and fast solution to clustering large datasets on multi-core and multi-processor systems.", "paper_title": "High performance parallel -means clustering for disk-resident datasets on multi-core CPUs", "paper_id": "WOS:000339826700018"}