{"auto_keywords": [{"score": 0.0448813674971405, "phrase": "software_system"}, {"score": 0.03496401466222773, "phrase": "fpa"}, {"score": 0.00481495049065317, "phrase": "functional_size"}, {"score": 0.004696608876994947, "phrase": "software_size"}, {"score": 0.0046269981365987915, "phrase": "difficult_task"}, {"score": 0.0045357787854931894, "phrase": "methodological_approach"}, {"score": 0.0043804319008535555, "phrase": "distinct_abstractions"}, {"score": 0.0040854526743211396, "phrase": "object-oriented_artifacts"}, {"score": 0.004024863549087511, "phrase": "unified_modeling_language"}, {"score": 0.003829290275367182, "phrase": "formal_foundation"}, {"score": 0.0037350832473790007, "phrase": "functional_size_measurement"}, {"score": 0.0035891316580885665, "phrase": "generalized_abstraction"}, {"score": 0.003380791705551809, "phrase": "different_functional_measurement_methods"}, {"score": 0.0032169177669003858, "phrase": "cosmic"}, {"score": 0.003075296862372287, "phrase": "object-oriented_projects"}, {"score": 0.003044818606622845, "phrase": "uml"}, {"score": 0.002955050521440921, "phrase": "gass_form"}, {"score": 0.0028822890425197582, "phrase": "symbolic_code"}, {"score": 0.0028394925080958205, "phrase": "uml_diagrams"}, {"score": 0.002769568481822277, "phrase": "size_estimation"}, {"score": 0.0026086775334428617, "phrase": "diverse_fsm_methods"}, {"score": 0.002544422946205545, "phrase": "estimation_tools"}, {"score": 0.002481747081849503, "phrase": "counting_steps"}, {"score": 0.0023846534541336326, "phrase": "fsm_method"}, {"score": 0.002337537183727731, "phrase": "software_abstraction"}, {"score": 0.0022799458141165587, "phrase": "generalized_form"}, {"score": 0.0021907299375981356, "phrase": "practical_use"}, {"score": 0.002168975681697056, "phrase": "fsm_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["function points", " software size", " formal model", " object-oriented projects"], "paper_abstract": "Estimating software size is a difficult task that requires a methodological approach. Many different methods that exist today use distinct abstractions to depict a software system. The gap between abstractions becomes even greater with object-oriented artifacts developed in unified modeling language (UML). In this paper, a formal foundation for the representation of functional size measurement (FSM) methods is presented. The generalized abstraction of the software system (GASS) is then used to formalize different functional measurement methods, namely the FPA, MK II FPA and COSMIC-FFP. The same model is also used for object-oriented projects where UML artifacts are mapped into the GASS form. The algorithms in symbolic code for those UML diagrams that are crucial for size estimation are also given. The mappings defined in this paper enable diverse FSM methods to be supported in estimation tools, the automation of counting steps and a higher-level of independence from the FSM method, since the software abstraction is written in a generalized form. Both improvements are crucial for the practical use of FSM methods. (C) 2005 Elsevier Inc. All rights reserved.", "paper_title": "A forma representation of functional size measurement methods", "paper_id": "WOS:000240480700010"}