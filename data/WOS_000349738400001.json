{"auto_keywords": [{"score": 0.008713768289289523, "phrase": "table_constraints"}, {"score": 0.007554204274598321, "phrase": "gac"}, {"score": 0.004785682967399109, "phrase": "constraint_propagation"}, {"score": 0.004670372812069178, "phrase": "constraint_programming"}, {"score": 0.004197551473726497, "phrase": "generalized_arc_consistency"}, {"score": 0.0039975862967816765, "phrase": "recent_advances"}, {"score": 0.003973267259774664, "phrase": "gac_algorithms"}, {"score": 0.003949095579343987, "phrase": "extensional_constraints"}, {"score": 0.0037724164140125137, "phrase": "simple_approach"}, {"score": 0.003749462025612395, "phrase": "simple_tabular_reduction"}, {"score": 0.0035059659238897613, "phrase": "refined_str_variant"}, {"score": 0.0034423371331039464, "phrase": "positive_table_constraints"}, {"score": 0.0033083952949044173, "phrase": "new_gac_algorithm"}, {"score": 0.003199125688913676, "phrase": "backtrack_search"}, {"score": 0.003169954314343514, "phrase": "indexing_tables"}, {"score": 0.003131471208388111, "phrase": "deleted_values"}, {"score": 0.003018793951710705, "phrase": "full_set"}, {"score": 0.003000411392166266, "phrase": "current_tuples"}, {"score": 0.0029369469007332963, "phrase": "important_property"}, {"score": 0.002857312568125609, "phrase": "unnecessary_traversal"}, {"score": 0.002754472887620181, "phrase": "search_tree"}, {"score": 0.0026472248497509845, "phrase": "optimal_circular_way"}, {"score": 0.002244543215797895, "phrase": "average_size"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Constraint satisfaction problems", " Generalized arc consistency", " Non-binary constraints", " Backtracking search"], "paper_abstract": "Constraint propagation is a key to the success of Constraint Programming (CP). The principle is that filtering algorithms associated with constraints are executed in sequence until quiescence is reached. Many such algorithms have been proposed over the years to enforce the property called Generalized Arc Consistency (GAC) on many types of constraints, including table constraints that are defined extensionally. Recent advances in GAC algorithms for extensional constraints rely on directly manipulating tables during search. This is the case with a simple approach called Simple Tabular Reduction (STR), which systematically maintains tables of constraints to their relevant lists of tuples. In particular, STR2, a refined STR variant is among the most efficient GAC algorithms for positive table constraints. In this paper, we revisit this approach by proposing a new GAC algorithm called STR3 that is specifically designed to enforce GAC during backtrack search. By indexing tables and reasoning from deleted values, we show that STR3 can avoid systematically iterating over the full set of current tuples, contrary to STR2. An important property of STR3 is that it can completely avoid unnecessary traversal of tables, making it optimal along any path of the search tree. We also study a variant of STR3, based on an optimal circular way for traversing tables, and discuss the relationship of STR3 with two other optimal GAC algorithms introduced in the literature, namely, GAC4 and AC5TC-Tr. Finally, we demonstrate experimentally how STR3 is competitive with the state-of-the-art. In particular, our extensive experiments show that STR3 is generally faster than STR2 when the average size of tables is not reduced too drastically during search, making STR3 complementary to STR2. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "STR3: A path-optimal filtering algorithm for table constraints", "paper_id": "WOS:000349738400001"}