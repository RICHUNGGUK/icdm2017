{"auto_keywords": [{"score": 0.04016157518902184, "phrase": "mpsts"}, {"score": 0.004733625412289433, "phrase": "multi-party_session_types"}, {"score": 0.004201381218977942, "phrase": "multiple_distributed_participants"}, {"score": 0.004060566667226606, "phrase": "distributed_interaction"}, {"score": 0.0038911408649026724, "phrase": "typed_interactions"}, {"score": 0.003697100573612401, "phrase": "static_verification"}, {"score": 0.0035731269727067496, "phrase": "corresponding_distributed_object_programs"}, {"score": 0.003423969509052361, "phrase": "explicit_control_flow_information"}, {"score": 0.003337471046373891, "phrase": "mpst"}, {"score": 0.0032810180076973806, "phrase": "intriguing_avenues"}, {"score": 0.0032255172568437965, "phrase": "performance_improvements"}, {"score": 0.0029871209444889716, "phrase": "session_type_guided_performance_enhancement_framework"}, {"score": 0.0028381898250806935, "phrase": "java"}, {"score": 0.002742787059497186, "phrase": "control_flow_information"}, {"score": 0.0026507289852980512, "phrase": "data_flow_information"}, {"score": 0.002583713580625699, "phrase": "corresponding_programs"}, {"score": 0.002539978170928796, "phrase": "detailed_experimental_evaluation"}, {"score": 0.002433843373780471, "phrase": "emulab"}, {"score": 0.00239266656827558, "phrase": "amazon"}, {"score": 0.00235213013487844, "phrase": "elastic_compute_cloud"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Batching", " Communication", " Composition", " Java", " Multi-party session types", " Optimization"], "paper_abstract": "Recently, there has been much interest in multi-party session types (MPSTs) as a means of rigorously specifying protocols for interaction among multiple distributed participants. By capturing distributed interaction as a series of typed interactions, MPSTs allow for the static verification of compliance of corresponding distributed object programs. We observe that explicit control flow information manifested by MPST opens intriguing avenues for performance improvements. In this paper, we present a session type guided performance enhancement framework for distributed object interaction in Java. Our framework combines control flow information from MPSTs with data flow information obtained from corresponding programs. Detailed experimental evaluation of our distributed runtime infrastructure in both Emulab and Amazon's Elastic Compute Cloud (EC2) illustrate benefits of our composable enhancement strategies. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Efficient sessions", "paper_id": "WOS:000312522700002"}