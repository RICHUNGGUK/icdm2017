{"auto_keywords": [{"score": 0.04619367167340768, "phrase": "structured"}, {"score": 0.00481495049065317, "phrase": "data_layout_transformation_exploiting_memory-level_parallelism"}, {"score": 0.004757227624616643, "phrase": "structured_grid"}, {"score": 0.004728624975677976, "phrase": "many-core_applications"}, {"score": 0.0046159158660556985, "phrase": "automatic_data_layout_transformation"}, {"score": 0.004533142516832776, "phrase": "effective_compiler_performance_optimization"}, {"score": 0.004478782833067256, "phrase": "memory-bound_structured_grid_applications"}, {"score": 0.004319566932528865, "phrase": "stencil_codes"}, {"score": 0.004116012194714212, "phrase": "primary_data_structure"}, {"score": 0.00406663414150229, "phrase": "fluid_dynamics"}, {"score": 0.004017846065981189, "phrase": "heat_distribution"}, {"score": 0.003898411343926653, "phrase": "partial_differential_equations"}, {"score": 0.0038284549148537373, "phrase": "discretized_representation"}, {"score": 0.0035181731203867456, "phrase": "variable-length_array_syntax"}, {"score": 0.003312009953245191, "phrase": "automatic_data_layout_transformations"}, {"score": 0.0032722454818973853, "phrase": "structured_grid_codes"}, {"score": 0.003232956879952914, "phrase": "dynamically_allocated_arrays"}, {"score": 0.0029351141718104725, "phrase": "good_layout"}, {"score": 0.002830617996609902, "phrase": "memory_system"}, {"score": 0.0027630232270330402, "phrase": "modern_gpu"}, {"score": 0.0026646374739979694, "phrase": "transformed_layout"}, {"score": 0.002616762777413686, "phrase": "concurrent_memory_requests"}, {"score": 0.0025853238923610076, "phrase": "parallel_memory_system_components"}, {"score": 0.0025083651612064144, "phrase": "structured_grid_applications"}, {"score": 0.002222717552124615, "phrase": "original_layout"}, {"score": 0.0021049977753042253, "phrase": "worst_case"}], "paper_keywords": ["GPU", " Parallel programming", " Data layout transformation"], "paper_abstract": "We present automatic data layout transformation as an effective compiler performance optimization for memory-bound structured grid applications. Structured grid applications include stencil codes and other code structures using a dense, regular grid as the primary data structure. Fluid dynamics and heat distribution, which both solve partial differential equations on a discretized representation of space, are representative of many important structured grid applications. Using the information available through variable-length array syntax, standardized in C99 and other modern languages, we enable automatic data layout transformations for structured grid codes with dynamically allocated arrays. We also present how a tool can guide these transformations to statically choose a good layout given a model of the memory system, using a modern GPU as an example. A transformed layout that distributes concurrent memory requests among parallel memory system components provides substantial speedup for structured grid applications by improving their achieved memory-level parallelism. Even with the overhead of more complex address calculations, we observe up to 10.94X speedup over the original layout, and a 1.16X performance gain in the worst case.", "paper_title": "Data Layout Transformation Exploiting Memory-Level Parallelism in Structured Grid Many-Core Applications", "paper_id": "WOS:000299006000002"}