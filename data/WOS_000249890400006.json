{"auto_keywords": [{"score": 0.042426215462423846, "phrase": "sorted_accesses"}, {"score": 0.03743399683518872, "phrase": "memory_requirements"}, {"score": 0.00481495049065317, "phrase": "ranked_inputs"}, {"score": 0.004752873752686246, "phrase": "top-k_query"}, {"score": 0.0045124316982387315, "phrase": "k_objects"}, {"score": 0.004454237726525018, "phrase": "highest_combined_score"}, {"score": 0.004377806391261418, "phrase": "aggregate_function"}, {"score": 0.004247180402119585, "phrase": "key_observations"}, {"score": 0.004120435930514554, "phrase": "top-k_algorithm"}, {"score": 0.003828091961373454, "phrase": "new_algorithm"}, {"score": 0.003665874747419775, "phrase": "object_accesses"}, {"score": 0.003618558599449415, "phrase": "computational_cost"}, {"score": 0.003525744120930142, "phrase": "top-k_search"}, {"score": 0.0034953361767153285, "phrase": "monotone_aggregate_functions"}, {"score": 0.0032191849045822415, "phrase": "\"no_random_accesses\"_algorithm"}, {"score": 0.003029722317983915, "phrase": "side_contribution"}, {"score": 0.0029647862293448895, "phrase": "space_analysis"}, {"score": 0.0028762004595878714, "phrase": "top-k_algorithms"}, {"score": 0.0027304365438083874, "phrase": "required_space"}, {"score": 0.0026951616152303373, "phrase": "available_memory"}, {"score": 0.0026488343783448273, "phrase": "disk-based_variants"}, {"score": 0.0025364615261136655, "phrase": "multiway_top-k_join_operator"}, {"score": 0.0024713335323674223, "phrase": "evaluation_trees"}, {"score": 0.002449997042686432, "phrase": "binary_top-k_join_operators"}, {"score": 0.002335889180060105, "phrase": "top-k_cubes"}, {"score": 0.002266051712795851, "phrase": "drill-down_operations"}, {"score": 0.0022174469839432013, "phrase": "extensive_experiments"}, {"score": 0.0021982976170703884, "phrase": "synthetic_and_real_data"}, {"score": 0.0021418339161425994, "phrase": "previous_techniques"}], "paper_keywords": ["algorithms", " experimentation", " performance", " top-k queries", " rank aggregation"], "paper_abstract": "A top-k query combines different rankings of the same set of objects and returns the k objects with the highest combined score according to an aggregate function. We bring to light some key observations, which impose two phases that any top-k algorithm, based on sorted accesses, should go through. Based on them, we propose a new algorithm, which is designed to minimize the number of object accesses, the computational cost, and the memory requirements of top-k search with monotone aggregate functions. We provide an analysis for its cost and show that it is always no worse than the baseline \"no random accesses\" algorithm in terms of computations, accesses, and memory required. As a side contribution, we perform a space analysis, which indicates the memory requirements of top-k algorithms that only perform sorted accesses. For the case, where the required space exceeds the available memory, we propose disk-based variants of our algorithm. We propose and optimize a multiway top-k join operator, with certain advantages over evaluation trees of binary top-k join operators. Finally, we define and study the computation of top-k cubes and the implementation of roll-up and drill-down operations in such cubes. Extensive experiments with synthetic and real data show that, compared to previous techniques, our method accesses fewer objects, while being orders of magnitude faster.", "paper_title": "Efficient top-k aggregation of ranked inputs", "paper_id": "WOS:000249890400006"}