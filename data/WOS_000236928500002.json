{"auto_keywords": [{"score": 0.025356971883136976, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "runtime_fault_detection"}, {"score": 0.0047267100475487595, "phrase": "monitor_concept"}, {"score": 0.004640079189342692, "phrase": "structured_and_flexible_high-level_programming_construct"}, {"score": 0.004204054047427536, "phrase": "concurrent_programming_environment"}, {"score": 0.004101579688745222, "phrase": "mutual_exclusion"}, {"score": 0.004001593118269276, "phrase": "process_synchronization"}, {"score": 0.003693103542455806, "phrase": "runtime_errors"}, {"score": 0.0036477941360224435, "phrase": "monitor_operations"}, {"score": 0.0033457659530207306, "phrase": "concurrency_control_faults"}, {"score": 0.0031068064097811844, "phrase": "monitor_event_sequence"}, {"score": 0.0030497740719977835, "phrase": "monitor_state_sequence"}, {"score": 0.0029937855454238507, "phrase": "uniform_approach"}, {"score": 0.002938821840519756, "phrase": "information_recording"}, {"score": 0.0029027394930867902, "phrase": "fault_detection"}, {"score": 0.002629539710839523, "phrase": "fault-detection_algorithms"}, {"score": 0.0025495426598675583, "phrase": "prototypical_implementation"}, {"score": 0.0025027144548626975, "phrase": "proposed_monitor"}, {"score": 0.002456744238900652, "phrase": "runtime_fault_detection_mechanisms"}, {"score": 0.002198084195030656, "phrase": "robust_monitor_prototype"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["concurrent programming", " monitor construct", " reliability", " runtime checking"], "paper_abstract": "The monitor concept provides a structured and flexible high-level programming construct to control concurrent accesses to shared resources. It has been widely used in a concurrent programming environment for implicitly ensuring mutual exclusion and explicitly achieving process synchronization. This paper proposes an extension to the monitor construct for detecting runtime errors in monitor operations. Monitors are studied and classified according to their functional characteristics. A taxonomy of concurrency control faults over a monitor is then defined. The concepts of a monitor event sequence and a monitor state sequence provide a uniform approach to history information recording and fault detection. Rules for detecting various types of faults are defined. Based on these rules, fault-detection algorithms are developed. A prototypical implementation of the proposed monitor construct with runtime fault detection mechanisms has been developed in Java. We shall briefly report our experience with and the evaluation of the robust monitor prototype. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "A robust monitor construct with runtime fault detection", "paper_id": "WOS:000236928500002"}