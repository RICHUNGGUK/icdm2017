{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "irregular_kernels"}, {"score": 0.015535971669675044, "phrase": "array_indirection"}, {"score": 0.011848218539096159, "phrase": "simd_vectorization"}, {"score": 0.0045641317216991205, "phrase": "single_instruction"}, {"score": 0.00430067200637091, "phrase": "memory_references"}, {"score": 0.004224627834741731, "phrase": "dependence_cycles"}, {"score": 0.004125314447335291, "phrase": "main_challenges"}, {"score": 0.004028326293950714, "phrase": "simd_compilers"}, {"score": 0.0038640303886081444, "phrase": "existing_simd_compilers"}, {"score": 0.003251552926963083, "phrase": "memory_and_computation_requirements"}, {"score": 0.0030273620861817055, "phrase": "efficient_simd_code"}, {"score": 0.0029561107046138136, "phrase": "indirected_memory_references"}, {"score": 0.0028354207806133153, "phrase": "intra-iteration_parallelism"}, {"score": 0.0027852126030055305, "phrase": "data_reorganization_overhead"}, {"score": 0.002655616553414394, "phrase": "data_reorganization_code"}, {"score": 0.0025623821393275146, "phrase": "reorganization_overhead"}, {"score": 0.0025169965861573185, "phrase": "performance_gain"}, {"score": 0.002399850604120431, "phrase": "direction_kernels"}, {"score": 0.002315574871863272, "phrase": "real-world_scientific_applications"}, {"score": 0.0022209780222461587, "phrase": "simd_code"}, {"score": 0.0021049977753042253, "phrase": "existing_simd_vectorization_methods"}], "paper_keywords": ["Performance", " Experimentation", " Algorithms", " DFG-based vectorization", " Irregular kernels", " SIMD processors"], "paper_abstract": "Array indirection causes several challenges for compilers to utilize single instruction, multiple data (SIMD) instructions. Disjoint memory references, arbitrarily misaligned memory references, and dependence cycles in loops are main challenges to handle for SIMD compilers. Due to those challenges, existing SIMD compilers have excluded loops with array in direction from their candidate loops for SIMD vectorization. However, addressing those challenges is inevitable,since many important compute-intensive applications extensively use array indirection to reduce memory and computation requirements. In this work, we propose a method to generate efficient SIMD code for loops containing indirected memory references. We extract both inter- and intra-iteration parallelism, taking data reorganization overhead into consideration. We also optimally place data reorganization code in order to amortize the reorganization overhead through the performance gain of SIMD vectorization. Experiments on four array in direction kernels, which are extracted from real-world scientific applications,show that our proposed method effectively generates SIMD code for irregular kernels with array indirection. Compared to the existing SIMD vectorization methods, our proposed method significantly improves the performance of irregular kernels by 91%, on average.", "paper_title": "Efficient SIMD Code Generation for Irregular Kernels", "paper_id": "WOS:000309350200006"}