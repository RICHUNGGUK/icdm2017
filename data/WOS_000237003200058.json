{"auto_keywords": [{"score": 0.04934553301452922, "phrase": "openmp_programs"}, {"score": 0.0482650857509263, "phrase": "program_analysis_tool"}, {"score": 0.00481495049065317, "phrase": "array_access_patterns"}, {"score": 0.004491678520807451, "phrase": "important_role"}, {"score": 0.0042552618754756934, "phrase": "openmp_codes"}, {"score": 0.004190019394361629, "phrase": "array_privatization"}, {"score": 0.0034008496666026585, "phrase": "dragon_tool"}, {"score": 0.0027175263159330523, "phrase": "shared_arrays"}, {"score": 0.002675797331220082, "phrase": "run_time"}, {"score": 0.002382541887825168, "phrase": "data_locality"}, {"score": 0.0023278569001363263, "phrase": "false_sharing"}, {"score": 0.0022744242010653997, "phrase": "program_errors"}, {"score": 0.002171202123281881, "phrase": "unintended_true_sharing"}, {"score": 0.0021049977753042253, "phrase": "aggressive_privatization"}], "paper_keywords": [""], "paper_abstract": "A program analysis tool can play an important role in helping users understand and improve OpenMP codes. Array privatization is one of the most effective ways to improve the performance and scalability of OpenMP programs. In this paper we present an extension to the Open64 compiler and the Dragon tool, a program analysis tool built on top of this compiler, to enable them to collect and represent information on the manner in which threads access the elements of shared arrays at run time. This information can be useful to the programmer for restructuring their code to maximize data locality, reducing false sharing, identifying program errors (as a result of unintended true sharing) or accomplishing aggressive privatization.", "paper_title": "A tool to display array access patterns in OpenMP programs", "paper_id": "WOS:000237003200058"}