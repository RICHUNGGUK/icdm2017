{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "control_tasks"}, {"score": 0.004710489616113198, "phrase": "embedded_real-time_systems"}, {"score": 0.0041294419262414995, "phrase": "late_completion"}, {"score": 0.003952082333580496, "phrase": "catastrophic_consequence"}, {"score": 0.003754731210715724, "phrase": "quantifiable_impact"}, {"score": 0.0036731870109004993, "phrase": "control_performance"}, {"score": 0.0032433414042726356, "phrase": "optimal_assignment"}, {"score": 0.0031039212233596415, "phrase": "sampled-data_control_tasks"}, {"score": 0.002992313172550772, "phrase": "shared_computation_unit"}, {"score": 0.0028014064098604093, "phrase": "overall_cost"}, {"score": 0.002401875938287542, "phrase": "small_degree"}, {"score": 0.0023324855762635616, "phrase": "detailed_numerical_simulations"}, {"score": 0.0021518035978153878, "phrase": "overall_algorithm_effectiveness"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Verification", " Real-time systems", " control systems", " priority assignment", " optimal design", " branch-and-bound optimization"], "paper_abstract": "In embedded real-time systems, task priorities are often assigned to meet deadlines. However, in control tasks, a late completion of a task has no catastrophic consequence; rather, it has a quantifiable impact in the control performance achieved by the task. In this article, we address the problem of determining the optimal assignment of priorities and periods of sampled-data control tasks that run over a shared computation unit. We show that the minimization of the overall cost can be performed efficiently using a branch and bound algorithm that can be further speeded up by allowing for a small degree of suboptimality. Detailed numerical simulations are presented to show the advantages of various branching alternatives, the overall algorithm effectiveness, and its scalability with the number of tasks.", "paper_title": "Optimal Priority Assignment to Control Tasks", "paper_id": "WOS:000346416300017"}