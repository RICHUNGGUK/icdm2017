{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "real-time_embedded_systems"}, {"score": 0.03887060596972838, "phrase": "overall_bandwidth"}, {"score": 0.00465067040500426, "phrase": "latency-aware_bus_arbitration_scheme"}, {"score": 0.004161553532799662, "phrase": "traditional_busses"}, {"score": 0.004104132253183181, "phrase": "interconnection_network"}, {"score": 0.003401954670986958, "phrase": "optimization_goal"}, {"score": 0.0025225467103906314, "phrase": "expected_latencies"}, {"score": 0.0023529740798601015, "phrase": "experimental_results"}, {"score": 0.0022101055924375725, "phrase": "constraint_violations"}, {"score": 0.0021049977753042253, "phrase": "bandwidth_degradation"}], "paper_keywords": ["latency", " arbiter", " QoS", " performance", " bus", " slack"], "paper_abstract": "We present a latency-aware bus arbitration scheme for real-time embedded systems. Only a few works have addressed the quality of service (QoS) issue for traditional busses or interconnection network. They mostly aimed at minimizing the latencies of several master blocks, resulting in decreasing overall bandwidth and/or increasing the latencies of other master blocks. In our method, the optimization goal is different in that the latency of a master should be as close as a given latency constraint. This is achieved by introducing the concept of \"slack\". In this method, masters effectively share the given communication architecture so that they all observe expected latencies and the degradation of overall bandwidth is marginal. The experimental results show that our method greatly reduces the number of constraint violations compared to other conventional arbitration schemes while minimizing the bandwidth degradation.", "paper_title": "Latency-aware bus arbitration for real-time embedded systems", "paper_id": "WOS:000245194600007"}