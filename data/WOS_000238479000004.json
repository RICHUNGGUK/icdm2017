{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "design_intent"}, {"score": 0.0047292449487169345, "phrase": "source_code"}, {"score": 0.004645057834614705, "phrase": "software_developers"}, {"score": 0.003071965703296204, "phrase": "program_model"}, {"score": 0.0029901699209266435, "phrase": "scl_language"}, {"score": 0.002910545717767559, "phrase": "scl_conformance_checking_tool"}, {"score": 0.0023663711815487634, "phrase": "scl"}, {"score": 0.00216263228969761, "phrase": "industrial_setting"}, {"score": 0.0021049977753042253, "phrase": "open-source_software"}], "paper_keywords": ["design intent", " structural constraints", " program analysis", " object-oriented software", " SCL", " FCL"], "paper_abstract": "Software developers often fail to respect the intentions of designers due to missing or ignored documentation of design intent. SCL ( Structural Constraint Language) addresses this problem by enabling designers to formalize and confirm compliance with design intent. The designer expresses his intent as constraints on the program model using the SCL language. The SCL conformance checking tool examines developer code to confirm that the code honors these constraints. This paper presents the design of the SCL language and its checker, a set of practical examples of applying SCL, and our experience with using it both in an industrial setting and on open-source software.", "paper_title": "Using SCL to specify and check design intent in source code", "paper_id": "WOS:000238479000004"}