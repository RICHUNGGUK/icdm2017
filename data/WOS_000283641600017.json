{"auto_keywords": [{"score": 0.03833433919174848, "phrase": "hsp"}, {"score": 0.01571966310788704, "phrase": "heap_sprays"}, {"score": 0.007459283165881028, "phrase": "aslr"}, {"score": 0.0047145329604366395, "phrase": "new_buffer_overflow_attack"}, {"score": 0.004519908617935935, "phrase": "successful_chance"}, {"score": 0.004388450908826472, "phrase": "attacked_process"}, {"score": 0.003999578354348837, "phrase": "idses"}, {"score": 0.003949280009382125, "phrase": "type-safe_languages"}, {"score": 0.003802135020791801, "phrase": "glibc-and-aslr-based_solution"}, {"score": 0.003738502710504415, "phrase": "heap_spray"}, {"score": 0.0031845067058084583, "phrase": "system_call"}, {"score": 0.003117986133774198, "phrase": "heap_spray_attack"}, {"score": 0.0030017207229983385, "phrase": "memory_information_leaking_attacks"}, {"score": 0.002889778121878728, "phrase": "glibc_library"}, {"score": 0.0027469703311742647, "phrase": "source_code"}, {"score": 0.002723862897844177, "phrase": "executable_file"}, {"score": 0.0024405312482831646, "phrase": "attacked_hosts"}, {"score": 0.00231987280116332, "phrase": "future_attacks"}, {"score": 0.0023003498123420237, "phrase": "experimental_results"}, {"score": 0.002242758902593467, "phrase": "linux_platform"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Heap spray", " Buffer overflow attack", " System call", " ASLR"], "paper_abstract": "Heap sprays are a new buffer overflow attack (BOA) form that can significantly increase the successful chance of a BOA even though the attacked process is protected by a lot of state-of-the-art anti-BOA mechanisms, such as ASLR, non-executable stack/DEP, signature-based IDSes, and type-safe languages. In this paper, we propose a glibc-and-ASLR-based solution to heap sprays Heap Spray Protector (HSP). HSP controls the number and location of int 80 instructions in a process and hides the whereabouts of the only legal int 80 instruction; hence, HSP makes it difficult for attackers to issue a system call, let alone a heap spray attack. Moreover HSP can help ASLR defend against memory information leaking attacks. Furthermore, because HSP only modifies the glibc library and the kernel, it does not need to modify any source code or executable file. Finally, HSP allows attackers to execute as much code as possible before an attack can really create some damage; therefore, it enables the attacked hosts to collect more information about attackers which may be useful to block future attacks. Experimental results show HSP implemented on a Linux platform can effectively defend a system against heap sprays with less than 4.56% performance overhead. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "HSP: A solution against heap sprays", "paper_id": "WOS:000283641600017"}