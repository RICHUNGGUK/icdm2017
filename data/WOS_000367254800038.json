{"auto_keywords": [{"score": 0.0032629585038738856, "phrase": "logarithmic_number"}, {"score": 0.003200045185608395, "phrase": "sorted_arrays"}, {"score": 0.0030778231027679464, "phrase": "log-structured_merge-trees"}, {"score": 0.0025578967205807843, "phrase": "non-relaxed_priority_queue"}, {"score": 0.002436289099444074, "phrase": "state-of-the-art_lock-free_priority_queues"}, {"score": 0.0021886732310288128, "phrase": "high_performance"}, {"score": 0.0021464286727045623, "phrase": "good_scalability"}], "paper_keywords": ["Task-parallel programming", " priority-queue", " concurrent data structure relaxation", " shared memory"], "paper_abstract": "We present a new, concurrent, lock-free priority queue that relaxes the delete-min operation to allow deletion of any of the rho + 1 smallest keys instead of only a minimal one, where rho is a parameter that can be configured at runtime. It is built from a logarithmic number of sorted arrays, similar to log-structured merge-trees (LSM). For keys added and removed by the same thread the behavior is identical to a non-relaxed priority queue. We compare to state-of-the-art lock-free priority queues with both relaxed and non-relaxed semantics, showing high performance and good scalability of our approach.", "paper_title": "The Lock-Free k-LSM Relaxed Priority Queue", "paper_id": "WOS:000367254800038"}