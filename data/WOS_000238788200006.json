{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_systems"}, {"score": 0.004696491408936132, "phrase": "information_systems"}, {"score": 0.004619134710069517, "phrase": "high_level"}, {"score": 0.004486800020569973, "phrase": "possible_inputs"}, {"score": 0.004412881870378388, "phrase": "required_processing_and_consequent_outputs"}, {"score": 0.004163587877500036, "phrase": "information_system"}, {"score": 0.004061088450663783, "phrase": "direct_effect"}, {"score": 0.0034678302347682694, "phrase": "change_complexity"}, {"score": 0.003439117493141663, "phrase": "resulting_tests"}, {"score": 0.0030611534228319717, "phrase": "inevitable_changes"}, {"score": 0.00292426293067148, "phrase": "automated_technique"}, {"score": 0.0028760125558659907, "phrase": "typical_changes"}, {"score": 0.0027133032795773697, "phrase": "different_versions"}, {"score": 0.0023948981440134478, "phrase": "generic_tool"}, {"score": 0.0022877332844249065, "phrase": "new_and_promising_insights"}, {"score": 0.002158233639156017, "phrase": "complex_refactorings"}], "paper_keywords": ["software systems", " refactoring", " tool-based approach", " information systems"], "paper_abstract": "The majority of information systems these days engender a high level of complexity through the extent of possible inputs to testing, required processing and consequent outputs. In fact, complexity permeates every level of this model for an information system. Complexity thus has a direct effect on the extent to which a system needs to be tested, through those inputs. Complexity also inhibits the ease with which a system can be modified since more time needs to be devoted to assessment of change complexity and resulting tests. Reduction of complexity is the goal of every developer when initially developing a system and, as importantly, after the system has been developed and inevitable changes are made. In this paper, we analyse an automated technique for extracting the typical changes (or refactorings as we have labelled them) made to various Java systems over different versions of its lifetime. Our goal is to identify areas of change where complexity can be examined more thoroughly and aid thus given to the developer when maintaining systems. A generic tool was developed specifically for this task and the results showed new and promising insights into the way systems behave as they evolve. In particular, the complex refactorings are relatively rare compared with more simple refactorings.", "paper_title": "Understanding the complexity of refactoring in software systems: a tool-based approach", "paper_id": "WOS:000238788200006"}