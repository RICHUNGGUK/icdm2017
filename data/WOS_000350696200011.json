{"auto_keywords": [{"score": 0.0403859758180314, "phrase": "mapreduce"}, {"score": 0.015025019313543202, "phrase": "big_data"}, {"score": 0.004815145677978083, "phrase": "adaptive"}, {"score": 0.004524220016675624, "phrase": "massive_amounts"}, {"score": 0.004486800020569973, "phrase": "structured_and_unstructured_data"}, {"score": 0.004376378707877484, "phrase": "wide_range"}, {"score": 0.004146327465630697, "phrase": "large_number"}, {"score": 0.0038796562792487, "phrase": "distributed_environment"}, {"score": 0.003799878496075633, "phrase": "recent_programming_model"}, {"score": 0.003737234606207431, "phrase": "distributed_programs"}, {"score": 0.003706299561774348, "phrase": "distributed_systems"}, {"score": 0.003177892611195514, "phrase": "adaptive_sampling_mechanism"}, {"score": 0.003151572886432253, "phrase": "total_order"}, {"score": 0.0030867203659106727, "phrase": "memory_consumption"}, {"score": 0.0030231983220281836, "phrase": "trie-based_sampling_mechanism"}, {"score": 0.0029121251930855664, "phrase": "proposed_algorithm"}, {"score": 0.002668524425703961, "phrase": "proposed_mechanism"}, {"score": 0.0025704485156071463, "phrase": "previous_implementations"}, {"score": 0.0025385621498128243, "phrase": "atrie"}, {"score": 0.0023948981440134478, "phrase": "performance_evaluation"}, {"score": 0.002297274552621268, "phrase": "insensitive_email_addresses"}, {"score": 0.0021049977753042253, "phrase": "proposed_method"}], "paper_keywords": ["MapReduce", " Load balance", " Partitioning", " Sampling", " Cloud computing", " Hadoop"], "paper_abstract": "Big Data refers to the massive amounts of structured and unstructured data being produced every day from a wide range of sources. Big Data is difficult to work with and needs a large number of machines to process it, as well as software capable of running in a distributed environment. MapReduce is a recent programming model that simplifies writing distributed programs on distributed systems. For MapReduce to work it needs to divide work amongst computers in a network. Consequently, the performance of MapReduce is dependent on how evenly it distributes the workload. This paper proposes an adaptive sampling mechanism for total order partitioning that can reduce memory consumption whilst partitioning with a trie-based sampling mechanism (ATrie). The performance of the proposed algorithm is compared to a state of the art trie-based partitioning system (ETrie). Experiments show the proposed mechanism is more adaptive and more memory efficient than previous implementations. Since ATrie is adaptive, its performance depended on the type of data used. A performance evaluation of a 2-level ATrie shows it uses 2.43 times less memory for case insensitive email addresses, and uses 1,024 times less memory for birthdates compared to that of a 2-level ETrie. These results show the potential of the proposed method.", "paper_title": "An Adaptive and Memory Efficient Sampling Mechanism for Partitioning in MapReduce", "paper_id": "WOS:000350696200011"}