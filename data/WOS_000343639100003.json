{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "advice_complexity"}, {"score": 0.04189227956594073, "phrase": "online_setting"}, {"score": 0.004464156619275582, "phrase": "ordered_set"}, {"score": 0.004425354103924516, "phrase": "neighboring_vertices"}, {"score": 0.004224008636767914, "phrase": "different_colors"}, {"score": 0.004055329874540865, "phrase": "minimum_range"}, {"score": 0.003927516959113487, "phrase": "consecutive_time"}, {"score": 0.003770633265791941, "phrase": "previously_revealed_vertices"}, {"score": 0.003375574760845742, "phrase": "deterministic_algorithms"}, {"score": 0.0031845067058084583, "phrase": "simple_greedy_strategy"}, {"score": 0.003084054767389711, "phrase": "recently_developed_framework"}, {"score": 0.003030600725762668, "phrase": "online_problems"}, {"score": 0.002884111441153185, "phrase": "online_algorithm"}, {"score": 0.0027768729639942617, "phrase": "sharp_threshold"}, {"score": 0.002642615537454746, "phrase": "color_range"}, {"score": 0.0024856733811053243, "phrase": "advice_bits"}, {"score": 0.002351705899181029, "phrase": "first_known_example"}, {"score": 0.002331221840164716, "phrase": "online_problem"}, {"score": 0.002310915790114425, "phrase": "sublinear_advice"}, {"score": 0.002224942603922241, "phrase": "randomized_online_algorithm"}, {"score": 0.0021991369769963545, "phrase": "better_expected_competitive_ratio"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Online coloring", " Frequency assignment", " Advice complexity", " Randomized algorithms"], "paper_abstract": "In an L(2, 1)-coloring of a graph, the vertices are colored with colors from an ordered set such that neighboring vertices get colors that have distance at least 2 and vertices at distance 2 in the graph get different colors. We consider the problem of finding an L(2, 1)-coloring using a minimum range of colors in an online setting where the vertices arrive in consecutive time steps together with information about their neighbors and vertices at distance 2 among the previously revealed vertices. For this, we restrict our attention to paths and cycles. Offline, paths can easily be colored within the range {0, ... , 4} of colors. We prove that, considering deterministic algorithms in an online setting, the range {0, ... , 6} is necessary and sufficient while a simple greedy strategy needs range (0, ... , 7}. Advice complexity is a recently developed framework to measure the complexity of online problems. The idea is to measure how many bits of advice about the yet unknown parts of the input an online algorithm needs to compute a solution of a certain quality. We show a sharp threshold on the advice complexity of the online L(2, 1)-coloring problem on paths and cycles. While achieving color range (0, ... , 6} does not need any advice, improving over this requires a number of advice bits that is linear in the size of the input. Thus, the L(2, 1)-coloring problem is the first known example of an online problem for which sublinear advice does not help. We further use our advice complexity results to prove that no randomized online algorithm can achieve a better expected competitive ratio than 5/4(1 - delta), for any delta > 0. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "On the advice complexity of the online L(2,1)-coloring problem on paths and cycles", "paper_id": "WOS:000343639100003"}