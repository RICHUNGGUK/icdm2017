{"auto_keywords": [{"score": 0.04827337430415872, "phrase": "customer_sequences"}, {"score": 0.00481495049065317, "phrase": "sequential_patterns"}, {"score": 0.004723322467153553, "phrase": "dynamic_databases"}, {"score": 0.00429057323623293, "phrase": "fusp-tree_algorithm"}, {"score": 0.003934970057482768, "phrase": "customer_sequences_insertion"}, {"score": 0.0036788184374592706, "phrase": "fusp-tree_construction_algorithm"}, {"score": 0.0032463805170627686, "phrase": "decremental_fusp-tree_algorithm"}, {"score": 0.0028100102841877835, "phrase": "execution_time"}, {"score": 0.0024556852466581527, "phrase": "original_database"}, {"score": 0.0024088451312725924, "phrase": "experimental_results"}, {"score": 0.0023178219772486868, "phrase": "proposed_fusp-del_algorithm"}, {"score": 0.002251813863195168, "phrase": "good_performance"}, {"score": 0.0021049977753042253, "phrase": "space_complexity"}], "paper_keywords": ["Data mining", " Sequential pattern", " FUSP-tree", " Customer sequences deletion", " Decremental"], "paper_abstract": "In the past, an FUSP-tree algorithm for inserting customer sequences was proposed for handling the customer sequences insertion. In this paper, the FUSP-tree construction algorithm is thus modified for efficiently handling the deletion of customer sequences. A decremental FUSP-tree algorithm for sequences deletion (FUSP-DEL) is thus proposed for reducing the execution time of re-constructing the tree while the customer sequences are deleted in the original database. Experimental results show that the proposed FUSP-DEL algorithm has a good performance in both of the time and space complexity.", "paper_title": "Updating the Sequential Patterns in Dynamic Databases for Customer Sequences Deletion", "paper_id": "WOS:000356204400001"}