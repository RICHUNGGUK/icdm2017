{"auto_keywords": [{"score": 0.03528130593645025, "phrase": "ltcp"}, {"score": 0.01697221582816617, "phrase": "link_degradation"}, {"score": 0.008587297509903405, "phrase": "congestion_avoidance"}, {"score": 0.008221636491567074, "phrase": "packet_reordering"}, {"score": 0.007628944434485679, "phrase": "lazy_tcp"}, {"score": 0.006112978809843905, "phrase": "tcp"}, {"score": 0.00481495049065317, "phrase": "datacenter_throughput"}, {"score": 0.0046597835420572825, "phrase": "packet_spraying"}, {"score": 0.0045591142048535165, "phrase": "promising_multipath_routing_approach"}, {"score": 0.004493207015584002, "phrase": "full_utilization"}, {"score": 0.004460609967916904, "phrase": "multiple_paths"}, {"score": 0.0044544903074249095, "phrase": "data_transmission_rate"}, {"score": 0.004396120480895021, "phrase": "existing_tcp_schemes"}, {"score": 0.004364224683011796, "phrase": "serious_challenge"}, {"score": 0.004042919099733537, "phrase": "low_throughput"}, {"score": 0.0036775717816768133, "phrase": "high_throughput"}, {"score": 0.0035202324978577263, "phrase": "congestion_signals"}, {"score": 0.0033942533792009687, "phrase": "non-congestion_events"}, {"score": 0.0033696019683761274, "phrase": "packet_spraying_circumstance"}, {"score": 0.003284718806701356, "phrase": "lazy_way"}, {"score": 0.002987682397171167, "phrase": "disordered_packet"}, {"score": 0.0029444248503861167, "phrase": "unnecessary_backoff"}, {"score": 0.002648935542912504, "phrase": "successive_packet_loss"}, {"score": 0.002535492891830764, "phrase": "good_chance"}, {"score": 0.00250789768689397, "phrase": "discrete_packet_loss"}, {"score": 0.0021992217442375157, "phrase": "existing_tcp"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Datacenter network", " TCP", " Packet spraying", " Packet reordering", " Link degradation"], "paper_abstract": "Packet spraying is being recognized as a promising multipath routing approach in datacenter for full utilization of multiple paths. However, existing TCP schemes face serious challenge of robustness when running over packet spraying. They suffer severely from frequent packet reordering and link degradation, resulting in low throughput. To address these issues, this paper proposes Lazy TCP (LTCP), a novel TCP over packet spraying to provide robustness and achieve high throughput. Our basic idea is that TCP should not backoff quickly when receiving congestion signals, as these signals can be easily caused by non-congestion events in packet spraying circumstance. LTCP performs congestion avoidance in a lazy way. First, to mitigate the impact of packet reordering, LTCP delays the time to perform congestion avoidance. As the sender waits more time for the disordered packet, LTCP avoids unnecessary backoff caused by packet reordering. Second, to eliminate the impact of link degradation, LTCP stubbornly maintains data transmission rate. When performing congestion avoidance, LTCP never halves data transmission rate unless identifying successive packet loss. Such design is based on our key observation that degraded link stands a good chance of causing discrete packet loss in a batch of packets. And it effectively eliminates the impact of link degradation. Simulations on NS2 show that LTCP is robust and high-throughput, and improves 2.4 times throughput compared to existing TCP in cases of packet reordering and link degradation. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Improving datacenter throughput and robustness with Lazy TCP over packet spraying", "paper_id": "WOS:000355046000003"}