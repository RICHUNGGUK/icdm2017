{"auto_keywords": [{"score": 0.04350170304710296, "phrase": "aeminium"}, {"score": 0.00481495049065317, "phrase": "-default_programming_language_approach"}, {"score": 0.0044624036486300865, "phrase": "bug-free_and_maintainable_software"}, {"score": 0.004328689762198895, "phrase": "developer_productivity"}, {"score": 0.0040525061916685924, "phrase": "default_programming_language"}, {"score": 0.003991305899593133, "phrase": "aeminium_programmers"}, {"score": 0.00395101799538683, "phrase": "data_dependencies"}, {"score": 0.003587924960158317, "phrase": "type_system"}, {"score": 0.003445174898115646, "phrase": "aeminium_approach"}, {"score": 0.003393115177189967, "phrase": "modular_and_composable_mechanism"}, {"score": 0.003341839487905525, "phrase": "concurrent_applications"}, {"score": 0.003291336101694653, "phrase": "data_races"}, {"score": 0.0032415934630668484, "phrase": "provable_way"}, {"score": 0.002840708910768261, "phrase": "core_functionality"}, {"score": 0.0026863605504566924, "phrase": "mu_aeminium"}, {"score": 0.0025793874956029795, "phrase": "permission_flow"}, {"score": 0.00248927752933113, "phrase": "default_execution"}, {"score": 0.002260211578368138, "phrase": "eight-core_machine"}, {"score": 0.002226017732566121, "phrase": "data_group_permissions"}, {"score": 0.00217017119491777, "phrase": "shared_state"}, {"score": 0.0021049977753042253, "phrase": "web_server_application"}], "paper_keywords": ["Languages", " Theory", " Performance", " Access permissions", " permissions", " data groups", " concurrency"], "paper_abstract": "Writing concurrent applications is extremely challenging, not only in terms of producing bug-free and maintainable software, but also for enabling developer productivity. In this article we present the AEMINIUM concurrent-by-default programming language. Using AEMINIUM programmers express data dependencies rather than control flow between instructions. Dependencies are expressed using permissions, which are used by the type system to automatically parallelize the application. The AEMINIUM approach provides a modular and composable mechanism for writing concurrent applications, preventing data races in a provable way. This allows programmers to shift their attention from low-level, error-prone reasoning about thread interleaving and synchronization to focus on the core functionality of their applications. We study the semantics of AEMINIUM through mu AEMINIUM, a sound core calculus that leverages permission flow to enable concurrent-by-default execution. After discussing our prototype implementation we present several case studies of our system. Our case studies show up to 6.5X speedup on an eight-core machine when leveraging data group permissions to manage access to shared state, and more than 70% higher throughput in a Web server application.", "paper_title": "AEMINIUM: A Permission-Based Concurrent-by-Default Programming Language Approach", "paper_id": "WOS:000333537700002"}