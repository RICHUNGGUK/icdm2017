{"auto_keywords": [{"score": 0.040061502696484744, "phrase": "test_cases"}, {"score": 0.019390347035757063, "phrase": "activity_diagrams"}, {"score": 0.010231914265779267, "phrase": "design_specifications"}, {"score": 0.00481495049065317, "phrase": "uml_activity_diagram-based_automatic_test_case_generation_for_java_programs"}, {"score": 0.0047273577269638725, "phrase": "case_generation"}, {"score": 0.004556901872357751, "phrase": "important_part"}, {"score": 0.004501453956464956, "phrase": "testing_processes"}, {"score": 0.004339108074589304, "phrase": "unified_modeling_language_activity_diagrams"}, {"score": 0.0039341294012600085, "phrase": "automatic_approach"}, {"score": 0.003769006950727621, "phrase": "java_programs"}, {"score": 0.003375429082739004, "phrase": "randomly_generated_ones"}, {"score": 0.003097865379563127, "phrase": "java_program"}, {"score": 0.002913650880082273, "phrase": "abundant_test_cases"}, {"score": 0.0027403605798830984, "phrase": "instrumented_program"}, {"score": 0.002673957615079041, "phrase": "corresponding_program_execution"}, {"score": 0.002453934333239467, "phrase": "activity_diagram"}, {"score": 0.002409188797323273, "phrase": "reduced_set"}, {"score": 0.0021049977753042253, "phrase": "program_execution_traces"}], "paper_keywords": ["Software testing", " test cases generation", " UML activity diagrams", " Java"], "paper_abstract": "Test case generation based on design specifications is an important part of testing processes. In this paper, Unified Modeling Language activity diagrams are used as design specifications. By setting up several test adequacy criteria with respect to activity diagrams, an automatic approach is presented to generate test cases for Java programs. Instead of directly deriving test cases from activity diagrams, this approach selects test cases from a set of randomly generated ones according to a given test adequacy criterion. In the approach, we first instrument a Java program under testing according to its activity diagram model, and randomly generate abundant test cases for the program. Then, by running the instrumented program we obtain the corresponding program execution traces. Finally, by matching these traces with the behavior of the activity diagram, a reduced set of test cases are selected according to the given test adequacy criterion. This approach can also be used to check the consistency between the program execution traces and the behavior of activity diagrams.", "paper_title": "UML Activity Diagram-Based Automatic Test Case Generation For Java Programs", "paper_id": "WOS:000268330600004"}