{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "resource_reservation"}, {"score": 0.040673710255326394, "phrase": "potential_overload"}, {"score": 0.00474348728309194, "phrase": "unaware_applications"}, {"score": 0.004708152527097594, "phrase": "grid_systems"}, {"score": 0.004620957579769604, "phrase": "resource_request_rates"}, {"score": 0.004569414098372132, "phrase": "grid_system"}, {"score": 0.0043363441738461335, "phrase": "single_resource"}, {"score": 0.004146015717402716, "phrase": "response_time"}, {"score": 0.0036235254023315798, "phrase": "different_service"}, {"score": 0.003569681826459428, "phrase": "equivalent_resource"}, {"score": 0.0032507647824680684, "phrase": "grid_resources"}, {"score": 0.0030388841099720843, "phrase": "management_system"}, {"score": 0.0029381648092259064, "phrase": "suitable_action"}, {"score": 0.0029053368919259985, "phrase": "resource_availability"}, {"score": 0.0028301536956600137, "phrase": "additional_resources"}, {"score": 0.0026357223464279983, "phrase": "involved_costs"}, {"score": 0.002548331088496964, "phrase": "software_architecture"}, {"score": 0.00250103550267459, "phrase": "globus_services"}, {"score": 0.002382124723569496, "phrase": "computational_reflection_technology"}, {"score": 0.0022945073938622287, "phrase": "advance_reservation"}, {"score": 0.002235095576913575, "phrase": "applications'_resource_needs"}, {"score": 0.0022101055924375725, "phrase": "dynamic_information"}, {"score": 0.002193600680263771, "phrase": "static_knowledge"}, {"score": 0.0021609589091422608, "phrase": "static_program_code_analysis"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["Grid systems", " reservation", " computational reflection"], "paper_abstract": "The dynamics of resource request rates in a Grid system can be wide ranging, to the point that request peaks for a single resource can be difficult to handle and end up greatly increasing the response time. Once a request has been submitted by a client, this has to cope with the potential overload arising. However, it is impractical to cure overload once it takes place by negotiating a different service or finding an equivalent resource, since the client would then bear the delay due to negotiation and re-submission. Instead, in order to effectively exploit Grid resources, it is crucial that applications perform reservation of resources before using them. Reservation allows a management system to consider application needs in advance and take suitable action to improve resource availability. In particular, this enables additional resources to be secured beforehand in the background when appropriate to avoid a potential overload, rather than paying the involved costs when overload arises. This paper proposes a software architecture that integrates applications with Globus services to conveniently handle resource reservation and allocation. Within the architecture, the computational reflection technology transparently connects applications with components that take care of advance reservation, as they dynamically sense the applications' resource needs. This dynamic information augments static knowledge gathered offline from static program code analysis. Copyright (c) 2005 John Wiley & Sons, Ltd.", "paper_title": "Supporting resource reservation and allocation for unaware applications in Grid systems", "paper_id": "WOS:000238600300006"}