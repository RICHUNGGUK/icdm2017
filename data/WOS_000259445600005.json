{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_checker"}, {"score": 0.04960202571834177, "phrase": "type_systems"}, {"score": 0.010403153468572976, "phrase": "model_checking"}, {"score": 0.007448457067254331, "phrase": "type_system"}, {"score": 0.004534136929881113, "phrase": "prominent_difference"}, {"score": 0.004291073117901643, "phrase": "syntactic_and_modular_style"}, {"score": 0.004101886428528311, "phrase": "semantic_and_whole-program_style"}, {"score": 0.0036188435232325337, "phrase": "model_checkers"}, {"score": 0.0032246835734680377, "phrase": "temporal_safety_properties"}, {"score": 0.0031925019616678217, "phrase": "imperative_programs"}, {"score": 0.0030060256866508606, "phrase": "finite-state_abstraction_scheme"}, {"score": 0.0027741761880779535, "phrase": "exactly_those_programs"}, {"score": 0.0025989960809479104, "phrase": "function_types"}, {"score": 0.002560162916190598, "phrase": "flow_sensitivity"}, {"score": 0.002509284173541882, "phrase": "union_types"}, {"score": 0.0024717881264735477, "phrase": "context_sensitivity"}, {"score": 0.0021049977753042253, "phrase": "synergistic_program_analyses"}], "paper_keywords": ["verification", " model checking", " type systems"], "paper_abstract": "Type systems and model checking are two prevalent approaches to program verification. A prominent difference between them is that type systems are typically defined in a syntactic and modular style whereas model checking is usually performed in a semantic and whole-program style. This difference between the two approaches makes them complementary to each other: type systems are good at explaining why a program was accepted while model checkers are good at explaining why a program was rejected. We present a type system that is equivalent to a model checker for verifying temporal safety properties of imperative programs. The model checker is natural and may be instantiated with any finite-state abstraction scheme such as predicate abstraction. The type system, which is also parametric, type checks exactly those programs that are accepted by the model checker. It uses a variant of function types to capture flow sensitivity and intersection and union types to capture context sensitivity. Our result sheds light on the relationship between type systems and model checking, provides a methodology for studying their relative expressiveness, is a step towards sharing results between the two approaches, and motivates synergistic program analyses involving interplay between them.", "paper_title": "A type system equivalent to a model checker", "paper_id": "WOS:000259445600005"}