{"auto_keywords": [{"score": 0.04703570948560471, "phrase": "maj"}, {"score": 0.013865760469316065, "phrase": "aspectj"}, {"score": 0.007952311645933349, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "domain-specific_languages_and_program_generation"}, {"score": 0.004773040022691547, "phrase": "meta-aspectj._meta-aspectj"}, {"score": 0.004588891098290524, "phrase": "aspectj_programs"}, {"score": 0.004548939310612501, "phrase": "code_templates"}, {"score": 0.004278807087784626, "phrase": "arbitrary_java_code"}, {"score": 0.0041136473765874815, "phrase": "structured_metaprogramming_tool"}, {"score": 0.00406001734835979, "phrase": "well-typed_generator"}, {"score": 0.004007083686875716, "phrase": "syntactically_correct_generated_program"}, {"score": 0.0038692638652494697, "phrase": "aspect-oriented_and_generative_programming"}, {"score": 0.0037361664435836845, "phrase": "small_domain-specific_language_extensions"}, {"score": 0.003623453648863547, "phrase": "syntax_extension"}, {"score": 0.0032908057622663732, "phrase": "existing_software_application"}, {"score": 0.0032336801561165113, "phrase": "regular_api"}, {"score": 0.0031223774204093713, "phrase": "language_extension"}, {"score": 0.0030547611342112693, "phrase": "mature_language_implementation"}, {"score": 0.0028857130140890787, "phrase": "low-level_issues"}, {"score": 0.002823207272381655, "phrase": "base_java_language"}, {"score": 0.0027140798043053986, "phrase": "valuable_insights"}, {"score": 0.002690406375639144, "phrase": "metaprogramming_tool_designers"}, {"score": 0.0026321198895843173, "phrase": "mature_metaprogramming_tool"}, {"score": 0.0024113009621042677, "phrase": "context-sensitive_parsing"}, {"score": 0.002123531043641047, "phrase": "type_names"}, {"score": 0.0021049977753042253, "phrase": "syntactic_entities"}], "paper_keywords": ["Design", " Languages", " Metaprogramming", " domain-specific languages", " language extensions", " program synthesis", " program transformation", " program verification"], "paper_abstract": "Meta-AspectJ (MAJ) is a language for generating AspectJ programs using code templates. MAJ itself is an extension of Java, so users can interleave arbitrary Java code with AspectJ code templates. MAJ is a structured metaprogramming tool: a well-typed generator implies a syntactically correct generated program. MAJ promotes a methodology that combines aspect-oriented and generative programming. A valuable application is in implementing small domain-specific language extensions as generators using unobtrusive annotations for syntax extension and AspectJ as a back-end. The advantages of this approach are twofold. First, the generator integrates into an existing software application much as a regular API or library, instead of as a language extension. Second, a mature language implementation is easy to achieve with little effort since AspectJ takes care of the low-level issues of interfacing with the base Java language. In addition to its practical value, MAJ offers valuable insights to metaprogramming tool designers. It is a mature metaprogramming tool for AspectJ (and, by extension, Java): a lot of emphasis has been placed on context-sensitive parsing and error reporting. As a result, MAJ minimizes the number of metaprogramming (quote/unquote) operators and uses type inference to reduce the need to remember type names for syntactic entities.", "paper_title": "Domain-Specific Languages and Program Generation with Meta-AspectJ", "paper_id": "WOS:000262454800003"}