{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "precedence-constrained_tasks"}, {"score": 0.049437714378803954, "phrase": "power_efficiency"}, {"score": 0.04833495485272269, "phrase": "large-scale_distributed_systems"}, {"score": 0.03562071693205257, "phrase": "special_hardware_support"}, {"score": 0.004782587436296574, "phrase": "heterogeneous_computing_resources"}, {"score": 0.004671012181488876, "phrase": "main_challenges"}, {"score": 0.004164858807302222, "phrase": "directed_acyclic_graph"}, {"score": 0.003945949295597681, "phrase": "precedence_constraints"}, {"score": 0.0039061983019451903, "phrase": "heterogeneous_set"}, {"score": 0.003879919492075319, "phrase": "computing_resources"}, {"score": 0.003802135020791801, "phrase": "dual_objective"}, {"score": 0.003751143724152193, "phrase": "overall_makespan"}, {"score": 0.003700833742881285, "phrase": "aggregate_power_consumption"}, {"score": 0.0036144035798673967, "phrase": "related_works"}, {"score": 0.0035779805381654438, "phrase": "area_use"}, {"score": 0.0035659209800190847, "phrase": "dynamic_voltage"}, {"score": 0.003541923233726252, "phrase": "frequency_scaling"}, {"score": 0.0034012855737894907, "phrase": "dvfs"}, {"score": 0.0031791333962016507, "phrase": "novel_two-phase_solution"}, {"score": 0.0030118779844670353, "phrase": "novel_algorithm"}, {"score": 0.002951444412262927, "phrase": "available_crs"}, {"score": 0.0028630535573013686, "phrase": "lower_overall_power_consumption"}, {"score": 0.0028246207858247732, "phrase": "shorter_makespan"}, {"score": 0.002805597755796506, "phrase": "application_task_schedules"}, {"score": 0.0027307746993761035, "phrase": "low-complexity_power-aware_algorithm"}, {"score": 0.00266693888510356, "phrase": "application_tasks"}, {"score": 0.002640038329840458, "phrase": "selected_crs"}, {"score": 0.0025870463897472943, "phrase": "overall_time_complexity"}, {"score": 0.002426137929553722, "phrase": "simulative_experiments"}, {"score": 0.0024097920845706795, "phrase": "real-world_task_graphs"}, {"score": 0.0023218600965757264, "phrase": "pasta"}, {"score": 0.0022446552199168472, "phrase": "well-known_heft_algorithm"}, {"score": 0.0021336603746941653, "phrase": "heft."}, {"score": 0.002126458181856629, "phrase": "empirical_experiments"}, {"score": 0.0021049977753042253, "phrase": "physical_test-bed"}], "paper_keywords": ["DAG scheduling", " Energy-awareness", " High performance computing", " Heterogeneous computing resources"], "paper_abstract": "Power efficiency is one of the main challenges in large-scale distributed systems such as datacenters, Grids, and Clouds. One can study the scheduling of applications in such large-scale distributed systems by representing applications as a set of precedence-constrained tasks and modeling them by a Directed Acyclic Graph. In this paper we address the problem of scheduling a set of tasks with precedence constraints on a heterogeneous set of Computing Resources (CRs) with the dual objective of minimizing the overall makespan and reducing the aggregate power consumption of CRs. Most of the related works in this area use Dynamic Voltage and Frequency Scaling (DVFS) approach to achieve these objectives. However, DVFS requires special hardware support that may not be available on all processors in large-scale distributed systems. In contrast, we propose a novel two-phase solution called PASTA that does not require any special hardware support. In its first phase, it uses a novel algorithm to select a subset of available CRs for running an application that can balance between lower overall power consumption of CRs and shorter makespan of application task schedules. In its second phase, it uses a low-complexity power-aware algorithm that creates a schedule for running application tasks on the selected CRs. We show that the overall time complexity of PASTA is where is the number of CRs and is the number of tasks. By using simulative experiments on real-world task graphs, we show that the makespan of schedules produced by PASTA are approximately 20 % longer than the ones produced by the well-known HEFT algorithm. However, the schedules produced by PASTA consume nearly 60 % less energy than those produced by HEFT. Empirical experiments on a physical test-bed confirm the power efficiency of PASTA in comparison with HEFT too.", "paper_title": "PASTA: a power-aware solution to scheduling of precedence-constrained tasks on heterogeneous computing resources", "paper_id": "WOS:000313073300003"}