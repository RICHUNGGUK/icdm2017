{"auto_keywords": [{"score": 0.048929739366992464, "phrase": "functional_programs"}, {"score": 0.024250048975719907, "phrase": "existing_functional_programs"}, {"score": 0.00481495049065317, "phrase": "static_dependency_pair_method"}, {"score": 0.004520132822496416, "phrase": "ml-polymorphic_types"}, {"score": 0.004454691230204595, "phrase": "simply-typed_term"}, {"score": 0.0037030390595465673, "phrase": "dependency_pair_method"}, {"score": 0.0036493838225192883, "phrase": "first-order_rewrite_systems"}, {"score": 0.0035616743422949766, "phrase": "strong_computability"}, {"score": 0.0035100601949451028, "phrase": "typed_lambda-calculi"}, {"score": 0.003409057326528229, "phrase": "static_recursive_structure"}, {"score": 0.003359647377874098, "phrase": "definition_dependency"}, {"score": 0.003294875957676514, "phrase": "suitable_constraints"}, {"score": 0.0028471655497661528, "phrase": "algebraic_data"}, {"score": 0.002711842889248926, "phrase": "type_system"}, {"score": 0.0026855584570643384, "phrase": "strss"}, {"score": 0.0025085435314540837, "phrase": "product_types"}, {"score": 0.0024842242921857705, "phrase": "type_constructors"}, {"score": 0.002389276641014013, "phrase": "type_variables"}, {"score": 0.0021569129153653777, "phrase": "large_contribution"}, {"score": 0.002125612498781805, "phrase": "theoretical_rewriting_techniques"}, {"score": 0.0021049977753042253, "phrase": "actual_problems"}], "paper_keywords": ["rewriting systems for functional programs", " termination", " static dependency pair method"], "paper_abstract": "For simply-typed term rewriting systems (STRSs) and higher-order rewrite systems (HRSs) a la Nipkow, we proposed a method for proving termination, namely the static dependency pair method. The method combines the dependency pair method introduced for first-order rewrite systems with the notion of strong computability introduced for typed lambda-calculi. This method analyzes a static recursive structure based on definition dependency. By solving suitable constraints generated by the analysis, we can prove termination. In this paper, we extend the method to rewriting systems for functional programs (RFPs) with product, algebraic data, and ML-polymorphic types. Although the type system in STRSs contains only product and simple types and the type system in HRSs contains only simple types, our RFPs allow product types, type constructors (algebraic data types), and type variables (ML-polymorphic types). Hence, our RFPs are more representative of existing functional programs than STRSs and HRSs. Therefore, our result makes a large contribution to applying theoretical rewriting techniques to actual problems, that is, to proving the termination of existing functional programs.", "paper_title": "Static Dependency Pair Method in Rewriting Systems for Functional Programs with Product, Algebraic Data, and ML-Polymorphic Types", "paper_id": "WOS:000320214300011"}