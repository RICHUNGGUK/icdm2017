{"auto_keywords": [{"score": 0.04754047218347395, "phrase": "dynamic_data_structures"}, {"score": 0.00481495049065317, "phrase": "complex_dynamic_data_tree"}, {"score": 0.004628101576367193, "phrase": "software_systems"}, {"score": 0.004470539706227421, "phrase": "linked_lists"}, {"score": 0.004361276005140776, "phrase": "binary_trees"}, {"score": 0.00427578268550103, "phrase": "increasing_interest"}, {"score": 0.00419195822011581, "phrase": "dynamic_structures"}, {"score": 0.004069280130346136, "phrase": "verification_techniques"}, {"score": 0.003815607281455725, "phrase": "pointer-based_internal_representation"}, {"score": 0.0037222908218253054, "phrase": "key_aspect"}, {"score": 0.003507504253087326, "phrase": "verification_tool"}, {"score": 0.0034386894664467003, "phrase": "checking_techniques"}, {"score": 0.0033379819706003885, "phrase": "new_nodes"}, {"score": 0.0030988889679192965, "phrase": "dynamic_data"}, {"score": 0.0028768722873689432, "phrase": "non_desirable_sharing"}, {"score": 0.002579622880371082, "phrase": "model_checking_techniques_dynamic_data_structures"}, {"score": 0.0022563636435096457, "phrase": "separation_logic"}, {"score": 0.002157857111130435, "phrase": "new_operator"}, {"score": 0.0021049977753042253, "phrase": "non-sharing_property"}], "paper_keywords": ["Model checking", " Mu-calculus", " Dynamic data structures"], "paper_abstract": "The problem of verifying software systems that use dynamic data structures (such as linked lists, queues, or binary trees) has attracted increasing interest over the last decade. Dynamic structures are not easily supported by verification techniques because, among other reasons, it is difficult to efficiently manage the pointer-based internal representation. This is a key aspect when, for instance, the goal is to construct a verification tool based on model checking techniques. In addition, since new nodes can be dynamically inserted or extracted from the structure, the shape of the dynamic data (and other more specific properties) may vary at runtime, with errors such as the non desirable sharing between two nodes being difficult to detect. In this paper, we propose to use mu-calculus to describe and analyze with model checking techniques dynamic data structures such as lists and trees. The expressiveness of mu-calculus makes it possible to naturally describe these structures. In addition, following the ideas of separation logic, the logic has been extended with a new operator capable of describing the non-sharing property, which is essential when analyzing dynamic data structures.", "paper_title": "Verification of complex dynamic data tree with mu-calculus", "paper_id": "WOS:000323074400004"}