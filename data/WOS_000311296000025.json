{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "existing_approaches"}, {"score": 0.004741167616693272, "phrase": "higher-order_vectorisation"}, {"score": 0.004526503177267299, "phrase": "nested_data_parallelism"}, {"score": 0.0043215158337835706, "phrase": "asymptotic_work_complexity"}, {"score": 0.004222515162635615, "phrase": "source_program"}, {"score": 0.00415777266387528, "phrase": "straightforward_examples"}, {"score": 0.004031238480458909, "phrase": "sparse_matrix-vector_multiplication"}, {"score": 0.003878451139312637, "phrase": "severe_blow-up"}, {"score": 0.00317221667574882, "phrase": "index_space"}, {"score": 0.003075583447856341, "phrase": "root_cause"}, {"score": 0.002891032998395276, "phrase": "refined_representation"}, {"score": 0.002846647336160784, "phrase": "nested_arrays"}, {"score": 0.002675797331220082, "phrase": "data_parallel_haskell"}, {"score": 0.0024957862318504753, "phrase": "realistic_programs"}, {"score": 0.0022744242010653997, "phrase": "correct_asymptotic_work_complexity"}, {"score": 0.0021544587602892466, "phrase": "asymptotic_complexity"}, {"score": 0.0021049977753042253, "phrase": "vectorised_program"}], "paper_keywords": ["Languages", " Performance", " Arrays", " Data parallelism", " Haskell"], "paper_abstract": "Existing approaches to higher-order vectorisation, also known as flattening nested data parallelism, do not preserve the asymptotic work complexity of the source program. Straightforward examples, such as sparse matrix-vector multiplication, can suffer a severe blow-up in both time and space, which limits the practicality of this method. We discuss why this problem arises, identify the mis-handling of index space transforms as the root cause, and present a solution using a refined representation of nested arrays. We have implemented this solution in Data Parallel Haskell (DPH) and present benchmarks showing that realistic programs, which used to suffer the blow-up, now have the correct asymptotic work complexity. In some cases, the asymptotic complexity of the vectorised program is even better than the original.", "paper_title": "Work Efficient Higher-Order Vectorisation", "paper_id": "WOS:000311296000025"}