{"auto_keywords": [{"score": 0.041520457527160375, "phrase": "plp"}, {"score": 0.015719678405592782, "phrase": "physiological_partitioning"}, {"score": 0.004688321299229397, "phrase": "shared-everything_transaction_processing_systems"}, {"score": 0.004484596684703308, "phrase": "database_system_designers"}, {"score": 0.004444921827311577, "phrase": "recent_proposals"}, {"score": 0.004158290806404304, "phrase": "next_potential_problem"}, {"score": 0.004066898031169742, "phrase": "page_latching_problem"}, {"score": 0.003754140294151593, "phrase": "desired_properties"}, {"score": 0.0037209035703970705, "phrase": "sharedeverything_designs"}, {"score": 0.003434662174045939, "phrase": "physical_page_level"}, {"score": 0.0031845067058084583, "phrase": "single_thread"}, {"score": 0.0030189426536422577, "phrase": "extended_design"}, {"score": 0.0027989800906333784, "phrase": "easy_repartitioning"}, {"score": 0.0027131212233443137, "phrase": "lightweight_dynamic_load_balancing_mechanism"}, {"score": 0.002629889722844828, "phrase": "plp."}, {"score": 0.0025950024597986366, "phrase": "plp_prototype"}, {"score": 0.0025605773834404253, "phrase": "different_multicore_machines"}, {"score": 0.002438203996977464, "phrase": "optimized_conventional_design"}, {"score": 0.0022404162042797262, "phrase": "existing_systems"}, {"score": 0.0022106849415504874, "phrase": "dlb"}, {"score": 0.0021620042653528846, "phrase": "rapid_and_robust_behavior"}, {"score": 0.0021049977753042253, "phrase": "load_imbalances"}], "paper_keywords": ["Physiological partitioning", " PLP", " Multi-rooted B plus Trees", " MRBtree", " Dynamic load balancing", " Re-partitioning"], "paper_abstract": "Scaling the performance of shared-everything transaction processing systems to highly parallel multicore hardware remains a challenge for database system designers. Recent proposals alleviate locking and logging bottlenecks in the system, leaving page latching as the next potential problem. To tackle the page latching problem, we propose physiological partitioning (PLP). PLP applies logical-only partitioning, maintaining the desired properties of sharedeverything designs, and introduces a multi-rooted B+Tree index structure (MRBTree) that enables the partitioning of the accesses at the physical page level. Logical partitioning and MRBTrees together ensure that all accesses to a given index page come from a single thread and, hence, can be entirely latch free; an extended design makes heap page accesses thread private as well. Moreover, MRBTrees offer an infrastructure for easy repartitioning and allow us to have a lightweight dynamic load balancing mechanism (DLB) on top of PLP. Profiling a PLP prototype running on different multicore machines shows that it acquires 85 and 68%fewer contentious critical sections, respectively, than an optimized conventional design and one based on logical-only partitioning. PLP also improves performance up to almost 50 % over the existing systems, while DLB enhances the system with rapid and robust behavior in both detecting and handling load imbalances.", "paper_title": "Scalable and dynamically balanced shared-everything OLTP with physiological partitioning", "paper_id": "WOS:000316500800002"}