{"auto_keywords": [{"score": 0.04166278199109337, "phrase": "existing_works"}, {"score": 0.00481495049065317, "phrase": "low-cost_index"}, {"score": 0.00458940888106061, "phrase": "supergraph_queries"}, {"score": 0.004081385289516914, "phrase": "query_graph"}, {"score": 0.0038079353103469865, "phrase": "filtering-and-verification_process"}, {"score": 0.0036100762867678415, "phrase": "significant_overheads"}, {"score": 0.0035527409334589317, "phrase": "index_construction"}, {"score": 0.0032272929113113203, "phrase": "efficient_query_processing"}, {"score": 0.0030923570058383355, "phrase": "simple_but_fast_method"}, {"score": 0.002869613770219469, "phrase": "costly_operation"}, {"score": 0.002824005136794786, "phrase": "graph_mining"}, {"score": 0.002662871928330334, "phrase": "direct_inclusion"}, {"score": 0.0026345758986796703, "phrase": "partial_query_answers"}, {"score": 0.0025514745448798385, "phrase": "candidate_verification"}, {"score": 0.0021735890994119757, "phrase": "query_processing"}, {"score": 0.0021049977753042253, "phrase": "low_maintenance_cost"}], "paper_keywords": ["Graph query processing", " Graph indexing", " Supergraph queries"], "paper_abstract": "This paper studies the problem of processing supergraph queries, that is, given a database containing a set of graphs, find all the graphs in the database of which the query graph is a supergraph. Existing works usually construct an index and performs a filtering-and-verification process, which still requires many subgraph isomorphism testings. There are also significant overheads in both index construction and maintenance. In this paper, we design a graph querying system that achieves both fast indexing and efficient query processing. The index is constructed by a simple but fast method of extracting the commonality among the graphs, which does not involve any costly operation such as graph mining. Our query processing has two key techniques, direct inclusion and filtering. Direct inclusion allows partial query answers to be included directly without candidate verification. Our filtering technique further reduces the candidate set by operating on a much smaller projected database. Experimental results show that our method is significantly more efficient than the existing works in both indexing and query processing, and our index has a low maintenance cost.", "paper_title": "Fast graph query processing with a low-cost index", "paper_id": "WOS:000292928500003"}