{"auto_keywords": [{"score": 0.04885877600670675, "phrase": "domain-specific_language"}, {"score": 0.04559173958405984, "phrase": "different_processor_types"}, {"score": 0.00481495049065317, "phrase": "performance-portable_description"}, {"score": 0.004765482708043842, "phrase": "geometric_multigrid_algorithms"}, {"score": 0.004644014990871423, "phrase": "high_performance_computing"}, {"score": 0.004231699728933577, "phrase": "single_node"}, {"score": 0.004123781267600542, "phrase": "graphics_processing_units"}, {"score": 0.003757480190200645, "phrase": "domain-specific_approach"}, {"score": 0.0035866734383189396, "phrase": "low-level_cuda_and_opencl_code"}, {"score": 0.0034951469511975346, "phrase": "high-level_description"}, {"score": 0.0032510690712452147, "phrase": "hand-tuned_code"}, {"score": 0.0032178613575263412, "phrase": "gpu"}, {"score": 0.0031517718740204322, "phrase": "dsl"}, {"score": 0.0029467742734417255, "phrase": "grid_hierarchies"}, {"score": 0.0028715299874549245, "phrase": "different_cycle_types"}, {"score": 0.002841971477743441, "phrase": "language_constructs"}, {"score": 0.0027126684113045756, "phrase": "different_resolutions"}, {"score": 0.0026297428083782875, "phrase": "image_processing_algorithms"}, {"score": 0.00257586859792573, "phrase": "image_pyramids"}, {"score": 0.0025230952890994236, "phrase": "multigrid_methods"}, {"score": 0.0024842242921857705, "phrase": "stencil_domain"}, {"score": 0.002358917661465133, "phrase": "proposed_approach"}, {"score": 0.002310578855290687, "phrase": "efficient_stencil_code_implementations"}, {"score": 0.0022399174232611853, "phrase": "similar_performance"}, {"score": 0.0022053994402287925, "phrase": "hand-tuned_codes"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Multigrid", " Multiresolution", " Image pyramid", " Domain-specific language", " Stencil codes", " Code generation", " GPU", " CUDA", " OpenCL"], "paper_abstract": "High Performance Computing (HPC) systems are nowadays more and more heterogeneous. Different processor types can be found on a single node including accelerators such as Graphics Processing Units (GPUs). To cope with the challenge of programming such complex systems, this work presents a domain-specific approach to automatically generate code tailored to different processor types. Low-level CUDA and OpenCL code is generated from a high-level description of an algorithm specified in a Domain-Specific Language (DSL) instead of writing hand-tuned code for GPU accelerators. The DSL is part of the Heterogeneous Image Processing Acceleration (HIPA(cc)) framework and was extended in this work to handle grid hierarchies in order to model different cycle types. Language constructs are introduced to process and represent data at different resolutions. This allows to describe image processing algorithms that work on image pyramids as well as multigrid methods in the stencil domain. By decoupling the algorithm from its schedule, the proposed approach allows to generate efficient stencil code implementations. Our results show that similar performance compared to hand-tuned codes can be achieved. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Towards a performance-portable description of geometric multigrid algorithms using a domain-specific language", "paper_id": "WOS:000345733300003"}