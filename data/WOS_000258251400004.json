{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "adaptive_extensible_processor"}, {"score": 0.044869792207088685, "phrase": "custom_functional_units"}, {"score": 0.023240843342654582, "phrase": "configuration_memory"}, {"score": 0.0046253989970108985, "phrase": "embedded_processors"}, {"score": 0.0045464538515249085, "phrase": "effective_technique"}, {"score": 0.0044688500725247726, "phrase": "critical_computation_subgraphs"}, {"score": 0.004417848254181138, "phrase": "application-specific_instruction_set_extensions"}, {"score": 0.0040767015025213625, "phrase": "immense_cost"}, {"score": 0.004007083686875716, "phrase": "long_times"}, {"score": 0.0038936755823756226, "phrase": "new_processor"}, {"score": 0.003511246498068952, "phrase": "custom_instructions"}, {"score": 0.0031121406603482112, "phrase": "reconfigurable_matrix"}, {"score": 0.00307657476125683, "phrase": "functional_units"}, {"score": 0.0029722900280316216, "phrase": "systematic_quantitative_approach"}, {"score": 0.0028715299874549245, "phrase": "appropriate_structure"}, {"score": 0.002822434555587263, "phrase": "reconfigurable_functional_unit"}, {"score": 0.002680114113899346, "phrase": "integrated_framework"}, {"score": 0.0026342827320931937, "phrase": "mappable_cis"}, {"score": 0.0025892330566358503, "phrase": "rfu."}, {"score": 0.002375253757224999, "phrase": "average_improvement"}, {"score": 0.0022424956516376073, "phrase": "order_risc_processor"}, {"score": 0.0021049977753042253, "phrase": "small_cis"}], "paper_keywords": ["reconfigurable functional unit", " extensible processor", " custom instruction", " temporal partitioning", " similarity detection", " profiling"], "paper_abstract": "To improve the performance of embedded processors, an effective technique is collapsing critical computation subgraphs as application-specific instruction set extensions and executing them on custom functional units. The problem with this approach is the immense cost and the long times required to design a new processor for each application. As a solution to this issue, we propose an adaptive extensible processor in which custom instructions (CIs) are generated and added after chip-fabrication. To support this feature, custom functional units are replaced by a reconfigurable matrix of functional units (FUs). A systematic quantitative approach is used for determining the appropriate structure of the reconfigurable functional unit (RFU). We also introduce an integrated framework for generating mappable CIs on the RFU. Using this architecture, performance is improved by up to 1.33, with an average improvement of 1.16, compared to a 4-issue in-order RISC processor. By partitioning the configuration memory, detecting similar/subset CIs and merging small CIs, the size of the configuration memory is reduced by 40%.", "paper_title": "An architecture framework for an adaptive extensible processor", "paper_id": "WOS:000258251400004"}