{"auto_keywords": [{"score": 0.04924054324953067, "phrase": "conceptual_dependence"}, {"score": 0.015719716506582538, "phrase": "adaptive_information_systems"}, {"score": 0.013999520121464907, "phrase": "entity_types"}, {"score": 0.009329039454583691, "phrase": "ais"}, {"score": 0.00892749404651073, "phrase": "archetypal_categories"}, {"score": 0.004678642063446987, "phrase": "software_applications'_internal_structures"}, {"score": 0.004556230694068238, "phrase": "information_system_design"}, {"score": 0.0044863018460183784, "phrase": "unintended_negative_consequences"}, {"score": 0.004466519142879166, "phrase": "system_inflexibility"}, {"score": 0.0043496334756644535, "phrase": "database_tables"}, {"score": 0.004124920849728372, "phrase": "software_components"}, {"score": 0.004070573090297285, "phrase": "e-commerce_system"}, {"score": 0.004008068083599195, "phrase": "product_types"}, {"score": 0.003946519058822334, "phrase": "associated_code"}, {"score": 0.003911771812701971, "phrase": "stored_procedures"}, {"score": 0.0035806300393050926, "phrase": "new_entity_type"}, {"score": 0.0035569510625806226, "phrase": "order_lines"}, {"score": 0.003533428121425737, "phrase": "existing_structures"}, {"score": 0.0034714553759044664, "phrase": "large_systems"}, {"score": 0.003358161300929604, "phrase": "schema_change"}, {"score": 0.0032774280543222843, "phrase": "high_cost"}, {"score": 0.0032629585038738856, "phrase": "software_maintenance"}, {"score": 0.003170446089847923, "phrase": "alternative_design_strategies"}, {"score": 0.003114819780703495, "phrase": "alternative_design_approach"}, {"score": 0.0030737394983300944, "phrase": "conceptual_independence"}, {"score": 0.002966813657237851, "phrase": "internal_structures"}, {"score": 0.0029406667906423773, "phrase": "information_systems"}, {"score": 0.0029212075318449616, "phrase": "domain-specific_entity_types"}, {"score": 0.0028890603352364273, "phrase": "conceptual_models"}, {"score": 0.0028133389980189694, "phrase": "soft_schemas"}, {"score": 0.002751751956416832, "phrase": "end-user_conceptual_modelling_tool"}, {"score": 0.0026677824113684654, "phrase": "adaptive_data_model"}, {"score": 0.002592100731070259, "phrase": "domain-specific_run_time_behaviour"}, {"score": 0.0025409639091476363, "phrase": "domain-specific_software_structure"}, {"score": 0.002490833392316362, "phrase": "conventionally-designed_applications"}, {"score": 0.002436289099444074, "phrase": "wide_variety"}, {"score": 0.0023882187608081037, "phrase": "significantly_reduced_maintenance_costs"}, {"score": 0.002361923085067681, "phrase": "increased_scope"}, {"score": 0.0023153166541790213, "phrase": "end_users"}, {"score": 0.0022696277881969896, "phrase": "ais_architecture"}, {"score": 0.0022297712188622293, "phrase": "future_research"}, {"score": 0.0021857667493036786, "phrase": "fully-featured_ais."}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Conceptual modelling", " Conceptual independence", " Data independence", " Schema evolution", " Software design", " Adaptive information systems"], "paper_abstract": "This paper examines the problem of conceptual dependence, the coupling of software applications' internal structures and logic with their underlying conceptual models. Although conceptual dependence is almost universal in information system design, it produces a range of unintended negative consequences including system inflexibility and increased maintenance costs. Many information systems contain components, such as database tables and classes, whose design reflects the entity types and relationships in underlying, domain-oriented conceptual models. When the models change, work is involved in altering the software components. For example, an e-commerce system might include tables and classes representing product types, customers and orders, with associated code in methods, stored procedures and other scripts. The structure of the entity types and their relationships will be implicit in the tables, classes and code, coupling the system to its conceptual model. Any change to the model (such as the introduction of a new entity type, representing order lines) invalidates existing structures and code, causing rework. In large systems, this rework can be time-consuming and expensive. Research shows that schema change is common, and that it contributes significantly to the high cost of software maintenance. We argue that much of the cost may be avoidable if alternative design strategies are used. The paper describes an alternative design approach based on the principle of conceptual independence, which can be used to produce adaptive information systems (AIS). It decouples the internal structures and logic of information systems from the domain-specific entity types and relationships in the conceptual models they implement. An architecture for AIS is presented which includes soft schemas (conceptual models stored as data), an end-user conceptual modelling tool, a set of archetypal categories (predefined semantic categories), and an adaptive data model which allows data to be stored without conceptual dependence. The archetypal categories allow domain-specific run time behaviour to be provided, despite the absence of domain-specific software structure and logic. An advantage of AIS over conventionally-designed applications is that each AIS can be used in a wide variety of domains. AIS offer the prospect of significantly reduced maintenance costs, as well as increased scope for the development and modification of systems by end users. Work to date on implementation of the AIS architecture is discussed, and an agenda for future research is outlined including development and evaluation of a fully-featured AIS. The paper discusses challenges to be overcome and barriers to adoption. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Conceptual independence: A design principle for the construction of adaptive information systems", "paper_id": "WOS:000344201100003"}