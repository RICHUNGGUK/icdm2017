{"auto_keywords": [{"score": 0.047424185998726213, "phrase": "discrete_element_code"}, {"score": 0.04656949560443595, "phrase": "convex_polyhedra"}, {"score": 0.004819126641642238, "phrase": "optimization"}, {"score": 0.00369022262431101, "phrase": "multi-core_machines"}, {"score": 0.0035525230119401153, "phrase": "novel_variant"}, {"score": 0.003355515315708125, "phrase": "-sweep_neighborhood_algorithm"}, {"score": 0.0031693980719538287, "phrase": "whole_code"}, {"score": 0.002854505078275351, "phrase": "different_architectures"}, {"score": 0.0028006988338192375, "phrase": "different_compilers"}, {"score": 0.0027479040199262393, "phrase": "performance_measurement_tools"}, {"score": 0.0025954008219792337, "phrase": "particle_number"}, {"score": 0.0021049977753042253, "phrase": "respectable_parallelization_speedups"}], "paper_keywords": ["OpenMP", " DEM", " polyhedra", " INTEL", " AMD"], "paper_abstract": "We report our experiences with the optimization and parallelization of a discrete element code for convex polyhedra on multi-core machines and introduce a novel variant of the sort-and-sweep neighborhood algorithm. While in theory the whole code in itself parallelizes ideally, in practice the results on different architectures with different compilers and performance measurement tools depend very much on the particle number and optimization of the code. After difficulties with the interpretation of the data for speedup and efficiency are overcome, respectable parallelization speedups could be obtained.", "paper_title": "OPTIMIZATION AND OPENMP PARALLELIZATION OF A DISCRETE ELEMENT CODE FOR CONVEX POLYHEDRA ON MULTI-CORE MACHINES", "paper_id": "WOS:000316813000001"}