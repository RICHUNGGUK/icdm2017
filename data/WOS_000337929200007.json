{"auto_keywords": [{"score": 0.031667157479978114, "phrase": "coincident_faults"}, {"score": 0.015161379894705522, "phrase": "software_diversity"}, {"score": 0.008713768692145006, "phrase": "human_error_diversity"}, {"score": 0.008494454907458787, "phrase": "fault_diversity"}, {"score": 0.005920170385496809, "phrase": "cognitive_styles"}, {"score": 0.0058770931249112115, "phrase": "personality_traits"}, {"score": 0.004558012799538011, "phrase": "fault_tolerance"}, {"score": 0.004524801966077539, "phrase": "n-version_software_systems"}, {"score": 0.004362326712297089, "phrase": "software_faults"}, {"score": 0.0043305354943056875, "phrase": "human_error"}, {"score": 0.004025040955430234, "phrase": "software_fault_diversity"}, {"score": 0.003981106369547929, "phrase": "human_error_mechanisms"}, {"score": 0.003937649447496154, "phrase": "literature_review"}, {"score": 0.003754731210715724, "phrase": "human_error-proneness"}, {"score": 0.003646399625591736, "phrase": "conceptual_model"}, {"score": 0.003351987298847214, "phrase": "programming_contest"}, {"score": 0.003161271802988128, "phrase": "identical_problem"}, {"score": 0.003081272473508291, "phrase": "code_inspection"}, {"score": 0.002853183476661506, "phrase": "whole_model"}, {"score": 0.0028014064098604093, "phrase": "program_measurements"}, {"score": 0.002730488910300527, "phrase": "fault_density"}, {"score": 0.0026711292765356064, "phrase": "causal_relations"}, {"score": 0.0026516301310428756, "phrase": "performance_levels"}, {"score": 0.0025562434609873335, "phrase": "skill-based_performance_level"}, {"score": 0.0024915167458844914, "phrase": "rule-based_performances"}, {"score": 0.0024642796422450755, "phrase": "high_probability"}, {"score": 0.0023843376332011936, "phrase": "knowledge-based_performances"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software diversity", " Human error", " N-version programming", " Cognitive style", " Personality trait"], "paper_abstract": "Software diversity is known to improve fault tolerance in N-version software systems by independent development. As the leading cause of software faults, human error is considered an important factor in diversity seeking. However, there is little scientific research focusing on how to seek software fault diversity based on human error mechanisms. A literature review was conducted to extract factors that may differentiate people with respect to human error-proneness. In addition, we constructed a conceptual model of the links between human error diversity and software diversity. An experiment was designed to validate the hypotheses, in the form of a programming contest, accompanied by a survey of cognitive styles and personality traits. One hundred ninety-two programs were submitted for the identical problem, and 70 surveys were collected. Code inspection revealed 23 faults, of which 10 were coincident faults. The results show that personality traits seems not effective predictors for fault diversity as a whole model, whereas cognitive styles and program measurements moderately account for the variation of fault density. The results also show causal relations between performance levels and coincident faults; coincident faults are unlikely to occur at skill-based performance level; the coincident faults introduced in rule-based performances show a high probability of occurrence, and the coincident faults introduced in knowledge-based performances are shaped by the content and formats of the task itself. Based on these results, we have proposed a model to seek software diversity and prevent coincident faults. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "The links between human error diversity and software diversity: Implications for fault diversity seeking", "paper_id": "WOS:000337929200007"}