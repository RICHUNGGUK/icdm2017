{"auto_keywords": [{"score": 0.04966229511350135, "phrase": "time_petri_nets"}, {"score": 0.00481495049065317, "phrase": "periodic_transition_deadlines"}, {"score": 0.004731492618963217, "phrase": "net_unfoldings"}, {"score": 0.004568871736067739, "phrase": "automatic_generation"}, {"score": 0.004529093447865156, "phrase": "supervisory_controllers"}, {"score": 0.004149792080414689, "phrase": "prespecified_delay"}, {"score": 0.004042295865725559, "phrase": "previous_execution"}, {"score": 0.0038355531523269217, "phrase": "plant_execution"}, {"score": 0.0037855348847339655, "phrase": "resulting_controllers"}, {"score": 0.003703611021999795, "phrase": "variable_task_durations"}, {"score": 0.0035605741849764187, "phrase": "operation_schedules"}, {"score": 0.0035141291835319682, "phrase": "controlled_plant"}, {"score": 0.0032336801561165113, "phrase": "target_transition"}, {"score": 0.0030816306874747426, "phrase": "previous_firing"}, {"score": 0.002923876831533028, "phrase": "transition_latency"}, {"score": 0.0028480459059007468, "phrase": "petri_net_transition_t"}, {"score": 0.0028108690791085536, "phrase": "time_interval"}, {"score": 0.002690406375639144, "phrase": "target_transition_td"}, {"score": 0.0021896891011033105, "phrase": "transition_latencies"}, {"score": 0.0021049977753042253, "phrase": "maintenance_system"}], "paper_keywords": ["Petri nets", " production control scheduling", " supervisory-control"], "paper_abstract": "We define a method for the automatic generation of supervisory controllers that force a plant to perform a given operation by a given deadline. The operation must be executed by a prespecified delay. with respect to the previous execution of the operation. Although our supervisor generation occurs offline with respect to plant execution, the resulting controllers automatically take into account variable task durations in an effort to increase the flexibility of operation schedules in the controlled plant. We model both the controlled plant and control supervisors as time Petri nets. In this setting, our control supervisors must force a target transition t(d) to fire within. time units since the previous firing of td. Our supervisor generation is based on the concept of a transition latency. The latency of a Petri net transition t is the time interval during which t must be disabled in order for target transition td to fire by its deadline. If a transition t that may delay the firing of td has latency l(t), then t must be disabled at least l(t) time units before the expiration of the deadline on td. In this paper, we discuss in detail two algorithms for generating transition latencies, and we show an application to a maintenance system.", "paper_title": "Enforcing Periodic Transition Deadlines in Time Petri Nets With Net Unfoldings", "paper_id": "WOS:000289843500011"}