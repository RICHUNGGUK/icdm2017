{"auto_keywords": [{"score": 0.030840627566015025, "phrase": "design_principle"}, {"score": 0.00481495049065317, "phrase": "miind._miind"}, {"score": 0.00470862827326028, "phrase": "neural_dynamics"}, {"score": 0.004519736937243476, "phrase": "development_time"}, {"score": 0.00445293569103488, "phrase": "cognitive_neuroscience"}, {"score": 0.004338390136272005, "phrase": "reusable_code_modules"}, {"score": 0.0039674831861175935, "phrase": "specific_modelling_philosophy"}, {"score": 0.0038798015183611275, "phrase": "lowest_level"}, {"score": 0.0037518852820756323, "phrase": "sparse_networks"}, {"score": 0.0036281710561308377, "phrase": "sparse_random_networks"}, {"score": 0.003508521802236789, "phrase": "sparse_regular_networks"}, {"score": 0.0034824716857663114, "phrase": "filter-like_operators"}, {"score": 0.0032686865485199806, "phrase": "generic_framework"}, {"score": 0.003232341244892437, "phrase": "network_processes"}, {"score": 0.003102488033561956, "phrase": "wilson-cowan"}, {"score": 0.003079494180213215, "phrase": "ornstein-uhlenbeck"}, {"score": 0.0029889584492584073, "phrase": "leaky-integrate-and-fire_neurons"}, {"score": 0.002956793954815959, "phrase": "poisson"}, {"score": 0.002784540221128404, "phrase": "originally_simple_model"}, {"score": 0.002603758927691463, "phrase": "existing_model"}, {"score": 0.0025272158996086378, "phrase": "main_uses"}, {"score": 0.0024346858809238766, "phrase": "neural_models"}, {"score": 0.00241658945942583, "phrase": "visual_attention"}, {"score": 0.002319431279824863, "phrase": "biologically-inspired_models"}, {"score": 0.0022596456090325494, "phrase": "hmax"}, {"score": 0.0022428442879034614, "phrase": "recent_successors"}, {"score": 0.0022096205841489786, "phrase": "long_run"}, {"score": 0.0021446391766277817, "phrase": "suitably_adapted_neuronal_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "artificial_models"}], "paper_keywords": ["Neuronal modelling", " C plus", " Framework", " Population density methods", " Python"], "paper_abstract": "MIIND (Multiple Interacting Instantiations of Neural Dynamics) is a highly modular multi-level C++ framework, that aims to shorten the development time for models in Cognitive Neuroscience (CNS). It offers reusable code modules (libraries of classes and functions) aimed at solving problems that occur repeatedly in modelling, but tries not to impose a specific modelling philosophy or methodology. At the lowest level, it offers support for the implementation of sparse networks. For example, the library SparseImplementationLib supports sparse random networks and the library LayerMappingLib can be used for sparse regular networks of filter-like operators. The library DynamicLib, which builds on top of the library SparseImplementationLib, offers a generic framework for simulating network processes. Presently, several specific network process implementations are provided in MIIND: the Wilson-Cowan and Ornstein-Uhlenbeck type, and population density techniques for leaky-integrate-and-fire neurons driven by Poisson input. A design principle of WIND is to support detailing: the refinement of an originally simple model into a form where more biological detail is included. Another design principle is extensibility: the reuse of an existing model in a larger, more extended one. One of the main uses of WIND so far has been the instantiation of neural models of visual attention. Recently, we have added a library for implementing biologically-inspired models of artificial vision, such as HMAX and recent successors. In the long run we hope to be able to apply suitably adapted neuronal mechanisms of attention to these artificial models. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "The state of MIIND", "paper_id": "WOS:000261028300013"}