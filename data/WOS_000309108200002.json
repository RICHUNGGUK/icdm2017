{"auto_keywords": [{"score": 0.031461310706329015, "phrase": "shared_cache"}, {"score": 0.00481495049065317, "phrase": "concurrent_programs"}, {"score": 0.004749106104067268, "phrase": "shared_cache_multi-cores"}, {"score": 0.004620093797504386, "phrase": "important_source"}, {"score": 0.004577869668211548, "phrase": "timing_unpredictability"}, {"score": 0.004473982381245469, "phrase": "real-time_embedded_software"}, {"score": 0.004332471656145115, "phrase": "memory_accesses"}, {"score": 0.004292867388504287, "phrase": "multiprocessing"}, {"score": 0.004176194589991187, "phrase": "performance_enhancement"}, {"score": 0.004044064541716598, "phrase": "concurrent_execution"}, {"score": 0.003916098498242888, "phrase": "shared_memory"}, {"score": 0.0038802832668554457, "phrase": "different_processing_cores"}, {"score": 0.0038447943243941685, "phrase": "memory_access_behavior"}, {"score": 0.0035395987202335223, "phrase": "timing_analysis_method"}, {"score": 0.0035072146967082083, "phrase": "concurrent_software"}, {"score": 0.0034118234596993836, "phrase": "shared_instruction_cache"}, {"score": 0.0031991799574455555, "phrase": "lifetime_estimates"}, {"score": 0.003097865379563127, "phrase": "multiple_cores"}, {"score": 0.0030135741897058844, "phrase": "potential_conflicts"}, {"score": 0.002945081009084692, "phrase": "possible_conflicts"}, {"score": 0.00290473242917264, "phrase": "overlapping_task_lifetimes"}, {"score": 0.002825681384008326, "phrase": "hit-miss_classification"}, {"score": 0.002711109302199029, "phrase": "safe_execution_time_bounds"}, {"score": 0.002518746501941657, "phrase": "real-world_embedded_application"}, {"score": 0.0023834640793589435, "phrase": "wcrt."}, {"score": 0.0023400004981080818, "phrase": "beneficial_memory_blocks"}, {"score": 0.0022867843993941866, "phrase": "wcet"}, {"score": 0.0021739117830106365, "phrase": "better_wcrt._experiments"}, {"score": 0.0021441057555396013, "phrase": "significant_wcrt_reduction"}, {"score": 0.0021049977753042253, "phrase": "cache_locking"}], "paper_keywords": ["WCET analysis", " Multi-core", " Shared cache", " Cache locking"], "paper_abstract": "Memory accesses form an important source of timing unpredictability. Timing analysis of real-time embedded software thus requires bounding the time for memory accesses. Multiprocessing, a popular approach for performance enhancement, opens up the opportunity for concurrent execution. However due to contention for any shared memory by different processing cores, memory access behavior becomes more unpredictable, and hence harder to analyze. In this paper, we develop a timing analysis method for concurrent software running on multi-cores with a shared instruction cache. Communication across tasks is by message passing. Our method progressively improves the lifetime estimates of tasks that execute concurrently on multiple cores, in order to estimate potential conflicts in the shared cache. Possible conflicts arising from overlapping task lifetimes are accounted for in the hit-miss classification of accesses to the shared cache, to provide safe execution time bounds. We show that our method produces lower worst-case response time (WCRT) estimates than existing shared-cache analysis on a real-world embedded application. Furthermore, we also exploit instruction cache locking to improve WCRT. By locking some beneficial memory blocks into L1 cache, the WCET of the tasks and L2 cache conflicts are reduced, resulting in better WCRT. Experiments demonstrate that significant WCRT reduction is achieved through cache locking.", "paper_title": "Timing analysis of concurrent programs running on shared cache multi-cores", "paper_id": "WOS:000309108200002"}