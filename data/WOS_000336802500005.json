{"auto_keywords": [{"score": 0.03197908885946712, "phrase": "spoc"}, {"score": 0.015719713042815744, "phrase": "gpgpu_programming"}, {"score": 0.013986392387975484, "phrase": "high_performance"}, {"score": 0.004491970050862321, "phrase": "highly_parallel_computing_units"}, {"score": 0.004219774794569897, "phrase": "heterogenous_systems"}, {"score": 0.004132743580000062, "phrase": "complex_designs"}, {"score": 0.0040757181942937875, "phrase": "multiple_paradigms"}, {"score": 0.0040194764936614565, "phrase": "programming_languages"}, {"score": 0.003909301559145041, "phrase": "hardware_architecture"}, {"score": 0.0035468507553681034, "phrase": "high-level_ocaml_programming_language"}, {"score": 0.00342568771304873, "phrase": "spoc_library"}, {"score": 0.003308649946463136, "phrase": "gpgpu_subprograms"}, {"score": 0.0031955979242589494, "phrase": "data_transfers"}, {"score": 0.002980916123365584, "phrase": "gpgpu_kernel"}, {"score": 0.002879029968532794, "phrase": "common_low-level_extensions"}, {"score": 0.0028195727965553367, "phrase": "cuda_and_opencl_frameworks"}, {"score": 0.002704306866425829, "phrase": "embedded_dsl"}, {"score": 0.0026118503041971976, "phrase": "simple_benchmarks"}, {"score": 0.0025225467103906314, "phrase": "real_world_hpc_software"}, {"score": 0.002241087008892355, "phrase": "better_abstractions"}, {"score": 0.0021049977753042253, "phrase": "parallel_skeletons"}], "paper_keywords": ["GPGPU", " DSL", " OCaml", " Parallel skeletons", " Parallel abstractions"], "paper_abstract": "General purpose (GP)GPU programming demands to couple highly parallel computing units with classic CPUs to obtain a high performance. Heterogenous systems lead to complex designs combining multiple paradigms and programming languages to manage each hardware architecture. In this paper, we present tools to harness GPGPU programming through the high-level OCaml programming language. We describe the SPOC library that allows to handle GPGPU subprograms (kernels) and data transfers between devices. We then present how SPOC expresses GPGPU kernel: through interoperability with common low-level extensions (from Cuda and OpenCL frameworks) but also via an embedded DSL for OCaml. Using simple benchmarks as well as a real world HPC software, we show that SPOC can offer a high performance while efficiently easing development. To allow better abstractions over tasks and data, we introduce some parallel skeletons built upon SPOC as well as composition constructs over those skeletons.", "paper_title": "Efficient Abstractions for GPGPU Programming", "paper_id": "WOS:000336802500005"}