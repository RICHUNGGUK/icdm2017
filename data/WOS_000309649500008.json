{"auto_keywords": [{"score": 0.047441903486245926, "phrase": "software_evolution"}, {"score": 0.03733329838869367, "phrase": "software_metrics"}, {"score": 0.03672507547226283, "phrase": "software_structure"}, {"score": 0.00481495049065317, "phrase": "metrics-based_software_evolution"}, {"score": 0.004797762201878454, "phrase": "analysis"}, {"score": 0.004654210559456924, "phrase": "different_aspects"}, {"score": 0.0046018264570209765, "phrase": "software_quality"}, {"score": 0.00447341965028879, "phrase": "valuable_information"}, {"score": 0.004373267443572639, "phrase": "project_managers"}, {"score": 0.004062937864702115, "phrase": "internal_structure"}, {"score": 0.0039050245929822354, "phrase": "software's_quality"}, {"score": 0.003817548980308163, "phrase": "heterogeneous_systems"}, {"score": 0.0037532257703888315, "phrase": "difficult_task"}, {"score": 0.0036073064072936626, "phrase": "programming_language_independent_framework"}, {"score": 0.003447451122274614, "phrase": "software_development"}, {"score": 0.0032208091960514128, "phrase": "smiile_tool"}, {"score": 0.0028919522313933525, "phrase": "central_repository"}, {"score": 0.002859345731792013, "phrase": "enriched_concrete_syntax_tree"}, {"score": 0.0027794243746094905, "phrase": "universal_source_code_representation"}, {"score": 0.002656158309155626, "phrase": "case_study"}, {"score": 0.002495521662819317, "phrase": "consistent_support"}, {"score": 0.0024120247307686084, "phrase": "change_analysis"}, {"score": 0.0023848164282879885, "phrase": "quality_control"}, {"score": 0.0022278779300543548, "phrase": "software_projects"}, {"score": 0.0021049977753042253, "phrase": "diverse_programming_languages"}], "paper_keywords": ["Software evolution", " software development", " software quality", " software structure", " software metrics", " syntax tree"], "paper_abstract": "Knowledge about different aspects of software quality during software evolution can be valuable information for developers and project managers. It helps to reduce the number of defects and improves the internal structure of software. However, determining software's quality and structure in heterogeneous systems is a difficult task. In this paper, a programming language independent framework for evaluating software metrics and analyzing software structure during software development and its evolution will be presented. The framework consists of the SMIILE tool for calculation of software metrics, extended with an analysis of software structure. The data are stored in a central repository via enriched Concrete Syntax Tree (eCST) for universal source code representation. The framework is demonstrated in a case study. The development of such a framework is a step forward to consistent support for software evolution by providing a change analysis and quality control. The significance of this consistency is growing today, when software projects are more complex, consisting of components developed in diverse programming languages.", "paper_title": "A Programming Language Independent Framework for Metrics-based Software Evolution and Analysis", "paper_id": "WOS:000309649500008"}