{"auto_keywords": [{"score": 0.028198068679611915, "phrase": "mi"}, {"score": 0.00481495049065317, "phrase": "software_quality_estimation"}, {"score": 0.004768649568826951, "phrase": "object-oriented_systems"}, {"score": 0.004205570965859848, "phrase": "inheritance_relation"}, {"score": 0.0036908381347418805, "phrase": "learning_task"}, {"score": 0.003516558537200823, "phrase": "unseen_bags"}, {"score": 0.0033667304423940893, "phrase": "untested_class_hierarchies"}, {"score": 0.0033182152378613767, "phrase": "fault-prone_class_hierarchy"}, {"score": 0.0030858947334838145, "phrase": "modification_records"}, {"score": 0.002997572637726648, "phrase": "previous_project_releases"}, {"score": 0.002968695624366393, "phrase": "oo_software_metrics"}, {"score": 0.002883718207958817, "phrase": "untested_class_hierarchy"}, {"score": 0.002760778494680823, "phrase": "five_datasets"}, {"score": 0.002707829887747594, "phrase": "industrial_software_project"}, {"score": 0.002542642270762272, "phrase": "kernel_method"}, {"score": 0.0025059724686541263, "phrase": "dedicated_mi-kernel"}, {"score": 0.0023303871145705954, "phrase": "class_hierarchies"}, {"score": 0.0021254913611527455, "phrase": "competitive_performance"}], "paper_keywords": ["Object-oriented (OO) software", " Multi-instance (MI) learning", " Software quality estimation", " Kernel methods"], "paper_abstract": "We investigate a problem of object-oriented (OO) software quality estimation from a multi-instance (MI) perspective. In detail, each set of classes that have an inheritance relation, named 'class hierarchy', is regarded as a bag, while each class in the set is regarded as an instance. The learning task in this study is to estimate the label of unseen bags, i.e., the fault-proneness of untested class hierarchies. A fault-prone class hierarchy contains at least one fault-prone (negative) class, while a non-fault-prone (positive) one has no negative class. Based on the modification records (MRs) of the previous project releases and OO software metrics, the fault-proneness of an untested class hierarchy can be predicted. Several selected MI learning algorithms were evaluated on five datasets collected from an industrial software project. Among the MI learning algorithms investigated in the experiments, the kernel method using a dedicated MI-kernel was better than the others in accurately and correctly predicting the fault-proneness of the class hierarchies. In addition, when compared to a supervised support vector machine (SVM) algorithm, the MI-kernel method still had a competitive performance with much less cost.", "paper_title": "Multi-instance learning for software quality estimation in object-oriented systems: a case study", "paper_id": "WOS:000275537900006"}