{"auto_keywords": [{"score": 0.03394009994668228, "phrase": "fastvc_search"}, {"score": 0.00830422329001964, "phrase": "wolve"}, {"score": 0.00481495049065317, "phrase": "connection_games"}, {"score": 0.004613030303798181, "phrase": "havannah"}, {"score": 0.004392565073466714, "phrase": "cell_connection"}, {"score": 0.004260134699483774, "phrase": "computational_bottleneck"}, {"score": 0.0041825926310470616, "phrase": "automated_players"}, {"score": 0.003910106508089187, "phrase": "anshelevich's_h-search_algorithm"}, {"score": 0.002878140062594849, "phrase": "representative_set"}, {"score": 0.0027069560455629917, "phrase": "larger_set"}, {"score": 0.0025459275963373496, "phrase": "alpha-beta_player"}, {"score": 0.0024842242921857705, "phrase": "monte_carlo"}, {"score": 0.002130990020956999, "phrase": "mohex"}, {"score": 0.002105103864789212, "phrase": "solver"}], "paper_keywords": ["Connection games", " Hex", " H-Search", " virtual connection"], "paper_abstract": "For connection games such as Hex or Y or Havannah, finding guaranteed cell-to-cell connection strategies can be a computational bottleneck. In automated players and solvers, sets of such virtual connections are often found with Anshelevich's H-search algorithm: initialize trivial connections, and then repeatedly apply an AND-rule (for combining connections in series) and an OR-rule (for combining connections in parallel). We present FastVC Search, a new algorithm for finding such connections. FastVC Search is more effective than H-search when finding a representative set of connections quickly is more important than finding a larger set of connections slowly. We tested FastVC Search in an alpha-beta player Wolve, a Monte Carlo tree search player MoHex, and a proof number search implementation called Solver. It does not strengthen Wolve, but it significantly strengthens MoHex and Solver.", "paper_title": "Stronger Virtual Connections in Hex", "paper_id": "WOS:000356269500004"}