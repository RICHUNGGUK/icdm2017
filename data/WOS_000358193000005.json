{"auto_keywords": [{"score": 0.05007722337788516, "phrase": "implemented_access_control_policy"}, {"score": 0.04955677149559171, "phrase": "android_system_services"}, {"score": 0.039956708727325464, "phrase": "android"}, {"score": 0.0046340196745259694, "phrase": "static_checking"}, {"score": 0.004459857205489101, "phrase": "major_smartphone_platforms"}, {"score": 0.004130842663662047, "phrase": "google_play"}, {"score": 0.004063547375196532, "phrase": "increasing_functionality"}, {"score": 0.003953806321226277, "phrase": "new_risks"}, {"score": 0.003743102131902864, "phrase": "sophisticated_security_architecture"}, {"score": 0.003524227590204673, "phrase": "installation_time"}, {"score": 0.0034478392374444177, "phrase": "android_source_code"}, {"score": 0.0033363396054797044, "phrase": "security_community"}, {"score": 0.0032107911131811057, "phrase": "security_mechanisms"}, {"score": 0.0030562674358159945, "phrase": "completely_manual_code_review"}, {"score": 0.0029412271277166873, "phrase": "tool_support"}, {"score": 0.0027996401456881806, "phrase": "first_step"}, {"score": 0.002508867228980776, "phrase": "program_slicing"}, {"score": 0.002454432810862053, "phrase": "abstraction_phase"}, {"score": 0.002388043660169452, "phrase": "extracted_policy"}, {"score": 0.0022359278646792153, "phrase": "java_modeling_language"}, {"score": 0.002187402374176248, "phrase": "extended_static_checking"}, {"score": 0.0021049977753042253, "phrase": "core_system_services"}], "paper_keywords": ["Android", " Slicing", " Java Modeling Language", " Extended static checking"], "paper_abstract": "Android is one of the major smartphone platforms today. One reason for this success is that many interesting applications are made available through Google Play. The increasing functionality, however, entails new risks. To defend against attacks, Android provides a sophisticated security architecture based on permissions which must be granted to applications at installation time. Since the Android source code is publicly available, the security community has the chance to assess the security mechanisms of Android. Due to its large code body, a completely manual code review is tedious, and hence, tool support for this task is desirable. As a first step in this direction, we propose to extract the implemented access control policy from the code for Android system services with the help of program slicing. After this abstraction phase, we analyze the extracted policy against the documentation. For this purpose, we use the Java Modeling Language in conjunction with extended static checking. We applied this approach to core system services of Android 4.0.3 and identified some inconsistencies between the documentation and the implementation.", "paper_title": "Understanding the implemented access control policy of Android system services with slicing and extended static checking", "paper_id": "WOS:000358193000005"}