{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reverse_engineering"}, {"score": 0.004759635663291431, "phrase": "uml_sequence_diagrams"}, {"score": 0.0047049532961375, "phrase": "distributed_java_software"}, {"score": 0.004492406361795448, "phrase": "instrumentation_infrastructure"}, {"score": 0.004339293854115301, "phrase": "unified_modeling_language"}, {"score": 0.004289419884432487, "phrase": "sequence_diagrams"}, {"score": 0.004240116703465252, "phrase": "dynamic_analysis"}, {"score": 0.0036063061558261546, "phrase": "quality_assurance_purposes"}, {"score": 0.0033839745649214548, "phrase": "design_sequence_diagrams"}, {"score": 0.002861160152640875, "phrase": "size_constraints"}, {"score": 0.0027475383418803724, "phrase": "distribution_aspects"}, {"score": 0.0025336179740814905, "phrase": "consistency_rules"}, {"score": 0.002432971714608409, "phrase": "aspect-oriented_programming"}, {"score": 0.002349884235026956, "phrase": "effort_overhead"}, {"score": 0.0022960713730673494, "phrase": "source_code_instrumentation"}, {"score": 0.0022565201625076876, "phrase": "case_study"}, {"score": 0.0021049977753042253, "phrase": "concrete_example"}], "paper_keywords": ["UML", " sequence diagram", " reverse engineering", " distribution", " RMI", " AspectJ", " OCL"], "paper_abstract": "This paper proposes a methodology and instrumentation infrastructure toward the reverse engineering of UML ( Unified Modeling Language) sequence diagrams from dynamic analysis. One motivation is, of course, to help people understand the behavior of systems with no ( complete) documentation. However, such reverse-engineered dynamic models can also be used for quality assurance purposes. They can, for example, be compared with design sequence diagrams and the conformance of the implementation to the design can thus be verified. Furthermore, discrepancies can also suggest failures in meeting the specifications. Due to size constraints, this paper focuses on the distribution aspects of the methodology we propose. We formally define our approach using metamodels and consistency rules. The instrumentation is based on Aspect-Oriented Programming in order to alleviate the effort overhead usually associated with source code instrumentation. A case study is discussed to demonstrate the applicability of the approach on a concrete example.", "paper_title": "Toward the reverse engineering of UML sequence diagrams for distributed Java software", "paper_id": "WOS:000240774300003"}