{"auto_keywords": [{"score": 0.039353266334461345, "phrase": "spreadsheets"}, {"score": 0.036480295477136625, "phrase": "sql"}, {"score": 0.00481495049065317, "phrase": "relational_queries"}, {"score": 0.00441738161338662, "phrase": "data_processing"}, {"score": 0.004114641015648682, "phrase": "web_queries"}, {"score": 0.004011603024990615, "phrase": "external_sources"}, {"score": 0.003871653343842317, "phrase": "spreadsheet_paradigm"}, {"score": 0.0037746771370555546, "phrase": "sufficient_analysis"}, {"score": 0.00351582806482809, "phrase": "data_transformations"}, {"score": 0.0033759367489122716, "phrase": "spreadsheet_formulas"}, {"score": 0.003291336101694653, "phrase": "query_compiler"}, {"score": 0.0030655302236416502, "phrase": "null_values"}, {"score": 0.0030038988468808845, "phrase": "database_operations"}, {"score": 0.0026863605504566924, "phrase": "high-level_language"}, {"score": 0.002592523232809191, "phrase": "plain_vanilla_spreadsheet"}, {"score": 0.0024516267507109753, "phrase": "algorithms_one"}, {"score": 0.002214734873559146, "phrase": "non-constant_number"}, {"score": 0.0021739011207605142, "phrase": "breadth-first-search"}, {"score": 0.0021610255390991898, "phrase": "depth-first-search"}], "paper_keywords": ["Relational databases", " physical database design prototypes", " spreadsheets", " query languages"], "paper_abstract": "Spreadsheets are among the most commonly used applications for data management and analysis. They combine data processing with very diverse supplementary features: statistics, visualization, reporting, linear programming solvers, Web queries periodically downloading data from external sources, etc. However, the spreadsheet paradigm of computation still lacks sufficient analysis. In this article, we demonstrate that a spreadsheet can implement all data transformations definable in SQL, merely by utilizing spreadsheet formulas. We provide a query compiler, which translates any given SQL query into a worksheet of the same semantics, including NULL values. Thereby, database operations become available to the users who do not want to migrate to a database. They can define their queries using a high-level language and then get their execution plans in a plain vanilla spreadsheet. The functions available in spreadsheets impose limitations on the algorithms one can implement. In this paper, we offer O(n log(2) n) sorting spreadsheet, using a non-constant number of rows, and, surprisingly, Depth-First-Search and Breadth-First-Search on graphs.", "paper_title": "Translating Relational Queries into Spreadsheets", "paper_id": "WOS:000357692600021"}