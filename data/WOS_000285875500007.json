{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "embedded_systems_complexity"}, {"score": 0.0047588556219929756, "phrase": "aspect-oriented_model-driven_engineering"}, {"score": 0.0045143706249204905, "phrase": "platform_heterogeneity"}, {"score": 0.004461761855323898, "phrase": "code_quality"}, {"score": 0.004332894955218135, "phrase": "high-level_system_models"}, {"score": 0.0041102032028337366, "phrase": "model-driven_software_engineering_paradigm"}, {"score": 0.0039449104968131655, "phrase": "appropriate_models"}, {"score": 0.0038989120088094185, "phrase": "often_complex_systems"}, {"score": 0.0038534477978822133, "phrase": "modern_embedded_systems"}, {"score": 0.003742084495435749, "phrase": "multiple_functional_and_nonfunctional_concerns"}, {"score": 0.0036553070575015344, "phrase": "nonfunctional_concerns"}, {"score": 0.0033277936960179892, "phrase": "functional_concerns"}, {"score": 0.0032315723330399375, "phrase": "crosscutting_concerns"}, {"score": 0.0031565959573536194, "phrase": "adequate_platform-independent_models"}, {"score": 0.0030653094605910727, "phrase": "aspect-oriented_software_development"}, {"score": 0.0029766550209309127, "phrase": "concerns_technique"}, {"score": 0.002890557197908352, "phrase": "distinct_features"}, {"score": 0.0028568174308720167, "phrase": "minimal_overlap"}, {"score": 0.00249592321829865, "phrase": "embedded_systems_concerns"}, {"score": 0.0022854384756395116, "phrase": "model-driven_engineering"}, {"score": 0.002206290313627494, "phrase": "modularised_design"}, {"score": 0.0021550502873107654, "phrase": "automatic_transformations"}, {"score": 0.002129877319760485, "phrase": "composed_models"}, {"score": 0.0021049977753042253, "phrase": "source_code"}], "paper_keywords": ["Design", " Theory", " Model-Driven Engineering", " Aspect-Oriented Software Development", " Theme/UML", " Nonfunctional requirements", " separation of concerns", " model transformation", " code generation"], "paper_abstract": "Model-driven engineering addresses issues of platform heterogeneity and code quality through the use of high-level system models and subsequent automatic transformations. Adoption of the model-driven software engineering paradigm for embedded systems necessitates specification of appropriate models of often complex systems. Modern embedded systems are typically composed of multiple functional and nonfunctional concerns, with the nonfunctional concerns (e.g., timing and performance) typically affecting the design and implementation of the functional concerns. The presence of crosscutting concerns makes specification of adequate platform-independent models a significant challenge. Aspect-oriented software development is a separation of concerns technique that decomposes systems into distinct features with minimal overlap. In this article, we illustrate how Theme/UML, an aspect-oriented modeling approach, can be used to separate embedded systems concerns and reduce complexity in design. We also present Model-Driven Theme/UML, a toolset for model-driven engineering of embedded systems that supports modularised design with Theme/UML and automatic transformations to composed models and source code.", "paper_title": "Managing Embedded Systems Complexity with Aspect-Oriented Model-Driven Engineering", "paper_id": "WOS:000285875500007"}