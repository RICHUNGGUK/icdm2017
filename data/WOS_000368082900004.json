{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "bi-directional_tree_transformations"}, {"score": 0.0046079260641779755, "phrase": "novel_approach"}, {"score": 0.004547564208690591, "phrase": "well-known_view_update_problem"}, {"score": 0.004448705308279165, "phrase": "tree-structured_data"}, {"score": 0.004201571673071299, "phrase": "bi-directional_transformations"}, {"score": 0.004056334733843591, "phrase": "transformations-dubbed_lenses"}, {"score": 0.003985602342418578, "phrase": "\"concrete\"_tree"}, {"score": 0.0039333604469462356, "phrase": "simplified_\"abstract_view"}, {"score": 0.00376409764683147, "phrase": "modified_abstract_view"}, {"score": 0.003682207422331339, "phrase": "original_concrete_tree"}, {"score": 0.0036179751816682454, "phrase": "correspondingly_modified_concrete_tree"}, {"score": 0.0034319005131102495, "phrase": "strong_well-behavedness"}, {"score": 0.0033572130837348623, "phrase": "well-typed_lenses"}, {"score": 0.003284145698220425, "phrase": "natural_space"}, {"score": 0.003255364511414329, "phrase": "well-behaved_bi-directional_transformations"}, {"score": 0.00303398491761013, "phrase": "precise_connection"}, {"score": 0.002994178996584381, "phrase": "classical_theory"}, {"score": 0.002967931416941965, "phrase": "\"update_translation"}, {"score": 0.0029289895726382653, "phrase": "constant_complement"}, {"score": 0.0028151944356239952, "phrase": "semantic_framework"}, {"score": 0.002717750004930131, "phrase": "lens_combinators"}, {"score": 0.002555247330102505, "phrase": "familiar_constructs"}, {"score": 0.0025328377393370642, "phrase": "functional_programming"}, {"score": 0.0023708980662168525, "phrase": "novel_primitives"}, {"score": 0.0021049977753042253, "phrase": "bi-directional_list-processing_transformations"}], "paper_keywords": ["Languages", " Bi-directional programming", " Harmony", " XML", " lenses", " view update problem"], "paper_abstract": "We propose a novel approach to the well-known view update problem for the case of tree-structured data: a domain-specific programming language in which all expressions denote bi-directional transformations on trees. In one direction, these transformations-dubbed lenses-map a \"concrete\" tree into a simplified \"abstract view\"; in the other, they map a modified abstract view, together with the original concrete tree, to a correspondingly modified concrete tree. Our design emphasizes both robustness and ease of use, guaranteeing strong well-behavedness and totality properties for well-typed lenses. We identify a natural space of well-behaved bi-directional transformations over arbitrary structures, study definedness and continuity in this setting, and state a precise connection with the classical theory of \"update translation under a constant complement\" from databases. We then instantiate this semantic framework in the form of a collection of lens combinators that can be assembled to describe transformations on trees. These combinators include familiar constructs from functional programming (composition, mapping, projection, conditionals, recursion) together with some novel primitives for manipulating trees (splitting, pruning, merging, etc.). We illustrate the expressiveness of these combinators by developing a number of bi-directional list-processing transformations as derived forms.", "paper_title": "Combinators for Bi-Directional Tree Transformations A Linguistic Approach to the View Update Problem", "paper_id": "WOS:000368082900004"}