{"auto_keywords": [{"score": 0.048163992431376076, "phrase": "frequent_sequences"}, {"score": 0.046168409126539425, "phrase": "customer_sequences"}, {"score": 0.03768809919116057, "phrase": "thousand_yenaeuro_parts"}, {"score": 0.025845377263105488, "phrase": "customer_sequence"}, {"score": 0.00481495049065317, "phrase": "sequential_patterns"}, {"score": 0.004669845451682529, "phrase": "novel_algorithm"}, {"score": 0.004591120854640081, "phrase": "transaction_databases"}, {"score": 0.004103662938882996, "phrase": "user-specified_threshold"}, {"score": 0.004020740863986328, "phrase": "special_type"}, {"score": 0.003873027670786261, "phrase": "ordered_list"}, {"score": 0.003743439610143464, "phrase": "k_itemsets"}, {"score": 0.0036553070575015344, "phrase": "mining_frequent_k-sequences"}, {"score": 0.003380029058401904, "phrase": "two-phase_architecture"}, {"score": 0.003222687723450745, "phrase": "frequent_k-sequences"}, {"score": 0.0031254169757175257, "phrase": "efficient_frequent_k-sequence_mining"}, {"score": 0.0030310732341527168, "phrase": "unique_symbol"}, {"score": 0.002783643041818689, "phrase": "full_use"}, {"score": 0.0026721361773711315, "phrase": "smaller_size"}, {"score": 0.002538996868327341, "phrase": "transformed_database"}, {"score": 0.002453934333239467, "phrase": "compact_representation"}, {"score": 0.0023636455694730787, "phrase": "distinct_subsequences"}, {"score": 0.002323708293955822, "phrase": "redundant_scans"}, {"score": 0.0022766712610014484, "phrase": "proposed_approach"}, {"score": 0.0021411841686226297, "phrase": "previous_works"}, {"score": 0.0021049977753042253, "phrase": "execution_time"}], "paper_keywords": ["Data mining", " Sequential patterns", " Database transformation", " Support computation", " Database projection"], "paper_abstract": "In this paper, we propose a novel algorithm for mining frequent sequences from transaction databases. The transactions of the same customers form a set of customer sequences. A sequence (an ordered list of itemsets) is frequent if the number of customer sequences containing it satisfies the user-specified threshold. The 1-sequence is a special type of sequences because it consists of only a single itemset instead of an ordered list, while the k-sequence is a sequence composed of k itemsets. Compared with the cost of mining frequent k-sequences (k a parts per thousand yenaEuro parts per thousand 2), the cost of mining frequent 1-sequences is negligible. We adopt a two-phase architecture to find the two types of frequent sequences separately in order that the discovery of frequent k-sequences can be well designed and optimized. For efficient frequent k-sequence mining, every frequent 1-sequence is encoded as a unique symbol and the database is transformed into one constituted by the symbols. We find that it is unnecessary to encode all the frequent 1-seqences, and make full use of the discovered frequent 1-sequences to transform the database into one with a smaller size. For every k a parts per thousand yenaEuro parts per thousand 2, the customer sequences in the transformed database are scanned to find all the frequent k-sequences. We devise the compact representation for a customer sequence and elaborate the method to enumerate all distinct subsequences from a customer sequence without redundant scans. The soundness of the proposed approach is verified and a number of experiments are performed. The results show that our approach outperforms the previous works in both scalability and execution time.", "paper_title": "Effective database transformation and efficient support computation for mining sequential patterns", "paper_id": "WOS:000262535000002"}