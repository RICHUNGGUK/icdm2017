{"auto_keywords": [{"score": 0.03757432921561726, "phrase": "dynamic_symbolic_execution"}, {"score": 0.008885236502269755, "phrase": "security_vulnerability_errors"}, {"score": 0.007105883996029195, "phrase": "data_dependence_analysis"}, {"score": 0.00481495049065317, "phrase": "memory_safety_errors"}, {"score": 0.004755353864362941, "phrase": "buffer_overflow_vulnerabilities"}, {"score": 0.004619134710069517, "phrase": "security_threats"}, {"score": 0.004486800020569973, "phrase": "important_tasks"}, {"score": 0.004449688143230257, "phrase": "software_testing"}, {"score": 0.004129138311177554, "phrase": "goal-oriented_testing_approach"}, {"score": 0.003928321515373316, "phrase": "potential_safety_violation"}, {"score": 0.0038796562792487, "phrase": "testing_approach"}, {"score": 0.003799878496075633, "phrase": "test_inputs"}, {"score": 0.003645192746918234, "phrase": "type_inference_analysis"}, {"score": 0.003600022318864217, "phrase": "potential_safety_violations"}, {"score": 0.00352597432462803, "phrase": "test_input_generation"}, {"score": 0.003482276061796395, "phrase": "major_challenge"}, {"score": 0.0033824008297657494, "phrase": "combinatorial_explosion"}, {"score": 0.003340475943517995, "phrase": "path_space"}, {"score": 0.0032717489668326275, "phrase": "fundamental_scalability_issue"}, {"score": 0.0031647054743284947, "phrase": "root_cause"}, {"score": 0.0030231983220281836, "phrase": "path_exploration_algorithm"}, {"score": 0.002690820958068933, "phrase": "significant_improvement"}, {"score": 0.0023651843133643768, "phrase": "test_subjects"}, {"score": 0.002316476356455289, "phrase": "experimental_results"}, {"score": 0.0022220423638260015, "phrase": "combinatorial_path_space_explosion_issue"}, {"score": 0.002176275802465835, "phrase": "effective_security_testing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Buffer overflow vulnerabilities", " Dynamic symbolic execution", " Data and control dependence analysis", " Type inference analysis"], "paper_abstract": "Context: Memory safety errors such as buffer overflow vulnerabilities are one of the most serious classes of security threats. Detecting and removing such security errors are important tasks of software testing for improving the quality and reliability of software in practice. Objective: This paper presents a goal-oriented testing approach for effectively and efficiently exploring security vulnerability errors. A goal is a potential safety violation and the testing approach is to automatically generate test inputs to uncover the violation. Method: We use type inference analysis to diagnose potential safety violations and dynamic symbolic execution to perform test input generation. A major challenge facing dynamic symbolic execution in such application is the combinatorial explosion of the path space. To address this fundamental scalability issue, we employ data dependence analysis to identify a root cause leading to the execution of the goal and propose a path exploration algorithm to guide dynamic symbolic execution for effectively discovering the goal. Results: To evaluate the effectiveness of our proposed approach, we conducted experiments against 23 buffer overflow vulnerabilities. We observed a significant improvement of our proposed algorithm over two widely adopted search algorithms. Specifically, our algorithm discovered security vulnerability errors within a matter of a few seconds, whereas the two baseline algorithms failed even after 30 min of testing on a number of test subjects. Conclusion: The experimental results highlight the potential of utilizing data dependence analysis to address the combinatorial path space explosion issue faced by dynamic symbolic execution for effective security testing. (C) 2015 Published by Elsevier B.V.", "paper_title": "Goal-oriented dynamic test generation", "paper_id": "WOS:000358699900004"}