{"auto_keywords": [{"score": 0.029918210649248395, "phrase": "nl"}, {"score": 0.00481495049065317, "phrase": "logarithmic_space"}, {"score": 0.0034118234596993836, "phrase": "deterministic_simulation"}, {"score": 0.00307657476125683, "phrase": "standard_logarithmic_space_complexity"}, {"score": 0.0030239842475439814, "phrase": "state_complexity"}, {"score": 0.00298942278888105, "phrase": "two-way_unary_automata"}, {"score": 0.002758273619951683, "phrase": "superpolynomial_gap"}, {"score": 0.002472822097373027, "phrase": "unproven_assumptions"}, {"score": 0.0022041312401435346, "phrase": "polynomial_number"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Unary regular languages", " Finite automata", " State complexity", " Logarithmic space", " Space complexity"], "paper_abstract": "We show that if L = NL (the classical logarithmic space classes), then each unary 2NFA (a two-way nondeterministic finite automaton) can be converted into an equivalent 2DFA (a deterministic two-way automaton), keeping the number of states polynomial. (Unlike other results of this kind, here the deterministic simulation is valid for inputs of all lengths, not only polynomially long ones.) This shows a connection between the standard logarithmic space complexity and the state complexity of two-way unary automata: it indicates that L could be separated from NL by proving a superpolynomial gap, in the number of states, for the conversion from unary 2NFA5 to 2DFA. Moreover, without any unproven assumptions, we show that each n-state unary 2NFA can be simulated by an equivalent 2UFA (an unambiguous 2NFA) with a polynomial number of states. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Two-way unary automata versus logarithmic space", "paper_id": "WOS:000291507900002"}