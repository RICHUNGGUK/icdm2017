{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "work_time_inflation"}, {"score": 0.0047468516620285525, "phrase": "task_parallel_programs"}, {"score": 0.0046797114400479135, "phrase": "task_parallelism"}, {"score": 0.004452078350485375, "phrase": "shared_memory"}, {"score": 0.004420472010542188, "phrase": "parallel_programming"}, {"score": 0.0042354707960660706, "phrase": "complex_applications"}, {"score": 0.004087207102190335, "phrase": "parallel_applications"}, {"score": 0.004000741805312148, "phrase": "poor_performance"}, {"score": 0.003916098498242888, "phrase": "thread_idleness"}, {"score": 0.0034690732089830045, "phrase": "multithreaded_computation"}, {"score": 0.0032073043728420817, "phrase": "sequential_computation"}, {"score": 0.0029024303666003153, "phrase": "parallel_openmp_applications"}, {"score": 0.002683304054823427, "phrase": "increased_data_access_latency"}, {"score": 0.0026264601495742295, "phrase": "significant_work_time_inflation"}, {"score": 0.002589235561883692, "phrase": "numa"}, {"score": 0.002480680078868508, "phrase": "parallel_openmp_programs"}, {"score": 0.002309754152767196, "phrase": "qthreads_library"}, {"score": 0.0022608057001451414, "phrase": "locality-aware_scheduling"}, {"score": 0.0021049977753042253, "phrase": "task_scheduler"}], "paper_keywords": ["Task parallel programming", " locality", " task scheduling", " affinity", " NUMA", " OpenMP"], "paper_abstract": "Task parallelism raises the level of abstraction in shared memory parallel programming to simplify the development of complex applications. However, task parallel applications can exhibit poor performance due to thread idleness, scheduling overheads, and work time inflation - additional time spent by threads in a multithreaded computation beyond the time required to perform the same work in a sequential computation. We identify the contributions of each factor to lost efficiency in various task parallel OpenMP applications and diagnose the causes of work time inflation in those applications. Increased data access latency can cause significant work time inflation in NUMA systems. Our locality framework for task parallel OpenMP programs mitigates this cause of work time inflation. Our extensions to the Qthreads library demonstrate that locality-aware scheduling can improve performance up to 3X compared to the Intel OpenMP task scheduler.", "paper_title": "Characterizing and mitigating work time inflation in task parallel programs", "paper_id": "WOS:000327739800006"}