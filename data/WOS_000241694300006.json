{"auto_keywords": [{"score": 0.041595628124362086, "phrase": "csp_processes"}, {"score": 0.03481487178682437, "phrase": "reactive_processes"}, {"score": 0.014587539208921713, "phrase": "alphabetised_relational_calculus"}, {"score": 0.004815026646415387, "phrase": "csp"}, {"score": 0.004769702911065878, "phrase": "unifying_theories"}, {"score": 0.004401794742140806, "phrase": "denotational_semantics"}, {"score": 0.004339867166576126, "phrase": "wide_variety"}, {"score": 0.004238576355081601, "phrase": "different_programming_paradigms"}, {"score": 0.00406214911915987, "phrase": "tutorial_introduction"}, {"score": 0.003766369160795001, "phrase": "summarised_introduction"}, {"score": 0.0035587046945919788, "phrase": "pre-post_specifications"}, {"score": 0.003475582268210954, "phrase": "specification_statements"}, {"score": 0.0029454679553901613, "phrase": "new_model"}, {"score": 0.0029039692582303904, "phrase": "standard_failures-divergences_model"}, {"score": 0.002876635129213066, "phrase": "csp."}, {"score": 0.002836096284133166, "phrase": "next_section"}, {"score": 0.002730775512247772, "phrase": "utp"}, {"score": 0.002426137929553724, "phrase": "complete_lattice"}, {"score": 0.002358220053411644, "phrase": "general_theory"}, {"score": 0.0021049977753042253, "phrase": "roscoe's_standard_model"}], "paper_keywords": [""], "paper_abstract": "In their Unifying Theories of Programming (UTP), Hoare & He use the alphabetised relational calculus to give denotational semantics to a wide variety of constructs taken from different programming paradigms. In this chapter, we give a tutorial introduction to the semantics of CSP processes, as presented in Chapter 3. We start with a summarised introduction of the alphabetised relational calculus and the theory of designs, which are pre-post specifications in the style of specification statements. Afterwards, we present in detail a theory for reactive processes. Later, we combine the theories of designs and reactive processes to provide the model for CSP processes. Finally, we compare this new model with the standard failures-divergences model for CSP. In the next section, we give an overview of the UTP, and in Section 2 we present its most general theory: the alphabetised predicates. In the following section, we establish that this theory is a complete lattice. Section 4 restricts the general theory to designs. Section 5 presents the theory of reactive processes; Section 6 contains our treatment of CSP processes; and Section 7 relates our model to Roscoe's standard model. We summarise the work in Section 8.", "paper_title": "A tutorial introduction to CSP in unifying theories of programming", "paper_id": "WOS:000241694300006"}