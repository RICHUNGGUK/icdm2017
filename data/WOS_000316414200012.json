{"auto_keywords": [{"score": 0.04972711494665692, "phrase": "memory_reservation"}, {"score": 0.029882378818168773, "phrase": "rental_memory"}, {"score": 0.015719716506582538, "phrase": "embedded_systems"}, {"score": 0.011907046154656917, "phrase": "memory_space"}, {"score": 0.004692227830462433, "phrase": "prevalent_approach"}, {"score": 0.004623503587186056, "phrase": "physically_contiguous_memory_region"}, {"score": 0.004505638402009237, "phrase": "camera_device"}, {"score": 0.004456044928556639, "phrase": "video_decoder"}, {"score": 0.004294625285753825, "phrase": "emerging_embedded_systems"}, {"score": 0.004200582085706493, "phrase": "smart_tvs"}, {"score": 0.004063348730077936, "phrase": "idle_time"}, {"score": 0.0037325918533747953, "phrase": "memory_inefficiency"}, {"score": 0.0032081215771180664, "phrase": "volatile_pages"}, {"score": 0.0031845067058084613, "phrase": "good_candidates"}, {"score": 0.003012831982759529, "phrase": "original_device"}, {"score": 0.002850385670169814, "phrase": "lowered_utilization"}, {"score": 0.0027368368719283298, "phrase": "active_pages"}, {"score": 0.0026084451971464867, "phrase": "smartphone_development_board"}, {"score": 0.0025796799784169196, "phrase": "android_linux_kernel"}, {"score": 0.0024860616730750158, "phrase": "return_operation"}, {"score": 0.0024405312482831646, "phrase": "tested_cases"}, {"score": 0.0022498783454674254, "phrase": "application_initialization_time"}, {"score": 0.0022005118194652704, "phrase": "throughput_increases"}, {"score": 0.0021284812539167112, "phrase": "available_memory"}, {"score": 0.0021049977753042253, "phrase": "applications'_memory_intensiveness"}], "paper_keywords": ["Design", " Management", " Memory management", " memory hotplugging", " memory reservation"], "paper_abstract": "Memory reservation in embedded systems is a prevalent approach to provide a physically contiguous memory region to its integrated devices, such as a camera device and a video decoder. Inefficiency of the memory reservation becomes a more significant problem in emerging embedded systems, such as smartphones and smart TVs. Many ways of using these systems increase the idle time of their integrated devices, and eventually decrease the utilization of their reserved memory. In this article, we propose a scheme to minimize the memory inefficiency caused by the memory reservation. The memory space reserved for a device can be rented for other purposes when the device is not active. For this scheme to be viable, latencies associated with reallocating the memory space should be minimal. Volatile pages are good candidates for such page reallocation since they can be reclaimed immediately as they are needed by the original device. We also provide two optimization techniques, lazy-migration and adaptive-activation. The former increases the lowered utilization of the rental memory by our volatile page allocations, and the latter saves active pages in the rental memory during the reallocation. We implemented our scheme on a smartphone development board with the Android Linux kernel. Our prototype has shown that the time for the return operation is less than 0.77 seconds in the tested cases. We believe that this time is acceptable to end-users in terms of transparency since the time can be hidden in application initialization time. The rental memory also brings throughput increases ranging from 2% to 200% based on the available memory and the applications' memory intensiveness.", "paper_title": "Rigorous Rental Memory Management for Embedded Systems", "paper_id": "WOS:000316414200012"}