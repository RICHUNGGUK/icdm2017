{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "argus"}, {"score": 0.004757917303420435, "phrase": "statistical_bug_detection"}, {"score": 0.004720269202737973, "phrase": "statistical_debugging"}, {"score": 0.004664352260912174, "phrase": "powerful_technique"}, {"score": 0.004518442937844318, "phrase": "programming_rules"}, {"score": 0.0044826811976193485, "phrase": "program_invariants"}, {"score": 0.004447201233380302, "phrase": "previously_known_statistical_debugging_techniques"}, {"score": 0.004026598712747509, "phrase": "offline_statistical_analysis"}, {"score": 0.003823791479971016, "phrase": "potential_bug_sites"}, {"score": 0.0037935066882208235, "phrase": "offline_techniques"}, {"score": 0.003313741359811683, "phrase": "postmortem_techniques"}, {"score": 0.0031592690527974285, "phrase": "bug_symptom"}, {"score": 0.003036040409062437, "phrase": "online_statistical_bug_detection_tool"}, {"score": 0.0029060170624404242, "phrase": "sliding_window"}, {"score": 0.0028715299874549245, "phrase": "program_execution"}, {"score": 0.0027704982687041147, "phrase": "single_execution"}, {"score": 0.00267301171407926, "phrase": "bug_symptoms"}, {"score": 0.002468450551616404, "phrase": "experimental_results"}, {"score": 0.002439143581855858, "phrase": "siemens_bug_benchmark"}, {"score": 0.0022977342663599042, "phrase": "optimization_techniques"}, {"score": 0.0022614266476954467, "phrase": "argus'_detection_power"}, {"score": 0.002225691463551672, "phrase": "false_alarm_rate"}, {"score": 0.0021992603252793995, "phrase": "small_number"}, {"score": 0.0021049977753042253, "phrase": "best_known_bug_localization_techniques"}], "paper_keywords": [""], "paper_abstract": "Statistical debugging is a powerful technique for identifying bugs that do not violate programming rules or program invariants. Previously known statistical debugging techniques are offline bug isolation (or localization) techniques. In these techniques, the program dumps data during its execution, which is used by offline statistical analysis to discover differences in passing and failing executions. The differences identify potential bug sites. Offline techniques suffer from three limitations: (i) a large number of executions are needed to provide data, (ii) each execution must be labelled as passing or failing, and (iii) they are postmortem techniques and therefore cannot raise an alert at runtime when a bug symptom occurs. In this paper, we present an online statistical bug detection tool called Argus. Argus constructs statistics at runtime using a sliding window over the program execution, is capable of detecting bugs in a single execution and can raise an alert at runtime when bug symptoms occur. Moreover, it eliminates the requirement for labelling all executions as passing or failing. We present experimental results using the Siemens bug benchmark showing that Argus is effective in detecting 102 out of 130 bugs. We introduce optimization techniques that greatly improve Argus' detection power and control the false alarm rate when a small number of executions are available. Argus generates more precise bug reports than the best known bug localization techniques.", "paper_title": "Argus: Online statistical bug detection", "paper_id": "WOS:000236901100023"}