{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "type_abstraction"}, {"score": 0.004438250823243621, "phrase": "bisimulation_method"}, {"score": 0.004236321075918639, "phrase": "contextual_equivalence"}, {"score": 0.003950453462399077, "phrase": "full_existential_and_recursive_types"}, {"score": 0.0038148090091532933, "phrase": "traditional_logical_relations"}, {"score": 0.003021781956684419, "phrase": "advanced_machinery"}, {"score": 0.002917931350071647, "phrase": "domain_theory"}, {"score": 0.0024496978447849835, "phrase": "existential_types"}, {"score": 0.0023654615987859402, "phrase": "key_idea"}], "paper_keywords": ["theory", " languages", " Lambda-calculus", " contextual equivalence", " bisimulations", " logical relations", " existential types", " recursive types"], "paper_abstract": "We present a bisimulation method for proving the contextual equivalence of packages in calculus with full existential and recursive types. Unlike traditional logical relations (either semantic or syntactic), our development is \"elementary,\" using only sets and relations and avoiding advanced machinery such as domain theory, admissibility, and TT-closure. Unlike other bisimulations, ours is complete even for existential types. The key idea is to consider sets of relations-instead of just relations - as bisimulations.", "paper_title": "A bisimulation for type abstraction and recursion", "paper_id": "WOS:000250557900005"}