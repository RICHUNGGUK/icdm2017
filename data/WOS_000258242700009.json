{"auto_keywords": [{"score": 0.04804050199975018, "phrase": "distributed_abstract_machines"}, {"score": 0.00481495049065317, "phrase": "bisimulation_proof_techniques"}, {"score": 0.004337710093279712, "phrase": "recently_developed_proof_techniques"}, {"score": 0.004081385289516914, "phrase": "generic_framework"}, {"score": 0.0037738708560271354, "phrase": "message-passing_implementation"}, {"score": 0.00303553181618577, "phrase": "first_version"}, {"score": 0.002806595775343074, "phrase": "standard_bisimulation"}, {"score": 0.0027341763737751467, "phrase": "expansion_proof_technique"}, {"score": 0.0025279105573394727, "phrase": "rather_complex_behaviours"}, {"score": 0.0023371689326096476, "phrase": "termination_arguments"}, {"score": 0.0022180544041790697, "phrase": "behavioural_equivalence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["weak bisimilarity", " up-to techniques", " process algebras", " distributed abstract machines", " forwarders"], "paper_abstract": "We illustrate the use of recently developed proof techniques for weak bisimulation by analysing a generic framework for the definition of distributed abstract machines based on a message-passing implementation. We first define this framework, and then focus on the algorithm which is used to route messages asynchronously to their destination. A first version of this algorithm can be analysed using the standard bisimulation up to expansion proof technique. We show that in a second, optimised version, rather complex behaviours appear, for which more sophisticated techniques, relying on termination arguments, are necessary to establish behavioural equivalence. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Using bisimulation proof techniques for the analysis of distributed abstract machines", "paper_id": "WOS:000258242700009"}