{"auto_keywords": [{"score": 0.046273829908275756, "phrase": "real-time_properties"}, {"score": 0.00481495049065317, "phrase": "formal_theories"}, {"score": 0.004784448637292493, "phrase": "real-time_systems"}, {"score": 0.004724020632103649, "phrase": "timed_process_algebra"}, {"score": 0.004694092086199672, "phrase": "timed_automata"}, {"score": 0.004649552749844436, "phrase": "petri_nets"}, {"score": 0.004590820632326585, "phrase": "great_success"}, {"score": 0.004518442937844318, "phrase": "concurrent_timing_behavior"}, {"score": 0.00433553336181385, "phrase": "ineliminable_timing_differences"}, {"score": 0.004213240903095234, "phrase": "software_realization"}, {"score": 0.004133627071344356, "phrase": "predictable_way"}, {"score": 0.004081385289516914, "phrase": "challenging_research_topic"}, {"score": 0.0037935066882208235, "phrase": "theoretical_results"}, {"score": 0.003769450990471342, "phrase": "property_prediction"}, {"score": 0.0037336520904376687, "phrase": "huang_et_al"}, {"score": 0.003582397044768098, "phrase": "timed_systems"}, {"score": 0.003437248394635138, "phrase": "ieee_computer_society"}, {"score": 0.0034154440860550564, "phrase": "los_alamitos"}, {"score": 0.0033296858192625707, "phrase": "huang"}, {"score": 0.0032666255024083983, "phrase": "real-time_system_design"}, {"score": 0.0032150572968898923, "phrase": "eindhoven_university_of_technology"}, {"score": 0.003144222265269426, "phrase": "quantitative_property_relations"}, {"score": 0.0029502941554043964, "phrase": "\"similar\"_properties"}, {"score": 0.002768293851511292, "phrase": "infinitely_large_absolute_and_relative_timing_differences"}, {"score": 0.0027159094186967247, "phrase": "infinite_time_gap"}, {"score": 0.0026475981474045414, "phrase": "carefully_constructed_intermediate_time_domains"}, {"score": 0.0026140878612307536, "phrase": "property-prediction_results"}, {"score": 0.002548331088496964, "phrase": "adjacent_time"}, {"score": 0.0023532890136269986, "phrase": "timing_differences"}, {"score": 0.0022940774859444724, "phrase": "correctness-preserving_design_process"}, {"score": 0.0022010126160835024, "phrase": "concrete_tool_set"}, {"score": 0.0021456243019466843, "phrase": "predictable_synthesis_approach"}, {"score": 0.0021049977753042253, "phrase": "railroad_crossing_system"}], "paper_keywords": ["real-time systems", " formal methods", " program synthesis"], "paper_abstract": "Formal theories for real-time systems (such as timed process algebra, timed automata and timed petri nets) have gained great success in the modeling of concurrent timing behavior and in the analysis of real-time properties. However, due to the ineliminable timing differences between a model and its realization, synthesizing a software realization from a model in a predictable way is still a challenging research topic. In this article, we tackle this problem by solving a set of sub-problems. The solution is based on the theoretical results for property prediction proposed in Huang et al. (2003, Real-time property preservation in approximations of timed systems. In: Proceedings of 1st ACM and IEEE international conference on formal methods and models for codesign. IEEE Computer Society, Los Alamitos, pp 163-171) and Huang (2005, Predictability in real-time system design. PhD thesis, Eindhoven University of Technology, The Netherlands), where quantitative property relations are established between two absolute/relative \"close\" real-time systems. This theory basically implies that if two systems are \"close\", they enjoy \"similar\" properties. These results cannot be directly applied in practice though, because a model and its realization typically have infinitely large absolute and relative timing differences. We show that this infinite time gap can be bridged through a sequence of carefully constructed intermediate time domains. Then the property-prediction results can be applied to any pair of adjacent time domains in the sequence. Consequently, real-time properties of the implementation can be predicted from the model. We propose two parameterized hypotheses to characterize the timing differences in the sequence and to guide a correctness-preserving design process. It is shown that these hypotheses can be incorporated in a concrete tool set. We demonstrate the feasibility of the predictable synthesis approach through the design of a railroad crossing system.", "paper_title": "Predictable real-time software synthesis", "paper_id": "WOS:000247484300001"}