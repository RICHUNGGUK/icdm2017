{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "alias_analysis"}, {"score": 0.004502943680955863, "phrase": "well-known_fundamental_formulation"}, {"score": 0.004118026552723285, "phrase": "restricted_version"}, {"score": 0.004027031316965272, "phrase": "dyck-cfl-reachability"}, {"score": 0.003916098498242888, "phrase": "edge-labeled_bidirected_graphs"}, {"score": 0.003829548069657859, "phrase": "all-pairs_dyck-cfl-reachability"}, {"score": 0.0036214184763804034, "phrase": "bidirected_graph"}, {"score": 0.0035811651542886746, "phrase": "n_nodes"}, {"score": 0.0034630606658026595, "phrase": "traditional_dynamic_programming_style_algorithm"}, {"score": 0.003405472159599445, "phrase": "subcubic_time_complexity"}, {"score": 0.003348838095597268, "phrase": "dyck_language"}, {"score": 0.0031845067058084583, "phrase": "underlying_graphs"}, {"score": 0.0031140747752837826, "phrase": "bidirected_trees"}, {"score": 0.002831658243608909, "phrase": "dyck-cfl-reachability_problems"}, {"score": 0.0025178072071268534, "phrase": "time_complexities"}, {"score": 0.0023151088048303705, "phrase": "state-of-the-art_alias_analysis"}, {"score": 0.0022894686573420747, "phrase": "java"}, {"score": 0.0021406417439887907, "phrase": "magnitude_speedup"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Languages", " Dyck-CFL-reachability", " alias analysis"], "paper_abstract": "The context-free language (CFL) reachability problem is a well-known fundamental formulation in program analysis. In practice, many program analyses, especially pointer analyses, adopt a restricted version of CFL-reachability, Dyck-CFL-reachability, and compute on edge-labeled bidirected graphs. Solving the all-pairs Dyck-CFL-reachability on such bidirected graphs is expensive. For a bidirected graph with n nodes and m edges, the traditional dynamic programming style algorithm exhibits a subcubic time complexity for the Dyck language with k kinds of parentheses. When the underlying graphs are restricted to bidirected trees, an algorithm with O(n log n log k) time complexity was proposed recently. This paper studies the Dyck-CFL-reachability problems on bidirected trees and graphs. In particular, it presents two fast algorithms with O(n) and O(n+m log m) time complexities on trees and graphs respectively. We have implemented and evaluated our algorithms on a state-of-the-art alias analysis for Java. Results on standard benchmarks show that our algorithms achieve orders of magnitude speedup and consume less memory.", "paper_title": "Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis", "paper_id": "WOS:000321865400041"}