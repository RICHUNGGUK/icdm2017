{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "hpc_environments"}, {"score": 0.00993352780940031, "phrase": "apache_hadoop"}, {"score": 0.00886836425038683, "phrase": "nersc"}, {"score": 0.0072354251059216414, "phrase": "mapreduce_implementation"}, {"score": 0.004769481873802651, "phrase": "mapreduce"}, {"score": 0.004657542074154025, "phrase": "popular_programming_model"}, {"score": 0.004548253531664032, "phrase": "widely_used_implementation"}, {"score": 0.004420472010542188, "phrase": "hadoop_distributed_file_system"}, {"score": 0.004116440453049531, "phrase": "existing_hpc_environments"}, {"score": 0.004058181313446905, "phrase": "teragrid"}, {"score": 0.0037969755088553326, "phrase": "mapreduce_model"}, {"score": 0.00369022262431101, "phrase": "full_resources"}, {"score": 0.0036379729015583975, "phrase": "special_circumstances"}, {"score": 0.0035022161192936234, "phrase": "simply_limited_resources"}, {"score": 0.0031244995579170465, "phrase": "design_choices"}, {"score": 0.003094920033010818, "phrase": "better_performance_gains"}, {"score": 0.0029935730127943496, "phrase": "inherent_distributed_file_systems'_functions"}, {"score": 0.002868116925014397, "phrase": "mariane"}, {"score": 0.002632716358833918, "phrase": "expanding_number"}, {"score": 0.002546466113418944, "phrase": "better_performance"}, {"score": 0.002326304140277375, "phrase": "performance_gains"}, {"score": 0.0022181655497912796, "phrase": "data_intensive_setting"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Hadoop", " MapReduce", " Data intensive", " Scientific computing"], "paper_abstract": "MapReduce is increasingly becoming a popular programming model. However, the widely used implementation, Apache Hadoop, uses the Hadoop Distributed File System (HDFS), which is currently not directly applicable to a majority of existing HPC environments such as Teragrid and NERSC that support other distributed file systems. On such resourceful High Performance Computing (HPC) infrastructures, the MapReduce model can rarely make use of full resources, as special circumstances must be created for its adoption, or simply limited resources must be isolated to the same end. This paper not only presents a MapReduce implementation directly suitable for such environments, but also exposes the design choices for better performance gains in those settings. By leveraging inherent distributed file systems' functions, and abstracting them away from its MapReduce framework, MARIANE (MApReduce Implementation Adapted for HPC Environments) not only allows for the use of the model in an expanding number of HPC environments, but also shows better performance in such settings. This paper identifies the components and trade-offs necessary for this model, and quantifies the performance gains exhibited by our approach in HPC environments over Apache Hadoop in a data intensive setting at the National Energy Research Scientific Computing Center (NERSC). (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "MARIANE: Using MApReduce in HPC environments", "paper_id": "WOS:000336770700033"}