{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "tree-like_indexes"}, {"score": 0.014604029866344086, "phrase": "database_system"}, {"score": 0.013357440777260553, "phrase": "distributed_environment"}, {"score": 0.004703149944841539, "phrase": "explosive_growth"}, {"score": 0.00459393336391459, "phrase": "efficient_data_management"}, {"score": 0.004181743040532619, "phrase": "different_types"}, {"score": 0.003927625349474979, "phrase": "compute_nodes"}, {"score": 0.003688892770976908, "phrase": "maintenance_cost"}, {"score": 0.003547084456662448, "phrase": "compute_node"}, {"score": 0.0034646205853140558, "phrase": "index_tree"}, {"score": 0.003228517923065361, "phrase": "network_bandwidth"}, {"score": 0.0026327757304477665, "phrase": "chord_overlay"}, {"score": 0.0024340403320192807, "phrase": "query_cost"}, {"score": 0.002405549400304955, "phrase": "update_cost"}, {"score": 0.0021215910859085146, "phrase": "real-_life"}, {"score": 0.0021049977753042253, "phrase": "synthetic_datasets"}], "paper_keywords": ["tree-like index", " Chord", " distributed algorithm"], "paper_abstract": "With the explosive growth of data, to support efficient data management including queries and updates, the database system is expected to provide tree-like indexes, such as R-tree, M-tree, B+-tree, according to different types of data. In the distributed environment, the indexes have to be scattered across the compute nodes to improve reliability and scalability. Indexes can speed up queries, but they incur maintenance cost when updates occur. In the distributed environment, each compute node maintains a subset of an index tree, so keeping the communication cost small is more crucial, or else it occupies lots of network bandwidth and the scalability and availability of the database system are affected. Further, to achieve the reliability and scalability for queries, several replicas of the index are needed, but keeping the replicas consistent is not straightforward. In this paper, we propose a framework supporting tree-like indexes, based on Chord overlay, which is a popular P2P structure. The framework dynamically tunes the number of replicas of index to balance the query cost and the update cost. Several techniques are designed to improve the efficiency of updates without the cost of performance of the queries. We implement M-tree and R-tree in our framework, and extensive experiments on real- life and synthetic datasets verify the efficiency and scalability of our framework.", "paper_title": "A Framework for Supporting Tree-Like Indexes on the Chord Overlay", "paper_id": "WOS:000326953200004"}