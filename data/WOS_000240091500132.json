{"auto_keywords": [{"score": 0.03397792369294496, "phrase": "prolog"}, {"score": 0.00481495049065317, "phrase": "prolog_semantics"}, {"score": 0.004342430078306461, "phrase": "well-known_logic_programming_language"}, {"score": 0.004081385289516914, "phrase": "correct_partial_answers"}, {"score": 0.0038758293658651237, "phrase": "correct_call_patterns"}, {"score": 0.003531474887552889, "phrase": "static_analysis"}, {"score": 0.003459191419478298, "phrase": "prolog_programs"}, {"score": 0.0032848684681050745, "phrase": "goal-independent_denotational_semantics"}, {"score": 0.002931569771634119, "phrase": "prolog_program_analysis"}, {"score": 0.0025625729433234623, "phrase": "two-step_method"}, {"score": 0.002358917661465133, "phrase": "dt_semantics"}, {"score": 0.0021049977753042253, "phrase": "semantic_domains"}], "paper_keywords": [""], "paper_abstract": "Prolog is a well-known logic programming language. The information on the correct partial answers (cpa) and correct call patterns (ccp) of goals is useful for static analysis of Prolog programs. Decorated tree (DT) semantics is a goal-independent denotational semantics for Prolog that has been shown to be promising in Prolog program analysis. We extend the work in [7] and propose a two-step method for achieving cpa or ccp semantics from DT semantics. This paper is mainly concerned with the design of semantic domains.", "paper_title": "Designing Prolog semantics for a class of observables", "paper_id": "WOS:000240091500132"}