{"auto_keywords": [{"score": 0.0414518879544571, "phrase": "coq"}, {"score": 0.00422177384286051, "phrase": "coq_programs"}, {"score": 0.004104456271230213, "phrase": "use_cases"}, {"score": 0.0037363522297378777, "phrase": "extracted_ocaml_code"}, {"score": 0.0035648266669315943, "phrase": "different_trade-offs"}, {"score": 0.003401148484767927, "phrase": "pristine_extracted_code"}, {"score": 0.0027139447110929586, "phrase": "possible_consequences"}, {"score": 0.002447101794397243, "phrase": "running_example"}, {"score": 0.0024014759148123736, "phrase": "binary_decision_diagrams"}, {"score": 0.0021049977753042253, "phrase": "hash-consed_data_structures"}], "paper_keywords": ["Coq", " Hash-consing", " Binary decision diagrams"], "paper_abstract": "We report on four different approaches to implementing hash-consing in Coq programs. The use cases include execution inside Coq, or execution of the extracted OCaml code. We explore the different trade-offs between faithful use of pristine extracted code, and code that is fine-tuned to make use of OCaml programming constructs not available in Coq. We discuss the possible consequences in terms of performances and guarantees.We use the running example of binary decision diagrams and then demonstrate the generality of our solutions by applying them to other examples of hash-consed data structures.", "paper_title": "Implementing and Reasoning About Hash-consed Data Structures in Coq", "paper_id": "WOS:000342134000003"}