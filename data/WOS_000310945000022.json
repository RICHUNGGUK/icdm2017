{"auto_keywords": [{"score": 0.049418985040378574, "phrase": "precedence_constraints"}, {"score": 0.00481495049065317, "phrase": "complex_systems"}, {"score": 0.004338661611644755, "phrase": "multi-component_system"}, {"score": 0.003697895355947004, "phrase": "expected_cost"}, {"score": 0.0034978813769575233, "phrase": "k-out-of-n_systems"}, {"score": 0.0032629585038738856, "phrase": "n_components"}, {"score": 0.003086396772496527, "phrase": "testing_policy"}, {"score": 0.002939737235379635, "phrase": "decision_rules"}, {"score": 0.0026118503041971976, "phrase": "exact_algorithms"}, {"score": 0.0025225467103906314, "phrase": "-bound_algorithm"}, {"score": 0.0024026156525362684, "phrase": "optimal_member"}, {"score": 0.002272501735900584, "phrase": "extensive_computational_experiments"}, {"score": 0.0021947755130109696, "phrase": "representative_datasets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Sequential testing", " Precedence constraints", " Branch and bound", " Dynamic programming"], "paper_abstract": "We study the problem of sequentially testing the components of a multi-component system to learn the state of the system, when the tests are subject to precedence constraints and with the objective of minimizing the expected cost of the inspections. Our focus is on k-out-of-n systems, which function if at least k of the n components are functional. A solution is a testing policy, which is a set of decision rules that describe in which order to perform the tests. We distinguish two different classes of policies and describe exact algorithms (one branch-and-bound algorithm and one dynamic program) to find an optimal member of each class. We report on extensive computational experiments with the algorithms for representative datasets. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Sequential testing policies for complex systems under precedence constraints", "paper_id": "WOS:000310945000022"}