{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "parallel_incremental_computation"}, {"score": 0.004741167616693272, "phrase": "incremental_computation"}, {"score": 0.004632597963417253, "phrase": "efficient_successive_runs"}, {"score": 0.0033486631403337555, "phrase": "unmodified_shared-memory_multithreaded_programs"}, {"score": 0.0030283730114326014, "phrase": "simple_exchange"}, {"score": 0.002981885091155911, "phrase": "dynamically_linked_libraries"}, {"score": 0.002846647336160784, "phrase": "application_code"}, {"score": 0.0025151755329660837, "phrase": "compiled_binary_code_level"}, {"score": 0.0024574537875026634, "phrase": "mmu-assisted_memory_access_tracking"}, {"score": 0.002419708657850547, "phrase": "process-based_thread_isolation"}, {"score": 0.0023099082804523044, "phrase": "multicore_platform"}, {"score": 0.0022223121903702397, "phrase": "parsec"}, {"score": 0.0021881082305983727, "phrase": "phoenix"}, {"score": 0.0021049977753042253, "phrase": "significant_performance_gains"}], "paper_keywords": ["Incremental computation", " shared-memory multithreading", " self-adjusting computation", " memoization", " Concurrent Dynamic Dependence Graph (CDDG)", " Release Consistency (RC) memory model"], "paper_abstract": "Incremental computation strives for efficient successive runs of applications by re-executing only those parts of the computation that are affected by a given input change instead of recomputing everything from scratch. To realize these benefits automatically, we describe iThreads, a threading library for parallel incremental computation. iThreads supports unmodified shared-memory multithreaded programs: it can be used as a replacement for pthreads by a simple exchange of dynamically linked libraries, without even recompiling the application code. To enable such an interface, we designed algorithms and an implementation to operate at the compiled binary code level by leveraging MMU-assisted memory access tracking and process-based thread isolation. Our evaluation on a multicore platform using applications from the PARSEC and Phoenix benchmarks and two case studies shows significant performance gains.", "paper_title": "iThreads: A Threading Library for Parallel Incremental Computation", "paper_id": "WOS:000370874900045"}