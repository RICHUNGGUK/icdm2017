{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "component-based_software_systems"}, {"score": 0.0047559432344272, "phrase": "system-level_size_measures"}, {"score": 0.004611554879923759, "phrase": "software_project_management"}, {"score": 0.004256243266481051, "phrase": "software_development"}, {"score": 0.00405127920820053, "phrase": "size_estimate"}, {"score": 0.003976978140059542, "phrase": "entire_system"}, {"score": 0.0037621210719690594, "phrase": "black-box_nature"}, {"score": 0.0036477941360224435, "phrase": "traditional_software_measures"}, {"score": 0.003284361433827464, "phrase": "function_point-like_measure"}, {"score": 0.0032240802202623316, "phrase": "component_point"}, {"score": 0.0030686679245324837, "phrase": "system-level_size"}, {"score": 0.002938821840519756, "phrase": "unified_modelling_language"}, {"score": 0.002797121441432477, "phrase": "existing_size_measure"}, {"score": 0.0026622351303038885, "phrase": "relatively_young_cbss_discipline"}, {"score": 0.002565345470805401, "phrase": "proposed_measure"}, {"score": 0.002518227743688769, "phrase": "global_positioning_system"}, {"score": 0.0023819914954155905, "phrase": "empirical_analysis"}, {"score": 0.0021845387990972543, "phrase": "cp_measure"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Component-Based Software System", " Component Point", " Function Point", " Software measures", " Software sizing"], "paper_abstract": "System-level size measures are particularly important in software project management as tasks such as planning and estimating the cost and schedule of software development can be performed more accurately when a size estimate of the entire system is available. However, due to the black-box nature of components, the traditional software measures are not adequate for Component-Based Software Systems (CBSS). In this paper, we describe a Function Point-like measure, named Component Point (CP), for measuring the system-level size of a CBSS specified in the Unified Modelling Language. Our approach integrates three software measures and extends an existing size measure from the more matured Object-Oriented paradigm to the related and relatively young CBSS discipline. We then apply the proposed measure to a Global Positioning System and demonstrate its viability in sizing a CBSS. An empirical analysis is also provided in order to prove the validity and usefulness of the CP measure. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Component Point: A system-level size measure for Component-Based Software Systems", "paper_id": "WOS:000284674200008"}