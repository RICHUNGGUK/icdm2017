{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_product_line"}, {"score": 0.009214079333127597, "phrase": "analysis_method"}, {"score": 0.004528301408585875, "phrase": "long_run"}, {"score": 0.004381068748227408, "phrase": "spl"}, {"score": 0.004218602458288531, "phrase": "stakeholder_requirements"}, {"score": 0.004178935413340453, "phrase": "system_contexts"}, {"score": 0.0035587046945919788, "phrase": "problem-oriented_and_value-based_analysis_method"}, {"score": 0.0031619994642255846, "phrase": "evolving_software_product_line"}, {"score": 0.0030881143614111552, "phrase": "proposed_method"}, {"score": 0.0030446120560494155, "phrase": "core_requirements_engineering_ontology"}, {"score": 0.0029594318330247614, "phrase": "variability-intensive_problem_decomposition"}, {"score": 0.002782938683493689, "phrase": "candidate_changes"}, {"score": 0.0027437235598539904, "phrase": "influenced_features"}, {"score": 0.002616943519478975, "phrase": "spl._results"}, {"score": 0.002449208093757498, "phrase": "concrete_case_study"}, {"score": 0.0024146842687658467, "phrase": "evolving_enterprise_software_system"}, {"score": 0.002292199117499287, "phrase": "contextual_changes"}, {"score": 0.002259883463607508, "phrase": "effective_way"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software product line", " Variability", " Evolution", " Feature", " Requirements", " Context"], "paper_abstract": "Context: In the long run, features of a software product line (SPL) evolve with respect to changes in stakeholder requirements and system contexts. Neither domain engineering nor requirements engineering handles such co-evolution of requirements and contexts explicitly, making it especially hard to reason about the impact of co-changes in complex scenarios. Objective: In this paper, we propose a problem-oriented and value-based analysis method for variability evolution analysis. The method takes into account both kinds of changes (requirements and contexts) during the life of an evolving software product line. Method: The proposed method extends the core requirements engineering ontology with the notions to represent variability-intensive problem decomposition and evolution. On the basis of problemorientation, the analysis method identifies candidate changes, detects influenced features, and evaluates their contributions to the value of the SPL. Results and Conclusion: The process of applying the analysis method is illustrated using a concrete case study of an evolving enterprise software system, which has confirmed that tracing back to requirements and contextual changes is an effective way to understand the evolution of variability in the software product line. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Analyzing evolution of variability in a software product line: From contexts and requirements to features", "paper_id": "WOS:000290836300002"}