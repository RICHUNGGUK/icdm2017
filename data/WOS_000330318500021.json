{"auto_keywords": [{"score": 0.041712156789843864, "phrase": "environmental_factor"}, {"score": 0.03512271130246494, "phrase": "defect_prediction"}, {"score": 0.00481495049065317, "phrase": "optimal_software_testing"}, {"score": 0.004489810932879285, "phrase": "neural_network-based_model"}, {"score": 0.004186534737631288, "phrase": "software_testing_environment"}, {"score": 0.0041074234667687875, "phrase": "operational_environment"}, {"score": 0.003829877278269543, "phrase": "systematic_study"}, {"score": 0.00378145978325955, "phrase": "defect_detection"}, {"score": 0.0037336520904376687, "phrase": "correction_processes"}, {"score": 0.0031845067058084583, "phrase": "jointly_optimal_software_testing_period"}, {"score": 0.003026391655379905, "phrase": "software_cost_function"}, {"score": 0.0028578496983461136, "phrase": "imperfect_fault_removal"}, {"score": 0.002750721367040336, "phrase": "total_expected_cost"}, {"score": 0.002664513608074113, "phrase": "discrete-type_software_reliability_model"}, {"score": 0.002564613964408878, "phrase": "operational_environments"}, {"score": 0.002532151331015729, "phrase": "imperfect_defect_removal"}, {"score": 0.0024842242921857705, "phrase": "defect_correction_process"}, {"score": 0.0024527767211457046, "phrase": "experimental_results"}, {"score": 0.0024063484128685367, "phrase": "real_software_data"}, {"score": 0.0022578275190855124, "phrase": "proposed_approach"}, {"score": 0.0021319959284827896, "phrase": "jointly_optimal_testing_period"}, {"score": 0.0021049977753042253, "phrase": "planned_maintenance_limit"}], "paper_keywords": ["Software release", " Maintenance", " Neural networks"], "paper_abstract": "In this paper, we propose a neural network-based model for optimal software testing and maintenance policy, where the software testing environment and the operational environment are characterized by an environmental factor. We also present a systematic study for defect detection and correction processes. In our proposed approach, we consider the logistic growth curve model and the constant correction time for defect prediction. Then, we estimate the jointly optimal software testing period and maintenance limit via minimization of a software cost function that takes into account the environmental factor and the imperfect fault removal. More precisely, the total expected cost is formulated via a discrete-type software reliability model based on the difference between operational environments, imperfect defect removal, and defect correction process. Experimental results on a real software data set are presented to demonstrate the effectiveness of the proposed approach in defect prediction as well as in determining the jointly optimal testing period and planned maintenance limit.", "paper_title": "A neural network approach for optimal software testing and maintenance", "paper_id": "WOS:000330318500021"}