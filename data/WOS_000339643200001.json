{"auto_keywords": [{"score": 0.046414941117587837, "phrase": "lewl"}, {"score": 0.00481495049065317, "phrase": "automatic_load_balancing"}, {"score": 0.0047642216840438215, "phrase": "lewi"}, {"score": 0.004714023408114857, "phrase": "hybrid_applications"}, {"score": 0.004285289574869884, "phrase": "runtime_solution"}, {"score": 0.004173244935967375, "phrase": "load_imbalance"}, {"score": 0.004129248271757936, "phrase": "parallel_applications"}, {"score": 0.003957834278725736, "phrase": "dlb"}, {"score": 0.0038339398365449507, "phrase": "hybrid_programming_models"}, {"score": 0.0036942726653704213, "phrase": "second_level"}, {"score": 0.003597625122515975, "phrase": "computation_power"}, {"score": 0.0034849681064606543, "phrase": "real_applications"}, {"score": 0.0033937776228549557, "phrase": "application's_performance"}, {"score": 0.0032014433546265694, "phrase": "efficiency_values"}, {"score": 0.0030199761431186434, "phrase": "deep_analysis"}, {"score": 0.0029409171055888804, "phrase": "efficiency_loss"}, {"score": 0.0028944757265206332, "phrase": "application_characteristics"}, {"score": 0.0027015344365793016, "phrase": "fine_grain_monitoring_tools"}, {"score": 0.002561892963059385, "phrase": "synthetic_experiments"}, {"score": 0.0022434880661725493, "phrase": "efficient_use"}, {"score": 0.002219790619936024, "phrase": "computational_resources"}, {"score": 0.0021731423856364003, "phrase": "maximum_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Application performance analysis", " Load balancing", " Hybrid parallel programming"], "paper_abstract": "The DLB (Dynamic Load Balancing) library and LeWl (LEnd When Idle) algorithm provide a runtime solution to deal with the load imbalance of parallel applications independently of the source of imbalance. DLB relies on the usage of hybrid programming models and exploits the malleability of the second level of parallelism to redistribute computation power across processes. When executing real applications with LeWl, although application's performance is significantly improved, we have observed in some cases efficiency values between 60% and 70%, far from our theoretical limit. This work is a deep analysis of the sources of efficiency loss correlated with application characteristics, parallelization schemes and programming models. We have based our analysis in fine grain monitoring tools and metrics and validated our conclusions by reproducing them in synthetic experiments. As a result, this work teaches us some lessons that can be seen as hints to programmers to help LeWI make an efficient use of computational resources and obtain the maximum performance. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Hints to improve automatic load balancing with LeWI for hybrid applications", "paper_id": "WOS:000339643200001"}