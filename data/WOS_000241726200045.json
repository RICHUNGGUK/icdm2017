{"auto_keywords": [{"score": 0.03423934530657415, "phrase": "dddquery"}, {"score": 0.029188827492907903, "phrase": "intermediate_language"}, {"score": 0.00481495049065317, "phrase": "linguistic_query_language"}, {"score": 0.004756805752518494, "phrase": "historic_texts"}, {"score": 0.004476399615305783, "phrase": "linguistic_query_language_dddquery"}, {"score": 0.004263972370406983, "phrase": "large_linguistic_database"}, {"score": 0.004136333933790974, "phrase": "richly_annotated_historic_german_texts"}, {"score": 0.004012500850311087, "phrase": "graph-based_data_model"}, {"score": 0.003939980614608312, "phrase": "multiple_independent_annotation_layers"}, {"score": 0.00386876598761639, "phrase": "shared_text_layer"}, {"score": 0.0037301606780397456, "phrase": "text_layers"}, {"score": 0.003618443379266972, "phrase": "related_texts"}, {"score": 0.0033433365160336842, "phrase": "object-relational_database_system"}, {"score": 0.0032828706086018133, "phrase": "text_retrieval_extension"}, {"score": 0.002889123960992381, "phrase": "sql"}, {"score": 0.002802462902794585, "phrase": "first_order_logic"}, {"score": 0.002636956926079255, "phrase": "query_language"}, {"score": 0.0025423706961391034, "phrase": "underlying_corpus"}, {"score": 0.0023776659786364607, "phrase": "odag"}, {"score": 0.0022923586577645143, "phrase": "relational_schema"}, {"score": 0.0021049977753042253, "phrase": "translation_process"}], "paper_keywords": [""], "paper_abstract": "We describe the design and implementation of the linguistic query language DDDquery. This language aims at querying a large linguistic database storing a corpus of richly annotated historic German texts. We use a graph-based data model that supports multiple independent annotation layers on a shared text layer as well as alignments of text layers representing the same text or related texts (e.g., translations). The corpus is stored in an object-relational database system with a text retrieval extension. DDDquery is based on XPath to leverage the familiarity of many users with this language. It is translated to SQL in a two phase compilation with first order logic as an intermediate language. This approach effectively decouples the query language from the schema of the underlying corpus. We provide an overview of DDDquery, the underlying ODAG data model, its implementation as relational schema, the predicates of the intermediate language, and describe both phases of the translation process.", "paper_title": "Implementing a linguistic query language for historic texts", "paper_id": "WOS:000241726200045"}