{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "system_level"}, {"score": 0.004750178261675602, "phrase": "radic_architecture"}, {"score": 0.00468627326602559, "phrase": "increasing_failure_rate"}, {"score": 0.004644146045859622, "phrase": "high_performance_computing"}, {"score": 0.0045404698551856125, "phrase": "fault_tolerance_mechanisms"}, {"score": 0.004320421465896323, "phrase": "node_faults"}, {"score": 0.004204904449336037, "phrase": "automatic_and_scalable_fault_tolerant_model"}, {"score": 0.0040373708328770306, "phrase": "message_passing_libraries"}, {"score": 0.0038590090616766434, "phrase": "communication_socket"}, {"score": 0.0037898820206470085, "phrase": "faulty_node"}, {"score": 0.003671865026158296, "phrase": "affected_processes"}, {"score": 0.0035898158129721003, "phrase": "healthy_node"}, {"score": 0.003369669078274226, "phrase": "decentralized_model"}, {"score": 0.0032794890195334513, "phrase": "fault_tolerance_system"}, {"score": 0.003134503353065008, "phrase": "decentralized_algorithms"}, {"score": 0.0029959082125682918, "phrase": "key_property"}, {"score": 0.0029689311901364797, "phrase": "current_hpc_system"}, {"score": 0.0027491902732542013, "phrase": "multicore_systems"}, {"score": 0.002592163447843447, "phrase": "exhaustive_experimental_evaluation"}, {"score": 0.0025000115574335693, "phrase": "increasing_number"}, {"score": 0.0022836785412390544, "phrase": "different_socket_communications_libraries"}, {"score": 0.0021727640931660038, "phrase": "elsevier_inc."}, {"score": 0.0021337783230121286, "phrase": "open_access_article"}, {"score": 0.0021049977753042253, "phrase": "cc_by-nc-nd_license"}], "paper_keywords": ["Software fault tolerance", " Resilience", " RADIC", " Message passing", " Semi-coordinated checkpoint", " Uncoordinated checkpoint", " Socket"], "paper_abstract": "The increasing failure rate in High Performance Computing encourages the investigation of fault tolerance mechanisms to guarantee the execution of an application in spite of node faults. This paper presents an automatic and scalable fault tolerant model designed to be transparent for applications and for message passing libraries. The model consists of detecting failures in the communication socket caused by a faulty node. In those cases, the affected processes are recovered in a healthy node and the connections are reestablished without losing data. The Redundant Array of Distributed Independent Controllers architecture proposes a decentralized model for all the tasks required in a fault tolerance system: protection, detection, recovery and masking. Decentralized algorithms allow the application to scale, which is a key property for current HPC system. Three different rollback recovery protocols are defined and discussed with the aim of offering alternatives to reduce overhead when multicore systems are used. A prototype has been implemented to carry out an exhaustive experimental evaluation through Master/Worker and Single Program Multiple Data execution models. Multiple workloads and an increasing number of processes have been taken into account to compare the above mentioned protocols. The executions take place in two multicore Linux clusters with different socket communications libraries. (C) 2015 The Authors. Published by Elsevier Inc. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).", "paper_title": "Fault tolerance at system level based on RADIC architecture", "paper_id": "WOS:000365245300008"}