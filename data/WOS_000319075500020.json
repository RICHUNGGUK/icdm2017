{"auto_keywords": [{"score": 0.038221549515009653, "phrase": "xmalloc"}, {"score": 0.03421787969149637, "phrase": "allocation_throughput"}, {"score": 0.03335306997705366, "phrase": "underlying_memory_allocator"}, {"score": 0.00481495049065317, "phrase": "many-core_machines"}, {"score": 0.0047310525657970615, "phrase": "dynamic_memory_allocation"}, {"score": 0.0046079260641779755, "phrase": "important_feature"}, {"score": 0.004527619017250708, "phrase": "modern_programming_systems"}, {"score": 0.004257360656055417, "phrase": "memory_allocation"}, {"score": 0.004183137595671171, "phrase": "massively_parallel_execution_environments"}, {"score": 0.004074288606298101, "phrase": "cuda"}, {"score": 0.0028652153774536967, "phrase": "efficient_queues"}, {"score": 0.0025328377393370642, "phrase": "memory_allocator_library"}, {"score": 0.002258745901862197, "phrase": "massive_numbers"}], "paper_keywords": ["Malloc", " CUDA", " GPGPU"], "paper_abstract": "Dynamic memory allocation is an important feature of modern programming systems. However, the cost of memory allocation in massively parallel execution environments such as CUDA has been too high for many types of kernels. This paper presents XMalloc, a high-throughput memory allocation mechanism that dramatically magnifies the allocation throughput of an underlying memory allocator. XMalloc embodies two key techniques: allocation coalescing and buffering using efficient queues. This paper describes these two techniques and presents our implementation of XMalloc as a memory allocator library. The library is designed to be called from kernels executed by massive numbers of threads. Our experimental results based on the NVIDIA G480 GPU show that XMalloc magnifies the allocation throughput of the underlying memory allocator by a factor of 48.", "paper_title": "Scalable SIMD-parallel memory allocation for many-core machines", "paper_id": "WOS:000319075500020"}