{"auto_keywords": [{"score": 0.04756494355891956, "phrase": "javascript"}, {"score": 0.00481495049065317, "phrase": "typescript_interfaces"}, {"score": 0.004757643419056999, "phrase": "javascript_libraries"}, {"score": 0.004672953146379813, "phrase": "typescript_programming_language"}, {"score": 0.004617328272121826, "phrase": "optional_types"}, {"score": 0.004375061788023814, "phrase": "existing_javascript_libraries"}, {"score": 0.004322967486451877, "phrase": "interface_declarations"}, {"score": 0.003677280504320636, "phrase": "type_checking"}, {"score": 0.003633464433320317, "phrase": "misguide_code"}, {"score": 0.0035473867669654174, "phrase": "application_code"}, {"score": 0.0034016119212097826, "phrase": "pragmatic_approach"}, {"score": 0.0033011569787033297, "phrase": "typescript_declaration_files"}, {"score": 0.0032229262928681304, "phrase": "javascript_library_implementations"}, {"score": 0.0031654684543975077, "phrase": "key_idea"}, {"score": 0.002910545717767559, "phrase": "library_initialization_state"}, {"score": 0.002841545331522694, "phrase": "light-weight_static_analysis"}, {"score": 0.002790867657645595, "phrase": "library_function_code"}, {"score": 0.0025354258731826148, "phrase": "declaration_files"}, {"score": 0.002445767214680791, "phrase": "analysis_time"}, {"score": 0.0023171750718791713, "phrase": "low_number"}, {"score": 0.0022895278869126848, "phrase": "false_positives"}, {"score": 0.0021953290937408807, "phrase": "library_interface_declarations"}, {"score": 0.002143247921132179, "phrase": "practical_limitations"}, {"score": 0.0021049977753042253, "phrase": "typescript_type_system"}], "paper_keywords": ["Languages", " Verification"], "paper_abstract": "The TypeScript programming language adds optional types to JavaScript, with support for interaction with existing JavaScript libraries via interface declarations. Such declarations have been written for hundreds of libraries, but they can be difficult to write and often contain errors, which may affect the type checking and misguide code completion for the application code in IDEs. We present a pragmatic approach to check correctness of TypeScript declaration files with respect to JavaScript library implementations. The key idea in our algorithm is that many declaration errors can be detected by an analysis of the library initialization state combined with a light-weight static analysis of the library function code. Our experimental results demonstrate the effectiveness of the approach: it has found 142 errors in the declaration files of 10 libraries, with an analysis time of a few minutes per library and with a low number of false positives. Our analysis of how programmers use library interface declarations furthermore reveals some practical limitations of the TypeScript type system.", "paper_title": "Checking Correctness of TypeScript Interfaces for JavaScript Libraries", "paper_id": "WOS:000348907400001"}