{"auto_keywords": [{"score": 0.04942444706912143, "phrase": "uml"}, {"score": 0.00481495049065317, "phrase": "object-oriented_software_development"}, {"score": 0.004283019592801715, "phrase": "software_system"}, {"score": 0.003997891221012094, "phrase": "formal_or_informal_specification_language"}, {"score": 0.0036553070575015344, "phrase": "software_components"}, {"score": 0.0032065418360603293, "phrase": "significant_proportion"}, {"score": 0.00307657476125683, "phrase": "human-generated_code"}, {"score": 0.0029114187110123105, "phrase": "implementation_model"}, {"score": 0.0027551040319267446, "phrase": "specified_constraints"}, {"score": 0.0025666380387417546, "phrase": "limes"}, {"score": 0.002318566141177149, "phrase": "aspect-oriented_programming"}, {"score": 0.0022710523337245337, "phrase": "constraint_checking"}, {"score": 0.002224510044064184, "phrase": "non-invasive_way"}, {"score": 0.0021049977753042253, "phrase": "design_level"}], "paper_keywords": [""], "paper_abstract": "In object-oriented software development, UML artefacts are used to illustrate and define the structure and the behaviour of the software system, while the semantics is usually described in a formal or informal specification language. The specification often consists of sets of constraints defined over the software components. When implementing the model, the specification is taken into consideration by the implementor. Since a significant proportion of the implementation consists of human-generated code, errors may be introduced in the implementation model. To detect these errors, the specified constraints need to be checked in the implementation. In this paper, we present Limes, an imperative constraint implementation language, which adopts aspect-oriented programming to describe constraint checking in a non-invasive way. Limes can be used at the design level, and can add constraint checking to the implementation.", "paper_title": "Limes: An aspect-oriented constraint checking language", "paper_id": "WOS:000239521500023"}