{"auto_keywords": [{"score": 0.04149638088047677, "phrase": "ram"}, {"score": 0.00481495049065317, "phrase": "embedded_systems"}, {"score": 0.004781357546476652, "phrase": "nand_flash"}, {"score": 0.004616859702338596, "phrase": "on-board_storage_capacity_increases"}, {"score": 0.004536735647938243, "phrase": "efficient_indexing_techniques"}, {"score": 0.004319677360634253, "phrase": "nand_flash_constraints"}, {"score": 0.004170996594527844, "phrase": "page-rewrite_constraint"}, {"score": 0.004098578483988551, "phrase": "erase_cycles"}, {"score": 0.003861596041315646, "phrase": "previous_work"}, {"score": 0.0038346288310750804, "phrase": "traditional_indexing_methods"}, {"score": 0.0037812559272269613, "phrase": "flash_constraints"}, {"score": 0.003741712498615481, "phrase": "index_updates"}, {"score": 0.003587616378156851, "phrase": "rewrite_operations"}, {"score": 0.0035625556447293804, "phrase": "flash_memory"}, {"score": 0.0034398445347109396, "phrase": "embedded_system_constraints"}, {"score": 0.003240826566478551, "phrase": "different_alternative"}, {"score": 0.003206916619690171, "phrase": "flash-resident_data"}, {"score": 0.003151184191185831, "phrase": "embedded_context"}, {"score": 0.003042599375218838, "phrase": "index_structure"}, {"score": 0.003010757286626405, "phrase": "purely_sequential_way"}, {"score": 0.002989714021608139, "phrase": "key_lookups"}, {"score": 0.0028166655005289073, "phrase": "data_structures"}, {"score": 0.002767696345005216, "phrase": "bloom_filters"}, {"score": 0.0026722904884984348, "phrase": "comprehensive_analytical_performance_study"}, {"score": 0.0026166287606163145, "phrase": "range_queries"}, {"score": 0.002598333022293788, "phrase": "multi-criteria_queries"}, {"score": 0.002544207840990836, "phrase": "proposed_technique"}, {"score": 0.0024999636244840647, "phrase": "full-fledged_embedded_dbms_engine"}, {"score": 0.002456486927713543, "phrase": "complete_design"}, {"score": 0.0024307637980373552, "phrase": "dbms_engine"}, {"score": 0.002371783323468861, "phrase": "pbfilter_technique"}, {"score": 0.0023469450817019, "phrase": "real_system"}, {"score": 0.002289993730291138, "phrase": "performance_measurements"}, {"score": 0.002226592967032469, "phrase": "real_hardware_platform"}, {"score": 0.0021725557397878565, "phrase": "new_technique"}, {"score": 0.002149799391146313, "phrase": "practical_manner"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["NAND Flash", " Indexing", " Storage", " Embedded systems", " Bloom filter"], "paper_abstract": "NAND Flash has become the most widely used electronic stable storage technology for embedded systems. As on-board storage capacity increases, the need for efficient indexing techniques arises. Such techniques are very challenging to design due to a combination of NAND Flash constraints (e.g., block-erase-before-page-rewrite constraint and limited number of erase cycles) and embedded system constraints (e.g., tiny RAM and resource consumption predictability). Previous work adapted traditional indexing methods to cope with Flash constraints by deferring index updates using a log and batching them to decrease the number of rewrite operations in Flash memory. However, these methods were not designed with embedded system constraints in mind and do not address them properly. In this paper, we propose a different alternative for indexing Flash-resident data that specifically addresses the embedded context. This approach, called PBFilter, organizes the index structure in a purely sequential way. Key lookups are sped up thanks to two principles called Summarization and Partitioning. We instantiate these principles with data structures and algorithms based on Bloom Filters and show the effectiveness of this approach through a comprehensive analytical performance study. Extensions of PBFilter on range queries and multi-criteria queries are also discussed. The proposed technique is integrated into a full-fledged embedded DBMS engine. We describe the complete design of the DBMS engine to illustrate the feasibility of adopting PBFilter technique in a real system. Finally, we show some performance measurements of the prototype on top of a real hardware platform, in order to validate the new technique in a practical manner. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "PBFilter: A flash-based indexing scheme for embedded systems", "paper_id": "WOS:000304847900002"}