{"auto_keywords": [{"score": 0.03583574966327729, "phrase": "multiple_processors"}, {"score": 0.007900024111982646, "phrase": "beta-approximation_algorithm"}, {"score": 0.004815173527967229, "phrase": "bell"}, {"score": 0.004739416327250269, "phrase": "speed-scaled_multiprocessor_scheduling"}, {"score": 0.00453772385360173, "phrase": "multiple_speed-scaled_processors"}, {"score": 0.004293336465549723, "phrase": "speed_s_results"}, {"score": 0.004110549138321181, "phrase": "general_case"}, {"score": 0.004014135205423942, "phrase": "monotonously_increasing_cost_function"}, {"score": 0.003828012660311739, "phrase": "flow_time"}, {"score": 0.0037828412206668206, "phrase": "weighted_flow_time"}, {"score": 0.0036940852452587093, "phrase": "delay_cost_functions"}, {"score": 0.003536720212056521, "phrase": "single_processor"}, {"score": 0.0034949740315415043, "phrase": "randomized_beta_b"}, {"score": 0.0032804824152243106, "phrase": "alpha_th_bell_number"}, {"score": 0.003115908199991072, "phrase": "size_alpha"}, {"score": 0.0030791137853734152, "phrase": "generated_schedule"}, {"score": 0.002947868524740683, "phrase": "optimal_schedule"}, {"score": 0.0028334016912935165, "phrase": "migratory_and_non-migratory_schedules"}, {"score": 0.0027450280220853137, "phrase": "beta-competitive_online_algorithm"}, {"score": 0.002669959049383929, "phrase": "beta_b"}, {"score": 0.0024277864377045995, "phrase": "deterministic_beta_b"}, {"score": 0.0022606512324475584, "phrase": "new_results"}, {"score": 0.0021901023885734, "phrase": "first_constant_factor"}, {"score": 0.002155656133617155, "phrase": "approximation_algorithm"}, {"score": 0.0021049977753042253, "phrase": "arbitrary_release_times"}], "paper_keywords": ["Approximation algorithms", " Online algorithms", " Randomized algorithms", " Scheduling", " Speed-scaling", " Probabilistic analysis"], "paper_abstract": "This paper investigates the problem of scheduling jobs on multiple speed-scaled processors, i.e., we have constant alpha > 1 such that running a processor at speed s results in energy consumption s (alpha) per time unit. We consider the general case where each job has a monotonously increasing cost function that penalizes delay. This includes the so far considered cases of deadlines, flow time, and weighted flow time. For any type of delay cost functions, we obtain the following results: Any beta-approximation algorithm for a single processor yields a randomized beta B (alpha) -approximation algorithm for multiple processors, where B (alpha) is the alpha th Bell number, that is, the number of partitions of a set of size alpha. The generated schedule is without migration, but we compare it to an optimal schedule with migration. Hence, this result holds for migratory and non-migratory schedules. Analogously, we show that any beta-competitive online algorithm for a single processor yields a beta B (alpha) -competitive online algorithm for multiple processors. Finally, we show that any beta-approximation algorithm for multiple processors with migration yields a deterministic beta B (alpha) -approximation algorithm for multiple processors without migration. These facts improve several approximation ratios and lead to new results. For instance, we obtain the first constant factor online and offline approximation algorithm for multiple processors without migration for arbitrary release times, deadlines, and job sizes.", "paper_title": "The Bell Is Ringing in Speed-Scaled Multiprocessor Scheduling", "paper_id": "WOS:000330211400003"}