{"auto_keywords": [{"score": 0.04636908096817835, "phrase": "software_architecture"}, {"score": 0.00481495049065317, "phrase": "software_architecture_reverse_engineering_methods"}, {"score": 0.0040334640350288, "phrase": "potential_architectural_problems"}, {"score": 0.0034332736827447654, "phrase": "architecture_recovery"}, {"score": 0.003306559295382181, "phrase": "version_control_information"}, {"score": 0.003167441161387607, "phrase": "reverse_engineering_method"}, {"score": 0.003100085797251317, "phrase": "change_architecture"}, {"score": 0.003066945490483524, "phrase": "revision_control_system"}, {"score": 0.0028142286985235977, "phrase": "software_architectures"}, {"score": 0.0026384167183586015, "phrase": "case_study"}, {"score": 0.0025962029048520324, "phrase": "large_commercial_system"}, {"score": 0.0023694065215394593, "phrase": "identifiable_problems"}, {"score": 0.002209406458446019, "phrase": "systemic_problems"}, {"score": 0.002174041708084857, "phrase": "underlying_architecture"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["software architecture", " reverse engineering", " maintainability"], "paper_abstract": "Problems related to interactions between components is a sign of problems with the software architecture of the system and are often costly to fix. Thus it is very desirable to identify potential architectural problems and track them across releases to see whether some relationships between components are repeatedly change-prone. This paper shows a study of combining two technologies for software architecture: architecture recovery and change dependency analysis based on version control information. More specifically, it describes a reverse engineering method to derive a change architecture from Revision Control System (RCS) change history. It compares this method to other reverse engineering methods used to derive software architectures using other types of data. These techniques are illustrated in a case study on a large commercial system consisting of over 800 KLOC of C, C + +, and microcode. The results show identifiable problems with a subset of the components and relationships between them, indicating systemic problems with the underlying architecture. (C) 2005 Elsevier B.V. All rights reserved.", "paper_title": "Comparison of software architecture reverse engineering methods", "paper_id": "WOS:000238031900005"}