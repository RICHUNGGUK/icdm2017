{"auto_keywords": [{"score": 0.04269803168773222, "phrase": "exceptional_consistency"}, {"score": 0.04222923751583133, "phrase": "mandatory_consistency"}, {"score": 0.029918210649248395, "phrase": "program_execution"}, {"score": 0.0048150026943728, "phrase": "uml"}, {"score": 0.00478740563679966, "phrase": "interaction_model-driven_runtime_verification"}, {"score": 0.004733046286071369, "phrase": "java"}, {"score": 0.004342430078306461, "phrase": "simple_and_expressive_scenario-based_specifications"}, {"score": 0.004171402455813099, "phrase": "runtime_verification"}, {"score": 0.004123781267600542, "phrase": "java_programs"}, {"score": 0.0038713805573219297, "phrase": "forbidden_scenario"}, {"score": 0.0037618008413274014, "phrase": "iod"}, {"score": 0.0034118234596993836, "phrase": "reference_scenario"}, {"score": 0.0026494723416072316, "phrase": "instrumented_program"}, {"score": 0.002444544487772349, "phrase": "collected_program_execution"}, {"score": 0.002294686545883412, "phrase": "supporting_tool"}, {"score": 0.0022296340517805125, "phrase": "uml_interaction_models"}, {"score": 0.0021789194955896124, "phrase": "automatic_test_oracles"}, {"score": 0.002129356014992349, "phrase": "wrong_temporal_ordering"}, {"score": 0.0021049977753042253, "phrase": "message_interaction"}], "paper_keywords": [""], "paper_abstract": "The authors use unified modelling language (UML) 2.0 interaction overview diagrams (IODs) and sequence diagrams to construct simple and expressive scenario-based specifications, and present an approach to runtime verification of Java programs for exceptional consistency and mandatory consistency. The exceptional consistency requires that any forbidden scenario described by a given IOD never happens during the execution of a program, and the mandatory consistency requires that if a reference scenario described by a given sequence diagram occurs during the execution of a program, it must immediately adhere to a scenario described by a given IOD. In the approach, the authors first instrument a program under verification so as to gather the program execution traces related to a given scenario-based specification; then they drive the instrumented program to execute for generating the program execution traces; finally they check if the collected program execution traces satisfy the given specification. The approach leads to a supporting tool for testing in which UML interaction models are used as automatic test oracles to detect the wrong temporal ordering of message interaction in programs.", "paper_title": "UML interaction model-driven runtime verification of Java programs", "paper_id": "WOS:000289459800005"}