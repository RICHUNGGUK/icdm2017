{"auto_keywords": [{"score": 0.028034011858948417, "phrase": "model_output"}, {"score": 0.004750440867604888, "phrase": "software_components"}, {"score": 0.004671012181488876, "phrase": "fluid_relationship"}, {"score": 0.004351595642056769, "phrase": "integrated_models"}, {"score": 0.00430777589162606, "phrase": "increased_complexity"}, {"score": 0.004040275465056206, "phrase": "whole_integrated_system"}, {"score": 0.003919404114585274, "phrase": "overall_complexity"}, {"score": 0.003626626504149897, "phrase": "independent_development"}, {"score": 0.00348263058839775, "phrase": "integration_challenge"}, {"score": 0.0033218213825698417, "phrase": "software_products"}, {"score": 0.0031258948882273057, "phrase": "data_sets"}, {"score": 0.002951444412262927, "phrase": "module_calibration"}, {"score": 0.0029020077365708966, "phrase": "intermediate_linkage_tool"}, {"score": 0.0028246207858247732, "phrase": "module-independent_baseline_dynamics"}, {"score": 0.0025870463897472943, "phrase": "next_model_input"}, {"score": 0.0024926348205500715, "phrase": "baseline_trajectory"}, {"score": 0.002385479082527538, "phrase": "next_module"}, {"score": 0.002321834168782981, "phrase": "growing_overall_complexity"}, {"score": 0.002275214783528274, "phrase": "important_limiting_factor"}, {"score": 0.002229529362571334, "phrase": "integral_approach"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Modularity", " Calibration", " Integrated modeling", " Integral modeling", " Module linking", " Components"], "paper_abstract": "In many cases model integration treats models as software components only, ignoring the fluid relationship between models and reality, the evolving nature of models and their constant modification and recalibration. As a result, with integrated models we find increased complexity, where changes that used to impact only relatively contained models of subsystems, now propagate throughout the whole integrated system. This makes it harder to keep the overall complexity under control and, in a way, defeats the purpose of modularity, when efficiency is supposed to be gained from independent development of modules. Treating models only as software in solving the integration challenge may give birth to 'integronsters' - constructs that are perfectly valid as software products but ugly or even useless as models. We argue that one possible remedy is to learn to use data sets as modules and integrate them into the models. Then the data that are available for module calibration can serve as an intermediate linkage tool, sitting between modules and providing a module-independent baseline dynamics, which is then incremented when scenarios are to be run. In this case it is not the model output that is directed into the next model input, but model output is presented as a variation around the baseline trajectory, and it is this variation that is then fed into the next module down the chain. However still with growing overall complexity, calibration can become an important limiting factor, giving more promise to the integral approach, when the system is modeled and simplified as a whole. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "'Integronsters', integral and integrated modeling", "paper_id": "WOS:000312517200011"}