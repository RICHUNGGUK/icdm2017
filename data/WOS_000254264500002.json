{"auto_keywords": [{"score": 0.02793829552192061, "phrase": "nth-order_hht"}, {"score": 0.00481495049065317, "phrase": "hexagonal_honeycomb_torus"}, {"score": 0.004566567411073082, "phrase": "parallel_algorithms"}, {"score": 0.0044237033788643715, "phrase": "static_torus-structured_task_graph"}, {"score": 0.004021267064832957, "phrase": "interconnection_networks"}, {"score": 0.0036942726653704213, "phrase": "torus-structured_parallel_algorithm"}, {"score": 0.003578614439758386, "phrase": "hht"}, {"score": 0.0030847461428168614, "phrase": "communication_overhead"}, {"score": 0.0021731423856364003, "phrase": "parallel_algorithm"}], "paper_keywords": [""], "paper_abstract": "A number of parallel algorithms admit a static torus-structured task graph. Hexagonal honeycomb torus (HHT) networks are regarded as promising candidates for interconnection networks. In order to efficiently execute a torus-structured parallel algorithm on an HHT, it is essential to map the tasks to processors so that the communication overhead is minimised. The study proves that a (3n, 2n) torus can be embedded into an nth-order HHT with dilation 3, congestion 4, expansion 1 and load factor 1. Consequently, a parallel algorithm with a (3n, 2n) torus task graph can be executed on an nth-order HHT efficiently.", "paper_title": "Embedding torus in hexagonal honeycomb torus", "paper_id": "WOS:000254264500002"}