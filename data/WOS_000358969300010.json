{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "community_structure"}, {"score": 0.004637478829869904, "phrase": "class_cohesion_measurement"}, {"score": 0.004424768776701965, "phrase": "network_nodes"}, {"score": 0.00422177384286051, "phrase": "densely_connected_subgroup"}, {"score": 0.004028054020045027, "phrase": "wide_applications"}, {"score": 0.003990385737207714, "phrase": "complex_systems"}, {"score": 0.003953068310598579, "phrase": "software_networks"}, {"score": 0.00375395061615019, "phrase": "community_structures"}, {"score": 0.003369322866499541, "phrase": "software_intra-class_structure"}, {"score": 0.003306559295382181, "phrase": "existing_proposed_applications"}, {"score": 0.0032756158688245, "phrase": "software_community_structure"}, {"score": 0.003139903872290182, "phrase": "existing_software_engineering_practices"}, {"score": 0.003081400693055518, "phrase": "baseline_practices"}, {"score": 0.002953711377604328, "phrase": "proposed_approaches"}, {"score": 0.0027916287357898544, "phrase": "software_methods"}, {"score": 0.0027395968397212053, "phrase": "relatively_significant_community_structures"}, {"score": 0.00257708070026329, "phrase": "object-oriented_programs"}, {"score": 0.0024128022009415476, "phrase": "derived_metrics"}, {"score": 0.0023902026696615473, "phrase": "additional_and_useful_measurement"}, {"score": 0.0022589720760078274, "phrase": "new_metrics"}, {"score": 0.0022064376000055764, "phrase": "software_faults"}, {"score": 0.0021652891317252994, "phrase": "existing_metrics"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Class cohesion metrics", " Complex network", " Community structure"], "paper_abstract": "Many complex networked systems exhibit natural divisions of network nodes. Each division, or community, is a densely connected subgroup. Such community structure not only helps comprehension but also finds wide applications in complex systems. Software networks, e.g., Class Dependency Networks, are such networks with community structures, but their characteristics at the function or method call granularity have not been investigated, which are useful for evaluating and improving software intra-class structure. Moreover, existing proposed applications of software community structure have not been directly compared or combined with existing software engineering practices. Comparison with baseline practices is needed to convince practitioners to adopt the proposed approaches. In this paper, we show that networks formed by software methods and their calls exhibit relatively significant community structures. Based on our findings we propose two new class cohesion metrics to measure the cohesiveness of object-oriented programs. Our experiment on 10 large open-source Java programs validate the existence of community structures and the derived metrics give additional and useful measurement of class cohesion. As an application we show that the new metrics are able to predict software faults more effectively than existing metrics. (C) 2015 Elsevier Inc. All rights reserved.", "paper_title": "Exploring community structure of software Call Graph and its applications in class cohesion measurement", "paper_id": "WOS:000358969300010"}