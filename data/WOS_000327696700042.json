{"auto_keywords": [{"score": 0.03782612329479551, "phrase": "quickcheck"}, {"score": 0.00481495049065317, "phrase": "information-flow_control_mechanisms"}, {"score": 0.0042354707960660706, "phrase": "proof_attempts"}, {"score": 0.004058180509184539, "phrase": "broken_definitions"}, {"score": 0.003944112858235306, "phrase": "modern_random_testing_techniques"}, {"score": 0.0037789720824759503, "phrase": "design_process"}, {"score": 0.0031845067058084583, "phrase": "simple_information-flow_abstract_machine"}, {"score": 0.003051073364818384, "phrase": "sophisticated_strategies"}, {"score": 0.002986461855862617, "phrase": "well-distributed_random_programs"}, {"score": 0.002861302930564756, "phrase": "noninterference_properties"}, {"score": 0.002570817338292482, "phrase": "injected_bugs"}, {"score": 0.0025343769150179764, "phrase": "varying_subtlety"}, {"score": 0.0024281181691350085, "phrase": "effective_technique"}, {"score": 0.0023766673143502384, "phrase": "large_counterexamples"}, {"score": 0.0021352776064254195, "phrase": "simple_counterexamples"}], "paper_keywords": ["Security", " Languages", " Design", " random testing", " security", " design", " dynamic information-flow control", " noninterference", " abstract machine", " QuickCheck"], "paper_abstract": "Information-flow control mechanisms are difficult to design and labor intensive to prove correct. To reduce the time wasted on proof attempts doomed to fail due to broken definitions, we advocate modern random testing techniques for finding counterexamples during the design process. We show how to use QuickCheck, a property-based random-testing tool, to guide the design of a simple information-flow abstract machine. We find that both sophisticated strategies for generating well-distributed random programs and readily falsifiable formulations of noninterference properties are critically important. We propose several approaches and evaluate their effectiveness on a collection of injected bugs of varying subtlety. We also present an effective technique for shrinking large counterexamples to minimal, easily comprehensible ones. Taken together, our best methods enable us to quickly and automatically generate simple counterexamples for all these bugs.", "paper_title": "Testing Noninterference, Quickly", "paper_id": "WOS:000327696700042"}