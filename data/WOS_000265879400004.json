{"auto_keywords": [{"score": 0.03009088911745163, "phrase": "honeyadapt"}, {"score": 0.011485581872334867, "phrase": "source_sequence_equations"}, {"score": 0.007188929682150789, "phrase": "sequence_protocols"}, {"score": 0.006748784238649646, "phrase": "sequence_protocol"}, {"score": 0.00481495049065317, "phrase": "peer_computing"}, {"score": 0.0046578649614541995, "phrase": "design_methodology"}, {"score": 0.0046159158660556985, "phrase": "natural_phenomena"}, {"score": 0.004574342831225094, "phrase": "mathematical_models"}, {"score": 0.004128449719260139, "phrase": "discrete_sequence_equations"}, {"score": 0.00406663414150229, "phrase": "difference_equations"}, {"score": 0.0036700484729006136, "phrase": "probabilistic_local_and_message-passing_actions"}, {"score": 0.0034864522257187242, "phrase": "individual_processes"}, {"score": 0.003352256019007896, "phrase": "probabilistic_local_and_message_passing_actions"}, {"score": 0.003099113156350047, "phrase": "article's_second_contribution"}, {"score": 0.002943993876557772, "phrase": "distributed_system"}, {"score": 0.0029262611715147454, "phrase": "threshold_detection"}, {"score": 0.0029086349651683383, "phrase": "interval_detection"}, {"score": 0.0028823939507764238, "phrase": "article's_third_contribution"}, {"score": 0.0028563889983942215, "phrase": "new_self-adaptive_grid_computing_protocol"}, {"score": 0.0027881805415682437, "phrase": "sequence_equations"}, {"score": 0.0027713837460773974, "phrase": "adaptive_bee_foraging_behavior"}, {"score": 0.002705199644897355, "phrase": "grid_applications"}, {"score": 0.002680789041160613, "phrase": "grid_clients"}, {"score": 0.0025697460140513932, "phrase": "application's_dataset"}, {"score": 0.0025312097004307013, "phrase": "grid_client"}, {"score": 0.002419025278429845, "phrase": "good_algorithm"}, {"score": 0.0023399219122055177, "phrase": "continuous_feedback"}, {"score": 0.0022429664506287577, "phrase": "honeysort"}, {"score": 0.002209492620817153, "phrase": "grid"}, {"score": 0.002169607777109063, "phrase": "master-worker_paradigm"}, {"score": 0.0021113714176140895, "phrase": "mathematical_analysis"}], "paper_keywords": ["Algorithms", " Design", " Performance", " Complex adaptive systems", " bio-inspired techniques", " autonomic computing and communication", " design methodology", " sequence equations", " difference equations", " distributed protocols", " grid computing", " sequence protocols", " probabilistic protocols", " adaptivity", " convergence"], "paper_abstract": "We present, and evaluate benefits of, a design methodology for translating natural phenomena represented as mathematical models, into novel, self-adaptive, peer-to-peer (p2p) distributed computing algorithms (protocols). Concretely, our first contribution is a set of techniques to translate discrete sequence equations (also known as difference equations) into new p2p protocols called sequence protocols. Sequence protocols are self-adaptive, scalable, and fault-tolerant, with applicability in p2p settings like Grids. A sequence protocol is a set of probabilistic local and message-passing actions for each process. These actions are translated from terms in a set of source sequence equations. Individual processes do not simulate the source sequence equations completely. Instead, each process executes probabilistic local and message passing actions, so that the emergent round-to-round behavior of the sequence protocol in a p2p system can be probabilistically predicted by the source sequence equations. The article's second contribution is the design and evaluation of a set of sequence protocols for detection of two global triggers in a distributed system: threshold detection and interval detection. This article's third contribution is a new self-adaptive Grid computing protocol called HoneyAdapt. HoneyAdapt is derived from sequence equations modeling adaptive bee foraging behavior in nature. HoneyAdapt is intended for Grid applications that allow Grid clients, at run-time, a choice of algorithms for executing chunks of the application's dataset. HoneyAdapt tells each Grid client how to adaptively select at run-time, for each chunk it receives, a good algorithm for computing the chunk-this selection is based on continuous feedback from other clients. Finally, we design a variant of HoneyAdapt, called HoneySort, for application to Grid parallelized sorting settings using the master-worker paradigm. Our evaluation of these contributions consists of mathematical analysis, large-scale trace-based simulation results, and experimental results from a HoneySort deployment.", "paper_title": "A New Class of Nature-Inspired Algorithms for Self-Adaptive Peer-to-Peer Computing", "paper_id": "WOS:000265879400004"}