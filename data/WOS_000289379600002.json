{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "object-oriented_languages"}, {"score": 0.04660802533264657, "phrase": "multiple_inheritance"}, {"score": 0.004637478829869904, "phrase": "run-time_overhead"}, {"score": 0.00441883624011048, "phrase": "even_more_overhead"}, {"score": 0.0036815763368083197, "phrase": "dynamic_typing"}, {"score": 0.003603327452846714, "phrase": "minimal_spatial_cost"}, {"score": 0.003451766520526601, "phrase": "method_invocation"}, {"score": 0.0033602844686125375, "phrase": "selector_coloring"}, {"score": 0.003306559295382181, "phrase": "subtype_tests"}, {"score": 0.0032189132350239013, "phrase": "pack_encoding"}, {"score": 0.0031504667809625344, "phrase": "attribute_access"}, {"score": 0.0031167895790050405, "phrase": "object_layout"}, {"score": 0.0029064676523923886, "phrase": "object-oriented_programming"}, {"score": 0.0027102997281261733, "phrase": "n-directional_coloring"}, {"score": 0.0023694065215394593, "phrase": "experimental_results"}, {"score": 0.0022213218042340735, "phrase": "bidirectional_coloring"}, {"score": 0.0021857667493036786, "phrase": "best_results"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["object-oriented programming", " multiple inheritance", " late binding", " object layout", " subtype testing", " virtual function tables"], "paper_abstract": "Late binding and subtyping create run-time overhead for object-oriented languages. Dynamic typing and multiple inheritance create even more overhead. Static typing and single inheritance lead to two major invariants, of reference and position, that make the implementation as efficient as possible. Coloring is a technique that preserves these invariants for dynamic typing or multiple inheritance at minimal spatial cost. Coloring has been independently proposed for method invocation under the name of selector coloring, for subtype tests under the name of pack encoding, and for attribute access and object layout. This paper reviews a number of uses of coloring for optimizing object-oriented programming, generalizes them, and specifies several variations, such as bidirectional and n-directional coloring. Coloring is NP-hard, hence compilers that use it depend on heuristics. The paper describes two families of heuristics and presents some experimental results which indicate that coloring is both efficient and tractable and that bidirectional coloring gives the best results. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Coloring, a versatile technique for implementing object-oriented languages", "paper_id": "WOS:000289379600002"}