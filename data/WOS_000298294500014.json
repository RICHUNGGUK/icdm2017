{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "hawkeye"}, {"score": 0.004688321299229397, "phrase": "dataflow_impediments"}, {"score": 0.00458940888106061, "phrase": "parallelization_transformations"}, {"score": 0.00451659023910662, "phrase": "important_vehicle"}, {"score": 0.004304963945457799, "phrase": "software_system"}, {"score": 0.004059673618719782, "phrase": "suitable_parallelization_scope"}, {"score": 0.003910879154656061, "phrase": "performance_bottleneck"}, {"score": 0.0037474693720823643, "phrase": "considerable_available_parallelism"}, {"score": 0.0036100762867678415, "phrase": "candidate_scope"}, {"score": 0.0032969458013463807, "phrase": "difficult_undertaking"}, {"score": 0.0032272929113113203, "phrase": "major_source"}, {"score": 0.003108911488613549, "phrase": "sequential_dependencies"}, {"score": 0.002592693161475495, "phrase": "field-based_dependence_analyses"}, {"score": 0.002537880772794665, "phrase": "concrete_memory_conflicts"}, {"score": 0.0024578219177450876, "phrase": "high_rate"}, {"score": 0.002431699464104896, "phrase": "false_reports"}, {"score": 0.00232995025271599, "phrase": "abstract_semantics"}, {"score": 0.0022928991183989115, "phrase": "data_type"}, {"score": 0.0022087165619569006, "phrase": "implementation_artifacts"}, {"score": 0.0021049977753042253, "phrase": "reported_dependencies"}], "paper_keywords": ["Measurement", " Experimentation", " loop parallelization", " commutativity", " dependence analysis", " dynamic analysis", " abstract data types"], "paper_abstract": "Parallelization transformations are an important vehicle for improving the performance and scalability of a software system. Utilizing concurrency requires that the developer first identify a suitable parallelization scope: one that poses as a performance bottleneck, and at the same time, exhibits considerable available parallelism. However, having identified a candidate scope, the developer still needs to ensure the correctness of the transformation. This is a difficult undertaking, where a major source of complication lies in tracking down sequential dependencies that inhibit parallelization and addressing them. We report on HAWKEYE, a dynamic dependence-analysis tool that is designed to assist programmers in pinpointing such impediments to parallelization. In contrast with field-based dependence analyses, which track concrete memory conflicts and thus suffer from a high rate of false reports, HAWKEYE tracks dependencies induced by the abstract semantics of the data type while ignoring dependencing arising solely from implementation artifacts. This enables a more concise report, where the reported dependencies are more likely to be real as well as intelligible to the programmer.", "paper_title": "HAWKEYE: Effective Discovery of Dataflow Impediments to Parallelization", "paper_id": "WOS:000298294500014"}