{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "static_dependency_pair_method"}, {"score": 0.02892278386101692, "phrase": "argument_filtering_method"}, {"score": 0.0239619532106783, "phrase": "usable_rules"}, {"score": 0.004773040022691547, "phrase": "simply-typed_term_rewriting"}, {"score": 0.004431149592844886, "phrase": "simply-typed_term"}, {"score": 0.004278807087784626, "phrase": "theoretical_basis"}, {"score": 0.004149792080414689, "phrase": "strong_computability"}, {"score": 0.004042295865725559, "phrase": "static_recursive_structure"}, {"score": 0.00398959232769596, "phrase": "definition_dependency"}, {"score": 0.003920384090110374, "phrase": "suitable_constraints"}, {"score": 0.003852371777780562, "phrase": "analysis_result"}, {"score": 0.0028480459059007468, "phrase": "reduction_pairs"}, {"score": 0.0027620516806198354, "phrase": "reduction_order"}, {"score": 0.0025750928944698673, "phrase": "filtering_method"}, {"score": 0.002530359917257626, "phrase": "type_structure"}, {"score": 0.002497319603143104, "phrase": "existing_method"}, {"score": 0.0023902621773166963, "phrase": "reduction_orders"}, {"score": 0.0023384629381463054, "phrase": "type_information"}, {"score": 0.0021049977753042253, "phrase": "argument_filtering"}], "paper_keywords": ["simply-typed term rewriting", " termination", " static dependency pair method", " argument filtering", " usable rule"], "paper_abstract": "A static dependency pair method, proposed by us, can effectively prove termination of simply-typed term rewriting systems (STRSs). The theoretical basis is given by the notion of strong computability. This method analyzes a static recursive structure based on definition dependency. By solving suitable constraints generated by the analysis result, we can prove the termination. Since this method is not applicable to every system, we proposed a class, namely, plain function-passing, as a restriction. In this paper, we first propose the class of safe function-passing, which relaxes the restriction by plain function-passing. To solve constraints, we often use the notion of reduction pairs, which is designed from a reduction order by the argument filtering method. Next, we improve the argument filtering method for STRSs. Our argument filtering method does not destroy type structure unlike the existing method for STRSs. Hence, our method can effectively apply reduction orders which make use of type information. To reduce constraints, the notion of usable rules is proposed. Finally, we enhance the effectiveness of reducing constraints by incorporating argument filtering into usable rules for STRSs.", "paper_title": "Static Dependency Pair Method for Simply-Typed Term Rewriting and Related Techniques", "paper_id": "WOS:000265700800016"}