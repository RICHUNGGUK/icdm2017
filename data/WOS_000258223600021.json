{"auto_keywords": [{"score": 0.04057701431158678, "phrase": "grid_acceleration_structure"}, {"score": 0.00481495049065317, "phrase": "ray_tracing"}, {"score": 0.004646088032529303, "phrase": "acceleration_structures"}, {"score": 0.004483120978156604, "phrase": "render_time"}, {"score": 0.0042819270655224916, "phrase": "build_time"}, {"score": 0.004152818376630929, "phrase": "also_the_memory_footprint"}, {"score": 0.003563172322934695, "phrase": "compact_grid_method"}, {"score": 0.0034911335714333507, "phrase": "static_data_structure"}, {"score": 0.0033857878144822906, "phrase": "minimal_memory_requirements"}, {"score": 0.003250238918180901, "phrase": "grid_cell"}, {"score": 0.0031521392193570846, "phrase": "object_reference"}, {"score": 0.003025915966640355, "phrase": "data_structure"}, {"score": 0.0029951555610569225, "phrase": "linear_time"}, {"score": 0.002949598537993663, "phrase": "hashed_grid_method"}, {"score": 0.0029196116767956273, "phrase": "memory_requirements"}, {"score": 0.0028459677232555176, "phrase": "perfect_hashing"}, {"score": 0.0028026735035370206, "phrase": "row_displacement_compression"}, {"score": 0.0025826247025542213, "phrase": "traditional_methods"}, {"score": 0.0025433263646920364, "phrase": "linked_lists"}, {"score": 0.0025174594088331853, "phrase": "dynamic_arrays"}, {"score": 0.0022041312401435346, "phrase": "interactive_ray_tracing"}, {"score": 0.0021705796895687864, "phrase": "large_models"}, {"score": 0.0021049977753042253, "phrase": "attractive_alternative"}], "paper_keywords": [""], "paper_abstract": "The focus of research in acceleration structures for ray tracing recently shifted from render time to time to image, the sum of build time and render time, and also the memory footprint of acceleration structures now receives more attention. In this paper we revisit the grid acceleration structure in this setting. We present two efficient methods for representing and building a grid. The compact grid method consists of a static data structure for representing a grid with minimal memory requirements, more specifically exactly one index per grid cell and exactly one index per object reference, and an algorithm for building that data structure in linear time. The hashed grid method reduces memory requirements even further by using perfect hashing based on row displacement compression. We show that these methods are more efficient in both time and space than traditional methods based on linked lists and dynamic arrays. We also present a more robust grid traversal algorithm. We show that, for applications where time to image or memory usage is important, such as interactive ray tracing and rendering large models, the grid acceleration structure is an attractive alternative.", "paper_title": "Compact, fast and robust grids for ray tracing", "paper_id": "WOS:000258223600021"}