{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "repast_models"}, {"score": 0.004767261858417823, "phrase": "high-performance_simulations"}, {"score": 0.004720044008835169, "phrase": "repast"}, {"score": 0.004650086856905758, "phrase": "popular_agent_toolkit"}, {"score": 0.004604023526673226, "phrase": "proven_capabilities"}, {"score": 0.004513255056769647, "phrase": "modelling_challenges"}, {"score": 0.0044685410845412745, "phrase": "large_multi-agent_systems"}, {"score": 0.004209369306023422, "phrase": "standalone_workstation"}, {"score": 0.003906357144047631, "phrase": "limited_available_computing_resources"}, {"score": 0.0036250779580069455, "phrase": "high-performance_simulation"}, {"score": 0.0035891316580885665, "phrase": "complex_scalable_models"}, {"score": 0.0035358770665604657, "phrase": "hla_actor_repast"}, {"score": 0.0034317185678527672, "phrase": "lean_actor_infrastructure"}, {"score": 0.003380791705551809, "phrase": "java_actors"}, {"score": 0.0033306180744375616, "phrase": "repast_agents"}, {"score": 0.0032004205378150354, "phrase": "efficient_communications"}, {"score": 0.002955050521440921, "phrase": "-large_custom_control"}, {"score": 0.0028253682745674608, "phrase": "necessary_message_causality_constraints"}, {"score": 0.0028113140998735366, "phrase": "distribution_and_time_management_concerns"}, {"score": 0.0027557911038816256, "phrase": "ieee_standard_hla_middleware"}, {"score": 0.0026480044868438875, "phrase": "software_engineering_process"}, {"score": 0.0025571463140118805, "phrase": "mapping_techniques"}, {"score": 0.0025191653363555193, "phrase": "java_text_annotations"}, {"score": 0.0024941578231560055, "phrase": "aspect-oriented_programming"}, {"score": 0.002444883254621769, "phrase": "code_intrusions"}, {"score": 0.002408565679880478, "phrase": "original_model"}, {"score": 0.0023846534541336326, "phrase": "favour_model_transparency"}, {"score": 0.0023143284925318916, "phrase": "experimental_data"}, {"score": 0.002268598551466928, "phrase": "good_performance_results"}, {"score": 0.0021907299375981356, "phrase": "distributed_version"}, {"score": 0.002158179521369965, "phrase": "classic_mas_benchmark_model"}, {"score": 0.002105007807034302, "phrase": "elsevier"}], "paper_keywords": ["Multi-agent systems", " RePast", " Modelling and distributed simulation", " Actors", " HLA/RTI", " Java", " Text annotation", " AspectJ", " Tileworld"], "paper_abstract": "RePast is a popular agent toolkit with proven capabilities to fulfil the modelling challenges of large multi-agent systems (MASs) The toolkit though is normally used on a standalone workstation and therefore its practical use can be constrained (in space and time) by the limited available computing resources This paper proposes an original approach - HLA_ACTOR_REPAST - aimed to distributing RePast models for high-performance simulation of complex scalable models Novel in HLA_ACTOR_REPAST is an exploitation of a lean actor infrastructure implemented in Java Actors bring to RePast agents such features as migration location-transparent naming efficient communications and a control-centric framework Actors can be orchestrated by an in-the-large custom control structure which is in charge of ensuring the necessary message causality constraints Distribution and time management concerns depend on the IEEE standard HLA middleware The paper first discusses details of the software engineering process underlying the development of HLA_ACTOR_REPAST The mapping techniques assisted by Java text annotations and aspect-oriented programming try to minimize code intrusions in the original model and favour model transparency The paper then furnishes some experimental data which witness the good performance results achieved by applying HLA_ACTOR_REPAST to a distributed version of a classic MAS benchmark model (C) 2010 Elsevier B V All rights reserved", "paper_title": "HLA_ACTOR_REPAST: An approach to distributing RePast models for high-performance simulations", "paper_id": "WOS:000284987900022"}