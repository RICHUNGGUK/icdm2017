{"auto_keywords": [{"score": 0.03707633276877946, "phrase": "data_allocation_algorithm"}, {"score": 0.013804161200635167, "phrase": "integrated_consideration"}, {"score": 0.013542592252167876, "phrase": "quantitative_method"}, {"score": 0.00481495049065317, "phrase": "parallel_information_retrieval"}, {"score": 0.00456159659731398, "phrase": "large_database"}, {"score": 0.004491678520807451, "phrase": "high_query_arrival_rate"}, {"score": 0.004405779372462873, "phrase": "large_scale_parallel_information_retrieval_system"}, {"score": 0.0043215158337835706, "phrase": "storage_cost"}, {"score": 0.004046843083499649, "phrase": "systematical_way"}, {"score": 0.0036459007842756983, "phrase": "communication_overhead"}, {"score": 0.0034806529881619454, "phrase": "variable-sized_data_items"}, {"score": 0.003284550970221379, "phrase": "load_balancing_constraint"}, {"score": 0.0032216622984027558, "phrase": "probability_model"}, {"score": 0.003123527559542239, "phrase": "keyword_popularities"}, {"score": 0.0030994630902300133, "phrase": "data_allocation_result"}, {"score": 0.0028687545730861665, "phrase": "systematical_approach"}, {"score": 0.002846647336160784, "phrase": "large-scale_information_retrieval_system_design"}, {"score": 0.0026965813247045427, "phrase": "ideal_load_balancing"}, {"score": 0.002675797331220082, "phrase": "storage_balancing"}, {"score": 0.0026347074232350503, "phrase": "real-world_application"}, {"score": 0.00257424957319189, "phrase": "load_balancing"}, {"score": 0.002364172626241202, "phrase": "data_items"}, {"score": 0.0023278569001363263, "phrase": "variable_loads"}, {"score": 0.002205079358459154, "phrase": "key_factor"}, {"score": 0.0021796224306652326, "phrase": "load_and_storage_balanced_workstation_cluster"}, {"score": 0.0021544587602892466, "phrase": "real-world_environment"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Load balancing", " Storage balancing", " Parallel information retrieval", " Inverted file"], "paper_abstract": "Many recent major search engines on Internet use a large-scale cluster to store a large database and cope with high query arrival rate. To design a large scale parallel information retrieval system, both performance and storage cost has to be taken into integrated consideration. Moreover, a quantitative method to design the cluster in systematical way is required. This paper proposes posting file partitioning algorithm for these requirements. The partitioning follows the partition-by-document-ID principle to eliminate communication overhead. The kernel of the partitioning is a data allocation algorithm to allocate variable-sized data items for both load and storage balancing. The data allocation algorithm is proven to satisfy a load balancing constraint with asymptotical 1-optimal storage cost. A probability model is established such that query processing throughput can be calculated from keyword popularities and data allocation result. With these results, we show a quantitative method to design a cluster systematically. This research provides a systematical approach to large-scale information retrieval system design. This approach has the following features: (1) the differences to ideal load balancing and storage balancing are negligible in real-world application. (2) Both load balancing and storage balancing can be taken into integrated consideration without conflicting. (3) The data allocation algorithm is capable to deal with data items of variable-sizes and variable loads. An algorithm having all these features together is never achieved before and is the key factor for achieving load and storage balanced workstation cluster in a real-world environment. (C) 2011 Elsevier Inc. All rights reserved.", "paper_title": "Load and storage balanced posting file partitioning for parallel information retrieval", "paper_id": "WOS:000289179300013"}