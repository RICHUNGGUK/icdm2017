{"auto_keywords": [{"score": 0.049270547314558835, "phrase": "parametric_dataflow_analysis"}, {"score": 0.00481495049065317, "phrase": "finding_optimum_abstractions"}, {"score": 0.004347057700479576, "phrase": "large_family"}, {"score": 0.003760685138103153, "phrase": "cheapest_such_abstraction"}, {"score": 0.003423969509052361, "phrase": "counterexample-guided_abstraction_refinement"}, {"score": 0.003309124298009635, "phrase": "novel_meta-analysis"}, {"score": 0.0027194778713860715, "phrase": "generic_framework"}, {"score": 0.0021049977753042253, "phrase": "java_benchmark_programs"}], "paper_keywords": ["Dataflow analysis", " CEGAR", " abstraction refinement", " optimum abstraction", " impossibility", " under-approximation", " Languages", " Verification"], "paper_abstract": "We propose a technique to efficiently search a large family of abstractions in order to prove a query using a parametric dataflow analysis. Our technique either finds the cheapest such abstraction or shows that none exists. It is based on counterexample-guided abstraction refinement but applies a novel meta-analysis on abstract counterexample traces to efficiently find abstractions that are incapable of proving the query. We formalize the technique in a generic framework and apply it to two analyses: a type-state analysis and a thread-escape analysis. We demonstrate the effectiveness of the technique on a suite of Java benchmark programs.", "paper_title": "Finding Optimum Abstractions in Parametric Dataflow Analysis", "paper_id": "WOS:000321865400035"}