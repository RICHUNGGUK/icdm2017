{"auto_keywords": [{"score": 0.03669884834098149, "phrase": "hp"}, {"score": 0.014904813091181576, "phrase": "mc"}, {"score": 0.00481495049065317, "phrase": "histopyramids"}, {"score": 0.004672953146379813, "phrase": "implementation_approach"}, {"score": 0.004617328272121826, "phrase": "marching_cubes"}, {"score": 0.004481132747216135, "phrase": "graphics_hardware"}, {"score": 0.004348936976349555, "phrase": "comparable_graphics_apis"}, {"score": 0.003975200317233532, "phrase": "direct_rendering"}, {"score": 0.003927848423072668, "phrase": "sparse_or_large_volumes"}, {"score": 0.003789137457228946, "phrase": "recently_introduced_geometry_shader"}, {"score": 0.003321008590273796, "phrase": "gpu_data_compaction"}, {"score": 0.0032036590920314725, "phrase": "arbitrary_data_expansion"}, {"score": 0.003053598205821532, "phrase": "data_compaction_and_expansion_process"}, {"score": 0.0028758391869611374, "phrase": "highly_efficient_and_interactive_mc_implementation"}, {"score": 0.002708399936381754, "phrase": "mobile_gpus"}, {"score": 0.002628362641980801, "phrase": "hp_data_expansion"}, {"score": 0.00247529638625566, "phrase": "mobile_visual_computing"}, {"score": 0.002387758958649797, "phrase": "recent_developments"}, {"score": 0.0022218413146898887, "phrase": "parallel_programming_language_cuda"}, {"score": 0.0021821915946356168, "phrase": "unified_device_architecture"}], "paper_keywords": ["volume processing", " marching cubes", " real-time", " GPU", " GPGPU", " histopyramids", " OpenGL", " gather-only", " data expansion", " geometry shader"], "paper_abstract": "We present an implementation approach for Marching Cubes (MC) on graphics hardware for OpenGL 2.0 or comparable graphics APIs. It currently outperforms all other known graphics processing units (GPU)-based iso-surface extraction algorithms in direct rendering for sparse or large volumes, even those using the recently introduced geometry shader (GS) capabilites. To achieve this, we outfit the Histogram Pyramid (HP) algorithm, previously only used in GPU data compaction, with the capability for arbitrary data expansion. After reformulation of MC as a data compaction and expansion process, the HP algorithm becomes the core of a highly efficient and interactive MC implementation. For graphics hardware lacking GSs, such as mobile GPUs, the concept of HP data expansion is easily generalized, opening new application domains in mobile visual computing. Further, to serve recent developments, we present how the HP can be implemented in the parallel programming language CUDA (compute unified device architecture), by using a novel 1D chunk/layer construction.", "paper_title": "High-speed marching cubes using HistoPyramids", "paper_id": "WOS:000261137800004"}