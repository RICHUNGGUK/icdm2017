{"auto_keywords": [{"score": 0.048665502544113524, "phrase": "multiple_characters"}, {"score": 0.010612387000973441, "phrase": "aho-corasick_algorithm"}, {"score": 0.0067530102899008085, "phrase": "assistant_transitions"}, {"score": 0.004753512932910936, "phrase": "string-matching_engine"}, {"score": 0.004363401436068803, "phrase": "matching_engine"}, {"score": 0.003288567185099276, "phrase": "simultaneous_activation"}, {"score": 0.0032604908177429493, "phrase": "multiple_states"}, {"score": 0.0031505544969981096, "phrase": "k-character_ac-nfa"}, {"score": 0.0030837288356760973, "phrase": "concatenation_operations"}, {"score": 0.0029925402963843282, "phrase": "alignment_problem"}, {"score": 0.0027465495490291746, "phrase": "corresponding_output"}, {"score": 0.0026882700311968025, "phrase": "inspected_character"}, {"score": 0.0026538960171433985, "phrase": "priority_multiplexers"}, {"score": 0.002608744950946475, "phrase": "final_matching_outputs"}, {"score": 0.002553382046204689, "phrase": "multicharacter_ac-nfa."}, {"score": 0.0024884913795612707, "phrase": "derived_k-character_transitions"}, {"score": 0.002414861891567233, "phrase": "number_k."}, {"score": 0.002373767863833987, "phrase": "derived_multicharacter_ac-nfa"}, {"score": 0.002283839204519042, "phrase": "resulting_throughput"}, {"score": 0.002216251512062482, "phrase": "hardware_cost"}], "paper_keywords": ["String-matching", " deterministic and nondeterministic finite automaton", " intrusion detection system"], "paper_abstract": "A string-matching engine capable of inspecting multiple characters in parallel can multiply the throughput. However, the space required for implementing a matching engine that can process multiple characters in parallel generally grows exponentially with respect to the characters to be processed in parallel. Based on the Aho-Corasick algorithm (AC-algorithm), this work presents a novel multicharacter transition Nondeterministic Finite Automaton (NFA) approach, called multicharacter AC-NFA, to allow for the inspection of multiple characters in parallel. This approach first converts an AC-trie to an AC-NFA by allowing for the simultaneous activation of multiple states and then converts the AC-NFA to a k-character AC-NFA by an algorithm with concatenation operations and assistant transitions. Additionally, the alignment problem, which occurs while multiple characters are being inspected in parallel, is solved using assistant transitions. Moreover, a corresponding output is provided for each inspected character by introducing priority multiplexers to determine the final matching outputs during implementation of the multicharacter AC-NFA. Consequently, the number of derived k-character transitions grows linearly with respect to the number k. Furthermore, the derived multicharacter AC-NFA is implemented on FPGAs for evaluation. The resulting throughput grows approximately 14 times and the hardware cost grows about 18 times for 16-character AC-NFA implementation, as compared with that for 1-character AC-NFA implementation. The achievable throughput is 21.4Gbps for the 16-character AC-NFA implementation operating at a 167.36MHz clock.", "paper_title": "An Efficient Multicharacter Transition String-Matching Engine Based on the Aho-Corasick Algorithm", "paper_id": "WOS:000330509300004"}