{"auto_keywords": [{"score": 0.038392933069360445, "phrase": "dynamic_limits"}, {"score": 0.01560544606717282, "phrase": "genetic_programming"}, {"score": 0.00481495049065317, "phrase": "bloat_control"}, {"score": 0.004657739551687038, "phrase": "current_bloat_theories"}, {"score": 0.004539005582217309, "phrase": "code_growth"}, {"score": 0.004489046493029801, "phrase": "corresponding_improvement"}, {"score": 0.004374593906165761, "phrase": "serious_problem"}, {"score": 0.004200582085706493, "phrase": "evolutionary_process"}, {"score": 0.004108589735101849, "phrase": "extensive_review"}, {"score": 0.004048378919038729, "phrase": "current_theories"}, {"score": 0.003916098498242888, "phrase": "intense_research"}, {"score": 0.00388729255686046, "phrase": "recent_work"}, {"score": 0.003844478919573134, "phrase": "new_light"}, {"score": 0.0037602557461171478, "phrase": "real_reasons"}, {"score": 0.0037188360359702182, "phrase": "bloat_phenomenon"}, {"score": 0.0035184576341236317, "phrase": "dynamic_limit"}, {"score": 0.003378385493203297, "phrase": "best_solution"}, {"score": 0.0027673496368158545, "phrase": "depth_variants"}, {"score": 0.0026472970609754095, "phrase": "similar_fitness"}, {"score": 0.002618104519194264, "phrase": "baseline_technique"}, {"score": 0.0025892330566358503, "phrase": "significantly_smaller_trees"}, {"score": 0.0024768883044869023, "phrase": "specific_genetic_operators"}, {"score": 0.0024405312482831646, "phrase": "fitness_evaluation"}, {"score": 0.002422552850701705, "phrase": "different_selection_schemes"}, {"score": 0.0023346234464901978, "phrase": "search_process"}, {"score": 0.002192389791199368, "phrase": "static_upper_limit"}, {"score": 0.0021049977753042253, "phrase": "newest_bloat_theory"}], "paper_keywords": ["Genetic programming", " Bloat", " Dynamic limits", " Review", " Bloat theories"], "paper_abstract": "Bloat is an excess of code growth without a corresponding improvement in fitness. This is a serious problem in Genetic Programming, often leading to the stagnation of the evolutionary process. Here we provide an extensive review of all the past and current theories regarding why bloat occurs. After more than 15 years of intense research, recent work is shedding new light on what may be the real reasons for the bloat phenomenon. We then introduce Dynamic Limits, our new approach to bloat control. It implements a dynamic limit that can be raised or lowered, depending on the best solution found so far, and can be applied either to the depth or size of the programs being evolved. Four problems were used as a benchmark to study the efficiency of Dynamic Limits. The quality of the results is highly dependent on the type of limit used: depth or size. The depth variants performed very well across the set of problems studied, achieving similar fitness to the baseline technique while using significantly smaller trees. Unlike many other methods available so far, Dynamic Limits does not require specific genetic operators, modifications in fitness evaluation or different selection schemes, nor does it add any parameters to the search process. Furthermore, its implementation is simple and its efficiency does not rely on the usage of a static upper limit. The results are discussed in the context of the newest bloat theory.", "paper_title": "Dynamic limits for bloat control in genetic programming and a review of past and current bloat theories", "paper_id": "WOS:000264947400003"}