{"auto_keywords": [{"score": 0.049226991195811136, "phrase": "tree_automata"}, {"score": 0.00481495049065317, "phrase": "tree_manipulation"}, {"score": 0.004441059405327222, "phrase": "wide_range"}, {"score": 0.004284302478991387, "phrase": "software_engineering"}, {"score": 0.004023120753104693, "phrase": "immense_practical_use"}, {"score": 0.0038119123317396954, "phrase": "finite_alphabets"}, {"score": 0.0034220655476652683, "phrase": "symbolic_alphabets"}, {"score": 0.00333097896868937, "phrase": "parametric_theories"}, {"score": 0.0032423089921154503, "phrase": "infinite_alphabets"}, {"score": 0.0027575842698911173, "phrase": "main_operations"}, {"score": 0.0026126405272417783, "phrase": "language_equivalence"}, {"score": 0.00247529638625566, "phrase": "decision_procedure"}, {"score": 0.0024093494406195386, "phrase": "alphabet_theory"}, {"score": 0.0023033100935570755, "phrase": "high-level_language"}, {"score": 0.0021049977753042253, "phrase": "preceding_formalisms"}], "paper_keywords": ["Algorithms", " Languages", " Verification", " Symbolic tree transducers", " FAST"], "paper_abstract": "Tree automata and transducers are used in a wide range of applications in software engineering. While these formalisms are of immense practical use, they can only model finite alphabets. To overcome this problem we augment tree automata and transducers with symbolic alphabets represented as parametric theories. Admitting infinite alphabets makes these models more general and succinct than their classic counterparts. Despite this, we show how the main operations, such as composition and language equivalence, remain computable given a decision procedure for the alphabet theory. We introduce a high-level language called FAST that acts as a front-end for the preceding formalisms.", "paper_title": "Fast: A Transducer-Based Language for Tree Manipulation", "paper_id": "WOS:000363261400001"}