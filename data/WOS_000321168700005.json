{"auto_keywords": [{"score": 0.03175135577172972, "phrase": "equivalence_class"}, {"score": 0.00898890480137249, "phrase": "decision_coverage_techniques"}, {"score": 0.004707188147442449, "phrase": "accepted_fact"}, {"score": 0.004680624753255133, "phrase": "software_engineering"}, {"score": 0.0046018264570209765, "phrase": "verification_and_validation_process"}, {"score": 0.0044105602025248936, "phrase": "single_developer"}, {"score": 0.004028572475177205, "phrase": "available_evaluation_techniques"}, {"score": 0.003916098498242888, "phrase": "optimum_quality_results"}, {"score": 0.003893981879985013, "phrase": "different_products"}, {"score": 0.0037320255482878365, "phrase": "available_software_quality_assurance_techniques"}, {"score": 0.003617539106699534, "phrase": "different_techniques"}, {"score": 0.003597102547969587, "phrase": "contextual_behavior"}, {"score": 0.0033893426032054366, "phrase": "decision_coverage"}, {"score": 0.0032208091960514128, "phrase": "practical_knowledge"}, {"score": 0.0031219560710193106, "phrase": "eight_experiments"}, {"score": 0.0026940816246330494, "phrase": "fault_detection_capacity"}, {"score": 0.0025965853546625352, "phrase": "fault_classification"}, {"score": 0.0025097154697345096, "phrase": "code_reading"}, {"score": 0.002495521662819317, "phrase": "stepwise_abstraction_technique"}, {"score": 0.0024120247307686084, "phrase": "aggregation_results"}, {"score": 0.002141134176057931, "phrase": "rigorous_aggregation_technique"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Testing technique", " Aggregation", " Experimentation", " Testing technique effectiveness"], "paper_abstract": "Context: An accepted fact in software engineering is that software must undergo verification and validation process during development to ascertain and improve its quality level. But there are too many techniques than a single developer could master, yet, it is impossible to be certain that software is free of defects. So, it is crucial for developers to be able to choose from available evaluation techniques, the one most suitable and likely to yield optimum quality results for different products. Though, some knowledge is available on the strengths and weaknesses of the available software quality assurance techniques but not much is known yet on the relationship between different techniques and contextual behavior of the techniques. Objective: This research investigates the effectiveness of two testing techniques - equivalence class partitioning and decision coverage and one review technique - code review by abstraction, in terms of their fault detection capability. This will be used to strengthen the practical knowledge available on these techniques. Method: The results of eight experiments conducted over 5 years to investigate the effectiveness of three techniques - code reading by stepwise abstraction, equivalence class partitioning and decision (branch) coverage were aggregated using a less rigorous aggregation process proposed during the course of this work. Results: It was discovered that the equivalence class partitioning and the decision coverage techniques behaved similarly in terms of fault detection capacity (and type of faults caught) based on the programs and fault classification used in the experiments. They both behaved better than the code reading by stepwise abstraction technique. Conclusion: Overall, it can be deducted from the aggregation results that the equivalence class partitioning and the decision coverage techniques used are actually equally capable in terms of the type and number of faults detected. Nevertheless, more experiments is still required in this field so that this result can be verified using a rigorous aggregation technique. (c) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Determining the effectiveness of three software evaluation techniques through informal aggregation", "paper_id": "WOS:000321168700005"}