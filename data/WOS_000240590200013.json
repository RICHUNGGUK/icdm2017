{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pointer_arithmetic"}, {"score": 0.004749646583168342, "phrase": "previous_shape_analysis_algorithms"}, {"score": 0.004653339900995785, "phrase": "memory_model"}, {"score": 0.004436116555817464, "phrase": "discrete_nodes"}, {"score": 0.00422899036681456, "phrase": "access_paths"}, {"score": 0.0040869663676860535, "phrase": "field_names"}, {"score": 0.003284026247389735, "phrase": "separation_logic"}, {"score": 0.003173636240475185, "phrase": "abstract_domain"}, {"score": 0.003025277245730244, "phrase": "abstraction_mechanism"}, {"score": 0.002903628734069691, "phrase": "low-level_ram_view"}, {"score": 0.0024639100414993727, "phrase": "ram."}, {"score": 0.002430411367515404, "phrase": "widening_operator"}, {"score": 0.0022696277881969896, "phrase": "experimental_results"}, {"score": 0.0021340178074057245, "phrase": "classic_algorithms"}, {"score": 0.0021049977753042253, "phrase": "dynamic_memory_management"}], "paper_keywords": [""], "paper_abstract": "Previous shape analysis algorithms use a memory model where the heap is composed of discrete nodes that can be accessed only via access paths built from variables and field names, an assumption that is violated by pointer arithmetic. In this paper we show how this assumption can be removed, and pointer arithmetic embraced, by using an analysis based on separation logic. We describe an abstract domain whose elements are certain separation logic formulae, and an abstraction mechanism that automatically transits between a low-level RAM view of memory and a higher, fictional, view that abstracts from the representation of nodes and multiword linked-lists as certain configurations of the RAM. A widening operator is used to accelerate the analysis. We report experimental results obtained from running our analysis on a number of classic algorithms for dynamic memory management.", "paper_title": "Beyond reachability: Shape abstraction in the presence of pointer arithmetic", "paper_id": "WOS:000240590200013"}