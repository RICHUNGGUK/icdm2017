{"auto_keywords": [{"score": 0.048946208597162526, "phrase": "concurrent_programs"}, {"score": 0.008589944132921546, "phrase": "concurrent_programming"}, {"score": 0.005668137314039797, "phrase": "dsml"}, {"score": 0.004816412594613303, "phrase": "domain"}, {"score": 0.004667360777063324, "phrase": "inevitable_part"}, {"score": 0.004578783486828809, "phrase": "computation_performance"}, {"score": 0.004385555408850022, "phrase": "multi_thread_programming"}, {"score": 0.0042004472903194616, "phrase": "thread_synchronization"}, {"score": 0.004180366119136275, "phrase": "resource_control"}, {"score": 0.003890371758121049, "phrase": "addressed_system"}, {"score": 0.003789137457228946, "phrase": "domain-specific_modeling_language"}, {"score": 0.0037171648669537287, "phrase": "model_driven_development"}, {"score": 0.003594474917760737, "phrase": "higher_abstraction_level"}, {"score": 0.003459191419478298, "phrase": "abstraction_level"}, {"score": 0.003313053707792957, "phrase": "implementation_phases"}, {"score": 0.0031959843979467704, "phrase": "occurring_errors"}, {"score": 0.003031701673462053, "phrase": "higher_level"}, {"score": 0.0030027496113175785, "phrase": "code_level"}, {"score": 0.0028689475587958917, "phrase": "proposed_metamodel"}, {"score": 0.0028279422436488116, "phrase": "abstract_syntax"}, {"score": 0.0027675275077806744, "phrase": "new_language"}, {"score": 0.0027345217071869793, "phrase": "graphical_modeling_tool"}, {"score": 0.002708399936381754, "phrase": "different_instance_models"}, {"score": 0.0026954325211617195, "phrase": "domain_problems"}, {"score": 0.002612640527241776, "phrase": "static_semantic_controls"}, {"score": 0.002538470301402269, "phrase": "architectural_code_generation"}, {"score": 0.0025142166081982523, "phrase": "model_transformation_rules"}, {"score": 0.0024369771797042136, "phrase": "dsml's_leverage"}, {"score": 0.00240790403555452, "phrase": "general_support"}, {"score": 0.002362105010110277, "phrase": "transformation_mechanism"}, {"score": 0.002306108294559403, "phrase": "java"}, {"score": 0.0022840380700501427, "phrase": "performed_experiments"}, {"score": 0.002256785362171597, "phrase": "high_performance"}, {"score": 0.002245975340642921, "phrase": "proposed_language"}, {"score": 0.0021979660485319523, "phrase": "automatic_generation"}, {"score": 0.0021717381001751255, "phrase": "final_code"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Domain-specific Modeling Language", " Metamodel", " Code generation", " Constraint control", " Concurrent programming"], "paper_abstract": "Nowadays, concurrent programs are an inevitable part of many software applications. They can increase the computation performance of the applications by parallelizing their computations. One of the approaches to realize the concurrency is using multi thread programming. However, these systems are structurally complex considering the control of the parallelism (such as thread synchronization and resource control) and also considering the interaction between their components. So, the design of these systems can be difficult and their implementation can be error-prone especially when the addressed system is big and complex. On the other hand, a Domain-specific Modeling Language (DSML) is one of the Model Driven Development (MDD) approaches which tackles this problem. Since DSMLs provide a higher abstraction level, they can lead to reduce the complexities of the concurrent programs. With increasing the abstraction level and generating the artifacts automatically, the performance of developing the software (both in design and implementation phases) is increased, and the efficiency is raised by reducing the probability of occurring errors. Thus, in this paper, a DSML is proposed for concurrent programs, called DSML4CP, to work in a higher level of abstraction than code level. To this end, the concepts of concurrent programs and their relationships are presented in a metamodel. The proposed metamodel provides a context for defining abstract syntax, and concrete syntax of the DSML4CP. This new language is supported by a graphical modeling tool which can visualize different instance models for domain problems. In order to clarify the expressions of the language; the static semantic controls are realized in the form of constraints. Finally, the architectural code generation is fulfilled via model transformation rules using the templates of the concurrent programs. To increase level of the DSML's leverage and to demonstrate the general support of concurrent programming by the DSML, the transformation mechanism of the tool supports two well-known and highly used programming languages for code generation; Java and C#. The performed experiments on two case studies indicate a high performance for proposed language. In this regard, the results show automatic generation of 79% of the final code and 86% of the functions/modules on average. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "DSML4CP: A Domain-specific Modeling Language for Concurrent Programming", "paper_id": "WOS:000366778600007"}