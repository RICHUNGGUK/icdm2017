{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "computing_sum"}, {"score": 0.004633429997452688, "phrase": "fixed_point"}, {"score": 0.004208881856146758, "phrase": "fixed_point_numbers"}, {"score": 0.003154012038613403, "phrase": "hardware_description_language"}, {"score": 0.0027564303939865476, "phrase": "mentor_graphics_leonardo_spectrum"}, {"score": 0.0023178219772486868, "phrase": "hard-wire_and_software_optimizations"}, {"score": 0.0021049977753042253, "phrase": "better_results"}], "paper_keywords": ["Squaring", " sum of squares", " folding", " radix-2", " radix-4", " argument recoding"], "paper_abstract": "Several schemes for computing the sum of squares for fixed point numbers are designed, synthesized, and evaluated in this study. The schemes use radix-2 folding, radix-4 folding, and radix-4 dual recoding approaches for squaring. The schemes have been modeled in hardware description language, simulated, and synthesized using Cadence SOC81 in 45 nm and 90 nm libraries and with Mentor Graphics Leonardo Spectrum for 180 nm. We show delay and area for 16-, 24-, and 32-bit operands. After hard-wire and software optimizations, it is seen that schemes with radix-4 give better results, especially in area.", "paper_title": "Design and evaluation of schemes for computing sum of squares in fixed point", "paper_id": "WOS:000322743700014"}