{"auto_keywords": [{"score": 0.034586756097957375, "phrase": "checking_efficiency"}, {"score": 0.015467388594408032, "phrase": "internetware_applications"}, {"score": 0.012528640962480271, "phrase": "context_inconsistency"}, {"score": 0.009349690464120946, "phrase": "con-c"}, {"score": 0.00481495049065317, "phrase": "context_consistency"}, {"score": 0.004775726266706856, "phrase": "concurrent_checking"}, {"score": 0.004436716583179764, "phrase": "environmental_contexts"}, {"score": 0.004382591802405206, "phrase": "smart_services"}, {"score": 0.0038603905208013482, "phrase": "context_inconsistency_problem"}, {"score": 0.003782174375003052, "phrase": "unexpected_behavior"}, {"score": 0.0035423376631308567, "phrase": "consistency_constraints"}, {"score": 0.003372460634140967, "phrase": "existing_techniques"}, {"score": 0.003331275574328097, "phrase": "different_ways"}, {"score": 0.003223883109446599, "phrase": "different_trade-offs"}, {"score": 0.0030317376771013672, "phrase": "multi-core_computing_capability"}, {"score": 0.0028627183712016894, "phrase": "novel_concurrent_checking_technique"}, {"score": 0.0027817658627604653, "phrase": "huge_volumes"}, {"score": 0.002759058732719621, "phrase": "dynamic_contexts"}, {"score": 0.0026700637696697414, "phrase": "consistency_constraint"}, {"score": 0.002541910967437926, "phrase": "fully_automated_way"}, {"score": 0.0023322317017275803, "phrase": "controlled_experiments"}, {"score": 0.002303720729387236, "phrase": "large-scale_real-world_application"}, {"score": 0.0021049977753042253, "phrase": "incremental_checking"}], "paper_keywords": ["concurrent checking", " consistency constraint", " context inconsistency pervasive computing", " Internetware"], "paper_abstract": "Internetware applications are emerging and being widely used. They can adapt their behavior based on environmental contexts and deliver smart services. These contexts can be subject to various noises, which cause them to be inaccurate, incomplete, or even to conflict with each other. This is known as context inconsistency problem. Context inconsistency can trigger unexpected behavior to applications, and therefore should be prevented. One promising approach is to check contexts against consistency constraints so as to detect the occurrences of context inconsistency at runtime. Existing techniques have attempted different ways to improve the checking efficiency or effectiveness with different trade-offs in space overhead or communication cost. However, none of them has exploited multi-core computing capability to systematically improve the checking efficiency. In this paper, we propose a novel concurrent checking technique Con-C to efficiently detect inconsistencies in huge volumes of dynamic contexts. Con-C derives checking subtasks for each consistency constraint based on its structure and semantics. It achieves this in a fully automated way, and at the same time can guarantee its derived checking subtasks to be persistently balanced. We evaluated Con-C by controlled experiments through a large-scale real-world application. It reported promising results that Con-C improved the checking efficiency by extra 57.0%, in addition to what had been gained by incremental checking.", "paper_title": "Towards context consistency by concurrent checking for Internetware applications", "paper_id": "WOS:000323665900006"}