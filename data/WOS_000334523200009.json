{"auto_keywords": [{"score": 0.04889532068804289, "phrase": "graph_cuts"}, {"score": 0.00481495049065317, "phrase": "graph_cut_optimization"}, {"score": 0.004602773636967002, "phrase": "leading_method"}, {"score": 0.004556901872357751, "phrase": "computer_vision"}, {"score": 0.004377921202912336, "phrase": "globally_optimal_solutions"}, {"score": 0.004334280585565239, "phrase": "popular_minimization_problems"}, {"score": 0.004060986196931943, "phrase": "memory_requirements"}, {"score": 0.003441891354624516, "phrase": "local_condition"}, {"score": 0.0033735490732324713, "phrase": "image_segmentation_context"}, {"score": 0.003066945490483524, "phrase": "unary_terms"}, {"score": 0.0029611289031152856, "phrase": "remaining_nodes"}, {"score": 0.002873331232538783, "phrase": "thin_band"}, {"score": 0.0027881294891497115, "phrase": "segmented_object"}, {"score": 0.002678433668156678, "phrase": "existing_strategies"}, {"score": 0.0026252106881752067, "phrase": "memory_footprint"}, {"score": 0.0025473475682739784, "phrase": "proposed_reduction_criterion"}, {"score": 0.002459414063407306, "phrase": "large_number"}, {"score": 0.002315658491366464, "phrase": "global_minimizer"}, {"score": 0.0022022878843247257, "phrase": "extra_parameters"}, {"score": 0.0021049977753042253, "phrase": "isolated_nodes"}], "paper_keywords": ["Reduction", " Graph cuts", " Segmentation", " Filtering"], "paper_abstract": "In a few years, graph cuts appeared as a leading method in computer vision and graphics due to their efficiency in computing globally optimal solutions to popular minimization problems. Such an approach remains, however, impractical for very large-scale problems due to the memory requirements for storing the graphs. Among the strategies to overcome this situation, an existing one consists in reducing the size of these graphs by only adding the nodes which satisfy a local condition. In the image segmentation context, this means, for instance, that we do not need to consider a node when the unary terms are large in its neighborhood. The remaining nodes are typically located in a thin band around the boundary of the segmented object. In this paper, we detail existing strategies to reduce the memory footprint of graph cuts, describe the proposed reduction criterion, and empirically prove on a large number of experiments that the distance between the minimizer found and the global minimizer remains null or very small. We also provide extra parameters for further reducing the graphs and for removing isolated nodes due to noise.", "paper_title": "A reduction method for graph cut optimization", "paper_id": "WOS:000334523200009"}