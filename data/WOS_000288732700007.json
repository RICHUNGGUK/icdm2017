{"auto_keywords": [{"score": 0.03560511182216905, "phrase": "new_data"}, {"score": 0.015719716506582538, "phrase": "software_quality_prediction_models"}, {"score": 0.015282895392732386, "phrase": "software_quality"}, {"score": 0.00767435857400478, "phrase": "predictive_models"}, {"score": 0.00475437061368627, "phrase": "class_stability"}, {"score": 0.004635477242873163, "phrase": "early_stages"}, {"score": 0.00459165923324494, "phrase": "design_and_development_process"}, {"score": 0.004476816511183382, "phrase": "software_quality_characteristics"}, {"score": 0.0040969285074699, "phrase": "accurate_prediction_models"}, {"score": 0.00393163747242631, "phrase": "software_engineering"}, {"score": 0.003845403454927292, "phrase": "prediction_models"}, {"score": 0.003749155155531426, "phrase": "significant_deterioration"}, {"score": 0.0034308013197924987, "phrase": "software_quality_predictive_models"}, {"score": 0.0032922964156452696, "phrase": "adaptive_approach"}, {"score": 0.003261133560558666, "phrase": "already_built_predictive_models"}, {"score": 0.0030998304961483217, "phrase": "ant_colony_optimization_algorithm"}, {"score": 0.0030704837930305745, "phrase": "adaptation_process"}, {"score": 0.002965229277927781, "phrase": "object-oriented_software_systems"}, {"score": 0.0027653910844724237, "phrase": "software_quality_predictive_problems"}, {"score": 0.002587180385280577, "phrase": "random_guessing"}, {"score": 0.0023899010501421186, "phrase": "adaptive_one"}, {"score": 0.0022860557844373943, "phrase": "common_domain_data"}, {"score": 0.0022500695985527668, "phrase": "context-specific_data"}], "paper_keywords": ["Software quality", " Metric", " Search-based software engineering", " Ant colony optimization"], "paper_abstract": "Context: Assessing software quality at the early stages of the design and development process is very difficult since most of the software quality characteristics are not directly measurable. Nonetheless, they can be derived from other measurable attributes. For this purpose, software quality prediction models have been extensively used. However, building accurate prediction models is hard due to the lack of data in the domain of software engineering. As a result, the prediction models built on one data set show a significant deterioration of their accuracy when they are used to classify new, unseen data. Objective: The objective of this paper is to present an approach that optimizes the accuracy of software quality predictive models when used to classify new data. Method: This paper presents an adaptive approach that takes already built predictive models and adapts them (one at a time) to new data. We use an ant colony optimization algorithm in the adaptation process. The approach is validated on stability of classes in object-oriented software systems and can easily be used for any other software quality characteristic. It can also be easily extended to work with software quality predictive problems involving more than two classification labels. Results: Results show that our approach out-performs the machine learning algorithm C4.5 as well as random guessing. It also preserves the expressiveness of the models which provide not only the classification label but also guidelines to attain it. Conclusion: Our approach is an adaptive one that can be seen as taking predictive models that have already been built from common domain data and adapting them to context-specific data. This is suitable for the domain of software quality since the data is very scarce and hence predictive models built from one data set is hard to generalize and reuse on new data. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "An ant colony optimization algorithm to improve software quality prediction models: Case of class stability", "paper_id": "WOS:000288732700007"}