{"auto_keywords": [{"score": 0.041078685670043524, "phrase": "model_clones"}, {"score": 0.01557106040246272, "phrase": "uml_domain_models"}, {"score": 0.00481495049065317, "phrase": "clone_detection"}, {"score": 0.004723322467153553, "phrase": "code_clones"}, {"score": 0.00433200902751133, "phrase": "strong_evidence"}, {"score": 0.004229158339021651, "phrase": "major_source"}, {"score": 0.004188702178897384, "phrase": "software_faults"}, {"score": 0.004148631410346188, "phrase": "anecdotal_evidence"}, {"score": 0.003608732492631878, "phrase": "language_code"}, {"score": 0.0035741900278634616, "phrase": "visual_models"}, {"score": 0.0035399770257915466, "phrase": "significant_differences"}, {"score": 0.0033094525227603012, "phrase": "code_clone_arena"}, {"score": 0.0030203487665054806, "phrase": "model_clone"}, {"score": 0.002948547333717581, "phrase": "thorough_analysis"}, {"score": 0.0029203055813347874, "phrase": "practical_scenarios"}, {"score": 0.002850875630787708, "phrase": "formal_definition"}, {"score": 0.0027697290872182477, "phrase": "clone_detection_algorithm"}, {"score": 0.0026268961477241026, "phrase": "different_similarity_heuristics"}, {"score": 0.002251813863195168, "phrase": "uml_models"}, {"score": 0.0021049977753042253, "phrase": "field_studies"}], "paper_keywords": ["Model clones", " Model management", " Model evolution", " Model maintenance", " Model similarity"], "paper_abstract": "Code clones (i.e., duplicate fragments of code) have been studied for long, and there is strong evidence that they are a major source of software faults. Anecdotal evidence suggests that this phenomenon occurs similarly in models, suggesting that model clones are as detrimental to model quality as they are to code quality. However, programming language code and visual models have significant differences that make it difficult to directly transfer notions and algorithms developed in the code clone arena to model clones. In this article, we develop and propose a definition of the notion of \"model clone\" based on the thorough analysis of practical scenarios. We propose a formal definition of model clones, specify a clone detection algorithm for UML domain models, and implement it prototypically. We investigate different similarity heuristics to be used in the algorithm, and report the performance of our approach. While we believe that our approach advances the state of the art significantly, it is restricted to UML models, its results leave room for improvements, and there is no validation by field studies.", "paper_title": "Towards clone detection in UML domain models", "paper_id": "WOS:000320446300007"}