{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "database_schema_evolution_process"}, {"score": 0.004771115666493521, "phrase": "database_schema_evolution"}, {"score": 0.004727678014364335, "phrase": "long-standing_challenge"}, {"score": 0.004698938469311569, "phrase": "practical_and_theoretical_importance"}, {"score": 0.004670372812069178, "phrase": "modern_information_systems"}, {"score": 0.0044751952956469864, "phrase": "critical_tasks"}, {"score": 0.004367333454187657, "phrase": "legacy_applications"}, {"score": 0.004301238254323321, "phrase": "labor_saving"}, {"score": 0.004146645277287799, "phrase": "reliable_prediction"}, {"score": 0.00404667000994945, "phrase": "system-produced_documentation"}, {"score": 0.0039611630554706205, "phrase": "historical_queries"}, {"score": 0.0037955107949094124, "phrase": "difficult_problem"}, {"score": 0.003516684084316783, "phrase": "novel_technology"}, {"score": 0.003379859206640552, "phrase": "difficult_and_previously_unsolved_problem"}, {"score": 0.003278230817258323, "phrase": "integrity_constraints_evolution"}, {"score": 0.0031506541919795444, "phrase": "sql-based_schema_modification_operators"}, {"score": 0.0030372887922081706, "phrase": "old_schema"}, {"score": 0.0029730465986338873, "phrase": "new_schema"}, {"score": 0.002866053420470349, "phrase": "integrity_constraints_modification_operators"}, {"score": 0.0028312491793328043, "phrase": "recent_results"}, {"score": 0.002814005426276146, "phrase": "schema_mapping"}, {"score": 0.0027210199396428465, "phrase": "integrity_constraints"}, {"score": 0.002704445718144686, "phrase": "structural_schema_changes"}, {"score": 0.002544141963686395, "phrase": "unified_approach"}, {"score": 0.002364240149100421, "phrase": "schema_evolution_histories"}, {"score": 0.0023212839504822536, "phrase": "equivalent_sequences"}, {"score": 0.0022860825534337255, "phrase": "migration_scripts"}, {"score": 0.0022514137676797985, "phrase": "schema_upgrades"}, {"score": 0.002190326602897302, "phrase": "extensive_testbed"}, {"score": 0.0021637103202214398, "phrase": "scientific_databases"}, {"score": 0.0021505234515372504, "phrase": "web_information_systems"}, {"score": 0.0021179060760390597, "phrase": "aggregate_evolution_histories"}], "paper_keywords": ["Schema evolution", " Rewriting", " Updates", " Mapping", " SMO", " Integrity constraints management", " Relational"], "paper_abstract": "Supporting database schema evolution represents a long-standing challenge of practical and theoretical importance for modern information systems. In this paper, we describe techniques and systems for automating the critical tasks of migrating the database and rewriting the legacy applications. In addition to labor saving, the benefits delivered by these advances are many and include reliable prediction of outcome, minimization of downtime, system-produced documentation, and support for archiving, historical queries, and provenance. The PRISM/PRISM++ system delivers these benefits, by solving the difficult problem of automating the migration of databases and the rewriting of queries and updates. In this paper, we present the PRISM/PRISM++ system and the novel technology that made it possible. In particular, we focus on the difficult and previously unsolved problem of supporting legacy queries and updates under schema and integrity constraints evolution. The PRISM/PRISM++ approach consists in providing the users with a set of SQL-based Schema Modification Operators (SMOs), which describe how the tables in the old schema are modified into those in the new schema. In order to support updates, SMOs are extended with integrity constraints modification operators. By using recent results on schema mapping, the paper (i) characterizes the impact on integrity constraints of structural schema changes, (ii) devises representations that enable the rewriting of updates, and (iii) develop a unified approach for query and update rewriting under constraints. We complement the system with two novel tools: the first automatically collects and provides statistics on schema evolution histories, whereas the second derives equivalent sequences of SMOs from the migration scripts that were used for schema upgrades. These tools were used to produce an extensive testbed containing 15 evolution histories of scientific databases and web information systems, providing over 100 years of aggregate evolution histories and almost 2,000 schema evolution steps.", "paper_title": "Automating the database schema evolution process", "paper_id": "WOS:000313816100005"}