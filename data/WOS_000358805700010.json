{"auto_keywords": [{"score": 0.028343554788725134, "phrase": "freme"}, {"score": 0.00481495049065317, "phrase": "fast_and_scalable_regular_expression"}, {"score": 0.004720717782144015, "phrase": "regular_expression_matching"}, {"score": 0.004610058444728656, "phrase": "modern_content-aware_network_devices"}, {"score": 0.004327429667024575, "phrase": "regular_expressions"}, {"score": 0.0042426974826585695, "phrase": "ever-increasing_number"}, {"score": 0.004110549138321181, "phrase": "regular_expression"}, {"score": 0.004046020290832207, "phrase": "big_challenge"}, {"score": 0.004014135205423942, "phrase": "practical_solutions"}, {"score": 0.003904495523681369, "phrase": "deterministic_finite_automata"}, {"score": 0.0037234376132464463, "phrase": "high_speed"}, {"score": 0.0036940852452587093, "phrase": "linear_scalability"}, {"score": 0.0034674164050273568, "phrase": "fundamentally_different_design"}, {"score": 0.0033328427701162368, "phrase": "regular_expression_patterns"}, {"score": 0.0031782087629067686, "phrase": "state_explosion"}, {"score": 0.0029830992938695007, "phrase": "resulting_segments"}, {"score": 0.0027450280220853137, "phrase": "final_matching_engine"}, {"score": 0.0027233675070644026, "phrase": "freme."}, {"score": 0.0026911959223982727, "phrase": "pattern_partition"}, {"score": 0.0026175952455594277, "phrase": "matching_correctness"}, {"score": 0.002566255769251419, "phrase": "rmt._evaluation"}, {"score": 0.0022606512324475584, "phrase": "nonexplosive_dfa."}, {"score": 0.002207530926563892, "phrase": "state-of-the-art_matching_engines"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Regular expression matching", " Deep inspection", " Pattern partition", " Deterministic finite automata (DFA)"], "paper_abstract": "Regular expression matching has been widely used in modern content-aware network devices, where the content of interest (i.e., patterns) is often specified by regular expressions. Due to the ever-increasing number of patterns, implementing fast and scalable regular expression matching becomes a big challenge. Practical solutions rely mainly on a variety of deterministic finite automata (DFA) deflation techniques, but cannot guarantee both high speed and linear scalability simultaneously. To fully address the problem, in this paper, we present a fundamentally different design: (1) following principles to partition all regular expression patterns (in the given pattern set) into segments, so that state explosion never occurs when converting these segments to DFA, and (2) compiling the resulting segments and their syntagmatic relations, respectively, into DFA and relation mapping table (RMT), which together make up the final matching engine named FREME. Despite the pattern partition, FREME does not sacrifice any matching correctness with the aid of RMT. Evaluation based on real-world pattern sets (open source and commercial) shows that FREME scales linearly with the size of pattern set, meanwhile keeps fast matching based on nonexplosive DFA. In contrast, FREME outperforms state-of-the-art matching engines up to two orders of magnitude. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "FREME: A pattern partition based engine for fast and scalable regular expression matching in practice", "paper_id": "WOS:000358805700010"}