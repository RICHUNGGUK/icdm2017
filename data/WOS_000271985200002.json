{"auto_keywords": [{"score": 0.046007263478270076, "phrase": "grid_site"}, {"score": 0.03800201515370047, "phrase": "computational_node"}, {"score": 0.03049000365293019, "phrase": "job_migration"}, {"score": 0.00481495049065317, "phrase": "large-scale_computational_grids"}, {"score": 0.004764004403553372, "phrase": "existing_fault-tolerance_job"}, {"score": 0.004696909870731282, "phrase": "computational_grids"}, {"score": 0.004252864101987588, "phrase": "autonomous_domain"}, {"score": 0.004075596668736259, "phrase": "multiple_fault-tolerance_strategies"}, {"score": 0.003975609222669783, "phrase": "large-scale_computational_grid"}, {"score": 0.003905689096176873, "phrase": "different_hardware_and_software_requirements"}, {"score": 0.00376950244909, "phrase": "job_checkpointing_mechanism"}, {"score": 0.0037295765964056255, "phrase": "computation_node"}, {"score": 0.0035740424892197155, "phrase": "transient_state"}, {"score": 0.003536179562674877, "phrase": "job_execution"}, {"score": 0.0032937749380725317, "phrase": "last_stored_checkpoint"}, {"score": 0.0031788569040714434, "phrase": "genetic_algorithm"}, {"score": 0.0031563574387360465, "phrase": "job_scheduling"}, {"score": 0.003089807081149139, "phrase": "fault-tolerance_mechanisms_problem"}, {"score": 0.002767613012044169, "phrase": "job_replication_mechanisms"}, {"score": 0.002728557856380231, "phrase": "fault-tolerance_mechanism"}, {"score": 0.0026805109390121706, "phrase": "gene_encoding"}, {"score": 0.002623967178291655, "phrase": "new_chromosome_encoding_approach"}, {"score": 0.0025144238077014114, "phrase": "risk_nature"}, {"score": 0.0024877583128884457, "phrase": "grid_environment"}, {"score": 0.002392375784707278, "phrase": "risk_relationship"}, {"score": 0.002317055705600351, "phrase": "security_demand"}, {"score": 0.0022924784914292026, "phrase": "trust_level"}, {"score": 0.0022762383517229957, "phrase": "simulation_results"}, {"score": 0.0022361384265153677, "phrase": "shorter_makespan"}, {"score": 0.002188947861949892, "phrase": "job_failure_rate"}, {"score": 0.0021503823972534096, "phrase": "sufferage_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Job scheduling", " Computational grid", " Fault tolerance", " Genetic algorithm", " Security"], "paper_abstract": "All existing fault-tolerance job scheduling algorithms for computational grids were proposed under the assumption that all sites apply the same fault-tolerance strategy. They all ignored that each grid site may have its own fault-tolerance strategy because each site is itself an autonomous domain. in fact, it is very common that there are multiple fault-tolerance strategies adopted at the same time in a large-scale computational grid. Various fault-tolerance strategies may have different hardware and software requirements. For instance, if a grid site employs the job checkpointing mechanism, each computation node must have the following ability. Periodically, the computational node transmits the transient state of the job execution to the server. If a job fails, it will migrate to another computational node and resume from the last stored checkpoint. Therefore, in this paper we propose a genetic algorithm for job scheduling to address the heterogeneity of fault-tolerance mechanisms problem in a computational grid. We assume that the system supports four kinds fault-tolerance mechanisms, including the job retry, the job migration without checkpointing, the job migration with checkpointing, and the job replication mechanisms. Because each fault-tolerance mechanism has different requirements for gene encoding, we also propose a new chromosome encoding approach to integrate the four kinds of mechanisms in a chromosome. The risk nature of the grid environment is also taken into account in the algorithm. The risk relationship between jobs and nodes are defined by the security demand and the trust level. Simulation results show that our algorithm has shorter makespan and more excellent efficiencies on improving the job failure rate than the Min-Min and sufferage algorithms. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "An integrated security-aware job scheduling strategy for large-scale computational grids", "paper_id": "WOS:000271985200002"}