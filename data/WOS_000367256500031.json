{"auto_keywords": [{"score": 0.02864039936811681, "phrase": "java"}, {"score": 0.013889285443714296, "phrase": "minute"}, {"score": 0.00481495049065317, "phrase": "giga-scale_exhaustive_points-to_analysis"}, {"score": 0.004466519142879166, "phrase": "precise_points"}, {"score": 0.004143196873246147, "phrase": "large_body"}, {"score": 0.003729335910488339, "phrase": "underlying_dynamic_graph_reachability_problem"}, {"score": 0.003591733916159209, "phrase": "best_algorithms"}, {"score": 0.0035381202759091784, "phrase": "near-cubic_worst-case_runtime_complexity"}, {"score": 0.0028877818105020434, "phrase": "novel_approach"}, {"score": 0.0028021527740710508, "phrase": "field-sensitive_points"}, {"score": 0.0025219085140220773, "phrase": "transitive-closure_data-structure"}, {"score": 0.0023040642263522505, "phrase": "fix-point_calculation"}, {"score": 0.00223570488212345, "phrase": "java_benchmarks"}, {"score": 0.0021857667493036786, "phrase": "superior_performance"}, {"score": 0.0021049977753042253, "phrase": "standard_context-free_language_reachability_implementations"}], "paper_keywords": ["Context-free Language", " Transitive Closure", " Java", " Points-to Analysis"], "paper_abstract": "Computing a precise points-to analysis for very large Java programs remains challenging despite the large body of research on points-to analysis. Any approach must solve an underlying dynamic graph reachability problem, for which the best algorithms have near-cubic worst-case runtime complexity, and, hence, previous work does not scale to programs with millions of lines of code. In this work, we present a novel approach for solving the field-sensitive points-to problem for Java with the means of (1) a transitive-closure data-structure, and (2) a pre-computed set of potentially matching load/store pairs to accelerate the fix-point calculation. Experimentation on Java benchmarks validates the superior performance of our approach over the standard context-free language reachability implementations. Our approach computes a points-to index for the OpenJDK with over 1.5 billion tuples in under a minute.", "paper_title": "Giga-Scale Exhaustive Points-To Analysis for Java in Under a Minute", "paper_id": "WOS:000367256500031"}