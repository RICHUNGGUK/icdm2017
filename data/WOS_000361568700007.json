{"auto_keywords": [{"score": 0.048049228113258645, "phrase": "imperative_programs"}, {"score": 0.04755423452412631, "phrase": "integer_arrays"}, {"score": 0.00481495049065317, "phrase": "verification_strategy"}, {"score": 0.004780334370089564, "phrase": "array_manipulating_programs"}, {"score": 0.004415523687947897, "phrase": "constraint_logic_programs"}, {"score": 0.004213123914295882, "phrase": "hoare_triple"}, {"score": 0.004049096735491828, "phrase": "partial_correctness_property"}, {"score": 0.004005476499933792, "phrase": "imperative_program_prog"}, {"score": 0.0037806195039533355, "phrase": "clp_program_p"}, {"score": 0.0035426543993952184, "phrase": "p._program_verification"}, {"score": 0.003416963042033614, "phrase": "transformation_rules"}, {"score": 0.003367939885018247, "phrase": "new_clp_program"}, {"score": 0.0032601856292942106, "phrase": "p_iff"}, {"score": 0.0030993584115563146, "phrase": "automatic_strategy"}, {"score": 0.0030328769643087066, "phrase": "program_t"}, {"score": 0.002872827714395808, "phrase": "empty_set"}, {"score": 0.0024151333926491878, "phrase": "array_constraints"}, {"score": 0.0023462618437394616, "phrase": "convex_hull_operators"}, {"score": 0.0023042157412517333, "phrase": "linear_integer_constraints"}, {"score": 0.002230418233881411, "phrase": "verimap_transformation_system"}, {"score": 0.0021049977753042253, "phrase": "benchmark_array_programs"}], "paper_keywords": [""], "paper_abstract": "We present a method for verifying properties of imperative programs that manipulate integer arrays. Imperative programs and their properties are represented by using Constraint Logic Programs (CLP) over integer arrays. Our method is refutational. Given a Hoare triple {phi} prog {psi} that defines a partial correctness property of an imperative program prog, we encode the negation of the property as a predicate incorrect defined by a CLP program P, and we show that the property holds by proving that incorrect is not a consequence of P. Program verification is performed by applying a sequence of semantics preserving transformation rules and deriving a new CLP program T such that incorrect is a consequence of P iff it is a consequence of T. The rules are applied according to an automatic strategy whose objective is to derive a program T that satisfies one of the following properties: either (i) T is the empty set of clauses, hence proving that incorrect does not hold and prog is correct, or (ii) T contains the fact incorrect, hence proving that prog is incorrect. Our transformation strategy makes use of an axiomatization of the theory of arrays for the manipulation of array constraints, and also applies the widening and convex hull operators for the generalization of linear integer constraints. The strategy has been implemented in the VeriMAP transformation system and it has been shown to be quite effective and efficient on a set of benchmark array programs taken from the literature.", "paper_title": "A Rule-based Verification Strategy for Array Manipulating Programs", "paper_id": "WOS:000361568700007"}