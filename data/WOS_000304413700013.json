{"auto_keywords": [{"score": 0.028753269979759327, "phrase": "throughput"}, {"score": 0.024797657698628885, "phrase": "cs"}, {"score": 0.00481495049065317, "phrase": "relaxed_concurrency_control"}, {"score": 0.004624751696958501, "phrase": "today's_tm_systems"}, {"score": 0.004223708778943785, "phrase": "simple_algorithm"}, {"score": 0.004160319763461951, "phrase": "fast_transactional_operations"}, {"score": 0.003955787027818301, "phrase": "high_contention"}, {"score": 0.0031845067058084583, "phrase": "conflicting_accesses"}, {"score": 0.003058515297281172, "phrase": "stm_system"}, {"score": 0.002952356518921907, "phrase": "standard_benchmarks"}, {"score": 0.002764856305713066, "phrase": "long_transactions"}, {"score": 0.0027370835853738626, "phrase": "high_abort_rates"}, {"score": 0.0023405257495466352, "phrase": "transactional_programming_model"}, {"score": 0.0022706700510423954, "phrase": "adaptive_approach"}, {"score": 0.0021049977753042253, "phrase": "low_abort_rates"}], "paper_keywords": ["Transactional memory", " serializability", " concurrent programming", " synchronization"], "paper_abstract": "Some of today's TM systems implement the two-phase-locking (2PL) algorithm which aborts transactions every time a conflict occurs. 2PL is a simple algorithm that provides fast transactional operations. However, it limits concurrency in benchmarks with high contention because it increases the rate of aborts. We propose the use of a more relaxed concurrency control algorithm to provide better concurrency. This algorithm is based on the conflict-serializability (CS) model. Unlike 2PL, it allows some transactions to commit successfully even when they make conflicting accesses. We implement this algorithm in a STM system and evaluate its performance on 16 cores using standard benchmarks. Our evaluation shows that the algorithm improves the performance of applications with long transactions and high abort rates. Throughput is improved by up to 2.99 times despite the overheads of testing for CS at runtime. These improvements come with little additional implementation complexity and require no changes to the transactional programming model. We also propose an adaptive approach that switches between 2PL and CS to mitigate the overhead in applications that have low abort rates.", "paper_title": "Relaxed Concurrency Control in Software Transactional Memory", "paper_id": "WOS:000304413700013"}