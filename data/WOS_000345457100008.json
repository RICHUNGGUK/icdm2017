{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "unconventional_computing"}, {"score": 0.004067635935640407, "phrase": "non-standard_programming_frameworks"}, {"score": 0.0036144035798673967, "phrase": "formal_verification"}, {"score": 0.0029020077365708966, "phrase": "unconventional_substrates"}, {"score": 0.002450864311898833, "phrase": "conventional_verification_tools"}, {"score": 0.0022145052062614514, "phrase": "unconventional_programs"}, {"score": 0.0021049977753042253, "phrase": "logical_xor_gate"}], "paper_keywords": [""], "paper_abstract": "As unconventional computation matures and non-standard programming frameworks are demonstrated, the need for formal verification will become more prevalent. This is so because \"programming\" in unconventional substrates is difficult. In this paper we show how conventional verification tools can be used to verify unconventional programs implementing a logical XOR gate.", "paper_title": "Conventional Verification for Unconventional Computing: a Genetic XOR Gate Example", "paper_id": "WOS:000345457100008"}