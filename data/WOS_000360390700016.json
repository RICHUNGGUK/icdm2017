{"auto_keywords": [{"score": 0.05007712399672984, "phrase": "hadoop_mapreduce_framework"}, {"score": 0.03421376944965005, "phrase": "hadoop"}, {"score": 0.00475924837336259, "phrase": "high-performance_storage_devices"}, {"score": 0.004704187604192605, "phrase": "solid-state_drives"}, {"score": 0.004542780650208743, "phrase": "attractive_alternative"}, {"score": 0.004490212943845175, "phrase": "hard_disk_drives"}, {"score": 0.00418732827146127, "phrase": "ssd"}, {"score": 0.004067152645111547, "phrase": "hadoop_framework"}, {"score": 0.003950453462399077, "phrase": "indiscriminate_ssd_integration"}, {"score": 0.0034753508746887957, "phrase": "energy_consumption"}, {"score": 0.0033952989364738353, "phrase": "extensible_best_practices_that_can_exploit_ssd_benefits_within_hadoop_when_combined_with_high_network_bandwidth_and_increased_parallel_storage_access"}, {"score": 0.003021781956684419, "phrase": "faster_ssds"}, {"score": 0.00278497898719426, "phrase": "significant_efficiency"}, {"score": 0.002736694413701639, "phrase": "intermediate_hadoop_data"}, {"score": 0.002658068304632523, "phrase": "hadoop_distributed_file_system"}, {"score": 0.002566685388128598, "phrase": "proposed_configuration"}, {"score": 0.00249293148301837, "phrase": "jvm_reuse_option"}, {"score": 0.0024640253074497114, "phrase": "frequent_heartbeat_interval_option"}, {"score": 0.002324433454350402, "phrase": "state-of-the-art_non-volatile_memory_express_interface_ssd"}, {"score": 0.0022576370233921964, "phrase": "hdfs"}, {"score": 0.0021672995161145276, "phrase": "high-performance_ssds"}, {"score": 0.002129701089817251, "phrase": "complete_system_performance_improvement"}], "paper_keywords": ["Performance", " Storage", " SSD", " Hadoop", " MapReduce", " HDFS"], "paper_abstract": "Solid-state drives (SSDs) are an attractive alternative to hard disk drives (HDDs) to accelerate the Hadoop MapReduce Framework. However, the SSD characteristics and today's Hadoop framework exhibit mismatches that impede indiscriminate SSD integration. This paper explores how to optimize a Hadoop MapReduce Framework with SSDs in terms of performance, cost, and energy consumption. It identifies extensible best practices that can exploit SSD benefits within Hadoop when combined with high network bandwidth and increased parallel storage access. Our Terasort benchmark results demonstrate that Hadoop currently does not sufficiently exploit SSD throughput. Hence, using faster SSDs in Hadoop does not enhance its performance. We show that SSDs presently deliver significant efficiency when storing intermediate Hadoop data, leaving HDDs for Hadoop Distributed File System (HDFS). The proposed configuration is optimized with the JVM reuse option and frequent heartbeat interval option. Moreover, we examined the performance of a state-of-the-art non-volatile memory express interface SSD within the Hadoop MapReduce Framework. While HDFS read and write throughput increases with high-performance SSDs, achieving complete system performance improvement requires carefully balancing CPU, network, and storage resource capabilities at a system level.", "paper_title": "Optimizing the Hadoop MapReduce Framework with high-performance storage devices", "paper_id": "WOS:000360390700016"}