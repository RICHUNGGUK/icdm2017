{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multiple-component_defects"}, {"score": 0.04113670333751854, "phrase": "architectural_defects"}, {"score": 0.034707635252212515, "phrase": "development_phases"}, {"score": 0.0046079260641779755, "phrase": "large_software_system"}, {"score": 0.004461761855323898, "phrase": "common_goal"}, {"score": 0.004371160978838441, "phrase": "envisaged_system"}, {"score": 0.004244899702076962, "phrase": "foundational_design_decisions"}, {"score": 0.00408617426304956, "phrase": "system_architectures"}, {"score": 0.00405039292112851, "phrase": "twice_as_much_correction_effort"}, {"score": 0.0038309141193444015, "phrase": "previous_research"}, {"score": 0.0037311260623089436, "phrase": "software_systems"}, {"score": 0.0035705347414368726, "phrase": "case_study"}, {"score": 0.003447035529485425, "phrase": "architectural_importance-differ"}, {"score": 0.0031938648476635225, "phrase": "highly_mcd-concentrated_components"}, {"score": 0.002749874387654599, "phrase": "mcd"}, {"score": 0.002540285736232122, "phrase": "defect_detection"}, {"score": 0.002459545376635285, "phrase": "subject_system's_components"}, {"score": 0.002332909962395378, "phrase": "multiple_system_releases"}, {"score": 0.002212780203829396, "phrase": "preventive_maintenance"}, {"score": 0.0021998194157393353, "phrase": "architectural_quality_improvement"}, {"score": 0.002148729349266374, "phrase": "empirical_study"}, {"score": 0.002129877319760485, "phrase": "large_legacy_software_system"}], "paper_keywords": ["Software architecture", " Architectural hotspot", " Multiple-component defects", " Large legacy system", " Case study", " Architectural quality", " Software maintenance"], "paper_abstract": "The architecture of a large software system is widely considered important for such reasons as: providing a common goal to the stakeholders in realising the envisaged system; helping to organise the various development teams; and capturing foundational design decisions early in the development. Studies have shown that defects originating in system architectures can consume twice as much correction effort as that for other defects. Clearly, then, scientific studies on architectural defects are important for their improved treatment and prevention. Previous research has focused on the extent of architectural defects in software systems. For this paper, we were motivated to ask the following two complementary questions in a case study: (i) How do multiple-component defects (MCDs)-which are of architectural importance-differ from other types of defects in terms of (a) complexity and (b) persistence across development phases and releases? and (ii) How do highly MCD-concentrated components (the so called, architectural hotspots) differ from other types of components in terms of their (a) interrelationships and (b) persistence across development phases and releases? Results indicate that MCDs are complex to fix and are persistent across phases and releases. In comparison to a non-MCD, a MCD requires over 20 times more changes to fix it and is 6 to 8 times more likely to cross a phase or a release. These findings have implications for defect detection and correction. Results also show that 20% of the subject system's components contain over 80% of the MCDs and that these components are 2-3 times more likely to persist across multiple system releases than other components in the system. Such MCD-concentrated components constitute architectural \"hotspots\" which management can focus upon for preventive maintenance and architectural quality improvement. The findings described are from an empirical study of a large legacy software system of size over 20 million lines of code and age over 17 years.", "paper_title": "Characteristics of multiple-component defects and architectural hotspots: a large system case study", "paper_id": "WOS:000293978900005"}