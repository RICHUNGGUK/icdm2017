{"auto_keywords": [{"score": 0.03049899545078747, "phrase": "haskell"}, {"score": 0.00481495049065317, "phrase": "pssm_probabilities"}, {"score": 0.004718897469501381, "phrase": "lazy_dynamic_programming"}, {"score": 0.004624751696958501, "phrase": "position-specific_scoring_matrices"}, {"score": 0.0043533862892678864, "phrase": "approximate_string_patterns"}, {"score": 0.0038186039088445524, "phrase": "important_problem"}, {"score": 0.003522579870903474, "phrase": "statistical_significance"}, {"score": 0.003282383509542342, "phrase": "currently_most_efficient_algorithm"}, {"score": 0.0024247382451294255, "phrase": "resulting_program"}, {"score": 0.0022365262201954643, "phrase": "dynamic_programming"}, {"score": 0.0021049977753042253, "phrase": "typical_dynamic_programming_matrix"}], "paper_keywords": [""], "paper_abstract": "Position-specific scoring matrices are one way to represent approximate string patterns, which are commonly encountered in the field of bioinformatics. An important problem that arises with their application is calculating the statistical significance of matches. We review the currently most efficient algorithm for this task, and show how it can be implemented in Haskell, taking advantage of the built-in non-strictness of the language. The resulting program turns out to be an instance of dynamic programming, using lists rather the typical dynamic programming matrix.", "paper_title": "Calculating PSSM probabilities with lazy dynamic programming", "paper_id": "WOS:000235071300005"}