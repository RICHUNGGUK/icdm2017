{"auto_keywords": [{"score": 0.049324540543845184, "phrase": "mlf"}, {"score": 0.004814951205790094, "phrase": "mlf."}, {"score": 0.004590820632326585, "phrase": "new_type_system"}, {"score": 0.004000300205357838, "phrase": "ml"}, {"score": 0.0036942726653704213, "phrase": "curry-style_version"}, {"score": 0.0034299649219748513, "phrase": "instantiation-closed_sets"}, {"score": 0.0033937776228549557, "phrase": "system-f"}, {"score": 0.0031176485976102688, "phrase": "equivalent_syntactic_definition"}, {"score": 0.0029565620771207003, "phrase": "inference_rules"}, {"score": 0.002744888626958772, "phrase": "curry-style_system_f"}, {"score": 0.002208035721125305, "phrase": "system_f"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["ML", " System F", " Type inference", " Type checking", " Polymorphism", " First-class polymorphism"], "paper_abstract": "The language MLF is a proposal for a new type system that supersedes both ML and System F, allows for efficient, predictable, and complete type inference for partially annotated terms. In this work, we revisit the definition of ML following a more progressive approach and focusing on the design-space and expressiveness. We introduce a Curry-style version iML(F) of MLF and provide an interpretation of iML(F) types as instantiation-closed sets of System-F types, from which we derive the definition of type-instance in iML(F) We give equivalent syntactic definition of the type-instance, presented as a set of inference rules. We also show an encoding of iML(F) into the closure of Curry-style System F by let-expansion. We derive the Church-style version eML(F) by refining types of iML(F) so as to distinguish between given and inferred polymorphism. We show an embedding of ML in eML(F) and a straightforward encoding of System F into eML(F). (C) 2009 Elsevier Inc. All rights reserved.", "paper_title": "Recasting MLF", "paper_id": "WOS:000267337100004"}