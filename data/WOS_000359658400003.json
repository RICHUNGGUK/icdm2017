{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "haskell"}, {"score": 0.04264216805839658, "phrase": "eniac"}, {"score": 0.004581505405526037, "phrase": "practical_logics"}, {"score": 0.0044968982227349625, "phrase": "eniac."}, {"score": 0.004359328949187473, "phrase": "curry's_work"}, {"score": 0.0041478818670853115, "phrase": "inverse_interpolation"}, {"score": 0.003802135020791801, "phrase": "program_composition"}, {"score": 0.0035951877427580006, "phrase": "curry's_hands-on_experience"}, {"score": 0.003336614511719501, "phrase": "formal_logic"}, {"score": 0.003135356056324338, "phrase": "compact_'notation"}, {"score": 0.0030965805992969027, "phrase": "program_construction"}, {"score": 0.0029097582786754444, "phrase": "mechanical_synthesis"}, {"score": 0.0028206052780047424, "phrase": "curry's_systematic_programming_technique"}, {"score": 0.0027172101552870973, "phrase": "goldstine-von_neumann_style"}, {"score": 0.0025532173213934422, "phrase": "automatic_programming"}, {"score": 0.0024904187737391807, "phrase": "explicit_hardware_optimizations"}, {"score": 0.002429161048032688, "phrase": "computer_history"}, {"score": 0.0023990982005125763, "phrase": "backus'_famous_acm_turing_award_lecture"}, {"score": 0.002212535878761148, "phrase": "integrative_historiographical_approach"}, {"score": 0.0021050027911481382, "phrase": "curry"}], "paper_keywords": ["ENIAC", " Haskell B. curry", " theory of programming", " combinatory logic", " interpolation", " arithmetic compiler"], "paper_abstract": "This article expands on Curry's work on how to implement the problem of inverse interpolation on the ENIAC (1946) and his subsequent work on developing a theory of program composition (1948-1950). It is shown that Curry's hands-on experience with the ENIAC on the one side and his acquaintance with systems of formal logic on the other, were conductive to conceive a compact 'notation for program construction' which in turn would be instrumental to a mechanical synthesis of programs. Since Curry's systematic programming technique pronounces a critique of the Goldstine-von Neumann style of coding, his 'calculus of program composition'not only anticipates automatic programming but also proposes explicit hardware optimizations largely unperceived by computer history until Backus' famous ACM Turing Award lecture (1977). The cohesion of these findings asks for an integrative historiographical approach. An appendix gives, for the first time, a full description of Curry's arithmetic compiler.", "paper_title": "Haskell before Haskell: an alternative lesson in practical logics of the ENIAC", "paper_id": "WOS:000359658400003"}