{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "load-store_queue"}, {"score": 0.004667149874736771, "phrase": "power_reduction"}, {"score": 0.003931402465972151, "phrase": "superscalar_processors"}, {"score": 0.0036648265911110164, "phrase": "alternate_lsq_organization"}, {"score": 0.003552204377093386, "phrase": "time-critical_forwarding_functionality"}, {"score": 0.0030865992688177005, "phrase": "store-forwarding_logic"}, {"score": 0.002599365215003002, "phrase": "checking_structure"}, {"score": 0.0021049977753042253, "phrase": "lsq_dynamic_power"}], "paper_keywords": [""], "paper_abstract": "Because they are based on large, content-addressable memories, load-store queues (LSQs) present implementation challenges in superscalar processors. In this paper, we propose an alternate LSQ organization that separates the time-critical forwarding functionality from the process of checking that loads received their correct values. Two main techniques are exploited: First, the store-forwarding logic is accessed only by those loads and stores that are likely to be involved in forwarding, and second, the checking structure is banked by address. The result of these techniques is that the LSQ can be implemented by a collection of small, low-bandwidth structures yielding an estimated three to five times reduction in LSQ dynamic power.", "paper_title": "Decomposing the load-store queue by function for power reduction and scalability", "paper_id": "WOS:000236833100011"}