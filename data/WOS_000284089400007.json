{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "computer_worms_using_model_checking"}, {"score": 0.0047448515702010734, "phrase": "recent_estimates"}, {"score": 0.004540591176992658, "phrase": "trojan_horses"}, {"score": 0.004345085569121329, "phrase": "previously_existing_malware"}, {"score": 0.003940122359770492, "phrase": "program_behavior"}, {"score": 0.0037519679864796906, "phrase": "signature_databases"}, {"score": 0.003715425273229361, "phrase": "current_antivirus_tools"}, {"score": 0.0036792371574197826, "phrase": "proactive_malware_detectors"}, {"score": 0.0035902958977673313, "phrase": "detection_procedures"}, {"score": 0.003520687960750365, "phrase": "single_signature"}, {"score": 0.0034693659976716197, "phrase": "whole_classes"}, {"score": 0.0034355662264234864, "phrase": "functionally_related_malware"}, {"score": 0.0034020946201397057, "phrase": "signature_updates"}, {"score": 0.0032554492909625653, "phrase": "proactive_detection_procedures"}, {"score": 0.002937318465594425, "phrase": "model_checking"}, {"score": 0.002783250284824728, "phrase": "proactive_malware_detection"}, {"score": 0.002663208600887875, "phrase": "annotated_control_flow_graph"}, {"score": 0.002535876002754739, "phrase": "formal_malware_specification"}, {"score": 0.0024264776194357993, "phrase": "new_specification_language_ctpl"}, {"score": 0.0023677483882740317, "phrase": "high_expressive_power"}, {"score": 0.002333193766510394, "phrase": "malware_signatures"}, {"score": 0.0023104373174118458, "phrase": "efficient_model_checking_algorithms"}, {"score": 0.002157223877108711, "phrase": "existing_malware"}, {"score": 0.002125735077004312, "phrase": "low_risk"}, {"score": 0.0021049977753042253, "phrase": "false_positives"}], "paper_keywords": ["Invasive software", " model checking"], "paper_abstract": "Although recent estimates are speaking of 200,000 different viruses, worms, and Trojan horses, the majority of them are variants of previously existing malware. As these variants mostly differ in their binary representation rather than their functionality, they can be recognized by analyzing the program behavior, even though they are not covered by the signature databases of current antivirus tools. Proactive malware detectors mitigate this risk by detection procedures that use a single signature to detect whole classes of functionally related malware without signature updates. It is evident that the quality of proactive detection procedures depends on their ability to analyze the semantics of the binary. In this paper, we propose the use of model checking-a well-established software verification technique-for proactive malware detection. We describe a tool that extracts an annotated control flow graph from the binary and automatically verifies it against a formal malware specification. To this end, we introduce the new specification language CTPL, which balances the high expressive power needed for malware signatures with efficient model checking algorithms. Our experiments demonstrate that our technique indeed is able to recognize variants of existing malware with a low risk of false positives.", "paper_title": "Proactive Detection of Computer Worms Using Model Checking", "paper_id": "WOS:000284089400007"}