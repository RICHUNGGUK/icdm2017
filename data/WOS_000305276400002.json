{"auto_keywords": [{"score": 0.04664571852812289, "phrase": "metric_indexing"}, {"score": 0.02416709956108294, "phrase": "better_performance"}, {"score": 0.00481495049065317, "phrase": "pivot-based_indexing"}, {"score": 0.0046394362688524475, "phrase": "standard_database_indexes"}, {"score": 0.004596561972944185, "phrase": "query_processing"}, {"score": 0.004408456735066782, "phrase": "laesa_approach"}, {"score": 0.004247696749118451, "phrase": "pivot-based_indexes"}, {"score": 0.00415019999222481, "phrase": "well-known_optimization_techniques"}, {"score": 0.0037820003983334476, "phrase": "cost-based_approach"}, {"score": 0.0031697368057340895, "phrase": "available_pivots"}, {"score": 0.003096905353118796, "phrase": "optimized_approach"}, {"score": 0.003068242064611088, "phrase": "half_the_response_times"}, {"score": 0.0030398432591176357, "phrase": "main_memory_data"}, {"score": 0.0029288446848334576, "phrase": "disk_resident_data"}, {"score": 0.0028218877037665484, "phrase": "cost_model"}, {"score": 0.0026195184143518713, "phrase": "sequential_scan"}, {"score": 0.0025832180231667853, "phrase": "base_data"}, {"score": 0.0021049977753042253, "phrase": "best_pivots"}], "paper_keywords": ["Similarity search", " Pivot-based indexing", " Database trees", " Optimized query processing"], "paper_abstract": "This paper evaluates the use of standard database indexes and query processing as a way to do metric indexing in the LAESA approach. By utilizing B-trees and R-trees as pivot-based indexes, we may use well-known optimization techniques from the database field within metric indexing and search. The novelty of this paper is that we use a cost-based approach to dynamically evaluate which and how many pivots to use in the evaluation of each query. By a series of measurements using our database prototype we are able to evaluate the performance of this approach. Compared to using all available pivots for filtering, the optimized approach gives half the response times for main memory data, but much more varied results for disk resident data. However, by use of the cost model we are able to dynamically determine when to bypass the indexes and simply perform a sequential scan of the base data. The conclusion of this evaluation is that it is beneficial to create many pivots, but to use only the most selective ones during evaluation of each query. R-trees give better performance than B-trees when utilizing all pivots, but when being able to dynamically select the best pivots, B-trees often provide better performance.", "paper_title": "Dynamic optimization of queries in pivot-based indexing", "paper_id": "WOS:000305276400002"}