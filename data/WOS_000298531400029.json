{"auto_keywords": [{"score": 0.04682254053814278, "phrase": "new_version"}, {"score": 0.01537728280612604, "phrase": "original_version"}, {"score": 0.010983586415334598, "phrase": "iterative_solver"}, {"score": 0.008238874941443486, "phrase": "external_variables"}, {"score": 0.006707114213955363, "phrase": "previous_version"}, {"score": 0.006479245147455166, "phrase": "wfmm_-_a_wideband_fast_multipole_method"}, {"score": 0.006314603252164324, "phrase": "almost_constant_memory"}, {"score": 0.006219275875350775, "phrase": "cpu_time"}, {"score": 0.0055974151121532725, "phrase": "distributed_program"}, {"score": 0.0055777873804233, "phrase": "test_data"}, {"score": 0.004798053287579036, "phrase": "two-dimensional_complex_helmholtz_equation"}, {"score": 0.0047700223212116715, "phrase": "two-dimensional_complex_helmholtz_equation_program"}, {"score": 0.00472551138464252, "phrase": "significantly_less_memory"}, {"score": 0.00457295371991917, "phrase": "memory_leak_problems"}, {"score": 0.004414936027050515, "phrase": "manuscript_title"}, {"score": 0.004378854464130883, "phrase": "two-dimensional_complex_helmholtz_equation_authors"}, {"score": 0.004368599475544646, "phrase": "min_hyung_cho"}, {"score": 0.004358368398332723, "phrase": "wei_cai_program"}, {"score": 0.004252371909672997, "phrase": "cpc_program_library"}, {"score": 0.004242411872706126, "phrase": "queen's_university"}, {"score": 0.0042324751439102295, "phrase": "belfast"}, {"score": 0.004222561433698793, "phrase": "n._ireland"}, {"score": 0.004202803483778449, "phrase": "standard_cpc"}, {"score": 0.003982098149664708, "phrase": "gcc_compiler"}, {"score": 0.00396346088232073, "phrase": "multi-thread_computing"}, {"score": 0.0039495399700222415, "phrase": "gcc_version"}, {"score": 0.0037552828102821, "phrase": "external"}, {"score": 0.003672500644750565, "phrase": "computer_physics_communications"}, {"score": 0.003562166011422191, "phrase": "n_particles"}, {"score": 0.003545487140867762, "phrase": "fundamental_solution"}, {"score": 0.0035164861492980614, "phrase": "wavenumber_k._solution_method"}, {"score": 0.003483631502938922, "phrase": "hierarchical_quad-tree_data_structure"}, {"score": 0.003451082755537225, "phrase": "low_frequency_method"}, {"score": 0.0034429930333830915, "phrase": "high_frequency_method"}, {"score": 0.0033868916699805224, "phrase": "memory_usage"}, {"score": 0.0033789519086815274, "phrase": "repeated_use"}, {"score": 0.003277407484910995, "phrase": "higher_level"}, {"score": 0.0032697235411641695, "phrase": "tree_structure"}, {"score": 0.003235367401211807, "phrase": "queue_data_structure"}, {"score": 0.00319386484766352, "phrase": "bottom_level"}, {"score": 0.0031603032545340676, "phrase": "queue_method"}, {"score": 0.0031418100703986193, "phrase": "simple_recursion_algorithm"}, {"score": 0.0030942310998208966, "phrase": "high_level_tree_refinement"}, {"score": 0.0030689098754563982, "phrase": "memory_leaks"}, {"score": 0.0030402241907918483, "phrase": "repeated_usage"}, {"score": 0.002893952950166311, "phrase": "significant_problems"}, {"score": 0.002887165418674377, "phrase": "large_matrix_systems"}, {"score": 0.002800358658581207, "phrase": "wavenumbers_k"}, {"score": 0.0026624684547385718, "phrase": "incorrect_numerical_solutions"}, {"score": 0.00265310486252773, "phrase": "memory_allocation_error"}, {"score": 0.002646880721119838, "phrase": "worst_cases"}, {"score": 0.002615977783510631, "phrase": "internal_ones"}, {"score": 0.0025432710481492296, "phrase": "minor_improvement"}, {"score": 0.002528379400564723, "phrase": "complex_number_operations"}, {"score": 0.0025106241866273897, "phrase": "running_time"}, {"score": 0.0024871438856744724, "phrase": "simple_makefile"}, {"score": 0.0024638826388985245, "phrase": "easy_compile"}, {"score": 0.002435111029209949, "phrase": "test_cases"}, {"score": 0.0024236964502593254, "phrase": "readme.rtf_file"}, {"score": 0.002361863736659439, "phrase": "original_paper"}, {"score": 0.0023563212280243682, "phrase": "numerical_tests"}, {"score": 0.0023178924188074278, "phrase": "gb"}, {"score": 0.0022908146376201194, "phrase": "fedora_release"}, {"score": 0.002256093812432976, "phrase": "testrun.c_file"}, {"score": 0.0022402463940460653, "phrase": "significant_memory_savings"}, {"score": 0.002234988641498543, "phrase": "minor_cpu_time_reduction"}, {"score": 0.002227125088932002, "phrase": "real_and_complex_k"}, {"score": 0.002129877319760485, "phrase": "computation_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Wideband Fast Multipole Method", " Helmholtz equation", " Fast solver"], "paper_abstract": "The Wideband Fast Multipole Method for the two-dimensional complex Helmholtz equation program is updated. The new version uses significantly less memory than the original version and uses almost constant memory for all the wavenumbers k when the number of particles is given. The CPU time is also improved slightly. Additionally, the memory leak problems and errors from external variables when it is used in an iterative solver are fixed. The new version wFMM and other useful codes are available from the website http://fastmultipole.org/. New version program summary Manuscript Title: Revision of wFMM - A Wideband Fast Multipole Method for the two-dimensional complex Helmholtz equation Authors: Min Hyung Cho and Wei Cai Program Title: 2D-WFMM Journal Reference: Catalogue identifier: AEHI_v2_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEHl_v2_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 4669 No. of bytes in distributed program, including test data, etc.: 46849 Programming language: C Computer: Any Operating system: Any operating system with gcc compiler. For the multi-thread computing, the gcc version 4.4 or newer is recommended RAM: Depending on the number of particles N and wavenumber k Number of processors used: Multi-core processors with shared memory Keywords: Wideband Fast Multipole Method, Helmholtz equation, Fast solver Classification: 4.8, 4.12 External routines/libraries: OpenMP (http://openmp.org/wp/) Subprograms used: None Catalogue identifier of previous version: AEHl_v1_0 Journal reference of previous version: Computer Physics Communications 181 (12) (2010) 2086 Does the new version supersede the previous version?: Yes Nature of problem: Evaluate the interaction between N particles governed by the fundamental solution of 2D complex Helmholtz equation with wide range of wavenumber k. Solution method: Multilevel Fast Multipole Algorithm in a hierarchical quad-tree data structure with a cutoff level, which combines low frequency method and high frequency method. Reasons for the new version: Improve the efficiency of the program including memory usage, repeated use in an iterative solver or other programs, and a minor speed up. Summary of revisions: First, the tree searching method in downward pass is modified to accommodate the higher level of tree structure and save memory. The original version used a queue data structure to visit [GRAPHICS] the tree from the top to bottom level. However, in this new version, the queue method is replaced with a simple recursion algorithm. As a result, the code uses less memory, and the high level tree refinement becomes more efficient. Secondly, memory leaks and external variables that caused problems in the repeated usage in an iterative solver, are fixed. The original version had no problem as stand alone software. However, when it was used repeatedly in other codes, the code did not release the memory after it was called. This causes significant problems for large matrix systems. In the new version, all the memory allocations are tracked and freed as soon as they become unnecessary. Consequently, the new version uses almost constant memory for all wavenumbers k when the number of particles N is fixed. The new version does not stack up the memory in an iterative solver. Also, in the original version, several external variables were not initialized when the code was called multiple times. This resulted in incorrect numerical solutions and a memory allocation error in worst cases. In the new version, external variables are converted to internal ones. The code is also tested by calling it multiple times in other solvers (results will be published soon). As a minor improvement, some of the complex number operations are simplified, and the running time is slightly reduced. Finally, a simple makefile is added in the package for the easy compile. \"make\" will compile one of the test cases described in the readme.rtf file. The new version of wFMM is compared with the original version in Tables 1 and 2 with the same parameters presented in the original paper. Numerical tests are conducted with a machine consisting of two quad-core Intel Xeon 3.00 GHz processors, 32 GB memory, and a gcc version 4.5.1 running on Fedora release 11. All the results in the tables can be obtained by modifying the testrun.c file. Both tables show the significant memory savings and minor CPU time reduction for both real and complex k for the number of particles N = 490000. Running time: The CPU time depends on the number of particles N and its distribution, wavenumber k, and number of cores in a machine. The computation time increases as N log N. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Revision of wFMM - A Wideband Fast Multipole Method for the two-dimensional complex Helmholtz equation", "paper_id": "WOS:000298531400029"}