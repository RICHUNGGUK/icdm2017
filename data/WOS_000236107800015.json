{"auto_keywords": [{"score": 0.03504330295761372, "phrase": "exploit_code"}, {"score": 0.00481495049065317, "phrase": "network_flows"}, {"score": 0.004734448316824488, "phrase": "common_way"}, {"score": 0.004475659507646842, "phrase": "remote_exploits"}, {"score": 0.004400804926266097, "phrase": "new_dimension"}, {"score": 0.003954837422946628, "phrase": "commonplace_occurrence"}, {"score": 0.003910595307634916, "phrase": "defense_mechanisms"}, {"score": 0.003845154818609644, "phrase": "popular_ones"}, {"score": 0.003802135020791801, "phrase": "signature-based_techniques"}, {"score": 0.003738502710504415, "phrase": "known_byte_patterns"}, {"score": 0.00305285084207725, "phrase": "definite_control"}, {"score": 0.003018668521745676, "phrase": "data_flow"}, {"score": 0.00293487292076612, "phrase": "fast_static_analysis"}, {"score": 0.0028214413724451442, "phrase": "litmus_test"}, {"score": 0.0026370661343466354, "phrase": "program-like_exploit_code"}, {"score": 0.002450864311898833, "phrase": "real_data"}, {"score": 0.0021049977753042253, "phrase": "initial_promise"}], "paper_keywords": [""], "paper_abstract": "A common way by which attackers gain control of hosts is through remote exploits, A new dimension to the problem is added by worms which use exploit code to self-propagate, and are becoming a commonplace occurrence. Defense mechanisms exist but popular ones are signature-based techniques which use known byte patterns, and they can be thwarted using polymorphism, metamorphism and other obfuscations. In this paper, we argue that exploit code is characterized by more than just a byte pattern because, in addition, there is a definite control and data flow. We propose a fast static analysis based approach which is essentially a litmus test and operates by making a distinction between data, programs and program-like exploit code. We have implemented a prototype called styx and evaluated it against real data collected at our organizational network. Results show that it is able to detect a variety of exploit code and can also generate very specific signatures. Moreover, it shows initial promise against polymorphism and metamorphism.", "paper_title": "A fast static analysis approach to detect exploit code inside network flows", "paper_id": "WOS:000236107800015"}