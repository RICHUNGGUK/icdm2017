{"auto_keywords": [{"score": 0.03510902830705974, "phrase": "pass"}, {"score": 0.009148492207116398, "phrase": "scheduling_units"}, {"score": 0.004422962383171667, "phrase": "storage_stack"}, {"score": 0.004365543827399888, "phrase": "numerous_advantages"}, {"score": 0.004294813202198633, "phrase": "hard_disk_drives"}, {"score": 0.0040893952934649485, "phrase": "long_existence"}, {"score": 0.004036289523702633, "phrase": "primary_building_blocks"}, {"score": 0.0040099947738626495, "phrase": "storage_systems"}, {"score": 0.003919299546627271, "phrase": "system_software"}, {"score": 0.003756252137445817, "phrase": "non-volatile_memory_media"}, {"score": 0.0035765007029494307, "phrase": "existing_upper_layer_software"}, {"score": 0.0032423089921154503, "phrase": "linux_block_layer"}, {"score": 0.00320016832003312, "phrase": "changing_trend"}, {"score": 0.003179303164775306, "phrase": "underlying_storage_devices"}, {"score": 0.0031585736196310726, "phrase": "flash-based_ssds"}, {"score": 0.003107337317471694, "phrase": "rich_internal_parallelism"}, {"score": 0.003007337114346301, "phrase": "device_driver"}, {"score": 0.002958546790146313, "phrase": "high_performance"}, {"score": 0.0028915634293105014, "phrase": "logical_storage_space"}, {"score": 0.0028727045847620957, "phrase": "fixed-size_regions"}, {"score": 0.002717277008333612, "phrase": "round-robin_manner"}, {"score": 0.0026557415971295633, "phrase": "chosen_dispatching_unit_issues"}, {"score": 0.002545125352770175, "phrase": "excessive_mutual_interference"}, {"score": 0.00242319012632962, "phrase": "dispatching_queues"}, {"score": 0.0023995115472744376, "phrase": "high_sequential_performance"}, {"score": 0.002383854559177708, "phrase": "ssd."}, {"score": 0.0023682987863242427, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "internal_write_amplification"}], "paper_keywords": ["Solid state drive (SSD)", " I/O scheduler", " Parallelism"], "paper_abstract": "Emerging non-volatile memory technologies, especially flash-based solid state drives (SSDs), have increasingly been adopted in the storage stack. They provide numerous advantages over traditional mechanically rotating hard disk drives (HDDs) and have a tendency to replace HDDs. Due to the long existence of HDDs as primary building blocks for storage systems, however, much of the system software has been specially designed for HDD and may not be optimal for non-volatile memory media. Therefore, in order to realistically leverage its superior raw performance to the maximum, the existing upper layer software has to be re-evaluated or re-designed. To this end, in this paper, we propose PASS, an optimized I/O scheduler at the Linux block layer to accommodate the changing trend of underlying storage devices toward flash-based SSDs. PASS takes the rich internal parallelism in SSDs into account when dispatching requests to the device driver in order to achieve high performance. Specifically, it partitions the logical storage space into fixed-size regions (preferably the component package sizes) as scheduling units. These scheduling units are serviced in a round-robin manner and for every chance that the chosen dispatching unit issues only a batch of either read or write requests to suppress the excessive mutual interference. Additionally, the requests are sorted according to their visiting addresses while waiting in the dispatching queues to exploit high sequential performance of SSD. The experimental results with a variety of workloads have shown that PASS outperforms the four Linux off-the-shelf I/O schedulers by a degree of 3% up to 41%, while at the same time it improves the lifetime significantly, due to reducing the internal write amplification.", "paper_title": "PASS: a simple, efficient parallelism-aware solid state drive I/O scheduler", "paper_id": "WOS:000335724900001"}