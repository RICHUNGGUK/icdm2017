{"auto_keywords": [{"score": 0.032848849718789125, "phrase": "gilligan"}, {"score": 0.009409822452855947, "phrase": "pragmatic_reuse_task"}, {"score": 0.007124161062657985, "phrase": "pragmatic-reuse_plan"}, {"score": 0.006687884266000517, "phrase": "standard_ide_tools"}, {"score": 0.005237785733901034, "phrase": "pragmatic_reuse_tasks"}, {"score": 0.00481495049065317, "phrase": "pragmatic_software_reuse"}, {"score": 0.00474614491353724, "phrase": "source_code"}, {"score": 0.004545544875014869, "phrase": "ad_hoc_modifications"}, {"score": 0.0044292596167820044, "phrase": "disciplined_industrial_practice"}, {"score": 0.004328383851864678, "phrase": "organizational_and_technical_reasons"}, {"score": 0.004039277955304532, "phrase": "program_elements"}, {"score": 0.0035788645387235395, "phrase": "modern_development_tools"}, {"score": 0.0031891008393769515, "phrase": "partial_support"}, {"score": 0.00313440457921664, "phrase": "tool_suite"}, {"score": 0.0029332611651817528, "phrase": "selected_source_code"}, {"score": 0.0028663584600000023, "phrase": "developer's_system"}, {"score": 0.0027848658492780503, "phrase": "case_studies"}, {"score": 0.0027370835853738626, "phrase": "industrial_developers"}, {"score": 0.002690118949960196, "phrase": "source_systems"}, {"score": 0.0025687721301935465, "phrase": "pragmatic-reuse_plans"}, {"score": 0.0025466350097711385, "phrase": "robust_metaphor"}, {"score": 0.002524688179363081, "phrase": "pragmatic_reuse_intent"}, {"score": 0.0021981315377404245, "phrase": "infeasible_reuse_tasks"}, {"score": 0.0021541682088058677, "phrase": "developers'_sense"}], "paper_keywords": ["Human Factors", " Experimentation", " Algorithms", " Reliability", " Languages", " Software reuse", " white box reuse", " pragmatic software reuse", " source code investigation", " lightweight process and tooling", " low commitment", " planning", " pragmatic-reuse plans", " pragmatic-reuse plan enactment", " Gilligan"], "paper_abstract": "Many software reuse tasks involve reusing source code that was not designed in a manner conducive to those tasks, requiring that ad hoc modifications be applied. Such pragmatic reuse tasks are a reality in disciplined industrial practice; they arise for a variety of organizational and technical reasons. To investigate a pragmatic reuse task, a developer must navigate through, and reason about, source code dependencies in order to identify program elements that are relevant to the task and to decide how those elements should be reused. The developer must then convert his mental model of the task into a set of actions that he can perform. These steps are poorly supported by modern development tools and practices. We provide a model for the process involved in performing a pragmatic reuse task, including the need to capture (mentally or otherwise) the developer's decisions about how each program element should be treated: this is a pragmatic-reuse plan. We provide partial support for this model via a tool suite, called Gilligan; other parts of the model are supported via standard IDE tools. Using a pragmatic-reuse plan, Gilligan can semiautomatically transform the selected source code from its originating system and integrate it into the developer's system. We have evaluated Gilligan through a series of case studies and experiments (each involving industrial developers) using a variety of source systems and tasks; we report in particular on a previously unpublished, formal experiment. The results show that pragmatic-reuse plans are a robust metaphor for capturing pragmatic reuse intent and that, relative to standard IDE tools, Gilligan can (1) significantly decrease the time that developers require to perform pragmatic reuse tasks, (2) increase the likelihood that developers will successfully complete pragmatic reuse tasks, (3) decrease the time required by developers to identify infeasible reuse tasks, and (4) improve developers' sense of their ability to manage the risk in such tasks.", "paper_title": "Systematizing Pragmatic Software Reuse", "paper_id": "WOS:000312826100001"}