{"auto_keywords": [{"score": 0.05007847282349091, "phrase": "regular_tree_types"}, {"score": 0.03774727637677033, "phrase": "jansson"}, {"score": 0.03384396551188402, "phrase": "jeuring"}, {"score": 0.004579780586951551, "phrase": "epigram_language"}, {"score": 0.004143196873246147, "phrase": "least_fixpoint"}, {"score": 0.003990385737207714, "phrase": "generic_decision_procedure"}, {"score": 0.003940706575253453, "phrase": "epigram's_in-built_equality"}, {"score": 0.003771631577951067, "phrase": "complementary_approach"}, {"score": 0.0036782824183282823, "phrase": "benke"}, {"score": 0.003632475762916889, "phrase": "dybjer"}, {"score": 0.0033905067962602515, "phrase": "generic_definition"}, {"score": 0.0030097975788892896, "phrase": "regular_universe"}, {"score": 0.002953711377604328, "phrase": "partial_derivative"}, {"score": 0.0028268629720802772, "phrase": "huet's_notion"}, {"score": 0.002671723182197791, "phrase": "mcbride"}, {"score": 0.002509284173541882, "phrase": "fixpoint_case"}, {"score": 0.0024625017739528096, "phrase": "generic_haskell"}, {"score": 0.0024318011467726938, "phrase": "hinze"}, {"score": 0.0023715353628243362, "phrase": "loh"}, {"score": 0.0021857667493036786, "phrase": "generic_programming"}, {"score": 0.0021450029487459403, "phrase": "ordinary_programming"}, {"score": 0.0021049977753042253, "phrase": "dependently_typed_language"}], "paper_keywords": [""], "paper_abstract": "In this paper we use the Epigram language to define the universe of regular tree types-closed under empty, unit, sum, product and least fixpoint. We then present a generic decision procedure for Epigram's in-built equality at each type, taking a complementary approach to that of Benke, Dybjer and Jansson [7]. We also give a generic definition of map, taking our inspiration from Jansson and Jeuring [21]. Finally, we equip the regular universe with the partial derivative which can be interpreted functionally as Huet's notion of 'zipper', as suggested by McBride in [27] and implemented (without the fixpoint case) in Generic Haskell by Hinze, Jeuring and Loh [18]. We aim to show through these examples that generic programming can be ordinary programming in a dependently typed language.", "paper_title": "Exploring the regular tree types", "paper_id": "WOS:000235656800016"}