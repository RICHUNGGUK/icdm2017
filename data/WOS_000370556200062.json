{"auto_keywords": [{"score": 0.03777708249527035, "phrase": "aalo"}, {"score": 0.02322730111336099, "phrase": "prior_knowledge"}, {"score": 0.009647985484405397, "phrase": "cluster_dynamics"}, {"score": 0.004757643419056999, "phrase": "inter-coflow_scheduling"}, {"score": 0.004701015188740582, "phrase": "application-level_communication_performance"}, {"score": 0.004645057834614705, "phrase": "data-parallel_clusters"}, {"score": 0.004535124351828787, "phrase": "existing_efficient_schedulers"}, {"score": 0.004454377387615279, "phrase": "priori_coflow_information"}, {"score": 0.004271490815763164, "phrase": "task_failures"}, {"score": 0.004195418010131832, "phrase": "speculative_executions"}, {"score": 0.003999089046152065, "phrase": "prior_knowledge_compromise"}, {"score": 0.0033011569787033297, "phrase": "discretized_coflow-aware_least-attained_service"}, {"score": 0.0030904433394138963, "phrase": "small_number"}, {"score": 0.003053598205821532, "phrase": "priority_queues"}, {"score": 0.002644179117033107, "phrase": "fifo_order"}, {"score": 0.0025660347613972573, "phrase": "aalo's_non-clairvoyant_scheduler"}, {"score": 0.0024604876113911173, "phrase": "starvation_freedom"}, {"score": 0.00240213106042981, "phrase": "trace-driven_simulations"}, {"score": 0.0023592715993204796, "phrase": "communication_stages"}, {"score": 0.0021304214257321, "phrase": "per-flow_mechanisms"}, {"score": 0.0021049977753042253, "phrase": "aalo's_performance"}], "paper_keywords": ["Coflow", " data-intensive applications", " datacenter networks"], "paper_abstract": "Inter-coflow scheduling improves application-level communication performance in data-parallel clusters. However, existing efficient schedulers require a priori coflow information and ignore cluster dynamics like pipelining, task failures, and speculative executions, which limit their applicability. Schedulers without prior knowledge compromise on performance to avoid head-of-line blocking. In this paper, we present Aalo that strikes a balance and efficiently schedules coflows without prior knowledge. Aalo employs Discretized Coflow-Aware Least-Attained Service (D-CLAS) to separate coflows into a small number of priority queues based on how much they have already sent across the cluster. By performing prioritization across queues and by scheduling coflows in the FIFO order within each queue, Aalo's non-clairvoyant scheduler reduces coflow completion times while guaranteeing starvation freedom. EC2 deployments and trace-driven simulations show that communication stages complete 1.93x faster on average and 3.59x faster at the 95th percentile using Aalo in comparison to per-flow mechanisms. Aalo's performance is comparable to that of solutions using prior knowledge, and Aalo outperforms them in presence of cluster dynamics.", "paper_title": "Efficient Coflow Scheduling Without Prior Knowledge", "paper_id": "WOS:000370556200062"}