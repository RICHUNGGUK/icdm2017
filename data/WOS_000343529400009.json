{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "shared_haptic_virtual_environments"}, {"score": 0.0440069794699844, "phrase": "virtual_environment"}, {"score": 0.03864160324244302, "phrase": "haptic_device"}, {"score": 0.035419592901956246, "phrase": "object-state_update_packets"}, {"score": 0.02606213476371732, "phrase": "proposed_scheme"}, {"score": 0.004603115982404017, "phrase": "client_server_communication_architecture"}, {"score": 0.00447316895126645, "phrase": "centralized_physics_engine"}, {"score": 0.0038603905208013482, "phrase": "interaction_forces"}, {"score": 0.003386301445203068, "phrase": "high_number"}, {"score": 0.003223883109446599, "phrase": "satisfactory_force_feedback_quality"}, {"score": 0.0031199418866663543, "phrase": "perception-based_traffic_control_scheme"}, {"score": 0.0029824560656987855, "phrase": "variable_but_not_perceivable_object-state_error"}, {"score": 0.0028627183712016894, "phrase": "packet_rate_reduction"}, {"score": 0.002770389097966904, "phrase": "different_error_thresholds"}, {"score": 0.0027365364488693656, "phrase": "visual_and_haptic_modality"}, {"score": 0.0026920404458807444, "phrase": "haptic_thresholds"}, {"score": 0.0026482660253173075, "phrase": "psychophysical_experiments"}, {"score": 0.0026159017392986595, "phrase": "paper_force_feedback_quality"}, {"score": 0.002573362191631126, "phrase": "subjective_tests"}, {"score": 0.0025211567863488962, "phrase": "different_traffic_control_parameter_settings"}, {"score": 0.00241989408309933, "phrase": "packet_rate"}, {"score": 0.0023610946923597405, "phrase": "communication_approaches"}, {"score": 0.002322689143237591, "phrase": "data_reduction"}, {"score": 0.0022111720236287547, "phrase": "haptic_feedback_quality"}, {"score": 0.002148604369150115, "phrase": "well-known_dead_reckoning"}, {"score": 0.0021049977753042253, "phrase": "visual-only_distributed_applications"}], "paper_keywords": [""], "paper_abstract": "Shared Haptic Virtual Environments (SHVEs) are often realized using a client server communication architecture. In this case, a centralized physics engine, running on the server, is used to simulate the object-states in the virtual environment (VE). At the clients, a copy of the VE is maintained and used to render the interaction forces locally, which are then displayed to the human through a haptic device. While this architecture ensures stability in the coupling between the haptic device and the virtual environment, it necessitates a high number of object-state update packets transmitted from the server to the clients to achieve satisfactory force feedback quality. In this paper we propose a perception-based traffic control scheme to reduce the number of object-state update packets, by allowing a variable but not perceivable object-state error at the client. To find a balance between packet rate reduction and force rendering fidelity, our approach uses different error thresholds for the visual and haptic modality, where the haptic thresholds are determined by psychophysical experiments in this paper Force feedback quality is evaluated with subjective tests for a variety of different traffic control parameter settings. The results show that the proposed scheme reduces the packet rate by up to 97%, compared to communication approaches that work without data reduction. At the same time, the proposed scheme does not degrade the haptic feedback quality significantly. Finally, it outperforms well-known dead reckoning, commonly used in visual-only distributed applications.", "paper_title": "Perception-Based Traffic Control for Shared Haptic Virtual Environments", "paper_id": "WOS:000343529400009"}