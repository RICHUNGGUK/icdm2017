{"auto_keywords": [{"score": 0.041760957509649345, "phrase": "heterogeneous_distributed_systems"}, {"score": 0.03287402698883015, "phrase": "kernel_code"}, {"score": 0.032539471083621686, "phrase": "closed_source_operating_systems"}, {"score": 0.00481495049065317, "phrase": "ipc_mechanism"}, {"score": 0.00471465954562773, "phrase": "programming_heterogeneous_distributed_systems"}, {"score": 0.004496542293425754, "phrase": "well-known_technique"}, {"score": 0.00433386573276633, "phrase": "homogeneous_distributed_systems"}, {"score": 0.0037793152987497286, "phrase": "uniform_interface"}, {"score": 0.0034193226278107346, "phrase": "open_source"}, {"score": 0.003383475802364289, "phrase": "closed_source_proprietary_operating_systems"}, {"score": 0.003278167066287366, "phrase": "distributed_systems"}, {"score": 0.0030130446986008277, "phrase": "third_parties"}, {"score": 0.0029346624184926305, "phrase": "alternative_nonproprietary_approach"}, {"score": 0.002769304577201566, "phrase": "ipc_calls"}, {"score": 0.002613239644974825, "phrase": "equivalent_ipc_calls"}, {"score": 0.002492098272172066, "phrase": "open_source_operating_systems"}, {"score": 0.0023025177990160487, "phrase": "ms-windows_ipc"}, {"score": 0.0022544909670207743, "phrase": "linux"}, {"score": 0.0021612684684351974, "phrase": "hybrid_computer_cluster"}, {"score": 0.0021049977753042253, "phrase": "operating_systems"}], "paper_keywords": ["Hybrid cluster", " Wrapper", " Open source", " Closed source", " Interprocess communication (IPC)", " Kernel level", " User level", " Message", " Remote procedure call"], "paper_abstract": "Interprocess communication (IPC) is a well-known technique commonly used by programs running on homogeneous distributed systems. However, it cannot be used readily and efficiently by programs running on heterogeneous distributed systems. This is because it must be given a uniform interface either by a set of middleware or more efficiently properly ported to the kernel of all varieties of open source and closed source proprietary operating systems running on heterogeneous nodes of distributed systems. This is particularly problematic to achieve when the kernel code of closed source operating systems are inaccessible to third parties. We propose an alternative nonproprietary approach to enable the use of IPC in heterogeneous distributed systems by wrapping IPC calls from the kernel of closed source operating systems, and converting them into equivalent IPC calls that are efficiently implemented inside the kernel code of open source operating systems. To show the superiority of our approach, we developed a wrapper for converting MS-Windows IPC calls into equivalent Linux IPC calls and benched our approach on a hybrid computer cluster running both types of operating systems.", "paper_title": "A platform independent distributed IPC mechanism in support of programming heterogeneous distributed systems", "paper_id": "WOS:000297359600025"}