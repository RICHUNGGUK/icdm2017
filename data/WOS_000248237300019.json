{"auto_keywords": [{"score": 0.04850161465082996, "phrase": "operating_system"}, {"score": 0.04404905311624432, "phrase": "driver_faults"}, {"score": 0.04174666335988992, "phrase": "faulty_driver"}, {"score": 0.03450032510577697, "phrase": "driver_replacement"}, {"score": 0.03221043383127256, "phrase": "existing_operating_system"}, {"score": 0.0319781161324339, "phrase": "driver_codes"}, {"score": 0.00481495049065317, "phrase": "increasing_operating_system_availability"}, {"score": 0.004387117409226736, "phrase": "design_diversity_concept"}, {"score": 0.004322267755421529, "phrase": "multiple_implementations"}, {"score": 0.004274257668843717, "phrase": "device_driver"}, {"score": 0.0037518852820756323, "phrase": "unique_features"}, {"score": 0.0029889584492584073, "phrase": "major_contribution"}, {"score": 0.0028688545415450407, "phrase": "design_diversity"}, {"score": 0.002836942411239067, "phrase": "device_driver_layer"}, {"score": 0.0027433143290371293, "phrase": "seamless_driver_replacement"}, {"score": 0.002712794864739074, "phrase": "operating_system_availability"}, {"score": 0.0025844090835070986, "phrase": "kernel_module"}, {"score": 0.0025652607069786013, "phrase": "linux"}, {"score": 0.0024529174827030787, "phrase": "network_device_drivers"}, {"score": 0.002285075675790214, "phrase": "performance_evaluation"}, {"score": 0.002193193339812606, "phrase": "recovery_time"}, {"score": 0.0021049977753042253, "phrase": "efficient_mechanism"}], "paper_keywords": ["fault recovery", " device driver", " design diversity", " driver replacement", " operating system availability"], "paper_abstract": "Device drivers are the most unreliable part of an operating system. In this paper, we propose a framework called nDriver. Based on the design diversity concept, it uses multiple implementations of a device driver to survive from driver faults. Once a fault happens in a driver, nDriver can dynamically replace the faulty driver with another implementation, instead of allowing the faulty driver to crash the system. The unique features of nDriver are as follows. First, it can detect two major kinds of driver faults, the exception and blocking faults. Second, the requests issued to the driver will not be lost due to the driver replacement. Third, the driver replacement is transparent to all the other kernel subsystems. Fourth, nDriver requires no modification to the existing operating system or driver codes. The major contribution of this work is that nDriver implements the concept of design diversity at the device driver layer. Moreover, it achieves the goal of seamless driver replacement and improves operating system availability without modifying the existing operating system or driver codes. We implemented nDriver as a kernel module in Linux. Currently, it can recover the system from faults in network device drivers. However, the mechanisms can be adapted to other module-based device drivers with a slight extension. According to the performance evaluation, the overhead of nDriver is no more than 3.5% and the recovery time is quite small. This indicates that nDriver is an efficient mechanism to increase the availability of an operating system.", "paper_title": "nDriver: Online driver replacement for increasing operating system availability", "paper_id": "WOS:000248237300019"}