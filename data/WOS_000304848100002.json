{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "data-access_cost"}, {"score": 0.01411333559089216, "phrase": "twig_pattern_matching"}, {"score": 0.004778923541463994, "phrase": "xml_twig_pattern_matching"}, {"score": 0.004690025569165577, "phrase": "large_size"}, {"score": 0.004654928974748418, "phrase": "xml_document"}, {"score": 0.004620093797504386, "phrase": "data-access_time"}, {"score": 0.004568326972997448, "phrase": "whole_system_performance"}, {"score": 0.003771631577951067, "phrase": "extended_dewey_label"}, {"score": 0.003369322866499544, "phrase": "tjfast"}, {"score": 0.0031606404966938568, "phrase": "substantial_redundant_label-to-element_name_decoding"}, {"score": 0.0027395968397212053, "phrase": "new_labeling_scheme"}, {"score": 0.0025989960809479104, "phrase": "total_number"}, {"score": 0.0025219085140220773, "phrase": "element's_label"}, {"score": 0.002447101794397243, "phrase": "unnecessary_paths"}, {"score": 0.0024196235355517827, "phrase": "pointer_structure"}, {"score": 0.002365587018070219, "phrase": "branching_element"}, {"score": 0.002347843727281585, "phrase": "random_access"}, {"score": 0.0023127544795063263, "phrase": "non-top_branching_elements"}, {"score": 0.0021775526153883355, "phrase": "twig_query"}, {"score": 0.0021209097150420896, "phrase": "superior_performance_gain"}, {"score": 0.0021049977753042253, "phrase": "execution_time"}], "paper_keywords": ["XML twig pattern matching", " Labeling scheme", " Branching node stream", " Leaf node stream", " Pointer structure"], "paper_abstract": "To process a large size of XML document, data-access time dominates the whole system performance in most cases. However, few techniques exist today that optimize the data-access cost of performing twig pattern matching. TJFast [18] is one of the few that do. TJFast could reduce the number of elements scanned by deriving all the element names along the path from the root to the element with the extended Dewey label of an element alone. However, there is still much room for improvement. We empirically observe that (1) many irrelevant elements can still be accessed and processed by TJFast, unnecessarily incurring both data-access and computation overhead, and (2) there still exists substantial redundant label-to-element name decoding, needlessly increasing processing cost. In this paper, we present TJFast-BNS, an optimization of TJFast, to further reduce the data-access cost of twig pattern matching. TJFast-BNS efficiently identifies and filters out many irrelevant elements by introducing a new labeling scheme, termed E2Dewey. and a novel pointer structure. E2Dewey includes the total number of children of an element in the element's label. This is used to quickly identify unnecessary paths. The pointer structure to the descendants of a branching element supports random access to leaf and non-top branching elements. Extensive performance studies on various datasets clearly show that our approach accesses much fewer elements to process a twig query than others, leading to a superior performance gain in execution time. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Examining the impact of data-access cost on XML twig pattern matching", "paper_id": "WOS:000304848100002"}