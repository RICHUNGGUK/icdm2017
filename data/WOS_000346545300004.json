{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "generic_rewrite_rules"}, {"score": 0.004442032546224076, "phrase": "particular_built-in_types"}, {"score": 0.004318422955036175, "phrase": "optimizing_compiler"}, {"score": 0.004249332848326785, "phrase": "rewrite_opportunity"}, {"score": 0.00421520166010848, "phrase": "user-defined_types"}, {"score": 0.004016072233242585, "phrase": "algebraic_properties"}, {"score": 0.0037955672944969287, "phrase": "generic_programming"}, {"score": 0.003749908582313067, "phrase": "\"concepts\"_language_feature"}, {"score": 0.0034452601929727752, "phrase": "algebraic_laws"}, {"score": 0.0031271827534050493, "phrase": "entire_class"}, {"score": 0.00301560261110296, "phrase": "annotation_burden"}, {"score": 0.0027929100418926725, "phrase": "particular_concept"}, {"score": 0.0027260525536580912, "phrase": "generic_rewrites"}, {"score": 0.0026181517251690606, "phrase": "type-specific_rules"}, {"score": 0.0025761937402886954, "phrase": "data_flow_information"}, {"score": 0.002545165985686468, "phrase": "compiler's_existing_analyses"}, {"score": 0.00224558083320154, "phrase": "conceptgcc_compiler"}, {"score": 0.0021566565951738658, "phrase": "abstraction_penalties"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["C plus", " Concepts", " Rewriting", " High-level optimizations"], "paper_abstract": "Compilers are typically hardwired to attempt many optimizations only on expressions that involve particular built-in types. Ideally, however, an optimizing compiler would recognize a rewrite opportunity for user-defined types as well, whenever the operands of an expression satisfy the algebraic properties that justify the rewrite. This paper applies the principles and techniques of generic programming and the \"concepts\" language feature, that was proposed to C++, to approximate this ideal. Concretely, a concept defines the signature and algebraic laws of a class of types. We attach rewrite rules to a concept, and by doing this make them applicable to the entire class of types that the concept defines. The annotation burden to a programmer is small-we take the-existing-declarations that a type models a particular concept as the annotation that enables generic rewrites. To apply generic rewrite rules, we instantiate them to type-specific rules. We use data flow information from the compiler's existing analyses to determine when these rules can be applied, and show how to interleave their application with function inlining to find more rewrite opportunities. Our prototype is implemented as an extension of the ConceptGCC compiler; our experiments show the approach is effective in eliminating abstraction penalties. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Axioms as generic rewrite rules in C plus plus with concepts", "paper_id": "WOS:000346545300004"}