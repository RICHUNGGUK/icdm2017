{"auto_keywords": [{"score": 0.041969999861445444, "phrase": "full_advantage"}, {"score": 0.029363542304911314, "phrase": "memory_access_scheduler"}, {"score": 0.00481495049065317, "phrase": "fpga_intensive_memory_exploitation_applications"}, {"score": 0.0044041909237087, "phrase": "mcu"}, {"score": 0.004224627834741731, "phrase": "maximum_throughput"}, {"score": 0.003957078581524691, "phrase": "fpga_parallelism"}, {"score": 0.003910278811774747, "phrase": "multiple_parallel_processing_entities"}, {"score": 0.003818326867123525, "phrase": "modern_fpga_devices"}, {"score": 0.0035551969986263553, "phrase": "external_memories"}, {"score": 0.0034101316738399203, "phrase": "multiple_entities"}, {"score": 0.003369778677878286, "phrase": "shared_data"}, {"score": 0.003251552926963083, "phrase": "multiple_abstract_access_ports"}, {"score": 0.0030273620861817055, "phrase": "hardware_designs"}, {"score": 0.002991524908432975, "phrase": "fpga_technology"}, {"score": 0.002903771635043968, "phrase": "memory_chips"}, {"score": 0.0027034948760997564, "phrase": "suitable_arbitration_scheme"}, {"score": 0.002639845784408318, "phrase": "fast_memory_controller"}, {"score": 0.0025623821393275146, "phrase": "slower_frequencies"}, {"score": 0.002472412920623605, "phrase": "multiple_processing_units"}, {"score": 0.002371424085814217, "phrase": "memory_transactions"}, {"score": 0.002142970278347126, "phrase": "memory_bandwidth"}], "paper_keywords": ["Memory-control unit", " FPGA", " Video processing", " Hardware design", " Real-time processing"], "paper_abstract": "We describe an efficient, high-level abstraction, multi-port memory-control unit (MCU) capable of providing data at maximum throughput. This MCU has been developed to take full advantage of FPGA parallelism. Multiple parallel processing entities are possible in modern FPGA devices, but this parallelism is lost when they try to access external memories. To address the problem of multiple entities accessing shared data we propose an architecture with multiple abstract access ports (AAPs) to access one external memory. Bearing in mind that hardware designs in FPGA technology are generally slower than memory chips, it is feasible to build a memory access scheduler by using a suitable arbitration scheme based on a fast memory controller with AAPs running at slower frequencies. In this way, multiple processing units connected through the AAPs can make memory transactions at their slower frequencies and the memory access scheduler can serve all these transactions at the same time by taking full advantage of the memory bandwidth. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Multi-port abstraction layer for FPGA intensive memory exploitation applications", "paper_id": "WOS:000281923400004"}