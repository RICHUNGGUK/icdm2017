{"auto_keywords": [{"score": 0.03550161192211013, "phrase": "core_os_services"}, {"score": 0.00481495049065317, "phrase": "heterogeneous_coherence"}, {"score": 0.004776853267973129, "phrase": "mobile_system"}, {"score": 0.004590820632326585, "phrase": "heterogeneous_coherence_domains"}, {"score": 0.004554488671294504, "phrase": "high_energy_efficiency"}, {"score": 0.00450052670755585, "phrase": "wide_range"}, {"score": 0.00446490613141384, "phrase": "mobile_applications"}, {"score": 0.004173244935967375, "phrase": "missing_capability"}, {"score": 0.0041074234667687875, "phrase": "operating_system"}, {"score": 0.004010624853427534, "phrase": "multiple_coherence_domains"}, {"score": 0.003978866233891427, "phrase": "minimum_inter-domain_communication"}, {"score": 0.0037935066882208235, "phrase": "application_development"}, {"score": 0.0037336520904376687, "phrase": "os_engineering"}, {"score": 0.0036456298076415652, "phrase": "current_os_performance"}, {"score": 0.003517458289610994, "phrase": "shared-most_os_model"}, {"score": 0.0033269488835014583, "phrase": "shared_state"}, {"score": 0.0028715299874549245, "phrase": "single_system_image"}, {"score": 0.0026836723685046407, "phrase": "independent_instances"}, {"score": 0.0026203386550421558, "phrase": "page_allocator"}, {"score": 0.002599560451267203, "phrase": "interrupt_management"}, {"score": 0.0024586427394152196, "phrase": "device_drivers"}, {"score": 0.0023532890136269986, "phrase": "platform_constraints"}, {"score": 0.0023346234464901978, "phrase": "unoptimized_code"}, {"score": 0.0022977342663599042, "phrase": "energy_efficiency"}, {"score": 0.002279508335630797, "phrase": "light_os_workloads"}, {"score": 0.0021992603252793995, "phrase": "device_driver"}, {"score": 0.0021049977753042253, "phrase": "shared-most_model"}], "paper_keywords": ["Design", " Experimentation", " Performance", " Energy efficiency", " heterogeneous architecture", " mobile", " coherence domains"], "paper_abstract": "Mobile System-on-Chips (SoC) that incorporate heterogeneous coherence domains promise high energy efficiency to a wide range of mobile applications, yet are difficult to program. To exploit the architecture, a desirable, yet missing capability is to replicate operating system (OS) services over multiple coherence domains with minimum inter-domain communication. In designing such an OS, we set three goals: to ease application development, to simplify OS engineering, and to preserve the current OS performance. To this end, we identify a shared-most OS model for multiple coherence domains: creating per-domain instances of core OS services with no shared state, while enabling other extended OS services to share state across domains. To test the model, we build K2, a prototype OS on the TI OMAP4 SoC, by reusing most of the Linux 3.4 source. K2 presents a single system image to applications with its two kernels running on top of the two coherence domains of OMAP4. The two kernels have independent instances of core OS services, such as page allocator and interrupt management, as coordinated by K2; the two kernels share most extended OS services, such as device drivers, whose state is kept coherent transparently by K2. Despite platform constraints and unoptimized code, K2 improves energy efficiency for light OS workloads by 8x-10x, while incurring less than 6% performance overhead for a device driver shared between kernels. Our experiences with K2 show that the shared-most model is promising.", "paper_title": "K2: A Mobile Operating System for Heterogeneous Coherence", "paper_id": "WOS:000360535000020"}