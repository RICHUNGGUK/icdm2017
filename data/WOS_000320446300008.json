{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_architectures"}, {"score": 0.035620716932052585, "phrase": "security_design_principle"}, {"score": 0.00441883624011048, "phrase": "precise_definitions"}, {"score": 0.004324985524216987, "phrase": "effective_software_engineering_methodologies"}, {"score": 0.004233119608341877, "phrase": "security_design_principles"}, {"score": 0.004011867299107537, "phrase": "software_architects"}, {"score": 0.0038431888954930083, "phrase": "potentially_high-risk_threats"}, {"score": 0.003526735797659508, "phrase": "formal_foundations"}, {"score": 0.003306559295382181, "phrase": "least_privilege"}, {"score": 0.0023440589015485077, "phrase": "proposed_approach"}], "paper_keywords": ["Security analysis", " Least privilege", " Software architecture"], "paper_abstract": "Due to the lack of both precise definitions and effective software engineering methodologies, security design principles are often neglected by software architects, resulting in potentially high-risk threats to systems. This work lays the formal foundations for understanding the security design principle of least privilege in software architectures and provides a technique to identify violations against this principle. The technique can also be leveraged to analyze violations against the security design principle of separation of duties. The proposed approach is supported by tools and has been validated in four case studies, two of which are presented in detail in this paper.", "paper_title": "Least privilege analysis in software architectures", "paper_id": "WOS:000320446300008"}