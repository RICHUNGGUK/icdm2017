{"auto_keywords": [{"score": 0.04708600080273322, "phrase": "minitasking"}, {"score": 0.00481495049065317, "phrase": "cache_performance"}, {"score": 0.0047588556219929756, "phrase": "multiple_query_workloads"}, {"score": 0.004594443767709888, "phrase": "novel_idea"}, {"score": 0.004358368398332723, "phrase": "cache_misses"}, {"score": 0.004257360656055417, "phrase": "data_temporal_locality"}, {"score": 0.004207734323806386, "phrase": "multiple_concurrent_queries"}, {"score": 0.0038761135052054765, "phrase": "decision_support_systems"}, {"score": 0.003698442219929622, "phrase": "significant_amount"}, {"score": 0.003591542373891629, "phrase": "different_concurrent_queries"}, {"score": 0.0033868916699805224, "phrase": "temporal_locality"}, {"score": 0.0033277936960179892, "phrase": "query_execution"}, {"score": 0.00304737045343781, "phrase": "cache_configuration"}, {"score": 0.00270978310478061, "phrase": "small_pieces"}, {"score": 0.002646880721119838, "phrase": "operator_groups"}, {"score": 0.0023953929817357882, "phrase": "execution_time"}, {"score": 0.002272053079580848, "phrase": "tpc-h_throughput_test_workload"}, {"score": 0.002206290313627494, "phrase": "end_performance"}], "paper_keywords": [""], "paper_abstract": "This paper proposes a novel idea, called MiniTasking to reduce the number of cache misses by improving the data temporal locality for multiple concurrent queries. Our idea is based on the observation that, in many workloads such as decision support systems (DSS), there is usually significant amount of data sharing among different concurrent queries. MiniTasking exploits such data sharing characteristics to improve data temporal locality by scheduling query execution at three levels: (1) It batches queries based on their data sharing characteristics and the cache configuration. (2) It groups operators that share certain data. (3) It schedules mini-tasks which are small pieces of computation in operator groups according to their data locality without violating their execution dependencies. Our experimental results show that, MiniTasking can significantly reduce the execution time up to 12% for joins. For the TPC-H throughput test workload, MiniTasking improves the end performance up to 20%. Even with the Partition Attributes Across (PAX) layout, MiniTasking further reduces the cache misses by 65% and the execution time by 9%.", "paper_title": "MiniTasking: Improving cache performance for multiple query workloads", "paper_id": "WOS:000239658700025"}