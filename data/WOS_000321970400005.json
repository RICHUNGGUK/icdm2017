{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "concurrent_scheduling"}, {"score": 0.0047709540557306284, "phrase": "service-oriented_environment"}, {"score": 0.004536029676655286, "phrase": "system_performance"}, {"score": 0.004453488286477661, "phrase": "existing_approaches"}, {"score": 0.004352411290383643, "phrase": "predefined_workflow_graph_structure"}, {"score": 0.004214729542986473, "phrase": "workflow_graph"}, {"score": 0.0038271712887391015, "phrase": "graph_refactoring"}, {"score": 0.0037402558657576124, "phrase": "sequential_tasks"}, {"score": 0.0036218682585355895, "phrase": "system's_functionality"}, {"score": 0.0034911335714333507, "phrase": "task_dependencies"}, {"score": 0.0033961782274326948, "phrase": "previously_sequential_task"}, {"score": 0.003349670229755675, "phrase": "loose_control_dependency"}, {"score": 0.0030135741897058844, "phrase": "refactoring_algorithm"}, {"score": 0.00290473242917264, "phrase": "loose_control_dependencies"}, {"score": 0.002799810685137358, "phrase": "related_executing_services"}, {"score": 0.0026616868981501006, "phrase": "common_sub-graph_structures"}, {"score": 0.0024956789310376635, "phrase": "existing_workflow_management_systems"}, {"score": 0.00241658945942583, "phrase": "new_functionally_equivalent_working_graph"}, {"score": 0.002224510044064184, "phrase": "system_performance_scalably"}, {"score": 0.002194011800331242, "phrase": "concurrent_execution"}, {"score": 0.0021739117830106365, "phrase": "previously_sequential_tasks"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["trust", " reputation", " workflow refactoring", " scheduling", " concurrency"], "paper_abstract": "Workflow scheduling has been extensively studied to improve the system performance. However, existing approaches are usually built on predefined workflow graph structure, neglecting the possibility that a workflow graph itself may be changeable when certain conditions are satisfied. Therefore, in this paper, we propose the concept of graph refactoring that transforms certain types of sequential tasks to run in parallel without changing system's functionality. We first provide a classification for task dependencies in workflows and identify that previously sequential task ordering in loose control dependency can be scheduled to run in parallel as long as supporting services are trustworthy. With this concept, we present a refactoring algorithm to traverse, restructure, and parallelize loose control dependencies in the graph when the reputations of related executing services are above certain threshold. In addition, refactoring effects on common sub-graph structures are analyzed and discussed. In practice, our algorithm can be integrated into existing workflow management systems as a preprocessor to generate a new functionally equivalent working graph with more concurrent branches for further scheduling. Experiments and analysis show that graph refactoring can improve the system performance scalably because of concurrent execution of previously sequential tasks. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Trust-based workflow refactoring for concurrent scheduling in service-oriented environment", "paper_id": "WOS:000321970400005"}