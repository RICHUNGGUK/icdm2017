{"auto_keywords": [{"score": 0.035703386063651886, "phrase": "power_test_functions"}, {"score": 0.00481495049065317, "phrase": "laplace_transforms"}, {"score": 0.004528735302980532, "phrase": "laplace"}, {"score": 0.004403480614319231, "phrase": "unified_framework"}, {"score": 0.004330322762200013, "phrase": "abate"}, {"score": 0.004282232497429562, "phrase": "whitt"}, {"score": 0.004072275820209647, "phrase": "desired_function_value"}, {"score": 0.00400459716272594, "phrase": "finite_linear_combination"}, {"score": 0.003960101604693806, "phrase": "transform_values"}, {"score": 0.0036214184763804034, "phrase": "alternative_parameter_sets"}, {"score": 0.003348838095597268, "phrase": "real_weights"}, {"score": 0.003293142761521425, "phrase": "real-variable_power_algorithm"}, {"score": 0.0032203158828810244, "phrase": "specified_real_powers"}, {"score": 0.0031845067058084583, "phrase": "positive_real_nodes"}, {"score": 0.0030794433253250476, "phrase": "linear_equations"}, {"score": 0.0030282147475402736, "phrase": "generalized_vandermonde_matrix"}, {"score": 0.0029779492680672686, "phrase": "mathematica"}, {"score": 0.0029282926103224717, "phrase": "resulting_power_algorithms"}, {"score": 0.002784540221128404, "phrase": "parameter_choice"}, {"score": 0.0025461386232786356, "phrase": "series_expansions"}, {"score": 0.0024211009463218484, "phrase": "power_algorithms"}, {"score": 0.002263861731320045, "phrase": "first_n_positive_integers"}, {"score": 0.002176887956041267, "phrase": "useful_way"}], "paper_keywords": ["laplace transforms", " numerical transform inversion", " power test functions", " power algorithms", " Fourier-series method", " Talbot's method", " Gaver-Stehfest algorithm", " Zakian's algorithm", " multiprecision computing", " generalized Vandermonde matrix", " Mathematica programming language"], "paper_abstract": "This paper investigates ways to create algorithms to invert Laplace transforms numerically within a unified framework proposed by Abate and Whitt (2006). That framework approximates the desired function value by a finite linear combination of transform values, depending on parameters called weights and nodes, which are initially left unspecified. Alternative parameter sets, and thus algorithms, are generated and evaluated here by considering power test functions. Real weights for a real-variable power algorithm are found for specified real powers and positive real nodes by solving a system of linear equations involving a generalized Vandermonde matrix, using Mathematica. The resulting power algorithms are shown to be effective, with the parameter choice being tunable to the transform being inverted. The powers can be advantageously chosen from series expansions of the transform. Experiments show that the power algorithms are robust in the nodes; it suffices to use the first n positive integers. The power test functions also provide a useful way to evaluate the performance of other algorithms.", "paper_title": "Power algorithms for inverting laplace transforms", "paper_id": "WOS:000248990800004"}