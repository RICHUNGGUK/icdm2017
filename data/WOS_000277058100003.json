{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "interval-based_specification_languages"}, {"score": 0.012029635254628114, "phrase": "verification_system"}, {"score": 0.004488505301335364, "phrase": "real-time_computing_systems"}, {"score": 0.00436890075128947, "phrase": "logical_reasoning"}, {"score": 0.004321952227344232, "phrase": "mathematical_computation"}, {"score": 0.004229556887896042, "phrase": "continuous_or_discrete_time"}, {"score": 0.0035965032173588753, "phrase": "formal_analysis"}, {"score": 0.003519561814102764, "phrase": "machine-assisted_proof_support"}, {"score": 0.003352388337911934, "phrase": "generic_theorem"}, {"score": 0.003298441494378465, "phrase": "prototype_verification_system"}, {"score": 0.0031417377608722, "phrase": "highly_expressive_set-based_notation"}, {"score": 0.002865710140187219, "phrase": "tic_models"}, {"score": 0.0028195727965553367, "phrase": "interval_level"}, {"score": 0.0027443174539994925, "phrase": "tic_reasoning_rules"}, {"score": 0.0027001292153471202, "phrase": "subtle_flaws"}, {"score": 0.002656650588033728, "phrase": "original_rules"}, {"score": 0.0025857385764905703, "phrase": "tic"}, {"score": 0.0025578967205807843, "phrase": "model_duration_calculus"}, {"score": 0.0024495111090152857, "phrase": "popular_interval-based_specification_language"}, {"score": 0.002234165013865669, "phrase": "dc_axioms"}, {"score": 0.0021863046959469863, "phrase": "dc_proofs"}, {"score": 0.0021049977753042253, "phrase": "corresponding_pencil-and-paper_dc_arguments"}], "paper_keywords": ["Verification", " Formal specification languages", " real-time systems", " theorem proving"], "paper_abstract": "Interval-based specification languages have been used to formally model and rigorously reason about real-time computing systems. This usually involves logical reasoning and mathematical computation with respect to continuous or discrete time. When these systems are complex, analyzing their models by hand becomes error-prone and difficult. In this article, we develop a verification system to facilitate the formal analysis of interval-based specification languages with machine-assisted proof support. The verification system is developed using a generic theorem prover, Prototype Verification System (PVS). Our system elaborately encodes a highly expressive set-based notation, Timed Interval Calculus ( TIC), and can rigorously carry out the verification of TIC models at an interval level. We validated all TIC reasoning rules and discovered subtle flaws in the original rules. We also apply TIC to model Duration Calculus ( DC), which is a popular interval-based specification language, and thus expand the capacity of the verification system. We can check the correctness of DC axioms, and execute DC proofs in a manner similar to the corresponding pencil-and-paper DC arguments.", "paper_title": "A Verification System for Interval-Based Specification Languages", "paper_id": "WOS:000277058100003"}