{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "expression_templates"}, {"score": 0.004408729661992651, "phrase": "compile-time_algorithm"}, {"score": 0.0039053194919285725, "phrase": "temporary_storage"}, {"score": 0.0035755653799043, "phrase": "basic_building_blocks"}, {"score": 0.0032021226849872054, "phrase": "expression_parse_tree"}, {"score": 0.0028993944292191433, "phrase": "local_transformations"}, {"score": 0.0026838147966444783, "phrase": "minimum_number"}, {"score": 0.0026252106881752067, "phrase": "temporary_storage_objects"}], "paper_keywords": ["Algorithms", " Design", " Performance", " C plus", " dense linear algebra operations", " expression templates", " template metaprogramming", " temporary storage minimization"], "paper_abstract": "In this article we present a compile-time algorithm, implemented using C++ template metaprogramming techniques, that minimizes the use of temporary storage when evaluating expressions. We present the basic building blocks of our algorithm-transformations that act locally on nodes of the expression parse tree-and demonstrate that the application of these local transformations generates a (nonunique) expression that requires a minimum number of temporary storage objects to evaluate. We discuss a C++ implementation of our algorithm using expression templates, and give results demonstrating the effectiveness of our approach.", "paper_title": "Algorithm 940: Optimal Accumulator-Based Expression Evaluation through the Use of Expression Templates", "paper_id": "WOS:000335219900004"}