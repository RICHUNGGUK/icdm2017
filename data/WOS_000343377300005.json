{"auto_keywords": [{"score": 0.042343991612104254, "phrase": "api_call_graph"}, {"score": 0.010612387000973441, "phrase": "metamorphic_malware"}, {"score": 0.009493469351088973, "phrase": "api"}, {"score": 0.009009843337255796, "phrase": "malware_samples"}, {"score": 0.007647424334507401, "phrase": "computational_complexity"}, {"score": 0.0072319409067529965, "phrase": "proposed_system"}, {"score": 0.004781357546476652, "phrase": "call_graphs"}, {"score": 0.0047480241831681, "phrase": "malware"}, {"score": 0.004698392162272106, "phrase": "malicious_software"}, {"score": 0.004536735647938243, "phrase": "harmful_intent"}, {"score": 0.004489327204473076, "phrase": "malware_detector"}, {"score": 0.004334832612029898, "phrase": "application_programming_interface"}, {"score": 0.004259582098193949, "phrase": "graph_technique"}, {"score": 0.004200319352919505, "phrase": "api_call_graph_techniques"}, {"score": 0.0038887521594153608, "phrase": "constructed_graph"}, {"score": 0.003861596041315646, "phrase": "existing_malware_call_graph_samples"}, {"score": 0.003768028741967194, "phrase": "major_issue"}, {"score": 0.003741712498615481, "phrase": "malware_api_call_graph_construction_algorithms"}, {"score": 0.003689628075766217, "phrase": "precise_call_graph"}, {"score": 0.0035376693476114733, "phrase": "np-complete_problem"}, {"score": 0.0033800778203837757, "phrase": "malware_detection_system"}, {"score": 0.003240826566478551, "phrase": "malware_sample"}, {"score": 0.003162252895465901, "phrase": "api_call_graph_construction_algorithm"}, {"score": 0.003107294250160403, "phrase": "input_malware_samples"}, {"score": 0.0030532878377173885, "phrase": "api_calls"}, {"score": 0.0030319482153908037, "phrase": "operating_system_resource"}, {"score": 0.0030002172602367682, "phrase": "graph_nodes"}, {"score": 0.0029274600162609654, "phrase": "different_types"}, {"score": 0.0028464607144683247, "phrase": "graph_edges"}, {"score": 0.002796975007007085, "phrase": "graph_matching_algorithm"}, {"score": 0.002719576221177709, "phrase": "input_sample_and_malware_api_call_graph_samples"}, {"score": 0.0025711283781017424, "phrase": "enhanced_graph_edit_distance_algorithm"}, {"score": 0.0025087506382067536, "phrase": "greedy_approach"}, {"score": 0.0024824815904738685, "phrase": "best_common_subgraphs"}, {"score": 0.002456486927713543, "phrase": "integrating_api_call_graph"}, {"score": 0.0023469450817019, "phrase": "experimental_results"}, {"score": 0.0021801944769738618, "phrase": "significant_improvement"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Computer security", " Malware", " Malware detection", " API call graph", " API call graph construction algorithm", " API call graph matching algorithm"], "paper_abstract": "Malware stands for malicious software. It is software that is designed with a harmful intent. A malware detector is a system that attempts to identify malware using Application Programming Interface (API) call graph technique and/or other techniques. API call graph techniques follow two main steps, namely, transformation of malware samples into an API call graph using API call graph construction algorithm, and matching the constructed graph against existing malware call graph samples using graph matching algorithm. A major issue facing malware API call graph construction algorithms is building a precise call graph from information collected about malware samples. On the other hand call graph matching is an NP-complete problem and is slow because of computational complexity. In this study, a malware detection system based on API call graph is proposed. In the proposed system, each malware sample is represented as an API call graph. API call graph construction algorithm is used to transform input malware samples into API call graph by integrating API calls and operating system resource to represent graph nodes. Moreover, the dependence between different types of nodes is identified and represented using graph edges. After that, graph matching algorithm is used to calculate similarity between the input sample and malware API call graph samples that are stored in a database. The graph matching algorithm is based on an enhanced graph edit distance algorithm that simplifies the computational complexity using a greedy approach to select best common subgraphs from the integrating API call graph with high similarity, which helps in terms of detecting metamorphic malware. Experimental results on 514 malware samples demonstrate that the proposed system has 98% accuracy and 0 false positive rates. Detailed comparisons against other detection methods have been carried out and significant improvement over them is shown. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Enhancing the detection of metamorphic malware using call graphs", "paper_id": "WOS:000343377300005"}