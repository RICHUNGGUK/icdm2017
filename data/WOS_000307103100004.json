{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "deadlock_risk_evaluation_of_architectural_models"}, {"score": 0.0478178007821399, "phrase": "early_stages"}, {"score": 0.004772818068176176, "phrase": "software_architectural_evaluation"}, {"score": 0.004710306419574744, "phrase": "key_discipline"}, {"score": 0.004527619017250708, "phrase": "real-time_system"}, {"score": 0.004257360656055417, "phrase": "typical_mechanisms"}, {"score": 0.003985602342418578, "phrase": "concurrency_problems"}, {"score": 0.00395069818358908, "phrase": "execution_time"}, {"score": 0.003586278948128509, "phrase": "root_causes"}, {"score": 0.0033277936960179892, "phrase": "system_lifecycle"}, {"score": 0.003170520716404193, "phrase": "research_work"}, {"score": 0.002967931416941965, "phrase": "deadlock_risk"}, {"score": 0.002941913249957503, "phrase": "architectural_models"}, {"score": 0.002903311792572216, "phrase": "rts._a_particular_architectural_style"}, {"score": 0.002693919110230191, "phrase": "platform-independent_models"}, {"score": 0.0026585629592360085, "phrase": "rts_architecture"}, {"score": 0.0024667783849055634, "phrase": "rts_development"}, {"score": 0.0023501014144112443, "phrase": "different_tools"}, {"score": 0.0022687189700002254, "phrase": "case_studies"}, {"score": 0.0021709339252206825, "phrase": "planetary_exploration_robotics"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["deadlock", " software architecture", " MBSE", " UML", " concurrency"], "paper_abstract": "Software architectural evaluation is a key discipline used to identify, at early stages of a real-time system (RTS) development, the problems that may arise during its operation. Typical mechanisms supporting concurrency, such as semaphores, mutexes or monitors, usually lead to concurrency problems in execution time that are difficult to be identified, reproduced and solved. For this reason, it is crucial to understand the root causes of these problems and to provide support to identify and mitigate them at early stages of the system lifecycle. This paper aims to present the results of a research work oriented to the development of the tool called Deadlock Risk Evaluation of Architectural Models (DREAM) to assess deadlock risk in architectural models of an RTS. A particular architectural style, Pipelines of Processes in Object-Oriented ArchitecturesUML (PPOOA) was used to represent platform-independent models of an RTS architecture supported by the PPOOA Visio tool. We validated the technique presented here by using several case studies related to RTS development and comparing our results with those from other deadlock detection approaches, supported by different tools. Here we present two of these case studies, one related to avionics and the other to planetary exploration robotics. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Application of Deadlock Risk Evaluation of Architectural Models", "paper_id": "WOS:000307103100004"}