{"auto_keywords": [{"score": 0.03903121445065066, "phrase": "non-strict_independence"}, {"score": 0.015719716506582538, "phrase": "freeness_information"}, {"score": 0.004762435022350756, "phrase": "current_ubiquity"}, {"score": 0.0047277417909824745, "phrase": "multi-core_processors"}, {"score": 0.004676173016967478, "phrase": "renewed_interest"}, {"score": 0.004642105253191792, "phrase": "program_parallelization"}, {"score": 0.004608284537368354, "phrase": "logic_programs"}, {"score": 0.004394350285140955, "phrase": "comparatively_simple_semantic_setting"}, {"score": 0.004298974960001275, "phrase": "automatic_parallelizers"}, {"score": 0.0038946650372062783, "phrase": "traditional_notion"}, {"score": 0.003866268750750096, "phrase": "\"strict\"_independence"}, {"score": 0.0037961770933599135, "phrase": "relevant_efficiency_properties"}, {"score": 0.003741016338085083, "phrase": "considerable_more_parallelism"}, {"score": 0.0035025108234594668, "phrase": "global_analysis"}, {"score": 0.003401431460601017, "phrase": "non-strict_independence_information"}, {"score": 0.0031961879138783012, "phrase": "extended_presentation"}, {"score": 0.0031497178007011666, "phrase": "compile-time_detection"}, {"score": 0.002863652837038965, "phrase": "special_run-time_checks"}, {"score": 0.0027405092973494293, "phrase": "herein_novel_annotation"}, {"score": 0.002680932410366204, "phrase": "urlp"}, {"score": 0.0026613618933208467, "phrase": "crlp"}, {"score": 0.0025468951021098717, "phrase": "new_ways"}, {"score": 0.0024642796422450755, "phrase": "run-time_environments"}, {"score": 0.002401875938287542, "phrase": "parallel_execution"}, {"score": 0.0022568093356079414, "phrase": "early_performance_results"}, {"score": 0.0021996478802839316, "phrase": "extended_description"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Parallelism", " Automatic parallelization", " Abstract interpretation", " Abstract domains", " Sharing and freeness", " Non-strict independence", " Parallelizing compilers", " Declarative languages", " Logic programming"], "paper_abstract": "The current ubiquity of multi-core processors has brought renewed interest in program parallelization. Logic programs allow studying the parallelization of programs with complex, dynamic data structures with (declarative) pointers in a comparatively simple semantic setting. In this context, automatic parallelizers which exploit and-parallelism rely on notions of independence in order to ensure certain efficiency properties. \"Non-strict\" independence is a more relaxed notion than the traditional notion of \"strict\" independence which still ensures the relevant efficiency properties and can allow considerable more parallelism. Non-strict independence cannot be determined solely at run-time (\"a priori\") and thus global analysis is a requirement. However, extracting non-strict independence information from available analyses and domains is non-trivial. This paper provides on one hand an extended presentation of our classic techniques for compile-time detection of non-strict independence based on extracting information from (abstract interpretation-based) analyses using the now well understood and popular Sharing + Freeness domain. This includes algorithms for combined compile-time/run-time detection which involve special run-time checks for this type of parallelism. In addition, we propose herein novel annotation (parallelization) algorithms, URLP and CRLP, which are specially suited to non-strict independence. We also propose new ways of using the Sharing + Freeness information to optimize how the run-time environments of goals are kept apart during parallel execution. Finally. we also describe the implementation of these techniques in our parallelizing compiler and recall some early performance results. We provide as well an extended description of our pictorial representation of sharing and freeness information. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Non-strict independence-based program parallelization using sharing and freeness information", "paper_id": "WOS:000271250100008"}