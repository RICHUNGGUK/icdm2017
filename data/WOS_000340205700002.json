{"auto_keywords": [{"score": 0.04019018908324452, "phrase": "minrpset"}, {"score": 0.007049455972372316, "phrase": "frequent_closed_patterns"}, {"score": 0.005909465953834025, "phrase": "flexrpset"}, {"score": 0.00481495049065317, "phrase": "finding_representative_pattern_sets"}, {"score": 0.004769182299692333, "phrase": "frequent_pattern_mining"}, {"score": 0.004678940805063634, "phrase": "enormous_number"}, {"score": 0.004634459424542272, "phrase": "frequent_patterns"}, {"score": 0.004525088883501587, "phrase": "great_challenge"}, {"score": 0.004313996835376177, "phrase": "generated_patterns"}, {"score": 0.004172094622123562, "phrase": "small_number"}, {"score": 0.004132411680987228, "phrase": "representative_patterns"}, {"score": 0.0037556843869894566, "phrase": "minimum_representative_pattern"}, {"score": 0.003702206069379459, "phrase": "error_guarantee"}, {"score": 0.0036147562669032957, "phrase": "smallest_solution"}, {"score": 0.003332537728389913, "phrase": "reasonable_amount"}, {"score": 0.002928765962664163, "phrase": "dense_datasets"}, {"score": 0.002512926336312949, "phrase": "result_size"}, {"score": 0.0024301229420875155, "phrase": "incremental_approach"}], "paper_keywords": ["Representative patterns", " frequent pattern summarization"], "paper_abstract": "Frequent pattern mining often produces an enormous number of frequent patterns, which imposes a great challenge on visualizing, understanding and further analysis of the generated patterns. This calls for finding a small number of representative patterns to best approximate all other patterns. In this paper, we develop an algorithm called MinRPset to find a minimum representative pattern set with error guarantee. MinRPset produces the smallest solution that we can possibly have in practice under the given problem setting, and it takes a reasonable amount of time to finish when the number of frequent closed patterns is below one million. MinRPset is very space-consuming and time-consuming on some dense datasets when the number of frequent closed patterns is large. To solve this problem, we propose another algorithm called FlexRPset, which provides one extra parameter K to allow users to make a trade-off between result size and efficiency. We adopt an incremental approach to let the users make the trade-off conveniently. Our experiment results show that MinRPset and FlexRPset produce fewer representative patterns than RPlocal-an efficient algorithm that is developed for solving the same problem.", "paper_title": "A Flexible Approach to Finding Representative Pattern Sets", "paper_id": "WOS:000340205700002"}