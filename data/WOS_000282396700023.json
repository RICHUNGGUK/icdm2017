{"auto_keywords": [{"score": 0.045589504389445104, "phrase": "linear_quadtree"}, {"score": 0.015467388594408032, "phrase": "real_time"}, {"score": 0.00481495049065317, "phrase": "linear_quadtree_construction"}, {"score": 0.004509919457793852, "phrase": "novel_method"}, {"score": 0.0037667216301666196, "phrase": "major_order"}, {"score": 0.0036453427552753533, "phrase": "encountered_pixel"}, {"score": 0.003556873173040169, "phrase": "result_codes"}, {"score": 0.0028046593475268174, "phrase": "previous_studies"}, {"score": 0.0027141975147496264, "phrase": "huge_memory_space"}, {"score": 0.002626645763725465, "phrase": "input_pixels"}, {"score": 0.002500571634075998, "phrase": "post_processing"}, {"score": 0.0023610946923597405, "phrase": "final_codes"}, {"score": 0.0022477377970612847, "phrase": "increasing_order"}, {"score": 0.0021049977753042253, "phrase": "simpler_and_more_efficient_operations"}], "paper_keywords": ["linear quadtree", " linear bintree", " spatial data structure", " image encoding", " locational code"], "paper_abstract": "The paper presents a novel method for encoding the linear quadtree of a given image. In this method, the pixels of the image are scanned in row major order. In each encountered pixel, the result codes in the linear quadtree are updated simultaneously in real time. The linear quadtree is thus obtained after all pixels are processed. This method is quite different from those in previous studies, which need huge memory space to store the input pixels for further processing, or need post processing to rearrange the sequence of the final codes to put them back in increasing order. Moreover, since this method adopts simpler and more efficient operations than previous methods, it is found to be faster in experiments.", "paper_title": "Linear Quadtree Construction in Real Time", "paper_id": "WOS:000282396700023"}