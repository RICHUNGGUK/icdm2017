{"auto_keywords": [{"score": 0.036297196938033884, "phrase": "hash_functions"}, {"score": 0.03054070346071615, "phrase": "binary_quadratic_problems"}, {"score": 0.00481495049065317, "phrase": "graph_cuts"}, {"score": 0.004682525167261325, "phrase": "large-scale_query-by-example_image_retrieval_systems"}, {"score": 0.0045538260607592505, "phrase": "hamming"}, {"score": 0.00450633982324153, "phrase": "great_benefits"}, {"score": 0.004382364826200616, "phrase": "original_features"}, {"score": 0.004351905364003354, "phrase": "compact_binary_codes"}, {"score": 0.0042617859335771615, "phrase": "label_based_similarity"}, {"score": 0.004217425501814589, "phrase": "binary_hamming_space"}, {"score": 0.004144510906908392, "phrase": "single_form"}, {"score": 0.004115697805448384, "phrase": "hash_function"}, {"score": 0.003933214459874487, "phrase": "specific_form"}, {"score": 0.0038922607214377557, "phrase": "tight_coupling"}, {"score": 0.0037326500020622715, "phrase": "complex_optimization_problems"}, {"score": 0.0035670895401691536, "phrase": "flexible_yet_simple_framework"}, {"score": 0.0034931650881768286, "phrase": "different_types"}, {"score": 0.003468864442215017, "phrase": "loss_functions"}, {"score": 0.0034088473318056537, "phrase": "proposed_framework"}, {"score": 0.0033498651263935194, "phrase": "existing_approaches"}, {"score": 0.0031900709094621975, "phrase": "new_problem-specific_hashing_methods"}, {"score": 0.0031239353051539347, "phrase": "hashing_learning_problem"}, {"score": 0.0029438813080245544, "phrase": "first_step"}, {"score": 0.002842840150239715, "phrase": "second_step"}, {"score": 0.0027741761880779535, "phrase": "standard_binary_classifier"}, {"score": 0.0027356847952125433, "phrase": "large-scale_binary_code_inference"}, {"score": 0.0025779504911297236, "phrase": "efficient_graph_cut_methods"}, {"score": 0.0024634797027967203, "phrase": "large-scale_high-dimensional_data"}, {"score": 0.002412371116984224, "phrase": "boosted_decision_trees"}, {"score": 0.0022105600003496225, "phrase": "proposed_method"}, {"score": 0.0021049977753042253, "phrase": "high-dimensional_data"}], "paper_keywords": ["Hashing", " binary codes", " graph cuts", " decision trees", " nearest neighbour search", " image retrieval"], "paper_abstract": "To build large-scale query-by-example image retrieval systems, embedding image features into a binary Hamming space provides great benefits. Supervised hashing aims to map the original features to compact binary codes that are able to preserve label based similarity in the binary Hamming space. Most existing approaches apply a single form of hash function, and an optimization process which is typically deeply coupled to this specific form. This tight coupling restricts the flexibility of those methods, and can result in complex optimization problems that are difficult to solve. In this work we proffer a flexible yet simple framework that is able to accommodate different types of loss functions and hash functions. The proposed framework allows a number of existing approaches to hashing to be placed in context, and simplifies the development of new problem-specific hashing methods. Our framework decomposes the hashing learning problem into two steps: binary code (hash bit) learning and hash function learning. The first step can typically be formulated as binary quadratic problems, and the second step can be accomplished by training a standard binary classifier. For solving large-scale binary code inference, we show how it is possible to ensure that the binary quadratic problems are submodular such that efficient graph cut methods may be used. To achieve efficiency as well as efficacy on large-scale high-dimensional data, we propose to use boosted decision trees as the hash functions, which are nonlinear, highly descriptive, and are very fast to train and evaluate. Experiments demonstrate that the proposed method significantly outperforms most state-of-the-art methods, especially on high-dimensional data.", "paper_title": "Supervised Hashing Using Graph Cuts and Boosted Decision Trees", "paper_id": "WOS:000362411000013"}