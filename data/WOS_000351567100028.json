{"auto_keywords": [{"score": 0.04942444706912143, "phrase": "polyhedral_optimization"}, {"score": 0.048778468893892986, "phrase": "high-level_synthesis"}, {"score": 0.045969488081988634, "phrase": "parallelized_circuits"}, {"score": 0.00481495049065317, "phrase": "loop_parallelization"}, {"score": 0.004525629293824217, "phrase": "synthesis_method"}, {"score": 0.004463723624910583, "phrase": "nested_loops"}, {"score": 0.003555902292752528, "phrase": "multiple_processing_elements"}, {"score": 0.0033190180867511605, "phrase": "polyhedral_optimizing_compiler"}, {"score": 0.0032510690712452147, "phrase": "multiple_pes"}, {"score": 0.0031193028729331667, "phrase": "off-chip_ram"}, {"score": 0.0027741761880779535, "phrase": "off-chip_ram_access_conflicts"}, {"score": 0.002643386043540555, "phrase": "data_reuses"}, {"score": 0.002255431275670053, "phrase": "sequential_non-buffered_ones"}, {"score": 0.0021049977753042253, "phrase": "eight_pes"}], "paper_keywords": ["high-level synthesis", " array partitioning", " buffer management", " Polyhedral Optimization"], "paper_abstract": "We propose a synthesis method of nested loops into parallelized circuits by integrating the polyhedral optimization, which is a state-of-the-art technique in the field of software, into high-level synthesis. Our method constructs circuits equipped with multiple processing elements (PEs), using information generated by the polyhedral optimizing compiler. Since multiple PEs cannot concurrently access the off-chip RAM, a method for constructing on-chip buffers is also proposed. Our buffeting method reduces the off-chip RAM access conflicts and further enables burst accesses and data reuses, in our experimental result, the buffered circuits generated by our method are 8.2 times on average and 26.5 times at maximum faster than the sequential non-buffered ones, when each of the parallelized circuits is configured with eight PEs.", "paper_title": "Nested Loop Parallelization Using Polyhedral Optimization in High-Level Synthesis", "paper_id": "WOS:000351567100028"}