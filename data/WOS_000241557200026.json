{"auto_keywords": [{"score": 0.04904947763914552, "phrase": "mpi"}, {"score": 0.013914489994069204, "phrase": "noncontiguous_data"}, {"score": 0.00481495049065317, "phrase": "automatic_memory_optimizations"}, {"score": 0.004643594260262632, "phrase": "datatype_performance"}, {"score": 0.004350308086118336, "phrase": "noncontiguous_memory_layout"}, {"score": 0.004165105357908494, "phrase": "single_communication_function"}, {"score": 0.004075469816959996, "phrase": "powerful_feature"}, {"score": 0.003987755561492638, "phrase": "mpi_implementation"}, {"score": 0.0033748847621075536, "phrase": "application_developers"}, {"score": 0.002876747208161839, "phrase": "memory_performance"}, {"score": 0.0027943943921568456, "phrase": "access_pattern"}, {"score": 0.002754103864198219, "phrase": "derived_datatypes"}, {"score": 0.0021049977753042253, "phrase": "optimized_manual_routines"}], "paper_keywords": ["MPI", " derived datatypes", " MPI performance optimization"], "paper_abstract": "MPI derived datatypes allow users to describe noncontiguous memory layout and communicate noncontiguous data with a single communication function. This powerful feature enables an MPI implementation to optimize the transfer of noncontiguous data. In practice, however, many implementations of MPI derived datatypes perform poorly, which makes application developers avoid using this feature. In this paper, we present a technique to automatically select templates that are optimized for memory performance based on the access pattern of derived datatypes. We implement this mechanism in the MPICH2 source code. The performance of our implementation is compared to well-written manual packing/unpacking routines and original MPICH2 implementation. We show that performance for various derived datatypes is significantly improved and comparable to that of optimized manual routines.", "paper_title": "Automatic memory optimizations for improving MPI derived datatype performance", "paper_id": "WOS:000241557200026"}