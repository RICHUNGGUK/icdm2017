{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "multi-agent_system_software_tests"}, {"score": 0.004628223381645729, "phrase": "debugging_multi-agent_systems"}, {"score": 0.004468304427278713, "phrase": "recorded_interactions"}, {"score": 0.0038647641000798135, "phrase": "distributed_multi-agent_systems"}, {"score": 0.00355485940716082, "phrase": "distributed_system"}, {"score": 0.0032410683344688625, "phrase": "solid_infrastructure"}, {"score": 0.00307431840409833, "phrase": "multi-agent_systems"}, {"score": 0.002941913249957503, "phrase": "generic_registration_layer"}, {"score": 0.0028778584739756786, "phrase": "aspect_oriented_programming"}, {"score": 0.0028526276660691525, "phrase": "vector_clocks"}, {"score": 0.0027782510491938315, "phrase": "distributed_events"}, {"score": 0.002600661525224505, "phrase": "graph_theory"}, {"score": 0.0025665261770229757, "phrase": "simplified_representations"}, {"score": 0.002488604965680912, "phrase": "abstract_graphs"}, {"score": 0.0022192891418394514, "phrase": "open_source_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Multi-agent systems", " Testing", " Debugging", " Off-line analysis"], "paper_abstract": "One of the most recurrent approaches for testing and debugging multi-agent systems is the use of displays which show recorded interactions among agents. These displays are studied in order to discover faults in the software. Three main shortcomings are present in this approach: (1) how to capture the interactions in distributed multi-agent systems is not usually explained; (2) a total order among the events is considered and this is not accurate in a distributed system; (3) an excess of information is displayed to developers without the possibility of obtaining a summary. This paper offers a solid infrastructure to capture, order, display and summarize messages exchanged in multi-agent systems. To deal with (1), a generic registration layer is offered by using aspect oriented programming. Vector clocks are employed to order the distributed events with the aim of solving (2). These clocks are combined with graph theory to obtain simplified representations of the interactions. Finally, abstract graphs are presented as a mechanism to summarize interactions to cover (3). Several case studies demonstrate the utility of the approach presented here and an open source implementation is provided along with the paper. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "An approach to debug interactions in multi-agent system software tests", "paper_id": "WOS:000305368000003"}