{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "heap-allocated_data"}, {"score": 0.03744282073700833, "phrase": "locality_conditions"}, {"score": 0.003973523379376352, "phrase": "object_fields"}, {"score": 0.003904713104101532, "phrase": "array_contents"}, {"score": 0.0034352820439026584, "phrase": "java"}, {"score": 0.0032786537599187125, "phrase": "ghost_non-heap"}, {"score": 0.0031476068430779367, "phrase": "heap-insensitive_analysis"}, {"score": 0.003093054709625219, "phrase": "transformed_program"}, {"score": 0.0029867619862229853, "phrase": "original_heap-allocated_data"}, {"score": 0.0026892447164623247, "phrase": "aliasing_preconditions"}, {"score": 0.002566685388128598, "phrase": "initial_state"}, {"score": 0.002435453488008121, "phrase": "experimental_results"}, {"score": 0.0023380300046435187, "phrase": "accuracy_w.r.t"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Static analysis", " Heap-sensitive analysis", " Termination", " Java bytecode", " Program transformation"], "paper_abstract": "Static analysis which takes into account the values of data stored in the heap is considered complex and computationally intractable in practice. Thus, most static analyzers do not keep track of object fields nor of array contents, i.e., they are heap-insensitive. In this article, we propose locality conditions for soundly tracking heap-allocated data in Java (bytecode) programs, by means of ghost non-heap allocated variables. This way, heap-insensitive analysis over the transformed program can infer information on the original heap-allocated data without sacrificing efficiency. If the locality conditions cannot be proven unconditionally, we seek to generate aliasing preconditions which, when they hold in the initial state, guarantee the termination of the program. Experimental results show that we greatly improve the accuracy w.r.t. a heap-insensitive analysis while the overhead introduced is reasonable. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Conditional termination of loops over heap-allocated data", "paper_id": "WOS:000338597900002"}