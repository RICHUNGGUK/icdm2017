{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "automatic_parallelization"}, {"score": 0.03292359423412208, "phrase": "privateer"}, {"score": 0.013683039496282945, "phrase": "data_structures"}, {"score": 0.004709567162738894, "phrase": "promising_strategy"}, {"score": 0.004606479650820579, "phrase": "application_performance"}, {"score": 0.004505638402009237, "phrase": "multicore_era"}, {"score": 0.004374593906165761, "phrase": "common_programming_practices"}, {"score": 0.004123781267600542, "phrase": "artificial_constraints"}, {"score": 0.0036914757355166966, "phrase": "scalable_parallelization"}, {"score": 0.0036105923401756126, "phrase": "privatization_schemes"}, {"score": 0.0034540850937966336, "phrase": "scalar_variables"}, {"score": 0.0032319109979344184, "phrase": "dynamic_data_structures"}, {"score": 0.0028928306994090453, "phrase": "dynamic_and_recursive_data_structures"}, {"score": 0.0027673496368158545, "phrase": "unrestricted_pointers"}, {"score": 0.0026472970609754095, "phrase": "memory_layout"}, {"score": 0.002551231163230566, "phrase": "memory_objects"}, {"score": 0.0025137856138000014, "phrase": "privateer's_lightweight_runtime_system"}, {"score": 0.002422552850701705, "phrase": "speculative_privatization"}, {"score": 0.0023694065215394593, "phrase": "correct_parallel_execution"}, {"score": 0.0022005118194652704, "phrase": "geomean_whole-program_speedup"}, {"score": 0.0021363670305843403, "phrase": "best_sequential_execution"}], "paper_keywords": ["Languages", " Performance", " Design", " Experimentation", " Automatic parallelization", " Separation", " Speculation"], "paper_abstract": "Automatic parallelization is a promising strategy to improve application performance in the multicore era. However, common programming practices such as the reuse of data structures introduce artificial constraints that obstruct automatic parallelization. Privatization relieves these constraints by replicating data structures, thus enabling scalable parallelization. Prior privatization schemes are limited to arrays and scalar variables because they are sensitive to the layout of dynamic data structures. This work presents Privateer, the first fully automatic privatization system to handle dynamic and recursive data structures, even in languages with unrestricted pointers. To reduce sensitivity to memory layout, Privateer speculatively separates memory objects. Privateer's lightweight runtime system validates speculative separation and speculative privatization to ensure correct parallel execution. Privateer enables automatic parallelization of general-purpose C/C++ applications, yielding a geomean whole-program speedup of 11.4x over best sequential execution on 24 cores, while non-speculative parallelization yields only 0.93x.", "paper_title": "Speculative Separation for Privatization and Reductions", "paper_id": "WOS:000307582100032"}