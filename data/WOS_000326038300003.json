{"auto_keywords": [{"score": 0.031066008563748037, "phrase": "fft"}, {"score": 0.00481495049065317, "phrase": "energy_gains"}, {"score": 0.004594951819987416, "phrase": "dedicated_vector_coprocessor"}, {"score": 0.004384960761826366, "phrase": "sustained_data_parallelism"}, {"score": 0.004283576270012874, "phrase": "vector-length_variations"}, {"score": 0.003580032420161922, "phrase": "vector_unit_utilization"}, {"score": 0.0035245918797629804, "phrase": "substantially_reduced_energy_costs"}, {"score": 0.0034029588672379926, "phrase": "multiple_cores"}, {"score": 0.0032472646337850042, "phrase": "vector-lane_sharing"}, {"score": 0.0031845067058084613, "phrase": "vector_coprocessor_sharing_policies"}, {"score": 0.0031474338010045386, "phrase": "dual-core_system"}, {"score": 0.0030745737579268876, "phrase": "floating-point_performance"}, {"score": 0.002956858061485755, "phrase": "fir_filtering"}, {"score": 0.002865929543375884, "phrase": "lu_factorization"}, {"score": 0.002821516317503421, "phrase": "coprocessor_sharing_policies"}, {"score": 0.0027995677499976406, "phrase": "high_utilization"}, {"score": 0.002756180088265064, "phrase": "low_energy_costs"}, {"score": 0.0027240799841720957, "phrase": "proposed_policies"}, {"score": 0.0026609940110902666, "phrase": "energy_needs"}, {"score": 0.002559072326933071, "phrase": "single_core"}, {"score": 0.0025292620341476283, "phrase": "attached_vector_coprocessor"}, {"score": 0.0024610448251906453, "phrase": "clock_cycles"}, {"score": 0.00243237365704391, "phrase": "sharing_policies"}, {"score": 0.002385326947545194, "phrase": "optimized_xeon_runs"}, {"score": 0.0023209828061385596, "phrase": "empirical_power_models"}, {"score": 0.0022583704173318123, "phrase": "runtime_system"}, {"score": 0.002171836484200008, "phrase": "hybrid_system"}, {"score": 0.0021049977753042253, "phrase": "shared_coprocessor_policies"}], "paper_keywords": ["Performance", " Power", " vector coprocessor", " power", " coprocessor sharing", " multicore", " FPGA prototyping", " Xilinx MicroBlaze"], "paper_abstract": "For most of the applications that make use of a dedicated vector coprocessor, its resources are not highly utilized due to the lack of sustained data parallelism which often occurs due to vector-length variations in dynamic environments. The motivation of our work stems from: (a) the mandate for multicore designs to make efficient use of on-chip resources for low power and high performance; (b) the omnipresence of vector operations in high-performance scientific and emerging embedded applications; (c) the need to often handle a variety of vector sizes; and (d) vector kernels in application suites may have diverse computation needs. We present a robust design framework for vector coprocessor sharing in multicore environments that maximizes vector unit utilization and performance at substantially reduced energy costs. For our adaptive vector unit, which is attached to multiple cores, we propose three basic shared working policies that enforce coarse-grain, fine-grain, and vector-lane sharing. We benchmark these vector coprocessor sharing policies for a dual-core system and evaluate them using the floating-point performance, resource utilization, and power/energy consumption metrics. Benchmarking for FIR filtering, FFT, matrix multiplication, and LU factorization shows that these coprocessor sharing policies yield high utilization and performance with low energy costs. The proposed policies provide 1.2-2 speedups and reduce the energy needs by about 50% as compared to a system having a single core with an attached vector coprocessor. With the performance expressed in clock cycles, the sharing policies demonstrate 3.62-7.92 speedups compared to optimized Xeon runs. We also introduce performance and empirical power models that can be used by the runtime system to estimate the effectiveness of each policy in a hybrid system that can simultaneously implement this suite of shared coprocessor policies.", "paper_title": "Multicore-Based Vector Coprocessor Sharing for Performance and Energy Gains", "paper_id": "WOS:000326038300003"}