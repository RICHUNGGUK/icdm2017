{"auto_keywords": [{"score": 0.049447946898790056, "phrase": "binary_goppa_codes"}, {"score": 0.00481495049065317, "phrase": "scalable_co-processor"}, {"score": 0.004720043307726269, "phrase": "asymmetric_cryptographic_primitives"}, {"score": 0.004642377903273107, "phrase": "secure_communications"}, {"score": 0.004611669085594069, "phrase": "public_networks"}, {"score": 0.004581162468419365, "phrase": "public_mediums"}, {"score": 0.0044759626695474106, "phrase": "software_libraries"}, {"score": 0.004446349752828045, "phrase": "hardware_co-processors"}, {"score": 0.004202387892988509, "phrase": "embedded_devices"}, {"score": 0.004160740888748725, "phrase": "application-specific_servers"}, {"score": 0.004011521305179232, "phrase": "elliptic_curve_cryptography"}, {"score": 0.003984999037045389, "phrase": "ecc"}, {"score": 0.003854809457075099, "phrase": "underlying_extended-precision_modular_arithmetic"}, {"score": 0.0037412912454999046, "phrase": "highly_constrained_platforms"}, {"score": 0.003595097948724078, "phrase": "alternative_asymmetric_encryption_scheme"}, {"score": 0.003547642961654828, "phrase": "lightweight_arithmetic"}, {"score": 0.0035241579169859017, "phrase": "mceliece"}, {"score": 0.003386412845243943, "phrase": "error_correction_codes"}, {"score": 0.0033306180744375616, "phrase": "simpler_arithmetic"}, {"score": 0.003286642683771891, "phrase": "better_performance"}, {"score": 0.0032433000607668748, "phrase": "rsa"}, {"score": 0.0032217642727860587, "phrase": "ecc."}, {"score": 0.003054922297665861, "phrase": "flexible_architecture"}, {"score": 0.003004572722189157, "phrase": "area_usage_characteristics"}, {"score": 0.002925728709297618, "phrase": "proposed_architecture"}, {"score": 0.002877502286766111, "phrase": "usual_security_levels"}, {"score": 0.002595698433525986, "phrase": "best-known_result"}, {"score": 0.0023806911724834024, "phrase": "traditional_binary_goppa_codes"}, {"score": 0.002349228457383314, "phrase": "latter_case"}, {"score": 0.0022951636331743066, "phrase": "decryption_operation"}, {"score": 0.0021190503591688834, "phrase": "hardware_resource"}], "paper_keywords": ["Performance", " Security", " Code-based encryption", " FPGA", " Goppa codes", " hardware", " McEliece"], "paper_abstract": "Asymmetric cryptographic primitives are essential to enable secure communications in public networks or public mediums. Such primitives can be deployed as software libraries or hardware co-processors, the latter being more commonly employed in systems on chip (SoC) scenarios, embedded devices, or application-specific servers. Unfortunately, the most commonly available solutions, based on RSA or elliptic curve cryptography (ECC), are highly processing intensive due to the underlying extended-precision modular arithmetic. Consequently, they are not available on highly constrained platforms. Aiming to tackle this issue, we here investigate an alternative asymmetric encryption scheme that relies on lightweight arithmetic: McEliece. This scheme is especially appealing because, being based on error correction codes, it displays a simpler arithmetic and leads to better performance when compared to RSA or ECC. To evaluate the implementation of this scheme in hardware, we propose and analyze a flexible architecture whose security level and time versus area usage characteristics can be reconfigured as desired. The proposed architecture is suitable to all usual security levels, ranging from 80 to 256 bits. It is also very efficient, being able to perform data decryption with binary Goppa codes in 56 mu s with 3,402 slices on a Xilinx Spartan-3AN FPGA, whereas the best-known result in the literature for the same FPGA is 115 mu s with 7,331 slices. Alternatively, the architecture can operate with quasi-dyadic Goppa (QD-Goppa) codes, which involves smaller keys than traditional binary Goppa codes. In the latter case, for an 80-bit security level, the decryption operation can take from 1.1ms with 1,129 slices to 68 mu s with 8,268 sices. By choosing a more hardware-friendly decoding algorithm, focusing hardware resources on most bottleneck operations and sharing hardware resource for two different algorithms, better results than the those in the literature were obtained.", "paper_title": "Optimized and Scalable Co-Processor for McEliece with Binary Goppa Codes", "paper_id": "WOS:000355679800007"}