{"auto_keywords": [{"score": 0.02878760791309284, "phrase": "cspec"}, {"score": 0.028124342668400446, "phrase": "speculative_code"}, {"score": 0.00481495049065317, "phrase": "compiler_aided_manual"}, {"score": 0.0047464608267006395, "phrase": "high_performance_concurrent_data_structures"}, {"score": 0.004634459424542272, "phrase": "well-known_means"}, {"score": 0.004525088883501587, "phrase": "concurrent_methods"}, {"score": 0.004334657104697421, "phrase": "traditional_nonblocking_data_structures"}, {"score": 0.004272969980602508, "phrase": "particularly_restrictive_form"}, {"score": 0.004192078165260057, "phrase": "software_transactional_memory"}, {"score": 0.0036845490951857617, "phrase": "manual_addition"}, {"score": 0.0036147562669032957, "phrase": "traditional_lock-based_code"}, {"score": 0.0035462807506718578, "phrase": "significant_performance_improvements"}, {"score": 0.0035125292519354724, "phrase": "successful_speculation"}, {"score": 0.0034790978593553794, "phrase": "careful_consideration"}, {"score": 0.0031921317979928406, "phrase": "substantial_modifications"}, {"score": 0.003161740194257218, "phrase": "code_structure"}, {"score": 0.00311669276800628, "phrase": "deep_understanding"}, {"score": 0.003072285184441679, "phrase": "memory_model"}, {"score": 0.0030285084113651035, "phrase": "latter_requirements"}, {"score": 0.002873247913129334, "phrase": "expert_programmers"}, {"score": 0.002739001004969201, "phrase": "compiler_tool"}, {"score": 0.0026235360404084137, "phrase": "baseline_lock-based_code"}, {"score": 0.0025614999929672, "phrase": "compiler-aided_manual_speculation"}, {"score": 0.002524982927936405, "phrase": "original_code_structure"}, {"score": 0.002500927169609655, "phrase": "better_readability"}, {"score": 0.0023613185213421173, "phrase": "validation_strategies"}, {"score": 0.0022617389804167943, "phrase": "small_number"}, {"score": 0.0022188370388602813, "phrase": "lock-based_code"}, {"score": 0.0021049977753042253, "phrase": "best-effort_hand-written_versions"}], "paper_keywords": ["Manual Speculation", " Design Pattern", " Concurrent Data Structure", " Compiler Assistance"], "paper_abstract": "Speculation is a well-known means of increasing parallelism among concurrent methods that are usually but not always independent. Traditional nonblocking data structures employ a particularly restrictive form of speculation. Software transactional memory (STM) systems employ a much more general-though typically blocking-form, and there is a wealth of options in between. Using several different concurrent data structures as examples, we show that manual addition of speculation to traditional lock-based code can lead to significant performance improvements. Successful speculation requires careful consideration of profitability, and of how and when to validate consistency. Unfortunately, it also requires substantial modifications to code structure and a deep understanding of the memory model. These latter requirements make it difficult to use in its purely manual form, even for expert programmers. To simplify the process, we present a compiler tool, CSpec, that automatically generates speculative code from baseline lock-based code with user annotations. Compiler-aided manual speculation keeps the original code structure for better readability and maintenance, while providing the flexibility to chose speculation and validation strategies. Experiments on UltraSPARC and x86 platforms demonstrate that with a small number annotations added to lock-based code, CSpec can generate speculative code that matches the performance of best-effort hand-written versions.", "paper_title": "Compiler Aided Manual Speculation for High Performance Concurrent Data Structures", "paper_id": "WOS:000324158900005"}