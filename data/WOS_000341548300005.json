{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "feature-oriented_programming"}, {"score": 0.015543129107524334, "phrase": "software_product_lines"}, {"score": 0.014689068016119348, "phrase": "composition_mechanisms"}, {"score": 0.009619401801214353, "phrase": "fop"}, {"score": 0.0094747008909468, "phrase": "source_code"}, {"score": 0.004547656324173302, "phrase": "programming_technique"}, {"score": 0.004041155193307942, "phrase": "empirical_evidence"}, {"score": 0.0039049226745413224, "phrase": "recent_research_work"}, {"score": 0.00377326532920359, "phrase": "spl_modularity"}, {"score": 0.0035500334260484376, "phrase": "fop_composition_mechanisms"}, {"score": 0.00348300993356662, "phrase": "quantitative_and_qualitative_analysis"}, {"score": 0.003443402656397069, "phrase": "feature_modularity"}, {"score": 0.003417247483597346, "phrase": "change_propagation"}, {"score": 0.0032519989404960073, "phrase": "quantitative_data"}, {"score": 0.0028565082986974602, "phrase": "balanced_number"}, {"score": 0.0028347983387988847, "phrase": "added_modules"}, {"score": 0.0028025415122856973, "phrase": "better_support"}, {"score": 0.002760101069870307, "phrase": "non-intrusive_insertions"}, {"score": 0.00266693888510356, "phrase": "open-closed_principle"}, {"score": 0.002557322657104706, "phrase": "modularity_degeneration"}, {"score": 0.0024428607154967806, "phrase": "conditional_compilation_and_design_patterns"}, {"score": 0.002351389889948836, "phrase": "variability_mechanism"}, {"score": 0.0022981559278396845, "phrase": "careful_spl_design"}, {"score": 0.0022547140008848912, "phrase": "aforementioned_results"}, {"score": 0.0021537671245615286, "phrase": "fine-grained_features"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software product lines", " Feature-oriented programming", " Variability management", " Design patterns", " Conditional compilation"], "paper_abstract": "Feature-oriented programming (FOP) is a programming technique based on composition mechanisms, called refinements. It is often assumed that feature-oriented programming is more suitable than other variability mechanisms for implementing Software Product Lines (SPLs). However, there is no empirical evidence to support this claim. In fact, recent research work found out that some composition mechanisms might degenerate the SPL modularity and stability. However, there is no study investigating these properties focusing on the FOP composition mechanisms. This paper presents quantitative and qualitative analysis of how feature modularity and change propagation behave in the context of two evolving SPLs, namely WebStore and MobileMedia. Quantitative data have been collected from the SPLs developed in three different variability mechanisms: FOP refinements, conditional compilation, and object-oriented design patterns. Our results suggest that FOP requires few changes in source code and a balanced number of added modules, providing better support than other techniques for non-intrusive insertions. Therefore, it adheres closer to the Open-Closed principle. Additionally, FOP seems to be more effective tackling modularity degeneration, by avoiding feature tangling and scattering in source code, than conditional compilation and design patterns. These results are based not only on the variability mechanism itself, but also on careful SPL design. However, the aforementioned results are weaker when the design needs to cope with crosscutting and fine-grained features. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "On the use of feature-oriented programming for evolving software product lines - A comparative study", "paper_id": "WOS:000341548300005"}