{"auto_keywords": [{"score": 0.02998999927405984, "phrase": "scatter-gather-merge"}, {"score": 0.02322730111336098, "phrase": "data-parallel_frameworks"}, {"score": 0.009272128107189857, "phrase": "mapreduce"}, {"score": 0.008292279797316428, "phrase": "data_warehouses"}, {"score": 0.0067885469573581575, "phrase": "star-join_queries"}, {"score": 0.004730458558634266, "phrase": "data-parallel_framework"}, {"score": 0.004592905436175987, "phrase": "large-scale_data_processing"}, {"score": 0.004355267258397068, "phrase": "huge_amount"}, {"score": 0.004253618550301311, "phrase": "commodity_machines"}, {"score": 0.00384731849108269, "phrase": "web_search"}, {"score": 0.003802135020791801, "phrase": "data_mining"}, {"score": 0.003479692058963528, "phrase": "star-join_query"}, {"score": 0.0034185505275141077, "phrase": "popular_query"}, {"score": 0.003299460925313939, "phrase": "current_target_domain"}, {"score": 0.00314708280192844, "phrase": "new_algorithm"}, {"score": 0.002948953046506812, "phrase": "dryad"}, {"score": 0.0028800314406625996, "phrase": "general_data-parallel_frameworks"}, {"score": 0.0026986685585382347, "phrase": "constant_number"}, {"score": 0.00266693888510356, "phrase": "computation_steps"}, {"score": 0.002573965014439041, "phrase": "participating_dimension_tables_increases"}, {"score": 0.0025137856138000014, "phrase": "bloom_filters"}, {"score": 0.0024405312482831646, "phrase": "non-trivial_amount"}, {"score": 0.0024118292918742967, "phrase": "io."}, {"score": 0.0021682027434117095, "phrase": "cloud_environments"}, {"score": 0.0021049977753042253, "phrase": "existing_approaches"}], "paper_keywords": ["Data parallel framework", " MapReduce", " Hadoop", " Star-join query"], "paper_abstract": "A data-parallel framework is very attractive for large-scale data processing since it enables such an application to easily process a huge amount of data on commodity machines. MapReduce, a popular data-parallel framework, is used in various fields such as web search, data mining and data warehouses; it is proven to be very practical for such a data-parallel application. A star-join query is a popular query in data warehouses that are a current target domain of data-parallel frameworks. This article proposes a new algorithm that efficiently processes star-join queries in data-parallel frameworks such as MapReduce and Dryad. Our star-join algorithm for general data-parallel frameworks is called Scatter-Gather-Merge, and it processes star-join queries in a constant number of computation steps, although the number of participating dimension tables increases. By adopting bloom filters, Scatter-Gather-Merge reduces a non-trivial amount of IO. We also show that Scatter-Gather-Merge can be easily applied to MapReduce. Our experimental results in both cluster and cloud environments show that Scatter-Gather-Merge outperforms existing approaches.", "paper_title": "Scatter-Gather-Merge: An efficient star-join query processing algorithm for data-parallel frameworks", "paper_id": "WOS:000290314300006"}