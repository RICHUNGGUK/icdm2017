{"auto_keywords": [{"score": 0.03213722452878967, "phrase": "usa"}, {"score": 0.010397135567797344, "phrase": "meyer"}, {"score": 0.00481495049065317, "phrase": "self-adapting_components"}, {"score": 0.004697308822154191, "phrase": "software_systems"}, {"score": 0.004382913938427474, "phrase": "increasing_complexity"}, {"score": 0.004171259063201874, "phrase": "software_engineering_community"}, {"score": 0.004029187256595917, "phrase": "considerable_effort"}, {"score": 0.0038919354605673104, "phrase": "component-based_software_methodologies"}, {"score": 0.0035249212996297332, "phrase": "carnegie_mellon_university"}, {"score": 0.0032887360307856635, "phrase": "contract'_metaphor"}, {"score": 0.003068327486877065, "phrase": "prentice_hall"}, {"score": 0.0029055323737809825, "phrase": "component_composition"}, {"score": 0.0028484940955893134, "phrase": "dynamic_adaptation"}, {"score": 0.0026839922027139967, "phrase": "software_architecture"}, {"score": 0.002618278365749875, "phrase": "implementation_level"}, {"score": 0.0024306105794630246, "phrase": "subtyping_techniques"}, {"score": 0.00240662380079115, "phrase": "connectors_development"}, {"score": 0.0023130151703068444, "phrase": "generic_connectors"}, {"score": 0.0022901862321082407, "phrase": "standard_behavior_patterns"}, {"score": 0.0021902063413831545, "phrase": "semantic_web_techniques"}, {"score": 0.002157857111130435, "phrase": "prolog_machine"}, {"score": 0.0021259846592569386, "phrase": "functional_adaptation_problems"}], "paper_keywords": ["reusable software", " interoperability", " distribution maintenance and enhancement", " software component composition"], "paper_abstract": "Software systems grow each day in size and complexity. In an effort to manage increasing complexity and to maximize the reuse of code, the software engineering community has, in recent years, put considerable effort into the design and development of component-based software methodologies and tools. Inspired by the notion of connector (Allen and Garlan (1994) Formal connectors. Technical report CMU-CS-94-115, Carnegie Mellon University, PA, USA) in software architecture and the 'Design by Contract' metaphor proposed by Meyer ((2000) Object-Oriented Software Construction. Prentice Hall, USA), this paper presents a methodology for component composition, coordination and dynamic adaptation. Our proposal is based on connectors enriched with contracts, making software architecture more explicit at the implementation level. Those connectors will be components in our system. Therefore, we can use subtyping techniques for connectors development and we could offer a set of generic connectors implementing standard behavior patterns. In addition, the connectors will use semantic web techniques and a Prolog machine to solve functional adaptation problems, such us name or parameters mismatching of a service, at run-time.", "paper_title": "Composition of self-adapting components for customizable systems", "paper_id": "WOS:000257178900007"}