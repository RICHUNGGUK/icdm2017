{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "trajectory_data"}, {"score": 0.013683624475702063, "phrase": "line_generalisation_approach"}, {"score": 0.007837966914768412, "phrase": "trajic"}, {"score": 0.004677372885331908, "phrase": "vast_amounts"}, {"score": 0.004521803560561489, "phrase": "gps-based_tracking_devices"}, {"score": 0.0039685202936462815, "phrase": "line_segments"}, {"score": 0.0038179283509963695, "phrase": "initial_data_point"}, {"score": 0.0037267132967205136, "phrase": "remaining_data_points"}, {"score": 0.003637669525737665, "phrase": "successive_deltas"}, {"score": 0.00346589179059467, "phrase": "large_error_margin"}, {"score": 0.0034159525504642656, "phrase": "existing_delta_compression_algorithms"}, {"score": 0.003350480663660326, "phrase": "lossy_compression"}, {"score": 0.0032546105164772995, "phrase": "uncovered_gap"}, {"score": 0.0031614748814351823, "phrase": "good_compression_ratio"}, {"score": 0.002954361295811154, "phrase": "delta_compression_approach"}, {"score": 0.002855934865505357, "phrase": "small_maximum_error_margin"}, {"score": 0.0027741761880779535, "phrase": "compression_ratio"}, {"score": 0.002707829887747594, "phrase": "alternative_techniques"}, {"score": 0.002592369213499121, "phrase": "delta-based_approach"}, {"score": 0.0025059724686541263, "phrase": "next_data_point"}, {"score": 0.002469830206270585, "phrase": "leading_zeros"}, {"score": 0.0024107449502335583, "phrase": "new_trajectory_compression_system"}, {"score": 0.002285674008055581, "phrase": "experimental_results"}, {"score": 0.0021987994275190314, "phrase": "straight-forward_delta_compression_algorithm"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_line_generalisation_algorithm"}], "paper_keywords": ["Trajectory compression", " spatial databases"], "paper_abstract": "The need to store vast amounts of trajectory data becomes more problematic as GPS-based tracking devices become increasingly prevalent. There are two commonly used approaches for compressing trajectory data. The first is the line generalisation approach which aims to fit the trajectory using a series of line segments. The second is to store the initial data point and then store the remaining data points as a sequence of successive deltas. The line generalisation approach is only effective when given a large error margin, and existing delta compression algorithms do not permit lossy compression. Consequently there is an uncovered gap in which users expect a good compression ratio by giving away only a small error margin. This paper fills this gap by extending the delta compression approach to allow users to trade a small maximum error margin for large improvements to the compression ratio. In addition, alternative techniques are extensively studied for the following two key components of any delta-based approach: predicting the value of the next data point and encoding leading zeros. We propose a new trajectory compression system called Trajic based on the results of the study. Experimental results show that Trajic produces 1.5 times smaller compressed data than a straight-forward delta compression algorithm for lossless compression and produces 9.4 times smaller compressed data than a state-of-the-art line generalisation algorithm when using a small maximum error bound of 1 meter.", "paper_title": "Trajic: An Effective Compression System for Trajectory Data", "paper_id": "WOS:000362943700021"}