{"auto_keywords": [{"score": 0.039503906687397436, "phrase": "wide_range"}, {"score": 0.00481495049065317, "phrase": "relational_verification"}, {"score": 0.004741167616693272, "phrase": "simd_loop_synthesis"}, {"score": 0.004668510065740584, "phrase": "existing_pattern-based_compiler_technology"}, {"score": 0.004422827355213055, "phrase": "full_potential"}, {"score": 0.004355026964936104, "phrase": "simd_architectures"}, {"score": 0.004190019394361629, "phrase": "new_program_synthesis"}, {"score": 0.00406250784433007, "phrase": "auto-vectorizing_performance"}, {"score": 0.0035899674590142653, "phrase": "performant_simd_code"}, {"score": 0.0034806529881619454, "phrase": "correctness_proofs"}, {"score": 0.0034008496666026585, "phrase": "output_code"}, {"score": 0.0033228699494959172, "phrase": "synthesis_technique"}, {"score": 0.0032216622984027558, "phrase": "existing_work"}, {"score": 0.00317221667574882, "phrase": "relational_verification_methods"}, {"score": 0.003075583447856341, "phrase": "novel_combination"}, {"score": 0.0030283730114326014, "phrase": "deductive_loop_restructuring"}, {"score": 0.002981885091155911, "phrase": "synthesis_condition_generation"}, {"score": 0.002913483929932102, "phrase": "new_inductive_synthesis_algorithm"}, {"score": 0.002846647336160784, "phrase": "loop-free_code_fragments"}, {"score": 0.0027813397260607487, "phrase": "inductive_synthesis_algorithm"}, {"score": 0.0027175263159330523, "phrase": "optimized_depth-first_exploration"}, {"score": 0.0025942468561537682, "phrase": "cegis_loop"}, {"score": 0.0024385083712241988, "phrase": "simd_implementations"}, {"score": 0.0022394839933089074, "phrase": "fundamental_looping_structures"}, {"score": 0.00218807532188779, "phrase": "resulting_simd_implementations"}, {"score": 0.0021378442381693847, "phrase": "original_loops"}], "paper_keywords": ["Program Vectorization", " Program Synthesis", " Deductive Synthesis", " Inductive Synthesis", " Relational Program Verification"], "paper_abstract": "Existing pattern-based compiler technology is unable to effectively exploit the full potential of SIMD architectures. We present a new program synthesis based technique for auto-vectorizing performance critical innermost loops. Our synthesis technique is applicable to a wide range of loops, consistently produces performant SIMD code, and generates correctness proofs for the output code. The synthesis technique, which leverages existing work on relational verification methods, is a novel combination of deductive loop restructuring, synthesis condition generation and a new inductive synthesis algorithm for producing loop-free code fragments. The inductive synthesis algorithm wraps an optimized depth-first exploration of code sequences inside a CEGIS loop. Our technique is able to quickly produce SIMD implementations (up to 9 instructions in 0.12 seconds) for a wide range of fundamental looping structures. The resulting SIMD implementations outperform the original loops by 2.0 x -3.7 x.", "paper_title": "From Relational Verification to SIMD Loop Synthesis", "paper_id": "WOS:000324158900012"}