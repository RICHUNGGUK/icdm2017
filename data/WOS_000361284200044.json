{"auto_keywords": [{"score": 0.04666794416407739, "phrase": "amortized_analysis"}, {"score": 0.046339294991504756, "phrase": "abstract_interpretation"}, {"score": 0.042714865967629946, "phrase": "proof_certificates"}, {"score": 0.00481495049065317, "phrase": "compositional_certified_resource_bounds"}, {"score": 0.004709567162738894, "phrase": "new_approach"}, {"score": 0.004640590144749795, "phrase": "worst-case_resource_bounds"}, {"score": 0.004539005582217309, "phrase": "described_technique"}, {"score": 0.004390764654147291, "phrase": "unified_framework"}, {"score": 0.003916098498242888, "phrase": "potential_method"}, {"score": 0.0037881238886444332, "phrase": "global_whole-program_bounds"}, {"score": 0.0036778708850237814, "phrase": "size_changes"}, {"score": 0.003623949225126944, "phrase": "sequenced_loops"}, {"score": 0.0035445401296650535, "phrase": "resource_consumption"}, {"score": 0.003441352119167824, "phrase": "function_call"}, {"score": 0.0033411580268394732, "phrase": "function_body"}, {"score": 0.003316567137142017, "phrase": "user_interaction"}, {"score": 0.0032558762499901727, "phrase": "new_mechanism"}, {"score": 0.0032081215771180664, "phrase": "qualitative_and_quantitative_verification"}, {"score": 0.003091767402370757, "phrase": "complex_non-linear_bounds"}, {"score": 0.002935905915691203, "phrase": "established_qualitative_techniques"}, {"score": 0.0028821607224183135, "phrase": "hoare_logic"}, {"score": 0.0027982016314450717, "phrase": "local_derivation_rules"}, {"score": 0.0027673496368158545, "phrase": "soundness_proof"}, {"score": 0.0027368368719283298, "phrase": "derivation_system"}, {"score": 0.0026768142335374156, "phrase": "cost_semantics"}, {"score": 0.002551231163230566, "phrase": "efficient_reduction"}, {"score": 0.0025324393547676623, "phrase": "bound_inference"}, {"score": 0.0025045102029373854, "phrase": "linear_optimization_problem"}, {"score": 0.0024495702960480076, "phrase": "off-the-shelf_lp_solvers"}, {"score": 0.0023694065215394593, "phrase": "publicly-available_tool"}, {"score": 0.0023260075698364087, "phrase": "experimental_evaluation"}, {"score": 0.0022749744354271816, "phrase": "new_technique"}, {"score": 0.0022168460543913787, "phrase": "existing_tools"}, {"score": 0.002192389791199368, "phrase": "micro_benchmarks"}, {"score": 0.0021049977753042253, "phrase": "cbench_benchmark_suite"}], "paper_keywords": ["Verification", " Reliability", " Quantitative Verification", " Resource Bound Analysis", " Static Analysis", " Amortized Analysis", " LP Solving", " Program Logic"], "paper_abstract": "This paper presents a new approach for automatically deriving worst-case resource bounds for C programs. The described technique combines ideas from amortized analysis and abstract interpretation in a unified framework to address four challenges for state-of-the-art techniques: compositionality, user interaction, generation of proof certificates, and scalability. Compositionality is achieved by incorporating the potential method of amortized analysis. It enables the derivation of global whole-program bounds with local derivation rules by naturally tracking size changes of variables in sequenced loops and function calls. The resource consumption of functions is described abstractly and a function call can be analyzed without access to the function body. User interaction is supported with a new mechanism that clearly separates qualitative and quantitative verification. A user can guide the analysis to derive complex non-linear bounds by using auxiliary variables and assertions. The assertions are separately proved using established qualitative techniques such as abstract interpretation or Hoare logic. Proof certificates are automatically generated from the local derivation rules. A soundness proof of the derivation system with respect to a formal cost semantics guarantees the validity of the certificates. Scalability is attained by an efficient reduction of bound inference to a linear optimization problem that can be solved by off-the-shelf LP solvers. The analysis framework is implemented in the publicly-available tool (CB)-B-4. An experimental evaluation demonstrates the advantages of the new technique with a comparison of (CB)-B-4 with existing tools on challenging micro benchmarks and the analysis of more than 2900 lines of C code from the cBench benchmark suite.", "paper_title": "Compositional Certified Resource Bounds", "paper_id": "WOS:000361284200044"}