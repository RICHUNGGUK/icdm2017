{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nominal_algebra"}, {"score": 0.0045108906244892165, "phrase": "computer_science"}, {"score": 0.004180234323211199, "phrase": "predicate_logic"}, {"score": 0.0034742854447532678, "phrase": "case-by-case_basis"}, {"score": 0.0030157628075954588, "phrase": "mathematical_object"}, {"score": 0.002855934865505357, "phrase": "new_framework"}, {"score": 0.0023730978395564116, "phrase": "canonical_model"}, {"score": 0.0021049977753042253, "phrase": "subtle_use"}], "paper_keywords": [""], "paper_abstract": "Substitution is fundamental to computer science, underlying for example quantifiers in predicate logic and beta-reduction in the lambda-calculus. So is substitution something we define on syntax on a case-by-case basis, or can we turn the idea of 'substitution' into a mathematical object? We exploit the new framework of Nominal Algebra to axiomatise substitution. We prove our axioms sound and complete with respect to a canonical model; this turns out to be quite hard, involving subtle use of results of rewriting and algebra.", "paper_title": "Capture-avoiding substitution as a Nominal Algebra", "paper_id": "WOS:000243130900014"}