{"auto_keywords": [{"score": 0.04019485572072642, "phrase": "behavioral_compatibility"}, {"score": 0.00481495049065317, "phrase": "dynamic_service_composition"}, {"score": 0.004523272849033429, "phrase": "component_services"}, {"score": 0.003749654338704576, "phrase": "service_composition"}, {"score": 0.0035468507553681034, "phrase": "service_behaviors"}, {"score": 0.00342568771304873, "phrase": "formal_way"}, {"score": 0.0030226700832113942, "phrase": "qualitative_way"}, {"score": 0.0028000270988465486, "phrase": "compatibility_degree"}, {"score": 0.002742196991950893, "phrase": "quantitative_way"}, {"score": 0.0021049977753042253, "phrase": "newly-added_values"}], "paper_keywords": ["Web service", " Service composition", " Behavioral compatibility", " pi-calculus"], "paper_abstract": "Dynamically composing services requires mechanisms to ensure component services compatible with each other both at all of the syntax, semantic and behavioral level. This paper focuses on the issue of behavioral compatibility in a service composition. It adopts the pi-calculus to model service behaviors and interactions in a formal way. Based on the formalization, it proposes a method to automatically check the behavioral compatibility in a qualitative way. Furthermore, it presents an algorithm to compute the compatibility degree in a quantitative way. The algorithm is implemented in a prototype and its performance analysis is also carried out to show that it can help composing services on the fly and ensure the services compatible with each other to provide functions with newly-added values.", "paper_title": "Computing compatibility in dynamic service composition", "paper_id": "WOS:000264610200005"}