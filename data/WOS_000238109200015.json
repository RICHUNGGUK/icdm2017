{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "compressed_texts"}, {"score": 0.003953639783762917, "phrase": "text_t"}, {"score": 0.0037336520904376687, "phrase": "i.e._the_letters"}, {"score": 0.0036864465771943933, "phrase": "pattern_p"}, {"score": 0.003593812067062062, "phrase": "text_window"}, {"score": 0.0028944757265206332, "phrase": "lempel-ziv-like_compression_algorithms"}, {"score": 0.0023309080951251335, "phrase": "compressed_text"}, {"score": 0.0022010126160835024, "phrase": "compression_algorithms"}], "paper_keywords": [""], "paper_abstract": "Given two strings (a text t of length n and a pattern p) and a natural number w, window subsequence problems consist in deciding whether p occurs as a subsequence of t and/or finding the number of size (at most) w windows of text t which contain pattern p as a subsequence, i.e. the letters of pattern p occur in the text window, in the same order as in p, but not necessarily consecutively (they may be interleaved with other letters). We are searching for subsequences in a text which is compressed using Lempel-Ziv-like compression algorithms, without decompressing the text, and we would like our algorithms to be almost optimal, in the sense that they run in time O(m) where m is the size of the compressed text. The pattern is uncompressed (because the compression algorithms are evolutive: various occurrences of a same pattern look different in the text).", "paper_title": "Window subsequence problems for compressed texts", "paper_id": "WOS:000238109200015"}