{"auto_keywords": [{"score": 0.04900969000530813, "phrase": "open_source_software_peer_review"}, {"score": 0.04411922454782027, "phrase": "peer_review_process"}, {"score": 0.03871920242481048, "phrase": "open_source_software_projects"}, {"score": 0.00481495049065317, "phrase": "open_source_software_peer_review_practices"}, {"score": 0.004617112284856892, "phrase": "virtual_communities"}, {"score": 0.00447045328907701, "phrase": "formal_role"}, {"score": 0.004427366754240748, "phrase": "development_process"}, {"score": 0.004137119737646718, "phrase": "universal_solution"}, {"score": 0.004031603526620806, "phrase": "varying_characteristics"}, {"score": 0.003916098498242888, "phrase": "peer_review_practices"}, {"score": 0.0038908817250961633, "phrase": "different_open_source_software_communities"}, {"score": 0.003816197777388722, "phrase": "distinct_types"}, {"score": 0.0037188360359702182, "phrase": "contextualized_guidance"}, {"score": 0.003635676878573833, "phrase": "comparative_case_studies"}, {"score": 0.003565879784978866, "phrase": "mozilla"}, {"score": 0.0035430918894543734, "phrase": "python"}, {"score": 0.0034974064973871833, "phrase": "extremely_different_types"}, {"score": 0.003452490908017195, "phrase": "bug_reports"}, {"score": 0.003353521531649663, "phrase": "secondary_sources"}, {"score": 0.0033211641484589775, "phrase": "meeting_notes"}, {"score": 0.003299765620885585, "phrase": "blog_posts"}, {"score": 0.003257379945810655, "phrase": "mailing_lists"}, {"score": 0.0031233388358844188, "phrase": "key_activities"}, {"score": 0.0031032109441552287, "phrase": "peer_review_processes"}, {"score": 0.0030732613046470314, "phrase": "different_characteristics"}, {"score": 0.003033776234384367, "phrase": "bug_reporting"}, {"score": 0.0027982016314450717, "phrase": "emerging_role"}, {"score": 0.002735572813553256, "phrase": "core_and_peripheral_contributors"}, {"score": 0.0026570998719084153, "phrase": "alternative_designs"}, {"score": 0.0025394700487126414, "phrase": "contextualized_designs"}, {"score": 0.0025230952890994236, "phrase": "social_and_technological_solutions"}, {"score": 0.0024987304152852873, "phrase": "source_software_peer_review_practices"}, {"score": 0.0023650305205893353, "phrase": "large_software_projects"}, {"score": 0.0022897425998475362, "phrase": "enormous_contributions"}, {"score": 0.0022676260293002706, "phrase": "core_developers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Open source software", " Virtual community", " Software peer review", " Design"], "paper_abstract": "Context: The power of open source software peer review lies in the involvement of virtual communities, especially users who typically do not have a formal role in the development process. As communities grow to a certain extent, how to organize and support the peer review process becomes increasingly challenging. A universal solution is likely to fail for communities with varying characteristics. Objective: This paper investigates differences of peer review practices across different open source software communities, especially the ones engage distinct types of users, in order to offer contextualized guidance for developing open source software projects. Method: Comparative case studies were conducted in two well-established large open source communities, Mozilla and Python, which engage extremely different types of users. Bug reports from their bug tracking systems were examined primarily, complemented by secondary sources such as meeting notes, blog posts, messages from mailing lists, and online documentations. Results: The two communities differ in the key activities of peer review processes, including different characteristics with respect to bug reporting, design decision making, to patch development and review. Their variances also involve the designs of supporting technology. The results highlight the emerging role of triagers, who bridge the core and peripheral contributors and facilitate the peer review process. The two communities demonstrate alternative designs of open source software peer review and their trade-offs were discussed. Conclusion: It is concluded that contextualized designs of social and technological solutions to open source software peer review practices are important. The two cases can serve as learning resources for open source software projects, or other types of large software projects in general, to cope with challenges of leveraging enormous contributions and coordinating core developers. It is also important to improve support for triagers, who have not received much research effort yet. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Comparative case studies of open source software peer review practices", "paper_id": "WOS:000362604600001"}