{"auto_keywords": [{"score": 0.047369575881600866, "phrase": "fault_tolerance"}, {"score": 0.00481495049065317, "phrase": "checkpointing_overheads"}, {"score": 0.00475924837336259, "phrase": "massive-scale_systems"}, {"score": 0.004490212943845175, "phrase": "high-end_petascale_systems"}, {"score": 0.004336115760817672, "phrase": "hardware_components"}, {"score": 0.0042859292226559535, "phrase": "complex_software_stacks"}, {"score": 0.004162978902905443, "phrase": "increasingly_challenging_task"}, {"score": 0.0034753508746887957, "phrase": "high-cost_overhead"}, {"score": 0.003129317057177867, "phrase": "leadership-class_machines"}, {"score": 0.003039445153076014, "phrase": "argonne_national_laboratory"}, {"score": 0.0029349892964423197, "phrase": "popular_applications"}, {"score": 0.0027049694095434905, "phrase": "optimal_checkpointing_frequency"}, {"score": 0.0024784363584530976, "phrase": "grid-based_projector-augmented_wave_application"}, {"score": 0.002154693685426657, "phrase": "possible_checkpointing_trends"}], "paper_keywords": ["Checkpointing", " Blue Gene", " Fault Tolerance", " I/O", " Massive scale systems"], "paper_abstract": "Providing fault tolerance in high-end petascale systems, consisting of millions of hardware components and complex software stacks, is becoming an increasingly challenging task. Checkpointing continues to be the most prevalent technique for providing fault tolerance in such high-end systems. Considerable research has focussed on optimizing checkpointing; however, in practice, checkpointing still involves a high-cost overhead for users. In this paper, we study the checkpointing overhead seen by various applications running on leadership-class machines like the IBM Blue Gene/P at Argonne National Laboratory. In addition to studying popular applications, we design a methodology to help users understand and intelligently choose an optimal checkpointing frequency to reduce the overall checkpointing overhead incurred. In particular, we study the Grid-Based Projector-Augmented Wave application, the Carr-Parrinello Molecular Dynamics application, the Nek5000 computational fluid dynamics application and the Parallel Ocean Program application-and analyze their memory usage and possible checkpointing trends on 65,536 processors of the Blue Gene/P system.", "paper_title": "Understanding Checkpointing Overheads on Massive-Scale Systems: Analysis of the IBM Blue Gene/P System", "paper_id": "WOS:000290212600005"}