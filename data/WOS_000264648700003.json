{"auto_keywords": [{"score": 0.050078515420922134, "phrase": "component-interface_dependency_matrix"}, {"score": 0.029327518313476506, "phrase": "cidm"}, {"score": 0.003925633992809873, "phrase": "version_management_mechanism"}, {"score": 0.0038499929374478125, "phrase": "impact_analysis"}, {"score": 0.0026337482179592422, "phrase": "large_numbers"}, {"score": 0.0025331002386232014, "phrase": "impedance_mismatch"}, {"score": 0.002366110899738696, "phrase": "well-designed_software_system"}, {"score": 0.0021049977753042253, "phrase": "software_development_phase"}], "paper_keywords": ["Component-based software", " Software development", " Software maintenance", " Version control", " Version management"], "paper_abstract": "As much component-based software is developed, a software configuration management (SCM) tool for component-based software is necessary. In this paper, we propose a version management mechanism for impact analysis while components are upgraded. We separately version the components and interfaces based on a Component-Interface Dependency Matrix (CIDM), and analyze impacts according to their dependency relationship. The result of our simulation shows that CIDM is capable of managing large numbers of components without impedance mismatch. in addition, in a well-designed software system, using CIDM to analyze impacts can save resources in the software development phase. (C) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Component-based software version management based on a Component-Interface Dependency Matrix", "paper_id": "WOS:000264648700003"}