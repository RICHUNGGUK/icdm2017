{"auto_keywords": [{"score": 0.035181778104195136, "phrase": "harmonic_placement"}, {"score": 0.015239559675653417, "phrase": "data_blocks"}, {"score": 0.009962443710714461, "phrase": "scalable_streaming"}, {"score": 0.008529500000558658, "phrase": "scalable_streaming_environment"}, {"score": 0.005898240523161295, "phrase": "interleaved_placement"}, {"score": 0.005409028140701207, "phrase": "service_requests"}, {"score": 0.00481495049065317, "phrase": "real-time_streaming"}, {"score": 0.0047459060595229224, "phrase": "scalable_streaming_technology"}, {"score": 0.004650896226390719, "phrase": "heterogeneous_devices"}, {"score": 0.0046240999614456605, "phrase": "dynamically_varying_bandwidth"}, {"score": 0.0045709675813472884, "phrase": "file_system's_point"}, {"score": 0.004427966503146096, "phrase": "disk_scheduling"}, {"score": 0.004364446928620496, "phrase": "existing_efforts"}, {"score": 0.004339293854115301, "phrase": "multimedia_file_systems"}, {"score": 0.004240116703465252, "phrase": "data_placement_scheme"}, {"score": 0.004155190157284551, "phrase": "important_underlying_assumption"}, {"score": 0.004048483412089098, "phrase": "multimedia_file_accesses"}, {"score": 0.00402514392911723, "phrase": "simple_playback_operations"}, {"score": 0.003921763664916815, "phrase": "workload_characteristic"}, {"score": 0.0036167509502276294, "phrase": "sequential_access"}, {"score": 0.003554531289427866, "phrase": "current_file_structure"}, {"score": 0.003523822585025555, "phrase": "file_system_organization"}, {"score": 0.003443219062200627, "phrase": "scalable_streaming_service"}, {"score": 0.0033547343924455455, "phrase": "file_system_scheme"}, {"score": 0.003268516165008941, "phrase": "basic_idea"}, {"score": 0.003202987495080647, "phrase": "frequently_accessed_layers"}, {"score": 0.003166132209407694, "phrase": "unnecessary_disk_seeks"}, {"score": 0.0029281780903782284, "phrase": "lower_layers"}, {"score": 0.00282822695516646, "phrase": "upper_layers"}, {"score": 0.0027237824436573085, "phrase": "elaborate_performance_models"}, {"score": 0.0025929837295811673, "phrase": "file_server"}, {"score": 0.0025780134737796085, "phrase": "different_file_system_schemes"}, {"score": 0.0025336179740814905, "phrase": "file_system_performance"}, {"score": 0.0024899850926034567, "phrase": "file_organization_scheme"}, {"score": 0.002425937226012825, "phrase": "low-quality_video"}, {"score": 0.002363532907211947, "phrase": "progressive_placement_scheme"}, {"score": 0.002349884235026956, "phrase": "twice_as_many_sessions"}, {"score": 0.0023295585212850154, "phrase": "interleaved_placement_scheme"}, {"score": 0.0022696277881969896, "phrase": "high-quality_video"}, {"score": 0.0021794454466797382, "phrase": "twice_as_many_requests"}, {"score": 0.00212336833618933, "phrase": "harmonic_placement_scheme"}], "paper_keywords": ["Scalable streaming", " File system", " Storage", " Multimedia", " Layered encoding"], "paper_abstract": "Scalable streaming technology has been proposed to effectively support heterogeneous devices with dynamically varying bandwidth. From the file system's point of view, scalable streaming introduces another dimension of complexity in disk scheduling. Most of the existing efforts on multimedia file systems are dedicated to I/O scheduling algorithm and data placement scheme that efficiently guarantee I/O bandwidth. The important underlying assumption in these efforts is that most of the multimedia file accesses are simple playback operations and therefore are sequential. However, this workload characteristic is not valid in scalable streaming environment. In a scalable streaming environment, i.e., when only a subset of imagery is retrieved, the playback does not necessarily coincide with the sequential access on the file. The current file structure and the file system organization leaves much to be desired for supporting scalable streaming service. In this work, we propose a file system scheme, Harmonic Placement to efficiently support scalable streaming. The basic idea of Harmonic placement is to cluster the frequently accessed layers together to avoid unnecessary disk seeks. The data blocks are partitioned into two sets with respect to the layers: lower layers and upper layers. In Harmonic placement, the data blocks in the lower layers are placed with respect to their frame sequence and the data blocks in the upper layers are clustered according to the layers they belong to. We develop elaborate performance models for three different file system schemes: Progressive placement, Interleaved Placement and Harmonic Placement. We investigate the performance of the file server with different file system schemes. It was found that file system performance is very sensitive to the file organization scheme. When most of the service requests are for low-quality video (e.g., 128 Kbits/s ISDN), Progressive placement scheme supports twice as many sessions as the Interleaved placement scheme. When most of the service requests are for high-quality video (e.g., 1.5 Mbits/s MPEG-2 DVD quality), Interleaved placement can support twice as many requests as Progressive placement. In both cases, Harmonic placement scheme yields the most promising performance.", "paper_title": "Storage technique for real-time streaming of layered video", "paper_id": "WOS:000264487400002"}