{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "type_system"}, {"score": 0.048786972321694176, "phrase": "lambda_calculus"}, {"score": 0.004608730887154718, "phrase": "conditional_construction"}, {"score": 0.004533689162831641, "phrase": "stab"}, {"score": 0.00441130431691048, "phrase": "pspace_class"}, {"score": 0.004222326744600887, "phrase": "sta"}, {"score": 0.0040192915527630995, "phrase": "lafont's_soft_linear_logic"}, {"score": 0.0039322149318145845, "phrase": "ptime_class"}, {"score": 0.003743102131902864, "phrase": "ground_type"}, {"score": 0.0036619914193997427, "phrase": "booleans"}, {"score": 0.0035630518377071916, "phrase": "key_issue"}, {"score": 0.0032107911131811057, "phrase": "additive_way"}, {"score": 0.0030064251340251196, "phrase": "polynomial_time"}, {"score": 0.002989991779830814, "phrase": "alternating_turing"}, {"score": 0.0029091587159002503, "phrase": "well-known_result"}, {"score": 0.0026213749921120623, "phrase": "alternating_turing_machines"}, {"score": 0.002564505790176378, "phrase": "deterministic_turing_machine"}, {"score": 0.0024951467586005094, "phrase": "call-by-name_evaluation_machine"}, {"score": 0.002349073225500705, "phrase": "polynomial_space"}, {"score": 0.00221153232497724, "phrase": "first_characterization"}, {"score": 0.0021874743571237668, "phrase": "pspace"}, {"score": 0.0021049977753042253, "phrase": "light_logics"}], "paper_keywords": ["Languages", " Theory", " Design", " Implicit computational complexity", " linear logic", " operational semantics", " polynomial space", " type assignment"], "paper_abstract": "We present a type system for an extension of lambda calculus with a conditional construction, named STAB, that characterizes the PSPACE class. This system is obtained by extending STA, a type assignment for lambda-calculus inspired by Lafont's Soft Linear Logic and characterizing the PTIME class. We extend STA by means of a ground type and terms for Booleans and conditional. The key issue in the design of the type system is to manage the contexts in the rule for conditional in an additive way. Thanks to this rule, we are able to program polynomial time Alternating Turing Machines. From the well-known result APTIME = PSPACE, it follows that STA(B) is complete for PSPACE. Conversely, inspired by the simulation of Alternating Turing machines by means of Deterministic Turing machine, we introduce a call-by-name evaluation machine with two memory devices in order to evaluate programs in polynomial space. As far as we know, this is the first characterization of PSPACE that is based on lambda calculus and light logics.", "paper_title": "An Implicit Characterization of PSPACE", "paper_id": "WOS:000303047800009"}