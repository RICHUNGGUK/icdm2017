{"auto_keywords": [{"score": 0.029552309858554726, "phrase": "microcode_compression"}, {"score": 0.00481495049065317, "phrase": "microcode_compression_using_structured-constrained_clustering"}, {"score": 0.0047709540557306284, "phrase": "modern_microprocessors"}, {"score": 0.004412780054037622, "phrase": "new_isa_features"}, {"score": 0.0042928648367867835, "phrase": "existing_design"}, {"score": 0.0039341294012600085, "phrase": "recent_intel_internal_design"}, {"score": 0.0038802832668554457, "phrase": "low_power"}, {"score": 0.0038447943243941685, "phrase": "small_footprint"}, {"score": 0.0037231102027070724, "phrase": "microcode_rom"}, {"score": 0.0036218682585355895, "phrase": "total_die_area"}, {"score": 0.0035722806911457545, "phrase": "associated_power_consumption"}, {"score": 0.003427540517249369, "phrase": "multicore_architectures"}, {"score": 0.003349670229755675, "phrase": "microcode_memory_size"}, {"score": 0.0033037970113095577, "phrase": "chip_area"}, {"score": 0.0031553611552558986, "phrase": "microcode_size_problem"}, {"score": 0.002945081009084692, "phrase": "compressed_form"}, {"score": 0.002748775748298028, "phrase": "significant_area"}, {"score": 0.002723607240517261, "phrase": "power_savings"}, {"score": 0.0026616868981501006, "phrase": "streamlined_architecture"}, {"score": 0.0026252106881752067, "phrase": "high_throughput"}, {"score": 0.0025537472239953807, "phrase": "high_performance"}, {"score": 0.0025420456635917386, "phrase": "cpu."}, {"score": 0.00241658945942583, "phrase": "compression_ratios"}, {"score": 0.0021539955106204354, "phrase": "design_time"}, {"score": 0.002124461969404541, "phrase": "microcode_decompression_engine"}, {"score": 0.0021049977753042253, "phrase": "real-world_designs"}], "paper_keywords": ["Microcode compression", " Code compression", " Microprocessor design", " Compression algorithm", " Micro-architecture", " Micro-programming"], "paper_abstract": "Modern microprocessors have used microcode as a way to implement legacy (rarely used) instructions, add new ISA features and enable patches to an existing design. As more features are added to processors (e.g. protection and virtualization), area and power costs associated with the microcode memory increased significantly. A recent Intel internal design targeted at low power and small footprint has estimated the costs of the microcode ROM to approach 20% of the total die area (and associated power consumption). Moreover, with the adoption of multicore architectures, the impact of microcode memory size on the chip area has become relevant, forcing industry to revisit the microcode size problem. A solution to address this problem is to store the microcode in a compressed form and decompress it at runtime. This paper describes techniques for microcode compression that achieve significant area and power savings, while proposes a streamlined architecture that enables high throughput within the constraints of a high performance CPU. The paper presents results for microcode compression on several commercial CPU designs which demonstrates compression ratios ranging from 50 to 62%. In addition, it proposes techniques that enable the reuse of (pre-validated) hardware building blocks that can considerably reduce the cost and design time of the microcode decompression engine in real-world designs.", "paper_title": "Microcode Compression Using Structured-Constrained Clustering", "paper_id": "WOS:000329403900008"}