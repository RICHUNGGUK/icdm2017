{"auto_keywords": [{"score": 0.0443587048584781, "phrase": "dynamic_analysis"}, {"score": 0.027880547210140456, "phrase": "different_program"}, {"score": 0.0155493741655448, "phrase": "n-gram_analysis"}, {"score": 0.00481495049065317, "phrase": "detection_rate"}, {"score": 0.004360412703519539, "phrase": "text_strings"}, {"score": 0.004172360444377281, "phrase": "malware_detection"}, {"score": 0.004103942174451674, "phrase": "classification_approach"}, {"score": 0.003970439654470374, "phrase": "key_issue"}, {"score": 0.003615217162972726, "phrase": "correct_classification"}, {"score": 0.0034024277222012597, "phrase": "optimum_subset"}, {"score": 0.0033651019362620866, "phrase": "operational_codes"}, {"score": 0.0032376465741070274, "phrase": "best_indicators"}, {"score": 0.002947790697936243, "phrase": "accurate_support_vector_machine"}, {"score": 0.002851790448644913, "phrase": "benign_and_malicious_software"}, {"score": 0.0026986685585382347, "phrase": "opcode_density_histograms"}, {"score": 0.002610760187858779, "phrase": "run_periods"}, {"score": 0.0025679634223983792, "phrase": "svm"}, {"score": 0.002497976173193543, "phrase": "program_classifier"}, {"score": 0.0022994427535192492, "phrase": "malicious_software"}, {"score": 0.0021049977753042253, "phrase": "small_number"}], "paper_keywords": ["invasive software", " pattern classification", " runlength codes", " support vector machines", " system monitoring", " program classifier", " opcode density histograms", " malicious software", " benign software", " SVM classification", " support vector machine", " program monitoring time", " operational codes", " dynamic analysis", " N-gram analysis", " detection rate", " program run length", " malware detection"], "paper_abstract": "N-gram analysis is an approach that investigates the structure of a program using bytes, characters or text strings. This research uses dynamic analysis to investigate malware detection using a classification approach based on N-gram analysis. A key issue with dynamic analysis is the length of time a program has to be run to ensure a correct classification. The motivation for this research is to find the optimum subset of operational codes (opcodes) that make the best indicators of malware and to determine how long a program has to be monitored to ensure an accurate support vector machine (SVM) classification of benign and malicious software. The experiments within this study represent programs as opcode density histograms gained through dynamic analysis for different program run periods. A SVM is used as the program classifier to determine the ability of different program run lengths to correctly determine the presence of malicious software. The findings show that malware can be detected with different program run lengths using a small number of opcodes.", "paper_title": "Malware detection: program run length against detection rate", "paper_id": "WOS:000331070000005"}