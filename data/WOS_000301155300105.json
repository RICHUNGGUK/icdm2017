{"auto_keywords": [{"score": 0.04913387376964174, "phrase": "spoken_dialog_services"}, {"score": 0.04820613313024096, "phrase": "different_kinds"}, {"score": 0.03777406659590514, "phrase": "design_time"}, {"score": 0.00481495049065317, "phrase": "backend_database_contents"}, {"score": 0.004693063440166313, "phrase": "current_development_platforms"}, {"score": 0.004284037022875158, "phrase": "different_design_stages"}, {"score": 0.004211393664694384, "phrase": "dialog_flow"}, {"score": 0.003800586434296711, "phrase": "spoken-based_dialog_services"}, {"score": 0.0037682108720193956, "phrase": "time_consuming_task"}, {"score": 0.003631062193606885, "phrase": "complete_development_platform"}, {"score": 0.003559284776569813, "phrase": "different_types"}, {"score": 0.0035390378585554547, "phrase": "acceleration_strategies"}, {"score": 0.0034690732089830045, "phrase": "data_model_structure"}, {"score": 0.0034493376812017983, "phrase": "database_contents"}, {"score": 0.0034004869983267085, "phrase": "cumulative_information"}, {"score": 0.0033619033669956317, "phrase": "successive_steps"}, {"score": 0.0031126340792967102, "phrase": "simple_confirmations"}, {"score": 0.0027610089418453614, "phrase": "common_dialogs"}, {"score": 0.0026077803487003, "phrase": "specific_speech-modality_problems"}, {"score": 0.0025416235470290286, "phrase": "retrieved_results"}, {"score": 0.0025127604406208668, "phrase": "backend_database"}, {"score": 0.0024490082808807396, "phrase": "speech_grammars"}, {"score": 0.0024074058206123793, "phrase": "sql_queries"}, {"score": 0.0022034318550547866, "phrase": "proposed_accelerations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Development tools", " Automatic design of dialog systems", " Data mining", " VoiceXML"], "paper_abstract": "Current development platforms for designing spoken dialog services feature different kinds of strategies to help designers build, test, and deploy their applications. In general, these platforms are made up of several assistants that handle the different design stages (e.g. definition of the dialog flow, prompt and grammar definition, database connection, or to debug and test the running of the application). In spite of all the advances in this area, in general the process of designing spoken-based dialog services is a time consuming task that needs to be accelerated. In this paper we describe a complete development platform that reduces the design time by using different types of acceleration strategies based on using information from the data model structure and database contents, as well as cumulative information obtained throughout the successive steps in the design. Thanks to these accelerations, the interaction with the platform is simplified and the design is reduced, in most cases, to simple confirmations to the \"proposals\" that the platform automatically provides at each stage. Different kinds of proposals are available to complete the application flow such as the possibility of selecting which information slots should be requested to the user together, predefined templates for common dialogs, the most probable actions that make up each state defined in the flow, different solutions to solve specific speech-modality problems such as the presentation of the lists of retrieved results after querying the backend database. The platform also includes accelerations for creating speech grammars and prompts, and the SQL queries for accessing the database at runtime. Finally, we will describe the setup and results obtained in a simultaneous summative, subjective and objective evaluations with different designers used to test the usability of the proposed accelerations as well as their contribution to reducing the design time and interaction. (C) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Application of backend database contents and structure to the design of spoken dialog services", "paper_id": "WOS:000301155300105"}