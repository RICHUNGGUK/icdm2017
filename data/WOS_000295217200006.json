{"auto_keywords": [{"score": 0.04731051870228709, "phrase": "framework's_evolution"}, {"score": 0.04384543740647575, "phrase": "client_programs"}, {"score": 0.00481495049065317, "phrase": "adaptive_changes"}, {"score": 0.0047517225918491226, "phrase": "framework_evolution"}, {"score": 0.004360412703519539, "phrase": "simple_refactoring"}, {"score": 0.004274766964161756, "phrase": "complete_rearchitecture"}, {"score": 0.0041084684278314305, "phrase": "suitable_replacements"}, {"score": 0.004054479957160662, "phrase": "framework_elements"}, {"score": 0.003896717568943166, "phrase": "client_program"}, {"score": 0.003623199939953831, "phrase": "challenging_task"}, {"score": 0.0035052810710060893, "phrase": "recommendation_system"}, {"score": 0.0028360962841331634, "phrase": "relevant_adaptive_changes"}, {"score": 0.0027803070408286158, "phrase": "high_level"}, {"score": 0.002671990515821213, "phrase": "second_study"}, {"score": 0.00250073564820402, "phrase": "related_change_detection_approaches"}, {"score": 0.0024192592458651204, "phrase": "systematic_changes"}, {"score": 0.0022492129111567824, "phrase": "non-trivial_changes"}, {"score": 0.0021049977753042253, "phrase": "external_library"}], "paper_keywords": ["Documentation", " Experimentation", " Adaptive changes", " framework", " legacy study", " mining software repositories", " origin analysis", " partial program analysis", " recommendation system", " software evolution"], "paper_abstract": "In the course of a framework's evolution, changes ranging from a simple refactoring to a complete rearchitecture can break client programs. Finding suitable replacements for framework elements that were accessed by a client program and deleted as part of the framework's evolution can be a challenging task. We present a recommendation system, SemDiff, that suggests adaptations to client programs by analyzing how a framework was adapted to its own changes. In a study of the evolution of one open source framework and three client programs, our approach recommended relevant adaptive changes with a high level of precision. In a second study of the evolution of two frameworks, we found that related change detection approaches were better at discovering systematic changes and that SemDiff was complementary to these approaches by detecting non-trivial changes such as when a functionality is imported from an external library.", "paper_title": "Recommending Adaptive Changes for Framework Evolution", "paper_id": "WOS:000295217200006"}