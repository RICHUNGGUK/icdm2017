{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "adaptive_search_strategy"}, {"score": 0.03570749501521862, "phrase": "neighboring_macroblocks"}, {"score": 0.004751889650408546, "phrase": "computation-aware_motion_estimation_algorithm"}, {"score": 0.004507760907425495, "phrase": "best_block-matching_results"}, {"score": 0.004448705308279165, "phrase": "computation-limited_and_computation-variant_environment"}, {"score": 0.004294962474996283, "phrase": "one-pass_flow"}, {"score": 0.004183137595671171, "phrase": "prior_scheme"}, {"score": 0.004146529815745265, "phrase": "tsai"}, {"score": 0.003780692127133743, "phrase": "largest_distortion"}, {"score": 0.0037311260623089436, "phrase": "entire_frame"}, {"score": 0.0036179751816682454, "phrase": "step_fashion"}, {"score": 0.003539252646181146, "phrase": "random_access"}, {"score": 0.0034168317227203206, "phrase": "related_information"}, {"score": 0.0032410683344688625, "phrase": "random_access_flow"}, {"score": 0.003198554193075258, "phrase": "huge_memory_size"}, {"score": 0.003101503914610488, "phrase": "up-to-date_minimum_distortions"}, {"score": 0.003007389443770562, "phrase": "searching_steps"}, {"score": 0.0027417911324611917, "phrase": "memory_size"}, {"score": 0.002670296619878048, "phrase": "context_information"}, {"score": 0.0026121403051734744, "phrase": "faster_speed"}, {"score": 0.0025892330566358503, "phrase": "better_quality"}, {"score": 0.002488604965680912, "phrase": "video_quality"}, {"score": 0.0024559368099486647, "phrase": "computation_resource"}, {"score": 0.0023918783117166326, "phrase": "search_pattern"}, {"score": 0.0023192471808039746, "phrase": "diamond_search"}, {"score": 0.002248816575548875, "phrase": "full_search"}, {"score": 0.0021613897794439227, "phrase": "matching_speed-up_methods"}], "paper_keywords": ["adaptive search strategy", " block matching", " computation-aware", " motion estimation", " one-pass"], "paper_abstract": "A computation-aware motion estimation algorithm is proposed in this paper. Its goal is to find the best block-matching results in a computation-limited and computation-variant environment. Our algorithm is characterized by a one-pass flow with adaptive search strategy. In the prior scheme, Tsai et al. propose that all macroblocks are processed simultaneously, and more computation is allocated to the macroblock with the largest distortion among the entire frame in a step-by-step fashion. This implies that random access of macroblocks is required, and the related information of neighboring macroblocks cannot be used to be prediction. The random access flow requires a huge memory size for all macroblocks to store the up-to-date minimum distortions, best motion vectors, and searching steps. On the contrary, our one-pass flow processes the macroblocks one by one, which can not only significantly reduce the memory size but also effectively utilize the context information of neighboring macroblocks to achieve faster speed and better quality. Moreover, in order to improve the video quality when the computation resource is still sufficient, the search pattern is allowed to adaptively change from diamond search to three step search, and then to full search. Last but not least, traditional block matching speed-up methods are also combined to provide much better computation-distortion curves.", "paper_title": "One-pass computation-aware motion estimation with adaptive search strategy", "paper_id": "WOS:000239420300005"}