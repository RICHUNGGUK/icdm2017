{"auto_keywords": [{"score": 0.04900136041045404, "phrase": "nearest_neighbors"}, {"score": 0.015518719646278559, "phrase": "closest_pair"}, {"score": 0.010201789781163073, "phrase": "n_insertions"}, {"score": 0.004815140319671153, "phrase": "kinetic"}, {"score": 0.004783730450730986, "phrase": "dynamic_data_structures"}, {"score": 0.0045411156682300695, "phrase": "dynamic_two-dimensional_range_tree"}, {"score": 0.003973887756331297, "phrase": "closest_pair_uses"}, {"score": 0.003639471039860495, "phrase": "maximum_number"}, {"score": 0.0033548872248104814, "phrase": "maximum_length"}, {"score": 0.0033331024978484843, "phrase": "davenport-schinzel_sequences"}, {"score": 0.0032792555200980783, "phrase": "q_symbols"}, {"score": 0.003247364431057555, "phrase": "dynamic_version"}, {"score": 0.0031845067058084583, "phrase": "slight_degradation"}, {"score": 0.0026019244311765964, "phrase": "expected_time"}, {"score": 0.0024696889464469805, "phrase": "single_event"}, {"score": 0.0023982749733789882, "phrase": "worst_case"}, {"score": 0.002298743062291417, "phrase": "expected_number"}], "paper_keywords": ["Kinetic data structures", " computational geometry", " closest pair", " nearest neighbors"], "paper_abstract": "We present simple, fully dynamic and kinetic data structures, which are variants of a dynamic two-dimensional range tree, for maintaining the closest pair and all nearest neighbors for a set of n moving points in the plane; insertions and deletions of points are also allowed. If no insertions or deletions take place, the structure for the closest pair uses O(n log n) space, and processes O(n(2)beta(s+2)(n) log n) critical events, each in O(log(2) n) time. Here s is the maximum number of times where the distances between any two specific pairs of points can become equal, beta(s)(q) = lambda(s)(q)/q, and lambda(s)(q) is the maximum length of Davenport-Schinzel sequences of order s on q symbols. The dynamic version of the problem incurs a slight degradation in performance: If m >= n insertions and deletions are performed, the structure still uses O(n log n) space, and processes O(mn beta(s+2)(n) log(3) n) events, each in O(log(3) n) time. Our kinetic data structure for all nearest neighbors uses O(n log2 n) space, and processes O(n(2)beta(2)(s+2)(n) log(3) n) critical events. The expected time to process all events is O(n(2)beta(2)(s+2)(n) log(4) n), though processing a single event may take Theta(n) expected time in the worst case. If m >= n insertions and deletions are performed, then the expected number of events is O(mn beta(2)(s+2)(n) log(3) n) and processing them all takes O(mn beta(2)(s+2)(n) log(4) n). An insertion or deletion takes O(n) expected time.", "paper_title": "Kinetic and Dynamic Data Structures for Closest Pair and All Nearest Neighbors", "paper_id": "WOS:000265882300004"}