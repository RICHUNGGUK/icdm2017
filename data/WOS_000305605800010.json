{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "point_multiplication"}, {"score": 0.04945540937697203, "phrase": "binary_edwards"}, {"score": 0.018652816697908924, "phrase": "generalized_hessian_curves"}, {"score": 0.010138924799020132, "phrase": "gaussian_normal_basis"}, {"score": 0.009253843311761885, "phrase": "implementation_results"}, {"score": 0.0082814509502182, "phrase": "gnb"}, {"score": 0.00465964893087681, "phrase": "hessian_curves"}, {"score": 0.004539005582217309, "phrase": "efficient_implementation"}, {"score": 0.004363846362238565, "phrase": "elliptic_curve_cryptographic_systems"}, {"score": 0.0041136473765874815, "phrase": "elliptic_curve"}, {"score": 0.0040334640350288, "phrase": "binary_fields"}, {"score": 0.0035605741849764187, "phrase": "higher_levels"}, {"score": 0.003445591238183763, "phrase": "full_resource_utilization"}, {"score": 0.003400640983719424, "phrase": "computing_point_addition"}, {"score": 0.003356275163203055, "phrase": "point-doubling_formulas"}, {"score": 0.0031019373572233706, "phrase": "w-coordinate_differential_formulations"}, {"score": 0.00266693888510356, "phrase": "lut_complexity"}, {"score": 0.0026321198895843173, "phrase": "time-area_tradeoffs"}, {"score": 0.0025807396931129926, "phrase": "proposed_crypto-processor"}, {"score": 0.0025303650651761255, "phrase": "fpga."}, {"score": 0.0022777800735119405, "phrase": "traditional_binary_generic_curve"}, {"score": 0.0021753413850499467, "phrase": "authors'_knowledge"}, {"score": 0.0021049977753042253, "phrase": "first_fpga_implementation"}], "paper_keywords": ["Binary Edwards curves (BECs)", " elliptic curve cryptography (ECC)", " Gaussian normal basis (GNB)", " generalized Hessian curves (GHCs)"], "paper_abstract": "Efficient implementation of point multiplication is crucial for elliptic curve cryptographic systems. This paper presents the implementation results of an elliptic curve crypto-processor over binary fields GF(2(m)) on binary Edwards and generalized Hessian curves using Gaussian normal basis (GNB). We demonstrate how parallelization in higher levels can be performed by full resource utilization of computing point addition and point-doubling formulas for both binary Edwards and generalized Hessian curves. Then, we employ the w-coordinate differential formulations for computing point multiplication. Using a lookup-table (LUT)-based pipelined and efficient digit-level GNB multiplier, we evaluate the LUT complexity and time-area tradeoffs of the proposed crypto-processor on an FPGA. We also compare the implementation results of point multiplication on these curves with the ones on the traditional binary generic curve. To the best of the authors' knowledge, this is the first FPGA implementation of point multiplication on binary Edwards and generalized Hessian curves represented by w-coordinates.", "paper_title": "Efficient FPGA Implementations of Point Multiplication on Binary Edwards and Generalized Hessian Curves Using Gaussian Normal Basis", "paper_id": "WOS:000305605800010"}