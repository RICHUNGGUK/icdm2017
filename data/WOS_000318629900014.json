{"auto_keywords": [{"score": 0.03294261307713503, "phrase": "game_semantics"}, {"score": 0.00481495049065317, "phrase": "unconstrained_strategies"}, {"score": 0.004383016741930174, "phrase": "infinite_behaviors"}, {"score": 0.004298006360831255, "phrase": "syntactical_fixed-point_operator"}, {"score": 0.003589046900483573, "phrase": "different_argument"}, {"score": 0.0035610202481733905, "phrase": "dually"}, {"score": 0.003357633232360232, "phrase": "different_behavior"}, {"score": 0.003228517923065361, "phrase": "functional_references"}, {"score": 0.0030321497870310077, "phrase": "simple_concrete_syntax"}, {"score": 0.0030084563186769764, "phrase": "finite_strategies"}, {"score": 0.0028143720888311537, "phrase": "syntactical_terms"}, {"score": 0.0027060907634889734, "phrase": "fixed-point_expansion"}, {"score": 0.00268493828558848, "phrase": "translated_lambda-terms"}, {"score": 0.002622465142275264, "phrase": "infinite_plays"}, {"score": 0.0025917743904900576, "phrase": "finite_views"}, {"score": 0.0025614418906438744, "phrase": "innocent_strategy"}, {"score": 0.002531463482341473, "phrase": "syntactical_duality"}, {"score": 0.002434185418724737, "phrase": "player"}, {"score": 0.002331189621118592, "phrase": "bohm-out_lemma"}, {"score": 0.0022414566728770767, "phrase": "first_one"}, {"score": 0.0021049977753042253, "phrase": "fully_abstract_game_model"}], "paper_keywords": ["Game semantics", " Lambda-calculus"], "paper_abstract": "We present a calculus which combines a simple, CCS-like representation of finite behaviors, with two dual binders lambda and (lambda) over bar. Infinite behaviors are obtained through a syntactical fixed-point operator, which is used to give a translation of lambda-terms. The duality of the calculus makes the roles of a function and its environment symmetrical. As usual, the environment is allowed to call a function at any given point, each time with a different argument. Dually, the function is allowed to answer any given call, each time with a different behavior. This grants terms in our language the power of functional references. The inspiration for this language comes from game semantics. Indeed, its normal forms give a simple concrete syntax for finite strategies, which are inherently non-innocent. This very direct correspondence allows us to describe, in syntactical terms, a number of features from game semantics. The fixed-point expansion of translated lambda-terms corresponds to the generation of infinite plays from the finite views of an innocent strategy. The syntactical duality between terms and co-terms corresponds to the duality between Player and Opponent. This duality also gives rise to a Bohm-out lemma. The paper is divided into two parts. The first one is purely syntactical, and requires no background in game semantics. The second describes the fully abstract game model.", "paper_title": "The lambda(lambda)over-bar-calculus A dual calculus for unconstrained strategies", "paper_id": "WOS:000318629900014"}