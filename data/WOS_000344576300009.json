{"auto_keywords": [{"score": 0.03997828230813987, "phrase": "cppc"}, {"score": 0.015719716506582538, "phrase": "application-level_checkpointing_tool"}, {"score": 0.015287791505515881, "phrase": "fault_tolerance_support"}, {"score": 0.015006354243819717, "phrase": "openmp_applications"}, {"score": 0.004424768776701965, "phrase": "increasing_popularity"}, {"score": 0.004342430078306461, "phrase": "shared-memory_systems"}, {"score": 0.0038794730876377057, "phrase": "shared-memory_applications"}, {"score": 0.003736397503424876, "phrase": "compiler"}, {"score": 0.0036667768092524576, "phrase": "portable_checkpointing"}, {"score": 0.0033377940531761985, "phrase": "fault_tolerance"}, {"score": 0.0032756158688245, "phrase": "long-running_mpi_applications"}, {"score": 0.0027916287357898544, "phrase": "proposed_solution"}, {"score": 0.0027139447110929586, "phrase": "main_characteristics"}, {"score": 0.0021049977753042253, "phrase": "small_checkpoint_overheads"}], "paper_keywords": ["parallel programming", " OpenMP", " fault tolerance", " checkpointing"], "paper_abstract": "Despite the increasing popularity of shared-memory systems, there is a lack of tools for providing fault tolerance support to shared-memory applications. CPPC (ComPiler for Portable Checkpointing) is an application-level checkpointing tool focused on the insertion of fault tolerance into long-running MPI applications. This paper presents an extension to CPPC to allow the checkpointing of OpenMP applications. The proposed solution maintains the main characteristics of CPPC: portability and reduced checkpoint file size. The performance of the proposal is evaluated using the OpenMP NAS Parallel Benchmarks showing that most of the applications present small checkpoint overheads.", "paper_title": "Extending an Application-Level Checkpointing Tool to Provide Fault Tolerance Support to OpenMP Applications", "paper_id": "WOS:000344576300009"}