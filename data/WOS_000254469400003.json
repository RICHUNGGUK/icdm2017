{"auto_keywords": [{"score": 0.046023972892862405, "phrase": "kalman_filter"}, {"score": 0.00481495049065317, "phrase": "simdized_kalman_filter"}, {"score": 0.004714023408114857, "phrase": "high_energy_physics_experiments"}, {"score": 0.004615202066192795, "phrase": "input_data"}, {"score": 0.004566567411073082, "phrase": "particle_collisions"}, {"score": 0.004455061431809975, "phrase": "high_energy_physics"}, {"score": 0.004285289574869884, "phrase": "based_algorithms"}, {"score": 0.004240116703465252, "phrase": "crucial_importance"}, {"score": 0.0042102651938187114, "phrase": "on-line_data_processing"}, {"score": 0.004092937456065441, "phrase": "combinatorial_track_finding_stage"}, {"score": 0.003950846696972114, "phrase": "fast_reconstruction_algorithms"}, {"score": 0.0038953958723049287, "phrase": "maximum_available_power"}, {"score": 0.003746871277361436, "phrase": "initial_selection"}, {"score": 0.0036553070575015344, "phrase": "interesting_physics"}, {"score": 0.0035659724303237937, "phrase": "almost_all_up-to-date_pc_processors"}, {"score": 0.0035283649932486695, "phrase": "simd"}, {"score": 0.003241312187060814, "phrase": "clock_cycle"}, {"score": 0.003207108833360533, "phrase": "novel_cell_processor"}, {"score": 0.0031176485976102688, "phrase": "general-purpose_powerpc_processor_core"}, {"score": 0.0030199761431186434, "phrase": "vector_processing_applications"}, {"score": 0.0029150253706493852, "phrase": "significant_memory_optimization"}, {"score": 0.0028842551358494823, "phrase": "comprehensive_numerical_analysis"}, {"score": 0.002784007794229784, "phrase": "cbm_experiment"}, {"score": 0.002735194789581153, "phrase": "inline_operator_overloading"}, {"score": 0.002612238631882345, "phrase": "cpu_family"}, {"score": 0.0025846562485378247, "phrase": "data_reconstruction"}, {"score": 0.002530359917257626, "phrase": "simdized_kalman_filter_based_track_fitting_algorithm"}, {"score": 0.00241658945942583, "phrase": "initial_version"}, {"score": 0.002357457094026928, "phrase": "cell_blade_computer"}, {"score": 0.002219790619936024, "phrase": "tracking_algorithm"}, {"score": 0.002180848602315088, "phrase": "intel_xeon"}, {"score": 0.0021654633404434623, "phrase": "amd_opteron"}, {"score": 0.0021501863832966966, "phrase": "cell_broadband_engine"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["high energy physics", " CBM experiment", " data reconstruction", " track fit", " Kalman filter", " SIMD instruction set", " cell broadband engine"], "paper_abstract": "Modem high energy physics experiments have to process terabytes of input data produced in particle collisions. The core of many data reconstruction algorithms in high energy physics is the Kalman filter. Therefore, the speed of Kalman filter based algorithms is of crucial importance in on-line data processing. This is especially true for the combinatorial track finding stage where the Kalman filter based track fit is used very intensively. Therefore, developing fast reconstruction algorithms, which use maximum available power of processors, is important, in particular for the initial selection of events which carry signals of interesting physics. One of such powerful feature supported by almost all up-to-date PC processors is a SIMD instruction set, which allows packing several data items in one register and to operate on all of diem, thus achieving more operations per clock cycle. The novel Cell processor extends the parallelization further by combining a general-purpose PowerPC processor core with eight streamlined coprocessing elements which greatly accelerate vector processing applications. In the investigation described here, after a significant memory optimization and a comprehensive numerical analysis, the Kalman filter based track fitting algorithm of the CBM experiment has been vectorized using inline operator overloading. Thus the algorithm continues to be flexible with respect to any CPU family used for data reconstruction. Because of all these changes the SIMDized Kalman filter based track fitting algorithm takes 1 mu s per track that is 10000 times faster than the initial version. Porting the algorithm to a Cell Blade computer gives another factor of 10 of the speedup. Finally, we compare performance of the tracking algorithm running on three different CPU architectures: Intel Xeon, AMD Opteron and Cell Broadband Engine. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Fast SIMDized Kalman filter based track fit", "paper_id": "WOS:000254469400003"}