{"auto_keywords": [{"score": 0.04924934083174295, "phrase": "software_components"}, {"score": 0.00481495049065317, "phrase": "cyclic_dependencies"}, {"score": 0.004773040022691547, "phrase": "defect_profile"}, {"score": 0.004649474569983707, "phrase": "empirical_evidence"}, {"score": 0.004588891098290524, "phrase": "dependency_cycles"}, {"score": 0.004470071518923524, "phrase": "real-life_software_systems"}, {"score": 0.0042415434489566995, "phrase": "quality_attributes"}, {"score": 0.00398959232769596, "phrase": "research_goals"}, {"score": 0.0038862297330905836, "phrase": "extended_object-oriented_metrics"}, {"score": 0.003752550907120244, "phrase": "cyclic_related_components"}, {"score": 0.0032336801561165113, "phrase": "empirical_study"}, {"score": 0.0032054891061528896, "phrase": "six_software_applications"}, {"score": 0.0031636612155559267, "phrase": "standard_statistical_tests"}, {"score": 0.0030148941188459987, "phrase": "defect_profiles"}, {"score": 0.002860546817196148, "phrase": "defective_components"}, {"score": 0.0028108690791085536, "phrase": "cyclic-dependent_components"}, {"score": 0.0026436755508085223, "phrase": "important_implications"}, {"score": 0.0026206146061151917, "phrase": "software_maintenance"}, {"score": 0.0025977542995083624, "phrase": "system_testing"}, {"score": 0.0024113009621042677, "phrase": "testing_resources"}, {"score": 0.0023798115577749225, "phrase": "cost_efficient_manner"}, {"score": 0.0022678201262721323, "phrase": "structural_properties"}, {"score": 0.002208966376185464, "phrase": "component's_defect_proneness"}, {"score": 0.0021896891011033105, "phrase": "aid_decision_process"}, {"score": 0.0021610874773389096, "phrase": "defect-prone_cyclic_related_components"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Dependency cycle", " Defects", " Defect-prone components"], "paper_abstract": "Background: Empirical evidence shows that dependency cycles among software components are pervasive in real-life software systems, although such cycles are known to be detrimental to software quality attributes such as understandability, testability, reusability, build-ability and maintainability. Research goals: Can the use of extended object-oriented metrics make us better understand the relationships among cyclic related components and their defect-proneness? Approach: First, we extend such metrics to mine and classify software components into two groups - the cyclic and the non-cyclic ones. Next, we have performed an empirical study of six software applications. Using standard statistical tests on four different hypotheses, we have determined the significance of the defect profiles of both groups. Results: Our results show that most defects and defective components are concentrated in cyclic-dependent components, either directly or indirectly. Discussion and conclusion: These results have important implications for software maintenance and system testing. By identifying the most defect-prone set in a software system, it is possible to effectively allocate testing resources in a cost efficient manner. Based on these results, we demonstrate how additional structural properties could be collected to understand component's defect proneness and aid decision process in refactoring defect-prone cyclic related components. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "A study of cyclic dependencies on defect profile of software components", "paper_id": "WOS:000328523300015"}