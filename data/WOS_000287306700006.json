{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "attribute_grammars"}, {"score": 0.046314105691988995, "phrase": "typing_derivation"}, {"score": 0.0047283116134926645, "phrase": "type_inference"}, {"score": 0.004278807087784626, "phrase": "type_information"}, {"score": 0.004051828608343507, "phrase": "inference_algorithms"}, {"score": 0.003942877273973905, "phrase": "subtle_decisions"}, {"score": 0.0034717929086014636, "phrase": "decorated_tree"}, {"score": 0.0032282396745967504, "phrase": "main_implementation_tool"}, {"score": 0.002816556934231128, "phrase": "intermediate_derivations"}, {"score": 0.0026427848602443267, "phrase": "language_ruler-front"}, {"score": 0.002502374576203785, "phrase": "ordered_attribute_grammars"}, {"score": 0.0023694065215394593, "phrase": "aforementioned_problems"}, {"score": 0.0021049977753042253, "phrase": "constraint-based_inference_algorithms"}], "paper_keywords": ["Algorithms", " Languages"], "paper_abstract": "Type inference is the process of constructing a typing derivation while gradually discovering type information. During this process, inference algorithms typically make subtle decisions based on the derivation constructed so far. Because a typing derivation is a decorated tree we aim to use attribute grammars as the main implementation tool. Unfortunately, we can neither express iteration, nor express decisions based on intermediate derivations in such grammars. We present the language RULER-FRONT, a conservative extension to ordered attribute grammars, that deals with the aforementioned problems. We show why this extension is suitable for the description of constraint-based inference algorithms.", "paper_title": "Iterative Type Inference with Attribute Grammars", "paper_id": "WOS:000287306700006"}