{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "python"}, {"score": 0.04887844562055292, "phrase": "nonlinear_systems"}, {"score": 0.03590917137479731, "phrase": "fast_development"}, {"score": 0.003965975628742746, "phrase": "preconditioned_conjugate_gradient_method"}, {"score": 0.003131178497790961, "phrase": "high_performance_scientific_codes"}, {"score": 0.0030787405733989615, "phrase": "high-end_computers"}, {"score": 0.002951444412262927, "phrase": "underlying_low-level_programming_complexities"}, {"score": 0.002758597251689795, "phrase": "high-level_python_interface"}, {"score": 0.002535115422089855, "phrase": "different_stages"}, {"score": 0.002471661547432869, "phrase": "design_process"}, {"score": 0.0023100907305651872, "phrase": "computational_performance"}, {"score": 0.002233301265743633, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "different_parallel_computers"}], "paper_keywords": ["Parallel libraries", " Nonlinear algorithms", " Python high-level interfaces"], "paper_abstract": "In this paper, we present PyPANCG, a Python library-interface that implements both the conjugate gradient method and the preconditioned conjugate gradient method for solving nonlinear systems. We describe the use of the library and its advantages in order to get fast development. The aim of this library is to develop high performance scientific codes for high-end computers hiding many of the underlying low-level programming complexities from users with the use of a high-level Python interface. The library has been designed for adapting to different stages of the design process, depending on whether the purpose is computational performance or fast development. Experimental results report the performance of our approach on different parallel computers.", "paper_title": "A Parallel Python library for nonlinear systems", "paper_id": "WOS:000296635800019"}