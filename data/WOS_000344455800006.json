{"auto_keywords": [{"score": 0.04617122112854063, "phrase": "atomicity_violations"}, {"score": 0.030972512777299788, "phrase": "multi-run_mode"}, {"score": 0.010637611320717145, "phrase": "single-run_mode"}, {"score": 0.008191406036466217, "phrase": "velodrome"}, {"score": 0.00481495049065317, "phrase": "key_correctness_property"}, {"score": 0.004304856672196293, "phrase": "dynamic_program_analysis"}, {"score": 0.004190019394361629, "phrase": "atomicity_specification"}, {"score": 0.004141742095830515, "phrase": "existing_approaches"}, {"score": 0.004015693806064219, "phrase": "doublechecker"}, {"score": 0.0039694170761766226, "phrase": "novel_sound"}, {"score": 0.00393886140366453, "phrase": "precise_atomicity_checker"}, {"score": 0.003760385494931853, "phrase": "cross-thread_dependences"}, {"score": 0.0036884198249734863, "phrase": "significantly_better_performance"}, {"score": 0.0036459007842756983, "phrase": "fully_precise_analysis"}, {"score": 0.0033228699494959172, "phrase": "imprecise_analysis"}, {"score": 0.003051887221639784, "phrase": "logging_program_accesses"}, {"score": 0.0029589086332593674, "phrase": "precise_analysis"}, {"score": 0.002891032998395276, "phrase": "first_program_run"}, {"score": 0.00282470997972535, "phrase": "second_run"}, {"score": 0.0025151755329660837, "phrase": "existing_state-of-the-art_atomicity_checker"}, {"score": 0.0024669814850296146, "phrase": "high-performance_java_virtual_machine"}, {"score": 0.0024479627964740748, "phrase": "doublechecker's_single-run_mode"}, {"score": 0.002373339527491525, "phrase": "full_soundness"}, {"score": 0.0023368833197343953, "phrase": "doublechecker's_multi-run_mode"}, {"score": 0.0021965609224818853, "phrase": "doublechecker's_approach"}, {"score": 0.002171202123281881, "phrase": "promising_direction"}, {"score": 0.0021213575697367148, "phrase": "dynamic_atomicity_checking"}, {"score": 0.0021049977753042253, "phrase": "prior_work"}], "paper_keywords": ["atomicity checking", " dynamic program analysis"], "paper_abstract": "Atomicity is a key correctness property that allows programmers to reason about code regions in isolation. However, programs often fail to enforce atomicity correctly, leading to atomicity violations that are difficult to detect. Dynamic program analysis can detect atomicity violations based on an atomicity specification, but existing approaches slow programs substantially. This paper presents DoubleChecker, a novel sound and precise atomicity checker whose key insight lies in its use of two new cooperating dynamic analyses. Its imprecise analysis tracks cross-thread dependences soundly but imprecisely with significantly better performance than a fully precise analysis. Its precise analysis is more expensive but only needs to process a subset of the execution identified as potentially involved in atomicity violations by the imprecise analysis. If DoubleChecker operates in single-run mode, the two analyses execute in the same program run, which guarantees soundness and precision but requires logging program accesses to pass from the imprecise to the precise analysis. In multi-run mode, the first program run executes only the imprecise analysis, and a second run executes both analyses. Multi-run mode trades accuracy for performance; each run of multi-run mode outperforms single-run mode, but can potentially miss violations. We have implemented DoubleChecker and an existing state-of-the-art atomicity checker called Velodrome in a high-performance Java virtual machine. DoubleChecker's single-run mode significantly outperforms Velodrome, while still providing full soundness and precision. DoubleChecker's multi-run mode improves performance further, without significantly impacting soundness in practice. These results suggest that DoubleChecker's approach is a promising direction for improving the performance of dynamic atomicity checking over prior work.", "paper_title": "DoubleChecker: Efficient Sound and Precise Atomicity Checking", "paper_id": "WOS:000344455800006"}