{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "homogeneous_geometric_predicates"}, {"score": 0.004723322467153553, "phrase": "floating-point_arithmetic"}, {"score": 0.004589124394375718, "phrase": "fast_but_inexact_way"}, {"score": 0.004458722048888919, "phrase": "geometric_predicates"}, {"score": 0.003714368305523811, "phrase": "floating-point_computations"}, {"score": 0.0035741900278634616, "phrase": "wrong_results"}, {"score": 0.0033094525227603012, "phrase": "tedious_work"}, {"score": 0.002948547333717581, "phrase": "floating-point_implementation"}, {"score": 0.0026268961477241026, "phrase": "formal_and_partially_automatized_verification"}, {"score": 0.002432152706473349, "phrase": "presented_method"}, {"score": 0.0022956075241520064, "phrase": "particular_predicate"}, {"score": 0.0021049977753042253, "phrase": "correct_semi-static_floating-point_filters"}], "paper_keywords": ["geometric predicates", " semi-static filters", " formal proofs", " floating-point"], "paper_abstract": "Floating-point arithmetic provides a fast but inexact way of computing geometric predicates. In order for these predicates to be exact, it is important to rule out all the numerical situations where floating-point computations could lead to wrong results. Taking into account all the potential problems is a tedious work to do by hand. We study in this paper a floating-point implementation of a filter for the orientation-2 predicate, and how a formal and partially automatized verification of this algorithm avoided many pitfalls. The presented method is not limited to this particular predicate, it can easily be used to produce correct semi-static floating-point filters for other geometric predicates.", "paper_title": "Formally certified floating-point filters for homogeneous geometric predicates", "paper_id": "WOS:000247202900005"}