{"auto_keywords": [{"score": 0.04347900416933489, "phrase": "tsc"}, {"score": 0.00481495049065317, "phrase": "detailed_re-examination"}, {"score": 0.004674952036988355, "phrase": "inexpensive_yet_accurate_clock_synchronization"}, {"score": 0.004278807087784626, "phrase": "timing_source"}, {"score": 0.004081385289516914, "phrase": "popular_pc_architectures"}, {"score": 0.003939296259436904, "phrase": "key_observation"}, {"score": 0.0038246602895705643, "phrase": "time_differences"}, {"score": 0.003757480190200645, "phrase": "absolute_time"}, {"score": 0.0036914757355166966, "phrase": "separate_clocks"}, {"score": 0.003584025547693836, "phrase": "conceptual_level"}, {"score": 0.0033984088755183287, "phrase": "round-trip_time_based_filtering"}, {"score": 0.0032223742018434856, "phrase": "remote_time_server"}, {"score": 0.00314708280192844, "phrase": "robust_algorithms"}, {"score": 0.0030374213037172803, "phrase": "absolute_and_difference_tsc_clocks"}, {"score": 0.0027307746993761035, "phrase": "real_data"}, {"score": 0.0026827569390113822, "phrase": "multiple_servers"}, {"score": 0.002620040660435039, "phrase": "detailed_performance_results"}, {"score": 0.002573965014439041, "phrase": "full_implementation"}, {"score": 0.0024842242921857705, "phrase": "numerous_scenarios"}, {"score": 0.0023554316787703137, "phrase": "fundamental_limits"}, {"score": 0.0023139986108451967, "phrase": "host_system_noise"}, {"score": 0.002194011800331242, "phrase": "packet_loss"}, {"score": 0.0021682027434117095, "phrase": "server_outages"}, {"score": 0.002142696637011647, "phrase": "route_changes"}, {"score": 0.0021049977753042253, "phrase": "network_congestion"}], "paper_keywords": ["GPS", " network measurement", " NTP", " round-trip time", " software clock", " synchronization", " timing", " TSC"], "paper_abstract": "We present a detailed re-examination of the problem of inexpensive yet accurate clock synchronization for networked devices. Based on an empirically validated, parsimonious abstraction of the CPU oscillator as a timing source, accessible via the TSC register in popular PC architectures, we build on the key observation that the measurement of time differences, and absolute time, requires separate clocks, both at a conceptual level and practically, with distinct algorithmic, robustness, and accuracy characteristics. Combined with round-trip time based filtering of network delays between the host and the remote time server, we define robust algorithms for the synchronization of the absolute and difference TSC clocks over a network. We demonstrate the effectiveness of the principles, and algorithms using months of real data collected using multiple servers. We give detailed performance results for a full implementation running live and unsupervised under numerous scenarios, which show very high reliability, and accuracy approaching fundamental limits due to host system noise. Our synchronization algorithms are inherently robust to many factors including packet loss, server outages, route changes, and network congestion.", "paper_title": "Robust Synchronization of Absolute and Difference Clocks Over Networks", "paper_id": "WOS:000265437800005"}