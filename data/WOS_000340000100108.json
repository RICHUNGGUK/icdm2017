{"auto_keywords": [{"score": 0.04725332734585437, "phrase": "pixel_shading"}, {"score": 0.014277959111917083, "phrase": "shading_rates"}, {"score": 0.00481495049065317, "phrase": "adaptive_multi-frequency"}, {"score": 0.004727995968069753, "phrase": "future_graphics_processors"}, {"score": 0.004586531354697466, "phrase": "powerful_hardware_architecture"}, {"score": 0.004422325007817267, "phrase": "flexible_control"}, {"score": 0.0043161190928529755, "phrase": "automatic_shading_reuse"}, {"score": 0.004212453011596424, "phrase": "tessellated_primitives"}, {"score": 0.004136333933790974, "phrase": "main_goal"}, {"score": 0.004012500850311087, "phrase": "moderately_to_finely_tessellated_geometry"}, {"score": 0.003822003373331997, "phrase": "current_gpus"}, {"score": 0.003574695610710444, "phrase": "geometric_complexity"}, {"score": 0.0034465894339710864, "phrase": "wider_use"}, {"score": 0.0033637374697995616, "phrase": "fine_geometry"}, {"score": 0.003223494720348768, "phrase": "core_idea"}, {"score": 0.0031269043024513567, "phrase": "small_local_grids"}, {"score": 0.003089080923888397, "phrase": "parametric_patch_space"}, {"score": 0.0029783256772952073, "phrase": "nearby_samples"}, {"score": 0.002802462902794585, "phrase": "multiple_parts"}, {"score": 0.0027019561451518746, "phrase": "different_frequencies"}, {"score": 0.002436289099444074, "phrase": "visually_important_areas"}, {"score": 0.002320449502337321, "phrase": "graceful_degradation"}, {"score": 0.0022508572821818124, "phrase": "important_benefit"}, {"score": 0.0021966859554037174, "phrase": "patch_space"}, {"score": 0.0021307975800397816, "phrase": "efficient_rendering"}, {"score": 0.0021049977753042253, "phrase": "distribution_effects"}], "paper_keywords": ["graphics hardware", " pixel shading", " tessellation", " GPU"], "paper_abstract": "We propose a powerful hardware architecture for pixel shading, which enables flexible control of shading rates and automatic shading reuse between triangles in tessellated primitives. The main goal is efficient pixel shading for moderately to finely tessellated geometry, which is not handled well by current GPUs. Our method effectively decouples the cost of pixel shading from the geometric complexity. It thereby enables a wider use of tessellation and fine geometry, even at very limited power budgets. The core idea is to shade over small local grids in parametric patch space, and reuse shading for nearby samples. We also support the decomposition of shaders into multiple parts, which are shaded at different frequencies. Shading rates can be locally and adaptively controlled, in order to direct the computations to visually important areas and to provide performance scaling with a graceful degradation of quality. Another important benefit of shading in patch space is that it allows efficient rendering of distribution effects, which further closes the gap between real-time and offline rendering.", "paper_title": "AMFS: Adaptive Multi-Frequency Shading for Future Graphics Processors", "paper_id": "WOS:000340000100108"}