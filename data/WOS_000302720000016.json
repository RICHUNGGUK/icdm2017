{"auto_keywords": [{"score": 0.04299750205171382, "phrase": "wcet_analysis"}, {"score": 0.03455018268948868, "phrase": "interactive_wcet_analysis"}, {"score": 0.00481495049065317, "phrase": "hard_real-time_systems"}, {"score": 0.004419538941706716, "phrase": "worst-case_execution_time"}, {"score": 0.00428629884026304, "phrase": "virtually_all_prior_work"}, {"score": 0.0038624981944755813, "phrase": "resulting_algorithms"}, {"score": 0.0036329805216306576, "phrase": "development_cycle"}, {"score": 0.003438058620195309, "phrase": "final_verification_phase"}, {"score": 0.003213920601037463, "phrase": "new_method"}, {"score": 0.0031553611552558986, "phrase": "near-instantaneous_wcet_feedback"}, {"score": 0.0030601162942933665, "phrase": "software_programming"}, {"score": 0.0028958411976400646, "phrase": "tree-based_wcet_calculation"}, {"score": 0.0027069560455629917, "phrase": "java_editor"}, {"score": 0.0026252106881752067, "phrase": "wcet_values"}, {"score": 0.0025148871904409095, "phrase": "java_source"}, {"score": 0.002469032978674379, "phrase": "statement_level"}, {"score": 0.0023944552329463035, "phrase": "tree-based_approach"}, {"score": 0.0023507916951658455, "phrase": "implicit_path_enumeration_technique"}, {"score": 0.0023221248824337576, "phrase": "ipet"}, {"score": 0.0021441057555396013, "phrase": "program_size"}, {"score": 0.0021049977753042253, "phrase": "similar_wcet_values"}], "paper_keywords": ["Performance analysis", " real-time systems", " safety", " software algorithms", " software performance", " software reliability"], "paper_abstract": "For hard real-time systems, static code analysis is needed to derive a safe bound on the worst-case execution time (WCET). Virtually all prior work has focused on the accuracy of WCET analysis without regard to the speed of analysis. The resulting algorithms are often too slow to be integrated into the development cycle, requiring WCET analysis to be postponed until a final verification phase. In this paper, we propose interactive WCET analysis as a new method to provide near-instantaneous WCET feedback to the developer during software programming. We show that interactive WCET analysis is feasible using tree-based WCET calculation. The feedback is realized with a plugin for the Java editor jEdit, where the WCET values are back-annotated to the Java source at the statement level. Comparison of this tree-based approach with the implicit path enumeration technique (IPET) shows that tree-based analysis scales better with respect to program size and gives similar WCET values.", "paper_title": "Fast, Interactive Worst-Case Execution Time Analysis With Back-Annotation", "paper_id": "WOS:000302720000016"}