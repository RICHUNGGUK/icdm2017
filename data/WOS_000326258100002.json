{"auto_keywords": [{"score": 0.03363896917055258, "phrase": "test_suite"}, {"score": 0.012002552856869913, "phrase": "traditional_fault_localization_techniques"}, {"score": 0.008656707982822634, "phrase": "proposed_technique"}, {"score": 0.00481495049065317, "phrase": "gui_software_fault_localization"}, {"score": 0.004652016085325825, "phrase": "program_debugging"}, {"score": 0.004522796947899013, "phrase": "program_constructs"}, {"score": 0.004438642216475526, "phrase": "test_cases"}, {"score": 0.004397151276300207, "phrase": "vital_issue"}, {"score": 0.004301834610818624, "phrase": "\"suitable\"_test_cases"}, {"score": 0.004130243047687995, "phrase": "large_test_suite"}, {"score": 0.003689823995992878, "phrase": "key_limitation"}, {"score": 0.003531474887552889, "phrase": "cost-effective_fault_localization_process"}, {"score": 0.0034657012607680173, "phrase": "described_scenario"}, {"score": 0.0033377940531761985, "phrase": "mutation-oriented_test_data_augmentation_technique"}, {"score": 0.0032551474344211582, "phrase": "\"similarity\"_criterion"}, {"score": 0.003234806486611361, "phrase": "gui_software's_test_case_context"}, {"score": 0.0031646057802503526, "phrase": "excellent_fault_localization_capabilities"}, {"score": 0.00285357934700279, "phrase": "fault_localization_performance"}, {"score": 0.002748201169075936, "phrase": "original_provided_large_event-pair_adequate_test_suite"}, {"score": 0.002477998427152547, "phrase": "event-pair_adequate_test_suite"}, {"score": 0.002248366278757655, "phrase": "quick-start_cost-effective_fault_localization_process"}, {"score": 0.0022273034991008326, "phrase": "investigated_all-too-common_scenario"}, {"score": 0.0021450029487459403, "phrase": "test-diagnose-repair_cycle"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["Fault localization", " GUI software", " Mutation operator", " Test data augmentation"], "paper_abstract": "Context: Fault localization lies at the heart of program debugging and often proceeds by contrasting the statistics of program constructs executed by passing and failing test cases. A vital issue here is how to obtain these \"suitable\" test cases. Techniques presented in the literature mostly assume the existence of a large test suite a priori. However, developers often encounter situations where a failure occurs, but where no or no appropriate test suite is available for use to localize the fault. Objective: This paper aims to alleviate this key limitation of traditional fault localization techniques for GUI software particularly, namely, it aims at enabling cost-effective fault localization process for GUI software in the described scenario. Method: To address this scenario, we propose a mutation-oriented test data augmentation technique, which actually is directed by the \"similarity\" criterion in GUI software's test case context towards the generation of test suite with excellent fault localization capabilities. More specifically, the technique mainly uses four proposed novel mutation operators to iteratively mutate some failing GUI test cases' event sequences to derive new test cases potentially useful to localize the specific encountered fault. We then compare the fault localization performance of the test suite generated using this technique with that of an original provided large event-pair adequate test suite on some GUI applications. Results: The results indicate that the proposed technique is capable of generating a test suite that has comparable, if not better, fault localization effectiveness to the event-pair adequate test suite, but it is much smaller and it is generated immediately once a failure is encountered by developers. Conclusion: It is concluded that the proposed technique can truly enable quick-start cost-effective fault localization process under the investigated all-too-common scenario, greatly alleviating one key limitation of traditional fault localization techniques and prompting the test-diagnose-repair cycle. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Mutation-oriented test data augmentation for GUI software fault localization", "paper_id": "WOS:000326258100002"}