{"auto_keywords": [{"score": 0.03794869647631241, "phrase": "pixida"}, {"score": 0.036514819179016056, "phrase": "data_movement"}, {"score": 0.00481495049065317, "phrase": "optimizing_data_parallel_jobs"}, {"score": 0.004767261858417823, "phrase": "wide-area_data_analytics"}, {"score": 0.0046269981365987915, "phrase": "global-scale_services"}, {"score": 0.0045357787854931894, "phrase": "analytical_queries"}, {"score": 0.004337028108577593, "phrase": "multiple_data_centers"}, {"score": 0.0041469500929423595, "phrase": "cross-dc_bandwidth"}, {"score": 0.00392586404888927, "phrase": "big_data_analytics_frameworks"}, {"score": 0.0034146585649631692, "phrase": "constrained_links"}, {"score": 0.003281186608301359, "phrase": "new_abstraction"}, {"score": 0.0032486546835056537, "phrase": "silo"}, {"score": 0.0031372369299648203, "phrase": "pixida's_scheduling_goals"}, {"score": 0.0029111767710750117, "phrase": "problem_formulations"}, {"score": 0.002544422946205545, "phrase": "new_graph"}, {"score": 0.0024693979425773993, "phrase": "novel_algorithm"}, {"score": 0.0022573076362326135, "phrase": "existing_schedulers"}, {"score": 0.0022016885701010088, "phrase": "significant_traffic_reduction"}, {"score": 0.0021049977753042253, "phrase": "aforementioned_links"}], "paper_keywords": [""], "paper_abstract": "In the era of global-scale services, big data analytical queries are often required to process datasets that span multiple data centers (DCs). In this setting, cross-DC bandwidth is often the scarcest, most volatile, and/or most expensive resource. However, current widely deployed big data analytics frameworks make no attempt to minimize the traffic traversing these links In this paper, we present PIXIDA, a scheduler that aims to minimize data movement across resource constrained links To achieve this, we introduce a new abstraction called SILO, which is key to modeling PIXIDA'S scheduling goals as a graph partitioning problem. Furthermore, we show that existing graph partitioning problem formulations do not map to how big data jobs work, causing their solutions to miss opportunities for avoiding data movement. To address this, we formulate a new graph partitioning problem and propose a novel algorithm to solve it. We integrated PIXIDA in Spark and our experiments show that, when compared to existing schedulers, PIXIDA achieves a significant traffic reduction of up to similar to 9 x on the aforementioned links", "paper_title": "Pixida: Optimizing Data Parallel Jobs in Wide-Area Data Analytics", "paper_id": "WOS:000386425500004"}