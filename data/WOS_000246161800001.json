{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "pure_type_systems"}, {"score": 0.004147523799581407, "phrase": "large_proofs"}, {"score": 0.004007083686875716, "phrase": "namespace_management"}, {"score": 0.003916098498242888, "phrase": "reusable_proof_libraries"}, {"score": 0.0038713805573219297, "phrase": "separate_verification"}, {"score": 0.0028550709503536494, "phrase": "module_system"}, {"score": 0.002758273619951683, "phrase": "sml-like_module_systems"}, {"score": 0.0026191799769765063, "phrase": "theoretical_framework"}, {"score": 0.0025014259919355474, "phrase": "quite_uniform_way"}, {"score": 0.0023889533502525527, "phrase": "theoretical_foundation"}, {"score": 0.0023480892503414596, "phrase": "module_systems"}, {"score": 0.0021049977753042253, "phrase": "metatheoretical_properties"}], "paper_keywords": [""], "paper_abstract": "Several proof-assistants rely on the very formal basis of Pure Type Systems (PTS) as their foundations. We are concerned with the issues involved in the development of large proofs in these provers such as namespace management, development of reusable proof libraries and separate verification. Although implementations offer many features to address them, few theoretical foundations have been laid for them up to now. This is a problem as features dealing with modularity may have harmful, unsuspected effects on the reliability or usability of an implementation. In this paper, we propose an extension of Pure Type Systems with a module system, MC(2) adapted from SML-like module systems for programming languages. This system gives a theoretical framework addressing the issues mentioned above in a quite uniform way. It is intended to be a theoretical foundation for the module systems of proof-assistants such as Coq or Agda. We show how reliability and usability can be formalized as metatheoretical properties and prove they hold for MC(2)", "paper_title": "Ml(2) - A module calculus for Pure Type Systems", "paper_id": "WOS:000246161800001"}