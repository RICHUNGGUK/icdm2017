{"auto_keywords": [{"score": 0.047553522045627315, "phrase": "spdp"}, {"score": 0.04494043342425538, "phrase": "spm"}, {"score": 0.0416650990387387, "phrase": "dma_operations"}, {"score": 0.03898882258906781, "phrase": "multiple_iterations"}, {"score": 0.00481495049065317, "phrase": "embedded_systems"}, {"score": 0.004606479650820579, "phrase": "effective_data_pipelining_technique"}, {"score": 0.004342430078306461, "phrase": "dynamic_scratch-pad_memory"}, {"score": 0.004013662619667083, "phrase": "cpu_instructions"}, {"score": 0.003820896867623235, "phrase": "iteration_access_patterns"}, {"score": 0.003584025547693836, "phrase": "data_locality"}, {"score": 0.003548905904860611, "phrase": "regular_array_accesses"}, {"score": 0.0033950634506367235, "phrase": "different_portions"}, {"score": 0.0033452786175016706, "phrase": "spm."}, {"score": 0.003232070595771711, "phrase": "cpu"}, {"score": 0.002914288956035066, "phrase": "off-chip_memory"}, {"score": 0.0027741761880779535, "phrase": "code_transformation"}, {"score": 0.0027334673433027086, "phrase": "dma_instructions"}, {"score": 0.0025638362414466278, "phrase": "impact_compiler"}, {"score": 0.0024525907271610104, "phrase": "loop_kernels"}, {"score": 0.002428530921948425, "phrase": "dspstone"}, {"score": 0.002404706931397046, "phrase": "mibench"}, {"score": 0.0023694072270874812, "phrase": "mediabench"}, {"score": 0.0023346234464901978, "phrase": "cycle-accurate_vliw_simulator"}, {"score": 0.0023117182131967523, "phrase": "trimaran"}, {"score": 0.0022777800735119405, "phrase": "experimental_results"}, {"score": 0.0022223176391038785, "phrase": "performance_improvement"}, {"score": 0.0021789194955896124, "phrase": "previous_work"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["scratch-pad memory management", " data pipelining", " embedded systems"], "paper_abstract": "In this paper, we propose an effective data pipelining technique, SPDP (Scratch-Pad Data Pipelining), for dynamic scratch-pad memory (SPM) management with DMA (Direct Memory Access). Our basic idea is to overlap the execution of CPU instructions and DMA operations. In SPDP, based on the iteration access patterns of arrays, we group multiple iterations into a block to improve the data locality of regular array accesses. We allocate the data of multiple iterations into different portions of the SPM. In this way, when the CPU executes instructions and accesses data from one portion of the SPM, DMA operations can be performed to transfer data between the off-chip memory and another portion of SPM simultaneously. We perform code transformation to insert DMA instructions to achieve the data pipelining. We have implemented our SPDP technique with the IMPACT compiler, and conduct experiments using a set of loop kernels from DSPstone, Mibench, and Mediabench on the cycle-accurate VLIW simulator of Trimaran. The experimental results show that our technique achieves performance improvement compared with the previous work. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "Dynamic scratch-pad memory management with data pipelining for embedded systems", "paper_id": "WOS:000281589500003"}