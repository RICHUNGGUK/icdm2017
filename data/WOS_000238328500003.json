{"auto_keywords": [{"score": 0.0469079690938728, "phrase": "java"}, {"score": 0.004764545943395783, "phrase": "aspectj"}, {"score": 0.004356741449157895, "phrase": "persistence_concerns"}, {"score": 0.004288472456976113, "phrase": "web-based_information_system"}, {"score": 0.0036810726176482278, "phrase": "considered_application"}, {"score": 0.0035853745478488254, "phrase": "similar_applications"}, {"score": 0.0034193226278107346, "phrase": "implemented_aspects"}, {"score": 0.003209782650616367, "phrase": "minor_language_modifications"}, {"score": 0.0031262984171100856, "phrase": "similar_implementations"}, {"score": 0.0029657683623403085, "phrase": "aspectj_implementation"}, {"score": 0.0028886123801902517, "phrase": "pure_java_implementation"}, {"score": 0.0026830601040919166, "phrase": "simple_aspect_framework"}, {"score": 0.0025318431634446426, "phrase": "different_implementations"}, {"score": 0.002339246282204109, "phrase": "architecture-specific_guidelines"}, {"score": 0.0023025177990160487, "phrase": "practical_advice"}, {"score": 0.00218419478369074, "phrase": "distributed_applications"}, {"score": 0.0021612684684351974, "phrase": "aspectj._copyright"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["aspect-oriented programming", " separation of concerns", " framework", " persistence", " distribution"], "paper_abstract": "This paper reports our experience using AspectJ, a general-purpose aspect-oriented extension to Java, to implement distribution and persistence concerns in a Web-based information system. This system was originally implemented in Java and restructured with AspectJ. Our main contribution is to show that AspectJ is useful for implementing several persistence and distribution concerns in the considered application, but also in similar applications. We have also identified interferences between the implemented aspects and a few drawbacks in the language, so we suggest some minor language modifications that could significantly improve similar implementations. Despite those problems, we argue that the AspectJ implementation is superior to the pure Java implementation. Some of the aspects implemented in our experiment are abstract and constitute a simple aspect framework. The other aspects are application specific but we suggest that different implementations might follow the same aspect patterns. The framework and the patterns allow us to propose architecture-specific guidelines that provide practical advice for both restructuring and implementing certain kinds of persistent and distributed applications with AspectJ. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Distribution and persistence as aspects", "paper_id": "WOS:000238328500003"}