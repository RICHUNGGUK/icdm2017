{"auto_keywords": [{"score": 0.04045940650346916, "phrase": "pair_programming"}, {"score": 0.00481495049065317, "phrase": "agile_software_development_methodologies"}, {"score": 0.004704407458864224, "phrase": "academic_researchers"}, {"score": 0.004673290248999786, "phrase": "industrial_practitioners"}, {"score": 0.00430118556814906, "phrase": "controversial_focus"}, {"score": 0.004202387892988509, "phrase": "success_stories"}, {"score": 0.004065156038847781, "phrase": "real_software_development_environment"}, {"score": 0.003919350990355722, "phrase": "pair-programming_productivity"}, {"score": 0.0037913267098534887, "phrase": "basic_understanding"}, {"score": 0.0035712919163869176, "phrase": "varying_skills"}, {"score": 0.0034431390653713173, "phrase": "statistical_productivity_measurements"}, {"score": 0.003408990700300338, "phrase": "different_researchers"}, {"score": 0.003341703245432554, "phrase": "contradictory_conclusions"}, {"score": 0.003044785536429499, "phrase": "controlled_experiment"}, {"score": 0.0029160193808720016, "phrase": "human_experience"}, {"score": 0.0028966970007550824, "phrase": "programming_productivity"}, {"score": 0.002830068550982961, "phrase": "controversial_issues"}, {"score": 0.0028113140998735366, "phrase": "non-traditional_programming_methodologies"}, {"score": 0.0026834578825190407, "phrase": "proposed_empirical_experiment"}, {"score": 0.002544422946205545, "phrase": "case_study"}, {"score": 0.0024045637620292697, "phrase": "previous_pair_programming_control_experiments"}, {"score": 0.002234893735225432, "phrase": "novice-novice_pairs"}, {"score": 0.002168975681697056, "phrase": "expert-expert_pairs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["programming model", " pair programming", " programmer productivity"], "paper_abstract": "Agile Software Development methodologies have grown in popularity both among academic researchers and industrial practitioners. Among the various methodologies or practices proposed, pair programming, which is concerned with two programmers collaborating on design, coding and testing, has become a controversial focus of interest. Even though some success stories have been reported with the use of pair-programming in real software development environment, many people remain rather skeptical of the claims on pair-programming productivity. Previous studies in pair programming have only addressed the basic understanding of the productivity of pairs and they have not addressed the variation in productivity between pairs of varying skills and experience, such as between novice-novice and expert-expert. Statistical productivity measurements reported by different researchers also seem to lead to contradictory conclusions. Until now, the literature has not addressed how those results and experiments were related to each other. In this paper, we propose a controlled experiment called repeat-programming which can facilitate the understanding of relationships between human experience and programming productivity. Repeat-programming can be performed when controversial issues in non-traditional programming methodologies and development productivity need to be investigated into. To illustrate how the proposed empirical experiment can put arguable, divisive problems into perspective, we have examined the productivity in pair programming as a case study. With repeat-programming, we are able to (i) better understand why results of previous pair programming control experiments reached different conclusions as to the productivity of pair programming and (ii) most importantly, present a case in which novice-novice pairs against novice solos are much more productive than expert-expert pairs against expert solos. (c) 2006 Elsevier Ltd. All rights reserved.", "paper_title": "Pair programming productivity: Novice-novice vs. expert-expert", "paper_id": "WOS:000239224700010"}