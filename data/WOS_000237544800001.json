{"auto_keywords": [{"score": 0.04867696472724124, "phrase": "multi-tasking_virtual_machine"}, {"score": 0.004815297271867841, "phrase": "tm"}, {"score": 0.004758053266234474, "phrase": "application_servers"}, {"score": 0.004224627834741731, "phrase": "standard_platform"}, {"score": 0.004149922666541166, "phrase": "enterprise_applications"}, {"score": 0.004052358316137446, "phrase": "java_programming_language"}, {"score": 0.003933609372601274, "phrase": "operating_system"}, {"score": 0.003795677450778112, "phrase": "multiple_applications"}, {"score": 0.0035341028694769036, "phrase": "weak_inter-application_isolation"}, {"score": 0.0034922880300145283, "phrase": "inadequate_resource_management_facilities"}, {"score": 0.0034304883989739804, "phrase": "underlying_java_platform"}, {"score": 0.003251552926963083, "phrase": "server_instances"}, {"score": 0.0031939996970411027, "phrase": "consequent_dramatic_increase"}, {"score": 0.0031374619658664843, "phrase": "total_memory_footprint"}, {"score": 0.003009392999807766, "phrase": "mvm"}, {"score": 0.0028693932802982417, "phrase": "efficient_and_scalable_implementation"}, {"score": 0.0028185852354729026, "phrase": "isolate_api"}, {"score": 0.0026874405408023956, "phrase": "multiple_server_instances"}, {"score": 0.002639845784408318, "phrase": "single_mvm_process"}, {"score": 0.002428617044669043, "phrase": "isolated_components"}, {"score": 0.002385595105638277, "phrase": "increased_flexibility"}, {"score": 0.002315574871863272, "phrase": "resulting_system"}, {"score": 0.002234252028553481, "phrase": "complete_and_scalable_operating_environment"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["application servers", " middleware", " resource management", " virtual machines", " Java (TM)", " J2EE (TM)"], "paper_abstract": "The Java (TM) 2 Platform, Enterprise Edition (J2EE (TM)) is established as the standard platform for hosting enterprise applications written in the Java programming language. Similar to an operating system, a J2EE server can host multiple applications, but this is problematic due to limitations on scalability, weak inter-application isolation and inadequate resource management facilities in the underlying Java platform. These limitations lead to a proliferation of server instances with a consequent dramatic increase in the total memory footprint and more complex system administration. The Multi-tasking Virtual Machine (MVM) solves this problem by providing an efficient and scalable implementation of the isolate API for multiple, isolated tasks, enabling the co-location of multiple server instances in a single MVM process. Isolates also enable the restructuring of a J2EE server implementation as a collection of isolated components, offering increased flexibility and reliability. The resulting system is a step towards a complete and scalable operating environment for enterprise applications. Copyright (C) 2006 John Wiley & Sons, Ltd.", "paper_title": "Scaling J2EE (TM) application servers with the multi-tasking virtual machine", "paper_id": "WOS:000237544800001"}