{"auto_keywords": [{"score": 0.041739464549981474, "phrase": "different_versions"}, {"score": 0.03458969141050206, "phrase": "diverse_versions"}, {"score": 0.00481495049065317, "phrase": "\"diversity\"_in_development_reduce_common_failures"}, {"score": 0.0047306078475683865, "phrase": "probabilistic_modeling"}, {"score": 0.004627244470096107, "phrase": "diverse_redundancy"}, {"score": 0.004566308708871429, "phrase": "multiple_\"versions"}, {"score": 0.0044272138900038095, "phrase": "redundant_configuration"}, {"score": 0.0043496334756644535, "phrase": "attractive_defence"}, {"score": 0.004311352359122141, "phrase": "design_faults"}, {"score": 0.004179991181159956, "phrase": "common_failures"}, {"score": 0.004143196873246147, "phrase": "development_and_procurement_practices"}, {"score": 0.003894512634265439, "phrase": "difficult_questions"}, {"score": 0.003628460216207393, "phrase": "probabilistic_models"}, {"score": 0.003502305158321511, "phrase": "common_sense"}, {"score": 0.0033212215487678854, "phrase": "well_scenarios"}, {"score": 0.0032199307816384577, "phrase": "rigorous_isolation"}, {"score": 0.00289546142998427, "phrase": "nonindependent_development_processes"}, {"score": 0.0027947199430705077, "phrase": "rigorous_way"}, {"score": 0.002733539375462443, "phrase": "open_questions"}, {"score": 0.0024688710065898646, "phrase": "specification_corrections"}, {"score": 0.0024148064819862337, "phrase": "test_cases"}, {"score": 0.0023307492812556204, "phrase": "specific_scenarios"}, {"score": 0.002279702500235741, "phrase": "alternative_ways"}, {"score": 0.002200337772403983, "phrase": "nonintuitive_issues"}, {"score": 0.002161695357601592, "phrase": "expected_system_reliability"}, {"score": 0.0021049977753042253, "phrase": "intentional_\"negative\"_dependences"}], "paper_keywords": ["Common-mode failure", " software diversity", " fault tolerance", " multiversion software", " probability of failure on demand", " reliability"], "paper_abstract": "Fault tolerance via diverse redundancy, with multiple \"versions\" of a system in a redundant configuration, is an attractive defence against design faults. To reduce the probability of common failures, development and procurement practices pursue \"diversity\" between the ways the different versions are developed. But difficult questions remain open about which practices are more effective to this aim. About these questions, probabilistic models have helped by exposing fallacies in \"common sense\" judgements. However, most make very restrictive assumptions. They model well scenarios in which diverse versions are developed in rigorous isolation from each other: A condition that many think desirable, but is unlikely in practice. We extend these models to cover nonindependent development processes for diverse versions. This gives us a rigorous way of framing claims and open questions about how best to pursue diversity, and about the effects-negative and positive-of commonalities between developments, from specification corrections to the choice of test cases. We obtain three theorems that, under specific scenarios, identify preferences between alternative ways of seeking diversity. We also discuss nonintuitive issues, including how expected system reliability may be improved by creating intentional \"negative\" dependences between the developments of different versions.", "paper_title": "When Does \"Diversity\" in Development Reduce Common Failures? Insights from Probabilistic Modeling", "paper_id": "WOS:000334668500009"}