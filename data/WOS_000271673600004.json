{"auto_keywords": [{"score": 0.050073078889111354, "phrase": "general-purpose_computation"}, {"score": 0.04810417603515559, "phrase": "gpu"}, {"score": 0.009130787700580989, "phrase": "gpu."}, {"score": 0.004379737380744606, "phrase": "extremely_powerful_and_flexible_processor"}, {"score": 0.0042212686864468805, "phrase": "attractive_platform"}, {"score": 0.0035853745478488254, "phrase": "software_tools"}, {"score": 0.0034193226278107346, "phrase": "gpgpu_programming"}, {"score": 0.0033656930865509547, "phrase": "unusual_and_specific_programming_model"}, {"score": 0.0032609360162842767, "phrase": "significant_barrier"}, {"score": 0.003209782650616367, "phrase": "gpgpu_programs"}, {"score": 0.003061072337623773, "phrase": "novel_compiler-based_approach"}, {"score": 0.003028976836542449, "phrase": "gpgpu"}, {"score": 0.0029814443878969973, "phrase": "compiler_directives"}, {"score": 0.0029038817737006405, "phrase": "code_fragments"}, {"score": 0.0027115068461472363, "phrase": "guru"}, {"score": 0.002654911400878851, "phrase": "labeled_code_fragments"}, {"score": 0.0026270572353632297, "phrase": "iso-compliant_c_code"}, {"score": 0.0025858215477025117, "phrase": "appropriate_opengl_and_cg_apis"}, {"score": 0.0025452314655691165, "phrase": "native_c_compiler"}, {"score": 0.0024144659350277954, "phrase": "executable_code"}, {"score": 0.0022783523466965187, "phrase": "preliminary_experimental_results"}, {"score": 0.0022544399432457164, "phrase": "selected_benchmarks"}, {"score": 0.0021957487795963666, "phrase": "significant_performance_improvements"}, {"score": 0.0021273284545701896, "phrase": "high_degree"}, {"score": 0.0021049977753042253, "phrase": "data_parallelism"}], "paper_keywords": ["GPU", " GPGPU", " Compiler", " Compiler directive"], "paper_abstract": "In recent years, the GPU (graphics processing unit) has evolved into an extremely powerful and flexible processor, with it now representing an attractive platform for general-purpose computation. Moreover, changes to the design and programmability of GPUs provide the opportunity to perform general-purpose computation on a GPU (GPGPU). Even though many programming languages, software tools, and libraries have been proposed to facilitate GPGPU programming, the unusual and specific programming model of the GPU remains a significant barrier to writing GPGPU programs. In this paper, we introduce a novel compiler-based approach for GPGPU programming. Compiler directives are used to label code fragments that are to be executed on the GPU. Our GPGPU compiler, Guru, converts the labeled code fragments into ISO-compliant C code that contains appropriate OpenGL and Cg APIs. A native C compiler can then be used to compile it into the executable code for GPU. Our compiler is implemented based on the Open64 compiler infrastructure. Preliminary experimental results from selected benchmarks show that our compiler produces significant performance improvements for programs that exhibit a high degree of data parallelism.", "paper_title": "Compiler support for general-purpose computation on GPUs", "paper_id": "WOS:000271673600004"}