{"auto_keywords": [{"score": 0.03202078941389311, "phrase": "arbitrary_given_query_line_segment"}, {"score": 0.00481495049065317, "phrase": "closest_and_farthest_points"}, {"score": 0.0047113960612140335, "phrase": "query_segment"}, {"score": 0.004445961412092278, "phrase": "improved_algorithm"}, {"score": 0.004016782710006123, "phrase": "planar_set_p"}, {"score": 0.003958937342925219, "phrase": "n_given_points"}, {"score": 0.0030933709720820605, "phrase": "k_closest_points"}, {"score": 0.0026366753045215558, "phrase": "first_time"}, {"score": 0.0025059724686541263, "phrase": "polylogarithmic_query_time"}, {"score": 0.0024519545383399773, "phrase": "subquadratic_space"}, {"score": 0.0022472527731744974, "phrase": "k_farthest_points"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["computational geometry", " data structure", " segment dragging problem"], "paper_abstract": "In this paper we present an improved algorithm for finding k closest (farthest) points for a given arbitrary query segment. We show how to preprocess a planar set P of n given points in O (n(2) log n) expected time (or, alternatively, in O (n(2) log(2) n) deterministic time) and a subquadratic space, in order to report k closest points to an arbitrary given query line segment in O (k + log(2) n log log n) time. Here, for the first time, the data structure that provides polylogarithmic query time and uses subquadratic space is presented. We also show an algorithm for reporting the k farthest points from an arbitrary given query line segment. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Computing closest and farthest points for a query segment", "paper_id": "WOS:000254543900025"}