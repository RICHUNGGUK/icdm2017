{"auto_keywords": [{"score": 0.048877326221094676, "phrase": "ace"}, {"score": 0.00475413908468027, "phrase": "ant_colony_extended"}, {"score": 0.004576253356889219, "phrase": "novel_algorithm"}, {"score": 0.0037336520904376687, "phrase": "regulation_policy"}, {"score": 0.003459191419478298, "phrase": "searching_process"}, {"score": 0.003245900020944865, "phrase": "construction_graph"}, {"score": 0.0031643005824589917, "phrase": "classical_aco_algorithms"}, {"score": 0.0029691377785333872, "phrase": "state_space_exploration_approach"}, {"score": 0.0027159094186967247, "phrase": "travelling_salesman_problem"}, {"score": 0.0023013968622710847, "phrase": "better_performance"}, {"score": 0.002243488622956836, "phrase": "mmas"}, {"score": 0.002215081186105616, "phrase": "almost_every_tsp"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Ant Colony Optimisation", " Swarm intelligence", " Self-organisation", " Artificial intelligence", " Multi-agent system"], "paper_abstract": "Ant Colony Extended (ACE) is a novel algorithm belonging to the general Ant Colony Optimisation (ACO) framework. Two specific features of ACE are: the division of tasks between two kinds of ants, namely patrollers and foragers, and the implementation of a regulation policy to control the number of each kind of ant during the searching process. In addition, ACE does not employ the construction graph usually employed by classical ACO algorithms. Instead, the search is performed using a state space exploration approach. This paper studies the performance of ACE in the context of the Travelling Salesman Problem (TSP), a classical combinatorial optimisation problem. The results are compared with the results of two well known ACO algorithms: ACS and MMAS. ACE shows better performance than ACS and MMAS in almost every TSP tested instance. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Ant Colony Extended: Experiments on the Travelling Salesman Problem", "paper_id": "WOS:000344034300033"}