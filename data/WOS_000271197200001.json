{"auto_keywords": [{"score": 0.03697221637235307, "phrase": "semantic_actions"}, {"score": 0.00481495049065317, "phrase": "earley_parser"}, {"score": 0.004726382602809228, "phrase": "traditional_earley_parsers"}, {"score": 0.00411182818527434, "phrase": "parse_trees"}, {"score": 0.002997735656669146, "phrase": "safe_earley_sets"}, {"score": 0.0028615323526689582, "phrase": "recognition_phase"}, {"score": 0.0027827907725673845, "phrase": "partial_parse_trees"}, {"score": 0.002375714262344562, "phrase": "secondary_benefit"}, {"score": 0.0023103100997344072, "phrase": "earley_sets"}, {"score": 0.0021049977753042253, "phrase": "substantial_savings"}], "paper_keywords": [""], "paper_abstract": "Traditional Earley parsers operate in two phases: first recognizing the input, then constructing the forest of parse trees. Practically speaking, this quirk makes it awkward to use in a compiler-compiler, because semantic actions attached to rules are only executed after the fact. We address this problem by identifying safe Earley sets, points during the recognition phase at which partial parse trees can be constructed; this means that semantic actions may be executed on the fly. A secondary benefit is that Earley sets can be deleted during recognition, resulting in a substantial savings of both space and time.", "paper_title": "Early action in an Earley parser", "paper_id": "WOS:000271197200001"}