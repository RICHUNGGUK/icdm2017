{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "word-based_microarchitecture"}, {"score": 0.0047273577269638725, "phrase": "cycle-efficient_implementation"}, {"score": 0.004598933498016774, "phrase": "linear_feedback_shift"}, {"score": 0.004119049028319832, "phrase": "algorithm_transformation_method"}, {"score": 0.0035233696341819437, "phrase": "bit-serial_lfsr_algorithm"}, {"score": 0.003427540517249369, "phrase": "bit_parallel_format"}, {"score": 0.003213920601037463, "phrase": "original_lfsr_algorithm"}, {"score": 0.0031553611552558986, "phrase": "detailed_implementation_methodologies"}, {"score": 0.0030414140732789186, "phrase": "extensive_simulation_results"}, {"score": 0.002723607240517261, "phrase": "resulting_parallel_formulations"}, {"score": 0.0023725232579531273, "phrase": "teplat"}, {"score": 0.002329258721870127, "phrase": "lfsr_formulations"}, {"score": 0.002163930783583212, "phrase": "naive_implementation"}, {"score": 0.0021049977753042253, "phrase": "traditional_look-ahead_transformation-based_implementation"}], "paper_keywords": ["Linear feedback shift register", " iteration bound", " vector processing", " look-ahead transformation", " software defined radio"], "paper_abstract": "Cycle-efficient implementation of the linear feedback shift register (LFSR) algorithm on a word-based microarchitecture is investigated. This work examines an algorithm transformation method, called term-preserving look-ahead transformation (TePLAT), that transforms the bit-serial LFSR algorithm into a bit parallel format while maintaining the overhead of the original LFSR algorithm. Detailed implementation methodologies as well as extensive simulation results are presented. We apply TePLAT to 25 commonly used LFSRs and test the resulting parallel formulations on two popular word-based microprocessor development platforms: a Texas Instrument C6416 Code Composition Simulator and an ARM-9 Simulator. In all 25 cases, TePLAT transformed LFSR formulations consistently achieve much higher throughput than those of a naive implementation and a traditional look-ahead transformation-based implementation.", "paper_title": "Cycle-Efficient LFSR Implementation on Word-Based Microarchitecture", "paper_id": "WOS:000315959200016"}