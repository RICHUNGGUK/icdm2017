{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.004786620949516712, "phrase": "abstract_data_types"}, {"score": 0.0045122922461952805, "phrase": "distributed_abstract_data_type"}, {"score": 0.004105558123159003, "phrase": "dadt"}, {"score": 0.003939296259436904, "phrase": "adt_instances"}, {"score": 0.003802135020791801, "phrase": "dart_operations"}, {"score": 0.003626626504149897, "phrase": "distributed_state"}, {"score": 0.003562912424153324, "phrase": "dedicated_programming_constructs"}, {"score": 0.003338690782620756, "phrase": "dadt_views"}, {"score": 0.0032033846797483475, "phrase": "target_adt_instances"}, {"score": 0.0030554300179552415, "phrase": "adt_properties"}, {"score": 0.002984027623988469, "phrase": "dart_constructs"}, {"score": 0.0028293966058473476, "phrase": "application_data"}, {"score": 0.0025892330566358503, "phrase": "uniform_treatment"}, {"score": 0.0025137856138000014, "phrase": "space_concerns"}, {"score": 0.002426137929553724, "phrase": "context-aware_applications"}, {"score": 0.0023415390666563177, "phrase": "considerable_flexibility"}, {"score": 0.0023139986108451967, "phrase": "expressive_power"}, {"score": 0.0021682027434117095, "phrase": "existing_object-oriented_programming_languages"}], "paper_keywords": [""], "paper_abstract": "In this paper we introduce the concept of Distributed Abstract Data Type (DADT), a new programming model simplifying the development of distributed, context-aware applications. A DADT instance logically encapsulates a collection of ADT instances distributed throughout the system. DART operations specify the semantics of access to this distributed state by using dedicated programming constructs. The scope of these operations can be restricted using DADT views, i.e., projections over the target ADT instances, defined declaratively and dynamically based on ADT properties. Interestingly, DART constructs can be used to deal not only with application data, but also with the space where it resides. This leads to a uniform treatment of the data and space concerns, simplifying the development of context-aware applications and providing the programmer with considerable flexibility and expressive power. We argue that DADTs are amenable to incorporation in existing object-oriented programming languages, as demonstrated by our prototype implementation.", "paper_title": "Distributed abstract data types", "paper_id": "WOS:000243318600040"}