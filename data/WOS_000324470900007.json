{"auto_keywords": [{"score": 0.04034190794741309, "phrase": "virtual_machines"}, {"score": 0.00804414600615203, "phrase": "identical_pages"}, {"score": 0.007496746169633549, "phrase": "target_hosts"}, {"score": 0.00481495049065317, "phrase": "migrate_virtual_machines"}, {"score": 0.0047306078475683865, "phrase": "live_virtual_machine_migration"}, {"score": 0.004546174820239776, "phrase": "entire_os"}, {"score": 0.004506171772318298, "phrase": "running_applications"}, {"score": 0.004446823283475876, "phrase": "non-disruptive_fashion"}, {"score": 0.004330450801016359, "phrase": "one-to-one_live_migration"}, {"score": 0.00354909279546064, "phrase": "vmscatter_multicasts"}, {"score": 0.003350740737336966, "phrase": "redundant_transmission"}, {"score": 0.0032057142600527, "phrase": "similar_applications"}, {"score": 0.0029733865110222785, "phrase": "novel_grouping_algorithm"}, {"score": 0.002832081745025006, "phrase": "previous_schedule_algorithms"}, {"score": 0.0027456676902333304, "phrase": "load_balance"}, {"score": 0.002721464488351771, "phrase": "power_saving"}, {"score": 0.0026501241093379786, "phrase": "network_traffic"}, {"score": 0.002592100731070259, "phrase": "critical_metric"}, {"score": 0.0025692477422626678, "phrase": "data-intensive_data_centers"}, {"score": 0.002490833392316362, "phrase": "multicast_sequence"}, {"score": 0.002341094670523097, "phrase": "multicast_groups"}, {"score": 0.002279702500235741, "phrase": "traditional_live_migration_technique"}, {"score": 0.0022396694076443446, "phrase": "vmscatter"}, {"score": 0.0021906130276146325, "phrase": "total_transferred_data"}, {"score": 0.0021426288417854987, "phrase": "total_migration_time"}, {"score": 0.0021049977753042253, "phrase": "network_traffic_reduction"}], "paper_keywords": ["Design", " Experimentation", " Performance", " Live Migration", " Virtualization", " De-duplication", " Multicast", " Placement"], "paper_abstract": "Live virtual machine migration is a technique often used to migrate an entire OS with running applications in a non-disruptive fashion. Prior works concerned with one-to-one live migration with many techniques have been proposed such as pre-copy, post-copy and log/replay. In contrast, we propose VMScatter, a one-to-many migration method to migrate virtual machines from one to many other hosts simultaneously. First, by merging the identical pages within or across virtual machines, VMScatter multicasts only a single copy of these pages to associated target hosts for avoiding redundant transmission. This is impactful practically when the same OS and similar applications running in the virtual machines where there are plenty of identical pages. Second, we introduce a novel grouping algorithm to decide the placement of virtual machines, distinguished from the previous schedule algorithms which focus on the workload for load balance or power saving, we also focus on network traffic, which is a critical metric in data-intensive data centers. Third, we schedule the multicast sequence of packets to reduce the network overhead introduced by joining or quitting the multicast groups of target hosts. Compared to traditional live migration technique in QEMU/KVM, VMScatter reduces 74.2% of the total transferred data, 69.1% of the total migration time and achieves the network traffic reduction from 50.1% to 70.3%.", "paper_title": "VMScatter: Migrate Virtual Machines to Many Hosts", "paper_id": "WOS:000324470900007"}