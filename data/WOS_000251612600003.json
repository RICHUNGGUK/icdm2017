{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "abstract_interpretation"}, {"score": 0.046888273895838106, "phrase": "secure_information_flow"}, {"score": 0.04415653596856239, "phrase": "security_levels"}, {"score": 0.004383406949799696, "phrase": "dynamic_structures"}, {"score": 0.004328856052035968, "phrase": "input_and_output_channels"}, {"score": 0.004117329555194574, "phrase": "concrete_operational_semantics"}, {"score": 0.003940706575253453, "phrase": "security_level"}, {"score": 0.003542557455905503, "phrase": "collecting_semantics"}, {"score": 0.003327349929456035, "phrase": "concrete_states"}, {"score": 0.0031056437850836326, "phrase": "abstract_domains"}, {"score": 0.0030097975788892896, "phrase": "concrete_ones"}, {"score": 0.0028625406368744995, "phrase": "actual_values"}, {"score": 0.0027054473441439422, "phrase": "abstract_semantics"}, {"score": 0.0024625017739528096, "phrase": "larger_set"}, {"score": 0.0023566987138026285, "phrase": "typing_approaches"}, {"score": 0.0022696277881969896, "phrase": "efficient_implementation"}, {"score": 0.0021857667493036786, "phrase": "fixpoint_iteration"}, {"score": 0.0021049977753042253, "phrase": "java_bytecode_verification"}], "paper_keywords": ["abstract interpretation", " information flow", " language based security"], "paper_abstract": "We present a method based on abstract interpretation to check secure information flow in programs with dynamic structures where input and output channels are associated with security levels. In the concrete operational semantics each value is annotated by a security level dynamically taking into account both the explicit and the implicit information flows. We define a collecting semantics which associates with each program point the set of concrete states of the machine when the point is reached. The abstract domains are obtained from the concrete ones by keeping the security levels and forgetting the actual values. Using this framework, we define an abstract semantics, called instruction-level security typing, that allows us to certify a larger set of programs with respect to the typing approaches to check secure information flow. An efficient implementation is shown, operating a fixpoint iteration similar to that of the Java bytecode verification.", "paper_title": "Instruction-level security typing by abstract interpretation", "paper_id": "WOS:000251612600003"}