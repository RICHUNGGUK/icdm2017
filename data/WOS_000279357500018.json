{"auto_keywords": [{"score": 0.04907983841155353, "phrase": "guesstimate"}, {"score": 0.03335306275951578, "phrase": "guesstimated_state"}, {"score": 0.015719714774698138, "phrase": "collaborative_distributed_systems"}, {"score": 0.014663172243416867, "phrase": "consistent_state"}, {"score": 0.013772286050232773, "phrase": "distributed_system"}, {"score": 0.009781709690246157, "phrase": "committed_state"}, {"score": 0.0047310525657970615, "phrase": "new_programming_model"}, {"score": 0.004378854464130883, "phrase": "shared_transactional_store"}, {"score": 0.004139223748460922, "phrase": "\"committed_state"}, {"score": 0.0038715697646612766, "phrase": "replicated_local_copy"}, {"score": 0.003672500644750565, "phrase": "shared_state"}, {"score": 0.0031234247639701134, "phrase": "issuing_machine"}, {"score": 0.00247548600804924, "phrase": "first_time"}, {"score": 0.0022507989506447413, "phrase": "potential_discrepancy"}, {"score": 0.0021576032929465417, "phrase": "api"}, {"score": 0.0021049977753042253, "phrase": "collaborative_distributed_applications"}], "paper_keywords": ["Design", " Languages", " Distributed systems", " collaborative applications", " concurrency", " language extensions"], "paper_abstract": "We present a new programming model GUESSTIMATE for developing collaborative distributed systems. The model allows atomic, isolated operations that transform a system from consistent state to consistent state, and provides a shared transactional store for a collection of such operations executed by various machines in a distributed system. In addition to \"committed state\" which is identical in all machines in the distributed system, GUESSTIMATE allows each machine to have a replicated local copy of the state (called \"guesstimated state\") so that operations on shared state can be executed locally without any blocking, while also guaranteeing that eventually all machines agree on the sequences of operations executed. Thus, each operation is executed multiple times, once at the time of issue when it updates the guesstimated state of the issuing machine, once when the operation is committed (atomically) to the committed state of all machines, and several times in between as the guesstimated state converges toward the committed state. While we expect the results of these executions of the operation to be identical most of the time in the class of applications we study, it is possible for an operation to succeed the first time when it is executed on the guesstimated state, and fail when it is committed. GUESSTIMATE provides facilities that allow the programmer to deal with this potential discrepancy. This paper presents our programming model, its operational semantics, its realization as an API in C#, and our experience building collaborative distributed applications with this model.", "paper_title": "GUESSTIMATE: A Programming Model for Collaborative Distributed Systems", "paper_id": "WOS:000279357500018"}