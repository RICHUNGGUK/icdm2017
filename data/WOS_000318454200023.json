{"auto_keywords": [{"score": 0.04924496525218248, "phrase": "generalized_multiply-add_units"}, {"score": 0.004146510711518748, "phrase": "weighted_representation"}, {"score": 0.0038309141193444015, "phrase": "partial_products"}, {"score": 0.0037311260623089436, "phrase": "additive_operands"}, {"score": 0.0035705347414368726, "phrase": "inverted_end"}, {"score": 0.0034168317227203206, "phrase": "adder_trees"}, {"score": 0.0032410683344688625, "phrase": "large_savings"}, {"score": 0.002967931416941965, "phrase": "discrete_units"}, {"score": 0.0029161225023394363, "phrase": "optimization_techniques"}, {"score": 0.0028652153774536967, "phrase": "implementation_results"}, {"score": 0.0027660443371695024, "phrase": "practical_interest"}, {"score": 0.0023604768913655463, "phrase": "residue_number_system"}, {"score": 0.0022192891418394514, "phrase": "digital_signal_processing_and_cryptography_algorithms"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": [""], "paper_abstract": "In this work, modulo 2(n) + 1 fused architectures of dot product and generalized multiply-add units for operands in the weighted representation are proposed. According to our algorithm, the partial products and the additive operands are efficiently added using inverted end around carry-save adder trees. This approach results to large savings on delay, area and power compared to using discrete units. Optimization techniques and implementation results for units with practical interest are also given. The proposed modulo 2(n) + 1 arithmetic units can be utilized in all applications where the residue number system is used for the implementation of digital signal processing and cryptography algorithms. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "On the design of modulo 2(n)+1 dot product and generalized multiply-add units", "paper_id": "WOS:000318454200023"}