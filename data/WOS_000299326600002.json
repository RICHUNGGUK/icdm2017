{"auto_keywords": [{"score": 0.04494806290970924, "phrase": "monad_comprehension_notation"}, {"score": 0.00481495049065317, "phrase": "monad_comprehensions"}, {"score": 0.004618720776729413, "phrase": "glasgow_haskell_compiler"}, {"score": 0.004430452655732319, "phrase": "haskell's_list_comprehension_notation"}, {"score": 0.004149922666541166, "phrase": "generator_and_filter_clauses"}, {"score": 0.0037507793596022326, "phrase": "recently_proposed_parallel"}, {"score": 0.003706410380455668, "phrase": "sql-like_list_comprehension_notations"}, {"score": 0.0035977623578676496, "phrase": "aforementioned_generalisations"}, {"score": 0.0031003255054939524, "phrase": "wide_adoption"}, {"score": 0.002991524908432975, "phrase": "haskell_community"}, {"score": 0.0027852126030055305, "phrase": "good_fit"}, {"score": 0.0027522340188241446, "phrase": "monadic_libraries"}, {"score": 0.002719644855867468, "phrase": "embedded_domain-specific_languages"}, {"score": 0.0025776913268808124, "phrase": "collection_monads"}, {"score": 0.002385595105638277, "phrase": "haskell_standard"}, {"score": 0.0021049977753042253, "phrase": "language_standard"}], "paper_keywords": ["Languages", " Design", " Theory", " Haskell", " monad", " comprehension"], "paper_abstract": "This paper is about a Glasgow Haskell Compiler (GHC) extension that generalises Haskell's list comprehension notation to monads. The monad comprehension notation implemented by the extension supports generator and filter clauses, as was the case in the Haskell 1.4 standard. In addition, the extension generalises the recently proposed parallel and SQL-like list comprehension notations to monads. The aforementioned generalisations are formally defined in this paper. The extension will be available in GHC 7.2. This paper gives several instructive examples that we hope will facilitate wide adoption of the extension by the Haskell community. We also argue why the do notation is not always a good fit for monadic libraries and embedded domain-specific languages, especially for those that are based on collection monads. Should the question of how to integrate the extension into the Haskell standard arise, the paper proposes a solution to the problem that led to the removal of the monad comprehension notation from the language standard.", "paper_title": "Bringing Back Monad Comprehensions", "paper_id": "WOS:000299326600002"}