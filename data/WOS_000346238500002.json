{"auto_keywords": [{"score": 0.04464397984850976, "phrase": "sequence_diagrams"}, {"score": 0.00481495049065317, "phrase": "uml_behavior_models"}, {"score": 0.004555499634179394, "phrase": "system_requirements"}, {"score": 0.004451562879816059, "phrase": "uml"}, {"score": 0.004096493540086106, "phrase": "objected-oriented_languages"}, {"score": 0.004040123129261597, "phrase": "subsequent_design_stages"}, {"score": 0.003911578552479064, "phrase": "dynamic_behavior"}, {"score": 0.003787108326100196, "phrase": "full_compliance"}, {"score": 0.003734979290204709, "phrase": "implementation_classes"}, {"score": 0.0036328561748082138, "phrase": "automatic_approach"}, {"score": 0.0035994372026264478, "phrase": "tool_support"}, {"score": 0.0035498822293046884, "phrase": "class_contracts"}, {"score": 0.0029780219173522115, "phrase": "latter_places"}, {"score": 0.002909960617042717, "phrase": "legal_state"}, {"score": 0.0028566300478906916, "phrase": "succeeding_operation_calls"}, {"score": 0.002702415623060517, "phrase": "object-oriented_language"}, {"score": 0.0026652263429929185, "phrase": "java"}, {"score": 0.0024865237976623286, "phrase": "design_stages"}, {"score": 0.0024636239664210433, "phrase": "system_development_process"}, {"score": 0.002363150587804677, "phrase": "uml_protocol_state_machine"}, {"score": 0.0022355167967736326, "phrase": "controller_class"}, {"score": 0.0021344259291927914, "phrase": "critical_constructs"}, {"score": 0.0021049977753042253, "phrase": "respective_uml_diagrams"}], "paper_keywords": ["model-driven development", " UML", " sequence diagrams", " state machines", " model transformations", " QVT"], "paper_abstract": "In model driven architecture (MDA), system requirements are first captured by UML (unified modeling language) use cases with sequence diagrams to describe their intended use and implemented by classes of objected-oriented languages in the subsequent design stages. It is important that the dynamic behavior specified by the sequence diagrams is in full compliance with the implementation classes. This paper proposes an automatic approach and tool support for generating class contracts, which define a precondition and a postcondition for each operation of the class. The former serves as a guard to ensure invocations of the operations respect the semantics introduced by the sequence diagrams, and the latter places the system in a legal state to facilitate the succeeding operation calls. The contracts can be easily mapped to code of an object-oriented language such as Java. Thus, the approach helps to bridge the gap between the requirements and design stages of system development process. We use our model transformation tool to first generate a UML protocol state machine from the sequence diagrams, and then derive the contracts for a controller class. The transformations take into account the concurrency and critical constructs of the respective UML diagrams.", "paper_title": "Automated transformations from UML behavior models to contracts", "paper_id": "WOS:000346238500002"}