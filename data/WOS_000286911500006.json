{"auto_keywords": [{"score": 0.03192280240290009, "phrase": "saturation"}, {"score": 0.0047386923107107645, "phrase": "popular_and_successful_technique"}, {"score": 0.004682288586254123, "phrase": "complex_digital_systems"}, {"score": 0.00407161650109722, "phrase": "current_trend"}, {"score": 0.004039221742250308, "phrase": "hardware_architectures"}, {"score": 0.003789137457228946, "phrase": "symbolic_state-space_generation_algorithms"}, {"score": 0.0035922320268133366, "phrase": "bfs"}, {"score": 0.003526186748088922, "phrase": "sequential_symbolic_state-space_generation_algorithm"}, {"score": 0.003255295296893174, "phrase": "saturation_algorithm"}, {"score": 0.003178147973814818, "phrase": "sequential_algorithms"}, {"score": 0.0030414140732789186, "phrase": "parallel_version"}, {"score": 0.002898930717812433, "phrase": "extensive_experimental_studies"}, {"score": 0.0028302049070944944, "phrase": "rigorous_analysis_tools"}, {"score": 0.002752075650871066, "phrase": "parallel_overheads"}, {"score": 0.00255068452076921, "phrase": "parallel_symbolic_state-space_generation_algorithm"}, {"score": 0.0023451553255837317, "phrase": "perceivable_speed-ups"}, {"score": 0.0022803854904010347, "phrase": "real-world_applications"}, {"score": 0.0022352169832099153, "phrase": "significant_improvements"}, {"score": 0.0021049977753042253, "phrase": "sequential_symbolic_model"}], "paper_keywords": ["Symbolic state-space generation", " Saturation", " parallelisation", " benchmarking"], "paper_abstract": "Model checking is a popular and successful technique for verifying complex digital systems. Carrying this technique-and its underlying state-space generation algorithms-beyond its current limitations presents itself with a number of alternatives. Our focus is on parallelization which is made attractive by the current trend in hardware architectures towards multi-core, multi-processor systems. The main obstacle in this endeavour is that, in particular, symbolic state-space generation algorithms are notoriously hard to parallelize. In this article, we describe the process of taking a sequential symbolic state-space generation algorithm, namely a generic, symbolic BFS algorithm, through a sequence of optimizations that leads up to the Saturation algorithm and follow the impact these sequential algorithms have on their parallel counterparts. In particular, we develop a parallel version of Saturation, discuss the challenges faced in its design and conduct extensive experimental studies of its implementation. We employ rigorous analysis tools and techniques for measuring and evaluating parallel overheads and the quality of the parallelization. The outcome of these studies is that the performance of a parallel symbolic state-space generation algorithm is almost impossible to predict and highly dependent on the model to which it is applied. In most situations, perceivable speed-ups are hard to achieve, but real-world applications where our technique produces significant improvements do exist. Nevertheless, it appears that time is better invested in optimizing sequential symbolic model checking algorithms rather than parallelizing them.", "paper_title": "To Parallelize or to Optimize?", "paper_id": "WOS:000286911500006"}