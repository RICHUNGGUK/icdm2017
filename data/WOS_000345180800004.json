{"auto_keywords": [{"score": 0.03681703781612336, "phrase": "spec"}, {"score": 0.009882628514113227, "phrase": "ui_builders"}, {"score": 0.008569000324031411, "phrase": "widget_logic"}, {"score": 0.00481495049065317, "phrase": "customizable_user_interfaces"}, {"score": 0.004612376827433774, "phrase": "tedious_task"}, {"score": 0.00409310463335204, "phrase": "missing_aspect"}, {"score": 0.0037199473428123175, "phrase": "significant_amount"}, {"score": 0.0036494864560524735, "phrase": "ui_code"}, {"score": 0.003253791343615811, "phrase": "widget_properties"}, {"score": 0.0031466527290980686, "phrase": "specific_classes"}, {"score": 0.0031018195951638882, "phrase": "composable_classes"}, {"score": 0.00305762327908599, "phrase": "composable_class"}, {"score": 0.0029569247903654477, "phrase": "model-widget_bridge"}, {"score": 0.002928765962664163, "phrase": "widget_interaction_logic"}, {"score": 0.002778604641920052, "phrase": "seamless_reuse"}, {"score": 0.002512926585707873, "phrase": "pharo"}, {"score": 0.0024534993283766332, "phrase": "half_the_amount"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Smalltalk", " Ui", " UlBuilder", " Widgets", " MVC"], "paper_abstract": "Implementing UIs is often a tedious task. To address this, UI Builders have been proposed to support the description of widgets, their location, and their logic. A missing aspect of UI Builders is however the ability to reuse and compose widget logic. In our experience, this leads to a significant amount of duplication in UI code. To address this issue, we built Spec: a UlBuilder for Pharo with a focus on reuse. With Spec, widget properties are defined declaratively and attached to specific classes known as composable classes. A composable class defines its own widget description as well as the model-widget bridge and widget interaction logic. This paper presents Spec, showing how it enables seamless reuse of widgets and how these can be customized. After presenting Spec and its implementation, we discuss how its use in Pharo 2.0 has cut in half the amount of lines of code of six of its tools, mostly through reuse. This shows that Spec meets its goals of allowing reuse and composition of widget logic. (C) 2013 Elsevier B.V. All rights", "paper_title": "Seamless composition and reuse of customizable user interfaces with Spec", "paper_id": "WOS:000345180800004"}