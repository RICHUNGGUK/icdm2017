{"auto_keywords": [{"score": 0.04774494627841503, "phrase": "code_size"}, {"score": 0.013552846553533697, "phrase": "reduced_instruction_set"}, {"score": 0.013014855256672328, "phrase": "full_instruction_set"}, {"score": 0.00481495049065317, "phrase": "dual_instruction"}, {"score": 0.004793143777319357, "phrase": "set_processors"}, {"score": 0.004749824776508639, "phrase": "embedded_systems"}, {"score": 0.004417012437860011, "phrase": "limited_amount"}, {"score": 0.004377077848734575, "phrase": "available_memory"}, {"score": 0.004337502738649814, "phrase": "real-time_nature"}, {"score": 0.004240116703465252, "phrase": "dual_instruction_set_processor"}, {"score": 0.003503497128638099, "phrase": "smaller_instructions"}, {"score": 0.0033937776228549557, "phrase": "reduced_instruction"}, {"score": 0.0030847461428168614, "phrase": "code_generation_technique"}, {"score": 0.0030291453183733897, "phrase": "tradeoff_relationship"}, {"score": 0.002934237411711622, "phrase": "different_sections"}, {"score": 0.002855251306715901, "phrase": "proposed_technique"}, {"score": 0.00266693888510356, "phrase": "flexible_tradeoff"}, {"score": 0.0026307897899760383, "phrase": "program's_code_size"}, {"score": 0.002548331088496964, "phrase": "program_optimization"}, {"score": 0.0023372808856170386, "phrase": "application_program"}, {"score": 0.0022640009579466924, "phrase": "execution_performance"}, {"score": 0.0021731423856364003, "phrase": "system-wide_optimization"}, {"score": 0.002124247104243502, "phrase": "execution_speed"}, {"score": 0.0021049977753042253, "phrase": "multiple_applications"}], "paper_keywords": ["dual instruction set processors", " mixed-width instruction set architecture", " reduced bid-width instruction set architecture"], "paper_abstract": "Embedded systems are often constrained in terms of both code size and execution time, because of a limited amount of available memory and real-time nature of applications. A dual instruction set processor, which supports a reduced instruction set (16 bits/instruction), in addition to a full instruction set (32 bits/instruction), allows an opportunity for a tradeoff between these two design criteria. Specifically, while the reduced instruction set can be used to reduce code size by providing smaller instructions, a program compiled into the reduced instruction set typically runs slower than the same program compiled into the full instruction set. Motivated by this observation, we propose a code generation technique that exploits this tradeoff relationship by selectively using the two instruction sets for different sections in the program. The proposed technique, called selective code transformation, not only provides a mechanism to enable a flexible tradeoff between a program's code size and its execution time, but also facilitates program optimization toward enhancing its worst case performance. The results from our experiments show that our proposed technique can be effectively used to fine-tune an application program on a spectrum of code size and execution performance, which, in turn, enables a system-wide optimization on memory space and execution speed involving multiple applications.", "paper_title": "Selective code transformation for dual instruction set processors", "paper_id": "WOS:000256880400002"}