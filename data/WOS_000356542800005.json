{"auto_keywords": [{"score": 0.0491574796453447, "phrase": "visual_notations"}, {"score": 0.00481495049065317, "phrase": "reusable_visual_notations"}, {"score": 0.004768378525561471, "phrase": "model_transformation"}, {"score": 0.004653900688892822, "phrase": "key_aspect"}, {"score": 0.004608879242346434, "phrase": "visual_languages"}, {"score": 0.004498213310668266, "phrase": "direct_mapping"}, {"score": 0.00443308765153716, "phrase": "intended_information"}, {"score": 0.0043477114072437316, "phrase": "graphical_symbols"}, {"score": 0.004161553532799662, "phrase": "low_level_syntax"}, {"score": 0.004121275290411653, "phrase": "programming_languages"}, {"score": 0.00386876598761639, "phrase": "hardly_human-centric"}, {"score": 0.003721098220825489, "phrase": "alternative_approach"}, {"score": 0.003631671435460452, "phrase": "by-example_model_transformations"}, {"score": 0.003527181559366122, "phrase": "semantic_mapping"}, {"score": 0.003392507399258166, "phrase": "model_transformations"}, {"score": 0.0031536550157613974, "phrase": "input_data"}, {"score": 0.00303319936111073, "phrase": "different_visualizations"}, {"score": 0.002931569771634119, "phrase": "convert_framework"}, {"score": 0.002778682854371595, "phrase": "statistical_charts"}, {"score": 0.002725081358527507, "phrase": "traffic_data"}, {"score": 0.0026466064623118105, "phrase": "minard's_map_visualization's_components"}, {"score": 0.0025331002386232014, "phrase": "detailed_user_study"}, {"score": 0.0023091721866305426, "phrase": "user_study"}, {"score": 0.002264607102799332, "phrase": "novel_approach"}, {"score": 0.0021049977753042253, "phrase": "tool_support"}], "paper_keywords": ["Visualization", " visual notation", " by-example transformation", " notation composition"], "paper_abstract": "Visual notations are a key aspect of visual languages. They provide a direct mapping between the intended information and set of graphical symbols. Visual notations are most often implemented using the low level syntax of programming languages which is time consuming, error prone, difficult to maintain and hardly human-centric. In this paper we describe an alternative approach to generating visual notations using by-example model transformations. In our new approach, a semantic mapping between model and view is implemented using model transformations. The notations resulting from this approach can be reused by mapping varieties of input data to their model and can be composed into different visualizations. Our approach is implemented in the CONVErT framework and has been applied to many visualization examples. Three case studies for visualizing statistical charts, visualization of traffic data, and reuse of a Minard's map visualization's components, are presented in this paper. A detailed user study of our approach for reusing notations and generating visualizations has been provided. 80% of the participants in this user study agreed that the novel approach to visualization was easy and 87% stated that they quickly learned to use the tool support.", "paper_title": "Generating Reusable Visual Notations Using Model Transformation", "paper_id": "WOS:000356542800005"}