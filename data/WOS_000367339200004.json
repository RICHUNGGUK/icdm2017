{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "reactive_turing_machines"}, {"score": 0.038928562270111176, "phrase": "executable_behaviour"}, {"score": 0.004752221133109136, "phrase": "classical_turing_machines"}, {"score": 0.004568871736067739, "phrase": "observable_interactive_behaviour"}, {"score": 0.004421471944783611, "phrase": "behaviour_executable"}, {"score": 0.003980875186335867, "phrase": "reactive_turing_machine"}, {"score": 0.0022628564592874147, "phrase": "intuitive_understanding"}, {"score": 0.0021049977753042253, "phrase": "operational_semantics"}], "paper_keywords": [""], "paper_abstract": "Reactive Turing machines extend classical Turing machines with a facility to model observable interactive behaviour. We call a behaviour executable if, and only if, it is behaviourally equivalent to the behaviour of a reactive Turing machine. In this paper, we study the relationship between executable behaviour and behaviour that can be specified in the pi-calculus. We establish that all executable behaviour can be specified in the pi-calculus up to divergence-preserving branching bisimilarity. The converse, however, is not true due to (intended) limitations of the model of reactive Turing machines. That is, the pi-calculus allows the specification of behaviour that is not executable up to divergence-preserving branching bisimilarity. Motivated by an intuitive understanding of executability, we then consider a restriction on the operational semantics of the pi-calculus that does associate with every pi-term executable behaviour, at least up to the version of branching bisimilarity that does not require the preservation of divergence.", "paper_title": "Executable Behaviour and the pi-Calculus", "paper_id": "WOS:000367339200004"}