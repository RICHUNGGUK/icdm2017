{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallel_machine_scheduling"}, {"score": 0.004743164872278112, "phrase": "linear_deterioration"}, {"score": 0.00450020161335541, "phrase": "parallel_machine_scheduling_problem"}, {"score": 0.004366970206156021, "phrase": "fixed_processing_time_assumption"}, {"score": 0.004269630481719451, "phrase": "classical_scheduling"}, {"score": 0.004174451361776433, "phrase": "job's_processing_time"}, {"score": 0.004081385289516914, "phrase": "simple_linear_increasing_function"}, {"score": 0.0038721890530859578, "phrase": "makespan_minimization"}, {"score": 0.003591733916159209, "phrase": "arbitrary_number"}, {"score": 0.0035381202759091784, "phrase": "parallel_machines"}, {"score": 0.003407549468745519, "phrase": "list_rule"}, {"score": 0.003021141590548526, "phrase": "maximum_deteriorating_rate"}, {"score": 0.002502995662011305, "phrase": "minimum_deteriorating_rate"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Scheduling", " Parallel machine", " Simple linear deterioration", " Makespan", " Approximation algorithm"], "paper_abstract": "This paper deals with a parallel machine scheduling problem. Different from fixed processing time assumption in the classical scheduling, a job's processing time is a simple linear increasing function of its starting time. The aim is makespan minimization, and our focus is on the case with an arbitrary number of parallel machines. We prove that LIST rule is (1+b(max))(m-1/m)-approximation where m is the number of machines and b(max) is the maximum deteriorating rate of job. We then propose one heuristic LDR (Largest deteriorating Rate first). The heuristic is proved by (1 + b(min))(m-1/m)-approximation where b(min) is the minimum deteriorating rate. We further show that this ratio is tight when m = 2, 3 and 4. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Approximation algorithms for parallel machine scheduling with linear deterioration", "paper_id": "WOS:000323358200009"}