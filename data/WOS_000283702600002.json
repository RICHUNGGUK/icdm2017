{"auto_keywords": [{"score": 0.047383019958100334, "phrase": "edit_operations"}, {"score": 0.00481495049065317, "phrase": "known_algorithm"}, {"score": 0.00471465954562773, "phrase": "general_case"}, {"score": 0.004640808212832262, "phrase": "approximate_edit_distance_problem"}, {"score": 0.003383475802364289, "phrase": "edit_distance_problem"}, {"score": 0.0031594291695784286, "phrase": "amir_et_al"}, {"score": 0.0028734230458881903, "phrase": "exact_edit_distance_problem"}, {"score": 0.002613239644974825, "phrase": "approximate_edit_distance"}, {"score": 0.0022544399432457164, "phrase": "approximation_factor"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Pattern matching", " Swap", " Edit operations", " Mismatch"], "paper_abstract": "There is no known algorithm that solves the general case of the approximate edit distance problem, where the edit operations are insertion, deletion, mismatch, and swap, in time o(nm), where n is the length of the text and m is the length of the pattern. In the effort to study this problem, the edit operations have been analyzed independently. Karloff[10] showed an algorithm that approximates the edit distance problem with only the mismatch operation in time O(1/epsilon(2) n log(3) m). Amir et al. [4] showed that if the only edit operations allowed are swap and mismatch, then the exact edit distance problem can be solved in time O(n root m log m). In this paper, we discuss the problem of approximate edit distance with swap and mismatch. We show a randomized O(1/epsilon(3) n log n log(3) m) time algorithm for the problem. The algorithm guarantees an approximation factor of (1 + epsilon) with probability of at least 1 - 1/n. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "The approximate swap and mismatch edit distance", "paper_id": "WOS:000283702600002"}