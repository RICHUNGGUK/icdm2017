{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "code_smell_detection"}, {"score": 0.0047310525657970615, "phrase": "inter-smell_relations"}, {"score": 0.004371160978838441, "phrase": "numerous_set"}, {"score": 0.0035705347414368726, "phrase": "particular_elements"}, {"score": 0.003477505397536663, "phrase": "abstract_syntax_tree"}, {"score": 0.0024451427672857458, "phrase": "different_relations"}], "paper_keywords": ["refactoring", " bad code smells", " inter-smell relations"], "paper_abstract": "The variety of code smells deserves a numerous set of detectors capable of sensing them. There exist several sources of data that may be examined: code metrics, existence of particular elements in an abstract syntax tree, specific code behavior or subsequent changes in the code. Another factor that can be used for this purpose is the knowledge of other, already detected or rejected smells. In the paper we define and analyze different relations that exist among smells and provide tips how they could be exploited to alleviate detection of other smells.", "paper_title": "Leveraging code smell detection with inter-smell relations", "paper_id": "WOS:000239455200008"}