{"auto_keywords": [{"score": 0.032130598823801954, "phrase": "javascript"}, {"score": 0.004814974089662374, "phrase": "refactoring"}, {"score": 0.004592905436175987, "phrase": "popular_technique"}, {"score": 0.00443308765153716, "phrase": "existing_programs"}, {"score": 0.004278807087784626, "phrase": "statically_typed_programming_languages"}, {"score": 0.00420391531112717, "phrase": "java"}, {"score": 0.004129873531628877, "phrase": "wide_variety"}, {"score": 0.003939296259436904, "phrase": "tool_support"}, {"score": 0.0036914757355166966, "phrase": "modern_ides"}, {"score": 0.0036052633308076933, "phrase": "javascript_programming_language"}, {"score": 0.0035210572541244664, "phrase": "existing_refactoring_tools"}, {"score": 0.0033190180867511605, "phrase": "program_behavior"}, {"score": 0.0032414759269196493, "phrase": "refactoring_algorithms"}, {"score": 0.0031285355811105945, "phrase": "statically_typed_languages"}, {"score": 0.0028127163745564777, "phrase": "javascript_refactorings"}, {"score": 0.002763261749602258, "phrase": "pointer_analysis"}, {"score": 0.0026986685585382347, "phrase": "novel_refactorings"}, {"score": 0.002651213849567608, "phrase": "best_practice_recommendations"}, {"score": 0.002620040660435039, "phrase": "javascript_programming"}, {"score": 0.0023003498123420237, "phrase": "prototype_implementation"}, {"score": 0.002233301265743633, "phrase": "existing_applications"}, {"score": 0.0021049977753042253, "phrase": "practical_refactoring_tools"}], "paper_keywords": ["Languages"], "paper_abstract": "Refactoring is a popular technique for improving the structure of existing programs while maintaining their behavior. For statically typed programming languages such as Java, a wide variety of refactorings have been described, and tool support for performing refactorings and ensuring their correctness is widely available in modern IDEs. For the JavaScript programming language, however, existing refactoring tools are less mature and often unable to ensure that program behavior is preserved. Refactoring algorithms that have been developed for statically typed languages are not applicable to JavaScript because of its dynamic nature. We propose a framework for specifying and implementing JavaScript refactorings based on pointer analysis. We describe novel refactorings motivated by best practice recommendations for JavaScript programming, and demonstrate how they can be described concisely in terms of queries provided by our framework. Experiments performed with a prototype implementation on a suite of existing applications show that our approach is well-suited for developing practical refactoring tools for JavaScript.", "paper_title": "Tool-supported Refactoring for Java Script", "paper_id": "WOS:000298294500009"}