{"auto_keywords": [{"score": 0.03387648860751041, "phrase": "resm"}, {"score": 0.008304264859898035, "phrase": "stack_overflow"}, {"score": 0.0059546396795461904, "phrase": "saturated_condition"}, {"score": 0.00481495049065317, "phrase": "wireless_sensor_network_os"}, {"score": 0.004768649568826951, "phrase": "scarce_hardware_resources"}, {"score": 0.004632388761885302, "phrase": "low_power_consumption"}, {"score": 0.004587835274176236, "phrase": "low_cost"}, {"score": 0.004543708337879809, "phrase": "sensor_nodes"}, {"score": 0.004225950334493496, "phrase": "memory_management_unit"}, {"score": 0.0041051328120736575, "phrase": "memory_address_domain"}, {"score": 0.004046020290832207, "phrase": "small_data_memory_space"}, {"score": 0.003516558537200823, "phrase": "robust_and_efficient_stack_memory_management_method"}, {"score": 0.003350480663660326, "phrase": "preestimated_amount"}, {"score": 0.0033182152378613767, "phrase": "stack_memory"}, {"score": 0.003270396852243212, "phrase": "function_call"}, {"score": 0.003161474881435185, "phrase": "stack_memory_usage"}, {"score": 0.003115908199991072, "phrase": "similar_amount"}, {"score": 0.0030709962527878656, "phrase": "stack_usage"}, {"score": 0.0029400959763737364, "phrase": "stack_memory_area"}, {"score": 0.0026687841359431105, "phrase": "data_memory"}, {"score": 0.002592369213499121, "phrase": "memory_state"}, {"score": 0.002469830206270585, "phrase": "function_calls"}, {"score": 0.0023990982005125763, "phrase": "memory_fault"}, {"score": 0.0023530698447434308, "phrase": "proposed_function_call"}, {"score": 0.002285674008055581, "phrase": "analytical_and_experiment_results"}], "paper_keywords": [""], "paper_abstract": "Due to such requirements as low power consumption and low cost, sensor nodes commonly do not include advanced H/W features. The absence of the features such as the memory management unit enforces several tasks to share a memory address domain on a small data memory space (1 similar to 16 KB). It exposes each task to the stack overflow causing the corruption of other memory areas. In this paper, we propose a robust and efficient stack memory management method (RESM) that dynamically assigns and releases a preestimated amount of stack memory to each function call at runtime. RESM maintains the stack memory usage with the similar amount of the stack usage that the system actually requires, and the stack memory area of each task is individually protected from corruption by the stack overflow. RESM can also anticipate a saturated condition in data memory at runtime. When the memory state is unsafe from the saturated condition, it conditionally allows function calls to operate tasks without any memory fault by using the proposed function call deferring algorithm. From the analytical and experiment results, it is proven that the performance of RESM outperforms the other mechanisms and RESM can provide more robust stack operation environment.", "paper_title": "A Robust and Space-Efficient Stack Management Method for Wireless Sensor Network OS with Scarce Hardware Resources", "paper_id": "WOS:000313452500001"}