{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "local_search"}, {"score": 0.044665132823572554, "phrase": "incremental_algorithms"}, {"score": 0.004477083974172596, "phrase": "variable_conflicts"}, {"score": 0.004034962424068988, "phrase": "complicated_and_time-consuming_tasks"}, {"score": 0.003850464100878052, "phrase": "local-search_practitioner"}, {"score": 0.0037516215763875225, "phrase": "generic_scheme"}, {"score": 0.0035614563596982306, "phrase": "monadic_existential_second-order_logic"}, {"score": 0.003434085751246066, "phrase": "penalty_and_variable-conflict_measures"}, {"score": 0.0029530125680590413, "phrase": "maximum_penalty_decrease"}, {"score": 0.0026609940110902666, "phrase": "penalty_measure"}, {"score": 0.0025657442830956017, "phrase": "local_search_performance"}, {"score": 0.002372935208038141, "phrase": "built-in_global_constraint"}, {"score": 0.0022642601698943687, "phrase": "competitive_results"}], "paper_keywords": ["local search", " global constraint", " monadic existential second-order logic"], "paper_abstract": "When a new (global) constraint is introduced in local search, measures for the penalty and variable conflicts of that constraint must be defined, and incremental algorithms for maintaining these measures must be implemented. These are complicated and time-consuming tasks, which clearly reduces the productivity of the local-search practitioner. We introduce a generic scheme that, from a description of a constraint in monadic existential second-order logic extended with counting, automatically gives penalty and variable-conflict measures for such a constraint, as well as incremental algorithms for maintaining these measures. We prove that our variable-conflict measure for a variable x is lower-bounded by the maximum penalty decrease that may be achieved by only changing the value of x, as well as upper bounded by the penalty measure. Without these properties, the local search performance may degrade. We also demonstrate the usefulness of the approach by replacing a built-in global constraint by a modelled version, while still obtaining competitive results in terms of runtime and robustness. This is especially attractive when a particular (global) constraint is not built in.", "paper_title": "Generic incremental algorithms for local search", "paper_id": "WOS:000248055600003"}