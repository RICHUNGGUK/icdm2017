{"auto_keywords": [{"score": 0.04420965294367781, "phrase": "binary_pso"}, {"score": 0.015719716506582538, "phrase": "binary_particle_swarm_optimizer"}, {"score": 0.004579820386772797, "phrase": "pso"}, {"score": 0.004488946121663966, "phrase": "pseudo-boolean_functions"}, {"score": 0.004060986196931943, "phrase": "good_solutions"}, {"score": 0.00392100783796804, "phrase": "current_position"}, {"score": 0.0037480753312398754, "phrase": "velocity_vector"}, {"score": 0.003673675864705682, "phrase": "probabilistic_process"}, {"score": 0.00327356326590461, "phrase": "best_particle"}, {"score": 0.0030060256866508606, "phrase": "pseudo-boolean_function"}, {"score": 0.0029611289031152856, "phrase": "unique_optimum"}, {"score": 0.002902304851882577, "phrase": "upper_bounds"}, {"score": 0.0028446460307503343, "phrase": "fitness-level_argument"}, {"score": 0.0027464781499539296, "phrase": "evolutionary_algorithms"}, {"score": 0.0025730425700096365, "phrase": "expected_runtime"}, {"score": 0.002509284173541882, "phrase": "unimodal_functions"}, {"score": 0.0024717881264735477, "phrase": "simple_variant"}, {"score": 0.0023507916951658455, "phrase": "test_function"}, {"score": 0.0023390243720570157, "phrase": "onemax"}, {"score": 0.0021912600076114033, "phrase": "additional_experimental_comparison"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Particle swarm optimization", " Runtime analysis"], "paper_abstract": "We investigate the runtime of a binary Particle Swarm Optimizer (PSO) for optimizing pseudo-Boolean functions f : {0, 1}(n) -> R. The binary PSO maintains a swarm of particles searching for good solutions. Each particle consists of a current position from 10, 11, its own best position and a velocity vector used in a probabilistic process to update its current position. The velocities for a particle are then updated in the direction of its own best position and the position of the best particle in the swarm. We present a lower bound for the time needed to optimize any pseudo-Boolean function with a unique optimum. To prove upper bounds we transfer a fitness-level argument that is well-established for evolutionary algorithms (EAs) to PSO. This method is applied to estimate the expected runtime for the class of unimodal functions. A simple variant of the binary PSO is considered in more detail for the test function ONEMAX, showing that there the binary PSO is competitive to EAs. An additional experimental comparison reveals further insights. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Runtime analysis of a binary particle swarm optimizer", "paper_id": "WOS:000277895000003"}