{"auto_keywords": [{"score": 0.0484095912897003, "phrase": "ncq"}, {"score": 0.014219016615622176, "phrase": "disk_drive"}, {"score": 0.008768648426804006, "phrase": "expectation_discord"}, {"score": 0.004742290714667451, "phrase": "unexpected_misbehaviors"}, {"score": 0.00469445816161498, "phrase": "native_command_queueing"}, {"score": 0.004553822674247401, "phrase": "optimization_technology"}, {"score": 0.003971111060168551, "phrase": "great_majority"}, {"score": 0.0039310261964323545, "phrase": "disk_vendors"}, {"score": 0.003551694229680741, "phrase": "information_gap"}, {"score": 0.002840708910768261, "phrase": "specific_knowledge"}, {"score": 0.0027554538693034163, "phrase": "disk_mechanism"}, {"score": 0.0026057256900479026, "phrase": "serious_problems"}, {"score": 0.0025663181430010686, "phrase": "request_starvations"}, {"score": 0.002540377258232509, "phrase": "performance_anomaly"}, {"score": 0.002342048999008582, "phrase": "real_systems"}, {"score": 0.002271725588755076, "phrase": "software-level_approaches"}, {"score": 0.0021373366163721518, "phrase": "experimental_results"}], "paper_keywords": ["Measurement", " Performance", " NCQ", " SATA 2", " hybrid scheduling", " starvation detection", " I/O prioritization"], "paper_abstract": "Native Command Queueing (NCQ) is an optimization technology to maximize throughput by reordering requests inside a disk drive. It has been so successful that NCQ has become the standard in SATA 2 protocol specification, and the great majority of disk vendors have adopted it for their recent disks. However, there is a possibility that the technology may lead to an information gap between the OS and a disk drive. A NCQ-enabled disk tries to optimize throughput without realizing the intention of an OS, whereas the OS does its best under the assumption that the disk will do as it is told without specific knowledge regarding the details of the disk mechanism. Let us call this expectation discord, which may cause serious problems such as request starvations or performance anomaly. In this article, we (1) confirm that expectation discord actually occurs in real systems; (2) propose software-level approaches to solve them; and (3) evaluate our mechanism. Experimental results show that our solution is simple, cheap (no special hardware required), portable, and effective.", "paper_title": "NCQ vs. I/O Scheduler: Preventing Unexpected Misbehaviors", "paper_id": "WOS:000208424200002"}