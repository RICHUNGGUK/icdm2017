{"auto_keywords": [{"score": 0.0480952289769915, "phrase": "sqli"}, {"score": 0.047058967819338236, "phrase": "xss"}, {"score": 0.04166160644255234, "phrase": "static_code"}, {"score": 0.030983264510489356, "phrase": "sqli_and_xss_vulnerabilities"}, {"score": 0.00481495049065317, "phrase": "sql_injection"}, {"score": 0.004783730450730986, "phrase": "cross_site"}, {"score": 0.004721893473387288, "phrase": "mining_input_sanitization_patterns"}, {"score": 0.004241178291414502, "phrase": "static_and_dynamic_taint_analysis_techniques"}, {"score": 0.004039094712469991, "phrase": "machine_learning_techniques"}, {"score": 0.00392247796545626, "phrase": "code_complexity_measures"}, {"score": 0.00389702203873437, "phrase": "cheap_and_useful_predictors"}, {"score": 0.0038466028116681023, "phrase": "current_prediction"}, {"score": 0.0038216374069880038, "phrase": "target_general_vulnerabilities"}, {"score": 0.0037233796053514918, "phrase": "vulnerable_code"}, {"score": 0.0036871853429163953, "phrase": "software_component"}, {"score": 0.0035806923950599005, "phrase": "process_attributes"}, {"score": 0.003376813851525222, "phrase": "complementary_solution"}, {"score": 0.0033548872248104814, "phrase": "existing_taint_analyzers"}, {"score": 0.003226275635740122, "phrase": "specific_program_statements"}, {"score": 0.0031845067058084583, "phrase": "software_components"}, {"score": 0.00307240091019322, "phrase": "xss._method"}, {"score": 0.003012919635505122, "phrase": "input_sanitization_code"}, {"score": 0.0029545864975783023, "phrase": "web_applications"}, {"score": 0.0027412207934201013, "phrase": "vulnerability_prediction_models"}, {"score": 0.0027145478956494356, "phrase": "historical_information"}, {"score": 0.002679386232765167, "phrase": "static_attributes"}, {"score": 0.0026619761089539595, "phrase": "known_vulnerability_data"}, {"score": 0.002576603426735759, "phrase": "prototype_tool"}, {"score": 0.002543224008253855, "phrase": "data_collection"}, {"score": 0.002477753633057247, "phrase": "eight_open_source_web_applications"}, {"score": 0.00242184774931214, "phrase": "averaged_result"}, {"score": 0.0023672002840029517, "phrase": "sqli_vulnerabilities"}, {"score": 0.0022763657774198184, "phrase": "xss_vulnerabilities"}, {"score": 0.002239552244442444, "phrase": "experiment_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Vulnerability prediction", " Data mining", " Web application vulnerability", " Input sanitization", " Static code attributes", " Empirical study"], "paper_abstract": "Context: SQL injection (SQLI) and cross site scripting (XSS) are the two most common and serious web application vulnerabilities for the past decade. To mitigate these two security threats, many vulnerability detection approaches based on static and dynamic taint analysis techniques have been proposed. Alternatively, there are also vulnerability prediction approaches based on machine learning techniques, which showed that static code attributes such as code complexity measures are cheap and useful predictors. However, current prediction approaches target general vulnerabilities. And most of these approaches locate vulnerable code only at software component or file levels. Some approaches also involve process attributes that are often difficult to measure. Objective: This paper aims to provide an alternative or complementary solution to existing taint analyzers by proposing static code attributes that can be used to predict specific program statements, rather than software components, which are likely to be vulnerable to SQLI or XSS. Method: From the observations of input sanitization code that are commonly implemented in web applications to avoid SQLI and XSS vulnerabilities, in this paper, we propose a set of static code attributes that characterize such code patterns. We then build vulnerability prediction models from the historical information that reflect proposed static attributes and known vulnerability data to predict SQLI and XSS vulnerabilities. Results: We developed a prototype tool called PhpMinerI for data collection and used it to evaluate our models on eight open source web applications. Our best model achieved an averaged result of 93% recall and 11% false alarm rate in predicting SQLI vulnerabilities, and 78% recall and 6% false alarm rate in predicting XSS vulnerabilities. Conclusion: The experiment results show that our proposed vulnerability predictors are useful and effective at predicting SQLI and XSS vulnerabilities. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Predicting SQL injection and cross site scripting vulnerabilities through mining input sanitization patterns", "paper_id": "WOS:000323298000007"}