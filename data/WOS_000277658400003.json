{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "type_equality"}, {"score": 0.004692227830462433, "phrase": "frequent_ingredient"}, {"score": 0.004612147352416241, "phrase": "modern_functional_programming"}, {"score": 0.004417848254181138, "phrase": "generic_functions"}, {"score": 0.004342430078306461, "phrase": "dynamic_types"}, {"score": 0.003816197777388722, "phrase": "ordinary_types"}, {"score": 0.0037188360359702182, "phrase": "proof_terms"}, {"score": 0.003592859432554987, "phrase": "runtime_type_representations"}, {"score": 0.003296212583539166, "phrase": "type_equality_propositions"}, {"score": 0.0024799423362011582, "phrase": "strongly_normalizing_language"}, {"score": 0.0024375256324510267, "phrase": "higher-order_polymorphism"}, {"score": 0.0023346234464901978, "phrase": "runtime-type_representations"}, {"score": 0.0022749744354271816, "phrase": "reynolds's_abstraction_theorem"}, {"score": 0.0021049977753042253, "phrase": "\"free\"_theorems"}], "paper_keywords": [""], "paper_abstract": "Propositions that express type equality are a frequent ingredient of modern functional programming - they can encode generic functions, dynamic types, and GADTs. Via the Curry-Howard correspondence, these propositions are ordinary types inhabited by proof terms, computed using runtime type representations. In this paper we show that two examples of type equality propositions actually do reflect type equality; they are only inhabited when their arguments are equal and their proofs are unique (up to equivalence.) We show this result in the context of a strongly normalizing language with higher-order polymorphism and primitive recursion over runtime-type representations by proving Reynolds's abstraction theorem. We then use this theorem to derive \"free\" theorems about equality types.", "paper_title": "Parametricity, type equality, and higher-order polymorphism", "paper_id": "WOS:000277658400003"}