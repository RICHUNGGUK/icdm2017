{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "enterprise_model"}, {"score": 0.04949240338189186, "phrase": "use_case_model"}, {"score": 0.047026895004119516, "phrase": "stakeholder_requirements"}, {"score": 0.01402713668297467, "phrase": "enterprise_context"}, {"score": 0.00471700544744796, "phrase": "business_process_systems"}, {"score": 0.004583205112737672, "phrase": "requirements_engineering"}, {"score": 0.004471530397729526, "phrase": "system_and_software_requirements"}, {"score": 0.004416713079266374, "phrase": "enterprise_systems"}, {"score": 0.003746673633703251, "phrase": "model-driven_engineering_concepts"}, {"score": 0.0036553070575015344, "phrase": "semi-automatic_transformation"}, {"score": 0.003352658916650986, "phrase": "domain_knowledge"}, {"score": 0.003244050414264445, "phrase": "software_requirements_model"}, {"score": 0.0030623570435946977, "phrase": "transformation_rules"}, {"score": 0.0028553159147435424, "phrase": "proposed_transformation"}, {"score": 0.002575934917174136, "phrase": "requirements_refinement"}, {"score": 0.0023430556582539805, "phrase": "generated_use_cases"}, {"score": 0.002295277579105177, "phrase": "empirical_analysis"}, {"score": 0.0021755548389283856, "phrase": "qualitative_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Stakeholder requirement", " Transformation", " Use case"], "paper_abstract": "One of the responsibilities of requirements engineering is to transform stakeholder requirements into system and software requirements. For enterprise systems, this transformation must consider the enterprise context where the system will be deployed. Although there are some approaches for detailing stakeholder requirements, some of them even considering the enterprise context, this task is executed manually. Based on model-driven engineering concepts, this study proposes a semi-automatic transformation from an enterprise model to a use case model. The enterprise model is used as a source of information about the stakeholder requirements and domain knowledge, while the use case model is used as software requirements model. This study presents the source and target metamodels, a set of transformation rules, and a tool to support the transformation. An experiment analyzes the use of the proposed transformation to investigate its benefits and if it can be used in practice, from the point of view of students in the context of a requirements refinement. The results indicate that the approach can be used in practice, as it did not influence the quality of the generated use cases. However, the empirical analysis does not indicate benefits of using the transformation, even if the qualitative results were positive. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Transforming an enterprise model into a use case model in business process systems", "paper_id": "WOS:000341902600011"}