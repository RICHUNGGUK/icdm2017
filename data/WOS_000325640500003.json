{"auto_keywords": [{"score": 0.037495295568870386, "phrase": "vmst"}, {"score": 0.02322730111336097, "phrase": "semantic_gap"}, {"score": 0.010535188998535923, "phrase": "virtual_machine_introspection"}, {"score": 0.004744748477093856, "phrase": "online_kernel_data_redirection"}, {"score": 0.004473982381245469, "phrase": "error-prone_process"}, {"score": 0.004051501401100304, "phrase": "executed_code"}, {"score": 0.004007083686875716, "phrase": "trusted_os_kernel"}, {"score": 0.0038061298318563925, "phrase": "exercised_code"}, {"score": 0.0037643920253363776, "phrase": "training_process"}, {"score": 0.0036958398682001015, "phrase": "code_coverage_issues"}, {"score": 0.0033712944392793195, "phrase": "vmi_tools"}, {"score": 0.003334309053314909, "phrase": "key_idea"}, {"score": 0.003030247482854539, "phrase": "data_accesses"}, {"score": 0.002996992362027833, "phrase": "kernel_memory"}, {"score": 0.002846549461929597, "phrase": "new_features"}, {"score": 0.0027437235598539904, "phrase": "-vm_inspection_program"}, {"score": 0.0026155681847364483, "phrase": "-vm_introspection_program"}, {"score": 0.0024842242921857705, "phrase": "different_os_kernels"}, {"score": 0.002466024454123676, "phrase": "linux"}, {"score": 0.002447930049705642, "phrase": "microsoft"}, {"score": 0.002438986725712945, "phrase": "windows"}, {"score": 0.00241214634516517, "phrase": "experimental_results"}, {"score": 0.0022575078732617678, "phrase": "linux_utilities"}, {"score": 0.002224510044064184, "phrase": "windows_utilities"}, {"score": 0.002183938718432764, "phrase": "introspected_program"}, {"score": 0.0021049977753042253, "phrase": "data_redirection"}], "paper_keywords": ["Security", " Management"], "paper_abstract": "It is generally believed to be a tedious, time-consuming, and error-prone process to develop a virtual machine introspection (VMI) tool because of the semantic gap. Recent advance shows that the semantic-gap can be largely narrowed by reusing the executed code from a trusted OS kernel. However, the limitation for such an approach is that it only reuses the exercised code through a training process, which suffers the code coverage issues. Thus, in this article, we present VMST, a new technique that can seamlessly bridge the semantic gap and automatically generate the VMI tools. The key idea is that, through system wide instruction monitoring, VMST automatically identifies the introspection related data from a secure-VM and online redirects these data accesses to the kernel memory of a product-VM, without any training. VMST offers a number of new features and capabilities. Particularly, it enables an in-VM inspection program (e. g., ps) to automatically become an out-of-VM introspection program. We have tested VMST with over 25 commonly used utilities on top of a number of different OS kernels including Linux and Microsoft Windows. The experimental results show that our technique is general (largely OS-independent), and it introduces 9.3X overhead for Linux utilities and 19.6X overhead for Windows utilities on average for the introspected program compared to the native in-VM execution without data redirection.", "paper_title": "Bridging the Semantic Gap in Virtual Machine Introspection via Online Kernel Data Redirection", "paper_id": "WOS:000325640500003"}