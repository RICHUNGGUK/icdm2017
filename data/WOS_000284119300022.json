{"auto_keywords": [{"score": 0.04669299523622421, "phrase": "mc"}, {"score": 0.04440759553131084, "phrase": "gpu"}, {"score": 0.03556263565576142, "phrase": "dual_contouring"}, {"score": 0.00481495049065317, "phrase": "gpu._interactive_isosurface_extraction"}, {"score": 0.004666228956744244, "phrase": "successful_efforts"}, {"score": 0.004522080178250592, "phrase": "marching_cubes"}, {"score": 0.004405348628112645, "phrase": "marching_tetrahedra"}, {"score": 0.004291617358806677, "phrase": "modern_graphics_processing_unit"}, {"score": 0.0036680857629458816, "phrase": "discrete_case_tables"}, {"score": 0.0032861588691414667, "phrase": "macet"}, {"score": 0.003251920460276645, "phrase": "extraction_algorithms"}, {"score": 0.0028527866590859967, "phrase": "gpu_modules"}, {"score": 0.0027936239349923464, "phrase": "original_marching_cubes_algorithm"}, {"score": 0.0027356847952125433, "phrase": "marching_methods"}, {"score": 0.002637160140011997, "phrase": "case_table"}, {"score": 0.002399760112755228, "phrase": "efficient_contouring_algorithms"}], "paper_keywords": ["isosurfacing", " marching cubes", " GPU"], "paper_abstract": "Interactive isosurface extraction has recently become possible through successful efforts to map algorithms such as Marching Cubes (MC) and Marching Tetrahedra (MT) to modern Graphics Processing Unit (GPU) architectures. Other isosurfacing algorithms, however, are not so easily portable to GPUs, either because they involve more complex operations or because they are not based on discrete case tables, as is the case with most marching techniques. In this paper, we revisit the Dual Contouring (MC) and Macet isosurface extraction algorithms and propose, respectively: (i) a novel, efficient and parallelizable version of Dual Contouring and (ii) a set of GPU modules which extend the original Marching Cubes algorithm. Similar to marching methods, our novel technique is based on a case table, which allows for a very efficient GPU implementation. In addition, we enumerate and evaluate several alternatives to implement efficient contouring algorithms on the GPU, and present trade-offs among all approaches. Finally, we validate the efficiency and quality of the tessellations produced in all these alternatives.", "paper_title": "Efficient and Quality Contouring Algorithms on the GPU", "paper_id": "WOS:000284119300022"}