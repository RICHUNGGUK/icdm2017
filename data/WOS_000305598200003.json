{"auto_keywords": [{"score": 0.03088346055471285, "phrase": "sat."}, {"score": 0.00481495049065317, "phrase": "computing_answer_sets"}, {"score": 0.0047310525657970615, "phrase": "logic_programs"}, {"score": 0.003968112038249246, "phrase": "answer_set_programming"}, {"score": 0.0037973594873521596, "phrase": "unit_propagation"}, {"score": 0.0035082436540296406, "phrase": "uniform_constraint-based_framework"}, {"score": 0.00304737045343781, "phrase": "advanced_solving_techniques"}, {"score": 0.002717750004930131, "phrase": "first_full-fledged_algorithmic_framework"}, {"score": 0.002670296619878048, "phrase": "native_conflict-driven_asp"}, {"score": 0.0024667783849055634, "phrase": "asp_solver"}, {"score": 0.002258745901862197, "phrase": "first_places"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Answer set programming", " Logic programming", " Nonmonotonic reasoning"], "paper_abstract": "We introduce an approach to computing answer sets of logic programs, based on concepts successfully applied in Satisfiability (SAT) checking. The idea is to view inferences in Answer Set Programming (ASP) as unit propagation on nogoods. This provides us with a uniform constraint-based framework capturing diverse inferences encountered in ASP solving. Moreover, our approach allows us to apply advanced solving techniques from the area of SAT. As a result, we present the first full-fledged algorithmic framework for native conflict-driven ASP solving. Our approach is implemented in the ASP solver clasp that has demonstrated its competitiveness and versatility by winning first places at various solver contests. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Conflict-driven answer set solving: From theory to practice", "paper_id": "WOS:000305598200003"}