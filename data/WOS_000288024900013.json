{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "software_defect_detection"}, {"score": 0.014173941118319863, "phrase": "software_system"}, {"score": 0.009404293552478403, "phrase": "rocus"}, {"score": 0.004593591780245872, "phrase": "defective_software_modules"}, {"score": 0.004545793387330536, "phrase": "efficient_software_test"}, {"score": 0.0036489343475053187, "phrase": "large_amount"}, {"score": 0.003610929883213109, "phrase": "labeled_training_data"}, {"score": 0.0035361001070845677, "phrase": "well-performing_model"}, {"score": 0.003320756562046789, "phrase": "defect-free_modules"}, {"score": 0.0031348622158167195, "phrase": "imbalanced_data"}, {"score": 0.002897977113538355, "phrase": "novel_semi-supervised_learning_approach"}, {"score": 0.0027790254309734428, "phrase": "abundant_unlabeled_examples"}, {"score": 0.002721388234661538, "phrase": "detection_accuracy"}, {"score": 0.00256895975568914, "phrase": "class-imbalance_problem"}, {"score": 0.0025288869172313674, "phrase": "learning_process"}, {"score": 0.0025025186963415, "phrase": "experimental_results"}, {"score": 0.002476424729269258, "phrase": "real-world_software_defect_detection_tasks"}, {"score": 0.002301211274459965, "phrase": "semi-supervised_learning_method"}, {"score": 0.002253461585851626, "phrase": "class-imbalance_nature"}, {"score": 0.002183684303511462, "phrase": "class-imbalance_learning_method"}, {"score": 0.002127186380459509, "phrase": "effective_use"}, {"score": 0.0021049977753042253, "phrase": "unlabeled_data"}], "paper_keywords": ["machine learning", " data mining", " semi-supervised learning", " class-imbalance", " software defect detection"], "paper_abstract": "Software defect detection aims to automatically identify defective software modules for efficient software test in order to improve the quality of a software system. Although many machine learning methods have been successfully applied to the task, most of them fail to consider two practical yet important issues in software defect detection. First, it is rather difficult to collect a large amount of labeled training data for learning a well-performing model; second, in a software system there are usually much fewer defective modules than defect-free modules, so learning would have to be conducted over an imbalanced data set. In this paper, we address these two practical issues simultaneously by proposing a novel semi-supervised learning approach named Rocus. This method exploits the abundant unlabeled examples to improve the detection accuracy, as well as employs under-sampling to tackle the class-imbalance problem in the learning process. Experimental results of real-world software defect detection tasks show that Rocus is effective for software defect detection. Its performance is better than a semi-supervised learning method that ignores the class-imbalance nature of the task and a class-imbalance learning method that does not make effective use of unlabeled data.", "paper_title": "Software Defect Detection with Rocus", "paper_id": "WOS:000288024900013"}