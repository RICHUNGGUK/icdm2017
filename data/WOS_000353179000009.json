{"auto_keywords": [{"score": 0.04148383501073606, "phrase": "mdd"}, {"score": 0.00481495049065317, "phrase": "model-driven_development_claims"}, {"score": 0.0043404186974790706, "phrase": "conceptual_models"}, {"score": 0.004136221184894985, "phrase": "transformation_rules"}, {"score": 0.0037700424606538856, "phrase": "experimental_investigation"}, {"score": 0.0036462799422150834, "phrase": "mdd._method"}, {"score": 0.003539671663910004, "phrase": "small_set"}, {"score": 0.0034875380341306468, "phrase": "student_subjects"}, {"score": 0.003335683866508191, "phrase": "traditional_development"}, {"score": 0.003311023774690353, "phrase": "mdd."}, {"score": 0.00328654473734697, "phrase": "experiment_participants"}, {"score": 0.0030628094110419697, "phrase": "industrial_mdd_tool"}, {"score": 0.0029732094730218488, "phrase": "conceptual_model"}, {"score": 0.0028648759706752162, "phrase": "significant_differences"}, {"score": 0.002650018880406324, "phrase": "small_variations"}, {"score": 0.002630414143385786, "phrase": "problem_complexity"}, {"score": 0.0025916375737852506, "phrase": "possible_explanations"}, {"score": 0.0025157865918985682, "phrase": "small_systems"}, {"score": 0.0024330980793680337, "phrase": "better_results"}, {"score": 0.002406142201243732, "phrase": "traditional_method"}, {"score": 0.002309828105129336, "phrase": "previous_statements"}, {"score": 0.0022927343007881846, "phrase": "mdd_advantages"}, {"score": 0.002152440300818582, "phrase": "development_context"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Automatic programming", " Methodologies", " Programming paradigms", " Quality analysis and evaluation"], "paper_abstract": "Context: Model-Driven Development (MDD) is a paradigm that prescribes building conceptual models that abstractly represent the system and generating code from these models through transformation rules. The literature is rife with claims about the benefits of MDD, but they are hardly supported by evidences. Objective: This experimental investigation aims to verify some of the most cited benefits of MDD. Method: We run an experiment on a small set of classes using student subjects to compare the quality, effort, productivity and satisfaction of traditional development and MDD. The experiment participants built two web applications from scratch, one where the developers implement the code by hand and another using an industrial MDD tool that automatically generates the code from a conceptual model. Results: Outcomes show that there are no significant differences between both methods with regard to effort, productivity and satisfaction, although quality in MDD is more robust to small variations in problem complexity. We discuss possible explanations for these results. Conclusions: For small systems and less programming-experienced subjects, MDD does not always yield better results than a traditional method, even regarding effort and productivity. This contradicts some previous statements about MDD advantages. The benefits of developing a system with MDD appear to depend on certain characteristics of the development context. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "In search of evidence for model-driven development claims: An experiment on quality, effort, productivity and satisfaction", "paper_id": "WOS:000353179000009"}