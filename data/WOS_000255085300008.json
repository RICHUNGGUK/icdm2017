{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallel_and_sequential_evolutionary_algorithms"}, {"score": 0.004460703838987562, "phrase": "sequential_evolutionary_algorithms"}, {"score": 0.004334657104697421, "phrase": "automatic_test_data_generation_problem"}, {"score": 0.004112711391952791, "phrase": "input_data"}, {"score": 0.003939565240409143, "phrase": "fundamental_step"}, {"score": 0.003902085339580381, "phrase": "software_development"}, {"score": 0.0038465304237380125, "phrase": "time_consuming_task"}, {"score": 0.003809932244103758, "phrase": "existing_software_companies"}, {"score": 0.003773680962197766, "phrase": "canonical_sequential_eas"}, {"score": 0.0034790978593553794, "phrase": "parallel_eas"}, {"score": 0.003413183361838603, "phrase": "greater_efficiency"}, {"score": 0.0033806943112103397, "phrase": "larger_diversity_maintenance"}, {"score": 0.003348513474852869, "phrase": "additional_availability"}, {"score": 0.0032074366230426727, "phrase": "parallel_approach"}, {"score": 0.00290087451159631, "phrase": "genetic_algorithms"}, {"score": 0.00283229915062791, "phrase": "evolutionary_strategies"}, {"score": 0.002739001004969201, "phrase": "software_testing"}, {"score": 0.0025737890313763407, "phrase": "decentralized_populations"}, {"score": 0.002372649454733251, "phrase": "proposed_test_data_generator"}, {"score": 0.0022509365210787993, "phrase": "large_benchmark"}, {"score": 0.0022188370388602813, "phrase": "twelve_programs"}, {"score": 0.002187194307878705, "phrase": "fundamental_algorithms"}, {"score": 0.002166349705365602, "phrase": "computer_science"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["software testing", " evolutionary algorithins", " evolutionary testing", " parallel evolutionary algorithms"], "paper_abstract": "In this paper we analyze the application of parallel and sequential evolutionary algorithms (EAs) to the automatic test data generation problem. The problem consists of automatically creating a set of input data to test a program. This is a fundamental step in software development and a time consuming task in existing software companies. Canonical sequential EAs have been used in the past for this task. We explore here the use of parallel EAs. Evidence of greater efficiency, larger diversity maintenance, additional availability of memory/CPU, and multi-solution capabilities of the parallel approach, reinforce the importance of the advances in research with these algorithms. We describe in this work how canonical genetic algorithms (GAs) and evolutionary strategies (ESs) can help in software testing, and what the advantages are (if any) of using decentralized populations in these techniques. In addition, we study the influence of some parameters of the proposed test data generator in the results. For the experiments we use a large benchmark composed of twelve programs that includes fundamental algorithms in computer science. (C) 2007 Elsevier Ltd. All rights reserved.", "paper_title": "Observations in using parallel and sequential evolutionary algorithms for automatic software testing", "paper_id": "WOS:000255085300008"}