{"auto_keywords": [{"score": 0.031185443736095782, "phrase": "java"}, {"score": 0.0061314477180997905, "phrase": "api"}, {"score": 0.00481495049065317, "phrase": "rule_inference"}, {"score": 0.0044435677598780796, "phrase": "program_changes"}, {"score": 0.004299064805926241, "phrase": "significant_gap"}, {"score": 0.004120130206000757, "phrase": "existing_program_differencing_tools"}, {"score": 0.0038746849003761024, "phrase": "locking_protocol"}, {"score": 0.0037309384824565695, "phrase": "code_level"}, {"score": 0.0036958398682001015, "phrase": "diff_extracts"}, {"score": 0.0036610702290043387, "phrase": "text_additions"}, {"score": 0.003459191419478298, "phrase": "program_differences"}, {"score": 0.003410479630045025, "phrase": "high_level"}, {"score": 0.0033150974333333214, "phrase": "rule-based_program_differencing_approach"}, {"score": 0.0032223742018434856, "phrase": "systematic_changes"}, {"score": 0.0031920445513574907, "phrase": "logic_rules"}, {"score": 0.0028495431343111897, "phrase": "application_programming_interface"}, {"score": 0.00266693888510356, "phrase": "code_elements"}, {"score": 0.002155412043665635, "phrase": "focus_group_study"}, {"score": 0.0021351033500114735, "phrase": "professional_software_engineers"}, {"score": 0.0021049977753042253, "phrase": "large_e-commerce_company"}], "paper_keywords": ["Software evolution", " program differencing", " rule learning", " logic-based program representation"], "paper_abstract": "Programmers often need to reason about how a program evolved between two or more program versions. Reasoning about program changes is challenging as there is a significant gap between how programmers think about changes and how existing program differencing tools represent such changes. For example, even though modification of a locking protocol is conceptually simple and systematic at a code level, diff extracts scattered text additions and deletions per file. To enable programmers to reason about program differences at a high level, this paper proposes a rule-based program differencing approach that automatically discovers and represents systematic changes as logic rules. To demonstrate the viability of this approach, we instantiated this approach at two different abstraction levels in Java: first at the level of application programming interface (API) names and signatures, and second at the level of code elements (e.g., types, methods, and fields) and structural dependences (e.g., method-calls, field-accesses, and subtyping relationships). The benefit of this approach is demonstrated through its application to several open source projects as well as a focus group study with professional software engineers from a large e-commerce company.", "paper_title": "Identifying and Summarizing Systematic Code Changes via Rule Inference", "paper_id": "WOS:000312996800003"}