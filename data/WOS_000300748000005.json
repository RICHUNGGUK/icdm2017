{"auto_keywords": [{"score": 0.03306344524372762, "phrase": "blite"}, {"score": 0.015176722942284884, "phrase": "ws-bpel"}, {"score": 0.00934396630541433, "phrase": "ws-bpel."}, {"score": 0.00481495049065317, "phrase": "formal_methods"}, {"score": 0.004751216062917875, "phrase": "ws-bpel_applications"}, {"score": 0.004565007074039171, "phrase": "de_facto_standard_language"}, {"score": 0.00446471538346719, "phrase": "web_services"}, {"score": 0.004308791766002289, "phrase": "well-known_difficulties"}, {"score": 0.003977505904363489, "phrase": "major_loose_points"}, {"score": 0.0039248128268720645, "phrase": "ws-bpel_specification"}, {"score": 0.0035118972210075633, "phrase": "freely_available_ws-bpel_engines"}, {"score": 0.003329368827624161, "phrase": "different_semantics"}, {"score": 0.0032272929113113203, "phrase": "ws-bpel_programs"}, {"score": 0.003198705576491802, "phrase": "different_platforms"}, {"score": 0.003005539334280134, "phrase": "formal_operational_semantics"}, {"score": 0.0027373807320805084, "phrase": "ws-bpel's_distinctive_features"}, {"score": 0.0027010719929751, "phrase": "partner_links"}, {"score": 0.0026771333996253783, "phrase": "process_termination"}, {"score": 0.0026534064006291853, "phrase": "message_correlation"}, {"score": 0.002629889135655667, "phrase": "long-running_business_transactions"}, {"score": 0.002515384834484012, "phrase": "blitec"}, {"score": 0.002438203996977464, "phrase": "rapid_and_easy_development"}, {"score": 0.002352886041381761, "phrase": "service_orchestrations"}, {"score": 0.0023010815714140467, "phrase": "executable_ws-bpel_programs"}, {"score": 0.00221068461235127, "phrase": "running_example"}, {"score": 0.0021716540012278744, "phrase": "official_specification"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Service-oriented architectures", " Web services", " Formal methods", " WS-BPEL", " Operational semantics", " Compilers"], "paper_abstract": "In recent years, WS-BPEL has become a de facto standard language for the orchestration of Web services. However, there are still some well-known difficulties that make programming in WS-BPEL a tricky task. In this paper, we first point out major loose points of the WS-BPEL specification by means of many examples, some of which are also exploited to test and compare the behaviour of three of the best-known freely available WS-BPEL engines. We show that, in fact, these engines implement different semantics, which undermines the portability of WS-BPEL programs over different platforms. Then we introduce Blite, a prototypical orchestration language equipped with a formal operational semantics, which is closely inspired by, but simpler than, WS-BPEL. Indeed, Blite is designed around some of WS-BPEL's distinctive features such as partner links, process termination, message correlation, long-running business transactions, and compensation handlers. Finally, we present BliteC, a software tool supporting a rapid and easy development of WS-BPEL applications via the translation of service orchestrations written in Blite into executable WS-BPEL programs. We illustrate our approach by means of a running example borrowed from the official specification of WS-BPEL. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Using formal methods to develop WS-BPEL applications", "paper_id": "WOS:000300748000005"}