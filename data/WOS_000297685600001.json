{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "nested_trees"}, {"score": 0.04840453847330731, "phrase": "temporal_logics"}, {"score": 0.015601592788654542, "phrase": "model_checking"}, {"score": 0.015523329397504055, "phrase": "pushdown_systems"}, {"score": 0.015252438633068122, "phrase": "software_verification"}, {"score": 0.00794968121988407, "phrase": "parity_automata"}, {"score": 0.004694092086199672, "phrase": "established_technique"}, {"score": 0.004175899531189585, "phrase": "finite-state_world"}, {"score": 0.00410220263036908, "phrase": "symbolic_model-checking_algorithm"}, {"score": 0.0040503563829760725, "phrase": "\"assembly_language"}, {"score": 0.003928572641266562, "phrase": "common_formalism"}, {"score": 0.003810436612218635, "phrase": "model-check_requirements"}, {"score": 0.0036958398682001015, "phrase": "new_theory"}, {"score": 0.0035755653799043, "phrase": "unified_foundation"}, {"score": 0.003503497128638102, "phrase": "key_idea"}, {"score": 0.003321131121652437, "phrase": "fixpoint_logic"}, {"score": 0.003030247482854539, "phrase": "language_inclusion"}, {"score": 0.0030148534970485343, "phrase": "membership_problems"}, {"score": 0.002931569771634119, "phrase": "tree_automata"}, {"score": 0.002887113268463038, "phrase": "new_frontier"}, {"score": 0.0026952335068497206, "phrase": "fixpoint_computation"}, {"score": 0.002640861989913901, "phrase": "special_case"}, {"score": 0.0025875844752587815, "phrase": "interprocedural_program_analysis"}, {"score": 0.0025160740422447837, "phrase": "robust_class"}, {"score": 0.0022094430230616188, "phrase": "abstract_devices"}, {"score": 0.002115757586423346, "phrase": "verifying"}, {"score": 0.0021052001889339594, "phrase": "reasoning"}], "paper_keywords": ["Algorithms", " Theory", " Verification", " Logic", " specification", " verification", " mu-calculus", " infinite-state", " model-checking", " games", " pushdown systems", " interprocedural analysis"], "paper_abstract": "While model checking of pushdown systems is by now an established technique in software verification, temporal logics and automata traditionally used in this area are unattractive on two counts. First, logics and automata traditionally used in model checking cannot express requirements such as pre/post-conditions that are basic to analysis of software. Second, unlike in the finite-state world, where the mu-calculus has a symbolic model-checking algorithm and serves as an \"assembly language\" to which temporal logics can be compiled, there is no common formalism-either fixpoint-based or automata-theoretic-to model-check requirements on pushdown models. In this article, we introduce a new theory of temporal logics and automata that addresses the above issues, and provides a unified foundation for the verification of pushdown systems. The key idea here is to view a program as a generator of structures known as nested trees as opposed to trees. A fixpoint logic (called NT-mu) and a class of automata (called nested tree automata) interpreted on languages of these structures are now defined, and branching-time model-checking is phrased as language inclusion and membership problems for these languages. We show that NT-mu and nested tree automata allow the specification of a new frontier of requirements usable in software verification. At the same time, their model checking problem has the same worst-case complexity as their traditional analogs, and can be solved symbolically using a fixpoint computation that generalizes, and includes as a special case, \"summary\"-based computations traditionally used in interprocedural program analysis. We also show that our logics and automata define a robust class of languages-in particular, just as the mu-calculus is equivalent to alternating parity automata on trees, NT-mu is equivalent to alternating parity automata on nested trees. Categories and Subject Descriptors: D. 2.4 [Software Engineering]: Software/Program Verification-Model checking; F. 1.1 [Computation by abstract devices]: Models of computation-Automata; F. 3.1 [Theory of Computation]: Specifying and Verifying and Reasoning about Programs; F. 4.1 [Theory of Computation]: Mathematical Logic-Temporal logic", "paper_title": "Software Model Checking Using Languages of Nested Trees", "paper_id": "WOS:000297685600001"}