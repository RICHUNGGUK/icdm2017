{"auto_keywords": [{"score": 0.04123034123845347, "phrase": "noc"}, {"score": 0.00481495049065317, "phrase": "noc_slack_through_voltage"}, {"score": 0.004723742646716804, "phrase": "hard_real-time_embedded_systems"}, {"score": 0.004616560363089716, "phrase": "embedded_systems"}, {"score": 0.004563880494020726, "phrase": "strict_latency_requirement"}, {"score": 0.004529093447865156, "phrase": "interconnection_subsystems"}, {"score": 0.004179392391349015, "phrase": "traffic_stream"}, {"score": 0.004068907083697369, "phrase": "time_interval"}, {"score": 0.003961330917648707, "phrase": "increasing_complexity"}, {"score": 0.00385658790017119, "phrase": "significant_portion"}, {"score": 0.0038271712887391015, "phrase": "total_chip_power"}, {"score": 0.0037546039916845947, "phrase": "power_footprint"}, {"score": 0.003545024951402821, "phrase": "energy_consumption"}, {"score": 0.00346449481422526, "phrase": "prespecified_latency_deadlines"}, {"score": 0.003438058620195309, "phrase": "real-time_applications"}, {"score": 0.003347105144425849, "phrase": "formal_approach"}, {"score": 0.003308862957060602, "phrase": "network_calculus"}, {"score": 0.0032585499655442404, "phrase": "worst-case_delay"}, {"score": 0.003124086807493311, "phrase": "safe_estimate"}, {"score": 0.0027424619603260837, "phrase": "optimization_algorithm"}, {"score": 0.002680114113899346, "phrase": "lower_noc_energy"}, {"score": 0.0025892330566358503, "phrase": "different_traffic_streams"}, {"score": 0.0025498344202551223, "phrase": "different_voltages"}, {"score": 0.0025110337774260773, "phrase": "different_routers"}, {"score": 0.002482320290902079, "phrase": "noc_energy-efficiency"}, {"score": 0.0023435920614377306, "phrase": "feedback-control_strategy"}, {"score": 0.002316788811533867, "phrase": "dynamic_frequency"}, {"score": 0.0022640963589007457, "phrase": "network_routers"}, {"score": 0.0022211005680689666, "phrase": "energy_optimization_algorithm"}, {"score": 0.0021375377706211686, "phrase": "overall_network"}, {"score": 0.0021049977753042253, "phrase": "sporadic_traffic_patterns"}], "paper_keywords": ["Dynamic voltage and frequency scaling (DVFS)", " network calculus", " network-on-chip (NoC)", " slack", " worst-case delay analysis"], "paper_abstract": "Hard real-time embedded systems impose a strict latency requirement on interconnection subsystems. In the case of network-on-chip (NoC), this means each packet of a traffic stream has to be delivered within a time interval. In addition, with the increasing complexity of NoC, it consumes a significant portion of total chip power, which boosts the power footprint of such chips. In this paper, we propose a methodology to minimize the energy consumption of NoC without violating the prespecified latency deadlines of real-time applications. First, we develop a formal approach based on network calculus to obtain the worst-case delay bound of all packets, from which we derive a safe estimate of the number of cycles that a packet can be further delayed in the network without violating its deadline-the worst-case slack. With this information, we then develop an optimization algorithm that trades the slacks for lower NoC energy. Our algorithm recognizes the distribution of slacks for different traffic streams, and assigns different voltages and frequencies to different routers to achieve NoC energy-efficiency, while meeting the deadlines for all packets. Furthermore, we design a feedback-control strategy to enable dynamic frequency and voltage scaling on the network routers in conjunction with the energy optimization algorithm. It can flexibly improve the energy-efficiency of the overall network in response to sporadic traffic patterns at runtime.", "paper_title": "Optimizing the NoC Slack Through Voltage and Frequency Scaling in Hard Real-Time Embedded Systems", "paper_id": "WOS:000344530400004"}