{"auto_keywords": [{"score": 0.0475341023543958, "phrase": "asm"}, {"score": 0.00481495049065317, "phrase": "autonomic_state_management"}, {"score": 0.004777569299319633, "phrase": "optimistic_simulation_platforms"}, {"score": 0.004594951819987416, "phrase": "autonomic_state_manager"}, {"score": 0.004453874101119545, "phrase": "optimistic_parallel_discrete_event_simulation"}, {"score": 0.004317109072311102, "phrase": "c_programming_language"}, {"score": 0.004266907250334316, "phrase": "executable_and_linkable_format"}, {"score": 0.00396218934254591, "phrase": "logical_process"}, {"score": 0.0036791522245326514, "phrase": "dynamically_allocated_memory_chunks"}, {"score": 0.0036363418376496484, "phrase": "standard_api"}, {"score": 0.0034971932704828197, "phrase": "application_programmer"}, {"score": 0.0032855095476183372, "phrase": "lp_state"}, {"score": 0.0031721009574803127, "phrase": "causality_error"}, {"score": 0.0031229578623834394, "phrase": "optimistic_run"}, {"score": 0.0029453365339797933, "phrase": "event_processing"}, {"score": 0.002888396879326153, "phrase": "incremental_checkpointing"}, {"score": 0.0027886573969044042, "phrase": "fully_transparent_manner"}, {"score": 0.0023391880766516285, "phrase": "dynamic_selection"}, {"score": 0.002188874450946842, "phrase": "account_stability"}, {"score": 0.002163367190715979, "phrase": "operating_mode"}], "paper_keywords": ["Parallel discrete event simulation", " optimistic simulation", " autonomic computing", " checkpointing", " time warp"], "paper_abstract": "We present the design and implementation of an autonomic state manager (ASM) tailored for integration within optimistic parallel discrete event simulation (PDES) environments based on the C programming language and the executable and linkable format (ELF), and developed for execution on x86_64 architectures. With ASM, the state of any logical process (LP), namely the individual (concurrent) simulation unit being part of the simulation model, is allowed to be scattered on dynamically allocated memory chunks managed via standard API (e.g., malloc/free). Also, the application programmer is not required to provide any serialization/deserialization module in order to take a checkpoint of the LP state, or to restore it in case a causality error occurs during the optimistic run, or to provide indications on which portions of the state are updated by event processing, so to allow incremental checkpointing. All these tasks are handled by ASM in a fully transparent manner via (A) runtime identification (with chunk-level granularity) of the memory map associated with the LP state, and (B) runtime tracking of the memory updates occurring within chunks belonging to the dynamic memory map. The co-existence of the incremental and non-incremental log/restore modes is achieved via dual versions of the same application code, transparently generated by ASM via compile/link time facilities. Also, the dynamic selection of the best suited log/restore mode is actuated by ASM on the basis of an innovative modeling/optimization approach which takes into account stability of each operating mode with respect to variations of the model/environmental execution parameters.", "paper_title": "Autonomic State Management for Optimistic Simulation Platforms", "paper_id": "WOS:000354526000006"}