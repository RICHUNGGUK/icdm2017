{"auto_keywords": [{"score": 0.0437107789799431, "phrase": "issued_instructions"}, {"score": 0.040068893161497504, "phrase": "parallel_flag"}, {"score": 0.026374708875538982, "phrase": "highest_priority"}, {"score": 0.00481495049065317, "phrase": "issue_mechanism"}, {"score": 0.004753194996637899, "phrase": "simultaneous_multithreading_processor"}, {"score": 0.004712463245074863, "phrase": "simultaneous_multithreading"}, {"score": 0.004592340708764929, "phrase": "instruction_throughput"}, {"score": 0.004533427352547707, "phrase": "multiple_instructions"}, {"score": 0.004494570360108983, "phrase": "multiple_threads"}, {"score": 0.004361163586439822, "phrase": "order_pipeline"}, {"score": 0.004268293864953256, "phrase": "smt_processors"}, {"score": 0.004213519983188574, "phrase": "large_number"}, {"score": 0.004053362743156545, "phrase": "out-of-order_pipeline"}, {"score": 0.003899269293218826, "phrase": "efficient_issue_logic"}, {"score": 0.003865826699096508, "phrase": "predicated_instruction_sequence"}, {"score": 0.0037028514035425037, "phrase": "predicate_register"}, {"score": 0.003686935223424015, "phrase": "based_issue_control"}, {"score": 0.003608370966473902, "phrase": "continuous_instructions"}, {"score": 0.003267925215811654, "phrase": "different_threads"}, {"score": 0.0031845067058084583, "phrase": "round-robin_order"}, {"score": 0.0031032109441552287, "phrase": "instruction_queue"}, {"score": 0.0029089095588612007, "phrase": "issue_logic"}, {"score": 0.0026456667695073043, "phrase": "round-robin_issue_policy"}], "paper_keywords": ["simultaneous multithreading", " parallel flag", " balance round-robin policy"], "paper_abstract": "Simultaneous Multithreading (SMT) technology enhances instruction throughput by issuing multiple instructions from multiple threads within one clock cycle. For in-order pipeline to each thread, SMT processors can provide large number of issued instructions close to or surpass than using out-of-order pipeline. In this work, we show an efficient issue logic for predicated instruction sequence with the parallel flag in each instruction, where the predicate register based issue control is adopted and the continuous instructions with the parallel flag of V are executed in parallel. The flag is pre-defined by a compiler. Instructions from different threads are issued based on the round-robin order. We also introduce an Instruction Queue skip mechanism for thread if the queue is empty. Using this kind of issue logic, we designed a 6 threads, 7-stage, in-order pipeline processor. Based on this processor, we compare round-robin issue policy (RR(T-1-T-n)) with other policies: thread one always has the highest priority (PR(T-1)) and thread one or thread n has the highest priority in turn (PR(T-1-T-n)). The results show that RR(T-1-T-n) policy outperforms others and PR(T-1-T-n) is almost the same to RR(T-1-T-n) from the point ofview of the issued instructions per cycle.", "paper_title": "Issue mechanism for embedded Simultaneous Multithreading processor", "paper_id": "WOS:000255647700023"}