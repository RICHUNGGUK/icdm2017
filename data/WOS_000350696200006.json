{"auto_keywords": [{"score": 0.034610758922047784, "phrase": "ccap"}, {"score": 0.007671117551021678, "phrase": "hpc_cloud"}, {"score": 0.006522869337101706, "phrase": "virtual_machines"}, {"score": 0.00481495049065317, "phrase": "cache_contention-aware_virtual_machine_placement_approach"}, {"score": 0.00468627326602559, "phrase": "high_performance_computing"}, {"score": 0.0045200127552893704, "phrase": "large_cache_resource_consumption"}, {"score": 0.004459190343665408, "phrase": "large-scale_inputs"}, {"score": 0.0042874503054339255, "phrase": "cache_pollution_programs"}, {"score": 0.0040010534672646775, "phrase": "hypervisor_level"}, {"score": 0.00389404213807752, "phrase": "operating_system_level"}, {"score": 0.003755782496223915, "phrase": "performance_interference"}, {"score": 0.003671865244553482, "phrase": "sllc"}, {"score": 0.0035414658322295515, "phrase": "enhanced_reuse_distance_analysis_technique"}, {"score": 0.0034937647771945803, "phrase": "accelerated_cyclic_compression_algorithm"}, {"score": 0.0034467039994594065, "phrase": "application's_cache_interference_intensity"}, {"score": 0.00338493754743055, "phrase": "reuse_distance_analysis"}, {"score": 0.003309278541665552, "phrase": "practical_cache_contention-aware_virtual_machine_placement_approach"}, {"score": 0.0031203609829058587, "phrase": "cache_pollution"}, {"score": 0.003036832649117453, "phrase": "negative_effects"}, {"score": 0.0030094882299407256, "phrase": "cache_contention"}, {"score": 0.002915701586760994, "phrase": "xen_hypervisor"}, {"score": 0.0028634235895823594, "phrase": "npb_workload"}, {"score": 0.0027616550517346066, "phrase": "cache_sensitive_applications"}, {"score": 0.002568812627436125, "phrase": "execution_time"}, {"score": 0.0022631003204259224, "phrase": "average_performance"}, {"score": 0.0021049977753042253, "phrase": "sensitive_applications"}], "paper_keywords": ["HPC cloud", " Cache contention", " Reuse distance", " Virtual machine placement"], "paper_abstract": "Applications in High Performance Computing (HPC) cloud are characterized by large cache resource consumption due to large-scale inputs and intensive communications, which creates serious Shared Last Level cache (SLLC) performance bottleneck. Current system software stacks are not efficient in addressing this issue among virtual machines at the hypervisor level or the threads at the operating system level. In this paper, we investigate performance interference due to contention for SLLC in the HPC cloud. We employ an enhanced reuse distance analysis technique with an accelerated cyclic compression algorithm to identify application's cache interference intensity. Based on reuse distance analysis, we propose a practical Cache Contention-Aware virtual machine Placement approach (CCAP). CCAP dispatches virtual machines according to their cache interference intensities to avoid cache pollution and interference, thus alleviating negative effects of cache contention. We implement CCAP in the Xen hypervisor. Evaluation of NPB workload reveals that CCAP can improve performance of cache sensitive applications when they are co-scheduled with cache pollution programs. For a 2-workload system, it reduces execution time by 12 %, as well as cache miss rate by 13 %, while increasing throughput by 13 %, on average. Moreover, CCAP also improves the average performance of the cache pollution programs by 5 %. For a 4-workload system, CCAP brings more significant performance improvement to cache sensitive applications, an average increase of 20 %.", "paper_title": "CCAP: A Cache Contention-Aware Virtual Machine Placement Approach for HPC Cloud", "paper_id": "WOS:000350696200006"}