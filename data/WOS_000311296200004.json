{"auto_keywords": [{"score": 0.03851065497794083, "phrase": "security_level"}, {"score": 0.030038626975053336, "phrase": "information_flow"}, {"score": 0.00481495049065317, "phrase": "practical_secure_concurrent_language"}, {"score": 0.00464976086880886, "phrase": "practical_concurrent_language"}, {"score": 0.004490212943845175, "phrase": "natural_way"}, {"score": 0.004438250823243621, "phrase": "information_security_mechanisms"}, {"score": 0.004336115760817672, "phrase": "strong_information_security_guarantees"}, {"score": 0.004162978902905446, "phrase": "coarse-grained_information-flow_control"}, {"score": 0.0029694040368299624, "phrase": "differing_security_levels"}, {"score": 0.002884111441153185, "phrase": "potentially_dangerous_information_flows"}, {"score": 0.00280126189041041, "phrase": "covert_scheduling_channels"}, {"score": 0.002658068304632523, "phrase": "concurrent_programs"}, {"score": 0.0025816953009851072, "phrase": "static_analysis"}, {"score": 0.0025221759076833124, "phrase": "noninterference-based_extensional_information_security_condition"}, {"score": 0.002421291757425244, "phrase": "key_aspects"}, {"score": 0.0023654615987859402, "phrase": "async-finish_parallelism"}, {"score": 0.0022974765563692776, "phrase": "security_analysis"}, {"score": 0.002142161017595363, "phrase": "prototype_compiler"}, {"score": 0.0021049977753042253, "phrase": "resulting_language"}], "paper_keywords": ["Language-based security", " information-flow control", " X10"], "paper_abstract": "We demonstrate that a practical concurrent language can be extended in a natural way with information security mechanisms that provably enforce strong information security guarantees. We extend the X 10 concurrent programming language with coarse-grained information-flow control. Central to X 10 concurrency abstractions is the notion of a place: a container for data and computation. We associate a security level with each place, and restrict each place to store only data appropriate for that security level. When places interact only with other places at the same security level, then our security mechanisms impose no restrictions. When places of differing security levels interact, our information security analysis prevents potentially dangerous information flows, including information flow through covert scheduling channels. The X 10 concurrency mechanisms simplify reasoning about information flow in concurrent programs. We present a static analysis that enforces a noninterference-based extensional information security condition in a calculus that captures the key aspects of X10's place abstraction and async-finish parallelism. We extend this security analysis to support many of X10's language features, and have implemented a prototype compiler for the resulting language.", "paper_title": "Towards a Practical Secure Concurrent Language", "paper_id": "WOS:000311296200004"}