{"auto_keywords": [{"score": 0.030170201897338173, "phrase": "second_step"}, {"score": 0.00481495049065317, "phrase": "interattribute_dependencies"}, {"score": 0.004773692073488661, "phrase": "schema_matching"}, {"score": 0.00467207889925365, "phrase": "key_challenges"}, {"score": 0.004632039024076267, "phrase": "information_integration"}, {"score": 0.004533427352547707, "phrase": "labor-intensive_and_time-consuming_process"}, {"score": 0.004249957578636515, "phrase": "existing_solutions"}, {"score": 0.0041773934798743405, "phrase": "textual_similarity"}, {"score": 0.003916098498242888, "phrase": "schema-matching_problem"}, {"score": 0.003686935223424015, "phrase": "column_names"}, {"score": 0.003324743991757282, "phrase": "two-step_technique"}, {"score": 0.003212074324593725, "phrase": "first_step"}, {"score": 0.003050166508545763, "phrase": "information-theoretic_measure"}, {"score": 0.0029980260560551982, "phrase": "dependency_graph"}, {"score": 0.0027861630854233693, "phrase": "node_pairs"}, {"score": 0.0027503564589458837, "phrase": "dependency_graphs"}, {"score": 0.002703327151461985, "phrase": "graph-matching_algorithm"}, {"score": 0.0025122373359090454, "phrase": "computational_complexity"}, {"score": 0.0024799423362011582, "phrase": "graph-matching_problem"}, {"score": 0.002416589459425828, "phrase": "problem_instance"}, {"score": 0.0023548511815224098, "phrase": "weighted_graph-matching_problem"}, {"score": 0.0023145690608400425, "phrase": "efficient_solution"}, {"score": 0.0021883400011393564, "phrase": "previous_work"}, {"score": 0.002150900082318562, "phrase": "second_phase"}, {"score": 0.0021049977753042253, "phrase": "efficient_approximation_algorithms"}], "paper_keywords": ["schema matching", " attribute dependency", " graph matching"], "paper_abstract": "Schema matching is one of the key challenges in information integration. It is a labor-intensive and time-consuming process. To alleviate the problem, many automated solutions have been proposed. Most of the existing solutions mainly rely upon textual similarity of the data to be matched. However, there exist instances of the schema-matching problem for which they do not even apply. Such problem instances typically arise when the column names in the schemas and the data in the columns are opaque or very difficult to interpret. In our previous work, we proposed a two-step technique to address this problem. In the first step, we measure the dependencies between attributes within tables using an information-theoretic measure and construct a dependency graph for each table capturing the dependencies among attributes. In the second step, we find matching node pairs across the dependency graphs by running a graph-matching algorithm. In our previous work, we experimentally validated the accuracy of the approach. One remaining challenge is the computational complexity of the graph-matching problem in the second step. The problem instance we are facing is the weighted graph-matching problem to which no efficient solution has yet been found. In this paper, we extend the previous work by improving the second phase of the algorithm incorporating efficient approximation algorithms into the framework.", "paper_title": "Schema matching using interattribute dependencies", "paper_id": "WOS:000259192400008"}