{"auto_keywords": [{"score": 0.029709021816766247, "phrase": "network_interface"}, {"score": 0.00481495049065317, "phrase": "programmable_network_interfaces"}, {"score": 0.004743164872278112, "phrase": "emerging_network_technologies"}, {"score": 0.004672444473700524, "phrase": "complex_network_interfaces"}, {"score": 0.004568326972997448, "phrase": "renewed_concerns"}, {"score": 0.00450020161335541, "phrase": "network_reliability"}, {"score": 0.004205940624913343, "phrase": "effective_low-_overhead_fault_tolerance_technique"}, {"score": 0.004081385289516914, "phrase": "network_interface_failures"}, {"score": 0.004020492138367616, "phrase": "failure_detection"}, {"score": 0.0038721890530859578, "phrase": "software_watchdog_timer"}, {"score": 0.003785836059995376, "phrase": "network_processor"}, {"score": 0.003673675864705682, "phrase": "self-_testing_scheme"}, {"score": 0.003591733916159209, "phrase": "interface_failures"}, {"score": 0.003511613254403125, "phrase": "processor_hangs"}, {"score": 0.0034332736827447654, "phrase": "proposed_self-_testing_scheme"}, {"score": 0.0028661330049356186, "phrase": "local_memory"}, {"score": 0.0025219085140220773, "phrase": "small_backup_copy"}, {"score": 0.002392453087295391, "phrase": "complete_recovery"}, {"score": 0.0021530945641993152, "phrase": "performance_impact"}, {"score": 0.0021049977753042253, "phrase": "host_system"}], "paper_keywords": ["Programmable Network Interface Card (NIC)", " Single Event Upset (SEU)", " radiation induced faults", " failure detection", " failure recovery", " self-testing"], "paper_abstract": "Emerging network technologies have complex network interfaces that have renewed concerns about network reliability. In this paper, we present an effective low- overhead fault tolerance technique to recover from network interface failures. Failure detection is based on a software watchdog timer that detects network processor hangs and a self- testing scheme that detects interface failures other than processor hangs. The proposed self- testing scheme achieves failure detection by periodically directing the control flow to go through only active software modules in order to detect errors that affect instructions in the local memory of the network interface. Our failure recovery is achieved by restoring the state of the network interface using a small backup copy containing just the right amount of information required for complete recovery. The paper shows how this technique can be made to minimize the performance impact to the host system and be completely transparent to the user.", "paper_title": "Software-based failure detection and recovery in programmable network interfaces", "paper_id": "WOS:000249702800005"}