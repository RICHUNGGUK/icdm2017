{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "information_extraction"}, {"score": 0.04256754260406186, "phrase": "input_string"}, {"score": 0.03230984087269512, "phrase": "regular_expressions"}, {"score": 0.03208392843597676, "phrase": "capture_variables"}, {"score": 0.029593344682317346, "phrase": "first_kind"}, {"score": 0.02807112674253269, "phrase": "regular_spanners"}, {"score": 0.02700343765534282, "phrase": "core_spanners"}, {"score": 0.0047631192993526465, "phrase": "intrinsic_part"}, {"score": 0.004415523687947897, "phrase": "foundational_framework"}, {"score": 0.004367973309172735, "phrase": "central_construct"}, {"score": 0.0034918342672996066, "phrase": "primitive_representation_extract_relations"}, {"score": 0.003343691804204423, "phrase": "algebraic_operations"}, {"score": 0.0033076455392068095, "phrase": "primitively_represented_spanners"}, {"score": 0.0032250366795039715, "phrase": "systemt"}, {"score": 0.0031903186209649138, "phrase": "ibm"}, {"score": 0.0031444844772458504, "phrase": "text_analysis"}, {"score": 0.0030993584115563146, "phrase": "primitive_representation"}, {"score": 0.0029893477597041493, "phrase": "additional_types"}, {"score": 0.00296781730323553, "phrase": "primitive_spanner_representations"}, {"score": 0.0026918477311176376, "phrase": "second_kind"}, {"score": 0.002672454243212711, "phrase": "precisely_the_algebra"}, {"score": 0.0025682543875086934, "phrase": "standard_relational_operators"}, {"score": 0.00251313643823856, "phrase": "regular_ones"}, {"score": 0.0024950272594582673, "phrase": "stringe-quality_selection"}, {"score": 0.0023890733439136586, "phrase": "fundamental_results"}, {"score": 0.0023462618437394616, "phrase": "regular_and_core_spanners"}, {"score": 0.0021049977753042253, "phrase": "related_notions"}], "paper_keywords": ["Theory", " Information extraction", " document spanners", " regular expressions", " finite-state automata"], "paper_abstract": "An intrinsic part of information extraction is the creation and manipulation of relations extracted from text. In this article, we develop a foundational framework where the central construct is what we call a document spanner (or just spanner for short). A spanner maps an input string into a relation over the spans (intervals specified by bounding indices) of the string. The focus of this article is on the representation of spanners. Conceptually, there are two kinds of such representations. Spanners defined in a primitive representation extract relations directly from the input string; those defined in an algebra apply algebraic operations to the primitively represented spanners. This framework is driven by SystemT, an IBM commercial product for text analysis, where the primitive representation is that of regular expressions with capture variables. We define additional types of primitive spanner representations by means of two kinds of automata that assign spans to variables. We prove that the first kind has the same expressive power as regular expressions with capture variables; the second kind expresses precisely the algebra of the regular spanners-the closure of the first kind under standard relational operators. The core spanners extend the regular ones by stringe-quality selection (an extension used in SystemT). We give some fundamental results on the expressiveness of regular and core spanners. As an example, we prove that regular spanners are closed under difference (and complement), but core spanners are not. Finally, we establish connections with related notions in the literature.", "paper_title": "Document Spanners: A Formal Approach to Information Extraction", "paper_id": "WOS:000354799200003"}