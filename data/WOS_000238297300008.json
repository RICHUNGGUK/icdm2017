{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "temporal_consistency"}, {"score": 0.007844454277795645, "phrase": "update_transactions"}, {"score": 0.004781215097314411, "phrase": "real-time_transactions"}, {"score": 0.004616034337089482, "phrase": "efficient_approach"}, {"score": 0.0045355866228818514, "phrase": "real-time_data_objects"}, {"score": 0.004488070668346594, "phrase": "ml"}, {"score": 0.004441404186787437, "phrase": "sml-sr"}, {"score": 0.0044408896450445125, "phrase": "deterministic_guarantee"}, {"score": 0.004067051881100314, "phrase": "worst-case_computation_time"}, {"score": 0.0038579703525471985, "phrase": "temporal_consistency_maintenance"}, {"score": 0.0037906837773782, "phrase": "temporal_inconsistency"}, {"score": 0.0033395304916220086, "phrase": "supported_transactions"}, {"score": 0.0032697235411641695, "phrase": "base-line_algorithm"}, {"score": 0.0032467792804296036, "phrase": "sml-ba"}, {"score": 0.0031901183059524804, "phrase": "requested_qos"}, {"score": 0.0029212625534156063, "phrase": "excess_processor_capacity"}, {"score": 0.002880393760798211, "phrase": "sml-opt"}, {"score": 0.0028301085867789076, "phrase": "slack_reclaiming_scheme"}, {"score": 0.0027514668612638074, "phrase": "reclaimed_slacks"}, {"score": 0.002646880721119838, "phrase": "guaranteed_computation_time"}, {"score": 0.002628295539850913, "phrase": "simulation_experiments"}, {"score": 0.0023646398663605493, "phrase": "half-half_schemes"}, {"score": 0.0023070189467375374, "phrase": "sml_schemes"}, {"score": 0.002134888329742086, "phrase": "significant_qos_improvement"}, {"score": 0.0021049977753042253, "phrase": "sml-opt."}], "paper_keywords": ["real-time database", " probabilistic temporal consistency", " transactions scheduling", " quality of service"], "paper_abstract": "The More-Less (ML) scheme has been shown to be an efficient approach for maintaining temporal consistency of real-time data objects. Although ML provides a deterministic guarantee in temporal consistency, the number of update transactions that can be supported in a system is limited. This is due to its use of the worst-case computation time in deriving deadlines and periods of update transactions. This paper studies the problem of temporal consistency maintenance where a certain degree of temporal inconsistency is tolerable. A suite of Statistical More-Less (SML) approaches are proposed to explore the trade-off between quality of service (QoS) of temporal consistency and the number of supported transactions. It begins with a base-line algorithm, SML-BA, which provides the requested QoS of temporal consistency. Then, SML with Optimization (SML-OPT) is proposed to further improve the QoS by better utilizing the excess processor capacity. Finally, SML-OPT is enhanced with a Slack Reclaiming scheme (SML-SR). The reclaimed slacks are used to process jobs whose required computation time is larger than the guaranteed computation time. Simulation experiments are conducted to compare the performance of these schemes ( SML-BA, SML-OPT, and SML-SR) together with the deterministic More-Less and Half-Half schemes. The results show that the SML schemes are effective in trading the schedulability of transactions for the QoS guaranteed. Moreover, SML-SR performs best and offers a significant QoS improvement over SML-BA and SML-OPT.", "paper_title": "Quality of service guarantee for temporal consistency of real-time transactions", "paper_id": "WOS:000238297300008"}