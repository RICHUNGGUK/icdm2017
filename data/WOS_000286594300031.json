{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "reynolds'_abstraction_theorem"}, {"score": 0.004635477242873163, "phrase": "typing_judgement"}, {"score": 0.004548253531664032, "phrase": "system_f"}, {"score": 0.004296264970612285, "phrase": "relational_statement"}, {"score": 0.004175533280178052, "phrase": "second_order_predicate_logic"}, {"score": 0.0037610536973798113, "phrase": "similar_result"}, {"score": 0.0036553070575015344, "phrase": "single_lambda_calculus"}, {"score": 0.0029935730127943496, "phrase": "single_system"}, {"score": 0.0028006988338192375, "phrase": "interpretation_layer"}, {"score": 0.0026705669656375197, "phrase": "unusually_simple_presentation"}, {"score": 0.0024281181691350085, "phrase": "type_system"}, {"score": 0.0021049977753042253, "phrase": "dependently-typed_ones"}], "paper_keywords": ["Languages", " Theory", " Pure type system", " Abstraction theorem", " Free theorems"], "paper_abstract": "Reynolds' abstraction theorem shows how a typing judgement in System F can be translated into a relational statement (in second order predicate logic) about inhabitants of the type. We obtain a similar result for a single lambda calculus (a pure type system), in which terms, types and their relations are expressed. Working within a single system dispenses with the need for an interpretation layer, allowing for an unusually simple presentation. While the unification puts some constraints on the type system (which we spell out), the result applies to many interesting cases, including dependently-typed ones.", "paper_title": "Parametricity and Dependent Types", "paper_id": "WOS:000286594300031"}