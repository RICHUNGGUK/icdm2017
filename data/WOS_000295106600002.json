{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "maximum_matching_problem"}, {"score": 0.03600704009648378, "phrase": "general_graph"}, {"score": 0.004703671193348433, "phrase": "matching_problem"}, {"score": 0.004559270778306828, "phrase": "large_set"}, {"score": 0.004488734023485018, "phrase": "disjoint_edges"}, {"score": 0.004087756756529841, "phrase": "considerable_attention"}, {"score": 0.003870541730075597, "phrase": "self-stabilizing_literature"}, {"score": 0.0036648265911110164, "phrase": "self-stabilizing_algorithms"}, {"score": 0.002968424524565369, "phrase": "first_self-stabilizing_algorithm"}, {"score": 0.002519402443228795, "phrase": "distributed_adversarial_daemon"}, {"score": 0.0022407927161620855, "phrase": "exponential_number"}, {"score": 0.002206045784326466, "phrase": "time_steps"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Self-stabilizing algorithm", " 2/3-approximation", " Maximum matching"], "paper_abstract": "The matching problem asks for a large set of disjoint edges in a graph. It is a problem that has received considerable attention in both the sequential and the self-stabilizing literature. Previous work has resulted in self-stabilizing algorithms for computing a maximal (1/2-approximation) matching in a general graph, as well as computing a 2/3-approximation on more specific graph types. In this paper, we present the first self-stabilizing algorithm for finding a 2/3-approximation to the maximum matching problem in a general graph. We show that our new algorithm, when run under a distributed adversarial daemon, stabilizes after at most 0(n(2)) rounds. However, it might still use an exponential number of time steps. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "A self-stabilizing 2/3-approximation algorithm for the maximum matching problem", "paper_id": "WOS:000295106600002"}