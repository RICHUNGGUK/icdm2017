{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "dependency_pairs"}, {"score": 0.04891849113301898, "phrase": "dependency_pair_technique"}, {"score": 0.04704155758238807, "phrase": "automated_termination"}, {"score": 0.0045843245695654875, "phrase": "powerful_method"}, {"score": 0.004436716583179764, "phrase": "innermost_termination_proofs"}, {"score": 0.004054802732360602, "phrase": "trs"}, {"score": 0.003924121879214595, "phrase": "inequality_constraints"}, {"score": 0.0037055370870874484, "phrase": "well-founded_orders"}, {"score": 0.0030193416820392554, "phrase": "transformation_techniques"}, {"score": 0.0024398167078355224, "phrase": "suitable_orders"}, {"score": 0.0021049977753042253, "phrase": "large_collections"}], "paper_keywords": ["termination", " term rewriting", " dependency pairs"], "paper_abstract": "The dependency pair technique is a powerful method for automated termination and innermost termination proofs of term rewrite systems (TRSs). For any TRS, it generates inequality constraints that have to be satisfied by well-founded orders. We improve the dependency pair technique by considerably reducing the number of constraints produced for (innermost) termination proofs. Moreover, we extend transformation techniques to manipulate dependency pairs that simplify (innermost) termination proofs significantly. To fully mechanize the approach, we show how transformations and the search for suitable orders can be mechanized efficiently. We implemented our results in the automated termination prover AProVE and evaluated them on large collections of examples.", "paper_title": "Mechanizing and improving dependency pairs", "paper_id": "WOS:000243690800002"}