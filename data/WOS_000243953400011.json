{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "list_decoding"}, {"score": 0.007561275701118969, "phrase": "turbo_codes"}, {"score": 0.005215553344405565, "phrase": "effective_weight_enumerating_function"}, {"score": 0.005035023682160903, "phrase": "codeword_error"}, {"score": 0.004841718917018709, "phrase": "effective_euclidean_distances"}, {"score": 0.004740126725341152, "phrase": "convolutional_codes"}, {"score": 0.004648222388468414, "phrase": "list_decoder"}, {"score": 0.004417487764326481, "phrase": "transmitted_codeword"}, {"score": 0.004264463695140275, "phrase": "decoding_strategy"}, {"score": 0.004100620365805411, "phrase": "inner_error"}, {"score": 0.004021065055449586, "phrase": "outer_error"}, {"score": 0.0038817197332605647, "phrase": "correct_codeword"}, {"score": 0.003776674472150248, "phrase": "codeword_error_analysis"}, {"score": 0.003732526540522333, "phrase": "linear_block_code"}, {"score": 0.0036172962914449796, "phrase": "\"worst_case"}, {"score": 0.0035332058983966424, "phrase": "effective_weights"}, {"score": 0.003424107910734022, "phrase": "weight_enumerating_function"}, {"score": 0.0032667240408191015, "phrase": "generalized_pairwise_error_event"}, {"score": 0.00310435218261112, "phrase": "linear_block_codes"}, {"score": 0.003056029284235528, "phrase": "geometrical_analysis"}, {"score": 0.002881403688962202, "phrase": "lower_bound"}, {"score": 0.0027705505273051007, "phrase": "particular_code"}, {"score": 0.0026431267487109543, "phrase": "pairwise_error_event"}, {"score": 0.0025715131759585052, "phrase": "actual_hamming_distance_relationships"}, {"score": 0.002501835053002899, "phrase": "pessimistic_assumptions"}, {"score": 0.002462867872567125, "phrase": "traditional_lower_bound_analysis"}, {"score": 0.002405549400304955, "phrase": "effective_weight"}, {"score": 0.0022239279632673206, "phrase": "proposed_approach"}, {"score": 0.0021721582450016, "phrase": "practical_interest"}, {"score": 0.0021467260992026295, "phrase": "terminated_convolutional_codes"}, {"score": 0.0021049977753042253, "phrase": "parallel_concatenation_structure"}], "paper_keywords": ["channel coding", " convolutional codes", " effective codeword weight", " list decoding", " turbo codes"], "paper_abstract": "A list decoder generates a list of more than one codeword candidates, and decoding is erroneous if the transmitted codeword is not included in the list. This decoding strategy can be implemented in a system that employs an inner error correcting code and an outer error detecting code that is used to choose the correct codeword from the list. Probability of codeword error analysis for a linear block code with list decoding is typically based on the \"worst case\" lower bound on the effective weights of codewords for list decoding evaluated from the weight enumerating function of the code. In this paper, the concepts of generalized pairwise error event and effective weight enumerating function are proposed for evaluation of the probability of codeword error of linear block codes with list decoding. Geometrical analysis shows that the effective Euclidean distances are not necessarily as low as those predicted by the lower bound. An approach to evaluate the effective weight enumerating function of a particular code with list decoding is proposed. The effective Euclidean distances for decisions in each pairwise error event are evaluated taking into consideration the actual Hamming distance relationships between codewords, which relaxes the pessimistic assumptions upon which the traditional lower bound analysis is based. Using the effective weight enumerating function, a more accurate approximation is achieved for the probability of codeword error of the code with list decoding. The proposed approach is applied to codes of practical interest, including terminated convolutional codes and turbo codes with the parallel concatenation structure.", "paper_title": "Improved analysis of list decoding and its application to convolutional codes and turbo codes", "paper_id": "WOS:000243953400011"}