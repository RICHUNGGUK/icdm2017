{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "subgraph_similarity"}, {"score": 0.010289964635568555, "phrase": "data_graph"}, {"score": 0.006778793677220221, "phrase": "subgraph_similarity_matching"}, {"score": 0.005873841013806575, "phrase": "query_processing"}, {"score": 0.0047224703862074665, "phrase": "query_graph"}, {"score": 0.00440394242852293, "phrase": "missing_edges"}, {"score": 0.003996727479807572, "phrase": "noisy_or_erroneous_graph_data"}, {"score": 0.003516079377293321, "phrase": "centralized_algorithms"}, {"score": 0.0034618794528555063, "phrase": "subgraph_similarity_queries"}, {"score": 0.0032914145394036657, "phrase": "limited_computational_power"}, {"score": 0.00326594229173048, "phrase": "storage_space"}, {"score": 0.003228101865545105, "phrase": "centralized_server"}, {"score": 0.003033546013625887, "phrase": "web-scale_graph"}, {"score": 0.0029867619862229853, "phrase": "distributed_environment"}, {"score": 0.002940697344380201, "phrase": "distributed_algorithms"}, {"score": 0.002917931350071647, "phrase": "optimization_techniques"}, {"score": 0.002752695791351096, "phrase": "parallel_computing_power"}, {"score": 0.0027102313244646934, "phrase": "communication_cost"}, {"score": 0.0026788122684116224, "phrase": "distributed_data_centers"}, {"score": 0.0025468074858862964, "phrase": "minimum_number"}, {"score": 0.002421291757425244, "phrase": "exact_matching"}, {"score": 0.002319918823705175, "phrase": "exact_matches"}, {"score": 0.002293014162421338, "phrase": "final_query_answers"}, {"score": 0.0021049977753042253, "phrase": "web-scale_graph_data"}], "paper_keywords": ["Graph", " Similarity matching", " Distributed computing"], "paper_abstract": "Given a query graph and a data graph , subgraph similarity matching is to retrieve all matches of in with the number of missing edges bounded by a given threshold . Many works have been conducted to study the problem of subgraph similarity matching due to its ability to handle applications involved with noisy or erroneous graph data. In practice, a data graph can be extremely large, e.g., a web-scale graph containing hundreds of millions of vertices and billions of edges. The state-of-the-art approaches employ centralized algorithms to process the subgraph similarity queries, and thus, they are infeasible for such a large graph due to the limited computational power and storage space of a centralized server. To address this problem, in this paper, we investigate subgraph similarity matching for a web-scale graph deployed in a distributed environment. We propose distributed algorithms and optimization techniques that exploit the properties of subgraph similarity matching, so that we can well utilize the parallel computing power and lower the communication cost among the distributed data centers for query processing. Specifically, we first relax and decompose into a minimum number of sub-queries. Next, we send each sub-query to conduct the exact matching in parallel. Finally, we schedule and join the exact matches to obtain final query answers. Moreover, our workload-balance strategy further speeds up the query processing. Our experimental results demonstrate the feasibility of our proposed approach in performing subgraph similarity matching over web-scale graph data.", "paper_title": "Efficient distributed subgraph similarity matching", "paper_id": "WOS:000354298200003"}