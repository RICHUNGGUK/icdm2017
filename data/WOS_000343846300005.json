{"auto_keywords": [{"score": 0.04499716284883512, "phrase": "browser_extensions"}, {"score": 0.015719716506582538, "phrase": "vulnerable_and_malicious_browser_extensions"}, {"score": 0.013734966817353051, "phrase": "web_applications"}, {"score": 0.004775726266706856, "phrase": "coded_browser_extensions"}, {"score": 0.0045843245695654875, "phrase": "primary_vehicle"}, {"score": 0.004448834394401103, "phrase": "vulnerable_extensions"}, {"score": 0.004424631631964781, "phrase": "high-risk_security_threat"}, {"score": 0.004329124434198367, "phrase": "wide_popularity"}, {"score": 0.004021689117050817, "phrase": "browser_extension-related_attacks"}, {"score": 0.003870940358070455, "phrase": "common_web_security_problems"}, {"score": 0.003828912548622257, "phrase": "sql_injection"}, {"score": 0.0037873393111621067, "phrase": "logic_flaws"}, {"score": 0.0037667216301666196, "phrase": "client-side_vulnerabilities"}, {"score": 0.0035182432294539397, "phrase": "extension-related_attacks"}, {"score": 0.0034048439594299715, "phrase": "suspicious_data_flows"}, {"score": 0.0033770679620017366, "phrase": "privilege_restriction"}, {"score": 0.00335867620389808, "phrase": "api_calls"}, {"score": 0.0033403842729325395, "phrase": "malicious_extensions"}, {"score": 0.0033131323758456978, "phrase": "digital_signatures"}, {"score": 0.0032682040993565675, "phrase": "memory_level_activities"}, {"score": 0.0032326991175307424, "phrase": "browser_users"}, {"score": 0.0030860426028530646, "phrase": "model-based_approach"}, {"score": 0.0030111057708546774, "phrase": "existing_techniques"}, {"score": 0.0026482660253173075, "phrase": "user_supplied_specifications"}, {"score": 0.0025628355581338563, "phrase": "main_challenges"}, {"score": 0.0025142763558123836, "phrase": "vulnerable_and_malicious_extension_samples"}, {"score": 0.0024001337476063094, "phrase": "available_vulnerable_and_malicious_extensions"}, {"score": 0.002348222961789711, "phrase": "training_samples"}, {"score": 0.002297432331811429, "phrase": "prototype_tool"}, {"score": 0.002253890480941792, "phrase": "mozilla_firefox_extensions"}, {"score": 0.002187125185712438, "phrase": "vulnerable_and_malicious_extensions"}, {"score": 0.002157433262687853, "phrase": "previously_undetected_extensions"}, {"score": 0.0021398115287338693, "phrase": "negligible_performance_overhead"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Browser extensions", " Web security", " Malware", " Hidden Markov Model", " JavaScript"], "paper_abstract": "Unsafely coded browser extensions can compromise the security of a browser, making them attractive targets for attackers as a primary vehicle for conducting cyber-attacks. Among others, the three factors making vulnerable extensions a high-risk security threat for browsers include: i) the wide popularity of browser extensions, ii) the similarity of browser extensions with web applications, and iii) the high privilege of browser extension scripts. Furthermore, mechanisms that specifically target to mitigate browser extension-related attacks have received less attention as opposed to solutions that have been deployed for common web security problems (such as SQL injection, XSS, logic flaws, client-side vulnerabilities, drive-by-download, etc.). To address these challenges, recently some techniques have been proposed to defend extension-related attacks. These techniques mainly focus on information flow analysis to capture suspicious data flows, impose privilege restriction on API calls by malicious extensions, apply digital signatures to monitor process and memory level activities, and allow browser users to specify policies in order to restrict the operations of extensions. This article presents a model-based approach to detect vulnerable and malicious browser extensions by widening and complementing the existing techniques. We observe and utilize various common and distinguishing characteristics of benign, vulnerable, and malicious browser extensions. These characteristics are then used to build our detection models, which are based on the Hidden Markov Model constructs. The models are well trained using a set of features extracted from a number of browser extensions together with user supplied specifications. Along the course of this study, one of the main challenges we encountered was the lack of vulnerable and malicious extension samples. To address this issue, based on our previous knowledge on testing web applications and heuristics obtained from available vulnerable and malicious extensions, we have defined rules to generate training samples. The approach is implemented in a prototype tool and evaluated using a number of Mozilla Firefox extensions. Our evaluation indicated that the approach not only detects known vulnerable and malicious extensions, but also identifies previously undetected extensions with a negligible performance overhead. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Effective detection of vulnerable and malicious browser extensions", "paper_id": "WOS:000343846300005"}