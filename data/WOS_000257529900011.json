{"auto_keywords": [{"score": 0.049378038061471535, "phrase": "architectural_patterns"}, {"score": 0.015719716506582538, "phrase": "architectural_primitives"}, {"score": 0.00462919213721188, "phrase": "fundamental_aspect"}, {"score": 0.004561386908745206, "phrase": "architecting_process"}, {"score": 0.004516733575701128, "phrase": "subsequently_the_architectural_documentation"}, {"score": 0.004154332348800334, "phrase": "recurring_design_solutions"}, {"score": 0.003802135020791801, "phrase": "inherent_variability"}, {"score": 0.0037463983616303786, "phrase": "solution_space"}, {"score": 0.003601715012418258, "phrase": "single_modeling_solution"}, {"score": 0.003296212583539166, "phrase": "modeling_elements"}, {"score": 0.0030464123943266673, "phrase": "architectural_view"}, {"score": 0.0029722900280316216, "phrase": "recurring_primitive_abstractions"}, {"score": 0.0026148807877309417, "phrase": "primitive_abstractions"}, {"score": 0.002551231163230566, "phrase": "standard_uml_elements"}, {"score": 0.002404706573379854, "phrase": "generic_and_extensible_concept"}, {"score": 0.002233301265743633, "phrase": "first_set"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["software architecture", " software patterns", " pattern primitives", " modeling", " UML"], "paper_abstract": "Architectural patterns are a fundamental aspect of the architecting process and subsequently the architectural documentation. Unfortunately, there is only poor support for modeling architectural patterns for two reasons. First, patterns describe recurring design solutions and hence do not directly match the elements in modeling languages. Second, they support an inherent variability in the solution space that is hard to model using a single modeling solution. This paper proposes to address this problem by finding and representing architectural primitives: fundamental, formalized modeling elements in representing patterns. In particular, we examined architectural patterns from the components and connectors architectural view, and we discovered recurring primitive abstractions among the patterns, that also demonstrate a degree of variability for each pattern. We used UML 2 as the language for representing these primitive abstractions as extensions of the standard UML elements. The contribution of this approach is that we provide a generic and extensible concept for modeling architectural patterns by means of architectural primitives. Also, we can demonstrate a first set of primitives that participate in several well-known architectural patterns. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "A catalog of architectural primitives for modeling architectural patterns", "paper_id": "WOS:000257529900011"}