{"auto_keywords": [{"score": 0.045417031794566444, "phrase": "functional_logic_languages"}, {"score": 0.00481495049065317, "phrase": "safe_typing"}, {"score": 0.004770461993586338, "phrase": "functional_logic_programs"}, {"score": 0.004726382602809228, "phrase": "opaque_patterns"}, {"score": 0.004682708592184678, "phrase": "local_bindings"}, {"score": 0.0046394362688524475, "phrase": "type_systems"}, {"score": 0.004532988904965752, "phrase": "programming_languages"}, {"score": 0.0044702911400353535, "phrase": "powerful_tool"}, {"score": 0.00428733103049275, "phrase": "damas-milner_type_system"}, {"score": 0.00372965096877929, "phrase": "problematic_feature"}, {"score": 0.003593555152077465, "phrase": "standard_systems"}, {"score": 0.003446353878654566, "phrase": "opaque_ho_patterns"}, {"score": 0.003414467360488913, "phrase": "left-hand_sides"}, {"score": 0.003320561182494713, "phrase": "undesirable_effects"}, {"score": 0.0030117065110966414, "phrase": "damas-milner-like_type_system"}, {"score": 0.0029426547808548012, "phrase": "ho"}, {"score": 0.0028087949095629955, "phrase": "type_safety"}, {"score": 0.0027698788736535865, "phrase": "considered_formal_framework"}, {"score": 0.00269365253474335, "phrase": "extra_variables"}, {"score": 0.002607362103727335, "phrase": "reduction_mechanism"}, {"score": 0.002523828967909659, "phrase": "different_ways"}, {"score": 0.0024658019116387845, "phrase": "local_definitions"}, {"score": 0.002331909406363425, "phrase": "type_system"}, {"score": 0.0022155569675462333, "phrase": "overall_process"}, {"score": 0.002195033004022173, "phrase": "type_inference"}, {"score": 0.0021646022201798247, "phrase": "whole_program"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Functional-logic programming", " Type systems", " Opaque patterns", " Let bindings"], "paper_abstract": "Type systems are widely used in programming languages as a powerful tool providing safety to programs. Functional logic languages have inherited Damas-Milner type system from their functional part due to its simplicity and popularity. In this paper we address a couple of aspects that can be subject of mprovement. One is related to a problematic feature of functional logic languages not taken under consideration by standard systems: it is known that the use of opaque HO patterns in left-hand sides of program rules may produce undesirable effects from the point of view of types. We re-examine the problem, and propose two variants of a Damas-Milner-like type system where certain uses of HO patterns (even opaque) are permitted while preserving type safety. The considered formal framework is that of programs without extra variables and using let-rewriting as reduction mechanism. The other aspect addressed is the different ways in which polymorphism of local definitions can be handled. At the same time that we formalize the type system, we have made the effort of technically clarifying the overall process of type inference in a whole program. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Safe typing of functional logic programs with opaque patterns and local bindings.", "paper_id": "WOS:000332418800003"}