{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "model_transformations"}, {"score": 0.0047709540557306284, "phrase": "model-driven_engineering"}, {"score": 0.0047057084749407485, "phrase": "active_use"}, {"score": 0.004577869668211548, "phrase": "software_development_process"}, {"score": 0.004138010495069077, "phrase": "final_systems"}, {"score": 0.004062682236016889, "phrase": "key_enablers"}, {"score": 0.0038981499110532273, "phrase": "instance_models"}, {"score": 0.0037402558657576124, "phrase": "development_paradigms"}, {"score": 0.0037060428445111664, "phrase": "available_techniques"}, {"score": 0.0034433297275344877, "phrase": "different_modelling_languages"}, {"score": 0.003027462227648001, "phrase": "flexible_reutilization"}, {"score": 0.0029181203386806683, "phrase": "generic_programming"}, {"score": 0.002825681384008326, "phrase": "transformation_templates"}, {"score": 0.0027741761880779535, "phrase": "component-based_development"}, {"score": 0.002613163083407071, "phrase": "component_model"}, {"score": 0.0024842242921857705, "phrase": "atlas_transformation_language"}, {"score": 0.0023400004981080818, "phrase": "generic_transformation_component"}, {"score": 0.0023079225317714815, "phrase": "workflow_models"}, {"score": 0.00226583335721762, "phrase": "petri_nets"}, {"score": 0.0021940118003312397, "phrase": "eight_workflow_languages"}, {"score": 0.002163930783583212, "phrase": "uml_activity_diagrams"}, {"score": 0.0021441057555396013, "phrase": "yawl"}, {"score": 0.0021049980104253245, "phrase": "bpmn."}], "paper_keywords": ["Model-driven engineering", " model transformation", " reusability", " genericity", " component-based development"], "paper_abstract": "Model-driven engineering promotes an active use of models to conduct the software development process. In this way, models are used to specify, simulate, verify, test and generate code for the final systems. Model transformations are key enablers for this approach, being used to manipulate instance models of a certain modelling language. However, while other development paradigms make available techniques to increase productivity through reutilization, there are few proposals for the reuse of model transformations across different modelling languages. As a result, transformations have to be developed from scratch even if other similar ones exist. In this paper, we propose a technique for the flexible reutilization of model transformations. Our proposal is based on generic programming for the definition and instantiation of transformation templates, and on component-based development for the encapsulation and composition of transformations. We have designed a component model for model transformations, supported by an implementation currently targeting the Atlas Transformation Language (ATL). To evaluate its reusability potential, we report on a generic transformation component to analyse workflow models through their transformation into Petri nets, which we have reused for eight workflow languages, including UML Activity Diagrams, YAWL and two versions of BPMN.", "paper_title": "A Component Model for Model Transformations", "paper_id": "WOS:000346224200001"}