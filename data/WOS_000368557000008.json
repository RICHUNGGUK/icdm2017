{"auto_keywords": [{"score": 0.04314074539597285, "phrase": "minizinc"}, {"score": 0.00481495049065317, "phrase": "constraint_modeling_language_minizinc"}, {"score": 0.004535124351828787, "phrase": "modeling_language_minizinc"}, {"score": 0.004195418010131832, "phrase": "first_proposal"}, {"score": 0.004047296286849109, "phrase": "existing_types"}, {"score": 0.003999089046152065, "phrase": "additional_values"}, {"score": 0.003789137457228946, "phrase": "predefined_type"}, {"score": 0.00374399358035391, "phrase": "new_values"}, {"score": 0.0034841647157189985, "phrase": "new_types"}, {"score": 0.0032618078775887077, "phrase": "sql-like_problems"}, {"score": 0.0031465436619697385, "phrase": "null_values"}, {"score": 0.0030904433394138963, "phrase": "second_extension"}, {"score": 0.002981216610222911, "phrase": "union_types"}, {"score": 0.002841545331522694, "phrase": "recursive_types"}, {"score": 0.0026760974046034854, "phrase": "modeling_problems"}, {"score": 0.0026283626419808036, "phrase": "complex_structures"}, {"score": 0.002581477142020187, "phrase": "new_case_statement"}, {"score": 0.0024901940672239784, "phrase": "different_components"}, {"score": 0.0024604876113911173, "phrase": "union_type_terms"}, {"score": 0.0022218413146898887, "phrase": "minizinc_model"}, {"score": 0.002143247921132179, "phrase": "original_model"}], "paper_keywords": ["Constraint programming", " NULL values", " Union types"], "paper_abstract": "In this paper we present two type extensions for the modeling language MINIZINC that allow the representation of some problems in a more natural way. The first proposal, called MINIZINC, extends existing types with additional values. The user can specify both the extension of a predefined type with new values, and the behavior of the operations with relation to the new types. We illustrate the usage of MINIZINC* to model SQL-like problems with integer variables extended with NULL values. The second extension, MINIZINC(+), introduces union types in the language. This allows defining recursive types such as trees, which are very useful for modeling problems that involve complex structures. A new case statement is introduced to select the different components of union type terms. The paper shows how a model defined using these extensions can be transformed into a MINIZINC model which is equivalent to the original model. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Two type extensions for the constraint modeling language MiniZinc", "paper_id": "WOS:000368557000008"}