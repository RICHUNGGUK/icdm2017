{"auto_keywords": [{"score": 0.04683590293207772, "phrase": "genome_sequences"}, {"score": 0.03809336769485716, "phrase": "huge_databases"}, {"score": 0.037075550342064625, "phrase": "computation_time"}, {"score": 0.03417668271679221, "phrase": "short_strings"}, {"score": 0.033715282485931995, "phrase": "fixed_length"}, {"score": 0.00481495049065317, "phrase": "similar_short_substrings"}, {"score": 0.004770211811866158, "phrase": "large-scale_string_data"}, {"score": 0.004616859702338596, "phrase": "central_task"}, {"score": 0.004552648949390462, "phrase": "huge_string_data"}, {"score": 0.004032118497047498, "phrase": "polynomial_time_algorithms"}, {"score": 0.0037069087922811488, "phrase": "straightforward_algorithms"}, {"score": 0.003313592421224647, "phrase": "small_hamming_distances"}, {"score": 0.0031328221096543823, "phrase": "long_strings"}, {"score": 0.002893434697072309, "phrase": "similar_non-short_substrings"}, {"score": 0.0028133741785871867, "phrase": "practical_efficiency"}, {"score": 0.002456486927713543, "phrase": "database_size"}, {"score": 0.002333258365963463, "phrase": "computational_experiments"}, {"score": 0.002289993730291138, "phrase": "web_texts"}, {"score": 0.0022475295254231714, "phrase": "slight_modifications"}, {"score": 0.0022058510091498666, "phrase": "edit_distance"}, {"score": 0.002185301851004467, "phrase": "mismatch_tolerance_computation"}, {"score": 0.0021049977753042253, "phrase": "author's_homepage"}], "paper_keywords": ["Neighbor search", " Neighbor graph construction", " Similarity analysis", " Data analysis", " Large scale data", " Homology search"], "paper_abstract": "Finding similar substrings/substructures is a central task in analyzing huge string data such as genome sequences, Web documents, log data, feature vectors of pictures, photos, videos, etc. Although the existence of polynomial time algorithms for such problems is trivial since the number of substrings is bounded by the square of their lengths, straightforward algorithms do not work for huge databases because of their high degree order of the computation time. This paper addresses the problem of finding pairs of strings with small Hamming distances from huge databases composed of short strings of a fixed length. Comparison of long strings can be solved by inputting all their substrings of fixed length so that we can find candidates of similar non-short substrings. We focus on the practical efficiency of algorithms, and propose an algorithm that runs in time almost linear in the input/output size. We prove that the computation time of its variant is linear in the database size when the length of the short strings is constant, and computational experiments for genome sequences and Web texts show its practical efficiency. Slight modifications adapt to the edit distance and mismatch tolerance computation. An implementation is available at the author's homepage.", "paper_title": "Multi-sorting algorithm for finding pairs of similar short substrings from large-scale string data", "paper_id": "WOS:000283510200003"}