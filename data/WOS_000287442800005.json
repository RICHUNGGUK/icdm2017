{"auto_keywords": [{"score": 0.04140693296811696, "phrase": "range_queries"}, {"score": 0.006806684824277875, "phrase": "query_processing"}, {"score": 0.005420477161765182, "phrase": "cell-based_method"}, {"score": 0.00481495049065317, "phrase": "continuous_range_queries"}, {"score": 0.004720419202969916, "phrase": "continuous_range_query"}, {"score": 0.004418456827500267, "phrase": "range_query"}, {"score": 0.004303127794432684, "phrase": "location-based_services"}, {"score": 0.004163172790791119, "phrase": "frequent_locations"}, {"score": 0.004067910470129423, "phrase": "query_indexing"}, {"score": 0.004027751272984522, "phrase": "incremental_evaluation"}, {"score": 0.0039096275435779124, "phrase": "moving_objects"}, {"score": 0.003832801887709817, "phrase": "locations_objects"}, {"score": 0.0037699306119313154, "phrase": "cell-based_query_indexing_method"}, {"score": 0.0036836332308340923, "phrase": "better_performance"}, {"score": 0.0035285548582081627, "phrase": "internal_nodes"}, {"score": 0.0033245147666408157, "phrase": "index_structure"}, {"score": 0.0030808211830129304, "phrase": "overlapping_problem"}, {"score": 0.0029903851294825023, "phrase": "disk_accesses"}, {"score": 0.0029608318458226755, "phrase": "tree_search"}, {"score": 0.0025173564697303836, "phrase": "affected_range_queries"}, {"score": 0.002476009439388887, "phrase": "bit-patterns_operations"}, {"score": 0.002294369814584028, "phrase": "storage_cost"}, {"score": 0.0021049977753042253, "phrase": "moving_objects_update"}], "paper_keywords": [""], "paper_abstract": "A continuous range query is defined to periodically re-evaluated to locate moving objects that are currently inside the boundary of the range query and is widely used to support the location-based services. However, the query processing becomes complicated because of frequent locations update of moving objects. The query indexing relies on incremental evaluation, building the index on range queries instead of moving objects and exploiting the relation between locations objects and queries. The cell-based query indexing method has been proved to have the better performance of query processing than that of the R*-tree-based query indexing method with the overlapping problem in internal nodes. However, it takes a lot of space and time for the cell-based method to maintain the index structure, when the number of range queries increases. The nine-areas (NA) tree has been proved to solve the overlapping problem in the R*-tree to minimise the number of disk accesses during a tree search for the range queries. In this study, the authors propose the NA-tree-bit-patterns-based (NABP) query indexing method based on the NA-tree. We use the bit-patterns to denote the regions and to preserve the locality of range queries and moving objects. Therefore our NABP method can incrementally local update the affected range queries over moving objects by bit-patterns operations, especially with the increase of the number of range queries. From their simulation study, the authors show that their NABP method requires less CPU time and storage cost than the cell-based method for large number of range queries update. The authors also show that their NABP method requires less CPU time than the R*-tree-based method for large number of moving objects update.", "paper_title": "Nine-areas-tree-bit-patterns-based method for continuous range queries over moving objects", "paper_id": "WOS:000287442800005"}