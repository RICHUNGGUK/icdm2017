{"auto_keywords": [{"score": 0.034005550468813706, "phrase": "opm"}, {"score": 0.00481495049065317, "phrase": "semi-specified_behavior_models"}, {"score": 0.004625255533545965, "phrase": "structural_and_behavioral_complexity"}, {"score": 0.004364310576600359, "phrase": "early_development_phases"}, {"score": 0.004306205029641728, "phrase": "reusable_modules"}, {"score": 0.00419229472352669, "phrase": "specific_systems"}, {"score": 0.004045068727683462, "phrase": "plug-and-play_software_component_technologies"}, {"score": 0.003920476803132283, "phrase": "design_patterns"}, {"score": 0.0038338299812503, "phrase": "product_line_techniques"}, {"score": 0.003666217992454448, "phrase": "object-oriented_framework"}, {"score": 0.003293142761521425, "phrase": "crosscutting_reuse_approach"}, {"score": 0.0032492519841546682, "phrase": "object-process_methodology"}, {"score": 0.0031210475158175432, "phrase": "system_structure"}, {"score": 0.0030520148188164084, "phrase": "single_view"}, {"score": 0.002957919048133256, "phrase": "process_class"}, {"score": 0.0028032928749970026, "phrase": "object_class"}, {"score": 0.0026806139086152365, "phrase": "input_objects"}, {"score": 0.002644865209801606, "phrase": "output_objects"}, {"score": 0.0024620842899061614, "phrase": "target_application"}, {"score": 0.0023861329619604666, "phrase": "three-step_process"}, {"score": 0.002354302193867031, "phrase": "generic_and_target_modules"}, {"score": 0.002221192647477371, "phrase": "combined_specification"}, {"score": 0.0021526564019119466, "phrase": "individual_modules"}], "paper_keywords": ["Software reuse", " Aspect-oriented software engineering", " Aspect-oriented modeling", " Object-Process Methodology", " Modularity"], "paper_abstract": "As the structural and behavioral complexity of systems has increased, so has interest in reusing modules in early development phases. Developing reusable modules and then weaving them into specific systems has been addressed by many approaches, including plug-and-play software component technologies, aspect-oriented techniques, design patterns, superimposition, and product line techniques. Most of these ideas are expressed in an object-oriented framework, so they reuse behaviors after dividing them into methods that are owned by classes. In this paper, we present a crosscutting reuse approach that applies object-process methodology (OPM). OPM, which unifies system structure and behavior in a single view, supports the notion of a process class that does not belong to and is not encapsulated in an object class, but rather stands alone, capable of getting input objects and producing output objects. The approach features the ability to specify modules generically and concretize them in the target application. This is done in a three-step process: designing generic and target modules, weaving them into the system under development, and refining the combined specification in a way that enables the individual modules to be modified after their reuse. Rules for specifying and combining modules are defined and exemplified, showing the flexibility and benefits of this approach.", "paper_title": "Reusing semi-specified behavior models in systems analysis and design", "paper_id": "WOS:000264849300005"}