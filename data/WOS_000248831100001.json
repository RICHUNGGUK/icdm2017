{"auto_keywords": [{"score": 0.049576258178666475, "phrase": "mpeg"}, {"score": 0.043799206817563795, "phrase": "gop"}, {"score": 0.015719700919695684, "phrase": "mpeg_video_streaming_system"}, {"score": 0.014196931327846466, "phrase": "backward-play_operation"}, {"score": 0.014012531017596799, "phrase": "backward_playback"}, {"score": 0.013263497603087588, "phrase": "decoded_frames"}, {"score": 0.009836839739128227, "phrase": "decoder_complexity"}, {"score": 0.004789599930639501, "phrase": "backward_playback_support"}, {"score": 0.004751822933030409, "phrase": "digital_video"}, {"score": 0.004689519124264954, "phrase": "video_storage"}, {"score": 0.004424901543849507, "phrase": "predictive_processing_techniques"}, {"score": 0.004309587105660596, "phrase": "straightforward_implementation"}, {"score": 0.004208364878091134, "phrase": "whole_group-of-picture"}, {"score": 0.004109510313842204, "phrase": "decoder_buffer"}, {"score": 0.00403422512824534, "phrase": "reverse_order"}, {"score": 0.003970789286139509, "phrase": "significant_buffer"}, {"score": 0.003877493646278466, "phrase": "gop_size"}, {"score": 0.0037268284687939643, "phrase": "severely_constrained_memory_requirement"}, {"score": 0.0036105071505760267, "phrase": "current_frame"}, {"score": 0.003451885004220209, "phrase": "next_frame"}, {"score": 0.0033529675585881316, "phrase": "huge_buffer"}, {"score": 0.0031719031740165644, "phrase": "macroblock-based_algorithm"}, {"score": 0.0031468450866998523, "phrase": "efficient_implementation"}, {"score": 0.0030485707466715345, "phrase": "minimal_requirements"}, {"score": 0.003024484031345221, "phrase": "network_bandwidth"}, {"score": 0.0029768783231803072, "phrase": "proposed_algorithm"}, {"score": 0.0029377781108867866, "phrase": "requested_frame"}, {"score": 0.0029222817819040195, "phrase": "backward_macroblocks"}, {"score": 0.002801209717483437, "phrase": "different_types"}, {"score": 0.0027644104508413613, "phrase": "compressed_domain"}, {"score": 0.002713700006599453, "phrase": "processed_macroblocks"}, {"score": 0.0026922519553946064, "phrase": "client_machine"}, {"score": 0.0026498617171585343, "phrase": "vlc-domain_technique"}, {"score": 0.0023338514021359843, "phrase": "computational_complexity"}, {"score": 0.002291021003411208, "phrase": "compressed-domain_techniques"}, {"score": 0.002272906032304683, "phrase": "proposed_architecture"}, {"score": 0.00223119159012786, "phrase": "vlc_domain"}, {"score": 0.0022135486371828795, "phrase": "quantized_dct_domain"}, {"score": 0.002196044887294327, "phrase": "low_server_complexity"}, {"score": 0.0021844525153939406, "phrase": "experimental_results"}, {"score": 0.00213869043367662, "phrase": "conventional_system"}, {"score": 0.0021217773701268706, "phrase": "new_streaming_system"}, {"score": 0.0021049977753042253, "phrase": "required_network_bandwidth"}], "paper_keywords": ["compressed-domain processing", " digital video cassette recording", " MPEG video", " streaming video"], "paper_abstract": "MPEG digital video is becoming ubiquitous for video storage and communications. It is often desirable to perform various video cassette recording (VCR) functions such as backward playback in MPEG videos. However, the predictive processing techniques employed in MPEG severely complicate the backward-play operation. A straightforward implementation of backward playback is to transmit and decode the whole group-of-picture (GOP), store all the decoded frames in the decoder buffer, and play the decoded frames in reverse order. This approach requires a significant buffer in the decoder, which depends on the GOP size, to store the decoded frames. This approach could not be possible in a severely constrained memory requirement. Another alternative is to decode the GOP up to the current frame to be displayed, and then go back to decode the GOP again up to the next frame to be displayed. This approach does not need the huge buffer, but requires much higher bandwidth of the network and complexity of the decoder. In this paper, we propose a macroblock-based algorithm for an efficient implementation of the MPEG video streaming system to provide backward playback over a network with the minimal requirements on the network bandwidth and the decoder complexity. The proposed algorithm classifies macroblocks in the requested frame into backward macroblocks (BMBs) and forward/backward macroblocks (FBMBs). Two macroblock-based techniques are used to manipulate different types of macroblocks in the compressed domain and the server then sends the processed macroblocks to the client machine. For BMBs, a VLC-domain technique is adopted to reduce the number of macroblocks that need to be decoded by the decoder and the number of bits that need to be sent over the network in the backward-play operation. We then propose a newly mixed VLC/DCT-domain technique to handle FBMBs in order to further reduce the computational complexity of the decoder. With these compressed-domain techniques, the proposed architecture only manipulates macroblocks either in the VLC domain or the quantized DCT domain resulting in low server complexity. Experimental results show that, as compared to the conventional system, the new streaming system reduces the required network bandwidth and the decoder complexity significantly.", "paper_title": "New architecture for MPEG video streaming system with backward playback support", "paper_id": "WOS:000248831100001"}