{"auto_keywords": [{"score": 0.045796434819916756, "phrase": "soft-state_approach"}, {"score": 0.00481495049065317, "phrase": "state_inconsistencies"}, {"score": 0.004698000536608171, "phrase": "well_established_approach"}, {"score": 0.00462919213721188, "phrase": "robust_network_protocols"}, {"score": 0.004236908273106904, "phrase": "large_amount"}, {"score": 0.004195418010131832, "phrase": "state_information"}, {"score": 0.004133940019630129, "phrase": "scalable_way"}, {"score": 0.0040334640350288, "phrase": "border_gateway_protocol"}, {"score": 0.003858697684681798, "phrase": "global_routing_tables"}, {"score": 0.003820896867623235, "phrase": "core_internet_routers"}, {"score": 0.0037463983616303786, "phrase": "table_size"}, {"score": 0.0034118234596993836, "phrase": "novel_approach"}, {"score": 0.0032160319265621285, "phrase": "large-state_protocols"}, {"score": 0.0031377955308198634, "phrase": "state_consistency"}, {"score": 0.0030314419455512013, "phrase": "state_compression"}, {"score": 0.0030017207229983385, "phrase": "receiver_participation_mechanisms"}, {"score": 0.0029576827451501956, "phrase": "per-state_refresh_overhead"}, {"score": 0.002899965889623787, "phrase": "pdr's_effectiveness"}, {"score": 0.0027469883198624713, "phrase": "bgp"}, {"score": 0.0026148807877309417, "phrase": "proposed_pdr_mechanisms"}, {"score": 0.0025014259919355453, "phrase": "route_insertion"}, {"score": 0.0024405312482831646, "phrase": "removal_errors"}, {"score": 0.0023003498123420237, "phrase": "full_routing_tables"}, {"score": 0.0022665781920241245, "phrase": "session_reset"}, {"score": 0.0021682027434117095, "phrase": "transient_session_failures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["reliability", " fault tolerance", " network state management", " soft-state", " state consistency", " refresh overhead"], "paper_abstract": "Soft-state is a well established approach to designing robust network protocols and applications. However it is unclear how to apply soft-state approach to protocols that must maintain a large amount of state information in a scalable way. For example the Border Gateway Protocol (BGP) is used to maintain the global routing tables at core Internet routers, and the table size is typically above 180,000 entries and continues to grow over time. In this paper, we propose a novel approach, Persistent Detection and Recovery (PDR), to enable large-state protocols and applications to maintain state consistency using a soft-state approach. PDR uses state compression and receiver participation mechanisms to avoid per-state refresh overhead. We evaluate PDR's effectiveness and scalability by applying its mechanisms to maintain the consistency of BGP routing tables between routers. Our results show that the proposed PDR mechanisms are effective and efficient in detecting and correcting route insertion, modification, and removal errors. Moreover, they eliminate the need for routers to exchange full routing tables after a session reset, thus enabling routers to recover quickly from transient session failures. (c) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Persistent detection and recovery of state inconsistencies", "paper_id": "WOS:000244814800004"}