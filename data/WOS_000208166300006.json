{"auto_keywords": [{"score": 0.04236786578702065, "phrase": "parity_group"}, {"score": 0.015365970646628523, "phrase": "fpga"}, {"score": 0.014824680361539853, "phrase": "design_tampers"}, {"score": 0.012717610293979678, "phrase": "tpg"}, {"score": 0.009951643623048654, "phrase": "ecc_parity_groups"}, {"score": 0.00481495049065317, "phrase": "fpga_circuits"}, {"score": 0.004783358523770212, "phrase": "two-level_randomized_ecc_structures"}, {"score": 0.0047363569540686936, "phrase": "novel_trust-based_design_method"}, {"score": 0.0046437283535486545, "phrase": "error-correcting_code"}, {"score": 0.004613272080982458, "phrase": "ecc"}, {"score": 0.0044491728131708505, "phrase": "existing_logic"}, {"score": 0.004376523540676604, "phrase": "extrade-sign_logic-like_trojans"}, {"score": 0.004234749377133962, "phrase": "ecc-based_clb"}, {"score": 0.0041518897573208785, "phrase": "\"parity_groups"}, {"score": 0.004084074821242058, "phrase": "check_clbs"}, {"score": 0.004004151534026732, "phrase": "fpga_circuit"}, {"score": 0.003951736710391294, "phrase": "trust-checking_phase"}, {"score": 0.003912874578852994, "phrase": "test-pattern_generator"}, {"score": 0.0035916263154651975, "phrase": "clb_outputs"}, {"score": 0.0035562929339427803, "phrase": "expected_parities"}, {"score": 0.003373616465890001, "phrase": "parity_groups"}, {"score": 0.0032002941357349448, "phrase": "ora"}, {"score": 0.0030059656149799122, "phrase": "clb_array"}, {"score": 0.002908459938852865, "phrase": "odd_and_even_parities"}, {"score": 0.0028893405654376826, "phrase": "different_input_combinations"}, {"score": 0.0028234043335210895, "phrase": "even_parities"}, {"score": 0.0027228088474257426, "phrase": "error-detecting_property"}, {"score": 0.0026959995147791188, "phrase": "underlying_ecc_lead"}, {"score": 0.002523875743494305, "phrase": "different_clb_function_structures"}, {"score": 0.002490789449396715, "phrase": "parity_group_selection"}, {"score": 0.002378357925871225, "phrase": "check_function_complexity"}, {"score": 0.0022264684349099775, "phrase": "risc_processor_circuit"}, {"score": 0.0021684583061292264, "phrase": "promising_results"}, {"score": 0.0021049977753042253, "phrase": "hardware_overhead"}], "paper_keywords": ["Algorithms", " Design", " Reliability", " Security", " Error-correcting codes", " FPGAs", " masking probability", " parity groups", " parity randomization", " trust checking", " trust-based design"], "paper_abstract": "A novel trust-based design method for FPGA circuits that uses error-correcting code (ECC) structures for detecting design tampers (changes, deletion of existing logic, and addition of extrade-sign logic-like Trojans) is proposed in this article. We determine ECC-based CLB (configuration logic block) \"parity groups\" and embed the check CLBs for each parity group in the FPGA circuit. During a trust-checking phase, a Test-Pattern Generator (TPG) and an Output Response Analyzer (ORA), configured in the FPGA, are used to check that each parity group of CLB outputs produce the expected parities. We use two levels of randomization to thwart attempts by an adversary to discover the parity groups and inject tampers that mask each other, or to tamper with the TPG and ORA so that design tampers remain undetected: (a) randomization of the mapping of the ECC parity groups to the CLB array; (b) randomization within each parity group of odd and even parities for different input combinations (classically, all ECC parity groups have even parities across all inputs). These randomizations along with the error-detecting property of the underlying ECC lead to design tampers being uncovered with very high probabilities, as we show both analytically and empirically. We also classify different CLB function structures and impose a parity group selection in which only similarly structured functions are randomly selected to be in the same parity group in order to minimize check function complexity. Using the 2D code as our underlying ECC and its 2-level randomization, our experiments with inserting 1-10 circuit CLB tampers and 1-5 extraneous logic CLBs in two medium-size circuits and a RISC processor circuit implemented on a Xilinx Spartan-3 FPGA show promising results of 100% tamper detection and 0% false alarms, obtained at a hardware overhead of only 7-10%.", "paper_title": "Trust-Based Design and Check of FPGA Circuits Using Two-Level Randomized ECC Structures", "paper_id": "WOS:000208166300006"}