{"auto_keywords": [{"score": 0.029245254202259995, "phrase": "generic_instances"}, {"score": 0.00481495049065317, "phrase": "embedded_systems"}, {"score": 0.0047563776685277314, "phrase": "static_analysis"}, {"score": 0.004698514007994158, "phrase": "low-end_embedded_systems"}, {"score": 0.004392565073466714, "phrase": "high-level_languages"}, {"score": 0.004007083686875716, "phrase": "code_size"}, {"score": 0.0039341294012600085, "phrase": "major_concern"}, {"score": 0.0038624981944755813, "phrase": "run-time_efficiency"}, {"score": 0.003769006950727621, "phrase": "reasonable_-_programmers"}, {"score": 0.003293688299319582, "phrase": "static_approach"}, {"score": 0.0032336801561165113, "phrase": "whole_program_optimization"}, {"score": 0.0031747618267940155, "phrase": ".net_generics"}, {"score": 0.0030043508031729277, "phrase": "run-time_generics"}, {"score": 0.002641372565763157, "phrase": "rta"}, {"score": 0.0024842242921857705, "phrase": "implementation_scheme"}, {"score": 0.0024389277933858054, "phrase": "code_sharing"}, {"score": 0.002336414425972225, "phrase": "existing_implementation_schemes"}, {"score": 0.0021049977753042253, "phrase": "systematic_way"}], "paper_keywords": ["Algorithms", " Experimentation", " Languages", " Measurement", " Performance", " Closed-world assumption", " generics", " polymorphic recursion", " polymorphism", " subtype test", " type analysis"], "paper_abstract": "Low-end embedded systems are still programmed in C and assembly, and adopting high-level languages such as C# should reduce the length of their development cycles. For these systems, code size is a major concern, but run-time efficiency should also be reasonable - programmers will not migrate to C# unless the overhead compared with C is insignificant. In this paper, we propose a static approach based on whole program optimization for implementing .NET generics in such systems. Indeed, the implementation of run-time generics involves a tradeoff between size and run-time efficiency. In this proposal, generic instances are detected through a generalization of RTA to parametric polymorphism. Also, we propose an implementation scheme which employs code sharing and more effective coercions than boxing. Unlike existing implementation schemes, it is scalable in the number of generic instances without involving boxing and unboxing in a systematic way.", "paper_title": "Lightweight Generics in Embedded Systems through Static Analysis", "paper_id": "WOS:000307580000002"}