{"auto_keywords": [{"score": 0.034345655908861246, "phrase": "cr"}, {"score": 0.03215588613142025, "phrase": "pcr"}, {"score": 0.004815032710263544, "phrase": "gpu."}, {"score": 0.004501453956464956, "phrase": "tridiagonal_linear_systems"}, {"score": 0.004419875021809916, "phrase": "gpu"}, {"score": 0.0035668128900149814, "phrase": "gpu_programs"}, {"score": 0.0034804536625952596, "phrase": "memory_access"}, {"score": 0.003213920601037463, "phrase": "linear_algorithm_complexity"}, {"score": 0.003097865379563127, "phrase": "bank_conflicts"}, {"score": 0.003004419627253349, "phrase": "rd"}, {"score": 0.002723607240517261, "phrase": "basic_algorithms"}, {"score": 0.002210903392596343, "phrase": "sequential_lapack_solver"}, {"score": 0.0021049977753042253, "phrase": "multi-threaded_cpu_solver"}], "paper_keywords": ["Algorithms", " Measurement", " Performance", " Tridiagonal Linear System", " GPGPU", " Performance Optimization"], "paper_abstract": "We study the performance of three parallel algorithms and their hybrid variants for solving tridiagonal linear systems on a GPU: cyclic reduction (CR), parallel cyclic reduction (PCR) and recursive doubling (RD). We develop an approach to measure, analyze, and optimize the performance of GPU programs in terms of memory access, computation, and control overhead. We find that CR enjoys linear algorithm complexity but suffers from more algorithmic steps and bank conflicts, while PCR and RD have fewer algorithmic steps but do more work each step. To combine the benefits of the basic algorithms, we propose hybrid CR+PCR and CR+RD algorithms, which improve the performance of PCR, RD and CR by 21%, 31% and 61% respectively. Our GPU solvers achieve up to a 28x speedup over a sequential LAPACK solver, and a 12x speedup over a multi-threaded CPU solver.", "paper_title": "Fast Tridiagonal Solvers on the GPU", "paper_id": "WOS:000280548100012"}