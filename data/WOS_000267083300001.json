{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "parallel_software_design"}, {"score": 0.004424768776701965, "phrase": "parallel_programs"}, {"score": 0.004301834610818624, "phrase": "sequential_application_code"}, {"score": 0.00422177384286051, "phrase": "generic_components"}, {"score": 0.004143196873246147, "phrase": "specific_functionality"}, {"score": 0.0036324746826127997, "phrase": "architectural_approach"}, {"score": 0.0035648266669315943, "phrase": "aspect-oriented_programming"}, {"score": 0.0034657012607680203, "phrase": "arbitrary_object-oriented_components"}, {"score": 0.003095923814666088, "phrase": "different_applications"}, {"score": 0.0026384167183586015, "phrase": "aspect-oriented_techniques"}, {"score": 0.002493592357827492, "phrase": "existing_code"}, {"score": 0.002248366278757655, "phrase": "conventional_object-oriented_programming"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["aspect-oriented programming", " parallel programming", " code re-use", " software metrics"], "paper_abstract": "In this paper we deal with building parallel programs based on sequential application code and generic components providing specific functionality for parallelization, like load balancing or fault tolerance. We describe an architectural approach employing aspect-oriented programming to assemble arbitrary object-oriented components. Several non-trivial crosscutting concerns arising from parallelization are addressed in the light of different applications, which are representative of the most common types of parallelism. In particular, we demonstrate how aspect-oriented techniques allow us to leave all existing code untouched. We evaluate and compare our approach with its counterparts in conventional object-oriented programming. Copyright (C) 2008 John Wiley & Sons, Ltd.", "paper_title": "Aspect-oriented component assembly-a case study in parallel software design", "paper_id": "WOS:000267083300001"}