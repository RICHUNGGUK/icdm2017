{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "query_containment"}, {"score": 0.007687932334758616, "phrase": "path_intersection"}, {"score": 0.0076310885154507995, "phrase": "path_equality"}, {"score": 0.007574661785502478, "phrase": "path_complementation"}, {"score": 0.00477924690801092, "phrase": "expressive_fragments"}, {"score": 0.004691142995021392, "phrase": "xpath"}, {"score": 0.004587535692463736, "phrase": "xml_documents"}, {"score": 0.00443638953122199, "phrase": "query_answering"}, {"score": 0.004403480614319231, "phrase": "static_analysis"}, {"score": 0.0039380388343479384, "phrase": "richer_language"}, {"score": 0.0037658881407605445, "phrase": "corexpath"}, {"score": 0.003000131251513464, "phrase": "exptime"}, {"score": 0.0026726283357752585, "phrase": "almost_all_cases"}, {"score": 0.0026428931714865115, "phrase": "transitive_closure"}], "paper_keywords": ["Languages", " Algorithms", " XML", " XPath", " containment", " satisfiability", " complexity"], "paper_abstract": "XPath is a prominent W3C standard for navigating XML documents that has stimulated a lot of research into query answering and static analysis. In particular, query containment has been studied extensively for fragments of the 1.0 version of this standard, whereas little is known about query containment in (fragments of) the richer language XPath 2.0. In this article, we consider extensions of CoreXPath, the navigational core of XPath 1.0, with operators that are part of or inspired by XPath 2.0: path intersection, path equality, path complementation, for-loops, and transitive closure. For each combination of these operators, we determine the complexity of query containment, both with and without DTDs. It turns out to range from EXPTIME (for extensions with path equality) and 2-EXPTIME (for extensions with path intersection) to non-elementary (for extensions with path complementation or for-loops). In almost all cases, adding transitive closure on top has no further impact on the complexity. We also investigate the effect of dropping the upward and/or sibling axes, and show that this sometimes leads to a reduction in complexity. Since the languages we study include negation and conjunction in filters, our complexity results can equivalently be stated in terms of satisfiability. We also analyze the above languages in terms of succinctness.", "paper_title": "The Complexity of Query Containment in Expressive Fragments of XPath 2.0", "paper_id": "WOS:000272040200002"}