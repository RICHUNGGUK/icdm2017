{"auto_keywords": [{"score": 0.03829870765748108, "phrase": "unnecessary_connections"}, {"score": 0.03788205987705418, "phrase": "crossbar_switches"}, {"score": 0.030298707591326007, "phrase": "previous_methods"}, {"score": 0.028148907699406273, "phrase": "partial_connection"}, {"score": 0.02653640500889722, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "on-chip_cascaded"}, {"score": 0.004550029253278477, "phrase": "modern_high-performance_embedded_systems"}, {"score": 0.004251210982670317, "phrase": "crossbar_network"}, {"score": 0.004203343568960231, "phrase": "cascaded_fashion"}, {"score": 0.004109212945115815, "phrase": "crossbar_switch"}, {"score": 0.0037674258625824113, "phrase": "area_efficiency"}, {"score": 0.0035599338383885447, "phrase": "existing_methods"}, {"score": 0.0034279721355412285, "phrase": "synthesis_step"}, {"score": 0.0033385105985286154, "phrase": "partially_connected_crossbar_switches"}, {"score": 0.0032884384364324395, "phrase": "synthesis_flow"}, {"score": 0.003226899588787952, "phrase": "optimal_topology_search_space"}, {"score": 0.00307221807606505, "phrase": "postprocessing_techniques"}, {"score": 0.0029694830678462787, "phrase": "exhaustive_search"}, {"score": 0.0028164399450837465, "phrase": "heuristic_method"}, {"score": 0.0027846824619356583, "phrase": "iterative_switch_merging"}, {"score": 0.002722234804904997, "phrase": "authors'_knowledge"}, {"score": 0.002572158343938064, "phrase": "topology_synthesis"}, {"score": 0.0022110892229209407, "phrase": "existing_topology_synthesis_methods"}], "paper_keywords": ["System-on-Chip (SoC)", " crossbar", " topology synthesis", " partial connection", " on-chip interconnection network"], "paper_abstract": "The crossbar (also called bus matrix) solution is known as one of the most effective communication architectures for modern high-performance embedded systems. To make it even more effective, several topology synthesis methods have been proposed. They mostly generate a crossbar network in a cascaded fashion under the assumption that each crossbar switch is fully connected (i.e., each input has a connection to every output). This assumption often limits optimizing the area efficiency and/or performance of the network due to the unnecessary connections inside the crossbar switches. Some existing methods marginally improve their synthesis results by eliminating the unnecessary connections after the synthesis step. Such postprocessing approaches make sense since considering partially connected crossbar switches earlier in the synthesis flow can greatly increase the optimal topology search space, thereby increasing the runtime. However, the result from these postprocessing techniques is typically far inferior to that from the exhaustive search. In this work, we tackle such limitations of previous methods by introducing a heuristic method based on iterative switch merging. To the best of authors' knowledge, none of previous methods consider the partial connection of crossbar switches in the middle of the topology synthesis. Our experimental results prove the effectiveness of the proposed method by showing up to 30.35 percent of area saving against those methods that consider the partial connection only in a postprocess. The results also show the superiority of the proposed method against the existing topology synthesis methods, showing up to 49.09 percent area saving and synthesis time reduction by several orders of magnitude.", "paper_title": "Partial Connection-Aware Topology Synthesis for On-Chip Cascaded Crossbar Network", "paper_id": "WOS:000297587000007"}