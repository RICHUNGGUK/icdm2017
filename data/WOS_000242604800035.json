{"auto_keywords": [{"score": 0.04788181103940386, "phrase": "dynamic_programming"}, {"score": 0.038906160240873275, "phrase": "solution_lists"}, {"score": 0.00481495049065317, "phrase": "efficient_data_structure"}, {"score": 0.004383406949799696, "phrase": "useful_technique"}, {"score": 0.0035648913398596345, "phrase": "shi"}, {"score": 0.003306559295382181, "phrase": "time_algorithm"}, {"score": 0.003154701855951328, "phrase": "merge_operation"}, {"score": 0.003038237581227068, "phrase": "balanced_binary_search_trees"}, {"score": 0.0028986672783671147, "phrase": "superb_performance"}, {"score": 0.002447101794397243, "phrase": "merge_operations"}, {"score": 0.0021857667493036786, "phrase": "shi's_under"}], "paper_keywords": ["data structure", " dynamic programming", " timing optimization"], "paper_abstract": "Dynamic programming is a useful technique to handle slicing floorplan, technology mapping, and buffering problems, where many maxplus merge operations of solution lists are needed. Shi proposed an efficient O(n log n) time algorithm to speed up the merge operation. Based on balanced binary search trees, his algorithm showed superb performance with the most unbalanced sizes of merging solution lists. The authors propose in this paper a more efficient data structure for the merge operations. With parameters to adjust adaptively, their algorithm works better than Shi's under all cases, unbalanced, balanced, and mix sizes. Their data structure is also simpler.", "paper_title": "An efficient data structure for maxplus merge in dynamic programming", "paper_id": "WOS:000242604800035"}