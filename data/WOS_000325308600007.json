{"auto_keywords": [{"score": 0.03729083385782431, "phrase": "target_throughput"}, {"score": 0.00481495049065317, "phrase": "cluster_systems"}, {"score": 0.004659951478263083, "phrase": "parallel_application"}, {"score": 0.0045843245695654875, "phrase": "input_data_stream"}, {"score": 0.0045284072672385975, "phrase": "difficult_challenge"}, {"score": 0.00447316895126645, "phrase": "typical_coarse-grain_applications"}, {"score": 0.0044005599565517875, "phrase": "computation_time"}, {"score": 0.004241451614311598, "phrase": "maximum_achievable_throughput"}, {"score": 0.0041555469216463855, "phrase": "maximum_task_computation_time"}, {"score": 0.0038603905208013482, "phrase": "source_code"}, {"score": 0.003456359260921982, "phrase": "input_parameter"}, {"score": 0.00335867620389808, "phrase": "new_task_graph_structure"}, {"score": 0.003223883109446599, "phrase": "first_replication_mechanism"}, {"score": 0.003056682083784002, "phrase": "inner_task_data_parallelism"}, {"score": 0.0030193416820392554, "phrase": "second_mechanism"}, {"score": 0.002970260970134645, "phrase": "task_copy_replication_mechanism"}, {"score": 0.002921975748248106, "phrase": "new_execution_paths"}, {"score": 0.0028862761537904206, "phrase": "application_task_graph_structure"}, {"score": 0.002626645763725465, "phrase": "cluster_system"}, {"score": 0.002541911724234347, "phrase": "ivus"}, {"score": 0.0025211567863488962, "phrase": "intra-vascular_ultra-sound"}, {"score": 0.002449839292715327, "phrase": "basiz"}, {"score": 0.002429954029931459, "phrase": "bright"}, {"score": 0.002294294558114909, "phrase": "obtained_throughput"}, {"score": 0.0022385401780982204, "phrase": "proposed_replication_mechanism"}, {"score": 0.002157433262687853, "phrase": "original_implementation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Streaming applications", " Pipeline execution", " Data parallelism", " Task parallelism", " Task replication mechanisms"], "paper_abstract": "The exploitation of throughput in a parallel application that processes an input data stream is a difficult challenge. For typical coarse-grain applications, where the computation time of tasks is greater than their communication time, the maximum achievable throughput is determined by the maximum task computation time. Thus, the improvement in throughput above this maximum would eventually require the modification of the source code of the tasks. In this work, we address the improvement of throughput by proposing two task replication methodologies that have the target throughput to be achieved as an input parameter. They proceed by generating a new task graph structure that permits the target throughput to be achieved. The first replication mechanism, named DPRM (Data Parallel Replication Mechanism), exploits the inner task data parallelism. The second mechanism, named TCRM (Task Copy Replication Mechanism), creates new execution paths inside the application task graph structure that allows more than one instance of data to be processed concurrently. We evaluate the effectiveness of these mechanisms with three real applications executed in a cluster system: the MPEG2 video compressor, the IVUS (Intra-Vascular Ultra-Sound) medical image application and the BASIZ (Bright and SAtured Images Zone) video processing application. In all these cases, the obtained throughput was greater after applying the proposed replication mechanism than what the application could provide with the original implementation. (C) 2013 Elsevier Inc. All rights reserved.", "paper_title": "Enhancing throughput for streaming applications running on cluster systems", "paper_id": "WOS:000325308600007"}