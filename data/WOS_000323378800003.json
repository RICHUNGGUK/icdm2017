{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "etl_processes"}, {"score": 0.004151672979694732, "phrase": "etl"}, {"score": 0.0040777192615062815, "phrase": "inherently_complex_problem"}, {"score": 0.0038810583785936505, "phrase": "previous_work"}, {"score": 0.0037608593980593035, "phrase": "vendor-independent_language"}, {"score": 0.003693846909452865, "phrase": "design_complexity"}, {"score": 0.0036443694410100507, "phrase": "disparate_etl_languages"}, {"score": 0.003595552309967789, "phrase": "specific_design_tools"}, {"score": 0.003563370084662192, "phrase": "steep_learning_curves"}, {"score": 0.0032277611129050234, "phrase": "designed_processes"}, {"score": 0.0031845067058084583, "phrase": "executable_language"}, {"score": 0.0030036501770192865, "phrase": "organization_data_infrastructure"}, {"score": 0.0028586409810976367, "phrase": "model-driven_framework"}, {"score": 0.002820319063320601, "phrase": "automatic_code_generation_capability"}, {"score": 0.0027825094419000637, "phrase": "maintenance_support"}, {"score": 0.002543043781904587, "phrase": "different_etl_commercial_tools"}, {"score": 0.00249767641333441, "phrase": "model-to-model_transformations"}, {"score": 0.0024421008630165046, "phrase": "etl_models"}, {"score": 0.0023346234464901978, "phrase": "generated_code"}, {"score": 0.0023033100935570755, "phrase": "data_source_evolution"}, {"score": 0.0021920373388760314, "phrase": "initial_validation"}, {"score": 0.0021049977753042253, "phrase": "code_generation"}], "paper_keywords": ["Code Generation", " Conceptual Model", " Data Warehouses", " ETL Process", " Maintenance", " Model-Driven Development"], "paper_abstract": "Business Intelligence (BI) applications require the design, implementation, and maintenance of processes that extract, transform, and load suitable data for analysis. The development of these processes (known as ETL) is an inherently complex problem that is typically costly and time consuming. In a previous work, the authors have proposed a vendor-independent language for reducing the design complexity due to disparate ETL languages tailored to specific design tools with steep learning curves. Nevertheless, the designer still faces two major issues during the development of ETL processes: (i) how to implement the designed processes in an executable language, and (ii) how to maintain the implementation when the organization data infrastructure evolves. In this paper, the authors propose a model-driven framework that provides automatic code generation capability and ameliorate maintenance support of our ETL language. They present a set of model-to-text transformations able to produce code for different ETL commercial tools as well as model-to-model transformations that automatically update the ETL models with the aim of supporting the maintenance of the generated code according to data source evolution. A demonstration using an example is conducted as an initial validation to show that the framework covering modeling, code generation and maintenance could be used in practice.", "paper_title": "A BPMN-Based Design and Maintenance Framework for ETL Processes", "paper_id": "WOS:000323378800003"}