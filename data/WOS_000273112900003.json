{"auto_keywords": [{"score": 0.02842634847030446, "phrase": "rdbms"}, {"score": 0.00481495049065317, "phrase": "traditional_workload_management_methods"}, {"score": 0.004589124394375718, "phrase": "current_system_status"}, {"score": 0.003034916887102753, "phrase": "transaction_throughput"}, {"score": 0.0027830917623582903, "phrase": "transaction_sequence"}, {"score": 0.002601727192945944, "phrase": "resource_contention"}, {"score": 0.0025034338848015187, "phrase": "resource_sharing"}, {"score": 0.00236289633510808, "phrase": "transaction_reordering_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Data warehousing", " Workload management", " Transaction reordering", " Continuous data loading", " Synchronized scans"], "paper_abstract": "Traditional workload management methods mainly focus on the current system status while information about the interaction between queued and running transactions is largely ignored. This paper proposes using transaction reordering, a workload management method that considers both the current system status and information about the interaction between queued and running transactions, to improve the transaction throughput in an RDBMS. Our main idea is to reorder the transaction sequence submitted to the RDBMS to minimize resource contention and to maximize resource sharing. The advantages of the transaction reordering method are demonstrated through experiments with three commercial RDBMSs. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Transaction reordering", "paper_id": "WOS:000273112900003"}