{"auto_keywords": [{"score": 0.05003562475801573, "phrase": "computational_biology"}, {"score": 0.04451602934278974, "phrase": "lcs_problem"}, {"score": 0.03820437675720094, "phrase": "constraint_patterns"}, {"score": 0.03188985144719231, "phrase": "sigma"}, {"score": 0.004585433265422727, "phrase": "computational_molecular_biology"}, {"score": 0.004529776351030488, "phrase": "longest_common_subsequence"}, {"score": 0.004420472010542188, "phrase": "well-known_and_widely_used_measure"}, {"score": 0.003976373766630594, "phrase": "input_sequences"}, {"score": 0.0037406791638601206, "phrase": "different_variants"}, {"score": 0.0036652492107503956, "phrase": "multiple_input_sequences"}, {"score": 0.0035913348026306306, "phrase": "l_input_sequences"}, {"score": 0.003562186600028245, "phrase": "l_constraint_patterns"}, {"score": 0.0032303247597280987, "phrase": "lcs"}, {"score": 0.0031393948330209224, "phrase": "finite_automata_based_efficient_algorithms"}, {"score": 0.002881793492919646, "phrase": "sigma_vertical_bar_rn-l"}, {"score": 0.002755384932325921, "phrase": "resulting_subsequence_automaton"}, {"score": 0.00266693888510356, "phrase": "input_sequence"}, {"score": 0.002613103872300205, "phrase": "underlying_alphabet"}, {"score": 0.0025499307228648883, "phrase": "extensive_experimental_study"}, {"score": 0.002508663916554954, "phrase": "practical_performance"}, {"score": 0.0024580159789774516, "phrase": "experimental_results"}, {"score": 0.002274684393868218, "phrase": "practical_sequence_analysis"}, {"score": 0.00221063611719246, "phrase": "existing_algorithms"}, {"score": 0.0021571717917276724, "phrase": "memory_intensive_dynamic_programming_based_methods"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Sequence analysis", " Algorithm", " Finite automaton"], "paper_abstract": "The knowledge of the similarity of two or more sequences is crucial in computational molecular biology. The longest common subsequence (LCS) is a well-known and widely used measure for sequence similarity. Constrained variants of the LCS problem have been studied in the literature where the knowledge of the functionalities or structures of the input sequences are provided in the form of inclusion/exclusion constraint patterns. In this paper we focus on different variants of the LCS problem involving multiple input sequences and constraint patterns. Given L input sequences and l constraint patterns, the goal here is to construct an LCS of the given sequences such that each of the constraint patterns occurs/does not occur in the LCS as a subsequence/substring. We devise finite automata based efficient algorithms for all the variants of the problem that run in O(vertical bar Sigma vertical bar(R + L) + nL + vertical bar Sigma vertical bar Rn-l) time, where R is the size of the resulting subsequence automaton, n is the length of each input sequence and Sigma is the underlying alphabet. We also conduct an extensive experimental study to evaluate the practical performance of our algorithms. The experimental results suggest the superiority of our finite automata based algorithms. Therefore, we believe that our automata based algorithms will be useful in practical sequence analysis in computational biology and will replace the existing algorithms that are mostly based on memory intensive dynamic programming based methods. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Constrained sequence analysis algorithms in computational biology", "paper_id": "WOS:000346543000015"}