{"auto_keywords": [{"score": 0.044390186309013875, "phrase": "computational_kernels"}, {"score": 0.043539190163733234, "phrase": "fixed_point_implementations"}, {"score": 0.00481495049065317, "phrase": "hardware_converters"}, {"score": 0.004671588539217021, "phrase": "floating_point_software_applications"}, {"score": 0.004624751696958501, "phrase": "static_and_dynamic_fixed_point_coprocessors"}, {"score": 0.004397487039229447, "phrase": "significant_performance_gains"}, {"score": 0.004118587636081584, "phrase": "software_developers"}, {"score": 0.003975781274672803, "phrase": "floating_point_representations"}, {"score": 0.0037235274565193665, "phrase": "fixed_point_representation"}, {"score": 0.003452218803245602, "phrase": "arizona_float"}, {"score": 0.003366233863411861, "phrase": "fixed_hardware_library"}, {"score": 0.0031366648074858555, "phrase": "floating_point_hardware_converters"}, {"score": 0.002922705896608178, "phrase": "floating_point_domain"}, {"score": 0.0028355237433457313, "phrase": "memory_subsystem"}, {"score": 0.0027929100418926725, "phrase": "fixed_point_domain"}, {"score": 0.0026023381988430666, "phrase": "floating_point_software_kernels"}, {"score": 0.0025374674652885354, "phrase": "fixed_point_hardware_coprocessors"}, {"score": 0.0024742098091226203, "phrase": "application_developers"}, {"score": 0.0024247382451294255, "phrase": "software_applications"}, {"score": 0.002202894673025544, "phrase": "floating_point_software_application"}, {"score": 0.0021697677572213086, "phrase": "statically_determined_fixed_point_hardware_coprocessors"}, {"score": 0.0021479597698614373, "phrase": "dynamically_adaptable_fixed_point_hardware_coprocessors"}, {"score": 0.0021049977753042253, "phrase": "required_fixed_point_representation"}], "paper_keywords": ["Hardware/software partitioning", " Floating point to fixed conversion", " Floating point", " Fixed point", " Dynamically adaptable"], "paper_abstract": "While hardware/software partitioning has been shown to provide significant performance gains, most hardware/software partitioning approaches are limited to partitioning computational kernels utilizing integers or fixed point implementations. Software developers often initially develop an application using floating point representations built-in to most programming languages and later convert the application to a fixed point representation-a potentially time consuming process. In this paper, we present the Arizona Float a double dagger\" Fixed Hardware Library (AFFHL) consisting of efficient, configurable floating point to fixed point and fixed point to floating point hardware converters. By utilizing these converters, a system's hardware/software implementation can be separated into a floating point domain consisting of the microprocessor and memory subsystem and a fixed point domain consisting of one or more partitioned hardware coprocessors. This separation enables a rapid hardware/software partitioning approach in which floating point software kernels can be implemented using fixed point hardware coprocessors without the need for application developers to first rewrite software applications as fixed point implementations. We further present an overview of a basic hardware/software partitioning methodology for rapidly partitioning computational kernels within floating point software application to either statically determined fixed point hardware coprocessors or dynamically adaptable fixed point hardware coprocessors in which the required fixed point representation can be dynamically determined and adjusted at runtime.", "paper_title": "Float-to-fixed and fixed-to-float hardware converters for rapid hardware/software partitioning of floating point software applications to static and dynamic fixed point coprocessors", "paper_id": "WOS:000270736200001"}