{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "formal_program_verification"}, {"score": 0.004763565662615503, "phrase": "strong_assurance"}, {"score": 0.004539005582217305, "phrase": "mathematical_proof"}, {"score": 0.004324985524216987, "phrase": "program_invariants"}, {"score": 0.0036227329311981195, "phrase": "formal_verification"}, {"score": 0.0033602844686125375, "phrase": "formal_proofs"}, {"score": 0.002969628818856786, "phrase": "program_safety"}, {"score": 0.002681315076008658, "phrase": "generated_object_code"}, {"score": 0.002382182688788248, "phrase": "average_runtime_performance"}, {"score": 0.0022818671653408278, "phrase": "worst-case_execution_time"}, {"score": 0.0021049977753042253, "phrase": "para-virtualized_linux"}], "paper_keywords": ["formal verification", " micro-kernel", " optimization"], "paper_abstract": "Formal program verification offers strong assurance of correctness, backed by the strength of mathematical proof. Constructing these proofs requires humans to identify program invariants, and show that they are always maintained. These invariants are then used to prove that the code adheres to its specification. In this paper, we explore the overlap between formal verification and code optimization. We propose two approaches to reuse the invariants derived in formal proofs and integrate them into compilation. The first applies invariants extracted from the proof, while the second leverages the property of program safety (i.e., the absence of bugs). We reuse this information to improve the performance of generated object code. We evaluated these methods on seL4, a real-world formally-verified microkernel, and obtained improvements in average runtime performance (up to 28%) and in worst-case execution time (up to 25%). In macro-benchmarks, we found the performance of para-virtualized Linux running on the microkernel improved by 6-16%.", "paper_title": "Code Optimizations Using Formally Verified Properties", "paper_id": "WOS:000327697300024"}