{"auto_keywords": [{"score": 0.0461275073104745, "phrase": "multicore_platform"}, {"score": 0.00481495049065317, "phrase": "real-time_applications"}, {"score": 0.00462773520532301, "phrase": "full_exploitation"}, {"score": 0.004536862734384202, "phrase": "computational_power"}, {"score": 0.003922580121023413, "phrase": "modern_embedded_systems"}, {"score": 0.0037699306119313154, "phrase": "timing_requirements"}, {"score": 0.0035519826240477444, "phrase": "common_resources"}, {"score": 0.003459191419478298, "phrase": "reciprocal_interference"}, {"score": 0.003413705707789296, "phrase": "critical_activities"}, {"score": 0.0033465923623290034, "phrase": "resource_reservation_mechanism"}, {"score": 0.003153041030690117, "phrase": "temporal_isolation"}, {"score": 0.0029706504420983896, "phrase": "general_methodology"}, {"score": 0.0028930017387859804, "phrase": "total_computing_power"}, {"score": 0.0027256122357680393, "phrase": "virtual_processors"}, {"score": 0.0025849489224175548, "phrase": "physical_platform"}, {"score": 0.002387415084371473, "phrase": "precedence_relations"}, {"score": 0.0023249757987087055, "phrase": "directed_acyclic_graph"}], "paper_keywords": ["Multiprocessor", " partition algorithm", " real-time systems", " resource reservation"], "paper_abstract": "A full exploitation of the computational power available in a multicore platform requires the software to be specified in terms of parallel execution flows. At the same time, modern embedded systems often consist of more parallel applications with timing requirements, concurrently executing on the same platform and sharing common resources. To prevent reciprocal interference among critical activities, a resource reservation mechanism is highly desired in the kernel to achieve temporal isolation. In this paper, we propose a general methodology for abstracting the total computing power available on a multicore platform by a set of virtual processors, to allocate applications independently of the physical platform. The application, described as a set of tasks with precedence relations expressed by a directed acyclic graph, is automatically partitioned into a set of subgraphs that are selected to minimize either the overall bandwidth consumption or the required number of cores.", "paper_title": "Partitioning Real-Time Applications Over Multicore Reservations", "paper_id": "WOS:000290414000015"}