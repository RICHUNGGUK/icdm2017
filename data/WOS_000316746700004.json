{"auto_keywords": [{"score": 0.04432396220512617, "phrase": "design_patterns"}, {"score": 0.014946223419944418, "phrase": "software_designs"}, {"score": 0.011844766141167782, "phrase": "design_pattern_rot"}, {"score": 0.00481495049065317, "phrase": "design_pattern_decay"}, {"score": 0.004622450915803531, "phrase": "software_systems"}, {"score": 0.004392565073466714, "phrase": "operational_environments"}, {"score": 0.004007083686875716, "phrase": "design_pattern_realizations"}, {"score": 0.003966388754366831, "phrase": "grime-non-pattern-related_code"}, {"score": 0.003711723285313348, "phrase": "structural_or_functional_integrity"}, {"score": 0.0036553070575015344, "phrase": "design_pattern"}, {"score": 0.003545024951402821, "phrase": "pattern_realization"}, {"score": 0.003351381374975648, "phrase": "grime_buildup"}, {"score": 0.0032668821950788533, "phrase": "structural_integrity"}, {"score": 0.0031521392193570846, "phrase": "system_testability"}, {"score": 0.0025826247025542235, "phrase": "multiple_case_study_methodology"}, {"score": 0.0022961534630650347, "phrase": "considerable_evidence"}, {"score": 0.002272794656458419, "phrase": "pattern_decay"}, {"score": 0.0021928902836049384, "phrase": "design_pattern_components"}, {"score": 0.002137537770621167, "phrase": "pattern_intent"}, {"score": 0.0021049977753042253, "phrase": "pattern_modularity"}], "paper_keywords": ["Design concepts", " Object-oriented design methods", " Design patterns", " Software evolution", " Decay", " Grime", " Technical debt", " Multiple case study"], "paper_abstract": "Software designs decay as systems, uses, and operational environments evolve. Decay can involve the design patterns used to structure a system. Classes that participate in design pattern realizations accumulate grime-non-pattern-related code. Design pattern realizations can also rot, when changes break the structural or functional integrity of a design pattern. Design pattern rot can prevent a pattern realization from fulfilling its responsibilities, and thus represents a fault. Grime buildup does not break the structural integrity of a pattern but can reduce system testability and adaptability. This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems. We generated UML models from the three implementations and employed a multiple case study methodology to analyze the evolution of the designs. We found no evidence of design pattern rot in these systems. However, we found considerable evidence of pattern decay due to grime. Dependencies between design pattern components increased without regard for pattern intent, reducing pattern modularity, and decreasing testability and adaptability. The study of decay and grime showed that the grime that builds up around design patterns is mostly due to increases in coupling.", "paper_title": "A multiple case study of design pattern decay, grime, and rot in evolving software systems", "paper_id": "WOS:000316746700004"}