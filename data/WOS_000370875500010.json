{"auto_keywords": [{"score": 0.040537135041717604, "phrase": "memory_references"}, {"score": 0.00481495049065317, "phrase": "abstract_interpretation_based_cache_persistence_analysis"}, {"score": 0.004719473826242326, "phrase": "hard_real-time_embedded_systems"}, {"score": 0.004534136929881113, "phrase": "worst-case_execution_time"}, {"score": 0.004488952124078303, "phrase": "wcet"}, {"score": 0.0043560464825349275, "phrase": "schedulability_analysis"}, {"score": 0.004312622975366676, "phrase": "precise_cache_persistence_analysis"}, {"score": 0.004205940624913343, "phrase": "wcet_estimation"}, {"score": 0.003980400251874277, "phrase": "persistence_analysis"}, {"score": 0.003785836059995376, "phrase": "existing_safe_approaches"}, {"score": 0.003729335910488339, "phrase": "multiple_sources"}, {"score": 0.0036007478932719417, "phrase": "precise_results"}, {"score": 0.002976019715894587, "phrase": "first_method"}, {"score": 0.002931569771634119, "phrase": "update_function"}, {"score": 0.002830410693265704, "phrase": "second_method"}, {"score": 0.002246955931290095, "phrase": "proposed_methods"}, {"score": 0.002158505888557746, "phrase": "storage_space"}, {"score": 0.0021369416775353107, "phrase": "analysis_time"}, {"score": 0.0021049977753042253, "phrase": "different_methods"}], "paper_keywords": ["Performance", " Verification", " Cache Analysis", " WCET", " Persistence Anlysis"], "paper_abstract": "When designing hard real-time embedded systems, it is required to estimate the worst-case execution time (WCET) of each task for schedulability analysis. Precise cache persistence analysis can significantly tighten the WCET estimation, especially when the program has many loops. Methods for persistence analysis should safely and precisely classify memory references as persistent. Existing safe approaches suffer from multiple sources of pessimism and may not provide precise results. In this paper, we first identify some sources of pessimism that two recent approaches based on younger set and may analysis may encounter. Then, we propose two methods to eliminate these sources of pessimism. The first method improves the update function of the may analysis-based approach; and the second method integrates the younger set-based and may analysis-based approaches together to further reduce pessimism. We also prove the two proposed methods are still safe. We evaluate the approaches on a set of benchmarks and observe the number of memory references classified as persistent is increased by the proposed methods. Moreover, we empirically compare the storage space and analysis time used by different methods.", "paper_title": "Improving the Precision of Abstract Interpretation Based Cache Persistence Analysis", "paper_id": "WOS:000370875500010"}