{"auto_keywords": [{"score": 0.008675873678787667, "phrase": "source_code"}, {"score": 0.008370896538761304, "phrase": "automated_bug_hunting"}, {"score": 0.00481495049065317, "phrase": "static-analysis_methods"}, {"score": 0.004752467467173928, "phrase": "good_approximation"}, {"score": 0.004645057834614705, "phrase": "memory_objects"}, {"score": 0.0045997680394590365, "phrase": "stripped_executable"}, {"score": 0.004197703302809062, "phrase": "intermediate_representations"}, {"score": 0.0038181472934630347, "phrase": "program_understanding"}, {"score": 0.0035531906001888204, "phrase": "useful_information"}, {"score": 0.0035300318844877286, "phrase": "memory_accesses"}, {"score": 0.003450154514800989, "phrase": "debugging_information"}, {"score": 0.00320016832003312, "phrase": "system_dependence_graph"}, {"score": 0.0028821186265508597, "phrase": "backward_slicing"}, {"score": 0.0025120232221781825, "phrase": "device-driver_analyzer"}, {"score": 0.0024391051991149663, "phrase": "device-driver_executables"}, {"score": 0.0022995431219125536, "phrase": "known_bugs"}, {"score": 0.0022401007567642347, "phrase": "source-code_analysis_tools"}, {"score": 0.0022037303797015095, "phrase": "useful_error_traces"}, {"score": 0.002167949230651206, "phrase": "low_false-positive_rate"}, {"score": 0.002132747804996944, "phrase": "first_known_application"}, {"score": 0.0021049977753042253, "phrase": "industrial_executables"}], "paper_keywords": ["Algorithms", " Security", " Theory", " Verification", " Abstract interpretation", " context-sensitive analysis", " data structure recovery", " interprocedural dataflow analysis", " pointer analysis", " reverse engineering", " static analysis"], "paper_abstract": "Over the last seven years, we have developed static-analysis methods to recover a good approximation to the variables and dynamically allocated memory objects of a stripped executable, and to track the flow of values through them. The article presents the algorithms that we developed, explains how they are used to recover Intermediate Representations (IRs) from executables that are similar to the IRs that would be available if one started from source code, and describes their application in the context of program understanding and automated bug hunting. Unlike algorithms for analyzing executables that existed prior to our work, the ones presented in this article provide useful information about memory accesses, even in the absence of debugging information. The ideas described in the article are incorporated in a tool for analyzing Intel x86 executables, called CodeSurfer/x86. CodeSurfer/x86 builds a system dependence graph for the program, and provides a GUI for exploring the graph by (i) navigating its edges, and (ii) invoking operations, such as forward slicing, backward slicing, and chopping, to discover how parts of the program can impact other parts. To assess the usefulness of the IRs recovered by CodeSurfer/x86 in the context of automated bug hunting, we built a tool on top of CodeSurfer/x86, called Device-Driver Analyzer for x86 (DDA/x86), which analyzes device-driver executables for bugs. Without the benefit of either source code or symbol-table/debugging information, DDA/x86 was able to find known bugs (that had been discovered previously by source-code analysis tools), along with useful error traces, while having a low false-positive rate. DDA/x86 is the first known application of program analysis/verification techniques to industrial executables.", "paper_title": "WYSINWYX: What You See Is Not What You eXecute", "paper_id": "WOS:000282759900004"}