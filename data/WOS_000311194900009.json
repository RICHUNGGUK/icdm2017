{"auto_keywords": [{"score": 0.043284735713932626, "phrase": "data_points"}, {"score": 0.00481495049065317, "phrase": "particle_simulations"}, {"score": 0.004195418010131832, "phrase": "simultaneous_update"}, {"score": 0.003958937342925219, "phrase": "intended_application_area"}, {"score": 0.0038457240885563146, "phrase": "continuum_phenomena"}, {"score": 0.003424225677958491, "phrase": "tree_updates"}, {"score": 0.0033021988455635403, "phrase": "small_changes"}, {"score": 0.0030048355421601705, "phrase": "proposed_algorithm"}, {"score": 0.0025611773887867255, "phrase": "second_technique"}, {"score": 0.002487835869510301, "phrase": "data_point"}, {"score": 0.0022801453935251503, "phrase": "significant_performance_gains"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Quadtree", " Point-region quadtree", " Octree", " Particle simulations", " Crowd simulation", " Continuum dynamics"], "paper_abstract": "We propose an algorithm for dynamically updating point-region (PR) quadtrees. Our algorithm is optimized for simultaneous update of data points comprising a quadtree. The intended application area focuses on simulating continuum phenomena, such as crowds, fluids, and smoke. We minimize the number of tree updates by making use of small changes in the positions of data points. We compare the efficiency of the proposed algorithm with two other approaches for updating a quadtree. One of these techniques creates the tree from scratch at each time-step. The second technique subsequently deletes a data point from the tree and reinserts it in its updated position. We achieve significant performance gains with our method in both cases. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "Dynamic point-region quadtrees for particle simulations", "paper_id": "WOS:000311194900009"}