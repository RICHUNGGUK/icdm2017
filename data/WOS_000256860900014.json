{"auto_keywords": [{"score": 0.047188363272757154, "phrase": "sensor_motes"}, {"score": 0.022300935107265128, "phrase": "ecc"}, {"score": 0.0188876721099532, "phrase": "field_multiplication"}, {"score": 0.0075828270000451664, "phrase": "running_time"}, {"score": 0.006638889675703765, "phrase": "koblitz_curve"}, {"score": 0.004688321299229397, "phrase": "generally_accepted_opinion"}, {"score": 0.004646852519870358, "phrase": "elliptic_curve_cryptosystem"}, {"score": 0.004497899823062428, "phrase": "small_word_size"}, {"score": 0.004431774680887588, "phrase": "xor_multiplication"}, {"score": 0.004302413946305072, "phrase": "current_low-powered_microprocessors"}, {"score": 0.0040189760459195725, "phrase": "wireless_sensor_networks"}, {"score": 0.003776462258204936, "phrase": "redundant_memory_accesses"}, {"score": 0.0036444868761853293, "phrase": "field_reduction_process"}, {"score": 0.003506694800418611, "phrase": "unnecessary_memory_accesses"}, {"score": 0.003465350958971198, "phrase": "proposed_strategies"}, {"score": 0.0032082065314048974, "phrase": "execution_times"}, {"score": 0.0031797877242483005, "phrase": "elliptic_curve_digital_signature"}, {"score": 0.00296128862361938, "phrase": "tinyos_package"}, {"score": 0.0029437707610254255, "phrase": "elliptic_curve_operations"}, {"score": 0.002900426826591769, "phrase": "first_implementation"}, {"score": 0.0027824197043924527, "phrase": "existing_software_implementations"}, {"score": 0.002693068835869533, "phrase": "inline_assembly"}, {"score": 0.002637705034367748, "phrase": "tinyecck"}, {"score": 0.0025758208205978825, "phrase": "code_size"}, {"score": 0.0021555948898187944, "phrase": "micaz_mote"}, {"score": 0.0021049997607582678, "phrase": "ram."}], "paper_keywords": ["wireless sensor network", " Elliptic Curve Cryptosystem", " TinyOS", " Koblitz curve"], "paper_abstract": "In this paper, we revisit a generally accepted opinion: implementing Elliptic Curve Cryptosystem (ECC) over GF(2(m)) on sensor motes using small word size is not appropriate because XOR multiplication over GF(2(m)) is not efficiently supported by current low-powered microprocessors. Although there are some implementations over GF(2(m)) on sensor motes, their performances are not satisfactory enough to be used for wireless sensor networks (WSNs). We have found that a field multiplication over GF(2(m)) are involved in a number of redundant memory accesses and its inefficiency is originated from this problem. Moreover, the field reduction process also requires many redundant memory accesses. Therefore, we propose some techniques for reducing unnecessary memory accesses. With the proposed strategies, the running time of field multiplication and reduction over GF(2(163)) can be decreased by 21.1% and 24.7%, respectively. These savings noticeably decrease execution times spent in Elliptic Curve Digital Signature Algorithm (ECDSA) operations (signing and verification) by around 15-19%. We present TinyECCK (Tiny Elliptic Curve Cryptosystem with Koblitz curve - a kind of TinyOS package supporting elliptic curve operations) which is the first implementation of Koblitz curve on sensor motes as far as we know. Through comparisons with existing software implementations of ECC built in C or hybrid of C and inline assembly on sensor motes, we show that TinyECCK outperforms them in terms of running time, code size, and supporting services. Furthermore, we show that a field multiplication over GF(2(m)) can be faster than that over GF(p) on 8-bit Atmega 128 processor by comparing TinyECCK with TinyECC, a well-known ECC implementation over GF(p). TinyECCK with sect163k1 can generate a signature and verify it in 1.37 and 2.32 sees on a Micaz mote with 13,748-byte of ROM and 1,004-byte of RAM.", "paper_title": "TinyECCK: Efficient elliptic curve cryptography implementation over GF(2(m)) on 8-bit Micaz mote", "paper_id": "WOS:000256860900014"}