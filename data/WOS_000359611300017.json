{"auto_keywords": [{"score": 0.04881990207677595, "phrase": "ui"}, {"score": 0.04626030549724136, "phrase": "data_presentations"}, {"score": 0.03217138746996407, "phrase": "dcd"}, {"score": 0.027448127085330967, "phrase": "ui_responsiveness"}, {"score": 0.00481495049065317, "phrase": "distributed_concern_delivery"}, {"score": 0.004786519708868553, "phrase": "user_interface_design"}, {"score": 0.004716171570012452, "phrase": "user_interface"}, {"score": 0.004592128194844475, "phrase": "dynamic_behavior"}, {"score": 0.004565007074039171, "phrase": "ever-growing_development"}, {"score": 0.004497899823062428, "phrase": "traditional_ui_design_techniques"}, {"score": 0.004458107800947839, "phrase": "complex_descriptions"}, {"score": 0.004405596416783185, "phrase": "significant_information_restatement"}, {"score": 0.004340822341073993, "phrase": "multiple_concerns"}, {"score": 0.004315178999089153, "phrase": "ui_development"}, {"score": 0.004164455874158225, "phrase": "high_fragment_replication"}, {"score": 0.004139850082354509, "phrase": "concern-separating_approaches"}, {"score": 0.003948145581074458, "phrase": "execution_tasks"}, {"score": 0.003901617424466747, "phrase": "ui_delivery"}, {"score": 0.003832847329292095, "phrase": "rendering_process"}, {"score": 0.003798916441627028, "phrase": "server_side"}, {"score": 0.0037319497768008264, "phrase": "entangled_concerns"}, {"score": 0.003434662174045939, "phrase": "client_performance"}, {"score": 0.003334309053314909, "phrase": "fragment_granularity"}, {"score": 0.0032852337992126564, "phrase": "effective_caching"}, {"score": 0.0030960281690122745, "phrase": "aspect-oriented_ui_design"}, {"score": 0.0030144682722892833, "phrase": "client-server_applications"}, {"score": 0.002970086492041853, "phrase": "server-side_involvement"}, {"score": 0.0029090444046528563, "phrase": "fragment_replication"}, {"score": 0.002891834702686575, "phrase": "provided_ui_descriptions"}, {"score": 0.002832396300207349, "phrase": "individual_ui_concerns"}, {"score": 0.0027577621502315594, "phrase": "ui_assembly"}, {"score": 0.002717149533691728, "phrase": "client-side_concern_reuse"}, {"score": 0.002637705034367748, "phrase": "transmitted_information"}, {"score": 0.002545423925130231, "phrase": "underlying_aspect-oriented_ut_design"}, {"score": 0.002522861292947622, "phrase": "server-side_derivation"}, {"score": 0.002463664816791839, "phrase": "runtime_context"}, {"score": 0.0023493964976936533, "phrase": "case_study"}, {"score": 0.0022806798371116698, "phrase": "decreased_volumes"}, {"score": 0.00226717904319347, "phrase": "ui_descriptions"}, {"score": 0.002220551141101661, "phrase": "client-side_caching_abilities"}, {"score": 0.0021301464301117833, "phrase": "potential_benefits"}, {"score": 0.0021175348478776846, "phrase": "dcd_integration_implications"}, {"score": 0.0021049977753042253, "phrase": "selected_ui_frameworks"}], "paper_keywords": ["user interface", " evaluation study", " separation of concerns", " responsiveness"], "paper_abstract": "Increasing demands on user interface (UI) usability, adaptability, and dynamic behavior drives ever-growing development and maintenance complexity. Traditional UI design techniques result in complex descriptions for data presentations with significant information restatement. In addition, multiple concerns in UI development leads to descriptions that exhibit concern tangling, which results in high fragment replication. Concern-separating approaches address these issues; however, they fail to maintain the separation of concerns for execution tasks like rendering or UI delivery to clients. During the rendering process at the server side, the separation collapses into entangled concerns that are provided to clients. Such client-side entanglement may seem inconsequential since the clients are simply displaying what is sent to them; however, such entanglement compromises client performance as it results in problems such as replication, fragment granularity ill-suited for effective caching, etc. This paper considers advantages brought by concern-separation from both perspectives. It proposes extension to the aspect-oriented UI design with distributed concern delivery (DCD) for client-server applications. Such an extension lessens the server-side involvement in UI assembly and reduces the fragment replication in provided UI descriptions. The server provides clients with individual UI concerns, and they become partially responsible for the UI assembly. This change increases client-side concern reuse and extends caching opportunities, reducing the volume of transmitted information between client and server to improve UI responsiveness and performance. The underlying aspect-oriented UT design automates the server-side derivation of concerns related to data presentations adapted to runtime context, security, conditions, etc. Evaluation of the approach is considered in a case study applying DCD to an existing, production web application. Our results demonstrate decreased volumes of UI descriptions assembled by the server-side and extended client-side caching abilities, reducing required data/fragment transmission, which improves UI responsiveness. Furthermore, we evaluate the potential benefits of DCD integration implications in selected UI frameworks.", "paper_title": "On Distributed Concern Delivery in User Interface Design", "paper_id": "WOS:000359611300017"}