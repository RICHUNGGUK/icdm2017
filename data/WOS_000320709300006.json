{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "optimal_bayesian_networks"}, {"score": 0.004774937143916685, "phrase": "precedence_constraints"}, {"score": 0.004598933498016774, "phrase": "directed_acyclic_graph"}, {"score": 0.004466519142879166, "phrase": "decomposable_bayesian_network_score"}, {"score": 0.004374267836149339, "phrase": "favorable_case"}, {"score": 0.004337900700685262, "phrase": "optimal_dag"}, {"score": 0.004248294537944227, "phrase": "polynomial_time"}, {"score": 0.00417793854311445, "phrase": "worst_case"}, {"score": 0.004057596233938867, "phrase": "dynamic_programming"}, {"score": 0.004007083686875716, "phrase": "node_subsets"}, {"score": 0.0034476484413811987, "phrase": "large_space_requirement"}, {"score": 0.0033482708495261864, "phrase": "dynamic_programming_approach"}, {"score": 0.0031579997262619758, "phrase": "proposed_algorithms"}, {"score": 0.002941389980674657, "phrase": "prior_knowledge"}, {"score": 0.00290473242917264, "phrase": "precedence_relation"}, {"score": 0.0027974705482714884, "phrase": "key_observation"}, {"score": 0.0027395968397212053, "phrase": "partial_order_p"}, {"score": 0.002298288831092204, "phrase": "partial_orders"}, {"score": 0.0022601535748259785, "phrase": "globally_optimal_dag"}, {"score": 0.0021857667493036786, "phrase": "generic_scheme"}, {"score": 0.0021315842986705485, "phrase": "concrete_tradeoff_schemes"}, {"score": 0.0021049977753042253, "phrase": "parallel_bucket_orders"}], "paper_keywords": ["exact algorithm", " parallelization", " partial order", " space-time tradeoff", " structure learning"], "paper_abstract": "We consider the problem of finding a directed acyclic graph (DAG) that optimizes a decomposable Bayesian network score. While in a favorable case an optimal DAG can be found in polynomial time, in the worst case the fastest known algorithms rely on dynamic programming across the node subsets, taking time and space 2(n), to within a factor polynomial in the number of nodes n. In practice, these algorithms are feasible to networks of at most around 30 nodes, mainly due to the large space requirement. Here, we generalize the dynamic programming approach to enhance its feasibility in three dimensions: first, the user may trade space against time; second, the proposed algorithms easily and efficiently parallelize onto thousands of processors; third, the algorithms can exploit any prior knowledge about the precedence relation on the nodes. Underlying all these results is the key observation that, given a partial order P on the nodes, an optimal DAG compatible with P can be found in time and space roughly proportional to the number of ideals of P, which can be significantly less than 2(n). Considering sufficiently many carefully chosen partial orders guarantees that a globally optimal DAG will be found. Aside from the generic scheme, we present and analyze concrete tradeoff schemes based on parallel bucket orders.", "paper_title": "Finding Optimal Bayesian Networks Using Precedence Constraints", "paper_id": "WOS:000320709300006"}