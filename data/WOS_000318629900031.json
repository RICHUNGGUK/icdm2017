{"auto_keywords": [{"score": 0.03550720423839327, "phrase": "fuzz"}, {"score": 0.02305271033012149, "phrase": "differential_privacy"}, {"score": 0.00481495049065317, "phrase": "linear_dependent_types"}, {"score": 0.004597951649247307, "phrase": "sensitive_information"}, {"score": 0.0043738432231020885, "phrase": "single_individual"}, {"score": 0.00427410962921379, "phrase": "negligible_statistical_effect"}, {"score": 0.0042250952759280225, "phrase": "query's_result"}, {"score": 0.003988293689448734, "phrase": "query's_sensitivity"}, {"score": 0.0038526069752138196, "phrase": "single_record"}, {"score": 0.0034993689230608206, "phrase": "reed"}, {"score": 0.003472532295441683, "phrase": "pierce"}, {"score": 0.0033932753847910366, "phrase": "functional_programming_language"}, {"score": 0.0033158265075584796, "phrase": "differentially_private_queries"}, {"score": 0.003265175268104804, "phrase": "linear_types"}, {"score": 0.0031906408161077792, "phrase": "probability_monad"}, {"score": 0.003154012038613403, "phrase": "randomized_computation"}, {"score": 0.002853620962601042, "phrase": "sensitivity_analysis"}, {"score": 0.0026218430041123164, "phrase": "linear_indexed_types"}, {"score": 0.002601727192945944, "phrase": "lightweight_dependent_types"}, {"score": 0.002542298702137655, "phrase": "richer_sensitivity_analysis"}, {"score": 0.002474674704809152, "phrase": "larger_class"}, {"score": 0.00236289633510808, "phrase": "runtime_information"}, {"score": 0.00230003335593664, "phrase": "differential_privacy_guarantee"}, {"score": 0.002256155453630723, "phrase": "soundness_theorem"}, {"score": 0.0022302306304023602, "phrase": "type_system"}, {"score": 0.0021876814398268775, "phrase": "enhanced_expressivity"}, {"score": 0.0021708896521705043, "phrase": "dfuzz"}, {"score": 0.002121281184742656, "phrase": "broad_class"}, {"score": 0.0021049977753042253, "phrase": "iterative_algorithms"}], "paper_keywords": ["Design", " Languages", " Theory", " differential privacy", " type systems", " linear logic", " dependent types"], "paper_abstract": "Differential privacy offers a way to answer queries about sensitive information while providing strong, provable privacy guarantees, ensuring that the presence or absence of a single individual in the database has a negligible statistical effect on the query's result. Proving that a given query has this property involves establishing a bound on the query's sensitivity-how much its result can change when a single record is added or removed. A variety of tools have been developed for certifying that a given query is differentially private. In one approach, Reed and Pierce [34] proposed a functional programming language, Fuzz, for writing differentially private queries. Fuzz uses linear types to track sensitivity and a probability monad to express randomized computation; it guarantees that any program with a certain type is differentially private. Fuzz can successfully verify many useful queries. However, it fails when the sensitivity analysis depends on values that are not known statically. We present DFuzz, an extension of Fuzz with a combination of linear indexed types and lightweight dependent types. This combination allows a richer sensitivity analysis that is able to certify a larger class of queries as differentially private, including ones whose sensitivity depends on runtime information. As in Fuzz, the differential privacy guarantee follows directly from the soundness theorem of the type system. We demonstrate the enhanced expressivity of DFuzz by certifying differential privacy for a broad class of iterative algorithms that could not be typed previously.", "paper_title": "Linear Dependent Types for Differential Privacy", "paper_id": "WOS:000318629900031"}