{"auto_keywords": [{"score": 0.029613664015831456, "phrase": "csr"}, {"score": 0.0278303963606743, "phrase": "rewrite_systems"}, {"score": 0.007520440113956052, "phrase": "infinite_data_structures"}, {"score": 0.00481495049065317, "phrase": "canonical_context-sensitive_rewriting"}, {"score": 0.004578382275810468, "phrase": "infinite_computations"}, {"score": 0.0044870272550540415, "phrase": "normal_forms"}, {"score": 0.004442032546224076, "phrase": "initial_expressions"}, {"score": 0.004368037394395782, "phrase": "essential_ingredient"}, {"score": 0.004280861452668641, "phrase": "normalization_semantics"}, {"score": 0.0042521895049768875, "phrase": "functional_programs"}, {"score": 0.004209539728590977, "phrase": "lazy_functional_languages"}, {"score": 0.003922685601503529, "phrase": "prime_numbers"}, {"score": 0.0038443635340052523, "phrase": "neverending_stream"}, {"score": 0.0038186039088445524, "phrase": "numerical_expressions"}, {"score": 0.0037930162319613856, "phrase": "data_structures"}, {"score": 0.003271361898648331, "phrase": "infinite-list_programs"}, {"score": 0.003238517900104576, "phrase": "b.a._sijtsma"}, {"score": 0.0031738126998349775, "phrase": "recursive_list_definitions"}, {"score": 0.0031208772639433145, "phrase": "programming_languages"}, {"score": 0.0029473940028924748, "phrase": "term_rewriting_systems"}, {"score": 0.002811770047652563, "phrase": "context-sensitive_rewriting"}, {"score": 0.0026914126067254444, "phrase": "appropriate_transformations"}, {"score": 0.0023842666006371267, "phrase": "selected_arguments"}, {"score": 0.0023682672729645714, "phrase": "function_symbols"}, {"score": 0.002297585503415527, "phrase": "well-known_results"}, {"score": 0.0022744957687536307, "phrase": "computational_power"}, {"score": 0.002206606452557159, "phrase": "existing_connections"}], "paper_keywords": ["context-sensitive rewriting", " functional programming", " productivity", " termination"], "paper_abstract": "Termination of programs, i.e., the absence of infinite computations, ensures the existence of normal forms for all initial expressions, thus providing an essential ingredient for the definition of a normalization semantics for functional programs. In lazy functional languages, though, infinite data structures are often delivered as the outcome of computations. For instance, the list of all prime numbers can be returned as a neverending stream of numerical expressions or data structures. If such streams are allowed, requiring termination is hopeless. In this setting, the notion of productivity can be used to provide an account of computations with infinite data structures, as it \"captures the idea of computability, of progress of infinite-list programs\" (B.A. Sijtsma, On the Productivity of Recursive List Definitions, ACM Transactions on Programming Languages and Systems 11(4): 633649, 1989). However, in the realm of Term Rewriting Systems, which can be seen as (first-order, untyped, unconditional) functional programs, termination of Context-Sensitive Rewriting (CSR) has been showed equivalent to productivity of rewrite systems through appropriate transformations. In this way, tools for proving termination of CSR can be used to prove productivity. In term rewriting, CSR is the restriction of rewriting that arises when reductions are allowed on selected arguments of function symbols only. In this paper we show that well-known results about the computational power of CSR are useful to better understand the existing connections between productivity of rewrite systems and termination of CSR, and also to obtain more powerful techniques to prove productivity of rewrite systems.", "paper_title": "Termination of canonical context-sensitive rewriting and productivity of rewrite systems", "paper_id": "WOS:000367350000003"}