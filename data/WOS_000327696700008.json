{"auto_keywords": [{"score": 0.026057046832530392, "phrase": "agda"}, {"score": 0.00481495049065317, "phrase": "syntactic_meta-programming"}, {"score": 0.004578382275810468, "phrase": "novel_set"}, {"score": 0.0044870272550540415, "phrase": "meta-programming_primitives"}, {"score": 0.004266501496765747, "phrase": "dependently-typed_functional_language"}, {"score": 0.003975781274672803, "phrase": "strong_and_precise_guarantees"}, {"score": 0.003558294449586273, "phrase": "typesafe_construction"}, {"score": 0.003282383509542342, "phrase": "typing_contexts"}, {"score": 0.0031845067058084583, "phrase": "alternative_approaches"}, {"score": 0.002907992115184249, "phrase": "normal_programs"}, {"score": 0.0027929100418926725, "phrase": "language's_standard_functional_computational_model"}, {"score": 0.0026554236621262515, "phrase": "new_meta-programming_primitives"}, {"score": 0.0021049977753042253, "phrase": "datatype-generic_programming"}], "paper_keywords": ["meta-programming", " dependent types", " datatype-generic programming", " tactics"], "paper_abstract": "We present a novel set of meta-programming primitives for use in a dependently-typed functional language. The types of our meta-programs provide strong and precise guarantees about their termination, correctness and completeness. Our system supports typesafe construction and analysis of terms, types and typing contexts. Unlike alternative approaches, they are written in the same style as normal programs and use the language's standard functional computational model. We formalise the new meta-programming primitives, implement them as an extension of Agda, and provide evidence of usefulness by means of two compelling applications in the fields of datatype-generic programming and proof tactics.", "paper_title": "Typed Syntactic Meta-programming", "paper_id": "WOS:000327696700008"}