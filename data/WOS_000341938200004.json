{"auto_keywords": [{"score": 0.04731051870228707, "phrase": "dig"}, {"score": 0.007058653641291863, "phrase": "array_invariants"}, {"score": 0.00481495049065317, "phrase": "dynamic_invariant_generator_for_polynomial"}, {"score": 0.00424659225577246, "phrase": "observed_program"}, {"score": 0.0041084684278314305, "phrase": "numerical_and_array_variables"}, {"score": 0.004027751272984522, "phrase": "numerical_invariants"}, {"score": 0.003820144626025562, "phrase": "arbitrary_degree"}, {"score": 0.0037450707321601963, "phrase": "numerical_program_variables"}, {"score": 0.0035755653799043, "phrase": "nested_relations"}, {"score": 0.0035285548582081627, "phrase": "multidimensional_array_variables"}, {"score": 0.0033245147666408157, "phrase": "current_static_and_dynamic_invariant_analysis_methods"}, {"score": 0.003153041030690117, "phrase": "existing_dynamic_methods"}, {"score": 0.002798780784517325, "phrase": "predefined_templates"}, {"score": 0.0027256122357680393, "phrase": "accurate_invariants"}, {"score": 0.0025678829712650437, "phrase": "mathematical_and_formal_methods_domains"}, {"score": 0.0024678216843278806, "phrase": "polyhedra_construction"}, {"score": 0.0024192592458651204, "phrase": "theorem_proving"}, {"score": 0.0022641658133181115, "phrase": "polynomial_invariants"}, {"score": 0.002234358539133758, "phrase": "geometric_shapes"}, {"score": 0.0022049428043454966, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "aes_encryption"}], "paper_keywords": ["Algorithms", " Experimentation", " Verification", " Theory", " Program analysis", " dynamic analysis", " invariant generation", " nonlinear invariants", " array invariants", " geometric invariant inference", " theorem proving"], "paper_abstract": "This article describes and evaluates DIG, a dynamic invariant generator that infers invariants from observed program traces, focusing on numerical and array variables. For numerical invariants, DIG supports both nonlinear equalities and inequalities of arbitrary degree defined over numerical program variables. For array invariants, DIG generates nested relations among multidimensional array variables. These properties are nontrivial and challenging for current static and dynamic invariant analysis methods. The key difference between DIG and existing dynamic methods is its generative technique, which infers invariants directly from traces, instead of using traces to filter out predefined templates. To generate accurate invariants, DIG employs ideas and tools from the mathematical and formal methods domains, including equation solving, polyhedra construction, and theorem proving; for example, DIG represents and reasons about polynomial invariants using geometric shapes. Experimental results on 27 mathematical algorithms and an implementation of AES encryption provide evidence that DIG is effective at generating invariants for these programs.", "paper_title": "DIG: A Dynamic Invariant Generator for Polynomial and Array Invariants", "paper_id": "WOS:000341938200004"}