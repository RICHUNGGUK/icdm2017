{"auto_keywords": [{"score": 0.027588574577977247, "phrase": "javacc"}, {"score": 0.00481495049065317, "phrase": "attribute_grammars"}, {"score": 0.004757643419056999, "phrase": "conventional_compiler_construction_tools"}, {"score": 0.004617328272121826, "phrase": "structure-preserving_coding_patterns"}, {"score": 0.004535124351828787, "phrase": "arbitrary_non-circular_attribute_grammars"}, {"score": 0.004481132747216135, "phrase": "syntax-directed_translation_schemes"}, {"score": 0.004322967486451877, "phrase": "top-down_parser_generation_tools"}, {"score": 0.00414545383888272, "phrase": "semantic_actions"}, {"score": 0.003975200317233532, "phrase": "small_repertory"}, {"score": 0.003927848423072668, "phrase": "primitive_attribution_operations"}, {"score": 0.0038348235692738783, "phrase": "alternative_implementations"}, {"score": 0.0037664981403399064, "phrase": "attribution_operations"}, {"score": 0.0035901685646972585, "phrase": "different_semantic_evaluation_strategies"}, {"score": 0.003526186748088922, "phrase": "seamlessly_way"}, {"score": 0.003071965703296204, "phrase": "direct_implementation"}, {"score": 0.0030171910207671205, "phrase": "grammar-based_specifications"}, {"score": 0.002981216610222911, "phrase": "widely-used_translation_scheme-driven_tools"}, {"score": 0.0025660347613972573, "phrase": "antlr"}, {"score": 0.0024311346712789553, "phrase": "initial_translation_schemes"}, {"score": 0.0023311233166534214, "phrase": "final_efficient_implementations"}, {"score": 0.0021561514733516654, "phrase": "new_features"}, {"score": 0.0021049977753042253, "phrase": "attribute_grammar_level"}], "paper_keywords": ["Attribute Grammars", " Parser Generators", " Language Processor Development Method", " Grammarware"], "paper_abstract": "This article describes structure-preserving coding patterns to code arbitrary non-circular attribute grammars as syntax-directed translation schemes for bottom-up and top-down parser generation tools. In these translation schemes, semantic actions are written in terms of a small repertory of primitive attribution operations. By providing alternative implementations for these attribution operations, it is possible to plug in different semantic evaluation strategies in a seamlessly way (e.g., a demand-driven strategy, or a data-driven one). The pattern makes possible the direct implementation of attribute grammar-based specifications with widely-used translation scheme-driven tools for the development of both bottom-up (e. g. YACC, BISON, CUP) and top-down (e.g., JavaCC, ANTLR) language translators. As a consequence, initial translation schemes can be successively refined to yield final efficient implementations. Since these implementations still preserve the ability to be extended with new features described at the attribute grammar level, the advantages from the point of view of development and maintenance become apparent.", "paper_title": "A Systematic Approach to the Implementation of Attribute Grammars with Conventional Compiler Construction Tools", "paper_id": "WOS:000309649500002"}