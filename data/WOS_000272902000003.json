{"auto_keywords": [{"score": 0.03317360878552939, "phrase": "input_sequence"}, {"score": 0.0094947344128833, "phrase": "efsm"}, {"score": 0.008815229053590178, "phrase": "input_sequences"}, {"score": 0.007174991511277159, "phrase": "fitness_function"}, {"score": 0.00650954826889317, "phrase": "good_fitness"}, {"score": 0.00481495049065317, "phrase": "transition_paths"}, {"score": 0.00478740563679966, "phrase": "extended_finite_state_machines"}, {"score": 0.004719227665313307, "phrase": "significant_interest"}, {"score": 0.004598933498016774, "phrase": "extended_finite_state_machine"}, {"score": 0.004507485711694584, "phrase": "required_behaviour"}, {"score": 0.004111960807556655, "phrase": "efsm."}, {"score": 0.004041743312484999, "phrase": "test_suite"}, {"score": 0.003697538418750941, "phrase": "graph_theory"}, {"score": 0.00307657476125683, "phrase": "efsm._such_a_fitness_function"}, {"score": 0.0030239842475439814, "phrase": "search-based_approach"}, {"score": 0.0029130926778916143, "phrase": "test_objective"}, {"score": 0.002863288676456588, "phrase": "particular_transition"}, {"score": 0.0027424619603260837, "phrase": "second_search"}, {"score": 0.0026041635822373265, "phrase": "computationally_inexpensive_approach"}, {"score": 0.002288096980611268, "phrase": "random_sampling"}, {"score": 0.002236055625099805, "phrase": "empirical_evidence"}, {"score": 0.0022104795254900746, "phrase": "reasonably_good_correlation"}, {"score": 0.0021049977753042253, "phrase": "proposed_fitness_function"}], "paper_keywords": ["EFSM", " Transition feasibility", " State-based testing", " Automated test generation"], "paper_abstract": "There has been significant interest in automating testing on the basis of an extended finite state machine (EFSM) model of the required behaviour of the implementation under test (IUT). Many test criteria require that certain parts of the EFSM are executed. For example, we may want to execute every transition of the EFSM. In order to find a test suite (set of input sequences) that achieves this we might first derive a set of paths through the EFSM that satisfy the criterion using, for example, algorithms from graph theory. We then attempt to produce input sequences that trigger these paths. Unfortunately, however, the EFSM might have infeasible paths and the problem of determining whether a path is feasible is generally undecidable. This paper describes an approach in which a fitness function is used to estimate how easy it is to find an input sequence to trigger a given path through an EFSM. Such a fitness function could be used in a search-based approach in which we search for a path with good fitness that achieves a test objective, such as executing a particular transition, and then search for an input sequence that triggers the path. If this second search fails then we search for another path with good fitness and repeat the process. We give a computationally inexpensive approach (fitness function) that estimates the feasibility of a path. In order to evaluate this fitness function we compared the fitness of a path with the ease with which an input sequence can be produced using search to trigger the path and we used random sampling in order to estimate this. The empirical evidence suggests that a reasonably good correlation (0.72 and 0.62) exists between the fitness of a path, produced using the proposed fitness function, and an estimate of the ease with which we can randomly generate an input sequence to trigger the path.", "paper_title": "Estimating the feasibility of transition paths in extended finite state machines", "paper_id": "WOS:000272902000003"}