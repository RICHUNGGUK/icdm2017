{"auto_keywords": [{"score": 0.04375046794702629, "phrase": "data_transfers"}, {"score": 0.015719716506582538, "phrase": "optimized_data_transfers"}, {"score": 0.015409493645635382, "phrase": "opencl_event_management_mechanism"}, {"score": 0.00464811139983244, "phrase": "standard_opencl_programming"}, {"score": 0.004419703921314433, "phrase": "compute_devices"}, {"score": 0.004331501320993783, "phrase": "kernel_computation"}, {"score": 0.004118587636081584, "phrase": "internode_communication"}, {"score": 0.0033832583769880576, "phrase": "low_portability"}, {"score": 0.003282383509542342, "phrase": "opencl_extension"}, {"score": 0.0031208772639433145, "phrase": "current_opencl_standard"}, {"score": 0.003073988343893906, "phrase": "main_thread"}, {"score": 0.002922705896608178, "phrase": "dependent_operations"}, {"score": 0.0027370835853738626, "phrase": "parallel_activities"}, {"score": 0.0025892330566358503, "phrase": "implementation_details"}, {"score": 0.0024617483174454113, "phrase": "application_programmers"}, {"score": 0.0023762535034673017, "phrase": "tricky_programming_techniques"}, {"score": 0.0023405257495466352, "phrase": "evaluation_results"}, {"score": 0.0022937210378944457, "phrase": "proposed_extension"}, {"score": 0.0022478501955483007, "phrase": "optimized_data_transfer_implementation"}, {"score": 0.0021917966722180132, "phrase": "sustained_data_transfer_performance"}, {"score": 0.002137137933768807, "phrase": "real_application"}, {"score": 0.0021049977753042253, "phrase": "big_data_file"}], "paper_keywords": [""], "paper_abstract": "In standard OpenCL programming, hosts are supposed to control their compute devices. Since compute devices are dedicated to kernel computation, only hosts can execute several kinds of data transfers such as internode communication and file access. These data transfers require one host to simultaneously play two or more roles due to the need for collaboration between the host and devices. The codes for such data transfers are likely to be system-specific, resulting in low portability. This paper proposes an OpenCL extension that incorporates such data transfers into the OpenCL event management mechanism. Unlike the current OpenCL standard, the main thread running on the host is not blocked to serialize dependent operations. Hence, an application can easily use the opportunities to overlap parallel activities of hosts and compute devices. In addition, the implementation details of data transfers are hidden behind the extension, and application programmers can use the optimized data transfers without any tricky programming techniques. The evaluation results show that the proposed extension can use the optimized data transfer implementation and thereby increase the sustained data transfer performance by about 18% for a real application accessing a big data file.", "paper_title": "Optimized Data Transfers Based on the OpenCL Event Management Mechanism", "paper_id": "WOS:000362772900001"}