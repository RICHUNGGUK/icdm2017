{"auto_keywords": [{"score": 0.039823014254623375, "phrase": "polar_coordinate"}, {"score": 0.015719716506582538, "phrase": "fourier_volume"}, {"score": 0.011952889708211753, "phrase": "rectilinear_coordinate"}, {"score": 0.011658319330700813, "phrase": "previous_methods"}, {"score": 0.009427585104517591, "phrase": "image_quality"}, {"score": 0.004769788530328504, "phrase": "polar_coordinate_data_representation"}, {"score": 0.004680725471654037, "phrase": "important_tool"}, {"score": 0.0046368166127362925, "phrase": "three-dimensional_data"}, {"score": 0.0045075348899324425, "phrase": "two-dimensional_plane"}, {"score": 0.004409468620826287, "phrase": "ray_casting"}, {"score": 0.004286498418857255, "phrase": "three-dimensional_data_points"}, {"score": 0.0041408296624638125, "phrase": "slice_projection_theorem"}, {"score": 0.004025320909035849, "phrase": "ray_casting_path"}, {"score": 0.003913021620260308, "phrase": "new_method"}, {"score": 0.0038884937060744184, "phrase": "fvr"}, {"score": 0.0038158228131483854, "phrase": "frequency_domain_data"}, {"score": 0.003721029388906273, "phrase": "data_processing"}, {"score": 0.0035273120781708655, "phrase": "first_aspect"}, {"score": 0.003505192870083805, "phrase": "data_regularity"}, {"score": 0.0033226745641157527, "phrase": "adjacent_memory_location"}, {"score": 0.0032708180619317423, "phrase": "memory_access"}, {"score": 0.0032197682621899703, "phrase": "second_aspect"}, {"score": 0.0031695126964559235, "phrase": "high_data_density"}, {"score": 0.0029389598856744436, "phrase": "nearest-neighbor_interpolation"}, {"score": 0.002733723435814484, "phrase": "third_aspect"}, {"score": 0.0026241089938360634, "phrase": "one-time_process"}, {"score": 0.0025588443155279855, "phrase": "better_interpolation_kernel"}, {"score": 0.002542782716137888, "phrase": "larger_support"}, {"score": 0.002526821678335054, "phrase": "coordinate_conversion"}, {"score": 0.0024254832239892017, "phrase": "preprocessing_stage"}, {"score": 0.002410256695500994, "phrase": "interactive_rendering"}, {"score": 0.0022846219120101134, "phrase": "interactive_visualization"}, {"score": 0.002213793650525558, "phrase": "interpolation_kernel"}, {"score": 0.0021792054532842682, "phrase": "comparable_image_quality"}, {"score": 0.0021587119099287337, "phrase": "faster_rate"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ireland_ltd."}], "paper_keywords": ["Volume visualization", " Fourier volume rendering", " Slice projection theorem", " Polar coordinate"], "paper_abstract": "Volume rendering is an important tool to visualize three-dimensional data in biomedicine by projecting the data to a two-dimensional plane. The projection is done by ray casting and its complexity is proportional to the number of three-dimensional data points. To reduce complexity, Fourier volume rendering (FVR) uses slice projection theorem to facilitate the integration of voxels along the ray casting path. In this paper, we proposed a new method for FVR that stored and processed the frequency domain data in polar coordinate. By exploiting three aspects of data processing which is previously impossible in rectilinear coordinate, our new method is much faster than the previous methods. The first aspect is data regularity. When data are stored in polar coordinate, extracting a slice involves accessing data stored in adjacent memory location. This regularity makes memory access more efficient. The second aspect is to utilize the high data density near the origin in polar coordinate. We can obtain two benefits from this aspect. The first allows us to extract a slice by nearest-neighbor interpolation instead of more complex interpolation but without sacrificing image quality. The second allows us to trade off between image quality and memory storage. The third aspect is to recognize that converting from rectilinear coordinate to polar coordinate is a one-time process. Therefore, we can use a better interpolation kernel with larger support in coordinate conversion. In turn, most of the computation is shifted to the preprocessing stage and interactive rendering can be made very fast. In the experiments, we show that the speed in interactive visualization for our new method is independent of the size of the interpolation kernel, therefore, achieving comparable image quality at a faster rate than previous methods. (C) 2012 Elsevier Ireland Ltd. All rights reserved.", "paper_title": "Accelerating Fourier volume rendering by polar coordinate data representation", "paper_id": "WOS:000311976100010"}