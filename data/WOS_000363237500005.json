{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "loop_invariants"}, {"score": 0.048186916426953504, "phrase": "static_checking"}, {"score": 0.02884765845120261, "phrase": "fully_automatic_verification"}, {"score": 0.00415333528095237, "phrase": "additional_annotations"}, {"score": 0.00363080961099728, "phrase": "significant_loop_invariant_candidates"}, {"score": 0.0033045378860812403, "phrase": "automatically_generated_tests"}, {"score": 0.003216804708106142, "phrase": "invalid_candidates"}, {"score": 0.003110396267535254, "phrase": "provably_valid_ones"}, {"score": 0.002830757050018908, "phrase": "program_prover"}, {"score": 0.0026823700218343506, "phrase": "manually_written_loop_invariants"}, {"score": 0.0023923066544220277, "phrase": "java_features"}, {"score": 0.002297585503415527, "phrase": "static_checker"}, {"score": 0.0021624739899833868, "phrase": "proof_obligations"}, {"score": 0.0021049977753042253, "phrase": "automatic_complete_correctness_proofs"}], "paper_keywords": ["Loop invariants", " inference", " automatic verification", " functional properties", " dynamic analysis"], "paper_abstract": "Verifiers that can prove programs correct against their full functional specification require, for programs with loops, additional annotations in the form of loop invariants-properties that hold for every iteration of a loop. We show that significant loop invariant candidates can be generated by systematically mutating postconditions; then, dynamic checking (based on automatically generated tests) weeds out invalid candidates, and static checking selects provably valid ones. We present a framework that automatically applies these techniques to support a program prover, paving the way for fully automatic verification without manually written loop invariants: Applied to 28 methods (including 39 different loops) from various java.util classes (occasionally modified to avoid using Java features not fully supported by the static checker), our DYNAMATE prototype automatically discharged 97 percent of all proof obligations, resulting in automatic complete correctness proofs of 25 out of the 28 methods-outperforming several state-of-the-art tools for fully automatic verification.", "paper_title": "Inferring Loop Invariants by Mutation, Dynamic Analysis, and Static Checking", "paper_id": "WOS:000363237500005"}