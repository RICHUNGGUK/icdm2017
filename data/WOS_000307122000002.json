{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "gpu"}, {"score": 0.004689462599037994, "phrase": "fully_nonlinear_free_surface_waves"}, {"score": 0.004567230180529598, "phrase": "massively_parallel_and_scalable_algorithm"}, {"score": 0.004498812433096501, "phrase": "multigrid_preconditioned_defect_correction_method"}, {"score": 0.00421923944095905, "phrase": "potential_model"}, {"score": 0.004171730509424374, "phrase": "wave_propagation"}, {"score": 0.004140354220982935, "phrase": "uneven_bottoms"}, {"score": 0.0040323765107766335, "phrase": "fast_analysis"}, {"score": 0.004002044115117644, "phrase": "prediction_purposes"}, {"score": 0.003971938976270902, "phrase": "coastal_and_offshore_engineering"}, {"score": 0.003927203683176278, "phrase": "dedicated_numerical_model"}, {"score": 0.0038683363637006902, "phrase": "proposed_algorithm"}, {"score": 0.0037674258625824113, "phrase": "affordable_modern_special_purpose_graphics_processing_unit"}, {"score": 0.003614124997453808, "phrase": "low-storage_flexible-order"}, {"score": 0.003415047118340286, "phrase": "cpu_core"}, {"score": 0.003313380246267812, "phrase": "parallel_performance"}, {"score": 0.0032760377953971248, "phrase": "relatively_complex_numerical_model"}, {"score": 0.003214730261140886, "phrase": "new_trend"}, {"score": 0.0031905286720361145, "phrase": "high-performance_computing"}, {"score": 0.0031665087019813244, "phrase": "many-core_gpus"}, {"score": 0.0031190082119319272, "phrase": "high-throughput_co-processors"}, {"score": 0.0030838610641909835, "phrase": "cpu."}, {"score": 0.0029360049890445944, "phrase": "fast_desktop_computations"}, {"score": 0.002913895605074143, "phrase": "large_nonlinear_wave_problems"}, {"score": 0.0028919522313933525, "phrase": "numerical_wave_tanks"}, {"score": 0.0027428939498108746, "phrase": "new_code_base"}, {"score": 0.0026611838252683507, "phrase": "unified_device_architecture_c"}, {"score": 0.002514464610980629, "phrase": "double_precision_arithmetic"}, {"score": 0.002458061764297103, "phrase": "existing_cpu"}, {"score": 0.0024120593805429984, "phrase": "fortran"}, {"score": 0.0023490143960001675, "phrase": "single_modern_gpu."}, {"score": 0.0023313149689465386, "phrase": "significant_improvements"}, {"score": 0.0021944267528581094, "phrase": "massive_multi-threading_capability"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["nonlinear water waves", " coastal and offshore engineering", " finite difference method", " potential flow", " time domain", " scientific GPU computations", " high-performance computing"], "paper_abstract": "We implement and evaluate a massively parallel and scalable algorithm based on a multigrid preconditioned Defect Correction method for the simulation of fully nonlinear free surface flows. The simulations are based on a potential model that describes wave propagation over uneven bottoms in three space dimensions and is useful for fast analysis and prediction purposes in coastal and offshore engineering. A dedicated numerical model based on the proposed algorithm is executed in parallel by utilizing affordable modern special purpose graphics processing unit (GPU). The model is based on a low-storage flexible-order accurate finite difference method that is known to be efficient and scalable on a CPU core (single thread). To achieve parallel performance of the relatively complex numerical model, we investigate a new trend in high-performance computing where many-core GPUs are utilized as high-throughput co-processors to the CPU. We describe and demonstrate how this approach makes it possible to do fast desktop computations for large nonlinear wave problems in numerical wave tanks (NWTs) with close to 50/100 million total grid points in double/single precision with 4?GB global device memory available. A new code base has been developed in C++ and compute unified device architecture C and is found to improve the runtime more than an order in magnitude in double precision arithmetic for the same accuracy over an existing CPU (single thread) Fortran 90 code when executed on a single modern GPU. These significant improvements are achieved by carefully implementing the algorithm to minimize data-transfer and take advantage of the massive multi-threading capability of the GPU device. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "A massively parallel GPU-accelerated model for analysis of fully nonlinear free surface waves", "paper_id": "WOS:000307122000002"}