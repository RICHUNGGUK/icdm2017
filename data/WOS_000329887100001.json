{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "design_patterns"}, {"score": 0.04838919478929022, "phrase": "design_decisions"}, {"score": 0.035620716932052585, "phrase": "codecharts"}, {"score": 0.004597622380240611, "phrase": "complex_software_systems"}, {"score": 0.00421340730888561, "phrase": "software_architects"}, {"score": 0.004064653055162238, "phrase": "practical_use"}, {"score": 0.003921129887153952, "phrase": "software_design"}, {"score": 0.0036490529923833884, "phrase": "automated_design_verification_tools"}, {"score": 0.0035932440062595252, "phrase": "minimal_human_intervention"}, {"score": 0.003413284742632989, "phrase": "visual_language"}, {"score": 0.0030171910207671205, "phrase": "abstract_semantics"}, {"score": 0.002940626369102927, "phrase": "java_package"}, {"score": 0.0028807718824400697, "phrase": "finite_structures"}, {"score": 0.0028221322455573624, "phrase": "composite_design_pattern"}, {"score": 0.0027789349951704177, "phrase": "codechart"}, {"score": 0.002216255778305968, "phrase": "java"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Object-oriented design", " Modeling and specification", " Automated verification", " Visual languages", " Design description languages"], "paper_abstract": "Representing design decisions for complex software systems, tracing them to code, and enforcing them throughout the lifecycle are pressing concerns for software architects and developers. To be of practical use, specification and modeling languages for software design need to combine rigor with abstraction and simplicity, and be supported by automated design verification tools that require minimal human intervention. This paper examines closely the use of the visual language of Codecharts for representing design decisions and demonstrate the process of verifying the conformance of a program to the chart. We explicate the abstract semantics of segments of the Java package java.awt as a finite structures, specify the Composite design pattern as a Codechart and unpack it as a set of formulas, and prove that the structure representing the program satisfies the formulas. We also describe a set of tools for modeling design patterns with Codecharts and for verifying the conformance of native (plain) Java programs to the charts. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Automated verification of design patterns: A case study", "paper_id": "WOS:000329887100001"}