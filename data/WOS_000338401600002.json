{"auto_keywords": [{"score": 0.038774511067379516, "phrase": "c_programs"}, {"score": 0.00481495049065317, "phrase": "automated_cert_c_secure_coding_standard_certification"}, {"score": 0.004405779372462873, "phrase": "c._writing"}, {"score": 0.004388796812234033, "phrase": "secure_c_programs"}, {"score": 0.00398478333092707, "phrase": "coding_standards"}, {"score": 0.00393886140366453, "phrase": "\"cert_c_secure_coding_standard"}, {"score": 0.0035899674590142653, "phrase": "large_number"}, {"score": 0.0035076666315744525, "phrase": "automated_tool_support"}, {"score": 0.0032592499906265882, "phrase": "ongoing_work"}, {"score": 0.0032092293346843224, "phrase": "coccinelle_bug-finder"}, {"score": 0.0031845067058084613, "phrase": "program_transformation_tool"}, {"score": 0.0028576796380512157, "phrase": "software_project"}, {"score": 0.002792119634261638, "phrase": "certification_rules"}, {"score": 0.00268616928039386, "phrase": "current_work"}, {"score": 0.0026551738950183804, "phrase": "clang"}, {"score": 0.002624537564461863, "phrase": "llvm"}, {"score": 0.0025445415633818472, "phrase": "program_analysis_component"}, {"score": 0.0025249264547573943, "phrase": "coccinelle"}, {"score": 0.0024957862318504753, "phrase": "analysis_information"}, {"score": 0.002429090371567499, "phrase": "pointer_analysis"}, {"score": 0.0021544587602892466, "phrase": "pointer_aliasing"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Automated tool support", " CERT C Secure Coding", " Certification"], "paper_abstract": "Writing correct C programs is well-known to be hard, not least due to the many low-level language features intrinsic to C. Writing secure C programs is even harder and, at times, seemingly impossible. To improve this situation the US CERT has developed and published a set of coding standards, the \"CERT C Secure Coding Standard\", that (currently) enumerates 122 rules and 180 recommendations, with the aim of making C programs (more) secure. The large number of rules and recommendations makes automated tool support essential for certifying that a given system complies with the standard. In this paper, we report on ongoing work on adapting the Coccinelle bug-finder and program transformation tool, into a tool for analysing and certifying C programs according to, e.g., the CERT C Secure Coding Standard or the MISRA (the Motor Industry Software Reliability Association) C standard. We argue that such a tool must be highly adaptable and customisable to each software project as well as to the certification rules required by a given standard. Furthermore, we present current work on integrating Clang (the LLVM C front-end) as a program analysis component into Coccinelle. Program analysis information, e.g., from data-flow or pointer analysis, is necessary both for more precise compliance checking, i.e., with fewer false positives, and also for enabling more complete checking, i.e., with fewer false negatives, e.g., resulting from pointer aliasing. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Coccinelle: Tool support for automated CERT C Secure Coding Standard certification", "paper_id": "WOS:000338401600002"}