{"auto_keywords": [{"score": 0.048412942923644654, "phrase": "java_ilp_processor"}, {"score": 0.03363896917055258, "phrase": "tagging_unit"}, {"score": 0.029139449391002575, "phrase": "java_processor"}, {"score": 0.00481495049065317, "phrase": "abstract-machine-based_framework"}, {"score": 0.00438105507792004, "phrase": "programming_languages"}, {"score": 0.004304144138805271, "phrase": "low-level_mechanisms"}, {"score": 0.004228577663320847, "phrase": "real_machine"}, {"score": 0.004081385289516914, "phrase": "general_abstract-machine-based_framework"}, {"score": 0.0040334640350288, "phrase": "ambf"}, {"score": 0.003939296259436904, "phrase": "instruction_level_parallelism_processors"}, {"score": 0.00387011040370557, "phrase": "instruction_tagging_technique"}, {"score": 0.003802135020791801, "phrase": "constructed_processor"}, {"score": 0.0034185505275141077, "phrase": "tagged_machine_code"}, {"score": 0.003378385493203297, "phrase": "data_conflicts"}, {"score": 0.0031100973266506163, "phrase": "sequential_execution"}, {"score": 0.002966438503447793, "phrase": "actual_values"}, {"score": 0.0027961342030212353, "phrase": "proposed_framework"}, {"score": 0.0026045914281028473, "phrase": "java_bytecode_instructions"}, {"score": 0.002573965014439041, "phrase": "risc-like_tag-based_instructions"}, {"score": 0.00246957392654378, "phrase": "general-purpose_risc_core"}, {"score": 0.0023834640793589435, "phrase": "instruction_level_parallelism"}, {"score": 0.0023139986108451946, "phrase": "java_ilp_processor_architecture"}, {"score": 0.002273292707863821, "phrase": "design_issues"}, {"score": 0.002155412043665635, "phrase": "unpack"}, {"score": 0.0021049977753042253, "phrase": "overall_ilp_speedup_improvement"}], "paper_keywords": ["Abstract machine", " Java processor", " Embedded processor", " ILP", " VLIW"], "paper_abstract": "Machines bridge the gap between the high-level of programming languages and the low-level mechanisms of a real machine. The paper proposed a general abstract-machine-based framework (AMBF) to build instruction level parallelism processors using the instruction tagging technique. The constructed processor may accept code written in any (abstract or real) machine instruction set, and produce tagged machine code after data conflicts are resolved. This requires the construction of a tagging unit which emulates the sequential execution of the program using tags rather than actual values. The paper presents a Java ILP processor by using the proposed framework. The Java processor takes advantage of the tagging unit to dynamically translate Java bytecode instructions to RISC-like tag-based instructions to facilitate the use of a general-purpose RISC core and enable the exploitation of instruction level parallelism. We detailed the Java ILP processor architecture and the design issues. Benchmarking of the Java processor using SpecJVM98 and Unpack has shown the overall ILP speedup improvement between 78% and 173%. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Exploiting an abstract-machine-based framework in the design of a Java ILP processor", "paper_id": "WOS:000262423200005"}