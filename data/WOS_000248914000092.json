{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "vertex_locality"}, {"score": 0.004580769304731227, "phrase": "novel_algorithms"}, {"score": 0.004087207102190335, "phrase": "vertex_cache_efficiency"}, {"score": 0.003944112858235306, "phrase": "view-independent_overdraw_reduction"}, {"score": 0.0038606630003037864, "phrase": "resulting_triangle_orders"}, {"score": 0.003725470458263889, "phrase": "previous_methods"}, {"score": 0.003395640013786862, "phrase": "processing_speed"}, {"score": 0.002986461855862617, "phrase": "host_hardware"}, {"score": 0.0021049977753042253, "phrase": "new_results"}], "paper_keywords": [""], "paper_abstract": "We present novel algorithms that optimize the order in which triangles are rendered, to improve post-transform vertex cache efficiency as well as for view-independent overdraw reduction. The resulting triangle orders perform on par with previous methods, but are orders magnitude faster to compute. The improvements in processing speed allow us to perform the optimization right after a model is loaded, when more information on the host hardware is available. This allows our vertex cache optimization to often outperform other methods. In fact, our algorithms can even be executed interactively, allowing for re-optimization in case of changes to geometry or topology, which happen often in CAD/CAM applications. We believe that most real-time rendering applications will immediately benefit from these new results.", "paper_title": "Fast triangle reordering for vertex locality and reduced overdraw", "paper_id": "WOS:000248914000092"}