{"auto_keywords": [{"score": 0.04458003012492911, "phrase": "slice-based_cohesion_metrics"}, {"score": 0.01847846952019463, "phrase": "effort-aware_post-release_fault-proneness_prediction"}, {"score": 0.006533949129791843, "phrase": "baseline_metrics"}, {"score": 0.005965690606121411, "phrase": "post-release_fault-proneness"}, {"score": 0.00481495049065317, "phrase": "slice-based_cohesion_metrics_actually_useful"}, {"score": 0.00450368324850566, "phrase": "output_variables"}, {"score": 0.004382196270563035, "phrase": "functional_relatedness"}, {"score": 0.003961575415370352, "phrase": "baseline_code"}, {"score": 0.003951976017359017, "phrase": "in-depth_understanding"}, {"score": 0.003764341156823266, "phrase": "post-release_faults"}, {"score": 0.0034570879043633114, "phrase": "structural_complexity"}, {"score": 0.0034361228813770245, "phrase": "halstead"}, {"score": 0.003253047640423623, "phrase": "principal_component_analysis"}, {"score": 0.003098493792759094, "phrase": "univariate_prediction_models"}, {"score": 0.002969276778056666, "phrase": "multivariate_prediction_models"}, {"score": 0.0027433895507237584, "phrase": "open-source_software_systems"}, {"score": 0.0022715134070706174, "phrase": "statistically_significant_and_practically_important_improvement"}, {"score": 0.0021049977753042253, "phrase": "practical_value"}], "paper_keywords": ["Cohesion", " metrics", " slice-based", " fault-proneness", " prediction", " effort-aware"], "paper_abstract": "Background. Slice-based cohesion metrics leverage program slices with respect to the output variables of a module to quantify the strength of functional relatedness of the elements within the module. Although slice-based cohesion metrics have been proposed for many years, few empirical studies have been conducted to examine their actual usefulness in predicting fault-proneness. Objective. We aim to provide an in-depth understanding of the ability of slice-based cohesion metrics in effort-aware post-release fault-proneness prediction, i.e. their effectiveness in helping practitioners find post-release faults when taking into account the effort needed to test or inspect the code. Method. We use the most commonly used code and process metrics, including size, structural complexity, Halstead's software science, and code churn metrics, as the baseline metrics. First, we employ principal component analysis to analyze the relationships between slice-based cohesion metrics and the baseline metrics. Then, we use univariate prediction models to investigate the correlations between slice-based cohesion metrics and post-release fault-proneness. Finally, we build multivariate prediction models to examine the effectiveness of slice-based cohesion metrics in effort-aware post-release fault-proneness prediction when used alone or used together with the baseline code and process metrics. Results. Based on open-source software systems, our results show that: 1) slice-based cohesion metrics are not redundant with respect to the baseline code and process metrics; 2) most slice-based cohesion metrics are significantly negatively related to post-release fault-proneness; 3) slice-based cohesion metrics in general do not outperform the baseline metrics when predicting post-release fault-proneness; and 4) when used with the baseline metrics together, however, slice-based cohesion metrics can produce a statistically significant and practically important improvement of the effectiveness in effort-aware post-release fault-proneness prediction. Conclusion. Slice-based cohesion metrics are complementary to the most commonly used code and process metrics and are of practical value in the context of effort-aware post-release fault-proneness prediction.", "paper_title": "Are Slice-Based Cohesion Metrics Actually Useful in Effort-Aware Post-Release Fault-Proneness Prediction? An Empirical Study", "paper_id": "WOS:000353115800001"}