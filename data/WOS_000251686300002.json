{"auto_keywords": [{"score": 0.03983926434466607, "phrase": "split_multiplier"}, {"score": 0.008067795309504043, "phrase": "product_modulo_m"}, {"score": 0.00481495049065317, "phrase": "new_modular_multiplication_method"}, {"score": 0.004739056045644449, "phrase": "montgomery_residues"}, {"score": 0.004639712384096822, "phrase": "modulus_m"}, {"score": 0.004566567411073082, "phrase": "montgomery_radix_r"}, {"score": 0.004262643556463569, "phrase": "operand_multiplier"}, {"score": 0.003916098498242888, "phrase": "calculation_speed"}, {"score": 0.00385431710959668, "phrase": "upper_part"}, {"score": 0.0034299649219748513, "phrase": "lower_part"}, {"score": 0.002988101395789399, "phrase": "constant_r._two_different_implementations"}, {"score": 0.002818692837561076, "phrase": "classical_modular_multiplier"}, {"score": 0.0027741761880779535, "phrase": "montgomery_multiplier"}, {"score": 0.0027015344365793016, "phrase": "partial_products"}, {"score": 0.002468450551616404, "phrase": "single_pipelined_unit"}, {"score": 0.002196342933346204, "phrase": "proposed_method"}, {"score": 0.0021387992835532367, "phrase": "software_implementation"}, {"score": 0.0021049977753042253, "phrase": "multiprocessor_environment"}], "paper_keywords": ["computer arithmetic", " hardware algorithm", " modular multiplication", " Montgomery multiplication"], "paper_abstract": "This paper proposes a new modular multiplication method that uses Montgomery residues defined by a modulus M and a Montgomery radix R whose value is less than the modulus M. This condition enables the operand multiplier to be split into two parts that can be processed separately in parallel-increasing the calculation speed. The upper part of the split multiplier can be processed by calculating a product modulo M of the multiplicand and this part of the split multiplier. The lower part of the split multiplier can be processed by calculating a product modulo M of the multiplicand, this part of the split multiplier, and the inverse of a constant R. Two different implementations based on this method are proposed: One uses a classical modular multiplier and a Montgomery multiplier and the other generates partial products for each part of the split multiplier separately, which are added and accumulated in a single pipelined unit. A radix-4 version of a multiplier based on a radix-4 classical modular multiplier and a radix-4 Montgomery multiplier has been designed and simulated. The proposed method is also suitable for software implementation in a multiprocessor environment.", "paper_title": "Bipartite modular multiplication method", "paper_id": "WOS:000251686300002"}