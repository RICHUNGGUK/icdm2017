{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "code_transformation"}, {"score": 0.004411588377842043, "phrase": "flexible_embedded_solutions"}, {"score": 0.004326624385772596, "phrase": "short_time"}, {"score": 0.0038876302202924644, "phrase": "extensible_processors"}, {"score": 0.0036671822784770463, "phrase": "user-defined_instruction_set_extensions"}, {"score": 0.0033271045779740683, "phrase": "plain_c_sources"}, {"score": 0.003048001809453513, "phrase": "combined_exploration"}, {"score": 0.0029892206557359836, "phrase": "code_transformations"}, {"score": 0.002931569771634119, "phrase": "ise_identification"}, {"score": 0.0028471655497661528, "phrase": "resulting_performance"}, {"score": 0.0025331002386232014, "phrase": "combined_code_transformations"}, {"score": 0.0024126686412257407, "phrase": "average_performance_improvements"}, {"score": 0.0021049977753042253, "phrase": "extreme_cases"}], "paper_keywords": ["Design", " Performance", " Customizable processors", " ASIPs", " source-level transformations", " compilers", " instruction set extension", " design space exploration"], "paper_abstract": "The demand for flexible embedded solutions and short time-to-market has led to the development of extensible processors that allow for customization through user-defined instruction set extensions (ISEs). These are usually identified from plain C sources. In this article, we propose a combined exploration of code transformations and ISE identification. The resulting performance of such a combination has been measured on two benchmark suites. Our results demonstrate that combined code transformations and ISEs can yield average performance improvements of 49%. This outperforms ISEs when applied in isolation, and in extreme cases yields a speed-up of 2.85.", "paper_title": "Code Transformation and Instruction Set Extension", "paper_id": "WOS:000269273800002"}