{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "block_unification_if-conversion"}, {"score": 0.004722254884093624, "phrase": "high_performance_architectures"}, {"score": 0.004586531354697466, "phrase": "processing_units"}, {"score": 0.004498213310668266, "phrase": "data-parallel_graphic_calculations"}, {"score": 0.004411588377842043, "phrase": "wide_simd_vector_units"}, {"score": 0.004121275290411653, "phrase": "gpu's_simd_architectures"}, {"score": 0.0040027552011993005, "phrase": "multiple_control"}, {"score": 0.0038127186374325582, "phrase": "single_stream"}, {"score": 0.0035616743422949766, "phrase": "compiler_transformation"}, {"score": 0.00342568771304873, "phrase": "control_dependencies"}, {"score": 0.003359647377874098, "phrase": "data_dependencies"}, {"score": 0.0031383410838018984, "phrase": "vectorizing_compilers"}, {"score": 0.003048001809453513, "phrase": "control_flow"}, {"score": 0.0029602552900111407, "phrase": "efficient_code_generation"}, {"score": 0.0027383842769094354, "phrase": "if-conversion_transformation"}, {"score": 0.0026337482179592422, "phrase": "block_unification_method"}, {"score": 0.0025331002386232014, "phrase": "currently_used_block_flattening_method"}, {"score": 0.0021886732310288128, "phrase": "predicated_instructions"}, {"score": 0.0021049977753042253, "phrase": "kernel_execution_speed"}], "paper_keywords": [""], "paper_abstract": "Graphics Processing Units accelerate data-parallel graphic calculations using wide SIMD vector units. Compiling programs to use the GPU's SIMD architectures require converting multiple control flow paths into a single stream of instructions. IF-conversion is a compiler transformation, which converts control dependencies into data dependencies, and it is used by vectorizing compilers to eliminate control flow and enable efficient code generation. In this work we enhance the IF-conversion transformation by using a block unification method to improve the currently used block flattening method. Our experimental results demonstrate that our IF-conversion method is effective in reducing the number of predicated instructions and in boosting kernel execution speed.", "paper_title": "Block Unification IF-conversion for High Performance Architectures", "paper_id": "WOS:000344987900005"}