{"auto_keywords": [{"score": 0.04483630460069358, "phrase": "concurrency_typestate_bugs"}, {"score": 0.010804970275209288, "phrase": "bug_candidates"}, {"score": 0.00481495049065317, "phrase": "manifesting_hidden_concurrency_typestate_bugs"}, {"score": 0.004649302313891199, "phrase": "multi-core_era"}, {"score": 0.0045208777171271254, "phrase": "data_races"}, {"score": 0.004489327204473076, "phrase": "atomicity_violation_bugs"}, {"score": 0.004395984840790689, "phrase": "low-level_memory_accesses"}, {"score": 0.004319677360634253, "phrase": "large_number"}, {"score": 0.004170996594527844, "phrase": "closed_file"}, {"score": 0.004127394241838696, "phrase": "different_thread"}, {"score": 0.0038346288310750804, "phrase": "high-level_program_semantics"}, {"score": 0.003689628075766217, "phrase": "hidden_concurrency_typestate_bugs"}, {"score": 0.0036002125374696237, "phrase": "state_machine"}, {"score": 0.0035750641312373202, "phrase": "correct_program_behavior"}, {"score": 0.003415812499773905, "phrase": "thread_synchronization"}, {"score": 0.0033564619316337634, "phrase": "profiling_results"}, {"score": 0.003195692081987805, "phrase": "runtime_events"}, {"score": 0.003151184191185831, "phrase": "typestate_violation"}, {"score": 0.0031182092708983184, "phrase": "event_order"}, {"score": 0.0029792474431139067, "phrase": "controlled_thread"}, {"score": 0.002836526299020153, "phrase": "linux"}, {"score": 0.002729133029776093, "phrase": "invalid_file_operation"}, {"score": 0.0027100527874262446, "phrase": "invalid_pointer_dereference"}, {"score": 0.00268168157806506, "phrase": "invalid_lock_operation"}, {"score": 0.0026166287606163145, "phrase": "six_real_world_bugs"}, {"score": 0.0024999686487208453, "phrase": "mysql"}, {"score": 0.0024824836231198653, "phrase": "mozilla"}, {"score": 0.0023551955270737215, "phrase": "six_software_bugs"}, {"score": 0.0022580713471027996, "phrase": "stress_testing"}, {"score": 0.002242277042923036, "phrase": "active_testing_techniques"}, {"score": 0.002149799391146313, "phrase": "false_positives"}, {"score": 0.002127280894809367, "phrase": "detailed_bug_reports"}, {"score": 0.0021049977753042253, "phrase": "manifested_bug"}], "paper_keywords": ["Reliability", " Software Testing", " Typestate Bugs", " Concurrency Bugs"], "paper_abstract": "Concurrency bugs are becoming increasingly prevalent in the multi-core era. Recently, much research has focused on data races and atomicity violation bugs, which are related to low-level memory accesses. However, a large number of concurrency typestate bugs such as \"invalid reads to a closed file from a different thread\" are under-studied. These concurrency typestate bugs are important yet challenging to study since they are mostly relevant to high-level program semantics. This paper presents 2ndStrike, a method to manifest hidden concurrency typestate bugs in software testing. Given a state machine describing correct program behavior on certain object typestates, 2ndStrike profiles runtime events related to the typestates and thread synchronization. Based on the profiling results, 2ndStrike then identifies bug candidates, each of which is a pair of runtime events that would cause typestate violation if the event order is reversed. Finally, 2ndStrike re-executes the program with controlled thread interleaving to manifest bug candidates. We have implemented a prototype of 2ndStrike on Linux and have illustrated our idea using three types of concurrency typestate bugs, including invalid file operation, invalid pointer dereference, and invalid lock operation. We have evaluated 2ndStrike with six real world bugs (including one previously unknown bug) from three open-source server and desktop programs (i.e., MySQL, Mozilla, pbzip2). Our experimental results show that 2ndStrike can effectively and efficiently manifest all six software bugs, most of which are difficult or impossible to manifest using stress testing or active testing techniques that are based on data race/atomicity violation. Additionally, 2ndStrike reports no false positives, provides detailed bug reports for each manifested bug, and can consistently reproduce the bug after manifesting it once.", "paper_title": "2ndStrike: Toward Manifesting Hidden Concurrency Typestate Bugs", "paper_id": "WOS:000290854400020"}