{"auto_keywords": [{"score": 0.03202539594300809, "phrase": "strassen's_algorithm"}, {"score": 0.013812246506556767, "phrase": "complex_communication_patterns"}, {"score": 0.004816385261997813, "phrase": "cloud"}, {"score": 0.004655285779819366, "phrase": "strassen's_matrix_multiplication_algorithm"}, {"score": 0.004500891637057374, "phrase": "pay-as-you-go_properties"}, {"score": 0.0043699845927285905, "phrase": "attractive_alternative"}, {"score": 0.004333283735537634, "phrase": "hpc_applications"}, {"score": 0.004260800171269249, "phrase": "communication-intensive_applications"}, {"score": 0.004084829853870028, "phrase": "cloud_platforms"}, {"score": 0.003982741546775355, "phrase": "mapreduce_technologies"}, {"score": 0.003916127314128596, "phrase": "hadoop"}, {"score": 0.0038832137384859494, "phrase": "spark"}, {"score": 0.0037543106253910313, "phrase": "mapreduce's_simple_programming_model"}, {"score": 0.0036759314172445934, "phrase": "data_transfers"}, {"score": 0.0036450381529042103, "phrase": "compute_nodes"}, {"score": 0.003568932067237836, "phrase": "cloud's_relatively_poor_network_performance"}, {"score": 0.0034504423179340738, "phrase": "traditional_strassen's_algorithm"}, {"score": 0.003421437601439154, "phrase": "square_matrix_multiplication"}, {"score": 0.003378385493203297, "phrase": "recursive_and_complex_pattern"}, {"score": 0.003335873298309004, "phrase": "hpc_platform"}, {"score": 0.0031710903727066313, "phrase": "cloud_platform"}, {"score": 0.002853396755102163, "phrase": "iterative_pattern"}, {"score": 0.0027009493171069763, "phrase": "mapreduce_programming_model"}, {"score": 0.002600194073758015, "phrase": "strassen's_data_dependency_problems"}, {"score": 0.0024926348205500715, "phrase": "first_instance"}, {"score": 0.002450864311898833, "phrase": "mapreduce-style_systems"}, {"score": 0.0023996317685956213, "phrase": "strassen's_communication"}], "paper_keywords": ["parallel algorithms", " communication-optimal", " Strassen's matrix multiplication", " cloud computing", " MapReduce"], "paper_abstract": "Due to its on-demand and pay-as-you-go properties, cloud computing has become an attractive alternative for HPC applications. However, communication-intensive applications with complex communication patterns still cannot be performed efficiently on cloud platforms, which are equipped with MapReduce technologies, such as Hadoop and Spark. In particular, one major obstacle is that MapReduce's simple programming model cannot explicitly manipulate data transfers between compute nodes. Another obstacle is cloud's relatively poor network performance compared with traditional HPC platforms. The traditional Strassen's algorithm of square matrix multiplication has a recursive and complex pattern on the HPC platform. Therefore, it cannot be directly applied to the cloud platform. In this paper, we demonstrate how to make Strassen's algorithm with complex communication patterns \"cloud-friendly\". By reorganizing Strassen's algorithm in an iterative pattern, we completely separate its computations and communications, making it fit to MapReduce programming model. By adopting a novel data/task parallel strategy, we solve Strassen's data dependency problems, making it well balanced. This is the first instance of Strassen's algorithm in MapReduce-style systems, which also matches Strassen's communication lower bound. Further experimental results show that it achieves a speedup ranging from 1.03x to 2.50x over the classical Theta(n(3)) algorithm. We believe the principle can be applied to many other complex scientific applications.", "paper_title": "A Cloud-Friendly Communication-Optimal Implementation for Strassen's Matrix Multiplication Algorithm", "paper_id": "WOS:000364422600001"}