{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "function_symbols"}, {"score": 0.044476153128415595, "phrase": "common_inference_tasks"}, {"score": 0.03205692178730341, "phrase": "termination_criteria"}, {"score": 0.011706424486934656, "phrase": "stable_models"}, {"score": 0.008254994955929133, "phrase": "adorned_program"}, {"score": 0.004716520738331953, "phrase": "bottom-up_evaluation"}, {"score": 0.004620093797504386, "phrase": "recent_years"}, {"score": 0.0045443671106012405, "phrase": "increasing_interest"}, {"score": 0.003773049633656302, "phrase": "calimeri_et_al"}, {"score": 0.0036052633308076933, "phrase": "finite_number"}, {"score": 0.0034879261743468574, "phrase": "finite_size"}, {"score": 0.0029928611380840757, "phrase": "sufficient_conditions"}, {"score": 0.002847858807513713, "phrase": "new_technique"}, {"score": 0.0027665315772006575, "phrase": "current_termination_criteria"}, {"score": 0.002621590601574503, "phrase": "proposed_technique"}, {"score": 0.0025892330566358503, "phrase": "logic_program"}, {"score": 0.0022214412809055013, "phrase": "original_program"}, {"score": 0.0021401625519713577, "phrase": "adorned_programs"}, {"score": 0.0021049977753042253, "phrase": "original_ones"}], "paper_keywords": ["logic programming with function symbols", " bottom-up evaluation", " program evaluation termination", " stable models"], "paper_abstract": "Recent years have witnessed an increasing interest in enhancing answer set solvers by allowing function symbols. Since the introduction of function symbols makes common inference tasks undecidable, research has focused on identifying classes of programs allowing only a restricted use of function symbols while ensuring decidability of common inference tasks. Finitely-ground programs, introduced in Calimeri et al. (2008), are guaranteed to admit a finite number of stable models with each of them of finite size. Stable models of such programs can be computed and thus common inference tasks become decidable. Unfortunately, checking whether a program is finitely-ground is semi-decidable. This has led to several decidable criteria, called termination criteria, providing sufficient conditions for a program to be finitely-ground. This paper presents a new technique that, used in conjunction with current termination criteria, allows us to detect more programs as finitely-ground. Specifically, the proposed technique takes a logic program P and transforms it into an adorned program P-mu with the aim of applying termination criteria to P-mu rather than P. The transformation is sound in that if the adorned program satisfies a certain termination criterion, then the original program is finitely-ground. Importantly, applying termination criteria to adorned programs rather than the original ones strictly enlarges the class of programs recognized as finitely-ground.", "paper_title": "Logic programming with function symbols: Checking termination of bottom-up evaluation through program adornments", "paper_id": "WOS:000324926400019"}