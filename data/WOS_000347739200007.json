{"auto_keywords": [{"score": 0.04815934080538031, "phrase": "software_project"}, {"score": 0.03057614792597447, "phrase": "black-box_model"}, {"score": 0.00481495049065317, "phrase": "software_fault"}, {"score": 0.004775726266706856, "phrase": "effort_prediction"}, {"score": 0.004736820055728928, "phrase": "important_tasks"}, {"score": 0.004565609517511076, "phrase": "software_effort_prediction"}, {"score": 0.004293840838533456, "phrase": "software_fault_prediction"}, {"score": 0.004224130367280183, "phrase": "fault-prone_modules"}, {"score": 0.004021689117050817, "phrase": "different_data_mining_techniques"}, {"score": 0.003972607172518598, "phrase": "predictive_models"}, {"score": 0.0036453427552753533, "phrase": "model's_prediction"}, {"score": 0.003556873173040169, "phrase": "predictive_performance"}, {"score": 0.003263744807888499, "phrase": "random_forests"}, {"score": 0.0031975786158658158, "phrase": "support_vector_machines"}, {"score": 0.003069230909006614, "phrase": "rule_extraction_algorithm"}, {"score": 0.003056682083784002, "phrase": "alpa."}, {"score": 0.0027477745788313163, "phrase": "proposed_methodology"}, {"score": 0.0027030963394733916, "phrase": "publicly_available_datasets"}, {"score": 0.002659142621852998, "phrase": "new_datasets"}, {"score": 0.0025628355581338563, "phrase": "android_repository"}, {"score": 0.0024700078414481297, "phrase": "black-box_models"}, {"score": 0.002449839292715327, "phrase": "alpa"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Rule extraction", " Software fault and effort prediction", " Comprehensibility"], "paper_abstract": "Software fault and effort prediction are important tasks to minimize costs of a software project. In software effort prediction the aim is to forecast the effort needed to complete a software project, whereas software fault prediction tries to identify fault-prone modules. In this research both tasks are considered, thereby using different data mining techniques. The predictive models not only need to be accurate but also comprehensible, demanding that the user can understand the motivation behind the model's prediction. Unfortunately, to obtain predictive performance, comprehensibility is often sacrificed and vice versa. To overcome this problem, we extract trees from well performing Random Forests (RFs) and Support Vector Machines for regression (SVRs) making use of a rule extraction algorithm ALPA. This method builds trees (using C4.5 and REPTree) that mimic the black-box model (RF, SVR) as closely as possible. The proposed methodology is applied to publicly available datasets, complemented with new datasets that we have put together based on the Android repository. Surprisingly, the trees extracted from the black-box models by ALPA are not only comprehensible and explain how the black-box model makes (most of) its predictions, but are also more accurate than the trees obtained by working directly on the data. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "Comprehensible software fault and effort prediction: A data mining approach", "paper_id": "WOS:000347739200007"}