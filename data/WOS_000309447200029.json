{"auto_keywords": [{"score": 0.04277664592670543, "phrase": "kleene_iterations"}, {"score": 0.037874385387497184, "phrase": "strongest_inductive_invariant"}, {"score": 0.00481495049065317, "phrase": "strategy_iteration"}, {"score": 0.004778258911940497, "phrase": "succinctly_represented_control_flow_graphs"}, {"score": 0.004634254474150777, "phrase": "numerical_invariants"}, {"score": 0.0045464538515249085, "phrase": "instance_bounds"}, {"score": 0.004460309246062286, "phrase": "numerical_program_variables"}, {"score": 0.004276468590041119, "phrase": "static_analysis"}, {"score": 0.004243862930012258, "phrase": "abstract_interpretation"}, {"score": 0.004211504818267892, "phrase": "template_linear_constraint_domains"}, {"score": 0.0035045293923775256, "phrase": "abstract_domain"}, {"score": 0.003438058620195309, "phrase": "well-known_source"}, {"score": 0.0033857878144822906, "phrase": "traditional_abstract_interpretation_techniques"}, {"score": 0.0033215617190376565, "phrase": "join_operators"}, {"score": 0.003296212583539166, "phrase": "merge_nodes"}, {"score": 0.003246091321090681, "phrase": "low_graph"}, {"score": 0.003208999546225013, "phrase": "mentioned_weaknesses"}, {"score": 0.0031240868074933078, "phrase": "safety_properties"}, {"score": 0.0027215202678634517, "phrase": "template_linear_constraint_domain"}, {"score": 0.002579326836642461, "phrase": "loop-free_code_segments"}, {"score": 0.0025014259919355453, "phrase": "least_fixpoint"}, {"score": 0.0023525950486853937, "phrase": "linear_real_arithmetic_formula"}, {"score": 0.0023079225317714815, "phrase": "previously_published_techniques"}, {"score": 0.002272794656458419, "phrase": "quantifier_elimination"}, {"score": 0.0022125996721544514, "phrase": "optimal_complexity"}, {"score": 0.0021622717349518744, "phrase": "decision_problem"}], "paper_keywords": ["static program analysis", " abstract interpretation", " fixpoint equation systems", " strategy improvement algorithms", " SMT solving"], "paper_abstract": "We consider the problem of computing numerical invariants of programs, for instance bounds on the values of numerical program variables. More specifically, we study the problem of performing static analysis by abstract interpretation using template linear constraint domains. Such invariants can be obtained by Kleene iterations that are, in order to guarantee termination, accelerated by widening operators. In many cases, however, applying this form of extrapolation leads to invariants that are weaker than the strongest inductive invariant that can be expressed within the abstract domain in use. Another well-known source of imprecision of traditional abstract interpretation techniques stems from their use of join operators at merge nodes in the control low graph. The mentioned weaknesses may prevent these methods from proving safety properties. The technique we develop in this article addresses both of these issues: contrary to Kleene iterations accelerated by widening operators, it is guaranteed to yield the strongest inductive invariant that can be expressed within the template linear constraint domain in use. It also eschews join operators by distinguishing all paths of loop-free code segments. Formally speaking, our technique computes the least fixpoint within a given template linear constraint domain of a transition relation that is succinctly expressed as an existentially quantified linear real arithmetic formula. In contrast to previously published techniques that rely on quantifier elimination, our algorithm is proved to have optimal complexity: we prove that the decision problem associated with our fixpoint problem is Pi(p)(2)-complete. Our procedure mimics a Pi(p)(2) search.", "paper_title": "Invariant Generation through Strategy Iteration in Succinctly Represented Control Flow Graphs", "paper_id": "WOS:000309447200029"}