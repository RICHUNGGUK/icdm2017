{"auto_keywords": [{"score": 0.04534196037351315, "phrase": "hardware_trojan"}, {"score": 0.00481495049065317, "phrase": "malicious_programs"}, {"score": 0.004707479285061122, "phrase": "today's_integrated_circuit_industry"}, {"score": 0.004581660953729745, "phrase": "intellectual_property_provider"}, {"score": 0.0045200127552893704, "phrase": "design_house"}, {"score": 0.00441909542037375, "phrase": "aided_design_vendor"}, {"score": 0.004204904449336037, "phrase": "malicious_program"}, {"score": 0.0038764861784138117, "phrase": "finger-print-based_method"}, {"score": 0.003671865026158296, "phrase": "tamper-evident_architecture"}, {"score": 0.00357362651129581, "phrase": "runtime_signals"}, {"score": 0.003525493807130663, "phrase": "hardware_system"}, {"score": 0.0033544692489307676, "phrase": "cryptographic_hash-based_fingerprint"}, {"score": 0.003249966782844541, "phrase": "sampled_signals"}, {"score": 0.0031203609829058587, "phrase": "sampled_signal"}, {"score": 0.002812104974961672, "phrase": "trojan"}, {"score": 0.0027367816003722252, "phrase": "verification_process"}, {"score": 0.002687702958515561, "phrase": "case_study"}, {"score": 0.002639502113350897, "phrase": "hardware-based_code_injection_attacks"}, {"score": 0.0025456716198597627, "phrase": "lightweight_block_cipher"}, {"score": 0.002523772164808878, "phrase": "present"}, {"score": 0.0023786208919912596, "phrase": "tea"}, {"score": 0.0023148964315569866, "phrase": "code_injection_hardware_trojan"}, {"score": 0.0021241414408077895, "phrase": "concurrent_generation"}, {"score": 0.0021049977753042253, "phrase": "multiple_fingerprints"}], "paper_keywords": ["Security", " integrated circuits", " built-in self-test"], "paper_abstract": "In today's Integrated Circuit industry, a foundry, an Intellectual Property provider, a design house, or a Computer Aided Design vendor may install a hardware Trojan on a chip which executes a malicious program such as one providing an information leaking back door. In this paper, we propose a finger-print-based method to detect any malicious program in hardware. We propose a tamper-evident architecture (TEA) which samples runtime signals in a hardware system during the performance of a computation, and generates a cryptographic hash-based fingerprint that uniquely identifies a sequence of sampled signals. A hardware Trojan cannot tamper with any sampled signal without leaving tamper evidence such as a missing or incorrect fingerprint. We further verify fingerprints off-chip such that a hardware Trojan cannot tamper with the verification process. As a case study, we detect hardware-based code injection attacks in a SPARC V8 architecture LEON2 processor. Based on a lightweight block cipher called PRESENT, a TEA requires only a 4.5% area increase, while avoiding being detected by the TEA increases the area of a code injection hardware Trojan with a 1 KB ROM from 2.5% to 36.1% of a LEON2 processor. Such a low cost further enables more advanced tamper diagnosis techniques based on a concurrent generation of multiple fingerprints.", "paper_title": "Fingerprint-Based Detection and Diagnosis of Malicious Programs in Hardware", "paper_id": "WOS:000360794600021"}