{"auto_keywords": [{"score": 0.03585984673974763, "phrase": "unordered_tree_inclusion"}, {"score": 0.03407225739055566, "phrase": "pattern_tree"}, {"score": 0.00481495049065317, "phrase": "extended_tree_inclusion"}, {"score": 0.004507760907425495, "phrase": "large_tree"}, {"score": 0.004429191773525288, "phrase": "large_collection"}, {"score": 0.00427612041204006, "phrase": "specified_pattern_tree"}, {"score": 0.003985602342418578, "phrase": "tree_edit_distance"}, {"score": 0.0039333604469462356, "phrase": "widely-used_measure"}, {"score": 0.0037656312486333086, "phrase": "np"}, {"score": 0.0036660436272785476, "phrase": "unordered_trees"}, {"score": 0.003492840830999027, "phrase": "new_similarity_measure"}, {"score": 0.002981026404927824, "phrase": "original_one"}, {"score": 0.002646880721119838, "phrase": "text_tree"}, {"score": 0.0025778546800417808, "phrase": "maximum_outdegree"}, {"score": 0.0024559368099486647, "phrase": "synthetic_and_real_datasets"}, {"score": 0.0024130437638400404, "phrase": "proposed_algorithm"}, {"score": 0.0023192471808039746, "phrase": "bibliographic_matching"}, {"score": 0.0022687189700002254, "phrase": "typical_entity_resolution_problem"}, {"score": 0.002248816575548875, "phrase": "tree-structured_data"}, {"score": 0.002142426911242168, "phrase": "constant_number"}, {"score": 0.0021236300589450143, "phrase": "deletion_operations"}], "paper_keywords": ["Tree edit distance", " tree inclusion", " unordered trees", " dynamic programming"], "paper_abstract": "This paper considers the problem of identifying all locations of subtrees in a large tree or in a large collection of trees that are similar to a specified pattern tree, where all trees are assumed to be rooted and node-labeled. The tree edit distance is a widely-used measure of tree (dis-) similarity, but is NP-hard to compute for unordered trees. To cope with this issue, we propose a new similarity measure which extends the concept of unordered tree inclusion by taking the costs of insertion and substitution operations on the pattern tree into account, and present an algorithm for computing it. Our algorithm has the same time complexity as the original one for unordered tree inclusion, i.e., it runs in O(vertical bar T-1 vertical bar vertical bar T-2 vertical bar) time, where T-1 and T-2 denote the pattern tree and the text tree, respectively, when the maximum outdegree of T-1 is bounded by a constant. Our experimental evaluation using synthetic and real datasets confirms that the proposed algorithm is fast and scalable and very useful for bibliographic matching, which is a typical entity resolution problem for tree-structured data. Furthermore, we extend our algorithm to also allow a constant number of deletion operations on T-1 while still running in O(vertical bar T-1 vertical bar vertical bar T-2 vertical bar) time.", "paper_title": "Similar Subtree Search Using Extended Tree Inclusion", "paper_id": "WOS:000364853800016"}