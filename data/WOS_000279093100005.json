{"auto_keywords": [{"score": 0.0342305708340517, "phrase": "html"}, {"score": 0.018723084287028464, "phrase": "embedded_objects"}, {"score": 0.00829225197921582, "phrase": "current_web"}, {"score": 0.007830597102162908, "phrase": "existing_algorithms"}, {"score": 0.00481495049065317, "phrase": "current_web_page_structure"}, {"score": 0.00476334344613564, "phrase": "prefetching_performance"}, {"score": 0.0047292449487169345, "phrase": "web_prefetching"}, {"score": 0.0046118021635786315, "phrase": "user-perceived_latencies"}, {"score": 0.004529696178827392, "phrase": "spatial_locality"}, {"score": 0.004481132747216135, "phrase": "user_accesses"}, {"score": 0.004385555408850022, "phrase": "future_accesses"}, {"score": 0.004338530593157634, "phrase": "previous_ones"}, {"score": 0.0042920078348374375, "phrase": "prefetching_engine"}, {"score": 0.0042004472903194616, "phrase": "web_objects"}, {"score": 0.004081385289516914, "phrase": "existing_prediction_algorithms"}, {"score": 0.004037608759610068, "phrase": "acceptable_performance"}, {"score": 0.003937273640906994, "phrase": "high_increase"}, {"score": 0.003459191419478298, "phrase": "user-perceived_latency"}, {"score": 0.0033011569787033297, "phrase": "current_web_pages"}, {"score": 0.0027575842698911173, "phrase": "latency_reduction"}, {"score": 0.00267931029131157, "phrase": "double_dependency_graph"}, {"score": 0.0026032523182547003, "phrase": "container_objects"}, {"score": 0.0025202582748972122, "phrase": "new_prediction_model"}, {"score": 0.002370625627299064, "phrase": "extra_requests"}, {"score": 0.0023283331070162575, "phrase": "dog"}, {"score": 0.0023033100935570755, "phrase": "perceived_latency"}, {"score": 0.0021979668122507003, "phrase": "ddg"}, {"score": 0.0021821915946356168, "phrase": "latency_reductions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Web prefetching", " Web performance"], "paper_abstract": "Web prefetching is a technique aimed at reducing user-perceived latencies in the World Wide Web. The spatial locality shown by user accesses makes it possible to predict future accesses from the previous ones. A prefetching engine uses these predictions to prefetch web objects before the user demands them. The existing prediction algorithms achieved an acceptable performance when they were proposed but the high increase in the number of embedded objects per page has reduced their effectiveness in the current web. In this paper. we show that most of the predictions made by the existing algorithms are not useful to reduce the user-perceived latency because these algorithms do not take into account the structure of the current web pages, i.e., an HTML object with several embedded objects. Thus, they predict the accesses to the embedded objects in an HTML after reading the HTML itself. For this reason, the prediction is not made early enough to prefetch the objects and, therefore, there is no latency reduction. In this paper we present the double dependency graph (DDG) algorithm that distinguishes between container objects (HTML) and embedded objects to create a new prediction model according to the structure of the current web. Results show that, for the same number of extra requests to the server, DOG reduces the perceived latency, on average, 40% more than the existing algorithms. Moreover, DDG distributes latency reductions more homogeneously among users. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Using current web page structure to improve prefetching performance", "paper_id": "WOS:000279093100005"}