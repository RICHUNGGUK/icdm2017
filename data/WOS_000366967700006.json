{"auto_keywords": [{"score": 0.029682353684119183, "phrase": "learning_automaton"}, {"score": 0.00481495049065317, "phrase": "multiprocessor_task_graph_scheduling"}, {"score": 0.004685375117376838, "phrase": "learning_automata"}, {"score": 0.004648995193787914, "phrase": "optimized_task_scheduling"}, {"score": 0.004523865550323285, "phrase": "multiprocessor_environments"}, {"score": 0.004317109072311102, "phrase": "parallel_program"}, {"score": 0.004233762728640565, "phrase": "smaller_segments"}, {"score": 0.004024485331377682, "phrase": "communication_costs"}, {"score": 0.003931402465972151, "phrase": "directed_acyclic_graph"}, {"score": 0.0037224647319912293, "phrase": "program_finish-time"}, {"score": 0.003552204377093386, "phrase": "processor_elements"}, {"score": 0.0034971932704828197, "phrase": "precedence_constrains"}, {"score": 0.0033647222778563617, "phrase": "np"}, {"score": 0.00331125524068286, "phrase": "general_form"}, {"score": 0.0031845067058084583, "phrase": "heuristic_and_meta-heuristic_approaches"}, {"score": 0.0030510524599585156, "phrase": "la"}, {"score": 0.00300339527261653, "phrase": "abstract_model"}, {"score": 0.002956858061485755, "phrase": "stochastic_environment"}, {"score": 0.0028436364707396613, "phrase": "environment_feedback"}, {"score": 0.002756180088265064, "phrase": "simple_component"}, {"score": 0.0026299995767138304, "phrase": "complicated_behavior"}, {"score": 0.0025690867646665835, "phrase": "desired_solutions"}, {"score": 0.002549096826249, "phrase": "appropriate_learning_algorithm"}, {"score": 0.0024803459795996116, "phrase": "ingenious_graph-like_learning_automata"}, {"score": 0.0024134449026937586, "phrase": "task_graph"}, {"score": 0.0023209828061385596, "phrase": "multiprocessor_task-scheduling_problem"}, {"score": 0.0022495644368875686, "phrase": "different_experiments"}, {"score": 0.0021215125099937663, "phrase": "traditional_methods"}, {"score": 0.0021049977753042253, "phrase": "genetic_algorithm"}], "paper_keywords": ["Learning automata", " multiprocessor task scheduling", " parallel and distributed systems", " task graph"], "paper_abstract": "Optimized task scheduling is one of the most important challenges in multiprocessor environments such as parallel and distributed systems. In such these systems, each parallel program is decomposed into the smaller segments so-called tasks. Task execution times, precedence constrains and communication costs are modeled by using a directed acyclic graph (DAG) named task graph. The goal is to minimize the program finish-time (makespan) by means of mapping the tasks to the processor elements in such a way that precedence constrains are preserved. This problem is shown to be NP-hard in general form and some restricted ones. Therefore, utilization of heuristic and meta-heuristic approaches to solve this problem is logical. Learning automata (LA) is an abstract model to interact with stochastic environment, which tries to reform itself based on the environment feedback. Although a learning automaton itself is a simple component, a group of them by cooperating each other can show complicated behavior, and can coverage to desired solutions under appropriate learning algorithm. In this paper, an ingenious graph-like learning automata in which each task in the task graph is represented by a learning automaton tries to solve the multiprocessor task-scheduling problem in a collective manner. Set of different experiments on various real-world task-graphs has been done and archived results are so promising compared to the traditional methods and genetic algorithm.", "paper_title": "Multiprocessor Task Graph Scheduling Using a Novel Graph-Like Learning Automata", "paper_id": "WOS:000366967700006"}