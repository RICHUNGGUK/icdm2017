{"auto_keywords": [{"score": 0.031148872652186122, "phrase": "webc"}, {"score": 0.01042853041834588, "phrase": "legacy_code"}, {"score": 0.007699472986001776, "phrase": "previous_approaches"}, {"score": 0.00481495049065317, "phrase": "portable_framework"}, {"score": 0.004675930527604869, "phrase": "web_browsers"}, {"score": 0.00440976345264104, "phrase": "type-safe_language"}, {"score": 0.0043075895956345474, "phrase": "javascript"}, {"score": 0.004257438885157138, "phrase": "java"}, {"score": 0.00408617426304956, "phrase": "huge_amount"}, {"score": 0.0040385352882334235, "phrase": "legacy_codes"}, {"score": 0.003968112038249246, "phrase": "unsafe_languages"}, {"score": 0.0038761135052054765, "phrase": "rich_functionality"}, {"score": 0.003591542373891629, "phrase": "type-safe_components"}, {"score": 0.0035288860880035985, "phrase": "secure_way"}, {"score": 0.0034268702387746106, "phrase": "software-based_fault_isolation"}, {"score": 0.0033083236588614174, "phrase": "untrusted_legacy_code"}, {"score": 0.0032505921489759224, "phrase": "sfi_approach"}, {"score": 0.003212663446866794, "phrase": "machine-code_transformation"}, {"score": 0.0030118058266380503, "phrase": "architecture_independence"}, {"score": 0.0025254115243261875, "phrase": "webc_security_language"}, {"score": 0.002452333524620638, "phrase": "memory_isolation"}, {"score": 0.00224551648748308, "phrase": "stronger_security"}, {"score": 0.0021049977753042253, "phrase": "average_runtime_overhead"}], "paper_keywords": ["WebC", " software fault isolation", " symbol link", " shadow memory area", " portable"], "paper_abstract": "For security, most web applications are developed in some type-safe language, such as JavaScript or Java. However, there is a huge amount of legacy codes developed in unsafe languages, which provide rich functionality and are more efficient than their type-safe counterparts. To allow browsers to incorporate type-safe components in a secure way, previous approaches use the software-based fault isolation (SFI) to isolate untrusted legacy code. The SFI approach performs machine-code transformation for security, but the downside is the loss of architecture independence. We propose WebC, a system that allows legacy code transmitted over the web via the Low Level Virtual Machine (LLVM) bitcode format. The untrusted bitcode is transformed by WebC into code in the WebC security language, which enforces both memory isolation and control-flow integrity. Compared with previous approaches, WebC is more portable, provides stronger security, and allows more flexible memory management. Experimental results show that the average runtime overhead of WebC is modest.", "paper_title": "WebC: toward a portable framework for deploying legacy code in web browsers", "paper_id": "WOS:000358136300010"}