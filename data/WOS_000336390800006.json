{"auto_keywords": [{"score": 0.0475755621362967, "phrase": "sequential_programs"}, {"score": 0.00481495049065317, "phrase": "growing_number"}, {"score": 0.004763565662615503, "phrase": "processing_cores"}, {"score": 0.0046875099587735825, "phrase": "single_cpu"}, {"score": 0.004121015016128205, "phrase": "many-core_architecture"}, {"score": 0.004055176557424983, "phrase": "automatic_parallelization_research"}, {"score": 0.0036815763368083197, "phrase": "potentially_available_parallelism"}, {"score": 0.0034332736827447654, "phrase": "dynamic_data_dependencies"}, {"score": 0.0032712190037495975, "phrase": "meta_re-arrange_buffer"}, {"score": 0.003167441161387607, "phrase": "available_parallelism"}, {"score": 0.002859977408815691, "phrase": "ideal_many-core_processor"}, {"score": 0.0027991418754844347, "phrase": "data_dependencies"}, {"score": 0.002769209760453212, "phrase": "program_correctness"}, {"score": 0.0025273383208209922, "phrase": "potential_speedup"}, {"score": 0.0023694065215394593, "phrase": "potential_parallelism"}, {"score": 0.0023440589015485077, "phrase": "normal_programs"}, {"score": 0.0022453451864218477, "phrase": "existing_technologies"}, {"score": 0.002174041708084857, "phrase": "automatic_parallelization"}, {"score": 0.0021049977753042253, "phrase": "many-core_architectures"}], "paper_keywords": ["Parallel computing", " Automatic parallelization", " Speculative multi-threading", " Many-core", " Parallelism measurement"], "paper_abstract": "The growing number of processing cores in a single CPU is demanding more parallelism from sequential programs. But in the past decades few work has succeeded in automatically exploiting enough parallelism, which casts a shadow over the many-core architecture and the automatic parallelization research. However, actually few work was tried to understand the nature, or amount, of the potentially available parallelism in programs. In this paper we will analyze at runtime the dynamic data dependencies among superblocks of sequential programs. We designed a meta re-arrange buffer to measure and exploit the available parallelism, with which the superblocks are dynamically analyzed, reordered and dispatched to run in parallel on an ideal many-core processor, while the data dependencies and program correctness are still maintained. In our experiments, we observed that with the superblock reordering, the potential speedup ranged from 1.08 to 89.60. The results showed that the potential parallelism of normal programs was still far from fully exploited by existing technologies. This observation makes the automatic parallelization a promising research direction for many-core architectures.", "paper_title": "Potential thread-level-parallelism exploration with superblock reordering", "paper_id": "WOS:000336390800006"}