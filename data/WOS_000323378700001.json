{"auto_keywords": [{"score": 0.03154095312054508, "phrase": "entire_dataset"}, {"score": 0.011188939730623924, "phrase": "query_processing"}, {"score": 0.007710087684394976, "phrase": "materialized_views"}, {"score": 0.00481495049065317, "phrase": "cloud_databases"}, {"score": 0.004722038375317162, "phrase": "central_promise"}, {"score": 0.004685375117376838, "phrase": "cloud_services"}, {"score": 0.004436545340717729, "phrase": "temporarily_available_nodes"}, {"score": 0.004367898947304223, "phrase": "elastic_database_services"}, {"score": 0.004266907250334316, "phrase": "essential_task"}, {"score": 0.004217286731331736, "phrase": "elastic_data_services"}, {"score": 0.003993216345115755, "phrase": "high_availability"}, {"score": 0.0036363418376496484, "phrase": "e._g."}, {"score": 0.0035940277928341265, "phrase": "log_shipping"}, {"score": 0.00337650257503995, "phrase": "key_range"}, {"score": 0.0032220148724914867, "phrase": "newly_added_node"}, {"score": 0.0031721009574803127, "phrase": "short_period"}, {"score": 0.0031107911390188055, "phrase": "additional_small_key_range"}, {"score": 0.0028325548627901004, "phrase": "overall_update_performance"}, {"score": 0.0027886573969044042, "phrase": "traditional_high-availability_strategy"}, {"score": 0.0026923527275481804, "phrase": "key_ranges"}, {"score": 0.0025292620341476283, "phrase": "query_processing_tasks"}, {"score": 0.002499798127196099, "phrase": "authors'_proposed_solution"}, {"score": 0.0024514505056251316, "phrase": "partitioned_b-trees"}, {"score": 0.002376027109070317, "phrase": "secondary_indexes"}, {"score": 0.002223351523626989, "phrase": "maintenance_strategies"}, {"score": 0.002206045784326466, "phrase": "temporarily_available_copies"}, {"score": 0.002163367190715979, "phrase": "possible_query_execution_plans"}, {"score": 0.0021049977753042253, "phrase": "appropriate_query_optimization_techniques"}], "paper_keywords": ["Adaptive Merging", " Cloud Services", " Data Management", " Key Range", " Nodes", " Partitioned B-Trees", " Query Optimization Techniques", " Query Processing"], "paper_abstract": "A central promise of cloud services is elastic, on-demand provisioning. The provisioning of data on temporarily available nodes is what makes elastic database services a hard problem. The essential task that enables elastic data services is bringing a node and its data up-to-date. Strategies for high availability do not satisfy the need in this context because they bring nodes online and up-to-date by repeating history, e. g., by log shipping. Nodes must become up-to-date and useful for query processing incrementally by key range. What is wanted is a technique such that in a newly added node, during each short period of time, an additional small key range becomes up-to-date, until eventually the entire dataset becomes up-to-date and useful for query processing, with overall update performance comparable to a traditional high-availability strategy that carries the entire dataset forward without regard to key ranges. Even without the entire dataset being available, the node is productive and participates in query processing tasks. The authors' proposed solution relies on techniques from partitioned B-trees, adaptive merging, deferred maintenance of secondary indexes and of materialized views, and query optimization using materialized views. The paper introduces a family of maintenance strategies for temporarily available copies, the space of possible query execution plans and their cost functions, as well as appropriate query optimization techniques.", "paper_title": "Elasticity in Cloud Databases and Their Query Processing", "paper_id": "WOS:000323378700001"}