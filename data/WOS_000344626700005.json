{"auto_keywords": [{"score": 0.04963419481547922, "phrase": "data_corruption"}, {"score": 0.04359758181831713, "phrase": "runtime_checker"}, {"score": 0.03417668271679221, "phrase": "file_system"}, {"score": 0.00481495049065317, "phrase": "transactional_mechanisms"}, {"score": 0.00466016686289196, "phrase": "file-system_bugs"}, {"score": 0.004304574865291508, "phrase": "significant_downtime"}, {"score": 0.004032118497047498, "phrase": "metadata_updates"}, {"score": 0.003884212965525665, "phrase": "metadata_blocks"}, {"score": 0.003587616378156851, "phrase": "file_system's_transactional_mechanism"}, {"score": 0.0032827577713351336, "phrase": "durability_properties"}, {"score": 0.0030747771905143273, "phrase": "commit_time"}, {"score": 0.003003726508522467, "phrase": "strong_guarantee"}, {"score": 0.0029618842673339173, "phrase": "block_write"}, {"score": 0.0029206231857112305, "phrase": "file_system_consistency"}, {"score": 0.002735522834514124, "phrase": "shadow_paging_file_systems"}, {"score": 0.0026598200370569433, "phrase": "committed_transactions"}, {"score": 0.0025862068041567934, "phrase": "key_properties"}, {"score": 0.002344201345813952, "phrase": "runtime_checkers"}, {"score": 0.0021247934141234988, "phrase": "normal_operation"}, {"score": 0.0021049977753042253, "phrase": "low_overhead"}], "paper_keywords": ["Reliability", " Verification", " Performance", " Measurement", " Metadata consistency", " atomicity", " durability", " runtime verification", " file system checker", " Ext3", " Btrfs"], "paper_abstract": "Data corruption is the most common consequence of file-system bugs. When such corruption occurs, offline check and recovery tools must be used, but they are error prone and cause significant downtime. Previously we showed that a runtime checker for the Ext3 file system can verify that metadata updates are consistent, helping detect corruption in metadata blocks at transaction commit time. However, corruption can still occur when a bug in the file system's transactional mechanism loses, misdirects, or corrupts writes. We show that a runtime checker must enforce the atomicity and durability properties of the file system on every write, in addition to checking transactions at commit time, to provide the strong guarantee that every block write will maintain file system consistency. We identify the invariants that need to be enforced on journaling and shadow paging file systems to preserve the integrity of committed transactions. We also describe the key properties that make it feasible to check these invariants for a file system. Based on this characterization, we have implemented runtime checkers for Ext3 and Btrfs. Our evaluation shows that both checkers detect data corruption effectively, and they can be used during normal operation with low overhead.", "paper_title": "Checking the Integrity of Transactional Mechanisms", "paper_id": "WOS:000344626700005"}