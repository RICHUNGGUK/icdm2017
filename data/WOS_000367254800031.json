{"auto_keywords": [{"score": 0.04740170155072888, "phrase": "surge"}, {"score": 0.00481495049065317, "phrase": "collection-oriented_programming_model"}, {"score": 0.004140490129683107, "phrase": "parallel_computations"}, {"score": 0.004081385289516914, "phrase": "nested_high-level_data_collections"}, {"score": 0.0038810583785936505, "phrase": "code_generation_interface"}, {"score": 0.00374399358035391, "phrase": "core_computation"}, {"score": 0.0034841647157189985, "phrase": "multiple_implementations"}, {"score": 0.0032893028281789287, "phrase": "multi-core_cpus"}, {"score": 0.003105305189036267, "phrase": "architecture-specific_implementation"}, {"score": 0.002995554770117301, "phrase": "multiple_architectures"}, {"score": 0.00284837132359445, "phrase": "search_space"}, {"score": 0.002708399936381754, "phrase": "specific_architectures"}, {"score": 0.0025752890978323873, "phrase": "real-world_benchmarks"}, {"score": 0.0024842242921857705, "phrase": "sparse_linear-algebra"}], "paper_keywords": ["Nested-data-parallelism", " performance-portability"], "paper_abstract": "This paper describes Surge, a collection-oriented programming model that enables programmers to compose parallel computations using nested high-level data collections and operators. Surge exposes a code generation interface, decoupled from the core computation, that enables programmers and autotuners to easily generate multiple implementations of the same computation on various parallel architectures such as multi-core CPUs and GPUs. By decoupling computations from architecture-specific implementation, programmers can target multiple architectures more easily, and generate a search space that facilitates optimization and customization for specific architectures. We express in Surge four real-world benchmarks from domains such as sparse linear-algebra and machine learning and from the same performance-portable specification, generate OpenMP and CUDA C++ implementations. Surge generates efficient, scalable code which achieves up to 1.32x speedup over handcrafted, well-optimized CUDA code.", "paper_title": "A Collection-Oriented Programming Model for Performance Portability", "paper_id": "WOS:000367254800031"}