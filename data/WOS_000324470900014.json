{"auto_keywords": [{"score": 0.05007366045790156, "phrase": "modular_approach"}, {"score": 0.047170274043280024, "phrase": "virtual_machine"}, {"score": 0.04086919256049774, "phrase": "osr"}, {"score": 0.02663267144972519, "phrase": "dynamic_inlining"}, {"score": 0.026009591843300407, "phrase": "matlab"}, {"score": 0.00478163886605204, "phrase": "on-stack_replacement"}, {"score": 0.004748558719924958, "phrase": "llvm."}, {"score": 0.004161553532799662, "phrase": "optimizing_jit_compiler"}, {"score": 0.004061584718427419, "phrase": "interrupted_function"}, {"score": 0.003802135020791801, "phrase": "potentially_long-running_loops"}, {"score": 0.0037366473207825234, "phrase": "dynamic_optimization"}, {"score": 0.0034736499231079083, "phrase": "llvm_compiler_infrastructure"}, {"score": 0.003413800638453569, "phrase": "important_step"}, {"score": 0.0033783905179447216, "phrase": "llvm"}, {"score": 0.0033433365160336842, "phrase": "popular_support"}, {"score": 0.003285725064532174, "phrase": "osr_capability"}, {"score": 0.0032629585038738856, "phrase": "compiler_developers"}, {"score": 0.003229103141223776, "phrase": "new_dynamic_techniques"}, {"score": 0.002991300390411948, "phrase": "clean_modular_addition"}, {"score": 0.0029602552900111407, "phrase": "standard_llvm_distribution"}, {"score": 0.0028590732866152118, "phrase": "llvm-ir_level"}, {"score": 0.002761340122199076, "phrase": "target_code_generation"}, {"score": 0.0027326751144684386, "phrase": "osr_implementation"}, {"score": 0.002685558057339722, "phrase": "different_compilers"}, {"score": 0.002630085891013006, "phrase": "dynamic_optimizations"}, {"score": 0.0024876840172100567, "phrase": "mcvm._mcvm"}, {"score": 0.0024109902338204873, "phrase": "llvm-based_jit_compiler"}, {"score": 0.0023694065215394593, "phrase": "popular_dynamic_language"}, {"score": 0.0023529740798601015, "phrase": "scientific_and_engineering_applications"}, {"score": 0.002320449502337321, "phrase": "large_matrices"}, {"score": 0.002288373472756928, "phrase": "long-running_loops"}, {"score": 0.002241087008892355, "phrase": "ideal_target"}, {"score": 0.0022255425106527727, "phrase": "dynamic_jit_compilation"}, {"score": 0.0021569129153653777, "phrase": "reasonable_overheads"}, {"score": 0.0021049977753042253, "phrase": "performance_improvements"}], "paper_keywords": ["Experimentation", " Languages", " Performance", " On-Stack Replacement", " LLVM", " MATLAB", " JIT Compiler Optimization"], "paper_abstract": "On-stack replacement (OSR) is a technique that allows a virtual machine to interrupt running code during the execution of a function/method, to re-optimize the function on-the-fly using an optimizing JIT compiler, and then to resume the interrupted function at the point and state at which it was interrupted. OSR is particularly useful for programs with potentially long-running loops, as it allows dynamic optimization of those loops as soon as they become hot. This paper presents a modular approach to implementing OSR for the LLVM compiler infrastructure. This is an important step forward because LLVM is gaining popular support, and adding the OSR capability allows compiler developers to develop new dynamic techniques. In particular, it will enable more sophisticated LLVM-based JIT compiler approaches. Indeed, other compiler/VM developers can use our approach because it is a clean modular addition to the standard LLVM distribution. Further, our approach is defined completely at the LLVM-IR level and thus does not require any modifications to the target code generation. The OSR implementation can be used by different compilers to support a variety of dynamic optimizations. As a demonstration of our OSR approach, we have used it to support dynamic inlining in McVM. McVM is a virtual machine for MATLAB which uses a LLVM-based JIT compiler. MATLAB is a popular dynamic language for scientific and engineering applications that typically manipulate large matrices and often contain long-running loops, and is thus an ideal target for dynamic JIT compilation and OSRs. Using our McVM example, we demonstrate reasonable overheads for our benchmark set, and performance improvements when using it to perform dynamic inlining.", "paper_title": "A Modular Approach to On-Stack Replacement in LLVM", "paper_id": "WOS:000324470900014"}