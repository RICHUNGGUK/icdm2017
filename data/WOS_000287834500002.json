{"auto_keywords": [{"score": 0.029150941158756896, "phrase": "mtl"}, {"score": 0.00481495049065317, "phrase": "delayed_evaluation"}, {"score": 0.004760765880314089, "phrase": "runtime_code_generation"}, {"score": 0.004707188147442449, "phrase": "active_libraries"}, {"score": 0.00447341965028879, "phrase": "active_part"}, {"score": 0.00399449659126893, "phrase": "active_dense_linear_algebra_library"}, {"score": 0.003817548980308163, "phrase": "library_calls"}, {"score": 0.003526476304712492, "phrase": "key_optimisations"}, {"score": 0.0034279721355412285, "phrase": "loop_fusion_and_array_contraction"}, {"score": 0.0033511469200347907, "phrase": "desola"}, {"score": 0.0032208091960514128, "phrase": "different_client_calls"}, {"score": 0.0031665087019813244, "phrase": "unnecessary_intermediate_temporaries"}, {"score": 0.0030955250132409964, "phrase": "temporary_arrays"}, {"score": 0.002941558420246247, "phrase": "benchmark_suite"}, {"score": 0.0029083942467546305, "phrase": "linear_solvers"}, {"score": 0.002859345731792013, "phrase": "iterative_template_library"}, {"score": 0.0027170943110836425, "phrase": "matrix_template_library"}, {"score": 0.002671882436178919, "phrase": "atlas"}, {"score": 0.0025383451160985488, "phrase": "intel_math_kernel_library"}, {"score": 0.0024814079299143536, "phrase": "runtime_compilation_overheads"}, {"score": 0.0023579143175099324, "phrase": "first_iteration"}, {"score": 0.002305014991156598, "phrase": "larger_matrix_sizes"}, {"score": 0.002279011030331704, "phrase": "performance_matches"}, {"score": 0.0021778895748464024, "phrase": "matrix_operations"}], "paper_keywords": ["Runtime code generation", " Delayed evaluation", " Active libraries", " Numerical libraries"], "paper_abstract": "Active libraries can be defined as libraries which play an active part in the compilation, in particular, the optimisation of their client code. This paper explores the implementation of an active dense linear algebra library by delaying evaluation of expressions built using library calls, then generating code at runtime for the compositions that occur. The key optimisations in this context are loop fusion and array contraction. Our prototype C++ implementation, DESOLA, automatically fuses loops arising from different client calls, identifies unnecessary intermediate temporaries, and contracts temporary arrays to scalars. Performance is evaluated using a benchmark suite of linear solvers from ITL (Iterative Template Library), and is compared with MTL (Matrix Template Library), ATLAS (Automatically Tuned Linear Algebra) and IMKL (Intel Math Kernel Library). Excluding runtime compilation overheads (caching means they occur only on the first iteration), for larger matrix sizes, performance matches or exceeds MTL; when fusion of matrix operations occurs, performance exceeds that of ATLAS and IMKL (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "DESOLA: An active linear algebra library using delayed evaluation and runtime code generation", "paper_id": "WOS:000287834500002"}