{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "textual_use_cases"}, {"score": 0.025201781267878687, "phrase": "use_cases"}, {"score": 0.004620093797504386, "phrase": "use_case"}, {"score": 0.004312622975366676, "phrase": "external_actors"}, {"score": 0.003731673223879279, "phrase": "use_case_approach"}, {"score": 0.003459191419478298, "phrase": "use_case_based_system_development"}, {"score": 0.0033190180867511605, "phrase": "design_synthesis"}, {"score": 0.0029722900280316216, "phrase": "formal_model"}, {"score": 0.0026616868981501006, "phrase": "natural_language"}, {"score": 0.0026071599759743833, "phrase": "abstract_syntax"}, {"score": 0.0024501740852758505, "phrase": "tuple_structure"}, {"score": 0.0023346234464901978, "phrase": "petri_nets"}, {"score": 0.0021049977753042253, "phrase": "execution_semantics"}], "paper_keywords": ["Use cases", " Petri nets", " formalization", " reactive behavior", " synthesis"], "paper_abstract": "A use case is a specification of interactions involving a system and external actors of that system. The intuitive, user centered nature of textual use cases is one of the reasons for the success of the use case approach. A certain level of formalization is however needed to automate use case based system development, including tasks such as design synthesis, verification and validation. In this paper, a mapping from textual use cases to a formal model (Petri nets) is proposed. Use cases are described in a restricted-form of natural language. The abstract syntax of the language is formally defined using a tuple structure. The mapping from use cases to Petri nets considers use cases sequencing constraints defined at the syntactic-level, and provides a definition of execution semantics to use cases.", "paper_title": "FORMALIZATION OF TEXTUAL USE CASES BASED ON PETRI NETS", "paper_id": "WOS:000285458700005"}