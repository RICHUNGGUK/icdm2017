{"auto_keywords": [{"score": 0.04942981937458461, "phrase": "dynamic_differentiated_distributed_detection"}, {"score": 0.04238173017198959, "phrase": "packet_order"}, {"score": 0.00481495049065317, "phrase": "scalable_pattern_matching"}, {"score": 0.00478218760286811, "phrase": "multicore_platform"}, {"score": 0.004558977045730675, "phrase": "key_building_block"}, {"score": 0.004497129150551236, "phrase": "modern_multicore_platforms"}, {"score": 0.004405919996432158, "phrase": "traditional_hardware_solutions"}, {"score": 0.004243460284890507, "phrase": "rapid_diversification"}, {"score": 0.004214569581360156, "phrase": "internet_applications"}, {"score": 0.004129067429043414, "phrase": "uneven_network_flow_sizes"}, {"score": 0.003976775340098895, "phrase": "traditional_parallel_processing_models"}, {"score": 0.0038960785110831162, "phrase": "basic_unit"}, {"score": 0.0037523473563976246, "phrase": "multicore_platforms'_power"}, {"score": 0.0037140731069193896, "phrase": "low_cpu_utilization"}, {"score": 0.003688773272422118, "phrase": "poor_scalability"}, {"score": 0.003663645143713398, "phrase": "increasing_numbers"}, {"score": 0.003504418473478722, "phrase": "novel_parallel_inspection_model"}, {"score": 0.0033982429092938764, "phrase": "balanced_parallel_detection"}, {"score": 0.0033406481167452436, "phrase": "pm_workload_partition"}, {"score": 0.0031198362555601377, "phrase": "multiple_cores"}, {"score": 0.0029739847626249157, "phrase": "higher_number"}, {"score": 0.0029235593748707495, "phrase": "higher_algorithmic_overhead"}, {"score": 0.002883833572486452, "phrase": "optimal_throughput"}, {"score": 0.002854392852477005, "phrase": "flow_size_distributions"}, {"score": 0.0027395968397212053, "phrase": "different_detection_modes"}, {"score": 0.0025584115892805384, "phrase": "runtime_information"}, {"score": 0.002497862210672172, "phrase": "multiple_pm_algorithms"}, {"score": 0.002455489835065937, "phrase": "different_pattern_subsets"}, {"score": 0.0023973704289918726, "phrase": "algorithms'_characteristics"}, {"score": 0.0023728841359713106, "phrase": "detection_mode_selection"}, {"score": 0.0022696277881969896, "phrase": "unnecessary_overheads"}, {"score": 0.002215897810312801, "phrase": "high_core_utilization"}, {"score": 0.0022007808283071133, "phrase": "low_overhead"}, {"score": 0.002170854875902186, "phrase": "distinct_performance_gains"}, {"score": 0.0021560445153869985, "phrase": "traditional_load_balancing_schemes"}, {"score": 0.0021194582289403925, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "real-world_pattern_sets"}], "paper_keywords": ["Load balancing", " network-level security and protection", " scheduling and task partitioning"], "paper_abstract": "Pattern Matching (PM) is a key building block for many emerging network applications. Modern multicore platforms are becoming performance competitive with traditional hardware solutions, which are expensive and hard to adapt to the rapid diversification of Internet applications. However, due to uneven network flow sizes and the need to retain packet order within each flow, traditional parallel processing models using packet flows as the basic unit to partition the workload cannot fully take advantage of multicore platforms' power, exhibiting low CPU utilization and poor scalability with increasing numbers of CPUs or cores. In this paper, we propose a novel parallel inspection model called Dynamic Differentiated Distributed Detection (D-4). D-4 deploys balanced parallel detection by adding one more dimension on PM workload partition. The pattern set is prepartitioned into several subsets so as to distribute the workload of the hot flows across multiple cores while still maintaining packet order within each flow. We also show theoretically that higher number of subsets leads to higher algorithmic overhead. To achieve optimal throughput for all flow size distributions, D-4 prepartitions the pattern set in several ways for use in different detection modes beforehand, and then, dynamically switches among these modes on-the-fly according to the flow and runtime information it senses. D-4 also allows multiple PM algorithms to work simultaneously on different pattern subsets. According to several heuristics and the algorithms' characteristics, the detection mode selection and subset partitioning algorithms are designed to maximize the CPU/core utilization while avoiding unnecessary overheads. Experiments show that D-4 features high core utilization and low overhead, thus achieving distinct performance gains against traditional load balancing schemes, as shown by experimental results using real-world pattern sets and traffic traces.", "paper_title": "Scalable Pattern Matching on Multicore Platform via Dynamic Differentiated Distributed Detection (D-4)", "paper_id": "WOS:000286475800004"}