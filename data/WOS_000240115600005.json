{"auto_keywords": [{"score": 0.049750469707859776, "phrase": "resource_capabilities"}, {"score": 0.04735418966497263, "phrase": "service_provider"}, {"score": 0.046273829908275756, "phrase": "client_requirements"}, {"score": 0.035366979368155665, "phrase": "resource_requirements"}, {"score": 0.030731841359398184, "phrase": "abstraction_layers"}, {"score": 0.00481495049065317, "phrase": "client_objectives"}, {"score": 0.004684587115637636, "phrase": "grids"}, {"score": 0.004510073211984104, "phrase": "service_level_objectives"}, {"score": 0.0043875257506180865, "phrase": "provider_assurances"}, {"score": 0.004327500975159818, "phrase": "application_perspective"}, {"score": 0.003956784357357341, "phrase": "necessary_resources"}, {"score": 0.003929613937944779, "phrase": "resource_providers"}, {"score": 0.0035804980565263024, "phrase": "service_management"}, {"score": 0.0035072146967082083, "phrase": "high-level_specification"}, {"score": 0.003483120583663528, "phrase": "client_performance_objectives"}, {"score": 0.003459191419478298, "phrase": "existing_resource_management_infrastructures"}, {"score": 0.0032176163279340206, "phrase": "raw_resources"}, {"score": 0.003173545808843704, "phrase": "heterogeneous_resources"}, {"score": 0.003151736708029235, "phrase": "abstract_resources"}, {"score": 0.00307657476125683, "phrase": "application_level"}, {"score": 0.002982557900944478, "phrase": "service-level_agreements"}, {"score": 0.0028321862184182913, "phrase": "client_requests"}, {"score": 0.0027456170444204895, "phrase": "multiple_lower-level_resource_managers"}, {"score": 0.002680114113899346, "phrase": "key_functions"}, {"score": 0.0026252106881752067, "phrase": "abstraction_layer"}, {"score": 0.0025981810951165836, "phrase": "service-level_manager"}, {"score": 0.0024501740852758505, "phrase": "wide_array"}, {"score": 0.0024333239726872604, "phrase": "management_scenarios"}, {"score": 0.0023834640793589435, "phrase": "uses_service_metadata"}, {"score": 0.0023670716500937667, "phrase": "service_performance_models"}, {"score": 0.002302619021497886, "phrase": "business_value"}, {"score": 0.0022476609946536345, "phrase": "competing_requests"}, {"score": 0.0021940118003312397, "phrase": "previously_negotiated_agreements"}, {"score": 0.0021049977753042253, "phrase": "architectural_principles"}], "paper_keywords": ["Grids", " distributed resource management", " service-oriented management", " service level agreements"], "paper_abstract": "In large-scale, distributed systems such as Grids, an agreement between a client and a service provider specifies service level objectives both as expressions of client requirements and as provider assurances. From an application perspective, these objectives should be expressed in a high-level, service or application-specific manner rather than requiring clients to detail the necessary resources. Resource providers' on the other hand, expect low-level, resource-specific performance criteria that are uniform across applications and can be easily interpreted and provisioned. This paper presents a framework for service management that addresses this gap between high-level specification of client performance objectives and existing resource management infrastructures. The paper identifies three levels of abstraction for resource requirements a service provider needs to manage, namely: detailed specification of raw resources, virtualization of heterogeneous resources as abstract resources, and performance objectives at an application level. The paper also identifies three key functions for managing service-level agreements, namely: translation of resource requirements across abstraction layers, arbitration in allocating resources to client requests, and aggregation and allocation of resources from multiple lower-level resource managers. One or more of these key functions may be present at each abstraction layer of a service-level manager. Thus, layering and the composition of these functions across abstraction layers enables modeling of a wide array of management scenarios. The framework we present uses service metadata and/or service performance models to map client requirements to resource capabilities, uses business value associated with objectives to arbitrate between competing requests, and allocates resources based on previously negotiated agreements. We instantiate this framework for three different scenarios and explain how the architectural principles we introduce are used in the real-word.", "paper_title": "A layered framework for connecting client objectives and resource capabilities", "paper_id": "WOS:000240115600005"}