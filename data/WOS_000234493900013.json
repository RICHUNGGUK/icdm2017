{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "comparative_trace_analysis"}, {"score": 0.004527371799277529, "phrase": "execution_traces"}, {"score": 0.004435363840720883, "phrase": "multiple_trace_instances"}, {"score": 0.004367581653370531, "phrase": "performance_features"}, {"score": 0.004191829338769843, "phrase": "execution_behavior"}, {"score": 0.004064653055162238, "phrase": "parallel_application"}, {"score": 0.0038413947966606118, "phrase": "traces_events"}, {"score": 0.003724810609448597, "phrase": "source_code"}, {"score": 0.0031116963435584982, "phrase": "achieved_performance"}, {"score": 0.0030640804704319255, "phrase": "application_centric_viewpoint"}, {"score": 0.002836679611901583, "phrase": "analytical_performance_models"}, {"score": 0.0027646829399573434, "phrase": "time-consuming_task"}, {"score": 0.0027363971333961967, "phrase": "large_complex_applications"}, {"score": 0.00263965046277432, "phrase": "human-effort_reduction"}, {"score": 0.002546315584783112, "phrase": "performance_specialist"}, {"score": 0.00250732953434891, "phrase": "critical_code_regions"}, {"score": 0.002443671484766342, "phrase": "performance_model_formulation_process"}, {"score": 0.002393907896783117, "phrase": "supporting_implementation_analyses"}, {"score": 0.002250601866422547, "phrase": "relative_performance_characteristics"}, {"score": 0.0022275639370573264, "phrase": "critical_regions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["performance modeling", " high performance systems", " dynamic trace analysis", " performance visualization"], "paper_abstract": "This work introduces a method for instrumenting applications. producing execution traces. and visualizing multiple trace instances to identify performance features. The approach provides information on the execution behavior of each process within a parallel application and allows differences across processes to be readily identified. Traces events are directly related to the source code and call-chain that produced them. This allows the identification of the causes of events to be easily obtained. The approach is particularly suited to aid in the Understanding of the achieved performance from an application centric viewpoint. In particular, it can be used to assist in the formation of analytical performance models which can be a time-consuming task for large complex applications. The approach is one of human-effort reduction: focus the interest of the performance specialist on performance critical code regions rather than automating the performance model formulation process completely. A supporting implementation analyses trace files front different runs of an application to determine the relative performance characteristics for critical regions of code and communication functions. (c) 2004 Elsevier B.V. All rights reserved.", "paper_title": "Performance feature identification by comparative trace analysis", "paper_id": "WOS:000234493900013"}