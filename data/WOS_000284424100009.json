{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "software_quality_modeling"}, {"score": 0.004761132425263795, "phrase": "multiple_repositories"}, {"score": 0.004681525814235883, "phrase": "novel_search-based_approach"}, {"score": 0.0045262653692203815, "phrase": "multiple_software_project_repositories"}, {"score": 0.004376131419366239, "phrase": "software_quality_model"}, {"score": 0.0041136473765874815, "phrase": "quality_trends"}, {"score": 0.004044822781630218, "phrase": "development_organization"}, {"score": 0.003932654396285872, "phrase": "additional_software_projects"}, {"score": 0.0038668462001710314, "phrase": "training_process"}, {"score": 0.00378080526397273, "phrase": "cross-project_perspective"}, {"score": 0.0035941231858949035, "phrase": "genetic-programming-based_approach"}, {"score": 0.00345530020388352, "phrase": "multiple_software_projects"}, {"score": 0.0034166271604770576, "phrase": "baseline_classifier"}, {"score": 0.003378385493203297, "phrase": "validation_classifier"}, {"score": 0.003087419032091453, "phrase": "better_generalization"}, {"score": 0.00293487292076612, "phrase": "case_study"}, {"score": 0.0029020077365708966, "phrase": "software_metrics"}, {"score": 0.0028214413724451442, "phrase": "seven_real-world_systems"}, {"score": 0.0027741761880779535, "phrase": "second_case_study"}, {"score": 0.0026820015810254004, "phrase": "multiple_software_data_sets"}, {"score": 0.0026370661343466354, "phrase": "case_studies"}, {"score": 0.0025928815987676535, "phrase": "similar_majority-voting_approach"}, {"score": 0.0025494354909453847, "phrase": "fault-proneness_class"}, {"score": 0.0024097920845706795, "phrase": "total_cost"}, {"score": 0.0023428586429492713, "phrase": "search-based_software_quality_models"}, {"score": 0.0022396019251440724, "phrase": "non-search-based_models"}, {"score": 0.0021773853011112882, "phrase": "clear_guidance"}], "paper_keywords": ["Genetic programming", " optimization", " software quality", " defects", " machine learning", " software measurement"], "paper_abstract": "A novel search-based approach to software quality modeling with multiple software project repositories is presented. Training a software quality model with only one software measurement and defect data set may not effectively encapsulate quality trends of the development organization. The inclusion of additional software projects during the training process can provide a cross-project perspective on software quality modeling and prediction. The genetic-programming-based approach includes three strategies for modeling with multiple software projects: Baseline Classifier, Validation Classifier, and Validation-and-Voting Classifier. The latter is shown to provide better generalization and more robust software quality models. This is based on a case study of software metrics and defect data from seven real-world systems. A second case study considers 17 different (nonevolutionary) machine learners for modeling with multiple software data sets. Both case studies use a similar majority-voting approach for predicting fault-proneness class of program modules. It is shown that the total cost of misclassification of the search-based software quality models is consistently lower than those of the non-search-based models. This study provides clear guidance to practitioners interested in exploiting their organization's software measurement data repositories for improved software quality modeling.", "paper_title": "Evolutionary Optimization of Software Quality Modeling with Multiple Repositories", "paper_id": "WOS:000284424100009"}