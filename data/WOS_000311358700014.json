{"auto_keywords": [{"score": 0.048843518180451934, "phrase": "maximum_operator"}, {"score": 0.01271208471078441, "phrase": "proposed_method"}, {"score": 0.00481495049065317, "phrase": "computing_criticality"}, {"score": 0.004764859786310636, "phrase": "refactored_timing_graphs"}, {"score": 0.004641890423057823, "phrase": "statistical_static_timing_analysis"}, {"score": 0.0045935921214521865, "phrase": "ssta"}, {"score": 0.004498490110526062, "phrase": "decent_approximation"}, {"score": 0.004451676867747938, "phrase": "timing_sign-off"}, {"score": 0.0043367547691560175, "phrase": "significant_error"}, {"score": 0.004291617358806677, "phrase": "ssta_applications"}, {"score": 0.0041589926969138585, "phrase": "timing_criticality_computation_method"}, {"score": 0.0040942189695983185, "phrase": "non-maximum_analytic_operators"}, {"score": 0.003946960862020283, "phrase": "ssta_run"}, {"score": 0.0036680857629458785, "phrase": "single_graph_traversal"}, {"score": 0.0035176353680157367, "phrase": "max_operator"}, {"score": 0.0034628156490003775, "phrase": "computation_process"}, {"score": 0.003234934827553253, "phrase": "computed_criticality"}, {"score": 0.0031348622158167195, "phrase": "joint_probability"}, {"score": 0.0030538300202383106, "phrase": "arrival_times"}, {"score": 0.0029131986574478072, "phrase": "ssta."}, {"score": 0.0027790254309734428, "phrase": "refactoring_technique"}, {"score": 0.0026649432435828842, "phrase": "common_path_pessimism"}, {"score": 0.002637160140011997, "phrase": "combinational_circuits"}, {"score": 0.002450602177683068, "phrase": "maximum-induced_error"}, {"score": 0.002362320344521919, "phrase": "existing_graph-based_algorithms"}, {"score": 0.0021049977753042253, "phrase": "conventional_cutset-based_method"}], "paper_keywords": ["Criticality", " process variation", " statistical timing analysis"], "paper_abstract": "The maximum operator in statistical static timing analysis (SSTA) is a decent approximation for timing sign-off, but often causes significant error in SSTA applications. This paper presents a timing criticality computation method based on non-maximum analytic operators in a parameterized SSTA. After an SSTA run, the proposed method computes the criticality for all edges and nodes in a single graph traversal. Although we do not employ the max operator in the computation process, the error in the maximum operator still degrades the accuracy of the computed criticality because the criticality is a joint probability of expressions, including arrival times, which are computed by the maximum operator during SSTA. To address this issue, we employ the refactoring technique, which was recently proposed to reduce common path pessimism in combinational circuits. This paper shows that refactoring is also very useful in reducing the maximum-induced error in arrival times, and how existing graph-based algorithms can be geared toward refactoring. Our experimental results show that the proposed method reduces the error of the criticality significantly compared to the conventional cutset-based method.", "paper_title": "On Computing Criticality in Refactored Timing Graphs", "paper_id": "WOS:000311358700014"}