{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "sc-systemj_programs"}, {"score": 0.004773040022691547, "phrase": "safety-critical_reactive_systems"}, {"score": 0.004690305164360866, "phrase": "today's_embedded_systems"}, {"score": 0.0044896599221451216, "phrase": "computer_programs"}, {"score": 0.004316396683332752, "phrase": "sensory_input"}, {"score": 0.004278807087784626, "phrase": "output_devices"}, {"score": 0.004007083686875716, "phrase": "embedded_systems"}, {"score": 0.003818807671883534, "phrase": "catastrophic_events"}, {"score": 0.0037198532511087566, "phrase": "mathematical_logic"}, {"score": 0.003687439449869248, "phrase": "formal_verification"}, {"score": 0.0035761913760242697, "phrase": "correct_behavior"}, {"score": 0.003529543381704363, "phrase": "control_algorithm"}, {"score": 0.003219553875143356, "phrase": "safey-critical_systemj."}, {"score": 0.0031360786664165093, "phrase": "safety-critical_subset"}, {"score": 0.0030951536886513567, "phrase": "systemj_language"}, {"score": 0.0030547611342112693, "phrase": "formal_big-step_transition_semantics"}, {"score": 0.0029110999689379497, "phrase": "propositional_linear_temporal_logic_formulas"}, {"score": 0.0028731024405707277, "phrase": "ltl_formulas"}, {"score": 0.0027741761880779535, "phrase": "mealy_automata"}, {"score": 0.0027140798043053986, "phrase": "efficient_compilation_algorithm"}, {"score": 0.0026786469998321062, "phrase": "resultant_mealy_automata"}, {"score": 0.0026436755508085223, "phrase": "straightforward_syntactic_translation"}, {"score": 0.0026206146061151917, "phrase": "promela_code"}, {"score": 0.0025863988422430797, "phrase": "resultant_promela_models"}, {"score": 0.0025192983141887285, "phrase": "correctness_properties"}, {"score": 0.0024864020775253767, "phrase": "spin_model-checker"}, {"score": 0.0024218895273910943, "phrase": "single_translation_procedure"}, {"score": 0.002369409343769858, "phrase": "promela"}, {"score": 0.0022678201262721323, "phrase": "de-bruijn_index"}, {"score": 0.0022480304016499605, "phrase": "i.e._this_final_translation_step"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["SystemJ", " SC-SystemJ", " Safety-critical", " Model-checking", " Verification", " Compilation"], "paper_abstract": "Most of today's embedded systems are very complex. These systems, controlled by computer programs, continuously interact with their physical environments through network of sensory input and output devices. Consequently, the operations of such embedded systems are highly reactive and concurrent. Since embedded systems are deployed in many safety-critical applications, where failures can lead to catastrophic events, an approach that combines mathematical logic and formal verification is employed in order to ensure correct behavior of the control algorithm. This paper presents What You Prove Is What You Execute (WYPIWYE) compilation strategy for a Globally Asynchronous Locally Synchronous (GALS) programming language called Safey-Critical SystemJ. SC-SysternJ is a safety-critical subset of the SystemJ language. A formal big-step transition semantics of SC-SystemJ is developed for compiling SC-SystemJ programs into propositional Linear Temporal Logic formulas. These LTL formulas are then converted into a network of Mealy automata using a novel and efficient compilation algorithm. The resultant Mealy automata have a straightforward syntactic translation into Promela code. The resultant Promela models can be used for verifying correctness properties via the SPIN model-checker. Finally there is a single translation procedure to compile both: Promela and C/Java code for execution, which satisfies the De-Bruijn index, i.e. this final translation step is simple enough that is can be manually verified. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Compiling and verifying SC-SystemJ programs for safety-critical reactive systems", "paper_id": "WOS:000366778600004"}