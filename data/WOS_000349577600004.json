{"auto_keywords": [{"score": 0.04905613790748982, "phrase": "big_data_processing"}, {"score": 0.009148365492153388, "phrase": "hibench"}, {"score": 0.00481495049065317, "phrase": "right_way"}, {"score": 0.00476323161560059, "phrase": "accelerate_big_data_processing"}, {"score": 0.004611369021812453, "phrase": "standout_part"}, {"score": 0.004561826854638056, "phrase": "data_center_computation"}, {"score": 0.004464326432401002, "phrase": "latest_research"}, {"score": 0.00436890075128947, "phrase": "big_data_workloads"}, {"score": 0.00427550604912774, "phrase": "full_use"}, {"score": 0.004229556887896042, "phrase": "modern_memory_systems"}, {"score": 0.004094639048362357, "phrase": "dramatic_inefficiency"}, {"score": 0.00394264312173188, "phrase": "enormous_amount"}, {"score": 0.003775803846431323, "phrase": "depended_memory_accesses"}, {"score": 0.0034817084307034955, "phrase": "first_one"}, {"score": 0.00342568771304873, "phrase": "slice-and-merge_strategy"}, {"score": 0.003245359940011418, "phrase": "sort_procedure"}, {"score": 0.003193129886123359, "phrase": "second_optimization"}, {"score": 0.003074495313651187, "phrase": "data_structure"}, {"score": 0.0024896081630179194, "phrase": "additional_results"}, {"score": 0.002246292543825748, "phrase": "memory_efficiency"}, {"score": 0.002127915423138391, "phrase": "intel_distribution"}, {"score": 0.0021049977753042253, "phrase": "apache_hadoop"}], "paper_keywords": ["big data", " key/value pair", " architecture awareness", " performance measurement"], "paper_abstract": "Big data processing is becoming a standout part of data center computation. However, latest research has indicated that big data workloads cannot make full use of modern memory systems. We find that the dramatic inefficiency of the big data processing is from the enormous amount of cache misses and stalls of the depended memory accesses. In this paper, we introduce two optimizations to tackle these problems. The first one is the slice-and-merge strategy, which reduces the cache miss rate of the sort procedure. The second optimization is direct-memory-access, which reforms the data structure used in key/value storage. These optimizations are evaluated with both micro-benchmarks and the real-world benchmark HiBench. The results of our micro-benchmarks clearly demonstrate the effectiveness of our optimizations in terms of hardware event counts; and the additional results of HiBench show the 1.21X average speedup on the application-level. Both results illustrate that careful hardware/software co-design will improve the memory efficiency of big data processing. Our work has already been integrated into Intel distribution for Apache Hadoop.", "paper_title": "Using Memory in the Right Way to Accelerate Big Data Processing", "paper_id": "WOS:000349577600004"}