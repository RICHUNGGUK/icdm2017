{"auto_keywords": [{"score": 0.05007204264971889, "phrase": "tree-structure_expectation_propagation"}, {"score": 0.04915532710978688, "phrase": "bec."}, {"score": 0.04413784730249484, "phrase": "bp"}, {"score": 0.04004959870293475, "phrase": "additional_constraints"}, {"score": 0.031606461498112165, "phrase": "tep"}, {"score": 0.004777744121315302, "phrase": "ldpc_decoding"}, {"score": 0.004490212943845175, "phrase": "low-density_parity-check"}, {"score": 0.004386887374401584, "phrase": "discrete_memoryless_channels"}, {"score": 0.004252793268613575, "phrase": "belief_propagation"}, {"score": 0.004012271808564447, "phrase": "exponential_family_distribution"}, {"score": 0.003770633265791941, "phrase": "marginal_distributions"}, {"score": 0.003698136685049485, "phrase": "second_property"}, {"score": 0.0036411406244705557, "phrase": "marginal_constraints"}, {"score": 0.0035297609635321203, "phrase": "check_node"}, {"score": 0.003488874535154583, "phrase": "ldpc_code's_tanner_graph"}, {"score": 0.0031783406309828194, "phrase": "bp."}, {"score": 0.0031171827624599693, "phrase": "tree-ep_algorithm"}, {"score": 0.0030810605918297584, "phrase": "binary_erasure_channel"}, {"score": 0.003057969052411212, "phrase": "bec"}, {"score": 0.003010063382882408, "phrase": "peeling-type_algorithm"}, {"score": 0.0027958237350835607, "phrase": "higher_fraction"}, {"score": 0.002720785798036066, "phrase": "tep_decoding_process"}, {"score": 0.002668420182908979, "phrase": "differential_equations"}, {"score": 0.0026272523687965615, "phrase": "expected_residual_graph_evolution"}, {"score": 0.002566685388128598, "phrase": "code_parameters"}, {"score": 0.0024496978447849835, "phrase": "tep_decoder_performance"}, {"score": 0.0024025371556472557, "phrase": "finite-length_regimes"}, {"score": 0.0023471384232499016, "phrase": "asymptotic_threshold"}, {"score": 0.002319918823705175, "phrase": "tep_decoder"}, {"score": 0.0022664208122072657, "phrase": "bp_decoder"}, {"score": 0.002248863090203165, "phrase": "regular_and_optimized_codes"}, {"score": 0.002205560249972527, "phrase": "scaling_law"}, {"score": 0.002188472974132732, "phrase": "finite-length_ldpc_codes"}, {"score": 0.002129701089817251, "phrase": "improved_performance"}], "paper_keywords": ["Belief-propagation (BP)", " binary erasure channel", " expectation propagation", " finite-length analysis", " LDPC codes", " random graph evolution"], "paper_abstract": "We present the tree-structure expectation propagation (Tree-EP) algorithm to decode low-density parity-check (LDPC) codes over discrete memoryless channels (DMCs). Expectation propagation generalizes belief propagation (BP) in two ways. First, it can be used with any exponential family distribution over the cliques in the graph. Second, it can impose additional constraints on the marginal distributions. We use this second property to impose pairwise marginal constraints over pairs of variables connected to a check node of the LDPC code's Tanner graph. Thanks to these additional constraints, the Tree-EP marginal estimates for each variable in the graph are more accurate than those provided by BP. We also reformulate the Tree-EP algorithm for the binary erasure channel (BEC) as a peeling-type algorithm (TEP) and we show that the algorithm has the same computational complexity as BP and it decodes a higher fraction of errors. We describe the TEP decoding process by a set of differential equations that represents the expected residual graph evolution as a function of the code parameters. The solution of these equations is used to predict the TEP decoder performance in both the asymptotic regime and the finite-length regimes over the BEC. While the asymptotic threshold of the TEP decoder is the same as the BP decoder for regular and optimized codes, we propose a scaling law for finite-length LDPC codes, which accurately approximates the TEP improved performance and facilitates its optimization.", "paper_title": "Tree-Structure Expectation Propagation for LDPC Decoding Over the BEC", "paper_id": "WOS:000320709800009"}