{"auto_keywords": [{"score": 0.03371796317805148, "phrase": "successful_verifications"}, {"score": 0.00481495049065317, "phrase": "specialization-based_verification."}, {"score": 0.00456571874088313, "phrase": "constraint-based_analysis"}, {"score": 0.004521803560561489, "phrase": "infinite_state_reactive_systems"}, {"score": 0.004413846562278824, "phrase": "safety_properties"}, {"score": 0.004308455856718928, "phrase": "constraint_logic_programs"}, {"score": 0.004165105357908494, "phrase": "reachability_algorithms"}, {"score": 0.00376293585033711, "phrase": "initial_states"}, {"score": 0.0036553070575015344, "phrase": "backward_reachability"}, {"score": 0.0035336109352157763, "phrase": "unsafe_states"}, {"score": 0.0034325187732054093, "phrase": "forward_reachability"}, {"score": 0.003334309053314909, "phrase": "specialized_reachability_programs"}, {"score": 0.003146212656743413, "phrase": "important_feature"}, {"score": 0.003115908199991072, "phrase": "specialization_algorithms"}, {"score": 0.002954361295811154, "phrase": "specialized_variants"}, {"score": 0.002630299922281955, "phrase": "specialized_program"}, {"score": 0.002469830206270585, "phrase": "specialization_framework"}, {"score": 0.0023990982005125763, "phrase": "previous_proposals"}, {"score": 0.0021987994275190314, "phrase": "careful_choice"}, {"score": 0.0021049977753042253, "phrase": "specialization-based_verification_procedures"}], "paper_keywords": ["Program specialization", " constraint logic programming", " polyvariance", " generalization", " verification of infinite state reactive systems", " unfold/fold transformation"], "paper_abstract": "Program specialization has been proposed as a means of improving constraint-based analysis of infinite state reactive systems. In particular, safety properties can be specified by constraint logic programs encoding (backward or forward) reachability algorithms. These programs are then transformed, before their use for checking safety, by specializing them with respect to the initial states (in the case of backward reachability) or with respect to the unsafe states (in the case of forward reachability). By using the specialized reachability programs, we can considerably increase the number of successful verifications. An important feature of specialization algorithms is the so called polyvariance, that is, the number of specialized variants of the same predicate that are introduced by specialization. Depending on this feature, the specialization time, the size of the specialized program, and the number of successful verifications may vary. We present a specialization framework which is more general than previous proposals and provides control on polyvariance. We demonstrate, through experiments on several infinite state reactive systems, that by a careful choice of the degree of polyvariance we can design specialization-based verification procedures that are both efficient and precise.", "paper_title": "Controlling Polyvariance for Specialization-based Verification", "paper_id": "WOS:000320502200008"}