{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "service_modeling"}, {"score": 0.004739056045644449, "phrase": "service-oriented_computing"}, {"score": 0.0044826811976193485, "phrase": "loosely-coupled_services"}, {"score": 0.004325208730208653, "phrase": "service-oriented_software_applications"}, {"score": 0.004123781267600542, "phrase": "pragmatic_software_engineering_approach"}, {"score": 0.00396308097989371, "phrase": "modeling_and_prototyping_service-oriented_applications"}, {"score": 0.00385431710959668, "phrase": "precise_and_executable_language"}, {"score": 0.003823791479971016, "phrase": "sca-asm"}, {"score": 0.0037784540167266497, "phrase": "model-based_design"}, {"score": 0.003674738405118697, "phrase": "early_and_quick_design_evaluation"}, {"score": 0.0034208822062692127, "phrase": "heterogeneous_service-oriented_components"}, {"score": 0.0033803056981691866, "phrase": "technology_agnostic_way"}, {"score": 0.0032744972717667063, "phrase": "asm"}, {"score": 0.003248483521309273, "phrase": "formal_method"}, {"score": 0.0031718628581265266, "phrase": "service_behavior"}, {"score": 0.003036040409062437, "phrase": "abstract_but_executable_way"}, {"score": 0.00295264307195965, "phrase": "existing_execution_environments"}, {"score": 0.0029292375702719494, "phrase": "asm_models"}, {"score": 0.0029060170624404242, "phrase": "sca_applications"}, {"score": 0.0028715299874549245, "phrase": "sca-asm_model"}, {"score": 0.002837451022172113, "phrase": "service-oriented_component"}, {"score": 0.002429451930463481, "phrase": "abstract_implementation"}, {"score": 0.0023069016803337365, "phrase": "chosen_sca_assembly"}, {"score": 0.0022345720876241044, "phrase": "case_study"}, {"score": 0.002208035721125305, "phrase": "eu_research_projects"}, {"score": 0.0021049977753042253, "phrase": "proposed_framework"}], "paper_keywords": ["Service formal modeling", " Service model prototyping", " Service Component Architecture", " Abstract State Machines"], "paper_abstract": "Service-oriented Computing is rapidly gaining importance across several application domains due to its capability of composing autonomous and loosely-coupled services. In order to support the engineering of service-oriented software applications, foundational theories, service modeling notations, evaluation techniques fully integrated in a pragmatic software engineering approach are required. This article introduces a framework for modeling and prototyping service-oriented applications. The framework consists of a precise and executable language, SCA-ASM, for model-based design, and of a tool for early and quick design evaluation of service assemblies. The language combines the OASIS/OSOA standard Service Component Architecture (SCA) capability of modeling and assembling heterogeneous service-oriented components in a technology agnostic way, with the rigor of the Abstract State Machine (ASM) formal method able to model notions of service behavior, interactions, orchestration, compensation and context-awareness in an abstract but executable way. The tool is based on existing execution environments for ASM models and SCA applications. An SCA-ASM model of a service-oriented component, possibly not yet implemented in code or available as off-the-shelf, can be (i) simulated and evaluated offline, i.e. in isolation from the other components; or (ii) executed as abstract implementation (or prototype) together with the other components implementations according to the chosen SCA assembly. As proof of concept, a case study taken from EU research projects has been considered to show the functionalities and potentialities of the proposed framework.", "paper_title": "A formal framework for service modeling and prototyping", "paper_id": "WOS:000343878400001"}