{"auto_keywords": [{"score": 0.04394516098812627, "phrase": "query_complexity"}, {"score": 0.00481495049065317, "phrase": "improved_direct_product_theorems"}, {"score": 0.004778594263962987, "phrase": "randomized_query_complexity."}, {"score": 0.004742511243894382, "phrase": "\"direct_product_problem"}, {"score": 0.004671156704912419, "phrase": "fundamental_question"}, {"score": 0.004635881163634672, "phrase": "complexity_theory"}, {"score": 0.004379631619412168, "phrase": "k_independent_inputs_scales"}, {"score": 0.0041374874583908535, "phrase": "t-query_algorithm"}, {"score": 0.003983512316698646, "phrase": "boolean_function"}, {"score": 0.00393844255111604, "phrase": "input_distribution_mu"}, {"score": 0.0037918465913284478, "phrase": "alpha_epsilon_tk-query_algorithm"}, {"score": 0.0036093693971289754, "phrase": "k-fold_direct_product"}, {"score": 0.0035147642199945387, "phrase": "k_independent_inputs"}, {"score": 0.0033838857659984137, "phrase": "shaltiel"}, {"score": 0.00330770035909988, "phrase": "essentially_optimal_trade-off"}, {"score": 0.0032209766681045365, "phrase": "error_probability"}, {"score": 0.002929344511491418, "phrase": "best_previous_statement"}, {"score": 0.0028525179566412763, "phrase": "klauck"}, {"score": 0.0028309335184326877, "phrase": "spalek"}, {"score": 0.0027883561635349955, "phrase": "wolf"}, {"score": 0.0024227171881502636, "phrase": "new_xor_lemma"}, {"score": 0.002368120987066921, "phrase": "query_model"}, {"score": 0.002279841453843241, "phrase": "learning_tasks"}, {"score": 0.0021948455916770233, "phrase": "dynamic_entities"}, {"score": 0.0021049977753042253, "phrase": "decision_tree_size"}], "paper_keywords": ["Direct product theorems", " query complexity", " decision trees", " average-case complexity", " hardness amplification"], "paper_abstract": "The \"direct product problem\" is a fundamental question in complexity theory which seeks to understand how the difficulty in computing a function on each of k independent inputs scales with k. We prove the following direct product theorem (DPT) for query complexity: if every T-query algorithm has success probability at most 1-epsilon in computing the Boolean function f on input distribution mu, then for alpha <= 1, every alpha epsilon Tk-query algorithm has success probability at most (2(alpha epsilon)(1-epsilon))(k) in computing the k-fold direct product f(circle times k) correctly on k independent inputs from mu. In light of examples due to Shaltiel, this statement gives an essentially optimal trade-off between the query bound and the error probability. Using this DPT, we show that for an absolute constant alpha > 0, the worst-case success probability of any alpha R-2(f) k-query randomized algorithm for f(circle dot k) falls exponentially with k. The best previous statement of this type, due to Klauck, Spalek, and de Wolf, required a query bound of O(bs(f)k). Our proof technique involves defining and analyzing a collection of martingales associated with an algorithm attempting to solve f(circle times k). Our method is quite general and yields a new XOR lemma and threshold DPT for the query model, as well as DPTs for the query complexity of learning tasks, search problems, and tasks involving interaction with dynamic entities. We also give a version of our DPT in which decision tree size is the resource of interest.", "paper_title": "IMPROVED DIRECT PRODUCT THEOREMS FOR RANDOMIZED QUERY COMPLEXITY", "paper_id": "WOS:000305119200002"}