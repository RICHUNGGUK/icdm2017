{"auto_keywords": [{"score": 0.04519059733692808, "phrase": "critical_nodes"}, {"score": 0.039514369178306315, "phrase": "dataflow_analysis"}, {"score": 0.0312702430794085, "phrase": "cbi"}, {"score": 0.0045879792359519375, "phrase": "path_optimization_problem"}, {"score": 0.004395185177346749, "phrase": "program_nodes"}, {"score": 0.004210458358142504, "phrase": "shortest_path"}, {"score": 0.004143196873246147, "phrase": "program's_control"}, {"score": 0.004011867299107537, "phrase": "maximum_number"}, {"score": 0.0038846843242954935, "phrase": "flow_graphs"}, {"score": 0.0038431888954930083, "phrase": "-approximate_real_program_behavior"}, {"score": 0.003701401653850141, "phrase": "control_flow_graph"}, {"score": 0.0035648266669315943, "phrase": "program's_actual_behavior"}, {"score": 0.0033243718810317254, "phrase": "efficient_algorithm"}, {"score": 0.0032189132350239013, "phrase": "weighted_pushdown_systems"}, {"score": 0.002985631781749091, "phrase": "cooperative_bug_isolation_project"}, {"score": 0.0027991418754844347, "phrase": "instrumentation_feedback_data"}, {"score": 0.0027543636132088332, "phrase": "suspect_program_behaviors"}, {"score": 0.0025962029048520324, "phrase": "program_failure"}, {"score": 0.0024868972942701582, "phrase": "bug_predictors"}, {"score": 0.002407941567598653, "phrase": "shortest_program_path"}, {"score": 0.0021507795710951384, "phrase": "early_experience"}], "paper_keywords": [""], "paper_abstract": "We present and solve a path optimization problem on programs. Given a set of program nodes, called critical nodes, we find a shortest path through the program's control flow graph that touches the maximum number of these nodes. Control flow graphs over-approximate real program behavior; by adding dataflow analysis to the control flow graph, we narrow down on the program's actual behavior and discard paths deemed infeasible by the dataflow analysis. We derive an efficient algorithm for path optimization based on weighted pushdown systems. We present an application for path optimization by integrating it with the Cooperative Bug Isolation Project (CBI), a dynamic debugging system. CBI mines instrumentation feedback data to find suspect program behaviors, called bug predictors, that are strongly associated with program failure. Instantiating critical nodes as the nodes containing bug predictors, we solve for a shortest program path that touches these predictors. This path can be used by a programmer to debug his software. We present some early experience on using this hybrid static/dynamic system for debugging.", "paper_title": "Path optimization in programs and its application to debugging", "paper_id": "WOS:000236905200017"}