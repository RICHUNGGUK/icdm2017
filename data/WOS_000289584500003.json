{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multiple_inheritance"}, {"score": 0.004774971657407204, "phrase": "inheritance"}, {"score": 0.004735254735115024, "phrase": "object-oriented_programming"}, {"score": 0.004283913685201902, "phrase": "multiple_inheritance_yields_ambiguities"}, {"score": 0.00421297029755273, "phrase": "long-standing_debates"}, {"score": 0.003505749731180509, "phrase": "clear_separation"}, {"score": 0.00347657813672945, "phrase": "syntactic_and_semantic_conflicts"}, {"score": 0.003265365666305185, "phrase": "common_syntactic_construct"}, {"score": 0.0031448288291084, "phrase": "semantic_conflicts"}, {"score": 0.0031056437850836326, "phrase": "programmer's_decision"}, {"score": 0.0030541531847589807, "phrase": "programming_language"}, {"score": 0.0026164433143193015, "phrase": "full_advantage"}, {"score": 0.002509284173541882, "phrase": "static_typing"}, {"score": 0.0024065032567542107, "phrase": "virtual_types"}, {"score": 0.0022696277881969896, "phrase": "metamodel_results"}, {"score": 0.0021766418372878835, "phrase": "open-world_assumption"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Object-oriented programming", " Multiple inheritance", " Metamodeling", " Redefinition", " Linearization", " Open-world assumption", " Static typing", " Virtual types"], "paper_abstract": "Inheritance provides object-oriented programming with much of its great reusability power. When inheritance is single, its specifications are simple and everybody roughly agrees on them. In contrast, multiple inheritance yields ambiguities that have prompted long-standing debates, and no two languages agree on its specifications. In this paper, we present a semantics of multiple inheritance based on metamodeling. A metamodel is proposed which distinguishes the \"identity\" of properties from their \"values\" or \"implementations\". It yields a clear separation between syntactic and semantic conflicts. The former can be solved in any language at the expense of a common syntactic construct, namely full name qualification. However, semantic conflicts require a programmer's decision, and the programming language must help the programmer to some extent. This paper surveys the approach based on linearizations, which has been studied in depth, and proposes some extensions. As it turns out that only static typing takes full advantage of the metamodel, the interaction between multiple inheritance and static typing is also considered, especially in the context of virtual types. The solutions proposed by the various languages with multiple inheritance are compared with the metamodel results. Throughout the paper, difficulties encountered under the open-world assumption are stressed. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Metamodeling semantics of multiple inheritance", "paper_id": "WOS:000289584500003"}