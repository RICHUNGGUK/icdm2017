{"auto_keywords": [{"score": 0.036962449923098536, "phrase": "precedence_constraints"}, {"score": 0.00481495049065317, "phrase": "divisible_mapreduce_computations"}, {"score": 0.00442243013500217, "phrase": "mapreduce"}, {"score": 0.004161553532799662, "phrase": "divisible_load_scheduling_problem"}, {"score": 0.003384262486955773, "phrase": "divisible_load_model"}, {"score": 0.0029965060407413898, "phrase": "performance_limits"}, {"score": 0.0029244418026475832, "phrase": "mapreduce_computations"}, {"score": 0.0026209522797963447, "phrase": "first_time"}, {"score": 0.0025578967205807843, "phrase": "processing_applications"}, {"score": 0.002264607102799332, "phrase": "divisible_load_theory"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Parallel processing", " MapReduce", " Scheduling", " Divisible loads", " Performance evaluation"], "paper_abstract": "In this paper we analyze MapReduce distributed computations as a divisible load scheduling problem. The two operations of mapping and reducing can be understood as two divisible applications with precedence constraints. A divisible load model of the computation, and two load partitioning algorithms are proposed. Performance limits of MapReduce computations are investigated. To our best knowledge this is the first time that processing applications with precedence constraints have been considered on the grounds of divisible load theory. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "Scheduling divisible MapReduce computations", "paper_id": "WOS:000286701700010"}