{"auto_keywords": [{"score": 0.025672830915363046, "phrase": "function_blocks"}, {"score": 0.00481495049065317, "phrase": "multitask_implementations_of_simulink_models_with_minimum"}, {"score": 0.004740009255053372, "phrase": "model-based_design"}, {"score": 0.004690694501758065, "phrase": "embedded_control_systems"}, {"score": 0.004545793387330536, "phrase": "best_practices"}, {"score": 0.004498490110526062, "phrase": "software_development"}, {"score": 0.004428452434981208, "phrase": "automotive_and_aeronautic_industry"}, {"score": 0.004051595625804513, "phrase": "implementation_code"}, {"score": 0.003926359151817743, "phrase": "major_productivity_enhancement"}, {"score": 0.003610929883213109, "phrase": "code_generator"}, {"score": 0.0034088473318056537, "phrase": "code_generation_technology"}, {"score": 0.003303412571939192, "phrase": "novel_algorithm"}, {"score": 0.003234934827553253, "phrase": "multitask_implementation"}, {"score": 0.0032012284065895537, "phrase": "simulink_models"}, {"score": 0.0031678720736808574, "phrase": "single-processor_platforms"}, {"score": 0.0030538300202383106, "phrase": "existing_code_generation_tools"}, {"score": 0.002974886152979993, "phrase": "zero-order_hold"}, {"score": 0.0026649432435828842, "phrase": "rate_transition"}, {"score": 0.0025960262223338293, "phrase": "communication_flow"}, {"score": 0.0025288869172313674, "phrase": "novel_efficient_encoding"}, {"score": 0.0024894376091589244, "phrase": "scheduling_feasibility_region"}, {"score": 0.0024377918036784336, "phrase": "task_implementation"}, {"score": 0.002387214876538434, "phrase": "minimum_additional_functional_delays"}, {"score": 0.0022299587520401747, "phrase": "automotive_case_study"}, {"score": 0.0021049977753042253, "phrase": "complex_systems"}], "paper_keywords": ["Code generation", " mixed-integer linear programming (MILP)", " real-time programming", " Simulink", " schedulability", " software models"], "paper_abstract": "Model-based design of embedded control systems using Synchronous Reactive (SR) models is among the best practices for software development in the automotive and aeronautic industry. SR models allow to formally verify the correctness of the design and automatically generate the implementation code. This feature is a major productivity enhancement and, more importantly, can ensure correct-by-design software provided that the code generator is provably correct. This paper presents an improvement of code generation technology for SR obtained via a novel algorithm for optimizing the multitask implementation of Simulink models on single-processor platforms with limited availability of memory. Existing code generation tools require the addition of zero-order hold (ZOH) blocks, and therefore additional memory, and possibly also additional functional delays whenever there is a rate transition in the computation and communication flow. Our algorithm leverages a novel efficient encoding of the scheduling feasibility region to find the task implementation of function blocks with minimum additional functional delays within timing and memory constraints. The algorithm is applied to an automotive case study with tens of function blocks and very high utilization to test its applicability to complex systems.", "paper_title": "Synthesis of Multitask Implementations of Simulink Models With Minimum Delays", "paper_id": "WOS:000283984900015"}