{"auto_keywords": [{"score": 0.040524906883899176, "phrase": "sigma"}, {"score": 0.014862599688714572, "phrase": "amir_et_al"}, {"score": 0.010191252859820837, "phrase": "ids_pip"}, {"score": 0.00481495049065317, "phrase": "property_matching"}, {"score": 0.00461575768501871, "phrase": "property_matching_problem"}, {"score": 0.004466519142879166, "phrase": "weighted_matching"}, {"score": 0.00442478520782804, "phrase": "cpm"}, {"score": 0.004301834610818624, "phrase": "better_indexing_scheme"}, {"score": 0.004009175817816061, "phrase": "namely_pst"}, {"score": 0.0033422097808611198, "phrase": "k"}, {"score": 0.003291051334991867, "phrase": "output_size"}, {"score": 0.0031845067058084583, "phrase": "construction_time"}, {"score": 0.0030239842475439814, "phrase": "suffix_tree_construction_time"}, {"score": 0.0028715299874549245, "phrase": "natural_numbers"}, {"score": 0.0025171669791790438, "phrase": "query_time"}, {"score": 0.0022696277881969896, "phrase": "suffix_array"}, {"score": 0.0021652891317252994, "phrase": "normal_pattern_matching_queries"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["algorithms", " combinatorial problems", " data structures", " pattern matching"], "paper_abstract": "In this paper, we revisit the Property Matching problem studied by Amir et al. [Property Matching and Weighted Matching, CPM 2006] and present a better indexing scheme for the problem. In particular, the data structure by Amir et al., namely PST, requires O(nlog vertical bar Sigma vertical bar + nloglogn) construction time and O(mlog vertical bar Sigma vertical bar + K) query time, where n and m are the length of, respectively, the text and the pattern, Sigma is the alphabet and K is the output size. On the other hand, the construction time of our data structure, namely IDS_PIP, is dominated by the suffix tree construction time and hence is 0(n) time for alphabets that are natural numbers from 1 to a polynomial in n and O(nlog sigma) time otherwise, where sigma = min(n, vertical bar Sigma vertical bar). The query time is same as that of PST Also, IDS_PIP has the advantage that it can be built on either a suffix tree or a suffix array and additionally, it retains the capability of answering normal pattern matching queries. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "Faster index for property matching", "paper_id": "WOS:000253743000002"}