{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "speculative_parallelization_architecture"}, {"score": 0.004772137871562584, "phrase": "computer_clusters"}, {"score": 0.004543352284098364, "phrase": "conditional_branches"}, {"score": 0.004502943680955863, "phrase": "parallel_programs"}, {"score": 0.004344855841195913, "phrase": "control_structures"}, {"score": 0.004211069233133584, "phrase": "control_dependencies"}, {"score": 0.004027031316965272, "phrase": "high_degree"}, {"score": 0.003902992784453769, "phrase": "idle_cpus"}, {"score": 0.0038510053729959074, "phrase": "main_challenge"}, {"score": 0.0036826452656927877, "phrase": "control_statements"}, {"score": 0.0036173729405604674, "phrase": "control_statement"}, {"score": 0.003459191419478298, "phrase": "new_conditional_block"}, {"score": 0.0033376244286643176, "phrase": "new_code_split"}, {"score": 0.003293142761521425, "phrase": "previous_one"}, {"score": 0.003149094460617212, "phrase": "speculation_management"}, {"score": 0.0030932495918679285, "phrase": "reduced_profits"}, {"score": 0.002905454531687249, "phrase": "single_machine_architecture"}, {"score": 0.0028667159745494933, "phrase": "main_contribution"}, {"score": 0.002716844480081738, "phrase": "single_processor_systems"}, {"score": 0.0025404470150468387, "phrase": "branch_speculation"}, {"score": 0.0024842242921857705, "phrase": "statistical_information"}, {"score": 0.0023437863565921053, "phrase": "time_unit"}, {"score": 0.002251227801482381, "phrase": "parallelized_programs"}, {"score": 0.0022311596751824416, "phrase": "iterative_structures"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["speculation", " multipath execution", " branch speculation", " computer clusters", " control dependencies"], "paper_abstract": "This article describes a technique for path unfolding for conditional branches in parallel programs executed on clusters. Unfolding paths following control structures makes it possible to break the control dependencies existing in the code and consequently to obtain a high degree of parallelism through the use of idle CPUs. The main challenge of this technique is to deal with sequences of control statements. When a control statement appears in a path after a branch, a new conditional block needs to be opened, creating a new code split before the previous one is resolved. Such subsequent code splits increase the cost of speculation management, resulting in reduced profits. Several decision techniques have been developed for improving code splitting and speculation efficiency in single machine architecture. The main contribution of this paper is to apply such techniques to a cluster of single processor systems and evaluate them in such an environment. Our results demonstrate that code splitting in conjunction with branch speculation and the use of statistical information improves the performance measured by the number of processes executed in a time unit. This improvement is particularly significant when the parallelized programs contain iterative structures in which conditions are repeatedly executed. Copyright (c) 2012 John Wiley & Sons, Ltd.", "paper_title": "Dynamic branch speculation in a speculative parallelization architecture for computer clusters", "paper_id": "WOS:000317983600003"}