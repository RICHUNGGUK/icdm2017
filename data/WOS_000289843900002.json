{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "logic_transformations"}, {"score": 0.004748556604045108, "phrase": "approximate_spfds"}, {"score": 0.004161553532799662, "phrase": "different_goals"}, {"score": 0.0040194764936614565, "phrase": "engineering_effort"}, {"score": 0.003855347387268162, "phrase": "small_logic_structural_transformations"}, {"score": 0.003749654338704576, "phrase": "logic_restructuring_goals"}, {"score": 0.0035965032173588753, "phrase": "systematic_methodology"}, {"score": 0.0033549790559972053, "phrase": "simulation-based_formulation"}, {"score": 0.0029602552900111407, "phrase": "original_representation"}, {"score": 0.0028195727965553367, "phrase": "new_data_structure"}, {"score": 0.002742196991950893, "phrase": "required_transformations"}, {"score": 0.0026118503041971976, "phrase": "static_dictionary_model"}, {"score": 0.002336655334451464, "phrase": "single_or_multiple_locations"}, {"score": 0.002288373472756928, "phrase": "extensive_suite"}, {"score": 0.002164432930854161, "phrase": "proposed_methodology"}, {"score": 0.0021049977753042253, "phrase": "existing_practices"}], "paper_keywords": ["Correction", " debug", " engineering change", " logic restructuring", " logic rewire", " optimization", " SPFD", " very large scale integration"], "paper_abstract": "During the very large scale integration design process, a synthesized design is often required to be modified in order to accommodate different goals. To preserve the engineering effort already invested, designers seek small logic structural transformations to achieve these logic restructuring goals. This paper proposes a systematic methodology to devise such transformations automatically. It first presents a simulation-based formulation to approximate sets of pairs of functions to be distinguished and avoid the memory/time explosion issue inherent with the original representation. Then, it uses this new data structure to devise the required transformations dynamically without the need of a static dictionary model. The methodology is applied to both combinational and sequential designs with transformations at a single or multiple locations. An extensive suite of experiments documents the benefits of the proposed methodology when compared to existing practices.", "paper_title": "Automating Logic Transformations with Approximate SPFDs", "paper_id": "WOS:000289843900002"}