{"auto_keywords": [{"score": 0.04780597585803098, "phrase": "data_objects"}, {"score": 0.00481495049065317, "phrase": "data_placement_problems."}, {"score": 0.00478163886605204, "phrase": "approximation_algorithms"}, {"score": 0.004715702140552199, "phrase": "replicated_data"}, {"score": 0.004693924951970513, "phrase": "arbitrary_networks"}, {"score": 0.0044608829094248985, "phrase": "average_data-access_cost"}, {"score": 0.00440954624970882, "phrase": "data_placement_problem"}, {"score": 0.004298666679374568, "phrase": "caches_f"}, {"score": 0.00367228341822469, "phrase": "storage_cost"}, {"score": 0.0036132074655130645, "phrase": "client_j"}, {"score": 0.003563325213395068, "phrase": "access_cost"}, {"score": 0.003409847422154273, "phrase": "capacity_constraints"}, {"score": 0.003300990660546904, "phrase": "total_storage"}, {"score": 0.003285725064532174, "phrase": "client_access_costs"}, {"score": 0.003166106549073344, "phrase": "optimal_solution"}, {"score": 0.0031441662022318596, "phrase": "natural_linear-programming_relaxation"}, {"score": 0.003086396772496527, "phrase": "main_technical_challenges"}, {"score": 0.0030296855451322595, "phrase": "cache_capacities"}, {"score": 0.002939737235379635, "phrase": "connected_data_placement_problem"}, {"score": 0.002685558057339722, "phrase": "steiner_tree"}, {"score": 0.002617914778251662, "phrase": "multicast_message"}, {"score": 0.0025342755680516117, "phrase": "total_cost"}, {"score": 0.002493460909421203, "phrase": "steiner_trees"}, {"score": 0.0021594166859699223, "phrase": "total_length"}], "paper_keywords": ["approximation algorithms", " data placement", " facility location", " linear programming"], "paper_abstract": "We develop approximation algorithms for the problem of placing replicated data in arbitrary networks, where the nodes may both issue requests for data objects and have capacity for storing data objects so as to minimize the average data-access cost. We introduce the data placement problem to model this problem. We have a set of caches F, a set of clients D, and a set of data objects O. Each cache i can store at most u(i) data objects. Each client j is an element of D has demand d(j) for a specific data object o(j) is an element of O and has to be assigned to a cache that stores that object. Storing an object o in cache i incurs a storage cost of f(i)(o), and assigning client j to cache i incurs an access cost of d(j)c(ij). The goal is to find a placement of the data objects to caches respecting the capacity constraints, and an assignment of clients to caches so as to minimize the total storage and client access costs. We present a 10-approximation algorithm for this problem. Our algorithm is based on rounding an optimal solution to a natural linear-programming relaxation of the problem. One of the main technical challenges encountered during rounding is to preserve the cache capacities while incurring only a constant-factor increase in the solution cost. We also introduce the connected data placement problem to capture settings where write-requests are also issued for data objects, so that one requires a mechanism to maintain consistency of data. We model this by requiring that all caches containing a given object be connected by a Steiner tree to a root for that object, which issues a multicast message upon a write to (any copy of) that object. The total cost now includes the cost of these Steiner trees. We devise a 14-approximation algorithm for this problem. We show that our algorithms can be adapted to handle two variants of the problem: (a) a k-median variant, where there is a specified bound on the number of caches that may contain a given object, and (b) a generalization where objects have lengths and the total length of the objects stored in any cache must not exceed its capacity.", "paper_title": "APPROXIMATION ALGORITHMS FOR DATA PLACEMENT PROBLEMS", "paper_id": "WOS:000261891600008"}