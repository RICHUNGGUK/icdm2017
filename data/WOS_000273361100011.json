{"auto_keywords": [{"score": 0.02357301136021106, "phrase": "rsvp"}, {"score": 0.0059504794822032, "phrase": "idas"}, {"score": 0.00481495049065317, "phrase": "virtually_shared_scratch_pad_memory"}, {"score": 0.004540591176992658, "phrase": "mpsoc_based_architecture"}, {"score": 0.004452641437293878, "phrase": "scratch_pad_memory"}, {"score": 0.0042310049455515095, "phrase": "haff"}, {"score": 0.004178351419209898, "phrase": "on-chip_memory"}, {"score": 0.004149026794640066, "phrase": "gvp"}, {"score": 0.003959447096055027, "phrase": "timing_predictability"}, {"score": 0.003697287104870263, "phrase": "shared_and_private_spm."}, {"score": 0.0036256123915754303, "phrase": "effective_use"}, {"score": 0.003572766402294553, "phrase": "vs-spm_architecture"}, {"score": 0.0033818386607332384, "phrase": "mibench"}, {"score": 0.0031767199435197243, "phrase": "phase-ordered_manner"}, {"score": 0.003054681986032532, "phrase": "initial_schedule"}, {"score": 0.002880333728285514, "phrase": "global_view_prediction"}, {"score": 0.0027159094186967247, "phrase": "loop_pipeline_scheduling_algorithm"}, {"score": 0.0026762874092443197, "phrase": "rotation_scheduling"}, {"score": 0.002573424607574822, "phrase": "overall_throughput"}, {"score": 0.0024624103660827695, "phrase": "average_performance_improvements"}, {"score": 0.002414616656410503, "phrase": "integrated_data_assignment"}, {"score": 0.002265586601922693, "phrase": "four-core_mpsoc."}, {"score": 0.0022434880661725493, "phrase": "average_schedule_length"}, {"score": 0.0021049977753042253, "phrase": "optimal_variable_partition"}], "paper_keywords": ["Variable partitioning", " Scheduling", " Scratch pad memory", " MPSoC"], "paper_abstract": "One of the most critical components that determine the success of an MPSoC based architecture is its on-chip memory. Scratch Pad Memory (SPM) is increasingly being applied to substitute cache as the on-chip memory of embedded MPSoCs due to its superior chip area, power consumption and timing predictability. SPM can be organized as a Virtually Shared SPM (VS-SPM) architecture that takes advantage of both shared and private SPM. However, making effective use of the VS-SPM architecture strongly depends on two inter-dependent problems: variable partitioning and task scheduling. In this paper, we decouple these two problems and solve them in phase-ordered manner. We propose two variable partitioning heuristics based on an initial schedule: High Access Frequency First (HAFF) variable partitioning and Global View Prediction (GVP) variable partitioning. Then, we present a loop pipeline scheduling algorithm known as Rotation Scheduling with Variable Partitioning (RSVP) to improve overall throughput. Our experimental results obtained on MiBench show that the average performance improvements over IDAS (Integrated Data Assignment with Scheduling) are 23.74% for HAFF and 31.91% for GVP on four-core MPSoC. The average schedule length generated by RSVP is 25.96% shorter than that of list scheduling with optimal variable partition.", "paper_title": "Variable Partitioning and Scheduling for MPSoC with Virtually Shared Scratch Pad Memory", "paper_id": "WOS:000273361100011"}