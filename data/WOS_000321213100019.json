{"auto_keywords": [{"score": 0.028573535114768848, "phrase": "parallel_scavenge"}, {"score": 0.00481495049065317, "phrase": "large-scale_multicore_architectures"}, {"score": 0.004672953146379813, "phrase": "garbage_collectors"}, {"score": 0.004220624516321415, "phrase": "good_performance"}, {"score": 0.00414545383888272, "phrase": "small_number"}, {"score": 0.0036553070575015344, "phrase": "negative_result"}, {"score": 0.0034016119212097826, "phrase": "intrinsic_limitations"}, {"score": 0.0033011569787033297, "phrase": "radically_different_approach"}, {"score": 0.0030171910207671205, "phrase": "compelling_scalability_reason"}, {"score": 0.002945669860541221, "phrase": "existing_highly-optimised_throughput-oriented_gc_code"}, {"score": 0.002790867657645595, "phrase": "default_throughput-oriented_garbage_collector"}, {"score": 0.0024901940672239784, "phrase": "well-established_parallel_programming_techniques"}, {"score": 0.0022085455097790537, "phrase": "low_core_count"}], "paper_keywords": ["Experimentation", " Performance", " Garbage collection", " NUMA", " multicore"], "paper_abstract": "Large-scale multicore architectures create new challenges for garbage collectors (GCs). In particular, throughput-oriented stop-the-world algorithms demonstrate good performance with a small number of cores, but have been shown to degrade badly beyond approximately 8 cores on a 48-core with OpenJDK 7. This negative result raises the question whether the stop-the-world design has intrinsic limitations that would require a radically different approach. Our study suggests that the answer is no, and that there is no compelling scalability reason to discard the existing highly-optimised throughput-oriented GC code on contemporary hardware. This paper studies the default throughput-oriented garbage collector of OpenJDK 7, called Parallel Scavenge. We identify its bottlenecks, and show how to eliminate them using well-established parallel programming techniques. On the SPECjbb2005, SPECjvm2008 and DaCapo 9.12 benchmarks, the improved GC matches the performance of Parallel Scavenge at low core count, but scales well, up to 48 cores.", "paper_title": "A Study of the Scalability of Stop-the-world Garbage Collectors on Multicores", "paper_id": "WOS:000321213100019"}