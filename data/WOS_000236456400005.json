{"auto_keywords": [{"score": 0.040905102236525534, "phrase": "high_performance"}, {"score": 0.040047668742416005, "phrase": "coefficient_matrices"}, {"score": 0.00481495049065317, "phrase": "general_sparse_matrices"}, {"score": 0.004710306419574744, "phrase": "large_mathematical_models"}, {"score": 0.00439041997682389, "phrase": "long_sequences"}, {"score": 0.00431388720289049, "phrase": "linear_algebraic_equations"}, {"score": 0.00355485940716082, "phrase": "modern_high-speed_computers"}, {"score": 0.003101503914610488, "phrase": "multi-hierarchical_memory"}, {"score": 0.0030608148631528767, "phrase": "modern_highspeed_computers"}, {"score": 0.0029548937818509656, "phrase": "modern_parallel_architectures"}, {"score": 0.002488604965680912, "phrase": "well-known_code"}, {"score": 0.0024236964502593254, "phrase": "sparse_matrices"}, {"score": 0.002258745901862197, "phrase": "new_code"}, {"score": 0.0022192891418394514, "phrase": "small_non-zero_elements"}], "paper_keywords": [""], "paper_abstract": "The discretization of large mathematical models, which arise in many fields of science and engineering, leads to the solution of long sequences of systems of linear algebraic equations. These systems are often very large (up to many millions of equations). Therefore, it is desirable to achieve high performance when such systems (with coefficient matrices the order of which is greater than or equal to one million) are treated on modern high-speed computers. In order to achieve high performance, it is absolutely necessary to exploit efficiently: - the sparsity of the coefficient matrices of these systems, - the caches in the multi-hierarchical memory of the modern highspeed computers, and - the power of the modern parallel architectures. An algorithm, in which these three tasks are successfully resolved, has been developed and tested. This algorithm is described and many results obtained by using this algorithm are presented and discussed. Some comparisons with the well-known code SuperLU for the treatment of sparse matrices are presented. The results of these comparisons show clearly that the option of the new code, in which small non-zero elements are dropped, is much faster than SuperLU. Some plans for further improvements are discussed in the end of the paper.", "paper_title": "Parallel treatment of general sparse matrices", "paper_id": "WOS:000236456400005"}