{"auto_keywords": [{"score": 0.03239965461746232, "phrase": "ara_problem"}, {"score": 0.00481495049065317, "phrase": "code_size"}, {"score": 0.004618720776729413, "phrase": "digital_signal_processors"}, {"score": 0.004456872931482395, "phrase": "crucial_step"}, {"score": 0.004378078970574258, "phrase": "high-quality_and_efficient_code"}, {"score": 0.004224627834741731, "phrase": "multiple_address_registers"}, {"score": 0.004174677062711731, "phrase": "dedicated_address_generation_units"}, {"score": 0.004100851549096203, "phrase": "address_generation"}, {"score": 0.004004436217742343, "phrase": "instruction_execution"}, {"score": 0.0038870860864224656, "phrase": "address_computation"}, {"score": 0.003795677450778112, "phrase": "next_address"}, {"score": 0.003706410380455668, "phrase": "auto-modify_range"}, {"score": 0.0036408354779365643, "phrase": "address_register"}, {"score": 0.0035341028694769036, "phrase": "iterative_pattern"}, {"score": 0.003450966222451678, "phrase": "array_elements"}, {"score": 0.0033101397746161843, "phrase": "careful_assignment"}, {"score": 0.0032709661258673206, "phrase": "array_references"}, {"score": 0.0029561107046138136, "phrase": "explicit_address_arithmetic_instructions"}, {"score": 0.0028693932802982417, "phrase": "execution_cycles"}, {"score": 0.002719644855867468, "phrase": "optimal_integer_linear_programming_formulation"}, {"score": 0.0026714812866037584, "phrase": "address_register_allocation_problem"}, {"score": 0.0026241684260044414, "phrase": "code_restructuring_techniques"}, {"score": 0.00248718591918233, "phrase": "genetic_algorithm_solution"}, {"score": 0.002357337046408753, "phrase": "near-optimal_solutions"}, {"score": 0.002315574871863272, "phrase": "reasonable_amount"}, {"score": 0.0022610379771517966, "phrase": "large_embedded_applications"}], "paper_keywords": ["Address register allocation", " DSP", " AGU", " ILP", " genetic algorithm"], "paper_abstract": "Optimizing the code size for applications that run on a digital signal processors (DSPs) is a crucial step in generating high-quality and efficient code. Most modern DSP provide multiple address registers and dedicated address generation units that provide address generation in parallel to instruction execution. There is no address computation overhead if the next address is within the auto-modify range of the address register. Many DSP algorithms have an iterative pattern of references to array elements within loops. Thus, a careful assignment of array references to address registers (called the address register allocation or ARA problem) reduces the number of explicit address arithmetic instructions as well as the execution cycles. In this paper, we present an optimal integer linear programming formulation for the address register allocation problem which incorporates code restructuring techniques. In addition, we have developed a Genetic Algorithm solution for the ARA problem that allows us to get near-optimal solutions in a reasonable amount of time for large embedded applications. Results on several benchmarks show the effectiveness of our techniques compared to other techniques in the literature.", "paper_title": "CODE SIZE REDUCTION FOR ARRAY INTENSIVE APPLICATIONS ON DIGITAL SIGNAL PROCESSORS", "paper_id": "WOS:000306071900001"}