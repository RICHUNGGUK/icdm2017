{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "stream_applications"}, {"score": 0.012919690208659514, "phrase": "cooperative_peer-to-peer_environments"}, {"score": 0.004760765880314089, "phrase": "peer-to-peer_environments"}, {"score": 0.004448169552315403, "phrase": "continuous_real-_time_processing"}, {"score": 0.0037532257703888315, "phrase": "stream_processing_elements"}, {"score": 0.003689982350051231, "phrase": "different_peers"}, {"score": 0.003648411055689428, "phrase": "user_desired_applications"}, {"score": 0.0035666632046674153, "phrase": "multiple_alternative_approaches"}, {"score": 0.0032946562900625187, "phrase": "local-state-based_distributed_algorithms"}, {"score": 0.0031665087019813244, "phrase": "setup_phase"}, {"score": 0.0031131208154718867, "phrase": "centralized_algorithm"}, {"score": 0.003078028357912228, "phrase": "periodical_global_state_maintenance"}, {"score": 0.003026127736667187, "phrase": "distributed_algorithm"}, {"score": 0.002958281631770322, "phrase": "demand_state_collection"}, {"score": 0.002859345731792013, "phrase": "proactive_failure_recovery_schemes"}, {"score": 0.0028111220617485985, "phrase": "composed_stream_applications"}, {"score": 0.0027325449069867222, "phrase": "reactive_failure_recovery_algorithm"}, {"score": 0.002671263324230699, "phrase": "new_stream_application"}, {"score": 0.0025965853546625352, "phrase": "proactive_approach"}, {"score": 0.0025239898026543964, "phrase": "backup_compositions"}, {"score": 0.002495521662819317, "phrase": "failure_recovery"}, {"score": 0.0024257447861185813, "phrase": "theoretical_analysis"}, {"score": 0.002398382089724878, "phrase": "experimental_evaluations"}, {"score": 0.002318127769195112, "phrase": "different_approaches"}, {"score": 0.0022278779300543548, "phrase": "overhead_trade-offs"}, {"score": 0.002202742267484358, "phrase": "different_design_alternatives"}, {"score": 0.002141134176057931, "phrase": "important_guidance"}, {"score": 0.0021049977753042253, "phrase": "proper_algorithms"}], "paper_keywords": ["peer-to-peer", " stream processing", " service composition", " resource management", " quality-of-service"], "paper_abstract": "Stream processing has become increasingly important as many emerging applications call for continuous real- time processing over data streams, such as voice-over-IP telephony, security surveillance, and sensor data analysis. In this paper, we propose a composable stream processing system for cooperative peer-to-peer environments. The system can dynamically select and compose stream processing elements located on different peers into user desired applications. We investigate multiple alternative approaches to composing stream applications: 1) global-state-based centralized versus local-state-based distributed algorithms for initially composing stream applications at setup phase. The centralized algorithm performs periodical global state maintenance while the distributed algorithm performs on-demand state collection. 2) Reactive versus proactive failure recovery schemes for maintaining composed stream applications during runtime. The reactive failure recovery algorithm dynamically recomposes a new stream application upon failures while the proactive approach maintains a number of backup compositions for failure recovery. We conduct both theoretical analysis and experimental evaluations to study the properties of different approaches. Our study illustrates the performance and overhead trade-offs among different design alternatives, which can provide important guidance for selecting proper algorithms to compose stream applications in cooperative peer-to-peer environments.", "paper_title": "On composing stream applications in peer-to-peer environments", "paper_id": "WOS:000238481900009"}