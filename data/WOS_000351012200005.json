{"auto_keywords": [{"score": 0.03668992666715297, "phrase": "reference_architecture"}, {"score": 0.00481495049065317, "phrase": "software_product_line_skeleton_architectures"}, {"score": 0.004364446928620496, "phrase": "software_systems"}, {"score": 0.003978866233891427, "phrase": "skeleton_software_architectures"}, {"score": 0.003933118499284644, "phrase": "software_product_lines"}, {"score": 0.0033839745649214548, "phrase": "behavior_view"}, {"score": 0.0033450437338616596, "phrase": "variability_view"}, {"score": 0.003268516165008941, "phrase": "system_domain"}, {"score": 0.0032122679403131568, "phrase": "standardized_production_plan"}, {"score": 0.003049247243348174, "phrase": "equivalent_skeleton_software_architecture"}, {"score": 0.0028944757265206332, "phrase": "feature_model_configuration"}, {"score": 0.0025780134737796085, "phrase": "target_software_product"}, {"score": 0.0021794454466797382, "phrase": "model-driven_engineering_techniques"}, {"score": 0.0021049977753042253, "phrase": "domain_analysis"}], "paper_keywords": ["Software product lines", " model-driven engineering", " reference software architectures", " diagnostic expert systems"], "paper_abstract": "This paper presents a process, a method and a framework for developing families of software systems in a domain. The process is generic (domain-independent) and produces skeleton software architectures as Software Product Lines. The genericity is supported by the meta-models (abstract languages) that are defined in order to describe the Reference Architecture (structure view, behavior view and variability view) of the system domain. A standardized Production Plan takes the Reference Architecture as input and produces the equivalent Skeleton Software Architecture (component-connector view) using a Feature Model configuration (describing the system to be) as output. This Skeleton Software Architecture includes the structure and behavior of the target software product. A framework has been implemented to support the approach. The process is applied, as an example, to the Diagnostic Expert Systems domain. Our approach is based on Model-Driven Engineering techniques and the Software Product Line paradigm. A domain analysis must be done in order to build the Reference Architecture.", "paper_title": "A Generic Process for the Design and Generation of Software Product Line Skeleton Architectures", "paper_id": "WOS:000351012200005"}