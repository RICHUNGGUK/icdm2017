{"auto_keywords": [{"score": 0.04633740170112977, "phrase": "spurious_interprocedural_cycles"}, {"score": 0.00481495049065317, "phrase": "large_spurious_interprocedural_cycles"}, {"score": 0.004634459424542272, "phrase": "simple_algorithmic_extension"}, {"score": 0.004568525347438891, "phrase": "approximate_call-strings_approach"}, {"score": 0.004503525064934708, "phrase": "substantial_performance_degradation"}, {"score": 0.004293434614435972, "phrase": "realistic_setting"}, {"score": 0.004232331639807526, "phrase": "key_reasons"}, {"score": 0.004172094622123562, "phrase": "approximate_call-return_semantics"}, {"score": 0.004112711391952791, "phrase": "context-sensitive_and_-insensitive_static_analysis"}, {"score": 0.0038834787946979863, "phrase": "approximate_call-strings-based_context-sensitive_static_analysis"}, {"score": 0.0036845490951857617, "phrase": "multiple_call-contexts"}, {"score": 0.0033645655483989746, "phrase": "multiple_return-sites"}, {"score": 0.00326939082861424, "phrase": "multiple_returns"}, {"score": 0.0032074366230426727, "phrase": "single_large_cycle"}, {"score": 0.003043031131345537, "phrase": "almost_all_parts"}, {"score": 0.0028053237950173508, "phrase": "fixpoint_iteration_algorithm"}, {"score": 0.0027259252868643926, "phrase": "spurious_interprocedural_flows"}, {"score": 0.002687070469080394, "phrase": "technique's_effectiveness"}, {"score": 0.002598543802992702, "phrase": "realistic_c_analyzer"}, {"score": 0.002549269480908849, "phrase": "analysis_time"}, {"score": 0.0023613185213421173, "phrase": "existing_analyses"}, {"score": 0.002316532084420729, "phrase": "underlying_abstract_semantics"}, {"score": 0.0022401855403251653, "phrase": "underlying_abstract_semantics'_context-sensitivity"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["static analysis", " interprocedural analysis", " abstract interpretation", " spurious cycles", " fixpoint algorithm"], "paper_abstract": "We present a simple algorithmic extension of the approximate call-strings approach to mitigate substantial performance degradation caused by spurious interprocedural cycles. Spurious interprocedural cycles are, in a realistic setting, the key reasons for why approximate call-return semantics in both context-sensitive and -insensitive static analysis can make the analysis much slower than expected. In the approximate call-strings-based context-sensitive static analysis, because the number of distinguished contexts is finite, multiple call-contexts are inevitably joined at the entry of a procedure and the output at the exit is propagated to multiple return-sites. We found that these multiple returns frequently create a single large cycle (we call it 'butterfly cycle') covering almost all parts of the program and such a spurious cycle makes analyses very slow and inaccurate. Our simple algorithmic technique (within the fixpoint iteration algorithm) identifies and prunes these spurious interprocedural flows. The technique's effectiveness is proven by experiments with a realistic C analyzer to reduce the analysis time by 7-96%. As the technique is algorithmic, it can be easily applicable to existing analyses without changing the underlying abstract semantics, it is orthogonal to the underlying abstract semantics' context-sensitivity, and its correctness is obvious. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "An algorithmic mitigation of large spurious interprocedural cycles in static analysis", "paper_id": "WOS:000280044400001"}