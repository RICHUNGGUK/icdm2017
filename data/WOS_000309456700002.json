{"auto_keywords": [{"score": 0.044468583159911874, "phrase": "oracle_cost"}, {"score": 0.010612387000973441, "phrase": "multi-objective_test_data_generation_problem"}, {"score": 0.004598027492787762, "phrase": "search-based_software_engineering"}, {"score": 0.004517210371632577, "phrase": "main_goal"}, {"score": 0.004119211418949265, "phrase": "entire_test_suite"}, {"score": 0.004018158280364063, "phrase": "system_behavior"}, {"score": 0.003178856904071446, "phrase": "mono-objective_algorithm"}, {"score": 0.0031451673059794236, "phrase": "multi-objective_test_case_selection_optimization"}, {"score": 0.0029190995437264377, "phrase": "multi-objective_test_case_selection"}, {"score": 0.0028474035592052052, "phrase": "experimental_analysis"}, {"score": 0.002767613012044169, "phrase": "first_one"}, {"score": 0.0026900523406547827, "phrase": "program_generator"}, {"score": 0.00266152927283908, "phrase": "second_benchmark"}, {"score": 0.0025504217985882725, "phrase": "direct_multi-objective_approach"}, {"score": 0.0024094425220967273, "phrase": "full_branch_coverage"}, {"score": 0.0023586032632567796, "phrase": "great_challenge"}, {"score": 0.002325306388085057, "phrase": "mono-objective_algorithms"}, {"score": 0.0022762383517229957, "phrase": "second_phase"}, {"score": 0.002260112998123604, "phrase": "test_case_selection"}, {"score": 0.0021580408652391767, "phrase": "branch_coverage"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["multi-objective test data generation", " branch coverage", " oracle cost", " evolutionary testing", " evolutionary algorithms", " search-based software engineering"], "paper_abstract": "Automatic test data generation is a very popular domain in the field of search-based software engineering. Traditionally, the main goal has been to maximize coverage. However, other objectives can be defined, such as the oracle cost, which is the cost of executing the entire test suite and the cost of checking the system behavior. Indeed, in very large software systems, the cost spent to test the system can be an issue, and then it makes sense by considering two conflicting objectives: maximizing the coverage and minimizing the oracle cost. This is what we did in this paper. We mainly compared two approaches to deal with the multi-objective test data generation problem: a direct multi-objective approach and a combination of a mono-objective algorithm together with multi-objective test case selection optimization. Concretely, in this work, we used four state-of-the-art multi-objective algorithms and two mono-objective evolutionary algorithms followed by a multi-objective test case selection based on Pareto efficiency. The experimental analysis compares these techniques on two different benchmarks. The first one is composed of 800 Java programs created through a program generator. The second benchmark is composed of 13 real programs extracted from the literature. In the direct multi-objective approach, the results indicate that the oracle cost can be properly optimized; however, the full branch coverage of the system poses a great challenge. Regarding the mono-objective algorithms, although they need a second phase of test case selection for reducing the oracle cost, they are very effective in maximizing the branch coverage. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Evolutionary algorithms for the multi-objective test data generation problem", "paper_id": "WOS:000309456700002"}