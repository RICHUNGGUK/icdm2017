{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "fast_motion_estimation_algorithm"}, {"score": 0.049506552437065775, "phrase": "adaptive_pattern"}, {"score": 0.029001335298652793, "phrase": "search_priority"}, {"score": 0.004662913362513954, "phrase": "block_matching_algorithm"}, {"score": 0.004625671115359727, "phrase": "bma"}, {"score": 0.004355516897622305, "phrase": "temporal_redundancy"}, {"score": 0.00426900754050533, "phrase": "motion_estimation"}, {"score": 0.004217925382695912, "phrase": "key_problem"}, {"score": 0.004035777314816881, "phrase": "high_computation_complexity"}, {"score": 0.004003511894751058, "phrase": "bma."}, {"score": 0.0036504182609411852, "phrase": "distribution_characteristics"}, {"score": 0.0036212219870826725, "phrase": "motion_vector"}, {"score": 0.003437036036889996, "phrase": "improved_algorithm"}, {"score": 0.00340954056723008, "phrase": "different_efficient_patterns"}, {"score": 0.0033552055241931346, "phrase": "appropriate_pattern"}, {"score": 0.003108669771132255, "phrase": "current_block"}, {"score": 0.0030468495296763617, "phrase": "starting_pattern"}, {"score": 0.002974281028713475, "phrase": "motion_vectors"}, {"score": 0.0029386456078004863, "phrase": "neighboring_blocks"}, {"score": 0.0029034358982402346, "phrase": "subsequent_pattern"}, {"score": 0.0028115863316685937, "phrase": "current_best_matching_point"}, {"score": 0.0027556576784848207, "phrase": "proposed_method"}, {"score": 0.0023182554418193927, "phrase": "conventional_fast_algorithms"}, {"score": 0.0022904619303011097, "phrase": "experimental_results"}, {"score": 0.002253920389285441, "phrase": "proposed_algorithm"}, {"score": 0.0022001958412800745, "phrase": "search_algorithm"}, {"score": 0.002182573128803447, "phrase": "significant_reduction"}, {"score": 0.002165091261117016, "phrase": "computational_complexity"}, {"score": 0.0021049977753042253, "phrase": "image_quality"}], "paper_keywords": ["Motion estimation", " Block matching", " Search priority", " Adaptive pattern", " Video coding"], "paper_abstract": "Block matching algorithm (BMA) has been widely used in motion estimation for various video coding standards since it can remove temporal redundancy effectively. However, motion estimation is the key problem in realizing real-time video coding due to the high computation complexity of BMA. In this manuscript, we present a fast motion estimation algorithm according to the adaptive pattern and search priority (APSP). Based on the distribution characteristics of motion vector (MV) that achieved by a series of experiments, the improved algorithm defines different efficient patterns and adopts the appropriate pattern adaptively. Firstly, the search can be stopped after checking one point by the features of the current block. And then the starting pattern is determined based on the motion vectors from the neighboring blocks. The subsequent pattern can be further adjusted according to the current best matching point. Furthermore, the proposed method assigns search priority to each point of every pattern. Therefore, the search is performed under the guidance of the search priority, with the result that each pattern can be interrupted in any position by using priority and threshold. Compared to conventional fast algorithms, the experimental results demonstrate that the proposed algorithm improves the performance of the search algorithm with significant reduction in computational complexity on the premise of ensuring the image quality and searching precision.", "paper_title": "A fast motion estimation algorithm based on adaptive pattern and search priority", "paper_id": "WOS:000365446600038"}