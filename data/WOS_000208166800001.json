{"auto_keywords": [{"score": 0.046322688148482574, "phrase": "scientific_computation"}, {"score": 0.03800874215251104, "phrase": "fpga"}, {"score": 0.00481495049065317, "phrase": "dense_matrices"}, {"score": 0.004777744121315302, "phrase": "recent_developments"}, {"score": 0.0046859752697029355, "phrase": "modern_field_programmable_gate_arrays"}, {"score": 0.004171065188039856, "phrase": "linear_equations"}, {"score": 0.003859500298805362, "phrase": "conjugate_gradient"}, {"score": 0.0036838048761094933, "phrase": "widely_parallel_and_deeply_pipelined_hardware_cg_implementation"}, {"score": 0.0034753508746887957, "phrase": "multiple_small-to-medium-sized_dense_systems"}, {"score": 0.0033429545815200825, "phrase": "stand-alone_solver"}, {"score": 0.003253279945540651, "phrase": "higher-order_systems"}, {"score": 0.003045355729156972, "phrase": "computation_time"}, {"score": 0.0029066143383279243, "phrase": "clock_cycles"}, {"score": 0.00278497898719426, "phrase": "deep_pipelining"}, {"score": 0.002507511169156787, "phrase": "constant_value"}, {"score": 0.0024592402228499105, "phrase": "matrix_order"}, {"score": 0.00243072375406841, "phrase": "place-and-route_results"}, {"score": 0.0022841153001549193, "phrase": "sustained_performance"}, {"score": 0.0022141537427057363, "phrase": "optimized_software_implementation"}, {"score": 0.0021799789348982534, "phrase": "high-end_cpu_demonstrate"}, {"score": 0.0021214346747442363, "phrase": "significant_speedup"}], "paper_keywords": ["Algorithms", " Design", " Performance"], "paper_abstract": "Recent developments in the capacity of modern Field Programmable Gate Arrays (FPGAs) have significantly expanded their applications. One such field is the acceleration of scientific computation and one type of calculation that is commonplace in scientific computation is the solution of systems of linear equations. A method that has proven in software to be very efficient and robust for finding such solutions is the Conjugate Gradient (CG) algorithm. In this article we present a widely parallel and deeply pipelined hardware CG implementation, targeted at modern FPGA architectures. This implementation is particularly suited for accelerating multiple small-to-medium-sized dense systems of linear equations and can be used as a stand-alone solver or as building block to solve higher-order systems. In this article it is shown that through parallelization it is possible to convert the computation time per iteration for an order n matrix from Theta(n(2)) clock cycles on a microprocessor to Theta(n) on a FPGA. Through deep pipelining it is also possible to solve several problems in parallel and maximize both performance and efficiency. I/O requirements are shown to be scalable and convergent to a constant value with the increase of matrix order. Post place-and-route results on a readily available VirtexII-6000 demonstrate sustained performance of 5 GFlops, and results on a Virtex5-330 indicate sustained performance of 35 GFlops. A comparison with an optimized software implementation running on a high-end CPU demonstrate that this FPGA implementation represents a significant speedup of at least an order of magnitude.", "paper_title": "A High Throughput FPGA-Based Floating Point Conjugate Gradient Implementation for Dense Matrices", "paper_id": "WOS:000208166800001"}