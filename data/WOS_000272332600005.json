{"auto_keywords": [{"score": 0.03481487178682438, "phrase": "bloom_filter"}, {"score": 0.015719716506582538, "phrase": "indirect_branch_validation_unit"}, {"score": 0.013504149940822578, "phrase": "ibvu"}, {"score": 0.012369198191699233, "phrase": "ibp"}, {"score": 0.004647442352794694, "phrase": "micro-architectural_enhancement"}, {"score": 0.00438105507792004, "phrase": "malicious_attacks"}, {"score": 0.004278807087784626, "phrase": "control_data"}, {"score": 0.00405735420159564, "phrase": "run-time_control_flow_protection"}, {"score": 0.00387011040370557, "phrase": "indirect_branch's_address"}, {"score": 0.0036481158025940047, "phrase": "program_behavior"}, {"score": 0.0034185505275141077, "phrase": "storage_overhead"}, {"score": 0.003091767402370757, "phrase": "set_membership"}, {"score": 0.002966438503447793, "phrase": "access_delay"}, {"score": 0.002897109710213723, "phrase": "vlsi_design"}, {"score": 0.0027307746993761035, "phrase": "performance_impact"}, {"score": 0.0025892330566358503, "phrase": "potential_false_positives"}, {"score": 0.0024118292918742967, "phrase": "bloom_filter's_design_parameters"}, {"score": 0.002273292707863821, "phrase": "false_positives"}, {"score": 0.002233301265743633, "phrase": "hashing_based_indexing"}, {"score": 0.0021682027434117095, "phrase": "malicious_attack"}], "paper_keywords": ["Control data", " Indirect branch", " Branch prediction", " Software attack"], "paper_abstract": "This paper presents a micro-architectural enhancement, named Indirect Branch Validation Unit (IBVU), to prevent malicious attacks from compromising the control data of the program. The IBVU provides a run-time control flow protection by validating a dynamic instance of an indirect branch's address and its target address - indirect branch pair (IBP), which represents the program behavior. To validate an IBP at run-time with little performance and storage overhead, the IBVU employs a Bloom filter, a hashing based bit vector representation for querying a set membership. Two organizations trading off of the access delay and space in VLSI design are provided, and three commonly used hashing schemes are evaluated for the performance impact as well as the area overhead. Recognizing potential false positives from adopting the Bloom filter, consideration of reducing it per the Bloom filter's design parameters is discussed, while the difficulty of utilizing the false positives due to hashing based indexing of the Bloom filter for malicious attack is noted. (C) 2009 Elsevier B.V. All rights reserved.", "paper_title": "Indirect Branch Validation Unit", "paper_id": "WOS:000272332600005"}