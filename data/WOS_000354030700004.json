{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "foss_systems"}, {"score": 0.004346704947011699, "phrase": "centralized_coordination"}, {"score": 0.004129873531628877, "phrase": "package_dependencies"}, {"score": 0.003986103192038901, "phrase": "new_system_configuration"}, {"score": 0.003877737556673229, "phrase": "current_tools"}, {"score": 0.003757480190200645, "phrase": "upgrade_faults"}, {"score": 0.003640938643675543, "phrase": "wide_range"}, {"score": 0.0033651019362620866, "phrase": "missing_packages"}, {"score": 0.0029664385034477905, "phrase": "model-driven_approach"}, {"score": 0.002897109710213723, "phrase": "specific_classes"}, {"score": 0.0028743610212291727, "phrase": "system_configuration_faults"}, {"score": 0.0028293966058473476, "phrase": "real_upgrade"}, {"score": 0.002785133616425661, "phrase": "system_configuration"}, {"score": 0.0026986685585382347, "phrase": "configuration_model"}, {"score": 0.0025638362414466278, "phrase": "specific_class"}, {"score": 0.002455009746748708, "phrase": "user_communities"}, {"score": 0.002426137929553722, "phrase": "new_queries"}, {"score": 0.002407078478216306, "phrase": "new_classes"}, {"score": 0.0022777800735119405, "phrase": "fault_detector"}, {"score": 0.002259883463607508, "phrase": "configuration_models"}, {"score": 0.002163930783583212, "phrase": "produced_results"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["evolution of FOSS systems", " fault prevention", " model-driven engineering", " linux distributions"], "paper_abstract": "Free and Open-Source Software (FOSS) Linux distributions are among the most complex modern software systems. They are made of thousands of components (software packages) evolving rapidly without centralized coordination. The upgrade of FOSS systems is managed by meta-installers, which solve package dependencies and conflicts and lead the system to a new system configuration by installing or removing packages. Current tools are able to predict a very limited set of upgrade faults before deployment, and this leaves a wide range of faults unpredicted. In this paper, we focus on faults that remain unpredicted, for example, missing packages, packages that are not properly installed, and missing services, with the aim of providing a solution for them. Specifically, in this paper, we propose a model-driven approach and supporting tools to prevent specific classes of system configuration faults before performing the real upgrade. Once the system configuration is represented as a model, the configuration model is evaluated by means of queries, each devoted to discover a specific class of faults. The approach is intrinsically extensible so that user communities can add new queries when new classes of faults are identified. The approach has been validated by executing the fault detector on configuration models in which faults have been intentionally injected and by analyzing produced results. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "A model-driven approach to detect faults in FOSS systems", "paper_id": "WOS:000354030700004"}