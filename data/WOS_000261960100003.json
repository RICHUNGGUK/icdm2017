{"auto_keywords": [{"score": 0.047293169449964985, "phrase": "u_pages"}, {"score": 0.00481495049065317, "phrase": "request_sets"}, {"score": 0.004757643419056999, "phrase": "generalized_paging_problem"}, {"score": 0.004137184278868391, "phrase": "page_fault"}, {"score": 0.0034289106230496816, "phrase": "single_utility"}, {"score": 0.003065830998810144, "phrase": "next_request"}, {"score": 0.00288736193515505, "phrase": "classical_paging_problem"}, {"score": 0.0026760974046034854, "phrase": "offline_problem"}, {"score": 0.002560907803820395, "phrase": "cache_size"}, {"score": 0.0024506642262508735, "phrase": "polynomial_time"}, {"score": 0.0024311346712789553, "phrase": "constant_values"}, {"score": 0.002382987346529592, "phrase": "mainly_online_algorithms"}, {"score": 0.0023451553255837317, "phrase": "competitive_algorithms"}, {"score": 0.002326464619238653, "phrase": "arbitrary_values"}, {"score": 0.0021049977753042253, "phrase": "resource_augmentation"}], "paper_keywords": ["Paging", " Online algorithms", " Competitive analysis"], "paper_abstract": "A generalized paging problem is considered. Each request is expressed as a set of u pages. In order to satisfy the request, at least one of these pages must be in the cache. Therefore, on a page fault, the algorithm must load into the cache at least one page out of the u pages given in the request. The problem arises in systems in which requests can be serviced by various utilities (e.g., a request for a data that lies in various web-pages) and a single utility can service many requests (e.g., a web-page containing various data). The server has the freedom to select the utility that will service the next request and hopefully additional requests in the future. The case u=1 is simply the classical paging problem, which is known to be polynomially solvable. We show that for any u > 1 the offline problem is NP-hard and hard to approximate if the cache size k is part of the input, but solvable in polynomial time for constant values of k. We consider mainly online algorithms, and design competitive algorithms for arbitrary values of k, u. We study in more detail the cases where u and k are small. We also give an algorithm which uses resource augmentation and which is asymptotically optimal for u=2.", "paper_title": "Paging with Request Sets", "paper_id": "WOS:000261960100003"}