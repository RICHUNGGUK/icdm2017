{"auto_keywords": [{"score": 0.03986629341595467, "phrase": "representation_theory"}, {"score": 0.00481495049065317, "phrase": "software_development_methodologies"}, {"score": 0.004710489616113198, "phrase": "current_modelling_approaches"}, {"score": 0.004574709094672837, "phrase": "strong_theoretical_underpinning"}, {"score": 0.004362326712297089, "phrase": "potential_misinterpretation"}, {"score": 0.004283280680222718, "phrase": "object-oriented_contexts"}, {"score": 0.004039792863335641, "phrase": "technology-agnostic_approach"}, {"score": 0.003981106369547929, "phrase": "basic_concepts"}, {"score": 0.003952082333580496, "phrase": "structural_models"}, {"score": 0.0038946650372062783, "phrase": "software_engineering"}, {"score": 0.0037273513742154237, "phrase": "different_kinds"}, {"score": 0.003700170452390401, "phrase": "interpretive_mappings"}, {"score": 0.003489714006817602, "phrase": "model_entities"}, {"score": 0.0032433414042726356, "phrase": "backward-looking_models"}, {"score": 0.003115307756631991, "phrase": "appropriate_definition"}, {"score": 0.0030925761790620027, "phrase": "modelling_languages"}, {"score": 0.002959617637433, "phrase": "process_integration"}, {"score": 0.0028014064098604093, "phrase": "verbal_plus_nominal_nodes"}, {"score": 0.0027505663559338825, "phrase": "methodology_metamodel"}, {"score": 0.002622647280008795, "phrase": "modelling_infrastructure"}, {"score": 0.002500662348528587, "phrase": "ontologically_universal_modelling_language"}, {"score": 0.0024106932919085097, "phrase": "theoretical_analyses"}, {"score": 0.0023669270875629205, "phrase": "omg_products"}, {"score": 0.0023410498394103745, "phrase": "spem"}, {"score": 0.0023239788682495846, "phrase": "uml"}, {"score": 0.0023069919016718726, "phrase": "mof"}, {"score": 0.002175594509651082, "phrase": "better_modelling_infrastructure"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["modelling", " metamodelling", " software development methodologies", " theoretical basis"], "paper_abstract": "Current modelling approaches often purport to be based on a strong theoretical underpinning but, in fact, contain many ill-defined concepts or even contradictions leading to potential misinterpretation. Although much modelling in object-oriented contexts is focussed on the use of the Unified Modelling Language (UML), this paper presents a technology-agnostic approach that analyses the basic concepts of structural models and modelling in software engineering, using an approach based on representation theory. We examine the different kinds of interpretive mappings (either isotypical, prototypical or metatypical) that are required in order to trace model entities back to the SUS (subject under study) entities that they represent. The difference between forward- and backward-looking models is also explained, as are issues relating to the appropriate definition of modelling languages in general based on representation theory. The need for product and process integration in methodologies is then addressed, leading to the conclusion that a mesh of verbal plus nominal nodes is necessary in any methodology metamodel. Finally, the need for a common, cross-cutting modelling infrastructure is established, and a solution proposed in the form of an ontologically universal modelling language, OOLang. Examples of the application of these theoretical analyses to the suite of OMG products (particularly SPEM, UML and MOF) are given throughout, with the hope that awareness of the importance of a better modelling infrastructure can be developed. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Modelling software development methodologies: A conceptual foundation", "paper_id": "WOS:000250433700003"}