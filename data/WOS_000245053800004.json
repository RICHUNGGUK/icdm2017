{"auto_keywords": [{"score": 0.035335938913472247, "phrase": "tdl_programs"}, {"score": 0.015719716506582538, "phrase": "abstract_models"}, {"score": 0.015570195150470633, "phrase": "multithreaded_programs"}, {"score": 0.014562040501858282, "phrase": "fresh_name_generation"}, {"score": 0.010818169771574265, "phrase": "low_level_language"}, {"score": 0.004587835274176236, "phrase": "automated_verification"}, {"score": 0.004246428036409373, "phrase": "high_level_specification_language"}, {"score": 0.0041051328120736575, "phrase": "communication_finite-state_machines"}, {"score": 0.0039685202936462815, "phrase": "infinite_name_domain"}, {"score": 0.0039113704183394585, "phrase": "tdl"}, {"score": 0.003855034057431947, "phrase": "communication_machines"}, {"score": 0.0037087324991876727, "phrase": "communication_protocols"}, {"score": 0.0035679633126097115, "phrase": "multithreaded_software"}, {"score": 0.003516558537200823, "phrase": "verification_method"}, {"score": 0.0030709962527878656, "phrase": "petri_nets"}, {"score": 0.0029400959763737364, "phrase": "symbolic_verification_procedure"}, {"score": 0.002630299922281952, "phrase": "decidable_class"}, {"score": 0.0026049517737353365, "phrase": "verification_problems"}, {"score": 0.0023417010799384524, "phrase": "internal_structure"}, {"score": 0.002241816883550397, "phrase": "complete_and_terminating_method"}, {"score": 0.0021049977753042253, "phrase": "infinite_domain"}], "paper_keywords": ["constraints", " multithreaded programs", " verification"], "paper_abstract": "We present a technique for the automated verification of abstract models of multithreaded programs providing fresh name generation, name mobility, and unbounded control. As high level specification language we adopt here an extension of communication finite-state machines with local variables ranging over an infinite name domain, called TDL programs. Communication machines have been proved very effective for representing communication protocols as well as for representing abstractions of multithreaded software. The verification method that we propose is based on the encoding of TDL programs into a low level language based on multiset rewriting and constraints that can be viewed as an extension of Petri Nets. By means of this encoding, the symbolic verification procedure developed for the low level language in our previous work can now be applied to TDL programs. Furthermore, the encoding allows us to isolate a decidable class of verification problems for TDL programs that still provide fresh name generation, name mobility, and unbounded control. Our syntactic restrictions are in fact defined on the internal structure of threads: In order to obtain a complete and terminating method, threads are only allowed to have at most one local variable (ranging over an infinite domain of names).", "paper_title": "Constraint-based automatic verification of abstract models of multithreaded programs", "paper_id": "WOS:000245053800004"}