{"auto_keywords": [{"score": 0.048992899974696226, "phrase": "preemptive_threads"}, {"score": 0.00481495049065317, "phrase": "low-level_programs"}, {"score": 0.004662705558154439, "phrase": "hardware_interrupts"}, {"score": 0.004536029676655286, "phrase": "world's_critical_software_systems"}, {"score": 0.004412780054037622, "phrase": "device_drivers"}, {"score": 0.004352411290383643, "phrase": "system_kernels"}, {"score": 0.004157058883925715, "phrase": "essential_component"}, {"score": 0.004119049028319832, "phrase": "low-level_system_programming"}, {"score": 0.003809628721278519, "phrase": "program_control"}, {"score": 0.003689053436223376, "phrase": "low-level_concurrent_code"}, {"score": 0.0035722806911457545, "phrase": "existing_formal_verification_techniques"}, {"score": 0.00353961030074375, "phrase": "hoare"}, {"score": 0.0034911335714333507, "phrase": "typed_assembly_language"}, {"score": 0.003459191419478298, "phrase": "concurrent_separation_logic"}, {"score": 0.0033961782274326948, "phrase": "assume-guarantee_method"}, {"score": 0.003126481516783286, "phrase": "today's_program_verification_systems"}, {"score": 0.0030135741897058844, "phrase": "novel_hoare-logic-like_framework"}, {"score": 0.0029722900280316216, "phrase": "low-level_system_programs"}, {"score": 0.002825681384008326, "phrase": "enabling_and_disabling_interrupts"}, {"score": 0.002748775748298028, "phrase": "simple_ownership-transfer_semantics"}, {"score": 0.0026373136897864763, "phrase": "concurrent_setting"}, {"score": 0.002530359917257626, "phrase": "interrupt_handlers"}, {"score": 0.0025071862539276283, "phrase": "context_switching"}, {"score": 0.002472822097373027, "phrase": "synchronization_libraries"}, {"score": 0.0023725232579531273, "phrase": "first_time"}, {"score": 0.002318566141177149, "phrase": "preemptive_thread_implementation"}, {"score": 0.002286781334850213, "phrase": "large_number"}, {"score": 0.002265833357217618, "phrase": "common_synchronization_primitives"}, {"score": 0.0021049977753042253, "phrase": "fully_certified_operating_system_kernels"}], "paper_keywords": ["languages", " reliability", " security", " verification", " hardware interrupts", " preemptive threads", " certified system software", " concurrency", " separation logic"], "paper_abstract": "Hardware interrupts are widely used in the world's critical software systems to support preemptive threads, device drivers, operating system kernels, and hypervisors. Handling interrupts properly is an essential component of low-level system programming. Unfortunately, interrupts are also extremely hard to reason about: they dramatically alter the program control flow and complicate the invariants in low-level concurrent code ( e. g., implementation of synchronization primitives). Existing formal verification techniques including Hoare logic, typed assembly language, concurrent separation logic, and the assume-guarantee method-have consistently ignored the issues of interrupts; this severely limits the applicability and power of today's program verification systems. In this paper we present a novel Hoare-logic-like framework for certifying low-level system programs involving both hardware interrupts and preemptive threads. We show that enabling and disabling interrupts can be formalized precisely using simple ownership-transfer semantics, and the same technique also extends to the concurrent setting. By carefully reasoning about the interaction among interrupt handlers, context switching, and synchronization libraries, we are able to-for the first time - successfully certify a preemptive thread implementation and a large number of common synchronization primitives. Our work provides a foundation for reasoning about interrupt-based kernel programs and makes an important advance toward building fully certified operating system kernels and hypervisors.", "paper_title": "Certifying low-level programs with hardware interrupts and preemptive threads", "paper_id": "WOS:000257820400016"}