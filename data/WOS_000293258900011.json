{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "behavioral_compatibility"}, {"score": 0.0046781613377273774, "phrase": "methods_rule"}, {"score": 0.004501774379030109, "phrase": "object-oriented_systems"}, {"score": 0.004311241567238011, "phrase": "object_types"}, {"score": 0.004148116671105096, "phrase": "classical_methods_rule"}, {"score": 0.004108942392772092, "phrase": "object_oriented_system"}, {"score": 0.003262035294895737, "phrase": "object_type"}, {"score": 0.003049555059533735, "phrase": "classical_methods"}, {"score": 0.002948547333717581, "phrase": "invocation_consistency"}, {"score": 0.0027431953780099826, "phrase": "subtypes'_preconditions"}, {"score": 0.002716915166374506, "phrase": "inherited_operations"}, {"score": 0.00242047093248845, "phrase": "extended_methods_rule"}, {"score": 0.0021771713131746636, "phrase": "bcct"}], "paper_keywords": ["object oriented programming"], "paper_abstract": "Behavioral compatibility between subtypes and supertypes in object-oriented systems is a very important issue to enable the substitution between object types since it supports the extension and evolution of an object oriented system. In other words, the subtype must be guaranteed that it can provide all behaviors (operations) of the supertype for replacing the supertype with the subtype. Invocation consistency checking is one of techniques to verify behavioral compatibility between two object types. The technique confirms weather an object type can accept all sequence of operations of the other object type or not. The classical methods rule checks behavioral compatibility by verifying invocation consistency of two object types. The rule argues that subtypes meet behavioral compatibility with supertypes if the subtypes' preconditions of inherited operations are weakened and postconditions are strengthened. Noting that the classical methods rule is not sufficient for checking behavioral compatibility between objects, we propose an extended methods rule on the basis of the classical methods rule. Based on the proposed extended methods rule, we have implemented a tool, BCCT, to automatically check behavioral compatibility between two objects.", "paper_title": "Checking Behavioral Compatibility between Objects by Extending the Methods Rule", "paper_id": "WOS:000293258900011"}