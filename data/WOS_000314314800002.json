{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "applicative_rewrite_systems"}, {"score": 0.004642604455537883, "phrase": "natural_framework"}, {"score": 0.004476399615305783, "phrase": "higher-order_aspects"}, {"score": 0.003964007795174772, "phrase": "untyped_applicative_term_rewrite_systems"}, {"score": 0.00386876598761639, "phrase": "functional_term_rewrite_systems"}, {"score": 0.0031459887611258765, "phrase": "head_variables"}, {"score": 0.003070340620983981, "phrase": "right-hand_sides"}, {"score": 0.0022923586577645143, "phrase": "derivational_complexity"}, {"score": 0.0021049977753042253, "phrase": "dependency_pairs"}], "paper_keywords": ["Term rewriting", " Termination", " Uncurrying"], "paper_abstract": "First-order applicative rewrite systems provide a natural framework for modeling higher-order aspects. In this article we present a transformation from untyped applicative term rewrite systems to functional term rewrite systems that preserves and reflects termination. Our transformation is less restrictive than other approaches. In particular, head variables in right-hand sides of rewrite rules can be handled. To further increase the applicability of our transformation, we study the method for innermost rewriting and derivational complexity, and present a version for dependency pairs.", "paper_title": "Uncurrying for Termination and Complexity", "paper_id": "WOS:000314314800002"}