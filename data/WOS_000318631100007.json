{"auto_keywords": [{"score": 0.026419155679563232, "phrase": "compo"}, {"score": 0.004731928080086235, "phrase": "component-based_software_programming"}, {"score": 0.004491313367627919, "phrase": "component-based_programming"}, {"score": 0.004300133642951283, "phrase": "implementation_stage"}, {"score": 0.004189337956225294, "phrase": "component-based_software_engineering_development_process"}, {"score": 0.0038737214010638745, "phrase": "operational_integration"}, {"score": 0.003773870856027139, "phrase": "inheritance_system"}, {"score": 0.00367658459781873, "phrase": "self-contained_new_component-based_programming_language"}, {"score": 0.003613119346373748, "phrase": "compo."}, {"score": 0.0034291991359158827, "phrase": "related_works"}, {"score": 0.0031431690368229443, "phrase": "full_description"}, {"score": 0.0027822459052173113, "phrase": "component_architecture"}, {"score": 0.0025723630851105304, "phrase": "component_descriptions"}, {"score": 0.002237477619351199, "phrase": "reuse_capabilities"}, {"score": 0.0021987994275190314, "phrase": "expressive_power"}, {"score": 0.0021607883988873492, "phrase": "compo_implementation"}, {"score": 0.0021049977753042253, "phrase": "clear_operational_solution"}], "paper_keywords": ["Languages", " Programming", " Inheritance", " Architectures", " Substitutability"], "paper_abstract": "In the context of Component-based Programming, which addresses the implementation stage of a component-based software engineering development process, this paper describes a specification and an operational integration of an inheritance system into a self-contained new component-based programming language named COMPO. Our proposal completes and extends related works by making it possible to apply inheritance to the full description of components, i.e. both to structural (description of provisions and requirements, of component architecture) and behavioral (full implementations of services) parts in component descriptions. Inheritance in COMPO is designed to be used in conjunction with composition to maximize reuse capabilities and expressive power. COMPO implementation proposes a clear operational solution for inheritance and for achieving and testing substitutions.", "paper_title": "An Inheritance System for Structural & Behavioral Reuse in Component-based Software Programming", "paper_id": "WOS:000318631100007"}