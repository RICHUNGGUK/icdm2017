{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "foster_b-trees"}, {"score": 0.004657185361669812, "phrase": "new_variant"}, {"score": 0.004444921827311577, "phrase": "prior_b-tree_variants"}, {"score": 0.004356926418550194, "phrase": "many-core_processors"}, {"score": 0.004299228562179176, "phrase": "modern_memory_hierarchies"}, {"score": 0.004242291530697285, "phrase": "flash_storage"}, {"score": 0.004186105377259855, "phrase": "nonvolatile_memory"}, {"score": 0.004130660282810338, "phrase": "specific_goals"}, {"score": 0.003968675046544738, "phrase": "minimal_concurrency_control_requirements"}, {"score": 0.0038900709793274484, "phrase": "data_structure"}, {"score": 0.0036390887584943723, "phrase": "new_storage_locations"}, {"score": 0.003449972561293443, "phrase": "continuous_and_comprehensive_self-testing"}, {"score": 0.0031845067058084583, "phrase": "specific_designs"}, {"score": 0.0031422859551159506, "phrase": "transactional_locking"}, {"score": 0.0029394074636168435, "phrase": "write-optimized_b-trees"}, {"score": 0.0027865506182608263, "phrase": "large_writes"}, {"score": 0.002749594350373804, "phrase": "raid"}, {"score": 0.0027131212233443137, "phrase": "flash_devices"}, {"score": 0.002470987929071079, "phrase": "continuous_and_inexpensive_yet_comprehensive_verification"}, {"score": 0.00235813005446246, "phrase": "cross-node_invariants"}, {"score": 0.0023113506171584157, "phrase": "b-tree_structure"}, {"score": 0.0021333110194180997, "phrase": "high_concurrency"}, {"score": 0.0021049977753042253, "phrase": "high_update_rates"}], "paper_keywords": ["Algorithms", " Performance", " Reliability", " Databases", " indexes", " locking", " latching", " Foster B-trees"], "paper_abstract": "Foster B-trees are a new variant of B-trees that combines advantages of prior B-tree variants optimized for many-core processors and modern memory hierarchies with flash storage and nonvolatile memory. Specific goals include: (i) minimal concurrency control requirements for the data structure, (ii) efficient migration of nodes to new storage locations, and (iii) support for continuous and comprehensive self-testing. Like B-link-trees, Foster B-trees optimize latching without imposing restrictions or specific designs on transactional locking, for example, key range locking. Like write-optimized B-trees, and unlike B-link-trees, Foster B-trees enable large writes on RAID and flash devices as well as wear leveling and efficient defragmentation. Finally, they support continuous and inexpensive yet comprehensive verification of all invariants, including all cross-node invariants of the B-tree structure. An implementation and a performance evaluation show that the Foster B-tree supports high concurrency and high update rates without compromising consistency, correctness, or read performance.", "paper_title": "Foster B-Trees", "paper_id": "WOS:000308658900002"}