{"auto_keywords": [{"score": 0.03286840689315868, "phrase": "macocha"}, {"score": 0.00950313858555718, "phrase": "mc"}, {"score": 0.00481495049065317, "phrase": "dephase_change_patterns"}, {"score": 0.0047788144470247785, "phrase": "software_repositories"}, {"score": 0.004695543202451537, "phrase": "largest_part"}, {"score": 0.004590598900125397, "phrase": "maintenance_activities"}, {"score": 0.004376654950855844, "phrase": "new_requirements"}, {"score": 0.004268070459032083, "phrase": "previous_work"}, {"score": 0.004099887902647568, "phrase": "historical_data"}, {"score": 0.0040588838816985615, "phrase": "version_control_systems"}, {"score": 0.003850220635399317, "phrase": "source_code_files"}, {"score": 0.003802135020791801, "phrase": "so-called_change_patterns"}, {"score": 0.00376409764683147, "phrase": "typical_change_dependencies"}, {"score": 0.003588533760251239, "phrase": "macro_co-changes"}, {"score": 0.003447035529485425, "phrase": "large_time_interval"}, {"score": 0.0033277936960179892, "phrase": "macro_co"}, {"score": 0.0030550457477469834, "phrase": "large_programs"}, {"score": 0.0030168610393007905, "phrase": "k-nearest_neighbor_algorithm"}, {"score": 0.0029791521714637704, "phrase": "change_periods"}, {"score": 0.0029345213456072996, "phrase": "hamming_distance"}, {"score": 0.0029124565592269992, "phrase": "approximate_occurrences"}, {"score": 0.002883296103896297, "phrase": "dc."}, {"score": 0.0027834989278619974, "phrase": "umldiff"}, {"score": 0.00268039514204363, "phrase": "seven_systems"}, {"score": 0.0026269730181041136, "phrase": "openser"}, {"score": 0.0025811005461084404, "phrase": "xercesc"}, {"score": 0.00251702050698513, "phrase": "java"}, {"score": 0.0024115257691697954, "phrase": "study_period"}, {"score": 0.002339771435910601, "phrase": "external_information"}, {"score": 0.002328021203887442, "phrase": "static_analysis"}, {"score": 0.0022817658550445766, "phrase": "dc"}, {"score": 0.0021915275079238358, "phrase": "novel_change_patterns"}, {"score": 0.002175037135861406, "phrase": "software_maintenance"}, {"score": 0.002142426911242168, "phrase": "related_costs"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["change pattern", " co-changes", " stability", " change period", " bit vectors"], "paper_abstract": "Software maintenance accounts for the largest part of the costs of any program. During maintenance activities, developers implement changes (sometimes simultaneously) on artifacts in order to fix bugs and to implement new requirements. To reduce this part of the costs, previous work proposed approaches to identify the artifacts of programs that change together. These approaches analyze historical data, mined from version control systems, and report change patterns, which lead at the causes, consequences, and actors of the changes to source code files. They also introduce so-called change patterns that describe some typical change dependencies among files. In this paper, we introduce two novel change patterns: the asynchrony change pattern, corresponding to macro co-changes (MC), that is, of files that co-change within a large time interval (change periods) and the dephase change pattern, corresponding to dephase macro co-changes (DC), that is, MC that always happens with the same shifts in time. We present our approach, that we named Macocha, to identify these two change patterns in large programs. We use the k-nearest neighbor algorithm to group changes into change periods. We also use the Hamming distance to detect approximate occurrences of MC and DC. We apply Macocha and compare its performance in terms of precision and recall with UMLDiff (file stability) and association rules (co-changing files) on seven systems: ArgoUML, FreeBSD, JFreeChart, Openser, SIP, XalanC, and XercesC developed with three different languages (C, C++, and Java). These systems have a size ranging from 532 to 1693 files, and during the study period, they have undergone 1555 to 23,944 change commits. We use external information and static analysis to validate (approximate) MC and DC found by Macocha. Through our case study, we show the existence and usefulness of these novel change patterns to ease software maintenance and, potentially, reduce related costs. Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Detecting asynchrony and dephase change patterns by mining software repositories", "paper_id": "WOS:000330799000005"}