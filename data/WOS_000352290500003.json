{"auto_keywords": [{"score": 0.048186916426953504, "phrase": "slow_memory"}, {"score": 0.012747515886420143, "phrase": "retrieval_cost"}, {"score": 0.010167075884281805, "phrase": "rejection_penalty"}, {"score": 0.008453755945760958, "phrase": "competitive_ratio"}, {"score": 0.007661431526797858, "phrase": "lower_bound"}, {"score": 0.00481495049065317, "phrase": "online_file_caching"}, {"score": 0.004795585480947173, "phrase": "rejection_penalties"}, {"score": 0.004757087682427765, "phrase": "file_caching_problem"}, {"score": 0.0043533862892678864, "phrase": "total_size"}, {"score": 0.0038728990904778678, "phrase": "requested_file"}, {"score": 0.0038573081851680656, "phrase": "well-known_special_cases"}, {"score": 0.00368244449205404, "phrase": "weighted_paging"}, {"score": 0.003501322813520807, "phrase": "bit_model"}, {"score": 0.003229815147800001, "phrase": "new_online_variant"}, {"score": 0.002720553675035286, "phrase": "objective_function"}, {"score": 0.0026932247685847246, "phrase": "total_rejection_penalty"}, {"score": 0.0026769590212547055, "phrase": "total_retrieval_cost"}, {"score": 0.002607598760956807, "phrase": "deterministic_and_randomized_algorithms"}, {"score": 0.002560632987796542, "phrase": "randomized_algorithm"}, {"score": 0.0024993218789131437, "phrase": "constant_factor"}, {"score": 0.0024792120066870287, "phrase": "deterministic_case"}, {"score": 0.0024642355970277497, "phrase": "k-competitive_algorithm"}, {"score": 0.0023714585469099066, "phrase": "best_possible_competitive_ratios"}, {"score": 0.0022960389383143306, "phrase": "deterministic_algorithm"}, {"score": 0.0021049977753042253, "phrase": "fault_models"}], "paper_keywords": ["Caching", " Paging", " Online algorithms"], "paper_abstract": "In the file caching problem, the input is a sequence of requests for files out of a slow memory. A file has two attributes, a positive retrieval cost and an integer size. An algorithm is required to maintain a cache of size k such that the total size of files stored in the cache never exceeds k. Given a request for a file that is not present in the cache at the time of request, the file must be brought from the slow memory into the cache, possibly evicting other files from the cache. This incurs a cost equal to the retrieval cost of the requested file. Well-known special cases include paging (all costs and sizes are equal to 1), the cost model, which is also known as weighted paging, (all sizes are equal to 1), the fault model (all costs are equal to 1), and the bit model (the cost of a file is equal to its size). If bypassing is allowed, a miss for a file still results in an access to this file in the slow memory, but its subsequent insertion into the cache is optional. We study a new online variant of caching, called caching with rejection. In this variant, each request for a file has a rejection penalty associated with the request. The penalty of a request is given to the algorithm together with the request. When a file that is not present in the cache is requested, the algorithm must either bring the file into the cache, paying the retrieval cost of the file, or reject the file, paying the rejection penalty of the request. The objective function is the sum of total rejection penalty and the total retrieval cost. This problem generalizes both caching and caching with bypassing. We design deterministic and randomized algorithms for this problem. The competitive ratio of the randomized algorithm is O(logk), and this is optimal up to a constant factor. In the deterministic case, a k-competitive algorithm for caching, and a (k+1)-competitive algorithm for caching with bypassing are known. Moreover, these are the best possible competitive ratios. In contrast, we present a lower bound of 2k+1 on the competitive ratio of any deterministic algorithm for the variant with rejection. The lower bound is valid already for paging. We design a (2k+2)-competitive algorithm for caching with rejection. We also design a different (2k+1)-competitive algorithm, that can be used for paging and for caching in the bit and fault models.", "paper_title": "Online File Caching with Rejection Penalties", "paper_id": "WOS:000352290500003"}