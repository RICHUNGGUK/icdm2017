{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "impact_rules"}, {"score": 0.0325619721924893, "phrase": "class_methods"}, {"score": 0.03221043383127255, "phrase": "class_fields"}, {"score": 0.02780969133526292, "phrase": "modified_entity"}, {"score": 0.004761494044422926, "phrase": "different_change"}, {"score": 0.00465634671242413, "phrase": "analysis._software_change_impact_analysis"}, {"score": 0.004604664855809924, "phrase": "cia"}, {"score": 0.004502943680955863, "phrase": "key_technique"}, {"score": 0.004428139418750855, "phrase": "unpredicted_and_potential_effects"}, {"score": 0.00423465514675998, "phrase": "different_changes"}, {"score": 0.004187614134377688, "phrase": "different_ripple_effects"}, {"score": 0.004027031316965272, "phrase": "even_some_changes"}, {"score": 0.0036826452656927877, "phrase": "modified_one"}, {"score": 0.003405472159599442, "phrase": "static_cia_technique"}, {"score": 0.003293142761521425, "phrase": "different_change_types"}, {"score": 0.003220315882881027, "phrase": "change_effects"}, {"score": 0.0031140747752837826, "phrase": "changed_classes"}, {"score": 0.002911961514073769, "phrase": "potentially_affected_classes"}, {"score": 0.002800158709933889, "phrase": "precision_improvement"}, {"score": 0.0027535633837592597, "phrase": "cia_technique"}, {"score": 0.0024620842899061614, "phrase": "precise_initial_impact"}, {"score": 0.002341164727388946, "phrase": "final_impact"}, {"score": 0.002238664219600659, "phrase": "experimental_case_studies"}, {"score": 0.0021049977753042253, "phrase": "software_maintenance"}], "paper_keywords": ["Change impact analysis", " initial impact set", " impact rules", " change types", " object oriented class and member dependency graph"], "paper_abstract": "Software change impact analysis (CIA) is a key technique for identifying unpredicted and potential effects caused by changes made to software. Different changes have different ripple effects to other parts in the program, even some changes do not affect other entities in spite of some dependencies existing between these entities and the modified one. This induces imprecision if such a factor is neglected. This article proposes a static CIA technique which considers the impact rules of different change types to predict the change effects. Input of our CIA includes changed classes, class methods and class fields, and the output is composed of potentially affected classes, class methods, and class fields. Precision improvement of the CIA technique relies on three aspects: change types of a modified entity, dependencies between the modified entity and other entities, and a precise initial impact set (IIS), on which the final impact set (FIS) is computed. Experimental case studies demonstrate the effectiveness of our technique, and present its potential applications in software maintenance.", "paper_title": "ANALYZING IMPACT RULES OF DIFFERENT CHANGE TYPES TO SUPPORT CHANGE IMPACT ANALYSIS", "paper_id": "WOS:000321584800001"}