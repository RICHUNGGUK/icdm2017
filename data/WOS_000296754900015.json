{"auto_keywords": [{"score": 0.048949445942657245, "phrase": "java"}, {"score": 0.03750018654538236, "phrase": "amm"}, {"score": 0.00481495049065317, "phrase": "automatic_memory_management_for_embedded"}, {"score": 0.004568525347438891, "phrase": "embedded_real-time_areas"}, {"score": 0.004482063543727601, "phrase": "control_system"}, {"score": 0.004054169947971483, "phrase": "java's_execution_engine"}, {"score": 0.00401560412621627, "phrase": "embedded_real-time_applications"}, {"score": 0.003597514862052876, "phrase": "automatic_memory_management"}, {"score": 0.00349577373145384, "phrase": "embedded_real-time_java_processor"}, {"score": 0.003348513474852869, "phrase": "instruction_level_support"}, {"score": 0.0033166399217959, "phrase": "amm."}, {"score": 0.00311669276800628, "phrase": "run-time_efficiency"}, {"score": 0.0030140547908298404, "phrase": "worst-case_execution_time"}, {"score": 0.002873247913129334, "phrase": "class_area"}, {"score": 0.0028053237950173508, "phrase": "optimized_design"}, {"score": 0.002739001004969201, "phrase": "effective_support"}, {"score": 0.0027129118211250336, "phrase": "space_checking"}, {"score": 0.002687070469080394, "phrase": "garbage_collection_scheduling"}, {"score": 0.002598543802992702, "phrase": "object_reference_format"}, {"score": 0.002316532084420729, "phrase": "suitable_garbage_collection_algorithm"}, {"score": 0.002176747110119268, "phrase": "runtime_environment"}, {"score": 0.0021560018573288666, "phrase": "embedded_java_processor"}, {"score": 0.0021049977753042253, "phrase": "suitable_improved_generational_garbage_collector"}], "paper_keywords": ["memory management", " garbage collector", " Java processor", " real-time Java", " embedded system", " intelligent automation"], "paper_abstract": "Currently, Java has been gradually applied in embedded real-time areas like robotics, control system, etc. owning to its advantages like robustness, security, etc. In order to improve the performance of Java's execution engine for embedded real-time applications, JPOR-32, an embedded real-time Java processor, is designed. Based on it, this paper presents the automatic memory management (AMM) mechanism for embedded real-time Java processor. JPOR-32 provides architectural support as well as instruction level support for AMM. Its preprocessing mechanism reduces the complexity of the implementation of AMM, enhances the run-time efficiency, and promotes predictability of the worst-case execution time. The system design of JPOR-32 makes AMM of class area avoided, and the optimized design of instruction set provides effective support for space checking and garbage collection scheduling. This paper also proposes an object reference format which provides supports for objects tracing, heap scanning, synchronization, etc., and lays the foundation for the implementation of suitable garbage collection algorithm. Moreover, this paper gives the analysis of the feature of runtime environment of embedded Java processor, and implements a suitable improved generational garbage collector.", "paper_title": "AUTOMATIC MEMORY MANAGEMENT FOR EMBEDDED REAL-TIME JAVA PROCESSOR JPOR-32", "paper_id": "WOS:000296754900015"}