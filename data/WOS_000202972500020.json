{"auto_keywords": [{"score": 0.03711522701821289, "phrase": "flow_analysis"}, {"score": 0.00481495049065317, "phrase": "variant_parametric_types"}, {"score": 0.0047113960612140335, "phrase": "promising_approach"}, {"score": 0.004643594260262632, "phrase": "type-safe_generic_codes"}, {"score": 0.004543708337879809, "phrase": "object-oriented_paradigm"}, {"score": 0.004478308876320956, "phrase": "variant_parametric_type"}, {"score": 0.004016782710006123, "phrase": "formalise_variant_type"}, {"score": 0.00393032656248792, "phrase": "special_case"}, {"score": 0.0038457240885563146, "phrase": "existential_type_system"}, {"score": 0.0036026484429137998, "phrase": "new_framework"}, {"score": 0.0034742854447532678, "phrase": "modular_type_checking"}, {"score": 0.0033748847621075536, "phrase": "simple_but_accurate_model"}, {"score": 0.0033021988455635403, "phrase": "generic_types"}, {"score": 0.002940095976373734, "phrase": "subtyping_constraints"}, {"score": 0.002754103864198219, "phrase": "variant_types"}, {"score": 0.00269475174341129, "phrase": "special_reflection_mechanism"}, {"score": 0.0025059724686541263, "phrase": "unknown_types"}, {"score": 0.0023990982005125763, "phrase": "constraint-based_type_checker"}, {"score": 0.0021670777282518424, "phrase": "java_libraries"}, {"score": 0.002135812692862058, "phrase": "client_code"}], "paper_keywords": ["design", " languages", " theory", " verification", " genericity", " flow analysis", " variant parametric types", " subtyping", " constraints"], "paper_abstract": "A promising approach for type-safe generic codes in the object-oriented paradigm is variant parametric type, which allows covariant and contravariant subtyping on fields where appropriate. Previous approaches formalise variant type as a special case of the existential type system. In this paper, we present a new framework based on flow analysis and modular type checking to provide a simple but accurate model for capturing generic types. Our scheme stands to benefit from past (and future) advances in flow analysis and subtyping constraints. Furthermore, it fully supports casting for variant types with a special reflection mechanism, called cast capture, to handle objects with unknown types. We have built a constraint-based type checker and have proven its soundness. We have also successfully annotated a suite of Java libraries and client code with our flow-based variant type system.", "paper_title": "A flow-based approach for variant parametric types", "paper_id": "WOS:000202972500020"}