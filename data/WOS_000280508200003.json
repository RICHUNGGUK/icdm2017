{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "logic_programs"}, {"score": 0.04940203756018457, "phrase": "infinite_lists"}, {"score": 0.033872379767201054, "phrase": "perfect_model_semantics"}, {"score": 0.0037789720824759503, "phrase": "infinite_behavior"}, {"score": 0.003725470458263889, "phrase": "reactive_systems"}, {"score": 0.0035189057079817285, "phrase": "infinite_sequences"}, {"score": 0.002780783274864117, "phrase": "new_rules"}, {"score": 0.002480680078868508, "phrase": "general_methodology"}, {"score": 0.0024281181691350085, "phrase": "program_transformation"}, {"score": 0.0021352776064254195, "phrase": "buchi_automata"}, {"score": 0.0021049977753042253, "phrase": "omega-regular_languages"}], "paper_keywords": ["program transformation", " program verification", " infinite lists"], "paper_abstract": "We consider an extension of logic programs, called omega-programs, that can be used to define predicates over infinite lists. omega-programs allow us to specify properties of the infinite behavior of reactive systems and, in general, properties of infinite sequences of events. The semantics of omega-programs is an extension of the perfect model semantics. We present variants of the familiar unfold/fold rules which can be used for transforming omega-programs. We show that these new rules are correct, that is, their application preserves the perfect model semantics. Then we outline a general methodology based on program transformation for verifying properties of omega-programs. We demonstrate the power of our transformation-based verification methodology by proving some properties of Buchi automata and omega-regular languages.", "paper_title": "Transformations of logic programs on infinite lists", "paper_id": "WOS:000280508200003"}