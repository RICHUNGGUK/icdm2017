{"auto_keywords": [{"score": 0.036291393707227046, "phrase": "multi-bank_memory"}, {"score": 0.014485609560573565, "phrase": "data-alignment_problems"}, {"score": 0.011777403324020738, "phrase": "single-bank_memory"}, {"score": 0.010435409021063343, "phrase": "multi-port_memory"}, {"score": 0.00481495049065317, "phrase": "simd_processor"}, {"score": 0.00475254914916922, "phrase": "multi-bank_memory_unit"}, {"score": 0.004550300345169981, "phrase": "intensive_programs"}, {"score": 0.004375613460102577, "phrase": "data-alignment_problem"}, {"score": 0.004300133642951283, "phrase": "extra_time_overhead"}, {"score": 0.004225950334493496, "phrase": "automatic_vectorization"}, {"score": 0.00417115038996633, "phrase": "simd_compiler"}, {"score": 0.0037087324991876727, "phrase": "simd_architecture"}, {"score": 0.0033262524445013303, "phrase": "unaligned_accesses"}, {"score": 0.0032263862712733934, "phrase": "bank-conflict_limitation"}, {"score": 0.00303553181618577, "phrase": "quite_much_expensive_hardware"}, {"score": 0.002957222630196853, "phrase": "vectorizing_compiler"}, {"score": 0.002906138793910919, "phrase": "dynamic_memory_allocation"}, {"score": 0.002880927789104712, "phrase": "simd_code_generation"}, {"score": 0.002652039172817654, "phrase": "experimental_results"}, {"score": 0.002347378595930709, "phrase": "multimedia_system"}, {"score": 0.002218054404179068, "phrase": "best_performance"}, {"score": 0.0021607883988873492, "phrase": "impractical_improvement"}, {"score": 0.0021049977753042253, "phrase": "hardware_cost"}], "paper_keywords": ["SIMD processor", " On-chip memory", " Multi-bank memory", " Vectorizing compiler", " Data allocation"], "paper_abstract": "The single instruction multiple data (SIMD) architecture is very efficient for executing arithmetic intensive programs, but frequently suffers from data-alignment problems. The data-alignment problem not only induces extra time overhead but also hinders automatic vectorization of the SIMD compiler. In this paper, we compare three on-chip memory systems, which are single-bank, multi-bank, and multi-port, for the SIMD architecture to resolve the data-alignment problems. The single-bank memory is the simplest, but supports only the aligned accesses. The multi-bank memory requires a little higher complexity, but enables the unaligned accesses and the stride accesses with a bank-conflict limitation. The multi-port memory is capable of both the unaligned and stride accesses without any restriction, but needs quite much expensive hardware. We also developed a vectorizing compiler that can conduct dynamic memory allocation and SIMD code generation. The performances of the three memory systems with our SIMD compiler are evaluated using several digital signal processing kernels and the MPEG2 encoder. The experimental results show that the multi-bank memory can carry out MPEG2 encoding 5.8 times faster, whereas the single-bank memory only achieves 2.9 times speed-up when employed in a multimedia system with a 2-issue host processor and an 8-way SIMD coprocessor. The multi-port memory obviously shows the best performance, which is however an impractical improvement over the multi-bank memory when the hardware cost is considered.", "paper_title": "Compiler-Based Performance Evaluation of an SIMD Processor with a Multi-Bank Memory Unit", "paper_id": "WOS:000267367200010"}