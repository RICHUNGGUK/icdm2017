{"auto_keywords": [{"score": 0.015586480634730926, "phrase": "aspectj-based_idioms"}, {"score": 0.00481495049065317, "phrase": "flexible_feature_binding"}, {"score": 0.004712463245074863, "phrase": "software_product_lines"}, {"score": 0.004552981066668676, "phrase": "reusable_features"}, {"score": 0.0044369056710423065, "phrase": "different_times"}, {"score": 0.003949974260471287, "phrase": "feature_activation"}, {"score": 0.0037348894128879082, "phrase": "memory_consumption"}, {"score": 0.003592859432554987, "phrase": "aspect-oriented_programming"}, {"score": 0.003441352119167824, "phrase": "clear_separation"}, {"score": 0.0034118234596993836, "phrase": "invariable_code"}, {"score": 0.003382547312072468, "phrase": "variable_code"}, {"score": 0.003296212583539166, "phrase": "recent_work"}, {"score": 0.0031032109441552287, "phrase": "design_deficiencies"}, {"score": 0.0027503564589458837, "phrase": "five_different_product_lines"}, {"score": 0.0025780912201045555, "phrase": "code_cloning"}, {"score": 0.0024586427394152196, "phrase": "software_metrics"}, {"score": 0.0023346234464901978, "phrase": "code_reusability"}, {"score": 0.002294686545883412, "phrase": "instrumentation_overhead"}, {"score": 0.0022457226013538343, "phrase": "feature_interaction"}, {"score": 0.0021049977753042253, "phrase": "existing_ones"}], "paper_keywords": ["Software Product Lines", " Aspect-Oriented Programming", " Idioms", " Flexible Feature Binding"], "paper_abstract": "In Software Product Lines (SPL), we can bind reusable features to compose a product at different times, which in general are static or dynamic. The former allows customizability without any overhead at runtime. On the other hand, the latter allows feature activation or deactivation while running the application with the cost of performance and memory consumption. To implement features, we might use aspect-oriented programming (AOP), in which aspects enable a clear separation between invariable code and variable code. In this context, recent work provides AspectJ-based idioms to implement flexible feature binding. However, we identified some design deficiencies. Thus, to solve the issues of these idioms, we incrementally create three AspectJ-based idioms. We apply these idioms to provide flexible binding for 16 features from five different product lines. Moreover, to evaluate our idioms, we quantitatively analyze them with respect to code cloning, scattering, tangling, and size by means of software metrics. Besides that, we qualitatively discuss our idioms in terms of code reusability, changeability, instrumentation overhead, behavior, and feature interaction. In conclusion, we show evidences that our idioms address the issues of those existing ones.", "paper_title": "Flexible Feature Binding with AspectJ-based Idioms", "paper_id": "WOS:000339391100006"}