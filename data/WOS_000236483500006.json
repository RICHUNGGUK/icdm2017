{"auto_keywords": [{"score": 0.03914199969466458, "phrase": "service_station"}, {"score": 0.00481495049065317, "phrase": "sorting_buffers"}, {"score": 0.004725385523804256, "phrase": "sorting_buffers_problem"}, {"score": 0.004551199992546761, "phrase": "manufacturing_processes"}, {"score": 0.004494570360108983, "phrase": "computer_science"}, {"score": 0.004301834610818624, "phrase": "servers_architecture"}, {"score": 0.003587235362628753, "phrase": "random-access_sorting_buffer"}, {"score": 0.0034118234596993836, "phrase": "new_item"}, {"score": 0.0025569530630374995, "phrase": "minimum_type_transitions"}, {"score": 0.0024014759148123736, "phrase": "different_sizes"}, {"score": 0.002371531125700046, "phrase": "type_transitions"}, {"score": 0.0023419588513908783, "phrase": "different_costs"}], "paper_keywords": [""], "paper_abstract": "The Sorting Buffers problem is motivated by many applications in manufacturing processes and computer science, among them car-painting and file servers architecture. The input is a sequence of items of various types. All the items must be processed, one by one, by a service station. We are given a random-access sorting buffer with a limited capacity. Whenever a new item arrives it may be moved directly to the service station or stored in the buffer. Also, at any time items can be removed from the buffer and assigned to the service station. Our goal is to give the service station a sequence of items with minimum type transitions. We generalize the problem to allow items with different sizes and type transitions with different costs. We give a polynomial-time 9-approximation algorithm for the maximization variant of this problem, which improves the best previously known 20-approximation algorithm.", "paper_title": "Exploiting locality: Approximating sorting buffers", "paper_id": "WOS:000236483500006"}