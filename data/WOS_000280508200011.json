{"auto_keywords": [{"score": 0.03859150608353858, "phrase": "asp"}, {"score": 0.00481495049065317, "phrase": "non-ground_answer-set_programs"}, {"score": 0.004611554879923759, "phrase": "broader_acceptance"}, {"score": 0.004555028829645471, "phrase": "answer-set_programming"}, {"score": 0.004152502093643003, "phrase": "coding_phase"}, {"score": 0.004001593118269276, "phrase": "answer-set_program"}, {"score": 0.003880017219275826, "phrase": "crucial_step"}, {"score": 0.0037621210719690594, "phrase": "initial_work"}, {"score": 0.0035808664384880213, "phrase": "propositional_programs"}, {"score": 0.003515162360861593, "phrase": "practical_debuggers"}, {"score": 0.0031649018957020337, "phrase": "debugging_technique"}, {"score": 0.0030497740719977835, "phrase": "non-ground_programs"}, {"score": 0.0029937855454238507, "phrase": "previous_work"}, {"score": 0.0029027394930867902, "phrase": "central_debugging_question"}, {"score": 0.0025495426598675583, "phrase": "meta-programming_technique"}, {"score": 0.002487296495786493, "phrase": "uniform_encoding"}, {"score": 0.0024416087858984644, "phrase": "debugging_request"}, {"score": 0.0022670785913397637, "phrase": "comparison_predicates"}, {"score": 0.002239225269052105, "phrase": "integer_arithmetics"}, {"score": 0.0021710766932077994, "phrase": "relevant_language_class"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_asp_solvers"}], "paper_keywords": ["answer-set programming", " program analysis", " debugging"], "paper_abstract": "An important issue towards a broader acceptance of answer-set programming (ASP) is the deployment of tools which support the programmer during the coding phase. In particular, methods for debugging an answer-set program are recognised as a crucial step in this regard. Initial work on debugging in ASP mainly focused on propositional programs, yet practical debuggers need to handle programs with variables as well. In this paper, we discuss a debugging technique that is directly geared towards non-ground programs. Following previous work, we address the central debugging question why some interpretation is not an answer set. The explanations provided by our method are computed by means of a meta-programming technique, using a uniform encoding of a debugging request in terms of ASP itself. Our method also permits programs containing comparison predicates and integer arithmetics, thus covering a relevant language class commonly supported by all state-of-the-art ASP solvers.", "paper_title": "Catching the Ouroboros: On debugging non-ground answer-set programs", "paper_id": "WOS:000280508200011"}