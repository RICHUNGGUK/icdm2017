{"auto_keywords": [{"score": 0.04653478165971171, "phrase": "linear_block_code"}, {"score": 0.00481495049065317, "phrase": "adaptive_cut_generation_algorithm"}, {"score": 0.004771672073078768, "phrase": "improved_linear_programming_decoding"}, {"score": 0.004728780808284175, "phrase": "binary_linear_codes"}, {"score": 0.0043793594257092805, "phrase": "equivalent_ml_integer_programming"}, {"score": 0.0041862533092401994, "phrase": "lp"}, {"score": 0.004037370832877034, "phrase": "box_constraints"}, {"score": 0.003929391999210588, "phrase": "linear_inequalities"}, {"score": 0.0036224139706218916, "phrase": "parity-check_matrix"}, {"score": 0.003309278541665552, "phrase": "new_necessary_condition"}, {"score": 0.00326469463991041, "phrase": "new_sufficient_condition"}, {"score": 0.003220709449062307, "phrase": "violated_parity_inequality_constraint"}, {"score": 0.0030505976034245234, "phrase": "unit_hypercube"}, {"score": 0.002955533639862811, "phrase": "new_and_effective_algorithm"}, {"score": 0.002915701586760994, "phrase": "parity_inequalities"}, {"score": 0.002850534725402992, "phrase": "rpc"}, {"score": 0.002724428781940696, "phrase": "lp_decoder"}, {"score": 0.0026514708899935333, "phrase": "decoder_error-rate_performance"}, {"score": 0.0026157259734105, "phrase": "cut-generating_algorithm"}, {"score": 0.0025572160146590623, "phrase": "specific_transformation"}, {"score": 0.002522738549524317, "phrase": "initial_parity-check_matrix"}, {"score": 0.002400241288973103, "phrase": "proposed_decoder"}, {"score": 0.0022733662000757318, "phrase": "new_cut-generating_algorithm"}, {"score": 0.0021434588322608653, "phrase": "proposed_decoding_algorithms"}, {"score": 0.0021049977753042253, "phrase": "performance_gap"}], "paper_keywords": ["Iterative decoding", " linear codes", " linear programming (LP) decoding", " low-density parity-check (LDPC) codes", " maximum-likelihood (ML) decoding", " pseudocodewords"], "paper_abstract": "Linear programming (LP) decoding approximates maximum-likelihood (ML) decoding of a linear block code by relaxing the equivalent ML integer programming (IP) problem into a more easily solved LP problem. The LP problem is defined by a set of box constraints together with a set of linear inequalities called \"parity inequalities\" that are derived from the constraints represented by the rows of a parity-check matrix of the code and can be added iteratively and adaptively. In this paper, we first derive a new necessary condition and a new sufficient condition for a violated parity inequality constraint, or \"cut,\" at a point in the unit hypercube. Then, we propose a new and effective algorithm to generate parity inequalities derived from certain additional redundant parity check (RPC) constraints that can eliminate pseudocodewords produced by the LP decoder, often significantly improving the decoder error-rate performance. The cut-generating algorithm is based upon a specific transformation of an initial parity-check matrix of the linear block code. We also design two variations of the proposed decoder to make it more efficient when it is combined with the new cut-generating algorithm. Simulation results for several low-density parity-check (LDPC) codes demonstrate that the proposed decoding algorithms significantly narrow the performance gap between LP decoding and ML decoding.", "paper_title": "Adaptive Cut Generation Algorithm for Improved Linear Programming Decoding of Binary Linear Codes", "paper_id": "WOS:000308965600021"}