{"auto_keywords": [{"score": 0.03249223992321251, "phrase": "system_scenarios"}, {"score": 0.00481495049065317, "phrase": "adaptive_loop_caching"}, {"score": 0.004717723626157272, "phrase": "lightweight_runtime_control_flow_analysis"}, {"score": 0.004622450915803531, "phrase": "loop_caches"}, {"score": 0.004483120978156604, "phrase": "effective_method"}, {"score": 0.004347972379250724, "phrase": "memory_hierarchy_energy_consumption"}, {"score": 0.004216880725292, "phrase": "frequently_executed_code"}, {"score": 0.003807684498435389, "phrase": "level_one_cache"}, {"score": 0.003581412258960711, "phrase": "code_structure_restrictions"}, {"score": 0.003509006038574667, "phrase": "costly_design_time_pre-analysis_efforts"}, {"score": 0.0029196116767956273, "phrase": "adaptive_loop_cache"}, {"score": 0.0027459678326877744, "phrase": "wider_range"}, {"score": 0.0021705796895687864, "phrase": "next_best_loop_cache"}, {"score": 0.0021049977753042253, "phrase": "preloaded_loop_cache"}], "paper_keywords": ["Design", " Loop cache", " low energy", " architecture tuning", " embedded systems", " filter cache"], "paper_abstract": "Loop caches provide an effective method for decreasing memory hierarchy energy consumption by storing frequently executed code (critical regions) in a more energy efficient structure than the level one cache. However, due to code structure restrictions or costly design time pre-analysis efforts, previous loop cache designs are not suitable for all applications and system scenarios. We present an adaptive loop cache that is amenable to a wider range of system scenarios, which can provide an additional 20% average instruction cache energy savings (with individual benchmark energy savings as high as 69%) compared to the next best loop cache, the preloaded loop cache.", "paper_title": "Adaptive Loop Caching Using Lightweight Runtime Control Flow Analysis", "paper_id": "WOS:000209492400004"}