{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "software_defect_prediction"}, {"score": 0.035057193597185, "phrase": "cost_information"}, {"score": 0.03339450904352144, "phrase": "feature_selection_stage"}, {"score": 0.004602773636967002, "phrase": "software_modules"}, {"score": 0.004556901872357751, "phrase": "defect-prone_and_not-defect-prone_categories"}, {"score": 0.004377921202912336, "phrase": "high_quality_software_systems"}, {"score": 0.004122490120202936, "phrase": "lower_misclassification_costs"}, {"score": 0.00396050388346298, "phrase": "defect-prone_modules"}, {"score": 0.00392100783796804, "phrase": "not-defect-prone_ones"}, {"score": 0.003766908559075843, "phrase": "not-defect-prone_modules"}, {"score": 0.0034940519373446335, "phrase": "new_two-stage_cost-sensitive_learning"}, {"score": 0.0033905751207490703, "phrase": "sdp"}, {"score": 0.003240895431893266, "phrase": "classification_stage"}, {"score": 0.0027602925235474317, "phrase": "laplacian_score"}, {"score": 0.002509284173541882, "phrase": "traditional_feature_selection_algorithms"}, {"score": 0.0024717881264735477, "phrase": "proposed_methods"}, {"score": 0.002362620540317279, "phrase": "nasa_projects"}, {"score": 0.0023390219342052623, "phrase": "experimental_results"}, {"score": 0.0022810491620483737, "phrase": "better_performance"}, {"score": 0.002224510044064184, "phrase": "existing_single-stage_cost-sensitive_classifiers"}, {"score": 0.0021262403223013242, "phrase": "proposed_cost-sensitive_feature_selection_methods"}, {"score": 0.0021049977753042253, "phrase": "traditional_cost-blind_feature_selection_methods"}], "paper_keywords": ["Cost-sensitive learning", " feature selection", " software defect prediction"], "paper_abstract": "Software defect prediction (SDP), which classifies software modules into defect-prone and not-defect-prone categories, provides an effective way to maintain high quality software systems. Most existing SDP models attempt to attain lower classification error rates other than lower misclassification costs. However, in many real-world applications, misclassifying defect-prone modules as not-defect-prone ones usually leads to higher costs than misclassifying not-defect-prone modules as defect-prone ones. In this paper, we first propose a new two-stage cost-sensitive learning (TSCS) method for SDP, by utilizing cost information not only in the classification stage but also in the feature selection stage. Then, specifically for the feature selection stage, we develop three novel cost-sensitive feature selection algorithms, namely, Cost-Sensitive Variance Score (CSVS), Cost-Sensitive Laplacian Score (CSLS), and Cost-Sensitive Constraint Score (CSCS), by incorporating cost information into traditional feature selection algorithms. The proposed methods are evaluated on seven real data sets from NASA projects. Experimental results suggest that our TSCS method achieves better performance in software defect prediction compared to existing single-stage cost-sensitive classifiers. Also, our experiments show that the proposed cost-sensitive feature selection methods outperform traditional cost-blind feature selection methods, validating the efficacy of using cost information in the feature selection stage.", "paper_title": "Two-Stage Cost-Sensitive Learning for Software Defect Prediction", "paper_id": "WOS:000338111400023"}