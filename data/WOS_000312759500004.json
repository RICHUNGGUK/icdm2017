{"auto_keywords": [{"score": 0.04960106550769509, "phrase": "current_software_life_cycles"}, {"score": 0.00481495049065317, "phrase": "academic_and_industrial_research"}, {"score": 0.004610058444728656, "phrase": "knowledge_transfer"}, {"score": 0.004564021871465994, "phrase": "important_responsibility"}, {"score": 0.004503350877279651, "phrase": "research_institutes"}, {"score": 0.004326113419290302, "phrase": "software_engineering"}, {"score": 0.004141936429360251, "phrase": "popular_technologies"}, {"score": 0.004100555318595827, "phrase": "middleware_systems"}, {"score": 0.00400559360117678, "phrase": "scholarly_analysis"}, {"score": 0.0038867116254051363, "phrase": "mainstream_activities"}, {"score": 0.0037713445867641393, "phrase": "methodological_research"}, {"score": 0.0037087324991876727, "phrase": "widespread_use"}, {"score": 0.003598629227969919, "phrase": "manageable_bounds"}, {"score": 0.0032328778271536454, "phrase": "different_forms"}, {"score": 0.002973120121800634, "phrase": "historical_essays"}, {"score": 0.002953261517737546, "phrase": "people_movement"}, {"score": 0.0028179057379595124, "phrase": "mentioned_activities"}, {"score": 0.0027710786693798534, "phrase": "trace_diagram"}, {"score": 0.002743355746391485, "phrase": "indirect_influence"}, {"score": 0.0026618355977665745, "phrase": "selected_activities"}, {"score": 0.002644050667977234, "phrase": "software_life_cycles"}, {"score": 0.0025313026089662165, "phrase": "analysed_methodological_research"}, {"score": 0.0022434880661725493, "phrase": "large_development_projects"}, {"score": 0.002184101477091303, "phrase": "best_results"}, {"score": 0.0021477840826122853, "phrase": "industrial_research"}, {"score": 0.0021049977753042253, "phrase": "academic_research"}], "paper_keywords": ["Knowledge transfer", " History of computing", " Practice of software development", " Standardisation"], "paper_abstract": "Context: Knowledge transfer is an important responsibility of universities and research institutes as part of their contribution to society. In the field of software engineering, several studies have been performed to show the influence of research in popular technologies such as middleware systems. However, there is no scholarly analysis of the influence that research has had in mainstream activities of current software life cycles. Objective: We analyse how methodological research has influenced activities of widespread use in current software life cycles. To keep this goal into manageable bounds, we focus on four very successful trends of current practice: iterative development, architecture-centric development, requirements-driven development, and coherent method integration. Method: We follow different forms of evidence backwards in time. As signs of influence we admit the following categories: citations included in papers and standards, interviews, historical essays, people movement, and acquisitions of companies. Results: For each one of the mentioned activities, we obtain a trace diagram showing the indirect influence that pieces of research have had in the selected activities of software life cycles. Conclusions: Our results support the following claims: (1) mainstream dissemination of the analysed methodological research has taken on the order of 20-40 years; (2) interdisciplinarity has been important in the research that influenced some very popular activities of current software life cycles; (3) research on life cycles is more influential when it originates from large development projects; and (4) probably the best results can be obtained if industrial research goes hand in hand with academic research. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "How influential has academic and industrial research been in current software life cycles? A retrospective analysis of four mainstream activities", "paper_id": "WOS:000312759500004"}