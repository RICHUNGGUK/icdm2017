{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "attribute"}, {"score": 0.045523051651969654, "phrase": "distributed_transactions"}, {"score": 0.004675930527604869, "phrase": "service_oriented_computing"}, {"score": 0.004307569753106432, "phrase": "dynamically_reconfigurable_systems"}, {"score": 0.0040622852274783275, "phrase": "transactional_behaviours"}, {"score": 0.0039449104968131655, "phrase": "failure_propagation"}, {"score": 0.0038989120088094185, "phrase": "dynamic_system_reconfiguration"}, {"score": 0.0037201996003549246, "phrase": "formal_model"}, {"score": 0.003633927813203731, "phrase": "service_oriented_architectures"}, {"score": 0.003487721546598799, "phrase": "attribute_mechanisms"}, {"score": 0.0033083305481779453, "phrase": "atc"}, {"score": 0.003175175896313016, "phrase": "transactional_calculus"}, {"score": 0.0029766550209309127, "phrase": "service_declarations"}, {"score": 0.002890557197908352, "phrase": "transactional_attribute"}, {"score": 0.0028069426877159664, "phrase": "service_invocation"}, {"score": 0.0027417911324611917, "phrase": "invoked_service"}, {"score": 0.0026313840069327713, "phrase": "transactional_scopes"}, {"score": 0.002540285736232122, "phrase": "type_system"}, {"score": 0.00249592321829865, "phrase": "well-typed_atc_systems"}, {"score": 0.0024379730432321656, "phrase": "run-time_errors"}, {"score": 0.002353554841514325, "phrase": "transactional_mechanisms"}, {"score": 0.002258745901862197, "phrase": "testing_framework"}, {"score": 0.0021049977753042253, "phrase": "reasonable_conditions"}], "paper_keywords": [""], "paper_abstract": "We present a theory for the design and verification of distributed transactions in dynamically reconfigurable systems. Despite several formal approaches have been proposed to study distributed transactional behaviours, the inter-relations between failure propagation and dynamic system reconfiguration still need investigation. We propose a formal model for transactions in service oriented architectures (SOAs) inspired by the attribute mechanisms of the Java Transaction API. Technically, we model services in ATc (after 'Attribute-based Transactional calculus'), a CCS-like process calculus where service declarations are decorated with a transactional attribute. Such attribute disciplines, upon service invocation, how the invoked service is executed with respect to the transactional scopes of the invoker. A type system ensures that well-typed ATc systems do not exhibit run-time errors due to misuse of the transactional mechanisms. Finally, we define a testing framework for distributed transactions in SOAs based on ATc and prove that under reasonable conditions some attributes are observationally indistinguishable.", "paper_title": "Attribute-based transactions in service oriented computing", "paper_id": "WOS:000348369900005"}