{"auto_keywords": [{"score": 0.049027569260597086, "phrase": "web_applications"}, {"score": 0.008939750086735905, "phrase": "runtime_checking"}, {"score": 0.00481495049065317, "phrase": "web_application_vulnerabilities"}, {"score": 0.004751216062917875, "phrase": "session_data_dependencies"}, {"score": 0.004251728624599691, "phrase": "implementation_vulnerabilities"}, {"score": 0.003821503621554738, "phrase": "important_research_challenge"}, {"score": 0.003737485125097945, "phrase": "software_engineering_and_security_engineering"}, {"score": 0.0035590664550919854, "phrase": "implementation_vulnerability"}, {"score": 0.003329368827624161, "phrase": "erroneous_behavior"}, {"score": 0.0031845067058084583, "phrase": "malicious_user"}, {"score": 0.0031422859551159506, "phrase": "attack_techniques"}, {"score": 0.0031006232333900055, "phrase": "forceful_browsing"}, {"score": 0.002952516738708181, "phrase": "runtime_errors"}, {"score": 0.0029133627624098064, "phrase": "broken_dependencies"}, {"score": 0.0028875481626754696, "phrase": "session_data"}, {"score": 0.002824005136794786, "phrase": "proposed_solution"}, {"score": 0.0027989800906333784, "phrase": "development-time_program_annotation"}, {"score": 0.0026652435674846095, "phrase": "broken_data_dependencies"}, {"score": 0.0025950024597986366, "phrase": "prototype_implementation"}, {"score": 0.002515384834484012, "phrase": "jml_annotation_language"}, {"score": 0.0021716540012278744, "phrase": "fully_automatic_static_verification"}, {"score": 0.0021049977753042253, "phrase": "performance_overhead"}], "paper_keywords": ["software/program verification", " security", " reliability", " data sharing", " Web-based services", " Web technologies"], "paper_abstract": "Web applications are widely adopted and their correct functioning is mission critical for many businesses. At the same time, Web applications tend to be error prone and implementation vulnerabilities are readily and commonly exploited by attackers. The design of countermeasures that detect or prevent such vulnerabilities or protect against their exploitation is an important research challenge for the fields of software engineering and security engineering. In this paper, we focus on one specific type of implementation vulnerability, namely, broken dependencies on session data. This vulnerability can lead to a variety of erroneous behavior at runtime and can easily be triggered by a malicious user by applying attack techniques such as forceful browsing. This paper shows how to guarantee the absence of runtime errors due to broken dependencies on session data in Web applications. The proposed solution combines development-time program annotation, static verification, and runtime checking to provably protect against broken data dependencies. We have developed a prototype implementation of our approach, building on the JML annotation language and the existing static verification tool ESC/Java2, and we successfully applied our approach to a representative J2EE-based e-commerce application. We show that the annotation overhead is very small, that the performance of the fully automatic static verification is acceptable, and that the performance overhead of the runtime checking is limited.", "paper_title": "Provable protection against web application vulnerabilities related to session data dependencies", "paper_id": "WOS:000253375500005"}