{"auto_keywords": [{"score": 0.042403964177784984, "phrase": "next_component"}, {"score": 0.004837531808291194, "phrase": "time"}, {"score": 0.004491970050862321, "phrase": "new_look"}, {"score": 0.00443000995237127, "phrase": "time-varying_distributed_h_systems"}, {"score": 0.003964007795174772, "phrase": "language_definition"}, {"score": 0.003749654338704576, "phrase": "computational_completeness"}, {"score": 0.0035468507553681034, "phrase": "time-varying_h_systems"}, {"score": 0.0033317342432676385, "phrase": "usual_definition"}, {"score": 0.003285725064532174, "phrase": "splicing_systems"}, {"score": 0.003217896008931311, "phrase": "next_generation"}, {"score": 0.0030226700832113942, "phrase": "existing_strings"}, {"score": 0.0029602552900111407, "phrase": "newly_created_strings"}, {"score": 0.0024026156525362684, "phrase": "new_strings"}, {"score": 0.0022883734727569298, "phrase": "existing_ones"}, {"score": 0.0022101055924375725, "phrase": "current_one"}], "paper_keywords": ["DNA computing", " molecular computing", " splicing systems"], "paper_abstract": "We cast a new look on time-varying distributed H systems. In their original definition, where only new strings are passed to the next component, this language definition in itself is already enough to obtain computational completeness. Here, we consider two types of time-varying H systems with weaker language definitions, based on the usual definition of splicing systems: The next generation of strings consists of the union of all existing strings and the newly created strings. We show that if all strings, both old and new, are passed to the next component these systems are regular in power. If however, the new strings pass to the next component and the existing ones remain accessible to the current one, we prove that systems with 4 components are already computationally complete.", "paper_title": "Time-varying H systems revisited", "paper_id": "WOS:000243998400005"}