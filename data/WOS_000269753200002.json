{"auto_keywords": [{"score": 0.04827337430415872, "phrase": "xml_documents"}, {"score": 0.03641062883629123, "phrase": "keyword_queries"}, {"score": 0.03301702102989929, "phrase": "minimal-cost_trees"}, {"score": 0.00481495049065317, "phrase": "effective_and_progressive_top-k_keyword_search"}, {"score": 0.004480196733208298, "phrase": "research_attention"}, {"score": 0.004394910907549057, "phrase": "keyword_query"}, {"score": 0.00429057323623293, "phrase": "lowest_common_ancestors"}, {"score": 0.004148631410346188, "phrase": "xml_elements"}, {"score": 0.004069631519385246, "phrase": "input_keywords"}, {"score": 0.003608732492631878, "phrase": "rich_structural_relationships"}, {"score": 0.0033737457695128233, "phrase": "novel_method"}, {"score": 0.0033254272509978325, "phrase": "sail"}, {"score": 0.0032308006242867224, "phrase": "efficient_xml_keyword_search"}, {"score": 0.003034916887102753, "phrase": "structure-aware_indices"}, {"score": 0.002977061391551628, "phrase": "structural_relationships"}, {"score": 0.0027965187255008647, "phrase": "top-k_answers"}, {"score": 0.002716915166374506, "phrase": "link-based_relevance_ranking"}, {"score": 0.002690886043654469, "phrase": "keyword-pair-based_ranking"}, {"score": 0.0026268961477241026, "phrase": "index_size"}, {"score": 0.0025644240336018045, "phrase": "numbering_scheme"}, {"score": 0.0023857603808363527, "phrase": "real_data_sets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["XML keyword search", " Minimal-cost trees", " Structure-aware indices", " Relevance ranking", " Keyword-pair-based ranking", " Schema-aware dewey code"], "paper_abstract": "Keyword search in XML documents has recently gained a lot of research attention. Given a keyword query, existing approaches first compute the lowest common ancestors (LCAs) or their variants of XML elements that contain the input keywords. and then identify the sub-trees rooted at the LCAs as the answer. In this the paper we study how to use the rich structural relationships embedded in XML documents to facilitate the processing of keyword queries. We develop a novel method, called SAIL, to index such structural relationships for efficient XML keyword search. We propose the concept of minimal-cost trees to answer keyword queries and devise structure-aware indices to maintain the structural relationships for efficiently identifying the minimal-cost trees. For effectively and progressively identifying the top-k answers, we develop techniques using link-based relevance ranking and keyword-pair-based ranking. To reduce the index size, we incorporate a numbering scheme, namely schema-aware dewey code, into our structure-aware indices. Experimental results on real data sets show that our method outperforms state-of-the-art approaches significantly, in both answer quality and search efficiency. (c) 2009 Elsevier Inc. All rights reserved.", "paper_title": "SAIL: Structure-aware indexing for effective and progressive top-k keyword search over XML documents", "paper_id": "WOS:000269753200002"}