{"auto_keywords": [{"score": 0.004342430078306461, "phrase": "experimental_programming_language"}, {"score": 0.004093453936415085, "phrase": "graph_transformation"}, {"score": 0.003916098498242888, "phrase": "initial_interpreter"}, {"score": 0.003531474887552889, "phrase": "functional_language_haskell"}, {"score": 0.0033288399506044763, "phrase": "concise_and_simply_structured_reference_implementation"}, {"score": 0.00266693888510356, "phrase": "comparative_investigation"}, {"score": 0.0024768883044869023, "phrase": "test_programs"}], "paper_keywords": [""], "paper_abstract": "GP 2 is an experimental programming language for computing by graph transformation. An initial interpreter for GP 2, written in the functional language Haskell, provides a concise and simply structured reference implementation. Despite its simplicity, the performance of the interpreter is sufficient for the comparative investigation of a range of test programs. It also provides a platform for the development of more sophisticated implementations.", "paper_title": "A Reference Interpreter for the Graph Programming Language GP 2", "paper_id": "WOS:000367334700004"}