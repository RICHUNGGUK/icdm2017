{"auto_keywords": [{"score": 0.04625336728938103, "phrase": "cots"}, {"score": 0.00481495049065317, "phrase": "cots_peripherals"}, {"score": 0.0047051051659828275, "phrase": "embedded_systems"}, {"score": 0.004329916183121203, "phrase": "mass-produced_peripherals"}, {"score": 0.003966162568548304, "phrase": "cots-interconnect_systems"}, {"score": 0.003787108326100196, "phrase": "severe_timing_degradation"}, {"score": 0.0035498822293046884, "phrase": "internal_priority-based_scheduling_mechanism"}, {"score": 0.003358368814209542, "phrase": "high_priority_tasks"}, {"score": 0.0032665093519968083, "phrase": "low_priority_tasks"}, {"score": 0.0030476702431093687, "phrase": "real-time_bridges"}, {"score": 0.002883172383460653, "phrase": "proposed_framework"}, {"score": 0.0027528751037412128, "phrase": "cots-based_embedded_system"}, {"score": 0.0026899455459275575, "phrase": "real-time_scheduling"}, {"score": 0.002640636493247601, "phrase": "timing_unpredictability"}, {"score": 0.0024750474634399797, "phrase": "maximum_delay"}, {"score": 0.0023741093119014436, "phrase": "buffer_size"}, {"score": 0.0023305762840188145, "phrase": "data_loss"}, {"score": 0.002164264600379492, "phrase": "single_physical_device"}], "paper_keywords": ["Real-time", " Linux", " input/output", " peripheral", " bus", " scheduling", " COTS"], "paper_abstract": "Real-time embedded systems are increasingly being built using commercial-off-the-shelf (COTS) components such as mass-produced peripherals and buses to reduce costs, time-to-market, and increase performance. Unfortunately, COTS-interconnect systems do not usually guarantee timeliness, and might experience severe timing degradation in the presence of high-bandwidth I/O peripherals. Moreover, peripherals do not implement any internal priority-based scheduling mechanism, hence, sharing a device can result in data of high priority tasks being delayed by data of low priority tasks. To address these problems, we designed a real-time I/O management system comprised of 1) real-time bridges with I/O virtualization capabilities, and 2) a peripheral scheduler. The proposed framework is used to transparently put the I/O subsystem of a COTS-based embedded system under the discipline of real-time scheduling, minimizing the timing unpredictability due to the peripherals sharing the bus. We also discuss computing the maximum delay due to buffered I/O data transactions as well as determining the buffer size needed to avoid data loss. Finally, we demonstrate experimentally that our prototype real-time I/O management system successfully exports multiple virtual devices for a single physical device and prioritizes I/O traffic, guaranteeing its timeliness.", "paper_title": "Real-Time I/O Management System with COTS Peripherals", "paper_id": "WOS:000311846200004"}