{"auto_keywords": [{"score": 0.035729029000976936, "phrase": "running_time"}, {"score": 0.015719716506582538, "phrase": "stream_cipher"}, {"score": 0.004676175448142357, "phrase": "biham"}, {"score": 0.004642105942777571, "phrase": "seberry"}, {"score": 0.004541377162789232, "phrase": "ecrypt_stream_cipher_competition"}, {"score": 0.004175006647851034, "phrase": "high_speed_software_applications"}, {"score": 0.003981106369547929, "phrase": "pentium_iii"}, {"score": 0.0038804410204616954, "phrase": "statistical_bias"}, {"score": 0.002992313172550772, "phrase": "data_requirement"}, {"score": 0.0028116863172018593, "phrase": "later_rounds"}, {"score": 0.002622647280008795, "phrase": "single_round"}, {"score": 0.002565626044684815, "phrase": "py_specification"}, {"score": 0.002437339565360659, "phrase": "ideally_secure_stream_cipher"}, {"score": 0.002290135975651888, "phrase": "academic_break"}], "paper_keywords": [""], "paper_abstract": "The stream cipher Py designed by Biham and Seberry is a submission to the ECRYPT stream cipher competition. The cipher is based on two large arrays (one is 256 bytes and the other is 1040 bytes) and it is designed for high speed software applications (Py is more than 2.5 times faster than the RC4 on Pentium III). The paper shows a statistical bias in the distribution of its output-words at the 1st and 3rd rounds. Exploiting this weakness, a distinguisher with advantage greater than 50% is constructed that requires 2(84.7) randomly chosen key/IV's and the first 24 output bytes for each key. The running time and the data required by the distinguisher are t(ini) . 2(84.7) and 2(89.2) respectively (t(ini) denotes the running time of the key/IV setup). We further show that the data requirement can be reduced by a factor of about 3 with a distinguisher that considers outputs of later rounds. In such case the running time is reduced to t(r) ; 2(84.7) (t(r) denotes the time for a single round of Py). The Py specification allows a 256-bit key and a keystream of 2(64) bytes per key/IV. As an ideally secure stream cipher with the above specifications should be able to resist the attacks described before, our results constitute an academic break of Py. In addition we have identified several biases among pairs of bits; it seems possible to combine all the biases to build more efficient distinguishers.", "paper_title": "Distinguishing attacks on the stream cipher Py", "paper_id": "WOS:000239471600026"}