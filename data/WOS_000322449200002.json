{"auto_keywords": [{"score": 0.04819593306799231, "phrase": "large_dependence_clusters"}, {"score": 0.004515655183335171, "phrase": "source_code"}, {"score": 0.00440825801245188, "phrase": "diverse_range"}, {"score": 0.004167451906343558, "phrase": "programming_languages"}, {"score": 0.0032753168662834516, "phrase": "linchpin_vertices"}, {"score": 0.0030468495296763617, "phrase": "correctness_properties"}, {"score": 0.002974281028713475, "phrase": "algorithm's_primary_innovations"}, {"score": 0.0027667539384678814, "phrase": "empirical_study"}, {"score": 0.0026577673946415583, "phrase": "analysis_time"}, {"score": 0.0024133533748653033, "phrase": "almost_half_a_million_lines"}, {"score": 0.0022630008787375435, "phrase": "almost_two_orders"}, {"score": 0.0021049977753042253, "phrase": "larger_programs"}], "paper_keywords": ["Algorithms", " Performance", " Slicing", " internal representation", " performance enhancement", " empirical study"], "paper_abstract": "Several authors have found evidence of large dependence clusters in the source code of a diverse range of systems, domains, and programming languages. This raises the question of how we might efficiently locate the fragments of code that give rise to large dependence clusters. We introduce an algorithm for the identification of linchpin vertices, which hold together large dependence clusters, and prove correctness properties for the algorithm's primary innovations. We also report the results of an empirical study concerning the reduction in analysis time that our algorithm yields over its predecessor using a collection of 38 programs containing almost half a million lines of code. Our empirical findings indicate improvements of almost two orders of magnitude, making it possible to process larger programs for which it would have previously been impractical.", "paper_title": "Efficient Identification of Linchpin Vertices in Dependence Clusters", "paper_id": "WOS:000322449200002"}