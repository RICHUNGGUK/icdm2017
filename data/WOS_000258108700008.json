{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "unnecessary_branch_predictor_lookups"}, {"score": 0.04436828137594863, "phrase": "dynamic_branch_predictor"}, {"score": 0.004734448316824488, "phrase": "low-power_processor_architecture"}, {"score": 0.004539005582217309, "phrase": "power_consumption"}, {"score": 0.0041368477098209, "phrase": "btb"}, {"score": 0.003932654396285872, "phrase": "instruction_cycle"}, {"score": 0.0038343546245999285, "phrase": "branch_instructions"}, {"score": 0.0037070855410818986, "phrase": "small_percentage"}, {"score": 0.003584025547693836, "phrase": "program_execution"}, {"score": 0.003407026489727146, "phrase": "novel_method"}, {"score": 0.0032938942910948096, "phrase": "next_branch_distances"}, {"score": 0.0032115093493071366, "phrase": "recent_branch_instructions"}, {"score": 0.0028293966058473476, "phrase": "proposed_design"}, {"score": 0.002758597251689795, "phrase": "energy_consumption"}, {"score": 0.002535115422089855, "phrase": "performance_degradation"}, {"score": 0.002471661547432869, "phrase": "proposed_method"}, {"score": 0.002369417104819248, "phrase": "bpp"}, {"score": 0.0023296961971785357, "phrase": "sepas"}, {"score": 0.002214509493223105, "phrase": "ppd"}, {"score": 0.002104998402294156, "phrase": "eib"}], "paper_keywords": ["branch prediction", " BTB", " lookup filtering", " low power", " pipelined processor"], "paper_abstract": "Efforts to reduce power consumption of processors have gained much attention recently. Dynamic branch predictor, including BTB, is exercised in every instruction cycle, yet branch instructions only constitute a small percentage of instructions during program execution. This study proposes a novel method to collect the next branch distances of the recent branch instructions at runtime, in order to eliminate unnecessary branch predictor lookups. Simulation results show that the proposed design reduces the energy consumption in the dynamic branch predictor by an average of 56.95% without performance degradation. The proposed method is fully compatible with BPP and SEPAS, and saves more energy than PPD, Lazy BTB, and EIB does.", "paper_title": "Filtering of unnecessary branch predictor lookups for low-power processor architecture", "paper_id": "WOS:000258108700008"}