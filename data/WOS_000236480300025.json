{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "top-down_algorithm"}, {"score": 0.049438579755394736, "phrase": "tree_automata_containment"}, {"score": 0.0046242451772036145, "phrase": "fundamental_operation"}, {"score": 0.004582897918101983, "phrase": "static_verification"}, {"score": 0.004541918674719973, "phrase": "xml_processing_programs"}, {"score": 0.004461051281091779, "phrase": "tree_automata_containment_problem"}, {"score": 0.004059438255358923, "phrase": "practical_cases"}, {"score": 0.00402312553715184, "phrase": "hosoya"}, {"score": 0.003987126862293129, "phrase": "vouillon"}, {"score": 0.003933754674982154, "phrase": "pierce"}, {"score": 0.0037608593980593035, "phrase": "large_class"}, {"score": 0.0037272031155266556, "phrase": "typical_instances"}, {"score": 0.003595552309967789, "phrase": "considerable_inefficiency"}, {"score": 0.0035473867669654174, "phrase": "repeated_calculation"}, {"score": 0.003361069456060196, "phrase": "non-backtracking_top-down_algorithm"}, {"score": 0.003141830113006653, "phrase": "performed_computations"}, {"score": 0.0027575842698911173, "phrase": "dependency_information"}, {"score": 0.0026362590493392785, "phrase": "needless_computation"}, {"score": 0.0022218413146898887, "phrase": "correctness_proof"}, {"score": 0.0021049977753042253, "phrase": "previous_algorithm"}], "paper_keywords": [""], "paper_abstract": "Checking tree automata containment is a fundamental operation in static verification of XML processing programs. However, tree automata containment problem is known to be EXPTIME-complete and a standard algorithm with determinization of automata easily blows up even in practical cases. Hosoya, Vouillon, and Pierce have proposed a top-down algorithm that efficiently works for a large class of typical instances. However, there still remains a considerable inefficiency because of repeated calculation incurred by backtracking. In this paper, we propose a non-backtracking top-down algorithm which improves this inefficiency. In the algorithm, we introduce \"dependencies\" among performed computations and, by exploiting these, we can recover certain kinds of information lost by backtracking. One difficulty in constructing such algorithm is, however, that, since some dependency information can be useless, we may be misled to needless computation by using such information. To alleviate this problem, we carefully check the usefulness of each dependency whenever we use it. Since these checks introduce a subtlety to our algorithm, we rigorously formalize it with a correctness proof. Our preliminary experiments show that our algorithm works more efficiently compared to the previous algorithm.", "paper_title": "Non-backtracking top-down algorithm for checking tree automata containment", "paper_id": "WOS:000236480300025"}