{"auto_keywords": [{"score": 0.033441111085311365, "phrase": "namenode_service"}, {"score": 0.012581837296871849, "phrase": "namenode_machine"}, {"score": 0.007758700099796415, "phrase": "subnamenodes"}, {"score": 0.00481495049065317, "phrase": "job-oriented_load-distribution_scheme"}, {"score": 0.004586531354697466, "phrase": "hdfs._apache_hadoop"}, {"score": 0.004422325007817267, "phrase": "big_data_processing"}, {"score": 0.004238134740341528, "phrase": "hadoop_ecosystem"}, {"score": 0.003988191584871804, "phrase": "hdfs"}, {"score": 0.003775803846431323, "phrase": "single_point"}, {"score": 0.0036627245728600073, "phrase": "hdfs_federation"}, {"score": 0.003618443379266972, "phrase": "hdfs_high_availability"}, {"score": 0.0034465894339710864, "phrase": "significant_cost"}, {"score": 0.0034049123167891955, "phrase": "extra_server_hardware"}, {"score": 0.0029783256772952073, "phrase": "joint_consideration"}, {"score": 0.0029422942175866057, "phrase": "mapreduce_jobs"}, {"score": 0.0028890603352364273, "phrase": "resulting_hdfs_operations"}, {"score": 0.002751751956416832, "phrase": "subnamenode"}, {"score": 0.0026209522797963447, "phrase": "existing_tasktrackers"}, {"score": 0.0024511688853030168, "phrase": "single_namenode"}, {"score": 0.002320449502337321, "phrase": "failure_rate"}, {"score": 0.0021049977753042253, "phrase": "participating_tasktrackers"}], "paper_keywords": ["big data", " cloud computing", " Hadoop", " load distribution", " fault tolerance"], "paper_abstract": "Apache Hadoop has been widely used in big data processing and distributed computations. In the Hadoop ecosystem, data are stored and managed by the Hadoop Distributed File System (HDFS), in which the NameNode machine is a single point of failure. Although HDFS Federation and HDFS High Availability solve the problem, it comes at significant cost of extra server hardware. Therefore, we aim at improving the availability of the NameNode service in a more cost-effective way. The primary innovation is the joint consideration of MapReduce jobs and the resulting HDFS operations. Specifically, we dynamically allocate a SubNameNode for each job in one of the existing TaskTrackers to provide the NameNode service. Since the load of the single NameNode is naturally distributed to the SubNameNodes, the failure rate of the NameNode machine can be reduced. Moreover, with SubNameNodes more local to the participating TaskTrackers, TaskTrackers can access the NameNode service more efficiently.", "paper_title": "A job-oriented load-distribution scheme for cost-effective NameNode service in HDFS", "paper_id": "WOS:000345247400002"}