{"auto_keywords": [{"score": 0.049648703742940906, "phrase": "user-defined_type_qualifiers"}, {"score": 0.004816066146888616, "phrase": "inference"}, {"score": 0.004644146045859622, "phrase": "previous_work"}, {"score": 0.0045404698551856125, "phrase": "new_approach"}, {"score": 0.00439918275666155, "phrase": "existing_types"}, {"score": 0.004300951511110487, "phrase": "additional_properties"}, {"score": 0.003965061486705487, "phrase": "static_typechecking"}, {"score": 0.0035898158129721003, "phrase": "qualifier's_intended_run-time_invariant"}, {"score": 0.0033393377529146893, "phrase": "clarity."}, {"score": 0.0030644247579222333, "phrase": "qualifier_inference"}, {"score": 0.0029959082125682918, "phrase": "user-defined_rules"}, {"score": 0.002889444701599236, "phrase": "conditional_set_constraints"}, {"score": 0.0027741761880779535, "phrase": "explicitly_annotating_programs"}, {"score": 0.0025572160146590623, "phrase": "qualifier_designers"}, {"score": 0.002389403849342894, "phrase": "rule_inference"}, {"score": 0.0022940626581735707, "phrase": "clarity"}, {"score": 0.0021049977753042253, "phrase": "open-source_c_programs"}], "paper_keywords": [""], "paper_abstract": "In previous work, we described a new approach to supporting user-defined type qualifiers, which augment existing types to specify and check additional properties of interest. For each qualifier, users define a set of rules that are enforced during static typechecking of programs. Separately, these rules are automatically validated with respect to a user-defined predicate that formalizes the qualifier's intended run-time invariant. We instantiated this approach as a framework for user-defined type qualifiers in C programs, called CLARITY. In this paper, we extend our earlier approach by resolving two usability issues. First, we show how to perform qualifier inference in the presence of user-defined rules by generating and solving a system of conditional set constraints, thereby relieving users of the burden of explicitly annotating programs. Second, we show how to automatically infer rules that respect a given user-defined invariant, thereby relieving qualifier designers of the burden of manually producing such rules. We have formalized both qualifier and rule inference and proven their correctness. We have also extended CLARITY to support qualifier and rule inference, and we illustrate their utility in practice through experiments with several type qualifiers and open-source C programs.", "paper_title": "Inference of user-defined type qualifiers and qualifier rules", "paper_id": "WOS:000236905200018"}