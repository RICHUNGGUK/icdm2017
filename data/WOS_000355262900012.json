{"auto_keywords": [{"score": 0.046493513028499536, "phrase": "model_checking"}, {"score": 0.041996689288621714, "phrase": "state_space_explosion"}, {"score": 0.00481495049065317, "phrase": "automated_refutation"}, {"score": 0.0047810714349158165, "phrase": "complex_software_systems"}, {"score": 0.0047306971679760175, "phrase": "graph_transformations"}, {"score": 0.004647911247507267, "phrase": "best_approaches"}, {"score": 0.004598933498016774, "phrase": "software_systems"}, {"score": 0.004392565073466714, "phrase": "reachable_states"}, {"score": 0.004315670715009727, "phrase": "initial_state"}, {"score": 0.004151188559520802, "phrase": "desirable_patterns"}, {"score": 0.0035159043158639633, "phrase": "state_space"}, {"score": 0.0033579708256295847, "phrase": "efficient_solution"}, {"score": 0.0032991276152705934, "phrase": "complex_systems"}, {"score": 0.003264316172836322, "phrase": "graph_transformation"}, {"score": 0.003229870860371533, "phrase": "meta-heuristic_algorithms"}, {"score": 0.0028944757265206332, "phrase": "existing_model_checking_approaches"}, {"score": 0.002764379205581817, "phrase": "particle_swarm_optimization"}, {"score": 0.0024947959375982614, "phrase": "hybrid_algorithm"}, {"score": 0.0024772445123143736, "phrase": "pso"}, {"score": 0.002425164812943394, "phrase": "gsa"}, {"score": 0.002391067964886602, "phrase": "proposed_approach"}, {"score": 0.002357477100892665, "phrase": "groove"}, {"score": 0.0022835460368487233, "phrase": "graph_transformation_systems"}, {"score": 0.0022434880661725493, "phrase": "improved_results"}, {"score": 0.002180848602315088, "phrase": "memory_usage"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Model checking", " Refutation", " PSO", " GSA", " Graph transformation system", " State space explosion"], "paper_abstract": "One of the best approaches for verifying software systems (especially safety critical systems) is the model checking in which all reachable states are generated from an initial state. All of these states are searched for errors or desirable patterns. However, the drawback for many real and complex systems is the state space explosion in which model checking cannot generate all the possible states. In this situation, designers can use refutation to check refusing a property rather than proving it. In refutation, it is very important to handle the state space for finding errors efficiently. In this paper, we propose an efficient solution to implement refutation in complex systems modeled by graph transformation. Since meta-heuristic algorithms are efficient solutions for searching in the problems with very large state spaces, we use them to find errors (e.g., deadlocks) in systems which cannot be verified through existing model checking approaches due to the state space explosion. To do so, we employ a Particle Swarm Optimization (PSO) algorithm to consider only a subset of states (called population) in each step of the algorithm. To increase the accuracy, we propose a hybrid algorithm using PSO and Gravitational Search Algorithm (GSA). The proposed approach is implemented in GROOVE, a toolset for designing and model checking graph transformation systems. The experiments show improved results in terms of accuracy, speed and memory usage in comparison with other existing approaches. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "A meta-heuristic solution for automated refutation of complex software systems specified through graph transformations", "paper_id": "WOS:000355262900012"}