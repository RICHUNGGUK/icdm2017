{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "scalable_high_performance_computing"}, {"score": 0.004544919390397046, "phrase": "new_dynan-fic_reconfiguration_strategy"}, {"score": 0.004355645393953418, "phrase": "data_size"}, {"score": 0.004303023184313407, "phrase": "cornputational_entities"}, {"score": 0.004061584718427419, "phrase": "dynanaic_changes"}, {"score": 0.004036968488559984, "phrase": "resource_availability"}, {"score": 0.004000322474812552, "phrase": "archilecture-aware_manner"}, {"score": 0.0038923605771735838, "phrase": "multiple_processors"}, {"score": 0.00386876598761639, "phrase": "diverse_memory_hierarchies"}, {"score": 0.003845313870879042, "phrase": "heterogeneous_environments"}, {"score": 0.003810400966372849, "phrase": "modular_internet"}, {"score": 0.003531474887552889, "phrase": "astronomical_modeling"}, {"score": 0.0034887749053459584, "phrase": "maximuni-likelihood_applications"}, {"score": 0.00342568771304873, "phrase": "salsa_programming_language"}, {"score": 0.003223494720348768, "phrase": "partial_differential_equations"}, {"score": 0.0031748333717241456, "phrase": "distributed_simulations"}, {"score": 0.0031269043024513567, "phrase": "heat_application"}, {"score": 0.003051713660488494, "phrase": "mpi._algorithms"}, {"score": 0.00303319936111073, "phrase": "concurrent_data_redistribution"}, {"score": 0.0028367868542874737, "phrase": "tested_environments"}, {"score": 0.002661146838358236, "phrase": "previous_work"}, {"score": 0.0026129863248033807, "phrase": "dynamically_reconfigurable_applications"}, {"score": 0.0025039656549083497, "phrase": "component_migration"}, {"score": 0.0024736587129641652, "phrase": "dynamic_cluster_environment"}, {"score": 0.002414138203828421, "phrase": "ongoing_research_effort"}, {"score": 0.002285389120812562, "phrase": "distributed_environments"}, {"score": 0.0022715134070706174, "phrase": "grid_computing_environments"}, {"score": 0.0022101055924375725, "phrase": "new_demands"}, {"score": 0.0021966859554037174, "phrase": "applications'_adaptive_behavior"}, {"score": 0.0021372966835847564, "phrase": "key_aspect"}, {"score": 0.00211785847468134, "phrase": "effective_dynamic_reconfiguration"}, {"score": 0.0021049977753042253, "phrase": "iterative_applications"}], "paper_keywords": ["high performance computing", " malleability", " dynamic reconfiguration", " MPI", " SALSA", " actors"], "paper_abstract": "Iterative applications are known to run as slow as their slowest computational component. This paper introduces malleability, a new dynan-fic reconfiguration strategy to overcome this limitation. Malleability is the ability to dynamically change the data size and number of cornputational entities in an application. Malleability can be used by middleware to autonomously reconfigure an application in response to dynanaic changes in resource availability in an archilecture-aware manner, allowing applications to optimize the use of multiple processors and diverse memory hierarchies in heterogeneous environments. The modular Internet Operating System (10S) was extended to reconfigure applications autonomously Using malleability. Two different iterative applications were made malleable. The first is used in astronomical modeling and representative of maximuni-likelihood applications was made malleable in the SALSA programming language. The second models the diffusion of heat over a two dimensional object, and is representative of applications such as partial differential equations and some types of distributed simulations. Versions of the heat application were rnade malleable both in SALSA and MPI. Algorithms for concurrent data redistribution are given for each type of application. Results show that using malleability for reconfiguration is 10 to 100 times faster on the tested environments. The algorithms are also shown to be highly scalable with respect to the quantity of data involved. While previous work has shown the utility of dynamically reconfigurable applications using only cornputational component migration, malleability is shown to provide LIP to a 15% speedup over component migration alone oil a dynamic cluster environment. This work is part of an ongoing research effort to enable applications to be highly reconfigurable and autonomously modifiable by middleware in order to efficiently utilize distributed environments. Grid computing environments are becoming increasingly heterogeneous and dynamic, placing new demands on applications' adaptive behavior. This work shows that malleability is a key aspect in enabling effective dynamic reconfiguration of iterative applications in these environments.", "paper_title": "Malleable applications for scalable high performance computing", "paper_id": "WOS:000249052900007"}