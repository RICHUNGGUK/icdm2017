{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "sequence_pair"}, {"score": 0.04284446828228854, "phrase": "criterion_value"}, {"score": 0.033344757901345196, "phrase": "sp_evaluation"}, {"score": 0.004700193486903964, "phrase": "electronic_design_automation_field"}, {"score": 0.004478782833067256, "phrase": "problem_instances"}, {"score": 0.004293584349522444, "phrase": "discrete_changes"}, {"score": 0.004216566615939546, "phrase": "foundational_significance"}, {"score": 0.004165987300206134, "phrase": "efficient_updates"}, {"score": 0.004042166795461166, "phrase": "dynamic_updates"}, {"score": 0.0031941384895530426, "phrase": "fully_dynamic_algorithm"}, {"score": 0.0029351141718104725, "phrase": "sp_elements"}, {"score": 0.0028477727736832283, "phrase": "element_weights"}, {"score": 0.0027298319171606498, "phrase": "new_data_structure"}, {"score": 0.002680789041160613, "phrase": "predecessor_problem"}, {"score": 0.002600995957987461, "phrase": "whole_history"}, {"score": 0.002419025278429845, "phrase": "union-find_problem"}, {"score": 0.0023470051993423483, "phrase": "predecessor_queries"}, {"score": 0.002318799760022913, "phrase": "numerical_experiments"}, {"score": 0.0022497569011987587, "phrase": "linear-time_behavior"}], "paper_keywords": ["Evaluation algorithm", " fully dynamic algorithm", " sequence pair"], "paper_abstract": "In the electronic design automation field, as well as in other areas, problem instances and solutions are often subject to discrete changes. The foundational significance of efficient updates of the criterion value after dynamic updates, instead of recomputing it from scratch each time, has attracted a lot of research. In this paper, motivated by the significance of the sequence pair (SP) representation for floorplanning, we develop a fully dynamic algorithm of SP evaluation, that efficiently updates a criterion value after insertions and deletions of SP elements and after modifications of element weights. Our result is based on a new data structure for the predecessor problem, which maintains the whole history of its dynamic modifications, and the path-compression technique from the union-find problem, which efficiently support predecessor queries. Numerical experiments showed that our algorithm exhibits linear-time behavior and considerably reduces the time of SP evaluation, compared to other approaches.", "paper_title": "Fully Dynamic Evaluation of Sequence Pair", "paper_id": "WOS:000319187100008"}