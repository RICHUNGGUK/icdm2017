{"auto_keywords": [{"score": 0.049707293588616405, "phrase": "local_memory"}, {"score": 0.006875051801540045, "phrase": "memory_access_patterns"}, {"score": 0.00481495049065317, "phrase": "opencl_kernels"}, {"score": 0.004685375117376838, "phrase": "increasing_complexity"}, {"score": 0.004523865550323285, "phrase": "scratch-pad_memories"}, {"score": 0.0044192837023190445, "phrase": "different_memory_access_patterns"}, {"score": 0.004087756756529841, "phrase": "main_causes"}, {"score": 0.004040211152784802, "phrase": "performance_variability"}, {"score": 0.003946766004066276, "phrase": "memory_system"}, {"score": 0.0038404642251010797, "phrase": "empirical_evaluation"}, {"score": 0.0036791522245326514, "phrase": "performance_impact"}, {"score": 0.0034029588672379926, "phrase": "application-agnostic_manner"}, {"score": 0.0032220148724914867, "phrase": "portability_reasons"}, {"score": 0.0028325548627901004, "phrase": "typically_used_multi-core_and_many-core_platforms"}, {"score": 0.002681859084438076, "phrase": "local_memory_performance_database"}, {"score": 0.0025292620341476283, "phrase": "composing_rules"}, {"score": 0.0025095811903520274, "phrase": "multiple_maps"}, {"score": 0.0023300677028248776, "phrase": "multiple_memory_access_patterns"}, {"score": 0.002129818297734379, "phrase": "rough_prediction"}, {"score": 0.0021049977753042253, "phrase": "performance_gain"}], "paper_keywords": ["Micro-benchmarking", " local memory", " memory access pattern", " OpenCL"], "paper_abstract": "Due to the increasing complexity of multi/many-core architectures (with their mix of caches and scratch-pad memories) and applications (with different memory access patterns), the performance of many workloads becomes increasingly variable. In this work, we address one of the main causes for this performance variability: the efficiency of the memory system. Specifically, based on an empirical evaluation driven by memory access patterns, we qualify and partially quantify the performance impact of using local memory in multi/many-core processors. To do so, we systematically describe memory access patterns (MAPs) in an application-agnostic manner. Next, for each identified MAP, we use OpenCL (for portability reasons) to generate two microbenchmarks: a \"naive\" version (without local memory) and \"an optimized\" version (using local memory). We then evaluate both of them on typically used multi-core and many-core platforms, and we log their performance. What we eventually obtain is a local memory performance database, indexed by various MAPs and platforms. Further, we propose a set of composing rules for multiple MAPs. Thus, we can get an indicator of whether using local memory is beneficial in the presence of multiple memory access patterns. This indication can be used to either avoid the hassle of implementing optimizations with too little gain or, alternatively, give a rough prediction of the performance gain.", "paper_title": "Aristotle: A performance impact indicator for the OpenCL kernels using local memory", "paper_id": "WOS:000338983100004"}