{"auto_keywords": [{"score": 0.04114630058440895, "phrase": "right_arrow"}, {"score": 0.00481495049065317, "phrase": "continuously_moving_points"}, {"score": 0.004717325943509345, "phrase": "mobile_cell_phones"}, {"score": 0.004605917942709477, "phrase": "mobile_robots"}, {"score": 0.004543436145505023, "phrase": "common_property"}, {"score": 0.0044209926093642235, "phrase": "kinematic_representation"}, {"score": 0.0041149859710361125, "phrase": "moving_point"}, {"score": 0.003688773272422118, "phrase": "start_location"}, {"score": 0.003613899384402803, "phrase": "start_time"}, {"score": 0.003195414285736136, "phrase": "object's_behavior"}, {"score": 0.0030356410934402503, "phrase": "function_coefficients"}, {"score": 0.0028252518377336953, "phrase": "spatial_query_results"}, {"score": 0.002702363975375762, "phrase": "efficient_algorithms"}, {"score": 0.0026747708876640377, "phrase": "k-nearest_neighbor"}, {"score": 0.002647458797373923, "phrase": "spatial_join_queries"}, {"score": 0.0025236349164549877, "phrase": "previous_knowledge"}, {"score": 0.002397370428991875, "phrase": "new_algorithms"}, {"score": 0.002285216591220303, "phrase": "synthetic_uniformly_distributed_data"}, {"score": 0.002215897810312801, "phrase": "primary_metric"}, {"score": 0.002126725585391261, "phrase": "query_results"}, {"score": 0.0021049977753042253, "phrase": "supporting_data_structures"}], "paper_keywords": ["algorithms", " design", " experimentation", " measurement", " performance", " theory", " moving object databases", " temporal databases", " materialized view maintenance", " k-nearest neighbor", " spatial join", " continuously moving objects"], "paper_abstract": "Cars, aircraft, mobile cell phones, ships, tanks, and mobile robots all have the common property that they are moving objects. A kinematic representation can be used to describe the location of these objects as a function of time. For example, a moving point can be represented by the function p(t) = (x(0)) over right arrow + (t - t(0))(v) over right arrow, where (x(0)) over right arrow is the start location, t(0) is the start time, and (v) over right arrow is its velocity vector. Instead of storing the location of the object at a given time in a database, the coefficients of the function are stored. When an object's behavior changes enough so that the function describing its location is no longer accurate, the function coefficients for the object are updated. Because the location of each object is represented as a function of time, spatial query results can change even when no transactions update the database. We present efficient algorithms to maintain k-nearest neighbor, and spatial join queries in this domain as time advances and updates occur. We assume no previous knowledge of what the updates will be before they occur. We experimentally compare these new algorithms with more straight forward adaptations of previous work to support updates. Experiments are conducted using synthetic uniformly distributed data, and real aircraft flight data. The primary metric of comparison is the number of I/O disk accesses needed to maintain the query results and the supporting data structures.", "paper_title": "Maintenance of K-nn and spatial join queries on continuously moving points", "paper_id": "WOS:000238447100002"}