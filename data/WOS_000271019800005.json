{"auto_keywords": [{"score": 0.04722362806507461, "phrase": "pars"}, {"score": 0.0393470404740308, "phrase": "near-optimal_solutions"}, {"score": 0.03168996930133739, "phrase": "optimal_solution"}, {"score": 0.00481495049065317, "phrase": "discrete_gate"}, {"score": 0.004378958522416482, "phrase": "optimization_framework"}, {"score": 0.004306205029641728, "phrase": "nested_partitions"}, {"score": 0.0041642891310893, "phrase": "first_time"}, {"score": 0.00409508755819924, "phrase": "computer-aided_design_area"}, {"score": 0.0039380388343479384, "phrase": "novel_perspective"}, {"score": 0.003829548069657859, "phrase": "optimization_direction"}, {"score": 0.0035811651542886746, "phrase": "total_power_subject"}, {"score": 0.003501991125315889, "phrase": "delay_constraint"}, {"score": 0.0034437574674180365, "phrase": "embarrassingly_parallel_nature"}, {"score": 0.003256526411907174, "phrase": "small_algorithm_runtimes"}, {"score": 0.003149094460617212, "phrase": "large_benchmarks"}, {"score": 0.0028635111041882956, "phrase": "customized_and_parallel_branch-and-bound_implementation"}, {"score": 0.002574788013427524, "phrase": "optimal_algorithm"}, {"score": 0.0024211009463218484, "phrase": "significant_speedups"}, {"score": 0.002263861731320045, "phrase": "varying_number"}, {"score": 0.0021406417439887907, "phrase": "grid-based_implementation"}, {"score": 0.0021049977753042253, "phrase": "\"master-worker\"_framework"}], "paper_keywords": ["Cell sizing", " cloud computing", " combinatorial optimization", " nested partitions", " parallel optimization"], "paper_abstract": "We propose Parallel and Randomized cell Sizing (PaRS), a parallel and randomized algorithm and tool to solve the discrete gate sizing (cell sizing) problem on a grid. PaRS is formulated based on an optimization framework known as nested partitions which we adopt for the first time in the computer-aided design area. PaRS uses parallelism from a novel perspective to better identify the optimization direction. It achieves near-optimal solutions (under 1%) for minimizing the total power subject to meeting a delay constraint. The embarrassingly parallel nature of PaRS makes it highly scalable. We show small algorithm runtimes, in at most minutes for large benchmarks featuring over 47 000 cells. We make comparison with the optimal solution which we are able to generate using customized and parallel branch-and-bound implementation on a grid. Consequently, we are able to generate the optimal solution within hours. While the optimal algorithm uses up to 200 central processing units (CPUs) on our grid, PaRS achieves significant speedups and near-optimal solutions using only 20 CPUs. We also study the impact of varying number of CPUs in PaRS. Finally, we discuss a grid-based implementation using the \"master-worker\" framework.", "paper_title": "PaRS: Parallel and Near-Optimal Grid-Based Cell Sizing for Library-Based Design", "paper_id": "WOS:000271019800005"}