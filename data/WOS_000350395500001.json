{"auto_keywords": [{"score": 0.039494834366496166, "phrase": "data-intensive_programs"}, {"score": 0.030894895386975024, "phrase": "pebil"}, {"score": 0.024626490525802517, "phrase": "mpi"}, {"score": 0.00481495049065317, "phrase": "practical_data-intensive_program_analysis"}, {"score": 0.004714387899814988, "phrase": "high_level"}, {"score": 0.004465297931087832, "phrase": "shmem"}, {"score": 0.004254901969197879, "phrase": "program_and_system_design_decisions"}, {"score": 0.004165987300206134, "phrase": "binary_instrumentation"}, {"score": 0.004054382086746149, "phrase": "low-level_interactions"}, {"score": 0.004017846065981189, "phrase": "data_intensive_program"}, {"score": 0.003981637972909267, "phrase": "multi-core_processor"}, {"score": 0.0039576799833721315, "phrase": "many-core_co-processor"}, {"score": 0.003863275399791591, "phrase": "pebil_binary_instrumentation_platform"}, {"score": 0.0036700484729006136, "phrase": "instrumentation_thread"}, {"score": 0.003232956879952914, "phrase": "analytical_and_empirical_terms"}, {"score": 0.003174903873774882, "phrase": "popular_but_disparate_parallelization_models"}, {"score": 0.0031653299069848463, "phrase": "mpi_and_openmp._empirical_comparisons"}, {"score": 0.002943993876557772, "phrase": "empirical_results"}, {"score": 0.0028477727736832283, "phrase": "basic_block"}, {"score": 0.0027713837460773974, "phrase": "mpi_programs"}, {"score": 0.002738092279731781, "phrase": "openmp_programs"}, {"score": 0.0025159570648844555, "phrase": "memory_address_trace_collection"}, {"score": 0.0024707470443416793, "phrase": "conventional_optimization"}, {"score": 0.0024263474406990846, "phrase": "memory_addresses"}, {"score": 0.002382743797133398, "phrase": "processing_time"}, {"score": 0.0023399219122055177, "phrase": "lowest_overheads"}, {"score": 0.0021049977753042253, "phrase": "dyninst"}], "paper_keywords": ["Program analysis", " Memory address tracking", " Binary instrumentation", " Performance optimization"], "paper_abstract": "In order to achieve a high level of performance, data intensive programs such as the real-time processing of surveillance feeds from unmanned aerial vehicles, genomics sequence comparison or large graph traversal require the strategic application of multi/many-core processors and co-processors using a hybrid of inter-process message passing (e.g. MPI and SHMEM) and intra-process threading (e.g. pthreads and OpenMP). To facilitate program and system design decisions, program runtime behavior gathered through binary instrumentation is useful because it enables inspection of the low-level interactions between a data intensive program and a multi-core processor or many-core co-processor. This work details two novel mechanisms in the PEBIL binary instrumentation platform that make it well-suited for analyzing data-intensive programs by providing (1) support for fast lookup of instrumentation thread-local storage (ITLS) and (2) support for the fast enabling and disabling of instrumentation at runtime as a methodology for supporting sampling. These features are compared to two other popular binary instrumentation platforms, Pin and Dyninst, in both analytical and empirical terms for programs implemented using the popular but disparate parallelization models MPI and OpenMP. Empirical comparisons are made for two binary instrumentation applications that are critical to the analysis of data-intensive programs, basic block counting and memory address trace collection. These empirical results show that PEBIL is unrivaled in terms of overhead for basic block counting, introducing an average of 18 % extra runtime for MPI programs and 116 % for OpenMP programs as opposed to 60 % (MPI) and 232 % (OpenMP) for Pin and 20 % (MPI) and 14743 % (OpenMP) for Dyninst. For memory address trace collection that makes use of the conventional optimization of sampling 10 % of the memory addresses of a program to reduce processing time, PEBIL also introduces the lowest overheads of 144 % (MPI) and 222 % (OpenMP) compared to 313 % (MPI) and 360 % (OpenMP) with Pin and 1113 % (MPI) and 89075 % (OpenMP) with Dyninst.", "paper_title": "PEBIL: binary instrumentation for practical data-intensive program analysis", "paper_id": "WOS:000350395500001"}