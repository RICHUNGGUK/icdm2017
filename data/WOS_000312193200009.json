{"auto_keywords": [{"score": 0.03528130593645025, "phrase": "dpartner"}, {"score": 0.008028867954241323, "phrase": "distribution_architecture"}, {"score": 0.00481495049065317, "phrase": "module-based_automatic_partitioning"}, {"score": 0.004780118272605792, "phrase": "java"}, {"score": 0.00467677555573346, "phrase": "monolithic_application"}, {"score": 0.004192872425727907, "phrase": "network_nodes"}, {"score": 0.003870009704443373, "phrase": "business_functions"}, {"score": 0.0034440966820590024, "phrase": "ever-changing_execution_environment"}, {"score": 0.003201967054773186, "phrase": "distributed_java_application"}, {"score": 0.003144134096095217, "phrase": "distribution-related_codes"}, {"score": 0.0029768089698126547, "phrase": "coarse-grained_client"}, {"score": 0.0027876981671591202, "phrase": "relatively_independent_business_function"}, {"score": 0.0025727581823022268, "phrase": "different_nodes"}, {"score": 0.0024987660207458555, "phrase": "original_monolithic_application"}, {"score": 0.002306052064028865, "phrase": "environmental_changes"}, {"score": 0.002289285767792039, "phrase": "manual_recoding"}, {"score": 0.0021912115487610286, "phrase": "detailed_design"}, {"score": 0.002128169201317242, "phrase": "real-world_applications"}, {"score": 0.0021049977753042253, "phrase": "evaluation_results"}], "paper_keywords": ["application partitioning", " distributed computing", " DPartner"], "paper_abstract": "When reengineering a monolithic application to be a distributed one, programmers always have to decide how many distributed parts the application should be partitioned, and write many codes related to where a partwill be placed on network nodes and how these parts communicate with each other through the network. These codes usually have nothing to do with the business functions of the application, and they are laborious to write. In addition, as the distribution architecture of the application is finalized beforehand, it may not adapt well to the ever-changing execution environment. In this paper, we propose DPartner, an automatic partitioning system, to help programmers create a distributed Java application without explicitly writing the distribution-related codes. Unlike the other partitioning systems, DPartner does not partition an application directly into the coarse-grained client and server. Instead, it first partitions the application into several modules where each module performs a relatively independent business function of the application. Then it makes these modules be distributable through automatic bytecode rewriting. These modules can distribute in different nodes and cooperate to work just as the original monolithic application. Such a module-based partitioning approach enables a relatively easy reshaping of the distribution architecture of an application, which facilitates the application adapt to the environmental changes without manual recoding or repartitioning with regard to distribution. This paper gives the detailed design of DPartner, and evaluates it using real-world applications. The evaluation results demonstrate the effectiveness and efficiency of DPartner.", "paper_title": "Towards module-based automatic partitioning of Java applications", "paper_id": "WOS:000312193200009"}