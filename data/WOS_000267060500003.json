{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "crosscutting_concerns"}, {"score": 0.010130589932515149, "phrase": "domain-specific_aspect_languages"}, {"score": 0.004273601449537163, "phrase": "software_artefacts"}, {"score": 0.0036037265181631324, "phrase": "aspect-oriented_programming"}, {"score": 0.0034828730516958807, "phrase": "aspect_languages"}, {"score": 0.0033660587983313536, "phrase": "descriptive_power"}, {"score": 0.003309124298009635, "phrase": "general-purpose_programming_languages"}, {"score": 0.0030127172247606812, "phrase": "particular_crosscutting_concerns"}, {"score": 0.002936577024096783, "phrase": "software_representations"}, {"score": 0.0028623555849897632, "phrase": "traditional_source_code"}, {"score": 0.002372298201966367, "phrase": "language_specification"}], "paper_keywords": [""], "paper_abstract": "The emergence of crosscutting concerns can be observed in various representations of software artefacts (e.g. source code, models, requirements and language grammars). Although much of the focus of aspect-oriented programming has been on aspect languages that augment the descriptive power of general-purpose programming languages, there is also a need for domain-specific aspect languages that address particular crosscutting concerns found in software representations other than traditional source code. This study discusses the issues involved in the design and implementation of domain-specific aspect languages that are focused within the domain of language specification. Specifically, the study outlines the challenges and issues faced while designing two separate aspect languages that assist in modularising crosscutting concerns in grammars.", "paper_title": "Domain-specific aspect languages for modularising crosscutting concerns in grammars", "paper_id": "WOS:000267060500003"}