{"auto_keywords": [{"score": 0.040341907947413075, "phrase": "multicore_cpus"}, {"score": 0.00481495049065317, "phrase": "hardware_accelerators"}, {"score": 0.004748445601622725, "phrase": "scientific_applications"}, {"score": 0.004503959683578956, "phrase": "high-end_hardware"}, {"score": 0.004319830179921363, "phrase": "increasing_need"}, {"score": 0.004283913685201902, "phrase": "effective_approach"}, {"score": 0.0038218468784009035, "phrase": "important_scientific_workloads"}, {"score": 0.003675740548101486, "phrase": "cholesky"}, {"score": 0.0036249429459133007, "phrase": "qr"}, {"score": 0.0035648266669315943, "phrase": "small_dense_matrices"}, {"score": 0.0032699173589777948, "phrase": "batched_blas_routines"}, {"score": 0.0031448358470924503, "phrase": "lapack"}, {"score": 0.0031186510842824626, "phrase": "hybrid_magma_factorization_algorithms"}, {"score": 0.0030840850263807204, "phrase": "drastically_different_assumptions"}, {"score": 0.003066945490483524, "phrase": "hardware_design"}, {"score": 0.0028131083807134984, "phrase": "problems_sizes"}, {"score": 0.0027741761880779535, "phrase": "application_use_cases"}, {"score": 0.0027205721712056535, "phrase": "single_chip"}, {"score": 0.002698121966793623, "phrase": "gpu"}, {"score": 0.0026457820097369224, "phrase": "single_problem"}, {"score": 0.0025022979096052645, "phrase": "detailed_performance_analysis"}, {"score": 0.002399802463509121, "phrase": "batched_factorizations"}, {"score": 0.0023665766694993557, "phrase": "two-fold_speedup"}, {"score": 0.002333809817752256, "phrase": "better_energy_efficiency"}, {"score": 0.002263307253469281, "phrase": "tested_system"}, {"score": 0.0022382002476510573, "phrase": "intel_sandy_bridge_cpus"}, {"score": 0.0022010598350982458, "phrase": "batched_lu_factorizations"}, {"score": 0.0021766418372878835, "phrase": "cublas_library"}], "paper_keywords": ["Batched factorization", " numerical linear algebra", " hardware accelerators", " numerical software libraries", " one-sided factorization algorithms"], "paper_abstract": "Scientific applications require solvers that work on many small size problems that are independent from each other. At the same time, the high-end hardware evolves rapidly and becomes ever more throughput-oriented and thus there is an increasing need for an effective approach to develop energy-efficient, high-performance codes for these small matrix problems that we call batched factorizations. The many applications that need this functionality could especially benefit from the use of GPUs, which currently are four to five times more energy efficient than multicore CPUs on important scientific workloads. This paper, consequently, describes the development of the most common, one-sided factorizations, Cholesky, LU, and QR, for a set of small dense matrices. The algorithms we present together with their implementations are, by design, inherently parallel. In particular, our approach is based on representing the process as a sequence of batched BLAS routines that are executed entirely on a GPU. Importantly, this is unlike the LAPACK and the hybrid MAGMA factorization algorithms that work under drastically different assumptions of hardware design and efficiency of execution of the various computational kernels involved in the implementation. Thus, our approach is more efficient than what works for a combination of multicore CPUs and GPUs for the problems sizes of interest of the application use cases. The paradigm where upon a single chip (a GPU or a CPU) factorizes a single problem at a time is not at all efficient in our applications' context. We illustrate all of these claims through a detailed performance analysis. With the help of profiling and tracing tools, we guide our development of batched factorizations to achieve up to two-fold speedup and three-fold better energy efficiency as compared against our highly optimized batched CPU implementations based on MKL library. The tested system featured two sockets of Intel Sandy Bridge CPUs and we compared with a batched LU factorizations featured in the CUBLAS library for GPUs, we achieve as high as 2.5x speedup on the NVIDIA K40GPU.", "paper_title": "Batched matrix computations on hardware accelerators based on GPUs", "paper_id": "WOS:000353463200006"}