{"auto_keywords": [{"score": 0.050078231441403685, "phrase": "probabilistic_pointer_analysis"}, {"score": 0.040201099290567366, "phrase": "probabilistic_points"}, {"score": 0.03856197818988145, "phrase": "prg"}, {"score": 0.004767261858417823, "phrase": "ssa_form"}, {"score": 0.004642377903273107, "phrase": "compile-time_analysis_method"}, {"score": 0.0044169318855693356, "phrase": "particular_program_point"}, {"score": 0.004092240621596351, "phrase": "aggressive_optimizations"}, {"score": 0.003984968827278219, "phrase": "ppa_technique"}, {"score": 0.003945467978172845, "phrase": "static_single_assignment"}, {"score": 0.0037537380967196123, "phrase": "specific_pointer"}, {"score": 0.003547642961654828, "phrase": "possible_points"}, {"score": 0.0033639840192975835, "phrase": "reduction_operations"}, {"score": 0.0033306180744375616, "phrase": "compact_graph"}, {"score": 0.0031268367298709653, "phrase": "ppa"}, {"score": 0.003075296862372287, "phrase": "interprocedural_cases"}, {"score": 0.003044785536429499, "phrase": "function_related_statements"}, {"score": 0.002974760986688745, "phrase": "static_and_profiling_versions"}, {"score": 0.0025528981558942372, "phrase": "version_measures"}, {"score": 0.002544422946205545, "phrase": "branch_probabilities"}, {"score": 0.0024941578231560055, "phrase": "default_workload"}, {"score": 0.002436765760924074, "phrase": "average_errors"}, {"score": 0.002420611343093316, "phrase": "selected_benchmarks"}, {"score": 0.0023806911724834024, "phrase": "profiling_version"}, {"score": 0.00234142781099973, "phrase": "static_version"}, {"score": 0.0021762030438262046, "phrase": "practical_use"}, {"score": 0.002154592730528917, "phrase": "average_analysis_time"}], "paper_keywords": ["Compiler", " pointer analysis", " control flow graph (CFG)", " static single assignment (SSA) form"], "paper_abstract": "Probabilistic pointer analysis (PPA) is a compile-time analysis method that estimates the probability that a points-to relationship will hold at a particular program point. The results are useful for optimizing and parallelizing compilers, which need to quantitatively assess the profitability of transformations when performing aggressive optimizations and parallelization. This paper presents a PPA technique using the static single assignment (SSA) form. When computing the probabilistic points-to relationships of a specific pointer, a pointer relation graph (PRG) is first built to represent all of the possible points-to relationships of the pointer. The PRG is transformed by a sequence of reduction operations into a compact graph, from which the probabilistic points-to relationships of the pointer can be determined. In addition, PPA is further extended to interprocedural cases by considering function related statements. We have implemented our proposed scheme including static and profiling versions in the Open64 compiler, and performed experiments to obtain the accuracy and scalability. The static version estimates branch probabilities by assuming that every conditional is equally likely to be true or false, and that every loop executes 10 times before terminating. The profiling version measures branch probabilities dynamically from past program executions using a default workload provided with the benchmark. The average errors for selected benchmarks were 3.80 percent in the profiling version and 9.13 percent in the static version. Finally, SPEC CPU2006 is used to evaluate the scalability, and the result indicates that our scheme is sufficiently efficient in practical use. The average analysis time was 35.59 seconds for an average of 98,696 lines of code.", "paper_title": "Support of Probabilistic Pointer Analysis in the SSA Form", "paper_id": "WOS:000310382800016"}