{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "proof_certificates"}, {"score": 0.015464885555400265, "phrase": "model_checkers"}, {"score": 0.011851365402466032, "phrase": "model_checker"}, {"score": 0.004775335634705251, "phrase": "finite_state_exploration"}, {"score": 0.0046970764288494764, "phrase": "automated_state_exploration"}, {"score": 0.004378469469879815, "phrase": "state_transition_systems"}, {"score": 0.00418387341007444, "phrase": "computer_models"}, {"score": 0.003835972725191194, "phrase": "theorem_provers"}, {"score": 0.0032780806856932423, "phrase": "formally_defined_document"}, {"score": 0.003093595537995837, "phrase": "trusted_proof_checker"}, {"score": 0.002907405102646616, "phrase": "model_checking_problems"}, {"score": 0.002709862658377861, "phrase": "\"clerk_and_expert\"_predicates"}, {"score": 0.0024842242921857705, "phrase": "clerk_and_expert_specifications"}, {"score": 0.002175913488493802, "phrase": "labeled_transition_systems"}, {"score": 0.0021049977753042253, "phrase": "reference_checker"}], "paper_keywords": [""], "paper_abstract": "Model checkers use automated state exploration in order to prove various properties such as reachability, non-reachability, and bisimulation over state transition systems. While model checkers have proved valuable for locating errors in computer models and specifications, they can also be used to prove properties that might be consumed by other computational logic systems, such as theorem provers. In such a situation, a prover must be able to trust that the model checker is correct. Instead of attempting to prove the correctness of a model checker, we ask that it outputs its \"proof evidence\" as a formally defined document-a proof certificate-and that this document is checked by a trusted proof checker. We describe a framework for defining and checking proof certificates for a range of model checking problems. The core of this framework is a (focused) proof system that is augmented with premises that involve \"clerk and expert\" predicates. This framework is designed so that soundness can be guaranteed independently of any concerns for the correctness of the clerk and expert specifications. To illustrate the flexibility of this framework, we define and formally check proof certificates for reachability and non-reachability in graphs, as well as bisimulation and non-bisimulation for labeled transition systems. Finally, we describe briefly a reference checker that we have implemented for this framework.", "paper_title": "A framework for proof certificates in finite state exploration", "paper_id": "WOS:000367337300005"}