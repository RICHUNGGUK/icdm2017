{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "compressed_suffix_arrays"}, {"score": 0.010541490054571464, "phrase": "vertical_bar"}, {"score": 0.010498967910883596, "phrase": "sigma"}, {"score": 0.009027881391723615, "phrase": "human_dna"}, {"score": 0.006860581048009334, "phrase": "working_memory"}, {"score": 0.005525624159049818, "phrase": "time_complexity"}, {"score": 0.0040373708328770306, "phrase": "main_memory"}, {"score": 0.003772793879444995, "phrase": "recent_breakthrough"}, {"score": 0.0036553070575015344, "phrase": "space_requirement"}, {"score": 0.0032794890195334513, "phrase": "easy_task"}, {"score": 0.0031773149810690494, "phrase": "suffix_arrays"}, {"score": 0.002687702958515561, "phrase": "main_contribution"}, {"score": 0.0026514708899935333, "phrase": "construction_algorithm"}, {"score": 0.0022940375532231145, "phrase": "large_alphabets"}, {"score": 0.0022631205382003857, "phrase": "chinese"}, {"score": 0.0022427179106291766, "phrase": "japanese"}, {"score": 0.0021826210858934933, "phrase": "alphabet_size"}, {"score": 0.0021049977753042253, "phrase": "working_space"}], "paper_keywords": ["text indexing", " pattern matching", " compression", " construction"], "paper_abstract": "With the first human DNA being decoded into a sequence of about 2.8 billion characters, much biological research has been centered on analyzing this sequence. Theoretically speaking, it is now feasible to accommodate an index for human DNA in the main memory so that any pattern can be located efficiently. This is due to the recent breakthrough on compressed suffix arrays, which reduces the space requirement from O (n log n) bits to O (n) bits. However, Constructing compressed suffix arrays is still not an easy task because we still have to compute suffix arrays first and need a working memory of O (n log it) bits (i.e., more than 13 gigabytes for human DNA). This paper initiates the study of constructing compressed suffix arrays directly from the text. The main contribution is a construction algorithm that uses only O (n) bits of working memory, and the time complexity is O (n log n). Our construction algorithm is also time and space efficient for texts with large alphabets such as Chinese or Japanese. Precisely, when the alphabet size is vertical bar Sigma vertical bar, the working space is O (n log vertical bar Sigma vertical bar) bits, and the time complexity remains O (n log n), which is independent of vertical bar Sigma vertical bar.", "paper_title": "A space and time efficient algorithm for constructing compressed suffix arrays", "paper_id": "WOS:000246152800002"}