{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.004626255242038005, "phrase": "parallel_processing"}, {"score": 0.004595529592539951, "phrase": "pixel_sets"}, {"score": 0.004565007074039171, "phrase": "large_datasets"}, {"score": 0.004327981760540394, "phrase": "smaller_subsets"}, {"score": 0.004130660282810338, "phrase": "-_edges"}, {"score": 0.003614895644619489, "phrase": "segmentation_algorithm"}, {"score": 0.003427032390942116, "phrase": "massive_number"}, {"score": 0.003370344851760079, "phrase": "original_image"}, {"score": 0.003314591878914152, "phrase": "data_parallel_approach"}, {"score": 0.0031527885391562423, "phrase": "task_parallelism"}, {"score": 0.003049318402401662, "phrase": "parallel_image_processing"}, {"score": 0.0026950674053179404, "phrase": "processor_activity"}, {"score": 0.0024792523879679836, "phrase": "heterogeneous_computer_architecture"}, {"score": 0.002288309252254464, "phrase": "image_processing"}, {"score": 0.0021764949731965656, "phrase": "run-time_evaluation"}, {"score": 0.0021049977753042253, "phrase": "distributed_buckets"}], "paper_keywords": ["Data parallel processing", " Task parallel processing", " Real-time image processing"], "paper_abstract": "Large datasets, such as pixels and voxels in 2D and 3D images can usually be reduced during their processing to smaller subsets with less datapoints. Such subsets can be the objects in the image, features - edges or corners - or more general, regions of interest. For instance, the transformation from a set of datapoints representing an image, to one or more subsets of datapoints representing objects in the image, is due to a segmentation algorithm and may involve both the selection of datapoints as well as a change in datastructure. The massive number of pixels in the original image, points to a data parallel approach, whereas the processing of the various objects in the image is more suitable for task parallelism. In this paper we introduce a framework for parallel image processing and we focus on an array of buckets that can be distributed over a number of processors and that contains pointers to the data from the dataset. The benefit of this approach is that the processor activity remains focussed on the datapoints that need processing and, moreover, that the load can be distributed over many processors, even in a heterogeneous computer architecture. Although the method is generally applicable in the processing of sets, in this paper we obtain our examples from the domain of image processing. As this method yields speedups that are data dependent, we derived a run-time evaluation that is able to determine if the use of distributed buckets is beneficial. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Distributed bucket processing: A paradigm embedded in a framework for the parallel processing of pixel sets", "paper_id": "WOS:000261795100007"}