{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "recursive_programs"}, {"score": 0.00407161650109722, "phrase": "procedural_programs"}, {"score": 0.0038810583785936505, "phrase": "state_and_ranking_abstractions"}, {"score": 0.003526186748088922, "phrase": "augmented_finitary_abstraction"}, {"score": 0.0031277316566463978, "phrase": "concrete_procedural_program"}, {"score": 0.002910545717767559, "phrase": "well_founded_ranking_function"}, {"score": 0.0026760974046034854, "phrase": "finitary_state_abstraction"}, {"score": 0.0024901940672239784, "phrase": "procedural_abstract_program"}, {"score": 0.0024311346712789553, "phrase": "strong_fairness_requirements"}, {"score": 0.0022352169832099153, "phrase": "finite-state_fair_discrete_system"}, {"score": 0.0021049977753042253, "phrase": "procedure_summarization"}], "paper_keywords": [""], "paper_abstract": "We present a method for model-checking of safety and liveness properties over procedural programs, by combining state and ranking abstractions with procedure summarization. Our abstraction is an augmented finitary abstraction [KP00, BPZ05], meaning that a concrete procedural program is first augmented with a well founded ranking function, and then abstracted by a finitary state abstraction. This results in a procedural abstract program with strong fairness requirements which is then reduced to a finite-state fair discrete system (FDS) using procedure summarization. This FDS is then model checked for the property.", "paper_title": "Ranking abstraction of recursive programs", "paper_id": "WOS:000235836700018"}