{"auto_keywords": [{"score": 0.04456908482160254, "phrase": "web_applications"}, {"score": 0.010119454910661395, "phrase": "javascript_programmers"}, {"score": 0.006309575217647169, "phrase": "causality_issues"}, {"score": 0.00481502318726609, "phrase": "modular"}, {"score": 0.004630152957455532, "phrase": "ajax"}, {"score": 0.00443308765153716, "phrase": "user-centered_web_applications"}, {"score": 0.004153041453795458, "phrase": "user_machines"}, {"score": 0.0037411604449359794, "phrase": "distributed_systems"}, {"score": 0.0033699898113395328, "phrase": "distributed_causal_relations"}, {"score": 0.00326881479036966, "phrase": "rudimentary_and_alternative_techniques"}, {"score": 0.0031984060035955292, "phrase": "distributed_computing_theory"}, {"score": 0.002686935113435742, "phrase": "modular_and_flexible_control"}, {"score": 0.0025723630851105304, "phrase": "current_proposals"}, {"score": 0.0025500402081330394, "phrase": "weca"}, {"score": 0.0021892345747666977, "phrase": "third-party_application"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["WeCa", " AspectScript", " OTM", " JavaScript", " Web 2.0 Applications", " Distributed computing", " Aspect-oriented programming"], "paper_abstract": "Ajax allows JavaScript programmers to create interactive, collaborative, and user-centered Web applications, known as Web 2.0 Applications. These Web applications behave as distributed systems because processors are user machines that are used to send and receive messages between one another. Unsurprisingly, these applications have to address the same causality issues present in distributed systems like the need (a) to control the causality between messages sent and responses received and (b) to react to distributed causal relations. JavaScript programmers overcome these issues using rudimentary and alternative techniques that largely ignore the distributed computing theory. In addition, these techniques are not very flexible and need to intrusively modify these Web applications. In this paper, we study how causality issues affect these applications and present WeCa, a practical library that allows for modular and flexible control over these causality issues in Web applications. In contrast to current proposals, WeCa is based on (stateful) aspects, message ordering strategies, and vector clocks. We illustrate WeCa in action with several practical examples from the realm of Web applications. In addition, we evaluate our proposal with a third-party application and its performance. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "Modular and flexible causality control on the Web", "paper_id": "WOS:000321536100017"}