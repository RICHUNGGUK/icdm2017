{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "propositional_satisfiability"}, {"score": 0.04312807803523186, "phrase": "logic_programs"}, {"score": 0.0045581828632009795, "phrase": "new_logic_programming_paradigm"}, {"score": 0.004278807087784626, "phrase": "efficient_solvers"}, {"score": 0.004085003478687006, "phrase": "sat"}, {"score": 0.003802135020791801, "phrase": "new_variables"}, {"score": 0.003738502710504415, "phrase": "exponentially_bigger_propositional_formulas"}, {"score": 0.003599182629885611, "phrase": "sat-based_procedure"}, {"score": 0.003553902452065732, "phrase": "asp-sat"}, {"score": 0.003349984456443527, "phrase": "propositional_formula"}, {"score": 0.0033218213825698417, "phrase": "additional_variables"}, {"score": 0.0031979796189858206, "phrase": "clause_form_transformation"}, {"score": 0.0030399874838260886, "phrase": "polynomial_space"}, {"score": 0.0029890721584351684, "phrase": "theoretical_perspective"}, {"score": 0.002889778121878728, "phrase": "asp-sat."}, {"score": 0.002853396755102163, "phrase": "practical_perspective"}, {"score": 0.002633355582628613, "phrase": "basic_procedures"}, {"score": 0.002482126086922683, "phrase": "extensive_comparative_analysis"}, {"score": 0.0023395610923736595, "phrase": "experimental_analysis"}, {"score": 0.0022051664509486206, "phrase": "reasoning_strategies"}, {"score": 0.00214995338990007, "phrase": "small_but_hard'_problems"}, {"score": 0.0021049977753042253, "phrase": "big_but_easy'_problems"}], "paper_keywords": ["answer set programming", " propositional satisfiability"], "paper_abstract": "Answer Set Programming ( ASP) emerged in the late 1990s as a new logic programming paradigm that has been successfully applied in various application domains. Also motivated by the availability of efficient solvers for propositional satisfiability ( SAT), various reductions from logic programs to SAT were introduced. All these reductions, however, are limited to a subclass of logic programs or introduce new variables or may produce exponentially bigger propositional formulas. In this paper, we present a SAT-based procedure, called ASP-SAT, that ( 1) deals with any (nondisjunctive) logic program, ( 2) works on a propositional formula without additional variables ( except for those possibly introduced by the clause form transformation), and ( 3) is guaranteed to work in polynomial space. From a theoretical perspective, we prove soundness and completeness of ASP-SAT. From a practical perspective, we have ( 1) implemented ASP-SAT in CMODELS, ( 2) extended the basic procedures in order to incorporate the most popular SAT reasoning strategies, and ( 3) conducted an extensive comparative analysis involving other state-of-the-art answer set solvers. The experimental analysis shows that our solver is competitive with the other solvers we considered and that the reasoning strategies that work best on 'small but hard' problems are ineffective on 'big but easy' problems and vice versa.", "paper_title": "Answer set programming based on propositional satisfiability", "paper_id": "WOS:000243257300004"}