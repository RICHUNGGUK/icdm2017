{"auto_keywords": [{"score": 0.0487478043901606, "phrase": "ni"}, {"score": 0.04518002765592522, "phrase": "noc"}, {"score": 0.00481495049065317, "phrase": "novel_network-interface_ip_macrocell"}, {"score": 0.004787874367741664, "phrase": "network-on-chip_interconnects"}, {"score": 0.0047075518238435966, "phrase": "configurable_network_interface"}, {"score": 0.004436840489678474, "phrase": "ni_architecture"}, {"score": 0.004411881183253102, "phrase": "multiple_native_bus"}, {"score": 0.004374704085463403, "phrase": "ip_cells"}, {"score": 0.0042650339037168675, "phrase": "data_size"}, {"score": 0.003974550062454033, "phrase": "also_the_hardware_implementation"}, {"score": 0.003952181032417829, "phrase": "advanced_networking_features"}, {"score": 0.003896805547540686, "phrase": "order_handling"}, {"score": 0.0038748723665440027, "phrase": "error_management"}, {"score": 0.0037142463947344466, "phrase": "functional_verification"}, {"score": 0.0036933369385651342, "phrase": "direct_hdl_testbenches"}, {"score": 0.0036621924435239358, "phrase": "corner_cases"}, {"score": 0.003600686288078524, "phrase": "handwritten_testbenches"}, {"score": 0.003520276279851044, "phrase": "formal_methods"}, {"score": 0.003500454947375897, "phrase": "verification_engineer"}, {"score": 0.0034222756030918384, "phrase": "hdl_description"}, {"score": 0.0033269940500921832, "phrase": "netlist_functional_behavior"}, {"score": 0.0032896259269086098, "phrase": "complex_designs"}, {"score": 0.0032710990353625492, "phrase": "state_explosion_problem"}, {"score": 0.0032526761451728537, "phrase": "model_checking"}, {"score": 0.003117761489610736, "phrase": "skilled_manual_guidance"}, {"score": 0.0030481030971279896, "phrase": "constrained-random_coverage-driven_approach"}, {"score": 0.0029632081217391866, "phrase": "novel_ni"}, {"score": 0.002872544201947737, "phrase": "dut_specifications"}, {"score": 0.0028483013501083144, "phrase": "software_verification_platform"}, {"score": 0.002784646536952332, "phrase": "traffic_patterns"}, {"score": 0.0026390945749753926, "phrase": "dut_outputs"}, {"score": 0.0025947264971912616, "phrase": "pre-programmed_rules"}, {"score": 0.002572822239596127, "phrase": "collected_outputs"}, {"score": 0.002551102421211472, "phrase": "functional_coverage_scheme"}, {"score": 0.002515308398127586, "phrase": "possible_cases"}, {"score": 0.0024245711012002083, "phrase": "coverage-driven_verification"}, {"score": 0.0023108237893935766, "phrase": "coverage_plan"}, {"score": 0.0022719619809877883, "phrase": "verification_strategy"}, {"score": 0.0022655487067269717, "phrase": "full_code"}, {"score": 0.0022527762945938586, "phrase": "functional_coverage"}, {"score": 0.0022274466028861925, "phrase": "implementation_results"}, {"score": 0.0022086359964858123, "phrase": "verified_ni_core"}, {"score": 0.002141009796880959, "phrase": "state-of-art_ni_designs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Network-on-chip (NoC)", " Network interface (NI)", " Coverage-driven functional verification", " Intellectual property (IP) cores", " Multi-processor system-on-chip (MPSoC)"], "paper_abstract": "The work presents a configurable network interface (NI) macrocell to be integrated in Spidergon network-on-chip (NoC) infrastructures, and addresses the problem of its functional verification. The NI architecture supports multiple native bus for the IP cells connected to the NoC and the conversion of data size, protocol and frequency between the NoC and each IF. Differently from many state-of-art NI designs the proposed macrocell features also the hardware implementation of advanced networking features such as security, order handling, error management, store and forward transmission, memory remapping, power management. Such a configurable and complex design poses several challenges in terms of functional verification. Direct HDL testbenches fails covering corner cases and typically are based on handwritten testbenches that are error-prone. In formal methods the verification engineer tries to extract deterministic laws/relationships internal to the HDL description, and then to prove theorems to check the netlist functional behavior. However in complex designs the state explosion problem limits model checking, and the cost of theorem proving becomes prohibitive because of the amount of skilled manual guidance it requires. To overcome such issues a constrained-random coverage-driven approach is presented and customized to be applied to the novel NI as design under test (DUT). Starting from DUT specifications, a software verification platform is created performing these tasks: generating traffic patterns which are constrained-random, i.e. random within variations ranges specified by the user; monitoring the DUT outputs and checking them according to pre-programmed rules; parsing collected outputs into a functional coverage scheme to check if all possible cases have been stressed and covered by the tests. This enables a coverage-driven verification: the user continues developing and running tests until there are no holes left in the coverage plan. As result of this verification strategy full code and functional coverage is achieved. Implementation results of the verified NI core in 45 nm and 65 nm CMOS technologies are also provided and compared to state-of-art NI designs. (C) 2011 Elsevier B.V. All rights reserved.", "paper_title": "Design and coverage-driven verification of a novel network-interface IP macrocell for network-on-chip interconnects", "paper_id": "WOS:000295151600006"}