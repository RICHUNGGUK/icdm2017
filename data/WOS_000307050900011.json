{"auto_keywords": [{"score": 0.041451887954457124, "phrase": "ssi_form"}, {"score": 0.005819720711932647, "phrase": "liveness_analysis"}, {"score": 0.00481495049065317, "phrase": "ssi_properties_revisited"}, {"score": 0.004747620102130588, "phrase": "static_single_information"}, {"score": 0.004529881123652277, "phrase": "static_single_assignment"}, {"score": 0.004143196873246147, "phrase": "numerous_compiler_analysis"}, {"score": 0.003649585593445665, "phrase": "just-in-time_compilation"}, {"score": 0.00348202932445197, "phrase": "previous_literature"}, {"score": 0.0033440226083469595, "phrase": "intersection_graph"}, {"score": 0.0028986672783671147, "phrase": "c._s._ananian"}, {"score": 0.0028446460307503343, "phrase": "j._singer"}, {"score": 0.002688532127821979, "phrase": "basic_blocks"}, {"score": 0.0021857667493036786, "phrase": "interval_graph"}, {"score": 0.0021049977753042253, "phrase": "ssa_form"}], "paper_keywords": ["Algorithms", " Languages", " Theory", " Control-flow graph", " interval graph", " liveness analysis", " loop nesting forest", " static single assignment (SSA)", " static single information (SSI)", " intersection/interference graph", " program structure tree (PST)"], "paper_abstract": "The static single information (SSI) form is an extension of the static single assignment (SSA) form, a well-established compiler intermediate representation that has been successfully used for numerous compiler analysis and optimizations. Several interesting results have also been shown for SSI form concerning liveness analysis and the representation of live-ranges of variables, which could make SSI form appealing for just-in-time compilation. Unfortunately, we have uncovered several mistakes in the previous literature on SSI form, which, admittedly, is already quite sparse. This article corrects the mistakes that are most germane to SSI form. We first explain why the two definitions of SSI form proposed in past literature, first by C. S. Ananian, then by J. Singer, are not equivalent. Our main result is then to prove that basic blocks, and thus program points, can be totally ordered so that live-ranges of variables correspond to intervals on a line, a result that holds for both variants of SSI form. In other words, in SSI form, the intersection graph defined by live-ranges is an interval graph, a stronger structural property than for SSA form for which the intersection graph of live-ranges is chordal. Finally, we show how this structure of live-ranges can be used to simplify liveness analysis.", "paper_title": "SSI Properties Revisited", "paper_id": "WOS:000307050900011"}