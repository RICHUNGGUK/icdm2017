{"auto_keywords": [{"score": 0.04712665802421912, "phrase": "credit_scheduler"}, {"score": 0.03309380356105528, "phrase": "xcollopts"}, {"score": 0.00481495049065317, "phrase": "network_virtualization"}, {"score": 0.004468037801239238, "phrase": "cpu-bound_applications"}, {"score": 0.003978866233891427, "phrase": "poor_understanding"}, {"score": 0.003861534816807933, "phrase": "virtual_machine_scheduling"}, {"score": 0.003387431241133385, "phrase": "novel_optimizations"}, {"score": 0.003275197814021, "phrase": "multicore_environments"}, {"score": 0.0030617295196636173, "phrase": "imbalanced_multi-boosting_problem"}, {"score": 0.002982511360424684, "phrase": "system_response_time"}, {"score": 0.0029271812818615042, "phrase": "boost_vcpus"}, {"score": 0.0028514344213899177, "phrase": "premature_preemption_problem"}, {"score": 0.0027776422068966867, "phrase": "received_network_packets"}, {"score": 0.0027466028572379455, "phrase": "driver_domain"}, {"score": 0.0026357223464279983, "phrase": "packet_delivery"}, {"score": 0.0025578967205807843, "phrase": "scheduling_strategies"}, {"score": 0.002482363351755741, "phrase": "performance_issues"}, {"score": 0.0024546155360991567, "phrase": "underlying_supportive_communication_mechanisms"}, {"score": 0.002294507393862231, "phrase": "multi-tasklet_pairs"}, {"score": 0.0022773736136311056, "phrase": "optimized_small_data_packet"}, {"score": 0.0021448202319775634, "phrase": "latency-sensitive_applications"}, {"score": 0.0021049977753042253, "phrase": "relatively_small_system_overhead"}], "paper_keywords": ["Scheduling", " hypervisor", " multicore", " load balancing", " I/O virtualization"], "paper_abstract": "It has long been recognized that the Credit scheduler selectively favors CPU-bound applications whereas for I/O-latency sensitive workloads, such as those related to stream-based audio/video services, it only exhibits tolerable, or even worse, unacceptable performance. The reasons behind this phenomenon are the poor understanding (to some degree) of the virtual machine scheduling as well as the network I/O virtualizations. In order to address these problems and make the system more responsive to the I/O-latency sensitive applications, in this paper, we present XCollOpts which performs a collection of novel optimizations to improve the Credit scheduler and the underlying I/O virtualizations in multicore environments, each from two perspectives. To optimize the schedule, in XCollOpts, we first pinpoint the Imbalanced Multi-Boosting problem among the cores thereby minimizing the system response time by load balancing the BOOST VCPUs. Then, we describe the Premature Preemption problem and address it by monitoring the received network packets in the driver domain and deliberately preventing it from being prematurely preempted during the packet delivery. However, these optimizations on the scheduling strategies cannot be fully exploited if the performance issues of the underlying supportive communication mechanisms are not considered. To this end, we make two further optimizations for the network I/O virtualizations, namely, Multi-Tasklet Pairs and Optimized Small Data Packet. Our empirical studies show that with XCollOpts, we can significantly improve the performance of the latency-sensitive applications at a cost of relatively small system overhead.", "paper_title": "XCollOpts: A Novel Improvement of Network Virtualization in Xen for I/O-Latency Sensitive Applications on Multicores", "paper_id": "WOS:000357529700005"}