{"auto_keywords": [{"score": 0.041996689288621714, "phrase": "hpc_applications"}, {"score": 0.015719716506582538, "phrase": "computational_biology"}, {"score": 0.004661446705304497, "phrase": "computational_biology_research"}, {"score": 0.004512814529823301, "phrase": "burgeoning_number"}, {"score": 0.004464326432401002, "phrase": "genome_data"}, {"score": 0.004392565073466714, "phrase": "rigorous_postprocessing"}, {"score": 0.004252469672259375, "phrase": "increased_role"}, {"score": 0.004206767038617782, "phrase": "high-performance_computing"}, {"score": 0.003964007795174772, "phrase": "computational_biology_problems"}, {"score": 0.0038168424095396205, "phrase": "corresponding_sequential_applications"}, {"score": 0.003775803846431323, "phrase": "existing_traditional_programming_techniques"}, {"score": 0.00355782527287734, "phrase": "pattern-based_programming"}, {"score": 0.0033888405252810927, "phrase": "new_ways"}, {"score": 0.003107935254560724, "phrase": "mainstream_practice"}, {"score": 0.002928399649340438, "phrase": "new_parallel_pattern-based_system_prototype"}, {"score": 0.0028348690177346448, "phrase": "underlying_programming_techniques"}, {"score": 0.0027741761880779535, "phrase": "generic_programming"}, {"score": 0.002656650588033728, "phrase": "generic_representation"}, {"score": 0.0026280534600940137, "phrase": "abstract_concepts"}, {"score": 0.0024761702541879213, "phrase": "generic_way"}, {"score": 0.0024495111090152857, "phrase": "application_level"}, {"score": 0.0023712394008737958, "phrase": "good_extensibility"}, {"score": 0.0021745003291048356, "phrase": "popular_computational_biology_algorithms"}, {"score": 0.002127915423138391, "phrase": "significant_runtime_savings"}, {"score": 0.0021049977753042253, "phrase": "distributed_memory_architectures"}], "paper_keywords": ["high-performance computational biology", " dynamic programming algorithms", " hierarchical parallel genetic algorithms", " parallel patterns", " generic programming"], "paper_abstract": "Computational biology research is now faced with the burgeoning number of genome data. The rigorous postprocessing of this data requires an increased role for high-performance computing ( HPC). Because the development of HPC applications for computational biology problems is much more complex than the corresponding sequential applications, existing traditional programming techniques have demonstrated their inadequacy. Many high level programming techniques, such as skeleton and pattern-based programming, have therefore been designed to provide users new ways to get HPC applications without much effort. However, most of them remain absent from the mainstream practice for computational biology. In this paper, we present a new parallel pattern-based system prototype for computational biology. The underlying programming techniques are based on generic programming, a programming technique suited for the generic representation of abstract concepts. This allows the system to be built in a generic way at application level and, thus, provides good extensibility and flexibility. We show how this system can be used to develop HPC applications for popular computational biology algorithms and lead to significant runtime savings on distributed memory architectures.", "paper_title": "Parallel pattern-based systems for computational biology: A case study", "paper_id": "WOS:000238481900003"}