{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "near-duplicate_detection"}, {"score": 0.004677372885331908, "phrase": "increasing_amount"}, {"score": 0.004350308086118336, "phrase": "multiple_data_sources"}, {"score": 0.004195418010131832, "phrase": "challenging_issues"}, {"score": 0.0037087324991876727, "phrase": "efficient_algorithms"}, {"score": 0.0031845067058084583, "phrase": "prefix_filtering_principle"}, {"score": 0.0030933709720820605, "phrase": "similarity_values"}, {"score": 0.0030267296900520217, "phrase": "possible_pairs"}, {"score": 0.002897710777957041, "phrase": "new_filtering_techniques"}, {"score": 0.002814759530655965, "phrase": "token_ordering_information"}, {"score": 0.002675252546913683, "phrase": "existing_methods"}, {"score": 0.002579847272930948, "phrase": "candidate_sizes"}, {"score": 0.0022967713922705, "phrase": "stand-alone_and_rdbms-based_settings"}, {"score": 0.002135812692862058, "phrase": "previous_algorithms"}], "paper_keywords": ["Algorithms", " Performance", " Similarity join", " near duplicate detection"], "paper_abstract": "With the increasing amount of data and the need to integrate data from multiple data sources, one of the challenging issues is to identify near-duplicate records efficiently. In this article, we focus on efficient algorithms to find a pair of records such that their similarities are no less than a given threshold. Several existing algorithms rely on the prefix filtering principle to avoid computing similarity values for all possible pairs of records. We propose new filtering techniques by exploiting the token ordering information; they are integrated into the existing methods and drastically reduce the candidate sizes and hence improve the efficiency. We have also studied the implementation of our proposed algorithm in stand-alone and RDBMS-based settings. Experimental results show our proposed algorithms can outperform previous algorithms on several real datasets.", "paper_title": "Efficient Similarity Joins for Near-Duplicate Detection", "paper_id": "WOS:000294158100001"}