{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "data_dependencies"}, {"score": 0.039455174318622464, "phrase": "call_dependencies"}, {"score": 0.012167687400555101, "phrase": "source_code"}, {"score": 0.00441738161338662, "phrase": "impact_analysis"}, {"score": 0.00437281181878921, "phrase": "risk_assessment"}, {"score": 0.004220314322073171, "phrase": "complete_and_correct_traceability_links"}, {"score": 0.004073113268289532, "phrase": "traceability_assessment"}, {"score": 0.0038520615699124123, "phrase": "traceability_research"}, {"score": 0.0036429626734678314, "phrase": "code_properties"}, {"score": 0.0034277338119963886, "phrase": "traceability_links"}, {"score": 0.0032088487124106936, "phrase": "existing_data_dependencies"}, {"score": 0.002797757576619329, "phrase": "five_research_questions"}, {"score": 0.002727606388863445, "phrase": "five_software_systems"}, {"score": 0.0025275050635202878, "phrase": "requirements_traceability"}, {"score": 0.002294929467537814, "phrase": "strong_implications"}, {"score": 0.002271725588755076, "phrase": "code_understanding"}, {"score": 0.002237357942660354, "phrase": "trace_capture"}, {"score": 0.002181227522730908, "phrase": "validation_techniques"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["requirements traceability", " software traceability", " feature location", " source code dependencies", " program analysis", " method call dependencies", " method data dependencies"], "paper_abstract": "Requirements traceability benefits many software engineering activities, such as change impact analysis and risk assessment. However, these activities require complete and correct traceability links which is not trivial, making traceability assessment an important field of study. In recent years, requirements traceability research has focused on using call dependencies within source code to understand how code properties contribute to the implementation of a requirement and to assess whether traceability links are correct and complete. These approaches largely ignore the role of existing data dependencies within the source code. That is, methods may never call each other, but may still depend upon another by sharing data. We identified five research questions and validated them on five software systems, covering 4 to 72 KLOC. We found that data dependencies are as relevant as call dependencies for assessing requirements traceability. Even more interesting, our analyses show that data dependencies complement call dependencies in the assessment. These findings have strong implications on code understanding, including trace capture, maintenance, and validation techniques. Copyright (c) 2015 John Wiley & Sons, Ltd.", "paper_title": "Can method data dependencies support the assessment of traceability between requirements and source code?", "paper_id": "WOS:000364517100002"}