{"auto_keywords": [{"score": 0.04560362315992008, "phrase": "synchrony_assumption"}, {"score": 0.00481495049065317, "phrase": "mixed-criticality_synchronous_reactive_programs"}, {"score": 0.00456020621016909, "phrase": "model-based_design_methodologies"}, {"score": 0.003290237137651949, "phrase": "physical_platforms"}, {"score": 0.0027943943921568456, "phrase": "resource-efficient_implementations"}, {"score": 0.0025059724686541263, "phrase": "actual_platforms"}, {"score": 0.0021049977753042253, "phrase": "execution_sequences"}], "paper_keywords": ["Synchronous programming", " Mixed-criticality systems", " Scheduling"], "paper_abstract": "Model-based design methodologies based on the synchrony assumption are widely used in many safety-critical application domains. The synchrony assumption asserts that actions (such as the execution of code) occur instantaneously; however, physical platforms obviously do not possess this property. This paper considers the problem of obtaining resource-efficient implementations of programs that are written under the synchrony assumption on actual platforms, such that these implementations execute in a manner that is semantically consistent with the execution sequences that would occur if the synchrony assumption were to hold.", "paper_title": "Implementing mixed-criticality synchronous reactive programs upon uniprocessor platforms", "paper_id": "WOS:000334195100002"}