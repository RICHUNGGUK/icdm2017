{"auto_keywords": [{"score": 0.04476307702770175, "phrase": "virtual_machines"}, {"score": 0.004815215771351808, "phrase": "java"}, {"score": 0.00465634671242413, "phrase": "most-often-used-paths_approach"}, {"score": 0.004502943680955863, "phrase": "java_byte-code_optimization_algorithm"}, {"score": 0.004378958522416482, "phrase": "initial_distribution"}, {"score": 0.00409508755819924, "phrase": "direct_inter-object_communication"}, {"score": 0.00389427992231721, "phrase": "proposed_optimization_algorithm"}, {"score": 0.0037869901077566526, "phrase": "graph_representation"}, {"score": 0.003601235776892337, "phrase": "java_programs"}, {"score": 0.003405472159599442, "phrase": "conditional_macro-dataflow_graphs"}, {"score": 0.003293142761521425, "phrase": "static_analysis"}, {"score": 0.003256526411907174, "phrase": "program_byte-code"}, {"score": 0.003220315882881027, "phrase": "object_placement_optimization"}, {"score": 0.0031315358193567708, "phrase": "java_program"}, {"score": 0.0030451958332949735, "phrase": "parallel_system"}, {"score": 0.0029945352738604742, "phrase": "optimization_methods"}, {"score": 0.0028957798334553683, "phrase": "dsc"}, {"score": 0.002800158709933889, "phrase": "macro_nodes"}, {"score": 0.002722930209707764, "phrase": "unlimited_number"}, {"score": 0.002574788013427524, "phrase": "total_program_execution_time"}, {"score": 0.0023807981747706376, "phrase": "logical_jvms"}, {"score": 0.0023151088048303705, "phrase": "real_processors"}, {"score": 0.002276566401216226, "phrase": "presented_approach"}, {"score": 0.0022261705957258506, "phrase": "branch_optimization_techniques"}, {"score": 0.0021526564019119466, "phrase": "mutually-exclusive_paths"}], "paper_keywords": [""], "paper_abstract": "The paper presents a Java byte-code optimization algorithm, which determines an initial distribution of objects among virtual machines (JVMs) so as to decrease direct inter-object communication and balance loads of the virtual machines. The proposed optimization algorithm is based on a graph representation of control and data dependencies between methods in Java programs. These dependencies, expressed in the form of conditional macro-dataflow graphs, are discovered by a static analysis of program byte-code. Object placement optimization is performed before a Java program is executed in a parallel system. The optimization methods are based on the Dominant Sequence Clustering (DSC) approach. First, macro nodes are clustered on an unlimited number of processors (logical JVMs) to reduce the total program execution time. Next, clusters are merged and scheduled to adjust the number of logical JVMs to the number of real processors. The presented approach is supported by branch optimization techniques, which include detection of mutually-exclusive paths and scheduling of most often-used-paths based on branch probabilities.", "paper_title": "Java programs optimization based on the most-often-used-paths approach", "paper_id": "WOS:000238107100114"}