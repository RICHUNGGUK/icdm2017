{"auto_keywords": [{"score": 0.04961597900198373, "phrase": "mapreduce"}, {"score": 0.04648769589495942, "phrase": "single_multicore_machine"}, {"score": 0.027182236374480674, "phrase": "peacock"}, {"score": 0.00481495049065317, "phrase": "multicore_platform"}, {"score": 0.004608879242346434, "phrase": "promising_alternative"}, {"score": 0.004542158659382197, "phrase": "parallel_programming"}, {"score": 0.004498213310668266, "phrase": "high_performance"}, {"score": 0.0043477114072437316, "phrase": "cluster_version"}, {"score": 0.003831310632470526, "phrase": "single_execution_flow"}, {"score": 0.0035965032173588753, "phrase": "fixed_execution_flow"}, {"score": 0.0035443861412929006, "phrase": "mapreduce_program_structure"}, {"score": 0.003493021648360933, "phrase": "significant_overheads"}, {"score": 0.00323134923196813, "phrase": "unnecessary_reduce_phase"}, {"score": 0.003092842645798083, "phrase": "workload_characterization"}, {"score": 0.0029747028229638625, "phrase": "key-value_pairs"}, {"score": 0.002861062731782219, "phrase": "refined_workload_characterization_model"}, {"score": 0.0027922467043592597, "phrase": "mapreduce_workloads"}, {"score": 0.002659527314613792, "phrase": "new_mapreduce_system"}, {"score": 0.0026337482179592422, "phrase": "workload-customizable_execution_flow"}], "paper_keywords": ["MapReduce", " Workload-customizable", " Performance", " Multicore"], "paper_abstract": "MapReduce has been demonstrated to be a promising alternative to simplify parallel programming with high performance on single multicore machine. Compared to the cluster version, MapReduce does not have bottlenecks in disk and network I/O on single multicore machine, and it is more sensitive to characteristics of workloads. A single execution flow may be inefficient for many classes of workloads. For example, the fixed execution flow of the MapReduce program structure can impose significant overheads for workloads that inherently have only one emitted value per key, which are mainly caused by the unnecessary reduce phase. In this paper, we refine the workload characterization from Phoenix++ according to the attributes of key-value pairs, and give a demonstration that the refined workload characterization model covers all classes of MapReduce workloads. Based on the model, we propose a new MapReduce system with workload-customizable execution flow. The system, namely Peacock, is implemented on top of Phoenix++. Experiments with four different classes of benchmarks on a 16-core Intel-based server show that Peacock achieves better performance than Phoenix++ for workloads that inherently have only one emitted value per key (up to a speedup of ) while identical for other classes of workloads.", "paper_title": "Peacock: a customizable MapReduce for multicore platform", "paper_id": "WOS:000344813000025"}