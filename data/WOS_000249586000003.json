{"auto_keywords": [{"score": 0.04578126386075496, "phrase": "composition_relationships"}, {"score": 0.015719716506582538, "phrase": "uml_class_diagrams"}, {"score": 0.004543352284098364, "phrase": "reverse_engineering"}, {"score": 0.0037490909410974166, "phrase": "component_code"}, {"score": 0.0035851703423654432, "phrase": "serious_program_flaws"}, {"score": 0.0035374012552316573, "phrase": "representation_exposure"}, {"score": 0.003459191419478298, "phrase": "implementation-level_composition_model"}, {"score": 0.003367611042980526, "phrase": "novel_approach"}, {"score": 0.003293142761521425, "phrase": "java_software"}, {"score": 0.0032059442984238664, "phrase": "static_ownership_inference"}, {"score": 0.0031210475158175432, "phrase": "class_analysis"}, {"score": 0.0030248298759040695, "phrase": "incomplete_programs"}, {"score": 0.002971182100871581, "phrase": "empirical_results"}, {"score": 0.0027535633837592597, "phrase": "examined_fields"}, {"score": 0.0025632898741546556, "phrase": "precision_evaluation"}, {"score": 0.0023021895404322767, "phrase": "precise_identification"}, {"score": 0.0022816681646340518, "phrase": "interclass_relationships"}, {"score": 0.002221192647477371, "phrase": "simple_and_inexpensive_analysis"}, {"score": 0.0021334650920198715, "phrase": "reverse_engineering_tools"}, {"score": 0.0021049977753042253, "phrase": "iterative_model-driven_development"}], "paper_keywords": ["UML", " points-to analysis", " reverse engineering", " ownership", " algorithms"], "paper_abstract": "Knowing which associations are compositions is important in a tool for the reverse engineering of UML class diagrams. Firstly, recovery of composition relationships bridges the gap between design and code. Secondly, since composition relationships explicitly state a requirement that certain representations cannot be exposed, it is important to determine if this requirement is met by component code. Verifying that compositions are implemented properly may prevent serious program flaws due to representation exposure. We propose an implementation-level composition model based on ownership and a novel approach for identifying compositions in Java software. Our approach is based on static ownership inference; it is parameterized by class analysis and is designed to work on incomplete programs. We present empirical results from two instantiation of our approach. For one of these instantiations, on average 40% of the examined fields account for relationships that are identified as compositions. In addition, we present a precision evaluation which shows that the analysis achieves almost perfect precision-that is, it almost never misses composition relationships. The results indicate that precise identification of interclass relationships can be done with a simple and inexpensive analysis, and thus can be easily incorporated in reverse engineering tools that support iterative model-driven development.", "paper_title": "Composition inference for UML class diagrams", "paper_id": "WOS:000249586000003"}