{"auto_keywords": [{"score": 0.028442242288112457, "phrase": "hybrid_strategy"}, {"score": 0.00481495049065317, "phrase": "cast_insertion_strategies"}, {"score": 0.004762550320451225, "phrase": "gradually-typed_objects"}, {"score": 0.004608730887154718, "phrase": "smooth_and_progressive_integration"}, {"score": 0.004558564684763264, "phrase": "static_and_dynamic_typing"}, {"score": 0.00441130431691048, "phrase": "gradually-typed_program"}, {"score": 0.004245476558619167, "phrase": "intermediate_language"}, {"score": 0.0039322149318145845, "phrase": "dynamically-typed_portions"}, {"score": 0.003702323283528696, "phrase": "different_cast_insertion_strategies"}, {"score": 0.003602302241898501, "phrase": "gradualtalk"}, {"score": 0.003485825423653295, "phrase": "smalltalk"}, {"score": 0.003318108914777263, "phrase": "siek"}, {"score": 0.003281946812262583, "phrase": "taha"}, {"score": 0.003175792987190496, "phrase": "call_sites"}, {"score": 0.0030730639262332698, "phrase": "dual_approach"}, {"score": 0.0027539714188091866, "phrase": "different_scenarios"}, {"score": 0.002163535133532765, "phrase": "promising_cast_insertion_strategy"}, {"score": 0.002128220632893247, "phrase": "gradual_types"}, {"score": 0.0021049977753042253, "phrase": "existing_dynamicallytyped_languages"}], "paper_keywords": ["gradual typing", " casts", " Gradualtalk", " Languages", " Performance"], "paper_abstract": "Gradual typing enables a smooth and progressive integration of static and dynamic typing. The semantics of a gradually-typed program is given by translation to an intermediate language with casts: runtime type checks that control the boundaries between statically- and dynamically-typed portions of a program. This paper studies the performance of different cast insertion strategies in the context of Gradualtalk, a gradually-typed Smalltalk. We first implement the strategy specified by Siek and Taha, which inserts casts at call sites. We then study the dual approach, which consists in performing casts in callees. Based on the observation that both strategies perform well in different scenarios, we design a hybrid strategy that combines the best of each approach. We evaluate these three strategies using both micro- and macro-benchmarks. We also discuss the impact of these strategies on memory, modularity, and inheritance. The hybrid strategy constitutes a promising cast insertion strategy for adding gradual types to existing dynamicallytyped languages.", "paper_title": "Cast Insertion Strategies for Gradually-Typed Objects", "paper_id": "WOS:000331121000004"}