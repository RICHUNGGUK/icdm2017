{"auto_keywords": [{"score": 0.03550532871137409, "phrase": "-time_solution"}, {"score": 0.00481495049065317, "phrase": "binary_jumbled_pattern_matching"}, {"score": 0.004358368398332723, "phrase": "binary_string"}, {"score": 0.00376409764683147, "phrase": "vertex-labeled_trees"}, {"score": 0.0035705347414368726, "phrase": "\"connected_subgraph"}, {"score": 0.0028736379396305596, "phrase": "context-free_grammar"}, {"score": 0.0028069481183245044, "phrase": "chomsky"}, {"score": 0.002790511479398411, "phrase": "normal_form"}, {"score": 0.002693919110230191, "phrase": "known_bounds"}, {"score": 0.002193367454830741, "phrase": "constant_number"}, {"score": 0.0021677478798910565, "phrase": "different_vertex-labels"}, {"score": 0.0021049977753042253, "phrase": "previous_best_algorithm"}], "paper_keywords": ["Pattern matching", " Tree pattern matching", " Permutation pattern matching", " Grammar compression", " Graph motifs"], "paper_abstract": "Binary jumbled pattern matching asks to preprocess a binary string in order to answer queries which ask for a substring of that is of length and has exactly 1-bits. This problem naturally generalizes to vertex-labeled trees and graphs by replacing \"substring\" with \"connected subgraph\". In this paper, we give an -time solution for trees, matching the currently best bound for (the simpler problem of) strings. We also give an -time solution for strings that are compressed by a context-free grammar of size in Chomsky normal form. This solution improves the known bounds when the string is compressible under many popular compression schemes. Finally, we prove that on graphs the problem is fixed-parameter tractable with respect to the treewidth of the graph, even for a constant number of different vertex-labels, thus improving the previous best algorithm.", "paper_title": "Binary Jumbled Pattern Matching on Trees and Tree-Like Structures", "paper_id": "WOS:000362973600004"}