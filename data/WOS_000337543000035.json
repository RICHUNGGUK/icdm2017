{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "stochastic_rendering"}, {"score": 0.004598933498016774, "phrase": "motion_blur"}, {"score": 0.004539005582217309, "phrase": "defocus_blur"}, {"score": 0.004223032986655664, "phrase": "naive_way"}, {"score": 0.004086744751579196, "phrase": "visibility_sample"}, {"score": 0.003928969293303814, "phrase": "previous_work"}, {"score": 0.003802135020791801, "phrase": "visibility_sampling"}, {"score": 0.003752550907120244, "phrase": "shader_caching_algorithms"}, {"score": 0.003631390978147703, "phrase": "novel_technique"}, {"score": 0.0034911335714333507, "phrase": "stochastic_rasterizer"}, {"score": 0.003269266730193333, "phrase": "object-space_texture"}, {"score": 0.0031429517477457925, "phrase": "appropriate_mipmap_level"}, {"score": 0.002962543869356265, "phrase": "shading_rate"}, {"score": 0.0028293966058473476, "phrase": "noticeable_blurring"}, {"score": 0.002737960968372391, "phrase": "rendered_image"}, {"score": 0.0026321198895843173, "phrase": "two-pass_algorithm"}, {"score": 0.002464709648714996, "phrase": "gpu_thread_synchronization"}, {"score": 0.0023850311572318496, "phrase": "real-time_frame_rates"}, {"score": 0.0022480304016499605, "phrase": "previous_methods"}, {"score": 0.0021753413850499467, "phrase": "important_step"}, {"score": 0.0021328586481696157, "phrase": "stochastic_rasterization"}, {"score": 0.0021049977753042253, "phrase": "real_time"}], "paper_keywords": [""], "paper_abstract": "When rendering effects such as motion blur and defocus blur, shading can become very expensive if done in a naive way, i.e. shading each visibility sample. To improve performance, previous work often decouple shading from visibility sampling using shader caching algorithms. We present a novel technique for reusing shading in a stochastic rasterizer. Shading is computed hierarchically and sparsely in an object-space texture, and by selecting an appropriate mipmap level for each triangle, we ensure that the shading rate is sufficiently high so that no noticeable blurring is introduced in the rendered image. Furthermore, with a two-pass algorithm, we separate shading from reuse and thus avoid GPU thread synchronization. Our method runs at real-time frame rates and is up to 3 x faster than previous methods. This is an important step forward for stochastic rasterization in real time.", "paper_title": "Adaptive texture space shading for stochastic rendering", "paper_id": "WOS:000337543000035"}