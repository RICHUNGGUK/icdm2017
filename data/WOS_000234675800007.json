{"auto_keywords": [{"score": 0.0447884783780907, "phrase": "skyline_computation"}, {"score": 0.00481495049065317, "phrase": "window_skylines"}, {"score": 0.004768378525561471, "phrase": "data_streams"}, {"score": 0.004631335513513859, "phrase": "multidimensional_data_set"}, {"score": 0.004564291332315995, "phrase": "\"best\"_tuples"}, {"score": 0.004476399615305783, "phrase": "preference_function"}, {"score": 0.004222707054751191, "phrase": "considerable_attention"}, {"score": 0.004181839414007266, "phrase": "conventional_databases"}, {"score": 0.004121275290411653, "phrase": "existing_algorithms"}, {"score": 0.003906586074865932, "phrase": "static_data"}, {"score": 0.0034423989472667756, "phrase": "single_skyline"}, {"score": 0.0033271045779740683, "phrase": "skyline_changes"}, {"score": 0.003018468582368033, "phrase": "main-memory_consumption"}, {"score": 0.0029031614127920232, "phrase": "stream_environments"}, {"score": 0.002861062731782219, "phrase": "query_processing"}, {"score": 0.0026337482179592422, "phrase": "incoming_data"}, {"score": 0.0024963543716522087, "phrase": "stream_skylines"}, {"score": 0.002199363362666037, "phrase": "asymptotical_performance"}, {"score": 0.0021674482571326283, "phrase": "proposed_solutions"}, {"score": 0.0021049977753042253, "phrase": "extensive_experiments"}], "paper_keywords": ["skyline", " stream", " database", " algorithm"], "paper_abstract": "The skyline of a multidimensional data set contains the \"best\" tuples according to any preference function that is monotonic on each dimension. Although skyline computation has received considerable attention in conventional databases, the existing algorithms are inapplicable to stream applications because 1) they assume static data that are stored in the disk ( rather than continuously arriving/expiring), 2) they focus on \"one-time\" execution that returns a single skyline ( in contrast to constantly tracking skyline changes), and 3) they aim at reducing the I/O overhead ( as opposed to minimizing the CPU-cost and main-memory consumption). This paper studies skyline computation in stream environments, where query processing takes into account only a \"sliding window\" covering the most recent tuples. We propose algorithms that continuously monitor the incoming data and maintain the skyline incrementally. Our techniques utilize several interesting properties of stream skylines to improve space/time efficiency by expunging data from the system as early as possible (i.e., before their expiration). Furthermore, we analyze the asymptotical performance of the proposed solutions, and evaluate their efficiency with extensive experiments.", "paper_title": "Maintaining sliding window skylines on data streams", "paper_id": "WOS:000234675800007"}