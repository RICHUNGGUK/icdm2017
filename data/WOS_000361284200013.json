{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "off-chip_accesses"}, {"score": 0.029561758661908195, "phrase": "network_latency"}, {"score": 0.004767833887990283, "phrase": "multicores"}, {"score": 0.004278807087784626, "phrase": "on-chip_network"}, {"score": 0.004216112320418982, "phrase": "considerable_amount"}, {"score": 0.003993958025223994, "phrase": "memory_access_latency"}, {"score": 0.0033452741392850523, "phrase": "compiler-based_off-chip_data_access_localization_strategy"}, {"score": 0.0032160319265621285, "phrase": "memory_space"}, {"score": 0.0031532895341013297, "phrase": "off-chip_access"}, {"score": 0.0031070348334684356, "phrase": "minimum_number"}, {"score": 0.0029722900280316216, "phrase": "memory_controller"}, {"score": 0.0026148807877309417, "phrase": "on-chip_accesses"}, {"score": 0.0025137856138000014, "phrase": "memory_latency"}, {"score": 0.002428530921948425, "phrase": "reduced_queue_latencies"}, {"score": 0.0023694065215394593, "phrase": "experimental_evaluation"}, {"score": 0.0022223176391038785, "phrase": "last-level_caches"}, {"score": 0.0021049977753042253, "phrase": "off-chip_data_accesses"}], "paper_keywords": ["Manycores", " off-chip accesses localization", " memory controller"], "paper_abstract": "In a network-on-chip (NoC) based manycore architecture, an off-chip data access (main memory access) needs to travel through the on-chip network, spending considerable amount of time within the chip (in addition to the memory access latency). In addition, it contends with on-chip (cache) accesses as both use the same NoC resources. In this paper, focusing on data-parallel, multithreaded applications, we propose a compiler-based off-chip data access localization strategy, which places data elements in the memory space such that an off-chip access traverses a minimum number of links (hops) to reach the memory controller that handles this access. This brings three main benefits. First, the network latency of off-chip accesses gets reduced; second, the network latency of on-chip accesses gets reduced; and finally, the memory latency of off-chip accesses improves, due to reduced queue latencies. We present an experimental evaluation of our optimization strategy using a set of 13 multithreaded application programs under both private and shared last-level caches. The results collected emphasize the importance of optimizing the off-chip data accesses.", "paper_title": "Optimizing Off-Chip Accesses in Multicores", "paper_id": "WOS:000361284200013"}