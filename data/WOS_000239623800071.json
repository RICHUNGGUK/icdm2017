{"auto_keywords": [{"score": 0.04885877600670675, "phrase": "procedural_programs"}, {"score": 0.00481495049065317, "phrase": "lightweight_fault_localization"}, {"score": 0.004231699728933577, "phrase": "novel_extension"}, {"score": 0.0040708542958968605, "phrase": "lightweight_model"}, {"score": 0.003967021436047945, "phrase": "fault_localization"}, {"score": 0.003577414339646767, "phrase": "procedural_programming_paradigm"}, {"score": 0.00306334226516593, "phrase": "subsequent_fault_localization"}, {"score": 0.0029467742734417255, "phrase": "utmost_importance"}, {"score": 0.0021049977753042253, "phrase": "misbehavior's_real_cause"}], "paper_keywords": ["model-based software debugging", " software debugging", " control software", " procedural abstraction"], "paper_abstract": "In this paper we present a novel extension of a lightweight model for fault localization that allows for modeling procedural programs. The procedural programming paradigm is often used in (safety-critical) control software where a program's verification and subsequent fault localization is of utmost importance. In this article we present results from our recent case study relying on this kind of programs. Notably, our lightweight model is always able to localize the misbehavior's real cause.", "paper_title": "Towards lightweight fault localization in procedural programs", "paper_id": "WOS:000239623800071"}