{"auto_keywords": [{"score": 0.04422898331236466, "phrase": "gpu_kernel"}, {"score": 0.013410465405923338, "phrase": "parallel_loops"}, {"score": 0.011871065766175824, "phrase": "dynamic_parallelism"}, {"score": 0.010542215025881272, "phrase": "gpgpu_benchmarks"}, {"score": 0.009140644557911892, "phrase": "nested_parallelism"}, {"score": 0.00481495049065317, "phrase": "cuda-np"}, {"score": 0.004765889452740394, "phrase": "nested_thread-level_parallelism"}, {"score": 0.004685224205630963, "phrase": "parallel_programs"}, {"score": 0.004605917942709477, "phrase": "code_sections"}, {"score": 0.00457457085958402, "phrase": "different_thread-level_parallelism"}, {"score": 0.004301834610818624, "phrase": "parallel_program"}, {"score": 0.004200197763119297, "phrase": "cuda_programs"}, {"score": 0.004129067429043414, "phrase": "sequential_code"}, {"score": 0.003976775340098895, "phrase": "latest_nvidia_kepler_architecture"}, {"score": 0.0038695436922618876, "phrase": "gpu_thread"}, {"score": 0.0035892794633115227, "phrase": "parent_thread"}, {"score": 0.003504418473478722, "phrase": "global_memory"}, {"score": 0.0034332736827447654, "phrase": "gpu_kernels"}, {"score": 0.0027678827705912993, "phrase": "cuda"}, {"score": 0.002720916895509682, "phrase": "cuda-np."}, {"score": 0.002647458797373923, "phrase": "high_number"}, {"score": 0.002602555367635598, "phrase": "gpu_program"}, {"score": 0.0025236349164549877, "phrase": "different_numbers"}, {"score": 0.0024893297856666808, "phrase": "different_code_sections"}, {"score": 0.002430411367515404, "phrase": "directive-based_compiler_approach"}, {"score": 0.0023728841359713106, "phrase": "application_developer"}, {"score": 0.002332626862738603, "phrase": "openmp-like_pragmas"}, {"score": 0.0023167153974120083, "phrase": "parallelizable_code_sections"}, {"score": 0.002254145085288829, "phrase": "optimized_gpu_kernels"}, {"score": 0.0022007808283071133, "phrase": "scan_primitives"}, {"score": 0.0021782980803068505, "phrase": "different_ways"}, {"score": 0.0021560445153869985, "phrase": "parallel_loop_iterations"}, {"score": 0.0021049977753042253, "phrase": "on-chip_resource"}], "paper_keywords": ["GPGPU", " nested parallelism", " compiler", " local memory"], "paper_abstract": "Parallel programs consist of series of code sections with different thread-level parallelism (TLP). As a result, it is rather common that a thread in a parallel program, such as a GPU kernel in CUDA programs, still contains both sequential code and parallel loops. In order to leverage such parallel loops, the latest NVIDIA Kepler architecture introduces dynamic parallelism, which allows a GPU thread to start another GPU kernel, thereby reducing the overhead of launching kernels from a CPU. However, with dynamic parallelism, a parent thread can only communicate with its child threads through global memory and the overhead of launching GPU kernels is non-trivial even within GPUs. In this paper, we first study a set of GPGPU benchmarks that contain parallel loops, and highlight that these benchmarks do not have a very high loop count or high degree of TLP. Consequently, the benefits of leveraging such parallel loops using dynamic parallelism are too limited to offset its overhead. We then present our proposed solution to exploit nested parallelism in CUDA, referred to as CUDA-NP. With CUDA-NP, we initially enable a high number of threads when a GPU program starts, and use control flow to activate different numbers of threads for different code sections. We implement our proposed CUDA-NP framework using a directive-based compiler approach. For a GPU kernel, an application developer only needs to add OpenMP-like pragmas for parallelizable code sections. Then, our CUDA-NP compiler automatically generates the optimized GPU kernels. It supports both the reduction and the scan primitives, explores different ways to distribute parallel loop iterations into threads, and efficiently manages on-chip resource. Our experiments show that for a set of GPGPU benchmarks, which have already been optimized and contain nested parallelism, our proposed CUDA-NP framework further improves the performance by up to 6.69 times and 2.01 times on average.", "paper_title": "CUDA-NP: Realizing Nested Thread-Level Parallelism in GPGPU Applications", "paper_id": "WOS:000349577600002"}