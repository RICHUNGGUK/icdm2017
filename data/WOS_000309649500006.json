{"auto_keywords": [{"score": 0.04169620672910205, "phrase": "left_parse"}, {"score": 0.00481495049065317, "phrase": "embedded_left_lr_parser"}, {"score": 0.003916098498242888, "phrase": "input_string"}, {"score": 0.0036616109902631293, "phrase": "file_marker"}, {"score": 0.0034951469511975346, "phrase": "lookahead_strings"}, {"score": 0.0034236045013591437, "phrase": "parser_generation_time"}, {"score": 0.002670884656785558, "phrase": "deterministic_context-free_grammar"}, {"score": 0.0022168460543913787, "phrase": "compiler_writer"}, {"score": 0.002137947680862631, "phrase": "different_parsing_strategies"}, {"score": 0.0021049977753042253, "phrase": "compiler_implementation"}], "paper_keywords": ["embedded parsing", " left LR parsing", " LL conflicts"], "paper_abstract": "A method for resolving LL(k) conflicts using small LR(k) parsers (called embedded left LR(k) parsers) is described. An embedded left LR(k) parser is capable of (a) producing the prefix of the left parse of the input string and (b) stopping not on the end-of-file marker but on any string from the set of lookahead strings fixed at the parser generation time. The conditions regarding the termination of the embedded left LR(k) parser if used within LL(k) (and similar) parsers are defined and examined in-depth. It is proved that an LL(k) parser augmented with a set of embedded left LR(k) parsers can parse any deterministic context-free grammar in the same asymptotic time as LR(k) parser. As the embedded left LR(k) parser produces the prefix of the left parse, the LL(k) parser augmented with embedded left LR(k) parsers still produces the left parse and the compiler writer does not need to bother with different parsing strategies during the compiler implementation.", "paper_title": "LL conflict resolution using the embedded left LR parser", "paper_id": "WOS:000309649500006"}