{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "concurrency_control"}, {"score": 0.03156184405827009, "phrase": "sequential_library"}, {"score": 0.030570347867177793, "phrase": "concurrent_clients"}, {"score": 0.023808348905144983, "phrase": "library_methods"}, {"score": 0.004752221133109136, "phrase": "sequential_proofs."}, {"score": 0.004479855062309818, "phrase": "isolation_requirements"}, {"score": 0.004392565073466714, "phrase": "concurrent_program"}, {"score": 0.003631390978147703, "phrase": "sequential_proof"}, {"score": 0.00329080576226637, "phrase": "concurrent_interleavings"}, {"score": 0.002547043222086858, "phrase": "sequential_execution"}], "paper_keywords": ["concurrency control", " program synthesis"], "paper_abstract": "We are interested in identifying and enforcing the isolation requirements of a concurrent program, i.e., concurrency control that ensures that the program meets its specification. The thesis of this paper is that this can be done systematically starting from a sequential proof, i.e., a proof of correctness of the program in the absence of concurrent interleavings. We illustrate our thesis by presenting a solution to the problem of making a sequential library thread-safe for concurrent clients. We consider a sequential library annotated with assertions along with a proof that these assertions hold in a sequential execution. We show how we can use the proof to derive concurrency control that ensures that any execution of the library methods, when invoked by concurrent clients, satisfies the same assertions. We also present an extension to guarantee that the library methods are linearizable or atomic.", "paper_title": "LOGICAL CONCURRENCY CONTROL FROM SEQUENTIAL PROOFS", "paper_id": "WOS:000301228300017"}