{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "test_coverage"}, {"score": 0.04051582885451674, "phrase": "occf"}, {"score": 0.015593050244537988, "phrase": "multiple_programming_languages"}, {"score": 0.006391175711236264, "phrase": "measurement_tools"}, {"score": 0.00467905143301368, "phrase": "important_indicator"}, {"score": 0.004382591802405206, "phrase": "existing_measurement_tools"}, {"score": 0.0040052617265655035, "phrase": "consistent_and_flexible_measurement_framework"}, {"score": 0.0036453427552753533, "phrase": "abstract_syntax_tree"}, {"score": 0.003456359260921982, "phrase": "new_programming_languages"}, {"score": 0.00335867620389808, "phrase": "programming_language_support"}, {"score": 0.0031845067058084613, "phrase": "programming_languages"}, {"score": 0.0031199418866663543, "phrase": "consistent_measurements"}, {"score": 0.0030818310926031024, "phrase": "programming_language"}, {"score": 0.0029581155916843663, "phrase": "measurement_range"}, {"score": 0.002910030262734436, "phrase": "xpath"}, {"score": 0.0028744731986533076, "phrase": "user_code"}, {"score": 0.002759058732719621, "phrase": "sample_tool"}, {"score": 0.002714234977715842, "phrase": "java"}, {"score": 0.0026810651606695318, "phrase": "python"}, {"score": 0.002659142621852998, "phrase": "occf._occf"}, {"score": 0.002510846811823182, "phrase": "ruby"}, {"score": 0.0024903420152789135, "phrase": "java_script"}, {"score": 0.0024599033143185853, "phrase": "lua"}, {"score": 0.002202123699556382, "phrase": "new_test-coverage-criterion"}, {"score": 0.0021049977753042253, "phrase": "conventional_non-framework-based_tools"}], "paper_keywords": ["software testing", " test coverage", " code coverage", " metrics", " framework"], "paper_abstract": "Test coverage is an important indicator of whether software has been sufficiently tested. However, there are several problems with the existing measurement tools for test coverage, such as their cost of development and maintenance, inconsistency, and inflexibility in measurement. We propose a consistent and flexible measurement framework for test coverage that we call the Open Code Coverage Framework (OCCF). It supports multiple programming languages by extracting the commonalities from multiple programming languages using an abstract syntax tree to help in the development of the measurement tools for the test coverage of new programming languages. OCCF allows users to add programming language support independently of the test-coverage-criteria and also to add test-coverage-criteria support independently of programming languages in order to take consistent measurements in each programming language. Moreover, OCCF provides two methods for changin the measurement range and elements using XPath and adding user code in order to make more flexible measurements. We implemented a sample tool for C, Java, and Python using OCCF. OCCF can measure four test-coverage-criteria. We also confirmed that OCCF can support C#, Ruby, Java Script, and Lua. Moreover, we reduced the lines of code (LOCs) required to implement measurement tools for test coverage by approximately 90% and the time to implement a new test-coverage-criterion by over 80% in an experiment that compared OCCF with the conventional non-framework-based tools.", "paper_title": "Open Code Coverage Framework: A Framework for Consistent, Flexible and Complete Measurement of Test Coverage Supporting Multiple Programming Languages", "paper_id": "WOS:000298304900016"}