{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fpga_design"}, {"score": 0.004676575291629554, "phrase": "formal_verification"}, {"score": 0.004631335513513859, "phrase": "vhsic_hardware_description_language"}, {"score": 0.004520132822496416, "phrase": "field-programmable_gate_array"}, {"score": 0.004161553532799662, "phrase": "practical_approach"}, {"score": 0.0040027552011993005, "phrase": "semi-automatic_way"}, {"score": 0.0039447744176901054, "phrase": "fpga_vhdl_software_deadlocks"}, {"score": 0.0036493838225192883, "phrase": "vhdl_modules"}, {"score": 0.0034423989472667756, "phrase": "verilog_models"}, {"score": 0.003359647377874098, "phrase": "smv_tools"}, {"score": 0.003278878522165815, "phrase": "verification_results"}, {"score": 0.003247118428825451, "phrase": "smv"}, {"score": 0.0030628762739398855, "phrase": "vhdl_code"}, {"score": 0.003018468582368033, "phrase": "deadlocking_code"}, {"score": 0.0028890603352364273, "phrase": "vhdl_verification"}, {"score": 0.0028195727965553367, "phrase": "safety-critical_software"}, {"score": 0.0025085435314540837, "phrase": "development_stage"}, {"score": 0.0024126686412257407, "phrase": "long-term_software_testing_stage"}, {"score": 0.002297949552105756, "phrase": "vhdl_software"}, {"score": 0.0022536005664642294, "phrase": "special_case"}, {"score": 0.0021780349459687622, "phrase": "vhdl_deadlocks"}, {"score": 0.0021049977753042253, "phrase": "fpga_deadlock_detection_approach"}], "paper_keywords": ["Field-Programmable Gate Array (FPGA)", " VHSIC Hardware Description Language (VHDL)", " verification", " deadlocks", " Multifunction Vehicle Bus Controller (MVBC)"], "paper_abstract": "Formal verification of VHSIC Hardware Description Language (VHDL) in Field-Programmable Gate Array (FPGA) design has been discussed for many years. In this paper we provide a practical approach to do so. We present a semi-automatic way to verify FPGA VHDL software deadlocks, especially those that reside in automata. A domain is defined to represent the VHDL modules that will be verified; these modules will be transformed into Verilog models and be verified by SMV tools. By analyzing the verification results of SMV, deadlocks can be found; after looking back to the VHDL code, the deadlocking code is located and the problem is solved. VHDL verification is particularly important in safety-critical software. As an example, our solution is applied to a Multifunction Vehicle Bus Controller (MVBC) system for a train. The safety properties were tested well in the development stage, but experienced a breakdown during the long-term software testing stage, which was mainly caused by deadlocks in the VHDL software. In this special case, we managed to locate the VHDL deadlocks and solve the problem by the FPGA deadlock detection approach provided in this paper, which demonstrates that our solution works well.", "paper_title": "Deadlock Detection in FPGA Design: A Practical Approach", "paper_id": "WOS:000364490200011"}