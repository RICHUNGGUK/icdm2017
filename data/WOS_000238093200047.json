{"auto_keywords": [{"score": 0.03162986421078837, "phrase": "reachability_queries"}, {"score": 0.00481495049065317, "phrase": "great_expressive_power"}, {"score": 0.004718314112245913, "phrase": "complex_relationships"}, {"score": 0.004670722261414736, "phrase": "data_objects"}, {"score": 0.004553822674247401, "phrase": "large_graph"}, {"score": 0.004241771072194993, "phrase": "primitive_graph_query"}, {"score": 0.0040525061916685924, "phrase": "reachability_query"}, {"score": 0.003971111060168551, "phrase": "curved_right_arrow_d"}, {"score": 0.003793876828939456, "phrase": "type_d"}, {"score": 0.0036245239349157236, "phrase": "type_a."}, {"score": 0.00349803055484394, "phrase": "existing_structural_join_algorithms"}, {"score": 0.0034277338119963886, "phrase": "xml_query_processing"}, {"score": 0.0030500051941781034, "phrase": "novel_approach"}, {"score": 0.002884317729022721, "phrase": "space_consumption"}, {"score": 0.002769483748975581, "phrase": "required_information"}, {"score": 0.0025533148412439166, "phrase": "directed_graph_g"}, {"score": 0.002342048999008582, "phrase": "novel_join-index"}, {"score": 0.002271725588755076, "phrase": "small_table"}, {"score": 0.00217017119491777, "phrase": "high_efficiency"}, {"score": 0.0021049977753042253, "phrase": "extensive_experimental_studies"}], "paper_keywords": [""], "paper_abstract": "Graph has great expressive power to describe the complex relationships among data objects, and there are large graph datasets available. In this paper, we focus ourselves on processing a primitive graph query. We call it reachability query. The reachability query, denoted A curved right arrow D, is to find all elements of a type D that are reachable from some elements in another type A. The problem is challenging because the existing structural join algorithms, studied in XML query processing, cannot be directly applied to it, because those techniques make use of the tree-structure heavily. We propose a novel approach which can process reachability queries on the fly while keeping the space consumption small that is needed to keep the required information for processing reachability queries. In brief, our approach is based on 2-hop labeling for a directed graph G which consumes O(vertical bar V vertical bar center dot log vertical bar E vertical bar) space. We construct a novel join-index which is built on a small table and B+-tree. With the join-index, the high efficiency is achieved. We conducted extensive experimental studies, and we confirm that our approach can efficiently process reachability queries over a graph or a tree.", "paper_title": "Fast reachability query processing", "paper_id": "WOS:000238093200047"}