{"auto_keywords": [{"score": 0.04263705217304589, "phrase": "dlv"}, {"score": 0.04117631718992775, "phrase": "reason_calculus"}, {"score": 0.030314544532735906, "phrase": "look-back_techniques"}, {"score": 0.00481495049065317, "phrase": "qbf_solvers"}, {"score": 0.00459809245936039, "phrase": "disjunctive_answer_set_programs"}, {"score": 0.0044199701363984495, "phrase": "grounding_part"}, {"score": 0.004376523540676604, "phrase": "propositional_model-finding_part"}, {"score": 0.004124630249202334, "phrase": "backtracking_search"}, {"score": 0.004004151534026732, "phrase": "backjumping_techniques"}, {"score": 0.0036392821787269727, "phrase": "search_process"}, {"score": 0.0035680320746705064, "phrase": "search_space"}, {"score": 0.003521305923598047, "phrase": "answer_set"}, {"score": 0.0032002934215958068, "phrase": "search_tree"}, {"score": 0.003015893651662638, "phrase": "look-back_heuristics"}, {"score": 0.0029373757799982356, "phrase": "suitable_look-back_heuristics"}, {"score": 0.0028893405654376826, "phrase": "experimental_evaluation"}, {"score": 0.002713842991944533, "phrase": "thorough_experimental_analysis"}, {"score": 0.0025574004111658744, "phrase": "complexity_classes"}, {"score": 0.0023627153839118602, "phrase": "dlv."}, {"score": 0.0023011632163055166, "phrase": "\"native\"_qbf_solvers"}, {"score": 0.0022560515732199062, "phrase": "best_solvers"}, {"score": 0.0022412113034595903, "phrase": "recent_qbf_evaluations"}], "paper_keywords": ["knowledge representation and reasoning", " nonmonotonic reasoning", " heuristics"], "paper_abstract": "DLV is the state-of-the-art system for evaluating disjunctive answer set programs. As in most Answer Set Programming (ASP) systems, its implementation is divided in a grounding part and a propositional model-finding part. In this paper, we focus on the latter, which relies on an algorithm using backtracking search. Recently, DLV has been enhanced with backjumping techniques, which also involve a reason calculus, recording causes for the truth or falsity of atoms during the search. This reason calculus allows for looking back in the search process for identifying areas in the search space in which no answer set will be found. We can also define heuristics which make use of the information about reasons, preferring literals that were the reasons of more inconsistent branches of the search tree. This heuristics thus use information gathered earlier in the computation, and are therefore referred to as look-back heuristics. In this paper, we formulate suitable look-back heuristics and focus on the experimental evaluation of the look-back techniques that we have implemented in DLV, obtaining the system DLVLB. We have conducted a thorough experimental analysis considering both randomly-generated and structured instances of the 2QBF problem, the canonical problem for the complexity classes Sigma(P)(2) and Pi(P)(2). Any problem in these classes can be expressed uniformly using ASP and can therefore be solved by DLV. We have also evaluated the same benchmark using \"native\" QBF solvers, which were among the best solvers in recent QBF Evaluations. The comparison shows that DLV endowed with look-back techniques is competitive with the best available QBF solvers on such instances. (c) 2008 Elsevier Inc. All rights reserved.", "paper_title": "Look-back techniques and heuristics in DLV: Implementation, evaluation, and comparison to QBF solvers", "paper_id": "WOS:000258968700006"}