{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "control_software_generation"}, {"score": 0.004622783000449884, "phrase": "mechatronic_systems"}, {"score": 0.004490212943845175, "phrase": "synergetic_integration"}, {"score": 0.004067152645111547, "phrase": "design_domains"}, {"score": 0.003927516959113487, "phrase": "required_integrated_functionality"}, {"score": 0.003726967166630923, "phrase": "function_modeling"}, {"score": 0.0036838048761094933, "phrase": "multi-domain_modeling"}, {"score": 0.0035989687070420977, "phrase": "control_software"}, {"score": 0.003516079377293321, "phrase": "architecture_model"}, {"score": 0.003415137969569376, "phrase": "function-behavior-state_modeling_paradigm"}, {"score": 0.0030572112793962004, "phrase": "knowledge-based_engineering_application"}, {"score": 0.002884111441153185, "phrase": "virtual_product_model"}, {"score": 0.0028341130433482565, "phrase": "instantiated_modeling_primitives"}, {"score": 0.00278497898719426, "phrase": "case_study"}, {"score": 0.002736694413701639, "phrase": "mobile_robot"}, {"score": 0.002658068304632523, "phrase": "specific_application"}, {"score": 0.002536926192232391, "phrase": "high-level_function_model"}, {"score": 0.0024784363584530976, "phrase": "mapping_mission"}, {"score": 0.002421291757425244, "phrase": "directly_implementable_software_code"}, {"score": 0.002310915790114425, "phrase": "real-life_mechatronic_products"}, {"score": 0.002205560249972527, "phrase": "development_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Control software", " Knowledge-Based Engineering", " Mechatronics"], "paper_abstract": "Mechatronic systems are characterized by the synergetic integration of mechanic, electronic, software and control design aspects. The development of control software requires data and information from all design domains in order to create the required integrated functionality. This paper proposes a method that combines function modeling and multi-domain modeling primitives to generate control software automatically. An architecture model, based on the Function-Behavior-State modeling paradigm, provides the decomposition and flow of both functionality and implementation, which serves as input to a knowledge-based engineering application. The control software is subsequently extracted from a virtual product model composed of instantiated modeling primitives. A case study of a mobile robot shows how for a specific application the modeling are defined and how a high-level function model for an environment mapping mission is translated into directly implementable software code. This approach could be extended to real-life mechatronic products, and will improve consistency and reduce development time and cost. (C) 2012 Elsevier Ltd. All rights reserved.", "paper_title": "Enabling control software generation by using mechatronics modeling primitives", "paper_id": "WOS:000308122400004"}