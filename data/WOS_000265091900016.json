{"auto_keywords": [{"score": 0.030037078553797447, "phrase": "adaptive_mutation"}, {"score": 0.00481495049065317, "phrase": "novel_genetic_algorithm"}, {"score": 0.003886770770835211, "phrase": "novel_adaptive_mutation_operator"}, {"score": 0.0034332736827447654, "phrase": "finite_resolution_grids"}, {"score": 0.003356675879109443, "phrase": "canonical_genetic_algorithm"}, {"score": 0.0033190180867511605, "phrase": "generic_real-coded_genetic_algorithm"}, {"score": 0.003232779373179631, "phrase": "simple_diversity_mechanism"}, {"score": 0.003136952589428254, "phrase": "significant_improvement"}, {"score": 0.003078504229140364, "phrase": "new_algorithm"}, {"score": 0.003043957650600757, "phrase": "superior_performance"}, {"score": 0.0030097975788892896, "phrase": "covariance_matrix_adaptation_evolution_strategy"}, {"score": 0.002987297691792006, "phrase": "cma"}, {"score": 0.002719055901632759, "phrase": "large_search_spaces"}, {"score": 0.0026087958216676702, "phrase": "corresponding_cpu_overhead"}, {"score": 0.0025795066118838067, "phrase": "binary_space"}, {"score": 0.002560162916190598, "phrase": "tree_design"}, {"score": 0.002502995662011305, "phrase": "expensive_or_time-consuming_fitness_evaluations"}, {"score": 0.0024287485834314027, "phrase": "memory_usage"}, {"score": 0.0022273034991008326, "phrase": "stable_good_performance"}, {"score": 0.0021049977753042253, "phrase": "suitable_parameter_settings"}], "paper_keywords": ["Adaptive mutation", " binary space partitioning", " diversity maintenance", " genetic algorithm", " no revisits", " premature convergence"], "paper_abstract": "A novel genetic algorithm is reported that is non-revisiting: It remembers every position that it has searched before. An archive is used to store all the solutions that have been explored before. Different from other memory schemes in the literature, a novel binary space partitioning tree archive design is advocated. Not only is the design an efficient method to check for revisits, if any, it in itself constitutes a novel adaptive mutation operator that has no parameter. To demonstrate the power of the method, the algorithm is evaluated using 19 famous benchmark functions. The results are as follows. 1) Though it only uses finite resolution grids, when compared with a canonical genetic algorithm, a generic real-coded genetic algorithm, a canonical genetic algorithm with simple diversity mechanism, and three particle swarm optimization algorithms, it shows a significant improvement. 2) The new algorithm also shows superior performance compared to Covariance Matrix Adaptation Evolution Strategy (CMA-ES), a state-of-the-art method for adaptive mutation. 3) It can work with problems that have large search spaces with dimensions as high as 40. 4) The corresponding CPU overhead of the binary space partitioning tree design is insignificant for applications with expensive or time-consuming fitness evaluations, and for such applications, the memory usage due to the archive is acceptable. 5) Though the adaptive mutation is parameter-less, it shows and maintains a stable good performance. However, for other algorithms we compare, the performance is highly dependent on suitable parameter settings.", "paper_title": "A Genetic Algorithm That Adaptively Mutates and Never Revisits", "paper_id": "WOS:000265091900016"}