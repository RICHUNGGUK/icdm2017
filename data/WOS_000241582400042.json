{"auto_keywords": [{"score": 0.004669845451682529, "phrase": "natural_abstraction"}, {"score": 0.004529093447865156, "phrase": "high-level_local_search_algorithms"}, {"score": 0.004089725258435817, "phrase": "arbitrary_expressions"}, {"score": 0.003926105480202798, "phrase": "objective_functions"}, {"score": 0.003807684498435389, "phrase": "constraint_programming"}, {"score": 0.003581412258960711, "phrase": "expressiveness_gap"}, {"score": 0.0034733518170738517, "phrase": "differentiable_invariant"}, {"score": 0.002889928791032578, "phrase": "local_moves"}, {"score": 0.0027459678326877744, "phrase": "differentiable_invariants"}, {"score": 0.0021484955960643167, "phrase": "experimental_results"}], "paper_keywords": [""], "paper_abstract": "Invariants that incrementally maintain the value of expressions under assignments to their variables are a natural abstraction to build high-level local search algorithms. But their functionalities are not sufficient to allow arbitrary expressions as constraints or objective functions as in constraint programming. Differentiable invariants bridge this expressiveness gap. A differentiable invariant maintains the value of an expression and its variable gradients, it supports differentiation to evaluate the effect of local moves. The benefits of differentiable invariants are illustrated on a number of applications which feature complex, possibly reified, expressions and whose models are essentially similar to their CP counterparts. Experimental results demonstrate their practicability.", "paper_title": "Differentiable invariants", "paper_id": "WOS:000241582400042"}