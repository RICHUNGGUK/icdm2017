{"auto_keywords": [{"score": 0.039044723702949105, "phrase": "c_programs"}, {"score": 0.03667383794334986, "phrase": "null_pointers"}, {"score": 0.02988869905879018, "phrase": "runtime_checks"}, {"score": 0.00481495049065317, "phrase": "simple_algebraic_data_types"}, {"score": 0.004737579882204798, "phrase": "c._adt"}, {"score": 0.0046238380150870435, "phrase": "simple_tool"}, {"score": 0.004440291744400467, "phrase": "lex"}, {"score": 0.004368902049648225, "phrase": "yacc"}, {"score": 0.004263972370406983, "phrase": "monomorphic_algebraic_data_types"}, {"score": 0.00386876598761639, "phrase": "efficient_form"}, {"score": 0.003806541299696042, "phrase": "pattern_matching"}, {"score": 0.002865710140187219, "phrase": "adt_tool"}, {"score": 0.0026638482306228575, "phrase": "remaining_null_pointer_dereferences"}, {"score": 0.0025167026017217926, "phrase": "significant_amount"}, {"score": 0.0024761702541879213, "phrase": "cpu_time"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["algebraic data types", " pattern matching", " software tool"], "paper_abstract": "Adt is a simple tool in the spirit of Lex and Yacc that makes monomorphic algebraic data types, polymorphic built-in types like the list and an efficient form of pattern matching available in C programs. C programs built with ADTs typically use NULL pointers only to indicate don't care values, and not as sentinels. This reduces the scope for errors involving NULL pointers. The Adt tool generates runtime checks, which catch many of the remaining NULL pointer dereferences. The runtime checks may consume a significant amount of CPU time; hence they can be switched off once the program is suitably debugged. Copyright (C) 2011 John Wiley & Sons, Ltd.", "paper_title": "Simple algebraic data types for C", "paper_id": "WOS:000299417200003"}