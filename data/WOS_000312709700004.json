{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "generalization_refactoring_opportunities"}, {"score": 0.004597457370802855, "phrase": "share_functions"}, {"score": 0.004264697351852424, "phrase": "generalization_refactoring"}, {"score": 0.004119313626110943, "phrase": "potential_generalization"}, {"score": 0.004095567486538121, "phrase": "refactoring_opportunities"}, {"score": 0.003777088546146369, "phrase": "non-trivial_software_systems"}, {"score": 0.003306559295382181, "phrase": "existing_tools"}, {"score": 0.002518989593177879, "phrase": "potential_refactoring_opportunities"}, {"score": 0.0024756080101497086, "phrase": "conceptual_relationship"}, {"score": 0.002447101794397243, "phrase": "implementation_similarity"}, {"score": 0.002418923027024191, "phrase": "structural_correspondence"}, {"score": 0.0021543421286324945, "phrase": "evaluation_results"}, {"score": 0.0021049977753042253, "phrase": "proposed_approach"}], "paper_keywords": ["Software quality", " Software refactoring", " Generalization refactoring", " Opportunity identification", " Tool support", " Software maintenance"], "paper_abstract": "Generalization refactoring helps relate classes and share functions, including both interfaces and implementation, by inheritance. To apply generalization refactoring, developers should first identify potential generalization refactoring opportunities, i.e., software entities that might benefit from generalization refactoring. For non-trivial software systems, manual identification of these opportunities is challenging and time-consuming. However, to the best of our knowledge, no existing tools have been specifically designed for this task. As a result, people have to identify these opportunities manually or with the help of tools designed for other purposes, e.g., clone detectors. To this end, we propose a tool GenReferee (Generalization Referee) to identify potential refactoring opportunities according to conceptual relationship, implementation similarity, structural correspondence, and inheritance hierarchies. It was first calibrated on two non-trivial open source applications, and then evaluated on another three. Evaluation results suggest that the proposed approach is effective and efficient.", "paper_title": "Identification of generalization refactoring opportunities", "paper_id": "WOS:000312709700004"}