{"auto_keywords": [{"score": 0.04954033184026153, "phrase": "substructural_type_systems"}, {"score": 0.00481495049065317, "phrase": "substructural_lambda_calculus"}, {"score": 0.004423061344624088, "phrase": "substructural_logics"}, {"score": 0.004203343568960231, "phrase": "computational_resources"}, {"score": 0.0040171817997972335, "phrase": "early_stage"}, {"score": 0.003971938976270902, "phrase": "traditional_type_systems"}, {"score": 0.0036691380448651443, "phrase": "novel_programming_languages"}, {"score": 0.0035869295816439396, "phrase": "vault"}, {"score": 0.0034279721355412285, "phrase": "general_typing_theory"}, {"score": 0.0033893426032054366, "phrase": "substructural_type_system"}, {"score": 0.0032575241721857343, "phrase": "universal_semantic_framework"}, {"score": 0.0032208091960514128, "phrase": "substructural_types"}, {"score": 0.0031308163228919773, "phrase": "characteristic_intervals"}, {"score": 0.003078028357912228, "phrase": "type_qualifiers"}, {"score": 0.002859345731792013, "phrase": "substructural_calculus"}, {"score": 0.002795228413298423, "phrase": "subtyping_relations"}, {"score": 0.002656158309155626, "phrase": "operational_semantics"}, {"score": 0.0025383451160985488, "phrase": "type_safety_theorem"}, {"score": 0.002495521662819317, "phrase": "new_calculus"}, {"score": 0.002398382089724878, "phrase": "traditional_lambda_calculus"}, {"score": 0.002215274527909304, "phrase": "idealized_type_intermediate_language"}, {"score": 0.002153316680437517, "phrase": "type-preserving_translation"}, {"score": 0.0021049977753042253, "phrase": "lambda_calculus"}], "paper_keywords": ["Programming languages", " linear type systems", " substructural type system", " subtyping theory", " type preserving translation"], "paper_abstract": "Substructural type systems are designed from the insight inspired by the development of linear and substructural logics. Substructural type systems promise to control the usage of computational resources statically, thus detect more program errors at an early stage than traditional type systems do. In the past decade, substructural type systems have been deployed in the design of novel programming languages, such as Vault, etc. This paper presents a general typing theory for substructural type system. First, we define a universal semantic framework for substructural types by interpreting them as characteristic intervals composed of type qualifiers. Based on this framework, we present the design of a substructural calculus lambda(SL) with subtyping relations. After giving syntax, typing rules and operational semantics for lambda(SL), we prove the type safety theorem. The new calculus lambda(SL) can guarantee many more safety invariants than traditional lambda calculus, which is demonstrated by showing that the lambda(SL) calculus can serve as an idealized type intermediate language, and defining a type-preserving translation from ordinary typed lambda calculus into lambda(SL).", "paper_title": "Static typing for a substructural lambda calculus", "paper_id": "WOS:000293638400012"}