{"auto_keywords": [{"score": 0.04589323623988377, "phrase": "structural_complexity"}, {"score": 0.015719716506582538, "phrase": "programmer_team_strategy"}, {"score": 0.012167687400555101, "phrase": "maintenance_effort"}, {"score": 0.0043506951029334984, "phrase": "perfective_maintenance"}, {"score": 0.004306795240631196, "phrase": "object-oriented_software"}, {"score": 0.004177724522109952, "phrase": "team_strategy"}, {"score": 0.003911135156992, "phrase": "software_structure"}, {"score": 0.0036614948691735105, "phrase": "perceived_ease"}, {"score": 0.003410380718649286, "phrase": "distributed_cognition_and_task_interdependence_theoretical_frameworks"}, {"score": 0.0032746712603464235, "phrase": "controlled_lab_experiment"}, {"score": 0.0032415934630668484, "phrase": "professional_programmers"}, {"score": 0.003144345057121367, "phrase": "significant_interaction_effect"}, {"score": 0.0028120022457134267, "phrase": "low-coupled_programs"}, {"score": 0.0027835848648596513, "phrase": "lower_maintenance_effort"}, {"score": 0.002632332114727894, "phrase": "low-cohesive_programs"}, {"score": 0.0026057256900479026, "phrase": "high-coupled_programs"}, {"score": 0.0024516267507109753, "phrase": "maintenance_tasks"}, {"score": 0.002414544068560716, "phrase": "independent_or_collaborative_programming_teams"}, {"score": 0.002226017732566121, "phrase": "simple_uniform_resource_allocation_policies"}, {"score": 0.0021049977753042253, "phrase": "team_strategies"}], "paper_keywords": ["Object-oriented programming", " complexity measures", " software quality", " software productivity", " programming teams", " maintenance process", " CK metrics", " software management"], "paper_abstract": "This study develops and empirically tests the idea that the impact of structural complexity on perfective maintenance of object-oriented software is significantly determined by the team strategy of programmers (independent or collaborative). We analyzed two key dimensions of software structure, coupling and cohesion, with respect to the maintenance effort and the perceived ease-of-maintenance by pairs of programmers. Hypotheses based on the distributed cognition and task interdependence theoretical frameworks were tested using data collected from a controlled lab experiment employing professional programmers. The results show a significant interaction effect between coupling, cohesion, and programmer team strategy on both maintenance effort and perceived ease-of-maintenance. Highly cohesive and low-coupled programs required lower maintenance effort and were perceived to be easier to maintain than the low-cohesive programs and high-coupled programs. Further, our results would predict that managers who strategically allocate maintenance tasks to either independent or collaborative programming teams depending on the structural complexity of software could lower their team's maintenance effort by as much as 70 percent over managers who use simple uniform resource allocation policies. These results highlight the importance of achieving congruence between team strategies employed by collaborating programmers and the structural complexity of software.", "paper_title": "Structural Complexity and Programmer Team Strategy: An Experimental Test", "paper_id": "WOS:000308999100005"}