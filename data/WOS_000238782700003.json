{"auto_keywords": [{"score": 0.03782349251688888, "phrase": "type_systems"}, {"score": 0.004695900553353526, "phrase": "finite_length"}, {"score": 0.0043560464825349275, "phrase": "well-typed_pi-calculus_processes"}, {"score": 0.004108742905942481, "phrase": "successive_refinements"}, {"score": 0.00390792986752692, "phrase": "simply_typed_pi-calculus"}, {"score": 0.00347657813672945, "phrase": "upper_bounds"}, {"score": 0.003306559295382181, "phrase": "well-typed_processes"}, {"score": 0.0027054473441439422, "phrase": "non-trivial_examples"}, {"score": 0.002594652434287807, "phrase": "primitive_recursive_functions"}, {"score": 0.0024883835349005863, "phrase": "encoding_separate_choice"}, {"score": 0.0024065032567542107, "phrase": "parallel_composition"}, {"score": 0.0022507188208913394, "phrase": "dynamic_chain"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["the pi-calculus", " types", " termination", " term rewriting techniques"], "paper_abstract": "A term terminates if all its reduction sequences are of finite length. We show four type systems that ensure termination of well-typed pi-calculus processes. The systems are obtained by successive refinements of the types of the simply typed pi-calculus. For all (but one of) the type systems we also present upper bounds to the number of steps well-typed processes take to terminate. The termination proofs use techniques from term rewriting systems. We show the usefulness of the type systems on some non-trivial examples: the encodings of primitive recursive functions, the protocol for encoding separate choice in terms of parallel composition, a symbol table implemented as a dynamic chain of cells. (c) 2006 Elsevier Inc. All rights reserved.", "paper_title": "Ensuring termination by typability", "paper_id": "WOS:000238782700003"}