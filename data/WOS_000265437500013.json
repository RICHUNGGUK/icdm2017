{"auto_keywords": [{"score": 0.04962913836247384, "phrase": "marching_cubes"}, {"score": 0.010658160357652716, "phrase": "resulting_mesh"}, {"score": 0.00481495049065317, "phrase": "mesh_quality"}, {"score": 0.004658426838467567, "phrase": "popular_choice"}, {"score": 0.004614643339546038, "phrase": "isosurface_extraction"}, {"score": 0.004571269461883144, "phrase": "regular_grids"}, {"score": 0.004299064805926241, "phrase": "key_shortcomings"}, {"score": 0.004120130206000757, "phrase": "resulting_meshes"}, {"score": 0.003766369160795001, "phrase": "postprocessing_operations"}, {"score": 0.003299460925313939, "phrase": "increased_and_unbounded_error"}, {"score": 0.003207173639414978, "phrase": "original_isosurface"}, {"score": 0.0027961342030212353, "phrase": "extracted_mesh"}, {"score": 0.00266693888510356, "phrase": "single_degenerate_triangle"}, {"score": 0.0025316905609748135, "phrase": "minimal_computational_overhead"}, {"score": 0.002460825108719896, "phrase": "original_marching_cubes_algorithm"}, {"score": 0.0023030731312573246, "phrase": "existing_marching_cubes_implementations"}, {"score": 0.0021049977753042253, "phrase": "acceleration_structures"}], "paper_keywords": ["Meshing", " marching cubes"], "paper_abstract": "Marching Cubes is a popular choice for isosurface extraction from regular grids due to its simplicity, robustness, and efficiency. One of the key shortcomings of this approach is the quality of the resulting meshes, which tend to have many poorly shaped and degenerate triangles. This issue is often addressed through postprocessing operations such as smoothing. As we demonstrate in experiments with several data sets, while these improve the mesh, they do not remove all degeneracies and incur an increased and unbounded error between the resulting mesh and the original isosurface. Rather than modifying the resulting mesh, we propose a method to modify the grid on which Marching Cubes operates. This modification greatly increases the quality of the extracted mesh. In our experiments, our method did not create a single degenerate triangle, unlike any other method we experimented with. Our method incurs minimal computational overhead, requiring at most twice the execution time of the original Marching Cubes algorithm in our experiments. Most importantly, it can be readily integrated in existing Marching Cubes implementations and is orthogonal to many Marching Cubes enhancements (particularly, performance enhancements such as out-of-core and acceleration structures).", "paper_title": "Edge Transformations for Improving Mesh Quality of Marching Cubes", "paper_id": "WOS:000265437500013"}