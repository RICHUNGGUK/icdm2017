{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "non-deterministic_graph"}, {"score": 0.011641571753104592, "phrase": "visible_and_invisible_graph"}, {"score": 0.011172112184528044, "phrase": "decision_problem"}, {"score": 0.004765328434610262, "phrase": "graph_searching"}, {"score": 0.004631476648170177, "phrase": "fugitive_moving"}, {"score": 0.004548253531664032, "phrase": "initial_variant"}, {"score": 0.004068711803266216, "phrase": "latter_variant"}, {"score": 0.003985217719905897, "phrase": "search_strategy"}, {"score": 0.003725470458263889, "phrase": "monotone_strategies"}, {"score": 0.0036774877745633784, "phrase": "general_strategies"}, {"score": 0.0033497184946413754, "phrase": "smallest_number"}, {"score": 0.003264619537392974, "phrase": "np"}, {"score": 0.0032052251526888697, "phrase": "optimal_search_strategies"}, {"score": 0.0030431680376666673, "phrase": "f.v._fomin"}, {"score": 0.0030274185919322506, "phrase": "p._fraigniaud"}, {"score": 0.0030117504087859605, "phrase": "n._nisse"}, {"score": 0.0029961664150863895, "phrase": "nondeterministic"}, {"score": 0.002881793492919646, "phrase": "mathematical_foundations"}, {"score": 0.0028668768145593635, "phrase": "computer_science"}, {"score": 0.0027645938157002687, "phrase": "important_graph"}, {"score": 0.0024984517279573906, "phrase": "current_position"}, {"score": 0.0024281181691350085, "phrase": "non-deterministic_graph_searching"}, {"score": 0.00227552825359633, "phrase": "unified_proof"}, {"score": 0.0022520178263228056, "phrase": "visible_and_invisible_graph_searching"}, {"score": 0.0021716448655624064, "phrase": "np."}, {"score": 0.0021269766269040426, "phrase": "fomin_et_al"}, {"score": 0.0021049977753042253, "phrase": "optimal_non-deterministic_search_strategies"}], "paper_keywords": ["graph searching", " treewidth", " monotonicity"], "paper_abstract": "In graph searching, a team of searchers are aiming at capturing a fugitive moving in a graph. In the initial variant, called invisible graph searching, the searchers do not know the position of the fugitive until they catch it. In another variant, the searchers permanently know the position of the fugitive, i.e. the fugitive is visible. This latter variant is called visible graph searching. A search strategy that catches any fugitive in such a way that the part of the graph reachable by the fugitive never grows is called monotone. A priori, monotone strategies may require more searchers than general strategies to catch any fugitive. This is however not the case for visible and invisible graph searching. Two important consequences of the monotonicity of visible and invisible graph searching are: (1) the decision problem corresponding to the computation of the smallest number of searchers required to clear a graph is in NP, and (2) computing optimal search strategies is simplified by taking into account that there exist some that never backtrack. Fomin et al. [F.V. Fomin, P. Fraigniaud, N. Nisse, Nondeterministic graph searching: From pathwidth to treewidth, in: Proceedings of the 30th International Symposium on Mathematical Foundations of Computer Science, MFCS'05, 2005, pp. 364-375] introduced an important graph searching variant, called non-deterministic graph searching, that unifies visible and invisible graph searching. In this variant, the fugitive is invisible, and the searchers can query an oracle that permanently knows the current position of the fugitive. The question of the monotonicity of non-deterministic graph searching was however left open. In this paper, we prove that non-deterministic graph searching is monotone. In particular, this result is a unified proof of monotonicity for visible and invisible graph searching. As a consequence, the decision problem corresponding to non-deterministic graph searching belongs to NP. Moreover, the exact algorithms designed by Fomin et al. do compute optimal non-deterministic search strategies. (c) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Monotonicity of non-deterministic graph searching", "paper_id": "WOS:000256587300003"}