{"auto_keywords": [{"score": 0.028160967927341577, "phrase": "dual_depth"}, {"score": 0.004815316573636748, "phrase": "gpu"}, {"score": 0.00427410962921379, "phrase": "tetrahedron-based_rendering_pipeline"}, {"score": 0.004192730391924712, "phrase": "volume_images"}, {"score": 0.004081385289516914, "phrase": "conventional_triangle-based_rendering_pipeline"}, {"score": 0.004003660777805554, "phrase": "novel_features"}, {"score": 0.0039729853486821995, "phrase": "gpu-based_algorithms"}, {"score": 0.003808407814695708, "phrase": "previously_impossible_level"}, {"score": 0.003608732492631878, "phrase": "gpu_memory"}, {"score": 0.0035810720634458933, "phrase": "vertex_buffer_objects"}, {"score": 0.0035263833746562788, "phrase": "vertex_shader"}, {"score": 0.0033802431627410223, "phrase": "geometry_shader_extension"}, {"score": 0.0033030907500120397, "phrase": "projected_tetrahedrons"}, {"score": 0.003202944392720772, "phrase": "voxel_fragments"}, {"score": 0.0031418958350109038, "phrase": "fragment_shader"}, {"score": 0.0031178024467857215, "phrase": "per-voxel_operations"}, {"score": 0.0030232568024943455, "phrase": "previously_computed_layers"}, {"score": 0.0027777389949155975, "phrase": "projection_ray"}, {"score": 0.002683125911877974, "phrase": "new_adaptation"}, {"score": 0.002601727192945944, "phrase": "correct_volume_image_data"}, {"score": 0.002542298702137655, "phrase": "resulting_volume_data"}, {"score": 0.002474674704809152, "phrase": "previous_cpu_implementations"}, {"score": 0.002344762593995099, "phrase": "volume-rendered_image"}, {"score": 0.0022302306304023602, "phrase": "novel_gpu-based_solution"}, {"score": 0.002145942273032774, "phrase": "integrated_opengl-style_api_library"}, {"score": 0.0021049977753042253, "phrase": "underlying_shader_operations"}], "paper_keywords": ["Mathematical visualization", " four-dimensional visualization", " graphics hardware", " interactive illumination"], "paper_abstract": "This paper describes GL4D, an interactive system for visualizing 2-manifolds and 3-manifolds embedded in four Euclidean dimensions and illuminated by 4D light sources. It is a tetrahedron-based rendering pipeline that projects geometry into volume images, an exact parallel to the conventional triangle-based rendering pipeline for 3D graphics. Novel features include GPU-based algorithms for real-time 4D occlusion handling and transparency compositing; we thus enable a previously impossible level of quality and interactivity for exploring lit 4D objects. The 4D tetrahedrons are stored in GPU memory as vertex buffer objects, and the vertex shader is used to perform per-vertex 4D modelview transformations and 4D-to-3D projection. The geometry shader extension is utilized to slice the projected tetrahedrons and rasterize the slices into individual 2D layers of voxel fragments. Finally, the fragment shader performs per-voxel operations such as lighting and alpha blending with previously computed layers. We account for 4D voxel occlusion along the 4D-to-3D projection ray by supporting a multi-pass back-to-front fragment composition along the projection ray; to accomplish this, we exploit a new adaptation of the dual depth peeling technique to produce correct volume image data and to simultaneously render the resulting volume data using 3D transfer functions into the final 2D image. Previous CPU implementations of the rendering of 4D-embedded 3-manifolds could not perform either the 4D depth-buffered projection or manipulation of the volume-rendered image in real-time; in particular, the dual depth peeling algorithm is a novel GPU-based solution to the real-time 4D depth-buffering problem. GL4D is implemented as an integrated OpenGL-style API library, so that the underlying shader operations are as transparent as possible to the user.", "paper_title": "GL4D: A GPU-based Architecture for Interactive 4D Visualization", "paper_id": "WOS:000270778900093"}