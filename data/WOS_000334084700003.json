{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "copyless_messaging"}, {"score": 0.004685012337701536, "phrase": "communication_paradigm"}, {"score": 0.004459857205489101, "phrase": "sender_and_receiver_processes"}, {"score": 0.004176321608449849, "phrase": "efficient_implementation"}, {"score": 0.004130842663662047, "phrase": "communication-intensive_software_systems"}, {"score": 0.003975515793563275, "phrase": "shared_address_space"}, {"score": 0.003702323283528696, "phrase": "programming_errors"}, {"score": 0.003622088701900472, "phrase": "explicit_use"}, {"score": 0.003318108914777263, "phrase": "type_discipline"}, {"score": 0.003175792987190496, "phrase": "minimal_support"}, {"score": 0.0031240075437664314, "phrase": "runtime_system"}, {"score": 0.0029736479837154843, "phrase": "communication_errors"}, {"score": 0.0029412271277166873, "phrase": "memory_faults"}, {"score": 0.0028932554846476718, "phrase": "memory_leaks"}, {"score": 0.0026357877401570764, "phrase": "software_transactional_memories"}, {"score": 0.0022359278646792153, "phrase": "observable_effect"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Copy less message passing", " Session types", " Exception handling", " Memory leak prevention"], "paper_abstract": "Copyless messaging is a communication paradigm in which only pointers to messages are exchanged between sender and receiver processes. Because of its intrinsically low overhead, copyless messaging is suitable for the efficient implementation of communication-intensive software systems where processes have access to a shared address space. Unfortunately, the very nature of the paradigm fosters the proliferation of programming errors due to the explicit use of pointers and to the sharing of data. In this paper we study a type discipline for copyless messaging that, together with some minimal support from the runtime system, is able to guarantee the absence of communication errors, memory faults, and memory leaks in the presence of exceptions. To formalize the semantics of processes we draw inspiration from software transactional memories: in our case a transaction is a process that is meant to accomplish some exchange of messages and that should either be executed completely, or should have no observable effect if aborted by an exception. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Exception handling for copyless messaging", "paper_id": "WOS:000334084700003"}