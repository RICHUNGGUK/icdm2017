{"auto_keywords": [{"score": 0.040797714218440494, "phrase": "code_generators"}, {"score": 0.00481495049065317, "phrase": "executable_modelling_notations"}, {"score": 0.004701985831087475, "phrase": "semantically_configurable_model-driven_engineering"}, {"score": 0.004441517985511521, "phrase": "modelling_environment"}, {"score": 0.003925414526537783, "phrase": "analysis_tools"}, {"score": 0.0038150655114186954, "phrase": "mde."}, {"score": 0.00369022262431101, "phrase": "semantically_configurable_code_generation"}, {"score": 0.003603549914861701, "phrase": "behavioural_modelling_notations"}, {"score": 0.0034526191487098093, "phrase": "process_algebras"}, {"score": 0.003419943984098415, "phrase": "petri_nets"}, {"score": 0.0032149396890830575, "phrase": "template_semantics"}, {"score": 0.0031393948330209224, "phrase": "parameterized_structured_operational_semantics"}, {"score": 0.003065619675251781, "phrase": "semantic_variation_points"}, {"score": 0.003022186855664124, "phrase": "specific_notation"}, {"score": 0.002937153116494391, "phrase": "family's_template_semantics"}, {"score": 0.002854505078275351, "phrase": "semantic_choices"}, {"score": 0.0027741761880779535, "phrase": "code-generator_generator"}, {"score": 0.002683304054823427, "phrase": "suitable_java_code_generator"}, {"score": 0.0026202187680903063, "phrase": "derivable_modelling_notations"}, {"score": 0.002583082602112501, "phrase": "cgg"}, {"score": 0.002337403139264533, "phrase": "sizable_family"}, {"score": 0.0023152577218214804, "phrase": "modelling_notations"}, {"score": 0.0021049977753042253, "phrase": "commercial-grade_generators"}], "paper_keywords": ["Model-driven engineering", " Code generation"], "paper_abstract": "We are investigating semantically configurable model-driven engineering (MDE). The goal of this work is a modelling environment that supports flexible, configurable modelling notations, in which specifiers can configure the semantics of notations to suit their needs and yet still have access to the types of analysis tools and code generators normally associated with MDE. In this paper, we describe semantically configurable code generation for a family of behavioural modelling notations. The family includes variants of statecharts, process algebras, Petri Nets, and SDL88. The semantics of this family is defined using template semantics, which is a parameterized structured operational semantics in which parameters represent semantic variation points. A specific notation is derived by instantiating the family's template semantics with parameter values that specify semantic choices. We have developed a code-generator generator (CGG) that creates a suitable Java code generator for a subset of derivable modelling notations. Our prototype CGG supports 26 semantics parameters, 89 parameter values, and 7 composition operators. As a result, we are able to produce code generators for a sizable family of modelling notations, though at present the performance of our generated code is about an order of magnitude slower than that produced by commercial-grade generators.", "paper_title": "Code generation for a family of executable modelling notations", "paper_id": "WOS:000303457300008"}