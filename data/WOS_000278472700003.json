{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "model_transformation_language"}, {"score": 0.004717723626157272, "phrase": "computational_reflection"}, {"score": 0.00457553517865013, "phrase": "well-known_technique"}, {"score": 0.004216880725292, "phrase": "object-oriented_languages"}, {"score": 0.003509006038574667, "phrase": "rule-based_model_transformation_language"}, {"score": 0.0033004240095380623, "phrase": "language_abstractions"}, {"score": 0.0032008144731234265, "phrase": "structural_and_behavioral_reflection"}, {"score": 0.0027459678326877744, "phrase": "currently_used_transformation_languages"}, {"score": 0.0025046245057922557, "phrase": "experimental_language"}, {"score": 0.002453934333239467, "phrase": "reflective_capabilities"}, {"score": 0.0023079225317714815, "phrase": "possible_implementation_strategies"}], "paper_keywords": ["Reflection", " Model transformation languages", " MDE", " MISTRAL"], "paper_abstract": "Computational reflection is a well-known technique applied in many existing programming languages ranging from functional to object-oriented languages. In this paper we study the possibilities and benefits of introducing and using reflection in a rule-based model transformation language. The paper identifies some language abstractions to achieve structural and behavioral reflection. Reflective features are motivated by examples of problems derived from the experience with currently used transformation languages. Example solutions are given by using an experimental language with reflective capabilities. The paper also outlines possible implementation strategies for adding reflection to a language and discusses their advantages and disadvantages.", "paper_title": "Application of reflection in a model transformation language", "paper_id": "WOS:000278472700003"}