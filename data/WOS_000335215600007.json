{"auto_keywords": [{"score": 0.03583574966327729, "phrase": "xml"}, {"score": 0.00481495049065317, "phrase": "model_specification"}, {"score": 0.00469678464293492, "phrase": "biologically_constrained_networks_of_spiking"}, {"score": 0.004581505405526037, "phrase": "declarative_extensible_markup_language"}, {"score": 0.004225950334493496, "phrase": "large-scale_spiking_neural_network_simulations"}, {"score": 0.004046020290832207, "phrase": "nineml_standard"}, {"score": 0.003778566972399296, "phrase": "neuron_representation"}, {"score": 0.003640183972131238, "phrase": "existing_tools"}, {"score": 0.0035728978842974246, "phrase": "arbitrary_dynamics"}, {"score": 0.003357435261066107, "phrase": "model_sharing"}, {"score": 0.0032143649757754595, "phrase": "collaborative_working"}, {"score": 0.0030965805992969027, "phrase": "high-level_self_explanatory_format"}, {"score": 0.003039311963787733, "phrase": "straight_forward_code_generation"}, {"score": 0.0029462012558267863, "phrase": "model_description"}, {"score": 0.0028917056916949744, "phrase": "native_simulator_format"}, {"score": 0.0027512482368183596, "phrase": "code_generation"}, {"score": 0.0025373711401047772, "phrase": "benchmark_model"}, {"score": 0.0023694065215394593, "phrase": "spineml_syntax"}, {"score": 0.002131383155056741, "phrase": "spineml_code"}, {"score": 0.0021049977753042253, "phrase": "open_source"}], "paper_keywords": ["XML", " Simulation", " Translation", " Interoperability", " Spiking neurons", " Neuronal networks"], "paper_abstract": "A declarative extensible markup language (SpineML) for describing the dynamics, network and experiments of large-scale spiking neural network simulations is described which builds upon the NineML standard. It utilises a level of abstraction which targets point neuron representation but addresses the limitations of existing tools by allowing arbitrary dynamics to be expressed. The use of XML promotes model sharing, is human readable and allows collaborative working. The syntax uses a high-level self explanatory format which allows straight forward code generation or translation of a model description to a native simulator format. This paper demonstrates the use of code generation in order to translate, simulate and reproduce the results of a benchmark model across a range of simulators. The flexibility of the SpineML syntax is highlighted by reproducing a pre-existing, biologically constrained model of a neural microcircuit (the striatum). The SpineML code is open source and is available at http://bimpa.group.shef.ac.uk/SpineML.", "paper_title": "From Model Specification to Simulation of Biologically Constrained Networks of Spiking Neurons", "paper_id": "WOS:000335215600007"}