{"auto_keywords": [{"score": 0.015025625424913815, "phrase": "semantic_differences"}, {"score": 0.00481495049065317, "phrase": "semantic_differencing"}, {"score": 0.004771196027464407, "phrase": "speculative_correlation"}, {"score": 0.004475798524102238, "phrase": "patched_version"}, {"score": 0.004276016541197123, "phrase": "precise_characterization"}, {"score": 0.004179480763003705, "phrase": "program_versions"}, {"score": 0.0040111533608228195, "phrase": "infinite-state_numerical_programs"}, {"score": 0.00393852508392789, "phrase": "abstract_interpretation"}, {"score": 0.003832031470970347, "phrase": "program_differences"}, {"score": 0.003660879039645457, "phrase": "abstracting_relationships"}, {"score": 0.003433987036569199, "phrase": "correlating_abstract_domain"}, {"score": 0.003371773890338284, "phrase": "sound_approximation"}, {"score": 0.0032805541677236325, "phrase": "semantic_difference"}, {"score": 0.0028863414975346512, "phrase": "speculative_search_algorithm"}, {"score": 0.00274472767672686, "phrase": "minimal_abstract_semantic_difference"}, {"score": 0.0024481198073210567, "phrase": "real-world_examples"}, {"score": 0.002403739095732124, "phrase": "git"}, {"score": 0.002275299774554847, "phrase": "linux_kernel"}, {"score": 0.002244277924422011, "phrase": "mozilla_firefox_web_browser"}, {"score": 0.002163600705898299, "phrase": "precise_approximations"}], "paper_keywords": [""], "paper_abstract": "We address the problem of computing semantic differences between a program and a patched version of the program. Our goal is to obtain a precise characterization of the difference between program versions, or establish their equivalence. We focus on infinite-state numerical programs, and use abstract interpretation to compute an over-approximation of program differences. Computing differences and establishing equivalence under abstraction requires abstracting relationships between variables in the two programs. Towards that end, we use a correlating abstract domain to compute a sound approximation of these relationships which captures semantic difference. This approximation can be computed over any interleaving of the two programs. However, the choice of interleaving can significantly affect precision. We present a speculative search algorithm that aims to find an interleaving of the two programs with minimal abstract semantic difference. This method is unique as it allows the analysis to dynamically alternate between several interleavings. We have implemented our approach and applied it to real-world examples including patches from Git, GNU Coreutils, as well as a few handpicked patches from the Linux kernel and the Mozilla Firefox web browser. Our evaluation shows that we compute precise approximations of semantic differences, and report few false differences.", "paper_title": "Abstract Semantic Differencing via Speculative Correlation", "paper_id": "WOS:000348907400046"}