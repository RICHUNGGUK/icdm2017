{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "taint_analysis"}, {"score": 0.015068988042376935, "phrase": "dynamic_binary_analyzer"}, {"score": 0.006992193465945562, "phrase": "self-modifying_code"}, {"score": 0.005608824552423854, "phrase": "operating_system"}, {"score": 0.0044047527104545525, "phrase": "traditional_security_programs"}, {"score": 0.004373480870285314, "phrase": "pattern_matching_technique"}, {"score": 0.004220406575749275, "phrase": "malicious_code"}, {"score": 0.004175533280178052, "phrase": "security_programs"}, {"score": 0.004158829698488288, "phrase": "binary_file"}, {"score": 0.004058180509184539, "phrase": "malicious_behaviors"}, {"score": 0.004000741805312148, "phrase": "unknown_vulnerability"}, {"score": 0.003725470458263889, "phrase": "security_risks"}, {"score": 0.0035949949979695063, "phrase": "unknown_vulnerabilities"}, {"score": 0.0032418062548293745, "phrase": "input_data"}, {"score": 0.003051073364818384, "phrase": "dynamic_analysis"}, {"score": 0.002954669496511141, "phrase": "virtual_machine_circumstance"}, {"score": 0.0028409576481842457, "phrase": "program_code"}, {"score": 0.0028207566216121856, "phrase": "program_operational_process"}, {"score": 0.0026928966146175636, "phrase": "execution_process"}, {"score": 0.0025343769150179764, "phrase": "security_vulnerability"}, {"score": 0.002454258761940649, "phrase": "proposed_analyzer"}, {"score": 0.0024368006923629476, "phrase": "test_cases"}, {"score": 0.002309754152767196, "phrase": "existed_security_vulnerabilities"}, {"score": 0.0021276671435454656, "phrase": "expandable_tool"}, {"score": 0.0021049977753042253, "phrase": "additional_security_element"}], "paper_keywords": ["Binary analysis", " Taint analysis", " Dynamic analysis", " Vulnerability"], "paper_abstract": "In this paper, we introduce an overview of a dynamic binary analyzer for scanning vulnerabilities by performing taint analysis. People have been using the traditional security programs of pattern matching technique such as anti-virus and anti-spyware to protect their computer from malicious code. These security programs, however, cannot completely scan malicious behaviors attacking through the unknown vulnerability and are hard to protect from the attacks using self-modifying code which changes its own codes during runtime. To prevent these security risks, we develop the dynamic binary analyzer that can find these unknown vulnerabilities and self-modifying code. We adopt taint analysis to find vulnerabilities that transpire during runtime. Also using taint analysis let us check what effects have been occurred to programs by the input data and how they do spread widely to across the resources in an operating system. Adopting the dynamic analysis that drives and analyzes the system only in virtual machine circumstance through the emulator can make us detect the falsification of program code in program operational process. So we describe the framework of our analyzer and then explain the execution process and output of each process by using three test case demonstrations. Furthermore, we introduce several test cases of the security vulnerability for the demonstration and explain the results of proposed analyzer on test cases. The dynamic binary analyzer for scanning vulnerabilities with taint analysis (1) can find out existed security vulnerabilities in binary file, (2) can monitor all the actions of the binary file that affects operating system and (3) can be an expandable tool through the additional security element and policy.", "paper_title": "Dynamic binary analyzer for scanning vulnerabilities with taint analysis", "paper_id": "WOS:000351520200008"}