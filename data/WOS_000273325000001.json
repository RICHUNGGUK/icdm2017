{"auto_keywords": [{"score": 0.03771465750530587, "phrase": "zyzzyva"}, {"score": 0.011158919153691925, "phrase": "bft_replication"}, {"score": 0.00481495049065317, "phrase": "longstanding_vision"}, {"score": 0.004774530554776608, "phrase": "distributed_systems"}, {"score": 0.004694700982410345, "phrase": "reliable_systems"}, {"score": 0.004655285779819366, "phrase": "unreliable_components"}, {"score": 0.004596779715291598, "phrase": "enticing_formulation"}, {"score": 0.004278807087784626, "phrase": "correct_server"}, {"score": 0.003916098498242888, "phrase": "bft_systems"}, {"score": 0.003754319277408392, "phrase": "bft"}, {"score": 0.0037070855410818986, "phrase": "high_overheads"}, {"score": 0.0032800186243040663, "phrase": "client's_request"}, {"score": 0.0032115093493071366, "phrase": "expensive_three-phase_commit_protocol"}, {"score": 0.002951444412262927, "phrase": "primary_server"}, {"score": 0.002556625752785268, "phrase": "correct_replicas"}, {"score": 0.0025137856138000036, "phrase": "single_total_ordering"}, {"score": 0.0023694065215394593, "phrase": "total_order"}, {"score": 0.0022906498741695094, "phrase": "replication_overheads"}, {"score": 0.0021049977753042253, "phrase": "broad_range"}], "paper_keywords": ["Performance", " Reliability", " Byzantine fault tolerance", " speculative execution", " replication", " output commit"], "paper_abstract": "A longstanding vision in distributed systems is to build reliable systems from unreliable components. An enticing formulation of this vision is Byzantine Fault-Tolerant (BFT) state machine replication, in which a group of servers collectively act as a correct server even if some of the servers misbehave or malfunction in arbitrary (\"Byzantine\") ways. Despite this promise, practitioners hesitate to deploy BFT systems, at least partly because of the perception that BFT must impose high overheads. In this article, we present Zyzzyva, a protocol that uses speculation to reduce the cost of BFT replication. In Zyzzyva, replicas reply to a client's request without first running an expensive three-phase commit protocol to agree on the order to process requests. Instead, they optimistically adopt the order proposed by a primary server, process the request, and reply immediately to the client. If the primary is faulty, replicas can become temporarily inconsistent with one another, but clients detect inconsistencies, help correct replicas converge on a single total ordering of requests, and only rely on responses that are consistent with this total order. This approach allows Zyzzyva to reduce replication overheads to near their theoretical minima and to achieve throughputs of tens of thousands of requests per second, making BFT replication practical for a broad range of demanding services.", "paper_title": "Zyzzyva: Speculative Byzantine Fault Tolerance", "paper_id": "WOS:000273325000001"}