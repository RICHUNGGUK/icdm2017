{"auto_keywords": [{"score": 0.049636680610423214, "phrase": "local_recovery"}, {"score": 0.010612387000973441, "phrase": "software_architecture"}, {"score": 0.005604034140094827, "phrase": "design_space"}, {"score": 0.004704495156558224, "phrase": "increasing_size"}, {"score": 0.004617949594931096, "phrase": "software_systems"}, {"score": 0.0045119929871912405, "phrase": "amplified_number"}, {"score": 0.0044702911400353535, "phrase": "potential_failures"}, {"score": 0.00428733103049275, "phrase": "software_reliability"}, {"score": 0.004073809704022463, "phrase": "fault_tolerance_techniques"}, {"score": 0.003943481134959376, "phrase": "essential_element"}, {"score": 0.003907013105134715, "phrase": "fault_tolerance"}, {"score": 0.0037296509687792865, "phrase": "effective_approach"}, {"score": 0.003320561182494713, "phrase": "separate_units"}, {"score": 0.003054009753601139, "phrase": "recoverable_units"}, {"score": 0.002942495422585405, "phrase": "decomposition_alternatives"}, {"score": 0.0027570267191549774, "phrase": "systematic_approach"}, {"score": 0.0025832180231667853, "phrase": "systematic_guidelines"}, {"score": 0.002500456462028735, "phrase": "possible_decomposition_alternatives"}, {"score": 0.002375714262344562, "phrase": "stakeholder_constraints"}, {"score": 0.0023210846870653757, "phrase": "feasible_alternatives"}, {"score": 0.0021746987512551693, "phrase": "integrated_set"}, {"score": 0.0021049977753042253, "phrase": "open-source_mplayer_software"}], "paper_keywords": ["Software architecture design", " Fault tolerance", " Local recovery", " Availability", " Performance"], "paper_abstract": "The increasing size and complexity of software systems has led to an amplified number of potential failures and as such makes it harder to ensure software reliability. Since it is usually hard to prevent all the failures, fault tolerance techniques have become more important. An essential element of fault tolerance is the recovery from failures. Local recovery is an effective approach whereby only the erroneous parts of the system are recovered while the other parts remain available. For achieving local recovery, the architecture needs to be decomposed into separate units that can be recovered in isolation. Usually, there are many different alternative ways to decompose the system into recoverable units. It appears that each of these decomposition alternatives performs differently with respect to availability and performance metrics. We propose a systematic approach dedicated to optimizing the decomposition of software architecture for local recovery. The approach provides systematic guidelines to depict the design space of the possible decomposition alternatives, to reduce the design space with respect to domain and stakeholder constraints and to balance the feasible alternatives with respect to availability and performance. The approach is supported by an integrated set of tools and illustrated for the open-source MPlayer software.", "paper_title": "Optimizing decomposition of software architecture for local recovery", "paper_id": "WOS:000316746700001"}