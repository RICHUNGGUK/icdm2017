{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "weak_prefix-search_problem"}, {"score": 0.0047267100475487595, "phrase": "weak-prefix_search_problem"}, {"score": 0.0039281997063335735, "phrase": "average_length_l"}, {"score": 0.003515162360861593, "phrase": "pattern_p"}, {"score": 0.0031068064097811844, "phrase": "cache-oblivious_models"}, {"score": 0.002762774046280398, "phrase": "searching_algorithm"}, {"score": 0.0027120400060701056, "phrase": "monte_carlo_type"}, {"score": 0.0025972447844047515, "phrase": "high_probability"}, {"score": 0.0023527296826339225, "phrase": "queried_patterns"}, {"score": 0.00230950802983053, "phrase": "deterministic_solution"}, {"score": 0.0021845387990972543, "phrase": "energy-efficient_data_structures"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Prefix search", " Compressed indexes for string dictionaries", " Weighted data structures", " Energy-efficient data structures"], "paper_abstract": "The weak-prefix search problem consists of searching for the strings in a dictionary s that are prefixed by a pattern P[1, p]; if no such string does occur, any answer can be returned. Strings in s have average length l, are n in number, and are given in advance to be preprocessed, whereas the pattern P is provided on-line. In this paper we solve this problem in the external-memory and in the cache-oblivious models by using the optimal O(n log l) bits of space and requiring O(p/B+ log(B) n) I/Os. The searching algorithm is of Monte Carlo type, so its answer is correct with high probability. We also discuss some variants of the problem concerning with a distribution over the queried patterns, a deterministic solution, and foresee applications in the design of energy-efficient data structures. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "On the weak prefix-search problem", "paper_id": "WOS:000318890000008"}