{"auto_keywords": [{"score": 0.04719839762621183, "phrase": "source_code_authorship_identification"}, {"score": 0.038234537231420805, "phrase": "particular_author"}, {"score": 0.00481495049065317, "phrase": "high-level_programming_features"}, {"score": 0.004775335634705251, "phrase": "source_code_author_classification"}, {"score": 0.004677711903652145, "phrase": "source_code_author_profiles"}, {"score": 0.004639222977793127, "phrase": "scap"}, {"score": 0.00443308765153716, "phrase": "previous_methods"}, {"score": 0.004253618550301311, "phrase": "crucial_requirement"}, {"score": 0.004201202199968683, "phrase": "author_identification_method"}, {"score": 0.0031064226956732497, "phrase": "high-level_features"}, {"score": 0.0029805015010906013, "phrase": "scap_method"}, {"score": 0.002871688503965193, "phrase": "java"}, {"score": 0.002847858807513713, "phrase": "common_lisp"}, {"score": 0.0024434201175883674, "phrase": "layout_features"}, {"score": 0.0024232694434408093, "phrase": "package-related_naming_influence_classification_accuracy"}, {"score": 0.0022122603123901114, "phrase": "relative_feature_contributions"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["authorship", " source code", " program features", " fraud"], "paper_abstract": "The use of Source Code Author Profiles (SCAP) represents a new, highly accurate approach to source code authorship identification that is, unlike previous methods, language independent. While accuracy is clearly a crucial requirement of any author identification method, in cases of litigation regarding authorship, plagiarism, and so on, there is also a need to know why it is claimed that a piece of code is written by a particular author. What is it about that piece of code that suggests a particular author? What features in the code make one author more likely than another? In this study, we describe a means of identifying the high-level features that contribute to source code authorship identification using as a tool the SCAP method. A variety of features are considered for Java and Common Lisp and the importance of each feature in determining authorship is measured through a sequence of experiments in which we remove one feature at a time. The results show that, for these programs, comments, layout features and package-related naming influence classification accuracy whereas user-defined naming, an obvious programmer related feature, does not appear to influence accuracy. A comparison is also made between the relative feature contributions in programs written in the two languages. (C) 2007 Elsevier Inc. All rights reserved.", "paper_title": "Examining the significance of high-level programming features in source code author classification", "paper_id": "WOS:000254709200011"}