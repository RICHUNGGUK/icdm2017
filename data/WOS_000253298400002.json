{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "software_metric_models"}, {"score": 0.015501039487971465, "phrase": "incomplete_data"}, {"score": 0.004299064805926241, "phrase": "future_software_project"}, {"score": 0.003802135020791801, "phrase": "data_sample"}, {"score": 0.0037309384824565695, "phrase": "analogous_past_projects"}, {"score": 0.0034428776029411974, "phrase": "particular_predictor_metric"}, {"score": 0.0032838979278935814, "phrase": "intuitive_or_experience-based_assumption"}, {"score": 0.0030735451757603555, "phrase": "statistical_significance"}, {"score": 0.0025436978068459565, "phrase": "k-nearest_neighbors"}, {"score": 0.00247249708860822, "phrase": "imputation_method"}, {"score": 0.002449208093757498, "phrase": "statistical_hypothesis_testing"}, {"score": 0.00240328454980006, "phrase": "\"goodness-of-fit\"_criterion"}, {"score": 0.0023249757987087055, "phrase": "software_effort_metric_models"}, {"score": 0.0023030731312573246, "phrase": "software_quality_metric_models"}, {"score": 0.0022280223816618736, "phrase": "far_more_serious_incomplete_data"}], "paper_keywords": ["software quality", " software metrics", " models", " model simplification", " missing data", " imputation method"], "paper_abstract": "Software metric models predict the target software metric(s), e. g., the development work effort or defect rates, for any future software project based on the project's predictor software metric( s), e. g., the project team size. Obviously, the construction of such a software metric model makes use of a data sample of such metrics from analogous past projects. However, incomplete data often appear in such data samples. Moreover, the decision on whether a particular predictor metric should be included is most likely based on an intuitive or experience-based assumption that the predictor metric has an impact on the target metric with a statistical significance. However, this assumption is usually not verifiable \"retrospectively\" after the model is constructed, leading to redundant predictor metric( s) and/or unnecessary predictor metric complexity. To solve all these problems, we derived a methodology consisting of the k-nearest neighbors (k-NN) imputation method, statistical hypothesis testing, and a \"goodness-of-fit\" criterion. This methodology was tested on software effort metric models and software quality metric models, the latter usually suffers from far more serious incomplete data. This paper documents this methodology and the tests on these two types of software metric models.", "paper_title": "A statistical methodology to simplify software metric models constructed using incomplete data", "paper_id": "WOS:000253298400002"}