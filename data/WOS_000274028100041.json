{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "functional_programming"}, {"score": 0.004764859786310636, "phrase": "monadic_characterizations"}, {"score": 0.0047152877145889656, "phrase": "computational_effects"}, {"score": 0.004475022550508119, "phrase": "effectful_program"}, {"score": 0.004051595625804513, "phrase": "effect-free_semantics"}, {"score": 0.0037653554368382814, "phrase": "purely_functional_definitions"}, {"score": 0.0034992667091713813, "phrase": "already_translated_program"}, {"score": 0.003373334961160647, "phrase": "inherently_church-style_view"}, {"score": 0.0032861588691414667, "phrase": "nominal_meaning"}, {"score": 0.003234934827553253, "phrase": "effectful_term"}, {"score": 0.002897977113538355, "phrase": "effect_definition"}, {"score": 0.0028378798711397235, "phrase": "imperative_behavior"}, {"score": 0.0027936239349923464, "phrase": "new_operations"}, {"score": 0.002637160140011997, "phrase": "additional_operational_rules"}, {"score": 0.0025156683465194967, "phrase": "structural_changes"}, {"score": 0.002476424729269258, "phrase": "evaluation_judgment"}, {"score": 0.002387214876538434, "phrase": "small-step_operational_semantics"}, {"score": 0.0023499703712897293, "phrase": "prototypical_functional_language"}, {"score": 0.0021951623041245897, "phrase": "familiar_syntactic_techniques"}, {"score": 0.0021049977753042253, "phrase": "curry-style_effect-type_system"}], "paper_keywords": ["Languages", " Theory", " Monads", " Computational Effects", " Modular Semantics"], "paper_abstract": "In functional programming, monadic characterizations of computational effects are normally understood denotationally: they describe how an effectful program can be systematically expanded or translated into a larger, pure program, which can then be evaluated according to an effect-free semantics. Any effect-specific operations expressible in the monad are also given purely functional definitions, but these definitions are only directly executable in the context of an already translated program. This approach thus takes an inherently Church-style view of effects: the nominal meaning of every effectful term in the program depends crucially on its type. We present here a complementary, operational view of monadic effects, in which an effect definition directly induces an imperative behavior of the new operations expressible in the monad. This behavior is formalized as additional operational rules for only the new constructs; it does not require any structural changes to the evaluation judgment. Specifically, we give a small-step operational semantics of a prototypical functional language supporting programmer-definable, layered effects, and show how this semantics naturally supports reasoning by familiar syntactic techniques, such as showing soundness of a Curry-style effect-type system by the progress+preservation method.", "paper_title": "Monads in Action", "paper_id": "WOS:000274028100041"}