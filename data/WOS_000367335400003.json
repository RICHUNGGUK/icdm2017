{"auto_keywords": [{"score": 0.04417596194338469, "phrase": "object_code"}, {"score": 0.012125953627693286, "phrase": "original_system"}, {"score": 0.00481495049065317, "phrase": "compilation_scheme"}, {"score": 0.0040978781692373005, "phrase": "constructor-based_graph"}, {"score": 0.003558294449586273, "phrase": "innermost_strategy"}, {"score": 0.0031845067058084583, "phrase": "eager_functions"}, {"score": 0.0030278017562213265, "phrase": "programming_languages"}, {"score": 0.002709589081384597, "phrase": "total_or_partial_construction"}, {"score": 0.0025503112711036994, "phrase": "needed_steps"}, {"score": 0.0023762535034673017, "phrase": "normal_forms"}, {"score": 0.002214048743052355, "phrase": "execution_time"}, {"score": 0.0021049977753042253, "phrase": "ordinary_rewriting_computations"}], "paper_keywords": [""], "paper_abstract": "We define a compilation scheme for a constructor-based, strongly-sequential, graph rewriting system which shortcuts some needed steps. The object code is another constructor-based graph rewriting system. This system is normalizing for the original system when using an innermost strategy. Consequently, the object code can be easily implemented by eager functions in a variety of programming languages. We modify this object code in a way that avoids total or partial construction of the contracta of some needed steps of a computation. When computing normal forms in this way, both memory consumption and execution time are reduced compared to ordinary rewriting computations in the original system.", "paper_title": "Needed Computations Shortcutting Needed Steps", "paper_id": "WOS:000367335400003"}