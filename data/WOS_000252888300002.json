{"auto_keywords": [{"score": 0.04274349840535544, "phrase": "michael"}, {"score": 0.04215833196561754, "phrase": "scott"}, {"score": 0.004140490129683107, "phrase": "lock-free_fifo_queue_algorithm"}, {"score": 0.0037171648669537287, "phrase": "new_dynamic-memory_concurrent_lock-free_fifo_queue_algorithm"}, {"score": 0.0032893028281789287, "phrase": "key_idea"}, {"score": 0.0031730701021262155, "phrase": "novel_way"}, {"score": 0.0030830390264125923, "phrase": "singly-linked_list"}, {"score": 0.0027675275077806744, "phrase": "\"optimistic\"_doubly_-_linked_list"}, {"score": 0.0026315183701883437, "phrase": "simple_store"}, {"score": 0.002448704249007665, "phrase": "bad_ordering"}, {"score": 0.0022138542785562444, "phrase": "first_example"}, {"score": 0.0021049977753042253, "phrase": "real_world_data_structure"}], "paper_keywords": ["CAS", " compare and swap", " concurrent data structures", " FIFO queue", " lock-free", " non-blocking", " synchronization"], "paper_abstract": "First-in-first-out (FIFO) queues are among the most fundamental and highly studied concurrent data structures. The most effective and practical dynamic-memory concurrent queue implementation in the literature is the lock-free FIFO queue algorithm of Michael and Scott, included in the standard Java(TM) Concurrency Package. This work presents a new dynamic-memory concurrent lock-free FIFO queue algorithm that in a variety of circumstances performs better than the Michael and Scott queue. The key idea behind our new algorithm is a novel way of replacing the singly-linked list of Michael and Scott, whose pointers are inserted using a costly compare-and-swap (CAS) operation, by an \"optimistic\" doubly - linked list whose pointers are updated using a simple store, yet can be \"fixed\" if a bad ordering of events causes them to be inconsistent. We believe it is the first example of such an \"optimistic\" approach being applied to a real world data structure.", "paper_title": "An optimistic approach to lock-free FIFO queues", "paper_id": "WOS:000252888300002"}