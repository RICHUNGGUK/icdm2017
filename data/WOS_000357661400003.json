{"auto_keywords": [{"score": 0.048443587692422414, "phrase": "dwyer_et_al"}, {"score": 0.00481495049065317, "phrase": "compositional_automata-based_semantics"}, {"score": 0.00468656988857138, "phrase": "property_patterns"}, {"score": 0.004526503177267299, "phrase": "dynamic_properties"}, {"score": 0.00445712058827745, "phrase": "limited_number"}, {"score": 0.004422827355213055, "phrase": "predefined_patterns"}, {"score": 0.00406250784433007, "phrase": "usual_temporal_logics"}, {"score": 0.003969455428965048, "phrase": "ctl"}, {"score": 0.0038634933357842302, "phrase": "translational_semantics"}, {"score": 0.003534889186471058, "phrase": "natural_semantics"}, {"score": 0.0034140224493254935, "phrase": "compositional_automata-based_approach"}, {"score": 0.0029361086955646625, "phrase": "model_checking"}, {"score": 0.0026347074232350503, "phrase": "property-based_testing"}, {"score": 0.0025347150832077175, "phrase": "test_suite"}, {"score": 0.0024574537875026634, "phrase": "property_automaton"}, {"score": 0.002373339527491525, "phrase": "coverage_criteria"}, {"score": 0.0023188652648490874, "phrase": "transformation_rules"}, {"score": 0.0022568866348667547, "phrase": "relevant_unfolding_strategies"}, {"score": 0.00218807532188779, "phrase": "automata_transitions"}, {"score": 0.0021049977753042253, "phrase": "industrial_case_study"}], "paper_keywords": ["Formal methods", " Temporal properties", " Compositional automata semantics", " Temporal logics", " Property patterns", " Testing transformation"], "paper_abstract": "Dwyer et al. provide a language to specify dynamic properties based on a limited number of predefined patterns and scopes. The semantics of these properties is defined by translating each combination of a pattern and a scope into usual temporal logics (linear temporal logic, CTL, etc.). This translational semantics suffers from two main issues. It is not easily extensible to other patterns or scopes, and it is not always faithful to the natural semantics. In this article, we propose a compositional automata-based approach defining the semantics of each pattern and each scope by an automaton, after which the semantics is composed. Hence, the semantics is compositional and the language is easily extensible. We compare the two semantics by model checking. In some cases, our semantics reveals a lack of homogeneity within Dwyer et al.'s semantics. Finally, we apply this approach in the context of property-based testing, in order to evaluate the quality of a test suite, by measuring the coverage of the property automaton. To allow the tester to adapt the coverage criteria to its goals, we propose transformation rules over the patterns automata that implement relevant unfolding strategies for loops, or predicates labeling the automata transitions. We illustrate these principles by means of an industrial case study.", "paper_title": "A compositional automata-based semantics and preserving transformation rules for testing property patterns", "paper_id": "WOS:000357661400003"}