{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "elliptic_curve_cryptography"}, {"score": 0.03952148495928651, "phrase": "cryptographic_software"}, {"score": 0.0047267100475487595, "phrase": "cryptographic_software_implementation"}, {"score": 0.004583205112737672, "phrase": "expert_programmers"}, {"score": 0.004444037594955185, "phrase": "performance_and_security_driven_options"}, {"score": 0.004001593118269276, "phrase": "specific_language"}, {"score": 0.003952513974962462, "phrase": "compiler_techniques"}, {"score": 0.003693103542455806, "phrase": "interesting_research_challenge"}, {"score": 0.00336651286887065, "phrase": "ecc"}, {"score": 0.0031845067058084583, "phrase": "suitable_language"}, {"score": 0.0031068064097811844, "phrase": "ecc_based_software"}, {"score": 0.0029753513692467315, "phrase": "original_mathematics"}, {"score": 0.0029207251108325006, "phrase": "corresponding_compiler"}, {"score": 0.0028848643090508205, "phrase": "automatic_production"}, {"score": 0.0026953359825383646, "phrase": "hand-optimised_implementation"}, {"score": 0.002565345470805401, "phrase": "worrying_potential"}, {"score": 0.0022254275750539453, "phrase": "cace"}, {"score": 0.002171220868378503, "phrase": "eu"}, {"score": 0.0021049977753042253, "phrase": "general_topic"}], "paper_keywords": ["Elliptic curve cryptography (ECC)", " Implementation", " Compilers", " Optimisation", " Specialisation"], "paper_abstract": "Although cryptographic software implementation is often performed by expert programmers, the range of performance and security driven options, as well as more mundane software engineering issues, still make it a challenge. The use of domain specific language and compiler techniques to assist in description and optimisation of cryptographic software is an interesting research challenge. In this paper we investigate two aspects of such techniques, focusing on Elliptic Curve Cryptography (ECC) in particular. Our constructive results show that a suitable language allows description of ECC based software in a manner close to the original mathematics; the corresponding compiler allows automatic production of an executable whose performance is competitive with that of a hand-optimised implementation. In contrast, we study the worrying potential for na < ve compiler driven optimisation to render cryptographic software insecure. Both aspects of our work are set within the context of CACE, an ongoing EU funded project on this general topic.", "paper_title": "Constructive and Destructive Use of Compilers in Elliptic Curve Cryptography", "paper_id": "WOS:000264963100005"}