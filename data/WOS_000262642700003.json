{"auto_keywords": [{"score": 0.04087975875603891, "phrase": "cbv_termination"}, {"score": 0.00481495049065317, "phrase": "untyped_lambda-calculus."}, {"score": 0.004766683200410046, "phrase": "fully-automated_algorithm"}, {"score": 0.004245051445971095, "phrase": "\"size-change_principle"}, {"score": 0.00418134346679498, "phrase": "first-order_programs"}, {"score": 0.0040978781692373005, "phrase": "arbitrary_untyped_lambda-expressions"}, {"score": 0.003975781274672803, "phrase": "first_step"}, {"score": 0.003594369823549604, "phrase": "regular_set"}, {"score": 0.003469676666252421, "phrase": "tree_grammar"}, {"score": 0.0034003686971964707, "phrase": "simple_example"}, {"score": 0.0033492947290751996, "phrase": "minimum_function"}, {"score": 0.0032658649336454923, "phrase": "arbitrary_church_numerals"}, {"score": 0.002982307044758515, "phrase": "sound_algorithm"}, {"score": 0.0028070431733705735, "phrase": "cbv_evaluation"}, {"score": 0.0026688629249775925, "phrase": "intensional_power"}, {"score": 0.002628747284714371, "phrase": "termination_algorithm"}, {"score": 0.0024247382451294255, "phrase": "parameter_exchanges"}, {"score": 0.0023882836079028185, "phrase": "colson"}, {"score": 0.0021263705039915198, "phrase": "substantial_subset"}, {"score": 0.002105001850722569, "phrase": "pcf."}], "paper_keywords": ["Program analysis", " Termination analysis", " Untyped Lambda calculus", " The Size-Change Principle"], "paper_abstract": "A fully-automated algorithm is developed able to show that evaluation of a given untyped lambda-expression will terminate under CBV (call-by-value). The \"size-change principle\" from first-order programs is extended to arbitrary untyped lambda-expressions in two steps. The first step suffices to show CBV termination of a single, stand-alone lambda-expression. The second suffices to show CBV termination of any member of a regular set of lambda-expressions, defined by a tree grammar. (A simple example is a minimum function, when applied to arbitrary Church numerals.) The algorithm is sound and proven so in this paper. The Halting Problem's undecidability implies that any sound algorithm is necessarily incomplete: some lambda-expressions may in fact terminate under CBV evaluation, but not be recognised as terminating. The intensional power of the termination algorithm is reasonably high. It certifies as terminating many interesting and useful general recursive algorithms including programs with mutual recursion and parameter exchanges, and Colson's \"minimum\" algorithm. Further, our type-free approach allows use of the Y combinator, and so can identify as terminating a substantial subset of PCF.", "paper_title": "CALL-BY-VALUE TERMINATION IN THE UNTYPED lambda-CALCULUS", "paper_id": "WOS:000262642700003"}