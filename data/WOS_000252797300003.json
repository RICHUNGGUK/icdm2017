{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "'s_exception"}, {"score": 0.004549524321051407, "phrase": "modern_programming_languages"}, {"score": 0.004229556887896042, "phrase": "correct_documentation"}, {"score": 0.004195418010131832, "phrase": "error_codes"}, {"score": 0.004078078530972285, "phrase": "erroneous_situations"}, {"score": 0.003370565320453525, "phrase": "unchecked_exceptions"}, {"score": 0.003289534854212415, "phrase": "microsoft_.net_applications"}, {"score": 0.003107935254560724, "phrase": "exception_documentation"}, {"score": 0.0026638482306228575, "phrase": "method_calls"}, {"score": 0.002506507889886399, "phrase": "eh_mechanisms"}, {"score": 0.0024761702541879213, "phrase": "modem_programming_languages"}, {"score": 0.002348883765159185, "phrase": "major_conclusion"}, {"score": 0.0022190974300886467, "phrase": "error-handling_mechanism"}, {"score": 0.0021049977753042253, "phrase": "unchecked_exceptions_approach"}], "paper_keywords": [""], "paper_abstract": "The emergence of exception handling (EH) mechanisms in modern programming languages made available a different way of communicating errors between procedures. For years, programmers trusted in correct documentation of error codes returned by procedures to correctly handle erroneous situations. Now, they have to focus on the documentation of exceptions for the same effect. But to what extent can exception documentation be trusted? Moreover, is there enough documentation for exceptions? And in what way do these questions relate to the discussion on checked against unchecked exceptions? For a given set of Microsoft .NET applications, code and documentation were thoroughly parsed and compared. This showed that exception documentation tends to be scarce. In particular, it showed that 90% of exceptions are undocumented. Furthermore, programmers were demonstrated to be keener to document exceptions they explicitly throw while typically leaving exceptions resulting from method calls undocumented. This conclusion lead to another question: how do programmers use the EH mechanisms available in modem programming languages? More than 16 different .NET applications were examined in order to provide an answer. The major conclusion of this work is that exceptions are not being correctly used as an error-handling mechanism. These results contribute to the assessment of the effectiveness of the unchecked exceptions approach.", "paper_title": "Hidden truth behind .NET's exception handling today", "paper_id": "WOS:000252797300003"}