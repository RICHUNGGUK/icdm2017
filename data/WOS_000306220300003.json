{"auto_keywords": [{"score": 0.03947447987613366, "phrase": "waiting_jobs"}, {"score": 0.00481495049065317, "phrase": "line_scheduling"}, {"score": 0.004334280585565239, "phrase": "future_jobs"}, {"score": 0.004285702427563952, "phrase": "due_date"}, {"score": 0.00422177384286051, "phrase": "job_arrival"}, {"score": 0.004005410765048467, "phrase": "weighted_lead_times"}, {"score": 0.00396050388346298, "phrase": "due_dates"}, {"score": 0.003659890662429693, "phrase": "waiting_sequence"}, {"score": 0.0034332736827447654, "phrase": "new_job"}, {"score": 0.003369322866499541, "phrase": "on-line_schedule"}, {"score": 0.0032941471167321408, "phrase": "first_job"}, {"score": 0.0032571885279065126, "phrase": "waiting_list"}, {"score": 0.003220643255032943, "phrase": "\"best\"_ant"}, {"score": 0.0026986685585382347, "phrase": "due_date_violation"}, {"score": 0.002550545394070177, "phrase": "iterative_procedure"}, {"score": 0.0024842242921857705, "phrase": "on-line_problem"}, {"score": 0.0024196235355517827, "phrase": "traditional_aco_framework"}, {"score": 0.0024014759148123736, "phrase": "ant_elimination"}, {"score": 0.0023745087648471613, "phrase": "computational_testing"}, {"score": 0.0023566987138026285, "phrase": "generated_instances"}, {"score": 0.0023040642263522505, "phrase": "existing_effective_on-line_algorithm"}, {"score": 0.00223570488212345, "phrase": "local_search"}, {"score": 0.0021857667493036786, "phrase": "earliest_due_date"}, {"score": 0.0021049977753042253, "phrase": "computational_outcome"}], "paper_keywords": ["Metaheuristics", " Ant colony optimization", " Due date", " Lead time", " On-line scheduling"], "paper_abstract": "This paper aims to develop an on-line Ant Colony Optimization (ACO) framework, where jobs arrive over time, and at any time we lack knowledge concerning future jobs. A due date is determined upon job arrival, and jobs are sequenced on the machine to optimize the sum of weighted lead times with all due dates met. We propose that each ant is associated with a sequence of waiting jobs with quoted due dates. This waiting sequence is constantly updated over time (whenever a job is selected to be processed or a new job arrives). The on-line schedule is constructed by selecting the first job in the waiting list of the \"best\" ant to process (along with its due date) as the machine becomes available. However, for the ant where this job is not the first one in the list, processing it pushes back the waiting jobs positioned before it. If such push back results in a due date violation, this ant will be eliminated. Further, our ACO framework does not include the iterative procedure due to the characteristics of the on-line problem; this is one difference from the traditional ACO framework besides ant elimination. The computational testing on generated instances shows that our ACO algorithm outperforms an existing effective on-line algorithm in the literature. Also, with local search incorporated using the EDD (Earliest Due Date) rule, improvements can be obtained in both computational outcome and time.", "paper_title": "A novel ant colony optimization approach for on-line scheduling and due date determination", "paper_id": "WOS:000306220300003"}