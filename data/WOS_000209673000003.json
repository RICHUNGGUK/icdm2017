{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "malware_detection"}, {"score": 0.004514714250357749, "phrase": "efficient_malware_detectors"}, {"score": 0.004482526999029664, "phrase": "malware_writers"}, {"score": 0.004387329529902255, "phrase": "different_techniques"}, {"score": 0.004202931484732134, "phrase": "dead_code"}, {"score": 0.0041580507929967645, "phrase": "useless_push"}, {"score": 0.004011867299107537, "phrase": "operating_system"}, {"score": 0.0038708031633013086, "phrase": "malware_detectors"}, {"score": 0.0037615180375561805, "phrase": "program's_stack"}, {"score": 0.0036422425344358037, "phrase": "new_model-checking_approach"}, {"score": 0.003318423751430509, "phrase": "pushdown_system"}, {"score": 0.0032016639006812826, "phrase": "new_logic"}, {"score": 0.003034158379493625, "phrase": "malicious_behavior"}, {"score": 0.0029169007179202164, "phrase": "branching-time_temporal_logic"}, {"score": 0.002734692147497601, "phrase": "malware_detection_problem"}, {"score": 0.0027054473441439422, "phrase": "model-checking_problem"}, {"score": 0.00266693888510356, "phrase": "sctpl_formulas"}, {"score": 0.0025546627686955656, "phrase": "malicious_behaviors"}, {"score": 0.00249135867469492, "phrase": "existing_specification_formalisms"}, {"score": 0.0023864566654035924, "phrase": "sctpl_specifications"}, {"score": 0.0023024126375034066, "phrase": "symbolic_alternating_buchi_pushdown_systems"}], "paper_keywords": ["Pushdown Systems", " Model Checking", " CTL", " Malware Detection"], "paper_abstract": "The number of malware is growing extraordinarily fast. Therefore, it is important to have efficient malware detectors. Malware writers try to obfuscate their code by different techniques. Many well-known obfuscation techniques rely on operations on the stack such as inserting dead code by adding useless push and pop instructions, or hiding calls to the operating system, etc. Thus, it is important for malware detectors to be able to deal with the program's stack. In this study, we propose a new model-checking approach for malware detection that takes into account the behavior of the stack. Our approach consists in: (1) Modeling the program using a pushdown system (PDS). (2) Introducing a new logic, called stack computation tree predicate logic (SCTPL), to represent the malicious behavior. SCTPL can be seen as an extension of the branching-time temporal logic CTL with variables, quantifiers, and predicates over the stack. (3) Reducing the malware detection problem to the model-checking problem of PDSs against SCTPL formulas. We show how our new logic can be used to precisely express malicious behaviors that could not be specified by existing specification formalisms. We then consider the model checking problem of PDSs against SCTPL specifications. We reduce this problem to emptiness checking in Symbolic Alternating Buchi Pushdown Systems, and we provide an algorithm to solve this problem. We implemented our techniques in a tool and applied it to detect several viruses. Our results are encouraging.", "paper_title": "Pushdown model checking for malware detection", "paper_id": "WOS:000209673000003"}