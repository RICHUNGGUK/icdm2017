{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "range_queries"}, {"score": 0.02306687153905472, "phrase": "replicated_declustering"}, {"score": 0.010032668260834121, "phrase": "parallel_servers"}, {"score": 0.005156560739546011, "phrase": "single_queries"}, {"score": 0.004942710985080232, "phrase": "multiple_queries"}, {"score": 0.0047306971679760175, "phrase": "common_technique"}, {"score": 0.004631527916092452, "phrase": "data_intensive_applications"}, {"score": 0.004346266306175988, "phrase": "query_retrieval"}, {"score": 0.004151188559520802, "phrase": "large_spatial_data"}, {"score": 0.0038953958723049287, "phrase": "optimal_declustering_scheme"}, {"score": 0.0036942726653704213, "phrase": "available_disks"}, {"score": 0.003603989174919527, "phrase": "single_copy_based_declustering_schemes"}, {"score": 0.003334309053314909, "phrase": "efficient_processing"}, {"score": 0.003195787852087248, "phrase": "database_applications"}, {"score": 0.003150900886669123, "phrase": "load_balancing"}, {"score": 0.0031286936417685178, "phrase": "fault_tolerance"}, {"score": 0.0030414140732789186, "phrase": "theoretical_foundations"}, {"score": 0.0029565620771207003, "phrase": "replicated_declustering_schemes"}, {"score": 0.0029357204796552653, "phrase": "periodic_allocations"}, {"score": 0.0026967596578196325, "phrase": "limited_amount"}, {"score": 0.002603012037901889, "phrase": "real_data"}, {"score": 0.0025664295665392203, "phrase": "arbitrary_grids"}, {"score": 0.0025393296453558203, "phrase": "large_number"}, {"score": 0.002468450551616404, "phrase": "effective_indexing_scheme"}, {"score": 0.0024423826953133844, "phrase": "fast_identification"}, {"score": 0.0023491282852109757, "phrase": "optimal_processing"}, {"score": 0.00225144317399471, "phrase": "parallel_processing"}, {"score": 0.0022041312401435346, "phrase": "experimental_results"}, {"score": 0.002180848602315088, "phrase": "proposed_replication_scheme"}, {"score": 0.0021049977753042253, "phrase": "synthetic_and_real_data_sets"}], "paper_keywords": ["declustering", " replication", " parallel access", " range queries", " periodic allocation", " optimal parallel processing", " replicated declustering"], "paper_abstract": "A common technique used to minimize I/O in data intensive applications is data declustering over parallel servers. This technique involves distributing data among several disks so as to parallelize query retrieval and thus, improve performance. We focus on optimizing access to large spatial data, and the most common type of queries on such data, i.e., range queries. An optimal declustering scheme is one in which the processing for all range queries is balanced uniformly among the available disks. It has been shown that single copy based declustering schemes are non-optimal for range queries. In this paper, we integrate replication in conjunction with parallel disk declustering for efficient processing of range queries. We note that replication is largely used in database applications for several purposes like load balancing, fault tolerance and availability of data. We propose theoretical foundations for replicated declustering and propose a class of replicated declustering schemes, periodic allocations, which are shown to be strictly optimal for a number of disks. We propose a framework for replicated declustering, using a limited amount of replication and provide extensions to apply it on real data, which include arbitrary grids and a large number of disks. Our framework also provides an effective indexing scheme that enables fast identification of data of interest in parallel servers. In addition to optimal processing of single queries, we show that this framework is effective for parallel processing of multiple queries. We present experimental results comparing the proposed replication scheme to other techniques for both single queries and multiple queries, on synthetic and real data sets.", "paper_title": "Efficient parallel processing of range queries through replicated declustering", "paper_id": "WOS:000239868700002"}