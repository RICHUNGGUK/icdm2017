{"auto_keywords": [{"score": 0.04958190830867933, "phrase": "arbitrary_computational_environments"}, {"score": 0.041464067913329024, "phrase": "network_structure"}, {"score": 0.03754411598201194, "phrase": "heterogeneous_interactions"}, {"score": 0.015719995905136012, "phrase": "api"}, {"score": 0.014840644414588445, "phrase": "heterogeneous_entities"}, {"score": 0.013743477251234317, "phrase": "different_computational_approaches"}, {"score": 0.013561875273049239, "phrase": "disk-based_data_structures"}, {"score": 0.013382640365282826, "phrase": "application_programming_interface"}, {"score": 0.012428637714096769, "phrase": "core_element"}, {"score": 0.012101898526227929, "phrase": "object-oriented_approach"}, {"score": 0.01181859550576987, "phrase": "static_and_dynamic_networks"}, {"score": 0.01147366669127885, "phrase": "unified_treatment"}, {"score": 0.011439725936154816, "phrase": "different_computational_environments"}, {"score": 0.010220989109653016, "phrase": "distributed_program"}, {"score": 0.010175612371463657, "phrase": "test_data"}, {"score": 0.004779182699924295, "phrase": "complex_networks"}, {"score": 0.00472955160788118, "phrase": "great_development"}, {"score": 0.004708438484307783, "phrase": "structural_and_dynamic_study"}, {"score": 0.0044225190486337634, "phrase": "network_edges"}, {"score": 0.004357031260269417, "phrase": "practical_interest"}, {"score": 0.004031744546046887, "phrase": "general_networks"}, {"score": 0.003930738245421039, "phrase": "different_packages"}, {"score": 0.0039015130621644517, "phrase": "related_tasks"}, {"score": 0.003884081948117292, "phrase": "structural_package"}, {"score": 0.0037250869218569244, "phrase": "api_structural_component"}, {"score": 0.0034468165006715013, "phrase": "structural_package_show"}, {"score": 0.0034262895977021854, "phrase": "current_standard_computers"}, {"score": 0.003385600553283614, "phrase": "main_memory"}, {"score": 0.0033755037617077483, "phrase": "directed_and_undirected_linear_networks"}, {"score": 0.0033007282911220862, "phrase": "existing_tools"}, {"score": 0.0032819891045702035, "phrase": "program"}, {"score": 0.003208378286992936, "phrase": "cpc_program_library"}, {"score": 0.0031988083245396825, "phrase": "queen's_university"}, {"score": 0.00318926705330267, "phrase": "belfast"}, {"score": 0.0031797536775378327, "phrase": "n._ireland"}, {"score": 0.003160812175253167, "phrase": "standard_cpc"}, {"score": 0.0029997994635265787, "phrase": "tar.gz_programming_language"}, {"score": 0.0029509378946353426, "phrase": "linux"}, {"score": 0.002942206872028358, "phrase": "windows"}, {"score": 0.0028941430826566867, "phrase": "computational_modeling"}, {"score": 0.002876898026362266, "phrase": "complex_systems"}, {"score": 0.0028469653622421828, "phrase": "interacting_elements"}, {"score": 0.0028173432523548206, "phrase": "paramount_importance"}, {"score": 0.002800554530626544, "phrase": "general_case"}, {"score": 0.002533723901680123, "phrase": "unified_approach"}, {"score": 0.002518621016346282, "phrase": "heterogeneous_networks"}, {"score": 0.0022854142435338324, "phrase": "heterogeneous_agents"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["API", " Software", " Complex networks", " Heterogeneous networks", " Dynamic networks"], "paper_abstract": "The last decade witnessed a great development of the structural and dynamic study of complex systems described as a network of elements. Therefore, systems can be described as a set of, possibly, heterogeneous entities or agents (the network nodes) interacting in, possibly, different ways (defining the network edges). In this context, it is of practical interest to model and handle not only static and homogeneous networks but also dynamic, heterogeneous ones. Depending on the size and type of the problem, these networks may require different computational approaches involving sequential, parallel or distributed systems with or without the use of disk-based data structures. In this work, we develop an Application Programming Interface (APINetworks) for the modeling and treatment of general networks in arbitrary computational environments. To minimize dependency between components, we decouple the network structure from its function using different packages for grouping sets of related tasks. The structural package, the one in charge of building and handling the network structure, is the core element of the system. In this work, we focus in this API structural component. We apply an object-oriented approach that makes use of inheritance and polymorphism. In this way, we can model static and dynamic networks with heterogeneous elements in the nodes and heterogeneous interactions in the edges. In addition, this approach permits a unified treatment of different computational environments. Tests performed on a C++11 version of the structural package show that, on current standard computers, the system can handle, in main memory, directed and undirected linear networks formed by tens of millions of nodes and edges. Our results compare favorably to those of existing tools. Program summary Program title: APINetworks 1.0 Catalogue identifier: AEWZ_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEVVZ_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Standard CPC licence, http://cpc.cs.qub.ac.uk/licence/licence.html No. of lines in distributed program, including test data, etc.: 33736 No. of bytes in distributed program, including test data, etc.: 541147 Distribution format: tar.gz Programming language: Standard ANSI C++11. Computer: Workstation. Operating system: Linux, Windows. Classification: 6.3. Nature of problem: The computational modeling and handling of complex systems, described as a network of interacting elements, is nowadays a topic of paramount importance. In the general case, it is necessary to represent static or dynamic, time dependent, sets of heterogeneous entities related through heterogeneous interactions. In turn, and depending on the size and nature of the problem, different computational approaches may be required. Thus, we can resort to sequential, parallel or distributed systems and to disk-based data structures. Different tools are available that satisfy one or several of these requirements. However, a unified approach for dealing with heterogeneous networks in arbitrary computational environments is still pending. Solution method: To address the above issues, we have developed an Application Programming Interface: APINetworks. The API is organized in several packages where the one responsible for the network structure acts as the core element. We resort to an object-oriented approach, that makes use of inheritance and polymorphism. In this way, we can model static and dynamic networks and include heterogeneous agents in the nodes and heterogeneous interactions in the edges. In addition, this approach permits a unified treatment, transparent to the user, of different computational environments: sequential, parallel, distributed, memory-based or disk-based. Running time: Examples provided take a few seconds each. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "APINetworks: A general API for the treatment of complex networks in arbitrary computational environments", "paper_id": "WOS:000362602900042"}