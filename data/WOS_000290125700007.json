{"auto_keywords": [{"score": 0.04805787983294614, "phrase": "hash_values"}, {"score": 0.00481495049065317, "phrase": "energy-efficient_hash_chain_traversal"}, {"score": 0.00476334344613564, "phrase": "hash_chain_'h"}, {"score": 0.004307459965946991, "phrase": "secret_value"}, {"score": 0.0038256426589560774, "phrase": "public_value"}, {"score": 0.0037845987749316632, "phrase": "hash_chain"}, {"score": 0.0035729944980593324, "phrase": "time_period"}, {"score": 0.003313053707792957, "phrase": "kappa_hash_values"}, {"score": 0.0032075033252058835, "phrase": "kappa_memory_storages"}, {"score": 0.0028279422436488116, "phrase": "future_rounds"}, {"score": 0.0027775064989253575, "phrase": "online_computation"}, {"score": 0.0026410082462069596, "phrase": "computational_cost"}, {"score": 0.002612640527241776, "phrase": "design_goal"}, {"score": 0.0025938977569302177, "phrase": "previous_hash_chain_traversal_algorithms"}, {"score": 0.0025476254812544135, "phrase": "worst_case"}, {"score": 0.002493184318829227, "phrase": "minimal_pebbles"}, {"score": 0.0024136908511423875, "phrase": "different_optimization_problem"}, {"score": 0.0023791769068748194, "phrase": "average_case"}, {"score": 0.0023199580436336163, "phrase": "average_case_computational_cost"}, {"score": 0.0022138542785562444, "phrase": "practical_interest"}, {"score": 0.0021587414711262904, "phrase": "proposed_algorithm"}, {"score": 0.0021278653331014614, "phrase": "battery-powered_devices"}, {"score": 0.0021049977753042253, "phrase": "battery_lifetime"}], "paper_keywords": ["cryptography", " hash chain", " efficient traversal"], "paper_abstract": "A hash chain 'H for a one-way hash function h(.) is a sequence of hash values < v(0), v(1), ... , v(n)>, where v(n) is a secret value, v(i) is generated by v(i) = h(v(i+1)) for i = n - 1, ... n - 2, ... , 0 and v(0) is a public value. A hash chain traversal algorithm T computes and outputs the hash chain 74, returning v(i) in time period (called round) i for 1 <= i <= n. At the outset. T stores carefully chosen kappa hash values (including v) of 'H in kappa memory storages (called pebbles). In round i, T performs two kinds of computations; online computation to output v(i) with hash values stored in pebbles and then preparatory computation to rearrange pebbles for future rounds. Usually, the online computation consists of either one or zero hash function evaluation, while the preparatory computation occupies most of the computational cost. The design goal of previous hash chain traversal algorithms was to minimize the worst case computational cost per round with minimal pebbles. On the contrary, we study a different optimization problem of minimizing the average case computational cost. Our proposed traversal algorithm reduces the average case computational cost by 20-30% and the online computational cost by 23-33% for parameters of practical interest. For example, if the proposed algorithm is implemented on battery-powered devices, the battery lifetime can be increased by 20-30%.", "paper_title": "Energy-Efficient Hash Chain Traversal", "paper_id": "WOS:000290125700007"}