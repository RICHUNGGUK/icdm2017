{"auto_keywords": [{"score": 0.0388936759851193, "phrase": "high_overheads"}, {"score": 0.00481495049065317, "phrase": "data-aware_aggregation"}, {"score": 0.004676173016967478, "phrase": "high_performance_computing"}, {"score": 0.004039792863335641, "phrase": "parallel_file_system"}, {"score": 0.0035671997165370403, "phrase": "pfs_resources"}, {"score": 0.003438990973529508, "phrase": "large-scale_applications"}, {"score": 0.00336428077531883, "phrase": "checkpoint_frequency"}, {"score": 0.0028847066125323893, "phrase": "scalable_checkpoint-restart_system"}, {"score": 0.002720505061804933, "phrase": "multiple_application_processes"}, {"score": 0.002622647280008795, "phrase": "data_semantics"}, {"score": 0.0021996478802839316, "phrase": "simple_concatenation"}, {"score": 0.0021049977753042253, "phrase": "large-scale_application_checkpoints"}], "paper_keywords": ["Data-aware", " checkpoint restart", " distributed applications", " distributed systems", " fault tolerance", " aggregation", " bottleneck", " multiple-processor systems", " application-level checkpointing", " rollback recovery", " system reliability", " distributed programming", " fault tolerant computing", " software reliability", " system recovery"], "paper_abstract": "High performance computing (HPC) systems use checkpoint-restart to tolerate failures. Typically, applications store their states in checkpoints on a parallel file system (PFS). As applications scale up, checkpoint-restart incurs high overheads due to contention for PFS resources. The high overheads force large-scale applications to reduce checkpoint frequency, which means more compute time is lost in the event of failure. We alleviate this problem through a scalable checkpoint-restart system, mcrEngine. McrEngine aggregates checkpoints from multiple application processes with knowledge of the data semantics available through widely-used I/O libraries, e.g., HDF5 and netCDF, and compresses them. Our novel scheme improves compressibility of checkpoints up to 115% over simple concatenation and compression. Our evaluation with large-scale application checkpoints show that mcrEngine reduces checkpointing overhead by up to 87% and restart overhead by up to 62% over a baseline with no aggregation or compression.", "paper_title": "McrEngine: A scalable checkpointing system using data-aware aggregation and compression", "paper_id": "WOS:000327739800008"}