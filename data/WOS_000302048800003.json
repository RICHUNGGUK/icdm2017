{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "user_interfaces"}, {"score": 0.004762202897268383, "phrase": "workflow_management_systems"}, {"score": 0.004482206282876944, "phrase": "service_composition"}, {"score": 0.00433645229352341, "phrase": "service_invocations"}, {"score": 0.004195418010131832, "phrase": "web_mashups"}, {"score": 0.003757480190200645, "phrase": "google_map"}, {"score": 0.0036958398682001015, "phrase": "simple_web_pages"}, {"score": 0.003516898780234098, "phrase": "rather_isolated_fashion"}, {"score": 0.00327356326590461, "phrase": "coordination_idea"}, {"score": 0.003030247482854539, "phrase": "component-based_development_paradigm"}, {"score": 0.0029641011108505785, "phrase": "core_strengths"}, {"score": 0.0028675712105299496, "phrase": "single_model"}, {"score": 0.002758907973783665, "phrase": "new_paradigm"}, {"score": 0.0027286346722632006, "phrase": "ui"}, {"score": 0.0026107601878587816, "phrase": "mashup-like_and_process-based_nature"}, {"score": 0.0024299678474208023, "phrase": "ui_orchestrations"}, {"score": 0.002363806685815014, "phrase": "described_model"}, {"score": 0.002312174113289583, "phrase": "suitable_design"}, {"score": 0.0022492129111567824, "phrase": "runtime_instruments"}, {"score": 0.002200077887697072, "phrase": "whole_life_cycle"}, {"score": 0.002175913488493802, "phrase": "distributed_ui_orchestrations"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["UI orchestration", " Distributed UIs", " UI orchestration patterns", " BPEL4UI", " Mashups", " UI components", " MarcoFlow"], "paper_abstract": "Workflow management systems focus on the coordination of people and work items, service composition approaches on the coordination of service invocations, and, recently, web mashups have started focusing on the integration and coordination of pieces of user interfaces (UIs), e.g., a Google map, inside simple web pages. While these three approaches have evolved in a rather isolated fashion - although they can be seen as evolution of the componentization and coordination idea from people to services to UIs - in this paper we describe a component-based development paradigm that conciliates the core strengths of these three approaches inside a single model and language. We call this new paradigm distributed UI orchestration, so as to reflect the mashup-like and process-based nature of our target applications. In order to aid developers in implementing UI orchestrations, we equip the described model and language with suitable design, deployment, and runtime instruments, covering the whole life cycle of distributed UI orchestrations. (c) 2011 Elsevier Ltd. All rights reserved.", "paper_title": "Distributed orchestration of user interfaces", "paper_id": "WOS:000302048800003"}