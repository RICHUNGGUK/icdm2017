{"auto_keywords": [{"score": 0.034887398305923065, "phrase": "covert"}, {"score": 0.00481495049065317, "phrase": "android_inter-app_permission_leakage"}, {"score": 0.004676345706416371, "phrase": "mobile_devices"}, {"score": 0.004429388453288922, "phrase": "rich_inter-app_communication_system"}, {"score": 0.004230595706156783, "phrase": "android_permission_system"}, {"score": 0.004074574278425223, "phrase": "security_violations"}, {"score": 0.003875424718379985, "phrase": "android's_enforcement"}, {"score": 0.0037324526526073404, "phrase": "individual_apps"}, {"score": 0.003685972800046028, "phrase": "multiple_malicious_apps"}, {"score": 0.0035499650812710806, "phrase": "vulnerable_apps"}, {"score": 0.0032381878248821383, "phrase": "compositional_analysis"}, {"score": 0.0032112354575523317, "phrase": "android_inter-app_vulnerabilities"}, {"score": 0.003092690568543981, "phrase": "incremental_analysis"}, {"score": 0.0028805474861014722, "phrase": "reverse_engineered_source_code"}, {"score": 0.0028446460307503343, "phrase": "individual_app"}, {"score": 0.0027974705482714884, "phrase": "relevant_security_specifications"}, {"score": 0.002728166176898541, "phrase": "formal_verification"}, {"score": 0.0025838249689625775, "phrase": "formal_analysis_engine"}, {"score": 0.00216755493625594, "phrase": "inter-app_vulnerabilities"}], "paper_keywords": ["Formal verification", " static analysis", " Android", " Inter-App vulnerabilities"], "paper_abstract": "Android is the most popular platform for mobile devices. It facilitates sharing of data and services among applications using a rich inter-app communication system. While access to resources can be controlled by the Android permission system, enforcing permissions is not sufficient to prevent security violations, as permissions may be mismanaged, intentionally or unintentionally. Android's enforcement of the permissions is at the level of individual apps, allowing multiple malicious apps to collude and combine their permissions or to trick vulnerable apps to perform actions on their behalf that are beyond their individual privileges. In this paper, we present COVERT, a tool for compositional analysis of Android inter-app vulnerabilities. COVERT's analysis is modular to enable incremental analysis of applications as they are installed, updated, and removed. It statically analyzes the reverse engineered source code of each individual app, and extracts relevant security specifications in a format suitable for formal verification. Given a collection of specifications extracted in this way, a formal analysis engine (e.g., model checker) is then used to verify whether it is safe for a combination of applications-holding certain permissions and potentially interacting with each other-to be installed together. Our experience with using COVERT to examine over 500 real-world apps corroborates its ability to find inter-app vulnerabilities in bundles of some of the most popular apps on the market.", "paper_title": "COVERT: Compositional Analysis of Android Inter-App Permission Leakage", "paper_id": "WOS:000361700500002"}