{"auto_keywords": [{"score": 0.044340662163821175, "phrase": "compositional_and_annotative_approaches"}, {"score": 0.00481495049065317, "phrase": "formal_calculus"}, {"score": 0.0035408501923902477, "phrase": "feature_models"}, {"score": 0.002956562077120703, "phrase": "best_combination"}, {"score": 0.002687235334499192, "phrase": "inherent_feature_interactions"}, {"score": 0.002196342933346204, "phrase": "recurring_variational_patterns"}, {"score": 0.0021049977753042253, "phrase": "metaprogramming_platform"}], "paper_keywords": ["Design", " Languages", " Theory", " choice calculus", " feature-oriented software development", " preprocessors", " separation of concerns", " variational software"], "paper_abstract": "We present a formal calculus for modeling and implementing variation in software. It unifies the compositional and annotative approaches to feature implementation and supports the development of abstractions that can be used to directly relate feature models to their implementation. Since the compositional and annotative approaches are complementary, the calculus enables implementers to use the best combination of tools for the job and focus on inherent feature interactions, rather than those introduced by biases in the representation. The calculus also supports the abstraction of recurring variational patterns and provides a metaprogramming platform for organizing variation in artifacts.", "paper_title": "A Calculus for Modeling and Implementing Variation", "paper_id": "WOS:000318631100015"}