{"auto_keywords": [{"score": 0.049686686198658465, "phrase": "model-driven_engineering"}, {"score": 0.045032319739093475, "phrase": "mde"}, {"score": 0.03050025526583985, "phrase": "web_rule_languages"}, {"score": 0.00481495049065317, "phrase": "concrete_and_abstract_syntaxes"}, {"score": 0.004678384952779725, "phrase": "rule_languages"}, {"score": 0.00445318311339027, "phrase": "abstract_and_textual_concrete_syntaxes"}, {"score": 0.004067977399245212, "phrase": "programming_languages"}, {"score": 0.003968806706727518, "phrase": "obvious_difference"}, {"score": 0.00388800655625083, "phrase": "abstract_syntax"}, {"score": 0.003808845109556467, "phrase": "new_set"}, {"score": 0.0037776319581225046, "phrase": "engineering_principles"}, {"score": 0.003700709435644458, "phrase": "different_approaches"}, {"score": 0.0036553070575015344, "phrase": "abstract_and_concrete_syntaxes"}, {"score": 0.0036104596826132965, "phrase": "mde_context"}, {"score": 0.0035079364710988627, "phrase": "current_state"}, {"score": 0.00338037259057507, "phrase": "textual_concrete"}, {"score": 0.003352658916650986, "phrase": "abstract_syntaxes"}, {"score": 0.0031260524791486347, "phrase": "current_technologies"}, {"score": 0.0030372426452745073, "phrase": "comprehensive_coverage"}, {"score": 0.0028086649378423357, "phrase": "syntax_specification_languages"}, {"score": 0.002651291854234327, "phrase": "language_elements"}, {"score": 0.0025547994452342266, "phrase": "realistic_analysis_framework"}, {"score": 0.0024821782596371536, "phrase": "general_conclusions"}, {"score": 0.0023527296826339225, "phrase": "analyzed_languages"}, {"score": 0.0022300169122921906, "phrase": "empirical_results"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["model-driven engineering", " metamodels", " transformation languages", " syntax"], "paper_abstract": "The paper covers the problem of bridging the gap between abstract and textual concrete syntaxes of software languages in the model-driven engineering (MDE) context. This problem has been well studied in the context of programming languages, but due to the obvious difference in the definitions of abstract syntax, MDE requires a new set of engineering principles. We first explore different approaches to defining abstract and concrete syntaxes in the MDE context. Next, we investigate the current state of languages and techniques used for bridging between textual concrete and abstract syntaxes in the context of MDE. Finally, we report on lessons learned in experimenting with the current technologies. In order to provide a comprehensive coverage of the problem under study, we have selected a case of Web rule languages. Web rule languages leverage various types of syntax specification languages; and they are complex in nature and large in terms of the language elements. Thus, they provide us with a realistic analysis framework based on which we can draw general conclusions. Based on the series of experiments that we conducted with the analyzed languages, we propose a method for approaching such problems and report on the empirical results obtained from the data collected during our experiments. Copyright (C) 2009 John Wiley & Sons, Ltd.", "paper_title": "Bridging concrete and abstract syntaxes in model-driven engineering: a case of rule languages", "paper_id": "WOS:000271337300001"}