{"auto_keywords": [{"score": 0.03296245042078179, "phrase": "existing_method"}, {"score": 0.00481495049065317, "phrase": "enumerative_robot_path_planning"}, {"score": 0.004690694501758065, "phrase": "parallel_formulation"}, {"score": 0.004641890423057823, "phrase": "enumerative_search"}, {"score": 0.004593591780245872, "phrase": "high_dimensional_spaces"}, {"score": 0.004475022550508119, "phrase": "planning_paths"}, {"score": 0.004359500411441827, "phrase": "participating_processors"}, {"score": 0.004180809918117248, "phrase": "goal_configuration"}, {"score": 0.003926359151817743, "phrase": "dynamic_load-balancing_scheme"}, {"score": 0.0038854765143440965, "phrase": "idle_and_busy_processors"}, {"score": 0.0037653554368382814, "phrase": "comparison_purposes"}, {"score": 0.003629882559085245, "phrase": "existing_parallel_static_load-balancing_formulation"}, {"score": 0.003251920460276645, "phrase": "different_search_strategies"}, {"score": 0.003069867656852932, "phrase": "tuned_space_decomposition"}, {"score": 0.002897977113538355, "phrase": "planning_time"}, {"score": 0.0027213882346615406, "phrase": "search_space"}, {"score": 0.0026096659285441384, "phrase": "different_obstacle_placements"}, {"score": 0.0025824576209656676, "phrase": "empirical_selection"}, {"score": 0.002542174767860791, "phrase": "space_decomposition_parameters"}, {"score": 0.002450602177683068, "phrase": "minimal_planning_time"}, {"score": 0.002362320344521919, "phrase": "slower_planning"}, {"score": 0.0022299587520401747, "phrase": "developed_dynamic_method"}, {"score": 0.002172266188075892, "phrase": "obstacle_placements"}, {"score": 0.0021049977753042253, "phrase": "consistent_speed-up"}], "paper_keywords": ["dynamic load sharing", " parallel robot path planning"], "paper_abstract": "We present a parallel formulation for enumerative search in high dimensional spaces and apply it to planning paths for a 6-dof manipulator robot. Participating processors perform local A* search towards the goal configuration. To exploit all the processors at their maximum capacity at all times, a dynamic load-balancing scheme matches idle and busy processors for load transfer. For comparison purposes, we have also implemented an existing parallel static load-balancing formulation based on regular domain decomposition. Both methods achieved almost linear speed-up in our experiments. The two methods follow different search strategies in parallel and the implementation of the existing method (with tuned space decomposition) was more time efficient on average. However, the planning time of that method is highly dependent on the distribution of the search space among the processors and its tuned decomposition varies for different obstacle placements. Empirical selection of the space decomposition parameters for the existing method does not guarantee minimal planning time in all environments and leads to slower planning than our dynamic load-balancing method in some cases. The performance of the developed dynamic method is independent of the obstacle placements and the method can achieve consistent speed-up in all environments.", "paper_title": "A dynamic load-balancing parallel search for enumerative robot path planning", "paper_id": "WOS:000241452700004"}