{"auto_keywords": [{"score": 0.048980829617158356, "phrase": "variable_environments"}, {"score": 0.00481495049065317, "phrase": "adaptive_application_component_mapping"}, {"score": 0.004770461993586338, "phrase": "parallel_computation"}, {"score": 0.004617949594931096, "phrase": "traditional_strategies"}, {"score": 0.004532988904965752, "phrase": "application's_computation"}, {"score": 0.0044702911400353535, "phrase": "single_server"}, {"score": 0.0044289730051264116, "phrase": "parallel_computation_offloading"}, {"score": 0.004208427318712072, "phrase": "multiple_computing_resources"}, {"score": 0.00415019999222481, "phrase": "mobile_terminal"}, {"score": 0.00398028819691605, "phrase": "communication_and_computation_environments"}, {"score": 0.003943481134959376, "phrase": "multi-partitioning_algorithms"}, {"score": 0.003764469758319617, "phrase": "time-varying_scenarios"}, {"score": 0.0036951530348821116, "phrase": "over-frequent_algorithm_executions"}, {"score": 0.0035603115570447467, "phrase": "excessive_algorithm_costs"}, {"score": 0.003446353878654566, "phrase": "adaptive_application_component_mapping_algorithm"}, {"score": 0.0031845067058084583, "phrase": "computation_costs"}, {"score": 0.0031550351923674337, "phrase": "inter-resource_communication_costs"}, {"score": 0.0030398432591176357, "phrase": "suitable_solution"}, {"score": 0.002997735656669146, "phrase": "current_environment"}, {"score": 0.002956209594959227, "phrase": "low_incremental_algorithm_cost"}, {"score": 0.0028882701690741467, "phrase": "application_component"}, {"score": 0.002795762692061496, "phrase": "graph_mapping_model"}, {"score": 0.0027062100658653485, "phrase": "pathfinding_problem"}, {"score": 0.0026687115458522326, "phrase": "genetic_algorithm"}, {"score": 0.0026195184143518713, "phrase": "elite-based_immigrants_mechanism"}, {"score": 0.002375714262344562, "phrase": "searching_speed"}, {"score": 0.0023537101705489957, "phrase": "transmission_and_processing_speeds"}, {"score": 0.0023210846870653757, "phrase": "simulation_results"}, {"score": 0.0021545524633190985, "phrase": "traditional_approaches"}, {"score": 0.0021049977753042253, "phrase": "large_extent"}], "paper_keywords": ["parallel computation offloading", " application multi-partitioning", " graph mapping", " combinatorial optimization", " genetic algorithm"], "paper_abstract": "Distinguished with traditional strategies which offload an application's computation to a single server, parallel computation offloading can promote the performance by simultaneously delivering the computation to multiple computing resources around the mobile terminal. However, due to the variability of communication and computation environments, static application component multi-partitioning algorithms are difficult to maintain the optimality of their solutions in time-varying scenarios, whereas, over-frequent algorithm executions triggered by changes of environments may bring excessive algorithm costs. To this end, an adaptive application component mapping algorithm for parallel computation offloading in variable environments is proposed in this paper, which aims at minimizing computation costs and inter-resource communication costs. It can provide the terminal a suitable solution for the current environment with a low incremental algorithm cost. We represent the application component multi-partitioning problem as a graph mapping model, then convert it into a pathfinding problem. A genetic algorithm enhanced by an elite-based immigrants mechanism is designed to obtain the solution adaptively, which can dynamically adjust the precision of the solution and boost the searching speed as transmission and processing speeds change. Simulation results demonstrate that our algorithm can promote the performance efficiently, and it is superior to the traditional approaches under variable environments to a large extent.", "paper_title": "Adaptive Application Component Mapping for Parallel Computation Offloading in Variable Environments", "paper_id": "WOS:000366399500005"}