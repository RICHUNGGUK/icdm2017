{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "conflict_resolution"}, {"score": 0.004539005582217309, "phrase": "lalr_parsing_method"}, {"score": 0.004450568197899267, "phrase": "deremer"}, {"score": 0.003877737556673229, "phrase": "non-productive_way"}, {"score": 0.003584025547693836, "phrase": "huge_amount"}, {"score": 0.0035141291835319682, "phrase": "textual_and_low_level_data"}, {"score": 0.003378385493203297, "phrase": "parser_generator_tool"}, {"score": 0.0029722900280316216, "phrase": "parser_generator"}, {"score": 0.0026148807877309417, "phrase": "supported_methodology"}, {"score": 0.002464709648714996, "phrase": "manual_removal"}, {"score": 0.002323142666222693, "phrase": "internal_algorithms"}, {"score": 0.002233301265743633, "phrase": "created_parsers"}, {"score": 0.0021049977753042253, "phrase": "memory_usage"}], "paper_keywords": ["lalr parsing", " automatic conflict removal", " table compression", " methodology"], "paper_abstract": "Despite all the advance brought by LALR parsing method by DeRemer in the late 60's, conflicts continue to be removed in a non-productive way, by means of analysis of a huge amount of textual and low level data dumped by the parser generator tool. For the purpose of changing this scenario, we present a parser generator capable of automatically removing some types of conflicts, along with a supported methodology that guides the process of manual removal. We also discuss the internal algorithms and how the created parsers are compact in terms of memory usage.", "paper_title": "An LALR Parser Generator Supporting Conflict Resolution", "paper_id": "WOS:000264754900004"}