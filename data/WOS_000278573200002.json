{"auto_keywords": [{"score": 0.05007852962010534, "phrase": "checking_sequence"}, {"score": 0.019120597150899164, "phrase": "reset_transitions"}, {"score": 0.007560432229022767, "phrase": "minimum_number"}, {"score": 0.007212694841494661, "phrase": "finite_state_machine"}, {"score": 0.0042452552248398445, "phrase": "input_sequence"}, {"score": 0.003405109584265324, "phrase": "automated_generation"}, {"score": 0.0033255627814855163, "phrase": "short_checking_sequence"}, {"score": 0.0023694065215394593, "phrase": "shortest_checking_sequence"}, {"score": 0.002259883463607508, "phrase": "new_algorithm"}, {"score": 0.0021049977753042253, "phrase": "distinguishing_sequence"}], "paper_keywords": ["Finite state machine", " Checking sequence generation", " Reset transition", " Distinguishing sequence", " Optimisation"], "paper_abstract": "Given a finite state machine M, a checking sequence is an input sequence that is guaranteed to lead to a failure if the implementation under test is faulty and has no more states than M. There has been much interest in the automated generation of a short checking sequence from a finite state machine. However, such sequences can contain reset transitions whose use can adversely affect both the cost of applying the checking sequence and the effectiveness of the checking sequence. Thus, we sometimes want a checking sequence with a minimum number of reset transitions rather than a shortest checking sequence. This paper describes a new algorithm for generating a checking sequence, based on a distinguishing sequence, that minimises the number of reset transitions used.", "paper_title": "Generating a checking sequence with a minimum number of reset transitions", "paper_id": "WOS:000278573200002"}