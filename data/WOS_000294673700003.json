{"auto_keywords": [{"score": 0.037329211685609744, "phrase": "simple_closures"}, {"score": 0.014019907442762474, "phrase": "java"}, {"score": 0.00481495049065317, "phrase": "java_simple_closures"}, {"score": 0.0045820747375409435, "phrase": "java_community"}, {"score": 0.0031064226956732497, "phrase": "rigorous_semantics"}, {"score": 0.0026986685585382347, "phrase": "interesting_properties"}, {"score": 0.002546708483171714, "phrase": "minimal_calculus"}, {"score": 0.0024637379406427856, "phrase": "featherweight_java"}, {"score": 0.0022122603123901114, "phrase": "type_safety"}, {"score": 0.002175913488493802, "phrase": "backward_compatibility"}, {"score": 0.0021049977753042253, "phrase": "abstraction_property"}], "paper_keywords": [""], "paper_abstract": "In the last years, the Java community has been arguing about adding closures to Java in order to improve expressivity. The debate has not yet terminated but all proposals seem to converge towards a notion of Simple Closures which contain only the essential features of anonymous functions. This paper addresses the problem of defining a rigorous semantics for Simple Closures. The technique adopted is well known and has already been used to prove interesting properties of other extensions of Java. A minimal calculus is defined: Featherweight Java extended with Simple Closures. Syntax and semantics of such a calculus are defined and type safety, backward compatibility, and the abstraction property are proved.", "paper_title": "Properties of Java Simple Closures", "paper_id": "WOS:000294673700003"}