{"auto_keywords": [{"score": 0.03371442890089371, "phrase": "incremental_one-pass_analytics"}, {"score": 0.00481495049065317, "phrase": "scalable_one-pass_analytics"}, {"score": 0.0047268728636719725, "phrase": "today's_one-pass_analytics_applications"}, {"score": 0.004410629943506433, "phrase": "high_volumes"}, {"score": 0.0043100710602597455, "phrase": "mapreduce"}, {"score": 0.0042506731642425275, "phrase": "popular_programming_model"}, {"score": 0.004192190072470619, "phrase": "large_datasets"}, {"score": 0.004002972723329302, "phrase": "traditional_mapreduce_model"}, {"score": 0.0038756055612167942, "phrase": "one-pass_analytics"}, {"score": 0.003752275718257509, "phrase": "batch_processing"}, {"score": 0.003517223847512266, "phrase": "analytical_queries"}, {"score": 0.003389557201018519, "phrase": "systems_standpoint"}, {"score": 0.0032215231177304513, "phrase": "mapreduce_model"}, {"score": 0.0031333949463567554, "phrase": "hadoop-based_mapreduce_systems"}, {"score": 0.0030759821501544224, "phrase": "widely_used_sort-merge_implementation"}, {"score": 0.0029642838574678526, "phrase": "fundamental_barrier"}, {"score": 0.0027528751037412128, "phrase": "new_data_analysis_platform"}, {"score": 0.002714943351733626, "phrase": "hash_techniques"}, {"score": 0.0026651772919894534, "phrase": "in-memory_processing"}, {"score": 0.0024636239664210433, "phrase": "large_key-state_space"}, {"score": 0.002396179086883187, "phrase": "real-world_workloads"}, {"score": 0.00229844995872581, "phrase": "map_tasks"}, {"score": 0.0021843879253500894, "phrase": "map_progress"}, {"score": 0.0021049977753042253, "phrase": "internal_data_spills"}], "paper_keywords": ["Algorithms", " Design", " Experimentation", " Performance", " Parallel processing", " one-pass analytics", " incremental computation"], "paper_abstract": "Today's one-pass analytics applications tend to be data-intensive in nature and require the ability to process high volumes of data efficiently. MapReduce is a popular programming model for processing large datasets using a cluster of machines. However, the traditional MapReduce model is not well-suited for one-pass analytics, since it is geared towards batch processing and requires the dataset to be fully loaded into the cluster before running analytical queries. This article examines, from a systems standpoint, what architectural design changes are necessary to bring the benefits of the MapReduce model to incremental one-pass analytics. Our empirical and theoretical analyses of Hadoop-based MapReduce systems show that the widely used sort-merge implementation for partitioning and parallel processing poses a fundamental barrier to incremental one-pass analytics, despite various optimizations. To address these limitations, we propose a new data analysis platform that employs hash techniques to enable fast in-memory processing, and a new frequent key based technique to extend such processing to workloads that require a large key-state space. Evaluation of our Hadoop-based prototype using real-world workloads shows that our new platform significantly improves the progress of map tasks, allows the reduce progress to keep up with the map progress, with up to 3 orders of magnitude reduction of internal data spills, and enables results to be returned continuously during the job.", "paper_title": "SCALLA: A Platform for Scalable One-Pass Analytics Using MapReduce", "paper_id": "WOS:000312942400005"}