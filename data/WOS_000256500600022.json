{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "precise_and_concise_procedure_summaries"}, {"score": 0.004633429997452688, "phrase": "procedure_summaries"}, {"score": 0.0038415095105632157, "phrase": "abstract_values"}, {"score": 0.0037322713756404295, "phrase": "superfluous_context_information"}, {"score": 0.0036261282565554507, "phrase": "precise_and_concise_procedure_summary"}, {"score": 0.0034725269588525534, "phrase": "infinitely_many_possible_contexts"}, {"score": 0.003422781254306241, "phrase": "finite_way"}, {"score": 0.0033737457695128233, "phrase": "interprocedural_analyses"}, {"score": 0.003293570937654716, "phrase": "compact_representation"}, {"score": 0.003246380517062771, "phrase": "explicit_input-output_summary_table"}, {"score": 0.0030790429005600898, "phrase": "abstract_domains"}, {"score": 0.0030058503645435455, "phrase": "precise_and_concise_summaries"}, {"score": 0.0027965187255008647, "phrase": "wide_range"}, {"score": 0.002716915772942745, "phrase": "ifds"}, {"score": 0.002690899460570239, "phrase": "ide"}, {"score": 0.0025034338848015166, "phrase": "novel_solutions"}, {"score": 0.0021563019696857768, "phrase": "typestate_domain"}, {"score": 0.0021049977753042253, "phrase": "preliminary_experimental_results"}], "paper_keywords": ["verification", " reliability", " languages", " algorithms", " summarization", " composition", " relational analysis", " symbolic", " summary", " typestate verification", " aliasing", " dataflow analysis", " micro-transformers"], "paper_abstract": "We present a framework for generating procedure summaries that are precise - applying the summary in a given context yields the same result as re-analyzing the procedure in that context, and concise - the summary exploits the commonalities in the ways the procedure manipulates abstract values, and does not contain superfluous context information. The use of a precise and concise procedure summary in modular analyses provides a way to capture infinitely many possible contexts in a finite way; in interprocedural analyses, it provides a compact representation of an explicit input-output summary table without loss of precision. We define a class of abstract domains and transformers for which precise and concise summaries can be efficiently generated using our framework. Our framework is rich enough to encode a wide range of problems, including all IFDS and IDE problems. In addition, we show how the framework is instantiated to provide novel solutions to two hard problems: modular linear constant propagation and modular typestate verification, both in the presence of aliasing. We implemented a prototype of our framework that computes summaries for the typestate domain, and report on preliminary experimental results.", "paper_title": "Generating precise and concise procedure summaries", "paper_id": "WOS:000256500600022"}