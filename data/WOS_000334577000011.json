{"auto_keywords": [{"score": 0.03863862455016991, "phrase": "sphere"}, {"score": 0.005643245730509948, "phrase": "candidate_ontologies"}, {"score": 0.00481495049065317, "phrase": "semantically_related_information"}, {"score": 0.0047379542803396915, "phrase": "semantic_heterogeneity"}, {"score": 0.004699916946246509, "phrase": "ontology_matching"}, {"score": 0.004624751696958501, "phrase": "utilized_techniques"}, {"score": 0.0045691640746165045, "phrase": "semantic_heterogeneity_resolution"}, {"score": 0.004424160689087029, "phrase": "computationally_intensive_problem"}, {"score": 0.0043533862892678864, "phrase": "time-consuming_process"}, {"score": 0.004283739213556286, "phrase": "large-scale_ontologies"}, {"score": 0.004131063310728304, "phrase": "computation_time"}, {"score": 0.004032302251481604, "phrase": "computational_resources"}, {"score": 0.003749908582313067, "phrase": "semantic_web-based_interactive_and_semireal-time_systems"}, {"score": 0.0035439655241057207, "phrase": "ontology_matching_performance"}, {"score": 0.003473178781851477, "phrase": "multicore_cloud_platform"}, {"score": 0.0033764382987428497, "phrase": "ontology_matching_systems"}, {"score": 0.0031398318568608505, "phrase": "serialized_subsets"}, {"score": 0.0030895394261534776, "phrase": "single-step_parallel_loading"}, {"score": 0.0030278017562213265, "phrase": "lightweight_matcher-based_and_redundancy-free_subsets"}, {"score": 0.002838387600282891, "phrase": "data_parallelism"}, {"score": 0.002826949449085849, "phrase": "based_distribution"}, {"score": 0.0027370835853738626, "phrase": "multicore_distributed_hardware"}, {"score": 0.0027150658583211746, "phrase": "cloud_platform"}, {"score": 0.0026932247685847246, "phrase": "parallel_ontology_matching"}, {"score": 0.0026500668745484957, "phrase": "performance_evaluation"}, {"score": 0.0024345538841924557, "phrase": "jena"}, {"score": 0.0024149629835339926, "phrase": "owlapi."}, {"score": 0.002357131515622894, "phrase": "computation_resources"}, {"score": 0.0022914054720704546, "phrase": "best_scalability"}, {"score": 0.002218526133566788, "phrase": "gomma"}, {"score": 0.002200670678226548, "phrase": "logmap"}, {"score": 0.0021829588590077356, "phrase": "aroma"}, {"score": 0.0021566565951738658, "phrase": "agrmaker"}, {"score": 0.0021220787047953093, "phrase": "private_cloud_instance"}], "paper_keywords": ["Ontology matching", " Semantic web", " Matching performance", " Parallel matching", " Parallel programming", " Cloud computing"], "paper_abstract": "The abundance of semantically related information has resulted in semantic heterogeneity. Ontology matching is among the utilized techniques implemented for semantic heterogeneity resolution; however, ontology matching being a computationally intensive problem can be a time-consuming process. Medium to large-scale ontologies can take from hours up to days of computation time depending upon the utilization of computational resources and complexity of matching algorithms. This delay in producing results, makes ontology matching unsuitable for semantic web-based interactive and semireal-time systems. This paper presents SPHeRe, a performance-based initiative that improves ontology matching performance by exploiting parallelism over multicore cloud platform. Parallelism has been overlooked by ontology matching systems. SPHeRe avails this opportunity and provides a solution by: (i) creating and caching serialized subsets of candidate ontologies with single-step parallel loading; (ii) lightweight matcher-based and redundancy-free subsets result in smaller memory footprints and faster load time; and (iii) implementing data parallelism based distribution over subsets of candidate ontologies by exploiting the multicore distributed hardware of cloud platform for parallel ontology matching and execution. Performance evaluation of SPHeRe on a trinode (12-core) private cloud infrastructure has shown up to 3 times faster ontology load time with up to 8 times smaller memory footprint than Web Ontology Language (OWL) frameworks Jena and OWLAPI. Furthermore, by utilizing the computation resources most efficiently, SPHeRe provides the best scalability in contrast with other ontology matching systems, i.e., GOMMA, LogMap, AROMA, and AgrMaker. On a private cloud instance with 8 cores, SPHeRe outperforms the most performance efficient ontology matching system GOMMA by 40 % in scalability and 4 times in performance.", "paper_title": "SPHeRe", "paper_id": "WOS:000334577000011"}