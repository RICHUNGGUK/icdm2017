{"auto_keywords": [{"score": 0.03720109862972001, "phrase": "proof-search_procedure"}, {"score": 0.03223584052302728, "phrase": "evaluation_functions"}, {"score": 0.030407153320751706, "phrase": "proof_search"}, {"score": 0.0046834372388970405, "phrase": "intuitionistic_propositional_logic"}, {"score": 0.004172874316207784, "phrase": "left_implication"}, {"score": 0.004040123129261597, "phrase": "goal-oriented_proof-search_strategy"}, {"score": 0.0038756055612167942, "phrase": "calculus_bottom"}, {"score": 0.0037177622939493084, "phrase": "infinite_length"}, {"score": 0.0036665842836420223, "phrase": "usual_solution"}, {"score": 0.003484864867147635, "phrase": "loop_checking_mechanism"}, {"score": 0.003389557201018519, "phrase": "infinite_branches"}, {"score": 0.00309023627455429, "phrase": "new_technique"}, {"score": 0.0030056887638095883, "phrase": "evaluation_function"}, {"score": 0.0029642838574678526, "phrase": "lightweight_computational_mechanism"}, {"score": 0.0026651772919894534, "phrase": "useless_backtracking"}, {"score": 0.0026042472337367015, "phrase": "evaluation-driven_proof-search_procedure"}, {"score": 0.0021049977753042253, "phrase": "overhead_time"}], "paper_keywords": ["Theory", " Proof-search procedures", " intuitionistic propositional logic", " sequent calculi"], "paper_abstract": "It is well known that G3i, the sequent calculus for intuitionistic propositional logic where weakening and contraction are absorbed into the rules, is not terminating. Indeed, due to the contraction in the rule for left implication, the na \"ive goal-oriented proof-search strategy, consisting in applying the rules of the calculus bottom up until possible, can generate branches of infinite length. The usual solution to this problem is to support the proof-search procedure with a loop checking mechanism that prevents the generation of infinite branches by storing and analyzing some information regarding the branch under development. In this article, we propose a new technique based on evaluation functions. An evaluation function is a lightweight computational mechanism that, analyzing only the current goal of the proof search, allows one to drive the application of rules to guarantee termination and to avoid useless backtracking. We describe an evaluation-driven proof-search procedure that given a sequent s returns either a G3i-derivation of s or a countermodel for s. We prove that such a procedure is terminating and correct, and that the depth of the G3i-trees generated during proof search is quadratic in the size of s. Finally, we discuss the overhead time introduced by evaluation functions in the proof-search procedure.", "paper_title": "An Evaluation-Driven Decision Procedure for G3i", "paper_id": "WOS:000352220100008"}