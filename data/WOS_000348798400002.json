{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "architectural_modeling"}, {"score": 0.027713166766252097, "phrase": "behavior_analysis"}, {"score": 0.0046631428391784475, "phrase": "bidirectional_transformation"}, {"score": 0.004626255242038005, "phrase": "software_development"}, {"score": 0.004251728624599691, "phrase": "system_design"}, {"score": 0.004048860957751714, "phrase": "interaction_correctness"}, {"score": 0.003804550737731054, "phrase": "analysis_notations"}, {"score": 0.0036390887584943723, "phrase": "one-way_mapping_relation"}, {"score": 0.0035590664550919854, "phrase": "one-way_relation"}, {"score": 0.003329368827624161, "phrase": "inconsistency_problems"}, {"score": 0.003032405563826263, "phrase": "architectural_modeling_notation"}, {"score": 0.002992195343569767, "phrase": "analysis_notation"}, {"score": 0.002952516738708181, "phrase": "bidirectional_mapping"}, {"score": 0.0028492532869274743, "phrase": "modeling_language"}, {"score": 0.002824005136794786, "phrase": "architecture_analysis"}, {"score": 0.0027989800906333784, "phrase": "design_language"}, {"score": 0.002689076130099546, "phrase": "behavior_analysis_notation"}, {"score": 0.002405853977978678, "phrase": "model_checker"}, {"score": 0.0023113506171584157, "phrase": "original_aadl_specifications"}, {"score": 0.0021049977753042253, "phrase": "control_system_example"}], "paper_keywords": ["software architecture", " component behavior", " bidirectional transformation", " architecture analysis and design language (AADL)", " model checking"], "paper_abstract": "Architectural modeling and behavior analysis are two important concerns in the software development. They are often implemented separately, and specified by their own supporting notations. Architectural modeling helps to guarantee the system design to satisfy the requirement, and behavior analysis can ensure the interaction correctness. To improve the trustworthiness, methods trying to combine architectural modeling and behavior analysis notations together have been proposed, e.g., establishing a one-way mapping relation. However, the one-way relation cannot ensure updating one notation specifications in accordance with the other one, which results in inconsistency problems. In this paper, we present an approach to integrating behavior analysis into architectural modeling, which establishes the interoperability between architectural modeling notation and behavior analysis notation by a bidirectional mapping. The architecture is specified by the modeling language, architecture analysis and design language (AADL), and then mapped to behavior analysis notation, Darwin/FSP (finite state process) through the bidirectional transformation. The bidirectional transformation provides traceability, which makes behavior analysis result provided by a model checker can be traced and reflected back to the original AADL specifications. In this way, the behavior analysis is integrated into architectural modeling. The feasibility of our approach is shown by a control system example.", "paper_title": "Integrating behavior analysis into architectural modeling", "paper_id": "WOS:000348798400002"}