{"auto_keywords": [{"score": 0.04954397446159371, "phrase": "solution-space_features"}, {"score": 0.008250588598006698, "phrase": "complex_configuration_rules"}, {"score": 0.00481495049065317, "phrase": "mapping_problem-space"}, {"score": 0.004551781491498328, "phrase": "problem-space_features"}, {"score": 0.004425616928975799, "phrase": "fundamental_configuration_problem"}, {"score": 0.004376131419366239, "phrase": "software_product_line_engineering"}, {"score": 0.0043029342321223825, "phrase": "configuration_problem"}, {"score": 0.0041136473765874815, "phrase": "software_features"}, {"score": 0.004044822781630218, "phrase": "requirements_specification"}, {"score": 0.003910595307634916, "phrase": "configuration_rules"}, {"score": 0.0038668462001710314, "phrase": "current_approaches"}, {"score": 0.0036553070575015344, "phrase": "solution_space"}, {"score": 0.0035941231858949035, "phrase": "incomplete_requirements_specifications"}, {"score": 0.00319348234663792, "phrase": "problem-solution_feature_interactions"}, {"score": 0.0030017207229983385, "phrase": "specific_problem_contexts"}, {"score": 0.0029020077365708966, "phrase": "existing_tool"}, {"score": 0.002727700630869639, "phrase": "dlv_answer"}, {"score": 0.0026370661343466354, "phrase": "particular_configuration_problem"}, {"score": 0.0025928815987676535, "phrase": "logic_program"}, {"score": 0.0025208755851561368, "phrase": "optimal_combinations"}, {"score": 0.0023694065215394593, "phrase": "case_study"}, {"score": 0.0022906498741695094, "phrase": "dynamic_adaptations"}, {"score": 0.002264982416465872, "phrase": "distributed_software"}, {"score": 0.0021529842700733974, "phrase": "optimal_protocol"}], "paper_keywords": ["Algorithms", " design", " performance", " reliability", " Software product line engineering", " configuration knowledge", " problem-solution feature interactions", " default logic", " DLV", " distributed runtime adaptation"], "paper_abstract": "Mapping problem-space features into solution-space features is a fundamental configuration problem in software product line engineering. A configuration problem is defined as generating the most optimal combination of software features given a requirements specification and given a set of configuration rules. Current approaches however provide little support for expressing complex configuration rules between problem and solution space that support incomplete requirements specifications. In this paper, we propose an approach to model complex configuration rules based on a generalization of the concept of problem-solution feature interactions. These are interactions between solution-space features that only arise in specific problem contexts. The use of an existing tool to support our approach is also discussed: we use the DLV answer set solver to express a particular configuration problem as a logic program whose answer set corresponds to the optimal combinations of solution-space features. We motivate and illustrate our approach with a case study in the field of managing dynamic adaptations in distributed software, where the goal is to generate an optimal protocol for accommodating a given adaptation.", "paper_title": "Mapping Problem-Space to Solution-Space Features: A Feature Interaction Approach", "paper_id": "WOS:000280547600018"}