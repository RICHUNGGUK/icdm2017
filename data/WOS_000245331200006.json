{"auto_keywords": [{"score": 0.042051296116313676, "phrase": "graphics_card"}, {"score": 0.008298975216303104, "phrase": "corresponding_architecture"}, {"score": 0.005495281684151147, "phrase": "final_mesh"}, {"score": 0.00481495049065317, "phrase": "adaptive_tessellation"}, {"score": 0.0047761092701293474, "phrase": "bezier_surfaces"}, {"score": 0.004718431349852634, "phrase": "local_tests"}, {"score": 0.0046803650677267146, "phrase": "bezier_representations"}, {"score": 0.004549524321051407, "phrase": "standard_way"}, {"score": 0.004494570360108983, "phrase": "complex_scenes"}, {"score": 0.004281284532043714, "phrase": "software_application"}, {"score": 0.004229556887896042, "phrase": "triangle_models"}, {"score": 0.004094639048362357, "phrase": "final_image"}, {"score": 0.003806541299696042, "phrase": "adaptive_tessellation_algorithm"}, {"score": 0.003524322230452833, "phrase": "potential_bottleneck"}, {"score": 0.003439608110599787, "phrase": "complex_triangular_models"}, {"score": 0.003384262486955773, "phrase": "graphics_cards"}, {"score": 0.0032497506915502876, "phrase": "layer_strip_representation_method"}, {"score": 0.003210446135114967, "phrase": "new_data_management"}, {"score": 0.0031459887611258765, "phrase": "efficient_storage"}, {"score": 0.003107935254560724, "phrase": "tessellated_mesh"}, {"score": 0.002984373546099842, "phrase": "additional_unit"}, {"score": 0.002831037222426215, "phrase": "transmission_requirements"}, {"score": 0.0025892330566358503, "phrase": "adaptive_strategy"}, {"score": 0.0025682999078906936, "phrase": "permits_selection"}, {"score": 0.0024264193359373977, "phrase": "computational_requirements"}, {"score": 0.002348883765159185, "phrase": "efficient_data_management"}, {"score": 0.0022923586577645143, "phrase": "low_storage_requirements"}, {"score": 0.0021569129153653777, "phrase": "future_graphics_cards"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v._all_rights"}], "paper_keywords": ["computer graphics", " graphics hardware", " Bezier surfaces", " adaptive tessellation"], "paper_abstract": "Bezier representations have been widely employed as a standard way of designing complex scenes with very good quality results. These surfaces are usually tessellated, in the software application, into triangle models to be rendered. Then, the final image is generated in the graphics card so that its triangle rendering capabilities are exploited. In this work we present an adaptive tessellation algorithm and the corresponding architecture to be implemented in hardware. The objective of the proposal is to avoid the potential bottleneck associated with the transmission of complex triangular models from CPU to graphics cards. The algorithm we propose is based on a layer strip representation method and a new data management that permits generation and efficient storage of the tessellated mesh. The corresponding architecture has to be included as an additional unit at the input of the graphics card. As a consequence, the transmission requirements from CPU to graphics card are greatly reduced as the tessellation is performed in the graphics card. On the other hand, the adaptive strategy employed permits selection of the number of triangles of the final mesh as a trade off between computational requirements and quality of the final mesh. The efficient data management proposed, together with the low storage requirements of the architecture, makes it a good candidate for its hardware implementation and inclusion in future graphics cards. (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "Hardware support for adaptive tessellation of Bezier surfaces based on local tests", "paper_id": "WOS:000245331200006"}