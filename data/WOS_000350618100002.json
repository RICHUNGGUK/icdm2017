{"auto_keywords": [{"score": 0.049352273134126434, "phrase": "polynomial_invariants"}, {"score": 0.048636009815037955, "phrase": "imperative_programs"}, {"score": 0.046888273895838106, "phrase": "grobner_bases"}, {"score": 0.004817182060377787, "phrase": "inference"}, {"score": 0.0042928648367867835, "phrase": "static_analysis"}, {"score": 0.0038862297330905836, "phrase": "abstract_interpretation"}, {"score": 0.003797978200741566, "phrase": "backwards_semantics"}, {"score": 0.0032836104153151973, "phrase": "distinguishing_feature"}, {"score": 0.003088384809415812, "phrase": "polynomial_loop_invariants"}, {"score": 0.0029951555610569225, "phrase": "grobner_base_computations"}, {"score": 0.00288255520607591, "phrase": "remainder_computations"}, {"score": 0.00283870598459543, "phrase": "parameterized_polynomials"}, {"score": 0.0024918548761791435, "phrase": "large_majority"}, {"score": 0.002453934333239467, "phrase": "loop_invariants"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Polynomial invariants", " Static analysis", " Abstract interpretation"], "paper_abstract": "The article presents a static analysis for computing polynomial invariants for imperative programs. The analysis is derived from an abstract interpretation of a backwards semantics, and computes preconditions for equalities of the form g = 0 to hold at the end of execution. A distinguishing feature of the technique is that it computes polynomial loop invariants without resorting to Grobner base computations. The analysis uses remainder computations over parameterized polynomials in order to handle conditionals and loops efficiently. The algorithm can analyze and find a large majority of loop invariants reported previously in the literature, and executes significantly faster than implementations using Grobner bases. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Inference of polynomial invariants for imperative programs: A farewell to Grobner bases", "paper_id": "WOS:000350618100002"}