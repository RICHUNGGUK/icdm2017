{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "norec"}, {"score": 0.004754322465292485, "phrase": "stm"}, {"score": 0.004693476992528682, "phrase": "ownership_records"}, {"score": 0.004497762477097628, "phrase": "ownership-record-free_software_transactional_memory"}, {"score": 0.0043656173407379895, "phrase": "extremely_low_overhead"}, {"score": 0.004328576620172575, "phrase": "unusually_clean_semantics"}, {"score": 0.0041657281535389615, "phrase": "active_threads"}, {"score": 0.004112812699639956, "phrase": "\"norec\"_system"}, {"score": 0.003760685138103153, "phrase": "concurrent_updates"}, {"score": 0.003512702405367876, "phrase": "global_metadata"}, {"score": 0.003423969509052361, "phrase": "existing_data_structure_layouts"}, {"score": 0.0033232673019931206, "phrase": "hash_collisions"}, {"score": 0.003038532168038562, "phrase": "closed_nesting"}, {"score": 0.002790004829699627, "phrase": "extant_stm_system"}, {"score": 0.002696366237523415, "phrase": "transactional_memory"}, {"score": 0.002572709810193776, "phrase": "hardware_support"}, {"score": 0.002550842302473891, "phrase": "software_implementations"}, {"score": 0.0024969812322112174, "phrase": "backward_compatibility"}, {"score": 0.002475755804232436, "phrase": "current_and_near-future_processors"}, {"score": 0.002372298201966367, "phrase": "future_machines"}, {"score": 0.00235213013487844, "phrase": "hardware_resources"}, {"score": 0.0022442249871042026, "phrase": "ideal_candidate"}, {"score": 0.0021504218042734677, "phrase": "considerable_appeal"}, {"score": 0.0021049977753042253, "phrase": "operating_system"}], "paper_keywords": ["Algorithms", " Performance", " Ownership Records", " Software Transactional Memory", " Transactional Memory", " Transactional Memory Models"], "paper_abstract": "Drawing inspiration from several previous projects, we present an ownership-record-free software transactional memory (STM) system that combines extremely low overhead with unusually clean semantics. While unlikely to scale to hundreds of active threads, this \"NOrec\" system offers many appealing features: very low fast-path latency-as low as any system we know of that admits concurrent updates; publication and privatization safety; livelock freedom; a small, constant amount of global metadata, and full compatibility with existing data structure layouts; no false conflicts due to hash collisions; compatibility with both managed and unmanaged languages, and both static and dynamic compilation; and easy accommodation of closed nesting, inevitable (irrevocable) transactions, and starvation avoidance mechanisms. To the best of our knowledge, no extant STM system combines this set of features. While transactional memory for processors with hundreds of cores is likely to require hardware support, software implementations will be required for backward compatibility with current and near-future processors with 2-64 cores, as well as for fall-back in future machines when hardware resources are exhausted. Our experience suggests that NOrec may be an ideal candidate for such a software system. We also observe that it has considerable appeal for use within the operating system, and in systems that require both closed nesting and publication safety.", "paper_title": "NOrec: Streamlining STM by Abolishing Ownership Records", "paper_id": "WOS:000280548100007"}