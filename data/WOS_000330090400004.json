{"auto_keywords": [{"score": 0.040650574499495426, "phrase": "robot_control_architectures"}, {"score": 0.033135399878423816, "phrase": "distribution_pattern"}, {"score": 0.026163501402362226, "phrase": "worst-case_execution_times"}, {"score": 0.00481495049065317, "phrase": "robot_control_components"}, {"score": 0.004469042910390712, "phrase": "numerous_applications"}, {"score": 0.004278807087784626, "phrase": "distributed_execution"}, {"score": 0.004046020290832207, "phrase": "present_article"}, {"score": 0.003825849505589868, "phrase": "multiple_computers"}, {"score": 0.003640183972131238, "phrase": "multiple_hosts"}, {"score": 0.0030582832134483685, "phrase": "control_tasks"}, {"score": 0.0030204580407008214, "phrase": "cpu_resources"}, {"score": 0.0029645930408561086, "phrase": "bus_communication_load"}, {"score": 0.0028917056916949718, "phrase": "underlying_model"}, {"score": 0.0028382152567141784, "phrase": "respective_analysis_guarantee"}, {"score": 0.0026835920552084488, "phrase": "real-time_properties"}, {"score": 0.0024904187737391807, "phrase": "poor_a_priori_assumptions"}, {"score": 0.0022825131641434964, "phrase": "considerable_improvement"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Robot control architecture", " Distributed computing", " Self-management", " Worst case execution time analysis"], "paper_abstract": "It can be seen in numerous applications that embedded systems take advantage of distributed execution of tasks. Such distribution is studied in the present article, which investigates the deployment of robot control architectures across multiple computers. Besides the patterns for deployment across multiple hosts, this article proposes to introduce aspects of self-management into robot control architectures. It is proposed to use graph partitioning algorithms to determine the distribution pattern (mapping of control tasks to CPU resources while minimizing bus communication load). The underlying model and the respective analysis guarantee that, after adaption of the distribution pattern, real-time properties are preserved and load is balanced. In this way, poor a priori assumptions about worst-case execution times are detected and corrected continuously during runtime. This is a considerable improvement in comparison to using only offline analysis of worst-case execution times. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "Dynamic distribution of robot control components under hard realtime constraints - Modeling, experimental results and practical considerations", "paper_id": "WOS:000330090400004"}