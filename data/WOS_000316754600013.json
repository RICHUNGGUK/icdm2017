{"auto_keywords": [{"score": 0.04510289334579302, "phrase": "data_items"}, {"score": 0.007207821880728952, "phrase": "existing_replicated_declustering_schemes"}, {"score": 0.005152518539804787, "phrase": "disk_capacities"}, {"score": 0.00481495049065317, "phrase": "query-log_aware"}, {"score": 0.004476399615305783, "phrase": "data_intensive_queries"}, {"score": 0.004386637056030611, "phrase": "query_retrieval_process"}, {"score": 0.004161553532799662, "phrase": "alternative_disk_choices"}, {"score": 0.00412796126884884, "phrase": "individual_disk_items"}, {"score": 0.004061584718427419, "phrase": "better_query_parallelism_options"}, {"score": 0.003916098498242888, "phrase": "query_log_information"}, {"score": 0.003822003373331997, "phrase": "possible_queries"}, {"score": 0.003775803846431323, "phrase": "specific_query_type"}, {"score": 0.003685067218455088, "phrase": "spatial_queries"}, {"score": 0.0031974502006267163, "phrase": "even_two_copies"}, {"score": 0.002796782643988021, "phrase": "replication_amounts"}, {"score": 0.002751751956416832, "phrase": "existing_query-log_information"}, {"score": 0.002707444334463544, "phrase": "selective_replicated_declustering_scheme"}, {"score": 0.002436289099444074, "phrase": "iterative_improvement_algorithm"}, {"score": 0.0023970487263732737, "phrase": "two-way_replicated_declustering"}, {"score": 0.0023298892270500983, "phrase": "recursive_framework"}, {"score": 0.0022923586577645143, "phrase": "multiway_replicated_declustering"}, {"score": 0.0022371907579775796, "phrase": "obtained_multiway"}, {"score": 0.0022011501095573747, "phrase": "efficient_refinement_heuristics"}, {"score": 0.0021569129153653777, "phrase": "realistic_data_sets"}, {"score": 0.0021221627745801478, "phrase": "proposed_scheme"}, {"score": 0.0021049977753042253, "phrase": "better_performance_results"}], "paper_keywords": ["Declustering", " replication", " parallel disk architectures", " iterative improvement heuristics"], "paper_abstract": "Data declustering and replication can be used to reduce I/O times related with processing of data intensive queries. Declustering parallelizes the query retrieval process by distributing the data items requested by queries among several disks. Replication enables alternative disk choices for individual disk items and thus provides better query parallelism options. In general, existing replicated declustering schemes do not consider query log information and try to optimize all possible queries for a specific query type, such as range or spatial queries. In such schemes, it is assumed that two or more copies of all data items are to be generated and scheduling of these copies to disks are discussed. However, in some applications, generation of even two copies of all of the data items is not feasible, since data items tend to have very large sizes. In this work, we assume that there is a given limit on disk capacities and thus on replication amounts. We utilize existing query-log information to propose a selective replicated declustering scheme, in which we select the data items to be replicated and decide on their scheduling onto disks while respecting disk capacities. We propose and implement an iterative improvement algorithm to obtain a two-way replicated declustering and use this algorithm in a recursive framework to generate a multiway replicated declustering. Then we improve the obtained multiway replicated declustering by efficient refinement heuristics. Experiments conducted on realistic data sets show that the proposed scheme yields better performance results compared to existing replicated declustering schemes.", "paper_title": "Query-Log Aware Replicated Declustering", "paper_id": "WOS:000316754600013"}