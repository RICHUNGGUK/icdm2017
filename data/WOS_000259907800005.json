{"auto_keywords": [{"score": 0.038828840828052116, "phrase": "new_one-step_consequence_operator"}, {"score": 0.00481495049065317, "phrase": "based_logic_programming"}, {"score": 0.00474827840031692, "phrase": "previous_paper"}, {"score": 0.004130079333979522, "phrase": "logic_program"}, {"score": 0.004087084193780308, "phrase": "one-step_consequence_operator"}, {"score": 0.004002426645789667, "phrase": "supported_and_stable_model"}, {"score": 0.0036425727071563965, "phrase": "old_one-step_consequence_operator"}, {"score": 0.003069867656852932, "phrase": "underlying_space"}, {"score": 0.002862767868795934, "phrase": "open_set"}, {"score": 0.0027741761880779535, "phrase": "set_based_logic_programs"}, {"score": 0.0027166392914444023, "phrase": "natural_choices"}, {"score": 0.0025779504911297236, "phrase": "monotonic_idempotent_operators"}, {"score": 0.0024548872075607687, "phrase": "natural_type"}, {"score": 0.002420815160284086, "phrase": "logic_programming"}, {"score": 0.0024039564563674673, "phrase": "i.e._the_same_logic_program"}, {"score": 0.002249527353528286, "phrase": "general_framework"}, {"score": 0.0022338588371647278, "phrase": "set_based_programming"}, {"score": 0.0021571346514418226, "phrase": "integer-based_representations"}, {"score": 0.0021421082915443887, "phrase": "real_continuous_functions"}, {"score": 0.002127186380459509, "phrase": "stable_models"}, {"score": 0.0021049977753042253, "phrase": "set_based_logic_program"}], "paper_keywords": ["Logic programming", " One-step consequence operator", " Monotonic idempotent operator", " Miop-spatially augmented language"], "paper_abstract": "In a previous paper (Blair et al. 2001), the authors showed that the mechanism underlying Logic Programming can be extended to handle the situation where the atoms are interpreted as subsets of a given space X. The view of a logic program as a one-step consequence operator along with the concepts of supported and stable model can be transferred to such situations. In this paper, we show that we can further extend this paradigm by creating a new one-step consequence operator by composing the old one-step consequence operator with a monotonic idempotent operator (miop) in the space of all subsets of X, 2(X). We call this extension set based logic programming. We show that such a set based formalism for logic programming naturally supports a variety of options. For example, if the underlying space has a topology, one can insist that the new one-step consequence operator always produces a closed set or always produces an open set. The flexibility inherent in the semantics of set based logic programs is due to both the range of natural choices available for specifying the semantics of negation, as well as the role of monotonic idempotent operators (miops) as parameters in the semantics. This leads to a natural type of polymorphism for logic programming, i.e. the same logic program can produce a variety of outcomes depending on the miop associated with the semantics. We develop a general framework for set based programming involving miops. Among the applications, we obtain integer-based representations of real continuous functions as stable models of a set based logic program.", "paper_title": "Set based logic programming", "paper_id": "WOS:000259907800005"}