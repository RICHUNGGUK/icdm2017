{"auto_keywords": [{"score": 0.04880638758905066, "phrase": "spin_model_checker"}, {"score": 0.00481495049065317, "phrase": "multicore_extension"}, {"score": 0.004208002469225673, "phrase": "multicore_shared-memory_systems"}, {"score": 0.0038119123317396954, "phrase": "proper_load_balancing"}, {"score": 0.0037104876694493815, "phrase": "time_requirements"}, {"score": 0.003611751858608048, "phrase": "verification_run"}, {"score": 0.0031559919178954644, "phrase": "n_processing_cores"}, {"score": 0.0028844769395018595, "phrase": "verification_problems"}, {"score": 0.0028076592725295646, "phrase": "multicore_algorithms"}, {"score": 0.00247529638625566, "phrase": "spin_source_code"}, {"score": 0.0023033100935570755, "phrase": "partial_order_reduction"}, {"score": 0.0022019274077124795, "phrase": "temporal_logic_formulas"}, {"score": 0.00216263228969761, "phrase": "bitstate_hashing"}, {"score": 0.0021049977753042253, "phrase": "hash-compact_compression"}], "paper_keywords": ["software/program verification", " model checking", " models of computation", " logics and meanings of programs", " distributed programming"], "paper_abstract": "We describe an extension of the SPIN model checker for use on multicore shared-memory systems and report on its performance. We show how, with proper load balancing, the time requirements of a verification run can, in some cases, be reduced close to N-fold when N processing cores are used. We also analyze the types of verification problems for which multicore algorithms cannot provide relief. The extensions discussed here require only relatively small changes in the SPIN source code and are compatible with most existing verification modes such as partial order reduction, the verification of temporal logic formulas, bitstate hashing, and hash-compact compression.", "paper_title": "The design of a multicore extension of the SPIN model checker", "paper_id": "WOS:000249076200002"}