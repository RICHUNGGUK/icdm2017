{"auto_keywords": [{"score": 0.04977563261359395, "phrase": "text-centric_tasks"}, {"score": 0.007685299549545824, "phrase": "execution_time"}, {"score": 0.006770119779882997, "phrase": "execution_plans"}, {"score": 0.005120290405510461, "phrase": "efficient_execution_plans"}, {"score": 0.00481495049065317, "phrase": "query_optimizer"}, {"score": 0.004590820632326585, "phrase": "textual_data"}, {"score": 0.004461359547152617, "phrase": "notable_example"}, {"score": 0.00443308765153716, "phrase": "information_extraction_applications"}, {"score": 0.004404994123834589, "phrase": "structured_relations"}, {"score": 0.004377077848734575, "phrase": "unstructured_text"}, {"score": 0.004173244935967375, "phrase": "specific_topics"}, {"score": 0.0040298010803060495, "phrase": "text_database"}, {"score": 0.003769450990471342, "phrase": "search_engine_indexes"}, {"score": 0.0036747384051186937, "phrase": "carefully_crafted_queries"}, {"score": 0.003639835714755229, "phrase": "task-specific_ways"}, {"score": 0.003559675269411366, "phrase": "query-based_execution_plans"}, {"score": 0.0035146616294377386, "phrase": "substantial_impact"}, {"score": 0.0032666255024083983, "phrase": "typically_ad_hoc"}, {"score": 0.003204841443605308, "phrase": "plain_intuition"}, {"score": 0.0031242709509664837, "phrase": "fundamental_building_blocks"}, {"score": 0.0028944757265206332, "phrase": "crawl-based_plans"}, {"score": 0.0028306837787198183, "phrase": "output_completeness"}, {"score": 0.0027771220289115675, "phrase": "random-graph_theory"}, {"score": 0.002724570996888123, "phrase": "rigorous_cost_model"}, {"score": 0.0025810006125483835, "phrase": "fundamental_task-specific_properties"}, {"score": 0.002556459595882617, "phrase": "underlying_text_databases"}, {"score": 0.0025000985765154028, "phrase": "present_efficient_techniques"}, {"score": 0.002468450551616404, "phrase": "associated_parameters"}, {"score": 0.002444977075259825, "phrase": "cost_model"}, {"score": 0.002338344706059989, "phrase": "cost-model_parameters"}, {"score": 0.0022010126160835024, "phrase": "significant_efficiency"}, {"score": 0.0021870332034407817, "phrase": "output_completeness_benefits"}, {"score": 0.002138799283553239, "phrase": "large-scale_experimental_evaluation"}, {"score": 0.0021049977753042253, "phrase": "multiple_real-life_data_sets"}], "paper_keywords": ["algorithms", " experimentation", " measurement", " performance", " metasearching", " text database selection", " distributed information retrieval", " information extraction", " focused crawling"], "paper_abstract": "Text is ubiquitous and, not surprisingly, many important applications rely on textual data for a variety of tasks. As a notable example, information extraction applications derive structured relations from unstructured text; as another example, focused crawlers explore the Web to locate pages about specific topics. Execution plans for text-centric tasks follow two general paradigms for processing a text database: either we can scan, or \"crawl,\" the text database or, alternatively, we can exploit search engine indexes and retrieve the documents of interest via carefully crafted queries constructed in task-specific ways. The choice between crawl- and query-based execution plans can have a substantial impact on both execution time and output \"completeness\" ( e. g., in terms of recall). Nevertheless, this choice is typically ad hoc and based on heuristics or plain intuition. In this article, we present fundamental building blocks to make the choice of execution plans for text-centric tasks in an informed, cost-based way. Towards this goal, we show how to analyze query- and crawl-based plans in terms of both execution time and output completeness. We adapt results from random-graph theory and statistics to develop a rigorous cost model for the execution plans. Our cost model reflects the fact that the performance of the plans depends on fundamental task-specific properties of the underlying text databases. We identify these properties and present efficient techniques for estimating the associated parameters of the cost model. We also present two optimization approaches for text-centric tasks that rely on the cost-model parameters and select efficient execution plans. Overall, our optimization approaches help build efficient execution plans for a task, resulting in significant efficiency and output completeness benefits. We complement our results with a large-scale experimental evaluation for three important text-centric tasks and over multiple real-life data sets.", "paper_title": "Towards a query optimizer for text-centric tasks", "paper_id": "WOS:000251588500002"}