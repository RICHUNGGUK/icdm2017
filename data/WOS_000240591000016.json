{"auto_keywords": [{"score": 0.05007739374783006, "phrase": "relation-algebraic_programming"}, {"score": 0.04937176974353987, "phrase": "haskell"}, {"score": 0.004570491683870396, "phrase": "haskell_interface"}, {"score": 0.0044695432851061525, "phrase": "finite_binary_relations"}, {"score": 0.004306205029641728, "phrase": "point-free_relation-algebraic_programming_style"}, {"score": 0.004118026552723285, "phrase": "current_haskell_collection_types"}, {"score": 0.0039674831861175935, "phrase": "seamless_integration"}, {"score": 0.0039088121438737924, "phrase": "relation-algebraic_formulations"}, {"score": 0.0038224221344037236, "phrase": "elegant_solutions"}, {"score": 0.0036553070575015344, "phrase": "different_data_organisation"}, {"score": 0.003367611042980526, "phrase": "mathematical_foundations"}, {"score": 0.0032686865485199806, "phrase": "finite_relations"}, {"score": 0.00296675450822924, "phrase": "appropriate_generalisation"}, {"score": 0.0029228387900175554, "phrase": "relational_categories"}, {"score": 0.0026330549554033876, "phrase": "appropriate_interface"}, {"score": 0.002480520548392772, "phrase": "efficient_implementation"}, {"score": 0.0023719332915829268, "phrase": "bdd-based_kernel_library_kure"}, {"score": 0.002268088741853586, "phrase": "kiel_relview_system"}, {"score": 0.002136651746284283, "phrase": "high-level_declarative"}, {"score": 0.0021049977753042253, "phrase": "efficient_relational_programming"}], "paper_keywords": [""], "paper_abstract": "We present a Haskell interface for manipulating finite binary relations as data in a point-free relation-algebraic programming style that integrates naturally with the current Haskell collection types. This approach enables seamless integration of relation-algebraic formulations to provide elegant solutions of problems that, with different data organisation, are awkward to tackle. Perhaps surprisingly, the mathematical foundations for dealing with finite relations in such a context are not well-established, so we provide an appropriate generalisation of relational categories to semigroupoids to serve as specification for our interface. After having established an appropriate interface for relation-algebraic programming, we also need an efficient implementation; we find this in BDD-based kernel library KURE of recent versions of the Kiel RelView system. We show how this combination enables high-level declarative and efficient relational programming in Haskell.", "paper_title": "Semigroupoid interfaces for relation-algebraic programming in Haskell", "paper_id": "WOS:000240591000016"}