{"auto_keywords": [{"score": 0.03381933677463954, "phrase": "optimal_solution"}, {"score": 0.029898139696794914, "phrase": "search_space"}, {"score": 0.025032392208329042, "phrase": "proposed_algorithm"}, {"score": 0.00481495049065317, "phrase": "search_state_space_and_scheduling"}, {"score": 0.004658426838467567, "phrase": "scheduling_algorithm"}, {"score": 0.0045318666714939905, "phrase": "overall_execution_time"}, {"score": 0.00428892403807229, "phrase": "execution_order"}, {"score": 0.004149429072483132, "phrase": "core_processors"}, {"score": 0.004058951880810154, "phrase": "precedence_constraints"}, {"score": 0.003757480190200645, "phrase": "new_scheduling_algorithm"}, {"score": 0.0036958398682001015, "phrase": "geometry_analysis"}, {"score": 0.0036152193133528444, "phrase": "tpg"}, {"score": 0.003440166097491567, "phrase": "computationally_efficient_cost_function"}, {"score": 0.003328184259386487, "phrase": "reduced_complexity"}, {"score": 0.003097865379563127, "phrase": "parallel_application"}, {"score": 0.0029641011108505785, "phrase": "main_goal"}, {"score": 0.0026107601878587816, "phrase": "general_task_graph_problems"}, {"score": 0.002511803988580901, "phrase": "related_search_work"}, {"score": 0.0024569466759289055, "phrase": "optimal_scheduling"}, {"score": 0.00241658945942583, "phrase": "small_number"}, {"score": 0.002312174113289583, "phrase": "exhaustive_search"}, {"score": 0.0021049977753042253, "phrase": "illustrative_example"}], "paper_keywords": ["optimal scheduling", " task graphs", " state-space search", " A*", " geometric analysis"], "paper_abstract": "A scheduling algorithm aims to minimize the overall execution time of the program by properly allocating and arranging the execution order of the tasks on the core processors such that the precedence constraints among the tasks are preserved. In this paper, we present a new scheduling algorithm by using geometry analysis of the Task Precedence Graph (TPG) based on A* search technique and uses a computationally efficient cost function for guiding the search with reduced complexity and pruning techniques to produce an optimal solution for the allocation/scheduling problem of a parallel application to parallel and multiprocessor architecture. The main goal of this work is to significantly reduce the search space and achieve the optimality or near optimal solution. We implemented the algorithm on general task graph problems that are processed on most of related search work and obtain the optimal scheduling with a small number of states. The proposed algorithm reduced the exhaustive search by at least 50% of search space. The viability and potential of the proposed algorithm is demonstrated by an illustrative example.", "paper_title": "Optimal Scheme for Search State Space and Scheduling on Multiprocessor Systems", "paper_id": "WOS:000265701700021"}