{"auto_keywords": [{"score": 0.030974107676394053, "phrase": "biased_mutations"}, {"score": 0.015457961415712849, "phrase": "evolutionary_algorithms"}, {"score": 0.00481495049065317, "phrase": "asymmetric_mutation"}, {"score": 0.004680624753255133, "phrase": "general_randomized_search_heuristics"}, {"score": 0.004324031677173549, "phrase": "search_points"}, {"score": 0.004086010164600727, "phrase": "problem-specific_knowledge"}, {"score": 0.00399449659126893, "phrase": "additional_bias"}, {"score": 0.003882970272082245, "phrase": "appropriately_biased_variation_opera_tors"}, {"score": 0.003648411055689428, "phrase": "bit_strings"}, {"score": 0.0036073064072936626, "phrase": "finite_length"}, {"score": 0.0034867406208212146, "phrase": "good_solutions"}, {"score": 0.0033511469200347907, "phrase": "mutation_operator"}, {"score": 0.0032208091960514128, "phrase": "different_perspectives"}, {"score": 0.003148612096891635, "phrase": "rigorous_way"}, {"score": 0.0029083942467546305, "phrase": "oil_illustrative_example_functions"}, {"score": 0.002843180211561427, "phrase": "oil_function_classes"}, {"score": 0.002763709443278514, "phrase": "unbiased_operators"}, {"score": 0.002398382089724878, "phrase": "almost_no_difference"}, {"score": 0.0023313149689465386, "phrase": "main_focus"}, {"score": 0.0022919762167777427, "phrase": "theoretical_runtime_analysis"}, {"score": 0.0022661190184053628, "phrase": "asymptotic_results"}, {"score": 0.002141134176057931, "phrase": "empirical_investigations"}, {"score": 0.0021049977753042253, "phrase": "additional_insights"}], "paper_keywords": ["Evolutionary algorithms", " mutation", " unimodal problems", " runtime analysis"], "paper_abstract": "Evolutionary algorithms are general randomized search heuristics and typically perform all unbiased random search that is guided only by the fitness of the search points encountered. However, in applications there is often problem-specific knowledge that suggests some additional bias. The use of appropriately biased variation opera tors may speed up the search considerably. Problems defined over bit strings of finite length often have the property that good solutions have only very few 1-bits or very few 0-bits. A mutation operator tailored toward such situations is studied under different perspectives and in a rigorous way discussing its assets and drawbacks. We consider the runtime of evolutionary algorithms using biased mutations oil illustrative example functions as well as oil function classes. A comparison with unbiased operators shows on which functions biased mutations lead to a speedup, on which functions biased Mutations increase the runtime, and in which settings there is almost no difference in performance. The main focus is on theoretical runtime analysis yielding asymptotic results. These findings are accompanied by the results of empirical investigations that deliver additional insights.", "paper_title": "Analysis of an Asymmetric Mutation Operator", "paper_id": "WOS:000275154400001"}