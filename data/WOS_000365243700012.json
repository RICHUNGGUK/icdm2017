{"auto_keywords": [{"score": 0.0481212980650811, "phrase": "functional_test_cases"}, {"score": 0.030393345412521606, "phrase": "generated_test_cases"}, {"score": 0.00481495049065317, "phrase": "automatic_generation"}, {"score": 0.004319830179921363, "phrase": "test-duo_framework"}, {"score": 0.0038431888954930083, "phrase": "automatic_testing_platform"}, {"score": 0.00347657813672945, "phrase": "refining_and_annotating_use_cases"}, {"score": 0.003279039724748895, "phrase": "tool_support"}, {"score": 0.003066945490483524, "phrase": "actual_test_cases"}, {"score": 0.0027741761880779535, "phrase": "mutation_testing"}, {"score": 0.002509284173541882, "phrase": "appropriate_strategies"}, {"score": 0.002194929830604162, "phrase": "improvement_process"}, {"score": 0.0021049977753042253, "phrase": "case_study"}], "paper_keywords": ["functional test case generation", " use case", " mutation testing", " annotation", " test case quality improvement", " test automation"], "paper_abstract": "The Test-Duo framework is proposed for automating the task of generating functional test cases for execution on an automatic testing platform. With Test-Duo, the tester focuses on the tasks of refining and annotating use cases and preparing test data sets with tool support, leaving the tasks of generating the actual test cases and marshaling their execution to Test-Duo. The generated test cases are subjected to mutation testing, whose results are analyzed by the tester to identify and apply appropriate strategies for systematically and iteratively improving the quality of the generated test cases. The effectiveness of this improvement process is demonstrated with a case study.", "paper_title": "Towards Automatic Generation and Continuous Improvement of Functional Test Cases: The Case of the Test-Duo Framework and Mutation Testing", "paper_id": "WOS:000365243700012"}