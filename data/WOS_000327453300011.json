{"auto_keywords": [{"score": 0.03644451033122438, "phrase": "mapreduce_framework"}, {"score": 0.009706623487599387, "phrase": "large-scale_data_processing_mechanisms"}, {"score": 0.00481495049065317, "phrase": "continuous_increase"}, {"score": 0.004769702911065878, "phrase": "computational_power"}, {"score": 0.004680473391946691, "phrase": "overwhelming_flow"}, {"score": 0.004506968388996092, "phrase": "paradigm_shift"}, {"score": 0.0044435677598780796, "phrase": "computing_architecture"}, {"score": 0.004360447257199044, "phrase": "mapreduce"}, {"score": 0.004299064805926241, "phrase": "simple_and_powerful_programming_model"}, {"score": 0.004178935413340453, "phrase": "scalable_parallel_applications"}, {"score": 0.004120130206000757, "phrase": "vast_amounts"}, {"score": 0.004043003243656031, "phrase": "large_clusters"}, {"score": 0.0040049806975968145, "phrase": "commodity_machines"}, {"score": 0.003784209997115174, "phrase": "distributed_program"}, {"score": 0.0036958398682001015, "phrase": "data_distribution"}, {"score": 0.0035085965086415474, "phrase": "original_implementation"}, {"score": 0.0031619994642255846, "phrase": "comprehensive_survey"}, {"score": 0.002917736974519881, "phrase": "original_idea"}, {"score": 0.0027307746993761035, "phrase": "research_and_industrial_communities"}, {"score": 0.0026293540353514075, "phrase": "introduced_systems"}, {"score": 0.0025436978068459565, "phrase": "declarative_programming_interfaces"}, {"score": 0.002281376328251423, "phrase": "different_purposes"}, {"score": 0.002259883463607508, "phrase": "application_scenarios"}, {"score": 0.0021656385587456952, "phrase": "future_research_directions"}, {"score": 0.002125020720324262, "phrase": "next_generation"}, {"score": 0.0021049977753042253, "phrase": "mapreduce-like_solutions"}], "paper_keywords": ["Design", " Algorithms", " Performance", " MapReduce", " big data", " large-scale data processing"], "paper_abstract": "In the last two decades, the continuous increase of computational power has produced an overwhelming flow of data which has called for a paradigm shift in the computing architecture and large-scale data processing mechanisms. MapReduce is a simple and powerful programming model that enables easy development of scalable parallel applications to process vast amounts of data on large clusters of commodity machines. It isolates the application from the details of running a distributed program such as issues on data distribution, scheduling, and fault tolerance. However, the original implementation of the MapReduce framework had some limitations that have been tackled by many research efforts in several followup works after its introduction. This article provides a comprehensive survey for a family of approaches and mechanisms of large-scale data processing mechanisms that have been implemented based on the original idea of the MapReduce framework and are currently gaining a lot of momentum in both research and industrial communities. We also cover a set of introduced systems that have been implemented to provide declarative programming interfaces on top of the MapReduce framework. In addition, we review several large-scale data processing systems that resemble some of the ideas of the MapReduce framework for different purposes and application scenarios. Finally, we discuss some of the future research directions for implementing the next generation of MapReduce-like solutions.", "paper_title": "The Family of MapReduce and Large-Scale Data Processing Systems", "paper_id": "WOS:000327453300011"}