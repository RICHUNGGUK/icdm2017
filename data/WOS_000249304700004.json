{"auto_keywords": [{"score": 0.026897811453592893, "phrase": "prolog"}, {"score": 0.00481495049065317, "phrase": "object-oriented_programming_law_conditions"}, {"score": 0.004303830426772906, "phrase": "programming_constructs"}, {"score": 0.0037307208089736835, "phrase": "program_transformation_tool"}, {"score": 0.003509006038574667, "phrase": "object-oriented_programs"}, {"score": 0.0032668821950788533, "phrase": "programming_law"}, {"score": 0.0022382002476510573, "phrase": "definable_refactorings"}, {"score": 0.0021049977753042253, "phrase": "programming_laws"}], "paper_keywords": ["refactoring", " logic programming", " programming law conditions"], "paper_abstract": "Programming laws are a means of stating properties of programming constructs and resoning about programs. Also, they can be viewed as a program transformation tool, being useful to restructure object-oriented programs. Usually the application of a programming law is only allowed under the satisfaction of side-conditions. In this work, we present how the conditions associated to object-oriented programming laws are checked by using Prolog. This is a step towards a tool that allows user definable refactorings based on the application of programming laws.", "paper_title": "Logic programming for verification of object-oriented programming law conditions", "paper_id": "WOS:000249304700004"}