{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "java"}, {"score": 0.04281536181396192, "phrase": "code_generation_patterns"}, {"score": 0.0047283116134926645, "phrase": "significant_current_software_engineering_problem"}, {"score": 0.0045804107341714, "phrase": "abstract_concept"}, {"score": 0.004437115547184535, "phrase": "modelling_languages"}, {"score": 0.00437712532371638, "phrase": "uml"}, {"score": 0.004317848984770719, "phrase": "lower_level_expressive_facilities"}, {"score": 0.004259418153299952, "phrase": "object-oriented_languages"}, {"score": 0.003978866233891427, "phrase": "java_based_implementations"}, {"score": 0.003942877273973905, "phrase": "uml_models"}, {"score": 0.0037506567448470163, "phrase": "model_driven_development_tools"}, {"score": 0.0036332251283046997, "phrase": "embedded_systems"}, {"score": 0.0031556799865964974, "phrase": "object-oriented_code"}, {"score": 0.002988101395789399, "phrase": "class_diagrams"}, {"score": 0.002934237411711622, "phrase": "qualified_associations"}, {"score": 0.0027910516355928983, "phrase": "uml_version"}, {"score": 0.0024460897937643032, "phrase": "automatic_generation"}, {"score": 0.002423931101340771, "phrase": "java_code"}, {"score": 0.002401972657236926, "phrase": "uml_class_diagrams"}, {"score": 0.0023586493263143553, "phrase": "new_and_complex_association_concepts"}, {"score": 0.0022847009758393405, "phrase": "code_generation_abilities"}, {"score": 0.0022640009579466924, "phrase": "uml_tools"}, {"score": 0.0022231606165229235, "phrase": "useful_automation_facility"}, {"score": 0.0021049977753042253, "phrase": "lower_level_object-oriented_programming_languages"}], "paper_keywords": ["UML", " Java", " association", " property", " code generation"], "paper_abstract": "A significant current software engineering problem is the conceptual mismatch between the abstract concept of an association as found in modelling languages such as UML and the lower level expressive facilities available in object-oriented languages such as Java. This paper introduces some code generation patterns that aid the production of Java based implementations from UML models. The work is motivated by a project to construct model driven development tools in support of the construction of embedded systems. This involves the specification and implementation of a number of meta-models (or models of languages). Many current UML oriented tools provide code generation facilities, in particular the generation of object-oriented code from class diagrams. However, many of the more complex aspects of class diagrams, such as qualified associations are not supported. In addition, several concepts introduced in UML version 2.0 are also not supported. The aim of the work presented in this paper is to develop a number of code generation patterns that allow us to support the automatic generation of Java code from UML class diagrams that support these new and complex association concepts. These patterns significantly improve the code generation abilities of UML tools, providing a useful automation facility that bridges the gap between the concept of an association and lower level object-oriented programming languages.", "paper_title": "Implementing associations: UML 2.0 to Java 5", "paper_id": "WOS:000254667600002"}