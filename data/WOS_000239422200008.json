{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "unifying_theories"}, {"score": 0.004742511243894382, "phrase": "proofpower-z."}, {"score": 0.004671156704912419, "phrase": "increasing_interest"}, {"score": 0.004497410940849537, "phrase": "different_computational_paradigms"}, {"score": 0.0036368625017975343, "phrase": "theorem_prover"}, {"score": 0.0035820833812158035, "phrase": "proofpower-z"}, {"score": 0.0026640466056415298, "phrase": "tool_support"}, {"score": 0.0021049977753042253, "phrase": "dijkstra's_guarded_command_language"}], "paper_keywords": ["Unifying Theories of Programming", " theorem prover"], "paper_abstract": "The increasing interest in the combination of different computational paradigms is very well represented by Hoare & He in the Unifying Theories of Programming. In this paper, we present a mechanisation of part of that work in a theorem prover, ProofPower-Z; the theories of alphabetised relations, designs, reactive and CSP processes are in the scope of this paper. An account of how this mechanisation is done, and more interestingly, of what issues were raised and of our decisions, is presented here. We aim at providing tool support for further explorations of Hoare & He's unification, and for the mechanisation of languages based on this unification. More specifically, Circus, a specification language that combines Z, CSP, specification statements, and Dijkstra's guarded command language is our final target.", "paper_title": "Unifying theories in ProofPower-Z", "paper_id": "WOS:000239422200008"}