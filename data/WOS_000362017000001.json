{"auto_keywords": [{"score": 0.04333983479125857, "phrase": "modularity"}, {"score": 0.015086218177636283, "phrase": "modular"}, {"score": 0.005273162898741398, "phrase": "reconfigurable"}, {"score": 0.00481495049065317, "phrase": "fault_recovery"}, {"score": 0.0042920078348374375, "phrase": "modular_and_hierarchical_design"}, {"score": 0.0042004472903194616, "phrase": "fault-tolerant_software"}, {"score": 0.0039942998891989955, "phrase": "faulty_software_units"}, {"score": 0.003937273640906994, "phrase": "key_operations"}, {"score": 0.003853251284913932, "phrase": "software_removal"}, {"score": 0.003611751858608048, "phrase": "faulty_software"}, {"score": 0.0032893028281789287, "phrase": "active_replication"}, {"score": 0.0031959843979467704, "phrase": "modular_components"}, {"score": 0.0030609320300175953, "phrase": "key_construct"}, {"score": 0.00284837132359445, "phrase": "ad_hoc_changes"}, {"score": 0.0028076592725295646, "phrase": "software_topologies"}, {"score": 0.002727967804120323, "phrase": "hierarchical_mobility"}, {"score": 0.002669683153809812, "phrase": "useful_operation"}, {"score": 0.002612640527241776, "phrase": "new_software_units"}, {"score": 0.0025568135952982345, "phrase": "faulty_ones"}, {"score": 0.0025021765811679446, "phrase": "illustration_purposes"}, {"score": 0.0021049977753042253, "phrase": "desmos_framework"}], "paper_keywords": [""], "paper_abstract": "We show the advantages of modular and hierarchical design in obtaining fault-tolerant software. Modularity enables the identification of faulty software units simplifying key operations, like software removal and replacement. We describe three approaches to repair faulty software based on replication, namely, Passive Replication, N-Version Replication, and Active Replication, based on modular components. We show that the key construct to represent these tactics is the ability to make ad hoc changes in software topologies. We consider hierarchical mobility as a useful operation to introduce new software units for replacing faulty ones. For illustration purposes, we use connecton, a hierarchical, modular, and self-modifying software specification formalism, and its implementation in the Desmos framework.", "paper_title": "Representing Tactics for Fault Recovery: A Reconfigurable, Modular, and Hierarchical Approach", "paper_id": "WOS:000362017000001"}