{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "self-generating_program_specializers"}, {"score": 0.004664352260912174, "phrase": "language-independent_projection"}, {"score": 0.004173244935967375, "phrase": "interpretive_approach"}, {"score": 0.004074901471704325, "phrase": "bootstrapping_technique"}, {"score": 0.00347574024760684, "phrase": "self-generating_specializers"}, {"score": 0.0032355864829403413, "phrase": "new_projection"}, {"score": 0.0031592690527974285, "phrase": "practical_consequence"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Partial evaluation", " Programming languages", " Program generation", " Self-reproduction", " Metacomputation"], "paper_abstract": "This paper demonstrates the existence of self-generating program specializers and uses a language-independent projection to obtain them. The projection is considered from the viewpoint of the interpretive approach and a bootstrapping technique is identified by which a specializer can optimize its own implementation. A theorem is presented that equates the set of self-generating specializers and the set of specializers produced by the new projection. A practical consequence of the theorem is that an implementation of a specializer must contain an error if it is not possible to observe self-generation, which requires only a textual program comparison. Self-generation may thus provide a method for testing specializers and self-interpreters while they are under development. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Self-generating program specializers", "paper_id": "WOS:000280935700010"}