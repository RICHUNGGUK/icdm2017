{"auto_keywords": [{"score": 0.036483924236319125, "phrase": "time-varying_performance"}, {"score": 0.00481495049065317, "phrase": "processing_performance_traces"}, {"score": 0.004428139418750855, "phrase": "program's_run"}, {"score": 0.0029282926103224717, "phrase": "traceanalyzer"}, {"score": 0.002815864555488112, "phrase": "performance_traces"}, {"score": 0.0027690086059100495, "phrase": "performance_trace"}, {"score": 0.0023281003994670714, "phrase": "case_study"}, {"score": 0.002189105604712615, "phrase": "performance_anomaly"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["performance analysis", " traces", " data processing", " statistics"], "paper_abstract": "The performance of a program often varies significantly over the course of the program's run. Thus, to understand the performance of a program it is valuable to look not just at end-to-end metrics (e.g. total number of cache misses) but also the time-varying performance of the program. Unfortunately, analyzing time-varying performance is both cumbersome and difficult. This paper makes three contributions, all geared toward helping others in working with traces. First, it describes a system, the TraceAnalyzer, designed specifically for working with performance traces; a performance trace captures the time-varying performance of a program run. Second, it describes lessons that we have learned from many years of working with these traces. Finally, it uses a case study to demonstrate how we have used the Trace Analyzer to understand a performance anomaly. Copyright (C) 2010 John Wiley & Sons, Ltd.", "paper_title": "TraceAnalyzer: a system for processing performance traces", "paper_id": "WOS:000287608400003"}