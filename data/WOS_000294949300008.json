{"auto_keywords": [{"score": 0.03233414695637027, "phrase": "checkpoint_image"}, {"score": 0.02998709154402907, "phrase": "linux"}, {"score": 0.029244474867571126, "phrase": "windows"}, {"score": 0.00481495049065317, "phrase": "volatile_state"}, {"score": 0.004761968711051715, "phrase": "virtual_machine"}, {"score": 0.0045895181082906715, "phrase": "virtual_machine_monitor"}, {"score": 0.004505638402009237, "phrase": "later_restoration"}, {"score": 0.004294625285753825, "phrase": "full_image"}, {"score": 0.00424734451992536, "phrase": "vm's_memory"}, {"score": 0.004200582085706493, "phrase": "processor_and_device_states"}, {"score": 0.004123781267600542, "phrase": "guest_memory_sizes"}, {"score": 0.0037325918533747953, "phrase": "fast_and_space-efficient_checkpointing"}, {"score": 0.003623949225126944, "phrase": "existing_methods"}, {"score": 0.0035708152831417104, "phrase": "redundant_data"}, {"score": 0.003466865016432561, "phrase": "vm's_memory_pages"}, {"score": 0.0033288399506044763, "phrase": "external_storage"}, {"score": 0.0032558762499901727, "phrase": "memory_pages"}, {"score": 0.003196292402522254, "phrase": "non-volatile_storage"}, {"score": 0.0029906503184034634, "phrase": "proposed_technique"}, {"score": 0.002925077525258983, "phrase": "fully-virtualized_guests"}, {"score": 0.0028928306994090453, "phrase": "xen_vmm."}, {"score": 0.002850385670169814, "phrase": "paravirtualized_guest"}, {"score": 0.002716681656135794, "phrase": "significant_reduction"}, {"score": 0.0025137856138000014, "phrase": "current_xen_implementation"}, {"score": 0.002404706573379854, "phrase": "stored_data"}, {"score": 0.0022834017104377525, "phrase": "paravirtualized_linux_guest"}, {"score": 0.0022498783454674254, "phrase": "fully-virtualized_environment"}, {"score": 0.0022168460543913787, "phrase": "linux_guests"}, {"score": 0.0021522261505574035, "phrase": "image_size"}, {"score": 0.0021049977753042253, "phrase": "checkpointing_time"}], "paper_keywords": ["Design", " Measurement", " Performance", " Reliability", " Virtual Machine", " Checkpointing"], "paper_abstract": "Checkpointing, i.e., recording the volatile state of a virtual machine (VM) running as a guest in a virtual machine monitor (VMM) for later restoration, includes storing the memory available to the VM. Typically, a full image of the VM's memory along with processor and device states are recorded. With guest memory sizes of up to several gigabytes, the size of the checkpoint images becomes more and more of a concern. In this work we present a technique for fast and space-efficient checkpointing of virtual machines. In contrast to existing methods, our technique eliminates redundant data and stores only a subset of the VM's memory pages. Our technique transparently tracks I/O operations of the guest to external storage and maintains a list of memory pages whose contents are duplicated on non-volatile storage. At a checkpoint, these pages are excluded from the checkpoint image. We have implemented the proposed technique for paravirtualized as well as fully-virtualized guests in the Xen VMM. Our experiments with a paravirtualized guest (Linux) and two fully-virtualized guests (Linux, Windows) show a significant reduction in the size of the checkpoint image as well as the time required to complete the checkpoint. Compared to the current Xen implementation, we achieve, on average, an 81% reduction in the stored data and a 74% reduction in the time required to take a checkpoint for the paravirtualized Linux guest. In a fully-virtualized environment running Windows and Linux guests, we achieve a 64% reduction of the image size along with a 62% reduction in checkpointing time.", "paper_title": "Fast and Space-Efficient Virtual Machine Checkpointing", "paper_id": "WOS:000294949300008"}