{"auto_keywords": [{"score": 0.04274518365190484, "phrase": "abstract_interpretation"}, {"score": 0.012856448961934422, "phrase": "static_analyses"}, {"score": 0.00481495049065317, "phrase": "correct_variability-aware_program_analyses"}, {"score": 0.0046364836476864325, "phrase": "particular_verification"}, {"score": 0.004592905436175987, "phrase": "analysis_methods"}, {"score": 0.004549734943142138, "phrase": "software_product_lines"}, {"score": 0.004159241394996858, "phrase": "single-program_analyses"}, {"score": 0.003986103192038901, "phrase": "classical_framework"}, {"score": 0.003802135020791801, "phrase": "step_manner"}, {"score": 0.0034920505103165403, "phrase": "abstract_interpretation_steps"}, {"score": 0.0032529910932231924, "phrase": "domain_types"}, {"score": 0.003132236287543072, "phrase": "galois_connections"}, {"score": 0.0028495431343111897, "phrase": "resulting_variational_abstract_interpretation"}, {"score": 0.0028093921138602606, "phrase": "conceptual_framework"}, {"score": 0.0025678829712650437, "phrase": "corresponding_variational_dataflow_equations"}, {"score": 0.0025316905609748135, "phrase": "example_static_analysis"}, {"score": 0.0023470862747075228, "phrase": "variability-aware_abstractions"}, {"score": 0.0021656385587456952, "phrase": "evaluation_results"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Software Product Lines", " Software variability", " Verification", " Static analysis", " Abstract interpretation"], "paper_abstract": "A recent line of work lifts particular verification and analysis methods to Software Product Lines (SPL). In an effort to generalize such case-by-case approaches, we develop a systematic methodology for lifting single-program analyses to SPLs using abstract interpretation. Abstract interpretation is a classical framework for deriving static analyses in a compositional, step-by-step manner. We show how to take an analysis expressed as an abstract interpretation and lift each of the abstract interpretation steps to a family of programs (SPL). This includes schemes for lifting domain types, and combinators for lifting analyses and Galois connections. We prove that for analyses developed using our method, the soundness of lifting follows by construction. The resulting variational abstract interpretation is a conceptual framework for understanding, deriving, and validating static analyses for SPLs. Then we show how to derive the corresponding variational dataflow equations for an example static analysis, a constant propagation analysis. We also describe how to approximate variability by applying variability-aware abstractions to SPL analysis. Finally, we discuss how to efficiently implement our method and present some evaluation results. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "Systematic derivation of correct variability-aware program analyses", "paper_id": "WOS:000356198600008"}