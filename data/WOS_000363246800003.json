{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "test_cases"}, {"score": 0.035947100780556455, "phrase": "regression_testing"}, {"score": 0.019089101327607563, "phrase": "leading_faults"}, {"score": 0.008869077721085094, "phrase": "fault_dependency_network"}, {"score": 0.005365225225830315, "phrase": "dependency_network"}, {"score": 0.004472718499554466, "phrase": "existing_test_cases"}, {"score": 0.004438727725416316, "phrase": "best_way"}, {"score": 0.004133627071344356, "phrase": "regression_test_prioritization_techniques"}, {"score": 0.004060673159140763, "phrase": "regression_test_suite"}, {"score": 0.003989001644825002, "phrase": "highest_priority_test_cases"}, {"score": 0.003771849705803939, "phrase": "software_testing"}, {"score": 0.003602970173264847, "phrase": "dependent_faults"}, {"score": 0.0033465923623290034, "phrase": "system_testing_phase"}, {"score": 0.0030071857666598193, "phrase": "directed_graph"}, {"score": 0.0029092568512822966, "phrase": "centrality_aggregation_technique"}, {"score": 0.0028871132684630406, "phrase": "six_network_representative_centrality_metrics"}, {"score": 0.0027788910305171443, "phrase": "fault_communities"}, {"score": 0.002750721367040336, "phrase": "arbitrary_percentage"}, {"score": 0.002708999932178817, "phrase": "prioritized_regression_test_suite"}, {"score": 0.0026747145762301594, "phrase": "case_study"}, {"score": 0.0026140878612307536, "phrase": "proposed_method"}, {"score": 0.0025418468477681772, "phrase": "vocabulary_learning_software"}, {"score": 0.0025032855546745503, "phrase": "fault_network"}, {"score": 0.0024842242921857705, "phrase": "small-world_graph"}, {"score": 0.0024715972867022963, "phrase": "distinguishable_community_structure"}, {"score": 0.002319058565235998, "phrase": "traditional_regression_testing_prioritization_techniques"}, {"score": 0.0022094430230616188, "phrase": "fault_dependencies"}, {"score": 0.002181466276322291, "phrase": "regression_test_suites"}, {"score": 0.002137436881667347, "phrase": "dependency_model"}, {"score": 0.0021049977753042253, "phrase": "relevant_resources"}], "paper_keywords": ["Software testing", " Regression testing", " Test-case prioritization"], "paper_abstract": "Regression testing is performed to provide confidence that changes in a part of software do not affect other parts of the software. An execution of all existing test cases is the best way to re-establish this confidence. However, regression testing is an expensive process-there might be insufficient resources (e.g., time, workforce) to allow for the re-execution of all test cases. Regression test prioritization techniques attempt to re-order a regression test suite based on some criteria so that highest priority test cases are executed earlier. In this study, we prioritize test cases for regression testing based on the dependency network of faults. In software testing, it is common that some faults are the consequences of other faults (leading faults). Dependent faults can be removed if and only if the leading faults have been removed. Our goal is to prioritize test cases so that test cases that have exposed the leading faults in the system testing phase, are executed first in regression testing. The leading faults are modeled as the most central faults in the fault dependency network. We present ComReg, a test-case prioritization technique based on the dependency network of faults. We model a fault dependency network as a directed graph and identify leading faults to prioritize test cases for regression testing. We use a centrality aggregation technique which considers six network representative centrality metrics to identify leading faults in the fault dependency network. We also discuss the use of fault communities to select an arbitrary percentage of the test cases from a prioritized regression test suite. We conduct a case study that evaluates the effectiveness and applicability of the proposed method. We obtain a fault dependency network from the development of a vocabulary learning software. We found that the fault network is a small-world graph with distinguishable community structure. The leading faults are common in all centralities and a re-ordering of test cases is feasible for regression testing based on those leading faults. Our method outperforms traditional regression testing prioritization techniques in detecting fault dependencies. Our modeling of the network of faults provides insights into the requirement of recognizing fault dependencies while re-ordering regression test suites for both research and practice. The dependency model needs further evaluation and improvement considering relevant resources (e.g., man-hours).", "paper_title": "The network of faults: a complex network approach to prioritize test cases for regression testing", "paper_id": "WOS:000363246800003"}