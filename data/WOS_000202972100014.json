{"auto_keywords": [{"score": 0.04703931097564505, "phrase": "memory_errors"}, {"score": 0.015719716506582538, "phrase": "unsafe_languages"}, {"score": 0.004245051445971095, "phrase": "uninitialized_data"}, {"score": 0.004118587636081584, "phrase": "program_crashes"}, {"score": 0.004077272409331917, "phrase": "security_vulnerabilities"}, {"score": 0.004016072233242585, "phrase": "unpredictable_behavior"}, {"score": 0.003540392285585644, "phrase": "probabilistic_memory_safety"}, {"score": 0.003469676666252421, "phrase": "infinite-sized_heap"}, {"score": 0.0034348484776384643, "phrase": "diehard's_memory_manager"}, {"score": 0.003073988343893906, "phrase": "heap_corruption"}, {"score": 0.003012560489169148, "phrase": "probabilistic_guarantee"}, {"score": 0.002922705896608178, "phrase": "additional_safety"}, {"score": 0.0028933530535424547, "phrase": "diehard"}, {"score": 0.002821247621250663, "phrase": "replicated_mode"}, {"score": 0.0027929100418926725, "phrase": "multiple_replicas"}, {"score": 0.0026023381988430666, "phrase": "different_random_seed"}, {"score": 0.0024993218789131437, "phrase": "replicated_version"}, {"score": 0.0024125253170522816, "phrase": "correct_execution"}, {"score": 0.0022365262201954643, "phrase": "analytical_and_experimental_results"}, {"score": 0.002202894673025544, "phrase": "diehard's_resilience"}, {"score": 0.0021697677572213086, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "heap-based_buffer_overflow"}], "paper_keywords": ["algorithms", " languages", " reliability", " DieHard", " probabilistic memory safety", " randomization", " replication", " dynamic memory allocation"], "paper_abstract": "Applications written in unsafe languages like C and C++ are vulnerable to memory errors such as buffer overflows, dangling pointers, and reads of uninitialized data. Such errors can lead to program crashes, security vulnerabilities, and unpredictable behavior. We present DieHard, a runtime system that tolerates these errors while probabilistically maintaining soundness. DieHard uses randomization and replication to achieve probabilistic memory safety by approximating an infinite-sized heap. DieHard's memory manager randomizes the location of objects in a heap that is at least twice as large as required. This algorithm prevents heap corruption and provides a probabilistic guarantee of avoiding memory errors. For additional safety, DieHard can operate in a replicated mode where multiple replicas of the same application are run simultaneously. By initializing each replica with a different random seed and requiring agreement on output, the replicated version of DieHard increases the likelihood of correct execution because errors are unlikely to have the same effect across all replicas. We present analytical and experimental results that show DieHard's resilience to a wide range of memory errors, including a heap-based buffer overflow in an actual application.", "paper_title": "DieHard: Probabilistic memory safety for unsafe languages", "paper_id": "WOS:000202972100014"}