{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "traceability_links"}, {"score": 0.0067740244192638814, "phrase": "code_generation_transformation"}, {"score": 0.004774937143916685, "phrase": "higher-order_transformations"}, {"score": 0.004735254735115024, "phrase": "easing_regression_testing"}, {"score": 0.004695900553353526, "phrase": "web_applications."}, {"score": 0.004656871909510407, "phrase": "model-driven_engineering"}, {"score": 0.004195418010131832, "phrase": "platform_independent_models"}, {"score": 0.003990385737207714, "phrase": "software_life-cycle"}, {"score": 0.0037480753312398754, "phrase": "regression_testing_phase"}, {"score": 0.0036553070575015344, "phrase": "proposed_framework"}, {"score": 0.0036248955128033084, "phrase": "developers_record_and_replay_testing_sessions"}, {"score": 0.0033204052817782438, "phrase": "generated_code"}, {"score": 0.0032381878248821383, "phrase": "application_execution"}, {"score": 0.003197843245296877, "phrase": "model_level"}, {"score": 0.0031056437850836326, "phrase": "modified_version"}, {"score": 0.002966084234963723, "phrase": "higher-order_transformation"}, {"score": 0.002498812056838983, "phrase": "code_generator"}, {"score": 0.0024883835349005863, "phrase": "additional_rules"}, {"score": 0.00246765655376112, "phrase": "traceability_clues"}, {"score": 0.0022413233627905696, "phrase": "web_context"}, {"score": 0.0022133711375320244, "phrase": "code_generation_transformations"}, {"score": 0.002158505888557746, "phrase": "technology_and_presentation_styles"}, {"score": 0.0021049977753042253, "phrase": "automatic_evolution"}], "paper_keywords": ["Model-Driven Engineering", " Model-Driven Architecture", " Testing", " Regression", " Testing Automation"], "paper_abstract": "For Model-Driven Engineering to become widely accepted by developers, it is necessary that its principles and techniques be applied not only to the generation of code from Platform Independent Models (PIMs), but more generally to all the phases of the software life-cycle. This paper focuses on the use of PIMs to support automation in the regression testing phase of a system; the proposed framework lets developers record and replay testing sessions and investigate testing failures at the level of their PIMs; this is made possible by traceability links automatically weaved into the generated code, whereby developers can follow application execution at the model level. Such traceability links are created by a modified version of the code generation transformation, automatically produced by means of a Higher-Order Transformation (HOT). A HOT is a transformation that takes as input a transformation (the original code generator) and creates another transformation (the code generator capable of producing traceability links). The HOT weaves into the code generator additional rules producing traceability clues that help developers link any error to the model features likely to cause it. This approach is particularly helpful in the Web context, where code generation transformations must follow changes in the technology and presentation styles. Using HOTs ensures the automatic evolution of the transformation for traceability links when the code generation transformation changes.", "paper_title": "USING TRACEABILITY LINKS AND HIGHER-ORDER TRANSFORMATIONS FOR EASING REGRESSION TESTING OF WEB APPLICATIONS", "paper_id": "WOS:000292438100001"}