{"auto_keywords": [{"score": 0.04502457019127767, "phrase": "network's_performance"}, {"score": 0.04399755003715801, "phrase": "input_space"}, {"score": 0.0429929017731223, "phrase": "output_space"}, {"score": 0.041167959844606875, "phrase": "network's_square_error"}, {"score": 0.03320017670169722, "phrase": "fitness_function"}, {"score": 0.03281478310718597, "phrase": "particle_swarm_optimizer"}, {"score": 0.02927701149985092, "phrase": "membership_degrees"}, {"score": 0.00481495049065317, "phrase": "training_rbf_neural_networks"}, {"score": 0.004786107405332454, "phrase": "input-output_fuzzy_clustering"}, {"score": 0.004602773636967002, "phrase": "particle_swarm_optimization"}, {"score": 0.004575195715264118, "phrase": "training_gaussian_type_radial_basis_function_neural_networks"}, {"score": 0.004506968388996092, "phrase": "input_output_fuzzy_clustering"}, {"score": 0.004373537527118041, "phrase": "basis_function_centers"}, {"score": 0.004244040105917499, "phrase": "clustering_process"}, {"score": 0.003948613642680196, "phrase": "input_space_fuzzy_partition"}, {"score": 0.0038663716354483176, "phrase": "objective_function"}, {"score": 0.003729335910488339, "phrase": "input_training_samples"}, {"score": 0.0035328029694928296, "phrase": "upper_bound"}, {"score": 0.003448801009772625, "phrase": "resulting_solution"}, {"score": 0.003407549468745519, "phrase": "minimal_square_error"}, {"score": 0.003286722111554471, "phrase": "input_data"}, {"score": 0.0032085525502105836, "phrase": "aforementioned_objective_function"}, {"score": 0.003076189012372961, "phrase": "proposed_methodology"}, {"score": 0.003030247482854539, "phrase": "first_step"}, {"score": 0.0030030115662983956, "phrase": "independent_fuzzy_clustering"}, {"score": 0.002922759536495576, "phrase": "cluster_centers"}, {"score": 0.0028877818105020434, "phrase": "second_step"}, {"score": 0.0027354763093906547, "phrase": "input_output_space"}, {"score": 0.002702733794508487, "phrase": "third_step"}, {"score": 0.0025989960809479104, "phrase": "optimal_values"}, {"score": 0.0024544817577464816, "phrase": "information_flow"}, {"score": 0.0023249757987087055, "phrase": "input_space_partition"}, {"score": 0.002222277797157857, "phrase": "hidden_node_increases"}, {"score": 0.0021693692831601745, "phrase": "proposed_method"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Radial basis function neural networks", " Input-output fuzzy clustering", " Fitness function", " Particle swarm optimization"], "paper_abstract": "This paper elaborates on the use of particle swarm optimization in training Gaussian type radial basis function neural networks under the umbrella of input output fuzzy clustering. The problem being investigated concerns the selection of basis function centers that contribute most in network's performance, given that the clustering process in the input space is guided by the clustering in the output space. To accomplish this task, we quantify the effect of the input space fuzzy partition upon network's square error in terms of an objective function that describes the ability of the partition to accurately reconstruct the input training samples. We, then, theoretically prove that the minimization of the above function acts to minimize an upper bound of the network's square error. Therefore, the resulting solution corresponds to a minimal square error, while at the same time it maintains the structure of the input data. Due to the peculiarity of the aforementioned objective function, we treat it as the fitness function used by the particle swarm optimizer. The proposed methodology encompasses three design steps. The first step implements an independent fuzzy clustering in the output space to obtain a set of cluster centers. In the second step, unlike other approaches, the above centers are directly involved in the estimation of the membership degrees in the input output space. In the third step, these membership degrees are used by the particle swarm optimizer in order to obtain optimal values for the centers. To summarize, the novelty of our contribution lies in: (a) the way we handle the information flow from output to input space, and (b) the way we handle the effect of the input space partition upon network's performance. The experiments indicate that the fitness function decreases as the number of hidden node increases. Finally, a comparison between the proposed method and other sophisticated approaches shows its statistically significant superiority. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "On training RBF neural networks using input-output fuzzy clustering and particle swarm optimization", "paper_id": "WOS:000318328200004"}