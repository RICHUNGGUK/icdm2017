{"auto_keywords": [{"score": 0.04924266395891677, "phrase": "kmclib"}, {"score": 0.014907081179651982, "phrase": "true_random_numbers"}, {"score": 0.013599524228327074, "phrase": "mac"}, {"score": 0.009415498455444845, "phrase": "python"}, {"score": 0.009180675548568554, "phrase": "random_device"}, {"score": 0.00864396816432575, "phrase": "previous_version"}, {"score": 0.00715236860146636, "phrase": "kmclib_general_framework"}, {"score": 0.006979109670510081, "phrase": "build_system"}, {"score": 0.00668687426427289, "phrase": "operating_systems"}, {"score": 0.006480396498087393, "phrase": "distributed_program"}, {"score": 0.006465539470322006, "phrase": "test_data"}, {"score": 0.0058801796538290995, "phrase": "input_parameters"}, {"score": 0.005052818643774294, "phrase": "time_scales"}, {"score": 0.0048075761666832575, "phrase": "kinetic_monte-carlo_simulations"}, {"score": 0.00478552056483405, "phrase": "revised_version"}, {"score": 0.004738078275822989, "phrase": "random_numbers"}, {"score": 0.0046481548477597945, "phrase": "random_number_generators"}, {"score": 0.0046162001884171525, "phrase": "ranlux"}, {"score": 0.0046055969972566176, "phrase": "'minimal-standard'_prng"}, {"score": 0.004532051956286109, "phrase": "technical_updates"}, {"score": 0.004507797669531545, "phrase": "extended_range"}, {"score": 0.00447379050158345, "phrase": "program"}, {"score": 0.004425616928975799, "phrase": "cpc_program_library"}, {"score": 0.00441883624011048, "phrase": "queen's_university"}, {"score": 0.004412066003466908, "phrase": "belfast"}, {"score": 0.004405305875626854, "phrase": "n._ireland"}, {"score": 0.004391816758017146, "phrase": "gnu_general_public_license"}, {"score": 0.004275527476262021, "phrase": "tar.gz_programming_language"}, {"score": 0.004200783411512944, "phrase": "operating_system"}, {"score": 0.004181501020990903, "phrase": "ubuntu"}, {"score": 0.004039659073504957, "phrase": "mpi."}, {"score": 0.003981251244426935, "phrase": "ram"}, {"score": 0.003896651460337573, "phrase": "comput"}, {"score": 0.0038918014177145095, "phrase": "phys"}, {"score": 0.0038847056901665836, "phrase": "comm"}, {"score": 0.0038461381557938637, "phrase": "external_routines"}, {"score": 0.0038314143652848, "phrase": "serial_version"}, {"score": 0.0038196757708487297, "phrase": "external_libraries"}, {"score": 0.003767293890678344, "phrase": "parallel_version"}, {"score": 0.0037615180375561805, "phrase": "mpi_implementation"}, {"score": 0.003744243356156106, "phrase": "e.g._mpich"}, {"score": 0.003659048346710559, "phrase": "backend_module"}, {"score": 0.0036506367099966124, "phrase": "sphinx"}, {"score": 0.003608861282466919, "phrase": "cppunit"}, {"score": 0.003581276555590646, "phrase": "kmclib_distribution"}, {"score": 0.0035511759543002683, "phrase": "new_version"}, {"score": 0.003534863836335002, "phrase": "yes_nature"}, {"score": 0.0034997766010404093, "phrase": "great_challenge"}, {"score": 0.0034890505116128606, "phrase": "computational_materials"}, {"score": 0.003470358620464986, "phrase": "rare-events_dynamics"}, {"score": 0.0034438288948208324, "phrase": "typical_atomic_vibrational_frequencies"}, {"score": 0.0034385472526299614, "phrase": "straight-forward_propagation"}, {"score": 0.0033835750400954333, "phrase": "slow_dynamics"}, {"score": 0.003355130523298129, "phrase": "kinetic_monte_carlo"}, {"score": 0.0033345934071103084, "phrase": "slow_dynamics_problem"}, {"score": 0.003314181582800082, "phrase": "fast_vibrational_motion"}, {"score": 0.003306559295382181, "phrase": "slowly_evolving_rare-events_dynamics"}, {"score": 0.003266201217790818, "phrase": "fully_equilibrated_local_energy_minima"}, {"score": 0.003258688919639471, "phrase": "slow-dynamics_potential_energy_surface"}, {"score": 0.0032189132350239013, "phrase": "random_number_generation_options"}, {"score": 0.0032016639006812826, "phrase": "central_part"}, {"score": 0.0031942995633532953, "phrase": "kmc_algorithm"}, {"score": 0.0031869521110174113, "phrase": "new_release"}, {"score": 0.0031771817069756684, "phrase": "extended_support"}, {"score": 0.003172307707547869, "phrase": "additional_compilers"}, {"score": 0.003150466780962537, "phrase": "installation_procedure"}, {"score": 0.0031432198338316015, "phrase": "widely_used_platforms"}, {"score": 0.003038820770484517, "phrase": "well-defined_pseudo"}, {"score": 0.0030178961017306646, "phrase": "standard_library_routines"}, {"score": 0.0030086424171309445, "phrase": "custom_implementations"}, {"score": 0.0030017207229983385, "phrase": "obvious_advantage"}, {"score": 0.002985631781749091, "phrase": "guaranteed_support"}, {"score": 0.002978762867804666, "phrase": "longer_time"}, {"score": 0.002937879003671346, "phrase": "pseudo-random_numbers"}, {"score": 0.002884236207197403, "phrase": "mersenne-twister_implementation"}, {"score": 0.002695768552609587, "phrase": "input_flag"}, {"score": 0.002664891428587306, "phrase": "major_updates"}, {"score": 0.0026242699269026204, "phrase": "great_impact"}, {"score": 0.002600194073758015, "phrase": "intel_compiler"}, {"score": 0.002590227605442505, "phrase": "super_computer_clusters"}, {"score": 0.0025409639091476363, "phrase": "mac_platform"}, {"score": 0.002535115422089855, "phrase": "smooth_installation"}, {"score": 0.0025137856138000014, "phrase": "make_system"}, {"score": 0.002498385550735899, "phrase": "clang_compiler"}, {"score": 0.0024811729417312197, "phrase": "gee_compiler"}, {"score": 0.002477373353261721, "phrase": "linux"}, {"score": 0.0024697636375574017, "phrase": "reference_manual"}, {"score": 0.0024339783012484032, "phrase": "lattice_kmc_method"}, {"score": 0.0023950275815082297, "phrase": "original_paper"}, {"score": 0.0023785253585257345, "phrase": "unusual_features"}, {"score": 0.0023530804164299006, "phrase": "user-defined_functionality"}, {"score": 0.0023207641268970045, "phrase": "site-specific_elementary_process_rates"}, {"score": 0.0023100907305651855, "phrase": "long-range_interactions"}, {"score": 0.002306543826130521, "phrase": "complex_geometrical_features"}, {"score": 0.002288890638442194, "phrase": "on-the-fly_analysis"}, {"score": 0.0022853762099850706, "phrase": "user-defined_analysis_modules"}, {"score": 0.002273118054066057, "phrase": "individual_particle_movements"}, {"score": 0.0022644024124076297, "phrase": "mean_square_displacement_analysis"}, {"score": 0.002252291649759556, "phrase": "ref"}, {"score": 0.002228159337919262, "phrase": "diffusion_processes"}, {"score": 0.002169035922199916, "phrase": "additional_comments"}, {"score": 0.002164041637266297, "phrase": "full_documentation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["KMC", " Kinetic", " Monte Carlo", " Diffusion", " Simulation", " Random device", " PRNG", " True random numbers"], "paper_abstract": "We here present a revised version, v1.1, of the KMCLib general framework for kinetic Monte-Carlo (KMC) simulations. The generation of random numbers in KMCLib now relies on the C++11 standard library implementation, and support has been added for the user to choose from a set of C++11 implemented random number generators. The Mersenne-twister, the 24 and 48 bit RANLUX and a 'minimal-standard' PRNG are supported. We have also included the possibility to use true random numbers via the C++11 std::random_device generator. This release also includes technical updates to support the use of an extended range of operating systems and compilers. New version program summary Program title: KMCLib v1.1 Catalogue identifier: AESZ_v1_1 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AESZ_v1_1.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: GNU General Public License, version 3 No. of lines in distributed program, including test data, etc.: 49,398 No. of bytes in distributed program, including test data, etc.: 1,536,855 Distribution format: tar.gz Programming language: Python and C++. Computer: Any computer that can run a C++11 compatible C++ compiler and a Python 2.7 interpreter. Operating system: Tested on Ubuntu 14.4 LTS, Ubuntu 12.4 LTS, CentOS 6.6, Mac OSX 10.10.3, Mac OSX 10.9.5 and Mac OSX 10.8.2 but should run on any system that can have a C++11 compatible C++ compiler and a Python 2.7 interpreter. Has the code been vectorized or parallelized?: Yes, with MPI. From one to hundreds of processors may be used depending on the type of input and simulation. RAM: From a few megabytes to several gigabytes depending on input parameters and the size of the system to simulate. Catalogue identifier of previous version: AESZ_v1_0 Journal reference of previous version: Comput. Phys. Comm. 185 (2014) 2340 Classification: 4.13, 16.13. External routines: To run the serial version of KMCLib no external libraries are needed other than the standard C++ runtime library and a Python 2.7 interpreter with support for numpy. For running the parallel version an MPI implementation is needed, such as e.g. MPICH from http://www.mpich.org or Open-MPI from http://www.open-mpi.org. SWIG (obtainable from http://www.swig.org/) and CMake (obtainable from http://www.cmake.org/) are both needed for building the backend module, while Sphinx (obtainable from http://sphinx-doc.org) is needed for building the documentation. CPPUNIT (obtainable from http://sourceforge.net/projects/cppuniti, also included in the KMCLib distribution) is needed for building the C++ unit tests Does the new version supersede the previous version?: Yes Nature of problem: Atomic scale simulation of slowly evolving dynamics is a great challenge in many areas of computational materials science and catalysis. When the rare-events dynamics of interest is orders of magnitude slower than the typical atomic vibrational frequencies a straight-forward propagation of the equations of motions for the particles in the simulation cannot reach time scales of relevance for modeling the slow dynamics. Solution method: KMCLib provides an implementation of the kinetic Monte Carlo (KMC) method that solves the slow dynamics problem by utilizing the separation of time scales between fast vibrational motion and the slowly evolving rare-events dynamics. Only the latter is treated explicitly and the system is simulated as jumping between fully equilibrated local energy minima on the slow-dynamics potential energy surface. Reasons for new version: The v1.1 revision increases the reliability and flexibility of the random number generation options in KMCLib, which is a central part of the KMC algorithm. The new release also comes with extended support for additional compilers and updates to the build system to simplify the installation procedure on some widely used platforms. Summary of revisions: Enough time has passed since the introduction of the < random > header in the C++ standard runtime library with the C++11 standard, that most installed compilers today have support to enable the use of C++11 specific language features in C+++. The < random > standard header comes with a set of well-defined pseudo random number generators (PRNG). Using standard library routines in favor of custom implementations has the obvious advantage of being more reliable and with guaranteed support over a longer time. From the v1.1 revision, KMCLib therefore relies on the C++11 standard library < random > header to produce pseudo-random numbers. This also makes it easier to enable support for several different PRNG:s for the user to choose from. From previously only supporting a Mersenne-twister implementation, KMCLib now has support for using the Mersenne-twister [1], the 24 and 48-bit RANLUX [2] generators, as well as a 'minimal-standard' PRNG [3]. For machines with a random device installed, KMCLib v1.1 can run simulations with true random numbers, This is enabled by using the std::random_device generator in C++. If the random device is properly installed the true random numbers are available to KMCLib out of the box and the user only needs to specify the use of the random device with an input flag in the same way as she chooses any of the available PRNG:s. The v1.1 revision includes major updates to the build system. The build system has no effect on the outcome of the simulations, but has a great impact on how easy it is to install the program. The Intel compiler is widely available on super computer clusters and support for this compiler widely extends the number of systems where KMCLib can be easily setup and run. The popularity of the Mac platform also makes smooth installation and compilation with clang desirable. With version v1.1 the make system for KMClib now includes support for the clang compiler on Mac and support for both the Intel compiler and the gee compiler on Linux. See the reference manual for details of which versions of the operating systems and compilers have been tested. Restrictions: KMCLib implements the lattice KMC method and is as such, restricted to geometries that can be expressed on a grid in space. See the original paper describing KMCLib [4] for further details. Unusual features: KMCLib has been designed to be easily customized, to allow for user-defined functionality and integration with other codes. The user can define her own on-the-fly rate calculator via a Python API, so that site-specific elementary process rates, or rates depending on long-range interactions or complex geometrical features can easily be included. KMCLib also allows for on-the-fly analysis with user-defined analysis modules. KMCLib can keep track of individual particle movements and includes tools for mean square displacement analysis based on the algorithm described in Ref. [5], and is therefore particularly well suited for studying diffusion processes at surfaces and in solids. With the release of v1.1 KMCLib now supports several different pseudo random number generators, but can also, if a random device is installed on the machine, use true random numbers via the std::random_device generator. Additional comments: The full documentation of the program is distributed with the code and can also be found online at http://leetmaa.github.io/KMCLibimanual-v1.1/. Running time: From a few seconds to several days depending on the type of simulation and input parameters. (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "KMCLib 1.1: Extended random number support and technical updates to the KMCLib general framework for kinetic Monte-Carlo simulations", "paper_id": "WOS:000362602900054"}