{"auto_keywords": [{"score": 0.04958720442967608, "phrase": "distributed_applications"}, {"score": 0.00481495049065317, "phrase": "bloom_filters"}, {"score": 0.004692227830462433, "phrase": "bloom_filter"}, {"score": 0.004620093797504386, "phrase": "space-efficient_data_structure"}, {"score": 0.004410248125081398, "phrase": "data_exchange"}, {"score": 0.004081385289516914, "phrase": "shared_data"}, {"score": 0.0033883824438527316, "phrase": "carefully_crafted_bloom_filter"}, {"score": 0.0031354779851351287, "phrase": "concatenated_bloom_filter"}, {"score": 0.003024007644200853, "phrase": "bloom"}, {"score": 0.0028715299874549245, "phrase": "shared_information"}, {"score": 0.0028127163745564777, "phrase": "application_data"}, {"score": 0.002755104031926742, "phrase": "space_efficiency"}, {"score": 0.002670884656785558, "phrase": "single_large_filter"}, {"score": 0.0026297518114002318, "phrase": "cbf"}, {"score": 0.0026026666736474404, "phrase": "small_subfilters"}, {"score": 0.0024333239726872604, "phrase": "analytical_results"}, {"score": 0.0023225701080913388, "phrase": "different_scenarios"}, {"score": 0.002194011800331242, "phrase": "ip_traceback_application"}, {"score": 0.0021714122348552747, "phrase": "simulation_results"}, {"score": 0.0021049977753042253, "phrase": "proposed_mechanism"}], "paper_keywords": ["Bloom filters", " distributed applications", " security", " IP traceback"], "paper_abstract": "The Bloom filter is a space-efficient data structure often employed in distributed applications to save bandwidth during data exchange. These savings, however, come at the cost of errors in the shared data, which are usually assumed low enough to not disrupt the application. We argue that this assumption does not hold in a more hostile environment, such as the Internet, where attackers can send a carefully crafted Bloom filter in order to break the application. In this paper, we propose the concatenated Bloom filter (CBF), a robust Bloom filter that prevents the attacker from interfering on the shared information, protecting the application data while still providing space efficiency. Instead of using a single large filter, the CBF concatenates small subfilters to improve both the filter robustness and capacity. We propose three CBF variants and provide analytical results that show the efficacy of the CBF for different scenarios. We also evaluate the performance of our filter in an IP traceback application and simulation results confirm the effectiveness of the proposed mechanism in the face of attackers.", "paper_title": "Capacity and Robustness Tradeoffs in Bloom Filters for Distributed Applications", "paper_id": "WOS:000310382800004"}