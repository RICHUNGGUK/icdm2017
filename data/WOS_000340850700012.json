{"auto_keywords": [{"score": 0.04859258959287385, "phrase": "fbd"}, {"score": 0.03698229442957508, "phrase": "fpcctestgen"}, {"score": 0.011977803526916776, "phrase": "fpcc"}, {"score": 0.00481495049065317, "phrase": "structural_testing"}, {"score": 0.0047846807459660376, "phrase": "function_block_diagrams"}, {"score": 0.004578030096508602, "phrase": "safety-critical_applications"}, {"score": 0.004534917050845832, "phrase": "coverage_issues"}, {"score": 0.004217537792708984, "phrase": "model_level"}, {"score": 0.0041384457437123635, "phrase": "new_data-flow_test_coverage_criterion"}, {"score": 0.004112411350177274, "phrase": "fb-path_complete_condition_test_coverage"}, {"score": 0.003997260449163666, "phrase": "fbd_structures"}, {"score": 0.003947118540355604, "phrase": "function_mutation_errors"}, {"score": 0.0038853212888610234, "phrase": "fpcc_scheme"}, {"score": 0.003717368939083015, "phrase": "fpcc-complied_test_cases"}, {"score": 0.0036823310827576628, "phrase": "automatic_test_suite_generator"}, {"score": 0.00353426342004404, "phrase": "automatic_test_case_generator"}, {"score": 0.003360146665246448, "phrase": "fpcc_approach"}, {"score": 0.0031346115554600003, "phrase": "supporting_infrastructure"}, {"score": 0.00291494666099687, "phrase": "plcopen_xml_format"}, {"score": 0.0028511898481970595, "phrase": "fbd_components"}, {"score": 0.0028332303659245085, "phrase": "corresponding_uppaal_model_components"}, {"score": 0.002815383690003621, "phrase": "aforementioned_building_blocks"}, {"score": 0.0027451110240633144, "phrase": "fpcc_characteristics"}, {"score": 0.0027106334164712057, "phrase": "uppaal_model_checker"}, {"score": 0.0026513335370556474, "phrase": "verification_traces"}, {"score": 0.002601535991493226, "phrase": "fpcc-complied_test_suite"}, {"score": 0.002560751416355291, "phrase": "safety_injection_system"}, {"score": 0.002520604609793834, "phrase": "case_study"}, {"score": 0.0025047222344966678, "phrase": "preliminary_results"}, {"score": 0.002473256335879102, "phrase": "generated_test_suite"}, {"score": 0.002449915958738505, "phrase": "highest_fpcc_percentage"}, {"score": 0.002411502601063177, "phrase": "test_cases"}, {"score": 0.002373690110881497, "phrase": "automatic_test_case"}, {"score": 0.0022709326810964386, "phrase": "new_test_coverage_criterion"}, {"score": 0.0021726139494880653, "phrase": "suite_generation"}, {"score": 0.0021453112313233554, "phrase": "data-flow_programs"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["FBD", " Test coverage criteria", " FPCC", " Automatic test case generation", " FPCCTestGen"], "paper_abstract": "Context: Function Block Diagram (FBD) is increasingly used in safety-critical applications. Test coverage issues for FBDs are frequently raised by regulators and users. However, there is little work at this aspect on testing FBD at model level. Our previous study has designed a new data-flow test coverage criterion, FB-Path Complete Condition Test Coverage (FPCC), that can directly test FBD structures and effectively detect function mutation errors. Nevertheless, because FPCC scheme involves several data-flow concepts and thus it is somewhat complicated to comprehend and to generate FPCC-complied test cases. An automatic test suite generator for FPCC is highly desirable. Objective: This study designs an automatic test case generator, FPCCTestGen, for FPCC so as to enhance the practicability and acceptance of the FPCC approach. Method: First, a supporting infrastructure for performing automatic FBD-to-UPPAAL-for-FPCC transformation is designed. The supporting infrastructure includes templates, declarations, and functions as building blocks for transformation. Then, for each input FBD, represented in PLCopen XML format, FPCCTestGen performs parsing and converts FBD components into corresponding UPPAAL model components using aforementioned building blocks. After that, queries related to FPCC characteristics are submitted to UPPAAL model checker for verification. Finally, the verification traces are analyzed to obtain a FPCC-complied test suite. Results: A safety injection system is used as a case study. Preliminary results show that the generated test suite achieves the highest FPCC percentage with a near optimal number of test cases. Conclusion: This automatic test case generation tool is effective and thus, can promote the use of the new test coverage criterion. Methodology used in FPCCTestGen is generic and can be applied to test suite generation for other test criteria on data-flow programs. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Automatic test case generation for structural testing of function block diagrams", "paper_id": "WOS:000340850700012"}