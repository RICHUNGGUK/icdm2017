{"auto_keywords": [{"score": 0.0390829115805425, "phrase": "model-driven_development_process"}, {"score": 0.00481495049065317, "phrase": "component-based_model-driven_design"}, {"score": 0.004361163586439822, "phrase": "practical_software_engineering"}, {"score": 0.004231699728933577, "phrase": "uml-like_modelling_approach"}, {"score": 0.004088421020408183, "phrase": "different_notations"}, {"score": 0.004053362743156545, "phrase": "component-based_and_object-oriented_design_techniques"}, {"score": 0.0038825121288253435, "phrase": "correctness_concerns"}, {"score": 0.0038492126993451337, "phrase": "different_aspects"}, {"score": 0.003426556090707852, "phrase": "software_system"}, {"score": 0.0031982609080278643, "phrase": "modelling_notations"}, {"score": 0.00306334226516593, "phrase": "tool_support"}, {"score": 0.002985130390111069, "phrase": "sophisticated_checkers"}, {"score": 0.0025892330566358503, "phrase": "common_component_modelling_example"}, {"score": 0.0024799423362011582, "phrase": "formal_techniques"}, {"score": 0.002448061472257196, "phrase": "rcos"}, {"score": 0.002294686545883412, "phrase": "computer-aided_software_engineering"}, {"score": 0.002226430168622392, "phrase": "formally_supported_checking"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Formal methods", " Multi-view modelling", " rCOS", " Software design process", " Tool design", " UML"], "paper_abstract": "Modern software development is complex as it has to deal with many different and yet related aspects of applications. In practical software engineering this is now handled by a UML-like modelling approach in which different aspects are modelled by different notations. Component-based and object-oriented design techniques are found effective in the support of separation of correctness concerns of different aspects. These techniques are practised in a model-driven development process in which models are constructed in each phase of the development. To ensure the correctness of the software system developed, all models constructed in each phase are verifiable. This requires that the modelling notations are formally defined and related in order to have tool support developed for the integration of sophisticated checkers, generators and transformations. This paper summarises our research on the method of Refinement of Component and Object Systems (rCOS) and illustrates it with experiences from the work on the Common Component Modelling Example (CoCoME). This gives evidence that the formal techniques developed in rCOS can be integrated into a model-driven development process and shows where it may be integrated in computer-aided software engineering (CASE) tools for adding formally supported checking, transformation and generation facilities. (C) 2009 Published by Elsevier B.V.", "paper_title": "Refinement and verification in component-based model-driven design", "paper_id": "WOS:000263616600002"}