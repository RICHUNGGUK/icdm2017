{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "paradigm"}, {"score": 0.037059501874180514, "phrase": "mcpal"}, {"score": 0.004700468701207975, "phrase": "coordination_language"}, {"score": 0.004515655183335171, "phrase": "flexible_and_orthogonal_modeling"}, {"score": 0.004303404058571052, "phrase": "architectural_level"}, {"score": 0.004101088357088207, "phrase": "dynamic_system_adaptation"}, {"score": 0.0037847308929559163, "phrase": "special_evolution_component"}, {"score": 0.003694652993546994, "phrase": "evolution_coordination_scheme"}, {"score": 0.0033283624928018146, "phrase": "just-in-time_strategy"}, {"score": 0.0029268619875960715, "phrase": "dynamic_consistency"}, {"score": 0.002374855916752648, "phrase": "simple_but_generic_example"}, {"score": 0.0021049977753042253, "phrase": "run-time_adaptation"}], "paper_keywords": ["evolution on-the-fly", " dynamic consistency", " self-adaptation", " migration", " software architecture", " Paradigm"], "paper_abstract": "The coordination language Paradigm allows for a flexible and orthogonal modeling of interprocess relationships at the architectural level. It is shown how dynamic system adaptation can be captured in Paradigm by means of a special evolution component and associated evolution coordination scheme. The component, called McPal, drives the migration following a just-in-time strategy in its own view of the system, independent of other coordination relations. During migration, dynamic consistency between components remains assured, even for mixtures of old, intermediate and new behaviour. A restricted scheme of McPal that supports various forms of self-adaptation is presented. A simple but generic example of a scheduler and workers illustrates on-the-fly updating of coordination and run-time adaptation of scheduling policies using McPal.", "paper_title": "Evolution on-the-fly with Paradigm", "paper_id": "WOS:000239479100007"}