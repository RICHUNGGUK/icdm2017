{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "current_high-throughput_algorithms"}, {"score": 0.004621279527317074, "phrase": "mapreduce_framework"}, {"score": 0.004504193207111593, "phrase": "high-level_programming_model"}, {"score": 0.004367581653370531, "phrase": "parallel_programming"}, {"score": 0.0041703614123283165, "phrase": "alternative_approach"}, {"score": 0.004085579055228591, "phrase": "novel_strategy"}, {"score": 0.004002513373645485, "phrase": "current_and_emerging_architectures"}, {"score": 0.003802135020791801, "phrase": "high-throughput_pipelined_strategy"}, {"score": 0.00374399358035391, "phrase": "parallel_parsed_streams"}, {"score": 0.0035565113234273926, "phrase": "parallel_indexers"}, {"score": 0.0034663083890589235, "phrase": "extensive_tests"}, {"score": 0.003143849342926373, "phrase": "peak_throughput"}, {"score": 0.002971016979295967, "phrase": "single_node"}, {"score": 0.0025202582748972122, "phrase": "substantial_gain"}, {"score": 0.00248167018931442, "phrase": "best_known_mapreduce_algorithms"}, {"score": 0.0024186620196958867, "phrase": "single_node_performance"}, {"score": 0.0023694065215394593, "phrase": "mapreduce_algorithms"}, {"score": 0.0023331227492950422, "phrase": "large_clusters"}], "paper_keywords": ["Inverted files", " MapReduce", " multicore processors", " cluster", " I/O throughput", " parallel algorithms", " parallel parsing and indexing", " pipeline"], "paper_abstract": "Current high-throughput algorithms for constructing inverted files all follow the MapReduce framework, which presents a high-level programming model that hides the complexities of parallel programming. In this paper, we take an alternative approach and develop a novel strategy that exploits the current and emerging architectures of multicore processors. Our algorithm is based on a high-throughput pipelined strategy that produces parallel parsed streams, which are immediately consumed at the same rate by parallel indexers. We have performed extensive tests of our algorithm on a cluster of 32 nodes, and were able to achieve a throughput close to the peak throughput of the I/O system: a throughput of 280 MB/s on a single node and a throughput that ranges between 5.15 GB/s (1 Gb/s Ethernet interconnect) and 6.12 GB/s (10 Gb/s InfiniBand interconnect) on a cluster with 32 nodes for processing the ClueWeb09 data set. Such a performance represents a substantial gain over the best known MapReduce algorithms even when comparing the single node performance of our algorithm to MapReduce algorithms running on large clusters. Our results shed a light on the extent of the performance cost that may be incurred by using the simpler, higher level MapReduce programming model for large scale applications.", "paper_title": "An Optimized High-Throughput Strategy for Constructing Inverted Files", "paper_id": "WOS:000308998100004"}