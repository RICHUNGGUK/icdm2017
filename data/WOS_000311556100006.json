{"auto_keywords": [{"score": 0.044505398962904355, "phrase": "timing_restrictions"}, {"score": 0.024030152279870175, "phrase": "manual_identification"}, {"score": 0.011983408798545966, "phrase": "active_functions"}, {"score": 0.011768288532631965, "phrase": "cfs"}, {"score": 0.00481495049065317, "phrase": "dynamic_software_update_safety_using_systematic_testing"}, {"score": 0.0046848710555075146, "phrase": "dsu"}, {"score": 0.004642292792558686, "phrase": "systems_patch_programs"}, {"score": 0.004354841111644036, "phrase": "updating_process"}, {"score": 0.0040111533608228195, "phrase": "open_question"}, {"score": 0.0039027036493682887, "phrase": "first_significant_empirical_evaluation"}, {"score": 0.0036275736378775757, "phrase": "con-freeness_safety"}, {"score": 0.0032358709481309913, "phrase": "event-handling_loops"}, {"score": 0.0030076088903023034, "phrase": "dsu_patches"}, {"score": 0.002953097497434808, "phrase": "openssh"}, {"score": 0.002782647772219627, "phrase": "distinct_update_point"}, {"score": 0.002682669289913153, "phrase": "system_tests"}, {"score": 0.002203570941628287, "phrase": "minimal_delay"}, {"score": 0.0021049977753042253, "phrase": "least_developer_effort"}], "paper_keywords": ["Dynamic software updating (DSU)", " hot-swapping", " software reliability", " testing", " program tracing"], "paper_abstract": "Dynamic software updating (DSU) systems patch programs on the fly without incurring downtime. To avoid failures due to the updating process itself, many DSU systems employ timing restrictions. However, timing restrictions are theoretically imperfect, and their practical effectiveness is an open question. This paper presents the first significant empirical evaluation of three popular timing restrictions: activeness safety (AS), which prevents updates to active functions, con-freeness safety (CFS), which only allows modifications to active functions when doing so is provably type-safe, and manual identification of the event-handling loops during which an update may occur. We evaluated these timing restrictions using a series of DSU patches to three programs: OpenSSH, vsftpd, and ngIRCd. We systematically applied updates at each distinct update point reached during execution of a suite of system tests for these programs to determine which updates pass and which fail. We found that all three timing restrictions prevented most failures, but only manual identification allowed none. Further, although CFS and AS allowed many more update points, manual identification still supported updates with minimal delay. Finally, we found that manual identification required the least developer effort. Overall, we conclude that manual identification is most effective.", "paper_title": "Evaluating Dynamic Software Update Safety Using Systematic Testing", "paper_id": "WOS:000311556100006"}