{"auto_keywords": [{"score": 0.041737689026098784, "phrase": "mutant_operators"}, {"score": 0.00481495049065317, "phrase": "mutant_description"}, {"score": 0.004775335634705251, "phrase": "mutation_testing"}, {"score": 0.004601045179623499, "phrase": "test_case"}, {"score": 0.0043066860455264, "phrase": "alternative_artifacts"}, {"score": 0.004253618550301311, "phrase": "so-called_mutants"}, {"score": 0.0038838500580958744, "phrase": "simple_syntactical_differences"}, {"score": 0.003757480190200645, "phrase": "typical_errors"}, {"score": 0.003680587852807675, "phrase": "software_development"}, {"score": 0.0035755653799043, "phrase": "fault_model"}, {"score": 0.0031845067058084583, "phrase": "mutant_generation"}, {"score": 0.003042812778470762, "phrase": "operator_definition"}, {"score": 0.0030052718739167696, "phrase": "proposed_language"}, {"score": 0.002931569771634119, "phrase": "transformational_and_logical_programming_paradigms"}, {"score": 0.0028596699752849682, "phrase": "context-free_grammar_theory"}, {"score": 0.0028127163745564777, "phrase": "formal_framework"}, {"score": 0.002709862658377861, "phrase": "mudel_language"}, {"score": 0.0024842242921857705, "phrase": "executable_representation"}, {"score": 0.0024535580495414783, "phrase": "denotational_semantics"}, {"score": 0.0022492129111567824, "phrase": "mutant_generator_module"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Mutation testing", " Transformation languages", " Logical languages", " Software testing", " Prototyping"], "paper_abstract": "Mutation testing has been used to assess the quality of test case suites by analyzing the ability in distinguishing the artifact under testing from a set of alternative artifacts, the so-called mutants. The mutants are generated from the artifact under testing by applying a set of mutant operators, which produce artifacts with simple syntactical differences. The mutant operators are usually based on typical errors that occur during the software development and can be related to a fault model. In this paper, we propose a language-named MuDeL (MUtant DEfinition Language)-for the definition of mutant operators, aiming not only at automating the mutant generation, but also at providing precision and formality to the operator definition. The proposed language is based on concepts from transformational and logical programming paradigms, as well as from context-free grammar theory. Denotational semantics formal framework is employed to define the semantics of the MuDeL language. We also describe a system-named mudelgen-developed to support the use of this language. An executable representation of the denotational semantics of the language is used to check the correctness of the implementation of mudelgen. At the very end, a mutant generator module is produced, which can be incorporated into a specific mutant tool/environment. (C) 2008 Elsevier Ltd. All rights reserved.", "paper_title": "A transformational language for mutant description", "paper_id": "WOS:000265048100008"}