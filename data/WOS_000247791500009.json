{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "c_program"}, {"score": 0.004734448316824488, "phrase": "iterative_abstraction_refinement"}, {"score": 0.004463096299091981, "phrase": "leading_approach"}, {"score": 0.003999578057088828, "phrase": "c_programs"}, {"score": 0.003932654396285872, "phrase": "safety_specifications"}, {"score": 0.0038343546245999285, "phrase": "finite_state_machine"}, {"score": 0.0036759314172445934, "phrase": "unneeded_variables"}, {"score": 0.0036144035798673967, "phrase": "program_slicing_technique"}, {"score": 0.003407026489727146, "phrase": "initial_abstract_model"}, {"score": 0.003349984456443527, "phrase": "c_source_code"}, {"score": 0.0032938942910948066, "phrase": "predicate_abstraction"}, {"score": 0.00305285084207725, "phrase": "time_complexities"}, {"score": 0.0028775998963807324, "phrase": "candidate_predicates"}, {"score": 0.002735392281320413, "phrase": "abstract_model"}, {"score": 0.002556625752785268, "phrase": "counterexample-guided_abstraction_refinement_scheme"}, {"score": 0.0021408862709571615, "phrase": "concurrency_c_programs"}, {"score": 0.0021049977753042253, "phrase": "parallel_composition"}], "paper_keywords": ["program verification", " predicate abstraction", " model checking"], "paper_abstract": "Iterative abstraction refinement has emerged in the last few years as the leading approach to software model checking. We present an approach for automatically verifying C programs against safety specifications based on finite state machine. The approach eliminates unneeded variables using program slicing technique, and then automatically extracts an initial abstract model from C source code using predicate abstraction and theorem proving. In order to reduce time complexities, we partition the set of candidate predicates into subsets, and construct abstract model independently. On the basis of a counterexample-guided abstraction refinement scheme, the abstraction refines incrementally until the specification is either satisfied or refuted. Our methods can be extended to verifying concurrency C programs by parallel composition.", "paper_title": "Formal verification for C program", "paper_id": "WOS:000247791500009"}