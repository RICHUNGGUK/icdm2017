{"auto_keywords": [{"score": 0.03291869849510227, "phrase": "linear_constraints"}, {"score": 0.015719716506582538, "phrase": "petri_nets"}, {"score": 0.0047820521205253035, "phrase": "integer_programming"}, {"score": 0.004668659654386976, "phrase": "causal_partial_order_semantics"}, {"score": 0.004636776829436229, "phrase": "petri"}, {"score": 0.004465126965932753, "phrase": "state_space_explosion_problem"}, {"score": 0.004112303664150895, "phrase": "acyclic_petri_nets"}, {"score": 0.003932929770322298, "phrase": "reachable_markings"}, {"score": 0.003892655187180623, "phrase": "original_petri_nets"}, {"score": 0.0036469533983843755, "phrase": "mixed_integer_linear_programming_problem"}, {"score": 0.0034284557556382815, "phrase": "proposed_modifications"}, {"score": 0.003168147459025106, "phrase": "corresponding_integer_variables"}, {"score": 0.0030402538087882015, "phrase": "problem-specific_optimisation_rules"}, {"score": 0.002998776886514782, "phrase": "search_space"}, {"score": 0.0029175079344240227, "phrase": "mutual_exclusion"}, {"score": 0.0028287025225754337, "phrase": "contejean"}, {"score": 0.002809336972473929, "phrase": "devie's_algorithm"}, {"score": 0.002733187900351625, "phrase": "natural_numbers_domain"}, {"score": 0.002640889905429026, "phrase": "specific_properties"}, {"score": 0.0022938652373998337, "phrase": "memory_efficient_translation"}, {"score": 0.0022703369939978185, "phrase": "deadlock_detection_problem"}, {"score": 0.002247049536955399, "phrase": "safe_petri_net"}, {"score": 0.0022240004131756095, "phrase": "lp_problem"}, {"score": 0.0021786074765975006, "phrase": "on-the-fly_deadlock_detection_method"}, {"score": 0.002126816206925344, "phrase": "resulting_algorithms"}, {"score": 0.0021049977753042253, "phrase": "significant_speedups"}], "paper_keywords": ["verification", " Petri nets", " integer programming", " net unfoldings", " partial order techniques"], "paper_abstract": "Model checking based on the causal partial order semantics of Petri nets is an approach widely applied to cope with the state space explosion problem. One of the ways to exploit such a semantics is to consider (finite prefixes of) net unfoldings-themselves a class of acyclic Petri nets-which contain enough information, albeit implicit, to reason about the reachable markings of the original Petri nets. In [19], a verification technique for net unfoldings was proposed, in which deadlock detection was reduced to a mixed integer linear programming problem. In this paper, we present a further development of this approach. The essence of the proposed modifications is to transfer the information about causality and conflicts between the events involved in an unfolding, into a relationship between the corresponding integer variables in the system of linear constraints. Moreover, we present some problem-specific optimisation rules, reducing the search space. To solve other verification problems, such as mutual exclusion or marking reachability and coverability, we adopt Contejean and Devie's algorithm for solving systems of linear constraints over the natural numbers domain and refine it, by taking advantage of the specific properties of systems of linear constraints to be solved. Another contribution of this paper is a method of re-formulating some problems specified in terms of Petri nets as problems defined for their unfoldings. Using this method, we obtain a memory efficient translation of a deadlock detection problem for a safe Petri net into an LP problem. We also propose an on-the-fly deadlock detection method. Experimental results demonstrate that the resulting algorithms can achieve significant speedups.", "paper_title": "Verification of bounded Petri nets using integer programming", "paper_id": "WOS:000244688200003"}