{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "efficient_approaches"}, {"score": 0.0039841418890102925, "phrase": "formal_model"}, {"score": 0.0036553070575015344, "phrase": "subsequent_code_verification"}, {"score": 0.002680114113899346, "phrase": "general_model"}, {"score": 0.0025014259919355453, "phrase": "static_formal_semantics"}, {"score": 0.002255431275670053, "phrase": "high-level_intermediate_code"}], "paper_keywords": ["verification", " formal semantics", " programming languages"], "paper_abstract": "One of the efficient approaches to creating trusted software consists in the construction of a formal model that reflects its semantics and subsequent code verification with the use of this model. This work presents results of studies aimed at constructing a general model for description of static formal semantics of programs represented as a high-level intermediate code conforming to the ECMA-335 standard.", "paper_title": "ECMA-335 Static Formal Semantics", "paper_id": "WOS:000307389400002"}