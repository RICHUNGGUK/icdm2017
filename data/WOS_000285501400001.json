{"auto_keywords": [{"score": 0.04939912794117237, "phrase": "shared_resources"}, {"score": 0.03830596095410129, "phrase": "comprehensive_analysis"}, {"score": 0.036117819763909355, "phrase": "classification_scheme"}, {"score": 0.00481495049065317, "phrase": "multicore_systems"}, {"score": 0.004712726613162057, "phrase": "multicore_processors"}, {"score": 0.004662427600500598, "phrase": "unsolved_problem"}, {"score": 0.00462919213721188, "phrase": "existing_systems"}, {"score": 0.004596192494271827, "phrase": "significant_research_efforts"}, {"score": 0.004450568197899267, "phrase": "previous_solutions"}, {"score": 0.004387329529902255, "phrase": "hardware_techniques"}, {"score": 0.0043560464825349275, "phrase": "software_page_coloring"}, {"score": 0.0041283957965834875, "phrase": "shared_resource"}, {"score": 0.004055176557424983, "phrase": "thread_scheduling"}, {"score": 0.00398325070540449, "phrase": "attractive_tool"}, {"score": 0.0038846843242954935, "phrase": "extra_hardware"}, {"score": 0.003616252896285766, "phrase": "contention-mitigating_techniques"}, {"score": 0.0031335830806256777, "phrase": "newly_proposed_methodology"}, {"score": 0.003023307182674672, "phrase": "scheduling_algorithm"}, {"score": 0.0027741761880779535, "phrase": "cache_space"}, {"score": 0.002676514445417281, "phrase": "memory_controller"}, {"score": 0.0026573974912563014, "phrase": "memory_bus"}, {"score": 0.0026384167183586015, "phrase": "prefetching_hardware"}, {"score": 0.0025364139244227458, "phrase": "new_scheduling_algorithm"}, {"score": 0.002482443883144136, "phrase": "user_level"}, {"score": 0.002327310963701377, "phrase": "highest_impact"}, {"score": 0.0023106824101273554, "phrase": "contention-aware_scheduling_techniques"}, {"score": 0.0021354096283081317, "phrase": "individual_applications"}, {"score": 0.0021049977753042253, "phrase": "system_energy_consumption"}], "paper_keywords": ["Management", " Measurement", " Performance", " Multicore processors", " scheduling", " shared resource contention"], "paper_abstract": "Contention for shared resources on multicore processors remains an unsolved problem in existing systems despite significant research efforts dedicated to this problem in the past. Previous solutions focused primarily on hardware techniques and software page coloring to mitigate this problem. Our goal is to investigate how and to what extent contention for shared resource can be mitigated via thread scheduling. Scheduling is an attractive tool, because it does not require extra hardware and is relatively easy to integrate into the system. Our study is the first to provide a comprehensive analysis of contention-mitigating techniques that use only scheduling. The most difficult part of the problem is to find a classification scheme for threads, which would determine how they affect each other when competing for shared resources. We provide a comprehensive analysis of such classification schemes using a newly proposed methodology that enables to evaluate these schemes separately from the scheduling algorithm itself and to compare them to the optimal. As a result of this analysis we discovered a classification scheme that addresses not only contention for cache space, but contention for other shared resources, such as the memory controller, memory bus and prefetching hardware. To show the applicability of our analysis we design a new scheduling algorithm, which we prototype at user level, and demonstrate that it performs within 2% of the optimal. We also conclude that the highest impact of contention-aware scheduling techniques is not in improving performance of a workload as a whole but in improving quality of service or performance isolation for individual applications and in optimizing system energy consumption.", "paper_title": "Contention-Aware Scheduling on Multicore Systems", "paper_id": "WOS:000285501400001"}