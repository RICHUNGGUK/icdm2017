{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "security-design_models"}, {"score": 0.004275650416511604, "phrase": "design_specifications"}, {"score": 0.004231699728933577, "phrase": "distributed_systems"}, {"score": 0.003835972725191194, "phrase": "semantically_precise_and_meaningful_way"}, {"score": 0.0035681790580031998, "phrase": "possible_run-time_instances"}, {"score": 0.003441352119167824, "phrase": "security_policy"}, {"score": 0.0033190180867511605, "phrase": "uml's_object_constraint_language"}, {"score": 0.003201018846103988, "phrase": "declarative_aspects"}, {"score": 0.0031193028729331667, "phrase": "access-control_information"}, {"score": 0.0028273061946184645, "phrase": "dynamic_information"}, {"score": 0.002740885774408238, "phrase": "authorization_constraints"}, {"score": 0.002420762293555924, "phrase": "security-design_language"}, {"score": 0.0022053994402287925, "phrase": "non-trivial_security_properties"}, {"score": 0.0021049977753042253, "phrase": "securemova_tool"}], "paper_keywords": ["UML", " OCL", " SecureUML", " Security policies", " Formal analysis", " Metamodels"], "paper_abstract": "We have previously proposed SecureUML, an expressive UML-based language for constructing security-design models, which are models that combine design specifications for distributed systems with specifications of their security policies. Here, we show how to automate the analysis of such models in a semantically precise and meaningful way. In our approach, models are formalized together with scenarios that represent possible run-time instances. Queries about properties of the security policy modeled are expressed as formulas in UML's Object Constraint Language. The policy may include both declarative aspects, i.e., static access-control information such as the assignment of users and permissions to roles, and programmatic aspects, which depend on dynamic information, namely the satisfaction of authorization constraints in a given scenario. We show how Such properties can be evaluated, completely automatically, in the context of the metamodel of the security-design language. We demonstrate, through examples, that this approach can be used to formalize and check non-trivial security properties. The approach has been implemented in the SecureMOVA tool and all of the examples presented have been checked using this tool. (C) 2008 Elsevier B.V. All rights reserved.", "paper_title": "Automated analysis of security-design models", "paper_id": "WOS:000264648200002"}