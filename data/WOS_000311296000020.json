{"auto_keywords": [{"score": 0.03321325200261326, "phrase": "secret_values"}, {"score": 0.00481495049065317, "phrase": "covert_termination_and_timing_channels"}, {"score": 0.004752221133109136, "phrase": "concurrent_information_flow_systems"}, {"score": 0.004363846362238565, "phrase": "confidential_information"}, {"score": 0.004086744751579196, "phrase": "termination_covert_channel"}, {"score": 0.003954837422946628, "phrase": "sequential_programs"}, {"score": 0.003777261911983744, "phrase": "information_leakage"}, {"score": 0.003728000957725218, "phrase": "concurrent_settings"}, {"score": 0.003631390978147703, "phrase": "concurrent_termination"}, {"score": 0.003468287913322255, "phrase": "dynamic_information-flow_control_system"}, {"score": 0.002416589459425828, "phrase": "lower-labeled_contexts"}, {"score": 0.0022928018832993387, "phrase": "haskell_library"}, {"score": 0.0021896891011033105, "phrase": "web_server"}, {"score": 0.002146926767291475, "phrase": "information-flow_control"}, {"score": 0.0021049977753042253, "phrase": "untrusted_web_applications"}], "paper_keywords": ["Security", " Languages", " Design", " Monad", " Library", " Covert channels"], "paper_abstract": "When termination of a program is observable by an adversary, confidential information may be leaked by terminating accordingly. While this termination covert channel has limited bandwidth for sequential programs, it is a more dangerous source of information leakage in concurrent settings. We address concurrent termination and timing channels by presenting a dynamic information-flow control system that mitigates and eliminates these channels while allowing termination and timing to depend on secret values. Intuitively, we leverage concurrency by placing such potentially sensitive actions in separate threads. While termination and timing of these threads may expose secret values, our system requires any thread observing these properties to raise its information-flow label accordingly, preventing leaks to lower-labeled contexts. We implement this approach in a Haskell library and demonstrate its applicability by building a web server that uses information-flow control to restrict untrusted web applications.", "paper_title": "Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems", "paper_id": "WOS:000311296000020"}