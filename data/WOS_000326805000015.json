{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "multi-layer_optimization"}, {"score": 0.04165826455732129, "phrase": "semi-sparse_algorithm"}, {"score": 0.004569293780076254, "phrase": "basic_knowledge"}, {"score": 0.004336115760817672, "phrase": "recommender_systems"}, {"score": 0.004236321075918639, "phrase": "personalized_recommendation"}, {"score": 0.004187284711626886, "phrase": "online_interactions"}, {"score": 0.003792657064634775, "phrase": "pearson_correlation_coefficient"}, {"score": 0.00357806560856829, "phrase": "sparse_vectors"}, {"score": 0.0032786537599187125, "phrase": "over-reduplicated_accesses"}, {"score": 0.0031845067058084583, "phrase": "selected_sparse_vector"}, {"score": 0.002850682396853918, "phrase": "critical_resources"}, {"score": 0.0027049726303834064, "phrase": "pthreads"}, {"score": 0.0026580683046325253, "phrase": "multi-core_node"}, {"score": 0.0024640253074497114, "phrase": "shared_zip_file"}, {"score": 0.0022576249214220187, "phrase": "optimized_multi-layer_framework"}, {"score": 0.0021547078039384398, "phrase": "netflix"}, {"score": 0.0021297125076583075, "phrase": "movielens"}], "paper_keywords": ["Semi-sparse algorithm", " Reduce vector", " Thread pool", " Message passing interface", " Pearson correlation coefficient"], "paper_abstract": "Similarity among vectors is basic knowledge required to carry out recommendation and classification in recommender systems, which support personalized recommendation during online interactions. In this paper, we propose a Semi-sparse Algorithm based on Multi-layer Optimization to speed up the Pearson Correlation Coefficient, which is conventionally used in obtaining similarity among sparse vectors. In accelerating the batch of similarity-comparisons within one thread, the semi-sparse algorithm spares out over-reduplicated accesses and judgements on the selected sparse vector by making this vector dense locally. Moreover, a reduce-vector is proposed to restrict using locks on critical resources in the thread-pool, which is wrapped with Pthreads on a multi-core node to improve parallelism. Furthermore, among processes in our framework, a shared zip file is read to cut down messages within the Message Passing Interface package. Evaluation shows that the optimized multi-layer framework achieves a brilliant speedup on three benchmarks, Netflix, MovieLens and MovieLen1600.", "paper_title": "Semi-sparse algorithm based on multi-layer optimization for recommender system", "paper_id": "WOS:000326805000015"}