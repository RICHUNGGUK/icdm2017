{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "geospatial_analysis"}, {"score": 0.020460643740378124, "phrase": "gpu"}, {"score": 0.014734087605252905, "phrase": "idw_interpolation"}, {"score": 0.004981112863383085, "phrase": "cuda-based_implementations"}, {"score": 0.004736820055728928, "phrase": "cuda._inverse_distance_weighting"}, {"score": 0.00447316895126645, "phrase": "geographical_values"}, {"score": 0.004436716583179764, "phrase": "unknown_spatial_points"}, {"score": 0.004346874334971379, "phrase": "usually_scattered_set"}, {"score": 0.0043114466990006334, "phrase": "known_points"}, {"score": 0.0041555469216463855, "phrase": "spatial_raster"}, {"score": 0.003876226041373242, "phrase": "different_scales"}, {"score": 0.0038446194432899183, "phrase": "input_data"}, {"score": 0.003751331782523201, "phrase": "large-scale_domain"}, {"score": 0.0037055370870874484, "phrase": "mass_amount"}, {"score": 0.0035423376631308567, "phrase": "growing_popularity"}, {"score": 0.0034990853199511982, "phrase": "graphics_processing_unit"}, {"score": 0.003428164458163043, "phrase": "general_purpose_applications"}, {"score": 0.003304097742490624, "phrase": "gpu_based_parallel_computing_approach"}, {"score": 0.0031845067058084583, "phrase": "generic_methodological_framework"}, {"score": 0.0030818310926031024, "phrase": "compute_unified_device_architecture"}, {"score": 0.0029460197288680864, "phrase": "inherent_parallelism_degrees"}, {"score": 0.0027817658627604653, "phrase": "high_computational_throughput"}, {"score": 0.0027253444603752945, "phrase": "idw"}, {"score": 0.0025211567863488962, "phrase": "experimental_results"}, {"score": 0.0024099937116733227, "phrase": "dataset_dependent_speedups"}, {"score": 0.002303720729387236, "phrase": "viewshed_analysis"}, {"score": 0.002184137736856711, "phrase": "classical_sequential_versions"}, {"score": 0.0021049977753042253, "phrase": "visibility_judgment"}], "paper_keywords": ["General purpose GPU", " CUDA", " Geospatial analysis", " Parallelization"], "paper_abstract": "Inverse distance weighting (IDW) interpolation and viewshed are two popular algorithms for geospatial analysis. IDW interpolation assigns geographical values to unknown spatial points using values from a usually scattered set of known points, and viewshed identifies the cells in a spatial raster that can be seen by observers. Although the implementations of both algorithms are available for different scales of input data, the computation for a large-scale domain requires a mass amount of cycles, which limits their usage. Due to the growing popularity of the graphics processing unit (GPU) for general purpose applications, we aim to accelerate geospatial analysis via a GPU based parallel computing approach. In this paper, we propose a generic methodological framework for geospatial analysis based on GPU and its programming model Compute Unified Device Architecture (CUDA), and explore how to map the inherent parallelism degrees of IDW interpolation and viewshed to the framework, which gives rise to a high computational throughput. The CUDA-based implementations of IDW interpolation and viewshed indicate that the architecture of GPU is suitable for parallelizing the algorithms of geospatial analysis. Experimental results show that the CUDA-based implementations running on GPU can lead to dataset dependent speedups in the range of 13-33-fold for IDW interpolation and 28-925-fold for viewshed analysis. Their computation time can be reduced by an order of magnitude compared to classical sequential versions, without losing the accuracy of interpolation and visibility judgment.", "paper_title": "Accelerating geospatial analysis on GPUs using CUDA", "paper_id": "WOS:000298489000004"}