{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "automatic_parallelization"}, {"score": 0.0486868426803837, "phrase": "multicore_processors"}, {"score": 0.04714129033641774, "phrase": "parallel_programming"}, {"score": 0.03635537723701014, "phrase": "sequential_application"}, {"score": 0.004774530554776604, "phrase": "multicore_systems"}, {"score": 0.0047145329604366395, "phrase": "widespread_use"}, {"score": 0.0045581828632009795, "phrase": "significant_advances"}, {"score": 0.0041194351307673556, "phrase": "sequential_applications"}, {"score": 0.004067635935640407, "phrase": "ideal_solution"}, {"score": 0.003899612025233852, "phrase": "sequential_computers"}, {"score": 0.0037861265016041813, "phrase": "grand_challenge"}, {"score": 0.0037070855410818986, "phrase": "complex_program_analysis"}, {"score": 0.0035091888798162176, "phrase": "new_method"}, {"score": 0.003407026489727146, "phrase": "parallel_counterpart"}, {"score": 0.0033218213825698417, "phrase": "current_multicore_processors"}, {"score": 0.0032387402145603412, "phrase": "intermediate_representation"}, {"score": 0.0031577303835881964, "phrase": "domain-independent_kernel"}, {"score": 0.002939007076062123, "phrase": "implementation_details"}, {"score": 0.002853396755102163, "phrase": "parallel_version"}, {"score": 0.002805597755796506, "phrase": "source_code"}, {"score": 0.0027469703311742647, "phrase": "different_syntactic_variations"}, {"score": 0.0026222551419772867, "phrase": "complex_control"}, {"score": 0.0023296961971785357, "phrase": "benchmark_suite"}, {"score": 0.0023003498123420237, "phrase": "synthetic_codes"}, {"score": 0.0022713722522505592, "phrase": "common_domain-independent_kernels"}, {"score": 0.0022145052062614514, "phrase": "image_processing_routines"}, {"score": 0.0021866066626507028, "phrase": "full-scale_applications"}, {"score": 0.0021682224391325632, "phrase": "spec"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Automatic parallelization", " Parallelizing compiler", " Source-to-source compiler", " Compiler intermediate representation", " Domain-independent kernel", " Multicore processor"], "paper_abstract": "The widespread use of multicore processors is not a consequence of significant advances in parallel programming. In contrast, multicore processors arise due to the complexity of building power-efficient, high-clock-rate, single-core chips. Automatic parallelization of sequential applications is the ideal solution for making parallel programming as easy as writing programs for sequential computers. However, automatic parallelization remains a grand challenge due to its need for complex program analysis and the existence of unknowns during compilation. This paper proposes a new method for converting a sequential application into a parallel counterpart that can be executed on current multicore processors. It hinges on an intermediate representation based on the concept of domain-independent kernel (e.g., assignment, reduction, recurrence). Such kernel-centric view hides the complexity of the implementation details, enabling the construction of the parallel version even when the source code of the sequential application contains different syntactic variations of the computations (e.g., pointers, arrays, complex control flows). Experiments that evaluate the effectiveness and performance of our approach with respect to state-of-the-art compilers are also presented. The benchmark suite consists of synthetic codes that represent common domain-independent kernels, dense/sparse linear algebra and image processing routines, and full-scale applications from SPEC CPU2000. (C) 2013 Elsevier B.V. All rights reserved.", "paper_title": "A novel compiler support for automatic parallelization on multicore systems", "paper_id": "WOS:000324960800007"}