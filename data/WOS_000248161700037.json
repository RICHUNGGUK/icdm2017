{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "massively_parallel_particle-in-cell_codes"}, {"score": 0.004515967518891287, "phrase": "trusted_components"}, {"score": 0.004000741805312148, "phrase": "common_algorithms"}, {"score": 0.00388828234270598, "phrase": "particle_pushing"}, {"score": 0.0038332390893263844, "phrase": "deposit_subroutines"}, {"score": 0.003725470458263889, "phrase": "electromagnetic_fields"}, {"score": 0.0035949949979695063, "phrase": "parallel_data_management"}, {"score": 0.0032302647179383915, "phrase": "optimized_common_algorithms"}, {"score": 0.0029441472095672397, "phrase": "specialized_subroutines"}, {"score": 0.002664221051021009, "phrase": "low_level_subroutines"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["particle-in-cell codes", " parallel computing", " design patterns"], "paper_abstract": "The UCLA Parallel Particle-in-Cell (UPIC) Framework, is designed to provide trusted components for building a variety of parallel particle-in-cell (PIC) codes. It is based on the idea that most PIC codes share common algorithms, such as particle pushing and deposit subroutines, solvers for electromagnetic fields, as well as parallel data management, such as passing particles and fields between processors. The framework provides the optimized common algorithms, as well as various skeleton (template) main programs. The user provides specialized subroutines that are specific to his or her problem. It is based on Fortran95, but low level subroutines can easily be called from other languages. Codes based on the framework can run on as few as one processor to as many as 2000, and examples will be presented. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "UPIC: A framework for massively parallel particle-in-cell codes", "paper_id": "WOS:000248161700037"}