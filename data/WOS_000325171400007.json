{"auto_keywords": [{"score": 0.04248955968880871, "phrase": "information_leakage"}, {"score": 0.011965321767357229, "phrase": "test_coverage"}, {"score": 0.01062580663468041, "phrase": "service_compositions"}, {"score": 0.010090726484063483, "phrase": "event_interfaces"}, {"score": 0.00481495049065317, "phrase": "soa_testing"}, {"score": 0.004765173195920904, "phrase": "event_exposure"}, {"score": 0.004618893461411858, "phrase": "service-oriented_applications"}, {"score": 0.004184526032558792, "phrase": "business_interests"}, {"score": 0.004141238989360548, "phrase": "service_providers"}, {"score": 0.003993216345115755, "phrase": "implementation_details"}, {"score": 0.003598705020845104, "phrase": "service_composition"}, {"score": 0.003542976343910816, "phrase": "whole_and_design_test_cases"}, {"score": 0.0029224275921964724, "phrase": "service_consumers"}, {"score": 0.0028325548627901004, "phrase": "selected_events"}, {"score": 0.002702887319160532, "phrase": "service_implementation_details"}, {"score": 0.002579140290642792, "phrase": "test_cases"}, {"score": 0.002435542816459651, "phrase": "experimental_results"}, {"score": 0.002372935208038141, "phrase": "existing_testing_approaches"}, {"score": 0.0021049977753042253, "phrase": "test_case_generation"}], "paper_keywords": ["Web service composition", " white-box testing", " event interface", " events"], "paper_abstract": "Whitening the testing of service-oriented applications can provide service consumers confidence on how well an application has been tested. However, to protect business interests of service providers and to prevent information leakage, the implementation details of services are usually invisible to service consumers. This makes it challenging to determine the test coverage of a service composition as a whole and design test cases effectively. To address this problem, we propose an approach to whiten the testing of service compositions based on events exposed by services. By deriving event interfaces to explore only necessary test coverage information from service implementations, our approach allows service consumers to determine test coverage based on selected events exposed by services at runtime without releasing the service implementation details. We also develop an approach to design test cases effectively based on event interfaces concerning both effectiveness and information leakage. The experimental results show that our approach outperforms existing testing approaches for service compositions with up to 49 percent more test coverage and an up to 24 percent higher fault-detection rate. Moreover, our solution can trade off effectiveness, efficiency, and information leakage for test case generation.", "paper_title": "Whitening SOA Testing via Event Exposure", "paper_id": "WOS:000325171400007"}