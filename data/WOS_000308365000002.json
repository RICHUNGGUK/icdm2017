{"auto_keywords": [{"score": 0.04952768239017738, "phrase": "common_table_space"}, {"score": 0.03820031705265674, "phrase": "xsb"}, {"score": 0.00481495049065317, "phrase": "multi-threaded_local_tabling"}, {"score": 0.004173865018011237, "phrase": "higher_procedural_control"}, {"score": 0.004141742095830515, "phrase": "declarative_semantics"}, {"score": 0.003923671536980019, "phrase": "prolog_systems"}, {"score": 0.003804234575698981, "phrase": "complex_ties"}, {"score": 0.003702702337768558, "phrase": "underlying_engine"}, {"score": 0.0032972747743006603, "phrase": "thread-private_tables"}, {"score": 0.0032216622984027558, "phrase": "shared_tables"}, {"score": 0.003123527559542239, "phrase": "potential_deadlocks"}, {"score": 0.0030166837276747816, "phrase": "alternative_view"}, {"score": 0.002993439939273828, "phrase": "xsb's_approach"}, {"score": 0.00282470997972535, "phrase": "engine_level"}, {"score": 0.0025249264547573943, "phrase": "xsb's_private_tables"}, {"score": 0.0024957866033992384, "phrase": "subgoal-sharing"}, {"score": 0.0024766721072820366, "phrase": "ss"}, {"score": 0.002373339527491525, "phrase": "primary_goal"}, {"score": 0.00230098581403254, "phrase": "memory_usage"}, {"score": 0.0022744242010653997, "phrase": "table_space"}, {"score": 0.0022136307563123256, "phrase": "yaptab_tabling_system"}, {"score": 0.00218807532188779, "phrase": "local_evaluation_strategy"}, {"score": 0.0021213575697367148, "phrase": "significant_reductions"}, {"score": 0.0021049977753042253, "phrase": "running_time"}], "paper_keywords": ["tabling", " multi-threading", " implementation"], "paper_abstract": "Multi-threading is currently supported by several well-known Prolog systems providing a highly portable solution for applications that can benefit from concurrency. When multi-threading is combined with tabling, we can exploit the power of higher procedural control and declarative semantics. However, despite the availability of both threads and tabling in some Prolog systems, the implementation of these two features implies complex ties to each other and to the underlying engine. Until now, XSB was the only Prolog system combining multi-threading with tabling. In XSB, tables may be either private or shared between threads. While thread-private tables are easier to implement, shared tables have all the associated issues of locking, synchronization and potential deadlocks. In this paper, we propose an alternative view to XSB's approach. In our proposal, each thread views its tables as private but, at the engine level, we use a common table space where tables are shared among all threads. We present three designs for our common table space approach: No-Sharing (NS) (similar to XSB's private tables), Subgoal-Sharing (SS) and Full-Sharing (FS). The primary goal of this work was to reduce the memory usage for the table space but, our experimental results, using the YapTab tabling system with a local evaluation strategy, show that we can also achieve significant reductions on running time.", "paper_title": "Towards multi-threaded local tabling using a common table space", "paper_id": "WOS:000308365000002"}