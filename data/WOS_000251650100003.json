{"auto_keywords": [{"score": 0.045480137425531676, "phrase": "right_partitioning"}, {"score": 0.03641492683873545, "phrase": "arts"}, {"score": 0.0288636111120855, "phrase": "arts_framework"}, {"score": 0.004814954781450327, "phrase": "systemc"}, {"score": 0.00471503739362446, "phrase": "multiprocessor_systems"}, {"score": 0.00444612502361583, "phrase": "heterogeneous_multiprocessor_soc"}, {"score": 0.0042455945330942746, "phrase": "target_platform_architecture"}, {"score": 0.0038066979615349822, "phrase": "abstract_system-level"}, {"score": 0.003634901808509402, "phrase": "cross-layer_modelling"}, {"score": 0.003559387846675818, "phrase": "application_layer"}, {"score": 0.0035296217979800463, "phrase": "middleware_layer"}, {"score": 0.003485437176235259, "phrase": "hardware_layer"}, {"score": 0.003427380591229386, "phrase": "mpsoc_designers"}, {"score": 0.0033420978105332686, "phrase": "network_performance"}, {"score": 0.0033141428467975795, "phrase": "different_traffic"}, {"score": 0.0032181231788427655, "phrase": "different_task_mappings"}, {"score": 0.00299632091372281, "phrase": "rtos_selection"}, {"score": 0.002897283610433351, "phrase": "application_and_platform_models"}, {"score": 0.002801511836648212, "phrase": "systemc."}, {"score": 0.00267495669519805, "phrase": "platform_developers'_point"}, {"score": 0.0026193328696791306, "phrase": "new_components"}, {"score": 0.0024904974828343033, "phrase": "application_designers'_point"}, {"score": 0.002438699976481979, "phrase": "existing_components"}, {"score": 0.0023879771786116228, "phrase": "possible_implementations"}, {"score": 0.002309000874224222, "phrase": "case_study"}, {"score": 0.0021678771715091492, "phrase": "different_platforms"}, {"score": 0.0021049977753042253, "phrase": "simulation_performance"}], "paper_keywords": ["heterogeneous MPSoC", " NoC", " abstract RTOS model", " task graph", " scheduler", " allocator", " synchronizer", " OCP"], "paper_abstract": "One of the challenges of designing a heterogeneous multiprocessor SoC is to find the right partitioning of the application for the target platform architecture. The right partitioning is dependent on the characteristics of the processors and the network connecting them as well as the application. We present an abstract system-level modelling and simulation framework (ARTS) which allows for cross-layer modelling and analysis covering the application layer, middleware layer, and hardware layer. ARTS allows MPSoC designers to explore and analyze the network performance under different traffic and load conditions, consequences of different task mappings to processors (software or hardware) including memory and power usage, and effects of RTOS selection, including scheduling, synchronization and resource allocation policies. We present the application and platform models of ARTS as well as their implementation in SystemC. We present the usage of the ARTS framework as seen from platform developers' point of view, where new components may be created and integrated into the framework, and from application designers' point of view, where existing components are used to explore possible implementations. The latter is illustrated through a case study of a real-time, smart phone application consisting of 5 applications with a total of 114 tasks mapped onto different platforms. Finally, we discuss the simulation performance of the ARTS framework in relation to scalability.", "paper_title": "ARTS: A SystemC-based framework for multiprocessor systems-on-chip modelling", "paper_id": "WOS:000251650100003"}