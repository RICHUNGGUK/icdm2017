{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "n-version_programming"}, {"score": 0.0486868426803837, "phrase": "software_availability"}, {"score": 0.004539005582217309, "phrase": "useful_approach"}, {"score": 0.004278807087784626, "phrase": "safety-critical_systems"}, {"score": 0.00405735420159564, "phrase": "expected_result"}, {"score": 0.003757480190200645, "phrase": "n-version_programming_technique"}, {"score": 0.003541923233726252, "phrase": "n-version_software_system"}, {"score": 0.0034388111429203222, "phrase": "failure_process"}, {"score": 0.0031285355811105945, "phrase": "software_system"}, {"score": 0.0028800314406626022, "phrase": "markov_chain"}, {"score": 0.0027961342030212353, "phrase": "quantitative_measures"}, {"score": 0.0027307746993761035, "phrase": "numerical_examples"}, {"score": 0.0025436978068459565, "phrase": "n-version_programming's_positive_impact"}, {"score": 0.0023976048394496446, "phrase": "positive_impact"}, {"score": 0.0022201273900989416, "phrase": "higher_availability_performance"}, {"score": 0.0021940118003312397, "phrase": "general_recommendations"}, {"score": 0.002142696637011647, "phrase": "n-version_software_structure_design"}, {"score": 0.0021049977753042253, "phrase": "cost-effective_criteria"}], "paper_keywords": ["N-version programming", " software availability", " Markov chain", " optimal software structure"], "paper_abstract": "N-version programming is a useful approach to improve the quality of software, especially for safety-critical systems. Positive performance in enhancing software availability is an expected result. In this paper, a software availability model for the study of the impact of N-version programming technique is proposed and investigated. The characteristics of the N-version software system and its operation and failure process are analysed. Based on this analysis, the time-dependent behaviour of the software system, which alternates between online and offline states, is described using a Markov chain. This model derives quantitative measures of software availability. Numerical examples and comparisons are also presented in this paper to directly illustrate N-version programming's positive impact on software availability measures. N-version programming generally provides a positive impact on the system. However, it does not always guarantee a higher availability performance. General recommendations are provided on N-version software structure design based on cost-effective criteria.", "paper_title": "A study of N-version programming and its impact on software availability", "paper_id": "WOS:000339163400012"}