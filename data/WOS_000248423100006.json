{"auto_keywords": [{"score": 0.028082031387974264, "phrase": "strong_updates"}, {"score": 0.004570759604335229, "phrase": "memory_cell"}, {"score": 0.004424441580112395, "phrase": "unrelated_types"}, {"score": 0.004367228576339114, "phrase": "different_points"}, {"score": 0.004118751115632515, "phrase": "standard_linear_lambda_calculus"}, {"score": 0.0038843558517333327, "phrase": "simple_semantic_interpretation"}, {"score": 0.003639471039860495, "phrase": "spatial_logics"}, {"score": 0.003569050665799723, "phrase": "typing_interpretation"}, {"score": 0.00307240091019322, "phrase": "well-typed_program"}, {"score": 0.002878556952876824, "phrase": "ml-style_references"}, {"score": 0.0027323009127771525, "phrase": "reference_cell"}, {"score": 0.002336527289457915, "phrase": "unrestricted_references"}, {"score": 0.0021049977753042253, "phrase": "cqual's_restrict"}], "paper_keywords": [""], "paper_abstract": "We present a simple, but expressive type system that supports strong updates-updating a memory cell to hold values of unrelated types at different points in time. Our formulation is based upon a standard linear lambda calculus and, as a result, enjoys a simple semantic interpretation for types that is closely related to models for spatial logics. The typing interpretation is strong enough that, in spite of the fact that our core programming language supports shared, mutable references and cyclic graphs, every well-typed program terminates. We then consider extensions needed to model ML-style references, where the capability to access a reference cell is unrestricted, but strong updates are disallowed. Our extensions include a thaw primitive for re-gaining the capability to perform strong updates on unrestricted references. The thaw primitive is closely related to other mechanisms that support strong updates, such as CQUAL's restrict.", "paper_title": "L-3 : A linear language with locations", "paper_id": "WOS:000248423100006"}