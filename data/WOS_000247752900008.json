{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "fail-fci"}, {"score": 0.004564291332315995, "phrase": "paramount_importance"}, {"score": 0.004454691230204595, "phrase": "grid_middleware"}, {"score": 0.004181839414007266, "phrase": "grid_infrastructure"}, {"score": 0.004121275290411653, "phrase": "large-scale_distributed_systems"}, {"score": 0.0038127186374325582, "phrase": "new_tool"}, {"score": 0.003775803846431323, "phrase": "fault_injection"}, {"score": 0.0037392451233558234, "phrase": "distributed_applications"}, {"score": 0.0037030390595465673, "phrase": "fail-m."}, {"score": 0.0034760655218366, "phrase": "fault-load_existing_distributed_applications"}, {"score": 0.0033433365160336842, "phrase": "fault-tolerance_issues"}, {"score": 0.003200045185608395, "phrase": "qualitative_faults"}, {"score": 0.0031383410838018984, "phrase": "specific_faults"}, {"score": 0.0030628762739398855, "phrase": "program_code"}, {"score": 0.0028471655497661528, "phrase": "primary_purpose"}, {"score": 0.0026986685585382347, "phrase": "specific_patterns"}, {"score": 0.00247215300812495, "phrase": "whole_process"}, {"score": 0.0024126686412257407, "phrase": "simple_unified_description_language"}, {"score": 0.002242647404307089, "phrase": "code_changes"}, {"score": 0.0021674482571326283, "phrase": "application_side"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["fault-tolerance fault-injection", " stress testing", " grid middleware"], "paper_abstract": "One of the topics of paramount importance in the development of Grid middleware is the impact of faults, since their probability of occurrence in a Grid infrastructure and in large-scale distributed systems is actually very high. In this paper, we explore the versatility of a new tool for fault injection in distributed applications: FAIL-M. In particular, we show that not only are we able to fault-load existing distributed applications (as used in most current papers that address fault-tolerance issues), we are also able to inject qualitative faults, i.e. inject specific faults at very specific moments in the program code of the application under test. Finally, and although this was not the primary purpose of the tool, we are also able to inject specific patterns of workload, in order to stress test the application under test. Interestingly enough, the whole process is driven by a simple unified description language that is totally independent from the language of the application, so that no code changes or recompilation are needed on the application side. (C) 2007 Elsevier B.V. All rights reserved.", "paper_title": "FAIL-FCI: Versatile fault injection", "paper_id": "WOS:000247752900008"}