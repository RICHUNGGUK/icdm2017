{"auto_keywords": [{"score": 0.042527575898494686, "phrase": "np"}, {"score": 0.00961992441973559, "phrase": "unity_properties"}, {"score": 0.005753755763259459, "phrase": "maximum_non-determinism"}, {"score": 0.00481495049065317, "phrase": "unity_programs"}, {"score": 0.004724571550328985, "phrase": "automatic_revision"}, {"score": 0.004688894532233354, "phrase": "untimed_and_real-time_programs"}, {"score": 0.00461919241789025, "phrase": "unity"}, {"score": 0.004548848077202625, "phrase": "main_focus"}, {"score": 0.004248782702870078, "phrase": "polynomial_time"}, {"score": 0.0039684322717435045, "phrase": "efficient_revision"}, {"score": 0.0038938807148174975, "phrase": "sound_and_complete_algorithm"}, {"score": 0.0032826873794020253, "phrase": "state_space"}, {"score": 0.0031365196064043494, "phrase": "hardness_results"}, {"score": 0.0023235629819760018, "phrase": "single_bounded-time"}, {"score": 0.0022625835448873495, "phrase": "real-time_program"}, {"score": 0.002169968849836984, "phrase": "program's_region_graph"}, {"score": 0.0021291312714904957, "phrase": "original_program"}, {"score": 0.0021049977753042253, "phrase": "corresponding_unbounded_leads"}], "paper_keywords": ["Algorithms", " Theory", " Verification", " UNITY", " formal methods"], "paper_abstract": "We concentrate on automatic revision of untimed and real-time programs with respect to UNITY properties. The main focus of this article is to identify instances where addition of UNITY properties can be achieved efficiently (in polynomial time) and where the problem of adding UNITY properties is difficult (NP-complete). Regarding efficient revision, we present a sound and complete algorithm that adds a single leads-to property (respectively, bounded-time leads-to property) and a conjunction of unless, stable, and invariant properties (respectively, bounded-time unless and stable) to an existing untimed (respectively, real-time) UNITY program in polynomial-time in the state space (respectively, region graph) of the given program. Regarding hardness results, we show that (1) while one leads-to (respectively, ensures) property can be added in polynomial-time, the problem of adding two such properties (or any combination of leads-to and ensures) is NP-complete, (2) if maximum non-determinism is desired then the problem of adding even a single leads-to property is NP-complete, and (3) the problem of providing maximum non-determinism while adding a single bounded-time leads-to property to a real-time program is NP-complete (in the size of the program's region graph) even if the original program satisfies the corresponding unbounded leads-to property.", "paper_title": "Complexity Results in Revising UNITY Programs", "paper_id": "WOS:000265879600005"}