{"auto_keywords": [{"score": 0.05006360298453601, "phrase": "coscheduling_algorithms"}, {"score": 0.04884419424224192, "phrase": "generic_framework"}, {"score": 0.033977923692944945, "phrase": "pb"}, {"score": 0.02588265764261105, "phrase": "blocking-based_coscheduling_scheme"}, {"score": 0.004765482708043842, "phrase": "non-dedicated_clusters"}, {"score": 0.0041666157975446564, "phrase": "coscheduling_techniques"}, {"score": 0.004039423410198574, "phrase": "dynamically_loadable_kernel_module"}, {"score": 0.003353521531649663, "phrase": "exhaustive_experimentation"}, {"score": 0.0033190180867511605, "phrase": "mixed_workloads"}, {"score": 0.0031354779851351287, "phrase": "best_performance"}, {"score": 0.0030872017736888113, "phrase": "solaris_platform"}, {"score": 0.0030396665931462, "phrase": "sb_scheme"}, {"score": 0.0029467742734417255, "phrase": "linux_platform"}, {"score": 0.0025230952890994236, "phrase": "coscheduling_schemes"}, {"score": 0.0024842242921857705, "phrase": "experimental_results"}, {"score": 0.0024084298319173277, "phrase": "sb"}, {"score": 0.0023711591828229736, "phrase": "better_tolerance"}, {"score": 0.0023467391904246834, "phrase": "system_workload_variation"}, {"score": 0.002298649369775623, "phrase": "spin-based_schemes"}, {"score": 0.0021049977753042253, "phrase": "non-dedicated_linux_clusters"}], "paper_keywords": ["scheduling", " measurements", " distributed applications", " cluster"], "paper_abstract": "In this paper, we address several key issues in designing coscheduling algorithms for clusters. First, we propose a generic framework for deploying coscheduling techniques by providing a reusable and dynamically loadable kernel module. Second, we implement several communication-driven coscheduling algorithms [dynamic coscheduling (DCS), spin block (SB) and periodic boost (PB)] on a 16-node Linux cluster using the above framework. Third, with exhaustive experimentation using mixed workloads, we observe that unlike PB, which provided the best performance on a Solaris platform, the SB scheme outperforms all other techniques on a Linux platform. Finally, we investigate the impact of several job placement strategies, multiprogramming level (MPL), communication intensity and CPU and I/O intensive jobs on the performance of these coscheduling schemes. The experimental results show that the blocking-based coscheduling scheme (SB) has better tolerance to system workload variation compared with the spin-based schemes (DCS and PB), and overall, the blocking-based coscheduling scheme seems a better choice for non-dedicated Linux clusters.", "paper_title": "Performance comparison of coscheduling algorithms for non-dedicated clusters through a generic framework", "paper_id": "WOS:000244214100010"}