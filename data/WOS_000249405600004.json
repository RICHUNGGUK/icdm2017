{"auto_keywords": [{"score": 0.040075415244979685, "phrase": "adaptive_mesh_refinement"}, {"score": 0.033027093762343744, "phrase": "geographical_locality"}, {"score": 0.00481495049065317, "phrase": "structured_amr_solvers"}, {"score": 0.004737579882204798, "phrase": "cc-numa_multi-processors"}, {"score": 0.004561826854638056, "phrase": "main_memory_latencies"}, {"score": 0.004229556887896042, "phrase": "special_form"}, {"score": 0.0041840994704406866, "phrase": "data_locality"}, {"score": 0.00385832528624328, "phrase": "parallel_pde_solver"}, {"score": 0.0037759801013368187, "phrase": "amr"}, {"score": 0.0036160447168177186, "phrase": "openmp"}, {"score": 0.003519561814102764, "phrase": "dynamic_load"}, {"score": 0.0033888405252810927, "phrase": "dynamically_changing_memory_access_pattern"}, {"score": 0.0033163269450817716, "phrase": "runtime_adaption"}, {"score": 0.0032278559855285945, "phrase": "challenging_task"}, {"score": 0.003158776195052182, "phrase": "high_degree"}, {"score": 0.003074495313651187, "phrase": "main_conclusions"}, {"score": 0.0025857324180891526, "phrase": "dynamic_page_migration"}, {"score": 0.0025578967205807843, "phrase": "misplaced_data"}, {"score": 0.0024628046987344846, "phrase": "migrate-on-next-touch_directive"}, {"score": 0.0023970487263732737, "phrase": "first-touch_strategy"}, {"score": 0.002295463032589125, "phrase": "dynamically_changing_memory_access_patterns"}, {"score": 0.0021049977753042253, "phrase": "total_execution_time"}], "paper_keywords": ["adaptive mesh refinement", " SAMR", " OpenMP", " geographical locality", " cc-NUMA", " page migration", " graph partitioning", " shared memory"], "paper_abstract": "On cc-NUMA multi-processors, the non-uniformity of main memory latencies motivates the need for co-location of threads and data. We call this special form of data locality, geographical locality. In this article, we study the performance of a parallel PDE solver with adaptive mesh refinement (AMR). The solver is parallelized using OpenMP and the adaptive mesh refinement makes dynamic load balancing necessary. Due to the dynamically changing memory access pattern caused by the runtime adaption, it is a challenging task to achieve a high degree of geographical locality. The main conclusions of the study are: (1) that geographical locality is very important for the performance of the solver, (2) that the performance can be improved significantly using dynamic page migration of misplaced data, (3) that a migrate-on-next-touch directive works well whereas the first-touch strategy is less advantageous for programs exhibiting a dynamically changing memory access patterns, and (4) that the overhead for such migration is low compared to the total execution time.", "paper_title": "Dynamic data migration for structured AMR solvers", "paper_id": "WOS:000249405600004"}