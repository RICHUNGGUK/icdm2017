{"auto_keywords": [{"score": 0.04923064775074392, "phrase": "complex_data"}, {"score": 0.015719716506582538, "phrase": "metric_space"}, {"score": 0.015553775575606972, "phrase": "quick_indexing"}, {"score": 0.01118443959323793, "phrase": "disjoint_subspaces"}, {"score": 0.004679134285953932, "phrase": "main_memory"}, {"score": 0.00441883624011048, "phrase": "core_problem"}, {"score": 0.004233119608341877, "phrase": "metric_access_methods"}, {"score": 0.004143196873246147, "phrase": "growing_number"}, {"score": 0.003926626018798576, "phrase": "faster_response"}, {"score": 0.0038986150699604504, "phrase": "similarity_queries"}, {"score": 0.003815770872944475, "phrase": "main_memory_capacity"}, {"score": 0.003734680485633702, "phrase": "memory-based_mams"}, {"score": 0.0034890520683093403, "phrase": "mam"}, {"score": 0.00323625520042892, "phrase": "partitioning_method"}, {"score": 0.0030450484042676023, "phrase": "leaf_node"}, {"score": 0.0030124946762144717, "phrase": "insertion_operations"}, {"score": 0.0029064676523923886, "phrase": "query_algorithms"}, {"score": 0.0028651061556017304, "phrase": "new_partitioning_method"}, {"score": 0.0028243316006748677, "phrase": "new_visit_order"}, {"score": 0.0027741761880779535, "phrase": "k-nn_queries"}, {"score": 0.002695768552609587, "phrase": "synthetic_datasets"}, {"score": 0.0025273383208209944, "phrase": "memory-based_version"}, {"score": 0.0022941723937662927, "phrase": "k-nn_query_processing_performance"}, {"score": 0.0021507795710951384, "phrase": "almost_all_the_tests"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Metric access method", " Memory-based indexing", " Complex data", " Similarity search"], "paper_abstract": "Searching in a dataset for elements that are similar to a given query element is a core problem in applications that manage complex data, and has been aided by metric access methods (MAMs). A growing number of applications require indices that must be built faster and repeatedly, also providing faster response for similarity queries. The increase in the main memory capacity and its lowering costs also motivate using memory-based MAMs. In this paper. we propose the Onion-tree, a new and robust dynamic memory-based MAM that slices the metric space into disjoint subspaces to provide quick indexing of complex data. It introduces three major characteristics: (i) a partitioning method that controls the number of disjoint subspaces generated at each node; (ii) a replacement technique that can change the leaf node pivots in insertion operations; and (iii) range and k-NN extended query algorithms to support the new partitioning method, including a new visit order of the subspaces in k-NN queries. Performance tests with both real-world and synthetic datasets showed that the Onion-tree is very compact. Comparisons of the Onion-tree with the MM-tree and a memory-based version of the Slim-tree showed that the Onion-tree was always faster to build the index. The experiments also showed that the Onion-tree significantly improved range and k-NN query processing performance and was the most efficient MAM, followed by the MM-tree, which in turn outperformed the Slim-tree in almost all the tests. (C) 2010 Elsevier B.V. All rights reserved.", "paper_title": "Slicing the metric space to provide quick indexing of complex data in the main memory", "paper_id": "WOS:000283906900006"}