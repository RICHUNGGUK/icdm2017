{"auto_keywords": [{"score": 0.035620716932052585, "phrase": "dac"}, {"score": 0.00481495049065317, "phrase": "automatic_address_configuration_for_data_center_networks"}, {"score": 0.004774530554776604, "phrase": "data_center_networks"}, {"score": 0.004734448316824488, "phrase": "locality_and_topology_information"}, {"score": 0.004539005582217309, "phrase": "routing_purposes"}, {"score": 0.004406994912939125, "phrase": "traditional_address_configuration_protocols"}, {"score": 0.004351600814972237, "phrase": "dhcp"}, {"score": 0.004296889776409743, "phrase": "huge_amount"}, {"score": 0.004260800171269249, "phrase": "manual_input"}, {"score": 0.003738502710504415, "phrase": "logical_ids"}, {"score": 0.0036144035798673967, "phrase": "physical_topology"}, {"score": 0.003568932067237836, "phrase": "device_ids"}, {"score": 0.0035389348527719404, "phrase": "e._g."}, {"score": 0.003509450816911328, "phrase": "mac"}, {"score": 0.003131178497790961, "phrase": "logical_id_mapping"}, {"score": 0.003091767402370757, "phrase": "graph_isomorphism_problem"}, {"score": 0.003027178161479457, "phrase": "low_time_complexity"}, {"score": 0.002951444412262927, "phrase": "data_center_network_topologies"}, {"score": 0.0026782279715171866, "phrase": "node_degree_change"}, {"score": 0.0023296961971785357, "phrase": "large_data_center"}, {"score": 0.0021228663458966813, "phrase": "viable_solution"}, {"score": 0.0021049977753042253, "phrase": "data_center_autoconfiguration"}], "paper_keywords": ["Address configuration", " data center networks (DCNs)", " graph isomorphism"], "paper_abstract": "Data center networks encode locality and topology information into their server and switch addresses for performance and routing purposes. For this reason, the traditional address configuration protocols such as DHCP require a huge amount of manual input, leaving them error-prone. In this paper, we present DAC, a generic and automatic Data center Address Configuration system. With an automatically generated blueprint that defines the connections of servers and switches labeled by logical IDs, e. g., IP addresses, DAC first learns the physical topology labeled by device IDs, e. g., MAC addresses. Then, at the core of DAC is its device-to-logical ID mapping and malfunction detection. DAC makes an innovation in abstracting the device-to-logical ID mapping to the graph isomorphism problem and solves it with low time complexity by leveraging the attributes of data center network topologies. Its malfunction detection scheme detects errors such as device and link failures and miswirings, including the most difficult case where miswirings do not cause any node degree change. We have evaluated DAC via simulation, implementation, and experiments. Our simulation results show that DAC can accurately find all the hardest-to-detect malfunctions and can autoconfigure a large data center with 3.8 million devices in 46 s. In our implementation, we successfully autoconfigure a small 64-server BCube network within 300 ms and show that DAC is a viable solution for data center autoconfiguration.", "paper_title": "DAC: Generic and Automatic Address Configuration for Data Center Networks", "paper_id": "WOS:000300425000007"}