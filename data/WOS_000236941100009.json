{"auto_keywords": [{"score": 0.03182874753775729, "phrase": "allocated_ranges"}, {"score": 0.01329857554942221, "phrase": "sdsat"}, {"score": 0.008934479356259881, "phrase": "eager_approaches"}, {"score": 0.00481495049065317, "phrase": "small_domain_encoding"}, {"score": 0.00471003041684707, "phrase": "separation_logic_solver"}, {"score": 0.004360412703519539, "phrase": "novel_separation_logic_solver_sdsat"}, {"score": 0.0042031320273645065, "phrase": "robust_performance"}, {"score": 0.004157058883925715, "phrase": "wide_set"}, {"score": 0.00391969808162005, "phrase": "allocation_phase"}, {"score": 0.0038624981944755813, "phrase": "non-uniform_adequate_ranges"}, {"score": 0.0037921662574137535, "phrase": "separation_predicates"}, {"score": 0.0036958398682001015, "phrase": "previous_small_domain_encoding_approaches"}, {"score": 0.0036285315458900284, "phrase": "novel_algorithm"}, {"score": 0.003615217162972726, "phrase": "nu-smod"}, {"score": 0.0034975571855450343, "phrase": "smaller_ranges"}, {"score": 0.003408688677676014, "phrase": "separation_logic_formula"}, {"score": 0.003334309053314909, "phrase": "equi-satisfiable_boolean_formula"}, {"score": 0.0031553611552558986, "phrase": "solve_phase"}, {"score": 0.003097865379563127, "phrase": "lazy_refinement_approach"}, {"score": 0.0030414140732789186, "phrase": "satisfying_model"}, {"score": 0.00275383721396097, "phrase": "crucial_difference"}, {"score": 0.0026446021865907197, "phrase": "first_place"}, {"score": 0.0026059610060579145, "phrase": "lazy_approaches"}, {"score": 0.00244792069601419, "phrase": "feasible_solution"}, {"score": 0.002421040737931745, "phrase": "updated_ranges"}, {"score": 0.0022741894748181243, "phrase": "theory-specific_graph-based_algorithms"}, {"score": 0.0022081920438290193, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "state-of-the_art_solvers"}], "paper_keywords": [""], "paper_abstract": "Existing Separation Logic (a.k.a Difference Logic, DL) solvers can be broadly classified as eager or lazy, each with its own merits and de-merits. We propose a novel Separation Logic Solver SDSAT that combines the strengths of both these approaches and provides a robust performance over a wide set of benchmarks. The solver SDSAT works in two phases: allocation and solve. In the allocation phase, it allocates non-uniform adequate ranges for variables appearing in separation predicates. This phase is similar to previous small domain encoding approaches, but uses a novel algorithm Nu-SMOD with 1-2 orders of magnitude improvement in performance and smaller ranges for variables, Furthermore, the Separation Logic formula is not transformed into an equi-satisfiable Boolean formula in one step, but rather done lazily in the following phase. In the solve phase, SDSAT uses a lazy refinement approach to search for a satisfying model within the allocated ranges. Thus, any partially DL-theory consistent model can be discarded if it can not be satisfied within the allocated ranges. Note the crucial difference: in eager approaches, such a partially consistent model is not allowed in the first place, while in lazy approaches such a model is never discarded. Moreover, we dynamically refine the allocated ranges and search for a feasible solution within the updated ranges. This combined approach benefits from both the smaller search space (as in eager approaches) and also from the theory-specific graph-based algorithms (characteristic of lazy approaches). Experimental results show that our method is robust and always better than or comparable to state-of-the art solvers.", "paper_title": "SDSAT: Tight integration of Small Domain Encoding and Lazy approaches in a separation logic solver", "paper_id": "WOS:000236941100009"}