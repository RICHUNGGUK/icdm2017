{"auto_keywords": [{"score": 0.04927872927155838, "phrase": "sliding_window"}, {"score": 0.015719716506582538, "phrase": "frequent_closed_itemsets"}, {"score": 0.0089478234994909, "phrase": "incmine"}, {"score": 0.004500891637057374, "phrase": "incremental_update"}, {"score": 0.004230956171850591, "phrase": "high-speed_data_stream"}, {"score": 0.003888659470009222, "phrase": "minimum_support_threshold"}, {"score": 0.002758597251689795, "phrase": "efficient_algorithm"}, {"score": 0.0024786330057813204, "phrase": "inverted_index"}, {"score": 0.0024234059612683032, "phrase": "update_process"}, {"score": 0.0023296961971785357, "phrase": "significantly_higher_throughput"}, {"score": 0.0022522565004588113, "phrase": "state-of-the-art_streaming_algorithms"}, {"score": 0.0021288561076024844, "phrase": "high_accuracy"}], "paper_keywords": ["Frequent Closed Itemset", " Data stream mining", " Sliding window"], "paper_abstract": "In this paper, we study the incremental update of Frequent Closed Itemsets (FCIs) over a sliding window in a high-speed data stream. We propose the notion of semi-FCIs, which is to progressively increase the minimum support threshold for an itemset as it is retained longer in the window, thereby drastically reducing the number of itemsets that need to be maintained and processed. We explore the properties of semi-FCIs and observe that a majority of the subsets of a semi-FCI are not semi-FCIs and need not be updated. This finding allows us to devise an efficient algorithm, IncMine, that incrementally updates the set of semi-FCIs over a sliding window. We also develop an inverted index to facilitate the update process. Our empirical results show that IncMine achieves significantly higher throughput and consumes less memory than the state-of-the-art streaming algorithms for mining FCIs and FIs. IncMine also attains high accuracy of 100% precision and over 93% recall.", "paper_title": "Maintaining frequent closed itemsets over a sliding window", "paper_id": "WOS:000260769100001"}