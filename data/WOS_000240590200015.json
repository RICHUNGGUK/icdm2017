{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "heap-allocated_storage"}, {"score": 0.00386519448487341, "phrase": "abstract-interpretation_algorithms"}, {"score": 0.0037066895459425824, "phrase": "non-trivial_information"}, {"score": 0.003629882559085245, "phrase": "heap-allocated_data_objects"}, {"score": 0.003102195256794215, "phrase": "virtual-function_calls"}, {"score": 0.0027936239349923464, "phrase": "debugging_information"}, {"score": 0.0024377918036784336, "phrase": "virtual-function_call-sites"}, {"score": 0.0021049977753042253, "phrase": "virtualfunction_call-sites"}], "paper_keywords": [""], "paper_abstract": "In this paper, we present an abstraction for heap-allocated storage, called the recency-abstraction, that allows abstract-interpretation algorithms to recover some non-trivial information for heap-allocated data objects. As an application of the recency-abstraction, we show how it can resolve virtual-function calls in stripped executables (i.e., executables from which debugging information has been removed). This approach succeeded in resolving 55% of virtual-function call-sites, whereas previous tools for analyzing executables fail to resolve any of the virtualfunction call-sites.", "paper_title": "Recency-abstraction for heap-allocated storage", "paper_id": "WOS:000240590200015"}