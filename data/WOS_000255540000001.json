{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "family_polymorphism"}, {"score": 0.034294434684238075, "phrase": "type_system"}, {"score": 0.027776461950332926, "phrase": "featherweight_java"}, {"score": 0.00470975295439431, "phrase": "object-oriented_languages"}, {"score": 0.004546174820239776, "phrase": "type-safe_mutually_recursive_classes"}, {"score": 0.004198510172614725, "phrase": "mutually_recursive_classes"}, {"score": 0.004124920849728372, "phrase": "original_proposal"}, {"score": 0.0040347380310668994, "phrase": "design_decision"}, {"score": 0.003894512634265439, "phrase": "dependent_types"}, {"score": 0.003742554019950264, "phrase": "rather_complex_type_system"}, {"score": 0.0035965032173588753, "phrase": "simpler_solution"}, {"score": 0.0035648266669315943, "phrase": "lightweight_family_polymorphism"}, {"score": 0.003080548510001051, "phrase": "\"family-polymorphic\"_methods"}, {"score": 0.002999823428906084, "phrase": "parametric_methods"}, {"score": 0.0028826733506942554, "phrase": "method_type_argument_inference"}, {"score": 0.002661883310629088, "phrase": "language_features"}, {"score": 0.0024798279465139688, "phrase": "type_inference"}, {"score": 0.0024579623598183355, "phrase": "family-polymorphic_method_invocations"}, {"score": 0.002320449502337321, "phrase": "formal_translation"}, {"score": 0.0021906130276146325, "phrase": "typing_and_execution_results"}, {"score": 0.0021051140664200304, "phrase": "java"}], "paper_keywords": [""], "paper_abstract": "Family polymorphism has been proposed for object-oriented languages as a solution to supporting reusable yet type-safe mutually recursive classes. A key idea of family polymorphism is the notion of families, which are used to group mutually recursive classes. In the original proposal, due to the design decision that families are represented by objects, dependent types had to be introduced, resulting in a rather complex type system. In this article, we propose a simpler solution of lightweight family polymorphism, based on the idea that families are represented by classes rather than by objects. This change makes the type system significantly simpler without losing much expressive power of the language. Moreover, \"family-polymorphic\" methods now take a form of parametric methods; thus, it is easy to apply method type argument inference as in Java 5.0. To rigorously show that our approach is safe, we formalize the set of language features on top of Featherweight Java and prove that the type system is sound. An algorithm for type inference for family-polymorphic method invocations is also formalized and proved to be correct. Finally, a formal translation by erasure to Featherweight Java is presented; it is proved to preserve typing and execution results, showing that our new language features can be implemented in Java by simply extending the compiler.", "paper_title": "Lightweight family polymorphism", "paper_id": "WOS:000255540000001"}