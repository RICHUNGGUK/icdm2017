{"auto_keywords": [{"score": 0.03994932833136189, "phrase": "acid"}, {"score": 0.00481495049065317, "phrase": "native_transactional_xml_processing"}, {"score": 0.004716520738331953, "phrase": "relational_database_management_systems"}, {"score": 0.004218602458288531, "phrase": "native_xml_dbms"}, {"score": 0.004115267130977749, "phrase": "substantial_differences"}, {"score": 0.004064548693812535, "phrase": "processing_properties"}, {"score": 0.004031082737449308, "phrase": "natively_stored_xml_documents"}, {"score": 0.0039649719120779066, "phrase": "relational_tables"}, {"score": 0.003835972725191194, "phrase": "new_and_appropriate_techniques"}, {"score": 0.00371115485111022, "phrase": "processing_characteristics"}, {"score": 0.003680587852807675, "phrase": "tree_documents"}, {"score": 0.0034306925765832633, "phrase": "efficient_infrastructure"}, {"score": 0.003264547032549398, "phrase": "fine-grained_locking"}, {"score": 0.002789528662623221, "phrase": "prefix-based_node_labeling"}, {"score": 0.0027437235598539904, "phrase": "quantitative_study"}, {"score": 0.00255727386763536, "phrase": "relational_dbms_implementations"}, {"score": 0.0025257081555100556, "phrase": "core_part"}, {"score": 0.0024637379406427856, "phrase": "infrastructural_services"}, {"score": 0.0024434201175883674, "phrase": "xml_document_storage"}, {"score": 0.0024232694434408093, "phrase": "compressed_deweyids"}, {"score": 0.0023540387251475615, "phrase": "navigational_and_declarative_processing"}, {"score": 0.0022773309395419427, "phrase": "lock_modes"}, {"score": 0.0022306602656266545, "phrase": "efficient_collaboration"}, {"score": 0.0022122603123901114, "phrase": "selected_empirical_experiments"}, {"score": 0.002184943946549964, "phrase": "xtc_system_performance"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["native XML DBMS", " transactional XML processing", " XML document storage", " fine-grained locking", " prefix-based node labeling"], "paper_abstract": "Implementation techniques for relational database management systems (DBMSs) have proven their efficiency and robustness in many existing systems. However, many of these concepts and mechanisms cannot be used when implementing a native XML DBMS (XDBMS) because of substantial differences in the processing properties of natively stored XML documents as compared to relational tables. Therefore, we have to develop new and appropriate techniques with ACID transaction guarantees tailored to the processing characteristics of tree documents and the operations on them. For this reason, we want to provide for an efficient infrastructure of XDBMSs consisting of tree node addressing and indexing together with fine-grained locking of tree nodes. In this respect, our prime and novel contribution is to reveal the potential of our prefix-based node labeling called DeweyIDs supporting record addressing, indexing, and locking protocols. In this paper, we first sketch our version of prefix-based node labeling and summarize a quantitative study on them. An overview of our layered XDBMS architecture indicates the concepts and functionalities to be reused from relational DBMS implementations. The core part of the paper describes the infrastructural services for XML document storage with compressed DeweyIDs, the principles and methods for navigational and declarative processing of queries, as well as the lock modes and protocols to enable efficient collaboration. Selected empirical experiments evaluate the XTC system performance and support our system assessment. (C) 2006 Elsevier B.V. All rights reserved.", "paper_title": "An efficient infrastructure for native transactional XML processing", "paper_id": "WOS:000246382800008"}