{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "level_set_method"}, {"score": 0.044657261446806144, "phrase": "distance_function"}, {"score": 0.010210656229117404, "phrase": "distance_information"}, {"score": 0.009170113258324728, "phrase": "set_methods"}, {"score": 0.004772966298144304, "phrase": "popular_technique"}, {"score": 0.0047313464483758364, "phrase": "moving_interfaces"}, {"score": 0.004662781189062896, "phrase": "computer_vision"}, {"score": 0.004635632812446176, "phrase": "fluid_dynamics"}, {"score": 0.0045286036546553585, "phrase": "original_level_set_method"}, {"score": 0.004185217969203, "phrase": "accurately_geometric_features"}, {"score": 0.004005783122073581, "phrase": "set_algorithm"}, {"score": 0.003947690803834311, "phrase": "time_step"}, {"score": 0.0038005481380011677, "phrase": "numerical_stability"}, {"score": 0.0037673755914695546, "phrase": "iterative_scheme"}, {"score": 0.003712727798045068, "phrase": "graph_cut_methods"}, {"score": 0.00369109045832434, "phrase": "continuous_convex_relaxation_methods"}, {"score": 0.003584773870468151, "phrase": "image_processing_problems"}, {"score": 0.0034511113746862796, "phrase": "global_minimizer"}, {"score": 0.003381208502323146, "phrase": "recent_techniques"}, {"score": 0.0033614966991576257, "phrase": "binary_functions"}, {"score": 0.00316131270466841, "phrase": "binary_function"}, {"score": 0.00296433229043316, "phrase": "scattered_points"}, {"score": 0.0029384370067165183, "phrase": "cortex_segmentation_problem"}, {"score": 0.0029212989109921594, "phrase": "medical_imaging"}, {"score": 0.0028454025430602542, "phrase": "fast_algorithm"}, {"score": 0.0028205432455089075, "phrase": "distance_functions"}, {"score": 0.0025311826711421556, "phrase": "cfl_condition"}, {"score": 0.002394299529213776, "phrase": "classical_re-distancing_problem"}, {"score": 0.002332062766342444, "phrase": "proposed_algorithm"}, {"score": 0.0023049225851832084, "phrase": "image_segmentation"}, {"score": 0.0021994769642365714, "phrase": "level_set_techniques"}], "paper_keywords": ["Image segmentation", " level set", " numerical scheme", " signed distance function", " splitting", " surface reconstruction"], "paper_abstract": "The level set method is a popular technique for tracking moving interfaces in several disciplines, including computer vision and fluid dynamics. However, despite its high flexibility, the original level set method is limited by two important numerical issues. First, the level set method does not implicitly preserve the level set function as a distance function, which is necessary to estimate accurately geometric features, s.a. the curvature or the contour normal. Second, the level set algorithm is slow because the time step is limited by the standard Courant-Friedrichs-Lewy (CFL) condition, which is also essential to the numerical stability of the iterative scheme. Recent advances with graph cut methods and continuous convex relaxation methods provide powerful alternatives to the level set method for image processing problems because they are fast, accurate, and guaranteed to find the global minimizer independently to the initialization. These recent techniques use binary functions to represent the contour rather than distance functions, which are usually considered for the level set method. However, the binary function cannot provide the distance information, which can be essential for some applications, s.a. the surface reconstruction problem from scattered points and the cortex segmentation problem in medical imaging. In this paper, we propose a fast algorithm to preserve distance functions in level set methods. Our algorithm is inspired by recent efficient l(1) optimization techniques, which will provide an efficient and easy to implement algorithm. It is interesting to note that our algorithm is not limited by the CFL condition and it naturally preserves the level set function as a distance function during the evolution, which avoids the classical re-distancing problem in level set methods. We apply the proposed algorithm to carry out image segmentation, where our methods prove to be 5-6 times faster than standard distance preserving level set techniques. We also present two applications where preserving a distance function is essential. Nonetheless, our method stays generic and can be applied to any level set methods that require the distance information.", "paper_title": "Efficient Algorithm for Level Set Method Preserving Distance Function", "paper_id": "WOS:000311363200004"}