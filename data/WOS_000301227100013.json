{"auto_keywords": [{"score": 0.049118287236398724, "phrase": "jost"}, {"score": 0.02231955373454558, "phrase": "hofmann"}, {"score": 0.00481495049065317, "phrase": "amortised_resource_analysis_with_separation_logic._type-based_amortised_resource_analysis"}, {"score": 0.00457696724030363, "phrase": "individual_elements"}, {"score": 0.004530794611704416, "phrase": "data_structures"}, {"score": 0.004328689762198895, "phrase": "linear_typing_discipline"}, {"score": 0.004177724522109952, "phrase": "concrete_resource_bounds"}, {"score": 0.004135562737140424, "phrase": "functional_programs"}, {"score": 0.004073113268289532, "phrase": "good_support"}, {"score": 0.0038325685550319863, "phrase": "amortised_resource_analysis"}, {"score": 0.003793876828939456, "phrase": "imperative_pointer-manipulating_languages"}, {"score": 0.003587924960158317, "phrase": "affine_intuitionistic_logic_of_bunched_implications"}, {"score": 0.0035337158050484474, "phrase": "separation_logic"}, {"score": 0.003308085469148074, "phrase": "mutable_data_structures"}, {"score": 0.0031926001871260524, "phrase": "resource_component"}, {"score": 0.00309681702203087, "phrase": "consumable_resources"}, {"score": 0.0028697077879305064, "phrase": "small_imperative_language"}, {"score": 0.0028120022457134267, "phrase": "java_bytecode"}, {"score": 0.0027414948679658816, "phrase": "mutable_heap"}, {"score": 0.002592523232809191, "phrase": "coq_proof_assistant"}, {"score": 0.002540377258232509, "phrase": "certified_verification_condition_generator"}, {"score": 0.0024641134634779535, "phrase": "proof_search_procedure"}, {"score": 0.002426842369975213, "phrase": "generated_verification_conditions"}, {"score": 0.0023539789234610763, "phrase": "linear_programming"}, {"score": 0.0023183698048498797, "phrase": "consumable_resource_annotations"}, {"score": 0.002148226022654619, "phrase": "in-place_list_reversal"}, {"score": 0.0021049977753042253, "phrase": "cyclic_tails"}], "paper_keywords": ["resource bounded computing", " amortised analysis", " separation logic", " java bytecode", " program logic", " resource models"], "paper_abstract": "Type-based amortised resource analysis following Hofmann and Jost where resources are associated with individual elements of data structures and doled out to the programmer under a linear typing discipline-have been successful in providing concrete resource bounds for functional programs, with good support for inference. In this work we translate the idea of amortised resource analysis to imperative pointer-manipulating languages by embedding a logic of resources, based on the affine intuitionistic Logic of Bunched Implications, within Separation Logic. The Separation Logic component allows us to assert the presence and shape of mutable data structures on the heap, while the resource component allows us to state the consumable resources associated with each member of the structure. We present the logic on a small imperative language, based on Java bytecode, with procedures and mutable heap. We have formalised the logic and its soundness property within the Coq proof assistant and extracted a certified verification condition generator. We also describe an proof search procedure that allows generated verification conditions to be discharged while using linear programming to infer consumable resource annotations. We demonstrate the logic on some examples, including proving the termination of in-place list reversal on lists with cyclic tails.", "paper_title": "AMORTISED RESOURCE ANALYSIS WITH SEPARATION LOGIC", "paper_id": "WOS:000301227100013"}