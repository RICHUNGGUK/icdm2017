{"auto_keywords": [{"score": 0.043038683365025775, "phrase": "global_properties"}, {"score": 0.00481495049065317, "phrase": "temporal_safety_properties"}, {"score": 0.004720717782144015, "phrase": "promover"}, {"score": 0.004628320711601916, "phrase": "fully_automated_procedure-modular_verification"}, {"score": 0.004592120950681547, "phrase": "java"}, {"score": 0.0045198174374297285, "phrase": "method-local_and_global_assertions"}, {"score": 0.0043790755286923794, "phrase": "method_invocations"}, {"score": 0.0042426974826585695, "phrase": "natural_instantiation"}, {"score": 0.004192653260742387, "phrase": "modular_verification_paradigm"}, {"score": 0.0040300463421312225, "phrase": "local_properties"}, {"score": 0.003753022329975749, "phrase": "maximal_models"}, {"score": 0.0037087324991876727, "phrase": "program_model"}, {"score": 0.0036360703245710124, "phrase": "program_data"}, {"score": 0.0034537189001268113, "phrase": "code_evolution"}, {"score": 0.0033328427701162368, "phrase": "software_product_lines"}, {"score": 0.0032804824152243106, "phrase": "even_unknown_method"}, {"score": 0.0032161835102640372, "phrase": "mobile_code"}, {"score": 0.003190817088774159, "phrase": "open_platforms"}, {"score": 0.003115908199991072, "phrase": "typical_verification_scenario"}, {"score": 0.0030791137853734152, "phrase": "previously_developed_tool"}, {"score": 0.003042752533935891, "phrase": "compositional_verification"}, {"score": 0.0030187498405804315, "phrase": "control_flow_safety_properties"}, {"score": 0.002971309306027602, "phrase": "appropriate_pre-"}, {"score": 0.002913052619634697, "phrase": "linear-time_temporal_logic"}, {"score": 0.0027999339042953076, "phrase": "local_and_global_safety_properties"}, {"score": 0.0027126012542151015, "phrase": "suitable_format"}, {"score": 0.002566255769251419, "phrase": "proof_reuse"}, {"score": 0.0025059724686541263, "phrase": "verification_tasks"}, {"score": 0.0023896108055582615, "phrase": "verification_task"}, {"score": 0.002370748155770563, "phrase": "relatively_light-weight"}, {"score": 0.0023058910418682676, "phrase": "private_methods"}, {"score": 0.0022876877275935757, "phrase": "automatic_extraction"}, {"score": 0.0022696277881969896, "phrase": "candidate_specifications"}, {"score": 0.0022517100995552443, "phrase": "method_implementations"}, {"score": 0.00212175050242788, "phrase": "java_card"}, {"score": 0.0021049977753042253, "phrase": "web-based_application"}], "paper_keywords": ["Temporal logic", " Model checking", " Maximal models"], "paper_abstract": "This paper describes ProMoVer, a tool for fully automated procedure-modular verification of Java programs equipped with method-local and global assertions that specify safety properties of sequences of method invocations. Modularity at the procedure-level is a natural instantiation of the modular verification paradigm, where correctness of global properties is relativized on the local properties of the methods rather than on their implementations. Here, it is based on the construction of maximal models for a program model that abstracts away from program data. This approach allows global properties to be verified in the presence of code evolution, multiple method implementations (as arising from software product lines), or even unknown method implementations (as in mobile code for open platforms). ProMoVer automates a typical verification scenario for a previously developed tool set for compositional verification of control flow safety properties, and provides appropriate pre- and post-processing. Both linear-time temporal logic and finite automata are supported as formalisms for expressing local and global safety properties, allowing the user to choose a suitable format for the property at hand. Modularity is exploited by a mechanism for proof reuse that detects and minimizes the verification tasks resulting from changes in the code and the specifications. The verification task is relatively light-weight due to support for abstraction from private methods and automatic extraction of candidate specifications from method implementations. We evaluate the tool on a number of applications from the domains of Java Card and web-based application.", "paper_title": "Procedure-modular specification and verification of temporal safety properties", "paper_id": "WOS:000349026100007"}