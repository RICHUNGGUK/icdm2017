{"auto_keywords": [{"score": 0.03744658332079375, "phrase": "mcpod"}, {"score": 0.016033184528782496, "phrase": "data_migration"}, {"score": 0.010612387000973441, "phrase": "load_balance"}, {"score": 0.006853823298770542, "phrase": "parity_updates"}, {"score": 0.004744437370338926, "phrase": "disk_additions"}, {"score": 0.004555781299332848, "phrase": "storage_capacity"}, {"score": 0.004231699728933577, "phrase": "newly_added_disks"}, {"score": 0.0040186038781533946, "phrase": "round-robin_data_distribution"}, {"score": 0.0038729688332870865, "phrase": "expensive_cost"}, {"score": 0.0034925663938977715, "phrase": "data_blocks"}, {"score": 0.0034034331737042363, "phrase": "uniform_data_distribution"}, {"score": 0.003365930631436696, "phrase": "data_disks"}, {"score": 0.0032081215771180664, "phrase": "multiple_accesses"}, {"score": 0.0031845067058084613, "phrase": "physically_successive_blocks"}, {"score": 0.0030017207229983385, "phrase": "consistent_parities"}, {"score": 0.002850385670169814, "phrase": "surrogate_disk"}, {"score": 0.0026570998719084153, "phrase": "data_reliability"}, {"score": 0.002598821419664902, "phrase": "linux_kernel"}, {"score": 0.0023260075698364087, "phrase": "redistribution_time"}, {"score": 0.0022834017104377525, "phrase": "user_response_time"}, {"score": 0.002192392076552256, "phrase": "raid"}, {"score": 0.0021049977753042253, "phrase": "round-robin_raid."}], "paper_keywords": ["Access coalescing", " data migration", " I/O parallelism", " metadata update", " parity update", " RAID-4 scaling"], "paper_abstract": "Disk additions to a RAID-4 storage system can increase the I/O parallelism and expand the storage capacity simultaneously. To regain load balance among all disks including old and new, RAID-4 scaling requires moving certain data blocks onto newly added disks. Existing data redistribution approaches to RAID-4 scaling, restricted by preserving a round-robin data distribution, require migrating all the data, which results in an expensive cost for RAID-4 scaling. In this paper, we propose McPod-a new data redistribution approach to accelerating RAID-4 scaling. McPod minimizes the number of data blocks to be moved while maintaining a uniform data distribution across all data disks. McPod also optimizes data migration with four techniques. First, it coalesces multiple accesses to physically successive blocks into a single I/O. Second, it piggybacks parity updates during data migration to reduce the cost of maintaining consistent parities. Third, it outsources all parity updates brought by RAID scaling to a surrogate disk. Fourth, it delays recording data migration on disks to minimize the number of metadata writes without compromising data reliability. We implement McPod in Linux Kernel 2.6.32.9, and evaluate its performance by replaying three real-system traces. The results demonstrate that McPod outperforms the existing \"moving-everything\" approach by 67.78-79.64 percent in redistribution time and by 14.24-27.16 percent in user response time. The experiments also illustrate that the performance of the RAID scaled using McPod is almost identical to that of the round-robin RAID.", "paper_title": "Redistribute Data to Regain Load Balance during RAID-4 Scaling", "paper_id": "WOS:000348206700021"}