{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "network-transparent_distributed_programming_language"}, {"score": 0.047510470298773616, "phrase": "asynchronous_fault_detection"}, {"score": 0.00443308765153716, "phrase": "practical_way"}, {"score": 0.004312622975366676, "phrase": "partial_failure"}, {"score": 0.004044064541716598, "phrase": "network-transparency_approach"}, {"score": 0.003459191419478298, "phrase": "program's_execution"}, {"score": 0.0027741761880779535, "phrase": "language_oz"}, {"score": 0.0026494723416072316, "phrase": "new_programming_model"}, {"score": 0.0023725232579531273, "phrase": "network-transparent_nature"}], "paper_keywords": [""], "paper_abstract": "This paper shows that asynchronous fault detection is a practical way to reflect partial failure in a network-transparent distributed programming language. In the network-transparency approach, a program can be distributed over many sites without changing its source code. The semantics of the program's execution does not depend on how the program is distributed. We have experimented with various mechanisms for detecting and handling faults from within the language Oz. We present a new programming model that is based on asynchronous fault detection, is more consistent with the network-transparent nature of Oz, and improves the modularity of failure handling at the same time.", "paper_title": "Failure handling in a network-transparent distributed programming language", "paper_id": "WOS:000241860400007"}