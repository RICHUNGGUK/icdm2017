{"auto_keywords": [{"score": 0.03433421203524884, "phrase": "program_parallelization"}, {"score": 0.00481495049065317, "phrase": "nonlinear_symbolic_analysis"}, {"score": 0.004774530554776604, "phrase": "advanced_program_parallelization"}, {"score": 0.004734448316824488, "phrase": "high-end_parallel"}, {"score": 0.004539005582217309, "phrase": "necessary_optimizations"}, {"score": 0.004388450908826472, "phrase": "higher_performance"}, {"score": 0.004296889776409743, "phrase": "source_code"}, {"score": 0.004260800171269249, "phrase": "high-performance_computers"}, {"score": 0.004050514095922329, "phrase": "program_analysis_techniques"}, {"score": 0.003932654396285872, "phrase": "complex_expressions"}, {"score": 0.003883194688426525, "phrase": "data_dependence_analysis_phase"}, {"score": 0.0037543106253910313, "phrase": "linear_expressions"}, {"score": 0.0036914757355166966, "phrase": "nonlinear_expressions"}, {"score": 0.0035539019235553897, "phrase": "considerable_amounts"}, {"score": 0.0035240305920962766, "phrase": "potential_parallelism"}, {"score": 0.003378385493203297, "phrase": "new_data_dependence_analysis_techniques"}, {"score": 0.0032938942910948096, "phrase": "dependence_problem"}, {"score": 0.003131178497790961, "phrase": "polynomial-time_techniques"}, {"score": 0.003027178161479457, "phrase": "source_codes"}, {"score": 0.0030017207229983385, "phrase": "nonlinear_and_symbolic_expressions"}, {"score": 0.0029764767329116875, "phrase": "complex_loop_bounds"}, {"score": 0.0029266219967426224, "phrase": "coupled_subscripts"}, {"score": 0.002758597251689795, "phrase": "accurate_and_complete_direction_vector_information"}, {"score": 0.00257831812581194, "phrase": "experimental_evaluation"}, {"score": 0.0024926348205500715, "phrase": "omega_test"}, {"score": 0.002450864311898833, "phrase": "range_test"}, {"score": 0.002419995316129757, "phrase": "perfect_and_spec_benchmarks"}, {"score": 0.002389514188569084, "phrase": "experimental_results"}, {"score": 0.0021682027434117095, "phrase": "higher_speedups"}], "paper_keywords": ["Data dependence", " program analysis", " automatic parallelization", " compiler optimization"], "paper_abstract": "High-end parallel and multicore processors rely on compilers to perform the necessary optimizations and exploit concurrency in order to achieve higher performance. However, the source code for high-performance computers is extremely complex to analyze and optimize. In particular, program analysis techniques often do not take into account complex expressions during the data dependence analysis phase. Most data dependence tests are only able to analyze linear expressions, even though nonlinear expressions occur very often in practice. Therefore, considerable amounts of potential parallelism remain unexploited. In this paper, we propose new data dependence analysis techniques to handle such complex instances of the dependence problem and increase program parallelization. Our method is based on a set of polynomial-time techniques that can prove or disprove dependences in source codes with nonlinear and symbolic expressions, complex loop bounds, arrays with coupled subscripts, and if-statement constraints. In addition, our algorithm can produce accurate and complete direction vector information, enabling the compiler to apply further transformations. To validate our method, we performed an experimental evaluation and comparison against the I-Test, the Omega test, and the Range test in the Perfect and SPEC benchmarks. The experimental results indicate that our dependence analysis tool is accurate, efficient, and more effective in program parallelization than the other dependence tests. The improved parallelization results into higher speedups and better program execution performance in several benchmarks.", "paper_title": "Nonlinear Symbolic Analysis for Advanced Program Parallelization", "paper_id": "WOS:000264523500003"}