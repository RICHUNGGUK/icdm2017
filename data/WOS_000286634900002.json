{"auto_keywords": [{"score": 0.04796789568919049, "phrase": "soa"}, {"score": 0.00481495049065317, "phrase": "automatic_determination_of_compatibility"}, {"score": 0.00476697427418509, "phrase": "evolving_services"}, {"score": 0.004695900553353526, "phrase": "major_advantage"}, {"score": 0.0046491050101721545, "phrase": "service-oriented_architectures"}, {"score": 0.004444203710097833, "phrase": "loosely_coupled_services"}, {"score": 0.0043560464825349275, "phrase": "development_lifecycles"}, {"score": 0.004143196873246147, "phrase": "multiple_service_versions"}, {"score": 0.004020492138367616, "phrase": "older_clients"}, {"score": 0.0038048583022763796, "phrase": "service_descriptions"}, {"score": 0.003729335910488339, "phrase": "version_numbers"}, {"score": 0.0031606404966938568, "phrase": "complex_descriptions"}, {"score": 0.0028021527740710508, "phrase": "case_study"}, {"score": 0.0027602925235474317, "phrase": "version_compatibility_information"}, {"score": 0.002719055901632759, "phrase": "soa_environment"}, {"score": 0.0026919067120537055, "phrase": "present_initial_performance_overheads"}, {"score": 0.0026252106881752067, "phrase": "compatibility_information"}, {"score": 0.002509284173541882, "phrase": "proposed_changes"}, {"score": 0.002459414063407306, "phrase": "proper_versioning_requirements"}, {"score": 0.002398464540102246, "phrase": "client_implementations"}, {"score": 0.0021049977753042253, "phrase": "compatible_ones"}], "paper_keywords": ["Compatibility", " Service Compatibility", " Service Composition", " Service Oriented Architecture (SOA)", " SOA Environment"], "paper_abstract": "A major advantage of Service-Oriented Architectures (SOA) is composition and coordination of loosely coupled services. Because the development lifecycles of services and clients are de-coupled, multiple service versions must be maintained to support older clients. Typically versions are managed within the SOA by updating service descriptions using conventions on version numbers and namespaces. In all cases, the compatibility among services descriptions must be evaluated, which can be hard, error-prone and costly if performed manually, particularly for complex descriptions. In this paper, the authors describe a method to automatically determine when two service descriptions are backward compatible. The authors describe a case study to illustrate version compatibility information in a SOA environment and present initial performance overheads. By automatically exploring compatibility information, a) service developers can assess the impact of proposed changes; b) proper versioning requirements can be put in client implementations guaranteeing that incompatibilities will not occur during run-time; and c) messages exchanged in the SOA can be validated to ensure that only expected messages or compatible ones are exchanged.", "paper_title": "Automatic Determination of Compatibility in Evolving Services", "paper_id": "WOS:000286634900002"}