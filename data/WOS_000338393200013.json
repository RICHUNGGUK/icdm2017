{"auto_keywords": [{"score": 0.04916575851745093, "phrase": "visualization_techniques"}, {"score": 0.00481495049065317, "phrase": "software_architecture_visualization_techniques"}, {"score": 0.004753512932910936, "phrase": "increased_interest"}, {"score": 0.004632968695963776, "phrase": "software_architecture"}, {"score": 0.004583644452597808, "phrase": "large_scale_complex_systems"}, {"score": 0.004476963405985556, "phrase": "architectural_elements"}, {"score": 0.00443878620915958, "phrase": "architecture_design"}, {"score": 0.004419819325202464, "phrase": "architectural_patterns"}, {"score": 0.00439152018106025, "phrase": "architectural_design_decisions"}, {"score": 0.004252712180219898, "phrase": "vts"}, {"score": 0.00419859306519872, "phrase": "sa"}, {"score": 0.004005176784823524, "phrase": "software_architecture_visualization"}, {"score": 0.0038868464660354626, "phrase": "reported_evidence"}, {"score": 0.0038454350187141816, "phrase": "different_vts"}, {"score": 0.0038044630943383497, "phrase": "different_application_domains"}, {"score": 0.003747831993943604, "phrase": "future_research"}, {"score": 0.0036762529165489644, "phrase": "systematic_literature_review"}, {"score": 0.0036215233428918015, "phrase": "evidence-based_software_engineering"}, {"score": 0.003606035965062628, "phrase": "ebse"}, {"score": 0.0035371606661939955, "phrase": "sa."}, {"score": 0.00350696416714684, "phrase": "manual_and_automatic_search_strategies"}, {"score": 0.003477029725200912, "phrase": "relevant_papers"}, {"score": 0.003316884515934182, "phrase": "pre-defined_inclusion"}, {"score": 0.003253509137361168, "phrase": "data_analysis"}, {"score": 0.0032119308758895107, "phrase": "identified_vts"}, {"score": 0.003170882273992442, "phrase": "usage_popularity"}, {"score": 0.0029861306588145646, "phrase": "architecture_recovery"}, {"score": 0.00297335241739509, "phrase": "architectural_evolution_activities"}, {"score": 0.0029353438786787933, "phrase": "ten_purposes"}, {"score": 0.0028242005031444625, "phrase": "wide_range"}, {"score": 0.002812113238327984, "phrase": "application_domains"}, {"score": 0.002788093250433863, "phrase": "\"graphics_software"}, {"score": 0.0027702126237754625, "phrase": "\"distributed_system"}, {"score": 0.0027172539732903916, "phrase": "sa_visualization"}, {"score": 0.0026998264237910884, "phrase": "significant_importance"}, {"score": 0.0026710278770367786, "phrase": "software-intensive_systems"}, {"score": 0.0026199603775129516, "phrase": "industrial_practice"}, {"score": 0.002461941539542115, "phrase": "architectural_analysis"}, {"score": 0.0024514008914128544, "phrase": "architectural_synthesis"}, {"score": 0.002440905261978986, "phrase": "architectural_implementation"}, {"score": 0.0024252458095689847, "phrase": "architecture_reuse"}, {"score": 0.002288744855588159, "phrase": "promised_benefits"}, {"score": 0.002216251512062482, "phrase": "industrial_surveys"}, {"score": 0.0021973099304606076, "phrase": "software_architecture_practitioners"}, {"score": 0.0021738599497804806, "phrase": "architecting_process"}], "paper_keywords": ["Software architecture", " Software architecture visualization", " Visualization techniques"], "paper_abstract": "Context: Given the increased interest in using visualization techniques (VTs) to help communicate and understand software architecture (SA) of large scale complex systems, several VTs and tools have been reported to represent architectural elements (such as architecture design, architectural patterns, and architectural design decisions). However, there is no attempt to systematically review and classify the VTs and associated tools reported for SA, and how they have been assessed and applied. Objective: This work aimed at systematically reviewing the literature on software architecture visualization to develop a classification of VTs in SA, analyze the level of reported evidence and the use of different VTs for representing SA in different application domains, and identify the gaps for future research in the area. Method: We used systematic literature review (SLR) method of the evidence-based software engineering (EBSE) for reviewing the literature on VTs for SA. We used both manual and automatic search strategies for searching the relevant papers published between 1 February 1999 and 1 July 2011. Results: We selected 53 papers from the initially retrieved 23,056 articles for data extraction, analysis, and synthesis based on pre-defined inclusion and exclusion criteria. The results from the data analysis enabled us to classify the identified VTs into four types based on the usage popularity: graph-based, notation-based, matrix-based, and metaphor-based VTs. The VTs in SA are mostly used for architecture recovery and architectural evolution activities. We have also identified ten purposes of using VTs in SA. Our results also revealed that VTs in SA have been applied to a wide range of application domains, among which \"graphics software\" and \"distributed system\" have received the most attention. Conclusion: SA visualization has gained significant importance in understanding and evolving software-intensive systems. However, only a few Vis have been employed in industrial practice. This review has enabled us to identify the following areas for further research and improvement: (i) it is necessary to perform more research on applying visualization techniques in architectural analysis, architectural synthesis, architectural implementation, and architecture reuse activities; (ii) it is essential to pay more attention to use more objective evaluation methods (e.g., controlled experiment) for providing more convincing evidence to support the promised benefits of using VTs in SA; (iii) it is important to conduct industrial surveys for investigating how software architecture practitioners actually employ VTs in architecting process and what are the issues that hinder and prevent them from adopting VTs in SA. (C) 2014 Elsevier Inc. All rights reserved.", "paper_title": "A systematic review of software architecture visualization techniques", "paper_id": "WOS:000338393200013"}