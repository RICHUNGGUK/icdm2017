{"auto_keywords": [{"score": 0.04985399435635011, "phrase": "stm_performance"}, {"score": 0.015719716506582538, "phrase": "contention_management"}, {"score": 0.015040911148702511, "phrase": "stm"}, {"score": 0.011499211819822086, "phrase": "stm_systems"}, {"score": 0.004769831218566457, "phrase": "transactional_memory"}, {"score": 0.004747600590189188, "phrase": "tm"}, {"score": 0.004702940075638331, "phrase": "emerging_concurrent_programming_abstraction"}, {"score": 0.004507817359899116, "phrase": "stm_implementations"}, {"score": 0.004476089640861217, "phrase": "transaction_atomicity"}, {"score": 0.004361644989356558, "phrase": "stm_implementation"}, {"score": 0.004330941610682453, "phrase": "transaction_collisions"}, {"score": 0.004290338269158808, "phrase": "contention_manager"}, {"score": 0.004240116703465252, "phrase": "recent_work"}, {"score": 0.004112263474359245, "phrase": "colliding_transactions"}, {"score": 0.003997655793143628, "phrase": "high-contention_workloads"}, {"score": 0.003858860023411001, "phrase": "memory_transactions"}, {"score": 0.003603989174919527, "phrase": "workload_characteristics"}, {"score": 0.00346245408881108, "phrase": "serialization's_influence"}, {"score": 0.0034461713510950385, "phrase": "stm_throughput"}, {"score": 0.003413834446305477, "phrase": "committed_transactions"}, {"score": 0.003310813458610484, "phrase": "\"useful\"_work"}, {"score": 0.003195787852087248, "phrase": "workload's_level"}, {"score": 0.003180755151851816, "phrase": "contention_changes"}, {"score": 0.0031213259533632003, "phrase": "cbench-a"}, {"score": 0.0030271053282807637, "phrase": "pre-determined_length"}, {"score": 0.0029565620771207003, "phrase": "contention_reduction_mechanisms"}, {"score": 0.002942651351563116, "phrase": "cbench"}, {"score": 0.0029013095080254944, "phrase": "contention_management_algorithms"}, {"score": 0.0028808562753166503, "phrase": "full_spectrum"}, {"score": 0.002867300723785917, "phrase": "contention_levels"}, {"score": 0.002833689453299307, "phrase": "tm_workloads"}, {"score": 0.0028137115734915624, "phrase": "real_applications"}, {"score": 0.002761121217925818, "phrase": "good_performance"}, {"score": 0.0027481275137357774, "phrase": "cm_algorithms"}, {"score": 0.0026651421723078643, "phrase": "adaptive_algorithms"}, {"score": 0.0026217708424139154, "phrase": "cm"}, {"score": 0.002603012037901889, "phrase": "measured_contention_level"}, {"score": 0.0025724908378377135, "phrase": "novel_low-overhead_serialization_mechanism"}, {"score": 0.002530359917257626, "phrase": "cbench-generated_workloads"}, {"score": 0.0025125151618810523, "phrase": "additional_well-known_stm_benchmark_applications"}, {"score": 0.0024481517176862897, "phrase": "serializing_cm"}, {"score": 0.002391067964886602, "phrase": "adaptive_contention_managers"}, {"score": 0.002351901287905719, "phrase": "mode_oscillations"}, {"score": 0.00224878834917539, "phrase": "simple_stabilizing_mechanism"}, {"score": 0.002186001222626418, "phrase": "local_and_global_adaptive_cm_algorithms"}, {"score": 0.0021654633404434623, "phrase": "local_adaptive_algorithms"}, {"score": 0.0021350169717509714, "phrase": "asymmetric_workloads"}, {"score": 0.0021049977753042253, "phrase": "elsevier_inc."}], "paper_keywords": ["Transactional memory", " Contention management", " Conflict detection"], "paper_abstract": "Transactional memory (TM) is an emerging concurrent programming abstraction. Numerous software-based transactional memory (STM) implementations have been developed in recent years. STM implementations must guarantee transaction atomicity and isolation. In order to ensure progress, an STM implementation must resolve transaction collisions by consulting a contention manager (CM). Recent work established that serializing contention management - a technique in which the execution of colliding transactions is serialized for eliminating repeat-collisions - can dramatically improve STM performance in high-contention workloads. In low-contention and highly-parallel workloads, however, excessive serialization of memory transactions may limit concurrency too much and hurt performance. It is therefore important to better understand how the impact of serialization on STM performance varies as a function of workload characteristics. We investigate how serializing CM influences the performance of STM systems. Specifically, we study serialization's influence on STM throughput (number of committed transactions per time unit) and efficiency (ratio between the extent of \"useful\" work done by the STM and work \"wasted\" by aborts) as the workload's level of contention changes. Towards this goal, we implement CBench-a synthetic benchmark that generates workloads in which transactions have (parameter) pre-determined length and probability of being aborted in the lack of contention reduction mechanisms. CBench facilitates evaluating the efficiency of contention management algorithms across the full spectrum of contention levels. The characteristics of TM workloads generated by real applications may vary over time. To achieve good performance, CM algorithms need to monitor these characteristics and change their behavior accordingly. We implement adaptive algorithms that control the activation of serializing CM according to measured contention level, based on a novel low-overhead serialization mechanism. We then evaluate our new algorithms on CBench-generated workloads and on additional well-known STM benchmark applications. Our results shed light on the manner in which serializing CM should be used by STM systems. We show that adaptive contention managers are susceptible to a phenomenon of mode oscillations - in which serialization is repeatedly turned on and off - which hurts performance. We implement a simple stabilizing mechanism that solves this problem. We also compare the performance of local and global adaptive CM algorithms and demonstrate that local adaptive algorithms are superior for applications with asymmetric workloads. (C) 2012 Elsevier Inc. All rights reserved.", "paper_title": "On the impact of serializing contention management on STM performance", "paper_id": "WOS:000303626000001"}