{"auto_keywords": [{"score": 0.048000287634733706, "phrase": "complex_data"}, {"score": 0.015378599035360272, "phrase": "constraint_databases"}, {"score": 0.013042409601748002, "phrase": "classic_data"}, {"score": 0.00481495049065317, "phrase": "constraint_programming"}, {"score": 0.004761850836420121, "phrase": "selection_operators"}, {"score": 0.004285738583114987, "phrase": "boolean"}, {"score": 0.004145287175409325, "phrase": "commercial_database_management_systems"}, {"score": 0.004031865694174726, "phrase": "efficient_retrieval"}, {"score": 0.0038567860860362745, "phrase": "made-to-measure_solution"}, {"score": 0.0034707339811048403, "phrase": "commercial_solutions"}, {"score": 0.0034324073240680213, "phrase": "relational_databases"}, {"score": 0.0030715948036518603, "phrase": "sql_language"}, {"score": 0.002970914475538276, "phrase": "classic_and_constraint_data"}, {"score": 0.002779318608820933, "phrase": "unnecessary_details"}, {"score": 0.0024594969044952108, "phrase": "commercial_database_management_system"}, {"score": 0.0023656467839555458, "phrase": "selection_time"}, {"score": 0.0021763973978248005, "phrase": "relational_algebra_and_constraint_data_representation"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Complex data", " Optimal query evaluation", " Selection Operator", " Constraint Databases", " Constraint Programming"], "paper_abstract": "Constraint Databases represent complex data by means of formulas described by constraints (equations, inequations or Boolean combinations of both). Commercial database management systems allow the storage and efficient retrieval of classic data, but for complex data a made-to-measure solution combined with expert systems for each type of problem are necessary. Therefore, in the same way as commercial solutions of relational databases permit storing and querying classic data, we propose an extension of the Selection Operator for complex data stored, and an extension of SQL language for the case where both classic and constraint data need to be managed. This extension shields the user from unnecessary details on how the information is stored and how the queries are evaluated, thereby enlarging the capacity of expressiveness for any commercial database management system. In order to minimize the selection time, a set of strategies have been proposed, which combine the advantages of relational algebra and constraint data representation. (C) 2014 Elsevier Ltd. All rights reserved.", "paper_title": "Using Constraint Programming in Selection Operators for Constraint Databases", "paper_id": "WOS:000339694400020"}