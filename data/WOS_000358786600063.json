{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "large_datasets"}, {"score": 0.004631335513513859, "phrase": "data_structure"}, {"score": 0.004564291332315995, "phrase": "approximate_nearest_neighbor_query_times"}, {"score": 0.004411588377842043, "phrase": "previous_work"}, {"score": 0.00436890075128947, "phrase": "texture_synthesis"}, {"score": 0.004305639197085793, "phrase": "real-time_synthesis"}, {"score": 0.004263972370406983, "phrase": "small_exemplar_textures"}, {"score": 0.004181839414007266, "phrase": "high_performance"}, {"score": 0.004081385289516914, "phrase": "modern_patch-based_optimization_techniques"}, {"score": 0.0037942165191367366, "phrase": "patchtable"}, {"score": 0.003579046565851265, "phrase": "pre-computation_stage"}, {"score": 0.003527181559366122, "phrase": "modest_time"}, {"score": 0.003048001809453513, "phrase": "sufficiently_good_initial_patch_correspondences"}, {"score": 0.002751751956416832, "phrase": "initially_seeded_correspondences"}, {"score": 0.002672511078070529, "phrase": "precomputed_k-nearest_neighbors"}, {"score": 0.002545468362709126, "phrase": "patch_query_operation"}, {"score": 0.002242647404307089, "phrase": "efficient_and_practical_imaging"}, {"score": 0.002220900173110114, "phrase": "computational_photography_applications"}, {"score": 0.0021569129153653777, "phrase": "artistic_video_stylization"}, {"score": 0.002135995282374723, "phrase": "light_field_super-resolution"}, {"score": 0.0021049977753042253, "phrase": "multi-image_editing"}], "paper_keywords": ["Approximate nearest neighbor", " patch-based synthesis"], "paper_abstract": "This paper presents a data structure that reduces approximate nearest neighbor query times for image patches in large datasets. Previous work in texture synthesis has demonstrated real-time synthesis from small exemplar textures. However, high performance has proved elusive for modern patch-based optimization techniques which frequently use many exemplar images in the tens of megapixels or above. Our new algorithm, PatchTable, offloads as much of the computation as possible to a pre-computation stage that takes modest time, so patch queries can be as efficient as possible. There are three key insights behind our algorithm: (1) a lookup table similar to locality sensitive hashing can be precomputed, and used to seed sufficiently good initial patch correspondences during querying, (2) missing entries in the table can be filled during precomputation with our fast Voronoi transform, and (3) the initially seeded correspondences can be improved with a precomputed k-nearest neighbors mapping. We show experimentally that this accelerates the patch query operation by up to 9x over k-coherence, up to 12x over TreeCANN, and up to 200x over PatchMatch. Our fast algorithm allows us to explore efficient and practical imaging and computational photography applications. We show results for artistic video stylization, light field super-resolution, and multi-image editing.", "paper_title": "PatchTable: Efficient Patch Queries for Large Datasets and Applications", "paper_id": "WOS:000358786600063"}