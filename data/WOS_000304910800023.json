{"auto_keywords": [{"score": 0.049146612112995945, "phrase": "software_defect_prediction"}, {"score": 0.014924683382672532, "phrase": "machine_learning"}, {"score": 0.006914983752271393, "phrase": "main_effect"}, {"score": 0.00481495049065317, "phrase": "stratification_alternatives"}, {"score": 0.00465964893087681, "phrase": "numerous_studies"}, {"score": 0.004479855062309818, "phrase": "software_defect_prediction_problem"}, {"score": 0.0041136473765874815, "phrase": "software_metrics"}, {"score": 0.003954837422946628, "phrase": "defect-prediction_datasets"}, {"score": 0.0038271712887391015, "phrase": "resulting_classifiers"}, {"score": 0.0032054891061528896, "phrase": "imbalanced_datasets"}, {"score": 0.002943147037670826, "phrase": "class_distributions"}, {"score": 0.0027924625350414655, "phrase": "stratification_techniques"}, {"score": 0.0023079225317714815, "phrase": "analysis_of_variance"}], "paper_keywords": ["Learning in imbalanced datasets", " machine learning", " non-parametric models", " software fault-proneness", " software reliability", " stratification"], "paper_abstract": "Numerous studies have applied machine learning to the software defect prediction problem, i.e. predicting which modules will experience a failure during operation based on software metrics. However, skewness in defect-prediction datasets can mean that the resulting classifiers often predict the faulty (minority) class less accurately. This problem is well known in machine learning, and is often referred to as \"learning from imbalanced datasets.\" One common approach for mitigating skewness is to use stratification to homogenize class distributions; however, it is unclear what stratification techniques are most effective, both generally and specifically in software defect prediction. In this article, we investigate two major stratification alternatives (under-, and over-sampling) for software defect prediction using Analysis of Variance. Our analysis covers several modern software defect prediction datasets using a factorial design. We find that the main effect of under-sampling is significant at alpha = 0.05, as is the interaction between under-and over-sampling. However, the main effect of over-sampling is not significant.", "paper_title": "Evaluating Stratification Alternatives to Improve Software Defect Prediction", "paper_id": "WOS:000304910800023"}