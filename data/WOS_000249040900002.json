{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "atsl"}, {"score": 0.009956330751166222, "phrase": "target_machine"}, {"score": 0.00458869631642791, "phrase": "sorting_routine"}, {"score": 0.004461634909525319, "phrase": "specific_data_type"}, {"score": 0.00437302709192313, "phrase": "high-performance_sorting_routine"}, {"score": 0.004303404058571052, "phrase": "algorithmic_space"}, {"score": 0.0041842092128678105, "phrase": "search_space"}, {"score": 0.004150761431291174, "phrase": "basic_sorting_algorithms"}, {"score": 0.004117579919425373, "phrase": "automatically-generated_compositions"}, {"score": 0.004035777314816881, "phrase": "performance_measurements"}, {"score": 0.003955593400628455, "phrase": "ranking_candidate_algorithms"}, {"score": 0.0038152404172111815, "phrase": "specific_settings"}, {"score": 0.003739421738326676, "phrase": "input_sizes"}, {"score": 0.003606711217432998, "phrase": "hybrid_algorithms"}, {"score": 0.0035067452724203124, "phrase": "particular_algorithms"}, {"score": 0.0034508665218929745, "phrase": "high_speed"}, {"score": 0.0034232607917050392, "phrase": "specific_input-size_ranges"}, {"score": 0.003301733505307784, "phrase": "numeric_parameters"}, {"score": 0.003236086384959101, "phrase": "parameter_spaces"}, {"score": 0.0031590250068577867, "phrase": "high_performance"}, {"score": 0.003083793024782014, "phrase": "building_blocks_from_which_atsl_synthesizes_sorting_algorithms"}, {"score": 0.0029034358982402346, "phrase": "cache_efficiency"}, {"score": 0.002868646843975439, "phrase": "extensive_experimental_evaluation"}, {"score": 0.0028115863316685937, "phrase": "high-performance_codes"}, {"score": 0.002711714675297321, "phrase": "data_type"}, {"score": 0.002636489396049042, "phrase": "six_different_machines"}, {"score": 0.0024036710362692042, "phrase": "hand-tuned_building_blocks"}, {"score": 0.0022358683283304533, "phrase": "different_machines"}, {"score": 0.002209060366991921, "phrase": "different_compilers"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["code generation", " sorting", " automatic performance tuning"], "paper_abstract": "We present ATSL, an automatically-tuned sorting library. ATSL generates a sorting routine optimized to the target machine for a specific data type. ATSL finds a high-performance sorting routine by searching an algorithmic space that we have defined. The search space includes basic sorting algorithms and automatically-generated compositions of sorting algorithms. Performance measurements are used both for ranking candidate algorithms and for characterizing the behavior of candidates in specific settings (e.g. ranges of input sizes). These characterizations allow ATSL to generate hybrid algorithms that intelligently exploit the strengths of particular algorithms, such as high speed at specific input-size ranges. Many sorting algorithms can be tuned using numeric parameters and ATSL searches these parameter spaces to find values that yield high performance on the target machine. The building blocks from which ATSL synthesizes sorting algorithms include adaptations of many of the most effective hand-tuned sorting routines, including several that are tuned for cache efficiency. An extensive experimental evaluation shows that ATSL generates high-performance codes that are well tuned for the target machine and data type. The experiments were conducted on six different machines, of several architectures, and with three different compilers. The algorithms that are generated are fast; in particular, they beat the hand-tuned building blocks and the compiler's C++ built-in sorting routine. The algorithms that ATSL generates on different machines and using different compilers are different from each other. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "An automatically-tuned sorting library", "paper_id": "WOS:000249040900002"}