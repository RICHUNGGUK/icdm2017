{"auto_keywords": [{"score": 0.033480592614420344, "phrase": "naive_random_scheduler"}, {"score": 0.00481495049065317, "phrase": "schedule_bounding"}, {"score": 0.004608879242346434, "phrase": "first_independent_empirical_study"}, {"score": 0.004476399615305783, "phrase": "systematic_concurrency_testing"}, {"score": 0.004222707054751191, "phrase": "public_code_bases"}, {"score": 0.0040222701316738295, "phrase": "modified_version"}, {"score": 0.003964007795174772, "phrase": "existing_concurrency_testing_tool"}, {"score": 0.003493021648360933, "phrase": "bug_finding"}, {"score": 0.0033596838564563217, "phrase": "sct"}, {"score": 0.0033271045779740683, "phrase": "existing_code"}, {"score": 0.0031383410838018984, "phrase": "finding_bugs"}, {"score": 0.0030628762739398855, "phrase": "delay_bounding"}, {"score": 0.003003809128328864, "phrase": "preemption_bounding"}, {"score": 0.0028333356794133053, "phrase": "unbounded_depth-first_search"}, {"score": 0.0027383842769094354, "phrase": "sctbench"}, {"score": 0.002659527314613792, "phrase": "small_bound"}, {"score": 0.0025829353063908256, "phrase": "previous_claims"}, {"score": 0.0021049977753042253, "phrase": "future_work"}], "paper_keywords": ["Concurrency", " systematic concutrency testing", " stateless model checking", " context bounding"], "paper_abstract": "We present the first independent empirical study on schedule bounding techniques for systematic concurrency testing (SCT). We have gathered 52 buggy concurrent software benchmarks, drawn from public code bases, which we call SCTBench. We applied a modified version of an existing concurrency testing tool to SCTBench to attempt to answer several research questions, including: How effective are the two main schedule bounding techniques, preemption bounding and delay bounding, at bug finding? What challenges are associated with applying SCT to existing code? How effective is schedule bounding compared to a naive random scheduler at finding bugs? Our findings confirm that delay bounding is superior to preemption bounding and that schedule bounding is more effective at finding bugs than unbounded depth-first search. The majority of bugs in SCTBench can be exposed using a small bound (1-3), supporting previous claims, but there is at least one benchmark that requires 5 preemptions. Surprisingly, we found that a naive random scheduler is at least as effective as schedule bounding for finding bugs. We have made SCTBench and our tools publicly available for reproducibility and use in future work.", "paper_title": "Concurrency Testing Using Schedule Bounding: an Empirical Study", "paper_id": "WOS:000349142100003"}