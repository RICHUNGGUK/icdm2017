{"auto_keywords": [{"score": 0.04899883615751873, "phrase": "web_clusters"}, {"score": 0.00897088567145915, "phrase": "request_dispatcher"}, {"score": 0.00481495049065317, "phrase": "content-aware_request_distribution"}, {"score": 0.004579147045265106, "phrase": "efficient_dispatching_mechanisms"}, {"score": 0.004435112270935294, "phrase": "light-weight_tcp_connection_transfer_mechanism"}, {"score": 0.0043947942344037105, "phrase": "tcp_rebuilding"}, {"score": 0.004237138632255772, "phrase": "content-aware_request"}, {"score": 0.004160435626849478, "phrase": "lvs-cad"}, {"score": 0.003561865840737996, "phrase": "request_scheduling"}, {"score": 0.0032358709481309913, "phrase": "normal_tcp_rebuilding"}, {"score": 0.0030352396244492604, "phrase": "fast_tcp_module"}, {"score": 0.002860062341014677, "phrase": "ip_layer"}, {"score": 0.0027954035431845344, "phrase": "tcp_layer"}, {"score": 0.002769950045729965, "phrase": "faster_response_times"}, {"score": 0.002682669289913153, "phrase": "content-aware_request_distribution_policies"}, {"score": 0.0024593458703463474, "phrase": "resource_utilization"}, {"score": 0.00243694486220507, "phrase": "web_servers"}, {"score": 0.0023927516438886445, "phrase": "experimental_results"}, {"score": 0.002360132221690264, "phrase": "practical_implementation"}, {"score": 0.002338650426199579, "phrase": "linux"}, {"score": 0.0022962183207691188, "phrase": "proposed_system"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["cluster-based systems", " Web clusters", " content-aware dispatching", " persistent connection", " Linux virtual server"], "paper_abstract": "To support Web clusters with efficient dispatching mechanisms and policies, we propose a light-weight TCP connection transfer mechanism, TCP Rebuilding, and use it to develop a content-aware request dispatching platform, LVS-CAD, in which the request dispatcher can extract and analyze the content in requests and then dispatch each request by its content or type of service requested. To efficiently support HTTP/1.1 persistent connection in Web clusters, request scheduling should be performed per request rather than per connection. Consequently, multiple TCP Rebuilding, as an extension to normal TCP Rebuilding, is proposed and implemented. On this platform, we also devise fast TCP module handshaking to process the handshaking between clients and the request dispatcher in the IP layer instead of in the TCP layer for faster response times. Furthermore, we also propose content-aware request distribution policies that consider cache locality and various types of costs for dispatching requests in this platform, which makes the resource utilization of Web servers more effective. Experimental results of a practical implementation on Linux show that the proposed system, mechanisms, and policies can effectively improve the performance of Web clusters. Copyright (C) 2007 John Wiley & Sons, Ltd.", "paper_title": "Efficient support for content-aware request distribution and persistent connection in Web clusters", "paper_id": "WOS:000249040900004"}