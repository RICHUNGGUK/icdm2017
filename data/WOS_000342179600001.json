{"auto_keywords": [{"score": 0.04438199165379649, "phrase": "miht"}, {"score": 0.036090134643286496, "phrase": "miht."}, {"score": 0.026386576848881165, "phrase": "proposed_data_structure"}, {"score": 0.00481495049065317, "phrase": "multi-index_hybrid_trie"}, {"score": 0.004754625103695062, "phrase": "lookup"}, {"score": 0.004695337135832701, "phrase": "updates"}, {"score": 0.0046361494357125355, "phrase": "high-performance_routers"}, {"score": 0.004578030096508602, "phrase": "high-speed_ip_address_lookup"}, {"score": 0.0044922081848067135, "phrase": "wire-speed_packet_forwarding"}, {"score": 0.004325339932975582, "phrase": "new_data_structure"}, {"score": 0.0041384457437123635, "phrase": "dynamic_router_table_designs"}, {"score": 0.00406083086983316, "phrase": "data_structure"}, {"score": 0.003909923690310641, "phrase": "useful_characteristics"}, {"score": 0.003788444178071508, "phrase": "priority_trie"}, {"score": 0.0037409118365761894, "phrase": "ip_lookup_operations"}, {"score": 0.0034899090274046014, "phrase": "key_value"}, {"score": 0.003317970131738248, "phrase": "required_tree_height"}, {"score": 0.0031544754107802413, "phrase": "dynamic_router_table_operations"}, {"score": 0.0029613556844064713, "phrase": "memory_requirement"}, {"score": 0.0026597250663309385, "phrase": "full_prefix"}, {"score": 0.002544616720630384, "phrase": "routing_databases"}, {"score": 0.002449915958738505, "phrase": "efficient_memory_usage"}], "paper_keywords": ["Classless inter domain routing (CIDR)", " dynamic router tables", " IP address lookup", " longest matching prefix", " multi-index hybrid trie"], "paper_abstract": "High-performance routers require high-speed IP address lookup to achieve wire-speed packet forwarding. This study proposes a new data structure, the Multi-Index Hybrid Trie (MIHT), for dynamic router table designs. This data structure was constructed by combining the useful characteristics of the B+ tree and priority trie. IP lookup operations can be performed efficiently by associating each prefix with a key value in the MIHT. Furthermore, because the required tree height and number of prefixes were reduced, dynamic router table operations were performed efficiently using the MIHT. To reduce the memory requirement, each prefix stored its corresponding suffix in a node of the MIHT, rather than storing a full prefix. Experiments using IPv4 and IPv6 routing databases indicated that the proposed data structure has efficient memory usage and performs well for lookup, insertion, deletion operations. This study reports the results of the experiments performed to compare the proposed data structure with other structures using the benchmark IPv4 and IPv6 prefix databases AS1221, AS4637, AS6447, AS65000, AS1221*, and AS6447* with 407,067, 219,581, 417,995, 406,973, 12,155, and 12,278 prefixes, respectively, where AS1221* and AS6447* are IPv6 BGP routing tables.", "paper_title": "A Multi-Index Hybrid Trie for Lookup and Updates", "paper_id": "WOS:000342179600001"}