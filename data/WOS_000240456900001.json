{"auto_keywords": [{"score": 0.0500785296201053, "phrase": "variant_parametric_types"}, {"score": 0.0045607070754363245, "phrase": "object-oriented_programming_languages"}, {"score": 0.0043560464825349275, "phrase": "different_instantiations"}, {"score": 0.004007083686875716, "phrase": "covariant_types"}, {"score": 0.0037168948492715386, "phrase": "variance_annotation"}, {"score": 0.003670608022642996, "phrase": "type_argument"}, {"score": 0.0035648266669315943, "phrase": "type_system"}, {"score": 0.00347657813672945, "phrase": "variance_annotations"}, {"score": 0.003197843245296877, "phrase": "generic_code_abstractions"}, {"score": 0.0031317126905234145, "phrase": "wide_range"}, {"score": 0.0031056437850836326, "phrase": "parametric_types"}, {"score": 0.003066945490483524, "phrase": "safe_manner"}, {"score": 0.0026055251533586804, "phrase": "number_type"}, {"score": 0.0025838249689625775, "phrase": "technical_subtleties"}, {"score": 0.002530359917257626, "phrase": "proposed_mechanism"}, {"score": 0.0024573577356299765, "phrase": "intuitive_correspondence"}, {"score": 0.002436888552432559, "phrase": "variant_parametric"}, {"score": 0.0024065032567542107, "phrase": "existential_types"}, {"score": 0.002346861891137455, "phrase": "rigorous_argument"}, {"score": 0.002298288831092204, "phrase": "proposed_typing_rules"}, {"score": 0.0021767019566972918, "phrase": "java"}, {"score": 0.0021049977753042253, "phrase": "type_soundness"}], "paper_keywords": ["generic classes", " Java", " language design", " language semantics", " subtyping", " variance"], "paper_abstract": "We develop the mechanism of variant parametric types as a means to enhance synergy between parametric and inclusion polymorphism in object-oriented programming languages. Variant parametric types are used to control both the subtyping between different instantiations of one generic class and the accessibility of their fields and methods. On one hand, one parametric class can be used to derive covariant types, contravariant types, and bivariant types ( generally called variant parametric types) by attaching a variance annotation to a type argument. On the other hand, the type system prohibits certain method/field accesses, according to variance annotations, when these accesses may otherwise make the program unsafe. By exploiting variant parametric types, a programmer can write generic code abstractions that work on a wide range of parametric types in a safe manner. For instance, a method that only reads the elements of a container of numbers can be easily modified so as to accept containers of integers, floating-point numbers, or any subtype of the number type. Technical subtleties in typing for the proposed mechanism are addressed in terms of an intuitive correspondence between variant parametric and bounded existential types. Then, for a rigorous argument of correctness of the proposed typing rules, we extend Featherweight GJ-an existing formal core calculus for Java with generics-with variant parametric types and prove type soundness.", "paper_title": "Variant parametric types: A flexible subtyping scheme for generics", "paper_id": "WOS:000240456900001"}