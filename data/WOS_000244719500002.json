{"auto_keywords": [{"score": 0.049655608595442415, "phrase": "multi-threaded_programs"}, {"score": 0.00481495049065317, "phrase": "testing_tools"}, {"score": 0.004730158389701481, "phrase": "multi-threaded_code"}, {"score": 0.004544770921520536, "phrase": "server_side"}, {"score": 0.004425215632459868, "phrase": "personal_computers"}, {"score": 0.004270665568018583, "phrase": "intermittent_bugs"}, {"score": 0.0040309035566691645, "phrase": "silver_bullet"}, {"score": 0.0038900709793274484, "phrase": "partial_solutions"}, {"score": 0.003804550737731054, "phrase": "road_map"}, {"score": 0.003687960013746783, "phrase": "different_disciplines"}, {"score": 0.0032416819339366712, "phrase": "different_solutions"}, {"score": 0.003114449258490062, "phrase": "open_application_programming_interfaces"}, {"score": 0.002992195343569767, "phrase": "multi-threading_domain"}, {"score": 0.002689076130099546, "phrase": "similar_problems"}, {"score": 0.0026652435674846095, "phrase": "different_techniques"}, {"score": 0.00241658945942583, "phrase": "technology_developers"}, {"score": 0.0023424328921363585, "phrase": "race_detection_algorithms"}, {"score": 0.0021716540012278744, "phrase": "testing_solution"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["testing", " concurrency", " benchmark", " multi-threaded"], "paper_abstract": "Multi-threaded code is becoming very common, both on the server side, and very recently for personal computers as well. Consequently, looking for intermittent bugs is a problem that is receiving more and more attention. As there is no silver bullet, research focuses on a variety of partial solutions. We outline a road map for combining the research within the different disciplines of testing multi-threaded programs and for evaluating the quality of this research. We have three main goals. First, to create a benchmark that can be used to evaluate different solutions. Second, to create a framework with open application programming interfaces that enables the combination of techniques in the multi-threading domain. Third, to create a focus for the research in this area around which a community of people who try to solve similar problems with different techniques can congregate. We have started creating such a benchmark and describe the lessons learned in the process. The framework will enable technology developers, for example, developers of race detection algorithms, to concentrate on their components and use other ready made components (e.g. an instrumentor) to create a testing solution. Copyright (c) 2006 John Wiley & Sons, Ltd.", "paper_title": "Towards a framework and a benchmark for testing tools for multi-threaded programs", "paper_id": "WOS:000244719500002"}