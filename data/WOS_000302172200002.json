{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "return-oriented_programming"}, {"score": 0.004561826854638056, "phrase": "arbitrary_behavior"}, {"score": 0.003879234831701853, "phrase": "program's_address_space"}, {"score": 0.0037150687722055727, "phrase": "\"return\"_instruction"}, {"score": 0.00355782527287734, "phrase": "w_circle_plus_x_protections"}, {"score": 0.0034817217207894478, "phrase": "microsoft"}, {"score": 0.003444274589212677, "phrase": "intel"}, {"score": 0.0033888596781798293, "phrase": "amd"}, {"score": 0.0031417377608722, "phrase": "traditional_return-into-libc_attacks"}, {"score": 0.0029126002350975634, "phrase": "multiple_architectures"}, {"score": 0.002789226820897593, "phrase": "entire_category"}, {"score": 0.0027592065435732955, "phrase": "security_measures"}, {"score": 0.002656650588033728, "phrase": "malicious_computation"}, {"score": 0.0025717770066591076, "phrase": "malicious_code"}, {"score": 0.0025031188149336257, "phrase": "wide_applicability"}, {"score": 0.002410058288617039, "phrase": "turing-complete_set"}, {"score": 0.0023079225317714815, "phrase": "standard_c_libraries"}], "paper_keywords": ["Security", " Algorithms", " Return-oriented programming", " return-into-libc", " W-xor-X", " NX", " x86", " SPARC", " RISC", " attacks", " memory safety", " control flow integrity"], "paper_abstract": "We introduce return-oriented programming, a technique by which an attacker can induce arbitrary behavior in a program whose control flow he has diverted, without injecting any code. A return-oriented program chains together short instruction sequences already present in a program's address space, each of which ends in a \"return\" instruction. Return-oriented programming defeats the W circle plus X protections recently deployed by Microsoft, Intel, and AMD; in this context, it can be seen as a generalization of traditional return-into-libc attacks. But the threat is more general. Return-oriented programming is readily exploitable on multiple architectures and systems. It also bypasses an entire category of security measures-those that seek to prevent malicious computation by preventing the execution of malicious code. To demonstrate the wide applicability of return-oriented programming, we construct a Turing-complete set of building blocks called gadgets using the standard C libraries of two very different architectures: Linux/x86 and Solaris/SPARC. To demonstrate the power of return-oriented programming, we present a high-level, general-purpose language for describing return-oriented exploits and a compiler that translates it to gadgets.", "paper_title": "Return-Oriented Programming: Systems, Languages, and Applications", "paper_id": "WOS:000302172200002"}