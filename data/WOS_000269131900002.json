{"auto_keywords": [{"score": 0.035764777663144724, "phrase": "second-level_stb"}, {"score": 0.0346045184084012, "phrase": "two-level_stb"}, {"score": 0.00481495049065317, "phrase": "store_buffer_design_for_multibanked_data_caches"}, {"score": 0.004411588377842043, "phrase": "first-level_multibanked_data_caches"}, {"score": 0.004222707054751191, "phrase": "in-flight_stores"}, {"score": 0.004041879818641576, "phrase": "cache_bank"}, {"score": 0.003925633992809873, "phrase": "store_lifetime"}, {"score": 0.00386876598761639, "phrase": "processor_pipeline"}, {"score": 0.0038127186374325582, "phrase": "data_forwarding_behavior"}, {"score": 0.003721098220825489, "phrase": "particular_two-level_stb_design"}, {"score": 0.0035616743422949766, "phrase": "distributed_first-level"}, {"score": 0.003493021648360933, "phrase": "extremely_small_banks"}, {"score": 0.003359647377874098, "phrase": "correct_store-load_ordering"}, {"score": 0.002931569771634119, "phrase": "first-level_stb"}, {"score": 0.002778682854371595, "phrase": "instruction_age_checking"}, {"score": 0.0026209522797963447, "phrase": "floating_point_codes"}, {"score": 0.0025829353063908256, "phrase": "dynamically_scheduled_processors"}, {"score": 0.0023776656246300063, "phrase": "first_level"}, {"score": 0.002242647404307089, "phrase": "first-level_cache_latency"}, {"score": 0.0021569129153653777, "phrase": "proposed_two-level_design"}, {"score": 0.0021049977753042253, "phrase": "memory-latency-tolerant_processor"}], "paper_keywords": ["Cache memories", " computer architecture", " memory architecture", " pipeline processing"], "paper_abstract": "This paper focuses on how to design a Store Buffer (STB) well suited to first-level multibanked data caches. The goal is to forward data from in-flight stores into dependent loads within the latency of a cache bank. Taking into account the store lifetime in the processor pipeline and the data forwarding behavior, we propose a particular two-level STB design in which forwarding is done speculatively from a distributed first-level STB made of extremely small banks, whereas a centralized, second-level STB enforces correct store-load ordering. Besides, the two-level STB admits two simplifications that leave performance almost unchanged. Regarding the second-level STB, we suggest to remove its data forwarding capability, while for the first-level STB, it is possible to: 1) remove the instruction age checking and 2) compare only the less significant address bits. Experimentation covers both integer and floating point codes executing in dynamically scheduled processors. Following our guidelines and running SPEC-2K over an 8-way processor, a two-level STB with four 8-entry banks in the first level performs similar to an ideal, single-level STB with 128-entry banks working at the first-level cache latency. Also, we show that the proposed two-level design is suitable for a memory-latency-tolerant processor.", "paper_title": "Store Buffer Design for Multibanked Data Caches", "paper_id": "WOS:000269131900002"}