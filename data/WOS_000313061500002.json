{"auto_keywords": [{"score": 0.03923307184680597, "phrase": "kpm"}, {"score": 0.015719702651563923, "phrase": "kernel_polynomial_method"}, {"score": 0.004650896226390719, "phrase": "lattice_model_systems"}, {"score": 0.004597457370802855, "phrase": "quantum_materials"}, {"score": 0.004389745162172933, "phrase": "quantum_properties"}, {"score": 0.004289419884432487, "phrase": "condensed_matter_physics"}, {"score": 0.004215677131963292, "phrase": "main_task"}, {"score": 0.00402514392911723, "phrase": "hamiltonian_matrix"}, {"score": 0.0038654774211631564, "phrase": "electronic_density"}, {"score": 0.0038210283935447473, "phrase": "energy_states"}, {"score": 0.0036063061558261546, "phrase": "promising_simulation_methods"}, {"score": 0.0034832884999421374, "phrase": "fine-grain_recursive_part"}, {"score": 0.0032309093154028663, "phrase": "thread_level_parallelism"}, {"score": 0.0030847461428168614, "phrase": "cluster_computer"}, {"score": 0.002877769867854964, "phrase": "massively_parallel_environment"}, {"score": 0.0028447543826247462, "phrase": "gpu"}, {"score": 0.0027634902834910184, "phrase": "high_parallelism"}, {"score": 0.0026846436189970446, "phrase": "recent_cpus"}, {"score": 0.0025044454602720597, "phrase": "sliding_window_methods"}, {"score": 0.002391067964886602, "phrase": "recent_gpu_platform"}, {"score": 0.0023363141951290526, "phrase": "available_simulation_sizes"}, {"score": 0.0021543421286324945, "phrase": "additional_optimization_techniques"}, {"score": 0.0021049977753042253, "phrase": "gpu_architecture"}], "paper_keywords": ["Kernel polynomial method", " GPU", " Condensed matter physics", " Strong correlation lattice"], "paper_abstract": "The simulation of lattice model systems for quantum materials is one of the most important approaches to understand quantum properties of matter in condensed matter physics. The main task in the simulation is to diagonalize a Hamiltonian matrix for the system and evaluate the electronic density of energy states. Kernel polynomial method (KPM) is one of the promising simulation methods. Because KPM contains a fine-grain recursive part in the algorithm, it is hard to parallelize it under the thread level parallelism such as on a supercomputer or a cluster computer. This paper focuses on methods to parallelize KPM on a massively parallel environment of GPU, aiming to achieve high parallelism for more speedups than the recent CPUs. This paper proposes two implementation methods called the full map and the sliding window methods, and evaluates the performances in the recent GPU platform. To enlarge available simulation sizes and at the same time to enhance the performance, this paper also describes additional optimization techniques depending on the GPU architecture.", "paper_title": "Kernel Polynomial Method on GPU", "paper_id": "WOS:000313061500002"}