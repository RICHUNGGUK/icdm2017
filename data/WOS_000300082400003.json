{"auto_keywords": [{"score": 0.04966008989090485, "phrase": "peer-to-peer_content_distribution"}, {"score": 0.042672971105916654, "phrase": "network_coding"}, {"score": 0.040905102236525534, "phrase": "content_distribution_systems"}, {"score": 0.028961523424729248, "phrase": "encoding_vectors"}, {"score": 0.00481495049065317, "phrase": "chunked_network_coding"}, {"score": 0.0045877173513910055, "phrase": "promising_approach"}, {"score": 0.004371160978838441, "phrase": "average_download_time"}, {"score": 0.004238682850598745, "phrase": "peer_churn"}, {"score": 0.003698442219929622, "phrase": "computational_overhead"}, {"score": 0.0036179751816682454, "phrase": "xu_et_al"}, {"score": 0.003477505397536663, "phrase": "segment_requests"}, {"score": 0.0033277936960179892, "phrase": "local-rarest-first_segment_scheduling"}, {"score": 0.0031845067058084613, "phrase": "random_scheduling"}, {"score": 0.0030206579994328975, "phrase": "chunked_network"}, {"score": 0.0029289895726382653, "phrase": "requests_reducer"}, {"score": 0.0028526276660691525, "phrase": "control_traffic"}, {"score": 0.002802825862847951, "phrase": "vectors_reducer"}, {"score": 0.0026585629592360085, "phrase": "unnecessary_requests"}, {"score": 0.0026352496813713292, "phrase": "downstream_peers"}, {"score": 0.0025778546800417808, "phrase": "encoding_vectors_payload"}, {"score": 0.002544017922741882, "phrase": "upstream_peer"}, {"score": 0.0025106241866273897, "phrase": "complete_requested_segment"}, {"score": 0.0024451427672857458, "phrase": "realistic_implementation"}, {"score": 0.0023192471808039746, "phrase": "comparative_study"}, {"score": 0.0022787359717772976, "phrase": "experimental_results"}, {"score": 0.0021049977753042253, "phrase": "average_and_maximum_download_time"}], "paper_keywords": ["Peer-to-peer", " Network coding", " Content distribution", " Requests reducer", " Encoding vectors reducer"], "paper_abstract": "Network coding has been proposed as a promising approach for peer-to-peer content distribution in recent literature. Not only reducing the average download time, but also improving resilience to peer churn has been showed as the benefits brought by network coding. State-of-the-art network coding content distribution systems perform network coding within segments or chunks, in order to reduce computational overhead. In our previous work (Xu et al. 2008), we proposed to schedule segment requests at a local-rarest-first basic. Local-rarest-first segment scheduling, as we demonstrated, is superior to the random scheduling. In this paper, we make a further step towards improving chunked network coding content distribution systems. We propose a requests reducer that reduces the overhead in control traffic and an encoding vectors reducer that eliminates the transmission of encoding vectors. Our contributions are to save unnecessary requests from downstream peers, and to reduce encoding vectors payload when the upstream peer owns the complete requested segment. This paper presents a realistic implementation, named I-Swifter. And we also make a comparative study on various related implementations. Experimental results show that there is about 10-20% of encoding vectors can be saved in I-Swifter. Moreover, I-Swifter improves average and maximum download time, the server load as well.", "paper_title": "I-Swifter: Improving chunked network coding for peer-to-peer content distribution", "paper_id": "WOS:000300082400003"}