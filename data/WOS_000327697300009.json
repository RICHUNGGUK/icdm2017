{"auto_keywords": [{"score": 0.03700385809508466, "phrase": "storage_strategies"}, {"score": 0.00481495049065317, "phrase": "storage_strategies_for_collections"}, {"score": 0.004721162131188487, "phrase": "dynamically_typed_languages"}, {"score": 0.004629231333018579, "phrase": "dynamically"}, {"score": 0.004539005582217309, "phrase": "language_implementations"}, {"score": 0.002943147037670826, "phrase": "pypy_virtual_machine"}, {"score": 0.0028293966058473476, "phrase": "performance_increase"}, {"score": 0.0027200305495826797, "phrase": "wide-ranging_benchmarks"}, {"score": 0.00266693888510356, "phrase": "real_python_programs"}, {"score": 0.0023003501548634576, "phrase": "pypy"}, {"score": 0.002146926767291475, "phrase": "wide_range"}, {"score": 0.0021049977753042253, "phrase": "virtual_machines"}], "paper_keywords": ["Algorithms", " Languages", " Performance", " Implementation", " collection types", " memory optimization", " dynamic typing"], "paper_abstract": "Dynamically typed language implementations often use more memory and execute slower than their statically typed cousins, in part because operations on collections of elements are unoptimised. This paper describes storage strategies, which dynamically optimise collections whose elements are instances of the same primitive type. We implement storage strategies in the PyPy virtual machine, giving a performance increase of 18% on wide-ranging benchmarks of real Python programs. We show that storage strategies are simple to implement, needing only 1500LoC in PyPy, and have applicability to a wide range of virtual machines.", "paper_title": "Storage Strategies for Collections in Dynamically Typed Languages", "paper_id": "WOS:000327697300009"}