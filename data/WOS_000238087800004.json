{"auto_keywords": [{"score": 0.03827907937304216, "phrase": "structure_modification"}, {"score": 0.025286894011001926, "phrase": "data_page"}, {"score": 0.00481495049065317, "phrase": "page-server_database_systems"}, {"score": 0.004732785510739708, "phrase": "new_algorithms"}, {"score": 0.0045726187330434025, "phrase": "page-shipping_client-server_database_system"}, {"score": 0.004379977556546879, "phrase": "sparse_b-tree_index"}, {"score": 0.004141575435071002, "phrase": "repeatable-read-level_isolation"}, {"score": 0.003933000051147382, "phrase": "record_insertions"}, {"score": 0.003899269293218826, "phrase": "record_deletions"}, {"score": 0.0038492126993451337, "phrase": "key-range_scans"}, {"score": 0.003816197777388722, "phrase": "partial_and_total_rollbacks"}, {"score": 0.003577414339646767, "phrase": "page_split"}, {"score": 0.003471135453226184, "phrase": "atomic_action"}, {"score": 0.003296212583539166, "phrase": "single_redo-only_log_record"}, {"score": 0.003130077012135034, "phrase": "transaction_rollback"}, {"score": 0.0030501665085457606, "phrase": "steal-and-no-force_buffering_policy"}, {"score": 0.0029467742734417255, "phrase": "updated_pages"}, {"score": 0.0028346293790895024, "phrase": "updated_data_pages"}, {"score": 0.00253400005142168, "phrase": "restart_recovery"}, {"score": 0.0025122373359090433, "phrase": "client_and_system_failures"}, {"score": 0.00241658945942583, "phrase": "stale_data"}, {"score": 0.0021601997088758957, "phrase": "structure_modifications"}, {"score": 0.0021049977753042253, "phrase": "updating_transaction"}], "paper_keywords": ["algorithms", " design"], "paper_abstract": "We develop new algorithms for the management of transactions in a page-shipping client-server database system in which the physical database is organized as a sparse B-tree index. Our starvation-free fine-grained locking protocol combines adaptive callbacks with key-range locking and guarantees repeatable-read-level isolation (i.e., serializability) for transactions containing any number of record insertions, record deletions, and key-range scans. Partial and total rollbacks of client transactions are performed by the client. Each structure modification such as a page split or merge is defined as an atomic action that affects only two levels of the B-tree and is logged using a single redo-only log record, so that the modification never needs to be undone during transaction rollback or restart recovery. The steal-and-no-force buffering policy is applied by the server when flushing updated pages onto disk and by the clients when shipping updated data pages to the server, while pages involved in a structure modification are forced to the server when the modification is finished. The server performs the restart recovery from client and system failures using an ARIES/CSA-based recovery protocol. Our algorithms avoid accessing stale data but allow a data page to be updated by one client transaction and read by many other client transactions simultaneously, and updates may migrate from a data page to another in structure modifications caused by other transactions while the updating transaction is still active.", "paper_title": "B-tree concurrency control and recovery in page-server database systems", "paper_id": "WOS:000238087800004"}