{"auto_keywords": [{"score": 0.04648981269156613, "phrase": "energy_consumption"}, {"score": 0.04314658848168205, "phrase": "static_data"}, {"score": 0.00481495049065317, "phrase": "stack_data_placement"}, {"score": 0.004768378525561471, "phrase": "run_time_management"}, {"score": 0.0046993598473345395, "phrase": "scratch-pad_memory"}, {"score": 0.004653900688892822, "phrase": "energy_consumption_reduction"}, {"score": 0.004608879242346434, "phrase": "embedded_applications"}, {"score": 0.004564291332315995, "phrase": "memory_accesses"}, {"score": 0.004498213310668266, "phrase": "major_cause"}, {"score": 0.004411588377842043, "phrase": "embedded_systems"}, {"score": 0.004222707054751191, "phrase": "fully_software_technique"}, {"score": 0.004061584718427419, "phrase": "scratchpad_memory"}, {"score": 0.003392507399258166, "phrase": "external_main_memory"}, {"score": 0.0031845067058084613, "phrase": "stack_data"}, {"score": 0.003107935254560724, "phrase": "run_time"}, {"score": 0.00303319936111073, "phrase": "integer_linear_programming"}, {"score": 0.0029458777184930896, "phrase": "compile_time"}, {"score": 0.002917331114260319, "phrase": "optimal_placement"}, {"score": 0.0027383842769094354, "phrase": "stack_operations"}, {"score": 0.002672511078070529, "phrase": "experimental_results"}, {"score": 0.0023546121947302877, "phrase": "stack_data_accesses"}, {"score": 0.0021049977753042253, "phrase": "main_memory"}], "paper_keywords": ["stuck", " scratch-pod memory", " energy consumption reduction", " embedded systems"], "paper_abstract": "Memory accesses are a major cause of energy consumption for embedded systems. This paper presents the implementation of a fully software technique which places stack an static data into a scratchpad memory (SPM) in order to reduce the energy consumed by the processor while accessing them. Since an SPM is usually too small to include all these data, some of them must be left into the external main memory (MM). Therefore, further energy reduction is achieved by moving some stack data between both memories at run time. The technique employs integer linear programming in order to find at compile time the optimal placement of static data and management of the stack and implements it by inserting stack operations inside the code. Experimental results show that with an SPM of only 1 KB, our technique is able to exploit it for reducing the energy consumption related to the static and stack data accesses by more than 90% for several applications and on an average by 57% compared to the case where these data are fully placed into the main memory.", "paper_title": "Implementation of Stack Data Placement and Run Time Management Using a Scratch-Pad Memory for Energy Consumption Reduction of Embedded Applications", "paper_id": "WOS:000298304800015"}