{"auto_keywords": [{"score": 0.04830236777788389, "phrase": "windows_vista"}, {"score": 0.04731443162421143, "phrase": "distributed_development"}, {"score": 0.00481495049065317, "phrase": "distributed_development_affect_software_quality"}, {"score": 0.004586531354697466, "phrase": "existing_literature"}, {"score": 0.004488505301335364, "phrase": "software_engineering"}, {"score": 0.004298666679374568, "phrase": "cultural_barriers"}, {"score": 0.004252469672259375, "phrase": "expertise_transfer_difficulties"}, {"score": 0.004072573194988867, "phrase": "conventional_wisdom"}, {"score": 0.003921393143378986, "phrase": "distributed_software_development"}, {"score": 0.003775803846431323, "phrase": "collocated_development"}, {"score": 0.0035771121569391916, "phrase": "overall_development"}, {"score": 0.0034629341517018438, "phrase": "post-release_failures"}, {"score": 0.0033163269450817716, "phrase": "distributed_fashion"}, {"score": 0.003193129886123359, "phrase": "collocated_teams"}, {"score": 0.003107935254560724, "phrase": "negligible_difference"}, {"score": 0.0026710653215026685, "phrase": "component_characteristics"}, {"score": 0.002613870237087035, "phrase": "code_churn"}, {"score": 0.0025578967205807843, "phrase": "dependency_information"}, {"score": 0.0025167026017217926, "phrase": "test_code_coverage"}, {"score": 0.002436289099444074, "phrase": "distributed_and_collocated_components"}, {"score": 0.002345707314211983, "phrase": "software_process"}, {"score": 0.002295463032589125, "phrase": "vista_development_cycle"}, {"score": 0.0021049977753042253, "phrase": "prior_work"}], "paper_keywords": [""], "paper_abstract": "Existing literature on distributed development in software engineering, and other fields discusses various challenges, including cultural barriers, expertise transfer difficulties, and communication and coordination overhead. Conventional wisdom, in fact, holds that distributed software development is riskier and more challenging than collocated development. We revisit this belief, empirically studying the overall development of Windows Vista and comparing the post-release failures of components that were developed in a distributed fashion with those that were developed by collocated teams. We found a negligible difference in failures. This difference becomes even less significant when controlling for the number of developers working on a binary. Furthermore, we also found that component characteristics (such as code churn, complexity, dependency information, and test code coverage) differ very little between distributed and collocated components. Finally, we examine the software process used during the Vista development cycle and examine how it may have mitigated some of the difficulties of distributed development introduced in prior work in this area.", "paper_title": "Does Distributed Development Affect Software Quality? An Empirical Case Study of Windows Vista", "paper_id": "WOS:000268567900030"}