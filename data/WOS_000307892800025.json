{"auto_keywords": [{"score": 0.031267041472795166, "phrase": "two-write_wom-codes"}, {"score": 0.010447421955666506, "phrase": "fixed-rate_wom-codes"}, {"score": 0.00481495049065317, "phrase": "write-once_memories"}, {"score": 0.004683073921949839, "phrase": "storage_device"}, {"score": 0.0045337552947185, "phrase": "added_constraint"}, {"score": 0.0044608829094248985, "phrase": "cell's_value"}, {"score": 0.004328628278491584, "phrase": "coding_scheme"}, {"score": 0.004239361561092843, "phrase": "n_cells"}, {"score": 0.004132743580000062, "phrase": "m-i_messages"}, {"score": 0.003991646181215783, "phrase": "written_bits"}, {"score": 0.003964007795174772, "phrase": "total_number"}, {"score": 0.0037583507330555387, "phrase": "individual_rates"}, {"score": 0.0031514627590375354, "phrase": "second_problem"}, {"score": 0.0031223774204093713, "phrase": "unrestricted-rate_wom-code_problem"}, {"score": 0.00303671723998436, "phrase": "variable-rate_wom-codes"}, {"score": 0.0028991255455294565, "phrase": "coset_coding_scheme"}, {"score": 0.00283934833171564, "phrase": "cohen"}, {"score": 0.0027936099046611267, "phrase": "wu"}, {"score": 0.002742196991950893, "phrase": "linear_code"}, {"score": 0.0027295084882654917, "phrase": "two-write_wom-code"}, {"score": 0.0026917932120709186, "phrase": "best_known_sum-rates"}, {"score": 0.002673130926914161, "phrase": "fixed-and_unrestricted-rate_wom-code_problems"}, {"score": 0.0025638362414466278, "phrase": "blackwell_channel"}, {"score": 0.0025460588211235155, "phrase": "two-write_construction"}, {"score": 0.002464709648714996, "phrase": "ternary_cells"}, {"score": 0.002436289099444074, "phrase": "four-write_binary_wom-codes"}, {"score": 0.00235843888868088, "phrase": "t-write_wom-codes"}, {"score": 0.0023420823317774836, "phrase": "t._a_further_generalization"}, {"score": 0.0023258389485654378, "phrase": "t-write_wom-codes_yields"}, {"score": 0.0023043558058824572, "phrase": "efficient_wom-codes"}, {"score": 0.0022672356020734964, "phrase": "recursive_method"}, {"score": 0.002246292543825748, "phrase": "previously_constructed_wom-codes"}, {"score": 0.0021544120415302828, "phrase": "previously_known_wom-codes"}], "paper_keywords": ["Coding theory", " flash memories", " write-once memories (WOMs)", " WOM-codes"], "paper_abstract": "A write-once memory (WOM) is a storage device that consists of cells that can take on q values, with the added constraint that rewrites can only increase a cell's value. A length-n, t-write WOM-code is a coding scheme that allows t messages to be stored in n cells. If on the ith write we write one of M-i messages, then the rate of this write is the ratio of the number of written bits to the total number of cells, i.e., log(2) M-i/n. The sum-rateof the WOM-code is the sum of all individual rates on all writes. A WOM-code is called a fixed-rate WOM-code if the rates on all writes are the same, and otherwise, it is called a variable-rate WOM-code. We address two different problems when analyzing the sum-rate of WOM-codes. In the first one, called the fixed-rate WOM-code problem, the sum-rate is analyzed over all fixed-rate WOM-codes, and in the second problem, called the unrestricted-rate WOM-code problem, the sum-rate is analyzed over all fixed-rate and variable-rate WOM-codes. In this paper, we first present a family of two-write WOM-codes. The construction is inspired by the coset coding scheme, which was used to construct multiple-writeWOM-codes by Cohen et al. and recently by Wu, in order to construct from each linear code a two-write WOM-code. This construction improves the best known sum-rates for the fixed-and unrestricted-rate WOM-code problems. We also show how to take advantage of two-write WOM-codes in order to construct codes for the Blackwell channel. The two-write construction is generalized for two-write WOM-codes with levels per cell, which is used with ternary cells to construct three- and four-write binary WOM-codes. This construction is used recursively in order to generate a family of t-write WOM-codes for all t. A further generalization of these t-write WOM-codes yields additional families of efficient WOM-codes. Finally, we show a recursive method that uses the previously constructed WOM-codes in order to construct fixed-rate WOM-codes. We conclude and show that the WOM-codes constructed here outperform all previously known WOM-codes for 2 <= t <= 10 for both the fixed-and unrestricted-rate WOM-code problems.", "paper_title": "Codes for Write-Once Memories", "paper_id": "WOS:000307892800025"}