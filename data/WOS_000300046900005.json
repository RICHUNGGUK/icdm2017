{"auto_keywords": [{"score": 0.048786972321694204, "phrase": "catapults"}, {"score": 0.046541446666067465, "phrase": "domain-specific_language"}, {"score": 0.033019062019376495, "phrase": "catapults_translator"}, {"score": 0.00481495049065317, "phrase": "internet_server_applications"}, {"score": 0.004558564684763264, "phrase": "application-specific_user_level_thread_schedulers"}, {"score": 0.004339459955098738, "phrase": "application-specific_user-level_thread_schedulers"}, {"score": 0.004108288481894523, "phrase": "user-level_thread_schedulers"}, {"score": 0.003868142906199082, "phrase": "thread_scheduler"}, {"score": 0.0036419834462626125, "phrase": "different_thread_scheduling_strategies"}, {"score": 0.0033546701239540555, "phrase": "common_programming_mistakes"}, {"score": 0.0032107911131811057, "phrase": "thread_schedulers"}, {"score": 0.0030899524399043863, "phrase": "multiple_backends"}, {"score": 0.0030064251340251196, "phrase": "different_languages"}, {"score": 0.0027843339377323878, "phrase": "high-level_language"}, {"score": 0.002664850766529523, "phrase": "low-level_language"}, {"score": 0.002522662955545598, "phrase": "appropriate_code"}, {"score": 0.002454432810862053, "phrase": "final_version"}, {"score": 0.0023749823753904204, "phrase": "single_scheduler_specification"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["thread scheduling", " application-specific schedulers", " domain-specific languages"], "paper_abstract": "This paper describes CATAPULTS (Creating And Testing APplication-specific User Level Thread Schedulers), a domain-specific language for creating and testing application-specific user-level thread schedulers. Using a domain-specific language to write user-level thread schedulers provides three advantages. First, doing so modularizes the thread scheduler, making it easy to plug in and experiment with different thread scheduling strategies. Second, using a domain-specific language for scheduling code helps prevent several of the common programming mistakes that are easy to make when developing thread schedulers. Finally, the CATAPULTS translator has multiple backends that generate code for different languages and libraries. This makes it easy to prototype an application in a high-level language and then later port it to a low-level language; the CATAPULTS translator will take care of generating the appropriate code for both the prototype and the final version of the program from a single scheduler specification. This paper describes how we have used CATAPULTS to improve the performance of two important and representative Internet server applications. Copyright (c) 2011 John Wiley & Sons, Ltd.", "paper_title": "Application-specific thread schedulers for internet server applications", "paper_id": "WOS:000300046900005"}