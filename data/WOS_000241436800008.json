{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "narrowing_relation"}, {"score": 0.0047292449487169345, "phrase": "wide_class"}, {"score": 0.004454377387615279, "phrase": "complete_narrowing-based_algorithm"}, {"score": 0.0042459818200777846, "phrase": "data_structures"}, {"score": 0.0037216229812089686, "phrase": "rewrite_systems"}, {"score": 0.003361069456060196, "phrase": "existing_nodes"}, {"score": 0.0032036590920314725, "phrase": "new_nodes"}, {"score": 0.0026760974046034854, "phrase": "variable_nodes"}, {"score": 0.0022085455097790537, "phrase": "narrowing_process"}, {"score": 0.0021561514733516676, "phrase": "circular_shapes"}, {"score": 0.0021049977753042253, "phrase": "second_step"}], "paper_keywords": [""], "paper_abstract": "We investigate the narrowing relation in a wide class of (cyclic) term-graph rewrite systems. We propose a new sound and complete narrowing-based algorithm able to solve goals in presence of data structures with pointers (e.g., circular lists, doubly linked lists etc.). We first define the class of rewrite systems we consider. Our rules provide features such as pointer (edge) redirections, relabeling of existing nodes, in addition to the creation of new nodes. Moreover, we split the set of nodes of term-graphs in two (possibly empty) subsets: (i) variables and (ii) names. Variable nodes can be mapped against any other node whereas names act as constants and thus they are supposed to match themselves. This distinction between nodes allows us to synthesize, through the narrowing process, data-structures with circular shapes. In a second step, we define the rewriting and narrowing relations. We then show the soundness and completeness of narrowing.", "paper_title": "Narrowing data-structures with pointers", "paper_id": "WOS:000241436800008"}