{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "java_rmi."}, {"score": 0.042335347716798616, "phrase": "streaming_capabilities"}, {"score": 0.03806837886274612, "phrase": "client_site"}, {"score": 0.004719473826242326, "phrase": "network_streaming"}, {"score": 0.0046491050101721545, "phrase": "highly_popular_research_topic"}, {"score": 0.0044219992735047954, "phrase": "large_proportion"}, {"score": 0.004377921202912336, "phrase": "network_traffic"}, {"score": 0.004122490120202936, "phrase": "novel_methodologies"}, {"score": 0.003940706575253453, "phrase": "java_rmi"}, {"score": 0.0038819041309353024, "phrase": "pushing_mechanism"}, {"score": 0.003673675864705682, "phrase": "streaming_fashion"}, {"score": 0.00354700018079049, "phrase": "aggregation_mechanism"}, {"score": 0.0033905067962602515, "phrase": "single_remote_invocation"}, {"score": 0.003306559295382181, "phrase": "multiple_servers"}, {"score": 0.0032246835734680377, "phrase": "data_streams"}, {"score": 0.0031925019616678217, "phrase": "aggregate_partial_data"}, {"score": 0.0031448288291084, "phrase": "complete_data_stream"}, {"score": 0.0030060256866508606, "phrase": "client_site_to_forward_local_data"}, {"score": 0.0028021527740710508, "phrase": "custom_designs"}, {"score": 0.0026516890043911836, "phrase": "continuous_buffer"}, {"score": 0.0026252106881752067, "phrase": "raw_data"}, {"score": 0.0025859868507329634, "phrase": "transport_layer_socket"}, {"score": 0.0025473475682739784, "phrase": "enhanced_framework"}, {"score": 0.0025219085140220773, "phrase": "standard_java_rmi_services"}, {"score": 0.002398464540102246, "phrase": "aggregation_algorithms"}, {"score": 0.0023745087648471613, "phrase": "scheduling_methods"}, {"score": 0.002327310963701377, "phrase": "preliminary_experiments"}, {"score": 0.0021912600076114033, "phrase": "java_rmi_layers"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Java RMI", " streaming Java RMI", " aggregation scheduling methods", " novel applications of Java", " Java-based tools"], "paper_abstract": "In recent years, network streaming becomes a highly popular research topic in computer science due to the fact that a large proportion of network traffic is occupied by multimedia streaming. In this paper we present novel methodologies for enhancing the streaming capabilities of Java RMI. Our streaming support for Java RMI includes the pushing mechanism, which allows the servers to push data in a streaming fashion to the client site, and the aggregation mechanism, which allows the client site to make a single remote invocation to gather data from multiple servers that keep replicas of data streams and aggregate partial data into a complete data stream. In addition, our system also allows the client site to forward local data to other clients. Our framework is implemented by extending the Java RMI stub to allow custom designs for streaming buffers and controls, and by providing a continuous buffer for raw data in the transport layer socket. This enhanced framework allows standard Java RMI services to enjoy streaming capabilities. In addition, we propose aggregation algorithms as scheduling methods in such an environment. Preliminary experiments using our framework demonstrate its promising performance in the provision of streaming services in Java RMI layers. (C) 2008 Published by Elsevier B.V.", "paper_title": "Software architecture design for streaming Java RMI", "paper_id": "WOS:000254266600006"}