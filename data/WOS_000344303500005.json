{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "complex_applications"}, {"score": 0.003132236287543072, "phrase": "fixed_number"}, {"score": 0.0024842242921857705, "phrase": "termination_detection_algorithm"}, {"score": 0.0021049977753042253, "phrase": "efficient_high-level_programming_style"}], "paper_keywords": ["P systems", " Prolog terms", " complex objects", " generic rules", " data structures", " parallel composition", " NP-complete", " termination detection", " Dijkstra-Scholten"], "paper_abstract": "We further develop our earlier Prolog-like complex objects proposal and present several new and improved solutions, for a variety of problems: a faster SAT solution with a fixed number of rules and a set of transformations and components that can build a termination detection algorithm. These results enforce our conjecture that our complex object proposals enable an efficient high-level programming style for P systems.", "paper_title": "Complex Objects for Complex Applications", "paper_id": "WOS:000344303500005"}