{"auto_keywords": [{"score": 0.048727646052725185, "phrase": "total_flow"}, {"score": 0.00481495049065317, "phrase": "network_maintenance_jobs"}, {"score": 0.004775726266706856, "phrase": "release_dates"}, {"score": 0.004565609517511076, "phrase": "solution_strategies"}, {"score": 0.004418601451254075, "phrase": "network_flows"}, {"score": 0.004241451614311598, "phrase": "maintenance_activities"}, {"score": 0.004206879557938045, "phrase": "infrastructure_networks"}, {"score": 0.004138575034269399, "phrase": "rail_or_general_logistics_networks"}, {"score": 0.004038183610525504, "phrase": "regular_preventive_maintenance"}, {"score": 0.003828912548622257, "phrase": "careful_coordination"}, {"score": 0.003782174375003052, "phrase": "arc_maintenance_jobs"}, {"score": 0.0033176589215021353, "phrase": "intriguing_case"}, {"score": 0.0028862761537904206, "phrase": "integer_job_start_times"}, {"score": 0.0027817658627604653, "phrase": "fractional_start_times"}, {"score": 0.0027030963394733916, "phrase": "traditional_strong_integer_programming_scheduling_models"}, {"score": 0.002605201547405916, "phrase": "exact_integer_programming_model"}, {"score": 0.002573362191631126, "phrase": "continuous_time_problem"}, {"score": 0.0025211567863488962, "phrase": "integer_programming_models"}, {"score": 0.0024398167078355224, "phrase": "dual_bounds"}, {"score": 0.002380534385718454, "phrase": "minor_modifications"}, {"score": 0.0023418133729330303, "phrase": "primal_bounds"}, {"score": 0.0023131855385489764, "phrase": "resulting_bounds"}, {"score": 0.002266246304762945, "phrase": "small_gaps"}, {"score": 0.0022477377970612847, "phrase": "test_instances"}, {"score": 0.002202123699556382, "phrase": "good_trade-off"}, {"score": 0.002157433262687853, "phrase": "computing_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_ltd."}], "paper_keywords": ["Network models", " Maintenance scheduling", " Mixed integer programming", " Time discretization", " Heuristics"], "paper_abstract": "We consider a problem that marries network flows and scheduling, motivated by the need to schedule maintenance activities in infrastructure networks, such as rail or general logistics networks. Network elements must undergo regular preventive maintenance, shutting down the arc for the duration of the activity. Careful coordination of these arc maintenance jobs can dramatically reduce the impact of such shutdown jobs on the flow carried by the network. Scheduling such jobs between given release dates and deadlines so as to maximize the total flow over time presents an intriguing case to study the role of time discretization. Here we prove that if the problem data is integer, and no flow can be stored at nodes, we can restrict attention to integer job start times. However if flow can be stored, fractional start times may be needed. This makes traditional strong integer programming scheduling models difficult to apply. Here we formulate an exact integer programming model for the continuous time problem, as well as integer programming models based on time discretization that can provide dual bounds, and that can with minor modifications - also yield primal bounds. The resulting bounds are demonstrated to have small gaps on test instances, and offer a good trade-off for bound quality against computing time. (C) 2015 Elsevier Ltd. All rights reserved.", "paper_title": "Scheduling network maintenance jobs with release dates and deadlines to maximize total flow over time: Bounds and solution strategies", "paper_id": "WOS:000360513300010"}