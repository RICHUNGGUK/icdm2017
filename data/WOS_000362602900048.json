{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "large-scale_physics_simulations"}, {"score": 0.041336781914473014, "phrase": "cpc_program_library"}, {"score": 0.0393907322932591, "phrase": "distributed_program"}, {"score": 0.039163194977342816, "phrase": "test_data"}, {"score": 0.03446535761643252, "phrase": "user-specified_problem_size"}, {"score": 0.03302373748115318, "phrase": "molecular_dynamics_problems"}, {"score": 0.027982418923305122, "phrase": "genasis_basics"}, {"score": 0.004776577633047096, "phrase": "numerical_algorithms"}, {"score": 0.004757505488078964, "phrase": "problem_setup"}, {"score": 0.004719588268604286, "phrase": "distributed-memory_supercomputers"}, {"score": 0.004663275658500817, "phrase": "physical_units"}, {"score": 0.004580058268311223, "phrase": "standard_output_device"}, {"score": 0.004489327204473076, "phrase": "runtime_parameter_management"}, {"score": 0.004374046785495163, "phrase": "extensible_object-oriented_implementations"}, {"score": 0.004330497146292409, "phrase": "rudimentary_functionality"}, {"score": 0.004295968484259529, "phrase": "individual_'unit_test'_programs"}, {"score": 0.004194018672840297, "phrase": "basics_division"}, {"score": 0.0041026827216955756, "phrase": "physics_simulations"}, {"score": 0.004055974120251931, "phrase": "program"}, {"score": 0.004029428762076566, "phrase": "genasis_catalogue"}, {"score": 0.003925911398659081, "phrase": "queen's_university"}, {"score": 0.003910223070206558, "phrase": "belfast"}, {"score": 0.0038945960307804144, "phrase": "n._ireland"}, {"score": 0.0035589898078590564, "phrase": "tar.gz_programming_language"}, {"score": 0.0035448637230713277, "phrase": "fortran"}, {"score": 0.0034884152484429207, "phrase": "intel_fortran"}, {"score": 0.0034675161004285027, "phrase": "nag_fortan"}, {"score": 0.0034467417264556505, "phrase": "cray_compiler"}, {"score": 0.0033447913431083804, "phrase": "linux"}, {"score": 0.0029011769818639193, "phrase": "genasis_basics_functionality"}, {"score": 0.002883785805985795, "phrase": "example_fluid_dynamics"}, {"score": 0.00287224947811969, "phrase": "molecular_dynamics"}, {"score": 0.002832233523615763, "phrase": "fluid_dynamics_examples"}, {"score": 0.00279277350679845, "phrase": "molecular_dynamics_examples"}, {"score": 0.0027704715703793653, "phrase": "velocity-verlet_integration"}, {"score": 0.0027373512318166395, "phrase": "example_problems"}, {"score": 0.00258275254950086, "phrase": "individual_unit_test_programs"}, {"score": 0.0024962071656666075, "phrase": "genasis_basics_source_code"}, {"score": 0.002441754929227295, "phrase": "minor_revisions"}, {"score": 0.0023223663501882917, "phrase": "fluid_dynamics_problems"}, {"score": 0.002285405970646037, "phrase": "wall_clock_time"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Simulation framework", " Object-oriented programming", " Fortran 2003"], "paper_abstract": "Aside from numerical algorithms and problem setup, large-scale physics simulations on distributed-memory supercomputers require more basic utilitarian functionality, such as physical units and constants; display to the screen or standard output device; message passing; I/O to disk; and runtime parameter management and usage statistics. Here we describe and make available Fortran 2003 classes furnishing extensible object-oriented implementations of this sort of rudimentary functionality, along with individual 'unit test' programs and larger example problems demonstrating their use. These classes compose the Basics division of our developing astrophysics simulation code GsNASIS (General Astrophysical Simulation System), but their fundamental nature makes them useful for physics simulations in many fields. Program summary Program title: GENASIS Catalogue identifier: AEXE_v1_0 Program summary URL: http://cpc.cs.qub.ac.uk/summaries/AEXE_v1_0.html Program obtainable from: CPC Program Library, Queen's University, Belfast, N. Ireland Licensing provisions: Creative Commons Attribution - Non Commercial - ShareALike 4.0 International No. of lines in distributed program, including test data, etc.: 32863 No. of bytes in distributed program, including test data, etc.: 148873 Distribution format: tar.gz Programming language: Fortran 2003 (tested with gfortran 4.9.2, Intel Fortran 15, NAG Fortan 5.3.1, Cray Compiler 8.2.5). Computer: PC, cluster, supercomputer. Operating system: Linux, Unix. RAM: For example problems, depends on user-specified problem size and number of processes. The fluid dynamics problems with 128(3) cells on 8 processes use about 300 MB per process. The molecular dynamics problems with 6912 particles on 12 processes use about 20 MB per process. Classification: 4.14, 6.5, 20. External routines: MPI [1] and Silo [2] Nature of problem: By way of illustrating GENASIS Basics functionality, solve example fluid dynamics and molecular dynamics problems. Solution method: For fluid dynamics examples, finite-volume. For molecular dynamics examples, leapfrog and velocity-Verlet integration. Unusual features: The example problems named above are not ends in themselves, but serve to illustrate our object-oriented approach and the functionality available though GENASIS Basics. In addition to these more substantial examples, we provide individual unit test programs for each of the classes comprised by GENASIS Basics. Additional comments: A version of the GENASIS Basics source code is available from the CPC program library with this publication, and minor revisions will be maintained at http://astro.phys.utk.edu/activities: genasis. Running time: For example problems, depends on user-specified problem size and number of processes. The fluid dynamics problems with 1283 cells on 8 processes take about ten minutes of wall clock time on a Cray XC30. The molecular dynamics problems with 6912 particles for 10000 time steps on 12 processes take a little over an hour on a Cray XC30. References: [1] http://www.mcs.anl.gov/mpi/ [2] https://wci.Ilnl.govisimulation/computer-codes/silo (C) 2015 Elsevier B.V. All rights reserved.", "paper_title": "GENASIS Basics: Object-oriented utilitarian functionality for large-scale physics simulations", "paper_id": "WOS:000362602900048"}