{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "massive_computational_power"}, {"score": 0.00462919213721188, "phrase": "future_multicore_chip_multiprocessors"}, {"score": 0.004195418010131832, "phrase": "easy_task"}, {"score": 0.0040334640350288, "phrase": "mainstream_programmers"}, {"score": 0.003802135020791801, "phrase": "sequential_algorithms"}, {"score": 0.003584025547693836, "phrase": "parallel_ones"}, {"score": 0.0030614565460256897, "phrase": "transactional_memory"}, {"score": 0.0026148807877309417, "phrase": "scalable_performance"}], "paper_keywords": [""], "paper_abstract": "Writing applications that benefit from the massive computational power of future multicore chip multiprocessors will not be an easy task for mainstream programmers accustomed to sequential algorithms rather than parallel ones. this article presents a survey of transactional memory, a mechanism that promises to enable scalable performance while freeing programmers from some of the burden of modifying their parallel code.", "paper_title": "Transactional memory: An overview", "paper_id": "WOS:000248720000003"}