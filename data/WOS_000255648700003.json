{"auto_keywords": [{"score": 0.014394731920519618, "phrase": "fault-prone_modules"}, {"score": 0.014125456693413863, "phrase": "spam_filtering_technique"}, {"score": 0.00481495049065317, "phrase": "fault-prone_software_modules"}, {"score": 0.004489810932879285, "phrase": "novel_approach"}, {"score": 0.004267163206961948, "phrase": "fault-prone_module_detection"}, {"score": 0.0040042529959108605, "phrase": "software_quality"}, {"score": 0.003805591825381666, "phrase": "software_metrics"}, {"score": 0.0034812740368914455, "phrase": "mathematical_models"}, {"score": 0.0031845067058084583, "phrase": "spam_e-mail_detection"}, {"score": 0.003026391655379905, "phrase": "convenient_and_effective_technique"}, {"score": 0.002750721367040336, "phrase": "source_code_modules"}, {"score": 0.0025810006125483835, "phrase": "spam_filter"}, {"score": 0.002391067964886602, "phrase": "experimental_applications"}, {"score": 0.002360796860462937, "phrase": "source_code_repositories"}, {"score": 0.002330972465454762, "phrase": "java"}, {"score": 0.0023013968622710825, "phrase": "open_source_developments"}, {"score": 0.0021049977753042253, "phrase": "actual_fault-prone_modules"}], "paper_keywords": ["fault-prone module", " prediction", " spam filter"], "paper_abstract": "This paper describes a novel approach for detecting fault-prone modules using a spam filtering technique. Fault-prone module detection in source code is important for the assurance of software quality. Most previous fault-prone detection approaches have been based on using software metrics. Such approaches, however, have difficulties in collecting the metrics and constructing mathematical models based on the metrics. Because of the increase in the need for spam e-mail detection, the spam filtering technique has progressed as a convenient and effective technique for text mining. In our approach, fault-prone modules are detected in such a way that the source code modules are considered text files and are applied to the spam filter directly. To show the applicability of our approach, we conducted experimental applications using source code repositories of Java based open source developments. The result of experiments shows that our approach can correctly predict 78% of actual fault-prone modules as fault-prone.", "paper_title": "Prediction of fault-prone software modules using a generic text discriminator", "paper_id": "WOS:000255648700003"}