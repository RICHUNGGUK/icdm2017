{"auto_keywords": [{"score": 0.04887366145178026, "phrase": "pattern_matching"}, {"score": 0.015719716506582538, "phrase": "binary_data"}, {"score": 0.010071429383424904, "phrase": "tree_automaton"}, {"score": 0.004622450915803531, "phrase": "important_operation"}, {"score": 0.00457553517865013, "phrase": "functional_programs"}, {"score": 0.0042819270655224916, "phrase": "structured_terms"}, {"score": 0.0037498152007206815, "phrase": "data_format"}, {"score": 0.003711723285313348, "phrase": "network_applications"}, {"score": 0.003581412258960711, "phrase": "binary_datatype"}, {"score": 0.0032836104153151973, "phrase": "decision_tree_automaton"}, {"score": 0.0032008144731234265, "phrase": "binary_patterns"}, {"score": 0.0027600360731762997, "phrase": "resulting_automaton"}, {"score": 0.0025046245057922557, "phrase": "worst_case"}, {"score": 0.0024289743270061157, "phrase": "alternative_new_approach"}, {"score": 0.002392008392892289, "phrase": "binary_pattern_matching"}, {"score": 0.0021928902836049384, "phrase": "standard_packet_filter_benchmarks"}, {"score": 0.002137537770621167, "phrase": "network_protocols"}, {"score": 0.0021049977753042253, "phrase": "actual_telecom_applications"}], "paper_keywords": [""], "paper_abstract": "Pattern matching is an important operation in functional programs. So far, pattern matching has been investigated in the context of structured terms. This article presents an approach to extend pattern matching to terms without (much of a) structure such as binaries which is the kind of data format that network applications typically manipulate. After introducing the binary datatype and a notation for matching binary data against patterns, we present an algorithm that constructs a decision tree automaton from a set of binary patterns. We then show how the pattern matching using this tree automaton can be made adaptive, how redundant tests can be avoided, and how we can further reduce the size of the resulting automaton by taking interferences between patterns into account. Since the size of the tree automaton is exponential in the worst case, we also present an alternative new approach to compiling binary pattern matching which is conservative in space and analyze its complexity properties. The effectiveness of our techniques is evaluated using standard packet filter benchmarks and on implementations of network protocols taken from actual telecom applications.", "paper_title": "Efficient manipulation of binary data using pattern matching", "paper_id": "WOS:000235071300004"}