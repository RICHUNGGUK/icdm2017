{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "bot_evolution"}, {"score": 0.015628881526176693, "phrase": "genetic_programming"}, {"score": 0.015448758509906445, "phrase": "fitness_value"}, {"score": 0.014963890727406559, "phrase": "computational_expense"}, {"score": 0.009395966072150794, "phrase": "similarity_estimation"}, {"score": 0.007615063827871367, "phrase": "fitness_approximation"}, {"score": 0.004662250189344776, "phrase": "evolutionary_algorithm"}, {"score": 0.004461761855323898, "phrase": "classical_pursuit"}, {"score": 0.004207734323806386, "phrase": "non-playing_characters"}, {"score": 0.004003169429008801, "phrase": "decision_tree"}, {"score": 0.0036660436272785476, "phrase": "computer_game"}, {"score": 0.0036553070575015344, "phrase": "unreal_tournament"}, {"score": 0.003539252646181146, "phrase": "fitness_value_approximation"}, {"score": 0.0033868916699805224, "phrase": "similar_fashion"}, {"score": 0.0033473779327638322, "phrase": "similar_fitness"}, {"score": 0.0032410683344688625, "phrase": "performance_level"}, {"score": 0.0031938648476635225, "phrase": "commonly_employed_approaches"}, {"score": 0.0030118058266380503, "phrase": "weighted_average"}, {"score": 0.0029854041893236714, "phrase": "fitness_values"}, {"score": 0.0029075757820516634, "phrase": "confidence_level"}, {"score": 0.0028151944356239952, "phrase": "second_contribution"}, {"score": 0.002600661525224505, "phrase": "'static'_version"}, {"score": 0.002555247330102505, "phrase": "fixed_inputs"}, {"score": 0.00241658945942583, "phrase": "limited_version"}, {"score": 0.0021998194157393353, "phrase": "similarity_estimation_method"}, {"score": 0.002142426911242168, "phrase": "similar_results"}], "paper_keywords": ["Computationally expensive fitness functions", " Bot evolution", " Fitness approximation", " Similarity estimation", " Genetic programming", " Unreal Tournament 2004 (TM)"], "paper_abstract": "Estimating the fitness value of individuals in an evolutionary algorithm in order to reduce the computational expense of actually calculating the fitness has been a classical pursuit of practitioners. One area which could benefit from progress in this endeavour is bot evolution, i.e. the evolution of non-playing characters in computer games. Because assigning a fitness value to a bot (or rather, the decision tree that controls its behaviour) requires playing the game, the process is very costly. In this work, we introduce two major contributions to speed up this process in the computer game Unreal Tournament 2004 (TM). Firstly, a method for fitness value approximation in genetic programming which is based on the idea that individuals that behave in a similar fashion will have a similar fitness. Thus, similarity of individuals is taken at the performance level, in contrast to commonly employed approaches which are either based on similarity of genotypes or, less frequently, phenotypes. The approximation performs a weighted average of the fitness values of a number of individuals, attaching a confidence level which is based on similarity estimation. The latter is the second contribution of this work, namely a method for estimating the similarity between individuals. This involves carrying out a number of tests consisting of playing a 'static' version of the game (with fixed inputs) with the individuals whose similarity is under evaluation and comparing the results. Because the tests involve a limited version of the game, the computational expense of the similarity estimation plus that of the fitness approximation is much lower than that of directly calculating the fitness. The success of the fitness approximation by similarity estimation method for bot evolution in UT2K4 allows us to expect similar results in environments that share the same characteristics.", "paper_title": "Fitness approximation for bot evolution in genetic programming", "paper_id": "WOS:000321644600016"}