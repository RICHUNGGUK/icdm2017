{"auto_keywords": [{"score": 0.03589699979502346, "phrase": "pcap"}, {"score": 0.013691150845222776, "phrase": "program_counters"}, {"score": 0.010435407865193244, "phrase": "idle_period"}, {"score": 0.00821742470522142, "phrase": "higher_energy_savings"}, {"score": 0.00481495049065317, "phrase": "counter-based_prediction_techniques"}, {"score": 0.004630423009638876, "phrase": "energy_consumption"}, {"score": 0.004477870190590885, "phrase": "major_challenges"}, {"score": 0.004403480614319231, "phrase": "future_computing_systems"}, {"score": 0.004258372598568333, "phrase": "novel_idea"}, {"score": 0.004049590638590415, "phrase": "operating_system"}, {"score": 0.0039380388343479384, "phrase": "complete_design"}, {"score": 0.00389427992231721, "phrase": "program-counter_access_predictor"}, {"score": 0.003724034990158436, "phrase": "access_patterns"}, {"score": 0.003367611042980526, "phrase": "path-based_correlation"}, {"score": 0.003293142761521425, "phrase": "particular_sequence"}, {"score": 0.0031315358193567708, "phrase": "future_occurrences"}, {"score": 0.0029945352738604742, "phrase": "previously_proposed_shutdown_predictors"}, {"score": 0.002815864555488112, "phrase": "particular_behavior"}, {"score": 0.0026626797255348287, "phrase": "prediction_information"}, {"score": 0.0026330549554033876, "phrase": "multiple_executions"}, {"score": 0.0024620842899061614, "phrase": "lower_mispredictions"}, {"score": 0.0023941575109692336, "phrase": "extensive_evaluation_study"}, {"score": 0.0023281003994670714, "phrase": "detailed_trace-driven_simulation"}, {"score": 0.0022893422054387235, "phrase": "actual_linux_implementation"}, {"score": 0.0022013916728990564, "phrase": "lower_average_mispredictions"}, {"score": 0.0021406417439887907, "phrase": "simple_timeout_scheme"}, {"score": 0.0021049977753042253, "phrase": "state-of-the-art_learning_tree_scheme"}], "paper_keywords": ["energy-aware systems", " hardware/software interfaces", " storage management"], "paper_abstract": "Reducing energy consumption has become one of the major challenges in designing future computing systems. This paper proposes a novel idea of using program counters to predict I/O activities in the operating system. It presents a complete design of Program-Counter Access Predictor ( PCAP) that dynamically learns the access patterns of applications and predicts when an I/O device can be shut down to save energy. PCAP uses path-based correlation to observe a particular sequence of program counters leading to each idle period and predicts future occurrences of that idle period. PCAP differs from previously proposed shutdown predictors in its ability to: 1) correlate I/O operations to particular behavior of the applications and users, 2) carry prediction information across multiple executions of the applications, and 3) attain higher energy savings while incurring lower mispredictions. We perform an extensive evaluation study of PCAP using a detailed trace-driven simulation and an actual Linux implementation. Our results show that PCAP achieves lower average mispredictions and higher energy savings than the simple timeout scheme and the state-of-the-art Learning Tree scheme.", "paper_title": "Program counter-based prediction techniques for dynamic power management", "paper_id": "WOS:000236929800001"}