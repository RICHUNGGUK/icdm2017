{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "transactional_memory"}, {"score": 0.0047527118741586055, "phrase": "automatic_mutual_exclusion"}, {"score": 0.004691273968935458, "phrase": "software_transactional_memory"}, {"score": 0.004511663118269957, "phrase": "attractive_basis"}, {"score": 0.004282787299993434, "phrase": "concurrent_programming"}, {"score": 0.003735522846193052, "phrase": "trade-offs_semantic_simplicity"}, {"score": 0.0036158450919833007, "phrase": "efficient_implementation_strategies"}, {"score": 0.003477264432055326, "phrase": "language_constructs"}, {"score": 0.0033006894756949776, "phrase": "type_systems"}, {"score": 0.002973904674745238, "phrase": "atomic_blocks"}, {"score": 0.0026619761089539595, "phrase": "stm_systems"}, {"score": 0.0025266963982350523, "phrase": "optimistic_concurrency"}, {"score": 0.0024939618994290016, "phrase": "lazy_conflict_detection"}, {"score": 0.0023213398100616132, "phrase": "nontrivial_assumptions"}, {"score": 0.002132637840285576, "phrase": "efficient_implementations"}, {"score": 0.0021049977753042253, "phrase": "dangerous_\"zombie\"_computations"}], "paper_keywords": ["Languages", " Theory", " Atomicity", " correctness"], "paper_abstract": "Software Transactional Memory (STM) is an attractive basis for the development of language features for concurrent programming. However, the semantics of these features can be delicate and problematic. In this article we explore the trade-offs semantic simplicity, the viability of efficient implementation strategies, and the flexibility of language constructs. Specifically, we develop semantics and type systems for the constructs of the Automatic Mutual Exclusion (AME) programming model; our results apply also to other constructs, such as atomic blocks. With this semantics as a point of reference, we study several implementation strategies. We model STM systems that use in-place update, optimistic concurrency, lazy conflict detection, and rollback. These strategies are correct only under nontrivial assumptions that we identify and analyze. One important source of errors is that some efficient implementations create dangerous \"zombie\" computations where a transaction keeps running after experiencing a conflict; the assumptions confine the effects of these computations.", "paper_title": "Semantics of Transactional Memory and Automatic Mutual Exclusion", "paper_id": "WOS:000286463800001"}