{"auto_keywords": [{"score": 0.04961597900198376, "phrase": "runtime_monitoring"}, {"score": 0.03610310423475189, "phrase": "original_properties"}, {"score": 0.00481495049065317, "phrase": "lattice-based_sampling_for_path_property_monitoring"}, {"score": 0.0046993598473345395, "phrase": "important_insights"}, {"score": 0.004631335513513859, "phrase": "program's_behavior"}, {"score": 0.004542158659382197, "phrase": "simple_properties"}, {"score": 0.00436890075128947, "phrase": "monitoring_properties"}, {"score": 0.004284755353695709, "phrase": "program_states"}, {"score": 0.004101281992566145, "phrase": "significant_runtime_overhead"}, {"score": 0.0038876302202924644, "phrase": "user_sites"}, {"score": 0.003831310632470526, "phrase": "low_tolerance"}, {"score": 0.0036493838225192883, "phrase": "novel_approach"}, {"score": 0.0035100601949451028, "phrase": "path_properties"}, {"score": 0.0033271045779740683, "phrase": "single_integrated_property"}, {"score": 0.0031231012822640672, "phrase": "necessary_conditions"}, {"score": 0.003092842645798083, "phrase": "property_violations"}, {"score": 0.003048001809453513, "phrase": "resulting_set"}, {"score": 0.0027922467043592597, "phrase": "monitoring_cost"}, {"score": 0.0027383842769094354, "phrase": "violation_detection_power_relative"}, {"score": 0.0025829353063908256, "phrase": "weighting_scheme"}, {"score": 0.0023776656246300063, "phrase": "property_sampling_process"}, {"score": 0.0021886732310288128, "phrase": "monitoring_overhead"}, {"score": 0.0021049977753042253, "phrase": "alternative_techniques"}], "paper_keywords": ["Reliability", " Verification", " Runtime monitoring", " sequencing and path properties", " deployed analysis"], "paper_abstract": "Runtime monitoring can provide important insights about a program's behavior and, for simple properties, it can be done efficiently. Monitoring properties describing sequences of program states and events, however, can result in significant runtime overhead. This is particularly critical when monitoring programs deployed at user sites that have low tolerance for overhead. In this paper we present a novel approach to reducing the cost of runtime monitoring of path properties. A set of original properties are composed to form a single integrated property that is then systematically decomposed into a set of properties that encode necessary conditions for property violations. The resulting set of properties forms a lattice whose structure is exploited to select a sample of properties that can lower monitoring cost, while preserving violation detection power relative to the original properties. The lattice is then complemented with a weighting scheme that assigns each property a different priority that can be adjusted continuously to better drive the property sampling process. Our evaluation using the Hibernate API reveals that our approach produces a rich, structured set of properties that enables control of monitoring overhead, while detecting more violations more quickly than alternative techniques.", "paper_title": "Lattice-Based Sampling for Path Property Monitoring", "paper_id": "WOS:000298498200005"}