{"auto_keywords": [{"score": 0.04261955549208519, "phrase": "aose"}, {"score": 0.04158625487768909, "phrase": "agent-based_software_systems"}, {"score": 0.00481495049065317, "phrase": "product_line_engineering_approach"}, {"score": 0.004717723626157272, "phrase": "multiagent_systems"}, {"score": 0.004669845451682529, "phrase": "agent-oriented_software_engineering"}, {"score": 0.003866443402315402, "phrase": "development_time"}, {"score": 0.0035997452281985465, "phrase": "requirements_specifications"}, {"score": 0.003563172322934695, "phrase": "reusable_assets"}, {"score": 0.0035269696779744266, "phrase": "software_product_line_engineering"}, {"score": 0.0034733518170738517, "phrase": "reuse_technology"}, {"score": 0.003403122817578447, "phrase": "systematic_development"}, {"score": 0.0033173234105492895, "phrase": "similar_software_systems"}, {"score": 0.0029196116767956273, "phrase": "gaia-pl"}, {"score": 0.002889928791032578, "phrase": "gaia-product_line"}, {"score": 0.002831462722290752, "phrase": "agent-based_distributed_software_systems"}, {"score": 0.0026091594819333654, "phrase": "product_line_perspective"}, {"score": 0.0024918548761791435, "phrase": "development_life_cycle"}, {"score": 0.002453934333239467, "phrase": "software_assets"}, {"score": 0.002392008392892289, "phrase": "system_development"}, {"score": 0.002137537770621167, "phrase": "development_effort"}], "paper_keywords": ["Design", " Documentation", " Agent-oriented software engineering", " software product line engineering"], "paper_abstract": "Agent-oriented software engineering (AOSE) has provided powerful and natural, high-level abstractions in which software developers can understand, model and develop complex, distributed systems. Yet, the realization of AOSE partially depends on whether agent-based software systems can achieve reductions in development time and cost similar to other reuse-conscious development methods. Specifically, AOSE does not adequately address requirements specifications as reusable assets. Software product line engineering is a reuse technology that supports the systematic development of a set of similar software systems through understanding, controlling, and managing their common, core characteristics and their differing variation points. In this article, we present an extension to the Gaia AOSE methodology, named Gaia-PL (Gaia-Product Line), for agent-based distributed software systems that enables requirements specifications to be easily reused. We show how our methodology uses a product line perspective to promote reuse in agent-based software systems early in the development life cycle so that software assets can be reused throughout system development and evolution. We also present results from an application to show how Gaia-PL provided reuse that reduced the design and development effort for a large, multiagent system.", "paper_title": "Gaia-PL: A Product Line Engineering Approach for Efficiently Designing Multiagent Systems", "paper_id": "WOS:000295217200004"}