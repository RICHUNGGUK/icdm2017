{"auto_keywords": [{"score": 0.028224865469387038, "phrase": "mcts"}, {"score": 0.00481495049065317, "phrase": "mcts_by_dynamically_adjusting"}, {"score": 0.004761850836420121, "phrase": "komi_value._monte-carlo_tree_search"}, {"score": 0.004657393640152439, "phrase": "unstable_and_unreasonable_results"}, {"score": 0.00439977243970163, "phrase": "nye"}, {"score": 0.004357511171877593, "phrase": "extreme_advantage"}, {"score": 0.004145287175409325, "phrase": "poor_move_selection"}, {"score": 0.004054299982508618, "phrase": "low_signal-to-noise_ratio"}, {"score": 0.0037931018103829427, "phrase": "high_handicap_game"}, {"score": 0.003730465168354817, "phrase": "handicap_advantage"}, {"score": 0.003451517638449501, "phrase": "strong_human_opponent"}, {"score": 0.0033384259516301223, "phrase": "multiple_approaches"}, {"score": 0.003088702479841264, "phrase": "final_game_score"}, {"score": 0.0030376623293574905, "phrase": "variable_amount"}, {"score": 0.002794802975530612, "phrase": "game_tree"}, {"score": 0.002614534850703364, "phrase": "traditional_tree_search"}, {"score": 0.002542890176213921, "phrase": "extreme_positions"}, {"score": 0.002445865715873089, "phrase": "dynamic_komi"}, {"score": 0.0024054226746197706, "phrase": "actual_playing_strength"}, {"score": 0.0023656467839555458, "phrase": "state-of-art_mcts_go_program"}, {"score": 0.002164331818029166, "phrase": "game_search_tree"}, {"score": 0.0021049977753042253, "phrase": "evaluation_function"}], "paper_keywords": [""], "paper_abstract": "Monte-Carlo Tree Search tends to produce unstable and unreasonable results in the game of Go when used in positions with an extreme advantage or disadvantage. This is due to a poor move selection because of the low signal-to-noise ratio. Notably, it frequently occurs, when playing in a high handicap game. The handicap advantage is in some sense a disadvantage for the computer when playing against a strong human opponent. We explore and compare multiple approaches to mitigate this problem by artificially evening out the game by modifying the final game score by a variable amount of points (\"dynamic komi\") before noting the result in the game tree. Moreover. Nye compare the performance of MCTS and the traditional tree search in the context of extreme positions and measure the effect of the dynamic komi on the actual playing strength of a state-of-art MCTS Go program. Based on our results, we formulate a conjecture on the resilience of the game search tree to changes in the evaluation function throughout the search.", "paper_title": "BALANCING MCTS BY DYNAMICALLY ADJUSTING THE KOMI VALUE", "paper_id": "WOS:000297955100001"}