{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "nested_term_graphs"}, {"score": 0.004330099613414957, "phrase": "'nested_term_graphs"}, {"score": 0.004200724305692705, "phrase": "higher-order_terms"}, {"score": 0.0033967510986397946, "phrase": "nested_scope_structure"}, {"score": 0.003320277992107974, "phrase": "higher-order_term"}, {"score": 0.003245520963944678, "phrase": "nested_structure"}, {"score": 0.0031966173935538992, "phrase": "term_graphs"}, {"score": 0.0029629009627331355, "phrase": "atomic_and_nested_function_symbols"}, {"score": 0.002788257824525862, "phrase": "functional_representation"}, {"score": 0.0027254466299651936, "phrase": "tree-like_recursive_graph_specifications"}, {"score": 0.0026040262154057607, "phrase": "usual_term_graphs"}, {"score": 0.0025069746344846397, "phrase": "structural_representation"}, {"score": 0.0024504843466435487, "phrase": "enriched_term_graph_structures"}, {"score": 0.0023591417077156555, "phrase": "corresponding_notions"}, {"score": 0.0021049977753042253, "phrase": "first-order_term_graphs"}], "paper_keywords": [""], "paper_abstract": "We report on work in progress on 'nested term graphs' for formalizing higher-order terms (e.g. finite or infinite lambda-terms), including those expressing recursion (e.g. terms in the lambda-calculus with letrec). The idea is to represent the nested scope structure of a higher-order term by a nested structure of term graphs. Based on a signature that is partitioned into atomic and nested function symbols, we define nested term graphs both in a functional representation, as tree-like recursive graph specifications that associate nested symbols with usual term graphs, and in a structural representation, as enriched term graph structures. These definitions induce corresponding notions of bisimulation between nested term graphs. Our main result states that nested term graphs can be implemented faithfully by first-order term graphs.", "paper_title": "Nested Term Graphs (Work In Progress)", "paper_id": "WOS:000367335400005"}