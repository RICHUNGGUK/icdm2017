{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cache-efficient_swarm_intelligence_algorithms"}, {"score": 0.0046632033374901715, "phrase": "hardware_technology"}, {"score": 0.0046038458731764926, "phrase": "conventional_approaches"}, {"score": 0.004545240514015278, "phrase": "software_development"}, {"score": 0.0043738432231020885, "phrase": "efficient_algorithms"}, {"score": 0.0043181530164057135, "phrase": "run-time_environments"}, {"score": 0.0041287394089001405, "phrase": "overly_simplified_hardware_abstraction_model"}, {"score": 0.004050116768809519, "phrase": "software_development_procedure"}, {"score": 0.0038973170902076707, "phrase": "hypothetical_hardware_model"}, {"score": 0.0038476708316022823, "phrase": "real_hardware_design"}, {"score": 0.0036553070575015344, "phrase": "efficient_algorithm"}, {"score": 0.00334144503360907, "phrase": "memory_hierarchy"}, {"score": 0.003194736764837261, "phrase": "algorithm_design"}, {"score": 0.003093893243443715, "phrase": "cache-aware_development"}, {"score": 0.002864628676257225, "phrase": "developed_algorithm"}, {"score": 0.0025034338848015187, "phrase": "particle_swarm_optimization"}, {"score": 0.0024088451312725924, "phrase": "genetic_algorithm"}, {"score": 0.0022882500116799777, "phrase": "simulation_results"}], "paper_keywords": [""], "paper_abstract": "With advances in hardware technology, conventional approaches to software development are not effective for developing efficient algorithms for run-time environments. The problem comes from the overly simplified hardware abstraction model in the software development procedure. The mismatch between the hypothetical hardware model and real hardware design should be compensated for in designing an efficient algorithm. In this paper, we focus on two schemes: one is the memory hierarchy, and the other is the algorithm design. Both the cache properties and the cache-aware development are investigated. We then propose a few simple guidelines for revising a developed algorithm in order to increase the utilization of the cache. To verify the effectiveness of the guidelines proposed, optimization techniques, including particle swarm optimization (PSO) and the genetic algorithm (GA), are employed. Simulation results demonstrate that the guidelines are potentially helpful for revising various algorithms. (C) 2010 Elsevier Inc. All rights reserved.", "paper_title": "A refactoring method for cache-efficient swarm intelligence algorithms", "paper_id": "WOS:000302511900004"}