{"auto_keywords": [{"score": 0.04741892958012685, "phrase": "malicious_messages"}, {"score": 0.02810089308353829, "phrase": "attack_message"}, {"score": 0.004815106378510202, "phrase": "tcp"}, {"score": 0.004655924035639928, "phrase": "effective_approach"}, {"score": 0.0043533862892678864, "phrase": "message_formats"}, {"score": 0.004195418010131832, "phrase": "crucial_implementation_issues"}, {"score": 0.004139401327448803, "phrase": "full_tcp"}, {"score": 0.0037930162319613856, "phrase": "complete_prevention"}, {"score": 0.0036676174658755683, "phrase": "target_applications"}, {"score": 0.0036430378180975667, "phrase": "application_transparency"}, {"score": 0.0035344448639851827, "phrase": "server_and_client_applications"}, {"score": 0.0034290777464571864, "phrase": "end-to-end_semantics"}, {"score": 0.003293442130869165, "phrase": "existing_approaches"}, {"score": 0.0031738126998349775, "phrase": "efficient_mechanism"}, {"score": 0.002927626967420519, "phrase": "ip-fragmented_packet"}, {"score": 0.0027370835853738626, "phrase": "forwarded_packet"}, {"score": 0.0026199146891406, "phrase": "store-through_mechanism"}, {"score": 0.00251620434048784, "phrase": "subsequent_packets"}, {"score": 0.0024084679931209514, "phrase": "linux_kernel"}, {"score": 0.0022898630573629144, "phrase": "simple_ip_forwarder"}, {"score": 0.002199189123395672, "phrase": "ip-fragmented_packets"}, {"score": 0.002155204688099519, "phrase": "experimental_results"}, {"score": 0.0021263705039915198, "phrase": "cpu_and_memory_usage"}], "paper_keywords": ["network security", " network intrusion detection/prevention systems", " layer7-aware NIDS/NIPS", " TCP reassembler"], "paper_abstract": "Exploiting layer7 context is an effective approach to improving the accuracy of detecting malicious messages in network intrusion detection/prevention systems (NIDS/NIPSs). Layer7 context enables us to inspect message formats and the message exchanged order. Unfortunately, layer7-aware NIDS/NIPSs pose crucial implementation issues because they require full TCP and IP reassembly without losing 1) complete prevention, 2) performance, 3) application transparency, or 4) transport transparency. Complete prevention means that the NIDS/NIPS should prevent malicious messages from reaching target applications. Application transparency means not requiring any modifications to and/or reconfiguration of server and client applications. Transport transparency is not to disrupt the end-to-end semantics of TCP/IP. To the best of our knowledge, none of the existing approaches meet all of these requirements. We have developed an efficient mechanism for layer7-aware NIDS/NIPSs that does meet the above requirements. Our store-through does this by forwarding each out-of-order or IP-fragmented packet immediately after copying the packet even if it has not been checked yet by an NIDS/NIPS sensor. Although the forwarded packet might turn out to be a part of an attack message, the store-through mechanism can successfully defend against the attack by blocking one of the subsequent packets that contain another part of attack message. Testing of a prototype in Linux kernel 2.4.30 demonstrated that the overhead of our mechanism is negligible compared with that of a simple IP forwarder even with the presence of out-of-order and IP-fragmented packets. In addition, the experimental results suggest that the CPU and memory usage incurred by our store-through is not significant.", "paper_title": "TCP reassembler for layer7-aware network intrusion detection/prevention systems", "paper_id": "WOS:000252020000015"}