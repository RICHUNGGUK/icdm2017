{"auto_keywords": [{"score": 0.04491514595853308, "phrase": "prefix_shifts"}, {"score": 0.004429727701202369, "phrase": "special_class"}, {"score": 0.0032702516771609957, "phrase": "negative_answer"}, {"score": 0.0031966173935538992, "phrase": "open_problem"}, {"score": 0.0031246358910995316, "phrase": "f._ruskey"}, {"score": 0.0030775481952376987, "phrase": "a._williams"}, {"score": 0.002940585674530998, "phrase": "proc"}, {"score": 0.002874257080906824, "phrase": "annual_international_computing_and_combinatorics_conference"}, {"score": 0.002203200914130907, "phrase": "first_two_bits"}, {"score": 0.0021049977753042253, "phrase": "entire_bitstring"}], "paper_keywords": ["generating combinations", " gray codes", " prefix shifts"], "paper_abstract": "We investigate the problem of listing combinations using a special class of operations, prefix shifts. Combinations are represented as bitstrings of 0's and 1's, and prefix shifts are the operations of rotating some prefix of a bitstring by one position to left or right. We give a negative answer to an open problem asked by F. Ruskey and A. Williams (Generating combinations by prefix shifts, In Proc. 11th Annual International Computing and Combinatorics Conference 2005, LNCS 3595, Springer, 2005, pp.570 similar to 576), that is whether we can generate combinations by only using three very basic prefix shifts on bitstrings, which are transposition of the first two bits and the rotation of the entire bitstring by one position in either direction (i.e., applying the permutations sigma(2), sigma (n) and sigma (-1)(n) to the indices of the bitstrings).", "paper_title": "Generating combinations by three basic operations", "paper_id": "WOS:000251010700014"}