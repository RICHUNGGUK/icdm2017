{"auto_keywords": [{"score": 0.004430248457624686, "phrase": "complex_loop_nest_optimizers"}, {"score": 0.004263168852219819, "phrase": "algorithmic_complexity"}, {"score": 0.003750260412839128, "phrase": "affine_scheduling_problems"}, {"score": 0.003631945391344252, "phrase": "sub-polyhedral_scheduling_technique"}, {"score": 0.003362944428837724, "phrase": "simple_polynomial_time_algorithms"}, {"score": 0.0033200826267264383, "phrase": "under-approximate_a_general_polyhedron"}, {"score": 0.003093893243443715, "phrase": "state-of-the-art_pluto_compiler"}, {"score": 0.0025034338848015187, "phrase": "under-approximated_system"}, {"score": 0.0024556852466581527, "phrase": "asymptotic_gains"}, {"score": 0.00236289633510808, "phrase": "practically_significant_improvements"}, {"score": 0.0022882500116799777, "phrase": "traditional_lp_solver"}, {"score": 0.0021049977753042253, "phrase": "pluto-optimized_code"}], "paper_keywords": ["Approximations", " Complexity", " Scheduling", " Optimization", " Performance", " Approximation Algorithms", " Complexity Theory", " Compiler Optimizations", " Parallelism", " Loop Transformations", " Affine Scheduling", " Optimization", " Geometric Algorithms"], "paper_abstract": "Polyhedral compilation has been successful in the design and implementation of complex loop nest optimizers and parallelizing compilers. The algorithmic complexity and scalability limitations remain one important weakness. We address it using sub-polyhedral under-aproximations of the systems of constraints resulting from affine scheduling problems. We propose a sub-polyhedral scheduling technique using (Unit-)Two-Variable-Per-Inequality or (U)TVPI Polyhedra. This technique relies on simple polynomial time algorithms to under-approximate a general polyhedron into (U) TVPI polyhedra. We modify the state-of-the-art PLuTo compiler using our scheduling technique, and show that for a majority of the Polybench (2.0) kernels, the above under-approximations yield polyhedra that are non-empty. Solving the under-approximated system leads to asymptotic gains in complexity, and shows practically significant improvements when compared to a traditional LP solver. We also verify that code generated by our sub-polyhedral parallelization prototype matches the performance of PLuTo-optimized code when the under-approximation preserves feasibility.", "paper_title": "Sub-Polyhedral Scheduling Using (Unit-)Two-Variable-Per-Inequality Polyhedra", "paper_id": "WOS:000318629900041"}