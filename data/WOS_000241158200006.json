{"auto_keywords": [{"score": 0.04235866539811938, "phrase": "efficient_global_evaluation_plan"}, {"score": 0.010217265021288623, "phrase": "query_matching_techniques"}, {"score": 0.009301094270292678, "phrase": "query_stacking_technique"}, {"score": 0.00481495049065317, "phrase": "materialized_views"}, {"score": 0.004614643339546038, "phrase": "data_warehouses"}, {"score": 0.004528301408585875, "phrase": "query_performance"}, {"score": 0.00438105507792004, "phrase": "great_challenge"}, {"score": 0.004159241394996858, "phrase": "multi-query_optimization_techniques"}, {"score": 0.003911507861487047, "phrase": "ibm"}, {"score": 0.0038565581713816063, "phrase": "tm"}, {"score": 0.003073545175760353, "phrase": "efficient_global_plans"}, {"score": 0.0029454679553901613, "phrase": "query_stacking"}, {"score": 0.002917736974519881, "phrase": "query_sharing"}, {"score": 0.0028766278519176355, "phrase": "different_steps"}, {"score": 0.00247249708860822, "phrase": "query_sharing_technique"}, {"score": 0.0023694065215394593, "phrase": "second_step"}, {"score": 0.0022070310530794097, "phrase": "experimental_evaluation"}, {"score": 0.0021656385587456952, "phrase": "execution_time"}], "paper_keywords": [""], "paper_abstract": "Materialized views (MVs) are used in databases and data warehouses to greatly improve query performance. In this context, a great challenge is to exploit commonalities among the views and to employ multi-query optimization techniques in order to derive an efficient global evaluation plan for refreshing the MVs concurrently. IBM DB2 (R) Universal Database (TM) (DB2 UDB) provides two query matching techniques, query stacking and query sharing, to exploit commonalities among the MVs, and to construct an efficient global evaluation plan. When the number of MVs is large, memory and time restrictions prevent us from using both query matching techniques in constructing efficient global plans. We suggest an approach that applies the query stacking and query sharing techniques in different steps. The query stacking technique is applied first, and the outcome is exploited to define groups of MVs. The number of MVs in each group is restricted. This allows the query sharing technique to be applied only within groups in a second step. Finally, the query stacking technique is used again to determine an efficient global evaluation plan. An experimental evaluation shows that the execution time of the plan generated by our approach is very close to that of the plan generated using both query matching techniques without restriction. This result is valid no matter how big the database is.", "paper_title": "Preprocessing for fast refreshing materialized views in DB2", "paper_id": "WOS:000241158200006"}