{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "cpi_component_performance"}, {"score": 0.004626255242038005, "phrase": "software_developers"}, {"score": 0.004327981760540394, "phrase": "software-hardware_interactions"}, {"score": 0.004158290806404304, "phrase": "processor_performance"}, {"score": 0.004048860957751714, "phrase": "individual_cycles"}, {"score": 0.0038385317554884713, "phrase": "instruction_components"}, {"score": 0.003543273649210823, "phrase": "active_computation"}, {"score": 0.0031845067058084583, "phrase": "accurate_cpi_components"}, {"score": 0.002900426826591769, "phrase": "superscalar_processors"}, {"score": 0.002537880772794665, "phrase": "event_handling_overlap"}, {"score": 0.002438203996977464, "phrase": "authors'_counter_architecture"}, {"score": 0.0023113506171584157, "phrase": "analytical_superscalar_performance_model"}, {"score": 0.002220551141101661, "phrase": "overlap_effects"}, {"score": 0.0021049977753042253, "phrase": "existing_methods"}], "paper_keywords": [""], "paper_abstract": "Software developers can gain insight into software-hardware interactions by decomposing processor performance into individual cycles-per-instruction components that differentiate cycles consumed in active computation from those spent handling various miss events. Constructing accurate CPI components for out-of-order superscalar processors is complicated, however, because computation and miss event handling overlap. The authors' counter architecture, using an analytical superscalar performance model, handles overlap effects more accurately than existing methods.", "paper_title": "A top-down approach to architecting CPI component performance counters", "paper_id": "WOS:000246455000011"}