{"auto_keywords": [{"score": 0.04240865937650944, "phrase": "optimal_configuration"}, {"score": 0.03571085515932045, "phrase": "function_structure_model"}, {"score": 0.00481495049065317, "phrase": "object-oriented_performance_components"}, {"score": 0.004663533386096864, "phrase": "parameter_uncertainty"}, {"score": 0.004621148492564008, "phrase": "model_form_uncertainty"}, {"score": 0.004435112270935294, "phrase": "limited_design_information"}, {"score": 0.004374772264092067, "phrase": "early_product_development_stage"}, {"score": 0.004256533389293113, "phrase": "significant_impacts"}, {"score": 0.004179480763003705, "phrase": "complex_products"}, {"score": 0.0040111533608228195, "phrase": "performance_models"}, {"score": 0.003956558420993431, "phrase": "graph_grammars"}, {"score": 0.0037798652680135106, "phrase": "model_form"}, {"score": 0.0037454814403672697, "phrase": "parameter_uncertainties"}, {"score": 0.0036944890904337833, "phrase": "product_conceptual_design_stage"}, {"score": 0.003611034322786669, "phrase": "hybrid_performance_component_database"}, {"score": 0.003545625043276134, "phrase": "object-oriented_modeling_method"}, {"score": 0.003465521267039616, "phrase": "model_evolution_history"}, {"score": 0.003310684108128973, "phrase": "reference_template"}, {"score": 0.00325069754015951, "phrase": "system_models"}, {"score": 0.0032064196784562017, "phrase": "graph_grammars_rules"}, {"score": 0.0031627430133087616, "phrase": "product_configuration"}, {"score": 0.0031339552246625463, "phrase": "layout_design"}, {"score": 0.0030771609361092164, "phrase": "component_interface_parameters"}, {"score": 0.0029396242707327986, "phrase": "meta-model-based_method"}, {"score": 0.0028600623410146796, "phrase": "performance_component_graph"}, {"score": 0.0028340217672278975, "phrase": "mathematical_models"}, {"score": 0.0027954035431845344, "phrase": "optimization_objective_function"}, {"score": 0.002769950045729965, "phrase": "associated_constraints"}, {"score": 0.0027073229284666294, "phrase": "optimization_procedure"}, {"score": 0.0026704265616705023, "phrase": "performance_simulation_framework"}, {"score": 0.0025981315738078793, "phrase": "optimization_problem"}, {"score": 0.0025627194819793347, "phrase": "final_result"}, {"score": 0.0024593458703463474, "phrase": "performance_components"}, {"score": 0.00243694486220507, "phrase": "optimal_design_parameters"}, {"score": 0.0023386327847292805, "phrase": "design_variables"}, {"score": 0.002234031373581961, "phrase": "optimal_conceptual_design"}, {"score": 0.0022136780933978612, "phrase": "tank_movement_systems"}, {"score": 0.002163600705898299, "phrase": "deign_results"}, {"score": 0.0021243539405631866, "phrase": "proposed_method"}, {"score": 0.0021049977753042253, "phrase": "traditional_optimization_method"}], "paper_keywords": ["model uncertainty", " conceptual optimization", " graph grammar", " meta-model"], "paper_abstract": "Compared with parameter uncertainty, model form uncertainty is difficult and expensive to alleviate due to limited design information at the early product development stage, but it may have significant impacts on performances of complex products. In this article, an optimal configuration of performance models based on graph grammars is presented to seek a solution for simultaneously resolving model form and parameter uncertainties at the product conceptual design stage. First, a hybrid performance component database is built using object-oriented modeling method taking account of the model evolution history; second, a function structure model is taken as the reference template to dynamically generate system models driven by graph grammars rules derived from product configuration and layout design and matching of component interface parameters with flows in the function structure model; third, a meta-model-based method is adopted to transform the performance component graph into mathematical models including the optimization objective function and associated constraints; fourth, an optimization procedure combined with performance simulation framework is invoked to solve the optimization problem. The final result is a solution that includes the optimal configuration of performance components and optimal design parameters, and thus, much larger design space than traditional mere optimization of design variables is explored. The method is tested by the optimal conceptual design of tank movement systems, and comparisons of deign results obtained by the proposed method and traditional optimization method are conducted to illustrate the efficacy of the method.", "paper_title": "Automatic product conceptual optimization based on object-oriented performance components and graph grammars", "paper_id": "WOS:000355006800006"}