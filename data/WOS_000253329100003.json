{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "linear"}, {"score": 0.038647880829103184, "phrase": "linear_tabling"}, {"score": 0.036873912027461576, "phrase": "looping_subgoals"}, {"score": 0.03347486236925366, "phrase": "lazy_strategy"}, {"score": 0.0046813628851623676, "phrase": "growing_interest"}, {"score": 0.0045982799222088235, "phrase": "logic_programming_community"}, {"score": 0.004470676692857709, "phrase": "program_analysis"}, {"score": 0.004425154757824971, "phrase": "deductive_databases"}, {"score": 0.00440256713630382, "phrase": "theorem_proving"}, {"score": 0.004380094303081356, "phrase": "model_checking"}, {"score": 0.00434659901732443, "phrase": "logic-based_probabilistic_learning"}, {"score": 0.004119166170145527, "phrase": "subsequent_variant_subgoals"}, {"score": 0.004098133997961539, "phrase": "early_resolution_mechanisms"}, {"score": 0.004035677620348732, "phrase": "oldt"}, {"score": 0.00401509802166939, "phrase": "slg"}, {"score": 0.0038638168887358475, "phrase": "iterative_approach"}, {"score": 0.0038539376027509876, "phrase": "named_linear_tabling"}, {"score": 0.003824450466148272, "phrase": "considerable_attention"}, {"score": 0.0036335318564543044, "phrase": "different_methods"}, {"score": 0.0031641758661104117, "phrase": "good_locality"}, {"score": 0.003076246334234077, "phrase": "eager_strategy"}, {"score": 0.002805157565568473, "phrase": "interdependent_subgoals"}, {"score": 0.002769440203069354, "phrase": "topmost_looping_subgoal"}, {"score": 0.002685558057339722, "phrase": "new_answers"}, {"score": 0.002671826148752874, "phrase": "naive_re-evaluation"}, {"score": 0.002531801822860214, "phrase": "-naive_optimization"}, {"score": 0.0024867730975473012, "phrase": "bottom-up_evaluation"}, {"score": 0.0024488134325918337, "phrase": "redundant_joins"}, {"score": 0.002285022889269964, "phrase": "optimization_technique"}, {"score": 0.0021931680053401963, "phrase": "optimization_linear_tabling"}, {"score": 0.0021049999662964016, "phrase": "slg."}], "paper_keywords": ["Prolog", " semi-naive evaluation", " recursion", " tabling", " memoization", " linear tabling"], "paper_abstract": "Recently there has been a growing interest in research in tabling in the logic programming community because of its usefulness in a variety of application domains including program analysis, parsing, deductive databases, theorem proving, model checking, and logic-based probabilistic learning. The main idea of tabling is to memorize the answers to some subgoals and use the answers to resolve subsequent variant subgoals. Early resolution mechanisms proposed for tabling such as OLDT and SLG rely on suspension and resumption of subgoals to compute fixpoints. Recently, the iterative approach named linear tabling has received considerable attention because of its simplicity, ease of implementation, and good space efficiency. Linear tabling is a framework from which different methods can be derived on the basis of the strategies used in handling looping subgoals. One decision concerns when answers are consumed and returned. This article describes two strategies, namely, lazy and eager strategies, and compares them both qualitatively and quantitatively. The results indicate that, while the lazy strategy has good locality and is well suited for finding all solutions, the eager strategy is comparable in speed with the lazy strategy and is well suited for programs with cuts. Linear tabling relies on depth-first iterative deepening rather than suspension to compute fixpoints. Each cluster of interdependent subgoals as represented by a topmost looping subgoal is iteratively evaluated until no subgoal in it can produce any new answers. Naive re-evaluation of all looping subgoals, albeit simple, may be computationally unacceptable. In this article, we also introduce semi-naive optimization, an effective technique employed in bottom-up evaluation of logic programs to avoid redundant joins of answers, into linear tabling. We give the conditions for the technique to be safe (i.e., sound and complete) and propose an optimization technique called early answer promotion to enhance its effectiveness. Benchmarking in B-Prolog demonstrates that with this optimization linear tabling compares favorably well in speed with the state-of-the-art implementation of SLG.", "paper_title": "Linear tabling strategies and optimizations", "paper_id": "WOS:000253329100003"}