{"auto_keywords": [{"score": 0.00481495049065317, "phrase": "embedded_compiler"}, {"score": 0.004769444094319619, "phrase": "program_transformation_rules"}, {"score": 0.004724365740062236, "phrase": "domain-specific_languages"}, {"score": 0.0043786774510943625, "phrase": "specific_domain"}, {"score": 0.004296264970612285, "phrase": "high-level_domain-specific_notations"}, {"score": 0.004215397034321004, "phrase": "domain-specific_properties"}, {"score": 0.0037432199549135826, "phrase": "specific_treatment"}, {"score": 0.00369022262431101, "phrase": "large_and_potentially_increasing_number"}, {"score": 0.0034037221513153566, "phrase": "dsl_compiler"}, {"score": 0.003371508176308189, "phrase": "control-flow_sensitive_concrete-syntax"}, {"score": 0.0031845067058084583, "phrase": "source_code"}, {"score": 0.002923214590192792, "phrase": "relevant_constructs"}, {"score": 0.002787406053363446, "phrase": "control-flow_graph_traversal"}, {"score": 0.0025954008219792337, "phrase": "new_compilation_steps"}, {"score": 0.002337403139264533, "phrase": "network_gateway_development"}, {"score": 0.0021049977753042253, "phrase": "john_wiley"}], "paper_keywords": ["DSL", " compiler construction", " internal (embedded) languages", " embedded compilers", " program transformation"], "paper_abstract": "Domain-specific languages (DSLs) are well-recognized to ease programming and improve robustness for a specific domain, by providing high-level domain-specific notations and checks of domain-specific properties. The compiler of a DSL, however, is often difficult to develop and maintain, because of the need to define a specific treatment for a large and potentially increasing number of language constructs. To address this issue, we propose an approach for specifying a DSL compiler using control-flow sensitive concrete-syntax based matching rules. These rules either collect information about the source code to carry out checks or perform transformations to carry out compilation. Because rules only mention the relevant constructs, using their concrete syntax, and hide the complexity of control-flow graph traversal, it is easy to understand the purpose of each rule. Furthermore, new compilation steps can be added using only a small number of lines of code. We explore this approach in the context of the z2z DSL for network gateway development and show that it is beneficial to implement the core of its compiler in this manner.Copyright (c) 2013 John Wiley & Sons, Ltd.", "paper_title": "Implementing an embedded compiler using program transformation rules", "paper_id": "WOS:000347533400003"}