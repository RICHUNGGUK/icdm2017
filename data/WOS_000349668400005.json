{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "answer_set_programming"}, {"score": 0.004742730438544081, "phrase": "boolean_constraint_technology"}, {"score": 0.004671588539217021, "phrase": "tremendous_progress"}, {"score": 0.004223708778943785, "phrase": "different_types"}, {"score": 0.00418134346679498, "phrase": "problem_instances"}, {"score": 0.003995876175614403, "phrase": "algorithm_parameters"}, {"score": 0.0030431198971423937, "phrase": "existing_benchmarking_data"}, {"score": 0.002878785759716458, "phrase": "multi-criteria_optimization_problems"}, {"score": 0.0028355237433457313, "phrase": "corresponding_asp_encodings"}, {"score": 0.0027929100418926725, "phrase": "resulting_encodings"}, {"score": 0.002723301730223192, "phrase": "different_settings"}, {"score": 0.0026420518944303716, "phrase": "optimum_schedules"}, {"score": 0.002437012847684331, "phrase": "large_runtime_data_sets"}, {"score": 0.0021263705039915198, "phrase": "parallel_schedules"}, {"score": 0.0021049977753042253, "phrase": "multi-processor_machines"}], "paper_keywords": ["algorithm schedules", " answer set programming", " portfolio-based solving"], "paper_abstract": "Although Boolean Constraint Technology has made tremendous progress over the last decade, the efficacy of state-of-the-art solvers is known to vary considerably across different types of problem instances, and is known to depend strongly on algorithm parameters. This problem was addressed by means of a simple, yet effective approach using handmade, uniform, and unordered schedules of multiple solvers in ppfolio, which showed very impressive performance in the 2011 Satisfiability Testing (SAT) Competition. Inspired by this, we take advantage of the modeling and solving capacities of Answer Set Programming (ASP) to automatically determine more refined, that is, nonuniform and ordered solver schedules from the existing benchmarking data. We begin by formulating the determination of such schedules as multi-criteria optimization problems and provide corresponding ASP encodings. The resulting encodings are easily customizable for different settings, and the computation of optimum schedules can mostly be done in the blink of an eye, even when dealing with large runtime data sets stemming from many solvers on hundreds to thousands of instances. Also, the fact that our approach can be customized easily enabled us to swiftly adapt it to generate parallel schedules for multi-processor machines.", "paper_title": "aspeed: Solver scheduling via answer set programming", "paper_id": "WOS:000349668400005"}