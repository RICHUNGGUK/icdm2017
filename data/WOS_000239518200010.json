{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "community"}, {"score": 0.004646852519870358, "phrase": "useful_relationships"}, {"score": 0.003959863717046575, "phrase": "invasive_superposition_morphisms"}, {"score": 0.00378767277402891, "phrase": "architecture_design_language"}, {"score": 0.003434662174045939, "phrase": "component_extension_relationships"}, {"score": 0.003198705576491802, "phrase": "important_purpose"}, {"score": 0.002874726518572154, "phrase": "aspect_oriented_software_development"}, {"score": 0.00260657976055413, "phrase": "regulative_superposition"}, {"score": 0.0022404162042797262, "phrase": "extension_morphisms"}], "paper_keywords": [""], "paper_abstract": "Superpositions are useful relationships between programs or components in component based approaches to software development. We study the application of invasive superposition morphisms between components in the architecture design language CommUnity. This kind of morphism allows us to characterise component extension relationships, and in particular, serves an important purpose for enhancing components to implement certain aspects, in the sense of aspect oriented software development. We show how this kind of morphism combines with regulative superposition and refinement morphisms, on which CommUnity relies, and illustrate the need and usefulness of extension morphisms for the implementation of aspects, in particular, certain fault tolerance related aspects, by means of a case study.", "paper_title": "Extension morphisms for CommUnity", "paper_id": "WOS:000239518200010"}