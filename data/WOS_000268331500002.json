{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "asp"}, {"score": 0.04829232763520233, "phrase": "answer_sets"}, {"score": 0.012542480057240764, "phrase": "default_logics"}, {"score": 0.011148007930478418, "phrase": "logic_program"}, {"score": 0.009675748358240586, "phrase": "standard_answer_sets"}, {"score": 0.004116440453049531, "phrase": "alternative_approach"}, {"score": 0.004000741805312148, "phrase": "incremental_constructions"}, {"score": 0.0029793675408245047, "phrase": "characteristic_properties"}, {"score": 0.0027610089418453614, "phrase": "integrity_constraints"}, {"score": 0.002486589906779091, "phrase": "sld-like_proof_procedure"}, {"score": 0.002359759876402679, "phrase": "query-oriented_computations"}, {"score": 0.0021763278640166707, "phrase": "clarks_completion"}, {"score": 0.0021049977753042253, "phrase": "program_completion"}], "paper_keywords": ["Logic Programming", " Answer Set Programming", " Monotonicity"], "paper_abstract": "Answer set programming (ASP) does not allow for incrementally constructing answer sets or locally validating constructions like proofs by only looking at a part of the given program. In this article, we elaborate upon an alternative approach to ASP that allows for incremental constructions. Our approach draws its basic intuitions from the area of default logics. We investigate the feasibility of the concept of semi-monotonicity known from default logics as a basis of incrementality. On the one hand, every logic program has at least one answer set in our alternative setting, which moreover can be constructed incrementally based on generating rules. On the other hand, the approach may produce answer sets lacking characteristic properties of standard answer sets, such as being a model of the given program. We show how integrity constraints can be used to re-establish such properties, even up to correspondence with standard answer sets. Furthermore, we develop an SLD-like proof procedure for our incremental approach to ASP, which allows for query-oriented computations. Also, we provide a characterization of our definition of answer sets via a modification of Clarks completion. Based on this notion of program completion, we present an algorithm for computing the answer sets of a logic program in our approach.", "paper_title": "Monotonic Answer Set Programming", "paper_id": "WOS:000268331500002"}