{"auto_keywords": [{"score": 0.031369790019902345, "phrase": "negative_tuples"}, {"score": 0.015719716506582538, "phrase": "sliding-window_queries"}, {"score": 0.012036646393820604, "phrase": "input-triggered_approach"}, {"score": 0.006566208825956209, "phrase": "newly_inserted_tuples"}, {"score": 0.006472702296479012, "phrase": "query_pipeline"}, {"score": 0.0064264463301046465, "phrase": "tuple_expiration"}, {"score": 0.0060680309381871125, "phrase": "negative_tuples_approach"}, {"score": 0.004595263305771512, "phrase": "data_stream_management_systems"}, {"score": 0.004449045430179066, "phrase": "query_reevaluation_method"}, {"score": 0.004110831924517065, "phrase": "preceding_window"}, {"score": 0.003965684670332574, "phrase": "incremental_evaluation_method"}, {"score": 0.003853251284913932, "phrase": "incremental_evaluation"}, {"score": 0.0032774911048411804, "phrase": "tuple_insertion"}, {"score": 0.0030609320300175953, "phrase": "unpredictable_output_delays"}, {"score": 0.0028279422436488116, "phrase": "pipeline_bandwidth"}, {"score": 0.0027775064989253575, "phrase": "detailed_study"}, {"score": 0.002747676657869163, "phrase": "incremental_evaluation_pipeline"}, {"score": 0.0026986685585382347, "phrase": "incremental_query_operators"}, {"score": 0.002328326982534932, "phrase": "output_delay"}, {"score": 0.0023033100935570755, "phrase": "query_answer"}, {"score": 0.0022785613865764923, "phrase": "detailed_experimental_study"}, {"score": 0.0022379017425216917, "phrase": "prototype_system_implementation"}, {"score": 0.0021049977753042253, "phrase": "proposed_optimizations"}], "paper_keywords": ["data stream management systems", " pipelined query execution", " negative tuples"], "paper_abstract": "Two research efforts have been conducted to realize sliding-window queries in data stream management systems, namely, query reevaluation and incremental evaluation. In the query reevaluation method, two consecutive windows are processed independently of each other. On the other hand, in the incremental evaluation method, the query answer for a window is obtained incrementally from the answer of the preceding window. In this paper, we focus on the incremental evaluation method. Two approaches have been adopted for the incremental evaluation of sliding-window queries, namely, the input-triggered approach and the negative tuples approach. In the input-triggered approach, only the newly inserted tuples flow in the query pipeline and tuple expiration is based on the timestamps of the newly inserted tuples. On the other hand, in the negative tuples approach, tuple expiration is separated from tuple insertion where a tuple flows in the pipeline for every inserted or expired tuple. The negative tuples approach avoids the unpredictable output delays that result from the input-triggered approach. However, negative tuples double the number of tuples through the query pipeline, thus reducing the pipeline bandwidth. Based on a detailed study of the incremental evaluation pipeline, we classify the incremental query operators into two classes according to whether an operator can avoid the processing of negative tuples or not. Based on this classification, we present several optimization techniques over the negative tuples approach that aim to reduce the overhead of processing negative tuples while avoiding the output delay of the query answer. A detailed experimental study, based on a prototype system implementation, shows the performance gains over the input-triggered approach of the negative tuples approach when accompanied with the proposed optimizations.", "paper_title": "Incremental evaluation of sliding-window queries over data streams", "paper_id": "WOS:000242041400005"}