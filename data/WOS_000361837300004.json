{"auto_keywords": [{"score": 0.04264314285320382, "phrase": "hpc."}, {"score": 0.00481495049065317, "phrase": "high_scalability"}, {"score": 0.0047555023078686386, "phrase": "dynamically_adaptive_algorithms"}, {"score": 0.00469678464293492, "phrase": "high-performance_computing"}, {"score": 0.0046388533768245924, "phrase": "hpc"}, {"score": 0.0045249263666466005, "phrase": "non-trivial_task"}, {"score": 0.004441359373498799, "phrase": "invasive_paradigm"}, {"score": 0.004386503433248535, "phrase": "compute_migration"}, {"score": 0.004305481798183612, "phrase": "efficient_alternative"}, {"score": 0.003971262520692664, "phrase": "core-distribution_scheduler"}, {"score": 0.003825849505589868, "phrase": "computational_power"}, {"score": 0.0034206776096452015, "phrase": "different_benchmark_suites"}, {"score": 0.003336614511719501, "phrase": "artificial_workload"}, {"score": 0.0031944286166257466, "phrase": "dynamically_adaptive_shallow_water_simulations"}, {"score": 0.003115908199991072, "phrase": "concurrently_executed_adaptivity_parameter_studies"}, {"score": 0.003058311424780802, "phrase": "tsunami"}, {"score": 0.0029097582786754444, "phrase": "significantly_faster_overall_execution_times"}, {"score": 0.002803104254950008, "phrase": "alternative_approaches"}, {"score": 0.0027512482368183596, "phrase": "dynamic_resource_management"}, {"score": 0.0024595996811420566, "phrase": "urgent_computing"}, {"score": 0.0023990982005125763, "phrase": "strong_scalability_challenges"}, {"score": 0.0022542611024997474, "phrase": "invasive_migration"}, {"score": 0.0021580985506699105, "phrase": "similar_classes"}, {"score": 0.0021049977753042253, "phrase": "dynamic_resource_requirements"}], "paper_keywords": ["Invasive computing", " Compute migration", " High-performance computing", " Hybrid parallelization", " Dynamic adaptive mesh refinement"], "paper_abstract": "Achieving high scalability with dynamically adaptive algorithms in high-performance computing (HPC) is a non-trivial task. The invasive paradigm using compute migration represents an efficient alternative to classical data migration approaches for such algorithms in HPC. We present a core-distribution scheduler which realizes the migration of computational power by distributing the cores depending on the requirements specified by one or more parallel program instances. We validate our approach with different benchmark suites for simulations with artificial workload as well as applications based on dynamically adaptive shallow water simulations, and investigate concurrently executed adaptivity parameter studies on realistic Tsunami simulations. The invasive approach results in significantly faster overall execution times and higher hardware utilization than alternative approaches. A dynamic resource management is therefore mandatory for a more efficient execution of scenarios similar to our simulations, e.g. several Tsunami simulations in urgent computing, to overcome strong scalability challenges in the area of HPC. The optimizations obtained by invasive migration of cores can be generalized to similar classes of algorithms with dynamic resource requirements.", "paper_title": "Invasive Compute Balancing for Applications with Shared and Hybrid Parallelization", "paper_id": "WOS:000361837300004"}