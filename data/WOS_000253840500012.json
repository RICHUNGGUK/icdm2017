{"auto_keywords": [{"score": 0.03883772591713823, "phrase": "systematic_and_automated_way"}, {"score": 0.03075285462588427, "phrase": "espam"}, {"score": 0.00481495049065317, "phrase": "modern_embedded_systems"}, {"score": 0.004719359108879602, "phrase": "high-throughput_multimedia"}, {"score": 0.0046256566852302256, "phrase": "signal_processing"}, {"score": 0.004533806239310673, "phrase": "embedded_applications"}, {"score": 0.00440825801245188, "phrase": "performance_requirements"}, {"score": 0.004234884779773412, "phrase": "embedded_system_architectures"}, {"score": 0.004167451906343558, "phrase": "single_processor"}, {"score": 0.004084662575167727, "phrase": "emerging_embedded_system-on-chip_platforms"}, {"score": 0.003606711217432998, "phrase": "design_time"}, {"score": 0.0033958751452139984, "phrase": "efficient_solution"}, {"score": 0.0031337465656628132, "phrase": "embedded_system"}, {"score": 0.0029862549873935496, "phrase": "automated_multiprocessor_system_design"}, {"score": 0.002868646843975439, "phrase": "design_specification"}, {"score": 0.0028003107731426322, "phrase": "low-level_c"}, {"score": 0.0027667539384678814, "phrase": "higher_system_level"}, {"score": 0.0026577673946415583, "phrase": "system-level_platform"}, {"score": 0.002604890546456604, "phrase": "mapping_specifications"}, {"score": 0.0025736694380861604, "phrase": "multiprocessor_platform"}, {"score": 0.0024230746206056536, "phrase": "multiprocessor_platforms"}, {"score": 0.0021650954526279895, "phrase": "sobel"}, {"score": 0.002130545585846588, "phrase": "discrete_wavelet_transform"}, {"score": 0.0021049977753042253, "phrase": "motion_jpeg"}], "paper_keywords": ["automated programming of multiProcessor systems-on-chip (MPSoC)", " design automation for MPSoC", " system-level design"], "paper_abstract": "For modern embedded systems in the realm of high-throughput multimedia, imaging, and signal processing, the complexity of embedded applications has reached a point where the performance requirements of these applications can no longer be supported by embedded system architectures based on a single processor. Thus, the emerging embedded system-on-chip platforms are increasingly becoming multiprocessor architectures. As a consequence, two major problems emerge, namely how to design and how to program such multiprocessor platforms in a systematic and automated way in order to reduce the design time and to satisfy the performance needs of applications executed on such platforms. As an efficient solution to these two problems, in this paper, we present the methodology and techniques implemented in a tool called Embedded System-level Platform synthesis and Application Mapping (ESPAM) for automated multiprocessor system design, programming, and implementation. ESPAM moves the design specification and programming from the Register Transfer Level and low-level C to a higher system level of abstraction. We explain how, starting from system-level platform, application, and mapping specifications, a multiprocessor platform is synthesized, programmed, and implemented in a systematic and automated way. The class of multiprocessor platforms we consider is introduced as well. To validate and evaluate our methodology, we used ESPAM to automatically generate and program several multiprocessor systems that execute three image processing applications, namely Sobel edge detection, Discrete Wavelet Transform, and Motion JPEG encoder. The performance of the systems that execute these applications is also presented in this paper.", "paper_title": "Systematic and automated multiprocessor system design, programming, and implementation", "paper_id": "WOS:000253840500012"}