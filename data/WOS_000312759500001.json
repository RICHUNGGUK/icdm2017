{"auto_keywords": [{"score": 0.03888571701763212, "phrase": "junior_software_developers"}, {"score": 0.00481495049065317, "phrase": "traditional_software_development"}, {"score": 0.004672953146379813, "phrase": "today's_project_managers"}, {"score": 0.004494570360108983, "phrase": "software_applications"}, {"score": 0.004414542249381157, "phrase": "empirical_data"}, {"score": 0.004096082254543022, "phrase": "developer's_intention"}, {"score": 0.003927848423072668, "phrase": "different_paradigm"}, {"score": 0.0036225919379274875, "phrase": "business_layer"}, {"score": 0.0033914308417007316, "phrase": "social_network"}, {"score": 0.003321008590273796, "phrase": "fixed_set"}, {"score": 0.0030904433394138963, "phrase": "different_method"}, {"score": 0.0028758391869611374, "phrase": "model-driven_method"}, {"score": 0.0027328817607818207, "phrase": "previous_developers'_experiences"}, {"score": 0.00249767641333441, "phrase": "model-driven_development_environment"}, {"score": 0.0024311346712789553, "phrase": "model-driven_development_methods"}, {"score": 0.0023949342544966916, "phrase": "great_potential"}, {"score": 0.0022419349154472806, "phrase": "different_population"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["MDD", " MBD", " Code-centric development", " Experiment", " Usefulness", " Ease of use"], "paper_abstract": "Context: Today's project managers have a myriad of methods to choose from for the development of software applications. However, they lack empirical data about the character of these methods in terms of usefulness, ease of use or compatibility, all of these being relevant variables to assess the developer's intention to use them. Objective: To compare three methods, each following a different paradigm (Model-Driven, Model-Based and Code-Centric) with respect to their adoption potential by junior software developers engaged in the development of the business layer of a Web 2.0 application. Method: We have conducted a quasi-experiment with 26 graduate students of the University of Alicante. The application developed was a Social Network, which was organized around a fixed set of modules. Three of them, similar in complexity, were used for the experiment. Subjects were asked to use a different method for each module, and then to answer a questionnaire that gathered their perceptions during such use. Results: The results show that the Model-Driven method is regarded as the most useful, although it is also considered the least compatible with previous developers' experiences. They also show that junior software developers feel comfortable with the use of models, and that they are likely to use them if the models are accompanied by a Model-Driven development environment. Conclusions: Despite their relatively low level of compatibility, Model-Driven development methods seem to show a great potential for adoption. That said, however, further experimentation is needed to make it possible to generalize the results to a different population, different methods, other languages and tools, different domains or different application sizes. (C) 2012 Elsevier B.V. All rights reserved.", "paper_title": "MDD vs. traditional software development: A practitioner's subjective perspective", "paper_id": "WOS:000312759500001"}