{"auto_keywords": [{"score": 0.0464485993141056, "phrase": "multithreaded_programs"}, {"score": 0.00481495049065317, "phrase": "structured_shared-memory_communication"}, {"score": 0.004603244077348199, "phrase": "communication-centric_approach"}, {"score": 0.004400804926266097, "phrase": "shared_memory"}, {"score": 0.004327196832280818, "phrase": "inter-thread_communication"}, {"score": 0.003999578057088828, "phrase": "race_detection"}, {"score": 0.003954837422946628, "phrase": "atomicity_checking"}, {"score": 0.003888659470009222, "phrase": "prior_work"}, {"score": 0.00345530020388352, "phrase": "data_items"}, {"score": 0.003175556211659149, "phrase": "composable_specifications"}, {"score": 0.003140004304719746, "phrase": "multiple_levels"}, {"score": 0.0028695095228791724, "phrase": "precise_meaning"}, {"score": 0.002743105561254975, "phrase": "formal_semantics"}, {"score": 0.0026222551419772867, "phrase": "dynamic-analysis_tool"}, {"score": 0.002593024773106445, "phrase": "java"}, {"score": 0.0025494354909453847, "phrase": "program_execution"}, {"score": 0.0021651504858015364, "phrase": "modular_structure"}, {"score": 0.0021408862709571615, "phrase": "multithreaded_applications"}], "paper_keywords": ["Languages", " Verification", " Reliability", " concurrency", " software reliability", " bug detection", " annotation", " specification", " shared memory"], "paper_abstract": "In this paper we propose a communication-centric approach to specifying and checking how multithreaded programs use shared memory to perform inter-thread communication. Our approach complements past efforts for improving the safety of multithreaded programs such as race detection and atomicity checking. Unlike prior work, we focus on what pieces of code are allowed to communicate with one another, as opposed to declaring what data items are shared or what code blocks should be atomic. We develop a language that supports composable specifications at multiple levels of abstraction and that allows libraries to specify whether or not shared-memory communication is exposed to clients. The precise meaning of a specification is given with a formal semantics we present. We have developed a dynamic-analysis tool for Java that observes program execution to see if it obeys a specification. We report results for using the tool on several benchmark programs to which we added specifications, concluding that our approach matches the modular structure of multithreaded applications and that our tool is performant enough for use in development and testing.", "paper_title": "Composable Specifications for Structured Shared-Memory Communication", "paper_id": "WOS:000286595800010"}