{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "distributed"}, {"score": 0.0391938019961557, "phrase": "sparse"}, {"score": 0.004525629293824217, "phrase": "first-class_objects"}, {"score": 0.004081385289516914, "phrase": "scientific_computing"}, {"score": 0.0039431758381711125, "phrase": "basic_building_block"}, {"score": 0.003531474887552889, "phrase": "multi-core_architectures"}, {"score": 0.003459191419478298, "phrase": "existing_vhlls"}, {"score": 0.0033651019362620866, "phrase": "emerging_architectures"}, {"score": 0.003296212583539166, "phrase": "new_ones"}, {"score": 0.00307657476125683, "phrase": "language_design"}, {"score": 0.0028715299874549245, "phrase": "sparse_matrix_infrastructure"}, {"score": 0.002467140591777737, "phrase": "large_graphs"}, {"score": 0.0021342613107011624, "phrase": "sparse_matrix_infrastructures"}], "paper_keywords": [""], "paper_abstract": "Sparse matrices are first-class objects in many VHLLs (very high-level languages) that are used for scientific computing. They are a basic building block for various numerical and combinatorial algorithms. Parallel computing is becoming ubiquitous, specifically due to the advent of multi-core architectures. As existing VHLLs are adapted to emerging architectures, and new ones are conceived, one must rethink about trade-offs in language design. We describe the design and implementation of a sparse matrix infrastructure for STAR-P, a parallel implementation of the MATLAB(R) programming language. We demonstrate the versatility of our infrastructure by using it to implement a benchmark that creates and manipulates large graphs. Our design is by no means specific to STAR-P-we hope it will influence the design of sparse matrix infrastructures in other languages.", "paper_title": "Distributed sparse matrices for very high level languages", "paper_id": "WOS:000257315600005"}