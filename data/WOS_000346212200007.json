{"auto_keywords": [{"score": 0.045366511165128576, "phrase": "dfa"}, {"score": 0.00481495049065317, "phrase": "scalability_and_performance_barriers"}, {"score": 0.0046993598473345395, "phrase": "rich_expressiveness"}, {"score": 0.00453113241842654, "phrase": "contemporary_network_security_systems"}, {"score": 0.00450368324850566, "phrase": "signature-based_intrusion_detection"}, {"score": 0.004422325007817267, "phrase": "regex_matching"}, {"score": 0.004276949941406725, "phrase": "first_choice"}, {"score": 0.0040987896316698495, "phrase": "well_known_state_explosion_problem"}, {"score": 0.004000322474812552, "phrase": "prohibitive_memory_overhead"}, {"score": 0.003976076057473637, "phrase": "practical_applications"}, {"score": 0.0038805454197432337, "phrase": "wide_variety"}, {"score": 0.003857022173615399, "phrase": "dfa_compression_techniques"}, {"score": 0.0037075456471849892, "phrase": "ever_increasing_network_traffic_bandwidth"}, {"score": 0.0035855828944304506, "phrase": "dfa_problem"}, {"score": 0.003343336516033681, "phrase": "complete_algorithmic_solution"}, {"score": 0.0029602552900111433, "phrase": "complex_regexes"}, {"score": 0.0029422942175866057, "phrase": "overlapping-free_segments"}, {"score": 0.0028978654846251047, "phrase": "massive_repetitiveness"}, {"score": 0.0028715299874549245, "phrase": "resulting_segments"}, {"score": 0.0026129863248033807, "phrase": "tailor-made_compression_approach"}, {"score": 0.002565695161331182, "phrase": "state_transitions"}, {"score": 0.0025423706961391034, "phrase": "corresponding_dfa."}, {"score": 0.002519257735651759, "phrase": "final_matching_engine"}, {"score": 0.0024586427394152196, "phrase": "small_relation_mapping_table"}, {"score": 0.0023776656246300063, "phrase": "high_performance"}, {"score": 0.0023632309822037637, "phrase": "semantic_equivalence"}, {"score": 0.002348883765159185, "phrase": "experimental_evaluation"}, {"score": 0.0023133947578542, "phrase": "succinct_matching_engines"}, {"score": 0.002299349400076823, "phrase": "memory_usage"}, {"score": 0.0022508572821818124, "phrase": "real-world_snort_and_bra_regex_sets"}, {"score": 0.0021049977753042253, "phrase": "elsevier_b.v."}], "paper_keywords": ["Regular expression matching", " Deterministic finite automata (DFA)", " Signature-based intrusion detection"], "paper_abstract": "Regular expressions (regexes) provide rich expressiveness to specify the signatures of intrusions and are widely used in contemporary network security systems for signature-based intrusion detection. To perform very fast regex matching, deterministic finite automata (DFA) has been the first choice because its time complexity is constant O(1). Unfortunately, DFA often suffers the well known state explosion problem and, consequently, tends to require prohibitive memory overhead in practical applications. To address the problem, a wide variety of DFA compression techniques have been proposed; however, few can keep up with the ever increasing network traffic bandwidth and regex set complexity. This paper proposes that the DFA problem is rooted in regexes (rather than in DFA), i.e., semantic overlapping of regexes, and accordingly presents a complete algorithmic solution PaCC (Partition, Compression, and Combination), that can transform the given large-scale set of complex regexes into a compact and fast matching engine using DFA as its core. PaCC fundamentally defuses state explosion for DFA by partitioning complex regexes into overlapping-free segments. By exploiting the massive repetitiveness among the resulting segments, PaCC can further deflate corresponding DFA in terms of the number of states. Moreover, on the basis of the characteristics of these segments, PaCC takes a tailor-made compression approach and reduces over 96% of the state transitions for the corresponding DFA. In the final matching engine, the combination of DFA and a small relation mapping table, built from segments and their syntagmatic relations, respectively, guarantees high performance and semantic equivalence. Experimental evaluation shows that PaCC produces succinct matching engines with memory usage proportional to the size of the real-world Snort and Bra regex sets, with speeds of up to 1.7 Gbps per core on a HP Z220 SFF workstation with a 3.40 GHz Intel Core i7-3770. (C) 2014 Elsevier B.V. All rights reserved.", "paper_title": "Practical regular expression matching free of scalability and performance barriers", "paper_id": "WOS:000346212200007"}