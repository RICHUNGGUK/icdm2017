{"auto_keywords": [{"score": 0.03194333757471042, "phrase": "rdbms."}, {"score": 0.00481495049065317, "phrase": "relational_database_systems"}, {"score": 0.004647105813224402, "phrase": "user_demand"}, {"score": 0.00457696724030363, "phrase": "temporal_databases"}, {"score": 0.00437281181878921, "phrase": "dbms_vendors"}, {"score": 0.004328689762198895, "phrase": "standard_groups"}, {"score": 0.0038131738052230254, "phrase": "temporal_support"}, {"score": 0.003774690044956547, "phrase": "rdbms"}, {"score": 0.0036801209922064817, "phrase": "database_engine"}, {"score": 0.0034803228231621687, "phrase": "temporal_applications"}, {"score": 0.003445174898115646, "phrase": "commercial_database_systems"}, {"score": 0.003393115177189967, "phrase": "long_recognized_problem"}, {"score": 0.003176503611046678, "phrase": "sql"}, {"score": 0.002884317729022721, "phrase": "temporal_coalescing_queries"}, {"score": 0.0028551716387011637, "phrase": "temporal_data_models"}, {"score": 0.002727606388863445, "phrase": "native_relational_user"}, {"score": 0.0026727518280215525, "phrase": "uda"}, {"score": 0.0025663181430010686, "phrase": "single_scan"}, {"score": 0.0024641134634779535, "phrase": "temporal_queries"}, {"score": 0.002390133671838151, "phrase": "olap_functions"}, {"score": 0.0023066199295447686, "phrase": "new_findings"}, {"score": 0.002260211578368138, "phrase": "current_rdbms"}, {"score": 0.002181227522730908, "phrase": "efficient_temporal_queries"}, {"score": 0.002126502291103601, "phrase": "new_paradigm"}, {"score": 0.0021049977753042253, "phrase": "temporal_database_research"}], "paper_keywords": [""], "paper_abstract": "The interest in, and user demand for, temporal databases have only increased with time; unfortunately, DBMS vendors and standard groups have not moved aggressively to extend their systems with support for transaction-time or valid-time. This can be partially attributed to the expected major R&D costs to add temporal support to RDBMS by directly extending the database engine. The newly introduced SQL:2003 standards have actually significantly enhanced our ability to support temporal applications in commercial database systems. The long recognized problem of coalescing, which is difficult to support in the framework of SQL: 1992, can now be effectively supported in RDBMS. In this paper, we investigate alternatives of temporal coalescing queries under temporal data models in RDBMS. We provide an SQL:2003-based query algorithm and a native relational user defined aggregates (UDA) approach - both approaches only require a single scan of the database. We conclude that temporal queries can be best supported by OLAP functions supported in the current SQL:2003 standards. These new findings demonstrate that the current RDBMS are mature enough to directly support efficient temporal queries, and provide a new paradigm for temporal database research and implementation.", "paper_title": "Efficient temporal coalescing query support in relational database systems", "paper_id": "WOS:000241155300066"}