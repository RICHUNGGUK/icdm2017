{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "cache_behavior"}, {"score": 0.018218119788962848, "phrase": "irregular_access_patterns"}, {"score": 0.004601508848655033, "phrase": "memory_hierarchies"}, {"score": 0.004442032546224076, "phrase": "essential_role"}, {"score": 0.004331501320993783, "phrase": "nowadays_general-purpose_and_embedded_computing_systems"}, {"score": 0.0034003686971964707, "phrase": "compressed_sparse_matrices"}, {"score": 0.0029374939071038146, "phrase": "systematic_analytical_modeling_technique"}, {"score": 0.0026688629249775925, "phrase": "automated_analysis"}, {"score": 0.0023523750536537102, "phrase": "first_model"}, {"score": 0.0023053339328456234, "phrase": "desirable_characteristics"}, {"score": 0.0021049977753042253, "phrase": "compiler_optimizations"}], "paper_keywords": ["measurement", " performance", " analytical modeling", " memory hierarchy", " irregular access patterns", " performance prediction"], "paper_abstract": "The performance of memory hierarchies, in which caches play an essential role, is critical in nowadays general-purpose and embedded computing systems because of the growing memory bottleneck problem. Unfortunately, cache behavior is very unstable and difficult to predict. This is particularly true in the presence of irregular access patterns, which exhibit little locality. Such patterns are very common, for example, in applications in which pointers or compressed sparse matrices give place to indirections. Nevertheless, cache behavior in the presence of irregular access patterns has not been widely studied. In this paper we present an extension of a systematic analytical modeling technique based on PMEs (probabilistic miss equations), previously developed by the authors, that allows the automated analysis of the cache behavior for codes with irregular access patterns resulting from indirections. The model generates very accurate predictions despite the irregularities and has very low computing requirements, being the first model that gathers these desirable characteristics that can automatically analyze this kind of codes. These properties enable this model to help drive compiler optimizations, as we show with an example.", "paper_title": "Precise automatable analytical modeling of the cache behavior of codes with indirections", "paper_id": "WOS:000250622600003"}