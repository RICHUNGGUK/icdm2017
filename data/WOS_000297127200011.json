{"auto_keywords": [{"score": 0.05007852962010532, "phrase": "large-scale_continuous_optimization_problems"}, {"score": 0.02513032388875313, "phrase": "final_algorithm"}, {"score": 0.004462105963334103, "phrase": "high-performance_optimization_algorithms"}, {"score": 0.004157561334726201, "phrase": "implementation_details"}, {"score": 0.004046020290832207, "phrase": "parameter_values"}, {"score": 0.003980531478122155, "phrase": "intermediate_designs"}, {"score": 0.003937459891461576, "phrase": "proper_parameter_setting"}, {"score": 0.003811010743703935, "phrase": "effective_assessment"}, {"score": 0.0037697665240643066, "phrase": "algorithmic_components"}, {"score": 0.003589602322126282, "phrase": "good_algorithmic_component"}, {"score": 0.003362660648932247, "phrase": "promising_components"}, {"score": 0.003219368413618912, "phrase": "bad_parameter_settings"}, {"score": 0.0031845067058084613, "phrase": "automatic_parameter_tuning_techniques"}, {"score": 0.003048782877550259, "phrase": "peak_performance"}, {"score": 0.0030157628075954588, "phrase": "already_designed_algorithms"}, {"score": 0.00295078850927459, "phrase": "automatic_parameter_tuning"}, {"score": 0.002887210021573995, "phrase": "crucial_role"}, {"score": 0.0028404241985421096, "phrase": "development_cycle"}, {"score": 0.0028096544129939277, "phrase": "optimization_algorithms"}, {"score": 0.002675252546913683, "phrase": "case_study"}, {"score": 0.0024923577071656014, "phrase": "particle_swarm-based_optimization_algorithm"}, {"score": 0.0022967713922705, "phrase": "whole_redesign_process"}, {"score": 0.002210814150677161, "phrase": "scalability_behavior"}, {"score": 0.0021049977753042253, "phrase": "special_issue"}], "paper_keywords": ["Parameter tuning", " Large-scale continuous optimization", " Incremental particle swarms", " Particle swarm optimization", " Local search"], "paper_abstract": "The development cycle of high-performance optimization algorithms requires the algorithm designer to make several design decisions. These decisions range from implementation details to the setting of parameter values for testing intermediate designs. Proper parameter setting can be crucial for the effective assessment of algorithmic components because a bad parameter setting can make a good algorithmic component perform poorly. This situation may lead the designer to discard promising components that just happened to be tested with bad parameter settings. Automatic parameter tuning techniques are being used by practitioners to obtain peak performance from already designed algorithms. However, automatic parameter tuning also plays a crucial role during the development cycle of optimization algorithms. In this paper, we present a case study of a tuning-in-the-loop approach for redesigning a particle swarm-based optimization algorithm for tackling large-scale continuous optimization problems. Rather than just presenting the final algorithm, we describe the whole redesign process. Finally, we study the scalability behavior of the final algorithm in the context of this special issue.", "paper_title": "An incremental particle swarm for large-scale continuous optimization problems: an example of tuning-in-the-loop (re)design of optimization algorithms", "paper_id": "WOS:000297127200011"}