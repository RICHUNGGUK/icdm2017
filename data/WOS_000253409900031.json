{"auto_keywords": [{"score": 0.04714657528813317, "phrase": "ghc"}, {"score": 0.00481495049065317, "phrase": "dynamic_pointer_tagging"}, {"score": 0.004598933498016774, "phrase": "haskell_programs"}, {"score": 0.0044688500725247726, "phrase": "large_numbers"}, {"score": 0.004417848254181138, "phrase": "mispredicted_branches"}, {"score": 0.00436742595270452, "phrase": "modern_processors"}, {"score": 0.004195418010131832, "phrase": "''_tagless_''_aspect"}, {"score": 0.003634371940842838, "phrase": "unpredictable_indirect_jumps"}, {"score": 0.003372844338742438, "phrase": "spare_low_bits"}, {"score": 0.0032028587883593702, "phrase": "pointed-to_object"}, {"score": 0.00290473242917264, "phrase": "production_compiler"}, {"score": 0.0027741761880779535, "phrase": "detailed_descriptions"}, {"score": 0.002664749302333897, "phrase": "significant_performance_improvements"}, {"score": 0.0022296340517805125, "phrase": "mispredicted_branch_instructions"}], "paper_keywords": ["languages", " performance"], "paper_abstract": "In the light of evidence that Haskell programs compiled by GHC exhibit large numbers of mispredicted branches on modern processors, we re-examine the '' tagless '' aspect of the STG-machine that GHC uses as its evaluation model. We propose two tagging strategies: a simple strategy called semitagging that seeks to avoid one common source of unpredictable indirect jumps, and a more complex strategy called dynamic pointertagging that uses the spare low bits in a pointer to encode information about the pointed-to object. Both of these strategies have been implemented and exhaustively measured in the context of a production compiler, GHC, and the paper contains detailed descriptions of the implementations. Our measurements demonstrate significant performance improvements (14% for dynamic pointer-tagging with only a 2% increase in code size), and we further demonstrate that much of the improvement can be attributed to the elimination of mispredicted branch instructions. As part of our investigations we also discovered that one optimisation in the STG-machine, vectored-returns, is no longer worthwhile and we explain why.", "paper_title": "Faster laziness using dynamic pointer tagging", "paper_id": "WOS:000253409900031"}